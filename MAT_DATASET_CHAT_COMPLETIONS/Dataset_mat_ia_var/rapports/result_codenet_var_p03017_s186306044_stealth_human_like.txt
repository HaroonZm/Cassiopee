================================================================================
ANALYSE DE PRÉDICTION TOKEN PAR TOKEN (BATCH API)
Date: 2025-06-04 19:57:59
Modèle de tokenisation: gpt-4o-mini
================================================================================

SCRIPT ANALYSÉ:
--------------------------------------------------------------------------------
import re

# On récupère tout d'un coup, ok
n, a, b, c, d = map(int, input().split())
s = input()

# Je sais pas trop si on doit vraiment retirer 1 partout. Ici on fait juste -1 où il faut
start = a - 1
stop = max(b, d)

# On cherche un doublon de # sur la partie importante
if re.search('##', s[start:stop]):
    print('No')
else:
    # Faut voir où on peut doubler
    if c > d:  # Là il faudra dépasser l'autre, c'est un peu délicat...
        trio = re.search('\.\.\.', s[b-2:d+1])  # Je crois qu'il faut regarder un peu avant b pour avoir de la marge
        if trio:
            print('Yes')  # Ok, on peut dépasser
        else:
            print('No')  # Zut alors
    else:
        print('Yes')  # Si y'a pas de dépassement c'est bon, en théorie

# Bon, il faudrait sûrement vérifier pour des cas particuliers mais ça doit suffire
--------------------------------------------------------------------------------

RÉSULTATS D'ANALYSE TOKEN PAR TOKEN:
--------------------------------------------------------------------------------
Token 0: 'import' (ID: 561)
  → Token d'amorce (pas de prédiction)

Token 1: ' re' (ID: 322)
  → Token d'amorce (pas de prédiction)

Token 2: '

' (ID: 279)
  → Token d'amorce (pas de prédiction)

Token 3: '#' (ID: 2)
  Prédit: '.'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '.' → logprob: -1.028550386428833
    2. '[' → logprob: -1.278550386428833
    3. '\n' → logprob: -1.778550386428833
    4. '\.' → logprob: -2.903550386428833
    5. '\b' → logprob: -3.028550386428833
    6. '```' → logprob: -3.778550386428833
    7. '\' → logprob: -4.028550148010254
    8. 'g' → logprob: -4.903550148010254
    9. '(' → logprob: -5.403550148010254
    10. '\[' → logprob: -5.403550148010254

Token 4: ' On' (ID: 2160)
  Prédit: ' pattern'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' pattern' → logprob: -0.5067919492721558
    2. 'pattern' → logprob: -1.1317919492721558
    3. 'def' → logprob: -4.256792068481445
    4. ' def' → logprob: -4.506792068481445
    5. ' match' → logprob: -5.756792068481445
    6. ' Define' → logprob: -5.756792068481445
    7. ' #' → logprob: -5.881792068481445
    8. 'Define' → logprob: -6.006792068481445
    9. 'p' → logprob: -6.131792068481445
    10. ' Pattern' → logprob: -6.256792068481445

Token 5: ' récup' (ID: 62856)
  Prédit: 'e'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'e' → logprob: -0.007594910915941
    2. 'ly' → logprob: -5.632595062255859
    3. 'line' → logprob: -6.382595062255859
    4. '_' → logprob: -6.632595062255859
    5. 'ce' → logprob: -8.75759506225586
    6. 'eline' → logprob: -8.88259506225586
    7. ' e' → logprob: -9.00759506225586
    8. 'l' → logprob: -9.25759506225586
    9. ' a' → logprob: -9.75759506225586
    10. '```' → logprob: -10.00759506225586

Token 6: 'ère' (ID: 4346)
  Prédit: 'ère'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'ère' → logprob: -0.003554100636392832
    2. 'è' → logprob: -6.628553867340088
    3. '\' → logprob: -7.128553867340088
    4. 'ére' → logprob: -7.753553867340088
    5. 'èr' → logprob: -8.128554344177246
    6. 'èrent' → logprob: -9.253554344177246
    7. '```' → logprob: -9.253554344177246
    8. '#' → logprob: -9.628554344177246
    9. '`' → logprob: -9.753554344177246
    10. 'er' → logprob: -9.878554344177246

Token 7: ' tout' (ID: 5501)
  Prédit: ' le'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' le' → logprob: -1.1200661659240723
    2. 'le' → logprob: -1.6200661659240723
    3. ' la' → logprob: -1.7450661659240723
    4. ' ' → logprob: -1.9950661659240723
    5. 'la' → logprob: -2.7450661659240723
    6. 'l' → logprob: -3.4950661659240723
    7. 'les' → logprob: -3.7450661659240723
    8. ' l' → logprob: -3.9950661659240723
    9. ' les' → logprob: -4.245066165924072
    10. ' ' → logprob: -4.370066165924072

Token 8: ' d' (ID: 272)
  Prédit: ' le'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' le' → logprob: -0.913078784942627
    2. 's' → logprob: -2.038078784942627
    3. '.' → logprob: -2.413078784942627
    4. ' ' → logprob: -3.038078784942627
    5. ' ce' → logprob: -3.163078784942627
    6. 'le' → logprob: -3.163078784942627
    7. ':' → logprob: -3.288078784942627
    8. '[' → logprob: -3.538078784942627
    9. '\s' → logprob: -3.538078784942627
    10. '```' → logprob: -3.788078784942627

Token 9: ''un' (ID: 9788)
  Prédit: 'e'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'e' → logprob: -0.08729270100593567
    2. ''' → logprob: -3.2122926712036133
    3. 'es' → logprob: -3.5872926712036133
    4. 'u' → logprob: -4.962292671203613
    5. ''une' → logprob: -6.087292671203613
    6. 'é' → logprob: -6.337292671203613
    7. ''un' → logprob: -7.087292671203613
    8. '_' → logprob: -7.337292671203613
    9. 'a' → logprob: -7.462292671203613
    10. '')' → logprob: -7.712292671203613

Token 10: ' coup' (ID: 25465)
  Prédit: ' fichier'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' fichier' → logprob: -1.3341010808944702
    2. 'f' → logprob: -1.4591010808944702
    3. 'e' → logprob: -1.5841010808944702
    4. 'texte' → logprob: -1.9591010808944702
    5. 's' → logprob: -3.9591012001037598
    6. ' string' → logprob: -4.20910120010376
    7. 'string' → logprob: -4.45910120010376
    8. ' document' → logprob: -4.45910120010376
    9. ' texte' → logprob: -4.58410120010376
    10. 'es' → logprob: -4.70910120010376

Token 11: ',' (ID: 11)
  Prédit: 'data'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'data' → logprob: -0.23345743119716644
    2. 'text' → logprob: -1.9834574460983276
    3. 'result' → logprob: -3.858457326889038
    4. 'texte' → logprob: -4.233457565307617
    5. 'matches' → logprob: -5.108457565307617
    6. 's' → logprob: -5.233457565307617
    7. 'match' → logprob: -5.608457565307617
    8. 'd' → logprob: -5.733457565307617
    9. '_' → logprob: -5.983457565307617
    10. 'don' → logprob: -5.983457565307617

Token 12: ' ok' (ID: 4763)
  Prédit: ' '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' ' → logprob: -0.7934344410896301
    2. 's' → logprob: -1.6684343814849854
    3. 'r' → logprob: -1.9184343814849854
    4. '\s' → logprob: -3.1684343814849854
    5. 'import' → logprob: -3.5434343814849854
    6. '#' → logprob: -3.9184343814849854
    7. 'le' → logprob: -4.2934346199035645
    8. '\' → logprob: -4.6684346199035645
    9. 're' → logprob: -4.9184346199035645
    10. 'pattern' → logprob: -5.0434346199035645

Token 13: '
' (ID: 198)
  Prédit: 'data'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'data' → logprob: -1.2320889234542847
    2. 'pattern' → logprob: -1.3570889234542847
    3. 'matches' → logprob: -1.6070889234542847
    4. 'text' → logprob: -2.107089042663574
    5. 'result' → logprob: -3.232089042663574
    6. 'match' → logprob: -3.482089042663574
    7. 'html' → logprob: -3.732089042663574
    8. 'regex' → logprob: -4.982089042663574
    9. 'content' → logprob: -5.107089042663574
    10. 'texte' → logprob: -5.357089042663574

Token 14: 'n' (ID: 77)
  Prédit: 'data'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'data' → logprob: -0.853817343711853
    2. 'text' → logprob: -1.603817343711853
    3. 'matches' → logprob: -1.978817343711853
    4. 'pattern' → logprob: -2.2288174629211426
    5. 'result' → logprob: -2.9788174629211426
    6. 'response' → logprob: -4.228817462921143
    7. 'results' → logprob: -4.478817462921143
    8. 'match' → logprob: -4.478817462921143
    9. 'html' → logprob: -4.603817462921143
    10. 'regex' → logprob: -4.978817462921143

Token 15: ',' (ID: 11)
  Prédit: 'b'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'b' → logprob: -1.621221661567688
    2. 'umber' → logprob: -1.621221661567688
    3. 'umbers' → logprob: -1.746221661567688
    4. 'e' → logprob: -2.3712215423583984
    5. ' =' → logprob: -3.1212215423583984
    6. 'um' → logprob: -3.1212215423583984
    7. 'ame' → logprob: -3.2462215423583984
    8. 'ew' → logprob: -3.3712215423583984
    9. '_' → logprob: -3.6212215423583984
    10. 'a' → logprob: -3.8712215423583984

Token 16: ' a' (ID: 261)
  Prédit: ' m'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' m' → logprob: -0.7919785380363464
    2. ' t' → logprob: -1.9169785976409912
    3. ' text' → logprob: -2.541978597640991
    4. ' s' → logprob: -2.541978597640991
    5. ' data' → logprob: -3.041978597640991
    6. ' r' → logprob: -3.041978597640991
    7. 'm' → logprob: -3.791978597640991
    8. ' p' → logprob: -3.916978597640991
    9. ' input' → logprob: -4.166978359222412
    10. 'r' → logprob: -4.541978359222412

Token 17: ',' (ID: 11)
  Prédit: ' ='
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' =' → logprob: -0.5508162379264832
    2. ',' → logprob: -1.675816297531128
    3. '=' → logprob: -2.175816297531128
    4. 'll' → logprob: -3.425816297531128
    5. 'm' → logprob: -4.425816059112549
    6. 'pp' → logprob: -4.425816059112549
    7. 'rray' → logprob: -4.925816059112549
    8. 'b' → logprob: -4.925816059112549
    9. 't' → logprob: -4.925816059112549
    10. 'rg' → logprob: -5.175816059112549

Token 18: ' b' (ID: 287)
  Prédit: ' b'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' b' → logprob: -0.3033094108104706
    2. 'b' → logprob: -1.678309440612793
    3. ' m' → logprob: -3.303309440612793
    4. 'm' → logprob: -4.178309440612793
    5. ' t' → logprob: -5.928309440612793
    6. ' p' → logprob: -6.053309440612793
    7. ' s' → logprob: -6.053309440612793
    8. ' k' → logprob: -6.053309440612793
    9. ' d' → logprob: -6.178309440612793
    10. ' =' → logprob: -6.303309440612793

Token 19: ',' (ID: 11)
  Prédit: ' ='
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' =' → logprob: -0.01605759747326374
    2. '=' → logprob: -4.14105749130249
    3. ',' → logprob: -11.016057968139648
    4. ' ' → logprob: -12.641057968139648
    5. ')' → logprob: -13.766057968139648
    6. '  ' → logprob: -14.516057968139648
    7. '=input' → logprob: -14.641057968139648
    8. 'import' → logprob: -15.703557968139648
    9. 's' → logprob: -15.828557968139648
    10. '=re' → logprob: -15.953557968139648

Token 20: ' c' (ID: 274)
  Prédit: ' c'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' c' → logprob: -0.3256354331970215
    2. 'c' → logprob: -1.3256354331970215
    3. ' m' → logprob: -5.8256354331970215
    4. ' =' → logprob: -6.0756354331970215
    5. ' t' → logprob: -6.9506354331970215
    6. 'm' → logprob: -6.9506354331970215
    7. ' s' → logprob: -7.0756354331970215
    8. '*' → logprob: -7.5756354331970215
    9. '=' → logprob: -7.8256354331970215
    10. ',' → logprob: -7.9506354331970215

Token 21: ',' (ID: 11)
  Prédit: ' ='
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' =' → logprob: -0.0575462281703949
    2. '=' → logprob: -2.9325461387634277
    3. ',' → logprob: -5.932546138763428
    4. ')' → logprob: -13.057546615600586
    5. '=input' → logprob: -13.432546615600586
    6. ' ,' → logprob: -13.932546615600586
    7. ' ' → logprob: -14.057546615600586
    8. 's' → logprob: -14.432546615600586
    9. ' =
' → logprob: -14.932546615600586
    10. ' =
' → logprob: -15.182546615600586

Token 22: ' d' (ID: 272)
  Prédit: ' d'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' d' → logprob: -0.6944934725761414
    2. 'd' → logprob: -0.8194934725761414
    3. ' =' → logprob: -3.319493532180786
    4. '=' → logprob: -4.569493293762207
    5. ',' → logprob: -4.569493293762207
    6. ' ' → logprob: -7.069493293762207
    7. ',d' → logprob: -7.444493293762207
    8. ' m' → logprob: -7.694493293762207
    9. 'm' → logprob: -8.069493293762207
    10. 's' → logprob: -8.819493293762207

Token 23: ' =' (ID: 314)
  Prédit: ' ='
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' =' → logprob: -0.14288567006587982
    2. '=' → logprob: -2.017885684967041
    3. ',' → logprob: -8.517885208129883
    4. ')' → logprob: -12.642885208129883
    5. ' ' → logprob: -12.767885208129883
    6. '=input' → logprob: -13.142885208129883
    7. '```' → logprob: -15.142885208129883
    8. ' =
' → logprob: -15.517885208129883
    9. '=int' → logprob: -15.767885208129883
    10. '<|end|>' → logprob: -15.955385208129883

Token 24: ' map' (ID: 4014)
  Prédit: ' map'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' map' → logprob: -0.18301451206207275
    2. 'map' → logprob: -1.8080145120620728
    3. ' list' → logprob: -7.183014392852783
    4. 'input' → logprob: -7.308014392852783
    5. ' input' → logprob: -7.558014392852783
    6. ' [' → logprob: -7.808014392852783
    7. 'list' → logprob: -7.933014392852783
    8. '[' → logprob: -8.308014869689941
    9. ' ' → logprob: -8.808014869689941
    10. '0' → logprob: -10.183014869689941

Token 25: '(int' (ID: 2742)
  Prédit: '(int'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(int' → logprob: -0.4750608205795288
    2. '(' → logprob: -0.9750608205795288
    3. '(str' → logprob: -7.600060939788818
    4. '(input' → logprob: -8.22506046295166
    5. '(
' → logprob: -9.10006046295166
    6. '(list' → logprob: -10.35006046295166
    7. '(lambda' → logprob: -10.47506046295166
    8. 'int' → logprob: -10.60006046295166
    9. '(

' → logprob: -12.35006046295166
    10. '<int' → logprob: -12.60006046295166

Token 26: ',' (ID: 11)
  Prédit: '(input'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(input' → logprob: -0.5053999423980713
    2. ')' → logprob: -1.0053999423980713
    3. '(' → logprob: -4.005399703979492
    4. 'input' → logprob: -4.630399703979492
    5. ',input' → logprob: -6.505399703979492
    6. ',' → logprob: -7.505399703979492
    7. ')(' → logprob: -8.130399703979492
    8. ' input' → logprob: -8.755399703979492
    9. '(raw' → logprob: -9.880399703979492
    10. '=input' → logprob: -9.880399703979492

Token 27: ' input' (ID: 3422)
  Prédit: 'input'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'input' → logprob: -0.3868922293186188
    2. ' input' → logprob: -1.1368921995162964
    3. ')' → logprob: -11.136892318725586
    4. ' ' → logprob: -13.261892318725586
    5. '(input' → logprob: -13.761892318725586
    6. '=input' → logprob: -13.761892318725586
    7. '	input' → logprob: -14.261892318725586
    8. ' )' → logprob: -14.636892318725586
    9. '   ' → logprob: -14.886892318725586
    10. '```' → logprob: -15.261892318725586

Token 28: '().' (ID: 1454)
  Prédit: '()'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '()' → logprob: -0.15288561582565308
    2. '().' → logprob: -2.652885675430298
    3. '())' → logprob: -2.652885675430298
    4. '(' → logprob: -8.277885437011719
    5. '());' → logprob: -9.027885437011719
    6. '()))' → logprob: -9.277885437011719
    7. ')' → logprob: -9.402885437011719
    8. '()`' → logprob: -9.777885437011719
    9. '()>' → logprob: -10.152885437011719
    10. '('' → logprob: -10.527885437011719

Token 29: 'split' (ID: 13627)
  Prédit: 'split'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'split' → logprob: -0.00012928384239785373
    2. 'strip' → logprob: -9.000129699707031
    3. ' split' → logprob: -12.250129699707031
    4. 'rstrip' → logprob: -14.125129699707031
    5. '(split' → logprob: -15.125129699707031
    6. 'spl' → logprob: -16.50012969970703
    7. '().' → logprob: -18.00012969970703
    8. 's' → logprob: -18.00012969970703
    9. ' strip' → logprob: -19.37512969970703
    10. ')' → logprob: -19.62512969970703

Token 30: '())
' (ID: 4574)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ')' → logprob: -0.049459438771009445
    2. '))' → logprob: -3.049459457397461
    3. '())' → logprob: -7.424459457397461
    4. '(' → logprob: -9.049459457397461
    5. '('' → logprob: -9.549459457397461
    6. '()))' → logprob: -10.549459457397461
    7. '()' → logprob: -10.924459457397461
    8. '),' → logprob: -11.674459457397461
    9. '`)' → logprob: -11.799459457397461
    10. ')))' → logprob: -11.924459457397461

Token 31: 's' (ID: 82)
  Prédit: '
'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '
' → logprob: -0.023116661235690117
    2. '
' → logprob: -5.023116588592529
    3. '\n' → logprob: -5.148116588592529
    4. ')' → logprob: -5.398116588592529
    5. ' 
' → logprob: -5.773116588592529
    6. '\' → logprob: -7.273116588592529
    7. '  
' → logprob: -7.648116588592529
    8. 'print' → logprob: -8.023117065429688
    9. '' → logprob: -8.523117065429688
    10. '[' → logprob: -8.898117065429688

Token 32: ' =' (ID: 314)
  Prédit: ' ='
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' =' → logprob: -0.08962727338075638
    2. '=' → logprob: -2.464627265930176
    3. '[' → logprob: -7.339627265930176
    4. '[:]' → logprob: -11.339627265930176
    5. ' ' → logprob: -11.464627265930176
    6. '.' → logprob: -12.464627265930176
    7. '=input' → logprob: -12.464627265930176
    8. '.strip' → logprob: -13.589627265930176
    9. 's' → logprob: -13.714627265930176
    10. '  ' → logprob: -13.964627265930176

Token 33: ' input' (ID: 3422)
  Prédit: 'input'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'input' → logprob: -0.25193870067596436
    2. ' input' → logprob: -1.5019387006759644
    3. 'str' → logprob: -12.751938819885254
    4. '=input' → logprob: -13.126938819885254
    5. ' str' → logprob: -13.376938819885254
    6. '(input' → logprob: -13.751938819885254
    7. '	input' → logprob: -14.501938819885254
    8. '<input' → logprob: -14.626938819885254
    9. 'list' → logprob: -14.876938819885254
    10. ' ' → logprob: -15.876938819885254

Token 34: '()

' (ID: 5874)
  Prédit: '()'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '()' → logprob: -0.00039825684507377446
    2. '(' → logprob: -8.125398635864258
    3. '())' → logprob: -9.500398635864258
    4. ')' → logprob: -11.250398635864258
    5. '().' → logprob: -11.875398635864258
    6. ' ()' → logprob: -12.625398635864258
    7. '()`' → logprob: -14.375398635864258
    8. '()]' → logprob: -14.500398635864258
    9. '()>' → logprob: -14.500398635864258
    10. '`()' → logprob: -14.500398635864258

Token 35: '#' (ID: 2)
  Prédit: '['
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '[' → logprob: -0.9527377486228943
    2. 'print' → logprob: -1.452737808227539
    3. 's' → logprob: -2.327737808227539
    4. '\' → logprob: -2.577737808227539
    5. '=' → logprob: -2.827737808227539
    6. '
' → logprob: -3.202737808227539
    7. '#' → logprob: -3.702737808227539
    8. '\n' → logprob: -4.077737808227539
    9. 'a' → logprob: -4.202737808227539
    10. 'result' → logprob: -4.452737808227539

Token 36: ' Je' (ID: 4678)
  Prédit: 'print'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'print' → logprob: -0.16683627665042877
    2. 'p' → logprob: -2.9168362617492676
    3. 'result' → logprob: -3.0418362617492676
    4. 't' → logprob: -4.166836261749268
    5. 'a' → logprob: -4.541836261749268
    6. 's' → logprob: -4.791836261749268
    7. 'pr' → logprob: -5.041836261749268
    8. 'answer' → logprob: -6.041836261749268
    9. 'res' → logprob: -6.166836261749268
    10. 'r' → logprob: -6.791836261749268

Token 37: ' sais' (ID: 30010)
  Prédit: ' ='
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' =' → logprob: -0.9932610392570496
    2. 's' → logprob: -1.1182610988616943
    3. 'print' → logprob: -2.8682610988616943
    4. 'f' → logprob: -2.9932610988616943
    5. 'n' → logprob: -3.4932610988616943
    6. '=' → logprob: -3.4932610988616943
    7. 'p' → logprob: -4.493260860443115
    8. 'm' → logprob: -4.493260860443115
    9. 'count' → logprob: -4.493260860443115
    10. 'for' → logprob: -4.618260860443115

Token 38: ' pas' (ID: 2173)
  Prédit: ' que'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' que' → logprob: -0.5542958378791809
    2. ' pas' → logprob: -1.9292957782745361
    3. ' ' → logprob: -2.304295778274536
    4. '_' → logprob: -3.304295778274536
    5. ',' → logprob: -3.679295778274536
    6. '(' → logprob: -3.804295778274536
    7. '```' → logprob: -3.929295778274536
    8. 'pas' → logprob: -4.554296016693115
    9. '()' → logprob: -4.679296016693115
    10. '  ' → logprob: -5.054296016693115

Token 39: ' trop' (ID: 14765)
  Prédit: 'for'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'for' → logprob: -0.5457862615585327
    2. '(' → logprob: -1.9207862615585327
    3. ' for' → logprob: -2.7957863807678223
    4. ' ' → logprob: -3.2957863807678223
    5. 'result' → logprob: -3.4207863807678223
    6. 's' → logprob: -3.6707863807678223
    7. ')' → logprob: -3.7957863807678223
    8. '#' → logprob: -3.7957863807678223
    9. 'count' → logprob: -5.045786380767822
    10. ' result' → logprob: -5.170786380767822

Token 40: ' si' (ID: 1784)
  Prédit: 'result'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'result' → logprob: -0.8929336071014404
    2. 'for' → logprob: -1.6429336071014404
    3. 's' → logprob: -2.2679336071014404
    4. 'e' → logprob: -2.6429336071014404
    5. 't' → logprob: -3.1429336071014404
    6. 'print' → logprob: -3.3929336071014404
    7. 'count' → logprob: -3.6429336071014404
    8. 'answer' → logprob: -3.6429336071014404
    9. 'ans' → logprob: -4.0179338455200195
    10. '```' → logprob: -4.7679338455200195

Token 41: ' on' (ID: 402)
  Prédit: ' c'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' c' → logprob: -0.4365185499191284
    2. ' ce' → logprob: -2.311518669128418
    3. ' le' → logprob: -2.561518669128418
    4. ' s' → logprob: -3.061518669128418
    5. ' ça' → logprob: -3.936518669128418
    6. 'c' → logprob: -4.061518669128418
    7. ' this' → logprob: -4.186518669128418
    8. ' l' → logprob: -4.311518669128418
    9. ' la' → logprob: -4.436518669128418
    10. ' ' → logprob: -4.561518669128418

Token 42: ' doit' (ID: 21822)
  Prédit: ' peut'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' peut' → logprob: -0.6963919401168823
    2. ' doit' → logprob: -1.6963919401168823
    3. ' va' → logprob: -2.696392059326172
    4. '#' → logprob: -3.071392059326172
    5. ' pourra' → logprob: -3.071392059326172
    6. ' peux' → logprob: -3.446392059326172
    7. ' ' → logprob: -3.446392059326172
    8. 'pe' → logprob: -3.571392059326172
    9. ' pourrait' → logprob: -4.821392059326172
    10. ' a' → logprob: -4.821392059326172

Token 43: ' vraiment' (ID: 26637)
  Prédit: ' utiliser'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' utiliser' → logprob: -1.5066072940826416
    2. ' faire' → logprob: -1.7566072940826416
    3. '#' → logprob: -2.3816072940826416
    4. ' prendre' → logprob: -2.6316072940826416
    5. ' vérifier' → logprob: -2.7566072940826416
    6. ' continuer' → logprob: -3.0066072940826416
    7. 'faire' → logprob: -3.2566072940826416
    8. ' compter' → logprob: -3.8816072940826416
    9. 'slice' → logprob: -4.0066070556640625
    10. 's' → logprob: -4.0066070556640625

Token 44: ' retirer' (ID: 136490)
  Prédit: ' vérifier'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' vérifier' → logprob: -1.9672566652297974
    2. 'tr' → logprob: -2.342256546020508
    3. 'slice' → logprob: -2.342256546020508
    4. 's' → logprob: -2.592256546020508
    5. 'print' → logprob: -2.592256546020508
    6. 'faire' → logprob: -2.717256546020508
    7. 'prendre' → logprob: -2.967256546020508
    8. '#' → logprob: -3.092256546020508
    9. ' prendre' → logprob: -3.342256546020508
    10. ' ' → logprob: -3.592256546020508

Token 45: ' ' (ID: 220)
  Prédit: 's'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 's' → logprob: -0.6826358437538147
    2. ' s' → logprob: -0.8076358437538147
    3. ' ' → logprob: -3.43263578414917
    4. '(s' → logprob: -5.18263578414917
    5. ' a' → logprob: -6.18263578414917
    6. '<|end|>' → logprob: -6.55763578414917
    7. 'a' → logprob: -6.68263578414917
    8. '#' → logprob: -7.18263578414917
    9. ',' → logprob: -8.057636260986328
    10. '   ' → logprob: -8.057636260986328

Token 46: '1' (ID: 16)
  Prédit: 's'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 's' → logprob: -0.1713610142469406
    2. 'a' → logprob: -3.421360969543457
    3. 'c' → logprob: -4.546360969543457
    4. 'r' → logprob: -4.546360969543457
    5. ' ' → logprob: -4.546360969543457
    6. ' s' → logprob: -4.546360969543457
    7. 'les' → logprob: -4.671360969543457
    8. ' les' → logprob: -4.671360969543457
    9. '#' → logprob: -4.796360969543457
    10. '_' → logprob: -4.921360969543457

Token 47: ' partout' (ID: 70478)
  Prédit: '['
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '[' → logprob: -0.7686079144477844
    2. ' ' → logprob: -1.1436078548431396
    3. 's' → logprob: -2.2686078548431396
    4. ')' → logprob: -2.8936078548431396
    5. ',' → logprob: -4.268608093261719
    6. ']' → logprob: -4.393608093261719
    7. ':' → logprob: -5.143608093261719
    8. '.' → logprob: -5.393608093261719
    9. ' s' → logprob: -6.018608093261719
    10. ''s' → logprob: -6.268608093261719

Token 48: '.' (ID: 13)
  Prédit: 's'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 's' → logprob: -0.5019892454147339
    2. '
' → logprob: -1.6269892454147339
    3. '<|end|>' → logprob: -2.3769893646240234
    4. ',' → logprob: -3.5019893646240234
    5. '#' → logprob: -4.126989364624023
    6. '\n' → logprob: -4.751989364624023
    7. '' → logprob: -5.251989364624023
    8. '.' → logprob: -5.501989364624023
    9. '\' → logprob: -5.501989364624023
    10. '```' → logprob: -5.501989364624023

Token 49: ' Ici' (ID: 145754)
  Prédit: ''
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False

Token 50: ' on' (ID: 402)
  Prédit: ','
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ',' → logprob: -0.9601389169692993
    2. ' s' → logprob: -1.0851389169692993
    3. 's' → logprob: -1.5851389169692993
    4. '[' → logprob: -4.21013879776001
    5. ' ,' → logprob: -4.46013879776001
    6. ' ' → logprob: -4.58513879776001
    7. ' =' → logprob: -5.21013879776001
    8. '```' → logprob: -5.33513879776001
    9. ' on' → logprob: -6.21013879776001
    10. 'n' → logprob: -6.33513879776001

Token 51: ' fait' (ID: 7473)
  Prédit: '['
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '[' → logprob: -0.8736748695373535
    2. '-' → logprob: -1.6236748695373535
    3. 's' → logprob: -2.2486748695373535
    4. '#' → logprob: -2.8736748695373535
    5. 'a' → logprob: -3.4986748695373535
    6. ' s' → logprob: -3.4986748695373535
    7. '[]' → logprob: -4.1236748695373535
    8. ':' → logprob: -4.3736748695373535
    9. ' a' → logprob: -4.3736748695373535
    10. '+' → logprob: -4.8736748695373535

Token 52: ' juste' (ID: 31553)
  Prédit: ' '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' ' → logprob: -0.8645856976509094
    2. ' s' → logprob: -0.8645856976509094
    3. 's' → logprob: -2.6145856380462646
    4. 'print' → logprob: -3.9895856380462646
    5. ' print' → logprob: -4.239585876464844
    6. ' a' → logprob: -4.489585876464844
    7. 'n' → logprob: -5.239585876464844
    8. ' n' → logprob: -5.364585876464844
    9. ' for' → logprob: -5.364585876464844
    10. 'for' → logprob: -5.864585876464844

Token 53: ' -' (ID: 533)
  Prédit: 's'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 's' → logprob: -1.1227757930755615
    2. ' ' → logprob: -1.2477757930755615
    3. ' s' → logprob: -1.6227757930755615
    4. '[' → logprob: -3.1227757930755615
    5. 'print' → logprob: -3.7477757930755615
    6. ' -' → logprob: -4.122776031494141
    7. '-' → logprob: -4.247776031494141
    8. ' print' → logprob: -4.497776031494141
    9. ' +' → logprob: -5.122776031494141
    10. ':' → logprob: -5.122776031494141

Token 54: '1' (ID: 16)
  Prédit: '1'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '1' → logprob: -0.16026566922664642
    2. ' ' → logprob: -1.9102656841278076
    3. 's' → logprob: -11.785265922546387
    4. '0' → logprob: -12.285265922546387
    5. '2' → logprob: -12.285265922546387
    6. 'b' → logprob: -12.535265922546387
    7. 'd' → logprob: -12.660265922546387
    8. ' s' → logprob: -13.160265922546387
    9. 'c' → logprob: -13.285265922546387
    10. '```' → logprob: -13.285265922546387

Token 55: ' où' (ID: 15113)
  Prédit: 's'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 's' → logprob: -0.609108567237854
    2. ',' → logprob: -1.734108567237854
    3. '```' → logprob: -2.1091084480285645
    4. 'n' → logprob: -2.6091084480285645
    5. '<|end|>' → logprob: -4.1091084480285645
    6. '.' → logprob: -4.7341084480285645
    7. '
' → logprob: -4.7341084480285645
    8. '\' → logprob: -4.8591084480285645
    9. 'a' → logprob: -4.8591084480285645
    10. ' ' → logprob: -5.1091084480285645

Token 56: ' il' (ID: 1793)
  Prédit: ' c'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' c' → logprob: -0.48356112837791443
    2. 'c' → logprob: -1.4835611581802368
    3. ' on' → logprob: -3.1085610389709473
    4. ' nécessaire' → logprob: -3.1085610389709473
    5. ' ce' → logprob: -3.7335610389709473
    6. 'on' → logprob: -4.733561038970947
    7. ' ça' → logprob: -5.108561038970947
    8. ' il' → logprob: -5.358561038970947
    9. 'il' → logprob: -5.733561038970947
    10. 'cela' → logprob: -5.733561038970947

Token 57: ' faut' (ID: 17821)
  Prédit: 'f'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'f' → logprob: -0.3192659318447113
    2. ' faut' → logprob: -1.5692659616470337
    3. 's' → logprob: -4.194265842437744
    4. ' a' → logprob: -4.194265842437744
    5. 'a' → logprob: -4.819265842437744
    6. ' faudra' → logprob: -4.944265842437744
    7. ' faudrait' → logprob: -5.569265842437744
    8. 'y' → logprob: -5.819265842437744
    9. ' est' → logprob: -6.069265842437744
    10. ' y' → logprob: -6.194265842437744

Token 58: '
' (ID: 198)
  Prédit: '#'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '#' → logprob: -0.5236888527870178
    2. 's' → logprob: -1.648688793182373
    3. 'print' → logprob: -2.898688793182373
    4. 'n' → logprob: -3.023688793182373
    5. ')' → logprob: -3.398688793182373
    6. 'a' → logprob: -4.148688793182373
    7. '
' → logprob: -4.273688793182373
    8. '[' → logprob: -4.648688793182373
    9. '<|end|>' → logprob: -4.648688793182373
    10. 'result' → logprob: -5.773688793182373

Token 59: 'start' (ID: 5236)
  Prédit: 'print'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'print' → logprob: -0.155858114361763
    2. '#' → logprob: -3.655858039855957
    3. 's' → logprob: -3.780858039855957
    4. 'a' → logprob: -3.780858039855957
    5. 'ans' → logprob: -4.030858039855957
    6. 't' → logprob: -4.155858039855957
    7. 'for' → logprob: -4.780858039855957
    8. 'answer' → logprob: -4.905858039855957
    9. 'result' → logprob: -5.030858039855957
    10. 'p' → logprob: -5.780858039855957

Token 60: ' =' (ID: 314)
  Prédit: ' ='
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' =' → logprob: -0.4464731216430664
    2. '_' → logprob: -1.5714731216430664
    3. '_idx' → logprob: -2.9464731216430664
    4. '_index' → logprob: -3.4464731216430664
    5. '1' → logprob: -3.6964731216430664
    6. 's' → logprob: -4.446473121643066
    7. '_a' → logprob: -4.946473121643066
    8. '_pos' → logprob: -5.071473121643066
    9. '_s' → logprob: -5.446473121643066
    10. '=' → logprob: -5.821473121643066

Token 61: ' a' (ID: 261)
  Prédit: 'a'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'a' → logprob: -0.5592236518859863
    2. ' a' → logprob: -0.9342236518859863
    3. ' c' → logprob: -4.059223651885986
    4. 'c' → logprob: -4.809223651885986
    5. ' b' → logprob: -5.934223651885986
    6. 'b' → logprob: -6.059223651885986
    7. ' ' → logprob: -6.809223651885986
    8. '0' → logprob: -6.809223651885986
    9. ' d' → logprob: -7.184223651885986
    10. 'd' → logprob: -7.434223651885986

Token 62: ' -' (ID: 533)
  Prédit: '-'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '-' → logprob: -0.0890038013458252
    2. ' -' → logprob: -2.464003801345825
    3. '<|end|>' → logprob: -10.214003562927246
    4. ' ' → logprob: -10.589003562927246
    5. 's' → logprob: -14.464003562927246
    6. '[' → logprob: -14.839003562927246
    7. '1' → logprob: -14.839003562927246
    8. '-
' → logprob: -15.464003562927246
    9. '+' → logprob: -15.589003562927246
    10. '<|end|>' → logprob: -16.089004516601562

Token 63: ' ' (ID: 220)
  Prédit: '1'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '1' → logprob: -3.130576806142926e-05
    2. ' ' → logprob: -10.375031471252441
    3. '<|end|>' → logprob: -17.750030517578125
    4. '```' → logprob: -19.500030517578125
    5. '2' → logprob: -19.625030517578125
    6. '１' → logprob: -20.250030517578125
    7. '   ' → logprob: -20.500030517578125
    8. '-' → logprob: -20.750030517578125
    9. ')' → logprob: -20.875030517578125
    10. '0' → logprob: -21.312530517578125

Token 64: '1' (ID: 16)
  Prédit: '1'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '1' → logprob: -7.941850526549388e-06
    2. ' ' → logprob: -11.750007629394531
    3. '<|end|>' → logprob: -17.62500762939453
    4. '2' → logprob: -18.37500762939453
    5. '```' → logprob: -20.75000762939453
    6. '<|end|>' → logprob: -21.87500762939453
    7. '１' → logprob: -21.87500762939453
    8. '0' → logprob: -22.00000762939453
    9. '   ' → logprob: -22.00000762939453
    10. '۱' → logprob: -22.50000762939453

Token 65: '
' (ID: 198)
  Prédit: '
'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '
' → logprob: -0.2521054148674011
    2. 'end' → logprob: -1.627105474472046
    3. 'print' → logprob: -5.377105236053467
    4. 's' → logprob: -5.752105236053467
    5. ':end' → logprob: -5.752105236053467
    6. '<|end|>' → logprob: -5.752105236053467
    7. ',end' → logprob: -6.252105236053467
    8. ' end' → logprob: -6.377105236053467
    9. '#' → logprob: -6.377105236053467
    10. 'b' → logprob: -7.002105236053467

Token 66: 'stop' (ID: 16743)
  Prédit: 'end'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'end' → logprob: -0.035105157643556595
    2. ' end' → logprob: -4.660105228424072
    3. ',end' → logprob: -4.660105228424072
    4. ',' → logprob: -5.285105228424072
    5. ':end' → logprob: -5.535105228424072
    6. 'b' → logprob: -6.285105228424072
    7. 's' → logprob: -6.285105228424072
    8. 'print' → logprob: -7.410105228424072
    9. '<|end|>' → logprob: -7.660105228424072
    10. 'c' → logprob: -8.035104751586914

Token 67: ' =' (ID: 314)
  Prédit: ' ='
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' =' → logprob: -0.22542889416217804
    2. '=' → logprob: -1.6004289388656616
    3. ' ' → logprob: -12.100428581237793
    4. ',' → logprob: -12.475428581237793
    5. '+' → logprob: -12.725428581237793
    6. ' +' → logprob: -13.725428581237793
    7. 'd' → logprob: -15.100428581237793
    8. '=b' → logprob: -15.100428581237793
    9. 'a' → logprob: -15.225428581237793
    10. 'c' → logprob: -15.225428581237793

Token 68: ' max' (ID: 2999)
  Prédit: 'b'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'b' → logprob: -0.0483718067407608
    2. 'c' → logprob: -3.4233717918395996
    3. 'd' → logprob: -4.2983717918396
    4. ' b' → logprob: -7.1733717918396
    5. ' c' → logprob: -9.423372268676758
    6. '	b' → logprob: -9.673372268676758
    7. ' d' → logprob: -10.298372268676758
    8. 'a' → logprob: -10.673372268676758
    9. '   ' → logprob: -11.173372268676758
    10. ' ' → logprob: -11.485872268676758

Token 69: '(b' (ID: 3229)
  Prédit: '(b'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(b' → logprob: -0.20987898111343384
    2. '(c' → logprob: -2.334878921508789
    3. '(' → logprob: -2.459878921508789
    4. '(d' → logprob: -5.459878921508789
    5. '(a' → logprob: -6.334878921508789
    6. '(start' → logprob: -7.459878921508789
    7. '(s' → logprob: -9.209878921508789
    8. '(
' → logprob: -9.334878921508789
    9. 'b' → logprob: -9.334878921508789
    10. '(stop' → logprob: -10.084878921508789

Token 70: ',' (ID: 11)
  Prédit: ','
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ',' → logprob: -0.08067400008440018
    2. ' -' → logprob: -3.080673933029175
    3. '-' → logprob: -4.080674171447754
    4. ' ,' → logprob: -4.455674171447754
    5. ',d' → logprob: -6.580674171447754
    6. ',c' → logprob: -7.455674171447754
    7. ' ' → logprob: -7.955674171447754
    8. 'c' → logprob: -8.580674171447754
    9. ')' → logprob: -8.705674171447754
    10. 'd' → logprob: -9.080674171447754

Token 71: ' d' (ID: 272)
  Prédit: 'c'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'c' → logprob: -1.0496934652328491
    2. ' c' → logprob: -1.4246934652328491
    3. ' d' → logprob: -1.4246934652328491
    4. 'd' → logprob: -1.7996934652328491
    5. ' ' → logprob: -6.174693584442139
    6. 'a' → logprob: -8.42469310760498
    7. 'e' → logprob: -8.54969310760498
    8. '   ' → logprob: -8.54969310760498
    9. ' e' → logprob: -8.79969310760498
    10. ' a' → logprob: -8.79969310760498

Token 72: ')

' (ID: 1029)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ')' → logprob: -0.0021552573889493942
    2. ' )' → logprob: -6.252155303955078
    3. '-' → logprob: -9.127155303955078
    4. ' -' → logprob: -9.752155303955078
    5. ')-' → logprob: -10.002155303955078
    6. ' ' → logprob: -12.002155303955078
    7. '-)' → logprob: -13.502155303955078
    8. '   ' → logprob: -13.752155303955078
    9. '`)' → logprob: -14.314655303955078
    10. ')
' → logprob: -14.439655303955078

Token 73: '#' (ID: 2)
  Prédit: 'print'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'print' → logprob: -0.5623039603233337
    2. 'for' → logprob: -1.5623040199279785
    3. '
' → logprob: -2.1873040199279785
    4. ')' → logprob: -3.5623040199279785
    5. ' for' → logprob: -3.5623040199279785
    6. 'if' → logprob: -4.1873040199279785
    7. '#' → logprob: -4.3123040199279785
    8. 's' → logprob: -4.9373040199279785
    9. ' print' → logprob: -5.6873040199279785
    10. ' if' → logprob: -6.0623040199279785

Token 74: ' On' (ID: 2160)
  Prédit: 'print'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'print' → logprob: -0.14804933965206146
    2. 'for' → logprob: -2.5230493545532227
    3. 'if' → logprob: -4.023049354553223
    4. 'result' → logprob: -4.648049354553223
    5. ' for' → logprob: -4.773049354553223
    6. 's' → logprob: -5.523049354553223
    7. '#' → logprob: -5.648049354553223
    8. ' print' → logprob: -5.898049354553223
    9. 'ans' → logprob: -6.398049354553223
    10. ' if' → logprob: -7.023049354553223

Token 75: ' cherche' (ID: 52345)
  Prédit: ' slice'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' slice' → logprob: -1.1203147172927856
    2. 'slice' → logprob: -1.6203147172927856
    3. ' va' → logprob: -2.745314598083496
    4. ' regarde' → logprob: -2.995314598083496
    5. 's' → logprob: -3.120314598083496
    6. '#' → logprob: -3.620314598083496
    7. 'for' → logprob: -3.620314598083496
    8. ' extrait' → logprob: -3.870314598083496
    9. ' vér' → logprob: -3.995314598083496
    10. ' veut' → logprob: -3.995314598083496

Token 76: ' un' (ID: 537)
  Prédit: ' s'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' s' → logprob: -2.1939985752105713
    2. 's' → logprob: -2.3189985752105713
    3. ' la' → logprob: -2.5689985752105713
    4. ' les' → logprob: -2.6939985752105713
    5. ' if' → logprob: -3.0689985752105713
    6. 'if' → logprob: -3.1939985752105713
    7. ' ' → logprob: -3.1939985752105713
    8. ' le' → logprob: -3.1939985752105713
    9. 'le' → logprob: -3.3189985752105713
    10. 're' → logprob: -3.3189985752105713

Token 77: ' doubl' (ID: 127992)
  Prédit: 'e'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'e' → logprob: -0.04956153407692909
    2. ' e' → logprob: -4.174561500549316
    3. 'a' → logprob: -4.299561500549316
    4. ' '' → logprob: -5.549561500549316
    5. ''' → logprob: -5.799561500549316
    6. 'i' → logprob: -6.424561500549316
    7. ' endroit' → logprob: -6.549561500549316
    8. '_' → logprob: -6.674561500549316
    9. ''end' → logprob: -6.799561500549316
    10. '"' → logprob: -7.049561500549316

Token 78: 'on' (ID: 263)
  Prédit: 'e'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'e' → logprob: -0.2509896159172058
    2. 'on' → logprob: -1.6259896755218506
    3. 'é' → logprob: -3.7509896755218506
    4. 'o' → logprob: -7.7509894371032715
    5. 'age' → logprob: -8.37598991394043
    6. 'ed' → logprob: -8.62598991394043
    7. 'ons' → logprob: -8.75098991394043
    8. 'ing' → logprob: -9.12598991394043
    9. 'es' → logprob: -9.12598991394043
    10. 'ee' → logprob: -9.68848991394043

Token 79: ' de' (ID: 334)
  Prédit: '_'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '_' → logprob: -1.2003682851791382
    2. 'for' → logprob: -1.2003682851791382
    3. ' for' → logprob: -1.3253682851791382
    4. ' ' → logprob: -2.8253684043884277
    5. 's' → logprob: -2.9503684043884277
    6. ')' → logprob: -5.575368404388428
    7. ''' → logprob: -5.950368404388428
    8. ' s' → logprob: -6.075368404388428
    9. ',' → logprob: -6.700368404388428
    10. '#' → logprob: -6.700368404388428

Token 80: ' #' (ID: 1069)
  Prédit: 's'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 's' → logprob: -0.26972559094429016
    2. ''' → logprob: -2.2697255611419678
    3. '"' → logprob: -3.2697255611419678
    4. ''s' → logprob: -3.6447255611419678
    5. ' s' → logprob: -3.7697255611419678
    6. 'ss' → logprob: -5.207225799560547
    7. '#' → logprob: -5.519725799560547
    8. ')' → logprob: -5.769725799560547
    9. ' '' → logprob: -5.832225799560547
    10. ' ' → logprob: -5.957225799560547

Token 81: ' sur' (ID: 1512)
  Prédit: '#'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '#' → logprob: -0.044927459210157394
    2. 'for' → logprob: -4.294927597045898
    3. ' for' → logprob: -4.544927597045898
    4. ' in' → logprob: -4.794927597045898
    5. 's' → logprob: -5.544927597045898
    6. ' #' → logprob: -6.669927597045898
    7. '#
' → logprob: -7.544927597045898
    8. ')' → logprob: -7.544927597045898
    9. ' '#'' → logprob: -7.794927597045898
    10. ' ' → logprob: -7.919927597045898

Token 82: ' la' (ID: 557)
  Prédit: ' s'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' s' → logprob: -0.35212936997413635
    2. 's' → logprob: -1.477129340171814
    3. ' la' → logprob: -3.7271294593811035
    4. 'range' → logprob: -4.4771294593811035
    5. ' range' → logprob: -4.4771294593811035
    6. 'la' → logprob: -4.7271294593811035
    7. ' the' → logprob: -5.7271294593811035
    8. 'the' → logprob: -6.1021294593811035
    9. 'l' → logprob: -6.3521294593811035
    10. ' le' → logprob: -6.6021294593811035

Token 83: ' partie' (ID: 22139)
  Prédit: 's'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 's' → logprob: -0.3430609405040741
    2. ' s' → logprob: -1.9680609703063965
    3. ' même' → logprob: -3.2180609703063965
    4. 'range' → logprob: -3.9680609703063965
    5. 'segment' → logprob: -4.4680609703063965
    6. ' trajet' → logprob: -4.5930609703063965
    7. 'string' → logprob: -4.8430609703063965
    8. ' range' → logprob: -4.9680609703063965
    9. ' segment' → logprob: -4.9680609703063965
    10. ' chemin' → logprob: -5.2180609703063965

Token 84: ' importante' (ID: 13431)
  Prédit: 's'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 's' → logprob: -0.04355069249868393
    2. ' s' → logprob: -3.168550729751587
    3. '#' → logprob: -8.293550491333008
    4. ' ' → logprob: -9.043550491333008
    5. '(s' → logprob: -9.918550491333008
    6. ''s' → logprob: -10.668550491333008
    7. 'ss' → logprob: -11.043550491333008
    8. '(' → logprob: -11.543550491333008
    9. ')' → logprob: -11.981050491333008
    10. '`' → logprob: -12.106050491333008

Token 85: '
' (ID: 198)
  Prédit: 's'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 's' → logprob: -0.6777781844139099
    2. ' s' → logprob: -0.9277781844139099
    3. ' for' → logprob: -2.5527782440185547
    4. 'for' → logprob: -4.052778244018555
    5. ' if' → logprob: -7.927778244018555
    6. 'if' → logprob: -8.427778244018555
    7. ',' → logprob: -8.677778244018555
    8. '#' → logprob: -9.052778244018555
    9. ' ' → logprob: -9.052778244018555
    10. ' (' → logprob: -9.427778244018555

Token 86: 'if' (ID: 366)
  Prédit: 'for'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'for' → logprob: -0.03402208164334297
    2. 'segment' → logprob: -3.909022092819214
    3. 'if' → logprob: -5.034021854400635
    4. ' for' → logprob: -5.909021854400635
    5. 'substring' → logprob: -6.284021854400635
    6. 'found' → logprob: -8.034022331237793
    7. 'range' → logprob: -8.034022331237793
    8. 'part' → logprob: -8.159022331237793
    9. 'section' → logprob: -8.409022331237793
    10. 's' → logprob: -8.409022331237793

Token 87: ' re' (ID: 322)
  Prédit: ' '#''
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' '#'' → logprob: -0.37623029947280884
    2. ' s' → logprob: -1.751230239868164
    3. ' "#"' → logprob: -2.626230239868164
    4. 's' → logprob: -3.001230239868164
    5. ''#' → logprob: -5.126230239868164
    6. '"#' → logprob: -6.126230239868164
    7. ' '' → logprob: -6.126230239868164
    8. '"' → logprob: -6.251230239868164
    9. ''' → logprob: -6.376230239868164
    10. ' ' → logprob: -6.376230239868164

Token 88: '.search' (ID: 16718)
  Prédit: '.search'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '.search' → logprob: -0.0012926164781674743
    2. '.findall' → logprob: -6.751292705535889
    3. '.' → logprob: -9.50129222869873
    4. 'search' → logprob: -10.25129222869873
    5. '.find' → logprob: -11.87629222869873
    6. '.compile' → logprob: -12.75129222869873
    7. '.match' → logprob: -13.50129222869873
    8. '\.' → logprob: -14.75129222869873
    9. ' search' → logprob: -15.25129222869873
    10. '```' → logprob: -15.62629222869873

Token 89: '('' (ID: 706)
  Prédit: '(r'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(r' → logprob: -0.540755569934845
    2. '('' → logprob: -1.5407555103302002
    3. '("' → logprob: -2.5407555103302
    4. '('#' → logprob: -2.9157555103302
    5. '("#' → logprob: -3.2907555103302
    6. '(' → logprob: -3.4157555103302
    7. 'r' → logprob: -8.790755271911621
    8. '("#{' → logprob: -9.790755271911621
    9. ''' → logprob: -10.040755271911621
    10. '"' → logprob: -10.415755271911621

Token 90: '##' (ID: 877)
  Prédit: '##'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '##' → logprob: -0.18089132010936737
    2. ''' → logprob: -1.9308912754058838
    3. '"' → logprob: -4.055891513824463
    4. '#' → logprob: -7.680891513824463
    5. '###' → logprob: -7.930891513824463
    6. '\' → logprob: -8.055891036987305
    7. ''#' → logprob: -8.055891036987305
    8. 'r' → logprob: -8.180891036987305
    9. '##

' → logprob: -8.180891036987305
    10. '#{' → logprob: -8.430891036987305

Token 91: '',' (ID: 787)
  Prédit: '','
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '',' → logprob: -0.0005948548787273467
    2. '')' → logprob: -8.250595092773438
    3. ''' → logprob: -8.625595092773438
    4. ')',' → logprob: -10.000595092773438
    5. '','#' → logprob: -11.125595092773438
    6. ')' → logprob: -11.250595092773438
    7. 's' → logprob: -11.375595092773438
    8. '",' → logprob: -11.375595092773438
    9. '','' → logprob: -11.375595092773438
    10. '',
' → logprob: -11.500595092773438

Token 92: ' s' (ID: 265)
  Prédit: ' s'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' s' → logprob: -0.05490383505821228
    2. 's' → logprob: -2.929903745651245
    3. ')' → logprob: -11.679903984069824
    4. ' ' → logprob: -12.054903984069824
    5. '<|end|>' → logprob: -13.054903984069824
    6. ''s' → logprob: -14.054903984069824
    7. ',' → logprob: -14.304903984069824
    8. '(s' → logprob: -14.429903984069824
    9. '<s' → logprob: -14.742403984069824
    10. ')s' → logprob: -14.742403984069824

Token 93: '[start' (ID: 62179)
  Prédit: '[start'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '[start' → logprob: -0.00544008519500494
    2. '[' → logprob: -5.2554402351379395
    3. ',' → logprob: -8.880439758300781
    4. 'start' → logprob: -10.630439758300781
    5. ',start' → logprob: -11.130439758300781
    6. '[s' → logprob: -11.505439758300781
    7. '[a' → logprob: -12.130439758300781
    8. ')' → logprob: -12.880439758300781
    9. '[min' → logprob: -13.505439758300781
    10. '[end' → logprob: -13.630439758300781

Token 94: ':' (ID: 25)
  Prédit: ':'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ':' → logprob: -0.0009025269537232816
    2. ' :' → logprob: -7.5009026527404785
    3. 'stop' → logprob: -8.25090217590332
    4. '+' → logprob: -10.00090217590332
    5. ':start' → logprob: -11.87590217590332
    6. ' +' → logprob: -12.12590217590332
    7. ':end' → logprob: -12.62590217590332
    8. ' stop' → logprob: -12.62590217590332
    9. ':b' → logprob: -12.62590217590332
    10. ' ' → logprob: -12.87590217590332

Token 95: 'stop' (ID: 16743)
  Prédit: 'stop'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'stop' → logprob: -0.004686564672738314
    2. ' stop' → logprob: -5.37968635559082
    3. '   ' → logprob: -11.25468635559082
    4. ' ' → logprob: -11.25468635559082
    5. ']' → logprob: -11.62968635559082
    6. '  ' → logprob: -12.00468635559082
    7. '	stop' → logprob: -12.87968635559082
    8. '
' → logprob: -12.87968635559082
    9. '(stop' → logprob: -12.87968635559082
    10. 'start' → logprob: -13.56718635559082

Token 96: ']):
' (ID: 51989)
  Prédit: ']):'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ']):' → logprob: -0.030541880056262016
    2. '])' → logprob: -4.530541896820068
    3. ']):
' → logprob: -4.530541896820068
    4. ']' → logprob: -5.030541896820068
    5. '):' → logprob: -7.155541896820068
    6. ')' → logprob: -8.03054141998291
    7. ' ]' → logprob: -8.28054141998291
    8. '+' → logprob: -8.53054141998291
    9. '']):
' → logprob: -9.65554141998291
    10. ':' → logprob: -9.78054141998291

Token 97: '   ' (ID: 271)
  Prédit: ' print'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' print' → logprob: -0.3964688181877136
    2. 'print' → logprob: -1.2714688777923584
    3. '   ' → logprob: -3.1464688777923584
    4. '
' → logprob: -5.771468639373779
    5. '\n' → logprob: -8.521469116210938
    6. ' ' → logprob: -9.271469116210938
    7. '    ' → logprob: -9.521469116210938
    8. '	print' → logprob: -9.646469116210938
    9. '    
' → logprob: -9.771469116210938
    10. '  ' → logprob: -9.896469116210938

Token 98: ' print' (ID: 2123)
  Prédit: 'print'
  Correct (stricte): False
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'print' (adapté à ' print') → logprob: -0.0005469570169225335
    2. ' print' → logprob: -7.750546932220459
    3. '   ' → logprob: -9.875547409057617
    4. '\n' → logprob: -10.750547409057617
    5. '
' → logprob: -10.875547409057617
    6. '\' → logprob: -12.250547409057617
    7. ' ' → logprob: -13.000547409057617
    8. '#' → logprob: -13.250547409057617
    9. '
' → logprob: -13.250547409057617
    10. '    
' → logprob: -13.750547409057617

Token 99: '('' (ID: 706)
  Prédit: '("'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '("' → logprob: -0.6037849187850952
    2. '('' → logprob: -0.8537849187850952
    3. '(' → logprob: -3.6037850379943848
    4. '(-' → logprob: -9.728784561157227
    5. '(":' → logprob: -10.103784561157227
    6. '(NO' → logprob: -10.103784561157227
    7. '(False' → logprob: -10.478784561157227
    8. '(
' → logprob: -11.478784561157227
    9. ' ("' → logprob: -11.728784561157227
    10. '(No' → logprob: -12.103784561157227

Token 100: 'No' (ID: 3160)
  Prédit: 'No'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'No' → logprob: -0.0020103605929762125
    2. 'NO' → logprob: -6.877010345458984
    3. '"No' → logprob: -7.502010345458984
    4. ' No' → logprob: -8.627010345458984
    5. 'Fail' → logprob: -9.377010345458984
    6. ''' → logprob: -10.127010345458984
    7. 'Impossible' → logprob: -10.752010345458984
    8. 'FAIL' → logprob: -10.877010345458984
    9. 'Second' → logprob: -11.002010345458984
    10. 'fail' → logprob: -11.377010345458984

Token 101: '')
' (ID: 2515)
  Prédit: '')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '')' → logprob: -0.4747830927371979
    2. ')' → logprob: -0.9747830629348755
    3. '")' → logprob: -7.724782943725586
    4. 't' → logprob: -9.474782943725586
    5. '')
' → logprob: -9.849782943725586
    6. ' )' → logprob: -10.099782943725586
    7. ')
' → logprob: -10.849782943725586
    8. 'n' → logprob: -11.349782943725586
    9. '`)' → logprob: -11.349782943725586
    10. ''' → logprob: -11.849782943725586

Token 102: 'else' (ID: 2807)
  Prédit: 'else'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'else' → logprob: -0.0008184424950741231
    2. ' else' → logprob: -7.250818252563477
    3. 'elif' → logprob: -9.375818252563477
    4. '
' → logprob: -10.750818252563477
    5. '_else' → logprob: -14.000818252563477
    6. '<|end|>' → logprob: -14.625818252563477
    7. '
' → logprob: -16.000818252563477
    8. '\n' → logprob: -16.250818252563477
    9. '```' → logprob: -16.250818252563477
    10. '#else' → logprob: -16.250818252563477

Token 103: ':
' (ID: 734)
  Prédit: ':'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ':' → logprob: -0.1456127166748047
    2. ':
' → logprob: -2.0206127166748047
    3. '   ' → logprob: -5.895612716674805
    4. ' :
' → logprob: -9.020612716674805
    5. ' :' → logprob: -9.895612716674805
    6. ':
' → logprob: -13.020612716674805
    7. ':

' → logprob: -13.145612716674805
    8. '  ' → logprob: -13.395612716674805
    9. '):
' → logprob: -14.145612716674805
    10. '       ' → logprob: -14.145612716674805

Token 104: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.5648273825645447
    2. ' print' → logprob: -1.1898274421691895
    3. 'print' → logprob: -2.0648274421691895
    4. '	print' → logprob: -9.314826965332031
    5. '    
' → logprob: -9.564826965332031
    6. 'Print' → logprob: -9.689826965332031
    7. ' ' → logprob: -10.064826965332031
    8. '
' → logprob: -10.439826965332031
    9. '    ' → logprob: -10.689826965332031
    10. ' 
' → logprob: -10.939826965332031

Token 105: ' #' (ID: 1069)
  Prédit: 'print'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'print' → logprob: -0.005879256408661604
    2. ' print' → logprob: -5.2558794021606445
    3. '   ' → logprob: -7.3808794021606445
    4. 'Yes' → logprob: -12.130879402160645
    5. 'Print' → logprob: -12.505879402160645
    6. '    
' → logprob: -12.630879402160645
    7. ' ' → logprob: -12.755879402160645
    8. '  ' → logprob: -13.630879402160645
    9. '
' → logprob: -13.755879402160645
    10. '	print' → logprob: -14.005879402160645

Token 106: ' F' (ID: 454)
  Prédit: 'print'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'print' → logprob: -0.01713389903306961
    2. ' print' → logprob: -5.017133712768555
    3. 'for' → logprob: -5.642133712768555
    4. 'if' → logprob: -5.767133712768555
    5. '#' → logprob: -6.642133712768555
    6. 'possible' → logprob: -7.017133712768555
    7. ' if' → logprob: -8.142133712768555
    8. ' for' → logprob: -8.642133712768555
    9. '   ' → logprob: -9.142133712768555
    10. 'start' → logprob: -9.392133712768555

Token 107: 'aut' (ID: 1828)
  Prédit: 'or'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'or' → logprob: -0.3912642002105713
    2. 'print' → logprob: -1.2662642002105713
    3. '#' → logprob: -4.266263961791992
    4. '   ' → logprob: -5.516263961791992
    5. ' or' → logprob: -5.516263961791992
    6. 'for' → logprob: -5.516263961791992
    7. 'inal' → logprob: -6.016263961791992
    8. 'inish' → logprob: -6.141263961791992
    9. 'r' → logprob: -6.266263961791992
    10. 'rom' → logprob: -6.266263961791992

Token 108: ' voir' (ID: 20611)
  Prédit: ' que'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' que' → logprob: -1.5331169366836548
    2. '   ' → logprob: -1.7831169366836548
    3. 'print' → logprob: -1.7831169366836548
    4. 'if' → logprob: -1.7831169366836548
    5. '#' → logprob: -2.2831168174743652
    6. ' if' → logprob: -3.6581168174743652
    7. ' print' → logprob: -3.7831168174743652
    8. ' ' → logprob: -4.033116817474365
    9. 'import' → logprob: -4.158116817474365
    10. 'for' → logprob: -4.283116817474365

Token 109: ' où' (ID: 15113)
  Prédit: ' if'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' if' → logprob: -0.4022674560546875
    2. 'if' → logprob: -2.2772674560546875
    3. 'print' → logprob: -2.5272674560546875
    4. ' print' → logprob: -3.2772674560546875
    5. ' possible' → logprob: -3.6522674560546875
    6. ' for' → logprob: -3.7772674560546875
    7. 'for' → logprob: -4.5272674560546875
    8. 'possible' → logprob: -4.5272674560546875
    9. ' e' → logprob: -5.0272674560546875
    10. ' ' → logprob: -5.2772674560546875

Token 110: ' on' (ID: 402)
  Prédit: ' if'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' if' → logprob: -0.9006672501564026
    2. ' ' → logprob: -2.400667190551758
    3. 'for' → logprob: -2.525667190551758
    4. 'if' → logprob: -2.650667190551758
    5. ' for' → logprob: -2.775667190551758
    6. '#' → logprob: -3.025667190551758
    7. ' #' → logprob: -3.025667190551758
    8. ' next' → logprob: -3.400667190551758
    9. 's' → logprob: -3.900667190551758
    10. '  ' → logprob: -4.525667190551758

Token 111: ' peut' (ID: 9216)
  Prédit: ' peut'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' peut' → logprob: -1.5231175422668457
    2. ' doit' → logprob: -1.7731175422668457
    3. ' met' → logprob: -2.1481175422668457
    4. 'put' → logprob: -2.8981175422668457
    5. 'print' → logprob: -2.8981175422668457
    6. ' put' → logprob: -3.0231175422668457
    7. 'met' → logprob: -3.0231175422668457
    8. 'arr' → logprob: -3.5231175422668457
    9. ' peux' → logprob: -3.5231175422668457
    10. ' pourra' → logprob: -3.5231175422668457

Token 112: ' doub' (ID: 12198)
  Prédit: ' passer'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' passer' → logprob: -1.332095980644226
    2. 'r' → logprob: -1.707095980644226
    3. ' avancer' → logprob: -1.707095980644226
    4. ' aller' → logprob: -1.957095980644226
    5. 's' → logprob: -3.0820960998535156
    6. ' arriver' → logprob: -3.3320960998535156
    7. 'pass' → logprob: -3.7070960998535156
    8. 't' → logprob: -4.457096099853516
    9. ' travers' → logprob: -4.582096099853516
    10. ' continuer' → logprob: -4.582096099853516

Token 113: 'ler' (ID: 1639)
  Prédit: 'ler'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'ler' → logprob: -0.13260112702846527
    2. 'le' → logprob: -2.132601022720337
    3. 'l' → logprob: -5.632601261138916
    4. 'er' → logprob: -7.507601261138916
    5. 'oner' → logprob: -7.632601261138916
    6. 'on' → logprob: -8.257600784301758
    7. 'onner' → logprob: -8.507600784301758
    8. '#' → logprob: -9.007600784301758
    9. '##' → logprob: -9.132600784301758
    10. 'ner' → logprob: -9.882600784301758

Token 114: '
' (ID: 198)
  Prédit: ' for'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' for' → logprob: -0.6631735563278198
    2. 'for' → logprob: -1.0381735563278198
    3. ' if' → logprob: -2.6631736755371094
    4. 'if' → logprob: -3.7881736755371094
    5. '#' → logprob: -5.038173675537109
    6. ' ' → logprob: -5.913173675537109
    7. ':' → logprob: -5.913173675537109
    8. '  
' → logprob: -5.913173675537109
    9. '...' → logprob: -6.038173675537109
    10. ',' → logprob: -6.288173675537109

Token 115: '   ' (ID: 271)
  Prédit: ' for'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' for' → logprob: -0.4380210340023041
    2. 'for' → logprob: -1.1880210638046265
    3. ' i' → logprob: -4.438021183013916
    4. ' if' → logprob: -4.938021183013916
    5. 'pos' → logprob: -5.188021183013916
    6. 'i' → logprob: -5.438021183013916
    7. 'if' → logprob: -5.813021183013916
    8. ' possible' → logprob: -6.188021183013916
    9. ' pos' → logprob: -6.438021183013916
    10. 'possible' → logprob: -6.438021183013916

Token 116: ' if' (ID: 538)
  Prédit: 'for'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'for' → logprob: -0.3396722674369812
    2. 'if' (adapté à ' if') → logprob: -1.839672327041626
    3. 'can' → logprob: -3.464672327041626
    4. ' for' → logprob: -3.714672327041626
    5. 'possible' → logprob: -3.839672327041626
    6. 'print' → logprob: -4.714672088623047
    7. ' if' → logprob: -4.714672088623047
    8. 'pos' → logprob: -4.714672088623047
    9. 'i' → logprob: -5.339672088623047
    10. 'ok' → logprob: -5.589672088623047

Token 117: ' c' (ID: 274)
  Prédit: ' c'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' c' → logprob: -0.8126628398895264
    2. ' b' → logprob: -1.0626628398895264
    3. ' d' → logprob: -2.5626628398895264
    4. ' (' → logprob: -2.8126628398895264
    5. ' max' → logprob: -4.1876630783081055
    6. 'b' → logprob: -4.3126630783081055
    7. 'c' → logprob: -4.3126630783081055
    8. '(b' → logprob: -4.8126630783081055
    9. ' s' → logprob: -5.3126630783081055
    10. ' any' → logprob: -5.6876630783081055

Token 118: ' >' (ID: 1424)
  Prédit: ' <'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' <' → logprob: -0.17463436722755432
    2. ' <=' → logprob: -2.1746344566345215
    3. '<' → logprob: -3.7996344566345215
    4. ' >' → logprob: -4.9246344566345215
    5. '<=' → logprob: -5.0496344566345215
    6. ' >=' → logprob: -5.7996344566345215
    7. ' -' → logprob: -6.1746344566345215
    8. ' +' → logprob: -6.2996344566345215
    9. '>' → logprob: -6.9246344566345215
    10. ' ' → logprob: -7.0496344566345215

Token 119: ' d' (ID: 272)
  Prédit: 'd'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'd' → logprob: -0.020588835701346397
    2. ' d' → logprob: -3.8955888748168945
    3. ' ' → logprob: -11.145588874816895
    4. 'b' → logprob: -11.270588874816895
    5. '	d' → logprob: -11.395588874816895
    6. 'a' → logprob: -12.770588874816895
    7. '1' → logprob: -13.395588874816895
    8. '   ' → logprob: -14.145588874816895
    9. '=d' → logprob: -14.395588874816895
    10. '  ' → logprob: -14.520588874816895

Token 120: ':' (ID: 25)
  Prédit: ':'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ':' → logprob: -0.010022499598562717
    2. ' :' → logprob: -4.7600226402282715
    3. ' and' → logprob: -6.6350226402282715
    4. ' or' → logprob: -9.760022163391113
    5. 'and' → logprob: -11.010022163391113
    6. ':
' → logprob: -11.635022163391113
    7. '-' → logprob: -12.885022163391113
    8. '>' → logprob: -13.760022163391113
    9. ' -' → logprob: -13.885022163391113
    10. '+:' → logprob: -13.885022163391113

Token 121: ' ' (ID: 220)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.41166654229164124
    2. ' print' → logprob: -1.5366665124893188
    3. 'print' → logprob: -2.1616666316986084
    4. ' if' → logprob: -5.411666393280029
    5. 'if' → logprob: -7.411666393280029
    6. '       ' → logprob: -7.911666393280029
    7. '  ' → logprob: -8.161666870117188
    8. ' ' → logprob: -8.286666870117188
    9. '    ' → logprob: -8.411666870117188
    10. '
' → logprob: -8.411666870117188

Token 122: ' #' (ID: 1069)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.5260893702507019
    2. 'print' → logprob: -1.0260894298553467
    3. ' print' → logprob: -3.1510894298553467
    4. 'if' → logprob: -5.651089191436768
    5. ' if' → logprob: -6.026089191436768
    6. ' and' → logprob: -7.276089191436768
    7. '       ' → logprob: -8.526089668273926
    8. ' for' → logprob: -8.651089668273926
    9. ' ' → logprob: -8.651089668273926
    10. '  ' → logprob: -8.776089668273926

Token 123: ' Là' (ID: 100386)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.5031996965408325
    2. 'print' → logprob: -2.253199577331543
    3. ' if' → logprob: -2.253199577331543
    4. ' print' → logprob: -2.378199577331543
    5. 'if' → logprob: -3.128199577331543
    6. ' for' → logprob: -3.628199577331543
    7. 'for' → logprob: -5.003199577331543
    8. '#' → logprob: -5.378199577331543
    9. ' start' → logprob: -6.128199577331543
    10. ' #' → logprob: -6.128199577331543

Token 124: ' il' (ID: 1793)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.12985442578792572
    2. ':' → logprob: -3.129854440689087
    3. '       ' → logprob: -3.879854440689087
    4. ' and' → logprob: -4.379854202270508
    5. '    ' → logprob: -5.004854202270508
    6. ' if' → logprob: -5.004854202270508
    7. '#' → logprob: -5.379854202270508
    8. '
' → logprob: -5.629854202270508
    9. ' #' → logprob: -5.629854202270508
    10. 'print' → logprob: -5.629854202270508

Token 125: ' faudra' (ID: 88501)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.9365571737289429
    2. ' faut' → logprob: -1.6865571737289429
    3. ' needs' → logprob: -2.6865572929382324
    4. ' is' → logprob: -3.0615572929382324
    5. ' should' → logprob: -3.1865572929382324
    6. '=' → logprob: -3.3115572929382324
    7. ' must' → logprob: -3.5615572929382324
    8. '#' → logprob: -3.6865572929382324
    9. ' a' → logprob: -4.061557292938232
    10. ' =' → logprob: -4.311557292938232

Token 126: ' dépasser' (ID: 187375)
  Prédit: 'print'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'print' → logprob: -0.3532256782054901
    2. '   ' → logprob: -1.9782257080078125
    3. '#' → logprob: -2.7282257080078125
    4. 'tr' → logprob: -3.2282257080078125
    5. ' print' → logprob: -4.7282257080078125
    6. ' trouver' → logprob: -5.4782257080078125
    7. ' travers' → logprob: -5.6032257080078125
    8. 'chercher' → logprob: -5.6032257080078125
    9. 'find' → logprob: -5.7282257080078125
    10. 's' → logprob: -5.8532257080078125

Token 127: ' l' (ID: 305)
  Prédit: 'stop'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'stop' → logprob: -1.2411049604415894
    2. 'b' → logprob: -2.366105079650879
    3. 'if' → logprob: -2.491105079650879
    4. '#' → logprob: -2.741105079650879
    5. 'c' → logprob: -2.866105079650879
    6. ' ' → logprob: -3.116105079650879
    7. ' c' → logprob: -3.366105079650879
    8. ' stop' → logprob: -3.366105079650879
    9. 's' → logprob: -3.491105079650879
    10. 'continue' → logprob: -3.491105079650879

Token 128: ''autre' (ID: 52145)
  Prédit: 'a'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'a' → logprob: -0.1017431914806366
    2. 'e' → logprob: -2.851743221282959
    3. ''autre' → logprob: -3.351743221282959
    4. ''arrêt' → logprob: -6.851743221282959
    5. 'stop' → logprob: -7.351743221282959
    6. 'es' → logprob: -7.851743221282959
    7. ' stop' → logprob: -8.3517427444458
    8. 'u' → logprob: -8.6017427444458
    9. ''' → logprob: -8.6017427444458
    10. ''a' → logprob: -8.7267427444458

Token 129: ',' (ID: 11)
  Prédit: ':'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ':' → logprob: -0.47313880920410156
    2. ' and' → logprob: -1.7231388092041016
    3. ' or' → logprob: -1.8481388092041016
    4. 'if' → logprob: -4.598138809204102
    5. '   ' → logprob: -4.848138809204102
    6. 'and' → logprob: -5.098138809204102
    7. 'or' → logprob: -5.848138809204102
    8. ' if' → logprob: -5.973138809204102
    9. '  ' → logprob: -6.223138809204102
    10. 'print' → logprob: -6.723138809204102

Token 130: ' c' (ID: 274)
  Prédit: ' if'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' if' → logprob: -0.8620896339416504
    2. '   ' → logprob: -1.6120896339416504
    3. ' print' → logprob: -2.2370896339416504
    4. 'print' → logprob: -2.4870896339416504
    5. ' for' → logprob: -2.6120896339416504
    6. 'if' → logprob: -2.7370896339416504
    7. ' and' → logprob: -4.48708963394165
    8. ' while' → logprob: -4.86208963394165
    9. 'for' → logprob: -5.23708963394165
    10. ' True' → logprob: -5.48708963394165

Token 131: ''est' (ID: 6616)
  Prédit: ' <'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' <' → logprob: -0.3444308638572693
    2. ' <=' → logprob: -1.969430923461914
    3. '+' → logprob: -2.344430923461914
    4. ' +' → logprob: -3.969430923461914
    5. ' >' → logprob: -5.094430923461914
    6. '<' → logprob: -5.094430923461914
    7. '<=' → logprob: -5.094430923461914
    8. ' -' → logprob: -5.344430923461914
    9. '-' → logprob: -5.594430923461914
    10. ' and' → logprob: -6.594430923461914

Token 132: ' un' (ID: 537)
  Prédit: 'True'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'True' → logprob: -0.7032498717308044
    2. ' True' → logprob: -1.4532499313354492
    3. ''' → logprob: -2.078249931335449
    4. 'possible' → logprob: -3.328249931335449
    5. ''b' → logprob: -3.578249931335449
    6. 'v' → logprob: -4.203249931335449
    7. 'False' → logprob: -4.328249931335449
    8. ' possible' → logprob: -4.703249931335449
    9. 'b' → logprob: -4.953249931335449
    10. 'true' → logprob: -5.203249931335449

Token 133: ' peu' (ID: 9235)
  Prédit: 'pe'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'pe' → logprob: -0.7523725032806396
    2. ' peu' → logprob: -0.7523725032806396
    3. ' problème' → logprob: -4.127372741699219
    4. ' obstacle' → logprob: -5.002372741699219
    5. 'im' → logprob: -6.002372741699219
    6. '#' → logprob: -6.002372741699219
    7. 'cas' → logprob: -6.252372741699219
    8. ' passage' → logprob: -6.252372741699219
    9. 'e' → logprob: -6.377372741699219
    10. ' cas' → logprob: -6.627372741699219

Token 134: ' délic' (ID: 73994)
  Prédit: 'plus'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'plus' → logprob: -0.12045677751302719
    2. 'com' → logprob: -2.6204566955566406
    3. 'complex' → logprob: -4.495456695556641
    4. 'just' → logprob: -4.745456695556641
    5. 'del' → logprob: -5.495456695556641
    6. 'diff' → logprob: -5.745456695556641
    7. ' plus' → logprob: -5.995456695556641
    8. 'ris' → logprob: -6.370456695556641
    9. 'moins' → logprob: -6.370456695556641
    10. 'le' → logprob: -7.245456695556641

Token 135: 'at' (ID: 266)
  Prédit: ':'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ':' → logprob: -0.45581182837486267
    2. '   ' → logprob: -1.205811858177185
    3. ':
' → logprob: -3.2058117389678955
    4. ' if' → logprob: -4.705811977386475
    5. ',' → logprob: -5.455811977386475
    6. '    
' → logprob: -5.955811977386475
    7. ' and' → logprob: -6.080811977386475
    8. ' :' → logprob: -6.705811977386475
    9. '.' → logprob: -6.830811977386475
    10. 'if' → logprob: -6.955811977386475

Token 136: '...
' (ID: 4908)
  Prédit: ':'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ':' → logprob: -0.792350709438324
    2. '   ' → logprob: -0.917350709438324
    3. ' and' → logprob: -2.7923507690429688
    4. ':
' → logprob: -3.4173507690429688
    5. ' if' → logprob: -4.417350769042969
    6. ' or' → logprob: -4.792350769042969
    7. '    
' → logprob: -5.042350769042969
    8. '
' → logprob: -5.292350769042969
    9. 'if' → logprob: -5.792350769042969
    10. '       ' → logprob: -6.042350769042969

Token 137: '       ' (ID: 309)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.6791659593582153
    2. ' for' → logprob: -1.1791659593582153
    3. 'for' → logprob: -2.804165840148926
    4. ':' → logprob: -3.179165840148926
    5. ' and' → logprob: -3.429165840148926
    6. ' if' → logprob: -4.054165840148926
    7. 'if' → logprob: -4.679165840148926
    8. ' possible' → logprob: -5.679165840148926
    9. 'start' → logprob: -5.929165840148926
    10. ':
' → logprob: -6.179165840148926

Token 138: ' trio' (ID: 53834)
  Prédit: 'for'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'for' → logprob: -0.9991546869277954
    2. 'if' → logprob: -1.6241546869277954
    3. 'found' → logprob: -1.9991546869277954
    4. 'can' → logprob: -2.499154567718506
    5. 'start' → logprob: -2.874154567718506
    6. 'segment' → logprob: -3.124154567718506
    7. 'possible' → logprob: -3.499154567718506
    8. '#' → logprob: -4.249154567718506
    9. 'i' → logprob: -4.499154567718506
    10. 'stop' → logprob: -4.499154567718506

Token 139: ' =' (ID: 314)
  Prédit: ' ='
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' =' → logprob: -0.5149456262588501
    2. '_start' → logprob: -1.63994562625885
    3. '_pos' → logprob: -2.1399455070495605
    4. '_possible' → logprob: -3.3899455070495605
    5. '=' → logprob: -3.8899455070495605
    6. 's' → logprob: -4.6399455070495605
    7. '_found' → logprob: -4.7649455070495605
    8. '_' → logprob: -5.2649455070495605
    9. '_idx' → logprob: -5.8899455070495605
    10. '_index' → logprob: -6.2649455070495605

Token 140: ' re' (ID: 322)
  Prédit: 's'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 's' → logprob: -0.1650862693786621
    2. ''' → logprob: -2.915086269378662
    3. ''s' → logprob: -3.165086269378662
    4. 're' → logprob: -3.540086269378662
    5. ' s' → logprob: -4.540086269378662
    6. ''.' → logprob: -4.790086269378662
    7. 'False' → logprob: -6.415086269378662
    8. '...' → logprob: -6.540086269378662
    9. ''#' → logprob: -6.915086269378662
    10. ' '' → logprob: -7.665086269378662

Token 141: '.search' (ID: 16718)
  Prédit: '.search'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '.search' → logprob: -0.0046430183574557304
    2. '.findall' → logprob: -5.754642963409424
    3. '.compile' → logprob: -7.504642963409424
    4. 'search' → logprob: -7.504642963409424
    5. '.sub' → logprob: -9.129643440246582
    6. '.match' → logprob: -9.254643440246582
    7. '.find' → logprob: -9.754643440246582
    8. 's' → logprob: -10.254643440246582
    9. 'r' → logprob: -11.004643440246582
    10. 'g' → logprob: -11.504643440246582

Token 142: '('\' (ID: 24345)
  Prédit: '(''
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '('' → logprob: -0.049422673881053925
    2. '(r' → logprob: -3.0494227409362793
    3. '('#' → logprob: -7.799422740936279
    4. '('\' → logprob: -9.174422264099121
    5. '('.' → logprob: -9.299422264099121
    6. '('(' → logprob: -9.549422264099121
    7. '('[' → logprob: -9.674422264099121
    8. '(' → logprob: -9.924422264099121
    9. '("' → logprob: -10.299422264099121
    10. '('\\' → logprob: -11.924422264099121

Token 143: '.\' (ID: 15043)
  Prédit: '''
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ''' → logprob: -0.16963152587413788
    2. '###' → logprob: -2.6696314811706543
    3. '...' → logprob: -3.4196314811706543
    4. '\' → logprob: -3.5446314811706543
    5. ''\' → logprob: -4.169631481170654
    6. '\.' → logprob: -6.169631481170654
    7. '...\' → logprob: -6.794631481170654
    8. 'r' → logprob: -6.919631481170654
    9. ''#' → logprob: -7.044631481170654
    10. '"...' → logprob: -7.169631481170654

Token 144: '.\' (ID: 15043)
  Prédit: '.\'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '.\' → logprob: -0.1727355271577835
    2. '{' → logprob: -2.1727354526519775
    3. '\' → logprob: -3.9227354526519775
    4. '...\' → logprob: -4.172735691070557
    5. '\.' → logprob: -4.922735691070557
    6. '.' → logprob: -6.672735691070557
    7. '...' → logprob: -7.797735691070557
    8. '.{' → logprob: -8.422735214233398
    9. '*\' → logprob: -8.672735214233398
    10. '{\' → logprob: -9.547735214233398

Token 145: '.',' (ID: 36660)
  Prédit: '.','
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '.',' → logprob: -0.17186056077480316
    2. '.')' → logprob: -1.9218605756759644
    3. '.' → logprob: -4.921860694885254
    4. '.')
' → logprob: -6.421860694885254
    5. '\.' → logprob: -7.296860694885254
    6. '.',
' → logprob: -7.921860694885254
    7. '.\' → logprob: -8.046860694885254
    8. '.'' → logprob: -8.046860694885254
    9. '\' → logprob: -8.296860694885254
    10. '',' → logprob: -8.796860694885254

Token 146: ' s' (ID: 265)
  Prédit: ' s'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' s' → logprob: -0.08896291255950928
    2. 's' → logprob: -2.463963031768799
    3. ' ' → logprob: -11.46396255493164
    4. '   ' → logprob: -11.96396255493164
    5. '  ' → logprob: -13.83896255493164
    6. '	s' → logprob: -13.83896255493164
    7. ''s' → logprob: -14.15146255493164
    8. ')' → logprob: -14.90146255493164
    9. ' ' → logprob: -14.96396255493164
    10. ',' → logprob: -15.21396255493164

Token 147: '[b' (ID: 40800)
  Prédit: '[c'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '[c' → logprob: -0.6534174084663391
    2. '[start' → logprob: -1.0284173488616943
    3. '[' → logprob: -2.2784173488616943
    4. ')' → logprob: -4.403417587280273
    5. '[d' → logprob: -5.403417587280273
    6. '[s' → logprob: -7.153417587280273
    7. '[a' → logprob: -7.278417587280273
    8. '[b' → logprob: -7.653417587280273
    9. ',' → logprob: -8.028417587280273
    10. '[max' → logprob: -8.653417587280273

Token 148: '-' (ID: 12)
  Prédit: ':c'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ':c' → logprob: -0.4373410642147064
    2. ':' → logprob: -1.6873410940170288
    3. '-' → logprob: -2.0623409748077393
    4. ':d' → logprob: -3.8123409748077393
    5. ' -' → logprob: -4.812341213226318
    6. ':b' → logprob: -5.312341213226318
    7. 'c' → logprob: -5.562341213226318
    8. ' :' → logprob: -6.687341213226318
    9. '[c' → logprob: -7.812341213226318
    10. 'stop' → logprob: -8.18734073638916

Token 149: '2' (ID: 17)
  Prédit: '1'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '1' → logprob: -0.005387310869991779
    2. 'c' → logprob: -6.255387306213379
    3. 'd' → logprob: -6.755387306213379
    4. '2' → logprob: -7.130387306213379
    5. '3' → logprob: -7.130387306213379
    6. ' ' → logprob: -7.880387306213379
    7. '4' → logprob: -9.130387306213379
    8. ':d' → logprob: -10.130387306213379
    9. ':' → logprob: -10.255387306213379
    10. ' c' → logprob: -10.505387306213379

Token 150: ':d' (ID: 88567)
  Prédit: ':b'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ':b' → logprob: -0.02157527208328247
    2. ':' → logprob: -3.8965752124786377
    3. ' :' → logprob: -7.271575450897217
    4. 'b' → logprob: -9.146574974060059
    5. ':c' → logprob: -9.146574974060059
    6. '])' → logprob: -10.271574974060059
    7. ':-' → logprob: -10.771574974060059
    8. ':s' → logprob: -11.271574974060059
    9. ':d' → logprob: -11.271574974060059
    10. ':start' → logprob: -11.771574974060059

Token 151: '+' (ID: 10)
  Prédit: '])'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '])' → logprob: -0.503703773021698
    2. '-' → logprob: -1.0037038326263428
    3. '+' → logprob: -3.6287038326263428
    4. ' -' → logprob: -6.628703594207764
    5. ' ])' → logprob: -8.003704071044922
    6. '3' → logprob: -8.503704071044922
    7. '2' → logprob: -8.878704071044922
    8. ']' → logprob: -8.878704071044922
    9. ' +' → logprob: -9.128704071044922
    10. ']+' → logprob: -9.128704071044922

Token 152: '1' (ID: 16)
  Prédit: '2'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '2' → logprob: -0.44844093918800354
    2. '1' → logprob: -1.1984409093856812
    3. '3' → logprob: -2.8234410285949707
    4. '-' → logprob: -9.323440551757812
    5. '0' → logprob: -9.823440551757812
    6. '4' → logprob: -9.948440551757812
    7. '])' → logprob: -10.198440551757812
    8. ' ' → logprob: -10.823440551757812
    9. '+' → logprob: -11.073440551757812
    10. ']' → logprob: -11.073440551757812

Token 153: '])' (ID: 4636)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')' → logprob: -0.0023783810902386904
    2. '')' → logprob: -6.502378463745117
    3. ')
' → logprob: -7.252378463745117
    4. '])' → logprob: -10.002378463745117
    5. ' )' → logprob: -10.502378463745117
    6. '`)' → logprob: -10.627378463745117
    7. ')`' → logprob: -11.002378463745117
    8. '))' → logprob: -11.377378463745117
    9. '")' → logprob: -11.502378463745117
    10. '）' → logprob: -11.752378463745117

Token 154: ' ' (ID: 220)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ')' → logprob: -0.2862693667411804
    2. ' if' → logprob: -2.161269426345825
    3. 'if' → logprob: -2.536269426345825
    4. '
' → logprob: -3.911269426345825
    5. ')
' → logprob: -3.911269426345825
    6. '<|end|>' → logprob: -5.161269187927246
    7. ').' → logprob: -6.036269187927246
    8. '.' → logprob: -6.536269187927246
    9. '):
' → logprob: -6.786269187927246
    10. ' )' → logprob: -7.036269187927246

Token 155: ' #' (ID: 1069)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ')' → logprob: -0.251307874917984
    2. '
' → logprob: -2.001307964324951
    3. ')
' → logprob: -3.626307964324951
    4. 'if' → logprob: -4.126307964324951
    5. ' if' → logprob: -4.626307964324951
    6. ' is' → logprob: -5.001307964324951
    7. ':
' → logprob: -5.126307964324951
    8. ':' → logprob: -5.501307964324951
    9. '<|end|>' → logprob: -5.501307964324951
    10. '):
' → logprob: -5.751307964324951

Token 156: ' Je' (ID: 4678)
  Prédit: 'if'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'if' → logprob: -0.7272504568099976
    2. ')' → logprob: -0.9772504568099976
    3. ' if' → logprob: -2.602250576019287
    4. '.' → logprob: -3.602250576019287
    5. '')' → logprob: -4.352250576019287
    6. ')
' → logprob: -5.477250576019287
    7. ''.' → logprob: -5.727250576019287
    8. '   ' → logprob: -5.852250576019287
    9. '       ' → logprob: -6.227250576019287
    10. '.)' → logprob: -6.602250576019287

Token 157: ' crois' (ID: 65485)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ')' → logprob: -1.3024318218231201
    2. 's' → logprob: -2.05243182182312
    3. 'f' → logprob: -2.55243182182312
    4. ' find' → logprob: -2.55243182182312
    5. 'n' → logprob: -3.05243182182312
    6. '.' → logprob: -3.05243182182312
    7. 'm' → logprob: -3.30243182182312
    8. 'd' → logprob: -3.80243182182312
    9. ' search' → logprob: -3.92743182182312
    10. 't' → logprob: -4.052432060241699

Token 158: ' qu' (ID: 474)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '(' → logprob: -1.4210116863250732
    2. ' not' → logprob: -2.2960116863250732
    3. '('\' → logprob: -2.2960116863250732
    4. '('.' → logprob: -2.4210116863250732
    5. '('.')' → logprob: -2.6710116863250732
    6. 'not' → logprob: -2.7960116863250732
    7. '('.',' → logprob: -2.9210116863250732
    8. '('' → logprob: -3.5460116863250732
    9. 'tr' → logprob: -3.6710116863250732
    10. 'if' → logprob: -3.9210116863250732

Token 159: ''il' (ID: 14683)
  Prédit: '''
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ''' → logprob: -1.0644946098327637
    2. ' que' → logprob: -1.1894946098327637
    3. ''il' → logprob: -2.1894946098327637
    4. ' qu' → logprob: -2.9394946098327637
    5. 'que' → logprob: -2.9394946098327637
    6. ''on' → logprob: -3.0644946098327637
    7. 'e' → logprob: -3.3144946098327637
    8. 're' → logprob: -4.189494609832764
    9. 'qu' → logprob: -5.189494609832764
    10. ' on' → logprob: -5.564494609832764

Token 160: ' faut' (ID: 17821)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')' → logprob: -0.4806058704853058
    2. ' faut' → logprob: -1.7306058406829834
    3. ' is' → logprob: -2.9806058406829834
    4. 's' → logprob: -3.8556058406829834
    5. ' must' → logprob: -3.9806058406829834
    6. '<|end|>' → logprob: -3.9806058406829834
    7. ' faudra' → logprob: -3.9806058406829834
    8. 'f' → logprob: -4.1056060791015625
    9. ' should' → logprob: -4.3556060791015625
    10. ' faudrait' → logprob: -4.9806060791015625

Token 161: ' regarder' (ID: 73220)
  Prédit: 're'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 're' → logprob: -0.8809726238250732
    2. 'b' → logprob: -2.0059726238250732
    3. ' b' → logprob: -2.6309726238250732
    4. 's' → logprob: -2.8809726238250732
    5. ' continuer' → logprob: -2.8809726238250732
    6. 'tr' → logprob: -3.2559726238250732
    7. ' s' → logprob: -3.2559726238250732
    8. '3' → logprob: -3.3809726238250732
    9. ' trouver' → logprob: -3.7559726238250732
    10. 'len' → logprob: -3.8809726238250732

Token 162: ' un' (ID: 537)
  Prédit: '('.')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '('.')' → logprob: -1.0249335765838623
    2. ' for' → logprob: -1.7749335765838623
    3. '...' → logprob: -2.2749335765838623
    4. '('' → logprob: -2.7749335765838623
    5. 'for' → logprob: -2.7749335765838623
    6. '(' → logprob: -3.2749335765838623
    7. '('.' → logprob: -3.3999335765838623
    8. '('.',' → logprob: -3.5249335765838623
    9. ')' → logprob: -3.7749335765838623
    10. '.' → logprob: -3.8999335765838623

Token 163: ' peu' (ID: 9235)
  Prédit: ' peu'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' peu' → logprob: -0.20824211835861206
    2. 'pe' → logprob: -2.208242177963257
    3. 'e' → logprob: -2.583242177963257
    4. '```' → logprob: -6.833241939544678
    5. ' peut' → logprob: -8.333242416381836
    6. ' plus' → logprob: -8.833242416381836
    7. 'eux' → logprob: -8.958242416381836
    8. ' little' → logprob: -8.958242416381836
    9. ' petit' → logprob: -9.708242416381836
    10. 'plus' → logprob: -9.708242416381836

Token 164: ' avant' (ID: 13339)
  Prédit: 'plus'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'plus' → logprob: -0.3233206868171692
    2. ' plus' → logprob: -2.1983206272125244
    3. 'ahead' → logprob: -2.9483206272125244
    4. 'b' → logprob: -4.3233208656311035
    5. '.' → logprob: -4.5733208656311035
    6. 'a' → logprob: -4.5733208656311035
    7. 's' → logprob: -4.8233208656311035
    8. '```' → logprob: -4.8233208656311035
    9. '+' → logprob: -4.9483208656311035
    10. ' ahead' → logprob: -4.9483208656311035

Token 165: ' b' (ID: 287)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ')' → logprob: -0.37467801570892334
    2. ' if' → logprob: -2.624678134918213
    3. ':' → logprob: -3.124678134918213
    4. 'if' → logprob: -3.249678134918213
    5. ':
' → logprob: -3.624678134918213
    6. '.' → logprob: -3.874678134918213
    7. '')' → logprob: -3.999678134918213
    8. ')
' → logprob: -4.374678134918213
    9. ',' → logprob: -4.499678134918213
    10. '...' → logprob: -4.624678134918213

Token 166: ' pour' (ID: 1930)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ')' → logprob: -0.02719387412071228
    2. ')
' → logprob: -4.027194023132324
    3. '<|end|>' → logprob: -6.277194023132324
    4. ' if' → logprob: -6.402194023132324
    5. 'if' → logprob: -6.652194023132324
    6. '.' → logprob: -6.902194023132324
    7. '   ' → logprob: -7.527194023132324
    8. ').' → logprob: -7.902194023132324
    9. '')' → logprob: -8.277194023132324
    10. '
' → logprob: -8.527194023132324

Token 167: ' avoir' (ID: 16595)
  Prédit: 'avoir'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'avoir' → logprob: -1.067563772201538
    2. ' avoir' → logprob: -1.317563772201538
    3. 'd' → logprob: -2.317563772201538
    4. 'b' → logprob: -3.567563772201538
    5. 'voir' → logprob: -3.692563772201538
    6. '3' → logprob: -3.692563772201538
    7. ' ' → logprob: -3.817563772201538
    8. ' pouvoir' → logprob: -3.817563772201538
    9. 'c' → logprob: -3.817563772201538
    10. ''avoir' → logprob: -4.192564010620117

Token 168: ' de' (ID: 334)
  Prédit: 'la'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'la' → logprob: -1.4406636953353882
    2. 'l' → logprob: -1.5656636953353882
    3. ' la' → logprob: -1.5656636953353882
    4. 'le' → logprob: -2.5656638145446777
    5. '...' → logprob: -2.9406638145446777
    6. ' l' → logprob: -3.3156638145446777
    7. ' le' → logprob: -3.5656638145446777
    8. ''' → logprob: -3.9406638145446777
    9. ' un' → logprob: -4.190663814544678
    10. 'une' → logprob: -4.565663814544678

Token 169: ' la' (ID: 557)
  Prédit: 'la'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'la' → logprob: -0.7244833111763
    2. 'l' → logprob: -1.0994832515716553
    3. ' la' → logprob: -2.2244832515716553
    4. '...' → logprob: -3.9744832515716553
    5. 's' → logprob: -4.099483489990234
    6. ' l' → logprob: -4.974483489990234
    7. 'tout' → logprob: -5.099483489990234
    8. 'place' → logprob: -5.474483489990234
    9. 'a' → logprob: -6.224483489990234
    10. ''' → logprob: -6.474483489990234

Token 170: ' marge' (ID: 138270)
  Prédit: ' marge'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' marge' → logprob: -0.5302538871765137
    2. 'place' → logprob: -1.9052538871765137
    3. 'm' → logprob: -2.0302538871765137
    4. 'flex' → logprob: -3.4052538871765137
    5. 'long' → logprob: -3.7802538871765137
    6. 'pl' → logprob: -4.030253887176514
    7. ' longueur' → logprob: -4.780253887176514
    8. '...' → logprob: -5.030253887176514
    9. ' flex' → logprob: -5.530253887176514
    10. 'margin' → logprob: -5.655253887176514

Token 171: '
' (ID: 198)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ')' → logprob: -0.12825703620910645
    2. 'if' → logprob: -3.3782570362091064
    3. ' if' → logprob: -4.003256797790527
    4. ')
' → logprob: -4.128256797790527
    5. '.' → logprob: -4.378256797790527
    6. ':
' → logprob: -4.628256797790527
    7. '   ' → logprob: -5.378256797790527
    8. '):
' → logprob: -5.378256797790527
    9. ':' → logprob: -5.503256797790527
    10. ').' → logprob: -5.628256797790527

Token 172: '       ' (ID: 309)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ')' → logprob: -0.19195370376110077
    2. 'if' → logprob: -2.691953659057617
    3. ' if' → logprob: -2.691953659057617
    4. '):
' → logprob: -4.941953659057617
    5. '.' → logprob: -5.066953659057617
    6. ':
' → logprob: -5.441953659057617
    7. ')
' → logprob: -5.816953659057617
    8. ' and' → logprob: -5.816953659057617
    9. '<|end|>' → logprob: -5.941953659057617
    10. ':' → logprob: -6.066953659057617

Token 173: ' if' (ID: 538)
  Prédit: 'if'
  Correct (stricte): False
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'if' (adapté à ' if') → logprob: -0.1195133626461029
    2. ' if' → logprob: -2.2445132732391357
    3. ')' → logprob: -5.619513511657715
    4. ':' → logprob: -7.119513511657715
    5. '):' → logprob: -7.369513511657715
    6. ':
' → logprob: -7.619513511657715
    7. '       ' → logprob: -7.744513511657715
    8. '   ' → logprob: -8.244513511657715
    9. '):
' → logprob: -8.994513511657715
    10. ')
' → logprob: -9.869513511657715

Token 174: ' trio' (ID: 53834)
  Prédit: 'not'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'not' → logprob: -1.2981104850769043
    2. ' trio' → logprob: -1.2981104850769043
    3. ' not' → logprob: -1.4231104850769043
    4. 'tr' → logprob: -1.5481104850769043
    5. ' ' → logprob: -9.298110961914062
    6. 'trip' → logprob: -10.423110961914062
    7. '  ' → logprob: -10.548110961914062
    8. ' trilogy' → logprob: -10.923110961914062
    9. '(tr' → logprob: -10.985610961914062
    10. ' tr' → logprob: -11.298110961914062

Token 175: ':
' (ID: 734)
  Prédit: ':'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ':' → logprob: -0.22600476443767548
    2. ' is' → logprob: -1.601004719734192
    3. 'is' → logprob: -7.976004600524902
    4. ' and' → logprob: -9.476004600524902
    5. '==' → logprob: -9.476004600524902
    6. 'and' → logprob: -10.601004600524902
    7. ':
' → logprob: -10.601004600524902
    8. '=' → logprob: -10.976004600524902
    9. ' :' → logprob: -11.851004600524902
    10. 'not' → logprob: -12.726004600524902

Token 176: '           ' (ID: 352)
  Prédit: '           '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '           ' → logprob: -0.06964649260044098
    2. ' print' → logprob: -3.8196465969085693
    3. ':
' → logprob: -4.06964635848999
    4. ':' → logprob: -4.31964635848999
    5. 'print' → logprob: -4.69464635848999
    6. ' and' → logprob: -5.69464635848999
    7. ',' → logprob: -7.19464635848999
    8. ' if' → logprob: -7.56964635848999
    9. '            
' → logprob: -8.694646835327148
    10. '
' → logprob: -8.819646835327148

Token 177: ' print' (ID: 2123)
  Prédit: 'print'
  Correct (stricte): False
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'print' (adapté à ' print') → logprob: -0.12713870406150818
    2. ' print' → logprob: -2.127138614654541
    3. '           ' → logprob: -8.7521390914917
    4. '   ' → logprob: -10.1271390914917
    5. '       ' → logprob: -12.1271390914917
    6. '               ' → logprob: -12.1271390914917
    7. '	print' → logprob: -14.0021390914917
    8. ' ' → logprob: -14.8771390914917
    9. 'pass' → logprob: -16.627138137817383
    10. '  ' → logprob: -16.627138137817383

Token 178: '('' (ID: 706)
  Prédit: '(''
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '('' → logprob: -0.0002378673671046272
    2. '(' → logprob: -8.625237464904785
    3. '("' → logprob: -9.750237464904785
    4. ' ('' → logprob: -18.5002384185791
    5. '(
' → logprob: -18.8752384185791
    6. '(('' → logprob: -19.1252384185791
    7. '()' → logprob: -19.2502384185791
    8. ''' → logprob: -19.3752384185791
    9. '(No' → logprob: -20.0002384185791
    10. '(

' → logprob: -20.1252384185791

Token 179: 'Yes' (ID: 13022)
  Prédit: '''
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ''' → logprob: -0.026821991428732872
    2. 'Yes' → logprob: -3.651822090148926
    3. '('' → logprob: -7.776822090148926
    4. '"' → logprob: -9.651822090148926
    5. 'No' → logprob: -10.651822090148926
    6. ''A' → logprob: -12.401822090148926
    7. 'yes' → logprob: -13.276822090148926
    8. 'Oui' → logprob: -13.776822090148926
    9. ''D' → logprob: -13.776822090148926
    10. ''S' → logprob: -13.901822090148926

Token 180: '')' (ID: 1542)
  Prédit: '')
'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '')
' → logprob: -0.08053696900606155
    2. '')' → logprob: -2.5805370807647705
    3. ')
' → logprob: -6.580536842346191
    4. ')' → logprob: -8.580536842346191
    5. '')
' → logprob: -10.205536842346191
    6. '       ' → logprob: -11.080536842346191
    7. '")
' → logprob: -12.080536842346191
    8. '   ' → logprob: -12.205536842346191
    9. '           ' → logprob: -13.080536842346191
    10. 'else' → logprob: -13.205536842346191

Token 181: ' ' (ID: 220)
  Prédit: '       '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '       ' → logprob: -0.04588203504681587
    2. 'else' → logprob: -3.170881986618042
    3. ' else' → logprob: -6.045882225036621
    4. '   ' → logprob: -8.295882225036621
    5. '           ' → logprob: -8.545882225036621
    6. '
' → logprob: -10.670882225036621
    7. '	else' → logprob: -11.045882225036621
    8. 'elif' → logprob: -11.795882225036621
    9. '	' → logprob: -12.170882225036621
    10. '```' → logprob: -12.670882225036621

Token 182: ' #' (ID: 1069)
  Prédit: '       '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '       ' → logprob: -0.24289745092391968
    2. 'else' → logprob: -1.6178975105285645
    3. ' else' → logprob: -4.1178975105285645
    4. '   ' → logprob: -6.9928975105285645
    5. '           ' → logprob: -10.117897033691406
    6. '	else' → logprob: -10.117897033691406
    7. 'elif' → logprob: -10.617897033691406
    8. '
' → logprob: -11.492897033691406
    9. ' ' → logprob: -11.742897033691406
    10. '	' → logprob: -12.242897033691406

Token 183: ' Ok' (ID: 13927)
  Prédit: 'else'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'else' → logprob: -0.05879104509949684
    2. '       ' → logprob: -3.433791160583496
    3. ' else' → logprob: -3.808791160583496
    4. '   ' → logprob: -6.058791160583496
    5. '	else' → logprob: -8.683791160583496
    6. '           ' → logprob: -9.058791160583496
    7. ' ' → logprob: -11.558791160583496
    8. 'elif' → logprob: -11.683791160583496
    9. '
' → logprob: -12.433791160583496
    10. '               ' → logprob: -12.558791160583496

Token 184: ',' (ID: 11)
  Prédit: '       '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '       ' → logprob: -0.040210284292697906
    2. 'else' → logprob: -4.040210247039795
    3. '           ' → logprob: -4.290210247039795
    4. ' else' → logprob: -5.165210247039795
    5. '   ' → logprob: -6.165210247039795
    6. '
' → logprob: -9.040210723876953
    7. '	else' → logprob: -9.290210723876953
    8. '	' → logprob: -10.665210723876953
    9. '               ' → logprob: -10.790210723876953
    10. '```' → logprob: -11.540210723876953

Token 185: ' on' (ID: 402)
  Prédit: ' else'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' else' → logprob: -0.6094962358474731
    2. 'else' → logprob: -0.8594962358474731
    3. '       ' → logprob: -3.6094961166381836
    4. '   ' → logprob: -5.359496116638184
    5. '           ' → logprob: -7.359496116638184
    6. 'exit' → logprob: -8.859496116638184
    7. ' ' → logprob: -9.484496116638184
    8. 'return' → logprob: -9.734496116638184
    9. ' ' → logprob: -10.109496116638184
    10. '
' → logprob: -10.359496116638184

Token 186: ' peut' (ID: 9216)
  Prédit: 'continue'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'continue' → logprob: -0.42954355478286743
    2. ' continue' → logprob: -1.8045434951782227
    3. '           ' → logprob: -2.6795434951782227
    4. '       ' → logprob: -3.6795434951782227
    5. 'contin' → logprob: -4.179543495178223
    6. 'print' → logprob: -4.429543495178223
    7. 'est' → logprob: -4.554543495178223
    8. 'n' → logprob: -4.804543495178223
    9. '   ' → logprob: -4.929543495178223
    10. 'else' → logprob: -5.179543495178223

Token 187: ' dépasser' (ID: 187375)
  Prédit: 'pass'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'pass' → logprob: -0.24594621360301971
    2. 'contin' → logprob: -1.8709461688995361
    3. 'd' → logprob: -4.495946407318115
    4. ' passer' → logprob: -4.495946407318115
    5. ' continuer' → logprob: -4.495946407318115
    6. 'sur' → logprob: -4.995946407318115
    7. ' travers' → logprob: -4.995946407318115
    8. 'aller' → logprob: -6.120946407318115
    9. ' doub' → logprob: -6.120946407318115
    10. 'r' → logprob: -6.245946407318115

Token 188: '
' (ID: 198)
  Prédit: '       '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '       ' → logprob: -0.00826255138963461
    2. '           ' → logprob: -5.758262634277344
    3. 'else' → logprob: -6.008262634277344
    4. '   ' → logprob: -6.383262634277344
    5. ' else' → logprob: -7.133262634277344
    6. '               ' → logprob: -9.633262634277344
    7. '
' → logprob: -10.883262634277344
    8. '```' → logprob: -11.633262634277344
    9. '	' → logprob: -11.883262634277344
    10. '	else' → logprob: -12.258262634277344

Token 189: '       ' (ID: 309)
  Prédit: '       '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '       ' → logprob: -0.12354728579521179
    2. 'else' → logprob: -2.248547315597534
    3. ' else' → logprob: -4.873547077178955
    4. '   ' → logprob: -5.873547077178955
    5. '           ' → logprob: -9.373547554016113
    6. '	else' → logprob: -9.873547554016113
    7. '	' → logprob: -9.873547554016113
    8. 'elif' → logprob: -11.498547554016113
    9. '```' → logprob: -12.748547554016113
    10. '               ' → logprob: -12.998547554016113

Token 190: ' else' (ID: 1203)
  Prédit: 'else'
  Correct (stricte): False
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'else' (adapté à ' else') → logprob: -0.16715161502361298
    2. '       ' → logprob: -1.9171515703201294
    3. ' else' → logprob: -5.16715145111084
    4. '   ' → logprob: -6.79215145111084
    5. '           ' → logprob: -10.29215145111084
    6. 'elif' → logprob: -10.29215145111084
    7. '	else' → logprob: -12.16715145111084
    8. '
' → logprob: -13.04215145111084
    9. '     ' → logprob: -13.41715145111084
    10. ' ' → logprob: -13.91715145111084

Token 191: ':
' (ID: 734)
  Prédit: ':'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ':' → logprob: -0.38880470395088196
    2. ':
' → logprob: -1.1388046741485596
    3. '           ' → logprob: -6.388804912567139
    4. '       ' → logprob: -8.76380443572998
    5. '   ' → logprob: -9.38880443572998
    6. ':

' → logprob: -13.01380443572998
    7. ' :
' → logprob: -13.26380443572998
    8. 'print' → logprob: -13.38880443572998
    9. '          ' → logprob: -13.63880443572998
    10. '               ' → logprob: -14.13880443572998

Token 192: '           ' (ID: 352)
  Prédit: '           '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '           ' → logprob: -0.10044950246810913
    2. 'print' → logprob: -2.350449562072754
    3. ' print' → logprob: -8.600449562072754
    4. '       ' → logprob: -10.475449562072754
    5. '   ' → logprob: -10.975449562072754
    6. '               ' → logprob: -11.475449562072754
    7. '```' → logprob: -14.350449562072754
    8. ' ' → logprob: -14.475449562072754
    9. '         ' → logprob: -14.475449562072754
    10. '          ' → logprob: -14.600449562072754

Token 193: ' print' (ID: 2123)
  Prédit: 'print'
  Correct (stricte): False
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'print' (adapté à ' print') → logprob: -0.00016384923947043717
    2. ' print' → logprob: -8.750164031982422
    3. '           ' → logprob: -12.875164031982422
    4. '   ' → logprob: -13.000164031982422
    5. '       ' → logprob: -14.500164031982422
    6. '	print' → logprob: -16.875164031982422
    7. '```' → logprob: -17.375164031982422
    8. ' ' → logprob: -19.250164031982422
    9. '               ' → logprob: -19.500164031982422
    10. '  ' → logprob: -19.625164031982422

Token 194: '('' (ID: 706)
  Prédit: '(''
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '('' → logprob: -0.0007101670489646494
    2. '(' → logprob: -7.2507100105285645
    3. '("' → logprob: -15.750710487365723
    4. '(
' → logprob: -16.625709533691406
    5. '(No' → logprob: -18.375709533691406
    6. '()' → logprob: -18.500709533691406
    7. '(False' → logprob: -18.500709533691406
    8. '(('' → logprob: -18.875709533691406
    9. '('(' → logprob: -18.875709533691406
    10. '(

' → logprob: -18.875709533691406

Token 195: 'No' (ID: 3160)
  Prédit: 'No'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'No' → logprob: -0.002475777640938759
    2. ''' → logprob: -6.002475738525391
    3. '"No' → logprob: -15.75247573852539
    4. ' No' → logprob: -18.87747573852539
    5. 'Yes' → logprob: -19.87747573852539
    6. '_No' → logprob: -20.37747573852539
    7. '('' → logprob: -20.50247573852539
    8. 'no' → logprob: -20.50247573852539
    9. ''N' → logprob: -20.50247573852539
    10. '"' → logprob: -20.62747573852539

Token 196: '')' (ID: 1542)
  Prédit: '')'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '')' → logprob: -0.02332397550344467
    2. ')' → logprob: -3.7733240127563477
    3. '')
' → logprob: -9.523324012756348
    4. '")' → logprob: -13.273324012756348
    5. ')
' → logprob: -14.023324012756348
    6. '   ' → logprob: -14.398324012756348
    7. ''' → logprob: -14.648324012756348
    8. '’)' → logprob: -14.773324012756348
    9. '`)' → logprob: -15.148324012756348
    10. ' )' → logprob: -15.523324012756348

Token 197: ' ' (ID: 220)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.0518965944647789
    2. 'else' → logprob: -3.051896572113037
    3. 'elif' → logprob: -6.301896572113037
    4. '
' → logprob: -7.176896572113037
    5. '    
' → logprob: -8.176897048950195
    6. ' else' → logprob: -8.176897048950195
    7. '```' → logprob: -9.926897048950195
    8. '\n' → logprob: -10.801897048950195
    9. '	else' → logprob: -11.176897048950195
    10. ')
' → logprob: -11.801897048950195

Token 198: ' #' (ID: 1069)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.18667317926883698
    2. 'else' → logprob: -1.8116731643676758
    3. 'elif' → logprob: -5.061673164367676
    4. ' else' → logprob: -7.811673164367676
    5. ')
' → logprob: -10.436673164367676
    6. '
' → logprob: -10.561673164367676
    7. '       ' → logprob: -10.686673164367676
    8. ')' → logprob: -10.811673164367676
    9. '```' → logprob: -10.811673164367676
    10. '    
' → logprob: -11.186673164367676

Token 199: ' Zut' (ID: 120834)
  Prédit: 'else'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'else' → logprob: -0.21029068529605865
    2. 'Ok' → logprob: -2.2102906703948975
    3. ' else' → logprob: -3.8352906703948975
    4. '           ' → logprob: -4.335290908813477
    5. '#' → logprob: -4.585290908813477
    6. 'No' → logprob: -4.835290908813477
    7. 'Yes' → logprob: -4.960290908813477
    8. 'elif' → logprob: -5.710290908813477
    9. '   ' → logprob: -6.085290908813477
    10. ')' → logprob: -6.085290908813477

Token 200: ' alors' (ID: 17971)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.019553037360310555
    2. 'else' → logprob: -4.019553184509277
    3. ' else' → logprob: -7.644553184509277
    4. 'elif' → logprob: -7.769553184509277
    5. '```' → logprob: -7.894553184509277
    6. '       ' → logprob: -9.769553184509277
    7. ')' → logprob: -10.394553184509277
    8. '	else' → logprob: -11.644553184509277
    9. '<|end|>' → logprob: -11.894553184509277
    10. ')
' → logprob: -12.019553184509277

Token 201: '
' (ID: 198)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.0026328498497605324
    2. 'else' → logprob: -6.0026326179504395
    3. ' else' → logprob: -9.377633094787598
    4. '
' → logprob: -10.502633094787598
    5. 'elif' → logprob: -10.877633094787598
    6. '	else' → logprob: -11.877633094787598
    7. '```' → logprob: -12.127633094787598
    8. '    
' → logprob: -12.377633094787598
    9. '       ' → logprob: -12.752633094787598
    10. ')
' → logprob: -12.877633094787598

Token 202: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.25296348333358765
    2. 'else' → logprob: -1.5029635429382324
    3. ' else' → logprob: -7.127963542938232
    4. 'elif' → logprob: -8.627963066101074
    5. '```' → logprob: -10.877963066101074
    6. '	else' → logprob: -11.127963066101074
    7. '    
' → logprob: -11.877963066101074
    8. '
' → logprob: -12.002963066101074
    9. '       ' → logprob: -12.877963066101074
    10. ':
' → logprob: -14.377963066101074

Token 203: ' else' (ID: 1203)
  Prédit: 'else'
  Correct (stricte): False
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'else' (adapté à ' else') → logprob: -0.010005502961575985
    2. '   ' → logprob: -5.010005474090576
    3. ' else' → logprob: -5.760005474090576
    4. 'elif' → logprob: -9.010005950927734
    5. ' ' → logprob: -12.760005950927734
    6. '	else' → logprob: -13.010005950927734
    7. ':
' → logprob: -13.135005950927734
    8. ':' → logprob: -13.385005950927734
    9. ')' → logprob: -13.760005950927734
    10. '
' → logprob: -14.510005950927734

Token 204: ':
' (ID: 734)
  Prédit: ':'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ':' → logprob: -0.100350521504879
    2. ':
' → logprob: -2.3503506183624268
    3. '   ' → logprob: -8.975350379943848
    4. '       ' → logprob: -11.225350379943848
    5. ':

' → logprob: -13.600350379943848
    6. ' :' → logprob: -14.225350379943848
    7. ':
' → logprob: -14.600350379943848
    8. 'print' → logprob: -14.725350379943848
    9. ' :
' → logprob: -14.725350379943848
    10. '    ' → logprob: -15.475350379943848

Token 205: '       ' (ID: 309)
  Prédit: 'tr'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'tr' → logprob: -0.5457154512405396
    2. '   ' → logprob: -0.9207154512405396
    3. '#' → logprob: -4.67071533203125
    4. 'if' → logprob: -5.17071533203125
    5. 'print' → logprob: -5.79571533203125
    6. ' tr' → logprob: -5.92071533203125
    7. '       ' → logprob: -7.79571533203125
    8. 'trip' → logprob: -7.79571533203125
    9. ' trio' → logprob: -9.17071533203125
    10. ' if' → logprob: -9.29571533203125

Token 206: ' print' (ID: 2123)
  Prédit: 'print'
  Correct (stricte): False
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'print' (adapté à ' print') → logprob: -0.016147097572684288
    2. 'if' → logprob: -4.391147136688232
    3. 'tr' → logprob: -5.891147136688232
    4. 'trip' → logprob: -8.891146659851074
    5. 'path' → logprob: -9.266146659851074
    6. 'middle' → logprob: -9.266146659851074
    7. '#' → logprob: -9.516146659851074
    8. 'possible' → logprob: -9.891146659851074
    9. '   ' → logprob: -10.141146659851074
    10. 'for' → logprob: -10.266146659851074

Token 207: '('' (ID: 706)
  Prédit: '(''
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '('' → logprob: -7.517272024415433e-05
    2. '(' → logprob: -9.500075340270996
    3. '("' → logprob: -15.500075340270996
    4. '(('' → logprob: -18.25007438659668
    5. '(
' → logprob: -19.12507438659668
    6. '()' → logprob: -19.37507438659668
    7. '('(' → logprob: -19.50007438659668
    8. ' ('' → logprob: -20.25007438659668
    9. '(True' → logprob: -22.00007438659668
    10. '(',' → logprob: -22.25007438659668

Token 208: 'Yes' (ID: 13022)
  Prédit: '''
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ''' → logprob: -0.4749109148979187
    2. 'Yes' → logprob: -0.9749109148979187
    3. '('' → logprob: -7.099910736083984
    4. 'No' → logprob: -12.974910736083984
    5. '"' → logprob: -12.974910736083984
    6. '(' → logprob: -14.599910736083984
    7. '
' → logprob: -14.599910736083984
    8. 'YES' → logprob: -14.724910736083984
    9. '['' → logprob: -14.849910736083984
    10. '   ' → logprob: -14.974910736083984

Token 209: '')' (ID: 1542)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')' → logprob: -0.038045622408390045
    2. '')' → logprob: -3.288045644760132
    3. '")' → logprob: -13.163045883178711
    4. ' )' → logprob: -13.413045883178711
    5. '`)' → logprob: -14.788045883178711
    6. ')
' → logprob: -15.538045883178711
    7. '’)' → logprob: -17.16304588317871
    8. '```' → logprob: -17.41304588317871
    9. '())' → logprob: -17.53804588317871
    10. '）' → logprob: -17.66304588317871

Token 210: ' ' (ID: 220)
  Prédit: ''
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False

Token 211: ' #' (ID: 1069)
  Prédit: ''
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False

Token 212: ' Si' (ID: 7832)
  Prédit: ''
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False

Token 213: ' y' (ID: 342)
  Prédit: 'c'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'c' → logprob: -0.16189633309841156
    2. ' c' → logprob: -1.9118963479995728
    3. ' on' → logprob: -7.161896228790283
    4. 'on' → logprob: -8.036896705627441
    5. 'b' → logprob: -8.536896705627441
    6. 'd' → logprob: -8.661896705627441
    7. ' ' → logprob: -10.161896705627441
    8. '#' → logprob: -11.286896705627441
    9. ' la' → logprob: -11.286896705627441
    10. 'le' → logprob: -11.411896705627441

Token 214: ''a' (ID: 10443)
  Prédit: 'a'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'a' → logprob: -0.02547425590455532
    2. ' a' → logprob: -4.2754740715026855
    3. 'c' → logprob: -4.5254740715026855
    4. ''a' → logprob: -8.900474548339844
    5. 'n' → logprob: -9.650474548339844
    6. 'pas' → logprob: -9.650474548339844
    7. ' n' → logprob: -9.775474548339844
    8. ' c' → logprob: -9.900474548339844
    9. '```' → logprob: -11.275474548339844
    10. 'avait' → logprob: -11.525474548339844

Token 215: ' pas' (ID: 2173)
  Prédit: 'pas'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'pas' → logprob: -0.03126094117760658
    2. 'une' → logprob: -4.406260967254639
    3. ' pas' → logprob: -5.156260967254639
    4. 'plus' → logprob: -5.656260967254639
    5. 'no' → logprob: -5.906260967254639
    6. 'un' → logprob: -6.156260967254639
    7. 'de' → logprob: -7.156260967254639
    8. 'qu' → logprob: -7.406260967254639
    9. 'poss' → logprob: -7.531260967254639
    10. 'auc' → logprob: -8.28126049041748

Token 216: ' de' (ID: 334)
  Prédit: 'de'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'de' → logprob: -0.40816730260849
    2. 'd' → logprob: -1.1581673622131348
    3. ' de' → logprob: -4.408167362213135
    4. '#' → logprob: -5.658167362213135
    5. '##' → logprob: -5.908167362213135
    6. ' d' → logprob: -6.408167362213135
    7. ''' → logprob: -7.658167362213135
    8. 'à' → logprob: -8.908166885375977
    9. '###' → logprob: -9.658166885375977
    10. ' ' → logprob: -10.033166885375977

Token 217: ' dépasse' (ID: 165701)
  Prédit: '#'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '#' → logprob: -1.0850939750671387
    2. 'bloc' → logprob: -1.4600939750671387
    3. 'ob' → logprob: -1.8350939750671387
    4. '##' → logprob: -3.0850939750671387
    5. 'dou' → logprob: -3.0850939750671387
    6. 'pro' → logprob: -3.5850939750671387
    7. 'double' → logprob: -3.7100939750671387
    8. 'pb' → logprob: -3.7100939750671387
    9. 'tr' → logprob: -3.9600939750671387
    10. 'block' → logprob: -3.9600939750671387

Token 218: 'ment' (ID: 508)
  Prédit: 'ment'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'ment' → logprob: -9.253090865968261e-06
    2. 'ments' → logprob: -13.000009536743164
    3. 'ement' → logprob: -13.375009536743164
    4. 'ent' → logprob: -13.375009536743164
    5. 'm' → logprob: -14.000009536743164
    6. 'nt' → logprob: -14.000009536743164
    7. 'mentation' → logprob: -14.250009536743164
    8. ' ment' → logprob: -14.750009536743164
    9. 't' → logprob: -15.500009536743164
    10. 'pass' → logprob: -15.750009536743164

Token 219: ' c' (ID: 274)
  Prédit: ''
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False

Token 220: ''est' (ID: 6616)
  Prédit: ','
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ',' → logprob: -0.46895697712898254
    2. 'est' → logprob: -1.2189569473266602
    3. 'print' → logprob: -3.96895694732666
    4. '   ' → logprob: -3.96895694732666
    5. ''est' → logprob: -4.34395694732666
    6. ' else' → logprob: -5.34395694732666
    7. ' print' → logprob: -5.46895694732666
    8. 'else' → logprob: -5.59395694732666
    9. 'ont' → logprob: -5.71895694732666
    10. ' est' → logprob: -6.34395694732666

Token 221: ' bon' (ID: 4846)
  Prédit: 'Yes'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'Yes' → logprob: -0.8813652396202087
    2. 'ok' → logprob: -1.5063652992248535
    3. 'OK' → logprob: -2.3813652992248535
    4. 'bon' → logprob: -2.6313652992248535
    5. 'Ok' → logprob: -2.7563652992248535
    6. 'possible' → logprob: -3.0063652992248535
    7. ''' → logprob: -3.7563652992248535
    8. 'tout' → logprob: -4.1313652992248535
    9. 'oui' → logprob: -4.2563652992248535
    10. 'Oui' → logprob: -4.2563652992248535

Token 222: ',' (ID: 11)
  Prédit: ''
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False

Token 223: ' en' (ID: 469)
  Prédit: ''
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False

Token 224: ' théorie' (ID: 155054)
  Prédit: 'print'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'print' → logprob: -1.5726392269134521
    2. 'general' → logprob: -1.5726392269134521
    3. 'tout' → logprob: -1.9476392269134521
    4. 'princip' → logprob: -2.447639226913452
    5. '```' → logprob: -2.572639226913452
    6. 'g' → logprob: -3.072639226913452
    7. '#' → logprob: -3.072639226913452
    8. ' général' → logprob: -3.447639226913452
    9. 'part' → logprob: -3.572639226913452
    10. 'prin' → logprob: -3.697639226913452

Token 225: '

' (ID: 279)
  Prédit: ''
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False

Token 226: '#' (ID: 2)
  Prédit: ''
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False

Token 227: ' Bon' (ID: 12658)
  Prédit: ''
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False

Token 228: ',' (ID: 11)
  Prédit: ''
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False

Token 229: ' il' (ID: 1793)
  Prédit: ''
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False

Token 230: ' faudrait' (ID: 128958)
  Prédit: ''
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False

Token 231: ' sûrement' (ID: 158793)
  Prédit: '...'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '...' → logprob: -0.867464542388916
    2. '#' → logprob: -1.242464542388916
    3. ' encore' → logprob: -2.242464542388916
    4. '<|end|>' → logprob: -2.992464542388916
    5. ' ' → logprob: -3.742464542388916
    6. '.' → logprob: -3.867464542388916
    7. ' peut' → logprob: -3.992464542388916
    8. ' probablement' → logprob: -4.367464542388916
    9. ' continuer' → logprob: -4.867464542388916
    10. '```' → logprob: -5.117464542388916

Token 232: ' vérifier' (ID: 93671)
  Prédit: '#'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '#' → logprob: -1.080688714981079
    2. '...' → logprob: -1.580688714981079
    3. ' vérifier' → logprob: -1.955688714981079
    4. 'contin' → logprob: -2.080688714981079
    5. ' continuer' → logprob: -2.705688714981079
    6. ' ajouter' → logprob: -4.0806884765625
    7. ' encore' → logprob: -4.3306884765625
    8. '```' → logprob: -4.3306884765625
    9. ' ' → logprob: -4.4556884765625
    10. 'coder' → logprob: -4.8306884765625

Token 233: ' pour' (ID: 1930)
  Prédit: ''
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False

Token 234: ' des' (ID: 731)
  Prédit: 'les'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'les' → logprob: -1.5095077753067017
    2. 'le' → logprob: -1.7595077753067017
    3. 'une' → logprob: -1.8845077753067017
    4. 'l' → logprob: -2.134507656097412
    5. 'la' → logprob: -2.134507656097412
    6. 'c' → logprob: -2.259507656097412
    7. 'e' → logprob: -3.884507656097412
    8. 'un' → logprob: -4.134507656097412
    9. ' la' → logprob: -4.759507656097412
    10. '...' → logprob: -4.759507656097412

Token 235: ' cas' (ID: 2108)
  Prédit: 'tr'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'tr' → logprob: -0.5154383182525635
    2. 'trip' → logprob: -2.2654383182525635
    3. '...' → logprob: -2.6404383182525635
    4. 's' → logprob: -3.5154383182525635
    5. 'positions' → logprob: -4.015438079833984
    6. 'd' → logprob: -4.140438079833984
    7. '#' → logprob: -4.265438079833984
    8. 'cases' → logprob: -4.265438079833984
    9. '```' → logprob: -4.515438079833984
    10. 'double' → logprob: -4.640438079833984

Token 236: ' particuliers' (ID: 99172)
  Prédit: ''
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False

Token 237: ' mais' (ID: 2899)
  Prédit: ''
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False

Token 238: ' ça' (ID: 13590)
  Prédit: ''
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False

Token 239: ' doit' (ID: 21822)
  Prédit: ''
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False

Token 240: ' suff' (ID: 9490)
  Prédit: ' fonctionner'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' fonctionner' → logprob: -1.328575849533081
    2. ' suff' → logprob: -1.578575849533081
    3. 'être' → logprob: -2.203575849533081
    4. ' aller' → logprob: -2.578575849533081
    5. ' marcher' → logprob: -2.953575849533081
    6. 's' → logprob: -3.078575849533081
    7. 'be' → logprob: -3.078575849533081
    8. 'f' → logprob: -3.328575849533081
    9. 'faire' → logprob: -3.578575849533081
    10. ' be' → logprob: -3.828575849533081

Token 241: 'ire' (ID: 594)
  Prédit: 'ire'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'ire' → logprob: -0.07045772671699524
    2. 'it' → logprob: -3.070457696914673
    3. 'ir' → logprob: -4.695457935333252
    4. 're' → logprob: -5.070457935333252
    5. 'ice' → logprob: -6.445457935333252
    6. '#' → logprob: -7.320457935333252
    7. 'er' → logprob: -7.320457935333252
    8. 'isent' → logprob: -7.320457935333252
    9. 'icient' → logprob: -7.820457935333252
    10. 'aire' → logprob: -7.945457935333252


RÉSUMÉ:
--------------------------------------------------------------------------------
Total des tokens analysés: 239
Tokens correctement prédits (1ère position, stricte): 48
Tokens correctement prédits (1ère position, avec adaptation): 55
Tokens correctement prédits (top 10): 122
Précision stricte (1ère position): 20.08%
Précision adaptée (1ère position): 23.01%
Précision (top 10): 51.05%
================================================================================
