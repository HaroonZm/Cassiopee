================================================================================
ANALYSE DE PRÉDICTION TOKEN PAR TOKEN (BATCH API)
Date: 2025-06-04 19:38:15
Modèle de tokenisation: gpt-4o-mini
================================================================================

SCRIPT ANALYSÉ:
--------------------------------------------------------------------------------
def carre(n): return pow(n,2)
if __name__=='__main__':
    import sys
    r = int(sys.stdin.readline())
    # Procédural à la old school
    resultat = carre(r)
    print(resultat)
--------------------------------------------------------------------------------

RÉSULTATS D'ANALYSE TOKEN PAR TOKEN:
--------------------------------------------------------------------------------
Token 0: 'def' (ID: 1314)
  → Token d'amorce (pas de prédiction)

Token 1: ' carre' (ID: 38645)
  → Token d'amorce (pas de prédiction)

Token 2: '(n' (ID: 2406)
  → Token d'amorce (pas de prédiction)

Token 3: '):' (ID: 3127)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')' → logprob: -0.5232687592506409
    2. '):' → logprob: -0.8982687592506409
    3. ')n' → logprob: -10.523268699645996
    4. 'd' → logprob: -10.898268699645996
    5. ')：' → logprob: -11.648268699645996
    6. '(' → logprob: -11.648268699645996
    7. ''):' → logprob: -11.773268699645996
    8. 'def' → logprob: -11.898268699645996
    9. 'a' → logprob: -12.023268699645996
    10. '):
' → logprob: -12.148268699645996

Token 4: ' return' (ID: 622)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.23294855654239655
    2. '(' → logprob: -2.8579485416412354
    3. ' return' → logprob: -3.1079485416412354
    4. '\' → logprob: -3.3579485416412354
    5. ':' → logprob: -3.7329485416412354
    6. ''' → logprob: -4.6079487800598145
    7. '```' → logprob: -4.9829487800598145
    8. 'return' → logprob: -5.2329487800598145
    9. '    ' → logprob: -5.3579487800598145
    10. ' ' → logprob: -5.4829487800598145

Token 5: ' pow' (ID: 9779)
  Prédit: ' n'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' n' → logprob: -0.057255376130342484
    2. 'n' → logprob: -2.932255268096924
    3. ' ' → logprob: -6.057255268096924
    4. ' ' → logprob: -11.307255744934082
    5. '(n' → logprob: -11.682255744934082
    6. 's' → logprob: -12.807255744934082
    7. '_n' → logprob: -13.682255744934082
    8. '	n' → logprob: -14.182255744934082
    9. '  ' → logprob: -14.682255744934082
    10. ' ' → logprob: -14.807255744934082

Token 6: '(n' (ID: 2406)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(' → logprob: -0.0005371859879232943
    2. '(n' → logprob: -8.000536918640137
    3. '(pow' → logprob: -8.750536918640137
    4. ' (' → logprob: -10.375536918640137
    5. '(p' → logprob: -12.625536918640137
    6. 'pow' → logprob: -12.625536918640137
    7. ' ' → logprob: -13.125536918640137
    8. 's' → logprob: -13.750536918640137
    9. '(
' → logprob: -14.750536918640137
    10. ')' → logprob: -14.875536918640137

Token 7: ',' (ID: 11)
  Prédit: ','
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ',' → logprob: -0.00021176543668843806
    2. ' ' → logprob: -9.500211715698242
    3. ' ,' → logprob: -9.500211715698242
    4. '2' → logprob: -10.500211715698242
    5. ')' → logprob: -10.500211715698242
    6. '(' → logprob: -12.750211715698242
    7. ',n' → logprob: -13.000211715698242
    8. ',)' → logprob: -15.000211715698242
    9. '```' → logprob: -15.750211715698242
    10. '1' → logprob: -15.875211715698242

Token 8: '2' (ID: 17)
  Prédit: '2'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '2' → logprob: -0.020543403923511505
    2. ' ' → logprob: -3.895543336868286
    3. ')' → logprob: -13.895543098449707
    4. '3' → logprob: -15.645543098449707
    5. ' )' → logprob: -15.645543098449707
    6. '0' → logprob: -16.020544052124023
    7. '  ' → logprob: -17.020544052124023
    8. '```' → logprob: -17.020544052124023
    9. ' ' → logprob: -17.020544052124023
    10. '1' → logprob: -17.895544052124023

Token 9: ')
' (ID: 446)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')' → logprob: -1.7432603272027336e-06
    2. '))' → logprob: -14.000001907348633
    3. '`)' → logprob: -15.000001907348633
    4. ' )' → logprob: -15.125001907348633
    5. ')`' → logprob: -16.500001907348633
    6. '')' → logprob: -16.875001907348633
    7. ')
' → logprob: -17.375001907348633
    8. ')n' → logprob: -17.625001907348633
    9. ')return' → logprob: -17.750001907348633
    10. ')>' → logprob: -17.750001907348633

Token 10: 'if' (ID: 366)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '(' → logprob: -0.03414155915379524
    2. '
' → logprob: -4.909141540527344
    3. '(
' → logprob: -5.034141540527344
    4. '\' → logprob: -5.159141540527344
    5. '\n' → logprob: -5.284141540527344
    6. ')' → logprob: -5.409141540527344
    7. '<|end|>' → logprob: -6.784141540527344
    8. ''' → logprob: -7.909141540527344
    9. '```' → logprob: -7.909141540527344
    10. '\(' → logprob: -8.034141540527344

Token 11: ' __' (ID: 2516)
  Prédit: ' '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' ' → logprob: -0.23450876772403717
    2. ' n' → logprob: -1.734508752822876
    3. ' __' → logprob: -4.109508991241455
    4. 'n' → logprob: -5.234508991241455
    5. ' ' → logprob: -5.609508991241455
    6. '  ' → logprob: -5.734508991241455
    7. '__' → logprob: -6.234508991241455
    8. '_' → logprob: -7.359508991241455
    9. ' True' → logprob: -7.734508991241455
    10. ' not' → logprob: -7.984508991241455

Token 12: 'name' (ID: 897)
  Prédit: '__'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '__' → logprob: -0.024560172110795975
    2. '==' → logprob: -4.89955997467041
    3. '.' → logprob: -5.14955997467041
    4. '.__' → logprob: -5.52455997467041
    5. '__.__' → logprob: -5.64955997467041
    6. ' ==' → logprob: -6.39955997467041
    7. '[' → logprob: -7.64955997467041
    8. ' __' → logprob: -7.89955997467041
    9. '__.' → logprob: -8.02455997467041
    10. '```' → logprob: -8.52455997467041

Token 13: '__' (ID: 771)
  Prédit: '__'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '__' → logprob: -2.856408536899835e-05
    2. '_' → logprob: -10.750028610229492
    3. '___' → logprob: -12.375028610229492
    4. '____' → logprob: -13.125028610229492
    5. '==' → logprob: -15.125028610229492
    6. '__
' → logprob: -15.625028610229492
    7. 'space' → logprob: -16.500028610229492
    8. '__.__' → logprob: -16.500028610229492
    9. '__

' → logprob: -16.500028610229492
    10. '______' → logprob: -17.500028610229492

Token 14: '=='' (ID: 20651)
  Prédit: ' =='
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' ==' → logprob: -0.6625196933746338
    2. '__' → logprob: -0.7875196933746338
    3. '==' → logprob: -3.537519693374634
    4. '_' → logprob: -9.162519454956055
    5. '=' → logprob: -9.412519454956055
    6. ' =' → logprob: -9.787519454956055
    7. '=="' → logprob: -9.787519454956055
    8. '=='' → logprob: -10.037519454956055
    9. '[' → logprob: -11.287519454956055
    10. '"' → logprob: -12.037519454956055

Token 15: '__' (ID: 771)
  Prédit: '__'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '__' → logprob: -3.128163257315464e-07
    2. 'main' → logprob: -16.375
    3. ' __' → logprob: -16.375
    4. '___' → logprob: -19.75
    5. '```' → logprob: -19.75
    6. '____' → logprob: -20.75
    7. ''' → logprob: -21.125
    8. '_main' → logprob: -22.375
    9. '/__' → logprob: -22.375
    10. '__.__' → logprob: -22.625

Token 16: 'main' (ID: 7731)
  Prédit: 'main'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'main' → logprob: -6.682846287731081e-05
    2. 'name' → logprob: -9.625066757202148
    3. 'm' → logprob: -14.750066757202148
    4. ' main' → logprob: -16.37506675720215
    5. 'init' → logprob: -16.50006675720215
    6. 'ma' → logprob: -16.62506675720215
    7. '_main' → logprob: -16.87506675720215
    8. 'maine' → logprob: -18.25006675720215
    9. 'mai' → logprob: -18.87506675720215
    10. '```' → logprob: -19.00006675720215

Token 17: '__':
' (ID: 39314)
  Prédit: '__'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '__' → logprob: -0.00676463358104229
    2. '__':
' → logprob: -5.0067644119262695
    3. '_' → logprob: -10.00676441192627
    4. '__:' → logprob: -12.50676441192627
    5. '__('' → logprob: -15.25676441192627
    6. '__":
' → logprob: -16.256765365600586
    7. '__.' → logprob: -16.631765365600586
    8. '_'' → logprob: -16.756765365600586
    9. '___' → logprob: -16.881765365600586
    10. ''' → logprob: -17.756765365600586

Token 18: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.627009928226471
    2. ' ' → logprob: -1.0020098686218262
    3. '    ' → logprob: -3.377009868621826
    4. ' print' → logprob: -4.127009868621826
    5. ' 
' → logprob: -4.377009868621826
    6. ' )' → logprob: -4.752009868621826
    7. '    
' → logprob: -4.752009868621826
    8. ' n' → logprob: -5.752009868621826
    9. '  ' → logprob: -6.002009868621826
    10. ')' → logprob: -6.377009868621826

Token 19: ' import' (ID: 1588)
  Prédit: ' print'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' print' → logprob: -0.21520929038524628
    2. ' for' → logprob: -2.4652092456817627
    3. 'print' → logprob: -3.3402092456817627
    4. ' n' → logprob: -3.3402092456817627
    5. ' result' → logprob: -3.7152092456817627
    6. 'n' → logprob: -5.840209484100342
    7. 'result' → logprob: -5.965209484100342
    8. 'for' → logprob: -5.965209484100342
    9. '   ' → logprob: -6.340209484100342
    10. ' a' → logprob: -6.965209484100342

Token 20: ' sys' (ID: 12228)
  Prédit: ' math'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' math' → logprob: -0.014186308719217777
    2. ' sys' → logprob: -4.264186382293701
    3. 'math' → logprob: -11.514185905456543
    4. ' unittest' → logprob: -12.514185905456543
    5. ' random' → logprob: -13.139185905456543
    6. ' numpy' → logprob: -13.389185905456543
    7. ' ' → logprob: -13.764185905456543
    8. ' os' → logprob: -14.014185905456543
    9. '_math' → logprob: -14.139185905456543
    10. ' argparse' → logprob: -14.389185905456543

Token 21: '
' (ID: 198)
  Prédit: '['
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '[' → logprob: -0.1327681541442871
    2. '.' → logprob: -3.132768154144287
    3. '   ' → logprob: -3.632768154144287
    4. '.argv' → logprob: -4.382768154144287
    5. ' ' → logprob: -4.507768154144287
    6. '    ' → logprob: -5.382768154144287
    7. 'argv' → logprob: -6.132768154144287
    8. ' sys' → logprob: -6.382768154144287
    9. '```' → logprob: -6.382768154144287
    10. '[]' → logprob: -6.382768154144287

Token 22: '   ' (ID: 271)
  Prédit: '['
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '[' → logprob: -1.063442349433899
    2. 'print' → logprob: -1.063442349433899
    3. '
' → logprob: -2.3134422302246094
    4. ' ' → logprob: -3.4384422302246094
    5. ' 
' → logprob: -3.6884422302246094
    6. '    
' → logprob: -3.6884422302246094
    7. ' print' → logprob: -3.9384422302246094
    8. '  
' → logprob: -4.063442230224609
    9. 'for' → logprob: -4.313442230224609
    10. '[
' → logprob: -4.563442230224609

Token 23: ' r' (ID: 428)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '   ' → logprob: -1.1356217861175537
    2. ' print' → logprob: -2.2606217861175537
    3. 'print' → logprob: -2.7606217861175537
    4. ' n' → logprob: -2.7606217861175537
    5. 'argv' → logprob: -2.8856217861175537
    6. '    
' → logprob: -3.0106217861175537
    7. ' argv' → logprob: -3.0106217861175537
    8. ' for' → logprob: -3.1356217861175537
    9. '    ' → logprob: -3.1356217861175537
    10. ' if' → logprob: -3.5106217861175537

Token 24: ' =' (ID: 314)
  Prédit: 'e'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'e' → logprob: -1.130866289138794
    2. 'ec' → logprob: -1.255866289138794
    3. 'es' → logprob: -1.505866289138794
    4. 'ef' → logprob: -2.130866289138794
    5. 'ead' → logprob: -3.380866289138794
    6. 'ange' → logprob: -5.755866050720215
    7. '=' → logprob: -5.755866050720215
    8. 'eq' → logprob: -6.255866050720215
    9. '=sys' → logprob: -6.630866050720215
    10. 'a' → logprob: -7.380866050720215

Token 25: ' int' (ID: 677)
  Prédit: ' int'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' int' → logprob: -0.4553791880607605
    2. ' pow' → logprob: -1.4553792476654053
    3. ' sys' → logprob: -2.3303792476654053
    4. 'int' → logprob: -3.7053792476654053
    5. 'pow' → logprob: -4.955379009246826
    6. ' ' → logprob: -6.455379009246826
    7. ' carre' → logprob: -7.705379009246826
    8. 'sys' → logprob: -7.705379009246826
    9. ' car' → logprob: -7.955379009246826
    10. 'car' → logprob: -8.205379486083984

Token 26: '(sys' (ID: 41042)
  Prédit: '(sys'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(sys' → logprob: -0.2016296684741974
    2. '(' → logprob: -1.701629638671875
    3. '(s' → logprob: -8.576629638671875
    4. ' (' → logprob: -11.326629638671875
    5. 'sys' → logprob: -12.326629638671875
    6. '(Sys' → logprob: -12.701629638671875
    7. '=sys' → logprob: -13.451629638671875
    8. '(
' → logprob: -13.576629638671875
    9. ' sys' → logprob: -13.826629638671875
    10. '(

' → logprob: -14.076629638671875

Token 27: '.stdin' (ID: 93480)
  Prédit: '.argv'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '.argv' → logprob: -0.26247701048851013
    2. '.' → logprob: -1.5124770402908325
    3. '.stdin' → logprob: -4.637476921081543
    4. ' .' → logprob: -7.387476921081543
    5. '.readline' → logprob: -9.137476921081543
    6. '.input' → logprob: -11.012476921081543
    7. '[' → logprob: -11.262476921081543
    8. '.stdout' → logprob: -11.387476921081543
    9. 'argv' → logprob: -12.387476921081543
    10. '.version' → logprob: -12.637476921081543

Token 28: '.readline' (ID: 74673)
  Prédit: '.readline'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '.readline' → logprob: -0.0052877152338624
    2. '.read' → logprob: -5.2552876472473145
    3. '.' → logprob: -9.880288124084473
    4. ' readline' → logprob: -13.630288124084473
    5. 'read' → logprob: -14.005288124084473
    6. '.readlines' → logprob: -14.880288124084473
    7. '.Read' → logprob: -15.380288124084473
    8. ' .' → logprob: -15.755288124084473
    9. '.re' → logprob: -16.880287170410156
    10. '```' → logprob: -16.880287170410156

Token 29: '())
' (ID: 4574)
  Prédit: '())'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '())' → logprob: -0.004669476300477982
    2. '()' → logprob: -5.504669666290283
    3. '().' → logprob: -7.504669666290283
    4. ' ())' → logprob: -11.004669189453125
    5. '())
' → logprob: -11.879669189453125
    6. ')' → logprob: -12.129669189453125
    7. '(' → logprob: -12.129669189453125
    8. '()))' → logprob: -13.129669189453125
    9. '()[' → logprob: -13.504669189453125
    10. '(),' → logprob: -14.129669189453125

Token 30: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.386870801448822
    2. 'print' → logprob: -1.3868708610534668
    3. '
' → logprob: -3.386870861053467
    4. ' print' → logprob: -4.761870861053467
    5. '    
' → logprob: -4.761870861053467
    6. '<|end|>' → logprob: -5.261870861053467
    7. '\n' → logprob: -5.636870861053467
    8. '  
' → logprob: -6.136870861053467
    9. ' 
' → logprob: -6.511870861053467
    10. ' for' → logprob: -6.636870861053467

Token 31: ' #' (ID: 1069)
  Prédit: 'print'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'print' → logprob: -0.003865873673930764
    2. ' print' → logprob: -6.128865718841553
    3. '   ' → logprob: -6.753865718841553
    4. 'for' → logprob: -8.128866195678711
    5. 'result' → logprob: -9.628866195678711
    6. 'p' → logprob: -9.628866195678711
    7. 'r' → logprob: -10.753866195678711
    8. ' for' → logprob: -10.753866195678711
    9. 's' → logprob: -10.878866195678711
    10. 'pr' → logprob: -12.128866195678711

Token 32: ' Proc' (ID: 61817)
  Prédit: ' print'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' print' → logprob: -0.26419633626937866
    2. 'print' → logprob: -1.5141963958740234
    3. ' result' → logprob: -5.014196395874023
    4. ' p' → logprob: -6.639196395874023
    5. 'result' → logprob: -6.639196395874023
    6. ' for' → logprob: -6.764196395874023
    7. 'p' → logprob: -7.014196395874023
    8. ' r' → logprob: -8.264196395874023
    9. 'r' → logprob: -8.264196395874023
    10. 'pr' → logprob: -9.639196395874023

Token 33: 'éd' (ID: 6383)
  Prédit: 'ess'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'ess' → logprob: -0.018867412582039833
    2. 'essing' → logprob: -4.643867492675781
    3. 'éder' → logprob: -5.143867492675781
    4. 'ed' → logprob: -6.768867492675781
    5. 'é' → logprob: -7.393867492675781
    6. 'essor' → logprob: -8.393867492675781
    7. 'esser' → logprob: -8.518867492675781
    8. 'es' → logprob: -8.518867492675781
    9. 'e' → logprob: -9.018867492675781
    10. 'eder' → logprob: -9.143867492675781

Token 34: 'ural' (ID: 4900)
  Prédit: 'éder'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'éder' → logprob: -0.4790823459625244
    2. 'er' → logprob: -1.2290823459625244
    3. 'é' → logprob: -3.2290823459625244
    4. 'éer' → logprob: -4.479082107543945
    5. 'ed' → logprob: -4.979082107543945
    6. 'der' → logprob: -5.104082107543945
    7. 'eder' → logprob: -5.604082107543945
    8. '```' → logprob: -6.104082107543945
    9. 'e' → logprob: -6.354082107543945
    10. 'érer' → logprob: -6.354082107543945

Token 35: ' à' (ID: 1221)
  Prédit: ' for'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' for' → logprob: -0.6881866455078125
    2. 'for' → logprob: -1.1881866455078125
    3. 'result' → logprob: -2.4381866455078125
    4. '
' → logprob: -3.1881866455078125
    5. ' 
' → logprob: -3.8131866455078125
    6. 'print' → logprob: -4.3131866455078125
    7. ' result' → logprob: -5.3131866455078125
    8. 'n' → logprob: -5.8131866455078125
    9. '<|end|>' → logprob: -5.8131866455078125
    10. '    
' → logprob: -5.9381866455078125

Token 36: ' la' (ID: 557)
  Prédit: 'l'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'l' → logprob: -0.2494051456451416
    2. 'la' → logprob: -1.6244051456451416
    3. ' la' → logprob: -6.4994049072265625
    4. 'python' → logprob: -6.7494049072265625
    5. 'contin' → logprob: -6.8744049072265625
    6. 'part' → logprob: -6.8744049072265625
    7. 'pe' → logprob: -6.9994049072265625
    8. ' l' → logprob: -6.9994049072265625
    9. 'fonction' → logprob: -6.9994049072265625
    10. 'r' → logprob: -7.1244049072265625

Token 37: ' old' (ID: 2890)
  Prédit: 'python'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'python' → logprob: -0.8105368614196777
    2. 'Python' → logprob: -1.3105368614196777
    3. 'fr' → logprob: -1.9355368614196777
    4. 'fonction' → logprob: -3.1855368614196777
    5. 'py' → logprob: -3.6855368614196777
    6. 'C' → logprob: -3.8105368614196777
    7. 'suite' → logprob: -5.060536861419678
    8. ' française' → logprob: -5.060536861419678
    9. '```' → logprob: -5.060536861419678
    10. 'for' → logprob: -5.185536861419678

Token 38: ' school' (ID: 3474)
  Prédit: ' for'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' for' → logprob: -0.134848490357399
    2. 'for' → logprob: -3.0098485946655273
    3. ' ' → logprob: -3.8848485946655273
    4. ':' → logprob: -4.384848594665527
    5. '_' → logprob: -4.634848594665527
    6. '-' → logprob: -4.759848594665527
    7. ' :' → logprob: -5.509848594665527
    8. '   ' → logprob: -5.634848594665527
    9. '  ' → logprob: -6.009848594665527
    10. 'r' → logprob: -6.259848594665527

Token 39: '
' (ID: 198)
  Prédit: '
'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '
' → logprob: -0.23203785717487335
    2. ' for' → logprob: -2.1070377826690674
    3. 'for' → logprob: -3.6070377826690674
    4. '<|end|>' → logprob: -3.9820377826690674
    5. '  
' → logprob: -4.3570380210876465
    6. '\n' → logprob: -4.7320380210876465
    7. ' 
' → logprob: -5.1070380210876465
    8. '   ' → logprob: -5.8570380210876465
    9. '    
' → logprob: -6.3570380210876465
    10. '```' → logprob: -6.7320380210876465

Token 40: '   ' (ID: 271)
  Prédit: ' for'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' for' → logprob: -0.5507795214653015
    2. 'for' → logprob: -1.4257795810699463
    3. '
' → logprob: -2.1757795810699463
    4. '\n' → logprob: -3.9257795810699463
    5. ' 
' → logprob: -4.175779342651367
    6. '  
' → logprob: -4.425779342651367
    7. '   ' → logprob: -5.175779342651367
    8. '    
' → logprob: -5.800779342651367
    9. '<|end|>' → logprob: -6.175779342651367
    10. 'r' → logprob: -6.300779342651367

Token 41: ' resultat' (ID: 67404)
  Prédit: 'for'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'for' → logprob: -0.3797127604484558
    2. ' for' → logprob: -1.2547128200531006
    3. 'result' → logprob: -4.0047125816345215
    4. 'print' → logprob: -4.8797125816345215
    5. 'r' → logprob: -6.8797125816345215
    6. ' result' → logprob: -7.1297125816345215
    7. 'n' → logprob: -7.2547125816345215
    8. 's' → logprob: -7.3797125816345215
    9. '\n' → logprob: -8.12971305847168
    10. '   ' → logprob: -8.25471305847168

Token 42: ' =' (ID: 314)
  Prédit: ' ='
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' =' → logprob: -0.07893319427967072
    2. '=' → logprob: -2.5789332389831543
    3. 's' → logprob: -11.078932762145996
    4. ' ' → logprob: -11.203932762145996
    5. '=[]' → logprob: -12.203932762145996
    6. ' +=' → logprob: -12.828932762145996
    7. '_' → logprob: -12.953932762145996
    8. ' ' → logprob: -13.703932762145996
    9. '_=' → logprob: -14.453932762145996
    10. '  ' → logprob: -14.953932762145996

Token 43: ' carre' (ID: 38645)
  Prédit: 'car'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'car' → logprob: -0.4922369420528412
    2. '0' → logprob: -1.2422369718551636
    3. ' carre' → logprob: -2.492236852645874
    4. ' ' → logprob: -4.242237091064453
    5. 'pow' → logprob: -6.742237091064453
    6. '1' → logprob: -7.492237091064453
    7. 'care' → logprob: -8.242237091064453
    8. '[]' → logprob: -8.617237091064453
    9. '```' → logprob: -8.992237091064453
    10. 'r' → logprob: -9.429737091064453

Token 44: '(r' (ID: 4729)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(' → logprob: -0.47410285472869873
    2. '(r' → logprob: -0.9741028547286987
    3. '(n' → logprob: -10.849102973937988
    4. '(s' → logprob: -13.349102973937988
    5. '((' → logprob: -13.849102973937988
    6. '(
' → logprob: -13.849102973937988
    7. ' (' → logprob: -13.849102973937988
    8. '(

' → logprob: -14.724102973937988
    9. '(rr' → logprob: -15.599102973937988
    10. '(rv' → logprob: -16.099102020263672

Token 45: ')
' (ID: 446)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')' → logprob: -2.081584716506768e-05
    2. '))' → logprob: -11.125020980834961
    3. ')
' → logprob: -12.750020980834961
    4. ' )' → logprob: -13.125020980834961
    5. ')))' → logprob: -15.125020980834961
    6. ')`' → logprob: -15.625020980834961
    7. ')

' → logprob: -16.37502098083496
    8. ')return' → logprob: -16.37502098083496
    9. ')}' → logprob: -16.62502098083496
    10. ')**' → logprob: -16.62502098083496

Token 46: '   ' (ID: 271)
  Prédit: 'print'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'print' → logprob: -0.2935538589954376
    2. '   ' → logprob: -1.4185538291931152
    3. '
' → logprob: -4.668553829193115
    4. ' print' → logprob: -6.168553829193115
    5. '<|end|>' → logprob: -7.793553829193115
    6. '    
' → logprob: -8.418554306030273
    7. '\n' → logprob: -9.668554306030273
    8. '  
' → logprob: -10.293554306030273
    9. '	print' → logprob: -10.543554306030273
    10. ' 
' → logprob: -10.918554306030273

Token 47: ' print' (ID: 2123)
  Prédit: 'print'
  Correct (stricte): False
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'print' (adapté à ' print') → logprob: -0.1258309930562973
    2. '
' → logprob: -2.250830888748169
    3. '   ' → logprob: -5.000831127166748
    4. ' print' → logprob: -5.875831127166748
    5. '<|end|>' → logprob: -6.500831127166748
    6. '\n' → logprob: -6.875831127166748
    7. '    
' → logprob: -8.12583065032959
    8. '  
' → logprob: -8.62583065032959
    9. ' 
' → logprob: -8.75083065032959
    10. ' ' → logprob: -10.37583065032959

Token 48: '(result' (ID: 8111)
  Prédit: '(result'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(result' → logprob: -0.20143896341323853
    2. '(' → logprob: -1.7014389038085938
    3. '()' → logprob: -12.451438903808594
    4. '(resultado' → logprob: -12.576438903808594
    5. '(results' → logprob: -12.701438903808594
    6. '(res' → logprob: -12.951438903808594
    7. ' (' → logprob: -13.076438903808594
    8. '(f' → logprob: -13.326438903808594
    9. '(r' → logprob: -13.326438903808594
    10. '('' → logprob: -13.451438903808594

Token 49: 'at' (ID: 266)
  Prédit: 'at'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'at' → logprob: -0.0709221363067627
    2. ')' → logprob: -2.6959221363067627
    3. 't' → logprob: -7.320921897888184
    4. 'a' → logprob: -9.445921897888184
    5. 'ant' → logprob: -9.570921897888184
    6. 'ent' → logprob: -9.820921897888184
    7. '))' → logprob: -9.820921897888184
    8. ')t' → logprob: -10.820921897888184
    9. 'al' → logprob: -11.695921897888184
    10. 'ats' → logprob: -11.820921897888184

Token 50: ')' (ID: 8)
  Prédit: ')'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')' → logprob: -1.7432603272027336e-06
    2. ' )' → logprob: -14.000001907348633
    3. ')
' → logprob: -14.125001907348633
    4. '))' → logprob: -16.875001907348633
    5. '')' → logprob: -17.125001907348633
    6. '`)' → logprob: -17.875001907348633
    7. ')`' → logprob: -19.000001907348633
    8. '）' → logprob: -19.625001907348633
    9. '")' → logprob: -19.750001907348633
    10. '(' → logprob: -19.750001907348633


RÉSUMÉ:
--------------------------------------------------------------------------------
Total des tokens analysés: 48
Tokens correctement prédits (1ère position, stricte): 15
Tokens correctement prédits (1ère position, avec adaptation): 16
Tokens correctement prédits (top 10): 32
Précision stricte (1ère position): 31.25%
Précision adaptée (1ère position): 33.33%
Précision (top 10): 66.67%
================================================================================
