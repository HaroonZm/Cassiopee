================================================================================
ANALYSE DE PRÉDICTION TOKEN PAR TOKEN (BATCH API)
Date: 2025-06-04 19:41:07
Modèle de tokenisation: gpt-4o-mini
================================================================================

SCRIPT ANALYSÉ:
--------------------------------------------------------------------------------
import sys
from math import sqrt

def SOLVE(N):
    S = sqrt(N)
    i = int(S) + 1
    while i > 0:
        if N % i == 0:
            res = lambda x, y: x - 1 + y - 1
            print(res(i, N // i))
            return None
        i -= 1
    else:
        sys.stdout.write("wrong...\n")

if __name__ == '__main__':
    exec("n=int(input())\nSOLVE(n)")
--------------------------------------------------------------------------------

RÉSULTATS D'ANALYSE TOKEN PAR TOKEN:
--------------------------------------------------------------------------------
Token 0: 'import' (ID: 561)
  → Token d'amorce (pas de prédiction)

Token 1: ' sys' (ID: 12228)
  → Token d'amorce (pas de prédiction)

Token 2: '
' (ID: 198)
  → Token d'amorce (pas de prédiction)

Token 3: 'from' (ID: 2845)
  Prédit: '.'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '.' → logprob: -0.17236806452274323
    2. '\n' → logprob: -2.172368049621582
    3. '<|end|>' → logprob: -4.047368049621582
    4. 'import' → logprob: -4.547368049621582
    5. 'newline' → logprob: -5.672368049621582
    6. '\' → logprob: -5.672368049621582
    7. '<|end|>' → logprob: -6.047368049621582
    8. '[' → logprob: -6.922368049621582
    9. '```' → logprob: -7.172368049621582
    10. '.readline' → logprob: -7.172368049621582

Token 4: ' math' (ID: 13324)
  Prédit: ' os'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' os' → logprob: -0.012081976048648357
    2. 'os' → logprob: -4.762082099914551
    3. ' collections' → logprob: -6.887082099914551
    4. ' ' → logprob: -7.512082099914551
    5. ' math' → logprob: -7.887082099914551
    6. ' Py' → logprob: -7.887082099914551
    7. ' pathlib' → logprob: -8.01208209991455
    8. ' typing' → logprob: -8.63708209991455
    9. 'collections' → logprob: -9.38708209991455
    10. ' datetime' → logprob: -9.38708209991455

Token 5: ' import' (ID: 1588)
  Prédit: ' import'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' import' → logprob: -0.0047406721860170364
    2. 'import' → logprob: -5.6297407150268555
    3. ' ' → logprob: -6.8797407150268555
    4. '.' → logprob: -9.504740715026855
    5. '	import' → logprob: -11.504740715026855
    6. ' impor' → logprob: -12.379740715026855
    7. ' im' → logprob: -12.629740715026855
    8. ' .' → logprob: -12.754740715026855
    9. '<|end|>' → logprob: -12.879740715026855
    10. ' importar' → logprob: -13.129740715026855

Token 6: ' sqrt' (ID: 44237)
  Prédit: ' sqrt'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' sqrt' → logprob: -0.0280095636844635
    2. ' pi' → logprob: -4.528009414672852
    3. 'sqrt' → logprob: -5.028009414672852
    4. ' ' → logprob: -5.403009414672852
    5. ' ceil' → logprob: -6.153009414672852
    6. ' sin' → logprob: -6.653009414672852
    7. ' pow' → logprob: -7.278009414672852
    8. ' import' → logprob: -7.403009414672852
    9. ' log' → logprob: -8.278009414672852
    10. ' factorial' → logprob: -8.403009414672852

Token 7: '

' (ID: 279)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(' → logprob: -0.2961622476577759
    2. '\n' → logprob: -1.7961622476577759
    3. ',' → logprob: -3.6711621284484863
    4. '(
' → logprob: -3.7961621284484863
    5. '\' → logprob: -4.171162128448486
    6. 'import' → logprob: -5.421162128448486
    7. '```' → logprob: -5.671162128448486
    8. '(

' → logprob: -5.796162128448486
    9. '
' → logprob: -5.796162128448486
    10. '

' → logprob: -6.046162128448486

Token 8: 'def' (ID: 1314)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(' → logprob: -0.3439030349254608
    2. 'def' → logprob: -1.4689030647277832
    3. '(
' → logprob: -4.343903064727783
    4. '\' → logprob: -4.343903064727783
    5. 'import' → logprob: -4.468903064727783
    6. '\n' → logprob: -5.093903064727783
    7. '```' → logprob: -5.343903064727783
    8. ',' → logprob: -5.718903064727783
    9. '\(' → logprob: -6.343903064727783
    10. 'print' → logprob: -6.343903064727783

Token 9: ' SOL' (ID: 52538)
  Prédit: ' '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' ' → logprob: -0.009759039618074894
    2. ' calculate' → logprob: -4.884758949279785
    3. ' space' → logprob: -7.134758949279785
    4. '_' → logprob: -7.759758949279785
    5. ' compute' → logprob: -8.259758949279785
    6. ' sqrt' → logprob: -8.759758949279785
    7. ' _' → logprob: -9.884758949279785
    8. ' f' → logprob: -10.009758949279785
    9. ' factor' → logprob: -10.009758949279785
    10. ' find' → logprob: -10.134758949279785

Token 10: 'VE' (ID: 19511)
  Prédit: 'VE'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'VE' → logprob: -0.04018326848745346
    2. 'V' → logprob: -3.7901833057403564
    3. 'VER' → logprob: -5.040183067321777
    4. 'UTION' → logprob: -5.290183067321777
    5. 'VED' → logprob: -5.665183067321777
    6. 'U' → logprob: -7.540183067321777
    7. 'VD' → logprob: -7.915183067321777
    8. 'ID' → logprob: -8.165183067321777
    9. 'D' → logprob: -8.415183067321777
    10. 'VI' → logprob: -9.665183067321777

Token 11: '(N' (ID: 10564)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '(' → logprob: -0.010256396606564522
    2. '_' → logprob: -4.635256290435791
    3. '```' → logprob: -9.01025676727295
    4. '(_' → logprob: -9.88525676727295
    5. '():' → logprob: -10.26025676727295
    6. ' (' → logprob: -10.26025676727295
    7. '(
' → logprob: -10.63525676727295
    8. ':' → logprob: -10.63525676727295
    9. '("""' → logprob: -10.88525676727295
    10. '(:' → logprob: -11.01025676727295

Token 12: '):
' (ID: 1883)
  Prédit: '):'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '):' → logprob: -0.2050538808107376
    2. ',' → logprob: -1.7050539255142212
    3. ')' → logprob: -5.705053806304932
    4. ':' → logprob: -8.58005428314209
    5. ' ):' → logprob: -10.83005428314209
    6. '):
' → logprob: -11.08005428314209
    7. ' ,' → logprob: -11.20505428314209
    8. ',n' → logprob: -11.95505428314209
    9. '```' → logprob: -11.95505428314209
    10. '*' → logprob: -11.95505428314209

Token 13: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.4477055072784424
    2. ':' → logprob: -1.0727055072784424
    3. '    
' → logprob: -5.447705268859863
    4. ':
' → logprob: -5.822705268859863
    5. '\' → logprob: -6.322705268859863
    6. '```' → logprob: -6.447705268859863
    7. ' 
' → logprob: -6.822705268859863
    8. ' ' → logprob: -6.947705268859863
    9. '):' → logprob: -6.947705268859863
    10. '\n' → logprob: -7.072705268859863

Token 14: ' S' (ID: 336)
  Prédit: ' 
'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' 
' → logprob: -1.5794357061386108
    2. '   ' → logprob: -1.7044357061386108
    3. ' \' → logprob: -2.3294358253479004
    4. ' ' → logprob: -2.3294358253479004
    5. '    ' → logprob: -3.0794358253479004
    6. ' result' → logprob: -3.2044358253479004
    7. 'r' → logprob: -3.2044358253479004
    8. 'result' → logprob: -3.3294358253479004
    9. ' return' → logprob: -3.4544358253479004
    10. ' i' → logprob: -3.8294358253479004

Token 15: ' =' (ID: 314)
  Prédit: ' ='
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' =' → logprob: -0.2359219193458557
    2. '=' → logprob: -1.610921859741211
    3. 'qrt' → logprob: -5.860921859741211
    4. '   ' → logprob: -6.485921859741211
    5. 'Q' → logprob: -6.485921859741211
    6. 'q' → logprob: -7.110921859741211
    7. ' ' → logprob: -7.110921859741211
    8. '_' → logprob: -7.610921859741211
    9. 'um' → logprob: -7.985921859741211
    10. ',' → logprob: -7.985921859741211

Token 16: ' sqrt' (ID: 44237)
  Prédit: ' int'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' int' → logprob: -0.3367469906806946
    2. 'int' → logprob: -1.9617469310760498
    3. ' ' → logprob: -2.58674693107605
    4. '0' → logprob: -3.33674693107605
    5. ' N' → logprob: -4.211747169494629
    6. ' sqrt' → logprob: -4.461747169494629
    7. 'sqrt' → logprob: -5.961747169494629
    8. ' [' → logprob: -6.586747169494629
    9. ' []' → logprob: -6.711747169494629
    10. 'N' → logprob: -7.086747169494629

Token 17: '(N' (ID: 10564)
  Prédit: '(N'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(N' → logprob: -0.20158329606056213
    2. '(' → logprob: -1.7015832662582397
    3. 'N' → logprob: -9.701582908630371
    4. ' (' → logprob: -10.326582908630371
    5. '(n' → logprob: -10.701582908630371
    6. '(
' → logprob: -10.701582908630371
    7. ')' → logprob: -11.201582908630371
    8. '(S' → logprob: -12.326582908630371
    9. '((' → logprob: -12.451582908630371
    10. '()' → logprob: -13.451582908630371

Token 18: ')
' (ID: 446)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')' → logprob: -0.00028255043434910476
    2. ' )' → logprob: -8.250282287597656
    3. ')
' → logprob: -12.250282287597656
    4. '))' → logprob: -12.375282287597656
    5. '   ' → logprob: -13.000282287597656
    6. '(' → logprob: -13.125282287597656
    7. ' ' → logprob: -13.125282287597656
    8. '**' → logprob: -13.250282287597656
    9. ')**' → logprob: -13.875282287597656
    10. '()' → logprob: -14.125282287597656

Token 19: '   ' (ID: 271)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')' → logprob: -0.6657692193984985
    2. '(' → logprob: -1.5407692193984985
    3. '   ' → logprob: -1.9157692193984985
    4. ' ' → logprob: -3.665769100189209
    5. '**' → logprob: -4.040769100189209
    6. '()' → logprob: -4.165769100189209
    7. '*' → logprob: -4.165769100189209
    8. ' if' → logprob: -4.290769100189209
    9. 'if' → logprob: -5.665769100189209
    10. '\' → logprob: -5.665769100189209

Token 20: ' i' (ID: 575)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.0920904353260994
    2. ' if' → logprob: -3.092090368270874
    3. ' ' → logprob: -4.092090606689453
    4. 'if' → logprob: -5.092090606689453
    5. ' return' → logprob: -5.342090606689453
    6. '    
' → logprob: -6.092090606689453
    7. ' for' → logprob: -6.592090606689453
    8. 'return' → logprob: -6.717090606689453
    9. ')' → logprob: -6.967090606689453
    10. ' i' → logprob: -7.092090606689453

Token 21: ' =' (ID: 314)
  Prédit: '='
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '=' → logprob: -0.3222475051879883
    2. 'n' → logprob: -1.6972475051879883
    3. ' =' → logprob: -2.6972475051879883
    4. 'f' → logprob: -4.072247505187988
    5. 'nt' → logprob: -5.197247505187988
    6. ' n' → logprob: -7.322247505187988
    7. 's' → logprob: -7.322247505187988
    8. ' ' → logprob: -7.947247505187988
    9. 'm' → logprob: -8.697247505187988
    10. '+' → logprob: -9.072247505187988

Token 22: ' int' (ID: 677)
  Prédit: ' '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' ' → logprob: -0.2893259525299072
    2. '2' → logprob: -2.0393259525299072
    3. '1' → logprob: -2.1643259525299072
    4. '0' → logprob: -5.164325714111328
    5. 'int' → logprob: -8.039325714111328
    6. ' int' → logprob: -8.414325714111328
    7. '3' → logprob: -12.664325714111328
    8. '   ' → logprob: -12.726825714111328
    9. ' ' → logprob: -12.976825714111328
    10. '  ' → logprob: -13.414325714111328

Token 23: '(S' (ID: 6181)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(' → logprob: -0.16124893724918365
    2. '(S' → logprob: -1.9112489223480225
    3. '(s' → logprob: -7.161249160766602
    4. ' (' → logprob: -9.286249160766602
    5. '(N' → logprob: -9.661249160766602
    6. '(i' → logprob: -9.661249160766602
    7. '('' → logprob: -12.161249160766602
    8. '()' → logprob: -12.661249160766602
    9. ')' → logprob: -12.911249160766602
    10. '((' → logprob: -13.161249160766602

Token 24: ')' (ID: 8)
  Prédit: ')'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')' → logprob: -0.005989828146994114
    2. '+' → logprob: -6.380990028381348
    3. ')+' → logprob: -6.630990028381348
    4. ' )' → logprob: -6.880990028381348
    5. ')
' → logprob: -7.005990028381348
    6. '**' → logprob: -7.255990028381348
    7. ' +' → logprob: -9.255990028381348
    8. ')**' → logprob: -9.255990028381348
    9. '))' → logprob: -10.630990028381348
    10. ')

' → logprob: -11.130990028381348

Token 25: ' +' (ID: 659)
  Prédit: '+'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '+' → logprob: -0.08225226402282715
    2. ' +' → logprob: -3.957252264022827
    3. ' ' → logprob: -4.707252502441406
    4. '<|end|>' → logprob: -4.707252502441406
    5. '
' → logprob: -4.832252502441406
    6. '   ' → logprob: -4.957252502441406
    7. '+
' → logprob: -5.207252502441406
    8. '*' → logprob: -5.457252502441406
    9. ' if' → logprob: -5.582252502441406
    10. '**' → logprob: -6.207252502441406

Token 26: ' ' (ID: 220)
  Prédit: '1'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '1' → logprob: -0.06197217106819153
    2. ' ' → logprob: -2.811972141265869
    3. ' ' → logprob: -12.936972618103027
    4. '2' → logprob: -13.561972618103027
    5. '(' → logprob: -15.499472618103027
    6. '0' → logprob: -15.749472618103027
    7. '  ' → logprob: -15.936972618103027
    8. '+' → logprob: -16.43697166442871
    9. ' (' → logprob: -17.12447166442871
    10. '-' → logprob: -17.62447166442871

Token 27: '1' (ID: 16)
  Prédit: '1'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '1' → logprob: -0.0019381542224436998
    2. ' ' → logprob: -6.251938343048096
    3. '2' → logprob: -12.376937866210938
    4. '0' → logprob: -12.376937866210938
    5. '(' → logprob: -15.314437866210938
    6. '-' → logprob: -15.376937866210938
    7. '  ' → logprob: -15.626937866210938
    8. '   ' → logprob: -16.564437866210938
    9. ' ' → logprob: -16.564437866210938
    10. '```' → logprob: -16.564437866210938

Token 28: '
' (ID: 198)
  Prédit: '
'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '
' → logprob: -0.07294667512178421
    2. '<|end|>' → logprob: -3.322946786880493
    3. ':' → logprob: -3.947946786880493
    4. ')' → logprob: -5.697946548461914
    5. ' ' → logprob: -5.822946548461914
    6. ' 
' → logprob: -5.947946548461914
    7. '  
' → logprob: -6.322946548461914
    8. ':
' → logprob: -7.322946548461914
    9. '\n' → logprob: -7.447946548461914
    10. ' for' → logprob: -7.447946548461914

Token 29: '   ' (ID: 271)
  Prédit: '
'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '
' → logprob: -0.20276901125907898
    2. '<|end|>' → logprob: -2.4527690410614014
    3. ':' → logprob: -2.7027690410614014
    4. ')' → logprob: -4.452768802642822
    5. ' ' → logprob: -5.327768802642822
    6. ':
' → logprob: -5.452768802642822
    7. '   ' → logprob: -6.327768802642822
    8. ' 
' → logprob: -6.327768802642822
    9. '  
' → logprob: -6.952768802642822
    10. '    
' → logprob: -7.577768802642822

Token 30: ' while' (ID: 2049)
  Prédit: '
'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '
' → logprob: -0.5620123147964478
    2. ' ' → logprob: -1.5620123147964478
    3. '\n' → logprob: -3.687012195587158
    4. ')' → logprob: -3.687012195587158
    5. '<|end|>' → logprob: -3.812012195587158
    6. ':' → logprob: -4.187012195587158
    7. '+' → logprob: -4.312012195587158
    8. '```' → logprob: -4.562012195587158
    9. '\' → logprob: -4.687012195587158
    10. '0' → logprob: -4.687012195587158

Token 31: ' i' (ID: 575)
  Prédit: ' i'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' i' → logprob: -0.020457914099097252
    2. 'i' → logprob: -4.020457744598389
    3. '(i' → logprob: -7.520457744598389
    4. ' ' → logprob: -7.520457744598389
    5. ' (' → logprob: -7.645457744598389
    6. ' True' → logprob: -7.895457744598389
    7. '(' → logprob: -9.145458221435547
    8. 'True' → logprob: -9.645458221435547
    9. '1' → logprob: -9.645458221435547
    10. ' not' → logprob: -10.395458221435547

Token 32: ' >' (ID: 1424)
  Prédit: ' >'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' >' → logprob: -0.2519630193710327
    2. '>' → logprob: -2.1269631385803223
    3. ' >=' → logprob: -3.5019631385803223
    4. ' <' → logprob: -3.6269631385803223
    5. ' <=' → logprob: -4.126963138580322
    6. '>=' → logprob: -4.376963138580322
    7. '*' → logprob: -4.876963138580322
    8. '<=' → logprob: -5.626963138580322
    9. '<' → logprob: -5.751963138580322
    10. ' *' → logprob: -6.126963138580322

Token 33: ' ' (ID: 220)
  Prédit: ' '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' ' → logprob: -0.3261762857437134
    2. '0' → logprob: -1.3261762857437134
    3. '1' → logprob: -4.451176166534424
    4. '=' → logprob: -7.701176166534424
    5. 'N' → logprob: -8.576176643371582
    6. 'int' → logprob: -8.701176643371582
    7. ' N' → logprob: -8.951176643371582
    8. ' int' → logprob: -9.201176643371582
    9. '2' → logprob: -10.201176643371582
    10. '=int' → logprob: -10.701176643371582

Token 34: '0' (ID: 15)
  Prédit: '0'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '0' → logprob: -0.02417740225791931
    2. ' ' → logprob: -4.399177551269531
    3. '1' → logprob: -4.524177551269531
    4. 'int' → logprob: -7.774177551269531
    5. 'N' → logprob: -8.524177551269531
    6. 'i' → logprob: -10.274177551269531
    7. '2' → logprob: -11.024177551269531
    8. '=' → logprob: -11.024177551269531
    9. ' int' → logprob: -11.024177551269531
    10. ' N' → logprob: -11.649177551269531

Token 35: ':
' (ID: 734)
  Prédit: ':'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ':' → logprob: -0.0013552368618547916
    2. ' :' → logprob: -7.251355171203613
    3. ':
' → logprob: -7.751355171203613
    4. '-' → logprob: -9.751355171203613
    5. ' and' → logprob: -9.751355171203613
    6. '   ' → logprob: -10.001355171203613
    7. '<|end|>' → logprob: -11.376355171203613
    8. '):' → logprob: -11.501355171203613
    9. ' ' → logprob: -11.751355171203613
    10. ' :
' → logprob: -12.376355171203613

Token 36: '       ' (ID: 309)
  Prédit: ' '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' ' → logprob: -0.383719801902771
    2. '       ' → logprob: -2.1337199211120605
    3. '   ' → logprob: -2.3837199211120605
    4. '    ' → logprob: -3.0087199211120605
    5. ' i' → logprob: -4.2587199211120605
    6. '<|end|>' → logprob: -4.5087199211120605
    7. '  ' → logprob: -4.8837199211120605
    8. '-' → logprob: -5.1337199211120605
    9. ':' → logprob: -5.6337199211120605
    10. '     ' → logprob: -6.2587199211120605

Token 37: ' if' (ID: 538)
  Prédit: ' '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' ' → logprob: -0.2508368492126465
    2. '    ' → logprob: -2.6258368492126465
    3. ' i' → logprob: -2.6258368492126465
    4. ' if' → logprob: -3.6258368492126465
    5. 'i' → logprob: -4.2508368492126465
    6. 'if' (adapté à ' if') → logprob: -5.1258368492126465
    7. '   ' → logprob: -5.1258368492126465
    8. '     
' → logprob: -5.1258368492126465
    9. '       ' → logprob: -5.7508368492126465
    10. ' 
' → logprob: -5.8758368492126465

Token 38: ' N' (ID: 478)
  Prédit: ' i'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' i' → logprob: -0.09288118034601212
    2. 'i' → logprob: -2.967881202697754
    3. ' N' → logprob: -3.717881202697754
    4. ' (' → logprob: -5.467881202697754
    5. ' S' → logprob: -5.592881202697754
    6. 'N' → logprob: -5.967881202697754
    7. ' ' → logprob: -6.967881202697754
    8. '(' → logprob: -7.342881202697754
    9. 'S' → logprob: -7.717881202697754
    10. '(i' → logprob: -8.467881202697754

Token 39: ' %' (ID: 1851)
  Prédit: ' %'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' %' → logprob: -0.28965651988983154
    2. '%' → logprob: -1.4146565198898315
    3. '%i' → logprob: -4.789656639099121
    4. ' ' → logprob: -9.039656639099121
    5. ' ' → logprob: -10.914656639099121
    6. '%s' → logprob: -12.664656639099121
    7. '-' → logprob: -13.164656639099121
    8. '>' → logprob: -13.539656639099121
    9. ' i' → logprob: -13.977156639099121
    10. '<' → logprob: -14.039656639099121

Token 40: ' i' (ID: 575)
  Prédit: 'i'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'i' → logprob: -0.6326892375946045
    2. ' i' → logprob: -0.7576892375946045
    3. ' ' → logprob: -10.007689476013184
    4. '	i' → logprob: -10.632689476013184
    5. '2' → logprob: -11.507689476013184
    6. '  ' → logprob: -13.007689476013184
    7. ' ' → logprob: -13.507689476013184
    8. '   ' → logprob: -13.507689476013184
    9. '(i' → logprob: -14.007689476013184
    10. '%i' → logprob: -14.007689476013184

Token 41: ' ==' (ID: 951)
  Prédit: ' =='
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' ==' → logprob: -0.20187491178512573
    2. '==' → logprob: -1.7018749713897705
    3. ' !=' → logprob: -8.076874732971191
    4. ' ' → logprob: -9.826874732971191
    5. '!=' → logprob: -9.951874732971191
    6. ')==' → logprob: -11.576874732971191
    7. ')' → logprob: -11.576874732971191
    8. '=' → logprob: -11.826874732971191
    9. '===' → logprob: -11.826874732971191
    10. '<|end|>' → logprob: -12.451874732971191

Token 42: ' ' (ID: 220)
  Prédit: '0'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '0' → logprob: -0.5231252312660217
    2. ' ' → logprob: -0.8981252312660217
    3. ' ' → logprob: -13.773125648498535
    4. '  ' → logprob: -14.773125648498535
    5. '1' → logprob: -15.398125648498535
    6. '<|end|>' → logprob: -16.39812469482422
    7. '   ' → logprob: -17.27312469482422
    8. '2' → logprob: -17.58562469482422
    9. '=' → logprob: -17.64812469482422
    10. '```' → logprob: -17.83562469482422

Token 43: '0' (ID: 15)
  Prédit: '0'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '0' → logprob: -0.05488296225667
    2. ' ' → logprob: -2.9298830032348633
    3. '1' → logprob: -14.679883003234863
    4. '  ' → logprob: -16.054882049560547
    5. ' ' → logprob: -17.054882049560547
    6. '2' → logprob: -17.429882049560547
    7. '   ' → logprob: -17.492382049560547
    8. '```' → logprob: -17.929882049560547
    9. '=' → logprob: -18.367382049560547
    10. '00' → logprob: -18.492382049560547

Token 44: ':
' (ID: 734)
  Prédit: ':'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ':' → logprob: -0.0026610277127474546
    2. ':
' → logprob: -6.627661228179932
    3. ' :' → logprob: -7.252661228179932
    4. ':return' → logprob: -8.127660751342773
    5. ' and' → logprob: -8.627660751342773
    6. '       ' → logprob: -9.502660751342773
    7. '):' → logprob: -10.127660751342773
    8. ' or' → logprob: -11.627660751342773
    9. ' :
' → logprob: -12.127660751342773
    10. '):
' → logprob: -12.627660751342773

Token 45: '           ' (ID: 352)
  Prédit: '           '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '           ' → logprob: -0.20071692764759064
    2. ' ' → logprob: -2.575716972351074
    3. '        ' → logprob: -3.950716972351074
    4. ' i' → logprob: -4.200716972351074
    5. ' return' → logprob: -4.325716972351074
    6. ' 
' → logprob: -4.575716972351074
    7. '            ' → logprob: -4.950716972351074
    8. ' ' → logprob: -4.950716972351074
    9. '       ' → logprob: -5.075716972351074
    10. '<|end|>' → logprob: -5.075716972351074

Token 46: ' res' (ID: 694)
  Prédit: ' return'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' return' → logprob: -0.06577079743146896
    2. 'return' → logprob: -3.4407708644866943
    3. ' print' → logprob: -4.440770626068115
    4. '       ' → logprob: -5.315770626068115
    5. '           ' → logprob: -5.690770626068115
    6. 'print' → logprob: -5.815770626068115
    7. '        ' → logprob: -6.065770626068115
    8. ' 
' → logprob: -6.565770626068115
    9. ' ' → logprob: -7.065770626068115
    10. '               ' → logprob: -7.440770626068115

Token 47: ' =' (ID: 314)
  Prédit: ' ='
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' =' → logprob: -0.031794119626283646
    2. '=' → logprob: -3.6567940711975098
    3. ' ' → logprob: -6.15679407119751
    4. 'ult' → logprob: -6.40679407119751
    5. 'urn' → logprob: -7.15679407119751
    6. ' i' → logprob: -8.156794548034668
    7. 'ults' → logprob: -8.531794548034668
    8. ':' → logprob: -9.531794548034668
    9. 'u' → logprob: -9.781794548034668
    10. 's' → logprob: -9.781794548034668

Token 48: ' lambda' (ID: 27871)
  Prédit: 'i'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'i' → logprob: -0.43670380115509033
    2. ' i' → logprob: -1.0617038011550903
    3. ' N' → logprob: -5.686703681945801
    4. ' ' → logprob: -6.061703681945801
    5. 'N' → logprob: -6.811703681945801
    6. ' max' → logprob: -7.436703681945801
    7. 'max' → logprob: -8.5617036819458
    8. 'int' → logprob: -9.4992036819458
    9. '  ' → logprob: -9.9992036819458
    10. ' ' → logprob: -10.1242036819458

Token 49: ' x' (ID: 1215)
  Prédit: ' x'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' x' → logprob: -0.4546610116958618
    2. ' N' → logprob: -1.8296610116958618
    3. 'x' → logprob: -2.3296608924865723
    4. ' i' → logprob: -3.0796608924865723
    5. 'N' → logprob: -3.0796608924865723
    6. ' ' → logprob: -5.329660892486572
    7. 'i' → logprob: -5.329660892486572
    8. ':' → logprob: -6.579660892486572
    9. ' n' → logprob: -6.954660892486572
    10. ' a' → logprob: -7.329660892486572

Token 50: ',' (ID: 11)
  Prédit: ':'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ':' → logprob: -0.10127954185009003
    2. ' :' → logprob: -2.4762794971466064
    3. ',' → logprob: -4.7262797355651855
    4. ':i' → logprob: -6.4762797355651855
    5. ':x' → logprob: -7.4762797355651855
    6. ',i' → logprob: -8.226279258728027
    7. ' ,' → logprob: -8.351279258728027
    8. 'x' → logprob: -8.726279258728027
    9. ' x' → logprob: -8.976279258728027
    10. ',x' → logprob: -9.476279258728027

Token 51: ' y' (ID: 342)
  Prédit: 'i'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'i' → logprob: -1.081508994102478
    2. 'y' → logprob: -1.331508994102478
    3. ' y' → logprob: -1.706508994102478
    4. ' i' → logprob: -2.0815091133117676
    5. 'N' → logprob: -3.4565091133117676
    6. ' N' → logprob: -3.7065091133117676
    7. 'x' → logprob: -4.081509113311768
    8. ' x' → logprob: -5.081509113311768
    9. ' ' → logprob: -5.206509113311768
    10. 'lambda' → logprob: -7.206509113311768

Token 52: ':' (ID: 25)
  Prédit: ':'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ':' → logprob: -0.012944084592163563
    2. ' :' → logprob: -4.387944221496582
    3. ',' → logprob: -8.137944221496582
    4. ':x' → logprob: -9.512944221496582
    5. '=' → logprob: -11.387944221496582
    6. 'x' → logprob: -11.512944221496582
    7. ':return' → logprob: -12.137944221496582
    8. ':max' → logprob: -12.387944221496582
    9. ':i' → logprob: -12.637944221496582
    10. ' ' → logprob: -12.825444221496582

Token 53: ' x' (ID: 1215)
  Prédit: 'x'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'x' → logprob: -0.46591347455978394
    2. ' x' → logprob: -1.2159135341644287
    3. 'max' → logprob: -3.8409135341644287
    4. ' max' → logprob: -3.9659135341644287
    5. ' y' → logprob: -4.71591329574585
    6. 'y' → logprob: -4.96591329574585
    7. ' ' → logprob: -5.71591329574585
    8. 'print' → logprob: -6.09091329574585
    9. ' (' → logprob: -6.09091329574585
    10. 'i' → logprob: -6.34091329574585

Token 54: ' -' (ID: 533)
  Prédit: ' //'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' //' → logprob: -0.7418903112411499
    2. '//' → logprob: -1.49189031124115
    3. ' %' → logprob: -2.6168904304504395
    4. '%' → logprob: -2.9918904304504395
    5. '+' → logprob: -2.9918904304504395
    6. ' if' → logprob: -3.1168904304504395
    7. ' +' → logprob: -3.7418904304504395
    8. ' /' → logprob: -3.8668904304504395
    9. 'if' → logprob: -5.1168904304504395
    10. ' *' → logprob: -5.2418904304504395

Token 55: ' ' (ID: 220)
  Prédit: ' y'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' y' → logprob: -0.3165664076805115
    2. 'y' → logprob: -1.3165664672851562
    3. '1' → logprob: -6.566566467285156
    4. ' i' → logprob: -7.691566467285156
    5. ' ' → logprob: -7.816566467285156
    6. ' (' → logprob: -8.066566467285156
    7. 'i' → logprob: -8.191566467285156
    8. 'x' → logprob: -9.441566467285156
    9. ' x' → logprob: -9.441566467285156
    10. '(y' → logprob: -9.691566467285156

Token 56: '1' (ID: 16)
  Prédit: 'y'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'y' → logprob: -0.005873686634004116
    2. ' y' → logprob: -5.755873680114746
    3. '1' → logprob: -6.380873680114746
    4. 'x' → logprob: -7.505873680114746
    5. 'i' → logprob: -9.005873680114746
    6. '2' → logprob: -9.380873680114746
    7. '(y' → logprob: -9.630873680114746
    8. '(' → logprob: -9.755873680114746
    9. ' (' → logprob: -10.755873680114746
    10. 'N' → logprob: -10.880873680114746

Token 57: ' +' (ID: 659)
  Prédit: '
'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '
' → logprob: -0.7776490449905396
    2. '           ' → logprob: -2.40264892578125
    3. '<|end|>' → logprob: -2.40264892578125
    4. ' +' → logprob: -2.90264892578125
    5. ' if' → logprob: -2.90264892578125
    6. ' and' → logprob: -3.15264892578125
    7. ' ' → logprob: -3.15264892578125
    8. '+' → logprob: -3.77764892578125
    9. ' or' → logprob: -4.15264892578125
    10. '               ' → logprob: -4.15264892578125

Token 58: ' y' (ID: 342)
  Prédit: 'y'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'y' → logprob: -0.47074514627456665
    2. ' y' → logprob: -1.4707450866699219
    3. 'N' → logprob: -2.845745086669922
    4. '(' → logprob: -3.470745086669922
    5. ' (' → logprob: -4.095745086669922
    6. '(N' → logprob: -4.220745086669922
    7. ' N' → logprob: -4.345745086669922
    8. '(y' → logprob: -4.595745086669922
    9. ' ' → logprob: -6.845745086669922
    10. '((' → logprob: -7.845745086669922

Token 59: ' -' (ID: 533)
  Prédit: '
'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '
' → logprob: -0.11054525524377823
    2. '/i' → logprob: -3.3605451583862305
    3. 'return' → logprob: -3.9855451583862305
    4. '           ' → logprob: -4.7355451583862305
    5. ' -' → logprob: -4.7355451583862305
    6. '
' → logprob: -4.9855451583862305
    7. ' /' → logprob: -5.3605451583862305
    8. 'i' → logprob: -5.8605451583862305
    9. '-i' → logprob: -5.9855451583862305
    10. ' +' → logprob: -5.9855451583862305

Token 60: ' ' (ID: 220)
  Prédit: '1'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '1' → logprob: -0.0059316400438547134
    2. ' ' → logprob: -5.130931854248047
    3. '2' → logprob: -13.630931854248047
    4. '  ' → logprob: -15.005931854248047
    5. '(' → logprob: -15.568431854248047
    6. '```' → logprob: -15.693431854248047
    7. 's' → logprob: -16.130931854248047
    8. '   ' → logprob: -16.255931854248047
    9. '<|end|>' → logprob: -16.255931854248047
    10. ' ' → logprob: -16.255931854248047

Token 61: '1' (ID: 16)
  Prédit: '1'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '1' → logprob: -7.703443770878948e-06
    2. ' ' → logprob: -11.875007629394531
    3. '2' → logprob: -14.875007629394531
    4. 'x' → logprob: -17.75000762939453
    5. 's' → logprob: -17.93750762939453
    6. '۱' → logprob: -18.56250762939453
    7. '<|end|>' → logprob: -18.56250762939453
    8. '１' → logprob: -18.75000762939453
    9. '১' → logprob: -18.87500762939453
    10. 'i' → logprob: -18.87500762939453

Token 62: '
' (ID: 198)
  Prédit: '
'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '
' → logprob: -0.09344765543937683
    2. '           ' → logprob: -2.468447685241699
    3. '
' → logprob: -6.093447685241699
    4. '               ' → logprob: -6.593447685241699
    5. 'return' → logprob: -7.718447685241699
    6. ' return' → logprob: -9.0934476852417
    7. ' 
' → logprob: -9.2184476852417
    8. '       ' → logprob: -9.4684476852417
    9. ' ' → logprob: -10.4684476852417
    10. '                   ' → logprob: -10.9684476852417

Token 63: '           ' (ID: 352)
  Prédit: '           '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '           ' → logprob: -0.16452468931674957
    2. '
' → logprob: -1.9145246744155884
    3. '
' → logprob: -6.289524555206299
    4. '               ' → logprob: -7.289524555206299
    5. '		' → logprob: -7.914524555206299
    6. '\n' → logprob: -8.414525032043457
    7. ' 
' → logprob: -9.039525032043457
    8. '       ' → logprob: -9.039525032043457
    9. 'return' → logprob: -9.414525032043457
    10. '<|end|>' → logprob: -9.414525032043457

Token 64: ' print' (ID: 2123)
  Prédit: '           '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '           ' → logprob: -0.1630488783121109
    2. '
' → logprob: -1.9130488634109497
    3. '()
' → logprob: -7.16304874420166
    4. '
' → logprob: -7.53804874420166
    5. '            
' → logprob: -7.78804874420166
    6. '()' → logprob: -8.41304874420166
    7. ' 
' → logprob: -8.66304874420166
    8. '\n' → logprob: -8.78804874420166
    9. '  
' → logprob: -9.16304874420166
    10. '		' → logprob: -9.91304874420166

Token 65: '(res' (ID: 8331)
  Prédit: '(res'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(res' → logprob: -0.0027024007868021727
    2. '(' → logprob: -6.002702236175537
    3. 'res' → logprob: -9.377702713012695
    4. '(i' → logprob: -9.627702713012695
    5. '(f' → logprob: -10.377702713012695
    6. '(S' → logprob: -11.627702713012695
    7. '(int' → logprob: -11.752702713012695
    8. '((' → logprob: -12.002702713012695
    9. '(N' → logprob: -12.127702713012695
    10. '(
' → logprob: -13.002702713012695

Token 66: '(i' (ID: 3649)
  Prédit: '(i'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(i' → logprob: -0.0043968865647912025
    2. '(' → logprob: -5.504396915435791
    3. '(N' → logprob: -8.254396438598633
    4. '((' → logprob: -11.004396438598633
    5. '(
' → logprob: -11.504396438598633
    6. ')' → logprob: -11.629396438598633
    7. ',i' → logprob: -11.879396438598633
    8. 'i' → logprob: -12.754396438598633
    9. ' (' → logprob: -13.004396438598633
    10. ',' → logprob: -13.379396438598633

Token 67: ',' (ID: 11)
  Prédit: ','
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ',' → logprob: -0.0010733000235632062
    2. ' ,' → logprob: -7.501073360443115
    3. ',i' → logprob: -7.626073360443115
    4. ',
' → logprob: -11.376072883605957
    5. '   ' → logprob: -12.751072883605957
    6. ')' → logprob: -13.126072883605957
    7. ',y' → logprob: -13.376072883605957
    8. ',N' → logprob: -13.376072883605957
    9. '  ' → logprob: -13.501072883605957
    10. ' ' → logprob: -13.501072883605957

Token 68: ' N' (ID: 478)
  Prédit: 'N'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'N' → logprob: -0.005437350831925869
    2. ' N' → logprob: -5.25543737411499
    3. 'int' → logprob: -8.755436897277832
    4. '  ' → logprob: -11.255436897277832
    5. ' ' → logprob: -11.380436897277832
    6. ')' → logprob: -12.130436897277832
    7. '   ' → logprob: -12.505436897277832
    8. '(N' → logprob: -12.505436897277832
    9. '	N' → logprob: -13.255436897277832
    10. ' int' → logprob: -13.755436897277832

Token 69: ' //' (ID: 602)
  Prédit: '//'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '//' → logprob: -0.04374057427048683
    2. ' //' → logprob: -3.1687405109405518
    3. '/i' → logprob: -7.293740749359131
    4. '/' → logprob: -10.918740272521973
    5. 'i' → logprob: -10.918740272521973
    6. ' ' → logprob: -12.168740272521973
    7. ')' → logprob: -12.543740272521973
    8. ' /' → logprob: -12.543740272521973
    9. '[i' → logprob: -13.043740272521973
    10. ' i' → logprob: -13.043740272521973

Token 70: ' i' (ID: 575)
  Prédit: 'i'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'i' → logprob: -0.0004879915213678032
    2. ' i' → logprob: -7.625487804412842
    3. '	i' → logprob: -17.75048828125
    4. ' ' → logprob: -17.87548828125
    5. ')i' → logprob: -18.87548828125
    6. '<|end|>' → logprob: -19.25048828125
    7. '  ' → logprob: -19.62548828125
    8. '   ' → logprob: -19.87548828125
    9. ')' → logprob: -20.00048828125
    10. '(i' → logprob: -20.37548828125

Token 71: '))
' (ID: 2210)
  Prédit: '))'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '))' → logprob: -0.07993725687265396
    2. '))
' → logprob: -2.954937219619751
    3. ')' → logprob: -3.704937219619751
    4. '))
' → logprob: -9.704936981201172
    5. ')
' → logprob: -10.079936981201172
    6. '))

' → logprob: -11.079936981201172
    7. ')))' → logprob: -11.079936981201172
    8. '),' → logprob: -13.329936981201172
    9. ' ' → logprob: -13.579936981201172
    10. ' ))' → logprob: -14.079936981201172

Token 72: '           ' (ID: 352)
  Prédit: '           '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '           ' → logprob: -3.810037742368877e-05
    2. 'return' → logprob: -11.000038146972656
    3. '            
' → logprob: -11.375038146972656
    4. '       ' → logprob: -12.875038146972656
    5. '               ' → logprob: -13.500038146972656
    6. ' return' → logprob: -13.625038146972656
    7. '```' → logprob: -13.625038146972656
    8. '
' → logprob: -14.375038146972656
    9. '<|end|>' → logprob: -14.375038146972656
    10. ',' → logprob: -15.125038146972656

Token 73: ' return' (ID: 622)
  Prédit: '           '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '           ' → logprob: -0.00023214559769257903
    2. 'return' (adapté à ' return') → logprob: -8.500231742858887
    3. ' return' → logprob: -11.375231742858887
    4. 'break' → logprob: -11.375231742858887
    5. '            
' → logprob: -12.875231742858887
    6. ' break' → logprob: -13.625231742858887
    7. '
' → logprob: -14.250231742858887
    8. '```' → logprob: -14.375231742858887
    9. '       ' → logprob: -15.500231742858887
    10. '               ' → logprob: -16.125232696533203

Token 74: ' None' (ID: 4662)
  Prédit: '       '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '       ' → logprob: -0.03974296897649765
    2. '   ' → logprob: -3.664742946624756
    3. ' i' → logprob: -4.664742946624756
    4. 'i' → logprob: -5.664742946624756
    5. ' ' → logprob: -8.664743423461914
    6. '```' → logprob: -9.414743423461914
    7. '<|end|>' → logprob: -9.539743423461914
    8. '  ' → logprob: -10.539743423461914
    9. '        
' → logprob: -10.664743423461914
    10. '	i' → logprob: -11.164743423461914

Token 75: '
' (ID: 198)
  Prédit: '       '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '       ' → logprob: -0.00024608144303783774
    2. '   ' → logprob: -9.125246047973633
    3. 'i' → logprob: -9.375246047973633
    4. ' i' → logprob: -10.875246047973633
    5. '        
' → logprob: -11.750246047973633
    6. '```' → logprob: -11.750246047973633
    7. 'b' → logprob: -13.000246047973633
    8. '      ' → logprob: -13.250246047973633
    9. ' ' → logprob: -13.375246047973633
    10. '<|end|>' → logprob: -13.375246047973633

Token 76: '       ' (ID: 309)
  Prédit: '       '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '       ' → logprob: -0.0002142650482710451
    2. '   ' → logprob: -8.875214576721191
    3. 'i' → logprob: -10.000214576721191
    4. ' i' → logprob: -11.375214576721191
    5. '```' → logprob: -12.375214576721191
    6. '        
' → logprob: -13.250214576721191
    7. '<|end|>' → logprob: -13.375214576721191
    8. 'b' → logprob: -13.750214576721191
    9. '1' → logprob: -14.000214576721191
    10. '      ' → logprob: -14.000214576721191

Token 77: ' i' (ID: 575)
  Prédit: '-'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '-' → logprob: -0.2523103952407837
    2. 'i' (adapté à ' i') → logprob: -1.5023103952407837
    3. '   ' → logprob: -8.252310752868652
    4. '-i' → logprob: -9.252310752868652
    5. '-=' → logprob: -11.877310752868652
    6. ' i' → logprob: -11.877310752868652
    7. '       ' → logprob: -12.502310752868652
    8. ' -' → logprob: -12.752310752868652
    9. '  ' → logprob: -13.502310752868652
    10. ' ' → logprob: -13.752310752868652

Token 78: ' -=' (ID: 12583)
  Prédit: '-'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '-' → logprob: -0.7345834970474243
    2. '-=' → logprob: -0.7345834970474243
    3. ' -=' → logprob: -3.2345833778381348
    4. '=' → logprob: -7.609583377838135
    5. '+=' → logprob: -7.984583377838135
    6. ' -' → logprob: -8.484583854675293
    7. ' ' → logprob: -10.234583854675293
    8. '--' → logprob: -10.234583854675293
    9. '<|end|>' → logprob: -10.484583854675293
    10. '```' → logprob: -10.609583854675293

Token 79: ' ' (ID: 220)
  Prédit: '1'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '1' → logprob: -5.848420551046729e-05
    2. ' ' → logprob: -9.7500581741333
    3. '   ' → logprob: -16.750059127807617
    4. '  ' → logprob: -18.500059127807617
    5. '```' → logprob: -18.625059127807617
    6. ' ' → logprob: -18.750059127807617
    7. '<|end|>' → logprob: -19.000059127807617
    8. '    ' → logprob: -20.062559127807617
    9. '       ' → logprob: -20.312559127807617
    10. '
' → logprob: -20.625059127807617

Token 80: '1' (ID: 16)
  Prédit: '1'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '1' → logprob: -1.9146995327901095e-05
    2. ' ' → logprob: -10.875019073486328
    3. '  ' → logprob: -17.375019073486328
    4. '2' → logprob: -17.500019073486328
    5. '   ' → logprob: -18.000019073486328
    6. '```' → logprob: -18.187519073486328
    7. '0' → logprob: -18.437519073486328
    8. ' ' → logprob: -19.125019073486328
    9. '۱' → logprob: -19.500019073486328
    10. '3' → logprob: -19.500019073486328

Token 81: '
' (ID: 198)
  Prédit: ''
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False

Token 82: '   ' (ID: 271)
  Prédit: ''
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False

Token 83: ' else' (ID: 1203)
  Prédit: ''
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False

Token 84: ':
' (ID: 734)
  Prédit: ':'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ':' → logprob: -0.04944320768117905
    2. ':
' → logprob: -3.049443244934082
    3. ' :' → logprob: -7.299443244934082
    4. ' :
' → logprob: -9.299443244934082
    5. ':return' → logprob: -10.174443244934082
    6. '   ' → logprob: -10.924443244934082
    7. ':
' → logprob: -11.674443244934082
    8. ':

' → logprob: -12.174443244934082
    9. '{' → logprob: -12.174443244934082
    10. ' ' → logprob: -12.924443244934082

Token 85: '       ' (ID: 309)
  Prédit: 'print'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'print' → logprob: -0.23016488552093506
    2. '   ' → logprob: -1.730164885520935
    3. 'return' → logprob: -4.230165004730225
    4. ' print' → logprob: -5.355165004730225
    5. 'None' → logprob: -5.730165004730225
    6. 'pass' → logprob: -6.105165004730225
    7. '0' → logprob: -7.105165004730225
    8. ' None' → logprob: -7.230165004730225
    9. ' return' → logprob: -7.480165004730225
    10. 'raise' → logprob: -7.605165004730225

Token 86: ' sys' (ID: 12228)
  Prédit: 'print'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'print' → logprob: -0.0018449827330186963
    2. '   ' → logprob: -6.876844882965088
    3. '0' → logprob: -7.501844882965088
    4. ' print' → logprob: -9.001845359802246
    5. 'None' → logprob: -9.751845359802246
    6. 'pass' → logprob: -10.876845359802246
    7. 'return' → logprob: -11.376845359802246
    8. '```' → logprob: -11.751845359802246
    9. 'pr' → logprob: -11.876845359802246
    10. '1' → logprob: -11.876845359802246

Token 87: '.stdout' (ID: 59462)
  Prédit: '.exit'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '.exit' → logprob: -0.000639765290543437
    2. '.stdout' → logprob: -7.875639915466309
    3. '.stderr' → logprob: -9.000639915466309
    4. '.' → logprob: -9.125639915466309
    5. '.stdin' → logprob: -11.500639915466309
    6. ' exit' → logprob: -11.875639915466309
    7. 'exit' → logprob: -12.500639915466309
    8. ' .' → logprob: -13.250639915466309
    9. '.quit' → logprob: -13.875639915466309
    10. '	exit' → logprob: -14.000639915466309

Token 88: '.write' (ID: 6765)
  Prédit: '.write'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '.write' → logprob: -0.002886783331632614
    2. '.' → logprob: -6.002886772155762
    3. '.flush' → logprob: -8.002886772155762
    4. 'write' → logprob: -10.377886772155762
    5. '.readline' → logprob: -10.627886772155762
    6. ' .' → logprob: -11.752886772155762
    7. '.close' → logprob: -12.377886772155762
    8. '.w' → logprob: -13.127886772155762
    9. '.exit' → logprob: -13.877886772155762
    10. '.Write' → logprob: -14.377886772155762

Token 89: '("' (ID: 568)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(' → logprob: -0.8315200805664062
    2. '('' → logprob: -1.2065200805664062
    3. '("' → logprob: -1.5815200805664062
    4. '(str' → logprob: -3.9565200805664062
    5. '("")' → logprob: -4.081520080566406
    6. '("("' → logprob: -4.956520080566406
    7. '('\' → logprob: -5.706520080566406
    8. '("\' → logprob: -5.706520080566406
    9. '("(' → logprob: -5.706520080566406
    10. '(N' → logprob: -6.706520080566406

Token 90: 'wrong' (ID: 71673)
  Prédit: '-'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '-' → logprob: -0.14223556220531464
    2. '0' → logprob: -2.892235517501831
    3. 'N' → logprob: -3.892235517501831
    4. 'No' → logprob: -3.892235517501831
    5. '1' → logprob: -4.26723575592041
    6. 'im' → logprob: -5.01723575592041
    7. 'Impossible' → logprob: -5.76723575592041
    8. '"' → logprob: -6.26723575592041
    9. 'NO' → logprob: -6.26723575592041
    10. '2' → logprob: -6.64223575592041

Token 91: '...\' (ID: 77967)
  Prédit: '")'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '")' → logprob: -0.32793548703193665
    2. '\n' → logprob: -1.5779354572296143
    3. ')")' → logprob: -3.0779354572296143
    4. ')' → logprob: -4.327935695648193
    5. ' code' → logprob: -5.452935695648193
    6. '!")' → logprob: -5.952935695648193
    7. ' input' → logprob: -6.327935695648193
    8. ')\' → logprob: -7.077935695648193
    9. ' solution' → logprob: -7.077935695648193
    10. 'input' → logprob: -7.327935695648193

Token 92: 'n' (ID: 77)
  Prédit: '")'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '")' → logprob: -0.03777589276432991
    2. '!")' → logprob: -4.537775993347168
    3. '\n' → logprob: -4.912775993347168
    4. ')' → logprob: -5.162775993347168
    5. ')")' → logprob: -5.162775993347168
    6. 'n' → logprob: -5.787775993347168
    7. '"' → logprob: -6.537775993347168
    8. '!' → logprob: -7.912775993347168
    9. '\"' → logprob: -8.162775993347168
    10. ')\' → logprob: -8.162775993347168

Token 93: '")

' (ID: 10822)
  Prédit: '")'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '")' → logprob: -0.006301311310380697
    2. ')' → logprob: -5.131301403045654
    3. ')")' → logprob: -8.506300926208496
    4. '")
' → logprob: -9.006300926208496
    5. '"' → logprob: -10.256300926208496
    6. '')' → logprob: -12.881300926208496
    7. '")

' → logprob: -12.881300926208496
    8. '!")' → logprob: -13.506300926208496
    9. ')"' → logprob: -13.881300926208496
    10. '");' → logprob: -14.131300926208496

Token 94: 'if' (ID: 366)
  Prédit: ' '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' ' → logprob: -0.07382884621620178
    2. ')' → logprob: -3.573828935623169
    3. '<|end|>' → logprob: -4.44882869720459
    4. '_' → logprob: -4.94882869720459
    5. '[' → logprob: -5.07382869720459
    6. '0' → logprob: -5.44882869720459
    7. ' )' → logprob: -5.44882869720459
    8. '(' → logprob: -5.82382869720459
    9. '#' → logprob: -6.19882869720459
    10. '```' → logprob: -6.69882869720459

Token 95: ' __' (ID: 2516)
  Prédit: ' __'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' __' → logprob: -0.38687190413475037
    2. '__' → logprob: -1.1368719339370728
    3. 'name' → logprob: -15.011872291564941
    4. ' ' → logprob: -15.511872291564941
    5. ' ' → logprob: -15.761872291564941
    6. ' name' → logprob: -15.886872291564941
    7. ' True' → logprob: -17.511871337890625
    8. '___' → logprob: -17.761871337890625
    9. '(__' → logprob: -18.136871337890625
    10. ' "__' → logprob: -18.261871337890625

Token 96: 'name' (ID: 897)
  Prédit: ' =='
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' ==' → logprob: -0.45621588826179504
    2. '__' → logprob: -1.2062158584594727
    3. '==' → logprob: -3.2062158584594727
    4. 'name' → logprob: -3.9562158584594727
    5. ' __' → logprob: -5.831215858459473
    6. ' .' → logprob: -7.206215858459473
    7. '.name' → logprob: -7.331215858459473
    8. '.' → logprob: -7.456215858459473
    9. '.__' → logprob: -7.456215858459473
    10. '[' → logprob: -7.831215858459473

Token 97: '__' (ID: 771)
  Prédit: '__'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '__' → logprob: -0.012797567993402481
    2. '__.__' → logprob: -4.7627973556518555
    3. '__.' → logprob: -5.7627973556518555
    4. '.__' → logprob: -7.8877973556518555
    5. '__["' → logprob: -8.637797355651855
    6. '.' → logprob: -8.887797355651855
    7. '==' → logprob: -9.012797355651855
    8. '__[' → logprob: -9.762797355651855
    9. '___' → logprob: -9.887797355651855
    10. '_' → logprob: -10.387797355651855

Token 98: ' ==' (ID: 951)
  Prédit: ' =='
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' ==' → logprob: -0.7580320835113525
    2. '==' → logprob: -1.0080320835113525
    3. '__' → logprob: -1.8830320835113525
    4. '=="' → logprob: -4.883031845092773
    5. '[' → logprob: -6.508031845092773
    6. '=='' → logprob: -6.758031845092773
    7. '<|end|>' → logprob: -6.758031845092773
    8. '_' → logprob: -7.258031845092773
    9. '.' → logprob: -7.258031845092773
    10. '__.__' → logprob: -8.258031845092773

Token 99: ' '__' (ID: 28278)
  Prédit: '"'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '"' → logprob: -0.20163407921791077
    2. ''' → logprob: -1.7016340494155884
    3. ' "__' → logprob: -8.701634407043457
    4. ' "' → logprob: -10.451634407043457
    5. '__' → logprob: -10.951634407043457
    6. ' '__' → logprob: -12.076634407043457
    7. ' '' → logprob: -13.701634407043457
    8. '"user' → logprob: -15.076634407043457
    9. ' __' → logprob: -15.451634407043457
    10. '`' → logprob: -15.451634407043457

Token 100: 'main' (ID: 7731)
  Prédit: 'main'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'main' → logprob: -0.03425019606947899
    2. '__' → logprob: -4.034250259399414
    3. 'name' → logprob: -4.159250259399414
    4. '_main' → logprob: -8.534250259399414
    5. '```' → logprob: -9.909250259399414
    6. '__':
' → logprob: -10.284250259399414
    7. '__
' → logprob: -10.784250259399414
    8. '_' → logprob: -11.409250259399414
    9. 'm' → logprob: -12.284250259399414
    10. '_name' → logprob: -12.409250259399414

Token 101: '__':
' (ID: 39314)
  Prédit: '__'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '__' → logprob: -0.2916790544986725
    2. '__':
' → logprob: -1.91667902469635
    3. '__:' → logprob: -2.2916791439056396
    4. '__":
' → logprob: -5.5416789054870605
    5. ':' → logprob: -7.6666789054870605
    6. '_' → logprob: -9.041679382324219
    7. '():' → logprob: -9.166679382324219
    8. '():
' → logprob: -10.166679382324219
    9. '':' → logprob: -10.666679382324219
    10. '__
' → logprob: -10.916679382324219

Token 102: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.03538389131426811
    2. 'import' → logprob: -4.785383701324463
    3. ' for' → logprob: -5.035383701324463
    4. ' import' → logprob: -5.160383701324463
    5. '    
' → logprob: -5.535383701324463
    6. ' input' → logprob: -6.035383701324463
    7. '<|end|>' → logprob: -6.160383701324463
    8. '	import' → logprob: -6.660383701324463
    9. ' n' → logprob: -6.785383701324463
    10. 'n' → logprob: -7.285383701324463

Token 103: ' exec' (ID: 25398)
  Prédit: 'N'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'N' → logprob: -0.36522403359413147
    2. 'import' → logprob: -2.1152241230010986
    3. 'n' → logprob: -2.3652241230010986
    4. ' N' → logprob: -2.8652241230010986
    5. ' n' → logprob: -3.6152241230010986
    6. ' import' → logprob: -5.3652238845825195
    7. ' for' → logprob: -6.8652238845825195
    8. 'for' → logprob: -6.9902238845825195
    9. 't' → logprob: -7.7402238845825195
    10. '   ' → logprob: -8.49022388458252

Token 104: '("' (ID: 568)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '(' → logprob: -0.013273409567773342
    2. '(input' → logprob: -4.638273239135742
    3. '(sys' → logprob: -6.138273239135742
    4. '(open' → logprob: -6.638273239135742
    5. '(
' → logprob: -10.888273239135742
    6. '(stdin' → logprob: -12.138273239135742
    7. '('' → logprob: -12.513273239135742
    8. '("""' → logprob: -12.888273239135742
    9. '(eval' → logprob: -13.263273239135742
    10. '(

' → logprob: -13.513273239135742

Token 105: 'n' (ID: 77)
  Prédit: 'input'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'input' → logprob: -0.006809395272284746
    2. '"' → logprob: -6.381809234619141
    3. '__' → logprob: -6.506809234619141
    4. 'sys' → logprob: -6.756809234619141
    5. 'SOL' → logprob: -7.881809234619141
    6. 'import' → logprob: -7.881809234619141
    7. '""' → logprob: -8.38180923461914
    8. 'print' → logprob: -8.75680923461914
    9. 'inp' → logprob: -8.75680923461914
    10. '"""' → logprob: -8.75680923461914

Token 106: '=int' (ID: 37431)
  Prédit: ' ='
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' =' → logprob: -0.2380526214838028
    2. '=' → logprob: -1.6130526065826416
    3. '=int' → logprob: -5.113052845001221
    4. ' ' → logprob: -5.738052845001221
    5. '=input' → logprob: -5.863052845001221
    6. '=sys' → logprob: -8.613052368164062
    7. '   ' → logprob: -8.988052368164062
    8. '  ' → logprob: -10.488052368164062
    9. '")' → logprob: -10.738052368164062
    10. '="' → logprob: -10.988052368164062

Token 107: '(input' (ID: 10054)
  Prédit: '(input'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(input' → logprob: -0.0051630777306854725
    2. '(sys' → logprob: -5.505163192749023
    3. 'input' → logprob: -7.505163192749023
    4. '(' → logprob: -7.630163192749023
    5. ' (' → logprob: -10.255163192749023
    6. ' input' → logprob: -13.255163192749023
    7. '((' → logprob: -13.505163192749023
    8. 'sys' → logprob: -13.505163192749023
    9. '(raw' → logprob: -13.505163192749023
    10. '()' → logprob: -13.755163192749023

Token 108: '())' (ID: 3516)
  Prédit: '())'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '())' → logprob: -0.0005541055579669774
    2. '()' → logprob: -7.875554084777832
    3. '()))' → logprob: -10.000554084777832
    4. ' ())' → logprob: -10.250554084777832
    5. '());' → logprob: -10.375554084777832
    6. '())
' → logprob: -10.875554084777832
    7. '('' → logprob: -10.875554084777832
    8. '(' → logprob: -12.000554084777832
    9. '()\' → logprob: -12.000554084777832
    10. '()
' → logprob: -12.625554084777832

Token 109: '\' (ID: 59)
  Prédit: '")'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '")' → logprob: -0.6853180527687073
    2. '\n' → logprob: -0.8103180527687073
    3. '()' → logprob: -3.5603179931640625
    4. ';' → logprob: -5.0603179931640625
    5. '");' → logprob: -5.0603179931640625
    6. '()\' → logprob: -5.4353179931640625
    7. '();' → logprob: -6.4353179931640625
    8. '")
' → logprob: -6.6853179931640625
    9. '()
' → logprob: -7.1853179931640625
    10. '\' → logprob: -7.3103179931640625

Token 110: 'n' (ID: 77)
  Prédit: '")'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '")' → logprob: -0.6378198862075806
    2. '\n' → logprob: -0.7628198862075806
    3. 'n' → logprob: -6.387819766998291
    4. '()' → logprob: -7.012819766998291
    5. '()\' → logprob: -7.262819766998291
    6. '");' → logprob: -7.637819766998291
    7. ';' → logprob: -8.01282024383545
    8. '\' → logprob: -8.13782024383545
    9. '
' → logprob: -8.51282024383545
    10. '")
' → logprob: -9.01282024383545

Token 111: 'SOL' (ID: 109776)
  Prédit: 'SOL'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'SOL' → logprob: -0.0018578420858830214
    2. 'print' → logprob: -6.751857757568359
    3. 'S' → logprob: -8.00185775756836
    4. 'for' → logprob: -8.50185775756836
    5. 'solve' → logprob: -9.50185775756836
    6. ' SOL' → logprob: -10.25185775756836
    7. 'res' → logprob: -11.37685775756836
    8. 'result' → logprob: -11.62685775756836
    9. 'SO' → logprob: -12.37685775756836
    10. '_SOL' → logprob: -12.50185775756836

Token 112: 'VE' (ID: 19511)
  Prédit: 'VE'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'VE' → logprob: -5.512236498361744e-07
    2. 'V' → logprob: -14.750000953674316
    3. ' VE' → logprob: -17.125
    4. 've' → logprob: -18.125
    5. '\' → logprob: -18.25
    6. 'E' → logprob: -19.375
    7. 'VED' → logprob: -19.625
    8. '
' → logprob: -20.125
    9. '```' → logprob: -20.375
    10. 'VES' → logprob: -20.5

Token 113: '(n' (ID: 2406)
  Prédit: '(n'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(n' → logprob: -0.0008087906171567738
    2. '(' → logprob: -7.1258087158203125
    3. ' (' → logprob: -12.875808715820312
    4. '("' → logprob: -14.000808715820312
    5. '")' → logprob: -14.375808715820312
    6. '(N' → logprob: -16.375808715820312
    7. '"' → logprob: -16.625808715820312
    8. '((' → logprob: -16.625808715820312
    9. '"(' → logprob: -18.250808715820312
    10. '(
' → logprob: -18.500808715820312

Token 114: ')")' (ID: 174847)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')' → logprob: -0.6955690383911133
    2. ')")' → logprob: -0.6955690383911133
    3. '")' → logprob: -6.570569038391113
    4. '))' → logprob: -6.945569038391113
    5. ')"' → logprob: -11.070569038391113
    6. ')\' → logprob: -11.195569038391113
    7. ')">' → logprob: -11.945569038391113
    8. ')")
' → logprob: -12.070569038391113
    9. ')))' → logprob: -12.570569038391113
    10. '())' → logprob: -12.945569038391113


RÉSUMÉ:
--------------------------------------------------------------------------------
Total des tokens analysés: 112
Tokens correctement prédits (1ère position, stricte): 40
Tokens correctement prédits (1ère position, avec adaptation): 40
Tokens correctement prédits (top 10): 90
Précision stricte (1ère position): 35.71%
Précision adaptée (1ère position): 35.71%
Précision (top 10): 80.36%
================================================================================
