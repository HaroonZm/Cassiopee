================================================================================
ANALYSE DE PRÉDICTION TOKEN PAR TOKEN (BATCH API)
Date: 2025-06-04 19:39:19
Modèle de tokenisation: gpt-4o-mini
================================================================================

SCRIPT ANALYSÉ:
--------------------------------------------------------------------------------
n = int(input())
if n % 2 == 0:
    result = n // 2 - 1
else:
    result = (n - 1) // 2
print(result)
--------------------------------------------------------------------------------

RÉSULTATS D'ANALYSE TOKEN PAR TOKEN:
--------------------------------------------------------------------------------
Token 0: 'n' (ID: 77)
  → Token d'amorce (pas de prédiction)

Token 1: ' =' (ID: 314)
  → Token d'amorce (pas de prédiction)

Token 2: ' int' (ID: 677)
  → Token d'amorce (pas de prédiction)

Token 3: '(input' (ID: 10054)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '(' → logprob: -0.00010807292710524052
    2. '(n' → logprob: -10.250107765197754
    3. ''' → logprob: -10.625107765197754
    4. '('' → logprob: -11.375107765197754
    5. '```' → logprob: -11.625107765197754
    6. '(
' → logprob: -12.000107765197754
    7. '("("' → logprob: -12.375107765197754
    8. '()' → logprob: -12.375107765197754
    9. '`' → logprob: -12.500107765197754
    10. ')' → logprob: -13.125107765197754

Token 4: '())
' (ID: 4574)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '(' → logprob: -0.0733630508184433
    2. ')' → logprob: -2.8233630657196045
    3. '()' → logprob: -4.698362827301025
    4. '())' → logprob: -6.948362827301025
    5. '```' → logprob: -8.198363304138184
    6. '(
' → logprob: -8.448363304138184
    7. '('' → logprob: -8.948363304138184
    8. '(()' → logprob: -9.073363304138184
    9. '`' → logprob: -9.198363304138184
    10. '("("' → logprob: -9.698363304138184

Token 5: 'if' (ID: 366)
  Prédit: 'if'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'if' → logprob: -0.6515942215919495
    2. 'for' → logprob: -1.4015941619873047
    3. 'i' → logprob: -2.1515941619873047
    4. 's' → logprob: -2.7765941619873047
    5. 'x' → logprob: -4.651594161987305
    6. ')' → logprob: -5.151594161987305
    7. 'a' → logprob: -5.401594161987305
    8. '*' → logprob: -5.401594161987305
    9. ' ' → logprob: -5.651594161987305
    10. 'f' → logprob: -5.901594161987305

Token 6: ' n' (ID: 297)
  Prédit: ' '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' ' → logprob: -0.38733163475990295
    2. ' n' → logprob: -1.1373316049575806
    3. 'n' → logprob: -7.762331485748291
    4. ' ' → logprob: -10.88733196258545
    5. '  ' → logprob: -11.88733196258545
    6. ' not' → logprob: -12.38733196258545
    7. ' )' → logprob: -13.88733196258545
    8. ' (' → logprob: -14.38733196258545
    9. ''' → logprob: -14.88733196258545
    10. ' ,' → logprob: -15.01233196258545

Token 7: ' %' (ID: 1851)
  Prédit: ' >'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' >' → logprob: -0.07937021553516388
    2. ' ' → logprob: -3.0793702602386475
    3. '>' → logprob: -4.954370021820068
    4. ' >=' → logprob: -5.079370021820068
    5. ' ==' → logprob: -5.204370021820068
    6. ' %' → logprob: -5.329370021820068
    7. ' <' → logprob: -5.454370021820068
    8. ' <=' → logprob: -6.579370021820068
    9. '%' → logprob: -8.329370498657227
    10. '  ' → logprob: -8.454370498657227

Token 8: ' ' (ID: 220)
  Prédit: ' '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' ' → logprob: -0.11285564303398132
    2. '2' → logprob: -2.2378556728363037
    3. '```' → logprob: -11.362855911254883
    4. '3' → logprob: -11.862855911254883
    5. '4' → logprob: -11.987855911254883
    6. '1' → logprob: -12.612855911254883
    7. '32' → logprob: -13.237855911254883
    8. ' ' → logprob: -14.237855911254883
    9. ' ```' → logprob: -14.237855911254883
    10. ')' → logprob: -15.112855911254883

Token 9: '2' (ID: 17)
  Prédit: '2'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '2' → logprob: -0.00011689399980241433
    2. '3' → logprob: -9.250117301940918
    3. '4' → logprob: -11.625117301940918
    4. ' ' → logprob: -12.125117301940918
    5. '1' → logprob: -12.875117301940918
    6. '5' → logprob: -13.250117301940918
    7. '10' → logprob: -13.750117301940918
    8. '```' → logprob: -14.750117301940918
    9. '7' → logprob: -14.875117301940918
    10. '6' → logprob: -16.7501163482666

Token 10: ' ==' (ID: 951)
  Prédit: ' =='
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' ==' → logprob: -0.2002498358488083
    2. ' !=' → logprob: -2.3252499103546143
    3. '==' → logprob: -2.5752499103546143
    4. '!=' → logprob: -5.325249671936035
    5. '=' → logprob: -6.950249671936035
    6. ' =' → logprob: -7.575249671936035
    7. ' ' → logprob: -7.700249671936035
    8. ':' → logprob: -8.450249671936035
    9. '!' → logprob: -8.575249671936035
    10. ')' → logprob: -9.200249671936035

Token 11: ' ' (ID: 220)
  Prédit: ' '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' ' → logprob: -0.04859611392021179
    2. '0' → logprob: -3.048596143722534
    3. '1' → logprob: -12.048596382141113
    4. ' ' → logprob: -13.298596382141113
    5. '2' → logprob: -13.923596382141113
    6. '```' → logprob: -16.548595428466797
    7. ''' → logprob: -16.673595428466797
    8. '"' → logprob: -16.798595428466797
    9. '3' → logprob: -16.798595428466797
    10. '4' → logprob: -17.673595428466797

Token 12: '0' (ID: 15)
  Prédit: '0'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '0' → logprob: -0.16027681529521942
    2. ' ' → logprob: -1.9102767705917358
    3. '1' → logprob: -9.910276412963867
    4. '2' → logprob: -12.785276412963867
    5. ' ' → logprob: -16.535276412963867
    6. '  ' → logprob: -17.160276412963867
    7. '```' → logprob: -17.285276412963867
    8. '3' → logprob: -17.535276412963867
    9. ')' → logprob: -18.410276412963867
    10. '4' → logprob: -18.910276412963867

Token 13: ':
' (ID: 734)
  Prédit: ':'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ':' → logprob: -9.253090865968261e-06
    2. ':**' → logprob: -12.625009536743164
    3. ' :' → logprob: -13.000009536743164
    4. '':' → logprob: -13.875009536743164
    5. '':'' → logprob: -13.875009536743164
    6. '):' → logprob: -14.375009536743164
    7. '>:' → logprob: -15.000009536743164
    8. ':
' → logprob: -15.625009536743164
    9. '":"' → logprob: -15.750009536743164
    10. '":' → logprob: -16.125009536743164

Token 14: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.0710730329155922
    2. ' print' → logprob: -2.696073055267334
    3. 'print' → logprob: -6.946073055267334
    4. '\n' → logprob: -9.821072578430176
    5. '    
' → logprob: -10.196072578430176
    6. '	print' → logprob: -10.946072578430176
    7. ' ' → logprob: -11.196072578430176
    8. '    ' → logprob: -11.321072578430176
    9. '\' → logprob: -11.446072578430176
    10. '   ' → logprob: -11.571072578430176

Token 15: ' result' (ID: 1534)
  Prédit: ' print'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' print' → logprob: -0.14304396510124207
    2. '   ' → logprob: -2.2680439949035645
    3. 'print' → logprob: -3.5180439949035645
    4. '```' → logprob: -10.643043518066406
    5. '    ' → logprob: -10.768043518066406
    6. '       ' → logprob: -11.018043518066406
    7. '\n' → logprob: -11.143043518066406
    8. '\' → logprob: -11.518043518066406
    9. ' ' → logprob: -12.018043518066406
    10. '`' → logprob: -12.018043518066406

Token 16: ' =' (ID: 314)
  Prédit: ' ='
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' =' → logprob: -0.050840385258197784
    2. '=' → logprob: -3.050840377807617
    3. ' ' → logprob: -6.300840377807617
    4. ' +=' → logprob: -8.050840377807617
    5. ')' → logprob: -10.550840377807617
    6. ' ==' → logprob: -11.550840377807617
    7. '_' → logprob: -11.550840377807617
    8. '(' → logprob: -11.675840377807617
    9. '[' → logprob: -12.425840377807617
    10. ' =
' → logprob: -12.550840377807617

Token 17: ' n' (ID: 297)
  Prédit: '"'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '"' → logprob: -0.31048333644866943
    2. ' "' → logprob: -1.6854833364486694
    3. ' n' → logprob: -2.685483455657959
    4. 'n' → logprob: -5.185483455657959
    5. ''' → logprob: -5.310483455657959
    6. ' '' → logprob: -6.060483455657959
    7. ''n' → logprob: -8.3104829788208
    8. ' ' → logprob: -9.1854829788208
    9. ''s' → logprob: -10.1854829788208
    10. ' True' → logprob: -10.5604829788208

Token 18: ' //' (ID: 602)
  Prédit: ' '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' ' → logprob: -0.5277284383773804
    2. ' *' → logprob: -1.7777284383773804
    3. '*' → logprob: -2.52772855758667
    4. '+' → logprob: -3.15272855758667
    5. ' +' → logprob: -3.52772855758667
    6. ' else' → logprob: -3.90272855758667
    7. ' //' → logprob: -4.02772855758667
    8. '%' → logprob: -4.65272855758667
    9. ' %' → logprob: -4.77772855758667
    10. 'else' → logprob: -4.90272855758667

Token 19: ' ' (ID: 220)
  Prédit: '2'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '2' → logprob: -0.003177952254191041
    2. ' ' → logprob: -5.753178119659424
    3. '```' → logprob: -15.753177642822266
    4. ' ' → logprob: -17.128177642822266
    5. '۲' → logprob: -17.628177642822266
    6. '   ' → logprob: -17.878177642822266
    7. '２' → logprob: -17.878177642822266
    8. '3' → logprob: -18.003177642822266
    9. '4' → logprob: -18.003177642822266
    10. '  ' → logprob: -18.253177642822266

Token 20: '2' (ID: 17)
  Prédit: '2'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '2' → logprob: -1.688212614681106e-05
    2. ' ' → logprob: -11.000017166137695
    3. '```' → logprob: -17.125017166137695
    4. '   ' → logprob: -17.750017166137695
    5. '  ' → logprob: -18.500017166137695
    6. '4' → logprob: -18.750017166137695
    7. '1' → logprob: -18.875017166137695
    8. '3' → logprob: -18.875017166137695
    9. '۲' → logprob: -19.125017166137695
    10. '２' → logprob: -19.937517166137695

Token 21: ' -' (ID: 533)
  Prédit: 'else'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'else' → logprob: -0.006786535494029522
    2. ' else' → logprob: -5.131786346435547
    3. '\n' → logprob: -7.881786346435547
    4. '
' → logprob: -8.131786346435547
    5. '```' → logprob: -10.131786346435547
    6. '    
' → logprob: -10.506786346435547
    7. '*' → logprob: -10.631786346435547
    8. ' 
' → logprob: -11.256786346435547
    9. '   ' → logprob: -11.256786346435547
    10. '\' → logprob: -11.506786346435547

Token 22: ' ' (ID: 220)
  Prédit: '1'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '1' → logprob: -0.018152983859181404
    2. ' ' → logprob: -4.018153190612793
    3. '2' → logprob: -13.643153190612793
    4. '0' → logprob: -13.768153190612793
    5. '3' → logprob: -15.268153190612793
    6. '4' → logprob: -16.143152236938477
    7. '5' → logprob: -16.330652236938477
    8. '(' → logprob: -16.455652236938477
    9. '  ' → logprob: -16.705652236938477
    10. '10' → logprob: -17.268152236938477

Token 23: '1' (ID: 16)
  Prédit: '1'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '1' → logprob: -3.547789674485102e-05
    2. ' ' → logprob: -10.375035285949707
    3. '2' → logprob: -12.875035285949707
    4. '0' → logprob: -14.125035285949707
    5. '(' → logprob: -15.125035285949707
    6. '   ' → logprob: -15.625035285949707
    7. '3' → logprob: -16.250036239624023
    8. '10' → logprob: -16.875036239624023
    9. '```' → logprob: -16.875036239624023
    10. '4' → logprob: -16.937536239624023

Token 24: '
' (ID: 198)
  Prédit: 'else'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'else' → logprob: -0.13049344718456268
    2. '
' → logprob: -3.005493402481079
    3. '\n' → logprob: -3.005493402481079
    4. ' else' → logprob: -4.130493640899658
    5. '```' → logprob: -5.630493640899658
    6. '\' → logprob: -7.255493640899658
    7. ':' → logprob: -7.380493640899658
    8. '    
' → logprob: -7.505493640899658
    9. '  
' → logprob: -8.1304931640625
    10. ':
' → logprob: -8.3804931640625

Token 25: 'else' (ID: 2807)
  Prédit: 'else'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'else' → logprob: -0.06809118390083313
    2. '\n' → logprob: -3.1930911540985107
    3. '
' → logprob: -4.56809139251709
    4. ' else' → logprob: -4.69309139251709
    5. '```' → logprob: -6.06809139251709
    6. '\' → logprob: -7.44309139251709
    7. ':' → logprob: -7.69309139251709
    8. '    
' → logprob: -7.81809139251709
    9. '   ' → logprob: -7.81809139251709
    10. ':
' → logprob: -8.56809139251709

Token 26: ':
' (ID: 734)
  Prédit: ':'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ':' → logprob: -9.889424836728722e-05
    2. ':
' → logprob: -9.250099182128906
    3. ' :' → logprob: -13.125099182128906
    4. '   ' → logprob: -15.625099182128906
    5. ':
' → logprob: -16.000099182128906
    6. '):' → logprob: -16.125099182128906
    7. ':return' → logprob: -16.500099182128906
    8. ':

' → logprob: -16.625099182128906
    9. ':**' → logprob: -16.875099182128906
    10. '':' → logprob: -17.375099182128906

Token 27: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.005910073406994343
    2. '\n' → logprob: -6.2559099197387695
    3. '    ' → logprob: -6.8809099197387695
    4. '1' → logprob: -7.3809099197387695
    5. ' ' → logprob: -7.6309099197387695
    6. '    
' → logprob: -8.38090991973877
    7. 'n' → logprob: -8.38090991973877
    8. ''' → logprob: -8.50590991973877
    9. ' n' → logprob: -8.50590991973877
    10. '```' → logprob: -8.63090991973877

Token 28: ' result' (ID: 1534)
  Prédit: ' n'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' n' → logprob: -1.035408854484558
    2. ' result' → logprob: -1.035408854484558
    3. '   ' → logprob: -1.535408854484558
    4. 'result' (adapté à ' result') → logprob: -3.4104089736938477
    5. 'n' → logprob: -3.5354089736938477
    6. ' ' → logprob: -4.910408973693848
    7. '1' → logprob: -6.160408973693848
    8. '0' → logprob: -7.535408973693848
    9. '(n' → logprob: -7.785408973693848
    10. '\n' → logprob: -7.785408973693848

Token 29: ' =' (ID: 314)
  Prédit: ' ='
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' =' → logprob: -0.04704057797789574
    2. '=' → logprob: -3.1720404624938965
    3. ' ' → logprob: -5.6720404624938965
    4. ' +=' → logprob: -7.5470404624938965
    5. '+' → logprob: -10.672040939331055
    6. ' +' → logprob: -11.172040939331055
    7. ')' → logprob: -11.797040939331055
    8. '+=' → logprob: -12.172040939331055
    9. ' ==' → logprob: -12.797040939331055
    10. ' *=' → logprob: -13.047040939331055

Token 30: ' (' (ID: 350)
  Prédit: ' n'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' n' → logprob: -0.038643110543489456
    2. 'n' → logprob: -3.2886431217193604
    3. ' (' → logprob: -7.788642883300781
    4. '(n' → logprob: -9.038642883300781
    5. ' ' → logprob: -10.038642883300781
    6. '(' → logprob: -11.538642883300781
    7. '0' → logprob: -12.038642883300781
    8. '   ' → logprob: -12.538642883300781
    9. ' ' → logprob: -14.038642883300781
    10. '3' → logprob: -14.163642883300781

Token 31: 'n' (ID: 77)
  Prédit: 'n'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'n' → logprob: -0.2814629375934601
    2. ' n' → logprob: -1.4064629077911377
    3. ' (' → logprob: -8.781462669372559
    4. '(n' → logprob: -8.906462669372559
    5. '   ' → logprob: -11.281462669372559
    6. ' ' → logprob: -12.281462669372559
    7. ')n' → logprob: -12.906462669372559
    8. '(' → logprob: -13.531462669372559
    9. ')' → logprob: -13.906462669372559
    10. '3' → logprob: -15.156462669372559

Token 32: ' -' (ID: 533)
  Prédit: ' //'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' //' → logprob: -1.2825578451156616
    2. ' +' → logprob: -1.2825578451156616
    3. ' ' → logprob: -1.4075578451156616
    4. ' -' → logprob: -1.9075578451156616
    5. ' )' → logprob: -3.782557964324951
    6. ')' → logprob: -4.407557964324951
    7. '+' → logprob: -4.657557964324951
    8. '-' → logprob: -5.032557964324951
    9. ' %' → logprob: -8.157557487487793
    10. ' ' → logprob: -8.782557487487793

Token 33: ' ' (ID: 220)
  Prédit: '1'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '1' → logprob: -0.033650077879428864
    2. ' ' → logprob: -3.4086501598358154
    3. '   ' → logprob: -13.158650398254395
    4. '3' → logprob: -13.533650398254395
    5. '  ' → logprob: -15.033650398254395
    6. '    ' → logprob: -15.658650398254395
    7. ')' → logprob: -16.033649444580078
    8. '2' → logprob: -16.471149444580078
    9. '```' → logprob: -16.533649444580078
    10. '	' → logprob: -17.533649444580078

Token 34: '1' (ID: 16)
  Prédit: '1'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '1' → logprob: -5.5577775128767826e-06
    2. ' ' → logprob: -12.500005722045898
    3. '3' → logprob: -13.875005722045898
    4. '2' → logprob: -14.250005722045898
    5. ')' → logprob: -16.0000057220459
    6. '0' → logprob: -17.1250057220459
    7. '   ' → logprob: -17.2500057220459
    8. '```' → logprob: -17.8125057220459
    9. '4' → logprob: -18.5625057220459
    10. '5' → logprob: -18.5625057220459

Token 35: ')' (ID: 8)
  Prédit: ')'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')' → logprob: -0.0001114106344175525
    2. ')//' → logprob: -9.75011157989502
    3. ' )' → logprob: -9.87511157989502
    4. '//' → logprob: -14.12511157989502
    5. '）' → logprob: -15.50011157989502
    6. '   ' → logprob: -15.87511157989502
    7. ' ' → logprob: -15.87511157989502
    8. '```' → logprob: -16.000110626220703
    9. ' //' → logprob: -16.125110626220703
    10. '`)' → logprob: -16.375110626220703

Token 36: ' //' (ID: 602)
  Prédit: ' //'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' //' → logprob: -0.005978093016892672
    2. ')' → logprob: -5.255978107452393
    3. ' ' → logprob: -8.255977630615234
    4. '//' → logprob: -8.505977630615234
    5. '```' → logprob: -9.505977630615234
    6. ' )' → logprob: -10.005977630615234
    7. '"' → logprob: -10.630977630615234
    8. ' #' → logprob: -11.005977630615234
    9. ')//' → logprob: -11.255977630615234
    10. '`' → logprob: -11.380977630615234

Token 37: ' ' (ID: 220)
  Prédit: '2'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '2' → logprob: -0.0007104054093360901
    2. ' ' → logprob: -7.250710487365723
    3. '3' → logprob: -15.250710487365723
    4. '1' → logprob: -16.813209533691406
    5. '4' → logprob: -16.938209533691406
    6. ')' → logprob: -17.063209533691406
    7. '```' → logprob: -17.125709533691406
    8. '۲' → logprob: -17.813209533691406
    9. '２' → logprob: -18.063209533691406
    10. '   ' → logprob: -18.313209533691406

Token 38: '2' (ID: 17)
  Prédit: '2'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '2' → logprob: -3.650518920039758e-06
    2. ' ' → logprob: -12.625003814697266
    3. '1' → logprob: -15.750003814697266
    4. '```' → logprob: -16.125003814697266
    5. '3' → logprob: -17.437503814697266
    6. '   ' → logprob: -18.250003814697266
    7. '4' → logprob: -18.250003814697266
    8. '۲' → logprob: -18.437503814697266
    9. ')' → logprob: -18.750003814697266
    10. '２' → logprob: -18.937503814697266

Token 39: '
' (ID: 198)
  Prédit: '\n'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '\n' → logprob: -0.1680353730916977
    2. '
' → logprob: -2.6680352687835693
    3. 'print' → logprob: -3.0430352687835693
    4. '\' → logprob: -4.043035507202148
    5. '<|end|>' → logprob: -4.668035507202148
    6. '```' → logprob: -5.043035507202148
    7. '  
' → logprob: -7.293035507202148
    8. ' ' → logprob: -7.793035507202148
    9. '#' → logprob: -7.918035507202148
    10. 'newline' → logprob: -8.043035507202148

Token 40: 'print' (ID: 1598)
  Prédit: 'print'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'print' → logprob: -0.23540551960468292
    2. '
' → logprob: -2.110405445098877
    3. '\n' → logprob: -2.610405445098877
    4. '<|end|>' → logprob: -4.860405445098877
    5. '```' → logprob: -6.485405445098877
    6. '\' → logprob: -6.485405445098877
    7. '#' → logprob: -6.735405445098877
    8. ')' → logprob: -6.860405445098877
    9. 'n' → logprob: -7.360405445098877
    10. ' ' → logprob: -7.735405445098877

Token 41: '(result' (ID: 8111)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(' → logprob: -0.0031803252641111612
    2. '(result' → logprob: -5.753180503845215
    3. '('' → logprob: -13.878180503845215
    4. '("("' → logprob: -14.003180503845215
    5. '()' → logprob: -15.378180503845215
    6. '(
' → logprob: -15.628180503845215
    7. ' (' → logprob: -15.753180503845215
    8. '(

' → logprob: -16.5031795501709
    9. '(`' → logprob: -16.8781795501709
    10. '((' → logprob: -17.0031795501709

Token 42: ')' (ID: 8)
  Prédit: ')'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')' → logprob: -1.9361264946837764e-07
    2. '))' → logprob: -17.375
    3. ' )' → logprob: -17.5
    4. ')`' → logprob: -17.625
    5. '`)' → logprob: -18.25
    6. ')
' → logprob: -18.5
    7. '')' → logprob: -18.625
    8. '```' → logprob: -20.75
    9. '}' → logprob: -21.0
    10. '）' → logprob: -21.0


RÉSUMÉ:
--------------------------------------------------------------------------------
Total des tokens analysés: 40
Tokens correctement prédits (1ère position, stricte): 20
Tokens correctement prédits (1ère position, avec adaptation): 20
Tokens correctement prédits (top 10): 36
Précision stricte (1ère position): 50.00%
Précision adaptée (1ère position): 50.00%
Précision (top 10): 90.00%
================================================================================
