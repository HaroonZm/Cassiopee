================================================================================
ANALYSE DE PRÉDICTION TOKEN PAR TOKEN (BATCH API)
Date: 2025-06-04 19:55:40
Modèle de tokenisation: gpt-4o-mini
================================================================================

SCRIPT ANALYSÉ:
--------------------------------------------------------------------------------
n, x = map(int, input().split())
L_list = list(map(int, input().split()))
D = 0
counter = 1
for L in L_list:
    D += L
    if D <= x:
        counter += 1
    else:
        break
print(counter)
--------------------------------------------------------------------------------

RÉSULTATS D'ANALYSE TOKEN PAR TOKEN:
--------------------------------------------------------------------------------
Token 0: 'n' (ID: 77)
  → Token d'amorce (pas de prédiction)

Token 1: ',' (ID: 11)
  → Token d'amorce (pas de prédiction)

Token 2: ' x' (ID: 1215)
  → Token d'amorce (pas de prédiction)

Token 3: ' =' (ID: 314)
  Prédit: '='
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '=' → logprob: -0.0236525796353817
    2. ' =' → logprob: -3.7736525535583496
    3. ',' → logprob: -7.89865255355835
    4. ' ' → logprob: -11.773653030395508
    5. '_' → logprob: -12.273653030395508
    6. '[' → logprob: -12.273653030395508
    7. '*' → logprob: -12.648653030395508
    8. '=

' → logprob: -12.773653030395508
    9. '.' → logprob: -13.273653030395508
    10. '=
' → logprob: -13.273653030395508

Token 4: ' map' (ID: 4014)
  Prédit: ' map'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' map' → logprob: -0.8302978873252869
    2. ' ' → logprob: -1.5802979469299316
    3. 'map' → logprob: -1.7052979469299316
    4. '0' → logprob: -2.4552979469299316
    5. ' input' → logprob: -3.0802979469299316
    6. 'input' → logprob: -3.2052979469299316
    7. '5' → logprob: -6.455297946929932
    8. '10' → logprob: -7.080297946929932
    9. '1' → logprob: -7.455297946929932
    10. 'int' → logprob: -7.955297946929932

Token 5: '(int' (ID: 2742)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(' → logprob: -0.03058488294482231
    2. '(lambda' → logprob: -4.280584812164307
    3. '<|end|>' → logprob: -4.405584812164307
    4. '```' → logprob: -6.280584812164307
    5. ')' → logprob: -7.905584812164307
    6. '<|end|>' → logprob: -8.030585289001465
    7. '[' → logprob: -8.030585289001465
    8. '(int' → logprob: -8.280585289001465
    9. '[int' → logprob: -8.655585289001465
    10. '<int' → logprob: -9.530585289001465

Token 6: ',' (ID: 11)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '(' → logprob: -0.653235137462616
    2. ')' → logprob: -1.0282351970672607
    3. '(input' → logprob: -2.7782351970672607
    4. '```' → logprob: -3.7782351970672607
    5. '(int' → logprob: -4.153234958648682
    6. ')(' → logprob: -5.028234958648682
    7. '(user' → logprob: -5.778234958648682
    8. '(str' → logprob: -6.528234958648682
    9. '`)' → logprob: -6.653234958648682
    10. '<|end|>' → logprob: -6.778234958648682

Token 7: ' input' (ID: 3422)
  Prédit: 'input'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'input' → logprob: -0.12720704078674316
    2. ' input' → logprob: -2.127207040786743
    3. '(input' → logprob: -8.252206802368164
    4. ')' → logprob: -11.127206802368164
    5. ',input' → logprob: -13.252206802368164
    6. '=input' → logprob: -14.127206802368164
    7. ' ' → logprob: -15.002206802368164
    8. '[input' → logprob: -15.377206802368164
    9. '<input' → logprob: -15.877206802368164
    10. ' )' → logprob: -16.377206802368164

Token 8: '().' (ID: 1454)
  Prédit: '())'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '())' → logprob: -0.6295098066329956
    2. '()' → logprob: -1.0045098066329956
    3. ')' → logprob: -3.379509925842285
    4. '(' → logprob: -3.379509925842285
    5. '().' → logprob: -4.629509925842285
    6. '('' → logprob: -5.004509925842285
    7. '(()' → logprob: -6.004509925842285
    8. '`()' → logprob: -6.254509925842285
    9. '();)' → logprob: -6.379509925842285
    10. '());' → logprob: -6.629509925842285

Token 9: 'split' (ID: 13627)
  Prédit: 'split'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'split' → logprob: -0.00014776040916331112
    2. 'strip' → logprob: -9.000147819519043
    3. ' split' → logprob: -10.875147819519043
    4. 'rstrip' → logprob: -13.000147819519043
    5. '(split' → logprob: -13.125147819519043
    6. ')' → logprob: -14.250147819519043
    7. 'spl' → logprob: -14.750147819519043
    8. 'read' → logprob: -17.000146865844727
    9. 's' → logprob: -17.500146865844727
    10. '_split' → logprob: -18.000146865844727

Token 10: '())
' (ID: 4574)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ')' → logprob: -0.05119699984788895
    2. '))' → logprob: -3.051197052001953
    3. '())' → logprob: -6.051197052001953
    4. '`)' → logprob: -9.051197052001953
    5. '()' → logprob: -10.051197052001953
    6. '()))' → logprob: -10.426197052001953
    7. '(' → logprob: -11.051197052001953
    8. ')`' → logprob: -11.176197052001953
    9. ')))' → logprob: -11.551197052001953
    10. '),' → logprob: -12.926197052001953

Token 11: 'L' (ID: 43)
  Prédit: '+'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '+' → logprob: -0.731988787651062
    2. '#' → logprob: -2.3569889068603516
    3. 'a' → logprob: -2.4819889068603516
    4. '\n' → logprob: -2.6069889068603516
    5. ',' → logprob: -3.1069889068603516
    6. '*' → logprob: -3.6069889068603516
    7. 'for' → logprob: -3.8569889068603516
    8. '`' → logprob: -3.9819889068603516
    9. '```' → logprob: -3.9819889068603516
    10. '+
' → logprob: -4.106988906860352

Token 12: '_list' (ID: 4162)
  Prédit: '['
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '[' → logprob: -0.8447677493095398
    2. '=' → logprob: -1.0947678089141846
    3. '.' → logprob: -1.8447678089141846
    4. ' =' → logprob: -4.0947675704956055
    5. ',' → logprob: -4.5947675704956055
    6. '[i' → logprob: -4.5947675704956055
    7. 'e' → logprob: -4.9697675704956055
    8. 'i' → logprob: -5.0947675704956055
    9. 'S' → logprob: -5.2197675704956055
    10. '.append' → logprob: -5.5947675704956055

Token 13: ' =' (ID: 314)
  Prédit: '['
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '[' → logprob: -0.35244810581207275
    2. '.' → logprob: -2.102447986602783
    3. '_' → logprob: -2.977447986602783
    4. '=' → logprob: -3.102447986602783
    5. ' =' → logprob: -3.227447986602783
    6. '[:]' → logprob: -4.477447986602783
    7. ')' → logprob: -4.602447986602783
    8. '[]' → logprob: -5.352447986602783
    9. 's' → logprob: -5.477447986602783
    10. '=[]' → logprob: -6.602447986602783

Token 14: ' list' (ID: 1562)
  Prédit: 'list'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'list' → logprob: -0.35421302914619446
    2. '[list' → logprob: -1.729212999343872
    3. '[]' → logprob: -2.854212999343872
    4. '[' → logprob: -3.854212999343872
    5. '[input' → logprob: -4.104213237762451
    6. ' list' → logprob: -4.229213237762451
    7. '[int' → logprob: -5.354213237762451
    8. ' [' → logprob: -5.479213237762451
    9. ' []' → logprob: -6.479213237762451
    10. 'input' → logprob: -9.104212760925293

Token 15: '(map' (ID: 16946)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '(' → logprob: -0.0014083284186199307
    2. '(range' → logprob: -6.626408100128174
    3. ' (' → logprob: -11.376408576965332
    4. '("("' → logprob: -11.626408576965332
    5. '(
' → logprob: -11.751408576965332
    6. '((' → logprob: -11.876408576965332
    7. '(

' → logprob: -12.126408576965332
    8. '(.' → logprob: -12.126408576965332
    9. '(int' → logprob: -12.626408576965332
    10. '```' → logprob: -12.626408576965332

Token 16: '(int' (ID: 2742)
  Prédit: '(int'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(int' → logprob: -0.0015703336102887988
    2. '(' → logprob: -6.501570224761963
    3. 'int' → logprob: -10.251570701599121
    4. '<int' → logprob: -11.001570701599121
    5. '=int' → logprob: -12.251570701599121
    6. '[int' → logprob: -12.626570701599121
    7. '(input' → logprob: -12.876570701599121
    8. '```' → logprob: -13.626570701599121
    9. ')' → logprob: -13.876570701599121
    10. '(str' → logprob: -14.251570701599121

Token 17: ',' (ID: 11)
  Prédit: ','
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ',' → logprob: -0.5847931504249573
    2. ',input' → logprob: -0.8347931504249573
    3. '(input' → logprob: -4.8347930908203125
    4. '(' → logprob: -7.3347930908203125
    5. ' ,' → logprob: -9.209793090820312
    6. 'input' → logprob: -10.334793090820312
    7. ',int' → logprob: -10.459793090820312
    8. ')' → logprob: -11.334793090820312
    9. '),' → logprob: -11.459793090820312
    10. ',(' → logprob: -11.959793090820312

Token 18: ' input' (ID: 3422)
  Prédit: 'input'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'input' → logprob: -0.6931519508361816
    2. ' input' → logprob: -0.6931519508361816
    3. ',input' → logprob: -13.193151473999023
    4. '(input' → logprob: -13.943151473999023
    5. '=input' → logprob: -14.318151473999023
    6. ')' → logprob: -14.818151473999023
    7. '	input' → logprob: -15.068151473999023
    8. 'list' → logprob: -15.818151473999023
    9. ' ' → logprob: -15.943151473999023
    10. '[input' → logprob: -16.193151473999023

Token 19: '().' (ID: 1454)
  Prédit: '().'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '().' → logprob: -0.0027803927659988403
    2. '()' → logprob: -6.127780437469482
    3. '(' → logprob: -7.627780437469482
    4. '()))' → logprob: -10.002779960632324
    5. '(.' → logprob: -10.877779960632324
    6. '())' → logprob: -11.127779960632324
    7. '(),' → logprob: -11.877779960632324
    8. ' ().' → logprob: -12.377779960632324
    9. '()));' → logprob: -12.502779960632324
    10. ')' → logprob: -12.627779960632324

Token 20: 'split' (ID: 13627)
  Prédit: 'split'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'split' → logprob: -2.5776860184123507e-06
    2. 'strip' → logprob: -13.12500286102295
    3. ' split' → logprob: -15.25000286102295
    4. '(split' → logprob: -15.37500286102295
    5. 'rstrip' → logprob: -17.125001907348633
    6. 'spl' → logprob: -18.000001907348633
    7. 'plit' → logprob: -20.500001907348633
    8. '.split' → logprob: -20.500001907348633
    9. 's' → logprob: -21.000001907348633
    10. ')' → logprob: -21.250001907348633

Token 21: '()))
' (ID: 24521)
  Prédit: '()))'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '()))' → logprob: -0.4879473149776459
    2. '))' → logprob: -1.2379473447799683
    3. '())' → logprob: -2.9879472255706787
    4. ')' → logprob: -3.2379472255706787
    5. '()' → logprob: -5.362947463989258
    6. '(' → logprob: -6.362947463989258
    7. ')))' → logprob: -11.237947463989258
    8. '()));' → logprob: -11.362947463989258
    9. '())))' → logprob: -11.862947463989258
    10. '()),' → logprob: -12.112947463989258

Token 22: 'D' (ID: 35)
  Prédit: 's'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 's' → logprob: -0.806022584438324
    2. 'for' → logprob: -1.8060226440429688
    3. 'sum' → logprob: -2.8060226440429688
    4. 'count' → logprob: -3.0560226440429688
    5. 'c' → logprob: -3.1810226440429688
    6. 'L' → logprob: -3.3060226440429688
    7. 'd' → logprob: -3.4310226440429688
    8. 'x' → logprob: -3.6810226440429688
    9. 'result' → logprob: -3.6810226440429688
    10. 'max' → logprob: -4.431022644042969

Token 23: ' =' (ID: 314)
  Prédit: '_'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_' → logprob: -0.4682444930076599
    2. '_list' → logprob: -1.7182445526123047
    3. ' =' → logprob: -2.4682445526123047
    4. '=' → logprob: -3.9682445526123047
    5. 'ef' → logprob: -3.9682445526123047
    6. '[i' → logprob: -4.718244552612305
    7. '.' → logprob: -4.843244552612305
    8. '[' → logprob: -4.968244552612305
    9. '_i' → logprob: -4.968244552612305
    10. 'i' → logprob: -5.093244552612305

Token 24: ' ' (ID: 220)
  Prédit: '{}'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '{}' → logprob: -0.011327678337693214
    2. ' {}' → logprob: -4.886327743530273
    3. '{' → logprob: -6.386327743530273
    4. 'dict' → logprob: -6.511327743530273
    5. '[]' → logprob: -8.636327743530273
    6. '[' → logprob: -8.636327743530273
    7. ' dict' → logprob: -9.761327743530273
    8. ' []' → logprob: -10.261327743530273
    9. ' [' → logprob: -10.761327743530273
    10. ' {' → logprob: -10.761327743530273

Token 25: '0' (ID: 15)
  Prédit: '{}'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '{}' → logprob: -0.014861159026622772
    2. '{' → logprob: -4.389861106872559
    3. 'dict' → logprob: -6.389861106872559
    4. '[]' → logprob: -8.014861106872559
    5. '[' → logprob: -9.264861106872559
    6. '{x' → logprob: -9.264861106872559
    7. 'default' → logprob: -9.889861106872559
    8. 'L' → logprob: -10.764861106872559
    9. '[L' → logprob: -11.139861106872559
    10. '[max' → logprob: -11.514861106872559

Token 26: '
' (ID: 198)
  Prédit: 'for'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'for' → logprob: -0.06747382134199142
    2. '
' → logprob: -3.067473888397217
    3. ' for' → logprob: -4.067473888397217
    4. '\n' → logprob: -7.317473888397217
    5. '' → logprob: -8.692473411560059
    6. '<|end|>' → logprob: -8.942473411560059
    7. 'max' → logprob: -9.192473411560059
    8. ' ' → logprob: -9.317473411560059
    9. ' 
' → logprob: -9.442473411560059
    10. 'x' → logprob: -9.692473411560059

Token 27: 'counter' (ID: 32128)
  Prédit: 'for'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'for' → logprob: -0.00017767686222214252
    2. 'f' → logprob: -9.125177383422852
    3. ' for' → logprob: -10.750177383422852
    4. 'i' → logprob: -11.250177383422852
    5. 'max' → logprob: -11.750177383422852
    6. 'd' → logprob: -12.000177383422852
    7. 'F' → logprob: -12.625177383422852
    8. '
' → logprob: -12.750177383422852
    9. 'x' → logprob: -12.875177383422852
    10. 'while' → logprob: -13.000177383422852

Token 28: ' =' (ID: 314)
  Prédit: ' +='
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' +=' → logprob: -0.4729127883911133
    2. ' =' → logprob: -1.3479127883911133
    3. ' ' → logprob: -2.5979127883911133
    4. '=' → logprob: -3.5979127883911133
    5. '+=' → logprob: -4.972912788391113
    6. '+' → logprob: -5.347912788391113
    7. '_' → logprob: -7.222912788391113
    8. '<|end|>' → logprob: -7.347912788391113
    9. '  ' → logprob: -7.472912788391113
    10. ')' → logprob: -7.847912788391113

Token 29: ' ' (ID: 220)
  Prédit: '0'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '0' → logprob: -0.08907283842563629
    2. ' ' → logprob: -2.4640729427337646
    3. '1' → logprob: -8.964073181152344
    4. '{}' → logprob: -12.589073181152344
    5. ' {}' → logprob: -14.464073181152344
    6. ' ' → logprob: -14.839073181152344
    7. 'n' → logprob: -15.401573181152344
    8. ' n' → logprob: -15.401573181152344
    9. '{' → logprob: -15.901573181152344
    10. ' defaultdict' → logprob: -16.776573181152344

Token 30: '1' (ID: 16)
  Prédit: '0'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '0' → logprob: -0.0022755081299692392
    2. ' ' → logprob: -6.627275466918945
    3. '1' → logprob: -7.002275466918945
    4. '{}' → logprob: -10.252275466918945
    5. 'n' → logprob: -13.377275466918945
    6. '{' → logprob: -14.252275466918945
    7. '-' → logprob: -14.627275466918945
    8. 'x' → logprob: -15.127275466918945
    9. '[]' → logprob: -15.377275466918945
    10. '2' → logprob: -16.002275466918945

Token 31: '
' (ID: 198)
  Prédit: ''
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False

Token 32: 'for' (ID: 1938)
  Prédit: 'for'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'for' → logprob: -0.08143261820077896
    2. ' for' → logprob: -2.706432580947876
    3. '
' → logprob: -6.081432819366455
    4. '<|end|>' → logprob: -6.706432819366455
    5. '\n' → logprob: -6.706432819366455
    6. '```' → logprob: -7.081432819366455
    7. ':' → logprob: -7.081432819366455
    8. ',' → logprob: -7.081432819366455
    9. '=' → logprob: -7.206432819366455
    10. 'while' → logprob: -7.456432819366455

Token 33: ' L' (ID: 451)
  Prédit: ' i'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' i' → logprob: -0.02352939546108246
    2. ' x' → logprob: -4.773529529571533
    3. ' _' → logprob: -4.773529529571533
    4. ' ' → logprob: -5.273529529571533
    5. ' L' → logprob: -7.523529529571533
    6. '_' → logprob: -8.398529052734375
    7. 'i' → logprob: -8.648529052734375
    8. ' item' → logprob: -9.773529052734375
    9. ' num' → logprob: -10.023529052734375
    10. '  ' → logprob: -10.273529052734375

Token 34: ' in' (ID: 306)
  Prédit: '_list'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_list' → logprob: -0.009121823124587536
    2. '_' → logprob: -4.759121894836426
    3. '[' → logprob: -8.259121894836426
    4. '[i' → logprob: -8.884121894836426
    5. '_i' → logprob: -10.259121894836426
    6. '[_' → logprob: -10.384121894836426
    7. ' _' → logprob: -11.009121894836426
    8. ' in' → logprob: -12.509121894836426
    9. '_counter' → logprob: -12.759121894836426
    10. ')' → logprob: -13.134121894836426

Token 35: ' L' (ID: 451)
  Prédit: 'L'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'L' → logprob: -0.17976513504981995
    2. ' L' → logprob: -1.8047651052474976
    3. ' range' → logprob: -11.679764747619629
    4. 'range' → logprob: -12.179764747619629
    5. '(L' → logprob: -13.679764747619629
    6. ' ' → logprob: -13.679764747619629
    7. ' ' → logprob: -14.179764747619629
    8. '(' → logprob: -14.742264747619629
    9. '_L' → logprob: -14.742264747619629
    10. 'List' → logprob: -14.929764747619629

Token 36: '_list' (ID: 4162)
  Prédit: '_list'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_list' → logprob: -3.643152740551159e-05
    2. '_' → logprob: -10.375036239624023
    3. '_:' → logprob: -13.250036239624023
    4. 's' → logprob: -13.375036239624023
    5. ':' → logprob: -13.500036239624023
    6. 'list' → logprob: -16.125036239624023
    7. ':_' → logprob: -16.500036239624023
    8. ' _' → logprob: -16.750036239624023
    9. '_l' → logprob: -16.875036239624023
    10. '_List' → logprob: -16.875036239624023

Token 37: ':
' (ID: 734)
  Prédit: ':'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ':' → logprob: -0.0004224515287205577
    2. ' :' → logprob: -7.875422477722168
    3. ':
' → logprob: -11.000422477722168
    4. '   ' → logprob: -12.125422477722168
    5. ',' → logprob: -12.250422477722168
    6. ':**' → logprob: -12.250422477722168
    7. '>' → logprob: -12.375422477722168
    8. '):' → logprob: -13.375422477722168
    9. ' if' → logprob: -13.875422477722168
    10. '>:' → logprob: -14.125422477722168

Token 38: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.33876433968544006
    2. ':' → logprob: -1.4637643098831177
    3. '<|end|>' → logprob: -3.4637644290924072
    4. ' if' → logprob: -4.213764190673828
    5. ' ' → logprob: -5.588764190673828
    6. ',' → logprob: -6.463764190673828
    7. 'if' → logprob: -6.588764190673828
    8. '    ' → logprob: -7.338764190673828
    9. '<|end|>' → logprob: -7.588764190673828
    10. '```' → logprob: -7.713764190673828

Token 39: ' D' (ID: 415)
  Prédit: '    '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '    ' → logprob: -0.7407447099685669
    2. ' ' → logprob: -1.240744709968567
    3. '   ' → logprob: -1.865744709968567
    4. ' if' → logprob: -3.3657445907592773
    5. '```' → logprob: -4.240744590759277
    6. '<|end|>' → logprob: -4.990744590759277
    7. ' 
' → logprob: -5.240744590759277
    8. '     
' → logprob: -5.365744590759277
    9. ' ```' → logprob: -5.990744590759277
    10. 'if' → logprob: -6.365744590759277

Token 40: ' +=' (ID: 2757)
  Prédit: ' +='
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' +=' → logprob: -0.1801263988018036
    2. '+=' → logprob: -1.805126428604126
    3. '=' → logprob: -9.430126190185547
    4. ' =' → logprob: -9.555126190185547
    5. ' *=' → logprob: -9.555126190185547
    6. '+' → logprob: -9.930126190185547
    7. ' -=' → logprob: -10.055126190185547
    8. '==' → logprob: -11.680126190185547
    9. ' ==' → logprob: -11.680126190185547
    10. '+=(' → logprob: -11.680126190185547

Token 41: ' L' (ID: 451)
  Prédit: 'L'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'L' → logprob: -0.40600380301475525
    2. ' L' → logprob: -1.1560038328170776
    3. 'x' → logprob: -4.281003952026367
    4. ' x' → logprob: -5.531003952026367
    5. '1' → logprob: -7.531003952026367
    6. ' ' → logprob: -8.531003952026367
    7. ' (' → logprob: -9.156003952026367
    8. ' abs' → logprob: -9.406003952026367
    9. '(L' → logprob: -9.531003952026367
    10. 'abs' → logprob: -9.531003952026367

Token 42: '
' (ID: 198)
  Prédit: ' if'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' if' → logprob: -0.8308702111244202
    2. ' ' → logprob: -1.7058701515197754
    3. 'if' → logprob: -2.2058701515197754
    4. '+' → logprob: -2.5808701515197754
    5. '*' → logprob: -2.8308701515197754
    6. '   ' → logprob: -3.3308701515197754
    7. ' *' → logprob: -3.4558701515197754
    8. '<|end|>' → logprob: -4.205870151519775
    9. ' +' → logprob: -4.455870151519775
    10. '    ' → logprob: -4.955870151519775

Token 43: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.6376404762268066
    2. ' if' → logprob: -1.0126404762268066
    3. 'if' → logprob: -3.2626404762268066
    4. ' ' → logprob: -3.7626404762268066
    5. '<|end|>' → logprob: -4.512640476226807
    6. '    
' → logprob: -4.637640476226807
    7. '    ' → logprob: -5.512640476226807
    8. ' 
' → logprob: -5.512640476226807
    9. '+' → logprob: -5.637640476226807
    10. '
' → logprob: -5.887640476226807

Token 44: ' if' (ID: 538)
  Prédit: ' if'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' if' → logprob: -0.036595143377780914
    2. 'if' (adapté à ' if') → logprob: -3.786595106124878
    3. '   ' → logprob: -4.911595344543457
    4. ' counter' → logprob: -5.536595344543457
    5. 'counter' → logprob: -6.536595344543457
    6. ' while' → logprob: -8.161595344543457
    7. ' ' → logprob: -9.411595344543457
    8. '    ' → logprob: -10.036595344543457
    9. 'while' → logprob: -11.036595344543457
    10. '_counter' → logprob: -11.536595344543457

Token 45: ' D' (ID: 415)
  Prédit: ' D'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' D' → logprob: -0.17493242025375366
    2. 'D' → logprob: -1.9249324798583984
    3. ' x' → logprob: -4.799932479858398
    4. 'x' → logprob: -5.424932479858398
    5. ' ' → logprob: -7.174932479858398
    6. ' L' → logprob: -7.549932479858398
    7. ' (' → logprob: -9.049932479858398
    8. ' n' → logprob: -9.549932479858398
    9. ' counter' → logprob: -9.549932479858398
    10. ' not' → logprob: -10.049932479858398

Token 46: ' <=' (ID: 5017)
  Prédit: ' >='
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' >=' → logprob: -0.8105937242507935
    2. '>=' → logprob: -0.9355937242507935
    3. ' >' → logprob: -2.685593605041504
    4. '>' → logprob: -2.935593605041504
    5. '==' → logprob: -4.685593605041504
    6. ' <=' → logprob: -4.685593605041504
    7. ' ==' → logprob: -4.810593605041504
    8. '%' → logprob: -5.060593605041504
    9. '<=' → logprob: -5.310593605041504
    10. ' %' → logprob: -6.435593605041504

Token 47: ' x' (ID: 1215)
  Prédit: 'x'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'x' → logprob: -0.22560898959636688
    2. ' x' → logprob: -1.6006089448928833
    3. ' ' → logprob: -9.100608825683594
    4. 'n' → logprob: -10.475608825683594
    5. ' n' → logprob: -10.975608825683594
    6. '   ' → logprob: -11.600608825683594
    7. 'X' → logprob: -12.850608825683594
    8. '	x' → logprob: -13.350608825683594
    9. ' ' → logprob: -13.413108825683594
    10. '100' → logprob: -13.475608825683594

Token 48: ':
' (ID: 734)
  Prédit: ':'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ':' → logprob: -0.009829049929976463
    2. ':
' → logprob: -4.634829044342041
    3. ' and' → logprob: -10.8848295211792
    4. '   ' → logprob: -11.0098295211792
    5. ':
' → logprob: -11.2598295211792
    6. ' :' → logprob: -11.5098295211792
    7. 'and' → logprob: -13.1348295211792
    8. ''s' → logprob: -13.3848295211792
    9. ':

' → logprob: -13.6348295211792
    10. ',' → logprob: -13.6348295211792

Token 49: '       ' (ID: 309)
  Prédit: ':'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ':' → logprob: -0.018667351454496384
    2. '   ' → logprob: -4.768667221069336
    3. ' :' → logprob: -5.643667221069336
    4. '       ' → logprob: -6.393667221069336
    5. ':
' → logprob: -6.768667221069336
    6. '    ' → logprob: -6.768667221069336
    7. ' counter' → logprob: -7.643667221069336
    8. 'counter' → logprob: -7.893667221069336
    9. ' ' → logprob: -8.143667221069336
    10. ':\' → logprob: -8.518667221069336

Token 50: ' counter' (ID: 9446)
  Prédit: 'counter'
  Correct (stricte): False
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'counter' (adapté à ' counter') → logprob: -0.04870114475488663
    2. ' counter' → logprob: -3.048701047897339
    3. '   ' → logprob: -9.798701286315918
    4. '	counter' → logprob: -10.548701286315918
    5. 'print' → logprob: -12.173701286315918
    6. '_counter' → logprob: -12.298701286315918
    7. '[counter' → logprob: -12.423701286315918
    8. ' ' → logprob: -12.548701286315918
    9. '    ' → logprob: -13.048701286315918
    10. '       ' → logprob: -13.173701286315918

Token 51: ' +=' (ID: 2757)
  Prédit: '+='
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '+=' → logprob: -0.5243059396743774
    2. ' +=' → logprob: -0.8993059396743774
    3. '+' → logprob: -7.024305820465088
    4. '=' → logprob: -8.399306297302246
    5. ' +' → logprob: -11.149306297302246
    6. '++' → logprob: -11.399306297302246
    7. ' =' → logprob: -11.649306297302246
    8. ' ' → logprob: -11.774306297302246
    9. ' *=' → logprob: -11.774306297302246
    10. '*' → logprob: -12.774306297302246

Token 52: ' ' (ID: 220)
  Prédit: '1'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '1' → logprob: -0.004078997299075127
    2. ' ' → logprob: -5.5040788650512695
    3. '0' → logprob: -15.25407886505127
    4. '   ' → logprob: -16.629079818725586
    5. '2' → logprob: -17.004079818725586
    6. 'L' → logprob: -17.316579818725586
    7. 'n' → logprob: -17.754079818725586
    8. '10' → logprob: -17.754079818725586
    9. 'counter' → logprob: -17.816579818725586
    10. '-' → logprob: -17.941579818725586

Token 53: '1' (ID: 16)
  Prédit: '1'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '1' → logprob: -3.619311974034645e-05
    2. ' ' → logprob: -10.250036239624023
    3. '0' → logprob: -14.875036239624023
    4. 'L' → logprob: -15.500036239624023
    5. '2' → logprob: -16.375036239624023
    6. '10' → logprob: -18.125036239624023
    7. '-' → logprob: -18.312536239624023
    8. 'n' → logprob: -18.500036239624023
    9. '4' → logprob: -18.562536239624023
    10. 'D' → logprob: -18.687536239624023

Token 54: '
' (ID: 198)
  Prédit: 'else'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'else' → logprob: -0.4531767964363098
    2. ' else' → logprob: -1.078176736831665
    3. 'print' → logprob: -4.453176975250244
    4. '<|end|>' → logprob: -4.453176975250244
    5. '```' → logprob: -8.203176498413086
    6. '\n' → logprob: -8.953176498413086
    7. ' ' → logprob: -9.328176498413086
    8. 'elif' → logprob: -9.328176498413086
    9. '   ' → logprob: -9.953176498413086
    10. '    ' → logprob: -10.203176498413086

Token 55: '   ' (ID: 271)
  Prédit: 'else'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'else' → logprob: -0.17642107605934143
    2. ' else' → logprob: -2.0514211654663086
    3. 'print' → logprob: -3.5514211654663086
    4. '<|end|>' → logprob: -5.676421165466309
    5. 'elif' → logprob: -7.676421165466309
    6. '```' → logprob: -8.676421165466309
    7. '    ' → logprob: -9.051421165466309
    8. '   ' → logprob: -9.426421165466309
    9. ' ' → logprob: -9.801421165466309
    10. ' print' → logprob: -10.176421165466309

Token 56: ' else' (ID: 1203)
  Prédit: 'else'
  Correct (stricte): False
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'else' (adapté à ' else') → logprob: -0.09694352746009827
    2. ' else' → logprob: -2.4719436168670654
    3. 'print' → logprob: -4.846943378448486
    4. 'elif' → logprob: -10.096943855285645
    5. '```' → logprob: -10.596943855285645
    6. '<|end|>' → logprob: -10.596943855285645
    7. ' print' → logprob: -11.846943855285645
    8. '	else' → logprob: -12.221943855285645
    9. ' ' → logprob: -13.096943855285645
    10. '#' → logprob: -13.221943855285645

Token 57: ':
' (ID: 734)
  Prédit: ':'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ':' → logprob: -0.008510792627930641
    2. '       ' → logprob: -4.883510589599609
    3. '   ' → logprob: -7.258510589599609
    4. ':
' → logprob: -9.25851058959961
    5. '    ' → logprob: -9.88351058959961
    6. ' :' → logprob: -10.63351058959961
    7. '     ' → logprob: -11.75851058959961
    8. '      ' → logprob: -12.50851058959961
    9. '           ' → logprob: -12.88351058959961
    10. ' break' → logprob: -12.88351058959961

Token 58: '       ' (ID: 309)
  Prédit: '       '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '       ' → logprob: -0.036031387746334076
    2. 'break' → logprob: -3.661031484603882
    3. '   ' → logprob: -5.036031246185303
    4. ' break' → logprob: -5.786031246185303
    5. '	break' → logprob: -9.536031723022461
    6. '```' → logprob: -10.536031723022461
    7. '           ' → logprob: -12.036031723022461
    8. ' ' → logprob: -13.036031723022461
    9. '_break' → logprob: -13.411031723022461
    10. '    ' → logprob: -13.911031723022461

Token 59: ' break' (ID: 2338)
  Prédit: 'break'
  Correct (stricte): False
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'break' (adapté à ' break') → logprob: -0.011202137917280197
    2. ' break' → logprob: -4.511202335357666
    3. '       ' → logprob: -9.261201858520508
    4. '   ' → logprob: -10.136201858520508
    5. '```' → logprob: -11.511201858520508
    6. '	break' → logprob: -11.636201858520508
    7. '_break' → logprob: -15.386201858520508
    8. 'b' → logprob: -15.886201858520508
    9. 'Break' → logprob: -16.136201858520508
    10. '           ' → logprob: -16.386201858520508

Token 60: '
' (ID: 198)
  Prédit: 'print'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'print' → logprob: -3.2855416066013277e-05
    2. ')' → logprob: -10.875032424926758
    3. ' print' → logprob: -11.250032424926758
    4. '```' → logprob: -15.500032424926758
    5. '(print' → logprob: -15.625032424926758
    6. '.print' → logprob: -16.000032424926758
    7. 'pr' → logprob: -16.875032424926758
    8. '#print' → logprob: -17.250032424926758
    9. ',' → logprob: -17.375032424926758
    10. '-print' → logprob: -17.750032424926758

Token 61: 'print' (ID: 1598)
  Prédit: 'print'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'print' → logprob: -7.183501293184236e-05
    2. ')' → logprob: -9.87507152557373
    3. ' print' → logprob: -10.87507152557373
    4. '(print' → logprob: -15.12507152557373
    5. '```' → logprob: -15.37507152557373
    6. '.print' → logprob: -15.50007152557373
    7. '
' → logprob: -15.50007152557373
    8. ',' → logprob: -15.75007152557373
    9. ')
' → logprob: -16.125072479248047
    10. '<|end|>' → logprob: -17.000072479248047

Token 62: '(counter' (ID: 85625)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(' → logprob: -0.6931651830673218
    2. '(counter' → logprob: -0.6931651830673218
    3. '()' → logprob: -11.568164825439453
    4. '(C' → logprob: -13.193164825439453
    5. '((' → logprob: -13.318164825439453
    6. '(c' → logprob: -13.693164825439453
    7. '('' → logprob: -13.943164825439453
    8. '(count' → logprob: -14.068164825439453
    9. 'counter' → logprob: -15.193164825439453
    10. '(D' → logprob: -15.318164825439453

Token 63: ')' (ID: 8)
  Prédit: ')'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')' → logprob: -1.0280383548888494e-06
    2. ' )' → logprob: -14.125000953674316
    3. '))' → logprob: -15.750000953674316
    4. ')`' → logprob: -16.875001907348633
    5. '`)' → logprob: -18.375001907348633
    6. '')' → logprob: -18.625001907348633
    7. '）' → logprob: -19.375001907348633
    8. ')**' → logprob: -19.500001907348633
    9. '()' → logprob: -19.625001907348633
    10. '(' → logprob: -19.625001907348633


RÉSUMÉ:
--------------------------------------------------------------------------------
Total des tokens analysés: 61
Tokens correctement prédits (1ère position, stricte): 17
Tokens correctement prédits (1ère position, avec adaptation): 20
Tokens correctement prédits (top 10): 46
Précision stricte (1ère position): 27.87%
Précision adaptée (1ère position): 32.79%
Précision (top 10): 75.41%
================================================================================
