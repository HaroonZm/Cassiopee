================================================================================
ANALYSE DE PRÉDICTION TOKEN PAR TOKEN (BATCH API)
Date: 2025-06-04 20:00:31
Modèle de tokenisation: gpt-4o-mini
================================================================================

SCRIPT ANALYSÉ:
--------------------------------------------------------------------------------
n, k = map(int, input().split())
s = list(input())
s[k-1] = s[k-1].lower()
i = 0
while i < n:
    print(s[i], end="")
    i += 1
--------------------------------------------------------------------------------

RÉSULTATS D'ANALYSE TOKEN PAR TOKEN:
--------------------------------------------------------------------------------
Token 0: 'n' (ID: 77)
  → Token d'amorce (pas de prédiction)

Token 1: ',' (ID: 11)
  → Token d'amorce (pas de prédiction)

Token 2: ' k' (ID: 372)
  → Token d'amorce (pas de prédiction)

Token 3: ' =' (ID: 314)
  Prédit: '='
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '=' → logprob: -0.029124746099114418
    2. ' =' → logprob: -3.7791247367858887
    3. ',' → logprob: -5.154124736785889
    4. ' ' → logprob: -10.779125213623047
    5. ')' → logprob: -11.154125213623047
    6. ';' → logprob: -11.904125213623047
    7. '.' → logprob: -11.904125213623047
    8. '=
' → logprob: -11.904125213623047
    9. '[' → logprob: -12.404125213623047
    10. ',
' → logprob: -12.654125213623047

Token 4: ' map' (ID: 4014)
  Prédit: ' map'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' map' → logprob: -0.2964531481266022
    2. ' ' → logprob: -1.7964531183242798
    3. 'map' → logprob: -2.6714532375335693
    4. ' input' → logprob: -4.67145299911499
    5. '0' → logprob: -4.92145299911499
    6. 'input' → logprob: -5.79645299911499
    7. ' n' → logprob: -7.29645299911499
    8. ' int' → logprob: -7.54645299911499
    9. '10' → logprob: -8.421453475952148
    10. 'int' → logprob: -9.296453475952148

Token 5: '(int' (ID: 2742)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(' → logprob: -0.41873982548713684
    2. '<|end|>' → logprob: -2.0437397956848145
    3. '(lambda' → logprob: -2.7937397956848145
    4. '(str' → logprob: -3.0437397956848145
    5. '(int' → logprob: -3.0437397956848145
    6. '```' → logprob: -3.2937397956848145
    7. '<|end|>' → logprob: -5.7937397956848145
    8. '[int' → logprob: -6.4187397956848145
    9. '[' → logprob: -6.6687397956848145
    10. '(token' → logprob: -6.6687397956848145

Token 6: ',' (ID: 11)
  Prédit: '(input'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '(input' → logprob: -0.0447302907705307
    2. 'input' → logprob: -3.5447301864624023
    3. ')' → logprob: -4.419730186462402
    4. '(' → logprob: -6.294730186462402
    5. ' input' → logprob: -8.044730186462402
    6. '```' → logprob: -8.169730186462402
    7. '`' → logprob: -9.669730186462402
    8. ',input' → logprob: -9.669730186462402
    9. '(int' → logprob: -9.794730186462402
    10. '[input' → logprob: -10.294730186462402

Token 7: ' input' (ID: 3422)
  Prédit: 'input'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'input' → logprob: -0.3133276700973511
    2. ' input' → logprob: -1.313327670097351
    3. '(input' → logprob: -9.68832778930664
    4. ')' → logprob: -12.81332778930664
    5. ',input' → logprob: -14.18832778930664
    6. '=input' → logprob: -16.06332778930664
    7. '```' → logprob: -16.18832778930664
    8. '[input' → logprob: -16.56332778930664
    9. '<input' → logprob: -17.06332778930664
    10. '	input' → logprob: -17.81332778930664

Token 8: '().' (ID: 1454)
  Prédit: '())'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '())' → logprob: -1.2253601551055908
    2. '()' → logprob: -1.4753601551055908
    3. ')' → logprob: -1.7253601551055908
    4. '(' → logprob: -1.7253601551055908
    5. '('' → logprob: -3.100360155105591
    6. '```' → logprob: -3.850360155105591
    7. '().' → logprob: -4.100359916687012
    8. '`()' → logprob: -4.475359916687012
    9. '')' → logprob: -5.600359916687012
    10. '`)' → logprob: -5.600359916687012

Token 9: 'split' (ID: 13627)
  Prédit: 'split'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'split' → logprob: -0.0025116894394159317
    2. 'strip' → logprob: -6.002511501312256
    3. 'rstrip' → logprob: -10.877511978149414
    4. ' split' → logprob: -11.752511978149414
    5. 'read' → logprob: -12.252511978149414
    6. ')' → logprob: -12.502511978149414
    7. '(split' → logprob: -15.127511978149414
    8. 'spl' → logprob: -15.877511978149414
    9. ' strip' → logprob: -16.627511978149414
    10. 'startswith' → logprob: -16.752511978149414

Token 10: '())
' (ID: 4574)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ')' → logprob: -0.08386377990245819
    2. '())' → logprob: -2.9588637351989746
    3. '))' → logprob: -3.5838637351989746
    4. '()' → logprob: -7.708863735198975
    5. '()))' → logprob: -8.583864212036133
    6. '`)' → logprob: -9.458864212036133
    7. '(' → logprob: -10.958864212036133
    8. ')`' → logprob: -11.333864212036133
    9. '')' → logprob: -11.833864212036133
    10. ')))' → logprob: -11.833864212036133

Token 11: 's' (ID: 82)
  Prédit: '#'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '#' → logprob: -1.132415771484375
    2. '```' → logprob: -1.632415771484375
    3. '\n' → logprob: -2.382415771484375
    4. ''' → logprob: -2.507415771484375
    5. '\' → logprob: -2.882415771484375
    6. '<|end|>' → logprob: -3.257415771484375
    7. '[' → logprob: -3.632415771484375
    8. 'if' → logprob: -4.007415771484375
    9. 'for' → logprob: -4.007415771484375
    10. '*' → logprob: -4.132415771484375

Token 12: ' =' (ID: 314)
  Prédit: '['
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '[' → logprob: -0.028871851041913033
    2. '.' → logprob: -3.903871774673462
    3. '[:]' → logprob: -5.778872013092041
    4. '=' → logprob: -6.403872013092041
    5. '[:' → logprob: -6.903872013092041
    6. '[s' → logprob: -7.403872013092041
    7. ' =' → logprob: -8.153871536254883
    8. '\[' → logprob: -8.403871536254883
    9. '[]' → logprob: -8.528871536254883
    10. '[i' → logprob: -8.903871536254883

Token 13: ' list' (ID: 1562)
  Prédit: ' input'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' input' → logprob: -0.6330264210700989
    2. 'input' → logprob: -0.7580264210700989
    3. '""' → logprob: -9.133026123046875
    4. '"' → logprob: -9.508026123046875
    5. ' list' → logprob: -9.883026123046875
    6. ''' → logprob: -10.258026123046875
    7. 'list' → logprob: -10.258026123046875
    8. '[input' → logprob: -10.633026123046875
    9. '''' → logprob: -11.133026123046875
    10. ' ' → logprob: -11.258026123046875

Token 14: '(input' (ID: 10054)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(' → logprob: -0.0014284518547356129
    2. '(s' → logprob: -6.626428604125977
    3. '(range' → logprob: -10.626428604125977
    4. '('' → logprob: -10.876428604125977
    5. '(input' → logprob: -11.376428604125977
    6. 's' → logprob: -11.376428604125977
    7. '("("' → logprob: -11.751428604125977
    8. '()' → logprob: -12.126428604125977
    9. '(
' → logprob: -12.376428604125977
    10. '(str' → logprob: -12.876428604125977

Token 15: '())
' (ID: 4574)
  Prédit: '())'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '())' → logprob: -0.003000404452905059
    2. '()' → logprob: -5.878000259399414
    3. '().' → logprob: -9.128000259399414
    4. '()))' → logprob: -9.628000259399414
    5. ')' → logprob: -11.378000259399414
    6. ' ())' → logprob: -12.253000259399414
    7. '();)' → logprob: -13.378000259399414
    8. '()]' → logprob: -14.128000259399414
    9. '());' → logprob: -14.128000259399414
    10. '())))' → logprob: -15.253000259399414

Token 16: 's' (ID: 82)
  Prédit: 'for'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'for' → logprob: -0.6146690845489502
    2. '[' → logprob: -2.23966908454895
    3. 'i' → logprob: -2.73966908454895
    4. 'if' → logprob: -2.73966908454895
    5. '.' → logprob: -3.61466908454895
    6. ':' → logprob: -3.61466908454895
    7. 'n' → logprob: -3.61466908454895
    8. 's' → logprob: -3.61466908454895
    9. '```' → logprob: -3.73966908454895
    10. ' for' → logprob: -4.364668846130371

Token 17: '[k' (ID: 14298)
  Prédit: '['
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '[' → logprob: -0.024030784144997597
    2. '.' → logprob: -3.8990306854248047
    3. '\[' → logprob: -7.399030685424805
    4. '```' → logprob: -7.899030685424805
    5. '[
' → logprob: -8.024030685424805
    6. '[:]' → logprob: -8.149030685424805
    7. '[token' → logprob: -8.399030685424805
    8. '<|end|>' → logprob: -8.524030685424805
    9. '[n' → logprob: -8.774030685424805
    10. ''' → logprob: -9.149030685424805

Token 18: '-' (ID: 12)
  Prédit: ']'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ']' → logprob: -0.09048573672771454
    2. '-' → logprob: -3.0904858112335205
    3. ':]' → logprob: -3.7154858112335205
    4. ']=' → logprob: -5.090485572814941
    5. '=' → logprob: -5.965485572814941
    6. '<|end|>' → logprob: -6.090485572814941
    7. '[' → logprob: -6.590485572814941
    8. ':' → logprob: -6.840485572814941
    9. ' ]' → logprob: -7.465485572814941
    10. ':].' → logprob: -7.965485572814941

Token 19: '1' (ID: 16)
  Prédit: '1'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '1' → logprob: -9.849109119386412e-06
    2. ']' → logprob: -12.000009536743164
    3. ')' → logprob: -13.375009536743164
    4. ' ' → logprob: -13.625009536743164
    5. '```' → logprob: -15.375009536743164
    6. 'index' → logprob: -16.000009536743164
    7. 'replace' → logprob: -16.375009536743164
    8. '2' → logprob: -17.000009536743164
    9. '0' → logprob: -17.125009536743164
    10. '<|end|>' → logprob: -17.125009536743164

Token 20: ']' (ID: 60)
  Prédit: ']'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ']' → logprob: -0.014077115803956985
    2. ']=' → logprob: -5.139077186584473
    3. ' ]' → logprob: -5.514077186584473
    4. '=' → logprob: -5.639077186584473
    5. ' =' → logprob: -8.264077186584473
    6. '[' → logprob: -10.014077186584473
    7. ')' → logprob: -10.014077186584473
    8. '].' → logprob: -10.264077186584473
    9. '']' → logprob: -10.264077186584473
    10. ')]' → logprob: -10.764077186584473

Token 21: ' =' (ID: 314)
  Prédit: '='
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '=' → logprob: -0.008778362534940243
    2. ' =' → logprob: -4.8837785720825195
    3. '.lower' → logprob: -7.8837785720825195
    4. '.' → logprob: -8.00877857208252
    5. '='' → logprob: -9.00877857208252
    6. 'lower' → logprob: -9.50877857208252
    7. '.upper' → logprob: -9.63377857208252
    8. '=

' → logprob: -10.50877857208252
    9. '=s' → logprob: -10.63377857208252
    10. '.=' → logprob: -11.00877857208252

Token 22: ' s' (ID: 265)
  Prédit: 's'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 's' → logprob: -0.0032273868564516306
    2. ''s' → logprob: -5.753227233886719
    3. ''' → logprob: -10.253227233886719
    4. '"s' → logprob: -12.628227233886719
    5. ''a' → logprob: -13.753227233886719
    6. ' s' → logprob: -13.878227233886719
    7. 'str' → logprob: -14.003227233886719
    8. 'tolower' → logprob: -14.253227233886719
    9. 'chr' → logprob: -14.378227233886719
    10. '   ' → logprob: -14.378227233886719

Token 23: '[k' (ID: 14298)
  Prédit: '[k'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '[k' → logprob: -0.013462075032293797
    2. '[' → logprob: -4.763462066650391
    3. ''' → logprob: -6.388462066650391
    4. 's' → logprob: -7.138462066650391
    5. ''s' → logprob: -7.263462066650391
    6. '```' → logprob: -7.763462066650391
    7. '[key' → logprob: -8.13846206665039
    8. '"' → logprob: -8.51346206665039
    9. ''[' → logprob: -8.88846206665039
    10. '`' → logprob: -8.88846206665039

Token 24: '-' (ID: 12)
  Prédit: ':].'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ':].' → logprob: -0.5104645490646362
    2. '].' → logprob: -1.0104645490646362
    3. '.lower' → logprob: -4.135464668273926
    4. ''].' → logprob: -4.635464668273926
    5. '.upper' → logprob: -5.635464668273926
    6. ']' → logprob: -6.135464668273926
    7. '-' → logprob: -6.260464668273926
    8. ':' → logprob: -7.385464668273926
    9. ':]' → logprob: -7.635464668273926
    10. ' ].' → logprob: -8.135464668273926

Token 25: '1' (ID: 16)
  Prédit: '1'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '1' → logprob: -4.11996734328568e-05
    2. ' ' → logprob: -10.125041007995605
    3. '2' → logprob: -14.625041007995605
    4. 'k' → logprob: -16.250041961669922
    5. ')' → logprob: -16.375041961669922
    6. '１' → logprob: -16.750041961669922
    7. '```' → logprob: -16.875041961669922
    8. ''s' → logprob: -16.875041961669922
    9. ''' → logprob: -17.000041961669922
    10. 'len' → logprob: -17.125041961669922

Token 26: '].' (ID: 1651)
  Prédit: '.lower'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '.lower' → logprob: -0.03011329285800457
    2. '.upper' → logprob: -3.5301132202148438
    3. ').' → logprob: -9.030113220214844
    4. '.' → logprob: -9.280113220214844
    5. '.capitalize' → logprob: -9.905113220214844
    6. '].' → logprob: -10.030113220214844
    7. '.replace' → logprob: -10.655113220214844
    8. '.swap' → logprob: -11.655113220214844
    9. ''.' → logprob: -12.030113220214844
    10. '}.' → logprob: -12.155113220214844

Token 27: 'lower' (ID: 30330)
  Prédit: 'lower'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'lower' → logprob: -0.014909544959664345
    2. 'upper' → logprob: -4.514909744262695
    3. 'swap' → logprob: -5.764909744262695
    4. 'isl' → logprob: -7.264909744262695
    5. 'capitalize' → logprob: -11.639909744262695
    6. 'replace' → logprob: -11.889909744262695
    7. '.lower' → logprob: -13.389909744262695
    8. 'isdigit' → logprob: -14.139909744262695
    9. '.swap' → logprob: -15.014909744262695
    10. 'low' → logprob: -15.639909744262695

Token 28: '()
' (ID: 1234)
  Prédit: '()'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '()' → logprob: -0.029940707609057426
    2. '(' → logprob: -3.529940605163574
    3. '()`' → logprob: -9.654940605163574
    4. '`()' → logprob: -9.654940605163574
    5. '()(' → logprob: -11.404940605163574
    6. '```' → logprob: -11.529940605163574
    7. '`' → logprob: -12.404940605163574
    8. '()]' → logprob: -12.404940605163574
    9. '(

' → logprob: -12.529940605163574
    10. ']()' → logprob: -12.779940605163574

Token 29: 'i' (ID: 72)
  Prédit: 'print'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'print' → logprob: -0.004418963100761175
    2. ')' → logprob: -5.504418849945068
    3. '```' → logprob: -8.129419326782227
    4. ' print' → logprob: -11.379419326782227
    5. ']' → logprob: -11.629419326782227
    6. '#print' → logprob: -12.129419326782227
    7. '#' → logprob: -12.254419326782227
    8. '<|end|>' → logprob: -12.754419326782227
    9. '(print' → logprob: -12.879419326782227
    10. '``' → logprob: -13.254419326782227

Token 30: ' =' (ID: 314)
  Prédit: 'f'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'f' → logprob: -0.07988321036100388
    2. '=' → logprob: -2.954883098602295
    3. 'n' → logprob: -3.954883098602295
    4. 'nd' → logprob: -6.079883098602295
    5. '+' → logprob: -6.329883098602295
    6. 's' → logprob: -7.579883098602295
    7. '+=' → logprob: -8.079883575439453
    8. 'm' → logprob: -8.704883575439453
    9. ' =' → logprob: -8.704883575439453
    10. '++' → logprob: -8.954883575439453

Token 31: ' ' (ID: 220)
  Prédit: '0'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '0' → logprob: -0.14859424531459808
    2. 'k' → logprob: -2.0235941410064697
    3. ' k' → logprob: -5.898594379425049
    4. ' ' → logprob: -6.148594379425049
    5. '1' → logprob: -7.648594379425049
    6. 'n' → logprob: -8.14859390258789
    7. 'len' → logprob: -9.52359390258789
    8. 's' → logprob: -10.02359390258789
    9. ' len' → logprob: -10.77359390258789
    10. '-' → logprob: -10.89859390258789

Token 32: '0' (ID: 15)
  Prédit: '0'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '0' → logprob: -0.35075151920318604
    2. 'k' → logprob: -1.225751519203186
    3. 'len' → logprob: -7.2257513999938965
    4. 'n' → logprob: -7.7257513999938965
    5. '1' → logprob: -7.8507513999938965
    6. ' ' → logprob: -8.225751876831055
    7. 's' → logprob: -8.350751876831055
    8. 'max' → logprob: -9.725751876831055
    9. ' k' → logprob: -9.725751876831055
    10. '-' → logprob: -10.475751876831055

Token 33: '
' (ID: 198)
  Prédit: ''
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False

Token 34: 'while' (ID: 7032)
  Prédit: 'while'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'while' → logprob: -0.7157242298126221
    2. '<|end|>' → logprob: -0.8407242298126221
    3. ' while' → logprob: -3.465724229812622
    4. 'i' → logprob: -4.590723991394043
    5. ' ' → logprob: -4.715723991394043
    6. 'n' → logprob: -4.965723991394043
    7. '
' → logprob: -5.465723991394043
    8. '\n' → logprob: -5.465723991394043
    9. '```' → logprob: -5.465723991394043
    10. ')' → logprob: -6.215723991394043

Token 35: ' i' (ID: 575)
  Prédit: ' i'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' i' → logprob: -0.01604551263153553
    2. 'i' → logprob: -4.141045570373535
    3. ' n' → logprob: -12.641045570373535
    4. ' ' → logprob: -12.891045570373535
    5. ' s' → logprob: -13.266045570373535
    6. ' True' → logprob: -13.891045570373535
    7. '(i' → logprob: -14.016045570373535
    8. ' len' → logprob: -14.766045570373535
    9. '	i' → logprob: -14.891045570373535
    10. 'n' → logprob: -14.891045570373535

Token 36: ' <' (ID: 464)
  Prédit: ' <'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' <' → logprob: -0.062248650938272476
    2. '<' → logprob: -2.812248706817627
    3. ' ' → logprob: -8.812248229980469
    4. ' <=' → logprob: -9.937248229980469
    5. '<n' → logprob: -10.312248229980469
    6. '<len' → logprob: -10.437248229980469
    7. '<=' → logprob: -12.062248229980469
    8. ' !=' → logprob: -12.437248229980469
    9. '<int' → logprob: -13.937248229980469
    10. '<s' → logprob: -13.937248229980469

Token 37: ' n' (ID: 297)
  Prédit: 'k'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'k' → logprob: -0.7575005888938904
    2. 'len' → logprob: -0.7575005888938904
    3. 'n' → logprob: -2.882500648498535
    4. ' len' → logprob: -5.382500648498535
    5. ' n' → logprob: -7.007500648498535
    6. ' k' → logprob: -7.132500648498535
    7. ' ' → logprob: -11.132500648498535
    8. '(len' → logprob: -12.382500648498535
    9. '<len' → logprob: -12.882500648498535
    10. '=len' → logprob: -13.382500648498535

Token 38: ':
' (ID: 734)
  Prédit: ':'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ':' → logprob: -0.026790659874677658
    2. ' and' → logprob: -4.526790618896484
    3. ' :' → logprob: -4.776790618896484
    4. ':
' → logprob: -5.026790618896484
    5. ' :
' → logprob: -7.651790618896484
    6. 'and' → logprob: -9.401790618896484
    7. ' ' → logprob: -10.026790618896484
    8. '   ' → logprob: -11.151790618896484
    9. '+:' → logprob: -12.526790618896484
    10. '+' → logprob: -13.026790618896484

Token 39: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.5821874737739563
    2. ' if' → logprob: -1.0821874141693115
    3. ' i' → logprob: -3.3321874141693115
    4. ' print' → logprob: -3.4571874141693115
    5. ' s' → logprob: -4.332187652587891
    6. 'print' → logprob: -4.957187652587891
    7. 'if' → logprob: -5.207187652587891
    8. 's' → logprob: -5.457187652587891
    9. 'i' → logprob: -6.082187652587891
    10. ' ' → logprob: -6.707187652587891

Token 40: ' print' (ID: 2123)
  Prédit: 'if'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'if' → logprob: -0.11611945927143097
    2. 'print' (adapté à ' print') → logprob: -2.741119384765625
    3. ' if' → logprob: -3.366119384765625
    4. '   ' → logprob: -4.741119384765625
    5. 's' → logprob: -6.616119384765625
    6. ' print' → logprob: -8.491119384765625
    7. 'i' → logprob: -8.616119384765625
    8. ' ' → logprob: -9.866119384765625
    9. '```' → logprob: -10.491119384765625
    10. ' s' → logprob: -11.116119384765625

Token 41: '(s' (ID: 1858)
  Prédit: '(s'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(s' → logprob: -0.012237433344125748
    2. 's' → logprob: -4.512237548828125
    3. '(' → logprob: -6.762237548828125
    4. '(chr' → logprob: -11.137237548828125
    5. '('' → logprob: -11.387237548828125
    6. '(i' → logprob: -12.387237548828125
    7. '((' → logprob: -14.512237548828125
    8. 'chr' → logprob: -14.637237548828125
    9. '("' → logprob: -15.262237548828125
    10. '()' → logprob: -15.637237548828125

Token 42: '[i' (ID: 1768)
  Prédit: '[i'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '[i' → logprob: -3.054500666621607e-06
    2. '[' → logprob: -12.75000286102295
    3. ')' → logprob: -16.375003814697266
    4. '[
' → logprob: -17.500003814697266
    5. '[I' → logprob: -17.750003814697266
    6. '```' → logprob: -18.375003814697266
    7. 'i' → logprob: -19.000003814697266
    8. ')i' → logprob: -19.250003814697266
    9. '[end' → logprob: -20.625003814697266
    10. ')[' → logprob: -20.750003814697266

Token 43: '],' (ID: 2155)
  Prédit: '],'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '],' → logprob: -0.11679056286811829
    2. '),' → logprob: -2.616790533065796
    3. ',' → logprob: -3.366790533065796
    4. ')' → logprob: -6.241790771484375
    5. ',end' → logprob: -8.116790771484375
    6. '},' → logprob: -9.116790771484375
    7. '])' → logprob: -9.116790771484375
    8. ' ,' → logprob: -9.741790771484375
    9. '>,' → logprob: -9.866790771484375
    10. ']' → logprob: -10.241790771484375

Token 44: ' end' (ID: 1268)
  Prédit: 'end'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'end' → logprob: -0.005087175872176886
    2. ''',' → logprob: -6.005087375640869
    3. ' end' → logprob: -6.630087375640869
    4. ',end' → logprob: -7.130087375640869
    5. ')' → logprob: -8.130086898803711
    6. '''' → logprob: -9.880086898803711
    7. '"",' → logprob: -10.005086898803711
    8. ',' → logprob: -11.130086898803711
    9. 'sep' → logprob: -11.380086898803711
    10. '   ' → logprob: -11.630086898803711

Token 45: '="")
' (ID: 154840)
  Prédit: '=''
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '='' → logprob: -0.005984258372336626
    2. '=' → logprob: -5.255984306335449
    3. '="' → logprob: -7.380984306335449
    4. '=''' → logprob: -9.75598430633545
    5. ')' → logprob: -10.38098430633545
    6. '='')
' → logprob: -10.75598430633545
    7. ''' → logprob: -11.38098430633545
    8. '"' → logprob: -13.63098430633545
    9. ' '')' → logprob: -14.25598430633545
    10. ' ='' → logprob: -14.38098430633545

Token 46: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.3298942446708679
    2. '
' → logprob: -1.7048943042755127
    3. 'i' → logprob: -2.8298943042755127
    4. '\n' → logprob: -3.7048943042755127
    5. ' i' → logprob: -5.329894065856934
    6. '[i' → logprob: -5.579894065856934
    7. '    
' → logprob: -6.329894065856934
    8. ' ' → logprob: -7.204894065856934
    9. '  ' → logprob: -7.329894065856934
    10. '  
' → logprob: -7.454894065856934

Token 47: ' i' (ID: 575)
  Prédit: 'i'
  Correct (stricte): False
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'i' (adapté à ' i') → logprob: -0.0007233949727378786
    2. '   ' → logprob: -7.625723361968994
    3. 'if' → logprob: -8.875723838806152
    4. ' i' → logprob: -9.375723838806152
    5. '[i' → logprob: -12.625723838806152
    6. '	i' → logprob: -13.375723838806152
    7. ',i' → logprob: -13.875723838806152
    8. ' ' → logprob: -14.000723838806152
    9. '\' → logprob: -14.375723838806152
    10. '\n' → logprob: -14.375723838806152

Token 48: ' +=' (ID: 2757)
  Prédit: '+='
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '+=' → logprob: -0.38821348547935486
    2. '+' → logprob: -1.1382135152816772
    3. ' +=' → logprob: -6.888213634490967
    4. '=' → logprob: -8.138213157653809
    5. '++' → logprob: -11.138213157653809
    6. '+='' → logprob: -12.263213157653809
    7. '+++' → logprob: -12.388213157653809
    8. '+="' → logprob: -13.138213157653809
    9. '<|end|>' → logprob: -13.388213157653809
    10. '+)' → logprob: -13.638213157653809

Token 49: ' ' (ID: 220)
  Prédit: '1'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '1' → logprob: -6.2729995988775045e-06
    2. ' ' → logprob: -12.000006675720215
    3. '   ' → logprob: -19.3750057220459
    4. '0' → logprob: -19.8750057220459
    5. '```' → logprob: -20.5000057220459
    6. '+' → logprob: -21.0000057220459
    7. '１' → logprob: -21.0000057220459
    8. '  ' → logprob: -22.0000057220459
    9. '۱' → logprob: -22.5000057220459
    10. '2' → logprob: -23.1250057220459

Token 50: '1' (ID: 16)
  Prédit: '1'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '1' → logprob: -2.45848218582978e-06
    2. ' ' → logprob: -13.00000286102295
    3. '```' → logprob: -16.750001907348633
    4. '   ' → logprob: -17.250001907348633
    5. '+' → logprob: -18.250001907348633
    6. '0' → logprob: -18.625001907348633
    7. '１' → logprob: -19.375001907348633
    8. '  ' → logprob: -19.687501907348633
    9. '2' → logprob: -19.750001907348633
    10. '`' → logprob: -19.875001907348633


RÉSUMÉ:
--------------------------------------------------------------------------------
Total des tokens analysés: 48
Tokens correctement prédits (1ère position, stricte): 17
Tokens correctement prédits (1ère position, avec adaptation): 18
Tokens correctement prédits (top 10): 39
Précision stricte (1ère position): 35.42%
Précision adaptée (1ère position): 37.50%
Précision (top 10): 81.25%
================================================================================
