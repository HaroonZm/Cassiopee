================================================================================
ANALYSE DE PRÉDICTION TOKEN PAR TOKEN (BATCH API)
Date: 2025-06-04 20:11:40
Modèle de tokenisation: gpt-4o-mini
================================================================================

SCRIPT ANALYSÉ:
--------------------------------------------------------------------------------
def check(n):
    z = "No"
    for i in range((n//4)+1):
        if (n - 4*i) % 7 == 0:
            z = "Yes"
            break
    return z

def solve():
    get = lambda : int(input())
    res = check(get())
    print(res)

class Run:
    def __call__(self):
        solve()

if __name__ == '__main__': Run()()
--------------------------------------------------------------------------------

RÉSULTATS D'ANALYSE TOKEN PAR TOKEN:
--------------------------------------------------------------------------------
Token 0: 'def' (ID: 1314)
  → Token d'amorce (pas de prédiction)

Token 1: ' check' (ID: 2371)
  → Token d'amorce (pas de prédiction)

Token 2: '(n' (ID: 2406)
  → Token d'amorce (pas de prédiction)

Token 3: '):
' (ID: 1883)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ')' → logprob: -0.47784385085105896
    2. '):' → logprob: -0.9778438806533813
    3. '_' → logprob: -6.227843761444092
    4. ':' → logprob: -7.102843761444092
    5. 'u' → logprob: -7.727843761444092
    6. 'e' → logprob: -8.35284423828125
    7. 'a' → logprob: -9.72784423828125
    8. '=' → logprob: -10.72784423828125
    9. '(' → logprob: -10.85284423828125
    10. 'd' → logprob: -10.97784423828125

Token 4: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.5349197387695312
    2. ':' → logprob: -0.9099197387695312
    3. '```' → logprob: -5.034919738769531
    4. ' ' → logprob: -6.534919738769531
    5. '\' → logprob: -6.909919738769531
    6. '    ' → logprob: -7.159919738769531
    7. ''' → logprob: -7.534919738769531
    8. ' :' → logprob: -8.409919738769531
    9. ':
' → logprob: -8.534919738769531
    10. '    
' → logprob: -9.034919738769531

Token 5: ' z' (ID: 579)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.2548053562641144
    2. ' ' → logprob: -2.379805326461792
    3. ' if' → logprob: -3.254805326461792
    4. 'i' → logprob: -3.379805326461792
    5. '```' → logprob: -3.754805326461792
    6. ''' → logprob: -4.879805564880371
    7. ':' → logprob: -5.129805564880371
    8. 'if' → logprob: -5.504805564880371
    9. '    ' → logprob: -5.754805564880371
    10. ' i' → logprob: -6.129805564880371

Token 6: ' =' (ID: 314)
  Prédit: '='
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '=' → logprob: -0.03668661788105965
    2. ' =' → logprob: -4.661686420440674
    3. ' ' → logprob: -5.036686420440674
    4. '+' → logprob: -5.036686420440674
    5. 'a' → logprob: -5.661686420440674
    6. '[' → logprob: -6.161686420440674
    7. 'e' → logprob: -6.536686420440674
    8. '_' → logprob: -6.661686420440674
    9. 'o' → logprob: -7.036686420440674
    10. '   ' → logprob: -7.411686420440674

Token 7: ' "' (ID: 392)
  Prédit: ' n'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' n' → logprob: -0.46873846650123596
    2. '0' → logprob: -1.7187384366989136
    3. 'n' → logprob: -1.8437384366989136
    4. ' ' → logprob: -3.468738555908203
    5. ' []' → logprob: -5.593738555908203
    6. '[]' → logprob: -7.093738555908203
    7. '1' → logprob: -7.343738555908203
    8. ' [' → logprob: -10.093738555908203
    9. ' {}' → logprob: -10.218738555908203
    10. '{}' → logprob: -10.218738555908203

Token 8: 'No' (ID: 3160)
  Prédit: '"'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '"' → logprob: -0.3251371681690216
    2. ''' → logprob: -1.7001371383666992
    3. 'n' → logprob: -3.325137138366699
    4. ' "' → logprob: -4.075137138366699
    5. ' ' → logprob: -4.575137138366699
    6. '0' → logprob: -4.700137138366699
    7. 'z' → logprob: -5.450137138366699
    8. '(' → logprob: -6.450137138366699
    9. '""' → logprob: -6.700137138366699
    10. '[' → logprob: -6.825137138366699

Token 9: '"
' (ID: 1092)
  Prédit: '"'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '"' → logprob: -0.29998573660850525
    2. 't' → logprob: -1.4249857664108276
    3. '")' → logprob: -4.174985885620117
    4. ')' → logprob: -7.049985885620117
    5. 'r' → logprob: -7.174985885620117
    6. 'n' → logprob: -7.924985885620117
    7. ' ")' → logprob: -8.049985885620117
    8. 'w' → logprob: -8.799985885620117
    9. ''' → logprob: -9.049985885620117
    10. ' "' → logprob: -9.299985885620117

Token 10: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.7288569808006287
    2. ' ' → logprob: -1.6038570404052734
    3. '<|end|>' → logprob: -1.8538570404052734
    4. '
' → logprob: -3.1038570404052734
    5. ' if' → logprob: -3.9788570404052734
    6. '    
' → logprob: -4.478857040405273
    7. ')' → logprob: -4.478857040405273
    8. 'n' → logprob: -4.603857040405273
    9. '\n' → logprob: -4.728857040405273
    10. '```' → logprob: -4.853857040405273

Token 11: ' for' (ID: 395)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.18523013591766357
    2. ' ' → logprob: -2.685230255126953
    3. '\n' → logprob: -3.560230255126953
    4. ' if' → logprob: -4.060230255126953
    5. '
' → logprob: -4.310230255126953
    6. '```' → logprob: -4.935230255126953
    7. 'i' → logprob: -5.060230255126953
    8. 'if' → logprob: -5.060230255126953
    9. '\' → logprob: -5.560230255126953
    10. '    
' → logprob: -5.560230255126953

Token 12: ' i' (ID: 575)
  Prédit: ' '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' ' → logprob: -0.43101072311401367
    2. ' i' → logprob: -1.0560107231140137
    3. ' n' → logprob: -7.806010723114014
    4. 'i' → logprob: -7.806010723114014
    5. ' ‌' → logprob: -7.806010723114014
    6. '  ' → logprob: -8.056011199951172
    7. '_' → logprob: -8.306011199951172
    8. ' _' → logprob: -8.806011199951172
    9. ' in' → logprob: -9.806011199951172
    10. ')' → logprob: -10.181011199951172

Token 13: ' in' (ID: 306)
  Prédit: ' in'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' in' → logprob: -0.0472237765789032
    2. 'in' → logprob: -3.1722238063812256
    3. 'n' → logprob: -5.9222235679626465
    4. ' ' → logprob: -6.6722235679626465
    5. '  ' → logprob: -9.422224044799805
    6. ' n' → logprob: -9.797224044799805
    7. 'space' → logprob: -10.422224044799805
    8. '<|end|>' → logprob: -10.797224044799805
    9. ')' → logprob: -11.547224044799805
    10. 's' → logprob: -11.547224044799805

Token 14: ' range' (ID: 3352)
  Prédit: ' range'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' range' → logprob: -0.003334321780130267
    2. 'range' → logprob: -5.7533345222473145
    3. ' ' → logprob: -8.878334045410156
    4. ' in' → logprob: -12.003334045410156
    5. ' n' → logprob: -12.628334045410156
    6. '	range' → logprob: -12.878334045410156
    7. ' xrange' → logprob: -13.628334045410156
    8. '  ' → logprob: -13.753334045410156
    9. '(range' → logprob: -14.128334045410156
    10. 'n' → logprob: -14.503334045410156

Token 15: '((' (ID: 2054)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(' → logprob: -0.016192493960261345
    2. '(n' → logprob: -4.141192436218262
    3. ' (' → logprob: -9.016192436218262
    4. '(len' → logprob: -10.891192436218262
    5. '(i' → logprob: -11.141192436218262
    6. '(int' → logprob: -13.766192436218262
    7. '(
' → logprob: -14.141192436218262
    8. '((' → logprob: -15.016192436218262
    9. '(

' → logprob: -15.016192436218262
    10. '1' → logprob: -15.766192436218262

Token 16: 'n' (ID: 77)
  Prédit: '2'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '2' → logprob: -0.37601885199546814
    2. '1' → logprob: -1.5010188817977905
    3. ' ' → logprob: -3.126018762588501
    4. 'n' → logprob: -3.626018762588501
    5. ' n' → logprob: -4.00101900100708
    6. '0' → logprob: -6.75101900100708
    7. '   ' → logprob: -8.126018524169922
    8. '3' → logprob: -9.501018524169922
    9. ')' → logprob: -9.751018524169922
    10. ')n' → logprob: -10.251018524169922

Token 17: '//' (ID: 393)
  Prédit: '+'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '+' → logprob: -1.0780128240585327
    2. ' +' → logprob: -1.5780128240585327
    3. '//' → logprob: -2.0780129432678223
    4. ')' → logprob: -2.0780129432678223
    5. ' //' → logprob: -2.0780129432678223
    6. ' ' → logprob: -3.4530129432678223
    7. ' -' → logprob: -4.703012943267822
    8. '-' → logprob: -4.828012943267822
    9. '))' → logprob: -4.953012943267822
    10. '**' → logprob: -5.453012943267822

Token 18: '4' (ID: 19)
  Prédit: '2'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '2' → logprob: -0.0034161745570600033
    2. ' ' → logprob: -5.878416061401367
    3. '10' → logprob: -8.628416061401367
    4. '3' → logprob: -8.753416061401367
    5. '1' → logprob: -9.253416061401367
    6. 'i' → logprob: -9.878416061401367
    7. '5' → logprob: -10.128416061401367
    8. '   ' → logprob: -11.003416061401367
    9. '4' → logprob: -11.253416061401367
    10. '  ' → logprob: -11.628416061401367

Token 19: ')+' (ID: 16161)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')' → logprob: -0.34871211647987366
    2. ')+' → logprob: -1.4737120866775513
    3. '+' → logprob: -2.973712205886841
    4. '),' → logprob: -4.848711967468262
    5. ' )' → logprob: -6.223711967468262
    6. ' +' → logprob: -6.973711967468262
    7. ')*' → logprob: -7.473711967468262
    8. ',' → logprob: -7.598711967468262
    9. ' ' → logprob: -7.848711967468262
    10. ')+(' → logprob: -7.848711967468262

Token 20: '1' (ID: 16)
  Prédit: '1'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '1' → logprob: -0.003450041403993964
    2. '2' → logprob: -5.8784499168396
    3. ' ' → logprob: -7.3784499168396
    4. '3' → logprob: -11.003450393676758
    5. '4' → logprob: -13.503450393676758
    6. '5' → logprob: -13.878450393676758
    7. '   ' → logprob: -14.378450393676758
    8. '  ' → logprob: -14.878450393676758
    9. '7' → logprob: -15.815950393676758
    10. '(' → logprob: -16.190950393676758

Token 21: '):
' (ID: 1883)
  Prédit: '):'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '):' → logprob: -0.0024768433067947626
    2. ')' → logprob: -6.127476692199707
    3. ':' → logprob: -9.127476692199707
    4. ' ):' → logprob: -9.377476692199707
    5. '):
' → logprob: -9.627476692199707
    6. ',' → logprob: -10.877476692199707
    7. '   ' → logprob: -12.752476692199707
    8. ' ' → logprob: -13.127476692199707
    9. ')):' → logprob: -13.377476692199707
    10. '```' → logprob: -13.377476692199707

Token 22: '       ' (ID: 309)
  Prédit: ':'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ':' → logprob: -0.11280994862318039
    2. '    ' → logprob: -3.112809896469116
    3. ' :' → logprob: -3.612809896469116
    4. '       ' → logprob: -3.987809896469116
    5. '):' → logprob: -4.862810134887695
    6. '   ' → logprob: -5.112810134887695
    7. ' ' → logprob: -6.987810134887695
    8. ',' → logprob: -7.862810134887695
    9. ':
' → logprob: -8.237810134887695
    10. '        ' → logprob: -8.362810134887695

Token 23: ' if' (ID: 538)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.7879525423049927
    2. '    ' → logprob: -1.9129525423049927
    3. ' for' → logprob: -2.037952423095703
    4. ' ' → logprob: -2.287952423095703
    5. ' if' → logprob: -2.412952423095703
    6. '       ' → logprob: -2.787952423095703
    7. '<|end|>' → logprob: -4.912952423095703
    8. '```' → logprob: -6.662952423095703
    9. 'for' → logprob: -6.787952423095703
    10. '  ' → logprob: -7.162952423095703

Token 24: ' (' (ID: 350)
  Prédit: ' n'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' n' → logprob: -0.02509462460875511
    2. 'n' → logprob: -4.775094509124756
    3. ' i' → logprob: -4.900094509124756
    4. ' (' → logprob: -5.150094509124756
    5. ' ' → logprob: -6.025094509124756
    6. '(n' → logprob: -7.900094509124756
    7. '(' → logprob: -9.025094985961914
    8. 'i' → logprob: -9.400094985961914
    9. ')' → logprob: -10.525094985961914
    10. '(i' → logprob: -10.650094985961914

Token 25: 'n' (ID: 77)
  Prédit: ' n'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' n' → logprob: -0.2809693515300751
    2. 'n' → logprob: -1.5309693813323975
    3. ' i' → logprob: -3.9059693813323975
    4. 'i' → logprob: -5.655969142913818
    5. ' (' → logprob: -6.155969142913818
    6. ' ' → logprob: -6.780969142913818
    7. '4' → logprob: -7.155969142913818
    8. '   ' → logprob: -7.905969142913818
    9. '(n' → logprob: -8.155969619750977
    10. ')' → logprob: -8.905969619750977

Token 26: ' -' (ID: 533)
  Prédit: ' %'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' %' → logprob: -0.5941373705863953
    2. '%' → logprob: -1.59413743019104
    3. ' -' → logprob: -2.21913743019104
    4. '-' → logprob: -2.21913743019104
    5. '%i' → logprob: -4.344137191772461
    6. ' ' → logprob: -4.594137191772461
    7. '-i' → logprob: -6.594137191772461
    8. ')' → logprob: -6.719137191772461
    9. ' ==' → logprob: -6.969137191772461
    10. '==' → logprob: -8.219137191772461

Token 27: ' ' (ID: 220)
  Prédit: ' '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' ' → logprob: -0.439888596534729
    2. '4' → logprob: -1.064888596534729
    3. ' i' → logprob: -5.1898884773254395
    4. ' (' → logprob: -5.9398884773254395
    5. '   ' → logprob: -6.9398884773254395
    6. 'i' → logprob: -6.9398884773254395
    7. '(' → logprob: -8.064888954162598
    8. '    ' → logprob: -8.189888954162598
    9. '3' → logprob: -8.564888954162598
    10. '  ' → logprob: -9.439888954162598

Token 28: '4' (ID: 19)
  Prédit: '4'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '4' → logprob: -0.030396534129977226
    2. 'i' → logprob: -4.155396461486816
    3. ' ' → logprob: -4.905396461486816
    4. '(' → logprob: -5.655396461486816
    5. ' i' → logprob: -6.780396461486816
    6. '   ' → logprob: -7.280396461486816
    7. '3' → logprob: -7.405396461486816
    8. ' (' → logprob: -7.905396461486816
    9. '1' → logprob: -8.405396461486816
    10. '(i' → logprob: -8.405396461486816

Token 29: '*i' (ID: 51147)
  Prédit: '*'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '*' → logprob: -0.5858290791511536
    2. '*i' → logprob: -0.8358290791511536
    3. ' *' → logprob: -4.835829257965088
    4. '*j' → logprob: -6.710829257965088
    5. ')' → logprob: -7.460829257965088
    6. '*)' → logprob: -9.96082878112793
    7. ' ' → logprob: -10.96082878112793
    8. '*k' → logprob: -11.58582878112793
    9. '*a' → logprob: -12.21082878112793
    10. '*t' → logprob: -12.71082878112793

Token 30: ')' (ID: 8)
  Prédit: ')'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')' → logprob: -0.0066141230054199696
    2. ' )' → logprob: -5.3816142082214355
    3. ')%' → logprob: -6.2566142082214355
    4. ')>=' → logprob: -9.631613731384277
    5. ')==' → logprob: -12.631613731384277
    6. ')**' → logprob: -14.381613731384277
    7. '```' → logprob: -14.381613731384277
    8. ' ' → logprob: -14.506613731384277
    9. '-' → logprob: -14.631613731384277
    10. '>=' → logprob: -14.631613731384277

Token 31: ' %' (ID: 1851)
  Prédit: '%'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '%' → logprob: -0.977314293384552
    2. ')' → logprob: -1.2273142337799072
    3. ' %' → logprob: -1.8523142337799072
    4. '<|end|>' → logprob: -2.7273142337799072
    5. ')%' → logprob: -3.2273142337799072
    6. '>=' → logprob: -3.7273142337799072
    7. ' ' → logprob: -4.102314472198486
    8. ' >=' → logprob: -4.477314472198486
    9. ')>=' → logprob: -4.477314472198486
    10. ' )' → logprob: -5.977314472198486

Token 32: ' ' (ID: 220)
  Prédit: '7'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '7' → logprob: -0.005995632149279118
    2. ' ' → logprob: -5.255995750427246
    3. '3' → logprob: -7.255995750427246
    4. '6' → logprob: -10.755995750427246
    5. '2' → logprob: -11.380995750427246
    6. '5' → logprob: -11.755995750427246
    7. '   ' → logprob: -12.505995750427246
    8. '    ' → logprob: -13.380995750427246
    9. '  ' → logprob: -13.505995750427246
    10. '1' → logprob: -13.755995750427246

Token 33: '7' (ID: 22)
  Prédit: '7'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '7' → logprob: -0.00013595925702247769
    2. '3' → logprob: -9.125136375427246
    3. '2' → logprob: -11.875136375427246
    4. ' ' → logprob: -11.875136375427246
    5. '   ' → logprob: -12.625136375427246
    6. '6' → logprob: -12.750136375427246
    7. '

' → logprob: -13.625136375427246
    8. '5' → logprob: -13.875136375427246
    9. '{' → logprob: -14.500136375427246
    10. '1' → logprob: -14.500136375427246

Token 34: ' ==' (ID: 951)
  Prédit: '=='
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '==' → logprob: -0.5232933759689331
    2. ' ==' → logprob: -0.8982933759689331
    3. ')==' → logprob: -9.648293495178223
    4. '=' → logprob: -10.023293495178223
    5. ' ' → logprob: -10.898293495178223
    6. ')' → logprob: -10.898293495178223
    7. '===' → logprob: -11.523293495178223
    8. ']==' → logprob: -12.398293495178223
    9. '()==' → logprob: -12.648293495178223
    10. ' =' → logprob: -13.148293495178223

Token 35: ' ' (ID: 220)
  Prédit: '0'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '0' → logprob: -0.01815006136894226
    2. ' ' → logprob: -4.0181498527526855
    3. '  ' → logprob: -16.393150329589844
    4. ' ' → logprob: -17.393150329589844
    5. '   ' → logprob: -17.393150329589844
    6. '```' → logprob: -17.393150329589844
    7. '    ' → logprob: -17.643150329589844
    8. '۰' → logprob: -18.268150329589844
    9. '<|end|>' → logprob: -19.143150329589844
    10. '     ' → logprob: -19.268150329589844

Token 36: '0' (ID: 15)
  Prédit: '0'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '0' → logprob: -0.00317783304490149
    2. ' ' → logprob: -5.753177642822266
    3. '  ' → logprob: -16.628177642822266
    4. '```' → logprob: -17.315677642822266
    5. '۰' → logprob: -17.440677642822266
    6. '   ' → logprob: -17.878177642822266
    7. ' ' → logprob: -18.003177642822266
    8. '０' → logprob: -18.065677642822266
    9. '    ' → logprob: -18.440677642822266
    10. '=' → logprob: -18.690677642822266

Token 37: ':
' (ID: 734)
  Prédit: ':'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ':' → logprob: -0.00020544764993246645
    2. '):' → logprob: -9.125205039978027
    3. ':
' → logprob: -9.500205039978027
    4. ' :' → logprob: -11.375205039978027
    5. ':**' → logprob: -12.750205039978027
    6. ':return' → logprob: -13.250205039978027
    7. '       ' → logprob: -13.500205039978027
    8. ' and' → logprob: -13.500205039978027
    9. '<|end|>' → logprob: -14.250205039978027
    10. '>:' → logprob: -14.750205039978027

Token 38: '           ' (ID: 352)
  Prédit: '           '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '           ' → logprob: -0.03899698704481125
    2. '       ' → logprob: -3.913996934890747
    3. ' ' → logprob: -4.913997173309326
    4. '<|end|>' → logprob: -5.163997173309326
    5. '               ' → logprob: -6.663997173309326
    6. '        ' → logprob: -7.163997173309326
    7. '	       ' → logprob: -7.288997173309326
    8. '            ' → logprob: -7.913997173309326
    9. '   ' → logprob: -8.038996696472168
    10. ' return' → logprob: -8.413996696472168

Token 39: ' z' (ID: 579)
  Prédit: ' z'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' z' → logprob: -0.5294211506843567
    2. '               ' → logprob: -1.529421091079712
    3. '            ' → logprob: -2.529421091079712
    4. 'z' (adapté à ' z') → logprob: -3.404421091079712
    5. '           ' → logprob: -3.654421091079712
    6. ' ' → logprob: -4.029421329498291
    7. '                ' → logprob: -4.279421329498291
    8. ' return' → logprob: -4.529421329498291
    9. '       ' → logprob: -5.904421329498291
    10. ' ' → logprob: -6.029421329498291

Token 40: ' =' (ID: 314)
  Prédit: '='
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '=' → logprob: -0.3868733048439026
    2. ' =' → logprob: -1.1368732452392578
    3. ' ' → logprob: -13.511873245239258
    4. '='' → logprob: -15.261873245239258
    5. '=

' → logprob: -15.511873245239258
    6. ' ='' → logprob: -15.886873245239258
    7. ' ="' → logprob: -16.011873245239258
    8. '＝' → logprob: -16.886873245239258
    9. '=}' → logprob: -17.261873245239258
    10. '="' → logprob: -17.386873245239258

Token 41: ' "' (ID: 392)
  Prédit: '"'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '"' → logprob: -0.002981029450893402
    2. ' "' → logprob: -6.127981185913086
    3. ''' → logprob: -7.252981185913086
    4. 'Yes' → logprob: -10.127981185913086
    5. '   ' → logprob: -10.877981185913086
    6. ' ' → logprob: -11.502981185913086
    7. '	' → logprob: -12.127981185913086
    8. ' Yes' → logprob: -13.002981185913086
    9. '  ' → logprob: -13.252981185913086
    10. '“Yes' → logprob: -13.377981185913086

Token 42: 'Yes' (ID: 13022)
  Prédit: 'Yes'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'Yes' → logprob: -0.02063169702887535
    2. 'Ye' → logprob: -4.145631790161133
    3. '"' → logprob: -5.395631790161133
    4. 'YES' → logprob: -10.770631790161133
    5. 'Ya' → logprob: -11.770631790161133
    6. ' Yes' → logprob: -12.395631790161133
    7. 'Ok' → logprob: -12.520631790161133
    8. 'Y' → logprob: -12.520631790161133
    9. ''' → logprob: -12.895631790161133
    10. '""' → logprob: -13.395631790161133

Token 43: '"
' (ID: 1092)
  Prédit: '"'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '"' → logprob: -0.0008177272975444794
    2. '           ' → logprob: -7.625817775726318
    3. '"
' → logprob: -8.87581729888916
    4. '")' → logprob: -9.25081729888916
    5. '   ' → logprob: -10.37581729888916
    6. '       ' → logprob: -11.00081729888916
    7. '```' → logprob: -11.37581729888916
    8. '<|end|>' → logprob: -11.62581729888916
    9. '"
' → logprob: -11.75081729888916
    10. 'return' → logprob: -12.75081729888916

Token 44: '           ' (ID: 352)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.6356735825538635
    2. '<|end|>' → logprob: -1.0106735229492188
    3. '           ' → logprob: -3.0106735229492188
    4. '       ' → logprob: -3.6356735229492188
    5. ' ' → logprob: -4.510673522949219
    6. ' return' → logprob: -5.510673522949219
    7. ' 
' → logprob: -5.760673522949219
    8. '<|end|>' → logprob: -6.010673522949219
    9. '```' → logprob: -6.260673522949219
    10. '  ' → logprob: -6.635673522949219

Token 45: ' break' (ID: 2338)
  Prédit: '           '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '           ' → logprob: -0.0011460528476163745
    2. '		' → logprob: -7.126145839691162
    3. '       ' → logprob: -8.87614631652832
    4. '	       ' → logprob: -9.50114631652832
    5. '               ' → logprob: -10.25114631652832
    6. '   ' → logprob: -10.75114631652832
    7. '```' → logprob: -11.37614631652832
    8. '	break' → logprob: -11.50114631652832
    9. ' break' → logprob: -11.62614631652832
    10. '		   ' → logprob: -12.12614631652832

Token 46: '
' (ID: 198)
  Prédit: ''
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False

Token 47: '   ' (ID: 271)
  Prédit: ''
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False

Token 48: ' return' (ID: 622)
  Prédit: ''
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False

Token 49: ' z' (ID: 579)
  Prédit: ' z'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' z' → logprob: -0.12693314254283905
    2. 'z' → logprob: -2.1269330978393555
    3. ' ' → logprob: -13.126933097839355
    4. ' ' → logprob: -13.751933097839355
    5. '	z' → logprob: -14.251933097839355
    6. 's' → logprob: -14.501933097839355
    7. '(z' → logprob: -15.251933097839355
    8. '[z' → logprob: -16.251934051513672
    9. '```' → logprob: -16.376934051513672
    10. '"' → logprob: -16.751934051513672

Token 50: '

' (ID: 279)
  Prédit: ''
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False

Token 51: 'def' (ID: 1314)
  Prédit: ''
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False

Token 52: ' solve' (ID: 17722)
  Prédit: ' check'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' check' → logprob: -0.2892007827758789
    2. ' main' → logprob: -1.914200782775879
    3. ' ' → logprob: -4.289200782775879
    4. ' solve' → logprob: -4.289200782775879
    5. ' sum' → logprob: -4.539200782775879
    6. ' add' → logprob: -4.664200782775879
    7. ' calculate' → logprob: -4.664200782775879
    8. ' find' → logprob: -5.039200782775879
    9. ' test' → logprob: -5.164200782775879
    10. ' is' → logprob: -5.164200782775879

Token 53: '():
' (ID: 8595)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '(' → logprob: -0.3151264488697052
    2. '(n' → logprob: -1.3151264190673828
    3. '():' → logprob: -7.440126419067383
    4. '()' → logprob: -8.065126419067383
    5. '_' → logprob: -8.065126419067383
    6. 'def' → logprob: -8.190126419067383
    7. '(N' → logprob: -9.440126419067383
    8. '(num' → logprob: -9.690126419067383
    9. '(a' → logprob: -10.440126419067383
    10. '```' → logprob: -10.690126419067383

Token 54: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.2833156883716583
    2. ' n' → logprob: -1.658315658569336
    3. '<|end|>' → logprob: -3.158315658569336
    4. 'n' → logprob: -5.408315658569336
    5. ' ' → logprob: -5.783315658569336
    6. '    
' → logprob: -6.658315658569336
    7. '<|end|>' → logprob: -6.908315658569336
    8. ' input' → logprob: -7.408315658569336
    9. '	n' → logprob: -7.533315658569336
    10. ' 
' → logprob: -7.783315658569336

Token 55: ' get' (ID: 717)
  Prédit: ' n'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' n' → logprob: -0.006143392063677311
    2. 'n' → logprob: -5.131143569946289
    3. '   ' → logprob: -8.631143569946289
    4. '	n' → logprob: -11.881143569946289
    5. ' input' → logprob: -11.881143569946289
    6. '```' → logprob: -12.506143569946289
    7. ' import' → logprob: -12.631143569946289
    8. ' x' → logprob: -12.756143569946289
    9. ' ' → logprob: -12.881143569946289
    10. ' t' → logprob: -13.131143569946289

Token 56: ' =' (ID: 314)
  Prédit: '_input'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '_input' → logprob: -0.22749008238315582
    2. '()' → logprob: -2.227490186691284
    3. 's' → logprob: -2.852490186691284
    4. 'input' → logprob: -4.102489948272705
    5. 'attr' → logprob: -5.102489948272705
    6. '_' → logprob: -5.477489948272705
    7. 'int' → logprob: -5.977489948272705
    8. 't' → logprob: -5.977489948272705
    9. 'line' → logprob: -6.227489948272705
    10. ' input' → logprob: -6.977489948272705

Token 57: ' lambda' (ID: 27871)
  Prédit: ' int'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' int' → logprob: -0.2015863060951233
    2. 'int' → logprob: -1.7015862464904785
    3. ' input' → logprob: -9.201586723327637
    4. ' ' → logprob: -10.326586723327637
    5. 'input' → logprob: -10.576586723327637
    6. '  ' → logprob: -12.076586723327637
    7. '	int' → logprob: -12.451586723327637
    8. '   ' → logprob: -13.326586723327637
    9. '(int' → logprob: -13.826586723327637
    10. '=int' → logprob: -14.701586723327637

Token 58: ' :' (ID: 712)
  Prédit: ' int'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' int' → logprob: -0.1605689525604248
    2. 'int' → logprob: -1.9105689525604248
    3. ':int' → logprob: -8.660569190979004
    4. ' input' → logprob: -9.785569190979004
    5. ' x' → logprob: -10.660569190979004
    6. '(int' → logprob: -10.910569190979004
    7. 'input' → logprob: -11.160569190979004
    8. '<int' → logprob: -11.285569190979004
    9. ':' → logprob: -11.660569190979004
    10. ' ' → logprob: -11.785569190979004

Token 59: ' int' (ID: 677)
  Prédit: 'int'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'int' → logprob: -0.2524413764476776
    2. ' int' → logprob: -1.50244140625
    3. ' map' → logprob: -8.00244140625
    4. 'map' → logprob: -8.87744140625
    5. 'input' → logprob: -11.00244140625
    6. ' ' → logprob: -12.12744140625
    7. ' input' → logprob: -12.25244140625
    8. 'list' → logprob: -12.87744140625
    9. '	int' → logprob: -13.12744140625
    10. ' list' → logprob: -13.12744140625

Token 60: '(input' (ID: 10054)
  Prédit: '(input'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(input' → logprob: -5.88418151892256e-05
    2. '(' → logprob: -9.750059127807617
    3. 'input' → logprob: -14.625059127807617
    4. '(in' → logprob: -18.000059127807617
    5. ' (' → logprob: -18.250059127807617
    6. ' input' → logprob: -18.750059127807617
    7. '(
' → logprob: -19.250059127807617
    8. '(int' → logprob: -19.375059127807617
    9. '(i' → logprob: -19.500059127807617
    10. '<input' → logprob: -20.375059127807617

Token 61: '())
' (ID: 4574)
  Prédit: '())'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '())' → logprob: -0.0003832445072475821
    2. '()' → logprob: -8.000383377075195
    3. '().' → logprob: -10.500383377075195
    4. '()))' → logprob: -11.500383377075195
    5. ' ())' → logprob: -12.250383377075195
    6. '();)' → logprob: -13.375383377075195
    7. '())
' → logprob: -13.625383377075195
    8. '(' → logprob: -14.125383377075195
    9. '());' → logprob: -14.375383377075195
    10. '(""))' → logprob: -15.125383377075195

Token 62: '   ' (ID: 271)
  Prédit: 'n'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'n' → logprob: -0.9402485489845276
    2. '
' → logprob: -1.4402484893798828
    3. '<|end|>' → logprob: -1.5652484893798828
    4. '(n' → logprob: -2.565248489379883
    5. '    
' → logprob: -4.065248489379883
    6. 'def' → logprob: -4.440248489379883
    7. '	n' → logprob: -4.440248489379883
    8. '   ' → logprob: -4.690248489379883
    9. ' n' → logprob: -5.315248489379883
    10. ' for' → logprob: -5.565248489379883

Token 63: ' res' (ID: 694)
  Prédit: 'n'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'n' → logprob: -0.25618958473205566
    2. ' n' → logprob: -1.7561895847320557
    3. 't' → logprob: -3.3811895847320557
    4. ' t' → logprob: -4.256189346313477
    5. 'for' → logprob: -6.006189346313477
    6. ' for' → logprob: -6.381189346313477
    7. '   ' → logprob: -7.381189346313477
    8. '	n' → logprob: -9.381189346313477
    9. ' T' → logprob: -9.756189346313477
    10. 'T' → logprob: -10.006189346313477

Token 64: ' =' (ID: 314)
  Prédit: ' ='
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' =' → logprob: -0.4438630938529968
    2. '=' → logprob: -1.8188631534576416
    3. 's' → logprob: -2.1938631534576416
    4. 'ults' → logprob: -2.9438631534576416
    5. 'ult' → logprob: -3.5688631534576416
    6. 'uls' → logprob: -6.4438629150390625
    7. '   ' → logprob: -7.0688629150390625
    8. ' ' → logprob: -7.3188629150390625
    9. '=[]' → logprob: -8.818862915039062
    10. 'ul' → logprob: -9.693862915039062

Token 65: ' check' (ID: 2371)
  Prédit: 'get'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'get' → logprob: -0.6690125465393066
    2. ' get' → logprob: -0.9190125465393066
    3. '[get' → logprob: -2.5440125465393066
    4. ' check' → logprob: -5.544012546539307
    5. 'check' → logprob: -5.669012546539307
    6. '"' → logprob: -7.044012546539307
    7. '[]' → logprob: -7.544012546539307
    8. '[' → logprob: -7.669012546539307
    9. ' [' → logprob: -7.919012546539307
    10. '(get' → logprob: -7.919012546539307

Token 66: '(get' (ID: 7119)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(' → logprob: -0.6897085309028625
    2. '(get' → logprob: -0.8147085309028625
    3. '(n' → logprob: -2.9397084712982178
    4. '(int' → logprob: -7.064708709716797
    5. '(input' → logprob: -7.814708709716797
    6. '((' → logprob: -8.314708709716797
    7. '<|end|>' → logprob: -8.314708709716797
    8. '(user' → logprob: -8.439708709716797
    9. ' (' → logprob: -8.814708709716797
    10. '(s' → logprob: -9.064708709716797

Token 67: '())
' (ID: 4574)
  Prédit: '())'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '())' → logprob: -0.012029916048049927
    2. '()))' → logprob: -5.012030124664307
    3. '()' → logprob: -5.262030124664307
    4. ' ())' → logprob: -9.887029647827148
    5. ')' → logprob: -10.387029647827148
    6. '())
' → logprob: -11.137029647827148
    7. '();)' → logprob: -12.262029647827148
    8. '())

' → logprob: -12.637029647827148
    9. '(' → logprob: -12.762029647827148
    10. '());' → logprob: -13.137029647827148

Token 68: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.47577235102653503
    2. 'print' → logprob: -0.9757723808288574
    3. ' print' → logprob: -6.600772380828857
    4. '<|end|>' → logprob: -8.4757719039917
    5. '	print' → logprob: -9.4757719039917
    6. '
' → logprob: -11.3507719039917
    7. '```' → logprob: -11.4757719039917
    8. '    
' → logprob: -11.9757719039917
    9. '       ' → logprob: -12.6007719039917
    10. '(print' → logprob: -12.8507719039917

Token 69: ' print' (ID: 2123)
  Prédit: 'print'
  Correct (stricte): False
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'print' (adapté à ' print') → logprob: -0.003885580925270915
    2. ' print' → logprob: -5.753885746002197
    3. '   ' → logprob: -7.253885746002197
    4. '```' → logprob: -15.878885269165039
    5. '	print' → logprob: -16.25388526916504
    6. '
' → logprob: -18.87888526916504
    7. ' ' → logprob: -19.62888526916504
    8. '.print' → logprob: -19.75388526916504
    9. '#print' → logprob: -19.87888526916504
    10. '  ' → logprob: -20.00388526916504

Token 70: '(res' (ID: 8331)
  Prédit: '(res'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(res' → logprob: -0.3132736384868622
    2. '(' → logprob: -1.3132736682891846
    3. ' (' → logprob: -11.938273429870605
    4. '('' → logprob: -13.313273429870605
    5. '()' → logprob: -13.938273429870605
    6. '("("' → logprob: -13.938273429870605
    7. '(z' → logprob: -14.188273429870605
    8. '(
' → logprob: -15.063273429870605
    9. '(

' → logprob: -15.563273429870605
    10. 'res' → logprob: -15.813273429870605

Token 71: ')

' (ID: 1029)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ')' → logprob: -3.173704271830502e-06
    2. '))' → logprob: -13.00000286102295
    3. '`)' → logprob: -15.25000286102295
    4. ' )' → logprob: -15.50000286102295
    5. ')`' → logprob: -15.75000286102295
    6. '')' → logprob: -16.250003814697266
    7. ')
' → logprob: -16.750003814697266
    8. '())' → logprob: -16.750003814697266
    9. '")' → logprob: -17.375003814697266
    10. '()' → logprob: -17.625003814697266

Token 72: 'class' (ID: 1444)
  Prédit: '
'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '
' → logprob: -0.6477766633033752
    2. '\n' → logprob: -1.1477766036987305
    3. '<|end|>' → logprob: -2.0227766036987305
    4. '\' → logprob: -3.8977766036987305
    5. '```' → logprob: -6.0227766036987305
    6. '#' → logprob: -6.0227766036987305
    7. '<|end|>' → logprob: -7.3977766036987305
    8. '

' → logprob: -7.7727766036987305
    9. ' ' → logprob: -9.39777660369873
    10. '()' → logprob: -9.39777660369873

Token 73: ' Run' (ID: 14581)
  Prédit: ' Solution'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' Solution' → logprob: -0.1984398365020752
    2. ' Solver' → logprob: -2.073439836502075
    3. ' ' → logprob: -3.198439836502075
    4. ' Tester' → logprob: -5.448439598083496
    5. ' Checker' → logprob: -6.198439598083496
    6. ' Calculator' → logprob: -6.448439598083496
    7. '<|end|>' → logprob: -6.573439598083496
    8. ' My' → logprob: -6.698439598083496
    9. ' Test' → logprob: -7.323439598083496
    10. ' Counter' → logprob: -7.448439598083496

Token 74: ':
' (ID: 734)
  Prédit: 'ner'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'ner' → logprob: -0.006880784407258034
    2. '():' → logprob: -5.506880760192871
    3. ':' → logprob: -6.131880760192871
    4. 'er' → logprob: -8.881880760192871
    5. 'NER' → logprob: -8.881880760192871
    6. '():
' → logprob: -9.131880760192871
    7. 'Time' → logprob: -9.381880760192871
    8. 'nner' → logprob: -10.131880760192871
    9. ':
' → logprob: -10.381880760192871
    10. '(' → logprob: -11.256880760192871

Token 75: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.19162482023239136
    2. ' def' → logprob: -1.8166248798370361
    3. 'def' → logprob: -5.566624641418457
    4. '<|end|>' → logprob: -5.691624641418457
    5. ':' → logprob: -5.941624641418457
    6. ' ' → logprob: -7.441624641418457
    7. ' pass' → logprob: -7.441624641418457
    8. '	def' → logprob: -8.566624641418457
    9. ' :' → logprob: -9.066624641418457
    10. '  ' → logprob: -9.441624641418457

Token 76: ' def' (ID: 1056)
  Prédit: ' def'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' def' → logprob: -0.06288065761327744
    2. 'def' (adapté à ' def') → logprob: -2.812880754470825
    3. ' @' → logprob: -7.312880516052246
    4. '   ' → logprob: -8.687880516052246
    5. ' ' → logprob: -10.562880516052246
    6. '@' → logprob: -11.062880516052246
    7. '    ' → logprob: -11.562880516052246
    8. ' static' → logprob: -11.687880516052246
    9. ' if' → logprob: -12.312880516052246
    10. 'staticmethod' → logprob: -12.687880516052246

Token 77: ' __' (ID: 2516)
  Prédit: ' __'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' __' → logprob: -0.3973458707332611
    2. ' solve' → logprob: -1.1473459005355835
    3. ' run' → logprob: -5.647346019744873
    4. '__' → logprob: -5.897346019744873
    5. ' check' → logprob: -6.397346019744873
    6. ' init' → logprob: -7.022346019744873
    7. ' main' → logprob: -7.522346019744873
    8. ' def' → logprob: -7.897346019744873
    9. ' ' → logprob: -8.022345542907715
    10. 'solve' → logprob: -9.397345542907715

Token 78: 'call' (ID: 9925)
  Prédit: 'init'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'init' → logprob: -6.682846287731081e-05
    2. 'new' → logprob: -10.000066757202148
    3. 'call' → logprob: -11.250066757202148
    4. 'nit' → logprob: -11.875066757202148
    5. ' init' → logprob: -15.250066757202148
    6. 'name' → logprob: -15.250066757202148
    7. 'ini' → logprob: -15.500066757202148
    8. 'it' → logprob: -15.875066757202148
    9. 'iter' → logprob: -16.00006675720215
    10. 'inite' → logprob: -16.25006675720215

Token 79: '__(' (ID: 8241)
  Prédit: '__('
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '__(' → logprob: -0.16026870906352997
    2. '__' → logprob: -1.9102686643600464
    3. '__(
' → logprob: -10.535268783569336
    4. '__('' → logprob: -11.910268783569336
    5. '__((' → logprob: -12.035268783569336
    6. '___' → logprob: -12.410268783569336
    7. '__("' → logprob: -14.285268783569336
    8. '__(*' → logprob: -15.285268783569336
    9. '____' → logprob: -15.660268783569336
    10. '_' → logprob: -16.160268783569336

Token 80: 'self' (ID: 1156)
  Prédit: 'self'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'self' → logprob: -2.6656825866666622e-05
    2. 's' → logprob: -11.25002670288086
    3. ' self' → logprob: -11.50002670288086
    4. ')' → logprob: -12.75002670288086
    5. '   ' → logprob: -15.25002670288086
    6. ' ' → logprob: -16.62502670288086
    7. '
' → logprob: -16.87502670288086
    8. '0' → logprob: -16.87502670288086
    9. 'n' → logprob: -17.00002670288086
    10. '_self' → logprob: -17.50002670288086

Token 81: '):
' (ID: 1883)
  Prédit: ','
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ',' → logprob: -0.1348225474357605
    2. '):' → logprob: -2.3848226070404053
    3. ',n' → logprob: -3.5098226070404053
    4. ' ,' → logprob: -6.009822368621826
    5. ')' → logprob: -6.759822368621826
    6. ' ):' → logprob: -9.134822845458984
    7. ',input' → logprob: -9.509822845458984
    8. ',args' → logprob: -9.759822845458984
    9. ',user' → logprob: -10.259822845458984
    10. 'self' → logprob: -10.509822845458984

Token 82: '       ' (ID: 309)
  Prédit: '       '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '       ' → logprob: -0.0052945963107049465
    2. '   ' → logprob: -5.7552947998046875
    3. '<|end|>' → logprob: -7.0052947998046875
    4. ' solve' → logprob: -7.8802947998046875
    5. 'solve' → logprob: -8.630294799804688
    6. '        
' → logprob: -9.005294799804688
    7. 'n' → logprob: -9.130294799804688
    8. '    ' → logprob: -9.880294799804688
    9. '
' → logprob: -10.005294799804688
    10. ' 
' → logprob: -10.130294799804688

Token 83: ' solve' (ID: 17722)
  Prédit: 'solve'
  Correct (stricte): False
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'solve' (adapté à ' solve') → logprob: -0.10340330749750137
    2. ' solve' → logprob: -2.728403329849243
    3. 'def' → logprob: -4.353403091430664
    4. '       ' → logprob: -5.103403091430664
    5. 'n' → logprob: -5.353403091430664
    6. 'self' → logprob: -5.603403091430664
    7. 'for' → logprob: -6.853403091430664
    8. ' for' → logprob: -6.853403091430664
    9. '   ' → logprob: -6.853403091430664
    10. '
' → logprob: -7.353403091430664

Token 84: '()

' (ID: 5874)
  Prédit: '()'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '()' → logprob: -0.00030924470047466457
    2. '()
' → logprob: -8.125308990478516
    3. '()

' → logprob: -11.625308990478516
    4. '(' → logprob: -13.500308990478516
    5. '()\' → logprob: -14.125308990478516
    6. '()`' → logprob: -14.500308990478516
    7. '()<' → logprob: -14.750308990478516
    8. '<|end|>' → logprob: -15.125308990478516
    9. '();' → logprob: -15.375308990478516
    10. '()?' → logprob: -16.125308990478516

Token 85: 'if' (ID: 366)
  Prédit: 'r'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'r' → logprob: -0.3444247841835022
    2. 'if' → logprob: -1.4694247245788574
    3. 'R' → logprob: -3.2194247245788574
    4. '
' → logprob: -4.969424724578857
    5. '#' → logprob: -5.594424724578857
    6. 'Run' → logprob: -5.719424724578857
    7. 'run' → logprob: -5.844424724578857
    8. '```' → logprob: -6.094424724578857
    9. 'a' → logprob: -7.469424724578857
    10. 'n' → logprob: -8.219425201416016

Token 86: ' __' (ID: 2516)
  Prédit: ' __'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' __' → logprob: -0.0005656610010191798
    2. '__' → logprob: -7.500565528869629
    3. ' ' → logprob: -11.750565528869629
    4. 'name' → logprob: -12.875565528869629
    5. ' ' → logprob: -13.875565528869629
    6. '_name' → logprob: -14.500565528869629
    7. '_' → logprob: -15.000565528869629
    8. ' ' → logprob: -16.375566482543945
    9. ' True' → logprob: -16.500566482543945
    10. ' ___' → logprob: -16.875566482543945

Token 87: 'name' (ID: 897)
  Prédit: ' =='
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' ==' → logprob: -0.7670413851737976
    2. '__' → logprob: -0.8920413851737976
    3. '==' → logprob: -2.1420414447784424
    4. ' __' → logprob: -4.892041206359863
    5. '=="' → logprob: -7.642041206359863
    6. '.__' → logprob: -9.392041206359863
    7. '<|end|>' → logprob: -9.642041206359863
    8. '=='' → logprob: -9.767041206359863
    9. ' =="' → logprob: -10.017041206359863
    10. '___' → logprob: -10.517041206359863

Token 88: '__' (ID: 771)
  Prédit: '__'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '__' → logprob: -7.896309739408025e-07
    2. '_' → logprob: -14.500000953674316
    3. '___' → logprob: -16.375
    4. '____' → logprob: -16.875
    5. '__

' → logprob: -16.875
    6. '==' → logprob: -17.0
    7. '__.__' → logprob: -17.5
    8. '__
' → logprob: -17.5
    9. 'name' → logprob: -18.0
    10. ' __' → logprob: -18.875

Token 89: ' ==' (ID: 951)
  Prédit: ' =='
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' ==' → logprob: -0.08668042719364166
    2. '==' → logprob: -2.5866804122924805
    3. '__' → logprob: -5.3366804122924805
    4. '=="' → logprob: -6.0866804122924805
    5. '=='' → logprob: -7.8366804122924805
    6. '<|end|>' → logprob: -9.33668041229248
    7. ' =="' → logprob: -9.33668041229248
    8. '"' → logprob: -10.83668041229248
    9. '_' → logprob: -11.21168041229248
    10. ' =' → logprob: -11.33668041229248

Token 90: ' '__' (ID: 28278)
  Prédit: '"'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '"' → logprob: -0.011195066384971142
    2. ''' → logprob: -4.511195182800293
    3. ' "__' → logprob: -9.386195182800293
    4. ' "' → logprob: -9.761195182800293
    5. '"user' → logprob: -12.636195182800293
    6. '__' → logprob: -14.386195182800293
    7. '"name' → logprob: -14.636195182800293
    8. ' '__' → logprob: -15.261195182800293
    9. ' '' → logprob: -15.636195182800293
    10. '"I' → logprob: -16.136194229125977

Token 91: 'main' (ID: 7731)
  Prédit: 'main'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'main' → logprob: -0.1486901044845581
    2. '__' → logprob: -2.0236902236938477
    3. '__.' → logprob: -5.898690223693848
    4. 'name' → logprob: -6.773690223693848
    5. '__':
' → logprob: -7.023690223693848
    6. 'built' → logprob: -7.148690223693848
    7. '__
' → logprob: -9.523690223693848
    8. 'm' → logprob: -10.023690223693848
    9. '__

' → logprob: -10.148690223693848
    10. '__:' → logprob: -10.148690223693848

Token 92: '__' (ID: 771)
  Prédit: '__'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '__' → logprob: -0.03559109568595886
    2. '__':
' → logprob: -3.5355911254882812
    3. '__:' → logprob: -5.160591125488281
    4. '_' → logprob: -9.910591125488281
    5. '':' → logprob: -10.535591125488281
    6. ':' → logprob: -12.910591125488281
    7. '__":
' → logprob: -13.160591125488281
    8. '__.' → logprob: -13.535591125488281
    9. ''' → logprob: -13.910591125488281
    10. '___' → logprob: -14.535591125488281

Token 93: '':' (ID: 2337)
  Prédit: ':'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ':' → logprob: -2.7968066206085496e-05
    2. ':
' → logprob: -11.125027656555176
    3. ':**' → logprob: -12.000027656555176
    4. ' :' → logprob: -13.000027656555176
    5. '):' → logprob: -13.000027656555176
    6. '():' → logprob: -14.625027656555176
    7. '__:' → logprob: -14.750027656555176
    8. '<|end|>' → logprob: -14.875027656555176
    9. '':' → logprob: -15.375027656555176
    10. '```' → logprob: -15.750027656555176

Token 94: ' Run' (ID: 14581)
  Prédit: ' Run'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' Run' → logprob: -0.19163428246974945
    2. '	Run' → logprob: -2.191634178161621
    3. '   ' → logprob: -2.941634178161621
    4. 'Run' → logprob: -5.566634178161621
    5. '
' → logprob: -6.191634178161621
    6. ' 
' → logprob: -6.441634178161621
    7. '    
' → logprob: -6.816634178161621
    8. '_Run' → logprob: -8.441634178161621
    9. '    ' → logprob: -8.566634178161621
    10. '   ' → logprob: -8.816634178161621

Token 95: '()' (ID: 416)
  Prédit: '()'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '()' → logprob: -0.0027513804379850626
    2. ']()' → logprob: -7.127751350402832
    3. '().__' → logprob: -7.127751350402832
    4. '`()' → logprob: -7.752751350402832
    5. '__' → logprob: -8.002751350402832
    6. '().' → logprob: -8.877751350402832
    7. '|()
' → logprob: -9.502751350402832
    8. '()(' → logprob: -10.127751350402832
    9. '>()' → logprob: -10.252751350402832
    10. ' ()' → logprob: -10.502751350402832

Token 96: '()' (ID: 416)
  Prédit: '()'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '()' → logprob: -0.016641149297356606
    2. '().' → logprob: -4.391641139984131
    3. '().__' → logprob: -6.016641139984131
    4. '__' → logprob: -7.391641139984131
    5. ' ()' → logprob: -7.766641139984131
    6. '`()' → logprob: -8.516641616821289
    7. ']()' → logprob: -8.766641616821289
    8. '<|end|>' → logprob: -9.391641616821289
    9. '```' → logprob: -10.266641616821289
    10. '|()
' → logprob: -10.516641616821289


RÉSUMÉ:
--------------------------------------------------------------------------------
Total des tokens analysés: 94
Tokens correctement prédits (1ère position, stricte): 33
Tokens correctement prédits (1ère position, avec adaptation): 35
Tokens correctement prédits (top 10): 72
Précision stricte (1ère position): 35.11%
Précision adaptée (1ère position): 37.23%
Précision (top 10): 76.60%
================================================================================
