================================================================================
ANALYSE DE PRÉDICTION TOKEN PAR TOKEN (BATCH API)
Date: 2025-06-04 20:11:23
Modèle de tokenisation: gpt-4o-mini
================================================================================

SCRIPT ANALYSÉ:
--------------------------------------------------------------------------------
from functools import reduce
from operator import add, mul

N, K = (lambda f: f(f))(lambda self: list(map(int, input().split())))  # Double lambda pour complexifier

doseq = lambda lst: reduce(mul, lst, 1)
checker = lambda x, y: 1 - int(not bool(x - (x // y) * y))

print(str(reduce(add, [str(checker(N, K)) * (checker(N, K) or 1), '0' * int(not checker(N, K))], ''))[0])
--------------------------------------------------------------------------------

RÉSULTATS D'ANALYSE TOKEN PAR TOKEN:
--------------------------------------------------------------------------------
Token 0: 'from' (ID: 2845)
  → Token d'amorce (pas de prédiction)

Token 1: ' functools' (ID: 142636)
  → Token d'amorce (pas de prédiction)

Token 2: ' import' (ID: 1588)
  → Token d'amorce (pas de prédiction)

Token 3: ' reduce' (ID: 10389)
  Prédit: 'partial'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'partial' → logprob: -0.612085223197937
    2. 'wrap' → logprob: -0.862085223197937
    3. 'reduce' → logprob: -3.4870853424072266
    4. 'l' → logprob: -6.112085342407227
    5. ' wraps' → logprob: -6.487085342407227
    6. 'cached' → logprob: -7.612085342407227
    7. 'cache' → logprob: -8.112085342407227
    8. 'cmp' → logprob: -9.237085342407227
    9. '```' → logprob: -9.237085342407227
    10. ' partial' → logprob: -9.612085342407227

Token 4: '
' (ID: 198)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '(' → logprob: -0.010317044332623482
    2. '(lambda' → logprob: -4.760316848754883
    3. ' (' → logprob: -7.385316848754883
    4. ',' → logprob: -7.885316848754883
    5. 'def' → logprob: -8.135316848754883
    6. '.' → logprob: -8.635316848754883
    7. '```' → logprob: -10.135316848754883
    8. '(
' → logprob: -10.385316848754883
    9. 'lambda' → logprob: -10.635316848754883
    10. ' ' → logprob: -10.760316848754883

Token 5: 'from' (ID: 2845)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '(' → logprob: -0.004195813555270433
    2. '(lambda' → logprob: -6.254195690155029
    3. '\' → logprob: -7.254195690155029
    4. '(
' → logprob: -7.629195690155029
    5. 'def' → logprob: -7.629195690155029
    6. '```' → logprob: -8.754196166992188
    7. '\(' → logprob: -9.379196166992188
    8. ' (' → logprob: -9.629196166992188
    9. 'a' → logprob: -10.004196166992188
    10. ' ' → logprob: -10.504196166992188

Token 6: ' operator' (ID: 11019)
  Prédit: ' math'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' math' → logprob: -0.9289020299911499
    2. ' operator' → logprob: -1.42890202999115
    3. ' itertools' → logprob: -1.55390202999115
    4. ' collections' → logprob: -1.92890202999115
    5. ' os' → logprob: -4.9289021492004395
    6. 'operator' → logprob: -7.4289021492004395
    7. ' sys' → logprob: -8.553901672363281
    8. ' typing' → logprob: -8.553901672363281
    9. 'collections' → logprob: -8.928901672363281
    10. 'math' → logprob: -9.053901672363281

Token 7: ' import' (ID: 1588)
  Prédit: ' import'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' import' → logprob: -0.02113731950521469
    2. 'import' → logprob: -4.021137237548828
    3. '.' → logprob: -6.396137237548828
    4. ' ' → logprob: -6.771137237548828
    5. ' .' → logprob: -9.021137237548828
    6. '.import' → logprob: -10.396137237548828
    7. '	import' → logprob: -12.021137237548828
    8. '<|end|>' → logprob: -12.896137237548828
    9. '_import' → logprob: -13.396137237548828
    10. '-import' → logprob: -13.896137237548828

Token 8: ' add' (ID: 1147)
  Prédit: ' add'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' add' → logprob: -0.31903505325317383
    2. ' import' → logprob: -1.9440350532531738
    3. 'add' → logprob: -2.444035053253174
    4. ' ' → logprob: -4.069035053253174
    5. ' mul' → logprob: -4.194035053253174
    6. 'import' → logprob: -4.819035053253174
    7. 'mul' → logprob: -6.194035053253174
    8. ' item' → logprob: -8.694034576416016
    9. 'item' → logprob: -9.569034576416016
    10. ' ad' → logprob: -9.819034576416016

Token 9: ',' (ID: 11)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(' → logprob: -0.2564718425273895
    2. '\' → logprob: -2.631471872329712
    3. '(
' → logprob: -3.256471872329712
    4. '\n' → logprob: -3.256471872329712
    5. ',' → logprob: -3.756471872329712
    6. '#' → logprob: -4.631471633911133
    7. ' ' → logprob: -5.131471633911133
    8. 'def' → logprob: -5.131471633911133
    9. ')' → logprob: -5.506471633911133
    10. '
' → logprob: -5.756471633911133

Token 10: ' mul' (ID: 9975)
  Prédit: ' mul'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' mul' → logprob: -0.652916431427002
    2. 'mul' → logprob: -0.777916431427002
    3. ' sub' → logprob: -4.652916431427002
    4. 'sub' → logprob: -4.652916431427002
    5. '```' → logprob: -8.652915954589844
    6. 'getitem' → logprob: -8.777915954589844
    7. ' i' → logprob: -8.902915954589844
    8. 'item' → logprob: -9.027915954589844
    9. ' ' → logprob: -9.277915954589844
    10. 'i' → logprob: -9.527915954589844

Token 11: '

' (ID: 279)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '(' → logprob: -0.027793940156698227
    2. '(
' → logprob: -3.9027938842773438
    3. '#' → logprob: -6.152793884277344
    4. ',' → logprob: -6.277793884277344
    5. '\' → logprob: -6.527793884277344
    6. '\(' → logprob: -8.152793884277344
    7. 'def' → logprob: -8.277793884277344
    8. '(

' → logprob: -8.527793884277344
    9. '*' → logprob: -8.652793884277344
    10. '`' → logprob: -8.902793884277344

Token 12: 'N' (ID: 45)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '(' → logprob: -0.06855756789445877
    2. '#' → logprob: -3.3185575008392334
    3. ',' → logprob: -4.6935577392578125
    4. '(
' → logprob: -5.1935577392578125
    5. 'def' → logprob: -5.8185577392578125
    6. 'result' → logprob: -6.1935577392578125
    7. '[' → logprob: -6.3185577392578125
    8. '\' → logprob: -6.3185577392578125
    9. 'a' → logprob: -6.3185577392578125
    10. '`' → logprob: -6.9435577392578125

Token 13: ',' (ID: 11)
  Prédit: '='
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '=' → logprob: -0.6142820119857788
    2. ' =' → logprob: -0.9892820119857788
    3. '_' → logprob: -2.7392821311950684
    4. ' ' → logprob: -4.364282131195068
    5. ',' → logprob: -4.989282131195068
    6. 'u' → logprob: -7.364282131195068
    7. '  ' → logprob: -7.489282131195068
    8. ')' → logprob: -7.864282131195068
    9. '   ' → logprob: -8.36428165435791
    10. '.' → logprob: -8.36428165435791

Token 14: ' K' (ID: 658)
  Prédit: ' K'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' K' → logprob: -0.5346543788909912
    2. 'K' → logprob: -1.2846543788909912
    3. ' M' → logprob: -3.159654378890991
    4. ' ' → logprob: -3.284654378890991
    5. 'M' → logprob: -3.784654378890991
    6. ' =' → logprob: -5.28465461730957
    7. 'input' → logprob: -5.28465461730957
    8. '=' → logprob: -5.53465461730957
    9. '  ' → logprob: -6.03465461730957
    10. '"' → logprob: -6.03465461730957

Token 15: ' =' (ID: 314)
  Prédit: ' ='
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' =' → logprob: -0.02632933109998703
    2. '=' → logprob: -3.651329278945923
    3. ',' → logprob: -10.526329040527344
    4. ' =
' → logprob: -14.026329040527344
    5. ' ' → logprob: -14.276329040527344
    6. ' ,' → logprob: -15.276329040527344
    7. ')' → logprob: -15.526329040527344
    8. ' =",' → logprob: -16.526329040527344
    9. ' =)' → logprob: -16.901329040527344
    10. '<|end|>' → logprob: -17.026329040527344

Token 16: ' (' (ID: 350)
  Prédit: ' map'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' map' → logprob: -0.13614124059677124
    2. 'map' → logprob: -2.386141300201416
    3. ' ' → logprob: -3.511141300201416
    4. '10' → logprob: -6.386141300201416
    5. ' int' → logprob: -6.636141300201416
    6. 'int' → logprob: -7.011141300201416
    7. '5' → logprob: -7.261141300201416
    8. '0' → logprob: -8.011140823364258
    9. ' input' → logprob: -8.511140823364258
    10. 'input' → logprob: -8.636140823364258

Token 17: 'lambda' (ID: 35280)
  Prédit: '10'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '10' → logprob: -0.8577618598937988
    2. '5' → logprob: -0.9827618598937988
    3. 'int' → logprob: -2.107761859893799
    4. 'map' → logprob: -3.732761859893799
    5. ' ' → logprob: -3.857761859893799
    6. 'input' → logprob: -4.482761859893799
    7. ')' → logprob: -4.982761859893799
    8. '100' → logprob: -5.232761859893799
    9. '0' → logprob: -5.982761859893799
    10. ' int' → logprob: -6.107761859893799

Token 18: ' f' (ID: 285)
  Prédit: ' x'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' x' → logprob: -0.5158857107162476
    2. ' n' → logprob: -1.1408857107162476
    3. 'x' → logprob: -2.890885829925537
    4. 'n' → logprob: -4.515885829925537
    5. ' s' → logprob: -5.140885829925537
    6. ' lambda' → logprob: -6.015885829925537
    7. ' a' → logprob: -6.140885829925537
    8. ' l' → logprob: -6.265885829925537
    9. 'a' → logprob: -7.140885829925537
    10. ' lst' → logprob: -7.140885829925537

Token 19: ':' (ID: 25)
  Prédit: ' f'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' f' → logprob: -0.8135858178138733
    2. ' n' → logprob: -1.4385857582092285
    3. 'f' → logprob: -1.8135857582092285
    4. ':' → logprob: -2.9385857582092285
    5. 'n' → logprob: -3.1885857582092285
    6. ' lambda' → logprob: -3.1885857582092285
    7. 'lambda' → logprob: -4.8135857582092285
    8. '=lambda' → logprob: -5.4385857582092285
    9. '(lambda' → logprob: -6.0635857582092285
    10. ' :' → logprob: -6.4385857582092285

Token 20: ' f' (ID: 285)
  Prédit: 'lambda'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'lambda' → logprob: -0.6735451221466064
    2. ' lambda' → logprob: -1.5485451221466064
    3. '(lambda' → logprob: -1.9235451221466064
    4. 'f' → logprob: -2.2985451221466064
    5. ' f' → logprob: -3.7985451221466064
    6. '(f' → logprob: -5.548544883728027
    7. ' (' → logprob: -5.548544883728027
    8. '(n' → logprob: -8.798544883728027
    9. '   ' → logprob: -9.423544883728027
    10. ')' → logprob: -9.423544883728027

Token 21: '(f' (ID: 1526)
  Prédit: 'lambda'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'lambda' → logprob: -0.40375232696533203
    2. '(lambda' → logprob: -1.278752326965332
    3. 'int' → logprob: -4.153752326965332
    4. '(int' → logprob: -4.403752326965332
    5. ')' → logprob: -4.903752326965332
    6. ':' → logprob: -5.403752326965332
    7. 'f' → logprob: -5.778752326965332
    8. '(f' → logprob: -6.403752326965332
    9. ' ' → logprob: -6.528752326965332
    10. 'input' → logprob: -6.653752326965332

Token 22: '))(' (ID: 72297)
  Prédit: ')('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')(' → logprob: -0.38077032566070557
    2. '(lambda' → logprob: -1.3807703256607056
    3. '))(' → logprob: -3.380770206451416
    4. '=lambda' → logprob: -4.630770206451416
    5. ',' → logprob: -4.755770206451416
    6. 'lambda' → logprob: -5.005770206451416
    7. '))' → logprob: -5.755770206451416
    8. ')' → logprob: -6.505770206451416
    9. ' lambda' → logprob: -6.755770206451416
    10. ')(
' → logprob: -8.880770683288574

Token 23: 'lambda' (ID: 35280)
  Prédit: 'lambda'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'lambda' → logprob: -0.010307017713785172
    2. ' lambda' → logprob: -5.0103068351745605
    3. '(lambda' → logprob: -5.6353068351745605
    4. '=lambda' → logprob: -11.385307312011719
    5. ')' → logprob: -13.760307312011719
    6. 'def' → logprob: -14.260307312011719
    7. '   ' → logprob: -14.385307312011719
    8. 'λ' → logprob: -14.635307312011719
    9. '_lambda' → logprob: -14.885307312011719
    10. '```' → logprob: -15.760307312011719

Token 24: ' self' (ID: 1051)
  Prédit: 'f'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'f' → logprob: -0.09522605687379837
    2. 'lambda' → logprob: -2.5952260494232178
    3. ' f' → logprob: -4.345226287841797
    4. ' lambda' → logprob: -5.845226287841797
    5. 'g' → logprob: -8.595226287841797
    6. 'x' → logprob: -8.970226287841797
    7. 'n' → logprob: -11.470226287841797
    8. 'self' → logprob: -12.220226287841797
    9. 'l' → logprob: -12.845226287841797
    10. 'a' → logprob: -13.095226287841797

Token 25: ':' (ID: 25)
  Prédit: ','
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ',' → logprob: -0.6298319697380066
    2. ' n' → logprob: -1.1298320293426514
    3. ' lambda' → logprob: -2.5048320293426514
    4. 'lambda' → logprob: -3.0048320293426514
    5. ',n' → logprob: -4.629831790924072
    6. 'n' → logprob: -6.254831790924072
    7. ' ,' → logprob: -7.254831790924072
    8. ' x' → logprob: -8.50483226776123
    9. ' ' → logprob: -9.50483226776123
    10. 'f' → logprob: -9.87983226776123

Token 26: ' list' (ID: 1562)
  Prédit: 'lambda'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'lambda' → logprob: -0.09062162041664124
    2. ' lambda' → logprob: -2.5906217098236084
    3. '(lambda' → logprob: -4.840621471405029
    4. 'int' → logprob: -5.840621471405029
    5. 'input' → logprob: -7.840621471405029
    6. ' int' → logprob: -8.840621948242188
    7. ' input' → logprob: -9.465621948242188
    8. ' (' → logprob: -9.590621948242188
    9. ' ' → logprob: -9.965621948242188
    10. '   ' → logprob: -10.090621948242188

Token 27: '(map' (ID: 16946)
  Prédit: '(map'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(map' → logprob: -0.004456228110939264
    2. '(' → logprob: -5.754456043243408
    3. '(int' → logprob: -6.879456043243408
    4. '(lambda' → logprob: -8.879456520080566
    5. '(input' → logprob: -10.004456520080566
    6. '(range' → logprob: -10.254456520080566
    7. '(
' → logprob: -12.004456520080566
    8. 'map' → logprob: -12.129456520080566
    9. '(__' → logprob: -12.504456520080566
    10. '(filter' → logprob: -12.879456520080566

Token 28: '(int' (ID: 2742)
  Prédit: '(int'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(int' → logprob: -0.0016069859266281128
    2. '(lambda' → logprob: -7.6266069412231445
    3. 'int' → logprob: -7.8766069412231445
    4. ',int' → logprob: -8.001606941223145
    5. '(' → logprob: -8.126606941223145
    6. '<int' → logprob: -10.126606941223145
    7. '(eval' → logprob: -11.251606941223145
    8. ')' → logprob: -11.376606941223145
    9. '(str' → logprob: -11.876606941223145
    10. '(
' → logprob: -12.126606941223145

Token 29: ',' (ID: 11)
  Prédit: 'input'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'input' → logprob: -0.6961632370948792
    2. '(input' → logprob: -1.1961631774902344
    3. ',input' → logprob: -1.6961631774902344
    4. ',' → logprob: -4.446163177490234
    5. ' input' → logprob: -5.821163177490234
    6. '(' → logprob: -7.321163177490234
    7. '```' → logprob: -9.071163177490234
    8. '=input' → logprob: -9.321163177490234
    9. ' ' → logprob: -10.071163177490234
    10. '	input' → logprob: -10.321163177490234

Token 30: ' input' (ID: 3422)
  Prédit: 'input'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'input' → logprob: -0.024024607613682747
    2. ' input' → logprob: -3.774024724960327
    3. '(input' → logprob: -7.649024486541748
    4. ',input' → logprob: -8.524024963378906
    5. ')' → logprob: -9.649024963378906
    6. '=input' → logprob: -11.399024963378906
    7. '```' → logprob: -12.274024963378906
    8. '<input' → logprob: -12.274024963378906
    9. 'open' → logprob: -12.399024963378906
    10. '	input' → logprob: -12.774024963378906

Token 31: '().' (ID: 1454)
  Prédit: '().'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '().' → logprob: -0.0172922033816576
    2. '()))' → logprob: -4.517292022705078
    3. '()' → logprob: -6.267292022705078
    4. '())))' → logprob: -6.392292022705078
    5. '(()' → logprob: -6.892292022705078
    6. '(' → logprob: -7.392292022705078
    7. '()));' → logprob: -8.017292022705078
    8. '())' → logprob: -8.017292022705078
    9. '())).' → logprob: -9.642292022705078
    10. '('' → logprob: -9.892292022705078

Token 32: 'split' (ID: 13627)
  Prédit: 'split'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'split' → logprob: -0.0075109112076461315
    2. 'strip' → logprob: -5.257511138916016
    3. ' split' → logprob: -6.132511138916016
    4. 'read' → logprob: -9.757511138916016
    5. 'rstrip' → logprob: -10.507511138916016
    6. ' strip' → logprob: -11.382511138916016
    7. '(split' → logprob: -13.007511138916016
    8. ' readline' → logprob: -13.257511138916016
    9. 'spl' → logprob: -13.632511138916016
    10. '().' → logprob: -14.757511138916016

Token 33: '())))' (ID: 168342)
  Prédit: '())))'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '())))' → logprob: -0.6150239109992981
    2. '()))' → logprob: -0.8650239109992981
    3. '())' → logprob: -4.115024089813232
    4. '()' → logprob: -4.615024089813232
    5. '(' → logprob: -5.240024089813232
    6. ')))' → logprob: -5.365024089813232
    7. '())))
' → logprob: -6.490024089813232
    8. '))' → logprob: -8.240023612976074
    9. '('' → logprob: -8.990023612976074
    10. '()));' → logprob: -9.740023612976074

Token 34: ' ' (ID: 220)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ')' → logprob: -0.7334869503974915
    2. '()' → logprob: -1.7334868907928467
    3. '' → logprob: -1.9834868907928467
    4. '<|end|>' → logprob: -2.2334868907928467
    5. '
' → logprob: -3.7334868907928467
    6. '()
' → logprob: -4.858487129211426
    7. '\n' → logprob: -4.983487129211426
    8. 'newline' → logprob: -5.108487129211426
    9. '\' → logprob: -5.233487129211426
    10. '(' → logprob: -5.358487129211426

Token 35: ' #' (ID: 1069)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ')' → logprob: -0.35433873534202576
    2. '()' → logprob: -1.8543387651443481
    3. '
' → logprob: -3.1043386459350586
    4. '(' → logprob: -3.9793386459350586
    5. '' → logprob: -4.104338645935059
    6. '()
' → logprob: -4.854338645935059
    7. '(
' → logprob: -4.854338645935059
    8. ')
' → logprob: -4.854338645935059
    9. '\n' → logprob: -4.979338645935059
    10. '#' → logprob: -5.229338645935059

Token 36: ' Double' (ID: 11646)
  Prédit: '
'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '
' → logprob: -0.7449821829795837
    2. '<|end|>' → logprob: -1.6199822425842285
    3. '\n' → logprob: -2.2449822425842285
    4. ' ' → logprob: -2.4949822425842285
    5. ')' → logprob: -3.1199822425842285
    6. ' 
' → logprob: -3.2449822425842285
    7. '<|end|>' → logprob: -4.7449822425842285
    8. '  
' → logprob: -4.8699822425842285
    9. 'newline' → logprob: -4.8699822425842285
    10. '\' → logprob: -4.9949822425842285

Token 37: ' lambda' (ID: 27871)
  Prédit: '_'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '_' → logprob: -0.9267277121543884
    2. 'token' → logprob: -1.6767277717590332
    3. ')' → logprob: -2.426727771759033
    4. ' parentheses' → logprob: -2.551727771759033
    5. 'parent' → logprob: -3.426727771759033
    6. 'underscore' → logprob: -3.551727771759033
    7. 'check' → logprob: -3.676727771759033
    8. '_token' → logprob: -4.301727771759033
    9. ' token' → logprob: -4.551727771759033
    10. 'f' → logprob: -4.551727771759033

Token 38: ' pour' (ID: 1930)
  Prédit: '
'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '
' → logprob: -0.24421179294586182
    2. '' → logprob: -2.3692116737365723
    3. ')' → logprob: -3.6192116737365723
    4. '<|end|>' → logprob: -3.8692116737365723
    5. ' 
' → logprob: -4.494211673736572
    6. '
' → logprob: -4.619211673736572
    7. 'newline' → logprob: -4.744211673736572
    8. ' ' → logprob: -5.119211673736572
    9. '

' → logprob: -5.494211673736572
    10. '```' → logprob: -5.494211673736572

Token 39: ' complex' (ID: 8012)
  Prédit: ' lire'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' lire' → logprob: -0.35129860043525696
    2. 'r' → logprob: -2.6012985706329346
    3. ' récupérer' → logprob: -2.6012985706329346
    4. ' la' → logprob: -3.6012985706329346
    5. 'l' → logprob: -3.9762985706329346
    6. ' read' → logprob: -3.9762985706329346
    7. ' unpack' → logprob: -4.101298809051514
    8. ' input' → logprob: -4.476298809051514
    9. ' parser' → logprob: -5.226298809051514
    10. ' obtenir' → logprob: -5.351298809051514

Token 40: 'ifier' (ID: 4550)
  Prédit: 'ité'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'ité' → logprob: -0.05033154413104057
    2. 'ity' → logprob: -4.0503315925598145
    3. 'é' → logprob: -4.9253315925598145
    4. 'itié' → logprob: -5.0503315925598145
    5. 'it' → logprob: -5.1753315925598145
    6. 'ités' → logprob: -5.8003315925598145
    7. 'ément' → logprob: -6.6753315925598145
    8. 'ification' → logprob: -6.8003315925598145
    9. 'e' → logprob: -7.4253315925598145
    10. 'er' → logprob: -7.5503315925598145

Token 41: '

' (ID: 279)
  Prédit: '
'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '
' → logprob: -0.19545575976371765
    2. '' → logprob: -2.69545578956604
    3. ')' → logprob: -4.070455551147461
    4. ' 
' → logprob: -4.070455551147461
    5. '#' → logprob: -4.195455551147461
    6. ' ' → logprob: -4.945455551147461
    7. '
' → logprob: -4.945455551147461
    8. '\n' → logprob: -5.195455551147461
    9. '*' → logprob: -5.445455551147461
    10. '[' → logprob: -5.820455551147461

Token 42: 'dose' (ID: 157327)
  Prédit: 'result'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'result' → logprob: -0.8309254050254822
    2. 'for' → logprob: -1.705925464630127
    3. 'a' → logprob: -2.580925464630127
    4. '#' → logprob: -3.080925464630127
    5. 'if' → logprob: -3.330925464630127
    6. 'print' → logprob: -3.330925464630127
    7. 'n' → logprob: -3.580925464630127
    8. 'x' → logprob: -4.330925464630127
    9. 'dp' → logprob: -4.330925464630127
    10. 'res' → logprob: -4.455925464630127

Token 43: 'q' (ID: 80)
  Prédit: 's'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 's' → logprob: -1.287941575050354
    2. '(' → logprob: -1.662941575050354
    3. '=' → logprob: -1.662941575050354
    4. ' =' → logprob: -1.912941575050354
    5. '_' → logprob: -2.0379414558410645
    6. '[' → logprob: -3.1629414558410645
    7. 'd' → logprob: -5.1629414558410645
    8. ' ' → logprob: -5.2879414558410645
    9. 'r' → logprob: -5.4129414558410645
    10. 'n' → logprob: -5.6629414558410645

Token 44: ' =' (ID: 314)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(' → logprob: -0.2407914251089096
    2. 'u' → logprob: -2.1157913208007812
    3. 'ue' → logprob: -3.3657913208007812
    4. '=' → logprob: -3.6157913208007812
    5. '(u' → logprob: -4.740791320800781
    6. 's' → logprob: -4.990791320800781
    7. ' =' → logprob: -5.365791320800781
    8. 'ues' → logprob: -6.740791320800781
    9. 'uer' → logprob: -6.990791320800781
    10. '_' → logprob: -6.990791320800781

Token 45: ' lambda' (ID: 27871)
  Prédit: '['
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '[' → logprob: -0.6927931904792786
    2. '[]' → logprob: -1.9427931308746338
    3. 'range' → logprob: -2.442793130874634
    4. 'mul' → logprob: -2.442793130874634
    5. 'list' → logprob: -3.067793130874634
    6. '[m' → logprob: -3.317793130874634
    7. '[int' → logprob: -3.942793130874634
    8. '[K' → logprob: -4.442793369293213
    9. '[list' → logprob: -4.817793369293213
    10. ' [' → logprob: -4.942793369293213

Token 46: ' lst' (ID: 33384)
  Prédit: ' x'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' x' → logprob: -1.324344277381897
    2. ' lambda' → logprob: -1.574344277381897
    3. 'x' → logprob: -1.824344277381897
    4. 'lambda' → logprob: -2.1993441581726074
    5. ' list' → logprob: -2.6993441581726074
    6. ' n' → logprob: -2.9493441581726074
    7. ' a' → logprob: -3.6993441581726074
    8. 'n' → logprob: -4.324344158172607
    9. 'list' → logprob: -4.324344158172607
    10. 'range' → logprob: -4.699344158172607

Token 47: ':' (ID: 25)
  Prédit: ':'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ':' → logprob: -0.4067484140396118
    2. ',' → logprob: -1.1567484140396118
    3. ' :' → logprob: -4.156748294830322
    4. '=' → logprob: -6.906748294830322
    5. '[:' → logprob: -7.156748294830322
    6. ',:' → logprob: -7.906748294830322
    7. ':list' → logprob: -8.15674877166748
    8. ' ,' → logprob: -8.28174877166748
    9. '[' → logprob: -8.53174877166748
    10. '[:-' → logprob: -8.90674877166748

Token 48: ' reduce' (ID: 10389)
  Prédit: ' ['
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' [' → logprob: -0.9160830974578857
    2. '[' → logprob: -1.6660830974578857
    3. ' reduce' → logprob: -2.4160830974578857
    4. 'reduce' → logprob: -2.4160830974578857
    5. ' list' → logprob: -3.2910830974578857
    6. ' lst' → logprob: -3.2910830974578857
    7. ' sum' → logprob: -3.4160830974578857
    8. 'lst' → logprob: -3.5410830974578857
    9. 'list' → logprob: -3.9160830974578857
    10. 'sum' → logprob: -4.166083335876465

Token 49: '(m' (ID: 2145)
  Prédit: '(add'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(add' → logprob: -0.05003891512751579
    2. '(' → logprob: -3.1750388145446777
    3. '(lambda' → logprob: -5.675038814544678
    4. '(m' → logprob: -5.675038814544678
    5. '(operator' → logprob: -8.925039291381836
    6. 'add' → logprob: -11.425039291381836
    7. ' add' → logprob: -13.050039291381836
    8. '(
' → logprob: -13.175039291381836
    9. '(op' → logprob: -13.425039291381836
    10. '	add' → logprob: -13.800039291381836

Token 50: 'ul' (ID: 361)
  Prédit: 'ul'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'ul' → logprob: -5.347765181795694e-05
    2. 'ap' → logprob: -10.250053405761719
    3. '<ul' → logprob: -11.125053405761719
    4. ' ul' → logprob: -13.625053405761719
    5. 'ул' → logprob: -14.000053405761719
    6. 'ult' → logprob: -14.375053405761719
    7. 'u' → logprob: -15.000053405761719
    8. 'ultiply' → logprob: -16.37505340576172
    9. '[' → logprob: -17.12505340576172
    10. 'Ul' → logprob: -17.37505340576172

Token 51: ',' (ID: 11)
  Prédit: ','
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ',' → logprob: -0.0023167727049440145
    2. '(' → logprob: -6.877316951751709
    3. '(lambda' → logprob: -7.377316951751709
    4. ' ,' → logprob: -8.50231647491455
    5. '(operator' → logprob: -9.62731647491455
    6. 'lambda' → logprob: -9.87731647491455
    7. 'operator' → logprob: -10.00231647491455
    8. ',(' → logprob: -10.00231647491455
    9. ')' → logprob: -10.00231647491455
    10. ',int' → logprob: -10.12731647491455

Token 52: ' lst' (ID: 33384)
  Prédit: 'lst'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'lst' → logprob: -0.3167581856250763
    2. ' lst' → logprob: -1.566758155822754
    3. '[' → logprob: -3.066758155822754
    4. ' [' → logprob: -4.316758155822754
    5. '(lst' → logprob: -6.941758155822754
    6. '[l' → logprob: -7.816758155822754
    7. ' map' → logprob: -8.316758155822754
    8. ' (' → logprob: -8.566758155822754
    9. '(' → logprob: -8.816758155822754
    10. '[*' → logprob: -8.941758155822754

Token 53: ',' (ID: 11)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')' → logprob: -0.3938431143760681
    2. ',' → logprob: -1.143843173980713
    3. ')+' → logprob: -5.768843173980713
    4. '),' → logprob: -7.143843173980713
    5. '(' → logprob: -7.518843173980713
    6. '))' → logprob: -7.643843173980713
    7. ' )' → logprob: -7.643843173980713
    8. ')*' → logprob: -7.768843173980713
    9. '[' → logprob: -8.018842697143555
    10. ' ,' → logprob: -8.518842697143555

Token 54: ' ' (ID: 220)
  Prédit: '1'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '1' → logprob: -0.0011810619616881013
    2. ' ' → logprob: -7.001181125640869
    3. 'K' → logprob: -8.501180648803711
    4. 'N' → logprob: -10.876180648803711
    5. '2' → logprob: -11.501180648803711
    6. '10' → logprob: -11.501180648803711
    7. ' K' → logprob: -11.876180648803711
    8. 'int' → logprob: -12.501180648803711
    9. '100' → logprob: -12.876180648803711
    10. 'len' → logprob: -13.001180648803711

Token 55: '1' (ID: 16)
  Prédit: '1'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '1' → logprob: -0.0006372620700858533
    2. 'K' → logprob: -7.875637054443359
    3. 'N' → logprob: -9.50063705444336
    4. ' ' → logprob: -9.75063705444336
    5. '2' → logprob: -9.87563705444336
    6. 'len' → logprob: -10.75063705444336
    7. '10' → logprob: -10.87563705444336
    8. 'int' → logprob: -11.75063705444336
    9. '100' → logprob: -12.37563705444336
    10. '0' → logprob: -13.25063705444336

Token 56: ')
' (ID: 446)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ')' → logprob: -0.0009183663059957325
    2. '(' → logprob: -7.500918388366699
    3. ')*' → logprob: -8.6259183883667
    4. ' )' → logprob: -9.5009183883667
    5. '[' → logprob: -10.6259183883667
    6. '))' → logprob: -10.8759183883667
    7. '*' → logprob: -11.3759183883667
    8. '*)' → logprob: -11.5009183883667
    9. '),' → logprob: -12.0009183883667
    10. ',' → logprob: -12.2509183883667

Token 57: 'checker' (ID: 140018)
  Prédit: '*'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '*' → logprob: -1.260214924812317
    2. ')' → logprob: -2.2602148056030273
    3. '[' → logprob: -2.2602148056030273
    4. '#' → logprob: -2.5102148056030273
    5. 'print' → logprob: -2.5102148056030273
    6. 'N' → logprob: -3.3852148056030273
    7. '(' → logprob: -3.3852148056030273
    8. 'K' → logprob: -3.6352148056030273
    9. '<|end|>' → logprob: -3.6352148056030273
    10. 'for' → logprob: -4.260214805603027

Token 58: ' =' (ID: 314)
  Prédit: ' ='
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' =' → logprob: -0.5844482183456421
    2. '=' → logprob: -0.9594482183456421
    3. '(' → logprob: -2.9594483375549316
    4. '=lambda' → logprob: -5.209448337554932
    5. 's' → logprob: -6.584448337554932
    6. '_' → logprob: -8.084447860717773
    7. '(lambda' → logprob: -9.209447860717773
    8. ')' → logprob: -9.334447860717773
    9. '(s' → logprob: -9.959447860717773
    10. ' ' → logprob: -10.209447860717773

Token 59: ' lambda' (ID: 27871)
  Prédit: ' lambda'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' lambda' → logprob: -0.35559025406837463
    2. 'lambda' → logprob: -1.2305902242660522
    3. '(lambda' → logprob: -4.980590343475342
    4. '=lambda' → logprob: -8.480589866638184
    5. ' lamb' → logprob: -11.230589866638184
    6. ' ' → logprob: -11.730589866638184
    7. '   ' → logprob: -13.043089866638184
    8. ' (' → logprob: -13.230589866638184
    9. '    ' → logprob: -13.293089866638184
    10. 'all' → logprob: -13.605589866638184

Token 60: ' x' (ID: 1215)
  Prédit: ' lst'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' lst' → logprob: -0.12151914834976196
    2. 'lst' → logprob: -2.746519088745117
    3. ' lambda' → logprob: -3.246519088745117
    4. ' x' → logprob: -5.371519088745117
    5. 'lambda' → logprob: -5.371519088745117
    6. 'x' → logprob: -6.996519088745117
    7. 's' → logprob: -8.871519088745117
    8. ' seq' → logprob: -8.996519088745117
    9. ' len' → logprob: -9.121519088745117
    10. ' s' → logprob: -9.121519088745117

Token 61: ',' (ID: 11)
  Prédit: ':'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ':' → logprob: -0.016791323199868202
    2. ' :' → logprob: -4.391791343688965
    3. ',' → logprob: -5.766791343688965
    4. ':x' → logprob: -7.641791343688965
    5. ',:' → logprob: -7.641791343688965
    6. ',x' → logprob: -9.391791343688965
    7. '_:' → logprob: -10.266791343688965
    8. ':,' → logprob: -11.391791343688965
    9. '=:' → logprob: -12.016791343688965
    10. 'x' → logprob: -12.266791343688965

Token 62: ' y' (ID: 342)
  Prédit: 'y'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'y' → logprob: -0.9379123449325562
    2. 'lst' → logprob: -1.5629123449325562
    3. 'K' → logprob: -1.8129123449325562
    4. ' y' → logprob: -2.3129124641418457
    5. ' lst' → logprob: -3.1879124641418457
    6. 'lambda' → logprob: -3.1879124641418457
    7. ' K' → logprob: -3.9379124641418457
    8. ' lambda' → logprob: -4.187912464141846
    9. 'x' → logprob: -4.812912464141846
    10. 'N' → logprob: -5.937912464141846

Token 63: ':' (ID: 25)
  Prédit: ':'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ':' → logprob: -0.04504108801484108
    2. ' :' → logprob: -3.795041084289551
    3. ',' → logprob: -4.045041084289551
    4. ',:' → logprob: -5.795041084289551
    5. ':(' → logprob: -8.42004108428955
    6. ':x' → logprob: -8.67004108428955
    7. ':,' → logprob: -8.79504108428955
    8. '=' → logprob: -9.42004108428955
    9. ' :(' → logprob: -9.42004108428955
    10. ',x' → logprob: -10.29504108428955

Token 64: ' ' (ID: 220)
  Prédit: ' x'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' x' → logprob: -0.4119572341442108
    2. 'x' → logprob: -1.2869572639465332
    3. ' (' → logprob: -4.286957263946533
    4. '(x' → logprob: -4.536957263946533
    5. ' add' → logprob: -4.536957263946533
    6. ' all' → logprob: -4.661957263946533
    7. ' y' → logprob: -4.911957263946533
    8. 'y' → logprob: -6.661957263946533
    9. 'add' → logprob: -6.661957263946533
    10. 'all' → logprob: -6.786957263946533

Token 65: '1' (ID: 16)
  Prédit: 'x'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'x' → logprob: -0.26498740911483765
    2. ' x' → logprob: -2.3899874687194824
    3. 'add' → logprob: -2.7649874687194824
    4. ' add' → logprob: -4.139987468719482
    5. '(x' → logprob: -4.639987468719482
    6. 'mul' → logprob: -4.764987468719482
    7. 'y' → logprob: -4.889987468719482
    8. 'abs' → logprob: -5.139987468719482
    9. 'all' → logprob: -5.264987468719482
    10. 'dose' → logprob: -5.514987468719482

Token 66: ' -' (ID: 533)
  Prédit: ' if'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' if' → logprob: -0.07069911807775497
    2. 'if' → logprob: -3.3206992149353027
    3. '<|end|>' → logprob: -4.320699214935303
    4. '+' → logprob: -5.070699214935303
    5. ' ' → logprob: -5.320699214935303
    6. '(' → logprob: -6.445699214935303
    7. ' +' → logprob: -6.945699214935303
    8. '
' → logprob: -7.445699214935303
    9. ' *' → logprob: -7.695699214935303
    10. '  ' → logprob: -7.820699214935303

Token 67: ' int' (ID: 677)
  Prédit: 'abs'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'abs' → logprob: -0.8358856439590454
    2. 'int' → logprob: -1.9608856439590454
    3. 'x' → logprob: -2.085885524749756
    4. '(x' → logprob: -2.460885524749756
    5. '(abs' → logprob: -2.710885524749756
    6. 'y' → logprob: -3.585885524749756
    7. '(y' → logprob: -3.585885524749756
    8. '(' → logprob: -4.085885524749756
    9. '((' → logprob: -4.210885524749756
    10. '(int' → logprob: -4.210885524749756

Token 68: '(not' (ID: 44576)
  Prédit: '(x'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(x' → logprob: -0.5170456171035767
    2. '(' → logprob: -1.3920456171035767
    3. '(y' → logprob: -2.517045497894287
    4. '(not' → logprob: -3.142045497894287
    5. '(abs' → logprob: -4.017045497894287
    6. '((' → logprob: -5.017045497894287
    7. '(bool' → logprob: -5.142045497894287
    8. '('' → logprob: -8.142045974731445
    9. 'not' → logprob: -9.892045974731445
    10. 'x' → logprob: -10.142045974731445

Token 69: ' bool' (ID: 3792)
  Prédit: '(x'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '(x' → logprob: -1.0946383476257324
    2. '(' → logprob: -1.4696383476257324
    3. ' (' → logprob: -1.5946383476257324
    4. ' x' → logprob: -2.2196383476257324
    5. ' y' → logprob: -3.2196383476257324
    6. 'x' → logprob: -3.5946383476257324
    7. ' all' → logprob: -3.9696383476257324
    8. '(y' → logprob: -4.094638347625732
    9. 'y' → logprob: -5.719638347625732
    10. 'all' → logprob: -5.719638347625732

Token 70: '(x' (ID: 4061)
  Prédit: '(x'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(x' → logprob: -0.080960214138031
    2. '(y' → logprob: -2.955960273742676
    3. 'x' → logprob: -4.580960273742676
    4. '(' → logprob: -4.830960273742676
    5. '((' → logprob: -5.455960273742676
    6. ' x' → logprob: -6.705960273742676
    7. ' (' → logprob: -6.955960273742676
    8. 'y' → logprob: -8.080960273742676
    9. ' y' → logprob: -8.080960273742676
    10. '(add' → logprob: -8.830960273742676

Token 71: ' -' (ID: 533)
  Prédit: 'and'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'and' → logprob: -0.4737710654735565
    2. ' and' → logprob: -1.598771095275879
    3. '&' → logprob: -2.348771095275879
    4. ' or' → logprob: -3.348771095275879
    5. ' &' → logprob: -4.223771095275879
    6. '|' → logprob: -4.723771095275879
    7. 'or' → logprob: -4.723771095275879
    8. '%' → logprob: -5.473771095275879
    9. '*' → logprob: -5.848771095275879
    10. '*y' → logprob: -6.598771095275879

Token 72: ' (' (ID: 350)
  Prédit: 'y'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'y' → logprob: -0.04865061491727829
    2. ' y' → logprob: -3.0486505031585693
    3. '1' → logprob: -10.048650741577148
    4. ' ' → logprob: -11.923650741577148
    5. '2' → logprob: -13.173650741577148
    6. '(y' → logprob: -13.236150741577148
    7. 'x' → logprob: -13.611150741577148
    8. 'K' → logprob: -13.923650741577148
    9. ' (' → logprob: -13.923650741577148
    10. 'N' → logprob: -14.173650741577148

Token 73: 'x' (ID: 87)
  Prédit: 'y'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'y' → logprob: -0.07924578338861465
    2. ' y' → logprob: -2.5792458057403564
    3. 'K' → logprob: -9.204245567321777
    4. 'x' → logprob: -9.704245567321777
    5. ' ' → logprob: -10.204245567321777
    6. ' (' → logprob: -10.579245567321777
    7. '(y' → logprob: -10.704245567321777
    8. '1' → logprob: -10.829245567321777
    9. 'N' → logprob: -11.079245567321777
    10. ' K' → logprob: -11.204245567321777

Token 74: ' //' (ID: 602)
  Prédit: 'y'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'y' → logprob: -0.8289533853530884
    2. '%' → logprob: -1.0789533853530884
    3. ' %' → logprob: -2.203953266143799
    4. ' y' → logprob: -2.703953266143799
    5. ' ' → logprob: -4.078953266143799
    6. '+' → logprob: -4.703953266143799
    7. ')' → logprob: -5.703953266143799
    8. '+y' → logprob: -6.328953266143799
    9. '1' → logprob: -6.453953266143799
    10. '*y' → logprob: -6.516453266143799

Token 75: ' y' (ID: 342)
  Prédit: 'y'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'y' → logprob: -0.029846295714378357
    2. ' y' → logprob: -3.52984619140625
    3. '(y' → logprob: -10.27984619140625
    4. ' (' → logprob: -10.65484619140625
    5. ' ' → logprob: -11.52984619140625
    6. '(' → logprob: -12.15484619140625
    7. 'K' → logprob: -12.27984619140625
    8. 'x' → logprob: -12.27984619140625
    9. '2' → logprob: -13.15484619140625
    10. ')y' → logprob: -13.90484619140625

Token 76: ')' (ID: 8)
  Prédit: ')'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')' → logprob: -0.8837778568267822
    2. ')))' → logprob: -1.1337778568267822
    3. ')*' → logprob: -2.0087778568267822
    4. '*' → logprob: -2.5087778568267822
    5. ' *' → logprob: -4.008777618408203
    6. ' )' → logprob: -4.508777618408203
    7. '))' → logprob: -5.133777618408203
    8. '*y' → logprob: -5.133777618408203
    9. ' ' → logprob: -5.258777618408203
    10. ' ))' → logprob: -7.133777618408203

Token 77: ' *' (ID: 425)
  Prédit: ')))'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')))' → logprob: -0.9333807826042175
    2. '))' → logprob: -1.4333808422088623
    3. '*' → logprob: -1.6833808422088623
    4. '*y' → logprob: -2.8083808422088623
    5. ')' → logprob: -3.0583808422088623
    6. ' *' → logprob: -3.1833808422088623
    7. '%' → logprob: -4.808380603790283
    8. ' ))' → logprob: -5.058380603790283
    9. ' ' → logprob: -5.308380603790283
    10. ')*' → logprob: -5.683380603790283

Token 78: ' y' (ID: 342)
  Prédit: 'y'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'y' → logprob: -0.005239921621978283
    2. ' y' → logprob: -5.255239963531494
    3. ' ' → logprob: -12.880239486694336
    4. 'x' → logprob: -13.880239486694336
    5. '  ' → logprob: -14.630239486694336
    6. '	y' → logprob: -14.880239486694336
    7. '(y' → logprob: -14.880239486694336
    8. '   ' → logprob: -14.880239486694336
    9. '2' → logprob: -16.130239486694336
    10. '    ' → logprob: -16.255239486694336

Token 79: '))

' (ID: 9746)
  Prédit: '))'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '))' → logprob: -0.1299753338098526
    2. ')))' → logprob: -2.1299753189086914
    3. ')' → logprob: -6.004975318908691
    4. ' ))' → logprob: -8.129975318908691
    5. '))
' → logprob: -9.129975318908691
    6. '))))' → logprob: -9.879975318908691
    7. ' ' → logprob: -10.004975318908691
    8. ')))
' → logprob: -10.879975318908691
    9. ' )' → logprob: -12.004975318908691
    10. '),' → logprob: -12.129975318908691

Token 80: 'print' (ID: 1598)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '(' → logprob: -0.4837774932384491
    2. ' ' → logprob: -1.9837775230407715
    3. ')' → logprob: -2.4837775230407715
    4. '#' → logprob: -3.1087775230407715
    5. '*' → logprob: -3.2337775230407715
    6. '+' → logprob: -3.8587775230407715
    7. '[' → logprob: -3.9837775230407715
    8. ',' → logprob: -4.7337775230407715
    9. 'x' → logprob: -5.9837775230407715
    10. ' (' → logprob: -6.3587775230407715

Token 81: '(str' (ID: 7946)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '(' → logprob: -0.0003349890175741166
    2. '((' → logprob: -8.500334739685059
    3. '("("' → logprob: -9.875334739685059
    4. '('' → logprob: -10.750334739685059
    5. '(d' → logprob: -11.125334739685059
    6. '(print' → logprob: -12.000334739685059
    7. ' (' → logprob: -12.125334739685059
    8. '(check' → logprob: -12.250334739685059
    9. '(sum' → logprob: -12.375334739685059
    10. '(()' → logprob: -13.000334739685059

Token 82: '(re' (ID: 8178)
  Prédit: '(N'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '(N' → logprob: -0.8113843202590942
    2. '(' → logprob: -1.4363843202590942
    3. '(d' → logprob: -1.6863843202590942
    4. '(K' → logprob: -2.1863842010498047
    5. '((' → logprob: -5.186384201049805
    6. '(check' → logprob: -5.186384201049805
    7. '(sum' → logprob: -6.061384201049805
    8. '(pow' → logprob: -6.186384201049805
    9. '(len' → logprob: -6.936384201049805
    10. '(int' → logprob: -7.686384201049805

Token 83: 'duce' (ID: 21375)
  Prédit: 'duce'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'duce' → logprob: -0.012270165607333183
    2. 'ducer' → logprob: -5.262269973754883
    3. 'd' → logprob: -5.637269973754883
    4. 'verse' → logprob: -6.637269973754883
    5. 'dose' → logprob: -7.012269973754883
    6. 'du' → logprob: -7.262269973754883
    7. 'pr' → logprob: -8.512269973754883
    8. 'duced' → logprob: -9.512269973754883
    9. 'duc' → logprob: -9.887269973754883
    10. 'dux' → logprob: -10.012269973754883

Token 84: '(add' (ID: 40159)
  Prédit: '(add'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(add' → logprob: -0.4758537709712982
    2. '(' → logprob: -0.9758538007736206
    3. '(m' → logprob: -7.10085391998291
    4. ')' → logprob: -8.35085391998291
    5. '(
' → logprob: -8.97585391998291
    6. '((' → logprob: -9.47585391998291
    7. '(mult' → logprob: -9.47585391998291
    8. '(lambda' → logprob: -9.85085391998291
    9. ')add' → logprob: -9.85085391998291
    10. '('' → logprob: -10.35085391998291

Token 85: ',' (ID: 11)
  Prédit: ','
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ',' → logprob: -0.39478737115859985
    2. '(d' → logprob: -1.894787311553955
    3. '(' → logprob: -2.269787311553955
    4. ',d' → logprob: -3.769787311553955
    5. '(check' → logprob: -4.019787311553955
    6. '([' → logprob: -4.394787311553955
    7. ',(' → logprob: -5.144787311553955
    8. ',[' → logprob: -6.269787311553955
    9. '(range' → logprob: -6.269787311553955
    10. '(N' → logprob: -6.394787311553955

Token 86: ' [' (ID: 723)
  Prédit: '['
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '[' → logprob: -0.4569449722766876
    2. 'map' → logprob: -1.9569449424743652
    3. '[N' → logprob: -2.8319449424743652
    4. '(map' → logprob: -3.0819449424743652
    5. 'list' → logprob: -3.8319449424743652
    6. ' map' → logprob: -4.206944942474365
    7. ' [' → logprob: -4.206944942474365
    8. '[list' → logprob: -4.456944942474365
    9. 'checker' → logprob: -4.581944942474365
    10. 'range' → logprob: -4.706944942474365

Token 87: 'str' (ID: 689)
  Prédit: 'checker'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'checker' → logprob: -0.5997300148010254
    2. 'dose' → logprob: -1.0997300148010254
    3. ' checker' → logprob: -3.3497300148010254
    4. 'str' → logprob: -3.7247300148010254
    5. '1' → logprob: -4.849730014801025
    6. 'int' → logprob: -4.974730014801025
    7. 'check' → logprob: -5.099730014801025
    8. ' dose' → logprob: -5.224730014801025
    9. ' ' → logprob: -5.724730014801025
    10. '(' → logprob: -5.724730014801025

Token 88: '(check' (ID: 40506)
  Prédit: '(check'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(check' → logprob: -0.5165539979934692
    2. '(d' → logprob: -1.3915539979934692
    3. '(' → logprob: -2.1415538787841797
    4. '((' → logprob: -4.64155387878418
    5. '(x' → logprob: -4.76655387878418
    6. '(N' → logprob: -5.01655387878418
    7. '(i' → logprob: -6.01655387878418
    8. '(K' → logprob: -6.14155387878418
    9. '(len' → logprob: -7.01655387878418
    10. '(n' → logprob: -7.14155387878418

Token 89: 'er' (ID: 259)
  Prédit: 'er'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'er' → logprob: -0.00046844579628668725
    2. 'cker' → logprob: -9.000468254089355
    3. '(check' → logprob: -9.500468254089355
    4. '(x' → logprob: -9.500468254089355
    5. 'ker' → logprob: -9.625468254089355
    6. '(' → logprob: -10.625468254089355
    7. 'cer' → logprob: -11.125468254089355
    8. 'e' → logprob: -11.375468254089355
    9. '(er' → logprob: -11.750468254089355
    10. '(e' → logprob: -11.875468254089355

Token 90: '(N' (ID: 10564)
  Prédit: '(N'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(N' → logprob: -0.12144746631383896
    2. '(' → logprob: -2.4964475631713867
    3. '(i' → logprob: -4.871447563171387
    4. '(n' → logprob: -4.871447563171387
    5. '(x' → logprob: -5.121447563171387
    6. '(K' → logprob: -5.246447563171387
    7. '((' → logprob: -6.246447563171387
    8. '(
' → logprob: -7.871447563171387
    9. '(k' → logprob: -7.996447563171387
    10. ')(' → logprob: -7.996447563171387

Token 91: ',' (ID: 11)
  Prédit: ','
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ',' → logprob: -0.14757920801639557
    2. ' ,' → logprob: -2.2725791931152344
    3. ',i' → logprob: -4.522579193115234
    4. ' //' → logprob: -5.272579193115234
    5. ' -' → logprob: -5.647579193115234
    6. ',k' → logprob: -6.147579193115234
    7. ' %' → logprob: -6.397579193115234
    8. '//' → logprob: -6.522579193115234
    9. ' ' → logprob: -6.522579193115234
    10. '-' → logprob: -6.522579193115234

Token 92: ' K' (ID: 658)
  Prédit: 'i'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'i' → logprob: -0.280158132314682
    2. ' i' → logprob: -1.7801581621170044
    3. 'K' → logprob: -3.530158042907715
    4. 'k' → logprob: -4.155158042907715
    5. ' K' → logprob: -4.655158042907715
    6. ' k' → logprob: -5.280158042907715
    7. 'x' → logprob: -5.780158042907715
    8. 'd' → logprob: -5.905158042907715
    9. ' ' → logprob: -6.030158042907715
    10. 'n' → logprob: -6.780158042907715

Token 93: '))' (ID: 915)
  Prédit: '))'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '))' → logprob: -0.05371026694774628
    2. ')),' → logprob: -3.5537102222442627
    3. ')' → logprob: -4.803710460662842
    4. ')))' → logprob: -5.053710460662842
    5. ' ))' → logprob: -5.678710460662842
    6. '),' → logprob: -6.053710460662842
    7. ' ' → logprob: -7.428710460662842
    8. '+' → logprob: -7.428710460662842
    9. '))+' → logprob: -7.553710460662842
    10. '))))' → logprob: -7.928710460662842

Token 94: ' *' (ID: 425)
  Prédit: ','
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ',' → logprob: -0.6021671891212463
    2. ')' → logprob: -1.7271671295166016
    3. ')]' → logprob: -1.9771671295166016
    4. '),' → logprob: -2.9771671295166016
    5. ')])' → logprob: -3.2271671295166016
    6. ')],' → logprob: -4.227167129516602
    7. ' ,' → logprob: -4.852167129516602
    8. ' )' → logprob: -5.102167129516602
    9. ',K' → logprob: -5.602167129516602
    10. '(N' → logprob: -5.727167129516602

Token 95: ' (' (ID: 350)
  Prédit: 'K'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'K' → logprob: -0.3225423991680145
    2. 'N' → logprob: -1.822542428970337
    3. '(' → logprob: -3.322542428970337
    4. ' K' → logprob: -3.947542428970337
    5. '1' → logprob: -4.447542190551758
    6. ' ' → logprob: -4.822542190551758
    7. '2' → logprob: -5.072542190551758
    8. ' N' → logprob: -5.447542190551758
    9. '(K' → logprob: -5.697542190551758
    10. '(N' → logprob: -5.822542190551758

Token 96: 'checker' (ID: 140018)
  Prédit: 'K'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'K' → logprob: -0.6859464049339294
    2. 'N' → logprob: -0.8109464049339294
    3. 'i' → logprob: -4.435946464538574
    4. 'len' → logprob: -4.435946464538574
    5. '1' → logprob: -4.935946464538574
    6. '(' → logprob: -5.185946464538574
    7. '2' → logprob: -5.810946464538574
    8. 'int' → logprob: -6.560946464538574
    9. '(N' → logprob: -6.685946464538574
    10. ' K' → logprob: -7.060946464538574

Token 97: '(N' (ID: 10564)
  Prédit: '(N'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(N' → logprob: -0.14000749588012695
    2. '(K' → logprob: -2.140007495880127
    3. '(' → logprob: -4.390007495880127
    4. '(n' → logprob: -9.140007019042969
    5. ' (' → logprob: -9.390007019042969
    6. '(
' → logprob: -9.765007019042969
    7. '((' → logprob: -10.015007019042969
    8. 'K' → logprob: -10.140007019042969
    9. '(k' → logprob: -10.265007019042969
    10. '(i' → logprob: -10.265007019042969

Token 98: ',' (ID: 11)
  Prédit: ','
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ',' → logprob: -0.07330533117055893
    2. ',K' → logprob: -3.323305368423462
    3. ' ,' → logprob: -4.448305130004883
    4. '(K' → logprob: -4.823305130004883
    5. '(N' → logprob: -4.948305130004883
    6. '+' → logprob: -6.198305130004883
    7. ',N' → logprob: -6.448305130004883
    8. '(' → logprob: -6.948305130004883
    9. '-' → logprob: -7.323305130004883
    10. ' ' → logprob: -7.573305130004883

Token 99: ' K' (ID: 658)
  Prédit: 'K'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'K' → logprob: -0.2470039278268814
    2. 'N' → logprob: -2.2470040321350098
    3. ' K' → logprob: -2.7470040321350098
    4. '1' → logprob: -4.12200403213501
    5. ' N' → logprob: -4.62200403213501
    6. ' ' → logprob: -4.87200403213501
    7. 'i' → logprob: -5.12200403213501
    8. '2' → logprob: -6.49700403213501
    9. ' i' → logprob: -6.49700403213501
    10. '   ' → logprob: -6.74700403213501

Token 100: ')' (ID: 8)
  Prédit: ')'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')' → logprob: -0.9571322798728943
    2. '))' → logprob: -1.082132339477539
    3. '(N' → logprob: -2.207132339477539
    4. ')])' → logprob: -3.582132339477539
    5. ')]' → logprob: -3.707132339477539
    6. ')))' → logprob: -3.707132339477539
    7. '),' → logprob: -3.832132339477539
    8. ' )' → logprob: -3.832132339477539
    9. ')),' → logprob: -4.832132339477539
    10. ')],' → logprob: -5.207132339477539

Token 101: ' or' (ID: 503)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ')' → logprob: -1.2920336723327637
    2. ')])' → logprob: -1.4170336723327637
    3. ')]' → logprob: -1.6670336723327637
    4. '),' → logprob: -2.6670336723327637
    5. ' )' → logprob: -3.2920336723327637
    6. ',' → logprob: -3.5420336723327637
    7. ')],' → logprob: -3.5420336723327637
    8. '))' → logprob: -3.6670336723327637
    9. '-' → logprob: -4.042033672332764
    10. '**' → logprob: -4.042033672332764

Token 102: ' ' (ID: 220)
  Prédit: 'K'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'K' → logprob: -0.8592063784599304
    2. '1' → logprob: -1.4842064380645752
    3. 'N' → logprob: -1.9842064380645752
    4. 'dose' → logprob: -2.984206438064575
    5. '(N' → logprob: -3.359206438064575
    6. '(' → logprob: -3.484206438064575
    7. '0' → logprob: -4.484206199645996
    8. ' K' → logprob: -4.734206199645996
    9. 'len' → logprob: -4.859206199645996
    10. ' ' → logprob: -4.984206199645996

Token 103: '1' (ID: 16)
  Prédit: '1'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '1' → logprob: -0.6431773900985718
    2. 'K' → logprob: -1.5181773900985718
    3. 'checker' → logprob: -2.5181775093078613
    4. '(' → logprob: -3.0181775093078613
    5. 'N' → logprob: -3.3931775093078613
    6. '(N' → logprob: -3.8931775093078613
    7. '(check' → logprob: -4.268177509307861
    8. '0' → logprob: -4.518177509307861
    9. '(K' → logprob: -4.893177509307861
    10. '(not' → logprob: -5.268177509307861

Token 104: '),' (ID: 936)
  Prédit: ')]'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')]' → logprob: -0.584657609462738
    2. ')' → logprob: -2.084657669067383
    3. ')])' → logprob: -2.084657669067383
    4. '),' → logprob: -2.584657669067383
    5. ')],' → logprob: -3.084657669067383
    6. '))' → logprob: -3.459657669067383
    7. ',' → logprob: -3.834657669067383
    8. ')))' → logprob: -5.084657669067383
    9. ' )' → logprob: -6.084657669067383
    10. '(N' → logprob: -6.209657669067383

Token 105: ' '' (ID: 461)
  Prédit: 'str'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'str' → logprob: -0.7286961674690247
    2. ' str' → logprob: -1.3536961078643799
    3. ''' → logprob: -2.10369610786438
    4. ' '' → logprob: -3.22869610786438
    5. '"' → logprob: -3.85369610786438
    6. '')' → logprob: -4.103696346282959
    7. '")' → logprob: -4.353696346282959
    8. ''\' → logprob: -4.728696346282959
    9. ' "' → logprob: -5.228696346282959
    10. ' ')' → logprob: -5.478696346282959

Token 106: '0' (ID: 15)
  Prédit: 'str'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'str' → logprob: -0.6702725291252136
    2. ''' → logprob: -1.6702725887298584
    3. ''\' → logprob: -2.5452725887298584
    4. '"' → logprob: -3.0452725887298584
    5. '')' → logprob: -3.2952725887298584
    6. '"\' → logprob: -3.6702725887298584
    7. ' str' → logprob: -3.9202725887298584
    8. '(str' → logprob: -4.420272350311279
    9. '")' → logprob: -4.670272350311279
    10. ' '' → logprob: -5.170272350311279

Token 107: ''' (ID: 6)
  Prédit: '']))'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '']))' → logprob: -0.5307965874671936
    2. '']' → logprob: -1.9057965278625488
    3. ']))' → logprob: -1.9057965278625488
    4. '])))' → logprob: -2.905796527862549
    5. ''],' → logprob: -3.405796527862549
    6. '')))' → logprob: -5.280796527862549
    7. '0' → logprob: -5.530796527862549
    8. ']' → logprob: -5.530796527862549
    9. '],' → logprob: -5.655796527862549
    10. ')]' → logprob: -6.280796527862549

Token 108: ' *' (ID: 425)
  Prédit: ']))'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ']))' → logprob: -0.06761877983808517
    2. ']' → logprob: -4.1926188468933105
    3. ',' → logprob: -4.4426188468933105
    4. '])))' → logprob: -4.4426188468933105
    5. '],' → logprob: -4.6926188468933105
    6. ')))' → logprob: -5.8176188468933105
    7. '])' → logprob: -5.8176188468933105
    8. ')]' → logprob: -5.9426188468933105
    9. '']))' → logprob: -6.4426188468933105
    10. '))' → logprob: -6.4426188468933105

Token 109: ' int' (ID: 677)
  Prédit: '(K'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '(K' → logprob: -1.1056363582611084
    2. 'K' → logprob: -1.8556363582611084
    3. '(' → logprob: -1.9806363582611084
    4. '(check' → logprob: -2.2306363582611084
    5. '(N' → logprob: -2.7306363582611084
    6. ' (' → logprob: -3.2306363582611084
    7. '(abs' → logprob: -3.3556363582611084
    8. '(max' → logprob: -3.3556363582611084
    9. '((' → logprob: -3.7306363582611084
    10. ' K' → logprob: -3.8556363582611084

Token 110: '(not' (ID: 44576)
  Prédit: '(not'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(not' → logprob: -0.4618452787399292
    2. '(check' → logprob: -1.5868452787399292
    3. '(N' → logprob: -2.7118453979492188
    4. '(' → logprob: -3.4618453979492188
    5. '((' → logprob: -3.7118453979492188
    6. '(K' → logprob: -3.7118453979492188
    7. '(bool' → logprob: -4.961845397949219
    8. 'not' → logprob: -5.461845397949219
    9. '(abs' → logprob: -5.961845397949219
    10. '(str' → logprob: -6.961845397949219

Token 111: ' checker' (ID: 75924)
  Prédit: '(check'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(check' → logprob: -0.5389208197593689
    2. ' checker' → logprob: -1.1639208793640137
    3. 'checker' → logprob: -2.5389208793640137
    4. ' (' → logprob: -4.538920879364014
    5. 'check' → logprob: -5.538920879364014
    6. ' check' → logprob: -5.538920879364014
    7. '(' → logprob: -6.288920879364014
    8. '(N' → logprob: -7.163920879364014
    9. ' bool' → logprob: -7.288920879364014
    10. '((' → logprob: -7.538920879364014

Token 112: '(N' (ID: 10564)
  Prédit: '(N'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(N' → logprob: -0.0004610551695805043
    2. '(' → logprob: -7.875461101531982
    3. 'N' → logprob: -10.625460624694824
    4. ' (' → logprob: -10.750460624694824
    5. '(n' → logprob: -11.250460624694824
    6. '((' → logprob: -11.875460624694824
    7. '(K' → logprob: -12.125460624694824
    8. ')' → logprob: -12.750460624694824
    9. ' ' → logprob: -13.375460624694824
    10. '(
' → logprob: -14.000460624694824

Token 113: ',' (ID: 11)
  Prédit: '(N'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(N' → logprob: -0.7346412539482117
    2. ',' → logprob: -0.8596412539482117
    3. 'N' → logprob: -2.4846413135528564
    4. ',N' → logprob: -4.984641075134277
    5. 'K' → logprob: -5.734641075134277
    6. '),' → logprob: -6.734641075134277
    7. ' ,' → logprob: -7.234641075134277
    8. ',K' → logprob: -7.984641075134277
    9. ')' → logprob: -8.109641075134277
    10. '(K' → logprob: -8.484641075134277

Token 114: ' K' (ID: 658)
  Prédit: 'K'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'K' → logprob: -0.014040802605450153
    2. ' K' → logprob: -4.514040946960449
    3. 'N' → logprob: -6.014040946960449
    4. 'y' → logprob: -8.63904094696045
    5. ' ' → logprob: -9.13904094696045
    6. ' N' → logprob: -10.01404094696045
    7. '(K' → logprob: -10.26404094696045
    8. '(N' → logprob: -10.57654094696045
    9. ')' → logprob: -10.82654094696045
    10. '   ' → logprob: -10.95154094696045

Token 115: '))' (ID: 915)
  Prédit: '))'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '))' → logprob: -0.5536240339279175
    2. ')]' → logprob: -1.0536240339279175
    3. ')])' → logprob: -2.928624153137207
    4. ')' → logprob: -4.178624153137207
    5. ')))' → logprob: -5.928624153137207
    6. '))))' → logprob: -6.053624153137207
    7. ')],' → logprob: -6.678624153137207
    8. '),' → logprob: -8.428624153137207
    9. ' )' → logprob: -8.553624153137207
    10. ')),' → logprob: -8.803624153137207

Token 116: '],' (ID: 2155)
  Prédit: ')]'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')]' → logprob: -0.9852737188339233
    2. '])))' → logprob: -0.9852737188339233
    3. ']))' → logprob: -1.4852737188339233
    4. '))))' → logprob: -4.985273838043213
    5. ')])' → logprob: -5.235273838043213
    6. ')))' → logprob: -5.235273838043213
    7. '],' → logprob: -5.860273838043213
    8. ')],' → logprob: -6.610273838043213
    9. ']' → logprob: -6.735273838043213
    10. '])))
' → logprob: -6.985273838043213

Token 117: ' '' (ID: 461)
  Prédit: ''''
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '''' → logprob: -0.1629437506198883
    2. '')))' → logprob: -2.0379438400268555
    3. ''))' → logprob: -4.9129438400268555
    4. ')))' → logprob: -5.4129438400268555
    5. ''' → logprob: -6.1629438400268555
    6. '')' → logprob: -6.4129438400268555
    7. '""' → logprob: -6.5379438400268555
    8. '")))' → logprob: -6.9129438400268555
    9. '"' → logprob: -8.162943840026855
    10. ''\' → logprob: -8.412943840026855

Token 118: ''))' (ID: 7974)
  Prédit: '')))'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '')))' → logprob: -0.19487525522708893
    2. '''' → logprob: -2.1948752403259277
    3. ''' → logprob: -3.1948752403259277
    4. ''))' → logprob: -4.069875240325928
    5. ')))' → logprob: -5.444875240325928
    6. '')' → logprob: -7.319875240325928
    7. '")))' → logprob: -7.319875240325928
    8. '0' → logprob: -7.444875240325928
    9. '"' → logprob: -8.444875717163086
    10. ''\' → logprob: -8.569875717163086

Token 119: '[' (ID: 58)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ')' → logprob: -0.0025103818625211716
    2. '))' → logprob: -6.0025105476379395
    3. ')))' → logprob: -11.002510070800781
    4. '`)' → logprob: -11.752510070800781
    5. ')`' → logprob: -13.002510070800781
    6. ')
' → logprob: -13.127510070800781
    7. '')' → logprob: -13.377510070800781
    8. ' )' → logprob: -13.502510070800781
    9. ')")' → logprob: -14.127510070800781
    10. '")' → logprob: -14.127510070800781

Token 120: '0' (ID: 15)
  Prédit: '-'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '-' → logprob: -0.5275329351425171
    2. ':' → logprob: -1.527532935142517
    3. '0' → logprob: -2.2775330543518066
    4. ':-' → logprob: -2.9025330543518066
    5. '::-' → logprob: -4.027533054351807
    6. '1' → logprob: -5.027533054351807
    7. '
' → logprob: -6.027533054351807
    8. ':]' → logprob: -6.152533054351807
    9. '::' → logprob: -6.277533054351807
    10. ')' → logprob: -7.027533054351807

Token 121: '])' (ID: 4636)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')' → logprob: -0.07518933713436127
    2. '])' → logprob: -2.7001893520355225
    3. '))' → logprob: -5.575189113616943
    4. ')])' → logprob: -6.700189113616943
    5. ']' → logprob: -9.575189590454102
    6. ')]' → logprob: -9.950189590454102
    7. ']))' → logprob: -10.200189590454102
    8. ')))' → logprob: -11.450189590454102
    9. ' )' → logprob: -11.450189590454102
    10. '0' → logprob: -11.575189590454102


RÉSUMÉ:
--------------------------------------------------------------------------------
Total des tokens analysés: 119
Tokens correctement prédits (1ère position, stricte): 35
Tokens correctement prédits (1ère position, avec adaptation): 35
Tokens correctement prédits (top 10): 73
Précision stricte (1ère position): 29.41%
Précision adaptée (1ère position): 29.41%
Précision (top 10): 61.34%
================================================================================
