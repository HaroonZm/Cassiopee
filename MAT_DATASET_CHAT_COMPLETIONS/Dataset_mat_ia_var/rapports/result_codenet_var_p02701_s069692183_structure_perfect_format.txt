================================================================================
ANALYSE DE PRÉDICTION TOKEN PAR TOKEN (BATCH API)
Date: 2025-06-04 19:16:53
Modèle de tokenisation: gpt-4o-mini
================================================================================

SCRIPT ANALYSÉ:
--------------------------------------------------------------------------------
n = int(input())
print(len(set([input() for _ in range(n)])))
--------------------------------------------------------------------------------

RÉSULTATS D'ANALYSE TOKEN PAR TOKEN:
--------------------------------------------------------------------------------
Token 0: 'n' (ID: 77)
  → Token d'amorce (pas de prédiction)

Token 1: ' =' (ID: 314)
  → Token d'amorce (pas de prédiction)

Token 2: ' int' (ID: 677)
  → Token d'amorce (pas de prédiction)

Token 3: '(input' (ID: 10054)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '(' → logprob: -0.00028266964363865554
    2. ''' → logprob: -9.000282287597656
    3. '(n' → logprob: -10.375282287597656
    4. '('' → logprob: -10.500282287597656
    5. '```' → logprob: -10.500282287597656
    6. '()' → logprob: -10.750282287597656
    7. '("("' → logprob: -11.500282287597656
    8. '(
' → logprob: -11.500282287597656
    9. '`' → logprob: -11.625282287597656
    10. ')' → logprob: -11.750282287597656

Token 4: '())
' (ID: 4574)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '(' → logprob: -0.12180372327566147
    2. ')' → logprob: -2.3718037605285645
    3. '()' → logprob: -4.1218037605285645
    4. '())' → logprob: -5.6218037605285645
    5. '(
' → logprob: -7.7468037605285645
    6. '```' → logprob: -8.621803283691406
    7. '('' → logprob: -8.746803283691406
    8. '(()' → logprob: -9.121803283691406
    9. '("("' → logprob: -9.246803283691406
    10. '(

' → logprob: -9.746803283691406

Token 5: 'print' (ID: 1598)
  Prédit: 'for'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'for' → logprob: -0.5208890438079834
    2. '\n' → logprob: -1.7708890438079834
    3. 'if' → logprob: -2.7708890438079834
    4. '`' → logprob: -3.2708890438079834
    5. ''' → logprob: -3.6458890438079834
    6. 's' → logprob: -3.8958890438079834
    7. '\' → logprob: -4.1458892822265625
    8. 'i' → logprob: -4.1458892822265625
    9. '```' → logprob: -4.7708892822265625
    10. 'x' → logprob: -4.8958892822265625

Token 6: '(len' (ID: 14990)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '(' → logprob: -0.0005675682332366705
    2. '('' → logprob: -7.750567436218262
    3. '(n' → logprob: -9.750567436218262
    4. '("("' → logprob: -9.750567436218262
    5. '()' → logprob: -11.000567436218262
    6. '("' → logprob: -13.875567436218262
    7. '("")' → logprob: -14.000567436218262
    8. '(`' → logprob: -14.250567436218262
    9. '("""' → logprob: -14.750567436218262
    10. '(
' → logprob: -15.625567436218262

Token 7: '(set' (ID: 25904)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '(' → logprob: -0.0004023097571916878
    2. '(n' → logprob: -8.250402450561523
    3. '()' → logprob: -9.250402450561523
    4. '('' → logprob: -11.875402450561523
    5. '(
' → logprob: -12.000402450561523
    6. '(str' → logprob: -12.125402450561523
    7. '(

' → logprob: -12.125402450561523
    8. '(`' → logprob: -12.375402450561523
    9. '(input' → logprob: -12.500402450561523
    10. '("("' → logprob: -12.625402450561523

Token 8: '([' (ID: 5194)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '(' → logprob: -0.008860964328050613
    2. '(input' → logprob: -5.383861064910889
    3. '(n' → logprob: -6.383861064910889
    4. '(range' → logprob: -7.133861064910889
    5. '(data' → logprob: -8.13386058807373
    6. '('' → logprob: -8.50886058807373
    7. '(s' → logprob: -8.75886058807373
    8. '((' → logprob: -8.88386058807373
    9. '(`' → logprob: -9.00886058807373
    10. '(user' → logprob: -9.00886058807373

Token 9: 'input' (ID: 2586)
  Prédit: 'input'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'input' → logprob: -0.1254560947418213
    2. 'int' → logprob: -2.2504560947418213
    3. 'range' → logprob: -5.500455856323242
    4. 'n' → logprob: -5.500455856323242
    5. ' input' → logprob: -6.500455856323242
    6. 'map' → logprob: -6.625455856323242
    7. '(input' → logprob: -7.250455856323242
    8. 'str' → logprob: -8.000455856323242
    9. '(int' → logprob: -9.375455856323242
    10. 'i' → logprob: -9.375455856323242

Token 10: '()' (ID: 416)
  Prédit: '()'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '()' → logprob: -0.009557272307574749
    2. '()]' → logprob: -5.009557247161865
    3. '())))' → logprob: -6.509557247161865
    4. '())' → logprob: -7.384557247161865
    5. '()))' → logprob: -8.009557723999023
    6. '().' → logprob: -8.509557723999023
    7. '(' → logprob: -9.634557723999023
    8. '()>' → logprob: -10.009557723999023
    9. '()}' → logprob: -11.384557723999023
    10. '()+' → logprob: -11.759557723999023

Token 11: ' for' (ID: 395)
  Prédit: '()'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '()' → logprob: -0.37477216124534607
    2. '])))' → logprob: -2.499772071838379
    3. 'for' → logprob: -2.749772071838379
    4. ' for' → logprob: -2.874772071838379
    5. '()]' → logprob: -3.749772071838379
    6. '())' → logprob: -3.874772071838379
    7. ')' → logprob: -3.874772071838379
    8. ']))' → logprob: -4.499772071838379
    9. '())))' → logprob: -4.999772071838379
    10. '().' → logprob: -4.999772071838379

Token 12: ' _' (ID: 1175)
  Prédit: ' range'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' range' → logprob: -0.006461340468376875
    2. 'range' → logprob: -6.006461143493652
    3. '_' → logprob: -6.256461143493652
    4. ' _' → logprob: -6.631461143493652
    5. ' ' → logprob: -7.631461143493652
    6. ' i' → logprob: -8.756461143493652
    7. '_range' → logprob: -9.506461143493652
    8. ' in' → logprob: -11.756461143493652
    9. ' xrange' → logprob: -11.756461143493652
    10. '	range' → logprob: -12.131461143493652

Token 13: ' in' (ID: 306)
  Prédit: ' in'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' in' → logprob: -0.0016406656941398978
    2. 'in' → logprob: -6.751640796661377
    3. ' ' → logprob: -7.751640796661377
    4. 'range' → logprob: -11.251640319824219
    5. 'n' → logprob: -11.751640319824219
    6. ' _' → logprob: -11.751640319824219
    7. '_' → logprob: -12.501640319824219
    8. ' range' → logprob: -12.876640319824219
    9. '<|end|>' → logprob: -13.376640319824219
    10. ' n' → logprob: -13.626640319824219

Token 14: ' range' (ID: 3352)
  Prédit: 'range'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'range' → logprob: -0.014164566993713379
    2. ' range' → logprob: -4.264164447784424
    3. '	range' → logprob: -15.014164924621582
    4. '(range' → logprob: -15.139164924621582
    5. ' ' → logprob: -15.639164924621582
    6. 'rang' → logprob: -16.139163970947266
    7. '_' → logprob: -16.889163970947266
    8. 'ran' → logprob: -17.014163970947266
    9. '_range' → logprob: -17.264163970947266
    10. '   ' → logprob: -17.514163970947266

Token 15: '(n' (ID: 2406)
  Prédit: '(n'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(n' → logprob: -0.0006521515315398574
    2. '(' → logprob: -7.500652313232422
    3. 'n' → logprob: -9.500652313232422
    4. ' n' → logprob: -10.750652313232422
    5. ' (' → logprob: -12.875652313232422
    6. '(
' → logprob: -15.000652313232422
    7. ')n' → logprob: -16.500652313232422
    8. ')' → logprob: -18.000652313232422
    9. ' ' → logprob: -18.375652313232422
    10. '(len' → logprob: -18.875652313232422

Token 16: ')]' (ID: 15710)
  Prédit: ')]'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')]' → logprob: -0.005745456553995609
    2. '])))' → logprob: -5.3807454109191895
    3. ')])' → logprob: -7.2557454109191895
    4. ']))' → logprob: -8.630745887756348
    5. ']' → logprob: -9.255745887756348
    6. ')' → logprob: -9.255745887756348
    7. '   ' → logprob: -11.130745887756348
    8. '])' → logprob: -11.880745887756348
    9. '()]' → logprob: -12.130745887756348
    10. '])]' → logprob: -12.255745887756348

Token 17: ')))' (ID: 15975)
  Prédit: ')))'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')))' → logprob: -0.6802902817726135
    2. '))' → logprob: -1.1802902221679688
    3. ')' → logprob: -1.6802902221679688
    4. '))))' → logprob: -11.430290222167969
    5. ' ' → logprob: -12.555290222167969
    6. ')))
' → logprob: -13.555290222167969
    7. '')))' → logprob: -14.180290222167969
    8. '))
' → logprob: -14.555290222167969
    9. ')
' → logprob: -14.555290222167969
    10. ']))' → logprob: -14.680290222167969


RÉSUMÉ:
--------------------------------------------------------------------------------
Total des tokens analysés: 15
Tokens correctement prédits (1ère position, stricte): 6
Tokens correctement prédits (1ère position, avec adaptation): 6
Tokens correctement prédits (top 10): 9
Précision stricte (1ère position): 40.00%
Précision adaptée (1ère position): 40.00%
Précision (top 10): 60.00%
================================================================================
