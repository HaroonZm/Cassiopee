================================================================================
ANALYSE DE PRÉDICTION TOKEN PAR TOKEN (BATCH API)
Date: 2025-06-04 20:08:05
Modèle de tokenisation: gpt-4o-mini
================================================================================

SCRIPT ANALYSÉ:
--------------------------------------------------------------------------------
n,m,x,y = map(int,input().split())
a = list(map(int,input().split()))
b = list(map(int,input().split()))
if max(max(a),x) < min(min(b),y):
    print("No War")
else:
    print("War")
--------------------------------------------------------------------------------

RÉSULTATS D'ANALYSE TOKEN PAR TOKEN:
--------------------------------------------------------------------------------
Token 0: 'n' (ID: 77)
  → Token d'amorce (pas de prédiction)

Token 1: ',m' (ID: 26648)
  → Token d'amorce (pas de prédiction)

Token 2: ',x' (ID: 29748)
  → Token d'amorce (pas de prédiction)

Token 3: ',y' (ID: 16103)
  Prédit: '='
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '=' → logprob: -0.16260863840579987
    2. ' =' → logprob: -2.2876086235046387
    3. ',' → logprob: -3.0376086235046387
    4. ' ' → logprob: -9.037609100341797
    5. '[' → logprob: -9.162609100341797
    6. '```' → logprob: -9.787609100341797
    7. ')' → logprob: -9.912609100341797
    8. ';' → logprob: -10.037609100341797
    9. ''' → logprob: -10.287609100341797
    10. '.' → logprob: -10.287609100341797

Token 4: ' =' (ID: 314)
  Prédit: '='
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '=' → logprob: -0.10791216790676117
    2. ' =' → logprob: -2.607912063598633
    3. ',' → logprob: -3.607912063598633
    4. ';' → logprob: -7.482912063598633
    5. ' ' → logprob: -7.732912063598633
    6. '```' → logprob: -8.732912063598633
    7. ')' → logprob: -9.857912063598633
    8. '[' → logprob: -9.982912063598633
    9. '_' → logprob: -9.982912063598633
    10. '.' → logprob: -10.482912063598633

Token 5: ' map' (ID: 4014)
  Prédit: ' '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' ' → logprob: -0.6658550500869751
    2. '0' → logprob: -1.165855050086975
    3. 'map' → logprob: -2.5408549308776855
    4. ' map' → logprob: -2.5408549308776855
    5. 'input' → logprob: -4.5408549308776855
    6. ' input' → logprob: -5.5408549308776855
    7. '1' → logprob: -6.9158549308776855
    8. ' n' → logprob: -7.4158549308776855
    9. '10' → logprob: -8.415855407714844
    10. 'n' → logprob: -9.415855407714844

Token 6: '(int' (ID: 2742)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(' → logprob: -0.005482875742018223
    2. '(lambda' → logprob: -6.0054826736450195
    3. '<|end|>' → logprob: -6.5054826736450195
    4. '```' → logprob: -7.1304826736450195
    5. '(int' → logprob: -9.00548267364502
    6. ')' → logprob: -9.25548267364502
    7. '_' → logprob: -9.50548267364502
    8. '(user' → logprob: -9.88048267364502
    9. '<|end|>' → logprob: -10.13048267364502
    10. '(
' → logprob: -10.25548267364502

Token 7: ',input' (ID: 123014)
  Prédit: '(input'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(input' → logprob: -0.006315531209111214
    2. ')' → logprob: -5.2563157081604
    3. '(' → logprob: -7.3813157081604
    4. 'input' → logprob: -8.256315231323242
    5. ',input' → logprob: -9.881315231323242
    6. '(int' → logprob: -10.256315231323242
    7. '[input' → logprob: -11.131315231323242
    8. '=input' → logprob: -11.256315231323242
    9. '(raw' → logprob: -11.256315231323242
    10. '(str' → logprob: -11.381315231323242

Token 8: '().' (ID: 1454)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(' → logprob: -1.0607945919036865
    2. '())' → logprob: -1.1857945919036865
    3. ')' → logprob: -1.8107945919036865
    4. '()' → logprob: -2.0607945919036865
    5. '('' → logprob: -4.560794830322266
    6. '(""))' → logprob: -4.935794830322266
    7. '```' → logprob: -5.435794830322266
    8. '().' → logprob: -5.560794830322266
    9. '(()' → logprob: -5.810794830322266
    10. '();)' → logprob: -5.935794830322266

Token 9: 'split' (ID: 13627)
  Prédit: 'split'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'split' → logprob: -9.73446003627032e-05
    2. 'strip' → logprob: -9.250097274780273
    3. 'rstrip' → logprob: -14.125097274780273
    4. ' split' → logprob: -15.375097274780273
    5. '(split' → logprob: -15.625097274780273
    6. 'spl' → logprob: -16.625097274780273
    7. ')' → logprob: -18.000097274780273
    8. 'read' → logprob: -18.375097274780273
    9. 'startswith' → logprob: -18.875097274780273
    10. 'replace' → logprob: -19.500097274780273

Token 10: '())
' (ID: 4574)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ')' → logprob: -0.20405413210391998
    2. '())' → logprob: -1.7040541172027588
    3. '()' → logprob: -6.829054355621338
    4. '))' → logprob: -6.954054355621338
    5. '`)' → logprob: -8.20405387878418
    6. '(' → logprob: -9.20405387878418
    7. '()))' → logprob: -9.95405387878418
    8. '```' → logprob: -10.45405387878418
    9. ' ())' → logprob: -10.57905387878418
    10. ')`' → logprob: -11.32905387878418

Token 11: 'a' (ID: 64)
  Prédit: 'if'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'if' → logprob: -0.4718150794506073
    2. 'a' → logprob: -1.8468151092529297
    3. 'for' → logprob: -2.9718151092529297
    4. '\n' → logprob: -3.2218151092529297
    5. 's' → logprob: -3.7218151092529297
    6. 'i' → logprob: -4.09681510925293
    7. '
' → logprob: -4.59681510925293
    8. ' if' → logprob: -5.09681510925293
    9. 'print' → logprob: -5.22181510925293
    10. 'd' → logprob: -5.22181510925293

Token 12: ' =' (ID: 314)
  Prédit: '['
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '[' → logprob: -0.03200669214129448
    2. '.' → logprob: -3.9070067405700684
    3. '[i' → logprob: -5.657006740570068
    4. '=' → logprob: -6.782006740570068
    5. '[p' → logprob: -7.032006740570068
    6. 'p' → logprob: -7.157006740570068
    7. '[a' → logprob: -7.282006740570068
    8. ',' → logprob: -7.407006740570068
    9. ' =' → logprob: -7.407006740570068
    10. 'pp' → logprob: -7.657006740570068

Token 13: ' list' (ID: 1562)
  Prédit: 'list'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'list' → logprob: -0.5161099433898926
    2. ' list' → logprob: -1.1411099433898926
    3. '[]' → logprob: -3.0161099433898926
    4. ' []' → logprob: -4.141109943389893
    5. ' [' → logprob: -4.766109943389893
    6. '[list' → logprob: -5.266109943389893
    7. '[' → logprob: -5.641109943389893
    8. '[int' → logprob: -7.016109943389893
    9. '[input' → logprob: -7.766109943389893
    10. 'input' → logprob: -10.391109466552734

Token 14: '(map' (ID: 16946)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(' → logprob: -0.0026968163438141346
    2. '(a' → logprob: -6.502696990966797
    3. '(range' → logprob: -7.752696990966797
    4. '(int' → logprob: -8.002696990966797
    5. '(input' → logprob: -8.752696990966797
    6. '(map' → logprob: -10.002696990966797
    7. '()' → logprob: -10.377696990966797
    8. '("("' → logprob: -10.377696990966797
    9. '[int' → logprob: -11.002696990966797
    10. '(open' → logprob: -11.627696990966797

Token 15: '(int' (ID: 2742)
  Prédit: '(int'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(int' → logprob: -0.0028065370861440897
    2. '(' → logprob: -6.002806663513184
    3. '(input' → logprob: -9.252806663513184
    4. '<int' → logprob: -9.502806663513184
    5. '(str' → logprob: -9.877806663513184
    6. 'int' → logprob: -10.002806663513184
    7. '[int' → logprob: -11.002806663513184
    8. '=int' → logprob: -11.252806663513184
    9. '(eval' → logprob: -12.002806663513184
    10. '```' → logprob: -12.252806663513184

Token 16: ',input' (ID: 123014)
  Prédit: '(input'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(input' → logprob: -0.22040453553199768
    2. ',input' → logprob: -1.7204045057296753
    3. ',' → logprob: -4.720404624938965
    4. '(' → logprob: -4.845404624938965
    5. ')' → logprob: -7.595404624938965
    6. '),' → logprob: -7.720404624938965
    7. ',int' → logprob: -8.470404624938965
    8. '=input' → logprob: -8.595404624938965
    9. '(),' → logprob: -8.720404624938965
    10. '(int' → logprob: -8.845404624938965

Token 17: '().' (ID: 1454)
  Prédit: '().'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '().' → logprob: -2.6656825866666622e-05
    2. '()' → logprob: -10.62502670288086
    3. ' ().' → logprob: -13.50002670288086
    4. '.' → logprob: -15.62502670288086
    5. '(' → logprob: -15.62502670288086
    6. '()))' → logprob: -15.87502670288086
    7. '())' → logprob: -16.50002670288086
    8. ')' → logprob: -16.50002670288086
    9. '()-' → logprob: -16.50002670288086
    10. '().__' → logprob: -17.00002670288086

Token 18: 'split' (ID: 13627)
  Prédit: 'split'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'split' → logprob: -1.0280383548888494e-06
    2. ' split' → logprob: -14.000000953674316
    3. '(split' → logprob: -16.750001907348633
    4. 'spl' → logprob: -16.875001907348633
    5. 'strip' → logprob: -17.250001907348633
    6. 'rstrip' → logprob: -18.250001907348633
    7. '_split' → logprob: -21.000001907348633
    8. 'plit' → logprob: -21.125001907348633
    9. '.split' → logprob: -21.375001907348633
    10. 's' → logprob: -21.375001907348633

Token 19: '()))
' (ID: 24521)
  Prédit: '()))'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '()))' → logprob: -1.0042750835418701
    2. '))' → logprob: -1.3792750835418701
    3. ')' → logprob: -1.7542750835418701
    4. '(' → logprob: -2.12927508354187
    5. '())' → logprob: -2.50427508354187
    6. '('' → logprob: -6.004275321960449
    7. '()' → logprob: -6.129275321960449
    8. ')))' → logprob: -6.504275321960449
    9. '())))' → logprob: -7.254275321960449
    10. '((' → logprob: -8.62927532196045

Token 20: 'b' (ID: 65)
  Prédit: 'for'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'for' → logprob: -0.5863034725189209
    2. 'count' → logprob: -2.336303472518921
    3. 'c' → logprob: -2.461303472518921
    4. 'z' → logprob: -2.586303472518921
    5. 'b' → logprob: -2.961303472518921
    6. 's' → logprob: -3.211303472518921
    7. 'if' → logprob: -3.961303472518921
    8. 'p' → logprob: -4.0863037109375
    9. 'result' → logprob: -4.3363037109375
    10. 'a' → logprob: -4.4613037109375

Token 21: ' =' (ID: 314)
  Prédit: '.'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '.' → logprob: -0.1721065789461136
    2. ' =' → logprob: -2.2971065044403076
    3. '=' → logprob: -3.2971065044403076
    4. '[' → logprob: -4.047106742858887
    5. ')' → logprob: -6.297106742858887
    6. '[:]' → logprob: -8.172106742858887
    7. ' .' → logprob: -8.547106742858887
    8. '.append' → logprob: -8.672106742858887
    9. '.=' → logprob: -8.797106742858887
    10. '=[]' → logprob: -9.547106742858887

Token 22: ' list' (ID: 1562)
  Prédit: 'list'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'list' → logprob: -0.5759397745132446
    2. ' list' → logprob: -0.8259397745132446
    3. 'List' → logprob: -16.450939178466797
    4. ' []' → logprob: -16.450939178466797
    5. '(list' → logprob: -16.825939178466797
    6. '[]' → logprob: -17.575939178466797
    7. '=list' → logprob: -18.075939178466797
    8. '[list' → logprob: -18.075939178466797
    9. '	list' → logprob: -18.200939178466797
    10. '[' → logprob: -18.700939178466797

Token 23: '(map' (ID: 16946)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(' → logprob: -0.09427324682474136
    2. '(map' → logprob: -2.469273328781128
    3. '(int' → logprob: -5.344273090362549
    4. '(list' → logprob: -8.844273567199707
    5. '((' → logprob: -9.094273567199707
    6. ' (' → logprob: -9.719273567199707
    7. '(.' → logprob: -10.094273567199707
    8. '(range' → logprob: -10.219273567199707
    9. '(

' → logprob: -10.344273567199707
    10. '(eval' → logprob: -11.344273567199707

Token 24: '(int' (ID: 2742)
  Prédit: '(int'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(int' → logprob: -2.4153549020411447e-05
    2. 'int' → logprob: -11.87502384185791
    3. '(' → logprob: -12.00002384185791
    4. '=int' → logprob: -12.50002384185791
    5. '<int' → logprob: -12.75002384185791
    6. ' (' → logprob: -13.00002384185791
    7. '[int' → logprob: -14.00002384185791
    8. '(list' → logprob: -15.12502384185791
    9. '```' → logprob: -15.37502384185791
    10. ',int' → logprob: -15.50002384185791

Token 25: ',input' (ID: 123014)
  Prédit: '(int'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(int' → logprob: -0.1815224438905716
    2. ',int' → logprob: -2.3065223693847656
    3. '(input' → logprob: -2.9315223693847656
    4. ',input' → logprob: -4.681522369384766
    5. ',' → logprob: -5.931522369384766
    6. '=int' → logprob: -7.306522369384766
    7. '<int' → logprob: -8.431522369384766
    8. '(' → logprob: -9.931522369384766
    9. '[int' → logprob: -10.306522369384766
    10. '=input' → logprob: -10.431522369384766

Token 26: '().' (ID: 1454)
  Prédit: '().'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '().' → logprob: -5.049755782238208e-05
    2. '.' → logprob: -10.00005054473877
    3. '(.' → logprob: -13.00005054473877
    4. '()' → logprob: -13.25005054473877
    5. ' ().' → logprob: -14.50005054473877
    6. '(' → logprob: -15.50005054473877
    7. ' .' → logprob: -15.50005054473877
    8. ').' → logprob: -17.500049591064453
    9. '().__' → logprob: -18.125049591064453
    10. '().
' → logprob: -18.250049591064453

Token 27: 'split' (ID: 13627)
  Prédit: 'split'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'split' → logprob: -5.512236498361744e-07
    2. ' split' → logprob: -15.500000953674316
    3. '(split' → logprob: -15.875000953674316
    4. 'spl' → logprob: -16.25
    5. '```' → logprob: -16.625
    6. ')' → logprob: -17.0
    7. '.split' → logprob: -18.75
    8. 'strip' → logprob: -18.875
    9. 's' → logprob: -18.875
    10. 'plit' → logprob: -19.375

Token 28: '()))
' (ID: 24521)
  Prédit: '()))'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '()))' → logprob: -0.07698574662208557
    2. '())' → logprob: -2.8269858360290527
    3. '))' → logprob: -4.826985836029053
    4. '()' → logprob: -5.201985836029053
    5. ')' → logprob: -6.701985836029053
    6. '()))
' → logprob: -9.701985359191895
    7. '()));' → logprob: -9.826985359191895
    8. '()),' → logprob: -11.701985359191895
    9. '()))

' → logprob: -11.951985359191895
    10. '(' → logprob: -12.076985359191895

Token 29: 'if' (ID: 366)
  Prédit: 'for'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'for' → logprob: -1.3668915033340454
    2. 'c' → logprob: -1.6168915033340454
    3. 'count' → logprob: -1.6168915033340454
    4. 'a' → logprob: -1.7418915033340454
    5. 'i' → logprob: -3.116891384124756
    6. 'result' → logprob: -3.116891384124756
    7. 'ans' → logprob: -3.741891384124756
    8. 'cnt' → logprob: -4.991891384124756
    9. 'if' → logprob: -5.116891384124756
    10. 'res' → logprob: -5.116891384124756

Token 30: ' max' (ID: 2999)
  Prédit: ' a'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' a' → logprob: -0.3571786880493164
    2. ' x' → logprob: -1.8571786880493164
    3. 'a' → logprob: -2.2321786880493164
    4. ' n' → logprob: -4.107178688049316
    5. 'x' → logprob: -4.232178688049316
    6. ' ' → logprob: -6.232178688049316
    7. 'n' → logprob: -6.732178688049316
    8. ' len' → logprob: -7.107178688049316
    9. ' (' → logprob: -7.607178688049316
    10. ' m' → logprob: -7.857178688049316

Token 31: '(max' (ID: 17178)
  Prédit: '(a'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(a' → logprob: -0.008720578625798225
    2. '(' → logprob: -4.758720397949219
    3. '(b' → logprob: -9.883720397949219
    4. ' (' → logprob: -11.508720397949219
    5. 'a' → logprob: -11.508720397949219
    6. '(x' → logprob: -11.508720397949219
    7. '()' → logprob: -11.508720397949219
    8. '(max' → logprob: -11.883720397949219
    9. ')' → logprob: -13.133720397949219
    10. '(n' → logprob: -13.133720397949219

Token 32: '(a' (ID: 6271)
  Prédit: '(a'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(a' → logprob: -0.00014132341311778873
    2. 'a' → logprob: -9.500141143798828
    3. '(' → logprob: -9.875141143798828
    4. '(b' → logprob: -11.500141143798828
    5. ')' → logprob: -13.375141143798828
    6. '(n' → logprob: -14.875141143798828
    7. '(x' → logprob: -14.875141143798828
    8. ' (' → logprob: -14.875141143798828
    9. '(max' → logprob: -15.000141143798828
    10. '((' → logprob: -15.125141143798828

Token 33: '),' (ID: 936)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')' → logprob: -0.14093399047851562
    2. ')>' → logprob: -2.2659339904785156
    3. '())' → logprob: -4.390933990478516
    4. ')>=' → logprob: -5.140933990478516
    5. ')<' → logprob: -5.515933990478516
    6. '),' → logprob: -6.140933990478516
    7. ')<=' → logprob: -6.390933990478516
    8. ' )' → logprob: -7.265933990478516
    9. '(),' → logprob: -8.015933990478516
    10. ')+' → logprob: -8.640933990478516

Token 34: 'x' (ID: 87)
  Prédit: ' max'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' max' → logprob: -0.4741435945034027
    2. 'max' → logprob: -0.9741436243057251
    3. 'm' → logprob: -10.724143981933594
    4. ' m' → logprob: -11.099143981933594
    5. 'min' → logprob: -11.599143981933594
    6. ')' → logprob: -11.974143981933594
    7. ' min' → logprob: -12.349143981933594
    8. '(max' → logprob: -12.724143981933594
    9. ' ' → logprob: -12.974143981933594
    10. ' y' → logprob: -13.849143981933594

Token 35: ')' (ID: 8)
  Prédit: ')'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')' → logprob: -0.14050234854221344
    2. ' )' → logprob: -2.140502452850342
    3. ')>' → logprob: -5.015502452850342
    4. ' >' → logprob: -6.515502452850342
    5. ')>=' → logprob: -6.640502452850342
    6. ')<=' → logprob: -7.015502452850342
    7. '>' → logprob: -7.140502452850342
    8. ')<' → logprob: -7.265502452850342
    9. ' <=' → logprob: -7.765502452850342
    10. ' >=' → logprob: -8.265501976013184

Token 36: ' <' (ID: 464)
  Prédit: ' >'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' >' → logprob: -0.5553480386734009
    2. '>' → logprob: -2.0553479194641113
    3. ' <' → logprob: -2.3053479194641113
    4. ' <=' → logprob: -2.5553479194641113
    5. ' >=' → logprob: -2.6803479194641113
    6. '<' → logprob: -3.5553479194641113
    7. '>=' → logprob: -4.430347919464111
    8. '<=' → logprob: -4.555347919464111
    9. ' ==' → logprob: -8.05534839630127
    10. ')' → logprob: -8.43034839630127

Token 37: ' min' (ID: 1349)
  Prédit: 'min'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'min' → logprob: -0.8278511762619019
    2. ' min' → logprob: -1.2028511762619019
    3. 'max' → logprob: -2.0778512954711914
    4. ' max' → logprob: -2.0778512954711914
    5. ' y' → logprob: -5.077851295471191
    6. 'y' → logprob: -5.327851295471191
    7. 'm' → logprob: -7.952851295471191
    8. '=min' → logprob: -8.077851295471191
    9. ' m' → logprob: -8.452851295471191
    10. ' ' → logprob: -9.702851295471191

Token 38: '(min' (ID: 26035)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(' → logprob: -0.30086806416511536
    2. '(max' → logprob: -1.925868034362793
    3. '(min' → logprob: -2.175868034362793
    4. '((' → logprob: -7.675868034362793
    5. ' (' → logprob: -10.175868034362793
    6. '(b' → logprob: -11.300868034362793
    7. '(m' → logprob: -11.550868034362793
    8. '(int' → logprob: -11.925868034362793
    9. '(s' → logprob: -12.550868034362793
    10. '(

' → logprob: -12.550868034362793

Token 39: '(b' (ID: 3229)
  Prédit: '(b'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(b' → logprob: -3.941161776310764e-05
    2. '(' → logprob: -10.750039100646973
    3. ' (' → logprob: -11.500039100646973
    4. 'b' → logprob: -12.125039100646973
    5. '((' → logprob: -13.875039100646973
    6. '(min' → logprob: -14.750039100646973
    7. '(s' → logprob: -15.125039100646973
    8. '(y' → logprob: -15.250039100646973
    9. '(a' → logprob: -15.750039100646973
    10. ' b' → logprob: -17.00004005432129

Token 40: '),' (ID: 936)
  Prédit: '),'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '),' → logprob: -0.0019359003053978086
    2. ')' → logprob: -6.751935958862305
    3. '):' → logprob: -8.501935958862305
    4. ',' → logprob: -8.626935958862305
    5. ' ),' → logprob: -8.876935958862305
    6. '))' → logprob: -9.126935958862305
    7. ',y' → logprob: -9.376935958862305
    8. ')):' → logprob: -10.876935958862305
    9. '),(' → logprob: -11.376935958862305
    10. ')+' → logprob: -12.376935958862305

Token 41: 'y' (ID: 88)
  Prédit: 'y'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'y' → logprob: -0.20141665637493134
    2. ' y' → logprob: -1.7014166116714478
    3. ')' → logprob: -13.951416969299316
    4. ' ' → logprob: -14.076416969299316
    5. ',y' → logprob: -14.451416969299316
    6. '	y' → logprob: -14.576416969299316
    7. 'x' → logprob: -15.701416969299316
    8. ''y' → logprob: -16.076416015625
    9. ')y' → logprob: -17.076416015625
    10. '   ' → logprob: -17.201416015625

Token 42: '):
' (ID: 1883)
  Prédit: '):'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '):' → logprob: -0.006938905920833349
    2. ')' → logprob: -5.131938934326172
    3. ':' → logprob: -7.131938934326172
    4. ' ):' → logprob: -8.506938934326172
    5. '):
' → logprob: -13.131938934326172
    6. ')):' → logprob: -13.631938934326172
    7. ' )' → logprob: -14.256938934326172
    8. ',' → logprob: -14.381938934326172
    9. ':)' → logprob: -14.506938934326172
    10. '():' → logprob: -14.506938934326172

Token 43: '   ' (ID: 271)
  Prédit: ':'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ':' → logprob: -0.09465081244707108
    2. '   ' → logprob: -2.9696507453918457
    3. ' print' → logprob: -4.094650745391846
    4. ':
' → logprob: -4.719650745391846
    5. 'print' → logprob: -4.844650745391846
    6. ' :' → logprob: -6.094650745391846
    7. '\n' → logprob: -6.469650745391846
    8. '	print' → logprob: -7.219650745391846
    9. '    ' → logprob: -8.344651222229004
    10. ' :
' → logprob: -8.469651222229004

Token 44: ' print' (ID: 2123)
  Prédit: 'print'
  Correct (stricte): False
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'print' (adapté à ' print') → logprob: -0.588640034198761
    2. ' print' → logprob: -0.838640034198761
    3. '   ' → logprob: -4.963640213012695
    4. '\n' → logprob: -5.463640213012695
    5. '    ' → logprob: -7.463640213012695
    6. ' \' → logprob: -8.463640213012695
    7. '\' → logprob: -8.963640213012695
    8. ' 
' → logprob: -8.963640213012695
    9. 'pass' → logprob: -10.213640213012695
    10. ' pass' → logprob: -10.338640213012695

Token 45: '("' (ID: 568)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(' → logprob: -0.08881983160972595
    2. '("' → logprob: -2.588819742202759
    3. '('' → logprob: -5.088819980621338
    4. '("("' → logprob: -5.713819980621338
    5. '()' → logprob: -8.08881950378418
    6. '(x' → logprob: -10.83881950378418
    7. '("")' → logprob: -10.96381950378418
    8. '(True' → logprob: -11.08881950378418
    9. '("(' → logprob: -11.46381950378418
    10. '(max' → logprob: -11.96381950378418

Token 46: 'No' (ID: 3160)
  Prédit: 'Yes'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'Yes' → logprob: -0.3378008306026459
    2. 'No' → logprob: -1.9628008604049683
    3. 'YES' → logprob: -2.0878007411956787
    4. 'Y' → logprob: -5.087800979614258
    5. 'yes' → logprob: -5.212800979614258
    6. 'NO' → logprob: -6.587800979614258
    7. '"' → logprob: -6.712800979614258
    8. 'Possible' → logprob: -6.962800979614258
    9. 'possible' → logprob: -7.087800979614258
    10. 'War' → logprob: -7.212800979614258

Token 47: ' War' (ID: 8545)
  Prédit: '")'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '")' → logprob: -0.026521705090999603
    2. ')' → logprob: -3.651521682739258
    3. '"' → logprob: -9.401521682739258
    4. ')")' → logprob: -9.401521682739258
    5. ' ")' → logprob: -10.651521682739258
    6. '!")' → logprob: -12.151521682739258
    7. '\n' → logprob: -12.401521682739258
    8. 'e' → logprob: -12.526521682739258
    9. ' )' → logprob: -12.651521682739258
    10. ' else' → logprob: -12.651521682739258

Token 48: '")
' (ID: 1896)
  Prédit: '")'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '")' → logprob: -0.0004074354947078973
    2. '!")' → logprob: -8.000407218933105
    3. ')' → logprob: -9.750407218933105
    4. '")
' → logprob: -12.375407218933105
    5. '"' → logprob: -12.625407218933105
    6. '!' → logprob: -12.875407218933105
    7. ')")' → logprob: -13.000407218933105
    8. '")
' → logprob: -14.875407218933105
    9. '')' → logprob: -15.000407218933105
    10. ' ")' → logprob: -16.125408172607422

Token 49: 'else' (ID: 2807)
  Prédit: 'else'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'else' → logprob: -0.017699141055345535
    2. ' else' → logprob: -4.142699241638184
    3. '<|end|>' → logprob: -7.142699241638184
    4. ')' → logprob: -8.392699241638184
    5. 'elif' → logprob: -8.517699241638184
    6. '\n' → logprob: -9.142699241638184
    7. '
' → logprob: -9.767699241638184
    8. '.' → logprob: -9.767699241638184
    9. '```' → logprob: -9.767699241638184
    10. 'e' → logprob: -10.642699241638184

Token 50: ':
' (ID: 734)
  Prédit: ':'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ':' → logprob: -2.129266067640856e-05
    2. ':
' → logprob: -10.875020980834961
    3. ' :' → logprob: -13.750020980834961
    4. '   ' → logprob: -14.250020980834961
    5. '):' → logprob: -14.875020980834961
    6. ':**' → logprob: -16.37502098083496
    7. ':
' → logprob: -17.25002098083496
    8. '():' → logprob: -17.62502098083496
    9. '```' → logprob: -17.75002098083496
    10. ':def' → logprob: -17.75002098083496

Token 51: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.0050764987245202065
    2. 'print' → logprob: -5.3800764083862305
    3. ' print' → logprob: -7.7550764083862305
    4. '	print' → logprob: -11.88007640838623
    5. '```' → logprob: -11.88007640838623
    6. '"' → logprob: -12.88007640838623
    7. '       ' → logprob: -13.00507640838623
    8. ' ' → logprob: -13.38007640838623
    9. '   ' → logprob: -13.63007640838623
    10. '\n' → logprob: -13.75507640838623

Token 52: ' print' (ID: 2123)
  Prédit: 'print'
  Correct (stricte): False
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'print' (adapté à ' print') → logprob: -0.05070929601788521
    2. ' print' → logprob: -3.3007092475891113
    3. '   ' → logprob: -4.425709247589111
    4. '"' → logprob: -7.550709247589111
    5. ' ' → logprob: -10.42570972442627
    6. 'Print' → logprob: -11.42570972442627
    7. '```' → logprob: -11.42570972442627
    8. '	print' → logprob: -11.42570972442627
    9. '  ' → logprob: -11.55070972442627
    10. '.print' → logprob: -12.30070972442627

Token 53: '("' (ID: 568)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(' → logprob: -0.481087863445282
    2. '("' → logprob: -1.1060879230499268
    3. '("("' → logprob: -2.9810879230499268
    4. '("(' → logprob: -8.981087684631348
    5. '("")' → logprob: -9.731087684631348
    6. '()' → logprob: -10.231087684631348
    7. '('' → logprob: -10.481087684631348
    8. '"' → logprob: -10.856087684631348
    9. '("""' → logprob: -11.856087684631348
    10. '(""' → logprob: -12.106087684631348

Token 54: 'War' (ID: 34786)
  Prédit: 'War'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'War' → logprob: -0.038756079971790314
    2. '"' → logprob: -3.2887561321258545
    3. 'Yes' → logprob: -7.788755893707275
    4. ' War' → logprob: -8.413756370544434
    5. '"W' → logprob: -10.413756370544434
    6. 'Warp' → logprob: -10.913756370544434
    7. 'Wars' → logprob: -12.288756370544434
    8. ''' → logprob: -12.663756370544434
    9. 'Wa' → logprob: -12.788756370544434
    10. '"No' → logprob: -12.788756370544434

Token 55: '")' (ID: 1405)
  Prédit: '")'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '")' → logprob: -0.0014445222914218903
    2. ')' → logprob: -6.751444339752197
    3. ')")' → logprob: -8.251444816589355
    4. '!")' → logprob: -11.251444816589355
    5. '")
' → logprob: -16.00144386291504
    6. '}")' → logprob: -16.50144386291504
    7. '')' → logprob: -16.75144386291504
    8. '"' → logprob: -16.87644386291504
    9. ' ")' → logprob: -17.00144386291504
    10. '”)' → logprob: -17.87644386291504


RÉSUMÉ:
--------------------------------------------------------------------------------
Total des tokens analysés: 53
Tokens correctement prédits (1ère position, stricte): 16
Tokens correctement prédits (1ère position, avec adaptation): 18
Tokens correctement prédits (top 10): 47
Précision stricte (1ère position): 30.19%
Précision adaptée (1ère position): 33.96%
Précision (top 10): 88.68%
================================================================================
