================================================================================
ANALYSE DE PRÉDICTION TOKEN PAR TOKEN (BATCH API)
Date: 2025-06-04 19:35:16
Modèle de tokenisation: gpt-4o-mini
================================================================================

SCRIPT ANALYSÉ:
--------------------------------------------------------------------------------
N=int(input())
datalist=[]
lst=[[] for _ in range(N)]
def fill():
 for idx in range(N):
  n=int(input())
  datalist.append(n)
  for q in range(n):
   p1,p2=map(int,input().split())
   lst[idx].append((p1-1,p2))
fill()
maximum=0
for v in range(pow(2,N)):
    bits=[]
    cnt=0
    k=v
    for ind in range(N):
        bits.append( (k&1)^1 )
        if (k&1)^1:
            cnt+=1
        k>>=1
    consistent=None
    for pos in range(N):
        if bits[pos]==0:
            continue
        for check in lst[pos]:
            xx,yy=check
            if bits[xx]!=yy:
                consistent=False
                break
        if consistent==False:
            break
    else:
        if maximum<cnt:
            maximum=cnt
print(maximum)
--------------------------------------------------------------------------------

RÉSULTATS D'ANALYSE TOKEN PAR TOKEN:
--------------------------------------------------------------------------------
Token 0: 'N' (ID: 45)
  → Token d'amorce (pas de prédiction)

Token 1: '=int' (ID: 37431)
  → Token d'amorce (pas de prédiction)

Token 2: '(input' (ID: 10054)
  → Token d'amorce (pas de prédiction)

Token 3: '())
' (ID: 4574)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ')' → logprob: -0.5979353189468384
    2. '(' → logprob: -0.8479353189468384
    3. '()' → logprob: -4.222935199737549
    4. '())' → logprob: -5.097935199737549
    5. '`)' → logprob: -8.097935676574707
    6. '(
' → logprob: -8.722935676574707
    7. '```' → logprob: -9.222935676574707
    8. '')' → logprob: -9.472935676574707
    9. '(

' → logprob: -9.722935676574707
    10. '")' → logprob: -9.722935676574707

Token 4: 'd' (ID: 67)
  Prédit: 'for'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'for' → logprob: -0.5715791583061218
    2. 's' → logprob: -1.9465792179107666
    3. '#' → logprob: -3.1965792179107666
    4. '\n' → logprob: -3.1965792179107666
    5. 'if' → logprob: -3.5715792179107666
    6. 'i' → logprob: -3.6965792179107666
    7. 'a' → logprob: -3.6965792179107666
    8. '*' → logprob: -3.9465792179107666
    9. ''' → logprob: -4.1965789794921875
    10. '`' → logprob: -4.3215789794921875

Token 5: 'atalist' (ID: 185215)
  Prédit: '['
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '[' → logprob: -0.41970714926719666
    2. '=' → logprob: -1.419707179069519
    3. ' =' → logprob: -3.0447070598602295
    4. 'e' → logprob: -3.7947070598602295
    5. '[i' → logprob: -4.669707298278809
    6. '.' → logprob: -4.794707298278809
    7. 'i' → logprob: -5.294707298278809
    8. '=[]' → logprob: -6.919707298278809
    9. '[e' → logprob: -6.919707298278809
    10. '\[' → logprob: -6.919707298278809

Token 6: '=[]
' (ID: 63466)
  Prédit: '['
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '[' → logprob: -0.005913388915359974
    2. '.' → logprob: -5.880913257598877
    3. 's' → logprob: -6.755913257598877
    4. '\[' → logprob: -6.755913257598877
    5. '[:]' → logprob: -8.505913734436035
    6. '[]' → logprob: -9.005913734436035
    7. '[i' → logprob: -9.630913734436035
    8. ')' → logprob: -9.755913734436035
    9. '=' → logprob: -9.880913734436035
    10. '.append' → logprob: -10.255913734436035

Token 7: 'lst' (ID: 65430)
  Prédit: 'for'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'for' → logprob: -0.0008732284768484533
    2. '```' → logprob: -7.75087308883667
    3. '[' → logprob: -8.375873565673828
    4. ' for' → logprob: -8.750873565673828
    5. '
' → logprob: -11.250873565673828
    6. '.for' → logprob: -11.875873565673828
    7. '.' → logprob: -12.000873565673828
    8. '\n' → logprob: -12.500873565673828
    9. '[]' → logprob: -12.750873565673828
    10. '`' → logprob: -12.750873565673828

Token 8: '=[' (ID: 13370)
  Prédit: '.'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '.' → logprob: -0.024538882076740265
    2. '.append' → logprob: -4.149538993835449
    3. '=' → logprob: -5.149538993835449
    4. ' =' → logprob: -6.399538993835449
    5. '.extend' → logprob: -7.774538993835449
    6. '=[]' → logprob: -8.64953899383545
    7. '[' → logprob: -9.27453899383545
    8. '.=' → logprob: -9.39953899383545
    9. ' .' → logprob: -10.02453899383545
    10. ')' → logprob: -10.64953899383545

Token 9: '[]' (ID: 1951)
  Prédit: 'int'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'int' → logprob: -0.787968099117279
    2. '0' → logprob: -1.0379681587219238
    3. ']' → logprob: -1.9129681587219238
    4. 'i' → logprob: -4.037968158721924
    5. '[]' → logprob: -5.287968158721924
    6. '(int' → logprob: -5.412968158721924
    7. '1' → logprob: -5.537968158721924
    8. 'input' → logprob: -5.787968158721924
    9. ']int' → logprob: -6.412968158721924
    10. '[int' → logprob: -6.537968158721924

Token 10: ' for' (ID: 395)
  Prédit: ' for'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' for' → logprob: -0.2689000070095062
    2. 'for' → logprob: -1.7689000368118286
    3. ',' → logprob: -3.268899917602539
    4. ')' → logprob: -4.018899917602539
    5. ']' → logprob: -4.768899917602539
    6. ')]' → logprob: -7.518899917602539
    7. '()' → logprob: -10.393899917602539
    8. ' ]' → logprob: -10.893899917602539
    9. ' ' → logprob: -11.018899917602539
    10. ' )' → logprob: -11.393899917602539

Token 11: ' _' (ID: 1175)
  Prédit: ' _'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' _' → logprob: -0.092134028673172
    2. '_' → logprob: -2.9671339988708496
    3. ' i' → logprob: -3.3421339988708496
    4. 'i' → logprob: -7.09213399887085
    5. ' range' → logprob: -8.717134475708008
    6. ' ' → logprob: -9.592134475708008
    7. 'range' → logprob: -9.717134475708008
    8. '_i' → logprob: -9.967134475708008
    9. ' in' → logprob: -11.592134475708008
    10. ' j' → logprob: -11.717134475708008

Token 12: ' in' (ID: 306)
  Prédit: ' in'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' in' → logprob: -0.0792662724852562
    2. 'in' → logprob: -2.579266309738159
    3. ' ' → logprob: -8.579266548156738
    4. 'i' → logprob: -8.829266548156738
    5. ' _' → logprob: -11.079266548156738
    6. ' i' → logprob: -11.204266548156738
    7. '  ' → logprob: -12.079266548156738
    8. 'range' → logprob: -13.329266548156738
    9. 'x' → logprob: -13.454266548156738
    10. 's' → logprob: -14.329266548156738

Token 13: ' range' (ID: 3352)
  Prédit: 'range'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'range' → logprob: -0.0019287518225610256
    2. ' range' → logprob: -6.251928806304932
    3. '(range' → logprob: -16.126928329467773
    4. ' ' → logprob: -19.001928329467773
    5. '	range' → logprob: -19.126928329467773
    6. 'rang' → logprob: -19.501928329467773
    7. ')' → logprob: -19.501928329467773
    8. 'd' → logprob: -20.001928329467773
    9. '```' → logprob: -20.001928329467773
    10. 'r' → logprob: -20.626928329467773

Token 14: '(N' (ID: 10564)
  Prédit: '(N'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(N' → logprob: -0.0036574339028447866
    2. '(' → logprob: -5.628657341003418
    3. 'N' → logprob: -9.878657341003418
    4. '(n' → logprob: -12.503657341003418
    5. ' (' → logprob: -14.253657341003418
    6. '(
' → logprob: -14.253657341003418
    7. ')' → logprob: -14.503657341003418
    8. '(len' → logprob: -15.753657341003418
    9. '(int' → logprob: -16.253658294677734
    10. '(

' → logprob: -16.378658294677734

Token 15: ')]
' (ID: 11587)
  Prédit: ')]'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')]' → logprob: -2.975612187583465e-05
    2. ' )' → logprob: -11.750029563903809
    3. ')])' → logprob: -11.750029563903809
    4. ')' → logprob: -12.000029563903809
    5. '])]' → logprob: -13.000029563903809
    6. ')]
' → logprob: -13.125029563903809
    7. ']' → logprob: -13.750029563903809
    8. '')]' → logprob: -13.750029563903809
    9. ')][' → logprob: -14.875029563903809
    10. '])' → logprob: -15.625029563903809

Token 16: 'def' (ID: 1314)
  Prédit: 'for'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'for' → logprob: -0.00033439300023019314
    2. ' for' → logprob: -8.125334739685059
    3. 'f' → logprob: -11.000334739685059
    4. 'd' → logprob: -12.375334739685059
    5. 'i' → logprob: -12.500334739685059
    6. ')' → logprob: -12.625334739685059
    7. '[' → logprob: -13.625334739685059
    8. '<|end|>' → logprob: -13.625334739685059
    9. '
' → logprob: -13.750334739685059
    10. 'n' → logprob: -13.750334739685059

Token 17: ' fill' (ID: 6954)
  Prédit: ' main'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' main' → logprob: -1.1462453603744507
    2. ' read' → logprob: -1.6462453603744507
    3. ' ' → logprob: -1.7712453603744507
    4. ' process' → logprob: -2.3962454795837402
    5. ' add' → logprob: -3.0212454795837402
    6. ' dfs' → logprob: -3.1462454795837402
    7. ' solution' → logprob: -3.7712454795837402
    8. ' f' → logprob: -3.7712454795837402
    9. ' solve' → logprob: -3.7712454795837402
    10. ' input' → logprob: -4.27124547958374

Token 18: '():
' (ID: 8595)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '(' → logprob: -0.47957319021224976
    2. '_' → logprob: -1.2295732498168945
    3. '_data' → logprob: -2.7295732498168945
    4. '_list' → logprob: -4.1045732498168945
    5. 'data' → logprob: -6.6045732498168945
    6. '_lists' → logprob: -6.7295732498168945
    7. '_lst' → logprob: -7.4795732498168945
    8. '(_)' → logprob: -7.8545732498168945
    9. '_datas' → logprob: -8.104573249816895
    10. '_items' → logprob: -8.229573249816895

Token 19: ' for' (ID: 395)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.16305303573608398
    2. '<|end|>' → logprob: -2.163053035736084
    3. '\n' → logprob: -5.038053035736084
    4. ' for' → logprob: -5.538053035736084
    5. '    
' → logprob: -5.663053035736084
    6. ' ' → logprob: -5.788053035736084
    7. '    ' → logprob: -5.913053035736084
    8. '\t' → logprob: -6.163053035736084
    9. '\' → logprob: -6.288053035736084
    10. '```' → logprob: -6.663053035736084

Token 20: ' idx' (ID: 14016)
  Prédit: 'i'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'i' → logprob: -0.5760132074356079
    2. ' i' → logprob: -0.8260132074356079
    3. '_' → logprob: -9.951013565063477
    4. ' _' → logprob: -11.451013565063477
    5. ' ' → logprob: -11.951013565063477
    6. '_i' → logprob: -12.451013565063477
    7. 'x' → logprob: -13.951013565063477
    8. ' j' → logprob: -14.451013565063477
    9. ' x' → logprob: -14.826013565063477
    10. 'j' → logprob: -14.951013565063477

Token 21: ' in' (ID: 306)
  Prédit: ' in'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' in' → logprob: -0.02997378632426262
    2. 'in' → logprob: -3.5299737453460693
    3. ',' → logprob: -9.154973983764648
    4. ' ' → logprob: -9.279973983764648
    5. ' ,' → logprob: -11.904973983764648
    6. 'range' → logprob: -13.029973983764648
    7. '	in' → logprob: -13.154973983764648
    8. '```' → logprob: -13.279973983764648
    9. 'd' → logprob: -13.404973983764648
    10. '_in' → logprob: -13.529973983764648

Token 22: ' range' (ID: 3352)
  Prédit: 'range'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'range' → logprob: -0.05489525943994522
    2. ' range' → logprob: -2.9298951625823975
    3. 'd' → logprob: -11.429895401000977
    4. '```' → logprob: -14.804895401000977
    5. ' ' → logprob: -15.054895401000977
    6. 'r' → logprob: -15.179895401000977
    7. 'ran' → logprob: -15.179895401000977
    8. 'rang' → logprob: -15.304895401000977
    9. '	range' → logprob: -15.554895401000977
    10. 'lst' → logprob: -16.054895401000977

Token 23: '(N' (ID: 10564)
  Prédit: '(N'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(N' → logprob: -0.1025385856628418
    2. '(' → logprob: -2.352538585662842
    3. ' (' → logprob: -6.477538585662842
    4. ' N' → logprob: -7.602538585662842
    5. 'N' → logprob: -8.7275390625
    6. '(len' → logprob: -9.2275390625
    7. '(n' → logprob: -10.9775390625
    8. ' ' → logprob: -12.9775390625
    9. '(s' → logprob: -13.1025390625
    10. '()' → logprob: -13.7275390625

Token 24: '):
' (ID: 1883)
  Prédit: '):'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '):' → logprob: -0.007371169049292803
    2. ' ):' → logprob: -5.632370948791504
    3. '):
' → logprob: -6.382370948791504
    4. '+' → logprob: -6.757370948791504
    5. ')' → logprob: -7.132370948791504
    6. ':' → logprob: -9.632370948791504
    7. ' ' → logprob: -11.507370948791504
    8. '   ' → logprob: -11.632370948791504
    9. ' )' → logprob: -11.757370948791504
    10. ' ):
' → logprob: -12.507370948791504

Token 25: ' ' (ID: 220)
  Prédit: ' lst'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' lst' → logprob: -0.47014445066452026
    2. '    ' → logprob: -1.970144510269165
    3. 'd' → logprob: -2.595144510269165
    4. ' ' → logprob: -2.970144510269165
    5. ' dat' → logprob: -3.095144510269165
    6. '   ' → logprob: -3.220144510269165
    7. 'lst' → logprob: -4.220144271850586
    8. ' d' → logprob: -5.470144271850586
    9. ' ' → logprob: -7.345144271850586
    10. '   ' → logprob: -7.595144271850586

Token 26: ' n' (ID: 297)
  Prédit: ' lst'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' lst' → logprob: -0.5619835257530212
    2. ' ' → logprob: -1.936983585357666
    3. 'd' → logprob: -2.311983585357666
    4. 'lst' → logprob: -2.686983585357666
    5. ' dat' → logprob: -2.811983585357666
    6. ' d' → logprob: -4.436983585357666
    7. ' for' → logprob: -4.436983585357666
    8. '   ' → logprob: -4.811983585357666
    9. 'dat' → logprob: -5.436983585357666
    10. ' line' → logprob: -5.936983585357666

Token 27: '=int' (ID: 37431)
  Prédit: '='
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '=' → logprob: -0.9980525970458984
    2. ' =' → logprob: -1.1230525970458984
    3. 'um' → logprob: -1.6230525970458984
    4. '=int' → logprob: -2.7480525970458984
    5. 'umber' → logprob: -4.123052597045898
    6. ' ' → logprob: -4.623052597045898
    7. '=input' → logprob: -4.748052597045898
    8. '=d' → logprob: -6.123052597045898
    9. 'ew' → logprob: -6.248052597045898
    10. 'd' → logprob: -6.498052597045898

Token 28: '(input' (ID: 10054)
  Prédit: '(input'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(input' → logprob: -0.023272501304745674
    2. '(' → logprob: -3.7732725143432617
    3. 'input' → logprob: -11.523272514343262
    4. ' (' → logprob: -11.648272514343262
    5. ' input' → logprob: -12.523272514343262
    6. '(
' → logprob: -12.898272514343262
    7. '=input' → logprob: -13.773272514343262
    8. '(

' → logprob: -15.523272514343262
    9. ',input' → logprob: -15.523272514343262
    10. '<input' → logprob: -15.773272514343262

Token 29: '())
' (ID: 4574)
  Prédit: '())'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '())' → logprob: -0.0924396887421608
    2. '()' → logprob: -2.592439651489258
    3. ')' → logprob: -4.342439651489258
    4. '(' → logprob: -7.842439651489258
    5. '())
' → logprob: -11.217439651489258
    6. ' ())' → logprob: -11.342439651489258
    7. '()))' → logprob: -11.467439651489258
    8. '()
' → logprob: -12.342439651489258
    9. '().' → logprob: -12.467439651489258
    10. '('' → logprob: -12.717439651489258

Token 30: ' ' (ID: 220)
  Prédit: ' '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' ' → logprob: -0.027677878737449646
    2. '<|end|>' → logprob: -4.6526780128479
    3. '  ' → logprob: -4.9026780128479
    4. ' 
' → logprob: -5.6526780128479
    5. '  
' → logprob: -6.0276780128479
    6. 'd' → logprob: -6.9026780128479
    7. ' )' → logprob: -7.1526780128479
    8. ' ' → logprob: -7.4026780128479
    9. ')' → logprob: -8.277677536010742
    10. ' ,' → logprob: -8.402677536010742

Token 31: ' dat' (ID: 1814)
  Prédit: ' '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' ' → logprob: -0.26615649461746216
    2. ' lst' → logprob: -1.8911564350128174
    3. 'lst' → logprob: -3.5161564350128174
    4. ' for' → logprob: -4.0161566734313965
    5. ' dat' → logprob: -4.2661566734313965
    6. 'd' → logprob: -4.3911566734313965
    7. 'for' → logprob: -5.7661566734313965
    8. '  ' → logprob: -6.2661566734313965
    9. ' d' → logprob: -7.0161566734313965
    10. '```' → logprob: -7.3911566734313965

Token 32: 'alist' (ID: 106280)
  Prédit: 'alist'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'alist' → logprob: -0.0007151735480874777
    2. 'atalist' → logprob: -7.500715255737305
    3. 'a' → logprob: -9.000715255737305
    4. 'al' → logprob: -10.875715255737305
    5. ' al' → logprob: -11.500715255737305
    6. 'ata' → logprob: -12.375715255737305
    7. ' a' → logprob: -13.125715255737305
    8. 'alis' → logprob: -13.750715255737305
    9. 'at' → logprob: -14.625715255737305
    10. ' at' → logprob: -15.000715255737305

Token 33: '.append' (ID: 3709)
  Prédit: '.append'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '.append' → logprob: -0.0004717834817711264
    2. '.' → logprob: -7.750471591949463
    3. '.extend' → logprob: -10.250472068786621
    4. ' .' → logprob: -12.750472068786621
    5. '.app' → logprob: -14.000472068786621
    6. 'append' → logprob: -14.250472068786621
    7. '.setdefault' → logprob: -14.375472068786621
    8. '.ap' → logprob: -16.375471115112305
    9. '_append' → logprob: -16.500471115112305
    10. '[' → logprob: -16.625471115112305

Token 34: '(n' (ID: 2406)
  Prédit: '(n'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(n' → logprob: -0.1002403199672699
    2. '(' → logprob: -2.3502402305603027
    3. ' (' → logprob: -11.225240707397461
    4. '(
' → logprob: -11.600240707397461
    5. '((' → logprob: -12.475240707397461
    6. '(int' → logprob: -12.725240707397461
    7. '(

' → logprob: -13.850240707397461
    8. '(data' → logprob: -14.350240707397461
    9. '(input' → logprob: -14.600240707397461
    10. '('' → logprob: -14.725240707397461

Token 35: ')
' (ID: 446)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')' → logprob: -5.037835580878891e-05
    2. ' )' → logprob: -10.00005054473877
    3. ')
' → logprob: -12.87505054473877
    4. ' ' → logprob: -13.62505054473877
    5. '))' → logprob: -14.12505054473877
    6. '`)' → logprob: -15.00005054473877
    7. ')n' → logprob: -16.750049591064453
    8. ')`' → logprob: -17.375049591064453
    9. ' ' → logprob: -17.625049591064453
    10. ')return' → logprob: -17.750049591064453

Token 36: ' ' (ID: 220)
  Prédit: ' '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' ' → logprob: -0.8439531326293945
    2. '  
' → logprob: -1.0939531326293945
    3. ' 
' → logprob: -1.5939531326293945
    4. '<|end|>' → logprob: -4.3439531326293945
    5. '\n' → logprob: -5.2189531326293945
    6. '
' → logprob: -5.7189531326293945
    7. '  ' → logprob: -6.0939531326293945
    8. '\' → logprob: -6.2189531326293945
    9. '   
' → logprob: -6.5939531326293945
    10. ' for' → logprob: -6.9689531326293945

Token 37: ' for' (ID: 395)
  Prédit: ' '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' ' → logprob: -0.46805721521377563
    2. ' lst' → logprob: -1.3430571556091309
    3. 'lst' → logprob: -2.968057155609131
    4. ' for' → logprob: -3.968057155609131
    5. 'd' → logprob: -4.218057155609131
    6. 'for' → logprob: -4.843057155609131
    7. ' if' → logprob: -5.093057155609131
    8. '  ' → logprob: -5.968057155609131
    9. '\t' → logprob: -6.218057155609131
    10. '\' → logprob: -6.843057155609131

Token 38: ' q' (ID: 2335)
  Prédit: ' j'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' j' → logprob: -0.9518010020256042
    2. ' _' → logprob: -1.326801061630249
    3. ' range' → logprob: -1.451801061630249
    4. ' i' → logprob: -3.201801061630249
    5. ' num' → logprob: -3.826801061630249
    6. ' val' → logprob: -4.45180082321167
    7. ' ' → logprob: -4.45180082321167
    8. '_' → logprob: -4.57680082321167
    9. ' inner' → logprob: -5.95180082321167
    10. ' x' → logprob: -6.20180082321167

Token 39: ' in' (ID: 306)
  Prédit: ' in'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' in' → logprob: -0.004443531855940819
    2. 'in' → logprob: -6.129443645477295
    3. 'n' → logprob: -7.004443645477295
    4. ' ' → logprob: -7.254443645477295
    5. 'u' → logprob: -8.129443168640137
    6. '  ' → logprob: -9.004443168640137
    7. '   ' → logprob: -10.504443168640137
    8. '_' → logprob: -10.754443168640137
    9. 'q' → logprob: -10.879443168640137
    10. 'd' → logprob: -10.879443168640137

Token 40: ' range' (ID: 3352)
  Prédit: 'range'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'range' → logprob: -0.47416338324546814
    2. ' range' → logprob: -0.9741634130477905
    3. ' ' → logprob: -10.474163055419922
    4. 'd' → logprob: -10.599163055419922
    5. 'lst' → logprob: -11.099163055419922
    6. ' lst' → logprob: -12.849163055419922
    7. '	range' → logprob: -13.099163055419922
    8. '  ' → logprob: -13.099163055419922
    9. 'rang' → logprob: -13.099163055419922
    10. 'ran' → logprob: -13.724163055419922

Token 41: '(n' (ID: 2406)
  Prédit: '(n'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(n' → logprob: -0.004442224279046059
    2. '(' → logprob: -5.62944221496582
    3. ' (' → logprob: -7.62944221496582
    4. '(d' → logprob: -8.37944221496582
    5. '(len' → logprob: -9.75444221496582
    6. '(N' → logprob: -10.75444221496582
    7. ' n' → logprob: -10.87944221496582
    8. '(q' → logprob: -12.12944221496582
    9. '(int' → logprob: -12.25444221496582
    10. ' ' → logprob: -12.37944221496582

Token 42: '):
' (ID: 1883)
  Prédit: '):'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '):' → logprob: -0.026502782478928566
    2. ' ):' → logprob: -3.901502847671509
    3. ')' → logprob: -5.40150260925293
    4. '):
' → logprob: -7.77650260925293
    5. '+' → logprob: -7.90150260925293
    6. ' ' → logprob: -8.02650260925293
    7. ' )' → logprob: -8.27650260925293
    8. '-' → logprob: -11.02650260925293
    9. ' ):
' → logprob: -11.65150260925293
    10. ':' → logprob: -11.65150260925293

Token 43: '  ' (ID: 256)
  Prédit: ' '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' ' → logprob: -0.22711722552776337
    2. '  ' → logprob: -2.3521173000335693
    3. '   ' → logprob: -2.9771173000335693
    4. ' lst' → logprob: -3.2271173000335693
    5. '    ' → logprob: -5.47711706161499
    6. 'lst' → logprob: -5.72711706161499
    7. '  
' → logprob: -6.10211706161499
    8. ' ' → logprob: -6.60211706161499
    9. '  ' → logprob: -6.60211706161499
    10. '<|end|>' → logprob: -6.85211706161499

Token 44: ' p' (ID: 275)
  Prédit: ' lst'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' lst' → logprob: -0.2117270827293396
    2. ' val' → logprob: -2.5867271423339844
    3. 'lst' → logprob: -2.8367271423339844
    4. '   ' → logprob: -3.9617271423339844
    5. ' x' → logprob: -4.211727142333984
    6. ' s' → logprob: -5.586727142333984
    7. 'x' → logprob: -5.586727142333984
    8. 'val' → logprob: -5.836727142333984
    9. 's' → logprob: -6.961727142333984
    10. 'q' → logprob: -7.086727142333984

Token 45: '1' (ID: 16)
  Prédit: '=int'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '=int' → logprob: -0.0068171969614923
    2. ' =' → logprob: -6.00681734085083
    3. '=' → logprob: -6.13181734085083
    4. '=input' → logprob: -6.75681734085083
    5. 'r' → logprob: -7.50681734085083
    6. 'int' → logprob: -8.131816864013672
    7. ' ' → logprob: -10.256816864013672
    8. ' int' → logprob: -10.506816864013672
    9. 'nt' → logprob: -10.631816864013672
    10. '=list' → logprob: -11.256816864013672

Token 46: ',p' (ID: 14835)
  Prédit: '=int'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '=int' → logprob: -0.6831143498420715
    2. '=' → logprob: -1.5581142902374268
    3. '=input' → logprob: -2.0581142902374268
    4. ' =' → logprob: -2.1831142902374268
    5. 'r' → logprob: -3.3081142902374268
    6. ' ' → logprob: -5.933114528656006
    7. 'ut' → logprob: -6.933114528656006
    8. 'uts' → logprob: -7.308114528656006
    9. 'int' → logprob: -7.433114528656006
    10. '.append' → logprob: -8.433114051818848

Token 47: '2' (ID: 17)
  Prédit: '1'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '1' → logprob: -0.12767961621284485
    2. ',' → logprob: -2.8776795864105225
    3. '=' → logprob: -3.6276795864105225
    4. ',p' → logprob: -4.252679824829102
    5. ' =' → logprob: -4.502679824829102
    6. ',q' → logprob: -4.877679824829102
    7. 'p' → logprob: -7.002679824829102
    8. ' ' → logprob: -7.752679824829102
    9. '=p' → logprob: -7.752679824829102
    10. ' ,' → logprob: -8.377679824829102

Token 48: '=' (ID: 28)
  Prédit: '='
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '=' → logprob: -0.04016517847776413
    2. ' =' → logprob: -3.6651651859283447
    3. '=input' → logprob: -4.290164947509766
    4. '=int' → logprob: -9.790164947509766
    5. '=list' → logprob: -11.915164947509766
    6. '=p' → logprob: -14.415164947509766
    7. ' ' → logprob: -14.665164947509766
    8. '=line' → logprob: -14.665164947509766
    9. '＝' → logprob: -14.915164947509766
    10. '=value' → logprob: -15.165164947509766

Token 49: 'map' (ID: 3726)
  Prédit: ' map'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' map' → logprob: -0.2074405997991562
    2. 'map' → logprob: -1.7074406147003174
    3. 'input' → logprob: -5.707440376281738
    4. ' input' → logprob: -5.957440376281738
    5. ' list' → logprob: -9.707440376281738
    6. 'list' → logprob: -10.582440376281738
    7. ' [' → logprob: -12.707440376281738
    8. '[' → logprob: -13.082440376281738
    9. '	map' → logprob: -13.082440376281738
    10. ' ' → logprob: -13.207440376281738

Token 50: '(int' (ID: 2742)
  Prédit: '(int'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(int' → logprob: -0.001015183632262051
    2. 'int' → logprob: -8.001014709472656
    3. '(' → logprob: -8.251014709472656
    4. '(str' → logprob: -9.001014709472656
    5. '(input' → logprob: -9.501014709472656
    6. '<|end|>' → logprob: -9.501014709472656
    7. '[int' → logprob: -9.626014709472656
    8. '(lambda' → logprob: -10.501014709472656
    9. '<int' → logprob: -10.501014709472656
    10. '(eval' → logprob: -12.251014709472656

Token 51: ',input' (ID: 123014)
  Prédit: ',input'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ',input' → logprob: -0.009050711058080196
    2. '(input' → logprob: -5.2590508460998535
    3. ',' → logprob: -5.6340508460998535
    4. 'input' → logprob: -9.134050369262695
    5. '<|end|>' → logprob: -9.759050369262695
    6. ',int' → logprob: -10.134050369262695
    7. '(' → logprob: -11.509050369262695
    8. ' ,' → logprob: -12.134050369262695
    9. ' input' → logprob: -12.509050369262695
    10. ',map' → logprob: -13.259050369262695

Token 52: '().' (ID: 1454)
  Prédit: '().'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '().' → logprob: -0.00039588010986335576
    2. '()' → logprob: -7.875395774841309
    3. ' ().' → logprob: -12.125395774841309
    4. ')' → logprob: -12.250395774841309
    5. '(' → logprob: -12.375395774841309
    6. ' ' → logprob: -14.750395774841309
    7. '.' → logprob: -15.500395774841309
    8. '()
' → logprob: -15.875395774841309
    9. '())' → logprob: -16.000396728515625
    10. ' ()' → logprob: -16.375396728515625

Token 53: 'split' (ID: 13627)
  Prédit: 'split'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'split' → logprob: -8.125210297293961e-05
    2. 'strip' → logprob: -9.500081062316895
    3. ' split' → logprob: -12.375081062316895
    4. 'rstrip' → logprob: -13.250081062316895
    5. '(split' → logprob: -14.875081062316895
    6. 'spl' → logprob: -16.37508201599121
    7. 's' → logprob: -18.12508201599121
    8. 'plit' → logprob: -19.37508201599121
    9. '```' → logprob: -19.75008201599121
    10. ' ' → logprob: -20.37508201599121

Token 54: '())
' (ID: 4574)
  Prédit: '())'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '())' → logprob: -0.011309999041259289
    2. '()' → logprob: -5.26131010055542
    3. ')' → logprob: -5.51131010055542
    4. '()))' → logprob: -6.38631010055542
    5. '())
' → logprob: -8.636309623718262
    6. '))' → logprob: -9.261309623718262
    7. '(' → logprob: -10.511309623718262
    8. '('' → logprob: -11.636309623718262
    9. '())

' → logprob: -12.511309623718262
    10. ' ())' → logprob: -12.511309623718262

Token 55: '  ' (ID: 256)
  Prédit: ' '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' ' → logprob: -0.6062784790992737
    2. '  ' → logprob: -1.981278419494629
    3. ')' → logprob: -2.481278419494629
    4. ' lst' → logprob: -2.731278419494629
    5. 'lst' → logprob: -2.731278419494629
    6. '()' → logprob: -3.481278419494629
    7. '<|end|>' → logprob: -3.731278419494629
    8. '   ' → logprob: -4.606278419494629
    9. '(lst' → logprob: -4.731278419494629
    10. ' )' → logprob: -5.231278419494629

Token 56: ' lst' (ID: 33384)
  Prédit: 'lst'
  Correct (stricte): False
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'lst' (adapté à ' lst') → logprob: -0.055468786507844925
    2. ' lst' → logprob: -2.930468797683716
    3. '  ' → logprob: -7.680468559265137
    4. '   ' → logprob: -10.305468559265137
    5. '_lst' → logprob: -10.555468559265137
    6. ' ' → logprob: -10.680468559265137
    7. '<|end|>' → logprob: -11.180468559265137
    8. 'Lst' → logprob: -11.805468559265137
    9. '[' → logprob: -12.055468559265137
    10. '.lst' → logprob: -12.055468559265137

Token 57: '[idx' (ID: 25582)
  Prédit: '[idx'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '[idx' → logprob: -0.00039015832589939237
    2. '[' → logprob: -7.87539005279541
    3. '```' → logprob: -13.25039005279541
    4. '[index' → logprob: -14.00039005279541
    5. '[q' → logprob: -14.00039005279541
    6. '[int' → logprob: -14.25039005279541
    7. '[cnt' → logprob: -14.37539005279541
    8. '[len' → logprob: -14.62539005279541
    9. '[p' → logprob: -14.87539005279541
    10. '[df' → logprob: -15.00039005279541

Token 58: '].' (ID: 1651)
  Prédit: '].'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '].' → logprob: -0.009513230063021183
    2. '.append' → logprob: -5.5095133781433105
    3. '][' → logprob: -6.1345133781433105
    4. ').' → logprob: -6.1345133781433105
    5. '[' → logprob: -7.5095133781433105
    6. ']' → logprob: -8.384512901306152
    7. ' ].' → logprob: -8.384512901306152
    8. 'append' → logprob: -10.259512901306152
    9. ' ' → logprob: -11.509512901306152
    10. '.' → logprob: -12.009512901306152

Token 59: 'append' (ID: 9132)
  Prédit: 'append'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'append' → logprob: -1.8624639324116288e-06
    2. ' append' → logprob: -13.250001907348633
    3. '.append' → logprob: -17.250001907348633
    4. 'appen' → logprob: -17.375001907348633
    5. '	append' → logprob: -18.875001907348633
    6. '_append' → logprob: -19.000001907348633
    7. 'Append' → logprob: -21.125001907348633
    8. 'extend' → logprob: -21.500001907348633
    9. ' ' → logprob: -21.750001907348633
    10. 'appe' → logprob: -22.125001907348633

Token 60: '((' (ID: 2054)
  Prédit: '(('
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '((' → logprob: -0.004761430434882641
    2. '(' → logprob: -5.754761219024658
    3. '(p' → logprob: -6.629761219024658
    4. '([' → logprob: -8.254761695861816
    5. '(tuple' → logprob: -14.379761695861816
    6. '(('' → logprob: -15.004761695861816
    7. '(q' → logprob: -15.254761695861816
    8. '(
' → logprob: -15.504761695861816
    9. '(([' → logprob: -15.504761695861816
    10. '(P' → logprob: -16.2547607421875

Token 61: 'p' (ID: 79)
  Prédit: 'p'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'p' → logprob: -0.0004882152716163546
    2. ' p' → logprob: -7.62548828125
    3. ' ' → logprob: -16.00048828125
    4. '(p' → logprob: -16.75048828125
    5. '  ' → logprob: -16.87548828125
    6. '   ' → logprob: -18.62548828125
    7. '    ' → logprob: -19.62548828125
    8. ')p' → logprob: -19.75048828125
    9. '	p' → logprob: -20.25048828125
    10. 'q' → logprob: -20.25048828125

Token 62: '1' (ID: 16)
  Prédit: '1'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '1' → logprob: -4.008129963040119e-06
    2. ' ' → logprob: -13.562503814697266
    3. '2' → logprob: -14.062503814697266
    4. '_' → logprob: -14.125003814697266
    5. ',' → logprob: -15.312503814697266
    6. ')' → logprob: -15.937503814697266
    7. '' → logprob: -16.312503814697266
    8. '１' → logprob: -16.500003814697266
    9. '```' → logprob: -16.562503814697266
    10. '-' → logprob: -16.750003814697266

Token 63: '-' (ID: 12)
  Prédit: ','
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ',' → logprob: -0.4747370183467865
    2. ',p' → logprob: -0.9747370481491089
    3. ' ,' → logprob: -7.349737167358398
    4. ' ' → logprob: -11.599737167358398
    5. ',q' → logprob: -12.474737167358398
    6. ',n' → logprob: -14.599737167358398
    7. ' p' → logprob: -14.599737167358398
    8. ',
' → logprob: -15.099737167358398
    9. ',v' → logprob: -15.349737167358398
    10. '-' → logprob: -15.349737167358398

Token 64: '1' (ID: 16)
  Prédit: '1'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '1' → logprob: -0.0008046258008107543
    2. ' ' → logprob: -7.125804424285889
    3. '１' → logprob: -17.000804901123047
    4. '<|end|>' → logprob: -17.250804901123047
    5. ' p' → logprob: -17.625804901123047
    6. '2' → logprob: -18.000804901123047
    7. '   ' → logprob: -18.000804901123047
    8. ',' → logprob: -18.563304901123047
    9. ')' → logprob: -18.625804901123047
    10. ' one' → logprob: -18.875804901123047

Token 65: ',p' (ID: 14835)
  Prédit: ','
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ',' → logprob: -0.2933344542980194
    2. ',p' → logprob: -1.4183344841003418
    3. ' ,' → logprob: -4.418334484100342
    4. ' ' → logprob: -11.418334007263184
    5. ',q' → logprob: -11.543334007263184
    6. ',
' → logprob: -11.918334007263184
    7. ',n' → logprob: -12.418334007263184
    8. ')' → logprob: -12.668334007263184
    9. '<|end|>' → logprob: -13.418334007263184
    10. ',)' → logprob: -13.668334007263184

Token 66: '2' (ID: 17)
  Prédit: '2'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '2' → logprob: -1.1160349458805285e-05
    2. '1' → logprob: -11.625011444091797
    3. '0' → logprob: -14.312511444091797
    4. ' ' → logprob: -15.187511444091797
    5. '-' → logprob: -15.812511444091797
    6. ')' → logprob: -16.000011444091797
    7. '```' → logprob: -16.125011444091797
    8. '[' → logprob: -16.250011444091797
    9. '' → logprob: -16.687511444091797
    10. '₂' → logprob: -16.812511444091797

Token 67: '))
' (ID: 2210)
  Prédit: '))'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '))' → logprob: -0.00859022606164217
    2. '-' → logprob: -5.383590221405029
    3. ' ))' → logprob: -6.383590221405029
    4. ')' → logprob: -6.633590221405029
    5. ')))' → logprob: -8.008590698242188
    6. ' -' → logprob: -8.633590698242188
    7. ',' → logprob: -8.758590698242188
    8. ' ' → logprob: -9.008590698242188
    9. '))
' → logprob: -9.258590698242188
    10. '<|end|>' → logprob: -11.258590698242188

Token 68: 'fill' (ID: 12413)
  Prédit: ''
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False

Token 69: '()
' (ID: 1234)
  Prédit: '()'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '()' → logprob: -0.00026658078422769904
    2. '(' → logprob: -8.250267028808594
    3. '()
' → logprob: -13.000267028808594
    4. ' ()' → logprob: -13.875267028808594
    5. '()`' → logprob: -14.750267028808594
    6. '()

' → logprob: -15.000267028808594
    7. '()<' → logprob: -15.375267028808594
    8. '();' → logprob: -15.500267028808594
    9. '()(' → logprob: -15.625267028808594
    10. '().' → logprob: -16.000267028808594

Token 70: 'maximum' (ID: 78601)
  Prédit: 'for'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'for' → logprob: -0.29691559076309204
    2. '#' → logprob: -2.4219155311584473
    3. '<|end|>' → logprob: -2.9219155311584473
    4. ')' → logprob: -3.2969155311584473
    5. '[' → logprob: -4.421915531158447
    6. ' for' → logprob: -4.546915531158447
    7. 'def' → logprob: -4.671915531158447
    8. 'print' → logprob: -4.921915531158447
    9. '```' → logprob: -5.171915531158447
    10. ' ' → logprob: -5.296915531158447

Token 71: '=' (ID: 28)
  Prédit: '='
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '=' → logprob: -0.14478544890880585
    2. '_' → logprob: -2.2697854042053223
    3. ' =' → logprob: -4.769785404205322
    4. 's' → logprob: -5.269785404205322
    5. '_value' → logprob: -5.644785404205322
    6. '(' → logprob: -5.769785404205322
    7. '=max' → logprob: -6.019785404205322
    8. '_length' → logprob: -6.394785404205322
    9. '_max' → logprob: -7.019785404205322
    10. '_val' → logprob: -7.269785404205322

Token 72: '0' (ID: 15)
  Prédit: '0'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '0' → logprob: -0.2595473825931549
    2. 'max' → logprob: -1.5095473527908325
    3. ' max' → logprob: -5.884547233581543
    4. '-' → logprob: -5.884547233581543
    5. ' ' → logprob: -6.884547233581543
    6. 'float' → logprob: -7.634547233581543
    7. 'd' → logprob: -8.634547233581543
    8. '1' → logprob: -9.759547233581543
    9. '-max' → logprob: -9.884547233581543
    10. 'sum' → logprob: -10.259547233581543

Token 73: '
' (ID: 198)
  Prédit: ''
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False

Token 74: 'for' (ID: 1938)
  Prédit: 'for'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'for' → logprob: -0.10130161792039871
    2. ' for' → logprob: -2.351301670074463
    3. '
' → logprob: -7.601301670074463
    4. '<|end|>' → logprob: -8.601301193237305
    5. '```' → logprob: -8.601301193237305
    6. '\n' → logprob: -9.351301193237305
    7. ' ' → logprob: -10.101301193237305
    8. ' 
' → logprob: -11.101301193237305
    9. 'max' → logprob: -11.351301193237305
    10. '\' → logprob: -11.601301193237305

Token 75: ' v' (ID: 323)
  Prédit: ' i'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' i' → logprob: -0.07717987895011902
    2. ' idx' → logprob: -3.0771799087524414
    3. ' lst' → logprob: -4.952179908752441
    4. 'i' → logprob: -5.952179908752441
    5. ' data' → logprob: -5.952179908752441
    6. ' length' → logprob: -6.077179908752441
    7. ' x' → logprob: -6.202179908752441
    8. ' val' → logprob: -6.327179908752441
    9. ' sub' → logprob: -6.827179908752441
    10. ' num' → logprob: -6.952179908752441

Token 76: ' in' (ID: 306)
  Prédit: ' in'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' in' → logprob: -0.01139663066715002
    2. 'in' → logprob: -4.511396408081055
    3. ' ' → logprob: -9.261396408081055
    4. 'alue' → logprob: -9.511396408081055
    5. 's' → logprob: -10.011396408081055
    6. 'al' → logprob: -10.761396408081055
    7. 'i' → logprob: -11.261396408081055
    8. 'e' → logprob: -11.636396408081055
    9. 'is' → logprob: -11.761396408081055
    10. ',' → logprob: -11.886396408081055

Token 77: ' range' (ID: 3352)
  Prédit: ' range'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' range' → logprob: -0.11726848036050797
    2. ' dat' → logprob: -2.7422685623168945
    3. ' lst' → logprob: -3.1172685623168945
    4. 'range' → logprob: -7.2422685623168945
    5. 'lst' → logprob: -7.2422685623168945
    6. ' d' → logprob: -8.867268562316895
    7. 'd' → logprob: -8.992268562316895
    8. '[' → logprob: -9.992268562316895
    9. ' ' → logprob: -10.367268562316895
    10. 'dat' → logprob: -10.679768562316895

Token 78: '(pow' (ID: 189160)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '(' → logprob: -0.1272130310535431
    2. '(N' → logprob: -2.1272130012512207
    3. '((' → logprob: -8.752213478088379
    4. '(len' → logprob: -9.752213478088379
    5. 'N' → logprob: -11.002213478088379
    6. '1' → logprob: -11.377213478088379
    7. '(n' → logprob: -11.502213478088379
    8. ' (' → logprob: -11.627213478088379
    9. '(max' → logprob: -12.002213478088379
    10. '(M' → logprob: -13.252213478088379

Token 79: '(' (ID: 7)
  Prédit: '('
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(' → logprob: -0.0030543615575879812
    2. '2' → logprob: -6.378054141998291
    3. '(N' → logprob: -6.628054141998291
    4. ' (' → logprob: -11.50305461883545
    5. '(len' → logprob: -13.00305461883545
    6. '(
' → logprob: -13.12805461883545
    7. '   ' → logprob: -13.12805461883545
    8. ' ' → logprob: -13.25305461883545
    9. '```' → logprob: -13.50305461883545
    10. ')' → logprob: -13.62805461883545

Token 80: '2' (ID: 17)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(' → logprob: -0.18665923178195953
    2. '2' → logprob: -1.8116592168807983
    3. '(N' → logprob: -5.186659336090088
    4. 'N' → logprob: -7.561659336090088
    5. ' ' → logprob: -8.06165885925293
    6. '3' → logprob: -9.43665885925293
    7. '   ' → logprob: -9.43665885925293
    8. ' (' → logprob: -10.06165885925293
    9. '```' → logprob: -10.43665885925293
    10. ')' → logprob: -10.56165885925293

Token 81: ',N' (ID: 49539)
  Prédit: '(N'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(N' → logprob: -0.020670931786298752
    2. 'N' → logprob: -4.2706708908081055
    3. '(' → logprob: -5.3956708908081055
    4. ')' → logprob: -6.8956708908081055
    5. ' N' → logprob: -7.8956708908081055
    6. ' (' → logprob: -8.520670890808105
    7. ',' → logprob: -8.645670890808105
    8. ',N' → logprob: -9.270670890808105
    9. '(
' → logprob: -10.895670890808105
    10. ' ' → logprob: -10.895670890808105

Token 82: ')):
' (ID: 22530)
  Prédit: ')):'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')):' → logprob: -0.056603576987981796
    2. '):' → logprob: -3.1816036701202393
    3. ')' → logprob: -4.80660343170166
    4. '))' → logprob: -5.68160343170166
    5. ')):
' → logprob: -6.55660343170166
    6. ' ))' → logprob: -9.05660343170166
    7. ' ):' → logprob: -9.43160343170166
    8. ':' → logprob: -9.68160343170166
    9. ')):
' → logprob: -9.68160343170166
    10. ',' → logprob: -9.93160343170166

Token 83: '   ' (ID: 271)
  Prédit: ' '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' ' → logprob: -0.1679689586162567
    2. '   ' → logprob: -2.292968988418579
    3. '<|end|>' → logprob: -3.667968988418579
    4. ' 
' → logprob: -4.66796875
    5. ':' → logprob: -5.66796875
    6. ' ' → logprob: -6.29296875
    7. ' if' → logprob: -6.29296875
    8. ' :' → logprob: -6.54296875
    9. '  ' → logprob: -6.66796875
    10. '    ' → logprob: -7.04296875

Token 84: ' bits' (ID: 18189)
  Prédit: ' mask'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' mask' → logprob: -0.5803901553153992
    2. ' bit' → logprob: -2.580390214920044
    3. ' count' → logprob: -2.830390214920044
    4. ' ' → logprob: -2.830390214920044
    5. ' valid' → logprob: -3.205390214920044
    6. ' max' → logprob: -3.205390214920044
    7. ' bits' → logprob: -3.580390214920044
    8. ' subset' → logprob: -4.205389976501465
    9. 'mask' → logprob: -4.330389976501465
    10. ' s' → logprob: -4.330389976501465

Token 85: '=[]
' (ID: 63466)
  Prédit: ' ='
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' =' → logprob: -0.5232828259468079
    2. '=' → logprob: -0.8982828259468079
    3. '=int' → logprob: -9.773283004760742
    4. ' ' → logprob: -10.023283004760742
    5. '=v' → logprob: -11.273283004760742
    6. '=i' → logprob: -12.023283004760742
    7. '=[' → logprob: -12.273283004760742
    8. '=[]' → logprob: -12.273283004760742
    9. '=list' → logprob: -12.648283004760742
    10. '＝' → logprob: -12.773283004760742

Token 86: '   ' (ID: 271)
  Prédit: ' for'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' for' → logprob: -0.44037923216819763
    2. 'for' → logprob: -1.69037926197052
    3. ' ' → logprob: -1.81537926197052
    4. '   ' → logprob: -5.3153791427612305
    5. '    ' → logprob: -6.5653791427612305
    6. '[' → logprob: -7.6903791427612305
    7. ' if' → logprob: -7.9403791427612305
    8. '=' → logprob: -8.31537914276123
    9. '	for' → logprob: -8.81537914276123
    10. '0' → logprob: -8.81537914276123

Token 87: ' cnt' (ID: 27340)
  Prédit: 'for'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'for' → logprob: -0.26944130659103394
    2. ' for' → logprob: -1.5194413661956787
    3. 'bin' → logprob: -5.5194411277771
    4. 'count' → logprob: -5.6444411277771
    5. ' ' → logprob: -6.0194411277771
    6. 'f' → logprob: -6.8944411277771
    7. ' f' → logprob: -7.0194411277771
    8. ' bin' → logprob: -7.0194411277771
    9. 'flag' → logprob: -7.2694411277771
    10. 'cnt' (adapté à ' cnt') → logprob: -7.2694411277771

Token 88: '=' (ID: 28)
  Prédit: '='
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '=' → logprob: -0.020563842728734016
    2. ' =' → logprob: -3.895563840866089
    3. '=int' → logprob: -12.145564079284668
    4. '=count' → logprob: -12.395564079284668
    5. '=[]' → logprob: -13.145564079284668
    6. '=[' → logprob: -13.395564079284668
    7. '+=' → logprob: -13.895564079284668
    8. '_=' → logprob: -14.020564079284668
    9. '={}' → logprob: -14.145564079284668
    10. ' ' → logprob: -14.145564079284668

Token 89: '0' (ID: 15)
  Prédit: '0'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '0' → logprob: -0.0001968649885384366
    2. ' ' → logprob: -8.75019645690918
    3. 'bin' → logprob: -11.12519645690918
    4. 'v' → logprob: -11.37519645690918
    5. '[' → logprob: -11.75019645690918
    6. 'sum' → logprob: -13.87519645690918
    7. '1' → logprob: -14.25019645690918
    8. ' bin' → logprob: -14.37519645690918
    9. ' [' → logprob: -15.50019645690918
    10. 'pow' → logprob: -15.50019645690918

Token 90: '
' (ID: 198)
  Prédit: '
'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '
' → logprob: -0.870675265789032
    2. ' for' → logprob: -1.2456753253936768
    3. '<|end|>' → logprob: -1.7456753253936768
    4. ' 
' → logprob: -2.9956753253936768
    5. ' ' → logprob: -3.4956753253936768
    6. '   ' → logprob: -4.245675086975098
    7. 'for' → logprob: -4.370675086975098
    8. '  
' → logprob: -5.745675086975098
    9. '	for' → logprob: -6.120675086975098
    10. '<|end|>' → logprob: -6.995675086975098

Token 91: '   ' (ID: 271)
  Prédit: ' for'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' for' → logprob: -0.6917282342910767
    2. '<|end|>' → logprob: -1.1917282342910767
    3. '
' → logprob: -2.816728115081787
    4. ' 
' → logprob: -2.941728115081787
    5. ' ' → logprob: -3.316728115081787
    6. 'for' → logprob: -3.566728115081787
    7. '   ' → logprob: -4.566728115081787
    8. '  
' → logprob: -6.316728115081787
    9. '    ' → logprob: -6.816728115081787
    10. '	for' → logprob: -7.191728115081787

Token 92: ' k' (ID: 372)
  Prédit: 'for'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'for' → logprob: -0.0815817266702652
    2. ' for' → logprob: -2.5815818309783936
    3. 'flag' → logprob: -6.8315815925598145
    4. 'valid' → logprob: -7.3315815925598145
    5. '   ' → logprob: -8.206582069396973
    6. ' ' → logprob: -8.706582069396973
    7. 'bin' → logprob: -9.331582069396973
    8. ' valid' → logprob: -9.581582069396973
    9. 'f' → logprob: -9.706582069396973
    10. ' flag' → logprob: -9.956582069396973

Token 93: '=v' (ID: 89140)
  Prédit: '='
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '=' → logprob: -0.1077471375465393
    2. '=v' → logprob: -2.7327470779418945
    3. ' =' → logprob: -3.4827470779418945
    4. '=int' → logprob: -6.2327470779418945
    5. '=i' → logprob: -6.8577470779418945
    6. '=f' → logprob: -6.8577470779418945
    7. '=len' → logprob: -7.6077470779418945
    8. '=(' → logprob: -8.482747077941895
    9. '=k' → logprob: -8.607747077941895
    10. '=b' → logprob: -8.607747077941895

Token 94: '
' (ID: 198)
  Prédit: ''
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False

Token 95: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.920109748840332
    2. ' while' → logprob: -1.170109748840332
    3. '<|end|>' → logprob: -2.295109748840332
    4. ' ' → logprob: -2.545109748840332
    5. ' for' → logprob: -3.420109748840332
    6. '    ' → logprob: -3.920109748840332
    7. ' 
' → logprob: -4.045109748840332
    8. 'while' → logprob: -4.545109748840332
    9. '	while' → logprob: -5.045109748840332
    10. '     
' → logprob: -5.045109748840332

Token 96: ' for' (ID: 395)
  Prédit: ' for'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' for' → logprob: -0.13858117163181305
    2. ' while' → logprob: -2.3885812759399414
    3. 'for' (adapté à ' for') → logprob: -3.3885812759399414
    4. 'while' → logprob: -5.763581275939941
    5. ' ' → logprob: -8.138581275939941
    6. '    ' → logprob: -9.013581275939941
    7. ' _' → logprob: -9.138581275939941
    8. '   ' → logprob: -9.513581275939941
    9. '[' → logprob: -10.388581275939941
    10. '>' → logprob: -10.513581275939941

Token 97: ' ind' (ID: 1383)
  Prédit: '_'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '_' → logprob: -0.9296693801879883
    2. 'i' → logprob: -1.0546693801879883
    3. ' i' → logprob: -1.9296693801879883
    4. ' _' → logprob: -2.6796693801879883
    5. '_i' → logprob: -3.3046693801879883
    6. 'j' → logprob: -5.804669380187988
    7. ' j' → logprob: -6.304669380187988
    8. '_j' → logprob: -7.179669380187988
    9. ' ' → logprob: -8.804669380187988
    10. '_=' → logprob: -9.179669380187988

Token 98: ' in' (ID: 306)
  Prédit: ' in'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' in' → logprob: -0.005465216934680939
    2. 'in' → logprob: -5.255465030670166
    3. ' ' → logprob: -8.505465507507324
    4. 'ex' → logprob: -11.380465507507324
    5. '  ' → logprob: -12.005465507507324
    6. '   ' → logprob: -12.255465507507324
    7. 'range' → logprob: -13.380465507507324
    8. 'x' → logprob: -13.505465507507324
    9. '_' → logprob: -14.380465507507324
    10. 'e' → logprob: -14.630465507507324

Token 99: ' range' (ID: 3352)
  Prédit: 'range'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'range' → logprob: -0.038043782114982605
    2. ' range' → logprob: -3.288043737411499
    3. ' ' → logprob: -13.413043975830078
    4. '  ' → logprob: -15.663043975830078
    5. '	range' → logprob: -15.663043975830078
    6. 're' → logprob: -15.788043975830078
    7. '(range' → logprob: -15.913043975830078
    8. '   ' → logprob: -16.288043975830078
    9. '[' → logprob: -16.788043975830078
    10. 'ran' → logprob: -17.163043975830078

Token 100: '(N' (ID: 10564)
  Prédit: '(N'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(N' → logprob: -0.0022784846369177103
    2. 'N' → logprob: -6.2522783279418945
    3. ' N' → logprob: -8.502278327941895
    4. '(' → logprob: -9.002278327941895
    5. ' (' → logprob: -10.752278327941895
    6. ' ' → logprob: -13.877278327941895
    7. '   ' → logprob: -14.752278327941895
    8. '	N' → logprob: -14.877278327941895
    9. '0' → logprob: -15.502278327941895
    10. '(
' → logprob: -15.627278327941895

Token 101: '):
' (ID: 1883)
  Prédit: '):
'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '):
' → logprob: -0.0029826906975358725
    2. '):' → logprob: -6.0029826164245605
    3. ' ):
' → logprob: -8.002983093261719
    4. '):
' → logprob: -9.002983093261719
    5. '   ' → logprob: -11.002983093261719
    6. ' ' → logprob: -11.127983093261719
    7. '-' → logprob: -11.752983093261719
    8. ':
' → logprob: -13.002983093261719
    9. ' ):' → logprob: -13.252983093261719
    10. ')' → logprob: -13.627983093261719

Token 102: '       ' (ID: 309)
  Prédit: '    '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '    ' → logprob: -0.4967823028564453
    2. '       ' → logprob: -1.1217823028564453
    3. ' ' → logprob: -3.3717823028564453
    4. '<|end|>' → logprob: -4.246782302856445
    5. '   ' → logprob: -4.996782302856445
    6. ' if' → logprob: -5.371782302856445
    7. '     
' → logprob: -6.246782302856445
    8. '  ' → logprob: -7.246782302856445
    9. '     ' → logprob: -7.496782302856445
    10. '        ' → logprob: -7.621782302856445

Token 103: ' bits' (ID: 18189)
  Prédit: ' bits'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' bits' → logprob: -0.11904739588499069
    2. ' if' → logprob: -2.8690474033355713
    3. '    ' → logprob: -3.8690474033355713
    4. ' ' → logprob: -4.244047164916992
    5. '        ' → logprob: -4.744047164916992
    6. '       ' → logprob: -4.744047164916992
    7. '   ' → logprob: -7.494047164916992
    8. 'bits' (adapté à ' bits') → logprob: -7.494047164916992
    9. ' cnt' → logprob: -7.744047164916992
    10. ' k' → logprob: -8.119047164916992

Token 104: '.append' (ID: 3709)
  Prédit: '.append'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '.append' → logprob: -0.00040755473310127854
    2. ' .' → logprob: -8.000407218933105
    3. '+=' → logprob: -11.000407218933105
    4. '.' → logprob: -11.000407218933105
    5. ' +=' → logprob: -11.875407218933105
    6. '.extend' → logprob: -12.125407218933105
    7. 'append' → logprob: -12.250407218933105
    8. ' ' → logprob: -12.500407218933105
    9. '.insert' → logprob: -12.500407218933105
    10. '.push' → logprob: -12.625407218933105

Token 105: '(' (ID: 7)
  Prédit: '(k'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(k' → logprob: -0.002533213933929801
    2. '((' → logprob: -6.002533435821533
    3. '(' → logprob: -10.252532958984375
    4. 'k' → logprob: -10.877532958984375
    5. ' (' → logprob: -12.877532958984375
    6. ' k' → logprob: -15.002532958984375
    7. '(((' → logprob: -15.252532958984375
    8. '(
' → logprob: -16.127532958984375
    9. ' ((' → logprob: -16.752532958984375
    10. '(int' → logprob: -17.127532958984375

Token 106: ' (' (ID: 350)
  Prédit: 'k'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'k' → logprob: -0.030241796746850014
    2. ' k' → logprob: -3.5302417278289795
    3. '(k' → logprob: -7.655241966247559
    4. ' (' → logprob: -11.280241966247559
    5. ' ' → logprob: -12.905241966247559
    6. '(' → logprob: -14.530241966247559
    7. '   ' → logprob: -14.905241966247559
    8. '1' → logprob: -15.280241966247559
    9. 'v' → logprob: -15.280241966247559
    10. '[k' → logprob: -15.530241966247559

Token 107: 'k' (ID: 74)
  Prédit: 'k'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'k' → logprob: -0.0017735925503075123
    2. ' k' → logprob: -6.376773357391357
    3. '(k' → logprob: -10.126773834228516
    4. '   ' → logprob: -10.876773834228516
    5. ')' → logprob: -12.376773834228516
    6. ' ' → logprob: -12.751773834228516
    7. ' (' → logprob: -13.251773834228516
    8. '  ' → logprob: -14.001773834228516
    9. '1' → logprob: -14.751773834228516
    10. '    ' → logprob: -14.876773834228516

Token 108: '&' (ID: 5)
  Prédit: '&'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '&' → logprob: -0.06400461494922638
    2. ' &' → logprob: -3.06400465965271
    3. '%' → logprob: -4.189004421234131
    4. ' %' → logprob: -9.064004898071289
    5. '>>' → logprob: -12.064004898071289
    6. '&amp' → logprob: -12.439004898071289
    7. '&
' → logprob: -12.439004898071289
    8. ' ' → logprob: -13.189004898071289
    9. ')&' → logprob: -13.564004898071289
    10. '＆' → logprob: -13.939004898071289

Token 109: '1' (ID: 16)
  Prédit: '1'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '1' → logprob: -0.0010378103470429778
    2. ' ' → logprob: -6.87603759765625
    3. '(' → logprob: -12.37603759765625
    4. '   ' → logprob: -14.37603759765625
    5. ' (' → logprob: -15.25103759765625
    6. '  ' → logprob: -17.00103759765625
    7. '((' → logprob: -18.00103759765625
    8. '１' → logprob: -18.00103759765625
    9. '           ' → logprob: -19.00103759765625
    10. '     ' → logprob: -19.00103759765625

Token 110: ')^' (ID: 73602)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ')' → logprob: -0.5625176429748535
    2. '))' → logprob: -1.3125176429748535
    3. ')==' → logprob: -2.4375176429748535
    4. '))
' → logprob: -2.6875176429748535
    5. ' )' → logprob: -6.3125176429748535
    6. ' ))
' → logprob: -6.9375176429748535
    7. ')
' → logprob: -7.1875176429748535
    8. ')>' → logprob: -7.3125176429748535
    9. ')!=' → logprob: -7.3125176429748535
    10. ' ))' → logprob: -7.5625176429748535

Token 111: '1' (ID: 16)
  Prédit: '1'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '1' → logprob: -0.05881756916642189
    2. '0' → logprob: -3.0588176250457764
    3. 'bits' → logprob: -5.808817386627197
    4. 'lst' → logprob: -5.808817386627197
    5. ' ' → logprob: -6.308817386627197
    6. '(' → logprob: -7.308817386627197
    7. 'd' → logprob: -7.433817386627197
    8. '((' → logprob: -8.058817863464355
    9. ' bits' → logprob: -8.683817863464355
    10. '(bits' → logprob: -8.933817863464355

Token 112: ' )
' (ID: 3270)
  Prédit: ')
'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')
' → logprob: -0.1109633520245552
    2. ')' → logprob: -2.4859633445739746
    3. ' )
' → logprob: -3.9859633445739746
    4. '       ' → logprob: -6.360963344573975
    5. ' )' → logprob: -6.735963344573975
    6. ')
' → logprob: -8.735963821411133
    7. '   ' → logprob: -9.610963821411133
    8. '           ' → logprob: -10.860963821411133
    9. ' ' → logprob: -11.360963821411133
    10. ' )
' → logprob: -11.735963821411133

Token 113: '       ' (ID: 309)
  Prédit: '       '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '       ' → logprob: -0.08916335552930832
    2. ' k' → logprob: -2.589163303375244
    3. 'k' → logprob: -5.589163303375244
    4. ' ' → logprob: -6.089163303375244
    5. '   ' → logprob: -6.339163303375244
    6. '	k' → logprob: -6.839163303375244
    7. ',k' → logprob: -7.839163303375244
    8. '<|end|>' → logprob: -8.464163780212402
    9. '  ' → logprob: -8.839163780212402
    10. '           ' → logprob: -8.964163780212402

Token 114: ' if' (ID: 538)
  Prédit: ' k'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' k' → logprob: -0.2524978816509247
    2. 'k' → logprob: -1.502497911453247
    3. '       ' → logprob: -7.877497673034668
    4. ' ' → logprob: -9.502497673034668
    5. '   ' → logprob: -9.627497673034668
    6. '	k' → logprob: -10.127497673034668
    7. '```' → logprob: -13.002497673034668
    8. ',k' → logprob: -13.127497673034668
    9. '  ' → logprob: -13.377497673034668
    10. '    ' → logprob: -14.002497673034668

Token 115: ' (' (ID: 350)
  Prédit: ' bits'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' bits' → logprob: -0.18965472280979156
    2. ' (' → logprob: -2.06465482711792
    3. '(bits' → logprob: -3.56465482711792
    4. '(k' → logprob: -4.93965482711792
    5. 'bits' → logprob: -5.56465482711792
    6. ' k' → logprob: -5.68965482711792
    7. ' ((' → logprob: -6.31465482711792
    8. ' ' → logprob: -7.93965482711792
    9. '((' → logprob: -8.189654350280762
    10. ' lst' → logprob: -8.689654350280762

Token 116: 'k' (ID: 74)
  Prédit: '(k'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(k' → logprob: -0.7751733064651489
    2. ' (' → logprob: -1.025173306465149
    3. ' bits' → logprob: -2.7751731872558594
    4. '(bits' → logprob: -2.7751731872558594
    5. 'bits' → logprob: -3.4001731872558594
    6. 'k' → logprob: -4.650173187255859
    7. ' k' → logprob: -4.900173187255859
    8. '((' → logprob: -6.150173187255859
    9. ' ((' → logprob: -6.275173187255859
    10. '(' → logprob: -7.775173187255859

Token 117: '&' (ID: 5)
  Prédit: '&'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '&' → logprob: -0.0076709832064807415
    2. ' &' → logprob: -4.882670879364014
    3. '>>' → logprob: -10.382671356201172
    4. '&
' → logprob: -11.757671356201172
    5. '>>&' → logprob: -12.257671356201172
    6. '&amp' → logprob: -12.382671356201172
    7. '>&' → logprob: -12.507671356201172
    8. '&gt' → logprob: -13.132671356201172
    9. '&nbsp' → logprob: -13.382671356201172
    10. ' ' → logprob: -13.507671356201172

Token 118: '1' (ID: 16)
  Prédit: '1'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '1' → logprob: -0.0012234434252604842
    2. ' ' → logprob: -6.751223564147949
    3. ' ind' → logprob: -11.25122356414795
    4. '(' → logprob: -11.62622356414795
    5. ' (' → logprob: -11.62622356414795
    6. 'ind' → logprob: -12.25122356414795
    7. '0' → logprob: -12.68872356414795
    8. '   ' → logprob: -12.75122356414795
    9. '(ind' → logprob: -12.93872356414795
    10. 'bits' → logprob: -13.68872356414795

Token 119: ')^' (ID: 73602)
  Prédit: ')=='
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ')==' → logprob: -0.6613667011260986
    2. '):
' → logprob: -1.0363667011260986
    3. '):' → logprob: -2.5363667011260986
    4. ' ):
' → logprob: -4.1613664627075195
    5. '==' → logprob: -4.2863664627075195
    6. ')' → logprob: -4.2863664627075195
    7. ' ):' → logprob: -5.2863664627075195
    8. ' )' → logprob: -7.2863664627075195
    9. ' ==' → logprob: -7.2863664627075195
    10. ':
' → logprob: -9.03636646270752

Token 120: '1' (ID: 16)
  Prédit: '1'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '1' → logprob: -0.043082546442747116
    2. '0' → logprob: -3.1680824756622314
    3. ' ' → logprob: -9.418082237243652
    4. '   ' → logprob: -13.918082237243652
    5. '```' → logprob: -14.793082237243652
    6. '  ' → logprob: -16.29308319091797
    7. 'v' → logprob: -16.41808319091797
    8. '...' → logprob: -16.66808319091797
    9. '
' → logprob: -16.91808319091797
    10. '' → logprob: -17.04308319091797

Token 121: ':
' (ID: 734)
  Prédit: '=='
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '==' → logprob: -0.04442337155342102
    2. ' ==' → logprob: -3.4194233417510986
    3. ':' → logprob: -5.169423580169678
    4. ':
' → logprob: -5.669423580169678
    5. ')==' → logprob: -7.544423580169678
    6. '=' → logprob: -8.41942310333252
    7. ' ' → logprob: -8.66942310333252
    8. '==
' → logprob: -8.66942310333252
    9. '1' → logprob: -8.91942310333252
    10. ' :
' → logprob: -9.66942310333252

Token 122: '           ' (ID: 352)
  Prédit: ' cnt'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' cnt' → logprob: -0.40213286876678467
    2. '           ' → logprob: -1.1521328687667847
    3. 'cnt' → logprob: -4.902132987976074
    4. ' ' → logprob: -5.402132987976074
    5. '       ' → logprob: -7.402132987976074
    6. '   ' → logprob: -7.777132987976074
    7. '          ' → logprob: -8.027132987976074
    8. '  ' → logprob: -8.152132987976074
    9. '	cnt' → logprob: -8.152132987976074
    10. '         ' → logprob: -8.277132987976074

Token 123: ' cnt' (ID: 27340)
  Prédit: 'cnt'
  Correct (stricte): False
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'cnt' (adapté à ' cnt') → logprob: -0.5275014042854309
    2. ' cnt' → logprob: -0.9025014042854309
    3. '           ' → logprob: -6.152501583099365
    4. '   ' → logprob: -6.652501583099365
    5. ' ' → logprob: -7.902501583099365
    6. '	cnt' → logprob: -8.527501106262207
    7. '       ' → logprob: -9.152501106262207
    8. '
' → logprob: -9.777501106262207
    9. '               ' → logprob: -10.027501106262207
    10. '  ' → logprob: -10.027501106262207

Token 124: '+=' (ID: 18287)
  Prédit: '+='
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '+=' → logprob: -0.03804849088191986
    2. ' +=' → logprob: -3.288048505783081
    3. '=' → logprob: -12.91304874420166
    4. ']+=' → logprob: -13.41304874420166
    5. '+' → logprob: -13.66304874420166
    6. '   ' → logprob: -14.53804874420166
    7. '+=(' → logprob: -15.03804874420166
    8. '  ' → logprob: -15.28804874420166
    9. ' ' → logprob: -15.53804874420166
    10. '+='' → logprob: -15.53804874420166

Token 125: '1' (ID: 16)
  Prédit: 'lst'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'lst' → logprob: -0.7077396512031555
    2. '1' → logprob: -0.8327396512031555
    3. 'd' → logprob: -2.9577395915985107
    4. ' lst' → logprob: -4.20773983001709
    5. 'len' → logprob: -5.45773983001709
    6. ' ' → logprob: -7.08273983001709
    7. ' d' → logprob: -8.83273983001709
    8. 'l' → logprob: -9.45773983001709
    9. 'pow' → logprob: -10.58273983001709
    10. '(lst' → logprob: -10.70773983001709

Token 126: '
' (ID: 198)
  Prédit: '       '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '       ' → logprob: -0.1878693699836731
    2. '   ' → logprob: -2.4378693103790283
    3. ' k' → logprob: -2.6878693103790283
    4. '  ' → logprob: -5.937869548797607
    5. ' ' → logprob: -6.062869548797607
    6. '<|end|>' → logprob: -6.187869548797607
    7. '```' → logprob: -6.312869548797607
    8. 'k' → logprob: -6.937869548797607
    9. ',k' → logprob: -6.937869548797607
    10. ',' → logprob: -6.937869548797607

Token 127: '       ' (ID: 309)
  Prédit: ' k'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' k' → logprob: -0.05959314852952957
    2. '   ' → logprob: -3.6845932006835938
    3. 'k' → logprob: -3.8095932006835938
    4. ',k' → logprob: -5.934593200683594
    5. ' 
' → logprob: -6.184593200683594
    6. '```' → logprob: -6.559593200683594
    7. '	k' → logprob: -7.059593200683594
    8. ',' → logprob: -7.184593200683594
    9. '<|end|>' → logprob: -7.434593200683594
    10. ' ' → logprob: -7.434593200683594

Token 128: ' k' (ID: 372)
  Prédit: ' k'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' k' → logprob: -0.0552511028945446
    2. 'k' (adapté à ' k') → logprob: -2.930251121520996
    3. '   ' → logprob: -8.180251121520996
    4. '	k' → logprob: -10.180251121520996
    5. '```' → logprob: -11.305251121520996
    6. '       ' → logprob: -11.305251121520996
    7. ' ' → logprob: -11.555251121520996
    8. ',k' → logprob: -12.555251121520996
    9. '  ' → logprob: -12.805251121520996
    10. '``' → logprob: -12.930251121520996

Token 129: '>>' (ID: 3920)
  Prédit: '>>'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '>>' → logprob: -0.024192648008465767
    2. '=' → logprob: -4.024192810058594
    3. ' >>=' → logprob: -5.149192810058594
    4. '//=' → logprob: -8.524192810058594
    5. ' =' → logprob: -11.274192810058594
    6. '>>>' → logprob: -12.649192810058594
    7. '=k' → logprob: -13.399192810058594
    8. '>>
' → logprob: -13.524192810058594
    9. '/=' → logprob: -14.274192810058594
    10. ' >>' → logprob: -14.524192810058594

Token 130: '=' (ID: 28)
  Prédit: '='
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '=' → logprob: -6.153795766294934e-06
    2. '>=' → logprob: -12.250005722045898
    3. '1' → logprob: -13.750005722045898
    4. '>' → logprob: -16.6250057220459
    5. '=
' → logprob: -16.7500057220459
    6. '=_' → logprob: -17.6250057220459
    7. '==' → logprob: -17.6250057220459
    8. ' =' → logprob: -18.3750057220459
    9. '=

' → logprob: -18.8750057220459
    10. '='' → logprob: -19.5000057220459

Token 131: '1' (ID: 16)
  Prédit: '1'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '1' → logprob: -1.1517960956552997e-05
    2. ' ' → logprob: -11.375011444091797
    3. '```' → logprob: -17.875011444091797
    4. '
' → logprob: -18.125011444091797
    5. '   ' → logprob: -19.062511444091797
    6. '0' → logprob: -19.500011444091797
    7. '<|end|>' → logprob: -20.187511444091797
    8. '`' → logprob: -20.187511444091797
    9. '１' → logprob: -20.375011444091797
    10. '  ' → logprob: -20.437511444091797

Token 132: '
' (ID: 198)
  Prédit: ''
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False

Token 133: '   ' (ID: 271)
  Prédit: ''
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False

Token 134: ' consistent' (ID: 20434)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.3985176384449005
    2. ' valid' → logprob: -2.273517608642578
    3. ' for' → logprob: -2.648517608642578
    4. 'valid' → logprob: -3.148517608642578
    5. ' ok' → logprob: -4.023517608642578
    6. ' is' → logprob: -4.648517608642578
    7. ' possible' → logprob: -4.898517608642578
    8. ' flag' → logprob: -5.023517608642578
    9. ' mask' → logprob: -5.023517608642578
    10. 'for' → logprob: -5.148517608642578

Token 135: '=None' (ID: 12783)
  Prédit: '='
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '=' → logprob: -0.06974667310714722
    2. ' =' → logprob: -2.944746732711792
    3. '=True' → logprob: -4.444746494293213
    4. '=False' → logprob: -5.819746494293213
    5. '=[]' → logprob: -11.694746971130371
    6. '_=' → logprob: -12.194746971130371
    7. '=len' → logprob: -12.444746971130371
    8. '=int' → logprob: -12.569746971130371
    9. '=true' → logprob: -13.069746971130371
    10. '=_' → logprob: -13.069746971130371

Token 136: '
' (ID: 198)
  Prédit: ''
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False

Token 137: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.264809250831604
    2. '<|end|>' → logprob: -1.514809250831604
    3. '
' → logprob: -5.7648091316223145
    4. ' for' → logprob: -5.8898091316223145
    5. '    
' → logprob: -6.2648091316223145
    6. ',' → logprob: -7.3898091316223145
    7. ')' → logprob: -7.3898091316223145
    8. '=True' → logprob: -7.5148091316223145
    9. '  ' → logprob: -7.5148091316223145
    10. '    ' → logprob: -7.6398091316223145

Token 138: ' for' (ID: 395)
  Prédit: ' for'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' for' → logprob: -0.17144416272640228
    2. 'for' (adapté à ' for') → logprob: -2.1714441776275635
    3. ' True' → logprob: -3.9214441776275635
    4. '   ' → logprob: -4.671443939208984
    5. 'True' → logprob: -5.171443939208984
    6. ' consistent' → logprob: -5.171443939208984
    7. 'consistent' → logprob: -6.671443939208984
    8. ' is' → logprob: -7.921443939208984
    9. ' valid' → logprob: -8.171443939208984
    10. 'valid' → logprob: -9.296443939208984

Token 139: ' pos' (ID: 1253)
  Prédit: ' i'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' i' → logprob: -0.23586061596870422
    2. 'i' → logprob: -2.235860586166382
    3. ' idx' → logprob: -3.360860586166382
    4. ' j' → logprob: -3.860860586166382
    5. ' mask' → logprob: -4.985860824584961
    6. ' bit' → logprob: -5.360860824584961
    7. 'j' → logprob: -5.485860824584961
    8. 'idx' → logprob: -5.610860824584961
    9. ' x' → logprob: -5.735860824584961
    10. ' b' → logprob: -6.235860824584961

Token 140: ' in' (ID: 306)
  Prédit: ' in'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' in' → logprob: -0.06212060898542404
    2. 'in' → logprob: -2.8121206760406494
    3. ' ' → logprob: -9.06212043762207
    4. 's' → logprob: -11.68712043762207
    5. 'range' → logprob: -12.43712043762207
    6. ',' → logprob: -12.56212043762207
    7. '_in' → logprob: -12.68712043762207
    8. '   ' → logprob: -12.68712043762207
    9. '  ' → logprob: -13.06212043762207
    10. '0' → logprob: -13.18712043762207

Token 141: ' range' (ID: 3352)
  Prédit: 'range'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'range' → logprob: -0.0052492949180305
    2. ' range' → logprob: -5.255249500274658
    3. 'lst' → logprob: -11.7552490234375
    4. 'bits' → logprob: -12.6302490234375
    5. '(range' → logprob: -13.6302490234375
    6. 'd' → logprob: -14.5052490234375
    7. 'list' → logprob: -14.6302490234375
    8. ' ' → logprob: -14.8802490234375
    9. '(' → logprob: -15.6302490234375
    10. '[' → logprob: -15.6302490234375

Token 142: '(N' (ID: 10564)
  Prédit: '(N'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(N' → logprob: -0.02173614129424095
    2. '(len' → logprob: -3.8967361450195312
    3. '(' → logprob: -7.521736145019531
    4. '(max' → logprob: -8.021736145019531
    5. '(pow' → logprob: -8.771736145019531
    6. 'N' → logprob: -9.146736145019531
    7. '(n' → logprob: -10.896736145019531
    8. '(d' → logprob: -11.771736145019531
    9. '(cnt' → logprob: -11.896736145019531
    10. 'len' → logprob: -12.521736145019531

Token 143: '):
' (ID: 1883)
  Prédit: '):
'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '):
' → logprob: -0.25349903106689453
    2. '):' → logprob: -1.5034990310668945
    3. ':' → logprob: -6.6284990310668945
    4. ':
' → logprob: -8.628499031066895
    5. '   ' → logprob: -10.503499031066895
    6. '+' → logprob: -11.253499031066895
    7. ' ):
' → logprob: -12.128499031066895
    8. '):

' → logprob: -12.628499031066895
    9. '):
' → logprob: -12.628499031066895
    10. ',' → logprob: -12.753499031066895

Token 144: '       ' (ID: 309)
  Prédit: ' if'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' if' → logprob: -0.23787109553813934
    2. '   ' → logprob: -2.2378711700439453
    3. '<|end|>' → logprob: -2.7378711700439453
    4. ' ' → logprob: -3.6128711700439453
    5. '       ' → logprob: -5.362871170043945
    6. '    ' → logprob: -5.487871170043945
    7. ' for' → logprob: -6.737871170043945
    8. '  ' → logprob: -7.112871170043945
    9. '	if' → logprob: -7.612871170043945
    10. ',' → logprob: -7.737871170043945

Token 145: ' if' (ID: 538)
  Prédit: 'if'
  Correct (stricte): False
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'if' (adapté à ' if') → logprob: -0.10049520432949066
    2. ' if' → logprob: -2.3504951000213623
    3. '   ' → logprob: -8.725495338439941
    4. 'for' → logprob: -9.475495338439941
    5. ' for' → logprob: -10.725495338439941
    6. ' ' → logprob: -11.475495338439941
    7. '       ' → logprob: -11.600495338439941
    8. '```' → logprob: -12.600495338439941
    9. '	if' → logprob: -14.350495338439941
    10. '
' → logprob: -14.350495338439941

Token 146: ' bits' (ID: 18189)
  Prédit: ' bits'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' bits' → logprob: -0.7209475040435791
    2. 'bits' → logprob: -0.7209475040435791
    3. '(bits' → logprob: -4.220947265625
    4. ' not' → logprob: -4.720947265625
    5. 'not' → logprob: -6.470947265625
    6. ' (' → logprob: -6.845947265625
    7. '((' → logprob: -8.345947265625
    8. '(not' → logprob: -8.345947265625
    9. ' ((' → logprob: -8.845947265625
    10. '(' → logprob: -9.345947265625

Token 147: '[pos' (ID: 48272)
  Prédit: '[pos'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '[pos' → logprob: -2.816093228830141e-06
    2. ' [' → logprob: -13.62500286102295
    3. '[' → logprob: -13.87500286102295
    4. '```' → logprob: -14.87500286102295
    5. '\[' → logprob: -15.75000286102295
    6. '[
' → logprob: -17.000001907348633
    7. 'pos' → logprob: -17.250001907348633
    8. '[position' → logprob: -18.500001907348633
    9. '
' → logprob: -18.625001907348633
    10. ')[' → logprob: -19.000001907348633

Token 148: ']==' (ID: 34128)
  Prédit: ']=='
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ']==' → logprob: -0.18885837495326996
    2. '==' → logprob: -1.8138583898544312
    3. ']:' → logprob: -5.313858509063721
    4. ':' → logprob: -6.313858509063721
    5. ']' → logprob: -6.688858509063721
    6. ' ==' → logprob: -7.563858509063721
    7. ']:
' → logprob: -8.063858032226562
    8. '']==' → logprob: -9.563858032226562
    9. ')==' → logprob: -9.688858032226562
    10. ':
' → logprob: -10.313858032226562

Token 149: '0' (ID: 15)
  Prédit: '1'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '1' → logprob: -0.06213674321770668
    2. '0' → logprob: -2.812136650085449
    3. ' ' → logprob: -8.68713665008545
    4. '   ' → logprob: -15.18713665008545
    5. 'True' → logprob: -17.249637603759766
    6. '```' → logprob: -17.312137603759766
    7. 'False' → logprob: -17.687137603759766
    8. '=' → logprob: -18.874637603759766
    9. '  ' → logprob: -18.874637603759766
    10. '(' → logprob: -18.937137603759766

Token 150: ':
' (ID: 734)
  Prédit: ':'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ':' → logprob: -0.3498782813549042
    2. ':
' → logprob: -1.2248783111572266
    3. '       ' → logprob: -7.224878311157227
    4. ' and' → logprob: -7.849878311157227
    5. ':return' → logprob: -9.474878311157227
    6. '<|end|>' → logprob: -9.724878311157227
    7. ' :
' → logprob: -9.849878311157227
    8. '           ' → logprob: -10.599878311157227
    9. '   ' → logprob: -10.724878311157227
    10. ' or' → logprob: -11.099878311157227

Token 151: '           ' (ID: 352)
  Prédit: ':'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ':' → logprob: -0.4150862395763397
    2. ' continue' → logprob: -1.790086269378662
    3. '           ' → logprob: -2.415086269378662
    4. '       ' → logprob: -3.165086269378662
    5. ':
' → logprob: -3.415086269378662
    6. ' continues' → logprob: -6.415086269378662
    7. '   ' → logprob: -6.415086269378662
    8. ' ' → logprob: -6.665086269378662
    9. ',' → logprob: -7.040086269378662
    10. 'continue' → logprob: -7.415086269378662

Token 152: ' continue' (ID: 4901)
  Prédit: ' continue'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' continue' → logprob: -0.1102503091096878
    2. 'continue' (adapté à ' continue') → logprob: -2.735250234603882
    3. ' for' → logprob: -3.860250234603882
    4. '           ' → logprob: -4.735250473022461
    5. ' consistent' → logprob: -5.485250473022461
    6. ' break' → logprob: -6.110250473022461
    7. '       ' → logprob: -6.860250473022461
    8. 'for' → logprob: -7.235250473022461
    9. '   ' → logprob: -7.360250473022461
    10. ' ' → logprob: -8.235250473022461

Token 153: '
' (ID: 198)
  Prédit: '
'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '
' → logprob: -0.4515591561794281
    2. '   ' → logprob: -1.5765591859817505
    3. '  
' → logprob: -2.951559066772461
    4. '<|end|>' → logprob: -3.076559066772461
    5. '    
' → logprob: -3.951559066772461
    6. ' 
' → logprob: -4.076559066772461
    7. '    ' → logprob: -5.201559066772461
    8. '       ' → logprob: -5.576559066772461
    9. '   
' → logprob: -5.701559066772461
    10. ' for' → logprob: -5.951559066772461

Token 154: '       ' (ID: 309)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.08672775328159332
    2. '       ' → logprob: -3.3367278575897217
    3. ' for' → logprob: -3.7117278575897217
    4. '
' → logprob: -4.086727619171143
    5. '<|end|>' → logprob: -5.961727619171143
    6. '  
' → logprob: -7.461727619171143
    7. '    
' → logprob: -7.461727619171143
    8. '    ' → logprob: -7.586727619171143
    9. '        
' → logprob: -7.836727619171143
    10. '  ' → logprob: -7.836727619171143

Token 155: ' for' (ID: 395)
  Prédit: 'for'
  Correct (stricte): False
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'for' (adapté à ' for') → logprob: -0.07815174013376236
    2. ' for' → logprob: -2.9531517028808594
    3. '   ' → logprob: -3.9531517028808594
    4. 'flag' → logprob: -5.828151702880859
    5. '       ' → logprob: -8.32815170288086
    6. 'checked' → logprob: -9.32815170288086
    7. 'fl' → logprob: -9.70315170288086
    8. ' flag' → logprob: -9.82815170288086
    9. 'check' → logprob: -9.95315170288086
    10. 'valid' → logprob: -10.07815170288086

Token 156: ' check' (ID: 2371)
  Prédit: 'p'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'p' → logprob: -0.8621434569358826
    2. 'x' → logprob: -1.7371435165405273
    3. '(p' → logprob: -2.8621435165405273
    4. '(x' → logprob: -2.8621435165405273
    5. 'a' → logprob: -3.3621435165405273
    6. '(' → logprob: -3.7371435165405273
    7. 'q' → logprob: -4.112143516540527
    8. 'to' → logprob: -4.112143516540527
    9. 'nx' → logprob: -4.237143516540527
    10. 'pair' → logprob: -4.612143516540527

Token 157: ' in' (ID: 306)
  Prédit: '_pos'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_pos' → logprob: -0.3613596558570862
    2. 'pos' → logprob: -1.3613595962524414
    3. ' in' → logprob: -3.1113595962524414
    4. 'in' → logprob: -6.486359596252441
    5. '_idx' → logprob: -8.486359596252441
    6. 'Pos' → logprob: -8.611359596252441
    7. 'p' → logprob: -9.111359596252441
    8. '_in' → logprob: -10.111359596252441
    9. 'lst' → logprob: -10.486359596252441
    10. 'idx' → logprob: -10.611359596252441

Token 158: ' lst' (ID: 33384)
  Prédit: 'lst'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'lst' → logprob: -0.0008292826823890209
    2. 'range' → logprob: -7.750829219818115
    3. ' lst' → logprob: -7.875829219818115
    4. ' range' → logprob: -11.375829696655273
    5. 'list' → logprob: -13.125829696655273
    6. '[' → logprob: -13.625829696655273
    7. 'pos' → logprob: -13.875829696655273
    8. ' ' → logprob: -14.000829696655273
    9. 'ls' → logprob: -14.500829696655273
    10. '   ' → logprob: -15.000829696655273

Token 159: '[pos' (ID: 48272)
  Prédit: '[pos'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '[pos' → logprob: -6.704273118884885e-07
    2. '[' → logprob: -14.875000953674316
    3. '(pos' → logprob: -15.875000953674316
    4. 'pos' → logprob: -16.875
    5. '[position' → logprob: -17.0
    6. ' [' → logprob: -17.75
    7. ',pos' → logprob: -18.75
    8. '][' → logprob: -19.5
    9. '```' → logprob: -19.5
    10. '[idx' → logprob: -19.75

Token 160: ']:
' (ID: 22152)
  Prédit: '[pos'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '[pos' → logprob: -0.6074005365371704
    2. ']:' → logprob: -0.9824005365371704
    3. '][' → logprob: -2.732400417327881
    4. ']:
' → logprob: -4.857400417327881
    5. '[' → logprob: -5.232400417327881
    6. ']' → logprob: -6.732400417327881
    7. 'pos' → logprob: -8.232400894165039
    8. ':' → logprob: -8.607400894165039
    9. ']:

' → logprob: -8.732400894165039
    10. ' ]' → logprob: -8.982400894165039

Token 161: '           ' (ID: 352)
  Prédit: '           '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '           ' → logprob: -0.03814327344298363
    2. '<|end|>' → logprob: -3.4131431579589844
    3. ',' → logprob: -6.663143157958984
    4. ' ' → logprob: -7.163143157958984
    5. ' if' → logprob: -7.413143157958984
    6. '```' → logprob: -7.913143157958984
    7. '
' → logprob: -8.288143157958984
    8. '            
' → logprob: -8.288143157958984
    9. '<|end|>' → logprob: -8.413143157958984
    10. '0' → logprob: -8.663143157958984

Token 162: ' xx' (ID: 44242)
  Prédit: 'if'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'if' → logprob: -0.027726227417588234
    2. '           ' → logprob: -5.152726173400879
    3. ' if' → logprob: -5.402726173400879
    4. 'x' → logprob: -5.527726173400879
    5. 'c' → logprob: -5.652726173400879
    6. 'b' → logprob: -5.777726173400879
    7. 'other' → logprob: -6.027726173400879
    8. 'q' → logprob: -7.027726173400879
    9. 'a' → logprob: -7.152726173400879
    10. 'y' → logprob: -7.527726173400879

Token 163: ',' (ID: 11)
  Prédit: 'pos'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'pos' → logprob: -1.1281859874725342
    2. '_pos' → logprob: -1.1281859874725342
    3. '=' → logprob: -1.3781859874725342
    4. ' =' → logprob: -2.753185987472534
    5. '_idx' → logprob: -4.878186225891113
    6. '=(' → logprob: -4.878186225891113
    7. 'if' → logprob: -5.628186225891113
    8. '_bits' → logprob: -5.753186225891113
    9. 'x' → logprob: -6.128186225891113
    10. ',' → logprob: -6.628186225891113

Token 164: 'yy' (ID: 7496)
  Prédit: 'yy'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'yy' → logprob: -0.009615601040422916
    2. 'val' → logprob: -5.384615421295166
    3. 'bit' → logprob: -6.634615421295166
    4. ' yy' → logprob: -6.634615421295166
    5. 'bits' → logprob: -8.009615898132324
    6. 'bb' → logprob: -8.384615898132324
    7. 'value' → logprob: -8.634615898132324
    8. 'flag' → logprob: -8.759615898132324
    9. 'xx' → logprob: -9.009615898132324
    10. 'state' → logprob: -9.134615898132324

Token 165: '=' (ID: 28)
  Prédit: '='
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '=' → logprob: -0.021313436329364777
    2. ' =' → logprob: -4.396313667297363
    3. '=d' → logprob: -5.021313667297363
    4. '=b' → logprob: -6.146313667297363
    5. '=(' → logprob: -11.521313667297363
    6. '=_' → logprob: -12.271313667297363
    7. '=D' → logprob: -12.896313667297363
    8. '=int' → logprob: -13.646313667297363
    9. '=l' → logprob: -13.771313667297363
    10. '=data' → logprob: -13.771313667297363

Token 166: 'check' (ID: 3416)
  Prédit: 'bits'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'bits' → logprob: -0.017287636175751686
    2. ' bits' → logprob: -4.392287731170654
    3. 'check' → logprob: -6.142287731170654
    4. '(' → logprob: -7.392287731170654
    5. 'pos' → logprob: -7.767287731170654
    6. '(bits' → logprob: -7.767287731170654
    7. '0' → logprob: -8.267287254333496
    8. 'xx' → logprob: -9.142287254333496
    9. ' ' → logprob: -9.267287254333496
    10. 'bit' → logprob: -9.392287254333496

Token 167: '
' (ID: 198)
  Prédit: '
'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '
' → logprob: -0.7518846988677979
    2. '=' → logprob: -1.0018846988677979
    3. ' =' → logprob: -2.251884698867798
    4. '[' → logprob: -3.501884698867798
    5. '           ' → logprob: -4.751884460449219
    6. '=
' → logprob: -5.251884460449219
    7. '       ' → logprob: -5.626884460449219
    8. '=[]
' → logprob: -7.126884460449219
    9. '=True' → logprob: -7.251884460449219
    10. '            
' → logprob: -7.376884460449219

Token 168: '           ' (ID: 352)
  Prédit: '           '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '           ' → logprob: -0.006226560100913048
    2. '<|end|>' → logprob: -5.756226539611816
    3. ' if' → logprob: -6.006226539611816
    4. '       ' → logprob: -8.631226539611816
    5. '```' → logprob: -9.006226539611816
    6. 'if' → logprob: -9.506226539611816
    7. '   ' → logprob: -9.756226539611816
    8. '          ' → logprob: -10.131226539611816
    9. '<|end|>' → logprob: -10.256226539611816
    10. ',' → logprob: -11.131226539611816

Token 169: ' if' (ID: 538)
  Prédit: 'if'
  Correct (stricte): False
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'if' (adapté à ' if') → logprob: -0.0010374527191743255
    2. '           ' → logprob: -7.12603759765625
    3. ' if' → logprob: -8.37603759765625
    4. '```' → logprob: -13.00103759765625
    5. '       ' → logprob: -15.37603759765625
    6. '   ' → logprob: -15.87603759765625
    7. 'If' → logprob: -17.50103759765625
    8. '          ' → logprob: -17.50103759765625
    9. '``' → logprob: -17.87603759765625
    10. ' ' → logprob: -17.87603759765625

Token 170: ' bits' (ID: 18189)
  Prédit: 'bits'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'bits' → logprob: -0.12949422001838684
    2. ' bits' → logprob: -2.1294941902160645
    3. '(bits' → logprob: -6.7544941902160645
    4. '(' → logprob: -7.8794941902160645
    5. '(xx' → logprob: -8.504494667053223
    6. ' (' → logprob: -8.629494667053223
    7. 'yy' → logprob: -8.879494667053223
    8. 'xx' → logprob: -8.879494667053223
    9. '(y' → logprob: -9.629494667053223
    10. ' xx' → logprob: -9.754494667053223

Token 171: '[' (ID: 58)
  Prédit: '['
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '[' → logprob: -1.8670179997570813e-05
    2. '[pos' → logprob: -11.500019073486328
    3. ' [' → logprob: -12.250019073486328
    4. 'xx' → logprob: -13.750019073486328
    5. '```' → logprob: -13.875019073486328
    6. '[
' → logprob: -14.875019073486328
    7. '[y' → logprob: -15.000019073486328
    8. '(xx' → logprob: -15.875019073486328
    9. '\[' → logprob: -16.000019073486328
    10. '[[' → logprob: -16.500019073486328

Token 172: 'xx' (ID: 7605)
  Prédit: 'xx'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'xx' → logprob: -0.0003479785518720746
    2. 'yy' → logprob: -8.000348091125488
    3. ' xx' → logprob: -11.750348091125488
    4. '[' → logprob: -12.375348091125488
    5. '(xx' → logprob: -14.750348091125488
    6. 'xy' → logprob: -18.125347137451172
    7. '
' → logprob: -18.125347137451172
    8. ' ' → logprob: -18.500347137451172
    9. '```' → logprob: -18.500347137451172
    10. ' yy' → logprob: -18.875347137451172

Token 173: ']!=' (ID: 85780)
  Prédit: '=='
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '==' → logprob: -0.04966794699430466
    2. ']==' → logprob: -3.7996678352355957
    3. '!=' → logprob: -4.174667835235596
    4. ' ==' → logprob: -4.674667835235596
    5. ')==' → logprob: -7.299667835235596
    6. ' !=' → logprob: -7.924667835235596
    7. ']!=' → logprob: -8.799668312072754
    8. '()==' → logprob: -9.674668312072754
    9. '[' → logprob: -10.299668312072754
    10. '']==' → logprob: -10.924668312072754

Token 174: 'yy' (ID: 7496)
  Prédit: 'yy'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'yy' → logprob: -5.550411151489243e-05
    2. ' yy' → logprob: -10.125055313110352
    3. '1' → logprob: -11.750055313110352
    4. '	yy' → logprob: -12.125055313110352
    5. '(' → logprob: -14.125055313110352
    6. 'yyy' → logprob: -15.250055313110352
    7. '0' → logprob: -15.500055313110352
    8. '   ' → logprob: -15.500055313110352
    9. ' ' → logprob: -15.625055313110352
    10. 'yyyy' → logprob: -16.37505531311035

Token 175: ':
' (ID: 734)
  Prédit: ':'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ':' → logprob: -0.14587876200675964
    2. ':
' → logprob: -2.020878791809082
    3. '           ' → logprob: -6.020878791809082
    4. '               ' → logprob: -7.770878791809082
    5. ':return' → logprob: -8.645878791809082
    6. '       ' → logprob: -10.020878791809082
    7. '          ' → logprob: -10.270878791809082
    8. ':
' → logprob: -10.770878791809082
    9. '=' → logprob: -11.270878791809082
    10. ':

' → logprob: -11.645878791809082

Token 176: '               ' (ID: 506)
  Prédit: '               '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '               ' → logprob: -0.542252242565155
    2. '           ' → logprob: -1.6672523021697998
    3. ' break' → logprob: -2.1672523021698
    4. 'break' → logprob: -2.2922523021698
    5. '0' → logprob: -4.792252063751221
    6. ' consistent' → logprob: -6.542252063751221
    7. ' ' → logprob: -6.542252063751221
    8. '```' → logprob: -7.667252063751221
    9. '            ' → logprob: -7.792252063751221
    10. '             ' → logprob: -8.042252540588379

Token 177: ' consistent' (ID: 20434)
  Prédit: 'break'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'break' → logprob: -1.1406333446502686
    2. ' break' → logprob: -1.2656333446502686
    3. 'consistent' (adapté à ' consistent') → logprob: -1.5156333446502686
    4. ' consistent' → logprob: -2.2656333446502686
    5. '                   ' → logprob: -2.8906333446502686
    6. '               ' → logprob: -4.765633583068848
    7. '   ' → logprob: -5.390633583068848
    8. '           ' → logprob: -5.640633583068848
    9. ' ' → logprob: -6.765633583068848
    10. ' inconsistent' → logprob: -7.765633583068848

Token 178: '=False' (ID: 12148)
  Prédit: '='
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '=' → logprob: -0.10904354602098465
    2. ' =' → logprob: -2.609043598175049
    3. '=False' → logprob: -3.609043598175049
    4. '=True' → logprob: -5.984043598175049
    5. '=None' → logprob: -9.23404312133789
    6. '=false' → logprob: -12.60904312133789
    7. '=int' → logprob: -13.98404312133789
    8. '＝' → logprob: -14.10904312133789
    9. '==' → logprob: -14.73404312133789
    10. '=is' → logprob: -14.73404312133789

Token 179: '
' (ID: 198)
  Prédit: '               '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '               ' → logprob: -0.0007196996593847871
    2. '                ' → logprob: -8.375720024108887
    3. '<|end|>' → logprob: -8.500720024108887
    4. '                   ' → logprob: -9.250720024108887
    5. '              ' → logprob: -9.500720024108887
    6. '           ' → logprob: -10.125720024108887
    7. '                
' → logprob: -10.500720024108887
    8. 'break' → logprob: -11.875720024108887
    9. '
' → logprob: -12.000720024108887
    10. ')' → logprob: -12.125720024108887

Token 180: '               ' (ID: 506)
  Prédit: '               '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '               ' → logprob: -0.0001254693343071267
    2. '<|end|>' → logprob: -10.000125885009766
    3. '              ' → logprob: -10.250125885009766
    4. '                ' → logprob: -11.125125885009766
    5. '           ' → logprob: -11.500125885009766
    6. 'break' → logprob: -12.500125885009766
    7. '                   ' → logprob: -12.625125885009766
    8. '                
' → logprob: -12.750125885009766
    9. ' break' → logprob: -13.125125885009766
    10. '```' → logprob: -13.750125885009766

Token 181: ' break' (ID: 2338)
  Prédit: 'break'
  Correct (stricte): False
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'break' (adapté à ' break') → logprob: -0.01339785847812891
    2. '               ' → logprob: -5.013397693634033
    3. ' break' → logprob: -5.013397693634033
    4. '              ' → logprob: -12.138398170471191
    5. '	break' → logprob: -13.013398170471191
    6. '                ' → logprob: -13.263398170471191
    7. '                   ' → logprob: -13.513398170471191
    8. '           ' → logprob: -15.013398170471191
    9. ' ' → logprob: -15.388398170471191
    10. '_break' → logprob: -15.638398170471191

Token 182: '
' (ID: 198)
  Prédit: '       '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '       ' → logprob: -0.6331444382667542
    2. '           ' → logprob: -2.2581443786621094
    3. '  
' → logprob: -2.5081443786621094
    4. '<|end|>' → logprob: -2.5081443786621094
    5. '               ' → logprob: -3.0081443786621094
    6. '
' → logprob: -3.0081443786621094
    7. '   
' → logprob: -3.8831443786621094
    8. ' 
' → logprob: -4.258144378662109
    9. '  ' → logprob: -4.258144378662109
    10. '    
' → logprob: -4.883144378662109

Token 183: '       ' (ID: 309)
  Prédit: '       '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '       ' → logprob: -0.5919187068939209
    2. '               ' → logprob: -1.466918706893921
    3. '           ' → logprob: -2.091918706893921
    4. '              ' → logprob: -4.2169189453125
    5. '   ' → logprob: -4.3419189453125
    6. ' ' → logprob: -4.5919189453125
    7. '  
' → logprob: -4.7169189453125
    8. ' else' → logprob: -4.7169189453125
    9. '<|end|>' → logprob: -4.7169189453125
    10. '  ' → logprob: -5.2169189453125

Token 184: ' if' (ID: 538)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.56978839635849
    2. '       ' → logprob: -1.4447884559631348
    3. ' if' → logprob: -2.3197884559631348
    4. 'if' (adapté à ' if') → logprob: -3.0697884559631348
    5. ' ' → logprob: -3.9447884559631348
    6. ' else' → logprob: -4.194788455963135
    7. 'else' → logprob: -4.319788455963135
    8. '  ' → logprob: -6.069788455963135
    9. '
' → logprob: -6.069788455963135
    10. '    ' → logprob: -7.694788455963135

Token 185: ' consistent' (ID: 20434)
  Prédit: 'consistent'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'consistent' → logprob: -0.5425798296928406
    2. ' consistent' → logprob: -1.0425798892974854
    3. ' not' → logprob: -2.9175798892974854
    4. 'not' → logprob: -4.417579650878906
    5. ' ' → logprob: -10.542579650878906
    6. 'cons' → logprob: -10.667579650878906
    7. 'bits' → logprob: -11.292579650878906
    8. ' bits' → logprob: -11.292579650878906
    9. '  ' → logprob: -13.167579650878906
    10. '   ' → logprob: -13.792579650878906

Token 186: '==' (ID: 560)
  Prédit: '=='
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '==' → logprob: -0.08242321014404297
    2. ' is' → logprob: -2.582423210144043
    3. 'is' → logprob: -6.332423210144043
    4. ' ==' → logprob: -7.082423210144043
    5. '=' → logprob: -7.457423210144043
    6. '=False' → logprob: -8.332423210144043
    7. '===' → logprob: -10.207423210144043
    8. '=is' → logprob: -10.957423210144043
    9. '=True' → logprob: -11.207423210144043
    10. '==-' → logprob: -11.457423210144043

Token 187: 'False' (ID: 8168)
  Prédit: 'False'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'False' → logprob: -9.627176768844947e-05
    2. ' False' → logprob: -9.250096321105957
    3. '=False' → logprob: -16.25009536743164
    4. '0' → logprob: -18.75009536743164
    5. 'None' → logprob: -19.12509536743164
    6. 'True' → logprob: -19.62509536743164
    7. '(False' → logprob: -20.00009536743164
    8. '.False' → logprob: -22.50009536743164
    9. 'FALSE' → logprob: -22.62509536743164
    10. 'F' → logprob: -23.00009536743164

Token 188: ':
' (ID: 734)
  Prédit: '           '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '           ' → logprob: -0.021694032475352287
    2. ':
' → logprob: -4.396694183349609
    3. ':' → logprob: -4.896694183349609
    4. '               ' → logprob: -6.521694183349609
    5. '          ' → logprob: -9.52169418334961
    6. ' break' → logprob: -10.89669418334961
    7. '                   ' → logprob: -11.02169418334961
    8. '       ' → logprob: -11.14669418334961
    9. '         ' → logprob: -11.27169418334961
    10. 'break' → logprob: -11.52169418334961

Token 189: '           ' (ID: 352)
  Prédit: '           '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '           ' → logprob: -0.005078637041151524
    2. ' break' → logprob: -5.6300787925720215
    3. 'break' → logprob: -7.1300787925720215
    4. '               ' → logprob: -7.5050787925720215
    5. '          ' → logprob: -10.380078315734863
    6. ' ' → logprob: -10.630078315734863
    7. '                   ' → logprob: -11.255078315734863
    8. '         ' → logprob: -11.380078315734863
    9. '            ' → logprob: -11.380078315734863
    10. '  ' → logprob: -11.880078315734863

Token 190: ' break' (ID: 2338)
  Prédit: 'break'
  Correct (stricte): False
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'break' (adapté à ' break') → logprob: -0.10388773679733276
    2. ' break' → logprob: -2.8538877964019775
    3. '           ' → logprob: -3.2288877964019775
    4. '       ' → logprob: -6.728887557983398
    5. '   ' → logprob: -8.978887557983398
    6. '	break' → logprob: -9.853887557983398
    7. '               ' → logprob: -10.103887557983398
    8. ' ' → logprob: -10.603887557983398
    9. '  ' → logprob: -12.603887557983398
    10. '
' → logprob: -13.478887557983398

Token 191: '
' (ID: 198)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.09738671034574509
    2. ' else' → logprob: -3.347386598587036
    3. 'else' → logprob: -3.597386598587036
    4. ' if' → logprob: -3.597386598587036
    5. 'if' → logprob: -6.597386837005615
    6. ' ' → logprob: -7.597386837005615
    7. '  ' → logprob: -7.847386837005615
    8. '```' → logprob: -8.597386360168457
    9. '
' → logprob: -9.097386360168457
    10. ' consistent' → logprob: -9.972386360168457

Token 192: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.1343860775232315
    2. ' if' → logprob: -2.6343860626220703
    3. ' else' → logprob: -3.7593860626220703
    4. 'else' → logprob: -4.00938606262207
    5. 'if' → logprob: -5.38438606262207
    6. '  
' → logprob: -6.13438606262207
    7. '
' → logprob: -6.13438606262207
    8. ' ' → logprob: -6.63438606262207
    9. '  ' → logprob: -7.13438606262207
    10. '    
' → logprob: -7.50938606262207

Token 193: ' else' (ID: 1203)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.807935893535614
    2. 'if' → logprob: -0.932935893535614
    3. ' if' → logprob: -1.9329359531402588
    4. 'else' (adapté à ' else') → logprob: -4.18293571472168
    5. ' else' → logprob: -7.55793571472168
    6. ' ' → logprob: -8.30793571472168
    7. '  ' → logprob: -10.43293571472168
    8. '```' → logprob: -10.68293571472168
    9. '
' → logprob: -11.93293571472168
    10. '+' → logprob: -12.68293571472168

Token 194: ':
' (ID: 734)
  Prédit: ':'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ':' → logprob: -0.00869304221123457
    2. ':
' → logprob: -4.758693218231201
    3. '   ' → logprob: -9.883692741394043
    4. '       ' → logprob: -11.008692741394043
    5. ' :' → logprob: -11.758692741394043
    6. ' :
' → logprob: -14.133692741394043
    7. ':

' → logprob: -14.383692741394043
    8. '    ' → logprob: -14.758692741394043
    9. ',' → logprob: -15.008692741394043
    10. ' ' → logprob: -15.383692741394043

Token 195: '       ' (ID: 309)
  Prédit: '       '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '       ' → logprob: -0.014851173385977745
    2. '   ' → logprob: -5.139851093292236
    3. ' if' → logprob: -5.139851093292236
    4. 'if' → logprob: -6.764851093292236
    5. ' consistent' → logprob: -7.389851093292236
    6. '    ' → logprob: -7.514851093292236
    7. ' maximum' → logprob: -8.264851570129395
    8. '     ' → logprob: -8.389851570129395
    9. 'maximum' → logprob: -9.764851570129395
    10. ' ' → logprob: -9.889851570129395

Token 196: ' if' (ID: 538)
  Prédit: 'maximum'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'maximum' → logprob: -0.5909056067466736
    2. 'if' (adapté à ' if') → logprob: -1.0909056663513184
    3. ' if' → logprob: -2.7159056663513184
    4. ' maximum' → logprob: -3.9659056663513184
    5. '   ' → logprob: -4.090905666351318
    6. '       ' → logprob: -4.840905666351318
    7. '           ' → logprob: -8.46590518951416
    8. ' ' → logprob: -8.59090518951416
    9. 'consistent' → logprob: -9.46590518951416
    10. 'max' → logprob: -10.34090518951416

Token 197: ' maximum' (ID: 10562)
  Prédit: 'cnt'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'cnt' → logprob: -0.18856985867023468
    2. ' cnt' → logprob: -1.9385699033737183
    3. 'maximum' → logprob: -3.9385697841644287
    4. ' maximum' → logprob: -4.813570022583008
    5. 'max' → logprob: -8.563570022583008
    6. '   ' → logprob: -9.688570022583008
    7. '       ' → logprob: -10.688570022583008
    8. '(cnt' → logprob: -11.063570022583008
    9. 'count' → logprob: -11.438570022583008
    10. ' max' → logprob: -11.438570022583008

Token 198: '<' (ID: 27)
  Prédit: '<'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '<' → logprob: -0.009976353496313095
    2. ' <' → logprob: -4.634976387023926
    3. '<len' → logprob: -9.384976387023926
    4. '<count' → logprob: -9.759976387023926
    5. '=max' → logprob: -10.509976387023926
    6. '<int' → logprob: -11.634976387023926
    7. '<v' → logprob: -12.009976387023926
    8. '<num' → logprob: -12.134976387023926
    9. '=' → logprob: -12.134976387023926
    10. '<const' → logprob: -12.384976387023926

Token 199: 'cnt' (ID: 33160)
  Prédit: 'cnt'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'cnt' → logprob: -0.0004319804720580578
    2. ' cnt' → logprob: -7.750432014465332
    3. 'max' → logprob: -13.750432014465332
    4. '(cnt' → logprob: -16.500431060791016
    5. '	cnt' → logprob: -16.625431060791016
    6. '   ' → logprob: -17.125431060791016
    7. 'count' → logprob: -17.250431060791016
    8. '[cnt' → logprob: -18.375431060791016
    9. ' ' → logprob: -18.875431060791016
    10. 'cn' → logprob: -19.250431060791016

Token 200: ':
' (ID: 734)
  Prédit: '='
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '=' → logprob: -0.03067541867494583
    2. ':' → logprob: -4.280675411224365
    3. ':
' → logprob: -5.155675411224365
    4. '=max' → logprob: -5.155675411224365
    5. '           ' → logprob: -6.030675411224365
    6. 'maximum' → logprob: -6.405675411224365
    7. ' =' → logprob: -8.155675888061523
    8. ' maximum' → logprob: -8.405675888061523
    9. '=c' → logprob: -9.905675888061523
    10. '=count' → logprob: -10.155675888061523

Token 201: '           ' (ID: 352)
  Prédit: 'maximum'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'maximum' → logprob: -0.5131895542144775
    2. '           ' → logprob: -1.0131895542144775
    3. ' maximum' → logprob: -3.2631895542144775
    4. '=' → logprob: -10.513189315795898
    5. '       ' → logprob: -11.013189315795898
    6. '.maximum' → logprob: -11.263189315795898
    7. '```' → logprob: -11.513189315795898
    8. '               ' → logprob: -11.638189315795898
    9. 'max' → logprob: -12.638189315795898
    10. '   ' → logprob: -12.888189315795898

Token 202: ' maximum' (ID: 10562)
  Prédit: 'maximum'
  Correct (stricte): False
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'maximum' (adapté à ' maximum') → logprob: -0.00020854694594163448
    2. '           ' → logprob: -9.000208854675293
    3. ' maximum' → logprob: -9.375208854675293
    4. 'max' → logprob: -16.375207901000977
    5. '   ' → logprob: -17.000207901000977
    6. '               ' → logprob: -17.125207901000977
    7. '       ' → logprob: -17.750207901000977
    8. '```' → logprob: -18.125207901000977
    9. '.maximum' → logprob: -18.250207901000977
    10. '
' → logprob: -18.375207901000977

Token 203: '=' (ID: 28)
  Prédit: '='
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '=' → logprob: -0.00011796683247666806
    2. '=max' → logprob: -9.250118255615234
    3. ' =' → logprob: -10.750118255615234
    4. '=c' → logprob: -15.500118255615234
    5. '=count' → logprob: -16.875118255615234
    6. '=

' → logprob: -17.250118255615234
    7. '=len' → logprob: -17.500118255615234
    8. '=cut' → logprob: -18.000118255615234
    9. '＝' → logprob: -18.500118255615234
    10. '=int' → logprob: -18.625118255615234

Token 204: 'cnt' (ID: 33160)
  Prédit: 'cnt'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'cnt' → logprob: -3.7697225252486533e-06
    2. ' cnt' → logprob: -12.500003814697266
    3. '(cnt' → logprob: -17.750003814697266
    4. '	cnt' → logprob: -17.750003814697266
    5. 'count' → logprob: -19.125003814697266
    6. '[cnt' → logprob: -19.500003814697266
    7. '   ' → logprob: -22.125003814697266
    8. '```' → logprob: -22.250003814697266
    9. '           ' → logprob: -22.375003814697266
    10. '
' → logprob: -22.500003814697266

Token 205: '
' (ID: 198)
  Prédit: 'print'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'print' → logprob: -0.0002497767563909292
    2. '
' → logprob: -8.875249862670898
    3. ' print' → logprob: -9.125249862670898
    4. '```' → logprob: -14.125249862670898
    5. ' 
' → logprob: -16.6252498626709
    6. '\n' → logprob: -16.7502498626709
    7. '#print' → logprob: -17.0002498626709
    8. '(print' → logprob: -17.2502498626709
    9. ')
' → logprob: -17.6252498626709
    10. '-print' → logprob: -18.0002498626709

Token 206: 'print' (ID: 1598)
  Prédit: 'print'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'print' → logprob: -0.00023500648967456073
    2. '
' → logprob: -9.000234603881836
    3. ' print' → logprob: -9.125234603881836
    4. '```' → logprob: -13.250234603881836
    5. '#print' → logprob: -15.250234603881836
    6. '\n' → logprob: -15.375234603881836
    7. '.print' → logprob: -16.125234603881836
    8. '-print' → logprob: -16.250234603881836
    9. '(print' → logprob: -16.750234603881836
    10. '_print' → logprob: -17.000234603881836

Token 207: '(max' (ID: 17178)
  Prédit: '(max'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(max' → logprob: -0.00020449401927180588
    2. '(' → logprob: -8.500204086303711
    3. 'maximum' → logprob: -14.250204086303711
    4. ' (' → logprob: -16.00020408630371
    5. 'max' → logprob: -16.50020408630371
    6. '(min' → logprob: -17.50020408630371
    7. '()' → logprob: -17.50020408630371
    8. '(
' → logprob: -17.75020408630371
    9. '((' → logprob: -17.75020408630371
    10. '(start' → logprob: -17.87520408630371

Token 208: 'imum' (ID: 4556)
  Prédit: 'imum'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'imum' → logprob: -0.014368340373039246
    2. 'um' → logprob: -4.264368534088135
    3. 'mum' → logprob: -8.764368057250977
    4. 'ium' → logprob: -10.889368057250977
    5. 'maximum' → logprob: -11.139368057250977
    6. 'ax' → logprob: -11.389368057250977
    7. 'im' → logprob: -12.639368057250977
    8. '(' → logprob: -15.514368057250977
    9. 'inum' → logprob: -16.014368057250977
    10. 'IMUM' → logprob: -16.014368057250977

Token 209: ')' (ID: 8)
  Prédit: ')'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')' → logprob: -3.531315314830863e-06
    2. ' )' → logprob: -12.625003814697266
    3. ')
' → logprob: -17.375003814697266
    4. ')`' → logprob: -18.125003814697266
    5. '))' → logprob: -18.875003814697266
    6. ')}' → logprob: -19.375003814697266
    7. '`)' → logprob: -19.500003814697266
    8. '）' → logprob: -19.625003814697266
    9. '```' → logprob: -19.625003814697266
    10. ')#' → logprob: -19.625003814697266


RÉSUMÉ:
--------------------------------------------------------------------------------
Total des tokens analysés: 207
Tokens correctement prédits (1ère position, stricte): 91
Tokens correctement prédits (1ère position, avec adaptation): 99
Tokens correctement prédits (top 10): 169
Précision stricte (1ère position): 43.96%
Précision adaptée (1ère position): 47.83%
Précision (top 10): 81.64%
================================================================================
