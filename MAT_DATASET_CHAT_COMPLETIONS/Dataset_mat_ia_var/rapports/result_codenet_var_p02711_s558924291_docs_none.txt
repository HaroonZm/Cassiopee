================================================================================
ANALYSE DE PRÉDICTION TOKEN PAR TOKEN (BATCH API)
Date: 2025-06-04 19:18:16
Modèle de tokenisation: gpt-4o-mini
================================================================================

SCRIPT ANALYSÉ:
--------------------------------------------------------------------------------
n = input()
if "7" in n:
    print("Yes")
else:
    print("No")
--------------------------------------------------------------------------------

RÉSULTATS D'ANALYSE TOKEN PAR TOKEN:
--------------------------------------------------------------------------------
Token 0: 'n' (ID: 77)
  → Token d'amorce (pas de prédiction)

Token 1: ' =' (ID: 314)
  → Token d'amorce (pas de prédiction)

Token 2: ' input' (ID: 3422)
  → Token d'amorce (pas de prédiction)

Token 3: '()
' (ID: 1234)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '(' → logprob: -0.0034280545078217983
    2. '('' → logprob: -6.253427982330322
    3. ''' → logprob: -7.128427982330322
    4. '(
' → logprob: -8.25342845916748
    5. '"' → logprob: -8.62842845916748
    6. '`' → logprob: -9.62842845916748
    7. '()' → logprob: -9.75342845916748
    8. '("("' → logprob: -9.87842845916748
    9. '```' → logprob: -10.75342845916748
    10. '(`' → logprob: -11.50342845916748

Token 4: 'if' (ID: 366)
  Prédit: '.'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '.' → logprob: -0.2125469595193863
    2. '+' → logprob: -1.712546944618225
    3. '.strip' → logprob: -5.3375468254089355
    4. '=' → logprob: -6.5875468254089355
    5. '*' → logprob: -6.5875468254089355
    6. ')' → logprob: -7.7125468254089355
    7. '.split' → logprob: -7.7125468254089355
    8. '**' → logprob: -7.7125468254089355
    9. '\n' → logprob: -8.087547302246094
    10. '#' → logprob: -8.462547302246094

Token 5: ' "' (ID: 392)
  Prédit: ' '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' ' → logprob: -0.35323959589004517
    2. ' n' → logprob: -1.2282395362854004
    3. 'n' → logprob: -5.4782395362854
    4. ' not' → logprob: -7.7282395362854
    5. '  ' → logprob: -9.353240013122559
    6. ' ' → logprob: -10.478240013122559
    7. ''' → logprob: -11.228240013122559
    8. ' '' → logprob: -11.853240013122559
    9. ' a' → logprob: -12.103240013122559
    10. ' "' → logprob: -12.228240013122559

Token 6: '7' (ID: 22)
  Prédit: '"'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '"' → logprob: -0.6433911919593811
    2. 'a' → logprob: -2.1433911323547363
    3. 'n' → logprob: -2.7683911323547363
    4. '0' → logprob: -3.0183911323547363
    5. '7' → logprob: -3.1433911323547363
    6. '1' → logprob: -3.5183911323547363
    7. 'y' → logprob: -4.143391132354736
    8. ' "' → logprob: -4.518391132354736
    9. '4' → logprob: -4.643391132354736
    10. ''' → logprob: -4.643391132354736

Token 7: '"' (ID: 1)
  Prédit: '7'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '7' → logprob: -0.2263222187757492
    2. '"' → logprob: -1.6013221740722656
    3. ' in' → logprob: -8.101322174072266
    4. ' ' → logprob: -8.726322174072266
    5. '\n' → logprob: -8.726322174072266
    6. '6' → logprob: -9.476322174072266
    7. '"in' → logprob: -10.226322174072266
    8. '0' → logprob: -10.351322174072266
    9. ' "' → logprob: -10.476322174072266
    10. '3' → logprob: -10.851322174072266

Token 8: ' in' (ID: 306)
  Prédit: ' in'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' in' → logprob: -0.006713359151035547
    2. 'in' → logprob: -5.756713390350342
    3. ' not' → logprob: -5.881713390350342
    4. ' ' → logprob: -7.381713390350342
    5. ' ==' → logprob: -10.006712913513184
    6. 'not' → logprob: -10.631712913513184
    7. ')' → logprob: -10.881712913513184
    8. '==' → logprob: -11.756712913513184
    9. ' n' → logprob: -12.256712913513184
    10. ' "' → logprob: -12.881712913513184

Token 9: ' n' (ID: 297)
  Prédit: 'n'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'n' → logprob: -0.16022422909736633
    2. ' n' → logprob: -1.910224199295044
    3. ' ' → logprob: -16.66022491455078
    4. '	n' → logprob: -18.41022491455078
    5. '_n' → logprob: -19.28522491455078
    6. ' ' → logprob: -19.91022491455078
    7. '(n' → logprob: -20.03522491455078
    8. ')n' → logprob: -20.16022491455078
    9. 'n't' → logprob: -21.78522491455078
    10. '```' → logprob: -22.03522491455078

Token 10: ':
' (ID: 734)
  Prédit: ':'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ':' → logprob: -1.735893965815194e-05
    2. ':
' → logprob: -11.875017166137695
    3. ' :' → logprob: -11.875017166137695
    4. ':**' → logprob: -13.375017166137695
    5. '):' → logprob: -14.125017166137695
    6. ' and' → logprob: -14.500017166137695
    7. '>:' → logprob: -16.750017166137695
    8. ':n' → logprob: -16.875017166137695
    9. '":' → logprob: -16.875017166137695
    10. ',' → logprob: -17.000017166137695

Token 11: '   ' (ID: 271)
  Prédit: ' print'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' print' → logprob: -0.5817359089851379
    2. '   ' → logprob: -0.8317359089851379
    3. 'print' → logprob: -5.331736087799072
    4. ' ' → logprob: -7.956736087799072
    5. '	print' → logprob: -8.331735610961914
    6. '    ' → logprob: -8.831735610961914
    7. '\n' → logprob: -10.456735610961914
    8. '   ' → logprob: -10.456735610961914
    9. '  ' → logprob: -10.706735610961914
    10. ' n' → logprob: -10.831735610961914

Token 12: ' print' (ID: 2123)
  Prédit: ' print'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' print' → logprob: -0.08318828791379929
    2. 'print' (adapté à ' print') → logprob: -2.58318829536438
    3. '   ' → logprob: -5.458188056945801
    4. ' pass' → logprob: -11.4581880569458
    5. ' ' → logprob: -11.9581880569458
    6. '```' → logprob: -12.4581880569458
    7. ' n' → logprob: -13.0831880569458
    8. ' continue' → logprob: -14.0831880569458
    9. 'pass' → logprob: -14.2081880569458
    10. 'n' → logprob: -14.2081880569458

Token 13: '("' (ID: 568)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(' → logprob: -0.03471536189317703
    2. '("' → logprob: -3.409715414047241
    3. '("("' → logprob: -7.409715175628662
    4. '()' → logprob: -8.78471565246582
    5. '(True' → logprob: -9.15971565246582
    6. '('' → logprob: -9.15971565246582
    7. '("")' → logprob: -9.78471565246582
    8. ' (' → logprob: -11.53471565246582
    9. '(n' → logprob: -12.03471565246582
    10. '"' → logprob: -12.65971565246582

Token 14: 'Yes' (ID: 13022)
  Prédit: 'Yes'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'Yes' → logprob: -0.3857375681400299
    2. 'YES' → logprob: -1.7607375383377075
    3. 'yes' → logprob: -3.135737657546997
    4. '7' → logprob: -3.260737657546997
    5. 'Boom' → logprob: -3.260737657546997
    6. 'BO' → logprob: -5.260737419128418
    7. 'true' → logprob: -5.760737419128418
    8. '"' → logprob: -5.885737419128418
    9. 'boom' → logprob: -5.885737419128418
    10. 'Lucky' → logprob: -6.260737419128418

Token 15: '")
' (ID: 1896)
  Prédit: '")'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '")' → logprob: -8.876193169271573e-05
    2. ')' → logprob: -9.375088691711426
    3. '")
' → logprob: -13.250088691711426
    4. ')")' → logprob: -13.250088691711426
    5. '"' → logprob: -16.125089645385742
    6. '”)' → logprob: -16.250089645385742
    7. '```' → logprob: -17.125089645385742
    8. '')' → logprob: -17.250089645385742
    9. '\")' → logprob: -17.250089645385742
    10. '!")' → logprob: -18.000089645385742

Token 16: 'else' (ID: 2807)
  Prédit: 'else'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'else' → logprob: -0.009540267288684845
    2. ' else' → logprob: -4.88454008102417
    3. 'elif' → logprob: -6.25954008102417
    4. '```' → logprob: -11.759540557861328
    5. '<|end|>' → logprob: -12.509540557861328
    6. ' elif' → logprob: -12.759540557861328
    7. 'el' → logprob: -14.134540557861328
    8. ')' → logprob: -14.384540557861328
    9. ' ' → logprob: -14.384540557861328
    10. '_else' → logprob: -14.509540557861328

Token 17: ':
' (ID: 734)
  Prédit: ':'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ':' → logprob: -6.034592388459714e-06
    2. ':
' → logprob: -12.250005722045898
    3. ' :' → logprob: -14.000005722045898
    4. ':**' → logprob: -16.1250057220459
    5. '):' → logprob: -16.3750057220459
    6. '   ' → logprob: -16.6250057220459
    7. ':return' → logprob: -17.2500057220459
    8. ':def' → logprob: -17.6250057220459
    9. '():' → logprob: -18.3750057220459
    10. '```' → logprob: -18.3750057220459

Token 18: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.004133372567594051
    2. ' print' → logprob: -6.254133224487305
    3. '    ' → logprob: -7.254133224487305
    4. '```' → logprob: -7.629133224487305
    5. '    
' → logprob: -7.879133224487305
    6. ' ' → logprob: -8.254133224487305
    7. 'print' → logprob: -8.754133224487305
    8. '  ' → logprob: -9.879133224487305
    9. '``' → logprob: -10.504133224487305
    10. '       ' → logprob: -10.629133224487305

Token 19: ' print' (ID: 2123)
  Prédit: ' print'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' print' → logprob: -0.15323412418365479
    2. 'print' (adapté à ' print') → logprob: -2.5282340049743652
    3. '   ' → logprob: -2.7782340049743652
    4. '```' → logprob: -10.028234481811523
    5. '    ' → logprob: -10.403234481811523
    6. ' ' → logprob: -10.403234481811523
    7. '    
' → logprob: -12.528234481811523
    8. '\n' → logprob: -12.653234481811523
    9. '``' → logprob: -13.028234481811523
    10. '  ' → logprob: -13.028234481811523

Token 20: '("' (ID: 568)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(' → logprob: -0.07993065565824509
    2. '("' → logprob: -2.579930543899536
    3. '("("' → logprob: -7.204930782318115
    4. '("")' → logprob: -8.829930305480957
    5. '()' → logprob: -8.954930305480957
    6. '('' → logprob: -11.454930305480957
    7. '(""' → logprob: -12.829930305480957
    8. '("""' → logprob: -13.329930305480957
    9. '("(' → logprob: -13.454930305480957
    10. '(False' → logprob: -13.579930305480957

Token 21: 'No' (ID: 3160)
  Prédit: 'No'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'No' → logprob: -0.005253798794001341
    2. '"No' → logprob: -5.255253791809082
    3. '"' → logprob: -11.130253791809082
    4. '")' → logprob: -12.630253791809082
    5. ' No' → logprob: -14.130253791809082
    6. '"N' → logprob: -14.505253791809082
    7. 'N' → logprob: -14.630253791809082
    8. '“No' → logprob: -15.630253791809082
    9. 'NO' → logprob: -16.2552547454834
    10. '>No' → logprob: -17.7552547454834

Token 22: '")' (ID: 1405)
  Prédit: '")'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '")' → logprob: -0.0004418743774294853
    2. ')' → logprob: -7.750442028045654
    3. '"' → logprob: -11.625441551208496
    4. ')")' → logprob: -13.125441551208496
    5. '")
' → logprob: -16.125442504882812
    6. '')' → logprob: -16.750442504882812
    7. '```' → logprob: -17.500442504882812
    8. '`)' → logprob: -17.625442504882812
    9. '}")' → logprob: -18.000442504882812
    10. '”)' → logprob: -18.000442504882812


RÉSUMÉ:
--------------------------------------------------------------------------------
Total des tokens analysés: 20
Tokens correctement prédits (1ère position, stricte): 8
Tokens correctement prédits (1ère position, avec adaptation): 8
Tokens correctement prédits (top 10): 18
Précision stricte (1ère position): 40.00%
Précision adaptée (1ère position): 40.00%
Précision (top 10): 90.00%
================================================================================
