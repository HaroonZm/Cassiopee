================================================================================
ANALYSE DE PRÉDICTION TOKEN PAR TOKEN (BATCH API)
Date: 2025-06-04 15:48:40
Modèle de tokenisation: gpt-4o-mini
================================================================================

SCRIPT ANALYSÉ:
--------------------------------------------------------------------------------
# Petite entrée, lisons les valeurs de départ
n, m, x = map(int, input().split())
c = []
for iiii in range(n):  # pourquoi pas iiii ? (habitude ?)
    c.append(list(map(int, input().split())))

# utilisé pour tracker les 'livres' (?)
choix = [0 for _ in range(n)]

def couverture(choix_liste):
    res = [0]*m
    for i in range(n):
        if choix[i]:
            for j in range(m):
                res[j] += c[i][j+1]  # On prend à partir de 1 car coût devant
    # Est-ce que tous >= x ?
    for v in res:
        if v < x:
            return False
    return True

meilleur = 1<<62  # grand nombre, ça suffit sûrement

def dfs(idx):
    # Parcourt tous les choix possibles
    global meilleur
    if idx == n:
        total = 0
        for i in range(n):
            if choix[i]:
                total += c[i][0]
        if couverture(choix):
            meilleur = min(meilleur, total)
        return
    # Avec ou sans
    choix[idx] = 0
    dfs(idx+1)
    choix[idx] = 1
    dfs(idx+1)

dfs(0)
if meilleur >= 1<<62:
    print(-1)  # trop cher ou impossible
else:
    print(meilleur)
# Est-ce qu'il y avait moyen de faire plus rapide ? Probablement, mais ça marche
--------------------------------------------------------------------------------

RÉSULTATS D'ANALYSE TOKEN PAR TOKEN:
--------------------------------------------------------------------------------
Token 0: '#' (ID: 2)
  → Token d'amorce (pas de prédiction)

Token 1: ' Petite' (ID: 129719)
  → Token d'amorce (pas de prédiction)

Token 2: ' entrée' (ID: 95590)
  → Token d'amorce (pas de prédiction)

Token 3: ',' (ID: 11)
  Prédit: '#'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '#' → logprob: -0.4305024743080139
    2. ':' → logprob: -1.4305024147033691
    3. 's' → logprob: -3.930502414703369
    4. '```' → logprob: -4.180502414703369
    5. ',' → logprob: -4.430502414703369
    6. '=' → logprob: -4.680502414703369
    7. '\' → logprob: -4.805502414703369
    8. ' #' → logprob: -4.930502414703369
    9. 'def' → logprob: -5.805502414703369
    10. ' =' → logprob: -5.930502414703369

Token 4: ' lis' (ID: 20784)
  Prédit: ' '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' ' → logprob: -1.4271624088287354
    2. '#' → logprob: -1.5521624088287354
    3. ',' → logprob: -2.1771624088287354
    4. '```' → logprob: -2.4271624088287354
    5. ' #' → logprob: -2.5521624088287354
    6. 'def' → logprob: -3.1771624088287354
    7. ':' → logprob: -3.1771624088287354
    8. '\n' → logprob: -3.8021624088287354
    9. ' :' → logprob: -4.052162170410156
    10. 's' → logprob: -4.177162170410156

Token 5: 'ons' (ID: 1808)
  Prédit: 'te'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'te' → logprob: -0.04071538522839546
    2. 't' → logprob: -4.040715217590332
    3. '```' → logprob: -4.415715217590332
    4. 'e' → logprob: -5.665715217590332
    5. '#' → logprob: -6.790715217590332
    6. 've' → logprob: -7.165715217590332
    7. 'tes' → logprob: -7.415715217590332
    8. ',' → logprob: -7.540715217590332
    9. 'tez' → logprob: -7.915715217590332
    10. 'tle' → logprob: -7.915715217590332

Token 6: ' les' (ID: 1341)
  Prédit: '#'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '#' → logprob: -0.635090708732605
    2. 'f' → logprob: -2.3850908279418945
    3. ':' → logprob: -2.5100908279418945
    4. '_' → logprob: -2.7600908279418945
    5. 'l' → logprob: -3.2600908279418945
    6. ' ' → logprob: -3.6350908279418945
    7. ',' → logprob: -3.8850908279418945
    8. 'le' → logprob: -3.8850908279418945
    9. 'entrée' → logprob: -4.3850908279418945
    10. '```' → logprob: -4.3850908279418945

Token 7: ' valeurs' (ID: 73668)
  Prédit: '_'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '_' → logprob: -0.5786879658699036
    2. ' ' → logprob: -1.3286879062652588
    3. 'l' → logprob: -2.578687906265259
    4. ':' → logprob: -4.078688144683838
    5. 'f' → logprob: -4.078688144683838
    6. '_l' → logprob: -4.578688144683838
    7. 's' → logprob: -4.703688144683838
    8. ' _' → logprob: -5.203688144683838
    9. ',' → logprob: -5.453688144683838
    10. 'd' → logprob: -5.578688144683838

Token 8: ' de' (ID: 334)
  Prédit: '_'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '_' → logprob: -0.5106090307235718
    2. 'v' → logprob: -2.7606091499328613
    3. ' ' → logprob: -2.8856091499328613
    4. 's' → logprob: -3.0106091499328613
    5. '\n' → logprob: -3.2606091499328613
    6. '#' → logprob: -3.5106091499328613
    7. 'values' → logprob: -3.7606091499328613
    8. 'd' → logprob: -4.010609149932861
    9. '\' → logprob: -4.010609149932861
    10. ':' → logprob: -4.135609149932861

Token 9: ' départ' (ID: 32693)
  Prédit: 'l'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'l' → logprob: -1.0953608751296997
    2. 'cap' → logprob: -1.7203608751296997
    3. 'configuration' → logprob: -2.09536075592041
    4. 'la' → logprob: -2.72036075592041
    5. 'temperature' → logprob: -2.97036075592041
    6. 'entrée' → logprob: -2.97036075592041
    7. 'temp' → logprob: -3.09536075592041
    8. 'variables' → logprob: -3.72036075592041
    9. 'temps' → logprob: -4.34536075592041
    10. 's' → logprob: -4.47036075592041

Token 10: '
' (ID: 198)
  Prédit: 'v'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'v' → logprob: -1.3539735078811646
    2. 'val' → logprob: -1.9789735078811646
    3. 'data' → logprob: -2.103973388671875
    4. 'd' → logprob: -2.603973388671875
    5. 'x' → logprob: -2.603973388671875
    6. '_' → logprob: -2.728973388671875
    7. 'values' → logprob: -2.728973388671875
    8. 'n' → logprob: -3.103973388671875
    9. 's' → logprob: -3.478973388671875
    10. 'initial' → logprob: -3.978973388671875

Token 11: 'n' (ID: 77)
  Prédit: 'v'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'v' → logprob: -1.158531904220581
    2. 'val' → logprob: -1.533531904220581
    3. 'data' → logprob: -2.533531904220581
    4. 'x' → logprob: -2.908531904220581
    5. 'n' → logprob: -3.158531904220581
    6. 'initial' → logprob: -3.158531904220581
    7. '```' → logprob: -3.283531904220581
    8. 'd' → logprob: -3.283531904220581
    9. '\n' → logprob: -3.408531904220581
    10. 'values' → logprob: -3.533531904220581

Token 12: ',' (ID: 11)
  Prédit: ' ='
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' =' → logprob: -0.14873006939888
    2. '=' → logprob: -2.2737300395965576
    3. ',' → logprob: -4.273730278015137
    4. ' ' → logprob: -4.523730278015137
    5. 'b' → logprob: -5.773730278015137
    6. 'ombre' → logprob: -6.273730278015137
    7. '_' → logprob: -6.898730278015137
    8. '```' → logprob: -6.898730278015137
    9. 'ombres' → logprob: -7.273730278015137
    10. '   ' → logprob: -7.523730278015137

Token 13: ' m' (ID: 284)
  Prédit: 'm'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'm' → logprob: -0.6886206865310669
    2. ' ' → logprob: -1.063620686531067
    3. ' m' → logprob: -2.1886205673217773
    4. ' =' → logprob: -4.313620567321777
    5. 'r' → logprob: -4.938620567321777
    6. 's' → logprob: -5.313620567321777
    7. 'input' → logprob: -6.063620567321777
    8. 'space' → logprob: -6.438620567321777
    9. 'd' → logprob: -6.813620567321777
    10. '=' → logprob: -7.063620567321777

Token 14: ',' (ID: 11)
  Prédit: ' ='
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' =' → logprob: -0.05020015314221382
    2. '=' → logprob: -3.3002002239227295
    3. ',' → logprob: -4.42519998550415
    4. ' ,' → logprob: -9.300200462341309
    5. ' ' → logprob: -11.425200462341309
    6. ')' → logprob: -12.925200462341309
    7. '<|end|>' → logprob: -13.675200462341309
    8. ' =
' → logprob: -13.800200462341309
    9. '```' → logprob: -14.425200462341309
    10. ' =",' → logprob: -14.675200462341309

Token 15: ' x' (ID: 1215)
  Prédit: ' ='
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' =' → logprob: -0.1238468736410141
    2. ' p' → logprob: -2.9988467693328857
    3. '=' → logprob: -3.2488467693328857
    4. ' ' → logprob: -3.7488467693328857
    5. ' k' → logprob: -6.123847007751465
    6. 'p' → logprob: -7.748847007751465
    7. ' q' → logprob: -8.248847007751465
    8. ' x' → logprob: -8.498847007751465
    9. ',' → logprob: -8.498847007751465
    10. '  ' → logprob: -8.623847007751465

Token 16: ' =' (ID: 314)
  Prédit: ' ='
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' =' → logprob: -0.043683525174856186
    2. '=' → logprob: -3.1686835289001465
    3. ',' → logprob: -7.2936835289001465
    4. ' ,' → logprob: -13.418683052062988
    5. ' ' → logprob: -13.793683052062988
    6. ')' → logprob: -14.793683052062988
    7. '=input' → logprob: -14.918683052062988
    8. ' ' → logprob: -16.293684005737305
    9. ' =",' → logprob: -16.356184005737305
    10. '_' → logprob: -16.481184005737305

Token 17: ' map' (ID: 4014)
  Prédit: ' map'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' map' → logprob: -0.11758838593959808
    2. 'map' → logprob: -2.2425882816314697
    3. ' input' → logprob: -5.867588520050049
    4. '0' → logprob: -7.117588520050049
    5. 'input' → logprob: -7.117588520050049
    6. ' ' → logprob: -8.74258804321289
    7. ' list' → logprob: -9.61758804321289
    8. ' [' → logprob: -10.49258804321289
    9. 'list' → logprob: -11.61758804321289
    10. ' int' → logprob: -11.74258804321289

Token 18: '(int' (ID: 2742)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(' → logprob: -0.18153397738933563
    2. '(int' → logprob: -1.931533932685852
    3. '(lambda' → logprob: -4.3065338134765625
    4. '(str' → logprob: -4.9315338134765625
    5. '(
' → logprob: -8.806533813476562
    6. '(input' → logprob: -10.431533813476562
    7. '[int' → logprob: -10.556533813476562
    8. '(list' → logprob: -10.681533813476562
    9. '<int' → logprob: -10.931533813476562
    10. '(

' → logprob: -10.931533813476562

Token 19: ',' (ID: 11)
  Prédit: '(input'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '(input' → logprob: -0.03435755521059036
    2. '(' → logprob: -3.7843575477600098
    3. ')' → logprob: -4.53435754776001
    4. 'input' → logprob: -8.534358024597168
    5. '(int' → logprob: -10.659358024597168
    6. ')(' → logprob: -10.909358024597168
    7. '=input' → logprob: -11.034358024597168
    8. '('' → logprob: -11.784358024597168
    9. ' input' → logprob: -11.784358024597168
    10. '```' → logprob: -12.159358024597168

Token 20: ' input' (ID: 3422)
  Prédit: 'input'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'input' → logprob: -0.018182599917054176
    2. ' input' → logprob: -4.018182754516602
    3. '(input' → logprob: -10.893182754516602
    4. ')' → logprob: -11.268182754516602
    5. ',input' → logprob: -14.268182754516602
    6. '=input' → logprob: -14.643182754516602
    7. ' )' → logprob: -16.7681827545166
    8. '<input' → logprob: -16.8931827545166
    9. '[input' → logprob: -17.1431827545166
    10. '	input' → logprob: -17.1431827545166

Token 21: '().' (ID: 1454)
  Prédit: '()'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '()' → logprob: -0.5368115305900574
    2. '())' → logprob: -0.9118115305900574
    3. '(' → logprob: -5.161811351776123
    4. '().' → logprob: -6.536811351776123
    5. '('' → logprob: -6.661811351776123
    6. '(()' → logprob: -7.286811351776123
    7. '());' → logprob: -7.411811351776123
    8. ')' → logprob: -7.536811351776123
    9. '()))' → logprob: -7.536811351776123
    10. '(input' → logprob: -7.911811351776123

Token 22: 'split' (ID: 13627)
  Prédit: 'split'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'split' → logprob: -0.00015979631280060858
    2. 'strip' → logprob: -8.750160217285156
    3. 'rstrip' → logprob: -14.750160217285156
    4. ' split' → logprob: -15.000160217285156
    5. '(split' → logprob: -15.125160217285156
    6. 'spl' → logprob: -15.250160217285156
    7. 's' → logprob: -17.000160217285156
    8. 'read' → logprob: -19.000160217285156
    9. 'startswith' → logprob: -19.375160217285156
    10. 'sp' → logprob: -20.500160217285156

Token 23: '())
' (ID: 4574)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ')' → logprob: -0.03488149866461754
    2. '))' → logprob: -3.409881591796875
    3. '())' → logprob: -7.659881591796875
    4. '('' → logprob: -7.909881591796875
    5. '')' → logprob: -9.034881591796875
    6. '(' → logprob: -9.159881591796875
    7. '(','' → logprob: -10.284881591796875
    8. ')(' → logprob: -10.534881591796875
    9. ')))' → logprob: -11.159881591796875
    10. '),' → logprob: -11.534881591796875

Token 24: 'c' (ID: 66)
  Prédit: 'for'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'for' → logprob: -0.07771869748830795
    2. ' for' → logprob: -3.702718734741211
    3. '\n' → logprob: -3.952718734741211
    4. ' ' → logprob: -5.202718734741211
    5. '#' → logprob: -5.327718734741211
    6. 'n' → logprob: -5.702718734741211
    7. ')' → logprob: -5.702718734741211
    8. '
' → logprob: -5.827718734741211
    9. '<|end|>' → logprob: -5.952718734741211
    10. 's' → logprob: -6.702718734741211

Token 25: ' =' (ID: 314)
  Prédit: 'ost'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'ost' → logprob: -0.4022524654865265
    2. 'o' → logprob: -1.902252435684204
    3. 'ol' → logprob: -3.027252435684204
    4. ' =' → logprob: -3.152252435684204
    5. 's' → logprob: -3.402252435684204
    6. ',' → logprob: -4.152252674102783
    7. '=' → logprob: -4.152252674102783
    8. 'ount' → logprob: -5.527252674102783
    9. '=[]' → logprob: -5.527252674102783
    10. 'os' → logprob: -5.652252674102783

Token 26: ' []
' (ID: 8911)
  Prédit: 'list'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'list' → logprob: -0.09575396031141281
    2. '[' → logprob: -2.7207539081573486
    3. '[]' → logprob: -4.095754146575928
    4. ' list' → logprob: -5.220754146575928
    5. '[list' → logprob: -6.345754146575928
    6. ' [' → logprob: -6.970754146575928
    7. '[int' → logprob: -7.845754146575928
    8. ' []' → logprob: -8.47075366973877
    9. 'input' → logprob: -9.97075366973877
    10. '[input' → logprob: -10.47075366973877

Token 27: 'for' (ID: 1938)
  Prédit: 'for'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'for' → logprob: -0.6544943451881409
    2. '[' → logprob: -0.7794943451881409
    3. '[
' → logprob: -4.029494285583496
    4. ' for' → logprob: -6.529494285583496
    5. ' [' → logprob: -7.904494285583496
    6. '[]' → logprob: -7.904494285583496
    7. 'c' → logprob: -7.904494285583496
    8. '[n' → logprob: -8.154494285583496
    9. '[c' → logprob: -8.404494285583496
    10. '[int' → logprob: -8.529494285583496

Token 28: ' i' (ID: 575)
  Prédit: ' _'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' _' → logprob: -0.40760537981987
    2. '_' → logprob: -1.1576054096221924
    3. ' i' → logprob: -3.9076054096221924
    4. 'i' → logprob: -8.032605171203613
    5. '_i' → logprob: -9.782605171203613
    6. ' ' → logprob: -10.282605171203613
    7. ' ' → logprob: -11.157605171203613
    8. '	i' → logprob: -14.532605171203613
    9. '  ' → logprob: -14.657605171203613
    10. ' in' → logprob: -14.782605171203613

Token 29: 'iii' (ID: 50812)
  Prédit: ' in'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' in' → logprob: -0.0802321508526802
    2. 'in' → logprob: -2.5802321434020996
    3. ' ' → logprob: -6.8302321434021
    4. 'n' → logprob: -9.080232620239258
    5. '_' → logprob: -9.580232620239258
    6. '  ' → logprob: -10.455232620239258
    7. ' n' → logprob: -11.830232620239258
    8. '	in' → logprob: -11.830232620239258
    9. '0' → logprob: -12.205232620239258
    10. ' i' → logprob: -12.455232620239258

Token 30: ' in' (ID: 306)
  Prédit: ' in'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' in' → logprob: -0.0824345201253891
    2. 'in' → logprob: -2.5824344158172607
    3. ' ' → logprob: -6.33243465423584
    4. '_' → logprob: -7.33243465423584
    5. '   ' → logprob: -7.70743465423584
    6. 'n' → logprob: -8.20743465423584
    7. '  ' → logprob: -8.95743465423584
    8. '    ' → logprob: -9.33243465423584
    9. ' i' → logprob: -9.83243465423584
    10. ' n' → logprob: -10.45743465423584

Token 31: ' range' (ID: 3352)
  Prédit: ' range'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' range' → logprob: -0.12694543600082397
    2. 'range' → logprob: -2.1269454956054688
    3. ' ' → logprob: -12.001945495605469
    4. '	range' → logprob: -13.001945495605469
    5. 'rang' → logprob: -13.126945495605469
    6. ' ran' → logprob: -13.751945495605469
    7. '(range' → logprob: -13.751945495605469
    8. ' rang' → logprob: -14.251945495605469
    9. 'ran' → logprob: -14.501945495605469
    10. 'r' → logprob: -14.501945495605469

Token 32: '(n' (ID: 2406)
  Prédit: '(n'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(n' → logprob: -0.47519683837890625
    2. '(' → logprob: -0.9751968383789062
    3. '(m' → logprob: -7.100196838378906
    4. '(
' → logprob: -8.350196838378906
    5. '(

' → logprob: -10.100196838378906
    6. '(nn' → logprob: -12.100196838378906
    7. ' (' → logprob: -12.725196838378906
    8. '(int' → logprob: -13.100196838378906
    9. '(s' → logprob: -13.225196838378906
    10. '(x' → logprob: -13.725196838378906

Token 33: '):' (ID: 3127)
  Prédit: '):'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '):' → logprob: -0.002087450586259365
    2. ')' → logprob: -6.627087593078613
    3. ' ):' → logprob: -7.377087593078613
    4. ':' → logprob: -9.002087593078613
    5. '):
' → logprob: -12.002087593078613
    6. ' :' → logprob: -13.502087593078613
    7. ' )' → logprob: -13.752087593078613
    8. '+' → logprob: -13.877087593078613
    9. '():' → logprob: -14.127087593078613
    10. ' ' → logprob: -14.627087593078613

Token 34: ' ' (ID: 220)
  Prédit: ' c'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' c' → logprob: -0.093943290412426
    2. ' ' → logprob: -3.0939433574676514
    3. '    ' → logprob: -3.9689433574676514
    4. 'c' → logprob: -4.468943119049072
    5. '   ' → logprob: -4.593943119049072
    6. '	c' → logprob: -7.343943119049072
    7. ' []' → logprob: -7.343943119049072
    8. '     
' → logprob: -7.343943119049072
    9. '  ' → logprob: -8.21894359588623
    10. '<|end|>' → logprob: -8.21894359588623

Token 35: ' #' (ID: 1069)
  Prédit: ' c'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' c' → logprob: -0.4860594868659973
    2. 'c' → logprob: -0.9860594868659973
    3. '   ' → logprob: -4.736059665679932
    4. '	c' → logprob: -6.361059665679932
    5. '_c' → logprob: -7.861059665679932
    6. ' ' → logprob: -8.111059188842773
    7. '    ' → logprob: -9.111059188842773
    8. '<|end|>' → logprob: -9.236059188842773
    9. 's' → logprob: -9.611059188842773
    10. '  ' → logprob: -9.986059188842773

Token 36: ' pourquoi' (ID: 39224)
  Prédit: ' c'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' c' → logprob: -0.038614433258771896
    2. 'c' → logprob: -3.663614511489868
    3. '    ' → logprob: -5.413614273071289
    4. ' ' → logprob: -5.413614273071289
    5. '   ' → logprob: -6.163614273071289
    6. ' input' → logprob: -7.913614273071289
    7. '	c' → logprob: -8.413614273071289
    8. ')' → logprob: -9.413614273071289
    9. 'input' → logprob: -9.663614273071289
    10. '  ' → logprob: -9.663614273071289

Token 37: ' pas' (ID: 2173)
  Prédit: ' c'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' c' → logprob: -1.2195535898208618
    2. ' ' → logprob: -1.3445535898208618
    3. '   ' → logprob: -1.3445535898208618
    4. ')' → logprob: -2.7195534706115723
    5. 'c' → logprob: -3.4695534706115723
    6. '  ' → logprob: -3.9695534706115723
    7. ':' → logprob: -4.094553470611572
    8. '    ' → logprob: -4.219553470611572
    9. ' ' → logprob: -4.844553470611572
    10. ',' → logprob: -5.469553470611572

Token 38: ' i' (ID: 575)
  Prédit: ' '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' ' → logprob: -0.8066816329956055
    2. ' c' → logprob: -0.8066816329956055
    3. '    ' → logprob: -3.5566816329956055
    4. '   ' → logprob: -3.6816816329956055
    5. 'c' → logprob: -4.0566816329956055
    6. '  ' → logprob: -4.4316816329956055
    7. ' :' → logprob: -4.8066816329956055
    8. ' )' → logprob: -5.1816816329956055
    9. ':' → logprob: -5.9316816329956055
    10. ')' → logprob: -6.0566816329956055

Token 39: 'iii' (ID: 50812)
  Prédit: ':'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ':' → logprob: -0.3093240261077881
    2. ' :' → logprob: -2.059324026107788
    3. '   ' → logprob: -3.434324026107788
    4. ' ' → logprob: -3.434324026107788
    5. ')' → logprob: -4.059324264526367
    6. ',' → logprob: -4.559324264526367
    7. '  ' → logprob: -4.684324264526367
    8. '.' → logprob: -5.059324264526367
    9. 'input' → logprob: -5.059324264526367
    10. '    ' → logprob: -5.309324264526367

Token 40: ' ?' (ID: 1423)
  Prédit: ':'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ':' → logprob: -0.49777957797050476
    2. ' :' → logprob: -0.9977796077728271
    3. ')' → logprob: -4.872779369354248
    4. ' ' → logprob: -5.247779369354248
    5. '   ' → logprob: -5.872779369354248
    6. ' ,' → logprob: -6.247779369354248
    7. ' )' → logprob: -6.872779369354248
    8. ',' → logprob: -6.872779369354248
    9. '  ' → logprob: -7.247779369354248
    10. '):' → logprob: -7.622779369354248

Token 41: ' (' (ID: 350)
  Prédit: ':'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ':' → logprob: -0.2693323791027069
    2. ' :' → logprob: -1.5193324089050293
    3. ' ' → logprob: -5.519332408905029
    4. '   ' → logprob: -5.519332408905029
    5. ' :
' → logprob: -6.019332408905029
    6. ')' → logprob: -6.144332408905029
    7. ':
' → logprob: -7.019332408905029
    8. '  ' → logprob: -7.394332408905029
    9. '):' → logprob: -7.644332408905029
    10. ' ,' → logprob: -7.894332408905029

Token 42: 'hab' (ID: 14747)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ')' → logprob: -0.01662379316985607
    2. ' )' → logprob: -4.3916239738464355
    3. '):' → logprob: -5.8916239738464355
    4. '   ' → logprob: -7.5166239738464355
    5. 'iiii' → logprob: -7.7666239738464355
    6. ' ' → logprob: -8.641623497009277
    7. ' ):' → logprob: -9.391623497009277
    8. '```' → logprob: -11.016623497009277
    9. ':' → logprob: -11.141623497009277
    10. ' ' → logprob: -11.266623497009277

Token 43: 'itude' (ID: 5962)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ')' → logprob: -0.8705817461013794
    2. '   ' → logprob: -1.1205817461013794
    3. 'e' → logprob: -2.74558162689209
    4. 'iiii' → logprob: -2.99558162689209
    5. 'er' → logprob: -3.49558162689209
    6. '```' → logprob: -3.99558162689209
    7. '4' → logprob: -4.62058162689209
    8. 'aaaa' → logprob: -4.87058162689209
    9. 'a' → logprob: -4.99558162689209
    10. 'i' → logprob: -5.24558162689209

Token 44: ' ?' (ID: 1423)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ')' → logprob: -0.04610039293766022
    2. ' )' → logprob: -3.296100378036499
    3. '):' → logprob: -4.921100616455078
    4. ' ):' → logprob: -7.796100616455078
    5. '   ' → logprob: -8.671100616455078
    6. ' ' → logprob: -9.671100616455078
    7. '?' → logprob: -11.421100616455078
    8. ':' → logprob: -11.671100616455078
    9. ' ' → logprob: -11.796100616455078
    10. ' :' → logprob: -11.921100616455078

Token 45: ')
' (ID: 446)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ')' → logprob: -0.09250230342149734
    2. ' )' → logprob: -2.4675023555755615
    3. 'iiii' → logprob: -6.467502117156982
    4. ' ' → logprob: -6.967502117156982
    5. '   ' → logprob: -6.967502117156982
    6. ' ' → logprob: -10.71750259399414
    7. '   ' → logprob: -11.59250259399414
    8. '   ' → logprob: -11.84250259399414
    9. '):' → logprob: -11.84250259399414
    10. '    ' → logprob: -11.84250259399414

Token 46: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.814399003982544
    2. ' ' → logprob: -1.439399003982544
    3. '    ' → logprob: -1.939399003982544
    4. ' c' → logprob: -2.564399003982544
    5. 'c' → logprob: -3.189399003982544
    6. '  ' → logprob: -4.189398765563965
    7. ')' → logprob: -4.314398765563965
    8. ' ,' → logprob: -5.064398765563965
    9. 'input' → logprob: -5.189398765563965
    10. ',' → logprob: -5.564398765563965

Token 47: ' c' (ID: 274)
  Prédit: 'c'
  Correct (stricte): False
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'c' (adapté à ' c') → logprob: -0.636489748954773
    2. ' c' → logprob: -0.761489748954773
    3. '   ' → logprob: -6.8864898681640625
    4. ' line' → logprob: -7.6364898681640625
    5. '_' → logprob: -8.136489868164062
    6. 'l' → logprob: -8.261489868164062
    7. '_c' → logprob: -8.261489868164062
    8. ' ' → logprob: -8.636489868164062
    9. 'line' → logprob: -8.886489868164062
    10. '	c' → logprob: -9.011489868164062

Token 48: '.append' (ID: 3709)
  Prédit: '.'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '.' → logprob: -0.5759924650192261
    2. '.append' → logprob: -0.8259924650192261
    3. ' .' → logprob: -11.075992584228516
    4. '.app' → logprob: -11.200992584228516
    5. '.extend' → logprob: -11.200992584228516
    6. '.ap' → logprob: -11.825992584228516
    7. 'append' → logprob: -14.575992584228516
    8. '.Append' → logprob: -14.950992584228516
    9. '.a' → logprob: -14.950992584228516
    10. '.push' → logprob: -15.200992584228516

Token 49: '(list' (ID: 13116)
  Prédit: '(int'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(int' → logprob: -0.7447425127029419
    2. '(' → logprob: -1.119742512702942
    3. '(list' → logprob: -1.619742512702942
    4. '(
' → logprob: -8.619742393493652
    5. '(tuple' → logprob: -8.619742393493652
    6. '(float' → logprob: -9.244742393493652
    7. '(input' → logprob: -9.369742393493652
    8. ' (' → logprob: -9.619742393493652
    9. '(

' → logprob: -9.619742393493652
    10. '(map' → logprob: -9.869742393493652

Token 50: '(map' (ID: 16946)
  Prédit: '(map'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(map' → logprob: -0.08318620920181274
    2. '(' → logprob: -2.583186149597168
    3. '(int' → logprob: -5.458186149597168
    4. '(
' → logprob: -12.333186149597168
    5. '(list' → logprob: -12.333186149597168
    6. '(

' → logprob: -12.333186149597168
    7. '(eval' → logprob: -12.833186149597168
    8. '(input' → logprob: -12.958186149597168
    9. '(s' → logprob: -14.333186149597168
    10. '(tuple' → logprob: -14.333186149597168

Token 51: '(int' (ID: 2742)
  Prédit: '(int'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(int' → logprob: -0.31368890404701233
    2. '(' → logprob: -1.31368887424469
    3. '(input' → logprob: -9.063689231872559
    4. '<int' → logprob: -9.688689231872559
    5. '<|end|>' → logprob: -9.813689231872559
    6. ')' → logprob: -10.188689231872559
    7. '(
' → logprob: -10.313689231872559
    8. 'int' → logprob: -10.688689231872559
    9. '(lambda' → logprob: -11.188689231872559
    10. ' (' → logprob: -11.313689231872559

Token 52: ',' (ID: 11)
  Prédit: '(input'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(input' → logprob: -0.480351060628891
    2. ',input' → logprob: -1.6053510904312134
    3. ',' → logprob: -1.7303510904312134
    4. '(' → logprob: -5.730350971221924
    5. 'input' → logprob: -9.605351448059082
    6. ' ,' → logprob: -10.480351448059082
    7. '=input' → logprob: -10.855351448059082
    8. ')' → logprob: -11.730351448059082
    9. ' input' → logprob: -11.980351448059082
    10. '),' → logprob: -12.230351448059082

Token 53: ' input' (ID: 3422)
  Prédit: 'input'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'input' → logprob: -0.3485719859600067
    2. ' input' → logprob: -1.223572015762329
    3. '(input' → logprob: -9.34857177734375
    4. ',input' → logprob: -11.09857177734375
    5. '=input' → logprob: -11.59857177734375
    6. ')' → logprob: -11.72357177734375
    7. '	input' → logprob: -12.84857177734375
    8. '_input' → logprob: -13.47357177734375
    9. '[input' → logprob: -13.59857177734375
    10. '<input' → logprob: -13.59857177734375

Token 54: '().' (ID: 1454)
  Prédit: '().'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '().' → logprob: -5.288163083605468e-05
    2. '()' → logprob: -9.875052452087402
    3. ' ().' → logprob: -14.125052452087402
    4. '.' → logprob: -14.750052452087402
    5. '(' → logprob: -15.875052452087402
    6. '()))' → logprob: -17.37505340576172
    7. '>().' → logprob: -17.37505340576172
    8. '()
' → logprob: -17.87505340576172
    9. '())))' → logprob: -17.87505340576172
    10. ' .' → logprob: -18.00005340576172

Token 55: 'split' (ID: 13627)
  Prédit: 'split'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'split' → logprob: -1.7432603272027336e-06
    2. 'strip' → logprob: -13.500001907348633
    3. ' split' → logprob: -16.000001907348633
    4. '(split' → logprob: -16.750001907348633
    5. 'spl' → logprob: -17.250001907348633
    6. 'rstrip' → logprob: -17.500001907348633
    7. 's' → logprob: -18.000001907348633
    8. 'plit' → logprob: -19.375001907348633
    9. '.split' → logprob: -21.000001907348633
    10. 'sp' → logprob: -21.125001907348633

Token 56: '()))' (ID: 16829)
  Prédit: ')))'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')))' → logprob: -0.22520078718662262
    2. '())))' → logprob: -2.100200891494751
    3. '())' → logprob: -3.850200891494751
    4. ')' → logprob: -3.850200891494751
    5. '()))' → logprob: -3.975200891494751
    6. '))' → logprob: -4.975200653076172
    7. '(' → logprob: -5.100200653076172
    8. '()' → logprob: -5.350200653076172
    9. '))))' → logprob: -9.725200653076172
    10. '())))
' → logprob: -10.225200653076172

Token 57: ')

' (ID: 1029)
  Prédit: '))'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '))' → logprob: -0.12696266174316406
    2. ')' → logprob: -2.126962661743164
    3. ')))' → logprob: -10.876962661743164
    4. '))
' → logprob: -11.876962661743164
    5. ')
' → logprob: -12.501962661743164
    6. ' ))' → logprob: -12.751962661743164
    7. ' )' → logprob: -14.251962661743164
    8. '()))' → logprob: -14.626962661743164
    9. '   ' → logprob: -15.001962661743164
    10. '()' → logprob: -15.876962661743164

Token 58: '#' (ID: 2)
  Prédit: '['
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '[' → logprob: -1.1624051332473755
    2. '#' → logprob: -1.2874051332473755
    3. '
' → logprob: -1.6624051332473755
    4. '<|end|>' → logprob: -2.037405014038086
    5. '\n' → logprob: -3.787405014038086
    6. '```' → logprob: -5.037405014038086
    7. 'a' → logprob: -5.162405014038086
    8. 'n' → logprob: -5.287405014038086
    9. '\' → logprob: -5.537405014038086
    10. ')' → logprob: -5.662405014038086

Token 59: ' utilisé' (ID: 53138)
  Prédit: '#'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '#' → logprob: -0.2420443594455719
    2. ' #' → logprob: -2.867044448852539
    3. 's' → logprob: -3.367044448852539
    4. ' ' → logprob: -3.367044448852539
    5. 'c' → logprob: -3.992044448852539
    6. 'a' → logprob: -4.367044448852539
    7. 'b' → logprob: -4.492044448852539
    8. 'd' → logprob: -4.867044448852539
    9. 'A' → logprob: -4.992044448852539
    10. 'r' → logprob: -5.742044448852539

Token 60: ' pour' (ID: 1930)
  Prédit: ' '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' ' → logprob: -1.007197380065918
    2. '_' → logprob: -1.882197380065918
    3. 's' → logprob: -2.132197380065918
    4. 'c' → logprob: -2.632197380065918
    5. '[' → logprob: -3.257197380065918
    6. 'a' → logprob: -3.382197380065918
    7. '(' → logprob: -3.632197380065918
    8. '[]' → logprob: -4.132197380065918
    9. 'for' → logprob: -4.257197380065918
    10. ' =' → logprob: -4.257197380065918

Token 61: ' tracker' (ID: 53762)
  Prédit: ' calcul'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' calcul' → logprob: -1.484693169593811
    2. 'calcul' → logprob: -1.609693169593811
    3. ' le' → logprob: -2.4846930503845215
    4. 'i' → logprob: -2.7346930503845215
    5. ' la' → logprob: -2.8596930503845215
    6. ' i' → logprob: -3.2346930503845215
    7. ' déterminer' → logprob: -3.4846930503845215
    8. ' choisir' → logprob: -3.6096930503845215
    9. ' stock' → logprob: -3.7346930503845215
    10. 'min' → logprob: -3.8596930503845215

Token 62: ' les' (ID: 1341)
  Prédit: 'used'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'used' → logprob: -0.5090932846069336
    2. 'min' → logprob: -3.0090932846069336
    3. 'selected' → logprob: -3.0090932846069336
    4. 'les' → logprob: -3.3840932846069336
    5. 'chosen' → logprob: -3.3840932846069336
    6. 'ac' → logprob: -3.5090932846069336
    7. 'cost' → logprob: -3.5090932846069336
    8. 'c' → logprob: -3.8840932846069336
    9. ' used' → logprob: -4.509093284606934
    10. 'comb' → logprob: -4.509093284606934

Token 63: ' '' (ID: 461)
  Prédit: 'liv'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'liv' → logprob: -0.9075145125389099
    2. ' coûts' → logprob: -2.5325145721435547
    3. 'me' → logprob: -2.9075145721435547
    4. 'co' → logprob: -3.2825145721435547
    5. 'prix' → logprob: -3.2825145721435547
    6. ' livres' → logprob: -3.4075145721435547
    7. 's' → logprob: -3.5325145721435547
    8. 'indices' → logprob: -3.6575145721435547
    9. 'comb' → logprob: -3.6575145721435547
    10. 'scores' → logprob: -3.9075145721435547

Token 64: 'liv' (ID: 30008)
  Prédit: 'comb'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'comb' → logprob: -1.1155247688293457
    2. 'me' → logprob: -1.9905247688293457
    3. 'liv' → logprob: -2.7405247688293457
    4. 'indices' → logprob: -2.9905247688293457
    5. 'bon' → logprob: -3.3655247688293457
    6. 'bit' → logprob: -3.3655247688293457
    7. 'prix' → logprob: -3.4905247688293457
    8. 's' → logprob: -3.6155247688293457
    9. 'obj' → logprob: -3.8655247688293457
    10. 'sets' → logprob: -3.9905247688293457

Token 65: 'res' (ID: 430)
  Prédit: 'rais'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'rais' → logprob: -0.32191821932792664
    2. 'res' → logprob: -1.821918249130249
    3. 'r' → logprob: -2.571918249130249
    4. 'raison' → logprob: -4.19691801071167
    5. 'ra' → logprob: -4.94691801071167
    6. 'reurs' → logprob: -5.94691801071167
    7. '``' → logprob: -6.57191801071167
    8. 're' → logprob: -6.88441801071167
    9. '```' → logprob: -6.94691801071167
    10. 'rés' → logprob: -6.94691801071167

Token 66: ''' (ID: 6)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ')' → logprob: -0.12729795277118683
    2. 's' → logprob: -2.877297878265381
    3. ' )' → logprob: -3.502297878265381
    4. ']' → logprob: -4.752297878265381
    5. '[]' → logprob: -5.252297878265381
    6. '[' → logprob: -5.627297878265381
    7. 'visited' → logprob: -5.752297878265381
    8. '_' → logprob: -6.127297878265381
    9. ',' → logprob: -6.252297878265381
    10. 'used' → logprob: -6.502297878265381

Token 67: ' (' (ID: 350)
  Prédit: 'used'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'used' → logprob: -0.5049343705177307
    2. 'b' → logprob: -2.004934310913086
    3. 'visited' → logprob: -3.129934310913086
    4. 'selected' → logprob: -3.379934310913086
    5. 'ac' → logprob: -3.504934310913086
    6. 'p' → logprob: -3.879934310913086
    7. 'chosen' → logprob: -4.004934310913086
    8. 'dp' → logprob: -4.254934310913086
    9. 's' → logprob: -4.379934310913086
    10. 'books' → logprob: -4.754934310913086

Token 68: '?)
' (ID: 90794)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ')' → logprob: -0.234820157289505
    2. 'cho' → logprob: -2.4848201274871826
    3. 'ac' → logprob: -3.8598201274871826
    4. '))' → logprob: -4.359820365905762
    5. 'poss' → logprob: -4.609820365905762
    6. 'achet' → logprob: -4.734820365905762
    7. 'c' → logprob: -5.109820365905762
    8. 'ach' → logprob: -5.109820365905762
    9. 'ache' → logprob: -5.359820365905762
    10. 'dé' → logprob: -5.734820365905762

Token 69: 'cho' (ID: 2153)
  Prédit: 'min'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'min' → logprob: -1.1552143096923828
    2. 'used' → logprob: -1.2802143096923828
    3. 'dp' → logprob: -1.7802143096923828
    4. 'best' → logprob: -1.9052143096923828
    5. 'visited' → logprob: -3.655214309692383
    6. 'selected' → logprob: -4.280214309692383
    7. 'b' → logprob: -4.530214309692383
    8. 'ans' → logprob: -5.280214309692383
    9. 'chosen' → logprob: -5.405214309692383
    10. 'answer' → logprob: -6.155214309692383

Token 70: 'ix' (ID: 1128)
  Prédit: 'sen'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'sen' → logprob: -0.02610880509018898
    2. 'se' → logprob: -3.776108741760254
    3. 'osen' → logprob: -7.026108741760254
    4. 's' → logprob: -7.151108741760254
    5. 'sis' → logprob: -8.026108741760254
    6. 'ken' → logprob: -9.151108741760254
    7. 'ice' → logprob: -9.401108741760254
    8. 'sed' → logprob: -9.401108741760254
    9. 'si' → logprob: -9.526108741760254
    10. 'ix' → logprob: -9.526108741760254

Token 71: ' =' (ID: 314)
  Prédit: '='
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '=' → logprob: -0.24632422626018524
    2. ' =' → logprob: -1.6213241815567017
    3. '=[]' → logprob: -3.996324300765991
    4. 's' → logprob: -6.246324062347412
    5. '_' → logprob: -9.37132453918457
    6. '[]' → logprob: -9.74632453918457
    7. '[:]' → logprob: -9.87132453918457
    8. '=[]
' → logprob: -10.37132453918457
    9. '_=' → logprob: -10.62132453918457
    10. '<|end|>' → logprob: -10.99632453918457

Token 72: ' [' (ID: 723)
  Prédit: '[]'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '[]' → logprob: -0.5236876010894775
    2. '[' → logprob: -0.8986876010894775
    3. '[]
' → logprob: -8.773687362670898
    4. 'set' → logprob: -9.398687362670898
    5. '[-' → logprob: -9.398687362670898
    6. ' []' → logprob: -9.648687362670898
    7. '[]}' → logprob: -9.898687362670898
    8. '0' → logprob: -10.148687362670898
    9. '[]

' → logprob: -11.023687362670898
    10. ' [' → logprob: -11.023687362670898

Token 73: '0' (ID: 15)
  Prédit: '0'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '0' → logprob: -0.3254123032093048
    2. 'False' → logprob: -1.3254122734069824
    3. '-' → logprob: -5.075412273406982
    4. ']' → logprob: -5.325412273406982
    5. ' False' → logprob: -7.325412273406982
    6. ' ]' → logprob: -9.45041275024414
    7. ' ' → logprob: -9.82541275024414
    8. '   ' → logprob: -10.70041275024414
    9. 'True' → logprob: -10.70041275024414
    10. ' -' → logprob: -10.70041275024414

Token 74: ' for' (ID: 395)
  Prédit: ']'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ']' → logprob: -0.0014147580368444324
    2. ']*' → logprob: -7.001414775848389
    3. ' ]' → logprob: -7.626414775848389
    4. ']*(' → logprob: -11.50141429901123
    5. ' for' → logprob: -12.75141429901123
    6. ')' → logprob: -13.87641429901123
    7. ',' → logprob: -13.87641429901123
    8. '*' → logprob: -15.12641429901123
    9. 'for' → logprob: -15.37641429901123
    10. ']+' → logprob: -16.001415252685547

Token 75: ' _' (ID: 1175)
  Prédit: '_'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_' → logprob: -0.04226193204522133
    2. ' _' → logprob: -3.792261838912964
    3. '_i' → logprob: -4.917262077331543
    4. ' i' → logprob: -5.292262077331543
    5. 'i' → logprob: -5.292262077331543
    6. '_range' → logprob: -7.167262077331543
    7. ' range' → logprob: -7.792262077331543
    8. 'range' → logprob: -9.042262077331543
    9. ' ' → logprob: -10.667262077331543
    10. ' in' → logprob: -10.667262077331543

Token 76: ' in' (ID: 306)
  Prédit: 'in'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'in' → logprob: -0.058170974254608154
    2. ' in' → logprob: -3.058171033859253
    3. 'range' → logprob: -4.683170795440674
    4. 'i' → logprob: -8.683171272277832
    5. ' range' → logprob: -9.808171272277832
    6. ' ' → logprob: -10.683171272277832
    7. '_' → logprob: -11.683171272277832
    8. 'n' → logprob: -11.808171272277832
    9. '  ' → logprob: -11.933171272277832
    10. 'c' → logprob: -12.433171272277832

Token 77: ' range' (ID: 3352)
  Prédit: 'range'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'range' → logprob: -0.16029368340969086
    2. ' range' → logprob: -1.910293698310852
    3. 'c' → logprob: -10.035293579101562
    4. ' c' → logprob: -11.410293579101562
    5. ' ' → logprob: -12.160293579101562
    6. 'rang' → logprob: -12.785293579101562
    7. '(range' → logprob: -13.660293579101562
    8. 'r' → logprob: -13.660293579101562
    9. '	range' → logprob: -13.660293579101562
    10. '  ' → logprob: -14.035293579101562

Token 78: '(n' (ID: 2406)
  Prédit: '(n'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(n' → logprob: -0.011052416637539864
    2. '(m' → logprob: -4.63605260848999
    3. 'n' → logprob: -7.13605260848999
    4. 'm' → logprob: -8.261052131652832
    5. '(' → logprob: -8.386052131652832
    6. ' n' → logprob: -12.136052131652832
    7. ')n' → logprob: -13.011052131652832
    8. ' (' → logprob: -13.136052131652832
    9. ')' → logprob: -14.136052131652832
    10. '(
' → logprob: -14.261052131652832

Token 79: ')]

' (ID: 56882)
  Prédit: ')]'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ')]' → logprob: -9.968312951968983e-06
    2. ']' → logprob: -12.500009536743164
    3. ')' → logprob: -12.875009536743164
    4. ' )' → logprob: -13.375009536743164
    5. '])' → logprob: -14.000009536743164
    6. ')]
' → logprob: -14.875009536743164
    7. '])]' → logprob: -14.875009536743164
    8. ')])' → logprob: -15.375009536743164
    9. ' ]' → logprob: -16.250009536743164
    10. ')],' → logprob: -16.750009536743164

Token 80: 'def' (ID: 1314)
  Prédit: ''
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False

Token 81: ' couverture' (ID: 97460)
  Prédit: ' solve'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' solve' → logprob: -0.7353470325469971
    2. ' calcul' → logprob: -1.985347032546997
    3. ' calc' → logprob: -2.860347032546997
    4. ' calculate' → logprob: -2.860347032546997
    5. ' solution' → logprob: -3.360347032546997
    6. ' ' → logprob: -3.360347032546997
    7. ' min' → logprob: -3.485347032546997
    8. ' cost' → logprob: -3.610347032546997
    9. ' find' → logprob: -3.735347032546997
    10. ' dfs' → logprob: -4.610346794128418

Token 82: '(' (ID: 7)
  Prédit: '('
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(' → logprob: -0.26283371448516846
    2. '_' → logprob: -2.387833595275879
    3. '(n' → logprob: -3.137833595275879
    4. '():' → logprob: -3.387833595275879
    5. '(x' → logprob: -3.887833595275879
    6. '(i' → logprob: -4.762833595275879
    7. '_min' → logprob: -5.137833595275879
    8. '_des' → logprob: -5.387833595275879
    9. '(l' → logprob: -5.762833595275879
    10. '()' → logprob: -6.262833595275879

Token 83: 'cho' (ID: 2153)
  Prédit: 'cho'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'cho' → logprob: -0.10400903970003128
    2. 'idx' → logprob: -4.22900915145874
    3. '):' → logprob: -4.47900915145874
    4. 'i' → logprob: -4.60400915145874
    5. 'indices' → logprob: -5.22900915145874
    6. 'c' → logprob: -5.35400915145874
    7. '):
' → logprob: -5.35400915145874
    8. 's' → logprob: -5.47900915145874
    9. 'selected' → logprob: -5.72900915145874
    10. 'liv' → logprob: -5.72900915145874

Token 84: 'ix' (ID: 1128)
  Prédit: 'ix'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'ix' → logprob: -0.0005765048554167151
    2. 'i' → logprob: -7.625576496124268
    3. 'x' → logprob: -10.625576972961426
    4. 'is' → logprob: -12.000576972961426
    5. ' ix' → logprob: -12.000576972961426
    6. 'ic' → logprob: -12.250576972961426
    7. ')' → logprob: -12.250576972961426
    8. '1' → logprob: -12.375576972961426
    9. '(' → logprob: -12.500576972961426
    10. 'isi' → logprob: -13.000576972961426

Token 85: '_l' (ID: 1478)
  Prédit: '):'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '):' → logprob: -0.012997510842978954
    2. ')' → logprob: -4.512997627258301
    3. ' ):' → logprob: -6.637997627258301
    4. ',' → logprob: -7.637997627258301
    5. '):
' → logprob: -9.1379976272583
    6. ' )' → logprob: -11.0129976272583
    7. ':' → logprob: -12.2629976272583
    8. ')):' → logprob: -12.3879976272583
    9. '[]):' → logprob: -12.7629976272583
    10. ' ,' → logprob: -12.7629976272583

Token 86: 'iste' (ID: 4872)
  Prédit: 'ist'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'ist' → logprob: -0.23734940588474274
    2. 'iste' → logprob: -2.237349510192871
    3. 'st' → logprob: -3.112349510192871
    4. 'iv' → logprob: -4.362349510192871
    5. 'istes' → logprob: -4.362349510192871
    6. ')' → logprob: -4.987349510192871
    7. 'ists' → logprob: -4.987349510192871
    8. '):
' → logprob: -5.987349510192871
    9. '):' → logprob: -6.362349510192871
    10. 'is' → logprob: -6.362349510192871

Token 87: '):
' (ID: 1883)
  Prédit: '):'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '):' → logprob: -0.003962043672800064
    2. ')' → logprob: -5.75396203994751
    3. ' ):' → logprob: -7.50396203994751
    4. ',' → logprob: -8.503962516784668
    5. '):
' → logprob: -11.128962516784668
    6. ' )' → logprob: -12.503962516784668
    7. ' ' → logprob: -13.378962516784668
    8. ')):' → logprob: -13.378962516784668
    9. '[]):' → logprob: -13.628962516784668
    10. ' ,' → logprob: -13.753962516784668

Token 88: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.526292622089386
    2. ':' → logprob: -1.6512925624847412
    3. ' :' → logprob: -2.026292562484741
    4. '):' → logprob: -3.776292562484741
    5. ' ' → logprob: -4.15129280090332
    6. '(' → logprob: -4.15129280090332
    7. ')' → logprob: -4.15129280090332
    8. '  ' → logprob: -5.65129280090332
    9. '    ' → logprob: -5.77629280090332
    10. ' (' → logprob: -6.65129280090332

Token 89: ' res' (ID: 694)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.9856080412864685
    2. ' total' → logprob: -1.2356081008911133
    3. ' return' → logprob: -2.2356081008911133
    4. ' ' → logprob: -3.6106081008911133
    5. 'total' → logprob: -3.8606081008911133
    6. ' res' → logprob: -3.8606081008911133
    7. ' somme' → logprob: -3.8606081008911133
    8. 'c' → logprob: -4.485608100891113
    9. ' couverture' → logprob: -4.485608100891113
    10. ' coverage' → logprob: -4.860608100891113

Token 90: ' =' (ID: 314)
  Prédit: 'ult'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'ult' → logprob: -0.40349897742271423
    2. ' =' → logprob: -1.4034990072250366
    3. 'ultat' → logprob: -2.653498888015747
    4. '=' → logprob: -4.278499126434326
    5. '   ' → logprob: -7.028499126434326
    6. 'u' → logprob: -8.278498649597168
    7. 'ults' → logprob: -8.278498649597168
    8. 'ut' → logprob: -8.653498649597168
    9. 'ul' → logprob: -9.028498649597168
    10. 's' → logprob: -9.528498649597168

Token 91: ' [' (ID: 723)
  Prédit: '0'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '0' → logprob: -0.01709839329123497
    2. '[' → logprob: -4.392098426818848
    3. ' ' → logprob: -6.517098426818848
    4. 'set' → logprob: -6.892098426818848
    5. '[x' → logprob: -7.142098426818848
    6. 'x' → logprob: -8.017098426818848
    7. ' [' → logprob: -8.767098426818848
    8. 'sum' → logprob: -8.767098426818848
    9. 'float' → logprob: -9.017098426818848
    10. '[int' → logprob: -9.017098426818848

Token 92: '0' (ID: 15)
  Prédit: '0'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '0' → logprob: -0.0018234545132145286
    2. 'float' → logprob: -7.251823425292969
    3. 'False' → logprob: -7.376823425292969
    4. 'x' → logprob: -8.251823425292969
    5. 'sum' → logprob: -9.876823425292969
    6. '100' → logprob: -10.251823425292969
    7. 'm' → logprob: -10.501823425292969
    8. '1' → logprob: -10.751823425292969
    9. '[' → logprob: -11.001823425292969
    10. 'max' → logprob: -11.251823425292969

Token 93: ']*' (ID: 18579)
  Prédit: ']'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ']' → logprob: -0.07135835289955139
    2. ']*' → logprob: -2.6963584423065186
    3. ' for' → logprob: -7.3213582038879395
    4. ' ]' → logprob: -7.8213582038879395
    5. 'for' → logprob: -9.071358680725098
    6. ',' → logprob: -9.446358680725098
    7. ']+' → logprob: -9.571358680725098
    8. ']*(' → logprob: -9.821358680725098
    9. ')' → logprob: -10.696358680725098
    10. '   ' → logprob: -11.946358680725098

Token 94: 'm' (ID: 76)
  Prédit: 'm'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'm' → logprob: -1.652451464906335e-05
    2. 'x' → logprob: -11.750016212463379
    3. ' m' → logprob: -12.125016212463379
    4. '  ' → logprob: -14.250016212463379
    5. ' ' → logprob: -14.500016212463379
    6. '(m' → logprob: -14.625016212463379
    7. '   ' → logprob: -14.750016212463379
    8. '    ' → logprob: -15.375016212463379
    9. '	m' → logprob: -15.375016212463379
    10. '```' → logprob: -15.625016212463379

Token 95: '
' (ID: 198)
  Prédit: '
'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '
' → logprob: -0.24448461830615997
    2. '<|end|>' → logprob: -1.7444846630096436
    3. ' for' → logprob: -3.9944846630096436
    4. ' 
' → logprob: -4.4944844245910645
    5. 'for' → logprob: -5.7444844245910645
    6. ' ' → logprob: -6.1194844245910645
    7. '   ' → logprob: -6.2444844245910645
    8. '<|end|>' → logprob: -6.4944844245910645
    9. '  
' → logprob: -6.6194844245910645
    10. '	for' → logprob: -6.9944844245910645

Token 96: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.1265561282634735
    2. '
' → logprob: -2.251556158065796
    3. '    
' → logprob: -5.251555919647217
    4. ' for' → logprob: -5.376555919647217
    5. '<|end|>' → logprob: -6.251555919647217
    6. 'for' → logprob: -7.376555919647217
    7. ' 
' → logprob: -7.751555919647217
    8. '  
' → logprob: -8.251556396484375
    9. '   
' → logprob: -8.626556396484375
    10. '  ' → logprob: -9.251556396484375

Token 97: ' for' (ID: 395)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.15326644480228424
    2. 'for' (adapté à ' for') → logprob: -2.153266429901123
    3. ' for' → logprob: -3.653266429901123
    4. '	for' → logprob: -10.403266906738281
    5. '    
' → logprob: -11.028266906738281
    6. '  ' → logprob: -11.153266906738281
    7. ' ' → logprob: -11.403266906738281
    8. '
' → logprob: -11.528266906738281
    9. '<|end|>' → logprob: -12.278266906738281
    10. '  
' → logprob: -14.653266906738281

Token 98: ' i' (ID: 575)
  Prédit: ' i'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' i' → logprob: -0.16801220178604126
    2. 'i' → logprob: -1.9180121421813965
    3. ' j' → logprob: -5.4180121421813965
    4. 'j' → logprob: -6.7930121421813965
    5. ' idx' → logprob: -7.0430121421813965
    6. 'ii' → logprob: -7.1680121421813965
    7. ' ii' → logprob: -8.543012619018555
    8. 'idx' → logprob: -9.168012619018555
    9. 'iiii' → logprob: -9.793012619018555
    10. ' range' → logprob: -9.918012619018555

Token 99: ' in' (ID: 306)
  Prédit: ' in'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' in' → logprob: -0.02423745207488537
    2. 'in' → logprob: -4.149237632751465
    3. ',' → logprob: -5.024237632751465
    4. 'range' → logprob: -7.024237632751465
    5. ' range' → logprob: -8.024237632751465
    6. 'n' → logprob: -8.274237632751465
    7. ' ' → logprob: -9.899237632751465
    8. '   ' → logprob: -11.399237632751465
    9. 'nd' → logprob: -11.774237632751465
    10. '  ' → logprob: -11.774237632751465

Token 100: ' range' (ID: 3352)
  Prédit: 'range'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'range' → logprob: -0.17978665232658386
    2. ' range' → logprob: -1.8047866821289062
    3. 'ange' → logprob: -10.554786682128906
    4. ' ' → logprob: -12.804786682128906
    5. '(range' → logprob: -13.179786682128906
    6. '   ' → logprob: -13.179786682128906
    7. 'rang' → logprob: -13.304786682128906
    8. '	range' → logprob: -13.304786682128906
    9. ')' → logprob: -14.179786682128906
    10. '  ' → logprob: -14.179786682128906

Token 101: '(n' (ID: 2406)
  Prédit: '(n'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(n' → logprob: -0.0021413397043943405
    2. 'n' → logprob: -6.25214147567749
    3. '(len' → logprob: -8.627140998840332
    4. '(' → logprob: -10.627140998840332
    5. ' (' → logprob: -12.377140998840332
    6. 'len' → logprob: -13.002140998840332
    7. ' n' → logprob: -13.002140998840332
    8. '(
' → logprob: -15.127140998840332
    9. '	n' → logprob: -16.12714195251465
    10. '   ' → logprob: -16.25214195251465

Token 102: '):
' (ID: 1883)
  Prédit: '):'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '):' → logprob: -0.11313044279813766
    2. '):
' → logprob: -2.2381303310394287
    3. ')' → logprob: -8.488130569458008
    4. ' ):' → logprob: -9.988130569458008
    5. '   ' → logprob: -10.738130569458008
    6. '):
' → logprob: -11.613130569458008
    7. '       ' → logprob: -11.738130569458008
    8. ' ):
' → logprob: -11.863130569458008
    9. ':' → logprob: -11.988130569458008
    10. '):

' → logprob: -13.613130569458008

Token 103: '       ' (ID: 309)
  Prédit: '       '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '       ' → logprob: -0.20494656264781952
    2. '   ' → logprob: -2.329946517944336
    3. '<|end|>' → logprob: -2.954946517944336
    4. ':' → logprob: -3.704946517944336
    5. ' if' → logprob: -5.204946517944336
    6. '
' → logprob: -6.079946517944336
    7. ',' → logprob: -7.579946517944336
    8. ' :' → logprob: -7.704946517944336
    9. '<|end|>' → logprob: -7.829946517944336
    10. ' ' → logprob: -7.954946517944336

Token 104: ' if' (ID: 538)
  Prédit: 'if'
  Correct (stricte): False
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'if' (adapté à ' if') → logprob: -0.4641427993774414
    2. '   ' → logprob: -1.5891427993774414
    3. '       ' → logprob: -2.4641427993774414
    4. ' if' → logprob: -2.5891427993774414
    5. 'for' → logprob: -5.089142799377441
    6. ' for' → logprob: -7.214142799377441
    7. '	if' → logprob: -9.089142799377441
    8. ' ' → logprob: -10.464142799377441
    9. '  ' → logprob: -11.839142799377441
    10. '	   ' → logprob: -12.964142799377441

Token 105: ' choix' (ID: 28642)
  Prédit: ' choix'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' choix' → logprob: -0.31386321783065796
    2. 'cho' → logprob: -1.3138632774353027
    3. '   ' → logprob: -8.438862800598145
    4. ' ' → logprob: -8.813862800598145
    5. ' cho' → logprob: -9.063862800598145
    6. ' chois' → logprob: -9.563862800598145
    7. '    ' → logprob: -11.438862800598145
    8. '  ' → logprob: -11.813862800598145
    9. ' choisi' → logprob: -11.813862800598145
    10. 'choice' → logprob: -11.938862800598145

Token 106: '[i' (ID: 1768)
  Prédit: '_l'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_l' → logprob: -0.01931232027709484
    2. '[i' → logprob: -4.019312381744385
    3. '[' → logprob: -6.894312381744385
    4. '[l' → logprob: -9.519311904907227
    5. '[_' → logprob: -10.394311904907227
    6. '```' → logprob: -11.894311904907227
    7. '_' → logprob: -12.144311904907227
    8. 'l' → logprob: -12.394311904907227
    9. '_i' → logprob: -12.644311904907227
    10. ' [' → logprob: -12.644311904907227

Token 107: ']:
' (ID: 22152)
  Prédit: ']'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ']' → logprob: -0.6773375272750854
    2. ']==' → logprob: -0.8023375272750854
    3. ']:' → logprob: -3.177337646484375
    4. ']:
' → logprob: -6.802337646484375
    5. ']):' → logprob: -8.552337646484375
    6. ' ]' → logprob: -8.552337646484375
    7. '==' → logprob: -9.302337646484375
    8. ']=' → logprob: -9.927337646484375
    9. '1' → logprob: -10.052337646484375
    10. '']==' → logprob: -10.052337646484375

Token 108: '           ' (ID: 352)
  Prédit: '       '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '       ' → logprob: -0.039119426161050797
    2. ' for' → logprob: -3.6641194820404053
    3. '           ' → logprob: -4.664119243621826
    4. '   ' → logprob: -7.039119243621826
    5. '	   ' → logprob: -7.414119243621826
    6. 'for' → logprob: -7.914119243621826
    7. '	       ' → logprob: -7.914119243621826
    8. ',' → logprob: -8.664119720458984
    9. '	for' → logprob: -8.914119720458984
    10. '
' → logprob: -9.164119720458984

Token 109: ' for' (ID: 395)
  Prédit: 'for'
  Correct (stricte): False
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'for' (adapté à ' for') → logprob: -0.508084237575531
    2. ' for' → logprob: -1.1330842971801758
    3. '       ' → logprob: -2.633084297180176
    4. '   ' → logprob: -5.508084297180176
    5. '           ' → logprob: -8.508084297180176
    6. '	for' → logprob: -8.758084297180176
    7. ' ' → logprob: -10.883084297180176
    8. 'res' → logprob: -12.258084297180176
    9. '  ' → logprob: -12.508084297180176
    10. '     ' → logprob: -12.633084297180176

Token 110: ' j' (ID: 441)
  Prédit: 'j'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'j' → logprob: -0.02326679229736328
    2. ' j' → logprob: -3.7732667922973633
    3. 'k' → logprob: -11.773266792297363
    4. 'jj' → logprob: -12.148266792297363
    5. 'range' → logprob: -12.898266792297363
    6. ' ' → logprob: -14.023266792297363
    7. ' range' → logprob: -14.273266792297363
    8. '   ' → logprob: -14.273266792297363
    9. '	j' → logprob: -14.773266792297363
    10. '```' → logprob: -14.898266792297363

Token 111: ' in' (ID: 306)
  Prédit: ' in'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' in' → logprob: -0.00659529073163867
    2. ' range' → logprob: -6.131595134735107
    3. 'in' → logprob: -6.131595134735107
    4. 'range' → logprob: -6.131595134735107
    5. '(range' → logprob: -10.381595611572266
    6. '   ' → logprob: -11.506595611572266
    7. ' ' → logprob: -12.256595611572266
    8. '(' → logprob: -13.006595611572266
    9. '<|end|>' → logprob: -13.506595611572266
    10. 'm' → logprob: -14.006595611572266

Token 112: ' range' (ID: 3352)
  Prédit: 'range'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'range' → logprob: -0.023248042911291122
    2. ' range' → logprob: -3.7732479572296143
    3. '(range' → logprob: -14.148247718811035
    4. '	range' → logprob: -14.148247718811035
    5. '   ' → logprob: -14.648247718811035
    6. ' ' → logprob: -15.023247718811035
    7. 'rang' → logprob: -16.27324867248535
    8. '
' → logprob: -16.27324867248535
    9. '  ' → logprob: -16.64824867248535
    10. 'ange' → logprob: -16.89824867248535

Token 113: '(m' (ID: 2145)
  Prédit: '(m'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(m' → logprob: -0.00036049127811565995
    2. '(range' → logprob: -8.750360488891602
    3. 'range' → logprob: -8.875360488891602
    4. 'm' → logprob: -9.750360488891602
    5. ' range' → logprob: -12.875360488891602
    6. '(' → logprob: -14.125360488891602
    7. '(len' → logprob: -15.625360488891602
    8. '   ' → logprob: -16.0003604888916
    9. '	m' → logprob: -16.6253604888916
    10. '(M' → logprob: -17.0003604888916

Token 114: '):
' (ID: 1883)
  Prédit: '):'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '):' → logprob: -0.07905656844377518
    2. '):
' → logprob: -2.57905650138855
    3. ')' → logprob: -10.079056739807129
    4. ':' → logprob: -10.079056739807129
    5. '):
' → logprob: -10.954056739807129
    6. '):

' → logprob: -11.329056739807129
    7. '       ' → logprob: -11.329056739807129
    8. '           ' → logprob: -11.329056739807129
    9. ']:' → logprob: -12.204056739807129
    10. ' ):' → logprob: -12.454056739807129

Token 115: '               ' (ID: 506)
  Prédit: '               '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '               ' → logprob: -0.0023268868681043386
    2. ' res' → logprob: -6.627326965332031
    3. 'res' → logprob: -7.127326965332031
    4. ':' → logprob: -10.002326965332031
    5. '                       ' → logprob: -10.627326965332031
    6. '                
' → logprob: -10.627326965332031
    7. '              ' → logprob: -10.752326965332031
    8. ' :' → logprob: -10.877326965332031
    9. '           ' → logprob: -11.127326965332031
    10. '                   ' → logprob: -11.752326965332031

Token 116: ' res' (ID: 694)
  Prédit: 'res'
  Correct (stricte): False
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'res' (adapté à ' res') → logprob: -0.20727376639842987
    2. ' res' → logprob: -1.7072737216949463
    3. '               ' → logprob: -5.332273960113525
    4. '                   ' → logprob: -7.457273960113525
    5. '           ' → logprob: -8.457273483276367
    6. '	res' → logprob: -8.957273483276367
    7. '                       ' → logprob: -10.332273483276367
    8. '   ' → logprob: -11.332273483276367
    9. '       ' → logprob: -11.457273483276367
    10. ',res' → logprob: -11.832273483276367

Token 117: '[j' (ID: 7895)
  Prédit: '[j'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '[j' → logprob: -0.00017159747949335724
    2. '][' → logprob: -9.750171661376953
    3. '[' → logprob: -9.875171661376953
    4. ']' → logprob: -10.625171661376953
    5. ']+=' → logprob: -11.375171661376953
    6. ' [' → logprob: -11.625171661376953
    7. ' +=' → logprob: -11.750171661376953
    8. '[i' → logprob: -12.750171661376953
    9. '+=' → logprob: -13.500171661376953
    10. '           ' → logprob: -13.875171661376953

Token 118: ']' (ID: 60)
  Prédit: ']+='
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ']+=' → logprob: -0.5919755101203918
    2. ']' → logprob: -0.8419755101203918
    3. '+=' → logprob: -4.841975688934326
    4. ' +=' → logprob: -4.966975688934326
    5. ' ]' → logprob: -7.091975688934326
    6. ')' → logprob: -8.716975212097168
    7. '+' → logprob: -10.591975212097168
    8. ']+' → logprob: -11.216975212097168
    9. '>' → logprob: -11.716975212097168
    10. ']=' → logprob: -13.216975212097168

Token 119: ' +=' (ID: 2757)
  Prédit: '+='
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '+=' → logprob: -0.02976194955408573
    2. ' +=' → logprob: -3.529762029647827
    3. '=' → logprob: -12.279762268066406
    4. ']+=' → logprob: -12.279762268066406
    5. '+' → logprob: -13.154762268066406
    6. ' =' → logprob: -16.154762268066406
    7. '+=(' → logprob: -16.404762268066406
    8. '>=' → logprob: -18.654762268066406
    9. '    ' → logprob: -18.654762268066406
    10. ' +' → logprob: -18.779762268066406

Token 120: ' c' (ID: 274)
  Prédit: 'c'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'c' → logprob: -7.696077227592468e-05
    2. ' c' → logprob: -9.500077247619629
    3. '   ' → logprob: -13.375077247619629
    4. '	c' → logprob: -14.875077247619629
    5. 'ccc' → logprob: -17.000076293945312
    6. '  ' → logprob: -17.375076293945312
    7. 'cccc' → logprob: -17.500076293945312
    8. ')c' → logprob: -18.000076293945312
    9. 'cc' → logprob: -18.500076293945312
    10. ' ' → logprob: -18.750076293945312

Token 121: '[i' (ID: 1768)
  Prédit: '[i'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '[i' → logprob: -5.3358446166384965e-05
    2. '[' → logprob: -9.875053405761719
    3. 'i' → logprob: -13.750053405761719
    4. '[j' → logprob: -15.125053405761719
    5. '[ii' → logprob: -15.625053405761719
    6. ' [' → logprob: -16.37505340576172
    7. '[
' → logprob: -16.87505340576172
    8. '[I' → logprob: -17.25005340576172
    9. '[c' → logprob: -17.75005340576172
    10. '[n' → logprob: -17.75005340576172

Token 122: '][' (ID: 2696)
  Prédit: ']['
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '][' → logprob: -0.00027587503427639604
    2. '[j' → logprob: -8.500275611877441
    3. ']' → logprob: -10.375275611877441
    4. ' ][' → logprob: -10.375275611877441
    5. 'j' → logprob: -12.250275611877441
    6. '[' → logprob: -13.250275611877441
    7. '"][' → logprob: -13.625275611877441
    8. ''][' → logprob: -14.000275611877441
    9. '[i' → logprob: -15.000275611877441
    10. '```' → logprob: -15.750275611877441

Token 123: 'j' (ID: 73)
  Prédit: 'j'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'j' → logprob: -1.9027791495318525e-05
    2. ' j' → logprob: -10.875019073486328
    3. '	j' → logprob: -17.375019073486328
    4. '   ' → logprob: -17.625019073486328
    5. '[j' → logprob: -18.125019073486328
    6. '
' → logprob: -18.125019073486328
    7. '```' → logprob: -19.250019073486328
    8. ':j' → logprob: -19.625019073486328
    9. '<|end|>' → logprob: -19.750019073486328
    10. ' ' → logprob: -19.750019073486328

Token 124: '+' (ID: 10)
  Prédit: ']'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ']' → logprob: -0.0006426189211197197
    2. ' ]' → logprob: -7.625642776489258
    3. ']
' → logprob: -9.125642776489258
    4. '<|end|>' → logprob: -10.375642776489258
    5. ')]' → logprob: -12.500642776489258
    6. '[j' → logprob: -12.750642776489258
    7. ')' → logprob: -13.250642776489258
    8. '])' → logprob: -13.625642776489258
    9. ']

' → logprob: -13.750642776489258
    10. ']>' → logprob: -14.000642776489258

Token 125: '1' (ID: 16)
  Prédit: '1'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '1' → logprob: -0.017616458237171173
    2. '0' → logprob: -4.142616271972656
    3. ' ' → logprob: -6.767616271972656
    4. ']' → logprob: -8.517616271972656
    5. 'j' → logprob: -8.642616271972656
    6. '2' → logprob: -10.392616271972656
    7. ' j' → logprob: -11.892616271972656
    8. 'i' → logprob: -13.330116271972656
    9. '+' → logprob: -13.455116271972656
    10. '   ' → logprob: -13.892616271972656

Token 126: ']' (ID: 60)
  Prédit: ']'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ']' → logprob: -0.0008703675703145564
    2. ' ]' → logprob: -7.125870227813721
    3. '<|end|>' → logprob: -10.625870704650879
    4. '])' → logprob: -11.000870704650879
    5. ']
' → logprob: -11.375870704650879
    6. ')]' → logprob: -12.500870704650879
    7. ')' → logprob: -12.750870704650879
    8. '-' → logprob: -13.875870704650879
    9. '1' → logprob: -14.000870704650879
    10. ']

' → logprob: -14.125870704650879

Token 127: ' ' (ID: 220)
  Prédit: ''
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False

Token 128: ' #' (ID: 1069)
  Prédit: ''
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False

Token 129: ' On' (ID: 2160)
  Prédit: ''
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False

Token 130: ' prend' (ID: 37463)
  Prédit: ' continue'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' continue' → logprob: -1.0316627025604248
    2. 'continue' → logprob: -1.2816627025604248
    3. ']' → logprob: -2.281662702560425
    4. '+' → logprob: -3.156662702560425
    5. 's' → logprob: -3.281662702560425
    6. ' pense' → logprob: -4.156662940979004
    7. '0' → logprob: -4.281662940979004
    8. ')' → logprob: -4.406662940979004
    9. ':' → logprob: -4.531662940979004
    10. '       ' → logprob: -4.781662940979004

Token 131: ' à' (ID: 1221)
  Prédit: '1'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '1' → logprob: -1.0312093496322632
    2. 'c' → logprob: -1.9062093496322632
    3. ' c' → logprob: -1.9062093496322632
    4. '<|end|>' → logprob: -2.1562094688415527
    5. ' ' → logprob: -2.4062094688415527
    6. '0' → logprob: -3.1562094688415527
    7. 'j' → logprob: -3.6562094688415527
    8. ' j' → logprob: -3.6562094688415527
    9. '[' → logprob: -5.156209468841553
    10. '+' → logprob: -5.281209468841553

Token 132: ' partir' (ID: 12100)
  Prédit: '1'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '1' → logprob: -0.5380042791366577
    2. 'j' → logprob: -1.9130042791366577
    3. ' ' → logprob: -2.1630043983459473
    4. ' j' → logprob: -2.2880043983459473
    5. '0' → logprob: -3.0380043983459473
    6. ' index' → logprob: -6.913004398345947
    7. 'c' → logprob: -7.038004398345947
    8. ' c' → logprob: -7.163004398345947
    9. 'index' → logprob: -8.038003921508789
    10. '[' → logprob: -8.038003921508789

Token 133: ' de' (ID: 334)
  Prédit: '1'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '1' → logprob: -0.011304808780550957
    2. ' de' → logprob: -5.38630485534668
    3. 'de' → logprob: -6.13630485534668
    4. ' ' → logprob: -6.38630485534668
    5. '0' → logprob: -6.63630485534668
    6. ' du' → logprob: -7.38630485534668
    7. 'd' → logprob: -8.38630485534668
    8. 'du' → logprob: -8.63630485534668
    9. ' of' → logprob: -9.51130485534668
    10. ' des' → logprob: -9.63630485534668

Token 134: ' ' (ID: 220)
  Prédit: '1'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '1' → logprob: -0.0009247996495105326
    2. ' ' → logprob: -7.125924587249756
    3. '0' → logprob: -9.250925064086914
    4. 'j' → logprob: -11.500925064086914
    5. 'c' → logprob: -12.500925064086914
    6. '   ' → logprob: -12.625925064086914
    7. ' j' → logprob: -13.250925064086914
    8. '2' → logprob: -13.500925064086914
    9. '```' → logprob: -13.500925064086914
    10. ' c' → logprob: -14.500925064086914

Token 135: '1' (ID: 16)
  Prédit: '1'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '1' → logprob: -9.281485836254433e-05
    2. ' ' → logprob: -9.375092506408691
    3. '0' → logprob: -12.500092506408691
    4. 'j' → logprob: -13.500092506408691
    5. 'c' → logprob: -14.000092506408691
    6. '   ' → logprob: -14.750092506408691
    7. '```' → logprob: -14.750092506408691
    8. 'index' → logprob: -15.375092506408691
    9. '  ' → logprob: -15.625092506408691
    10. '2' → logprob: -16.500093460083008

Token 136: ' car' (ID: 1669)
  Prédit: ''
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False

Token 137: ' coût' (ID: 73109)
  Prédit: 'c'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'c' → logprob: -0.09988179057836533
    2. ' c' → logprob: -2.974881887435913
    3. 'les' → logprob: -4.724881649017334
    4. ' les' → logprob: -4.849881649017334
    5. ' la' → logprob: -4.849881649017334
    6. 'le' → logprob: -5.099881649017334
    7. 'l' → logprob: -5.599881649017334
    8. ' le' → logprob: -5.724881649017334
    9. 'la' → logprob: -6.099881649017334
    10. ' index' → logprob: -6.724881649017334

Token 138: ' devant' (ID: 37522)
  Prédit: ']'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ']' → logprob: -0.807365894317627
    2. '<|end|>' → logprob: -1.557365894317627
    3. ')' → logprob: -1.682365894317627
    4. '<|end|>' → logprob: -3.432365894317627
    5. '[' → logprob: -3.932365894317627
    6. '[i' → logprob: -3.932365894317627
    7. '0' → logprob: -4.182365894317627
    8. '+' → logprob: -4.307365894317627
    9. '])' → logprob: -4.307365894317627
    10. '   ' → logprob: -4.932365894317627

Token 139: '
' (ID: 198)
  Prédit: ''
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False

Token 140: '   ' (ID: 271)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')' → logprob: -0.8437514901161194
    2. '[' → logprob: -1.5937514305114746
    3. '   ' → logprob: -1.8437514305114746
    4. '<|end|>' → logprob: -2.7187514305114746
    5. '       ' → logprob: -3.4687514305114746
    6. ']' → logprob: -3.5937514305114746
    7. '[i' → logprob: -4.343751430511475
    8. ' ' → logprob: -4.468751430511475
    9. '0' → logprob: -4.968751430511475
    10. '  ' → logprob: -5.093751430511475

Token 141: ' #' (ID: 1069)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ')' → logprob: -1.739571213722229
    2. ' ' → logprob: -1.739571213722229
    3. '<|end|>' → logprob: -1.864571213722229
    4. '   ' → logprob: -1.989571213722229
    5. ':return' → logprob: -2.2395710945129395
    6. ':' → logprob: -2.7395710945129395
    7. 'return' → logprob: -2.8645710945129395
    8. '[' → logprob: -3.3645710945129395
    9. ' return' → logprob: -3.6145710945129395
    10. '       ' → logprob: -4.2395710945129395

Token 142: ' Est' (ID: 4555)
  Prédit: 'return'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'return' → logprob: -0.5567269921302795
    2. ' return' → logprob: -1.0567269325256348
    3. '   ' → logprob: -2.5567269325256348
    4. '       ' → logprob: -7.431726932525635
    5. ' ' → logprob: -7.681726932525635
    6. '	return' → logprob: -8.931727409362793
    7. '
' → logprob: -8.931727409362793
    8. '  ' → logprob: -9.556727409362793
    9. ':return' → logprob: -9.556727409362793
    10. '0' → logprob: -10.056727409362793

Token 143: '-ce' (ID: 35404)
  Prédit: ' ce'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' ce' → logprob: -1.3924473524093628
    2. '-ce' → logprob: -1.6424473524093628
    3. '   ' → logprob: -1.7674473524093628
    4. 'imer' → logprob: -1.8924473524093628
    5. 'imation' → logprob: -2.2674474716186523
    6. 'im' → logprob: -3.6424474716186523
    7. ' return' → logprob: -4.017447471618652
    8. 'imate' → logprob: -4.267447471618652
    9. ' la' → logprob: -4.517447471618652
    10. ' ' → logprob: -4.642447471618652

Token 144: ' que' (ID: 661)
  Prédit: ' que'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' que' → logprob: -0.05300698056817055
    2. 'que' → logprob: -3.928006887435913
    3. '   ' → logprob: -4.678007125854492
    4. ' qu' → logprob: -4.928007125854492
    5. ' ' → logprob: -5.803007125854492
    6. ' correct' → logprob: -6.053007125854492
    7. ' vrai' → logprob: -6.303007125854492
    8. ' that' → logprob: -6.803007125854492
    9. 'qu' → logprob: -6.928007125854492
    10. '```' → logprob: -7.303007125854492

Token 145: ' tous' (ID: 10688)
  Prédit: 'all'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'all' → logprob: -0.05323714390397072
    2. ' all' → logprob: -3.303237199783325
    3. 'min' → logprob: -4.928236961364746
    4. 'sum' → logprob: -5.553236961364746
    5. 'max' → logprob: -6.178236961364746
    6. ' min' → logprob: -7.053236961364746
    7. 'res' → logprob: -7.678236961364746
    8. ' max' → logprob: -8.678236961364746
    9. ' sum' → logprob: -9.428236961364746
    10. ' res' → logprob: -9.803236961364746

Token 146: ' >=' (ID: 5064)
  Prédit: 'res'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'res' → logprob: -0.21158577501773834
    2. ' res' → logprob: -1.9615857601165771
    3. '(res' → logprob: -3.586585760116577
    4. 'val' → logprob: -5.336585998535156
    5. '>' → logprob: -5.461585998535156
    6. ' val' → logprob: -6.336585998535156
    7. '>=' → logprob: -6.586585998535156
    8. 'x' → logprob: -6.586585998535156
    9. '   ' → logprob: -6.836585998535156
    10. 'v' → logprob: -6.836585998535156

Token 147: ' x' (ID: 1215)
  Prédit: 'x'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'x' → logprob: -0.16023357212543488
    2. ' x' → logprob: -1.9102336168289185
    3. '1' → logprob: -12.285233497619629
    4. '0' → logprob: -13.160233497619629
    5. '[x' → logprob: -14.160233497619629
    6. ' ' → logprob: -14.410233497619629
    7. '   ' → logprob: -14.785233497619629
    8. '	x' → logprob: -15.035233497619629
    9. '```' → logprob: -15.410233497619629
    10. 'res' → logprob: -16.035234451293945

Token 148: ' ?
' (ID: 19740)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.0499592050909996
    2. '
' → logprob: -3.674959182739258
    3. '       ' → logprob: -5.174959182739258
    4. ' if' → logprob: -5.174959182739258
    5. ' return' → logprob: -5.924959182739258
    6. 'return' → logprob: -6.424959182739258
    7. ' >=' → logprob: -6.549959182739258
    8. ',' → logprob: -6.799959182739258
    9. '    
' → logprob: -7.049959182739258
    10. '  
' → logprob: -7.299959182739258

Token 149: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.0008141548605635762
    2. 'return' → logprob: -8.000814437866211
    3. ' return' → logprob: -8.125814437866211
    4. '       ' → logprob: -8.750814437866211
    5. '
' → logprob: -11.875814437866211
    6. '<|end|>' → logprob: -12.500814437866211
    7. ' ' → logprob: -12.625814437866211
    8. '	return' → logprob: -13.125814437866211
    9. '    
' → logprob: -13.500814437866211
    10. '  ' → logprob: -13.500814437866211

Token 150: ' for' (ID: 395)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.10565385222434998
    2. ' return' → logprob: -2.980653762817383
    3. ' for' → logprob: -3.855653762817383
    4. '
' → logprob: -4.355653762817383
    5. 'return' → logprob: -4.480653762817383
    6. '       ' → logprob: -6.230653762817383
    7. 'for' (adapté à ' for') → logprob: -6.730653762817383
    8. '    
' → logprob: -7.730653762817383
    9. '  
' → logprob: -8.855653762817383
    10. ' ' → logprob: -9.230653762817383

Token 151: ' v' (ID: 323)
  Prédit: ' j'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' j' → logprob: -0.63360196352005
    2. 'j' → logprob: -0.75860196352005
    3. 'k' → logprob: -8.008602142333984
    4. 'i' → logprob: -8.133602142333984
    5. ' i' → logprob: -8.383602142333984
    6. ' k' → logprob: -9.383602142333984
    7. ' val' → logprob: -10.508602142333984
    8. 'val' → logprob: -11.758602142333984
    9. ' idx' → logprob: -11.758602142333984
    10. 'value' → logprob: -12.633602142333984

Token 152: ' in' (ID: 306)
  Prédit: ' in'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' in' → logprob: -0.06998234242200851
    2. 'in' → logprob: -2.6949822902679443
    3. ' ' → logprob: -11.319982528686523
    4. 's' → logprob: -11.569982528686523
    5. 'v' → logprob: -12.069982528686523
    6. '   ' → logprob: -12.194982528686523
    7. ',' → logprob: -13.444982528686523
    8. '  ' → logprob: -13.694982528686523
    9. '_in' → logprob: -13.694982528686523
    10. 'd' → logprob: -13.819982528686523

Token 153: ' res' (ID: 694)
  Prédit: 'range'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'range' → logprob: -0.5907191038131714
    2. 'res' → logprob: -0.9657191038131714
    3. ' range' → logprob: -2.840719223022461
    4. ' res' → logprob: -4.965719223022461
    5. '(res' → logprob: -13.715719223022461
    6. 'enumer' → logprob: -13.840719223022461
    7. ' ' → logprob: -14.465719223022461
    8. '(range' → logprob: -14.840719223022461
    9. '   ' → logprob: -14.965719223022461
    10. 're' → logprob: -14.965719223022461

Token 154: ':
' (ID: 734)
  Prédit: ':'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ':' → logprob: -0.4687730669975281
    2. '   ' → logprob: -1.9687731266021729
    3. ' <' → logprob: -2.593773126602173
    4. ' in' → logprob: -3.093773126602173
    5. ' >=' → logprob: -3.218773126602173
    6. '>=' → logprob: -3.218773126602173
    7. '<' → logprob: -4.468772888183594
    8. ':
' → logprob: -4.593772888183594
    9. '       ' → logprob: -5.343772888183594
    10. ' :' → logprob: -6.468772888183594

Token 155: '       ' (ID: 309)
  Prédit: '       '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '       ' → logprob: -0.0017352750292047858
    2. ' if' → logprob: -6.751735210418701
    3. '<|end|>' → logprob: -8.00173568725586
    4. 'if' → logprob: -8.75173568725586
    5. '<|end|>' → logprob: -11.12673568725586
    6. ',' → logprob: -11.25173568725586
    7. '   ' → logprob: -11.25173568725586
    8. '        
' → logprob: -12.50173568725586
    9. '      ' → logprob: -12.75173568725586
    10. '=' → logprob: -12.75173568725586

Token 156: ' if' (ID: 538)
  Prédit: 'if'
  Correct (stricte): False
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'if' (adapté à ' if') → logprob: -0.00933408085256815
    2. ' if' → logprob: -4.884334087371826
    3. '       ' → logprob: -6.384334087371826
    4. '   ' → logprob: -10.259333610534668
    5. '	if' → logprob: -13.134333610534668
    6. '           ' → logprob: -14.384333610534668
    7. '    ' → logprob: -15.384333610534668
    8. 'If' → logprob: -15.384333610534668
    9. '```' → logprob: -16.009334564208984
    10. ';if' → logprob: -16.009334564208984

Token 157: ' v' (ID: 323)
  Prédit: 'v'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'v' → logprob: -0.3132624924182892
    2. ' v' → logprob: -1.3132624626159668
    3. '	v' → logprob: -14.563262939453125
    4. '   ' → logprob: -16.438262939453125
    5. ' ' → logprob: -17.063262939453125
    6. '<v' → logprob: -17.063262939453125
    7. '_v' → logprob: -18.063262939453125
    8. '(v' → logprob: -18.188262939453125
    9. '$v' → logprob: -18.938262939453125
    10. ')v' → logprob: -19.063262939453125

Token 158: ' <' (ID: 464)
  Prédit: '<'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '<' → logprob: -0.693516731262207
    2. ' <' → logprob: -0.693516731262207
    3. '<x' → logprob: -8.068516731262207
    4. '<v' → logprob: -10.568516731262207
    5. '<n' → logprob: -11.318516731262207
    6. '<m' → logprob: -11.443516731262207
    7. '<int' → logprob: -12.443516731262207
    8. '<E' → logprob: -14.568516731262207
    9. '<th' → logprob: -14.693516731262207
    10. '<t' → logprob: -14.818516731262207

Token 159: ' x' (ID: 1215)
  Prédit: 'x'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'x' → logprob: -0.16022473573684692
    2. ' x' → logprob: -1.9102246761322021
    3. '	x' → logprob: -15.160224914550781
    4. '   ' → logprob: -16.41022491455078
    5. ' ' → logprob: -16.53522491455078
    6. ' ' → logprob: -17.66022491455078
    7. '(x' → logprob: -19.16022491455078
    8. '    ' → logprob: -19.28522491455078
    9. '>x' → logprob: -19.53522491455078
    10. '```' → logprob: -19.78522491455078

Token 160: ':
' (ID: 734)
  Prédit: ':'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ':' → logprob: -0.06701528280973434
    2. ':
' → logprob: -3.5670151710510254
    3. '           ' → logprob: -3.9420151710510254
    4. ':return' → logprob: -4.192015171051025
    5. 'return' → logprob: -7.317015171051025
    6. ' return' → logprob: -7.442015171051025
    7. '       ' → logprob: -7.442015171051025
    8. ' :' → logprob: -9.192015647888184
    9. '):
' → logprob: -11.067015647888184
    10. '):' → logprob: -11.067015647888184

Token 161: '           ' (ID: 352)
  Prédit: '           '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '           ' → logprob: -0.008019198663532734
    2. 'return' → logprob: -5.008018970489502
    3. ' return' → logprob: -6.758018970489502
    4. '               ' → logprob: -9.25801944732666
    5. '       ' → logprob: -10.38301944732666
    6. ':return' → logprob: -12.00801944732666
    7. '		' → logprob: -12.88301944732666
    8. '   ' → logprob: -13.50801944732666
    9. '	return' → logprob: -13.88301944732666
    10. '
' → logprob: -13.88301944732666

Token 162: ' return' (ID: 622)
  Prédit: 'return'
  Correct (stricte): False
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'return' (adapté à ' return') → logprob: -0.026240035891532898
    2. ' return' → logprob: -3.776240110397339
    3. '           ' → logprob: -6.02623987197876
    4. '               ' → logprob: -7.65123987197876
    5. '	return' → logprob: -9.651240348815918
    6. '       ' → logprob: -11.026240348815918
    7. '   ' → logprob: -11.901240348815918
    8. '
' → logprob: -11.901240348815918
    9. ':return' → logprob: -12.901240348815918
    10. '	       ' → logprob: -13.776240348815918

Token 163: ' False' (ID: 7983)
  Prédit: 'False'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'False' → logprob: -0.0009119403548538685
    2. ' False' → logprob: -7.000911712646484
    3. '0' → logprob: -14.750911712646484
    4. 'None' → logprob: -15.750911712646484
    5. 'F' → logprob: -19.125911712646484
    6. '(False' → logprob: -19.250911712646484
    7. 'True' → logprob: -19.500911712646484
    8. '-' → logprob: -20.000911712646484
    9. ' ' → logprob: -20.125911712646484
    10. 'false' → logprob: -20.250911712646484

Token 164: '
' (ID: 198)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.014790681190788746
    2. 'return' → logprob: -4.2647905349731445
    3. ' return' → logprob: -7.3897905349731445
    4. '
' → logprob: -12.389790534973145
    5. '	return' → logprob: -13.264790534973145
    6. '  ' → logprob: -14.139790534973145
    7. ':return' → logprob: -14.264790534973145
    8. ' ' → logprob: -14.639790534973145
    9. '       ' → logprob: -14.764790534973145
    10. 'eturn' → logprob: -15.014790534973145

Token 165: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.03017263673245907
    2. 'return' → logprob: -3.53017258644104
    3. ' return' → logprob: -7.780172824859619
    4. '	return' → logprob: -13.030172348022461
    5. '
' → logprob: -14.280172348022461
    6. '       ' → logprob: -14.780172348022461
    7. '  ' → logprob: -15.030172348022461
    8. ' ' → logprob: -15.655172348022461
    9. ':return' → logprob: -15.780172348022461
    10. 'eturn' → logprob: -16.78017234802246

Token 166: ' return' (ID: 622)
  Prédit: 'return'
  Correct (stricte): False
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'return' (adapté à ' return') → logprob: -0.1130499541759491
    2. '   ' → logprob: -2.3630499839782715
    3. ' return' → logprob: -4.3630499839782715
    4. '	return' → logprob: -11.113049507141113
    5. 'eturn' → logprob: -13.238049507141113
    6. ':return' → logprob: -13.738049507141113
    7. '       ' → logprob: -13.863049507141113
    8. ')return' → logprob: -14.113049507141113
    9. ' ' → logprob: -14.363049507141113
    10. '  ' → logprob: -15.113049507141113

Token 167: ' True' (ID: 6432)
  Prédit: 'True'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'True' → logprob: -9.615255839889869e-05
    2. ' True' → logprob: -9.250096321105957
    3. '(True' → logprob: -20.50009536743164
    4. '   ' → logprob: -22.62509536743164
    5. 'true' → logprob: -23.37509536743164
    6. '=True' → logprob: -23.50009536743164
    7. 'False' → logprob: -23.87509536743164
    8. ' ' → logprob: -25.12509536743164
    9. 'TRUE' → logprob: -25.87509536743164
    10. '.True' → logprob: -25.87509536743164

Token 168: '

' (ID: 279)
  Prédit: ''
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False

Token 169: 'me' (ID: 1047)
  Prédit: ':'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ':' → logprob: -1.0289009809494019
    2. ']' → logprob: -1.1539009809494019
    3. ')' → logprob: -1.6539009809494019
    4. '[' → logprob: -2.4039011001586914
    5. '0' → logprob: -4.153901100158691
    6. 'i' → logprob: -5.028901100158691
    7. '[i' → logprob: -5.278901100158691
    8. ' ' → logprob: -6.153901100158691
    9. ' ]' → logprob: -6.278901100158691
    10. '=' → logprob: -6.403901100158691

Token 170: 'illeur' (ID: 159909)
  Prédit: 'mo'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'mo' → logprob: -0.32381218671798706
    2. 'm' → logprob: -1.4488122463226318
    3. 'me' → logprob: -3.823812246322632
    4. 'min' → logprob: -5.073812007904053
    5. 'ma' → logprob: -6.448812007904053
    6. 'max' → logprob: -6.448812007904053
    7. 'def' → logprob: -6.823812007904053
    8. 'mor' → logprob: -6.823812007904053
    9. 't' → logprob: -6.948812007904053
    10. '#' → logprob: -7.323812007904053

Token 171: ' =' (ID: 314)
  Prédit: '_c'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_c' → logprob: -0.6958662867546082
    2. '_' → logprob: -0.9458662867546082
    3. '_co' → logprob: -2.820866346359253
    4. '_cost' → logprob: -3.070866346359253
    5. ' =' → logprob: -5.820866107940674
    6. '_score' → logprob: -7.195866107940674
    7. '_pr' → logprob: -7.195866107940674
    8. '_val' → logprob: -7.695866107940674
    9. '=' → logprob: -7.820866107940674
    10. '_price' → logprob: -7.945866107940674

Token 172: ' ' (ID: 220)
  Prédit: 'float'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'float' → logprob: -0.5776312351226807
    2. '10' → logprob: -0.8276312351226807
    3. '-' → logprob: -7.202630996704102
    4. '100' → logprob: -7.327630996704102
    5. 'int' → logprob: -9.327630996704102
    6. 'sum' → logprob: -9.702630996704102
    7. 'None' → logprob: -9.827630996704102
    8. '1' → logprob: -10.452630996704102
    9. ' float' → logprob: -10.577630996704102
    10. '0' → logprob: -12.202630996704102

Token 173: '1' (ID: 16)
  Prédit: '10'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '10' → logprob: -0.25226789712905884
    2. 'float' → logprob: -1.502267837524414
    3. '100' → logprob: -8.877267837524414
    4. 'int' → logprob: -9.502267837524414
    5. 'None' → logprob: -9.752267837524414
    6. '-' → logprob: -10.377267837524414
    7. '1' → logprob: -11.002267837524414
    8. ' float' → logprob: -12.252267837524414
    9. 'pow' → logprob: -12.377267837524414
    10. '999' → logprob: -12.752267837524414

Token 174: '<<' (ID: 5354)
  Prédit: '000'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '000' → logprob: -0.03975832089781761
    2. '0' → logprob: -3.6647582054138184
    3. ',' → logprob: -4.789758205413818
    4. 'e' → logprob: -6.414758205413818
    5. '00' → logprob: -6.664758205413818
    6. ' ' → logprob: -7.664758205413818
    7. '<<' → logprob: -7.789758205413818
    8. ' ,' → logprob: -8.664758682250977
    9. '
' → logprob: -8.789758682250977
    10. ')' → logprob: -8.914758682250977

Token 175: '62' (ID: 8947)
  Prédit: '60'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '60' → logprob: -0.014484546147286892
    2. '30' → logprob: -4.389484405517578
    3. '31' → logprob: -6.389484405517578
    4. '40' → logprob: -9.139484405517578
    5. '50' → logprob: -9.514484405517578
    6. '61' → logprob: -10.139484405517578
    7. '62' → logprob: -10.514484405517578
    8. '20' → logprob: -10.764484405517578
    9. '32' → logprob: -11.389484405517578
    10. '29' → logprob: -12.264484405517578

Token 176: ' ' (ID: 220)
  Prédit: '
'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '
' → logprob: -0.3180878758430481
    2. ' 
' → logprob: -1.5680878162384033
    3. 'for' → logprob: -3.4430878162384033
    4. '<|end|>' → logprob: -4.818088054656982
    5. '  
' → logprob: -4.818088054656982
    6. ' ' → logprob: -5.318088054656982
    7. ' for' → logprob: -5.443088054656982
    8. '' → logprob: -6.443088054656982
    9. 'c' → logprob: -6.943088054656982
    10. '   
' → logprob: -7.693088054656982

Token 177: ' #' (ID: 1069)
  Prédit: 'for'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'for' → logprob: -0.2827657163143158
    2. '
' → logprob: -1.4077657461166382
    3. ' for' → logprob: -6.782765865325928
    4. '

' → logprob: -8.78276538848877
    5. '
' → logprob: -9.03276538848877
    6. ' 
' → logprob: -9.28276538848877
    7. '+' → logprob: -10.40776538848877
    8. '    
' → logprob: -10.90776538848877
    9. '  
' → logprob: -11.03276538848877
    10. '0' → logprob: -11.65776538848877

Token 178: ' grand' (ID: 6363)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '(' → logprob: -1.1087284088134766
    2. '-' → logprob: -1.8587284088134766
    3. 'float' → logprob: -2.1087284088134766
    4. '1' → logprob: -2.2337284088134766
    5. 'for' → logprob: -2.3587284088134766
    6. '10' → logprob: -3.2337284088134766
    7. '0' → logprob: -3.4837284088134766
    8. 'def' → logprob: -3.9837284088134766
    9. 'None' → logprob: -4.358728408813477
    10. 'import' → logprob: -4.358728408813477

Token 179: ' nombre' (ID: 9733)
  Prédit: '0'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '0' → logprob: -1.4150948524475098
    2. ' ' → logprob: -1.9150948524475098
    3. '-' → logprob: -2.6650948524475098
    4. '```' → logprob: -2.7900948524475098
    5. 'e' → logprob: -3.1650948524475098
    6. ' 
' → logprob: -3.4150948524475098
    7. ' ,' → logprob: -3.5400948524475098
    8. 'me' → logprob: -3.5400948524475098
    9. '=' → logprob: -3.5400948524475098
    10. ',' → logprob: -3.6650948524475098

Token 180: ',' (ID: 11)
  Prédit: 'for'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'for' → logprob: -0.15507571399211884
    2. '
' → logprob: -2.530075788497925
    3. '+' → logprob: -2.905075788497925
    4. ' for' → logprob: -5.280075550079346
    5. '+
' → logprob: -5.905075550079346
    6. ' 
' → logprob: -7.405075550079346
    7. ' +' → logprob: -9.155076026916504
    8. '

' → logprob: -9.405076026916504
    9. ',' → logprob: -9.780076026916504
    10. ' ' → logprob: -9.905076026916504

Token 181: ' ça' (ID: 13590)
  Prédit: 'for'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'for' → logprob: -0.4732051193714142
    2. 'import' → logprob: -2.473205089569092
    3. '0' → logprob: -3.223205089569092
    4. 'input' → logprob: -3.348205089569092
    5. ' for' → logprob: -3.473205089569092
    6. 'me' → logprob: -3.473205089569092
    7. 'best' → logprob: -3.973205089569092
    8. 'print' → logprob: -4.223205089569092
    9. 'co' → logprob: -4.223205089569092
    10. ' ' → logprob: -4.598205089569092

Token 182: ' suffit' (ID: 67383)
  Prédit: ' continue'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' continue' → logprob: -0.45157018303871155
    2. 'continue' → logprob: -1.9515701532363892
    3. '#' → logprob: -2.8265702724456787
    4. 'contin' → logprob: -3.5765702724456787
    5. ' reste' → logprob: -4.3265700340271
    6. ' =' → logprob: -4.4515700340271
    7. ' va' → logprob: -4.5765700340271
    8. 'n' → logprob: -4.7015700340271
    9. ' continues' → logprob: -4.8265700340271
    10. ' #' → logprob: -4.9515700340271

Token 183: ' sûrement' (ID: 158793)
  Prédit: 'for'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'for' → logprob: -0.16678674519062042
    2. '
' → logprob: -2.1667866706848145
    3. ' for' → logprob: -3.2917866706848145
    4. '<|end|>' → logprob: -7.4167866706848145
    5. ' 
' → logprob: -7.5417866706848145
    6. '  
' → logprob: -7.9167866706848145
    7. '\n' → logprob: -9.166787147521973
    8. '    
' → logprob: -9.541787147521973
    9. '<|end|>' → logprob: -10.416787147521973
    10. '
' → logprob: -10.541787147521973

Token 184: '

' (ID: 279)
  Prédit: 'for'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'for' → logprob: -0.007395429536700249
    2. '
' → logprob: -5.007395267486572
    3. ' for' → logprob: -7.382395267486572
    4. '    
' → logprob: -11.25739574432373
    5. '  
' → logprob: -12.13239574432373
    6. '<|end|>' → logprob: -12.25739574432373
    7. '   ' → logprob: -12.63239574432373
    8. '+' → logprob: -12.75739574432373
    9. '+
' → logprob: -12.75739574432373
    10. '
' → logprob: -12.75739574432373

Token 185: 'def' (ID: 1314)
  Prédit: 'for'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'for' → logprob: -0.007076582871377468
    2. ' for' → logprob: -5.007076740264893
    3. '
' → logprob: -8.632076263427734
    4. '   ' → logprob: -9.382076263427734
    5. '<|end|>' → logprob: -10.132076263427734
    6. 'n' → logprob: -11.507076263427734
    7. 'def' → logprob: -11.632076263427734
    8. 'i' → logprob: -11.757076263427734
    9. '    
' → logprob: -12.007076263427734
    10. '<|end|>' → logprob: -12.257076263427734

Token 186: ' dfs' (ID: 51252)
  Prédit: ' dfs'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' dfs' → logprob: -0.8226751089096069
    2. ' recherche' → logprob: -1.322675108909607
    3. ' rec' → logprob: -2.4476752281188965
    4. ' solve' → logprob: -2.8226752281188965
    5. ' back' → logprob: -3.4476752281188965
    6. ' chercher' → logprob: -4.0726752281188965
    7. 'dfs' → logprob: -4.3226752281188965
    8. ' search' → logprob: -4.5726752281188965
    9. ' trouver' → logprob: -4.6976752281188965
    10. ' rechercher' → logprob: -4.8226752281188965

Token 187: '(idx' (ID: 42793)
  Prédit: '(depth'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(depth' → logprob: -0.29697200655937195
    2. '(' → logprob: -2.1719720363616943
    3. ' (' → logprob: -2.5469720363616943
    4. '(i' → logprob: -3.7969720363616943
    5. '(index' → logprob: -4.171971797943115
    6. '(idx' → logprob: -4.171971797943115
    7. '(pos' → logprob: -4.921971797943115
    8. '(ind' → logprob: -6.921971797943115
    9. '(n' → logprob: -7.421971797943115
    10. '(choice' → logprob: -7.671971797943115

Token 188: '):
' (ID: 1883)
  Prédit: ','
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ',' → logprob: -0.0015185497468337417
    2. '):' → logprob: -6.751518726348877
    3. ' ,' → logprob: -8.001518249511719
    4. ',n' → logprob: -12.626518249511719
    5. '   ' → logprob: -12.751518249511719
    6. ':' → logprob: -13.126518249511719
    7. ' ):' → logprob: -13.876518249511719
    8. ',index' → logprob: -14.126518249511719
    9. ')' → logprob: -14.626518249511719
    10. ',num' → logprob: -14.876518249511719

Token 189: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.24608200788497925
    2. ' if' → logprob: -1.621082067489624
    3. 'if' → logprob: -4.121081829071045
    4. '<|end|>' → logprob: -6.496081829071045
    5. ' global' → logprob: -6.996081829071045
    6. 'global' → logprob: -7.121081829071045
    7. ' ' → logprob: -7.996081829071045
    8. '    ' → logprob: -8.621082305908203
    9. '	if' → logprob: -8.746082305908203
    10. '  ' → logprob: -9.246082305908203

Token 190: ' #' (ID: 1069)
  Prédit: 'global'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'global' → logprob: -0.0077521298080682755
    2. '   ' → logprob: -5.507751941680908
    3. 'if' → logprob: -5.757751941680908
    4. ' global' → logprob: -7.632751941680908
    5. ' if' → logprob: -11.382752418518066
    6. '	global' → logprob: -11.507752418518066
    7. ' ' → logprob: -13.757752418518066
    8. '    
' → logprob: -14.382752418518066
    9. 'gl' → logprob: -14.382752418518066
    10. '  ' → logprob: -16.00775146484375

Token 191: ' Parc' (ID: 68618)
  Prédit: 'global'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'global' → logprob: -0.01694873347878456
    2. 'if' → logprob: -4.141948699951172
    3. ' global' → logprob: -7.516948699951172
    4. '   ' → logprob: -8.141948699951172
    5. ' if' → logprob: -9.641948699951172
    6. '	global' → logprob: -11.891948699951172
    7. 'non' → logprob: -12.516948699951172
    8. ' ' → logprob: -14.016948699951172
    9. 'pass' → logprob: -14.516948699951172
    10. '    
' → logprob: -14.641948699951172

Token 192: 'ourt' (ID: 38600)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.7745420932769775
    2. 'if' → logprob: -0.7745420932769775
    3. 'urer' → logprob: -3.1495420932769775
    4. ' if' → logprob: -3.8995420932769775
    5. 'er' → logprob: -5.649541854858398
    6. 'def' → logprob: -6.149541854858398
    7. '       ' → logprob: -6.399541854858398
    8. 'orer' → logprob: -6.524541854858398
    9. 'for' → logprob: -6.774541854858398
    10. '```' → logprob: -7.024541854858398

Token 193: ' tous' (ID: 10688)
  Prédit: 'if'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'if' → logprob: -0.17239364981651306
    2. '(idx' → logprob: -1.9223936796188354
    3. ' if' → logprob: -5.172393798828125
    4. 'idx' → logprob: -5.672393798828125
    5. '   ' → logprob: -6.922393798828125
    6. '(' → logprob: -7.672393798828125
    7. 'def' → logprob: -7.922393798828125
    8. 's' → logprob: -8.047393798828125
    9. ' idx' → logprob: -9.047393798828125
    10. '```' → logprob: -9.172393798828125

Token 194: ' les' (ID: 1341)
  Prédit: 'les'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'les' → logprob: -0.2300216108560562
    2. ' les' → logprob: -2.1050217151641846
    3. 'poss' → logprob: -3.2300217151641846
    4. '(idx' → logprob: -4.3550214767456055
    5. 'possible' → logprob: -5.2300214767456055
    6. 'i' → logprob: -5.3550214767456055
    7. 'le' → logprob: -5.4800214767456055
    8. '   ' → logprob: -5.9800214767456055
    9. 'idx' → logprob: -6.1050214767456055
    10. '(' → logprob: -6.2300214767456055

Token 195: ' choix' (ID: 28642)
  Prédit: 'if'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'if' → logprob: -0.0376652255654335
    2. ' if' → logprob: -4.287665367126465
    3. 'idx' → logprob: -4.787665367126465
    4. 'indices' → logprob: -5.037665367126465
    5. 'cho' → logprob: -5.412665367126465
    6. 'poss' → logprob: -6.412665367126465
    7. 'choices' → logprob: -6.912665367126465
    8. ' choix' → logprob: -8.037665367126465
    9. 'indexes' → logprob: -8.787665367126465
    10. 'i' → logprob: -8.912665367126465

Token 196: ' possibles' (ID: 97753)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.016371464356780052
    2. ' if' → logprob: -4.641371250152588
    3. '<|end|>' → logprob: -5.141371250152588
    4. ':' → logprob: -8.016371726989746
    5. '  ' → logprob: -9.266371726989746
    6. ' ' → logprob: -9.766371726989746
    7. ',' → logprob: -9.766371726989746
    8. 'if' → logprob: -9.766371726989746
    9. '<|end|>' → logprob: -10.141371726989746
    10. '	if' → logprob: -10.766371726989746

Token 197: '
' (ID: 198)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.01089843176305294
    2. ':' → logprob: -4.885898590087891
    3. '<|end|>' → logprob: -6.135898590087891
    4. ',' → logprob: -7.635898590087891
    5. ' if' → logprob: -7.760898590087891
    6. '  ' → logprob: -10.01089859008789
    7. ' ' → logprob: -10.38589859008789
    8. ' :' → logprob: -10.63589859008789
    9. '    
' → logprob: -10.88589859008789
    10. '<|end|>' → logprob: -11.01089859008789

Token 198: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.0008342855726368725
    2. ' if' → logprob: -7.2508344650268555
    3. 'if' → logprob: -9.750834465026855
    4. '<|end|>' → logprob: -10.750834465026855
    5. ':' → logprob: -11.125834465026855
    6. 'global' → logprob: -11.500834465026855
    7. ' global' → logprob: -12.625834465026855
    8. '    
' → logprob: -12.750834465026855
    9. '   ' → logprob: -12.750834465026855
    10. ',' → logprob: -13.000834465026855

Token 199: ' global' (ID: 5466)
  Prédit: 'global'
  Correct (stricte): False
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'global' (adapté à ' global') → logprob: -0.5774970650672913
    2. '   ' → logprob: -1.5774970054626465
    3. 'if' → logprob: -1.5774970054626465
    4. ' if' → logprob: -3.9524970054626465
    5. ' global' → logprob: -5.0774970054626465
    6. '	global' → logprob: -8.702497482299805
    7. '    
' → logprob: -10.202497482299805
    8. ' ' → logprob: -10.452497482299805
    9. '  ' → logprob: -10.952497482299805
    10. '	if' → logprob: -11.452497482299805

Token 200: ' meilleur' (ID: 37552)
  Prédit: 'me'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'me' → logprob: -0.018154270946979523
    2. 'cho' → logprob: -4.018154144287109
    3. ' meilleur' → logprob: -13.14315414428711
    4. 'best' → logprob: -13.76815414428711
    5. 'mo' → logprob: -14.51815414428711
    6. '```' → logprob: -15.01815414428711
    7. ' choix' → logprob: -15.26815414428711
    8. 'choice' → logprob: -16.26815414428711
    9. 'c' → logprob: -17.01815414428711
    10. 'm' → logprob: -17.64315414428711

Token 201: '
' (ID: 198)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.3087650537490845
    2. '
' → logprob: -2.183764934539795
    3. ':' → logprob: -2.558764934539795
    4. '<|end|>' → logprob: -3.058764934539795
    5. '    
' → logprob: -4.683764934539795
    6. ',' → logprob: -4.808764934539795
    7. '  
' → logprob: -5.933764934539795
    8. ' 
' → logprob: -6.558764934539795
    9. ' ' → logprob: -6.683764934539795
    10. '  ' → logprob: -6.683764934539795

Token 202: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.002204024465754628
    2. ' if' → logprob: -6.627203941345215
    3. '    
' → logprob: -8.002203941345215
    4. 'if' → logprob: -8.002203941345215
    5. '<|end|>' → logprob: -9.752203941345215
    6. '
' → logprob: -10.252203941345215
    7. '  ' → logprob: -10.502203941345215
    8. '	if' → logprob: -11.002203941345215
    9. '```' → logprob: -11.252203941345215
    10. '  
' → logprob: -11.627203941345215

Token 203: ' if' (ID: 538)
  Prédit: 'if'
  Correct (stricte): False
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'if' (adapté à ' if') → logprob: -0.017689654603600502
    2. '   ' → logprob: -4.3926897048950195
    3. ' if' → logprob: -5.2676897048950195
    4. '  ' → logprob: -12.64268970489502
    5. 'global' → logprob: -12.76768970489502
    6. ' ' → logprob: -13.26768970489502
    7. '	if' → logprob: -13.76768970489502
    8. '```' → logprob: -14.26768970489502
    9. '    
' → logprob: -14.39268970489502
    10. '<|end|>' → logprob: -14.89268970489502

Token 204: ' idx' (ID: 14016)
  Prédit: 'idx'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'idx' → logprob: -0.011053833179175854
    2. ' idx' → logprob: -4.511054039001465
    3. '   ' → logprob: -12.761054039001465
    4. '	idx' → logprob: -12.886054039001465
    5. 'indice' → logprob: -15.386054039001465
    6. ' ' → logprob: -15.886054039001465
    7. '(idx' → logprob: -16.01105308532715
    8. '  ' → logprob: -16.51105308532715
    9. 'id' → logprob: -16.88605308532715
    10. '[idx' → logprob: -17.13605308532715

Token 205: ' ==' (ID: 951)
  Prédit: '=='
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '==' → logprob: -0.25199127197265625
    2. ' ==' → logprob: -1.5019912719726562
    3. '>=' → logprob: -9.876991271972656
    4. ' >=' → logprob: -11.751991271972656
    5. '=' → logprob: -13.751991271972656
    6. ')==' → logprob: -14.876991271972656
    7. ' ' → logprob: -15.001991271972656
    8. '==(' → logprob: -15.001991271972656
    9. '==
' → logprob: -15.251991271972656
    10. ']==' → logprob: -15.626991271972656

Token 206: ' n' (ID: 297)
  Prédit: 'n'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'n' → logprob: -2.339278580620885e-06
    2. ' n' → logprob: -13.000001907348633
    3. '   ' → logprob: -17.375001907348633
    4. '	n' → logprob: -18.625001907348633
    5. 'len' → logprob: -21.125001907348633
    6. '<|end|>' → logprob: -21.500001907348633
    7. '  ' → logprob: -21.625001907348633
    8. '_n' → logprob: -21.750001907348633
    9. ' ' → logprob: -21.875001907348633
    10. '
' → logprob: -21.875001907348633

Token 207: ':
' (ID: 734)
  Prédit: ':'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ':' → logprob: -0.009768485091626644
    2. ':
' → logprob: -4.634768486022949
    3. ':return' → logprob: -11.88476848602295
    4. '   ' → logprob: -13.13476848602295
    5. ':
' → logprob: -13.25976848602295
    6. ' :' → logprob: -13.50976848602295
    7. '):' → logprob: -15.13476848602295
    8. ' :
' → logprob: -16.509767532348633
    9. ':

' → logprob: -16.634767532348633
    10. '):
' → logprob: -17.509767532348633

Token 208: '       ' (ID: 309)
  Prédit: '       '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '       ' → logprob: -0.18081620335578918
    2. '   ' → logprob: -1.8058161735534668
    3. 'global' → logprob: -7.555816173553467
    4. 'return' → logprob: -9.055816650390625
    5. ' global' → logprob: -9.055816650390625
    6. 'cost' → logprob: -9.305816650390625
    7. ' return' → logprob: -10.180816650390625
    8. '    
' → logprob: -10.555816650390625
    9. '{
' → logprob: -10.805816650390625
    10. 'if' → logprob: -10.930816650390625

Token 209: ' total' (ID: 3609)
  Prédit: '       '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '       ' → logprob: -0.1640533208847046
    2. '   ' → logprob: -2.289053440093994
    3. 'if' → logprob: -3.789053440093994
    4. 'co' → logprob: -4.289053440093994
    5. 'cost' → logprob: -5.164053440093994
    6. 'global' → logprob: -6.164053440093994
    7. 'cout' → logprob: -6.289053440093994
    8. ' if' → logprob: -7.039053440093994
    9. 'return' → logprob: -7.414053440093994
    10. 'c' → logprob: -7.664053440093994

Token 210: ' =' (ID: 314)
  Prédit: ' ='
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' =' → logprob: -0.053136978298425674
    2. '=' → logprob: -3.3031370639801025
    3. '_cost' → logprob: -4.803136825561523
    4. 'cost' → logprob: -5.803136825561523
    5. '_co' → logprob: -7.053136825561523
    6. '_' → logprob: -7.178136825561523
    7. '_c' → logprob: -7.303136825561523
    8. 'co' → logprob: -7.553136825561523
    9. '   ' → logprob: -8.053136825561523
    10. ' ' → logprob: -8.678136825561523

Token 211: ' ' (ID: 220)
  Prédit: '0'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '0' → logprob: -0.006819447036832571
    2. 'sum' → logprob: -5.006819248199463
    3. ' ' → logprob: -10.006819725036621
    4. ' sum' → logprob: -10.131819725036621
    5. '   ' → logprob: -10.881819725036621
    6. '  ' → logprob: -16.256818771362305
    7. '	sum' → logprob: -16.506818771362305
    8. '       ' → logprob: -16.881818771362305
    9. '```' → logprob: -17.131818771362305
    10. '
' → logprob: -17.569318771362305

Token 212: '0' (ID: 15)
  Prédit: '0'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '0' → logprob: -0.01603800244629383
    2. 'sum' → logprob: -4.141037940979004
    3. ' sum' → logprob: -13.016037940979004
    4. ' ' → logprob: -13.641037940979004
    5. '   ' → logprob: -15.141037940979004
    6. 's' → logprob: -17.26603889465332
    7. '```' → logprob: -17.89103889465332
    8. '	sum' → logprob: -18.01603889465332
    9. 'total' → logprob: -18.39103889465332
    10. '(sum' → logprob: -18.39103889465332

Token 213: '
' (ID: 198)
  Prédit: '       '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '       ' → logprob: -0.0007038529147394001
    2. '
' → logprob: -7.625703811645508
    3. ' for' → logprob: -8.875703811645508
    4. 'for' → logprob: -10.375703811645508
    5. '   ' → logprob: -10.625703811645508
    6. ',' → logprob: -12.000703811645508
    7. '<|end|>' → logprob: -12.750703811645508
    8. '           ' → logprob: -13.000703811645508
    9. '        
' → logprob: -13.000703811645508
    10. ' ' → logprob: -13.000703811645508

Token 214: '       ' (ID: 309)
  Prédit: '       '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '       ' → logprob: -0.001059486996382475
    2. ' for' → logprob: -7.376059532165527
    3. 'for' → logprob: -8.001059532165527
    4. '   ' → logprob: -9.626059532165527
    5. '
' → logprob: -11.001059532165527
    6. ',' → logprob: -12.126059532165527
    7. '<|end|>' → logprob: -12.626059532165527
    8. '	for' → logprob: -13.126059532165527
    9. ' ' → logprob: -13.751059532165527
    10. '        
' → logprob: -14.001059532165527

Token 215: ' for' (ID: 395)
  Prédit: 'for'
  Correct (stricte): False
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'for' (adapté à ' for') → logprob: -0.002105529187247157
    2. '       ' → logprob: -6.502105712890625
    3. ' for' → logprob: -7.627105712890625
    4. '   ' → logprob: -9.127105712890625
    5. '           ' → logprob: -12.627105712890625
    6. '
' → logprob: -13.377105712890625
    7. ' ' → logprob: -14.252105712890625
    8. '	for' → logprob: -14.502105712890625
    9. 'return' → logprob: -15.002105712890625
    10. ')' → logprob: -16.127105712890625

Token 216: ' i' (ID: 575)
  Prédit: 'i'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'i' → logprob: -0.0001490716531407088
    2. 'ii' → logprob: -9.87514877319336
    3. ' i' → logprob: -10.00014877319336
    4. 'k' → logprob: -10.00014877319336
    5. 'iiii' → logprob: -12.25014877319336
    6. 'iii' → logprob: -13.87514877319336
    7. 'j' → logprob: -15.00014877319336
    8. '	i' → logprob: -15.75014877319336
    9. '_i' → logprob: -15.87514877319336
    10. '```' → logprob: -16.00014877319336

Token 217: ' in' (ID: 306)
  Prédit: ' in'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' in' → logprob: -0.002265636110678315
    2. 'in' → logprob: -6.127265453338623
    3. ',' → logprob: -9.752265930175781
    4. ' ' → logprob: -11.627265930175781
    5. 'n' → logprob: -12.127265930175781
    6. 'range' → logprob: -12.627265930175781
    7. '   ' → logprob: -13.502265930175781
    8. ' ' → logprob: -14.502265930175781
    9. '```' → logprob: -14.502265930175781
    10. 'd' → logprob: -14.627265930175781

Token 218: ' range' (ID: 3352)
  Prédit: 'range'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'range' → logprob: -0.00218583014793694
    2. ' range' → logprob: -6.127185821533203
    3. '   ' → logprob: -15.877185821533203
    4. 'rang' → logprob: -15.877185821533203
    5. '	range' → logprob: -16.127185821533203
    6. ' ' → logprob: -16.252185821533203
    7. '
' → logprob: -16.627185821533203
    8. '(range' → logprob: -16.752185821533203
    9. 'ange' → logprob: -17.252185821533203
    10. 'r' → logprob: -17.377185821533203

Token 219: '(n' (ID: 2406)
  Prédit: 'n'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'n' → logprob: -0.026414431631565094
    2. '(n' → logprob: -3.651414394378662
    3. ' n' → logprob: -9.52641487121582
    4. '   ' → logprob: -10.65141487121582
    5. '(' → logprob: -12.02641487121582
    6. '	n' → logprob: -12.15141487121582
    7. ' (' → logprob: -13.65141487121582
    8. '       ' → logprob: -13.90141487121582
    9. ')' → logprob: -14.27641487121582
    10. 'len' → logprob: -14.27641487121582

Token 220: '):
' (ID: 1883)
  Prédit: '):
'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '):
' → logprob: -0.04366720840334892
    2. '):' → logprob: -3.1686673164367676
    3. '):
' → logprob: -7.418667316436768
    4. '       ' → logprob: -10.79366683959961
    5. ':
' → logprob: -10.91866683959961
    6. '           ' → logprob: -11.66866683959961
    7. '):

' → logprob: -11.79366683959961
    8. ':' → logprob: -11.91866683959961
    9. ')' → logprob: -13.29366683959961
    10. '   ' → logprob: -13.41866683959961

Token 221: '           ' (ID: 352)
  Prédit: '           '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '           ' → logprob: -0.0692794993519783
    2. ' if' → logprob: -3.194279432296753
    3. 'if' → logprob: -3.819279432296753
    4. '       ' → logprob: -5.819279670715332
    5. '   ' → logprob: -7.569279670715332
    6. '               ' → logprob: -9.319279670715332
    7. ':' → logprob: -9.444279670715332
    8. ' ' → logprob: -9.569279670715332
    9. '<|end|>' → logprob: -9.819279670715332
    10. '
' → logprob: -10.194279670715332

Token 222: ' if' (ID: 538)
  Prédit: 'if'
  Correct (stricte): False
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'if' (adapté à ' if') → logprob: -0.11640864610671997
    2. ' if' → logprob: -2.741408586502075
    3. 'total' → logprob: -4.116408824920654
    4. '           ' → logprob: -4.241408824920654
    5. '       ' → logprob: -4.741408824920654
    6. '   ' → logprob: -5.366408824920654
    7. ' total' → logprob: -7.241408824920654
    8. ' ' → logprob: -8.116408348083496
    9. '               ' → logprob: -8.991408348083496
    10. '
' → logprob: -9.241408348083496

Token 223: ' choix' (ID: 28642)
  Prédit: 'cho'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'cho' → logprob: -0.5234902501106262
    2. ' choix' → logprob: -0.8984902501106262
    3. '   ' → logprob: -8.773489952087402
    4. ' ' → logprob: -9.023489952087402
    5. '    ' → logprob: -11.148489952087402
    6. ' cho' → logprob: -11.273489952087402
    7. '  ' → logprob: -11.273489952087402
    8. ' chois' → logprob: -11.898489952087402
    9. ' ' → logprob: -12.023489952087402
    10. 'choice' → logprob: -12.023489952087402

Token 224: '[i' (ID: 1768)
  Prédit: '[i'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '[i' → logprob: -5.512236498361744e-07
    2. '[' → logprob: -15.250000953674316
    3. 'i' → logprob: -16.0
    4. '```' → logprob: -16.625
    5. ' [' → logprob: -17.0
    6. '[
' → logprob: -17.125
    7. '   ' → logprob: -18.125
    8. '(i' → logprob: -18.5
    9. '[I' → logprob: -19.75
    10. '[int' → logprob: -19.875

Token 225: ']:
' (ID: 22152)
  Prédit: ']:'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ']:' → logprob: -0.7003589868545532
    2. ']:
' → logprob: -0.7003589868545532
    3. ']==' → logprob: -5.200358867645264
    4. ':
' → logprob: -7.575358867645264
    5. ':' → logprob: -7.700358867645264
    6. ']' → logprob: -8.075359344482422
    7. '==' → logprob: -8.200359344482422
    8. ']:
' → logprob: -9.950359344482422
    9. ']:

' → logprob: -10.700359344482422
    10. '       ' → logprob: -11.200359344482422

Token 226: '               ' (ID: 506)
  Prédit: '               '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '               ' → logprob: -1.2304197549819946
    2. 'total' → logprob: -1.3554197549819946
    3. ' total' → logprob: -1.3554197549819946
    4. '           ' → logprob: -1.7304197549819946
    5. ':
' → logprob: -4.855419635772705
    6. ':' → logprob: -5.730419635772705
    7. '(total' → logprob: -7.230419635772705
    8. '       ' → logprob: -7.980419635772705
    9. ',total' → logprob: -7.980419635772705
    10. '	total' → logprob: -8.105420112609863

Token 227: ' total' (ID: 3609)
  Prédit: 'total'
  Correct (stricte): False
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'total' (adapté à ' total') → logprob: -0.031453292816877365
    2. ' total' → logprob: -3.5314533710479736
    3. '           ' → logprob: -6.4064531326293945
    4. '               ' → logprob: -10.781453132629395
    5. '                   ' → logprob: -11.656453132629395
    6. '   ' → logprob: -11.906453132629395
    7. '	total' → logprob: -12.031453132629395
    8. ' ' → logprob: -12.906453132629395
    9. '       ' → logprob: -13.031453132629395
    10. '
' → logprob: -13.906453132629395

Token 228: ' +=' (ID: 2757)
  Prédit: '+='
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '+=' → logprob: -0.2014530897140503
    2. ' +=' → logprob: -1.7014530897140503
    3. ']+=' → logprob: -10.32645320892334
    4. '   ' → logprob: -12.70145320892334
    5. '+' → logprob: -13.45145320892334
    6. '
' → logprob: -14.20145320892334
    7. '+=(' → logprob: -14.45145320892334
    8. '=' → logprob: -14.57645320892334
    9. '```' → logprob: -15.45145320892334
    10. '       ' → logprob: -16.076452255249023

Token 229: ' c' (ID: 274)
  Prédit: 'c'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'c' → logprob: -0.006720229052007198
    2. ' c' → logprob: -5.006720066070557
    3. '   ' → logprob: -12.756720542907715
    4. '           ' → logprob: -13.631720542907715
    5. '               ' → logprob: -15.131720542907715
    6. '	c' → logprob: -15.881720542907715
    7. '  ' → logprob: -16.2567195892334
    8. ' ' → logprob: -16.7567195892334
    9. '       ' → logprob: -16.8817195892334
    10. '                   ' → logprob: -17.2567195892334

Token 230: '[i' (ID: 1768)
  Prédit: '[i'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '[i' → logprob: 0.0
    2. '[' → logprob: -17.25
    3. ' [' → logprob: -17.25
    4. '```' → logprob: -17.5
    5. 'i' → logprob: -17.625
    6. ' i' → logprob: -19.625
    7. '[
' → logprob: -19.875
    8. '
' → logprob: -20.125
    9. '[][' → logprob: -20.25
    10. '   ' → logprob: -20.375

Token 231: '][' (ID: 2696)
  Prédit: '[i'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '[i' → logprob: -0.014482072554528713
    2. '][' → logprob: -4.264482021331787
    3. '[' → logprob: -8.264482498168945
    4. '0' → logprob: -10.514482498168945
    5. 'i' → logprob: -11.264482498168945
    6. ')[' → logprob: -12.014482498168945
    7. ' [' → logprob: -12.139482498168945
    8. '```' → logprob: -13.389482498168945
    9. '}[' → logprob: -13.514482498168945
    10. ' ][' → logprob: -13.639482498168945

Token 232: '0' (ID: 15)
  Prédit: '0'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '0' → logprob: -1.0280383548888494e-06
    2. ' ' → logprob: -14.125000953674316
    3. '[' → logprob: -15.375000953674316
    4. '   ' → logprob: -17.500001907348633
    5. '000' → logprob: -18.875001907348633
    6. '00' → logprob: -19.000001907348633
    7. '```' → logprob: -19.625001907348633
    8. '０' → logprob: -20.000001907348633
    9. '][' → logprob: -20.625001907348633
    10. '۰' → logprob: -20.750001907348633

Token 233: ']
' (ID: 1592)
  Prédit: ']'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ']' → logprob: -0.0008476253715343773
    2. '<|end|>' → logprob: -7.750847816467285
    3. ' ]' → logprob: -8.625847816467285
    4. ']
' → logprob: -9.000847816467285
    5. ')' → logprob: -9.500847816467285
    6. ')]' → logprob: -11.375847816467285
    7. '<|end|>' → logprob: -11.375847816467285
    8. ']()' → logprob: -12.125847816467285
    9. '])' → logprob: -12.875847816467285
    10. '()]' → logprob: -13.000847816467285

Token 234: '       ' (ID: 309)
  Prédit: '       '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '       ' → logprob: -0.03488012030720711
    2. '
' → logprob: -4.1598801612854
    3. '<|end|>' → logprob: -4.1598801612854
    4. '<|end|>' → logprob: -6.6598801612854
    5. '   ' → logprob: -7.1598801612854
    6. ')' → logprob: -8.534879684448242
    7. '  
' → logprob: -8.784879684448242
    8. '        
' → logprob: -9.034879684448242
    9. '    
' → logprob: -9.409879684448242
    10. '\n' → logprob: -9.409879684448242

Token 235: ' if' (ID: 538)
  Prédit: '       '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '       ' → logprob: -0.43892309069633484
    2. ' if' → logprob: -1.5639231204986572
    3. 'if' (adapté à ' if') → logprob: -1.9389231204986572
    4. '   ' → logprob: -6.813922882080078
    5. 'return' → logprob: -7.688922882080078
    6. ' return' → logprob: -8.063922882080078
    7. '
' → logprob: -9.813922882080078
    8. '	if' → logprob: -9.938922882080078
    9. '           ' → logprob: -10.313922882080078
    10. '<|end|>' → logprob: -10.438922882080078

Token 236: ' couverture' (ID: 97460)
  Prédit: ' couverture'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' couverture' → logprob: -0.25422489643096924
    2. 'cou' → logprob: -1.5042248964309692
    3. 'c' → logprob: -6.75422477722168
    4. ' ' → logprob: -7.87922477722168
    5. 'coverage' → logprob: -8.75422477722168
    6. 'not' → logprob: -8.87922477722168
    7. 'total' → logprob: -9.25422477722168
    8. ' ' → logprob: -9.50422477722168
    9. 'cov' → logprob: -9.75422477722168
    10. '(c' → logprob: -10.00422477722168

Token 237: '(' (ID: 7)
  Prédit: '('
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(' → logprob: -1.4140441635390744e-05
    2. ' (' → logprob: -11.250014305114746
    3. ' ' → logprob: -15.375014305114746
    4. 'cho' → logprob: -15.500014305114746
    5. '   ' → logprob: -15.875014305114746
    6. '```' → logprob: -16.25001335144043
    7. '  ' → logprob: -16.37501335144043
    8. '(
' → logprob: -16.62501335144043
    9. '((' → logprob: -16.75001335144043
    10. '(choice' → logprob: -16.87501335144043

Token 238: 'cho' (ID: 2153)
  Prédit: 'cho'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'cho' → logprob: -0.00010735770774772391
    2. ' choix' → logprob: -9.750107765197754
    3. '(' → logprob: -10.125107765197754
    4. ')' → logprob: -12.125107765197754
    5. '   ' → logprob: -14.125107765197754
    6. ' ' → logprob: -14.375107765197754
    7. 'choice' → logprob: -15.125107765197754
    8. '```' → logprob: -15.500107765197754
    9. '
' → logprob: -15.625107765197754
    10. '[' → logprob: -15.750107765197754

Token 239: 'ix' (ID: 1128)
  Prédit: 'ix'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'ix' → logprob: -0.07079974561929703
    2. 'x' → logprob: -2.6957998275756836
    3. 'if' → logprob: -8.570799827575684
    4. 'f' → logprob: -9.195799827575684
    5. 'xf' → logprob: -9.695799827575684
    6. 'xl' → logprob: -9.945799827575684
    7. ' ix' → logprob: -10.070799827575684
    8. 'is' → logprob: -10.070799827575684
    9. 'l' → logprob: -10.195799827575684
    10. '[' → logprob: -10.195799827575684

Token 240: '):
' (ID: 1883)
  Prédit: '):'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '):' → logprob: -0.0707748681306839
    2. '):
' → logprob: -2.695774793624878
    3. ')' → logprob: -7.945775032043457
    4. ' ):' → logprob: -8.320775032043457
    5. '):
' → logprob: -8.695775032043457
    6. '_l' → logprob: -10.820775032043457
    7. '):

' → logprob: -11.070775032043457
    8. ' ):
' → logprob: -11.695775032043457
    9. ')==' → logprob: -11.695775032043457
    10. ')):' → logprob: -12.195775032043457

Token 241: '           ' (ID: 352)
  Prédit: '           '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '           ' → logprob: -0.07173166424036026
    2. ' and' → logprob: -2.6967315673828125
    3. ':' → logprob: -6.5717315673828125
    4. ':
' → logprob: -8.696731567382812
    5. 'and' → logprob: -9.821731567382812
    6. '       ' → logprob: -10.071731567382812
    7. ' :' → logprob: -10.321731567382812
    8. '               ' → logprob: -10.821731567382812
    9. ',' → logprob: -11.321731567382812
    10. '          ' → logprob: -11.446731567382812

Token 242: ' meilleur' (ID: 37552)
  Prédit: '               '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '               ' → logprob: -0.43626126646995544
    2. ' if' → logprob: -1.6862612962722778
    3. 'if' → logprob: -1.8112612962722778
    4. 'me' → logprob: -6.311261177062988
    5. '           ' → logprob: -6.561261177062988
    6. '       ' → logprob: -6.936261177062988
    7. '   ' → logprob: -7.561261177062988
    8. '	if' → logprob: -9.811261177062988
    9. '              ' → logprob: -10.436261177062988
    10. '
' → logprob: -11.311261177062988

Token 243: ' =' (ID: 314)
  Prédit: ' ='
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' =' → logprob: -0.1002139002084732
    2. '=' → logprob: -2.3502140045166016
    3. '=min' → logprob: -11.975214004516602
    4. '   ' → logprob: -14.600214004516602
    5. 'min' → logprob: -14.850214004516602
    6. '           ' → logprob: -16.8502140045166
    7. ' min' → logprob: -17.2252140045166
    8. '    ' → logprob: -17.4752140045166
    9. '＝' → logprob: -18.1002140045166
    10. '=max' → logprob: -18.6002140045166

Token 244: ' min' (ID: 1349)
  Prédit: 'min'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'min' → logprob: -0.008615161292254925
    2. ' min' → logprob: -4.758615016937256
    3. 'total' → logprob: -14.883615493774414
    4. '	min' → logprob: -15.633615493774414
    5. 'max' → logprob: -17.008615493774414
    6. '(min' → logprob: -17.008615493774414
    7. '   ' → logprob: -17.508615493774414
    8. '=min' → logprob: -18.883615493774414
    9. '[min' → logprob: -19.258615493774414
    10. 'minimum' → logprob: -19.258615493774414

Token 245: '(me' (ID: 53856)
  Prédit: '(me'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(me' → logprob: -6.034592388459714e-06
    2. '(' → logprob: -12.250005722045898
    3. '(
' → logprob: -14.750005722045898
    4. '(m' → logprob: -14.875005722045898
    5. ' (' → logprob: -16.0000057220459
    6. '(ma' → logprob: -16.2500057220459
    7. '```' → logprob: -16.3750057220459
    8. '(best' → logprob: -16.7500057220459
    9. '(total' → logprob: -16.8750057220459
    10. '	me' → logprob: -17.1250057220459

Token 246: 'illeur' (ID: 159909)
  Prédit: 'illeur'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'illeur' → logprob: -0.0016331668011844158
    2. 'eur' → logprob: -7.126633167266846
    3. 'ur' → logprob: -8.001632690429688
    4. 'iller' → logprob: -8.376632690429688
    5. 'leur' → logprob: -10.126632690429688
    6. 'reur' → logprob: -10.376632690429688
    7. 'illet' → logprob: -10.501632690429688
    8. 'el' → logprob: -10.626632690429688
    9. 'eil' → logprob: -10.751632690429688
    10. 'e' → logprob: -11.376632690429688

Token 247: ',' (ID: 11)
  Prédit: ','
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ',' → logprob: -0.0031316096428781748
    2. ',total' → logprob: -5.87813138961792
    3. ' ,' → logprob: -8.128131866455078
    4. 'total' → logprob: -10.503131866455078
    5. ' total' → logprob: -12.628131866455078
    6. ',
' → logprob: -14.628131866455078
    7. '(total' → logprob: -15.128131866455078
    8. ',current' → logprob: -16.628131866455078
    9. '   ' → logprob: -16.878131866455078
    10. '	total' → logprob: -17.003131866455078

Token 248: ' total' (ID: 3609)
  Prédit: 'total'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'total' → logprob: -0.07889044284820557
    2. ' total' → logprob: -2.578890323638916
    3. '           ' → logprob: -15.828890800476074
    4. '	total' → logprob: -16.078889846801758
    5. '(total' → logprob: -16.203889846801758
    6. 'tot' → logprob: -16.203889846801758
    7. ' ' → logprob: -16.828889846801758
    8. '   ' → logprob: -17.078889846801758
    9. '               ' → logprob: -17.703889846801758
    10. ' ' → logprob: -17.953889846801758

Token 249: ')
' (ID: 446)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')' → logprob: -0.20151254534721375
    2. ')
' → logprob: -1.7015125751495361
    3. '       ' → logprob: -10.326512336730957
    4. '   ' → logprob: -10.701512336730957
    5. ')return' → logprob: -11.076512336730957
    6. ')
' → logprob: -11.326512336730957
    7. ' )' → logprob: -11.951512336730957
    8. ' )
' → logprob: -12.326512336730957
    9. ')

' → logprob: -12.451512336730957
    10. '           ' → logprob: -13.951512336730957

Token 250: '       ' (ID: 309)
  Prédit: '       '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '       ' → logprob: -0.0011502212146297097
    2. '   ' → logprob: -7.001150131225586
    3. '           ' → logprob: -8.376150131225586
    4. ' return' → logprob: -12.876150131225586
    5. 'return' → logprob: -13.001150131225586
    6. '	' → logprob: -14.126150131225586
    7. '
' → logprob: -14.126150131225586
    8. '	return' → logprob: -14.751150131225586
    9. '<|end|>' → logprob: -14.751150131225586
    10. '	   ' → logprob: -14.876150131225586

Token 251: ' return' (ID: 622)
  Prédit: '       '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '       ' → logprob: -0.03712252154946327
    2. '   ' → logprob: -3.7871224880218506
    3. 'return' (adapté à ' return') → logprob: -4.28712272644043
    4. ' return' → logprob: -11.16212272644043
    5. '           ' → logprob: -11.66212272644043
    6. 'else' → logprob: -11.66212272644043
    7. '	return' → logprob: -12.91212272644043
    8. ' ' → logprob: -13.66212272644043
    9. '
' → logprob: -14.28712272644043
    10. '  ' → logprob: -14.78712272644043

Token 252: '
' (ID: 198)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.14010511338710785
    2. '    
' → logprob: -2.1401050090789795
    3. 'for' → logprob: -5.265105247497559
    4. ' for' → logprob: -5.515105247497559
    5. '  
' → logprob: -6.390105247497559
    6. '
' → logprob: -7.140105247497559
    7. '   
' → logprob: -7.890105247497559
    8. ' choix' → logprob: -8.265105247497559
    9. '        
' → logprob: -8.515105247497559
    10. 'cho' → logprob: -8.765105247497559

Token 253: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.024893956258893013
    2. '    
' → logprob: -4.274893760681152
    3. 'for' → logprob: -5.024893760681152
    4. ' for' → logprob: -6.274893760681152
    5. 'cho' → logprob: -7.024893760681152
    6. 'if' → logprob: -7.399893760681152
    7. ' if' → logprob: -8.524893760681152
    8. '  ' → logprob: -9.149893760681152
    9. '  
' → logprob: -9.399893760681152
    10. '   
' → logprob: -9.649893760681152

Token 254: ' #' (ID: 1069)
  Prédit: 'cho'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'cho' → logprob: -0.002702162368223071
    2. '   ' → logprob: -6.377702236175537
    3. '#' (adapté à ' #') → logprob: -7.377702236175537
    4. '    
' → logprob: -8.127701759338379
    5. 'dfs' → logprob: -10.127701759338379
    6. '
' → logprob: -11.002701759338379
    7. 'for' → logprob: -11.377701759338379
    8. ' choix' → logprob: -12.252701759338379
    9. '  
' → logprob: -13.002701759338379
    10. '```' → logprob: -13.377701759338379

Token 255: ' Avec' (ID: 38862)
  Prédit: 'cho'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'cho' → logprob: -0.0011190229561179876
    2. '#' → logprob: -7.626119136810303
    3. 'for' → logprob: -7.626119136810303
    4. '    
' → logprob: -9.876118659973145
    5. ' choix' → logprob: -10.126118659973145
    6. '   ' → logprob: -10.501118659973145
    7. 'dfs' → logprob: -11.126118659973145
    8. '```' → logprob: -12.376118659973145
    9. '
' → logprob: -13.501118659973145
    10. 'Cho' → logprob: -13.876118659973145

Token 256: ' ou' (ID: 2031)
  Prédit: 'cho'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'cho' → logprob: -0.09527364373207092
    2. 'dfs' → logprob: -3.095273733139038
    3. 'idx' → logprob: -4.095273494720459
    4. '0' → logprob: -4.095273494720459
    5. ' choix' → logprob: -5.095273494720459
    6. ' dfs' → logprob: -6.345273494720459
    7. ' idx' → logprob: -6.470273494720459
    8. 'Cho' → logprob: -7.345273494720459
    9. 'True' → logprob: -7.970273494720459
    10. '1' → logprob: -8.095273971557617

Token 257: ' sans' (ID: 9828)
  Prédit: 'sans'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'sans' → logprob: -0.5529575943946838
    2. 'cho' → logprob: -1.677957534790039
    3. ' sans' → logprob: -1.802957534790039
    4. 'dfs' → logprob: -3.052957534790039
    5. ' dfs' → logprob: -4.427957534790039
    6. 'without' → logprob: -5.177957534790039
    7. ' choix' → logprob: -6.177957534790039
    8. ' without' → logprob: -6.177957534790039
    9. '_' → logprob: -6.927957534790039
    10. '#' → logprob: -7.677957534790039

Token 258: '
' (ID: 198)
  Prédit: 'cho'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'cho' → logprob: -0.0008610807126387954
    2. ' choix' → logprob: -7.125861167907715
    3. '   ' → logprob: -10.250861167907715
    4. '    
' → logprob: -11.750861167907715
    5. '
' → logprob: -12.250861167907715
    6. ' ' → logprob: -13.000861167907715
    7. ' cho' → logprob: -13.000861167907715
    8. '```' → logprob: -14.000861167907715
    9. 'for' → logprob: -14.500861167907715
    10. 'choice' → logprob: -14.625861167907715

Token 259: '   ' (ID: 271)
  Prédit: 'cho'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'cho' → logprob: -0.00717281736433506
    2. '   ' → logprob: -5.007172584533691
    3. ' choix' → logprob: -7.757172584533691
    4. '    
' → logprob: -11.007172584533691
    5. ' cho' → logprob: -12.132172584533691
    6. '
' → logprob: -13.007172584533691
    7. '```' → logprob: -13.382172584533691
    8. '  ' → logprob: -14.507172584533691
    9. 'dfs' → logprob: -14.632172584533691
    10. '#' → logprob: -14.757172584533691

Token 260: ' choix' (ID: 28642)
  Prédit: 'cho'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'cho' → logprob: -8.137130498653278e-05
    2. '   ' → logprob: -10.125081062316895
    3. ' choix' → logprob: -11.000081062316895
    4. '    
' → logprob: -11.625081062316895
    5. '
' → logprob: -12.125081062316895
    6. 'for' → logprob: -12.125081062316895
    7. '#' → logprob: -12.875081062316895
    8. 'dfs' → logprob: -13.625081062316895
    9. '```' → logprob: -14.875081062316895
    10. 'choice' → logprob: -15.625081062316895

Token 261: '[idx' (ID: 25582)
  Prédit: '[idx'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '[idx' → logprob: -9.610702363715973e-06
    2. '[i' → logprob: -12.250009536743164
    3. '[' → logprob: -13.125009536743164
    4. '[ind' → logprob: -13.250009536743164
    5. '[id' → logprob: -14.750009536743164
    6. '[ix' → logprob: -15.375009536743164
    7. '[index' → logprob: -15.500009536743164
    8. ' [' → logprob: -16.750009536743164
    9. '[ip' → logprob: -16.875009536743164
    10. '[Index' → logprob: -17.500009536743164

Token 262: ']' (ID: 60)
  Prédit: '='
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '=' → logprob: -0.21959863603115082
    2. ']' → logprob: -1.969598650932312
    3. ' =' → logprob: -2.9695985317230225
    4. ']=' → logprob: -5.094598770141602
    5. ' ]' → logprob: -8.719598770141602
    6. ')' → logprob: -10.844598770141602
    7. ')=' → logprob: -12.594598770141602
    8. ']+=' → logprob: -12.844598770141602
    9. '0' → logprob: -13.719598770141602
    10. '1' → logprob: -13.969598770141602

Token 263: ' =' (ID: 314)
  Prédit: '='
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '=' → logprob: -0.001170225441455841
    2. ' =' → logprob: -6.7511701583862305
    3. '+=' → logprob: -18.751171112060547
    4. '＝' → logprob: -18.876171112060547
    5. '0' → logprob: -19.751171112060547
    6. '=
' → logprob: -20.501171112060547
    7. '=True' → logprob: -20.501171112060547
    8. ',' → logprob: -20.876171112060547
    9. '.=' → logprob: -21.501171112060547
    10. '=int' → logprob: -21.751171112060547

Token 264: ' ' (ID: 220)
  Prédit: '1'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '1' → logprob: -0.10021033883094788
    2. '0' → logprob: -2.350210428237915
    3. ' ' → logprob: -12.600210189819336
    4. 'True' → logprob: -14.850210189819336
    5. '   ' → logprob: -18.225210189819336
    6. 'False' → logprob: -18.975210189819336
    7. ' True' → logprob: -20.350210189819336
    8. '  ' → logprob: -20.600210189819336
    9. 'true' → logprob: -21.162710189819336
    10. '```' → logprob: -21.287710189819336

Token 265: '0' (ID: 15)
  Prédit: '0'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '0' → logprob: -0.5759453177452087
    2. '1' → logprob: -0.8259453177452087
    3. ' ' → logprob: -12.450944900512695
    4. 'True' → logprob: -13.200944900512695
    5. 'False' → logprob: -16.575944900512695
    6. '   ' → logprob: -17.700944900512695
    7. 'true' → logprob: -19.263444900512695
    8. ' True' → logprob: -19.388444900512695
    9. '#' → logprob: -19.950944900512695
    10. '01' → logprob: -20.075944900512695

Token 266: '
' (ID: 198)
  Prédit: '
'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '
' → logprob: -0.006499601062387228
    2. '<|end|>' → logprob: -5.631499767303467
    3. '  
' → logprob: -6.631499767303467
    4. '    
' → logprob: -7.256499767303467
    5. '   ' → logprob: -8.256499290466309
    6. 'dfs' → logprob: -8.381499290466309
    7. '<|end|>' → logprob: -8.881499290466309
    8. '
' → logprob: -9.756499290466309
    9. ' 
' → logprob: -10.006499290466309
    10. ' dfs' → logprob: -10.381499290466309

Token 267: '   ' (ID: 271)
  Prédit: '
'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '
' → logprob: -0.01902625896036625
    2. '    
' → logprob: -4.769026279449463
    3. '  
' → logprob: -5.269026279449463
    4. '   ' → logprob: -6.144026279449463
    5. 'dfs' → logprob: -6.519026279449463
    6. ' dfs' → logprob: -7.644026279449463
    7. '<|end|>' → logprob: -8.019025802612305
    8. ' 
' → logprob: -8.394025802612305
    9. '
' → logprob: -8.769025802612305
    10. '   
' → logprob: -8.894025802612305

Token 268: ' dfs' (ID: 51252)
  Prédit: 'dfs'
  Correct (stricte): False
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'dfs' (adapté à ' dfs') → logprob: -0.0008064138819463551
    2. ' dfs' → logprob: -7.1258063316345215
    3. 'df' → logprob: -13.25080680847168
    4. 'idx' → logprob: -15.87580680847168
    5. 'dfa' → logprob: -17.37580680847168
    6. '
' → logprob: -18.25080680847168
    7. 'd' → logprob: -18.87580680847168
    8. 'DFS' → logprob: -18.87580680847168
    9. '   ' → logprob: -19.25080680847168
    10. 'ds' → logprob: -19.75080680847168

Token 269: '(idx' (ID: 42793)
  Prédit: '(idx'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(idx' → logprob: -2.339278580620885e-06
    2. '(' → logprob: -13.375001907348633
    3. ' (' → logprob: -14.125001907348633
    4. '[idx' → logprob: -17.750001907348633
    5. ' idx' → logprob: -18.000001907348633
    6. '(
' → logprob: -18.375001907348633
    7. 'idx' → logprob: -18.750001907348633
    8. '(index' → logprob: -18.750001907348633
    9. '	idx' → logprob: -19.125001907348633
    10. '(id' → logprob: -19.625001907348633

Token 270: '+' (ID: 10)
  Prédit: '+'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '+' → logprob: -0.011048170737922192
    2. ' +' → logprob: -4.511048316955566
    3. '+
' → logprob: -16.26104736328125
    4. '＋' → logprob: -16.63604736328125
    5. ')' → logprob: -17.01104736328125
    6. '+)' → logprob: -17.13604736328125
    7. '1' → logprob: -17.51104736328125
    8. '()+' → logprob: -17.63604736328125
    9. '(idx' → logprob: -18.01104736328125
    10. ')+' → logprob: -18.01104736328125

Token 271: '1' (ID: 16)
  Prédit: '1'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '1' → logprob: -1.7432603272027336e-06
    2. ' ' → logprob: -14.000001907348633
    3. 'idx' → logprob: -14.125001907348633
    4. '```' → logprob: -16.500001907348633
    5. ')' → logprob: -17.000001907348633
    6. '   ' → logprob: -17.250001907348633
    7. ' idx' → logprob: -17.625001907348633
    8. '(idx' → logprob: -18.250001907348633
    9. '
' → logprob: -18.375001907348633
    10. '[idx' → logprob: -19.250001907348633

Token 272: ')
' (ID: 446)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')' → logprob: -0.20143906772136688
    2. ')
' → logprob: -1.7014390230178833
    3. '   ' → logprob: -11.451438903808594
    4. ')
' → logprob: -11.826438903808594
    5. ')

' → logprob: -12.201438903808594
    6. ' )' → logprob: -13.701438903808594
    7. ' )
' → logprob: -13.826438903808594
    8. ')\
' → logprob: -15.826438903808594
    9. ')#' → logprob: -15.951438903808594
    10. '),' → logprob: -15.951438903808594

Token 273: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.16253508627414703
    2. '
' → logprob: -2.2875351905822754
    3. 'cho' → logprob: -3.9125351905822754
    4. '    
' → logprob: -4.287535190582275
    5. ' choix' → logprob: -4.412535190582275
    6. '  
' → logprob: -6.787535190582275
    7. '```' → logprob: -7.662535190582275
    8. ' 
' → logprob: -8.162534713745117
    9. '   
' → logprob: -8.912534713745117
    10. ' ' → logprob: -9.037534713745117

Token 274: ' choix' (ID: 28642)
  Prédit: 'cho'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'cho' → logprob: -0.5369805097579956
    2. ' choix' → logprob: -0.9119805097579956
    3. '   ' → logprob: -4.786980628967285
    4. '
' → logprob: -6.036980628967285
    5. ' cho' → logprob: -6.411980628967285
    6. '    
' → logprob: -7.536980628967285
    7. ' 
' → logprob: -8.411980628967285
    8. 'choices' → logprob: -9.161980628967285
    9. '  
' → logprob: -9.411980628967285
    10. ' ' → logprob: -9.536980628967285

Token 275: '[idx' (ID: 25582)
  Prédit: '[idx'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '[idx' → logprob: -4.320199877838604e-07
    2. '[' → logprob: -15.25
    3. 'idx' → logprob: -16.125
    4. '	idx' → logprob: -18.25
    5. '[id' → logprob: -18.375
    6. '[ind' → logprob: -18.375
    7. '[index' → logprob: -18.5
    8. ' [' → logprob: -19.0
    9. ' idx' → logprob: -19.125
    10. '[i' → logprob: -19.25

Token 276: ']' (ID: 60)
  Prédit: '='
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '=' → logprob: -0.08015678822994232
    2. ' =' → logprob: -2.5801568031311035
    3. ']' → logprob: -6.7051568031311035
    4. ']=' → logprob: -10.705156326293945
    5. ')' → logprob: -11.080156326293945
    6. '   ' → logprob: -12.955156326293945
    7. ')=' → logprob: -14.580156326293945
    8. '[' → logprob: -15.705156326293945
    9. '[idx' → logprob: -15.705156326293945
    10. '=True' → logprob: -15.705156326293945

Token 277: ' =' (ID: 314)
  Prédit: '='
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '=' → logprob: -0.006715370807796717
    2. ' =' → logprob: -5.006715297698975
    3. '=True' → logprob: -17.506715774536133
    4. '＝' → logprob: -19.256715774536133
    5. '<|end|>' → logprob: -19.631715774536133
    6. 's' → logprob: -19.756715774536133
    7. '1' → logprob: -19.881715774536133
    8. ' ' → logprob: -20.131715774536133
    9. '=
' → logprob: -20.506715774536133
    10. '=

' → logprob: -20.756715774536133

Token 278: ' ' (ID: 220)
  Prédit: '1'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '1' → logprob: -2.1008713702030946e-06
    2. ' ' → logprob: -13.125001907348633
    3. '   ' → logprob: -18.875001907348633
    4. '[' → logprob: -22.000001907348633
    5. '0' → logprob: -22.125001907348633
    6. '```' → logprob: -22.125001907348633
    7. '  ' → logprob: -22.375001907348633
    8. '１' → logprob: -22.750001907348633
    9. '<|end|>' → logprob: -23.375001907348633
    10. '۱' → logprob: -23.437501907348633

Token 279: '1' (ID: 16)
  Prédit: '1'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '1' → logprob: 0.0
    2. ' ' → logprob: -19.75
    3. '<|end|>' → logprob: -20.375
    4. '```' → logprob: -22.25
    5. '   ' → logprob: -23.5
    6. '[' → logprob: -23.5
    7. '۱' → logprob: -23.625
    8. '１' → logprob: -24.125
    9. '১' → logprob: -24.125
    10. '१' → logprob: -24.75

Token 280: '
' (ID: 198)
  Prédit: 'dfs'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'dfs' → logprob: -0.1927037537097931
    2. ' dfs' → logprob: -2.3177037239074707
    3. '   ' → logprob: -2.5677037239074707
    4. '
' → logprob: -10.317704200744629
    5. '    
' → logprob: -11.817704200744629
    6. 'df' → logprob: -12.567704200744629
    7. ' ' → logprob: -12.567704200744629
    8. '```' → logprob: -12.817704200744629
    9. '	d' → logprob: -12.942704200744629
    10. '  ' → logprob: -13.192704200744629

Token 281: '   ' (ID: 271)
  Prédit: 'dfs'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'dfs' → logprob: -0.0363415889441967
    2. ' dfs' → logprob: -3.536341667175293
    3. '   ' → logprob: -5.036341667175293
    4. '
' → logprob: -9.911341667175293
    5. 'df' → logprob: -11.536341667175293
    6. '    
' → logprob: -13.036341667175293
    7. ' ' → logprob: -13.536341667175293
    8. '
' → logprob: -13.911341667175293
    9. 'd' → logprob: -14.036341667175293
    10. '\' → logprob: -14.036341667175293

Token 282: ' dfs' (ID: 51252)
  Prédit: 'dfs'
  Correct (stricte): False
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'dfs' (adapté à ' dfs') → logprob: -1.306760805164231e-05
    2. ' dfs' → logprob: -11.25001335144043
    3. 'df' → logprob: -18.50001335144043
    4. '
' → logprob: -20.12501335144043
    5. 'DFS' → logprob: -20.37501335144043
    6. '```' → logprob: -21.25001335144043
    7. 'dfa' → logprob: -21.50001335144043
    8. 'dsl' → logprob: -21.62501335144043
    9. 'def' → logprob: -21.87501335144043
    10. 'dns' → logprob: -22.25001335144043

Token 283: '(idx' (ID: 42793)
  Prédit: '(idx'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(idx' → logprob: -1.0280383548888494e-06
    2. '(' → logprob: -14.250000953674316
    3. ' (' → logprob: -15.875000953674316
    4. '[idx' → logprob: -16.375001907348633
    5. '(index' → logprob: -17.875001907348633
    6. '	idx' → logprob: -18.500001907348633
    7. 'idx' → logprob: -19.000001907348633
    8. ' idx' → logprob: -19.000001907348633
    9. '(
' → logprob: -19.750001907348633
    10. '(id' → logprob: -20.125001907348633

Token 284: '+' (ID: 10)
  Prédit: '+'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '+' → logprob: -0.0003255719493608922
    2. '(idx' → logprob: -8.125325202941895
    3. ' +' → logprob: -10.750325202941895
    4. 'idx' → logprob: -12.250325202941895
    5. '[idx' → logprob: -12.875325202941895
    6. ' idx' → logprob: -14.625325202941895
    7. '()+' → logprob: -15.750325202941895
    8. '(' → logprob: -16.87532615661621
    9. '+
' → logprob: -17.12532615661621
    10. '(+' → logprob: -18.00032615661621

Token 285: '1' (ID: 16)
  Prédit: '1'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '1' → logprob: -0.013714204542338848
    2. 'idx' → logprob: -4.38871431350708
    3. '(idx' → logprob: -7.01371431350708
    4. '2' → logprob: -8.388713836669922
    5. '+' → logprob: -9.888713836669922
    6. ' idx' → logprob: -11.138713836669922
    7. '(' → logprob: -12.763713836669922
    8. '```' → logprob: -13.013713836669922
    9. ')' → logprob: -13.388713836669922
    10. '[idx' → logprob: -13.388713836669922

Token 286: ')

' (ID: 1029)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ')' → logprob: -2.816093228830141e-06
    2. ')
' → logprob: -13.12500286102295
    3. ' )' → logprob: -14.37500286102295
    4. '())' → logprob: -16.000001907348633
    5. '))' → logprob: -17.375001907348633
    6. '()' → logprob: -17.625001907348633
    7. ')`' → logprob: -18.125001907348633
    8. ')#' → logprob: -18.375001907348633
    9. '   ' → logprob: -18.875001907348633
    10. '）' → logprob: -19.250001907348633

Token 287: 'dfs' (ID: 60837)
  Prédit: 'dfs'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'dfs' → logprob: -0.004209343809634447
    2. 'print' → logprob: -5.879209518432617
    3. 'if' → logprob: -6.629209518432617
    4. '#' → logprob: -10.129209518432617
    5. '
' → logprob: -10.754209518432617
    6. ' dfs' → logprob: -11.879209518432617
    7. '```' → logprob: -12.004209518432617
    8. '    
' → logprob: -12.879209518432617
    9. 'result' → logprob: -13.629209518432617
    10. '

' → logprob: -14.379209518432617

Token 288: '(' (ID: 7)
  Prédit: '('
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(' → logprob: -1.4974866644479334e-05
    2. '(n' → logprob: -11.750015258789062
    3. ' (' → logprob: -12.375015258789062
    4. '0' → logprob: -13.250015258789062
    5. '(idx' → logprob: -14.375015258789062
    6. '```' → logprob: -15.375015258789062
    7. '(
' → logprob: -16.625015258789062
    8. '("("' → logprob: -17.125015258789062
    9. '<|end|>' → logprob: -17.250015258789062
    10. '(

' → logprob: -17.375015258789062

Token 289: '0' (ID: 15)
  Prédit: '0'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '0' → logprob: 0.0
    2. ' ' → logprob: -17.0
    3. ')' → logprob: -18.75
    4. '```' → logprob: -19.625
    5. '۰' → logprob: -20.875
    6. '000' → logprob: -21.25
    7. '00' → logprob: -21.375
    8. '1' → logprob: -21.5
    9. '   ' → logprob: -22.0
    10. '(' → logprob: -22.4375

Token 290: ')
' (ID: 446)
  Prédit: ')
'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')
' → logprob: -0.20404626429080963
    2. ')' → logprob: -1.7040462493896484
    3. ')

' → logprob: -5.954046249389648
    4. ')
' → logprob: -10.329046249389648
    5. ' )
' → logprob: -14.079046249389648
    6. ')

' → logprob: -14.954046249389648
    7. ' )' → logprob: -15.579046249389648
    8. ')


' → logprob: -16.20404624938965
    9. ')#' → logprob: -16.82904624938965
    10. '())
' → logprob: -17.45404624938965

Token 291: 'if' (ID: 366)
  Prédit: 'print'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'print' → logprob: -0.002488618716597557
    2. 'if' → logprob: -6.002488613128662
    3. '
' → logprob: -11.75248908996582
    4. '```' → logprob: -12.50248908996582
    5. '#' → logprob: -14.12748908996582
    6. ' print' → logprob: -15.00248908996582
    7. '#print' → logprob: -16.00248908996582
    8. '``' → logprob: -16.12748908996582
    9. '    
' → logprob: -17.37748908996582
    10. 'import' → logprob: -17.75248908996582

Token 292: ' meilleur' (ID: 37552)
  Prédit: ' meilleur'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' meilleur' → logprob: -0.12694081664085388
    2. 'me' → logprob: -2.1269407272338867
    3. 'best' → logprob: -11.876940727233887
    4. 'm' → logprob: -13.376940727233887
    5. ' ' → logprob: -13.751940727233887
    6. ' meilleure' → logprob: -14.126940727233887
    7. '```' → logprob: -14.626940727233887
    8. ' best' → logprob: -14.626940727233887
    9. ' meilleurs' → logprob: -14.876940727233887
    10. '(me' → logprob: -15.626940727233887

Token 293: ' >=' (ID: 5064)
  Prédit: '=='
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '==' → logprob: -0.048593275249004364
    2. ' ==' → logprob: -3.048593282699585
    3. '==
' → logprob: -13.423593521118164
    4. '==(' → logprob: -13.423593521118164
    5. '```' → logprob: -13.548593521118164
    6. '===' → logprob: -14.048593521118164
    7. '>=' → logprob: -14.673593521118164
    8. '!=' → logprob: -16.048593521118164
    9. '<' → logprob: -16.423593521118164
    10. '=' → logprob: -16.548593521118164

Token 294: ' ' (ID: 220)
  Prédit: '1'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '1' → logprob: -0.10033617168664932
    2. '(' → logprob: -2.3503360748291016
    3. '10' → logprob: -8.975336074829102
    4. ' (' → logprob: -13.475336074829102
    5. ' ' → logprob: -13.725336074829102
    6. '100' → logprob: -15.100336074829102
    7. '((' → logprob: -15.850336074829102
    8. 'float' → logprob: -16.4753360748291
    9. '2' → logprob: -17.3503360748291
    10. '999' → logprob: -17.4753360748291

Token 295: '1' (ID: 16)
  Prédit: '1'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '1' → logprob: -0.12887582182884216
    2. '(' → logprob: -2.128875732421875
    3. '10' → logprob: -6.253875732421875
    4. '100' → logprob: -11.378875732421875
    5. 'float' → logprob: -11.753875732421875
    6. '2' → logprob: -13.878875732421875
    7. ' (' → logprob: -14.003875732421875
    8. '999' → logprob: -14.253875732421875
    9. 'int' → logprob: -14.628875732421875
    10. ' ' → logprob: -14.878875732421875

Token 296: '<<' (ID: 5354)
  Prédit: '<<'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '<<' → logprob: -3.7697225252486533e-06
    2. '1' → logprob: -13.250003814697266
    3. ' <<' → logprob: -13.250003814697266
    4. '<' → logprob: -16.625003814697266
    5. '```' → logprob: -17.125003814697266
    6. '>>' → logprob: -17.750003814697266
    7. 'e' → logprob: -17.750003814697266
    8. '<<"' → logprob: -17.875003814697266
    9. '<<(' → logprob: -17.875003814697266
    10. '()<<' → logprob: -18.375003814697266

Token 297: '62' (ID: 8947)
  Prédit: '60'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '60' → logprob: -0.48838168382644653
    2. '62' → logprob: -0.9883816838264465
    3. '61' → logprob: -4.363381862640381
    4. '20' → logprob: -6.988381862640381
    5. '50' → logprob: -7.863381862640381
    6. '30' → logprob: -9.238381385803223
    7. '40' → logprob: -10.238381385803223
    8. '32' → logprob: -11.238381385803223
    9. '31' → logprob: -11.863381385803223
    10. '59' → logprob: -13.238381385803223

Token 298: ':
' (ID: 734)
  Prédit: ':'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ':' → logprob: -0.5759838223457336
    2. ':
' → logprob: -0.8259838223457336
    3. ':
' → logprob: -10.950984001159668
    4. ' :' → logprob: -11.450984001159668
    5. ' :
' → logprob: -12.575984001159668
    6. ':return' → logprob: -12.575984001159668
    7. 'print' → logprob: -12.700984001159668
    8. '   ' → logprob: -12.825984001159668
    9. ':

' → logprob: -13.700984001159668
    10. '):
' → logprob: -14.075984001159668

Token 299: '   ' (ID: 271)
  Prédit: 'print'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'print' → logprob: -0.0029096081852912903
    2. '   ' → logprob: -6.0029096603393555
    3. ' print' → logprob: -7.7529096603393555
    4. '-print' → logprob: -13.127909660339355
    5. '-' → logprob: -13.627909660339355
    6. '	print' → logprob: -14.502909660339355
    7. '```' → logprob: -14.752909660339355
    8. '_print' → logprob: -17.25290870666504
    9. ' -' → logprob: -17.50290870666504
    10. '.print' → logprob: -17.62790870666504

Token 300: ' print' (ID: 2123)
  Prédit: 'print'
  Correct (stricte): False
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'print' (adapté à ' print') → logprob: -5.512236498361744e-07
    2. ' print' → logprob: -15.000000953674316
    3. '```' → logprob: -16.125
    4. '-print' → logprob: -17.25
    5. '-' → logprob: -17.375
    6. '   ' → logprob: -17.75
    7. '``' → logprob: -20.375
    8. '
' → logprob: -21.125
    9. '	print' → logprob: -21.625
    10. 'Print' → logprob: -21.875

Token 301: '(-' (ID: 8087)
  Prédit: '-'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '-' → logprob: -0.02325328253209591
    2. '(-' → logprob: -3.7732532024383545
    3. ' -' → logprob: -12.273253440856934
    4. '("-' → logprob: -14.023253440856934
    5. '(' → logprob: -14.273253440856934
    6. '```' → logprob: -14.773253440856934
    7. '1' → logprob: -15.273253440856934
    8. '   ' → logprob: -15.398253440856934
    9. '{-' → logprob: -15.648253440856934
    10. '−' → logprob: -16.023252487182617

Token 302: '1' (ID: 16)
  Prédit: '1'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '1' → logprob: -3.128163257315464e-07
    2. ' ' → logprob: -15.375
    3. ')' → logprob: -18.375
    4. '１' → logprob: -18.875
    5. '```' → logprob: -18.875
    6. '   ' → logprob: -19.25
    7. '2' → logprob: -19.5
    8. '`' → logprob: -19.75
    9. '``' → logprob: -19.75
    10. '{' → logprob: -20.0625

Token 303: ')' (ID: 8)
  Prédit: ')'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')' → logprob: -0.014164921827614307
    2. ')
' → logprob: -4.264164924621582
    3. 'else' → logprob: -14.514164924621582
    4. ' )' → logprob: -14.639164924621582
    5. ')
' → logprob: -15.389164924621582
    6. '())' → logprob: -16.889163970947266
    7. ')`
' → logprob: -17.264163970947266
    8. '))' → logprob: -17.389163970947266
    9. '')' → logprob: -17.389163970947266
    10. '),' → logprob: -17.639163970947266

Token 304: ' ' (ID: 220)
  Prédit: 'else'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'else' → logprob: -3.547789674485102e-05
    2. ' else' → logprob: -10.250035285949707
    3. 'elif' → logprob: -21.875036239624023
    4. 'Else' → logprob: -22.000036239624023
    5. '_else' → logprob: -22.000036239624023
    6. 'elser' → logprob: -22.125036239624023
    7. 'print' → logprob: -22.125036239624023
    8. '}else' → logprob: -22.500036239624023
    9. '	else' → logprob: -22.750036239624023
    10. 'elses' → logprob: -22.875036239624023

Token 305: ' #' (ID: 1069)
  Prédit: 'else'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'else' → logprob: -3.547789674485102e-05
    2. ' else' → logprob: -10.250035285949707
    3. 'print' → logprob: -19.375036239624023
    4. 'els' → logprob: -20.625036239624023
    5. '
' → logprob: -20.750036239624023
    6. 'elser' → logprob: -21.125036239624023
    7. 'elif' → logprob: -21.375036239624023
    8. 'Else' → logprob: -21.375036239624023
    9. '_else' → logprob: -21.500036239624023
    10. ')' → logprob: -21.500036239624023

Token 306: ' trop' (ID: 14765)
  Prédit: 'else'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'else' → logprob: -0.25336533784866333
    2. ' else' → logprob: -1.7533652782440186
    3. 'print' → logprob: -3.3783652782440186
    4. 'return' → logprob: -5.253365516662598
    5. ' return' → logprob: -6.378365516662598
    6. 'pass' → logprob: -6.628365516662598
    7. ' print' → logprob: -6.753365516662598
    8. 'exit' → logprob: -6.878365516662598
    9. ' pass' → logprob: -7.378365516662598
    10. '0' → logprob: -7.378365516662598

Token 307: ' cher' (ID: 17824)
  Prédit: 'grand'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'grand' → logprob: -0.18761345744132996
    2. 'g' → logprob: -2.9376134872436523
    3. 'long' → logprob: -3.6876134872436523
    4. 'v' → logprob: -3.8126134872436523
    5. 'large' → logprob: -4.187613487243652
    6. 'd' → logprob: -4.437613487243652
    7. 'lo' → logprob: -4.687613487243652
    8. 'pet' → logprob: -5.562613487243652
    9. 'loin' → logprob: -6.062613487243652
    10. ' ' → logprob: -6.312613487243652

Token 308: ' ou' (ID: 2031)
  Prédit: 'else'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'else' → logprob: -1.0206720617134124e-05
    2. ' else' → logprob: -11.50001049041748
    3. 'print' → logprob: -19.375009536743164
    4. '```' → logprob: -20.000009536743164
    5. 'Else' → logprob: -21.000009536743164
    6. 'elif' → logprob: -21.000009536743164
    7. ')' → logprob: -21.000009536743164
    8. '}else' → logprob: -21.250009536743164
    9. '   ' → logprob: -21.625009536743164
    10. '
' → logprob: -21.750009536743164

Token 309: ' impossible' (ID: 19786)
  Prédit: 'im'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'im' → logprob: -0.09965285658836365
    2. 'pas' → logprob: -3.0996527671813965
    3. 'auc' → logprob: -3.3496527671813965
    4. 'in' → logprob: -5.4746527671813965
    5. 'inut' → logprob: -5.4746527671813965
    6. 'non' → logprob: -6.4746527671813965
    7. 'intr' → logprob: -6.7246527671813965
    8. '0' → logprob: -6.9746527671813965
    9. '#' → logprob: -7.3496527671813965
    10. '   ' → logprob: -7.8496527671813965

Token 310: '
' (ID: 198)
  Prédit: 'else'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'else' → logprob: -3.7697225252486533e-06
    2. ' else' → logprob: -12.500003814697266
    3. 'print' → logprob: -19.000003814697266
    4. 'elif' → logprob: -19.500003814697266
    5. 'elser' → logprob: -20.625003814697266
    6. '```' → logprob: -20.625003814697266
    7. 'Else' → logprob: -20.750003814697266
    8. '   ' → logprob: -21.375003814697266
    9. '_else' → logprob: -21.750003814697266
    10. 'elses' → logprob: -21.875003814697266

Token 311: 'else' (ID: 2807)
  Prédit: 'else'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'else' → logprob: -3.7697225252486533e-06
    2. ' else' → logprob: -13.000003814697266
    3. 'print' → logprob: -13.500003814697266
    4. 'elif' → logprob: -20.375003814697266
    5. 'Else' → logprob: -21.375003814697266
    6. '```' → logprob: -22.250003814697266
    7. '   ' → logprob: -22.375003814697266
    8. '}else' → logprob: -23.375003814697266
    9. '#else' → logprob: -23.750003814697266
    10. '	else' → logprob: -23.875003814697266

Token 312: ':
' (ID: 734)
  Prédit: ':'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ':' → logprob: -0.8519507646560669
    2. '   ' → logprob: -0.8519507646560669
    3. ' print' → logprob: -2.1019506454467773
    4. 'print' → logprob: -3.9769506454467773
    5. ':
' → logprob: -5.226950645446777
    6. ' :' → logprob: -8.101950645446777
    7. '(print' → logprob: -8.976950645446777
    8. ' :
' → logprob: -10.351950645446777
    9. '.print' → logprob: -11.226950645446777
    10. '	print' → logprob: -11.351950645446777

Token 313: '   ' (ID: 271)
  Prédit: 'print'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'print' → logprob: -0.0010075619211420417
    2. '   ' → logprob: -7.001007556915283
    3. ' print' → logprob: -9.251008033752441
    4. '```' → logprob: -17.376007080078125
    5. '	print' → logprob: -17.626007080078125
    6. '.print' → logprob: -20.376007080078125
    7. '(print' → logprob: -20.751007080078125
    8. '_print' → logprob: -21.876007080078125
    9. 'printf' → logprob: -21.876007080078125
    10. '#print' → logprob: -22.876007080078125

Token 314: ' print' (ID: 2123)
  Prédit: 'print'
  Correct (stricte): False
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'print' (adapté à ' print') → logprob: -8.180258191714529e-06
    2. ' print' → logprob: -11.750008583068848
    3. '   ' → logprob: -15.500008583068848
    4. '	print' → logprob: -20.50000762939453
    5. '```' → logprob: -21.87500762939453
    6. '.print' → logprob: -23.62500762939453
    7. 'printf' → logprob: -24.37500762939453
    8. '(print' → logprob: -24.87500762939453
    9. '  ' → logprob: -25.62500762939453
    10. '_print' → logprob: -25.62500762939453

Token 315: '(me' (ID: 53856)
  Prédit: '(me'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(me' → logprob: -7.822646693966817e-06
    2. 'me' → logprob: -12.000007629394531
    3. '(m' → logprob: -13.875007629394531
    4. '(' → logprob: -14.750007629394531
    5. '(ma' → logprob: -16.12500762939453
    6. '(best' → logprob: -16.62500762939453
    7. '(min' → logprob: -17.75000762939453
    8. '(Me' → logprob: -18.37500762939453
    9. ' (' → logprob: -19.25000762939453
    10. '	me' → logprob: -19.62500762939453

Token 316: 'illeur' (ID: 159909)
  Prédit: 'illeur'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'illeur' → logprob: -3.440506407059729e-05
    2. 'il' → logprob: -11.87503433227539
    3. 'ille' → logprob: -12.12503433227539
    4. 'ur' → logprob: -12.37503433227539
    5. 'uil' → logprob: -12.62503433227539
    6. 'ill' → logprob: -13.00003433227539
    7. 'iller' → logprob: -13.12503433227539
    8. 'illet' → logprob: -13.50003433227539
    9. '...' → logprob: -14.12503433227539
    10. 'eil' → logprob: -14.12503433227539

Token 317: ')
' (ID: 446)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')' → logprob: -1.2664456789934775e-06
    2. ' )' → logprob: -13.875000953674316
    3. '))' → logprob: -15.875000953674316
    4. ')
' → logprob: -16.750001907348633
    5. ')`' → logprob: -18.250001907348633
    6. '())' → logprob: -19.000001907348633
    7. ')#' → logprob: -19.125001907348633
    8. ')}' → logprob: -19.250001907348633
    9. '+' → logprob: -19.625001907348633
    10. '),' → logprob: -19.875001907348633

Token 318: '#' (ID: 2)
  Prédit: ''
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False

Token 319: ' Est' (ID: 4555)
  Prédit: ''
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False

Token 320: '-ce' (ID: 35404)
  Prédit: '#'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '#' → logprob: -0.00208721193484962
    2. '<|end|>' → logprob: -8.002087593078613
    3. 'ablished' → logprob: -9.127087593078613
    4. '-ce' → logprob: -9.252087593078613
    5. 'hétique' → logprob: -9.377087593078613
    6. ' #' → logprob: -9.377087593078613
    7. 'tle' → logprob: -9.627087593078613
    8. '#endregion' → logprob: -9.627087593078613
    9. ']' → logprob: -9.877087593078613
    10. ')' → logprob: -9.877087593078613

Token 321: ' qu' (ID: 474)
  Prédit: '?'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '?' → logprob: -0.8989703059196472
    2. '<|end|>' → logprob: -0.8989703059196472
    3. ' ' → logprob: -2.273970365524292
    4. ')' → logprob: -3.148970365524292
    5. '#' → logprob: -4.273970127105713
    6. '```' → logprob: -5.523970127105713
    7. '.' → logprob: -5.898970127105713
    8. '!' → logprob: -6.023970127105713
    9. '<|end|>' → logprob: -6.023970127105713
    10. ' fin' → logprob: -6.148970127105713

Token 322: ''il' (ID: 14683)
  Prédit: '#'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '#' → logprob: -0.6046876907348633
    2. ' ' → logprob: -1.7296876907348633
    3. '?' → logprob: -2.4796876907348633
    4. ''' → logprob: -2.4796876907348633
    5. '<|end|>' → logprob: -4.104687690734863
    6. '.' → logprob: -4.229687690734863
    7. ' ce' → logprob: -4.604687690734863
    8. '"' → logprob: -4.729687690734863
    9. '```' → logprob: -4.854687690734863
    10. 't' → logprob: -4.979687690734863

Token 323: ' y' (ID: 342)
  Prédit: '?'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '?' → logprob: -0.8670395612716675
    2. 'f' → logprob: -1.6170395612716675
    3. ' faut' → logprob: -2.117039680480957
    4. 's' → logprob: -3.367039680480957
    5. '#' → logprob: -3.367039680480957
    6. ' ' → logprob: -3.867039680480957
    7. ' possible' → logprob: -3.992039680480957
    8. ' ' → logprob: -4.117039680480957
    9. ''' → logprob: -4.492039680480957
    10. 'possible' → logprob: -4.617039680480957

Token 324: ' avait' (ID: 18892)
  Prédit: 'a'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'a' → logprob: -0.007329628802835941
    2. 'avait' → logprob: -5.38232946395874
    3. ' a' → logprob: -6.25732946395874
    4. '#' → logprob: -8.257329940795898
    5. ' avait' → logprob: -8.507329940795898
    6. '#a' → logprob: -8.882329940795898
    7. ''a' → logprob: -9.632329940795898
    8. ' aurait' → logprob: -10.382329940795898
    9. '```' → logprob: -10.382329940795898
    10. 'aur' → logprob: -10.632329940795898

Token 325: ' moyen' (ID: 46111)
  Prédit: 'une'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'une' → logprob: -0.1625949591398239
    2. 'plus' → logprob: -2.91259503364563
    3. 'd' → logprob: -3.53759503364563
    4. 'quel' → logprob: -3.91259503364563
    5. 'quoi' → logprob: -4.537594795227051
    6. ' autre' → logprob: -4.787594795227051
    7. 'un' → logprob: -4.787594795227051
    8. ' une' → logprob: -5.412594795227051
    9. '#' → logprob: -5.912594795227051
    10. 'aut' → logprob: -6.037594795227051

Token 326: ' de' (ID: 334)
  Prédit: ' de'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' de' → logprob: -1.02329421043396
    2. 'de' → logprob: -1.27329421043396
    3. ' d' → logprob: -1.77329421043396
    4. 'd' → logprob: -2.02329421043396
    5. '#' → logprob: -3.02329421043396
    6. '?' → logprob: -4.898294448852539
    7. ' ' → logprob: -6.773294448852539
    8. ' #' → logprob: -8.398294448852539
    9. '  ' → logprob: -8.773294448852539
    10. ' of' → logprob: -8.898294448852539

Token 327: ' faire' (ID: 8119)
  Prédit: 'faire'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'faire' → logprob: -0.561771035194397
    2. 'optim' → logprob: -1.186771035194397
    3. 'simpl' → logprob: -2.1867709159851074
    4. 'r' → logprob: -5.061770915985107
    5. 'am' → logprob: -6.186770915985107
    6. 'coder' → logprob: -7.686770915985107
    7. 'l' → logprob: -7.686770915985107
    8. 'ré' → logprob: -7.686770915985107
    9. ' faire' → logprob: -8.186771392822266
    10. 'f' → logprob: -8.436771392822266

Token 328: ' plus' (ID: 2932)
  Prédit: 'plus'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'plus' → logprob: -0.4249834418296814
    2. 'm' → logprob: -1.1749835014343262
    3. 'cela' → logprob: -4.174983501434326
    4. 'moins' → logprob: -4.799983501434326
    5. 'aut' → logprob: -5.299983501434326
    6. 'dav' → logprob: -6.299983501434326
    7. 'une' → logprob: -6.549983501434326
    8. 'diff' → logprob: -6.674983501434326
    9. 'quel' → logprob: -6.924983501434326
    10. 'ça' → logprob: -7.174983501434326

Token 329: ' rapide' (ID: 44887)
  Prédit: 'court'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'court' → logprob: -0.026768609881401062
    2. 'simple' → logprob: -4.401768684387207
    3. 'compact' → logprob: -4.776768684387207
    4. 'cour' → logprob: -6.276768684387207
    5. 'eff' → logprob: -6.776768684387207
    6. 'optim' → logprob: -7.026768684387207
    7. 'efficient' → logprob: -7.151768684387207
    8. '```' → logprob: -8.276768684387207
    9. ' court' → logprob: -8.401768684387207
    10. 'optimal' → logprob: -8.401768684387207

Token 330: ' ?' (ID: 1423)
  Prédit: '?'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '?' → logprob: -0.005525796674191952
    2. '#' → logprob: -5.505525588989258
    3. ' ?' → logprob: -7.255525588989258
    4. '<|end|>' → logprob: -7.630525588989258
    5. '```' → logprob: -9.755525588989258
    6. 'Yes' → logprob: -10.005525588989258
    7. '...' → logprob: -11.005525588989258
    8. ',' → logprob: -11.005525588989258
    9. '?id' → logprob: -11.130525588989258
    10. ' ' → logprob: -11.130525588989258

Token 331: ' Prob' (ID: 36768)
  Prédit: ''
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False

Token 332: 'ablement' (ID: 63986)
  Prédit: 'ablement'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'ablement' → logprob: -0.00027420982951298356
    2. 'ably' → logprob: -9.000274658203125
    3. 'lement' → logprob: -9.625274658203125
    4. 'lem' → logprob: -10.000274658203125
    5. 'able' → logprob: -10.500274658203125
    6. 'ablemente' → logprob: -12.375274658203125
    7. 'ly' → logprob: -12.625274658203125
    8. 'le' → logprob: -13.875274658203125
    9. 'l' → logprob: -14.000274658203125
    10. 'lems' → logprob: -14.125274658203125

Token 333: ',' (ID: 11)
  Prédit: ''
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False

Token 334: ' mais' (ID: 2899)
  Prédit: '#'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '#' → logprob: -0.0007517361082136631
    2. '...' → logprob: -8.750751495361328
    3. 'Yes' → logprob: -8.750751495361328
    4. '```' → logprob: -8.875751495361328
    5. 'Oui' → logprob: -9.875751495361328
    6. ' #' → logprob: -9.875751495361328
    7. ' but' → logprob: -10.875751495361328
    8. '   ' → logprob: -11.000751495361328
    9. 'pass' → logprob: -11.000751495361328
    10. ' ' → logprob: -11.125751495361328

Token 335: ' ça' (ID: 13590)
  Prédit: '#'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '#' → logprob: -0.0672943964600563
    2. 'non' → logprob: -3.9422943592071533
    3. '...' → logprob: -3.9422943592071533
    4. 'le' → logprob: -5.317294597625732
    5. '```' → logprob: -5.942294597625732
    6. 'pass' → logprob: -6.192294597625732
    7. 'c' → logprob: -6.442294597625732
    8. 'the' → logprob: -6.442294597625732
    9. 'je' → logprob: -6.567294597625732
    10. 'pas' → logprob: -6.942294597625732

Token 336: ' marche' (ID: 58191)
  Prédit: '#'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '#' → logprob: -0.47940149903297424
    2. 'n' → logprob: -1.9794014692306519
    3. '...' → logprob: -2.7294015884399414
    4. ' n' → logprob: -3.6044015884399414
    5. 's' → logprob: -3.9794015884399414
    6. 'est' → logprob: -3.9794015884399414
    7. ':' → logprob: -4.604401588439941
    8. 'sembler' → logprob: -4.729401588439941
    9. 'reste' → logprob: -4.854401588439941
    10. 'se' → logprob: -4.854401588439941


RÉSUMÉ:
--------------------------------------------------------------------------------
Total des tokens analysés: 334
Tokens correctement prédits (1ère position, stricte): 97
Tokens correctement prédits (1ère position, avec adaptation): 113
Tokens correctement prédits (top 10): 236
Précision stricte (1ère position): 29.04%
Précision adaptée (1ère position): 33.83%
Précision (top 10): 70.66%
================================================================================
