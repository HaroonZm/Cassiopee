================================================================================
ANALYSE DE PRÉDICTION TOKEN PAR TOKEN (BATCH API)
Date: 2025-06-04 20:06:42
Modèle de tokenisation: gpt-4o-mini
================================================================================

SCRIPT ANALYSÉ:
--------------------------------------------------------------------------------
from sys import stdin

def get_input():
    return stdin.readline()

def parse_int(value):
    return int(value)

def read_int():
    return parse_int(get_input())

def condition_n_lt_2(n):
    return n < 2

def print_hello_world():
    print('Hello World')

def get_A():
    return read_int()

def get_B():
    return read_int()

def add(a, b):
    return a + b

def print_result(result):
    print(result)

def process_case_n_lt_2():
    print_hello_world()

def process_case_n_ge_2():
    a = get_A()
    b = get_B()
    result = add(a, b)
    print_result(result)

def process_n(n):
    if condition_n_lt_2(n):
        process_case_n_lt_2()
    else:
        process_case_n_ge_2()

def main():
    n = read_int()
    process_n(n)

main()
--------------------------------------------------------------------------------

RÉSULTATS D'ANALYSE TOKEN PAR TOKEN:
--------------------------------------------------------------------------------
Token 0: 'from' (ID: 2845)
  → Token d'amorce (pas de prédiction)

Token 1: ' sys' (ID: 12228)
  → Token d'amorce (pas de prédiction)

Token 2: ' import' (ID: 1588)
  → Token d'amorce (pas de prédiction)

Token 3: ' stdin' (ID: 75143)
  Prédit: 'argv'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'argv' → logprob: -0.05142802372574806
    2. ' argv' → logprob: -3.4264280796051025
    3. 'exit' → logprob: -4.176427841186523
    4. ' exit' → logprob: -6.801427841186523
    5. 'stdout' → logprob: -7.301427841186523
    6. 'stdin' → logprob: -8.426427841186523
    7. 'path' → logprob: -8.801427841186523
    8. 'import' → logprob: -10.176427841186523
    9. 'stderr' → logprob: -10.426427841186523
    10. 'version' → logprob: -10.676427841186523

Token 4: '

' (ID: 279)
  Prédit: '.'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '.' → logprob: -0.0006454797694459558
    2. '.readline' → logprob: -8.250645637512207
    3. '\n' → logprob: -8.500645637512207
    4. '.
' → logprob: -10.125645637512207
    5. 'import' → logprob: -10.250645637512207
    6. '\' → logprob: -10.375645637512207
    7. '```' → logprob: -10.875645637512207
    8. '.read' → logprob: -10.875645637512207
    9. '' → logprob: -12.000645637512207
    10. ',' → logprob: -12.125645637512207

Token 5: 'def' (ID: 1314)
  Prédit: '.'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '.' → logprob: -0.026680389419198036
    2. '.readline' → logprob: -3.9016804695129395
    3. '.read' → logprob: -6.2766804695129395
    4. '\n' → logprob: -7.0266804695129395
    5. ',' → logprob: -7.4016804695129395
    6. 'for' → logprob: -7.5266804695129395
    7. 'print' → logprob: -7.7766804695129395
    8. 'import' → logprob: -7.9016804695129395
    9. '
' → logprob: -8.151679992675781
    10. '```' → logprob: -8.276679992675781

Token 6: ' get' (ID: 717)
  Prédit: ' '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' ' → logprob: -0.034600213170051575
    2. ' read' → logprob: -3.534600257873535
    3. ' process' → logprob: -6.034600257873535
    4. ' main' → logprob: -7.659600257873535
    5. ' space' → logprob: -7.909600257873535
    6. ' ' → logprob: -8.034600257873535
    7. '_read' → logprob: -8.284600257873535
    8. ' parse' → logprob: -8.659600257873535
    9. ' readline' → logprob: -8.909600257873535
    10. '_' → logprob: -9.659600257873535

Token 7: '_input' (ID: 12507)
  Prédit: '_'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_' → logprob: -0.39260926842689514
    2. '_input' → logprob: -2.2676093578338623
    3. '_line' → logprob: -2.5176093578338623
    4. '_data' → logprob: -2.5176093578338623
    5. '_user' → logprob: -3.3926093578338623
    6. ' _' → logprob: -5.017609119415283
    7. '_next' → logprob: -5.642609119415283
    8. '_value' → logprob: -6.642609119415283
    9. 'line' → logprob: -6.767609119415283
    10. '_max' → logprob: -6.892609119415283

Token 8: '():
' (ID: 8595)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '(' → logprob: -0.29466861486434937
    2. '():' → logprob: -1.4196686744689941
    3. '_' → logprob: -4.544668674468994
    4. '("("' → logprob: -7.669668674468994
    5. '_line' → logprob: -7.669668674468994
    6. '()' → logprob: -8.419668197631836
    7. '(_' → logprob: -8.544668197631836
    8. ' ():' → logprob: -8.669668197631836
    9. ' (' → logprob: -9.044668197631836
    10. '):' → logprob: -9.169668197631836

Token 9: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.07201101630926132
    2. ' return' → logprob: -3.0720109939575195
    3. 'return' → logprob: -5.0720109939575195
    4. '(' → logprob: -5.0720109939575195
    5. '    
' → logprob: -5.5720109939575195
    6. '    ' → logprob: -6.0720109939575195
    7. '()' → logprob: -6.6970109939575195
    8. '\' → logprob: -7.3220109939575195
    9. ' ' → logprob: -7.6970109939575195
    10. '(stdin' → logprob: -7.9470109939575195

Token 10: ' return' (ID: 622)
  Prédit: 'return'
  Correct (stricte): False
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'return' (adapté à ' return') → logprob: -0.15296940505504608
    2. '   ' → logprob: -2.2779693603515625
    3. ' return' → logprob: -3.4029693603515625
    4. 'line' → logprob: -5.7779693603515625
    5. ' line' → logprob: -6.6529693603515625
    6. 'data' → logprob: -6.7779693603515625
    7. 'for' → logprob: -8.777969360351562
    8. 'input' → logprob: -8.902969360351562
    9. ' ' → logprob: -10.027969360351562
    10. 'text' → logprob: -10.152969360351562

Token 11: ' stdin' (ID: 75143)
  Prédit: ' stdin'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' stdin' → logprob: -0.07978658378124237
    2. 'stdin' → logprob: -2.579786539077759
    3. '(stdin' → logprob: -7.079786777496338
    4. ' ' → logprob: -10.70478630065918
    5. '.stdin' → logprob: -10.95478630065918
    6. ' list' → logprob: -11.95478630065918
    7. ' std' → logprob: -12.95478630065918
    8. 'list' → logprob: -13.57978630065918
    9. ' ' → logprob: -14.20478630065918
    10. 'stdout' → logprob: -14.32978630065918

Token 12: '.readline' (ID: 74673)
  Prédit: '.readline'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '.readline' → logprob: -0.03088480234146118
    2. '.read' → logprob: -3.6558847427368164
    3. '.' → logprob: -5.405884742736816
    4. 'read' → logprob: -10.155884742736816
    5. '.readlines' → logprob: -10.530884742736816
    6. '().' → logprob: -11.280884742736816
    7. '.Read' → logprob: -12.780884742736816
    8. '.write' → logprob: -14.030884742736816
    9. '```' → logprob: -14.030884742736816
    10. '()' → logprob: -14.530884742736816

Token 13: '()

' (ID: 5874)
  Prédit: '()'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '()' → logprob: -0.005024779122322798
    2. '(' → logprob: -5.6300249099731445
    3. '().' → logprob: -6.7550249099731445
    4. ' ()' → logprob: -9.130024909973145
    5. '()(' → logprob: -10.255024909973145
    6. '()
' → logprob: -10.255024909973145
    7. '`()' → logprob: -10.505024909973145
    8. '()\' → logprob: -11.130024909973145
    9. '```' → logprob: -11.880024909973145
    10. '()

' → logprob: -12.255024909973145

Token 14: 'def' (ID: 1314)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(' → logprob: -0.5106471180915833
    2. '()' → logprob: -1.0106470584869385
    3. 'def' → logprob: -4.385647296905518
    4. ')' → logprob: -5.635647296905518
    5. 'a' → logprob: -6.135647296905518
    6. '(
' → logprob: -6.135647296905518
    7. '```' → logprob: -6.135647296905518
    8. '<|end|>' → logprob: -6.135647296905518
    9. 's' → logprob: -6.260647296905518
    10. '#' → logprob: -6.760647296905518

Token 15: ' parse' (ID: 8420)
  Prédit: ' main'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' main' → logprob: -0.5552965402603149
    2. ' calculate' → logprob: -1.055296540260315
    3. ' process' → logprob: -3.9302964210510254
    4. ' get' → logprob: -4.055296421051025
    5. ' parse' → logprob: -4.555296421051025
    6. ' read' → logprob: -5.805296421051025
    7. ' compute' → logprob: -5.805296421051025
    8. ' test' → logprob: -5.930296421051025
    9. ' my' → logprob: -5.930296421051025
    10. ' add' → logprob: -6.055296421051025

Token 16: '_int' (ID: 12285)
  Prédit: '_line'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '_line' → logprob: -0.7565485239028931
    2. '(' → logprob: -1.381548523902893
    3. '_input' → logprob: -1.506548523902893
    4. '_' → logprob: -3.7565484046936035
    5. '(line' → logprob: -4.1315484046936035
    6. '()' → logprob: -5.3815484046936035
    7. '(input' → logprob: -6.0065484046936035
    8. '_data' → logprob: -6.1315484046936035
    9. '_token' → logprob: -6.1315484046936035
    10. '_tokens' → logprob: -7.1315484046936035

Token 17: '(value' (ID: 6333)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '(' → logprob: -0.012308083474636078
    2. 's' → logprob: -4.512308120727539
    3. '()' → logprob: -7.637308120727539
    4. '(s' → logprob: -8.387308120727539
    5. '():' → logprob: -9.012308120727539
    6. '("("' → logprob: -9.012308120727539
    7. '(line' → logprob: -9.762308120727539
    8. ' (' → logprob: -10.137308120727539
    9. '```' → logprob: -10.137308120727539
    10. '(token' → logprob: -10.387308120727539

Token 18: '):
' (ID: 1883)
  Prédit: '):'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '):' → logprob: -0.007387382443994284
    2. ')' → logprob: -5.007387161254883
    3. '):
' → logprob: -7.507387161254883
    4. '   ' → logprob: -10.382387161254883
    5. ' ):' → logprob: -10.507387161254883
    6. ',' → logprob: -11.507387161254883
    7. '(' → logprob: -11.757387161254883
    8. '):
' → logprob: -11.882387161254883
    9. ':' → logprob: -11.882387161254883
    10. 's' → logprob: -12.007387161254883

Token 19: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.11958929896354675
    2. ' return' → logprob: -2.994589328765869
    3. ' int' → logprob: -3.369589328765869
    4. 'int' → logprob: -4.119589328765869
    5. '    ' → logprob: -5.119589328765869
    6. '(int' → logprob: -5.494589328765869
    7. 'return' → logprob: -7.119589328765869
    8. '=int' → logprob: -7.744589328765869
    9. ' value' → logprob: -8.619588851928711
    10. '[int' → logprob: -9.119588851928711

Token 20: ' return' (ID: 622)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.35054194927215576
    2. ' return' → logprob: -1.2255419492721558
    3. 'return' (adapté à ' return') → logprob: -6.475542068481445
    4. ' int' → logprob: -7.850542068481445
    5. 'int' → logprob: -9.350542068481445
    6. ' try' → logprob: -10.225542068481445
    7. '    ' → logprob: -10.475542068481445
    8. '```' → logprob: -12.600542068481445
    9. '	return' → logprob: -12.975542068481445
    10. ' ' → logprob: -13.225542068481445

Token 21: ' int' (ID: 677)
  Prédit: ' int'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' int' → logprob: -5.133198283147067e-05
    2. 'int' → logprob: -10.000051498413086
    3. ' ' → logprob: -12.250051498413086
    4. '(int' → logprob: -14.375051498413086
    5. ' ' → logprob: -16.000051498413086
    6. '=int' → logprob: -16.625051498413086
    7. ' in' → logprob: -16.625051498413086
    8. '[int' → logprob: -17.000051498413086
    9. '	int' → logprob: -17.375051498413086
    10. '<int' → logprob: -17.625051498413086

Token 22: '(value' (ID: 6333)
  Prédit: '(value'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(value' → logprob: -0.16022615134716034
    2. '(' → logprob: -1.9102261066436768
    3. '(token' → logprob: -14.910225868225098
    4. ')value' → logprob: -15.035225868225098
    5. '('' → logprob: -15.410225868225098
    6. '(user' → logprob: -16.035226821899414
    7. ' (' → logprob: -16.285226821899414
    8. '<|end|>' → logprob: -16.285226821899414
    9. '```' → logprob: -16.285226821899414
    10. '(`' → logprob: -16.660226821899414

Token 23: ')

' (ID: 1029)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ')' → logprob: -4.842555426876061e-06
    2. '))' → logprob: -13.125004768371582
    3. ')))' → logprob: -13.875004768371582
    4. ' )' → logprob: -15.125004768371582
    5. '`)' → logprob: -15.375004768371582
    6. '   ' → logprob: -15.500004768371582
    7. ')
' → logprob: -15.625004768371582
    8. ')}}' → logprob: -15.625004768371582
    9. ')])' → logprob: -15.625004768371582
    10. '')' → logprob: -16.0000057220459

Token 24: 'def' (ID: 1314)
  Prédit: 'def'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'def' → logprob: -0.6450566053390503
    2. '
' → logprob: -1.6450566053390503
    3. '\n' → logprob: -2.14505672454834
    4. '\' → logprob: -2.77005672454834
    5. '<|end|>' → logprob: -3.52005672454834
    6. '#' → logprob: -3.77005672454834
    7. 'd' → logprob: -4.27005672454834
    8. 'n' → logprob: -4.77005672454834
    9. 'newline' → logprob: -5.27005672454834
    10. '

' → logprob: -5.27005672454834

Token 25: ' read' (ID: 1729)
  Prédit: ' calculate'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' calculate' → logprob: -1.5747281312942505
    2. ' main' → logprob: -1.6997281312942505
    3. ' get' → logprob: -1.8247281312942505
    4. ' process' → logprob: -2.199728012084961
    5. ' parse' → logprob: -2.199728012084961
    6. ' compute' → logprob: -2.824728012084961
    7. ' add' → logprob: -2.949728012084961
    8. ' multiply' → logprob: -3.074728012084961
    9. ' convert' → logprob: -3.824728012084961
    10. ' sum' → logprob: -4.699728012084961

Token 26: '_int' (ID: 12285)
  Prédit: '_line'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '_line' → logprob: -0.003572865156456828
    2. '()' → logprob: -6.503572940826416
    3. '_input' → logprob: -7.003572940826416
    4. '_' → logprob: -7.253572940826416
    5. 'line' → logprob: -8.128572463989258
    6. '_token' → logprob: -10.253572463989258
    7. '_lines' → logprob: -10.378572463989258
    8. '_data' → logprob: -10.753572463989258
    9. '_LINE' → logprob: -11.753572463989258
    10. 'Line' → logprob: -12.128572463989258

Token 27: '():
' (ID: 8595)
  Prédit: '()'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '()' → logprob: -0.030312230810523033
    2. 's' → logprob: -3.7803122997283936
    3. '_line' → logprob: -5.1553120613098145
    4. '_list' → logprob: -8.155312538146973
    5. '_s' → logprob: -8.405312538146973
    6. '():' → logprob: -9.530312538146973
    7. ']()' → logprob: -9.655312538146973
    8. '`()' → logprob: -9.655312538146973
    9. '_value' → logprob: -9.780312538146973
    10. '_input' → logprob: -10.030312538146973

Token 28: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -5.931863051955588e-05
    2. 'return' → logprob: -10.625059127807617
    3. '()' → logprob: -11.375059127807617
    4. ' return' → logprob: -11.875059127807617
    5. '    
' → logprob: -12.000059127807617
    6. '(' → logprob: -12.250059127807617
    7. '    ' → logprob: -13.500059127807617
    8. '       ' → logprob: -14.375059127807617
    9. '   ' → logprob: -14.375059127807617
    10. '	return' → logprob: -14.500059127807617

Token 29: ' return' (ID: 622)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.000546122610103339
    2. '  ' → logprob: -9.0005464553833
    3. 'return' (adapté à ' return') → logprob: -9.0005464553833
    4. '    ' → logprob: -9.2505464553833
    5. ' return' → logprob: -9.7505464553833
    6. ' ' → logprob: -9.7505464553833
    7. 'value' → logprob: -10.2505464553833
    8. '    
' → logprob: -11.0005464553833
    9. 'r' → logprob: -11.3755464553833
    10. ' value' → logprob: -11.8755464553833

Token 30: ' parse' (ID: 8420)
  Prédit: ' int'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' int' → logprob: -0.6966468095779419
    2. ' parse' → logprob: -0.6966468095779419
    3. 'parse' → logprob: -5.946646690368652
    4. 'int' → logprob: -7.196646690368652
    5. ' get' → logprob: -9.321646690368652
    6. '(parse' → logprob: -11.571646690368652
    7. '   ' → logprob: -11.696646690368652
    8. ' ' → logprob: -11.696646690368652
    9. '(int' → logprob: -12.321646690368652
    10. '  ' → logprob: -13.071646690368652

Token 31: '_int' (ID: 12285)
  Prédit: '_int'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_int' → logprob: -6.110668618930504e-05
    2. '_' → logprob: -10.12506103515625
    3. 'int' → logprob: -11.87506103515625
    4. '_in' → logprob: -12.25006103515625
    5. '_val' → logprob: -12.62506103515625
    6. 't' → logprob: -14.12506103515625
    7. '(_' → logprob: -14.50006103515625
    8. '_t' → logprob: -14.50006103515625
    9. '_i' → logprob: -14.50006103515625
    10. '<int' → logprob: -14.50006103515625

Token 32: '(get' (ID: 7119)
  Prédit: '(get'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(get' → logprob: -0.03819388896226883
    2. '(' → logprob: -3.538193941116333
    3. '(stdin' → logprob: -4.788193702697754
    4. '(st' → logprob: -10.288193702697754
    5. '(read' → logprob: -11.038193702697754
    6. '(
' → logprob: -11.413193702697754
    7. '("("' → logprob: -11.538193702697754
    8. '(

' → logprob: -13.663193702697754
    9. '(paren' → logprob: -13.788193702697754
    10. ' (' → logprob: -14.163193702697754

Token 33: '_input' (ID: 12507)
  Prédit: '_input'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_input' → logprob: -1.7432603272027336e-06
    2. '_' → logprob: -13.500001907348633
    3. '_in' → logprob: -16.125001907348633
    4. '_line' → logprob: -16.250001907348633
    5. '_Input' → logprob: -18.000001907348633
    6. '_int' → logprob: -18.250001907348633
    7. '_inputs' → logprob: -18.750001907348633
    8. '_value' → logprob: -19.000001907348633
    9. '_output' → logprob: -19.250001907348633
    10. '_INPUT' → logprob: -20.000001907348633

Token 34: '())

' (ID: 27654)
  Prédit: '())'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '())' → logprob: -0.004092528019100428
    2. '()' → logprob: -5.504092693328857
    3. '()))' → logprob: -12.0040922164917
    4. '())
' → logprob: -12.2540922164917
    5. ' ())' → logprob: -13.8790922164917
    6. ')' → logprob: -14.3790922164917
    7. '().' → logprob: -14.7540922164917
    8. '()
' → logprob: -14.8790922164917
    9. '();)' → logprob: -14.8790922164917
    10. '())

' → logprob: -15.1290922164917

Token 35: 'def' (ID: 1314)
  Prédit: '#'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '#' → logprob: -0.18381242454051971
    2. '
' → logprob: -3.558812379837036
    3. 'n' → logprob: -3.683812379837036
    4. 'd' → logprob: -3.808812379837036
    5. 'def' → logprob: -3.808812379837036
    6. '\n' → logprob: -4.183812618255615
    7. '\' → logprob: -4.308812618255615
    8. '<|end|>' → logprob: -4.308812618255615
    9. 'r' → logprob: -5.058812618255615
    10. 'x' → logprob: -5.183812618255615

Token 36: ' condition' (ID: 7060)
  Prédit: ' main'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' main' → logprob: -0.05978686362504959
    2. ' write' → logprob: -3.684786796569824
    3. ' read' → logprob: -4.434786796569824
    4. ' calculate' → logprob: -4.809786796569824
    5. ' solve' → logprob: -5.559786796569824
    6. ' process' → logprob: -6.184786796569824
    7. ' parse' → logprob: -6.684786796569824
    8. ' sum' → logprob: -6.684786796569824
    9. ' compute' → logprob: -6.809786796569824
    10. ' multiply' → logprob: -7.434786796569824

Token 37: '_n' (ID: 2170)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '(' → logprob: -0.12185691297054291
    2. '():' → logprob: -2.996856927871704
    3. 's' → logprob: -3.371856927871704
    4. '(s' → logprob: -4.246856689453125
    5. '_' → logprob: -5.246856689453125
    6. ':' → logprob: -5.496856689453125
    7. '()' → logprob: -5.996856689453125
    8. '(:' → logprob: -7.121856689453125
    9. '(a' → logprob: -7.371856689453125
    10. ' (' → logprob: -7.746856689453125

Token 38: '_lt' (ID: 148773)
  Prédit: '()'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '()' → logprob: -1.1984072923660278
    2. 'ame' → logprob: -1.3234072923660278
    3. 'umber' → logprob: -2.0734071731567383
    4. 'um' → logprob: -2.3234071731567383
    5. 'ext' → logprob: -2.3234071731567383
    6. 'ot' → logprob: -3.3234071731567383
    7. '_' → logprob: -3.6984071731567383
    8. '(' → logprob: -4.823407173156738
    9. '():' → logprob: -5.198407173156738
    10. '()==' → logprob: -5.573407173156738

Token 39: '_' (ID: 62)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(' → logprob: -1.2292659282684326
    2. '_eq' → logprob: -1.6042659282684326
    3. '_' → logprob: -1.9792659282684326
    4. 'eq' → logprob: -2.1042659282684326
    5. '(_' → logprob: -2.3542659282684326
    6. '(n' → logprob: -2.9792659282684326
    7. '_or' → logprob: -3.8542659282684326
    8. '_value' → logprob: -4.854266166687012
    9. '(value' → logprob: -4.979266166687012
    10. '_(' → logprob: -4.979266166687012

Token 40: '2' (ID: 17)
  Prédit: '100'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '100' → logprob: -0.9203411340713501
    2. '10' → logprob: -1.54534113407135
    3. '=' → logprob: -2.2953410148620605
    4. 'm' → logprob: -3.2953410148620605
    5. '20' → logprob: -3.4203410148620605
    6. '5' → logprob: -3.5453410148620605
    7. '1' → logprob: -3.7953410148620605
    8. '0' → logprob: -3.9203410148620605
    9. 'read' → logprob: -3.9203410148620605
    10. 'k' → logprob: -4.0453410148620605

Token 41: '(n' (ID: 2406)
  Prédit: '(n'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(n' → logprob: -0.9526028633117676
    2. '():' → logprob: -1.0776028633117676
    3. '(' → logprob: -1.3276028633117676
    4. '(:' → logprob: -5.702602863311768
    5. '(x' → logprob: -5.952602863311768
    6. '()' → logprob: -6.827602863311768
    7. '(_' → logprob: -7.952602863311768
    8. '(value' → logprob: -8.20260238647461
    9. ':' → logprob: -8.57760238647461
    10. '_' → logprob: -9.07760238647461

Token 42: '):
' (ID: 1883)
  Prédit: '):'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '):' → logprob: -0.03162320330739021
    2. ')' → logprob: -3.656623125076294
    3. ' ):' → logprob: -5.281623363494873
    4. ' )' → logprob: -8.781622886657715
    5. '):
' → logprob: -10.531622886657715
    6. '>' → logprob: -11.031622886657715
    7. ')>' → logprob: -12.406622886657715
    8. ' <' → logprob: -12.406622886657715
    9. ' ' → logprob: -12.531622886657715
    10. ' >' → logprob: -12.656622886657715

Token 43: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.029943939298391342
    2. ':' → logprob: -3.5299439430236816
    3. ':
' → logprob: -10.029943466186523
    4. '():' → logprob: -10.154943466186523
    5. ' :' → logprob: -10.279943466186523
    6. '):' → logprob: -11.279943466186523
    7. '    ' → logprob: -11.529943466186523
    8. '  ' → logprob: -11.529943466186523
    9. ':return' → logprob: -11.529943466186523
    10. ' return' → logprob: -11.779943466186523

Token 44: ' return' (ID: 622)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.10163335502147675
    2. ' return' → logprob: -2.351633310317993
    3. 'return' (adapté à ' return') → logprob: -6.851633548736572
    4. ' n' → logprob: -8.601633071899414
    5. '    ' → logprob: -8.851633071899414
    6. ' ' → logprob: -11.351633071899414
    7. 'n' → logprob: -11.601633071899414
    8. '  ' → logprob: -12.101633071899414
    9. ' if' → logprob: -12.101633071899414
    10. '	return' → logprob: -12.601633071899414

Token 45: ' n' (ID: 297)
  Prédit: ' n'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' n' → logprob: -0.02633594535291195
    2. 'n' → logprob: -3.6513359546661377
    3. ' ' → logprob: -10.776335716247559
    4. ' ' → logprob: -11.651335716247559
    5. '(n' → logprob: -13.276335716247559
    6. ' (' → logprob: -13.901335716247559
    7. '	n' → logprob: -14.026335716247559
    8. '(' → logprob: -14.401335716247559
    9. ' False' → logprob: -14.401335716247559
    10. 'False' → logprob: -14.901335716247559

Token 46: ' <' (ID: 464)
  Prédit: ' <'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' <' → logprob: -0.04353950917720795
    2. '<' → logprob: -3.168539524078369
    3. ' ' → logprob: -8.543539047241211
    4. ' <=' → logprob: -8.668539047241211
    5. ' >=' → logprob: -9.293539047241211
    6. ' >' → logprob: -10.168539047241211
    7. '>' → logprob: -11.543539047241211
    8. '<=' → logprob: -11.918539047241211
    9. '>=' → logprob: -12.418539047241211
    10. '[' → logprob: -12.668539047241211

Token 47: ' ' (ID: 220)
  Prédit: '2'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '2' → logprob: -0.6931766867637634
    2. ' ' → logprob: -0.6931766867637634
    3. ' ' → logprob: -11.44317626953125
    4. '3' → logprob: -12.56817626953125
    5. '`' → logprob: -12.94317626953125
    6. '```' → logprob: -13.44317626953125
    7. ''' → logprob: -13.50567626953125
    8. '_' → logprob: -13.56817626953125
    9. '=' → logprob: -13.56817626953125
    10. '1' → logprob: -13.63067626953125

Token 48: '2' (ID: 17)
  Prédit: '2'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '2' → logprob: -0.00038241007132455707
    2. ' ' → logprob: -7.875382423400879
    3. '   ' → logprob: -13.875382423400879
    4. '```' → logprob: -15.000382423400879
    5. '  ' → logprob: -15.250382423400879
    6. '`' → logprob: -15.500382423400879
    7. '3' → logprob: -16.187881469726562
    8. '"' → logprob: -16.312881469726562
    9. ''' → logprob: -16.500381469726562
    10. '=' → logprob: -16.687881469726562

Token 49: '

' (ID: 279)
  Prédit: '
'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '
' → logprob: -0.7306879758834839
    2. '

' → logprob: -1.2306879758834839
    3. '\n' → logprob: -1.6056879758834839
    4. '<|end|>' → logprob: -4.480688095092773
    5. 'def' → logprob: -5.480688095092773
    6. '\' → logprob: -5.730688095092773
    7. '```' → logprob: -5.855688095092773
    8. ':' → logprob: -6.980688095092773
    9. '#' → logprob: -7.730688095092773
    10. 'newline' → logprob: -7.980688095092773

Token 50: 'def' (ID: 1314)
  Prédit: 'def'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'def' → logprob: -0.007017395459115505
    2. '
' → logprob: -6.507017612457275
    3. '<|end|>' → logprob: -6.507017612457275
    4. '

' → logprob: -6.757017612457275
    5. '#' → logprob: -7.007017612457275
    6. '```' → logprob: -7.632017612457275
    7. '\n' → logprob: -8.007017135620117
    8. '\' → logprob: -8.132017135620117
    9. 'n' → logprob: -8.257017135620117
    10. '<|end|>' → logprob: -8.382017135620117

Token 51: ' print' (ID: 2123)
  Prédit: ' main'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' main' → logprob: -0.613119900226593
    2. ' condition' → logprob: -1.1131198406219482
    3. ' process' → logprob: -3.4881198406219482
    4. ' is' → logprob: -3.4881198406219482
    5. ' solve' → logprob: -4.238120079040527
    6. ' factorial' → logprob: -4.738120079040527
    7. ' check' → logprob: -4.863120079040527
    8. ' calculate' → logprob: -4.863120079040527
    9. 'condition' → logprob: -5.738120079040527
    10. 'main' → logprob: -5.863120079040527

Token 52: '_' (ID: 62)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(' → logprob: -0.06629160046577454
    2. '()' → logprob: -2.941291570663452
    3. '("")' → logprob: -5.566291809082031
    4. '("("' → logprob: -5.941291809082031
    5. '("' → logprob: -6.191291809082031
    6. '_' → logprob: -6.941291809082031
    7. '('' → logprob: -7.691291809082031
    8. '_line' → logprob: -8.441291809082031
    9. '_(' → logprob: -9.441291809082031
    10. ' (' → logprob: -9.441291809082031

Token 53: 'hello' (ID: 24912)
  Prédit: 'result'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'result' → logprob: -0.9863397479057312
    2. '("' → logprob: -1.236339807510376
    3. 'line' → logprob: -2.986339807510376
    4. '(-' → logprob: -3.361339807510376
    5. 'yes' → logprob: -3.361339807510376
    6. 'no' → logprob: -3.361339807510376
    7. '"' → logprob: -3.736339807510376
    8. '(' → logprob: -3.986339807510376
    9. '(n' → logprob: -4.111339569091797
    10. 'n' → logprob: -4.361339569091797

Token 54: '_world' (ID: 76816)
  Prédit: '()'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '()' → logprob: -0.016267672181129456
    2. '():' → logprob: -4.516267776489258
    3. '_world' → logprob: -5.391267776489258
    4. '(' → logprob: -8.391267776489258
    5. '_' → logprob: -8.766267776489258
    6. ' ()' → logprob: -9.641267776489258
    7. '():
' → logprob: -9.766267776489258
    8. '()`' → logprob: -10.766267776489258
    9. 'World' → logprob: -10.891267776489258
    10. '()
' → logprob: -11.391267776489258

Token 55: '():
' (ID: 8595)
  Prédit: '():'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '():' → logprob: -0.02981541119515896
    2. '()' → logprob: -3.529815435409546
    3. '():
' → logprob: -10.529815673828125
    4. ' ():' → logprob: -10.779815673828125
    5. ' ()' → logprob: -12.029815673828125
    6. '(' → logprob: -12.029815673828125
    7. ':' → logprob: -13.404815673828125
    8. '()">' → logprob: -13.904815673828125
    9. '_' → logprob: -14.529815673828125
    10. '()`' → logprob: -14.904815673828125

Token 56: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.0008658452425152063
    2. 'print' → logprob: -7.750865936279297
    3. ' print' → logprob: -7.875865936279297
    4. '```' → logprob: -10.750865936279297
    5. '(' → logprob: -11.125865936279297
    6. '()' → logprob: -11.375865936279297
    7. '   ' → logprob: -13.250865936279297
    8. '       ' → logprob: -13.500865936279297
    9. '	print' → logprob: -14.000865936279297
    10. '    
' → logprob: -14.000865936279297

Token 57: ' print' (ID: 2123)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -1.0220905542373657
    2. ' print' → logprob: -1.0220905542373657
    3. 'print' (adapté à ' print') → logprob: -1.2720905542373657
    4. '```' → logprob: -9.897090911865234
    5. '    ' → logprob: -11.397090911865234
    6. '	print' → logprob: -12.647090911865234
    7. ' ' → logprob: -13.397090911865234
    8. '  ' → logprob: -13.897090911865234
    9. '``' → logprob: -14.022090911865234
    10. '`' → logprob: -14.147090911865234

Token 58: '('' (ID: 706)
  Prédit: '("'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '("' → logprob: -0.023270171135663986
    2. '(' → logprob: -3.8982701301574707
    3. '('' → logprob: -6.148270130157471
    4. '("("' → logprob: -7.523270130157471
    5. '("")' → logprob: -10.898270606994629
    6. '()' → logprob: -11.398270606994629
    7. '   ' → logprob: -12.398270606994629
    8. ' ("' → logprob: -12.398270606994629
    9. '("""' → logprob: -13.273270606994629
    10. '(""' → logprob: -13.398270606994629

Token 59: 'Hello' (ID: 13225)
  Prédit: 'Hello'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'Hello' → logprob: -3.702754474943504e-05
    2. 'hello' → logprob: -10.25003719329834
    3. ' Hello' → logprob: -13.50003719329834
    4. 'HEL' → logprob: -16.125036239624023
    5. 'Hell' → logprob: -16.875036239624023
    6. '>Hello' → logprob: -17.125036239624023
    7. '   ' → logprob: -17.500036239624023
    8. ''' → logprob: -17.500036239624023
    9. 'H' → logprob: -17.625036239624023
    10. 'Hallo' → logprob: -18.000036239624023

Token 60: ' World' (ID: 5922)
  Prédit: ' World'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' World' → logprob: -0.10599444061517715
    2. ',' → logprob: -2.355994462966919
    3. 'World' → logprob: -5.23099422454834
    4. ' world' → logprob: -7.85599422454834
    5. ' ' → logprob: -11.10599422454834
    6. ' ,' → logprob: -11.85599422454834
    7. '_world' → logprob: -12.35599422454834
    8. '   ' → logprob: -12.48099422454834
    9. '  ' → logprob: -13.73099422454834
    10. 'world' → logprob: -14.60599422454834

Token 61: '')

' (ID: 9735)
  Prédit: '')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '')' → logprob: -0.03805548697710037
    2. '!' → logprob: -3.288055419921875
    3. ''' → logprob: -11.913055419921875
    4. '')
' → logprob: -12.788055419921875
    5. '()' → logprob: -13.413055419921875
    6. ')' → logprob: -13.788055419921875
    7. '")' → logprob: -14.163055419921875
    8. '!")' → logprob: -14.663055419921875
    9. '!'' → logprob: -14.788055419921875
    10. '!')
' → logprob: -15.663055419921875

Token 62: 'def' (ID: 1314)
  Prédit: 'def'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'def' → logprob: -0.4563155472278595
    2. 'n' → logprob: -1.206315517425537
    3. 'if' → logprob: -2.706315517425537
    4. '```' → logprob: -9.081315994262695
    5. '\' → logprob: -10.081315994262695
    6. 'for' → logprob: -10.331315994262695
    7. 'ndef' → logprob: -10.331315994262695
    8. '    
' → logprob: -11.081315994262695
    9. '\n' → logprob: -11.081315994262695
    10. '
' → logprob: -11.456315994262695

Token 63: ' get' (ID: 717)
  Prédit: ' main'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' main' → logprob: -0.12751026451587677
    2. 'main' → logprob: -2.1275103092193604
    3. ' run' → logprob: -8.502510070800781
    4. ' process' → logprob: -9.752510070800781
    5. '_main' → logprob: -9.752510070800781
    6. 'if' → logprob: -9.877510070800781
    7. 'process' → logprob: -9.877510070800781
    8. 'run' → logprob: -10.377510070800781
    9. ' solve' → logprob: -10.502510070800781
    10. 'def' → logprob: -10.752510070800781

Token 64: '_A' (ID: 6829)
  Prédit: '_input'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '_input' → logprob: -0.6287267804145813
    2. '_n' → logprob: -1.8787267208099365
    3. '_' → logprob: -2.0037267208099365
    4. '_name' → logprob: -3.1287267208099365
    5. '_output' → logprob: -3.7537267208099365
    6. '_user' → logprob: -4.128726959228516
    7. '_result' → logprob: -4.378726959228516
    8. '_number' → logprob: -4.503726959228516
    9. '_sum' → logprob: -4.878726959228516
    10. '_list' → logprob: -5.003726959228516

Token 65: '():
' (ID: 8595)
  Prédit: '():'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '():' → logprob: -0.01572181098163128
    2. '(n' → logprob: -5.015721797943115
    3. '():
' → logprob: -5.640721797943115
    4. '_value' → logprob: -6.390721797943115
    5. '_list' → logprob: -7.015721797943115
    6. '_input' → logprob: -7.515721797943115
    7. '_values' → logprob: -8.015722274780273
    8. '_' → logprob: -8.390722274780273
    9. '(' → logprob: -8.765722274780273
    10. '(i' → logprob: -8.890722274780273

Token 66: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.01731223799288273
    2. 'return' → logprob: -4.517312049865723
    3. '[]' → logprob: -6.017312049865723
    4. 'int' → logprob: -6.517312049865723
    5. ' return' → logprob: -6.642312049865723
    6. '[int' → logprob: -7.892312049865723
    7. '[' → logprob: -9.517312049865723
    8. 'stdin' → logprob: -9.767312049865723
    9. '0' → logprob: -10.142312049865723
    10. 'read' → logprob: -10.267312049865723

Token 67: ' return' (ID: 622)
  Prédit: ' return'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' return' → logprob: -0.8958306312561035
    2. 'return' (adapté à ' return') → logprob: -1.0208306312561035
    3. '   ' → logprob: -1.5208306312561035
    4. 'int' → logprob: -4.7708306312561035
    5. ' int' → logprob: -6.6458306312561035
    6. ' ' → logprob: -7.7708306312561035
    7. 'parse' → logprob: -7.8958306312561035
    8. '0' → logprob: -7.8958306312561035
    9. ' parse' → logprob: -8.520830154418945
    10. '[]' → logprob: -8.770830154418945

Token 68: ' read' (ID: 1729)
  Prédit: '[]'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '[]' → logprob: -0.07169738411903381
    2. ' []' → logprob: -2.946697473526001
    3. 'int' → logprob: -5.696697235107422
    4. '[int' → logprob: -5.946697235107422
    5. '[' → logprob: -6.071697235107422
    6. '0' → logprob: -6.571697235107422
    7. ' ' → logprob: -6.571697235107422
    8. 'parse' → logprob: -7.071697235107422
    9. ' [' → logprob: -7.071697235107422
    10. '2' → logprob: -7.321697235107422

Token 69: '_int' (ID: 12285)
  Prédit: '_int'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_int' → logprob: -0.049296051263809204
    2. '_' → logprob: -3.0492961406707764
    3. '_line' → logprob: -7.924295902252197
    4. 'int' → logprob: -9.299296379089355
    5. '_input' → logprob: -9.924296379089355
    6. '_integer' → logprob: -9.924296379089355
    7. '()' → logprob: -10.674296379089355
    8. '_in' → logprob: -10.799296379089355
    9. ' _' → logprob: -10.924296379089355
    10. '_INT' → logprob: -11.549296379089355

Token 70: '()

' (ID: 5874)
  Prédit: '()'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '()' → logprob: -1.1875571544806007e-05
    2. '()
' → logprob: -12.250011444091797
    3. '()

' → logprob: -12.625011444091797
    4. '(' → logprob: -13.625011444091797
    5. ' ()' → logprob: -14.250011444091797
    6. '()(' → logprob: -14.375011444091797
    7. '()\' → logprob: -14.875011444091797
    8. '()<' → logprob: -15.500011444091797
    9. '()`' → logprob: -15.500011444091797
    10. '()]' → logprob: -16.125011444091797

Token 71: 'def' (ID: 1314)
  Prédit: 'def'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'def' → logprob: -0.021777553483843803
    2. 'A' → logprob: -4.521777629852295
    3. '<|end|>' → logprob: -5.021777629852295
    4. '```' → logprob: -6.521777629852295
    5. 'n' → logprob: -6.896777629852295
    6. '
' → logprob: -7.146777629852295
    7. '#' → logprob: -8.146777153015137
    8. '<|end|>' → logprob: -8.146777153015137
    9. '

' → logprob: -9.771777153015137
    10. '``' → logprob: -10.896777153015137

Token 72: ' get' (ID: 717)
  Prédit: 'get'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'get' → logprob: -0.5149308443069458
    2. ' get' → logprob: -1.5149308443069458
    3. '_B' → logprob: -2.7649307250976562
    4. 'B' → logprob: -3.5149307250976562
    5. ' main' → logprob: -3.5149307250976562
    6. ' B' → logprob: -3.8899307250976562
    7. 'main' → logprob: -4.764930725097656
    8. '_A' → logprob: -5.389930725097656
    9. ' ' → logprob: -5.639930725097656
    10. 'A' → logprob: -5.764930725097656

Token 73: '_B' (ID: 3201)
  Prédit: '_B'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_B' → logprob: -0.007998025976121426
    2. '_' → logprob: -5.882997989654541
    3. '_n' → logprob: -6.257997989654541
    4. '_N' → logprob: -6.382997989654541
    5. '_A' → logprob: -7.257997989654541
    6. '_b' → logprob: -8.7579984664917
    7. '_M' → logprob: -9.1329984664917
    8. '_C' → logprob: -9.2579984664917
    9. 'B' → logprob: -9.7579984664917
    10. '_T' → logprob: -9.7579984664917

Token 74: '():
' (ID: 8595)
  Prédit: '():'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '():' → logprob: -0.0034070396795868874
    2. '()' → logprob: -5.753407001495361
    3. '():
' → logprob: -8.62840747833252
    4. '()>' → logprob: -11.12840747833252
    5. '()">' → logprob: -11.37840747833252
    6. ' ():' → logprob: -11.50340747833252
    7. '():

' → logprob: -12.75340747833252
    8. '():
' → logprob: -12.87840747833252
    9. ' ()' → logprob: -13.00340747833252
    10. '()*' → logprob: -14.00340747833252

Token 75: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.5098639130592346
    2. '()' → logprob: -1.0098638534545898
    3. 'return' → logprob: -4.25986385345459
    4. '()
' → logprob: -4.38486385345459
    5. ' return' → logprob: -5.00986385345459
    6. 'read' → logprob: -7.00986385345459
    7. ')' → logprob: -8.13486385345459
    8. ' ' → logprob: -9.00986385345459
    9. ' read' → logprob: -9.00986385345459
    10. ' ()' → logprob: -9.00986385345459

Token 76: ' return' (ID: 622)
  Prédit: 'read'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'read' → logprob: -0.7062718272209167
    2. 'return' (adapté à ' return') → logprob: -0.9562718272209167
    3. '   ' → logprob: -2.7062718868255615
    4. ' return' → logprob: -3.3312718868255615
    5. ' read' → logprob: -3.9562718868255615
    6. ' ' → logprob: -8.08127212524414
    7. 'def' → logprob: -9.83127212524414
    8. '  ' → logprob: -10.20627212524414
    9. 'eturn' → logprob: -10.20627212524414
    10. '	read' → logprob: -10.58127212524414

Token 77: ' read' (ID: 1729)
  Prédit: ' read'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' read' → logprob: -0.17977191507816315
    2. 'read' → logprob: -1.804771900177002
    3. ' get' → logprob: -11.05477237701416
    4. 'get' → logprob: -12.80477237701416
    5. '	read' → logprob: -12.80477237701416
    6. '(read' → logprob: -12.92977237701416
    7. ' ' → logprob: -13.55477237701416
    8. '   ' → logprob: -13.80477237701416
    9. ' readline' → logprob: -15.05477237701416
    10. ' int' → logprob: -15.17977237701416

Token 78: '_int' (ID: 12285)
  Prédit: '_int'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_int' → logprob: -0.000239536224398762
    2. 'int' → logprob: -8.375239372253418
    3. '_' → logprob: -12.250239372253418
    4. '_line' → logprob: -13.125239372253418
    5. '_input' → logprob: -14.125239372253418
    6. 'Int' → logprob: -15.125239372253418
    7. '_in' → logprob: -15.250239372253418
    8. '_uint' → logprob: -15.500239372253418
    9. '_INT' → logprob: -15.500239372253418
    10. '_const' → logprob: -16.750240325927734

Token 79: '()

' (ID: 5874)
  Prédit: '()'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '()' → logprob: -4.3226136767771095e-05
    2. '()
' → logprob: -10.250042915344238
    3. '()

' → logprob: -12.625042915344238
    4. '(' → logprob: -13.750042915344238
    5. '()`' → logprob: -14.125042915344238
    6. '())' → logprob: -14.375042915344238
    7. '()\' → logprob: -14.375042915344238
    8. '()]' → logprob: -14.875042915344238
    9. '()"' → logprob: -15.375042915344238
    10. '()<' → logprob: -15.500042915344238

Token 80: 'def' (ID: 1314)
  Prédit: 'def'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'def' → logprob: -0.0044226436875760555
    2. 'n' → logprob: -5.504422664642334
    3. 'A' → logprob: -8.129422187805176
    4. '```' → logprob: -11.004422187805176
    5. 'if' → logprob: -11.129422187805176
    6. 'ndef' → logprob: -12.504422187805176
    7. '\' → logprob: -12.629422187805176
    8. '#' → logprob: -12.879422187805176
    9. '<|end|>' → logprob: -13.129422187805176
    10. '<|end|>' → logprob: -13.129422187805176

Token 81: ' add' (ID: 1147)
  Prédit: ' main'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' main' → logprob: -0.053062714636325836
    2. 'main' → logprob: -3.178062677383423
    3. ' solve' → logprob: -5.053062915802002
    4. ' solution' → logprob: -7.178062915802002
    5. 'solve' → logprob: -7.178062915802002
    6. ' process' → logprob: -7.303062915802002
    7. ' check' → logprob: -7.803062915802002
    8. ' run' → logprob: -8.428062438964844
    9. 'process' → logprob: -8.553062438964844
    10. 'solution' → logprob: -8.928062438964844

Token 82: '(a' (ID: 6271)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(' → logprob: -0.08203890919685364
    2. '(a' → logprob: -3.0820388793945312
    3. '(A' → logprob: -4.207038879394531
    4. '_' → logprob: -4.207038879394531
    5. '()' → logprob: -6.582038879394531
    6. '(_' → logprob: -7.207038879394531
    7. '_(' → logprob: -8.582038879394531
    8. '<|end|>' → logprob: -8.582038879394531
    9. ' (' → logprob: -9.082038879394531
    10. '_numbers' → logprob: -9.207038879394531

Token 83: ',' (ID: 11)
  Prédit: ','
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ',' → logprob: -0.0011893989285454154
    2. ' ,' → logprob: -7.251189231872559
    3. ',b' → logprob: -7.876189231872559
    4. ',a' → logprob: -9.376189231872559
    5. ')' → logprob: -11.376189231872559
    6. '_,' → logprob: -14.126189231872559
    7. 'a' → logprob: -14.876189231872559
    8. ',
' → logprob: -15.001189231872559
    9. ',n' → logprob: -15.501189231872559
    10. ',)' → logprob: -15.501189231872559

Token 84: ' b' (ID: 287)
  Prédit: 'b'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'b' → logprob: -0.4740773141384125
    2. ' b' → logprob: -0.9740773439407349
    3. ' ' → logprob: -15.224077224731445
    4. ')b' → logprob: -16.599077224731445
    5. '<|end|>' → logprob: -17.349077224731445
    6. '	b' → logprob: -17.349077224731445
    7. ' ' → logprob: -17.724077224731445
    8. ',b' → logprob: -18.849077224731445
    9. ')' → logprob: -19.099077224731445
    10. ',' → logprob: -19.349077224731445

Token 85: '):
' (ID: 1883)
  Prédit: '):'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '):' → logprob: -0.0017152780201286077
    2. ')' → logprob: -6.501715183258057
    3. '):
' → logprob: -8.501715660095215
    4. ',' → logprob: -13.251715660095215
    5. ' ):' → logprob: -13.251715660095215
    6. ':' → logprob: -13.501715660095215
    7. '):
' → logprob: -13.626715660095215
    8. '   ' → logprob: -13.751715660095215
    9. 'a' → logprob: -14.626715660095215
    10. '):

' → logprob: -15.251715660095215

Token 86: '   ' (ID: 271)
  Prédit: ' a'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' a' → logprob: -0.4355854094028473
    2. 'a' → logprob: -1.060585379600525
    3. '   ' → logprob: -5.1855854988098145
    4. ' return' → logprob: -6.8105854988098145
    5. '(a' → logprob: -9.935585021972656
    6. 'return' → logprob: -10.435585021972656
    7. '    ' → logprob: -10.435585021972656
    8. ' ' → logprob: -11.310585021972656
    9. ')' → logprob: -11.310585021972656
    10. '<|end|>' → logprob: -11.435585021972656

Token 87: ' return' (ID: 622)
  Prédit: ' a'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' a' → logprob: -0.2114928513765335
    2. 'a' → logprob: -1.711492896080017
    3. ' return' → logprob: -4.711493015289307
    4. '   ' → logprob: -7.461493015289307
    5. 'return' (adapté à ' return') → logprob: -7.711493015289307
    6. '    ' → logprob: -11.961492538452148
    7. ' ' → logprob: -12.711492538452148
    8. '	a' → logprob: -12.961492538452148
    9. ')' → logprob: -13.336492538452148
    10. '  ' → logprob: -14.336492538452148

Token 88: ' a' (ID: 261)
  Prédit: ' a'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' a' → logprob: -0.3868713080883026
    2. 'a' → logprob: -1.136871337890625
    3. '	a' → logprob: -16.011871337890625
    4. ' ' → logprob: -16.761871337890625
    5. ' ' → logprob: -17.011871337890625
    6. '(a' → logprob: -18.136871337890625
    7. '   ' → logprob: -18.261871337890625
    8. '_a' → logprob: -19.011871337890625
    9. '  ' → logprob: -20.386871337890625
    10. ' (' → logprob: -20.761871337890625

Token 89: ' +' (ID: 659)
  Prédit: ' +'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' +' → logprob: -0.1602318435907364
    2. '+' → logprob: -1.9102318286895752
    3. '+b' → logprob: -12.785231590270996
    4. ' ' → logprob: -13.160231590270996
    5. ' +
' → logprob: -13.160231590270996
    6. '+B' → logprob: -14.660231590270996
    7. ' ' → logprob: -15.160231590270996
    8. ' +
' → logprob: -15.910231590270996
    9. ' +

' → logprob: -16.285232543945312
    10. '+
' → logprob: -16.660232543945312

Token 90: ' b' (ID: 287)
  Prédit: 'b'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'b' → logprob: -0.5759396553039551
    2. ' b' → logprob: -0.8259396553039551
    3. ' ' → logprob: -15.575939178466797
    4. '	b' → logprob: -16.200939178466797
    5. ' ' → logprob: -17.575939178466797
    6. ')b' → logprob: -18.325939178466797
    7. '_b' → logprob: -18.825939178466797
    8. '   ' → logprob: -19.325939178466797
    9. '<|end|>' → logprob: -19.575939178466797
    10. ' б' → logprob: -19.575939178466797

Token 91: '

' (ID: 279)
  Prédit: 'def'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'def' → logprob: -0.11574376374483109
    2. '

' → logprob: -2.49074387550354
    3. '<|end|>' → logprob: -3.86574387550354
    4. '
' → logprob: -5.740743637084961
    5. '<|end|>' → logprob: -6.865743637084961
    6. 'n' → logprob: -7.490743637084961
    7. '\n' → logprob: -8.865743637084961
    8. '```' → logprob: -8.865743637084961
    9. ' def' → logprob: -9.365743637084961
    10. '\' → logprob: -9.490743637084961

Token 92: 'def' (ID: 1314)
  Prédit: 'def'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'def' → logprob: -0.01518525555729866
    2. 'n' → logprob: -4.390185356140137
    3. 'if' → logprob: -6.015185356140137
    4. '\' → logprob: -9.390185356140137
    5. 'a' → logprob: -9.640185356140137
    6. '\n' → logprob: -10.015185356140137
    7. '```' → logprob: -10.765185356140137
    8. '
' → logprob: -12.140185356140137
    9. '

' → logprob: -12.515185356140137
    10. 'ndef' → logprob: -12.890185356140137

Token 93: ' print' (ID: 2123)
  Prédit: 'main'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'main' → logprob: -0.28248950839042664
    2. ' main' → logprob: -1.532489538192749
    3. '_main' → logprob: -3.532489538192749
    4. 'def' → logprob: -7.15748929977417
    5. 'run' → logprob: -10.657489776611328
    6. 'solve' → logprob: -11.282489776611328
    7. '__' → logprob: -11.532489776611328
    8. '_' → logprob: -12.032489776611328
    9. '_run' → logprob: -12.032489776611328
    10. 'process' → logprob: -12.282489776611328

Token 94: '_result' (ID: 11623)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '(' → logprob: -0.11950531601905823
    2. '_' → logprob: -2.3695054054260254
    3. '(add' → logprob: -4.994505405426025
    4. '('' → logprob: -5.994505405426025
    5. '('_' → logprob: -5.994505405426025
    6. '_add' → logprob: -5.994505405426025
    7. '()' → logprob: -6.119505405426025
    8. '_(' → logprob: -6.619505405426025
    9. '(a' → logprob: -8.369504928588867
    10. '(_' → logprob: -8.619504928588867

Token 95: '(result' (ID: 8111)
  Prédit: '(result'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(result' → logprob: -0.4950575530529022
    2. '(' → logprob: -0.9950575828552246
    3. '():' → logprob: -4.120057582855225
    4. '(a' → logprob: -5.870057582855225
    5. '()' → logprob: -7.245057582855225
    6. '(value' → logprob: -7.370057582855225
    7. '(output' → logprob: -9.370057106018066
    8. '(results' → logprob: -9.870057106018066
    9. ' (' → logprob: -10.245057106018066
    10. '(res' → logprob: -10.620057106018066

Token 96: '):
' (ID: 1883)
  Prédit: '):'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '):' → logprob: -0.0004940562648698688
    2. '():' → logprob: -8.375494003295898
    3. '):
' → logprob: -8.750494003295898
    4. ')' → logprob: -9.250494003295898
    5. ' ):' → logprob: -12.250494003295898
    6. '()' → logprob: -13.750494003295898
    7. ':' → logprob: -13.875494003295898
    8. '   ' → logprob: -14.000494003295898
    9. '):
' → logprob: -14.250494003295898
    10. '():
' → logprob: -14.625494003295898

Token 97: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.00015860427811276168
    2. 'print' → logprob: -8.875158309936523
    3. ' print' → logprob: -11.000158309936523
    4. '```' → logprob: -14.375158309936523
    5. '(print' → logprob: -14.500158309936523
    6. '    
' → logprob: -14.625158309936523
    7. '	print' → logprob: -14.875158309936523
    8. '   ' → logprob: -17.000158309936523
    9. '(' → logprob: -17.375158309936523
    10. '       ' → logprob: -17.500158309936523

Token 98: ' print' (ID: 2123)
  Prédit: 'print'
  Correct (stricte): False
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'print' (adapté à ' print') → logprob: -0.0007161272224038839
    2. ' print' → logprob: -7.250716209411621
    3. '   ' → logprob: -12.000716209411621
    4. '```' → logprob: -16.125715255737305
    5. '	print' → logprob: -18.750715255737305
    6. '``' → logprob: -21.000715255737305
    7. 'printf' → logprob: -21.750715255737305
    8. '`' → logprob: -22.125715255737305
    9. '.print' → logprob: -22.125715255737305
    10. 'println' → logprob: -22.500715255737305

Token 99: '(result' (ID: 8111)
  Prédit: '(result'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(result' → logprob: -0.018163636326789856
    2. '(' → logprob: -4.018163681030273
    3. '(f' → logprob: -12.268163681030273
    4. 'result' → logprob: -12.643163681030273
    5. ' (' → logprob: -13.143163681030273
    6. '('' → logprob: -13.393163681030273
    7. '()' → logprob: -13.893163681030273
    8. '(results' → logprob: -14.768163681030273
    9. '((' → logprob: -15.393163681030273
    10. '(resultado' → logprob: -15.518163681030273

Token 100: ')

' (ID: 1029)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')' → logprob: 0.0
    2. ')
' → logprob: -17.875
    3. ' )' → logprob: -18.375
    4. '')' → logprob: -19.625
    5. ')`' → logprob: -20.375
    6. '))' → logprob: -21.25
    7. ')

' → logprob: -21.625
    8. '()' → logprob: -22.0
    9. '")' → logprob: -22.125
    10. '),' → logprob: -22.125

Token 101: 'def' (ID: 1314)
  Prédit: 'def'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'def' → logprob: -0.011394165456295013
    2. 'n' → logprob: -4.511394023895264
    3. 'if' → logprob: -8.011394500732422
    4. 'ndef' → logprob: -12.511394500732422
    5. '```' → logprob: -12.761394500732422
    6. 'a' → logprob: -13.136394500732422
    7. '

' → logprob: -13.136394500732422
    8. '    
' → logprob: -13.761394500732422
    9. '\' → logprob: -14.136394500732422
    10. '
' → logprob: -14.511394500732422

Token 102: ' process' (ID: 2273)
  Prédit: ' main'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' main' → logprob: -0.38722890615463257
    2. 'main' → logprob: -1.1372289657592773
    3. '_main' → logprob: -8.262228965759277
    4. 'def' → logprob: -9.512228965759277
    5. '__' → logprob: -11.762228965759277
    6. ' run' → logprob: -12.012228965759277
    7. ' def' → logprob: -12.387228965759277
    8. 'run' → logprob: -12.637228965759277
    9. ' __' → logprob: -12.762228965759277
    10. 'if' → logprob: -14.387228965759277

Token 103: '_case' (ID: 43667)
  Prédit: '()'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '()' → logprob: -0.19391624629497528
    2. '():' → logprob: -2.1939163208007812
    3. '_' → logprob: -3.1939163208007812
    4. '()(' → logprob: -4.568916320800781
    5. '(' → logprob: -4.693916320800781
    6. '(n' → logprob: -6.193916320800781
    7. '():
' → logprob: -7.068916320800781
    8. '_(' → logprob: -7.443916320800781
    9. ' ()' → logprob: -8.818916320800781
    10. '(_' → logprob: -8.943916320800781

Token 104: '_n' (ID: 2170)
  Prédit: '(n'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '(n' → logprob: -0.2867375910282135
    2. '(' → logprob: -2.0367376804351807
    3. '():' → logprob: -2.1617376804351807
    4. '()' → logprob: -6.036737442016602
    5. ' (' → logprob: -7.286737442016602
    6. '(a' → logprob: -8.786737442016602
    7. '()(' → logprob: -9.036737442016602
    8. '(case' → logprob: -9.536737442016602
    9. '():
' → logprob: -9.786737442016602
    10. '(num' → logprob: -10.536737442016602

Token 105: '_lt' (ID: 148773)
  Prédit: '(n'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(n' → logprob: -0.735145092010498
    2. '_lt' → logprob: -1.985145092010498
    3. '_' → logprob: -2.110145092010498
    4. '_eq' → logprob: -2.235145092010498
    5. '(' → logprob: -2.860145092010498
    6. '(_' → logprob: -2.985145092010498
    7. '_(' → logprob: -3.735145092010498
    8. '()' → logprob: -5.235145092010498
    9. '_less' → logprob: -5.360145092010498
    10. '_le' → logprob: -6.485145092010498

Token 106: '_' (ID: 62)
  Prédit: '_'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_' → logprob: -0.00030805266578681767
    2. '2' → logprob: -8.1253080368042
    3. '(' → logprob: -12.1253080368042
    4. '_(' → logprob: -13.3753080368042
    5. '_=' → logprob: -14.1253080368042
    6. '_<' → logprob: -14.2503080368042
    7. 'def' → logprob: -14.5003080368042
    8. '__' → logprob: -14.6253080368042
    9. '(_' → logprob: -14.8753080368042
    10. '   ' → logprob: -14.8753080368042

Token 107: '2' (ID: 17)
  Prédit: '2'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '2' → logprob: -0.0006392885115928948
    2. '_' → logprob: -7.37563943862915
    3. '(' → logprob: -11.625638961791992
    4. ' ' → logprob: -14.000638961791992
    5. 'def' → logprob: -14.375638961791992
    6. '₂' → logprob: -14.500638961791992
    7. '```' → logprob: -14.875638961791992
    8. '=' → logprob: -15.375638961791992
    9. '   ' → logprob: -15.500638961791992
    10. '_two' → logprob: -15.563138961791992

Token 108: '():
' (ID: 8595)
  Prédit: '():'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '():' → logprob: -0.2873117923736572
    2. '(n' → logprob: -1.4123117923736572
    3. '(' → logprob: -5.912311553955078
    4. '()' → logprob: -6.537311553955078
    5. '():
' → logprob: -6.537311553955078
    6. ' ():' → logprob: -7.662311553955078
    7. ' (' → logprob: -10.537311553955078
    8. '(a' → logprob: -11.912311553955078
    9. '(N' → logprob: -11.912311553955078
    10. ' ()' → logprob: -12.287311553955078

Token 109: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.00031496648443862796
    2. 'print' → logprob: -8.125314712524414
    3. ' print' → logprob: -12.375314712524414
    4. '    
' → logprob: -12.500314712524414
    5. '()' → logprob: -12.750314712524414
    6. '       ' → logprob: -12.750314712524414
    7. '
' → logprob: -13.250314712524414
    8. '	print' → logprob: -14.000314712524414
    9. '(print' → logprob: -14.375314712524414
    10. '(' → logprob: -14.375314712524414

Token 110: ' print' (ID: 2123)
  Prédit: 'print'
  Correct (stricte): False
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'print' (adapté à ' print') → logprob: -0.012053707614541054
    2. '   ' → logprob: -4.512053489685059
    3. ' print' → logprob: -7.637053489685059
    4. 'n' → logprob: -8.762053489685059
    5. 'if' → logprob: -8.887053489685059
    6. 'A' → logprob: -9.762053489685059
    7. 'result' → logprob: -10.137053489685059
    8. 'a' → logprob: -10.637053489685059
    9. ' ' → logprob: -10.762053489685059
    10. 'for' → logprob: -11.012053489685059

Token 111: '_' (ID: 62)
  Prédit: '_'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_' → logprob: -0.005469490308314562
    2. '('' → logprob: -5.75546932220459
    3. '('_' → logprob: -6.13046932220459
    4. 'Hello' → logprob: -10.25546932220459
    5. '_("' → logprob: -10.88046932220459
    6. ' ('' → logprob: -11.38046932220459
    7. '("' → logprob: -11.50546932220459
    8. '_'' → logprob: -11.75546932220459
    9. '__('' → logprob: -11.88046932220459
    10. '_(' → logprob: -12.25546932220459

Token 112: 'hello' (ID: 24912)
  Prédit: '''
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ''' → logprob: -0.6345942616462708
    2. '('' → logprob: -0.7595942616462708
    3. 'Hello' → logprob: -6.634594440460205
    4. '("' → logprob: -8.384593963623047
    5. '(' → logprob: -8.634593963623047
    6. 'hello' → logprob: -9.134593963623047
    7. '"' → logprob: -9.384593963623047
    8. ''H' → logprob: -9.759593963623047
    9. '_' → logprob: -11.634593963623047
    10. '()' → logprob: -13.384593963623047

Token 113: '_world' (ID: 76816)
  Prédit: '_world'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_world' → logprob: -1.747814349073451e-05
    2. 'world' → logprob: -12.000017166137695
    3. '_space' → logprob: -12.625017166137695
    4. '_WORLD' → logprob: -12.875017166137695
    5. 'World' → logprob: -13.000017166137695
    6. ' World' → logprob: -13.750017166137695
    7. '_' → logprob: -14.000017166137695
    8. 'oworld' → logprob: -14.875017166137695
    9. 'orld' → logprob: -15.000017166137695
    10. ' world' → logprob: -15.000017166137695

Token 114: '()

' (ID: 5874)
  Prédit: '()'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '()' → logprob: -1.759734732331708e-05
    2. '()
' → logprob: -11.375017166137695
    3. '(' → logprob: -12.875017166137695
    4. '()

' → logprob: -13.250017166137695
    5. '()`' → logprob: -14.500017166137695
    6. ' ()' → logprob: -15.125017166137695
    7. '();' → logprob: -15.625017166137695
    8. '()\' → logprob: -15.875017166137695
    9. '())' → logprob: -16.000017166137695
    10. '()<' → logprob: -16.250017166137695

Token 115: 'def' (ID: 1314)
  Prédit: 'def'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'def' → logprob: -0.001047339290380478
    2. '<|end|>' → logprob: -6.876047134399414
    3. '#' → logprob: -12.626047134399414
    4. '<|end|>' → logprob: -12.751047134399414
    5. '```' → logprob: -13.251047134399414
    6. 'elif' → logprob: -13.376047134399414
    7. '
' → logprob: -13.626047134399414
    8. 'else' → logprob: -13.876047134399414
    9. ' def' → logprob: -14.126047134399414
    10. 'for' → logprob: -14.251047134399414

Token 116: ' process' (ID: 2273)
  Prédit: 'process'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'process' → logprob: -0.4001484215259552
    2. ' process' → logprob: -1.1501483917236328
    3. ' main' → logprob: -4.650148391723633
    4. 'main' → logprob: -5.775148391723633
    5. 'def' → logprob: -7.900148391723633
    6. ' def' → logprob: -9.775148391723633
    7. '_process' → logprob: -10.400148391723633
    8. '_main' → logprob: -11.150148391723633
    9. 'condition' → logprob: -12.150148391723633
    10. 'n' → logprob: -12.150148391723633

Token 117: '_case' (ID: 43667)
  Prédit: '_case'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_case' → logprob: -2.570319702499546e-05
    2. '_' → logprob: -11.250025749206543
    3. '_n' → logprob: -11.625025749206543
    4. '_cases' → logprob: -13.125025749206543
    5. '_code' → logprob: -14.000025749206543
    6. 'case' → logprob: -15.500025749206543
    7. '_else' → logprob: -16.250024795532227
    8. '_a' → logprob: -16.250024795532227
    9. '_condition' → logprob: -16.500024795532227
    10. '\' → logprob: -17.250024795532227

Token 118: '_n' (ID: 2170)
  Prédit: '_n'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_n' → logprob: -0.00161733478307724
    2. '_a' → logprob: -7.501617431640625
    3. '_' → logprob: -7.751617431640625
    4. '(n' → logprob: -8.251617431640625
    5. ' ' → logprob: -10.001617431640625
    6. '_add' → logprob: -10.626617431640625
    7. 'n' → logprob: -10.751617431640625
    8. '(_' → logprob: -10.876617431640625
    9. ' _' → logprob: -11.001617431640625
    10. '2' → logprob: -11.001617431640625

Token 119: '_ge' (ID: 103829)
  Prédit: '_g'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_g' → logprob: -0.35916170477867126
    2. '_ge' → logprob: -1.9841617345809937
    3. '_gt' → logprob: -1.9841617345809937
    4. '_' → logprob: -3.984161615371704
    5. '_eq' → logprob: -5.234161853790283
    6. '_lt' → logprob: -6.359161853790283
    7. '__' → logprob: -7.109161853790283
    8. '```' → logprob: -9.609161376953125
    9. 'ge' → logprob: -9.984161376953125
    10. ' _' → logprob: -10.484161376953125

Token 120: '_' (ID: 62)
  Prédit: '_'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_' → logprob: -0.0007177923689596355
    2. '2' → logprob: -7.875717639923096
    3. 'q' → logprob: -8.000718116760254
    4. 't' → logprob: -13.750718116760254
    5. '(' → logprob: -15.250718116760254
    6. '   ' → logprob: -15.375718116760254
    7. 'r' → logprob: -15.500718116760254
    8. ' ' → logprob: -16.000717163085938
    9. '_q' → logprob: -16.000717163085938
    10. '```' → logprob: -16.500717163085938

Token 121: '2' (ID: 17)
  Prédit: '2'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '2' → logprob: -2.999452772201039e-05
    2. '_' → logprob: -11.000029563903809
    3. ' ' → logprob: -11.875029563903809
    4. '   ' → logprob: -12.375029563903809
    5. 'def' → logprob: -14.625029563903809
    6. '```' → logprob: -14.875029563903809
    7. '₂' → logprob: -16.375030517578125
    8. '{' → logprob: -16.375030517578125
    9. '(' → logprob: -16.437530517578125
    10. '۲' → logprob: -16.437530517578125

Token 122: '():
' (ID: 8595)
  Prédit: '():'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '():' → logprob: -0.003526421496644616
    2. '(n' → logprob: -5.753526210784912
    3. '():
' → logprob: -8.12852668762207
    4. ' ():' → logprob: -10.37852668762207
    5. '()' → logprob: -11.25352668762207
    6. '(' → logprob: -11.75352668762207
    7. '_n' → logprob: -14.37852668762207
    8. '():
' → logprob: -15.12852668762207
    9. ':' → logprob: -15.50352668762207
    10. '_' → logprob: -15.62852668762207

Token 123: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.012707178480923176
    2. 'A' → logprob: -5.887707233428955
    3. ' A' → logprob: -5.887707233428955
    4. ' a' → logprob: -6.012707233428955
    5. 'a' → logprob: -6.262707233428955
    6. 'n' → logprob: -7.512707233428955
    7. ' result' → logprob: -7.512707233428955
    8. ' n' → logprob: -7.762707233428955
    9. ' pass' → logprob: -8.262706756591797
    10. 'result' → logprob: -8.262706756591797

Token 124: ' a' (ID: 261)
  Prédit: 'A'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'A' → logprob: -0.4038569927215576
    2. 'a' (adapté à ' a') → logprob: -1.2788569927215576
    3. 'result' → logprob: -4.028857231140137
    4. 'n' → logprob: -4.403857231140137
    5. '   ' → logprob: -4.403857231140137
    6. 'for' → logprob: -5.403857231140137
    7. 'def' → logprob: -5.903857231140137
    8. 'pass' → logprob: -6.778857231140137
    9. 'print' → logprob: -6.903857231140137
    10. ' A' → logprob: -7.153857231140137

Token 125: ' =' (ID: 314)
  Prédit: ' ='
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' =' → logprob: -0.07898970693349838
    2. '=' → logprob: -2.5789897441864014
    3. ',' → logprob: -9.32898998260498
    4. '=get' → logprob: -12.32898998260498
    5. ' ' → logprob: -12.70398998260498
    6. '   ' → logprob: -13.45398998260498
    7. '_' → logprob: -14.57898998260498
    8. '  ' → logprob: -14.70398998260498
    9. '	' → logprob: -15.07898998260498
    10. ')' → logprob: -15.45398998260498

Token 126: ' get' (ID: 717)
  Prédit: 'get'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'get' → logprob: -0.04862881079316139
    2. ' get' → logprob: -3.048628807067871
    3. 'read' → logprob: -10.298628807067871
    4. '   ' → logprob: -13.048628807067871
    5. ' read' → logprob: -13.048628807067871
    6. '  ' → logprob: -13.923628807067871
    7. 'add' → logprob: -14.423628807067871
    8. '	get' → logprob: -14.548628807067871
    9. ' ' → logprob: -14.798628807067871
    10. '(get' → logprob: -15.048628807067871

Token 127: '_A' (ID: 6829)
  Prédit: '_A'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_A' → logprob: -4.4418171455617994e-05
    2. '_B' → logprob: -10.625044822692871
    3. 'A' → logprob: -11.250044822692871
    4. '_' → logprob: -12.500044822692871
    5. '```' → logprob: -14.375044822692871
    6. '()' → logprob: -14.625044822692871
    7. '(A' → logprob: -15.000044822692871
    8. ' _' → logprob: -15.250044822692871
    9. '(' → logprob: -15.375044822692871
    10. '_a' → logprob: -15.500044822692871

Token 128: '()
' (ID: 1234)
  Prédit: '()
'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '()
' → logprob: -0.011181864887475967
    2. '()' → logprob: -4.511181831359863
    3. '()
' → logprob: -9.011181831359863
    4. '())
' → logprob: -12.136181831359863
    5. '()

' → logprob: -12.261181831359863
    6. ' ()
' → logprob: -14.886181831359863
    7. '   ' → logprob: -14.886181831359863
    8. '()\' → logprob: -14.886181831359863
    9. ')
' → logprob: -15.011181831359863
    10. '())' → logprob: -15.261181831359863

Token 129: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.39267241954803467
    2. 'b' → logprob: -1.1426724195480347
    3. ' b' → logprob: -5.392672538757324
    4. '	b' → logprob: -7.142672538757324
    5. ' ' → logprob: -8.517672538757324
    6. '       ' → logprob: -8.642672538757324
    7. '  ' → logprob: -10.517672538757324
    8. '    ' → logprob: -11.267672538757324
    9. '
' → logprob: -11.517672538757324
    10. '   ' → logprob: -12.517672538757324

Token 130: ' b' (ID: 287)
  Prédit: 'b'
  Correct (stricte): False
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'b' (adapté à ' b') → logprob: -0.034653302282094955
    2. ' b' → logprob: -3.4096531867980957
    3. '   ' → logprob: -6.909653186798096
    4. '	b' → logprob: -12.159653663635254
    5. ' ' → logprob: -13.284653663635254
    6. '       ' → logprob: -14.034653663635254
    7. '  ' → logprob: -14.159653663635254
    8. '    ' → logprob: -15.409653663635254
    9. ' ' → logprob: -16.534652709960938
    10. '
' → logprob: -17.159652709960938

Token 131: ' =' (ID: 314)
  Prédit: ' ='
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' =' → logprob: -0.2753773331642151
    2. '=' → logprob: -1.7753772735595703
    3. '()' → logprob: -2.6503772735595703
    4. '   ' → logprob: -8.02537727355957
    5. '()
' → logprob: -8.52537727355957
    6. ')' → logprob: -9.02537727355957
    7. '()

' → logprob: -12.40037727355957
    8. '=get' → logprob: -12.40037727355957
    9. ' ' → logprob: -12.65037727355957
    10. ' ()' → logprob: -13.15037727355957

Token 132: ' get' (ID: 717)
  Prédit: 'get'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'get' → logprob: -0.009763998910784721
    2. ' get' → logprob: -4.634764194488525
    3. '(get' → logprob: -12.759763717651367
    4. '	get' → logprob: -13.259763717651367
    5. 'read' → logprob: -14.009763717651367
    6. '  ' → logprob: -14.384763717651367
    7. '   ' → logprob: -14.384763717651367
    8. 'add' → logprob: -15.009763717651367
    9. ' ' → logprob: -15.134763717651367
    10. '=get' → logprob: -15.259763717651367

Token 133: '_B' (ID: 3201)
  Prédit: '_B'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_B' → logprob: -4.246537173457909e-06
    2. 'B' → logprob: -12.500003814697266
    3. '_A' → logprob: -15.375003814697266
    4. ')' → logprob: -16.750003814697266
    5. '(B' → logprob: -17.000003814697266
    6. '_' → logprob: -17.625003814697266
    7. '_b' → logprob: -17.750003814697266
    8. '```' → logprob: -18.125003814697266
    9. ')_' → logprob: -18.250003814697266
    10. '()' → logprob: -18.750003814697266

Token 134: '()
' (ID: 1234)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.0071184877306222916
    2. '
' → logprob: -5.2571187019348145
    3. '    
' → logprob: -6.6321187019348145
    4. 'result' → logprob: -7.6321187019348145
    5. ' result' → logprob: -10.382118225097656
    6. '       ' → logprob: -11.382118225097656
    7. '  
' → logprob: -11.632118225097656
    8. '	result' → logprob: -11.882118225097656
    9. 'print' → logprob: -12.632118225097656
    10. ')' → logprob: -13.007118225097656

Token 135: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.31463396549224854
    2. 'result' → logprob: -1.4396339654922485
    3. '
' → logprob: -3.939633846282959
    4. ' result' → logprob: -4.439633846282959
    5. '	result' → logprob: -7.314633846282959
    6. '    
' → logprob: -7.564633846282959
    7. '       ' → logprob: -9.439634323120117
    8. 'c' → logprob: -9.689634323120117
    9. '_result' → logprob: -9.689634323120117
    10. 'print' → logprob: -10.689634323120117

Token 136: ' result' (ID: 1534)
  Prédit: 'result'
  Correct (stricte): False
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'result' (adapté à ' result') → logprob: -0.001360947615467012
    2. 'res' → logprob: -7.126360893249512
    3. ' result' → logprob: -8.626360893249512
    4. 'print' → logprob: -8.876360893249512
    5. 'r' → logprob: -9.376360893249512
    6. 'c' → logprob: -9.626360893249512
    7. '
' → logprob: -10.376360893249512
    8. 'sum' → logprob: -10.626360893249512
    9. '   ' → logprob: -11.251360893249512
    10. 's' → logprob: -11.501360893249512

Token 137: ' =' (ID: 314)
  Prédit: ' ='
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' =' → logprob: -0.005233882926404476
    2. '=' → logprob: -5.2552337646484375
    3. ' ' → logprob: -17.005233764648438
    4. ')' → logprob: -17.380233764648438
    5. '   ' → logprob: -17.880233764648438
    6. '_' → logprob: -18.130233764648438
    7. '  ' → logprob: -19.005233764648438
    8. '	' → logprob: -19.505233764648438
    9. 's' → logprob: -19.755233764648438
    10. ' =
' → logprob: -20.255233764648438

Token 138: ' add' (ID: 1147)
  Prédit: ' add'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' add' → logprob: -0.25193464756011963
    2. 'add' → logprob: -1.5019346475601196
    3. '   ' → logprob: -12.876935005187988
    4. '(add' → logprob: -13.751935005187988
    5. '	add' → logprob: -13.751935005187988
    6. 'a' → logprob: -15.126935005187988
    7. ' a' → logprob: -16.001934051513672
    8. ')add' → logprob: -16.001934051513672
    9. ' ' → logprob: -16.501934051513672
    10. '_add' → logprob: -16.876934051513672

Token 139: '(a' (ID: 6271)
  Prédit: '(a'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(a' → logprob: -8.494741632603109e-05
    2. '(' → logprob: -9.37508487701416
    3. ' (' → logprob: -16.750085830688477
    4. '(b' → logprob: -18.000085830688477
    5. '(
' → logprob: -18.125085830688477
    6. 'a' → logprob: -18.375085830688477
    7. '((' → logprob: -19.375085830688477
    8. '(ab' → logprob: -20.000085830688477
    9. '(A' → logprob: -20.125085830688477
    10. '   ' → logprob: -21.000085830688477

Token 140: ',' (ID: 11)
  Prédit: ','
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ',' → logprob: -0.0016591129824519157
    2. ',b' → logprob: -6.501658916473389
    3. ' ,' → logprob: -8.876659393310547
    4. 'b' → logprob: -11.001659393310547
    5. ' b' → logprob: -15.001659393310547
    6. ',
' → logprob: -16.376659393310547
    7. '   ' → logprob: -17.126659393310547
    8. ' ' → logprob: -17.501659393310547
    9. 'a' → logprob: -18.376659393310547
    10. '(),' → logprob: -18.501659393310547

Token 141: ' b' (ID: 287)
  Prédit: 'b'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'b' → logprob: -0.5759397745132446
    2. ' b' → logprob: -0.8259397745132446
    3. ')b' → logprob: -15.200940132141113
    4. ')' → logprob: -16.575939178466797
    5. '	b' → logprob: -17.700939178466797
    6. ' ' → logprob: -17.700939178466797
    7. '    ' → logprob: -17.950939178466797
    8. ' ' → logprob: -18.950939178466797
    9. '   ' → logprob: -19.200939178466797
    10. ' б' → logprob: -20.325939178466797

Token 142: ')
' (ID: 446)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')' → logprob: -0.20144939422607422
    2. ')
' → logprob: -1.7014493942260742
    3. ')
' → logprob: -10.326449394226074
    4. ')

' → logprob: -13.201449394226074
    5. '   ' → logprob: -13.826449394226074
    6. ')b' → logprob: -15.826449394226074
    7. ')return' → logprob: -15.951449394226074
    8. ')`
' → logprob: -15.951449394226074
    9. ')`' → logprob: -16.82645034790039
    10. ' ' → logprob: -16.95145034790039

Token 143: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.0004129152512177825
    2. 'print' → logprob: -8.500412940979004
    3. '
' → logprob: -8.625412940979004
    4. '    
' → logprob: -11.500412940979004
    5. '()
' → logprob: -12.375412940979004
    6. '(' → logprob: -13.000412940979004
    7. ')' → logprob: -13.125412940979004
    8. '```' → logprob: -13.125412940979004
    9. '()' → logprob: -13.250412940979004
    10. '(print' → logprob: -13.375412940979004

Token 144: ' print' (ID: 2123)
  Prédit: 'print'
  Correct (stricte): False
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'print' (adapté à ' print') → logprob: -3.726595241460018e-05
    2. ' print' → logprob: -10.25003719329834
    3. '   ' → logprob: -13.25003719329834
    4. '	print' → logprob: -19.000038146972656
    5. ' ' → logprob: -19.625038146972656
    6. '  ' → logprob: -20.250038146972656
    7. '
' → logprob: -20.875038146972656
    8. '(print' → logprob: -21.000038146972656
    9. '.print' → logprob: -21.125038146972656
    10. 'process' → logprob: -22.375038146972656

Token 145: '_result' (ID: 11623)
  Prédit: '_result'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_result' → logprob: 0.0
    2. '_' → logprob: -17.125
    3. '(result' → logprob: -17.25
    4. 'result' → logprob: -17.25
    5. '_results' → logprob: -20.625
    6. '_RESULT' → logprob: -21.125
    7. '(_' → logprob: -22.5
    8. '_Result' → logprob: -22.75
    9. ' result' → logprob: -22.875
    10. ' _' → logprob: -23.0

Token 146: '(result' (ID: 8111)
  Prédit: '(result'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(result' → logprob: -7.588793960167095e-05
    2. '(' → logprob: -9.500076293945312
    3. ' (' → logprob: -14.125076293945312
    4. '(results' → logprob: -15.750076293945312
    5. '(resultado' → logprob: -17.500076293945312
    6. '(res' → logprob: -17.875076293945312
    7. '=result' → logprob: -18.500076293945312
    8. ',result' → logprob: -19.875076293945312
    9. '(Result' → logprob: -19.875076293945312
    10. '(
' → logprob: -20.375076293945312

Token 147: ')

' (ID: 1029)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')' → logprob: -3.309382373117842e-05
    2. ')
' → logprob: -10.375033378601074
    3. '()' → logprob: -14.000033378601074
    4. '())' → logprob: -14.625033378601074
    5. ')

' → logprob: -15.500033378601074
    6. '')' → logprob: -16.375032424926758
    7. '))' → logprob: -16.750032424926758
    8. ' )' → logprob: -17.000032424926758
    9. '   ' → logprob: -17.250032424926758
    10. '<|end|>' → logprob: -17.375032424926758

Token 148: 'def' (ID: 1314)
  Prédit: 'def'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'def' → logprob: -0.0004152993205934763
    2. 'n' → logprob: -8.000414848327637
    3. 'if' → logprob: -9.750414848327637
    4. '
' → logprob: -11.125414848327637
    5. '

' → logprob: -12.500414848327637
    6. 'ndef' → logprob: -13.250414848327637
    7. '```' → logprob: -13.875414848327637
    8. '    
' → logprob: -15.875414848327637
    9. ' def' → logprob: -16.375415802001953
    10. '\' → logprob: -16.750415802001953

Token 149: ' process' (ID: 2273)
  Prédit: ' main'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' main' → logprob: -0.31498679518699646
    2. 'main' → logprob: -1.3149868249893188
    3. 'process' → logprob: -6.939986705780029
    4. ' process' → logprob: -7.314986705780029
    5. ' run' → logprob: -9.939987182617188
    6. 'run' → logprob: -10.564987182617188
    7. '_main' → logprob: -12.064987182617188
    8. ' solve' → logprob: -12.814987182617188
    9. '	main' → logprob: -13.314987182617188
    10. 'solve' → logprob: -13.314987182617188

Token 150: '_n' (ID: 2170)
  Prédit: '_case'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_case' → logprob: -0.0423802025616169
    2. '_' → logprob: -4.042380332946777
    3. '_n' → logprob: -4.542380332946777
    4. '_input' → logprob: -4.917380332946777
    5. '_cases' → logprob: -5.792380332946777
    6. '(' → logprob: -6.417380332946777
    7. '(n' → logprob: -7.417380332946777
    8. '(_' → logprob: -8.292380332946777
    9. '()' → logprob: -8.917380332946777
    10. 'case' → logprob: -10.292380332946777

Token 151: '(n' (ID: 2406)
  Prédit: '_lt'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_lt' → logprob: -0.7154408097267151
    2. '_' → logprob: -1.0904407501220703
    3. '(n' → logprob: -1.9654407501220703
    4. '(' → logprob: -3.9654407501220703
    5. '_ge' → logprob: -4.71544075012207
    6. '_n' → logprob: -5.84044075012207
    7. '_(' → logprob: -6.34044075012207
    8. '_gt' → logprob: -7.21544075012207
    9. '_less' → logprob: -7.96544075012207
    10. '_LT' → logprob: -8.46544075012207

Token 152: '):
' (ID: 1883)
  Prédit: '):'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '):' → logprob: -0.00979386456310749
    2. '):
' → logprob: -4.634793758392334
    3. '(n' → logprob: -11.259794235229492
    4. '_n' → logprob: -11.509794235229492
    5. ')' → logprob: -12.259794235229492
    6. '_' → logprob: -12.759794235229492
    7. 'n' → logprob: -13.009794235229492
    8. '   ' → logprob: -13.634794235229492
    9. ' ):' → logprob: -13.759794235229492
    10. '):
' → logprob: -13.884794235229492

Token 153: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.0009350438485853374
    2. ' if' → logprob: -7.125935077667236
    3. 'if' → logprob: -9.000934600830078
    4. '	if' → logprob: -12.875934600830078
    5. '    
' → logprob: -13.000934600830078
    6. '
' → logprob: -13.375934600830078
    7. ':' → logprob: -15.500934600830078
    8. '<|end|>' → logprob: -16.125934600830078
    9. 'def' → logprob: -16.375934600830078
    10. 'n' → logprob: -16.500934600830078

Token 154: ' if' (ID: 538)
  Prédit: 'if'
  Correct (stricte): False
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'if' (adapté à ' if') → logprob: -0.3236367404460907
    2. ' if' → logprob: -1.323636770248413
    3. '   ' → logprob: -4.573636531829834
    4. ' ' → logprob: -15.198637008666992
    5. '
' → logprob: -15.448637008666992
    6. 'process' → logprob: -15.573637008666992
    7. ' process' → logprob: -16.323637008666992
    8. '```' → logprob: -16.448637008666992
    9. '	if' → logprob: -16.573637008666992
    10. '  ' → logprob: -17.198637008666992

Token 155: ' condition' (ID: 7060)
  Prédit: ' n'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' n' → logprob: -0.00025514091248624027
    2. 'n' → logprob: -8.375255584716797
    3. ' condition' → logprob: -10.875255584716797
    4. '	n' → logprob: -13.500255584716797
    5. ' ' → logprob: -13.500255584716797
    6. 'condition' → logprob: -14.000255584716797
    7. '_n' → logprob: -14.375255584716797
    8. '(n' → logprob: -14.500255584716797
    9. ' ' → logprob: -15.000255584716797
    10. ' (' → logprob: -15.625255584716797

Token 156: '_n' (ID: 2170)
  Prédit: '_n'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_n' → logprob: -1.9266199160483666e-05
    2. '_' → logprob: -10.875019073486328
    3. ' _' → logprob: -15.500019073486328
    4. '(n' → logprob: -18.500019073486328
    5. 'n' → logprob: -18.875019073486328
    6. '_
' → logprob: -19.625019073486328
    7. '__' → logprob: -20.250019073486328
    8. '(_' → logprob: -20.250019073486328
    9. '=_' → logprob: -20.500019073486328
    10. '   ' → logprob: -20.500019073486328

Token 157: '_lt' (ID: 148773)
  Prédit: '_lt'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_lt' → logprob: -0.2532471716403961
    2. '_n' → logprob: -1.5032471418380737
    3. '_' → logprob: -6.878247261047363
    4. '<n' → logprob: -9.253247261047363
    5. '(n' → logprob: -9.378247261047363
    6. '_LT' → logprob: -10.378247261047363
    7. '_<' → logprob: -10.503247261047363
    8. ' _' → logprob: -10.628247261047363
    9. ' <' → logprob: -12.253247261047363
    10. '<' → logprob: -12.253247261047363

Token 158: '_' (ID: 62)
  Prédit: '_'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_' → logprob: -0.00012213163427077234
    2. '(n' → logprob: -9.3751220703125
    3. '_(' → logprob: -10.7501220703125
    4. '2' → logprob: -11.7501220703125
    5. '   ' → logprob: -12.7501220703125
    6. '(' → logprob: -13.3751220703125
    7. '_n' → logprob: -13.7501220703125
    8. '(_' → logprob: -14.1251220703125
    9. ' _' → logprob: -14.7501220703125
    10. '_<' → logprob: -15.5001220703125

Token 159: '2' (ID: 17)
  Prédit: '2'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '2' → logprob: -1.0325924449716695e-05
    2. '_' → logprob: -12.62501049041748
    3. ' ' → logprob: -12.87501049041748
    4. '(n' → logprob: -13.12501049041748
    5. 'n' → logprob: -13.37501049041748
    6. '(' → logprob: -14.37501049041748
    7. '   ' → logprob: -16.125009536743164
    8. '₂' → logprob: -17.562509536743164
    9. 'def' → logprob: -17.625009536743164
    10. '<n' → logprob: -17.750009536743164

Token 160: '(n' (ID: 2406)
  Prédit: '(n'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(n' → logprob: -9.639096970204264e-05
    2. ' (' → logprob: -9.375096321105957
    3. '(' → logprob: -11.375096321105957
    4. '   ' → logprob: -18.750097274780273
    5. ' ' → logprob: -20.125097274780273
    6. '(
' → logprob: -20.250097274780273
    7. '(s' → logprob: -20.375097274780273
    8. '(m' → logprob: -20.875097274780273
    9. ',' → logprob: -21.000097274780273
    10. '((' → logprob: -21.250097274780273

Token 161: '):
' (ID: 1883)
  Prédit: '):'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '):' → logprob: -0.016063697636127472
    2. '):
' → logprob: -4.141063690185547
    3. ':' → logprob: -11.266063690185547
    4. ' ):' → logprob: -11.516063690185547
    5. '   ' → logprob: -12.766063690185547
    6. ')' → logprob: -13.016063690185547
    7. '):
' → logprob: -14.141063690185547
    8. '():' → logprob: -14.766063690185547
    9. ' ):
' → logprob: -15.641063690185547
    10. '):

' → logprob: -15.891063690185547

Token 162: '       ' (ID: 309)
  Prédit: '       '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '       ' → logprob: -0.007419321686029434
    2. ':' → logprob: -5.007419109344482
    3. '():' → logprob: -7.757419109344482
    4. ':
' → logprob: -9.50741958618164
    5. '        
' → logprob: -10.50741958618164
    6. '   ' → logprob: -10.50741958618164
    7. '()' → logprob: -10.50741958618164
    8. ' process' → logprob: -10.88241958618164
    9. '():
' → logprob: -11.00741958618164
    10. 'process' → logprob: -11.38241958618164

Token 163: ' process' (ID: 2273)
  Prédit: 'process'
  Correct (stricte): False
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'process' (adapté à ' process') → logprob: -0.47616395354270935
    2. ' process' → logprob: -0.9761639833450317
    3. '       ' → logprob: -6.351163864135742
    4. '   ' → logprob: -8.226163864135742
    5. '	process' → logprob: -9.851163864135742
    6. '_process' → logprob: -11.226163864135742
    7. '(process' → logprob: -12.351163864135742
    8. '.process' → logprob: -13.726163864135742
    9. '
' → logprob: -15.476163864135742
    10. ' proces' → logprob: -15.601163864135742

Token 164: '_case' (ID: 43667)
  Prédit: '_case'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_case' → logprob: -3.128163257315464e-07
    2. '_n' → logprob: -15.625
    3. 'case' → logprob: -17.5
    4. '_' → logprob: -17.625
    5. '_code' → logprob: -17.75
    6. '_c' → logprob: -19.25
    7. '_cases' → logprob: -19.625
    8. '_process' → logprob: -19.875
    9. ' _' → logprob: -19.875
    10. '```' → logprob: -20.125

Token 165: '_n' (ID: 2170)
  Prédit: '_n'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_n' → logprob: -3.531315314830863e-06
    2. '_' → logprob: -12.875003814697266
    3. 'n' → logprob: -14.125003814697266
    4. '_lt' → logprob: -17.500003814697266
    5. '__' → logprob: -18.000003814697266
    6. ' _' → logprob: -18.625003814697266
    7. '_nt' → logprob: -18.750003814697266
    8. '_
' → logprob: -19.250003814697266
    9. '_l' → logprob: -19.375003814697266
    10. 's' → logprob: -19.875003814697266

Token 166: '_lt' (ID: 148773)
  Prédit: '_lt'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_lt' → logprob: -9.088346359931165e-07
    2. 'lt' → logprob: -14.750000953674316
    3. '_' → logprob: -15.375000953674316
    4. '_l' → logprob: -15.875000953674316
    5. '_LT' → logprob: -17.0
    6. '_gt' → logprob: -17.375
    7. '_n' → logprob: -17.5
    8. '_ge' → logprob: -17.75
    9. 'n' → logprob: -18.375
    10. '   ' → logprob: -18.5

Token 167: '_' (ID: 62)
  Prédit: '_'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_' → logprob: -5.180879816180095e-05
    2. '2' → logprob: -9.875051498413086
    3. '   ' → logprob: -15.875051498413086
    4. '(' → logprob: -16.375051498413086
    5. ' _' → logprob: -17.750051498413086
    6. '__' → logprob: -18.250051498413086
    7. ' ' → logprob: -18.625051498413086
    8. '-' → logprob: -18.750051498413086
    9. '(_' → logprob: -18.750051498413086
    10. '₂' → logprob: -19.000051498413086

Token 168: '2' (ID: 17)
  Prédit: '2'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '2' → logprob: -7.896309739408025e-07
    2. ' ' → logprob: -14.625000953674316
    3. '_' → logprob: -16.0
    4. 'def' → logprob: -16.875
    5. '   ' → logprob: -17.0625
    6. '-' → logprob: -18.25
    7. '۲' → logprob: -18.25
    8. '(' → logprob: -18.4375
    9. '<|end|>' → logprob: -18.5
    10. '(n' → logprob: -18.8125

Token 169: '()
' (ID: 1234)
  Prédit: '()'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '()' → logprob: -0.0013490456622093916
    2. '()
' → logprob: -7.001348972320557
    3. '(n' → logprob: -7.751348972320557
    4. '(' → logprob: -12.626349449157715
    5. '()
' → logprob: -13.376349449157715
    6. ' ()' → logprob: -13.751349449157715
    7. '()

' → logprob: -14.376349449157715
    8. '()`' → logprob: -14.876349449157715
    9. '()\' → logprob: -15.876349449157715
    10. '()(' → logprob: -16.6263484954834

Token 170: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.004885758273303509
    2. 'else' → logprob: -5.754885673522949
    3. ' else' → logprob: -6.379885673522949
    4. '    
' → logprob: -12.12988567352295
    5. '	else' → logprob: -12.50488567352295
    6. '
' → logprob: -13.87988567352295
    7. 'elif' → logprob: -14.37988567352295
    8. '```' → logprob: -15.37988567352295
    9. ' elif' → logprob: -16.504886627197266
    10. '_else' → logprob: -16.629886627197266

Token 171: ' else' (ID: 1203)
  Prédit: 'else'
  Correct (stricte): False
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'else' (adapté à ' else') → logprob: -0.6035513281822205
    2. ' else' → logprob: -0.8535513281822205
    3. '   ' → logprob: -3.6035513877868652
    4. 'elif' → logprob: -12.603550910949707
    5. '	else' → logprob: -13.353550910949707
    6. ' elif' → logprob: -14.103550910949707
    7. ' ' → logprob: -14.228550910949707
    8. '_else' → logprob: -14.978550910949707
    9. '
' → logprob: -16.103551864624023
    10. '  ' → logprob: -16.103551864624023

Token 172: ':
' (ID: 734)
  Prédit: ':'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ':' → logprob: -0.2571789026260376
    2. ':
' → logprob: -1.5071789026260376
    3. '       ' → logprob: -5.257178783416748
    4. '   ' → logprob: -11.132179260253906
    5. '():
' → logprob: -12.882179260253906
    6. ':

' → logprob: -13.132179260253906
    7. '<|end|>' → logprob: -13.632179260253906
    8. ' :
' → logprob: -13.757179260253906
    9. ':
' → logprob: -14.132179260253906
    10. '):
' → logprob: -14.257179260253906

Token 173: '       ' (ID: 309)
  Prédit: '       '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '       ' → logprob: -0.0006221305229701102
    2. 'process' → logprob: -7.500622272491455
    3. ' process' → logprob: -9.625621795654297
    4. '(process' → logprob: -13.125621795654297
    5. '   ' → logprob: -15.000621795654297
    6. '      ' → logprob: -15.250621795654297
    7. '	process' → logprob: -15.875621795654297
    8. '           ' → logprob: -16.250621795654297
    9. '        
' → logprob: -16.875621795654297
    10. '     ' → logprob: -17.000621795654297

Token 174: ' process' (ID: 2273)
  Prédit: 'process'
  Correct (stricte): False
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'process' (adapté à ' process') → logprob: -0.1602514386177063
    2. ' process' → logprob: -1.9102513790130615
    3. '       ' → logprob: -10.53525161743164
    4. '	process' → logprob: -14.66025161743164
    5. '_process' → logprob: -16.28525161743164
    6. ' proces' → logprob: -16.41025161743164
    7. '(process' → logprob: -16.91025161743164
    8. '.process' → logprob: -17.41025161743164
    9. 'proces' → logprob: -17.53525161743164
    10. '   ' → logprob: -17.91025161743164

Token 175: '_case' (ID: 43667)
  Prédit: '_case'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_case' → logprob: -3.128163257315464e-07
    2. 'case' → logprob: -16.125
    3. '_n' → logprob: -16.625
    4. '_code' → logprob: -17.875
    5. '_' → logprob: -18.625
    6. '_c' → logprob: -18.875
    7. '_process' → logprob: -19.125
    8. '__' → logprob: -19.75
    9. '\' → logprob: -19.75
    10. ' _' → logprob: -20.375

Token 176: '_n' (ID: 2170)
  Prédit: '_n'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_n' → logprob: 0.0
    2. '_' → logprob: -17.75
    3. ' _' → logprob: -17.875
    4. '__' → logprob: -19.0
    5. 'n' → logprob: -19.25
    6. '```' → logprob: -19.875
    7. '   ' → logprob: -21.375
    8. '​' → logprob: -21.75
    9. '_i' → logprob: -22.0
    10. '_x' → logprob: -22.0

Token 177: '_ge' (ID: 103829)
  Prédit: '_ge'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_ge' → logprob: -0.004775906912982464
    2. '_' → logprob: -5.3797760009765625
    3. '2' → logprob: -9.004776000976562
    4. 'ge' → logprob: -10.379776000976562
    5. '_gt' → logprob: -14.629776000976562
    6. '_gr' → logprob: -15.254776000976562
    7. '_GE' → logprob: -15.504776000976562
    8. 'Ge' → logprob: -15.629776000976562
    9. '   ' → logprob: -16.254776000976562
    10. '```' → logprob: -16.629776000976562

Token 178: '_' (ID: 62)
  Prédit: '_'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_' → logprob: -2.2200749754119897e-06
    2. '2' → logprob: -13.250001907348633
    3. ' _' → logprob: -15.750001907348633
    4. '```' → logprob: -16.250001907348633
    5. '   ' → logprob: -16.875001907348633
    6. '(_' → logprob: -17.000001907348633
    7. '__' → logprob: -17.125001907348633
    8. 'e' → logprob: -18.000001907348633
    9. '=_' → logprob: -18.937501907348633
    10. '       ' → logprob: -18.937501907348633

Token 179: '2' (ID: 17)
  Prédit: '2'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '2' → logprob: -3.650518920039758e-06
    2. '_' → logprob: -13.125003814697266
    3. ' ' → logprob: -14.000003814697266
    4. '-' → logprob: -15.875003814697266
    5. '   ' → logprob: -16.250003814697266
    6. '```' → logprob: -16.375003814697266
    7. '۲' → logprob: -16.687503814697266
    8. '２' → logprob: -16.937503814697266
    9. 'def' → logprob: -17.000003814697266
    10. '₂' → logprob: -17.062503814697266

Token 180: '()

' (ID: 5874)
  Prédit: '()'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '()' → logprob: -0.062152765691280365
    2. '(n' → logprob: -2.812152862548828
    3. '(' → logprob: -9.062152862548828
    4. '()
' → logprob: -9.687152862548828
    5. '()

' → logprob: -13.312152862548828
    6. ' ()' → logprob: -13.437152862548828
    7. '():' → logprob: -13.562152862548828
    8. '()\' → logprob: -14.312152862548828
    9. '()`' → logprob: -14.312152862548828
    10. '();' → logprob: -15.062152862548828

Token 181: 'def' (ID: 1314)
  Prédit: 'def'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'def' → logprob: -0.008738427422940731
    2. 'n' → logprob: -4.7587385177612305
    3. 'if' → logprob: -9.00873851776123
    4. 'ndef' → logprob: -13.50873851776123
    5. '```' → logprob: -15.88373851776123
    6. '<|end|>' → logprob: -18.008737564086914
    7. ' def' → logprob: -18.383737564086914
    8. '#' → logprob: -19.258737564086914
    9. ' n' → logprob: -19.508737564086914
    10. 'from' → logprob: -20.008737564086914

Token 182: ' main' (ID: 2758)
  Prédit: 'main'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'main' → logprob: -0.038191817700862885
    2. ' main' → logprob: -3.288191795349121
    3. '__' → logprob: -9.538191795349121
    4. '_main' → logprob: -9.788191795349121
    5. 'process' → logprob: -10.913191795349121
    6. 'run' → logprob: -13.413191795349121
    7. ' process' → logprob: -14.038191795349121
    8. 'get' → logprob: -14.163191795349121
    9. ' __' → logprob: -14.663191795349121
    10. 'read' → logprob: -15.288191795349121

Token 183: '():
' (ID: 8595)
  Prédit: '():'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '():' → logprob: -0.0003416607796680182
    2. '():
' → logprob: -8.000341415405273
    3. ' ():' → logprob: -12.125341415405273
    4. '()' → logprob: -14.625341415405273
    5. '():
' → logprob: -15.000341415405273
    6. '(' → logprob: -19.500341415405273
    7. '():

' → logprob: -19.750341415405273
    8. '()>' → logprob: -20.500341415405273
    9. '_' → logprob: -20.500341415405273
    10. ':' → logprob: -21.375341415405273

Token 184: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.062117137014865875
    2. 'n' → logprob: -2.812117099761963
    3. ' n' → logprob: -8.812117576599121
    4. '	n' → logprob: -14.687117576599121
    5. '```' → logprob: -16.687116622924805
    6. '_n' → logprob: -17.687116622924805
    7. '
' → logprob: -17.937116622924805
    8. '   ' → logprob: -18.187116622924805
    9. '    
' → logprob: -18.937116622924805
    10. ',n' → logprob: -19.187116622924805

Token 185: ' n' (ID: 297)
  Prédit: 'n'
  Correct (stricte): False
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'n' (adapté à ' n') → logprob: -0.0020033421460539103
    2. ' n' → logprob: -6.252003192901611
    3. '   ' → logprob: -9.50200366973877
    4. '	n' → logprob: -17.377002716064453
    5. 'def' → logprob: -19.127002716064453
    6. '_n' → logprob: -19.377002716064453
    7. '    
' → logprob: -19.377002716064453
    8. '
' → logprob: -19.627002716064453
    9. ' ' → logprob: -20.002002716064453
    10. '  ' → logprob: -20.752002716064453

Token 186: ' =' (ID: 314)
  Prédit: ' ='
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' =' → logprob: -0.006717505399137735
    2. '=' → logprob: -5.006717681884766
    3. '   ' → logprob: -13.131717681884766
    4. ' ' → logprob: -16.381717681884766
    5. '=int' → logprob: -18.881717681884766
    6. ' =
' → logprob: -19.006717681884766
    7. '  ' → logprob: -19.131717681884766
    8. ' ' → logprob: -19.131717681884766
    9. '	' → logprob: -19.256717681884766
    10. ')' → logprob: -19.631717681884766

Token 187: ' read' (ID: 1729)
  Prédit: ' read'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' read' → logprob: -0.38687339425086975
    2. 'read' → logprob: -1.1368733644485474
    3. '	read' → logprob: -13.636873245239258
    4. ' ' → logprob: -14.761873245239258
    5. '   ' → logprob: -14.886873245239258
    6. '(read' → logprob: -15.636873245239258
    7. '  ' → logprob: -15.761873245239258
    8. ' int' → logprob: -17.136873245239258
    9. 'int' → logprob: -18.136873245239258
    10. ' reads' → logprob: -18.136873245239258

Token 188: '_int' (ID: 12285)
  Prédit: '_int'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_int' → logprob: -0.00011629798245849088
    2. 'int' → logprob: -9.250116348266602
    3. '_line' → logprob: -11.125116348266602
    4. '_n' → logprob: -13.375116348266602
    5. '_input' → logprob: -13.875116348266602
    6. '_' → logprob: -14.000116348266602
    7. '_in' → logprob: -14.375116348266602
    8. '()' → logprob: -14.750116348266602
    9. '```' → logprob: -15.125116348266602
    10. 'Int' → logprob: -16.0001163482666

Token 189: '()
' (ID: 1234)
  Prédit: '()'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '()' → logprob: -7.505351095460355e-05
    2. '()
' → logprob: -9.500075340270996
    3. '()

' → logprob: -16.12507438659668
    4. ' ()' → logprob: -17.00007438659668
    5. '()
' → logprob: -17.50007438659668
    6. '()`' → logprob: -17.62507438659668
    7. '()"' → logprob: -18.25007438659668
    8. '()\' → logprob: -18.37507438659668
    9. '()<' → logprob: -19.25007438659668
    10. '()]' → logprob: -19.50007438659668

Token 190: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.01266880240291357
    2. '
' → logprob: -4.762668609619141
    3. 'process' → logprob: -5.637668609619141
    4. '    
' → logprob: -8.26266860961914
    5. ' process' → logprob: -8.51266860961914
    6. '(process' → logprob: -11.38766860961914
    7. '	process' → logprob: -11.51266860961914
    8. '  
' → logprob: -13.38766860961914
    9. ' 
' → logprob: -14.38766860961914
    10. '
' → logprob: -14.63766860961914

Token 191: ' process' (ID: 2273)
  Prédit: 'process'
  Correct (stricte): False
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'process' (adapté à ' process') → logprob: -1.0087516784551553e-05
    2. 'for' → logprob: -12.25001049041748
    3. ' process' → logprob: -12.25001049041748
    4. '   ' → logprob: -14.50001049041748
    5. '	process' → logprob: -18.375009536743164
    6. '(process' → logprob: -19.375009536743164
    7. 'while' → logprob: -20.625009536743164
    8. 'proces' → logprob: -20.625009536743164
    9. '.process' → logprob: -20.750009536743164
    10. '
' → logprob: -21.250009536743164

Token 192: '_n' (ID: 2170)
  Prédit: '_n'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_n' → logprob: -1.3856492842023727e-06
    2. '_' → logprob: -13.625000953674316
    3. 'n' → logprob: -16.875001907348633
    4. '_
' → logprob: -18.000001907348633
    5. ' _' → logprob: -18.625001907348633
    6. '\' → logprob: -18.875001907348633
    7. '(_' → logprob: -19.125001907348633
    8. '(n' → logprob: -19.125001907348633
    9. '```' → logprob: -19.375001907348633
    10. '
' → logprob: -19.625001907348633

Token 193: '(n' (ID: 2406)
  Prédit: '(n'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(n' → logprob: -0.0001589618914294988
    2. '(' → logprob: -8.75015926361084
    3. ' (' → logprob: -14.62515926361084
    4. '(
' → logprob: -18.000158309936523
    5. '(s' → logprob: -20.750158309936523
    6. '(noun' → logprob: -21.375158309936523
    7. 'n' → logprob: -21.625158309936523
    8. '((' → logprob: -21.750158309936523
    9. '(

' → logprob: -21.750158309936523
    10. '\(' → logprob: -21.875158309936523

Token 194: ')

' (ID: 1029)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')' → logprob: -0.0011337858159095049
    2. '())' → logprob: -6.876133918762207
    3. '()' → logprob: -9.501133918762207
    4. ')
' → logprob: -10.626133918762207
    5. ')n' → logprob: -13.876133918762207
    6. ' )' → logprob: -15.376133918762207
    7. ')

' → logprob: -15.626133918762207
    8. '()
' → logprob: -15.626133918762207
    9. '())
' → logprob: -15.751133918762207
    10. '(n' → logprob: -16.37613296508789

Token 195: 'main' (ID: 7731)
  Prédit: 'if'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'if' → logprob: -0.2763693332672119
    2. '
' → logprob: -2.151369333267212
    3. '\n' → logprob: -2.276369333267212
    4. '<|end|>' → logprob: -4.151369094848633
    5. '```' → logprob: -6.276369094848633
    6. '   ' → logprob: -6.776369094848633
    7. ' if' → logprob: -7.026369094848633
    8. '  
' → logprob: -7.151369094848633
    9. '    
' → logprob: -7.651369094848633
    10. '\' → logprob: -8.151369094848633

Token 196: '()' (ID: 416)
  Prédit: '()'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '()' → logprob: -0.00016837897419463843
    2. '()
' → logprob: -8.750168800354004
    3. '(' → logprob: -11.750168800354004
    4. ' ()' → logprob: -14.500168800354004
    5. '()\' → logprob: -14.625168800354004
    6. '()

' → logprob: -15.125168800354004
    7. '()`' → logprob: -15.250168800354004
    8. '()"' → logprob: -16.000167846679688
    9. '()<' → logprob: -16.125167846679688
    10. '();' → logprob: -16.500167846679688


RÉSUMÉ:
--------------------------------------------------------------------------------
Total des tokens analysés: 194
Tokens correctement prédits (1ère position, stricte): 92
Tokens correctement prédits (1ère position, avec adaptation): 104
Tokens correctement prédits (top 10): 165
Précision stricte (1ère position): 47.42%
Précision adaptée (1ère position): 53.61%
Précision (top 10): 85.05%
================================================================================
