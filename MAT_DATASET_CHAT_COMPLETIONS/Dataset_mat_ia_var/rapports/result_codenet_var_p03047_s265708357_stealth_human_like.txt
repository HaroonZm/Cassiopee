================================================================================
ANALYSE DE PRÉDICTION TOKEN PAR TOKEN (BATCH API)
Date: 2025-06-04 20:01:21
Modèle de tokenisation: gpt-4o-mini
================================================================================

SCRIPT ANALYSÉ:
--------------------------------------------------------------------------------
# Bon, on prend deux entiers depuis la même ligne
N, X = map(int, input().split())
# Je crois que c'est la bonne formule ??
result = N - X + 1
print(result)  # On affiche ce qu'on trouve, normalement ça marche
--------------------------------------------------------------------------------

RÉSULTATS D'ANALYSE TOKEN PAR TOKEN:
--------------------------------------------------------------------------------
Token 0: '#' (ID: 2)
  → Token d'amorce (pas de prédiction)

Token 1: ' Bon' (ID: 12658)
  → Token d'amorce (pas de prédiction)

Token 2: ',' (ID: 11)
  → Token d'amorce (pas de prédiction)

Token 3: ' on' (ID: 402)
  Prédit: 'jour'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'jour' → logprob: -0.248463973402977
    2. ' je' → logprob: -1.8734639883041382
    3. ' ' → logprob: -3.2484638690948486
    4. ' j' → logprob: -4.998464107513428
    5. ' c' → logprob: -5.498464107513428
    6. '```' → logprob: -5.873464107513428
    7. 'soir' → logprob: -6.248464107513428
    8. 'je' → logprob: -6.373464107513428
    9. ' app' → logprob: -6.748464107513428
    10. '  ' → logprob: -6.873464107513428

Token 4: ' prend' (ID: 37463)
  Prédit: '''
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ''' → logprob: -0.028362007811665535
    2. ''t' → logprob: -4.653361797332764
    3. 'n' → logprob: -5.528361797332764
    4. '`' → logprob: -5.653361797332764
    5. 't' → logprob: -5.903361797332764
    6. ' ' → logprob: -6.028361797332764
    7. '```' → logprob: -6.403361797332764
    8. 'ne' → logprob: -7.278361797332764
    9. 's' → logprob: -7.403361797332764
    10. '_' → logprob: -7.778361797332764

Token 5: ' deux' (ID: 10301)
  Prédit: ' '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' ' → logprob: -0.18233923614025116
    2. ' un' → logprob: -2.9323391914367676
    3. 'le' → logprob: -3.6823391914367676
    4. 'un' → logprob: -3.8073391914367676
    5. 'l' → logprob: -4.682339191436768
    6. 'une' → logprob: -4.807339191436768
    7. ' la' → logprob: -4.932339191436768
    8. '  ' → logprob: -4.932339191436768
    9. ' ' → logprob: -5.057339191436768
    10. 'tout' → logprob: -5.307339191436768

Token 6: ' ent' (ID: 1121)
  Prédit: '_'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '_' → logprob: -0.5609082579612732
    2. ' espaces' → logprob: -1.810908317565918
    3. 'esp' → logprob: -2.185908317565918
    4. 'spaces' → logprob: -3.560908317565918
    5. 'space' → logprob: -4.060908317565918
    6. '#' → logprob: -4.185908317565918
    7. ' ' → logprob: -4.185908317565918
    8. 'es' → logprob: -4.435908317565918
    9. 's' → logprob: -4.685908317565918
    10. 'points' → logprob: -4.810908317565918

Token 7: 'iers' (ID: 11012)
  Prédit: 'iers'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'iers' → logprob: -0.03334631770849228
    2. 'r' → logprob: -4.033346176147461
    3. 'ières' → logprob: -4.658346176147461
    4. 'ités' → logprob: -6.283346176147461
    5. 't' → logprob: -6.783346176147461
    6. 'i' → logprob: -7.658346176147461
    7. 'êtes' → logprob: -7.783346176147461
    8. 'ier' → logprob: -7.908346176147461
    9. 'etes' → logprob: -7.908346176147461
    10. '```' → logprob: -8.533346176147461

Token 8: ' depuis' (ID: 16277)
  Prédit: 'a'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'a' → logprob: -0.9871838688850403
    2. ' ' → logprob: -0.9871838688850403
    3. ',' → logprob: -2.6121838092803955
    4. 's' → logprob: -2.7371838092803955
    5. 'x' → logprob: -3.6121838092803955
    6. ' =' → logprob: -3.6121838092803955
    7. '=' → logprob: -4.112184047698975
    8. 'e' → logprob: -4.862184047698975
    9. '_' → logprob: -4.862184047698975
    10. ' a' → logprob: -4.987184047698975

Token 9: ' la' (ID: 557)
  Prédit: 'l'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'l' → logprob: -0.5303145051002502
    2. ' input' → logprob: -1.2803144454956055
    3. ' l' → logprob: -2.4053144454956055
    4. 'input' → logprob: -3.2803144454956055
    5. 'le' → logprob: -7.0303144454956055
    6. 'la' → logprob: -7.2803144454956055
    7. ' la' → logprob: -7.6553144454956055
    8. ' ' → logprob: -7.6553144454956055
    9. '=input' → logprob: -7.6553144454956055
    10. '_' → logprob: -7.7803144454956055

Token 10: ' même' (ID: 9679)
  Prédit: 'ligne'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'ligne' → logprob: -0.33397242426872253
    2. 'suite' → logprob: -2.083972454071045
    3. 'entrée' → logprob: -2.833972454071045
    4. 'input' → logprob: -3.708972454071045
    5. 's' → logprob: -4.083972454071045
    6. 'de' → logprob: -4.708972454071045
    7. 'console' → logprob: -4.833972454071045
    8. 'l' → logprob: -5.083972454071045
    9. 'su' → logprob: -5.208972454071045
    10. 'user' → logprob: -5.208972454071045

Token 11: ' ligne' (ID: 19583)
  Prédit: ' ligne'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' ligne' → logprob: -0.1391124129295349
    2. 'ligne' → logprob: -2.2641124725341797
    3. ' ' → logprob: -4.51411247253418
    4. ' input' → logprob: -5.26411247253418
    5. 'l' → logprob: -5.51411247253418
    6. ' source' → logprob: -6.26411247253418
    7. 'input' → logprob: -7.26411247253418
    8. ' l' → logprob: -7.76411247253418
    9. 'entrée' → logprob: -7.88911247253418
    10. ' line' → logprob: -8.51411247253418

Token 12: '
' (ID: 198)
  Prédit: 'x'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'x' → logprob: -0.8229120969772339
    2. ',' → logprob: -1.5729120969772339
    3. 'a' → logprob: -1.6979120969772339
    4. 'e' → logprob: -2.8229122161865234
    5. 'n' → logprob: -2.9479122161865234
    6. 'ent' → logprob: -4.197912216186523
    7. 'i' → logprob: -4.447912216186523
    8. '`' → logprob: -5.447912216186523
    9. ' =' → logprob: -5.447912216186523
    10. ' ,' → logprob: -5.572912216186523

Token 13: 'N' (ID: 45)
  Prédit: 'x'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'x' → logprob: -0.5878156423568726
    2. 'a' → logprob: -1.0878156423568726
    3. 'e' → logprob: -3.337815761566162
    4. 'n' → logprob: -3.587815761566162
    5. ',' → logprob: -3.712815761566162
    6. 'i' → logprob: -4.837815761566162
    7. 'ent' → logprob: -5.337815761566162
    8. '```' → logprob: -6.087815761566162
    9. ' x' → logprob: -7.212815761566162
    10. ' =' → logprob: -7.462815761566162

Token 14: ',' (ID: 11)
  Prédit: ','
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ',' → logprob: -0.035344310104846954
    2. ' =' → logprob: -3.535344362258911
    3. ' ,' → logprob: -5.285344123840332
    4. '=' → logprob: -8.285344123840332
    5. ',N' → logprob: -9.785344123840332
    6. ',input' → logprob: -10.285344123840332
    7. ',s' → logprob: -10.660344123840332
    8. ' ' → logprob: -10.910344123840332
    9. ',n' → logprob: -11.035344123840332
    10. '=input' → logprob: -11.410344123840332

Token 15: ' X' (ID: 2127)
  Prédit: 'M'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'M' → logprob: -0.18535473942756653
    2. ' M' → logprob: -1.8103547096252441
    3. 'K' → logprob: -5.435354709625244
    4. ' K' → logprob: -7.310354709625244
    5. 'm' → logprob: -8.435355186462402
    6. ' ' → logprob: -8.935355186462402
    7. 'k' → logprob: -10.185355186462402
    8. 'a' → logprob: -10.435355186462402
    9. 'Q' → logprob: -10.560355186462402
    10. 'input' → logprob: -10.935355186462402

Token 16: ' =' (ID: 314)
  Prédit: ' ='
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' =' → logprob: -0.22543886303901672
    2. '=' → logprob: -1.6004388332366943
    3. ',' → logprob: -11.350439071655273
    4. '=input' → logprob: -11.350439071655273
    5. '=int' → logprob: -14.225439071655273
    6. ')' → logprob: -14.725439071655273
    7. ' ' → logprob: -15.350439071655273
    8. '```' → logprob: -15.350439071655273
    9. 's' → logprob: -15.850439071655273
    10. '<|end|>' → logprob: -15.975439071655273

Token 17: ' map' (ID: 4014)
  Prédit: ' map'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' map' → logprob: -0.1602475792169571
    2. 'map' → logprob: -1.910247564315796
    3. 'input' → logprob: -11.785247802734375
    4. ' input' → logprob: -11.910247802734375
    5. ' list' → logprob: -12.910247802734375
    6. 'list' → logprob: -13.410247802734375
    7. 'int' → logprob: -13.785247802734375
    8. '(map' → logprob: -13.785247802734375
    9. ' [' → logprob: -13.910247802734375
    10. '[' → logprob: -13.910247802734375

Token 18: '(int' (ID: 2742)
  Prédit: '(int'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(int' → logprob: -0.029861105605959892
    2. '(' → logprob: -3.5298612117767334
    3. '(str' → logprob: -9.904861450195312
    4. '(input' → logprob: -10.779861450195312
    5. 'int' → logprob: -10.904861450195312
    6. '(lambda' → logprob: -11.529861450195312
    7. '<int' → logprob: -12.404861450195312
    8. '(
' → logprob: -12.529861450195312
    9. '[int' → logprob: -13.404861450195312
    10. '(in' → logprob: -14.654861450195312

Token 19: ',' (ID: 11)
  Prédit: '(input'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(input' → logprob: -0.6757900714874268
    2. 'input' → logprob: -0.8007900714874268
    3. ')' → logprob: -3.9257900714874268
    4. ',input' → logprob: -4.300789833068848
    5. ',' → logprob: -5.050789833068848
    6. ' input' → logprob: -6.300789833068848
    7. '(' → logprob: -7.425789833068848
    8. '=input' → logprob: -9.925789833068848
    9. '[input' → logprob: -10.425789833068848
    10. '<input' → logprob: -10.925789833068848

Token 20: ' input' (ID: 3422)
  Prédit: 'input'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'input' → logprob: -0.06197004392743111
    2. ' input' → logprob: -2.8119699954986572
    3. '(input' → logprob: -14.311969757080078
    4. ')' → logprob: -14.561969757080078
    5. '=input' → logprob: -15.061969757080078
    6. ',input' → logprob: -15.436969757080078
    7. ' ' → logprob: -15.561969757080078
    8. '<input' → logprob: -15.561969757080078
    9. '```' → logprob: -15.811969757080078
    10. '	input' → logprob: -16.061969757080078

Token 21: '().' (ID: 1454)
  Prédit: '().'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '().' → logprob: -0.4013257324695587
    2. '())' → logprob: -1.2763257026672363
    3. '()' → logprob: -3.0263257026672363
    4. ')' → logprob: -6.151325702667236
    5. '());' → logprob: -8.776326179504395
    6. '`()' → logprob: -9.151326179504395
    7. '()))' → logprob: -9.401326179504395
    8. '(' → logprob: -9.401326179504395
    9. '()`' → logprob: -9.526326179504395
    10. '(),' → logprob: -10.026326179504395

Token 22: 'split' (ID: 13627)
  Prédit: 'split'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'split' → logprob: -0.0002644351334311068
    2. 'strip' → logprob: -8.250264167785645
    3. 'rstrip' → logprob: -13.250264167785645
    4. ' split' → logprob: -13.625264167785645
    5. 'spl' → logprob: -16.25026512145996
    6. '(split' → logprob: -16.62526512145996
    7. 'read' → logprob: -18.62526512145996
    8. '.split' → logprob: -19.25026512145996
    9. 's' → logprob: -19.75026512145996
    10. ')' → logprob: -19.87526512145996

Token 23: '())
' (ID: 4574)
  Prédit: '())'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '())' → logprob: -0.31031012535095215
    2. ')' → logprob: -1.6853101253509521
    3. '))' → logprob: -2.810310125350952
    4. '()))' → logprob: -3.935310125350952
    5. '()' → logprob: -6.435310363769531
    6. '(' → logprob: -10.560310363769531
    7. ' ())' → logprob: -11.560310363769531
    8. '('' → logprob: -12.810310363769531
    9. '())
' → logprob: -12.810310363769531
    10. '(),' → logprob: -12.935310363769531

Token 24: '#' (ID: 2)
  Prédit: '#'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '#' → logprob: -0.7579191327095032
    2. 'if' → logprob: -2.1329190731048584
    3. ')' → logprob: -2.3829190731048584
    4. ',' → logprob: -2.6329190731048584
    5. ':' → logprob: -2.7579190731048584
    6. 'for' → logprob: -3.2579190731048584
    7. '<|end|>' → logprob: -4.0079193115234375
    8. ' ' → logprob: -4.1329193115234375
    9. '
' → logprob: -4.2579193115234375
    10. 'i' → logprob: -4.3829193115234375

Token 25: ' Je' (ID: 4678)
  Prédit: '#'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '#' → logprob: -0.9249680042266846
    2. 'for' → logprob: -1.6749680042266846
    3. 'if' → logprob: -1.7999680042266846
    4. ' if' → logprob: -2.9249680042266846
    5. ' ' → logprob: -3.2999680042266846
    6. ' for' → logprob: -3.4249680042266846
    7. 'i' → logprob: -3.5499680042266846
    8. 'print' → logprob: -3.6749680042266846
    9. 'result' → logprob: -3.9249680042266846
    10. ' #' → logprob: -4.4249677658081055

Token 26: ' crois' (ID: 65485)
  Prédit: 'veux'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'veux' → logprob: -0.737528920173645
    2. ' veux' → logprob: -1.362528920173645
    3. 'voud' → logprob: -2.7375288009643555
    4. 's' → logprob: -3.2375288009643555
    5. ' vais' → logprob: -3.2375288009643555
    6. ' #' → logprob: -4.1125288009643555
    7. 'print' → logprob: -4.1125288009643555
    8. 'vais' → logprob: -4.7375288009643555
    9. ' souhaite' → logprob: -4.7375288009643555
    10. ' prends' → logprob: -4.8625288009643555

Token 27: ' que' (ID: 661)
  Prédit: ' que'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' que' → logprob: -0.23615208268165588
    2. ' ' → logprob: -1.9861520528793335
    3. 'que' → logprob: -3.236152172088623
    4. ' qu' → logprob: -3.986152172088623
    5. '#' → logprob: -5.611152172088623
    6. ')' → logprob: -5.611152172088623
    7. ',' → logprob: -6.111152172088623
    8. '  ' → logprob: -6.861152172088623
    9. '.' → logprob: -7.486152172088623
    10. ' #' → logprob: -7.611152172088623

Token 28: ' c' (ID: 274)
  Prédit: ' N'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' N' → logprob: -0.9841079115867615
    2. ' X' → logprob: -1.4841079711914062
    3. 'X' → logprob: -2.1091079711914062
    4. ' c' → logprob: -2.6091079711914062
    5. 'N' → logprob: -2.9841079711914062
    6. 'c' → logprob: -3.3591079711914062
    7. ' len' → logprob: -3.3591079711914062
    8. ' je' → logprob: -3.9841079711914062
    9. 'len' → logprob: -4.359107971191406
    10. ' la' → logprob: -4.734107971191406

Token 29: ''est' (ID: 6616)
  Prédit: ''est'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ''est' → logprob: -0.9153476357460022
    2. 'est' → logprob: -1.0403475761413574
    3. 'e' → logprob: -2.0403475761413574
    4. ''#' → logprob: -3.2903475761413574
    5. ''' → logprob: -3.5403475761413574
    6. 'a' → logprob: -3.9153475761413574
    7. ''s' → logprob: -5.165347576141357
    8. '#' → logprob: -5.290347576141357
    9. ' '' → logprob: -5.665347576141357
    10. ''a' → logprob: -6.165347576141357

Token 30: ' la' (ID: 557)
  Prédit: 'tout'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'tout' → logprob: -0.6378244161605835
    2. ' tout' → logprob: -0.8878244161605835
    3. ' ça' → logprob: -5.012824535369873
    4. ' correct' → logprob: -5.387824535369873
    5. 'possible' → logprob: -5.387824535369873
    6. ' une' → logprob: -5.887824535369873
    7. ' possible' → logprob: -5.887824535369873
    8. 'bien' → logprob: -6.012824535369873
    9. ' bon' → logprob: -6.137824535369873
    10. 'pas' → logprob: -6.137824535369873

Token 31: ' bonne' (ID: 24450)
  Prédit: ' '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' ' → logprob: -1.3301291465759277
    2. ',' → logprob: -1.4551291465759277
    3. ')' → logprob: -2.3301291465759277
    4. '.' → logprob: -2.8301291465759277
    5. 's' → logprob: -3.0801291465759277
    6. ' a' → logprob: -3.4551291465759277
    7. ' )' → logprob: -4.080129146575928
    8. '`' → logprob: -4.142629146575928
    9. ' for' → logprob: -4.205129146575928
    10. 'for' → logprob: -4.267629146575928

Token 32: ' formule' (ID: 84316)
  Prédit: '.'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '.' → logprob: -1.171409010887146
    2. 'indent' → logprob: -1.671409010887146
    3. 'solution' → logprob: -2.6714091300964355
    4. '_' → logprob: -3.5464091300964355
    5. ' solution' → logprob: -3.5464091300964355
    6. ' réponse' → logprob: -3.5464091300964355
    7. 'appro' → logprob: -3.7964091300964355
    8. 'ligne' → logprob: -3.7964091300964355
    9. 'answer' → logprob: -3.9214091300964355
    10. ' ' → logprob: -3.9214091300964355

Token 33: ' ??
' (ID: 171024)
  Prédit: 'for'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'for' → logprob: -0.7467982172966003
    2. ' for' → logprob: -1.7467982769012451
    3. 'print' → logprob: -2.621798276901245
    4. ':' → logprob: -2.871798276901245
    5. '*' → logprob: -3.121798276901245
    6. '(' → logprob: -3.121798276901245
    7. ')' → logprob: -3.121798276901245
    8. 'X' → logprob: -4.121798038482666
    9. ',' → logprob: -4.246798038482666
    10. '`' → logprob: -4.621798038482666

Token 34: 'result' (ID: 2521)
  Prédit: 'print'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'print' → logprob: -0.33607834577560425
    2. 'result' → logprob: -1.461078405380249
    3. 'for' → logprob: -4.58607816696167
    4. 'answer' → logprob: -4.71107816696167
    5. 'ans' → logprob: -4.96107816696167
    6. 'res' → logprob: -5.21107816696167
    7. 'total' → logprob: -5.71107816696167
    8. 'Y' → logprob: -6.21107816696167
    9. 's' → logprob: -6.21107816696167
    10. 'a' → logprob: -6.71107816696167

Token 35: ' =' (ID: 314)
  Prédit: ' ='
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' =' → logprob: -0.18355408310890198
    2. '=' → logprob: -1.8085540533065796
    3. '_' → logprob: -6.308554172515869
    4. 's' → logprob: -6.433554172515869
    5. ' ' → logprob: -8.308553695678711
    6. ')' → logprob: -10.683553695678711
    7. ',' → logprob: -10.933553695678711
    8. ' +=' → logprob: -11.183553695678711
    9. '1' → logprob: -11.683553695678711
    10. '.' → logprob: -11.808553695678711

Token 36: ' N' (ID: 478)
  Prédit: 'N'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'N' → logprob: -1.165928840637207
    2. ' N' → logprob: -1.290928840637207
    3. 'X' → logprob: -2.040928840637207
    4. ' (' → logprob: -2.415928840637207
    5. ' X' → logprob: -2.415928840637207
    6. 'min' → logprob: -4.040928840637207
    7. '(X' → logprob: -4.290928840637207
    8. '(N' → logprob: -4.415928840637207
    9. ' min' → logprob: -4.665928840637207
    10. 'pow' → logprob: -4.915928840637207

Token 37: ' -' (ID: 533)
  Prédit: '*'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '*' → logprob: -0.2579144835472107
    2. '**' → logprob: -2.0079145431518555
    3. ' *' → logprob: -2.8829145431518555
    4. ' **' → logprob: -4.5079145431518555
    5. '//' → logprob: -5.3829145431518555
    6. '^' → logprob: -5.3829145431518555
    7. ' //' → logprob: -5.7579145431518555
    8. '+' → logprob: -5.8829145431518555
    9. '-' → logprob: -5.8829145431518555
    10. '%' → logprob: -6.0079145431518555

Token 38: ' X' (ID: 2127)
  Prédit: 'X'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'X' → logprob: -0.025115670636296272
    2. ' X' → logprob: -4.400115489959717
    3. '1' → logprob: -5.650115489959717
    4. ' (' → logprob: -6.025115489959717
    5. '(X' → logprob: -6.025115489959717
    6. '(' → logprob: -6.275115489959717
    7. ' ' → logprob: -7.150115489959717
    8. 'N' → logprob: -8.025115966796875
    9. '2' → logprob: -8.150115966796875
    10. 'min' → logprob: -8.400115966796875

Token 39: ' +' (ID: 659)
  Prédit: ''
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False

Token 40: ' ' (ID: 220)
  Prédit: '1'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '1' → logprob: -0.0060233608819544315
    2. ' ' → logprob: -5.506023406982422
    3. '2' → logprob: -7.756023406982422
    4. 'X' → logprob: -7.881023406982422
    5. '(' → logprob: -8.006023406982422
    6. 'N' → logprob: -8.881023406982422
    7. '(N' → logprob: -9.881023406982422
    8. '3' → logprob: -10.006023406982422
    9. ' (' → logprob: -10.006023406982422
    10. 'int' → logprob: -10.131023406982422

Token 41: '1' (ID: 16)
  Prédit: '1'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '1' → logprob: -0.0012147598899900913
    2. '2' → logprob: -7.751214981079102
    3. 'N' → logprob: -9.126214981079102
    4. ' ' → logprob: -9.126214981079102
    5. 'X' → logprob: -9.376214981079102
    6. '(' → logprob: -9.501214981079102
    7. '10' → logprob: -9.751214981079102
    8. '3' → logprob: -10.126214981079102
    9. '0' → logprob: -10.563714981079102
    10. '100' → logprob: -10.626214981079102

Token 42: '
' (ID: 198)
  Prédit: ''
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False

Token 43: 'print' (ID: 1598)
  Prédit: 'print'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'print' → logprob: -0.005908765830099583
    2. ')' → logprob: -5.755908966064453
    3. '<|end|>' → logprob: -6.380908966064453
    4. ' print' → logprob: -7.130908966064453
    5. '```' → logprob: -9.880908966064453
    6. '#' → logprob: -10.005908966064453
    7. '
' → logprob: -10.755908966064453
    8. '.print' → logprob: -10.755908966064453
    9. 'prin' → logprob: -11.005908966064453
    10. '#print' → logprob: -11.380908966064453

Token 44: '(result' (ID: 8111)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(' → logprob: -0.004079470410943031
    2. '(result' → logprob: -5.504079341888428
    3. '(

' → logprob: -15.629079818725586
    4. '((' → logprob: -15.879079818725586
    5. '()' → logprob: -16.004079818725586
    6. '(
' → logprob: -16.129079818725586
    7. '(res' → logprob: -16.254079818725586
    8. '("("' → logprob: -16.379079818725586
    9. ' (' → logprob: -16.504079818725586
    10. '(`' → logprob: -16.754079818725586

Token 45: ')' (ID: 8)
  Prédit: ')'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')' → logprob: -3.292907877039397e-06
    2. ' )' → logprob: -13.37500286102295
    3. '))' → logprob: -13.62500286102295
    4. '`)' → logprob: -15.37500286102295
    5. ')`' → logprob: -16.000003814697266
    6. ')
' → logprob: -16.875003814697266
    7. '#' → logprob: -17.125003814697266
    8. '()' → logprob: -17.500003814697266
    9. '')' → logprob: -17.500003814697266
    10. ')#' → logprob: -17.750003814697266

Token 46: ' ' (ID: 220)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')' → logprob: -0.5190192461013794
    2. '<|end|>' → logprob: -1.0190192461013794
    3. '\n' → logprob: -4.01901912689209
    4. '```' → logprob: -4.14401912689209
    5. '
' → logprob: -6.01901912689209
    6. ' ' → logprob: -6.01901912689209
    7. '<|end|>' → logprob: -6.26901912689209
    8. '#' → logprob: -6.64401912689209
    9. 'newline' → logprob: -7.64401912689209
    10. ' ' → logprob: -8.39401912689209

Token 47: ' #' (ID: 1069)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ')' → logprob: -0.6660757660865784
    2. '<|end|>' → logprob: -0.7910757660865784
    3. '```' → logprob: -4.291075706481934
    4. ' ' → logprob: -4.666075706481934
    5. '\n' → logprob: -5.666075706481934
    6. '#' → logprob: -6.041075706481934
    7. '
' → logprob: -6.916075706481934
    8. '<|end|>' → logprob: -6.916075706481934
    9. '\' → logprob: -7.166075706481934
    10. '[' → logprob: -8.916075706481934

Token 48: ' On' (ID: 2160)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ')' → logprob: -0.23736153542995453
    2. '<|end|>' → logprob: -1.6123615503311157
    3. '```' → logprob: -4.862361431121826
    4. '\n' → logprob: -6.862361431121826
    5. '<|end|>' → logprob: -6.987361431121826
    6. ' ' → logprob: -7.737361431121826
    7. '#' → logprob: -7.862361431121826
    8. '
' → logprob: -8.237361907958984
    9. '\' → logprob: -8.362361907958984
    10. 'newline' → logprob: -8.737361907958984

Token 49: ' affiche' (ID: 127479)
  Prédit: ' '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' ' → logprob: -0.5174268484115601
    2. ''' → logprob: -2.3924269676208496
    3. '<|end|>' → logprob: -2.3924269676208496
    4. ')' → logprob: -3.0174269676208496
    5. '```' → logprob: -4.14242696762085
    6. ' ' → logprob: -4.26742696762085
    7. 'a' → logprob: -4.39242696762085
    8. '"' → logprob: -4.51742696762085
    9. '<|end|>' → logprob: -4.51742696762085
    10. '  ' → logprob: -4.64242696762085

Token 50: ' ce' (ID: 2357)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '(' → logprob: -0.8424590229988098
    2. '()' → logprob: -1.092458963394165
    3. ')' → logprob: -1.592458963394165
    4. '<|end|>' → logprob: -4.717459201812744
    5. '("")' → logprob: -5.217459201812744
    6. '(result' → logprob: -5.342459201812744
    7. ' ' → logprob: -5.592459201812744
    8. '```' → logprob: -5.717459201812744
    9. '\' → logprob: -7.092459201812744
    10. 'result' → logprob: -7.467459201812744

Token 51: ' qu' (ID: 474)
  Prédit: ' résultat'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' résultat' → logprob: -0.7996390461921692
    2. ' qui' → logprob: -1.5496389865875244
    3. ' qu' → logprob: -2.4246389865875244
    4. ' nombre' → logprob: -2.5496389865875244
    5. 'l' → logprob: -2.9246389865875244
    6. ' ' → logprob: -3.4246389865875244
    7. ' que' → logprob: -4.2996392250061035
    8. 'la' → logprob: -4.4246392250061035
    9. 'nombre' → logprob: -4.7996392250061035
    10. 'ux' → logprob: -4.9246392250061035

Token 52: ''on' (ID: 25812)
  Prédit: 'qu'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'qu' → logprob: -0.7706778049468994
    2. ''on' → logprob: -1.3956778049468994
    3. ''il' → logprob: -2.2706778049468994
    4. 'l' → logprob: -2.5206778049468994
    5. 'il' → logprob: -3.3956778049468994
    6. ''' → logprob: -3.3956778049468994
    7. 'u' → logprob: -4.52067756652832
    8. ' qu' → logprob: -4.52067756652832
    9. 'qui' → logprob: -4.52067756652832
    10. 'on' → logprob: -6.39567756652832

Token 53: ' trouve' (ID: 30913)
  Prédit: 'reste'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'reste' → logprob: -0.8768046498298645
    2. ' reste' → logprob: -2.1268045902252197
    3. ' veut' → logprob: -2.2518045902252197
    4. 'f' → logprob: -2.5018045902252197
    5. 'pe' → logprob: -3.1268045902252197
    6. 'a' → logprob: -3.3768045902252197
    7. ' a' → logprob: -4.126804828643799
    8. ' peut' → logprob: -4.126804828643799
    9. 've' → logprob: -4.251804828643799
    10. 'cherche' → logprob: -4.376804828643799

Token 54: ',' (ID: 11)
  Prédit: ''
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False

Token 55: ' normalement' (ID: 164432)
  Prédit: ''
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False

Token 56: ' ça' (ID: 13590)
  Prédit: ''
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False

Token 57: ' marche' (ID: 58191)
  Prédit: ' marche'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' marche' → logprob: -0.7724577784538269
    2. ' fonctionne' → logprob: -2.3974578380584717
    3. ' doit' → logprob: -2.5224578380584717
    4. ' suffit' → logprob: -2.7724578380584717
    5. ' devrait' → logprob: -3.0224578380584717
    6. 'fonction' → logprob: -3.1474578380584717
    7. 's' → logprob: -3.2724578380584717
    8. ' suff' → logprob: -3.3974578380584717
    9. ' s' → logprob: -3.3974578380584717
    10. 'do' → logprob: -3.6474578380584717


RÉSUMÉ:
--------------------------------------------------------------------------------
Total des tokens analysés: 55
Tokens correctement prédits (1ère position, stricte): 16
Tokens correctement prédits (1ère position, avec adaptation): 16
Tokens correctement prédits (top 10): 29
Précision stricte (1ère position): 29.09%
Précision adaptée (1ère position): 29.09%
Précision (top 10): 52.73%
================================================================================
