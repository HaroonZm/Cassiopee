================================================================================
ANALYSE DE PRÉDICTION TOKEN PAR TOKEN (BATCH API)
Date: 2025-06-04 19:27:47
Modèle de tokenisation: gpt-4o-mini
================================================================================

SCRIPT ANALYSÉ:
--------------------------------------------------------------------------------
import sys
import socket

hostname = socket.gethostname()

if hostname == 'F451C':
    sys.stdin = open('a1.in')

def read_int_list():
    return list(map(int, input().split()))

def read_str_list():
    return input().split()

def read_int():
    return int(input())

def read_str():
    return input()

def main():
    H, A = read_int_list()
    res = 0
    for i in range(10001):
        H = H - A
        res += 1
        if H <= 0:
            break
    print(res)

main()
--------------------------------------------------------------------------------

RÉSULTATS D'ANALYSE TOKEN PAR TOKEN:
--------------------------------------------------------------------------------
Token 0: 'import' (ID: 561)
  → Token d'amorce (pas de prédiction)

Token 1: ' sys' (ID: 12228)
  → Token d'amorce (pas de prédiction)

Token 2: '
' (ID: 198)
  → Token d'amorce (pas de prédiction)

Token 3: 'import' (ID: 561)
  Prédit: '\n'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '\n' → logprob: -0.3205606937408447
    2. '.' → logprob: -1.4455606937408447
    3. 'import' → logprob: -4.570560455322266
    4. '\' → logprob: -4.570560455322266
    5. 'newline' → logprob: -5.195560455322266
    6. '<|end|>' → logprob: -5.320560455322266
    7. '
' → logprob: -6.570560455322266
    8. '```' → logprob: -7.070560455322266
    9. '<|end|>' → logprob: -7.195560455322266
    10. '\r' → logprob: -7.195560455322266

Token 4: ' socket' (ID: 15114)
  Prédit: ' os'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' os' → logprob: -0.00020771251001860946
    2. 'os' → logprob: -8.500207901000977
    3. ' math' → logprob: -13.375207901000977
    4. ' re' → logprob: -13.750207901000977
    5. '"os' → logprob: -14.250207901000977
    6. ' json' → logprob: -14.750207901000977
    7. '_os' → logprob: -16.375207901000977
    8. ' ' → logprob: -16.500207901000977
    9. ' io' → logprob: -16.625207901000977
    10. '	os' → logprob: -16.875207901000977

Token 5: '

' (ID: 279)
  Prédit: '.'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '.' → logprob: -0.18094801902770996
    2. '\n' → logprob: -2.43094801902771
    3. '
' → logprob: -3.80594801902771
    4. '\' → logprob: -4.180948257446289
    5. 'import' → logprob: -4.305948257446289
    6. '```' → logprob: -4.305948257446289
    7. 'newline' → logprob: -5.805948257446289
    8. '.
' → logprob: -6.180948257446289
    9. '<|end|>' → logprob: -6.180948257446289
    10. '

' → logprob: -6.430948257446289

Token 6: 'hostname' (ID: 67891)
  Prédit: '.'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '.' → logprob: -0.07325747609138489
    2. '\n' → logprob: -3.4482574462890625
    3. '\' → logprob: -4.6982574462890625
    4. '```' → logprob: -4.6982574462890625
    5. 'import' → logprob: -4.9482574462890625
    6. '=' → logprob: -5.8232574462890625
    7. '.
' → logprob: -6.0732574462890625
    8. ',' → logprob: -6.4482574462890625
    9. '#' → logprob: -6.5732574462890625
    10. 's' → logprob: -6.8232574462890625

Token 7: ' =' (ID: 314)
  Prédit: '.'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '.' → logprob: -0.005206601694226265
    2. '=' → logprob: -5.88020658493042
    3. ')' → logprob: -6.50520658493042
    4. ' =' → logprob: -7.63020658493042
    5. '```' → logprob: -9.005207061767578
    6. 's' → logprob: -9.630207061767578
    7. '()' → logprob: -9.880207061767578
    8. '[' → logprob: -11.005207061767578
    9. '<|end|>' → logprob: -11.005207061767578
    10. '(' → logprob: -11.130207061767578

Token 8: ' socket' (ID: 15114)
  Prédit: ' socket'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' socket' → logprob: -0.0014449955197051167
    2. 'socket' → logprob: -6.7514448165893555
    3. ' '' → logprob: -9.251444816589355
    4. ''' → logprob: -9.751444816589355
    5. ''s' → logprob: -10.251444816589355
    6. '"' → logprob: -10.626444816589355
    7. ' "' → logprob: -10.751444816589355
    8. ' ' → logprob: -10.876444816589355
    9. '	socket' → logprob: -12.126444816589355
    10. '.socket' → logprob: -12.751444816589355

Token 9: '.get' (ID: 775)
  Prédit: '.get'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '.get' → logprob: -0.482438862323761
    2. '.' → logprob: -0.982438862323761
    3. '.socket' → logprob: -5.232439041137695
    4. ' .' → logprob: -6.482439041137695
    5. '.hostname' → logprob: -7.107439041137695
    6. '.readline' → logprob: -9.482439041137695
    7. '.python' → logprob: -9.732439041137695
    8. '.g' → logprob: -9.857439041137695
    9. '.setdefault' → logprob: -9.982439041137695
    10. '.py' → logprob: -10.232439041137695

Token 10: 'hostname' (ID: 67891)
  Prédit: 'hostname'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'hostname' → logprob: -0.06200577691197395
    2. 'host' → logprob: -2.8120057582855225
    3. 'fq' → logprob: -10.312005996704102
    4. '_hostname' → logprob: -12.437005996704102
    5. '_host' → logprob: -14.687005996704102
    6. ' hostname' → logprob: -15.687005996704102
    7. 'h' → logprob: -15.812005996704102
    8. 'hos' → logprob: -16.9370059967041
    9. '	host' → logprob: -17.4370059967041
    10. '-host' → logprob: -17.6870059967041

Token 11: '()

' (ID: 5874)
  Prédit: '()'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '()' → logprob: -0.3486368656158447
    2. '(' → logprob: -1.2236368656158447
    3. '```' → logprob: -10.223636627197266
    4. '(
' → logprob: -10.598636627197266
    5. ')' → logprob: -10.848636627197266
    6. ' ()' → logprob: -10.973636627197266
    7. '`()' → logprob: -11.223636627197266
    8. ' (' → logprob: -11.223636627197266
    9. '().' → logprob: -11.848636627197266
    10. ' parentheses' → logprob: -12.098636627197266

Token 12: 'if' (ID: 366)
  Prédit: 'ip'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'ip' → logprob: -0.15510940551757812
    2. '_ip' → logprob: -2.530109405517578
    3. 'print' → logprob: -3.655109405517578
    4. '\n' → logprob: -4.405109405517578
    5. '.' → logprob: -4.905109405517578
    6. '#' → logprob: -6.030109405517578
    7. '```' → logprob: -6.155109405517578
    8. '\' → logprob: -6.405109405517578
    9. '()' → logprob: -6.655109405517578
    10. 'socket' → logprob: -6.780109405517578

Token 13: ' hostname' (ID: 64474)
  Prédit: ' hostname'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' hostname' → logprob: -0.061309993267059326
    2. ' ' → logprob: -3.311310052871704
    3. 'hostname' → logprob: -4.436309814453125
    4. ' socket' → logprob: -4.811309814453125
    5. ' ' → logprob: -6.811309814453125
    6. ' not' → logprob: -7.186309814453125
    7. ' name' → logprob: -7.686309814453125
    8. '  ' → logprob: -8.561309814453125
    9. ' __' → logprob: -9.186309814453125
    10. ' sys' → logprob: -9.311309814453125

Token 14: ' ==' (ID: 951)
  Prédit: ' =='
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' ==' → logprob: -0.0054399664513766766
    2. ' !=' → logprob: -6.630439758300781
    3. '.' → logprob: -6.755439758300781
    4. '==' → logprob: -6.755439758300781
    5. ' .' → logprob: -6.880439758300781
    6. '.startswith' → logprob: -8.005439758300781
    7. '.endswith' → logprob: -9.130439758300781
    8. ' ' → logprob: -9.130439758300781
    9. ' =' → logprob: -9.755439758300781
    10. '()' → logprob: -10.380439758300781

Token 15: ' '' (ID: 461)
  Prédit: '''
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ''' → logprob: -0.6354157328605652
    2. '"' → logprob: -0.7604157328605652
    3. ' '' → logprob: -6.385415554046631
    4. ' "' → logprob: -7.010415554046631
    5. ' ' → logprob: -8.510416030883789
    6. ''s' → logprob: -11.510416030883789
    7. '"user' → logprob: -13.135416030883789
    8. ''m' → logprob: -13.760416030883789
    9. '"I' → logprob: -14.072916030883789
    10. '`' → logprob: -14.510416030883789

Token 16: 'F' (ID: 37)
  Prédit: 'localhost'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'localhost' → logprob: -0.5134645104408264
    2. ''' → logprob: -1.5134644508361816
    3. 'my' → logprob: -1.8884644508361816
    4. 'server' → logprob: -4.638464450836182
    5. ''s' → logprob: -4.763464450836182
    6. 'example' → logprob: -4.888464450836182
    7. 'local' → logprob: -6.388464450836182
    8. 'My' → logprob: -7.138464450836182
    9. ' localhost' → logprob: -7.763464450836182
    10. ''m' → logprob: -8.01346492767334

Token 17: '451' (ID: 37689)
  Prédit: 'O'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'O' → logprob: -0.18496127426624298
    2. 'L' → logprob: -3.6849613189697266
    3. 'U' → logprob: -3.6849613189697266
    4. 'R' → logprob: -3.9349613189697266
    5. 'o' → logprob: -4.309961318969727
    6. 'Q' → logprob: -4.934961318969727
    7. 'F' → logprob: -5.122461318969727
    8. '-' → logprob: -5.184961318969727
    9. 'D' → logprob: -5.184961318969727
    10. 'P' → logprob: -5.684961318969727

Token 18: 'C' (ID: 34)
  Prédit: '':'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '':' → logprob: -0.0809781402349472
    2. ''' → logprob: -2.9559781551361084
    3. '-' → logprob: -4.705977916717529
    4. '-F' → logprob: -5.830977916717529
    5. '':
' → logprob: -6.455977916717529
    6. '7' → logprob: -6.580977916717529
    7. ':' → logprob: -6.830977916717529
    8. ''s' → logprob: -6.955977916717529
    9. '-PC' → logprob: -7.205977916717529
    10. '9' → logprob: -7.330977916717529

Token 19: '':
' (ID: 7669)
  Prédit: '':'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '':' → logprob: -1.6430693864822388
    2. '-' → logprob: -2.018069267272949
    3. '0' → logprob: -2.393069267272949
    4. ''' → logprob: -3.393069267272949
    5. '2' → logprob: -3.518069267272949
    6. '3' → logprob: -3.768069267272949
    7. 'C' → logprob: -3.768069267272949
    8. '1' → logprob: -3.768069267272949
    9. '-P' → logprob: -3.768069267272949
    10. 'F' → logprob: -3.768069267272949

Token 20: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.1381750851869583
    2. '    ' → logprob: -3.2631750106811523
    3. ' print' → logprob: -3.3881750106811523
    4. '    
' → logprob: -4.013175010681152
    5. 'print' → logprob: -4.138175010681152
    6. '\n' → logprob: -4.388175010681152
    7. ' 
' → logprob: -6.263175010681152
    8. ' sys' → logprob: -6.513175010681152
    9. '\' → logprob: -6.638175010681152
    10. '```' → logprob: -6.638175010681152

Token 21: ' sys' (ID: 12228)
  Prédit: ' print'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' print' → logprob: -0.36123496294021606
    2. 'print' → logprob: -2.4862349033355713
    3. '    ' → logprob: -2.6112349033355713
    4. ' sys' → logprob: -2.9862349033355713
    5. '   ' → logprob: -3.8612349033355713
    6. ' ' → logprob: -4.23623514175415
    7. ' socket' → logprob: -4.73623514175415
    8. ' pass' → logprob: -4.86123514175415
    9. ' 
' → logprob: -4.86123514175415
    10. '    
' → logprob: -5.36123514175415

Token 22: '.stdin' (ID: 93480)
  Prédit: '.exit'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '.exit' → logprob: -0.12741361558437347
    2. '.' → logprob: -2.127413511276245
    3. '.stdout' → logprob: -7.877413749694824
    4. '.argv' → logprob: -10.002413749694824
    5. '.stderr' → logprob: -10.252413749694824
    6. '.quit' → logprob: -12.377413749694824
    7. '.stdin' → logprob: -12.752413749694824
    8. ' .' → logprob: -12.877413749694824
    9. '.write' → logprob: -12.877413749694824
    10. '.out' → logprob: -13.127413749694824

Token 23: ' =' (ID: 314)
  Prédit: '.'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '.' → logprob: -0.28515055775642395
    2. '.read' → logprob: -2.0351505279541016
    3. '.readline' → logprob: -2.4101505279541016
    4. '.write' → logprob: -3.6601505279541016
    5. '.is' → logprob: -7.535150527954102
    6. '.flush' → logprob: -7.910150527954102
    7. '.close' → logprob: -7.910150527954102
    8. ' .' → logprob: -8.660150527954102
    9. '.f' → logprob: -9.160150527954102
    10. '.readlines' → logprob: -9.160150527954102

Token 24: ' open' (ID: 2494)
  Prédit: ' open'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' open' → logprob: -0.12722216546535492
    2. 'open' → logprob: -2.1272220611572266
    3. ' sys' → logprob: -8.627222061157227
    4. 'sys' → logprob: -9.127222061157227
    5. '	open' → logprob: -12.627222061157227
    6. '(open' → logprob: -14.502222061157227
    7. 'socket' → logprob: -14.752222061157227
    8. 'None' → logprob: -15.252222061157227
    9. ' None' → logprob: -15.252222061157227
    10. ' ' → logprob: -15.377222061157227

Token 25: '('' (ID: 706)
  Prédit: '(''
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '('' → logprob: -0.016128329560160637
    2. '(' → logprob: -4.5161285400390625
    3. '('/' → logprob: -5.3911285400390625
    4. '("' → logprob: -8.016128540039062
    5. '('./' → logprob: -9.141128540039062
    6. '("/' → logprob: -9.891128540039062
    7. '('../' → logprob: -11.641128540039062
    8. '(None' → logprob: -12.766128540039062
    9. '('_' → logprob: -12.766128540039062
    10. '()' → logprob: -13.391128540039062

Token 26: 'a' (ID: 64)
  Prédit: 'input'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'input' → logprob: -0.3368157744407654
    2. 'F' → logprob: -1.9618158340454102
    3. ' input' → logprob: -2.83681583404541
    4. ' F' → logprob: -3.21181583404541
    5. 'f' → logprob: -4.58681583404541
    6. 'in' → logprob: -4.83681583404541
    7. 'data' → logprob: -5.46181583404541
    8. 'ip' → logprob: -5.71181583404541
    9. 'file' → logprob: -5.96181583404541
    10. 'test' → logprob: -6.46181583404541

Token 27: '1' (ID: 16)
  Prédit: '.in'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '.in' → logprob: -0.8677961230278015
    2. '.' → logprob: -1.7427961826324463
    3. '_input' → logprob: -1.9927961826324463
    4. 'in' → logprob: -2.7427961826324463
    5. '.txt' → logprob: -3.3677961826324463
    6. '_in' → logprob: -3.3677961826324463
    7. 'i' → logprob: -3.4927961826324463
    8. '_i' → logprob: -3.4927961826324463
    9. 'input' → logprob: -3.7427961826324463
    10. '.i' → logprob: -3.9927961826324463

Token 28: '.in' (ID: 2250)
  Prédit: '.txt'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '.txt' → logprob: -0.8051941394805908
    2. '.in' → logprob: -1.0551941394805908
    3. '.' → logprob: -1.8051941394805908
    4. '_input' → logprob: -4.805193901062012
    5. 'input' → logprob: -5.430193901062012
    6. 'in' → logprob: -5.430193901062012
    7. '_in' → logprob: -5.430193901062012
    8. '.py' → logprob: -6.055193901062012
    9. 'a' → logprob: -6.305193901062012
    10. '.i' → logprob: -6.680193901062012

Token 29: '')

' (ID: 9735)
  Prédit: '','
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '',' → logprob: -0.3841361999511719
    2. '')' → logprob: -1.7591361999511719
    3. 'put' → logprob: -2.384136199951172
    4. '','' → logprob: -3.134136199951172
    5. 'p' → logprob: -4.634136199951172
    6. ''' → logprob: -7.259136199951172
    7. 't' → logprob: -7.634136199951172
    8. 'pt' → logprob: -9.634136199951172
    9. '.txt' → logprob: -11.009136199951172
    10. 'puts' → logprob: -11.009136199951172

Token 30: 'def' (ID: 1314)
  Prédit: '\n'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '\n' → logprob: -0.05517246946692467
    2. ':' → logprob: -4.555172443389893
    3. '
' → logprob: -4.680172443389893
    4. '#' → logprob: -5.180172443389893
    5. '\' → logprob: -5.305172443389893
    6. 'print' → logprob: -5.430172443389893
    7. 'a' → logprob: -6.305172443389893
    8. 'for' → logprob: -6.555172443389893
    9. '    
' → logprob: -6.680172443389893
    10. '' → logprob: -6.680172443389893

Token 31: ' read' (ID: 1729)
  Prédit: ' main'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' main' → logprob: -0.06712419539690018
    2. ' ' → logprob: -3.317124128341675
    3. ' solve' → logprob: -4.067124366760254
    4. ' my' → logprob: -4.942124366760254
    5. ' process' → logprob: -7.692124366760254
    6. ' solution' → logprob: -7.817124366760254
    7. ' read' → logprob: -7.942124366760254
    8. ' test' → logprob: -7.942124366760254
    9. '_' → logprob: -8.192124366760254
    10. ' calculate' → logprob: -8.192124366760254

Token 32: '_int' (ID: 12285)
  Prédit: '_line'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '_line' → logprob: -0.49532583355903625
    2. '():' → logprob: -1.2453258037567139
    3. 'line' → logprob: -2.370325803756714
    4. '()' → logprob: -4.745326042175293
    5. 'Line' → logprob: -8.745326042175293
    6. '_' → logprob: -9.120326042175293
    7. ' ():' → logprob: -9.620326042175293
    8. '_input' → logprob: -9.995326042175293
    9. '_data' → logprob: -10.120326042175293
    10. '():
' → logprob: -10.370326042175293

Token 33: '_list' (ID: 4162)
  Prédit: '():'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '():' → logprob: -0.0007984309340827167
    2. '()' → logprob: -7.250798225402832
    3. ' ():' → logprob: -9.625798225402832
    4. '():
' → logprob: -12.125798225402832
    5. ' ()' → logprob: -12.375798225402832
    6. 's' → logprob: -12.375798225402832
    7. '(' → logprob: -12.625798225402832
    8. '()*' → logprob: -13.500798225402832
    9. '()>' → logprob: -14.250798225402832
    10. '（）' → logprob: -14.500798225402832

Token 34: '():
' (ID: 8595)
  Prédit: '():'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '():' → logprob: -0.0006920627201907337
    2. ' ():' → logprob: -8.125692367553711
    3. '()' → logprob: -8.500692367553711
    4. '(' → logprob: -8.625692367553711
    5. ' ()' → logprob: -11.750692367553711
    6. '():
' → logprob: -13.375692367553711
    7. ':' → logprob: -13.875692367553711
    8. '()>' → logprob: -14.375692367553711
    9. ' (' → logprob: -14.625692367553711
    10. '(prompt' → logprob: -15.375692367553711

Token 35: '   ' (ID: 271)
  Prédit: '():'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '():' → logprob: -0.4528405964374542
    2. '()' → logprob: -1.0778405666351318
    3. '   ' → logprob: -3.827840566635132
    4. ' ()' → logprob: -6.952840805053711
    5. '(' → logprob: -7.702840805053711
    6. ':' → logprob: -8.702840805053711
    7. ' ():' → logprob: -8.702840805053711
    8. '():
' → logprob: -9.452840805053711
    9. '[]' → logprob: -10.327840805053711
    10. '()[' → logprob: -10.327840805053711

Token 36: ' return' (ID: 622)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.009911908768117428
    2. ' return' → logprob: -5.009912014007568
    3. 'return' (adapté à ' return') → logprob: -5.759912014007568
    4. '   ' → logprob: -11.13491153717041
    5. '	return' → logprob: -11.50991153717041
    6. '   ' → logprob: -12.13491153717041
    7. ' ' → logprob: -12.88491153717041
    8. '  ' → logprob: -13.38491153717041
    9. ' ' → logprob: -13.63491153717041
    10. '       ' → logprob: -13.75991153717041

Token 37: ' list' (ID: 1562)
  Prédit: ' list'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' list' → logprob: -0.12698447704315186
    2. 'list' → logprob: -2.1269845962524414
    3. '[list' → logprob: -10.126984596252441
    4. '[' → logprob: -11.876984596252441
    5. ' [' → logprob: -12.501984596252441
    6. ' ' → logprob: -12.876984596252441
    7. ' map' → logprob: -13.751984596252441
    8. '	list' → logprob: -14.126984596252441
    9. 'map' → logprob: -14.876984596252441
    10. '=list' → logprob: -15.001984596252441

Token 38: '(map' (ID: 16946)
  Prédit: '(map'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(map' → logprob: -0.011056075803935528
    2. '(' → logprob: -4.511055946350098
    3. '(int' → logprob: -11.886055946350098
    4. '(
' → logprob: -14.761055946350098
    5. ' map' → logprob: -15.386055946350098
    6. '(

' → logprob: -15.511055946350098
    7. '	map' → logprob: -15.761055946350098
    8. '(sys' → logprob: -16.011056900024414
    9. '(m' → logprob: -16.011056900024414
    10. '(ma' → logprob: -16.636056900024414

Token 39: '(int' (ID: 2742)
  Prédit: '(int'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(int' → logprob: -0.00011427151912357658
    2. '(' → logprob: -9.500114440917969
    3. 'int' → logprob: -10.750114440917969
    4. '<int' → logprob: -11.750114440917969
    5. ',int' → logprob: -12.375114440917969
    6. ' int' → logprob: -12.750114440917969
    7. '=int' → logprob: -13.500114440917969
    8. ' (' → logprob: -14.625114440917969
    9. '[int' → logprob: -15.125114440917969
    10. '```' → logprob: -15.125114440917969

Token 40: ',' (ID: 11)
  Prédit: ','
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ',' → logprob: -0.512438952922821
    2. '(sys' → logprob: -1.0124390125274658
    3. ',input' → logprob: -4.012438774108887
    4. '(input' → logprob: -4.512438774108887
    5. '(' → logprob: -5.387438774108887
    6. 'sys' → logprob: -6.387438774108887
    7. 'input' → logprob: -6.887438774108887
    8. ' ,' → logprob: -7.262438774108887
    9. ' sys' → logprob: -8.512438774108887
    10. ' (' → logprob: -8.512438774108887

Token 41: ' input' (ID: 3422)
  Prédit: ' sys'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' sys' → logprob: -1.1070482730865479
    2. 'input' → logprob: -1.2320482730865479
    3. 'sys' → logprob: -1.6070482730865479
    4. ' input' → logprob: -1.7320482730865479
    5. ' ' → logprob: -9.107048034667969
    6. '(sys' → logprob: -9.732048034667969
    7. '=sys' → logprob: -9.982048034667969
    8. '	sys' → logprob: -10.107048034667969
    9. 'stdin' → logprob: -10.357048034667969
    10. '   ' → logprob: -10.607048034667969

Token 42: '().' (ID: 1454)
  Prédit: '().'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '().' → logprob: -8.41866585687967e-06
    2. '()' → logprob: -12.375008583068848
    3. ' ().' → logprob: -12.625008583068848
    4. '.' → logprob: -15.125008583068848
    5. '.split' → logprob: -15.250008583068848
    6. ' .' → logprob: -16.75000762939453
    7. 'split' → logprob: -16.75000762939453
    8. ')' → logprob: -16.87500762939453
    9. ' ' → logprob: -17.12500762939453
    10. '   ' → logprob: -17.25000762939453

Token 43: 'split' (ID: 13627)
  Prédit: 'split'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'split' → logprob: -0.061983708292245865
    2. 'strip' → logprob: -2.811983823776245
    3. 'rstrip' → logprob: -11.061984062194824
    4. ' split' → logprob: -15.561984062194824
    5. '(split' → logprob: -16.186983108520508
    6. ' strip' → logprob: -17.436983108520508
    7. '.split' → logprob: -18.311983108520508
    8. '_split' → logprob: -19.436983108520508
    9. ')' → logprob: -19.811983108520508
    10. 'spl' → logprob: -20.061983108520508

Token 44: '()))

' (ID: 125972)
  Prédit: '()))'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '()))' → logprob: -0.20296034216880798
    2. '))' → logprob: -1.7029603719711304
    3. '()' → logprob: -6.82796049118042
    4. '())' → logprob: -7.82796049118042
    5. '()))
' → logprob: -10.827960014343262
    6. ')))' → logprob: -11.202960014343262
    7. ')' → logprob: -11.452960014343262
    8. '(' → logprob: -11.952960014343262
    9. '())))' → logprob: -11.952960014343262
    10. '()));' → logprob: -13.077960014343262

Token 45: 'def' (ID: 1314)
  Prédit: 'n'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'n' → logprob: -0.40092232823371887
    2. 'def' → logprob: -1.1509222984313965
    3. 'class' → logprob: -5.7759222984313965
    4. 'for' → logprob: -5.9009222984313965
    5. 'num' → logprob: -5.9009222984313965
    6. 'N' → logprob: -6.0259222984313965
    7. 't' → logprob: -6.9009222984313965
    8. 'if' → logprob: -7.9009222984313965
    9. '\n' → logprob: -8.275922775268555
    10. '#' → logprob: -8.775922775268555

Token 46: ' read' (ID: 1729)
  Prédit: ' solve'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' solve' → logprob: -0.5271334648132324
    2. ' main' → logprob: -1.5271334648132324
    3. ' read' → logprob: -2.4021334648132324
    4. ' find' → logprob: -3.9021334648132324
    5. ' ' → logprob: -3.9021334648132324
    6. ' calculate' → logprob: -4.152133464813232
    7. ' process' → logprob: -4.777133464813232
    8. ' write' → logprob: -5.152133464813232
    9. ' space' → logprob: -5.152133464813232
    10. ' compute' → logprob: -5.277133464813232

Token 47: '_str' (ID: 6182)
  Prédit: '_int'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_int' → logprob: -0.31548118591308594
    2. '_' → logprob: -1.565481185913086
    3. '_line' → logprob: -2.940481185913086
    4. '_str' → logprob: -6.190481185913086
    5. '_string' → logprob: -6.315481185913086
    6. '_list' → logprob: -6.815481185913086
    7. 'int' → logprob: -6.940481185913086
    8. '_integer' → logprob: -8.065481185913086
    9. '_in' → logprob: -8.190481185913086
    10. '__' → logprob: -8.190481185913086

Token 48: '_list' (ID: 4162)
  Prédit: '()'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '()' → logprob: -0.7995411157608032
    2. 'ing' → logprob: -1.2995411157608032
    3. '_list' → logprob: -1.4245411157608032
    4. '():' → logprob: -3.6745409965515137
    5. 'ings' → logprob: -5.049540996551514
    6. '():
' → logprob: -5.799540996551514
    7. 'list' → logprob: -7.299540996551514
    8. 'List' → logprob: -7.674540996551514
    9. 's' → logprob: -8.424541473388672
    10. '_' → logprob: -9.174541473388672

Token 49: '():
' (ID: 8595)
  Prédit: '():'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '():' → logprob: -0.0008388153510168195
    2. '()' → logprob: -7.125838756561279
    3. '():
' → logprob: -10.875839233398438
    4. ' ():' → logprob: -11.500839233398438
    5. '()>' → logprob: -13.750839233398438
    6. '(' → logprob: -14.250839233398438
    7. ' ()' → logprob: -14.250839233398438
    8. '():
' → logprob: -14.375839233398438
    9. '()">' → logprob: -14.500839233398438
    10. ':' → logprob: -14.625839233398438

Token 50: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.4911297559738159
    2. '()' → logprob: -1.116129755973816
    3. '():' → logprob: -2.9911298751831055
    4. 'return' → logprob: -4.8661298751831055
    5. '():
' → logprob: -6.7411298751831055
    6. ' return' → logprob: -7.3661298751831055
    7. ':' → logprob: -8.491129875183105
    8. '()
' → logprob: -9.116129875183105
    9. ')' → logprob: -9.241129875183105
    10. ' ()' → logprob: -9.366129875183105

Token 51: ' return' (ID: 622)
  Prédit: ' return'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' return' → logprob: -0.7639422416687012
    2. 'return' (adapté à ' return') → logprob: -1.0139422416687012
    3. '   ' → logprob: -1.7639422416687012
    4. '	return' → logprob: -11.26394271850586
    5. ' ' → logprob: -12.13894271850586
    6. '  ' → logprob: -14.88894271850586
    7. 'def' → logprob: -15.01394271850586
    8. '    ' → logprob: -15.38894271850586
    9. ' ' → logprob: -15.76394271850586
    10. '   ' → logprob: -16.01394271850586

Token 52: ' input' (ID: 3422)
  Prédit: ' input'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' input' → logprob: -0.6841092705726624
    2. 'input' → logprob: -0.9341092705726624
    3. ' list' → logprob: -2.5591092109680176
    4. 'list' → logprob: -3.6841092109680176
    5. '[input' → logprob: -11.559109687805176
    6. ' ' → logprob: -11.934109687805176
    7. ' str' → logprob: -12.559109687805176
    8. '(input' → logprob: -12.809109687805176
    9. 'str' → logprob: -13.434109687805176
    10. '   ' → logprob: -13.684109687805176

Token 53: '().' (ID: 1454)
  Prédit: '()'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '()' → logprob: -0.1604999154806137
    2. '().' → logprob: -1.910499930381775
    3. '(' → logprob: -8.410499572753906
    4. ' ()' → logprob: -11.285499572753906
    5. '())' → logprob: -12.035499572753906
    6. '()`' → logprob: -12.035499572753906
    7. '();' → logprob: -12.535499572753906
    8. '.' → logprob: -12.660499572753906
    9. '`()' → logprob: -12.660499572753906
    10. ')' → logprob: -12.910499572753906

Token 54: 'split' (ID: 13627)
  Prédit: 'split'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'split' → logprob: -0.00671584764495492
    2. 'strip' → logprob: -5.006715774536133
    3. 'rstrip' → logprob: -14.506715774536133
    4. ' split' → logprob: -17.256715774536133
    5. 'spl' → logprob: -18.131715774536133
    6. '(split' → logprob: -20.506715774536133
    7. '.split' → logprob: -21.131715774536133
    8. ' strip' → logprob: -21.506715774536133
    9. '_split' → logprob: -21.631715774536133
    10. 'plit' → logprob: -23.881715774536133

Token 55: '()

' (ID: 5874)
  Prédit: '()'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '()' → logprob: -0.0001462107611587271
    2. '(' → logprob: -8.87514591217041
    3. '()]' → logprob: -13.37514591217041
    4. '())' → logprob: -13.50014591217041
    5. '()
' → logprob: -14.25014591217041
    6. '()`' → logprob: -14.50014591217041
    7. '()

' → logprob: -14.87514591217041
    8. ' ()' → logprob: -15.12514591217041
    9. '();' → logprob: -15.25014591217041
    10. '()[' → logprob: -15.50014591217041

Token 56: 'def' (ID: 1314)
  Prédit: 'def'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'def' → logprob: -0.2007451057434082
    2. 'n' → logprob: -1.8257451057434082
    3. 'for' → logprob: -4.575745105743408
    4. 'class' → logprob: -4.950745105743408
    5. '#' → logprob: -7.075745105743408
    6. 'num' → logprob: -7.325745105743408
    7. 'd' → logprob: -7.825745105743408
    8. 'N' → logprob: -8.20074462890625
    9. 'data' → logprob: -8.45074462890625
    10. 'if' → logprob: -8.57574462890625

Token 57: ' read' (ID: 1729)
  Prédit: ' read'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' read' → logprob: -0.19352541863918304
    2. ' main' → logprob: -2.0685253143310547
    3. ' solve' → logprob: -3.5685253143310547
    4. 'read' → logprob: -4.193525314331055
    5. 'main' → logprob: -7.068525314331055
    6. ' write' → logprob: -7.068525314331055
    7. 'solve' → logprob: -7.568525314331055
    8. ' run' → logprob: -7.943525314331055
    9. ' calculate' → logprob: -8.068525314331055
    10. ' is' → logprob: -8.068525314331055

Token 58: '_int' (ID: 12285)
  Prédit: '_int'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_int' → logprob: -0.16743972897529602
    2. '_line' → logprob: -2.5424396991729736
    3. '_' → logprob: -2.6674396991729736
    4. '_str' → logprob: -6.292439937591553
    5. 'int' → logprob: -6.542439937591553
    6. '()' → logprob: -7.167439937591553
    7. '_integer' → logprob: -7.417439937591553
    8. '_string' → logprob: -8.042439460754395
    9. '_input' → logprob: -9.042439460754395
    10. '_list' → logprob: -9.167439460754395

Token 59: '():
' (ID: 8595)
  Prédit: '()'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '()' → logprob: -0.0006484562181867659
    2. '<|end|>' → logprob: -7.500648498535156
    3. ' ()' → logprob: -10.875648498535156
    4. '()>' → logprob: -11.250648498535156
    5. '<|end|>' → logprob: -11.625648498535156
    6. '()">' → logprob: -11.875648498535156
    7. '_list' → logprob: -11.875648498535156
    8. '()<' → logprob: -12.250648498535156
    9. '_' → logprob: -12.250648498535156
    10. ')' → logprob: -12.500648498535156

Token 60: '   ' (ID: 271)
  Prédit: 'int'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'int' → logprob: -0.6679747104644775
    2. '()' → logprob: -0.7929747104644775
    3. ' ()' → logprob: -4.417974472045898
    4. '(int' → logprob: -4.792974472045898
    5. ' int' → logprob: -5.042974472045898
    6. '(' → logprob: -6.042974472045898
    7. 'return' → logprob: -6.042974472045898
    8. ' ' → logprob: -6.792974472045898
    9. ' return' → logprob: -6.917974472045898
    10. '=int' → logprob: -7.667974472045898

Token 61: ' return' (ID: 622)
  Prédit: ' return'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' return' → logprob: -0.04315664619207382
    2. 'return' (adapté à ' return') → logprob: -3.543156623840332
    3. 'int' → logprob: -4.793156623840332
    4. ' int' → logprob: -5.293156623840332
    5. ' ' → logprob: -12.543156623840332
    6. '   ' → logprob: -15.168156623840332
    7. '=int' → logprob: -15.168156623840332
    8. ' ' → logprob: -15.293156623840332
    9. 'eturn' → logprob: -15.418156623840332
    10. '    ' → logprob: -17.29315757751465

Token 62: ' int' (ID: 677)
  Prédit: ' int'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' int' → logprob: -0.02324594371020794
    2. 'int' → logprob: -3.7732460498809814
    3. '(int' → logprob: -15.398245811462402
    4. ' ' → logprob: -16.52324676513672
    5. '<int' → logprob: -17.14824676513672
    6. '	int' → logprob: -18.14824676513672
    7. '[int' → logprob: -18.52324676513672
    8. '=int' → logprob: -18.64824676513672
    9. '  ' → logprob: -19.52324676513672
    10. ' map' → logprob: -19.64824676513672

Token 63: '(input' (ID: 10054)
  Prédit: '(input'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(input' → logprob: -0.12693440914154053
    2. '(' → logprob: -2.12693452835083
    3. ' (' → logprob: -12.376934051513672
    4. '(
' → logprob: -13.876934051513672
    5. '(in' → logprob: -15.126934051513672
    6. '(

' → logprob: -15.501934051513672
    7. 'input' → logprob: -15.626934051513672
    8. '(inp' → logprob: -15.876934051513672
    9. '(open' → logprob: -16.501934051513672
    10. '(int' → logprob: -17.001934051513672

Token 64: '())

' (ID: 27654)
  Prédit: '())'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '())' → logprob: -0.0009320637909695506
    2. '()' → logprob: -7.000932216644287
    3. ')' → logprob: -11.625931739807129
    4. ' ())' → logprob: -12.375931739807129
    5. '()))' → logprob: -12.375931739807129
    6. '().' → logprob: -13.250931739807129
    7. '())
' → logprob: -13.875931739807129
    8. '(' → logprob: -15.500931739807129
    9. '())

' → logprob: -15.750931739807129
    10. '()]' → logprob: -16.625932693481445

Token 65: 'def' (ID: 1314)
  Prédit: 'def'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'def' → logprob: -0.0054118577390909195
    2. 'n' → logprob: -5.380411624908447
    3. 'class' → logprob: -8.380412101745605
    4. 'for' → logprob: -8.505412101745605
    5. '\' → logprob: -9.380412101745605
    6. '\n' → logprob: -9.880412101745605
    7. '```' → logprob: -10.130412101745605
    8. '
' → logprob: -10.380412101745605
    9. 'if' → logprob: -11.005412101745605
    10. 'num' → logprob: -11.005412101745605

Token 66: ' read' (ID: 1729)
  Prédit: ' main'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' main' → logprob: -0.061282411217689514
    2. ' read' → logprob: -3.3112823963165283
    3. ' solve' → logprob: -4.186282634735107
    4. 'main' → logprob: -5.186282634735107
    5. 'read' → logprob: -7.186282634735107
    6. 'solve' → logprob: -7.811282634735107
    7. ' run' → logprob: -8.06128215789795
    8. ' write' → logprob: -8.31128215789795
    9. ' factorial' → logprob: -9.56128215789795
    10. ' ' → logprob: -9.81128215789795

Token 67: '_str' (ID: 6182)
  Prédit: '_line'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_line' → logprob: -0.6256588101387024
    2. '_' → logprob: -1.0006587505340576
    3. '_str' → logprob: -2.5006587505340576
    4. '()' → logprob: -5.125658988952637
    5. '_string' → logprob: -5.375658988952637
    6. '_float' → logprob: -6.500658988952637
    7. '__' → logprob: -7.000658988952637
    8. '_list' → logprob: -7.625658988952637
    9. 'line' → logprob: -7.750658988952637
    10. '_int' → logprob: -8.000658988952637

Token 68: '():
' (ID: 8595)
  Prédit: '()'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '()' → logprob: -0.02383453957736492
    2. '():' → logprob: -3.773834466934204
    3. ' ()' → logprob: -8.523834228515625
    4. '():
' → logprob: -9.023834228515625
    5. '`()' → logprob: -9.273834228515625
    6. '()">' → logprob: -9.898834228515625
    7. '()>' → logprob: -10.023834228515625
    8. '()`' → logprob: -10.898834228515625
    9. '()
' → logprob: -11.398834228515625
    10. '()<' → logprob: -11.648834228515625

Token 69: '   ' (ID: 271)
  Prédit: 'return'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'return' → logprob: -0.05192047357559204
    2. ' return' → logprob: -3.1769204139709473
    3. '   ' → logprob: -5.051920413970947
    4. '()' → logprob: -6.176920413970947
    5. 'input' → logprob: -7.926920413970947
    6. ' input' → logprob: -11.301920890808105
    7. ' ' → logprob: -11.551920890808105
    8. '(' → logprob: -11.676920890808105
    9. '	return' → logprob: -12.551920890808105
    10. ' ()' → logprob: -12.801920890808105

Token 70: ' return' (ID: 622)
  Prédit: 'return'
  Correct (stricte): False
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'return' (adapté à ' return') → logprob: -0.006982356775552034
    2. ' return' → logprob: -5.006982326507568
    3. 'input' → logprob: -8.256982803344727
    4. '   ' → logprob: -11.881982803344727
    5. ' input' → logprob: -14.506982803344727
    6. '	return' → logprob: -16.506982803344727
    7. ' ' → logprob: -16.881982803344727
    8. 'eturn' → logprob: -18.631982803344727
    9. ':return' → logprob: -19.256982803344727
    10. '  ' → logprob: -19.756982803344727

Token 71: ' input' (ID: 3422)
  Prédit: 'input'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'input' → logprob: -0.3868834376335144
    2. ' input' → logprob: -1.1368834972381592
    3. '(input' → logprob: -11.636883735656738
    4. 'str' → logprob: -13.136883735656738
    5. ' str' → logprob: -14.386883735656738
    6. ' ' → logprob: -14.636883735656738
    7. '=input' → logprob: -15.511883735656738
    8. '	input' → logprob: -16.011882781982422
    9. '_input' → logprob: -16.511882781982422
    10. 's' → logprob: -16.761882781982422

Token 72: '()

' (ID: 5874)
  Prédit: '()'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '()' → logprob: -3.8889261304575484e-06
    2. '(' → logprob: -13.375003814697266
    3. '()
' → logprob: -14.000003814697266
    4. ' ()' → logprob: -14.250003814697266
    5. '()

' → logprob: -15.375003814697266
    6. '()`' → logprob: -15.625003814697266
    7. '()]' → logprob: -16.000003814697266
    8. '();' → logprob: -16.250003814697266
    9. '().' → logprob: -16.750003814697266
    10. '())' → logprob: -17.125003814697266

Token 73: 'def' (ID: 1314)
  Prédit: 'def'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'def' → logprob: -0.2728392779827118
    2. 'n' → logprob: -1.6478393077850342
    3. 'class' → logprob: -3.147839307785034
    4. 'N' → logprob: -6.772839069366455
    5. '#' → logprob: -6.897839069366455
    6. 'num' → logprob: -7.897839069366455
    7. 'for' → logprob: -8.522839546203613
    8. 'if' → logprob: -8.772839546203613
    9. '
' → logprob: -9.522839546203613
    10. 's' → logprob: -9.647839546203613

Token 74: ' main' (ID: 2758)
  Prédit: ' main'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' main' → logprob: -0.017204321920871735
    2. ' solve' → logprob: -4.142204284667969
    3. 'main' → logprob: -7.392204284667969
    4. '_' → logprob: -9.017204284667969
    5. '_main' → logprob: -9.142204284667969
    6. ' process' → logprob: -9.267204284667969
    7. 'solve' → logprob: -9.517204284667969
    8. ' _' → logprob: -10.267204284667969
    9. ' factorial' → logprob: -10.767204284667969
    10. ' find' → logprob: -11.142204284667969

Token 75: '():
' (ID: 8595)
  Prédit: '():'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '():' → logprob: -0.013241169974207878
    2. '(' → logprob: -4.388241291046143
    3. '()' → logprob: -7.263241291046143
    4. '(:' → logprob: -11.013240814208984
    5. ' ():' → logprob: -11.638240814208984
    6. ':' → logprob: -13.638240814208984
    7. '()>' → logprob: -13.638240814208984
    8. '():
' → logprob: -14.138240814208984
    9. '(**' → logprob: -14.888240814208984
    10. '()(' → logprob: -15.388240814208984

Token 76: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.013528523035347462
    2. '<|end|>' → logprob: -5.388528347015381
    3. 'n' → logprob: -5.888528347015381
    4. '    
' → logprob: -6.263528347015381
    5. 'input' → logprob: -6.888528347015381
    6. '    ' → logprob: -6.888528347015381
    7. '<|end|>' → logprob: -7.513528347015381
    8. ' n' → logprob: -8.138528823852539
    9. '(n' → logprob: -9.013528823852539
    10. ' pass' → logprob: -9.138528823852539

Token 77: ' H' (ID: 487)
  Prédit: ' n'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' n' → logprob: -0.2666464149951935
    2. 'n' → logprob: -1.516646385192871
    3. '   ' → logprob: -4.266646385192871
    4. '	n' → logprob: -8.891646385192871
    5. ' nums' → logprob: -9.516646385192871
    6. 't' → logprob: -9.516646385192871
    7. ' t' → logprob: -9.766646385192871
    8. ' numbers' → logprob: -10.266646385192871
    9. ' data' → logprob: -10.391646385192871
    10. ' lst' → logprob: -10.766646385192871

Token 78: ',' (ID: 11)
  Prédit: ','
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ',' → logprob: -0.00825486145913601
    2. ' =' → logprob: -5.5082550048828125
    3. ' ,' → logprob: -5.8832550048828125
    4. '   ' → logprob: -7.1332550048828125
    5. '=' → logprob: -7.8832550048828125
    6. ' ' → logprob: -9.883255004882812
    7. '  ' → logprob: -10.133255004882812
    8. 'eight' → logprob: -10.258255004882812
    9. '    ' → logprob: -10.633255004882812
    10. '=int' → logprob: -12.008255004882812

Token 79: ' A' (ID: 355)
  Prédit: 'W'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'W' → logprob: -0.05503077432513237
    2. ' W' → logprob: -2.9300308227539062
    3. 'M' → logprob: -10.555030822753906
    4. '   ' → logprob: -10.680030822753906
    5. 'N' → logprob: -10.680030822753906
    6. ' ' → logprob: -10.930030822753906
    7. 'T' → logprob: -10.930030822753906
    8. '    ' → logprob: -11.930030822753906
    9. '  ' → logprob: -12.180030822753906
    10. 'L' → logprob: -12.180030822753906

Token 80: ' =' (ID: 314)
  Prédit: '='
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '=' → logprob: -0.06197037547826767
    2. ' =' → logprob: -2.8119704723358154
    3. ',' → logprob: -13.686970710754395
    4. ' ' → logprob: -14.436970710754395
    5. ')' → logprob: -14.686970710754395
    6. '=int' → logprob: -16.061969757080078
    7. '   ' → logprob: -16.186969757080078
    8. '=input' → logprob: -16.686969757080078
    9. '  ' → logprob: -17.311969757080078
    10. '＝' → logprob: -17.436969757080078

Token 81: ' read' (ID: 1729)
  Prédit: ' read'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' read' → logprob: -0.38692185282707214
    2. 'read' → logprob: -1.1369218826293945
    3. ' ' → logprob: -10.886921882629395
    4. ' map' → logprob: -11.136921882629395
    5. 'map' → logprob: -11.511921882629395
    6. '  ' → logprob: -12.386921882629395
    7. '	read' → logprob: -13.011921882629395
    8. '   ' → logprob: -14.136921882629395
    9. '    ' → logprob: -15.511921882629395
    10. '(read' → logprob: -16.261920928955078

Token 82: '_int' (ID: 12285)
  Prédit: '_int'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_int' → logprob: -0.0010742536978796124
    2. 'int' → logprob: -7.876074314117432
    3. '_str' → logprob: -8.126073837280273
    4. '_' → logprob: -8.126073837280273
    5. '()' → logprob: -10.251073837280273
    6. '_INT' → logprob: -10.501073837280273
    7. '(' → logprob: -10.876073837280273
    8. 'Int' → logprob: -11.626073837280273
    9. '_Int' → logprob: -12.251073837280273
    10. '(int' → logprob: -13.751073837280273

Token 83: '_list' (ID: 4162)
  Prédit: '()'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '()' → logprob: -3.380904672667384e-05
    2. '(),' → logprob: -11.625033378601074
    3. '()]' → logprob: -11.875033378601074
    4. ' ()' → logprob: -12.000033378601074
    5. '()
' → logprob: -12.375033378601074
    6. '().' → logprob: -13.500033378601074
    7. '()`' → logprob: -13.875033378601074
    8. '()>' → logprob: -14.000033378601074
    9. '())' → logprob: -14.250033378601074
    10. '()

' → logprob: -14.500033378601074

Token 84: '()
' (ID: 1234)
  Prédit: '()'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '()' → logprob: -1.580929347255733e-05
    2. '()
' → logprob: -11.125016212463379
    3. '()

' → logprob: -14.875016212463379
    4. '(' → logprob: -15.750016212463379
    5. '();' → logprob: -15.875016212463379
    6. '()
' → logprob: -16.125015258789062
    7. '()`' → logprob: -16.125015258789062
    8. ' ()' → logprob: -16.875015258789062
    9. '())' → logprob: -16.875015258789062
    10. ')' → logprob: -17.125015258789062

Token 85: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.025345711037516594
    2. '
' → logprob: -4.400345802307129
    3. '    
' → logprob: -5.025345802307129
    4. '<|end|>' → logprob: -5.275345802307129
    5. '    ' → logprob: -8.525345802307129
    6. '<|end|>' → logprob: -8.775345802307129
    7. '   
' → logprob: -8.900345802307129
    8. ')' → logprob: -9.525345802307129
    9. '  ' → logprob: -9.650345802307129
    10. '  
' → logprob: -9.775345802307129

Token 86: ' res' (ID: 694)
  Prédit: 'while'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'while' → logprob: -1.5300228595733643
    2. 'if' → logprob: -2.2800228595733643
    3. ' while' → logprob: -2.5300228595733643
    4. '   ' → logprob: -2.6550228595733643
    5. 'damage' → logprob: -2.6550228595733643
    6. ' if' → logprob: -2.9050228595733643
    7. 'd' → logprob: -3.1550228595733643
    8. 'res' (adapté à ' res') → logprob: -3.5300228595733643
    9. 'count' → logprob: -3.6550228595733643
    10. 'counter' → logprob: -3.6550228595733643

Token 87: ' =' (ID: 314)
  Prédit: 'ult'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'ult' → logprob: -0.23502779006958008
    2. ' =' → logprob: -1.98502779006958
    3. '=' → logprob: -2.86002779006958
    4. 'ults' → logprob: -4.23502779006958
    5. 'ultat' → logprob: -8.860027313232422
    6. '=[]' → logprob: -10.485027313232422
    7. 't' → logprob: -10.610027313232422
    8. 'ist' → logprob: -10.735027313232422
    9. 'ponse' → logprob: -10.985027313232422
    10. 'istance' → logprob: -11.235027313232422

Token 88: ' ' (ID: 220)
  Prédit: '0'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '0' → logprob: -0.4202842712402344
    2. ' ' → logprob: -1.6702842712402344
    3. 'H' → logprob: -2.4202842712402344
    4. ' H' → logprob: -3.0452842712402344
    5. '(H' → logprob: -5.170284271240234
    6. ' (' → logprob: -5.545284271240234
    7. 'float' → logprob: -6.295284271240234
    8. ' float' → logprob: -6.920284271240234
    9. '100' → logprob: -7.045284271240234
    10. '1' → logprob: -7.295284271240234

Token 89: '0' (ID: 15)
  Prédit: '0'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '0' → logprob: -0.6022146940231323
    2. '(H' → logprob: -1.2272146940231323
    3. '(A' → logprob: -3.102214813232422
    4. 'H' → logprob: -3.227214813232422
    5. '(max' → logprob: -3.477214813232422
    6. 'max' → logprob: -3.727214813232422
    7. '(' → logprob: -4.477214813232422
    8. '-' → logprob: -6.102214813232422
    9. 'A' → logprob: -6.102214813232422
    10. '1' → logprob: -6.477214813232422

Token 90: '
' (ID: 198)
  Prédit: '
'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '
' → logprob: -0.016480162739753723
    2. '<|end|>' → logprob: -4.391479969024658
    3. ' 
' → logprob: -6.391479969024658
    4. ' while' → logprob: -7.266479969024658
    5. '   ' → logprob: -7.891479969024658
    6. '    
' → logprob: -8.141480445861816
    7. '
' → logprob: -8.266480445861816
    8. '<|end|>' → logprob: -8.391480445861816
    9. '  
' → logprob: -9.016480445861816
    10. '\n' → logprob: -9.266480445861816

Token 91: '   ' (ID: 271)
  Prédit: '
'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '
' → logprob: -0.0675220638513565
    2. '   ' → logprob: -3.4425220489501953
    3. ' while' → logprob: -4.192522048950195
    4. '<|end|>' → logprob: -4.692522048950195
    5. 'while' → logprob: -5.317522048950195
    6. '    
' → logprob: -6.317522048950195
    7. ' 
' → logprob: -7.192522048950195
    8. '
' → logprob: -7.567522048950195
    9. '  
' → logprob: -8.067522048950195
    10. '<|end|>' → logprob: -8.442522048950195

Token 92: ' for' (ID: 395)
  Prédit: 'while'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'while' → logprob: -0.47574031352996826
    2. ' while' → logprob: -0.9757403135299683
    3. '   ' → logprob: -6.475740432739258
    4. 'res' → logprob: -9.975740432739258
    5. '
' → logprob: -10.475740432739258
    6. '    
' → logprob: -11.725740432739258
    7. ' 
' → logprob: -11.725740432739258
    8. '	while' → logprob: -11.975740432739258
    9. 'While' → logprob: -12.600740432739258
    10. '```' → logprob: -12.725740432739258

Token 93: ' i' (ID: 575)
  Prédit: ' _'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' _' → logprob: -0.10644401609897614
    2. ' i' → logprob: -2.8564441204071045
    3. ' ' → logprob: -3.3564441204071045
    4. ' range' → logprob: -5.231443881988525
    5. '_' → logprob: -5.856443881988525
    6. ' H' → logprob: -8.481444358825684
    7. 'i' → logprob: -9.356444358825684
    8. 'range' → logprob: -9.981444358825684
    9. ' h' → logprob: -10.981444358825684
    10. '   ' → logprob: -11.231444358825684

Token 94: ' in' (ID: 306)
  Prédit: ' in'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' in' → logprob: -0.014691551215946674
    2. 'in' → logprob: -4.264691352844238
    3. 'n' → logprob: -8.389691352844238
    4. ' ' → logprob: -8.514691352844238
    5. ',' → logprob: -9.889691352844238
    6. 's' → logprob: -11.389691352844238
    7. '  ' → logprob: -12.014691352844238
    8. 'range' → logprob: -12.139691352844238
    9. '_' → logprob: -12.327191352844238
    10. '   ' → logprob: -12.827191352844238

Token 95: ' range' (ID: 3352)
  Prédit: 'range'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'range' → logprob: -0.14279307425022125
    2. ' range' → logprob: -2.0177931785583496
    3. ' ' → logprob: -9.517792701721191
    4. '   ' → logprob: -10.517792701721191
    5. '  ' → logprob: -11.767792701721191
    6. '	range' → logprob: -12.142792701721191
    7. '(range' → logprob: -13.517792701721191
    8. '    ' → logprob: -13.767792701721191
    9. 'rang' → logprob: -14.642792701721191
    10. '[' → logprob: -15.392792701721191

Token 96: '(' (ID: 7)
  Prédit: '(H'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(H' → logprob: -0.13929525017738342
    2. '(A' → logprob: -2.3892953395843506
    3. '(' → logprob: -3.2642953395843506
    4. ' (' → logprob: -10.01429557800293
    5. '((' → logprob: -10.01429557800293
    6. '(len' → logprob: -11.63929557800293
    7. '(res' → logprob: -12.26429557800293
    8. ' ' → logprob: -13.76429557800293
    9. '(B' → logprob: -14.01429557800293
    10. 'A' → logprob: -14.13929557800293

Token 97: '100' (ID: 1353)
  Prédit: 'H'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'H' → logprob: -0.1272212117910385
    2. '(H' → logprob: -2.25222110748291
    3. 'A' → logprob: -5.00222110748291
    4. '(' → logprob: -5.62722110748291
    5. '(A' → logprob: -6.87722110748291
    6. '1' → logprob: -7.00222110748291
    7. '100' → logprob: -7.37722110748291
    8. 'res' → logprob: -7.50222110748291
    9. '0' → logprob: -8.75222110748291
    10. ' H' → logprob: -8.75222110748291

Token 98: '01' (ID: 2290)
  Prédit: '):'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '):' → logprob: -0.05826477333903313
    2. '0' → logprob: -2.93326473236084
    3. ':' → logprob: -5.93326473236084
    4. '00' → logprob: -8.18326473236084
    5. '():' → logprob: -8.43326473236084
    6. ')' → logprob: -9.68326473236084
    7. '000' → logprob: -10.05826473236084
    8. ' ):' → logprob: -10.05826473236084
    9. '>:' → logprob: -10.68326473236084
    10. '):
' → logprob: -10.80826473236084

Token 99: '):
' (ID: 1883)
  Prédit: '):'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '):' → logprob: -0.0039308140985667706
    2. '):
' → logprob: -6.128931045532227
    3. ':' → logprob: -6.503931045532227
    4. ' ):' → logprob: -8.628931045532227
    5. ')' → logprob: -9.753931045532227
    6. '   ' → logprob: -12.753931045532227
    7. ' :' → logprob: -13.128931045532227
    8. '):
' → logprob: -13.753931045532227
    9. ' ):
' → logprob: -13.878931045532227
    10. '():' → logprob: -14.128931045532227

Token 100: '       ' (ID: 309)
  Prédit: '       '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '       ' → logprob: -0.48917073011398315
    2. ':' → logprob: -0.9891707301139832
    3. '<|end|>' → logprob: -4.864170551300049
    4. '   ' → logprob: -5.614170551300049
    5. ':
' → logprob: -6.239170551300049
    6. '
' → logprob: -7.864170551300049
    7. '        
' → logprob: -7.989170551300049
    8. '    
' → logprob: -8.364171028137207
    9. '    ' → logprob: -9.239171028137207
    10. ' ' → logprob: -9.239171028137207

Token 101: ' H' (ID: 487)
  Prédit: '       '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '       ' → logprob: -0.20818017423152924
    2. '<|end|>' → logprob: -2.8331801891326904
    3. ' ' → logprob: -3.0831801891326904
    4. ' if' → logprob: -3.5831801891326904
    5. '   ' → logprob: -4.583179950714111
    6. ' 
' → logprob: -4.708179950714111
    7. '        
' → logprob: -5.083179950714111
    8. '
' → logprob: -5.208179950714111
    9. '    ' → logprob: -5.333179950714111
    10. '    
' → logprob: -5.458179950714111

Token 102: ' =' (ID: 314)
  Prédit: ' -='
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' -=' → logprob: -0.007131977938115597
    2. '-=' → logprob: -5.882132053375244
    3. ' -' → logprob: -6.507132053375244
    4. ' <=' → logprob: -6.882132053375244
    5. '-' → logprob: -7.132132053375244
    6. ' =' → logprob: -7.757132053375244
    7. '=' → logprob: -8.132131576538086
    8. '<=' → logprob: -9.132131576538086
    9. ' ' → logprob: -10.007131576538086
    10. '>' → logprob: -10.132131576538086

Token 103: ' H' (ID: 487)
  Prédit: 'H'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'H' → logprob: -0.11602647602558136
    2. ' H' → logprob: -2.2410264015197754
    3. 'max' → logprob: -6.241026401519775
    4. ' max' → logprob: -6.741026401519775
    5. '   ' → logprob: -9.866026878356934
    6. ' ' → logprob: -12.491026878356934
    7. '0' → logprob: -12.491026878356934
    8. 'A' → logprob: -12.866026878356934
    9. '       ' → logprob: -13.616026878356934
    10. '	H' → logprob: -13.616026878356934

Token 104: ' -' (ID: 533)
  Prédit: ' -'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' -' → logprob: -0.20177437365055084
    2. '-' → logprob: -1.7017743587493896
    3. '-A' → logprob: -7.951774597167969
    4. ' ' → logprob: -12.451774597167969
    5. ' A' → logprob: -13.451774597167969
    6. ' -=' → logprob: -13.576774597167969
    7. ' ' → logprob: -13.576774597167969
    8. '-=' → logprob: -14.826774597167969
    9. '<|end|>' → logprob: -16.20177459716797
    10. 'A' → logprob: -16.45177459716797

Token 105: ' A' (ID: 355)
  Prédit: 'A'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'A' → logprob: -0.0009125363430939615
    2. ' A' → logprob: -7.000912666320801
    3. '   ' → logprob: -14.3759126663208
    4. ' ' → logprob: -14.7509126663208
    5. '  ' → logprob: -16.750911712646484
    6. '	A' → logprob: -16.875911712646484
    7. 'a' → logprob: -17.625911712646484
    8. ' ' → logprob: -17.750911712646484
    9. 'max' → logprob: -18.875911712646484
    10. '(A' → logprob: -19.125911712646484

Token 106: '
' (ID: 198)
  Prédit: '       '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '       ' → logprob: -0.6429675221443176
    2. '
' → logprob: -0.7679675221443176
    3. '   ' → logprob: -5.892967700958252
    4. 'if' → logprob: -6.267967700958252
    5. '        
' → logprob: -6.517967700958252
    6. '+' → logprob: -7.142967700958252
    7. ' if' → logprob: -7.142967700958252
    8. '
' → logprob: -7.392967700958252
    9. '<|end|>' → logprob: -7.392967700958252
    10. '    
' → logprob: -8.142967224121094

Token 107: '       ' (ID: 309)
  Prédit: '       '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '       ' → logprob: -0.030393065884709358
    2. '   ' → logprob: -3.655393123626709
    3. '
' → logprob: -6.405393123626709
    4. ' if' → logprob: -7.280393123626709
    5. '        
' → logprob: -7.780393123626709
    6. 'if' → logprob: -8.03039264678955
    7. ' ' → logprob: -8.03039264678955
    8. '<|end|>' → logprob: -8.15539264678955
    9. '    
' → logprob: -9.15539264678955
    10. '  
' → logprob: -9.28039264678955

Token 108: ' res' (ID: 694)
  Prédit: 'if'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'if' → logprob: -0.269700288772583
    2. 'res' (adapté à ' res') → logprob: -2.269700288772583
    3. '       ' → logprob: -2.769700288772583
    4. ' if' → logprob: -2.769700288772583
    5. '   ' → logprob: -5.394700050354004
    6. ' res' → logprob: -5.769700050354004
    7. ' ' → logprob: -11.269700050354004
    8. '  ' → logprob: -12.269700050354004
    9. '    ' → logprob: -12.769700050354004
    10. '     ' → logprob: -13.644700050354004

Token 109: ' +=' (ID: 2757)
  Prédit: ' +='
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' +=' → logprob: -0.5277443528175354
    2. '+=' → logprob: -1.0277442932128906
    3. ' =' → logprob: -3.5277442932128906
    4. '=' → logprob: -3.7777442932128906
    5. '+' → logprob: -12.15274429321289
    6. ' ' → logprob: -13.52774429321289
    7. ']+=' → logprob: -15.52774429321289
    8. '+='' → logprob: -15.52774429321289
    9. '+=(' → logprob: -16.52774429321289
    10. '.=' → logprob: -16.90274429321289

Token 110: ' ' (ID: 220)
  Prédit: '1'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '1' → logprob: -3.1424973713001236e-05
    2. ' ' → logprob: -10.375031471252441
    3. '   ' → logprob: -16.625030517578125
    4. '<|end|>' → logprob: -18.625030517578125
    5. '  ' → logprob: -19.750030517578125
    6. '+' → logprob: -20.500030517578125
    7. '```' → logprob: -20.875030517578125
    8. '       ' → logprob: -21.500030517578125
    9. ' ' → logprob: -22.000030517578125
    10. '１' → logprob: -22.125030517578125

Token 111: '1' (ID: 16)
  Prédit: '1'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '1' → logprob: -1.1472419600977446e-06
    2. ' ' → logprob: -13.750000953674316
    3. '   ' → logprob: -18.125001907348633
    4. '<|end|>' → logprob: -20.750001907348633
    5. '```' → logprob: -20.875001907348633
    6. '+' → logprob: -21.000001907348633
    7. '  ' → logprob: -21.250001907348633
    8. '１' → logprob: -21.625001907348633
    9. '۱' → logprob: -21.750001907348633
    10. 'i' → logprob: -22.000001907348633

Token 112: '
' (ID: 198)
  Prédit: '       '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '       ' → logprob: -0.03394880145788193
    2. '   ' → logprob: -3.4089488983154297
    3. ' if' → logprob: -8.78394889831543
    4. '
' → logprob: -9.65894889831543
    5. '<|end|>' → logprob: -10.03394889831543
    6. ' ' → logprob: -11.15894889831543
    7. 'if' → logprob: -11.90894889831543
    8. '        
' → logprob: -12.03394889831543
    9. '```' → logprob: -12.15894889831543
    10. '    
' → logprob: -12.65894889831543

Token 113: '       ' (ID: 309)
  Prédit: '       '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '       ' → logprob: -0.021089592948555946
    2. '   ' → logprob: -3.896089553833008
    3. ' if' → logprob: -8.771089553833008
    4. '<|end|>' → logprob: -8.771089553833008
    5. '
' → logprob: -9.271089553833008
    6. ' ' → logprob: -9.521089553833008
    7. '        
' → logprob: -11.021089553833008
    8. '  
' → logprob: -11.896089553833008
    9. '```' → logprob: -11.896089553833008
    10. '    
' → logprob: -12.021089553833008

Token 114: ' if' (ID: 538)
  Prédit: 'if'
  Correct (stricte): False
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'if' (adapté à ' if') → logprob: -0.24544522166252136
    2. ' if' → logprob: -1.7454452514648438
    3. '       ' → logprob: -3.2454452514648438
    4. '   ' → logprob: -5.495445251464844
    5. ' ' → logprob: -11.245445251464844
    6. '	if' → logprob: -12.620445251464844
    7. '
' → logprob: -13.745445251464844
    8. '  ' → logprob: -14.120445251464844
    9. 'If' → logprob: -14.620445251464844
    10. '    ' → logprob: -14.745445251464844

Token 115: ' H' (ID: 487)
  Prédit: ' H'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' H' → logprob: -0.2519298195838928
    2. 'H' → logprob: -1.501929759979248
    3. '(H' → logprob: -15.126930236816406
    4. ' ' → logprob: -15.501930236816406
    5. ' ' → logprob: -15.751930236816406
    6. '	H' → logprob: -16.251930236816406
    7. '   ' → logprob: -17.376930236816406
    8. ' (' → logprob: -19.126930236816406
    9. '0' → logprob: -19.376930236816406
    10. ' not' → logprob: -19.376930236816406

Token 116: ' <=' (ID: 5017)
  Prédit: '<='
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '<=' → logprob: -0.043001141399145126
    2. ' <=' → logprob: -3.168001174926758
    3. '<' → logprob: -13.668001174926758
    4. ')<=' → logprob: -14.668001174926758
    5. ']<=' → logprob: -15.418001174926758
    6. '[' → logprob: -17.168001174926758
    7. ' ' → logprob: -17.418001174926758
    8. ' <=",' → logprob: -17.418001174926758
    9. ' ' → logprob: -17.668001174926758
    10. 'le' → logprob: -17.918001174926758

Token 117: ' ' (ID: 220)
  Prédit: '0'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '0' → logprob: -0.0040785204619169235
    2. ' ' → logprob: -5.504078388214111
    3. '<|end|>' → logprob: -16.754077911376953
    4. ' ' → logprob: -18.379077911376953
    5. '```' → logprob: -18.879077911376953
    6. '۰' → logprob: -18.879077911376953
    7. '   ' → logprob: -19.754077911376953
    8. '  ' → logprob: -19.754077911376953
    9. '00' → logprob: -20.316577911376953
    10. '`' → logprob: -20.816577911376953

Token 118: '0' (ID: 15)
  Prédit: '0'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '0' → logprob: -3.547789674485102e-05
    2. ' ' → logprob: -10.250035285949707
    3. '00' → logprob: -18.750036239624023
    4. '```' → logprob: -19.000036239624023
    5. '   ' → logprob: -19.375036239624023
    6. '۰' → logprob: -19.625036239624023
    7. '000' → logprob: -20.000036239624023
    8. ' ' → logprob: -20.125036239624023
    9. '<|end|>' → logprob: -20.250036239624023
    10. '  ' → logprob: -20.375036239624023

Token 119: ':
' (ID: 734)
  Prédit: ':'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ':' → logprob: -0.0017538340762257576
    2. ':
' → logprob: -6.376753807067871
    3. '           ' → logprob: -10.126753807067871
    4. ':return' → logprob: -11.876753807067871
    5. '       ' → logprob: -12.501753807067871
    6. ' :' → logprob: -15.251753807067871
    7. '<|end|>' → logprob: -15.876753807067871
    8. ':

' → logprob: -16.126754760742188
    9. '):' → logprob: -16.126754760742188
    10. ':
' → logprob: -16.251754760742188

Token 120: '           ' (ID: 352)
  Prédit: '           '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '           ' → logprob: -9.17420256882906e-05
    2. 'break' → logprob: -10.375091552734375
    3. 'print' → logprob: -10.750091552734375
    4. '       ' → logprob: -10.875091552734375
    5. ' break' → logprob: -11.250091552734375
    6. '   ' → logprob: -13.500091552734375
    7. '		' → logprob: -13.875091552734375
    8. '
' → logprob: -14.000091552734375
    9. '```' → logprob: -14.125091552734375
    10. '          ' → logprob: -14.250091552734375

Token 121: ' break' (ID: 2338)
  Prédit: '           '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '           ' → logprob: -0.3030698001384735
    2. 'print' → logprob: -1.553069829940796
    3. 'break' (adapté à ' break') → logprob: -3.053069829940796
    4. ' break' → logprob: -6.803069591522217
    5. 'return' → logprob: -7.178069591522217
    6. ' print' → logprob: -7.553069591522217
    7. '
' → logprob: -8.553070068359375
    8. '```' → logprob: -11.053070068359375
    9. '               ' → logprob: -11.178070068359375
    10. ' return' → logprob: -11.803070068359375

Token 122: '
' (ID: 198)
  Prédit: '
'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '
' → logprob: -0.2538668215274811
    2. '   ' → logprob: -1.5038667917251587
    3. '    
' → logprob: -6.378866672515869
    4. 'print' → logprob: -9.128867149353027
    5. '  
' → logprob: -10.378867149353027
    6. '<|end|>' → logprob: -10.628867149353027
    7. '
' → logprob: -10.753867149353027
    8. 'return' → logprob: -10.878867149353027
    9. '```' → logprob: -11.253867149353027
    10. '

' → logprob: -12.378867149353027

Token 123: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.015435897745192051
    2. '
' → logprob: -4.265435695648193
    3. 'print' → logprob: -7.265435695648193
    4. '    
' → logprob: -7.515435695648193
    5. '```' → logprob: -11.515436172485352
    6. '  
' → logprob: -12.265436172485352
    7. ' print' → logprob: -12.515436172485352
    8. 'return' → logprob: -12.765436172485352
    9. '        
' → logprob: -13.640436172485352
    10. ' return' → logprob: -13.890436172485352

Token 124: ' print' (ID: 2123)
  Prédit: 'print'
  Correct (stricte): False
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'print' (adapté à ' print') → logprob: -0.580936849117279
    2. '   ' → logprob: -0.830936849117279
    3. '
' → logprob: -5.330936908721924
    4. '    
' → logprob: -9.580936431884766
    5. ' print' → logprob: -9.955936431884766
    6. '```' → logprob: -10.830936431884766
    7. 'return' → logprob: -12.580936431884766
    8. '(print' → logprob: -13.330936431884766
    9. '  
' → logprob: -13.955936431884766
    10. '	print' → logprob: -14.205936431884766

Token 125: '(res' (ID: 8331)
  Prédit: '(res'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(res' → logprob: -0.02975442260503769
    2. '(' → logprob: -3.529754400253296
    3. '()' → logprob: -13.654754638671875
    4. 'res' → logprob: -13.779754638671875
    5. ' (' → logprob: -13.904754638671875
    6. '(
' → logprob: -14.654754638671875
    7. '('' → logprob: -15.779754638671875
    8. '((' → logprob: -16.529754638671875
    9. '(rest' → logprob: -16.904754638671875
    10. '(re' → logprob: -17.029754638671875

Token 126: ')

' (ID: 1029)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ')' → logprob: -3.128163257315464e-07
    2. ' )' → logprob: -16.0
    3. ')`' → logprob: -16.875
    4. ')
' → logprob: -17.875
    5. '()' → logprob: -18.875
    6. '')' → logprob: -19.375
    7. '))' → logprob: -19.625
    8. '`)' → logprob: -20.0
    9. '")' → logprob: -20.375
    10. '(' → logprob: -20.625

Token 127: 'main' (ID: 7731)
  Prédit: 'if'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'if' → logprob: -0.5294095277786255
    2. '
' → logprob: -1.0294095277786255
    3. '\n' → logprob: -3.279409408569336
    4. 'main' → logprob: -4.279409408569336
    5. '  
' → logprob: -8.029409408569336
    6. '\' → logprob: -8.279409408569336
    7. '```' → logprob: -8.279409408569336
    8. '    
' → logprob: -8.404409408569336
    9. '(' → logprob: -8.529409408569336
    10. '(main' → logprob: -8.654409408569336

Token 128: '()' (ID: 416)
  Prédit: '()'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '()' → logprob: -0.005967780947685242
    2. '(' → logprob: -5.130967617034912
    3. '()
' → logprob: -10.38096809387207
    4. '()`' → logprob: -13.38096809387207
    5. '()

' → logprob: -13.50596809387207
    6. '();' → logprob: -13.63096809387207
    7. '(
' → logprob: -13.75596809387207
    8. ' ()' → logprob: -14.50596809387207
    9. '#' → logprob: -14.50596809387207
    10. '()"' → logprob: -14.50596809387207


RÉSUMÉ:
--------------------------------------------------------------------------------
Total des tokens analysés: 126
Tokens correctement prédits (1ère position, stricte): 48
Tokens correctement prédits (1ère position, avec adaptation): 51
Tokens correctement prédits (top 10): 101
Précision stricte (1ère position): 38.10%
Précision adaptée (1ère position): 40.48%
Précision (top 10): 80.16%
================================================================================
