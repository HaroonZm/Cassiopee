================================================================================
ANALYSE DE PRÉDICTION TOKEN PAR TOKEN (BATCH API)
Date: 2025-06-04 19:57:06
Modèle de tokenisation: gpt-4o-mini
================================================================================

SCRIPT ANALYSÉ:
--------------------------------------------------------------------------------
import sys
from itertools import islice, count

def walk(n):
    z = 1
    yield z
    for _ in range(1, n):
        z += (d := z * 1j) / abs(d)
        yield z

for line in map(str.strip, sys.stdin):
    if line == '-1':
        break
    n = int(line)
    *_, z = islice(walk(n), n)
    print(f"{z.real}\n{z.imag}")
--------------------------------------------------------------------------------

RÉSULTATS D'ANALYSE TOKEN PAR TOKEN:
--------------------------------------------------------------------------------
Token 0: 'import' (ID: 561)
  → Token d'amorce (pas de prédiction)

Token 1: ' sys' (ID: 12228)
  → Token d'amorce (pas de prédiction)

Token 2: '
' (ID: 198)
  → Token d'amorce (pas de prédiction)

Token 3: 'from' (ID: 2845)
  Prédit: 'as'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'as' → logprob: -0.018294736742973328
    2. 'import' → logprob: -4.143294811248779
    3. 'os' → logprob: -6.518294811248779
    4. 'from' → logprob: -7.893294811248779
    5. 'sys' → logprob: -8.518294334411621
    6. ' as' → logprob: -9.893294334411621
    7. '```' → logprob: -10.143294334411621
    8. 'numpy' → logprob: -10.268294334411621
    9. 'As' → logprob: -11.268294334411621
    10. 'newline' → logprob: -11.268294334411621

Token 4: ' itertools' (ID: 103178)
  Prédit: 'datetime'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'datetime' → logprob: -1.4410321712493896
    2. 'import' → logprob: -1.5660321712493896
    3. ' datetime' → logprob: -1.6910321712493896
    4. ' import' → logprob: -1.8160321712493896
    5. 'os' → logprob: -3.0660321712493896
    6. ' os' → logprob: -3.9410321712493896
    7. 'time' → logprob: -4.191032409667969
    8. 'P' → logprob: -4.441032409667969
    9. ' pathlib' → logprob: -4.816032409667969
    10. ' .' → logprob: -4.941032409667969

Token 5: ' import' (ID: 1588)
  Prédit: 'import'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'import' → logprob: -0.018151231110095978
    2. ' import' → logprob: -4.01815128326416
    3. '.import' → logprob: -14.39315128326416
    4. '	import' → logprob: -15.01815128326416
    5. '-import' → logprob: -15.76815128326416
    6. 'Import' → logprob: -16.143150329589844
    7. ''import' → logprob: -16.893150329589844
    8. '.' → logprob: -17.018150329589844
    9. ' импорт' → logprob: -17.393150329589844
    10. '_import' → logprob: -17.393150329589844

Token 6: ' is' (ID: 382)
  Prédit: 'com'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'com' → logprob: -0.9092231392860413
    2. 'chain' → logprob: -1.6592230796813965
    3. 'cycle' → logprob: -1.7842230796813965
    4. 'product' → logprob: -1.7842230796813965
    5. 'count' → logprob: -2.7842230796813965
    6. 'per' → logprob: -5.7842230796813965
    7. 'comb' → logprob: -5.9092230796813965
    8. 'zip' → logprob: -6.4092230796813965
    9. 'tee' → logprob: -7.6592230796813965
    10. '*' → logprob: -8.659223556518555

Token 7: 'lice' (ID: 7321)
  Prédit: 'lice'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'lice' → logprob: -0.05912505090236664
    2. 'chain' → logprob: -3.4341249465942383
    3. 'import' → logprob: -4.934124946594238
    4. 'ertools' → logprob: -5.684124946594238
    5. 'from' → logprob: -6.184124946594238
    6. 'plit' → logprob: -6.559124946594238
    7. 'per' → logprob: -6.559124946594238
    8. 'product' → logprob: -6.559124946594238
    9. 'pect' → logprob: -6.809124946594238
    10. 'cycle' → logprob: -7.684124946594238

Token 8: ',' (ID: 11)
  Prédit: 'import'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'import' → logprob: -0.5797131061553955
    2. 'as' → logprob: -1.4547131061553955
    3. 'def' → logprob: -2.2047131061553955
    4. ',' → logprob: -3.4547131061553955
    5. '<|end|>' → logprob: -3.7047131061553955
    6. 'from' → logprob: -4.204712867736816
    7. '#' → logprob: -4.579712867736816
    8. 'print' → logprob: -5.704712867736816
    9. 'sys' → logprob: -6.204712867736816
    10. '.' → logprob: -6.579712867736816

Token 9: ' count' (ID: 3605)
  Prédit: 'count'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'count' → logprob: -0.32414066791534424
    2. 'cycle' → logprob: -1.8241406679153442
    3. 'chain' → logprob: -2.3241405487060547
    4. 'com' → logprob: -4.949140548706055
    5. 'tee' → logprob: -5.199140548706055
    6. 'zip' → logprob: -5.699140548706055
    7. 'filter' → logprob: -7.699140548706055
    8. 'compress' → logprob: -8.074140548706055
    9. 'product' → logprob: -8.199140548706055
    10. 'repeat' → logprob: -9.074140548706055

Token 10: '

' (ID: 279)
  Prédit: 'as'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'as' → logprob: -0.8003203272819519
    2. 'def' → logprob: -0.9253203272819519
    3. 'import' → logprob: -2.4253203868865967
    4. ',' → logprob: -3.8003203868865967
    5. '#' → logprob: -4.050320148468018
    6. '<|end|>' → logprob: -4.925320148468018
    7. 'from' → logprob: -5.300320148468018
    8. ' as' → logprob: -6.050320148468018
    9. 'sys' → logprob: -6.300320148468018
    10. 'class' → logprob: -6.300320148468018

Token 11: 'def' (ID: 1314)
  Prédit: 'def'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'def' → logprob: -0.03943783789873123
    2. 'class' → logprob: -3.414437770843506
    3. '#' → logprob: -5.914437770843506
    4. 'print' → logprob: -6.414437770843506
    5. 'import' → logprob: -7.164437770843506
    6. 'sys' → logprob: -8.414438247680664
    7. 'for' → logprob: -8.914438247680664
    8. 'from' → logprob: -9.164438247680664
    9. '__' → logprob: -9.789438247680664
    10. 'if' → logprob: -10.039438247680664

Token 12: ' walk' (ID: 5229)
  Prédit: 'def'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'def' → logprob: -0.18487615883350372
    2. ' def' → logprob: -2.8098762035369873
    3. ' my' → logprob: -4.059875965118408
    4. '()' → logprob: -4.184875965118408
    5. '(' → logprob: -4.434875965118408
    6. ' main' → logprob: -4.809875965118408
    7. ' f' → logprob: -5.309875965118408
    8. ' (' → logprob: -5.309875965118408
    9. ' get' → logprob: -5.434875965118408
    10. ' process' → logprob: -5.559875965118408

Token 13: '(n' (ID: 2406)
  Prédit: '(:'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '(:' → logprob: -0.2585722804069519
    2. '():' → logprob: -1.5085723400115967
    3. '(' → logprob: -6.008572101593018
    4. '(":' → logprob: -6.758572101593018
    5. '(_:' → logprob: -6.883572101593018
    6. '(':' → logprob: -7.133572101593018
    7. '(...' → logprob: -7.758572101593018
    8. '):' → logprob: -9.008572578430176
    9. '(*' → logprob: -9.383572578430176
    10. '(ctx' → logprob: -9.758572578430176

Token 14: '):
' (ID: 1883)
  Prédit: '):'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '):' → logprob: -0.00529388478025794
    2. '):
' → logprob: -5.255293846130371
    3. '):

' → logprob: -9.880293846130371
    4. ',' → logprob: -12.255293846130371
    5. '):
' → logprob: -13.130293846130371
    6. ')' → logprob: -13.880293846130371
    7. ')):' → logprob: -14.755293846130371
    8. ':' → logprob: -14.755293846130371
    9. '   ' → logprob: -15.630293846130371
    10. 'def' → logprob: -15.880293846130371

Token 15: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -8.77627644513268e-06
    2. '  ' → logprob: -12.625008583068848
    3. ' ' → logprob: -12.875008583068848
    4. 'pass' → logprob: -13.750008583068848
    5. '    ' → logprob: -14.250008583068848
    6. '   ' → logprob: -14.500008583068848
    7. ' pass' → logprob: -15.500008583068848
    8. '```' → logprob: -15.625008583068848
    9. 'return' → logprob: -15.875008583068848
    10. '   ' → logprob: -16.625009536743164

Token 16: ' z' (ID: 579)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.017122065648436546
    2. 'for' → logprob: -4.517122268676758
    3. 'return' → logprob: -5.517122268676758
    4. 'pass' → logprob: -7.392122268676758
    5. 'while' → logprob: -7.517122268676758
    6. 'yield' → logprob: -7.767122268676758
    7. 'if' → logprob: -7.892122268676758
    8. ' ' → logprob: -11.017122268676758
    9. 'print' → logprob: -11.142122268676758
    10. '  ' → logprob: -11.267122268676758

Token 17: ' =' (ID: 314)
  Prédit: '='
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '=' → logprob: -0.15852311253547668
    2. '   ' → logprob: -2.5335230827331543
    3. ' =' → logprob: -3.4085230827331543
    4. '    ' → logprob: -4.533523082733154
    5. '  ' → logprob: -4.783523082733154
    6. 'def' → logprob: -5.283523082733154
    7. 'e' → logprob: -5.533523082733154
    8. 'ip' → logprob: -6.783523082733154
    9. '=lambda' → logprob: -6.908523082733154
    10. '     ' → logprob: -7.658523082733154

Token 18: ' ' (ID: 220)
  Prédit: '0'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '0' → logprob: -0.04012554883956909
    2. ' ' → logprob: -3.540125608444214
    3. '[]' → logprob: -5.665125370025635
    4. 'count' → logprob: -5.915125370025635
    5. 'iter' → logprob: -7.040125370025635
    6. 'range' → logprob: -7.040125370025635
    7. '{}' → logprob: -7.665125370025635
    8. 'zip' → logprob: -7.790125370025635
    9. '1' → logprob: -8.415125846862793
    10. 'None' → logprob: -8.665125846862793

Token 19: '1' (ID: 16)
  Prédit: '0'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '0' → logprob: -0.6399917006492615
    2. 'count' → logprob: -0.7649917006492615
    3. 'is' → logprob: -5.389991760253906
    4. 'None' → logprob: -7.139991760253906
    5. 'zip' → logprob: -7.514991760253906
    6. 'range' → logprob: -7.514991760253906
    7. 'iter' → logprob: -7.764991760253906
    8. '[]' → logprob: -8.889991760253906
    9. 'zero' → logprob: -9.764991760253906
    10. '1' → logprob: -9.889991760253906

Token 20: '
' (ID: 198)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.0015637811738997698
    2. 'z' → logprob: -6.751563549041748
    3. ';' → logprob: -8.376564025878906
    4. '    
' → logprob: -10.251564025878906
    5. '       ' → logprob: -10.751564025878906
    6. ' ' → logprob: -10.751564025878906
    7. 'return' → logprob: -10.876564025878906
    8. 'n' → logprob: -11.501564025878906
    9. '  ' → logprob: -11.626564025878906
    10. '+' → logprob: -12.001564025878906

Token 21: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -2.7491250875755213e-05
    2. 'while' → logprob: -11.250027656555176
    3. 'z' → logprob: -11.750027656555176
    4. 'return' → logprob: -13.250027656555176
    5. '  ' → logprob: -13.375027656555176
    6. 'for' → logprob: -13.750027656555176
    7. '       ' → logprob: -14.500027656555176
    8. ' ' → logprob: -14.500027656555176
    9. 'def' → logprob: -15.125027656555176
    10. 'n' → logprob: -15.500027656555176

Token 22: ' yield' (ID: 14376)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.6141817569732666
    2. 'while' → logprob: -0.8641817569732666
    3. 'for' → logprob: -3.3641817569732666
    4. 'return' → logprob: -6.2391815185546875
    5. 'z' → logprob: -7.1141815185546875
    6. 'if' → logprob: -9.989181518554688
    7. ' ' → logprob: -10.364181518554688
    8. 'def' → logprob: -10.739181518554688
    9. 'x' → logprob: -10.739181518554688
    10. ' while' → logprob: -11.489181518554688

Token 23: ' z' (ID: 579)
  Prédit: 'z'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'z' → logprob: -0.000657154421787709
    2. '(z' → logprob: -7.500657081604004
    3. ' z' → logprob: -9.500657081604004
    4. 'n' → logprob: -10.500657081604004
    5. '.z' → logprob: -15.375657081604004
    6. '(' → logprob: -15.375657081604004
    7. '_z' → logprob: -15.500657081604004
    8. '	z' → logprob: -15.625657081604004
    9. '-z' → logprob: -15.625657081604004
    10. 'x' → logprob: -15.750657081604004

Token 24: '
' (ID: 198)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '   ' → logprob: -3.011373155459296e-05
    2. 'while' → logprob: -11.250030517578125
    3. 'def' → logprob: -12.000030517578125
    4. '  ' → logprob: -12.750030517578125
    5. 'for' → logprob: -13.000030517578125
    6. '    
' → logprob: -13.000030517578125
    7. '       ' → logprob: -13.375030517578125
    8. ' ' → logprob: -13.875030517578125
    9. '    ' → logprob: -15.000030517578125
    10. 'yield' → logprob: -16.250030517578125

Token 25: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -2.816093228830141e-06
    2. '  ' → logprob: -13.50000286102295
    3. 'while' → logprob: -14.25000286102295
    4. ' ' → logprob: -15.12500286102295
    5. 'def' → logprob: -16.125001907348633
    6. '    ' → logprob: -16.625001907348633
    7. '       ' → logprob: -16.625001907348633
    8. 'z' → logprob: -16.750001907348633
    9. '    
' → logprob: -17.000001907348633
    10. '```' → logprob: -17.125001907348633

Token 26: ' for' (ID: 395)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -1.0087516784551553e-05
    2. 'while' → logprob: -11.62501049041748
    3. '  ' → logprob: -14.12501049041748
    4. ' ' → logprob: -16.125009536743164
    5. 'z' → logprob: -16.750009536743164
    6. '       ' → logprob: -16.875009536743164
    7. 'for' (adapté à ' for') → logprob: -17.125009536743164
    8. '    
' → logprob: -17.125009536743164
    9. '    ' → logprob: -17.500009536743164
    10. '	while' → logprob: -18.625009536743164

Token 27: ' _' (ID: 1175)
  Prédit: ' i'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' i' → logprob: -0.2967928946018219
    2. 'i' → logprob: -1.4217928647994995
    3. ' in' → logprob: -4.671792984008789
    4. 'x' → logprob: -6.046792984008789
    5. ' x' → logprob: -7.046792984008789
    6. 'in' → logprob: -7.046792984008789
    7. ' ' → logprob: -7.171792984008789
    8. '   ' → logprob: -7.171792984008789
    9. 'k' → logprob: -9.171792984008789
    10. 'range' → logprob: -9.671792984008789

Token 28: ' in' (ID: 306)
  Prédit: 'in'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'in' → logprob: -0.11993438005447388
    2. ':' → logprob: -2.869934320449829
    3. ' in' → logprob: -2.994934320449829
    4. 'z' → logprob: -5.369934558868408
    5. 'yield' → logprob: -8.24493408203125
    6. 'n' → logprob: -8.74493408203125
    7. 'range' → logprob: -9.11993408203125
    8. 'y' → logprob: -9.24493408203125
    9. 'for' → logprob: -9.36993408203125
    10. 'ind' → logprob: -9.36993408203125

Token 29: ' range' (ID: 3352)
  Prédit: 'is'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'is' → logprob: -0.5515563488006592
    2. 'range' → logprob: -1.5515563488006592
    3. 'count' → logprob: -1.5515563488006592
    4. ' range' → logprob: -9.176556587219238
    5. ' count' → logprob: -12.051556587219238
    6. ' is' → logprob: -13.676556587219238
    7. 'it' → logprob: -15.051556587219238
    8. '(range' → logprob: -15.176556587219238
    9. 'in' → logprob: -16.551555633544922
    10. 'iter' → logprob: -16.676555633544922

Token 30: '(' (ID: 7)
  Prédit: '('
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(' → logprob: -0.4756059944629669
    2. '(range' → logprob: -0.9756059646606445
    3. '(n' → logprob: -7.2256059646606445
    4. '(in' → logprob: -8.100605964660645
    5. '(len' → logprob: -8.475605964660645
    6. '(count' → logprob: -10.100605964660645
    7. '(x' → logprob: -10.225605964660645
    8. '(z' → logprob: -10.350605964660645
    9. '(_' → logprob: -10.850605964660645
    10. '(np' → logprob: -11.350605964660645

Token 31: '1' (ID: 16)
  Prédit: 'n'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'n' → logprob: -4.000763510703109e-05
    2. '1' → logprob: -10.625040054321289
    3. 'count' → logprob: -11.125040054321289
    4. '(n' → logprob: -14.125040054321289
    5. ' n' → logprob: -16.37504005432129
    6. '(' → logprob: -18.25004005432129
    7. '0' → logprob: -18.37504005432129
    8. 'is' → logprob: -19.37504005432129
    9. '2' → logprob: -19.62504005432129
    10. '_n' → logprob: -19.87504005432129

Token 32: ',' (ID: 11)
  Prédit: ','
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ',' → logprob: -0.0018686638213694096
    2. '):' → logprob: -6.501868724822998
    3. ',n' → logprob: -8.50186824798584
    4. '   ' → logprob: -9.37686824798584
    5. '):
' → logprob: -10.50186824798584
    6. '       ' → logprob: -12.00186824798584
    7. ' ,' → logprob: -12.00186824798584
    8. 'range' → logprob: -12.50186824798584
    9. '    ' → logprob: -12.75186824798584
    10. ' in' → logprob: -12.75186824798584

Token 33: ' n' (ID: 297)
  Prédit: 'n'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'n' → logprob: -1.9361264946837764e-07
    2. ' n' → logprob: -16.5
    3. 'count' → logprob: -18.5
    4. '(n' → logprob: -20.75
    5. '_n' → logprob: -21.75
    6. 'nth' → logprob: -23.625
    7. '	n' → logprob: -23.875
    8. '.n' → logprob: -24.125
    9. '­n' → logprob: -24.125
    10. ' н' → logprob: -24.875

Token 34: '):
' (ID: 1883)
  Prédit: '):'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '):' → logprob: -0.7005396485328674
    2. ' +' → logprob: -1.0755395889282227
    3. '+' → logprob: -1.8255395889282227
    4. '):
' → logprob: -6.575539588928223
    5. '):

' → logprob: -11.075539588928223
    6. ')' → logprob: -11.325539588928223
    7. ')):' → logprob: -12.575539588928223
    8. ')+' → logprob: -12.825539588928223
    9. '-' → logprob: -12.825539588928223
    10. '):
' → logprob: -12.950539588928223

Token 35: '       ' (ID: 309)
  Prédit: '       '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '       ' → logprob: -0.0001427538663847372
    2. '   ' → logprob: -9.000143051147461
    3. '     ' → logprob: -11.125143051147461
    4. '      ' → logprob: -12.875143051147461
    5. '    ' → logprob: -14.375143051147461
    6. '        ' → logprob: -14.375143051147461
    7. 'z' → logprob: -14.375143051147461
    8. '           ' → logprob: -16.00014305114746
    9. ' z' → logprob: -16.75014305114746
    10. ' ' → logprob: -16.87514305114746

Token 36: ' z' (ID: 579)
  Prédit: 'z'
  Correct (stricte): False
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'z' (adapté à ' z') → logprob: -0.4029807448387146
    2. '       ' → logprob: -1.1529808044433594
    3. '   ' → logprob: -4.152980804443359
    4. '           ' → logprob: -8.40298080444336
    5. 'yield' → logprob: -11.15298080444336
    6. '     ' → logprob: -12.15298080444336
    7. '        ' → logprob: -12.40298080444336
    8. '         ' → logprob: -12.52798080444336
    9. ' z' → logprob: -12.65298080444336
    10. 'print' → logprob: -13.77798080444336

Token 37: ' +=' (ID: 2757)
  Prédit: '+='
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '+=' → logprob: -0.14445525407791138
    2. ' +=' → logprob: -2.0194551944732666
    3. ' *=' → logprob: -7.644455432891846
    4. '=' → logprob: -7.769455432891846
    5. ' =' → logprob: -8.019454956054688
    6. '   ' → logprob: -8.394454956054688
    7. '*=' → logprob: -8.769454956054688
    8. '+' → logprob: -9.269454956054688
    9. '*' → logprob: -10.644454956054688
    10. '       ' → logprob: -11.644454956054688

Token 38: ' (' (ID: 350)
  Prédit: '1'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '1' → logprob: -0.0004929834394715726
    2. ' ' → logprob: -8.125493049621582
    3. '2' → logprob: -8.625493049621582
    4. 'z' → logprob: -11.250493049621582
    5. '   ' → logprob: -12.625493049621582
    6. '3' → logprob: -15.250493049621582
    7. '       ' → logprob: -15.375493049621582
    8. '_' → logprob: -15.625493049621582
    9. ' z' → logprob: -15.625493049621582
    10. '  ' → logprob: -16.625492095947266

Token 39: 'd' (ID: 67)
  Prédit: 'z'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'z' → logprob: -0.6268551349639893
    2. '1' → logprob: -1.5018551349639893
    3. '_' → logprob: -1.5018551349639893
    4. '2' → logprob: -4.00185489654541
    5. '_)' → logprob: -7.25185489654541
    6. '_z' → logprob: -7.75185489654541
    7. '_(' → logprob: -7.87685489654541
    8. '(z' → logprob: -8.75185489654541
    9. 'n' → logprob: -9.37685489654541
    10. '3' → logprob: -9.62685489654541

Token 40: ' :=' (ID: 3405)
  Prédit: 'ef'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'ef' → logprob: -0.02980557456612587
    2. '(z' → logprob: -3.9048056602478027
    3. '**' → logprob: -5.529805660247803
    4. '+' → logprob: -6.904805660247803
    5. '(e' → logprob: -7.154805660247803
    6. ' +' → logprob: -7.404805660247803
    7. '*z' → logprob: -7.529805660247803
    8. 'e' → logprob: -8.029805183410645
    9. '*' → logprob: -8.279805183410645
    10. 'elta' → logprob: -8.529805183410645

Token 41: ' z' (ID: 579)
  Prédit: 'z'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'z' → logprob: -0.0908580869436264
    2. 'd' → logprob: -3.465857982635498
    3. '1' → logprob: -4.090857982635498
    4. '_' → logprob: -4.215857982635498
    5. 'count' → logprob: -4.715857982635498
    6. '0' → logprob: -5.340857982635498
    7. '(z' → logprob: -5.715857982635498
    8. '(' → logprob: -5.840857982635498
    9. '2' → logprob: -6.965857982635498
    10. 'n' → logprob: -6.965857982635498

Token 42: ' *' (ID: 425)
  Prédit: ' +'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' +' → logprob: -0.0888800248503685
    2. ')' → logprob: -3.9638800621032715
    3. '+' → logprob: -3.9638800621032715
    4. ' *' → logprob: -4.2138800621032715
    5. '**' → logprob: -4.5888800621032715
    6. '*' → logprob: -4.7138800621032715
    7. ' -' → logprob: -4.9638800621032715
    8. '-' → logprob: -5.3388800621032715
    9. '//' → logprob: -7.7138800621032715
    10. '   ' → logprob: -8.463879585266113

Token 43: ' ' (ID: 220)
  Prédit: '2'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '2' → logprob: -0.003983534872531891
    2. '_' → logprob: -5.878983497619629
    3. 'd' → logprob: -7.128983497619629
    4. '(' → logprob: -9.128983497619629
    5. '3' → logprob: -9.128983497619629
    6. 'z' → logprob: -9.628983497619629
    7. '(d' → logprob: -10.753983497619629
    8. '1' → logprob: -10.878983497619629
    9. '_(' → logprob: -11.253983497619629
    10. 'n' → logprob: -11.503983497619629

Token 44: '1' (ID: 16)
  Prédit: '2'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '2' → logprob: -0.004096093121916056
    2. 'd' → logprob: -5.754096031188965
    3. '3' → logprob: -7.879096031188965
    4. '(d' → logprob: -8.879096031188965
    5. 'z' → logprob: -9.129096031188965
    6. '_' → logprob: -9.254096031188965
    7. '(' → logprob: -9.504096031188965
    8. '1' → logprob: -9.629096031188965
    9. 'n' → logprob: -11.379096031188965
    10. '0' → logprob: -11.504096031188965

Token 45: 'j' (ID: 73)
  Prédit: '.'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '.' → logprob: -0.0023408043198287487
    2. '/' → logprob: -6.877340793609619
    3. '+' → logprob: -7.377340793609619
    4. '0' → logprob: -8.377341270446777
    5. '2' → logprob: -8.377341270446777
    6. ' +' → logprob: -8.752341270446777
    7. '1' → logprob: -10.627341270446777
    8. '   ' → logprob: -11.627341270446777
    9. '*' → logprob: -12.127341270446777
    10. '**' → logprob: -12.377341270446777

Token 46: ')' (ID: 8)
  Prédit: ')'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')' → logprob: -0.003876554314047098
    2. ').' → logprob: -6.003876686096191
    3. ')
' → logprob: -7.378876686096191
    4. '       ' → logprob: -7.753876686096191
    5. '   ' → logprob: -9.378876686096191
    6. '           ' → logprob: -10.128876686096191
    7. ')

' → logprob: -10.253876686096191
    8. ')*' → logprob: -10.253876686096191
    9. '+' → logprob: -10.378876686096191
    10. '*' → logprob: -10.628876686096191

Token 47: ' /' (ID: 820)
  Prédit: '       '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '       ' → logprob: -0.002107198117300868
    2. '   ' → logprob: -6.6271071434021
    3. 'yield' → logprob: -7.2521071434021
    4. '           ' → logprob: -10.252107620239258
    5. 'return' → logprob: -10.627107620239258
    6. 'z' → logprob: -12.627107620239258
    7. '     ' → logprob: -12.752107620239258
    8. '      ' → logprob: -13.127107620239258
    9. '        ' → logprob: -13.252107620239258
    10. '         ' → logprob: -14.252107620239258

Token 48: ' abs' (ID: 8443)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '(' → logprob: -0.6100979447364807
    2. '_' → logprob: -1.860097885131836
    3. '_(' → logprob: -3.235097885131836
    4. '_n' → logprob: -3.360097885131836
    5. '(_' → logprob: -3.360097885131836
    6. '(z' → logprob: -3.485097885131836
    7. 'n' → logprob: -3.485097885131836
    8. 'z' → logprob: -3.485097885131836
    9. '_z' → logprob: -3.485097885131836
    10. '(n' → logprob: -3.735097885131836

Token 49: '(d' (ID: 2572)
  Prédit: '(z'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(z' → logprob: -0.04865788295865059
    2. '(d' → logprob: -3.0486578941345215
    3. '(' → logprob: -9.798657417297363
    4. '(abs' → logprob: -12.173657417297363
    5. 'z' → logprob: -13.048657417297363
    6. 'd' → logprob: -13.673657417297363
    7. '(a' → logprob: -13.798657417297363
    8. '(range' → logprob: -13.923657417297363
    9. '((' → logprob: -14.423657417297363
    10. '(n' → logprob: -14.673657417297363

Token 50: ')
' (ID: 446)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')' → logprob: -0.00013083349040243775
    2. ')
' → logprob: -9.125130653381348
    3. '))' → logprob: -11.375130653381348
    4. ').' → logprob: -12.375130653381348
    5. ')**' → logprob: -12.750130653381348
    6. ')

' → logprob: -13.500130653381348
    7. ')`' → logprob: -14.625130653381348
    8. ');' → logprob: -15.625130653381348
    9. ')*' → logprob: -15.875130653381348
    10. '),' → logprob: -15.875130653381348

Token 51: '       ' (ID: 309)
  Prédit: '       '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '       ' → logprob: -1.1517960956552997e-05
    2. '   ' → logprob: -11.500011444091797
    3. '           ' → logprob: -14.500011444091797
    4. 'yield' → logprob: -14.875011444091797
    5. '      ' → logprob: -15.375011444091797
    6. '     ' → logprob: -16.000011444091797
    7. '        ' → logprob: -16.500011444091797
    8. 'return' → logprob: -18.500011444091797
    9. '    ' → logprob: -18.625011444091797
    10. '               ' → logprob: -18.750011444091797

Token 52: ' yield' (ID: 14376)
  Prédit: '       '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '       ' → logprob: -0.0233957227319479
    2. 'yield' (adapté à ' yield') → logprob: -3.7733957767486572
    3. '   ' → logprob: -8.898395538330078
    4. 'return' → logprob: -12.023395538330078
    5. '           ' → logprob: -12.273395538330078
    6. '	yield' → logprob: -14.023395538330078
    7. '     ' → logprob: -14.148395538330078
    8. '      ' → logprob: -14.273395538330078
    9. '        ' → logprob: -14.898395538330078
    10. '         ' → logprob: -16.523395538330078

Token 53: ' z' (ID: 579)
  Prédit: 'z'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'z' → logprob: -0.00029720881138928235
    2. ' z' → logprob: -8.125297546386719
    3. '(z' → logprob: -13.875297546386719
    4. ' الز' → logprob: -15.250297546386719
    5. '	z' → logprob: -17.37529754638672
    6. '_z' → logprob: -18.25029754638672
    7. ' з' → logprob: -18.50029754638672
    8. '.z' → logprob: -19.12529754638672
    9. '*z' → logprob: -19.12529754638672
    10. 'y' → logprob: -19.62529754638672

Token 54: '

' (ID: 279)
  Prédit: '       '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '       ' → logprob: -0.23619897663593292
    2. '   ' → logprob: -2.236198902130127
    3. 'def' → logprob: -2.361198902130127
    4. '```' → logprob: -4.861198902130127
    5. 'yield' → logprob: -7.611198902130127
    6. 'return' → logprob: -8.361199378967285
    7. 'import' → logprob: -8.736199378967285
    8. '           ' → logprob: -8.986199378967285
    9. '<|end|>' → logprob: -9.486199378967285
    10. '        
' → logprob: -9.986199378967285

Token 55: 'for' (ID: 1938)
  Prédit: 'def'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'def' → logprob: -0.5066491365432739
    2. '   ' → logprob: -1.006649136543274
    3. '       ' → logprob: -3.6316490173339844
    4. '```' → logprob: -6.381649017333984
    5. 'return' → logprob: -6.506649017333984
    6. 'if' → logprob: -6.756649017333984
    7. 'yield' → logprob: -7.506649017333984
    8. 'import' → logprob: -8.131649017333984
    9. 'print' → logprob: -9.256649017333984
    10. 'n' → logprob: -9.881649017333984

Token 56: ' line' (ID: 2543)
  Prédit: ' i'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' i' → logprob: -0.23799896240234375
    2. ' n' → logprob: -2.1129989624023438
    3. ' _' → logprob: -2.9879989624023438
    4. ' z' → logprob: -4.112998962402344
    5. ' x' → logprob: -4.112998962402344
    6. ' d' → logprob: -6.362998962402344
    7. ' k' → logprob: -6.737998962402344
    8. 'n' → logprob: -6.862998962402344
    9. ' count' → logprob: -7.112998962402344
    10. 'i' → logprob: -7.487998962402344

Token 57: ' in' (ID: 306)
  Prédit: ' in'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' in' → logprob: -0.41009169816970825
    2. 'in' → logprob: -1.1600916385650635
    3. ':' → logprob: -3.7850916385650635
    4. '_in' → logprob: -8.535091400146484
    5. 'In' → logprob: -10.535091400146484
    6. ' ' → logprob: -12.035091400146484
    7. 'import' → logprob: -12.285091400146484
    8. ':
' → logprob: -12.410091400146484
    9. '   ' → logprob: -12.785091400146484
    10. ' في' → logprob: -14.035091400146484

Token 58: ' map' (ID: 4014)
  Prédit: 'sys'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'sys' → logprob: -0.365591824054718
    2. 'is' → logprob: -1.3655917644500732
    3. ' sys' → logprob: -3.2405917644500732
    4. ' is' → logprob: -4.490592002868652
    5. 'open' → logprob: -7.740592002868652
    6. 'map' → logprob: -9.865592002868652
    7. ' open' → logprob: -9.990592002868652
    8. 'iter' → logprob: -10.740592002868652
    9. 'count' → logprob: -10.990592002868652
    10. '(sys' → logprob: -10.990592002868652

Token 59: '(str' (ID: 7946)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '(' → logprob: -0.5496115684509277
    2. '(sys' → logprob: -1.1746115684509277
    3. '(lambda' → logprob: -2.9246115684509277
    4. '(is' → logprob: -3.9246115684509277
    5. '(`' → logprob: -5.299611568450928
    6. '(:' → logprob: -5.424611568450928
    7. '(map' → logprob: -5.674611568450928
    8. '(re' → logprob: -5.674611568450928
    9. '(iter' → logprob: -6.549611568450928
    10. '(...' → logprob: -6.799611568450928

Token 60: '.strip' (ID: 40613)
  Prédit: '.split'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '.split' → logprob: -0.6123724579811096
    2. '.strip' → logprob: -1.1123723983764648
    3. '.join' → logprob: -2.362372398376465
    4. '.replace' → logprob: -4.487372398376465
    5. '.format' → logprob: -4.737372398376465
    6. '.rstrip' → logprob: -5.487372398376465
    7. '.' → logprob: -5.612372398376465
    8. '.lower' → logprob: -6.362372398376465
    9. '.encode' → logprob: -6.612372398376465
    10. '().' → logprob: -7.112372398376465

Token 61: ',' (ID: 11)
  Prédit: ','
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ',' → logprob: -0.024036245420575142
    2. '(),' → logprob: -3.774036169052124
    3. '   ' → logprob: -7.649036407470703
    4. '(' → logprob: -9.024036407470703
    5. '),' → logprob: -9.899036407470703
    6. ',(' → logprob: -10.274036407470703
    7. '       ' → logprob: -10.524036407470703
    8. ',line' → logprob: -10.774036407470703
    9. '，' → logprob: -11.649036407470703
    10. '(line' → logprob: -12.024036407470703

Token 62: ' sys' (ID: 12228)
  Prédit: 'sys'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'sys' → logprob: -1.3856492842023727e-06
    2. ' sys' → logprob: -13.875000953674316
    3. 'open' → logprob: -14.750000953674316
    4. '(sys' → logprob: -17.500001907348633
    5. 'sy' → logprob: -18.500001907348633
    6. '	sys' → logprob: -18.500001907348633
    7. 'input' → logprob: -19.000001907348633
    8. 'system' → logprob: -19.125001907348633
    9. '.sys' → logprob: -19.500001907348633
    10. '_sys' → logprob: -20.375001907348633

Token 63: '.stdin' (ID: 93480)
  Prédit: '.stdin'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '.stdin' → logprob: -0.000609867216553539
    2. '.argv' → logprob: -7.500609874725342
    3. '.stdout' → logprob: -10.250609397888184
    4. 'stdin' → logprob: -11.375609397888184
    5. '.std' → logprob: -12.250609397888184
    6. ' stdin' → logprob: -13.125609397888184
    7. '.input' → logprob: -13.875609397888184
    8. '.stderr' → logprob: -14.125609397888184
    9. '.st' → logprob: -14.875609397888184
    10. '(stdin' → logprob: -15.750609397888184

Token 64: '):
' (ID: 1883)
  Prédit: '):'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '):' → logprob: -0.009981781244277954
    2. '.readlines' → logprob: -5.259981632232666
    3. ')):' → logprob: -6.509981632232666
    4. '):
' → logprob: -7.009981632232666
    5. '.read' → logprob: -7.009981632232666
    6. '.):' → logprob: -7.759981632232666
    7. ')' → logprob: -7.759981632232666
    8. '.readline' → logprob: -8.134982109069824
    9. ').' → logprob: -8.759982109069824
    10. '):

' → logprob: -10.259982109069824

Token 65: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -1.2664456789934775e-06
    2. 'n' → logprob: -14.125000953674316
    3. '  ' → logprob: -14.625000953674316
    4. '    ' → logprob: -18.125001907348633
    5. '   ' → logprob: -18.500001907348633
    6. ' ' → logprob: -19.000001907348633
    7. '   ' → logprob: -19.375001907348633
    8. '       ' → logprob: -19.375001907348633
    9. 'print' → logprob: -19.625001907348633
    10. ' n' → logprob: -20.125001907348633

Token 66: ' if' (ID: 538)
  Prédit: 'n'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'n' → logprob: -0.051629334688186646
    2. 'walk' → logprob: -3.4266293048858643
    3. 'print' → logprob: -4.176629543304443
    4. '   ' → logprob: -6.176629543304443
    5. 'for' → logprob: -8.676629066467285
    6. 'line' → logprob: -9.176629066467285
    7. 'num' → logprob: -10.176629066467285
    8. '       ' → logprob: -11.301629066467285
    9. 'result' → logprob: -11.551629066467285
    10. 'count' → logprob: -11.551629066467285

Token 67: ' line' (ID: 2543)
  Prédit: ' line'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' line' → logprob: -0.3486967086791992
    2. 'line' → logprob: -1.2236967086791992
    3. ' not' → logprob: -9.4736967086792
    4. '   ' → logprob: -9.7236967086792
    5. ' ' → logprob: -10.2236967086792
    6. '(line' → logprob: -10.3486967086792
    7. 'not' → logprob: -10.9736967086792
    8. '  ' → logprob: -12.0986967086792
    9. '	line' → logprob: -12.2236967086792
    10. ':' → logprob: -12.4736967086792

Token 68: ' ==' (ID: 951)
  Prédit: '=='
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '==' → logprob: -0.1996573656797409
    2. '.strip' → logprob: -2.699657440185547
    3. ':' → logprob: -2.824657440185547
    4. '.startswith' → logprob: -3.074657440185547
    5. '.' → logprob: -5.449657440185547
    6. ' ==' → logprob: -6.074657440185547
    7. '.lower' → logprob: -7.324657440185547
    8. '.is' → logprob: -8.324657440185547
    9. '[:' → logprob: -8.449657440185547
    10. ':=' → logprob: -8.574657440185547

Token 69: ' '-' (ID: 17489)
  Prédit: '"'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '"' → logprob: -0.48605483770370483
    2. ''' → logprob: -0.9860548377037048
    3. '"":' → logprob: -4.73605489730835
    4. '''' → logprob: -7.11105489730835
    5. '""' → logprob: -7.48605489730835
    6. ''end' → logprob: -7.73605489730835
    7. ''t' → logprob: -7.86105489730835
    8. ''ex' → logprob: -8.736054420471191
    9. ''d' → logprob: -8.736054420471191
    10. ''m' → logprob: -8.861054420471191

Token 70: '1' (ID: 16)
  Prédit: '1'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '1' → logprob: -0.00026765360962599516
    2. '-' → logprob: -8.25026798248291
    3. '':' → logprob: -12.62526798248291
    4. ''' → logprob: -13.75026798248291
    5. 'exit' → logprob: -14.25026798248291
    6. 'end' → logprob: -14.62526798248291
    7. '':
' → logprob: -15.25026798248291
    8. '2' → logprob: -15.50026798248291
    9. 'END' → logprob: -15.62526798248291
    10. 'EOF' → logprob: -16.375267028808594

Token 71: '':
' (ID: 7669)
  Prédit: '':'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '':' → logprob: -0.03380083292722702
    2. '':
' → logprob: -3.5338008403778076
    3. ':' → logprob: -5.5338006019592285
    4. '':
' → logprob: -10.783801078796387
    5. ':
' → logprob: -10.908801078796387
    6. ''' → logprob: -11.033801078796387
    7. '   ' → logprob: -12.033801078796387
    8. '):' → logprob: -12.033801078796387
    9. '":' → logprob: -12.408801078796387
    10. ':return' → logprob: -12.533801078796387

Token 72: '       ' (ID: 309)
  Prédit: '       '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '       ' → logprob: -0.0002072357019642368
    2. 'break' → logprob: -8.50020694732666
    3. 'continue' → logprob: -13.12520694732666
    4. '      ' → logprob: -14.00020694732666
    5. '     ' → logprob: -14.37520694732666
    6. 'print' → logprob: -16.375207901000977
    7. '        ' → logprob: -16.625207901000977
    8. '   ' → logprob: -16.750207901000977
    9. '           ' → logprob: -16.875207901000977
    10. ' break' → logprob: -16.875207901000977

Token 73: ' break' (ID: 2338)
  Prédit: 'break'
  Correct (stricte): False
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'break' (adapté à ' break') → logprob: -0.0003827676991932094
    2. '       ' → logprob: -7.875382900238037
    3. ' break' → logprob: -13.000382423400879
    4. 'print' → logprob: -15.750382423400879
    5. '	break' → logprob: -16.625383377075195
    6. 'continue' → logprob: -16.750383377075195
    7. 'Break' → logprob: -17.000383377075195
    8. '           ' → logprob: -17.250383377075195
    9. 'raise' → logprob: -17.875383377075195
    10. 'bre' → logprob: -18.000383377075195

Token 74: '
' (ID: 198)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.004640642087906599
    2. '       ' → logprob: -5.379640579223633
    3. 'n' → logprob: -11.254640579223633
    4. 'for' → logprob: -12.504640579223633
    5. '  ' → logprob: -13.629640579223633
    6. '    ' → logprob: -14.129640579223633
    7. '     ' → logprob: -14.379640579223633
    8. '           ' → logprob: -14.504640579223633
    9. ' ' → logprob: -15.504640579223633
    10. '    
' → logprob: -15.879640579223633

Token 75: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -2.927930654550437e-05
    2. 'n' → logprob: -10.875029563903809
    3. '       ' → logprob: -11.750029563903809
    4. 'for' → logprob: -13.375029563903809
    5. '  ' → logprob: -14.375029563903809
    6. 'print' → logprob: -16.375028610229492
    7. '    ' → logprob: -16.750028610229492
    8. ' ' → logprob: -17.625028610229492
    9. '     ' → logprob: -18.125028610229492
    10. 'line' → logprob: -18.375028610229492

Token 76: ' n' (ID: 297)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.01518525555729866
    2. 'n' (adapté à ' n') → logprob: -4.265185356140137
    3. '       ' → logprob: -6.890185356140137
    4. 'print' → logprob: -13.640185356140137
    5. ' n' → logprob: -13.890185356140137
    6. '  ' → logprob: -14.140185356140137
    7. '     ' → logprob: -15.765185356140137
    8. 'num' → logprob: -15.765185356140137
    9. 'line' → logprob: -16.01518440246582
    10. '    ' → logprob: -16.14018440246582

Token 77: ' =' (ID: 314)
  Prédit: ' ='
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' =' → logprob: -0.20778396725654602
    2. '=' → logprob: -1.7077839374542236
    3. '=int' → logprob: -5.082784175872803
    4. '   ' → logprob: -9.082783699035645
    5. '=n' → logprob: -12.082783699035645
    6. '+=' → logprob: -12.207783699035645
    7. ' ' → logprob: -12.332783699035645
    8. '=float' → logprob: -12.707783699035645
    9. 'for' → logprob: -12.957783699035645
    10. '=len' → logprob: -13.207783699035645

Token 78: ' int' (ID: 677)
  Prédit: 'int'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'int' → logprob: -4.842555426876061e-06
    2. ' int' → logprob: -12.250004768371582
    3. '(int' → logprob: -20.0000057220459
    4. '<int' → logprob: -21.0000057220459
    5. '=int' → logprob: -21.3750057220459
    6. '	int' → logprob: -21.5000057220459
    7. ''int' → logprob: -21.6250057220459
    8. '.int' → logprob: -22.1250057220459
    9. 'float' → logprob: -22.1250057220459
    10. '   ' → logprob: -22.1250057220459

Token 79: '(line' (ID: 18178)
  Prédit: '(line'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(line' → logprob: -2.1008713702030946e-06
    2. '(input' → logprob: -13.500001907348633
    3. '(' → logprob: -14.375001907348633
    4. '(sys' → logprob: -17.000001907348633
    5. '(lines' → logprob: -18.375001907348633
    6. '(light' → logprob: -19.125001907348633
    7. '(float' → logprob: -19.375001907348633
    8. '(eval' → logprob: -19.500001907348633
    9. '(Line' → logprob: -19.500001907348633
    10. '(li' → logprob: -19.625001907348633

Token 80: ')
' (ID: 446)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')' → logprob: -0.017083393409848213
    2. '.strip' → logprob: -4.142083168029785
    3. ')
' → logprob: -7.017083168029785
    4. '.rstrip' → logprob: -9.017083168029785
    5. ')

' → logprob: -11.017083168029785
    6. ').' → logprob: -11.892083168029785
    7. '))' → logprob: -13.142083168029785
    8. 'strip' → logprob: -13.392083168029785
    9. '.trim' → logprob: -14.017083168029785
    10. ')`' → logprob: -14.517083168029785

Token 81: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -1.6240566083070007e-06
    2. 'for' → logprob: -13.500001907348633
    3. '  ' → logprob: -16.000001907348633
    4. '       ' → logprob: -17.250001907348633
    5. 'print' → logprob: -18.000001907348633
    6. '    ' → logprob: -19.500001907348633
    7. 'result' → logprob: -19.625001907348633
    8. ' ' → logprob: -20.375001907348633
    9. '    
' → logprob: -21.000001907348633
    10. '   ' → logprob: -21.375001907348633

Token 82: ' *' (ID: 425)
  Prédit: 'for'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'for' → logprob: -0.045014649629592896
    2. 'print' → logprob: -3.1700146198272705
    3. 'result' → logprob: -6.54501485824585
    4. '   ' → logprob: -7.92001485824585
    5. 'walk' → logprob: -9.295014381408691
    6. 'results' → logprob: -10.295014381408691
    7. 'list' → logprob: -10.545014381408691
    8. 'res' → logprob: -11.545014381408691
    9. 'if' → logprob: -11.545014381408691
    10. 'gen' → logprob: -11.795014381408691

Token 83: '_,' (ID: 14152)
  Prédit: 'walk'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'walk' → logprob: -0.07852838188409805
    2. 'result' → logprob: -2.82852840423584
    3. 'results' → logprob: -5.45352840423584
    4. 'z' → logprob: -5.57852840423584
    5. 'print' → logprob: -5.70352840423584
    6. 'list' → logprob: -6.95352840423584
    7. 'is' → logprob: -7.07852840423584
    8. 'yield' → logprob: -7.07852840423584
    9. 'res' → logprob: -7.32852840423584
    10. 'for' → logprob: -7.57852840423584

Token 84: ' z' (ID: 579)
  Prédit: 'walk'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'walk' → logprob: -0.37569883465766907
    2. 'z' → logprob: -1.8756988048553467
    3. 'is' → logprob: -2.1256988048553467
    4. 'yield' → logprob: -4.000699043273926
    5. 'n' → logprob: -5.375699043273926
    6. ' walk' → logprob: -5.500699043273926
    7. 'next' → logprob: -6.000699043273926
    8. 'd' → logprob: -6.625699043273926
    9. 'list' → logprob: -6.750699043273926
    10. 'count' → logprob: -6.875699043273926

Token 85: ' =' (ID: 314)
  Prédit: '='
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '=' → logprob: -0.024890929460525513
    2. ' =' → logprob: -4.274890899658203
    3. 'for' → logprob: -5.524890899658203
    4. 'yield' → logprob: -5.774890899658203
    5. '=z' → logprob: -6.524890899658203
    6. 'z' → logprob: -6.774890899658203
    7. 'walk' → logprob: -7.649890899658203
    8. 'print' → logprob: -8.649890899658203
    9. '   ' → logprob: -9.274890899658203
    10. '       ' → logprob: -10.024890899658203

Token 86: ' is' (ID: 382)
  Prédit: 'walk'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'walk' → logprob: -0.06280698627233505
    2. 'list' → logprob: -2.812807083129883
    3. ' walk' → logprob: -7.187807083129883
    4. 'is' → logprob: -10.062807083129883
    5. 'tuple' → logprob: -10.812807083129883
    6. ' list' → logprob: -11.562807083129883
    7. '   ' → logprob: -12.812807083129883
    8. '(list' → logprob: -13.562807083129883
    9. '_walk' → logprob: -14.062807083129883
    10. 'walker' → logprob: -14.062807083129883

Token 87: 'lice' (ID: 7321)
  Prédit: 'lice'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'lice' → logprob: -0.0001499060745118186
    2. 'l' → logprob: -9.250149726867676
    3. 'lic' → logprob: -11.125149726867676
    4. 'li' → logprob: -11.375149726867676
    5. 'lide' → logprob: -11.500149726867676
    6. 'lices' → logprob: -12.500149726867676
    7. 'liced' → logprob: -12.625149726867676
    8. 'slice' → logprob: -12.750149726867676
    9. 'lace' → logprob: -13.250149726867676
    10. 'licing' → logprob: -13.875149726867676

Token 88: '(w' (ID: 7420)
  Prédit: '(is'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(is' → logprob: -0.08425789326429367
    2. '(w' → logprob: -2.5842578411102295
    3. '(map' → logprob: -5.334258079528809
    4. '(' → logprob: -7.709258079528809
    5. '(count' → logprob: -10.709258079528809
    6. '(line' → logprob: -10.959258079528809
    7. '(z' → logprob: -11.209258079528809
    8. '(range' → logprob: -12.084258079528809
    9. '(iter' → logprob: -13.084258079528809
    10. '(call' → logprob: -13.584258079528809

Token 89: 'alk' (ID: 2082)
  Prédit: 'alk'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'alk' → logprob: -0.01104134414345026
    2. '(' → logprob: -5.136041164398193
    3. 'ALK' → logprob: -5.636041164398193
    4. '(al' → logprob: -7.011041164398193
    5. ' alk' → logprob: -8.261041641235352
    6. 'alker' → logprob: -8.261041641235352
    7. 'alka' → logprob: -9.886041641235352
    8. '(a' → logprob: -10.636041641235352
    9. 'alking' → logprob: -11.886041641235352
    10. 'ak' → logprob: -12.261041641235352

Token 90: '(n' (ID: 2406)
  Prédit: '(n'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(n' → logprob: -2.45848218582978e-06
    2. '(' → logprob: -13.12500286102295
    3. '(),' → logprob: -15.12500286102295
    4. '(z' → logprob: -16.250001907348633
    5. '(N' → logprob: -17.875001907348633
    6. '(num' → logprob: -17.875001907348633
    7. '(...' → logprob: -19.000001907348633
    8. '(int' → logprob: -19.125001907348633
    9. '(_,' → logprob: -19.500001907348633
    10. '(np' → logprob: -19.625001907348633

Token 91: '),' (ID: 936)
  Prédit: '),'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '),' → logprob: -4.320199877838604e-07
    2. ')' → logprob: -15.375
    3. ')),' → logprob: -16.75
    4. '()),' → logprob: -16.875
    5. '),
' → logprob: -17.125
    6. '))' → logprob: -18.75
    7. ').' → logprob: -18.75
    8. '   ' → logprob: -18.875
    9. ''),' → logprob: -18.875
    10. ')，' → logprob: -19.125

Token 92: ' n' (ID: 297)
  Prédit: 'n'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'n' → logprob: -0.10258033126592636
    2. '-' → logprob: -2.3525803089141846
    3. '10' → logprob: -6.852580547332764
    4. '1' → logprob: -7.852580547332764
    5. 'None' → logprob: -7.852580547332764
    6. '2' → logprob: -8.727580070495605
    7. '-n' → logprob: -8.977580070495605
    8. '3' → logprob: -9.102580070495605
    9. '5' → logprob: -9.852580070495605
    10. '100' → logprob: -10.602580070495605

Token 93: ')
' (ID: 446)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')' → logprob: -0.012549209408462048
    2. '-' → logprob: -4.38754940032959
    3. ')`' → logprob: -10.88754940032959
    4. ' -' → logprob: -11.88754940032959
    5. '))' → logprob: -12.26254940032959
    6. ')
' → logprob: -12.76254940032959
    7. '```' → logprob: -13.51254940032959
    8. '   ' → logprob: -13.63754940032959
    9. '-)' → logprob: -13.76254940032959
    10. ').' → logprob: -14.13754940032959

Token 94: '   ' (ID: 271)
  Prédit: 'print'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'print' → logprob: -0.20157891511917114
    2. '   ' → logprob: -1.7015788555145264
    3. 'z' → logprob: -8.951579093933105
    4. 'sys' → logprob: -10.701579093933105
    5. '       ' → logprob: -11.576579093933105
    6. ' print' → logprob: -13.951579093933105
    7. '  ' → logprob: -13.951579093933105
    8. 'if' → logprob: -14.826579093933105
    9. '    ' → logprob: -15.201579093933105
    10. 'import' → logprob: -15.326579093933105

Token 95: ' print' (ID: 2123)
  Prédit: 'print'
  Correct (stricte): False
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'print' (adapté à ' print') → logprob: -0.001512004528194666
    2. '   ' → logprob: -6.501512050628662
    3. 'sys' → logprob: -12.251511573791504
    4. 'z' → logprob: -12.501511573791504
    5. ' print' → logprob: -14.251511573791504
    6. '       ' → logprob: -16.00151252746582
    7. 'yield' → logprob: -16.37651252746582
    8. 'if' → logprob: -16.37651252746582
    9. 'import' → logprob: -16.62651252746582
    10. 'for' → logprob: -18.00151252746582

Token 96: '(f' (ID: 1526)
  Prédit: '(z'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(z' → logprob: -0.00026765360962599516
    2. '(' → logprob: -8.87526798248291
    3. '(f' → logprob: -9.12526798248291
    4. '()' → logprob: -12.12526798248291
    5. '(*' → logprob: -13.62526798248291
    6. '(`' → logprob: -13.75026798248291
    7. '('' → logprob: -13.87526798248291
    8. '(_,' → logprob: -13.87526798248291
    9. '()(' → logprob: -13.87526798248291
    10. '(x' → logprob: -14.00026798248291

Token 97: '"{' (ID: 27510)
  Prédit: '"{'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '"{' → logprob: -0.0735858902335167
    2. ''{' → logprob: -2.8235859870910645
    3. '"' → logprob: -5.1985859870910645
    4. '")' → logprob: -5.9485859870910645
    5. ''' → logprob: -6.8235859870910645
    6. '".' → logprob: -7.0735859870910645
    7. '')' → logprob: -7.5735859870910645
    8. '"\' → logprob: -9.198585510253906
    9. '"(' → logprob: -9.198585510253906
    10. '"){' → logprob: -9.823585510253906

Token 98: 'z' (ID: 89)
  Prédit: 'z'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'z' → logprob: -5.080963092041202e-06
    2. '.z' → logprob: -12.625004768371582
    3. 'abs' → logprob: -13.750004768371582
    4. ' z' → logprob: -15.500004768371582
    5. 'round' → logprob: -16.1250057220459
    6. '(z' → logprob: -16.3750057220459
    7. ''z' → logprob: -16.7500057220459
    8. 'complex' → logprob: -17.6250057220459
    9. ' الز' → logprob: -17.6250057220459
    10. 'format' → logprob: -17.7500057220459

Token 99: '.real' (ID: 63800)
  Prédit: ':.'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ':.' → logprob: -0.07954902946949005
    2. '}")' → logprob: -2.8295490741729736
    3. '.real' → logprob: -4.3295488357543945
    4. ':' → logprob: -5.5795488357543945
    5. ':f' → logprob: -8.204548835754395
    6. ':g' → logprob: -9.829548835754395
    7. ':+' → logprob: -11.079548835754395
    8. '}' → logprob: -11.079548835754395
    9. '.imag' → logprob: -11.079548835754395
    10. '}")
' → logprob: -11.204548835754395

Token 100: '}\' (ID: 21170)
  Prédit: '},'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '},' → logprob: -0.03482197970151901
    2. ':.' → logprob: -3.5348219871520996
    3. '},{' → logprob: -5.9098219871521
    4. '}' → logprob: -6.6598219871521
    5. ':' → logprob: -7.5348219871521
    6. '}\' → logprob: -9.409821510314941
    7. '}{' → logprob: -9.534821510314941
    8. '}",' → logprob: -9.534821510314941
    9. ':f' → logprob: -9.784821510314941
    10. '}:{' → logprob: -9.784821510314941

Token 101: 'n' (ID: 77)
  Prédit: 'f'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'f' → logprob: -0.2968471944332123
    2. 'n' → logprob: -1.5468472242355347
    3. 'lf' → logprob: -4.296847343444824
    4. 't' → logprob: -4.671847343444824
    5. 'print' → logprob: -4.921847343444824
    6. '{' → logprob: -5.546847343444824
    7. 'l' → logprob: -5.921847343444824
    8. 'g' → logprob: -6.046847343444824
    9. '"{' → logprob: -7.046847343444824
    10. 'r' → logprob: -7.296847343444824

Token 102: '{' (ID: 90)
  Prédit: '{'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '{' → logprob: -6.511406809295295e-06
    2. '{o' → logprob: -13.000006675720215
    3. '"{' → logprob: -13.375006675720215
    4. '{k' → logprob: -14.500006675720215
    5. '{"' → logprob: -14.750006675720215
    6. '{lng' → logprob: -14.875006675720215
    7. '${' → logprob: -15.375006675720215
    8. 'z' → logprob: -15.625006675720215
    9. '{text' → logprob: -15.625006675720215
    10. '{i' → logprob: -15.875006675720215

Token 103: 'z' (ID: 89)
  Prédit: 'z'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'z' → logprob: -0.00026205103495158255
    2. '{' → logprob: -8.250262260437012
    3. ' z' → logprob: -14.875262260437012
    4. '(z' → logprob: -15.375262260437012
    5. '.z' → logprob: -16.500261306762695
    6. '*z' → logprob: -17.750261306762695
    7. ' الز' → logprob: -18.375261306762695
    8. '	z' → logprob: -18.375261306762695
    9. ':z' → logprob: -18.625261306762695
    10. '-z' → logprob: -18.875261306762695

Token 104: '.imag' (ID: 171484)
  Prédit: '.imag'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '.imag' → logprob: -0.0018849691841751337
    2. 'imag' → logprob: -6.626884937286377
    3. '.im' → logprob: -8.501885414123535
    4. ' imag' → logprob: -8.751885414123535
    5. 'Imag' → logprob: -9.751885414123535
    6. ' Imag' → logprob: -10.376885414123535
    7. '.phase' → logprob: -10.501885414123535
    8. '.angle' → logprob: -10.626885414123535
    9. ' imaginary' → logprob: -11.126885414123535
    10. ' imagin' → logprob: -11.501885414123535

Token 105: '}")' (ID: 122365)
  Prédit: '}")'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '}")' → logprob: -0.001275949995033443
    2. '}\' → logprob: -6.751276016235352
    3. '}')' → logprob: -10.251276016235352
    4. '}")
' → logprob: -10.626276016235352
    5. '}"' → logprob: -11.376276016235352
    6. '}{' → logprob: -11.751276016235352
    7. '}`' → logprob: -11.876276016235352
    8. '})' → logprob: -12.376276016235352
    9. '}")
' → logprob: -12.626276016235352
    10. '}}' → logprob: -12.626276016235352


RÉSUMÉ:
--------------------------------------------------------------------------------
Total des tokens analysés: 103
Tokens correctement prédits (1ère position, stricte): 31
Tokens correctement prédits (1ère position, avec adaptation): 34
Tokens correctement prédits (top 10): 71
Précision stricte (1ère position): 30.10%
Précision adaptée (1ère position): 33.01%
Précision (top 10): 68.93%
================================================================================
