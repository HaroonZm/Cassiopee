================================================================================
ANALYSE DE PRÉDICTION TOKEN PAR TOKEN (BATCH API)
Date: 2025-06-04 19:16:45
Modèle de tokenisation: gpt-4o-mini
================================================================================

SCRIPT ANALYSÉ:
--------------------------------------------------------------------------------
value_threshold,value_current=map(int,input().split())
if value_current<value_threshold:
    print("safe")
else:
    print("unsafe")
--------------------------------------------------------------------------------

RÉSULTATS D'ANALYSE TOKEN PAR TOKEN:
--------------------------------------------------------------------------------
Token 0: 'value' (ID: 1594)
  → Token d'amorce (pas de prédiction)

Token 1: '_threshold' (ID: 51747)
  → Token d'amorce (pas de prédiction)

Token 2: ',value' (ID: 72454)
  → Token d'amorce (pas de prédiction)

Token 3: '_current' (ID: 23981)
  Prédit: ','
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ',' → logprob: -0.7450367212295532
    2. ')' → logprob: -0.9950367212295532
    3. '=' → logprob: -2.1200366020202637
    4. '_' → logprob: -3.8700366020202637
    5. '[' → logprob: -5.870036602020264
    6. '>' → logprob: -6.120036602020264
    7. '<|end|>' → logprob: -6.620036602020264
    8. ' ' → logprob: -7.120036602020264
    9. '```' → logprob: -7.120036602020264
    10. '>=' → logprob: -7.370036602020264

Token 4: '=' (ID: 28)
  Prédit: '_'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_' → logprob: -0.29050153493881226
    2. '=' → logprob: -2.165501594543457
    3. ',' → logprob: -2.415501594543457
    4. '```' → logprob: -4.165501594543457
    5. ')' → logprob: -5.165501594543457
    6. '>' → logprob: -5.290501594543457
    7. ' ' → logprob: -5.540501594543457
    8. ' =' → logprob: -5.665501594543457
    9. '>=' → logprob: -6.040501594543457
    10. ' >=' → logprob: -6.165501594543457

Token 5: 'map' (ID: 3726)
  Prédit: '0'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '0' → logprob: -0.16216932237148285
    2. ' ' → logprob: -2.1621692180633545
    3. 'value' → logprob: -3.5371692180633545
    4. ' value' → logprob: -5.287169456481934
    5. '10' → logprob: -9.662169456481934
    6. '[' → logprob: -9.912169456481934
    7. '100' → logprob: -10.162169456481934
    8. '(value' → logprob: -10.287169456481934
    9. '20' → logprob: -10.537169456481934
    10. '```' → logprob: -10.787169456481934

Token 6: '(int' (ID: 2742)
  Prédit: '(lambda'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(lambda' → logprob: -0.6440687775611877
    2. '(' → logprob: -1.019068717956543
    3. '(int' → logprob: -2.519068717956543
    4. '<|end|>' → logprob: -4.394068717956543
    5. '(eval' → logprob: -5.769068717956543
    6. '```' → logprob: -5.894068717956543
    7. '(value' → logprob: -6.019068717956543
    8. '(range' → logprob: -6.269068717956543
    9. '(str' → logprob: -6.394068717956543
    10. 'int' → logprob: -6.394068717956543

Token 7: ',input' (ID: 123014)
  Prédit: '(input'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '(input' → logprob: -0.24627400934696198
    2. '(value' → logprob: -1.8712739944458008
    3. ')' → logprob: -2.996273994445801
    4. '(' → logprob: -4.746273994445801
    5. '(user' → logprob: -5.996273994445801
    6. ')value' → logprob: -6.996273994445801
    7. '<|end|>' → logprob: -7.246273994445801
    8. '(raw' → logprob: -7.996273994445801
    9. 'input' → logprob: -8.7462739944458
    10. '(values' → logprob: -8.9962739944458

Token 8: '().' (ID: 1454)
  Prédit: '())'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '())' → logprob: -1.0680406093597412
    2. '(' → logprob: -1.1930406093597412
    3. '()' → logprob: -1.9430406093597412
    4. ')' → logprob: -2.068040609359741
    5. '(()' → logprob: -4.31804084777832
    6. '(input' → logprob: -4.81804084777832
    7. '(""))' → logprob: -4.94304084777832
    8. '('' → logprob: -5.06804084777832
    9. '(user' → logprob: -5.69304084777832
    10. '();)' → logprob: -5.69304084777832

Token 9: 'split' (ID: 13627)
  Prédit: 'split'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'split' → logprob: -9.794061770662665e-05
    2. 'strip' → logprob: -9.25009822845459
    3. 'rstrip' → logprob: -13.50009822845459
    4. ' split' → logprob: -14.75009822845459
    5. '(split' → logprob: -16.500097274780273
    6. 'spl' → logprob: -17.750097274780273
    7. 'startswith' → logprob: -18.125097274780273
    8. ')' → logprob: -18.625097274780273
    9. 'read' → logprob: -19.000097274780273
    10. 'replace' → logprob: -19.375097274780273

Token 10: '())
' (ID: 4574)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ')' → logprob: -0.12242642045021057
    2. '())' → logprob: -2.2474265098571777
    3. '))' → logprob: -5.497426509857178
    4. '`)' → logprob: -5.747426509857178
    5. '()' → logprob: -7.497426509857178
    6. '')' → logprob: -7.997426509857178
    7. '('' → logprob: -8.12242603302002
    8. '```' → logprob: -8.12242603302002
    9. '(' → logprob: -8.74742603302002
    10. '()))' → logprob: -9.62242603302002

Token 11: 'if' (ID: 366)
  Prédit: 'if'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'if' → logprob: -0.011792908422648907
    2. ' if' → logprob: -5.13679313659668
    3. '
' → logprob: -5.63679313659668
    4. '```' → logprob: -6.88679313659668
    5. ',' → logprob: -8.38679313659668
    6. ';' → logprob: -8.76179313659668
    7. ';if' → logprob: -8.88679313659668
    8. 'value' → logprob: -9.13679313659668
    9. '#' → logprob: -9.26179313659668
    10. '\n' → logprob: -9.76179313659668

Token 12: ' value' (ID: 1432)
  Prédit: ' value'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' value' → logprob: -0.0013588056899607182
    2. 'value' → logprob: -6.626358985900879
    3. ' ' → logprob: -10.501358985900879
    4. ' ' → logprob: -12.876358985900879
    5. '(value' → logprob: -14.126358985900879
    6. '"value' → logprob: -14.501358985900879
    7. ' values' → logprob: -15.126358985900879
    8. ' not' → logprob: -15.501358985900879
    9. ' (' → logprob: -15.501358985900879
    10. '	value' → logprob: -16.126358032226562

Token 13: '_current' (ID: 23981)
  Prédit: '_current'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_current' → logprob: -0.4773944020271301
    2. '_' → logprob: -1.1023943424224854
    3. ' _' → logprob: -3.7273943424224854
    4. '_threshold' → logprob: -4.6023945808410645
    5. ' ' → logprob: -5.1023945808410645
    6. ' <' → logprob: -5.8523945808410645
    7. '_value' → logprob: -6.6023945808410645
    8. '<' → logprob: -7.2273945808410645
    9. ' >=' → logprob: -7.6023945808410645
    10. ' <=' → logprob: -7.7273945808410645

Token 14: '<' (ID: 27)
  Prédit: ' >'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' >' → logprob: -0.48043790459632874
    2. '>' → logprob: -1.8554378747940063
    3. ' >=' → logprob: -2.230437994003296
    4. ' <' → logprob: -2.605437994003296
    5. '<' → logprob: -4.230437755584717
    6. '>=' → logprob: -4.230437755584717
    7. ' <=' → logprob: -4.730437755584717
    8. ' ' → logprob: -5.480437755584717
    9. '<=' → logprob: -6.980437755584717
    10. '  ' → logprob: -8.980438232421875

Token 15: 'value' (ID: 1594)
  Prédit: 'value'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'value' → logprob: -0.05506868660449982
    2. ' value' → logprob: -2.9300687313079834
    3. '=value' → logprob: -9.430068969726562
    4. '=' → logprob: -9.680068969726562
    5. '_' → logprob: -10.680068969726562
    6. '"value' → logprob: -12.180068969726562
    7. '_value' → logprob: -12.680068969726562
    8. ' ' → logprob: -13.055068969726562
    9. ''value' → logprob: -13.180068969726562
    10. '0' → logprob: -13.430068969726562

Token 16: '_threshold' (ID: 51747)
  Prédit: '_threshold'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_threshold' → logprob: -0.004979832097887993
    2. '_' → logprob: -5.754979610443115
    3. ''_' → logprob: -7.379979610443115
    4. ':' → logprob: -8.254980087280273
    5. '_thresh' → logprob: -8.379980087280273
    6. '_:' → logprob: -8.754980087280273
    7. '_current' → logprob: -9.379980087280273
    8. '```' → logprob: -9.504980087280273
    9. '_value' → logprob: -10.129980087280273
    10. '"_' → logprob: -10.254980087280273

Token 17: ':
' (ID: 734)
  Prédit: ':'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ':' → logprob: -1.9743012671824545e-05
    2. ':
' → logprob: -12.000020027160645
    3. ' :' → logprob: -12.125020027160645
    4. ':**' → logprob: -12.875020027160645
    5. '>' → logprob: -13.750020027160645
    6. '>:' → logprob: -14.000020027160645
    7. ':return' → logprob: -14.125020027160645
    8. ',' → logprob: -14.250020027160645
    9. '):' → logprob: -14.250020027160645
    10. '':' → logprob: -15.250020027160645

Token 18: '   ' (ID: 271)
  Prédit: '    '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '    ' → logprob: -0.8211703896522522
    2. ' print' → logprob: -1.3211703300476074
    3. 'print' → logprob: -1.8211703300476074
    4. '   ' → logprob: -2.9461703300476074
    5. '\n' → logprob: -3.5711703300476074
    6. '\' → logprob: -4.446170330047607
    7. ' ' → logprob: -4.821170330047607
    8. ' 
' → logprob: -4.821170330047607
    9. ' \' → logprob: -5.321170330047607
    10. '     
' → logprob: -5.321170330047607

Token 19: ' print' (ID: 2123)
  Prédit: 'print'
  Correct (stricte): False
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'print' (adapté à ' print') → logprob: -0.3499983251094818
    2. ' print' → logprob: -1.2249983549118042
    3. ' value' → logprob: -7.599998474121094
    4. 'value' → logprob: -7.849998474121094
    5. ' pass' → logprob: -8.224998474121094
    6. '   ' → logprob: -8.724998474121094
    7. 'pass' → logprob: -8.849998474121094
    8. '```' → logprob: -10.724998474121094
    9. ' for' → logprob: -11.849998474121094
    10. 'result' → logprob: -11.849998474121094

Token 20: '("' (ID: 568)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(' → logprob: -0.003687247633934021
    2. '("("' → logprob: -6.378687381744385
    3. '('' → logprob: -6.503687381744385
    4. '("' → logprob: -8.503686904907227
    5. '(">' → logprob: -9.378686904907227
    6. '()' → logprob: -9.878686904907227
    7. '(value' → logprob: -10.003686904907227
    8. '(False' → logprob: -10.503686904907227
    9. '(True' → logprob: -10.753686904907227
    10. '("")' → logprob: -10.878686904907227

Token 21: 'safe' (ID: 46891)
  Prédit: 'value'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'value' → logprob: -0.7172055244445801
    2. 'Value' → logprob: -1.84220552444458
    3. 'Not' → logprob: -3.09220552444458
    4. 'No' → logprob: -3.34220552444458
    5. '0' → logprob: -3.59220552444458
    6. 'Rejected' → logprob: -3.71720552444458
    7. 'Reject' → logprob: -4.09220552444458
    8. 'Ins' → logprob: -4.21720552444458
    9. 'Low' → logprob: -4.34220552444458
    10. 'Keep' → logprob: -4.46720552444458

Token 22: '")
' (ID: 1896)
  Prédit: '")'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '")' → logprob: -0.000104616025055293
    2. ')' → logprob: -9.375104904174805
    3. ')")' → logprob: -11.500104904174805
    4. '")
' → logprob: -11.875104904174805
    5. ' ")' → logprob: -13.875104904174805
    6. '"' → logprob: -14.750104904174805
    7. '!")' → logprob: -14.750104904174805
    8. '")
' → logprob: -14.750104904174805
    9. '");' → logprob: -16.500104904174805
    10. '')' → logprob: -16.750104904174805

Token 23: 'else' (ID: 2807)
  Prédit: 'else'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'else' → logprob: -0.10629407316446304
    2. ' else' → logprob: -2.3562941551208496
    3. 'elif' → logprob: -5.85629415512085
    4. '<|end|>' → logprob: -6.10629415512085
    5. '_else' → logprob: -7.73129415512085
    6. '```' → logprob: -8.731293678283691
    7. ' elif' → logprob: -9.731293678283691
    8. ')' → logprob: -9.856293678283691
    9. 's' → logprob: -10.106293678283691
    10. '
' → logprob: -10.481293678283691

Token 24: ':
' (ID: 734)
  Prédit: ':'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ':' → logprob: -6.034592388459714e-06
    2. ':
' → logprob: -12.750005722045898
    3. ' :' → logprob: -12.875005722045898
    4. ':return' → logprob: -15.500005722045898
    5. '   ' → logprob: -15.625005722045898
    6. ':**' → logprob: -16.7500057220459
    7. '```' → logprob: -17.6250057220459
    8. '():' → logprob: -17.6250057220459
    9. ':def' → logprob: -17.6250057220459
    10. '{' → logprob: -17.7500057220459

Token 25: '   ' (ID: 271)
  Prédit: ' print'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' print' → logprob: -0.05164869502186775
    2. '   ' → logprob: -3.5516486167907715
    3. 'print' → logprob: -4.5516486167907715
    4. ' safe' → logprob: -4.6766486167907715
    5. '    ' → logprob: -6.8016486167907715
    6. '```' → logprob: -8.55164909362793
    7. '"' → logprob: -9.42664909362793
    8. ' pass' → logprob: -9.92664909362793
    9. ' ' → logprob: -10.30164909362793
    10. ' continue' → logprob: -10.42664909362793

Token 26: ' print' (ID: 2123)
  Prédit: ' print'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' print' → logprob: -0.07908971607685089
    2. 'print' (adapté à ' print') → logprob: -2.579089641571045
    3. '   ' → logprob: -8.704090118408203
    4. '    ' → logprob: -11.579090118408203
    5. '```' → logprob: -11.579090118408203
    6. ' safe' → logprob: -12.579090118408203
    7. ' pass' → logprob: -12.829090118408203
    8. ' ' → logprob: -13.329090118408203
    9. '	print' → logprob: -13.704090118408203
    10. '.print' → logprob: -14.329090118408203

Token 27: '("' (ID: 568)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(' → logprob: -0.07140373438596725
    2. '("' → logprob: -3.071403741836548
    3. '("("' → logprob: -3.821403741836548
    4. '("")' → logprob: -7.696403503417969
    5. '(">' → logprob: -9.071403503417969
    6. '("(' → logprob: -10.696403503417969
    7. '('' → logprob: -10.821403503417969
    8. '(""' → logprob: -10.821403503417969
    9. '("""' → logprob: -11.571403503417969
    10. '("="' → logprob: -11.696403503417969

Token 28: 'unsafe' (ID: 66907)
  Prédit: 'danger'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'danger' → logprob: -0.5553826093673706
    2. 'unsafe' → logprob: -1.6803826093673706
    3. 'alert' → logprob: -2.55538272857666
    4. 'not' → logprob: -2.68038272857666
    5. 'warning' → logprob: -3.80538272857666
    6. 'risk' → logprob: -4.05538272857666
    7. 'over' → logprob: -4.30538272857666
    8. 'safe' → logprob: -4.93038272857666
    9. ' unsafe' → logprob: -5.43038272857666
    10. 'critical' → logprob: -5.55538272857666

Token 29: '")' (ID: 1405)
  Prédit: '")'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '")' → logprob: -3.2378600735682994e-05
    2. ')' → logprob: -10.375032424926758
    3. ')")' → logprob: -13.875032424926758
    4. '"' → logprob: -16.500032424926758
    5. '")
' → logprob: -16.500032424926758
    6. '')' → logprob: -18.375032424926758
    7. '");' → logprob: -18.875032424926758
    8. '}")' → logprob: -19.000032424926758
    9. '```' → logprob: -19.000032424926758
    10. '”)' → logprob: -19.500032424926758


RÉSUMÉ:
--------------------------------------------------------------------------------
Total des tokens analysés: 27
Tokens correctement prédits (1ère position, stricte): 9
Tokens correctement prédits (1ère position, avec adaptation): 10
Tokens correctement prédits (top 10): 21
Précision stricte (1ère position): 33.33%
Précision adaptée (1ère position): 37.04%
Précision (top 10): 77.78%
================================================================================
