================================================================================
ANALYSE DE PRÉDICTION TOKEN PAR TOKEN (BATCH API)
Date: 2025-06-04 19:38:37
Modèle de tokenisation: gpt-4o-mini
================================================================================

SCRIPT ANALYSÉ:
--------------------------------------------------------------------------------
import numpy as np
import math

n = int(input())
a = []
total = 0

for i in range(n):
    a.append(np.array(list(map(int, input().split()))))

for i in range(n):
    for s in range(i, n):
        total += np.linalg.norm(a[s] - a[i])

print(total * 2 / n)
--------------------------------------------------------------------------------

RÉSULTATS D'ANALYSE TOKEN PAR TOKEN:
--------------------------------------------------------------------------------
Token 0: 'import' (ID: 561)
  → Token d'amorce (pas de prédiction)

Token 1: ' numpy' (ID: 19529)
  → Token d'amorce (pas de prédiction)

Token 2: ' as' (ID: 472)
  → Token d'amorce (pas de prédiction)

Token 3: ' np' (ID: 5374)
  Prédit: ' np'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' np' → logprob: -0.001268685911782086
    2. 'np' → logprob: -6.8762688636779785
    3. ' ' → logprob: -8.50126838684082
    4. ' numpy' → logprob: -10.37626838684082
    5. ' ' → logprob: -14.00126838684082
    6. 'numpy' → logprob: -15.50126838684082
    7. '_np' → logprob: -15.87626838684082
    8. ' n' → logprob: -16.62626838684082
    9. ' npc' → logprob: -17.00126838684082
    10. '```' → logprob: -17.00126838684082

Token 4: '
' (ID: 198)
  Prédit: '.'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '.' → logprob: -0.009758921340107918
    2. 'import' → logprob: -6.134758949279785
    3. '\n' → logprob: -6.134758949279785
    4. 'newline' → logprob: -6.134758949279785
    5. '[' → logprob: -6.634758949279785
    6. '```' → logprob: -7.634758949279785
    7. '\' → logprob: -7.634758949279785
    8. '
' → logprob: -9.134758949279785
    9. '<|end|>' → logprob: -9.259758949279785
    10. '.import' → logprob: -9.384758949279785

Token 5: 'import' (ID: 561)
  Prédit: '.'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '.' → logprob: -0.9494209289550781
    2. '```' → logprob: -1.6994209289550781
    3. '\n' → logprob: -1.6994209289550781
    4. 'import' → logprob: -2.324420928955078
    5. '
' → logprob: -3.199420928955078
    6. 'newline' → logprob: -3.199420928955078
    7. '\' → logprob: -3.449420928955078
    8. '<|end|>' → logprob: -4.199420928955078
    9. '[' → logprob: -5.199420928955078
    10. '

' → logprob: -6.574420928955078

Token 6: ' math' (ID: 13324)
  Prédit: ' pandas'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' pandas' → logprob: -0.0008781121578067541
    2. 'p' → logprob: -7.75087833404541
    3. ' tensorflow' → logprob: -8.50087833404541
    4. ' scipy' → logprob: -8.75087833404541
    5. ' sys' → logprob: -10.12587833404541
    6. ' matplotlib' → logprob: -11.25087833404541
    7. ' math' → logprob: -11.37587833404541
    8. ' sklearn' → logprob: -11.62587833404541
    9. ' torch' → logprob: -12.62587833404541
    10. ' os' → logprob: -12.87587833404541

Token 7: '

' (ID: 279)
  Prédit: '.'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '.' → logprob: -0.3315433859825134
    2. '\n' → logprob: -1.7065434455871582
    3. '\' → logprob: -2.956543445587158
    4. '
' → logprob: -3.956543445587158
    5. '```' → logprob: -4.581543445587158
    6. '<|end|>' → logprob: -5.081543445587158
    7. '#' → logprob: -5.956543445587158
    8. 'import' → logprob: -5.956543445587158
    9. '(' → logprob: -6.831543445587158
    10. 'def' → logprob: -6.956543445587158

Token 8: 'n' (ID: 77)
  Prédit: '.'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '.' → logprob: -0.9815143346786499
    2. '\' → logprob: -1.48151433467865
    3. 'def' → logprob: -1.98151433467865
    4. '\n' → logprob: -1.98151433467865
    5. '```' → logprob: -2.6065144538879395
    6. '(' → logprob: -4.6065144538879395
    7. '#' → logprob: -5.1065144538879395
    8. '
' → logprob: -5.2315144538879395
    9. '`' → logprob: -5.6065144538879395
    10. 'import' → logprob: -5.7315144538879395

Token 9: ' =' (ID: 314)
  Prédit: 'p'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'p' → logprob: -0.0077522494830191135
    2. ' ' → logprob: -5.757752418518066
    3. '_' → logprob: -6.007752418518066
    4. 'umpy' → logprob: -6.882752418518066
    5. 'um' → logprob: -8.132752418518066
    6. '.' → logprob: -8.257752418518066
    7. ' =' → logprob: -8.632752418518066
    8. 'u' → logprob: -9.507752418518066
    9. '_p' → logprob: -9.507752418518066
    10. '=' → logprob: -9.757752418518066

Token 10: ' int' (ID: 677)
  Prédit: ' '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' ' → logprob: -0.012026621028780937
    2. '10' → logprob: -5.012026786804199
    3. ' int' → logprob: -5.637026786804199
    4. ' np' → logprob: -6.887026786804199
    5. 'int' → logprob: -8.1370267868042
    6. '5' → logprob: -8.6370267868042
    7. '100' → logprob: -9.2620267868042
    8. '20' → logprob: -10.1370267868042
    9. '1' → logprob: -10.2620267868042
    10. '0' → logprob: -11.1370267868042

Token 11: '(input' (ID: 10054)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '(' → logprob: -0.00010866894444916397
    2. ' (' → logprob: -9.50010871887207
    3. '('' → logprob: -11.87510871887207
    4. '()' → logprob: -12.00010871887207
    5. '(np' → logprob: -12.37510871887207
    6. '(n' → logprob: -12.75010871887207
    7. ' ' → logprob: -12.75010871887207
    8. '32' → logprob: -12.87510871887207
    9. '  ' → logprob: -13.75010871887207
    10. '(
' → logprob: -14.00010871887207

Token 12: '())
' (ID: 4574)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '(' → logprob: -0.10997939854860306
    2. '()' → logprob: -2.4849793910980225
    3. ')' → logprob: -4.734979629516602
    4. '('' → logprob: -4.859979629516602
    5. '())' → logprob: -5.859979629516602
    6. '("("' → logprob: -8.234979629516602
    7. '(()' → logprob: -8.359979629516602
    8. '(""))' → logprob: -8.359979629516602
    9. '("")' → logprob: -8.484979629516602
    10. '(
' → logprob: -8.609979629516602

Token 13: 'a' (ID: 64)
  Prédit: 'x'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'x' → logprob: -1.5261094570159912
    2. 'a' → logprob: -1.6511094570159912
    3. 'data' → logprob: -2.026109457015991
    4. ')' → logprob: -2.276109457015991
    5. 's' → logprob: -2.526109457015991
    6. 'arr' → logprob: -2.901109457015991
    7. 'for' → logprob: -2.901109457015991
    8. 'array' → logprob: -3.651109457015991
    9. '`' → logprob: -3.776109457015991
    10. ''' → logprob: -4.27610969543457

Token 14: ' =' (ID: 314)
  Prédit: '['
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '[' → logprob: -0.007669918239116669
    2. '[np' → logprob: -6.382669925689697
    3. '[n' → logprob: -6.757669925689697
    4. '.' → logprob: -6.882669925689697
    5. '[a' → logprob: -7.007669925689697
    6. '[i' → logprob: -7.757669925689697
    7. 'rray' → logprob: -7.757669925689697
    8. 'a' → logprob: -8.132669448852539
    9. ' ' → logprob: -8.382669448852539
    10. '_' → logprob: -8.882669448852539

Token 15: ' []
' (ID: 8911)
  Prédit: ' np'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' np' → logprob: -0.07898948341608047
    2. 'np' → logprob: -2.5789895057678223
    3. ' []' → logprob: -9.703989028930664
    4. ' list' → logprob: -11.328989028930664
    5. '[]' → logprob: -11.453989028930664
    6. '[np' → logprob: -11.578989028930664
    7. 'list' → logprob: -12.828989028930664
    8. ' [' → logprob: -13.453989028930664
    9. 'a' → logprob: -13.828989028930664
    10. ' ' → logprob: -14.578989028930664

Token 16: 'total' (ID: 9577)
  Prédit: 'for'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'for' → logprob: -0.020966434851288795
    2. ' for' → logprob: -3.8959665298461914
    3. '[' → logprob: -8.020966529846191
    4. '
' → logprob: -10.645966529846191
    5. ' 
' → logprob: -10.645966529846191
    6. '\n' → logprob: -11.520966529846191
    7. 'a' → logprob: -12.145966529846191
    8. ' ' → logprob: -12.270966529846191
    9. '```' → logprob: -12.520966529846191
    10. 'n' → logprob: -12.895966529846191

Token 17: ' =' (ID: 314)
  Prédit: '_'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_' → logprob: -0.0953957736492157
    2. '_sum' → logprob: -3.095395803451538
    3. ' =' → logprob: -3.595395803451538
    4. ' +=' → logprob: -5.345395565032959
    5. '=' → logprob: -5.595395565032959
    6. '.' → logprob: -5.845395565032959
    7. '_space' → logprob: -6.345395565032959
    8. ' ' → logprob: -6.345395565032959
    9. '.append' → logprob: -7.595395565032959
    10. 'sum' → logprob: -7.720395565032959

Token 18: ' ' (ID: 220)
  Prédit: ' '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' ' → logprob: -0.25193852186203003
    2. '0' → logprob: -1.5019385814666748
    3. 'a' → logprob: -13.001938819885254
    4. ' np' → logprob: -13.251938819885254
    5. ' a' → logprob: -13.751938819885254
    6. 'sum' → logprob: -13.876938819885254
    7. ' math' → logprob: -14.501938819885254
    8. ' sum' → logprob: -14.626938819885254
    9. 'np' → logprob: -15.001938819885254
    10. ' ' → logprob: -15.126938819885254

Token 19: '0' (ID: 15)
  Prédit: '0'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '0' → logprob: -0.00148307834751904
    2. ' ' → logprob: -6.751482963562012
    3. 'sum' → logprob: -8.626482963562012
    4. 'math' → logprob: -9.501482963562012
    5. 'a' → logprob: -10.876482963562012
    6. 'n' → logprob: -11.501482963562012
    7. ' sum' → logprob: -12.126482963562012
    8. 'int' → logprob: -12.126482963562012
    9. ' math' → logprob: -12.626482963562012
    10. '1' → logprob: -12.626482963562012

Token 20: '

' (ID: 279)
  Prédit: '
'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '
' → logprob: -0.6354184150695801
    2. 'for' → logprob: -0.8854184150695801
    3. ' 
' → logprob: -3.76041841506958
    4. ' for' → logprob: -3.76041841506958
    5. '\' → logprob: -5.63541841506958
    6. '\n' → logprob: -6.01041841506958
    7. '' → logprob: -6.51041841506958
    8. ' ' → logprob: -6.63541841506958
    9. '  
' → logprob: -7.13541841506958
    10. '<|end|>' → logprob: -7.38541841506958

Token 21: 'for' (ID: 1938)
  Prédit: 'for'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'for' → logprob: -3.416665640543215e-05
    2. '```' → logprob: -10.87503433227539
    3. ' for' → logprob: -11.12503433227539
    4. '
' → logprob: -15.25003433227539
    5. 'i' → logprob: -16.50003433227539
    6. '``' → logprob: -16.62503433227539
    7. '   ' → logprob: -18.00003433227539
    8. '	for' → logprob: -18.25003433227539
    9. '\' → logprob: -18.37503433227539
    10. '\n' → logprob: -18.50003433227539

Token 22: ' i' (ID: 575)
  Prédit: ' i'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' i' → logprob: -0.23162026703357697
    2. ' ' → logprob: -1.6066203117370605
    3. ' _' → logprob: -5.2316203117370605
    4. '_' → logprob: -7.4816203117370605
    5. 'i' → logprob: -8.856619834899902
    6. '  ' → logprob: -9.356619834899902
    7. ' ‌' → logprob: -10.606619834899902
    8. ' n' → logprob: -11.606619834899902
    9. ' ▁' → logprob: -12.981619834899902
    10. ' I' → logprob: -12.981619834899902

Token 23: ' in' (ID: 306)
  Prédit: ' in'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' in' → logprob: -0.020655058324337006
    2. 'in' → logprob: -3.8956551551818848
    3. ' ' → logprob: -9.145654678344727
    4. 'n' → logprob: -13.270654678344727
    5. 'range' → logprob: -13.645654678344727
    6. '```' → logprob: -14.770654678344727
    7. '  ' → logprob: -14.895654678344727
    8. ' i' → logprob: -15.145654678344727
    9. '_' → logprob: -15.145654678344727
    10. ' n' → logprob: -15.395654678344727

Token 24: ' range' (ID: 3352)
  Prédit: ' range'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' range' → logprob: -0.17975486814975739
    2. 'range' → logprob: -1.8047548532485962
    3. ' ' → logprob: -12.679755210876465
    4. 'a' → logprob: -13.429755210876465
    5. '	range' → logprob: -13.554755210876465
    6. 'n' → logprob: -14.554755210876465
    7. '  ' → logprob: -14.554755210876465
    8. '```' → logprob: -14.679755210876465
    9. ' a' → logprob: -14.929755210876465
    10. 'in' → logprob: -15.054755210876465

Token 25: '(n' (ID: 2406)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(' → logprob: -0.06695317476987839
    2. '(n' → logprob: -2.816953182220459
    3. ' (' → logprob: -5.316953182220459
    4. '(range' → logprob: -10.3169527053833
    5. ' ' → logprob: -11.5669527053833
    6. '(
' → logprob: -11.8169527053833
    7. ' n' → logprob: -12.1919527053833
    8. '(len' → logprob: -12.6919527053833
    9. 'n' → logprob: -13.5669527053833
    10. '(a' → logprob: -14.0669527053833

Token 26: '):
' (ID: 1883)
  Prédit: '):'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '):' → logprob: -0.0008928788010962307
    2. ')' → logprob: -7.3758931159973145
    3. ':' → logprob: -8.750892639160156
    4. '):
' → logprob: -9.750892639160156
    5. ' ):' → logprob: -10.500892639160156
    6. '+' → logprob: -10.875892639160156
    7. ',' → logprob: -14.125892639160156
    8. '):
' → logprob: -14.875892639160156
    9. ']:' → logprob: -15.125892639160156
    10. ' ' → logprob: -15.375892639160156

Token 27: '   ' (ID: 271)
  Prédit: ' a'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' a' → logprob: -0.12416406720876694
    2. 'a' → logprob: -3.12416410446167
    3. ' 
' → logprob: -3.62416410446167
    4. '   ' → logprob: -3.99916410446167
    5. '     
' → logprob: -4.74916410446167
    6. '    ' → logprob: -5.12416410446167
    7. '    
' → logprob: -5.12416410446167
    8. ' ' → logprob: -5.37416410446167
    9. '<|end|>' → logprob: -7.74916410446167
    10. ' s' → logprob: -8.124163627624512

Token 28: ' a' (ID: 261)
  Prédit: ' x'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' x' → logprob: -1.0616827011108398
    2. ' val' → logprob: -1.5616827011108398
    3. ' a' → logprob: -1.8116827011108398
    4. 'a' (adapté à ' a') → logprob: -2.56168270111084
    5. ' value' → logprob: -2.81168270111084
    6. 'x' → logprob: -2.93668270111084
    7. ' num' → logprob: -3.31168270111084
    8. 'value' → logprob: -4.18668270111084
    9. ' line' → logprob: -4.56168270111084
    10. 'num' → logprob: -4.68668270111084

Token 29: '.append' (ID: 3709)
  Prédit: '.append'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '.append' → logprob: -0.20143389701843262
    2. '.' → logprob: -1.7014338970184326
    3. '.app' → logprob: -11.826434135437012
    4. ' .' → logprob: -11.826434135437012
    5. '.ap' → logprob: -12.576434135437012
    6. '.extend' → logprob: -14.076434135437012
    7. 'append' → logprob: -14.951434135437012
    8. '.Append' → logprob: -15.201434135437012
    9. '​.' → logprob: -15.201434135437012
    10. '_append' → logprob: -15.951434135437012

Token 30: '(np' (ID: 21997)
  Prédit: '(int'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(int' → logprob: -0.11697965115308762
    2. '(' → logprob: -2.3669795989990234
    3. '(float' → logprob: -4.116979598999023
    4. '(list' → logprob: -8.741979598999023
    5. '(math' → logprob: -9.241979598999023
    6. '(np' → logprob: -10.116979598999023
    7. ' (' → logprob: -10.991979598999023
    8. '(tuple' → logprob: -11.991979598999023
    9. 'int' → logprob: -12.116979598999023
    10. '(i' → logprob: -12.866979598999023

Token 31: '.array' (ID: 14557)
  Prédit: '.random'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '.random' → logprob: -0.30421608686447144
    2. '.array' → logprob: -2.554216146469116
    3. '.' → logprob: -2.804216146469116
    4. '.sqrt' → logprob: -2.929216146469116
    5. '.sin' → logprob: -3.429216146469116
    6. '.log' → logprob: -4.429215908050537
    7. '.floor' → logprob: -4.929215908050537
    8. ' .' → logprob: -5.429215908050537
    9. '.zeros' → logprob: -6.179215908050537
    10. '.pi' → logprob: -6.179215908050537

Token 32: '(list' (ID: 13116)
  Prédit: '(list'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(list' → logprob: -0.5544673204421997
    2. '([' → logprob: -0.9294673204421997
    3. '(' → logprob: -3.55446720123291
    4. '(np' → logprob: -6.80446720123291
    5. '(input' → logprob: -8.05446720123291
    6. '(int' → logprob: -8.05446720123291
    7. '(float' → logprob: -8.67946720123291
    8. ' ([' → logprob: -9.42946720123291
    9. '(tuple' → logprob: -9.55446720123291
    10. '((' → logprob: -9.80446720123291

Token 33: '(map' (ID: 16946)
  Prédit: '(map'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(map' → logprob: -0.0006759775569662452
    2. '(' → logprob: -7.750676155090332
    3. '(input' → logprob: -8.375676155090332
    4. '(int' → logprob: -11.875676155090332
    5. 'map' → logprob: -12.875676155090332
    6. '(float' → logprob: -13.500676155090332
    7. '(np' → logprob: -13.625676155090332
    8. ' (' → logprob: -14.500676155090332
    9. ' map' → logprob: -14.750676155090332
    10. '((' → logprob: -15.000676155090332

Token 34: '(int' (ID: 2742)
  Prédit: '(int'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(int' → logprob: -0.001382974674925208
    2. '(float' → logprob: -6.876382827758789
    3. '(' → logprob: -8.001382827758789
    4. '(lambda' → logprob: -11.876382827758789
    5. '(str' → logprob: -13.126382827758789
    6. '(
' → logprob: -13.251382827758789
    7. ',int' → logprob: -13.751382827758789
    8. 'int' → logprob: -14.251382827758789
    9. '<int' → logprob: -14.251382827758789
    10. '=int' → logprob: -14.626382827758789

Token 35: ',' (ID: 11)
  Prédit: '(input'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(input' → logprob: -0.002895094221457839
    2. '(' → logprob: -6.252894878387451
    3. 'input' → logprob: -7.252894878387451
    4. ',input' → logprob: -8.50289535522461
    5. ' (' → logprob: -10.62789535522461
    6. ' input' → logprob: -11.50289535522461
    7. ')' → logprob: -11.87789535522461
    8. ')))' → logprob: -12.87789535522461
    9. '(
' → logprob: -13.12789535522461
    10. ',' → logprob: -13.37789535522461

Token 36: ' input' (ID: 3422)
  Prédit: 'input'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'input' → logprob: -0.016340624541044235
    2. ' input' → logprob: -4.141340732574463
    3. '(input' → logprob: -8.766340255737305
    4. 'list' → logprob: -9.266340255737305
    5. ' ' → logprob: -10.891340255737305
    6. ',input' → logprob: -11.516340255737305
    7. ')))' → logprob: -12.766340255737305
    8. '   ' → logprob: -12.766340255737305
    9. '<input' → logprob: -12.891340255737305
    10. ')' → logprob: -12.891340255737305

Token 37: '().' (ID: 1454)
  Prédit: '().'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '().' → logprob: -1.1994775377388578e-05
    2. '()' → logprob: -11.500012397766113
    3. ' ().' → logprob: -13.875012397766113
    4. '())))' → logprob: -15.125012397766113
    5. '(' → logprob: -15.625012397766113
    6. '()))' → logprob: -15.625012397766113
    7. '.split' → logprob: -16.750011444091797
    8. '('').' → logprob: -16.750011444091797
    9. '   ' → logprob: -17.250011444091797
    10. '()
' → logprob: -17.375011444091797

Token 38: 'split' (ID: 13627)
  Prédit: 'split'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'split' → logprob: -0.008938117884099483
    2. 'strip' → logprob: -4.758938312530518
    3. 'rstrip' → logprob: -8.63393783569336
    4. ' split' → logprob: -8.88393783569336
    5. '(split' → logprob: -12.50893783569336
    6. ' strip' → logprob: -13.25893783569336
    7. 'read' → logprob: -14.38393783569336
    8. ' ' → logprob: -15.25893783569336
    9. ')' → logprob: -15.25893783569336
    10. '.split' → logprob: -16.13393783569336

Token 39: '()))' (ID: 16829)
  Prédit: '()))'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '()))' → logprob: -0.5024397373199463
    2. '())))' → logprob: -1.2524397373199463
    3. '))))' → logprob: -2.7524397373199463
    4. '()' → logprob: -3.7524397373199463
    5. ')))' → logprob: -4.127439498901367
    6. '(' → logprob: -5.752439498901367
    7. '())' → logprob: -6.752439498901367
    8. '))' → logprob: -7.002439498901367
    9. '('' → logprob: -9.002439498901367
    10. '())))
' → logprob: -9.127439498901367

Token 40: '))

' (ID: 9746)
  Prédit: '))'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '))' → logprob: -0.014940553344786167
    2. ')' → logprob: -4.3899407386779785
    3. ')))' → logprob: -6.2649407386779785
    4. '   ' → logprob: -8.38994026184082
    5. '))
' → logprob: -8.51494026184082
    6. ' ))' → logprob: -9.88994026184082
    7. ' ' → logprob: -11.01494026184082
    8. '),' → logprob: -11.63994026184082
    9. '       ' → logprob: -12.13994026184082
    10. '()))' → logprob: -12.63994026184082

Token 41: 'for' (ID: 1938)
  Prédit: 'total'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'total' → logprob: -0.6023597717285156
    2. ' total' → logprob: -1.9773597717285156
    3. '
' → logprob: -2.1023597717285156
    4. '   ' → logprob: -2.8523597717285156
    5. '+' → logprob: -3.1023597717285156
    6. ' ' → logprob: -3.4773597717285156
    7. ')' → logprob: -4.352359771728516
    8. ' for' → logprob: -4.477359771728516
    9. '<|end|>' → logprob: -4.977359771728516
    10. 'for' → logprob: -5.102359771728516

Token 42: ' i' (ID: 575)
  Prédit: ' i'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' i' → logprob: -0.059771813452243805
    2. 'i' → logprob: -3.309771776199341
    3. ' a' → logprob: -4.05977201461792
    4. ' ' → logprob: -6.05977201461792
    5. 'a' → logprob: -7.30977201461792
    6. ' range' → logprob: -7.80977201461792
    7. '_' → logprob: -8.434771537780762
    8. ' _' → logprob: -9.684771537780762
    9. ' (' → logprob: -10.059771537780762
    10. 'range' → logprob: -10.184771537780762

Token 43: ' in' (ID: 306)
  Prédit: ' in'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' in' → logprob: -0.0439484529197216
    2. 'in' → logprob: -3.1689484119415283
    3. ' ' → logprob: -7.168948650360107
    4. '(' → logprob: -10.16894817352295
    5. 'range' → logprob: -10.29394817352295
    6. ',' → logprob: -11.29394817352295
    7. ')' → logprob: -11.29394817352295
    8. '  ' → logprob: -11.41894817352295
    9. 'n' → logprob: -11.54394817352295
    10. '(n' → logprob: -11.91894817352295

Token 44: ' range' (ID: 3352)
  Prédit: 'range'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'range' → logprob: -0.07166830450296402
    2. ' range' → logprob: -2.6966683864593506
    3. 'a' → logprob: -6.4466681480407715
    4. ' a' → logprob: -8.94666862487793
    5. '(range' → logprob: -12.32166862487793
    6. ' ' → logprob: -12.57166862487793
    7. '   ' → logprob: -13.69666862487793
    8. '  ' → logprob: -13.94666862487793
    9. '	range' → logprob: -13.94666862487793
    10. 'np' → logprob: -14.19666862487793

Token 45: '(n' (ID: 2406)
  Prédit: '(n'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(n' → logprob: -0.048938311636447906
    2. '(' → logprob: -3.048938274383545
    3. '(len' → logprob: -8.048938751220703
    4. ' (' → logprob: -10.798938751220703
    5. ' n' → logprob: -12.423938751220703
    6. '(s' → logprob: -13.298938751220703
    7. '(
' → logprob: -14.048938751220703
    8. '(a' → logprob: -14.173938751220703
    9. '(length' → logprob: -14.298938751220703
    10. '()' → logprob: -14.673938751220703

Token 46: '):
' (ID: 1883)
  Prédit: '):'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '):' → logprob: -0.030607784166932106
    2. '-' → logprob: -4.4056077003479
    3. '):
' → logprob: -4.5306077003479
    4. ')' → logprob: -6.0306077003479
    5. '+' → logprob: -6.2806077003479
    6. ' -' → logprob: -6.5306077003479
    7. ' ):' → logprob: -7.0306077003479
    8. ':' → logprob: -8.905608177185059
    9. '   ' → logprob: -9.155608177185059
    10. ' ' → logprob: -9.405608177185059

Token 47: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.028003886342048645
    2. ' total' → logprob: -4.528003692626953
    3. ' for' → logprob: -4.528003692626953
    4. '    ' → logprob: -5.903003692626953
    5. ' ' → logprob: -6.528003692626953
    6. '       ' → logprob: -7.778003692626953
    7. 'total' → logprob: -8.028003692626953
    8. 'for' → logprob: -8.028003692626953
    9. '```' → logprob: -8.403003692626953
    10. '	total' → logprob: -9.403003692626953

Token 48: ' for' (ID: 395)
  Prédit: ' total'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' total' → logprob: -0.1919908970594406
    2. ' for' → logprob: -2.316990852355957
    3. 'total' → logprob: -2.941990852355957
    4. 'for' (adapté à ' for') → logprob: -4.191990852355957
    5. '   ' → logprob: -5.191990852355957
    6. ' if' → logprob: -7.316990852355957
    7. ' ' → logprob: -7.316990852355957
    8. ' a' → logprob: -7.691990852355957
    9. 'if' → logprob: -8.816990852355957
    10. 'a' → logprob: -8.941990852355957

Token 49: ' s' (ID: 265)
  Prédit: ' j'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' j' → logprob: -0.03756316751241684
    2. 'j' → logprob: -3.7875630855560303
    3. ' range' → logprob: -4.537563323974609
    4. ' n' → logprob: -6.287563323974609
    5. 'range' → logprob: -6.787563323974609
    6. 'n' → logprob: -7.912563323974609
    7. ' ' → logprob: -9.66256332397461
    8. '    ' → logprob: -10.66256332397461
    9. '   ' → logprob: -11.41256332397461
    10. '_j' → logprob: -12.16256332397461

Token 50: ' in' (ID: 306)
  Prédit: ' in'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' in' → logprob: -0.005162127781659365
    2. 'in' → logprob: -5.880162239074707
    3. 'e' → logprob: -8.005162239074707
    4. 'um' → logprob: -8.130162239074707
    5. 'n' → logprob: -8.380162239074707
    6. 't' → logprob: -8.630162239074707
    7. 'ize' → logprob: -8.630162239074707
    8. ' i' → logprob: -8.755162239074707
    9. '   ' → logprob: -9.130162239074707
    10. ' ' → logprob: -9.630162239074707

Token 51: ' range' (ID: 3352)
  Prédit: 'range'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'range' → logprob: -0.1329389214515686
    2. ' range' → logprob: -2.757938861846924
    3. 'a' → logprob: -2.882938861846924
    4. ' a' → logprob: -5.382938861846924
    5. '[' → logprob: -9.007939338684082
    6. ' ' → logprob: -9.382939338684082
    7. '[a' → logprob: -9.632939338684082
    8. 'np' → logprob: -9.757939338684082
    9. '(range' → logprob: -10.257939338684082
    10. ' [' → logprob: -10.882939338684082

Token 52: '(i' (ID: 3649)
  Prédit: '(n'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(n' → logprob: -0.147434264421463
    2. '(' → logprob: -2.7724342346191406
    3. '(i' → logprob: -2.8974342346191406
    4. '(len' → logprob: -4.022434234619141
    5. '(a' → logprob: -7.147434234619141
    6. '(total' → logprob: -8.27243423461914
    7. '(int' → logprob: -9.14743423461914
    8. ' (' → logprob: -9.64743423461914
    9. '((' → logprob: -9.64743423461914
    10. '(math' → logprob: -10.14743423461914

Token 53: ',' (ID: 11)
  Prédit: '+'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '+' → logprob: -0.12109773606061935
    2. ',' → logprob: -2.7460978031158447
    3. ' +' → logprob: -3.1210978031158447
    4. ',n' → logprob: -5.746097564697266
    5. ' ,' → logprob: -7.121097564697266
    6. '   ' → logprob: -7.246097564697266
    7. '+n' → logprob: -8.371097564697266
    8. ')' → logprob: -8.496097564697266
    9. '):' → logprob: -8.621097564697266
    10. '-' → logprob: -9.246097564697266

Token 54: ' n' (ID: 297)
  Prédit: 'n'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'n' → logprob: -0.007620233576744795
    2. ' n' → logprob: -4.882620334625244
    3. '   ' → logprob: -12.132619857788086
    4. 'i' → logprob: -13.007619857788086
    5. ' ' → logprob: -13.507619857788086
    6. '	n' → logprob: -13.632619857788086
    7. '(n' → logprob: -14.257619857788086
    8. ')' → logprob: -14.632619857788086
    9. ')n' → logprob: -15.007619857788086
    10. ',n' → logprob: -15.132619857788086

Token 55: '):
' (ID: 1883)
  Prédit: '):'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '):' → logprob: -0.009248096495866776
    2. '):
' → logprob: -4.75924825668335
    3. '+' → logprob: -7.50924825668335
    4. ':' → logprob: -10.259247779846191
    5. ' ):' → logprob: -11.009247779846191
    6. ')' → logprob: -11.134247779846191
    7. ',' → logprob: -11.884247779846191
    8. '):
' → logprob: -12.634247779846191
    9. '):

' → logprob: -13.009247779846191
    10. '   ' → logprob: -13.384247779846191

Token 56: '       ' (ID: 309)
  Prédit: '       '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '       ' → logprob: -0.02684985287487507
    2. ':' → logprob: -5.151849746704102
    3. ' if' → logprob: -5.401849746704102
    4. '+' → logprob: -5.901849746704102
    5. ' ' → logprob: -6.026849746704102
    6. '   ' → logprob: -6.026849746704102
    7. '[' → logprob: -6.401849746704102
    8. ' +' → logprob: -7.151849746704102
    9. ' total' → logprob: -7.151849746704102
    10. ')' → logprob: -7.276849746704102

Token 57: ' total' (ID: 3609)
  Prédit: ' if'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' if' → logprob: -0.8412206172943115
    2. '           ' → logprob: -1.2162206172943115
    3. ' total' → logprob: -1.5912206172943115
    4. ' ' → logprob: -3.9662206172943115
    5. '       ' → logprob: -3.9662206172943115
    6. 'if' → logprob: -4.591220855712891
    7. 'total' (adapté à ' total') → logprob: -4.841220855712891
    8. '   ' → logprob: -5.466220855712891
    9. '            ' → logprob: -6.841220855712891
    10. '```' → logprob: -6.966220855712891

Token 58: ' +=' (ID: 2757)
  Prédit: ' +='
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' +=' → logprob: -0.4798711836338043
    2. '+=' → logprob: -0.9798711538314819
    3. '+' → logprob: -5.2298712730407715
    4. '=' → logprob: -8.604870796203613
    5. '+=(' → logprob: -9.104870796203613
    6. ' +' → logprob: -10.229870796203613
    7. ' =' → logprob: -10.229870796203613
    8. ' ' → logprob: -11.354870796203613
    9. ']+=' → logprob: -11.604870796203613
    10. '   ' → logprob: -11.854870796203613

Token 59: ' np' (ID: 5374)
  Prédit: 'np'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'np' → logprob: -0.35272514820098877
    2. 'math' → logprob: -1.3527251482009888
    3. ' np' → logprob: -3.602725028991699
    4. ' math' → logprob: -5.477725028991699
    5. 'abs' → logprob: -5.977725028991699
    6. 'int' → logprob: -6.727725028991699
    7. 'a' → logprob: -7.102725028991699
    8. '(np' → logprob: -7.102725028991699
    9. 'max' → logprob: -7.227725028991699
    10. '(math' → logprob: -8.4777250289917

Token 60: '.linalg' (ID: 89912)
  Prédit: '.dot'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '.dot' → logprob: -0.0494433231651783
    2. '.linalg' → logprob: -3.174443244934082
    3. '.v' → logprob: -5.424443244934082
    4. '.inner' → logprob: -6.924443244934082
    5. '.sum' → logprob: -7.799443244934082
    6. '.abs' → logprob: -7.924443244934082
    7. '.cross' → logprob: -10.424443244934082
    8. 'dot' → logprob: -10.549443244934082
    9. '.sqrt' → logprob: -10.549443244934082
    10. '.t' → logprob: -10.674443244934082

Token 61: '.norm' (ID: 73834)
  Prédit: '.norm'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '.norm' → logprob: -1.676292231422849e-05
    2. '.' → logprob: -12.000017166137695
    3. '.det' → logprob: -12.125017166137695
    4. '.n' → logprob: -13.000017166137695
    5. '.linalg' → logprob: -14.250017166137695
    6. '_norm' → logprob: -14.750017166137695
    7. '.inv' → logprob: -14.875017166137695
    8. '.s' → logprob: -15.125017166137695
    9. '.solve' → logprob: -15.500017166137695
    10. '.multi' → logprob: -15.750017166137695

Token 62: '(a' (ID: 6271)
  Prédit: '(a'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(a' → logprob: -0.0012297539506107569
    2. '(' → logprob: -6.751229763031006
    3. ' (' → logprob: -10.751229286193848
    4. 'a' → logprob: -10.876229286193848
    5. '(np' → logprob: -11.751229286193848
    6. '((' → logprob: -11.876229286193848
    7. '(s' → logprob: -13.876229286193848
    8. '(
' → logprob: -13.876229286193848
    9. ' a' → logprob: -14.501229286193848
    10. '(i' → logprob: -14.501229286193848

Token 63: '[s' (ID: 24177)
  Prédit: '[s'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '[s' → logprob: -0.01007313933223486
    2. '[i' → logprob: -4.635073184967041
    3. 's' → logprob: -8.885072708129883
    4. '[' → logprob: -9.510072708129883
    5. '[a' → logprob: -10.135072708129883
    6. '[
' → logprob: -11.760072708129883
    7. ')[' → logprob: -11.760072708129883
    8. '[j' → logprob: -11.885072708129883
    9. ' [' → logprob: -12.385072708129883
    10. ')' → logprob: -12.385072708129883

Token 64: ']' (ID: 60)
  Prédit: '-'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '-' → logprob: -0.6575144529342651
    2. ' -' → logprob: -1.0325144529342651
    3. ']' → logprob: -2.1575145721435547
    4. '[i' → logprob: -5.407514572143555
    5. '[' → logprob: -5.657514572143555
    6. ']-' → logprob: -6.782514572143555
    7. ')' → logprob: -7.782514572143555
    8. ' ' → logprob: -8.907514572143555
    9. '   ' → logprob: -9.032514572143555
    10. ' ]' → logprob: -9.532514572143555

Token 65: ' -' (ID: 533)
  Prédit: '-'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '-' → logprob: -0.3487539291381836
    2. ' -' → logprob: -1.2237539291381836
    3. '-a' → logprob: -9.348753929138184
    4. '[' → logprob: -9.973753929138184
    5. ')' → logprob: -10.098753929138184
    6. '-n' → logprob: -10.598753929138184
    7. ' ' → logprob: -11.098753929138184
    8. '   ' → logprob: -11.223753929138184
    9. '-i' → logprob: -11.598753929138184
    10. '-ai' → logprob: -11.598753929138184

Token 66: ' a' (ID: 261)
  Prédit: 'a'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'a' → logprob: -0.05490710586309433
    2. ' a' → logprob: -2.9299070835113525
    3. '	a' → logprob: -10.929906845092773
    4. ' ' → logprob: -12.929906845092773
    5. '   ' → logprob: -13.304906845092773
    6. '  ' → logprob: -15.179906845092773
    7. '>a' → logprob: -15.179906845092773
    8. '_a' → logprob: -15.304906845092773
    9. ''a' → logprob: -15.304906845092773
    10. 'np' → logprob: -15.304906845092773

Token 67: '[i' (ID: 1768)
  Prédit: '[i'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '[i' → logprob: -7.3458322731312364e-06
    2. '[s' → logprob: -12.375007629394531
    3. 'i' → logprob: -13.625007629394531
    4. '[' → logprob: -13.875007629394531
    5. '[a' → logprob: -15.125007629394531
    6. '[j' → logprob: -15.250007629394531
    7. ' [' → logprob: -16.50000762939453
    8. '[
' → logprob: -16.62500762939453
    9. '[n' → logprob: -17.50000762939453
    10. '   ' → logprob: -17.62500762939453

Token 68: '])

' (ID: 21045)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ')' → logprob: -0.15611329674720764
    2. '))' → logprob: -2.031113386154175
    3. '])' → logprob: -4.781113147735596
    4. ')**' → logprob: -5.531113147735596
    5. '})' → logprob: -8.031113624572754
    6. ')))' → logprob: -8.656113624572754
    7. '),' → logprob: -9.031113624572754
    8. ' )' → logprob: -9.156113624572754
    9. ')
' → logprob: -9.531113624572754
    10. '**' → logprob: -10.156113624572754

Token 69: 'print' (ID: 1598)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')' → logprob: -0.5706859827041626
    2. '<|end|>' → logprob: -1.5706859827041626
    3. 'print' → logprob: -2.070685863494873
    4. '\n' → logprob: -3.320685863494873
    5. '
' → logprob: -3.945685863494873
    6. '```' → logprob: -4.445685863494873
    7. '*' → logprob: -4.570685863494873
    8. '+' → logprob: -4.695685863494873
    9. ' ' → logprob: -5.820685863494873
    10. '#' → logprob: -6.070685863494873

Token 70: '(total' (ID: 39744)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(' → logprob: -0.006253684870898724
    2. '(total' → logprob: -5.131253719329834
    3. '()' → logprob: -8.131253242492676
    4. '('' → logprob: -10.881253242492676
    5. '(sum' → logprob: -13.006253242492676
    6. 'total' → logprob: -13.131253242492676
    7. '("("' → logprob: -13.631253242492676
    8. ' (' → logprob: -13.756253242492676
    9. '(`' → logprob: -14.006253242492676
    10. '(
' → logprob: -14.006253242492676

Token 71: ' *' (ID: 425)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ')' → logprob: -6.392202976712724e-06
    2. ' )' → logprob: -12.125006675720215
    3. '))' → logprob: -14.500006675720215
    4. '+' → logprob: -16.3750057220459
    5. '**' → logprob: -16.6250057220459
    6. ')**' → logprob: -16.7500057220459
    7. ')
' → logprob: -16.8750057220459
    8. '）' → logprob: -17.1250057220459
    9. ')`' → logprob: -17.2500057220459
    10. '*' → logprob: -17.3750057220459

Token 72: ' ' (ID: 220)
  Prédit: ' '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' ' → logprob: -0.5462658405303955
    2. '0' → logprob: -1.2962658405303955
    3. '2' → logprob: -1.9212658405303955
    4. '1' → logprob: -8.546265602111816
    5. ' (' → logprob: -8.796265602111816
    6. ')' → logprob: -8.921265602111816
    7. ' n' → logprob: -9.046265602111816
    8. '3' → logprob: -9.546265602111816
    9. ' math' → logprob: -9.796265602111816
    10. '(' → logprob: -10.046265602111816

Token 73: '2' (ID: 17)
  Prédit: '2'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '2' → logprob: -0.08411829173564911
    2. '0' → logprob: -2.584118366241455
    3. ' ' → logprob: -5.334118366241455
    4. '1' → logprob: -8.584117889404297
    5. '.' → logprob: -9.959117889404297
    6. '(' → logprob: -9.959117889404297
    7. '3' → logprob: -9.959117889404297
    8. 'math' → logprob: -11.584117889404297
    9. ' math' → logprob: -12.021617889404297
    10. '   ' → logprob: -12.334117889404297

Token 74: ' /' (ID: 820)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ')' → logprob: -1.652451464906335e-05
    2. ' )' → logprob: -11.250016212463379
    3. '))' → logprob: -13.000016212463379
    4. ')
' → logprob: -14.500016212463379
    5. ')`' → logprob: -15.375016212463379
    6. '*' → logprob: -15.750016212463379
    7. '`)' → logprob: -15.875016212463379
    8. '**' → logprob: -16.125017166137695
    9. '）' → logprob: -16.625017166137695
    10. '*)' → logprob: -17.500017166137695

Token 75: ' n' (ID: 297)
  Prédit: '(n'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(n' → logprob: -0.634334921836853
    2. 'n' → logprob: -0.759334921836853
    3. '(' → logprob: -6.759335041046143
    4. '((' → logprob: -8.134334564208984
    5. ' (' → logprob: -8.884334564208984
    6. ' n' → logprob: -9.634334564208984
    7. '(math' → logprob: -10.134334564208984
    8. 'math' → logprob: -11.634334564208984
    9. ')' → logprob: -11.759334564208984
    10. ')n' → logprob: -12.134334564208984

Token 76: ')' (ID: 8)
  Prédit: ')'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')' → logprob: -2.451116051815916e-05
    2. ' )' → logprob: -11.125024795532227
    3. ')
' → logprob: -12.500024795532227
    4. '))' → logprob: -12.750024795532227
    5. '**' → logprob: -14.000024795532227
    6. '```' → logprob: -14.750024795532227
    7. '`)' → logprob: -14.875024795532227
    8. ')`' → logprob: -15.500024795532227
    9. '）' → logprob: -15.750024795532227
    10. '*' → logprob: -15.875024795532227


RÉSUMÉ:
--------------------------------------------------------------------------------
Total des tokens analysés: 74
Tokens correctement prédits (1ère position, stricte): 28
Tokens correctement prédits (1ère position, avec adaptation): 28
Tokens correctement prédits (top 10): 61
Précision stricte (1ère position): 37.84%
Précision adaptée (1ère position): 37.84%
Précision (top 10): 82.43%
================================================================================
