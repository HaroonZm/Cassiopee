================================================================================
ANALYSE DE PRÉDICTION TOKEN PAR TOKEN (BATCH API)
Date: 2025-06-04 20:16:23
Modèle de tokenisation: gpt-4o-mini
================================================================================

SCRIPT ANALYSÉ:
--------------------------------------------------------------------------------
N = int(input(' '))

def calc1(n):
    if n <= 999: return 'ABC'
    else: return 'ABD'

class Dispatcher:
    def __init__(self, func):
        self.func = func
    def dispatch(self, x):
        return self.func(x)

dispatcher = Dispatcher(lambda z: calc1(z))
print((lambda d, val: d.dispatch(val))(dispatcher, N))
--------------------------------------------------------------------------------

RÉSULTATS D'ANALYSE TOKEN PAR TOKEN:
--------------------------------------------------------------------------------
Token 0: 'N' (ID: 45)
  → Token d'amorce (pas de prédiction)

Token 1: ' =' (ID: 314)
  → Token d'amorce (pas de prédiction)

Token 2: ' int' (ID: 677)
  → Token d'amorce (pas de prédiction)

Token 3: '(input' (ID: 10054)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(' → logprob: -0.00035786881926469505
    2. '('' → logprob: -8.750357627868652
    3. '(N' → logprob: -9.125357627868652
    4. ''' → logprob: -11.000357627868652
    5. '(input' → logprob: -11.125357627868652
    6. '(
' → logprob: -11.250357627868652
    7. '()' → logprob: -11.375357627868652
    8. '("("' → logprob: -11.375357627868652
    9. '```' → logprob: -12.125357627868652
    10. '(`' → logprob: -12.375357627868652

Token 4: '('' (ID: 706)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '(' → logprob: -0.5316423177719116
    2. ')' → logprob: -0.9066423177719116
    3. '()' → logprob: -5.156642436981201
    4. '())' → logprob: -6.656642436981201
    5. '(
' → logprob: -7.656642436981201
    6. '```' → logprob: -8.781641960144043
    7. '))' → logprob: -8.906641960144043
    8. '")' → logprob: -9.406641960144043
    9. '')' → logprob: -9.531641960144043
    10. '(

' → logprob: -9.906641960144043

Token 5: ' '' (ID: 461)
  Prédit: 'Enter'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'Enter' → logprob: -0.5402432680130005
    2. 'Number' → logprob: -2.040243148803711
    3. ''))' → logprob: -2.290243148803711
    4. '))' → logprob: -2.665243148803711
    5. 'How' → logprob: -2.665243148803711
    6. 'Please' → logprob: -3.540243148803711
    7. 'number' → logprob: -5.290243148803711
    8. ''' → logprob: -5.790243148803711
    9. '>' → logprob: -6.165243148803711
    10. '"))' → logprob: -6.790243148803711

Token 6: '))

' (ID: 9746)
  Prédit: '))'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '))' → logprob: -0.31738853454589844
    2. ''))' → logprob: -1.8173885345458984
    3. ')' → logprob: -2.3173885345458984
    4. ''' → logprob: -5.692388534545898
    5. '(' → logprob: -5.692388534545898
    6. '"))' → logprob: -6.192388534545898
    7. '('' → logprob: -7.067388534545898
    8. '>' → logprob: -8.067388534545898
    9. '')' → logprob: -8.442388534545898
    10. 'N' → logprob: -8.817388534545898

Token 7: 'def' (ID: 1314)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ')' → logprob: -0.465854674577713
    2. '+' → logprob: -1.4658546447753906
    3. '\n' → logprob: -2.9658546447753906
    4. 'if' → logprob: -3.0908546447753906
    5. '*' → logprob: -4.340854644775391
    6. '**' → logprob: -4.590854644775391
    7. '#' → logprob: -5.090854644775391
    8. '>' → logprob: -5.840854644775391
    9. '+
' → logprob: -6.340854644775391
    10. ' if' → logprob: -6.965854644775391

Token 8: ' calc' (ID: 25691)
  Prédit: ' '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' ' → logprob: -0.017432313412427902
    2. ' factorial' → logprob: -4.76743221282959
    3. ' f' → logprob: -5.26743221282959
    4. ''' → logprob: -7.76743221282959
    5. ' max' → logprob: -7.76743221282959
    6. ' space' → logprob: -7.76743221282959
    7. ' sum' → logprob: -8.14243221282959
    8. 'f' → logprob: -8.39243221282959
    9. ' calculate' → logprob: -8.51743221282959
    10. ' process' → logprob: -8.51743221282959

Token 9: '1' (ID: 16)
  Prédit: 'ulate'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'ulate' → logprob: -0.4605841040611267
    2. 'ulator' → logprob: -2.0855841636657715
    3. '_sum' → logprob: -2.7105841636657715
    4. '_factor' → logprob: -2.8355841636657715
    5. '_area' → logprob: -3.3355841636657715
    6. 'ulation' → logprob: -3.9605841636657715
    7. '(' → logprob: -4.2105841636657715
    8. 'ul' → logprob: -4.8355841636657715
    9. '_' → logprob: -4.9605841636657715
    10. '('' → logprob: -5.3355841636657715

Token 10: '(n' (ID: 2406)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '(' → logprob: -0.007240279112011194
    2. '_' → logprob: -5.632240295410156
    3. '('' → logprob: -5.757240295410156
    4. ')' → logprob: -8.257240295410156
    5. ' (' → logprob: -9.757240295410156
    6. ':' → logprob: -10.757240295410156
    7. '(a' → logprob: -10.757240295410156
    8. '('_' → logprob: -10.757240295410156
    9. '):' → logprob: -11.007240295410156
    10. '(
' → logprob: -11.882240295410156

Token 11: '):
' (ID: 1883)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ')' → logprob: -0.4299505949020386
    2. '):' → logprob: -1.0549505949020386
    3. ':' → logprob: -8.429950714111328
    4. ' ' → logprob: -8.679950714111328
    5. ' ):' → logprob: -8.679950714111328
    6. '*' → logprob: -8.804950714111328
    7. ' )' → logprob: -9.054950714111328
    8. '+' → logprob: -9.804950714111328
    9. '**' → logprob: -9.929950714111328
    10. '(' → logprob: -10.054950714111328

Token 12: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.010037725791335106
    2. ' ' → logprob: -5.010037899017334
    3. ' return' → logprob: -7.010037899017334
    4. 'r' → logprob: -7.635037899017334
    5. '    ' → logprob: -8.260037422180176
    6. '    
' → logprob: -8.510037422180176
    7. '\t' → logprob: -8.635037422180176
    8. 'i' → logprob: -8.760037422180176
    9. 'return' → logprob: -8.885037422180176
    10. '  ' → logprob: -8.885037422180176

Token 13: ' if' (ID: 538)
  Prédit: 'r'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'r' → logprob: -0.60013347864151
    2. ' ' → logprob: -1.7251334190368652
    3. '   ' → logprob: -1.7251334190368652
    4. 'i' → logprob: -3.8501334190368652
    5. ' return' → logprob: -4.225133419036865
    6. 'return' → logprob: -4.725133419036865
    7. 's' → logprob: -4.850133419036865
    8. ' r' → logprob: -5.225133419036865
    9. '    ' → logprob: -5.350133419036865
    10. 'c' → logprob: -5.475133419036865

Token 14: ' n' (ID: 297)
  Prédit: ' n'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' n' → logprob: -0.0022669474128633738
    2. 'n' → logprob: -6.252266883850098
    3. ' ' → logprob: -8.002266883850098
    4. ' not' → logprob: -12.877266883850098
    5. ' ' → logprob: -14.752266883850098
    6. '	n' → logprob: -15.502266883850098
    7. ' N' → logprob: -16.002267837524414
    8. ' (' → logprob: -16.127267837524414
    9. '   ' → logprob: -17.127267837524414
    10. ' )' → logprob: -17.252267837524414

Token 15: ' <=' (ID: 5017)
  Prédit: ' >'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' >' → logprob: -0.757291853427887
    2. ' %' → logprob: -1.7572917938232422
    3. '%' → logprob: -2.007291793823242
    4. ' ==' → logprob: -2.632291793823242
    5. ' <=' → logprob: -2.882291793823242
    6. ' ' → logprob: -3.757291793823242
    7. ' <' → logprob: -3.757291793823242
    8. '>' → logprob: -3.882291793823242
    9. ' >=' → logprob: -4.132291793823242
    10. '==' → logprob: -4.882291793823242

Token 16: ' ' (ID: 220)
  Prédit: ' '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' ' → logprob: -0.05577515438199043
    2. '1' → logprob: -2.9307751655578613
    3. '0' → logprob: -7.055775165557861
    4. '10' → logprob: -11.430774688720703
    5. '2' → logprob: -11.555774688720703
    6. '5' → logprob: -12.930774688720703
    7. '3' → logprob: -13.055774688720703
    8. '  ' → logprob: -13.430774688720703
    9. '20' → logprob: -13.805774688720703
    10. '4' → logprob: -14.680774688720703

Token 17: '999' (ID: 9130)
  Prédit: '1'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '1' → logprob: -0.06973510980606079
    2. '0' → logprob: -3.194735050201416
    3. ' ' → logprob: -3.694735050201416
    4. '10' → logprob: -7.069735050201416
    5. '5' → logprob: -8.319735527038574
    6. '2' → logprob: -8.444735527038574
    7. '3' → logprob: -9.319735527038574
    8. '4' → logprob: -10.569735527038574
    9. '20' → logprob: -10.569735527038574
    10. '100' → logprob: -11.194735527038574

Token 18: ':' (ID: 25)
  Prédit: ':'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ':' → logprob: -0.0014222568133845925
    2. ' and' → logprob: -7.25142240524292
    3. ' :' → logprob: -7.87642240524292
    4. ':
' → logprob: -8.876421928405762
    5. ':return' → logprob: -9.376421928405762
    6. '0' → logprob: -10.501421928405762
    7. '9' → logprob: -10.626421928405762
    8. '):' → logprob: -10.751421928405762
    9. 'and' → logprob: -11.876421928405762
    10. ' or' → logprob: -12.501421928405762

Token 19: ' return' (ID: 622)
  Prédit: '       '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '       ' → logprob: -0.502101480960846
    2. '\n' → logprob: -1.3771014213562012
    3. '   ' → logprob: -3.627101421356201
    4. ':' → logprob: -3.752101421356201
    5. '    ' → logprob: -3.752101421356201
    6. ' 
' → logprob: -3.877101421356201
    7. ' ' → logprob: -4.377101421356201
    8. '\' → logprob: -4.377101421356201
    9. ' return' → logprob: -5.502101421356201
    10. '<|end|>' → logprob: -6.127101421356201

Token 20: ' '' (ID: 461)
  Prédit: ' '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' ' → logprob: -0.4011945128440857
    2. ' n' → logprob: -1.9011945724487305
    3. ' None' → logprob: -2.7761945724487305
    4. 'n' → logprob: -2.7761945724487305
    5. '0' → logprob: -3.6511945724487305
    6. 'None' → logprob: -4.5261945724487305
    7. '1' → logprob: -4.6511945724487305
    8. '<|end|>' → logprob: -6.1511945724487305
    9. ' 
' → logprob: -6.2761945724487305
    10. '100' → logprob: -6.5261945724487305

Token 21: 'ABC' (ID: 44197)
  Prédit: '0'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '0' → logprob: -1.219195008277893
    2. '1' → logprob: -1.844195008277893
    3. '100' → logprob: -2.2191948890686035
    4. '999' → logprob: -2.4691948890686035
    5. ''' → logprob: -2.7191948890686035
    6. 'n' → logprob: -2.8441948890686035
    7. '000' → logprob: -3.0941948890686035
    8. ' ' → logprob: -3.9691948890686035
    9. 'str' → logprob: -4.4691948890686035
    10. ' '' → logprob: -4.4691948890686035

Token 22: ''
' (ID: 2207)
  Prédit: '''
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ''' → logprob: -0.0012349952012300491
    2. 'def' → logprob: -7.751235008239746
    3. 'D' → logprob: -7.876235008239746
    4. 'DE' → logprob: -9.501235008239746
    5. '123' → logprob: -9.501235008239746
    6. 'DEF' → logprob: -10.126235008239746
    7. '\n' → logprob: -10.376235008239746
    8. 'A' → logprob: -10.501235008239746
    9. '')' → logprob: -10.751235008239746
    10. ' '' → logprob: -10.751235008239746

Token 23: '   ' (ID: 271)
  Prédit: ':'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ':' → logprob: -1.050827980041504
    2. '<|end|>' → logprob: -1.300827980041504
    3. '
' → logprob: -2.300827980041504
    4. 'else' → logprob: -3.050827980041504
    5. ' else' → logprob: -3.300827980041504
    6. '   ' → logprob: -3.300827980041504
    7. ')' → logprob: -3.550827980041504
    8. '    
' → logprob: -3.550827980041504
    9. 'elif' → logprob: -4.050827980041504
    10. '\n' → logprob: -4.425827980041504

Token 24: ' else' (ID: 1203)
  Prédit: '
'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '
' → logprob: -0.7404327988624573
    2. ':' → logprob: -1.6154327392578125
    3. '<|end|>' → logprob: -2.8654327392578125
    4. '    
' → logprob: -3.1154327392578125
    5. 'else' (adapté à ' else') → logprob: -3.2404327392578125
    6. '   ' → logprob: -3.4904327392578125
    7. '\n' → logprob: -3.4904327392578125
    8. '  
' → logprob: -3.7404327392578125
    9. ')' → logprob: -4.1154327392578125
    10. ' ' → logprob: -4.3654327392578125

Token 25: ':' (ID: 25)
  Prédit: ':'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ':' → logprob: -0.023901352658867836
    2. ' :' → logprob: -4.523901462554932
    3. ' return' → logprob: -5.398901462554932
    4. '       ' → logprob: -6.023901462554932
    5. '   ' → logprob: -6.398901462554932
    6. '    ' → logprob: -6.398901462554932
    7. ' '' → logprob: -7.773901462554932
    8. ':return' → logprob: -7.773901462554932
    9. ' ' → logprob: -8.148900985717773
    10. ':
' → logprob: -8.398900985717773

Token 26: ' return' (ID: 622)
  Prédit: '''
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ''' → logprob: -0.3427298069000244
    2. ' '' → logprob: -1.3427298069000244
    3. ' return' → logprob: -4.467729568481445
    4. ' ' → logprob: -5.092729568481445
    5. ''\' → logprob: -5.592729568481445
    6. ' '\' → logprob: -6.342729568481445
    7. '"' → logprob: -6.842729568481445
    8. ' None' → logprob: -7.217729568481445
    9. 'return' → logprob: -7.217729568481445
    10. '   ' → logprob: -7.467729568481445

Token 27: ' '' (ID: 461)
  Prédit: '''
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ''' → logprob: -0.08036141842603683
    2. ' '' → logprob: -2.5803613662719727
    3. '"' → logprob: -7.205361366271973
    4. '''' → logprob: -8.455361366271973
    5. ' ' → logprob: -8.580361366271973
    6. ' None' → logprob: -9.455361366271973
    7. '`' → logprob: -10.705361366271973
    8. ''A' → logprob: -10.767861366271973
    9. ' ''' → logprob: -11.017861366271973
    10. ' True' → logprob: -11.142861366271973

Token 28: 'ABD' (ID: 193992)
  Prédit: 'XYZ'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'XYZ' → logprob: -0.5172317624092102
    2. 'DEF' → logprob: -1.1422317028045654
    3. 'C' → logprob: -4.5172319412231445
    4. ' XYZ' → logprob: -4.6422319412231445
    5. 'ABC' → logprob: -5.0172319412231445
    6. ''' → logprob: -5.0172319412231445
    7. 'BCD' → logprob: -5.1422319412231445
    8. ' DEF' → logprob: -5.1422319412231445
    9. 'ABD' → logprob: -5.6422319412231445
    10. '123' → logprob: -5.7047319412231445

Token 29: ''

' (ID: 7497)
  Prédit: '''
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ''' → logprob: -7.302704761968926e-05
    2. '\n' → logprob: -11.000073432922363
    3. ''
' → logprob: -11.000073432922363
    4. '')' → logprob: -11.250073432922363
    5. ''''' → logprob: -12.000073432922363
    6. ' '' → logprob: -12.125073432922363
    7. '```' → logprob: -13.125073432922363
    8. 'A' → logprob: -13.250073432922363
    9. ''C' → logprob: -13.250073432922363
    10. ''A' → logprob: -13.375073432922363

Token 30: 'class' (ID: 1444)
  Prédit: '
'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '
' → logprob: -0.6785508394241333
    2. ')' → logprob: -2.1785507202148438
    3. '<|end|>' → logprob: -2.3035507202148438
    4. '\n' → logprob: -2.6785507202148438
    5. 'n' → logprob: -2.9285507202148438
    6. '(' → logprob: -3.5535507202148438
    7. 'def' → logprob: -3.6785507202148438
    8. ' ' → logprob: -3.9285507202148438
    9. 'print' → logprob: -3.9285507202148438
    10. '  
' → logprob: -5.053550720214844

Token 31: ' Dispatcher' (ID: 137303)
  Prédit: ' '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' ' → logprob: -0.1581616848707199
    2. ' My' → logprob: -2.5331616401672363
    3. ' Calculator' → logprob: -2.9081616401672363
    4. ' A' → logprob: -5.283161640167236
    5. ' Space' → logprob: -6.283161640167236
    6. ' Data' → logprob: -7.158161640167236
    7. ' Processor' → logprob: -7.408161640167236
    8. ' C' → logprob: -7.658161640167236
    9. ' Code' → logprob: -7.783161640167236
    10. ' User' → logprob: -7.908161640167236

Token 32: ':
' (ID: 734)
  Prédit: ':'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ':' → logprob: -0.0006203425000421703
    2. '(' → logprob: -8.750619888305664
    3. ' :' → logprob: -8.750619888305664
    4. ':
' → logprob: -9.000619888305664
    5. '():' → logprob: -9.125619888305664
    6. '<|end|>' → logprob: -10.625619888305664
    7. '(object' → logprob: -11.000619888305664
    8. '):' → logprob: -11.500619888305664
    9. '   ' → logprob: -12.500619888305664
    10. '```' → logprob: -12.625619888305664

Token 33: '   ' (ID: 271)
  Prédit: ' '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' ' → logprob: -0.16279667615890503
    2. ' 
' → logprob: -2.91279673576355
    3. '<|end|>' → logprob: -3.28779673576355
    4. '    ' → logprob: -3.66279673576355
    5. '   ' → logprob: -4.412796497344971
    6. ' def' → logprob: -4.537796497344971
    7. '     
' → logprob: -5.787796497344971
    8. '    
' → logprob: -6.037796497344971
    9. '
' → logprob: -6.662796497344971
    10. '  
' → logprob: -6.912796497344971

Token 34: ' def' (ID: 1056)
  Prédit: ' def'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' def' → logprob: -0.010248844511806965
    2. 'def' (adapté à ' def') → logprob: -4.88524866104126
    3. '   ' → logprob: -6.88524866104126
    4. ' 
' → logprob: -7.13524866104126
    5. '    ' → logprob: -8.260249137878418
    6. '	def' → logprob: -8.510249137878418
    7. ' ' → logprob: -8.760249137878418
    8. '    
' → logprob: -9.135249137878418
    9. '     
' → logprob: -10.635249137878418
    10. '
' → logprob: -10.885249137878418

Token 35: ' __' (ID: 2516)
  Prédit: ' __'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' __' → logprob: -0.028108781203627586
    2. ' init' → logprob: -3.903108835220337
    3. ' ' → logprob: -6.028108596801758
    4. ' def' → logprob: -6.278108596801758
    5. ' _' → logprob: -6.528108596801758
    6. ' calc' → logprob: -7.028108596801758
    7. '__' → logprob: -7.778108596801758
    8. 'init' → logprob: -8.153108596801758
    9. ' process' → logprob: -10.153108596801758
    10. ' dispatch' → logprob: -10.278108596801758

Token 36: 'init' (ID: 3287)
  Prédit: 'init'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'init' → logprob: -1.9743012671824545e-05
    2. 'ini' → logprob: -11.375020027160645
    3. ' init' → logprob: -12.250020027160645
    4. 'new' → logprob: -13.375020027160645
    5. 'call' → logprob: -13.875020027160645
    6. 'in' → logprob: -15.375020027160645
    7. 'i' → logprob: -15.625020027160645
    8. ' ' → logprob: -15.875020027160645
    9. 'innit' → logprob: -15.875020027160645
    10. '	init' → logprob: -16.500019073486328

Token 37: '__(' (ID: 8241)
  Prédit: '__('
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '__(' → logprob: -0.4743753969669342
    2. '__' → logprob: -0.9743753671646118
    3. '__(
' → logprob: -8.59937572479248
    4. '__('' → logprob: -9.72437572479248
    5. '__((' → logprob: -10.34937572479248
    6. '___' → logprob: -11.84937572479248
    7. '__(*' → logprob: -12.09937572479248
    8. '__("' → logprob: -12.72437572479248
    9. '__.__' → logprob: -12.97437572479248
    10. '____' → logprob: -13.34937572479248

Token 38: 'self' (ID: 1156)
  Prédit: 'self'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'self' → logprob: -0.008866876363754272
    2. ' self' → logprob: -4.758866786956787
    3. ' ' → logprob: -8.883867263793945
    4. ')' → logprob: -9.383867263793945
    5. '   ' → logprob: -11.258867263793945
    6. '  ' → logprob: -11.758867263793945
    7. ' )' → logprob: -12.508867263793945
    8. '
' → logprob: -13.383867263793945
    9. '    ' → logprob: -14.383867263793945
    10. '0' → logprob: -14.758867263793945

Token 39: ',' (ID: 11)
  Prédit: ','
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ',' → logprob: -0.028976064175367355
    2. ' ,' → logprob: -3.9039759635925293
    3. 'self' → logprob: -4.903975963592529
    4. ',n' → logprob: -8.278976440429688
    5. ',self' → logprob: -8.778976440429688
    6. ' ' → logprob: -8.903976440429688
    7. '   ' → logprob: -9.028976440429688
    8. ')' → logprob: -9.153976440429688
    9. '<|end|>' → logprob: -9.903976440429688
    10. '  ' → logprob: -10.403976440429688

Token 40: ' func' (ID: 4660)
  Prédit: 'n'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'n' → logprob: -1.5914889574050903
    2. ' func' → logprob: -1.7164889574050903
    3. 'func' → logprob: -1.9664889574050903
    4. ' n' → logprob: -2.716488838195801
    5. ' handlers' → logprob: -2.841488838195801
    6. 'handlers' → logprob: -2.841488838195801
    7. ' value' → logprob: -3.091488838195801
    8. ')' → logprob: -3.216488838195801
    9. 'value' → logprob: -3.216488838195801
    10. 'self' → logprob: -3.841488838195801

Token 41: '):
' (ID: 1883)
  Prédit: '):'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '):' → logprob: -0.25744396448135376
    2. 's' → logprob: -1.507443904876709
    3. '):
' → logprob: -5.382443904876709
    4. ')' → logprob: -8.132444381713867
    5. '_list' → logprob: -8.132444381713867
    6. '=None' → logprob: -9.382444381713867
    7. ' ):' → logprob: -10.382444381713867
    8. ',' → logprob: -10.507444381713867
    9. 'tion' → logprob: -10.632444381713867
    10. '=' → logprob: -10.882444381713867

Token 42: '       ' (ID: 309)
  Prédit: '       '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '       ' → logprob: -0.005300639197230339
    2. '   ' → logprob: -6.005300521850586
    3. ' self' → logprob: -7.005300521850586
    4. '<|end|>' → logprob: -7.255300521850586
    5. 'self' → logprob: -8.380300521850586
    6. '```' → logprob: -8.755300521850586
    7. ':' → logprob: -9.130300521850586
    8. '        
' → logprob: -9.130300521850586
    9. '    ' → logprob: -9.130300521850586
    10. '	self' → logprob: -9.630300521850586

Token 43: ' self' (ID: 1051)
  Prédit: ' self'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' self' → logprob: -0.3518655598163605
    2. 'self' (adapté à ' self') → logprob: -1.851865530014038
    3. '       ' → logprob: -1.976865530014038
    4. '	self' → logprob: -7.351865768432617
    5. '   ' → logprob: -7.851865768432617
    6. ' ' → logprob: -9.726865768432617
    7. '	' → logprob: -10.976865768432617
    8. '	   ' → logprob: -11.351865768432617
    9. ' ' → logprob: -11.476865768432617
    10. 'def' → logprob: -12.101865768432617

Token 44: '.func' (ID: 39446)
  Prédit: '.func'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '.func' → logprob: -0.6364322900772095
    2. '.' → logprob: -0.7614322900772095
    3. ' .' → logprob: -5.88643217086792
    4. '._' → logprob: -8.761432647705078
    5. '.function' → logprob: -8.761432647705078
    6. ' =' → logprob: -8.886432647705078
    7. 'func' → logprob: -9.136432647705078
    8. '   ' → logprob: -9.386432647705078
    9. ' func' → logprob: -9.761432647705078
    10. '.f' → logprob: -10.386432647705078

Token 45: ' =' (ID: 314)
  Prédit: '='
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '=' → logprob: -0.10020699352025986
    2. ' =' → logprob: -2.3502070903778076
    3. '=lambda' → logprob: -16.60020637512207
    4. '   ' → logprob: -17.10020637512207
    5. ' ' → logprob: -17.22520637512207
    6. '=f' → logprob: -17.47520637512207
    7. '＝' → logprob: -17.60020637512207
    8. '    ' → logprob: -17.97520637512207
    9. '=self' → logprob: -17.97520637512207
    10. ')' → logprob: -18.35020637512207

Token 46: ' func' (ID: 4660)
  Prédit: 'func'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'func' → logprob: -0.3868805766105652
    2. ' func' → logprob: -1.13688063621521
    3. '	func' → logprob: -11.636880874633789
    4. '(func' → logprob: -15.511880874633789
    5. ' ' → logprob: -15.886880874633789
    6. 'fun' → logprob: -16.01188087463379
    7. ' ' → logprob: -16.51188087463379
    8. 'f' → logprob: -16.88688087463379
    9. '   ' → logprob: -17.01188087463379
    10. '.func' → logprob: -17.01188087463379

Token 47: '
' (ID: 198)
  Prédit: '
'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '
' → logprob: -0.05375930294394493
    2. '<|end|>' → logprob: -3.0537593364715576
    3. '

' → logprob: -6.0537590980529785
    4. '    
' → logprob: -6.8037590980529785
    5. '<|end|>' → logprob: -7.0537590980529785
    6. '   ' → logprob: -7.9287590980529785
    7. ' 
' → logprob: -8.803759574890137
    8. 'def' → logprob: -9.303759574890137
    9. '  
' → logprob: -9.553759574890137
    10. ' def' → logprob: -10.553759574890137

Token 48: '   ' (ID: 271)
  Prédit: '
'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '
' → logprob: -0.15174932777881622
    2. '<|end|>' → logprob: -2.1517493724823
    3. ' def' → logprob: -5.151749134063721
    4. '   ' → logprob: -5.151749134063721
    5. '    
' → logprob: -5.401749134063721
    6. '<|end|>' → logprob: -5.526749134063721
    7. 'def' → logprob: -5.776749134063721
    8. ' 
' → logprob: -8.026749610900879
    9. '  
' → logprob: -8.151749610900879
    10. '

' → logprob: -8.151749610900879

Token 49: ' def' (ID: 1056)
  Prédit: '
'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '
' → logprob: -0.474784791469574
    2. 'def' (adapté à ' def') → logprob: -2.0997848510742188
    3. '    
' → logprob: -2.4747848510742188
    4. '   ' → logprob: -2.7247848510742188
    5. ' def' → logprob: -2.8497848510742188
    6. '<|end|>' → logprob: -3.3497848510742188
    7. '<|end|>' → logprob: -5.474784851074219
    8. '	def' → logprob: -5.724784851074219
    9. ' 
' → logprob: -6.599784851074219
    10. '        
' → logprob: -7.099784851074219

Token 50: ' dispatch' (ID: 12272)
  Prédit: ' __'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' __' → logprob: -0.1216069832444191
    2. '__' → logprob: -2.3716070652008057
    3. ' call' → logprob: -3.9966070652008057
    4. 'call' → logprob: -6.246606826782227
    5. '_call' → logprob: -7.621606826782227
    6. ' def' → logprob: -7.996606826782227
    7. 'def' → logprob: -11.371606826782227
    8. ' ' → logprob: -11.871606826782227
    9. ' ' → logprob: -12.121606826782227
    10. ' dispatch' → logprob: -13.246606826782227

Token 51: '(self' (ID: 2402)
  Prédit: '(self'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(self' → logprob: -0.012591355480253696
    2. '(' → logprob: -4.387591361999512
    3. ' (' → logprob: -9.512591361999512
    4. ' ' → logprob: -12.637591361999512
    5. 'self' → logprob: -13.637591361999512
    6. '   ' → logprob: -13.887591361999512
    7. '(
' → logprob: -14.887591361999512
    8. '       ' → logprob: -15.012591361999512
    9. '<|end|>' → logprob: -15.137591361999512
    10. '(s' → logprob: -15.387591361999512

Token 52: ',' (ID: 11)
  Prédit: ','
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ',' → logprob: -0.004632926546037197
    2. ',n' → logprob: -6.004632949829102
    3. ' ,' → logprob: -6.379632949829102
    4. 'self' → logprob: -8.004632949829102
    5. ',value' → logprob: -10.879632949829102
    6. ',self' → logprob: -11.129632949829102
    7. ',s' → logprob: -11.379632949829102
    8. ',arg' → logprob: -11.379632949829102
    9. ',line' → logprob: -11.754632949829102
    10. ',param' → logprob: -11.754632949829102

Token 53: ' x' (ID: 1215)
  Prédit: ' n'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' n' → logprob: -0.7254771590232849
    2. 'n' → logprob: -1.4754772186279297
    3. ' self' → logprob: -2.1004772186279297
    4. 'self' → logprob: -2.9754772186279297
    5. ' arg' → logprob: -3.3504772186279297
    6. ' value' → logprob: -3.6004772186279297
    7. ' x' → logprob: -3.9754772186279297
    8. 'arg' → logprob: -5.10047721862793
    9. 'value' → logprob: -5.22547721862793
    10. 'x' → logprob: -5.22547721862793

Token 54: '):
' (ID: 1883)
  Prédit: '):'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '):' → logprob: -0.0004915529862046242
    2. '):
' → logprob: -8.25049114227295
    3. ' ):' → logprob: -9.37549114227295
    4. ',' → logprob: -9.62549114227295
    5. ':' → logprob: -10.25049114227295
    6. ')' → logprob: -10.75049114227295
    7. '   ' → logprob: -11.12549114227295
    8. '       ' → logprob: -12.62549114227295
    9. ' ' → logprob: -13.12549114227295
    10. '    ' → logprob: -14.25049114227295

Token 55: '       ' (ID: 309)
  Prédit: '       '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '       ' → logprob: -0.0023325940128415823
    2. ':' → logprob: -7.00233268737793
    3. ' return' → logprob: -8.25233268737793
    4. '    ' → logprob: -8.37733268737793
    5. '(' → logprob: -8.75233268737793
    6. '   ' → logprob: -8.87733268737793
    7. ' ' → logprob: -9.50233268737793
    8. ',' → logprob: -9.50233268737793
    9. 'return' → logprob: -9.62733268737793
    10. '<|end|>' → logprob: -9.87733268737793

Token 56: ' return' (ID: 622)
  Prédit: 'if'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'if' → logprob: -1.1826159954071045
    2. 'return' (adapté à ' return') → logprob: -1.1826159954071045
    3. ' if' → logprob: -1.3076159954071045
    4. ' return' → logprob: -2.4326159954071045
    5. '       ' → logprob: -3.5576159954071045
    6. '   ' → logprob: -9.307616233825684
    7. 'self' → logprob: -9.932616233825684
    8. ' self' → logprob: -10.557616233825684
    9. 'for' → logprob: -10.807616233825684
    10. ' for' → logprob: -10.807616233825684

Token 57: ' self' (ID: 1051)
  Prédit: ' self'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' self' → logprob: -0.10025940090417862
    2. 'self' → logprob: -2.350259304046631
    3. ' getattr' → logprob: -10.100259780883789
    4. ' x' → logprob: -12.850259780883789
    5. ' ' → logprob: -13.100259780883789
    6. ''' → logprob: -13.350259780883789
    7. ' f' → logprob: -13.725259780883789
    8. 'x' → logprob: -13.975259780883789
    9. '(self' → logprob: -14.100259780883789
    10. ' '' → logprob: -14.225259780883789

Token 58: '.func' (ID: 39446)
  Prédit: '.func'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '.func' → logprob: -0.00014072739577386528
    2. 'func' → logprob: -9.250141143798828
    3. '.' → logprob: -10.500141143798828
    4. '	func' → logprob: -12.125141143798828
    5. '.fun' → logprob: -12.250141143798828
    6. ' .' → logprob: -13.375141143798828
    7. '(func' → logprob: -14.250141143798828
    8. '.Func' → logprob: -14.375141143798828
    9. '.dispatch' → logprob: -14.625141143798828
    10. '_func' → logprob: -14.625141143798828

Token 59: '(x' (ID: 4061)
  Prédit: '(x'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(x' → logprob: -0.014216157607734203
    2. '(' → logprob: -4.26421594619751
    3. 'x' → logprob: -11.264216423034668
    4. '((' → logprob: -11.514216423034668
    5. ' (' → logprob: -11.639216423034668
    6. '()' → logprob: -11.889216423034668
    7. '(n' → logprob: -12.764216423034668
    8. '(int' → logprob: -13.889216423034668
    9. '(None' → logprob: -13.889216423034668
    10. '[' → logprob: -14.014216423034668

Token 60: ')

' (ID: 1029)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ')' → logprob: -4.723352049040841e-06
    2. ' )' → logprob: -12.750004768371582
    3. ')
' → logprob: -13.750004768371582
    4. '   ' → logprob: -16.000003814697266
    5. ')return' → logprob: -16.625003814697266
    6. '))' → logprob: -16.625003814697266
    7. ' ' → logprob: -16.750003814697266
    8. ')x' → logprob: -16.750003814697266
    9. '<|end|>' → logprob: -16.750003814697266
    10. ')))' → logprob: -17.125003814697266

Token 61: 'dispatcher' (ID: 149346)
  Prédit: 'd'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'd' → logprob: -0.13316547870635986
    2. 'def' → logprob: -3.0081653594970703
    3. '_' → logprob: -3.3831653594970703
    4. 'result' → logprob: -4.75816535949707
    5. '    
' → logprob: -5.38316535949707
    6. 'dispatcher' → logprob: -5.38316535949707
    7. '.' → logprob: -5.63316535949707
    8. 'print' → logprob: -5.88316535949707
    9. '\' → logprob: -6.13316535949707
    10. '\n' → logprob: -6.50816535949707

Token 62: ' =' (ID: 314)
  Prédit: '.'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '.' → logprob: -0.1814570277929306
    2. '.dispatch' → logprob: -1.8064570426940918
    3. '(dispatch' → logprob: -6.931457042694092
    4. '(' → logprob: -8.431456565856934
    5. ' .' → logprob: -8.556456565856934
    6. ').' → logprob: -9.431456565856934
    7. '.dis' → logprob: -9.556456565856934
    8. '.(' → logprob: -10.306456565856934
    9. ' =' → logprob: -10.681456565856934
    10. '.Dispatch' → logprob: -11.306456565856934

Token 63: ' Dispatcher' (ID: 137303)
  Prédit: ' Dispatcher'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' Dispatcher' → logprob: -0.34934210777282715
    2. 'Dispatcher' → logprob: -1.2243421077728271
    3. ' Dispatch' → logprob: -7.974342346191406
    4. ' calc' → logprob: -8.474342346191406
    5. 'Dispatch' → logprob: -8.974342346191406
    6. ' ' → logprob: -9.974342346191406
    7. ' dispatcher' → logprob: -10.099342346191406
    8. 'dispatcher' → logprob: -10.474342346191406
    9. 'calc' → logprob: -10.724342346191406
    10. 'Calculator' → logprob: -10.724342346191406

Token 64: '(lambda' (ID: 43341)
  Prédit: '(calc'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(calc' → logprob: -0.08177430927753448
    2. '(func' → logprob: -3.0817742347717285
    3. '(' → logprob: -3.4567742347717285
    4. '(lambda' → logprob: -7.3317742347717285
    5. '(
' → logprob: -9.081774711608887
    6. 'calc' → logprob: -9.206774711608887
    7. '(dispatch' → logprob: -9.331774711608887
    8. '()' → logprob: -10.331774711608887
    9. ')' → logprob: -11.081774711608887
    10. '(cal' → logprob: -11.206774711608887

Token 65: ' z' (ID: 579)
  Prédit: ' n'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' n' → logprob: -0.4241986870765686
    2. ' x' → logprob: -1.5491986274719238
    3. 'n' → logprob: -2.549198627471924
    4. 'x' → logprob: -2.924198627471924
    5. 'N' → logprob: -7.174198627471924
    6. ' N' → logprob: -7.424198627471924
    7. ' ' → logprob: -9.924199104309082
    8. '  ' → logprob: -12.799199104309082
    9. '   ' → logprob: -12.799199104309082
    10. 'i' → logprob: -13.424199104309082

Token 66: ':' (ID: 25)
  Prédit: ':'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ':' → logprob: -0.008726848289370537
    2. ' :' → logprob: -4.758727073669434
    3. ' z' → logprob: -9.383727073669434
    4. 'z' → logprob: -11.508727073669434
    5. ':z' → logprob: -11.508727073669434
    6. ',' → logprob: -12.758727073669434
    7. ',z' → logprob: -13.758727073669434
    8. ':n' → logprob: -14.633727073669434
    9. ':int' → logprob: -14.758727073669434
    10. ' ' → logprob: -14.758727073669434

Token 67: ' calc' (ID: 25691)
  Prédit: 'calc'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'calc' → logprob: -0.5103530883789062
    2. ''' → logprob: -1.0103530883789062
    3. ' calc' → logprob: -4.385353088378906
    4. 'z' → logprob: -4.760353088378906
    5. ''z' → logprob: -4.885353088378906
    6. ' '' → logprob: -5.260353088378906
    7. ' z' → logprob: -7.635353088378906
    8. '"' → logprob: -7.760353088378906
    9. '(calc' → logprob: -8.385353088378906
    10. ''A' → logprob: -9.010353088378906

Token 68: '1' (ID: 16)
  Prédit: '1'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '1' → logprob: 0.0
    2. ' ' → logprob: -17.875
    3. '2' → logprob: -18.0
    4. 'z' → logprob: -19.375
    5. '１' → logprob: -19.5
    6. '```' → logprob: -20.0625
    7. '১' → logprob: -20.5625
    8. '۱' → logprob: -20.625
    9. '१' → logprob: -21.0625
    10. '١' → logprob: -21.375

Token 69: '(z' (ID: 27674)
  Prédit: '(z'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(z' → logprob: -0.002206401200965047
    2. '(' → logprob: -6.127206325531006
    3. ' (' → logprob: -11.002206802368164
    4. ')' → logprob: -13.752206802368164
    5. 'z' → logprob: -13.877206802368164
    6. '(n' → logprob: -14.252206802368164
    7. ' z' → logprob: -14.377206802368164
    8. '(
' → logprob: -14.752206802368164
    9. ' )' → logprob: -14.877206802368164
    10. ' ' → logprob: -15.502206802368164

Token 70: '))
' (ID: 2210)
  Prédit: '))'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '))' → logprob: -0.0024630522821098566
    2. ')' → logprob: -6.252462863922119
    3. ' ))' → logprob: -8.252463340759277
    4. '+' → logprob: -9.002463340759277
    5. ')))' → logprob: -9.252463340759277
    6. ' ' → logprob: -10.877463340759277
    7. ' +' → logprob: -11.377463340759277
    8. '))
' → logprob: -11.877463340759277
    9. '   ' → logprob: -12.752463340759277
    10. '*' → logprob: -12.752463340759277

Token 71: 'print' (ID: 1598)
  Prédit: 'print'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'print' → logprob: -0.2069873958826065
    2. 'result' → logprob: -2.5819873809814453
    3. '\n' → logprob: -3.9569873809814453
    4. 'r' → logprob: -4.081987380981445
    5. 'd' → logprob: -4.206987380981445
    6. 'n' → logprob: -4.581987380981445
    7. '
' → logprob: -4.706987380981445
    8. '' → logprob: -5.081987380981445
    9. '.' → logprob: -5.206987380981445
    10. '\' → logprob: -5.331987380981445

Token 72: '((' (ID: 2054)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '(' → logprob: -0.6931948661804199
    2. '(dispatch' → logprob: -0.6931948661804199
    3. '(dis' → logprob: -10.443195343017578
    4. '('' → logprob: -12.068195343017578
    5. '(

' → logprob: -12.943195343017578
    6. 'dispatcher' → logprob: -12.943195343017578
    7. ' (' → logprob: -13.193195343017578
    8. '(
' → logprob: -13.193195343017578
    9. '()' → logprob: -13.943195343017578
    10. '(print' → logprob: -14.443195343017578

Token 73: 'lambda' (ID: 35280)
  Prédit: 'dispatcher'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'dispatcher' → logprob: -0.3537442684173584
    2. 'N' → logprob: -1.4787442684173584
    3. ' N' → logprob: -2.9787442684173584
    4. ' dispatcher' → logprob: -3.9787442684173584
    5. 'dispatch' → logprob: -8.228744506835938
    6. ' ' → logprob: -9.478744506835938
    7. 'dis' → logprob: -10.603744506835938
    8. ')' → logprob: -10.853744506835938
    9. ' dispatch' → logprob: -11.103744506835938
    10. '(dispatch' → logprob: -11.478744506835938

Token 74: ' d' (ID: 272)
  Prédit: ' N'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' N' → logprob: -0.12665989995002747
    2. 'N' → logprob: -2.251659870147705
    3. ' x' → logprob: -4.876659870147705
    4. ' n' → logprob: -6.376659870147705
    5. ' dispatcher' → logprob: -6.626659870147705
    6. 'x' → logprob: -6.876659870147705
    7. 'dispatcher' → logprob: -7.376659870147705
    8. ' ' → logprob: -7.376659870147705
    9. 'n' → logprob: -8.501660346984863
    10. ')' → logprob: -9.001660346984863

Token 75: ',' (ID: 11)
  Prédit: '.dispatch'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '.dispatch' → logprob: -0.30381324887275696
    2. ':' → logprob: -1.4288132190704346
    3. ' .' → logprob: -5.178813457489014
    4. '.' → logprob: -5.178813457489014
    5. '.d' → logprob: -5.178813457489014
    6. ' :' → logprob: -6.303813457489014
    7. ').' → logprob: -7.303813457489014
    8. '(dispatch' → logprob: -7.303813457489014
    9. 'dispatcher' → logprob: -8.053812980651855
    10. ',' → logprob: -8.178812980651855

Token 76: ' val' (ID: 1459)
  Prédit: 'N'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'N' → logprob: -0.5390799045562744
    2. ' N' → logprob: -1.0390799045562744
    3. ' n' → logprob: -3.6640799045562744
    4. 'n' → logprob: -3.7890799045562744
    5. 'x' → logprob: -5.414079666137695
    6. ' x' → logprob: -5.539079666137695
    7. ' d' → logprob: -6.289079666137695
    8. 'd' → logprob: -6.539079666137695
    9. ' ' → logprob: -7.289079666137695
    10. 'dispatcher' → logprob: -7.664079666137695

Token 77: ':' (ID: 25)
  Prédit: ':'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ':' → logprob: -0.0009130131802521646
    2. ' :' → logprob: -7.500913143157959
    3. 'd' → logprob: -8.5009126663208
    4. ')' → logprob: -10.1259126663208
    5. '):' → logprob: -10.2509126663208
    6. ',' → logprob: -10.6259126663208
    7. ':d' → logprob: -11.0009126663208
    8. 'er' → logprob: -11.3759126663208
    9. 's' → logprob: -11.7509126663208
    10. ' d' → logprob: -12.5009126663208

Token 78: ' d' (ID: 272)
  Prédit: ' d'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' d' → logprob: -0.018188457936048508
    2. 'd' → logprob: -4.0181884765625
    3. ' ' → logprob: -11.1431884765625
    4. ')' → logprob: -11.5181884765625
    5. ')d' → logprob: -12.7681884765625
    6. '    ' → logprob: -13.7681884765625
    7. ' ' → logprob: -14.0181884765625
    8. '	d' → logprob: -14.1431884765625
    9. '(d' → logprob: -14.2056884765625
    10. ' print' → logprob: -14.2681884765625

Token 79: '.dispatch' (ID: 40118)
  Prédit: '.dispatch'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '.dispatch' → logprob: -0.0004043361986987293
    2. '.' → logprob: -7.875404357910156
    3. ' .' → logprob: -11.625404357910156
    4. ').' → logprob: -12.250404357910156
    5. 'dispatch' → logprob: -12.625404357910156
    6. '.dis' → logprob: -13.125404357910156
    7. '.Dispatch' → logprob: -13.125404357910156
    8. '	dispatch' → logprob: -14.125404357910156
    9. '.print' → logprob: -14.250404357910156
    10. ')' → logprob: -15.125404357910156

Token 80: '(val' (ID: 17391)
  Prédit: '(val'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(val' → logprob: -0.012016956694424152
    2. '(' → logprob: -5.012016773223877
    3. ' (' → logprob: -5.262016773223877
    4. ' val' → logprob: -9.512017250061035
    5. ')(' → logprob: -11.762017250061035
    6. ')' → logprob: -11.887017250061035
    7. ' )' → logprob: -12.262017250061035
    8. '(value' → logprob: -12.387017250061035
    9. ',val' → logprob: -13.262017250061035
    10. '[val' → logprob: -14.012017250061035

Token 81: '))(' (ID: 72297)
  Prédit: ')('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')(' → logprob: -0.46621155738830566
    2. '))(' → logprob: -1.7162115573883057
    3. ')' → logprob: -1.9662115573883057
    4. '))' → logprob: -3.4662115573883057
    5. '(N' → logprob: -3.9662115573883057
    6. '(' → logprob: -7.216211318969727
    7. ')))' → logprob: -7.466211318969727
    8. ' )(' → logprob: -8.091211318969727
    9. ' ))' → logprob: -8.341211318969727
    10. ' )' → logprob: -8.341211318969727

Token 82: 'dispatcher' (ID: 149346)
  Prédit: 'N'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'N' → logprob: -0.13395828008651733
    2. ' N' → logprob: -2.258958339691162
    3. 'dispatcher' → logprob: -3.883958339691162
    4. ' dispatcher' → logprob: -8.008957862854004
    5. 'n' → logprob: -12.633957862854004
    6. 'dispatch' → logprob: -12.758957862854004
    7. 'd' → logprob: -14.008957862854004
    8. ')' → logprob: -14.133957862854004
    9. '(dispatch' → logprob: -14.258957862854004
    10. '(N' → logprob: -14.383957862854004

Token 83: ',' (ID: 11)
  Prédit: ','
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ',' → logprob: -0.0007110013975761831
    2. ' ,' → logprob: -7.375710964202881
    3. ',N' → logprob: -9.625711441040039
    4. 'N' → logprob: -11.750711441040039
    5. ')' → logprob: -12.125711441040039
    6. ' ' → logprob: -13.125711441040039
    7. ' N' → logprob: -13.375711441040039
    8. ',n' → logprob: -13.750711441040039
    9. ',
' → logprob: -16.25071144104004
    10. '   ' → logprob: -16.37571144104004

Token 84: ' N' (ID: 478)
  Prédit: ' N'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' N' → logprob: -0.34850046038627625
    2. 'N' → logprob: -1.2235004901885986
    3. ' ' → logprob: -10.72350025177002
    4. ' ' → logprob: -10.72350025177002
    5. 'n' → logprob: -12.47350025177002
    6. ')' → logprob: -12.84850025177002
    7. ' n' → logprob: -12.97350025177002
    8. '	N' → logprob: -14.59850025177002
    9. ' 
' → logprob: -14.72350025177002
    10. ' '' → logprob: -15.34850025177002

Token 85: '))' (ID: 915)
  Prédit: '))'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '))' → logprob: -0.01816023886203766
    2. ')' → logprob: -4.018160343170166
    3. ')))' → logprob: -11.518159866333008
    4. ' ))' → logprob: -15.143159866333008
    5. '))
' → logprob: -16.393159866333008
    6. ' )' → logprob: -16.893159866333008
    7. '),' → logprob: -16.893159866333008
    8. ')
' → logprob: -17.518159866333008
    9. ')}' → logprob: -18.518159866333008
    10. '));' → logprob: -19.018159866333008


RÉSUMÉ:
--------------------------------------------------------------------------------
Total des tokens analysés: 83
Tokens correctement prédits (1ère position, stricte): 33
Tokens correctement prédits (1ère position, avec adaptation): 33
Tokens correctement prédits (top 10): 61
Précision stricte (1ère position): 39.76%
Précision adaptée (1ère position): 39.76%
Précision (top 10): 73.49%
================================================================================
