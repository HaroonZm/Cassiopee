================================================================================
ANALYSE DE PRÉDICTION TOKEN PAR TOKEN (BATCH API)
Date: 2025-06-04 19:17:33
Modèle de tokenisation: gpt-4o-mini
================================================================================

SCRIPT ANALYSÉ:
--------------------------------------------------------------------------------
n,m=map(int,input().split())
a=list(map(int,input().split()))
print(n-sum(a) if n-sum(a)>=0 else -1)
--------------------------------------------------------------------------------

RÉSULTATS D'ANALYSE TOKEN PAR TOKEN:
--------------------------------------------------------------------------------
Token 0: 'n' (ID: 77)
  → Token d'amorce (pas de prédiction)

Token 1: ',m' (ID: 26648)
  → Token d'amorce (pas de prédiction)

Token 2: '=' (ID: 28)
  → Token d'amorce (pas de prédiction)

Token 3: 'map' (ID: 3726)
  Prédit: 'map'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'map' → logprob: -0.6340560913085938
    2. ' map' → logprob: -1.1340560913085938
    3. 'input' → logprob: -2.5090560913085938
    4. '0' → logprob: -3.2590560913085938
    5. ' ' → logprob: -4.259056091308594
    6. ' input' → logprob: -4.509056091308594
    7. '10' → logprob: -6.759056091308594
    8. 'int' → logprob: -6.884056091308594
    9. '1' → logprob: -8.384056091308594
    10. '5' → logprob: -8.759056091308594

Token 4: '(int' (ID: 2742)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(' → logprob: -0.0018297502538189292
    2. '```' → logprob: -7.501829624176025
    3. '(lambda' → logprob: -7.626829624176025
    4. '(int' → logprob: -7.626829624176025
    5. '(str' → logprob: -9.001830101013184
    6. '<|end|>' → logprob: -11.001830101013184
    7. '(
' → logprob: -11.126830101013184
    8. ')' → logprob: -11.251830101013184
    9. '[int' → logprob: -11.376830101013184
    10. '\(' → logprob: -11.501830101013184

Token 5: ',input' (ID: 123014)
  Prédit: '(input'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(input' → logprob: -0.0754479467868805
    2. ',input' → logprob: -3.3254480361938477
    3. 'input' → logprob: -3.5754480361938477
    4. ')' → logprob: -5.200448036193848
    5. ',' → logprob: -6.200448036193848
    6. '(' → logprob: -7.575448036193848
    7. ' input' → logprob: -8.325448036193848
    8. '=input' → logprob: -8.825448036193848
    9. '<input' → logprob: -10.075448036193848
    10. '(int' → logprob: -10.200448036193848

Token 6: '().' (ID: 1454)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '(' → logprob: -0.7722073197364807
    2. '())' → logprob: -1.147207260131836
    3. '()' → logprob: -2.522207260131836
    4. ')' → logprob: -3.022207260131836
    5. '('' → logprob: -3.147207260131836
    6. '()">' → logprob: -4.772207260131836
    7. '(""))' → logprob: -5.147207260131836
    8. '()>' → logprob: -5.272207260131836
    9. '(">' → logprob: -5.897207260131836
    10. '(()' → logprob: -5.897207260131836

Token 7: 'split' (ID: 13627)
  Prédit: 'split'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'split' → logprob: -6.575563020305708e-05
    2. 'strip' → logprob: -9.875065803527832
    3. ')' → logprob: -11.625065803527832
    4. ' split' → logprob: -13.000065803527832
    5. 'rstrip' → logprob: -13.250065803527832
    6. '(split' → logprob: -14.000065803527832
    7. 'read' → logprob: -15.875065803527832
    8. 'spl' → logprob: -16.000064849853516
    9. 'plit' → logprob: -17.125064849853516
    10. '```' → logprob: -17.875064849853516

Token 8: '())
' (ID: 4574)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ')' → logprob: -0.010534466244280338
    2. '())' → logprob: -4.885534286499023
    3. '))' → logprob: -6.010534286499023
    4. '()' → logprob: -8.010534286499023
    5. '`)' → logprob: -9.635534286499023
    6. '(' → logprob: -10.135534286499023
    7. ')`' → logprob: -11.385534286499023
    8. '()))' → logprob: -12.510534286499023
    9. ' )' → logprob: -13.010534286499023
    10. '')' → logprob: -13.260534286499023

Token 9: 'a' (ID: 64)
  Prédit: 'a'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'a' → logprob: -1.0189905166625977
    2. 'for' → logprob: -1.0189905166625977
    3. '\n' → logprob: -2.2689905166625977
    4. '
' → logprob: -2.7689905166625977
    5. '`' → logprob: -3.6439905166625977
    6. '```' → logprob: -4.018990516662598
    7. 'if' → logprob: -4.393990516662598
    8. 'x' → logprob: -4.393990516662598
    9. 's' → logprob: -5.018990516662598
    10. 'd' → logprob: -5.143990516662598

Token 10: '=list' (ID: 93413)
  Prédit: '['
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '[' → logprob: -0.0013178583467379212
    2. '[a' → logprob: -7.876317977905273
    3. '\[' → logprob: -7.876317977905273
    4. '[i' → logprob: -8.751317977905273
    5. '=' → logprob: -8.876317977905273
    6. '.' → logprob: -9.376317977905273
    7. 'a' → logprob: -10.501317977905273
    8. '+' → logprob: -10.501317977905273
    9. '[]' → logprob: -10.751317977905273
    10. '[int' → logprob: -11.126317977905273

Token 11: '(map' (ID: 16946)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(' → logprob: -0.0030818097293376923
    2. '(a' → logprob: -5.878081798553467
    3. '(range' → logprob: -8.878082275390625
    4. '(
' → logprob: -10.253082275390625
    5. 'a' → logprob: -11.253082275390625
    6. '()' → logprob: -11.378082275390625
    7. '(open' → logprob: -11.378082275390625
    8. '(input' → logprob: -11.753082275390625
    9. '(

' → logprob: -11.753082275390625
    10. '(map' → logprob: -12.003082275390625

Token 12: '(int' (ID: 2742)
  Prédit: '(int'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(int' → logprob: -0.020683778449892998
    2. '(' → logprob: -3.895683765411377
    3. '<int' → logprob: -10.020684242248535
    4. '(input' → logprob: -10.645684242248535
    5. '[int' → logprob: -10.895684242248535
    6. 'int' → logprob: -11.270684242248535
    7. '=int' → logprob: -11.520684242248535
    8. '(str' → logprob: -11.770684242248535
    9. '(lambda' → logprob: -11.895684242248535
    10. '(
' → logprob: -12.520684242248535

Token 13: ',input' (ID: 123014)
  Prédit: '(input'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(input' → logprob: -0.1824033111333847
    2. ',input' → logprob: -1.807403326034546
    3. ',' → logprob: -6.682403087615967
    4. '(' → logprob: -7.057403087615967
    5. '=input' → logprob: -8.432403564453125
    6. '(int' → logprob: -9.182403564453125
    7. ',int' → logprob: -9.307403564453125
    8. ')' → logprob: -10.057403564453125
    9. '<input' → logprob: -10.307403564453125
    10. '),' → logprob: -11.307403564453125

Token 14: '().' (ID: 1454)
  Prédit: '().'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '().' → logprob: -0.06771927326917648
    2. '()' → logprob: -2.9427192211151123
    3. '()))' → logprob: -5.317719459533691
    4. '())' → logprob: -5.442719459533691
    5. '(' → logprob: -5.817719459533691
    6. '(.' → logprob: -8.317719459533691
    7. '(),' → logprob: -9.942719459533691
    8. ')' → logprob: -10.317719459533691
    9. '())))' → logprob: -10.442719459533691
    10. '))' → logprob: -10.942719459533691

Token 15: 'split' (ID: 13627)
  Prédit: 'split'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'split' → logprob: -1.6240566083070007e-06
    2. ' split' → logprob: -14.250001907348633
    3. 'strip' → logprob: -14.375001907348633
    4. '(split' → logprob: -15.125001907348633
    5. 'spl' → logprob: -16.625001907348633
    6. 'rstrip' → logprob: -18.000001907348633
    7. 'plit' → logprob: -19.625001907348633
    8. 's' → logprob: -20.125001907348633
    9. ')' → logprob: -20.750001907348633
    10. '_split' → logprob: -21.750001907348633

Token 16: '()))
' (ID: 24521)
  Prédit: '()))'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '()))' → logprob: -0.2824035882949829
    2. '))' → logprob: -1.782403588294983
    3. '())' → logprob: -3.4074034690856934
    4. '(' → logprob: -3.9074034690856934
    5. ')' → logprob: -3.9074034690856934
    6. '()' → logprob: -5.657403469085693
    7. '('' → logprob: -8.282403945922852
    8. '()));' → logprob: -9.157403945922852
    9. '())))' → logprob: -9.157403945922852
    10. '(','' → logprob: -9.532403945922852

Token 17: 'print' (ID: 1598)
  Prédit: 'a'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'a' → logprob: -0.25974541902542114
    2. 'c' → logprob: -2.2597453594207764
    3. 's' → logprob: -3.0097453594207764
    4. 'b' → logprob: -3.1347453594207764
    5. 'for' → logprob: -4.3847455978393555
    6. 'd' → logprob: -5.1347455978393555
    7. 'count' → logprob: -5.6347455978393555
    8. 'result' → logprob: -6.0097455978393555
    9. 'dp' → logprob: -6.1347455978393555
    10. 'sum' → logprob: -6.8847455978393555

Token 18: '(n' (ID: 2406)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '(' → logprob: -8.160971628967673e-05
    2. '("("' → logprob: -10.125082015991211
    3. '('' → logprob: -10.500082015991211
    4. '()' → logprob: -12.125082015991211
    5. '((' → logprob: -12.500082015991211
    6. '(a' → logprob: -13.250082015991211
    7. '(

' → logprob: -14.000082015991211
    8. '(
' → logprob: -14.625082015991211
    9. ' (' → logprob: -14.750082015991211
    10. '(**' → logprob: -15.000082015991211

Token 19: '-s' (ID: 2011)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ')' → logprob: -0.001918287598527968
    2. '[' → logprob: -6.501918315887451
    3. ' )' → logprob: -9.126917839050293
    4. ',' → logprob: -9.626917839050293
    5. ',)' → logprob: -9.626917839050293
    6. '))' → logprob: -10.376917839050293
    7. 'a' → logprob: -10.751917839050293
    8. '[a' → logprob: -11.126917839050293
    9. '*' → logprob: -11.251917839050293
    10. '+' → logprob: -11.376917839050293

Token 20: 'um' (ID: 394)
  Prédit: 'a'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'a' → logprob: -0.2288040667772293
    2. 'm' → logprob: -2.228804111480713
    3. 'um' → logprob: -2.728804111480713
    4. 'len' → logprob: -3.853804111480713
    5. '1' → logprob: -6.353804111480713
    6. 't' → logprob: -6.478804111480713
    7. 'n' → logprob: -6.478804111480713
    8. '[' → logprob: -7.478804111480713
    9. 's' → logprob: -7.478804111480713
    10. 'e' → logprob: -7.478804111480713

Token 21: '(a' (ID: 6271)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(' → logprob: -0.06211915612220764
    2. '(a' → logprob: -2.812119245529175
    3. '(
' → logprob: -9.937119483947754
    4. '()' → logprob: -10.312119483947754
    5. '([' → logprob: -10.812119483947754
    6. ')' → logprob: -11.062119483947754
    7. '(

' → logprob: -11.062119483947754
    8. '((' → logprob: -12.937119483947754
    9. '(n' → logprob: -12.937119483947754
    10. '('' → logprob: -13.187119483947754

Token 22: ')' (ID: 8)
  Prédit: '))'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '))' → logprob: -0.04302659258246422
    2. ')' → logprob: -3.1680266857147217
    3. ')))' → logprob: -11.1680269241333
    4. ' ))' → logprob: -12.6680269241333
    5. '))
' → logprob: -13.4180269241333
    6. ')a' → logprob: -13.6680269241333
    7. ''))' → logprob: -13.9180269241333
    8. '[' → logprob: -13.9180269241333
    9. ' )' → logprob: -14.2930269241333
    10. '(' → logprob: -14.2930269241333

Token 23: ' if' (ID: 538)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ')' → logprob: -0.00034416402922943234
    2. '))' → logprob: -8.000344276428223
    3. '`)' → logprob: -11.875344276428223
    4. ')`' → logprob: -14.250344276428223
    5. ' )' → logprob: -14.875344276428223
    6. '')' → logprob: -15.000344276428223
    7. ')))' → logprob: -15.875344276428223
    8. '")' → logprob: -17.000343322753906
    9. ')")' → logprob: -17.125343322753906
    10. ')
' → logprob: -17.125343322753906

Token 24: ' n' (ID: 297)
  Prédit: ' sum'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' sum' → logprob: -0.6471573114395142
    2. ' n' → logprob: -1.1471573114395142
    3. ' ' → logprob: -2.3971571922302246
    4. 'sum' → logprob: -3.7721571922302246
    5. 'n' → logprob: -4.397157192230225
    6. ' a' → logprob: -4.647157192230225
    7. ' s' → logprob: -5.147157192230225
    8. ' all' → logprob: -5.397157192230225
    9. '(sum' → logprob: -5.897157192230225
    10. ' m' → logprob: -5.897157192230225

Token 25: '-s' (ID: 2011)
  Prédit: '>'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '>' → logprob: -0.12472551316022873
    2. ' >' → logprob: -2.249725580215454
    3. '>=' → logprob: -4.749725341796875
    4. '-' → logprob: -6.749725341796875
    5. ' >=' → logprob: -6.999725341796875
    6. '<' → logprob: -7.624725341796875
    7. '">' → logprob: -8.249725341796875
    8. '==' → logprob: -9.624725341796875
    9. '!=' → logprob: -9.749725341796875
    10. ' ' → logprob: -9.874725341796875

Token 26: 'um' (ID: 394)
  Prédit: 'um'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'um' → logprob: -0.00023274161503650248
    2. 'sum' → logprob: -8.625232696533203
    3. 'u' → logprob: -11.125232696533203
    4. 'a' → logprob: -11.250232696533203
    5. '-' → logprob: -12.125232696533203
    6. ' um' → logprob: -12.375232696533203
    7. '=sum' → logprob: -13.125232696533203
    8. 'ум' → logprob: -13.250232696533203
    9. '>' → logprob: -13.375232696533203
    10. '```' → logprob: -13.500232696533203

Token 27: '(a' (ID: 6271)
  Prédit: '(a'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(a' → logprob: -0.0010469816625118256
    2. '(' → logprob: -6.876047134399414
    3. ' (' → logprob: -11.376047134399414
    4. 'a' → logprob: -13.251047134399414
    5. ')' → logprob: -15.751047134399414
    6. '>' → logprob: -15.751047134399414
    7. '(A' → logprob: -16.126047134399414
    8. '```' → logprob: -16.251047134399414
    9. '(n' → logprob: -16.501047134399414
    10. '(ai' → logprob: -16.626047134399414

Token 28: ')>=' (ID: 173043)
  Prédit: '>'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '>' → logprob: -0.09432607889175415
    2. ' >' → logprob: -3.0943260192871094
    3. ')' → logprob: -3.5943260192871094
    4. '>=' → logprob: -4.344326019287109
    5. ')>' → logprob: -6.594326019287109
    6. ' >=' → logprob: -6.719326019287109
    7. ' )' → logprob: -7.469326019287109
    8. '>)' → logprob: -8.09432601928711
    9. '">' → logprob: -8.71932601928711
    10. ' ' → logprob: -8.84432601928711

Token 29: '0' (ID: 15)
  Prédit: '0'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '0' → logprob: -0.00013440960901789367
    2. ' ' → logprob: -9.000134468078613
    3. '1' → logprob: -11.500134468078613
    4. 'a' → logprob: -14.625134468078613
    5. '2' → logprob: -16.500133514404297
    6. 'm' → logprob: -16.500133514404297
    7. '-' → logprob: -17.250133514404297
    8. '10' → logprob: -17.250133514404297
    9. '   ' → logprob: -17.250133514404297
    10. ')' → logprob: -18.125133514404297

Token 30: ' else' (ID: 1203)
  Prédit: ' else'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' else' → logprob: -0.19748036563396454
    2. ')' → logprob: -1.947480320930481
    3. 'else' → logprob: -3.3224804401397705
    4. ' )' → logprob: -7.697480201721191
    5. ' ' → logprob: -10.822480201721191
    6. '```' → logprob: -12.072480201721191
    7. '))' → logprob: -12.322480201721191
    8. '),' → logprob: -12.447480201721191
    9. ',' → logprob: -12.947480201721191
    10. ' ' → logprob: -13.072480201721191

Token 31: ' -' (ID: 533)
  Prédit: '0'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '0' → logprob: -0.09044817090034485
    2. ' ' → logprob: -2.4654481410980225
    3. ' -' → logprob: -6.965448379516602
    4. '-' → logprob: -7.590448379516602
    5. ')' → logprob: -11.590448379516602
    6. '"' → logprob: -11.715448379516602
    7. '1' → logprob: -11.840448379516602
    8. 'n' → logprob: -11.965448379516602
    9. ' n' → logprob: -12.465448379516602
    10. '10' → logprob: -12.652948379516602

Token 32: '1' (ID: 16)
  Prédit: '1'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '1' → logprob: -2.3676733690081164e-05
    2. 'n' → logprob: -12.12502384185791
    3. '(' → logprob: -12.25002384185791
    4. '2' → logprob: -12.50002384185791
    5. '-' → logprob: -12.75002384185791
    6. 'sum' → logprob: -12.87502384185791
    7. ' ' → logprob: -14.12502384185791
    8. '(n' → logprob: -14.62502384185791
    9. '11' → logprob: -14.62502384185791
    10. '10' → logprob: -15.00002384185791

Token 33: ')' (ID: 8)
  Prédit: ')'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')' → logprob: -2.816093228830141e-06
    2. '))' → logprob: -13.75000286102295
    3. '`)' → logprob: -14.12500286102295
    4. '')' → logprob: -14.62500286102295
    5. ' )' → logprob: -15.25000286102295
    6. '")' → logprob: -17.000001907348633
    7. ')`' → logprob: -17.375001907348633
    8. ')
' → logprob: -17.625001907348633
    9. '）' → logprob: -17.625001907348633
    10. ')a' → logprob: -18.000001907348633


RÉSUMÉ:
--------------------------------------------------------------------------------
Total des tokens analysés: 31
Tokens correctement prédits (1ère position, stricte): 12
Tokens correctement prédits (1ère position, avec adaptation): 12
Tokens correctement prédits (top 10): 21
Précision stricte (1ère position): 38.71%
Précision adaptée (1ère position): 38.71%
Précision (top 10): 67.74%
================================================================================
