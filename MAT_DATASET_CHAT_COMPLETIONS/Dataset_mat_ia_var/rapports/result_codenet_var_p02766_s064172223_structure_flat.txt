================================================================================
ANALYSE DE PRÉDICTION TOKEN PAR TOKEN (BATCH API)
Date: 2025-06-04 19:24:49
Modèle de tokenisation: gpt-4o-mini
================================================================================

SCRIPT ANALYSÉ:
--------------------------------------------------------------------------------
n, k = map(int, input().split())
digits = 0
while n:
    digits += 1
    n //= k
print(digits)
--------------------------------------------------------------------------------

RÉSULTATS D'ANALYSE TOKEN PAR TOKEN:
--------------------------------------------------------------------------------
Token 0: 'n' (ID: 77)
  → Token d'amorce (pas de prédiction)

Token 1: ',' (ID: 11)
  → Token d'amorce (pas de prédiction)

Token 2: ' k' (ID: 372)
  → Token d'amorce (pas de prédiction)

Token 3: ' =' (ID: 314)
  Prédit: '='
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '=' → logprob: -0.055820029228925705
    2. ' =' → logprob: -3.1808199882507324
    3. ',' → logprob: -4.430819988250732
    4. ' ' → logprob: -8.05582046508789
    5. '+' → logprob: -8.68082046508789
    6. ')' → logprob: -9.18082046508789
    7. ''' → logprob: -9.93082046508789
    8. '```' → logprob: -10.18082046508789
    9. '*' → logprob: -10.55582046508789
    10. '=
' → logprob: -10.80582046508789

Token 4: ' map' (ID: 4014)
  Prédit: ' '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' ' → logprob: -0.3459720313549042
    2. ' map' → logprob: -1.5959720611572266
    3. ' input' → logprob: -3.2209720611572266
    4. '0' → logprob: -3.9709720611572266
    5. 'map' → logprob: -3.9709720611572266
    6. 'input' → logprob: -4.845972061157227
    7. ' int' → logprob: -6.595972061157227
    8. '10' → logprob: -6.845972061157227
    9. ' n' → logprob: -7.095972061157227
    10. '1' → logprob: -8.095972061157227

Token 5: '(int' (ID: 2742)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(' → logprob: -0.3160766661167145
    2. '<|end|>' → logprob: -1.441076636314392
    3. '(lambda' → logprob: -4.441076755523682
    4. '(int' → logprob: -5.191076755523682
    5. '```' → logprob: -5.566076755523682
    6. '<|end|>' → logprob: -5.566076755523682
    7. '(str' → logprob: -5.816076755523682
    8. ')' → logprob: -6.441076755523682
    9. '[int' → logprob: -7.816076755523682
    10. '[' → logprob: -8.503576278686523

Token 6: ',' (ID: 11)
  Prédit: '(input'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '(input' → logprob: -0.08812695741653442
    2. ')' → logprob: -2.8381268978118896
    3. 'input' → logprob: -3.8381268978118896
    4. '(' → logprob: -5.838127136230469
    5. '```' → logprob: -8.588127136230469
    6. '=input' → logprob: -8.713127136230469
    7. ',input' → logprob: -8.713127136230469
    8. ' input' → logprob: -8.713127136230469
    9. '(int' → logprob: -8.838127136230469
    10. '<input' → logprob: -9.213127136230469

Token 7: ' input' (ID: 3422)
  Prédit: 'input'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'input' → logprob: -0.3133276700973511
    2. ' input' → logprob: -1.313327670097351
    3. '(input' → logprob: -9.68832778930664
    4. ')' → logprob: -12.81332778930664
    5. ',input' → logprob: -14.18832778930664
    6. '=input' → logprob: -16.06332778930664
    7. '```' → logprob: -16.18832778930664
    8. '[input' → logprob: -16.56332778930664
    9. '<input' → logprob: -17.06332778930664
    10. '	input' → logprob: -17.81332778930664

Token 8: '().' (ID: 1454)
  Prédit: '()'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '()' → logprob: -0.7479831576347351
    2. '())' → logprob: -0.7479831576347351
    3. '().' → logprob: -3.12298321723938
    4. '()>' → logprob: -6.497982978820801
    5. '());' → logprob: -6.622982978820801
    6. '(' → logprob: -6.747982978820801
    7. '`()' → logprob: -6.872982978820801
    8. '()">' → logprob: -6.997982978820801
    9. ')' → logprob: -7.497982978820801
    10. '();)' → logprob: -7.747982978820801

Token 9: 'split' (ID: 13627)
  Prédit: 'split'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'split' → logprob: -0.00118856446351856
    2. 'strip' → logprob: -6.7511887550354
    3. 'rstrip' → logprob: -11.126188278198242
    4. ' split' → logprob: -12.876188278198242
    5. ')' → logprob: -14.626188278198242
    6. '(split' → logprob: -15.001188278198242
    7. 'read' → logprob: -15.376188278198242
    8. 'spl' → logprob: -17.001188278198242
    9. 'startswith' → logprob: -17.251188278198242
    10. '_split' → logprob: -17.501188278198242

Token 10: '())
' (ID: 4574)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ')' → logprob: -0.08240674436092377
    2. '))' → logprob: -2.582406759262085
    3. '())' → logprob: -5.707406520843506
    4. '()' → logprob: -9.457406997680664
    5. '()))' → logprob: -10.082406997680664
    6. '(' → logprob: -10.707406997680664
    7. '`)' → logprob: -10.957406997680664
    8. ')))' → logprob: -11.832406997680664
    9. ')`' → logprob: -11.832406997680664
    10. '),' → logprob: -13.082406997680664

Token 11: 'digits' (ID: 135574)
  Prédit: 'if'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'if' → logprob: -1.1735570430755615
    2. 'a' → logprob: -1.7985570430755615
    3. 'for' → logprob: -2.2985570430755615
    4. 'x' → logprob: -2.6735570430755615
    5. '\n' → logprob: -2.6735570430755615
    6. '`' → logprob: -2.6735570430755615
    7. 'i' → logprob: -3.1735570430755615
    8. ',' → logprob: -3.5485570430755615
    9. '#' → logprob: -3.7985570430755615
    10. '```' → logprob: -4.173557281494141

Token 12: ' =' (ID: 314)
  Prédit: '['
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '[' → logprob: -0.02172226645052433
    2. '_' → logprob: -4.646722316741943
    3. '=' → logprob: -5.146722316741943
    4. '.' → logprob: -5.896722316741943
    5. ' =' → logprob: -7.271722316741943
    6. '[:]' → logprob: -7.646722316741943
    7. 's' → logprob: -7.771722316741943
    8. '(' → logprob: -7.771722316741943
    9. '```' → logprob: -8.396721839904785
    10. '[]' → logprob: -8.396721839904785

Token 13: ' ' (ID: 220)
  Prédit: ' []'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' []' → logprob: -0.45676547288894653
    2. '[]' → logprob: -1.0817654132843018
    3. 'list' → logprob: -4.331765651702881
    4. '[' → logprob: -5.081765651702881
    5. ' list' → logprob: -5.581765651702881
    6. ' [' → logprob: -6.206765651702881
    7. '[input' → logprob: -6.706765651702881
    8. '[int' → logprob: -7.581765651702881
    9. 'input' → logprob: -7.706765651702881
    10. ' input' → logprob: -9.206765174865723

Token 14: '0' (ID: 15)
  Prédit: 'list'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'list' → logprob: -0.5630038976669312
    2. '[]' → logprob: -1.3130038976669312
    3. '[input' → logprob: -2.3130040168762207
    4. 'input' → logprob: -3.3130040168762207
    5. '[' → logprob: -4.313004016876221
    6. '[list' → logprob: -5.063004016876221
    7. '[str' → logprob: -6.063004016876221
    8. '[int' → logprob: -6.188004016876221
    9. '[n' → logprob: -7.563004016876221
    10. '['' → logprob: -8.063003540039062

Token 15: '
' (ID: 198)
  Prédit: 'for'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'for' → logprob: -0.6859609484672546
    2. '<|end|>' → logprob: -1.6859610080718994
    3. 'while' → logprob: -2.4359610080718994
    4. '\' → logprob: -3.6859610080718994
    5. ' for' → logprob: -3.6859610080718994
    6. '\n' → logprob: -3.6859610080718994
    7. 'n' → logprob: -3.6859610080718994
    8. ',' → logprob: -3.9359610080718994
    9. '
' → logprob: -4.31096076965332
    10. ' while' → logprob: -4.43596076965332

Token 16: 'while' (ID: 7032)
  Prédit: 'for'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'for' → logprob: -0.05186671391129494
    2. ' for' → logprob: -3.5518667697906494
    3. 'while' → logprob: -4.05186653137207
    4. '```' → logprob: -7.05186653137207
    5. ' while' → logprob: -7.30186653137207
    6. 'i' → logprob: -7.42686653137207
    7. 'n' → logprob: -7.55186653137207
    8. '`' → logprob: -8.30186653137207
    9. 'if' → logprob: -8.42686653137207
    10. 'x' → logprob: -8.67686653137207

Token 17: ' n' (ID: 297)
  Prédit: ' n'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' n' → logprob: -0.00811722595244646
    2. 'n' → logprob: -5.133117198944092
    3. ' digits' → logprob: -7.008117198944092
    4. ' ' → logprob: -7.508117198944092
    5. ' k' → logprob: -7.758117198944092
    6. 'digits' → logprob: -8.38311767578125
    7. ' (' → logprob: -11.00811767578125
    8. ' not' → logprob: -11.00811767578125
    9. '(n' → logprob: -11.25811767578125
    10. 'k' → logprob: -11.50811767578125

Token 18: ':
' (ID: 734)
  Prédit: ' >'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' >' → logprob: -0.07066147029399872
    2. '>' → logprob: -2.6956615447998047
    3. ' >=' → logprob: -7.320661544799805
    4. ' ' → logprob: -10.820661544799805
    5. '%' → logprob: -11.320661544799805
    6. '>=' → logprob: -11.695661544799805
    7. ' %' → logprob: -12.695661544799805
    8. ' !=' → logprob: -12.820661544799805
    9. ':' → logprob: -12.820661544799805
    10. ' and' → logprob: -12.945661544799805

Token 19: '   ' (ID: 271)
  Prédit: ' digits'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' digits' → logprob: -0.9865278005599976
    2. ' n' → logprob: -1.1115278005599976
    3. '```' → logprob: -1.9865278005599976
    4. '   ' → logprob: -2.361527919769287
    5. 'digits' → logprob: -3.861527919769287
    6. ' ' → logprob: -4.486527919769287
    7. '    ' → logprob: -4.736527919769287
    8. 'n' → logprob: -5.361527919769287
    9. ' ```' → logprob: -5.986527919769287
    10. '`' → logprob: -6.361527919769287

Token 20: ' digits' (ID: 37806)
  Prédit: ' digits'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' digits' → logprob: -0.716909646987915
    2. 'digits' (adapté à ' digits') → logprob: -0.966909646987915
    3. ' n' → logprob: -2.341909646987915
    4. 'n' → logprob: -4.216909408569336
    5. '```' → logprob: -4.216909408569336
    6. '   ' → logprob: -5.966909408569336
    7. ' k' → logprob: -7.091909408569336
    8. 'k' → logprob: -7.216909408569336
    9. '``' → logprob: -7.466909408569336
    10. 'd' → logprob: -7.591909408569336

Token 21: ' +=' (ID: 2757)
  Prédit: ' +='
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' +=' → logprob: -0.3989105224609375
    2. '+=' → logprob: -1.2739105224609375
    3. '=' → logprob: -3.3989105224609375
    4. ' -=' → logprob: -5.3989105224609375
    5. ' =' → logprob: -5.5239105224609375
    6. '```' → logprob: -6.3989105224609375
    7. '   ' → logprob: -6.7739105224609375
    8. '-=' → logprob: -7.2739105224609375
    9. ' *=' → logprob: -7.3989105224609375
    10. ' %=' → logprob: -7.7739105224609375

Token 22: ' ' (ID: 220)
  Prédit: '1'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '1' → logprob: -0.045159704983234406
    2. ' ' → logprob: -3.6701598167419434
    3. ' n' → logprob: -4.420159816741943
    4. 'n' → logprob: -5.295159816741943
    5. 'len' → logprob: -6.795159816741943
    6. ' len' → logprob: -8.045159339904785
    7. '9' → logprob: -9.295159339904785
    8. ' (' → logprob: -10.545159339904785
    9. '(n' → logprob: -10.920159339904785
    10. 'k' → logprob: -11.670159339904785

Token 23: '1' (ID: 16)
  Prédit: '1'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '1' → logprob: -0.028397930786013603
    2. 'n' → logprob: -3.778398036956787
    3. 'len' → logprob: -5.653398036956787
    4. 'k' → logprob: -6.903398036956787
    5. ' ' → logprob: -8.653397560119629
    6. '9' → logprob: -8.653397560119629
    7. ' n' → logprob: -8.778397560119629
    8. '(n' → logprob: -10.653397560119629
    9. ' len' → logprob: -10.903397560119629
    10. '(' → logprob: -10.903397560119629

Token 24: '
' (ID: 198)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -1.2938346862792969
    2. 'n' → logprob: -1.4188346862792969
    3. '    
' → logprob: -1.4188346862792969
    4. ' n' → logprob: -2.418834686279297
    5. ' 
' → logprob: -3.168834686279297
    6. '  
' → logprob: -3.543834686279297
    7. '```' → logprob: -3.668834686279297
    8. '   
' → logprob: -3.793834686279297
    9. '     
' → logprob: -4.793834686279297
    10. '
' → logprob: -5.293834686279297

Token 25: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.43246957659721375
    2. ' n' → logprob: -1.5574696063995361
    3. 'n' → logprob: -2.182469606399536
    4. '```' → logprob: -3.932469606399536
    5. '    
' → logprob: -5.182469367980957
    6. '``' → logprob: -7.182469367980957
    7. '	n' → logprob: -7.682469367980957
    8. '(n' → logprob: -7.807469367980957
    9. '`' → logprob: -8.182469367980957
    10. '*n' → logprob: -9.057469367980957

Token 26: ' n' (ID: 297)
  Prédit: ' n'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' n' → logprob: -0.5764878392219543
    2. 'n' (adapté à ' n') → logprob: -0.8264878392219543
    3. '   ' → logprob: -8.20148754119873
    4. '```' → logprob: -8.82648754119873
    5. 'k' → logprob: -9.32648754119873
    6. ' k' → logprob: -10.95148754119873
    7. '``' → logprob: -11.57648754119873
    8. '`' → logprob: -12.20148754119873
    9. '	n' → logprob: -12.70148754119873
    10. ' ' → logprob: -13.82648754119873

Token 27: ' //' (ID: 602)
  Prédit: '//='
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '//=' → logprob: -0.421095609664917
    2. ' //' → logprob: -1.171095609664917
    3. '=' → logprob: -4.046095848083496
    4. ' =' → logprob: -4.921095848083496
    5. '//' → logprob: -5.546095848083496
    6. '```' → logprob: -6.171095848083496
    7. ' >>=' → logprob: -6.296095848083496
    8. ' -=' → logprob: -7.671095848083496
    9. ' ' → logprob: -8.421095848083496
    10. '`' → logprob: -9.546095848083496

Token 28: '=' (ID: 28)
  Prédit: '='
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '=' → logprob: -1.6240566083070007e-06
    2. '=n' → logprob: -14.875001907348633
    3. '=}' → logprob: -15.000001907348633
    4. '=k' → logprob: -15.250001907348633
    5. '=*/' → logprob: -16.375001907348633
    6. '10' → logprob: -16.750001907348633
    7. '=/' → logprob: -16.750001907348633
    8. '=.' → logprob: -16.875001907348633
    9. '=:' → logprob: -17.000001907348633
    10. '='' → logprob: -17.125001907348633

Token 29: ' k' (ID: 372)
  Prédit: '10'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '10' → logprob: -0.28125616908073425
    2. 'k' → logprob: -1.4062561988830566
    3. ' ' → logprob: -10.156255722045898
    4. '2' → logprob: -10.531255722045898
    5. ' k' → logprob: -10.656255722045898
    6. '1' → logprob: -12.156255722045898
    7. '16' → logprob: -12.531255722045898
    8. '```' → logprob: -12.906255722045898
    9. '100' → logprob: -14.406255722045898
    10. '   ' → logprob: -14.406255722045898

Token 30: '
' (ID: 198)
  Prédit: '\n'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '\n' → logprob: -0.49601829051971436
    2. '<|end|>' → logprob: -1.2460182905197144
    3. ' ' → logprob: -3.246018409729004
    4. '```' → logprob: -4.121018409729004
    5. '
' → logprob: -4.621018409729004
    6. '#' → logprob: -4.871018409729004
    7. '\' → logprob: -5.121018409729004
    8. ' 
' → logprob: -5.121018409729004
    9. 'print' → logprob: -5.371018409729004
    10. 'n' → logprob: -5.371018409729004

Token 31: 'print' (ID: 1598)
  Prédit: '\n'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '\n' → logprob: -0.7058656215667725
    2. '<|end|>' → logprob: -0.9558656215667725
    3. '
' → logprob: -2.9558656215667725
    4. 'print' → logprob: -3.3308656215667725
    5. '#' → logprob: -4.330865859985352
    6. '```' → logprob: -4.580865859985352
    7. ' ' → logprob: -5.455865859985352
    8. '\' → logprob: -6.955865859985352
    9. 'n' → logprob: -7.330865859985352
    10. '<|end|>' → logprob: -7.330865859985352

Token 32: '(d' (ID: 2572)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(' → logprob: -0.31327223777770996
    2. '(d' → logprob: -1.31327223777771
    3. '()' → logprob: -12.438272476196289
    4. '('' → logprob: -12.563272476196289
    5. '(len' → logprob: -13.938272476196289
    6. '((' → logprob: -14.813272476196289
    7. '(D' → logprob: -15.188272476196289
    8. '(n' → logprob: -15.188272476196289
    9. 'digits' → logprob: -15.313272476196289
    10. '(
' → logprob: -15.813272476196289

Token 33: 'igits' (ID: 64824)
  Prédit: 'igits'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'igits' → logprob: -0.00011200665176147595
    2. 'ig' → logprob: -9.62511157989502
    3. 'igit' → logprob: -10.62511157989502
    4. 'digits' → logprob: -11.37511157989502
    5. 'igts' → logprob: -11.87511157989502
    6. 'its' → logprob: -13.50011157989502
    7. 'i' → logprob: -14.00011157989502
    8. ')' → logprob: -14.50011157989502
    9. 'ights' → logprob: -16.000112533569336
    10. 'igi' → logprob: -16.250112533569336

Token 34: ')' (ID: 8)
  Prédit: ')'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')' → logprob: -3.128163257315464e-07
    2. '))' → logprob: -15.625
    3. ' )' → logprob: -17.0
    4. ')`' → logprob: -17.5
    5. '')' → logprob: -18.375
    6. ')
' → logprob: -19.25
    7. ')}' → logprob: -19.625
    8. '`)' → logprob: -19.875
    9. '）' → logprob: -20.0
    10. '),' → logprob: -20.0


RÉSUMÉ:
--------------------------------------------------------------------------------
Total des tokens analysés: 32
Tokens correctement prédits (1ère position, stricte): 10
Tokens correctement prédits (1ère position, avec adaptation): 10
Tokens correctement prédits (top 10): 26
Précision stricte (1ère position): 31.25%
Précision adaptée (1ère position): 31.25%
Précision (top 10): 81.25%
================================================================================
