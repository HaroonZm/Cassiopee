================================================================================
ANALYSE DE PRÉDICTION TOKEN PAR TOKEN (BATCH API)
Date: 2025-06-04 19:23:44
Modèle de tokenisation: gpt-4o-mini
================================================================================

SCRIPT ANALYSÉ:
--------------------------------------------------------------------------------
N = int(input())
if N % 2 == 0:
    result = N // 2
else:
    result = N // 2 + 1
print(result)
--------------------------------------------------------------------------------

RÉSULTATS D'ANALYSE TOKEN PAR TOKEN:
--------------------------------------------------------------------------------
Token 0: 'N' (ID: 45)
  → Token d'amorce (pas de prédiction)

Token 1: ' =' (ID: 314)
  → Token d'amorce (pas de prédiction)

Token 2: ' int' (ID: 677)
  → Token d'amorce (pas de prédiction)

Token 3: '(input' (ID: 10054)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '(' → logprob: -0.00036394817288964987
    2. ''' → logprob: -9.000364303588867
    3. '(N' → logprob: -9.000364303588867
    4. '`' → logprob: -10.375364303588867
    5. '```' → logprob: -10.500364303588867
    6. '(
' → logprob: -10.875364303588867
    7. '('' → logprob: -11.500364303588867
    8. '("("' → logprob: -12.000364303588867
    9. '\(' → logprob: -12.250364303588867
    10. '"' → logprob: -12.875364303588867

Token 4: '())
' (ID: 4574)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '(' → logprob: -0.5405747294425964
    2. ')' → logprob: -0.9155747294425964
    3. '()' → logprob: -4.290574550628662
    4. '())' → logprob: -5.915574550628662
    5. '(
' → logprob: -8.41557502746582
    6. '```' → logprob: -9.16557502746582
    7. '))' → logprob: -9.29057502746582
    8. '")' → logprob: -9.54057502746582
    9. '`)' → logprob: -9.79057502746582
    10. '(

' → logprob: -9.79057502746582

Token 5: 'if' (ID: 366)
  Prédit: 'for'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'for' → logprob: -0.5556665062904358
    2. 'if' → logprob: -1.555666446685791
    3. 'i' → logprob: -2.930666446685791
    4. 'x' → logprob: -3.305666446685791
    5. 'a' → logprob: -3.430666446685791
    6. 's' → logprob: -3.805666446685791
    7. 'f' → logprob: -4.305666446685791
    8. '\n' → logprob: -5.055666446685791
    9. '#' → logprob: -5.180666446685791
    10. '`' → logprob: -5.180666446685791

Token 6: ' N' (ID: 478)
  Prédit: ' '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' ' → logprob: -0.08918154984712601
    2. ' N' → logprob: -2.464181661605835
    3. '  ' → logprob: -9.214181900024414
    4. 'N' → logprob: -9.964181900024414
    5. ''' → logprob: -10.339181900024414
    6. ' ' → logprob: -10.589181900024414
    7. ' not' → logprob: -11.589181900024414
    8. '"' → logprob: -11.964181900024414
    9. ' "' → logprob: -12.339181900024414
    10. ' a' → logprob: -12.714181900024414

Token 7: ' %' (ID: 1851)
  Prédit: ' >'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' >' → logprob: -0.06817981600761414
    2. ' ' → logprob: -3.9431798458099365
    3. ' <' → logprob: -3.9431798458099365
    4. ' >=' → logprob: -4.568179607391357
    5. '>' → logprob: -4.693179607391357
    6. ' ==' → logprob: -5.443179607391357
    7. ' <=' → logprob: -6.443179607391357
    8. ' %' → logprob: -7.193179607391357
    9. '<' → logprob: -8.568180084228516
    10. ')' → logprob: -8.818180084228516

Token 8: ' ' (ID: 220)
  Prédit: '2'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '2' → logprob: -0.523288369178772
    2. ' ' → logprob: -0.898288369178772
    3. '3' → logprob: -9.89828872680664
    4. '4' → logprob: -10.14828872680664
    5. '```' → logprob: -10.52328872680664
    6. '32' → logprob: -10.64828872680664
    7. '1' → logprob: -11.39828872680664
    8. '10' → logprob: -13.14828872680664
    9. '=' → logprob: -13.39828872680664
    10. '5' → logprob: -13.77328872680664

Token 9: '2' (ID: 17)
  Prédit: '2'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '2' → logprob: -0.004828222561627626
    2. '3' → logprob: -5.379828453063965
    3. '4' → logprob: -9.379828453063965
    4. '5' → logprob: -10.129828453063965
    5. '10' → logprob: -10.504828453063965
    6. '7' → logprob: -10.754828453063965
    7. ' ' → logprob: -10.754828453063965
    8. '1' → logprob: -12.129828453063965
    9. '```' → logprob: -13.004828453063965
    10. '6' → logprob: -13.129828453063965

Token 10: ' ==' (ID: 951)
  Prédit: ' =='
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' ==' → logprob: -0.22358237206935883
    2. '==' → logprob: -1.72358238697052
    3. ' !=' → logprob: -3.9735822677612305
    4. '=' → logprob: -6.7235822677612305
    5. '!=' → logprob: -6.7235822677612305
    6. ' =' → logprob: -8.22358226776123
    7. ' ' → logprob: -8.47358226776123
    8. ':' → logprob: -9.22358226776123
    9. ')' → logprob: -9.97358226776123
    10. '!' → logprob: -10.34858226776123

Token 11: ' ' (ID: 220)
  Prédit: ' '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' ' → logprob: -0.22544659674167633
    2. '0' → logprob: -1.6004465818405151
    3. '1' → logprob: -10.600446701049805
    4. '2' → logprob: -12.475446701049805
    5. ' ' → logprob: -12.475446701049805
    6. '3' → logprob: -14.850446701049805
    7. '4' → logprob: -15.725446701049805
    8. '=' → logprob: -15.975446701049805
    9. '```' → logprob: -15.975446701049805
    10. '  ' → logprob: -16.100446701049805

Token 12: '0' (ID: 15)
  Prédit: '0'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '0' → logprob: -0.002507047727704048
    2. ' ' → logprob: -6.002507209777832
    3. '1' → logprob: -10.377507209777832
    4. '2' → logprob: -15.752507209777832
    5. '```' → logprob: -16.627506256103516
    6. '==' → logprob: -18.752506256103516
    7. '=' → logprob: -18.877506256103516
    8. '  ' → logprob: -19.627506256103516
    9. ''' → logprob: -20.065006256103516
    10. ')' → logprob: -20.127506256103516

Token 13: ':
' (ID: 734)
  Prédit: ':'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ':' → logprob: -2.4391956685576588e-05
    2. ' :' → logprob: -11.250024795532227
    3. ':
' → logprob: -12.625024795532227
    4. '':' → logprob: -13.125024795532227
    5. '':'' → logprob: -13.250024795532227
    6. ':**' → logprob: -13.250024795532227
    7. '):' → logprob: -13.750024795532227
    8. '>:' → logprob: -14.625024795532227
    9. '":"' → logprob: -15.250024795532227
    10. '":' → logprob: -15.625024795532227

Token 14: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.05504160374403
    2. ' print' → logprob: -3.555041551589966
    3. 'print' → logprob: -4.055041790008545
    4. '\n' → logprob: -5.930041790008545
    5. '    
' → logprob: -5.930041790008545
    6. '    ' → logprob: -6.930041790008545
    7. '\' → logprob: -7.430041790008545
    8. ' ' → logprob: -8.430041313171387
    9. ''' → logprob: -9.055041313171387
    10. ' 
' → logprob: -9.055041313171387

Token 15: ' result' (ID: 1534)
  Prédit: ' print'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' print' → logprob: -0.04065816104412079
    2. 'print' → logprob: -3.5406582355499268
    3. '   ' → logprob: -4.540657997131348
    4. '    ' → logprob: -9.915657997131348
    5. '```' → logprob: -10.415657997131348
    6. ' \' → logprob: -10.665657997131348
    7. ' ' → logprob: -11.165657997131348
    8. ''' → logprob: -11.165657997131348
    9. '`' → logprob: -11.540657997131348
    10. '\' → logprob: -11.665657997131348

Token 16: ' =' (ID: 314)
  Prédit: ' ='
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' =' → logprob: -0.10412988066673279
    2. '=' → logprob: -2.3541297912597656
    3. ' ' → logprob: -5.729129791259766
    4. ' +=' → logprob: -7.479129791259766
    5. ' ==' → logprob: -10.604129791259766
    6. ')' → logprob: -10.729129791259766
    7. ' |=' → logprob: -11.979129791259766
    8. '(' → logprob: -12.104129791259766
    9. '[' → logprob: -12.354129791259766
    10. '+=' → logprob: -12.479129791259766

Token 17: ' N' (ID: 478)
  Prédit: '"'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '"' → logprob: -0.7799769639968872
    2. ' N' → logprob: -1.4049769639968872
    3. ' "' → logprob: -1.4049769639968872
    4. '"N' → logprob: -3.7799768447875977
    5. 'N' → logprob: -4.154976844787598
    6. ''' → logprob: -5.154976844787598
    7. ' '' → logprob: -5.779976844787598
    8. ' ' → logprob: -6.154976844787598
    9. '0' → logprob: -7.779976844787598
    10. ''N' → logprob: -8.154976844787598

Token 18: ' //' (ID: 602)
  Prédit: '+'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '+' → logprob: -1.1075141429901123
    2. ' ' → logprob: -1.2325141429901123
    3. ' +' → logprob: -1.6075141429901123
    4. ' else' → logprob: -2.7325141429901123
    5. ' *' → logprob: -3.1075141429901123
    6. '*' → logprob: -3.7325141429901123
    7. ' //' → logprob: -4.232514381408691
    8. 'else' → logprob: -4.607514381408691
    9. '   ' → logprob: -5.732514381408691
    10. '```' → logprob: -5.732514381408691

Token 19: ' ' (ID: 220)
  Prédit: '2'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '2' → logprob: -0.011048642918467522
    2. ' ' → logprob: -4.511048793792725
    3. '```' → logprob: -15.011048316955566
    4. ' ' → logprob: -15.698548316955566
    5. '۲' → logprob: -16.448549270629883
    6. '4' → logprob: -16.573549270629883
    7. '  ' → logprob: -16.761049270629883
    8. '3' → logprob: -16.886049270629883
    9. '   ' → logprob: -17.136049270629883
    10. '２' → logprob: -17.323549270629883

Token 20: '2' (ID: 17)
  Prédit: '2'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '2' → logprob: -1.3306015716807451e-05
    2. ' ' → logprob: -11.25001335144043
    3. '```' → logprob: -16.12501335144043
    4. '   ' → logprob: -17.00001335144043
    5. '  ' → logprob: -17.25001335144043
    6. '3' → logprob: -17.75001335144043
    7. '1' → logprob: -18.25001335144043
    8. '۲' → logprob: -18.31251335144043
    9. '4' → logprob: -18.50001335144043
    10. '２' → logprob: -18.81251335144043

Token 21: '
' (ID: 198)
  Prédit: 'else'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'else' → logprob: -0.01895175501704216
    2. ' else' → logprob: -4.643951892852783
    3. '
' → logprob: -5.268951892852783
    4. '\n' → logprob: -6.268951892852783
    5. '*' → logprob: -7.393951892852783
    6. '+' → logprob: -8.393951416015625
    7. '    
' → logprob: -8.643951416015625
    8. ' 
' → logprob: -8.643951416015625
    9. '```' → logprob: -8.643951416015625
    10. 'print' → logprob: -8.768951416015625

Token 22: 'else' (ID: 2807)
  Prédit: 'else'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'else' → logprob: -0.004045513924211264
    2. ' else' → logprob: -6.004045486450195
    3. '\n' → logprob: -6.879045486450195
    4. '```' → logprob: -9.004045486450195
    5. '
' → logprob: -9.504045486450195
    6. '*' → logprob: -9.504045486450195
    7. '  
' → logprob: -9.629045486450195
    8. '    
' → logprob: -9.879045486450195
    9. '\' → logprob: -10.004045486450195
    10. '   ' → logprob: -11.254045486450195

Token 23: ':
' (ID: 734)
  Prédit: ':'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ':' → logprob: -0.0019489870173856616
    2. ':
' → logprob: -6.251948833465576
    3. '   ' → logprob: -10.876949310302734
    4. ' :' → logprob: -13.876949310302734
    5. ':return' → logprob: -16.001949310302734
    6. ':
' → logprob: -16.376949310302734
    7. '```' → logprob: -16.376949310302734
    8. ' :
' → logprob: -16.751949310302734
    9. ':\' → logprob: -16.751949310302734
    10. ':

' → logprob: -17.001949310302734

Token 24: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.0009949409868568182
    2. ' result' → logprob: -8.000994682312012
    3. 'result' → logprob: -8.750994682312012
    4. '```' → logprob: -8.750994682312012
    5. '    ' → logprob: -8.875994682312012
    6. '1' → logprob: -9.625994682312012
    7. '    
' → logprob: -10.375994682312012
    8. '"' → logprob: -11.125994682312012
    9. ''' → logprob: -11.500994682312012
    10. '0' → logprob: -11.500994682312012

Token 25: ' result' (ID: 1534)
  Prédit: 'result'
  Correct (stricte): False
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'result' (adapté à ' result') → logprob: -0.37879616022109985
    2. 'N' → logprob: -1.378796100616455
    3. '   ' → logprob: -3.253796100616455
    4. '(N' → logprob: -5.003796100616455
    5. ' N' → logprob: -5.378796100616455
    6. ' result' → logprob: -5.503796100616455
    7. '(result' → logprob: -5.628796100616455
    8. ' (' → logprob: -6.003796100616455
    9. '(' → logprob: -6.003796100616455
    10. '0' → logprob: -8.253796577453613

Token 26: ' =' (ID: 314)
  Prédit: ' ='
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' =' → logprob: -0.03187991678714752
    2. '=' → logprob: -3.5318799018859863
    3. ' ' → logprob: -6.531879901885986
    4. ' +=' → logprob: -7.406879901885986
    5. '+' → logprob: -11.531880378723145
    6. '```' → logprob: -11.531880378723145
    7. ' +' → logprob: -11.656880378723145
    8. '   ' → logprob: -12.156880378723145
    9. '+=' → logprob: -12.156880378723145
    10. ')' → logprob: -12.156880378723145

Token 27: ' N' (ID: 478)
  Prédit: ' N'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' N' → logprob: -0.3030014932155609
    2. ' (' → logprob: -2.0530014038085938
    3. 'N' → logprob: -2.1780014038085938
    4. '(N' → logprob: -4.303001403808594
    5. ' ' → logprob: -6.053001403808594
    6. '3' → logprob: -6.303001403808594
    7. '(' → logprob: -6.678001403808594
    8. '1' → logprob: -7.678001403808594
    9. '0' → logprob: -9.178001403808594
    10. '   ' → logprob: -9.303001403808594

Token 28: ' //' (ID: 602)
  Prédit: 'print'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'print' → logprob: -0.40826091170310974
    2. '\n' → logprob: -1.2832609415054321
    3. '%' → logprob: -4.283260822296143
    4. '```' → logprob: -4.283260822296143
    5. ')' → logprob: -5.283260822296143
    6. '\' → logprob: -5.408260822296143
    7. ' print' → logprob: -5.533260822296143
    8. '#' → logprob: -5.658260822296143
    9. ' ' → logprob: -5.783260822296143
    10. '*' → logprob: -5.783260822296143

Token 29: ' ' (ID: 220)
  Prédit: '2'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '2' → logprob: -0.000712074339389801
    2. ' ' → logprob: -7.250711917877197
    3. '1' → logprob: -13.250712394714355
    4. '  ' → logprob: -16.00071144104004
    5. '```' → logprob: -16.25071144104004
    6. '3' → logprob: -16.62571144104004
    7. '   ' → logprob: -16.62571144104004
    8. '۲' → logprob: -17.62571144104004
    9. '２' → logprob: -17.75071144104004
    10. ' ' → logprob: -18.87571144104004

Token 30: '2' (ID: 17)
  Prédit: '2'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '2' → logprob: -1.7954958821064793e-05
    2. '1' → logprob: -11.000018119812012
    3. ' ' → logprob: -13.625018119812012
    4. '3' → logprob: -17.375017166137695
    5. '```' → logprob: -18.000017166137695
    6. '۲' → logprob: -18.625017166137695
    7. '２' → logprob: -19.125017166137695
    8. '-' → logprob: -19.250017166137695
    9. '   ' → logprob: -19.250017166137695
    10. '  ' → logprob: -19.375017166137695

Token 31: ' +' (ID: 659)
  Prédit: '+'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '+' → logprob: -0.043148428201675415
    2. ' +' → logprob: -3.1681485176086426
    3. '-' → logprob: -9.668148040771484
    4. '+
' → logprob: -9.793148040771484
    5. ' ' → logprob: -11.668148040771484
    6. ' +
' → logprob: -11.793148040771484
    7. '+

' → logprob: -12.043148040771484
    8. ' +

' → logprob: -13.543148040771484
    9. '<|end|>' → logprob: -13.793148040771484
    10. '```' → logprob: -13.918148040771484

Token 32: ' ' (ID: 220)
  Prédit: '1'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '1' → logprob: -0.00029601677670143545
    2. ' ' → logprob: -8.125295639038086
    3. '(' → logprob: -17.625295639038086
    4. ' (' → logprob: -19.000295639038086
    5. '  ' → logprob: -20.500295639038086
    6. '   ' → logprob: -20.750295639038086
    7. ' N' → logprob: -21.000295639038086
    8. '+' → logprob: -21.375295639038086
    9. '0' → logprob: -21.500295639038086
    10. 'N' → logprob: -22.000295639038086

Token 33: '1' (ID: 16)
  Prédit: '1'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '1' → logprob: -1.2664456789934775e-06
    2. ' ' → logprob: -13.625000953674316
    3. '(' → logprob: -17.000001907348633
    4. 'N' → logprob: -17.375001907348633
    5. '(N' → logprob: -18.875001907348633
    6. '+' → logprob: -19.500001907348633
    7. '0' → logprob: -19.875001907348633
    8. '  ' → logprob: -21.000001907348633
    9. '-' → logprob: -21.125001907348633
    10. '2' → logprob: -21.125001907348633

Token 34: '
' (ID: 198)
  Prédit: 'print'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'print' → logprob: -0.4338177442550659
    2. '\n' → logprob: -1.433817744255066
    3. '
' → logprob: -2.6838178634643555
    4. '<|end|>' → logprob: -3.5588178634643555
    5. '```' → logprob: -4.8088178634643555
    6. '#' → logprob: -5.8088178634643555
    7. '\' → logprob: -6.0588178634643555
    8. ' ' → logprob: -7.6838178634643555
    9. '  
' → logprob: -7.6838178634643555
    10. ' print' → logprob: -7.9338178634643555

Token 35: 'print' (ID: 1598)
  Prédit: 'print'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'print' → logprob: -0.0007028992986306548
    2. '\n' → logprob: -8.500702857971191
    3. '```' → logprob: -8.750702857971191
    4. '
' → logprob: -8.875702857971191
    5. '#' → logprob: -9.375702857971191
    6. '<|end|>' → logprob: -10.500702857971191
    7. ' print' → logprob: -10.625702857971191
    8. '\' → logprob: -10.875702857971191
    9. ')' → logprob: -11.250702857971191
    10. ' ' → logprob: -11.875702857971191

Token 36: '(result' (ID: 8111)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(' → logprob: -0.014165041036903858
    2. '(result' → logprob: -4.264164924621582
    3. '("("' → logprob: -14.889164924621582
    4. '(
' → logprob: -15.264164924621582
    5. '('' → logprob: -15.389164924621582
    6. '(res' → logprob: -15.639164924621582
    7. '()' → logprob: -15.764164924621582
    8. 'result' → logprob: -16.0141658782959
    9. '(

' → logprob: -16.0141658782959
    10. ' (' → logprob: -16.0141658782959

Token 37: ')' (ID: 8)
  Prédit: ')'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')' → logprob: -1.9361264946837764e-07
    2. ')
' → logprob: -17.125
    3. ' )' → logprob: -17.125
    4. ')`' → logprob: -18.125
    5. '))' → logprob: -18.625
    6. '')' → logprob: -19.25
    7. '`)' → logprob: -19.5
    8. '）' → logprob: -20.75
    9. '```' → logprob: -21.125
    10. '#' → logprob: -21.125


RÉSUMÉ:
--------------------------------------------------------------------------------
Total des tokens analysés: 35
Tokens correctement prédits (1ère position, stricte): 15
Tokens correctement prédits (1ère position, avec adaptation): 16
Tokens correctement prédits (top 10): 31
Précision stricte (1ère position): 42.86%
Précision adaptée (1ère position): 45.71%
Précision (top 10): 88.57%
================================================================================
