================================================================================
ANALYSE DE PRÉDICTION TOKEN PAR TOKEN (BATCH API)
Date: 2025-06-04 19:53:20
Modèle de tokenisation: gpt-4o-mini
================================================================================

SCRIPT ANALYSÉ:
--------------------------------------------------------------------------------
import sys

input_string = input()

for character in input_string:
    if input_string.count(character) != 2:
        print("No")
        sys.exit()

print("Yes")
--------------------------------------------------------------------------------

RÉSULTATS D'ANALYSE TOKEN PAR TOKEN:
--------------------------------------------------------------------------------
Token 0: 'import' (ID: 561)
  → Token d'amorce (pas de prédiction)

Token 1: ' sys' (ID: 12228)
  → Token d'amorce (pas de prédiction)

Token 2: '

' (ID: 279)
  → Token d'amorce (pas de prédiction)

Token 3: 'input' (ID: 2586)
  Prédit: '.'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '.' → logprob: -0.18268179893493652
    2. '\n' → logprob: -2.1826817989349365
    3. 'import' → logprob: -3.5576817989349365
    4. '<|end|>' → logprob: -4.932682037353516
    5. '' → logprob: -5.807682037353516
    6. 'newline' → logprob: -5.932682037353516
    7. '\' → logprob: -6.057682037353516
    8. 'print' → logprob: -6.432682037353516
    9. '[' → logprob: -6.557682037353516
    10. '<|end|>' → logprob: -6.807682037353516

Token 4: '_string' (ID: 8609)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '(' → logprob: -0.011882327497005463
    2. '.' → logprob: -4.511882305145264
    3. '(
' → logprob: -8.011882781982422
    4. '()' → logprob: -8.511882781982422
    5. ')' → logprob: -9.136882781982422
    6. ' (' → logprob: -10.136882781982422
    7. '[' → logprob: -10.261882781982422
    8. '(

' → logprob: -10.636882781982422
    9. '```' → logprob: -11.136882781982422
    10. '_' → logprob: -11.136882781982422

Token 5: ' =' (ID: 314)
  Prédit: '.'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '.' → logprob: -0.7575422525405884
    2. '[' → logprob: -1.5075422525405884
    3. '(' → logprob: -1.7575422525405884
    4. '=' → logprob: -2.132542133331299
    5. ')' → logprob: -5.132542133331299
    6. '_' → logprob: -5.757542133331299
    7. ':' → logprob: -6.132542133331299
    8. 's' → logprob: -6.507542133331299
    9. ',' → logprob: -6.757542133331299
    10. ' =' → logprob: -6.757542133331299

Token 6: ' input' (ID: 3422)
  Prédit: '"'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '"' → logprob: -0.5684918761253357
    2. ' ' → logprob: -1.9434919357299805
    3. ' "' → logprob: -2.3184919357299805
    4. ''' → logprob: -2.6934919357299805
    5. 'input' → logprob: -2.8184919357299805
    6. ' input' → logprob: -3.4434919357299805
    7. ' sys' → logprob: -4.6934919357299805
    8. ' ""' → logprob: -5.0684919357299805
    9. '""' → logprob: -5.0684919357299805
    10. ' '' → logprob: -5.3184919357299805

Token 7: '()

' (ID: 5874)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '(' → logprob: -0.0013853551354259253
    2. '('' → logprob: -7.50138521194458
    3. ''' → logprob: -7.75138521194458
    4. '(
' → logprob: -8.626385688781738
    5. '"' → logprob: -9.376385688781738
    6. ' (' → logprob: -10.626385688781738
    7. ')' → logprob: -10.876385688781738
    8. '("("' → logprob: -10.876385688781738
    9. '```' → logprob: -11.251385688781738
    10. ''s' → logprob: -11.251385688781738

Token 8: 'for' (ID: 1938)
  Prédit: '.'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '.' → logprob: -0.024148544296622276
    2. 'print' → logprob: -5.399148464202881
    3. '.strip' → logprob: -5.524148464202881
    4. '=' → logprob: -5.774148464202881
    5. 'if' → logprob: -5.774148464202881
    6. '.split' → logprob: -5.774148464202881
    7. '_' → logprob: -6.149148464202881
    8. 'tokens' → logprob: -7.274148464202881
    9. '[' → logprob: -7.774148464202881
    10. '.lower' → logprob: -7.774148464202881

Token 9: ' character' (ID: 5855)
  Prédit: ' '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' ' → logprob: -0.003457048675045371
    2. '  ' → logprob: -5.753457069396973
    3. ' i' → logprob: -8.253457069396973
    4. '_' → logprob: -11.878457069396973
    5. ' _' → logprob: -13.503457069396973
    6. ' ```' → logprob: -13.628457069396973
    7. ' s' → logprob: -13.753457069396973
    8. ' space' → logprob: -13.753457069396973
    9. ' ▁' → logprob: -14.003457069396973
    10. ' ‌' → logprob: -14.003457069396973

Token 10: ' in' (ID: 306)
  Prédit: ' in'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' in' → logprob: -0.10937955975532532
    2. ' ' → logprob: -2.734379529953003
    3. 'in' → logprob: -3.484379529953003
    4. '  ' → logprob: -5.734379768371582
    5. '<|end|>' → logprob: -6.609379768371582
    6. 's' → logprob: -7.484379768371582
    7. ':' → logprob: -7.734379768371582
    8. ' :' → logprob: -7.984379768371582
    9. '.' → logprob: -8.359379768371582
    10. '(' → logprob: -8.359379768371582

Token 11: ' input' (ID: 3422)
  Prédit: ' input'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' input' → logprob: -0.0897539034485817
    2. 'input' → logprob: -3.0897538661956787
    3. ' ' → logprob: -3.2147538661956787
    4. ' ' → logprob: -9.589754104614258
    5. ' range' → logprob: -10.714754104614258
    6. ''' → logprob: -11.089754104614258
    7. '"' → logprob: -11.339754104614258
    8. '_input' → logprob: -11.839754104614258
    9. ' a' → logprob: -12.089754104614258
    10. '(input' → logprob: -12.464754104614258

Token 12: '_string' (ID: 8609)
  Prédit: '_string'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_string' → logprob: -0.14401832222938538
    2. '_' → logprob: -2.0190184116363525
    3. '_:' → logprob: -7.644018173217773
    4. '_s' → logprob: -7.894018173217773
    5. 'string' → logprob: -9.144018173217773
    6. '_str' → logprob: -9.394018173217773
    7. '_.' → logprob: -9.894018173217773
    8. '```' → logprob: -10.144018173217773
    9. '_STRING' → logprob: -10.269018173217773
    10. ' _' → logprob: -10.269018173217773

Token 13: ':
' (ID: 734)
  Prédit: ':'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ':' → logprob: -5.741137283621356e-05
    2. '[:]' → logprob: -11.250057220458984
    3. ':**' → logprob: -11.500057220458984
    4. ' :' → logprob: -11.625057220458984
    5. ':
' → logprob: -11.625057220458984
    6. '):' → logprob: -12.500057220458984
    7. '+:' → logprob: -13.125057220458984
    8. '>:' → logprob: -13.125057220458984
    9. '':' → logprob: -13.500057220458984
    10. '':'' → logprob: -13.750057220458984

Token 14: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.014934911392629147
    2. ' print' → logprob: -4.88993501663208
    3. ' if' → logprob: -5.38993501663208
    4. 'print' → logprob: -6.51493501663208
    5. '    ' → logprob: -7.88993501663208
    6. ' ' → logprob: -7.88993501663208
    7. 'if' → logprob: -9.014934539794922
    8. '<|end|>' → logprob: -9.264934539794922
    9. '```' → logprob: -9.764934539794922
    10. '    
' → logprob: -10.389934539794922

Token 15: ' if' (ID: 538)
  Prédit: 'print'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'print' → logprob: -0.15126381814479828
    2. '   ' → logprob: -3.02626371383667
    3. 'if' (adapté à ' if') → logprob: -3.02626371383667
    4. ' if' → logprob: -3.65126371383667
    5. ' print' → logprob: -4.15126371383667
    6. '    ' → logprob: -6.90126371383667
    7. '```' → logprob: -8.651264190673828
    8. 'sys' → logprob: -8.901264190673828
    9. '_' → logprob: -9.401264190673828
    10. 'space' → logprob: -9.901264190673828

Token 16: ' input' (ID: 3422)
  Prédit: ' character'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' character' → logprob: -0.2557833194732666
    2. 'character' → logprob: -1.5057833194732666
    3. ' ' → logprob: -5.7557830810546875
    4. ' not' → logprob: -8.130783081054688
    5. '(character' → logprob: -8.380783081054688
    6. ' ' → logprob: -10.255783081054688
    7. '<|end|>' → logprob: -10.380783081054688
    8. '  ' → logprob: -10.880783081054688
    9. '_character' → logprob: -11.130783081054688
    10. '.character' → logprob: -11.505783081054688

Token 17: '_string' (ID: 8609)
  Prédit: '_string'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_string' → logprob: -0.03472872078418732
    2. '_' → logprob: -3.534728765487671
    3. '_character' → logprob: -6.034728527069092
    4. 'String' → logprob: -7.034728527069092
    5. 'string' → logprob: -7.659728527069092
    6. '_s' → logprob: -8.40972900390625
    7. 'character' → logprob: -8.65972900390625
    8. '[' → logprob: -8.90972900390625
    9. '```' → logprob: -9.03472900390625
    10. '.' → logprob: -9.15972900390625

Token 18: '.count' (ID: 14019)
  Prédit: '['
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '[' → logprob: -0.27250009775161743
    2. '.startswith' → logprob: -1.7725000381469727
    3. '.' → logprob: -3.2725000381469727
    4. '.count' → logprob: -4.397500038146973
    5. '.endswith' → logprob: -5.647500038146973
    6. ' ==' → logprob: -5.647500038146973
    7. '==' → logprob: -6.022500038146973
    8. '   ' → logprob: -6.022500038146973
    9. '[count' → logprob: -6.022500038146973
    10. ' .' → logprob: -6.772500038146973

Token 19: '(character' (ID: 105641)
  Prédit: '(character'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(character' → logprob: -0.011069164611399174
    2. '(' → logprob: -4.511069297790527
    3. '('' → logprob: -11.136069297790527
    4. 'character' → logprob: -12.511069297790527
    5. '(char' → logprob: -13.636069297790527
    6. '(Character' → logprob: -14.011069297790527
    7. '("("' → logprob: -14.386069297790527
    8. '(
' → logprob: -15.761069297790527
    9. '(car' → logprob: -16.76106834411621
    10. '(`' → logprob: -16.88606834411621

Token 20: ')' (ID: 8)
  Prédit: ')'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')' → logprob: -0.5724671483039856
    2. '>' → logprob: -1.3224670886993408
    3. ' >' → logprob: -2.072467088699341
    4. '==' → logprob: -4.19746732711792
    5. ' ==' → logprob: -4.44746732711792
    6. ' )' → logprob: -4.69746732711792
    7. ')>' → logprob: -5.82246732711792
    8. '   ' → logprob: -6.57246732711792
    9. ' ' → logprob: -6.82246732711792
    10. '()' → logprob: -7.07246732711792

Token 21: ' !=' (ID: 1666)
  Prédit: ' >'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' >' → logprob: -0.04472515359520912
    2. '>' → logprob: -3.669725179672241
    3. ' ==' → logprob: -4.294724941253662
    4. ' ' → logprob: -6.294724941253662
    5. '==' → logprob: -7.294724941253662
    6. '   ' → logprob: -7.294724941253662
    7. ' <' → logprob: -7.544724941253662
    8. '  ' → logprob: -7.669724941253662
    9. '    ' → logprob: -9.41972541809082
    10. ' !=' → logprob: -9.66972541809082

Token 22: ' ' (ID: 220)
  Prédit: '1'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '1' → logprob: -0.3133169710636139
    2. ' ' → logprob: -1.3133169412612915
    3. 'input' → logprob: -10.43831729888916
    4. ' ' → logprob: -11.81331729888916
    5. ' input' → logprob: -12.18831729888916
    6. '0' → logprob: -12.75081729888916
    7. '2' → logprob: -13.06331729888916
    8. '   ' → logprob: -13.50081729888916
    9. '  ' → logprob: -13.56331729888916
    10. '```' → logprob: -14.56331729888916

Token 23: '2' (ID: 17)
  Prédit: '1'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '1' → logprob: -0.0013329789508134127
    2. ' ' → logprob: -6.626332759857178
    3. 'input' → logprob: -12.501333236694336
    4. '0' → logprob: -13.376333236694336
    5. ')' → logprob: -15.251333236694336
    6. '   ' → logprob: -15.376333236694336
    7. '2' → logprob: -15.688833236694336
    8. 'character' → logprob: -15.813833236694336
    9. ' input' → logprob: -16.063833236694336
    10. 'len' → logprob: -16.126333236694336

Token 24: ':
' (ID: 734)
  Prédit: ':'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ':' → logprob: -0.0009231308358721435
    2. ' :' → logprob: -7.000923156738281
    3. ':
' → logprob: -12.375923156738281
    4. '):' → logprob: -13.125923156738281
    5. '   ' → logprob: -13.375923156738281
    6. ':**' → logprob: -13.500923156738281
    7. '       ' → logprob: -14.125923156738281
    8. '    ' → logprob: -14.500923156738281
    9. ' and' → logprob: -15.125923156738281
    10. ' or' → logprob: -15.875923156738281

Token 25: '       ' (ID: 309)
  Prédit: '       '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '       ' → logprob: -0.7067291736602783
    2. ' continue' → logprob: -1.4567291736602783
    3. '   ' → logprob: -1.9567291736602783
    4. '    ' → logprob: -2.0817291736602783
    5. 'continue' → logprob: -5.331728935241699
    6. ' ' → logprob: -6.331728935241699
    7. '  ' → logprob: -8.8317289352417
    8. '     ' → logprob: -8.8317289352417
    9. '	continue' → logprob: -9.0817289352417
    10. '```' → logprob: -9.5817289352417

Token 26: ' print' (ID: 2123)
  Prédit: ' continue'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' continue' → logprob: -0.1595153957605362
    2. '    ' → logprob: -2.409515380859375
    3. '   ' → logprob: -3.409515380859375
    4. 'continue' → logprob: -4.284515380859375
    5. ' print' → logprob: -5.159515380859375
    6. ' ' → logprob: -6.159515380859375
    7. 'print' (adapté à ' print') → logprob: -7.284515380859375
    8. ' continu' → logprob: -7.784515380859375
    9. 'space' → logprob: -8.159515380859375
    10. ' ```' → logprob: -8.284515380859375

Token 27: '("' (ID: 568)
  Prédit: '(character'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(character' → logprob: -0.02201034687459469
    2. '(' → logprob: -4.272010326385498
    3. '()' → logprob: -5.522010326385498
    4. 'character' → logprob: -5.647010326385498
    5. '('' → logprob: -8.647010803222656
    6. '("' → logprob: -9.647010803222656
    7. '("")' → logprob: -11.147010803222656
    8. '(chr' → logprob: -11.272010803222656
    9. '(char' → logprob: -11.522010803222656
    10. '(f' → logprob: -13.272010803222656

Token 28: 'No' (ID: 3160)
  Prédit: 'character'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'character' → logprob: -0.021294645965099335
    2. '"' → logprob: -4.896294593811035
    3. ' character' → logprob: -5.021294593811035
    4. '")' → logprob: -5.896294593811035
    5. ' ")' → logprob: -7.146294593811035
    6. '(character' → logprob: -7.146294593811035
    7. 'c' → logprob: -7.521294593811035
    8. ')' → logprob: -8.021294593811035
    9. 'No' → logprob: -8.271294593811035
    10. ' ' → logprob: -8.396294593811035

Token 29: '")
' (ID: 1896)
  Prédit: '")'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '")' → logprob: -0.010787935927510262
    2. ')' → logprob: -4.7607879638671875
    3. ' ")' → logprob: -6.6357879638671875
    4. '!")' → logprob: -8.135787963867188
    5. '"' → logprob: -9.010787963867188
    6. 't' → logprob: -9.260787963867188
    7. 'n' → logprob: -9.385787963867188
    8. '")
' → logprob: -9.885787963867188
    9. '')' → logprob: -10.135787963867188
    10. '!' → logprob: -10.260787963867188

Token 30: '       ' (ID: 309)
  Prédit: '       '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '       ' → logprob: -0.00024953833781182766
    2. '   ' → logprob: -9.000249862670898
    3. '           ' → logprob: -9.375249862670898
    4. '```' → logprob: -11.000249862670898
    5. '<|end|>' → logprob: -11.625249862670898
    6. ')' → logprob: -12.750249862670898
    7. ' else' → logprob: -13.250249862670898
    8. '      ' → logprob: -13.500249862670898
    9. ' ' → logprob: -13.625249862670898
    10. '        ' → logprob: -13.750249862670898

Token 31: ' sys' (ID: 12228)
  Prédit: '       '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '       ' → logprob: -0.00011915886716451496
    2. '   ' → logprob: -9.50011920928955
    3. ' break' → logprob: -11.50011920928955
    4. '```' → logprob: -11.62511920928955
    5. '	' → logprob: -12.12511920928955
    6. '           ' → logprob: -12.25011920928955
    7. '<|end|>' → logprob: -13.00011920928955
    8. '        
' → logprob: -13.12511920928955
    9. '	break' → logprob: -13.12511920928955
    10. 'break' → logprob: -13.37511920928955

Token 32: '.exit' (ID: 27076)
  Prédit: '.exit'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '.exit' → logprob: -0.0008268986130133271
    2. '.' → logprob: -7.125826835632324
    3. ' exit' → logprob: -11.750826835632324
    4. '.e' → logprob: -12.375826835632324
    5. '.ex' → logprob: -12.500826835632324
    6. 'exit' → logprob: -12.625826835632324
    7. ' .' → logprob: -13.625826835632324
    8. '.EXIT' → logprob: -14.375826835632324
    9. '	exit' → logprob: -14.625826835632324
    10. '.Exit' → logprob: -15.000826835632324

Token 33: '()

' (ID: 5874)
  Prédit: '()'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '()' → logprob: -0.008649199269711971
    2. '(' → logprob: -4.7586493492126465
    3. '()
' → logprob: -10.633648872375488
    4. '()

' → logprob: -12.383648872375488
    5. '()`' → logprob: -13.133648872375488
    6. '(
' → logprob: -13.758648872375488
    7. '())' → logprob: -14.258648872375488
    8. '()]' → logprob: -14.508648872375488
    9. '()<' → logprob: -15.008648872375488
    10. '()\' → logprob: -15.008648872375488

Token 34: 'print' (ID: 1598)
  Prédit: 'print'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'print' → logprob: -0.003930098842829466
    2. 'else' → logprob: -5.87893009185791
    3. '```' → logprob: -7.25393009185791
    4. 'No' → logprob: -8.50393009185791
    5. ' print' → logprob: -9.50393009185791
    6. '  
' → logprob: -10.25393009185791
    7. '    
' → logprob: -10.37893009185791
    8. 'Print' → logprob: -10.62893009185791
    9. '#' → logprob: -11.12893009185791
    10. '   ' → logprob: -11.62893009185791

Token 35: '("' (ID: 568)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(' → logprob: -0.07544805854558945
    2. '("' → logprob: -2.8254480361938477
    3. '("("' → logprob: -4.325448036193848
    4. '()' → logprob: -9.325448036193848
    5. '(True' → logprob: -10.450448036193848
    6. '('' → logprob: -11.325448036193848
    7. '("")' → logprob: -11.325448036193848
    8. '("(' → logprob: -11.825448036193848
    9. '"' → logprob: -11.950448036193848
    10. '("""' → logprob: -12.700448036193848

Token 36: 'Yes' (ID: 13022)
  Prédit: 'Yes'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'Yes' → logprob: -0.00012082771718269214
    2. 'Ye' → logprob: -9.125121116638184
    3. 'Ok' → logprob: -11.875121116638184
    4. 'OK' → logprob: -13.375121116638184
    5. '")' → logprob: -13.750121116638184
    6. 'No' → logprob: -13.875121116638184
    7. 'YES' → logprob: -14.250121116638184
    8. ' Yes' → logprob: -15.500121116638184
    9. '"' → logprob: -16.250120162963867
    10. 'Okay' → logprob: -16.500120162963867

Token 37: '")' (ID: 1405)
  Prédit: '")'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '")' → logprob: -1.3544423381972592e-05
    2. ')' → logprob: -11.25001335144043
    3. '")
' → logprob: -15.37501335144043
    4. ')")' → logprob: -15.87501335144043
    5. '"' → logprob: -17.25001335144043
    6. '```' → logprob: -18.25001335144043
    7. '')' → logprob: -18.50001335144043
    8. '")

' → logprob: -18.50001335144043
    9. '!")' → logprob: -19.00001335144043
    10. '`)' → logprob: -19.75001335144043


RÉSUMÉ:
--------------------------------------------------------------------------------
Total des tokens analysés: 35
Tokens correctement prédits (1ère position, stricte): 13
Tokens correctement prédits (1ère position, avec adaptation): 13
Tokens correctement prédits (top 10): 28
Précision stricte (1ère position): 37.14%
Précision adaptée (1ère position): 37.14%
Précision (top 10): 80.00%
================================================================================
