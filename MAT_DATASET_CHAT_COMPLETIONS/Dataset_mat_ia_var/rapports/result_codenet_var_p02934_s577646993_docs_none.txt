================================================================================
ANALYSE DE PRÉDICTION TOKEN PAR TOKEN (BATCH API)
Date: 2025-06-04 19:47:49
Modèle de tokenisation: gpt-4o-mini
================================================================================

SCRIPT ANALYSÉ:
--------------------------------------------------------------------------------
n=int(input())
s=list(map(int, input().split()))
n=0
for i in s:
    n+=1/i
print(1/n)
--------------------------------------------------------------------------------

RÉSULTATS D'ANALYSE TOKEN PAR TOKEN:
--------------------------------------------------------------------------------
Token 0: 'n' (ID: 77)
  → Token d'amorce (pas de prédiction)

Token 1: '=int' (ID: 37431)
  → Token d'amorce (pas de prédiction)

Token 2: '(input' (ID: 10054)
  → Token d'amorce (pas de prédiction)

Token 3: '())
' (ID: 4574)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ')' → logprob: -0.33144018054008484
    2. '(' → logprob: -1.3314402103424072
    3. '()' → logprob: -5.206439971923828
    4. '())' → logprob: -5.206439971923828
    5. '```' → logprob: -5.706439971923828
    6. '")' → logprob: -7.331439971923828
    7. '`)' → logprob: -7.456439971923828
    8. '(
' → logprob: -7.706439971923828
    9. '<|end|>' → logprob: -7.956439971923828
    10. '')' → logprob: -7.956439971923828

Token 4: 's' (ID: 82)
  Prédit: 'if'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'if' → logprob: -1.308822751045227
    2. '+' → logprob: -1.683822751045227
    3. '*' → logprob: -2.0588226318359375
    4. 'for' → logprob: -2.3088226318359375
    5. 'i' → logprob: -2.6838226318359375
    6. '#' → logprob: -2.8088226318359375
    7. '\n' → logprob: -3.3088226318359375
    8. 's' → logprob: -3.4338226318359375
    9. '%' → logprob: -3.4338226318359375
    10. ''' → logprob: -4.0588226318359375

Token 5: '=list' (ID: 93413)
  Prédit: 'um'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'um' → logprob: -0.8559496998786926
    2. 'u' → logprob: -1.4809496402740479
    3. '.' → logprob: -2.605949640274048
    4. 'tr' → logprob: -2.730949640274048
    5. 't' → logprob: -2.855949640274048
    6. '[' → logprob: -2.980949640274048
    7. '=' → logprob: -3.230949640274048
    8. ' =' → logprob: -3.605949640274048
    9. 'r' → logprob: -5.855949878692627
    10. 'tri' → logprob: -6.105949878692627

Token 6: '(map' (ID: 16946)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '(' → logprob: -0.007938416674733162
    2. '(s' → logprob: -4.882938385009766
    3. 's' → logprob: -8.882938385009766
    4. '(input' → logprob: -10.257938385009766
    5. '()' → logprob: -10.632938385009766
    6. '(range' → logprob: -10.882938385009766
    7. '(n' → logprob: -11.007938385009766
    8. '("("' → logprob: -11.507938385009766
    9. '((' → logprob: -11.632938385009766
    10. '(
' → logprob: -11.882938385009766

Token 7: '(int' (ID: 2742)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(' → logprob: -0.033215560019016266
    2. '(int' → logprob: -3.7832155227661133
    3. '(str' → logprob: -5.783215522766113
    4. '(lambda' → logprob: -5.783215522766113
    5. '(input' → logprob: -6.408215522766113
    6. ')' → logprob: -7.658215522766113
    7. '<|end|>' → logprob: -7.658215522766113
    8. '(eval' → logprob: -8.408215522766113
    9. '[int' → logprob: -8.908215522766113
    10. '(len' → logprob: -9.533215522766113

Token 8: ',' (ID: 11)
  Prédit: '(input'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '(input' → logprob: -0.003203019965440035
    2. '(' → logprob: -5.87820291519165
    3. ')' → logprob: -8.503203392028809
    4. '))' → logprob: -10.128203392028809
    5. '=input' → logprob: -10.628203392028809
    6. ',input' → logprob: -10.753203392028809
    7. '```' → logprob: -10.878203392028809
    8. '(eval' → logprob: -11.753203392028809
    9. '((' → logprob: -11.753203392028809
    10. '(user' → logprob: -11.878203392028809

Token 9: ' input' (ID: 3422)
  Prédit: 'input'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'input' → logprob: -0.0012472548987716436
    2. ' input' → logprob: -6.751247406005859
    3. '(input' → logprob: -9.50124740600586
    4. ',input' → logprob: -13.87624740600586
    5. ')' → logprob: -14.25124740600586
    6. '=input' → logprob: -14.62624740600586
    7. '<input' → logprob: -15.75124740600586
    8. '	input' → logprob: -16.87624740600586
    9. '[input' → logprob: -16.87624740600586
    10. 'str' → logprob: -17.50124740600586

Token 10: '().' (ID: 1454)
  Prédit: '())'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '())' → logprob: -0.11955216526985168
    2. '()))' → logprob: -2.7445521354675293
    3. '()' → logprob: -3.1195521354675293
    4. '(' → logprob: -5.869552135467529
    5. '()));' → logprob: -8.244552612304688
    6. ')' → logprob: -8.369552612304688
    7. '().' → logprob: -8.494552612304688
    8. '()>' → logprob: -8.869552612304688
    9. '());' → logprob: -8.994552612304688
    10. '(()' → logprob: -9.244552612304688

Token 11: 'split' (ID: 13627)
  Prédit: 'split'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'split' → logprob: -0.000924561289139092
    2. 'strip' → logprob: -7.000924587249756
    3. 'rstrip' → logprob: -11.750924110412598
    4. ' split' → logprob: -12.375924110412598
    5. '(split' → logprob: -14.125924110412598
    6. ')' → logprob: -16.500925064086914
    7. 'spl' → logprob: -17.000925064086914
    8. ' strip' → logprob: -17.500925064086914
    9. 's' → logprob: -17.625925064086914
    10. 'replace' → logprob: -18.250925064086914

Token 12: '()))
' (ID: 24521)
  Prédit: '))'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '))' → logprob: -1.0900065898895264
    2. '()))' → logprob: -1.0900065898895264
    3. ')' → logprob: -2.0900065898895264
    4. '(' → logprob: -2.2150065898895264
    5. '())' → logprob: -2.5900065898895264
    6. '('' → logprob: -4.2150068283081055
    7. '()' → logprob: -5.5900068283081055
    8. ''))' → logprob: -7.9650068283081055
    9. ')))' → logprob: -8.715006828308105
    10. '(','' → logprob: -8.840006828308105

Token 13: 'n' (ID: 77)
  Prédit: 's'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 's' → logprob: -0.4451366662979126
    2. '.' → logprob: -2.195136547088623
    3. 'c' → logprob: -2.695136547088623
    4. 'r' → logprob: -3.570136547088623
    5. 'for' → logprob: -3.695136547088623
    6. 'a' → logprob: -4.070136547088623
    7. '#' → logprob: -4.445136547088623
    8. 'd' → logprob: -4.445136547088623
    9. ')' → logprob: -4.570136547088623
    10. 'i' → logprob: -4.695136547088623

Token 14: '=' (ID: 28)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ')' → logprob: -1.285507082939148
    2. '[' → logprob: -1.535507082939148
    3. '<|end|>' → logprob: -1.910507082939148
    4. '```' → logprob: -2.4105072021484375
    5. '+' → logprob: -2.5355072021484375
    6. '\n' → logprob: -2.7855072021484375
    7. '#' → logprob: -3.5355072021484375
    8. '
' → logprob: -3.6605072021484375
    9. '*' → logprob: -3.7855072021484375
    10. '%' → logprob: -4.5355072021484375

Token 15: '0' (ID: 15)
  Prédit: 'len'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'len' → logprob: -0.009584194049239159
    2. 'int' → logprob: -5.384584426879883
    3. 'n' → logprob: -5.884584426879883
    4. 's' → logprob: -6.384584426879883
    5. '0' → logprob: -8.259584426879883
    6. ' len' → logprob: -9.259584426879883
    7. '1' → logprob: -10.384584426879883
    8. 'sum' → logprob: -10.634584426879883
    9. '5' → logprob: -10.759584426879883
    10. '2' → logprob: -11.009584426879883

Token 16: '
' (ID: 198)
  Prédit: '+'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '+' → logprob: -0.3850995898246765
    2. 'for' → logprob: -2.0100996494293213
    3. ' ' → logprob: -2.5100996494293213
    4. ' for' → logprob: -2.6350996494293213
    5. '<|end|>' → logprob: -4.510099411010742
    6. ')' → logprob: -5.760099411010742
    7. '' → logprob: -5.885099411010742
    8. '\' → logprob: -6.135099411010742
    9. 'n' → logprob: -6.260099411010742
    10. '*' → logprob: -6.510099411010742

Token 17: 'for' (ID: 1938)
  Prédit: ' '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' ' → logprob: -0.26591357588768005
    2. 'for' → logprob: -2.140913486480713
    3. ' for' → logprob: -2.765913486480713
    4. '+' → logprob: -3.390913486480713
    5. 's' → logprob: -5.015913486480713
    6. ')' → logprob: -5.140913486480713
    7. '<|end|>' → logprob: -6.140913486480713
    8. ' )' → logprob: -6.515913486480713
    9. '=' → logprob: -7.890913486480713
    10. 'i' → logprob: -8.015913963317871

Token 18: ' i' (ID: 575)
  Prédit: ' i'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' i' → logprob: -0.49446889758110046
    2. ' ' → logprob: -0.9944689273834229
    3. ' s' → logprob: -4.119468688964844
    4. 'i' → logprob: -6.369468688964844
    5. '_' → logprob: -6.619468688964844
    6. 's' → logprob: -8.369468688964844
    7. '  ' → logprob: -8.369468688964844
    8. ' _' → logprob: -8.494468688964844
    9. ' x' → logprob: -9.869468688964844
    10. ' range' → logprob: -10.119468688964844

Token 19: ' in' (ID: 306)
  Prédit: ' in'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' in' → logprob: -0.4856207072734833
    2. 'in' → logprob: -0.9856207370758057
    3. ' ' → logprob: -4.610620498657227
    4. ')' → logprob: -8.235620498657227
    5. '  ' → logprob: -8.360620498657227
    6. '[' → logprob: -8.485620498657227
    7. '_' → logprob: -8.985620498657227
    8. ' n' → logprob: -9.360620498657227
    9. '<|end|>' → logprob: -9.360620498657227
    10. 'n' → logprob: -9.610620498657227

Token 20: ' s' (ID: 265)
  Prédit: 'range'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'range' → logprob: -0.5422728061676025
    2. ' range' → logprob: -0.9172728061676025
    3. 's' → logprob: -4.167272567749023
    4. ' s' → logprob: -5.667272567749023
    5. '(range' → logprob: -12.667272567749023
    6. ' ' → logprob: -12.792272567749023
    7. '	range' → logprob: -13.042272567749023
    8. ')' → logprob: -13.167272567749023
    9. ' xrange' → logprob: -14.167272567749023
    10. 'r' → logprob: -14.167272567749023

Token 21: ':
' (ID: 734)
  Prédit: ':'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ':' → logprob: -0.04655859246850014
    2. '[' → logprob: -4.046558380126953
    3. ' :' → logprob: -4.171558380126953
    4. ' in' → logprob: -4.796558380126953
    5. 'in' → logprob: -6.921558380126953
    6. '[:]' → logprob: -6.921558380126953
    7. '+' → logprob: -7.671558380126953
    8. '[:' → logprob: -8.046558380126953
    9. ',' → logprob: -8.296558380126953
    10. '[n' → logprob: -8.671558380126953

Token 22: '   ' (ID: 271)
  Prédit: ' n'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' n' → logprob: -1.0519264936447144
    2. ' ' → logprob: -1.1769264936447144
    3. '   ' → logprob: -2.176926612854004
    4. ' if' → logprob: -2.176926612854004
    5. 'n' → logprob: -2.426926612854004
    6. '    ' → logprob: -3.926926612854004
    7. 'if' → logprob: -5.926926612854004
    8. '```' → logprob: -7.051926612854004
    9. '  ' → logprob: -7.426926612854004
    10. ' i' → logprob: -7.426926612854004

Token 23: ' n' (ID: 297)
  Prédit: ' n'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' n' → logprob: -0.9275699257850647
    2. ' if' → logprob: -1.17756986618042
    3. 'n' (adapté à ' n') → logprob: -1.42756986618042
    4. 'if' → logprob: -3.67756986618042
    5. 's' → logprob: -4.17756986618042
    6. ' ' → logprob: -5.17756986618042
    7. ' i' → logprob: -5.30256986618042
    8. '   ' → logprob: -6.05256986618042
    9. 'i' → logprob: -6.30256986618042
    10. ' s' → logprob: -7.05256986618042

Token 24: '+=' (ID: 18287)
  Prédit: '+='
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '+=' → logprob: -0.10160114616155624
    2. ' +=' → logprob: -2.3516011238098145
    3. '+' → logprob: -6.9766011238098145
    4. '=' → logprob: -7.8516011238098145
    5. ' =' → logprob: -11.101601600646973
    6. '+='' → logprob: -11.101601600646973
    7. ']+=' → logprob: -11.601601600646973
    8. '+="' → logprob: -11.726601600646973
    9. '+=(' → logprob: -11.726601600646973
    10. '==' → logprob: -12.601601600646973

Token 25: '1' (ID: 16)
  Prédit: 'i'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'i' → logprob: -0.0018507008207961917
    2. ' i' → logprob: -6.376850605010986
    3. '1' → logprob: -8.876851081848145
    4. ' ' → logprob: -11.876851081848145
    5. 'int' → logprob: -13.751851081848145
    6. '   ' → logprob: -14.751851081848145
    7. '  ' → logprob: -15.751851081848145
    8. '(i' → logprob: -16.126850128173828
    9. '	i' → logprob: -16.126850128173828
    10. ' ' → logprob: -17.751850128173828

Token 26: '/i' (ID: 32242)
  Prédit: ''
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False

Token 27: '
' (ID: 198)
  Prédit: 'print'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'print' → logprob: -0.36994680762290955
    2. '
' → logprob: -1.369946837425232
    3. 'n' → logprob: -3.9949467182159424
    4. '\n' → logprob: -5.1199469566345215
    5. ')' → logprob: -5.4949469566345215
    6. '<|end|>' → logprob: -5.4949469566345215
    7. 'sum' → logprob: -5.6199469566345215
    8. '/' → logprob: -5.8699469566345215
    9. ' ' → logprob: -5.9949469566345215
    10. '  
' → logprob: -6.3699469566345215

Token 28: 'print' (ID: 1598)
  Prédit: 'print'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'print' → logprob: -0.9956613779067993
    2. 'n' → logprob: -1.6206613779067993
    3. ')' → logprob: -2.3706612586975098
    4. 'r' → logprob: -2.6206612586975098
    5. '
' → logprob: -2.7456612586975098
    6. 'sum' → logprob: -3.2456612586975098
    7. 's' → logprob: -3.6206612586975098
    8. 'result' → logprob: -3.7456612586975098
    9. 'p' → logprob: -4.12066125869751
    10. 'm' → logprob: -4.12066125869751

Token 29: '(' (ID: 7)
  Prédit: '('
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(' → logprob: -0.004482223652303219
    2. '(s' → logprob: -5.754482269287109
    3. '(n' → logprob: -7.379482269287109
    4. '(sum' → logprob: -8.62948226928711
    5. '((' → logprob: -8.87948226928711
    6. 's' → logprob: -9.37948226928711
    7. '(round' → logprob: -9.62948226928711
    8. '("("' → logprob: -9.62948226928711
    9. '('' → logprob: -9.75448226928711
    10. '()' → logprob: -10.25448226928711

Token 30: '1' (ID: 16)
  Prédit: '1'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '1' → logprob: -0.14781655371189117
    2. 'n' → logprob: -2.3978166580200195
    3. ')' → logprob: -3.7728166580200195
    4. 'len' → logprob: -3.8978166580200195
    5. '3' → logprob: -6.5228166580200195
    6. '(' → logprob: -7.1478166580200195
    7. 'round' → logprob: -7.3978166580200195
    8. '`)' → logprob: -9.89781665802002
    9. '")' → logprob: -10.02281665802002
    10. '(n' → logprob: -10.02281665802002

Token 31: '/n' (ID: 18292)
  Prédit: '/'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '/' → logprob: -0.007417678367346525
    2. '/n' → logprob: -5.757417678833008
    3. '/)' → logprob: -5.882417678833008
    4. ')' → logprob: -7.382417678833008
    5. ' /' → logprob: -7.632417678833008
    6. '/s' → logprob: -8.132417678833008
    7. '/')' → logprob: -11.132417678833008
    8. '/i' → logprob: -12.507417678833008
    9. '/(' → logprob: -12.632417678833008
    10. '/div' → logprob: -12.632417678833008

Token 32: ')' (ID: 8)
  Prédit: ')'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')' → logprob: -1.700132997939363e-05
    2. '))' → logprob: -11.125017166137695
    3. ' )' → logprob: -13.375017166137695
    4. ')`' → logprob: -15.000017166137695
    5. ')
' → logprob: -15.625017166137695
    6. '`)' → logprob: -16.625017166137695
    7. ')))' → logprob: -17.125017166137695
    8. '')' → logprob: -17.750017166137695
    9. '）' → logprob: -17.875017166137695
    10. '}' → logprob: -18.500017166137695


RÉSUMÉ:
--------------------------------------------------------------------------------
Total des tokens analysés: 30
Tokens correctement prédits (1ère position, stricte): 9
Tokens correctement prédits (1ère position, avec adaptation): 9
Tokens correctement prédits (top 10): 20
Précision stricte (1ère position): 30.00%
Précision adaptée (1ère position): 30.00%
Précision (top 10): 66.67%
================================================================================
