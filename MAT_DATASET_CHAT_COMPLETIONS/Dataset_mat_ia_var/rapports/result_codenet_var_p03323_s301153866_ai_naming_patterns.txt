================================================================================
ANALYSE DE PRÉDICTION TOKEN PAR TOKEN (BATCH API)
Date: 2025-06-04 20:15:45
Modèle de tokenisation: gpt-4o-mini
================================================================================

SCRIPT ANALYSÉ:
--------------------------------------------------------------------------------
input_value_first, input_value_second = map(int, input().split())
maximum_value = max(input_value_first, input_value_second)
limit_value = 8
if maximum_value > limit_value:
    print(':(')
else:
    print('Yay!')
--------------------------------------------------------------------------------

RÉSULTATS D'ANALYSE TOKEN PAR TOKEN:
--------------------------------------------------------------------------------
Token 0: 'input' (ID: 2586)
  → Token d'amorce (pas de prédiction)

Token 1: '_value' (ID: 6734)
  → Token d'amorce (pas de prédiction)

Token 2: '_first' (ID: 29347)
  → Token d'amorce (pas de prédiction)

Token 3: ',' (ID: 11)
  Prédit: '_'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '_' → logprob: -0.0792456716299057
    2. '+' → logprob: -3.3292455673217773
    3. '.' → logprob: -4.079245567321777
    4. '[' → logprob: -4.704245567321777
    5. '=' → logprob: -4.829245567321777
    6. ')' → logprob: -6.579245567321777
    7. '```' → logprob: -6.704245567321777
    8. ':' → logprob: -7.204245567321777
    9. ' +' → logprob: -7.454245567321777
    10. ' =' → logprob: -7.579245567321777

Token 4: ' input' (ID: 3422)
  Prédit: 'input'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'input' → logprob: -0.30299726128578186
    2. ' ' → logprob: -2.302997350692749
    3. '_' → logprob: -2.677997350692749
    4. ' input' → logprob: -2.802997350692749
    5. '_input' → logprob: -4.30299711227417
    6. ' ,' → logprob: -5.67799711227417
    7. '=' → logprob: -5.80299711227417
    8. 'space' → logprob: -5.80299711227417
    9. ' =' → logprob: -6.17799711227417
    10. ' _' → logprob: -7.05299711227417

Token 5: '_value' (ID: 6734)
  Prédit: '_'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_' → logprob: -0.08551045507192612
    2. ')' → logprob: -3.460510492324829
    3. '.' → logprob: -3.710510492324829
    4. '[' → logprob: -4.21051025390625
    5. '_value' → logprob: -5.58551025390625
    6. '=' → logprob: -5.83551025390625
    7. '```' → logprob: -6.58551025390625
    8. ')_' → logprob: -7.21051025390625
    9. '._' → logprob: -7.58551025390625
    10. ',' → logprob: -8.21051025390625

Token 6: '_second' (ID: 67724)
  Prédit: '_'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '_' → logprob: -0.014060676097869873
    2. ')' → logprob: -5.5140604972839355
    3. '=' → logprob: -5.5140604972839355
    4. '[' → logprob: -5.7640604972839355
    5. ',' → logprob: -7.2640604972839355
    6. '.' → logprob: -7.2640604972839355
    7. '```' → logprob: -7.6390604972839355
    8. ' =' → logprob: -8.514060974121094
    9. '_,' → logprob: -9.764060974121094
    10. '+' → logprob: -10.014060974121094

Token 7: ' =' (ID: 314)
  Prédit: '_'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '_' → logprob: -0.0842793732881546
    2. ',' → logprob: -3.0842792987823486
    3. '=' → logprob: -3.7092792987823486
    4. ')' → logprob: -5.584279537200928
    5. '+' → logprob: -6.209279537200928
    6. '.' → logprob: -6.459279537200928
    7. '```' → logprob: -6.709279537200928
    8. '[' → logprob: -7.209279537200928
    9. '(' → logprob: -8.08427906036377
    10. ':' → logprob: -8.70927906036377

Token 8: ' map' (ID: 4014)
  Prédit: ' input'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' input' → logprob: -0.6883497834205627
    2. 'input' → logprob: -0.9383497834205627
    3. ' ' → logprob: -2.563349723815918
    4. ' []' → logprob: -4.188349723815918
    5. ' map' → logprob: -5.188349723815918
    6. ' int' → logprob: -5.688349723815918
    7. '0' → logprob: -6.688349723815918
    8. ' [' → logprob: -7.188349723815918
    9. 'map' → logprob: -7.313349723815918
    10. 'int' → logprob: -7.688349723815918

Token 9: '(int' (ID: 2742)
  Prédit: '(int'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(int' → logprob: -0.9388097524642944
    2. '(lambda' → logprob: -1.1888097524642944
    3. '(' → logprob: -1.6888097524642944
    4. '(str' → logprob: -2.688809871673584
    5. '<|end|>' → logprob: -3.938809871673584
    6. '(input' → logprob: -4.688809871673584
    7. '```' → logprob: -5.063809871673584
    8. 'int' → logprob: -5.938809871673584
    9. '[int' → logprob: -6.188809871673584
    10. '(eval' → logprob: -6.188809871673584

Token 10: ',' (ID: 11)
  Prédit: '(input'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(input' → logprob: -0.015162594616413116
    2. ')' → logprob: -4.515162467956543
    3. 'input' → logprob: -6.265162467956543
    4. '(' → logprob: -6.765162467956543
    5. '(user' → logprob: -7.765162467956543
    6. ' input' → logprob: -8.515162467956543
    7. ',input' → logprob: -9.015162467956543
    8. ',' → logprob: -10.015162467956543
    9. '```' → logprob: -10.015162467956543
    10. '[input' → logprob: -10.265162467956543

Token 11: ' input' (ID: 3422)
  Prédit: 'input'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'input' → logprob: -0.07891303300857544
    2. ' input' → logprob: -2.5789129734039307
    3. '(input' → logprob: -11.203912734985352
    4. ')' → logprob: -11.953912734985352
    5. 'user' → logprob: -14.078912734985352
    6. ',input' → logprob: -14.828912734985352
    7. '```' → logprob: -14.953912734985352
    8. '[input' → logprob: -14.953912734985352
    9. 'str' → logprob: -15.453912734985352
    10. '<input' → logprob: -15.453912734985352

Token 12: '().' (ID: 1454)
  Prédit: '()'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '()' → logprob: -0.7480541467666626
    2. '())' → logprob: -1.3730541467666626
    3. '(' → logprob: -1.4980541467666626
    4. '`()' → logprob: -3.873054027557373
    5. '('' → logprob: -5.248054027557373
    6. ')' → logprob: -5.248054027557373
    7. '().' → logprob: -5.373054027557373
    8. '(()' → logprob: -5.873054027557373
    9. '```' → logprob: -6.248054027557373
    10. ' ())' → logprob: -6.373054027557373

Token 13: 'split' (ID: 13627)
  Prédit: 'split'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'split' → logprob: -4.0722858102526516e-05
    2. 'strip' → logprob: -10.250041007995605
    3. ' split' → logprob: -13.000041007995605
    4. 'rstrip' → logprob: -13.625041007995605
    5. ')' → logprob: -14.000041007995605
    6. 'spl' → logprob: -14.250041007995605
    7. '(split' → logprob: -16.25004005432129
    8. 'startswith' → logprob: -16.50004005432129
    9. '```' → logprob: -16.75004005432129
    10. '_split' → logprob: -17.00004005432129

Token 14: '())
' (ID: 4574)
  Prédit: '())'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '())' → logprob: -0.07145113497972488
    2. ')' → logprob: -2.821451187133789
    3. '()' → logprob: -5.446451187133789
    4. '))' → logprob: -5.821451187133789
    5. '()))' → logprob: -6.196451187133789
    6. '(' → logprob: -9.571451187133789
    7. '`)' → logprob: -10.821451187133789
    8. ' ())' → logprob: -11.321451187133789
    9. '('' → logprob: -12.821451187133789
    10. '()),' → logprob: -13.321451187133789

Token 15: 'maximum' (ID: 78601)
  Prédit: '+'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '+' → logprob: -0.06223006546497345
    2. '+
' → logprob: -3.812230110168457
    3. '*' → logprob: -4.437230110168457
    4. '#' → logprob: -4.562230110168457
    5. '<|end|>' → logprob: -5.687230110168457
    6. ')' → logprob: -5.937230110168457
    7. 'if' → logprob: -5.937230110168457
    8. ',' → logprob: -6.312230110168457
    9. '
' → logprob: -7.187230110168457
    10. ' ' → logprob: -7.437230110168457

Token 16: '_value' (ID: 6734)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(' → logprob: -0.00548963388428092
    2. '_' → logprob: -5.880489826202393
    3. '(max' → logprob: -6.505489826202393
    4. '_max' → logprob: -7.255489826202393
    5. '_value' → logprob: -9.130489349365234
    6. '_parent' → logprob: -9.130489349365234
    7. '(_)' → logprob: -9.755489349365234
    8. ')' → logprob: -10.255489349365234
    9. '```' → logprob: -10.755489349365234
    10. '()' → logprob: -11.005489349365234

Token 17: ' =' (ID: 314)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '(' → logprob: -0.003537351731210947
    2. '_' → logprob: -6.628537178039551
    3. '()' → logprob: -7.128537178039551
    4. '(max' → logprob: -7.253537178039551
    5. '_max' → logprob: -8.62853717803955
    6. '=' → logprob: -9.00353717803955
    7. ')' → logprob: -9.75353717803955
    8. ',' → logprob: -9.87853717803955
    9. 'max' → logprob: -10.00353717803955
    10. '.' → logprob: -10.00353717803955

Token 18: ' max' (ID: 2999)
  Prédit: ' max'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' max' → logprob: -0.1002335250377655
    2. 'max' → logprob: -2.350233554840088
    3. ' input' → logprob: -10.97523307800293
    4. '(max' → logprob: -12.60023307800293
    5. ' ' → logprob: -12.97523307800293
    6. 'input' → logprob: -13.10023307800293
    7. ' maximum' → logprob: -14.22523307800293
    8. '0' → logprob: -14.85023307800293
    9. '	max' → logprob: -15.10023307800293
    10. '[max' → logprob: -15.60023307800293

Token 19: '(input' (ID: 10054)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(' → logprob: -0.35044071078300476
    2. '(input' → logprob: -1.2254407405853271
    3. '(max' → logprob: -6.475440502166748
    4. '(_' → logprob: -8.725440979003906
    5. '(user' → logprob: -9.725440979003906
    6. '(value' → logprob: -9.975440979003906
    7. '((' → logprob: -10.475440979003906
    8. ' (' → logprob: -10.600440979003906
    9. '(first' → logprob: -10.600440979003906
    10. '(
' → logprob: -11.100440979003906

Token 20: '_value' (ID: 6734)
  Prédit: '_value'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_value' → logprob: -0.014118845574557781
    2. '_' → logprob: -4.389118671417236
    3. ')_' → logprob: -6.889118671417236
    4. '_val' → logprob: -7.639118671417236
    5. '_Value' → logprob: -10.889119148254395
    6. ' _' → logprob: -11.014119148254395
    7. ')' → logprob: -11.014119148254395
    8. '_v' → logprob: -11.389119148254395
    9. '_values' → logprob: -11.514119148254395
    10. '```' → logprob: -12.264119148254395

Token 21: '_first' (ID: 29347)
  Prédit: '_first'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_first' → logprob: -0.16278177499771118
    2. '_second' → logprob: -1.9127817153930664
    3. '_f' → logprob: -7.037781715393066
    4. '_' → logprob: -7.162781715393066
    5. ')_' → logprob: -7.912781715393066
    6. '_value' → logprob: -8.537781715393066
    7. '_)' → logprob: -8.912781715393066
    8. '_s' → logprob: -9.037781715393066
    9. '_,' → logprob: -10.537781715393066
    10. ')' → logprob: -10.662781715393066

Token 22: ',' (ID: 11)
  Prédit: ','
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ',' → logprob: -0.00046451209345832467
    2. ' ,' → logprob: -8.12546443939209
    3. ',input' → logprob: -9.37546443939209
    4. ')' → logprob: -9.50046443939209
    5. ' ' → logprob: -13.00046443939209
    6. ',)' → logprob: -13.25046443939209
    7. ',
' → logprob: -13.62546443939209
    8. '),' → logprob: -13.87546443939209
    9. ',

' → logprob: -14.62546443939209
    10. ',value' → logprob: -14.75046443939209

Token 23: ' input' (ID: 3422)
  Prédit: ' input'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' input' → logprob: -0.142714723944664
    2. 'input' → logprob: -2.017714738845825
    3. ' ' → logprob: -10.267714500427246
    4. ')' → logprob: -13.892714500427246
    5. '=input' → logprob: -14.017714500427246
    6. ' ' → logprob: -14.142714500427246
    7. '(input' → logprob: -14.392714500427246
    8. ',input' → logprob: -14.642714500427246
    9. '_input' → logprob: -14.892714500427246
    10. '0' → logprob: -15.767714500427246

Token 24: '_value' (ID: 6734)
  Prédit: '_value'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_value' → logprob: -2.4272752852994017e-05
    2. '_' → logprob: -11.62502384185791
    3. ')_' → logprob: -11.87502384185791
    4. '_val' → logprob: -12.00002384185791
    5. 'value' → logprob: -14.25002384185791
    6. '_Value' → logprob: -15.25002384185791
    7. ' _' → logprob: -15.37502384185791
    8. ')' → logprob: -15.50002384185791
    9. '_VALUE' → logprob: -15.50002384185791
    10. '_values' → logprob: -16.125024795532227

Token 25: '_second' (ID: 67724)
  Prédit: '_second'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_second' → logprob: -0.004325910937041044
    2. '_first' → logprob: -5.504325866699219
    3. '_' → logprob: -9.004325866699219
    4. '_value' → logprob: -9.754325866699219
    5. ')_' → logprob: -10.379325866699219
    6. '_s' → logprob: -10.629325866699219
    7. '_se' → logprob: -12.629325866699219
    8. '_f' → logprob: -12.629325866699219
    9. '_input' → logprob: -14.129325866699219
    10. '_)' → logprob: -14.629325866699219

Token 26: ')
' (ID: 446)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')' → logprob: -1.7432603272027336e-06
    2. '))' → logprob: -14.500001907348633
    3. ')
' → logprob: -14.750001907348633
    4. ' )' → logprob: -14.875001907348633
    5. '`)' → logprob: -15.375001907348633
    6. '')' → logprob: -16.500001907348633
    7. ')`' → logprob: -17.750001907348633
    8. '```' → logprob: -17.750001907348633
    9. '),' → logprob: -18.000001907348633
    10. ',' → logprob: -18.875001907348633

Token 27: 'limit' (ID: 19698)
  Prédit: '
'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '
' → logprob: -0.8346994519233704
    2. '+' → logprob: -1.8346993923187256
    3. '```' → logprob: -2.4596993923187256
    4. '<|end|>' → logprob: -2.5846993923187256
    5. 'print' → logprob: -2.8346993923187256
    6. ')' → logprob: -2.9596993923187256
    7. '\n' → logprob: -3.3346993923187256
    8. '*' → logprob: -3.5846993923187256
    9. ' ' → logprob: -4.334699630737305
    10. '.' → logprob: -4.834699630737305

Token 28: '_value' (ID: 6734)
  Prédit: '_'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_' → logprob: -0.03224703297019005
    2. ')' → logprob: -4.407247066497803
    3. '=' → logprob: -4.782247066497803
    4. ' =' → logprob: -5.282247066497803
    5. '_value' → logprob: -6.032247066497803
    6. 's' → logprob: -6.907247066497803
    7. '_space' → logprob: -7.157247066497803
    8. 'ed' → logprob: -8.407246589660645
    9. '_)' → logprob: -8.532246589660645
    10. ',' → logprob: -8.657246589660645

Token 29: ' =' (ID: 314)
  Prédit: ' ='
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' =' → logprob: -0.42193180322647095
    2. '=' → logprob: -1.4219317436218262
    3. '_' → logprob: -2.296931743621826
    4. ' ' → logprob: -7.171931743621826
    5. ' _' → logprob: -7.546931743621826
    6. ')' → logprob: -7.546931743621826
    7. ',' → logprob: -8.546932220458984
    8. '_space' → logprob: -9.296932220458984
    9. '>' → logprob: -9.546932220458984
    10. ' ==' → logprob: -10.296932220458984

Token 30: ' ' (ID: 220)
  Prédit: ' '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' ' → logprob: -0.32714197039604187
    2. '100' → logprob: -1.9521420001983643
    3. '10' → logprob: -3.2021420001983643
    4. ' maximum' → logprob: -3.2021420001983643
    5. 'maximum' → logprob: -3.7021420001983643
    6. ' max' → logprob: -4.327141761779785
    7. 'max' → logprob: -5.202141761779785
    8. ' int' → logprob: -5.452141761779785
    9. 'int' → logprob: -6.327141761779785
    10. '255' → logprob: -7.077141761779785

Token 31: '8' (ID: 23)
  Prédit: '100'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '100' → logprob: -0.6772959232330322
    2. 'maximum' → logprob: -1.4272959232330322
    3. '10' → logprob: -1.9272959232330322
    4. 'int' → logprob: -3.0522959232330322
    5. 'max' → logprob: -3.6772959232330322
    6. 'minimum' → logprob: -5.177295684814453
    7. '50' → logprob: -5.427295684814453
    8. '200' → logprob: -5.552295684814453
    9. '500' → logprob: -6.052295684814453
    10. ' ' → logprob: -6.052295684814453

Token 32: '
' (ID: 198)
  Prédit: '
'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '
' → logprob: -0.815615713596344
    2. '*' → logprob: -2.065615653991699
    3. '<|end|>' → logprob: -2.565615653991699
    4. '**' → logprob: -2.690615653991699
    5. 'if' → logprob: -2.815615653991699
    6. '+' → logprob: -3.315615653991699
    7. '-' → logprob: -3.565615653991699
    8. '\n' → logprob: -3.690615653991699
    9. ' ' → logprob: -3.815615653991699
    10. '\' → logprob: -3.815615653991699

Token 33: 'if' (ID: 366)
  Prédit: 'if'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'if' → logprob: -0.18170784413814545
    2. '*' → logprob: -2.5567078590393066
    3. ' if' → logprob: -3.8067078590393066
    4. '+' → logprob: -5.056707859039307
    5. '```' → logprob: -5.181707859039307
    6. '>' → logprob: -5.306707859039307
    7. 'i' → logprob: -5.306707859039307
    8. '**' → logprob: -5.306707859039307
    9. '
' → logprob: -5.306707859039307
    10. '-' → logprob: -5.431707859039307

Token 34: ' maximum' (ID: 10562)
  Prédit: ' maximum'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' maximum' → logprob: -0.002757210284471512
    2. ' ' → logprob: -6.3777570724487305
    3. 'maximum' → logprob: -7.1277570724487305
    4. ' input' → logprob: -8.62775707244873
    5. ' max' → logprob: -9.75275707244873
    6. ' limit' → logprob: -11.75275707244873
    7. ' ' → logprob: -13.12775707244873
    8. ' space' → logprob: -13.62775707244873
    9. 'max' → logprob: -13.87775707244873
    10. '  ' → logprob: -14.37775707244873

Token 35: '_value' (ID: 6734)
  Prédit: '_value'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_value' → logprob: -0.026479102671146393
    2. '_' → logprob: -3.6514790058135986
    3. '_val' → logprob: -9.15147876739502
    4. ' _' → logprob: -10.40147876739502
    5. '>' → logprob: -11.52647876739502
    6. '_v' → logprob: -11.90147876739502
    7. '_Value' → logprob: -12.40147876739502
    8. '```' → logprob: -12.52647876739502
    9. '_values' → logprob: -13.15147876739502
    10. '<' → logprob: -13.15147876739502

Token 36: ' >' (ID: 1424)
  Prédit: ' >'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' >' → logprob: -0.10618656128644943
    2. ' >=' → logprob: -2.481186628341675
    3. '>' → logprob: -4.856186389923096
    4. ' <=' → logprob: -5.481186389923096
    5. ' <' → logprob: -5.481186389923096
    6. ' ' → logprob: -7.606186389923096
    7. '>=' → logprob: -7.856186389923096
    8. '<' → logprob: -9.981186866760254
    9. '<=' → logprob: -10.981186866760254
    10. ' ==' → logprob: -11.231186866760254

Token 37: ' limit' (ID: 5967)
  Prédit: ' limit'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' limit' → logprob: -0.007425956893712282
    2. 'limit' → logprob: -5.257425785064697
    3. ' ' → logprob: -6.132425785064697
    4. ' ' → logprob: -12.132426261901855
    5. '(limit' → logprob: -12.257426261901855
    6. '8' → logprob: -12.632426261901855
    7. '0' → logprob: -13.257426261901855
    8. ' limite' → logprob: -14.382426261901855
    9. ' l' → logprob: -15.257426261901855
    10. ' max' → logprob: -15.257426261901855

Token 38: '_value' (ID: 6734)
  Prédit: '_value'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_value' → logprob: -0.00021927160560153425
    2. '_' → logprob: -8.625219345092773
    3. '_val' → logprob: -10.250219345092773
    4. ':' → logprob: -13.625219345092773
    5. ' _' → logprob: -14.000219345092773
    6. '_Value' → logprob: -14.250219345092773
    7. '_:' → logprob: -14.875219345092773
    8. '_v' → logprob: -15.250219345092773
    9. '_VALUE' → logprob: -15.250219345092773
    10. '```' → logprob: -15.625219345092773

Token 39: ':
' (ID: 734)
  Prédit: ':'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ':' → logprob: -0.00014561474381480366
    2. ' :' → logprob: -8.87514591217041
    3. ':**' → logprob: -12.37514591217041
    4. ':
' → logprob: -13.87514591217041
    5. '):' → logprob: -15.87514591217041
    6. '>:' → logprob: -16.250144958496094
    7. '+:' → logprob: -16.875144958496094
    8. '：' → logprob: -16.875144958496094
    9. '':' → logprob: -17.625144958496094
    10. ' and' → logprob: -18.000144958496094

Token 40: '   ' (ID: 271)
  Prédit: ' 
'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' 
' → logprob: -1.2166194915771484
    2. '\n' → logprob: -1.5916194915771484
    3. ' print' → logprob: -1.7166194915771484
    4. '    ' → logprob: -1.8416194915771484
    5. ' ' → logprob: -3.4666194915771484
    6. '    
' → logprob: -3.9666194915771484
    7. 'print' → logprob: -3.9666194915771484
    8. '   ' → logprob: -3.9666194915771484
    9. '     
' → logprob: -3.9666194915771484
    10. '```' → logprob: -4.216619491577148

Token 41: ' print' (ID: 2123)
  Prédit: ' print'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' print' → logprob: -0.015288332477211952
    2. 'print' (adapté à ' print') → logprob: -4.390288352966309
    3. ' pass' → logprob: -6.640288352966309
    4. '   ' → logprob: -7.515288352966309
    5. '    ' → logprob: -8.140288352966309
    6. ' maximum' → logprob: -8.765288352966309
    7. ' limit' → logprob: -9.265288352966309
    8. ' ' → logprob: -9.515288352966309
    9. '```' → logprob: -9.765288352966309
    10. ' raise' → logprob: -9.890288352966309

Token 42: '(':' (ID: 36524)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '(' → logprob: -0.014210401102900505
    2. '(max' → logprob: -4.764210224151611
    3. '("("' → logprob: -6.014210224151611
    4. '('' → logprob: -6.389210224151611
    5. '("' → logprob: -6.639210224151611
    6. '(True' → logprob: -10.13921070098877
    7. '("")' → logprob: -10.26421070098877
    8. '()' → logprob: -10.63921070098877
    9. '((' → logprob: -11.63921070098877
    10. '("(' → logprob: -12.13921070098877

Token 43: '('' (ID: 706)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')' → logprob: -0.13384827971458435
    2. ''' → logprob: -3.133848190307617
    3. '"' → logprob: -3.633848190307617
    4. '')' → logprob: -4.008848190307617
    5. '")' → logprob: -5.133848190307617
    6. '('' → logprob: -5.383848190307617
    7. '(' → logprob: -5.758848190307617
    8. 'Exceeded' → logprob: -6.133848190307617
    9. ' '' → logprob: -6.446348190307617
    10. '>' → logprob: -6.508848190307617

Token 44: ')
' (ID: 446)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')' → logprob: -0.0003134168218821287
    2. ')
' → logprob: -9.000313758850098
    3. '<|end|>' → logprob: -9.125313758850098
    4. 'else' → logprob: -9.875313758850098
    5. '')' → logprob: -11.750313758850098
    6. '```' → logprob: -12.000313758850098
    7. '
' → logprob: -12.250313758850098
    8. ' else' → logprob: -12.625313758850098
    9. 'elif' → logprob: -13.125313758850098
    10. ' )' → logprob: -13.875313758850098

Token 45: 'else' (ID: 2807)
  Prédit: 'else'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'else' → logprob: -0.01490554679185152
    2. ' else' → logprob: -4.6399054527282715
    3. 'elif' → logprob: -5.6399054527282715
    4. '<|end|>' → logprob: -6.7649054527282715
    5. '
' → logprob: -8.76490592956543
    6. '```' → logprob: -9.38990592956543
    7. ')' → logprob: -10.01490592956543
    8. 'e' → logprob: -10.13990592956543
    9. '<|end|>' → logprob: -11.13990592956543
    10. '\n' → logprob: -11.26490592956543

Token 46: ':
' (ID: 734)
  Prédit: ':'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ':' → logprob: -9.364928700961173e-05
    2. ':
' → logprob: -9.625093460083008
    3. '   ' → logprob: -10.625093460083008
    4. ' :' → logprob: -13.000093460083008
    5. '):' → logprob: -15.875093460083008
    6. '```' → logprob: -16.000093460083008
    7. ':def' → logprob: -16.125093460083008
    8. ':**' → logprob: -16.250093460083008
    9. ':
' → logprob: -16.375093460083008
    10. ':return' → logprob: -16.625093460083008

Token 47: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.00560166547074914
    2. 'print' → logprob: -5.75560188293457
    3. ' print' → logprob: -6.13060188293457
    4. '    ' → logprob: -8.88060188293457
    5. '   ' → logprob: -10.50560188293457
    6. '       ' → logprob: -10.63060188293457
    7. '	print' → logprob: -11.38060188293457
    8. ' ' → logprob: -11.63060188293457
    9. '```' → logprob: -12.25560188293457
    10. '    
' → logprob: -12.25560188293457

Token 48: ' print' (ID: 2123)
  Prédit: 'print'
  Correct (stricte): False
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'print' (adapté à ' print') → logprob: -0.01881699450314045
    2. ':)' → logprob: -4.268816947937012
    3. ' print' → logprob: -6.393816947937012
    4. '   ' → logprob: -6.643816947937012
    5. ')' → logprob: -7.643816947937012
    6. ' :)' → logprob: -8.268816947937012
    7. ':' → logprob: -8.268816947937012
    8. '😊' → logprob: -8.518816947937012
    9. '(' → logprob: -9.143816947937012
    10. ' ' → logprob: -9.643816947937012

Token 49: '('' (ID: 706)
  Prédit: '(''
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '('' → logprob: -0.02337079681456089
    2. '(' → logprob: -4.398370742797852
    3. '("' → logprob: -5.273370742797852
    4. '(':' → logprob: -5.398370742797852
    5. '(":' → logprob: -7.148370742797852
    6. '('(' → logprob: -8.273370742797852
    7. '("("' → logprob: -9.398370742797852
    8. '("(' → logprob: -12.148370742797852
    9. '(:' → logprob: -12.273370742797852
    10. '()' → logprob: -13.023370742797852

Token 50: 'Y' (ID: 56)
  Prédit: '':'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '':' → logprob: -0.27838701009750366
    2. ''' → logprob: -2.5283870697021484
    3. ''O' → logprob: -2.5283870697021484
    4. '')' → logprob: -3.1533870697021484
    5. ''o' → logprob: -3.7783870697021484
    6. ''^' → logprob: -5.403387069702148
    7. ''A' → logprob: -5.653387069702148
    8. ''D' → logprob: -6.153387069702148
    9. ''C' → logprob: -6.528387069702148
    10. '';' → logprob: -6.903387069702148

Token 51: 'ay' (ID: 356)
  Prédit: 'ay'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'ay' → logprob: -1.1092274188995361
    2. ')' → logprob: -1.2342274188995361
    3. 'a' → logprob: -2.359227418899536
    4. 'ey' → logprob: -2.859227418899536
    5. '')' → logprob: -3.109227418899536
    6. '('' → logprob: -3.234227418899536
    7. '\' → logprob: -4.109227180480957
    8. 'AY' → logprob: -4.109227180480957
    9. ')
' → logprob: -4.359227180480957
    10. 'A' → logprob: -4.484227180480957

Token 52: '!' (ID: 0)
  Prédit: '!'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '!' → logprob: -0.01864640973508358
    2. '!)' → logprob: -4.268646240234375
    3. ')' → logprob: -5.518646240234375
    4. '')' → logprob: -8.268646240234375
    5. ':)' → logprob: -9.143646240234375
    6. '!")' → logprob: -9.268646240234375
    7. ')!' → logprob: -13.893646240234375
    8. '!!!' → logprob: -14.268646240234375
    9. '!'' → logprob: -14.518646240234375
    10. '!!' → logprob: -14.518646240234375

Token 53: '')' (ID: 1542)
  Prédit: '')'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '')' → logprob: -0.04910197854042053
    2. ')' → logprob: -3.0491020679473877
    3. '!' → logprob: -8.049101829528809
    4. ':)' → logprob: -8.924101829528809
    5. '")' → logprob: -10.049101829528809
    6. '!)' → logprob: -11.424101829528809
    7. ''' → logprob: -12.674101829528809
    8. '')
' → logprob: -14.049101829528809
    9. '😊' → logprob: -14.174101829528809
    10. '('' → logprob: -14.174101829528809


RÉSUMÉ:
--------------------------------------------------------------------------------
Total des tokens analysés: 51
Tokens correctement prédits (1ère position, stricte): 25
Tokens correctement prédits (1ère position, avec adaptation): 26
Tokens correctement prédits (top 10): 41
Précision stricte (1ère position): 49.02%
Précision adaptée (1ère position): 50.98%
Précision (top 10): 80.39%
================================================================================
