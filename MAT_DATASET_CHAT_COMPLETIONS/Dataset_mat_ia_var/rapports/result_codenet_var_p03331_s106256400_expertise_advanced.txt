================================================================================
ANALYSE DE PRÉDICTION TOKEN PAR TOKEN (BATCH API)
Date: 2025-06-04 20:16:58
Modèle de tokenisation: gpt-4o-mini
================================================================================

SCRIPT ANALYSÉ:
--------------------------------------------------------------------------------
match n := input():
    case '0':
        print(10)
    case _ if int(n) % 10 == 0:
        print(10)
    case _:
        print(sum(map(int, n)))
--------------------------------------------------------------------------------

RÉSULTATS D'ANALYSE TOKEN PAR TOKEN:
--------------------------------------------------------------------------------
Token 0: 'match' (ID: 14893)
  → Token d'amorce (pas de prédiction)

Token 1: ' n' (ID: 297)
  → Token d'amorce (pas de prédiction)

Token 2: ' :=' (ID: 3405)
  → Token d'amorce (pas de prédiction)

Token 3: ' input' (ID: 3422)
  Prédit: 'input'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'input' → logprob: -1.3789763450622559
    2. ' input' → logprob: -1.8789763450622559
    3. 'x' → logprob: -2.128976345062256
    4. ' x' → logprob: -2.503976345062256
    5. 'expr' → logprob: -2.878976345062256
    6. 'some' → logprob: -2.878976345062256
    7. ' ' → logprob: -3.003976345062256
    8. 'value' → logprob: -3.253976345062256
    9. ' n' → logprob: -3.753976345062256
    10. ' some' → logprob: -3.753976345062256

Token 4: '():
' (ID: 8595)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '(' → logprob: -0.2933551073074341
    2. '"' → logprob: -1.668355107307434
    3. '```' → logprob: -3.7933549880981445
    4. ''' → logprob: -4.1683549880981445
    5. '("("' → logprob: -4.9183549880981445
    6. '[' → logprob: -5.0433549880981445
    7. '()' → logprob: -5.7933549880981445
    8. '`' → logprob: -5.9183549880981445
    9. '.' → logprob: -6.9183549880981445
    10. '('' → logprob: -7.0433549880981445

Token 5: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.14969757199287415
    2. '```' → logprob: -2.2746975421905518
    3. ' ' → logprob: -4.399697780609131
    4. '``' → logprob: -5.149697780609131
    5. ' in' → logprob: -5.524697780609131
    6. '"' → logprob: -6.274697780609131
    7. ' \' → logprob: -6.274697780609131
    8. ':
' → logprob: -6.399697780609131
    9. ' with' → logprob: -6.524697780609131
    10. '\n' → logprob: -7.024697780609131

Token 6: ' case' (ID: 1890)
  Prédit: '"'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '"' → logprob: -0.2982030510902405
    2. ''' → logprob: -2.1732029914855957
    3. 'case' (adapté à ' case') → logprob: -2.4232029914855957
    4. '   ' → logprob: -4.173202991485596
    5. ' ' → logprob: -4.423202991485596
    6. ' case' → logprob: -4.673202991485596
    7. ' "' → logprob: -5.673202991485596
    8. ' \' → logprob: -5.923202991485596
    9. '`' → logprob: -6.173202991485596
    10. '```' → logprob: -6.423202991485596

Token 7: ' '' (ID: 461)
  Prédit: '''
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ''' → logprob: -0.4445418417453766
    2. '"' → logprob: -1.0695418119430542
    3. ' '' → logprob: -5.069541931152344
    4. ' ' → logprob: -5.694541931152344
    5. '`' → logprob: -6.569541931152344
    6. ' "' → logprob: -6.944541931152344
    7. ' ' → logprob: -7.319541931152344
    8. '  ' → logprob: -7.569541931152344
    9. ''s' → logprob: -7.694541931152344
    10. ' int' → logprob: -7.694541931152344

Token 8: '0' (ID: 15)
  Prédit: '''
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ''' → logprob: -0.34565478563308716
    2. ''\' → logprob: -2.5956547260284424
    3. ''a' → logprob: -3.3456547260284424
    4. 'q' → logprob: -3.3456547260284424
    5. 'a' → logprob: -3.4706547260284424
    6. '1' → logprob: -3.5956547260284424
    7. 'h' → logprob: -3.7206547260284424
    8. '0' → logprob: -3.8456547260284424
    9. ''y' → logprob: -4.4706549644470215
    10. ''h' → logprob: -5.2206549644470215

Token 9: '':
' (ID: 7669)
  Prédit: '':'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '':' → logprob: -0.2814337909221649
    2. ''' → logprob: -1.4064338207244873
    3. '\n' → logprob: -8.656434059143066
    4. ''\' → logprob: -10.031434059143066
    5. '':
' → logprob: -10.406434059143066
    6. ' ':' → logprob: -12.156434059143066
    7. '',' → logprob: -12.156434059143066
    8. '':

' → logprob: -12.406434059143066
    9. '':
' → logprob: -12.656434059143066
    10. '":' → logprob: -12.781434059143066

Token 10: '       ' (ID: 309)
  Prédit: '       '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '       ' → logprob: -0.24442943930625916
    2. '\n' → logprob: -1.8694294691085815
    3. '        
' → logprob: -4.119429588317871
    4. '   ' → logprob: -4.244429588317871
    5. '    ' → logprob: -4.369429588317871
    6. ' ' → logprob: -5.619429588317871
    7. ' 
' → logprob: -5.744429588317871
    8. '\' → logprob: -6.619429588317871
    9. '    
' → logprob: -6.619429588317871
    10. '\r' → logprob: -6.619429588317871

Token 11: ' print' (ID: 2123)
  Prédit: ' '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' ' → logprob: -0.7208899855613708
    2. ' pass' → logprob: -2.3458900451660156
    3. ' n' → logprob: -2.4708900451660156
    4. ''' → logprob: -2.4708900451660156
    5. ' print' → logprob: -2.7208900451660156
    6. ' break' → logprob: -3.3458900451660156
    7. ' \' → logprob: -3.8458900451660156
    8. '\n' → logprob: -3.8458900451660156
    9. '        ' → logprob: -4.095890045166016
    10. '       ' → logprob: -4.345890045166016

Token 12: '(' (ID: 7)
  Prédit: '('
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(' → logprob: -0.12699970602989197
    2. '('' → logprob: -2.501999616622925
    3. '()' → logprob: -3.876999616622925
    4. '("' → logprob: -4.126999855041504
    5. '("")' → logprob: -9.126999855041504
    6. '0' → logprob: -9.626999855041504
    7. '(False' → logprob: -9.626999855041504
    8. ''' → logprob: -10.001999855041504
    9. '"' → logprob: -10.126999855041504
    10. '(None' → logprob: -10.501999855041504

Token 13: '10' (ID: 702)
  Prédit: '''
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ''' → logprob: -0.9796923398971558
    2. '0' → logprob: -1.1046923398971558
    3. '"' → logprob: -1.6046923398971558
    4. 'n' → logprob: -2.4796924591064453
    5. ' n' → logprob: -5.354692459106445
    6. ''n' → logprob: -5.979692459106445
    7. ' ' → logprob: -7.604692459106445
    8. ')' → logprob: -7.729692459106445
    9. ' '' → logprob: -9.354692459106445
    10. '`' → logprob: -10.354692459106445

Token 14: ')
' (ID: 446)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')' → logprob: -0.003695562481880188
    2. '0' → logprob: -6.253695487976074
    3. '*' → logprob: -6.628695487976074
    4. '+' → logprob: -8.253695487976074
    5. ' )' → logprob: -9.628695487976074
    6. '**' → logprob: -10.503695487976074
    7. ')
' → logprob: -11.003695487976074
    8. '   ' → logprob: -11.753695487976074
    9. '')' → logprob: -12.003695487976074
    10. '1' → logprob: -12.003695487976074

Token 15: '   ' (ID: 271)
  Prédit: '\n'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '\n' → logprob: -0.23430658876895905
    2. ''\' → logprob: -2.484306573867798
    3. '```' → logprob: -3.109306573867798
    4. '\' → logprob: -3.609306573867798
    5. '   ' → logprob: -4.234306812286377
    6. ')' → logprob: -4.359306812286377
    7. '``' → logprob: -5.734306812286377
    8. '`
' → logprob: -5.984306812286377
    9. '"\' → logprob: -6.109306812286377
    10. '\r' → logprob: -6.234306812286377

Token 16: ' case' (ID: 1890)
  Prédit: '\n'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '\n' → logprob: -0.12824150919914246
    2. '   ' → logprob: -2.753241539001465
    3. ''\' → logprob: -4.378241539001465
    4. '```' → logprob: -4.628241539001465
    5. ')' → logprob: -4.753241539001465
    6. '\' → logprob: -4.878241539001465
    7. '
' → logprob: -5.878241539001465
    8. '    
' → logprob: -6.003241539001465
    9. '\r' → logprob: -6.503241539001465
    10. '    ' → logprob: -6.628241539001465

Token 17: ' _' (ID: 1175)
  Prédit: '''
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ''' → logprob: -0.6431827545166016
    2. '_' → logprob: -0.8931827545166016
    3. ' '' → logprob: -2.7681827545166016
    4. ' _' → logprob: -6.893182754516602
    5. ' ' → logprob: -7.018182754516602
    6. '"' → logprob: -9.018182754516602
    7. '    ' → logprob: -10.143182754516602
    8. 'space' → logprob: -10.268182754516602
    9. ' ' → logprob: -10.518182754516602
    10. '  ' → logprob: -10.893182754516602

Token 18: ' if' (ID: 538)
  Prédit: ':'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ':' → logprob: -0.0006988536333665252
    2. ':
' → logprob: -7.750699043273926
    3. '   ' → logprob: -9.375699043273926
    4. '':' → logprob: -9.750699043273926
    5. ' :' → logprob: -10.000699043273926
    6. '':'' → logprob: -10.125699043273926
    7. ':\' → logprob: -11.750699043273926
    8. '```' → logprob: -11.875699043273926
    9. '    ' → logprob: -12.375699043273926
    10. ':**' → logprob: -13.000699043273926

Token 19: ' int' (ID: 677)
  Prédit: ' n'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' n' → logprob: -0.016568340361118317
    2. 'n' → logprob: -4.391568183898926
    3. ' not' → logprob: -6.516568183898926
    4. ' ' → logprob: -6.766568183898926
    5. ' int' → logprob: -6.766568183898926
    6. ' isinstance' → logprob: -9.516568183898926
    7. 'int' → logprob: -9.641568183898926
    8. ' len' → logprob: -10.516568183898926
    9. ' '' → logprob: -10.641568183898926
    10. 'not' → logprob: -10.766568183898926

Token 20: '(n' (ID: 2406)
  Prédit: '(n'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(n' → logprob: -0.1002226322889328
    2. '(' → logprob: -2.350222587585449
    3. ' (' → logprob: -11.22522258758545
    4. '('' → logprob: -14.35022258758545
    5. '(s' → logprob: -14.60022258758545
    6. 'n' → logprob: -14.72522258758545
    7. '(
' → logprob: -14.85022258758545
    8. ' ' → logprob: -15.72522258758545
    9. ')' → logprob: -15.85022258758545
    10. '(

' → logprob: -15.85022258758545

Token 21: ')' (ID: 8)
  Prédit: ')'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')' → logprob: -0.054983951151371
    2. ' >' → logprob: -3.8049838542938232
    3. '>' → logprob: -4.804984092712402
    4. ' )' → logprob: -5.304984092712402
    5. ' ==' → logprob: -5.429984092712402
    6. '%' → logprob: -5.804984092712402
    7. ')>' → logprob: -5.804984092712402
    8. ' %' → logprob: -6.304984092712402
    9. ' <' → logprob: -6.304984092712402
    10. ' ' → logprob: -6.679984092712402

Token 22: ' %' (ID: 1851)
  Prédit: ' >'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' >' → logprob: -0.554298460483551
    2. '%' → logprob: -1.9292984008789062
    3. '>' → logprob: -2.1792984008789062
    4. ' <' → logprob: -2.8042984008789062
    5. ' %' → logprob: -3.0542984008789062
    6. ' ==' → logprob: -3.8042984008789062
    7. ' ' → logprob: -4.554298400878906
    8. '<' → logprob: -4.679298400878906
    9. '*' → logprob: -5.304298400878906
    10. '==' → logprob: -5.804298400878906

Token 23: ' ' (ID: 220)
  Prédit: '2'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '2' → logprob: -0.7017334699630737
    2. ' ' → logprob: -0.7017334699630737
    3. '10' → logprob: -4.826733589172363
    4. '5' → logprob: -8.201733589172363
    5. '1' → logprob: -9.201733589172363
    6. '3' → logprob: -9.326733589172363
    7. '4' → logprob: -10.576733589172363
    8. '100' → logprob: -11.076733589172363
    9. '7' → logprob: -11.826733589172363
    10. '```' → logprob: -12.451733589172363

Token 24: '10' (ID: 702)
  Prédit: '2'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '2' → logprob: -0.5550519227981567
    2. '5' → logprob: -1.5550519227981567
    3. '10' → logprob: -1.5550519227981567
    4. '3' → logprob: -6.430051803588867
    5. '1' → logprob: -7.055051803588867
    6. '4' → logprob: -7.805051803588867
    7. ' ' → logprob: -8.180051803588867
    8. '9' → logprob: -8.930051803588867
    9. '7' → logprob: -9.055051803588867
    10. '0' → logprob: -9.555051803588867

Token 25: ' ==' (ID: 951)
  Prédit: '=='
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '==' → logprob: -0.7019020915031433
    2. ' ==' → logprob: -0.7019020915031433
    3. ' !=' → logprob: -5.076901912689209
    4. '!=' → logprob: -6.326901912689209
    5. ' ' → logprob: -8.451902389526367
    6. ':' → logprob: -8.576902389526367
    7. '=' → logprob: -8.826902389526367
    8. '0' → logprob: -9.951902389526367
    9. '>' → logprob: -10.701902389526367
    10. '===' → logprob: -10.826902389526367

Token 26: ' ' (ID: 220)
  Prédit: '0'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '0' → logprob: -0.22565332055091858
    2. ' ' → logprob: -1.6006532907485962
    3. '1' → logprob: -9.100653648376465
    4. '5' → logprob: -10.100653648376465
    5. '2' → logprob: -10.225653648376465
    6. '3' → logprob: -11.350653648376465
    7. '10' → logprob: -11.475653648376465
    8. '  ' → logprob: -11.600653648376465
    9. '4' → logprob: -11.600653648376465
    10. '   ' → logprob: -12.663153648376465

Token 27: '0' (ID: 15)
  Prédit: '0'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '0' → logprob: -0.01736612431704998
    2. '1' → logprob: -5.1423659324646
    3. ' ' → logprob: -5.6423659324646
    4. '3' → logprob: -6.0173659324646
    5. '5' → logprob: -6.0173659324646
    6. '2' → logprob: -6.1423659324646
    7. '4' → logprob: -7.5173659324646
    8. '9' → logprob: -9.142366409301758
    9. '7' → logprob: -9.517366409301758
    10. '6' → logprob: -10.642366409301758

Token 28: ':
' (ID: 734)
  Prédit: ':'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ':' → logprob: -0.0002205828350270167
    2. ':
' → logprob: -9.12522029876709
    3. ' :' → logprob: -9.37522029876709
    4. '   ' → logprob: -11.75022029876709
    5. '       ' → logprob: -12.25022029876709
    6. ':**' → logprob: -12.50022029876709
    7. ' and' → logprob: -12.75022029876709
    8. '):' → logprob: -13.00022029876709
    9. '':' → logprob: -13.87522029876709
    10. ',' → logprob: -14.12522029876709

Token 29: '       ' (ID: 309)
  Prédit: '       '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '       ' → logprob: -0.16353842616081238
    2. ':' → logprob: -1.9135384559631348
    3. '<|end|>' → logprob: -6.288538455963135
    4. ' :' → logprob: -7.788538455963135
    5. '   ' → logprob: -8.538537979125977
    6. ' ' → logprob: -9.288537979125977
    7. '<|end|>' → logprob: -9.663537979125977
    8. '           ' → logprob: -9.663537979125977
    9. '):' → logprob: -9.788537979125977
    10. '```' → logprob: -9.788537979125977

Token 30: ' print' (ID: 2123)
  Prédit: '       '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '       ' → logprob: -0.1722620129585266
    2. '           ' → logprob: -2.172261953353882
    3. 'print' (adapté à ' print') → logprob: -3.797261953353882
    4. ' print' → logprob: -4.422262191772461
    5. '        ' → logprob: -5.172262191772461
    6. '0' → logprob: -6.172262191772461
    7. '   ' → logprob: -7.297262191772461
    8. '    ' → logprob: -8.172262191772461
    9. '10' → logprob: -8.297262191772461
    10. ' ' → logprob: -8.672262191772461

Token 31: '(' (ID: 7)
  Prédit: '('
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(' → logprob: -0.010192563757300377
    2. '(n' → logprob: -4.760192394256592
    3. '(int' → logprob: -7.135192394256592
    4. '10' → logprob: -8.01019287109375
    5. '()' → logprob: -8.63519287109375
    6. '0' → logprob: -9.51019287109375
    7. '20' → logprob: -9.88519287109375
    8. '100' → logprob: -9.88519287109375
    9. '('' → logprob: -10.88519287109375
    10. '((' → logprob: -10.88519287109375

Token 32: '10' (ID: 702)
  Prédit: 'int'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'int' → logprob: -0.3151870667934418
    2. 'n' → logprob: -2.0651869773864746
    3. '10' → logprob: -2.5651869773864746
    4. '100' → logprob: -3.8151869773864746
    5. '20' → logprob: -4.065186977386475
    6. '0' → logprob: -4.565186977386475
    7. ' int' → logprob: -5.440186977386475
    8. '   ' → logprob: -5.690186977386475
    9. ' n' → logprob: -5.940186977386475
    10. ' ' → logprob: -6.315186977386475

Token 33: ')
' (ID: 446)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')' → logprob: -0.0038088613655418158
    2. ')
' → logprob: -5.628808975219727
    3. '0' → logprob: -9.003808975219727
    4. '   ' → logprob: -10.253808975219727
    5. '*' → logprob: -10.878808975219727
    6. ')
' → logprob: -11.378808975219727
    7. '))' → logprob: -12.253808975219727
    8. '')' → logprob: -13.003808975219727
    9. ' )' → logprob: -13.128808975219727
    10. '```' → logprob: -13.253808975219727

Token 34: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.0012805953156203032
    2. ')' → logprob: -7.376280784606934
    3. '<|end|>' → logprob: -8.251280784606934
    4. '    
' → logprob: -8.501280784606934
    5. '#' → logprob: -10.001280784606934
    6. '```' → logprob: -10.376280784606934
    7. '...' → logprob: -10.876280784606934
    8. ':' → logprob: -10.876280784606934
    9. '
' → logprob: -11.001280784606934
    10. '<|end|>' → logprob: -11.001280784606934

Token 35: ' case' (ID: 1890)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.032485127449035645
    2. 'else' → logprob: -3.907485008239746
    3. ')' → logprob: -5.657485008239746
    4. 'elif' → logprob: -6.032485008239746
    5. ' else' → logprob: -6.282485008239746
    6. ':' → logprob: -6.407485008239746
    7. '#' → logprob: -7.532485008239746
    8. '_' → logprob: -7.657485008239746
    9. '```' → logprob: -8.282485008239746
    10. '    
' → logprob: -8.532485008239746

Token 36: ' _' (ID: 1175)
  Prédit: ' _'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' _' → logprob: -0.6358750462532043
    2. '_' → logprob: -0.7608750462532043
    3. ' n' → logprob: -7.260875225067139
    4. ' ' → logprob: -7.260875225067139
    5. ' _:' → logprob: -7.260875225067139
    6. ' '' → logprob: -7.885875225067139
    7. ''' → logprob: -8.01087474822998
    8. '   ' → logprob: -8.88587474822998
    9. '_:' → logprob: -9.26087474822998
    10. 'n' → logprob: -9.88587474822998

Token 37: ':
' (ID: 734)
  Prédit: ':'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ':' → logprob: -0.0013511877041310072
    2. ':
' → logprob: -7.501351356506348
    3. '       ' → logprob: -7.626351356506348
    4. '   ' → logprob: -8.126351356506348
    5. '.' → logprob: -12.626351356506348
    6. '-' → logprob: -13.626351356506348
    7. ' :' → logprob: -13.876351356506348
    8. '    ' → logprob: -13.876351356506348
    9. ' if' → logprob: -14.001351356506348
    10. '        ' → logprob: -14.251351356506348

Token 38: '       ' (ID: 309)
  Prédit: '       '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '       ' → logprob: -0.0008336895843967795
    2. ' print' → logprob: -7.375833511352539
    3. 'print' → logprob: -8.625833511352539
    4. '   ' → logprob: -12.250833511352539
    5. '```' → logprob: -12.250833511352539
    6. '<|end|>' → logprob: -12.375833511352539
    7. '    ' → logprob: -12.750833511352539
    8. ' ' → logprob: -13.125833511352539
    9. ' ' → logprob: -13.375833511352539
    10. '           ' → logprob: -13.750833511352539

Token 39: ' print' (ID: 2123)
  Prédit: 'print'
  Correct (stricte): False
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'print' (adapté à ' print') → logprob: -0.5762100219726562
    2. ' print' → logprob: -0.8262100219726562
    3. '       ' → logprob: -8.451210021972656
    4. ' ' → logprob: -11.201210021972656
    5. '   ' → logprob: -11.326210021972656
    6. '        ' → logprob: -11.826210021972656
    7. '    ' → logprob: -11.951210021972656
    8. ' n' → logprob: -13.076210021972656
    9. ' break' → logprob: -13.076210021972656
    10. '	print' → logprob: -13.201210021972656

Token 40: '(sum' (ID: 45528)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '(' → logprob: -0.47255420684814453
    2. '(n' → logprob: -1.3475542068481445
    3. '(int' → logprob: -2.3475542068481445
    4. '()' → logprob: -4.0975542068481445
    5. '10' → logprob: -6.2225542068481445
    6. '0' → logprob: -7.2225542068481445
    7. 'n' → logprob: -7.4725542068481445
    8. 'int' → logprob: -7.7225542068481445
    9. '1' → logprob: -8.597554206848145
    10. '((' → logprob: -8.847554206848145

Token 41: '(map' (ID: 16946)
  Prédit: '(int'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(int' → logprob: -0.07037317752838135
    2. '(' → logprob: -3.195373058319092
    3. '(n' → logprob: -4.695373058319092
    4. '(ord' → logprob: -4.695373058319092
    5. 'int' → logprob: -5.570373058319092
    6. '(map' → logprob: -6.820373058319092
    7. ' (' → logprob: -6.945373058319092
    8. '([' → logprob: -7.195373058319092
    9. '(range' → logprob: -7.695373058319092
    10. '[int' → logprob: -7.695373058319092

Token 42: '(int' (ID: 2742)
  Prédit: '(int'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(int' → logprob: -0.015424156561493874
    2. 'int' → logprob: -4.2654242515563965
    3. '(lambda' → logprob: -7.1404242515563965
    4. '(' → logprob: -8.390423774719238
    5. '(ord' → logprob: -9.640423774719238
    6. '   ' → logprob: -9.765423774719238
    7. ' int' → logprob: -10.390423774719238
    8. ' (' → logprob: -10.640423774719238
    9. 'lambda' → logprob: -10.765423774719238
    10. '(str' → logprob: -11.515423774719238

Token 43: ',' (ID: 11)
  Prédit: '(n'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(n' → logprob: -0.02436624839901924
    2. '(list' → logprob: -4.52436637878418
    3. '(' → logprob: -4.64936637878418
    4. '(str' → logprob: -5.77436637878418
    5. 'list' → logprob: -8.39936637878418
    6. ')' → logprob: -8.89936637878418
    7. ' (' → logprob: -9.52436637878418
    8. '((' → logprob: -10.52436637878418
    9. ' list' → logprob: -11.02436637878418
    10. ',' → logprob: -11.02436637878418

Token 44: ' n' (ID: 297)
  Prédit: 'n'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'n' → logprob: -0.032318130135536194
    2. 'list' → logprob: -4.282318115234375
    3. ' n' → logprob: -4.657318115234375
    4. 'str' → logprob: -4.907318115234375
    5. ' list' → logprob: -7.532318115234375
    6. ' str' → logprob: -7.907318115234375
    7. '(n' → logprob: -9.657318115234375
    8. '   ' → logprob: -9.657318115234375
    9. '[n' → logprob: -10.782318115234375
    10. ' ' → logprob: -11.657318115234375

Token 45: ')))' (ID: 15975)
  Prédit: ')))'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')))' → logprob: -0.010208487510681152
    2. '))' → logprob: -4.635208606719971
    3. ')' → logprob: -8.760208129882812
    4. '))))' → logprob: -9.010208129882812
    5. ')))
' → logprob: -9.635208129882812
    6. '')))' → logprob: -9.885208129882812
    7. ' ' → logprob: -11.135208129882812
    8. '())))' → logprob: -11.885208129882812
    9. '")))' → logprob: -12.010208129882812
    10. '[' → logprob: -12.385208129882812


RÉSUMÉ:
--------------------------------------------------------------------------------
Total des tokens analysés: 43
Tokens correctement prédits (1ère position, stricte): 13
Tokens correctement prédits (1ère position, avec adaptation): 14
Tokens correctement prédits (top 10): 37
Précision stricte (1ère position): 30.23%
Précision adaptée (1ère position): 32.56%
Précision (top 10): 86.05%
================================================================================
