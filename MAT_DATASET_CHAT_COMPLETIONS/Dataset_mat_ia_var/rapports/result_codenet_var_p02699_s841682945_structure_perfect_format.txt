================================================================================
ANALYSE DE PRÉDICTION TOKEN PAR TOKEN (BATCH API)
Date: 2025-06-04 19:16:45
Modèle de tokenisation: gpt-4o-mini
================================================================================

SCRIPT ANALYSÉ:
--------------------------------------------------------------------------------
S, W = map(int, input().split())
if W < S:
    print("safe")
else:
    print("unsafe")
--------------------------------------------------------------------------------

RÉSULTATS D'ANALYSE TOKEN PAR TOKEN:
--------------------------------------------------------------------------------
Token 0: 'S' (ID: 50)
  → Token d'amorce (pas de prédiction)

Token 1: ',' (ID: 11)
  → Token d'amorce (pas de prédiction)

Token 2: ' W' (ID: 486)
  → Token d'amorce (pas de prédiction)

Token 3: ' =' (ID: 314)
  Prédit: '='
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '=' → logprob: -0.10774499922990799
    2. ',' → logprob: -3.2327449321746826
    3. '.' → logprob: -3.9827449321746826
    4. ' =' → logprob: -4.357745170593262
    5. '[' → logprob: -4.607745170593262
    6. ')' → logprob: -4.732745170593262
    7. '*' → logprob: -5.857745170593262
    8. '+' → logprob: -5.982745170593262
    9. '(' → logprob: -6.357745170593262
    10. ';' → logprob: -6.732745170593262

Token 4: ' map' (ID: 4014)
  Prédit: 'map'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'map' → logprob: -1.633672833442688
    2. ' map' → logprob: -2.0086727142333984
    3. 'input' → logprob: -2.2586727142333984
    4. 'S' → logprob: -2.3836727142333984
    5. '0' → logprob: -2.5086727142333984
    6. ' ' → logprob: -2.6336727142333984
    7. '10' → logprob: -2.7586727142333984
    8. ' S' → logprob: -3.0086727142333984
    9. ' input' → logprob: -3.3836727142333984
    10. 'np' → logprob: -4.008672714233398

Token 5: '(int' (ID: 2742)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(' → logprob: -0.003995765466243029
    2. '(lambda' → logprob: -6.003995895385742
    3. '(int' → logprob: -7.003995895385742
    4. '(str' → logprob: -8.378995895385742
    5. '(input' → logprob: -9.628995895385742
    6. '(user' → logprob: -10.003995895385742
    7. '(S' → logprob: -10.378995895385742
    8. '(token' → logprob: -10.503995895385742
    9. '```' → logprob: -10.753995895385742
    10. '<|end|>' → logprob: -10.753995895385742

Token 6: ',' (ID: 11)
  Prédit: '(input'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '(input' → logprob: -0.04369916766881943
    2. ')' → logprob: -3.918699264526367
    3. '(' → logprob: -4.043699264526367
    4. '(user' → logprob: -6.543699264526367
    5. '(str' → logprob: -6.668699264526367
    6. '(int' → logprob: -7.168699264526367
    7. 'input' → logprob: -8.043699264526367
    8. '(range' → logprob: -8.418699264526367
    9. '(S' → logprob: -8.918699264526367
    10. '(raw' → logprob: -9.168699264526367

Token 7: ' input' (ID: 3422)
  Prédit: 'input'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'input' → logprob: -0.20141801238059998
    2. ' input' → logprob: -1.7014180421829224
    3. '(input' → logprob: -12.451417922973633
    4. ',input' → logprob: -14.701417922973633
    5. '<input' → logprob: -15.826417922973633
    6. '=input' → logprob: -15.951417922973633
    7. ')' → logprob: -16.076417922973633
    8. '	input' → logprob: -16.576417922973633
    9. ' ' → logprob: -17.701417922973633
    10. '[input' → logprob: -17.951417922973633

Token 8: '().' (ID: 1454)
  Prédit: '()'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '()' → logprob: -0.1450781226158142
    2. '())' → logprob: -2.145078182220459
    3. '().' → logprob: -4.770078182220459
    4. '('' → logprob: -5.895078182220459
    5. '(' → logprob: -6.020078182220459
    6. '(()' → logprob: -6.895078182220459
    7. '()`' → logprob: -7.020078182220459
    8. '`()' → logprob: -7.145078182220459
    9. '());' → logprob: -7.895078182220459
    10. '();)' → logprob: -8.5200777053833

Token 9: 'split' (ID: 13627)
  Prédit: 'split'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'split' → logprob: -0.00011951648048125207
    2. 'strip' → logprob: -9.12511920928955
    3. ')' → logprob: -12.37511920928955
    4. ' split' → logprob: -12.50011920928955
    5. 'rstrip' → logprob: -13.50011920928955
    6. 'read' → logprob: -14.00011920928955
    7. '(split' → logprob: -15.37511920928955
    8. 'spl' → logprob: -16.625120162963867
    9. 'replace' → logprob: -17.125120162963867
    10. 'startswith' → logprob: -17.875120162963867

Token 10: '())
' (ID: 4574)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ')' → logprob: -0.049161117523908615
    2. '())' → logprob: -3.299161195755005
    3. '))' → logprob: -4.674160957336426
    4. '()' → logprob: -6.799160957336426
    5. '`)' → logprob: -8.174160957336426
    6. '(' → logprob: -8.549160957336426
    7. '()))' → logprob: -10.299160957336426
    8. ')`' → logprob: -10.424160957336426
    9. '('' → logprob: -11.174160957336426
    10. '')' → logprob: -11.299160957336426

Token 11: 'if' (ID: 366)
  Prédit: 'a'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'a' → logprob: -1.099830150604248
    2. 'r' → logprob: -2.099830150604248
    3. 'x' → logprob: -2.474830150604248
    4. '`' → logprob: -2.599830150604248
    5. 'if' → logprob: -2.724830150604248
    6. '#' → logprob: -2.974830150604248
    7. 'for' → logprob: -2.974830150604248
    8. 's' → logprob: -3.099830150604248
    9. 'n' → logprob: -3.099830150604248
    10. 'print' → logprob: -3.724830150604248

Token 12: ' W' (ID: 486)
  Prédit: ' S'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' S' → logprob: -0.1409408301115036
    2. ' ' → logprob: -2.1409409046173096
    3. ' W' → logprob: -4.7659406661987305
    4. ' not' → logprob: -5.6409406661987305
    5. 'S' → logprob: -6.5159406661987305
    6. '  ' → logprob: -9.51594066619873
    7. ' ' → logprob: -9.89094066619873
    8. ' (' → logprob: -10.01594066619873
    9. 'W' → logprob: -10.14094066619873
    10. 's' → logprob: -10.14094066619873

Token 13: ' <' (ID: 464)
  Prédit: ' >'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' >' → logprob: -0.24368369579315186
    2. '>' → logprob: -2.2436838150024414
    3. ' <=' → logprob: -2.3686838150024414
    4. '<=' → logprob: -5.243683815002441
    5. ' >=' → logprob: -5.618683815002441
    6. ' <' → logprob: -5.743683815002441
    7. ' ==' → logprob: -6.493683815002441
    8. '<' → logprob: -6.993683815002441
    9. '==' → logprob: -7.243683815002441
    10. '>=' → logprob: -7.493683815002441

Token 14: ' S' (ID: 336)
  Prédit: '='
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '=' → logprob: -0.47802260518074036
    2. ' S' → logprob: -1.353022575378418
    3. 'S' → logprob: -2.478022575378418
    4. ' ' → logprob: -3.978022575378418
    5. '0' → logprob: -4.853022575378418
    6. '=S' → logprob: -5.103022575378418
    7. '10' → logprob: -6.103022575378418
    8. '6' → logprob: -7.603022575378418
    9. ' =' → logprob: -7.728022575378418
    10. '5' → logprob: -7.853022575378418

Token 15: ':
' (ID: 734)
  Prédit: ':'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ':' → logprob: -0.00016039233014453202
    2. ' :' → logprob: -9.375160217285156
    3. ':
' → logprob: -10.625160217285156
    4. '>' → logprob: -11.375160217285156
    5. '+:' → logprob: -11.375160217285156
    6. '+' → logprob: -11.625160217285156
    7. '>:' → logprob: -12.000160217285156
    8. '):' → logprob: -13.250160217285156
    9. ':return' → logprob: -13.250160217285156
    10. '':' → logprob: -13.375160217285156

Token 16: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.07408802211284637
    2. ' print' → logprob: -3.1990880966186523
    3. '    ' → logprob: -4.074088096618652
    4. 'print' → logprob: -5.199088096618652
    5. '\n' → logprob: -6.449088096618652
    6. ':' → logprob: -6.699088096618652
    7. ' ' → logprob: -6.824088096618652
    8. ' S' → logprob: -7.574088096618652
    9. ' W' → logprob: -7.699088096618652
    10. '\' → logprob: -7.824088096618652

Token 17: ' print' (ID: 2123)
  Prédit: 'print'
  Correct (stricte): False
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'print' (adapté à ' print') → logprob: -0.23150600492954254
    2. ' print' → logprob: -1.7315059900283813
    3. '   ' → logprob: -4.231505870819092
    4. 'pass' → logprob: -5.356505870819092
    5. ' pass' → logprob: -5.606505870819092
    6. ' S' → logprob: -6.106505870819092
    7. ' W' → logprob: -6.356505870819092
    8. 'W' → logprob: -6.981505870819092
    9. 'S' → logprob: -7.856505870819092
    10. '    ' → logprob: -7.981505870819092

Token 18: '("' (ID: 568)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(' → logprob: -0.08852986246347427
    2. '("' → logprob: -3.0885298252105713
    3. '('' → logprob: -3.9635298252105713
    4. '(W' → logprob: -4.46353006362915
    5. '(S' → logprob: -4.96353006362915
    6. '("("' → logprob: -7.08853006362915
    7. '(False' → logprob: -8.713529586791992
    8. '("")' → logprob: -8.838529586791992
    9. '()' → logprob: -9.088529586791992
    10. '"' → logprob: -9.838529586791992

Token 19: 'safe' (ID: 46891)
  Prédit: 'im'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'im' → logprob: -0.7979665398597717
    2. 'Impossible' → logprob: -2.047966480255127
    3. 'error' → logprob: -2.672966480255127
    4. '0' → logprob: -2.672966480255127
    5. 'unsafe' → logprob: -2.672966480255127
    6. 'uns' → logprob: -2.922966480255127
    7. 'No' → logprob: -3.672966480255127
    8. 'S' → logprob: -3.797966480255127
    9. '"' → logprob: -4.047966480255127
    10. 'invalid' → logprob: -4.672966480255127

Token 20: '")
' (ID: 1896)
  Prédit: '")'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '")' → logprob: -0.01130469050258398
    2. ')' → logprob: -4.51130485534668
    3. '!")' → logprob: -9.38630485534668
    4. '")
' → logprob: -9.76130485534668
    5. '"' → logprob: -9.88630485534668
    6. ')")' → logprob: -10.26130485534668
    7. ' )' → logprob: -11.76130485534668
    8. ' ")' → logprob: -11.88630485534668
    9. '!' → logprob: -12.88630485534668
    10. '')' → logprob: -12.88630485534668

Token 21: 'else' (ID: 2807)
  Prédit: 'else'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'else' → logprob: -0.31069743633270264
    2. ' else' → logprob: -1.8106974363327026
    3. 'elif' → logprob: -2.560697555541992
    4. '<|end|>' → logprob: -3.935697555541992
    5. ' elif' → logprob: -5.560697555541992
    6. '```' → logprob: -6.310697555541992
    7. '<|end|>' → logprob: -7.810697555541992
    8. ')' → logprob: -8.560697555541992
    9. '_else' → logprob: -9.310697555541992
    10. ':' → logprob: -9.685697555541992

Token 22: ':
' (ID: 734)
  Prédit: ':'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ':' → logprob: -8.065608562901616e-05
    2. ':
' → logprob: -9.500081062316895
    3. '   ' → logprob: -12.500081062316895
    4. ' :' → logprob: -13.875081062316895
    5. ':return' → logprob: -15.875081062316895
    6. '```' → logprob: -16.125080108642578
    7. '):' → logprob: -16.500080108642578
    8. ':
' → logprob: -16.500080108642578
    9. ':

' → logprob: -16.500080108642578
    10. ',' → logprob: -16.500080108642578

Token 23: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.00889416690915823
    2. ' print' → logprob: -5.508893966674805
    3. 'print' → logprob: -5.508893966674805
    4. '```' → logprob: -7.508893966674805
    5. '    ' → logprob: -9.633893966674805
    6. ' ' → logprob: -10.758893966674805
    7. '  ' → logprob: -10.883893966674805
    8. '``' → logprob: -11.008893966674805
    9. '"' → logprob: -11.383893966674805
    10. '       ' → logprob: -11.383893966674805

Token 24: ' print' (ID: 2123)
  Prédit: ' print'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' print' → logprob: -0.34851646423339844
    2. 'print' (adapté à ' print') → logprob: -1.2235164642333984
    3. '   ' → logprob: -10.098516464233398
    4. '```' → logprob: -11.473516464233398
    5. '.print' → logprob: -12.473516464233398
    6. '	print' → logprob: -12.723516464233398
    7. '(print' → logprob: -12.848516464233398
    8. ' pass' → logprob: -13.348516464233398
    9. '"' → logprob: -13.723516464233398
    10. ' ' → logprob: -13.723516464233398

Token 25: '("' (ID: 568)
  Prédit: '("'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '("' → logprob: -0.3212435841560364
    2. '(' → logprob: -1.3212435245513916
    3. '("("' → logprob: -4.946243762969971
    4. '("")' → logprob: -7.321243762969971
    5. '("(' → logprob: -9.821243286132812
    6. '('' → logprob: -10.321243286132812
    7. '()' → logprob: -10.571243286132812
    8. '(""' → logprob: -10.696243286132812
    9. '("""' → logprob: -11.446243286132812
    10. '("="' → logprob: -11.696243286132812

Token 26: 'unsafe' (ID: 66907)
  Prédit: '"'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '"' → logprob: -0.029851848259568214
    2. 'unsafe' → logprob: -3.9048519134521484
    3. 'danger' → logprob: -5.654851913452148
    4. '"s' → logprob: -5.904851913452148
    5. '"d' → logprob: -6.154851913452148
    6. 'safe' → logprob: -8.529851913452148
    7. ' unsafe' → logprob: -8.904851913452148
    8. 'uns' → logprob: -9.154851913452148
    9. 'Unsafe' → logprob: -9.529851913452148
    10. '"in' → logprob: -10.029851913452148

Token 27: '")' (ID: 1405)
  Prédit: '")'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '")' → logprob: -7.600714161526412e-05
    2. ')' → logprob: -9.500076293945312
    3. ')")' → logprob: -14.125076293945312
    4. '")
' → logprob: -15.250076293945312
    5. '"' → logprob: -16.125076293945312
    6. '')' → logprob: -18.375076293945312
    7. '!")' → logprob: -19.000076293945312
    8. '")

' → logprob: -19.000076293945312
    9. '”)' → logprob: -19.500076293945312
    10. '```' → logprob: -19.625076293945312


RÉSUMÉ:
--------------------------------------------------------------------------------
Total des tokens analysés: 25
Tokens correctement prédits (1ère position, stricte): 7
Tokens correctement prédits (1ère position, avec adaptation): 8
Tokens correctement prédits (top 10): 22
Précision stricte (1ère position): 28.00%
Précision adaptée (1ère position): 32.00%
Précision (top 10): 88.00%
================================================================================
