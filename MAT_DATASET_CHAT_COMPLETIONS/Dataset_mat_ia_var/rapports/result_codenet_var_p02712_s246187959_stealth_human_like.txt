================================================================================
ANALYSE DE PRÉDICTION TOKEN PAR TOKEN (BATCH API)
Date: 2025-06-04 19:18:20
Modèle de tokenisation: gpt-4o-mini
================================================================================

SCRIPT ANALYSÉ:
--------------------------------------------------------------------------------
x = int(input())
res = []

# je commence par 0, pourquoi pas
for n in range(x + 1):  
    # on saute les multiples de 3 et 5 en même temps
    if n % 3 == 0 and n % 5 == 0:
        continue
    elif n % 3 == 0:  # multiples de 3
        continue
    elif n % 5 == 0:  # multiples de 5
        continue
    else:
        res.append(n)  # c'est bon ça

# calcul du total
print(sum(res))
--------------------------------------------------------------------------------

RÉSULTATS D'ANALYSE TOKEN PAR TOKEN:
--------------------------------------------------------------------------------
Token 0: 'x' (ID: 87)
  → Token d'amorce (pas de prédiction)

Token 1: ' =' (ID: 314)
  → Token d'amorce (pas de prédiction)

Token 2: ' int' (ID: 677)
  → Token d'amorce (pas de prédiction)

Token 3: '(input' (ID: 10054)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '(' → logprob: -0.0018355876673012972
    2. ''' → logprob: -6.626835823059082
    3. '```' → logprob: -8.751835823059082
    4. '`' → logprob: -9.626835823059082
    5. '(x' → logprob: -9.626835823059082
    6. '('' → logprob: -10.001835823059082
    7. '"' → logprob: -10.126835823059082
    8. '(
' → logprob: -10.626835823059082
    9. '32' → logprob: -10.751835823059082
    10. ')' → logprob: -11.126835823059082

Token 4: '())
' (ID: 4574)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '(' → logprob: -0.014972962439060211
    2. '()' → logprob: -4.889973163604736
    3. ')' → logprob: -5.139973163604736
    4. '())' → logprob: -7.389973163604736
    5. '(()' → logprob: -8.264972686767578
    6. '('' → logprob: -8.764972686767578
    7. '(
' → logprob: -9.514972686767578
    8. '("("' → logprob: -9.514972686767578
    9. '```' → logprob: -10.014972686767578
    10. '(x' → logprob: -10.014972686767578

Token 5: 'res' (ID: 430)
  Prédit: '+'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '+' → logprob: -0.22037142515182495
    2. '%' → logprob: -2.9703714847564697
    3. '*' → logprob: -2.9703714847564697
    4. '\n' → logprob: -3.3453714847564697
    5. 'if' → logprob: -3.3453714847564697
    6. 'i' → logprob: -4.970371246337891
    7. '+
' → logprob: -5.095371246337891
    8. ' if' → logprob: -6.345371246337891
    9. '```' → logprob: -6.345371246337891
    10. '**' → logprob: -6.720371246337891

Token 6: ' =' (ID: 314)
  Prédit: 'ult'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'ult' → logprob: -0.8577931523323059
    2. 'u' → logprob: -1.1077930927276611
    3. ' =' → logprob: -2.607793092727661
    4. '=' → logprob: -3.107793092727661
    5. '[' → logprob: -3.482793092727661
    6. 'ults' → logprob: -3.482793092727661
    7. 'ul' → logprob: -4.35779333114624
    8. 'ultat' → logprob: -4.73279333114624
    9. '+' → logprob: -4.98279333114624
    10. ' ' → logprob: -5.10779333114624

Token 7: ' []

' (ID: 32833)
  Prédit: ' x'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' x' → logprob: -1.004610538482666
    2. 'x' → logprob: -1.129610538482666
    3. '0' → logprob: -1.754610538482666
    4. ' ' → logprob: -2.004610538482666
    5. '1' → logprob: -6.379610538482666
    6. '"' → logprob: -7.879610538482666
    7. ''' → logprob: -8.504610061645508
    8. ' []' → logprob: -8.629610061645508
    9. ' max' → logprob: -9.379610061645508
    10. '(x' → logprob: -9.754610061645508

Token 8: '#' (ID: 2)
  Prédit: 'for'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'for' → logprob: -0.004789664875715971
    2. ' for' → logprob: -5.62978982925415
    3. '```' → logprob: -7.62978982925415
    4. 'if' → logprob: -8.379789352416992
    5. '\n' → logprob: -9.379789352416992
    6. '+' → logprob: -9.504789352416992
    7. '(' → logprob: -10.004789352416992
    8. '[' → logprob: -10.379789352416992
    9. '<|end|>' → logprob: -10.379789352416992
    10. 'x' → logprob: -10.629789352416992

Token 9: ' je' (ID: 1264)
  Prédit: 'for'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'for' → logprob: -0.14332816004753113
    2. ' for' → logprob: -2.0183281898498535
    3. 'f' → logprob: -8.143327713012695
    4. 'if' → logprob: -8.768327713012695
    5. 'i' → logprob: -9.768327713012695
    6. 'x' → logprob: -9.893327713012695
    7. ' ' → logprob: -10.268327713012695
    8. ' if' → logprob: -10.768327713012695
    9. ' f' → logprob: -11.518327713012695
    10. 'fo' → logprob: -12.643327713012695

Token 10: ' commence' (ID: 44755)
  Prédit: 't'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 't' → logprob: -0.2964143455028534
    2. 'm' → logprob: -2.421414375305176
    3. 'mp' → logprob: -2.546414375305176
    4. 'ju' → logprob: -4.296414375305176
    5. 'st' → logprob: -4.796414375305176
    6. 'r' → logprob: -4.796414375305176
    7. 'ro' → logprob: -5.046414375305176
    8. 'j' → logprob: -5.046414375305176
    9. 'd' → logprob: -5.171414375305176
    10. '```' → logprob: -5.546414375305176

Token 11: ' par' (ID: 686)
  Prédit: ' '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' ' → logprob: -1.2108906507492065
    2. 'par' → logprob: -1.2108906507492065
    3. ' par' → logprob: -2.085890769958496
    4. 'for' → logprob: -2.460890769958496
    5. ' for' → logprob: -2.585890769958496
    6. ' à' → logprob: -3.335890769958496
    7. ' =' → logprob: -3.960890769958496
    8. ' a' → logprob: -3.960890769958496
    9. '=' → logprob: -4.460890769958496
    10. ' to' → logprob: -5.210890769958496

Token 12: ' ' (ID: 220)
  Prédit: ' for'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' for' → logprob: -0.45815351605415344
    2. 'for' → logprob: -1.083153486251831
    3. ' range' → logprob: -4.20815372467041
    4. 'range' → logprob: -4.58315372467041
    5. ' ' → logprob: -7.33315372467041
    6. ' a' → logprob: -7.70815372467041
    7. 'x' → logprob: -8.20815372467041
    8. ' parcour' → logprob: -8.20815372467041
    9. 'faire' → logprob: -8.58315372467041
    10. ' x' → logprob: -8.70815372467041

Token 13: '0' (ID: 15)
  Prédit: 'for'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'for' → logprob: -0.1034182533621788
    2. 'append' → logprob: -3.9784183502197266
    3. 'range' → logprob: -4.228418350219727
    4. 'tr' → logprob: -4.353418350219727
    5. 'aj' → logprob: -4.478418350219727
    6. 'par' → logprob: -4.603418350219727
    7. 'chercher' → logprob: -4.978418350219727
    8. 'faire' → logprob: -5.353418350219727
    9. 'l' → logprob: -5.478418350219727
    10. 'calcul' → logprob: -6.228418350219727

Token 14: ',' (ID: 11)
  Prédit: 'for'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'for' → logprob: -1.1872026920318604
    2. 'x' → logprob: -1.5622026920318604
    3. ' for' → logprob: -1.8122026920318604
    4. 'i' → logprob: -2.1872026920318604
    5. '\n' → logprob: -2.1872026920318604
    6. ' ' → logprob: -3.4372026920318604
    7. '0' → logprob: -4.187202453613281
    8. '```' → logprob: -4.687202453613281
    9. ',' → logprob: -4.937202453613281
    10. '\' → logprob: -5.312202453613281

Token 15: ' pourquoi' (ID: 39224)
  Prédit: 'i'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'i' → logprob: -0.18616227805614471
    2. 'for' → logprob: -2.436162233352661
    3. ' for' → logprob: -3.311162233352661
    4. ' i' → logprob: -3.811162233352661
    5. 'x' → logprob: -4.56116247177124
    6. ' ' → logprob: -5.56116247177124
    7. 'n' → logprob: -6.31116247177124
    8. 'while' → logprob: -6.43616247177124
    9. '0' → logprob: -6.81116247177124
    10. ' while' → logprob: -7.06116247177124

Token 16: ' pas' (ID: 2173)
  Prédit: 'x'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'x' → logprob: -0.8108066916465759
    2. ' ' → logprob: -1.4358067512512207
    3. '0' → logprob: -2.0608067512512207
    4. '_' → logprob: -2.1858067512512207
    5. '#' → logprob: -3.8108067512512207
    6. ',' → logprob: -3.9358067512512207
    7. ':' → logprob: -4.560806751251221
    8. '```' → logprob: -5.560806751251221
    9. '`' → logprob: -5.810806751251221
    10. '?' → logprob: -5.935806751251221

Token 17: '
' (ID: 198)
  Prédit: ' for'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' for' → logprob: -0.8158482909202576
    2. 'i' → logprob: -1.5658483505249023
    3. 'for' → logprob: -1.8158483505249023
    4. 'x' → logprob: -2.0658483505249023
    5. ' ' → logprob: -4.190848350524902
    6. '0' → logprob: -4.440848350524902
    7. '
' → logprob: -4.815848350524902
    8. ' i' → logprob: -5.190848350524902
    9. 'res' → logprob: -5.315848350524902
    10. '```' → logprob: -5.815848350524902

Token 18: 'for' (ID: 1938)
  Prédit: 'i'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'i' → logprob: -0.5811188817024231
    2. ' ' → logprob: -1.9561188220977783
    3. 'x' → logprob: -2.0811188220977783
    4. '0' → logprob: -2.5811188220977783
    5. ' i' → logprob: -2.9561188220977783
    6. ' for' → logprob: -3.7061188220977783
    7. 'res' → logprob: -5.206119060516357
    8. ' x' → logprob: -5.331119060516357
    9. 'for' → logprob: -5.581119060516357
    10. '_' → logprob: -6.331119060516357

Token 19: ' n' (ID: 297)
  Prédit: ' i'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' i' → logprob: -0.08720531314611435
    2. ' ' → logprob: -2.587205410003662
    3. '_' → logprob: -5.462205410003662
    4. ' _' → logprob: -5.712205410003662
    5. 'i' → logprob: -7.462205410003662
    6. ' ' → logprob: -9.212204933166504
    7. ' x' → logprob: -10.587204933166504
    8. ' ‌' → logprob: -11.212204933166504
    9. '  ' → logprob: -11.712204933166504
    10. ' ' → logprob: -12.212204933166504

Token 20: ' in' (ID: 306)
  Prédit: ' in'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' in' → logprob: -0.013976615853607655
    2. 'in' → logprob: -4.388976573944092
    3. ' ' → logprob: -6.638976573944092
    4. 'n' → logprob: -9.63897705078125
    5. '  ' → logprob: -9.88897705078125
    6. ' n' → logprob: -12.26397705078125
    7. 'space' → logprob: -12.26397705078125
    8. ' i' → logprob: -12.38897705078125
    9. ' ' → logprob: -12.51397705078125
    10. ',' → logprob: -12.63897705078125

Token 21: ' range' (ID: 3352)
  Prédit: ' range'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' range' → logprob: -0.033724769949913025
    2. 'range' → logprob: -3.408724784851074
    3. ' ' → logprob: -9.783724784851074
    4. ' xrange' → logprob: -12.033724784851074
    5. '	range' → logprob: -12.158724784851074
    6. '  ' → logprob: -13.033724784851074
    7. '(range' → logprob: -13.033724784851074
    8. '   ' → logprob: -13.283724784851074
    9. ' x' → logprob: -13.783724784851074
    10. '```' → logprob: -14.158724784851074

Token 22: '(x' (ID: 4061)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(' → logprob: -0.06289274990558624
    2. '(x' → logprob: -2.8128926753997803
    3. '(n' → logprob: -7.062892913818359
    4. ' (' → logprob: -10.68789291381836
    5. '(len' → logprob: -10.93789291381836
    6. '((' → logprob: -11.06289291381836
    7. '(
' → logprob: -12.06289291381836
    8. '(i' → logprob: -13.93789291381836
    9. '(int' → logprob: -14.06289291381836
    10. '(

' → logprob: -14.18789291381836

Token 23: ' +' (ID: 659)
  Prédit: '+'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '+' → logprob: -0.5577902793884277
    2. '):' → logprob: -1.0577902793884277
    3. ' +' → logprob: -2.9327902793884277
    4. ')' → logprob: -3.9327902793884277
    5. ' ):' → logprob: -5.057790279388428
    6. ' )' → logprob: -7.682790279388428
    7. ',' → logprob: -7.807790279388428
    8. ' ' → logprob: -9.682790756225586
    9. ':' → logprob: -10.182790756225586
    10. '1' → logprob: -10.682790756225586

Token 24: ' ' (ID: 220)
  Prédit: '1'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '1' → logprob: -0.04858827963471413
    2. ' ' → logprob: -3.048588275909424
    3. '   ' → logprob: -15.298588752746582
    4. ' ' → logprob: -15.548588752746582
    5. '2' → logprob: -15.923588752746582
    6. '+' → logprob: -15.923588752746582
    7. '  ' → logprob: -16.298587799072266
    8. '(' → logprob: -17.548587799072266
    9. ')' → logprob: -17.673587799072266
    10. '0' → logprob: -17.798587799072266

Token 25: '1' (ID: 16)
  Prédit: '1'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '1' → logprob: -0.0004307884373702109
    2. ' ' → logprob: -7.750430583953857
    3. '   ' → logprob: -16.625431060791016
    4. '  ' → logprob: -17.375431060791016
    5. '2' → logprob: -18.000431060791016
    6. '+' → logprob: -18.125431060791016
    7. '0' → logprob: -18.375431060791016
    8. ' ' → logprob: -19.000431060791016
    9. ')' → logprob: -19.500431060791016
    10. '```' → logprob: -20.000431060791016

Token 26: '):' (ID: 3127)
  Prédit: '):'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '):' → logprob: -0.0012091610115021467
    2. ')' → logprob: -7.501209259033203
    3. ':' → logprob: -7.626209259033203
    4. ',' → logprob: -9.251209259033203
    5. ' ):' → logprob: -10.126209259033203
    6. '):
' → logprob: -10.626209259033203
    7. '+' → logprob: -13.376209259033203
    8. '():' → logprob: -13.626209259033203
    9. '```' → logprob: -13.751209259033203
    10. ' ' → logprob: -14.001209259033203

Token 27: '  
' (ID: 4066)
  Prédit: ':'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ':' → logprob: -0.6898795962333679
    2. ' ' → logprob: -0.9398795962333679
    3. ' :' → logprob: -2.5648796558380127
    4. '   ' → logprob: -4.314879417419434
    5. '<|end|>' → logprob: -4.564879417419434
    6. ')' → logprob: -6.564879417419434
    7. '    ' → logprob: -6.689879417419434
    8. ' 
' → logprob: -7.189879417419434
    9. '\' → logprob: -7.564879417419434
    10. ' )' → logprob: -8.064879417419434

Token 28: '   ' (ID: 271)
  Prédit: ':'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ':' → logprob: -0.7285498380661011
    2. ' :' → logprob: -1.603549838066101
    3. '   ' → logprob: -1.728549838066101
    4. ' ' → logprob: -2.3535499572753906
    5. '    ' → logprob: -3.3535499572753906
    6. '<|end|>' → logprob: -5.353549957275391
    7. ' 
' → logprob: -7.353549957275391
    8. '    
' → logprob: -7.728549957275391
    9. ' :
' → logprob: -7.853549957275391
    10. '  ' → logprob: -7.853549957275391

Token 29: ' #' (ID: 1069)
  Prédit: ' res'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' res' → logprob: -0.31788477301597595
    2. 'res' → logprob: -1.9428848028182983
    3. '   ' → logprob: -2.692884683609009
    4. ' if' → logprob: -2.942884683609009
    5. '    ' → logprob: -5.567884922027588
    6. 'if' → logprob: -6.192884922027588
    7. ' ' → logprob: -6.317884922027588
    8. ' for' → logprob: -7.817884922027588
    9. '  ' → logprob: -9.31788444519043
    10. '    
' → logprob: -9.69288444519043

Token 30: ' on' (ID: 402)
  Prédit: ' if'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' if' → logprob: -0.2585364580154419
    2. ' res' → logprob: -2.0085363388061523
    3. 'if' → logprob: -3.1335363388061523
    4. ' for' → logprob: -3.3835363388061523
    5. 'res' → logprob: -5.258536338806152
    6. ' ' → logprob: -5.633536338806152
    7. '   ' → logprob: -5.883536338806152
    8. 'for' → logprob: -5.883536338806152
    9. 's' → logprob: -8.133536338806152
    10. ' n' → logprob: -8.383536338806152

Token 31: ' saute' (ID: 146395)
  Prédit: ' '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' ' → logprob: -0.9694545865058899
    2. ' ajoute' → logprob: -1.5944545269012451
    3. ' calc' → logprob: -3.094454526901245
    4. ' append' → logprob: -3.344454526901245
    5. ' regarde' → logprob: -3.719454526901245
    6. ' continue' → logprob: -3.719454526901245
    7. 'append' → logprob: -3.969454526901245
    8. ' prend' → logprob: -3.969454526901245
    9. ' veut' → logprob: -4.219454765319824
    10. ' teste' → logprob: -4.219454765319824

Token 32: ' les' (ID: 1341)
  Prédit: 'les'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'les' → logprob: -0.7433220148086548
    2. ' les' → logprob: -0.9933220148086548
    3. 'n' → logprob: -2.4933218955993652
    4. ' ' → logprob: -3.8683218955993652
    5. ' n' → logprob: -4.118321895599365
    6. '   ' → logprob: -4.493321895599365
    7. 'le' → logprob: -4.618321895599365
    8. ' if' → logprob: -5.618321895599365
    9. 'if' → logprob: -6.243321895599365
    10. '<|end|>' → logprob: -6.493321895599365

Token 33: ' multiples' (ID: 70720)
  Prédit: 'n'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'n' → logprob: -1.016585111618042
    2. '0' → logprob: -1.391585111618042
    3. ' nombres' → logprob: -1.641585111618042
    4. ' ' → logprob: -2.141585111618042
    5. ' n' → logprob: -3.516585111618042
    6. 'div' → logprob: -4.391585350036621
    7. 'nombre' → logprob: -4.891585350036621
    8. ' valeurs' → logprob: -5.641585350036621
    9. 'val' → logprob: -5.766585350036621
    10. ' multiples' → logprob: -5.891585350036621

Token 34: ' de' (ID: 334)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -1.1368402242660522
    2. ' ' → logprob: -1.3868402242660522
    3. ' de' → logprob: -1.5118402242660522
    4. '    ' → logprob: -1.7618402242660522
    5. '  ' → logprob: -4.011840343475342
    6. 'de' → logprob: -4.636840343475342
    7. ' of' → logprob: -5.761840343475342
    8. '<|end|>' → logprob: -6.136840343475342
    9. ' ' → logprob: -7.386840343475342
    10. ' d' → logprob: -7.386840343475342

Token 35: ' ' (ID: 220)
  Prédit: '3'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '3' → logprob: -0.16697075963020325
    2. ' ' → logprob: -2.041970729827881
    3. '2' → logprob: -4.791970729827881
    4. '5' → logprob: -4.916970729827881
    5. '7' → logprob: -5.291970729827881
    6. '4' → logprob: -6.291970729827881
    7. '10' → logprob: -7.416970729827881
    8. '6' → logprob: -7.791970729827881
    9. '9' → logprob: -9.541971206665039
    10. '  ' → logprob: -9.666971206665039

Token 36: '3' (ID: 18)
  Prédit: '3'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '3' → logprob: -0.12424607574939728
    2. '2' → logprob: -2.874246120452881
    3. '5' → logprob: -3.249246120452881
    4. '7' → logprob: -4.749246120452881
    5. '4' → logprob: -5.249246120452881
    6. '10' → logprob: -5.374246120452881
    7. ' ' → logprob: -7.624246120452881
    8. '6' → logprob: -7.624246120452881
    9. 'n' → logprob: -7.874246120452881
    10. '11' → logprob: -8.374245643615723

Token 37: ' et' (ID: 859)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.6349766254425049
    2. ':' → logprob: -1.2599766254425049
    3. '    ' → logprob: -2.759976625442505
    4. ' :' → logprob: -3.384976625442505
    5. ' ' → logprob: -4.009976387023926
    6. ' if' → logprob: -4.134976387023926
    7. '  ' → logprob: -4.384976387023926
    8. '   
' → logprob: -4.759976387023926
    9. '     
' → logprob: -4.759976387023926
    10. '<|end|>' → logprob: -5.134976387023926

Token 38: ' ' (ID: 220)
  Prédit: ' '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' ' → logprob: -0.2902371883392334
    2. '5' → logprob: -1.5402371883392334
    3. '7' → logprob: -3.6652371883392334
    4. '4' → logprob: -5.5402374267578125
    5. '2' → logprob: -5.7902374267578125
    6. '    ' → logprob: -6.7902374267578125
    7. '  ' → logprob: -7.4152374267578125
    8. '6' → logprob: -7.4152374267578125
    9. '9' → logprob: -7.9152374267578125
    10. '   ' → logprob: -8.165237426757812

Token 39: '5' (ID: 20)
  Prédit: '5'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '5' → logprob: -0.08473356813192368
    2. '2' → logprob: -3.334733486175537
    3. ' ' → logprob: -3.334733486175537
    4. '7' → logprob: -4.959733486175537
    5. '4' → logprob: -6.334733486175537
    6. '3' → logprob: -7.584733486175537
    7. '```' → logprob: -8.709733963012695
    8. '   ' → logprob: -8.959733963012695
    9. '9' → logprob: -9.709733963012695
    10. '  ' → logprob: -9.834733963012695

Token 40: ' en' (ID: 469)
  Prédit: ':'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ':' → logprob: -0.2483244687318802
    2. '   ' → logprob: -1.8733245134353638
    3. ' :' → logprob: -3.873324394226074
    4. '    ' → logprob: -4.873324394226074
    5. ',' → logprob: -4.873324394226074
    6. '```' → logprob: -4.873324394226074
    7. ' if' → logprob: -5.123324394226074
    8. '   
' → logprob: -5.873324394226074
    9. ' 
' → logprob: -6.123324394226074
    10. '     
' → logprob: -6.373324394226074

Token 41: ' même' (ID: 9679)
  Prédit: 'continue'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'continue' → logprob: -0.41823795437812805
    2. ' continue' → logprob: -1.5432379245758057
    3. 'contin' → logprob: -3.0432379245758057
    4. 'continu' → logprob: -3.9182379245758057
    5. ' continu' → logprob: -4.168238162994385
    6. 'if' → logprob: -4.793238162994385
    7. ' continuer' → logprob: -5.168238162994385
    8. ' ' → logprob: -5.543238162994385
    9. 'continued' → logprob: -6.293238162994385
    10. 't' → logprob: -6.418238162994385

Token 42: ' temps' (ID: 11160)
  Prédit: 'temps'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'temps' → logprob: -0.13057588040828705
    2. ' temps' → logprob: -2.2555758953094482
    3. 't' → logprob: -4.505575656890869
    4. 'temp' → logprob: -6.005575656890869
    5. ' ' → logprob: -6.255575656890869
    6. 'tem' → logprob: -7.130575656890869
    7. '-' → logprob: -8.005576133728027
    8. '```' → logprob: -8.130576133728027
    9. '  ' → logprob: -8.630576133728027
    10. '   ' → logprob: -9.380576133728027

Token 43: '
' (ID: 198)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.49625417590141296
    2. ':' → logprob: -0.9962542057037354
    3. '       ' → logprob: -4.621253967285156
    4. ' :' → logprob: -5.871253967285156
    5. '    ' → logprob: -5.996253967285156
    6. '<|end|>' → logprob: -6.246253967285156
    7. ' ' → logprob: -6.621253967285156
    8. '  ' → logprob: -6.746253967285156
    9. ',' → logprob: -7.746253967285156
    10. ':
' → logprob: -7.871253967285156

Token 44: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.015565725974738598
    2. ':' → logprob: -5.140565872192383
    3. '       ' → logprob: -5.765565872192383
    4. '    ' → logprob: -5.765565872192383
    5. ' ' → logprob: -6.265565872192383
    6. '```' → logprob: -8.140565872192383
    7. '<|end|>' → logprob: -8.265565872192383
    8. '  ' → logprob: -8.390565872192383
    9. ' if' → logprob: -8.515565872192383
    10. ',' → logprob: -9.265565872192383

Token 45: ' if' (ID: 538)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.004536923486739397
    2. ' if' → logprob: -6.129537105560303
    3. '       ' → logprob: -6.629537105560303
    4. '    ' → logprob: -7.254537105560303
    5. 'if' (adapté à ' if') → logprob: -8.254536628723145
    6. '```' → logprob: -10.879536628723145
    7. ' ' → logprob: -11.254536628723145
    8. '  ' → logprob: -11.379536628723145
    9. '     ' → logprob: -12.629536628723145
    10. ',' → logprob: -12.754536628723145

Token 46: ' n' (ID: 297)
  Prédit: ' n'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' n' → logprob: -0.015781300142407417
    2. ' (' → logprob: -4.640781402587891
    3. 'n' → logprob: -5.765781402587891
    4. ' not' → logprob: -6.640781402587891
    5. '(n' → logprob: -7.140781402587891
    6. ' ' → logprob: -7.265781402587891
    7. '(' → logprob: -9.89078140258789
    8. '	n' → logprob: -11.26578140258789
    9. ' ' → logprob: -12.01578140258789
    10. 'not' → logprob: -13.14078140258789

Token 47: ' %' (ID: 1851)
  Prédit: ' %'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' %' → logprob: -0.008778482675552368
    2. '%' → logprob: -4.8837785720825195
    3. ' ' → logprob: -6.7587785720825195
    4. ' ==' → logprob: -12.63377857208252
    5. ' ' → logprob: -13.13377857208252
    6. ' %(' → logprob: -14.13377857208252
    7. '%i' → logprob: -14.38377857208252
    8. '  ' → logprob: -14.63377857208252
    9. '%(' → logprob: -14.88377857208252
    10. '```' → logprob: -14.88377857208252

Token 48: ' ' (ID: 220)
  Prédit: '3'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '3' → logprob: -0.14696180820465088
    2. '15' → logprob: -2.2719616889953613
    3. ' ' → logprob: -3.3969616889953613
    4. '   ' → logprob: -10.64696216583252
    5. '  ' → logprob: -11.14696216583252
    6. '30' → logprob: -11.14696216583252
    7. '```' → logprob: -11.39696216583252
    8. '(' → logprob: -11.89696216583252
    9. '1' → logprob: -12.27196216583252
    10. '    ' → logprob: -12.52196216583252

Token 49: '3' (ID: 18)
  Prédit: '3'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '3' → logprob: -0.16076965630054474
    2. '15' → logprob: -1.9107697010040283
    3. ' ' → logprob: -7.535769462585449
    4. '```' → logprob: -12.28576946258545
    5. '   ' → logprob: -13.16076946258545
    6. '1' → logprob: -13.41076946258545
    7. '  ' → logprob: -14.41076946258545
    8. '35' → logprob: -14.53576946258545
    9. '{' → logprob: -14.78576946258545
    10. '(' → logprob: -14.91076946258545

Token 50: ' ==' (ID: 951)
  Prédit: ' =='
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' ==' → logprob: -0.37113136053085327
    2. '==' → logprob: -1.246131420135498
    3. ' !=' → logprob: -4.121131420135498
    4. ' and' → logprob: -5.746131420135498
    5. '!=' → logprob: -6.121131420135498
    6. 'and' → logprob: -7.496131420135498
    7. ' ' → logprob: -9.12113094329834
    8. ' or' → logprob: -9.62113094329834
    9. '0' → logprob: -9.99613094329834
    10. '=' → logprob: -11.49613094329834

Token 51: ' ' (ID: 220)
  Prédit: '0'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '0' → logprob: -0.10021001845598221
    2. ' ' → logprob: -2.350209951400757
    3. '=' → logprob: -14.412710189819336
    4. '```' → logprob: -14.537710189819336
    5. '5' → logprob: -14.975210189819336
    6. '3' → logprob: -15.037710189819336
    7. '1' → logprob: -15.287710189819336
    8. '2' → logprob: -15.412710189819336
    9. '    ' → logprob: -15.787710189819336
    10. '  ' → logprob: -15.975210189819336

Token 52: '0' (ID: 15)
  Prédit: '0'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '0' → logprob: -0.0015111699467524886
    2. ' ' → logprob: -6.501511096954346
    3. '5' → logprob: -12.501511573791504
    4. '3' → logprob: -13.126511573791504
    5. '1' → logprob: -14.376511573791504
    6. '```' → logprob: -14.689011573791504
    7. '2' → logprob: -14.876511573791504
    8. '4' → logprob: -15.251511573791504
    9. '  ' → logprob: -15.564011573791504
    10. '    ' → logprob: -15.939011573791504

Token 53: ' and' (ID: 326)
  Prédit: ' and'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' and' → logprob: -0.05018824338912964
    2. ' or' → logprob: -3.4251883029937744
    3. 'and' → logprob: -4.175188064575195
    4. ' ' → logprob: -6.925188064575195
    5. '<|end|>' → logprob: -10.550188064575195
    6. '    ' → logprob: -11.675188064575195
    7. '   ' → logprob: -12.300188064575195
    8. '  ' → logprob: -12.550188064575195
    9. 'or' → logprob: -12.800188064575195
    10. ' et' → logprob: -13.175188064575195

Token 54: ' n' (ID: 297)
  Prédit: ' n'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' n' → logprob: -0.029765060171484947
    2. 'n' → logprob: -3.5297651290893555
    3. '	n' → logprob: -11.779765129089355
    4. ' ' → logprob: -12.779765129089355
    5. ' ' → logprob: -13.279765129089355
    6. '    ' → logprob: -14.654765129089355
    7. '   ' → logprob: -14.654765129089355
    8. '5' → logprob: -15.029765129089355
    9. '7' → logprob: -15.154765129089355
    10. ' not' → logprob: -16.27976417541504

Token 55: ' %' (ID: 1851)
  Prédit: ' %'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' %' → logprob: -0.14280061423778534
    2. '%' → logprob: -2.0178005695343018
    3. ' ' → logprob: -9.017800331115723
    4. ' ' → logprob: -13.392800331115723
    5. '   ' → logprob: -14.392800331115723
    6. '  ' → logprob: -14.392800331115723
    7. '5' → logprob: -14.767800331115723
    8. '7' → logprob: -15.392800331115723
    9. '```' → logprob: -16.45530128479004
    10. '4' → logprob: -16.76780128479004

Token 56: ' ' (ID: 220)
  Prédit: ' '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' ' → logprob: -0.34850525856018066
    2. '5' → logprob: -1.2235052585601807
    3. '<|end|>' → logprob: -9.973505020141602
    4. ' ' → logprob: -12.598505020141602
    5. '  ' → logprob: -12.723505020141602
    6. '```' → logprob: -13.473505020141602
    7. '<|end|>' → logprob: -14.536005020141602
    8. '%' → logprob: -14.786005020141602
    9. ' five' → logprob: -14.786005020141602
    10. 's' → logprob: -14.848505020141602

Token 57: '5' (ID: 20)
  Prédit: '5'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '5' → logprob: -1.688212614681106e-05
    2. ' ' → logprob: -11.125017166137695
    3. '<|end|>' → logprob: -13.375017166137695
    4. '  ' → logprob: -15.375017166137695
    5. '   ' → logprob: -16.500017166137695
    6. '```' → logprob: -16.625017166137695
    7. '...' → logprob: -18.062517166137695
    8. '۵' → logprob: -18.062517166137695
    9. ' ' → logprob: -18.250017166137695
    10. '<|end|>' → logprob: -18.312517166137695

Token 58: ' ==' (ID: 951)
  Prédit: ' =='
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' ==' → logprob: -0.2565692663192749
    2. ' !=' → logprob: -1.756569266319275
    3. '==' → logprob: -3.0065693855285645
    4. '<|end|>' → logprob: -6.2565693855285645
    5. '!=' → logprob: -6.7565693855285645
    6. ' ' → logprob: -7.3815693855285645
    7. '0' → logprob: -8.881568908691406
    8. '<|end|>' → logprob: -9.006568908691406
    9. '=' → logprob: -9.506568908691406
    10. ' ' → logprob: -9.756568908691406

Token 59: ' ' (ID: 220)
  Prédit: '0'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '0' → logprob: -0.3132622241973877
    2. ' ' → logprob: -1.3132622241973877
    3. '<|end|>' → logprob: -15.438261985778809
    4. '```' → logprob: -16.313262939453125
    5. ' ' → logprob: -16.938262939453125
    6. '00' → logprob: -17.188262939453125
    7. '۰' → logprob: -17.938262939453125
    8. '1' → logprob: -17.938262939453125
    9. '  ' → logprob: -18.125762939453125
    10. '7' → logprob: -19.375762939453125

Token 60: '0' (ID: 15)
  Prédit: '0'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '0' → logprob: -2.4391956685576588e-05
    2. ' ' → logprob: -10.625024795532227
    3. '۰' → logprob: -19.500024795532227
    4. '00' → logprob: -19.625024795532227
    5. '٠' → logprob: -21.125024795532227
    6. '０' → logprob: -21.250024795532227
    7. '০' → logprob: -21.500024795532227
    8. '०' → logprob: -22.000024795532227
    9. '000' → logprob: -22.000024795532227
    10. '  ' → logprob: -22.125024795532227

Token 61: ':
' (ID: 734)
  Prédit: ':'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ':' → logprob: -0.0015752100152894855
    2. '       ' → logprob: -6.626574993133545
    3. ':
' → logprob: -8.626575469970703
    4. '   ' → logprob: -10.126575469970703
    5. ' :' → logprob: -11.126575469970703
    6. ' continue' → logprob: -12.126575469970703
    7. '):' → logprob: -12.751575469970703
    8. '	continue' → logprob: -12.876575469970703
    9. 'continue' → logprob: -13.501575469970703
    10. ' continues' → logprob: -14.001575469970703

Token 62: '       ' (ID: 309)
  Prédit: '       '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '       ' → logprob: -0.001344042830169201
    2. ' continue' → logprob: -6.751344203948975
    3. 'continue' → logprob: -9.376343727111816
    4. ':' → logprob: -10.251343727111816
    5. '	continue' → logprob: -10.626343727111816
    6. '   ' → logprob: -11.376343727111816
    7. ' continues' → logprob: -12.376343727111816
    8. '	' → logprob: -12.376343727111816
    9. ',' → logprob: -13.126343727111816
    10. '_continue' → logprob: -13.626343727111816

Token 63: ' continue' (ID: 4901)
  Prédit: '       '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '       ' → logprob: -0.43105217814445496
    2. ' continue' → logprob: -1.4310522079467773
    3. '   ' → logprob: -2.4310522079467773
    4. 'continue' (adapté à ' continue') → logprob: -3.8060522079467773
    5. '	continue' → logprob: -7.556052207946777
    6. '    ' → logprob: -9.056052207946777
    7. '```' → logprob: -9.056052207946777
    8. 'contin' → logprob: -9.931052207946777
    9. '_continue' → logprob: -10.806052207946777
    10. ' ' → logprob: -11.056052207946777

Token 64: '
' (ID: 198)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.8120375871658325
    2. '    
' → logprob: -0.9370375871658325
    3. '
' → logprob: -2.437037467956543
    4. '   
' → logprob: -3.187037467956543
    5. '  
' → logprob: -3.937037467956543
    6. ' 
' → logprob: -4.312037467956543
    7. '\n' → logprob: -7.312037467956543
    8. '     
' → logprob: -7.437037467956543
    9. 'n' → logprob: -7.812037467956543
    10. '<|end|>' → logprob: -8.812037467956543

Token 65: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.16953513026237488
    2. '    
' → logprob: -1.9195351600646973
    3. '   
' → logprob: -5.294535160064697
    4. '
' → logprob: -6.669535160064697
    5. '\n' → logprob: -7.294535160064697
    6. ' 
' → logprob: -7.544535160064697
    7. '  
' → logprob: -7.544535160064697
    8. 'n' → logprob: -7.919535160064697
    9. '\' → logprob: -8.794534683227539
    10. '     
' → logprob: -8.794534683227539

Token 66: ' elif' (ID: 9497)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.1002216562628746
    2. 'res' → logprob: -2.475221633911133
    3. '    
' → logprob: -5.600221633911133
    4. ' res' → logprob: -6.225221633911133
    5. ' ' → logprob: -6.475221633911133
    6. ')' → logprob: -6.850221633911133
    7. '  ' → logprob: -7.350221633911133
    8. '   
' → logprob: -7.725221633911133
    9. '  
' → logprob: -7.975221633911133
    10. '
' → logprob: -8.100221633911133

Token 67: ' n' (ID: 297)
  Prédit: ' n'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' n' → logprob: -0.014680035412311554
    2. 'n' → logprob: -4.264679908752441
    3. ' x' → logprob: -8.639679908752441
    4. ' ' → logprob: -8.764679908752441
    5. ' (' → logprob: -10.014679908752441
    6. ' ' → logprob: -10.264679908752441
    7. 'x' → logprob: -10.889679908752441
    8. '    ' → logprob: -11.389679908752441
    9. '   ' → logprob: -11.389679908752441
    10. '(' → logprob: -11.389679908752441

Token 68: ' %' (ID: 1851)
  Prédit: ' %'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' %' → logprob: -0.006045639514923096
    2. '%' → logprob: -5.131045818328857
    3. ' ' → logprob: -9.1310453414917
    4. ' ' → logprob: -12.7560453414917
    5. ' ==' → logprob: -13.1310453414917
    6. '   ' → logprob: -14.6310453414917
    7. '==' → logprob: -14.7560453414917
    8. ' not' → logprob: -14.8810453414917
    9. ' >' → logprob: -15.1310453414917
    10. '>' → logprob: -15.1310453414917

Token 69: ' ' (ID: 220)
  Prédit: '3'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '3' → logprob: -0.474319726228714
    2. ' ' → logprob: -0.9743196964263916
    3. '2' → logprob: -8.974319458007812
    4. '5' → logprob: -10.224319458007812
    5. '1' → logprob: -10.974319458007812
    6. '  ' → logprob: -11.349319458007812
    7. '<|end|>' → logprob: -11.349319458007812
    8. '4' → logprob: -12.036819458007812
    9. '   ' → logprob: -12.099319458007812
    10. '6' → logprob: -12.224319458007812

Token 70: '3' (ID: 18)
  Prédit: '3'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '3' → logprob: -2.3080716346157715e-05
    2. '5' → logprob: -11.250022888183594
    3. ' ' → logprob: -12.000022888183594
    4. '15' → logprob: -13.375022888183594
    5. '1' → logprob: -14.375022888183594
    6. '   ' → logprob: -14.625022888183594
    7. '2' → logprob: -15.062522888183594
    8. '[' → logprob: -15.687522888183594
    9. '  ' → logprob: -16.250022888183594
    10. '```' → logprob: -16.375022888183594

Token 71: ' ==' (ID: 951)
  Prédit: '=='
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '==' → logprob: -0.6971414685249329
    2. ' ==' → logprob: -0.6971414685249329
    3. ' !=' → logprob: -5.822141647338867
    4. '!=' → logprob: -6.947141647338867
    5. ' ' → logprob: -10.447141647338867
    6. '=' → logprob: -10.697141647338867
    7. '0' → logprob: -12.572141647338867
    8. ':' → logprob: -13.572141647338867
    9. ' or' → logprob: -13.822141647338867
    10. '==
' → logprob: -13.822141647338867

Token 72: ' ' (ID: 220)
  Prédit: '0'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '0' → logprob: -0.04861518368124962
    2. ' ' → logprob: -3.0486152172088623
    3. '1' → logprob: -10.798615455627441
    4. '=' → logprob: -12.423615455627441
    5. '2' → logprob: -14.923615455627441
    6. '==' → logprob: -15.298615455627441
    7. '```' → logprob: -15.361115455627441
    8. '3' → logprob: -15.486115455627441
    9. ' ' → logprob: -15.548615455627441
    10. '  ' → logprob: -15.611115455627441

Token 73: '0' (ID: 15)
  Prédit: '0'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '0' → logprob: -0.0008189192740246654
    2. ' ' → logprob: -7.125818729400635
    3. '1' → logprob: -11.500819206237793
    4. '=' → logprob: -13.250819206237793
    5. '```' → logprob: -14.438319206237793
    6. '5' → logprob: -14.750819206237793
    7. '2' → logprob: -15.250819206237793
    8. '3' → logprob: -15.875819206237793
    9. ')' → logprob: -16.313318252563477
    10. '۰' → logprob: -16.375818252563477

Token 74: ':' (ID: 25)
  Prédit: ':'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ':' → logprob: -0.020705612376332283
    2. ' or' → logprob: -3.8957056999206543
    3. '   ' → logprob: -9.395705223083496
    4. ' :' → logprob: -10.520705223083496
    5. 'or' → logprob: -11.395705223083496
    6. ':
' → logprob: -11.395705223083496
    7. ' and' → logprob: -11.520705223083496
    8. '       ' → logprob: -12.145705223083496
    9. '):' → logprob: -12.145705223083496
    10. ',' → logprob: -13.145705223083496

Token 75: ' ' (ID: 220)
  Prédit: '       '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '       ' → logprob: -0.0010681778658181429
    2. ' ' → logprob: -7.751068115234375
    3. '   ' → logprob: -9.126068115234375
    4. 'res' → logprob: -9.376068115234375
    5. ' res' → logprob: -9.376068115234375
    6. '        
' → logprob: -9.501068115234375
    7. '      ' → logprob: -9.876068115234375
    8. '    ' → logprob: -10.126068115234375
    9. '        ' → logprob: -10.751068115234375
    10. '     ' → logprob: -10.876068115234375

Token 76: ' #' (ID: 1069)
  Prédit: '       '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '       ' → logprob: -0.027244335040450096
    2. ' res' → logprob: -4.277244567871094
    3. 'res' → logprob: -4.527244567871094
    4. '   ' → logprob: -6.402244567871094
    5. ' continue' → logprob: -8.902244567871094
    6. 'continue' → logprob: -9.527244567871094
    7. '    ' → logprob: -9.902244567871094
    8. '      ' → logprob: -10.152244567871094
    9. '     ' → logprob: -10.527244567871094
    10. '```' → logprob: -10.777244567871094

Token 77: ' multiples' (ID: 70720)
  Prédit: '       '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '       ' → logprob: -0.5502462387084961
    2. ' res' → logprob: -1.175246238708496
    3. '   ' → logprob: -2.925246238708496
    4. 'res' → logprob: -2.925246238708496
    5. '    ' → logprob: -5.425246238708496
    6. ' continue' → logprob: -7.175246238708496
    7. ' ' → logprob: -8.300246238708496
    8. '        ' → logprob: -8.675246238708496
    9. ' ' → logprob: -8.800246238708496
    10. '        
' → logprob: -8.800246238708496

Token 78: ' de' (ID: 334)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.09878386557102203
    2. ' de' → logprob: -3.0987839698791504
    3. '       ' → logprob: -3.9737839698791504
    4. ' of' → logprob: -4.47378396987915
    5. ' ' → logprob: -5.22378396987915
    6. ':' → logprob: -5.59878396987915
    7. '  ' → logprob: -6.09878396987915
    8. '    ' → logprob: -6.34878396987915
    9. 'de' → logprob: -6.59878396987915
    10. '<|end|>' → logprob: -6.84878396987915

Token 79: ' ' (ID: 220)
  Prédit: '3'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '3' → logprob: -0.3132845163345337
    2. ' ' → logprob: -1.3132845163345337
    3. ' ' → logprob: -10.938284873962402
    4. '5' → logprob: -13.813284873962402
    5. '1' → logprob: -14.188284873962402
    6. '   ' → logprob: -14.500784873962402
    7. '  ' → logprob: -14.688284873962402
    8. '```' → logprob: -15.000784873962402
    9. '2' → logprob: -15.125784873962402
    10. ' trois' → logprob: -15.188284873962402

Token 80: '3' (ID: 18)
  Prédit: '3'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '3' → logprob: -0.0007161272224038839
    2. ' ' → logprob: -7.250716209411621
    3. '5' → logprob: -12.125716209411621
    4. '   ' → logprob: -15.750716209411621
    5. ' ' → logprob: -15.875716209411621
    6. '  ' → logprob: -16.000715255737305
    7. '```' → logprob: -16.250715255737305
    8. '1' → logprob: -16.375715255737305
    9. '2' → logprob: -16.875715255737305
    10. ' trois' → logprob: -17.188215255737305

Token 81: '
' (ID: 198)
  Prédit: '       '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '       ' → logprob: -0.5351136922836304
    2. ':' → logprob: -1.4101136922836304
    3. '   ' → logprob: -1.7851136922836304
    4. ' :' → logprob: -7.41011381149292
    5. ' continue' → logprob: -7.66011381149292
    6. ' or' → logprob: -7.91011381149292
    7. ':
' → logprob: -8.410113334655762
    8. '  ' → logprob: -9.035113334655762
    9. '```' → logprob: -9.035113334655762
    10. '    ' → logprob: -9.285113334655762

Token 82: '       ' (ID: 309)
  Prédit: '       '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '       ' → logprob: -0.07128185778856277
    2. '   ' → logprob: -3.071281909942627
    3. ':' → logprob: -4.446281909942627
    4. ' res' → logprob: -5.071281909942627
    5. 'res' → logprob: -6.071281909942627
    6. '        
' → logprob: -7.821281909942627
    7. '
' → logprob: -7.946281909942627
    8. '    ' → logprob: -8.071281433105469
    9. ' :' → logprob: -8.571281433105469
    10. '    
' → logprob: -8.821281433105469

Token 83: ' continue' (ID: 4901)
  Prédit: 'res'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'res' → logprob: -0.6174675822257996
    2. ' res' → logprob: -0.8674675822257996
    3. '   ' → logprob: -3.2424676418304443
    4. '       ' → logprob: -6.992467403411865
    5. 'print' → logprob: -8.867467880249023
    6. ' ' → logprob: -9.367467880249023
    7. '    ' → logprob: -9.492467880249023
    8. '           ' → logprob: -9.617467880249023
    9. ' print' → logprob: -9.867467880249023
    10. ' continue' → logprob: -9.992467880249023

Token 84: '
' (ID: 198)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.3217625916004181
    2. '    
' → logprob: -1.3217625617980957
    3. ' 
' → logprob: -5.696762561798096
    4. '<|end|>' → logprob: -5.821762561798096
    5. '   
' → logprob: -6.946762561798096
    6. '  
' → logprob: -7.821762561798096
    7. '
' → logprob: -8.321763038635254
    8. '     
' → logprob: -8.571763038635254
    9. '    ' → logprob: -9.321763038635254
    10. '        
' → logprob: -9.696763038635254

Token 85: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.0013610669411718845
    2. '    
' → logprob: -6.876360893249512
    3. '<|end|>' → logprob: -9.501360893249512
    4. ' elif' → logprob: -9.626360893249512
    5. '  ' → logprob: -9.626360893249512
    6. 'elif' → logprob: -9.751360893249512
    7. '    ' → logprob: -10.126360893249512
    8. '   
' → logprob: -11.626360893249512
    9. ' ' → logprob: -12.751360893249512
    10. '<|end|>' → logprob: -13.001360893249512

Token 86: ' elif' (ID: 9497)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.049095507711172104
    2. 'elif' (adapté à ' elif') → logprob: -3.674095392227173
    3. ' elif' → logprob: -3.799095392227173
    4. '    
' → logprob: -10.049095153808594
    5. '    ' → logprob: -10.299095153808594
    6. '  ' → logprob: -10.299095153808594
    7. '	elif' → logprob: -11.174095153808594
    8. ' ' → logprob: -11.799095153808594
    9. ' else' → logprob: -12.549095153808594
    10. 'n' → logprob: -13.299095153808594

Token 87: ' n' (ID: 297)
  Prédit: ' n'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' n' → logprob: -0.011053952388465405
    2. 'n' → logprob: -4.511054039001465
    3. ' x' → logprob: -12.886054039001465
    4. ' ' → logprob: -13.761054039001465
    5. 'x' → logprob: -14.011054039001465
    6. '(n' → logprob: -14.386054039001465
    7. ' ' → logprob: -14.511054039001465
    8. ' (' → logprob: -14.886054039001465
    9. '   ' → logprob: -17.01105308532715
    10. '	n' → logprob: -17.01105308532715

Token 88: ' %' (ID: 1851)
  Prédit: ' %'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' %' → logprob: -0.02062714472413063
    2. '%' → logprob: -3.89562726020813
    3. ' ' → logprob: -9.39562702178955
    4. ' ' → logprob: -14.52062702178955
    5. ' ==' → logprob: -15.52062702178955
    6. '  ' → logprob: -15.64562702178955
    7. 's' → logprob: -15.77062702178955
    8. '```' → logprob: -16.145627975463867
    9. '   ' → logprob: -16.395627975463867
    10. '1' → logprob: -16.458127975463867

Token 89: ' ' (ID: 220)
  Prédit: '5'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '5' → logprob: -0.007620945107191801
    2. ' ' → logprob: -4.882620811462402
    3. '   ' → logprob: -12.257620811462402
    4. '  ' → logprob: -13.195120811462402
    5. '```' → logprob: -13.445120811462402
    6. '%' → logprob: -13.570120811462402
    7. '<|end|>' → logprob: -13.632620811462402
    8. '1' → logprob: -14.632620811462402
    9. ' ' → logprob: -14.882620811462402
    10. '>' → logprob: -14.945120811462402

Token 90: '5' (ID: 20)
  Prédit: '5'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '5' → logprob: -3.047134305234067e-05
    2. ' ' → logprob: -10.500030517578125
    3. '<|end|>' → logprob: -13.875030517578125
    4. '%' → logprob: -14.500030517578125
    5. '```' → logprob: -15.250030517578125
    6. '0' → logprob: -16.062530517578125
    7. '  ' → logprob: -16.187530517578125
    8. '५' → logprob: -16.687530517578125
    9. '1' → logprob: -16.750030517578125
    10. '۵' → logprob: -16.812530517578125

Token 91: ' ==' (ID: 951)
  Prédit: ' =='
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' ==' → logprob: -0.3492388129234314
    2. '==' → logprob: -1.2242388725280762
    3. ' !=' → logprob: -7.724238872528076
    4. '=' → logprob: -9.224238395690918
    5. ' ' → logprob: -9.224238395690918
    6. '!=' → logprob: -9.724238395690918
    7. ':' → logprob: -9.849238395690918
    8. ' :' → logprob: -10.599238395690918
    9. ' =' → logprob: -11.349238395690918
    10. '   ' → logprob: -13.599238395690918

Token 92: ' ' (ID: 220)
  Prédit: '0'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '0' → logprob: -0.06196925416588783
    2. ' ' → logprob: -2.81196928024292
    3. '   ' → logprob: -14.811968803405762
    4. '  ' → logprob: -15.124468803405762
    5. ' ' → logprob: -15.311968803405762
    6. '```' → logprob: -15.374468803405762
    7. '    ' → logprob: -16.061969757080078
    8. '1' → logprob: -16.186969757080078
    9. '5' → logprob: -16.311969757080078
    10. '=' → logprob: -17.249469757080078

Token 93: '0' (ID: 15)
  Prédit: '0'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '0' → logprob: -0.0007114782347343862
    2. ' ' → logprob: -7.250711441040039
    3. '```' → logprob: -15.063211441040039
    4. '1' → logprob: -15.688211441040039
    5. '۰' → logprob: -15.750711441040039
    6. '  ' → logprob: -16.25071144104004
    7. '5' → logprob: -16.37571144104004
    8. '   ' → logprob: -16.43821144104004
    9. '==' → logprob: -16.62571144104004
    10. '=' → logprob: -16.81321144104004

Token 94: ':' (ID: 25)
  Prédit: ':'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ':' → logprob: -0.0011050907196477056
    2. '       ' → logprob: -7.126105308532715
    3. ':
' → logprob: -8.751105308532715
    4. '   ' → logprob: -8.876105308532715
    5. ' continue' → logprob: -14.376105308532715
    6. ' :' → logprob: -14.751105308532715
    7. 'continue' → logprob: -14.751105308532715
    8. '):' → logprob: -14.876105308532715
    9. ',' → logprob: -15.001105308532715
    10. ' ' → logprob: -16.2511043548584

Token 95: ' ' (ID: 220)
  Prédit: '       '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '       ' → logprob: -0.005787412170320749
    2. ' continue' → logprob: -5.755787372589111
    3. 'continue' → logprob: -6.130787372589111
    4. '   ' → logprob: -7.880787372589111
    5. '	continue' → logprob: -10.13078784942627
    6. '```' → logprob: -11.75578784942627
    7. '           ' → logprob: -13.25578784942627
    8. '     ' → logprob: -13.88078784942627
    9. '      ' → logprob: -14.00578784942627
    10. '    ' → logprob: -14.38078784942627

Token 96: ' #' (ID: 1069)
  Prédit: '       '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '       ' → logprob: -0.04952206835150719
    2. 'continue' → logprob: -3.2995221614837646
    3. '   ' → logprob: -4.7995219230651855
    4. ' continue' → logprob: -5.9245219230651855
    5. '	continue' → logprob: -7.6745219230651855
    6. '```' → logprob: -10.799522399902344
    7. '           ' → logprob: -12.049522399902344
    8. '     ' → logprob: -12.549522399902344
    9. '      ' → logprob: -12.799522399902344
    10. ' ' → logprob: -12.799522399902344

Token 97: ' multiples' (ID: 70720)
  Prédit: ' continue'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' continue' → logprob: -0.15182654559612274
    2. 'continue' → logprob: -2.9018266201019287
    3. '   ' → logprob: -3.1518266201019287
    4. '       ' → logprob: -3.1518266201019287
    5. '	continue' → logprob: -8.151826858520508
    6. '  ' → logprob: -10.276826858520508
    7. ' ' → logprob: -10.526826858520508
    8. '    ' → logprob: -10.901826858520508
    9. '```' → logprob: -11.901826858520508
    10. '_continue' → logprob: -12.151826858520508

Token 98: ' de' (ID: 334)
  Prédit: ' de'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' de' → logprob: -0.17113037407398224
    2. '   ' → logprob: -2.171130418777466
    3. 'de' → logprob: -3.296130418777466
    4. ' of' → logprob: -5.296130180358887
    5. '    ' → logprob: -7.171130180358887
    6. '  ' → logprob: -8.796130180358887
    7. ' ' → logprob: -8.921130180358887
    8. '<|end|>' → logprob: -10.296130180358887
    9. '       ' → logprob: -10.421130180358887
    10. 'of' → logprob: -11.046130180358887

Token 99: ' ' (ID: 220)
  Prédit: '5'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '5' → logprob: -0.03807523474097252
    2. ' ' → logprob: -3.2880752086639404
    3. '3' → logprob: -10.66307544708252
    4. '  ' → logprob: -12.78807544708252
    5. ' ' → logprob: -13.28807544708252
    6. '```' → logprob: -13.41307544708252
    7. '1' → logprob: -13.53807544708252
    8. '   ' → logprob: -13.66307544708252
    9. '<|end|>' → logprob: -15.10057544708252
    10. '`' → logprob: -15.28807544708252

Token 100: '5' (ID: 20)
  Prédit: '5'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '5' → logprob: -0.0017973965732380748
    2. ' ' → logprob: -6.751797199249268
    3. '3' → logprob: -7.376797199249268
    4. '  ' → logprob: -14.501797676086426
    5. ' ' → logprob: -16.00179672241211
    6. '```' → logprob: -16.00179672241211
    7. '1' → logprob: -16.37679672241211
    8. '   ' → logprob: -16.50179672241211
    9. '​' → logprob: -16.87679672241211
    10. '`' → logprob: -16.93929672241211

Token 101: '
' (ID: 198)
  Prédit: '       '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '       ' → logprob: -0.49032217264175415
    2. ':' → logprob: -0.9903221726417542
    3. '   ' → logprob: -4.615322113037109
    4. ':
' → logprob: -5.740322113037109
    5. 'continue' → logprob: -6.490322113037109
    6. ' continue' → logprob: -6.615322113037109
    7. '	continue' → logprob: -9.99032211303711
    8. ' continues' → logprob: -10.11532211303711
    9. '           ' → logprob: -11.49032211303711
    10. '    ' → logprob: -11.74032211303711

Token 102: '       ' (ID: 309)
  Prédit: '       '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '       ' → logprob: -0.005902369040995836
    2. 'continue' → logprob: -5.255902290344238
    3. '   ' → logprob: -7.630902290344238
    4. ' continue' → logprob: -8.755902290344238
    5. '	continue' → logprob: -10.880902290344238
    6. '           ' → logprob: -13.130902290344238
    7. '      ' → logprob: -13.630902290344238
    8. '```' → logprob: -13.755902290344238
    9. '     ' → logprob: -14.005902290344238
    10. '    ' → logprob: -15.005902290344238

Token 103: ' continue' (ID: 4901)
  Prédit: 'continue'
  Correct (stricte): False
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'continue' (adapté à ' continue') → logprob: -0.40960538387298584
    2. '   ' → logprob: -1.2846053838729858
    3. ' continue' → logprob: -3.4096055030822754
    4. '       ' → logprob: -3.6596055030822754
    5. 'res' → logprob: -8.784605026245117
    6. '	continue' → logprob: -9.034605026245117
    7. ' ' → logprob: -9.659605026245117
    8. '```' → logprob: -9.784605026245117
    9. '  ' → logprob: -10.034605026245117
    10. '    ' → logprob: -10.534605026245117

Token 104: '
' (ID: 198)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.003269095439463854
    2. '    
' → logprob: -6.253269195556641
    3. '
' → logprob: -7.253269195556641
    4. 'res' → logprob: -7.878269195556641
    5. ' res' → logprob: -8.50326919555664
    6. '   
' → logprob: -10.62826919555664
    7. '  
' → logprob: -11.12826919555664
    8. ' 
' → logprob: -11.87826919555664
    9. '  ' → logprob: -13.37826919555664
    10. '```' → logprob: -14.25326919555664

Token 105: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.002492183819413185
    2. '
' → logprob: -6.7524919509887695
    3. '    
' → logprob: -7.1274919509887695
    4. ' res' → logprob: -8.25249195098877
    5. 'res' → logprob: -8.50249195098877
    6. '  
' → logprob: -10.87749195098877
    7. ' 
' → logprob: -11.25249195098877
    8. '   
' → logprob: -11.50249195098877
    9. '       ' → logprob: -12.62749195098877
    10. '  ' → logprob: -13.00249195098877

Token 106: ' else' (ID: 1203)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.040153831243515015
    2. 'res' → logprob: -3.415153741836548
    3. ' res' → logprob: -5.165153980255127
    4. '
' → logprob: -7.915153980255127
    5. '    
' → logprob: -7.915153980255127
    6. '   
' → logprob: -11.165153503417969
    7. '  ' → logprob: -11.290153503417969
    8. ' 
' → logprob: -12.040153503417969
    9. '  
' → logprob: -12.290153503417969
    10. ' ' → logprob: -13.290153503417969

Token 107: ':
' (ID: 734)
  Prédit: ':'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ':' → logprob: -0.004218247719109058
    2. ':
' → logprob: -5.504218101501465
    3. '   ' → logprob: -9.504218101501465
    4. ' :' → logprob: -10.004218101501465
    5. '       ' → logprob: -11.129218101501465
    6. ' :
' → logprob: -12.754218101501465
    7. ':
' → logprob: -13.379218101501465
    8. '    ' → logprob: -15.504218101501465
    9. ':

' → logprob: -16.00421905517578
    10. ',' → logprob: -16.00421905517578

Token 108: '       ' (ID: 309)
  Prédit: '       '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '       ' → logprob: -0.7766308188438416
    2. ' res' → logprob: -1.1516308784484863
    3. 'res' → logprob: -1.5266308784484863
    4. '   ' → logprob: -5.026630878448486
    5. '	res' → logprob: -11.026630401611328
    6. ',res' → logprob: -11.276630401611328
    7. '```' → logprob: -11.526630401611328
    8. '        
' → logprob: -11.651630401611328
    9. '    
' → logprob: -11.776630401611328
    10. '
' → logprob: -11.901630401611328

Token 109: ' res' (ID: 694)
  Prédit: 'res'
  Correct (stricte): False
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'res' (adapté à ' res') → logprob: -0.3526499271392822
    2. ' res' → logprob: -1.2276499271392822
    3. '   ' → logprob: -5.477649688720703
    4. '       ' → logprob: -12.477649688720703
    5. '
' → logprob: -12.602649688720703
    6. '	res' → logprob: -12.602649688720703
    7. ' ' → logprob: -13.477649688720703
    8. '  ' → logprob: -13.852649688720703
    9. '    
' → logprob: -14.227649688720703
    10. ' ' → logprob: -14.227649688720703

Token 110: '.append' (ID: 3709)
  Prédit: '.append'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '.append' → logprob: -0.01105442550033331
    2. '.' → logprob: -4.511054515838623
    3. 'append' → logprob: -12.511054039001465
    4. '.app' → logprob: -13.886054039001465
    5. '.extend' → logprob: -14.261054039001465
    6. '.Append' → logprob: -14.386054039001465
    7. '.ap' → logprob: -15.386054039001465
    8. '.push' → logprob: -15.511054039001465
    9. '.add' → logprob: -15.636054039001465
    10. '_append' → logprob: -16.51105499267578

Token 111: '(n' (ID: 2406)
  Prédit: '(n'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(n' → logprob: -0.313279926776886
    2. '(' → logprob: -1.3132798671722412
    3. '(x' → logprob: -11.93828010559082
    4. '(
' → logprob: -11.93828010559082
    5. '((' → logprob: -12.43828010559082
    6. '()' → logprob: -14.81328010559082
    7. '(

' → logprob: -14.93828010559082
    8. '(s' → logprob: -16.06328010559082
    9. '('' → logprob: -16.06328010559082
    10. '(int' → logprob: -16.68828010559082

Token 112: ')' (ID: 8)
  Prédit: ')'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')' → logprob: -1.2664456789934775e-06
    2. ')
' → logprob: -14.375000953674316
    3. ' )' → logprob: -14.375000953674316
    4. '))' → logprob: -17.625001907348633
    5. ')`' → logprob: -18.500001907348633
    6. ')n' → logprob: -18.750001907348633
    7. '`)' → logprob: -19.375001907348633
    8. '),' → logprob: -19.875001907348633
    9. '')' → logprob: -20.000001907348633
    10. ')

' → logprob: -20.125001907348633

Token 113: ' ' (ID: 220)
  Prédit: '\n'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '\n' → logprob: -0.7408138513565063
    2. 'print' → logprob: -1.2408138513565063
    3. '
' → logprob: -2.115813732147217
    4. '<|end|>' → logprob: -3.365813732147217
    5. '#' → logprob: -3.490813732147217
    6. '[' → logprob: -4.115813732147217
    7. ' 
' → logprob: -5.365813732147217
    8. ')' → logprob: -5.490813732147217
    9. ' ' → logprob: -5.615813732147217
    10. '  
' → logprob: -5.615813732147217

Token 114: ' #' (ID: 1069)
  Prédit: 'print'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'print' → logprob: -0.005606769118458033
    2. '
' → logprob: -5.505606651306152
    3. '<|end|>' → logprob: -7.005606651306152
    4. '\n' → logprob: -8.380606651306152
    5. ')' → logprob: -9.130606651306152
    6. '#' → logprob: -9.130606651306152
    7. ' print' → logprob: -10.005606651306152
    8. '#print' → logprob: -10.755606651306152
    9. '```' → logprob: -10.755606651306152
    10. '[' → logprob: -10.880606651306152

Token 115: ' c' (ID: 274)
  Prédit: 'print'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'print' → logprob: -0.026416871696710587
    2. ' print' → logprob: -3.651416778564453
    3. 'pass' → logprob: -9.776416778564453
    4. ' 
' → logprob: -11.401416778564453
    5. ' pass' → logprob: -11.526416778564453
    6. ')' → logprob: -11.651416778564453
    7. '
' → logprob: -11.651416778564453
    8. 'x' → logprob: -12.901416778564453
    9. 'pr' → logprob: -13.026416778564453
    10. 'n' → logprob: -13.151416778564453

Token 116: ''est' (ID: 6616)
  Prédit: 'ont'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'ont' → logprob: -0.036290887743234634
    2. ''est' → logprob: -3.9112908840179443
    3. 'e' → logprob: -5.661291122436523
    4. 'est' → logprob: -6.411291122436523
    5. 'on' → logprob: -6.411291122436523
    6. 'eci' → logprob: -6.411291122436523
    7. 'es' → logprob: -7.036291122436523
    8. '#' → logprob: -7.036291122436523
    9. 'eux' → logprob: -7.411291122436523
    10. 'omme' → logprob: -7.411291122436523

Token 117: ' bon' (ID: 4846)
  Prédit: ' une'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' une' → logprob: -0.6174448728561401
    2. ' un' → logprob: -1.2424448728561401
    3. ' ' → logprob: -2.7424449920654297
    4. ' a' → logprob: -3.1174449920654297
    5. 'n' → logprob: -3.8674449920654297
    6. 'un' → logprob: -4.74244499206543
    7. ' la' → logprob: -5.74244499206543
    8. ' ' → logprob: -5.74244499206543
    9. 'a' → logprob: -5.86744499206543
    10. ' le' → logprob: -5.99244499206543

Token 118: ' ça' (ID: 13590)
  Prédit: 'print'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'print' → logprob: -0.09089825302362442
    2. '
' → logprob: -2.715898275375366
    3. '<|end|>' → logprob: -4.090898036956787
    4. '\n' → logprob: -6.215898036956787
    5. '```' → logprob: -7.715898036956787
    6. '  
' → logprob: -7.840898036956787
    7. ' print' → logprob: -8.340898513793945
    8. '#' → logprob: -8.465898513793945
    9. ' 
' → logprob: -8.715898513793945
    10. '[' → logprob: -9.215898513793945

Token 119: '

' (ID: 279)
  Prédit: 'print'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'print' → logprob: -0.08022411912679672
    2. '
' → logprob: -2.95522403717041
    3. '<|end|>' → logprob: -3.83022403717041
    4. '\n' → logprob: -6.58022403717041
    5. '#' → logprob: -7.70522403717041
    6. '```' → logprob: -7.95522403717041
    7. '  
' → logprob: -8.08022403717041
    8. ' print' → logprob: -8.58022403717041
    9. ' 
' → logprob: -9.08022403717041
    10. ')' → logprob: -9.33022403717041

Token 120: '#' (ID: 2)
  Prédit: 'print'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'print' → logprob: -0.0017196849221363664
    2. '
' → logprob: -6.7517194747924805
    3. '<|end|>' → logprob: -8.75171947479248
    4. ' 
' → logprob: -9.37671947479248
    5. 'p' → logprob: -9.37671947479248
    6. '#' → logprob: -9.62671947479248
    7. '  
' → logprob: -10.00171947479248
    8. 'for' → logprob: -10.75171947479248
    9. '#print' → logprob: -11.12671947479248
    10. ' print' → logprob: -11.25171947479248

Token 121: ' calcul' (ID: 7559)
  Prédit: 'print'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'print' → logprob: -0.0003335585934109986
    2. ' print' → logprob: -8.125333786010742
    3. 'for' → logprob: -10.250333786010742
    4. 'return' → logprob: -14.125333786010742
    5. ' for' → logprob: -14.375333786010742
    6. '#print' → logprob: -15.500333786010742
    7. 'prin' → logprob: -15.875333786010742
    8. 'pr' → logprob: -15.875333786010742
    9. '
' → logprob: -16.125333786010742
    10. ' 
' → logprob: -16.625333786010742

Token 122: ' du' (ID: 1462)
  Prédit: ' ='
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' =' → logprob: -0.5578691959381104
    2. 'sum' → logprob: -1.8078691959381104
    3. '=' → logprob: -2.0578691959381104
    4. 's' → logprob: -2.5578691959381104
    5. 'total' → logprob: -3.1828691959381104
    6. 'result' → logprob: -5.057868957519531
    7. '_sum' → logprob: -5.932868957519531
    8. '=sum' → logprob: -5.932868957519531
    9. 'print' → logprob: -6.057868957519531
    10. ' total' → logprob: -7.432868957519531

Token 123: ' total' (ID: 3609)
  Prédit: 'sum'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'sum' → logprob: -0.09028545022010803
    2. 'print' → logprob: -3.340285539627075
    3. 's' → logprob: -3.590285539627075
    4. ' sum' → logprob: -3.840285539627075
    5. ' print' → logprob: -7.465285301208496
    6. 'result' → logprob: -7.465285301208496
    7. ' somme' → logprob: -8.590285301208496
    8. 'total' → logprob: -8.840285301208496
    9. 'som' → logprob: -8.840285301208496
    10. 'summ' → logprob: -9.840285301208496

Token 124: '
' (ID: 198)
  Prédit: 'total'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'total' → logprob: -0.0009591046255081892
    2. ' total' → logprob: -7.8759589195251465
    3. 'sum' → logprob: -7.8759589195251465
    4. 'print' → logprob: -9.250959396362305
    5. 's' → logprob: -9.625959396362305
    6. '
' → logprob: -10.625959396362305
    7. 'result' → logprob: -12.000959396362305
    8. 't' → logprob: -13.125959396362305
    9. 'tot' → logprob: -13.125959396362305
    10. ' 
' → logprob: -14.250959396362305

Token 125: 'print' (ID: 1598)
  Prédit: 'total'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'total' → logprob: -0.009191164746880531
    2. 'print' → logprob: -5.384191036224365
    3. ' total' → logprob: -5.509191036224365
    4. 'sum' → logprob: -7.759191036224365
    5. 'result' → logprob: -10.634191513061523
    6. 's' → logprob: -10.634191513061523
    7. ' print' → logprob: -11.009191513061523
    8. 'tot' → logprob: -11.134191513061523
    9. 't' → logprob: -14.009191513061523
    10. 'res' → logprob: -14.134191513061523

Token 126: '(sum' (ID: 45528)
  Prédit: '(sum'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(sum' → logprob: -0.5759565830230713
    2. '(' → logprob: -0.8259565830230713
    3. '(len' → logprob: -11.575956344604492
    4. '(
' → logprob: -12.325956344604492
    5. 'sum' → logprob: -13.075956344604492
    6. '('' → logprob: -14.700956344604492
    7. '(

' → logprob: -15.200956344604492
    8. '()' → logprob: -16.075956344604492
    9. '("' → logprob: -16.200956344604492
    10. '("("' → logprob: -16.325956344604492

Token 127: '(res' (ID: 8331)
  Prédit: '(res'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(res' → logprob: -0.01815052703022957
    2. '(' → logprob: -4.018150329589844
    3. ' (' → logprob: -15.268150329589844
    4. ')' → logprob: -15.768150329589844
    5. '(
' → logprob: -16.143150329589844
    6. '(rest' → logprob: -16.768150329589844
    7. '(s' → logprob: -17.268150329589844
    8. '(re' → logprob: -18.018150329589844
    9. '(

' → logprob: -18.143150329589844
    10. 'res' → logprob: -18.518150329589844

Token 128: '))' (ID: 915)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')' → logprob: -0.1602427214384079
    2. '))' → logprob: -1.9102426767349243
    3. '())' → logprob: -11.035243034362793
    4. '()' → logprob: -14.035243034362793
    5. ')))' → logprob: -14.160243034362793
    6. ' )' → logprob: -14.535243034362793
    7. '()))' → logprob: -15.785243034362793
    8. '])' → logprob: -16.410242080688477
    9. ' ))' → logprob: -17.160242080688477
    10. ')
' → logprob: -17.285242080688477


RÉSUMÉ:
--------------------------------------------------------------------------------
Total des tokens analysés: 126
Tokens correctement prédits (1ère position, stricte): 46
Tokens correctement prédits (1ère position, avec adaptation): 48
Tokens correctement prédits (top 10): 90
Précision stricte (1ère position): 36.51%
Précision adaptée (1ère position): 38.10%
Précision (top 10): 71.43%
================================================================================
