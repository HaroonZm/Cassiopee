================================================================================
ANALYSE DE PRÉDICTION TOKEN PAR TOKEN (BATCH API)
Date: 2025-06-04 19:59:22
Modèle de tokenisation: gpt-4o-mini
================================================================================

SCRIPT ANALYSÉ:
--------------------------------------------------------------------------------
# Pas sûr que ce soit la meilleure manière de faire mais bon...
a , p = input().split()
a = int(a)
p = int(p)
# je multiplie A par 3, pourquoi déjà ? On m'a dit de le faire...
somme = a*3 + p
resultat = somme // 2   # division entière hein
print(resultat)
--------------------------------------------------------------------------------

RÉSULTATS D'ANALYSE TOKEN PAR TOKEN:
--------------------------------------------------------------------------------
Token 0: '#' (ID: 2)
  → Token d'amorce (pas de prédiction)

Token 1: ' Pas' (ID: 18323)
  → Token d'amorce (pas de prédiction)

Token 2: ' sûr' (ID: 46415)
  → Token d'amorce (pas de prédiction)

Token 3: ' que' (ID: 661)
  Prédit: '#'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '#' → logprob: -0.39970287680625916
    2. ',' → logprob: -2.274702787399292
    3. '```' → logprob: -2.524702787399292
    4. 'que' → logprob: -3.149702787399292
    5. ' ' → logprob: -3.774702787399292
    6. '.' → logprob: -3.899702787399292
    7. ':' → logprob: -4.024703025817871
    8. '_' → logprob: -4.774703025817871
    9. '!' → logprob: -4.899703025817871
    10. ' que' → logprob: -5.274703025817871

Token 4: ' ce' (ID: 2357)
  Prédit: ' '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' ' → logprob: -1.3306838274002075
    2. 'ce' → logprob: -1.3306838274002075
    3. ' ce' → logprob: -1.7056838274002075
    4. '#' → logprob: -2.330683708190918
    5. 'c' → logprob: -3.205683708190918
    6. '_' → logprob: -3.330683708190918
    7. 'cela' → logprob: -3.330683708190918
    8. ' #' → logprob: -3.705683708190918
    9. 'd' → logprob: -4.580683708190918
    10. 'le' → logprob: -5.080683708190918

Token 5: ' soit' (ID: 17293)
  Prédit: 'so'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'so' → logprob: -0.011555138044059277
    2. '#' → logprob: -5.511555194854736
    3. ' soit' → logprob: -5.761555194854736
    4. 'code' → logprob: -6.886555194854736
    5. '```' → logprob: -6.886555194854736
    6. 'sera' → logprob: -7.261555194854736
    7. 's' → logprob: -7.511555194854736
    8. 'fonction' → logprob: -8.511554718017578
    9. ' #' → logprob: -9.261554718017578
    10. ' ' → logprob: -9.386554718017578

Token 6: ' la' (ID: 557)
  Prédit: 'né'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'né' → logprob: -0.972845733165741
    2. 'une' → logprob: -2.2228457927703857
    3. 'bien' → logprob: -2.8478457927703857
    4. 'la' → logprob: -2.9728457927703857
    5. ' une' → logprob: -3.2228457927703857
    6. '_' → logprob: -3.3478457927703857
    7. 'le' → logprob: -3.3478457927703857
    8. 'l' → logprob: -3.4728457927703857
    9. 'v' → logprob: -3.7228457927703857
    10. ' utile' → logprob: -3.8478457927703857

Token 7: ' meilleure' (ID: 52387)
  Prédit: ','
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ',' → logprob: -0.6043774485588074
    2. '#' → logprob: -1.6043775081634521
    3. '.' → logprob: -1.7293775081634521
    4. ':' → logprob: -4.604377269744873
    5. '`' → logprob: -4.854377269744873
    6. '!' → logprob: -5.104377269744873
    7. '?' → logprob: -5.104377269744873
    8. '_' → logprob: -5.104377269744873
    9. '...' → logprob: -5.229377269744873
    10. 's' → logprob: -5.354377269744873

Token 8: ' manière' (ID: 35013)
  Prédit: ' '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' ' → logprob: -0.2743590474128723
    2. '.' → logprob: -2.3993589878082275
    3. '#' → logprob: -3.6493589878082275
    4. 'id' → logprob: -4.024359226226807
    5. ',' → logprob: -4.399359226226807
    6. ' ' → logprob: -4.524359226226807
    7. 'option' → logprob: -4.774359226226807
    8. '_' → logprob: -5.024359226226807
    9. '   ' → logprob: -5.024359226226807
    10. 'é' → logprob: -5.024359226226807

Token 9: ' de' (ID: 334)
  Prédit: ','
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ',' → logprob: -0.18341457843780518
    2. '.' → logprob: -1.9334145784378052
    3. '#' → logprob: -4.808414459228516
    4. ':' → logprob: -5.183414459228516
    5. 'de' → logprob: -5.308414459228516
    6. '!' → logprob: -6.933414459228516
    7. ' de' → logprob: -7.808414459228516
    8. ';' → logprob: -7.808414459228516
    9. 'd' → logprob: -7.808414459228516
    10. '```' → logprob: -7.808414459228516

Token 10: ' faire' (ID: 8119)
  Prédit: 'faire'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'faire' → logprob: -0.017496278509497643
    2. 'coder' → logprob: -5.017496109008789
    3. 'le' → logprob: -5.642496109008789
    4. 'g' → logprob: -6.642496109008789
    5. 'contin' → logprob: -7.142496109008789
    6. 'é' → logprob: -7.267496109008789
    7. '#' → logprob: -7.267496109008789
    8. 'trait' → logprob: -7.392496109008789
    9. '```' → logprob: -8.017496109008789
    10. ' faire' → logprob: -8.017496109008789

Token 11: ' mais' (ID: 2899)
  Prédit: ','
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ',' → logprob: -0.2691260874271393
    2. '.' → logprob: -1.519126057624817
    3. '#' → logprob: -4.394125938415527
    4. ':' → logprob: -6.269125938415527
    5. '\' → logprob: -7.269125938415527
    6. '...' → logprob: -7.519125938415527
    7. '\n' → logprob: -8.144125938415527
    8. ';' → logprob: -8.394125938415527
    9. '```' → logprob: -8.394125938415527
    10. '!' → logprob: -8.894125938415527

Token 12: ' bon' (ID: 4846)
  Prédit: ' c'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' c' → logprob: -1.0514434576034546
    2. ' ' → logprob: -1.0514434576034546
    3. ' la' → logprob: -2.676443576812744
    4. ' ça' → logprob: -3.176443576812744
    5. ' je' → logprob: -3.676443576812744
    6. ' une' → logprob: -4.176443576812744
    7. ' ' → logprob: -4.551443576812744
    8. 'c' → logprob: -4.676443576812744
    9. 'cela' → logprob: -4.676443576812744
    10. ' a' → logprob: -4.926443576812744

Token 13: '...
' (ID: 4908)
  Prédit: ','
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ',' → logprob: -1.0876468420028687
    2. '\' → logprob: -1.2126468420028687
    3. '.' → logprob: -1.8376468420028687
    4. '\n' → logprob: -2.462646961212158
    5. ' ' → logprob: -2.837646961212158
    6. '```' → logprob: -4.087646961212158
    7. '#' → logprob: -4.462646961212158
    8. '`' → logprob: -4.587646961212158
    9. ':' → logprob: -5.337646961212158
    10. ' \' → logprob: -5.462646961212158

Token 14: 'a' (ID: 64)
  Prédit: ' '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' ' → logprob: -0.5252277851104736
    2. '```' → logprob: -1.7752277851104736
    3. '\' → logprob: -2.0252277851104736
    4. '\n' → logprob: -2.7752277851104736
    5. '`' → logprob: -3.9002277851104736
    6. '.' → logprob: -5.5252275466918945
    7. ' \' → logprob: -5.5252275466918945
    8. ''' → logprob: -5.6502275466918945
    9. '#' → logprob: -6.1502275466918945
    10. ',' → logprob: -6.1502275466918945

Token 15: ' ,' (ID: 1366)
  Prédit: '='
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '=' → logprob: -0.4778129458427429
    2. ' ' → logprob: -1.8528130054473877
    3. 'u' → logprob: -3.2278130054473877
    4. 'i' → logprob: -3.3528130054473877
    5. ' =' → logprob: -3.4778130054473877
    6. 'p' → logprob: -3.8528130054473877
    7. 'l' → logprob: -4.102812767028809
    8. 'c' → logprob: -4.227812767028809
    9. 'd' → logprob: -4.227812767028809
    10. 'm' → logprob: -4.977812767028809

Token 16: ' p' (ID: 275)
  Prédit: ' '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' ' → logprob: -0.8264896869659424
    2. ' =' → logprob: -1.3264896869659424
    3. '=' → logprob: -2.2014896869659424
    4. 'b' → logprob: -2.3264896869659424
    5. ',' → logprob: -3.4514896869659424
    6. '_' → logprob: -3.8264896869659424
    7. ' b' → logprob: -4.451489448547363
    8. 'a' → logprob: -5.076489448547363
    9. ',b' → logprob: -5.326489448547363
    10. '_b' → logprob: -6.201489448547363

Token 17: ' =' (ID: 314)
  Prédit: '='
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '=' → logprob: -0.7300415635108948
    2. ' =' → logprob: -1.48004150390625
    3. ',' → logprob: -1.73004150390625
    4. 'r' → logprob: -3.10504150390625
    5. ' ' → logprob: -3.60504150390625
    6. 'p' → logprob: -3.73004150390625
    7. ')' → logprob: -5.10504150390625
    8. '_' → logprob: -5.48004150390625
    9. '.' → logprob: -6.85504150390625
    10. ' ,' → logprob: -6.98004150390625

Token 18: ' input' (ID: 3422)
  Prédit: ' map'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' map' → logprob: -0.9681119322776794
    2. ' ' → logprob: -1.0931119918823242
    3. ' b' → logprob: -2.968111991882324
    4. '0' → logprob: -3.093111991882324
    5. 'map' → logprob: -3.093111991882324
    6. ' input' → logprob: -3.718111991882324
    7. ' a' → logprob: -3.843111991882324
    8. ' [' → logprob: -3.843111991882324
    9. ' None' → logprob: -4.218111991882324
    10. '1' → logprob: -4.218111991882324

Token 19: '().' (ID: 1454)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '(' → logprob: -0.0011740362970158458
    2. '()' → logprob: -7.501173973083496
    3. '('' → logprob: -7.626173973083496
    4. '("' → logprob: -9.751173973083496
    5. '("("' → logprob: -10.001173973083496
    6. '(
' → logprob: -12.001173973083496
    7. '(

' → logprob: -12.501173973083496
    8. '("")' → logprob: -12.626173973083496
    9. ' (' → logprob: -12.751173973083496
    10. '("""' → logprob: -13.001173973083496

Token 20: 'split' (ID: 13627)
  Prédit: 'split'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'split' → logprob: -0.0025039594620466232
    2. 'strip' → logprob: -6.002503871917725
    3. 'rstrip' → logprob: -11.252504348754883
    4. 'replace' → logprob: -11.377504348754883
    5. ' split' → logprob: -13.252504348754883
    6. 'rs' → logprob: -13.877504348754883
    7. 'spl' → logprob: -13.877504348754883
    8. 'sp' → logprob: -16.877504348754883
    9. 'read' → logprob: -16.877504348754883
    10. 'lower' → logprob: -16.877504348754883

Token 21: '()
' (ID: 1234)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '(' → logprob: -0.20853188633918762
    2. '('' → logprob: -1.7085318565368652
    3. '("("' → logprob: -5.333531856536865
    4. '()' → logprob: -6.208531856536865
    5. ''' → logprob: -9.833532333374023
    6. '("' → logprob: -9.958532333374023
    7. '(`' → logprob: -10.458532333374023
    8. '(

' → logprob: -10.458532333374023
    9. '(
' → logprob: -10.583532333374023
    10. '```' → logprob: -11.333532333374023

Token 22: 'a' (ID: 64)
  Prédit: 'a'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'a' → logprob: -0.1784740388393402
    2. '=' → logprob: -3.053473949432373
    3. ' =' → logprob: -3.678473949432373
    4. ' 
' → logprob: -4.053473949432373
    5. '.' → logprob: -4.428473949432373
    6. '
' → logprob: -4.428473949432373
    7. '```' → logprob: -4.803473949432373
    8. '[' → logprob: -4.928473949432373
    9. ' a' → logprob: -5.303473949432373
    10. '  
' → logprob: -5.428473949432373

Token 23: ' =' (ID: 314)
  Prédit: '['
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '[' → logprob: -1.3297468423843384
    2. '+' → logprob: -2.079746723175049
    3. ',' → logprob: -2.079746723175049
    4. '*' → logprob: -2.454746723175049
    5. 'a' → logprob: -2.454746723175049
    6. ' ' → logprob: -2.704746723175049
    7. '<|end|>' → logprob: -2.829746723175049
    8. '.' → logprob: -3.204746723175049
    9. ' a' → logprob: -3.954746723175049
    10. ')' → logprob: -3.954746723175049

Token 24: ' int' (ID: 677)
  Prédit: 'int'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'int' → logprob: -0.05222873389720917
    2. ' int' → logprob: -3.3022286891937256
    3. 'a' → logprob: -4.427228927612305
    4. 'float' → logprob: -6.802228927612305
    5. ' a' → logprob: -7.677228927612305
    6. 'str' → logprob: -9.052228927612305
    7. ' float' → logprob: -9.302228927612305
    8. 'p' → logprob: -9.552228927612305
    9. '[int' → logprob: -9.802228927612305
    10. ' p' → logprob: -10.177228927612305

Token 25: '(a' (ID: 6271)
  Prédit: '(a'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(a' → logprob: -0.04860644042491913
    2. '(' → logprob: -3.0486063957214355
    3. 'a' → logprob: -11.798606872558594
    4. '('' → logprob: -12.298606872558594
    5. '(p' → logprob: -13.173606872558594
    6. '(
' → logprob: -13.798606872558594
    7. '()' → logprob: -13.923606872558594
    8. '(ai' → logprob: -14.548606872558594
    9. '(A' → logprob: -14.798606872558594
    10. ' (' → logprob: -14.923606872558594

Token 26: ')
' (ID: 446)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')' → logprob: -0.00018113377154804766
    2. ' )' → logprob: -8.875181198120117
    3. '+' → logprob: -10.500181198120117
    4. ')
' → logprob: -11.875181198120117
    5. '),' → logprob: -13.125181198120117
    6. '))' → logprob: -14.250181198120117
    7. '*' → logprob: -14.500181198120117
    8. ')+' → logprob: -14.500181198120117
    9. ')#' → logprob: -14.750181198120117
    10. ',' → logprob: -15.000181198120117

Token 27: 'p' (ID: 79)
  Prédit: '+'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '+' → logprob: -0.12083747237920761
    2. '*' → logprob: -2.995837450027466
    3. ' +' → logprob: -3.495837450027466
    4. ' *' → logprob: -4.870837688446045
    5. ' ' → logprob: -5.620837688446045
    6. '+p' → logprob: -5.745837688446045
    7. '<|end|>' → logprob: -5.995837688446045
    8. ')' → logprob: -6.120837688446045
    9. ',' → logprob: -6.245837688446045
    10. '*p' → logprob: -6.245837688446045

Token 28: ' =' (ID: 314)
  Prédit: ' ='
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' =' → logprob: -0.1133439838886261
    2. '=' → logprob: -2.2383439540863037
    3. '=int' → logprob: -8.363344192504883
    4. ')' → logprob: -8.988344192504883
    5. ',' → logprob: -9.863344192504883
    6. '*' → logprob: -10.738344192504883
    7. ' ' → logprob: -10.988344192504883
    8. ' *=' → logprob: -11.113344192504883
    9. ' *' → logprob: -11.238344192504883
    10. '<|end|>' → logprob: -11.363344192504883

Token 29: ' int' (ID: 677)
  Prédit: 'int'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'int' → logprob: -0.13326208293437958
    2. ' int' → logprob: -2.1332621574401855
    3. 'float' → logprob: -5.3832621574401855
    4. ' float' → logprob: -6.3832621574401855
    5. 'p' → logprob: -11.883261680603027
    6. ' ' → logprob: -12.133261680603027
    7. ' p' → logprob: -12.258261680603027
    8. '(int' → logprob: -12.383261680603027
    9. '[int' → logprob: -13.383261680603027
    10. '   ' → logprob: -13.633261680603027

Token 30: '(p' (ID: 2407)
  Prédit: '(p'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(p' → logprob: -0.023339582607150078
    2. '(' → logprob: -3.7733395099639893
    3. 'p' → logprob: -9.77333927154541
    4. '('' → logprob: -11.77333927154541
    5. ' (' → logprob: -12.14833927154541
    6. '("("' → logprob: -12.14833927154541
    7. '(
' → logprob: -12.64833927154541
    8. '()' → logprob: -13.02333927154541
    9. '(paren' → logprob: -13.27333927154541
    10. '((' → logprob: -13.27333927154541

Token 31: ')
' (ID: 446)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')' → logprob: -6.749814019713085e-06
    2. ' )' → logprob: -13.000006675720215
    3. ')
' → logprob: -13.125006675720215
    4. '))' → logprob: -13.750006675720215
    5. '+' → logprob: -14.625006675720215
    6. '')' → logprob: -14.750006675720215
    7. ')#' → logprob: -16.50000762939453
    8. '#' → logprob: -16.75000762939453
    9. '`)' → logprob: -16.87500762939453
    10. '()' → logprob: -17.37500762939453

Token 32: '#' (ID: 2)
  Prédit: 'if'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'if' → logprob: -1.821411371231079
    2. ' ' → logprob: -1.946411371231079
    3. ' 
' → logprob: -1.946411371231079
    4. '#' → logprob: -2.196411371231079
    5. 's' → logprob: -2.196411371231079
    6. 'n' → logprob: -2.821411371231079
    7. 'i' → logprob: -3.196411371231079
    8. '
' → logprob: -3.196411371231079
    9. ',' → logprob: -3.446411371231079
    10. '*' → logprob: -3.696411371231079

Token 33: ' je' (ID: 1264)
  Prédit: ' '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' ' → logprob: -0.34836313128471375
    2. 'if' → logprob: -2.223363161087036
    3. ' if' → logprob: -2.848363161087036
    4. 'a' → logprob: -3.723363161087036
    5. 's' → logprob: -4.473362922668457
    6. ' a' → logprob: -4.473362922668457
    7. 'i' → logprob: -4.598362922668457
    8. '(' → logprob: -4.723362922668457
    9. 'for' → logprob: -4.848362922668457
    10. '#' → logprob: -5.223362922668457

Token 34: ' multipl' (ID: 44269)
  Prédit: 'n'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'n' → logprob: -1.003658652305603
    2. ' pense' → logprob: -2.3786587715148926
    3. ' veux' → logprob: -2.5036587715148926
    4. ' n' → logprob: -2.7536587715148926
    5. 's' → logprob: -2.8786587715148926
    6. 'p' → logprob: -3.0036587715148926
    7. ' vais' → logprob: -3.0036587715148926
    8. ' suppose' → logprob: -3.2536587715148926
    9. 'veux' → logprob: -3.3786587715148926
    10. 'm' → logprob: -3.8786587715148926

Token 35: 'ie' (ID: 396)
  Prédit: 'ie'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'ie' → logprob: -0.47017884254455566
    2. 'e' → logprob: -1.0951788425445557
    3. 'ique' → logprob: -3.5951788425445557
    4. 'er' → logprob: -6.095178604125977
    5. 'iquer' → logprob: -6.220178604125977
    6. 'c' → logprob: -6.845178604125977
    7. 'plique' → logprob: -6.845178604125977
    8. 'cie' → logprob: -6.970178604125977
    9. 'p' → logprob: -7.220178604125977
    10. 'pie' → logprob: -7.470178604125977

Token 36: ' A' (ID: 355)
  Prédit: 'a'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'a' → logprob: -0.19987869262695312
    2. ' a' → logprob: -2.074878692626953
    3. ' ' → logprob: -2.949878692626953
    4. '  ' → logprob: -7.324878692626953
    5. '*' → logprob: -7.574878692626953
    6. ' p' → logprob: -7.824878692626953
    7. '<|end|>' → logprob: -8.199878692626953
    8. ' *' → logprob: -8.449878692626953
    9. 'p' → logprob: -8.949878692626953
    10. ' ' → logprob: -9.074878692626953

Token 37: ' par' (ID: 686)
  Prédit: ' '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' ' → logprob: -1.127005696296692
    2. '*' → logprob: -1.252005696296692
    3. 'a' → logprob: -2.0020055770874023
    4. ' *' → logprob: -2.1270055770874023
    5. '<|end|>' → logprob: -3.2520055770874023
    6. ' par' → logprob: -3.5020055770874023
    7. ' a' → logprob: -3.5020055770874023
    8. '*a' → logprob: -4.502005577087402
    9. ' by' → logprob: -5.377005577087402
    10. ' *=' → logprob: -5.877005577087402

Token 38: ' ' (ID: 220)
  Prédit: 'p'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'p' → logprob: -0.3671621084213257
    2. ' p' → logprob: -1.2421621084213257
    3. ' ' → logprob: -4.742162227630615
    4. '2' → logprob: -5.242162227630615
    5. '3' → logprob: -6.992162227630615
    6. '100' → logprob: -7.242162227630615
    7. '1' → logprob: -7.742162227630615
    8. '6' → logprob: -8.117161750793457
    9. '(' → logprob: -8.117161750793457
    10. ' (' → logprob: -8.367161750793457

Token 39: '3' (ID: 18)
  Prédit: 'p'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'p' → logprob: -0.11318783462047577
    2. ' p' → logprob: -2.363187789916992
    3. '2' → logprob: -4.738187789916992
    4. ' ' → logprob: -6.363187789916992
    5. '3' → logprob: -7.863187789916992
    6. '1' → logprob: -8.238187789916992
    7. '10' → logprob: -8.238187789916992
    8. '100' → logprob: -8.363187789916992
    9. '4' → logprob: -8.488187789916992
    10. ' (' → logprob: -8.613187789916992

Token 40: ',' (ID: 11)
  Prédit: '*'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '*' → logprob: -0.07404495030641556
    2. ' *' → logprob: -2.699044942855835
    3. 'a' → logprob: -5.824045181274414
    4. '*a' → logprob: -7.324045181274414
    5. ' ' → logprob: -8.074045181274414
    6. ' a' → logprob: -10.199045181274414
    7. '<|end|>' → logprob: -10.199045181274414
    8. '*
' → logprob: -10.699045181274414
    9. '***' → logprob: -11.449045181274414
    10. '```' → logprob: -11.699045181274414

Token 41: ' pourquoi' (ID: 39224)
  Prédit: 'a'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'a' → logprob: -0.813390851020813
    2. ' a' → logprob: -1.063390851020813
    3. ' ' → logprob: -1.813390851020813
    4. ' p' → logprob: -4.313390731811523
    5. '*' → logprob: -5.313390731811523
    6. 'p' → logprob: -5.938390731811523
    7. '3' → logprob: -6.438390731811523
    8. '<|end|>' → logprob: -6.438390731811523
    9. ' then' → logprob: -6.438390731811523
    10. ' *' → logprob: -6.563390731811523

Token 42: ' déjà' (ID: 21229)
  Prédit: '*'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '*' → logprob: -0.581599235534668
    2. 'a' → logprob: -1.581599235534668
    3. '<|end|>' → logprob: -2.331599235534668
    4. '?' → logprob: -2.706599235534668
    5. ' ' → logprob: -3.956599235534668
    6. ' *' → logprob: -4.331599235534668
    7. ' a' → logprob: -4.706599235534668
    8. ',' → logprob: -5.081599235534668
    9. ' ?' → logprob: -5.456599235534668
    10. '<|end|>' → logprob: -5.706599235534668

Token 43: ' ?' (ID: 1423)
  Prédit: ' ?'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' ?' → logprob: -0.7299116253852844
    2. '?' → logprob: -0.8549116253852844
    3. ' ' → logprob: -3.3549115657806396
    4. 'a' → logprob: -3.8549115657806396
    5. '*' → logprob: -4.604911804199219
    6. ' ' → logprob: -4.729911804199219
    7. '<|end|>' → logprob: -5.104911804199219
    8. ' a' → logprob: -5.479911804199219
    9. ' ,' → logprob: -5.479911804199219
    10. ',' → logprob: -6.854911804199219

Token 44: ' On' (ID: 2160)
  Prédit: ' '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' ' → logprob: -0.1421135514974594
    2. '*' → logprob: -2.892113447189331
    3. 'a' → logprob: -3.392113447189331
    4. ' a' → logprob: -4.26711368560791
    5. ' ,' → logprob: -4.64211368560791
    6. ' 
' → logprob: -5.64211368560791
    7. '  
' → logprob: -5.76711368560791
    8. ' *' → logprob: -5.76711368560791
    9. ',' → logprob: -6.01711368560791
    10. ' p' → logprob: -6.01711368560791

Token 45: ' m' (ID: 284)
  Prédit: ' multipl'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' multipl' → logprob: -1.415826678276062
    2. ' veut' → logprob: -1.665826678276062
    3. 'a' → logprob: -2.6658267974853516
    4. '?' → logprob: -3.1658267974853516
    5. ' va' → logprob: -3.4158267974853516
    6. ' doit' → logprob: -3.5408267974853516
    7. 'n' → logprob: -3.5408267974853516
    8. 'mult' → logprob: -3.5408267974853516
    9. 'do' → logprob: -3.6658267974853516
    10. ' triple' → logprob: -3.7908267974853516

Token 46: ''a' (ID: 10443)
  Prédit: 'a'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'a' → logprob: -0.38531190156936646
    2. 'ultip' → logprob: -2.3853118419647217
    3. 'ult' → logprob: -2.5103118419647217
    4. ' multipl' → logprob: -2.6353118419647217
    5. 'mult' → logprob: -3.6353118419647217
    6. 'e' → logprob: -4.260312080383301
    7. 'multip' → logprob: -5.010312080383301
    8. 'n' → logprob: -5.510312080383301
    9. 'ultiply' → logprob: -5.635312080383301
    10. 'avait' → logprob: -6.135312080383301

Token 47: ' dit' (ID: 4758)
  Prédit: ' demandé'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' demandé' → logprob: -0.8785207271575928
    2. 'dit' → logprob: -1.2535207271575928
    3. ' dit' → logprob: -1.7535207271575928
    4. 'd' → logprob: -2.2535207271575928
    5. 'dem' → logprob: -5.378520965576172
    6. 'pas' → logprob: -5.628520965576172
    7. 'fait' → logprob: -6.003520965576172
    8. 't' → logprob: -6.628520965576172
    9. 'dis' → logprob: -7.128520965576172
    10. ' ' → logprob: -7.378520965576172

Token 48: ' de' (ID: 334)
  Prédit: 'd'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'd' → logprob: -1.190881371498108
    2. 'de' → logprob: -1.440881371498108
    3. 'p' → logprob: -1.690881371498108
    4. ' de' → logprob: -2.4408812522888184
    5. ' ' → logprob: -3.4408812522888184
    6. ' d' → logprob: -3.5658812522888184
    7. 'que' → logprob: -3.8158812522888184
    8. ' que' → logprob: -3.8158812522888184
    9. ' p' → logprob: -3.8158812522888184
    10. 'qu' → logprob: -4.065881252288818

Token 49: ' le' (ID: 505)
  Prédit: 'mult'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'mult' → logprob: -1.2617403268814087
    2. 'p' → logprob: -2.261740207672119
    3. '3' → logprob: -2.386740207672119
    4. ' multiplier' → logprob: -2.636740207672119
    5. 'prendre' → logprob: -2.636740207672119
    6. 'multip' → logprob: -2.636740207672119
    7. 'le' → logprob: -3.136740207672119
    8. 'pas' → logprob: -3.386740207672119
    9. 'tr' → logprob: -3.761740207672119
    10. 'faire' → logprob: -4.011740207672119

Token 50: ' faire' (ID: 8119)
  Prédit: 'mult'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'mult' → logprob: -1.2887814044952393
    2. ' faire' → logprob: -1.5387814044952393
    3. 'faire' → logprob: -2.5387814044952393
    4. ' trip' → logprob: -2.7887814044952393
    5. 'p' → logprob: -3.1637814044952393
    6. ' multiplier' → logprob: -3.2887814044952393
    7. 'trip' → logprob: -3.2887814044952393
    8. 'r' → logprob: -3.2887814044952393
    9. ' prendre' → logprob: -3.7887814044952393
    10. 'multip' → logprob: -3.9137814044952393

Token 51: '...
' (ID: 4908)
  Prédit: 'a'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'a' → logprob: -0.0101670753210783
    2. ' a' → logprob: -5.260167121887207
    3. '*' → logprob: -5.510167121887207
    4. ' *' → logprob: -8.635167121887207
    5. ' ' → logprob: -8.635167121887207
    6. 's' → logprob: -9.135167121887207
    7. '<|end|>' → logprob: -9.635167121887207
    8. '*a' → logprob: -9.760167121887207
    9. ',' → logprob: -10.010167121887207
    10. '```' → logprob: -10.010167121887207

Token 52: 's' (ID: 82)
  Prédit: 'a'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'a' → logprob: -0.05429023504257202
    2. '*' → logprob: -3.179290294647217
    3. ' a' → logprob: -5.429290294647217
    4. ' ' → logprob: -5.679290294647217
    5. ' *' → logprob: -6.179290294647217
    6. ' 
' → logprob: -8.554289817810059
    7. 'A' → logprob: -8.554289817810059
    8. '*a' → logprob: -8.679289817810059
    9. '```' → logprob: -9.054289817810059
    10. 'print' → logprob: -9.554289817810059

Token 53: 'omme' (ID: 30420)
  Prédit: '='
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '=' → logprob: -0.41633161902427673
    2. ' =' → logprob: -1.6663316488265991
    3. 'um' → logprob: -2.1663315296173096
    4. 'omme' → logprob: -4.291331768035889
    5. 'core' → logprob: -5.041331768035889
    6. 'u' → logprob: -5.166331768035889
    7. 'a' → logprob: -6.291331768035889
    8. '=a' → logprob: -6.541331768035889
    9. '=p' → logprob: -7.041331768035889
    10. ' ' → logprob: -7.041331768035889

Token 54: ' =' (ID: 314)
  Prédit: ' ='
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' =' → logprob: -0.09236480295658112
    2. '_' → logprob: -2.71736478805542
    3. '=' → logprob: -4.34236478805542
    4. 's' → logprob: -5.09236478805542
    5. '_a' → logprob: -7.21736478805542
    6. ' +=' → logprob: -7.21736478805542
    7. 'a' → logprob: -7.59236478805542
    8. '_total' → logprob: -8.342365264892578
    9. '_s' → logprob: -8.717365264892578
    10. ' ' → logprob: -8.842365264892578

Token 55: ' a' (ID: 261)
  Prédit: 'a'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'a' → logprob: -0.6934802532196045
    2. ' a' → logprob: -0.6934802532196045
    3. ' ' → logprob: -8.943480491638184
    4. '3' → logprob: -9.068480491638184
    5. ' (' → logprob: -10.193480491638184
    6. '(a' → logprob: -10.193480491638184
    7. ' p' → logprob: -12.318480491638184
    8. '(' → logprob: -13.443480491638184
    9. '0' → logprob: -13.568480491638184
    10. '  ' → logprob: -14.068480491638184

Token 56: '*' (ID: 9)
  Prédit: ' *'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' *' → logprob: -0.3486127555370331
    2. '*' → logprob: -1.2236127853393555
    3. ' ' → logprob: -10.098612785339355
    4. '+' → logprob: -10.223612785339355
    5. ' ' → logprob: -10.348612785339355
    6. ' +' → logprob: -10.723612785339355
    7. '*p' → logprob: -10.848612785339355
    8. '3' → logprob: -12.223612785339355
    9. ' **' → logprob: -12.848612785339355
    10. '  ' → logprob: -13.473612785339355

Token 57: '3' (ID: 18)
  Prédit: '3'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '3' → logprob: -5.848420551046729e-05
    2. ' ' → logprob: -9.7500581741333
    3. '```' → logprob: -16.750059127807617
    4. '  ' → logprob: -16.875059127807617
    5. '   ' → logprob: -17.375059127807617
    6. ' ' → logprob: -17.875059127807617
    7. '	' → logprob: -17.875059127807617
    8. '۳' → logprob: -18.125059127807617
    9. '³' → logprob: -18.625059127807617
    10. '٣' → logprob: -18.750059127807617

Token 58: ' +' (ID: 659)
  Prédit: '+'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '+' → logprob: -0.6143290400505066
    2. ' +' → logprob: -1.7393290996551514
    3. '*p' → logprob: -2.2393290996551514
    4. '*' → logprob: -2.6143290996551514
    5. ' *' → logprob: -2.9893290996551514
    6. '+p' → logprob: -3.2393290996551514
    7. ' ' → logprob: -4.489328861236572
    8. '<|end|>' → logprob: -6.489328861236572
    9. 'p' → logprob: -7.614328861236572
    10. ' p' → logprob: -7.864328861236572

Token 59: ' p' (ID: 275)
  Prédit: 'p'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'p' → logprob: -0.005268384236842394
    2. ' p' → logprob: -5.255268573760986
    3. '2' → logprob: -10.880268096923828
    4. ' ' → logprob: -12.380268096923828
    5. '4' → logprob: -12.880268096923828
    6. '5' → logprob: -13.005268096923828
    7. '3' → logprob: -13.005268096923828
    8. '7' → logprob: -13.255268096923828
    9. '6' → logprob: -14.755268096923828
    10. '(p' → logprob: -14.880268096923828

Token 60: '
' (ID: 198)
  Prédit: ''
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False

Token 61: 'result' (ID: 2521)
  Prédit: ''
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False

Token 62: 'at' (ID: 266)
  Prédit: ' ='
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' =' → logprob: -0.6443037986755371
    2. '=' → logprob: -1.769303798675537
    3. 's' → logprob: -1.894303798675537
    4. 'at' → logprob: -1.894303798675537
    5. 'a' → logprob: -6.519303798675537
    6. ' ' → logprob: -6.644303798675537
    7. 'ats' → logprob: -8.519304275512695
    8. '_' → logprob: -8.769304275512695
    9. ')' → logprob: -9.019304275512695
    10. 'é' → logprob: -10.144304275512695

Token 63: ' =' (ID: 314)
  Prédit: ' ='
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' =' → logprob: -0.20123691856861115
    2. '=' → logprob: -2.2012369632720947
    3. ' ' → logprob: -3.2012369632720947
    4. '<|end|>' → logprob: -3.8262369632720947
    5. ')' → logprob: -5.951236724853516
    6. 's' → logprob: -6.076236724853516
    7. '_' → logprob: -6.326236724853516
    8. '<|end|>' → logprob: -7.576236724853516
    9. '>' → logprob: -7.951236724853516
    10. '```' → logprob: -8.326236724853516

Token 64: ' somme' (ID: 64484)
  Prédit: ' somme'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' somme' → logprob: -0.1429760903120041
    2. 's' → logprob: -2.1429760456085205
    3. ' ' → logprob: -5.6429762840271
    4. ' sum' → logprob: -6.1429762840271
    5. 'sum' → logprob: -6.2679762840271
    6. '"' → logprob: -6.7679762840271
    7. ' str' → logprob: -7.1429762840271
    8. ' s' → logprob: -7.2679762840271
    9. ' int' → logprob: -7.3929762840271
    10. '(s' → logprob: -7.6429762840271

Token 65: ' //' (ID: 602)
  Prédit: ''
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False

Token 66: ' ' (ID: 220)
  Prédit: '2'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '2' → logprob: -0.011298326775431633
    2. '3' → logprob: -4.761298179626465
    3. '4' → logprob: -6.886298179626465
    4. ' ' → logprob: -7.386298179626465
    5. '5' → logprob: -7.761298179626465
    6. '19' → logprob: -8.511298179626465
    7. '10' → logprob: -9.011298179626465
    8. '7' → logprob: -9.636298179626465
    9. '6' → logprob: -9.761298179626465
    10. '9' → logprob: -10.636298179626465

Token 67: '2' (ID: 17)
  Prédit: '2'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '2' → logprob: -0.001501175225712359
    2. '4' → logprob: -7.501501083374023
    3. '3' → logprob: -7.501501083374023
    4. ' ' → logprob: -8.876501083374023
    5. '5' → logprob: -9.251501083374023
    6. '7' → logprob: -10.001501083374023
    7. '6' → logprob: -10.876501083374023
    8. '10' → logprob: -11.126501083374023
    9. '   ' → logprob: -11.126501083374023
    10. '19' → logprob: -11.376501083374023

Token 68: '  ' (ID: 256)
  Prédit: ''
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False

Token 69: ' #' (ID: 1069)
  Prédit: ''
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False

Token 70: ' division' (ID: 21629)
  Prédit: ''
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False

Token 71: ' entière' (ID: 61583)
  Prédit: ''
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False

Token 72: ' hein' (ID: 115155)
  Prédit: '
'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '
' → logprob: -0.7481886744499207
    2. 'print' → logprob: -1.3731887340545654
    3. '<|end|>' → logprob: -1.3731887340545654
    4. ' ' → logprob: -4.748188495635986
    5. '#' → logprob: -5.873188495635986
    6. ' 
' → logprob: -6.123188495635986
    7. '\n' → logprob: -6.498188495635986
    8. ' print' → logprob: -6.623188495635986
    9. '<|end|>' → logprob: -6.998188495635986
    10. ')' → logprob: -7.123188495635986

Token 73: '
' (ID: 198)
  Prédit: ''
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False

Token 74: 'print' (ID: 1598)
  Prédit: 'print'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'print' → logprob: -0.026740629225969315
    2. '<|end|>' → logprob: -4.276740550994873
    3. '
' → logprob: -5.026740550994873
    4. ' print' → logprob: -5.776740550994873
    5. '#' → logprob: -6.901740550994873
    6. ')' → logprob: -7.526740550994873
    7. ' ' → logprob: -7.901740550994873
    8. '\n' → logprob: -8.401741027832031
    9. ' 
' → logprob: -8.901741027832031
    10. '```' → logprob: -9.026741027832031

Token 75: '(result' (ID: 8111)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(' → logprob: -0.07891853898763657
    2. '(result' → logprob: -2.57891845703125
    3. '(s' → logprob: -11.32891845703125
    4. ' (' → logprob: -12.95391845703125
    5. '(resultado' → logprob: -12.95391845703125
    6. '(res' → logprob: -13.07891845703125
    7. 'result' → logprob: -13.07891845703125
    8. '(
' → logprob: -13.70391845703125
    9. '()' → logprob: -13.95391845703125
    10. '((' → logprob: -14.20391845703125

Token 76: 'at' (ID: 266)
  Prédit: 'at'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'at' → logprob: -0.0001705246395431459
    2. 't' → logprob: -8.750170707702637
    3. 'a' → logprob: -12.125170707702637
    4. ')' → logprob: -12.250170707702637
    5. ' at' → logprob: -14.500170707702637
    6. 'ат' → logprob: -14.875170707702637
    7. 'tat' → logprob: -15.000170707702637
    8. '_at' → logprob: -15.875170707702637
    9. ')t' → logprob: -16.62516975402832
    10. '))' → logprob: -16.75016975402832

Token 77: ')' (ID: 8)
  Prédit: ')'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')' → logprob: -3.054500666621607e-06
    2. ' )' → logprob: -13.25000286102295
    3. '))' → logprob: -14.12500286102295
    4. ')`' → logprob: -15.87500286102295
    5. '(' → logprob: -16.250003814697266
    6. ')
' → logprob: -16.250003814697266
    7. ')#' → logprob: -17.500003814697266
    8. '()' → logprob: -17.500003814697266
    9. ')**' → logprob: -17.875003814697266
    10. ')}' → logprob: -18.000003814697266


RÉSUMÉ:
--------------------------------------------------------------------------------
Total des tokens analysés: 75
Tokens correctement prédits (1ère position, stricte): 15
Tokens correctement prédits (1ère position, avec adaptation): 15
Tokens correctement prédits (top 10): 41
Précision stricte (1ère position): 20.00%
Précision adaptée (1ère position): 20.00%
Précision (top 10): 54.67%
================================================================================
