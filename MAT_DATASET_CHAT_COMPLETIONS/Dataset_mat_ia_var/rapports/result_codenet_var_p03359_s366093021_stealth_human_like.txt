================================================================================
ANALYSE DE PRÉDICTION TOKEN PAR TOKEN (BATCH API)
Date: 2025-06-04 20:19:33
Modèle de tokenisation: gpt-4o-mini
================================================================================

SCRIPT ANALYSÉ:
--------------------------------------------------------------------------------
# Bon, on récupère deux trucs ici, ils vont être utiles
A , B = map(int, input().split())  # c'est plus lisible, non?

# On vérifier ce machin : 
if B < A:
    print(A-1) # c'est what il faut faire d'après l'énoncé (je crois?)
else:
    print(A)  # sinon juste afficher A

# j'espère que ça fait ce que ça doit faire...
--------------------------------------------------------------------------------

RÉSULTATS D'ANALYSE TOKEN PAR TOKEN:
--------------------------------------------------------------------------------
Token 0: '#' (ID: 2)
  → Token d'amorce (pas de prédiction)

Token 1: ' Bon' (ID: 12658)
  → Token d'amorce (pas de prédiction)

Token 2: ',' (ID: 11)
  → Token d'amorce (pas de prédiction)

Token 3: ' on' (ID: 402)
  Prédit: ' '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' ' → logprob: -0.1667102575302124
    2. ' je' → logprob: -3.166710376739502
    3. '```' → logprob: -3.291710376739502
    4. '  ' → logprob: -3.416710376739502
    5. ' e' → logprob: -5.291710376739502
    6. ' t' → logprob: -5.291710376739502
    7. 'jour' → logprob: -5.541710376739502
    8. '`' → logprob: -5.666710376739502
    9. 'e' → logprob: -6.041710376739502
    10. ' ```' → logprob: -6.291710376739502

Token 4: ' récup' (ID: 62856)
  Prédit: ' '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' ' → logprob: -1.3824423551559448
    2. '```' → logprob: -1.8824423551559448
    3. 'n' → logprob: -2.0074424743652344
    4. 'ne' → logprob: -2.6324424743652344
    5. 'e' → logprob: -2.7574424743652344
    6. 'u' → logprob: -2.7574424743652344
    7. 't' → logprob: -2.8824424743652344
    8. ''' → logprob: -3.5074424743652344
    9. ' ```' → logprob: -3.7574424743652344
    10. '`' → logprob: -3.7574424743652344

Token 5: 'ère' (ID: 4346)
  Prédit: 'ère'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'ère' → logprob: -0.0023277211003005505
    2. 'è' → logprob: -6.877327919006348
    3. 'èr' → logprob: -7.252327919006348
    4. '#' → logprob: -8.002327919006348
    5. '\' → logprob: -9.752327919006348
    6. 'érer' → logprob: -9.877327919006348
    7. 'ére' → logprob: -10.127327919006348
    8. 'ération' → logprob: -10.627327919006348
    9. '```' → logprob: -10.627327919006348
    10. 'èrent' → logprob: -11.627327919006348

Token 6: ' deux' (ID: 10301)
  Prédit: ' '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' ' → logprob: -0.04312650486826897
    2. '_' → logprob: -3.5431265830993652
    3. ' ' → logprob: -5.793126583099365
    4. ' le' → logprob: -6.043126583099365
    5. ' l' → logprob: -6.418126583099365
    6. ' #' → logprob: -6.918126583099365
    7. 'le' → logprob: -7.043126583099365
    8. '  ' → logprob: -7.543126583099365
    9. 'l' → logprob: -7.543126583099365
    10. ''' → logprob: -7.793126583099365

Token 7: ' trucs' (ID: 151878)
  Prédit: ' espaces'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' espaces' → logprob: -0.8992908596992493
    2. ' ' → logprob: -1.5242908000946045
    3. ' mots' → logprob: -2.2742908000946045
    4. ' lignes' → logprob: -3.1492908000946045
    5. ' variables' → logprob: -3.2742908000946045
    6. ' chaînes' → logprob: -4.149291038513184
    7. '_' → logprob: -4.399291038513184
    8. ' ' → logprob: -4.399291038513184
    9. 'esp' → logprob: -4.524291038513184
    10. 's' → logprob: -4.649291038513184

Token 8: ' ici' (ID: 27994)
  Prédit: '#'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '#' → logprob: -0.4718882441520691
    2. '.' → logprob: -2.471888303756714
    3. '_' → logprob: -2.846888303756714
    4. '```' → logprob: -3.096888303756714
    5. '\n' → logprob: -3.346888303756714
    6. ',' → logprob: -3.346888303756714
    7. '`' → logprob: -3.596888303756714
    8. 's' → logprob: -3.846888303756714
    9. ':' → logprob: -4.346888065338135
    10. '\' → logprob: -4.596888065338135

Token 9: ',' (ID: 11)
  Prédit: '#'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '#' → logprob: -1.3059784173965454
    2. '```' → logprob: -1.8059784173965454
    3. ':' → logprob: -2.180978298187256
    4. '.' → logprob: -2.805978298187256
    5. 's' → logprob: -2.805978298187256
    6. '`' → logprob: -2.805978298187256
    7. '\n' → logprob: -3.055978298187256
    8. '_' → logprob: -3.180978298187256
    9. ' ' → logprob: -3.180978298187256
    10. ',' → logprob: -3.555978298187256

Token 10: ' ils' (ID: 15387)
  Prédit: ' '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' ' → logprob: -0.9911450743675232
    2. ':' → logprob: -2.241145133972168
    3. '#' → logprob: -2.366145133972168
    4. ' :' → logprob: -3.241145133972168
    5. 's' → logprob: -3.491145133972168
    6. '```' → logprob: -3.491145133972168
    7. '`' → logprob: -3.616145133972168
    8. ' #' → logprob: -3.991145133972168
    9. 'd' → logprob: -4.241145133972168
    10. 'l' → logprob: -4.241145133972168

Token 11: ' vont' (ID: 29772)
  Prédit: 's'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 's' → logprob: -0.8115573525428772
    2. ' =' → logprob: -1.5615572929382324
    3. ' s' → logprob: -3.1865572929382324
    4. '.' → logprob: -3.1865572929382324
    5. ' vont' → logprob: -3.3115572929382324
    6. '_' → logprob: -3.4365572929382324
    7. ' .' → logprob: -3.5615572929382324
    8. ' ' → logprob: -3.6865572929382324
    9. ' n' → logprob: -3.8115572929382324
    10. ' a' → logprob: -3.8115572929382324

Token 12: ' être' (ID: 9104)
  Prédit: ' servir'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' servir' → logprob: -0.6577464938163757
    2. 'être' → logprob: -1.4077465534210205
    3. 'serv' → logprob: -2.2827465534210205
    4. ' être' → logprob: -3.0327465534210205
    5. 'nous' → logprob: -4.282746315002441
    6. ' nous' → logprob: -5.032746315002441
    7. 'venir' → logprob: -5.032746315002441
    8. ' permettre' → logprob: -5.407746315002441
    9. 's' → logprob: -5.532746315002441
    10. 'serve' → logprob: -5.657746315002441

Token 13: ' utiles' (ID: 121161)
  Prédit: ' utilisés'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' utilisés' → logprob: -0.6753084659576416
    2. ' stock' → logprob: -2.0503084659576416
    3. 'util' → logprob: -2.9253084659576416
    4. ' récup' → logprob: -3.3003084659576416
    5. 'import' → logprob: -3.5503084659576416
    6. 'stock' → logprob: -3.6753084659576416
    7. 'les' → logprob: -4.1753082275390625
    8. 'r' → logprob: -4.3003082275390625
    9. ' nécessaires' → logprob: -4.3003082275390625
    10. ' initial' → logprob: -4.4253082275390625

Token 14: '
' (ID: 198)
  Prédit: ':'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ':' → logprob: -0.5431514382362366
    2. '```' → logprob: -1.4181513786315918
    3. '\n' → logprob: -2.418151378631592
    4. '.' → logprob: -3.168151378631592
    5. '`' → logprob: -3.918151378631592
    6. ' :' → logprob: -5.043151378631592
    7. '``' → logprob: -5.293151378631592
    8. '

' → logprob: -5.793151378631592
    9. '#' → logprob: -5.793151378631592
    10. '
' → logprob: -6.543151378631592

Token 15: 'A' (ID: 32)
  Prédit: ':'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ':' → logprob: -0.6641074419021606
    2. '.' → logprob: -1.4141074419021606
    3. '```' → logprob: -2.164107322692871
    4. '`' → logprob: -3.414107322692871
    5. ',' → logprob: -3.789107322692871
    6. '#' → logprob: -4.164107322692871
    7. ' :' → logprob: -4.289107322692871
    8. '\n' → logprob: -4.539107322692871
    9. ' ' → logprob: -4.664107322692871
    10. '
' → logprob: -5.789107322692871

Token 16: ' ,' (ID: 1366)
  Prédit: 'u'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'u' → logprob: -1.552524447441101
    2. 'i' → logprob: -2.0525245666503906
    3. 'rray' → logprob: -2.1775245666503906
    4. 'r' → logprob: -2.6775245666503906
    5. 'ux' → logprob: -2.6775245666503906
    6. 'rr' → logprob: -2.9275245666503906
    7. '=' → logprob: -2.9275245666503906
    8. 'm' → logprob: -3.1775245666503906
    9. 'j' → logprob: -3.6775245666503906
    10. 'n' → logprob: -3.8025245666503906

Token 17: ' B' (ID: 418)
  Prédit: 'B'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'B' → logprob: -0.39492273330688477
    2. ' B' → logprob: -1.1449227333068848
    3. 'b' → logprob: -5.394922733306885
    4. ' =' → logprob: -6.519922733306885
    5. ' ' → logprob: -7.269922733306885
    6. '_' → logprob: -7.519922733306885
    7. ' b' → logprob: -7.894922733306885
    8. ' _' → logprob: -9.519922256469727
    9. '_B' → logprob: -9.894922256469727
    10. '  ' → logprob: -10.019922256469727

Token 18: ' =' (ID: 314)
  Prédit: '='
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '=' → logprob: -0.6967837810516357
    2. ' =' → logprob: -0.6967837810516357
    3. ',' → logprob: -5.946784019470215
    4. ' ' → logprob: -7.321784019470215
    5. ' ,' → logprob: -8.946784019470215
    6. '<|end|>' → logprob: -9.071784019470215
    7. ')' → logprob: -10.196784019470215
    8. ' =
' → logprob: -11.696784019470215
    9. '```' → logprob: -11.946784019470215
    10. '.' → logprob: -12.071784019470215

Token 19: ' map' (ID: 4014)
  Prédit: ' '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' ' → logprob: -1.0401018857955933
    2. ' input' → logprob: -1.0401018857955933
    3. ' map' → logprob: -1.7901018857955933
    4. 'input' → logprob: -2.790102005004883
    5. 'map' → logprob: -3.790102005004883
    6. ' [' → logprob: -4.165102005004883
    7. ' data' → logprob: -5.165102005004883
    8. ' np' → logprob: -5.165102005004883
    9. ' []' → logprob: -5.790102005004883
    10. '0' → logprob: -6.790102005004883

Token 20: '(int' (ID: 2742)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(' → logprob: -0.5919053554534912
    2. '(int' → logprob: -0.8419053554534912
    3. '(lambda' → logprob: -4.71690559387207
    4. '(str' → logprob: -5.09190559387207
    5. '(list' → logprob: -8.09190559387207
    6. '(
' → logprob: -8.59190559387207
    7. 'int' → logprob: -9.21690559387207
    8. '(input' → logprob: -9.59190559387207
    9. '(

' → logprob: -11.46690559387207
    10. '(eval' → logprob: -11.46690559387207

Token 21: ',' (ID: 11)
  Prédit: '(input'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '(input' → logprob: -0.12957161664962769
    2. ')' → logprob: -2.3795716762542725
    3. '(' → logprob: -4.129571437835693
    4. 'input' → logprob: -4.379571437835693
    5. ',input' → logprob: -9.504571914672852
    6. ' input' → logprob: -10.004571914672852
    7. '=input' → logprob: -10.129571914672852
    8. '```' → logprob: -10.379571914672852
    9. '[input' → logprob: -10.379571914672852
    10. ')(' → logprob: -11.254571914672852

Token 22: ' input' (ID: 3422)
  Prédit: 'input'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'input' → logprob: -0.386966735124588
    2. ' input' → logprob: -1.1369667053222656
    3. ')' → logprob: -9.636966705322266
    4. '(input' → logprob: -11.386966705322266
    5. ' ' → logprob: -12.011966705322266
    6. '=input' → logprob: -12.386966705322266
    7. '	input' → logprob: -13.011966705322266
    8. ' )' → logprob: -13.261966705322266
    9. ',input' → logprob: -13.761966705322266
    10. '<input' → logprob: -14.136966705322266

Token 23: '().' (ID: 1454)
  Prédit: '()'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '()' → logprob: -0.23062939941883087
    2. '())' → logprob: -1.8556294441223145
    3. '(' → logprob: -3.4806294441223145
    4. '().' → logprob: -5.1056294441223145
    5. '(()' → logprob: -5.3556294441223145
    6. '());' → logprob: -6.1056294441223145
    7. '(input' → logprob: -7.1056294441223145
    8. ')' → logprob: -7.4806294441223145
    9. '(),' → logprob: -7.7306294441223145
    10. '('' → logprob: -7.8556294441223145

Token 24: 'split' (ID: 13627)
  Prédit: 'split'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'split' → logprob: -0.00010032468708232045
    2. 'strip' → logprob: -9.250100135803223
    3. 'rstrip' → logprob: -12.875100135803223
    4. ' split' → logprob: -13.625100135803223
    5. '(split' → logprob: -15.000100135803223
    6. 'spl' → logprob: -16.12510108947754
    7. 'replace' → logprob: -17.25010108947754
    8. ')' → logprob: -17.50010108947754
    9. 's' → logprob: -17.62510108947754
    10. 'read' → logprob: -18.87510108947754

Token 25: '())' (ID: 3516)
  Prédit: '())'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '())' → logprob: -0.37283244729042053
    2. ')' → logprob: -1.2478324174880981
    3. '))' → logprob: -4.122832298278809
    4. '()))' → logprob: -5.497832298278809
    5. '()' → logprob: -5.622832298278809
    6. '(' → logprob: -9.622832298278809
    7. ' ())' → logprob: -10.747832298278809
    8. '('' → logprob: -11.872832298278809
    9. '()),' → logprob: -11.872832298278809
    10. '),' → logprob: -11.997832298278809

Token 26: ' ' (ID: 220)
  Prédit: ''
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False

Token 27: ' #' (ID: 1069)
  Prédit: ''
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False

Token 28: ' c' (ID: 274)
  Prédit: ' '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' ' → logprob: -0.08854829519987106
    2. ')' → logprob: -3.588548183441162
    3. ',' → logprob: -4.463548183441162
    4. '#' → logprob: -4.588548183441162
    5. 'input' → logprob: -4.713548183441162
    6. '"' → logprob: -5.588548183441162
    7. ''' → logprob: -5.588548183441162
    8. 'A' → logprob: -5.713548183441162
    9. ' A' → logprob: -5.838548183441162
    10. '  ' → logprob: -6.338548183441162

Token 29: ''est' (ID: 6616)
  Prédit: 'e'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'e' → logprob: -1.025022029876709
    2. ''est' → logprob: -1.525022029876709
    3. 'omme' → logprob: -1.900022029876709
    4. 'es' → logprob: -2.525022029876709
    5. 'eux' → logprob: -3.400022029876709
    6. ''' → logprob: -3.775022029876709
    7. 'omm' → logprob: -3.775022029876709
    8. 'ont' → logprob: -4.025022029876709
    9. ''e' → logprob: -4.275022029876709
    10. 'on' → logprob: -4.650022029876709

Token 30: ' plus' (ID: 2932)
  Prédit: ' la'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' la' → logprob: -1.484879732131958
    2. ' bien' → logprob: -1.609879732131958
    3. ' l' → logprob: -1.734879732131958
    4. ' souvent' → logprob: -2.734879732131958
    5. ' les' → logprob: -2.984879732131958
    6. ' le' → logprob: -3.234879732131958
    7. 'l' → logprob: -3.484879732131958
    8. 'bien' → logprob: -3.859879732131958
    9. ' probablement' → logprob: -4.234879493713379
    10. ' ' → logprob: -4.359879493713379

Token 31: ' lis' (ID: 20784)
  Prédit: 'pr'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'pr' → logprob: -0.01586601324379444
    2. ' pratique' → logprob: -4.515865802764893
    3. ' simple' → logprob: -6.765865802764893
    4. 'pro' → logprob: -7.015865802764893
    5. 'simple' → logprob: -7.015865802764893
    6. ' prat' → logprob: -7.765865802764893
    7. 'utile' → logprob: -8.01586627960205
    8. 'clair' → logprob: -8.89086627960205
    9. 'comm' → logprob: -9.26586627960205
    10. 'court' → logprob: -9.64086627960205

Token 32: 'ible' (ID: 1430)
  Prédit: 'ble'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'ble' → logprob: -0.040403906255960464
    2. 'bre' → logprob: -3.7904038429260254
    3. 'b' → logprob: -4.790403842926025
    4. 'bles' → logprob: -5.415403842926025
    5. 'ible' → logprob: -6.165403842926025
    6. '```' → logprob: -7.790403842926025
    7. 'bres' → logprob: -8.165404319763184
    8. 'vre' → logprob: -8.290404319763184
    9. 're' → logprob: -8.790404319763184
    10. 'sible' → logprob: -8.790404319763184

Token 33: ',' (ID: 11)
  Prédit: ''
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False

Token 34: ' non' (ID: 2893)
  Prédit: ' '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' ' → logprob: -0.17607326805591583
    2. ' A' → logprob: -2.5510733127593994
    3. '<|end|>' → logprob: -3.4260733127593994
    4. 'A' → logprob: -4.55107307434082
    5. ' ' → logprob: -4.67607307434082
    6. ')' → logprob: -4.92607307434082
    7. ' mais' → logprob: -5.42607307434082
    8. ' B' → logprob: -5.80107307434082
    9. ' 
' → logprob: -6.30107307434082
    10. '  ' → logprob: -6.55107307434082

Token 35: '?

' (ID: 1715)
  Prédit: ''
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False

Token 36: '#' (ID: 2)
  Prédit: '
'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '
' → logprob: -0.6975865960121155
    2. '<|end|>' → logprob: -1.5725865364074707
    3. '#' → logprob: -1.6975865364074707
    4. '\n' → logprob: -2.8225865364074707
    5. ' ' → logprob: -4.822586536407471
    6. ')' → logprob: -5.447586536407471
    7. 'newline' → logprob: -5.447586536407471
    8. ' 
' → logprob: -5.572586536407471
    9. ':' → logprob: -5.572586536407471
    10. 'A' → logprob: -5.572586536407471

Token 37: ' On' (ID: 2160)
  Prédit: '#'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '#' → logprob: -0.8989562392234802
    2. ' ' → logprob: -1.648956298828125
    3. 'C' → logprob: -2.148956298828125
    4. 'if' → logprob: -2.398956298828125
    5. 'i' → logprob: -2.773956298828125
    6. 'A' → logprob: -3.648956298828125
    7. 'c' → logprob: -3.773956298828125
    8. 'a' → logprob: -4.023956298828125
    9. 'print' → logprob: -4.273956298828125
    10. ' #' → logprob: -5.023956298828125

Token 38: ' vérifier' (ID: 93671)
  Prédit: ' va'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' va' → logprob: -0.7046557664871216
    2. ' continue' → logprob: -1.5796557664871216
    3. ' récup' → logprob: -3.204655647277832
    4. 'continue' → logprob: -3.329655647277832
    5. 'print' → logprob: -3.454655647277832
    6. ' fait' → logprob: -3.704655647277832
    7. 'fait' → logprob: -4.454655647277832
    8. ' print' → logprob: -4.579655647277832
    9. ' veut' → logprob: -4.704655647277832
    10. 'def' → logprob: -5.079655647277832

Token 39: ' ce' (ID: 2357)
  Prédit: 'a'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'a' → logprob: -0.13852252066135406
    2. 'f' → logprob: -2.2635226249694824
    3. 'd' → logprob: -3.7635226249694824
    4. 'e' → logprob: -7.388522624969482
    5. 'ra' → logprob: -7.513522624969482
    6. ' ' → logprob: -8.388522148132324
    7. 't' → logprob: -8.888522148132324
    8. 'r' → logprob: -9.138522148132324
    9. 's' → logprob: -9.263522148132324
    10. 'if' → logprob: -9.513522148132324

Token 40: ' machin' (ID: 107967)
  Prédit: ' que'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' que' → logprob: -0.6366747617721558
    2. 's' → logprob: -1.3866747617721558
    3. 'la' → logprob: -2.7616748809814453
    4. 't' → logprob: -2.8866748809814453
    5. ' qu' → logprob: -3.5116748809814453
    6. 'st' → logprob: -4.511674880981445
    7. 'a' → logprob: -4.511674880981445
    8. ' ' → logprob: -4.636674880981445
    9. 'nt' → logprob: -4.636674880981445
    10. 'ra' → logprob: -5.386674880981445

Token 41: ' :' (ID: 712)
  Prédit: 's'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 's' → logprob: -0.0984763577580452
    2. ' if' → logprob: -2.7234764099121094
    3. ' ' → logprob: -4.348476409912109
    4. 'if' → logprob: -4.598476409912109
    5. ' s' → logprob: -5.973476409912109
    6. ' si' → logprob: -6.973476409912109
    7. ':' → logprob: -7.848476409912109
    8. 'r' → logprob: -8.47347640991211
    9. 'nt' → logprob: -8.84847640991211
    10. 'si' → logprob: -9.09847640991211

Token 42: ' 
' (ID: 793)
  Prédit: 'if'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'if' → logprob: -0.013398789800703526
    2. ' if' → logprob: -4.38839864730835
    3. 'i' → logprob: -7.26339864730835
    4. 'A' → logprob: -9.138399124145508
    5. '=' → logprob: -11.388399124145508
    6. ' A' → logprob: -11.513399124145508
    7. ' ' → logprob: -11.513399124145508
    8. ' i' → logprob: -11.638399124145508
    9. 's' → logprob: -11.763399124145508
    10. '_' → logprob: -12.263399124145508

Token 43: 'if' (ID: 366)
  Prédit: 'if'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'if' → logprob: -0.004588195588439703
    2. ' if' → logprob: -5.8795881271362305
    3. 'i' → logprob: -6.8795881271362305
    4. 'A' → logprob: -7.2545881271362305
    5. 'while' → logprob: -11.00458812713623
    6. ' A' → logprob: -12.25458812713623
    7. 'a' → logprob: -12.37958812713623
    8. 'print' → logprob: -12.62958812713623
    9. 'for' → logprob: -12.75458812713623
    10. ' i' → logprob: -13.00458812713623

Token 44: ' B' (ID: 418)
  Prédit: ' A'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' A' → logprob: -0.08688120543956757
    2. 'A' → logprob: -2.586881160736084
    3. ' ' → logprob: -4.836881160736084
    4. ' ' → logprob: -11.336881637573242
    5. ' B' → logprob: -12.086881637573242
    6. '  ' → logprob: -12.961881637573242
    7. '(' → logprob: -13.336881637573242
    8. ' (' → logprob: -13.711881637573242
    9. ' not' → logprob: -13.711881637573242
    10. 'B' → logprob: -13.836881637573242

Token 45: ' <' (ID: 464)
  Prédit: ' >'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' >' → logprob: -0.08502967655658722
    2. '>' → logprob: -2.7100296020507812
    3. ' <=' → logprob: -4.835029602050781
    4. ' >=' → logprob: -5.835029602050781
    5. ' <' → logprob: -6.085029602050781
    6. ' ==' → logprob: -7.460029602050781
    7. '<=' → logprob: -7.835029602050781
    8. '<' → logprob: -8.210029602050781
    9. '>=' → logprob: -8.460029602050781
    10. '==' → logprob: -8.960029602050781

Token 46: ' A' (ID: 355)
  Prédit: 'A'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'A' → logprob: -0.6951063275337219
    2. ' A' → logprob: -0.8201063275337219
    3. ' ' → logprob: -3.445106267929077
    4. '0' → logprob: -3.820106267929077
    5. '=' → logprob: -5.195106506347656
    6. '10' → logprob: -7.945106506347656
    7. '1' → logprob: -8.070106506347656
    8. '=A' → logprob: -8.945106506347656
    9. '6' → logprob: -9.695106506347656
    10. '2' → logprob: -9.820106506347656

Token 47: ':
' (ID: 734)
  Prédit: ':'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ':' → logprob: -0.01113989856094122
    2. ' :' → logprob: -4.511139869689941
    3. ':
' → logprob: -9.511139869689941
    4. '+:' → logprob: -11.886139869689941
    5. ' :
' → logprob: -12.386139869689941
    6. '+' → logprob: -12.761139869689941
    7. ':**' → logprob: -14.011139869689941
    8. '>' → logprob: -14.386139869689941
    9. '>:' → logprob: -14.761139869689941
    10. '):' → logprob: -14.886139869689941

Token 48: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.7745764851570129
    2. '\n' → logprob: -1.2745764255523682
    3. '    ' → logprob: -2.899576425552368
    4. '    
' → logprob: -3.524576425552368
    5. 'print' → logprob: -3.524576425552368
    6. ' 
' → logprob: -3.649576425552368
    7. ' ' → logprob: -3.649576425552368
    8. ' B' → logprob: -3.774576425552368
    9. ' print' → logprob: -3.899576425552368
    10. '  
' → logprob: -4.524576663970947

Token 49: ' print' (ID: 2123)
  Prédit: ' print'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' print' → logprob: -0.8991096615791321
    2. ' B' → logprob: -1.2741096019744873
    3. '   ' → logprob: -2.2741096019744873
    4. ' A' → logprob: -2.6491096019744873
    5. '    ' → logprob: -2.6491096019744873
    6. 'print' (adapté à ' print') → logprob: -3.1491096019744873
    7. ' pass' → logprob: -4.399109840393066
    8. 'A' → logprob: -5.524109840393066
    9. 'B' → logprob: -6.274109840393066
    10. '    
' → logprob: -6.399109840393066

Token 50: '(A' (ID: 10706)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(' → logprob: -0.24490265548229218
    2. '("' → logprob: -1.6199026107788086
    3. '(B' → logprob: -4.369902610778809
    4. '(A' → logprob: -5.369902610778809
    5. '('' → logprob: -6.619902610778809
    6. '()' → logprob: -8.619902610778809
    7. '("("' → logprob: -8.994902610778809
    8. '(f' → logprob: -9.369902610778809
    9. '("")' → logprob: -9.494902610778809
    10. '(-' → logprob: -10.494902610778809

Token 51: '-' (ID: 12)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')' → logprob: -0.0019989388529211283
    2. ' )' → logprob: -6.3769989013671875
    3. ')
' → logprob: -8.751998901367188
    4. '+' → logprob: -10.001998901367188
    5. '-' → logprob: -11.126998901367188
    6. ',' → logprob: -11.376998901367188
    7. '   ' → logprob: -11.376998901367188
    8. ' +' → logprob: -11.501998901367188
    9. ' -' → logprob: -12.001998901367188
    10. '>' → logprob: -12.001998901367188

Token 52: '1' (ID: 16)
  Prédit: 'B'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'B' → logprob: -4.632542913896032e-05
    2. ' B' → logprob: -10.000046730041504
    3. '1' → logprob: -14.000046730041504
    4. ' ' → logprob: -17.000045776367188
    5. '2' → logprob: -19.125045776367188
    6. 'b' → logprob: -19.375045776367188
    7. '<|end|>' → logprob: -19.625045776367188
    8. '>B' → logprob: -20.000045776367188
    9. '0' → logprob: -20.625045776367188
    10. '10' → logprob: -20.875045776367188

Token 53: ')' (ID: 8)
  Prédit: ')'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')' → logprob: -0.00015812745550647378
    2. ' )' → logprob: -9.125158309936523
    3. ')
' → logprob: -10.250158309936523
    4. 'else' → logprob: -12.125158309936523
    5. '+' → logprob: -13.250158309936523
    6. ')

' → logprob: -13.500158309936523
    7. ' else' → logprob: -13.625158309936523
    8. '```' → logprob: -13.875158309936523
    9. '))' → logprob: -14.000158309936523
    10. '<|end|>' → logprob: -14.875158309936523

Token 54: ' #' (ID: 1069)
  Prédit: 'else'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'else' → logprob: -0.7223017811775208
    2. '<|end|>' → logprob: -0.8473017811775208
    3. ' else' → logprob: -2.972301721572876
    4. '
' → logprob: -4.222301959991455
    5. '```' → logprob: -5.472301959991455
    6. '+' → logprob: -5.847301959991455
    7. 'elif' → logprob: -5.972301959991455
    8. ')' → logprob: -6.097301959991455
    9. '<|end|>' → logprob: -6.347301959991455
    10. ' ' → logprob: -6.847301959991455

Token 55: ' c' (ID: 274)
  Prédit: ''
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False

Token 56: ''est' (ID: 6616)
  Prédit: 'ont'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'ont' → logprob: -0.8536486029624939
    2. ''est' → logprob: -1.6036486625671387
    3. '```' → logprob: -2.1036486625671387
    4. ''' → logprob: -2.6036486625671387
    5. 'ode' → logprob: -3.2286486625671387
    6. 'e' → logprob: -3.6036486625671387
    7. '<|end|>' → logprob: -3.6036486625671387
    8. 'est' → logprob: -3.9786486625671387
    9. 'omp' → logprob: -5.103648662567139
    10. '`' → logprob: -5.228648662567139

Token 57: ' what' (ID: 1412)
  Prédit: ' vrai'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' vrai' → logprob: -1.5571765899658203
    2. ' tout' → logprob: -1.6821765899658203
    3. 'tout' → logprob: -2.3071765899658203
    4. ' ' → logprob: -2.4321765899658203
    5. ' une' → logprob: -3.1821765899658203
    6. ' le' → logprob: -3.3071765899658203
    7. ' logique' → logprob: -3.3071765899658203
    8. 'le' → logprob: -3.5571765899658203
    9. ' bon' → logprob: -3.6821765899658203
    10. ' l' → logprob: -3.9321765899658203

Token 58: ' il' (ID: 1793)
  Prédit: ''
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False

Token 59: ' faut' (ID: 17821)
  Prédit: 'f'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'f' → logprob: -0.14343248307704926
    2. ' faut' → logprob: -2.518432378768921
    3. ' manque' → logprob: -4.6434326171875
    4. 'man' → logprob: -4.8934326171875
    5. 'fall' → logprob: -4.8934326171875
    6. '```' → logprob: -5.5184326171875
    7. 's' → logprob: -5.6434326171875
    8. 'n' → logprob: -6.0184326171875
    9. ' faudrait' → logprob: -6.3934326171875
    10. 'print' → logprob: -6.5184326171875

Token 60: ' faire' (ID: 8119)
  Prédit: 'else'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'else' → logprob: -0.1979883313179016
    2. ' else' → logprob: -2.322988271713257
    3. '<|end|>' → logprob: -2.572988271713257
    4. '```' → logprob: -6.322988510131836
    5. 'elif' → logprob: -7.072988510131836
    6. '<|end|>' → logprob: -7.072988510131836
    7. ')' → logprob: -7.322988510131836
    8. '
' → logprob: -7.697988510131836
    9. '_else' → logprob: -9.447988510131836
    10. ' elif' → logprob: -9.447988510131836

Token 61: ' d' (ID: 272)
  Prédit: 'else'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'else' → logprob: -0.23503908514976501
    2. ' else' → logprob: -1.8600391149520874
    3. '<|end|>' → logprob: -2.985038995742798
    4. 'elif' → logprob: -6.485039234161377
    5. '```' → logprob: -7.735039234161377
    6. '<|end|>' → logprob: -7.735039234161377
    7. ' elif' → logprob: -8.860038757324219
    8. ')' → logprob: -9.360038757324219
    9. '_else' → logprob: -9.485038757324219
    10. '
' → logprob: -9.485038757324219

Token 62: ''après' (ID: 105130)
  Prédit: 'ans'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'ans' → logprob: -0.05307537317276001
    2. 'e' → logprob: -3.5530753135681152
    3. 'emain' → logprob: -4.553075313568115
    4. 'onc' → logprob: -6.053075313568115
    5. '```' → logprob: -6.303075313568115
    6. ''abord' → logprob: -6.553075313568115
    7. ''ici' → logprob: -6.803075313568115
    8. 'eux' → logprob: -7.053075313568115
    9. 'épend' → logprob: -7.303075313568115
    10. 'es' → logprob: -7.428075313568115

Token 63: ' l' (ID: 305)
  Prédit: 'le'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'le' → logprob: -0.43442514538764954
    2. ' le' → logprob: -2.059425115585327
    3. 'l' → logprob: -2.559425115585327
    4. ' la' → logprob: -2.684425115585327
    5. '<|end|>' → logprob: -3.309425115585327
    6. 'the' → logprob: -5.059425354003906
    7. ' l' → logprob: -5.309425354003906
    8. 'user' → logprob: -5.434425354003906
    9. 'la' → logprob: -6.059425354003906
    10. '_le' → logprob: -6.184425354003906

Token 64: ''' (ID: 6)
  Prédit: 'a'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'a' → logprob: -0.728850781917572
    2. 'e' → logprob: -1.2288508415222168
    3. ''utilisateur' → logprob: -2.478850841522217
    4. ''' → logprob: -2.853850841522217
    5. ''ex' → logprob: -3.728850841522217
    6. ''auteur' → logprob: -3.853850841522217
    7. 'ex' → logprob: -4.603850841522217
    8. 'ui' → logprob: -4.728850841522217
    9. 'es' → logprob: -5.728850841522217
    10. 'user' → logprob: -6.603850841522217

Token 65: 'én' (ID: 3289)
  Prédit: 'én'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'én' → logprob: -0.4204574525356293
    2. 'en' → logprob: -1.2954574823379517
    3. 'ex' → logprob: -3.045457363128662
    4. 'é' → logprob: -4.545457363128662
    5. 'a' → logprob: -6.170457363128662
    6. 'user' → logprob: -6.545457363128662
    7. 'int' → logprob: -6.795457363128662
    8. 'instruction' → logprob: -6.795457363128662
    9. 'e' → logprob: -6.920457363128662
    10. 'instructions' → logprob: -7.670457363128662

Token 66: 'oncé' (ID: 59071)
  Prédit: 'oncé'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'oncé' → logprob: -0.002797153079882264
    2. 'once' → logprob: -6.6277971267700195
    3. 'onc' → logprob: -7.3777971267700195
    4. 'non' → logprob: -7.7527971267700195
    5. 'on' → logprob: -8.75279712677002
    6. 'unci' → logprob: -9.25279712677002
    7. 'ig' → logprob: -9.87779712677002
    8. 'nonce' → logprob: -9.87779712677002
    9. 'oncer' → logprob: -10.12779712677002
    10. 'd' → logprob: -12.00279712677002

Token 67: ' (' (ID: 350)
  Prédit: 'else'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'else' → logprob: -0.08183615654706955
    2. ' else' → logprob: -3.206836223602295
    3. '<|end|>' → logprob: -3.456836223602295
    4. 'elif' → logprob: -5.456836223602295
    5. '```' → logprob: -6.706836223602295
    6. '<|end|>' → logprob: -7.831836223602295
    7. ')' → logprob: -8.081835746765137
    8. ' elif' → logprob: -9.331835746765137
    9. '
' → logprob: -9.956835746765137
    10. 'endif' → logprob: -10.456835746765137

Token 68: 'je' (ID: 1587)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ')' → logprob: -0.0030368936713784933
    2. 'else' → logprob: -6.753036975860596
    3. ' )' → logprob: -7.003036975860596
    4. '```' → logprob: -8.503036499023438
    5. '`)' → logprob: -8.503036499023438
    6. '<|end|>' → logprob: -8.878036499023438
    7. ')
' → logprob: -8.878036499023438
    8. ' else' → logprob: -9.003036499023438
    9. '')' → logprob: -10.128036499023438
    10. '   ' → logprob: -10.378036499023438

Token 69: ' crois' (ID: 65485)
  Prédit: ' suppose'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' suppose' → logprob: -0.9101210832595825
    2. ' pense' → logprob: -1.6601210832595825
    3. 'supp' → logprob: -1.7851210832595825
    4. ')' → logprob: -2.535120964050293
    5. 's' → logprob: -3.410120964050293
    6. 'n' → logprob: -3.535120964050293
    7. 'm' → logprob: -4.785120964050293
    8. 'e' → logprob: -4.910120964050293
    9. 'continue' → logprob: -4.910120964050293
    10. 'veux' → logprob: -5.035120964050293

Token 70: '?)
' (ID: 90794)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ')' → logprob: -0.0010450744302943349
    2. 'else' → logprob: -7.876045227050781
    3. '<|end|>' → logprob: -7.876045227050781
    4. ' )' → logprob: -9.126045227050781
    5. ')
' → logprob: -9.501045227050781
    6. ' else' → logprob: -10.376045227050781
    7. '```' → logprob: -10.501045227050781
    8. '`)' → logprob: -11.501045227050781
    9. '')' → logprob: -12.376045227050781
    10. '<|end|>' → logprob: -12.501045227050781

Token 71: 'else' (ID: 2807)
  Prédit: 'else'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'else' → logprob: -0.05573558062314987
    2. ' else' → logprob: -3.4307355880737305
    3. '<|end|>' → logprob: -4.1807355880737305
    4. 'elif' → logprob: -5.4307355880737305
    5. '```' → logprob: -6.8057355880737305
    6. '<|end|>' → logprob: -7.9307355880737305
    7. ')' → logprob: -7.9307355880737305
    8. ' elif' → logprob: -10.05573558807373
    9. 'endif' → logprob: -10.18073558807373
    10. '
' → logprob: -10.43073558807373

Token 72: ':
' (ID: 734)
  Prédit: ':'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ':' → logprob: -0.0003927808138541877
    2. ':
' → logprob: -7.875392913818359
    3. ' :' → logprob: -11.75039291381836
    4. '   ' → logprob: -12.37539291381836
    5. ':

' → logprob: -15.62539291381836
    6. ' :
' → logprob: -15.87539291381836
    7. ':
' → logprob: -16.12539291381836
    8. '```' → logprob: -17.50039291381836
    9. ':return' → logprob: -18.12539291381836
    10. ':def' → logprob: -18.12539291381836

Token 73: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.010852325707674026
    2. ':' → logprob: -4.635852336883545
    3. 'print' → logprob: -7.510852336883545
    4. ' print' → logprob: -7.885852336883545
    5. ':
' → logprob: -9.260851860046387
    6. '       ' → logprob: -10.885851860046387
    7. '    
' → logprob: -11.260851860046387
    8. '  ' → logprob: -11.385851860046387
    9. ' ' → logprob: -11.510851860046387
    10. 'A' → logprob: -12.385851860046387

Token 74: ' print' (ID: 2123)
  Prédit: 'print'
  Correct (stricte): False
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'print' (adapté à ' print') → logprob: -0.18264752626419067
    2. ' print' → logprob: -2.057647466659546
    3. '   ' → logprob: -3.307647466659546
    4. ':' → logprob: -6.057647705078125
    5. ' ' → logprob: -9.682647705078125
    6. '	print' → logprob: -9.932647705078125
    7. 'B' → logprob: -10.307647705078125
    8. ':
' → logprob: -10.682647705078125
    9. '    ' → logprob: -11.057647705078125
    10. '  ' → logprob: -11.432647705078125

Token 75: '(A' (ID: 10706)
  Prédit: '(B'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(B' → logprob: -0.2259155660867691
    2. '(' → logprob: -1.725915551185608
    3. '(A' → logprob: -3.7259156703948975
    4. '((' → logprob: -9.600915908813477
    5. '()' → logprob: -10.850915908813477
    6. '('' → logprob: -11.225915908813477
    7. '("' → logprob: -12.225915908813477
    8. '(max' → logprob: -13.350915908813477
    9. '(b' → logprob: -13.600915908813477
    10. '(a' → logprob: -14.225915908813477

Token 76: ')' (ID: 8)
  Prédit: ')'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')' → logprob: -0.0397261381149292
    2. '+' → logprob: -3.4147262573242188
    3. '-' → logprob: -5.289726257324219
    4. '+B' → logprob: -7.664726257324219
    5. ' )' → logprob: -8.164726257324219
    6. ' +' → logprob: -8.914726257324219
    7. '-B' → logprob: -10.039726257324219
    8. '*' → logprob: -10.789726257324219
    9. '+)' → logprob: -11.164726257324219
    10. ' -' → logprob: -11.414726257324219

Token 77: ' ' (ID: 220)
  Prédit: ''
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False

Token 78: ' #' (ID: 1069)
  Prédit: ''
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False

Token 79: ' sinon' (ID: 52915)
  Prédit: ''
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False

Token 80: ' juste' (ID: 31553)
  Prédit: ''
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False

Token 81: ' afficher' (ID: 146524)
  Prédit: ''
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False

Token 82: ' A' (ID: 355)
  Prédit: '(A'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '(A' → logprob: -1.3757599592208862
    2. '(' → logprob: -1.6257599592208862
    3. '<|end|>' → logprob: -1.7507599592208862
    4. ')' → logprob: -1.8757599592208862
    5. 'A' → logprob: -3.000760078430176
    6. ' ' → logprob: -3.250760078430176
    7. '```' → logprob: -3.375760078430176
    8. '(B' → logprob: -3.625760078430176
    9. '\n' → logprob: -4.000760078430176
    10. '\' → logprob: -4.250760078430176

Token 83: '

' (ID: 279)
  Prédit: ''
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False

Token 84: '#' (ID: 2)
  Prédit: ''
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False

Token 85: ' j' (ID: 441)
  Prédit: ''
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False

Token 86: ''espère' (ID: 116557)
  Prédit: 'e'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'e' → logprob: -0.17933499813079834
    2. 'uste' → logprob: -1.9293349981307983
    3. 'ust' → logprob: -4.179335117340088
    4. ''' → logprob: -6.804335117340088
    5. ''ai' → logprob: -7.554335117340088
    6. ''espère' → logprob: -8.17933464050293
    7. '#' → logprob: -8.42933464050293
    8. ''aime' → logprob: -8.42933464050293
    9. ''aj' → logprob: -8.42933464050293
    10. 'eux' → logprob: -9.05433464050293

Token 87: ' que' (ID: 661)
  Prédit: ''
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False

Token 88: ' ça' (ID: 13590)
  Prédit: 'c'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'c' → logprob: -1.1885788440704346
    2. 'cela' → logprob: -1.3135788440704346
    3. ' ça' → logprob: -1.4385788440704346
    4. 'ça' → logprob: -2.8135788440704346
    5. 'ce' → logprob: -3.1885788440704346
    6. ' ce' → logprob: -3.9385788440704346
    7. ' c' → logprob: -4.1885786056518555
    8. 'tu' → logprob: -4.1885786056518555
    9. ' cela' → logprob: -4.3135786056518555
    10. 'tout' → logprob: -5.1885786056518555

Token 89: ' fait' (ID: 7473)
  Prédit: ''
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False

Token 90: ' ce' (ID: 2357)
  Prédit: ''
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False

Token 91: ' que' (ID: 661)
  Prédit: 'que'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'que' → logprob: -0.7783822417259216
    2. ' que' → logprob: -0.9033822417259216
    3. ' qu' → logprob: -2.4033823013305664
    4. 'qui' → logprob: -4.153382301330566
    5. 'qu' → logprob: -4.278382301330566
    6. 'le' → logprob: -5.778382301330566
    7. 'quilo' → logprob: -5.778382301330566
    8. ' ' → logprob: -6.153382301330566
    9. 'l' → logprob: -7.028382301330566
    10. 'what' → logprob: -7.153382301330566

Token 92: ' ça' (ID: 13590)
  Prédit: 'l'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'l' → logprob: -0.6076830625534058
    2. 'ce' → logprob: -1.3576830625534058
    3. 'que' → logprob: -2.6076831817626953
    4. 'qu' → logprob: -3.2326831817626953
    5. 'tu' → logprob: -3.4826831817626953
    6. ' ce' → logprob: -4.357683181762695
    7. 'vous' → logprob: -4.482683181762695
    8. 'le' → logprob: -5.232683181762695
    9. ' l' → logprob: -5.482683181762695
    10. 'qui' → logprob: -5.732683181762695

Token 93: ' doit' (ID: 21822)
  Prédit: 'qu'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'qu' → logprob: -1.3692998886108398
    2. 'f' → logprob: -1.4942998886108398
    3. 'que' → logprob: -1.9942998886108398
    4. 'fonction' → logprob: -2.61929988861084
    5. 'do' → logprob: -2.99429988861084
    6. 'semble' → logprob: -3.11929988861084
    7. 'va' → logprob: -3.36929988861084
    8. 'mar' → logprob: -3.49429988861084
    9. 'ra' → logprob: -4.24429988861084
    10. 'veux' → logprob: -4.36929988861084

Token 94: ' faire' (ID: 8119)
  Prédit: ''
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False

Token 95: '...' (ID: 1008)
  Prédit: ''
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False


RÉSUMÉ:
--------------------------------------------------------------------------------
Total des tokens analysés: 93
Tokens correctement prédits (1ère position, stricte): 12
Tokens correctement prédits (1ère position, avec adaptation): 13
Tokens correctement prédits (top 10): 42
Précision stricte (1ère position): 12.90%
Précision adaptée (1ère position): 13.98%
Précision (top 10): 45.16%
================================================================================
