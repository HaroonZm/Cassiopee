================================================================================
ANALYSE DE PRÉDICTION TOKEN PAR TOKEN (BATCH API)
Date: 2025-06-04 20:04:34
Modèle de tokenisation: gpt-4o-mini
================================================================================

SCRIPT ANALYSÉ:
--------------------------------------------------------------------------------
# Ce programme fait un truc simple, je crois...
chaine = input()   # prendre l'entrée de l'utilisateur

if chaine == "A":
    # je suppose qu'on doit afficher T
    print("T")
if chaine == "T":
    print("A") # inverse de A ?
if chaine=="C":
    print("G") # ça doit être vrai pour C aussi
if chaine == 'G':
    print("C") # je crois que c'est tout

# Pas besoin de else à mon avis ici...
--------------------------------------------------------------------------------

RÉSULTATS D'ANALYSE TOKEN PAR TOKEN:
--------------------------------------------------------------------------------
Token 0: '#' (ID: 2)
  → Token d'amorce (pas de prédiction)

Token 1: ' Ce' (ID: 14228)
  → Token d'amorce (pas de prédiction)

Token 2: ' programme' (ID: 18190)
  → Token d'amorce (pas de prédiction)

Token 3: ' fait' (ID: 7473)
  Prédit: ' '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' ' → logprob: -0.059656936675310135
    2. '_' → logprob: -3.059656858444214
    3. ':' → logprob: -5.559657096862793
    4. 's' → logprob: -6.559657096862793
    5. '```' → logprob: -6.809657096862793
    6. '#' → logprob: -7.184657096862793
    7. 'd' → logprob: -7.559657096862793
    8. '`' → logprob: -7.934657096862793
    9. ' :' → logprob: -8.184657096862793
    10. ''' → logprob: -8.184657096862793

Token 4: ' un' (ID: 537)
  Prédit: ' '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' ' → logprob: -0.004708515014499426
    2. 'un' → logprob: -6.879708290100098
    3. '```' → logprob: -7.379708290100098
    4. ' ' → logprob: -7.629708290100098
    5. ' un' → logprob: -8.004708290100098
    6. ' #' → logprob: -8.254708290100098
    7. 'r' → logprob: -8.254708290100098
    8. '   ' → logprob: -8.379708290100098
    9. '  ' → logprob: -8.504708290100098
    10. 'a' → logprob: -8.504708290100098

Token 5: ' truc' (ID: 58342)
  Prédit: 'calcul'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'calcul' → logprob: -1.1446198225021362
    2. 'programme' → logprob: -1.6446198225021362
    3. ' résumé' → logprob: -2.769619941711426
    4. 'trait' → logprob: -3.519619941711426
    5. ' commentaire' → logprob: -3.519619941711426
    6. 'simple' → logprob: -3.519619941711426
    7. '#' → logprob: -3.769619941711426
    8. ' programme' → logprob: -3.769619941711426
    9. 'jeu' → logprob: -3.769619941711426
    10. 'import' → logprob: -3.894619941711426

Token 6: ' simple' (ID: 4705)
  Prédit: '\n'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '\n' → logprob: -0.1752404272556305
    2. '\' → logprob: -2.6752405166625977
    3. '#' → logprob: -3.0502405166625977
    4. '
' → logprob: -3.9252405166625977
    5. '  
' → logprob: -4.925240516662598
    6. ' 
' → logprob: -5.050240516662598
    7. '```' → logprob: -5.300240516662598
    8. ' ' → logprob: -6.300240516662598
    9. '' → logprob: -7.425240516662598
    10. '<|end|>' → logprob: -7.800240516662598

Token 7: ',' (ID: 11)
  Prédit: '\n'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '\n' → logprob: -0.07981421053409576
    2. '\' → logprob: -2.9548141956329346
    3. '#' → logprob: -4.329814434051514
    4. '
' → logprob: -5.704814434051514
    5. '```' → logprob: -6.079814434051514
    6. '  
' → logprob: -6.329814434051514
    7. '' → logprob: -7.079814434051514
    8. ' 
' → logprob: -7.204814434051514
    9. ':' → logprob: -7.329814434051514
    10. 'n' → logprob: -8.079813957214355

Token 8: ' je' (ID: 1264)
  Prédit: ' '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' ' → logprob: -0.4016365110874176
    2. '\n' → logprob: -2.1516366004943848
    3. '\' → logprob: -2.6516366004943848
    4. '```' → logprob: -3.5266366004943848
    5. '#' → logprob: -3.6516366004943848
    6. ' \' → logprob: -4.276636600494385
    7. ':' → logprob: -4.526636600494385
    8. 'e' → logprob: -4.526636600494385
    9. 's' → logprob: -4.776636600494385
    10. ' :' → logprob: -5.026636600494385

Token 9: ' crois' (ID: 65485)
  Prédit: ' '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' ' → logprob: -0.31840839982032776
    2. 's' → logprob: -2.068408489227295
    3. ' fais' → logprob: -3.068408489227295
    4. ' f' → logprob: -3.193408489227295
    5. 'f' → logprob: -4.318408489227295
    6. ' veux' → logprob: -4.568408489227295
    7. 'space' → logprob: -5.443408489227295
    8. ' vais' → logprob: -5.443408489227295
    9. '_' → logprob: -5.693408489227295
    10. 'n' → logprob: -6.068408489227295

Token 10: '...
' (ID: 4908)
  Prédit: '#'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '#' → logprob: -0.9531887769699097
    2. '\' → logprob: -1.2031887769699097
    3. '\n' → logprob: -1.7031887769699097
    4. ':' → logprob: -2.828188896179199
    5. '.' → logprob: -3.453188896179199
    6. '_' → logprob: -5.078188896179199
    7. '```' → logprob: -5.078188896179199
    8. ' ' → logprob: -5.453188896179199
    9. '`' → logprob: -5.578188896179199
    10. '' → logprob: -6.078188896179199

Token 11: 'chaine' (ID: 68916)
  Prédit: '\'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '\' → logprob: -0.5428351163864136
    2. '\n' → logprob: -1.4178351163864136
    3. '#' → logprob: -2.042835235595703
    4. '```' → logprob: -4.667835235595703
    5. '.' → logprob: -4.792835235595703
    6. ' ' → logprob: -4.917835235595703
    7. ':' → logprob: -5.167835235595703
    8. '`' → logprob: -5.917835235595703
    9. 'print' → logprob: -6.417835235595703
    10. ' \' → logprob: -6.667835235595703

Token 12: ' =' (ID: 314)
  Prédit: '['
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '[' → logprob: -0.4307654798030853
    2. ' =' → logprob: -1.5557655096054077
    3. '.' → logprob: -2.680765390396118
    4. '_' → logprob: -3.430765390396118
    5. '=' → logprob: -3.930765390396118
    6. ' ' → logprob: -4.680765628814697
    7. 's' → logprob: -5.680765628814697
    8. '[:]' → logprob: -5.805765628814697
    9. '[]' → logprob: -6.930765628814697
    10. ')' → logprob: -8.680765151977539

Token 13: ' input' (ID: 3422)
  Prédit: '"'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '"' → logprob: -0.13388799130916595
    2. ' "' → logprob: -2.133888006210327
    3. '""' → logprob: -5.633887767791748
    4. ' ""' → logprob: -6.383887767791748
    5. ''' → logprob: -7.008887767791748
    6. ' ' → logprob: -7.508887767791748
    7. ' '' → logprob: -9.258888244628906
    8. ' ''' → logprob: -10.633888244628906
    9. '''' → logprob: -10.633888244628906
    10. '"user' → logprob: -10.758888244628906

Token 14: '()' (ID: 416)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(' → logprob: -0.00012701898231171072
    2. '('' → logprob: -9.625126838684082
    3. '("("' → logprob: -10.000126838684082
    4. '()' → logprob: -12.000126838684082
    5. '("")' → logprob: -13.000126838684082
    6. '("' → logprob: -13.375126838684082
    7. '(
' → logprob: -13.500126838684082
    8. '(`' → logprob: -13.750126838684082
    9. ' (' → logprob: -14.250126838684082
    10. '(

' → logprob: -14.500126838684082

Token 15: '  ' (ID: 256)
  Prédit: '.'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '.' → logprob: -0.009757505729794502
    2. '.strip' → logprob: -5.0097575187683105
    3. '.upper' → logprob: -7.3847575187683105
    4. '.lower' → logprob: -7.3847575187683105
    5. '+' → logprob: -7.6347575187683105
    6. '.split' → logprob: -8.259757041931152
    7. ' ' → logprob: -8.509757041931152
    8. '.capitalize' → logprob: -9.134757041931152
    9. 'print' → logprob: -9.259757041931152
    10. 's' → logprob: -9.384757041931152

Token 16: ' #' (ID: 1069)
  Prédit: '.'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '.' → logprob: -0.015488841570913792
    2. '+' → logprob: -5.265488624572754
    3. '.strip' → logprob: -5.390488624572754
    4. '.lower' → logprob: -6.765488624572754
    5. ' ' → logprob: -7.015488624572754
    6. '.upper' → logprob: -7.265488624572754
    7. '.split' → logprob: -8.015488624572754
    8. 's' → logprob: -8.140488624572754
    9. ',' → logprob: -8.140488624572754
    10. ')' → logprob: -8.390488624572754

Token 17: ' prendre' (ID: 24257)
  Prédit: ' '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' ' → logprob: -0.02339024469256401
    2. ' "' → logprob: -4.773390293121338
    3. '.' → logprob: -5.398390293121338
    4. '"' → logprob: -6.148390293121338
    5. ' .' → logprob: -6.148390293121338
    6. '.strip' → logprob: -6.273390293121338
    7. 'print' → logprob: -7.523390293121338
    8. '  ' → logprob: -7.648390293121338
    9. ')' → logprob: -8.27338981628418
    10. ' ""' → logprob: -8.39838981628418

Token 18: ' l' (ID: 305)
  Prédit: ' une'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' une' → logprob: -0.2480560690164566
    2. 'l' → logprob: -2.623056173324585
    3. 'une' → logprob: -2.998056173324585
    4. ' l' → logprob: -3.373056173324585
    5. ' ' → logprob: -3.623056173324585
    6. ' la' → logprob: -4.123055934906006
    7. ' un' → logprob: -4.998055934906006
    8. '_' → logprob: -5.873055934906006
    9. ' user' → logprob: -6.623055934906006
    10. '  ' → logprob: -6.623055934906006

Token 19: ''entrée' (ID: 115820)
  Prédit: ''entrée'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ''entrée' → logprob: -0.20280900597572327
    2. 'a' → logprob: -2.3278090953826904
    3. 'e' → logprob: -3.5778090953826904
    4. ''' → logprob: -3.9528090953826904
    5. ''utilisateur' → logprob: -4.077808856964111
    6. ''ent' → logprob: -4.702808856964111
    7. 'entrée' → logprob: -4.952808856964111
    8. 'input' → logprob: -6.327808856964111
    9. 'u' → logprob: -6.952808856964111
    10. ' input' → logprob: -7.452808856964111

Token 20: ' de' (ID: 334)
  Prédit: '.strip'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '.strip' → logprob: -1.2857167720794678
    2. '.' → logprob: -1.5357167720794678
    3. '.lower' → logprob: -1.7857167720794678
    4. '.upper' → logprob: -2.0357167720794678
    5. '.split' → logprob: -2.9107167720794678
    6. '.reverse' → logprob: -3.4107167720794678
    7. '[::-' → logprob: -3.4107167720794678
    8. 'print' → logprob: -3.7857167720794678
    9. '.replace' → logprob: -4.785717010498047
    10. 's' → logprob: -4.785717010498047

Token 21: ' l' (ID: 305)
  Prédit: 'l'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'l' → logprob: -0.007283357437700033
    2. ' l' → logprob: -5.0072832107543945
    3. '	l' → logprob: -8.382283210754395
    4. ''utilisateur' → logprob: -8.757283210754395
    5. ' ' → logprob: -9.882283210754395
    6. 'user' → logprob: -10.007283210754395
    7. 'util' → logprob: -10.132283210754395
    8. ' utilisateur' → logprob: -12.132283210754395
    9. '   ' → logprob: -12.382283210754395
    10. '_l' → logprob: -12.507283210754395

Token 22: ''utilisateur' (ID: 140803)
  Prédit: ''utilisateur'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ''utilisateur' → logprob: -0.004232966806739569
    2. 'util' → logprob: -6.254232883453369
    3. ''' → logprob: -7.004232883453369
    4. ''util' → logprob: -7.629232883453369
    5. 'u' → logprob: -8.254233360290527
    6. '’utilisateur' → logprob: -8.254233360290527
    7. 'a' → logprob: -8.879233360290527
    8. ''us' → logprob: -9.129233360290527
    9. ' utilisateur' → logprob: -10.004233360290527
    10. ''user' → logprob: -10.504233360290527

Token 23: '

' (ID: 279)
  Prédit: 'print'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'print' → logprob: -0.8040673732757568
    2. '.' → logprob: -1.1790673732757568
    3. 'if' → logprob: -2.804067373275757
    4. '.strip' → logprob: -2.804067373275757
    5. '.lower' → logprob: -3.429067373275757
    6. '.upper' → logprob: -3.679067373275757
    7. '.split' → logprob: -4.429067611694336
    8. '[::-' → logprob: -4.804067611694336
    9. '.reverse' → logprob: -5.054067611694336
    10. '.replace' → logprob: -5.179067611694336

Token 24: 'if' (ID: 366)
  Prédit: 'print'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'print' → logprob: -0.43726062774658203
    2. 'if' → logprob: -1.062260627746582
    3. ' if' → logprob: -5.437260627746582
    4. 'result' → logprob: -6.437260627746582
    5. '#' → logprob: -7.187260627746582
    6. '.' → logprob: -7.437260627746582
    7. 's' → logprob: -8.812260627746582
    8. 'for' → logprob: -8.937260627746582
    9. 'prin' → logprob: -8.937260627746582
    10. 'i' → logprob: -9.187260627746582

Token 25: ' chaine' (ID: 192094)
  Prédit: ' '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' ' → logprob: -0.11663302779197693
    2. ' chaine' → logprob: -2.2416329383850098
    3. ' len' → logprob: -6.49163293838501
    4. 'chaine' → logprob: -6.86663293838501
    5. '  ' → logprob: -7.36663293838501
    6. ' not' → logprob: -8.491633415222168
    7. ' ' → logprob: -8.616633415222168
    8. ' chaîne' → logprob: -9.241633415222168
    9. ' espace' → logprob: -10.241633415222168
    10. ' isinstance' → logprob: -10.866633415222168

Token 26: ' ==' (ID: 951)
  Prédit: ' =='
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' ==' → logprob: -0.16536954045295715
    2. '.' → logprob: -2.5403695106506348
    3. ' .' → logprob: -3.4153695106506348
    4. '.strip' → logprob: -4.040369510650635
    5. '.startswith' → logprob: -4.415369510650635
    6. '==' → logprob: -5.540369510650635
    7. ' !=' → logprob: -5.790369510650635
    8. ' ' → logprob: -6.165369510650635
    9. '.endswith' → logprob: -7.915369510650635
    10. '[' → logprob: -8.165369987487793

Token 27: ' "' (ID: 392)
  Prédit: '"'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '"' → logprob: -0.0698317140340805
    2. ' "' → logprob: -2.819831609725952
    3. '""' → logprob: -5.444831848144531
    4. ''' → logprob: -6.444831848144531
    5. ' ""' → logprob: -6.444831848144531
    6. '"user' → logprob: -9.319831848144531
    7. ' '' → logprob: -9.444831848144531
    8. '"a' → logprob: -9.819831848144531
    9. '''' → logprob: -10.444831848144531
    10. '"":' → logprob: -11.069831848144531

Token 28: 'A' (ID: 32)
  Prédit: 'hello'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'hello' → logprob: -0.7652620673179626
    2. 'bonjour' → logprob: -0.8902620673179626
    3. '"' → logprob: -3.2652621269226074
    4. 'Bonjour' → logprob: -3.5152621269226074
    5. 'sal' → logprob: -3.7652621269226074
    6. 'Hello' → logprob: -4.390262126922607
    7. 'oui' → logprob: -5.640262126922607
    8. 'abc' → logprob: -5.765262126922607
    9. 'ping' → logprob: -6.140262126922607
    10. 'chat' → logprob: -6.390262126922607

Token 29: '":
' (ID: 9213)
  Prédit: '":'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '":' → logprob: -0.47200632095336914
    2. 'BC' → logprob: -1.3470063209533691
    3. '"' → logprob: -2.972006320953369
    4. 'bc' → logprob: -3.222006320953369
    5. '+":' → logprob: -4.972006320953369
    6. 'B' → logprob: -5.472006320953369
    7. ' ":' → logprob: -5.722006320953369
    8. '"B' → logprob: -5.972006320953369
    9. 'pp' → logprob: -6.972006320953369
    10. 'llo' → logprob: -7.347006320953369

Token 30: '   ' (ID: 271)
  Prédit: ' print'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' print' → logprob: -0.4247477352619171
    2. '   ' → logprob: -1.9247477054595947
    3. ':' → logprob: -2.2997477054595947
    4. ' :' → logprob: -3.0497477054595947
    5. 'print' → logprob: -3.1747477054595947
    6. ' ' → logprob: -5.174747943878174
    7. '    ' → logprob: -6.549747943878174
    8. '\' → logprob: -7.174747943878174
    9. '    
' → logprob: -7.799747943878174
    10. ' :
' → logprob: -7.924747943878174

Token 31: ' #' (ID: 1069)
  Prédit: ' print'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' print' → logprob: -0.01819489523768425
    2. 'print' → logprob: -4.018194675445557
    3. '   ' → logprob: -10.143195152282715
    4. ' pass' → logprob: -13.268195152282715
    5. '	print' → logprob: -13.393195152282715
    6. '    ' → logprob: -13.893195152282715
    7. ' ' → logprob: -14.643195152282715
    8. ' prin' → logprob: -14.643195152282715
    9. 'prin' → logprob: -16.5181941986084
    10. '  ' → logprob: -16.7681941986084

Token 32: ' je' (ID: 1264)
  Prédit: ' print'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' print' → logprob: -0.09006127715110779
    2. 'print' → logprob: -2.4650611877441406
    3. '   ' → logprob: -7.840061187744141
    4. ' pass' → logprob: -7.840061187744141
    5. ' ' → logprob: -9.46506118774414
    6. ' afficher' → logprob: -9.84006118774414
    7. ' prin' → logprob: -10.34006118774414
    8. 'pass' → logprob: -10.46506118774414
    9. '  ' → logprob: -10.84006118774414
    10. '	print' → logprob: -11.09006118774414

Token 33: ' suppose' (ID: 35968)
  Prédit: 'm'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'm' → logprob: -0.5750330686569214
    2. '   ' → logprob: -2.200033187866211
    3. 'ff' → logprob: -2.450033187866211
    4. 'print' → logprob: -3.075033187866211
    5. ' print' → logprob: -3.325033187866211
    6. 'l' → logprob: -3.950033187866211
    7. 'i' → logprob: -4.200033187866211
    8. ' ' → logprob: -4.200033187866211
    9. 'f' → logprob: -4.450033187866211
    10. 'pp' → logprob: -4.700033187866211

Token 34: ' qu' (ID: 474)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.9110263586044312
    2. '    ' → logprob: -1.0360263586044312
    3. ' print' → logprob: -1.6610263586044312
    4. 'print' → logprob: -3.4110264778137207
    5. ' ' → logprob: -4.911026477813721
    6. ':' → logprob: -5.036026477813721
    7. ' :' → logprob: -6.036026477813721
    8. '    
' → logprob: -7.286026477813721
    9. 'n' → logprob: -7.411026477813721
    10. '       ' → logprob: -7.786026477813721

Token 35: ''on' (ID: 25812)
  Prédit: 'e'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'e' → logprob: -0.025200413540005684
    2. ''' → logprob: -4.400200366973877
    3. '   ' → logprob: -5.400200366973877
    4. ''il' → logprob: -5.525200366973877
    5. ''on' → logprob: -6.275200366973877
    6. ' e' → logprob: -6.900200366973877
    7. ' ' → logprob: -8.525200843811035
    8. '  ' → logprob: -8.775200843811035
    9. 'i' → logprob: -9.025200843811035
    10. 'u' → logprob: -9.150200843811035

Token 36: ' doit' (ID: 21822)
  Prédit: ' print'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' print' → logprob: -0.9912219047546387
    2. ' veut' → logprob: -1.1162219047546387
    3. ' va' → logprob: -1.6162219047546387
    4. ' a' → logprob: -3.7412219047546387
    5. ' doit' → logprob: -3.8662219047546387
    6. ' affiche' → logprob: -4.491221904754639
    7. 'print' → logprob: -4.741221904754639
    8. ' fait' → logprob: -5.241221904754639
    9. ' est' → logprob: -5.366221904754639
    10. 'a' → logprob: -5.866221904754639

Token 37: ' afficher' (ID: 146524)
  Prédit: ' afficher'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' afficher' → logprob: -0.4354473650455475
    2. ' print' → logprob: -1.310447335243225
    3. ' faire' → logprob: -3.6854474544525146
    4. 'print' → logprob: -4.1854472160339355
    5. ' impr' → logprob: -4.5604472160339355
    6. '   ' → logprob: -4.5604472160339355
    7. 'aff' → logprob: -5.0604472160339355
    8. ' ' → logprob: -5.4354472160339355
    9. ' continuer' → logprob: -6.1854472160339355
    10. '  ' → logprob: -6.8104472160339355

Token 38: ' T' (ID: 353)
  Prédit: '"'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '"' → logprob: -0.5329453349113464
    2. ' "' → logprob: -1.0329453945159912
    3. ' ' → logprob: -3.407945394515991
    4. '   ' → logprob: -4.657945156097412
    5. ' print' → logprob: -5.907945156097412
    6. '  ' → logprob: -6.032945156097412
    7. ' un' → logprob: -6.282945156097412
    8. ' la' → logprob: -6.407945156097412
    9. ' '' → logprob: -7.032945156097412
    10. ' something' → logprob: -7.157945156097412

Token 39: '
' (ID: 198)
  Prédit: 'r'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'r' → logprob: -0.022241918370127678
    2. 'print' → logprob: -4.522242069244385
    3. 'ure' → logprob: -6.397242069244385
    4. 'u' → logprob: -6.647242069244385
    5. '"' → logprob: -6.897242069244385
    6. ':' → logprob: -7.147242069244385
    7. 'rans' → logprob: -7.147242069244385
    8. 'o' → logprob: -7.272242069244385
    9. ' print' → logprob: -7.272242069244385
    10. 'R' → logprob: -7.647242069244385

Token 40: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.06354023516178131
    2. ':' → logprob: -3.06354022026062
    3. 'print' → logprob: -4.438540458679199
    4. ' print' → logprob: -6.813540458679199
    5. '       ' → logprob: -7.063540458679199
    6. ' :' → logprob: -7.688540458679199
    7. '    ' → logprob: -8.4385404586792
    8. '  ' → logprob: -8.5635404586792
    9. ' ' → logprob: -9.3135404586792
    10. '     ' → logprob: -11.0635404586792

Token 41: ' print' (ID: 2123)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.06638485938310623
    2. 'print' (adapté à ' print') → logprob: -3.066384792327881
    3. ' print' → logprob: -4.066384792327881
    4. '       ' → logprob: -8.191385269165039
    5. '    ' → logprob: -8.691385269165039
    6. '	print' → logprob: -11.441385269165039
    7. 'T' → logprob: -11.816385269165039
    8. '   ' → logprob: -11.941385269165039
    9. ' ' → logprob: -12.066385269165039
    10. ' T' → logprob: -12.191385269165039

Token 42: '("' (ID: 568)
  Prédit: '("'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '("' → logprob: -0.31424060463905334
    2. '(' → logprob: -1.314240574836731
    3. '('' → logprob: -6.939240455627441
    4. '"' → logprob: -13.189240455627441
    5. '()' → logprob: -13.439240455627441
    6. '(T' → logprob: -13.564240455627441
    7. '("("' → logprob: -13.564240455627441
    8. '("")' → logprob: -13.939240455627441
    9. '(
' → logprob: -14.439240455627441
    10. ' ("' → logprob: -14.689240455627441

Token 43: 'T' (ID: 51)
  Prédit: 'T'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'T' → logprob: -1.0325924449716695e-05
    2. ' T' → logprob: -11.50001049041748
    3. 't' → logprob: -16.875009536743164
    4. '"T' → logprob: -17.125009536743164
    5. '   ' → logprob: -17.250009536743164
    6. 'A' → logprob: -17.500009536743164
    7. '_T' → logprob: -18.125009536743164
    8. '.T' → logprob: -18.125009536743164
    9. '```' → logprob: -18.250009536743164
    10. 'Т' → logprob: -18.375009536743164

Token 44: '")
' (ID: 1896)
  Prédit: '")'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '")' → logprob: -1.9027791495318525e-05
    2. '"' → logprob: -11.875019073486328
    3. '")
' → logprob: -12.125019073486328
    4. ')' → logprob: -12.750019073486328
    5. ')")' → logprob: -13.375019073486328
    6. ' ")' → logprob: -14.000019073486328
    7. '!")' → logprob: -15.000019073486328
    8. 'e' → logprob: -15.125019073486328
    9. '");' → logprob: -16.125019073486328
    10. 'T' → logprob: -16.500019073486328

Token 45: 'if' (ID: 366)
  Prédit: 'else'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'else' → logprob: -0.35562747716903687
    2. 'elif' → logprob: -1.2306275367736816
    3. ' else' → logprob: -5.980627536773682
    4. 'e' → logprob: -6.105627536773682
    5. '<|end|>' → logprob: -6.855627536773682
    6. ' elif' → logprob: -8.105627059936523
    7. '```' → logprob: -8.730627059936523
    8. '
' → logprob: -8.980627059936523
    9. '\n' → logprob: -8.980627059936523
    10. ')' → logprob: -9.105627059936523

Token 46: ' chaine' (ID: 192094)
  Prédit: ' chaine'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' chaine' → logprob: -0.07859186083078384
    2. ' ' → logprob: -3.078591823577881
    3. 'chaine' → logprob: -3.703591823577881
    4. ' chaîne' → logprob: -6.578591823577881
    5. ' chain' → logprob: -6.828591823577881
    6. ' not' → logprob: -6.953591823577881
    7. '  ' → logprob: -7.453591823577881
    8. ' ' → logprob: -8.328592300415039
    9. '   ' → logprob: -9.203592300415039
    10. ' "' → logprob: -9.328592300415039

Token 47: ' ==' (ID: 951)
  Prédit: ' =='
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' ==' → logprob: -0.005590176209807396
    2. '==' → logprob: -5.255589962005615
    3. ' !=' → logprob: -8.755590438842773
    4. ' ' → logprob: -8.755590438842773
    5. ' =="' → logprob: -11.005590438842773
    6. ' elif' → logprob: -11.380590438842773
    7. 'elif' → logprob: -12.130590438842773
    8. ' else' → logprob: -14.005590438842773
    9. ' <=' → logprob: -14.255590438842773
    10. ' ' → logprob: -14.255590438842773

Token 48: ' "' (ID: 392)
  Prédit: ' "'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' "' → logprob: -0.3012590706348419
    2. '"' → logprob: -1.5512590408325195
    3. '"B' → logprob: -3.0512590408325195
    4. ' ' → logprob: -8.05125904083252
    5. '"A' → logprob: -8.42625904083252
    6. '"T' → logprob: -9.17625904083252
    7. ' B' → logprob: -9.30125904083252
    8. 'B' → logprob: -10.80125904083252
    9. ''' → logprob: -10.92625904083252
    10. '"a' → logprob: -11.80125904083252

Token 49: 'T' (ID: 51)
  Prédit: 'B'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'B' → logprob: -0.010523855686187744
    2. 'C' → logprob: -5.635523796081543
    3. ' B' → logprob: -5.885523796081543
    4. 'T' → logprob: -6.385523796081543
    5. '"' → logprob: -7.510523796081543
    6. '"B' → logprob: -7.635523796081543
    7. 'G' → logprob: -7.760523796081543
    8. 'A' → logprob: -8.510523796081543
    9. 'a' → logprob: -9.385523796081543
    10. ' ' → logprob: -9.760523796081543

Token 50: '":
' (ID: 9213)
  Prédit: '"):
'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '"):
' → logprob: -0.2076570838689804
    2. '"' → logprob: -2.4576570987701416
    3. '"):' → logprob: -2.8326570987701416
    4. '":' → logprob: -3.5826570987701416
    5. '")' → logprob: -4.8326568603515625
    6. '":
' → logprob: -5.7076568603515625
    7. ':' → logprob: -5.8326568603515625
    8. ':
' → logprob: -8.457656860351562
    9. '"):
' → logprob: -8.582656860351562
    10. ' "' → logprob: -8.957656860351562

Token 51: '   ' (ID: 271)
  Prédit: ':'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ':' → logprob: -0.4856022894382477
    2. '   ' → logprob: -0.9856022596359253
    3. ' or' → logprob: -5.360602378845215
    4. ' :' → logprob: -5.735602378845215
    5. ':
' → logprob: -6.110602378845215
    6. 'print' → logprob: -7.610602378845215
    7. 'elif' → logprob: -8.610602378845215
    8. ' print' → logprob: -9.235602378845215
    9. ' :
' → logprob: -9.860602378845215
    10. 'or' → logprob: -9.985602378845215

Token 52: ' print' (ID: 2123)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.3326728641986847
    2. 'print' (adapté à ' print') → logprob: -1.3326728343963623
    3. ' print' → logprob: -4.082673072814941
    4. '    ' → logprob: -6.832673072814941
    5. ' ' → logprob: -7.332673072814941
    6. '  ' → logprob: -8.582673072814941
    7. 'elif' → logprob: -9.332673072814941
    8. '	print' → logprob: -9.707673072814941
    9. '       ' → logprob: -9.832673072814941
    10. ':' → logprob: -10.332673072814941

Token 53: '("' (ID: 568)
  Prédit: '("'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '("' → logprob: -0.004139903001487255
    2. '(' → logprob: -5.5041399002075195
    3. '("("' → logprob: -10.12913990020752
    4. '('' → logprob: -11.37913990020752
    5. '("")' → logprob: -11.75413990020752
    6. '"' → logprob: -14.12913990020752
    7. '()' → logprob: -14.50413990020752
    8. '(">' → logprob: -15.62913990020752
    9. '("="' → logprob: -15.75413990020752
    10. '(A' → logprob: -16.129140853881836

Token 54: 'A' (ID: 32)
  Prédit: 'A'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'A' → logprob: -0.0019193602493032813
    2. 'C' → logprob: -6.626919269561768
    3. '"A' → logprob: -8.126919746398926
    4. 'G' → logprob: -9.751919746398926
    5. 'a' → logprob: -9.751919746398926
    6. '"' → logprob: -10.001919746398926
    7. ' A' → logprob: -10.126919746398926
    8. 'U' → logprob: -10.626919746398926
    9. ''A' → logprob: -11.126919746398926
    10. 'F' → logprob: -12.126919746398926

Token 55: '")' (ID: 1405)
  Prédit: '")'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '")' → logprob: -8.65707261255011e-06
    2. '"' → logprob: -12.625008583068848
    3. '")
' → logprob: -12.875008583068848
    4. ')' → logprob: -13.000008583068848
    5. ')")' → logprob: -14.875008583068848
    6. '”)' → logprob: -18.125009536743164
    7. '}")' → logprob: -18.125009536743164
    8. ' ")' → logprob: -18.125009536743164
    9. '")

' → logprob: -18.375009536743164
    10. '");' → logprob: -18.500009536743164

Token 56: ' #' (ID: 1069)
  Prédit: 'elif'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'elif' → logprob: -0.6284068822860718
    2. '<|end|>' → logprob: -1.1284068822860718
    3. 'else' → logprob: -2.1284070014953613
    4. 'e' → logprob: -5.128407001495361
    5. '```' → logprob: -5.253407001495361
    6. '
' → logprob: -5.378407001495361
    7. '#' → logprob: -5.753407001495361
    8. ' else' → logprob: -6.753407001495361
    9. '\n' → logprob: -6.878407001495361
    10. ' elif' → logprob: -7.253407001495361

Token 57: ' inverse' (ID: 53743)
  Prédit: 'elif'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'elif' → logprob: -0.19831490516662598
    2. 'else' → logprob: -1.948314905166626
    3. '<|end|>' → logprob: -3.448314905166626
    4. '```' → logprob: -6.323314666748047
    5. ' else' → logprob: -6.948314666748047
    6. 'e' → logprob: -7.198314666748047
    7. ' elif' → logprob: -7.448314666748047
    8. 'el' → logprob: -7.948314666748047
    9. '#' → logprob: -8.198314666748047
    10. '
' → logprob: -8.573314666748047

Token 58: ' de' (ID: 334)
  Prédit: ''
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False

Token 59: ' A' (ID: 355)
  Prédit: 'chaine'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'chaine' → logprob: -0.07650141417980194
    2. '"' → logprob: -2.7015013694763184
    3. ' chaine' → logprob: -5.576501369476318
    4. 'cha' → logprob: -7.326501369476318
    5. ' "' → logprob: -7.576501369476318
    6. 'C' → logprob: -7.951501369476318
    7. 'A' → logprob: -8.451501846313477
    8. 'chain' → logprob: -8.451501846313477
    9. 'l' → logprob: -8.951501846313477
    10. 'T' → logprob: -9.076501846313477

Token 60: ' ?
' (ID: 19740)
  Prédit: 'elif'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'elif' → logprob: -0.6044104695320129
    2. 'else' → logprob: -1.2294104099273682
    3. '<|end|>' → logprob: -1.9794104099273682
    4. '```' → logprob: -4.979410648345947
    5. 'if' → logprob: -5.604410648345947
    6. ' else' → logprob: -5.854410648345947
    7. 'e' → logprob: -6.104410648345947
    8. '\n' → logprob: -6.229410648345947
    9. '
' → logprob: -6.354410648345947
    10. ' elif' → logprob: -6.854410648345947

Token 61: 'if' (ID: 366)
  Prédit: 'elif'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'elif' → logprob: -0.2916908264160156
    2. 'else' → logprob: -2.0416908264160156
    3. '<|end|>' → logprob: -2.1666908264160156
    4. '```' → logprob: -5.791690826416016
    5. 'e' → logprob: -6.416690826416016
    6. 'if' → logprob: -6.416690826416016
    7. ' elif' → logprob: -7.666690826416016
    8. ' else' → logprob: -7.666690826416016
    9. '#' → logprob: -8.041690826416016
    10. '
' → logprob: -8.166690826416016

Token 62: ' chaine' (ID: 192094)
  Prédit: ' chaine'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' chaine' → logprob: -0.04128508269786835
    2. 'chaine' → logprob: -3.4162850379943848
    3. ' ' → logprob: -5.166285037994385
    4. ' not' → logprob: -7.416285037994385
    5. ' chaîne' → logprob: -7.666285037994385
    6. '  ' → logprob: -7.916285037994385
    7. ' ' → logprob: -8.041285514831543
    8. ' chain' → logprob: -9.666285514831543
    9. ' __' → logprob: -11.041285514831543
    10. '   ' → logprob: -11.416285514831543

Token 63: '=="' (ID: 24027)
  Prédit: ' =='
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' ==' → logprob: -0.06215926259756088
    2. '==' → logprob: -2.812159299850464
    3. ' ' → logprob: -9.062159538269043
    4. ' =="' → logprob: -11.062159538269043
    5. '=' → logprob: -11.437159538269043
    6. '=="' → logprob: -11.562159538269043
    7. ' =' → logprob: -11.687159538269043
    8. '  ' → logprob: -11.937159538269043
    9. ' !=' → logprob: -12.187159538269043
    10. ' ' → logprob: -12.937159538269043

Token 64: 'C' (ID: 34)
  Prédit: 'G'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'G' → logprob: -0.1808260679244995
    2. 'C' → logprob: -1.8058260679244995
    3. '"' → logprob: -7.555826187133789
    4. 'U' → logprob: -7.930826187133789
    5. '"G' → logprob: -10.180826187133789
    6. '")' → logprob: -10.930826187133789
    7. ' G' → logprob: -11.055826187133789
    8. '-' → logprob: -11.430826187133789
    9. 'N' → logprob: -11.555826187133789
    10. '\n' → logprob: -11.618326187133789

Token 65: '":
' (ID: 9213)
  Prédit: '":'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '":' → logprob: -0.08140899986028671
    2. '"' → logprob: -2.581408977508545
    3. '":
' → logprob: -6.081408977508545
    4. ':' → logprob: -9.081409454345703
    5. ' "' → logprob: -9.706409454345703
    6. ' ":' → logprob: -10.581409454345703
    7. '":
' → logprob: -11.081409454345703
    8. '":"' → logprob: -12.831409454345703
    9. '```' → logprob: -13.081409454345703
    10. '"):' → logprob: -13.581409454345703

Token 66: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.05581821873784065
    2. 'print' → logprob: -3.4308183193206787
    3. ' print' → logprob: -4.1808180809021
    4. '    ' → logprob: -5.9308180809021
    5. '<|end|>' → logprob: -6.6808180809021
    6. '       ' → logprob: -7.4308180809021
    7. ' ' → logprob: -7.4308180809021
    8. '  ' → logprob: -7.4308180809021
    9. '	print' → logprob: -8.180818557739258
    10. '<|end|>' → logprob: -8.930818557739258

Token 67: ' print' (ID: 2123)
  Prédit: 'print'
  Correct (stricte): False
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'print' (adapté à ' print') → logprob: -0.004178833216428757
    2. 'G' → logprob: -5.629179000854492
    3. ' print' → logprob: -8.254179000854492
    4. '   ' → logprob: -8.254179000854492
    5. ' G' → logprob: -10.879179000854492
    6. '	print' → logprob: -11.504179000854492
    7. '  ' → logprob: -12.254179000854492
    8. '    
' → logprob: -12.254179000854492
    9. '	G' → logprob: -12.754179000854492
    10. ' ' → logprob: -12.754179000854492

Token 68: '("' (ID: 568)
  Prédit: '("'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '("' → logprob: -0.04308323189616203
    2. '(' → logprob: -3.1680831909179688
    3. '('' → logprob: -9.793083190917969
    4. '("("' → logprob: -10.918083190917969
    5. '"' → logprob: -12.418083190917969
    6. '("")' → logprob: -12.793083190917969
    7. '"G' → logprob: -13.918083190917969
    8. '(G' → logprob: -14.043083190917969
    9. '()' → logprob: -15.543083190917969
    10. '(">' → logprob: -15.543083190917969

Token 69: 'G' (ID: 38)
  Prédit: 'G'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'G' → logprob: -6.134509021649137e-05
    2. '"G' → logprob: -9.87506103515625
    3. '")' → logprob: -12.25006103515625
    4. '"' → logprob: -13.25006103515625
    5. ' G' → logprob: -13.62506103515625
    6. ')' → logprob: -14.25006103515625
    7. ''' → logprob: -15.37506103515625
    8. '')' → logprob: -15.37506103515625
    9. '```' → logprob: -15.87506103515625
    10. '	G' → logprob: -15.87506103515625

Token 70: '")' (ID: 1405)
  Prédit: '")'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '")' → logprob: -7.822646693966817e-06
    2. '")
' → logprob: -12.750007629394531
    3. ')' → logprob: -12.875007629394531
    4. '"' → logprob: -13.250007629394531
    5. ')")' → logprob: -14.875007629394531
    6. ' ")' → logprob: -17.50000762939453
    7. '”)' → logprob: -17.62500762939453
    8. '")
' → logprob: -17.75000762939453
    9. '')' → logprob: -18.37500762939453
    10. '")

' → logprob: -18.50000762939453

Token 71: ' #' (ID: 1069)
  Prédit: 'if'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'if' → logprob: -0.00440614391118288
    2. 'elif' → logprob: -5.754405975341797
    3. ' if' → logprob: -7.129405975341797
    4. '<|end|>' → logprob: -8.629405975341797
    5. '```' → logprob: -9.004405975341797
    6. 'else' → logprob: -9.629405975341797
    7. '
' → logprob: -10.504405975341797
    8. '  
' → logprob: -11.879405975341797
    9. 'If' → logprob: -12.004405975341797
    10. '    
' → logprob: -12.254405975341797

Token 72: ' ça' (ID: 13590)
  Prédit: ''
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False

Token 73: ' doit' (ID: 21822)
  Prédit: 'elif'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'elif' → logprob: -0.744481086730957
    2. '<|end|>' → logprob: -0.744481086730957
    3. 'else' → logprob: -3.994481086730957
    4. ' elif' → logprob: -4.619481086730957
    5. '<|end|>' → logprob: -4.994481086730957
    6. 'n' → logprob: -5.494481086730957
    7. ' else' → logprob: -5.494481086730957
    8. '?' → logprob: -6.744481086730957
    9. 's' → logprob: -6.744481086730957
    10. '  ' → logprob: -7.119481086730957

Token 74: ' être' (ID: 9104)
  Prédit: 'être'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'être' → logprob: -0.47539645433425903
    2. ' être' → logprob: -1.7253963947296143
    3. '<|end|>' → logprob: -2.1003963947296143
    4. 'print' → logprob: -3.7253963947296143
    5. 'êt' → logprob: -4.350396633148193
    6. '  ' → logprob: -5.225396633148193
    7. 'ê' → logprob: -5.475396633148193
    8. ' ' → logprob: -5.600396633148193
    9. ' correspond' → logprob: -5.850396633148193
    10. '<|end|>' → logprob: -6.100396633148193

Token 75: ' vrai' (ID: 42682)
  Prédit: ' l'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' l' → logprob: -0.21382571756839752
    2. 'l' → logprob: -1.7138257026672363
    3. '  ' → logprob: -5.963825702667236
    4. ' lâ' → logprob: -6.088825702667236
    5. ' ' → logprob: -6.588825702667236
    6. 'le' → logprob: -6.838825702667236
    7. ' un' → logprob: -7.463825702667236
    8. ' la' → logprob: -7.463825702667236
    9. 'com' → logprob: -8.401326179504395
    10. 'un' → logprob: -8.526326179504395

Token 76: ' pour' (ID: 1930)
  Prédit: 'if'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'if' → logprob: -0.3163386285305023
    2. 'elif' → logprob: -1.9413386583328247
    3. '
' → logprob: -2.441338539123535
    4. 'else' → logprob: -3.566338539123535
    5. '<|end|>' → logprob: -5.066338539123535
    6. '```' → logprob: -5.816338539123535
    7. ' if' → logprob: -6.691338539123535
    8. '  
' → logprob: -8.316338539123535
    9. '    
' → logprob: -8.566338539123535
    10. ' else' → logprob: -8.816338539123535

Token 77: ' C' (ID: 363)
  Prédit: ' l'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' l' → logprob: -0.7777471542358398
    2. 'G' → logprob: -2.02774715423584
    3. ' G' → logprob: -2.27774715423584
    4. 'l' → logprob: -2.40274715423584
    5. ' le' → logprob: -3.02774715423584
    6. ' "' → logprob: -3.40274715423584
    7. ' les' → logprob: -3.40274715423584
    8. ' la' → logprob: -3.65274715423584
    9. 'le' → logprob: -3.77774715423584
    10. ' ' → logprob: -4.27774715423584

Token 78: ' aussi' (ID: 9894)
  Prédit: 'if'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'if' → logprob: -0.9110863208770752
    2. 'elif' → logprob: -1.4110863208770752
    3. '<|end|>' → logprob: -1.6610863208770752
    4. 'else' → logprob: -2.536086320877075
    5. '
' → logprob: -3.036086320877075
    6. '```' → logprob: -4.536086082458496
    7. ' if' → logprob: -5.411086082458496
    8. ' else' → logprob: -5.911086082458496
    9. 's' → logprob: -5.911086082458496
    10. '<|end|>' → logprob: -6.411086082458496

Token 79: '
' (ID: 198)
  Prédit: 'if'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'if' → logprob: -0.0020822163205593824
    2. 'elif' → logprob: -6.752082347869873
    3. ' if' → logprob: -7.502082347869873
    4. '```' → logprob: -8.252081871032715
    5. 'else' → logprob: -9.502081871032715
    6. '
' → logprob: -11.627081871032715
    7. '<|end|>' → logprob: -12.627081871032715
    8. '  
' → logprob: -13.252081871032715
    9. '\' → logprob: -13.252081871032715
    10. '``' → logprob: -13.627081871032715

Token 80: 'if' (ID: 366)
  Prédit: 'if'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'if' → logprob: -0.001730391290038824
    2. 'elif' → logprob: -6.501730442047119
    3. ' if' → logprob: -9.126729965209961
    4. '```' → logprob: -9.501729965209961
    5. 'else' → logprob: -10.751729965209961
    6. '
' → logprob: -11.501729965209961
    7. '  
' → logprob: -12.876729965209961
    8. 'i' → logprob: -13.001729965209961
    9. '<|end|>' → logprob: -13.126729965209961
    10. '    
' → logprob: -13.751729965209961

Token 81: ' chaine' (ID: 192094)
  Prédit: ' chaine'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' chaine' → logprob: -0.006052635610103607
    2. 'chaine' → logprob: -5.131052494049072
    3. ' chaîne' → logprob: -9.38105297088623
    4. ' ' → logprob: -10.38105297088623
    5. ' chain' → logprob: -12.38105297088623
    6. ' ' → logprob: -13.38105297088623
    7. '  ' → logprob: -14.13105297088623
    8. ' espace' → logprob: -15.13105297088623
    9. ' corde' → logprob: -15.25605297088623
    10. ' cadena' → logprob: -15.63105297088623

Token 82: ' ==' (ID: 951)
  Prédit: '=='
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '==' → logprob: -0.42990270256996155
    2. ' ==' → logprob: -1.1799026727676392
    3. '=="' → logprob: -3.1799027919769287
    4. ' =="' → logprob: -7.67990255355835
    5. ' ' → logprob: -10.804903030395508
    6. '=' → logprob: -11.429903030395508
    7. '=='' → logprob: -11.429903030395508
    8. '"' → logprob: -11.679903030395508
    9. ' =' → logprob: -12.554903030395508
    10. ' ' → logprob: -12.804903030395508

Token 83: ' '' (ID: 461)
  Prédit: '"'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '"' → logprob: -0.4757784605026245
    2. ' "' → logprob: -0.9757784605026245
    3. ''' → logprob: -6.850778579711914
    4. ' ' → logprob: -8.100778579711914
    5. ' '' → logprob: -8.350778579711914
    6. ' ' → logprob: -10.350778579711914
    7. '"I' → logprob: -11.475778579711914
    8. 'space' → logprob: -11.725778579711914
    9. '"A' → logprob: -11.725778579711914
    10. ' space' → logprob: -12.350778579711914

Token 84: 'G' (ID: 38)
  Prédit: 'G'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'G' → logprob: -1.5451681974809617e-05
    2. ''' → logprob: -12.125015258789062
    3. 'A' → logprob: -12.250015258789062
    4. ' G' → logprob: -13.125015258789062
    5. '"G' → logprob: -14.000015258789062
    6. 'C' → logprob: -14.125015258789062
    7. 'T' → logprob: -14.875015258789062
    8. '')' → logprob: -15.375015258789062
    9. '"' → logprob: -15.375015258789062
    10. '`' → logprob: -15.750015258789062

Token 85: '':
' (ID: 7669)
  Prédit: '":'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '":' → logprob: -0.7056463360786438
    2. '"' → logprob: -0.9556463360786438
    3. '':' → logprob: -2.455646276473999
    4. ''' → logprob: -3.330646276473999
    5. '"'' → logprob: -10.580646514892578
    6. '':
' → logprob: -11.205646514892578
    7. '":
' → logprob: -11.205646514892578
    8. ':' → logprob: -12.330646514892578
    9. '">' → logprob: -13.080646514892578
    10. ' "' → logprob: -13.455646514892578

Token 86: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.008572258055210114
    2. 'print' → logprob: -5.133572101593018
    3. ' print' → logprob: -6.258572101593018
    4. '    ' → logprob: -8.258572578430176
    5. '  ' → logprob: -8.633572578430176
    6. ' ' → logprob: -9.508572578430176
    7. '	print' → logprob: -10.008572578430176
    8. '   ' → logprob: -10.508572578430176
    9. '       ' → logprob: -10.633572578430176
    10. '    
' → logprob: -10.633572578430176

Token 87: ' print' (ID: 2123)
  Prédit: 'print'
  Correct (stricte): False
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'print' (adapté à ' print') → logprob: -0.02279883250594139
    2. ' print' → logprob: -4.022799015045166
    3. '   ' → logprob: -5.397799015045166
    4. '	print' → logprob: -10.772798538208008
    5. ' ' → logprob: -11.147798538208008
    6. '    ' → logprob: -11.272798538208008
    7. '"' → logprob: -11.397798538208008
    8. '  ' → logprob: -11.772798538208008
    9. 'pr' → logprob: -11.897798538208008
    10. '```' → logprob: -12.022798538208008

Token 88: '("' (ID: 568)
  Prédit: '("'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '("' → logprob: -0.40764254331588745
    2. '(' → logprob: -1.4076426029205322
    3. '('' → logprob: -2.4076426029205322
    4. '("("' → logprob: -10.907642364501953
    5. '("")' → logprob: -12.032642364501953
    6. '"' → logprob: -12.157642364501953
    7. '()' → logprob: -12.532642364501953
    8. '("""' → logprob: -14.532642364501953
    9. '(
' → logprob: -14.657642364501953
    10. ''' → logprob: -14.782642364501953

Token 89: 'C' (ID: 34)
  Prédit: 'C'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'C' → logprob: -0.002169532235711813
    2. ''C' → logprob: -6.502169609069824
    3. '"C' → logprob: -7.502169609069824
    4. '"' → logprob: -9.127169609069824
    5. ''' → logprob: -12.377169609069824
    6. '')' → logprob: -13.377169609069824
    7. '")' → logprob: -15.002169609069824
    8. ' C' → logprob: -16.252168655395508
    9. 'c' → logprob: -16.377168655395508
    10. ')' → logprob: -17.002168655395508

Token 90: '")' (ID: 1405)
  Prédit: '")'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '")' → logprob: -2.463036435074173e-05
    2. '"' → logprob: -10.750024795532227
    3. ')' → logprob: -13.750024795532227
    4. '")
' → logprob: -13.750024795532227
    5. '')' → logprob: -13.875024795532227
    6. ' ")' → logprob: -18.250024795532227
    7. '")

' → logprob: -18.500024795532227
    8. ')")' → logprob: -18.625024795532227
    9. '");' → logprob: -19.875024795532227
    10. '")
' → logprob: -20.375024795532227

Token 91: ' #' (ID: 1069)
  Prédit: ''
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False

Token 92: ' je' (ID: 1264)
  Prédit: ''
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False

Token 93: ' crois' (ID: 65485)
  Prédit: ' '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' ' → logprob: -0.4613421857357025
    2. '<|end|>' → logprob: -1.336342215538025
    3. ''' → logprob: -3.3363420963287354
    4. 's' → logprob: -3.7113420963287354
    5. '<|end|>' → logprob: -4.2113423347473145
    6. 'n' → logprob: -5.3363423347473145
    7. ' a' → logprob: -5.9613423347473145
    8. '.' → logprob: -6.2113423347473145
    9. 'a' → logprob: -6.2113423347473145
    10. '```' → logprob: -6.2113423347473145

Token 94: ' que' (ID: 661)
  Prédit: ''
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False

Token 95: ' c' (ID: 274)
  Prédit: ' c'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' c' → logprob: -0.0928967148065567
    2. 'c' → logprob: -3.4678966999053955
    3. ' #' → logprob: -4.217896938323975
    4. ' ça' → logprob: -4.342896938323975
    5. ' ce' → logprob: -4.842896938323975
    6. ' ' → logprob: -5.717896938323975
    7. ' l' → logprob: -5.842896938323975
    8. ' le' → logprob: -5.967896938323975
    9. ' ceci' → logprob: -5.967896938323975
    10. '#' → logprob: -6.092896938323975

Token 96: ''est' (ID: 6616)
  Prédit: '''
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ''' → logprob: -0.9197306632995605
    2. 'a' → logprob: -0.9197306632995605
    3. ''a' → logprob: -2.0447306632995605
    4. ''est' → logprob: -3.1697306632995605
    5. 'e' → logprob: -3.6697306632995605
    6. ''#' → logprob: -6.1697306632995605
    7. ''e' → logprob: -6.7947306632995605
    8. '   ' → logprob: -7.9197306632995605
    9. ''''' → logprob: -8.044731140136719
    10. ' '' → logprob: -8.044731140136719

Token 97: ' tout' (ID: 5501)
  Prédit: ' l'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' l' → logprob: -1.1565115451812744
    2. 'l' → logprob: -1.7815115451812744
    3. 'le' → logprob: -2.0315115451812744
    4. ' vrai' → logprob: -2.2815115451812744
    5. 'la' → logprob: -2.6565115451812744
    6. ' la' → logprob: -2.9065115451812744
    7. ' ça' → logprob: -3.1565115451812744
    8. ' le' → logprob: -3.4065115451812744
    9. 'v' → logprob: -4.406511306762695
    10. 'ça' → logprob: -4.656511306762695

Token 98: '

' (ID: 279)
  Prédit: '\n'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '\n' → logprob: -0.8170313835144043
    2. '
' → logprob: -1.3170313835144043
    3. '<|end|>' → logprob: -1.3170313835144043
    4. '#' → logprob: -5.192031383514404
    5. '```' → logprob: -5.442031383514404
    6. '<|end|>' → logprob: -5.817031383514404
    7. 'n' → logprob: -5.817031383514404
    8. ' ' → logprob: -6.192031383514404
    9. '\' → logprob: -6.442031383514404
    10. 'newline' → logprob: -7.817031383514404

Token 99: '#' (ID: 2)
  Prédit: ''
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False

Token 100: ' Pas' (ID: 18323)
  Prédit: '\n'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '\n' → logprob: -0.7964773774147034
    2. '#' → logprob: -1.2964773178100586
    3. '<|end|>' → logprob: -1.6714773178100586
    4. '
' → logprob: -3.0464773178100586
    5. ' ' → logprob: -4.296477317810059
    6. '\' → logprob: -4.421477317810059
    7. '```' → logprob: -5.171477317810059
    8. '<|end|>' → logprob: -5.421477317810059
    9. '

' → logprob: -7.546477317810059
    10. '  
' → logprob: -7.796477317810059

Token 101: ' besoin' (ID: 27703)
  Prédit: '#'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '#' → logprob: -0.6780992746353149
    2. 'e' → logprob: -0.8030992746353149
    3. 's' → logprob: -4.553099155426025
    4. 'er' → logprob: -4.803099155426025
    5. '<|end|>' → logprob: -4.928099155426025
    6. 'r' → logprob: -5.928099155426025
    7. '​' → logprob: -5.928099155426025
    8. 'd' → logprob: -5.928099155426025
    9. ' ' → logprob: -6.803099155426025
    10. 'es' → logprob: -7.053099155426025

Token 102: ' de' (ID: 334)
  Prédit: ''
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False

Token 103: ' else' (ID: 1203)
  Prédit: 'else'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'else' → logprob: -0.06091997027397156
    2. ' else' → logprob: -4.185919761657715
    3. 'plus' → logprob: -4.560919761657715
    4. 'faire' → logprob: -4.685919761657715
    5. 'r' → logprob: -5.310919761657715
    6. 'elif' → logprob: -6.060919761657715
    7. 'f' → logprob: -6.060919761657715
    8. 'suite' → logprob: -6.060919761657715
    9. 'aut' → logprob: -6.560919761657715
    10. '```' → logprob: -6.685919761657715

Token 104: ' à' (ID: 1221)
  Prédit: ''
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False

Token 105: ' mon' (ID: 1767)
  Prédit: 'ce'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'ce' → logprob: -1.167546033859253
    2. 'la' → logprob: -1.167546033859253
    3. ' ce' → logprob: -1.792546033859253
    4. 'cause' → logprob: -2.667546033859253
    5. 'part' → logprob: -3.292546033859253
    6. ' la' → logprob: -4.042546272277832
    7. '#' → logprob: -4.542546272277832
    8. 'prés' → logprob: -4.667546272277832
    9. '```' → logprob: -5.042546272277832
    10. 'près' → logprob: -5.167546272277832

Token 106: ' avis' (ID: 31783)
  Prédit: 'avis'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'avis' → logprob: -1.7612695693969727
    2. 'niveau' → logprob: -1.8862695693969727
    3. 'end' → logprob: -2.0112695693969727
    4. '#' → logprob: -2.0112695693969727
    5. 'a' → logprob: -2.0112695693969727
    6. 'if' → logprob: -2.2612695693969727
    7. 'u' → logprob: -4.136269569396973
    8. 'e' → logprob: -4.261269569396973
    9. 'elif' → logprob: -4.511269569396973
    10. 'en' → logprob: -4.886269569396973

Token 107: ' ici' (ID: 27994)
  Prédit: ''
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False

Token 108: '...' (ID: 1008)
  Prédit: ''
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False


RÉSUMÉ:
--------------------------------------------------------------------------------
Total des tokens analysés: 106
Tokens correctement prédits (1ère position, stricte): 26
Tokens correctement prédits (1ère position, avec adaptation): 28
Tokens correctement prédits (top 10): 56
Précision stricte (1ère position): 24.53%
Précision adaptée (1ère position): 26.42%
Précision (top 10): 52.83%
================================================================================
