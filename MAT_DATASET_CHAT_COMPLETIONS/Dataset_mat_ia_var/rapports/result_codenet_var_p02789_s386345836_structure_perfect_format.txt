================================================================================
ANALYSE DE PRÉDICTION TOKEN PAR TOKEN (BATCH API)
Date: 2025-06-04 19:28:58
Modèle de tokenisation: gpt-4o-mini
================================================================================

SCRIPT ANALYSÉ:
--------------------------------------------------------------------------------
n, m = map(int, input().split())
print("Yes" if n == m else "No")
--------------------------------------------------------------------------------

RÉSULTATS D'ANALYSE TOKEN PAR TOKEN:
--------------------------------------------------------------------------------
Token 0: 'n' (ID: 77)
  → Token d'amorce (pas de prédiction)

Token 1: ',' (ID: 11)
  → Token d'amorce (pas de prédiction)

Token 2: ' m' (ID: 284)
  → Token d'amorce (pas de prédiction)

Token 3: ' =' (ID: 314)
  Prédit: '='
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '=' → logprob: -0.3674127757549286
    2. ',' → logprob: -1.617412805557251
    3. ' =' → logprob: -2.242412805557251
    4. ')' → logprob: -6.742412567138672
    5. '```' → logprob: -6.867412567138672
    6. '#' → logprob: -8.992412567138672
    7. ';' → logprob: -9.117412567138672
    8. '<|end|>' → logprob: -9.617412567138672
    9. ' ' → logprob: -9.992412567138672
    10. ',
' → logprob: -10.117412567138672

Token 4: ' map' (ID: 4014)
  Prédit: ' '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' ' → logprob: -0.5809993743896484
    2. ' map' → logprob: -1.0809993743896484
    3. ' input' → logprob: -3.0809993743896484
    4. 'map' → logprob: -3.5809993743896484
    5. 'input' → logprob: -4.580999374389648
    6. '0' → logprob: -5.080999374389648
    7. ' n' → logprob: -5.205999374389648
    8. ' int' → logprob: -6.080999374389648
    9. '10' → logprob: -6.205999374389648
    10. '1' → logprob: -7.955999374389648

Token 5: '(int' (ID: 2742)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(' → logprob: -0.05874643102288246
    2. '<|end|>' → logprob: -3.808746337890625
    3. '```' → logprob: -3.933746337890625
    4. '(lambda' → logprob: -5.433746337890625
    5. '[' → logprob: -6.308746337890625
    6. '(int' → logprob: -6.433746337890625
    7. '<|end|>' → logprob: -6.808746337890625
    8. ')' → logprob: -7.433746337890625
    9. ' (' → logprob: -7.433746337890625
    10. '[int' → logprob: -7.558746337890625

Token 6: ',' (ID: 11)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '(' → logprob: -0.8785699605941772
    2. ')' → logprob: -1.2535699605941772
    3. '(input' → logprob: -1.2535699605941772
    4. '```' → logprob: -6.253570079803467
    5. '(int' → logprob: -6.503570079803467
    6. '(str' → logprob: -6.628570079803467
    7. 'input' → logprob: -6.628570079803467
    8. '`)' → logprob: -6.753570079803467
    9. '(n' → logprob: -7.253570079803467
    10. '<|end|>' → logprob: -7.378570079803467

Token 7: ' input' (ID: 3422)
  Prédit: 'input'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'input' → logprob: -0.6931565999984741
    2. ' input' → logprob: -0.6931565999984741
    3. '(input' → logprob: -11.693156242370605
    4. ')' → logprob: -14.318156242370605
    5. ',input' → logprob: -14.943156242370605
    6. '=input' → logprob: -16.693157196044922
    7. '	input' → logprob: -17.318157196044922
    8. '<input' → logprob: -17.443157196044922
    9. ' )' → logprob: -17.943157196044922
    10. '```' → logprob: -18.318157196044922

Token 8: '().' (ID: 1454)
  Prédit: '())'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '())' → logprob: -0.7411367893218994
    2. '()' → logprob: -1.7411367893218994
    3. '(' → logprob: -1.8661367893218994
    4. ')' → logprob: -1.9911367893218994
    5. '('' → logprob: -3.8661367893218994
    6. '```' → logprob: -5.11613655090332
    7. '`()' → logprob: -5.61613655090332
    8. '().' → logprob: -5.86613655090332
    9. '`)' → logprob: -5.99113655090332
    10. '(""))' → logprob: -5.99113655090332

Token 9: 'split' (ID: 13627)
  Prédit: 'split'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'split' → logprob: -0.001966343028470874
    2. 'strip' → logprob: -6.25196647644043
    3. 'rstrip' → logprob: -10.62696647644043
    4. ')' → logprob: -12.00196647644043
    5. ' split' → logprob: -12.37696647644043
    6. 'read' → logprob: -12.87696647644043
    7. '(split' → logprob: -15.00196647644043
    8. '_split' → logprob: -16.62696647644043
    9. 'spl' → logprob: -16.75196647644043
    10. 'startswith' → logprob: -16.87696647644043

Token 10: '())
' (ID: 4574)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ')' → logprob: -0.03185451403260231
    2. '))' → logprob: -3.9068546295166016
    3. '())' → logprob: -4.531854629516602
    4. '()' → logprob: -8.531854629516602
    5. '`)' → logprob: -8.781854629516602
    6. ')`' → logprob: -10.281854629516602
    7. '(' → logprob: -10.281854629516602
    8. '()))' → logprob: -10.531854629516602
    9. ')))' → logprob: -11.906854629516602
    10. ' )' → logprob: -12.156854629516602

Token 11: 'print' (ID: 1598)
  Prédit: 'a'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'a' → logprob: -0.18924707174301147
    2. 'for' → logprob: -3.0642471313476562
    3. 'x' → logprob: -3.3142471313476562
    4. '\n' → logprob: -4.064247131347656
    5. 'd' → logprob: -4.689247131347656
    6. '`' → logprob: -4.814247131347656
    7. 'r' → logprob: -4.814247131347656
    8. ',' → logprob: -4.939247131347656
    9. '#' → logprob: -5.439247131347656
    10. 's' → logprob: -5.564247131347656

Token 12: '("' (ID: 568)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '(' → logprob: -0.0002142650482710451
    2. '('' → logprob: -9.125214576721191
    3. '("("' → logprob: -9.250214576721191
    4. '(
' → logprob: -13.125214576721191
    5. '((' → logprob: -13.500214576721191
    6. ' (' → logprob: -13.625214576721191
    7. '("""' → logprob: -13.875214576721191
    8. '()' → logprob: -13.875214576721191
    9. '(`' → logprob: -14.625214576721191
    10. '(

' → logprob: -15.000214576721191

Token 13: 'Yes' (ID: 13022)
  Prédit: 'Hello'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'Hello' → logprob: -0.5955818295478821
    2. '")' → logprob: -1.4705817699432373
    3. '"' → logprob: -1.9705817699432373
    4. ')' → logprob: -3.4705817699432373
    5. '*' → logprob: -4.220582008361816
    6. 'n' → logprob: -4.970582008361816
    7. 'Enter' → logprob: -5.095582008361816
    8. 'H' → logprob: -5.470582008361816
    9. '#' → logprob: -6.220582008361816
    10. '0' → logprob: -6.720582008361816

Token 14: '"' (ID: 1)
  Prédit: '")'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '")' → logprob: -0.2521757185459137
    2. ')' → logprob: -1.5021756887435913
    3. ')")' → logprob: -8.377175331115723
    4. '!")' → logprob: -11.627175331115723
    5. ' )' → logprob: -13.002175331115723
    6. '!)' → logprob: -13.377175331115723
    7. '')' → logprob: -13.627175331115723
    8. '"' → logprob: -14.002175331115723
    9. '`)' → logprob: -15.252175331115723
    10. '())' → logprob: -15.252175331115723

Token 15: ' if' (ID: 538)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ')' → logprob: -5.5577775128767826e-06
    2. ',' → logprob: -13.250005722045898
    3. '))' → logprob: -13.625005722045898
    4. ',)' → logprob: -14.000005722045898
    5. '")' → logprob: -14.250005722045898
    6. ' )' → logprob: -15.250005722045898
    7. '),' → logprob: -15.625005722045898
    8. '`)' → logprob: -15.750005722045898
    9. '')' → logprob: -16.3750057220459
    10. 'if' → logprob: -16.3750057220459

Token 16: ' n' (ID: 297)
  Prédit: ' n'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' n' → logprob: -0.005395968910306692
    2. 'n' → logprob: -5.255395889282227
    3. ' m' → logprob: -10.005395889282227
    4. ' (' → logprob: -10.005395889282227
    5. '(n' → logprob: -10.255395889282227
    6. ' ' → logprob: -10.880395889282227
    7. ' abs' → logprob: -11.630395889282227
    8. '(' → logprob: -12.505395889282227
    9. 'm' → logprob: -13.130395889282227
    10. ')' → logprob: -13.880395889282227

Token 17: ' ==' (ID: 951)
  Prédit: ' >'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' >' → logprob: -0.8987298607826233
    2. ' ==' → logprob: -1.2737298011779785
    3. '>' → logprob: -2.0237298011779785
    4. '==' → logprob: -2.1487298011779785
    5. '%' → logprob: -4.0237298011779785
    6. ' <=' → logprob: -4.1487298011779785
    7. ' >=' → logprob: -4.3987298011779785
    8. ' <' → logprob: -5.0237298011779785
    9. ' %' → logprob: -5.6487298011779785
    10. '>=' → logprob: -5.7737298011779785

Token 18: ' m' (ID: 284)
  Prédit: 'm'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'm' → logprob: -0.3872140347957611
    2. ' m' → logprob: -1.1372140645980835
    3. ' ' → logprob: -8.512213706970215
    4. '0' → logprob: -10.012213706970215
    5. '1' → logprob: -10.512213706970215
    6. '10' → logprob: -11.012213706970215
    7. '100' → logprob: -11.637213706970215
    8. '2' → logprob: -11.762213706970215
    9. '7' → logprob: -12.262213706970215
    10. 'n' → logprob: -12.512213706970215

Token 19: ' else' (ID: 1203)
  Prédit: ' else'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' else' → logprob: -0.17603570222854614
    2. ')' → logprob: -1.9260356426239014
    3. 'else' → logprob: -4.1760358810424805
    4. ' )' → logprob: -8.92603588104248
    5. ' ' → logprob: -9.42603588104248
    6. ' and' → logprob: -9.55103588104248
    7. '```' → logprob: -11.05103588104248
    8. 'and' → logprob: -11.42603588104248
    9. '==' → logprob: -11.92603588104248
    10. '  ' → logprob: -12.92603588104248

Token 20: ' "' (ID: 392)
  Prédit: '"'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '"' → logprob: -0.0263585913926363
    2. '"No' → logprob: -3.6513586044311523
    3. ' "' → logprob: -10.151358604431152
    4. ' ' → logprob: -11.526358604431152
    5. ')' → logprob: -12.276358604431152
    6. ''' → logprob: -13.651358604431152
    7. 'No' → logprob: -13.776358604431152
    8. '   ' → logprob: -14.151358604431152
    9. ' No' → logprob: -14.276358604431152
    10. '")' → logprob: -14.526358604431152

Token 21: 'No' (ID: 3160)
  Prédit: '"No'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '"No' → logprob: -0.386982262134552
    2. 'No' → logprob: -1.1369822025299072
    3. '"' → logprob: -9.386981964111328
    4. ' No' → logprob: -10.761981964111328
    5. '“No' → logprob: -13.386981964111328
    6. 'no' → logprob: -14.011981964111328
    7. ''' → logprob: -14.386981964111328
    8. ' ' → logprob: -14.511981964111328
    9. 'NO' → logprob: -14.511981964111328
    10. '")' → logprob: -15.011981964111328

Token 22: '")' (ID: 1405)
  Prédit: '")'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '")' → logprob: -0.00010008628305513412
    2. ')' → logprob: -9.250100135803223
    3. ')")' → logprob: -12.500100135803223
    4. '")
' → logprob: -17.375099182128906
    5. '"' → logprob: -17.625099182128906
    6. '”)' → logprob: -17.875099182128906
    7. '\")' → logprob: -19.125099182128906
    8. '"))' → logprob: -19.125099182128906
    9. '!")' → logprob: -19.125099182128906
    10. ')"' → logprob: -19.250099182128906


RÉSUMÉ:
--------------------------------------------------------------------------------
Total des tokens analysés: 20
Tokens correctement prédits (1ère position, stricte): 4
Tokens correctement prédits (1ère position, avec adaptation): 4
Tokens correctement prédits (top 10): 14
Précision stricte (1ère position): 20.00%
Précision adaptée (1ère position): 20.00%
Précision (top 10): 70.00%
================================================================================
