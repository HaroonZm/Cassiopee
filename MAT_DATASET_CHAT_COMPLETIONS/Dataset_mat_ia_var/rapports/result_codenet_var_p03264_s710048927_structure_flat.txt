================================================================================
ANALYSE DE PRÉDICTION TOKEN PAR TOKEN (BATCH API)
Date: 2025-06-04 20:09:14
Modèle de tokenisation: gpt-4o-mini
================================================================================

SCRIPT ANALYSÉ:
--------------------------------------------------------------------------------
k = int(input())
num = k // 2
if k % 2 == 0:
    print(num * num)
else:
    print(num * (num + 1))
--------------------------------------------------------------------------------

RÉSULTATS D'ANALYSE TOKEN PAR TOKEN:
--------------------------------------------------------------------------------
Token 0: 'k' (ID: 74)
  → Token d'amorce (pas de prédiction)

Token 1: ' =' (ID: 314)
  → Token d'amorce (pas de prédiction)

Token 2: ' int' (ID: 677)
  → Token d'amorce (pas de prédiction)

Token 3: '(input' (ID: 10054)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '(' → logprob: -0.008482075296342373
    2. '(k' → logprob: -4.883481979370117
    3. '```' → logprob: -8.383481979370117
    4. ''' → logprob: -8.758481979370117
    5. '('' → logprob: -8.883481979370117
    6. 'k' → logprob: -8.883481979370117
    7. '("("' → logprob: -9.883481979370117
    8. '`' → logprob: -10.508481979370117
    9. ')' → logprob: -11.008481979370117
    10. '()' → logprob: -11.133481979370117

Token 4: '())
' (ID: 4574)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '(' → logprob: -0.10969176143407822
    2. ')' → logprob: -2.359691858291626
    3. '()' → logprob: -5.109691619873047
    4. '(k' → logprob: -6.859691619873047
    5. '(
' → logprob: -6.984691619873047
    6. '())' → logprob: -7.984691619873047
    7. '('' → logprob: -8.234691619873047
    8. '```' → logprob: -8.734691619873047
    9. '(

' → logprob: -9.109691619873047
    10. ''' → logprob: -9.609691619873047

Token 5: 'num' (ID: 4571)
  Prédit: '\n'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '\n' → logprob: -0.9529725909233093
    2. '+' → logprob: -1.077972650527954
    3. '*' → logprob: -1.952972650527954
    4. '%' → logprob: -2.952972650527954
    5. '\' → logprob: -3.827972650527954
    6. '#' → logprob: -4.202972412109375
    7. ' ' → logprob: -4.577972412109375
    8. ''' → logprob: -5.202972412109375
    9. ')' → logprob: -5.452972412109375
    10. '**' → logprob: -5.827972412109375

Token 6: ' =' (ID: 314)
  Prédit: 's'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 's' → logprob: -0.011676733382046223
    2. '[' → logprob: -4.761676788330078
    3. '_' → logprob: -6.386676788330078
    4. 'ber' → logprob: -7.886676788330078
    5. '_s' → logprob: -8.261676788330078
    6. '[s' → logprob: -9.261676788330078
    7. ')' → logprob: -9.386676788330078
    8. '1' → logprob: -9.511676788330078
    9. '[:]' → logprob: -10.011676788330078
    10. '_list' → logprob: -10.011676788330078

Token 7: ' k' (ID: 372)
  Prédit: ' k'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' k' → logprob: -0.9132571220397949
    2. '0' → logprob: -1.663257122039795
    3. ' ' → logprob: -2.038257122039795
    4. 'input' → logprob: -2.163257122039795
    5. ' input' → logprob: -2.163257122039795
    6. 'k' → logprob: -4.288257122039795
    7. '1' → logprob: -4.413257122039795
    8. '"' → logprob: -4.538257122039795
    9. ' int' → logprob: -5.288257122039795
    10. ''' → logprob: -6.538257122039795

Token 8: ' //' (ID: 602)
  Prédit: '+'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '+' → logprob: -0.49569499492645264
    2. '%' → logprob: -1.2456949949264526
    3. '-' → logprob: -3.745695114135742
    4. '**' → logprob: -4.120695114135742
    5. '*' → logprob: -4.370695114135742
    6. '>' → logprob: -4.620695114135742
    7. ' ' → logprob: -4.870695114135742
    8. '```' → logprob: -4.870695114135742
    9. ')' → logprob: -5.245695114135742
    10. '#' → logprob: -5.620695114135742

Token 9: ' ' (ID: 220)
  Prédit: '2'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '2' → logprob: -0.27814802527427673
    2. '10' → logprob: -1.9031480550765991
    3. ' ' → logprob: -2.6531479358673096
    4. '3' → logprob: -4.278148174285889
    5. '5' → logprob: -5.528148174285889
    6. '100' → logprob: -5.528148174285889
    7. '4' → logprob: -7.653148174285889
    8. '1' → logprob: -7.778148174285889
    9. '60' → logprob: -9.15314769744873
    10. '7' → logprob: -9.27814769744873

Token 10: '2' (ID: 17)
  Prédit: '2'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '2' → logprob: -0.7401906251907349
    2. '10' → logprob: -0.7401906251907349
    3. '3' → logprob: -3.7401905059814453
    4. '100' → logprob: -4.490190505981445
    5. '5' → logprob: -4.865190505981445
    6. '1' → logprob: -6.865190505981445
    7. '60' → logprob: -6.865190505981445
    8. '4' → logprob: -7.865190505981445
    9. '7' → logprob: -7.990190505981445
    10. '12' → logprob: -9.615190505981445

Token 11: '
' (ID: 198)
  Prédit: '+'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '+' → logprob: -0.03496576473116875
    2. 'if' → logprob: -4.284965991973877
    3. ' +' → logprob: -4.409965991973877
    4. ' if' → logprob: -5.284965991973877
    5. '*' → logprob: -6.909965991973877
    6. ' ' → logprob: -7.534965991973877
    7. '%' → logprob: -7.659965991973877
    8. '_' → logprob: -7.909965991973877
    9. '\' → logprob: -7.909965991973877
    10. '\n' → logprob: -8.909965515136719

Token 12: 'if' (ID: 366)
  Prédit: '+'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '+' → logprob: -0.08742542564868927
    2. 'if' → logprob: -2.837425470352173
    3. ' if' → logprob: -4.337425231933594
    4. ' ' → logprob: -5.587425231933594
    5. ' +' → logprob: -5.712425231933594
    6. 'print' → logprob: -6.337425231933594
    7. '*' → logprob: -6.712425231933594
    8. 'i' → logprob: -8.212425231933594
    9. ')' → logprob: -8.337425231933594
    10. '%' → logprob: -8.587425231933594

Token 13: ' k' (ID: 372)
  Prédit: ' num'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' num' → logprob: -0.2903481125831604
    2. ' k' → logprob: -1.4153480529785156
    3. 'num' → logprob: -4.915348052978516
    4. 'k' → logprob: -6.915348052978516
    5. ' ' → logprob: -7.290348052978516
    6. ' ' → logprob: -10.040348052978516
    7. ' not' → logprob: -10.540348052978516
    8. ' n' → logprob: -10.665348052978516
    9. '(num' → logprob: -10.665348052978516
    10. ' (' → logprob: -11.790348052978516

Token 14: ' %' (ID: 1851)
  Prédit: ' >'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' >' → logprob: -0.9511680006980896
    2. ' ' → logprob: -1.2011680603027344
    3. ' %' → logprob: -1.4511680603027344
    4. ' >=' → logprob: -3.2011680603027344
    5. '>' → logprob: -3.8261680603027344
    6. '%' → logprob: -4.951168060302734
    7. ' ==' → logprob: -5.576168060302734
    8. ' <' → logprob: -5.951168060302734
    9. ' <=' → logprob: -6.576168060302734
    10. ' !=' → logprob: -8.451168060302734

Token 15: ' ' (ID: 220)
  Prédit: '2'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '2' → logprob: -0.251930296421051
    2. ' ' → logprob: -1.5019302368164062
    3. '```' → logprob: -14.501930236816406
    4. ' ' → logprob: -15.376930236816406
    5. '3' → logprob: -15.501930236816406
    6. '4' → logprob: -16.001930236816406
    7. '1' → logprob: -16.751930236816406
    8. '<|end|>' → logprob: -17.689430236816406
    9. '  ' → logprob: -17.876930236816406
    10. ')' → logprob: -18.251930236816406

Token 16: '2' (ID: 17)
  Prédit: '2'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '2' → logprob: -4.572941179503687e-05
    2. ' ' → logprob: -10.000045776367188
    3. '3' → logprob: -15.750045776367188
    4. '```' → logprob: -17.000045776367188
    5. '4' → logprob: -18.000045776367188
    6. '1' → logprob: -18.125045776367188
    7. '  ' → logprob: -18.375045776367188
    8. '   ' → logprob: -18.625045776367188
    9. '>' → logprob: -20.875045776367188
    10. '5' → logprob: -21.062545776367188

Token 17: ' ==' (ID: 951)
  Prédit: ' =='
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' ==' → logprob: -0.05781674012541771
    2. ' !=' → logprob: -3.182816743850708
    3. '==' → logprob: -4.307816505432129
    4. '!=' → logprob: -7.432816505432129
    5. ':' → logprob: -8.182816505432129
    6. ' ' → logprob: -8.932816505432129
    7. ' =' → logprob: -9.307816505432129
    8. '=' → logprob: -9.932816505432129
    9. ' :' → logprob: -10.307816505432129
    10. '>' → logprob: -10.432816505432129

Token 18: ' ' (ID: 220)
  Prédit: ' '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' ' → logprob: -0.16024595499038696
    2. '0' → logprob: -1.9102458953857422
    3. '1' → logprob: -10.785245895385742
    4. ' ' → logprob: -14.285245895385742
    5. '==' → logprob: -16.160245895385742
    6. '=' → logprob: -16.535245895385742
    7. ' ==' → logprob: -16.722745895385742
    8. '  ' → logprob: -17.160245895385742
    9. ' =' → logprob: -17.222745895385742
    10. '```' → logprob: -17.285245895385742

Token 19: '0' (ID: 15)
  Prédit: '0'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '0' → logprob: -0.012580170296132565
    2. ' ' → logprob: -4.387580394744873
    3. '1' → logprob: -9.762579917907715
    4. '2' → logprob: -11.262579917907715
    5. '==' → logprob: -17.01258087158203
    6. '```' → logprob: -17.13758087158203
    7. '  ' → logprob: -17.88758087158203
    8. '=' → logprob: -18.32508087158203
    9. '   ' → logprob: -18.70008087158203
    10. ' ' → logprob: -18.95008087158203

Token 20: ':
' (ID: 734)
  Prédit: ':'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ':' → logprob: -1.0683535037969705e-05
    2. ':
' → logprob: -12.75001049041748
    3. '):' → logprob: -13.00001049041748
    4. ':**' → logprob: -13.12501049041748
    5. ' :' → logprob: -13.25001049041748
    6. '':' → logprob: -14.37501049041748
    7. '>:' → logprob: -14.50001049041748
    8. '':'' → logprob: -15.25001049041748
    9. '":' → logprob: -16.625011444091797
    10. ':return' → logprob: -17.125011444091797

Token 21: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.0590536892414093
    2. '\n' → logprob: -3.184053659439087
    3. 'print' → logprob: -4.559053897857666
    4. '\' → logprob: -6.309053897857666
    5. '    
' → logprob: -7.059053897857666
    6. ' print' → logprob: -7.059053897857666
    7. '```' → logprob: -7.559053897857666
    8. ' ' → logprob: -8.184053421020508
    9. '    ' → logprob: -8.934053421020508
    10. ':' → logprob: -9.059053421020508

Token 22: ' print' (ID: 2123)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.3661823272705078
    2. ' print' → logprob: -1.3661823272705078
    3. 'print' (adapté à ' print') → logprob: -2.991182327270508
    4. '       ' → logprob: -7.491182327270508
    5. '```' → logprob: -8.116182327270508
    6. ' ' → logprob: -9.491182327270508
    7. '    
' → logprob: -9.741182327270508
    8. '    ' → logprob: -9.866182327270508
    9. '\n' → logprob: -9.991182327270508
    10. '\' → logprob: -10.116182327270508

Token 23: '(num' (ID: 15828)
  Prédit: '(num'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(num' → logprob: -0.6076810956001282
    2. '(' → logprob: -0.8576810956001282
    3. '("' → logprob: -4.1076812744140625
    4. '('' → logprob: -4.3576812744140625
    5. '(k' → logprob: -7.1076812744140625
    6. '("("' → logprob: -7.1076812744140625
    7. '()' → logprob: -8.857681274414062
    8. '((' → logprob: -9.357681274414062
    9. 'num' → logprob: -10.232681274414062
    10. '(n' → logprob: -10.357681274414062

Token 24: ' *' (ID: 425)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ')' → logprob: -0.00010103991371579468
    2. '*' → logprob: -9.500101089477539
    3. ')
' → logprob: -11.625101089477539
    4. '+' → logprob: -11.750101089477539
    5. ' )' → logprob: -12.875101089477539
    6. '```' → logprob: -13.375101089477539
    7. '**' → logprob: -13.875101089477539
    8. '))' → logprob: -14.000101089477539
    9. ')`' → logprob: -14.125101089477539
    10. '')' → logprob: -14.625101089477539

Token 25: ' num' (ID: 2269)
  Prédit: '2'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '2' → logprob: -0.5765625238418579
    2. ' ' → logprob: -1.701562523841858
    3. '"' → logprob: -2.3265624046325684
    4. '"*' → logprob: -3.5765624046325684
    5. ' num' → logprob: -3.7015624046325684
    6. ''' → logprob: -4.201562404632568
    7. ''*' → logprob: -4.326562404632568
    8. ' "' → logprob: -4.451562404632568
    9. 'num' → logprob: -4.576562404632568
    10. '1' → logprob: -4.701562404632568

Token 26: ')
' (ID: 446)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')' → logprob: -4.5491004129871726e-05
    2. '*' → logprob: -10.375045776367188
    3. ')
' → logprob: -11.750045776367188
    4. '**' → logprob: -13.500045776367188
    5. '+' → logprob: -14.125045776367188
    6. ' )' → logprob: -14.375045776367188
    7. '```' → logprob: -14.375045776367188
    8. '))' → logprob: -14.500045776367188
    9. '*)' → logprob: -14.625045776367188
    10. '   ' → logprob: -15.000045776367188

Token 27: 'else' (ID: 2807)
  Prédit: 'else'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'else' → logprob: -0.008613157086074352
    2. ' else' → logprob: -5.383613109588623
    3. '```' → logprob: -6.258613109588623
    4. '*' → logprob: -7.008613109588623
    5. 'elif' → logprob: -7.258613109588623
    6. '    
' → logprob: -8.633613586425781
    7. '\n' → logprob: -9.508613586425781
    8. '<|end|>' → logprob: -10.008613586425781
    9. 'e' → logprob: -10.508613586425781
    10. '#else' → logprob: -11.008613586425781

Token 28: ':
' (ID: 734)
  Prédit: ':'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ':' → logprob: -4.23917081207037e-05
    2. ':
' → logprob: -10.500041961669922
    3. ' :' → logprob: -11.875041961669922
    4. '   ' → logprob: -12.250041961669922
    5. '):' → logprob: -13.250041961669922
    6. ':**' → logprob: -15.000041961669922
    7. '():' → logprob: -15.375041961669922
    8. '':' → logprob: -16.000041961669922
    9. '    ' → logprob: -16.250041961669922
    10. '```' → logprob: -16.250041961669922

Token 29: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -1.0769048929214478
    2. '```' → logprob: -1.7019048929214478
    3. '(num' → logprob: -1.7019048929214478
    4. '+' → logprob: -2.576904773712158
    5. '    ' → logprob: -3.326904773712158
    6. ' ' → logprob: -3.451904773712158
    7. '(n' → logprob: -3.576904773712158
    8. '\n' → logprob: -3.826904773712158
    9. '`' → logprob: -4.201904773712158
    10. '\' → logprob: -4.451904773712158

Token 30: ' print' (ID: 2123)
  Prédit: ' num'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' num' → logprob: -0.8045429587364197
    2. 'num' → logprob: -0.8045429587364197
    3. '(num' → logprob: -2.6795430183410645
    4. 'print' (adapté à ' print') → logprob: -3.5545430183410645
    5. ' print' → logprob: -5.6795430183410645
    6. ' (' → logprob: -6.4295430183410645
    7. ' ' → logprob: -7.3045430183410645
    8. '```' → logprob: -7.3045430183410645
    9. '1' → logprob: -7.9295430183410645
    10. '`' → logprob: -8.054542541503906

Token 31: '(num' (ID: 15828)
  Prédit: '(num'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(num' → logprob: -0.3039928376674652
    2. '((' → logprob: -1.4289928674697876
    3. '(' → logprob: -3.803992748260498
    4. '(k' → logprob: -8.928993225097656
    5. 'num' → logprob: -9.303993225097656
    6. ' (' → logprob: -10.553993225097656
    7. '(n' → logprob: -10.928993225097656
    8. '(((' → logprob: -11.303993225097656
    9. '```' → logprob: -12.553993225097656
    10. ' ((' → logprob: -12.928993225097656

Token 32: ' *' (ID: 425)
  Prédit: '*'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '*' → logprob: -0.026248283684253693
    2. '+' → logprob: -3.9012482166290283
    3. ' *' → logprob: -5.276248455047607
    4. ' +' → logprob: -7.776248455047607
    5. ')' → logprob: -9.40124797821045
    6. '*(' → logprob: -9.65124797821045
    7. '*)' → logprob: -12.15124797821045
    8. ' ' → logprob: -13.52624797821045
    9. '   ' → logprob: -14.02624797821045
    10. '**' → logprob: -14.15124797821045

Token 33: ' (' (ID: 350)
  Prédit: '(num'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(num' → logprob: -0.04092332720756531
    2. '(n' → logprob: -3.5409233570098877
    3. '(' → logprob: -5.540923118591309
    4. ' (' → logprob: -5.790923118591309
    5. 'num' → logprob: -6.040923118591309
    6. '(k' → logprob: -6.790923118591309
    7. ' num' → logprob: -8.790923118591309
    8. '1' → logprob: -8.915923118591309
    9. 'k' → logprob: -9.290923118591309
    10. '*num' → logprob: -9.915923118591309

Token 34: 'num' (ID: 4571)
  Prédit: 'num'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'num' → logprob: -0.3913075029850006
    2. '(num' → logprob: -1.1413074731826782
    3. ' num' → logprob: -5.891307353973389
    4. '(' → logprob: -7.016307353973389
    5. '(n' → logprob: -7.516307353973389
    6. ' (' → logprob: -9.516307830810547
    7. 'n' → logprob: -10.141307830810547
    8. '1' → logprob: -10.141307830810547
    9. 'k' → logprob: -11.266307830810547
    10. '2' → logprob: -11.641307830810547

Token 35: ' +' (ID: 659)
  Prédit: '+'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '+' → logprob: -0.016416611149907112
    2. ' +' → logprob: -4.141416549682617
    3. '1' → logprob: -8.141416549682617
    4. ')' → logprob: -10.391416549682617
    5. '+)' → logprob: -10.641416549682617
    6. 'plus' → logprob: -11.516416549682617
    7. ' plus' → logprob: -12.141416549682617
    8. '   ' → logprob: -12.891416549682617
    9. '2' → logprob: -13.016416549682617
    10. '`' → logprob: -13.016416549682617

Token 36: ' ' (ID: 220)
  Prédit: '1'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '1' → logprob: -1.9266199160483666e-05
    2. ' ' → logprob: -10.875019073486328
    3. ')' → logprob: -15.500019073486328
    4. '```' → logprob: -17.625019073486328
    5. '2' → logprob: -18.000019073486328
    6. '   ' → logprob: -19.000019073486328
    7. '`' → logprob: -19.125019073486328
    8. '１' → logprob: -20.000019073486328
    9. '۱' → logprob: -20.875019073486328
    10. '  ' → logprob: -20.875019073486328

Token 37: '1' (ID: 16)
  Prédit: '1'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '1' → logprob: -7.896309739408025e-07
    2. ' ' → logprob: -14.125000953674316
    3. ')' → logprob: -17.0
    4. '```' → logprob: -19.375
    5. '2' → logprob: -19.875
    6. '１' → logprob: -20.375
    7. '১' → logprob: -21.375
    8. '<|end|>' → logprob: -21.625
    9. '`' → logprob: -22.0
    10. '۱' → logprob: -22.0

Token 38: '))' (ID: 915)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')' → logprob: -0.00016063073417171836
    2. '))' → logprob: -8.750160217285156
    3. ' )' → logprob: -13.875160217285156
    4. ')))' → logprob: -14.125160217285156
    5. '`)' → logprob: -16.000160217285156
    6. ')`' → logprob: -16.625160217285156
    7. ')
' → logprob: -16.750160217285156
    8. '')' → logprob: -17.375160217285156
    9. ')")' → logprob: -17.375160217285156
    10. '   ' → logprob: -17.500160217285156


RÉSUMÉ:
--------------------------------------------------------------------------------
Total des tokens analysés: 36
Tokens correctement prédits (1ère position, stricte): 13
Tokens correctement prédits (1ère position, avec adaptation): 13
Tokens correctement prédits (top 10): 29
Précision stricte (1ère position): 36.11%
Précision adaptée (1ère position): 36.11%
Précision (top 10): 80.56%
================================================================================
