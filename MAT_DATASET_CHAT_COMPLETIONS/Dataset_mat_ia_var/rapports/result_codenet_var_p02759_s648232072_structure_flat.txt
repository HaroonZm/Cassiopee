================================================================================
ANALYSE DE PRÉDICTION TOKEN PAR TOKEN (BATCH API)
Date: 2025-06-04 19:23:42
Modèle de tokenisation: gpt-4o-mini
================================================================================

SCRIPT ANALYSÉ:
--------------------------------------------------------------------------------
n = int(input())
n = (n + 1) // 2 if n % 2 != 0 else n // 2
print(n)
--------------------------------------------------------------------------------

RÉSULTATS D'ANALYSE TOKEN PAR TOKEN:
--------------------------------------------------------------------------------
Token 0: 'n' (ID: 77)
  → Token d'amorce (pas de prédiction)

Token 1: ' =' (ID: 314)
  → Token d'amorce (pas de prédiction)

Token 2: ' int' (ID: 677)
  → Token d'amorce (pas de prédiction)

Token 3: '(input' (ID: 10054)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '(' → logprob: -5.7530574849806726e-05
    2. ''' → logprob: -10.750057220458984
    3. '('' → logprob: -11.125057220458984
    4. '(
' → logprob: -11.750057220458984
    5. '(n' → logprob: -13.000057220458984
    6. '```' → logprob: -13.125057220458984
    7. '("("' → logprob: -13.125057220458984
    8. '()' → logprob: -13.500057220458984
    9. '`' → logprob: -13.500057220458984
    10. '[' → logprob: -14.125057220458984

Token 4: '())
' (ID: 4574)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '(' → logprob: -0.08201935887336731
    2. ')' → logprob: -2.582019329071045
    3. '()' → logprob: -6.332019329071045
    4. '(
' → logprob: -7.707019329071045
    5. '())' → logprob: -8.457019805908203
    6. '('' → logprob: -9.332019805908203
    7. ''' → logprob: -9.457019805908203
    8. '`' → logprob: -9.707019805908203
    9. '')' → logprob: -9.707019805908203
    10. '```' → logprob: -10.082019805908203

Token 5: 'n' (ID: 77)
  Prédit: 'if'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'if' → logprob: -0.6515942215919495
    2. 'for' → logprob: -1.4015941619873047
    3. 'i' → logprob: -2.1515941619873047
    4. 's' → logprob: -2.7765941619873047
    5. 'x' → logprob: -4.651594161987305
    6. ')' → logprob: -5.151594161987305
    7. 'a' → logprob: -5.401594161987305
    8. '*' → logprob: -5.401594161987305
    9. ' ' → logprob: -5.651594161987305
    10. 'f' → logprob: -5.901594161987305

Token 6: ' =' (ID: 314)
  Prédit: '+'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '+' → logprob: -1.1246917247772217
    2. '*' → logprob: -1.2496917247772217
    3. '```' → logprob: -2.3746917247772217
    4. '**' → logprob: -2.4996917247772217
    5. '\n' → logprob: -2.4996917247772217
    6. '\' → logprob: -3.1246917247772217
    7. '<|end|>' → logprob: -3.3746917247772217
    8. ')' → logprob: -4.249691963195801
    9. '
' → logprob: -4.749691963195801
    10. '#' → logprob: -5.249691963195801

Token 7: ' (' (ID: 350)
  Prédit: ' n'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' n' → logprob: -0.505940854549408
    2. ' ' → logprob: -1.2559409141540527
    3. ' int' → logprob: -3.1309409141540527
    4. 'n' → logprob: -3.5059409141540527
    5. '0' → logprob: -4.005940914154053
    6. 'int' → logprob: -4.130940914154053
    7. ' input' → logprob: -6.880940914154053
    8. '1' → logprob: -7.005940914154053
    9. '2' → logprob: -7.755940914154053
    10. 'input' → logprob: -7.880940914154053

Token 8: 'n' (ID: 77)
  Prédit: 'n'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'n' → logprob: -0.7737906575202942
    2. 'input' → logprob: -1.0237905979156494
    3. 'int' → logprob: -2.0237905979156494
    4. ' input' → logprob: -4.1487908363342285
    5. ' n' → logprob: -4.5237908363342285
    6. 'abs' → logprob: -5.1487908363342285
    7. '1' → logprob: -5.7737908363342285
    8. ')' → logprob: -5.7737908363342285
    9. ' int' → logprob: -5.8987908363342285
    10. 'len' → logprob: -7.0237908363342285

Token 9: ' +' (ID: 659)
  Prédit: ' +'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' +' → logprob: -0.5663333535194397
    2. '+' → logprob: -1.066333293914795
    3. ' *' → logprob: -3.441333293914795
    4. ')' → logprob: -3.566333293914795
    5. '*' → logprob: -4.191333293914795
    6. ' %' → logprob: -5.691333293914795
    7. ' **' → logprob: -6.316333293914795
    8. '**' → logprob: -6.441333293914795
    9. ' )' → logprob: -6.566333293914795
    10. '%' → logprob: -6.941333293914795

Token 10: ' ' (ID: 220)
  Prédit: ' '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' ' → logprob: -0.1610405296087265
    2. '1' → logprob: -1.9110405445098877
    3. '2' → logprob: -8.161040306091309
    4. ' n' → logprob: -8.411040306091309
    5. '5' → logprob: -9.286040306091309
    6. '3' → logprob: -9.661040306091309
    7. '10' → logprob: -10.161040306091309
    8. '4' → logprob: -10.536040306091309
    9. '7' → logprob: -10.911040306091309
    10. 'n' → logprob: -11.161040306091309

Token 11: '1' (ID: 16)
  Prédit: '1'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '1' → logprob: -0.04609151557087898
    2. ' ' → logprob: -3.1710915565490723
    3. '2' → logprob: -6.296091556549072
    4. '3' → logprob: -7.796091556549072
    5. '5' → logprob: -7.796091556549072
    6. '4' → logprob: -9.046091079711914
    7. ' n' → logprob: -9.296091079711914
    8. '10' → logprob: -9.546091079711914
    9. 'n' → logprob: -10.421091079711914
    10. '7' → logprob: -10.421091079711914

Token 12: ')' (ID: 8)
  Prédit: ')'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')' → logprob: -4.5014188799541444e-05
    2. ' )' → logprob: -10.625044822692871
    3. ')>>' → logprob: -12.875044822692871
    4. '))' → logprob: -13.000044822692871
    5. '*' → logprob: -13.000044822692871
    6. ')//' → logprob: -13.250044822692871
    7. '```' → logprob: -13.250044822692871
    8. ')*' → logprob: -13.250044822692871
    9. '//' → logprob: -13.625044822692871
    10. '%' → logprob: -13.750044822692871

Token 13: ' //' (ID: 602)
  Prédit: '%'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '%' → logprob: -0.03638641536235809
    2. ' %' → logprob: -3.911386489868164
    3. '*' → logprob: -4.536386489868164
    4. '**' → logprob: -5.786386489868164
    5. ' *' → logprob: -7.411386489868164
    6. '#' → logprob: -7.536386489868164
    7. ')' → logprob: -8.286386489868164
    8. '```' → logprob: -9.161386489868164
    9. ' ' → logprob: -9.411386489868164
    10. ' //' → logprob: -9.536386489868164

Token 14: ' ' (ID: 220)
  Prédit: '2'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '2' → logprob: -0.00017565040616318583
    2. ' ' → logprob: -8.750175476074219
    3. '1' → logprob: -11.125175476074219
    4. '3' → logprob: -13.625175476074219
    5. '10' → logprob: -13.875175476074219
    6. '```' → logprob: -15.875175476074219
    7. '5' → logprob: -17.62517547607422
    8. '7' → logprob: -18.25017547607422
    9. '4' → logprob: -18.87517547607422
    10. '100' → logprob: -19.00017547607422

Token 15: '2' (ID: 17)
  Prédit: '2'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '2' → logprob: -7.672236824873835e-05
    2. '1' → logprob: -10.125076293945312
    3. ' ' → logprob: -11.125076293945312
    4. '10' → logprob: -11.125076293945312
    5. '3' → logprob: -12.000076293945312
    6. '5' → logprob: -14.375076293945312
    7. '4' → logprob: -16.125076293945312
    8. '7' → logprob: -16.125076293945312
    9. '100' → logprob: -17.000076293945312
    10. '```' → logprob: -17.125076293945312

Token 16: ' if' (ID: 538)
  Prédit: '%'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '%' → logprob: -1.097551703453064
    2. '*' → logprob: -1.472551703453064
    3. '\n' → logprob: -1.722551703453064
    4. '\' → logprob: -2.2225518226623535
    5. '
' → logprob: -3.0975518226623535
    6. '#' → logprob: -3.8475518226623535
    7. '+' → logprob: -3.9725518226623535
    8. ')' → logprob: -4.0975518226623535
    9. '<|end|>' → logprob: -4.2225518226623535
    10. 'if' → logprob: -4.5975518226623535

Token 17: ' n' (ID: 297)
  Prédit: ' n'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' n' → logprob: -0.03804975748062134
    2. 'n' → logprob: -3.2880496978759766
    3. '(n' → logprob: -11.788049697875977
    4. ' (' → logprob: -15.038049697875977
    5. ' not' → logprob: -15.788049697875977
    6. ' ' → logprob: -16.538049697875977
    7. '	n' → logprob: -16.663049697875977
    8. ' ' → logprob: -16.913049697875977
    9. '_n' → logprob: -17.288049697875977
    10. ')n' → logprob: -17.538049697875977

Token 18: ' %' (ID: 1851)
  Prédit: ' %'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' %' → logprob: -0.26950767636299133
    2. '%' → logprob: -1.894507646560669
    3. ' >' → logprob: -3.144507646560669
    4. '>' → logprob: -3.519507646560669
    5. ' ' → logprob: -4.644507884979248
    6. ' >=' → logprob: -6.894507884979248
    7. ' <=' → logprob: -7.644507884979248
    8. ' <' → logprob: -7.894507884979248
    9. ' !=' → logprob: -7.894507884979248
    10. ' else' → logprob: -7.894507884979248

Token 19: ' ' (ID: 220)
  Prédit: '2'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '2' → logprob: -0.3132643401622772
    2. ' ' → logprob: -1.3132643699645996
    3. '```' → logprob: -13.313263893127441
    4. '3' → logprob: -14.813263893127441
    5. '4' → logprob: -16.188264846801758
    6. '1' → logprob: -16.313264846801758
    7. ' ' → logprob: -16.438264846801758
    8. '  ' → logprob: -16.563264846801758
    9. '>' → logprob: -16.688264846801758
    10. '<|end|>' → logprob: -16.938264846801758

Token 20: '2' (ID: 17)
  Prédit: '2'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '2' → logprob: -0.00014215784904081374
    2. ' ' → logprob: -8.875142097473145
    3. '```' → logprob: -13.375142097473145
    4. '3' → logprob: -14.750142097473145
    5. '4' → logprob: -15.875142097473145
    6. '1' → logprob: -17.00014305114746
    7. '  ' → logprob: -17.50014305114746
    8. '>' → logprob: -17.87514305114746
    9. '...' → logprob: -18.31264305114746
    10. '   ' → logprob: -18.37514305114746

Token 21: ' !=' (ID: 1666)
  Prédit: '=='
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '==' → logprob: -0.11898389458656311
    2. ' ==' → logprob: -2.7439839839935303
    3. ' else' → logprob: -3.6189839839935303
    4. '!=' → logprob: -4.118983745574951
    5. ' !=' → logprob: -5.993983745574951
    6. 'else' → logprob: -6.368983745574951
    7. ' ' → logprob: -7.743983745574951
    8. '0' → logprob: -9.86898422241211
    9. '=' → logprob: -10.11898422241211
    10. '1' → logprob: -10.99398422241211

Token 22: ' ' (ID: 220)
  Prédit: ' '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' ' → logprob: -0.035109419375658035
    2. '0' → logprob: -3.910109519958496
    3. '2' → logprob: -4.285109519958496
    4. '=' → logprob: -7.285109519958496
    5. '1' → logprob: -13.410109519958496
    6. '3' → logprob: -14.410109519958496
    7. ' =' → logprob: -14.410109519958496
    8. ' ' → logprob: -14.660109519958496
    9. '==' → logprob: -15.160109519958496
    10. '```' → logprob: -15.410109519958496

Token 23: '0' (ID: 15)
  Prédit: '2'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '2' → logprob: -0.45695674419403076
    2. '0' → logprob: -1.0819567441940308
    3. ' ' → logprob: -3.5819568634033203
    4. '=' → logprob: -10.58195686340332
    5. '1' → logprob: -12.45695686340332
    6. '```' → logprob: -12.89445686340332
    7. '3' → logprob: -13.95695686340332
    8. '==' → logprob: -14.20695686340332
    9. '  ' → logprob: -14.70695686340332
    10. '4' → logprob: -14.89445686340332

Token 24: ' else' (ID: 1203)
  Prédit: ' else'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' else' → logprob: -0.018153805285692215
    2. 'else' → logprob: -4.018153667449951
    3. ':' → logprob: -14.14315414428711
    4. '_else' → logprob: -14.14315414428711
    5. ' ' → logprob: -14.26815414428711
    6. '```' → logprob: -14.76815414428711
    7. ' :' → logprob: -14.89315414428711
    8. '	else' → logprob: -15.01815414428711
    9. '-' → logprob: -15.89315414428711
    10. ' n' → logprob: -15.89315414428711

Token 25: ' n' (ID: 297)
  Prédit: ' n'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' n' → logprob: -0.2014302909374237
    2. 'n' → logprob: -1.701430320739746
    3. ' (' → logprob: -12.076430320739746
    4. ' ' → logprob: -12.576430320739746
    5. '(n' → logprob: -12.576430320739746
    6. ' ' → logprob: -12.701430320739746
    7. '_n' → logprob: -14.951430320739746
    8. '(' → logprob: -14.951430320739746
    9. '	n' → logprob: -16.20142936706543
    10. '2' → logprob: -16.57642936706543

Token 26: ' //' (ID: 602)
  Prédit: '%'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '%' → logprob: -0.484385222196579
    2. '+' → logprob: -2.4843852519989014
    3. '
' → logprob: -2.4843852519989014
    4. 'print' → logprob: -2.4843852519989014
    5. '*' → logprob: -3.2343852519989014
    6. '#' → logprob: -3.3593852519989014
    7. ')' → logprob: -3.9843852519989014
    8. '<|end|>' → logprob: -4.234385013580322
    9. '\n' → logprob: -5.109385013580322
    10. '**' → logprob: -5.359385013580322

Token 27: ' ' (ID: 220)
  Prédit: '2'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '2' → logprob: -0.001502598519437015
    2. ' ' → logprob: -6.501502513885498
    3. '```' → logprob: -16.126502990722656
    4. '1' → logprob: -16.376502990722656
    5. ' ' → logprob: -17.501502990722656
    6. '۲' → logprob: -17.876502990722656
    7. '<|end|>' → logprob: -17.876502990722656
    8. '２' → logprob: -18.501502990722656
    9. '   ' → logprob: -19.001502990722656
    10. '  ' → logprob: -19.189002990722656

Token 28: '2' (ID: 17)
  Prédit: '2'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '2' → logprob: -4.36574100604048e-06
    2. ' ' → logprob: -12.375004768371582
    3. '```' → logprob: -16.250003814697266
    4. '۲' → logprob: -17.750003814697266
    5. '<|end|>' → logprob: -18.062503814697266
    6. '   ' → logprob: -18.687503814697266
    7. '２' → logprob: -18.812503814697266
    8. '२' → logprob: -18.875003814697266
    9. '1' → logprob: -18.875003814697266
    10. '  ' → logprob: -19.062503814697266

Token 29: '
' (ID: 198)
  Prédit: '
'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '
' → logprob: -1.3343228101730347
    2. 'print' → logprob: -1.3343228101730347
    3. '+' → logprob: -1.4593228101730347
    4. '*' → logprob: -2.084322929382324
    5. '<|end|>' → logprob: -3.334322929382324
    6. ')' → logprob: -4.084322929382324
    7. '%' → logprob: -4.209322929382324
    8. '#' → logprob: -4.459322929382324
    9. '\' → logprob: -4.709322929382324
    10. '\n' → logprob: -5.084322929382324

Token 30: 'print' (ID: 1598)
  Prédit: 'print'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'print' → logprob: -0.012993032112717628
    2. '+' → logprob: -5.137992858886719
    3. '*' → logprob: -5.512992858886719
    4. '
' → logprob: -7.262992858886719
    5. 'for' → logprob: -7.387992858886719
    6. 'n' → logprob: -8.262992858886719
    7. '#' → logprob: -8.387992858886719
    8. '%' → logprob: -8.637992858886719
    9. 'result' → logprob: -8.637992858886719
    10. 's' → logprob: -9.012992858886719

Token 31: '(n' (ID: 2406)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(' → logprob: -0.005248106550425291
    2. '(n' → logprob: -5.255248069763184
    3. '('' → logprob: -12.255248069763184
    4. '()' → logprob: -12.505248069763184
    5. '((' → logprob: -12.630248069763184
    6. '(
' → logprob: -14.630248069763184
    7. '(sum' → logprob: -15.005248069763184
    8. '(max' → logprob: -15.130248069763184
    9. '("("' → logprob: -15.755248069763184
    10. '(`' → logprob: -16.0052490234375

Token 32: ')' (ID: 8)
  Prédit: ')'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')' → logprob: -3.650518920039758e-06
    2. '))' → logprob: -12.750003814697266
    3. ' )' → logprob: -15.250003814697266
    4. '')' → logprob: -15.500003814697266
    5. ')`' → logprob: -16.500003814697266
    6. '`)' → logprob: -16.875003814697266
    7. '*' → logprob: -17.125003814697266
    8. ')
' → logprob: -18.250003814697266
    9. ')}' → logprob: -18.375003814697266
    10. '+' → logprob: -18.375003814697266


RÉSUMÉ:
--------------------------------------------------------------------------------
Total des tokens analysés: 30
Tokens correctement prédits (1ère position, stricte): 16
Tokens correctement prédits (1ère position, avec adaptation): 16
Tokens correctement prédits (top 10): 23
Précision stricte (1ère position): 53.33%
Précision adaptée (1ère position): 53.33%
Précision (top 10): 76.67%
================================================================================
