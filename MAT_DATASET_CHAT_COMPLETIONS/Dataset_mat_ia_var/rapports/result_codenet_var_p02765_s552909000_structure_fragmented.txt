================================================================================
ANALYSE DE PRÉDICTION TOKEN PAR TOKEN (BATCH API)
Date: 2025-06-04 19:24:46
Modèle de tokenisation: gpt-4o-mini
================================================================================

SCRIPT ANALYSÉ:
--------------------------------------------------------------------------------
def get_input():
    return input()

def split_input(user_input):
    return user_input.split()

def convert_to_ints(strs):
    return (int(i) for i in strs)

def unpack_values(vals):
    n, r = vals
    return n, r

def check_greater_equal_10(n):
    return n >= 10

def calculate_result_case_true(r):
    return r

def calculate_result_case_false(n, r):
    return r + 100 * (10 - n)

def print_result(res):
    print(res)

def main():
    user_input = get_input()
    splitted = split_input(user_input)
    vals = convert_to_ints(splitted)
    n, r = unpack_values(vals)
    if check_greater_equal_10(n):
        res = calculate_result_case_true(r)
    else:
        res = calculate_result_case_false(n, r)
    print_result(res)

main()
--------------------------------------------------------------------------------

RÉSULTATS D'ANALYSE TOKEN PAR TOKEN:
--------------------------------------------------------------------------------
Token 0: 'def' (ID: 1314)
  → Token d'amorce (pas de prédiction)

Token 1: ' get' (ID: 717)
  → Token d'amorce (pas de prédiction)

Token 2: '_input' (ID: 12507)
  → Token d'amorce (pas de prédiction)

Token 3: '():
' (ID: 8595)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '(' → logprob: -0.016520146280527115
    2. '_' → logprob: -4.141520023345947
    3. '():' → logprob: -8.516520500183105
    4. '(:' → logprob: -9.266520500183105
    5. ' (' → logprob: -10.141520500183105
    6. '(_' → logprob: -10.141520500183105
    7. '(_:' → logprob: -10.516520500183105
    8. '```' → logprob: -11.016520500183105
    9. '()' → logprob: -11.516520500183105
    10. ':' → logprob: -11.766520500183105

Token 4: '   ' (ID: 271)
  Prédit: '```'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '```' → logprob: -0.157649964094162
    2. ':' → logprob: -3.5326499938964844
    3. '():' → logprob: -3.5326499938964844
    4. '   ' → logprob: -3.5326499938964844
    5. '(' → logprob: -4.157649993896484
    6. '\' → logprob: -4.282649993896484
    7. '    
' → logprob: -5.407649993896484
    8. ''' → logprob: -5.657649993896484
    9. '(
' → logprob: -6.032649993896484
    10. ' return' → logprob: -6.157649993896484

Token 5: ' return' (ID: 622)
  Prédit: 'return'
  Correct (stricte): False
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'return' (adapté à ' return') → logprob: -0.17901639640331268
    2. 'input' → logprob: -2.429016351699829
    3. 'user' → logprob: -3.429016351699829
    4. '   ' → logprob: -3.929016351699829
    5. ' return' → logprob: -5.179016590118408
    6. 'x' → logprob: -5.429016590118408
    7. '```' → logprob: -5.429016590118408
    8. ' ' → logprob: -5.554016590118408
    9. 'text' → logprob: -6.679016590118408
    10. 'i' → logprob: -7.179016590118408

Token 6: ' input' (ID: 3422)
  Prédit: ' input'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' input' → logprob: -0.4265197515487671
    2. ' ' → logprob: -1.301519751548767
    3. 'input' → logprob: -2.8015198707580566
    4. '"' → logprob: -4.676519870758057
    5. ''' → logprob: -6.301519870758057
    6. ' "' → logprob: -6.551519870758057
    7. ' '' → logprob: -7.426519870758057
    8. '  ' → logprob: -7.551519870758057
    9. ' None' → logprob: -8.301519393920898
    10. '(input' → logprob: -9.176519393920898

Token 7: '()

' (ID: 5874)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '(' → logprob: -0.006999400909990072
    2. '()' → logprob: -5.006999492645264
    3. ' (' → logprob: -9.881999015808105
    4. '('' → logprob: -9.881999015808105
    5. '```' → logprob: -10.131999015808105
    6. '.' → logprob: -10.256999015808105
    7. '(
' → logprob: -10.756999015808105
    8. ' ' → logprob: -11.006999015808105
    9. '("("' → logprob: -11.256999015808105
    10. ''' → logprob: -11.381999015808105

Token 8: 'def' (ID: 1314)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(' → logprob: -0.5428093671798706
    2. '\n' → logprob: -2.16780948638916
    3. ':' → logprob: -2.54280948638916
    4. 'def' → logprob: -2.79280948638916
    5. '#' → logprob: -3.41780948638916
    6. '()' → logprob: -3.66780948638916
    7. '```' → logprob: -3.66780948638916
    8. '(
' → logprob: -3.79280948638916
    9. '\' → logprob: -4.29280948638916
    10. 'a' → logprob: -4.79280948638916

Token 9: ' split' (ID: 12648)
  Prédit: ' get'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' get' → logprob: -0.27021366357803345
    2. ' calculate' → logprob: -1.6452136039733887
    3. ' process' → logprob: -3.7702136039733887
    4. ' space' → logprob: -5.395213603973389
    5. ' user' → logprob: -5.645213603973389
    6. ' compute' → logprob: -6.020213603973389
    7. ' add' → logprob: -6.520213603973389
    8. ' validate' → logprob: -6.770213603973389
    9. ' check' → logprob: -6.770213603973389
    10. ' set' → logprob: -7.145213603973389

Token 10: '_input' (ID: 12507)
  Prédit: '_'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_' → logprob: -0.06765130907297134
    2. '(' → logprob: -2.9426512718200684
    3. '_text' → logprob: -5.192651271820068
    4. '_string' → logprob: -6.442651271820068
    5. '_line' → logprob: -6.692651271820068
    6. '_words' → logprob: -6.942651271820068
    7. '_word' → logprob: -7.442651271820068
    8. '('_' → logprob: -7.692651271820068
    9. '_s' → logprob: -7.817651271820068
    10. '_input' → logprob: -8.317651748657227

Token 11: '(user' (ID: 7195)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '(' → logprob: -0.01149739883840084
    2. '_' → logprob: -5.136497497558594
    3. '('_' → logprob: -5.886497497558594
    4. '("("' → logprob: -7.011497497558594
    5. '("_' → logprob: -8.261497497558594
    6. '('' → logprob: -8.511497497558594
    7. '(_)' → logprob: -8.511497497558594
    8. '```' → logprob: -8.761497497558594
    9. '_text' → logprob: -8.886497497558594
    10. '(_' → logprob: -9.261497497558594

Token 12: '_input' (ID: 12507)
  Prédit: '):'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '):' → logprob: -0.980181872844696
    2. '_' → logprob: -1.1051819324493408
    3. ')' → logprob: -1.6051819324493408
    4. '_input' → logprob: -2.980181932449341
    5. ')_' → logprob: -3.730181932449341
    6. '_text' → logprob: -5.230181694030762
    7. ' _' → logprob: -6.105181694030762
    8. '_string' → logprob: -6.230181694030762
    9. '):
' → logprob: -6.480181694030762
    10. '_line' → logprob: -7.230181694030762

Token 13: '):
' (ID: 1883)
  Prédit: '):'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '):' → logprob: -0.004884569905698299
    2. ',' → logprob: -5.754884719848633
    3. ')' → logprob: -6.504884719848633
    4. ':' → logprob: -9.504884719848633
    5. '):
' → logprob: -9.754884719848633
    6. ' ):' → logprob: -10.504884719848633
    7. '(' → logprob: -11.004884719848633
    8. ')):' → logprob: -12.504884719848633
    9. '=' → logprob: -12.629884719848633
    10. '   ' → logprob: -12.629884719848633

Token 14: '   ' (ID: 271)
  Prédit: ' user'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' user' → logprob: -0.48375698924064636
    2. 'user' → logprob: -1.1087570190429688
    3. '(user' → logprob: -3.3587570190429688
    4. '   ' → logprob: -4.108757019042969
    5. ' return' → logprob: -6.608757019042969
    6. 'return' → logprob: -8.108757019042969
    7. '(' → logprob: -8.108757019042969
    8. '_user' → logprob: -9.108757019042969
    9. '_' → logprob: -9.858757019042969
    10. '	user' → logprob: -9.983757019042969

Token 15: ' return' (ID: 622)
  Prédit: ' user'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' user' → logprob: -0.03033049777150154
    2. 'user' → logprob: -3.5303304195404053
    3. ' return' → logprob: -7.780330657958984
    4. '   ' → logprob: -9.030330657958984
    5. 'return' (adapté à ' return') → logprob: -10.530330657958984
    6. '(user' → logprob: -12.655330657958984
    7. ' ' → logprob: -13.155330657958984
    8. '[user' → logprob: -13.155330657958984
    9. '	user' → logprob: -13.780330657958984
    10. ' split' → logprob: -13.780330657958984

Token 16: ' user' (ID: 1825)
  Prédit: ' user'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' user' → logprob: -0.026308424770832062
    2. 'user' → logprob: -3.651308536529541
    3. ' ' → logprob: -12.776308059692383
    4. '(user' → logprob: -12.776308059692383
    5. '[user' → logprob: -14.276308059692383
    6. '	user' → logprob: -14.651308059692383
    7. '"user' → logprob: -14.651308059692383
    8. ''user' → logprob: -15.151308059692383
    9. '.user' → logprob: -15.276308059692383
    10. '=user' → logprob: -15.651308059692383

Token 17: '_input' (ID: 12507)
  Prédit: '_input'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_input' → logprob: -0.2312529981136322
    2. '_' → logprob: -1.8562530279159546
    3. '_put' → logprob: -3.606252908706665
    4. '_p' → logprob: -4.731253147125244
    5. 'put' → logprob: -5.356253147125244
    6. '._' → logprob: -5.731253147125244
    7. 'n' → logprob: -7.106253147125244
    8. '_user' → logprob: -7.106253147125244
    9. '_n' → logprob: -7.481253147125244
    10. '_s' → logprob: -7.481253147125244

Token 18: '.split' (ID: 10347)
  Prédit: '.'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '.' → logprob: -0.34943893551826477
    2. '.split' → logprob: -1.2244389057159424
    3. '.strip' → logprob: -7.0994391441345215
    4. ' .' → logprob: -8.974438667297363
    5. 'split' → logprob: -11.224438667297363
    6. '.s' → logprob: -11.724438667297363
    7. '().' → logprob: -12.099438667297363
    8. '.replace' → logprob: -12.224438667297363
    9. '.lower' → logprob: -13.474438667297363
    10. '.rstrip' → logprob: -13.474438667297363

Token 19: '()

' (ID: 5874)
  Prédit: '(''
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '('' → logprob: -0.36362937092781067
    2. '(' → logprob: -1.2386293411254883
    3. '("("' → logprob: -4.363629341125488
    4. ''' → logprob: -6.238629341125488
    5. '()' → logprob: -9.113629341125488
    6. '('.')' → logprob: -9.363629341125488
    7. '(`' → logprob: -9.863629341125488
    8. '(parent' → logprob: -10.613629341125488
    9. 'parent' → logprob: -10.738629341125488
    10. '(\'' → logprob: -11.238629341125488

Token 20: 'def' (ID: 1314)
  Prédit: 'def'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'def' → logprob: -0.024196023121476173
    2. 'd' → logprob: -3.774195909500122
    3. 'de' → logprob: -7.649196147918701
    4. '```' → logprob: -8.524195671081543
    5. '#' → logprob: -9.024195671081543
    6. '\' → logprob: -9.149195671081543
    7. '(' → logprob: -11.899195671081543
    8. '[' → logprob: -12.149195671081543
    9. '`' → logprob: -12.399195671081543
    10. '<|end|>' → logprob: -12.524195671081543

Token 21: ' convert' (ID: 8452)
  Prédit: ' main'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' main' → logprob: -0.17670156061649323
    2. ' process' → logprob: -2.676701545715332
    3. ' join' → logprob: -3.301701545715332
    4. ' calculate' → logprob: -3.801701545715332
    5. 'main' → logprob: -4.676701545715332
    6. ' get' → logprob: -4.801701545715332
    7. 'process' → logprob: -5.551701545715332
    8. 'calculate' → logprob: -6.176701545715332
    9. ' convert' → logprob: -6.301701545715332
    10. ' parse' → logprob: -6.676701545715332

Token 22: '_to' (ID: 5089)
  Prédit: '_'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_' → logprob: -0.35769185423851013
    2. '_to' → logprob: -1.2326918840408325
    3. '(' → logprob: -5.732691764831543
    4. '_token' → logprob: -5.732691764831543
    5. '_tokens' → logprob: -7.232691764831543
    6. '_input' → logprob: -7.857691764831543
    7. '_user' → logprob: -8.107691764831543
    8. '_string' → logprob: -8.732691764831543
    9. '_(' → logprob: -8.857691764831543
    10. '```' → logprob: -8.982691764831543

Token 23: '_int' (ID: 12285)
  Prédit: '_int'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_int' → logprob: -0.00038407891406677663
    2. 'int' → logprob: -9.000384330749512
    3. '_' → logprob: -9.500384330749512
    4. '_float' → logprob: -9.750384330749512
    5. '_tokens' → logprob: -10.250384330749512
    6. '_in' → logprob: -10.375384330749512
    7. '_integer' → logprob: -10.625384330749512
    8. '_numbers' → logprob: -11.125384330749512
    9. '_string' → logprob: -12.250384330749512
    10. '_words' → logprob: -12.375384330749512

Token 24: 's' (ID: 82)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(' → logprob: -0.10576893389225006
    2. 's' → logprob: -2.355768918991089
    3. '_' → logprob: -5.980769157409668
    4. '(s' → logprob: -6.480769157409668
    5. '()' → logprob: -8.230769157409668
    6. '("("' → logprob: -8.230769157409668
    7. '(_)' → logprob: -8.855769157409668
    8. '(user' → logprob: -8.855769157409668
    9. '(_' → logprob: -9.230769157409668
    10. '```' → logprob: -9.230769157409668

Token 25: '(str' (ID: 7946)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '(' → logprob: -0.0183000098913908
    2. '(user' → logprob: -4.0183000564575195
    3. '("("' → logprob: -9.89330005645752
    4. ' (' → logprob: -10.64330005645752
    5. '(users' → logprob: -11.39330005645752
    6. '(def' → logprob: -11.89330005645752
    7. '(tokens' → logprob: -11.89330005645752
    8. '(User' → logprob: -12.64330005645752
    9. '(data' → logprob: -12.89330005645752
    10. '(input' → logprob: -12.89330005645752

Token 26: 's' (ID: 82)
  Prédit: 'ings'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'ings' → logprob: -0.13593950867652893
    2. 's' → logprob: -2.135939598083496
    3. 'ing' → logprob: -5.135939598083496
    4. '_list' → logprob: -6.010939598083496
    5. '_s' → logprob: -8.385939598083496
    6. '_' → logprob: -9.010939598083496
    7. '_vals' → logprob: -9.635939598083496
    8. '_array' → logprob: -10.135939598083496
    9. '_tokens' → logprob: -10.385939598083496
    10. '_arr' → logprob: -10.760939598083496

Token 27: '):
' (ID: 1883)
  Prédit: '):'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '):' → logprob: -0.00554748997092247
    2. ')' → logprob: -5.380547523498535
    3. ' ):' → logprob: -7.380547523498535
    4. '):
' → logprob: -8.755547523498535
    5. '[]):' → logprob: -9.755547523498535
    6. '   ' → logprob: -10.505547523498535
    7. 's' → logprob: -11.380547523498535
    8. '):

' → logprob: -11.630547523498535
    9. ' )' → logprob: -11.880547523498535
    10. '[' → logprob: -11.880547523498535

Token 28: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.012977263890206814
    2. '[' → logprob: -4.512977123260498
    3. '[int' → logprob: -6.512977123260498
    4. 'return' → logprob: -8.512977600097656
    5. ' return' → logprob: -9.262977600097656
    6. '[]' → logprob: -9.637977600097656
    7. ' [' → logprob: -10.762977600097656
    8. 'ints' → logprob: -10.887977600097656
    9. '[
' → logprob: -11.012977600097656
    10. '[i' → logprob: -11.387977600097656

Token 29: ' return' (ID: 622)
  Prédit: '['
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '[' → logprob: -0.7597913146018982
    2. '   ' → logprob: -0.8847913146018982
    3. '[int' → logprob: -2.509791374206543
    4. 'return' (adapté à ' return') → logprob: -3.884791374206543
    5. ' return' → logprob: -4.509791374206543
    6. ' [' → logprob: -5.384791374206543
    7. '[]' → logprob: -7.009791374206543
    8. '[
' → logprob: -7.759791374206543
    9. '[i' → logprob: -8.134791374206543
    10. 'ints' → logprob: -9.259791374206543

Token 30: ' (' (ID: 350)
  Prédit: ' ['
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' [' → logprob: -0.06392678618431091
    2. ' list' → logprob: -2.8139266967773438
    3. '[' → logprob: -6.563926696777344
    4. '[list' → logprob: -7.813926696777344
    5. 'list' → logprob: -9.188926696777344
    6. '[int' → logprob: -10.438926696777344
    7. '[List' → logprob: -13.063926696777344
    8. ' ' → logprob: -13.188926696777344
    9. ' []' → logprob: -13.188926696777344
    10. '   ' → logprob: -13.688926696777344

Token 31: 'int' (ID: 491)
  Prédit: 'int'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'int' → logprob: -0.08450441807508469
    2. ' int' → logprob: -3.2095043659210205
    3. '[int' → logprob: -3.2095043659210205
    4. 'map' → logprob: -9.084504127502441
    5. ' map' → logprob: -9.834504127502441
    6. ' [' → logprob: -9.834504127502441
    7. '   ' → logprob: -10.584504127502441
    8. '[' → logprob: -11.459504127502441
    9. '(int' → logprob: -12.209504127502441
    10. ')' → logprob: -12.459504127502441

Token 32: '(i' (ID: 3649)
  Prédit: '(s'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(s' → logprob: -0.013545934110879898
    2. 's' → logprob: -4.638545989990234
    3. '(x' → logprob: -6.013545989990234
    4. '(i' → logprob: -6.763545989990234
    5. '(' → logprob: -8.763545989990234
    6. ')' → logprob: -11.513545989990234
    7. 'x' → logprob: -12.763545989990234
    8. '(str' → logprob: -12.763545989990234
    9. ')s' → logprob: -12.763545989990234
    10. 'str' → logprob: -13.513545989990234

Token 33: ')' (ID: 8)
  Prédit: ')'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')' → logprob: -2.1008713702030946e-06
    2. 'for' → logprob: -14.000001907348633
    3. ' )' → logprob: -14.250001907348633
    4. 'str' → logprob: -15.875001907348633
    5. 's' → logprob: -16.000001907348633
    6. ' for' → logprob: -16.500001907348633
    7. '))' → logprob: -16.500001907348633
    8. 'in' → logprob: -16.750001907348633
    9. '}' → logprob: -17.375001907348633
    10. '.strip' → logprob: -17.375001907348633

Token 34: ' for' (ID: 395)
  Prédit: ' for'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' for' → logprob: -0.10053595900535583
    2. 'for' → logprob: -2.3505358695983887
    3. ')' → logprob: -8.100536346435547
    4. ' ' → logprob: -10.975536346435547
    5. '	for' → logprob: -12.350536346435547
    6. '   ' → logprob: -13.100536346435547
    7. '  ' → logprob: -14.100536346435547
    8. '    ' → logprob: -14.600536346435547
    9. 's' → logprob: -14.850536346435547
    10. ' )' → logprob: -15.600536346435547

Token 35: ' i' (ID: 575)
  Prédit: ' i'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' i' → logprob: -0.12849733233451843
    2. 'i' → logprob: -2.628497362136841
    3. ' strs' → logprob: -3.253497362136841
    4. ' ' → logprob: -5.378497123718262
    5. 's' → logprob: -5.503497123718262
    6. ' s' → logprob: -7.378497123718262
    7. '	i' → logprob: -8.503497123718262
    8. 'str' → logprob: -8.878497123718262
    9. ' ' → logprob: -9.878497123718262
    10. '  ' → logprob: -11.628497123718262

Token 36: ' in' (ID: 306)
  Prédit: ' strs'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' strs' → logprob: -9.400689305039123e-05
    2. ' in' → logprob: -9.375094413757324
    3. ' ' → logprob: -12.625094413757324
    4. 'str' → logprob: -12.750094413757324
    5. 's' → logprob: -13.125094413757324
    6. ' s' → logprob: -15.125094413757324
    7. ' str' → logprob: -15.250094413757324
    8. ')' → logprob: -16.000093460083008
    9. ' strings' → logprob: -16.000093460083008
    10. ' )' → logprob: -16.125093460083008

Token 37: ' strs' (ID: 125079)
  Prédit: ' strs'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' strs' → logprob: -0.004085524007678032
    2. 'str' → logprob: -5.504085540771484
    3. 's' → logprob: -13.129085540771484
    4. '[str' → logprob: -13.254085540771484
    5. ' ' → logprob: -13.379085540771484
    6. '	str' → logprob: -14.254085540771484
    7. ' str' → logprob: -14.754085540771484
    8. 'stra' → logprob: -15.379085540771484
    9. 'sts' → logprob: -15.754085540771484
    10. 'stry' → logprob: -16.629085540771484

Token 38: ')

' (ID: 1029)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ')' → logprob: -1.5048530030981055e-06
    2. ' )' → logprob: -13.875001907348633
    3. '))' → logprob: -15.500001907348633
    4. '`)' → logprob: -16.250001907348633
    5. ')
' → logprob: -16.500001907348633
    6. ')`' → logprob: -17.375001907348633
    7. '   ' → logprob: -17.500001907348633
    8. '}' → logprob: -17.750001907348633
    9. '[' → logprob: -17.750001907348633
    10. ')))' → logprob: -18.250001907348633

Token 39: 'def' (ID: 1314)
  Prédit: 'def'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'def' → logprob: -0.08903227001428604
    2. '\n' → logprob: -3.2140321731567383
    3. '#' → logprob: -4.339032173156738
    4. '<|end|>' → logprob: -4.839032173156738
    5. '
' → logprob: -5.089032173156738
    6. '```' → logprob: -5.214032173156738
    7. '\' → logprob: -5.589032173156738
    8. '[' → logprob: -5.964032173156738
    9. 'newline' → logprob: -6.964032173156738
    10. 'n' → logprob: -7.464032173156738

Token 40: ' unpack' (ID: 61704)
  Prédit: ' main'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' main' → logprob: -0.06350655853748322
    2. ' calculate' → logprob: -3.688506603240967
    3. ' process' → logprob: -4.313506603240967
    4. ' sum' → logprob: -4.563506603240967
    5. ' solve' → logprob: -5.688506603240967
    6. ' find' → logprob: -6.313506603240967
    7. 'main' → logprob: -6.563506603240967
    8. ' count' → logprob: -6.813506603240967
    9. ' compute' → logprob: -7.063506603240967
    10. ' max' → logprob: -7.188506603240967

Token 41: '_values' (ID: 20393)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '(' → logprob: -0.47655075788497925
    2. '_' → logprob: -1.476550817489624
    3. '_input' → logprob: -2.851550817489624
    4. '_(' → logprob: -3.476550817489624
    5. '(_' → logprob: -3.601550817489624
    6. ' (' → logprob: -4.851550579071045
    7. '_user' → logprob: -5.601550579071045
    8. '()' → logprob: -5.976550579071045
    9. '(user' → logprob: -5.976550579071045
    10. '(_)' → logprob: -6.101550579071045

Token 42: '(vals' (ID: 167053)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '(' → logprob: -0.163534477353096
    2. '():' → logprob: -2.53853440284729
    3. '(user' → logprob: -2.91353440284729
    4. '(values' → logprob: -6.038534641265869
    5. '(*' → logprob: -6.163534641265869
    6. '(line' → logprob: -6.413534641265869
    7. '()' → logprob: -6.538534641265869
    8. '(args' → logprob: -6.788534641265869
    9. '()(' → logprob: -7.038534641265869
    10. '(str' → logprob: -7.163534641265869

Token 43: '):
' (ID: 1883)
  Prédit: '):'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '):' → logprob: -0.0030480583664029837
    2. ')' → logprob: -5.878047943115234
    3. ' ):' → logprob: -9.253047943115234
    4. ',' → logprob: -9.753047943115234
    5. '):
' → logprob: -10.253047943115234
    6. '():' → logprob: -10.753047943115234
    7. '   ' → logprob: -11.128047943115234
    8. '(' → logprob: -11.503047943115234
    9. '*' → logprob: -13.003047943115234
    10. ':' → logprob: -13.378047943115234

Token 44: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.0007255369564518332
    2. ' return' → logprob: -7.750725746154785
    3. '    ' → logprob: -8.875725746154785
    4. 'return' → logprob: -9.750725746154785
    5. '  ' → logprob: -11.250725746154785
    6. ' ' → logprob: -11.375725746154785
    7. '   ' → logprob: -11.375725746154785
    8. '	return' → logprob: -12.000725746154785
    9. '       ' → logprob: -12.000725746154785
    10. '*' → logprob: -12.125725746154785

Token 45: ' n' (ID: 297)
  Prédit: 'a'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'a' → logprob: -0.7938741445541382
    2. '   ' → logprob: -0.7938741445541382
    3. 'return' → logprob: -2.5438742637634277
    4. ' a' → logprob: -4.668874263763428
    5. ' return' → logprob: -5.418874263763428
    6. 'x' → logprob: -6.418874263763428
    7. 'values' → logprob: -7.418874263763428
    8. 'vals' → logprob: -8.41887378692627
    9. ' x' → logprob: -8.91887378692627
    10. 'first' → logprob: -9.04387378692627

Token 46: ',' (ID: 11)
  Prédit: ','
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ',' → logprob: -0.12724095582962036
    2. ' =' → logprob: -2.5022408962249756
    3. '=' → logprob: -3.3772408962249756
    4. ' ,' → logprob: -6.002241134643555
    5. ' ' → logprob: -8.627241134643555
    6. 'u' → logprob: -9.002241134643555
    7. 'a' → logprob: -9.127241134643555
    8. '  ' → logprob: -9.127241134643555
    9. 'um' → logprob: -9.127241134643555
    10. '   ' → logprob: -9.377241134643555

Token 47: ' r' (ID: 428)
  Prédit: ' m'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' m' → logprob: -0.7221587300300598
    2. ' ' → logprob: -1.472158670425415
    3. 'm' → logprob: -1.847158670425415
    4. ' k' → logprob: -2.972158670425415
    5. 'k' → logprob: -3.972158670425415
    6. ' space' → logprob: -4.972158908843994
    7. ' r' → logprob: -5.472158908843994
    8. ' n' → logprob: -5.472158908843994
    9. 'space' → logprob: -5.472158908843994
    10. ' rest' → logprob: -5.597158908843994

Token 48: ' =' (ID: 314)
  Prédit: '='
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '=' → logprob: -0.641167938709259
    2. ' =' → logprob: -0.766167938709259
    3. ',' → logprob: -4.766168117523193
    4. ')' → logprob: -12.016167640686035
    5. ' ' → logprob: -12.141167640686035
    6. '  ' → logprob: -13.266167640686035
    7. ' ,' → logprob: -13.891167640686035
    8. 's' → logprob: -14.016167640686035
    9. '=}' → logprob: -14.516167640686035
    10. '.' → logprob: -14.891167640686035

Token 49: ' vals' (ID: 58985)
  Prédit: ' vals'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' vals' → logprob: -0.07767756283283234
    2. ' next' → logprob: -2.7026774883270264
    3. 'vals' → logprob: -4.9526777267456055
    4. 'next' → logprob: -8.202677726745605
    5. ' val' → logprob: -8.827677726745605
    6. ' values' → logprob: -9.327677726745605
    7. '(vals' → logprob: -10.202677726745605
    8. ' ' → logprob: -10.702677726745605
    9. ' list' → logprob: -10.827677726745605
    10. '_vals' → logprob: -10.952677726745605

Token 50: '
' (ID: 198)
  Prédit: ''
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False

Token 51: '   ' (ID: 271)
  Prédit: '
'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '
' → logprob: -0.4384301006793976
    2. '   ' → logprob: -1.4384300708770752
    3. '	return' → logprob: -3.438430070877075
    4. 'return' → logprob: -3.938430070877075
    5. ' return' → logprob: -4.063430309295654
    6. '<|end|>' → logprob: -4.063430309295654
    7. '\n' → logprob: -4.563430309295654
    8. '    
' → logprob: -4.938430309295654
    9. '' → logprob: -5.563430309295654
    10. ':return' → logprob: -6.438430309295654

Token 52: ' return' (ID: 622)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.07044829428195953
    2. 'return' (adapté à ' return') → logprob: -2.945448398590088
    3. '<|end|>' → logprob: -5.320448398590088
    4. '    
' → logprob: -5.695448398590088
    5. '
' → logprob: -6.195448398590088
    6. '\n' → logprob: -6.695448398590088
    7. ' return' → logprob: -7.070448398590088
    8. 'n' → logprob: -7.070448398590088
    9. ' ' → logprob: -7.320448398590088
    10. '	return' → logprob: -7.695448398590088

Token 53: ' n' (ID: 297)
  Prédit: ' n'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' n' → logprob: -0.10046491026878357
    2. 'n' → logprob: -2.3504648208618164
    3. ' (' → logprob: -8.975464820861816
    4. '(n' → logprob: -9.350464820861816
    5. ' ' → logprob: -10.975464820861816
    6. '(' → logprob: -11.475464820861816
    7. '	n' → logprob: -11.850464820861816
    8. ' ' → logprob: -11.975464820861816
    9. '   ' → logprob: -13.225464820861816
    10. ',n' → logprob: -14.600464820861816

Token 54: ',' (ID: 11)
  Prédit: ','
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ',' → logprob: -0.14955510199069977
    2. ',r' → logprob: -2.024555206298828
    3. ' ,' → logprob: -5.524555206298828
    4. '<|end|>' → logprob: -6.524555206298828
    5. ',n' → logprob: -7.149555206298828
    6. ' r' → logprob: -7.774555206298828
    7. 'r' → logprob: -9.024555206298828
    8. ',
' → logprob: -10.024555206298828
    9. ' ' → logprob: -11.524555206298828
    10. ' n' → logprob: -12.274555206298828

Token 55: ' r' (ID: 428)
  Prédit: ' r'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' r' → logprob: -0.008932097814977169
    2. 'r' → logprob: -4.758932113647461
    3. ' ' → logprob: -8.133932113647461
    4. ' ' → logprob: -10.758932113647461
    5. 'space' → logprob: -13.508932113647461
    6. ' 
' → logprob: -14.883932113647461
    7. ' space' → logprob: -15.008932113647461
    8. '32' → logprob: -15.258932113647461
    9. '	r' → logprob: -16.00893211364746
    10. ' ​' → logprob: -16.50893211364746

Token 56: '

' (ID: 279)
  Prédit: '
'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '
' → logprob: -0.6323687434196472
    2. 'def' → logprob: -1.007368803024292
    3. '<|end|>' → logprob: -3.007368803024292
    4. '\n' → logprob: -3.757368803024292
    5. '```' → logprob: -4.382368564605713
    6. '\' → logprob: -5.007368564605713
    7. '#' → logprob: -5.507368564605713
    8. '

' → logprob: -6.257368564605713
    9. 'n' → logprob: -6.632368564605713
    10. '' → logprob: -6.757368564605713

Token 57: 'def' (ID: 1314)
  Prédit: 'def'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'def' → logprob: -0.0003510741807986051
    2. '
' → logprob: -8.500350952148438
    3. '\' → logprob: -10.500350952148438
    4. '```' → logprob: -10.500350952148438
    5. '#' → logprob: -10.625350952148438
    6. '

' → logprob: -11.375350952148438
    7. 'n' → logprob: -11.375350952148438
    8. '\n' → logprob: -11.875350952148438
    9. 'ndef' → logprob: -12.000350952148438
    10. '    
' → logprob: -12.250350952148438

Token 58: ' check' (ID: 2371)
  Prédit: ' calculate'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' calculate' → logprob: -0.10526647418737411
    2. ' main' → logprob: -3.105266571044922
    3. ' factorial' → logprob: -3.980266571044922
    4. ' compute' → logprob: -4.230266571044922
    5. ' bin' → logprob: -5.605266571044922
    6. ' combination' → logprob: -5.605266571044922
    7. ' combinations' → logprob: -5.730266571044922
    8. 'calculate' → logprob: -5.730266571044922
    9. ' choose' → logprob: -6.105266571044922
    10. ' solve' → logprob: -6.230266571044922

Token 59: '_g' (ID: 5439)
  Prédit: '_'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '_' → logprob: -0.21585284173488617
    2. '_space' → logprob: -3.090852737426758
    3. '_r' → logprob: -3.965852737426758
    4. '_values' → logprob: -4.215852737426758
    5. '(' → logprob: -4.590852737426758
    6. '_valid' → logprob: -4.715852737426758
    7. '_constraints' → logprob: -4.840852737426758
    8. '_value' → logprob: -5.215852737426758
    9. '_max' → logprob: -5.215852737426758
    10. '_equal' → logprob: -5.340852737426758

Token 60: 'reater' (ID: 110926)
  Prédit: 'reater'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'reater' → logprob: -0.1429629623889923
    2. 'r' → logprob: -3.14296293258667
    3. 'cd' → logprob: -3.14296293258667
    4. 't' → logprob: -3.39296293258667
    5. 'reat' → logprob: -5.14296293258667
    6. 'e' → logprob: -6.26796293258667
    7. '>' → logprob: -6.89296293258667
    8. '(r' → logprob: -7.51796293258667
    9. 'reate' → logprob: -7.51796293258667
    10. '```' → logprob: -7.89296293258667

Token 61: '_equal' (ID: 27882)
  Prédit: '_than'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_than' → logprob: -0.6356346607208252
    2. '_equal' → logprob: -1.0106346607208252
    3. '_' → logprob: -2.885634660720825
    4. '(' → logprob: -3.260634660720825
    5. '_equals' → logprob: -5.260634422302246
    6. '_or' → logprob: -5.385634422302246
    7. '_and' → logprob: -7.510634422302246
    8. 'than' → logprob: -7.885634422302246
    9. '(a' → logprob: -8.385634422302246
    10. '_then' → logprob: -8.885634422302246

Token 62: '_' (ID: 62)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(' → logprob: -0.3186880648136139
    2. '(n' → logprob: -1.3186880350112915
    3. ' (' → logprob: -5.943687915802002
    4. '(a' → logprob: -6.443687915802002
    5. '(s' → logprob: -8.06868839263916
    6. '(x' → logprob: -8.81868839263916
    7. '_' → logprob: -8.81868839263916
    8. '(r' → logprob: -9.19368839263916
    9. '(user' → logprob: -9.19368839263916
    10. '(value' → logprob: -9.69368839263916

Token 63: '10' (ID: 702)
  Prédit: '(n'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '(n' → logprob: -0.14190223813056946
    2. 'r' → logprob: -3.016902208328247
    3. 'n' → logprob: -3.266902208328247
    4. '(r' → logprob: -3.641902208328247
    5. '(' → logprob: -5.391902446746826
    6. 'vals' → logprob: -5.641902446746826
    7. 'than' → logprob: -5.641902446746826
    8. 'values' → logprob: -5.891902446746826
    9. '0' → logprob: -6.766902446746826
    10. '_than' → logprob: -7.516902446746826

Token 64: '(n' (ID: 2406)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(' → logprob: -0.10265132784843445
    2. '():' → logprob: -2.977651357650757
    3. '(n' → logprob: -3.727651357650757
    4. '(user' → logprob: -3.977651357650757
    5. '(def' → logprob: -6.602651119232178
    6. '(s' → logprob: -7.852651119232178
    7. ' (' → logprob: -8.227651596069336
    8. '(u' → logprob: -8.227651596069336
    9. '(x' → logprob: -8.852651596069336
    10. '(_' → logprob: -8.852651596069336

Token 65: '):
' (ID: 1883)
  Prédit: '):'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '):' → logprob: -0.047048307955265045
    2. ',' → logprob: -3.172048330307007
    3. ')' → logprob: -5.797048091888428
    4. '):
' → logprob: -7.672048091888428
    5. ' ):' → logprob: -8.297048568725586
    6. ',n' → logprob: -9.422048568725586
    7. ',r' → logprob: -9.547048568725586
    8. '   ' → logprob: -10.172048568725586
    9. ' ,' → logprob: -10.172048568725586
    10. ':' → logprob: -10.922048568725586

Token 66: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.00016325322212651372
    2. ':' → logprob: -9.250163078308105
    3. ' return' → logprob: -9.875163078308105
    4. '(' → logprob: -12.125163078308105
    5. 'return' → logprob: -12.375163078308105
    6. ' if' → logprob: -13.250163078308105
    7. ':
' → logprob: -14.500163078308105
    8. '  ' → logprob: -14.500163078308105
    9. ' ' → logprob: -14.625163078308105
    10. ':return' → logprob: -14.625163078308105

Token 67: ' return' (ID: 622)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.0020567618776112795
    2. ' return' → logprob: -6.50205659866333
    3. 'return' (adapté à ' return') → logprob: -8.127057075500488
    4. ' if' → logprob: -8.502057075500488
    5. 'if' → logprob: -9.877057075500488
    6. '```' → logprob: -12.627057075500488
    7. '    ' → logprob: -15.002057075500488
    8. ' ' → logprob: -15.252057075500488
    9. '  ' → logprob: -15.627057075500488
    10. '   ' → logprob: -15.752057075500488

Token 68: ' n' (ID: 297)
  Prédit: ' n'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' n' → logprob: -0.038058701902627945
    2. 'n' → logprob: -3.2880587577819824
    3. '   ' → logprob: -11.538058280944824
    4. ' ' → logprob: -12.538058280944824
    5. ' ' → logprob: -13.413058280944824
    6. ' (' → logprob: -14.038058280944824
    7. '(n' → logprob: -14.163058280944824
    8. '	n' → logprob: -14.163058280944824
    9. '(' → logprob: -15.413058280944824
    10. '10' → logprob: -16.78805923461914

Token 69: ' >=' (ID: 5064)
  Prédit: ' >='
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' >=' → logprob: -0.07033885270357132
    2. '>=' → logprob: -2.6953389644622803
    3. ' ' → logprob: -8.32033920288086
    4. ' >' → logprob: -9.57033920288086
    5. '>' → logprob: -9.94533920288086
    6. '   ' → logprob: -11.19533920288086
    7. '  ' → logprob: -12.07033920288086
    8. ' ' → logprob: -12.19533920288086
    9. '[' → logprob: -12.57033920288086
    10. ')>=' → logprob: -12.82033920288086

Token 70: ' ' (ID: 220)
  Prédit: '10'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '10' → logprob: -0.11282315850257874
    2. ' ' → logprob: -2.237823247909546
    3. ' ' → logprob: -14.862823486328125
    4. '1' → logprob: -15.737823486328125
    5. '```' → logprob: -16.237823486328125
    6. '_' → logprob: -16.612823486328125
    7. '100' → logprob: -17.112823486328125
    8. '   ' → logprob: -17.550323486328125
    9. '`' → logprob: -17.675323486328125
    10. '0' → logprob: -17.862823486328125

Token 71: '10' (ID: 702)
  Prédit: '10'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '10' → logprob: -1.6166903151315637e-05
    2. ' ' → logprob: -11.125016212463379
    3. '1' → logprob: -13.500016212463379
    4. '   ' → logprob: -17.000015258789062
    5. '```' → logprob: -18.875015258789062
    6. '100' → logprob: -19.375015258789062
    7. '  ' → logprob: -19.375015258789062
    8. '１０' → logprob: -19.750015258789062
    9. '0' → logprob: -19.875015258789062
    10. '`' → logprob: -20.375015258789062

Token 72: '

' (ID: 279)
  Prédit: 'def'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'def' → logprob: -0.05813059210777283
    2. '
' → logprob: -3.5581305027008057
    3. '

' → logprob: -3.8081305027008057
    4. '<|end|>' → logprob: -5.308130741119385
    5. '```' → logprob: -7.808130741119385
    6. '\n' → logprob: -8.933130264282227
    7. '<|end|>' → logprob: -9.308130264282227
    8. '\' → logprob: -10.058130264282227
    9. 'newline' → logprob: -10.308130264282227
    10. ' def' → logprob: -10.558130264282227

Token 73: 'def' (ID: 1314)
  Prédit: 'def'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'def' → logprob: -0.007026745937764645
    2. '
' → logprob: -5.757026672363281
    3. '<|end|>' → logprob: -6.507026672363281
    4. '\n' → logprob: -6.882026672363281
    5. '```' → logprob: -7.257026672363281
    6. '

' → logprob: -8.132026672363281
    7. '\' → logprob: -9.007026672363281
    8. '<|end|>' → logprob: -9.632026672363281
    9. '#' → logprob: -10.257026672363281
    10. 'ndef' → logprob: -10.757026672363281

Token 74: ' calculate' (ID: 17950)
  Prédit: ' check'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' check' → logprob: -0.36384743452072144
    2. ' main' → logprob: -1.8638474941253662
    3. 'check' → logprob: -2.738847494125366
    4. ' def' → logprob: -4.113847255706787
    5. ' is' → logprob: -4.238847255706787
    6. 'def' → logprob: -4.363847255706787
    7. 'main' → logprob: -4.488847255706787
    8. ' calculate' → logprob: -4.488847255706787
    9. 'calculate' → logprob: -5.363847255706787
    10. ' process' → logprob: -5.613847255706787

Token 75: '_result' (ID: 11623)
  Prédit: '_factor'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '_factor' → logprob: -0.8883230686187744
    2. '(n' → logprob: -1.2633230686187744
    3. '(' → logprob: -2.5133230686187744
    4. '_r' → logprob: -2.6383230686187744
    5. '(r' → logprob: -3.3883230686187744
    6. '_com' → logprob: -3.5133230686187744
    7. '_comb' → logprob: -3.5133230686187744
    8. '_' → logprob: -4.513322830200195
    9. 'factor' → logprob: -5.013322830200195
    10. ' (' → logprob: -5.013322830200195

Token 76: '_case' (ID: 43667)
  Prédit: '(n'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '(n' → logprob: -0.00796467438340187
    2. '(' → logprob: -4.882964611053467
    3. ' (' → logprob: -8.007965087890625
    4. '(r' → logprob: -11.007965087890625
    5. ':' → logprob: -13.007965087890625
    6. '(s' → logprob: -13.507965087890625
    7. 'def' → logprob: -13.632965087890625
    8. '```' → logprob: -14.257965087890625
    9. '(a' → logprob: -14.382965087890625
    10. '():' → logprob: -14.382965087890625

Token 77: '_true' (ID: 37108)
  Prédit: '(n'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '(n' → logprob: -0.12840518355369568
    2. 's' → logprob: -2.7534050941467285
    3. '(' → logprob: -3.3784050941467285
    4. '1' → logprob: -4.7534050941467285
    5. '(r' → logprob: -4.8784050941467285
    6. '_' → logprob: -5.5034050941467285
    7. '(case' → logprob: -6.8784050941467285
    8. '(s' → logprob: -7.7534050941467285
    9. '_n' → logprob: -8.628405570983887
    10. '_one' → logprob: -8.753405570983887

Token 78: '(r' (ID: 4729)
  Prédit: '(n'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(n' → logprob: -0.008404525928199291
    2. '(' → logprob: -4.883404731750488
    3. '(r' → logprob: -7.508404731750488
    4. '():' → logprob: -9.008404731750488
    5. ':' → logprob: -9.758404731750488
    6. ' (' → logprob: -10.133404731750488
    7. '(s' → logprob: -11.258404731750488
    8. '((' → logprob: -12.758404731750488
    9. '   ' → logprob: -13.133404731750488
    10. 's' → logprob: -13.508404731750488

Token 79: '):
' (ID: 1883)
  Prédit: '):'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '):' → logprob: -0.03776407614350319
    2. '):
' → logprob: -4.412764072418213
    3. ',' → logprob: -5.162764072418213
    4. '*' → logprob: -5.287764072418213
    5. ' *' → logprob: -5.287764072418213
    6. '   ' → logprob: -5.537764072418213
    7. ')' → logprob: -6.037764072418213
    8. ' ):' → logprob: -6.912764072418213
    9. '**' → logprob: -7.162764072418213
    10. ':' → logprob: -8.287764549255371

Token 80: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.40222981572151184
    2. ' return' → logprob: -2.1522297859191895
    3. ' r' → logprob: -2.6522297859191895
    4. 'return' → logprob: -2.6522297859191895
    5. 'r' → logprob: -3.4022297859191895
    6. '=' → logprob: -4.1522297859191895
    7. ' ' → logprob: -5.7772297859191895
    8. '0' → logprob: -6.0272297859191895
    9. ' =' → logprob: -6.1522297859191895
    10. '20' → logprob: -6.1522297859191895

Token 81: ' return' (ID: 622)
  Prédit: 'r'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'r' → logprob: -0.3295693099498749
    2. 'return' (adapté à ' return') → logprob: -1.9545693397521973
    3. ' r' → logprob: -2.9545693397521973
    4. '(' → logprob: -4.079569339752197
    5. ' return' → logprob: -4.079569339752197
    6. '10' → logprob: -4.579569339752197
    7. '2' → logprob: -4.579569339752197
    8. '   ' → logprob: -4.954569339752197
    9. '(r' → logprob: -5.704569339752197
    10. '1' → logprob: -6.204569339752197

Token 82: ' r' (ID: 428)
  Prédit: ' r'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' r' → logprob: -0.6961041688919067
    2. 'r' → logprob: -0.9461041688919067
    3. ' (' → logprob: -3.446104049682617
    4. ' ' → logprob: -3.696104049682617
    5. '(' → logprob: -3.821104049682617
    6. '10' → logprob: -4.821104049682617
    7. '2' → logprob: -4.946104049682617
    8. '(r' → logprob: -5.196104049682617
    9. '1' → logprob: -6.071104049682617
    10. '3' → logprob: -6.696104049682617

Token 83: '

' (ID: 279)
  Prédit: 'def'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'def' → logprob: -0.8331371545791626
    2. '*' → logprob: -1.3331371545791626
    3. '<|end|>' → logprob: -1.4581371545791626
    4. '+' → logprob: -3.458137035369873
    5. 'else' → logprob: -3.708137035369873
    6. '<|end|>' → logprob: -4.958137035369873
    7. ' else' → logprob: -6.708137035369873
    8. ' *' → logprob: -6.833137035369873
    9. 'elif' → logprob: -7.083137035369873
    10. '```' → logprob: -7.583137035369873

Token 84: 'def' (ID: 1314)
  Prédit: 'def'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'def' → logprob: -1.1756367712223437e-05
    2. 'else' → logprob: -11.750011444091797
    3. ' def' → logprob: -13.375011444091797
    4. '<|end|>' → logprob: -13.500011444091797
    5. '```' → logprob: -15.000011444091797
    6. 'elif' → logprob: -15.375011444091797
    7. '<|end|>' → logprob: -15.750011444091797
    8. ')' → logprob: -16.750011444091797
    9. '*' → logprob: -17.625011444091797
    10. '0' → logprob: -18.250011444091797

Token 85: ' calculate' (ID: 17950)
  Prédit: ' calculate'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' calculate' → logprob: -0.013682926073670387
    2. 'calculate' → logprob: -4.388682842254639
    3. ' check' → logprob: -7.388682842254639
    4. '_' → logprob: -8.638683319091797
    5. ' ' → logprob: -8.763683319091797
    6. 'c' → logprob: -10.138683319091797
    7. ' def' → logprob: -10.263683319091797
    8. ' _' → logprob: -10.888683319091797
    9. ' calcul' → logprob: -11.013683319091797
    10. ' calc' → logprob: -11.138683319091797

Token 86: '_result' (ID: 11623)
  Prédit: '_result'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_result' → logprob: -0.0004791704413946718
    2. '_case' → logprob: -7.750479221343994
    3. 'result' → logprob: -11.375478744506836
    4. '_results' → logprob: -11.750478744506836
    5. '_r' → logprob: -12.000478744506836
    6. '_' → logprob: -12.375478744506836
    7. '_output' → logprob: -12.875478744506836
    8. '_res' → logprob: -13.000478744506836
    9. ' _' → logprob: -13.125478744506836
    10. '_value' → logprob: -13.875478744506836

Token 87: '_case' (ID: 43667)
  Prédit: '_case'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_case' → logprob: -0.00019197762594558299
    2. '_false' → logprob: -9.125191688537598
    3. '_' → logprob: -11.000191688537598
    4. '_else' → logprob: -11.250191688537598
    5. '(' → logprob: -11.375191688537598
    6. '```' → logprob: -11.500191688537598
    7. ' _' → logprob: -12.000191688537598
    8. '(r' → logprob: -12.000191688537598
    9. ' ' → logprob: -13.000191688537598
    10. '_c' → logprob: -13.125191688537598

Token 88: '_false' (ID: 96094)
  Prédit: '_false'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_false' → logprob: -1.5048530030981055e-06
    2. '_else' → logprob: -14.250001907348633
    3. '_true' → logprob: -14.625001907348633
    4. '_' → logprob: -16.125001907348633
    5. '_f' → logprob: -16.375001907348633
    6. 'False' → logprob: -16.875001907348633
    7. '_FALSE' → logprob: -17.750001907348633
    8. '_fake' → logprob: -18.125001907348633
    9. '_other' → logprob: -18.375001907348633
    10. '_none' → logprob: -18.500001907348633

Token 89: '(n' (ID: 2406)
  Prédit: ' ('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' (' → logprob: -1.1947660446166992
    2. '(n' → logprob: -1.3197660446166992
    3. '(r' → logprob: -1.3197660446166992
    4. '(' → logprob: -1.8197660446166992
    5. '   ' → logprob: -8.1947660446167
    6. '(s' → logprob: -9.1947660446167
    7. '(
' → logprob: -9.5697660446167
    8. ' ' → logprob: -9.9447660446167
    9. '():' → logprob: -9.9447660446167
    10. '((' → logprob: -10.8197660446167

Token 90: ',' (ID: 11)
  Prédit: ','
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ',' → logprob: -0.04436875507235527
    2. '):' → logprob: -3.7943687438964844
    3. ',r' → logprob: -5.044368743896484
    4. ')' → logprob: -5.169368743896484
    5. ' ,' → logprob: -5.669368743896484
    6. '-' → logprob: -5.919368743896484
    7. ',n' → logprob: -7.044368743896484
    8. ' -' → logprob: -7.169368743896484
    9. ' ):' → logprob: -8.544368743896484
    10. ' ' → logprob: -8.669368743896484

Token 91: ' r' (ID: 428)
  Prédit: ' r'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' r' → logprob: -0.2522618770599365
    2. 'r' → logprob: -1.5022618770599365
    3. ' ' → logprob: -9.002262115478516
    4. ')' → logprob: -9.252262115478516
    5. ' )' → logprob: -9.877262115478516
    6. ' n' → logprob: -11.002262115478516
    7. ' 
' → logprob: -12.002262115478516
    8. 'n' → logprob: -12.002262115478516
    9. '
' → logprob: -12.252262115478516
    10. ',' → logprob: -12.377262115478516

Token 92: '):
' (ID: 1883)
  Prédit: '):'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '):' → logprob: -0.0018128673546016216
    2. '):
' → logprob: -6.876812934875488
    3. ':' → logprob: -8.001812934875488
    4. ')' → logprob: -8.501812934875488
    5. '   ' → logprob: -8.751812934875488
    6. ',' → logprob: -10.251812934875488
    7. ' ):' → logprob: -10.626812934875488
    8. '*' → logprob: -11.751812934875488
    9. '-' → logprob: -12.251812934875488
    10. ' ' → logprob: -12.876812934875488

Token 93: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.4503626823425293
    2. ' return' → logprob: -1.7003626823425293
    3. 'return' → logprob: -1.8253626823425293
    4. 'n' → logprob: -5.700362682342529
    5. '10' → logprob: -5.700362682342529
    6. 'r' → logprob: -6.700362682342529
    7. '20' → logprob: -6.700362682342529
    8. ' r' → logprob: -6.825362682342529
    9. ' (' → logprob: -7.200362682342529
    10. ' n' → logprob: -7.200362682342529

Token 94: ' return' (ID: 622)
  Prédit: 'return'
  Correct (stricte): False
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'return' (adapté à ' return') → logprob: -0.3150084614753723
    2. ' return' → logprob: -1.6900084018707275
    3. 'n' → logprob: -4.315008640289307
    4. '(' → logprob: -4.440008640289307
    5. '(n' → logprob: -4.565008640289307
    6. 'r' → logprob: -4.815008640289307
    7. 'max' → logprob: -5.315008640289307
    8. ' n' → logprob: -5.565008640289307
    9. '0' → logprob: -5.565008640289307
    10. '2' → logprob: -5.690008640289307

Token 95: ' r' (ID: 428)
  Prédit: 'n'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'n' → logprob: -1.4141080379486084
    2. '(n' → logprob: -1.6641080379486084
    3. ' n' → logprob: -1.9141080379486084
    4. 'r' → logprob: -2.0391080379486084
    5. ' (' → logprob: -2.2891080379486084
    6. ' r' → logprob: -2.9141080379486084
    7. '(' → logprob: -3.6641080379486084
    8. '(r' → logprob: -4.0391082763671875
    9. '10' → logprob: -4.6641082763671875
    10. '2' → logprob: -4.6641082763671875

Token 96: ' +' (ID: 659)
  Prédit: ' %'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' %' → logprob: -0.8220522403717041
    2. '%' → logprob: -1.197052240371704
    3. ' *' → logprob: -2.697052240371704
    4. '-' → logprob: -2.822052240371704
    5. '*' → logprob: -3.072052240371704
    6. ' -' → logprob: -3.322052240371704
    7. '+' → logprob: -3.822052240371704
    8. ' +' → logprob: -4.322052001953125
    9. ' //' → logprob: -5.822052001953125
    10. '-n' → logprob: -6.197052001953125

Token 97: ' ' (ID: 220)
  Prédit: 'n'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'n' → logprob: -0.8269314765930176
    2. '10' → logprob: -1.5769314765930176
    3. '(n' → logprob: -1.7019314765930176
    4. '1' → logprob: -3.0769314765930176
    5. ' n' → logprob: -3.0769314765930176
    6. '(' → logprob: -3.2019314765930176
    7. ' (' → logprob: -4.701931476593018
    8. ' ' → logprob: -4.826931476593018
    9. '2' → logprob: -5.076931476593018
    10. '5' → logprob: -5.201931476593018

Token 98: '100' (ID: 1353)
  Prédit: 'n'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'n' → logprob: -0.3819703161716461
    2. '10' → logprob: -2.0069704055786133
    3. '(n' → logprob: -2.2569704055786133
    4. '1' → logprob: -3.3819704055786133
    5. '(' → logprob: -3.7569704055786133
    6. '100' → logprob: -5.006970405578613
    7. '5' → logprob: -5.506970405578613
    8. '2' → logprob: -5.631970405578613
    9. '20' → logprob: -6.756970405578613
    10. ' n' → logprob: -7.256970405578613

Token 99: ' *' (ID: 425)
  Prédit: 'def'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'def' → logprob: -0.016230257228016853
    2. '
' → logprob: -4.14123010635376
    3. '<|end|>' → logprob: -9.516230583190918
    4. '

' → logprob: -9.766230583190918
    5. '```' → logprob: -10.391230583190918
    6. '\' → logprob: -11.766230583190918
    7. '  
' → logprob: -11.891230583190918
    8. '    
' → logprob: -12.391230583190918
    9. '\n' → logprob: -12.641230583190918
    10. 'n' → logprob: -12.641230583190918

Token 100: ' (' (ID: 350)
  Prédit: 'n'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'n' → logprob: -0.1728866547346115
    2. '(' → logprob: -2.547886610031128
    3. '(n' → logprob: -2.547886610031128
    4. ' n' → logprob: -6.547886848449707
    5. ' (' → logprob: -7.172886848449707
    6. '((' → logprob: -10.797886848449707
    7. '0' → logprob: -11.297886848449707
    8. '10' → logprob: -11.547886848449707
    9. '	n' → logprob: -11.672886848449707
    10. ' ' → logprob: -12.297886848449707

Token 101: '10' (ID: 702)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(' → logprob: -0.29087841510772705
    2. 'n' → logprob: -1.540878415107727
    3. '10' → logprob: -3.9158782958984375
    4. '(n' → logprob: -5.0408782958984375
    5. '1' → logprob: -5.2908782958984375
    6. ' (' → logprob: -5.4158782958984375
    7. ' n' → logprob: -6.7908782958984375
    8. ' ' → logprob: -7.4158782958984375
    9. '0' → logprob: -8.415878295898438
    10. '9' → logprob: -9.040878295898438

Token 102: ' -' (ID: 533)
  Prédit: ' -'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' -' → logprob: -0.2157221883535385
    2. '-' → logprob: -2.21572208404541
    3. '-n' → logprob: -2.46572208404541
    4. ' ' → logprob: -11.09072208404541
    5. '-min' → logprob: -13.96572208404541
    6. 'n' → logprob: -14.09072208404541
    7. '0' → logprob: -15.34072208404541
    8. '   ' → logprob: -15.46572208404541
    9. '-r' → logprob: -15.46572208404541
    10. '-н' → logprob: -15.71572208404541

Token 103: ' n' (ID: 297)
  Prédit: 'n'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'n' → logprob: -0.038043901324272156
    2. ' n' → logprob: -3.288043975830078
    3. '	n' → logprob: -12.913043975830078
    4. ' ' → logprob: -17.288043975830078
    5. ')n' → logprob: -17.288043975830078
    6. '   ' → logprob: -18.288043975830078
    7. '(n' → logprob: -19.913043975830078
    8. '10' → logprob: -20.038043975830078
    9. '
' → logprob: -20.288043975830078
    10. '_n' → logprob: -20.663043975830078

Token 104: ')

' (ID: 1029)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ')' → logprob: -1.1517960956552997e-05
    2. ' )' → logprob: -11.500011444091797
    3. '))' → logprob: -14.500011444091797
    4. ')
' → logprob: -15.375011444091797
    5. ')}' → logprob: -15.375011444091797
    6. ')}}' → logprob: -16.250011444091797
    7. ')))' → logprob: -16.500011444091797
    8. '}' → logprob: -17.250011444091797
    9. ')`' → logprob: -17.625011444091797
    10. 'def' → logprob: -17.750011444091797

Token 105: 'def' (ID: 1314)
  Prédit: 'def'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'def' → logprob: -0.001227965927682817
    2. 'for' → logprob: -6.751227855682373
    3. 'print' → logprob: -10.501228332519531
    4. 'if' → logprob: -10.876228332519531
    5. 'n' → logprob: -11.876228332519531
    6. 'while' → logprob: -13.626228332519531
    7. ' for' → logprob: -14.126228332519531
    8. '#' → logprob: -14.626228332519531
    9. '```' → logprob: -14.626228332519531
    10. ' def' → logprob: -14.751228332519531

Token 106: ' print' (ID: 2123)
  Prédit: ' calculate'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' calculate' → logprob: -0.9134984612464905
    2. ' get' → logprob: -1.6634984016418457
    3. ' compute' → logprob: -2.0384984016418457
    4. ' process' → logprob: -2.6634984016418457
    5. ' main' → logprob: -2.7884984016418457
    6. 'calculate' → logprob: -2.9134984016418457
    7. ' result' → logprob: -4.038498401641846
    8. 'compute' → logprob: -4.538498401641846
    9. 'get' → logprob: -4.663498401641846
    10. ' calc' → logprob: -4.788498401641846

Token 107: '_result' (ID: 11623)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(' → logprob: -0.4710138738155365
    2. '_result' → logprob: -1.2210139036178589
    3. '_' → logprob: -2.5960137844085693
    4. '_results' → logprob: -5.846014022827148
    5. '()' → logprob: -7.221014022827148
    6. '(result' → logprob: -7.471014022827148
    7. '(_' → logprob: -7.971014022827148
    8. '("_' → logprob: -8.221014022827148
    9. '_output' → logprob: -8.346014022827148
    10. 'result' → logprob: -8.471014022827148

Token 108: '(res' (ID: 8331)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(' → logprob: -0.5762436985969543
    2. '(result' → logprob: -0.8262436985969543
    3. '(results' → logprob: -9.70124340057373
    4. ' (' → logprob: -9.82624340057373
    5. '()' → logprob: -9.82624340057373
    6. '(res' → logprob: -10.70124340057373
    7. '(def' → logprob: -11.07624340057373
    8. '(n' → logprob: -11.20124340057373
    9. '(value' → logprob: -11.57624340057373
    10. '(case' → logprob: -11.82624340057373

Token 109: '):
' (ID: 1883)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')' → logprob: -0.4928087890148163
    2. 'ult' → logprob: -0.9928088188171387
    3. '):
' → logprob: -4.242808818817139
    4. '):' → logprob: -5.742808818817139
    5. ')
' → logprob: -7.742808818817139
    6. 'ust' → logprob: -8.49280834197998
    7. 'ultat' → logprob: -9.61780834197998
    8. 'ut' → logprob: -9.86780834197998
    9. '):

' → logprob: -10.36780834197998
    10. 'lt' → logprob: -10.74280834197998

Token 110: '   ' (ID: 271)
  Prédit: ' print'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' print' → logprob: -0.4747229516506195
    2. '   ' → logprob: -0.9747229814529419
    3. 'print' → logprob: -7.349722862243652
    4. '```' → logprob: -13.224722862243652
    5. '   ' → logprob: -14.849722862243652
    6. '	print' → logprob: -15.224722862243652
    7. ' def' → logprob: -15.474722862243652
    8. ' println' → logprob: -16.59972381591797
    9. '(print' → logprob: -16.97472381591797
    10. 'def' → logprob: -17.09972381591797

Token 111: ' print' (ID: 2123)
  Prédit: 'print'
  Correct (stricte): False
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'print' (adapté à ' print') → logprob: -0.0009131324477493763
    2. ' print' → logprob: -7.000913143157959
    3. '   ' → logprob: -13.3759126663208
    4. 'def' → logprob: -16.750913619995117
    5. '```' → logprob: -18.250913619995117
    6. 'pass' → logprob: -22.000913619995117
    7. '`' → logprob: -22.125913619995117
    8. 'return' → logprob: -22.500913619995117
    9. '	print' → logprob: -22.625913619995117
    10. 'for' → logprob: -22.750913619995117

Token 112: '(res' (ID: 8331)
  Prédit: '(res'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(res' → logprob: -0.07889342308044434
    2. '(' → logprob: -2.5788934230804443
    3. ' (' → logprob: -13.453893661499023
    4. '(result' → logprob: -13.953893661499023
    5. '(
' → logprob: -14.453893661499023
    6. 'res' → logprob: -14.828893661499023
    7. '()' → logprob: -15.328893661499023
    8. '(

' → logprob: -16.203893661499023
    9. '('' → logprob: -18.578893661499023
    10. '(`' → logprob: -18.578893661499023

Token 113: ')

' (ID: 1029)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')' → logprob: -1.9361264946837764e-07
    2. ')
' → logprob: -17.0
    3. ' )' → logprob: -17.5
    4. ')`' → logprob: -18.25
    5. '))' → logprob: -18.75
    6. '()' → logprob: -19.375
    7. '),' → logprob: -20.25
    8. ')

' → logprob: -20.75
    9. ')}' → logprob: -21.0
    10. '())' → logprob: -21.0

Token 114: 'def' (ID: 1314)
  Prédit: 'def'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'def' → logprob: -0.00028815300902351737
    2. 'for' → logprob: -8.250288009643555
    3. 'if' → logprob: -11.250288009643555
    4. 'user' → logprob: -11.250288009643555
    5. 'n' → logprob: -15.500288009643555
    6. '```' → logprob: -15.500288009643555
    7. ' def' → logprob: -15.625288009643555
    8. 'try' → logprob: -16.000288009643555
    9. 'data' → logprob: -16.750288009643555
    10. 'while' → logprob: -16.750288009643555

Token 115: ' main' (ID: 2758)
  Prédit: 'main'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'main' → logprob: -0.1604004055261612
    2. ' main' → logprob: -1.910400390625
    3. 'process' → logprob: -9.160400390625
    4. 'run' → logprob: -10.160400390625
    5. ' process' → logprob: -11.410400390625
    6. 'def' → logprob: -11.660400390625
    7. ' run' → logprob: -12.035400390625
    8. 'solve' → logprob: -12.785400390625
    9. 'calculate' → logprob: -14.035400390625
    10. 'execute' → logprob: -14.410400390625

Token 116: '():
' (ID: 8595)
  Prédit: '():'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '():' → logprob: -2.4391956685576588e-05
    2. '():
' → logprob: -11.375024795532227
    3. ' ():' → logprob: -11.375024795532227
    4. '()' → logprob: -14.375024795532227
    5. '(' → logprob: -14.750024795532227
    6. '_' → logprob: -14.875024795532227
    7. '():
' → logprob: -17.250024795532227
    8. '(:' → logprob: -19.000024795532227
    9. ':' → logprob: -19.000024795532227
    10. '(":' → logprob: -19.500024795532227

Token 117: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.025624854490160942
    2. ' user' → logprob: -4.025624752044678
    3. 'user' → logprob: -4.900624752044678
    4. '    
' → logprob: -13.400625228881836
    5. '	user' → logprob: -13.650625228881836
    6. 'input' → logprob: -14.900625228881836
    7. '   ' → logprob: -14.900625228881836
    8. ' while' → logprob: -14.900625228881836
    9. '_user' → logprob: -15.650625228881836
    10. '    ' → logprob: -15.650625228881836

Token 118: ' user' (ID: 1825)
  Prédit: 'user'
  Correct (stricte): False
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'user' (adapté à ' user') → logprob: -0.5950568318367004
    2. ' user' → logprob: -0.8450568318367004
    3. '   ' → logprob: -3.9700567722320557
    4. '    
' → logprob: -11.345056533813477
    5. 'while' → logprob: -11.595056533813477
    6. ' ' → logprob: -11.845056533813477
    7. ' while' → logprob: -11.970056533813477
    8. '	user' → logprob: -12.095056533813477
    9. '  ' → logprob: -12.845056533813477
    10. ' raw' → logprob: -13.470056533813477

Token 119: '_input' (ID: 12507)
  Prédit: '_input'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_input' → logprob: -0.0067266179248690605
    2. '_' → logprob: -5.0067267417907715
    3. '_user' → logprob: -11.881726264953613
    4. '_in' → logprob: -12.881726264953613
    5. ' _' → logprob: -14.006726264953613
    6. '_Input' → logprob: -15.256726264953613
    7. '_inputs' → logprob: -15.881726264953613
    8. '_output' → logprob: -16.00672721862793
    9. '_i' → logprob: -16.38172721862793
    10. '_
' → logprob: -16.75672721862793

Token 120: ' =' (ID: 314)
  Prédit: ' ='
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' =' → logprob: -0.02326551079750061
    2. '=' → logprob: -3.7732656002044678
    3. '()' → logprob: -11.773265838623047
    4. ' ' → logprob: -11.773265838623047
    5. '_' → logprob: -13.148265838623047
    6. '(' → logprob: -13.898265838623047
    7. ')' → logprob: -14.398265838623047
    8. '   ' → logprob: -15.273265838623047
    9. '  ' → logprob: -15.773265838623047
    10. ' ()' → logprob: -15.773265838623047

Token 121: ' get' (ID: 717)
  Prédit: 'get'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'get' → logprob: -0.38688844442367554
    2. ' get' → logprob: -1.1368885040283203
    3. '(get' → logprob: -11.63688850402832
    4. 'input' → logprob: -12.76188850402832
    5. ' input' → logprob: -12.88688850402832
    6. '	get' → logprob: -13.13688850402832
    7. ' ' → logprob: -14.88688850402832
    8. '   ' → logprob: -15.38688850402832
    9. '=get' → logprob: -15.51188850402832
    10. ')get' → logprob: -15.63688850402832

Token 122: '_input' (ID: 12507)
  Prédit: '_input'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_input' → logprob: -0.0007725820760242641
    2. '_' → logprob: -7.250772476196289
    3. '_user' → logprob: -9.750772476196289
    4. ' _' → logprob: -13.375772476196289
    5. '_Input' → logprob: -14.500772476196289
    6. '_inputs' → logprob: -14.750772476196289
    7. '()' → logprob: -15.000772476196289
    8. ')_' → logprob: -15.250772476196289
    9. '_output' → logprob: -15.250772476196289
    10. ')' → logprob: -15.375772476196289

Token 123: '()
' (ID: 1234)
  Prédit: '()'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '()' → logprob: -4.246537173457909e-06
    2. '()
' → logprob: -12.625003814697266
    3. '()

' → logprob: -15.000003814697266
    4. ' ()' → logprob: -16.000003814697266
    5. '())' → logprob: -16.250003814697266
    6. '()`' → logprob: -16.375003814697266
    7. '()"' → logprob: -16.500003814697266
    8. '(' → logprob: -16.750003814697266
    9. '().' → logprob: -17.125003814697266
    10. '()<' → logprob: -17.250003814697266

Token 124: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.47856125235557556
    2. '
' → logprob: -1.103561282157898
    3. '    
' → logprob: -3.6035611629486084
    4. 'tokens' → logprob: -5.1035614013671875
    5. '  
' → logprob: -5.1035614013671875
    6. ' tokens' → logprob: -6.7285614013671875
    7. ' splitted' → logprob: -6.7285614013671875
    8. ' 
' → logprob: -6.8535614013671875
    9. 'user' → logprob: -6.9785614013671875
    10. '   
' → logprob: -7.1035614013671875

Token 125: ' splitted' (ID: 183889)
  Prédit: ' strs'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' strs' → logprob: -0.6288114786148071
    2. 'vals' → logprob: -2.5038113594055176
    3. ' splitted' → logprob: -2.6288113594055176
    4. 'str' → logprob: -2.6288113594055176
    5. ' vals' → logprob: -2.8788113594055176
    6. ' values' → logprob: -3.3788113594055176
    7. ' parts' → logprob: -3.3788113594055176
    8. 'values' → logprob: -3.5038113594055176
    9. 'tokens' → logprob: -3.8788113594055176
    10. ' tokens' → logprob: -4.003811359405518

Token 126: ' =' (ID: 314)
  Prédit: '_input'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_input' → logprob: -0.2163340151309967
    2. '_user' → logprob: -1.7163339853286743
    3. '_' → logprob: -4.341333866119385
    4. ' =' → logprob: -7.091333866119385
    5. '=' → logprob: -7.341333866119385
    6. '_output' → logprob: -9.716334342956543
    7. 'user' → logprob: -9.841334342956543
    8. '_values' → logprob: -10.341334342956543
    9. '(user' → logprob: -10.591334342956543
    10. '_words' → logprob: -10.966334342956543

Token 127: ' split' (ID: 12648)
  Prédit: 'split'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'split' → logprob: -0.02975071594119072
    2. ' split' → logprob: -3.5297508239746094
    3. '(split' → logprob: -15.40475082397461
    4. 'spl' → logprob: -16.77975082397461
    5. 'user' → logprob: -18.77975082397461
    6. '   ' → logprob: -19.65475082397461
    7. '.split' → logprob: -20.40475082397461
    8. ' ' → logprob: -20.52975082397461
    9. 'plit' → logprob: -21.02975082397461
    10. 's' → logprob: -21.15475082397461

Token 128: '_input' (ID: 12507)
  Prédit: '_input'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_input' → logprob: -3.15441757265944e-05
    2. '_user' → logprob: -10.500031471252441
    3. '_' → logprob: -12.625031471252441
    4. 'input' → logprob: -14.625031471252441
    5. '(input' → logprob: -16.750032424926758
    6. '(user' → logprob: -16.875032424926758
    7. 'user' → logprob: -17.125032424926758
    8. '_inputs' → logprob: -17.125032424926758
    9. '_output' → logprob: -17.500032424926758
    10. 's' → logprob: -17.750032424926758

Token 129: '(user' (ID: 7195)
  Prédit: '(user'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(user' → logprob: -7.123899558791891e-05
    2. '(' → logprob: -9.62507152557373
    3. '(s' → logprob: -12.25007152557373
    4. 'user' → logprob: -15.25007152557373
    5. ' (' → logprob: -16.875070571899414
    6. '(users' → logprob: -17.375070571899414
    7. '(User' → logprob: -18.375070571899414
    8. '(input' → logprob: -18.750070571899414
    9. '=user' → logprob: -19.125070571899414
    10. '(
' → logprob: -19.250070571899414

Token 130: '_input' (ID: 12507)
  Prédit: '_input'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_input' → logprob: -9.090760431718081e-05
    2. 'input' → logprob: -9.375090599060059
    3. 'put' → logprob: -12.625090599060059
    4. '_' → logprob: -13.125090599060059
    5. ')' → logprob: -15.375090599060059
    6. 'Input' → logprob: -15.875090599060059
    7. '_user' → logprob: -16.375091552734375
    8. '_output' → logprob: -16.875091552734375
    9. 's' → logprob: -17.125091552734375
    10. '_)' → logprob: -17.125091552734375

Token 131: ')
' (ID: 446)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')' → logprob: -0.00013452880375552922
    2. '(user' → logprob: -9.000134468078613
    3. ')
' → logprob: -12.375134468078613
    4. '   ' → logprob: -13.375134468078613
    5. 'user' → logprob: -13.625134468078613
    6. ' )' → logprob: -13.750134468078613
    7. '(' → logprob: -14.125134468078613
    8. ',' → logprob: -14.250134468078613
    9. ' ' → logprob: -15.000134468078613
    10. '[user' → logprob: -15.125134468078613

Token 132: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.11390068382024765
    2. 'vals' → logprob: -2.488900661468506
    3. ' vals' → logprob: -4.238900661468506
    4. 'ints' → logprob: -4.863900661468506
    5. 'converted' → logprob: -7.488900661468506
    6. '    
' → logprob: -7.738900661468506
    7. '(vals' → logprob: -8.113901138305664
    8. 'values' → logprob: -8.113901138305664
    9. ' ints' → logprob: -8.238901138305664
    10. '_vals' → logprob: -8.988901138305664

Token 133: ' vals' (ID: 58985)
  Prédit: 'vals'
  Correct (stricte): False
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'vals' (adapté à ' vals') → logprob: -0.6058180928230286
    2. 'ints' → logprob: -0.8558180928230286
    3. 'values' → logprob: -3.730818033218384
    4. 'converted' → logprob: -6.105818271636963
    5. 'nums' → logprob: -6.855818271636963
    6. '   ' → logprob: -7.105818271636963
    7. ' vals' → logprob: -7.480818271636963
    8. 'int' → logprob: -7.855818271636963
    9. 'numbers' → logprob: -9.230817794799805
    10. '    
' → logprob: -9.605817794799805

Token 134: ' =' (ID: 314)
  Prédit: ' ='
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' =' → logprob: -0.0059290360659360886
    2. '=' → logprob: -5.130928993225098
    3. '  ' → logprob: -16.005929946899414
    4. ' ' → logprob: -16.130929946899414
    5. 's' → logprob: -16.630929946899414
    6. '   ' → logprob: -17.380929946899414
    7. ':' → logprob: -17.505929946899414
    8. ')' → logprob: -17.755929946899414
    9. '_' → logprob: -17.755929946899414
    10. ' =)' → logprob: -18.380929946899414

Token 135: ' convert' (ID: 8452)
  Prédit: 'convert'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'convert' → logprob: -0.47411835193634033
    2. ' convert' → logprob: -0.9741183519363403
    3. ' list' → logprob: -10.84911823272705
    4. 'list' → logprob: -11.97411823272705
    5. ' tuple' → logprob: -12.22411823272705
    6. '   ' → logprob: -12.34911823272705
    7. '(convert' → logprob: -12.47411823272705
    8. 'tuple' → logprob: -13.97411823272705
    9. '_convert' → logprob: -14.09911823272705
    10. ' ' → logprob: -14.97411823272705

Token 136: '_to' (ID: 5089)
  Prédit: '_to'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_to' → logprob: -9.088346359931165e-07
    2. '_' → logprob: -14.500000953674316
    3. '_t' → logprob: -15.125000953674316
    4. ' _' → logprob: -17.125
    5. '_of' → logprob: -19.0
    6. '##_' → logprob: -19.25
    7. '_into' → logprob: -19.5
    8. '_
' → logprob: -19.625
    9. '_from' → logprob: -19.75
    10. '_for' → logprob: -19.75

Token 137: '_int' (ID: 12285)
  Prédit: '_int'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_int' → logprob: -7.791440293658525e-05
    2. 'ints' → logprob: -9.625078201293945
    3. 'int' → logprob: -12.000078201293945
    4. '_str' → logprob: -12.625078201293945
    5. 's' → logprob: -13.875078201293945
    6. 'Ints' → logprob: -14.875078201293945
    7. '_inds' → logprob: -15.125078201293945
    8. '_ids' → logprob: -16.125078201293945
    9. ' _' → logprob: -16.250078201293945
    10. '_' → logprob: -16.250078201293945

Token 138: 's' (ID: 82)
  Prédit: 's'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 's' → logprob: -3.054500666621607e-06
    2. '_to' → logprob: -14.25000286102295
    3. '(s' → logprob: -14.50000286102295
    4. ' s' → logprob: -14.75000286102295
    5. '_s' → logprob: -15.00000286102295
    6. ')s' → logprob: -15.00000286102295
    7. '{s' → logprob: -15.37500286102295
    8. '<s' → logprob: -16.000003814697266
    9. ')' → logprob: -16.500003814697266
    10. 'sts' → logprob: -16.500003814697266

Token 139: '(s' (ID: 1858)
  Prédit: '(s'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(s' → logprob: -0.003258876968175173
    2. '(' → logprob: -5.75325870513916
    3. ' (' → logprob: -9.50325870513916
    4. '(
' → logprob: -12.12825870513916
    5. '(split' → logprob: -14.37825870513916
    6. 's' → logprob: -15.75325870513916
    7. '((' → logprob: -16.628259658813477
    8. '("("' → logprob: -17.128259658813477
    9. '(

' → logprob: -17.128259658813477
    10. ' ' → logprob: -17.378259658813477

Token 140: 'pl' (ID: 528)
  Prédit: 'pl'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'pl' → logprob: -2.546478935983032e-05
    2. 'plit' → logprob: -10.750025749206543
    3. 'p' → logprob: -13.250025749206543
    4. 'tr' → logprob: -14.500025749206543
    5. 'pll' → logprob: -14.875025749206543
    6. 'l' → logprob: -15.000025749206543
    7. ' pl' → logprob: -15.125025749206543
    8. 'pls' → logprob: -15.250025749206543
    9. 'plt' → logprob: -15.625025749206543
    10. 'plits' → logprob: -15.750025749206543

Token 141: 'itted' (ID: 5478)
  Prédit: 'itted'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'itted' → logprob: -0.00253023742698133
    2. 'its' → logprob: -6.002530097961426
    3. 'ited' → logprob: -10.877530097961426
    4. 'it' → logprob: -11.502530097961426
    5. ')' → logprob: -11.877530097961426
    6. '(' → logprob: -12.502530097961426
    7. '[' → logprob: -12.627530097961426
    8. 'itt' → logprob: -13.002530097961426
    9. 'e' → logprob: -13.127530097961426
    10. 'tted' → logprob: -13.377530097961426

Token 142: ')
' (ID: 446)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')' → logprob: -0.2255723625421524
    2. ')
' → logprob: -1.6005723476409912
    3. '()' → logprob: -9.85057258605957
    4. '())
' → logprob: -10.47557258605957
    5. ')
' → logprob: -10.97557258605957
    6. ' )
' → logprob: -10.97557258605957
    7. '()
' → logprob: -11.22557258605957
    8. ' )' → logprob: -11.72557258605957
    9. '())' → logprob: -11.85057258605957
    10. ')

' → logprob: -11.85057258605957

Token 143: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.48863375186920166
    2. 'n' → logprob: -0.9886337518692017
    3. ' n' → logprob: -4.863633632659912
    4. '    
' → logprob: -6.613633632659912
    5. '	n' → logprob: -6.613633632659912
    6. '
' → logprob: -7.238633632659912
    7. '(n' → logprob: -7.613633632659912
    8. ')' → logprob: -7.863633632659912
    9. '()' → logprob: -7.863633632659912
    10. ',n' → logprob: -8.11363410949707

Token 144: ' n' (ID: 297)
  Prédit: 'n'
  Correct (stricte): False
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'n' (adapté à ' n') → logprob: -0.014738178811967373
    2. ' n' → logprob: -4.264738082885742
    3. '   ' → logprob: -7.639738082885742
    4. '(n' → logprob: -11.139738082885742
    5. 'values' → logprob: -11.264738082885742
    6. '
' → logprob: -11.514738082885742
    7. '    
' → logprob: -11.764738082885742
    8. 'try' → logprob: -11.889738082885742
    9. '	n' → logprob: -12.014738082885742
    10. '[n' → logprob: -12.139738082885742

Token 145: ',' (ID: 11)
  Prédit: ','
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ',' → logprob: -2.0339031834737398e-05
    2. ' ,' → logprob: -11.750020027160645
    3. '_,' → logprob: -12.250020027160645
    4. ',n' → logprob: -12.875020027160645
    5. '=' → logprob: -13.250020027160645
    6. ',r' → logprob: -14.375020027160645
    7. ',_' → logprob: -14.500020027160645
    8. ' =' → logprob: -14.750020027160645
    9. ',
' → logprob: -15.000020027160645
    10. 's' → logprob: -15.125020027160645

Token 146: ' r' (ID: 428)
  Prédit: ' unpack'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' unpack' → logprob: -0.23975495994091034
    2. ' r' → logprob: -1.7397549152374268
    3. ' ' → logprob: -4.239755153656006
    4. ' un' → logprob: -4.739755153656006
    5. '_unpack' → logprob: -4.739755153656006
    6. ' vals' → logprob: -6.364755153656006
    7. ' u' → logprob: -7.239755153656006
    8. 'r' → logprob: -7.989755153656006
    9. ' unr' → logprob: -7.989755153656006
    10. ' unravel' → logprob: -7.989755153656006

Token 147: ' =' (ID: 314)
  Prédit: ' ='
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' =' → logprob: -0.0040801819413900375
    2. '=' → logprob: -5.504080295562744
    3. ',' → logprob: -13.379079818725586
    4. ' =
' → logprob: -16.004079818725586
    5. ' ' → logprob: -17.254079818725586
    6. ' =)' → logprob: -17.254079818725586
    7. ')' → logprob: -17.379079818725586
    8. ' ,' → logprob: -17.754079818725586
    9. '<|end|>' → logprob: -18.129079818725586
    10. '.' → logprob: -18.379079818725586

Token 148: ' unpack' (ID: 61704)
  Prédit: ' unpack'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' unpack' → logprob: -0.006189360748976469
    2. 'un' → logprob: -5.131189346313477
    3. '_unpack' → logprob: -8.881189346313477
    4. ' un' → logprob: -9.506189346313477
    5. '.unpack' → logprob: -10.256189346313477
    6. ' unwrap' → logprob: -13.006189346313477
    7. ' 
' → logprob: -13.131189346313477
    8. ' unzip' → logprob: -13.256189346313477
    9. '	un' → logprob: -13.506189346313477
    10. ' unfold' → logprob: -13.631189346313477

Token 149: '_values' (ID: 20393)
  Prédit: '_values'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_values' → logprob: -4.000763510703109e-05
    2. '_vals' → logprob: -10.625040054321289
    3. '_' → logprob: -11.125040054321289
    4. 'values' → logprob: -14.375040054321289
    5. ' _' → logprob: -16.00004005432129
    6. 's' → logprob: -16.37504005432129
    7. '_VALUES' → logprob: -16.62504005432129
    8. '_value' → logprob: -17.37504005432129
    9. '(values' → logprob: -17.62504005432129
    10. '_val' → logprob: -18.00004005432129

Token 150: '(vals' (ID: 167053)
  Prédit: '(vals'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(vals' → logprob: -0.0002330992283532396
    2. '(' → logprob: -8.625232696533203
    3. '(values' → logprob: -9.875232696533203
    4. '(val' → logprob: -14.125232696533203
    5. 'vals' → logprob: -14.375232696533203
    6. '_vals' → logprob: -15.250232696533203
    7. ' (' → logprob: -15.500232696533203
    8. '(vars' → logprob: -15.875232696533203
    9. '(nums' → logprob: -16.375232696533203
    10. '(ids' → logprob: -16.375232696533203

Token 151: ')
' (ID: 446)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')' → logprob: -0.006717974785715342
    2. ')
' → logprob: -5.006718158721924
    3. ')

' → logprob: -13.256717681884766
    4. '   ' → logprob: -14.256717681884766
    5. ')
' → logprob: -15.756717681884766
    6. '),' → logprob: -18.256717681884766
    7. ' )' → logprob: -18.256717681884766
    8. ')`' → logprob: -18.506717681884766
    9. ' ' → logprob: -18.881717681884766
    10. ')n' → logprob: -19.256717681884766

Token 152: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.39391493797302246
    2. 'if' → logprob: -1.1439149379730225
    3. ' if' → logprob: -5.018915176391602
    4. '    
' → logprob: -8.268915176391602
    5. '```' → logprob: -9.018915176391602
    6. '
' → logprob: -12.143915176391602
    7. '	if' → logprob: -12.393915176391602
    8. '  
' → logprob: -12.643915176391602
    9. '<|end|>' → logprob: -12.768915176391602
    10. ' 
' → logprob: -13.393915176391602

Token 153: ' if' (ID: 538)
  Prédit: 'if'
  Correct (stricte): False
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'if' (adapté à ' if') → logprob: -0.0009530289680697024
    2. '   ' → logprob: -7.500953197479248
    3. ' if' → logprob: -8.00095272064209
    4. 'res' → logprob: -10.37595272064209
    5. 'result' → logprob: -10.50095272064209
    6. '```' → logprob: -12.25095272064209
    7. '    
' → logprob: -14.75095272064209
    8. 'is' → logprob: -15.12595272064209
    9. ' res' → logprob: -15.62595272064209
    10. 'i' → logprob: -16.625953674316406

Token 154: ' check' (ID: 2371)
  Prédit: ' check'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' check' → logprob: -0.00029995047952979803
    2. 'check' → logprob: -8.375300407409668
    3. '(check' → logprob: -9.875300407409668
    4. ' n' → logprob: -11.625300407409668
    5. ' ' → logprob: -12.875300407409668
    6. ' ' → logprob: -13.125300407409668
    7. '	check' → logprob: -13.625300407409668
    8. 'n' → logprob: -13.625300407409668
    9. '_check' → logprob: -14.250300407409668
    10. '    ' → logprob: -14.625300407409668

Token 155: '_g' (ID: 5439)
  Prédit: '_g'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_g' → logprob: -0.00014060820103622973
    2. '_' → logprob: -8.875140190124512
    3. ' _' → logprob: -15.250140190124512
    4. '_ge' → logprob: -16.125141143798828
    5. '_G' → logprob: -16.250141143798828
    6. '(_' → logprob: -16.625141143798828
    7. '_gr' → logprob: -17.125141143798828
    8. '(' → logprob: -17.375141143798828
    9. '_
' → logprob: -18.500141143798828
    10. '_(' → logprob: -18.750141143798828

Token 156: 'reater' (ID: 110926)
  Prédit: 'reater'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'reater' → logprob: -7.465036105713807e-06
    2. 're' → logprob: -12.750007629394531
    3. 'greater' → logprob: -13.000007629394531
    4. 'r' → logprob: -13.750007629394531
    5. 'reate' → logprob: -14.250007629394531
    6. 'reat' → logprob: -15.500007629394531
    7. 'n' → logprob: -15.625007629394531
    8. 'rea' → logprob: -17.12500762939453
    9. 'a' → logprob: -17.62500762939453
    10. 'e' → logprob: -18.00000762939453

Token 157: '_equal' (ID: 27882)
  Prédit: '_equal'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_equal' → logprob: -6.988221684878226e-06
    2. '_' → logprob: -12.375006675720215
    3. '_equals' → logprob: -14.125006675720215
    4. '_eq' → logprob: -14.500006675720215
    5. '_e' → logprob: -14.875006675720215
    6. 'equal' → logprob: -15.250006675720215
    7. '_equ' → logprob: -15.250006675720215
    8. '_than' → logprob: -15.625006675720215
    9. '_or' → logprob: -16.00000762939453
    10. '_EQUAL' → logprob: -16.12500762939453

Token 158: '_' (ID: 62)
  Prédit: '_'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_' → logprob: -1.3782830137643032e-05
    2. '10' → logprob: -11.62501335144043
    3. '(n' → logprob: -13.50001335144043
    4. '(_' → logprob: -13.75001335144043
    5. ' _' → logprob: -14.00001335144043
    6. '(' → logprob: -14.75001335144043
    7. '_n' → logprob: -14.87501335144043
    8. '_
' → logprob: -15.87501335144043
    9. '```' → logprob: -16.37501335144043
    10. '

' → logprob: -16.87501335144043

Token 159: '10' (ID: 702)
  Prédit: '10'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '10' → logprob: -0.0004963174578733742
    2. '_' → logprob: -7.6254963874816895
    3. ' ' → logprob: -12.125495910644531
    4. 'n' → logprob: -13.375495910644531
    5. '(n' → logprob: -14.625495910644531
    6. '```' → logprob: -15.000495910644531
    7. '0' → logprob: -15.500495910644531
    8. 'r' → logprob: -16.00049591064453
    9. '_n' → logprob: -16.50049591064453
    10. '
' → logprob: -17.50049591064453

Token 160: '(n' (ID: 2406)
  Prédit: '(n'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(n' → logprob: -0.062002409249544144
    2. '(' → logprob: -2.812002420425415
    3. ' (' → logprob: -10.312002182006836
    4. '(

' → logprob: -14.312002182006836
    5. '(
' → logprob: -15.187002182006836
    6. 'n' → logprob: -16.437002182006836
    7. ')' → logprob: -16.687002182006836
    8. '(N' → logprob: -16.687002182006836
    9. ' ' → logprob: -17.062002182006836
    10. '((' → logprob: -17.062002182006836

Token 161: '):
' (ID: 1883)
  Prédit: '):'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '):' → logprob: -0.0003408263437449932
    2. '):
' → logprob: -8.375340461730957
    3. ' ):' → logprob: -9.750340461730957
    4. ')' → logprob: -10.625340461730957
    5. '():' → logprob: -11.000340461730957
    6. ':' → logprob: -11.500340461730957
    7. '   ' → logprob: -15.375340461730957
    8. '):

' → logprob: -16.250341415405273
    9. ')):' → logprob: -16.625341415405273
    10. '=' → logprob: -17.125341415405273

Token 162: '       ' (ID: 309)
  Prédit: '       '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '       ' → logprob: -0.12216417491436005
    2. '   ' → logprob: -2.372164249420166
    3. '
' → logprob: -3.872164249420166
    4. 'res' → logprob: -7.747164249420166
    5. ' res' → logprob: -8.997163772583008
    6. 'print' → logprob: -9.247163772583008
    7. '    
' → logprob: -9.497163772583008
    8. 'result' → logprob: -9.997163772583008
    9. '        
' → logprob: -10.247163772583008
    10. ' print' → logprob: -10.872163772583008

Token 163: ' res' (ID: 694)
  Prédit: 'res'
  Correct (stricte): False
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'res' (adapté à ' res') → logprob: -0.03278188779950142
    2. 'result' → logprob: -3.5327818393707275
    3. ' res' → logprob: -6.407782077789307
    4. '   ' → logprob: -6.657782077789307
    5. 'print' → logprob: -10.032781600952148
    6. '       ' → logprob: -10.282781600952148
    7. ' result' → logprob: -11.157781600952148
    8. '
' → logprob: -14.907781600952148
    9. 'r' → logprob: -14.907781600952148
    10. '           ' → logprob: -15.282781600952148

Token 164: ' =' (ID: 314)
  Prédit: ' ='
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' =' → logprob: -0.0036017363891005516
    2. '=' → logprob: -5.628601551055908
    3. ' =)' → logprob: -14.253602027893066
    4. ')' → logprob: -15.003602027893066
    5. ' =
' → logprob: -15.503602027893066
    6. '  ' → logprob: -15.628602027893066
    7. 's' → logprob: -15.878602027893066
    8. ' ' → logprob: -16.62860107421875
    9. ',' → logprob: -17.12860107421875
    10. ' )' → logprob: -17.25360107421875

Token 165: ' calculate' (ID: 17950)
  Prédit: 'calculate'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'calculate' → logprob: -0.01816187985241413
    2. ' calculate' → logprob: -4.018161773681641
    3. '   ' → logprob: -11.39316177368164
    4. '.calculate' → logprob: -15.39316177368164
    5. 'alculate' → logprob: -15.76816177368164
    6. 'calc' → logprob: -16.01816177368164
    7. ' ' → logprob: -16.14316177368164
    8. 'c' → logprob: -17.14316177368164
    9. '```' → logprob: -17.89316177368164
    10. 'cal' → logprob: -17.89316177368164

Token 166: '_result' (ID: 11623)
  Prédit: '_result'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_result' → logprob: -1.9361264946837764e-07
    2. 'result' → logprob: -16.0
    3. '_res' → logprob: -19.5
    4. '_' → logprob: -20.125
    5. '_results' → logprob: -20.125
    6. '```' → logprob: -21.375
    7. '_RESULT' → logprob: -21.625
    8. '"_' → logprob: -22.0
    9. 's' → logprob: -22.125
    10. ' _' → logprob: -22.125

Token 167: '_case' (ID: 43667)
  Prédit: '_case'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_case' → logprob: 0.0
    2. '_' → logprob: -17.875
    3. '_true' → logprob: -18.375
    4. '_cal' → logprob: -18.75
    5. 'case' → logprob: -19.5
    6. '_CASE' → logprob: -19.875
    7. ' _' → logprob: -20.375
    8. '```' → logprob: -20.625
    9. '_result' → logprob: -20.875
    10. '_false' → logprob: -21.0

Token 168: '_true' (ID: 37108)
  Prédit: '_true'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_true' → logprob: -1.700132997939363e-05
    2. '_case' → logprob: -11.000017166137695
    3. '_' → logprob: -15.750017166137695
    4. 'true' → logprob: -15.750017166137695
    5. '_false' → logprob: -17.250017166137695
    6. 'True' → logprob: -17.500017166137695
    7. '_truth' → logprob: -18.250017166137695
    8. '_tr' → logprob: -18.500017166137695
    9. '_t' → logprob: -19.125017166137695
    10. '_
' → logprob: -20.125017166137695

Token 169: '(r' (ID: 4729)
  Prédit: '(r'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(r' → logprob: -8.554343366995454e-05
    2. '(' → logprob: -9.375085830688477
    3. ' (' → logprob: -14.250085830688477
    4. ' ' → logprob: -17.375085830688477
    5. '(
' → logprob: -17.750085830688477
    6. '(res' → logprob: -19.625085830688477
    7. '(R' → logprob: -19.875085830688477
    8. '(

' → logprob: -20.250085830688477
    9. 'r' → logprob: -20.375085830688477
    10. '(re' → logprob: -20.625085830688477

Token 170: ')
' (ID: 446)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')' → logprob: -0.6945769190788269
    2. ')
' → logprob: -0.6945769190788269
    3. '   ' → logprob: -6.569576740264893
    4. ')
' → logprob: -11.19457721710205
    5. ')

' → logprob: -11.44457721710205
    6. ' ' → logprob: -14.06957721710205
    7. ' )' → logprob: -14.81957721710205
    8. ' )
' → logprob: -14.81957721710205
    9. '       ' → logprob: -16.444576263427734
    10. ')`
' → logprob: -16.444576263427734

Token 171: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.006353431381285191
    2. 'else' → logprob: -5.131353378295898
    3. ' else' → logprob: -7.881353378295898
    4. '    
' → logprob: -10.381353378295898
    5. '
' → logprob: -11.881353378295898
    6. ')' → logprob: -12.881353378295898
    7. '	else' → logprob: -13.006353378295898
    8. ':
' → logprob: -14.006353378295898
    9. '}else' → logprob: -14.256353378295898
    10. '(' → logprob: -14.881353378295898

Token 172: ' else' (ID: 1203)
  Prédit: 'else'
  Correct (stricte): False
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'else' (adapté à ' else') → logprob: -0.04634249210357666
    2. '   ' → logprob: -3.296342372894287
    3. ' else' → logprob: -4.796342372894287
    4. '	else' → logprob: -12.296342849731445
    5. ' ' → logprob: -14.296342849731445
    6. 'e' → logprob: -14.421342849731445
    7. 'els' → logprob: -14.546342849731445
    8. 'el' → logprob: -15.671342849731445
    9. '_else' → logprob: -16.546342849731445
    10. 'elses' → logprob: -16.671342849731445

Token 173: ':
' (ID: 734)
  Prédit: ':'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ':' → logprob: -0.038133636116981506
    2. ':
' → logprob: -3.2881336212158203
    3. '       ' → logprob: -9.91313362121582
    4. '   ' → logprob: -10.16313362121582
    5. ' :' → logprob: -13.53813362121582
    6. '    ' → logprob: -14.16313362121582
    7. '{' → logprob: -14.53813362121582
    8. ':

' → logprob: -14.53813362121582
    9. ' :
' → logprob: -14.91313362121582
    10. '      ' → logprob: -15.78813362121582

Token 174: '       ' (ID: 309)
  Prédit: '       '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '       ' → logprob: -0.00010688089241739362
    2. 'res' → logprob: -9.625106811523438
    3. ' res' → logprob: -10.125106811523438
    4. '   ' → logprob: -14.625106811523438
    5. '           ' → logprob: -16.375106811523438
    6. '      ' → logprob: -16.625106811523438
    7. '     ' → logprob: -17.125106811523438
    8. '```' → logprob: -17.500106811523438
    9. '(res' → logprob: -17.875106811523438
    10. '    ' → logprob: -18.000106811523438

Token 175: ' res' (ID: 694)
  Prédit: 'res'
  Correct (stricte): False
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'res' (adapté à ' res') → logprob: -0.012540609575808048
    2. ' res' → logprob: -4.387540817260742
    3. '       ' → logprob: -11.012540817260742
    4. '   ' → logprob: -11.512540817260742
    5. 'calculate' → logprob: -12.637540817260742
    6. ' calculate' → logprob: -15.512540817260742
    7. '           ' → logprob: -15.637540817260742
    8. '	res' → logprob: -15.887540817260742
    9. ' ' → logprob: -15.887540817260742
    10. '
' → logprob: -16.012540817260742

Token 176: ' =' (ID: 314)
  Prédit: ' ='
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' =' → logprob: -0.01416350994259119
    2. '=' → logprob: -4.264163494110107
    3. ' ' → logprob: -17.889163970947266
    4. ' =)' → logprob: -18.889163970947266
    5. ')' → logprob: -19.139163970947266
    6. ' =
' → logprob: -19.264163970947266
    7. '＝' → logprob: -19.514163970947266
    8. '	' → logprob: -19.764163970947266
    9. ' ' → logprob: -19.889163970947266
    10. '_' → logprob: -20.014163970947266

Token 177: ' calculate' (ID: 17950)
  Prédit: 'calculate'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'calculate' → logprob: -0.2519293427467346
    2. ' calculate' → logprob: -1.5019292831420898
    3. '.calculate' → logprob: -16.001930236816406
    4. 'alculate' → logprob: -17.126930236816406
    5. ' ' → logprob: -17.376930236816406
    6. '   ' → logprob: -17.626930236816406
    7. 'c' → logprob: -17.876930236816406
    8. ' ' → logprob: -18.751930236816406
    9. 'Calculate' → logprob: -19.001930236816406
    10. 'calc' → logprob: -19.626930236816406

Token 178: '_result' (ID: 11623)
  Prédit: '_result'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_result' → logprob: -1.9981420336989686e-05
    2. '_to' → logprob: -10.875020027160645
    3. 'result' → logprob: -14.375020027160645
    4. '"_' → logprob: -15.375020027160645
    5. '```' → logprob: -17.625019073486328
    6. '_results' → logprob: -17.750019073486328
    7. ' _' → logprob: -18.000019073486328
    8. '_case' → logprob: -18.250019073486328
    9. '_RESULT' → logprob: -18.250019073486328
    10. 'Result' → logprob: -18.375019073486328

Token 179: '_case' (ID: 43667)
  Prédit: '_case'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_case' → logprob: -1.9146995327901095e-05
    2. '_false' → logprob: -10.875019073486328
    3. 'case' → logprob: -16.875019073486328
    4. '_cal' → logprob: -17.375019073486328
    5. '_' → logprob: -17.750019073486328
    6. 'False' → logprob: -18.000019073486328
    7. '```' → logprob: -18.250019073486328
    8. 'false' → logprob: -18.750019073486328
    9. '_for' → logprob: -18.750019073486328
    10. ' _' → logprob: -19.375019073486328

Token 180: '_false' (ID: 96094)
  Prédit: '_false'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_false' → logprob: -0.00034654809860512614
    2. 'false' → logprob: -8.250346183776855
    3. 'False' → logprob: -9.375346183776855
    4. 'alse' → logprob: -15.750346183776855
    5. '_FALSE' → logprob: -16.125347137451172
    6. '_' → logprob: -17.375347137451172
    7. '_true' → logprob: -17.625347137451172
    8. ' false' → logprob: -19.000347137451172
    9. ' False' → logprob: -19.000347137451172
    10. '_f' → logprob: -20.500347137451172

Token 181: '(n' (ID: 2406)
  Prédit: '(n'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(n' → logprob: -0.011120449751615524
    2. '(' → logprob: -4.511120319366455
    3. '(
' → logprob: -9.636120796203613
    4. ' (' → logprob: -11.886120796203613
    5. '(

' → logprob: -15.261120796203613
    6. ' ' → logprob: -17.511119842529297
    7. '```' → logprob: -17.886119842529297
    8. '   ' → logprob: -18.136119842529297
    9. '(
' → logprob: -18.636119842529297
    10. 'n' → logprob: -18.761119842529297

Token 182: ',' (ID: 11)
  Prédit: ','
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ',' → logprob: -0.0025583035312592983
    2. ',r' → logprob: -6.00255823135376
    3. ' ,' → logprob: -9.502558708190918
    4. ',
' → logprob: -12.627558708190918
    5. 'r' → logprob: -12.627558708190918
    6. '   ' → logprob: -14.627558708190918
    7. ')' → logprob: -15.002558708190918
    8. ' r' → logprob: -15.252558708190918
    9. '```' → logprob: -16.6275577545166
    10. '‌,' → logprob: -17.1275577545166

Token 183: ' r' (ID: 428)
  Prédit: 'r'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'r' → logprob: -0.01815006136894226
    2. ' r' → logprob: -4.0181498527526855
    3. '   ' → logprob: -15.768150329589844
    4. '	r' → logprob: -18.518150329589844
    5. ')' → logprob: -19.268150329589844
    6. ' ' → logprob: -19.268150329589844
    7. '
' → logprob: -20.518150329589844
    8. '_r' → logprob: -20.768150329589844
    9. '    ' → logprob: -21.143150329589844
    10. ',r' → logprob: -21.768150329589844

Token 184: ')
' (ID: 446)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')' → logprob: -0.2519378960132599
    2. ')
' → logprob: -1.5019378662109375
    3. ')

' → logprob: -11.876937866210938
    4. '   ' → logprob: -13.751937866210938
    5. ')
' → logprob: -14.126937866210938
    6. ' )' → logprob: -17.626937866210938
    7. ' )
' → logprob: -17.626937866210938
    8. ')\
' → logprob: -18.376937866210938
    9. ')`
' → logprob: -18.751937866210938
    10. ' ' → logprob: -18.876937866210938

Token 185: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.033633481711149216
    2. 'print' → logprob: -3.6586334705352783
    3. '
' → logprob: -5.158633708953857
    4. ' print' → logprob: -6.783633708953857
    5. '    
' → logprob: -8.0336332321167
    6. '(print' → logprob: -10.1586332321167
    7. ' 
' → logprob: -11.1586332321167
    8. '  
' → logprob: -11.4086332321167
    9. '```' → logprob: -11.5336332321167
    10. '	print' → logprob: -11.7836332321167

Token 186: ' print' (ID: 2123)
  Prédit: 'print'
  Correct (stricte): False
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'print' (adapté à ' print') → logprob: -0.25410759449005127
    2. '   ' → logprob: -1.5041075944900513
    3. ' print' → logprob: -6.254107475280762
    4. '
' → logprob: -8.504107475280762
    5. '    
' → logprob: -10.629107475280762
    6. '	print' → logprob: -11.504107475280762
    7. '(print' → logprob: -11.754107475280762
    8. '```' → logprob: -12.129107475280762
    9. '_print' → logprob: -14.004107475280762
    10. '.print' → logprob: -14.379107475280762

Token 187: '_result' (ID: 11623)
  Prédit: '_result'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_result' → logprob: -3.173704271830502e-06
    2. '_' → logprob: -13.00000286102295
    3. '_res' → logprob: -14.12500286102295
    4. ' _' → logprob: -16.375003814697266
    5. '_results' → logprob: -17.625003814697266
    6. '(_' → logprob: -18.000003814697266
    7. '_
' → logprob: -18.250003814697266
    8. '_r' → logprob: -19.250003814697266
    9. '_Result' → logprob: -19.250003814697266
    10. '```' → logprob: -19.375003814697266

Token 188: '(res' (ID: 8331)
  Prédit: '(res'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(res' → logprob: -0.005234002135694027
    2. '(' → logprob: -5.2552337646484375
    3. ' (' → logprob: -15.755233764648438
    4. '(
' → logprob: -16.255233764648438
    5. '(

' → logprob: -17.755233764648438
    6. '(re' → logprob: -18.755233764648438
    7. '(s' → logprob: -18.880233764648438
    8. '(result' → logprob: -19.255233764648438
    9. '(rest' → logprob: -19.505233764648438
    10. '(results' → logprob: -19.755233764648438

Token 189: ')

' (ID: 1029)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')' → logprob: -2.4987974029500037e-05
    2. ')
' → logprob: -10.625024795532227
    3. '()' → logprob: -15.125024795532227
    4. ' )' → logprob: -15.500024795532227
    5. ')

' → logprob: -17.250024795532227
    6. '())' → logprob: -17.250024795532227
    7. '))' → logprob: -19.125024795532227
    8. ')`' → logprob: -19.250024795532227
    9. '(' → logprob: -19.750024795532227
    10. '
' → logprob: -20.125024795532227

Token 190: 'main' (ID: 7731)
  Prédit: '
'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '
' → logprob: -0.695862889289856
    2. 'if' → logprob: -0.695862889289856
    3. '\n' → logprob: -6.320862770080566
    4. 'main' → logprob: -7.695862770080566
    5. '<|end|>' → logprob: -9.070862770080566
    6. ' if' → logprob: -9.195862770080566
    7. '```' → logprob: -9.820862770080566
    8. '\' → logprob: -9.820862770080566
    9. '#' → logprob: -10.320862770080566
    10. '

' → logprob: -10.695862770080566

Token 191: '()' (ID: 416)
  Prédit: '()'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '()' → logprob: -0.02058824896812439
    2. '(' → logprob: -3.8955881595611572
    3. '()
' → logprob: -10.770587921142578
    4. '(
' → logprob: -12.145587921142578
    5. '()

' → logprob: -12.395587921142578
    6. '#' → logprob: -12.770587921142578
    7. '()`' → logprob: -13.020587921142578
    8. ' ()' → logprob: -13.145587921142578
    9. '();' → logprob: -13.395587921142578
    10. '()<' → logprob: -13.770587921142578


RÉSUMÉ:
--------------------------------------------------------------------------------
Total des tokens analysés: 189
Tokens correctement prédits (1ère position, stricte): 87
Tokens correctement prédits (1ère position, avec adaptation): 98
Tokens correctement prédits (top 10): 166
Précision stricte (1ère position): 46.03%
Précision adaptée (1ère position): 51.85%
Précision (top 10): 87.83%
================================================================================
