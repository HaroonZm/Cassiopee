================================================================================
ANALYSE DE PRÉDICTION TOKEN PAR TOKEN (BATCH API)
Date: 2025-06-04 20:00:13
Modèle de tokenisation: gpt-4o-mini
================================================================================

SCRIPT ANALYSÉ:
--------------------------------------------------------------------------------
from sys import stdin

A, B = map(int, stdin.readline().split())
print(B if A >= 13 else B // 2 if 6 <= A <= 12 else 0)
--------------------------------------------------------------------------------

RÉSULTATS D'ANALYSE TOKEN PAR TOKEN:
--------------------------------------------------------------------------------
Token 0: 'from' (ID: 2845)
  → Token d'amorce (pas de prédiction)

Token 1: ' sys' (ID: 12228)
  → Token d'amorce (pas de prédiction)

Token 2: ' import' (ID: 1588)
  → Token d'amorce (pas de prédiction)

Token 3: ' stdin' (ID: 75143)
  Prédit: 'argv'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'argv' → logprob: -0.05142802372574806
    2. ' argv' → logprob: -3.4264280796051025
    3. 'exit' → logprob: -4.176427841186523
    4. ' exit' → logprob: -6.801427841186523
    5. 'stdout' → logprob: -7.301427841186523
    6. 'stdin' → logprob: -8.426427841186523
    7. 'path' → logprob: -8.801427841186523
    8. 'import' → logprob: -10.176427841186523
    9. 'stderr' → logprob: -10.426427841186523
    10. 'version' → logprob: -10.676427841186523

Token 4: '

' (ID: 279)
  Prédit: '.'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '.' → logprob: -0.10230562835931778
    2. '\n' → logprob: -2.7273056507110596
    3. '.readline' → logprob: -3.7273056507110596
    4. '\' → logprob: -6.3523054122924805
    5. 'newline' → logprob: -6.6023054122924805
    6. '
' → logprob: -6.8523054122924805
    7. '.read' → logprob: -7.2273054122924805
    8. 'for' → logprob: -7.4773054122924805
    9. 'import' → logprob: -7.4773054122924805
    10. '' → logprob: -7.8523054122924805

Token 5: 'A' (ID: 32)
  Prédit: '.'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '.' → logprob: -0.09314946830272675
    2. '.readline' → logprob: -2.593149423599243
    3. 'for' → logprob: -5.718149662017822
    4. '\n' → logprob: -5.843149662017822
    5. '.read' → logprob: -5.968149662017822
    6. 'print' → logprob: -6.093149662017822
    7. '
' → logprob: -7.093149662017822
    8. 'import' → logprob: -7.593149662017822
    9. 'newline' → logprob: -7.843149662017822
    10. '.
' → logprob: -8.343149185180664

Token 6: ',' (ID: 11)
  Prédit: '='
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '=' → logprob: -0.12813864648342133
    2. '.' → logprob: -2.628138542175293
    3. ' =' → logprob: -3.253138542175293
    4. 'd' → logprob: -5.503138542175293
    5. 'r' → logprob: -5.878138542175293
    6. ',' → logprob: -7.253138542175293
    7. '.=' → logprob: -8.003138542175293
    8. 's' → logprob: -8.628138542175293
    9. 'l' → logprob: -8.628138542175293
    10. 'p' → logprob: -8.628138542175293

Token 7: ' B' (ID: 418)
  Prédit: 'B'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'B' → logprob: -0.034067943692207336
    2. ' B' → logprob: -3.4090678691864014
    3. '=' → logprob: -8.40906810760498
    4. 'b' → logprob: -9.03406810760498
    5. ' =' → logprob: -10.28406810760498
    6. ' ' → logprob: -10.53406810760498
    7. '*' → logprob: -12.65906810760498
    8. 'stdin' → logprob: -12.65906810760498
    9. 'int' → logprob: -12.90906810760498
    10. '_' → logprob: -13.40906810760498

Token 8: ' =' (ID: 314)
  Prédit: ' ='
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' =' → logprob: -0.09231023490428925
    2. '=' → logprob: -2.4673101902008057
    3. ',' → logprob: -5.842310428619385
    4. ' ' → logprob: -8.342309951782227
    5. '<|end|>' → logprob: -9.342309951782227
    6. ' ,' → logprob: -9.717309951782227
    7. ')' → logprob: -10.467309951782227
    8. ' +=' → logprob: -11.467309951782227
    9. '.' → logprob: -11.592309951782227
    10. '_' → logprob: -12.092309951782227

Token 9: ' map' (ID: 4014)
  Prédit: ' map'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' map' → logprob: -0.012661388143897057
    2. 'map' → logprob: -4.387661457061768
    3. ' list' → logprob: -9.26266098022461
    4. ' stdin' → logprob: -11.01266098022461
    5. ' ' → logprob: -11.13766098022461
    6. ' [' → logprob: -11.38766098022461
    7. 'list' → logprob: -12.13766098022461
    8. '[' → logprob: -12.51266098022461
    9. ' input' → logprob: -13.51266098022461
    10. 'stdin' → logprob: -13.76266098022461

Token 10: '(int' (ID: 2742)
  Prédit: '(int'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(int' → logprob: -0.43173936009407043
    2. '(' → logprob: -1.306739330291748
    3. '(str' → logprob: -2.931739330291748
    4. '(lambda' → logprob: -3.681739330291748
    5. '(stdin' → logprob: -6.931739330291748
    6. '(input' → logprob: -8.681739807128906
    7. '(eval' → logprob: -9.556739807128906
    8. 'int' → logprob: -10.681739807128906
    9. '(list' → logprob: -10.806739807128906
    10. '()' → logprob: -10.806739807128906

Token 11: ',' (ID: 11)
  Prédit: '(stdin'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(stdin' → logprob: -0.0020926843862980604
    2. ')' → logprob: -6.6270928382873535
    3. 'stdin' → logprob: -7.8770928382873535
    4. ',' → logprob: -8.627092361450195
    5. '(' → logprob: -9.002092361450195
    6. '(input' → logprob: -10.127092361450195
    7. '(st' → logprob: -11.627092361450195
    8. '.stdin' → logprob: -11.627092361450195
    9. ' stdin' → logprob: -11.877092361450195
    10. '(std' → logprob: -12.252092361450195

Token 12: ' stdin' (ID: 75143)
  Prédit: 'stdin'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'stdin' → logprob: -0.10200802981853485
    2. ' stdin' → logprob: -2.352008104324341
    3. '(stdin' → logprob: -6.352007865905762
    4. '.stdin' → logprob: -10.102007865905762
    5. ')' → logprob: -11.352007865905762
    6. 'input' → logprob: -13.477007865905762
    7. 'std' → logprob: -13.852007865905762
    8. 'stdout' → logprob: -14.477007865905762
    9. 'stdio' → logprob: -16.352008819580078
    10. 'stdlib' → logprob: -16.352008819580078

Token 13: '.readline' (ID: 74673)
  Prédit: '.readline'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '.readline' → logprob: -0.0004744023026432842
    2. '.read' → logprob: -7.750474452972412
    3. '.' → logprob: -10.125473976135254
    4. '.readlines' → logprob: -12.750473976135254
    5. ').' → logprob: -14.875473976135254
    6. ')' → logprob: -16.00047492980957
    7. '().' → logprob: -16.50047492980957
    8. '.write' → logprob: -16.50047492980957
    9. 'read' → logprob: -16.75047492980957
    10. '.Read' → logprob: -17.12547492980957

Token 14: '().' (ID: 1454)
  Prédit: '())'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '())' → logprob: -0.005788481794297695
    2. '()' → logprob: -5.755788326263428
    3. ')' → logprob: -6.255788326263428
    4. '()))' → logprob: -7.880788326263428
    5. '().' → logprob: -8.755788803100586
    6. ' ())' → logprob: -10.005788803100586
    7. '());' → logprob: -10.630788803100586
    8. '('' → logprob: -11.255788803100586
    9. '(' → logprob: -11.255788803100586
    10. '();)' → logprob: -11.380788803100586

Token 15: 'split' (ID: 13627)
  Prédit: 'strip'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'strip' → logprob: -0.05822596698999405
    2. 'rstrip' → logprob: -3.3082258701324463
    3. 'split' → logprob: -4.058226108551025
    4. 'read' → logprob: -6.558226108551025
    5. ')' → logprob: -6.683226108551025
    6. ' strip' → logprob: -11.683225631713867
    7. 'replace' → logprob: -11.808225631713867
    8. 'decode' → logprob: -12.058225631713867
    9. '())' → logprob: -12.183225631713867
    10. '()' → logprob: -12.808225631713867

Token 16: '())
' (ID: 4574)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')' → logprob: -0.11977554857730865
    2. '())' → logprob: -2.2447755336761475
    3. '))' → logprob: -5.244775772094727
    4. '()' → logprob: -6.494775772094727
    5. '()))' → logprob: -9.619775772094727
    6. '`)' → logprob: -10.119775772094727
    7. '(' → logprob: -11.744775772094727
    8. ')`' → logprob: -12.119775772094727
    9. ' )' → logprob: -12.869775772094727
    10. '())
' → logprob: -12.994775772094727

Token 17: 'print' (ID: 1598)
  Prédit: '+'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '+' → logprob: -0.3529205322265625
    2. 'print' → logprob: -2.2279205322265625
    3. '*' → logprob: -3.2279205322265625
    4. 'C' → logprob: -3.7279205322265625
    5. ',' → logprob: -3.8529205322265625
    6. 'a' → logprob: -4.3529205322265625
    7. 'result' → logprob: -4.3529205322265625
    8. '+
' → logprob: -4.3529205322265625
    9. 'if' → logprob: -4.4779205322265625
    10. ')' → logprob: -4.6029205322265625

Token 18: '(B' (ID: 8409)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '(' → logprob: -0.0003365350130479783
    2. '("("' → logprob: -8.625336647033691
    3. '('' → logprob: -9.000336647033691
    4. '((' → logprob: -11.250336647033691
    5. '(A' → logprob: -11.375336647033691
    6. '(f' → logprob: -12.875336647033691
    7. '(`' → logprob: -13.625336647033691
    8. '(
' → logprob: -13.625336647033691
    9. '()' → logprob: -14.000336647033691
    10. '("""' → logprob: -14.625336647033691

Token 19: ' if' (ID: 538)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ')' → logprob: -0.0017496729269623756
    2. ' )' → logprob: -7.001749515533447
    3. '+' → logprob: -7.626749515533447
    4. '-' → logprob: -8.876749992370605
    5. '-A' → logprob: -9.376749992370605
    6. '+)' → logprob: -10.001749992370605
    7. '-)' → logprob: -11.126749992370605
    8. ' -' → logprob: -11.251749992370605
    9. '-B' → logprob: -11.376749992370605
    10. '))' → logprob: -11.626749992370605

Token 20: ' A' (ID: 355)
  Prédit: ' A'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' A' → logprob: -0.07427329570055008
    2. 'A' → logprob: -2.8242733478546143
    3. '>' → logprob: -4.824273109436035
    4. ' >' → logprob: -5.699273109436035
    5. '>A' → logprob: -7.699273109436035
    6. ' ' → logprob: -8.074273109436035
    7. '<' → logprob: -11.074273109436035
    8. ' <' → logprob: -11.199273109436035
    9. '<A' → logprob: -11.199273109436035
    10. '  ' → logprob: -12.199273109436035

Token 21: ' >=' (ID: 5064)
  Prédit: '>'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '>' → logprob: -0.057428501546382904
    2. ' >' → logprob: -2.9324285984039307
    3. '<' → logprob: -6.057428359985352
    4. ' <' → logprob: -8.932428359985352
    5. ' ' → logprob: -10.307428359985352
    6. '==' → logprob: -11.557428359985352
    7. '%' → logprob: -11.932428359985352
    8. ')' → logprob: -12.557428359985352
    9. '>=' → logprob: -12.682428359985352
    10. '>B' → logprob: -12.682428359985352

Token 22: ' ' (ID: 220)
  Prédit: 'B'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'B' → logprob: -0.00469913799315691
    2. ' B' → logprob: -5.379699230194092
    3. '0' → logprob: -10.129698753356934
    4. '10' → logprob: -11.129698753356934
    5. ' ' → logprob: -12.004698753356934
    6. '100' → logprob: -12.504698753356934
    7. '20' → logprob: -12.629698753356934
    8. '1' → logprob: -12.754698753356934
    9. '50' → logprob: -13.504698753356934
    10. '>B' → logprob: -14.004698753356934

Token 23: '13' (ID: 1311)
  Prédit: 'B'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'B' → logprob: -0.003579049138352275
    2. '0' → logprob: -6.753579139709473
    3. '10' → logprob: -7.128579139709473
    4. '100' → logprob: -7.628579139709473
    5. '1' → logprob: -8.253579139709473
    6. ' B' → logprob: -8.253579139709473
    7. '20' → logprob: -9.003579139709473
    8. '5' → logprob: -9.878579139709473
    9. '50' → logprob: -9.878579139709473
    10. '18' → logprob: -10.128579139709473

Token 24: ' else' (ID: 1203)
  Prédit: ' else'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' else' → logprob: -0.2519337236881256
    2. 'else' → logprob: -1.5019336938858032
    3. '-' → logprob: -12.626934051513672
    4. '	else' → logprob: -14.501934051513672
    5. '```' → logprob: -14.626934051513672
    6. ' ' → logprob: -15.751934051513672
    7. '_else' → logprob: -16.751934051513672
    8. '>' → logprob: -17.251934051513672
    9. ' els' → logprob: -17.251934051513672
    10. '0' → logprob: -17.751934051513672

Token 25: ' B' (ID: 418)
  Prédit: 'A'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'A' → logprob: -0.42345553636550903
    2. ' A' → logprob: -1.4234554767608643
    3. 'B' → logprob: -2.5484554767608643
    4. ' B' → logprob: -3.6734554767608643
    5. ' ' → logprob: -8.423455238342285
    6. '0' → logprob: -8.798455238342285
    7. '20' → logprob: -9.173455238342285
    8. ')' → logprob: -10.048455238342285
    9. 'print' → logprob: -10.923455238342285
    10. '(A' → logprob: -10.923455238342285

Token 26: ' //' (ID: 602)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ')' → logprob: -0.007891232147812843
    2. '-' → logprob: -5.6328911781311035
    3. ' )' → logprob: -6.2578911781311035
    4. ' if' → logprob: -6.7578911781311035
    5. ' -' → logprob: -7.0078911781311035
    6. 'if' → logprob: -9.007891654968262
    7. '//' → logprob: -10.132891654968262
    8. '*' → logprob: -10.257891654968262
    9. '-A' → logprob: -10.382891654968262
    10. '<|end|>' → logprob: -10.882891654968262

Token 27: ' ' (ID: 220)
  Prédit: '2'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '2' → logprob: -0.005234952084720135
    2. ' ' → logprob: -5.255234718322754
    3. '3' → logprob: -14.505234718322754
    4. '10' → logprob: -16.00523567199707
    5. '```' → logprob: -16.25523567199707
    6. ' ' → logprob: -17.00523567199707
    7. '  ' → logprob: -17.13023567199707
    8. '   ' → logprob: -17.13023567199707
    9. '1' → logprob: -17.44273567199707
    10. '200' → logprob: -17.44273567199707

Token 28: '2' (ID: 17)
  Prédit: '2'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '2' → logprob: -1.9862216504407115e-05
    2. ' ' → logprob: -10.875020027160645
    3. '3' → logprob: -14.625020027160645
    4. '10' → logprob: -15.375020027160645
    5. '```' → logprob: -16.625019073486328
    6. '4' → logprob: -17.500019073486328
    7. '２' → logprob: -17.500019073486328
    8. '5' → logprob: -18.187519073486328
    9. '200' → logprob: -18.312519073486328
    10. ')' → logprob: -18.500019073486328

Token 29: ' if' (ID: 538)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ')' → logprob: -2.339278580620885e-06
    2. ')
' → logprob: -14.125001907348633
    3. '`)' → logprob: -14.625001907348633
    4. ' )' → logprob: -14.750001907348633
    5. '')' → logprob: -14.875001907348633
    6. '))' → logprob: -15.375001907348633
    7. ')`' → logprob: -16.625001907348633
    8. '```' → logprob: -17.375001907348633
    9. '）' → logprob: -17.875001907348633
    10. '")' → logprob: -17.875001907348633

Token 30: ' ' (ID: 220)
  Prédit: 'A'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'A' → logprob: -0.0028227046132087708
    2. ' A' → logprob: -6.2528228759765625
    3. '6' → logprob: -7.1278228759765625
    4. ' ' → logprob: -9.752822875976562
    5. '13' → logprob: -11.252822875976562
    6. '1' → logprob: -11.627822875976562
    7. '12' → logprob: -12.252822875976562
    8. '3' → logprob: -13.377822875976562
    9. '7' → logprob: -13.502822875976562
    10. '0' → logprob: -13.502822875976562

Token 31: '6' (ID: 21)
  Prédit: 'A'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'A' → logprob: -0.010100865736603737
    2. '6' → logprob: -4.635100841522217
    3. '0' → logprob: -8.760101318359375
    4. '1' → logprob: -9.635101318359375
    5. '3' → logprob: -9.760101318359375
    6. ' A' → logprob: -10.635101318359375
    7. '13' → logprob: -11.135101318359375
    8. '12' → logprob: -12.010101318359375
    9. '5' → logprob: -12.135101318359375
    10. ' ' → logprob: -12.260101318359375

Token 32: ' <=' (ID: 5017)
  Prédit: ' <='
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' <=' → logprob: -0.4109381437301636
    2. '<=' → logprob: -1.1609381437301636
    3. '>' → logprob: -4.410938262939453
    4. ' >' → logprob: -4.660938262939453
    5. '<' → logprob: -6.910938262939453
    6. ' ' → logprob: -7.035938262939453
    7. ' <' → logprob: -8.910938262939453
    8. '6' → logprob: -9.910938262939453
    9. '7' → logprob: -10.660938262939453
    10. ' >=' → logprob: -10.660938262939453

Token 33: ' A' (ID: 355)
  Prédit: 'A'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'A' → logprob: -0.0019287518225610256
    2. ' A' → logprob: -6.251928806304932
    3. '	A' → logprob: -15.876928329467773
    4. ' ' → logprob: -18.126928329467773
    5. '>A' → logprob: -18.126928329467773
    6. '<A' → logprob: -18.251928329467773
    7. '_A' → logprob: -18.626928329467773
    8. 'Ａ' → logprob: -18.626928329467773
    9. 'А' → logprob: -19.626928329467773
    10. ' ' → logprob: -19.876928329467773

Token 34: ' <=' (ID: 5017)
  Prédit: ' else'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' else' → logprob: -0.141951784491539
    2. 'else' → logprob: -2.1419517993927
    3. '<=' → logprob: -4.516951560974121
    4. ' <=' → logprob: -5.766951560974121
    5. '<' → logprob: -7.516951560974121
    6. ' <' → logprob: -9.141951560974121
    7. ' ' → logprob: -9.141951560974121
    8. ' and' → logprob: -10.266951560974121
    9. '<|end|>' → logprob: -10.516951560974121
    10. 'and' → logprob: -10.641951560974121

Token 35: ' ' (ID: 220)
  Prédit: '12'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '12' → logprob: -4.36574100604048e-06
    2. ' ' → logprob: -13.625004768371582
    3. '15' → logprob: -13.750004768371582
    4. '１２' → logprob: -14.000004768371582
    5. '1' → logprob: -14.625004768371582
    6. '11' → logprob: -15.250004768371582
    7. '```' → logprob: -15.250004768371582
    8. '2' → logprob: -16.375003814697266
    9. '127' → logprob: -17.000003814697266
    10. '14' → logprob: -17.375003814697266

Token 36: '12' (ID: 899)
  Prédit: '12'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '12' → logprob: -2.935296834039036e-06
    2. '１２' → logprob: -13.12500286102295
    3. '15' → logprob: -15.75000286102295
    4. '13' → logprob: -16.125003814697266
    5. '```' → logprob: -16.375003814697266
    6. '14' → logprob: -16.375003814697266
    7. ' ' → logprob: -16.500003814697266
    8. '127' → logprob: -16.500003814697266
    9. '11' → logprob: -16.625003814697266
    10. '2' → logprob: -17.250003814697266

Token 37: ' else' (ID: 1203)
  Prédit: ' else'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' else' → logprob: -0.4742219150066376
    2. 'else' → logprob: -0.97422194480896
    3. ')' → logprob: -8.849222183227539
    4. '	else' → logprob: -13.974222183227539
    5. '),' → logprob: -16.09922218322754
    6. ' ' → logprob: -16.09922218322754
    7. ' )' → logprob: -16.22422218322754
    8. '0' → logprob: -16.59922218322754
    9. '_else' → logprob: -16.72422218322754
    10. '))' → logprob: -16.84922218322754

Token 38: ' ' (ID: 220)
  Prédit: '0'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '0' → logprob: -0.0001093841710826382
    2. ' ' → logprob: -9.125109672546387
    3. ')' → logprob: -15.750109672546387
    4. 'B' → logprob: -16.25010871887207
    5. '"' → logprob: -17.12510871887207
    6. '1' → logprob: -17.25010871887207
    7. '  ' → logprob: -17.25010871887207
    8. '   ' → logprob: -17.81260871887207
    9. ''' → logprob: -18.18760871887207
    10. 'print' → logprob: -18.31260871887207

Token 39: '0' (ID: 15)
  Prédit: '0'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '0' → logprob: -2.9160102712921798e-05
    2. ' ' → logprob: -10.500029563903809
    3. 'B' → logprob: -14.375029563903809
    4. ')' → logprob: -14.625029563903809
    5. '   ' → logprob: -16.562528610229492
    6. '1' → logprob: -16.625028610229492
    7. 'print' → logprob: -16.625028610229492
    8. '  ' → logprob: -17.000028610229492
    9. '`' → logprob: -17.125028610229492
    10. '"' → logprob: -17.562528610229492

Token 40: ')' (ID: 8)
  Prédit: ')'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')' → logprob: -1.981667537620524e-06
    2. ' )' → logprob: -14.000001907348633
    3. '`)' → logprob: -14.500001907348633
    4. '))' → logprob: -15.125001907348633
    5. '')' → logprob: -15.625001907348633
    6. ')
' → logprob: -16.250001907348633
    7. ')`' → logprob: -17.625001907348633
    8. '）' → logprob: -17.625001907348633
    9. '")' → logprob: -18.000001907348633
    10. ')#' → logprob: -19.125001907348633


RÉSUMÉ:
--------------------------------------------------------------------------------
Total des tokens analysés: 38
Tokens correctement prédits (1ère position, stricte): 12
Tokens correctement prédits (1ère position, avec adaptation): 12
Tokens correctement prédits (top 10): 29
Précision stricte (1ère position): 31.58%
Précision adaptée (1ère position): 31.58%
Précision (top 10): 76.32%
================================================================================
