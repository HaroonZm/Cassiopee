================================================================================
ANALYSE DE PRÉDICTION TOKEN PAR TOKEN (BATCH API)
Date: 2025-06-04 19:43:24
Modèle de tokenisation: gpt-4o-mini
================================================================================

SCRIPT ANALYSÉ:
--------------------------------------------------------------------------------
N = int(input())
print((N + 1) / 2 / N if N & 1 else 0.5)
--------------------------------------------------------------------------------

RÉSULTATS D'ANALYSE TOKEN PAR TOKEN:
--------------------------------------------------------------------------------
Token 0: 'N' (ID: 45)
  → Token d'amorce (pas de prédiction)

Token 1: ' =' (ID: 314)
  → Token d'amorce (pas de prédiction)

Token 2: ' int' (ID: 677)
  → Token d'amorce (pas de prédiction)

Token 3: '(input' (ID: 10054)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '(' → logprob: -0.0002943479048553854
    2. ''' → logprob: -8.75029468536377
    3. '`' → logprob: -10.00029468536377
    4. '```' → logprob: -10.62529468536377
    5. '(
' → logprob: -10.75029468536377
    6. '(N' → logprob: -11.00029468536377
    7. '\(' → logprob: -12.25029468536377
    8. ')' → logprob: -12.25029468536377
    9. '"' → logprob: -12.62529468536377
    10. '("("' → logprob: -12.87529468536377

Token 4: '())
' (ID: 4574)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '(' → logprob: -0.2372170090675354
    2. ')' → logprob: -1.7372169494628906
    3. '()' → logprob: -3.4872169494628906
    4. '())' → logprob: -5.737216949462891
    5. '```' → logprob: -7.987216949462891
    6. '(
' → logprob: -8.23721694946289
    7. '`' → logprob: -9.61221694946289
    8. '(()' → logprob: -9.61221694946289
    9. '("("' → logprob: -9.61221694946289
    10. '")' → logprob: -9.73721694946289

Token 5: 'print' (ID: 1598)
  Prédit: 'for'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'for' → logprob: -0.7973122596740723
    2. 'if' → logprob: -1.7973122596740723
    3. '\n' → logprob: -2.1723122596740723
    4. '`' → logprob: -3.1723122596740723
    5. 'x' → logprob: -3.6723122596740723
    6. '```' → logprob: -3.6723122596740723
    7. 's' → logprob: -3.7973122596740723
    8. 'a' → logprob: -3.9223122596740723
    9. '\' → logprob: -4.047312259674072
    10. ')' → logprob: -4.297312259674072

Token 6: '((' (ID: 2054)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(' → logprob: -0.0018910301150754094
    2. '('' → logprob: -6.501891136169434
    3. '("("' → logprob: -7.876891136169434
    4. '()' → logprob: -12.876891136169434
    5. '("""' → logprob: -13.001891136169434
    6. '(
' → logprob: -14.126891136169434
    7. '(`' → logprob: -14.251891136169434
    8. '("")' → logprob: -14.626891136169434
    9. '((' → logprob: -14.751891136169434
    10. '("' → logprob: -15.001891136169434

Token 7: 'N' (ID: 45)
  Prédit: 'N'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'N' → logprob: -0.005404507741332054
    2. ''N' → logprob: -6.255404472351074
    3. '2' → logprob: -6.880404472351074
    4. ' N' → logprob: -7.130404472351074
    5. 'int' → logprob: -8.380404472351074
    6. ''' → logprob: -8.755404472351074
    7. '(' → logprob: -8.755404472351074
    8. '"N' → logprob: -9.005404472351074
    9. 'sum' → logprob: -9.130404472351074
    10. ')' → logprob: -9.255404472351074

Token 8: ' +' (ID: 659)
  Prédit: '+'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '+' → logprob: -0.12670747935771942
    2. ' +' → logprob: -3.0017075538635254
    3. '))' → logprob: -3.8767075538635254
    4. '-' → logprob: -4.001707553863525
    5. ')' → logprob: -4.376707553863525
    6. '*' → logprob: -4.751707553863525
    7. ' *' → logprob: -5.251707553863525
    8. '**' → logprob: -6.626707553863525
    9. ' -' → logprob: -6.626707553863525
    10. ' ))' → logprob: -8.376707077026367

Token 9: ' ' (ID: 220)
  Prédit: ' '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' ' → logprob: -0.180046945810318
    2. '1' → logprob: -1.8050469160079956
    3. '2' → logprob: -9.180047035217285
    4. '3' → logprob: -9.805047035217285
    5. ' N' → logprob: -10.180047035217285
    6. '5' → logprob: -10.180047035217285
    7. '4' → logprob: -10.430047035217285
    8. ' (' → logprob: -11.555047035217285
    9. '7' → logprob: -12.305047035217285
    10. 'N' → logprob: -12.305047035217285

Token 10: '1' (ID: 16)
  Prédit: '1'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '1' → logprob: -0.01043821219354868
    2. ' ' → logprob: -4.760438442230225
    3. '2' → logprob: -7.385438442230225
    4. '3' → logprob: -7.760438442230225
    5. '4' → logprob: -7.760438442230225
    6. '5' → logprob: -8.510437965393066
    7. ' N' → logprob: -10.260437965393066
    8. 'N' → logprob: -10.635437965393066
    9. '7' → logprob: -10.760437965393066
    10. '9' → logprob: -10.885437965393066

Token 11: ')' (ID: 8)
  Prédit: ')'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')' → logprob: -0.062193989753723145
    2. '))' → logprob: -2.8121938705444336
    3. ')**' → logprob: -9.437193870544434
    4. ')))' → logprob: -9.812193870544434
    5. '**' → logprob: -10.687193870544434
    6. '//' → logprob: -11.562193870544434
    7. ')*' → logprob: -11.562193870544434
    8. ' )' → logprob: -11.687193870544434
    9. '```' → logprob: -11.687193870544434
    10. '*' → logprob: -11.812193870544434

Token 12: ' /' (ID: 820)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ')' → logprob: -0.0004851306148339063
    2. '))' → logprob: -8.12548542022705
    3. '//' → logprob: -9.50048542022705
    4. '*' → logprob: -10.12548542022705
    5. '`)' → logprob: -10.50048542022705
    6. '**' → logprob: -11.25048542022705
    7. ' )' → logprob: -11.62548542022705
    8. '#' → logprob: -12.37548542022705
    9. '*)' → logprob: -12.75048542022705
    10. '```' → logprob: -12.75048542022705

Token 13: ' ' (ID: 220)
  Prédit: '2'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '2' → logprob: -0.08918298035860062
    2. ' ' → logprob: -2.4641830921173096
    3. '10' → logprob: -9.46418285369873
    4. '(' → logprob: -9.58918285369873
    5. '100' → logprob: -10.71418285369873
    6. '1' → logprob: -10.96418285369873
    7. '3' → logprob: -11.08918285369873
    8. ' (' → logprob: -11.21418285369873
    9. '6' → logprob: -11.58918285369873
    10. '```' → logprob: -12.46418285369873

Token 14: '2' (ID: 17)
  Prédit: '2'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '2' → logprob: -0.01695658639073372
    2. ' ' → logprob: -4.266956806182861
    3. '10' → logprob: -7.016956806182861
    4. '100' → logprob: -7.016956806182861
    5. '(' → logprob: -7.641956806182861
    6. 'N' → logprob: -8.391956329345703
    7. '1' → logprob: -9.266956329345703
    8. '(N' → logprob: -9.516956329345703
    9. ' (' → logprob: -10.266956329345703
    10. '3' → logprob: -10.641956329345703

Token 15: ' /' (ID: 820)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ')' → logprob: -1.1875571544806007e-05
    2. '))' → logprob: -11.625011444091797
    3. '`)' → logprob: -13.375011444091797
    4. ' )' → logprob: -14.875011444091797
    5. ')`' → logprob: -15.125011444091797
    6. '')' → logprob: -15.500011444091797
    7. '*)' → logprob: -15.625011444091797
    8. '*' → logprob: -16.500011444091797
    9. ')
' → logprob: -16.750011444091797
    10. '```' → logprob: -17.375011444091797

Token 16: ' N' (ID: 478)
  Prédit: '2'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '2' → logprob: -0.01510506309568882
    2. ' ' → logprob: -4.390105247497559
    3. 'N' → logprob: -6.390105247497559
    4. '3' → logprob: -7.515105247497559
    5. '(' → logprob: -9.140105247497559
    6. ' N' → logprob: -9.265105247497559
    7. '1' → logprob: -9.265105247497559
    8. ')' → logprob: -10.890105247497559
    9. ' (' → logprob: -11.140105247497559
    10. '(N' → logprob: -11.390105247497559

Token 17: ' if' (ID: 538)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ')' → logprob: -4.263011578586884e-05
    2. '))' → logprob: -10.750042915344238
    3. '`)' → logprob: -11.000042915344238
    4. '*)' → logprob: -13.500042915344238
    5. '')' → logprob: -13.750042915344238
    6. ' )' → logprob: -14.625042915344238
    7. '*' → logprob: -14.625042915344238
    8. ')`' → logprob: -15.250042915344238
    9. '```' → logprob: -15.375042915344238
    10. ')))' → logprob: -15.625042915344238

Token 18: ' N' (ID: 478)
  Prédit: ' N'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' N' → logprob: -0.12714669108390808
    2. 'N' → logprob: -2.1271467208862305
    3. ' (' → logprob: -9.37714672088623
    4. '(' → logprob: -10.00214672088623
    5. ')' → logprob: -10.62714672088623
    6. ' ' → logprob: -10.87714672088623
    7. '(N' → logprob: -10.87714672088623
    8. ' isinstance' → logprob: -11.12714672088623
    9. ' )' → logprob: -12.37714672088623
    10. '0' → logprob: -12.87714672088623

Token 19: ' &' (ID: 827)
  Prédit: ' >'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' >' → logprob: -0.06821924448013306
    2. '>' → logprob: -3.3182191848754883
    3. ' !=' → logprob: -3.6932191848754883
    4. ' ' → logprob: -5.693219184875488
    5. ' ==' → logprob: -7.568219184875488
    6. '!=' → logprob: -7.818219184875488
    7. ' >=' → logprob: -8.443219184875488
    8. ' else' → logprob: -8.943219184875488
    9. ' %' → logprob: -9.943219184875488
    10. ' <=' → logprob: -10.193219184875488

Token 20: ' ' (ID: 220)
  Prédit: ' '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' ' → logprob: -0.17980945110321045
    2. '1' → logprob: -1.8048094511032104
    3. '-' → logprob: -11.1798095703125
    4. ' (' → logprob: -11.4298095703125
    5. ' ' → logprob: -11.4298095703125
    6. '(' → logprob: -11.9298095703125
    7. ' N' → logprob: -12.1798095703125
    8. 'nbsp' → logprob: -12.8673095703125
    9. '#' → logprob: -13.4923095703125
    10. 'N' → logprob: -13.6173095703125

Token 21: '1' (ID: 16)
  Prédit: '1'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '1' → logprob: -0.048628926277160645
    2. ' ' → logprob: -3.048628807067871
    3. '3' → logprob: -11.423628807067871
    4. '(' → logprob: -11.673628807067871
    5. '-' → logprob: -12.173628807067871
    6. '(N' → logprob: -12.798628807067871
    7. 'N' → logprob: -12.923628807067871
    8. '7' → logprob: -12.923628807067871
    9. ' (' → logprob: -12.923628807067871
    10. ' ' → logprob: -13.048628807067871

Token 22: ' else' (ID: 1203)
  Prédit: ' else'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' else' → logprob: -0.024681134149432182
    2. ' ' → logprob: -4.524681091308594
    3. 'else' → logprob: -5.149681091308594
    4. '==' → logprob: -5.399681091308594
    5. ' ==' → logprob: -5.899681091308594
    6. '```' → logprob: -8.649681091308594
    7. '>' → logprob: -9.024681091308594
    8. ')' → logprob: -10.024681091308594
    9. '()' → logprob: -10.649681091308594
    10. ' !=' → logprob: -10.899681091308594

Token 23: ' ' (ID: 220)
  Prédit: ' N'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' N' → logprob: -1.2976117134094238
    2. '0' → logprob: -1.6726117134094238
    3. '1' → logprob: -1.6726117134094238
    4. ' ' → logprob: -1.9226117134094238
    5. ' (' → logprob: -2.422611713409424
    6. '(N' → logprob: -2.797611713409424
    7. '(' → logprob: -3.547611713409424
    8. ''' → logprob: -4.547611713409424
    9. '"' → logprob: -5.047611713409424
    10. 'N' → logprob: -5.672611713409424

Token 24: '0' (ID: 15)
  Prédit: '1'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '1' → logprob: -1.1244800090789795
    2. '(N' → logprob: -1.2494800090789795
    3. '0' → logprob: -1.8744800090789795
    4. '(' → logprob: -1.8744800090789795
    5. ' ' → logprob: -3.3744800090789795
    6. ' (' → logprob: -3.8744800090789795
    7. '((' → logprob: -4.749480247497559
    8. 'N' → logprob: -4.874480247497559
    9. ' N' → logprob: -5.624480247497559
    10. '"' → logprob: -5.999480247497559

Token 25: '.' (ID: 13)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ')' → logprob: -0.016872668638825417
    2. '<|end|>' → logprob: -4.391872882843018
    3. '
' → logprob: -6.016872882843018
    4. '*' → logprob: -7.766872882843018
    5. '\n' → logprob: -7.891872882843018
    6. '```' → logprob: -8.14187240600586
    7. ' ' → logprob: -8.64187240600586
    8. '(' → logprob: -9.01687240600586
    9. '\' → logprob: -9.14187240600586
    10. '#' → logprob: -9.64187240600586

Token 26: '5' (ID: 20)
  Prédit: '0'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '0' → logprob: -0.6639169454574585
    2. '5' → logprob: -0.7889169454574585
    3. ')' → logprob: -3.913917064666748
    4. '2' → logprob: -5.663917064666748
    5. '1' → logprob: -6.288917064666748
    6. '\n' → logprob: -6.413917064666748
    7. '.' → logprob: -6.788917064666748
    8. '<|end|>' → logprob: -7.288917064666748
    9. '```' → logprob: -7.788917064666748
    10. '6' → logprob: -8.28891658782959

Token 27: ')' (ID: 8)
  Prédit: ')'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')' → logprob: -4.5252596464706585e-05
    2. ' )' → logprob: -10.625044822692871
    3. ')
' → logprob: -12.250044822692871
    4. '')' → logprob: -12.375044822692871
    5. '`)' → logprob: -12.750044822692871
    6. '
' → logprob: -13.000044822692871
    7. '```' → logprob: -13.250044822692871
    8. '))' → logprob: -13.875044822692871
    9. '*' → logprob: -14.000044822692871
    10. '*)' → logprob: -14.000044822692871


RÉSUMÉ:
--------------------------------------------------------------------------------
Total des tokens analysés: 25
Tokens correctement prédits (1ère position, stricte): 10
Tokens correctement prédits (1ère position, avec adaptation): 10
Tokens correctement prédits (top 10): 17
Précision stricte (1ère position): 40.00%
Précision adaptée (1ère position): 40.00%
Précision (top 10): 68.00%
================================================================================
