================================================================================
ANALYSE DE PRÉDICTION TOKEN PAR TOKEN (BATCH API)
Date: 2025-06-04 20:13:59
Modèle de tokenisation: gpt-4o-mini
================================================================================

SCRIPT ANALYSÉ:
--------------------------------------------------------------------------------
input_string = input()
step_size = int(input())
result_string = ""
for current_index in range(len(input_string)):
    if current_index % step_size == 0:
        result_string += input_string[current_index]
print(result_string)
--------------------------------------------------------------------------------

RÉSULTATS D'ANALYSE TOKEN PAR TOKEN:
--------------------------------------------------------------------------------
Token 0: 'input' (ID: 2586)
  → Token d'amorce (pas de prédiction)

Token 1: '_string' (ID: 8609)
  → Token d'amorce (pas de prédiction)

Token 2: ' =' (ID: 314)
  → Token d'amorce (pas de prédiction)

Token 3: ' input' (ID: 3422)
  Prédit: '"'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '"' → logprob: -0.024985339492559433
    2. ''' → logprob: -3.8999853134155273
    3. ' ' → logprob: -6.149985313415527
    4. ' "' → logprob: -6.399985313415527
    5. '""' → logprob: -8.399985313415527
    6. '"""' → logprob: -8.774985313415527
    7. '"user' → logprob: -9.524985313415527
    8. ' '' → logprob: -9.899985313415527
    9. 'input' → logprob: -10.274985313415527
    10. '```' → logprob: -10.774985313415527

Token 4: '()
' (ID: 1234)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '(' → logprob: -0.006268735975027084
    2. ''' → logprob: -5.381268501281738
    3. '"' → logprob: -7.881268501281738
    4. '('' → logprob: -8.006268501281738
    5. '```' → logprob: -8.006268501281738
    6. '`' → logprob: -8.631268501281738
    7. '(
' → logprob: -8.881268501281738
    8. ')' → logprob: -9.506268501281738
    9. '()' → logprob: -10.131268501281738
    10. ''s' → logprob: -10.381268501281738

Token 5: 'step' (ID: 17509)
  Prédit: '.'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '.' → logprob: -0.02609126642346382
    2. '.strip' → logprob: -3.7760913372039795
    3. '.split' → logprob: -7.0260910987854
    4. '.lower' → logprob: -7.1510910987854
    5. 'if' → logprob: -8.026091575622559
    6. 'print' → logprob: -8.276091575622559
    7. '=' → logprob: -8.651091575622559
    8. 'strip' → logprob: -9.901091575622559
    9. '.replace' → logprob: -9.901091575622559
    10. ' if' → logprob: -10.026091575622559

Token 6: '_size' (ID: 5044)
  Prédit: '_'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_' → logprob: -0.537752628326416
    2. 's' → logprob: -1.162752628326416
    3. '(' → logprob: -3.162752628326416
    4. '=' → logprob: -3.662752628326416
    5. '_size' → logprob: -4.162752628326416
    6. ' =' → logprob: -5.037752628326416
    7. ')' → logprob: -5.162752628326416
    8. '[' → logprob: -6.287752628326416
    9. '_s' → logprob: -6.662752628326416
    10. '(s' → logprob: -7.037752628326416

Token 7: ' =' (ID: 314)
  Prédit: '_'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_' → logprob: -0.5411500930786133
    2. '=' → logprob: -1.2911500930786133
    3. '[' → logprob: -2.5411500930786133
    4. ')' → logprob: -3.9161500930786133
    5. '+' → logprob: -4.041150093078613
    6. ' =' → logprob: -4.291150093078613
    7. ' ' → logprob: -5.541150093078613
    8. ']' → logprob: -6.166150093078613
    9. '```' → logprob: -6.416150093078613
    10. '.' → logprob: -6.791150093078613

Token 8: ' int' (ID: 677)
  Prédit: ' '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' ' → logprob: -0.20175372064113617
    2. '1' → logprob: -1.7017537355422974
    3. ' len' → logprob: -9.076753616333008
    4. '2' → logprob: -9.451753616333008
    5. '0' → logprob: -9.701753616333008
    6. '4' → logprob: -10.076753616333008
    7. 'len' → logprob: -10.826753616333008
    8. ' int' → logprob: -12.201753616333008
    9. '3' → logprob: -12.326753616333008
    10. '32' → logprob: -12.451753616333008

Token 9: '(input' (ID: 10054)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '(' → logprob: -0.0165265966206789
    2. '('' → logprob: -4.641526699066162
    3. ''' → logprob: -5.266526699066162
    4. '```' → logprob: -8.266526222229004
    5. '[' → logprob: -8.391526222229004
    6. '"' → logprob: -8.391526222229004
    7. '("("' → logprob: -8.641526222229004
    8. '`' → logprob: -8.641526222229004
    9. ')' → logprob: -9.016526222229004
    10. '_' → logprob: -9.391526222229004

Token 10: '())
' (ID: 4574)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ')' → logprob: -0.8349765539169312
    2. '()' → logprob: -1.3349765539169312
    3. '())' → logprob: -1.4599765539169312
    4. '(' → logprob: -2.8349766731262207
    5. '('' → logprob: -5.084976673126221
    6. '_' → logprob: -6.084976673126221
    7. '_)' → logprob: -7.459976673126221
    8. '')' → logprob: -7.709976673126221
    9. '")' → logprob: -7.834976673126221
    10. '`)' → logprob: -7.834976673126221

Token 11: 'result' (ID: 2521)
  Prédit: 'for'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'for' → logprob: -0.08809006959199905
    2. '[' → logprob: -3.338090181350708
    3. 'i' → logprob: -4.463089942932129
    4. 'result' → logprob: -4.963089942932129
    5. '\n' → logprob: -5.463089942932129
    6. '#' → logprob: -5.713089942932129
    7. '=' → logprob: -5.838089942932129
    8. ' for' → logprob: -5.838089942932129
    9. ':' → logprob: -5.963089942932129
    10. 'n' → logprob: -6.088089942932129

Token 12: '_string' (ID: 8609)
  Prédit: '['
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '[' → logprob: -0.14217767119407654
    2. '_' → logprob: -2.1421775817871094
    3. '=' → logprob: -5.142177581787109
    4. '(' → logprob: -5.517177581787109
    5. '[:]' → logprob: -6.767177581787109
    6. ' =' → logprob: -7.017177581787109
    7. '+' → logprob: -7.142177581787109
    8. '[]' → logprob: -7.392177581787109
    9. 's' → logprob: -7.642177581787109
    10. ''' → logprob: -7.767177581787109

Token 13: ' =' (ID: 314)
  Prédit: '['
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '[' → logprob: -0.6590567231178284
    2. '+' → logprob: -1.4090566635131836
    3. '=' → logprob: -2.2840566635131836
    4. ' +=' → logprob: -2.7840566635131836
    5. '+=' → logprob: -3.0340566635131836
    6. ' =' → logprob: -4.159056663513184
    7. '.append' → logprob: -5.659056663513184
    8. '_' → logprob: -6.409056663513184
    9. '[]' → logprob: -6.534056663513184
    10. '+='' → logprob: -6.659056663513184

Token 14: ' ""
' (ID: 18061)
  Prédit: '"'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '"' → logprob: -0.6496104598045349
    2. ''' → logprob: -1.8996105194091797
    3. ' ""' → logprob: -2.2746105194091797
    4. ' ' → logprob: -3.0246105194091797
    5. ' "' → logprob: -3.1496105194091797
    6. 'input' → logprob: -3.2746105194091797
    7. ' input' → logprob: -3.2746105194091797
    8. '""' → logprob: -3.5246105194091797
    9. ' ''' → logprob: -4.14961051940918
    10. ' '' → logprob: -5.27461051940918

Token 15: 'for' (ID: 1938)
  Prédit: 'for'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'for' → logprob: -0.0008877566433511674
    2. ' for' → logprob: -8.000887870788574
    3. 'i' → logprob: -8.750887870788574
    4. '
' → logprob: -8.750887870788574
    5. 'f' → logprob: -8.875887870788574
    6. '\n' → logprob: -9.875887870788574
    7. '```' → logprob: -10.500887870788574
    8. '\' → logprob: -12.250887870788574
    9. 'n' → logprob: -12.375887870788574
    10. 'fo' → logprob: -12.750887870788574

Token 16: ' current' (ID: 2208)
  Prédit: ' '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' ' → logprob: -0.030481064692139626
    2. ' i' → logprob: -3.5304811000823975
    3. '  ' → logprob: -7.405480861663818
    4. 'i' → logprob: -10.655481338500977
    5. ' token' → logprob: -10.905481338500977
    6. ' in' → logprob: -11.655481338500977
    7. ' s' → logprob: -11.780481338500977
    8. ' ' → logprob: -11.905481338500977
    9. ' )' → logprob: -11.905481338500977
    10. ' c' → logprob: -12.030481338500977

Token 17: '_index' (ID: 7748)
  Prédit: '_'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_' → logprob: -0.011192000471055508
    2. ' ' → logprob: -4.7611918449401855
    3. ' _' → logprob: -6.6361918449401855
    4. '_character' → logprob: -7.3861918449401855
    5. '_char' → logprob: -8.261192321777344
    6. '_token' → logprob: -8.761192321777344
    7. '_string' → logprob: -9.761192321777344
    8. '_space' → logprob: -10.011192321777344
    9. ' in' → logprob: -10.011192321777344
    10. '_index' → logprob: -10.886192321777344

Token 18: ' in' (ID: 306)
  Prédit: ' in'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' in' → logprob: -0.015241153538227081
    2. ' ' → logprob: -4.3902411460876465
    3. 'in' → logprob: -6.0152411460876465
    4. '<|end|>' → logprob: -8.890241622924805
    5. '+' → logprob: -10.140241622924805
    6. '  ' → logprob: -10.765241622924805
    7. ' <' → logprob: -11.640241622924805
    8. ' +=' → logprob: -11.765241622924805
    9. '```' → logprob: -11.765241622924805
    10. '   ' → logprob: -11.890241622924805

Token 19: ' range' (ID: 3352)
  Prédit: ' range'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' range' → logprob: -0.020602617412805557
    2. 'range' → logprob: -3.8956027030944824
    3. ' ' → logprob: -10.145602226257324
    4. ' input' → logprob: -11.770602226257324
    5. ' current' → logprob: -11.895602226257324
    6. ' step' → logprob: -12.770602226257324
    7. ' xrange' → logprob: -13.520602226257324
    8. '	range' → logprob: -13.520602226257324
    9. '(range' → logprob: -14.645602226257324
    10. ' in' → logprob: -15.145602226257324

Token 20: '(len' (ID: 14990)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(' → logprob: -0.12763461470603943
    2. '(len' → logprob: -2.3776345252990723
    3. '(current' → logprob: -3.6276345252990723
    4. ' (' → logprob: -8.12763500213623
    5. '(step' → logprob: -9.00263500213623
    6. '(start' → logprob: -11.25263500213623
    7. '(input' → logprob: -11.25263500213623
    8. '(length' → logprob: -11.25263500213623
    9. '(
' → logprob: -11.50263500213623
    10. '((' → logprob: -13.50263500213623

Token 21: '(input' (ID: 10054)
  Prédit: '(input'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(input' → logprob: -0.029788913205266
    2. '(' → logprob: -3.5297889709472656
    3. '(current' → logprob: -10.529788970947266
    4. '(
' → logprob: -12.904788970947266
    5. 'input' → logprob: -13.279788970947266
    6. '(

' → logprob: -13.279788970947266
    7. ' (' → logprob: -13.529788970947266
    8. '(result' → logprob: -13.654788970947266
    9. '(output' → logprob: -14.154788970947266
    10. '(step' → logprob: -14.279788970947266

Token 22: '_string' (ID: 8609)
  Prédit: '_string'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_string' → logprob: -5.776898251497187e-05
    2. '(input' → logprob: -10.6250581741333
    3. '(' → logprob: -11.6250581741333
    4. 'string' → logprob: -11.8750581741333
    5. '(_' → logprob: -12.0000581741333
    6. '_' → logprob: -13.0000581741333
    7. '_input' → logprob: -13.2500581741333
    8. ')' → logprob: -13.3750581741333
    9. 'String' → logprob: -13.3750581741333
    10. '_strings' → logprob: -14.1250581741333

Token 23: ')):
' (ID: 22530)
  Prédit: ')):'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')):' → logprob: -0.2808980643749237
    2. '):' → logprob: -1.655898094177246
    3. ')' → logprob: -3.530898094177246
    4. '))' → logprob: -4.530898094177246
    5. '+' → logprob: -4.530898094177246
    6. ')):
' → logprob: -7.155898094177246
    7. ')+' → logprob: -7.405898094177246
    8. '[' → logprob: -7.530898094177246
    9. ']):' → logprob: -8.155898094177246
    10. ':' → logprob: -8.655898094177246

Token 24: '   ' (ID: 271)
  Prédit: ' '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' ' → logprob: -1.2661441564559937
    2. 'result' → logprob: -1.3911441564559937
    3. '   ' → logprob: -1.7661441564559937
    4. '    ' → logprob: -2.266144275665283
    5. ' result' → logprob: -2.266144275665283
    6. '```' → logprob: -3.641144275665283
    7. ' ```' → logprob: -3.766144275665283
    8. ' if' → logprob: -4.641144275665283
    9. ' current' → logprob: -5.766144275665283
    10. '<|end|>' → logprob: -5.766144275665283

Token 25: ' if' (ID: 538)
  Prédit: ' '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' ' → logprob: -0.2705526053905487
    2. 'result' → logprob: -2.520552635192871
    3. ' ```' → logprob: -3.395552635192871
    4. ' result' → logprob: -3.770552635192871
    5. ' current' → logprob: -4.145552635192871
    6. 'c' → logprob: -4.145552635192871
    7. 'current' → logprob: -4.895552635192871
    8. '   ' → logprob: -4.895552635192871
    9. '```' → logprob: -5.020552635192871
    10. ' if' → logprob: -5.145552635192871

Token 26: ' current' (ID: 2208)
  Prédit: ' current'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' current' → logprob: -0.037801146507263184
    2. 'current' → logprob: -3.7878012657165527
    3. ' (' → logprob: -4.912801265716553
    4. ' input' → logprob: -6.037801265716553
    5. ' step' → logprob: -6.412801265716553
    6. '(current' → logprob: -6.537801265716553
    7. ' ' → logprob: -6.537801265716553
    8. 'input' → logprob: -9.162800788879395
    9. ' abs' → logprob: -10.537800788879395
    10. 'step' → logprob: -11.787800788879395

Token 27: '_index' (ID: 7748)
  Prédit: '_index'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_index' → logprob: -0.19537770748138428
    2. '_' → logprob: -1.9453777074813843
    3. '_x' → logprob: -4.695377826690674
    4. '__' → logprob: -5.570377826690674
    5. '_string' → logprob: -5.570377826690674
    6. '_e' → logprob: -5.695377826690674
    7. '_ex' → logprob: -5.820377826690674
    8. ' _' → logprob: -5.945377826690674
    9. '_i' → logprob: -6.695377826690674
    10. '_char' → logprob: -6.695377826690674

Token 28: ' %' (ID: 1851)
  Prédit: ' %'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' %' → logprob: -0.10033272206783295
    2. ' ' → logprob: -2.850332736968994
    3. '+' → logprob: -4.350332736968994
    4. ' +' → logprob: -4.475332736968994
    5. '%' → logprob: -4.850332736968994
    6. ' <' → logprob: -5.350332736968994
    7. ' >=' → logprob: -7.600332736968994
    8. ' <%' → logprob: -8.975332260131836
    9. '   ' → logprob: -10.475332260131836
    10. '    ' → logprob: -10.600332260131836

Token 29: ' step' (ID: 5983)
  Prédit: ' step'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' step' → logprob: -0.08905234187841415
    2. 'step' → logprob: -2.464052438735962
    3. ' ' → logprob: -9.214052200317383
    4. '(step' → logprob: -11.589052200317383
    5. '	step' → logprob: -13.839052200317383
    6. 'space' → logprob: -14.589052200317383
    7. '2' → logprob: -14.714052200317383
    8. '_step' → logprob: -14.714052200317383
    9. ' ' → logprob: -15.339052200317383
    10. 'Step' → logprob: -15.339052200317383

Token 30: '_size' (ID: 5044)
  Prédit: '_size'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_size' → logprob: -0.0008427416905760765
    2. '_' → logprob: -7.625842571258545
    3. '_s' → logprob: -8.000843048095703
    4. ' _' → logprob: -11.750843048095703
    5. '_step' → logprob: -13.000843048095703
    6. '```' → logprob: -13.125843048095703
    7. '_sizes' → logprob: -13.250843048095703
    8. '_code' → logprob: -14.125843048095703
    9. '_i' → logprob: -14.625843048095703
    10. '__' → logprob: -15.375843048095703

Token 31: ' ==' (ID: 951)
  Prédit: ' =='
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' ==' → logprob: -0.19387656450271606
    2. '==' → logprob: -2.1938765048980713
    3. ' !=' → logprob: -2.8188765048980713
    4. '!=' → logprob: -5.31887674331665
    5. '=' → logprob: -9.443876266479492
    6. ' ' → logprob: -9.818876266479492
    7. ':' → logprob: -10.443876266479492
    8. ' =' → logprob: -11.693876266479492
    9. '>' → logprob: -12.818876266479492
    10. ' ' → logprob: -12.943876266479492

Token 32: ' ' (ID: 220)
  Prédit: ' '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' ' → logprob: -0.3868732452392578
    2. '0' → logprob: -1.1368732452392578
    3. '1' → logprob: -13.886873245239258
    4. '<|end|>' → logprob: -13.886873245239258
    5. ' ' → logprob: -15.886873245239258
    6. '=' → logprob: -17.261873245239258
    7. '<|end|>' → logprob: -17.574373245239258
    8. '```' → logprob: -17.761873245239258
    9. 'space' → logprob: -18.136873245239258
    10. '    ' → logprob: -18.574373245239258

Token 33: '0' (ID: 15)
  Prédit: '0'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '0' → logprob: -5.157039049663581e-05
    2. ' ' → logprob: -9.875051498413086
    3. '=' → logprob: -19.625051498413086
    4. '1' → logprob: -19.875051498413086
    5. 'current' → logprob: -21.250051498413086
    6. '00' → logprob: -21.875051498413086
    7. '   ' → logprob: -22.125051498413086
    8. '۰' → logprob: -22.250051498413086
    9. '==' → logprob: -22.250051498413086
    10. '```' → logprob: -22.250051498413086

Token 34: ':
' (ID: 734)
  Prédit: ':'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ':' → logprob: -2.3557529857498594e-05
    2. ' :' → logprob: -11.37502384185791
    3. '):' → logprob: -13.00002384185791
    4. ':
' → logprob: -13.00002384185791
    5. '   ' → logprob: -13.50002384185791
    6. '=' → logprob: -13.62502384185791
    7. '<|end|>' → logprob: -13.62502384185791
    8. ':**' → logprob: -14.12502384185791
    9. ',' → logprob: -14.12502384185791
    10. '.' → logprob: -14.75002384185791

Token 35: '       ' (ID: 309)
  Prédit: '       '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '       ' → logprob: -0.2309926301240921
    2. 'result' → logprob: -1.9809926748275757
    3. ' result' → logprob: -3.480992555618286
    4. '   ' → logprob: -3.980992555618286
    5. '    ' → logprob: -4.605992794036865
    6. ' ' → logprob: -5.105992794036865
    7. ' ```' → logprob: -7.355992794036865
    8. '```' → logprob: -7.605992794036865
    9. '	result' → logprob: -8.480992317199707
    10. '        
' → logprob: -8.605992317199707

Token 36: ' result' (ID: 1534)
  Prédit: 'result'
  Correct (stricte): False
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'result' (adapté à ' result') → logprob: -0.00939171388745308
    2. ' result' → logprob: -4.759391784667969
    3. '   ' → logprob: -7.259391784667969
    4. '       ' → logprob: -9.759391784667969
    5. '	result' → logprob: -11.884391784667969
    6. '           ' → logprob: -12.634391784667969
    7. 'r' → logprob: -13.634391784667969
    8. ' ' → logprob: -14.134391784667969
    9. '    ' → logprob: -14.259391784667969
    10. '```' → logprob: -14.259391784667969

Token 37: '_string' (ID: 8609)
  Prédit: '_string'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_string' → logprob: -0.0002788551209960133
    2. '_' → logprob: -8.25027847290039
    3. '_String' → logprob: -12.12527847290039
    4. '_str' → logprob: -12.87527847290039
    5. '_s' → logprob: -13.00027847290039
    6. '```' → logprob: -13.25027847290039
    7. '__' → logprob: -14.12527847290039
    8. '_strings' → logprob: -14.12527847290039
    9. '_append' → logprob: -14.25027847290039
    10. 'string' → logprob: -14.25027847290039

Token 38: ' +=' (ID: 2757)
  Prédit: '+='
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '+=' → logprob: -0.4816931486129761
    2. ' +=' → logprob: -1.106693148612976
    3. '+' → logprob: -2.9816932678222656
    4. '+='' → logprob: -7.481693267822266
    5. '+="' → logprob: -8.481693267822266
    6. '.append' → logprob: -9.481693267822266
    7. ' +' → logprob: -10.356693267822266
    8. ']+=' → logprob: -11.106693267822266
    9. '[' → logprob: -12.606693267822266
    10. '<|end|>' → logprob: -12.981693267822266

Token 39: ' input' (ID: 3422)
  Prédit: 'input'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'input' → logprob: -0.12692894041538239
    2. ' input' → logprob: -2.1269290447235107
    3. '(input' → logprob: -14.75192928314209
    4. '[input' → logprob: -16.001928329467773
    5. 'current' → logprob: -16.126928329467773
    6. ' ' → logprob: -16.126928329467773
    7. ' current' → logprob: -16.751928329467773
    8. '	input' → logprob: -17.001928329467773
    9. '<input' → logprob: -17.126928329467773
    10. '   ' → logprob: -17.376928329467773

Token 40: '_string' (ID: 8609)
  Prédit: '_string'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_string' → logprob: -1.9266199160483666e-05
    2. '_' → logprob: -11.500019073486328
    3. '_character' → logprob: -12.875019073486328
    4. '_char' → logprob: -13.250019073486328
    5. '```' → logprob: -13.750019073486328
    6. '_s' → logprob: -14.000019073486328
    7. '_str' → logprob: -14.000019073486328
    8. '_token' → logprob: -14.500019073486328
    9. 'string' → logprob: -15.000019073486328
    10. 'String' → logprob: -15.125019073486328

Token 41: '[current' (ID: 49470)
  Prédit: '[current'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '[current' → logprob: -0.0032261949963867664
    2. '[' → logprob: -5.753226280212402
    3. 'current' → logprob: -10.628226280212402
    4. '[
' → logprob: -11.378226280212402
    5. '[cur' → logprob: -12.753226280212402
    6. '```' → logprob: -13.128226280212402
    7. '   ' → logprob: -13.378226280212402
    8. '[curr' → logprob: -13.378226280212402
    9. ' [' → logprob: -13.503226280212402
    10. ' current' → logprob: -13.878226280212402

Token 42: '_index' (ID: 7748)
  Prédit: '_index'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_index' → logprob: -1.1472419600977446e-06
    2. ' _' → logprob: -14.750000953674316
    3. '_' → logprob: -15.000000953674316
    4. 'index' → logprob: -16.250001907348633
    5. 'Index' → logprob: -16.875001907348633
    6. '+' → logprob: -17.000001907348633
    7. '_token' → logprob: -17.125001907348633
    8. '__' → logprob: -17.375001907348633
    9. ']' → logprob: -17.500001907348633
    10. '_INDEX' → logprob: -17.500001907348633

Token 43: ']
' (ID: 1592)
  Prédit: ']'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ']' → logprob: -9.269565634895116e-05
    2. ' ]' → logprob: -10.000092506408691
    3. ']
' → logprob: -10.000092506408691
    4. '+' → logprob: -14.375092506408691
    5. ']

' → logprob: -14.625092506408691
    6. ')' → logprob: -14.875092506408691
    7. '}' → logprob: -15.125092506408691
    8. '']' → logprob: -16.625093460083008
    9. '"]' → logprob: -17.250093460083008
    10. '[' → logprob: -17.250093460083008

Token 44: 'print' (ID: 1598)
  Prédit: 'print'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'print' → logprob: -0.018228961154818535
    2. '
' → logprob: -4.643229007720947
    3. '<|end|>' → logprob: -5.768229007720947
    4. '```' → logprob: -6.393229007720947
    5. '\n' → logprob: -6.518229007720947
    6. '#' → logprob: -7.518229007720947
    7. ' ' → logprob: -7.893229007720947
    8. ' print' → logprob: -8.518228530883789
    9. ')' → logprob: -8.643228530883789
    10. '[' → logprob: -8.768228530883789

Token 45: '(result' (ID: 8111)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(' → logprob: -0.016922602429986
    2. '(result' → logprob: -4.141922473907471
    3. '("("' → logprob: -7.141922473907471
    4. '('' → logprob: -9.516922950744629
    5. 'result' → logprob: -11.766922950744629
    6. '()' → logprob: -12.391922950744629
    7. '(`' → logprob: -13.391922950744629
    8. '(
' → logprob: -13.516922950744629
    9. ' (' → logprob: -13.641922950744629
    10. '((' → logprob: -13.891922950744629

Token 46: '_string' (ID: 8609)
  Prédit: '_string'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_string' → logprob: -0.0042328545823693275
    2. '_' → logprob: -5.629232883453369
    3. '_s' → logprob: -7.754232883453369
    4. '_str' → logprob: -9.004232406616211
    5. '_strings' → logprob: -10.754232406616211
    6. '```' → logprob: -11.129232406616211
    7. ' _' → logprob: -11.754232406616211
    8. ')_' → logprob: -12.004232406616211
    9. '_t' → logprob: -12.254232406616211
    10. '_String' → logprob: -12.504232406616211

Token 47: ')' (ID: 8)
  Prédit: ')'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')' → logprob: -6.704273118884885e-07
    2. ' )' → logprob: -15.125000953674316
    3. '))' → logprob: -15.750000953674316
    4. '')' → logprob: -16.5
    5. ')
' → logprob: -16.875
    6. ')`' → logprob: -17.375
    7. '`)' → logprob: -17.5
    8. '[' → logprob: -18.25
    9. '")' → logprob: -18.25
    10. '(' → logprob: -18.5


RÉSUMÉ:
--------------------------------------------------------------------------------
Total des tokens analysés: 45
Tokens correctement prédits (1ère position, stricte): 21
Tokens correctement prédits (1ère position, avec adaptation): 22
Tokens correctement prédits (top 10): 37
Précision stricte (1ère position): 46.67%
Précision adaptée (1ère position): 48.89%
Précision (top 10): 82.22%
================================================================================
