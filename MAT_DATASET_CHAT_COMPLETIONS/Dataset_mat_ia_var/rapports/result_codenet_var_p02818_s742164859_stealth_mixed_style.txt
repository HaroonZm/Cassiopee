================================================================================
ANALYSE DE PRÉDICTION TOKEN PAR TOKEN (BATCH API)
Date: 2025-06-04 19:33:11
Modèle de tokenisation: gpt-4o-mini
================================================================================

SCRIPT ANALYSÉ:
--------------------------------------------------------------------------------
def process_input():
    data = input().split()
    # Style: Fonctionnelle & procédurale mélangées
    a = int(data[0])
    b = int(data[1])
    k = int(data[2])

    def adjust(val, sub):
        # Style: fonction imbriquée
        return val - sub if val - sub > 0 else 0

    ans_t = max(a - k, 0)

    # Style: ternaire imbriqué dans une assignation
    b_new = b if a - k >= 0 else max(0, b - (k - a))

    # Utilisation d'un print à la fin, mais tuple généré dans une liste par compréhension pour ajouter de la variété
    output = [ans_t, b_new]
    print(*output)

process_input()
--------------------------------------------------------------------------------

RÉSULTATS D'ANALYSE TOKEN PAR TOKEN:
--------------------------------------------------------------------------------
Token 0: 'def' (ID: 1314)
  → Token d'amorce (pas de prédiction)

Token 1: ' process' (ID: 2273)
  → Token d'amorce (pas de prédiction)

Token 2: '_input' (ID: 12507)
  → Token d'amorce (pas de prédiction)

Token 3: '():
' (ID: 8595)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '(' → logprob: -0.055591367185115814
    2. '_' → logprob: -2.930591344833374
    3. '```' → logprob: -8.430591583251953
    4. '(_' → logprob: -8.930591583251953
    5. '(_:' → logprob: -9.305591583251953
    6. ' (' → logprob: -10.180591583251953
    7. '_(' → logprob: -10.430591583251953
    8. '(:' → logprob: -10.680591583251953
    9. '_token' → logprob: -11.055591583251953
    10. '():' → logprob: -11.305591583251953

Token 4: '   ' (ID: 271)
  Prédit: '\n'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '\n' → logprob: -0.754636287689209
    2. '\' → logprob: -1.129636287689209
    3. '   ' → logprob: -2.129636287689209
    4. '```' → logprob: -3.629636287689209
    5. ' 
' → logprob: -4.254636287689209
    6. '(' → logprob: -4.379636287689209
    7. '    
' → logprob: -4.754636287689209
    8. ' ' → logprob: -5.629636287689209
    9. '' → logprob: -5.879636287689209
    10. '    ' → logprob: -6.004636287689209

Token 5: ' data' (ID: 1238)
  Prédit: 'return'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'return' → logprob: -0.9723517894744873
    2. 'user' → logprob: -1.4723517894744873
    3. 'input' → logprob: -1.8473517894744873
    4. 'x' → logprob: -2.9723517894744873
    5. '   ' → logprob: -2.9723517894744873
    6. 'i' → logprob: -3.0973517894744873
    7. 'r' → logprob: -3.7223517894744873
    8. 'pass' → logprob: -4.097352027893066
    9. '#' → logprob: -4.347352027893066
    10. 'n' → logprob: -4.597352027893066

Token 6: ' =' (ID: 314)
  Prédit: '.'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '.' → logprob: -0.022782986983656883
    2. '[' → logprob: -4.147782802581787
    3. ' =' → logprob: -6.147782802581787
    4. '_' → logprob: -6.897782802581787
    5. '=' → logprob: -7.147782802581787
    6. '.append' → logprob: -7.397782802581787
    7. 's' → logprob: -8.022783279418945
    8. '[:]' → logprob: -8.022783279418945
    9. ')' → logprob: -8.147783279418945
    10. '.setdefault' → logprob: -8.397783279418945

Token 7: ' input' (ID: 3422)
  Prédit: ' input'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' input' → logprob: -0.1088438481092453
    2. 'input' → logprob: -2.4838438034057617
    3. ' []' → logprob: -4.233843803405762
    4. ' ' → logprob: -5.983843803405762
    5. ' data' → logprob: -6.358843803405762
    6. 'data' → logprob: -8.108843803405762
    7. ' {}' → logprob: -8.983843803405762
    8. '[]' → logprob: -9.358843803405762
    9. '   ' → logprob: -9.608843803405762
    10. ' user' → logprob: -10.358843803405762

Token 8: '().' (ID: 1454)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '(' → logprob: -0.0006583464564755559
    2. '('' → logprob: -7.8756585121154785
    3. ''' → logprob: -9.37565803527832
    4. '()' → logprob: -9.62565803527832
    5. '("("' → logprob: -9.75065803527832
    6. '"' → logprob: -10.87565803527832
    7. '(
' → logprob: -10.87565803527832
    8. '```' → logprob: -11.87565803527832
    9. '`' → logprob: -12.25065803527832
    10. ')' → logprob: -12.62565803527832

Token 9: 'split' (ID: 13627)
  Prédit: 'strip'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'strip' → logprob: -0.0025390402879565954
    2. 'split' → logprob: -6.002539157867432
    3. 'rstrip' → logprob: -9.752538681030273
    4. 'lower' → logprob: -12.752538681030273
    5. 'replace' → logprob: -13.127538681030273
    6. 'startswith' → logprob: -16.377538681030273
    7. 'str' → logprob: -16.502538681030273
    8. 'read' → logprob: -16.502538681030273
    9. ' strip' → logprob: -17.627538681030273
    10. '```' → logprob: -18.002538681030273

Token 10: '()
' (ID: 1234)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '(' → logprob: -0.02721394971013069
    2. '('' → logprob: -3.7772140502929688
    3. '("("' → logprob: -6.152214050292969
    4. '()' → logprob: -6.402214050292969
    5. '(`' → logprob: -9.902214050292969
    6. '(
' → logprob: -10.777214050292969
    7. '`' → logprob: -11.027214050292969
    8. ''' → logprob: -11.402214050292969
    9. '((' → logprob: -11.527214050292969
    10. '("' → logprob: -11.527214050292969

Token 11: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.04807896912097931
    2. '[' → logprob: -4.423079013824463
    3. '```' → logprob: -4.423079013824463
    4. 'if' → logprob: -5.048079013824463
    5. '`' → logprob: -5.923079013824463
    6. ' if' → logprob: -6.048079013824463
    7. '.' → logprob: -6.173079013824463
    8. ' ' → logprob: -6.173079013824463
    9. '    
' → logprob: -6.423079013824463
    10. 'for' → logprob: -6.548079013824463

Token 12: ' #' (ID: 1069)
  Prédit: 'for'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'for' → logprob: -1.1821086406707764
    2. 'return' → logprob: -1.5571086406707764
    3. 'i' → logprob: -1.6821086406707764
    4. 'if' → logprob: -1.9321086406707764
    5. 'r' → logprob: -2.6821086406707764
    6. 'result' → logprob: -3.5571086406707764
    7. 'n' → logprob: -3.6821086406707764
    8. '   ' → logprob: -4.9321088790893555
    9. 'f' → logprob: -5.0571088790893555
    10. 'x' → logprob: -5.5571088790893555

Token 13: ' Style' (ID: 17602)
  Prédit: 'return'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'return' → logprob: -0.6643054485321045
    2. 'result' → logprob: -1.9143054485321045
    3. 'for' → logprob: -2.2893054485321045
    4. '#' → logprob: -2.9143054485321045
    5. '   ' → logprob: -3.4143054485321045
    6. 'if' → logprob: -3.4143054485321045
    7. ' return' → logprob: -3.7893054485321045
    8. 'r' → logprob: -3.7893054485321045
    9. ' for' → logprob: -4.164305686950684
    10. ' if' → logprob: -4.164305686950684

Token 14: ':' (ID: 25)
  Prédit: '_'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_' → logprob: -0.31353914737701416
    2. ' =' → logprob: -2.5635390281677246
    3. '=' → logprob: -2.8135390281677246
    4. '[' → logprob: -2.9385390281677246
    5. '.' → logprob: -3.3135390281677246
    6. ' ' → logprob: -4.313539028167725
    7. '   ' → logprob: -4.313539028167725
    8. '(' → logprob: -5.813539028167725
    9. ':' → logprob: -6.313539028167725
    10. '_data' → logprob: -6.688539028167725

Token 15: ' Fonction' (ID: 189149)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '   ' → logprob: -1.4228308200836182
    2. 'return' → logprob: -1.6728308200836182
    3. 'data' → logprob: -1.9228308200836182
    4. ' return' → logprob: -2.797830820083618
    5. ' snake' → logprob: -2.797830820083618
    6. 'snake' → logprob: -2.797830820083618
    7. ' for' → logprob: -3.172830820083618
    8. 'for' → logprob: -3.297830820083618
    9. '```' → logprob: -3.672830820083618
    10. ' data' → logprob: -3.672830820083618

Token 16: 'nelle' (ID: 30805)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.9391424059867859
    2. '()' → logprob: -1.6891424655914307
    3. '_' → logprob: -2.0641424655914307
    4. '(' → logprob: -2.4391424655914307
    5. 'def' → logprob: -2.5641424655914307
    6. 'return' → logprob: -3.4391424655914307
    7. ':' → logprob: -3.4391424655914307
    8. '=' → logprob: -3.5641424655914307
    9. '```' → logprob: -5.189142227172852
    10. '[' → logprob: -5.439142227172852

Token 17: ' &' (ID: 827)
  Prédit: 'return'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'return' → logprob: -0.1664927899837494
    2. 'r' → logprob: -2.6664927005767822
    3. '   ' → logprob: -3.1664927005767822
    4. 'result' → logprob: -4.166492938995361
    5. '```' → logprob: -4.291492938995361
    6. 'for' → logprob: -5.791492938995361
    7. '[' → logprob: -6.666492938995361
    8. ')' → logprob: -6.916492938995361
    9. 'if' → logprob: -6.916492938995361
    10. ',' → logprob: -7.041492938995361

Token 18: ' procéd' (ID: 68020)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '   ' → logprob: -1.4197930097579956
    2. ' imperative' → logprob: -2.294793128967285
    3. ' fonction' → logprob: -2.419793128967285
    4. ' impér' → logprob: -2.419793128967285
    5. '```' → logprob: -3.419793128967285
    6. 'Python' → logprob: -3.419793128967285
    7. 'imper' → logprob: -3.544793128967285
    8. 'imp' → logprob: -3.544793128967285
    9. 'def' → logprob: -3.669793128967285
    10. 'fonction' → logprob: -3.732293128967285

Token 19: 'ur' (ID: 330)
  Prédit: 'ur'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'ur' → logprob: -0.002312503522261977
    2. 'ural' → logprob: -6.252312660217285
    3. 'rale' → logprob: -8.502312660217285
    4. 'r' → logprob: -9.502312660217285
    5. 'ure' → logprob: -10.502312660217285
    6. 'ral' → logprob: -10.502312660217285
    7. '```' → logprob: -11.127312660217285
    8. 'ale' → logprob: -11.377312660217285
    9. 'urée' → logprob: -12.002312660217285
    10. 'tur' → logprob: -12.002312660217285

Token 20: 'ale' (ID: 1167)
  Prédit: 'ale'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'ale' → logprob: -1.1634047031402588
    2. 'es' → logprob: -1.2884047031402588
    3. 'e' → logprob: -1.9134047031402588
    4. '```' → logprob: -3.038404703140259
    5. 'nelle' → logprob: -3.288404703140259
    6. 'rale' → logprob: -3.788404703140259
    7. 'nale' → logprob: -3.788404703140259
    8. 'le' → logprob: -3.788404703140259
    9. 'on' → logprob: -4.41340446472168
    10. 's' → logprob: -4.91340446472168

Token 21: ' mél' (ID: 50838)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.22143924236297607
    2. 'result' → logprob: -2.0964393615722656
    3. 'return' → logprob: -3.0964393615722656
    4. '```' → logprob: -4.971439361572266
    5. 'for' → logprob: -5.596439361572266
    6. ' result' → logprob: -5.721439361572266
    7. '    
' → logprob: -5.721439361572266
    8. ' for' → logprob: -5.721439361572266
    9. ' return' → logprob: -5.846439361572266
    10. 'if' → logprob: -6.596439361572266

Token 22: 'ang' (ID: 516)
  Prédit: 'ang'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'ang' → logprob: -0.3563794493675232
    2. 'angé' → logprob: -1.481379508972168
    3. 'ange' → logprob: -3.356379508972168
    4. 'anges' → logprob: -4.481379508972168
    5. '```' → logprob: -4.981379508972168
    6. 'anger' → logprob: -5.856379508972168
    7. '``' → logprob: -5.856379508972168
    8. '#' → logprob: -5.981379508972168
    9. 'e' → logprob: -6.106379508972168
    10. 'an' → logprob: -6.356379508972168

Token 23: 'ées' (ID: 5161)
  Prédit: 'é'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'é' → logprob: -0.7880510687828064
    2. 'ée' → logprob: -1.0380511283874512
    3. 'e' → logprob: -1.7880511283874512
    4. 'ées' → logprob: -3.913051128387451
    5. 'er' → logprob: -6.538051128387451
    6. 'ee' → logprob: -7.288051128387451
    7. '```' → logprob: -7.538051128387451
    8. 'è' → logprob: -8.163050651550293
    9. 'a' → logprob: -8.163050651550293
    10. 'ant' → logprob: -9.413050651550293

Token 24: '
' (ID: 198)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.0801238864660263
    2. 'result' → logprob: -2.8301239013671875
    3. 'return' → logprob: -5.2051239013671875
    4. '    
' → logprob: -6.2051239013671875
    5. '```' → logprob: -6.2051239013671875
    6. 'if' → logprob: -6.5801239013671875
    7. ' ' → logprob: -6.9551239013671875
    8. ' result' → logprob: -7.0801239013671875
    9. 'for' → logprob: -7.2051239013671875
    10. ' if' → logprob: -7.4551239013671875

Token 25: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.11535262316465378
    2. 'if' → logprob: -3.4903526306152344
    3. 'return' → logprob: -4.115352630615234
    4. 'result' → logprob: -4.240352630615234
    5. '```' → logprob: -4.615352630615234
    6. ' if' → logprob: -4.740352630615234
    7. '    
' → logprob: -5.115352630615234
    8. ' ' → logprob: -5.740352630615234
    9. '[' → logprob: -5.865352630615234
    10. 'r' → logprob: -6.115352630615234

Token 26: ' a' (ID: 261)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.5445430278778076
    2. 'result' → logprob: -1.1695430278778076
    3. 'return' → logprob: -3.4195430278778076
    4. 'if' → logprob: -3.7945430278778076
    5. 'for' → logprob: -4.294543266296387
    6. ' if' → logprob: -4.794543266296387
    7. ' result' → logprob: -4.794543266296387
    8. 'r' → logprob: -4.919543266296387
    9. ' for' → logprob: -5.419543266296387
    10. '```' → logprob: -6.294543266296387

Token 27: ' =' (ID: 314)
  Prédit: ' ='
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' =' → logprob: -0.23038876056671143
    2. ',' → logprob: -1.9803887605667114
    3. '=' → logprob: -3.980388641357422
    4. '_' → logprob: -4.230388641357422
    5. 'r' → logprob: -5.105388641357422
    6. 'rg' → logprob: -5.355388641357422
    7. ' ' → logprob: -5.480388641357422
    8. '[' → logprob: -5.480388641357422
    9. 'dd' → logprob: -5.855388641357422
    10. 's' → logprob: -5.855388641357422

Token 28: ' int' (ID: 677)
  Prédit: 'int'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'int' → logprob: -0.6475423574447632
    2. ' int' → logprob: -0.7725423574447632
    3. ' list' → logprob: -5.272542476654053
    4. '[int' → logprob: -6.272542476654053
    5. ' data' → logprob: -6.397542476654053
    6. 'list' → logprob: -6.522542476654053
    7. ' map' → logprob: -6.897542476654053
    8. 'data' → logprob: -6.897542476654053
    9. ' float' → logprob: -7.397542476654053
    10. 'float' → logprob: -7.647542476654053

Token 29: '(data' (ID: 4819)
  Prédit: '(data'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(data' → logprob: -0.2014332264661789
    2. '(' → logprob: -1.7014331817626953
    3. 'data' → logprob: -11.326433181762695
    4. '(a' → logprob: -13.201433181762695
    5. '('' → logprob: -13.701433181762695
    6. '(
' → logprob: -14.076433181762695
    7. '()' → logprob: -14.451433181762695
    8. ' data' → logprob: -14.576433181762695
    9. ')data' → logprob: -14.576433181762695
    10. '(d' → logprob: -14.951433181762695

Token 30: '[' (ID: 58)
  Prédit: '['
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '[' → logprob: -4.246537173457909e-06
    2. ' [' → logprob: -12.500003814697266
    3. '0' → logprob: -15.125003814697266
    4. ' ' → logprob: -16.625003814697266
    5. '   ' → logprob: -16.750003814697266
    6. ')' → logprob: -16.875003814697266
    7. '[
' → logprob: -17.625003814697266
    8. '\[' → logprob: -18.250003814697266
    9. '```' → logprob: -18.500003814697266
    10. '[a' → logprob: -19.000003814697266

Token 31: '0' (ID: 15)
  Prédit: '0'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '0' → logprob: -2.4391956685576588e-05
    2. ' ' → logprob: -11.125024795532227
    3. '[' → logprob: -11.750024795532227
    4. '1' → logprob: -13.500024795532227
    5. '   ' → logprob: -16.625024795532227
    6. ')' → logprob: -16.750024795532227
    7. '-' → logprob: -16.875024795532227
    8. '2' → logprob: -17.000024795532227
    9. '3' → logprob: -17.375024795532227
    10. ']' → logprob: -17.750024795532227

Token 32: '])
' (ID: 5169)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ')' → logprob: -0.009097971022129059
    2. '])' → logprob: -5.009098052978516
    3. ']' → logprob: -6.134098052978516
    4. ' )' → logprob: -9.134098052978516
    5. ')]' → logprob: -10.134098052978516
    6. ')])' → logprob: -10.884098052978516
    7. ' ])' → logprob: -11.134098052978516
    8. '))' → logprob: -11.384098052978516
    9. ' ' → logprob: -12.634098052978516
    10. ')
' → logprob: -13.009098052978516

Token 33: '   ' (ID: 271)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')' → logprob: -0.9158011078834534
    2. '+' → logprob: -1.2908010482788086
    3. ' ' → logprob: -2.7908010482788086
    4. ',' → logprob: -2.9158010482788086
    5. '<|end|>' → logprob: -2.9158010482788086
    6. '*' → logprob: -3.1658010482788086
    7. '   ' → logprob: -3.6658010482788086
    8. '+
' → logprob: -4.290801048278809
    9. '\' → logprob: -4.415801048278809
    10. '\n' → logprob: -4.790801048278809

Token 34: ' b' (ID: 287)
  Prédit: '+'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '+' → logprob: -0.159018412232399
    2. '*' → logprob: -3.0340185165405273
    3. ' ' → logprob: -3.2840185165405273
    4. ')' → logprob: -3.4090185165405273
    5. ',' → logprob: -4.659018516540527
    6. '=' → logprob: -5.909018516540527
    7. 'a' → logprob: -6.034018516540527
    8. ' +' → logprob: -6.159018516540527
    9. '+
' → logprob: -6.409018516540527
    10. 'b' (adapté à ' b') → logprob: -6.534018516540527

Token 35: ' =' (ID: 314)
  Prédit: ' ='
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' =' → logprob: -0.0006994496798142791
    2. ' ' → logprob: -7.875699520111084
    3. '=' → logprob: -8.125699043273926
    4. ')' → logprob: -11.750699043273926
    5. '[' → logprob: -12.375699043273926
    6. ' )' → logprob: -12.875699043273926
    7. '_' → logprob: -13.375699043273926
    8. ' ,' → logprob: -13.500699043273926
    9. '  ' → logprob: -13.875699043273926
    10. '<|end|>' → logprob: -14.250699043273926

Token 36: ' int' (ID: 677)
  Prédit: ' int'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' int' → logprob: -0.25193631649017334
    2. 'int' → logprob: -1.5019363164901733
    3. ' ' → logprob: -13.001935958862305
    4. ' a' → logprob: -13.876935958862305
    5. '(int' → logprob: -13.876935958862305
    6. '   ' → logprob: -13.876935958862305
    7. 'a' → logprob: -14.376935958862305
    8. '  ' → logprob: -14.626935958862305
    9. '=int' → logprob: -14.751935958862305
    10. '[int' → logprob: -15.001935958862305

Token 37: '(data' (ID: 4819)
  Prédit: '(data'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(data' → logprob: -0.0013282144209370017
    2. '(' → logprob: -6.626327991485596
    3. ' (' → logprob: -13.376328468322754
    4. 'data' → logprob: -15.126328468322754
    5. ' data' → logprob: -15.626328468322754
    6. '[data' → logprob: -16.376327514648438
    7. ')' → logprob: -16.626327514648438
    8. ' ' → logprob: -16.876327514648438
    9. ')data' → logprob: -16.876327514648438
    10. '<data' → logprob: -17.126327514648438

Token 38: '[' (ID: 58)
  Prédit: '['
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '[' → logprob: -7.896309739408025e-07
    2. ')' → logprob: -14.500000953674316
    3. '```' → logprob: -16.625
    4. '   ' → logprob: -17.0
    5. ' [' → logprob: -17.125
    6. '1' → logprob: -17.375
    7. '[
' → logprob: -18.125
    8. ' ' → logprob: -18.5
    9. 'data' → logprob: -18.625
    10. '(' → logprob: -19.375

Token 39: '1' (ID: 16)
  Prédit: '1'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '1' → logprob: -3.333223139634356e-05
    2. '0' → logprob: -10.750033378601074
    3. ' ' → logprob: -11.500033378601074
    4. '])' → logprob: -14.125033378601074
    5. ']' → logprob: -15.250033378601074
    6. '[' → logprob: -15.625033378601074
    7. '```' → logprob: -15.625033378601074
    8. ')' → logprob: -15.875033378601074
    9. '   ' → logprob: -15.875033378601074
    10. '2' → logprob: -17.250032424926758

Token 40: '])
' (ID: 5169)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ')' → logprob: -1.7432603272027336e-06
    2. ')
' → logprob: -14.000001907348633
    3. ' )' → logprob: -14.875001907348633
    4. ')a' → logprob: -15.875001907348633
    5. '))' → logprob: -16.125001907348633
    6. '')' → logprob: -16.875001907348633
    7. '}' → logprob: -17.125001907348633
    8. '`)' → logprob: -17.250001907348633
    9. ']' → logprob: -17.500001907348633
    10. '   ' → logprob: -17.750001907348633

Token 41: '   ' (ID: 271)
  Prédit: '
'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '
' → logprob: -0.6780378818511963
    2. '+' → logprob: -1.6780378818511963
    3. ')' → logprob: -2.4280378818511963
    4. '+
' → logprob: -3.0530378818511963
    5. '\n' → logprob: -3.3030378818511963
    6. '   ' → logprob: -3.5530378818511963
    7. '#' → logprob: -4.178037643432617
    8. '    
' → logprob: -4.303037643432617
    9. '<|end|>' → logprob: -4.303037643432617
    10. ' 
' → logprob: -4.678037643432617

Token 42: ' k' (ID: 372)
  Prédit: '+'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '+' → logprob: -0.5689723491668701
    2. '
' → logprob: -2.06897234916687
    3. 'return' → logprob: -2.44397234916687
    4. '#' → logprob: -3.06897234916687
    5. 'c' → logprob: -3.06897234916687
    6. ')' → logprob: -3.19397234916687
    7. '+
' → logprob: -3.81897234916687
    8. '\n' → logprob: -4.443972587585449
    9. '    
' → logprob: -4.818972587585449
    10. ',' → logprob: -4.943972587585449

Token 43: ' =' (ID: 314)
  Prédit: ' ='
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' =' → logprob: -0.32249465584754944
    2. '=' → logprob: -1.322494626045227
    3. '_' → logprob: -5.8224945068359375
    4. ' ' → logprob: -5.9474945068359375
    5. ')' → logprob: -6.0724945068359375
    6. '+' → logprob: -7.6974945068359375
    7. ' )' → logprob: -8.947494506835938
    8. '.' → logprob: -9.072494506835938
    9. '-' → logprob: -9.447494506835938
    10. '_space' → logprob: -9.822494506835938

Token 44: ' int' (ID: 677)
  Prédit: ' int'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' int' → logprob: -0.20146459341049194
    2. 'int' → logprob: -1.7014646530151367
    3. ' ' → logprob: -11.326464653015137
    4. '0' → logprob: -11.701464653015137
    5. '1' → logprob: -11.826464653015137
    6. '2' → logprob: -11.951464653015137
    7. ' a' → logprob: -12.076464653015137
    8. 'a' → logprob: -12.576464653015137
    9. '10' → logprob: -12.951464653015137
    10. '(int' → logprob: -13.951464653015137

Token 45: '(data' (ID: 4819)
  Prédit: '(data'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(data' → logprob: -0.07889540493488312
    2. '(' → logprob: -2.578895330429077
    3. ' (' → logprob: -12.578895568847656
    4. '('' → logprob: -14.328895568847656
    5. 'data' → logprob: -14.578895568847656
    6. ' data' → logprob: -15.703895568847656
    7. '(code' → logprob: -15.953895568847656
    8. '(k' → logprob: -15.953895568847656
    9. '<data' → logprob: -15.953895568847656
    10. '(space' → logprob: -16.578895568847656

Token 46: '[' (ID: 58)
  Prédit: '['
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '[' → logprob: -0.00010151672904612496
    2. ')' → logprob: -9.250101089477539
    3. ' [' → logprob: -13.500101089477539
    4. ')[' → logprob: -13.500101089477539
    5. 'data' → logprob: -14.250101089477539
    6. ']' → logprob: -15.125101089477539
    7. ' )' → logprob: -15.375101089477539
    8. '   ' → logprob: -15.375101089477539
    9. '[
' → logprob: -15.500101089477539
    10. '(' → logprob: -15.625101089477539

Token 47: '2' (ID: 17)
  Prédit: '2'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '2' → logprob: -5.967624019831419e-05
    2. ' ' → logprob: -10.875060081481934
    3. '3' → logprob: -11.250060081481934
    4. '0' → logprob: -11.250060081481934
    5. '```' → logprob: -12.562560081481934
    6. '1' → logprob: -12.687560081481934
    7. ']' → logprob: -13.375060081481934
    8. '   ' → logprob: -13.750060081481934
    9. '])' → logprob: -13.937560081481934
    10. '-' → logprob: -14.250060081481934

Token 48: '])

' (ID: 21045)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ')' → logprob: -3.7697225252486533e-06
    2. ')
' → logprob: -14.125003814697266
    3. ' )' → logprob: -14.125003814697266
    4. '   ' → logprob: -14.375003814697266
    5. '')' → logprob: -14.750003814697266
    6. ')a' → logprob: -14.875003814697266
    7. '))' → logprob: -15.750003814697266
    8. '`)' → logprob: -16.000003814697266
    9. '）' → logprob: -16.250003814697266
    10. '}' → logprob: -16.375003814697266

Token 49: '   ' (ID: 271)
  Prédit: '
'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '
' → logprob: -0.051387719810009
    2. '\n' → logprob: -3.4263877868652344
    3. ' 
' → logprob: -5.676387786865234
    4. ')' → logprob: -6.051387786865234
    5. '   ' → logprob: -6.426387786865234
    6. '    
' → logprob: -6.551387786865234
    7. '#' → logprob: -6.676387786865234
    8. '\' → logprob: -6.801387786865234
    9. '  
' → logprob: -6.801387786865234
    10. '<|end|>' → logprob: -6.801387786865234

Token 50: ' def' (ID: 1056)
  Prédit: 'result'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'result' → logprob: -1.1088404655456543
    2. 'c' → logprob: -1.4838404655456543
    3. 'i' → logprob: -1.8588404655456543
    4. 'if' → logprob: -2.6088404655456543
    5. 'for' → logprob: -2.6088404655456543
    6. '   ' → logprob: -3.7338404655456543
    7. 'n' → logprob: -3.8588404655456543
    8. ',' → logprob: -4.233840465545654
    9. '
' → logprob: -4.608840465545654
    10. ' for' → logprob: -4.733840465545654

Token 51: ' adjust' (ID: 10266)
  Prédit: ' gcd'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' gcd' → logprob: -1.5944470167160034
    2. ' calculate' → logprob: -1.7194470167160034
    3. ' compute' → logprob: -1.7194470167160034
    4. ' helper' → logprob: -1.9694470167160034
    5. ' process' → logprob: -2.594447135925293
    6. ' multiply' → logprob: -3.719447135925293
    7. ' check' → logprob: -3.844447135925293
    8. ' max' → logprob: -3.844447135925293
    9. ' factor' → logprob: -4.219447135925293
    10. ' power' → logprob: -4.219447135925293

Token 52: '(val' (ID: 17391)
  Prédit: '_value'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '_value' → logprob: -0.23885127902030945
    2. '_' → logprob: -2.738851308822632
    3. '(a' → logprob: -3.363851308822632
    4. '_a' → logprob: -3.863851308822632
    5. '(' → logprob: -4.113851070404053
    6. '_values' → logprob: -4.238851070404053
    7. '_val' → logprob: -4.238851070404053
    8. '_factor' → logprob: -4.738851070404053
    9. '_input' → logprob: -5.238851070404053
    10. '_sum' → logprob: -5.613851070404053

Token 53: ',' (ID: 11)
  Prédit: '):'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '):' → logprob: -0.10742416232824326
    2. ',' → logprob: -2.857424259185791
    3. 'ue' → logprob: -3.482424259185791
    4. ')' → logprob: -4.482424259185791
    5. 'u' → logprob: -7.232424259185791
    6. 'ues' → logprob: -7.732424259185791
    7. '):
' → logprob: -7.857424259185791
    8. 'e' → logprob: -8.482423782348633
    9. 'uer' → logprob: -9.357423782348633
    10. 'ation' → logprob: -9.357423782348633

Token 54: ' sub' (ID: 1543)
  Prédit: ' offset'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' offset' → logprob: -1.1689997911453247
    2. ' limit' → logprob: -1.6689997911453247
    3. ' delta' → logprob: -1.9189997911453247
    4. ' k' → logprob: -2.793999671936035
    5. ' factor' → logprob: -3.418999671936035
    6. ' step' → logprob: -3.918999671936035
    7. 'offset' → logprob: -4.043999671936035
    8. ' direction' → logprob: -4.168999671936035
    9. 'limit' → logprob: -4.168999671936035
    10. ' ref' → logprob: -4.418999671936035

Token 55: '):
' (ID: 1883)
  Prédit: 'tract'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'tract' → logprob: -0.5863227248191833
    2. 'stract' → logprob: -1.3363227844238281
    3. '):
' → logprob: -2.336322784423828
    4. '):' → logprob: -3.586322784423828
    5. ')' → logprob: -3.711322784423828
    6. '):

' → logprob: -4.336322784423828
    7. '=' → logprob: -5.086322784423828
    8. 'tr' → logprob: -5.961322784423828
    9. 'traction' → logprob: -6.086322784423828
    10. 'tra' → logprob: -6.211322784423828

Token 56: '       ' (ID: 309)
  Prédit: '):'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '):' → logprob: -0.5311266183853149
    2. '       ' → logprob: -1.156126618385315
    3. ':' → logprob: -2.5311264991760254
    4. ')' → logprob: -4.906126499176025
    5. '   ' → logprob: -5.406126499176025
    6. '):
' → logprob: -5.531126499176025
    7. ' :' → logprob: -8.031126976013184
    8. ':return' → logprob: -8.406126976013184
    9. ':
' → logprob: -8.531126976013184
    10. '():' → logprob: -8.531126976013184

Token 57: ' #' (ID: 1069)
  Prédit: '       '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '       ' → logprob: -0.13087671995162964
    2. ' return' → logprob: -2.2558767795562744
    3. 'return' → logprob: -4.130876541137695
    4. '   ' → logprob: -6.880876541137695
    5. ' if' → logprob: -7.630876541137695
    6. '```' → logprob: -9.880876541137695
    7. '    ' → logprob: -10.130876541137695
    8. '	return' → logprob: -10.380876541137695
    9. '           ' → logprob: -10.755876541137695
    10. ' ' → logprob: -10.755876541137695

Token 58: ' Style' (ID: 17602)
  Prédit: ' return'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' return' → logprob: -0.14156050980091095
    2. 'return' → logprob: -2.6415605545043945
    3. ' if' → logprob: -3.3915605545043945
    4. '   ' → logprob: -4.0165605545043945
    5. '       ' → logprob: -6.1415605545043945
    6. 'if' → logprob: -6.2665605545043945
    7. ' ' → logprob: -6.3915605545043945
    8. '    ' → logprob: -6.6415605545043945
    9. ' val' → logprob: -7.7665605545043945
    10. 'r' → logprob: -8.391560554504395

Token 59: ':' (ID: 25)
  Prédit: '='
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '=' → logprob: -0.06467429548501968
    2. ' =' → logprob: -3.0646743774414062
    3. ':' → logprob: -4.814674377441406
    4. '   ' → logprob: -5.564674377441406
    5. 'def' → logprob: -7.189674377441406
    6. '=lambda' → logprob: -7.314674377441406
    7. '_' → logprob: -7.439674377441406
    8. ' :' → logprob: -7.939674377441406
    9. ' ' → logprob: -7.939674377441406
    10. ')' → logprob: -8.564674377441406

Token 60: ' fonction' (ID: 17610)
  Prédit: ' fonction'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' fonction' → logprob: -1.0779825448989868
    2. ' functional' → logprob: -1.0779825448989868
    3. 'fonction' → logprob: -1.9529825448989868
    4. '    ' → logprob: -2.8279824256896973
    5. 'functional' → logprob: -3.9529824256896973
    6. 'Fon' → logprob: -4.327982425689697
    7. '   ' → logprob: -4.577982425689697
    8. ' function' → logprob: -4.702982425689697
    9. ' fonctionnal' → logprob: -4.952982425689697
    10. ' Fonction' → logprob: -4.952982425689697

Token 61: ' imb' (ID: 63592)
  Prédit: 'nelle'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'nelle' → logprob: -0.1549653559923172
    2. 'def' → logprob: -3.029965400695801
    3. '   ' → logprob: -3.404965400695801
    4. 'nal' → logprob: -3.904965400695801
    5. 'nel' → logprob: -4.154965400695801
    6. 'al' → logprob: -5.029965400695801
    7. 'ction' → logprob: -5.279965400695801
    8. 'tion' → logprob: -5.279965400695801
    9. '       ' → logprob: -5.529965400695801
    10. 'n' → logprob: -7.029965400695801

Token 62: 'ri' (ID: 872)
  Prédit: 'ri'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'ri' → logprob: -0.30147919058799744
    2. 'd' → logprob: -2.9264791011810303
    3. 'b' → logprob: -3.0514791011810303
    4. 'ed' → logprob: -3.1764791011810303
    5. 'def' → logprob: -3.6764791011810303
    6. 'edded' → logprob: -3.8014791011810303
    7. 'edd' → logprob: -4.301479339599609
    8. 'edding' → logprob: -4.926479339599609
    9. 'quée' → logprob: -5.176479339599609
    10. 'r' → logprob: -5.301479339599609

Token 63: 'quée' (ID: 63772)
  Prédit: 'quée'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'quée' → logprob: -0.8506342768669128
    2. 'd' → logprob: -0.9756342768669128
    3. 'ée' → logprob: -2.3506343364715576
    4. 'ed' → logprob: -3.4756343364715576
    5. 'die' → logprob: -3.4756343364715576
    6. 'rée' → logprob: -4.3506340980529785
    7. 'éd' → logprob: -5.1006340980529785
    8. 'rie' → logprob: -5.7256340980529785
    9. 'lée' → logprob: -5.8506340980529785
    10. 'é' → logprob: -5.9756340980529785

Token 64: '
' (ID: 198)
  Prédit: '       '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '       ' → logprob: -0.8138406872749329
    2. '   ' → logprob: -1.563840627670288
    3. '<|end|>' → logprob: -1.563840627670288
    4. '
' → logprob: -3.188840627670288
    5. '<|end|>' → logprob: -3.313840627670288
    6. ')' → logprob: -3.688840627670288
    7. ' return' → logprob: -4.188840866088867
    8. ':' → logprob: -5.688840866088867
    9. '```' → logprob: -5.938840866088867
    10. 'return' → logprob: -5.938840866088867

Token 65: '       ' (ID: 309)
  Prédit: '       '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '       ' → logprob: -0.2618442475795746
    2. '
' → logprob: -2.7618441581726074
    3. '   ' → logprob: -2.8868441581726074
    4. ')' → logprob: -3.2618441581726074
    5. '):
' → logprob: -4.136844158172607
    6. ' return' → logprob: -4.261844158172607
    7. '):' → logprob: -4.386844158172607
    8. '<|end|>' → logprob: -4.636844158172607
    9. 'return' → logprob: -5.261844158172607
    10. ':' → logprob: -5.511844158172607

Token 66: ' return' (ID: 622)
  Prédit: ' return'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' return' → logprob: -0.6553207039833069
    2. 'return' (adapté à ' return') → logprob: -0.9053207039833069
    3. '       ' → logprob: -2.905320644378662
    4. '   ' → logprob: -4.280320644378662
    5. ' if' → logprob: -5.155320644378662
    6. 'if' → logprob: -6.780320644378662
    7. '    ' → logprob: -8.03032112121582
    8. ')' → logprob: -8.53032112121582
    9. ' ' → logprob: -9.65532112121582
    10. '        
' → logprob: -10.03032112121582

Token 67: ' val' (ID: 1459)
  Prédit: ' val'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' val' → logprob: -0.2483670711517334
    2. 'val' → logprob: -2.2483670711517334
    3. ' max' → logprob: -2.2483670711517334
    4. 'max' → logprob: -4.9983673095703125
    5. ' abs' → logprob: -6.6233673095703125
    6. ' min' → logprob: -8.373367309570312
    7. 'abs' → logprob: -8.873367309570312
    8. ' int' → logprob: -9.373367309570312
    9. ' (' → logprob: -9.373367309570312
    10. '(val' → logprob: -9.998367309570312

Token 68: ' -' (ID: 533)
  Prédit: ' -'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' -' → logprob: -0.023259803652763367
    2. '-' → logprob: -3.7732598781585693
    3. ' ' → logprob: -11.898260116577148
    4. '-sub' → logprob: -12.398260116577148
    5. '-val' → logprob: -13.523260116577148
    6. ' ' → logprob: -14.523260116577148
    7. ' sub' → logprob: -15.273260116577148
    8. '>' → logprob: -15.273260116577148
    9. ' if' → logprob: -15.398260116577148
    10. '-k' → logprob: -16.02326011657715

Token 69: ' sub' (ID: 1543)
  Prédit: ' sub'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' sub' → logprob: -0.10022467374801636
    2. 'sub' → logprob: -2.350224733352661
    3. '	sub' → logprob: -12.100224494934082
    4. '1' → logprob: -12.975224494934082
    5. '(sub' → logprob: -13.100224494934082
    6. ' subs' → logprob: -13.350224494934082
    7. ' ' → logprob: -13.600224494934082
    8. ' ' → logprob: -13.975224494934082
    9. '=sub' → logprob: -14.600224494934082
    10. ' max' → logprob: -14.725224494934082

Token 70: ' if' (ID: 538)
  Prédit: '
'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '
' → logprob: -0.1872529238462448
    2. '<|end|>' → logprob: -2.062252998352051
    3. '\n' → logprob: -3.937252998352051
    4. '<|end|>' → logprob: -5.312252998352051
    5. '   ' → logprob: -5.437252998352051
    6. ' 
' → logprob: -5.812252998352051
    7. ')' → logprob: -6.312252998352051
    8. '
' → logprob: -6.562252998352051
    9. '    
' → logprob: -6.562252998352051
    10. '  
' → logprob: -6.687252998352051

Token 71: ' val' (ID: 1459)
  Prédit: ' val'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' val' → logprob: -0.16476503014564514
    2. 'val' → logprob: -1.9147650003433228
    3. ' sub' → logprob: -5.789764881134033
    4. 'sub' → logprob: -6.539764881134033
    5. '(val' → logprob: -11.414765357971191
    6. '	val' → logprob: -11.914765357971191
    7. '_val' → logprob: -13.164765357971191
    8. ' (' → logprob: -14.164765357971191
    9. ' ' → logprob: -14.539765357971191
    10. '0' → logprob: -14.664765357971191

Token 72: ' -' (ID: 533)
  Prédit: ' >'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' >' → logprob: -0.036715924739837646
    2. '>' → logprob: -4.036715984344482
    3. ' >=' → logprob: -4.036715984344482
    4. '>=' → logprob: -7.411715984344482
    5. ' ' → logprob: -9.411715507507324
    6. ' else' → logprob: -10.411715507507324
    7. ' ' → logprob: -12.161715507507324
    8. '<|end|>' → logprob: -12.161715507507324
    9. 'else' → logprob: -13.286715507507324
    10. ' <' → logprob: -13.411715507507324

Token 73: ' sub' (ID: 1543)
  Prédit: 'sub'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'sub' → logprob: -0.5299198627471924
    2. ' sub' → logprob: -0.9049198627471924
    3. '<|end|>' → logprob: -5.029919624328613
    4. ' ' → logprob: -9.029919624328613
    5. '<|end|>' → logprob: -10.529919624328613
    6. '	sub' → logprob: -10.904919624328613
    7. '0' → logprob: -11.279919624328613
    8. '{sub' → logprob: -11.529919624328613
    9. '[sub' → logprob: -11.779919624328613
    10. '(sub' → logprob: -11.904919624328613

Token 74: ' >' (ID: 1424)
  Prédit: ' >'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' >' → logprob: -0.7177631258964539
    2. ' >=' → logprob: -0.9677631258964539
    3. '>' → logprob: -2.4677631855010986
    4. '>=' → logprob: -3.0927631855010986
    5. ' ' → logprob: -6.3427629470825195
    6. '<|end|>' → logprob: -9.34276294708252
    7. '0' → logprob: -9.46776294708252
    8. ' else' → logprob: -9.59276294708252
    9. ' ' → logprob: -10.59276294708252
    10. '&gt' → logprob: -11.46776294708252

Token 75: ' ' (ID: 220)
  Prédit: ' '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' ' → logprob: -0.5759905576705933
    2. '0' → logprob: -0.8259905576705933
    3. '=' → logprob: -10.075990676879883
    4. 'k' → logprob: -13.200990676879883
    5. ' k' → logprob: -13.700990676879883
    6. '<|end|>' → logprob: -13.825990676879883
    7. '>' → logprob: -13.950990676879883
    8. ' ' → logprob: -13.950990676879883
    9. ' -' → logprob: -14.325990676879883
    10. '-' → logprob: -14.825990676879883

Token 76: '0' (ID: 15)
  Prédit: '0'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '0' → logprob: -0.03817816451191902
    2. ' ' → logprob: -3.2881782054901123
    3. '=' → logprob: -9.288178443908691
    4. 'k' → logprob: -11.038178443908691
    5. '-' → logprob: -11.288178443908691
    6. ' -' → logprob: -12.538178443908691
    7. '1' → logprob: -12.663178443908691
    8. ' k' → logprob: -13.600678443908691
    9. '9' → logprob: -14.100678443908691
    10. '  ' → logprob: -14.350678443908691

Token 77: ' else' (ID: 1203)
  Prédit: ' else'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' else' → logprob: -0.0013321444857865572
    2. 'else' → logprob: -6.6263322830200195
    3. ' ' → logprob: -12.25133228302002
    4. '	else' → logprob: -14.12633228302002
    5. ' and' → logprob: -14.87633228302002
    6. '    ' → logprob: -16.001331329345703
    7. ' ' → logprob: -16.876331329345703
    8. ' els' → logprob: -17.001331329345703
    9. '        ' → logprob: -17.126331329345703
    10. '0' → logprob: -17.251331329345703

Token 78: ' ' (ID: 220)
  Prédit: '0'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '0' → logprob: -0.03804493322968483
    2. ' ' → logprob: -3.2880449295043945
    3. ' ' → logprob: -13.663044929504395
    4. '1' → logprob: -14.163044929504395
    5. '```' → logprob: -14.663044929504395
    6. '   ' → logprob: -15.100544929504395
    7. '`' → logprob: -16.72554588317871
    8. ' 
' → logprob: -16.72554588317871
    9. 'None' → logprob: -16.78804588317871
    10. '	' → logprob: -16.85054588317871

Token 79: '0' (ID: 15)
  Prédit: '0'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '0' → logprob: -0.0006378580583259463
    2. ' ' → logprob: -7.375638008117676
    3. '1' → logprob: -11.875638008117676
    4. 'val' → logprob: -13.375638008117676
    5. '   ' → logprob: -14.188138008117676
    6. '```' → logprob: -14.438138008117676
    7. ' ' → logprob: -15.500638008117676
    8. '`' → logprob: -16.00063705444336
    9. '  ' → logprob: -16.31313705444336
    10. 'None' → logprob: -16.50063705444336

Token 80: '

' (ID: 279)
  Prédit: '
'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '
' → logprob: -0.7851759791374207
    2. '<|end|>' → logprob: -1.6601760387420654
    3. '\n' → logprob: -1.7851760387420654
    4. ')' → logprob: -2.4101760387420654
    5. 'newline' → logprob: -4.285175800323486
    6. '   ' → logprob: -4.285175800323486
    7. '\' → logprob: -4.910175800323486
    8. ' 
' → logprob: -4.910175800323486
    9. '    
' → logprob: -5.035175800323486
    10. '```' → logprob: -5.035175800323486

Token 81: '   ' (ID: 271)
  Prédit: '
'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '
' → logprob: -0.03932024911046028
    2. '<|end|>' → logprob: -4.414320468902588
    3. '   ' → logprob: -4.539320468902588
    4. '    
' → logprob: -4.789320468902588
    5. '  
' → logprob: -6.164320468902588
    6. ' 
' → logprob: -7.039320468902588
    7. '\n' → logprob: -7.039320468902588
    8. '' → logprob: -7.539320468902588
    9. '```' → logprob: -7.539320468902588
    10. '<|end|>' → logprob: -7.789320468902588

Token 82: ' ans' (ID: 3345)
  Prédit: 'result'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'result' → logprob: -0.49679645895957947
    2. '   ' → logprob: -1.3717964887619019
    3. '
' → logprob: -3.7467963695526123
    4. '    
' → logprob: -3.8717963695526123
    5. 'for' → logprob: -3.9967963695526123
    6. 'a' → logprob: -4.246796607971191
    7. 'r' → logprob: -4.496796607971191
    8. 'n' → logprob: -4.996796607971191
    9. ' for' → logprob: -5.121796607971191
    10. ' result' → logprob: -5.121796607971191

Token 83: '_t' (ID: 838)
  Prédit: ' ='
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' =' → logprob: -0.062174491584300995
    2. '=' → logprob: -2.8121745586395264
    3. ' +=' → logprob: -8.687174797058105
    4. '_' → logprob: -10.562174797058105
    5. '+=' → logprob: -12.562174797058105
    6. ',' → logprob: -13.562174797058105
    7. 's' → logprob: -13.812174797058105
    8. ' ' → logprob: -13.937174797058105
    9. '  ' → logprob: -14.562174797058105
    10. '.' → logprob: -14.687174797058105

Token 84: ' =' (ID: 314)
  Prédit: ' ='
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' =' → logprob: -0.3782481551170349
    2. 'emp' → logprob: -1.7532482147216797
    3. 'mp' → logprob: -3.1282482147216797
    4. '=' → logprob: -3.5032482147216797
    5. ' +=' → logprob: -4.37824821472168
    6. 'o' → logprob: -4.37824821472168
    7. 'r' → logprob: -4.75324821472168
    8. 'ime' → logprob: -5.00324821472168
    9. 'otal' → logprob: -5.62824821472168
    10. 'em' → logprob: -5.75324821472168

Token 85: ' max' (ID: 2999)
  Prédit: ' max'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' max' → logprob: -1.4762471914291382
    2. '0' → logprob: -1.6012471914291382
    3. 'max' → logprob: -2.1012473106384277
    4. 'a' → logprob: -2.6012473106384277
    5. ' a' → logprob: -2.8512473106384277
    6. 'k' → logprob: -2.9762473106384277
    7. ' ' → logprob: -2.9762473106384277
    8. ' min' → logprob: -3.2262473106384277
    9. ' k' → logprob: -3.3512473106384277
    10. ' []' → logprob: -3.4762473106384277

Token 86: '(a' (ID: 6271)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(' → logprob: -0.759701669216156
    2. '(a' → logprob: -0.759701669216156
    3. '(ad' → logprob: -2.759701728820801
    4. '(k' → logprob: -8.3847017288208
    5. '(ans' → logprob: -8.5097017288208
    6. '((' → logprob: -8.6347017288208
    7. '(abs' → logprob: -8.6347017288208
    8. '(
' → logprob: -9.7597017288208
    9. '(max' → logprob: -9.7597017288208
    10. 'adjust' → logprob: -9.7597017288208

Token 87: ' -' (ID: 533)
  Prédit: ' -'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' -' → logprob: -0.5993496179580688
    2. ',' → logprob: -0.9743496179580688
    3. ' ,' → logprob: -3.3493494987487793
    4. ',b' → logprob: -3.7243494987487793
    5. '-' → logprob: -5.224349498748779
    6. ',k' → logprob: -5.599349498748779
    7. '-k' → logprob: -5.974349498748779
    8. ')' → logprob: -7.474349498748779
    9. ' +' → logprob: -7.474349498748779
    10. ' ' → logprob: -7.974349498748779

Token 88: ' k' (ID: 372)
  Prédit: ' k'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' k' → logprob: -0.6151264905929565
    2. 'k' → logprob: -0.8651264905929565
    3. ' b' → logprob: -4.240126609802246
    4. 'b' → logprob: -4.240126609802246
    5. ' (' → logprob: -5.990126609802246
    6. ' ' → logprob: -6.240126609802246
    7. ' adjust' → logprob: -6.615126609802246
    8. 'adjust' → logprob: -6.615126609802246
    9. '0' → logprob: -6.865126609802246
    10. '(k' → logprob: -7.365126609802246

Token 89: ',' (ID: 11)
  Prédit: ','
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ',' → logprob: -0.0011921331752091646
    2. ' ,' → logprob: -7.001192092895508
    3. ')' → logprob: -9.251192092895508
    4. ',b' → logprob: -9.251192092895508
    5. ',a' → logprob: -11.001192092895508
    6. ',k' → logprob: -11.001192092895508
    7. '0' → logprob: -11.251192092895508
    8. ' ' → logprob: -11.251192092895508
    9. '),' → logprob: -11.626192092895508
    10. ',

' → logprob: -12.626192092895508

Token 90: ' ' (ID: 220)
  Prédit: '0'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '0' → logprob: -0.22754117846488953
    2. 'b' → logprob: -2.477541208267212
    3. ' ' → logprob: -2.477541208267212
    4. ' b' → logprob: -3.352541208267212
    5. 'adjust' → logprob: -7.727540969848633
    6. ' adjust' → logprob: -9.977540969848633
    7. ')' → logprob: -10.227540969848633
    8. ' max' → logprob: -10.602540969848633
    9. ')b' → logprob: -10.602540969848633
    10. 'max' → logprob: -11.977540969848633

Token 91: '0' (ID: 15)
  Prédit: '0'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '0' → logprob: -0.0483754463493824
    2. ' ' → logprob: -3.423375368118286
    3. 'b' → logprob: -4.423375606536865
    4. ' b' → logprob: -6.673375606536865
    5. 'adjust' → logprob: -6.673375606536865
    6. ' adjust' → logprob: -9.923375129699707
    7. '1' → logprob: -11.485875129699707
    8. '  ' → logprob: -11.860875129699707
    9. ')' → logprob: -12.173375129699707
    10. '   ' → logprob: -12.485875129699707

Token 92: ')

' (ID: 1029)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')' → logprob: -0.18039757013320923
    2. ')
' → logprob: -1.8053975105285645
    3. '),' → logprob: -8.305397987365723
    4. ',' → logprob: -9.180397987365723
    5. ')
' → logprob: -9.180397987365723
    6. ')

' → logprob: -9.680397987365723
    7. ' )' → logprob: -9.930397987365723
    8. '   ' → logprob: -10.055397987365723
    9. ' )
' → logprob: -10.180397987365723
    10. ')a' → logprob: -13.680397987365723

Token 93: '   ' (ID: 271)
  Prédit: '
'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '
' → logprob: -0.47275567054748535
    2. '   ' → logprob: -1.8477556705474854
    3. '    
' → logprob: -2.4727556705474854
    4. '<|end|>' → logprob: -3.3477556705474854
    5. '\n' → logprob: -3.5977556705474854
    6. ' 
' → logprob: -3.8477556705474854
    7. '  
' → logprob: -4.472755432128906
    8. '+' → logprob: -4.972755432128906
    9. ',' → logprob: -5.722755432128906
    10. ')' → logprob: -5.722755432128906

Token 94: ' #' (ID: 1069)
  Prédit: 'b'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'b' → logprob: -0.7092137336730957
    2. 'ans' → logprob: -0.8342137336730957
    3. '\n' → logprob: -4.084213733673096
    4. '    
' → logprob: -4.334213733673096
    5. 'print' → logprob: -5.209213733673096
    6. ' ans' → logprob: -5.334213733673096
    7. 's' → logprob: -5.459213733673096
    8. '
' → logprob: -5.709213733673096
    9. 'a' → logprob: -5.709213733673096
    10. 'n' → logprob: -5.834213733673096

Token 95: ' Style' (ID: 17602)
  Prédit: 'ans'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'ans' → logprob: -0.11635007709264755
    2. 'b' → logprob: -2.8663501739501953
    3. ' ans' → logprob: -3.4913501739501953
    4. 'print' → logprob: -5.116350173950195
    5. 't' → logprob: -5.741350173950195
    6. '   ' → logprob: -6.241350173950195
    7. ' b' → logprob: -6.241350173950195
    8. 'return' → logprob: -6.741350173950195
    9. 'answer' → logprob: -6.741350173950195
    10. 'res' → logprob: -6.991350173950195

Token 96: ':' (ID: 25)
  Prédit: ':'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ':' → logprob: -0.4679948687553406
    2. ' =' → logprob: -1.2179949283599854
    3. '=' → logprob: -2.5929949283599854
    4. ' :' → logprob: -6.592994689941406
    5. 't' → logprob: -7.217994689941406
    6. 'a' → logprob: -8.842994689941406
    7. ' ' → logprob: -8.842994689941406
    8. ' ans' → logprob: -9.217994689941406
    9. 'def' → logprob: -9.592994689941406
    10. ' a' → logprob: -9.842994689941406

Token 97: ' ter' (ID: 3069)
  Prédit: ' ans'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' ans' → logprob: -1.2911522388458252
    2. ' b' → logprob: -1.4161522388458252
    3. 'b' → logprob: -1.6661522388458252
    4. 'ans' → logprob: -1.6661522388458252
    5. ' max' → logprob: -3.791152238845825
    6. 'max' → logprob: -4.041152000427246
    7. ' ' → logprob: -4.353652000427246
    8. 't' → logprob: -5.291152000427246
    9. 'a' → logprob: -5.478652000427246
    10. '```' → logprob: -5.666152000427246

Token 98: 'naire' (ID: 30464)
  Prédit: 'naire'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'naire' → logprob: -0.009118988178670406
    2. 'n' → logprob: -5.009119033813477
    3. 'na' → logprob: -6.384119033813477
    4. 'naires' → logprob: -8.134119033813477
    5. 'ner' → logprob: -10.134119033813477
    6. 'rn' → logprob: -10.259119033813477
    7. 'nable' → logprob: -10.259119033813477
    8. 'nelle' → logprob: -10.759119033813477
    9. 'native' → logprob: -10.759119033813477
    10. 'nar' → logprob: -10.821619033813477

Token 99: ' imb' (ID: 63592)
  Prédit: '
'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '
' → logprob: -0.9194832444190979
    2. ' ans' → logprob: -1.2944831848144531
    3. '<|end|>' → logprob: -1.5444831848144531
    4. 'ans' → logprob: -3.169483184814453
    5. '   ' → logprob: -3.669483184814453
    6. '    
' → logprob: -4.544483184814453
    7. '<|end|>' → logprob: -4.544483184814453
    8. 'a' → logprob: -5.544483184814453
    9. '  
' → logprob: -5.544483184814453
    10. ';' → logprob: -6.044483184814453

Token 100: 'ri' (ID: 872)
  Prédit: 'ri'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'ri' → logprob: -5.6696149840718135e-05
    2. 'r' → logprob: -10.500056266784668
    3. 'd' → logprob: -11.875056266784668
    4. 'rique' → logprob: -12.875056266784668
    5. 'li' → logprob: -13.125056266784668
    6. 'ed' → logprob: -13.500056266784668
    7. 'rí' → logprob: -13.500056266784668
    8. 'b' → logprob: -13.750056266784668
    9. 'édi' → logprob: -13.750056266784668
    10. '```' → logprob: -14.000056266784668

Token 101: 'qué' (ID: 23535)
  Prédit: 'quée'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'quée' → logprob: -0.1353863924741745
    2. 'ée' → logprob: -2.3853864669799805
    3. 'd' → logprob: -4.6353864669799805
    4. 'cée' → logprob: -5.0103864669799805
    5. 'qué' → logprob: -5.3853864669799805
    6. 'é' → logprob: -5.5103864669799805
    7. 'éd' → logprob: -5.6353864669799805
    8. 'ed' → logprob: -6.1353864669799805
    9. 'e' → logprob: -7.3853864669799805
    10. 'c' → logprob: -8.01038646697998

Token 102: ' dans' (ID: 2671)
  Prédit: '
'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '
' → logprob: -0.39708101749420166
    2. '   ' → logprob: -2.397080898284912
    3. 'ans' → logprob: -2.647080898284912
    4. ' ans' → logprob: -3.147080898284912
    5. 'b' → logprob: -3.522080898284912
    6. ' if' → logprob: -3.897080898284912
    7. '<|end|>' → logprob: -3.897080898284912
    8. '    
' → logprob: -4.272080898284912
    9. ',' → logprob: -4.522080898284912
    10. 'a' → logprob: -5.397080898284912

Token 103: ' une' (ID: 2463)
  Prédit: 'ans'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'ans' → logprob: -1.1682753562927246
    2. 'max' → logprob: -1.7932753562927246
    3. 'adjust' → logprob: -2.1682753562927246
    4. ' ans' → logprob: -2.6682753562927246
    5. 'a' → logprob: -3.0432753562927246
    6. ' adjust' → logprob: -3.1682753562927246
    7. ' max' → logprob: -3.5432753562927246
    8. 'l' → logprob: -3.9182753562927246
    9. ' la' → logprob: -3.9182753562927246
    10. 'f' → logprob: -4.168275356292725

Token 104: ' assign' (ID: 14975)
  Prédit: 'return'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'return' → logprob: -0.3632708787918091
    2. 'print' → logprob: -2.1132707595825195
    3. 'max' → logprob: -2.7382707595825195
    4. 'expression' → logprob: -2.9882707595825195
    5. 'fonction' → logprob: -3.9882707595825195
    6. ' return' → logprob: -4.2382707595825195
    7. 'for' → logprob: -5.4882707595825195
    8. 'call' → logprob: -5.6132707595825195
    9. 'bou' → logprob: -6.1132707595825195
    10. 'sum' → logprob: -6.2382707595825195

Token 105: 'ation' (ID: 387)
  Prédit: 'ment'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'ment' → logprob: -0.019239457324147224
    2. 'ement' → logprob: -4.01923942565918
    3. 'ation' → logprob: -7.26923942565918
    4. 'ent' → logprob: -8.14423942565918
    5. 'a' → logprob: -10.76923942565918
    6. 'em' → logprob: -11.01923942565918
    7. '=' → logprob: -11.39423942565918
    8. 'mentation' → logprob: -11.51923942565918
    9. 'm' → logprob: -11.64423942565918
    10. 't' → logprob: -11.64423942565918

Token 106: '
' (ID: 198)
  Prédit: 'ans'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'ans' → logprob: -0.6943909525871277
    2. '
' → logprob: -0.9443909525871277
    3. ' ans' → logprob: -2.9443910121917725
    4. 'b' → logprob: -4.194390773773193
    5. '<|end|>' → logprob: -4.319390773773193
    6. '    
' → logprob: -4.444390773773193
    7. '   ' → logprob: -5.194390773773193
    8. ',' → logprob: -5.694390773773193
    9. 'a' → logprob: -6.694390773773193
    10. '	ans' → logprob: -6.819390773773193

Token 107: '   ' (ID: 271)
  Prédit: '
'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '
' → logprob: -0.0632149800658226
    2. 'ans' → logprob: -3.1882150173187256
    3. 'b' → logprob: -4.4382147789001465
    4. ' ans' → logprob: -6.0632147789001465
    5. '    
' → logprob: -6.3132147789001465
    6. 'a' → logprob: -6.4382147789001465
    7. '
' → logprob: -7.6882147789001465
    8. '  
' → logprob: -7.8132147789001465
    9. '   ' → logprob: -8.313215255737305
    10. '<|end|>' → logprob: -8.438215255737305

Token 108: ' b' (ID: 287)
  Prédit: 'ans'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'ans' → logprob: -0.030179353430867195
    2. 'b' (adapté à ' b') → logprob: -4.030179500579834
    3. 'a' → logprob: -5.530179500579834
    4. 'res' → logprob: -6.155179500579834
    5. 'answer' → logprob: -6.905179500579834
    6. 'rest' → logprob: -7.155179500579834
    7. 'min' → logprob: -7.905179500579834
    8. 'print' → logprob: -8.405179023742676
    9. 'diff' → logprob: -8.405179023742676
    10. 'final' → logprob: -8.530179023742676

Token 109: '_new' (ID: 13000)
  Prédit: ' ='
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' =' → logprob: -1.0132404565811157
    2. '=' → logprob: -1.1382404565811157
    3. '_' → logprob: -1.8882404565811157
    4. '_t' → logprob: -2.263240337371826
    5. '_ans' → logprob: -3.138240337371826
    6. '_adjust' → logprob: -4.638240337371826
    7. '_adj' → logprob: -6.013240337371826
    8. 'ans' → logprob: -6.388240337371826
    9. 't' → logprob: -6.638240337371826
    10. '_answer' → logprob: -7.263240337371826

Token 110: ' =' (ID: 314)
  Prédit: ' ='
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' =' → logprob: -0.16022564470767975
    2. '=' → logprob: -1.9102256298065186
    3. ' ' → logprob: -13.785225868225098
    4. '=b' → logprob: -15.535225868225098
    5. ',' → logprob: -15.910225868225098
    6. 'b' → logprob: -17.16022491455078
    7. '=max' → logprob: -17.41022491455078
    8. '＝' → logprob: -17.66022491455078
    9. ')' → logprob: -17.78522491455078
    10. '```' → logprob: -17.91022491455078

Token 111: ' b' (ID: 287)
  Prédit: 'b'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'b' → logprob: -0.7014009952545166
    2. 'adjust' → logprob: -1.2014009952545166
    3. ' b' → logprob: -2.7014009952545166
    4. '0' → logprob: -2.8264009952545166
    5. ' adjust' → logprob: -3.7014009952545166
    6. 'max' → logprob: -3.8264009952545166
    7. 'a' → logprob: -4.0764007568359375
    8. ' max' → logprob: -5.3264007568359375
    9. ' ' → logprob: -5.4514007568359375
    10. ' a' → logprob: -6.3264007568359375

Token 112: ' if' (ID: 538)
  Prédit: ' -'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' -' → logprob: -0.36695900559425354
    2. '-' → logprob: -1.6169589757919312
    3. ' if' → logprob: -2.2419590950012207
    4. 'if' → logprob: -6.116959095001221
    5. ' and' → logprob: -10.116958618164062
    6. ' ' → logprob: -10.116958618164062
    7. '>' → logprob: -10.866958618164062
    8. '+' → logprob: -11.241958618164062
    9. '   ' → logprob: -11.366958618164062
    10. '-k' → logprob: -11.366958618164062

Token 113: ' a' (ID: 261)
  Prédit: 'k'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'k' → logprob: -0.3456202447414398
    2. ' k' → logprob: -1.9706202745437622
    3. 'b' → logprob: -2.3456201553344727
    4. ' b' → logprob: -3.2206201553344727
    5. 'a' → logprob: -5.595620155334473
    6. ' a' → logprob: -6.095620155334473
    7. 'ans' → logprob: -6.220620155334473
    8. ' ans' → logprob: -6.345620155334473
    9. ' (' → logprob: -6.470620155334473
    10. '(k' → logprob: -6.470620155334473

Token 114: ' -' (ID: 533)
  Prédit: ' >'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' >' → logprob: -1.147295594215393
    2. ' <=' → logprob: -1.147295594215393
    3. '>' → logprob: -1.647295594215393
    4. '<=' → logprob: -2.2722954750061035
    5. ' -' → logprob: -3.0222954750061035
    6. '-' → logprob: -4.1472954750061035
    7. '>=' → logprob: -6.3972954750061035
    8. ' >=' → logprob: -6.5222954750061035
    9. ' <' → logprob: -6.8972954750061035
    10. '<' → logprob: -8.147295951843262

Token 115: ' k' (ID: 372)
  Prédit: 'k'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'k' → logprob: -0.06198617070913315
    2. ' k' → logprob: -2.811986207962036
    3. ' ' → logprob: -12.186985969543457
    4. '>=' → logprob: -13.436985969543457
    5. '	k' → logprob: -13.624485969543457
    6. '>' → logprob: -13.999485969543457
    7. ' <' → logprob: -14.124485969543457
    8. '0' → logprob: -14.249485969543457
    9. ' >=' → logprob: -14.561985969543457
    10. '   ' → logprob: -14.561985969543457

Token 116: ' >=' (ID: 5064)
  Prédit: '>'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '>' → logprob: -0.3591717481613159
    2. '<=' → logprob: -1.359171748161316
    3. ' >' → logprob: -3.9841718673706055
    4. ' <=' → logprob: -4.2341718673706055
    5. '>=' → logprob: -5.1091718673706055
    6. '<' → logprob: -5.2341718673706055
    7. ' <' → logprob: -8.609171867370605
    8. ' >=' → logprob: -8.984171867370605
    9. ' ' → logprob: -10.109171867370605
    10. ' else' → logprob: -11.109171867370605

Token 117: ' ' (ID: 220)
  Prédit: 'b'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'b' → logprob: -0.7530018091201782
    2. '0' → logprob: -0.8780018091201782
    3. 'k' → logprob: -2.7530016899108887
    4. 'a' → logprob: -3.8780016899108887
    5. ' b' → logprob: -3.8780016899108887
    6. ' ' → logprob: -5.128001689910889
    7. ' k' → logprob: -6.503001689910889
    8. ' a' → logprob: -7.128001689910889
    9. 'ans' → logprob: -10.628002166748047
    10. '1' → logprob: -10.753002166748047

Token 118: '0' (ID: 15)
  Prédit: '0'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '0' → logprob: -0.32718586921691895
    2. 'k' → logprob: -1.702185869216919
    3. 'b' → logprob: -2.577185869216919
    4. 'a' → logprob: -3.952185869216919
    5. ' ' → logprob: -6.82718563079834
    6. ' b' → logprob: -8.45218563079834
    7. ' k' → logprob: -8.82718563079834
    8. ' a' → logprob: -10.07718563079834
    9. '1' → logprob: -10.20218563079834
    10. 'ans' → logprob: -10.70218563079834

Token 119: ' else' (ID: 1203)
  Prédit: 'else'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'else' → logprob: -0.5759438276290894
    2. ' else' → logprob: -0.8259438276290894
    3. '-' → logprob: -13.075943946838379
    4. ' ' → logprob: -14.700943946838379
    5. '_else' → logprob: -14.950943946838379
    6. '   ' → logprob: -15.075943946838379
    7. '	else' → logprob: -15.075943946838379
    8. '    ' → logprob: -15.825943946838379
    9. 'b' → logprob: -16.075942993164062
    10. '0' → logprob: -16.200942993164062

Token 120: ' max' (ID: 2999)
  Prédit: 'max'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'max' → logprob: -0.5519964098930359
    2. ' max' → logprob: -1.4269964694976807
    3. 'b' → logprob: -2.5519964694976807
    4. '0' → logprob: -3.1769964694976807
    5. 'adjust' → logprob: -3.1769964694976807
    6. ' b' → logprob: -4.176996231079102
    7. ' adjust' → logprob: -5.551996231079102
    8. ' ' → logprob: -5.801996231079102
    9. '   ' → logprob: -8.676996231079102
    10. 'k' → logprob: -9.926996231079102

Token 121: '(' (ID: 7)
  Prédit: '(b'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(b' → logprob: -0.007627923507243395
    2. '(' → logprob: -4.882627964019775
    3. 'b' → logprob: -11.632627487182617
    4. '((' → logprob: -11.632627487182617
    5. '0' → logprob: -13.382627487182617
    6. ' (' → logprob: -14.007627487182617
    7. '(
' → logprob: -14.632627487182617
    8. ' b' → logprob: -14.757627487182617
    9. '(B' → logprob: -15.007627487182617
    10. ')b' → logprob: -16.257627487182617

Token 122: '0' (ID: 15)
  Prédit: 'b'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'b' → logprob: -0.17136219143867493
    2. '(b' → logprob: -1.9213621616363525
    3. '0' → logprob: -5.546362400054932
    4. ' b' → logprob: -5.546362400054932
    5. '(' → logprob: -6.046362400054932
    6. ')b' → logprob: -7.421362400054932
    7. ')' → logprob: -9.296361923217773
    8. 'adjust' → logprob: -9.671361923217773
    9. ' ' → logprob: -9.796361923217773
    10. ' (' → logprob: -10.546361923217773

Token 123: ',' (ID: 11)
  Prédit: '(b'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(b' → logprob: -0.002212942810729146
    2. '(' → logprob: -6.752213001251221
    3. ' (' → logprob: -8.127212524414062
    4. ',' → logprob: -8.252212524414062
    5. 'b' → logprob: -8.252212524414062
    6. ',b' → logprob: -9.502212524414062
    7. ' b' → logprob: -9.752212524414062
    8. ')' → logprob: -10.002212524414062
    9. ')(' → logprob: -10.752212524414062
    10. ')b' → logprob: -11.502212524414062

Token 124: ' b' (ID: 287)
  Prédit: 'b'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'b' → logprob: -0.023455223068594933
    2. ' b' → logprob: -3.7734551429748535
    3. '(b' → logprob: -9.023455619812012
    4. '   ' → logprob: -10.523455619812012
    5. ' ' → logprob: -10.523455619812012
    6. ')b' → logprob: -11.273455619812012
    7. '(' → logprob: -11.773455619812012
    8. '  ' → logprob: -12.148455619812012
    9. '	b' → logprob: -12.898455619812012
    10. ' (' → logprob: -13.023455619812012

Token 125: ' -' (ID: 533)
  Prédit: ' -'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' -' → logprob: -0.5087838172912598
    2. '-' → logprob: -1.0087838172912598
    3. '-k' → logprob: -3.3837838172912598
    4. ' ' → logprob: -9.133783340454102
    5. '-(' → logprob: -10.633783340454102
    6. '-
' → logprob: -11.008783340454102
    7. 'k' → logprob: -11.508783340454102
    8. ' k' → logprob: -12.133783340454102
    9. '  ' → logprob: -12.383783340454102
    10. '-n' → logprob: -12.633783340454102

Token 126: ' (' (ID: 350)
  Prédit: '(k'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(k' → logprob: -0.039712388068437576
    2. ' (' → logprob: -3.414712429046631
    3. '(' → logprob: -5.664712429046631
    4. 'k' → logprob: -6.789712429046631
    5. '(abs' → logprob: -6.914712429046631
    6. ' ' → logprob: -8.789711952209473
    7. ' k' → logprob: -9.414711952209473
    8. ' abs' → logprob: -9.789711952209473
    9. 'abs' → logprob: -10.039711952209473
    10. '(max' → logprob: -10.039711952209473

Token 127: 'k' (ID: 74)
  Prédit: '(k'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(k' → logprob: -0.34233617782592773
    2. 'k' → logprob: -1.3423361778259277
    3. ' (' → logprob: -3.9673361778259277
    4. ' k' → logprob: -5.217336177825928
    5. '(' → logprob: -5.717336177825928
    6. '   ' → logprob: -8.092336654663086
    7. '(abs' → logprob: -8.842336654663086
    8. ' ' → logprob: -8.842336654663086
    9. '  ' → logprob: -8.967336654663086
    10. 'abs' → logprob: -8.967336654663086

Token 128: ' -' (ID: 533)
  Prédit: ' -'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' -' → logprob: -0.05495201796293259
    2. '-' → logprob: -2.9299519062042236
    3. ' (' → logprob: -10.804951667785645
    4. ' ' → logprob: -10.929951667785645
    5. '-a' → logprob: -11.179951667785645
    6. 'a' → logprob: -11.554951667785645
    7. ' a' → logprob: -12.804951667785645
    8. '   ' → logprob: -13.179951667785645
    9. '  ' → logprob: -14.054951667785645
    10. '-(' → logprob: -14.054951667785645

Token 129: ' a' (ID: 261)
  Prédit: 'a'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'a' → logprob: -0.008624859154224396
    2. ' a' → logprob: -4.758625030517578
    3. ' ' → logprob: -12.508625030517578
    4. '   ' → logprob: -12.758625030517578
    5. '	a' → logprob: -13.508625030517578
    6. '  ' → logprob: -14.383625030517578
    7. '<|end|>' → logprob: -14.508625030517578
    8. '
' → logprob: -14.758625030517578
    9. 'ans' → logprob: -15.258625030517578
    10. ')' → logprob: -15.508625030517578

Token 130: '))

' (ID: 9746)
  Prédit: '))'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '))' → logprob: -0.0007306627230718732
    2. ')' → logprob: -7.500730514526367
    3. ' ))' → logprob: -9.250730514526367
    4. '))
' → logprob: -9.750730514526367
    5. ')))' → logprob: -11.250730514526367
    6. '))

' → logprob: -12.125730514526367
    7. ' )' → logprob: -13.750730514526367
    8. ' ' → logprob: -14.500730514526367
    9. '));' → logprob: -14.500730514526367
    10. '),' → logprob: -15.000730514526367

Token 131: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.048808544874191284
    2. 'return' → logprob: -3.1738085746765137
    3. '
' → logprob: -5.548808574676514
    4. '    
' → logprob: -6.673808574676514
    5. ' return' → logprob: -7.923808574676514
    6. 'print' → logprob: -8.923808097839355
    7. '```' → logprob: -9.923808097839355
    8. '  
' → logprob: -10.673808097839355
    9. '<|end|>' → logprob: -10.923808097839355
    10. '	return' → logprob: -11.298808097839355

Token 132: ' #' (ID: 1069)
  Prédit: 'return'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'return' → logprob: -0.059851985424757004
    2. '   ' → logprob: -2.934851884841919
    3. 'print' → logprob: -5.809852123260498
    4. ' return' → logprob: -6.559852123260498
    5. '
' → logprob: -8.05985164642334
    6. '    
' → logprob: -9.05985164642334
    7. '	return' → logprob: -10.55985164642334
    8. 'ans' → logprob: -10.80985164642334
    9. '```' → logprob: -10.80985164642334
    10. ' ' → logprob: -11.68485164642334

Token 133: ' Util' (ID: 13564)
  Prédit: 'print'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'print' → logprob: -0.32569268345832825
    2. 'return' → logprob: -1.4506926536560059
    3. '   ' → logprob: -3.950692653656006
    4. ' return' → logprob: -4.825692653656006
    5. ' print' → logprob: -5.075692653656006
    6. 'ans' → logprob: -5.075692653656006
    7. 'for' → logprob: -7.075692653656006
    8. 'if' → logprob: -7.450692653656006
    9. '
' → logprob: -7.700692653656006
    10. ' ans' → logprob: -7.950692653656006

Token 134: 'isation' (ID: 6993)
  Prédit: 'isation'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'isation' → logprob: -0.24187195301055908
    2. 'iser' → logprob: -2.2418718338012695
    3. '#' → logprob: -3.3668718338012695
    4. 'ise' → logprob: -4.6168718338012695
    5. 'isateur' → logprob: -4.6168718338012695
    6. 'isé' → logprob: -4.9918718338012695
    7. 'def' → logprob: -4.9918718338012695
    8. 'ation' → logprob: -5.1168718338012695
    9. 'isant' → logprob: -5.1168718338012695
    10. '=' → logprob: -5.3668718338012695

Token 135: ' d' (ID: 272)
  Prédit: 'print'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'print' → logprob: -1.0927926301956177
    2. ' of' → logprob: -1.5927926301956177
    3. '   ' → logprob: -2.092792510986328
    4. ' de' → logprob: -2.342792510986328
    5. 'return' → logprob: -2.842792510986328
    6. ' return' → logprob: -2.967792510986328
    7. ' print' → logprob: -2.967792510986328
    8. 'ans' → logprob: -3.967792510986328
    9. ' ans' → logprob: -4.342792510986328
    10. ' =' → logprob: -4.592792510986328

Token 136: ''un' (ID: 9788)
  Prédit: ' adjust'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' adjust' → logprob: -0.9574270248413086
    2. ''une' → logprob: -1.3324270248413086
    3. 'adjust' → logprob: -2.5824270248413086
    4. 'une' → logprob: -3.2074270248413086
    5. ''un' → logprob: -3.2074270248413086
    6. ''aj' → logprob: -3.2074270248413086
    7. ' a' → logprob: -3.8324270248413086
    8. 'ans' → logprob: -4.082427024841309
    9. 'a' → logprob: -4.207427024841309
    10. 'e' → logprob: -4.207427024841309

Token 137: ' print' (ID: 2123)
  Prédit: 'print'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'print' → logprob: -0.03805377334356308
    2. 'return' → logprob: -3.7880537509918213
    3. ' print' → logprob: -5.6630539894104
    4. 'def' → logprob: -6.5380539894104
    5. 'fonction' → logprob: -6.9130539894104
    6. 'if' → logprob: -7.0380539894104
    7. '
' → logprob: -7.1630539894104
    8. 'for' → logprob: -7.1630539894104
    9. 'max' → logprob: -7.4130539894104
    10. ' return' → logprob: -7.4130539894104

Token 138: ' à' (ID: 1221)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '(' → logprob: -0.6815502643585205
    2. '(ans' → logprob: -0.8065502643585205
    3. '(
' → logprob: -3.8065502643585205
    4. '()' → logprob: -4.556550025939941
    5. '()
' → logprob: -4.931550025939941
    6. '   ' → logprob: -5.431550025939941
    7. '(print' → logprob: -6.181550025939941
    8. '(f' → logprob: -7.931550025939941
    9. 'print' → logprob: -7.931550025939941
    10. '(b' → logprob: -8.431550025939941

Token 139: ' la' (ID: 557)
  Prédit: 'la'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'la' → logprob: -0.06391336768865585
    2. ' la' → logprob: -3.438913345336914
    3. 'f' → logprob: -3.938913345336914
    4. 'print' → logprob: -6.313913345336914
    5. 'l' → logprob: -6.563913345336914
    6. 'une' → logprob: -6.688913345336914
    7. 'fin' → logprob: -6.938913345336914
    8. ' ' → logprob: -7.188913345336914
    9. '1' → logprob: -7.563913345336914
    10. 'plus' → logprob: -8.438913345336914

Token 140: ' fin' (ID: 2131)
  Prédit: 'f'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'f' → logprob: -0.6833476424217224
    2. 'single' → logprob: -1.8083477020263672
    3. 'fin' → logprob: -1.9333477020263672
    4. 'end' → logprob: -2.183347702026367
    5. 'print' → logprob: -3.058347702026367
    6. 'for' → logprob: -5.308347702026367
    7. 'newline' → logprob: -5.933347702026367
    8. 'final' → logprob: -6.683347702026367
    9. 'format' → logprob: -6.683347702026367
    10. 'one' → logprob: -6.683347702026367

Token 141: ',' (ID: 11)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.28686681389808655
    2. 'print' → logprob: -1.7868667840957642
    3. '
' → logprob: -2.5368669033050537
    4. '    
' → logprob: -6.286866664886475
    5. '<|end|>' → logprob: -8.161867141723633
    6. ' print' → logprob: -8.411867141723633
    7. '  
' → logprob: -9.036867141723633
    8. '```' → logprob: -9.661867141723633
    9. ')
' → logprob: -10.036867141723633
    10. '()
' → logprob: -10.286867141723633

Token 142: ' mais' (ID: 2899)
  Prédit: 'print'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'print' → logprob: -0.6940796375274658
    2. 'end' → logprob: -1.5690796375274658
    3. 'ans' → logprob: -2.069079637527466
    4. ' ans' → logprob: -2.319079637527466
    5. '   ' → logprob: -3.944079637527466
    6. ' end' → logprob: -4.194079399108887
    7. '(ans' → logprob: -4.319079399108887
    8. ' print' → logprob: -4.944079399108887
    9. ')' → logprob: -5.569079399108887
    10. 'def' → logprob: -5.569079399108887

Token 143: ' tuple' (ID: 31311)
  Prédit: 'return'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'return' → logprob: -1.631158709526062
    2. 'not' → logprob: -1.631158709526062
    3. 'without' → logprob: -1.631158709526062
    4. 'sans' → logprob: -2.3811588287353516
    5. 'pas' → logprob: -2.5061588287353516
    6. ' pas' → logprob: -3.1311588287353516
    7. 'with' → logprob: -3.2561588287353516
    8. ' not' → logprob: -3.5061588287353516
    9. 'def' → logprob: -3.6311588287353516
    10. ' without' → logprob: -3.6311588287353516

Token 144: ' génér' (ID: 18939)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.847267210483551
    2. 'print' → logprob: -1.5972671508789062
    3. '(ans' → logprob: -1.8472671508789062
    4. '()' → logprob: -2.5972671508789062
    5. '(' → logprob: -2.9722671508789062
    6. '()
' → logprob: -3.0972671508789062
    7. '(
' → logprob: -3.9722671508789062
    8. ',' → logprob: -5.222267150878906
    9. '(print' → logprob: -5.347267150878906
    10. '
' → logprob: -5.847267150878906

Token 145: 'é' (ID: 377)
  Prédit: 'ate'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'ate' → logprob: -0.15452715754508972
    2. 'ator' → logprob: -3.404527187347412
    3. 'r' → logprob: -3.529527187347412
    4. 'rate' → logprob: -3.779527187347412
    5. ')' → logprob: -4.529527187347412
    6. 'te' → logprob: -4.654527187347412
    7. 'at' → logprob: -5.279527187347412
    8. 'ating' → logprob: -5.654527187347412
    9. 't' → logprob: -5.654527187347412
    10. 'ral' → logprob: -6.029527187347412

Token 146: ' dans' (ID: 2671)
  Prédit: '
'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '
' → logprob: -0.39856991171836853
    2. '   ' → logprob: -1.148569941520691
    3. '()
' → logprob: -5.6485700607299805
    4. ')
' → logprob: -5.8985700607299805
    5. 'print' → logprob: -6.3985700607299805
    6. '<|end|>' → logprob: -7.1485700607299805
    7. 'return' → logprob: -7.2735700607299805
    8. '    
' → logprob: -7.5235700607299805
    9. ' return' → logprob: -8.27357006072998
    10. '  
' → logprob: -8.27357006072998

Token 147: ' une' (ID: 2463)
  Prédit: 'return'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'return' → logprob: -0.040236737579107285
    2. ' return' → logprob: -3.790236711502075
    3. 'process' → logprob: -5.290236949920654
    4. 'ans' → logprob: -5.790236949920654
    5. 'the' → logprob: -5.790236949920654
    6. ' ' → logprob: -7.165236949920654
    7. ' the' → logprob: -7.290236949920654
    8. '<|end|>' → logprob: -7.915236949920654
    9. '(' → logprob: -8.040236473083496
    10. 'l' → logprob: -8.040236473083496

Token 148: ' liste' (ID: 31719)
  Prédit: 'return'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'return' → logprob: -0.04388752952218056
    2. ' return' → logprob: -3.6688876152038574
    3. '()' → logprob: -5.418887615203857
    4. ')' → logprob: -5.793887615203857
    5. '(
' → logprob: -6.168887615203857
    6. '(' → logprob: -6.168887615203857
    7. 'tuple' → logprob: -6.418887615203857
    8. 'ans' → logprob: -7.168887615203857
    9. 'print' → logprob: -7.668887615203857
    10. '(return' → logprob: -7.793887615203857

Token 149: ' par' (ID: 686)
  Prédit: '
'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '
' → logprob: -0.7107794284820557
    2. '   ' → logprob: -0.9607794284820557
    3. 'print' → logprob: -2.3357794284820557
    4. '    
' → logprob: -3.7107794284820557
    5. 'return' → logprob: -6.460779190063477
    6. '<|end|>' → logprob: -6.960779190063477
    7. ' print' → logprob: -7.460779190063477
    8. ' 
' → logprob: -7.960779190063477
    9. '  
' → logprob: -8.210779190063477
    10. '[]
' → logprob: -8.585779190063477

Token 150: ' compréhension' (ID: 142333)
  Prédit: 'print'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'print' → logprob: -0.1708991974592209
    2. 'return' → logprob: -2.7958991527557373
    3. '[' → logprob: -3.6708991527557373
    4. '[]' → logprob: -3.7958991527557373
    5. 'process' → logprob: -4.295899391174316
    6. ' print' → logprob: -5.420899391174316
    7. 'l' → logprob: -5.920899391174316
    8. 'a' → logprob: -5.920899391174316
    9. 'def' → logprob: -6.045899391174316
    10. ' return' → logprob: -6.170899391174316

Token 151: ' pour' (ID: 1930)
  Prédit: 'print'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'print' → logprob: -0.060144998133182526
    2. '   ' → logprob: -3.5601449012756348
    3. '[' → logprob: -4.560144901275635
    4. '
' → logprob: -4.935144901275635
    5. 'result' → logprob: -5.685144901275635
    6. '[
' → logprob: -5.685144901275635
    7. 'for' → logprob: -6.310144901275635
    8. '    
' → logprob: -6.935144901275635
    9. 'ans' → logprob: -7.685144901275635
    10. ' print' → logprob: -7.810144901275635

Token 152: ' ajouter' (ID: 78457)
  Prédit: '_'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '_' → logprob: -0.16040650010108948
    2. ' _' → logprob: -2.4104065895080566
    3. ' i' → logprob: -4.660406589508057
    4. ' print' → logprob: -4.785406589508057
    5. 'print' → logprob: -4.785406589508057
    6. ' result' → logprob: -5.035406589508057
    7. ' val' → logprob: -5.285406589508057
    8. ' output' → logprob: -5.785406589508057
    9. ' ans' → logprob: -5.910406589508057
    10. 'i' → logprob: -5.910406589508057

Token 153: ' de' (ID: 334)
  Prédit: '['
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '[' → logprob: -0.8872745633125305
    2. '[
' → logprob: -1.1372745037078857
    3. 'print' → logprob: -3.2622745037078857
    4. '_' → logprob: -3.3872745037078857
    5. '[]' → logprob: -3.3872745037078857
    6. 'result' → logprob: -4.137274742126465
    7. '   ' → logprob: -4.262274742126465
    8. ' [' → logprob: -4.262274742126465
    9. '[(' → logprob: -4.387274742126465
    10. '[i' → logprob: -4.512274742126465

Token 154: ' la' (ID: 557)
  Prédit: 'f'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'f' → logprob: -1.3151874542236328
    2. 'l' → logprob: -1.6901874542236328
    3. 'print' → logprob: -1.6901874542236328
    4. 'tail' → logprob: -2.190187454223633
    5. 'tails' → logprob: -3.065187454223633
    6. 's' → logprob: -3.440187454223633
    7. 'r' → logprob: -3.940187454223633
    8. ' la' → logprob: -4.315187454223633
    9. 'fin' → logprob: -4.440187454223633
    10. '[' → logprob: -4.565187454223633

Token 155: ' variété' (ID: 127145)
  Prédit: ' cl'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' cl' → logprob: -1.0069117546081543
    2. 'cl' → logprob: -1.6319117546081543
    3. 'clar' → logprob: -2.3819117546081543
    4. 'flex' → logprob: -3.2569117546081543
    5. ' flex' → logprob: -3.2569117546081543
    6. ' lis' → logprob: -4.131911754608154
    7. 'log' → logprob: -4.256911754608154
    8. 'f' → logprob: -4.256911754608154
    9. ' dynamique' → logprob: -4.381911754608154
    10. ' logique' → logprob: -4.381911754608154

Token 156: '
' (ID: 198)
  Prédit: 'print'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'print' → logprob: -0.5324751734733582
    2. '
' → logprob: -1.032475233078003
    3. 'result' → logprob: -4.157474994659424
    4. '[' → logprob: -4.407474994659424
    5. '[
' → logprob: -4.657474994659424
    6. '   ' → logprob: -4.782474994659424
    7. ' print' → logprob: -6.782474994659424
    8. 'ans' → logprob: -6.907474994659424
    9. '    
' → logprob: -6.907474994659424
    10. 'for' → logprob: -7.032474994659424

Token 157: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.9023522138595581
    2. 'print' → logprob: -1.152352213859558
    3. '[' → logprob: -2.1523523330688477
    4. '[
' → logprob: -2.6523523330688477
    5. '
' → logprob: -3.0273523330688477
    6. 'result' → logprob: -4.152352333068848
    7. '    
' → logprob: -5.152352333068848
    8. '(ans' → logprob: -5.402352333068848
    9. '```' → logprob: -6.152352333068848
    10. '[(' → logprob: -6.277352333068848

Token 158: ' output' (ID: 4733)
  Prédit: 'print'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'print' → logprob: -0.4520415663719177
    2. '[' → logprob: -1.4520416259765625
    3. 'result' → logprob: -2.5770416259765625
    4. 'ans' → logprob: -4.0770416259765625
    5. ' print' → logprob: -4.7020416259765625
    6. ' [' → logprob: -4.9520416259765625
    7. 'for' → logprob: -5.7020416259765625
    8. ' ans' → logprob: -5.8270416259765625
    9. '[(' → logprob: -5.8270416259765625
    10. ' result' → logprob: -5.9520416259765625

Token 159: ' =' (ID: 314)
  Prédit: ' ='
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' =' → logprob: -0.3946121633052826
    2. '=' → logprob: -1.644612193107605
    3. 's' → logprob: -2.1446120738983154
    4. '_' → logprob: -4.7696123123168945
    5. '_values' → logprob: -5.7696123123168945
    6. '_s' → logprob: -6.0196123123168945
    7. '_vals' → logprob: -7.3946123123168945
    8. '   ' → logprob: -7.5196123123168945
    9. '_list' → logprob: -9.019612312316895
    10. '_val' → logprob: -9.144612312316895

Token 160: ' [' (ID: 723)
  Prédit: '['
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '[' → logprob: -0.4778425395488739
    2. ' [' → logprob: -1.6028425693511963
    3. '[(' → logprob: -1.9778425693511963
    4. ' [(' → logprob: -4.227842330932617
    5. '[f' → logprob: -4.727842330932617
    6. '[str' → logprob: -5.477842330932617
    7. '[a' → logprob: -5.477842330932617
    8. '[int' → logprob: -5.852842330932617
    9. '[next' → logprob: -6.477842330932617
    10. '[max' → logprob: -7.102842330932617

Token 161: 'ans' (ID: 616)
  Prédit: '(ans'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(ans' → logprob: -0.01423567347228527
    2. '(a' → logprob: -5.014235496520996
    3. '(x' → logprob: -5.889235496520996
    4. '(' → logprob: -6.764235496520996
    5. 'ans' → logprob: -7.389235496520996
    6. '(t' → logprob: -7.639235496520996
    7. '(val' → logprob: -7.764235496520996
    8. '(max' → logprob: -8.139235496520996
    9. '(b' → logprob: -8.139235496520996
    10. '(str' → logprob: -8.139235496520996

Token 162: '_t' (ID: 838)
  Prédit: '_t'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_t' → logprob: -3.619311974034645e-05
    2. '_' → logprob: -10.250036239624023
    3. ' _' → logprob: -14.875036239624023
    4. '_]' → logprob: -16.875036239624023
    5. '_
' → logprob: -17.375036239624023
    6. '_s' → logprob: -17.500036239624023
    7. 't' → logprob: -17.500036239624023
    8. '_i' → logprob: -17.625036239624023
    9. ')_' → logprob: -17.750036239624023
    10. 'a' → logprob: -17.750036239624023

Token 163: ',' (ID: 11)
  Prédit: ','
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ',' → logprob: -0.05815039202570915
    2. ',b' → logprob: -3.058150291442871
    3. ' ,' → logprob: -5.183150291442871
    4. ' for' → logprob: -6.558150291442871
    5. ']' → logprob: -6.558150291442871
    6. ',
' → logprob: -7.433150291442871
    7. 'for' → logprob: -8.933150291442871
    8. ' if' → logprob: -10.433150291442871
    9. '+b' → logprob: -10.558150291442871
    10. ',a' → logprob: -10.558150291442871

Token 164: ' b' (ID: 287)
  Prédit: 'b'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'b' → logprob: -0.1005529910326004
    2. ' b' → logprob: -2.350553035736084
    3. 'max' → logprob: -9.350552558898926
    4. ' max' → logprob: -9.725552558898926
    5. '[b' → logprob: -10.100552558898926
    6. '   ' → logprob: -10.225552558898926
    7. '[' → logprob: -10.475552558898926
    8. ' ' → logprob: -10.600552558898926
    9. ' [' → logprob: -11.225552558898926
    10. '0' → logprob: -11.475552558898926

Token 165: '_new' (ID: 13000)
  Prédit: '_new'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_new' → logprob: -0.0003156817110721022
    2. ' -' → logprob: -8.75031566619873
    3. 'new' → logprob: -9.75031566619873
    4. 'New' → logprob: -10.37531566619873
    5. '-' → logprob: -10.87531566619873
    6. ']' → logprob: -11.75031566619873
    7. '-new' → logprob: -11.75031566619873
    8. ')]' → logprob: -12.37531566619873
    9. 'if' → logprob: -12.50031566619873
    10. '])' → logprob: -12.50031566619873

Token 166: ']
' (ID: 1592)
  Prédit: ']'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ']' → logprob: -0.0012716623023152351
    2. ']
' → logprob: -7.001271724700928
    3. ' ]' → logprob: -8.50127124786377
    4. ']

' → logprob: -9.87627124786377
    5. '])' → logprob: -10.25127124786377
    6. '   ' → logprob: -10.75127124786377
    7. '[' → logprob: -10.75127124786377
    8. '][' → logprob: -11.12627124786377
    9. ')' → logprob: -13.00127124786377
    10. ')]' → logprob: -13.00127124786377

Token 167: '   ' (ID: 271)
  Prédit: '
'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '
' → logprob: -0.5047286748886108
    2. '   ' → logprob: -1.2547286748886108
    3. 'print' → logprob: -2.2547287940979004
    4. '    
' → logprob: -5.3797287940979
    5. ' print' → logprob: -7.7547287940979
    6. '[' → logprob: -8.504728317260742
    7. '<|end|>' → logprob: -8.504728317260742
    8. '  
' → logprob: -8.754728317260742
    9. '
' → logprob: -8.879728317260742
    10. '[
' → logprob: -8.879728317260742

Token 168: ' print' (ID: 2123)
  Prédit: 'print'
  Correct (stricte): False
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'print' (adapté à ' print') → logprob: -0.49139508605003357
    2. '   ' → logprob: -0.991395115852356
    3. '
' → logprob: -4.116394996643066
    4. '    
' → logprob: -7.491394996643066
    5. ' print' → logprob: -8.991394996643066
    6. 'return' → logprob: -9.241394996643066
    7. 'for' → logprob: -9.741394996643066
    8. '	print' → logprob: -11.241394996643066
    9. '```' → logprob: -12.866394996643066
    10. '  
' → logprob: -12.866394996643066

Token 169: '(*' (ID: 9000)
  Prédit: '(*'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(*' → logprob: -0.010807862505316734
    2. '(output' → logprob: -5.010807991027832
    3. '(' → logprob: -6.010807991027832
    4. '(tuple' → logprob: -6.635807991027832
    5. '(*(' → logprob: -8.760807991027832
    6. '((*' → logprob: -9.135807991027832
    7. '((' → logprob: -10.510807991027832
    8. '(f' → logprob: -11.510807991027832
    9. ' (*' → logprob: -12.260807991027832
    10. '("' → logprob: -12.385807991027832

Token 170: 'output' (ID: 6130)
  Prédit: 'output'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'output' → logprob: -1.1160349458805285e-05
    2. ' output' → logprob: -11.625011444091797
    3. '[' → logprob: -13.250011444091797
    4. '(output' → logprob: -14.875011444091797
    5. '$output' → logprob: -17.750011444091797
    6. '	output' → logprob: -18.625011444091797
    7. '   ' → logprob: -19.125011444091797
    8. '.output' → logprob: -19.375011444091797
    9. 'out' → logprob: -19.500011444091797
    10. '
' → logprob: -19.500011444091797

Token 171: ')

' (ID: 1029)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')' → logprob: -1.27099974633893e-05
    2. ')
' → logprob: -11.750012397766113
    3. ' )' → logprob: -12.375012397766113
    4. ')`' → logprob: -15.875012397766113
    5. '   ' → logprob: -16.50001335144043
    6. '))' → logprob: -16.50001335144043
    7. ')}' → logprob: -16.50001335144043
    8. ')

' → logprob: -16.87501335144043
    9. ']' → logprob: -17.37501335144043
    10. ')]' → logprob: -17.50001335144043

Token 172: 'process' (ID: 9139)
  Prédit: ''
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False

Token 173: '_input' (ID: 12507)
  Prédit: '_input'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_input' → logprob: -7.226628895296017e-06
    2. '_' → logprob: -12.000007629394531
    3. '_in' → logprob: -15.000007629394531
    4. '_Input' → logprob: -15.750007629394531
    5. ' _' → logprob: -15.875007629394531
    6. '_output' → logprob: -16.00000762939453
    7. '_inputs' → logprob: -16.12500762939453
    8. '_process' → logprob: -17.75000762939453
    9. '_
' → logprob: -18.25000762939453
    10. '_INPUT' → logprob: -18.50000762939453

Token 174: '()' (ID: 416)
  Prédit: '()'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '()' → logprob: -0.006785116624087095
    2. '(' → logprob: -5.006784915924072
    3. '()
' → logprob: -10.13178539276123
    4. '(
' → logprob: -11.75678539276123
    5. '();' → logprob: -11.75678539276123
    6. '()`' → logprob: -12.75678539276123
    7. '()

' → logprob: -13.13178539276123
    8. ' ()' → logprob: -13.50678539276123
    9. '#' → logprob: -13.63178539276123
    10. '()">' → logprob: -14.13178539276123


RÉSUMÉ:
--------------------------------------------------------------------------------
Total des tokens analysés: 172
Tokens correctement prédits (1ère position, stricte): 58
Tokens correctement prédits (1ère position, avec adaptation): 59
Tokens correctement prédits (top 10): 114
Précision stricte (1ère position): 33.72%
Précision adaptée (1ère position): 34.30%
Précision (top 10): 66.28%
================================================================================
