================================================================================
ANALYSE DE PRÉDICTION TOKEN PAR TOKEN (BATCH API)
Date: 2025-06-04 20:11:03
Modèle de tokenisation: gpt-4o-mini
================================================================================

SCRIPT ANALYSÉ:
--------------------------------------------------------------------------------
input_value_1, input_value_2 = map(int, input().split())
result_value = (input_value_1 - 1) * (input_value_2 - 1)
print(result_value)
--------------------------------------------------------------------------------

RÉSULTATS D'ANALYSE TOKEN PAR TOKEN:
--------------------------------------------------------------------------------
Token 0: 'input' (ID: 2586)
  → Token d'amorce (pas de prédiction)

Token 1: '_value' (ID: 6734)
  → Token d'amorce (pas de prédiction)

Token 2: '_' (ID: 62)
  → Token d'amorce (pas de prédiction)

Token 3: '1' (ID: 16)
  Prédit: '='
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '=' → logprob: -0.021247977390885353
    2. 's' → logprob: -4.771247863769531
    3. ' =' → logprob: -5.271247863769531
    4. '.' → logprob: -5.646247863769531
    5. '1' → logprob: -6.646247863769531
    6. '+' → logprob: -7.021247863769531
    7. '[' → logprob: -7.521247863769531
    8. '```' → logprob: -8.771247863769531
    9. '+=' → logprob: -8.896247863769531
    10. '>' → logprob: -9.396247863769531

Token 4: ',' (ID: 11)
  Prédit: '_'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '_' → logprob: -0.5901132225990295
    2. '+' → logprob: -1.0901131629943848
    3. '=' → logprob: -2.9651131629943848
    4. '.' → logprob: -3.8401131629943848
    5. '*' → logprob: -4.840113162994385
    6. '[' → logprob: -4.840113162994385
    7. ')' → logprob: -5.215113162994385
    8. ':' → logprob: -5.465113162994385
    9. '```' → logprob: -5.715113162994385
    10. ' +' → logprob: -6.090113162994385

Token 5: ' input' (ID: 3422)
  Prédit: 'input'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'input' → logprob: -0.29591044783592224
    2. ' ' → logprob: -1.7959104776382446
    3. ' input' → logprob: -2.545910358428955
    4. ' ,' → logprob: -5.795910358428955
    5. '_' → logprob: -6.045910358428955
    6. 'space' → logprob: -6.045910358428955
    7. '_input' → logprob: -7.420910358428955
    8. ''' → logprob: -7.420910358428955
    9. '<|end|>' → logprob: -7.670910358428955
    10. ',' → logprob: -8.420910835266113

Token 6: '_value' (ID: 6734)
  Prédit: '_'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_' → logprob: -0.20448942482471466
    2. '_value' → logprob: -1.7044894695281982
    3. '```' → logprob: -6.954489231109619
    4. '_name' → logprob: -7.454489231109619
    5. ')' → logprob: -7.954489231109619
    6. ')_' → logprob: -8.329489707946777
    7. '.' → logprob: -8.579489707946777
    8. '_)' → logprob: -9.204489707946777
    9. '_values' → logprob: -9.204489707946777
    10. ' _' → logprob: -9.329489707946777

Token 7: '_' (ID: 62)
  Prédit: '_'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_' → logprob: -0.00028660334646701813
    2. 's' → logprob: -8.875287055969238
    3. '_)' → logprob: -10.375287055969238
    4. '2' → logprob: -10.500287055969238
    5. '_,' → logprob: -10.625287055969238
    6. '```' → logprob: -10.750287055969238
    7. '_

' → logprob: -12.125287055969238
    8. '1' → logprob: -12.375287055969238
    9. ')' → logprob: -12.375287055969238
    10. '[' → logprob: -12.500287055969238

Token 8: '2' (ID: 17)
  Prédit: '2'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '2' → logprob: -5.44312788406387e-05
    2. '1' → logprob: -10.625054359436035
    3. '0' → logprob: -11.375054359436035
    4. ' ' → logprob: -11.875054359436035
    5. '```' → logprob: -11.875054359436035
    6. '_' → logprob: -13.500054359436035
    7. ''' → logprob: -13.875054359436035
    8. '`' → logprob: -14.125054359436035
    9. '3' → logprob: -14.375054359436035
    10. '"' → logprob: -15.375054359436035

Token 9: ' =' (ID: 314)
  Prédit: ','
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ',' → logprob: -0.4901951253414154
    2. '_' → logprob: -1.7401951551437378
    3. '=' → logprob: -1.7401951551437378
    4. ')' → logprob: -4.490195274353027
    5. ':' → logprob: -5.240195274353027
    6. ' =' → logprob: -5.240195274353027
    7. '```' → logprob: -5.490195274353027
    8. '.' → logprob: -5.615195274353027
    9. '(' → logprob: -6.365195274353027
    10. '[' → logprob: -6.615195274353027

Token 10: ' map' (ID: 4014)
  Prédit: ' input'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' input' → logprob: -0.6345710754394531
    2. 'input' → logprob: -1.0095710754394531
    3. ' ' → logprob: -3.134571075439453
    4. '0' → logprob: -3.759571075439453
    5. ' None' → logprob: -4.009571075439453
    6. ' int' → logprob: -5.259571075439453
    7. ' map' → logprob: -5.634571075439453
    8. 'None' → logprob: -5.759571075439453
    9. ' []' → logprob: -5.759571075439453
    10. '[]' → logprob: -7.259571075439453

Token 11: '(int' (ID: 2742)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(' → logprob: -0.07071556150913239
    2. '(lambda' → logprob: -2.8207156658172607
    3. '(input' → logprob: -5.695715427398682
    4. '(int' → logprob: -6.195715427398682
    5. '<|end|>' → logprob: -6.445715427398682
    6. '(eval' → logprob: -7.945715427398682
    7. '```' → logprob: -7.945715427398682
    8. '(user' → logprob: -8.07071590423584
    9. '(str' → logprob: -8.69571590423584
    10. '(func' → logprob: -9.94571590423584

Token 12: ',' (ID: 11)
  Prédit: '(input'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '(input' → logprob: -0.0038108841981738806
    2. ')' → logprob: -6.253810882568359
    3. 'input' → logprob: -6.878810882568359
    4. '(' → logprob: -7.878810882568359
    5. '(user' → logprob: -8.12881088256836
    6. ' input' → logprob: -10.12881088256836
    7. '(inputs' → logprob: -10.62881088256836
    8. '[input' → logprob: -11.00381088256836
    9. ',input' → logprob: -11.00381088256836
    10. '```' → logprob: -11.62881088256836

Token 13: ' input' (ID: 3422)
  Prédit: 'input'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'input' → logprob: -0.023254794999957085
    2. ' input' → logprob: -3.773254871368408
    3. '(input' → logprob: -12.14825439453125
    4. ')' → logprob: -12.52325439453125
    5. 'user' → logprob: -16.02325439453125
    6. ',input' → logprob: -16.64825439453125
    7. '```' → logprob: -16.77325439453125
    8. '	input' → logprob: -17.39825439453125
    9. '=input' → logprob: -17.64825439453125
    10. '_input' → logprob: -17.64825439453125

Token 14: '().' (ID: 1454)
  Prédit: '()'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '()' → logprob: -0.06168103218078613
    2. '())' → logprob: -3.311681032180786
    3. '(' → logprob: -4.311680793762207
    4. '().' → logprob: -4.811680793762207
    5. '('' → logprob: -6.936680793762207
    6. '`()' → logprob: -9.061680793762207
    7. '("")' → logprob: -9.561680793762207
    8. '("' → logprob: -9.561680793762207
    9. '()(' → logprob: -9.561680793762207
    10. ')' → logprob: -9.686680793762207

Token 15: 'split' (ID: 13627)
  Prédit: 'split'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'split' → logprob: -0.0019419649615883827
    2. 'strip' → logprob: -6.251942157745361
    3. ' split' → logprob: -11.876941680908203
    4. 'rstrip' → logprob: -12.001941680908203
    5. 'spl' → logprob: -16.251941680908203
    6. '(split' → logprob: -16.376941680908203
    7. ')' → logprob: -17.251941680908203
    8. 'read' → logprob: -17.501941680908203
    9. 'replace' → logprob: -17.626941680908203
    10. '```' → logprob: -17.626941680908203

Token 16: '())
' (ID: 4574)
  Prédit: '())'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '())' → logprob: -0.012029445730149746
    2. '()))' → logprob: -4.637029647827148
    3. '()' → logprob: -6.262029647827148
    4. ')' → logprob: -8.137029647827148
    5. '))' → logprob: -10.512029647827148
    6. '('' → logprob: -11.012029647827148
    7. '(' → logprob: -11.387029647827148
    8. ' ())' → logprob: -12.262029647827148
    9. '()),' → logprob: -12.887029647827148
    10. '())
' → logprob: -13.262029647827148

Token 17: 'result' (ID: 2521)
  Prédit: '+'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '+' → logprob: -0.15366879105567932
    2. '*' → logprob: -3.1536688804626465
    3. '#' → logprob: -3.5286688804626465
    4. '<|end|>' → logprob: -3.7786688804626465
    5. ')' → logprob: -4.5286688804626465
    6. ':' → logprob: -4.6536688804626465
    7. ',' → logprob: -4.7786688804626465
    8. '```' → logprob: -5.0286688804626465
    9. 'if' → logprob: -5.9036688804626465
    10. '+
' → logprob: -6.5286688804626465

Token 18: '_value' (ID: 6734)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '(' → logprob: -0.004586653783917427
    2. '+' → logprob: -6.629586696624756
    3. '_' → logprob: -6.754586696624756
    4. ')' → logprob: -7.254586696624756
    5. '[' → logprob: -7.754586696624756
    6. '=' → logprob: -7.879586696624756
    7. '<|end|>' → logprob: -8.379586219787598
    8. '.' → logprob: -9.754586219787598
    9. '(
' → logprob: -9.754586219787598
    10. ' =' → logprob: -10.254586219787598

Token 19: ' =' (ID: 314)
  Prédit: '_'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_' → logprob: -0.27823176980018616
    2. ' =' → logprob: -1.6532317399978638
    3. '=' → logprob: -3.4032318592071533
    4. ')' → logprob: -5.153231620788574
    5. '(' → logprob: -5.278231620788574
    6. ' ' → logprob: -5.903231620788574
    7. '+' → logprob: -6.778231620788574
    8. '<|end|>' → logprob: -6.903231620788574
    9. '_space' → logprob: -7.528231620788574
    10. ' +=' → logprob: -8.153231620788574

Token 20: ' (' (ID: 350)
  Prédit: ' input'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' input' → logprob: -0.25194549560546875
    2. 'input' → logprob: -1.5019454956054688
    3. '0' → logprob: -11.751945495605469
    4. ' ' → logprob: -12.876945495605469
    5. ' max' → logprob: -13.376945495605469
    6. '(input' → logprob: -13.626945495605469
    7. 'int' → logprob: -13.751945495605469
    8. 'max' → logprob: -14.376945495605469
    9. 'result' → logprob: -14.626945495605469
    10. ' int' → logprob: -14.751945495605469

Token 21: 'input' (ID: 2586)
  Prédit: 'input'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'input' → logprob: -0.014231083914637566
    2. ' input' → logprob: -4.264231204986572
    3. '(input' → logprob: -10.264230728149414
    4. 'int' → logprob: -11.264230728149414
    5. ')' → logprob: -11.889230728149414
    6. 'result' → logprob: -13.014230728149414
    7. '2' → logprob: -13.264230728149414
    8. ' ' → logprob: -13.514230728149414
    9. ' (' → logprob: -13.514230728149414
    10. 'max' → logprob: -14.264230728149414

Token 22: '_value' (ID: 6734)
  Prédit: '_value'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_value' → logprob: -0.0001382241171086207
    2. ')_' → logprob: -9.750138282775879
    3. '_' → logprob: -9.875138282775879
    4. '_val' → logprob: -11.250138282775879
    5. ' _' → logprob: -12.375138282775879
    6. '```' → logprob: -12.875138282775879
    7. '_Value' → logprob: -13.125138282775879
    8. ')' → logprob: -13.250138282775879
    9. '_values' → logprob: -14.000138282775879
    10. '_VALUE' → logprob: -14.250138282775879

Token 23: '_' (ID: 62)
  Prédit: '_'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_' → logprob: -4.127333340875339e-06
    2. '1' → logprob: -12.750003814697266
    3. ' _' → logprob: -15.250003814697266
    4. '_)' → logprob: -15.250003814697266
    5. ')_' → logprob: -15.500003814697266
    6. '+' → logprob: -16.500003814697266
    7. '```' → logprob: -16.625003814697266
    8. '*_' → logprob: -16.875003814697266
    9. '-' → logprob: -17.375003814697266
    10. '[' → logprob: -17.500003814697266

Token 24: '1' (ID: 16)
  Prédit: '1'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '1' → logprob: -0.001704579102806747
    2. '2' → logprob: -6.376704692840576
    3. '_' → logprob: -13.501704216003418
    4. ' ' → logprob: -14.251704216003418
    5. ')' → logprob: -16.501705169677734
    6. '```' → logprob: -16.501705169677734
    7. '+' → logprob: -17.376705169677734
    8. '0' → logprob: -17.751705169677734
    9. '-' → logprob: -18.001705169677734
    10. '3' → logprob: -18.439205169677734

Token 25: ' -' (ID: 533)
  Prédit: ' +'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' +' → logprob: -0.030376411974430084
    2. '+' → logprob: -3.530376434326172
    3. ' *' → logprob: -8.155376434326172
    4. '*' → logprob: -9.155376434326172
    5. ')' → logprob: -9.280376434326172
    6. ' ' → logprob: -9.780376434326172
    7. ' )' → logprob: -11.030376434326172
    8. '+)' → logprob: -11.155376434326172
    9. ' >' → logprob: -11.405376434326172
    10. ' +
' → logprob: -11.780376434326172

Token 26: ' ' (ID: 220)
  Prédit: ' input'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' input' → logprob: -0.6359180808067322
    2. 'input' → logprob: -0.7609180808067322
    3. '1' → logprob: -5.885918140411377
    4. ' ' → logprob: -8.260917663574219
    5. '2' → logprob: -9.135917663574219
    6. '4' → logprob: -10.510917663574219
    7. '3' → logprob: -11.010917663574219
    8. ')' → logprob: -11.010917663574219
    9. '5' → logprob: -11.135917663574219
    10. '32' → logprob: -11.260917663574219

Token 27: '1' (ID: 16)
  Prédit: 'input'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'input' → logprob: -0.020803457126021385
    2. ' input' → logprob: -3.895803451538086
    3. '1' → logprob: -8.395803451538086
    4. '2' → logprob: -10.895803451538086
    5. ' ' → logprob: -12.520803451538086
    6. '10' → logprob: -13.395803451538086
    7. '(input' → logprob: -13.645803451538086
    8. '4' → logprob: -13.770803451538086
    9. '5' → logprob: -13.770803451538086
    10. ')' → logprob: -14.020803451538086

Token 28: ')' (ID: 8)
  Prédit: ')'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')' → logprob: -0.0008800194482319057
    2. ' )' → logprob: -7.875880241394043
    3. ')*' → logprob: -8.750880241394043
    4. ' +' → logprob: -8.750880241394043
    5. '+' → logprob: -8.875880241394043
    6. ')//' → logprob: -11.375880241394043
    7. ')**' → logprob: -11.500880241394043
    8. '*' → logprob: -12.625880241394043
    9. ')%' → logprob: -12.750880241394043
    10. ')*(' → logprob: -12.875880241394043

Token 29: ' *' (ID: 425)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')' → logprob: -0.7108198404312134
    2. ' *' → logprob: -1.2108198404312134
    3. '*' → logprob: -2.460819721221924
    4. ' %' → logprob: -2.960819721221924
    5. '%' → logprob: -3.835819721221924
    6. ' //' → logprob: -3.960819721221924
    7. ' +' → logprob: -4.210819721221924
    8. '+' → logprob: -4.460819721221924
    9. ' )' → logprob: -5.960819721221924
    10. ' ' → logprob: -6.585819721221924

Token 30: ' (' (ID: 350)
  Prédit: 'input'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'input' → logprob: -0.09210880100727081
    2. '100' → logprob: -3.592108726501465
    3. '10' → logprob: -3.967108726501465
    4. ' input' → logprob: -4.467108726501465
    5. '9' → logprob: -4.842108726501465
    6. ' ' → logprob: -6.092108726501465
    7. '7' → logprob: -6.217108726501465
    8. '2' → logprob: -6.342108726501465
    9. '4' → logprob: -6.342108726501465
    10. '12' → logprob: -6.467108726501465

Token 31: 'input' (ID: 2586)
  Prédit: 'input'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'input' → logprob: -0.03992603346705437
    2. ' input' → logprob: -3.664926052093506
    3. '100' → logprob: -5.289926052093506
    4. '10' → logprob: -5.914926052093506
    5. '9' → logprob: -6.539926052093506
    6. ' ' → logprob: -7.289926052093506
    7. '(input' → logprob: -7.789926052093506
    8. '2' → logprob: -8.039925575256348
    9. '32' → logprob: -8.164925575256348
    10. ' (' → logprob: -8.664925575256348

Token 32: '_value' (ID: 6734)
  Prédit: '_value'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_value' → logprob: -6.392202976712724e-06
    2. 'value' → logprob: -12.250006675720215
    3. '_VALUE' → logprob: -14.500006675720215
    4. '_' → logprob: -15.125006675720215
    5. '_Value' → logprob: -15.125006675720215
    6. ')_' → logprob: -16.0000057220459
    7. 'Value' → logprob: -16.0000057220459
    8. '-value' → logprob: -17.0000057220459
    9. 'alue' → logprob: -17.1250057220459
    10. '_code' → logprob: -17.1250057220459

Token 33: '_' (ID: 62)
  Prédit: '_'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_' → logprob: -0.00034177995985373855
    2. '_value' → logprob: -8.000341415405273
    3. '2' → logprob: -12.125341415405273
    4. '-' → logprob: -15.625341415405273
    5. ')_' → logprob: -15.750341415405273
    6. '```' → logprob: -16.000341415405273
    7. 'value' → logprob: -16.375341415405273
    8. '_VALUE' → logprob: -16.875341415405273
    9. '3' → logprob: -17.000341415405273
    10. '1' → logprob: -17.250341415405273

Token 34: '2' (ID: 17)
  Prédit: '2'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '2' → logprob: -7.107425062713446e-06
    2. '1' → logprob: -12.125006675720215
    3. '_' → logprob: -14.000006675720215
    4. ' ' → logprob: -14.750006675720215
    5. '```' → logprob: -15.375006675720215
    6. '

' → logprob: -16.37500762939453
    7. '۲' → logprob: -17.06250762939453
    8. 'value' → logprob: -17.12500762939453
    9. ')' → logprob: -17.31250762939453
    10. '２' → logprob: -17.43750762939453

Token 35: ' -' (ID: 533)
  Prédit: ' -'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' -' → logprob: -0.06437935680150986
    2. ')' → logprob: -3.0643794536590576
    3. ' )' → logprob: -4.6893792152404785
    4. '-' → logprob: -5.0643792152404785
    5. ' +' → logprob: -9.064379692077637
    6. '+' → logprob: -11.314379692077637
    7. '<|end|>' → logprob: -11.939379692077637
    8. ')-' → logprob: -12.689379692077637
    9. '))' → logprob: -12.814379692077637
    10. ' ' → logprob: -12.939379692077637

Token 36: ' ' (ID: 220)
  Prédit: '1'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '1' → logprob: -0.061990320682525635
    2. ' ' → logprob: -2.811990261077881
    3. ')' → logprob: -10.936990737915039
    4. '<|end|>' → logprob: -13.186990737915039
    5. '2' → logprob: -13.436990737915039
    6. '0' → logprob: -14.811990737915039
    7. '```' → logprob: -15.186990737915039
    8. ' )' → logprob: -15.311990737915039
    9. '<|end|>' → logprob: -15.874490737915039
    10. '１' → logprob: -16.68699073791504

Token 37: '1' (ID: 16)
  Prédit: '1'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '1' → logprob: -8.816591434879228e-05
    2. ' ' → logprob: -9.37508773803711
    3. ')' → logprob: -13.00008773803711
    4. '2' → logprob: -14.12508773803711
    5. '```' → logprob: -16.00008773803711
    6. '<|end|>' → logprob: -17.31258773803711
    7. '   ' → logprob: -17.56258773803711
    8. '0' → logprob: -18.18758773803711
    9. '１' → logprob: -18.37508773803711
    10. '')' → logprob: -18.56258773803711

Token 38: ')
' (ID: 446)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')' → logprob: -6.630610641877865e-06
    2. '`)' → logprob: -13.875006675720215
    3. '')' → logprob: -14.000006675720215
    4. '))' → logprob: -14.000006675720215
    5. ' )' → logprob: -14.125006675720215
    6. ')**' → logprob: -14.625006675720215
    7. ')))' → logprob: -14.750006675720215
    8. ')
' → logprob: -15.000006675720215
    9. ')*' → logprob: -15.000006675720215
    10. '*' → logprob: -15.125006675720215

Token 39: 'print' (ID: 1598)
  Prédit: '\n'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '\n' → logprob: -1.3496390581130981
    2. 'print' → logprob: -1.7246390581130981
    3. '*' → logprob: -1.8496390581130981
    4. '<|end|>' → logprob: -2.2246389389038086
    5. '+' → logprob: -2.3496389389038086
    6. '
' → logprob: -2.4746389389038086
    7. ')' → logprob: -3.0996389389038086
    8. '#' → logprob: -3.4746389389038086
    9. '```' → logprob: -4.349638938903809
    10. '\' → logprob: -4.349638938903809

Token 40: '(result' (ID: 8111)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(' → logprob: -0.00372834550216794
    2. '(result' → logprob: -5.62872838973999
    3. '("("' → logprob: -9.378727912902832
    4. '('' → logprob: -10.253727912902832
    5. '((' → logprob: -12.503727912902832
    6. '()' → logprob: -13.378727912902832
    7. '(f' → logprob: -14.128727912902832
    8. '(
' → logprob: -14.753727912902832
    9. '(

' → logprob: -14.753727912902832
    10. 'result' → logprob: -14.878727912902832

Token 41: '_value' (ID: 6734)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')' → logprob: -0.32430651783943176
    2. '_value' → logprob: -1.3243064880371094
    3. ')_' → logprob: -4.949306488037109
    4. '_)' → logprob: -5.824306488037109
    5. '_' → logprob: -7.324306488037109
    6. '_val' → logprob: -9.19930648803711
    7. '_v' → logprob: -9.94930648803711
    8. ')value' → logprob: -9.94930648803711
    9. '`)' → logprob: -10.44930648803711
    10. '_Value' → logprob: -11.44930648803711

Token 42: ')' (ID: 8)
  Prédit: ')'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')' → logprob: -5.512236498361744e-07
    2. '))' → logprob: -15.375000953674316
    3. ' )' → logprob: -16.125
    4. '`)' → logprob: -16.25
    5. '')' → logprob: -17.125
    6. ')`' → logprob: -17.125
    7. ')
' → logprob: -18.5
    8. '#' → logprob: -19.25
    9. '```' → logprob: -19.375
    10. '）' → logprob: -20.125


RÉSUMÉ:
--------------------------------------------------------------------------------
Total des tokens analysés: 40
Tokens correctement prédits (1ère position, stricte): 15
Tokens correctement prédits (1ère position, avec adaptation): 15
Tokens correctement prédits (top 10): 33
Précision stricte (1ère position): 37.50%
Précision adaptée (1ère position): 37.50%
Précision (top 10): 82.50%
================================================================================
