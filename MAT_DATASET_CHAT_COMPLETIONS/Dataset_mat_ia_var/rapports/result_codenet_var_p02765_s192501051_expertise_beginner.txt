================================================================================
ANALYSE DE PRÉDICTION TOKEN PAR TOKEN (BATCH API)
Date: 2025-06-04 19:24:36
Modèle de tokenisation: gpt-4o-mini
================================================================================

SCRIPT ANALYSÉ:
--------------------------------------------------------------------------------
k, r = input().split()
k = int(k)
r = int(r)
if k >= 10:
    print(r)
else:
    print(r + 100 * (10 - k))
--------------------------------------------------------------------------------

RÉSULTATS D'ANALYSE TOKEN PAR TOKEN:
--------------------------------------------------------------------------------
Token 0: 'k' (ID: 74)
  → Token d'amorce (pas de prédiction)

Token 1: ',' (ID: 11)
  → Token d'amorce (pas de prédiction)

Token 2: ' r' (ID: 428)
  → Token d'amorce (pas de prédiction)

Token 3: ' =' (ID: 314)
  Prédit: '='
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '=' → logprob: -0.16190767288208008
    2. ',' → logprob: -2.16190767288208
    3. ' =' → logprob: -3.41190767288208
    4. ')' → logprob: -8.036907196044922
    5. ';' → logprob: -8.161907196044922
    6. '.' → logprob: -8.286907196044922
    7. ':' → logprob: -8.661907196044922
    8. ' ' → logprob: -8.911907196044922
    9. '[' → logprob: -9.911907196044922
    10. '(' → logprob: -10.536907196044922

Token 4: ' input' (ID: 3422)
  Prédit: ' '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' ' → logprob: -0.5550321340560913
    2. '0' → logprob: -0.9300321340560913
    3. ' k' → logprob: -3.930032253265381
    4. '1' → logprob: -5.055032253265381
    5. 'k' → logprob: -5.805032253265381
    6. '10' → logprob: -7.680032253265381
    7. ' (' → logprob: -8.180031776428223
    8. '5' → logprob: -8.430031776428223
    9. '```' → logprob: -8.555031776428223
    10. ' map' → logprob: -8.805031776428223

Token 5: '().' (ID: 1454)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '(' → logprob: -0.0022620675154030323
    2. '('' → logprob: -6.752262115478516
    3. ''' → logprob: -8.002262115478516
    4. '("("' → logprob: -8.002262115478516
    5. '(
' → logprob: -8.502262115478516
    6. '"' → logprob: -10.002262115478516
    7. '.' → logprob: -10.377262115478516
    8. '('.')' → logprob: -10.752262115478516
    9. '()' → logprob: -10.877262115478516
    10. '(.)' → logprob: -11.127262115478516

Token 6: 'split' (ID: 13627)
  Prédit: 'split'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'split' → logprob: -0.001933992956764996
    2. 'strip' → logprob: -6.251934051513672
    3. ' split' → logprob: -13.001934051513672
    4. 'rstrip' → logprob: -13.251934051513672
    5. 'replace' → logprob: -14.376934051513672
    6. '```' → logprob: -14.626934051513672
    7. '.split' → logprob: -15.501934051513672
    8. 'spl' → logprob: -17.001934051513672
    9. 'sp' → logprob: -17.751934051513672
    10. '.' → logprob: -18.001934051513672

Token 7: '()
' (ID: 1234)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '(' → logprob: -0.16069544851779938
    2. '()' → logprob: -1.9106954336166382
    3. '('' → logprob: -8.78569507598877
    4. '(
' → logprob: -9.03569507598877
    5. '(

' → logprob: -10.41069507598877
    6. '(`' → logprob: -10.53569507598877
    7. '```' → logprob: -10.66069507598877
    8. '("("' → logprob: -10.78569507598877
    9. '(()' → logprob: -10.91069507598877
    10. '()`' → logprob: -11.28569507598877

Token 8: 'k' (ID: 74)
  Prédit: '='
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '=' → logprob: -0.03134782612323761
    2. 'k' → logprob: -4.406347751617432
    3. ' =' → logprob: -4.531347751617432
    4. ',' → logprob: -5.906347751617432
    5. '#' → logprob: -6.281347751617432
    6. '[' → logprob: -6.656347751617432
    7. '=k' → logprob: -7.531347751617432
    8. '.' → logprob: -8.53134822845459
    9. '[int' → logprob: -8.78134822845459
    10. '[k' → logprob: -9.03134822845459

Token 9: ' =' (ID: 314)
  Prédit: '['
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '[' → logprob: -0.04843030497431755
    2. '+' → logprob: -3.7984302043914795
    3. '```' → logprob: -4.798430442810059
    4. '*' → logprob: -5.173430442810059
    5. '[k' → logprob: -5.923430442810059
    6. '=' → logprob: -6.298430442810059
    7. '.' → logprob: -6.923430442810059
    8. ' ' → logprob: -6.923430442810059
    9. '<|end|>' → logprob: -6.923430442810059
    10. '**' → logprob: -7.048430442810059

Token 10: ' int' (ID: 677)
  Prédit: 'int'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'int' → logprob: -0.0005510062328539789
    2. ' int' → logprob: -7.750551223754883
    3. 'k' → logprob: -9.375551223754883
    4. 'float' → logprob: -10.750551223754883
    5. 'input' → logprob: -12.125551223754883
    6. '[int' → logprob: -13.375551223754883
    7. ' k' → logprob: -13.500551223754883
    8. '(int' → logprob: -13.500551223754883
    9. 'len' → logprob: -13.625551223754883
    10. '0' → logprob: -14.000551223754883

Token 11: '(k' (ID: 12125)
  Prédit: '(k'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(k' → logprob: -0.5760771632194519
    2. '(' → logprob: -0.8260771632194519
    3. '('' → logprob: -9.576077461242676
    4. '((' → logprob: -11.576077461242676
    5. '(`' → logprob: -11.701077461242676
    6. '(r' → logprob: -11.951077461242676
    7. '(
' → logprob: -11.951077461242676
    8. ' (' → logprob: -12.201077461242676
    9. '("("' → logprob: -12.326077461242676
    10. '()' → logprob: -12.576077461242676

Token 12: ')
' (ID: 446)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')' → logprob: -0.00011796683247666806
    2. '+' → logprob: -9.875118255615234
    3. ')
' → logprob: -9.875118255615234
    4. ' )' → logprob: -12.125118255615234
    5. ')+' → logprob: -13.500118255615234
    6. '),' → logprob: -13.625118255615234
    7. '*' → logprob: -13.625118255615234
    8. '')' → logprob: -14.000118255615234
    9. '```' → logprob: -14.000118255615234
    10. '`)' → logprob: -14.375118255615234

Token 13: 'r' (ID: 81)
  Prédit: 'r'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'r' → logprob: -0.004367221146821976
    2. ' r' → logprob: -6.254367351531982
    3. 'if' → logprob: -6.629367351531982
    4. ' if' → logprob: -7.379367351531982
    5. 'for' → logprob: -9.254366874694824
    6. '```' → logprob: -9.379366874694824
    7. ',' → logprob: -9.504366874694824
    8. ' for' → logprob: -9.879366874694824
    9. 'n' → logprob: -10.379366874694824
    10. '+' → logprob: -10.754366874694824

Token 14: ' =' (ID: 314)
  Prédit: ''
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False

Token 15: ' int' (ID: 677)
  Prédit: 'int'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'int' → logprob: -0.00026169343618676066
    2. ' int' → logprob: -8.250261306762695
    3. '0' → logprob: -15.750261306762695
    4. '(int' → logprob: -15.875261306762695
    5. '[int' → logprob: -16.750261306762695
    6. '<int' → logprob: -16.875261306762695
    7. 'r' → logprob: -17.125261306762695
    8. '1' → logprob: -17.875261306762695
    9. '=int' → logprob: -18.250261306762695
    10. 'k' → logprob: -18.500261306762695

Token 16: '(r' (ID: 4729)
  Prédit: '(r'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(r' → logprob: -0.026623975485563278
    2. '(' → logprob: -3.6516239643096924
    3. '(k' → logprob: -9.151623725891113
    4. ' (' → logprob: -9.776623725891113
    5. '('' → logprob: -10.526623725891113
    6. 'r' → logprob: -10.776623725891113
    7. '`' → logprob: -10.901623725891113
    8. ')' → logprob: -11.026623725891113
    9. ')(' → logprob: -11.151623725891113
    10. '((' → logprob: -11.151623725891113

Token 17: ')
' (ID: 446)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')' → logprob: -3.4121114822482923e-06
    2. ' )' → logprob: -13.625003814697266
    3. '')' → logprob: -14.250003814697266
    4. ')
' → logprob: -14.250003814697266
    5. '`)' → logprob: -15.250003814697266
    6. '))' → logprob: -15.875003814697266
    7. '```' → logprob: -15.875003814697266
    8. '")' → logprob: -16.875003814697266
    9. '#' → logprob: -17.000003814697266
    10. ')

' → logprob: -17.250003814697266

Token 18: 'if' (ID: 366)
  Prédit: 'for'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'for' → logprob: -0.06374449282884598
    2. 'i' → logprob: -2.81374454498291
    3. 'while' → logprob: -7.06374454498291
    4. ' for' → logprob: -8.43874454498291
    5. '```' → logprob: -8.68874454498291
    6. 't' → logprob: -9.43874454498291
    7. 'if' → logprob: -9.56374454498291
    8. 'x' → logprob: -9.93874454498291
    9. 'cost' → logprob: -9.93874454498291
    10. 'n' → logprob: -10.18874454498291

Token 19: ' k' (ID: 372)
  Prédit: ' k'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' k' → logprob: -0.1269741952419281
    2. 'k' → logprob: -2.376974105834961
    3. '(k' → logprob: -4.376974105834961
    4. ' (' → logprob: -4.876974105834961
    5. '(' → logprob: -5.126974105834961
    6. ' r' → logprob: -8.626974105834961
    7. ' ' → logprob: -10.251974105834961
    8. '(r' → logprob: -10.376974105834961
    9. 'r' → logprob: -10.626974105834961
    10. ' not' → logprob: -12.251974105834961

Token 20: ' >=' (ID: 5064)
  Prédit: ' %'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' %' → logprob: -0.576003909111023
    2. '%' → logprob: -0.826003909111023
    3. ' ==' → logprob: -10.826004028320312
    4. ' ' → logprob: -10.951004028320312
    5. '%i' → logprob: -12.201004028320312
    6. ' %=' → logprob: -12.576004028320312
    7. ')' → logprob: -12.951004028320312
    8. '==' → logprob: -13.201004028320312
    9. '>' → logprob: -13.576004028320312
    10. '%s' → logprob: -13.826004028320312

Token 21: ' ' (ID: 220)
  Prédit: 'r'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'r' → logprob: -0.10209306329488754
    2. '1' → logprob: -2.977092981338501
    3. '10' → logprob: -3.102092981338501
    4. '2' → logprob: -7.85209321975708
    5. '20' → logprob: -8.352092742919922
    6. '0' → logprob: -8.477092742919922
    7. ' ' → logprob: -8.602092742919922
    8. ' r' → logprob: -10.102092742919922
    9. '5' → logprob: -10.352092742919922
    10. '100' → logprob: -10.727092742919922

Token 22: '10' (ID: 702)
  Prédit: 'r'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'r' → logprob: -0.010803505778312683
    2. '1' → logprob: -4.885803699493408
    3. '10' → logprob: -5.885803699493408
    4. '2' → logprob: -8.38580322265625
    5. '0' → logprob: -9.38580322265625
    6. '100' → logprob: -10.38580322265625
    7. '5' → logprob: -10.76080322265625
    8. '20' → logprob: -10.88580322265625
    9. ' r' → logprob: -11.51080322265625
    10. ' ' → logprob: -12.26080322265625

Token 23: ':
' (ID: 734)
  Prédit: ':'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ':' → logprob: -0.014436380937695503
    2. ' :' → logprob: -4.2644362449646
    3. ' ' → logprob: -9.389436721801758
    4. ' and' → logprob: -9.514436721801758
    5. '0' → logprob: -10.264436721801758
    6. ':**' → logprob: -11.139436721801758
    7. '+:' → logprob: -11.639436721801758
    8. '':' → logprob: -11.764436721801758
    9. ' ':'' → logprob: -11.764436721801758
    10. '>' → logprob: -12.139436721801758

Token 24: '   ' (ID: 271)
  Prédit: ' k'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' k' → logprob: -0.3493104875087738
    2. ' ' → logprob: -2.4743103981018066
    3. '   ' → logprob: -2.5993103981018066
    4. ' print' → logprob: -3.0993103981018066
    5. ':' → logprob: -3.4743103981018066
    6. ' :' → logprob: -3.8493103981018066
    7. '    ' → logprob: -4.224310398101807
    8. ' :
' → logprob: -5.599310398101807
    9. ' ' → logprob: -5.599310398101807
    10. '0' → logprob: -5.724310398101807

Token 25: ' print' (ID: 2123)
  Prédit: ' print'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' print' → logprob: -0.07963301986455917
    2. ' pass' → logprob: -3.0796329975128174
    3. ' k' → logprob: -4.0796332359313965
    4. 'print' (adapté à ' print') → logprob: -5.2046332359313965
    5. ' ' → logprob: -5.7046332359313965
    6. ' break' → logprob: -6.5796332359313965
    7. '   ' → logprob: -6.9546332359313965
    8. '    ' → logprob: -6.9546332359313965
    9. ' r' → logprob: -7.5796332359313965
    10. ' n' → logprob: -8.829632759094238

Token 26: '(r' (ID: 4729)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '(' → logprob: -0.19704924523830414
    2. '(k' → logprob: -2.197049140930176
    3. '("' → logprob: -3.072049140930176
    4. '('' → logprob: -4.197049140930176
    5. '()' → logprob: -5.447049140930176
    6. '("("' → logprob: -6.447049140930176
    7. '("")' → logprob: -8.697049140930176
    8. '((' → logprob: -9.072049140930176
    9. '(-' → logprob: -11.197049140930176
    10. '(True' → logprob: -11.447049140930176

Token 27: ')
' (ID: 446)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')' → logprob: -0.0005313486326485872
    2. '*' → logprob: -8.625531196594238
    3. ' )' → logprob: -8.750531196594238
    4. '))' → logprob: -10.000531196594238
    5. '+' → logprob: -10.125531196594238
    6. ',' → logprob: -11.250531196594238
    7. '-' → logprob: -11.375531196594238
    8. '%' → logprob: -11.375531196594238
    9. ')
' → logprob: -11.500531196594238
    10. '*k' → logprob: -12.125531196594238

Token 28: 'else' (ID: 2807)
  Prédit: ':'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ':' → logprob: -0.5899921655654907
    2. 'else' → logprob: -1.3399921655654907
    3. '<|end|>' → logprob: -2.339992046356201
    4. ' else' → logprob: -3.089992046356201
    5. ')' → logprob: -4.214992046356201
    6. 'elif' → logprob: -4.464992046356201
    7. '```' → logprob: -5.714992046356201
    8. ',' → logprob: -6.089992046356201
    9. '.' → logprob: -6.339992046356201
    10. ' elif' → logprob: -6.464992046356201

Token 29: ':
' (ID: 734)
  Prédit: ':'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ':' → logprob: -0.00037085101939737797
    2. ':
' → logprob: -8.750370979309082
    3. '   ' → logprob: -9.000370979309082
    4. ' :' → logprob: -9.375370979309082
    5. '    ' → logprob: -13.875370979309082
    6. '  ' → logprob: -14.875370979309082
    7. ',' → logprob: -15.125370979309082
    8. ' :
' → logprob: -15.125370979309082
    9. ':return' → logprob: -15.125370979309082
    10. '       ' → logprob: -15.500370979309082

Token 30: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.3420964181423187
    2. '    ' → logprob: -1.9670964479446411
    3. 'print' → logprob: -2.3420963287353516
    4. ' k' → logprob: -3.9670963287353516
    5. ' print' → logprob: -4.092096328735352
    6. ' ' → logprob: -5.342096328735352
    7. ' r' → logprob: -5.592096328735352
    8. 'r' → logprob: -5.842096328735352
    9. '```' → logprob: -6.092096328735352
    10. ' ' → logprob: -7.217096328735352

Token 31: ' print' (ID: 2123)
  Prédit: 'print'
  Correct (stricte): False
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'print' (adapté à ' print') → logprob: -0.40300872921943665
    2. ' print' → logprob: -1.2780086994171143
    3. ' k' → logprob: -3.0280086994171143
    4. 'r' → logprob: -6.403008937835693
    5. 'k' → logprob: -6.528008937835693
    6. ' r' → logprob: -7.403008937835693
    7. ' for' → logprob: -8.278008460998535
    8. '    ' → logprob: -8.778008460998535
    9. 'pr' → logprob: -9.028008460998535
    10. '0' → logprob: -9.153008460998535

Token 32: '(r' (ID: 4729)
  Prédit: '(k'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(k' → logprob: -0.09155450761318207
    2. '(' → logprob: -2.8415544033050537
    3. '(r' → logprob: -3.5915544033050537
    4. '('' → logprob: -7.341554641723633
    5. '()' → logprob: -7.466554641723633
    6. '("' → logprob: -8.341554641723633
    7. '((' → logprob: -9.341554641723633
    8. '(-' → logprob: -11.341554641723633
    9. '(s' → logprob: -11.966554641723633
    10. ' (' → logprob: -12.591554641723633

Token 33: ' +' (ID: 659)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')' → logprob: -0.8673233985900879
    2. '-k' → logprob: -1.367323398590088
    3. '-' → logprob: -2.492323398590088
    4. '+' → logprob: -2.617323398590088
    5. ' -' → logprob: -3.367323398590088
    6. '*' → logprob: -3.367323398590088
    7. '*k' → logprob: -3.492323398590088
    8. ' +' → logprob: -3.617323398590088
    9. '+k' → logprob: -3.742323398590088
    10. ' *' → logprob: -4.117323398590088

Token 34: ' ' (ID: 220)
  Prédit: 'k'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'k' → logprob: -0.4192028045654297
    2. ' k' → logprob: -1.2942028045654297
    3. '1' → logprob: -3.6692028045654297
    4. ' ' → logprob: -4.29420280456543
    5. ' (' → logprob: -4.66920280456543
    6. '10' → logprob: -4.91920280456543
    7. '(k' → logprob: -5.29420280456543
    8. '(' → logprob: -5.79420280456543
    9. '5' → logprob: -7.16920280456543
    10. '2' → logprob: -7.41920280456543

Token 35: '100' (ID: 1353)
  Prédit: 'k'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'k' → logprob: -0.026751428842544556
    2. '1' → logprob: -4.276751518249512
    3. ' k' → logprob: -4.901751518249512
    4. '(' → logprob: -6.276751518249512
    5. '10' → logprob: -6.401751518249512
    6. '(k' → logprob: -7.776751518249512
    7. '5' → logprob: -8.026751518249512
    8. ' ' → logprob: -8.526751518249512
    9. ' (' → logprob: -8.526751518249512
    10. 'r' → logprob: -9.276751518249512

Token 36: ' *' (ID: 425)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ')' → logprob: -6.869017852295656e-06
    2. ' )' → logprob: -12.000006675720215
    3. '0' → logprob: -15.750006675720215
    4. '*' → logprob: -15.875006675720215
    5. '))' → logprob: -16.12500762939453
    6. ')
' → logprob: -16.37500762939453
    7. '+' → logprob: -16.50000762939453
    8. '-' → logprob: -17.00000762939453
    9. '`)' → logprob: -17.62500762939453
    10. ')`' → logprob: -17.75000762939453

Token 37: ' (' (ID: 350)
  Prédit: 'k'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'k' → logprob: -0.18804174661636353
    2. '(' → logprob: -2.3130416870117188
    3. ' (' → logprob: -3.5630416870117188
    4. ' k' → logprob: -3.6880416870117188
    5. '(k' → logprob: -4.063041687011719
    6. ')' → logprob: -7.063041687011719
    7. '0' → logprob: -7.813041687011719
    8. ' ' → logprob: -8.563041687011719
    9. '   ' → logprob: -9.313041687011719
    10. '1' → logprob: -9.438041687011719

Token 38: '10' (ID: 702)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(' → logprob: -0.6681298613548279
    2. 'k' → logprob: -0.7931298613548279
    3. '(k' → logprob: -4.168129920959473
    4. ' (' → logprob: -4.543129920959473
    5. '10' → logprob: -5.543129920959473
    6. ' k' → logprob: -6.168129920959473
    7. '1' → logprob: -6.293129920959473
    8. '0' → logprob: -7.793129920959473
    9. ' ' → logprob: -8.793129920959473
    10. '((' → logprob: -9.543129920959473

Token 39: ' -' (ID: 533)
  Prédit: ' -'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' -' → logprob: -0.19689400494098663
    2. '-' → logprob: -2.0718939304351807
    3. '-k' → logprob: -2.9468939304351807
    4. ' ' → logprob: -8.946893692016602
    5. '0' → logprob: -10.071893692016602
    6. ' //' → logprob: -10.446893692016602
    7. ')' → logprob: -10.696893692016602
    8. '-r' → logprob: -11.446893692016602
    9. '//' → logprob: -11.571893692016602
    10. '   ' → logprob: -12.071893692016602

Token 40: ' k' (ID: 372)
  Prédit: 'k'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'k' → logprob: -0.38693541288375854
    2. ' k' → logprob: -1.1369354724884033
    3. ' (' → logprob: -10.386935234069824
    4. '(k' → logprob: -11.136935234069824
    5. ' ' → logprob: -11.886935234069824
    6. '  ' → logprob: -13.136935234069824
    7. '	k' → logprob: -13.261935234069824
    8. '(' → logprob: -13.386935234069824
    9. '-k' → logprob: -13.636935234069824
    10. ')' → logprob: -13.761935234069824

Token 41: '))' (ID: 915)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')' → logprob: -0.3134171664714813
    2. '))' → logprob: -1.3134171962738037
    3. ')))' → logprob: -9.438417434692383
    4. ' )' → logprob: -9.813417434692383
    5. ' ))' → logprob: -11.313417434692383
    6. '0' → logprob: -13.813417434692383
    7. '-' → logprob: -13.813417434692383
    8. '))
' → logprob: -14.063417434692383
    9. ')
' → logprob: -14.438417434692383
    10. '1' → logprob: -14.688417434692383


RÉSUMÉ:
--------------------------------------------------------------------------------
Total des tokens analysés: 39
Tokens correctement prédits (1ère position, stricte): 8
Tokens correctement prédits (1ère position, avec adaptation): 9
Tokens correctement prédits (top 10): 29
Précision stricte (1ère position): 20.51%
Précision adaptée (1ère position): 23.08%
Précision (top 10): 74.36%
================================================================================
