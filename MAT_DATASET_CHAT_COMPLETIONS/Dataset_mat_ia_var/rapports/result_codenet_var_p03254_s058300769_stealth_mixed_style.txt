================================================================================
ANALYSE DE PRÉDICTION TOKEN PAR TOKEN (BATCH API)
Date: 2025-06-04 20:08:13
Modèle de tokenisation: gpt-4o-mini
================================================================================

SCRIPT ANALYSÉ:
--------------------------------------------------------------------------------
import sys

def next_str(): return sys.stdin.readline().strip()
def next_int(): return int(next_str())
def next_list(): return list(map(int, next_str().split()))
get_all = lambda: list(map(int, sys.stdin.readlines()))

def core():
    n_x = next_list()
    n = n_x[0]; x = n_x[1]
    arr = []
    for v in next_str().split():
        arr.append(int(v))

    arr.sort(reverse=False)

    counter = 0; i = 0
    while i < len(arr):
        x = x - arr[i]
        if x >= 0: counter += 1
        i += 1

    if (x > 0):
        counter = counter - 1
    print(counter)

if __name__ == "__main__":
    core()
--------------------------------------------------------------------------------

RÉSULTATS D'ANALYSE TOKEN PAR TOKEN:
--------------------------------------------------------------------------------
Token 0: 'import' (ID: 561)
  → Token d'amorce (pas de prédiction)

Token 1: ' sys' (ID: 12228)
  → Token d'amorce (pas de prédiction)

Token 2: '

' (ID: 279)
  → Token d'amorce (pas de prédiction)

Token 3: 'def' (ID: 1314)
  Prédit: '.'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '.' → logprob: -0.0347585454583168
    2. '\n' → logprob: -4.034758567810059
    3. 'import' → logprob: -4.909758567810059
    4. '<|end|>' → logprob: -5.284758567810059
    5. '\' → logprob: -7.159758567810059
    6. '<|end|>' → logprob: -7.534758567810059
    7. 'newline' → logprob: -7.909758567810059
    8. ',' → logprob: -8.159758567810059
    9. '[' → logprob: -8.284758567810059
    10. '' → logprob: -8.284758567810059

Token 4: ' next' (ID: 2613)
  Prédit: ' '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' ' → logprob: -0.02042287401854992
    2. ' ' → logprob: -5.39542293548584
    3. '  ' → logprob: -6.39542293548584
    4. '<|end|>' → logprob: -6.39542293548584
    5. ' process' → logprob: -6.52042293548584
    6. ' space' → logprob: -6.64542293548584
    7. ' sys' → logprob: -6.89542293548584
    8. ' main' → logprob: -6.89542293548584
    9. ' a' → logprob: -7.02042293548584
    10. ')' → logprob: -7.27042293548584

Token 5: '_str' (ID: 6182)
  Prédit: '_'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '_' → logprob: -0.05825599282979965
    2. '_token' → logprob: -2.933255910873413
    3. '(' → logprob: -5.933256149291992
    4. '_space' → logprob: -7.808256149291992
    5. '_word' → logprob: -9.183256149291992
    6. '_:' → logprob: -9.683256149291992
    7. 'Token' → logprob: -10.183256149291992
    8. '_(' → logprob: -10.558256149291992
    9. '_line' → logprob: -11.308256149291992
    10. 'space' → logprob: -11.433256149291992

Token 6: '():' (ID: 9442)
  Prédit: 'ing'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'ing' → logprob: -0.0032978474628180265
    2. '(' → logprob: -5.878297805786133
    3. '```' → logprob: -8.878297805786133
    4. '_ing' → logprob: -9.003297805786133
    5. '_' → logprob: -9.253297805786133
    6. '():' → logprob: -10.753297805786133
    7. ':' → logprob: -11.003297805786133
    8. '-ing' → logprob: -11.128297805786133
    9. 'eam' → logprob: -11.378297805786133
    10. '_token' → logprob: -11.378297805786133

Token 7: ' return' (ID: 622)
  Prédit: ' return'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' return' → logprob: -0.47740620374679565
    2. '   ' → logprob: -1.4774062633514404
    3. ' 
' → logprob: -2.8524062633514404
    4. '    
' → logprob: -3.3524062633514404
    5. '    ' → logprob: -3.9774062633514404
    6. ' ' → logprob: -4.602406024932861
    7. '<|end|>' → logprob: -4.852406024932861
    8. '\' → logprob: -5.102406024932861
    9. '\n' → logprob: -5.602406024932861
    10. 'return' → logprob: -5.727406024932861

Token 8: ' sys' (ID: 12228)
  Prédit: ' sys'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' sys' → logprob: -0.10779935866594315
    2. ' ' → logprob: -2.8577992916107178
    3. ' input' → logprob: -3.4827992916107178
    4. 'sys' → logprob: -4.857799530029297
    5. '"' → logprob: -6.107799530029297
    6. 'input' → logprob: -6.357799530029297
    7. ' "' → logprob: -7.357799530029297
    8. ''' → logprob: -7.357799530029297
    9. '  ' → logprob: -7.982799530029297
    10. ' '' → logprob: -8.232799530029297

Token 9: '.stdin' (ID: 93480)
  Prédit: '.'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '.' → logprob: -0.828888475894928
    2. '.stdin' → logprob: -1.2038884162902832
    3. '.stdout' → logprob: -1.4538884162902832
    4. '.exit' → logprob: -4.328888416290283
    5. '.argv' → logprob: -4.578888416290283
    6. '.readline' → logprob: -6.078888416290283
    7. '.next' → logprob: -6.328888416290283
    8. '.stderr' → logprob: -7.703888416290283
    9. '.version' → logprob: -8.203888893127441
    10. '.std' → logprob: -8.328888893127441

Token 10: '.readline' (ID: 74673)
  Prédit: '.readline'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '.readline' → logprob: -0.0029804371297359467
    2. '.read' → logprob: -6.0029802322387695
    3. '.' → logprob: -7.6279802322387695
    4. 'read' → logprob: -11.25298023223877
    5. '.readlines' → logprob: -12.62798023223877
    6. '.Read' → logprob: -13.62798023223877
    7. ' readline' → logprob: -15.25298023223877
    8. '_read' → logprob: -17.002981185913086
    9. '.write' → logprob: -17.127981185913086
    10. '.buffer' → logprob: -17.252981185913086

Token 11: '().' (ID: 1454)
  Prédit: '()'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '()' → logprob: -0.5071074962615967
    2. '().' → logprob: -1.0071074962615967
    3. '(' → logprob: -3.6321074962615967
    4. ' ()' → logprob: -5.382107734680176
    5. ' ' → logprob: -7.882107734680176
    6. '.' → logprob: -8.007107734680176
    7. ' ().' → logprob: -8.382107734680176
    8. '()(' → logprob: -9.257107734680176
    9. ' (' → logprob: -9.757107734680176
    10. ' .' → logprob: -9.882107734680176

Token 12: 'strip' (ID: 23905)
  Prédit: 'strip'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'strip' → logprob: -0.011049000546336174
    2. 'rstrip' → logprob: -4.511048793792725
    3. ' strip' → logprob: -14.386049270629883
    4. '_strip' → logprob: -15.261049270629883
    5. 'read' → logprob: -16.636049270629883
    6. 'replace' → logprob: -17.011049270629883
    7. 'decode' → logprob: -17.511049270629883
    8. '```' → logprob: -17.636049270629883
    9. '-strip' → logprob: -17.761049270629883
    10. 'startswith' → logprob: -18.011049270629883

Token 13: '()
' (ID: 1234)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(' → logprob: -0.34933045506477356
    2. '()' → logprob: -1.2243304252624512
    3. '(
' → logprob: -8.09933090209961
    4. '()
' → logprob: -9.22433090209961
    5. '\n' → logprob: -9.72433090209961
    6. ' ' → logprob: -9.72433090209961
    7. '\' → logprob: -10.09933090209961
    8. ')' → logprob: -10.47433090209961
    9. '.' → logprob: -10.47433090209961
    10. '(

' → logprob: -10.47433090209961

Token 14: 'def' (ID: 1314)
  Prédit: 'def'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'def' → logprob: -0.5872097015380859
    2. '

' → logprob: -1.712209701538086
    3. '\n' → logprob: -2.212209701538086
    4. '\' → logprob: -2.962209701538086
    5. '
' → logprob: -3.212209701538086
    6. '(' → logprob: -4.212209701538086
    7. '```' → logprob: -5.337209701538086
    8. '()' → logprob: -5.587209701538086
    9. '<|end|>' → logprob: -5.712209701538086
    10. '#' → logprob: -5.712209701538086

Token 15: ' next' (ID: 2613)
  Prédit: ' main'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' main' → logprob: -0.06972065567970276
    2. ' next' → logprob: -2.81972074508667
    3. 'main' → logprob: -5.44472074508667
    4. 'next' → logprob: -6.19472074508667
    5. ' input' → logprob: -8.319720268249512
    6. ' ' → logprob: -8.319720268249512
    7. ' split' → logprob: -9.069720268249512
    8. ' int' → logprob: -9.194720268249512
    9. ' solve' → logprob: -9.569720268249512
    10. '_' → logprob: -9.694720268249512

Token 16: '_int' (ID: 12285)
  Prédit: '_str'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_str' → logprob: -0.9814010858535767
    2. '_token' → logprob: -0.9814010858535767
    3. '_' → logprob: -1.7314010858535767
    4. '_int' → logprob: -2.731400966644287
    5. '_word' → logprob: -5.106400966644287
    6. '_char' → logprob: -7.481400966644287
    7. '_item' → logprob: -7.731400966644287
    8. '_line' → logprob: -8.481401443481445
    9. '_string' → logprob: -8.856401443481445
    10. '_val' → logprob: -9.106401443481445

Token 17: '():' (ID: 9442)
  Prédit: '():'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '():' → logprob: -0.16098633408546448
    2. '()' → logprob: -1.910986304283142
    3. ' ()' → logprob: -8.785985946655273
    4. ']()' → logprob: -9.035985946655273
    5. '`()' → logprob: -9.410985946655273
    6. '()]' → logprob: -9.660985946655273
    7. '>()' → logprob: -9.785985946655273
    8. '()>' → logprob: -9.785985946655273
    9. ' ():' → logprob: -9.910985946655273
    10. '()*' → logprob: -10.035985946655273

Token 18: ' return' (ID: 622)
  Prédit: ' return'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' return' → logprob: -0.08502157777547836
    2. ' ' → logprob: -3.085021495819092
    3. ' int' → logprob: -3.335021495819092
    4. 'return' → logprob: -9.33502197265625
    5. 'int' → logprob: -10.33502197265625
    6. ' 
' → logprob: -11.08502197265625
    7. ' ' → logprob: -11.21002197265625
    8. '    ' → logprob: -11.46002197265625
    9. '=int' → logprob: -14.46002197265625
    10. ' ‌' → logprob: -14.46002197265625

Token 19: ' int' (ID: 677)
  Prédit: ' int'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' int' → logprob: -0.009777456521987915
    2. 'int' → logprob: -4.634777545928955
    3. ' ' → logprob: -10.884777069091797
    4. '(int' → logprob: -13.259777069091797
    5. '  ' → logprob: -14.759777069091797
    6. '	int' → logprob: -15.759777069091797
    7. '   ' → logprob: -15.884777069091797
    8. ' in' → logprob: -16.134777069091797
    9. '[int' → logprob: -16.134777069091797
    10. '=int' → logprob: -16.759777069091797

Token 20: '(next' (ID: 28757)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(' → logprob: -0.02338116057217121
    2. '(sys' → logprob: -3.773381233215332
    3. '(next' → logprob: -9.773381233215332
    4. '('' → logprob: -10.523381233215332
    5. ' (' → logprob: -11.273381233215332
    6. '("("' → logprob: -11.398381233215332
    7. '(
' → logprob: -11.648381233215332
    8. '(ord' → logprob: -12.773381233215332
    9. '(

' → logprob: -12.898381233215332
    10. '(open' → logprob: -13.023381233215332

Token 21: '_str' (ID: 6182)
  Prédit: '_str'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_str' → logprob: -0.0006489329971373081
    2. '_int' → logprob: -7.6256489753723145
    3. '_' → logprob: -9.000648498535156
    4. '_token' → logprob: -10.875648498535156
    5. '_line' → logprob: -11.625648498535156
    6. '_char' → logprob: -12.000648498535156
    7. ' _' → logprob: -13.625648498535156
    8. '_word' → logprob: -15.125648498535156
    9. '_num' → logprob: -15.500648498535156
    10. '_val' → logprob: -15.500648498535156

Token 22: '())
' (ID: 4574)
  Prédit: '())'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '())' → logprob: -0.0009287334396503866
    2. '()' → logprob: -7.00092887878418
    3. '()))' → logprob: -11.62592887878418
    4. '())
' → logprob: -12.37592887878418
    5. ' ())' → logprob: -12.87592887878418
    6. ')' → logprob: -14.75092887878418
    7. '()
' → logprob: -15.25092887878418
    8. '();)' → logprob: -15.37592887878418
    9. '()]' → logprob: -15.87592887878418
    10. '())

' → logprob: -15.87592887878418

Token 23: 'def' (ID: 1314)
  Prédit: '
'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '
' → logprob: -0.7448630332946777
    2. '

' → logprob: -0.7448630332946777
    3. 'def' → logprob: -3.1198630332946777
    4. '\n' → logprob: -5.994863033294678
    5. '<|end|>' → logprob: -6.994863033294678
    6. '```' → logprob: -7.119863033294678
    7. '' → logprob: -7.994863033294678
    8. '#' → logprob: -7.994863033294678
    9. '\' → logprob: -8.119863510131836
    10. '
' → logprob: -8.494863510131836

Token 24: ' next' (ID: 2613)
  Prédit: ' next'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' next' → logprob: -0.018353035673499107
    2. 'next' → logprob: -4.01835298538208
    3. ' main' → logprob: -8.768353462219238
    4. ' ' → logprob: -10.893353462219238
    5. '_next' → logprob: -11.643353462219238
    6. 's' → logprob: -12.518353462219238
    7. '	next' → logprob: -12.643353462219238
    8. '_' → logprob: -12.893353462219238
    9. '(next' → logprob: -13.518353462219238
    10. 'n' → logprob: -13.643353462219238

Token 25: '_list' (ID: 4162)
  Prédit: '_int'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_int' → logprob: -0.1041957288980484
    2. '_float' → logprob: -2.8541958332061768
    3. '_str' → logprob: -3.3541958332061768
    4. '_' → logprob: -5.104195594787598
    5. '_list' → logprob: -9.229195594787598
    6. '_uint' → logprob: -9.354195594787598
    7. '_token' → logprob: -9.604195594787598
    8. '_line' → logprob: -10.729195594787598
    9. '_f' → logprob: -10.854195594787598
    10. '_long' → logprob: -11.854195594787598

Token 26: '():' (ID: 9442)
  Prédit: '()'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '()' → logprob: -0.07154768705368042
    2. '():' → logprob: -2.696547746658325
    3. '()]' → logprob: -7.946547508239746
    4. '`()' → logprob: -8.071547508239746
    5. ' ()' → logprob: -8.446547508239746
    6. '().' → logprob: -9.196547508239746
    7. '(' → logprob: -9.446547508239746
    8. '()>' → logprob: -9.446547508239746
    9. 'def' → logprob: -10.196547508239746
    10. '()<<' → logprob: -10.321547508239746

Token 27: ' return' (ID: 622)
  Prédit: ' return'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' return' → logprob: -0.2871905267238617
    2. '()' → logprob: -2.1621904373168945
    3. 'return' → logprob: -2.7871904373168945
    4. ' ()' → logprob: -3.0371904373168945
    5. '[]' → logprob: -4.7871904373168945
    6. ' ' → logprob: -5.2871904373168945
    7. ' []' → logprob: -5.2871904373168945
    8. ' =' → logprob: -6.0371904373168945
    9. '():' → logprob: -6.2871904373168945
    10. ')' → logprob: -7.7871904373168945

Token 28: ' list' (ID: 1562)
  Prédit: 'list'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'list' → logprob: -0.15201805531978607
    2. ' list' → logprob: -2.0270180702209473
    3. 'sys' → logprob: -4.902018070220947
    4. ' sys' → logprob: -7.152018070220947
    5. '[list' → logprob: -7.902018070220947
    6. 'next' → logprob: -8.277017593383789
    7. '[' → logprob: -8.527017593383789
    8. '[next' → logprob: -8.902017593383789
    9. 'map' → logprob: -10.152017593383789
    10. ' next' → logprob: -10.277017593383789

Token 29: '(map' (ID: 16946)
  Prédit: '(map'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(map' → logprob: -0.0025493851862847805
    2. '(' → logprob: -6.002549171447754
    3. '()' → logprob: -10.252549171447754
    4. '(int' → logprob: -11.252549171447754
    5. '(next' → logprob: -11.377549171447754
    6. '(range' → logprob: -12.252549171447754
    7. '(eval' → logprob: -12.877549171447754
    8. 'map' → logprob: -13.752549171447754
    9. ' map' → logprob: -13.877549171447754
    10. '(input' → logprob: -14.002549171447754

Token 30: '(int' (ID: 2742)
  Prédit: '(int'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(int' → logprob: -0.0006296366918832064
    2. '(' → logprob: -7.750629425048828
    3. '(str' → logprob: -8.875629425048828
    4. 'int' → logprob: -10.375629425048828
    5. '<int' → logprob: -11.000629425048828
    6. ')' → logprob: -13.000629425048828
    7. ',int' → logprob: -13.125629425048828
    8. '=int' → logprob: -13.125629425048828
    9. 'str' → logprob: -13.250629425048828
    10. ' int' → logprob: -13.625629425048828

Token 31: ',' (ID: 11)
  Prédit: ','
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ',' → logprob: -0.19829526543617249
    2. '(next' → logprob: -2.3232953548431396
    3. '(' → logprob: -2.6982953548431396
    4. ',next' → logprob: -4.5732951164245605
    5. '(sys' → logprob: -5.9482951164245605
    6. ' ,' → logprob: -7.4482951164245605
    7. ',(' → logprob: -8.073295593261719
    8. ')' → logprob: -8.823295593261719
    9. '))' → logprob: -8.823295593261719
    10. ' (' → logprob: -8.948295593261719

Token 32: ' next' (ID: 2613)
  Prédit: 'next'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'next' → logprob: -0.0206479262560606
    2. ' next' → logprob: -3.8956480026245117
    3. '(next' → logprob: -9.520648002624512
    4. 'sys' → logprob: -11.145648002624512
    5. 'input' → logprob: -11.270648002624512
    6. '	next' → logprob: -13.270648002624512
    7. ')' → logprob: -13.895648002624512
    8. ',next' → logprob: -14.395648002624512
    9. '[next' → logprob: -14.520648002624512
    10. ' sys' → logprob: -14.770648002624512

Token 33: '_str' (ID: 6182)
  Prédit: '_str'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_str' → logprob: -0.014757092110812664
    2. '_' → logprob: -4.26475715637207
    3. '_list' → logprob: -7.51475715637207
    4. 'str' → logprob: -11.01475715637207
    5. '_line' → logprob: -11.13975715637207
    6. '_token' → logprob: -12.88975715637207
    7. '_)' → logprob: -13.01475715637207
    8. '_(' → logprob: -13.26475715637207
    9. '```' → logprob: -13.26475715637207
    10. '_string' → logprob: -13.51475715637207

Token 34: '().' (ID: 1454)
  Prédit: '().'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '().' → logprob: -2.057743949990254e-05
    2. '()' → logprob: -11.250020980834961
    3. '()))' → logprob: -12.375020980834961
    4. ' ().' → logprob: -13.750020980834961
    5. '))' → logprob: -14.125020980834961
    6. ')' → logprob: -14.750020980834961
    7. '())))' → logprob: -14.750020980834961
    8. '()
' → logprob: -15.875020980834961
    9. ')))' → logprob: -16.00002098083496
    10. ' ' → logprob: -16.37502098083496

Token 35: 'split' (ID: 13627)
  Prédit: 'split'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'split' → logprob: -0.0009227732080034912
    2. 'strip' → logprob: -7.000922679901123
    3. ' split' → logprob: -11.750923156738281
    4. '(split' → logprob: -12.625923156738281
    5. 'rstrip' → logprob: -16.25092315673828
    6. '.split' → logprob: -17.37592315673828
    7. 'spl' → logprob: -18.37592315673828
    8. ' strip' → logprob: -18.50092315673828
    9. ' ' → logprob: -18.62592315673828
    10. '().' → logprob: -19.62592315673828

Token 36: '()))
' (ID: 24521)
  Prédit: '()))'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '()))' → logprob: -0.01666412502527237
    2. '()' → logprob: -5.016664028167725
    3. '())' → logprob: -5.266664028167725
    4. '))' → logprob: -5.391664028167725
    5. '(' → logprob: -9.391664505004883
    6. '())))' → logprob: -10.266664505004883
    7. '()))
' → logprob: -10.391664505004883
    8. ')' → logprob: -10.891664505004883
    9. '()));' → logprob: -11.641664505004883
    10. ')))' → logprob: -13.516664505004883

Token 37: 'get' (ID: 522)
  Prédit: '

'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '

' → logprob: -0.6244726181030273
    2. '
' → logprob: -0.9994726181030273
    3. 'def' → logprob: -3.4994726181030273
    4. 'n' → logprob: -4.374472618103027
    5. '\n' → logprob: -4.374472618103027
    6. '' → logprob: -4.499472618103027
    7. '#' → logprob: -4.874472618103027
    8. '\' → logprob: -5.249472618103027
    9. 'd' → logprob: -5.499472618103027
    10. '```' → logprob: -5.749472618103027

Token 38: '_all' (ID: 13305)
  Prédit: '_'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '_' → logprob: -0.23724184930324554
    2. 'attr' → logprob: -1.7372418642044067
    3. '_list' → logprob: -4.112241744995117
    4. '_str' → logprob: -4.737241744995117
    5. '_line' → logprob: -5.612241744995117
    6. '_attr' → logprob: -6.112241744995117
    7. '_input' → logprob: -6.362241744995117
    8. '_int' → logprob: -7.862241744995117
    9. '_next' → logprob: -8.487241744995117
    10. '_user' → logprob: -8.862241744995117

Token 39: ' =' (ID: 314)
  Prédit: '()'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '()' → logprob: -0.18645910918712616
    2. '_' → logprob: -2.6864590644836426
    3. '_data' → logprob: -3.0614590644836426
    4. '_items' → logprob: -4.186459064483643
    5. '_list' → logprob: -4.561459064483643
    6. '_all' → logprob: -4.811459064483643
    7. '_input' → logprob: -5.186459064483643
    8. '_lines' → logprob: -5.936459064483643
    9. '_user' → logprob: -6.936459064483643
    10. '_line' → logprob: -7.061459064483643

Token 40: ' lambda' (ID: 27871)
  Prédit: 'lambda'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'lambda' → logprob: -1.2164171934127808
    2. 'list' → logprob: -1.4664171934127808
    3. '[]' → logprob: -1.5914171934127808
    4. ' lambda' → logprob: -2.4664173126220703
    5. ' list' → logprob: -3.4664173126220703
    6. 'sys' → logprob: -3.5914173126220703
    7. ' []' → logprob: -3.7164173126220703
    8. 'next' → logprob: -3.9664173126220703
    9. '(lambda' → logprob: -4.09141731262207
    10. ' sys' → logprob: -4.09141731262207

Token 41: ':' (ID: 25)
  Prédit: ' list'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' list' → logprob: -0.5954078435897827
    2. 'list' → logprob: -1.5954078435897827
    3. ' sys' → logprob: -2.0954079627990723
    4. ' lambda' → logprob: -3.7204079627990723
    5. ' str' → logprob: -3.8454079627990723
    6. 'lambda' → logprob: -4.095407962799072
    7. 'str' → logprob: -4.470407962799072
    8. 'sys' → logprob: -5.470407962799072
    9. ' s' → logprob: -5.470407962799072
    10. 'range' → logprob: -5.595407962799072

Token 42: ' list' (ID: 1562)
  Prédit: 'sys'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'sys' → logprob: -0.41579470038414
    2. ' sys' → logprob: -1.4157947301864624
    3. 'list' → logprob: -2.665794610977173
    4. ' list' → logprob: -4.165794849395752
    5. '[' → logprob: -5.665794849395752
    6. 'next' → logprob: -5.915794849395752
    7. ' [' → logprob: -6.040794849395752
    8. '[next' → logprob: -6.540794849395752
    9. ' next' → logprob: -7.165794849395752
    10. '[]' → logprob: -8.165794372558594

Token 43: '(map' (ID: 16946)
  Prédit: '(map'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(map' → logprob: -0.15773048996925354
    2. '(iter' → logprob: -2.6577305793762207
    3. '(sys' → logprob: -2.6577305793762207
    4. '(' → logprob: -5.782730579376221
    5. '(input' → logprob: -7.032730579376221
    6. '(eval' → logprob: -7.532730579376221
    7. '(get' → logprob: -7.657730579376221
    8. '(range' → logprob: -7.907730579376221
    9. '(__' → logprob: -9.282730102539062
    10. '(int' → logprob: -9.407730102539062

Token 44: '(int' (ID: 2742)
  Prédit: '(int'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(int' → logprob: -0.001526644453406334
    2. '(str' → logprob: -6.876526832580566
    3. '(' → logprob: -7.751526832580566
    4. 'int' → logprob: -10.376526832580566
    5. '(lambda' → logprob: -11.251526832580566
    6. ' int' → logprob: -12.001526832580566
    7. ',int' → logprob: -12.876526832580566
    8. ' (' → logprob: -13.126526832580566
    9. '<int' → logprob: -13.376526832580566
    10. '(eval' → logprob: -13.501526832580566

Token 45: ',' (ID: 11)
  Prédit: '(sys'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(sys' → logprob: -0.2617569863796234
    2. ',' → logprob: -1.5117570161819458
    3. '(' → logprob: -5.136756896972656
    4. '(next' → logprob: -6.011756896972656
    5. ',(' → logprob: -7.761756896972656
    6. ',next' → logprob: -8.011756896972656
    7. '=sys' → logprob: -9.136756896972656
    8. 'sys' → logprob: -9.261756896972656
    9. ' ,' → logprob: -9.261756896972656
    10. ',input' → logprob: -9.636756896972656

Token 46: ' sys' (ID: 12228)
  Prédit: 'sys'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'sys' → logprob: -0.2531435191631317
    2. 'next' → logprob: -2.253143548965454
    3. ' sys' → logprob: -2.378143548965454
    4. ' next' → logprob: -3.878143548965454
    5. 'input' → logprob: -5.503143310546875
    6. ' input' → logprob: -7.253143310546875
    7. '(sys' → logprob: -8.503143310546875
    8. '	sys' → logprob: -10.503143310546875
    9. '=sys' → logprob: -10.503143310546875
    10. ' ' → logprob: -10.628143310546875

Token 47: '.stdin' (ID: 93480)
  Prédit: '.stdin'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '.stdin' → logprob: -1.0325924449716695e-05
    2. 'stdin' → logprob: -11.87501049041748
    3. '.argv' → logprob: -13.00001049041748
    4. '.stdout' → logprob: -14.75001049041748
    5. '.' → logprob: -15.12501049041748
    6. '.std' → logprob: -15.12501049041748
    7. '```' → logprob: -17.500009536743164
    8. '.st' → logprob: -17.875009536743164
    9. ' stdin' → logprob: -18.125009536743164
    10. ' .' → logprob: -18.625009536743164

Token 48: '.readlines' (ID: 92237)
  Prédit: '.readline'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '.readline' → logprob: -0.09094876050949097
    2. '.read' → logprob: -2.4659488201141357
    3. '.readlines' → logprob: -6.340948581695557
    4. '.buffer' → logprob: -8.590949058532715
    5. '.' → logprob: -10.215949058532715
    6. '.stdin' → logprob: -11.090949058532715
    7. ' .' → logprob: -13.465949058532715
    8. '().' → logprob: -13.590949058532715
    9. ').' → logprob: -13.965949058532715
    10. '.get' → logprob: -14.215949058532715

Token 49: '()))

' (ID: 125972)
  Prédit: '()))'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '()))' → logprob: -0.026907406747341156
    2. '()' → logprob: -3.651907444000244
    3. '))' → logprob: -7.776907444000244
    4. '()))
' → logprob: -9.776906967163086
    5. '())' → logprob: -9.901906967163086
    6. '())))' → logprob: -10.401906967163086
    7. '()[' → logprob: -11.026906967163086
    8. '()));' → logprob: -11.276906967163086
    9. '())).' → logprob: -11.776906967163086
    10. '().' → logprob: -12.526906967163086

Token 50: 'def' (ID: 1314)
  Prédit: '
'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '
' → logprob: -0.2806476950645447
    2. '

' → logprob: -2.1556477546691895
    3. 'def' → logprob: -3.0306477546691895
    4. '\n' → logprob: -3.0306477546691895
    5. '\' → logprob: -5.1556477546691895
    6. '(' → logprob: -5.4056477546691895
    7. '#' → logprob: -5.4056477546691895
    8. '<|end|>' → logprob: -5.7806477546691895
    9. '```' → logprob: -6.1556477546691895
    10. '' → logprob: -6.2806477546691895

Token 51: ' core' (ID: 10089)
  Prédit: ' main'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' main' → logprob: -0.01423320360481739
    2. ' next' → logprob: -4.389233112335205
    3. ' solve' → logprob: -7.139233112335205
    4. ' process' → logprob: -8.264233589172363
    5. ' factorial' → logprob: -9.264233589172363
    6. ' parse' → logprob: -9.514233589172363
    7. '_' → logprob: -9.764233589172363
    8. ' calculate' → logprob: -10.139233589172363
    9. ' solution' → logprob: -10.139233589172363
    10. ' read' → logprob: -10.264233589172363

Token 52: '():
' (ID: 8595)
  Prédit: '():'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '():' → logprob: -0.2591787576675415
    2. '(' → logprob: -2.134178638458252
    3. '_function' → logprob: -3.134178638458252
    4. '_' → logprob: -4.009178638458252
    5. '_logic' → logprob: -4.134178638458252
    6. '_func' → logprob: -4.634178638458252
    7. '()' → logprob: -5.134178638458252
    8. '_core' → logprob: -5.884178638458252
    9. '(_' → logprob: -6.134178638458252
    10. '(args' → logprob: -6.259178638458252

Token 53: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.008809087797999382
    2. 'n' → logprob: -5.6338090896606445
    3. '    ' → logprob: -6.1338090896606445
    4. ' pass' → logprob: -7.1338090896606445
    5. ' n' → logprob: -7.7588090896606445
    6. 'pass' → logprob: -7.8838090896606445
    7. 'input' → logprob: -7.8838090896606445
    8. '    
' → logprob: -8.383809089660645
    9. 'a' → logprob: -9.008809089660645
    10. 'data' → logprob: -9.133809089660645

Token 54: ' n' (ID: 297)
  Prédit: 'n'
  Correct (stricte): False
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'n' (adapté à ' n') → logprob: -0.04834478348493576
    2. ' n' → logprob: -3.673344850540161
    3. '   ' → logprob: -5.298344612121582
    4. 'N' → logprob: -5.423344612121582
    5. 'pass' → logprob: -5.923344612121582
    6. 'arr' → logprob: -6.048344612121582
    7. 'a' → logprob: -6.548344612121582
    8. 'nums' → logprob: -6.548344612121582
    9. 'data' → logprob: -7.423344612121582
    10. ' pass' → logprob: -7.423344612121582

Token 55: '_x' (ID: 7054)
  Prédit: ' ='
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' =' → logprob: -0.03403337672352791
    2. '=' → logprob: -3.4090332984924316
    3. ' ' → logprob: -8.65903377532959
    4. ',' → logprob: -9.28403377532959
    5. '=int' → logprob: -9.53403377532959
    6. '  ' → logprob: -11.15903377532959
    7. ')' → logprob: -11.15903377532959
    8. '<|end|>' → logprob: -12.40903377532959
    9. '.' → logprob: -12.53403377532959
    10. ' =)' → logprob: -12.90903377532959

Token 56: ' =' (ID: 314)
  Prédit: ','
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ',' → logprob: -0.2819487750530243
    2. ' =' → logprob: -1.7819488048553467
    3. '=' → logprob: -2.9069488048553467
    4. 'y' → logprob: -4.531948566436768
    5. ' ,' → logprob: -5.906948566436768
    6. ',n' → logprob: -5.906948566436768
    7. '_,' → logprob: -6.531948566436768
    8. ' ' → logprob: -7.156948566436768
    9. '_' → logprob: -7.156948566436768
    10. ',_' → logprob: -7.281948566436768

Token 57: ' next' (ID: 2613)
  Prédit: 'next'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'next' → logprob: -0.2815084457397461
    2. ' next' → logprob: -1.406508445739746
    3. 'list' → logprob: -8.656508445739746
    4. ' ' → logprob: -9.906508445739746
    5. ' list' → logprob: -9.906508445739746
    6. 'int' → logprob: -11.281508445739746
    7. 'n' → logprob: -11.406508445739746
    8. 'input' → logprob: -11.656508445739746
    9. '(next' → logprob: -11.781508445739746
    10. 'tuple' → logprob: -11.781508445739746

Token 58: '_list' (ID: 4162)
  Prédit: '_str'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_str' → logprob: -0.6977803707122803
    2. '_int' → logprob: -0.6977803707122803
    3. '_list' → logprob: -5.697780609130859
    4. '_' → logprob: -6.697780609130859
    5. '_token' → logprob: -12.07278060913086
    6. '_x' → logprob: -12.07278060913086
    7. 'int' → logprob: -12.32278060913086
    8. '_line' → logprob: -12.32278060913086
    9. '_val' → logprob: -13.44778060913086
    10. '_vec' → logprob: -13.57278060913086

Token 59: '()
' (ID: 1234)
  Prédit: '()'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '()' → logprob: -8.537868779967539e-06
    2. '())' → logprob: -12.375008583068848
    3. '()
' → logprob: -12.625008583068848
    4. '()]' → logprob: -15.250008583068848
    5. '()`' → logprob: -15.625008583068848
    6. '()

' → logprob: -16.12500762939453
    7. ' ()' → logprob: -16.25000762939453
    8. '(' → logprob: -16.25000762939453
    9. ')' → logprob: -16.37500762939453
    10. '()[' → logprob: -17.12500762939453

Token 60: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.3575587868690491
    2. '()' → logprob: -2.2325587272644043
    3. '[' → logprob: -3.2325587272644043
    4. '<|end|>' → logprob: -3.2325587272644043
    5. '
' → logprob: -3.3575587272644043
    6. '(n' → logprob: -3.4825587272644043
    7. '[n' → logprob: -4.107558727264404
    8. ')' → logprob: -4.982558727264404
    9. '    
' → logprob: -5.482558727264404
    10. '[]' → logprob: -6.107558727264404

Token 61: ' n' (ID: 297)
  Prédit: ' n'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' n' → logprob: -0.39492639899253845
    2. 'n' (adapté à ' n') → logprob: -1.3949264287948608
    3. 'x' → logprob: -3.1449263095855713
    4. ' x' → logprob: -3.3949263095855713
    5. 'a' → logprob: -7.51992654800415
    6. '   ' → logprob: -7.76992654800415
    7. ' a' → logprob: -8.519926071166992
    8. '[n' → logprob: -9.394926071166992
    9. 'print' → logprob: -10.019926071166992
    10. '_n' → logprob: -10.082426071166992

Token 62: ' =' (ID: 314)
  Prédit: ','
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ',' → logprob: -0.639859676361084
    2. '_x' → logprob: -0.889859676361084
    3. '_' → logprob: -3.139859676361084
    4. '_,' → logprob: -4.889859676361084
    5. ',_' → logprob: -5.889859676361084
    6. ' =' → logprob: -6.014859676361084
    7. ',x' → logprob: -6.139859676361084
    8. ',n' → logprob: -7.014859676361084
    9. '=' → logprob: -7.139859676361084
    10. 'x' → logprob: -7.514859676361084

Token 63: ' n' (ID: 297)
  Prédit: ' n'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' n' → logprob: -0.01951364055275917
    2. 'n' → logprob: -4.0195136070251465
    3. '_n' → logprob: -6.6445136070251465
    4. '_x' → logprob: -10.269514083862305
    5. '	n' → logprob: -11.269514083862305
    6. '_' → logprob: -11.644514083862305
    7. 'int' → logprob: -13.269514083862305
    8. ' x' → logprob: -14.144514083862305
    9. ' ' → logprob: -14.394514083862305
    10. ' _' → logprob: -14.394514083862305

Token 64: '_x' (ID: 7054)
  Prédit: '_x'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_x' → logprob: -0.00012928384239785373
    2. '_' → logprob: -9.250129699707031
    3. '[' → logprob: -11.125129699707031
    4. '_[' → logprob: -12.250129699707031
    5. ' _' → logprob: -12.500129699707031
    6. 'x' → logprob: -12.625129699707031
    7. '```' → logprob: -13.250129699707031
    8. '[_' → logprob: -13.750129699707031
    9. '_
' → logprob: -13.875129699707031
    10. '_n' → logprob: -14.625129699707031

Token 65: '[' (ID: 58)
  Prédit: '['
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '[' → logprob: -1.8624639324116288e-06
    2. ' [' → logprob: -13.375001907348633
    3. '```' → logprob: -15.375001907348633
    4. '0' → logprob: -17.000001907348633
    5. '[
' → logprob: -17.750001907348633
    6. ' ' → logprob: -17.875001907348633
    7. '   ' → logprob: -18.125001907348633
    8. '\[' → logprob: -18.250001907348633
    9. '[-' → logprob: -19.000001907348633
    10. '][' → logprob: -19.125001907348633

Token 66: '0' (ID: 15)
  Prédit: '0'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '0' → logprob: -4.320199877838604e-07
    2. ' ' → logprob: -14.875
    3. '[' → logprob: -18.75
    4. '   ' → logprob: -19.5
    5. '۰' → logprob: -20.25
    6. '０' → logprob: -20.375
    7. '1' → logprob: -20.875
    8. ']' → logprob: -20.875
    9. '```' → logprob: -21.0
    10. '       ' → logprob: -22.125

Token 67: '];' (ID: 11464)
  Prédit: ']'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ']' → logprob: -0.01121887844055891
    2. ']
' → logprob: -4.511219024658203
    3. ' ]' → logprob: -8.886219024658203
    4. '<|end|>' → logprob: -12.011219024658203
    5. ']

' → logprob: -12.136219024658203
    6. '];' → logprob: -12.136219024658203
    7. ')' → logprob: -12.636219024658203
    8. ' ]
' → logprob: -12.761219024658203
    9. '],' → logprob: -13.011219024658203
    10. ']
' → logprob: -13.136219024658203

Token 68: ' x' (ID: 1215)
  Prédit: 'x'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'x' → logprob: -0.20344601571559906
    2. ' x' → logprob: -1.7034460306167603
    3. '_' → logprob: -7.203445911407471
    4. '_x' → logprob: -7.578445911407471
    5. '   ' → logprob: -7.703445911407471
    6. ' ' → logprob: -8.578446388244629
    7. '	x' → logprob: -9.953446388244629
    8. 'n' → logprob: -10.578446388244629
    9. ' _' → logprob: -11.203446388244629
    10. ' ' → logprob: -11.578446388244629

Token 69: ' =' (ID: 314)
  Prédit: ' ='
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' =' → logprob: -0.08894884586334229
    2. '=' → logprob: -2.4639487266540527
    3. ' ' → logprob: -11.963949203491211
    4. '=n' → logprob: -13.838949203491211
    5. ',' → logprob: -14.088949203491211
    6. '=int' → logprob: -14.213949203491211
    7. '_' → logprob: -15.713949203491211
    8. '  ' → logprob: -16.33894920349121
    9. '=len' → logprob: -16.83894920349121
    10. ' =)' → logprob: -16.96394920349121

Token 70: ' n' (ID: 297)
  Prédit: ' n'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' n' → logprob: -0.0380435548722744
    2. 'n' → logprob: -3.28804349899292
    3. 'x' → logprob: -14.038043975830078
    4. '	n' → logprob: -14.663043975830078
    5. ' ' → logprob: -15.288043975830078
    6. '(n' → logprob: -15.663043975830078
    7. ' x' → logprob: -15.788043975830078
    8. ' ' → logprob: -16.038043975830078
    9. '_n' → logprob: -16.163043975830078
    10. '[n' → logprob: -17.038043975830078

Token 71: '_x' (ID: 7054)
  Prédit: '_x'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_x' → logprob: -0.00010306637705070898
    2. '_' → logprob: -9.875102996826172
    3. '[' → logprob: -10.625102996826172
    4. 'x' → logprob: -11.625102996826172
    5. '-' → logprob: -12.625102996826172
    6. '_y' → logprob: -12.875102996826172
    7. '_[' → logprob: -13.000102996826172
    8. '   ' → logprob: -13.375102996826172
    9. ' _' → logprob: -13.375102996826172
    10. ' ' → logprob: -13.625102996826172

Token 72: '[' (ID: 58)
  Prédit: '['
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '[' → logprob: -0.0005577972042374313
    2. '1' → logprob: -7.500557899475098
    3. '```' → logprob: -13.250557899475098
    4. ' [' → logprob: -13.500557899475098
    5. '[-' → logprob: -15.250557899475098
    6. '   ' → logprob: -15.375557899475098
    7. '[
' → logprob: -15.500557899475098
    8. '\[' → logprob: -15.750557899475098
    9. '][' → logprob: -15.875557899475098
    10. '()[' → logprob: -16.00055694580078

Token 73: '1' (ID: 16)
  Prédit: '1'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '1' → logprob: -6.0391463193809614e-05
    2. ' ' → logprob: -9.750060081481934
    3. ']' → logprob: -13.937560081481934
    4. '   ' → logprob: -14.625060081481934
    5. '2' → logprob: -15.625060081481934
    6. '  ' → logprob: -16.00006103515625
    7. '[' → logprob: -16.68756103515625
    8. '-' → logprob: -16.87506103515625
    9. '0' → logprob: -17.00006103515625
    10. ')' → logprob: -17.12506103515625

Token 74: ']
' (ID: 1592)
  Prédit: ']'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ']' → logprob: -0.0003491705865599215
    2. ' ]' → logprob: -8.750349044799805
    3. ')' → logprob: -9.250349044799805
    4. ']
' → logprob: -10.250349044799805
    5. '+' → logprob: -10.750349044799805
    6. ')]' → logprob: -11.250349044799805
    7. ']+' → logprob: -11.750349044799805
    8. ']

' → logprob: -12.625349044799805
    9. '<|end|>' → logprob: -12.625349044799805
    10. '])' → logprob: -13.250349044799805

Token 75: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.01249551959335804
    2. '<|end|>' → logprob: -5.387495517730713
    3. '    
' → logprob: -5.762495517730713
    4. '
' → logprob: -5.762495517730713
    5. 'tokens' → logprob: -8.762495994567871
    6. ',' → logprob: -9.012495994567871
    7. '<|end|>' → logprob: -9.137495994567871
    8. 's' → logprob: -9.262495994567871
    9. '  ' → logprob: -9.262495994567871
    10. 'data' → logprob: -9.512495994567871

Token 76: ' arr' (ID: 1724)
  Prédit: 'a'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'a' → logprob: -0.23973292112350464
    2. 'arr' (adapté à ' arr') → logprob: -1.9897329807281494
    3. 'A' → logprob: -4.48973274230957
    4. 's' → logprob: -4.98973274230957
    5. 'lst' → logprob: -4.98973274230957
    6. 'h' → logprob: -5.23973274230957
    7. 'nums' → logprob: -5.36473274230957
    8. 'l' → logprob: -5.48973274230957
    9. 'coins' → logprob: -5.86473274230957
    10. 'cards' → logprob: -5.98973274230957

Token 77: ' =' (ID: 314)
  Prédit: ' ='
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' =' → logprob: -0.14267979562282562
    2. '=' → logprob: -2.0176796913146973
    3. ',' → logprob: -13.767680168151855
    4. ' ' → logprob: -14.017680168151855
    5. '<|end|>' → logprob: -14.392680168151855
    6. '=[]' → logprob: -14.767680168151855
    7. '<|end|>' → logprob: -14.767680168151855
    8. '[' → logprob: -15.517680168151855
    9. '  ' → logprob: -15.517680168151855
    10. ')' → logprob: -15.892680168151855

Token 78: ' []
' (ID: 8911)
  Prédit: ' next'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' next' → logprob: -0.160243421792984
    2. 'next' → logprob: -1.9102433919906616
    3. '[next' → logprob: -11.785243034362793
    4. ' get' → logprob: -12.910243034362793
    5. ' list' → logprob: -13.285243034362793
    6. '	next' → logprob: -13.410243034362793
    7. '(next' → logprob: -13.535243034362793
    8. 'get' → logprob: -13.785243034362793
    9. 'list' → logprob: -13.910243034362793
    10. ' ' → logprob: -14.285243034362793

Token 79: '   ' (ID: 271)
  Prédit: ''
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False

Token 80: ' for' (ID: 395)
  Prédit: 'for'
  Correct (stricte): False
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'for' (adapté à ' for') → logprob: -0.0559602715075016
    2. ' for' → logprob: -2.930960178375244
    3. 'arr' → logprob: -7.055960178375244
    4. '   ' → logprob: -8.805960655212402
    5. 'while' → logprob: -10.555960655212402
    6. ' arr' → logprob: -10.680960655212402
    7. '	for' → logprob: -12.805960655212402
    8. ' while' → logprob: -13.180960655212402
    9. 'f' → logprob: -13.680960655212402
    10. 'a' → logprob: -13.680960655212402

Token 81: ' v' (ID: 323)
  Prédit: ' _'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' _' → logprob: -0.5803036689758301
    2. '_' → logprob: -0.8303036689758301
    3. ' i' → logprob: -5.45530366897583
    4. ' ' → logprob: -9.705303192138672
    5. '_i' → logprob: -11.330303192138672
    6. 'i' → logprob: -11.955303192138672
    7. ' range' → logprob: -14.330303192138672
    8. ' in' → logprob: -14.330303192138672
    9. ' ' → logprob: -15.955303192138672
    10. '_range' → logprob: -16.455303192138672

Token 82: ' in' (ID: 306)
  Prédit: ' in'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' in' → logprob: -0.011576583608984947
    2. 'in' → logprob: -4.5115766525268555
    3. ' ' → logprob: -7.6365766525268555
    4. 'n' → logprob: -11.886576652526855
    5. '  ' → logprob: -11.886576652526855
    6. 'range' → logprob: -12.136576652526855
    7. '_' → logprob: -12.386576652526855
    8. '   ' → logprob: -12.636576652526855
    9. ' i' → logprob: -13.074076652526855
    10. ',' → logprob: -13.136576652526855

Token 83: ' next' (ID: 2613)
  Prédit: 'next'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'next' → logprob: -0.7704930901527405
    2. 'range' → logprob: -0.7704930901527405
    3. ' next' → logprob: -3.2704930305480957
    4. ' range' → logprob: -3.3954930305480957
    5. 'get' → logprob: -6.020493030548096
    6. ' get' → logprob: -8.395493507385254
    7. 'core' → logprob: -9.770493507385254
    8. ' ' → logprob: -10.020493507385254
    9. '[next' → logprob: -10.395493507385254
    10. '   ' → logprob: -10.520493507385254

Token 84: '_str' (ID: 6182)
  Prédit: '_list'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_list' → logprob: -4.320199877838604e-07
    2. '_' → logprob: -15.25
    3. '(_' → logprob: -17.125
    4. '()' → logprob: -17.75
    5. '_str' → logprob: -18.0
    6. '_LIST' → logprob: -18.625
    7. '_List' → logprob: -19.0
    8. '_line' → logprob: -19.0
    9. '_int' → logprob: -19.125
    10. '_(' → logprob: -19.25

Token 85: '().' (ID: 1454)
  Prédit: '().'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '().' → logprob: -0.2527923882007599
    2. '()' → logprob: -1.5027923583984375
    3. '():' → logprob: -7.1277923583984375
    4. ')' → logprob: -10.377792358398438
    5. '()[' → logprob: -12.127792358398438
    6. '().__' → logprob: -12.127792358398438
    7. '()).' → logprob: -12.752792358398438
    8. '());' → logprob: -12.877792358398438
    9. '())' → logprob: -13.252792358398438
    10. '();' → logprob: -13.377792358398438

Token 86: 'split' (ID: 13627)
  Prédit: 'split'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'split' → logprob: -1.1756367712223437e-05
    2. 'strip' → logprob: -12.000011444091797
    3. ' split' → logprob: -12.250011444091797
    4. 'rstrip' → logprob: -14.375011444091797
    5. 'spl' → logprob: -16.625011444091797
    6. '(split' → logprob: -16.750011444091797
    7. 's' → logprob: -18.500011444091797
    8. 'plit' → logprob: -18.750011444091797
    9. '.split' → logprob: -19.875011444091797
    10. '_split' → logprob: -20.125011444091797

Token 87: '():
' (ID: 8595)
  Prédit: '():'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '():' → logprob: -0.07941459119319916
    2. '()' → logprob: -2.5794146060943604
    3. '('' → logprob: -8.579414367675781
    4. '():
' → logprob: -9.079414367675781
    5. '(' → logprob: -9.329414367675781
    6. ' ():' → logprob: -10.579414367675781
    7. '())' → logprob: -10.704414367675781
    8. '()>' → logprob: -11.579414367675781
    9. '()]' → logprob: -11.704414367675781
    10. ' ()' → logprob: -11.829414367675781

Token 88: '       ' (ID: 309)
  Prédit: '       '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '       ' → logprob: -0.02701937034726143
    2. ' ' → logprob: -4.652019500732422
    3. '<|end|>' → logprob: -4.777019500732422
    4. '    ' → logprob: -5.402019500732422
    5. ' if' → logprob: -6.527019500732422
    6. 'arr' → logprob: -6.902019500732422
    7. '        ' → logprob: -7.402019500732422
    8. '   ' → logprob: -7.902019500732422
    9. '      ' → logprob: -8.652019500732422
    10. ' arr' → logprob: -9.277019500732422

Token 89: ' arr' (ID: 1724)
  Prédit: ' if'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' if' → logprob: -0.7619332671165466
    2. 'arr' (adapté à ' arr') → logprob: -1.3869333267211914
    3. '       ' → logprob: -1.7619333267211914
    4. 'if' → logprob: -2.6369333267211914
    5. ' arr' → logprob: -3.3869333267211914
    6. '   ' → logprob: -6.136933326721191
    7. '    ' → logprob: -6.386933326721191
    8. '        ' → logprob: -6.886933326721191
    9. 'v' → logprob: -8.136933326721191
    10. '<|end|>' → logprob: -8.136933326721191

Token 90: '.append' (ID: 3709)
  Prédit: '.append'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '.append' → logprob: -0.004773768596351147
    2. '.' → logprob: -5.3797736167907715
    3. ' .' → logprob: -8.87977409362793
    4. '.extend' → logprob: -12.00477409362793
    5. '.app' → logprob: -12.50477409362793
    6. '.ap' → logprob: -12.87977409362793
    7. '.add' → logprob: -14.50477409362793
    8. ' =' → logprob: -15.00477409362793
    9. '    ' → logprob: -15.50477409362793
    10. 'append' → logprob: -15.62977409362793

Token 91: '(int' (ID: 2742)
  Prédit: '(int'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(int' → logprob: -0.0019586095586419106
    2. '(v' → logprob: -6.876958847045898
    3. '(' → logprob: -7.251958847045898
    4. 'int' → logprob: -8.626958847045898
    5. ' (' → logprob: -11.001958847045898
    6. '(i' → logprob: -11.626958847045898
    7. ' int' → logprob: -12.876958847045898
    8. '((' → logprob: -13.001958847045898
    9. '(in' → logprob: -13.126958847045898
    10. '(
' → logprob: -13.751958847045898

Token 92: '(v' (ID: 6932)
  Prédit: '(v'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(v' → logprob: -0.0182020366191864
    2. '(' → logprob: -4.01820182800293
    3. ' (' → logprob: -10.89320182800293
    4. ')' → logprob: -11.01820182800293
    5. ')(' → logprob: -11.26820182800293
    6. 'v' → logprob: -13.26820182800293
    7. ')v' → logprob: -13.76820182800293
    8. '(
' → logprob: -14.26820182800293
    9. '((' → logprob: -15.26820182800293
    10. ' ' → logprob: -15.51820182800293

Token 93: '))

' (ID: 9746)
  Prédit: '))'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '))' → logprob: -0.0012804759899154305
    2. ')' → logprob: -6.751280307769775
    3. ' ))' → logprob: -10.001280784606934
    4. ')))' → logprob: -10.501280784606934
    5. '))
' → logprob: -10.626280784606934
    6. '()))' → logprob: -11.751280784606934
    7. ''))' → logprob: -13.751280784606934
    8. '   ' → logprob: -13.751280784606934
    9. '),' → logprob: -14.251280784606934
    10. ' ' → logprob: -14.751280784606934

Token 94: '   ' (ID: 271)
  Prédit: ' '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' ' → logprob: -0.8790186047554016
    2. '
' → logprob: -1.8790185451507568
    3. '   ' → logprob: -2.004018545150757
    4. '<|end|>' → logprob: -2.004018545150757
    5. ' if' → logprob: -3.379018545150757
    6. ' 
' → logprob: -3.504018545150757
    7. 'if' → logprob: -4.254018783569336
    8. '#' → logprob: -4.629018783569336
    9. '[' → logprob: -4.754018783569336
    10. '+' → logprob: -4.754018783569336

Token 95: ' arr' (ID: 1724)
  Prédit: 'for'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'for' → logprob: -1.0548017024993896
    2. 'arr' (adapté à ' arr') → logprob: -1.8048017024993896
    3. 'ans' → logprob: -2.6798017024993896
    4. 'dp' → logprob: -2.6798017024993896
    5. 'count' → logprob: -3.0548017024993896
    6. 'if' → logprob: -3.0548017024993896
    7. 'result' → logprob: -3.3048017024993896
    8. 'answer' → logprob: -3.6798017024993896
    9. 'cnt' → logprob: -3.6798017024993896
    10. 'diff' → logprob: -3.8048017024993896

Token 96: '.sort' (ID: 19551)
  Prédit: '.sort'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '.sort' → logprob: -0.019909409806132317
    2. '.' → logprob: -4.644909381866455
    3. '<|end|>' → logprob: -5.519909381866455
    4. '.append' → logprob: -6.394909381866455
    5. '.reverse' → logprob: -6.769909381866455
    6. ' =' → logprob: -6.769909381866455
    7. '.remove' → logprob: -7.269909381866455
    8. '[' → logprob: -7.894909381866455
    9. '=' → logprob: -8.019909858703613
    10. '[:]' → logprob: -8.644909858703613

Token 97: '(reverse' (ID: 110806)
  Prédit: '()'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '()' → logprob: -0.08472874760627747
    2. '()
' → logprob: -2.584728717803955
    3. '(reverse' → logprob: -5.334728717803955
    4. '()

' → logprob: -7.334728717803955
    5. 'reverse' → logprob: -8.959729194641113
    6. 'def' → logprob: -9.334729194641113
    7. '(' → logprob: -9.334729194641113
    8. '()
' → logprob: -11.084729194641113
    9. '   ' → logprob: -11.709729194641113
    10. '();' → logprob: -12.459729194641113

Token 98: '=False' (ID: 12148)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')' → logprob: -0.28444355726242065
    2. '())' → logprob: -1.6594436168670654
    3. '=True' → logprob: -2.9094436168670654
    4. '()' → logprob: -6.034443378448486
    5. ')
' → logprob: -9.409443855285645
    6. '())
' → logprob: -9.409443855285645
    7. '(True' → logprob: -9.659443855285645
    8. '=' → logprob: -10.034443855285645
    9. '))' → logprob: -10.284443855285645
    10. '=False' → logprob: -10.534443855285645

Token 99: ')

' (ID: 1029)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')' → logprob: -5.764977686339989e-05
    2. ')
' → logprob: -10.000057220458984
    3. ' )' → logprob: -11.750057220458984
    4. '   ' → logprob: -13.000057220458984
    5. ' ' → logprob: -14.875057220458984
    6. ',' → logprob: -15.000057220458984
    7. ')

' → logprob: -15.375057220458984
    8. '))' → logprob: -15.375057220458984
    9. '),' → logprob: -15.875057220458984
    10. ')`' → logprob: -16.000057220458984

Token 100: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.7955015301704407
    2. ' for' → logprob: -1.920501470565796
    3. ' total' → logprob: -2.420501470565796
    4. 'total' → logprob: -2.420501470565796
    5. 'for' → logprob: -3.420501470565796
    6. 'result' → logprob: -3.795501470565796
    7. '
' → logprob: -4.170501708984375
    8. '    
' → logprob: -4.295501708984375
    9. 'count' → logprob: -4.295501708984375
    10. 'current' → logprob: -4.295501708984375

Token 101: ' counter' (ID: 9446)
  Prédit: 'for'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'for' → logprob: -1.2310646772384644
    2. 'count' → logprob: -1.2310646772384644
    3. 'total' → logprob: -2.106064796447754
    4. 'ans' → logprob: -2.356064796447754
    5. 'answer' → logprob: -3.106064796447754
    6. 'cnt' → logprob: -3.231064796447754
    7. 'result' → logprob: -3.731064796447754
    8. 'sum' → logprob: -3.731064796447754
    9. 'current' → logprob: -4.356064796447754
    10. 'res' → logprob: -4.606064796447754

Token 102: ' =' (ID: 314)
  Prédit: ' ='
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' =' → logprob: -0.04441562294960022
    2. '=' → logprob: -3.9194157123565674
    3. ' +=' → logprob: -3.9194157123565674
    4. ' ' → logprob: -6.169415473937988
    5. '<|end|>' → logprob: -7.294415473937988
    6. '(' → logprob: -7.669415473937988
    7. '  ' → logprob: -9.169415473937988
    8. ')' → logprob: -9.419415473937988
    9. '()' → logprob: -9.419415473937988
    10. '+=' → logprob: -9.544415473937988

Token 103: ' ' (ID: 220)
  Prédit: '0'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '0' → logprob: -0.1271752566099167
    2. ' ' → logprob: -2.1271753311157227
    3. '1' → logprob: -8.752175331115723
    4. 'x' → logprob: -10.627175331115723
    5. ' x' → logprob: -10.627175331115723
    6. '   ' → logprob: -11.877175331115723
    7. 'arr' → logprob: -11.939675331115723
    8. '{}' → logprob: -12.252175331115723
    9. '{' → logprob: -12.439675331115723
    10. 'sum' → logprob: -13.064675331115723

Token 104: '0' (ID: 15)
  Prédit: '0'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '0' → logprob: -0.00171278219204396
    2. '{}' → logprob: -6.876712799072266
    3. '1' → logprob: -8.001712799072266
    4. '{' → logprob: -9.126712799072266
    5. ' ' → logprob: -9.126712799072266
    6. 'len' → logprob: -10.001712799072266
    7. 'arr' → logprob: -11.001712799072266
    8. 'dict' → logprob: -11.001712799072266
    9. '{}
' → logprob: -11.001712799072266
    10. 'x' → logprob: -11.376712799072266

Token 105: ';' (ID: 26)
  Prédit: ''
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False

Token 106: ' i' (ID: 575)
  Prédit: ' for'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' for' → logprob: -1.386370062828064
    2. ' i' → logprob: -1.386370062828064
    3. 'i' → logprob: -1.511370062828064
    4. 'for' → logprob: -1.886370062828064
    5. '   ' → logprob: -3.2613701820373535
    6. ' current' → logprob: -3.8863701820373535
    7. 'acc' → logprob: -4.3863701820373535
    8. 'current' → logprob: -4.3863701820373535
    9. ' acc' → logprob: -5.1363701820373535
    10. 'sum' → logprob: -5.3863701820373535

Token 107: ' =' (ID: 314)
  Prédit: ' ='
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' =' → logprob: -0.12963318824768066
    2. '=' → logprob: -2.1296331882476807
    3. 'n' → logprob: -7.004632949829102
    4. ' ' → logprob: -7.129632949829102
    5. ' +=' → logprob: -7.754632949829102
    6. '<|end|>' → logprob: -8.254632949829102
    7. '+=' → logprob: -9.254632949829102
    8. 'nd' → logprob: -9.379632949829102
    9. 'f' → logprob: -9.879632949829102
    10. 'nt' → logprob: -11.004632949829102

Token 108: ' ' (ID: 220)
  Prédit: '0'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '0' → logprob: -0.0555778369307518
    2. ' ' → logprob: -2.9305777549743652
    3. '1' → logprob: -7.305577754974365
    4. '   ' → logprob: -12.180578231811523
    5. '  ' → logprob: -12.555578231811523
    6. 'n' → logprob: -12.805578231811523
    7. 'counter' → logprob: -13.180578231811523
    8. ' n' → logprob: -13.555578231811523
    9. '2' → logprob: -13.680578231811523
    10. 'len' → logprob: -13.805578231811523

Token 109: '0' (ID: 15)
  Prédit: '0'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '0' → logprob: -0.0008843107498250902
    2. ' ' → logprob: -7.375884532928467
    3. '1' → logprob: -8.375884056091309
    4. 'len' → logprob: -11.375884056091309
    5. 'n' → logprob: -11.750884056091309
    6. 'x' → logprob: -13.000884056091309
    7. '-' → logprob: -13.125884056091309
    8. 'counter' → logprob: -14.000884056091309
    9. '  ' → logprob: -14.625884056091309
    10. '   ' → logprob: -14.750884056091309

Token 110: '
' (ID: 198)
  Prédit: '
'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '
' → logprob: -0.3246172070503235
    2. '<|end|>' → logprob: -1.3246171474456787
    3. ' 
' → logprob: -5.074617385864258
    4. '<|end|>' → logprob: -6.199617385864258
    5. ' while' → logprob: -7.199617385864258
    6. ' ' → logprob: -7.199617385864258
    7. '  
' → logprob: -7.449617385864258
    8. '   ' → logprob: -7.824617385864258
    9. 'while' → logprob: -8.699617385864258
    10. '    
' → logprob: -8.949617385864258

Token 111: '   ' (ID: 271)
  Prédit: '
'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '
' → logprob: -0.3542308211326599
    2. '<|end|>' → logprob: -1.2292308807373047
    3. '<|end|>' → logprob: -6.229230880737305
    4. ' 
' → logprob: -6.854230880737305
    5. '  
' → logprob: -7.229230880737305
    6. ' ' → logprob: -7.354230880737305
    7. '   ' → logprob: -7.729230880737305
    8. '    
' → logprob: -8.104230880737305
    9. ' while' → logprob: -8.604230880737305
    10. '   
' → logprob: -9.604230880737305

Token 112: ' while' (ID: 2049)
  Prédit: 'while'
  Correct (stricte): False
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'while' (adapté à ' while') → logprob: -0.043112579733133316
    2. ' while' → logprob: -3.2931125164031982
    3. 'n' → logprob: -5.418112754821777
    4. '   ' → logprob: -7.668112754821777
    5. '
' → logprob: -9.793112754821777
    6. 'for' → logprob: -10.543112754821777
    7. ' n' → logprob: -11.168112754821777
    8. 'i' → logprob: -11.168112754821777
    9. '<|end|>' → logprob: -11.418112754821777
    10. 'len' → logprob: -12.043112754821777

Token 113: ' i' (ID: 575)
  Prédit: ' i'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' i' → logprob: -0.010207071900367737
    2. 'i' → logprob: -5.135207176208496
    3. ' counter' → logprob: -6.135207176208496
    4. 'counter' → logprob: -6.885207176208496
    5. '(i' → logprob: -7.885207176208496
    6. '   ' → logprob: -8.385207176208496
    7. ' True' → logprob: -9.135207176208496
    8. ' (' → logprob: -9.385207176208496
    9. ' ' → logprob: -9.510207176208496
    10. ' len' → logprob: -10.010207176208496

Token 114: ' <' (ID: 464)
  Prédit: ' <'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' <' → logprob: -0.07113610208034515
    2. '<' → logprob: -2.696135997772217
    3. '<len' → logprob: -7.071135997772217
    4. ' <=' → logprob: -8.571136474609375
    5. ' ' → logprob: -9.196136474609375
    6. '<n' → logprob: -10.321136474609375
    7. '<=' → logprob: -10.821136474609375
    8. '<size' → logprob: -13.071136474609375
    9. ' <
' → logprob: -13.696136474609375
    10. '[' → logprob: -14.946136474609375

Token 115: ' len' (ID: 4631)
  Prédit: 'n'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'n' → logprob: -0.53653883934021
    2. ' n' → logprob: -1.03653883934021
    3. 'len' → logprob: -3.28653883934021
    4. ' len' → logprob: -3.78653883934021
    5. '   ' → logprob: -8.286539077758789
    6. ' ' → logprob: -8.536539077758789
    7. '  ' → logprob: -10.786539077758789
    8. '	n' → logprob: -11.911539077758789
    9. '(len' → logprob: -12.911539077758789
    10. '    ' → logprob: -12.974039077758789

Token 116: '(arr' (ID: 19646)
  Prédit: '(arr'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(arr' → logprob: -0.00024025145103223622
    2. 'arr' → logprob: -8.375240325927734
    3. '(' → logprob: -11.875240325927734
    4. ' arr' → logprob: -13.125240325927734
    5. '	arr' → logprob: -15.375240325927734
    6. '[arr' → logprob: -15.750240325927734
    7. '<arr' → logprob: -16.000240325927734
    8. ' (' → logprob: -16.375240325927734
    9. '_arr' → logprob: -17.125240325927734
    10. '(
' → logprob: -17.250240325927734

Token 117: '):
' (ID: 1883)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')' → logprob: -0.1967899352312088
    2. '):
' → logprob: -2.1967899799346924
    3. ' and' → logprob: -2.8217899799346924
    4. 'and' → logprob: -5.446789741516113
    5. '):' → logprob: -5.696789741516113
    6. '   ' → logprob: -9.321789741516113
    7. ' )' → logprob: -9.446789741516113
    8. '):

' → logprob: -9.696789741516113
    9. '):
' → logprob: -10.696789741516113
    10. ' ):
' → logprob: -10.821789741516113

Token 118: '       ' (ID: 309)
  Prédit: '       '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '       ' → logprob: -0.19842663407325745
    2. ' if' → logprob: -2.0734267234802246
    3. '    ' → logprob: -3.6984267234802246
    4. ' 
' → logprob: -4.448426723480225
    5. '   ' → logprob: -5.448426723480225
    6. '        
' → logprob: -6.198426723480225
    7. '<|end|>' → logprob: -6.198426723480225
    8. ' ' → logprob: -6.323426723480225
    9. '     
' → logprob: -6.448426723480225
    10. 'if' → logprob: -6.573426723480225

Token 119: ' x' (ID: 1215)
  Prédit: ' if'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' if' → logprob: -0.15549378097057343
    2. 'if' → logprob: -2.28049373626709
    3. '       ' → logprob: -3.40549373626709
    4. '   ' → logprob: -5.53049373626709
    5. ' counter' → logprob: -6.28049373626709
    6. '    ' → logprob: -6.90549373626709
    7. 'counter' → logprob: -7.15549373626709
    8. '```' → logprob: -8.53049373626709
    9. '        ' → logprob: -8.90549373626709
    10. 'count' → logprob: -9.15549373626709

Token 120: ' =' (ID: 314)
  Prédit: ' -='
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' -=' → logprob: -0.07715603709220886
    2. ' >=' → logprob: -3.5771560668945312
    3. '>=' → logprob: -3.9521560668945312
    4. '-=' → logprob: -4.202156066894531
    5. '=' → logprob: -5.702156066894531
    6. ' =' → logprob: -6.202156066894531
    7. '>' → logprob: -6.452156066894531
    8. '-' → logprob: -6.577156066894531
    9. ' +=' → logprob: -6.702156066894531
    10. ' -' → logprob: -6.952156066894531

Token 121: ' x' (ID: 1215)
  Prédit: 'arr'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'arr' → logprob: -0.9514284133911133
    2. ' arr' → logprob: -0.9514284133911133
    3. ' x' → logprob: -1.8264284133911133
    4. 'x' → logprob: -2.8264284133911133
    5. ' max' → logprob: -5.451428413391113
    6. 'max' → logprob: -6.326428413391113
    7. ' ' → logprob: -7.826428413391113
    8. '0' → logprob: -8.451428413391113
    9. '	arr' → logprob: -8.576428413391113
    10. '(arr' → logprob: -8.951428413391113

Token 122: ' -' (ID: 533)
  Prédit: '-'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '-' → logprob: -0.20501677691936493
    2. ' -' → logprob: -1.7050167322158813
    3. '-arr' → logprob: -5.830016613006592
    4. ' //' → logprob: -8.20501708984375
    5. '+' → logprob: -8.45501708984375
    6. '//' → logprob: -9.45501708984375
    7. 'arr' → logprob: -10.20501708984375
    8. '<arr' → logprob: -10.58001708984375
    9. ' +' → logprob: -12.20501708984375
    10. '[arr' → logprob: -12.33001708984375

Token 123: ' arr' (ID: 1724)
  Prédit: 'arr'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'arr' → logprob: -0.011053833179175854
    2. ' arr' → logprob: -4.511054039001465
    3. '	arr' → logprob: -13.011054039001465
    4. '   ' → logprob: -13.386054039001465
    5. '(arr' → logprob: -13.761054039001465
    6. ' ' → logprob: -14.761054039001465
    7. '$arr' → logprob: -14.886054039001465
    8. '1' → logprob: -15.886054039001465
    9. '[arr' → logprob: -15.886054039001465
    10. '  ' → logprob: -16.63605308532715

Token 124: '[i' (ID: 1768)
  Prédit: '[i'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '[i' → logprob: -1.735893965815194e-05
    2. '[' → logprob: -11.000017166137695
    3. '[x' → logprob: -14.875017166137695
    4. '[j' → logprob: -15.875017166137695
    5. '   ' → logprob: -17.375017166137695
    6. '```' → logprob: -17.625017166137695
    7. '[u' → logprob: -17.750017166137695
    8. ' [' → logprob: -18.125017166137695
    9. '[
' → logprob: -18.125017166137695
    10. '       ' → logprob: -18.250017166137695

Token 125: ']
' (ID: 1592)
  Prédit: ']
'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ']
' → logprob: -0.18314394354820251
    2. ']' → logprob: -1.933143973350525
    3. ')
' → logprob: -4.0581440925598145
    4. ')' → logprob: -6.1831440925598145
    5. '])
' → logprob: -6.1831440925598145
    6. '])' → logprob: -7.4331440925598145
    7. ']
' → logprob: -8.433143615722656
    8. ')]' → logprob: -9.058143615722656
    9. ']

' → logprob: -9.183143615722656
    10. '       ' → logprob: -9.308143615722656

Token 126: '       ' (ID: 309)
  Prédit: '
'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '
' → logprob: -0.0922636166214943
    2. '       ' → logprob: -2.717263698577881
    3. '<|end|>' → logprob: -3.967263698577881
    4. ' if' → logprob: -7.092263698577881
    5. '        
' → logprob: -7.217263698577881
    6. '<|end|>' → logprob: -7.467263698577881
    7. '\n' → logprob: -8.592263221740723
    8. '  
' → logprob: -8.717263221740723
    9. ' 
' → logprob: -8.717263221740723
    10. '
' → logprob: -8.842263221740723

Token 127: ' if' (ID: 538)
  Prédit: 'if'
  Correct (stricte): False
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'if' (adapté à ' if') → logprob: -0.4195514917373657
    2. ' if' → logprob: -1.1695514917373657
    3. '       ' → logprob: -4.169551372528076
    4. 'i' → logprob: -4.919551372528076
    5. ' i' → logprob: -5.544551372528076
    6. 'counter' → logprob: -5.669551372528076
    7. ' counter' → logprob: -6.294551372528076
    8. '   ' → logprob: -9.044551849365234
    9. 'while' → logprob: -10.794551849365234
    10. '
' → logprob: -11.044551849365234

Token 128: ' x' (ID: 1215)
  Prédit: ' x'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' x' → logprob: -0.0337403304874897
    2. 'x' → logprob: -3.408740282058716
    3. ' ' → logprob: -10.158740043640137
    4. '   ' → logprob: -10.408740043640137
    5. '0' → logprob: -11.533740043640137
    6. '  ' → logprob: -12.533740043640137
    7. '(x' → logprob: -12.658740043640137
    8. '    ' → logprob: -13.033740043640137
    9. '	x' → logprob: -13.533740043640137
    10. ' ' → logprob: -13.658740043640137

Token 129: ' >=' (ID: 5064)
  Prédit: '<'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '<' → logprob: -1.1933382749557495
    2. '>=' → logprob: -1.3183382749557495
    3. ' >=' → logprob: -1.4433382749557495
    4. ' <' → logprob: -1.6933382749557495
    5. '<=' → logprob: -5.568338394165039
    6. ' <=' → logprob: -5.568338394165039
    7. '>' → logprob: -6.943338394165039
    8. ' >' → logprob: -8.443338394165039
    9. ' ' → logprob: -8.693338394165039
    10. '==' → logprob: -10.068338394165039

Token 130: ' ' (ID: 220)
  Prédit: '0'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '0' → logprob: -0.3868766129016876
    2. ' ' → logprob: -1.1368765830993652
    3. 'arr' → logprob: -13.199377059936523
    4. '   ' → logprob: -13.824377059936523
    5. '  ' → logprob: -14.261877059936523
    6. ' arr' → logprob: -14.574377059936523
    7. ' ' → logprob: -14.949377059936523
    8. '1' → logprob: -15.699377059936523
    9. '    ' → logprob: -16.261877059936523
    10. '
' → logprob: -16.386877059936523

Token 131: '0' (ID: 15)
  Prédit: '0'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '0' → logprob: -0.005950602237135172
    2. ' ' → logprob: -5.130950450897217
    3. 'arr' → logprob: -10.880950927734375
    4. '   ' → logprob: -13.630950927734375
    5. ' arr' → logprob: -14.005950927734375
    6. '  ' → logprob: -15.568450927734375
    7. '1' → logprob: -15.880950927734375
    8. '
' → logprob: -16.505950927734375
    9. '```' → logprob: -16.693450927734375
    10. '    ' → logprob: -16.755950927734375

Token 132: ':' (ID: 25)
  Prédit: ':
'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ':
' → logprob: -0.524439811706543
    2. ':' → logprob: -0.899439811706543
    3. '       ' → logprob: -7.024439811706543
    4. '):
' → logprob: -8.774439811706543
    5. '           ' → logprob: -8.899439811706543
    6. ' and' → logprob: -9.899439811706543
    7. ' or' → logprob: -10.399439811706543
    8. '):' → logprob: -10.899439811706543
    9. ' :
' → logprob: -11.649439811706543
    10. '():
' → logprob: -12.274439811706543

Token 133: ' counter' (ID: 9446)
  Prédit: '           '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '           ' → logprob: -0.47013989090919495
    2. 'counter' → logprob: -1.9701398611068726
    3. ' counter' → logprob: -1.9701398611068726
    4. '
' → logprob: -2.470139980316162
    5. '       ' → logprob: -4.595139980316162
    6. '   ' → logprob: -6.720139980316162
    7. '```' → logprob: -9.720139503479004
    8. '
' → logprob: -9.845139503479004
    9. '	counter' → logprob: -10.095139503479004
    10. ' ' → logprob: -10.720139503479004

Token 134: ' +=' (ID: 2757)
  Prédit: ' +='
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' +=' → logprob: -0.6931846141815186
    2. '+=' → logprob: -0.6931846141815186
    3. ' =' → logprob: -10.818184852600098
    4. '=' → logprob: -11.068184852600098
    5. ']+=' → logprob: -13.943184852600098
    6. '   ' → logprob: -15.443184852600098
    7. ' ' → logprob: -15.818184852600098
    8. '+' → logprob: -15.818184852600098
    9. '+=(' → logprob: -16.31818389892578
    10. '<|end|>' → logprob: -16.31818389892578

Token 135: ' ' (ID: 220)
  Prédit: '1'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '1' → logprob: -0.00015979631280060858
    2. ' ' → logprob: -8.750160217285156
    3. 'arr' → logprob: -13.875160217285156
    4. '   ' → logprob: -15.125160217285156
    5. '  ' → logprob: -17.750160217285156
    6. '<|end|>' → logprob: -18.625160217285156
    7. '0' → logprob: -18.875160217285156
    8. '2' → logprob: -19.000160217285156
    9. '       ' → logprob: -19.125160217285156
    10. '+' → logprob: -19.187660217285156

Token 136: '1' (ID: 16)
  Prédit: '1'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '1' → logprob: -2.999452772201039e-05
    2. ' ' → logprob: -10.500029563903809
    3. 'arr' → logprob: -13.000029563903809
    4. '   ' → logprob: -16.500030517578125
    5. '<|end|>' → logprob: -18.750030517578125
    6. '  ' → logprob: -19.250030517578125
    7. '0' → logprob: -19.875030517578125
    8. '+' → logprob: -20.125030517578125
    9. '       ' → logprob: -20.125030517578125
    10. '2' → logprob: -20.250030517578125

Token 137: '
' (ID: 198)
  Prédit: '
'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '
' → logprob: -0.3013335168361664
    2. '       ' → logprob: -1.4263335466384888
    3. ' else' → logprob: -4.176333427429199
    4. 'else' → logprob: -6.301333427429199
    5. '
' → logprob: -7.051333427429199
    6. '<|end|>' → logprob: -7.301333427429199
    7. '\n' → logprob: -7.551333427429199
    8. '   ' → logprob: -8.6763334274292
    9. ' elif' → logprob: -9.4263334274292
    10. 'elif' → logprob: -9.8013334274292

Token 138: '       ' (ID: 309)
  Prédit: '       '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '       ' → logprob: -0.2883840799331665
    2. '
' → logprob: -1.4133840799331665
    3. ' else' → logprob: -5.288383960723877
    4. '   ' → logprob: -7.163383960723877
    5. 'else' → logprob: -7.413383960723877
    6. '
' → logprob: -8.413384437561035
    7. '<|end|>' → logprob: -9.413384437561035
    8. ' elif' → logprob: -9.663384437561035
    9. '```' → logprob: -9.663384437561035
    10. '	else' → logprob: -10.163384437561035

Token 139: ' i' (ID: 575)
  Prédit: 'else'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'else' → logprob: -0.44823941588401794
    2. ' else' → logprob: -1.1982394456863403
    3. '       ' → logprob: -2.823239326477051
    4. '   ' → logprob: -9.69823932647705
    5. '	else' → logprob: -10.82323932647705
    6. 'elif' → logprob: -11.32323932647705
    7. ' i' → logprob: -12.07323932647705
    8. ' elif' → logprob: -12.57323932647705
    9. '    ' → logprob: -13.07323932647705
    10. 'i' (adapté à ' i') → logprob: -13.07323932647705

Token 140: ' +=' (ID: 2757)
  Prédit: '+='
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '+=' → logprob: -0.08081552386283875
    2. ' +=' → logprob: -2.580815553665161
    3. '+' → logprob: -6.330815315246582
    4. '=' → logprob: -9.080815315246582
    5. '++' → logprob: -11.080815315246582
    6. '<|end|>' → logprob: -11.955815315246582
    7. ']+=' → logprob: -13.330815315246582
    8. ' +' → logprob: -13.955815315246582
    9. '+++' → logprob: -14.080815315246582
    10. '+="' → logprob: -14.080815315246582

Token 141: ' ' (ID: 220)
  Prédit: '1'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '1' → logprob: -0.00029637437546625733
    2. ' ' → logprob: -8.125296592712402
    3. '   ' → logprob: -15.000296592712402
    4. '```' → logprob: -17.375295639038086
    5. '  ' → logprob: -18.000295639038086
    6. '       ' → logprob: -18.750295639038086
    7. '１' → logprob: -18.875295639038086
    8. '<|end|>' → logprob: -19.000295639038086
    9. '
' → logprob: -19.500295639038086
    10. '    ' → logprob: -19.500295639038086

Token 142: '1' (ID: 16)
  Prédit: '1'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '1' → logprob: -1.688212614681106e-05
    2. ' ' → logprob: -11.000017166137695
    3. '   ' → logprob: -16.250017166137695
    4. '```' → logprob: -17.250017166137695
    5. '１' → logprob: -18.187517166137695
    6. '  ' → logprob: -18.812517166137695
    7. '<|end|>' → logprob: -19.125017166137695
    8. '2' → logprob: -19.125017166137695
    9. '۱' → logprob: -19.187517166137695
    10. 'counter' → logprob: -19.187517166137695

Token 143: '

' (ID: 279)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.01890343613922596
    2. '       ' → logprob: -5.1439032554626465
    3. 'return' → logprob: -5.1439032554626465
    4. ' return' → logprob: -5.7689032554626465
    5. '<|end|>' → logprob: -6.6439032554626465
    6. ' else' → logprob: -6.7689032554626465
    7. 'print' → logprob: -7.3939032554626465
    8. 'else' → logprob: -8.018903732299805
    9. ' if' → logprob: -8.643903732299805
    10. '    ' → logprob: -8.893903732299805

Token 144: '   ' (ID: 271)
  Prédit: ''
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False

Token 145: ' if' (ID: 538)
  Prédit: 'print'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'print' → logprob: -0.23429743945598602
    2. 'return' → logprob: -1.6092973947525024
    3. 'if' (adapté à ' if') → logprob: -4.984297275543213
    4. '   ' → logprob: -6.859297275543213
    5. ' return' → logprob: -7.734297275543213
    6. ' print' → logprob: -8.609297752380371
    7. 'for' → logprob: -8.984297752380371
    8. 'while' → logprob: -9.109297752380371
    9. ' if' → logprob: -9.734297752380371
    10. '#' → logprob: -12.109297752380371

Token 146: ' (' (ID: 350)
  Prédit: ' counter'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' counter' → logprob: -0.6362413167953491
    2. ' x' → logprob: -0.7612413167953491
    3. 'x' → logprob: -6.386241436004639
    4. 'counter' → logprob: -6.761241436004639
    5. ' ' → logprob: -7.261241436004639
    6. ' len' → logprob: -11.13624095916748
    7. '(counter' → logprob: -11.26124095916748
    8. '  ' → logprob: -11.38624095916748
    9. ' not' → logprob: -11.38624095916748
    10. ' (' → logprob: -11.63624095916748

Token 147: 'x' (ID: 87)
  Prédit: ' x'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' x' → logprob: -0.4462215304374695
    2. 'x' → logprob: -1.3212215900421143
    3. ' counter' → logprob: -2.6962215900421143
    4. 'counter' → logprob: -3.6962215900421143
    5. ')' → logprob: -8.321221351623535
    6. ' ' → logprob: -8.946221351623535
    7. ' len' → logprob: -9.446221351623535
    8. ' n' → logprob: -9.696221351623535
    9. '(x' → logprob: -10.071221351623535
    10. ' not' → logprob: -10.071221351623535

Token 148: ' >' (ID: 1424)
  Prédit: '<'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '<' → logprob: -0.6729761362075806
    2. '>=' → logprob: -1.0479761362075806
    3. ' <' → logprob: -2.547976016998291
    4. ' >=' → logprob: -2.922976016998291
    5. ')' → logprob: -6.172976016998291
    6. '==' → logprob: -6.297976016998291
    7. '>' → logprob: -6.672976016998291
    8. ')>=' → logprob: -7.297976016998291
    9. ')<' → logprob: -7.422976016998291
    10. '<=' → logprob: -8.54797649383545

Token 149: ' ' (ID: 220)
  Prédit: ' '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' ' → logprob: -0.9790852665901184
    2. '=' → logprob: -1.1040852069854736
    3. '0' → logprob: -1.2290852069854736
    4. ' =' → logprob: -9.479084968566895
    5. ')' → logprob: -9.729084968566895
    6. '  ' → logprob: -10.229084968566895
    7. '
' → logprob: -10.604084968566895
    8. '   ' → logprob: -10.729084968566895
    9. '==' → logprob: -11.729084968566895
    10. ' -' → logprob: -12.041584968566895

Token 150: '0' (ID: 15)
  Prédit: '0'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '0' → logprob: -0.09369615465402603
    2. ' ' → logprob: -2.843696117401123
    3. '=' → logprob: -3.468696117401123
    4. ')' → logprob: -10.468696594238281
    5. '-' → logprob: -11.218696594238281
    6. '  ' → logprob: -12.468696594238281
    7. ' =' → logprob: -12.593696594238281
    8. ' -' → logprob: -12.656196594238281
    9. '
' → logprob: -12.718696594238281
    10. '1' → logprob: -13.093696594238281

Token 151: '):
' (ID: 1883)
  Prédit: '):'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '):' → logprob: -0.11808104813098907
    2. '):
' → logprob: -2.7430810928344727
    3. ' and' → logprob: -3.4930810928344727
    4. ')' → logprob: -4.368081092834473
    5. ' or' → logprob: -6.118081092834473
    6. ' ):' → logprob: -6.868081092834473
    7. 'and' → logprob: -8.368081092834473
    8. '):

' → logprob: -8.618081092834473
    9. ' ):
' → logprob: -9.118081092834473
    10. ' )' → logprob: -9.868081092834473

Token 152: '       ' (ID: 309)
  Prédit: '       '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '       ' → logprob: -0.6852815747261047
    2. ' counter' → logprob: -0.9352815747261047
    3. 'counter' → logprob: -2.31028151512146
    4. '   ' → logprob: -5.560281753540039
    5. '	counter' → logprob: -8.310281753540039
    6. '
' → logprob: -9.935281753540039
    7. ' +' → logprob: -10.685281753540039
    8. '_counter' → logprob: -11.060281753540039
    9. '[counter' → logprob: -11.185281753540039
    10. ' ' → logprob: -11.185281753540039

Token 153: ' counter' (ID: 9446)
  Prédit: ' counter'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' counter' → logprob: -0.7089419364929199
    2. 'counter' (adapté à ' counter') → logprob: -0.7089419364929199
    3. '   ' → logprob: -4.45894193649292
    4. '       ' → logprob: -6.45894193649292
    5. 'print' → logprob: -6.58394193649292
    6. ' print' → logprob: -7.83394193649292
    7. '    ' → logprob: -7.95894193649292
    8. '	counter' → logprob: -8.458942413330078
    9. ' ' → logprob: -9.458942413330078
    10. '  ' → logprob: -10.583942413330078

Token 154: ' =' (ID: 314)
  Prédit: ' -='
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' -=' → logprob: -0.7129244208335876
    2. ' +=' → logprob: -0.9629244208335876
    3. '+=' → logprob: -2.3379244804382324
    4. '-=' → logprob: -3.4629244804382324
    5. ' =' → logprob: -9.337924003601074
    6. '=' → logprob: -10.212924003601074
    7. '-' → logprob: -10.962924003601074
    8. '   ' → logprob: -13.337924003601074
    9. ' *=' → logprob: -13.337924003601074
    10. ' -' → logprob: -13.337924003601074

Token 155: ' counter' (ID: 9446)
  Prédit: 'counter'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'counter' → logprob: -0.13714750111103058
    2. '0' → logprob: -2.3871474266052246
    3. ' counter' → logprob: -3.7621474266052246
    4. '-' → logprob: -5.387147426605225
    5. ' ' → logprob: -5.637147426605225
    6. 'max' → logprob: -5.637147426605225
    7. 'len' → logprob: -7.512147426605225
    8. ' max' → logprob: -8.012147903442383
    9. ' -' → logprob: -8.762147903442383
    10. '1' → logprob: -10.012147903442383

Token 156: ' -' (ID: 533)
  Prédit: '-'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '-' → logprob: -0.5710050463676453
    2. ' -' → logprob: -0.9460050463676453
    3. '+' → logprob: -3.44600510597229
    4. ' +' → logprob: -4.696004867553711
    5. ' ' → logprob: -5.446004867553711
    6. '   ' → logprob: -6.946004867553711
    7. '    ' → logprob: -9.071004867553711
    8. '0' → logprob: -9.071004867553711
    9. '  ' → logprob: -9.571004867553711
    10. '       ' → logprob: -10.196004867553711

Token 157: ' ' (ID: 220)
  Prédit: '1'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '1' → logprob: -0.0017024369444698095
    2. ' ' → logprob: -6.376702308654785
    3. '0' → logprob: -15.751702308654785
    4. '   ' → logprob: -16.7517032623291
    5. '<|end|>' → logprob: -17.8767032623291
    6. '  ' → logprob: -18.1267032623291
    7. '2' → logprob: -18.5017032623291
    8. '=' → logprob: -20.1267032623291
    9. '.' → logprob: -20.2517032623291
    10. '```' → logprob: -20.5017032623291

Token 158: '1' (ID: 16)
  Prédit: '1'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '1' → logprob: -1.9266199160483666e-05
    2. ' ' → logprob: -10.875019073486328
    3. '0' → logprob: -15.500019073486328
    4. '   ' → logprob: -17.875019073486328
    5. '2' → logprob: -18.000019073486328
    6. '<|end|>' → logprob: -18.000019073486328
    7. '  ' → logprob: -18.625019073486328
    8. '-' → logprob: -19.750019073486328
    9. '```' → logprob: -19.875019073486328
    10. '
' → logprob: -20.125019073486328

Token 159: '
' (ID: 198)
  Prédit: '
'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '
' → logprob: -0.6398698091506958
    2. '<|end|>' → logprob: -1.1398698091506958
    3. '   ' → logprob: -1.8898698091506958
    4. '<|end|>' → logprob: -7.639869689941406
    5. '```' → logprob: -8.139869689941406
    6. ')' → logprob: -8.389869689941406
    7. '    
' → logprob: -8.764869689941406
    8. 'if' → logprob: -9.139869689941406
    9. '
' → logprob: -9.389869689941406
    10. '\n' → logprob: -9.889869689941406

Token 160: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.6827445030212402
    2. '<|end|>' → logprob: -0.9327445030212402
    3. '
' → logprob: -2.3077445030212402
    4. ')' → logprob: -7.18274450302124
    5. '```' → logprob: -8.182744979858398
    6. '<|end|>' → logprob: -8.807744979858398
    7. 'return' → logprob: -9.182744979858398
    8. '    
' → logprob: -9.182744979858398
    9. 'print' → logprob: -9.432744979858398
    10. '\n' → logprob: -9.932744979858398

Token 161: ' print' (ID: 2123)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.027780253440141678
    2. 'print' (adapté à ' print') → logprob: -4.027780055999756
    3. 'return' → logprob: -4.777780055999756
    4. ' return' → logprob: -7.777780055999756
    5. '
' → logprob: -8.027780532836914
    6. '<|end|>' → logprob: -8.402780532836914
    7. ' print' → logprob: -9.652780532836914
    8. 'if' → logprob: -10.152780532836914
    9. '    
' → logprob: -10.152780532836914
    10. '	return' → logprob: -11.652780532836914

Token 162: '(counter' (ID: 85625)
  Prédit: '(counter'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(counter' → logprob: -0.0015093892579898238
    2. '(' → logprob: -6.501509189605713
    3. 'counter' → logprob: -12.251509666442871
    4. '()' → logprob: -13.376509666442871
    5. '(
' → logprob: -15.501509666442871
    6. '[counter' → logprob: -15.501509666442871
    7. ' (' → logprob: -16.251508712768555
    8. '(count' → logprob: -16.501508712768555
    9. '(c' → logprob: -17.001508712768555
    10. '('' → logprob: -17.376508712768555

Token 163: ')

' (ID: 1029)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ')' → logprob: -1.0280383548888494e-06
    2. ')
' → logprob: -14.000000953674316
    3. ' )' → logprob: -16.000001907348633
    4. ')`' → logprob: -18.000001907348633
    5. '   ' → logprob: -18.625001907348633
    6. ')}' → logprob: -19.875001907348633
    7. '))' → logprob: -20.000001907348633
    8. '')' → logprob: -20.000001907348633
    9. '```' → logprob: -20.000001907348633
    10. '）' → logprob: -20.250001907348633

Token 164: 'if' (ID: 366)
  Prédit: ''
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False

Token 165: ' __' (ID: 2516)
  Prédit: ' __'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' __' → logprob: -0.06197149679064751
    2. '__' → logprob: -2.811971426010132
    3. 'name' → logprob: -13.061971664428711
    4. ' ' → logprob: -13.811971664428711
    5. ' ' → logprob: -15.061971664428711
    6. '_name' → logprob: -15.686971664428711
    7. '___' → logprob: -16.31197166442871
    8. '  ' → logprob: -16.43697166442871
    9. ' name' → logprob: -17.06197166442871
    10. '(__' → logprob: -17.18697166442871

Token 166: 'name' (ID: 897)
  Prédit: '__'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '__' → logprob: -0.44404250383377075
    2. ' ==' → logprob: -1.194042444229126
    3. '==' → logprob: -3.569042444229126
    4. ' __' → logprob: -3.944042444229126
    5. 'name' → logprob: -4.944042682647705
    6. '_' → logprob: -8.944042205810547
    7. '.__' → logprob: -9.069042205810547
    8. '=="' → logprob: -9.069042205810547
    9. '_name' → logprob: -9.569042205810547
    10. '__.__' → logprob: -9.819042205810547

Token 167: '__' (ID: 771)
  Prédit: '__'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '__' → logprob: -3.292907877039397e-06
    2. '==' → logprob: -12.87500286102295
    3. '__.__' → logprob: -15.12500286102295
    4. '___' → logprob: -16.125003814697266
    5. '____' → logprob: -16.625003814697266
    6. 'name' → logprob: -16.750003814697266
    7. '__
' → logprob: -17.000003814697266
    8. ' ==' → logprob: -17.000003814697266
    9. '__.' → logprob: -17.250003814697266
    10. '```' → logprob: -17.500003814697266

Token 168: ' ==' (ID: 951)
  Prédit: ' =='
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' ==' → logprob: -0.02126348577439785
    2. '==' → logprob: -4.146263599395752
    3. '__' → logprob: -5.521263599395752
    4. '=="' → logprob: -7.521263599395752
    5. '.' → logprob: -8.771263122558594
    6. '=='' → logprob: -8.896263122558594
    7. '.__' → logprob: -9.146263122558594
    8. '__.__' → logprob: -9.271263122558594
    9. ' .' → logprob: -9.521263122558594
    10. ' =="' → logprob: -10.646263122558594

Token 169: ' "__' (ID: 27367)
  Prédit: '"'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '"' → logprob: -0.6947112679481506
    2. ''' → logprob: -0.6947112679481506
    3. '__' → logprob: -7.069711208343506
    4. ' "__' → logprob: -7.569711208343506
    5. ' '__' → logprob: -8.569711685180664
    6. ''s' → logprob: -13.819711685180664
    7. ' "' → logprob: -14.069711685180664
    8. '"user' → logprob: -14.194711685180664
    9. ' __' → logprob: -14.444711685180664
    10. ''post' → logprob: -14.569711685180664

Token 170: 'main' (ID: 7731)
  Prédit: 'main'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'main' → logprob: -7.505351095460355e-05
    2. 'name' → logprob: -10.375075340270996
    3. '__' → logprob: -10.500075340270996
    4. '"' → logprob: -11.375075340270996
    5. ''' → logprob: -12.375075340270996
    6. ' main' → logprob: -15.000075340270996
    7. '_main' → logprob: -16.00007438659668
    8. ''name' → logprob: -17.75007438659668
    9. '```' → logprob: -18.00007438659668
    10. ''m' → logprob: -18.00007438659668

Token 171: '__":
' (ID: 49892)
  Prédit: '__":
'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '__":
' → logprob: -0.008699547499418259
    2. '__' → logprob: -4.758699417114258
    3. '__':
' → logprob: -9.383699417114258
    4. '():
' → logprob: -14.633699417114258
    5. '__:' → logprob: -14.758699417114258
    6. '()' → logprob: -16.883699417114258
    7. '__()
' → logprob: -17.633699417114258
    8. '__["' → logprob: -18.133699417114258
    9. '__",' → logprob: -18.633699417114258
    10. '__
' → logprob: -18.758699417114258

Token 172: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.2060951143503189
    2. '	core' → logprob: -2.3310952186584473
    3. ' core' → logprob: -2.4560952186584473
    4. 'core' → logprob: -5.831095218658447
    5. '$core' → logprob: -9.081094741821289
    6. '(core' → logprob: -9.581094741821289
    7. '	main' → logprob: -10.081094741821289
    8. '    
' → logprob: -10.706094741821289
    9. '```' → logprob: -10.706094741821289
    10. '_core' → logprob: -10.956094741821289

Token 173: ' core' (ID: 10089)
  Prédit: 'core'
  Correct (stricte): False
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'core' (adapté à ' core') → logprob: -0.009759512729942799
    2. ' core' → logprob: -4.634759426116943
    3. '	core' → logprob: -13.009759902954102
    4. '   ' → logprob: -14.009759902954102
    5. '$core' → logprob: -16.0097599029541
    6. '_core' → logprob: -16.1347599029541
    7. '(core' → logprob: -16.2597599029541
    8. '.core' → logprob: -16.8847599029541
    9. 'Core' → logprob: -17.2597599029541
    10. 'cores' → logprob: -17.3847599029541

Token 174: '()' (ID: 416)
  Prédit: '()'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '()' → logprob: -6.56364209135063e-05
    2. '()
' → logprob: -10.125065803527832
    3. '(' → logprob: -11.000065803527832
    4. '()`' → logprob: -13.375065803527832
    5. '()

' → logprob: -13.375065803527832
    6. '()<' → logprob: -14.000065803527832
    7. '()]' → logprob: -14.125065803527832
    8. ' ()' → logprob: -14.125065803527832
    9. '()">' → logprob: -14.125065803527832
    10. '();' → logprob: -14.375065803527832


RÉSUMÉ:
--------------------------------------------------------------------------------
Total des tokens analysés: 172
Tokens correctement prédits (1ère position, stricte): 76
Tokens correctement prédits (1ère position, avec adaptation): 81
Tokens correctement prédits (top 10): 149
Précision stricte (1ère position): 44.19%
Précision adaptée (1ère position): 47.09%
Précision (top 10): 86.63%
================================================================================
