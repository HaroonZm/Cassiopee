================================================================================
ANALYSE DE PRÉDICTION TOKEN PAR TOKEN (BATCH API)
Date: 2025-06-04 19:32:06
Modèle de tokenisation: gpt-4o-mini
================================================================================

SCRIPT ANALYSÉ:
--------------------------------------------------------------------------------
from itertools import permutations

N = int(input())
p = list(map(int, input().split()))
q = list(map(int, input().split()))

s = tuple(sorted(p))
perms = list(permutations(s))
a = 0
for i in range(len(perms)):
    if perms[i] == tuple(p):
        a = i
        break
b = 0
for i in range(len(perms)):
    if perms[i] == tuple(q):
        b = i
        break
print(abs(a - b))
--------------------------------------------------------------------------------

RÉSULTATS D'ANALYSE TOKEN PAR TOKEN:
--------------------------------------------------------------------------------
Token 0: 'from' (ID: 2845)
  → Token d'amorce (pas de prédiction)

Token 1: ' itertools' (ID: 103178)
  → Token d'amorce (pas de prédiction)

Token 2: ' import' (ID: 1588)
  → Token d'amorce (pas de prédiction)

Token 3: ' permutations' (ID: 174595)
  Prédit: 'com'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'com' → logprob: -1.2127628326416016
    2. 'product' → logprob: -1.2127628326416016
    3. 'per' → logprob: -1.7127628326416016
    4. 'count' → logprob: -2.3377628326416016
    5. ' permutations' → logprob: -3.2127628326416016
    6. 'cycle' → logprob: -3.3377628326416016
    7. ' product' → logprob: -3.8377628326416016
    8. 'group' → logprob: -4.712762832641602
    9. 'chain' → logprob: -4.837762832641602
    10. ' cycle' → logprob: -4.962762832641602

Token 4: '

' (ID: 279)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '(' → logprob: -3.523948907968588e-05
    2. '\(' → logprob: -11.000035285949707
    3. '(
' → logprob: -12.000035285949707
    4. '.' → logprob: -12.500035285949707
    5. '```' → logprob: -13.500035285949707
    6. '`' → logprob: -13.875035285949707
    7. ''' → logprob: -14.000035285949707
    8. ' (' → logprob: -14.375035285949707
    9. '()' → logprob: -14.625035285949707
    10. 'a' → logprob: -14.875035285949707

Token 5: 'N' (ID: 45)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '(' → logprob: -8.017927029868588e-05
    2. '\(' → logprob: -9.750080108642578
    3. '(
' → logprob: -11.500080108642578
    4. '.' → logprob: -12.000080108642578
    5. '```' → logprob: -14.250080108642578
    6. ''' → logprob: -14.375080108642578
    7. 'a' → logprob: -14.375080108642578
    8. '(

' → logprob: -14.875080108642578
    9. ',' → logprob: -15.000080108642578
    10. '\' → logprob: -15.125080108642578

Token 6: ' =' (ID: 314)
  Prédit: '='
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '=' → logprob: -0.6485971808433533
    2. '.' → logprob: -1.398597240447998
    3. ' =' → logprob: -1.898597240447998
    4. ' ' → logprob: -3.523597240447998
    5. ')' → logprob: -3.898597240447998
    6. ',' → logprob: -3.898597240447998
    7. '_' → logprob: -5.148597240447998
    8. 'u' → logprob: -6.398597240447998
    9. '  ' → logprob: -7.523597240447998
    10. '[' → logprob: -7.648597240447998

Token 7: ' int' (ID: 677)
  Prédit: ' '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' ' → logprob: -0.07029818743467331
    2. '3' → logprob: -2.820298194885254
    3. '4' → logprob: -5.320298194885254
    4. '5' → logprob: -5.695298194885254
    5. '6' → logprob: -11.195298194885254
    6. ' int' → logprob: -11.695298194885254
    7. 'int' → logprob: -11.695298194885254
    8. '7' → logprob: -12.570298194885254
    9. '_' → logprob: -13.820298194885254
    10. ''' → logprob: -14.195298194885254

Token 8: '(input' (ID: 10054)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(' → logprob: -0.00032068457221612334
    2. '('' → logprob: -8.500320434570312
    3. '()' → logprob: -9.750320434570312
    4. '(input' → logprob: -11.125320434570312
    5. ''' → logprob: -11.375320434570312
    6. ' (' → logprob: -11.875320434570312
    7. '(N' → logprob: -12.500320434570312
    8. '```' → logprob: -12.500320434570312
    9. '(`' → logprob: -12.750320434570312
    10. '("' → logprob: -13.000320434570312

Token 9: '())
' (ID: 4574)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ')' → logprob: -0.1767963469028473
    2. '(' → logprob: -2.1767964363098145
    3. '()' → logprob: -3.3017964363098145
    4. '())' → logprob: -4.5517964363098145
    5. '))' → logprob: -7.1767964363098145
    6. '')' → logprob: -8.801795959472656
    7. '(
' → logprob: -8.801795959472656
    8. '`)' → logprob: -9.551795959472656
    9. '('' → logprob: -9.801795959472656
    10. '")' → logprob: -10.426795959472656

Token 10: 'p' (ID: 79)
  Prédit: 'numbers'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'numbers' → logprob: -0.9705746173858643
    2. 'arr' → logprob: -1.4705746173858643
    3. 'for' → logprob: -1.9705746173858643
    4. 'nums' → logprob: -2.2205746173858643
    5. 's' → logprob: -3.4705746173858643
    6. 'data' → logprob: -3.8455746173858643
    7. 'a' → logprob: -4.220574378967285
    8. 'items' → logprob: -4.470574378967285
    9. 'elements' → logprob: -4.595574378967285
    10. 'lst' → logprob: -4.845574378967285

Token 11: ' =' (ID: 314)
  Prédit: 'e'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'e' → logprob: -0.6731685400009155
    2. 'er' → logprob: -0.9231685400009155
    3. 'erm' → logprob: -2.798168659210205
    4. 'ermut' → logprob: -3.923168659210205
    5. 'erms' → logprob: -4.673168659210205
    6. 'r' → logprob: -6.923168659210205
    7. ' =' → logprob: -8.173168182373047
    8. '(' → logprob: -8.548168182373047
    9. 'ermi' → logprob: -8.673168182373047
    10. '=' → logprob: -9.048168182373047

Token 12: ' list' (ID: 1562)
  Prédit: ' permutations'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' permutations' → logprob: -0.07487815618515015
    2. ' list' → logprob: -3.324878215789795
    3. 'list' → logprob: -3.574878215789795
    4. 'per' → logprob: -4.824878215789795
    5. ' perm' → logprob: -10.324877738952637
    6. ' [' → logprob: -11.074877738952637
    7. 'perm' → logprob: -11.074877738952637
    8. ' permutation' → logprob: -11.199877738952637
    9. '[' → logprob: -11.824877738952637
    10. '[]' → logprob: -12.074877738952637

Token 13: '(map' (ID: 16946)
  Prédit: '(per'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '(per' → logprob: -0.5770356059074402
    2. '(' → logprob: -0.8270356059074402
    3. '(range' → logprob: -7.327035427093506
    4. '(p' → logprob: -8.327035903930664
    5. '(it' → logprob: -9.702035903930664
    6. '((' → logprob: -10.702035903930664
    7. '(<' → logprob: -10.952035903930664
    8. 'per' → logprob: -11.452035903930664
    9. '(iter' → logprob: -11.452035903930664
    10. '()' → logprob: -11.577035903930664

Token 14: '(int' (ID: 2742)
  Prédit: '(int'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(int' → logprob: -0.007400276605039835
    2. 'int' → logprob: -5.6324005126953125
    3. '(' → logprob: -6.5074005126953125
    4. '```' → logprob: -7.2574005126953125
    5. '=int' → logprob: -8.007400512695312
    6. '[int' → logprob: -8.007400512695312
    7. '(str' → logprob: -8.132400512695312
    8. '<int' → logprob: -8.632400512695312
    9. '(lambda' → logprob: -9.132400512695312
    10. '(input' → logprob: -9.257400512695312

Token 15: ',' (ID: 11)
  Prédit: '(input'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(input' → logprob: -0.06378665566444397
    2. '(' → logprob: -3.313786745071411
    3. ',input' → logprob: -3.813786745071411
    4. ',' → logprob: -6.063786506652832
    5. 'input' → logprob: -7.938786506652832
    6. '))' → logprob: -8.688786506652832
    7. '=input' → logprob: -8.813786506652832
    8. ')' → logprob: -10.188786506652832
    9. '(eval' → logprob: -10.188786506652832
    10. '<|end|>' → logprob: -10.188786506652832

Token 16: ' input' (ID: 3422)
  Prédit: 'input'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'input' → logprob: -0.011059258133172989
    2. ' input' → logprob: -4.511059284210205
    3. '(input' → logprob: -11.636058807373047
    4. ',input' → logprob: -13.136058807373047
    5. ')' → logprob: -15.136058807373047
    6. '=input' → logprob: -15.261058807373047
    7. '	input' → logprob: -16.511058807373047
    8. ' ' → logprob: -17.511058807373047
    9. '))' → logprob: -17.886058807373047
    10. '<input' → logprob: -17.886058807373047

Token 17: '().' (ID: 1454)
  Prédit: '().'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '().' → logprob: -0.15869054198265076
    2. '())' → logprob: -2.6586904525756836
    3. '()))' → logprob: -2.7836904525756836
    4. '()' → logprob: -4.283690452575684
    5. '()));' → logprob: -7.658690452575684
    6. '())))' → logprob: -8.533690452575684
    7. '()).' → logprob: -9.408690452575684
    8. '(),' → logprob: -9.533690452575684
    9. ')' → logprob: -9.908690452575684
    10. '(' → logprob: -9.908690452575684

Token 18: 'split' (ID: 13627)
  Prédit: 'split'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'split' → logprob: -0.0011740362970158458
    2. 'strip' → logprob: -6.751173973083496
    3. 'rstrip' → logprob: -12.876173973083496
    4. '(split' → logprob: -14.626173973083496
    5. ' split' → logprob: -14.876173973083496
    6. 'read' → logprob: -15.126173973083496
    7. ')' → logprob: -16.001174926757812
    8. 'spl' → logprob: -16.251174926757812
    9. 's' → logprob: -17.126174926757812
    10. '```' → logprob: -18.126174926757812

Token 19: '()))
' (ID: 24521)
  Prédit: '))'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '))' → logprob: -0.04448004066944122
    2. ')' → logprob: -3.169480085372925
    3. '()))' → logprob: -6.794479846954346
    4. '(' → logprob: -8.294480323791504
    5. ')))' → logprob: -10.419480323791504
    6. '())' → logprob: -10.669480323791504
    7. '()' → logprob: -10.669480323791504
    8. ''))' → logprob: -11.044480323791504
    9. '(p' → logprob: -11.919480323791504
    10. '),' → logprob: -12.919480323791504

Token 20: 'q' (ID: 80)
  Prédit: 'for'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'for' → logprob: -0.28884783387184143
    2. 'p' → logprob: -1.913847804069519
    3. 'per' → logprob: -2.9138479232788086
    4. ')
' → logprob: -3.7888479232788086
    5. ')' → logprob: -4.288847923278809
    6. '(' → logprob: -6.163847923278809
    7. 'perm' → logprob: -6.163847923278809
    8. '\' → logprob: -6.413847923278809
    9. 'if' → logprob: -6.913847923278809
    10. '\n' → logprob: -7.038847923278809

Token 21: ' =' (ID: 314)
  Prédit: '='
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '=' → logprob: -0.47887516021728516
    2. ' =' → logprob: -0.9788751602172852
    3. '_' → logprob: -5.603875160217285
    4. ')' → logprob: -7.478875160217285
    5. ' ' → logprob: -8.603875160217285
    6. '.' → logprob: -8.978875160217285
    7. '[' → logprob: -9.728875160217285
    8. '=[]' → logprob: -10.228875160217285
    9. '(' → logprob: -10.853875160217285
    10. ',' → logprob: -11.228875160217285

Token 22: ' list' (ID: 1562)
  Prédit: 'list'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'list' → logprob: -0.0038044729735702276
    2. 'p' → logprob: -6.253804683685303
    3. 'sorted' → logprob: -7.253804683685303
    4. 'per' → logprob: -7.628804683685303
    5. '[]' → logprob: -8.128804206848145
    6. '[p' → logprob: -9.128804206848145
    7. ' list' → logprob: -9.128804206848145
    8. '[list' → logprob: -9.253804206848145
    9. '[' → logprob: -10.503804206848145
    10. '0' → logprob: -10.878804206848145

Token 23: '(map' (ID: 16946)
  Prédit: '(per'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(per' → logprob: -0.29468148946762085
    2. '(map' → logprob: -1.6696815490722656
    3. '(' → logprob: -2.7946815490722656
    4. '(int' → logprob: -5.294681549072266
    5. '(it' → logprob: -7.544681549072266
    6. 'per' → logprob: -10.044681549072266
    7. '(
' → logprob: -10.044681549072266
    8. '()' → logprob: -10.169681549072266
    9. '(

' → logprob: -10.669681549072266
    10. '(list' → logprob: -10.794681549072266

Token 24: '(int' (ID: 2742)
  Prédit: '(int'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(int' → logprob: -0.0005967585020698607
    2. 'int' → logprob: -7.500596523284912
    3. ',int' → logprob: -10.87559700012207
    4. '[int' → logprob: -11.87559700012207
    5. '=int' → logprob: -12.00059700012207
    6. '<int' → logprob: -12.00059700012207
    7. '(' → logprob: -12.87559700012207
    8. ' int' → logprob: -13.50059700012207
    9. ']int' → logprob: -14.50059700012207
    10. '```' → logprob: -14.50059700012207

Token 25: ',' (ID: 11)
  Prédit: '(int'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(int' → logprob: -0.4849376678466797
    2. ',int' → logprob: -1.6099376678466797
    3. ',' → logprob: -1.7349376678466797
    4. 'int' → logprob: -4.85993766784668
    5. '[int' → logprob: -9.48493766784668
    6. '<int' → logprob: -9.98493766784668
    7. '=int' → logprob: -10.35993766784668
    8. '```' → logprob: -10.98493766784668
    9. ' ,' → logprob: -11.98493766784668
    10. '(' → logprob: -11.98493766784668

Token 26: ' input' (ID: 3422)
  Prédit: 'int'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'int' → logprob: -3.500108141452074e-05
    2. 'input' → logprob: -10.625035285949707
    3. ' int' → logprob: -12.000035285949707
    4. '(int' → logprob: -12.375035285949707
    5. '[int' → logprob: -15.500035285949707
    6. '<int' → logprob: -17.62503433227539
    7. 'map' → logprob: -18.25003433227539
    8. ',int' → logprob: -18.25003433227539
    9. '```' → logprob: -18.25003433227539
    10. 'range' → logprob: -18.87503433227539

Token 27: '().' (ID: 1454)
  Prédit: '(int'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '(int' → logprob: -0.0026030067820101976
    2. ',int' → logprob: -6.502603054046631
    3. 'int' → logprob: -7.752603054046631
    4. '```' → logprob: -8.752602577209473
    5. '=int' → logprob: -9.127602577209473
    6. '))' → logprob: -9.252602577209473
    7. ',' → logprob: -9.377602577209473
    8. '[int' → logprob: -9.502602577209473
    9. '<int' → logprob: -10.127602577209473
    10. ')' → logprob: -10.252602577209473

Token 28: 'split' (ID: 13627)
  Prédit: 'split'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'split' → logprob: -4.246537173457909e-06
    2. 'int' → logprob: -12.625003814697266
    3. '(split' → logprob: -15.625003814697266
    4. ' split' → logprob: -15.750003814697266
    5. 'spl' → logprob: -15.875003814697266
    6. '))' → logprob: -16.250003814697266
    7. 'input' → logprob: -16.250003814697266
    8. ')' → logprob: -16.375003814697266
    9. 'strip' → logprob: -16.500003814697266
    10. 'plit' → logprob: -17.875003814697266

Token 29: '()))

' (ID: 125972)
  Prédit: '))'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '))' → logprob: -0.20385977625846863
    2. '()))' → logprob: -2.328859806060791
    3. ')' → logprob: -2.578859806060791
    4. '()' → logprob: -5.203859806060791
    5. '())' → logprob: -5.203859806060791
    6. '(' → logprob: -9.328859329223633
    7. ''))' → logprob: -9.828859329223633
    8. ')))' → logprob: -11.953859329223633
    9. ' ))' → logprob: -12.203859329223633
    10. '"))' → logprob: -12.203859329223633

Token 30: 's' (ID: 82)
  Prédit: 'all'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'all' → logprob: -0.4134036600589752
    2. 'per' → logprob: -1.5384036302566528
    3. 'a' → logprob: -3.0384037494659424
    4. 'perm' → logprob: -3.6634037494659424
    5. 'fact' → logprob: -4.038403511047363
    6. 'arr' → logprob: -4.788403511047363
    7. 'nums' → logprob: -5.288403511047363
    8. 'ans' → logprob: -5.538403511047363
    9. 'factor' → logprob: -5.663403511047363
    10. 'p' → logprob: -5.788403511047363

Token 31: ' =' (ID: 314)
  Prédit: ' ='
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' =' → logprob: -0.9637177586555481
    2. '=' → logprob: -1.5887176990509033
    3. 'um' → logprob: -1.5887176990509033
    4. 'orted' → logprob: -2.0887176990509033
    5. 'o' → logprob: -3.8387176990509033
    6. 'ums' → logprob: -4.088717937469482
    7. 'et' → logprob: -4.213717937469482
    8. '(' → logprob: -4.588717937469482
    9. '_' → logprob: -5.338717937469482
    10. 'ort' → logprob: -5.838717937469482

Token 32: ' tuple' (ID: 31311)
  Prédit: 'sorted'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'sorted' → logprob: -0.6242238879203796
    2. 'per' → logprob: -1.3742239475250244
    3. 'list' → logprob: -1.6242239475250244
    4. '[]' → logprob: -4.749223709106445
    5. '0' → logprob: -6.124223709106445
    6. '[' → logprob: -7.249223709106445
    7. 'range' → logprob: -7.374223709106445
    8. ' permutations' → logprob: -7.499223709106445
    9. 'set' → logprob: -7.999223709106445
    10. ' list' → logprob: -8.124223709106445

Token 33: '(sorted' (ID: 92488)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(' → logprob: -0.16273245215415955
    2. '(p' → logprob: -2.2877323627471924
    3. '(per' → logprob: -3.0377323627471924
    4. '((' → logprob: -8.287732124328613
    5. '(range' → logprob: -8.287732124328613
    6. '([' → logprob: -9.162732124328613
    7. '(s' → logprob: -10.037732124328613
    8. '(sorted' → logprob: -11.412732124328613
    9. '(list' → logprob: -11.537732124328613
    10. '(
' → logprob: -11.787732124328613

Token 34: '(p' (ID: 2407)
  Prédit: '(p'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(p' → logprob: -0.008501344360411167
    2. '(range' → logprob: -4.8835015296936035
    3. '(' → logprob: -7.3835015296936035
    4. '(per' → logprob: -8.758501052856445
    5. '((' → logprob: -9.883501052856445
    6. 'p' → logprob: -10.758501052856445
    7. '(list' → logprob: -10.758501052856445
    8. '(set' → logprob: -11.633501052856445
    9. 'range' → logprob: -12.258501052856445
    10. '(s' → logprob: -12.758501052856445

Token 35: '))
' (ID: 2210)
  Prédit: '))'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '))' → logprob: -0.00866219773888588
    2. ')' → logprob: -4.758662223815918
    3. '(p' → logprob: -10.508662223815918
    4. '),' → logprob: -12.133662223815918
    5. '(' → logprob: -12.758662223815918
    6. '()))' → logprob: -12.758662223815918
    7. ',' → logprob: -12.883662223815918
    8. ')))' → logprob: -12.883662223815918
    9. '))
' → logprob: -13.508662223815918
    10. ' ))' → logprob: -13.883662223815918

Token 36: 'per' (ID: 543)
  Prédit: 'per'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'per' → logprob: -0.12771278619766235
    2. 'p' → logprob: -3.2527127265930176
    3. ')' → logprob: -3.3777127265930176
    4. '(' → logprob: -4.002712726593018
    5. 'a' → logprob: -4.627712726593018
    6. 'perm' → logprob: -4.752712726593018
    7. 'all' → logprob: -5.377712726593018
    8. '(per' → logprob: -7.127712726593018
    9. 'n' → logprob: -7.252712726593018
    10. '_per' → logprob: -7.377712726593018

Token 37: 'ms' (ID: 1782)
  Prédit: 'utations'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'utations' → logprob: -0.011240214109420776
    2. 'mut' → logprob: -5.136240005493164
    3. 'ut' → logprob: -5.261240005493164
    4. 'u' → logprob: -9.636240005493164
    5. '(' → logprob: -11.761240005493164
    6. 'utions' → logprob: -11.886240005493164
    7. '```' → logprob: -11.886240005493164
    8. 's' → logprob: -11.886240005493164
    9. 'um' → logprob: -13.136240005493164
    10. 'utat' → logprob: -13.386240005493164

Token 38: ' =' (ID: 314)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(' → logprob: -0.00047190272016450763
    2. '(s' → logprob: -8.375472068786621
    3. '=' → logprob: -8.750472068786621
    4. 's' → logprob: -10.625472068786621
    5. '(per' → logprob: -10.875472068786621
    6. '((' → logprob: -11.750472068786621
    7. ' =' → logprob: -12.000472068786621
    8. '()' → logprob: -12.250472068786621
    9. '('' → logprob: -12.500472068786621
    10. ')' → logprob: -12.875472068786621

Token 39: ' list' (ID: 1562)
  Prédit: 'per'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'per' → logprob: -0.004294096026569605
    2. 'list' → logprob: -5.504293918609619
    3. ' permutations' → logprob: -9.004294395446777
    4. '(per' → logprob: -9.504294395446777
    5. 'perm' → logprob: -11.504294395446777
    6. 'set' → logprob: -12.754294395446777
    7. 'sorted' → logprob: -13.004294395446777
    8. ' list' → logprob: -14.129294395446777
    9. '.per' → logprob: -14.379294395446777
    10. '-per' → logprob: -14.504294395446777

Token 40: '(per' (ID: 96497)
  Prédit: '(per'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(per' → logprob: -0.0009171743295155466
    2. '(' → logprob: -7.000916957855225
    3. '((' → logprob: -12.625917434692383
    4. '()' → logprob: -14.750917434692383
    5. '(paren' → logprob: -15.250917434692383
    6. '(it' → logprob: -15.500917434692383
    7. '(tuple' → logprob: -15.625917434692383
    8. '(
' → logprob: -15.875917434692383
    9. '(p' → logprob: -15.875917434692383
    10. '(filter' → logprob: -16.000917434692383

Token 41: 'mut' (ID: 10522)
  Prédit: 'utations'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'utations' → logprob: -0.41835641860961914
    2. 'mut' → logprob: -1.1683564186096191
    3. 's' → logprob: -3.543356418609619
    4. 't' → logprob: -6.918356418609619
    5. 'ut' → logprob: -7.418356418609619
    6. '(' → logprob: -8.668355941772461
    7. 'm' → logprob: -9.543355941772461
    8. 'u' → logprob: -9.793355941772461
    9. '(s' → logprob: -9.918355941772461
    10. 'per' → logprob: -10.418355941772461

Token 42: 'ations' (ID: 929)
  Prédit: 'ations'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'ations' → logprob: -0.062031541019678116
    2. 'utations' → logprob: -2.8120315074920654
    3. 'utions' → logprob: -10.062031745910645
    4. 's' → logprob: -11.312031745910645
    5. 'ut' → logprob: -12.062031745910645
    6. 'at' → logprob: -13.687031745910645
    7. 'u' → logprob: -14.312031745910645
    8. 't' → logprob: -14.437031745910645
    9. 'a' → logprob: -15.562031745910645
    10. 'ulations' → logprob: -15.687031745910645

Token 43: '(s' (ID: 1858)
  Prédit: '(s'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(s' → logprob: -3.7697225252486533e-06
    2. 's' → logprob: -12.750003814697266
    3. '(' → logprob: -15.000003814697266
    4. ')' → logprob: -15.250003814697266
    5. ' (' → logprob: -16.500003814697266
    6. '(range' → logprob: -17.125003814697266
    7. ')(' → logprob: -17.500003814697266
    8. ')s' → logprob: -18.250003814697266
    9. '```' → logprob: -18.750003814697266
    10. '(sorted' → logprob: -19.000003814697266

Token 44: '))
' (ID: 2210)
  Prédit: '))'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '))' → logprob: -0.0007125511183403432
    2. ')' → logprob: -7.2507123947143555
    3. ',' → logprob: -14.000712394714355
    4. '))
' → logprob: -14.000712394714355
    5. ')))' → logprob: -14.125712394714355
    6. '),' → logprob: -16.625713348388672
    7. ' ))' → logprob: -16.875713348388672
    8. '(' → logprob: -17.250713348388672
    9. '))

' → logprob: -17.250713348388672
    10. '()))' → logprob: -17.625713348388672

Token 45: 'a' (ID: 64)
  Prédit: 'p'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'p' → logprob: -0.2193686068058014
    2. ')' → logprob: -2.8443686962127686
    3. 'per' → logprob: -2.9693686962127686
    4. '(' → logprob: -3.0943686962127686
    5. '(p' → logprob: -3.8443686962127686
    6. 'len' → logprob: -5.9693684577941895
    7. '(len' → logprob: -6.2193684577941895
    8. '(per' → logprob: -6.2193684577941895
    9. 'index' → logprob: -6.7193684577941895
    10. '```' → logprob: -6.7193684577941895

Token 46: ' =' (ID: 314)
  Prédit: '_p'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_p' → logprob: -1.1004537343978882
    2. 'p' → logprob: -1.2254537343978882
    3. '.index' → logprob: -1.2254537343978882
    4. '.' → logprob: -3.1004538536071777
    5. '_' → logprob: -4.225453853607178
    6. '.p' → logprob: -4.850453853607178
    7. '_index' → logprob: -5.225453853607178
    8. ' =' → logprob: -6.100453853607178
    9. '_i' → logprob: -7.475453853607178
    10. 'l' → logprob: -7.600453853607178

Token 47: ' ' (ID: 220)
  Prédit: 'per'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'per' → logprob: -0.00030281138606369495
    2. '0' → logprob: -9.250303268432617
    3. 'perm' → logprob: -9.375303268432617
    4. ' perms' → logprob: -9.625303268432617
    5. '[' → logprob: -10.500303268432617
    6. 'p' → logprob: -11.625303268432617
    7. 'len' → logprob: -11.750303268432617
    8. 'b' → logprob: -13.000303268432617
    9. '(per' → logprob: -13.500303268432617
    10. 'list' → logprob: -13.750303268432617

Token 48: '0' (ID: 15)
  Prédit: 'per'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'per' → logprob: -0.00012415809032972902
    2. '[' → logprob: -9.875123977661133
    3. 'perm' → logprob: -10.500123977661133
    4. 'b' → logprob: -11.625123977661133
    5. 'len' → logprob: -11.625123977661133
    6. 'p' → logprob: -11.625123977661133
    7. '0' → logprob: -11.750123977661133
    8. ' perms' → logprob: -12.500123977661133
    9. '(per' → logprob: -13.500123977661133
    10. 'list' → logprob: -13.625123977661133

Token 49: '
' (ID: 198)
  Prédit: 'for'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'for' → logprob: -0.26080331206321716
    2. 'b' → logprob: -2.63580322265625
    3. '+' → logprob: -2.76080322265625
    4. 'while' → logprob: -3.13580322265625
    5. '(' → logprob: -4.13580322265625
    6. ')' → logprob: -4.51080322265625
    7. 'a' → logprob: -5.38580322265625
    8. 'i' → logprob: -5.51080322265625
    9. 'p' → logprob: -5.76080322265625
    10. ' for' → logprob: -6.13580322265625

Token 50: 'for' (ID: 1938)
  Prédit: 'for'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'for' → logprob: -0.05573693662881851
    2. 'b' → logprob: -3.555737018585205
    3. 'while' → logprob: -4.180737018585205
    4. '+' → logprob: -5.055737018585205
    5. 'a' → logprob: -6.680737018585205
    6. ' for' → logprob: -7.305737018585205
    7. '```' → logprob: -7.680737018585205
    8. 'p' → logprob: -8.055736541748047
    9. 'if' → logprob: -8.430736541748047
    10. 'i' → logprob: -8.555736541748047

Token 51: ' i' (ID: 575)
  Prédit: 'i'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'i' → logprob: -0.021751651540398598
    2. ' i' → logprob: -3.896751642227173
    3. 'perm' → logprob: -7.396751880645752
    4. 'x' → logprob: -7.896751880645752
    5. 'p' → logprob: -8.896751403808594
    6. '_' → logprob: -10.646751403808594
    7. ' perm' → logprob: -10.646751403808594
    8. 'per' → logprob: -11.896751403808594
    9. 'idx' → logprob: -12.271751403808594
    10. 'a' → logprob: -12.396751403808594

Token 52: ' in' (ID: 306)
  Prédit: ' in'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' in' → logprob: -0.14716431498527527
    2. 'in' → logprob: -2.2721643447875977
    3. ',' → logprob: -3.3971643447875977
    4. ' ,' → logprob: -8.897164344787598
    5. ' ' → logprob: -9.272164344787598
    6. ',in' → logprob: -11.147164344787598
    7. 'n' → logprob: -11.522164344787598
    8. 's' → logprob: -11.647164344787598
    9. ',n' → logprob: -11.897164344787598
    10. '  ' → logprob: -12.022164344787598

Token 53: ' range' (ID: 3352)
  Prédit: 'range'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'range' → logprob: -0.3540991544723511
    2. 'per' → logprob: -1.354099154472351
    3. ' range' → logprob: -3.2290992736816406
    4. ' perms' → logprob: -7.979099273681641
    5. 'perm' → logprob: -10.22909927368164
    6. 'p' → logprob: -10.60409927368164
    7. '(range' → logprob: -11.97909927368164
    8. '(per' → logprob: -12.72909927368164
    9. ' permutations' → logprob: -12.97909927368164
    10. ' perm' → logprob: -13.22909927368164

Token 54: '(len' (ID: 14990)
  Prédit: '(len'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(len' → logprob: -0.011049470864236355
    2. '(' → logprob: -4.511049270629883
    3. '(n' → logprob: -14.511049270629883
    4. '((' → logprob: -15.136049270629883
    5. '(a' → logprob: -15.136049270629883
    6. '(N' → logprob: -16.136049270629883
    7. '(length' → logprob: -16.511049270629883
    8. '(l' → logprob: -16.761049270629883
    9. 'len' → logprob: -16.886049270629883
    10. '(s' → logprob: -16.886049270629883

Token 55: '(per' (ID: 96497)
  Prédit: '(per'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(per' → logprob: -0.0001290454383706674
    2. '(' → logprob: -9.000128746032715
    3. '(p' → logprob: -12.750128746032715
    4. 'per' → logprob: -13.375128746032715
    5. '(s' → logprob: -15.000128746032715
    6. ' (' → logprob: -15.000128746032715
    7. ')' → logprob: -16.00012969970703
    8. '(
' → logprob: -16.75012969970703
    9. '(pl' → logprob: -17.12512969970703
    10. '	per' → logprob: -17.12512969970703

Token 56: 'ms' (ID: 1782)
  Prédit: 'ms'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'ms' → logprob: -0.5760821104049683
    2. 's' → logprob: -0.8260821104049683
    3. 'mut' → logprob: -10.576082229614258
    4. '```' → logprob: -10.576082229614258
    5. 'utations' → logprob: -10.951082229614258
    6. ')' → logprob: -11.201082229614258
    7. 'ps' → logprob: -11.201082229614258
    8. 'uts' → logprob: -11.451082229614258
    9. 'ls' → logprob: -11.826082229614258
    10. 'ns' → logprob: -11.826082229614258

Token 57: ')):
' (ID: 22530)
  Prédit: ')):'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')):' → logprob: -0.0861736461520195
    2. '):' → logprob: -3.4611735343933105
    3. '))' → logprob: -3.5861735343933105
    4. ')' → logprob: -3.9611735343933105
    5. ')):
' → logprob: -5.4611735343933105
    6. ')):
' → logprob: -9.336174011230469
    7. ':' → logprob: -9.711174011230469
    8. '):
' → logprob: -11.336174011230469
    9. ')>' → logprob: -12.586174011230469
    10. ']):' → logprob: -12.961174011230469

Token 58: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.404390424489975
    2. ' if' → logprob: -1.1543904542922974
    3. 'if' → logprob: -4.404390335083008
    4. ' ' → logprob: -6.029390335083008
    5. '    ' → logprob: -6.904390335083008
    6. '    
' → logprob: -7.529390335083008
    7. '   ' → logprob: -7.779390335083008
    8. '<|end|>' → logprob: -8.529390335083008
    9. '	if' → logprob: -8.904390335083008
    10. ' ' → logprob: -9.529390335083008

Token 59: ' if' (ID: 538)
  Prédit: ' if'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' if' → logprob: -0.496389240026474
    2. 'if' (adapté à ' if') → logprob: -1.3713892698287964
    3. '   ' → logprob: -1.9963892698287964
    4. ' ' → logprob: -6.621389389038086
    5. '	if' → logprob: -8.621389389038086
    6. '    ' → logprob: -9.496389389038086
    7. '   ' → logprob: -10.121389389038086
    8. ' ' → logprob: -10.996389389038086
    9. '  ' → logprob: -11.121389389038086
    10. '       ' → logprob: -11.621389389038086

Token 60: ' perms' (ID: 189933)
  Prédit: ' perms'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' perms' → logprob: -0.00025430647656321526
    2. ' p' → logprob: -8.75025463104248
    3. 'per' → logprob: -9.37525463104248
    4. ' permutations' → logprob: -11.87525463104248
    5. ' per' → logprob: -13.62525463104248
    6. '(per' → logprob: -14.12525463104248
    7. '	per' → logprob: -14.25025463104248
    8. ' perm' → logprob: -14.25025463104248
    9. ' ' → logprob: -15.62525463104248
    10. 'p' → logprob: -15.62525463104248

Token 61: '[i' (ID: 1768)
  Prédit: '[i'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '[i' → logprob: -1.3902033970225602e-05
    2. '[' → logprob: -11.250014305114746
    3. '[a' → logprob: -15.250014305114746
    4. '[I' → logprob: -15.250014305114746
    5. ')' → logprob: -16.87501335144043
    6. '[
' → logprob: -17.00001335144043
    7. '```' → logprob: -17.50001335144043
    8. '[s' → logprob: -17.50001335144043
    9. '[index' → logprob: -17.62501335144043
    10. ' [' → logprob: -18.00001335144043

Token 62: ']' (ID: 60)
  Prédit: ']'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ']' → logprob: -1.100529432296753
    2. '==' → logprob: -1.225529432296753
    3. ' ==' → logprob: -1.725529432296753
    4. ')' → logprob: -1.850529432296753
    5. ']==' → logprob: -3.350529432296753
    6. ')==' → logprob: -5.850529670715332
    7. ' ]' → logprob: -8.600529670715332
    8. '=' → logprob: -8.850529670715332
    9. ' )' → logprob: -9.225529670715332
    10. '[' → logprob: -10.225529670715332

Token 63: ' ==' (ID: 951)
  Prédit: '=='
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '==' → logprob: -0.4742332696914673
    2. ' ==' → logprob: -0.9742332696914673
    3. '=' → logprob: -8.974233627319336
    4. ')' → logprob: -11.224233627319336
    5. ']==' → logprob: -12.224233627319336
    6. ' =' → logprob: -12.474233627319336
    7. ')==' → logprob: -12.724233627319336
    8. '==
' → logprob: -13.599233627319336
    9. '===' → logprob: -14.599233627319336
    10. ' ' → logprob: -14.599233627319336

Token 64: ' tuple' (ID: 31311)
  Prédit: 'p'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'p' → logprob: -0.026460643857717514
    2. ' p' → logprob: -3.651460647583008
    3. 'tuple' → logprob: -9.276460647583008
    4. ' tuple' → logprob: -9.651460647583008
    5. '   ' → logprob: -14.026460647583008
    6. ' ' → logprob: -14.026460647583008
    7. '	p' → logprob: -14.901460647583008
    8. 'q' → logprob: -15.776460647583008
    9. '(p' → logprob: -16.651460647583008
    10. ' ' → logprob: -16.901460647583008

Token 65: '(p' (ID: 2407)
  Prédit: '(p'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(p' → logprob: -2.176947600673884e-05
    2. 'p' → logprob: -10.750021934509277
    3. '(' → logprob: -15.125021934509277
    4. ')p' → logprob: -18.37502098083496
    5. '<p' → logprob: -18.62502098083496
    6. '(
' → logprob: -18.87502098083496
    7. '[p' → logprob: -19.62502098083496
    8. '(a' → logprob: -19.62502098083496
    9. ' p' → logprob: -19.87502098083496
    10. '(q' → logprob: -19.87502098083496

Token 66: '):
' (ID: 1883)
  Prédit: '):'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '):' → logprob: -0.003694612765684724
    2. ')' → logprob: -5.753694534301758
    3. '):
' → logprob: -7.628694534301758
    4. ':' → logprob: -10.878694534301758
    5. ' ):' → logprob: -12.628694534301758
    6. ''):' → logprob: -12.628694534301758
    7. '):
' → logprob: -13.003694534301758
    8. '   ' → logprob: -14.003694534301758
    9. '"):' → logprob: -14.503694534301758
    10. ')):' → logprob: -14.628694534301758

Token 67: '       ' (ID: 309)
  Prédit: '       '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '       ' → logprob: -0.030071884393692017
    2. ':' → logprob: -4.15507173538208
    3. '   ' → logprob: -5.40507173538208
    4. 'a' → logprob: -5.53007173538208
    5. ' a' → logprob: -6.15507173538208
    6. ':
' → logprob: -6.28007173538208
    7. '
' → logprob: -7.40507173538208
    8. '```' → logprob: -9.030072212219238
    9. '\n' → logprob: -9.280072212219238
    10. ' :' → logprob: -9.530072212219238

Token 68: ' a' (ID: 261)
  Prédit: 'a'
  Correct (stricte): False
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'a' (adapté à ' a') → logprob: -0.005314277950674295
    2. ' a' → logprob: -5.255314350128174
    3. '   ' → logprob: -9.505313873291016
    4. '       ' → logprob: -12.505313873291016
    5. '```' → logprob: -13.880313873291016
    6. ' ' → logprob: -15.005313873291016
    7. 'i' → logprob: -15.130313873291016
    8. '_a' → logprob: -15.255313873291016
    9. '
' → logprob: -15.505313873291016
    10. '	a' → logprob: -15.880313873291016

Token 69: ' =' (ID: 314)
  Prédit: '='
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '=' → logprob: -0.47409558296203613
    2. ' =' → logprob: -0.9740955829620361
    3. ' +=' → logprob: -11.974095344543457
    4. '=i' → logprob: -12.099095344543457
    5. '+=' → logprob: -12.724095344543457
    6. ' ==' → logprob: -13.724095344543457
    7. '=a' → logprob: -14.474095344543457
    8. ' =)' → logprob: -14.724095344543457
    9. ' ' → logprob: -14.974095344543457
    10. '＝' → logprob: -15.349095344543457

Token 70: ' i' (ID: 575)
  Prédit: 'i'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'i' → logprob: -0.0007102862582542002
    2. ' i' → logprob: -7.250710487365723
    3. '   ' → logprob: -15.000710487365723
    4. '	i' → logprob: -17.625709533691406
    5. ' ' → logprob: -18.000709533691406
    6. 'a' → logprob: -19.875709533691406
    7. '(i' → logprob: -20.250709533691406
    8. '    ' → logprob: -20.625709533691406
    9. ',i' → logprob: -21.250709533691406
    10. '[i' → logprob: -21.250709533691406

Token 71: '
' (ID: 198)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.024159016087651253
    2. '
' → logprob: -4.024158954620361
    3. ' for' → logprob: -6.149158954620361
    4. '<|end|>' → logprob: -6.649158954620361
    5. ' ' → logprob: -7.149158954620361
    6. 'b' → logprob: -7.774158954620361
    7. '    
' → logprob: -8.02415943145752
    8. 'for' → logprob: -8.27415943145752
    9. ' if' → logprob: -8.27415943145752
    10. '  
' → logprob: -8.89915943145752

Token 72: '       ' (ID: 309)
  Prédit: 'b'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'b' → logprob: -0.4635884463787079
    2. '   ' → logprob: -1.7135884761810303
    3. ' 
' → logprob: -3.2135884761810303
    4. ' b' → logprob: -3.3385884761810303
    5. ' ' → logprob: -3.5885884761810303
    6. '    
' → logprob: -3.5885884761810303
    7. '\n' → logprob: -4.463588237762451
    8. '  
' → logprob: -4.588588237762451
    9. '
' → logprob: -5.463588237762451
    10. '   
' → logprob: -5.463588237762451

Token 73: ' break' (ID: 2338)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.1921689510345459
    2. 'if' → logprob: -2.067168951034546
    3. 'break' (adapté à ' break') → logprob: -4.192169189453125
    4. '       ' → logprob: -4.317169189453125
    5. 'elif' → logprob: -4.442169189453125
    6. ' if' → logprob: -5.817169189453125
    7. 'continue' → logprob: -6.442169189453125
    8. ' break' → logprob: -6.942169189453125
    9. '```' → logprob: -7.067169189453125
    10. ' ' → logprob: -7.317169189453125

Token 74: '
' (ID: 198)
  Prédit: 'b'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'b' → logprob: -8.578184497309849e-05
    2. ' b' → logprob: -9.875085830688477
    3. 'for' → logprob: -11.625085830688477
    4. '
' → logprob: -12.000085830688477
    5. '    
' → logprob: -12.500085830688477
    6. '  
' → logprob: -12.500085830688477
    7. '```' → logprob: -12.875085830688477
    8. '   ' → logprob: -13.125085830688477
    9. ' for' → logprob: -13.250085830688477
    10. 'a' → logprob: -13.375085830688477

Token 75: 'b' (ID: 65)
  Prédit: 'b'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'b' → logprob: -0.00023810577113181353
    2. '
' → logprob: -9.250238418579102
    3. '```' → logprob: -9.750238418579102
    4. '  
' → logprob: -10.375238418579102
    5. ' 
' → logprob: -10.875238418579102
    6. 'for' → logprob: -11.250238418579102
    7. ' b' → logprob: -12.125238418579102
    8. '``' → logprob: -12.375238418579102
    9. '    
' → logprob: -12.875238418579102
    10. '\n' → logprob: -13.625238418579102

Token 76: ' =' (ID: 314)
  Prédit: ' ='
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' =' → logprob: -0.020108046010136604
    2. ' ' → logprob: -4.645108222961426
    3. '=' → logprob: -4.770108222961426
    4. '<|end|>' → logprob: -6.395108222961426
    5. '<|end|>' → logprob: -10.020108222961426
    6. ' ==' → logprob: -10.770108222961426
    7. ')' → logprob: -11.145108222961426
    8. '_' → logprob: -11.645108222961426
    9. ' +=' → logprob: -11.645108222961426
    10. '  ' → logprob: -11.895108222961426

Token 77: ' ' (ID: 220)
  Prédit: '0'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '0' → logprob: -0.13279341161251068
    2. ' ' → logprob: -2.382793426513672
    3. ' next' → logprob: -3.882793426513672
    4. 'per' → logprob: -5.757793426513672
    5. ' [' → logprob: -5.882793426513672
    6. '[' → logprob: -6.257793426513672
    7. ' perms' → logprob: -6.757793426513672
    8. 'next' → logprob: -7.007793426513672
    9. '[next' → logprob: -7.882793426513672
    10. ' len' → logprob: -8.632793426513672

Token 78: '0' (ID: 15)
  Prédit: '0'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '0' → logprob: -0.020939240232110023
    2. 'per' → logprob: -5.020939350128174
    3. '[' → logprob: -5.145939350128174
    4. '[next' → logprob: -5.645939350128174
    5. 'next' → logprob: -5.895939350128174
    6. ' ' → logprob: -7.645939350128174
    7. 'i' → logprob: -8.020938873291016
    8. '[len' → logprob: -8.395938873291016
    9. '[i' → logprob: -8.395938873291016
    10. '[p' → logprob: -8.770938873291016

Token 79: '
' (ID: 198)
  Prédit: 'for'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'for' → logprob: -0.0029413290321826935
    2. ' for' → logprob: -5.877941131591797
    3. '<|end|>' → logprob: -9.127941131591797
    4. ' ' → logprob: -11.377941131591797
    5. '```' → logprob: -11.627941131591797
    6. '
' → logprob: -12.627941131591797
    7. '\n' → logprob: -14.127941131591797
    8. '\' → logprob: -14.752941131591797
    9. ' 
' → logprob: -14.877941131591797
    10. '`' → logprob: -14.877941131591797

Token 80: 'for' (ID: 1938)
  Prédit: 'for'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'for' → logprob: -0.0019299437990412116
    2. ' for' → logprob: -6.251929759979248
    3. '```' → logprob: -14.501930236816406
    4. '
' → logprob: -14.626930236816406
    5. '<|end|>' → logprob: -14.876930236816406
    6. '	for' → logprob: -18.001930236816406
    7. '0' → logprob: -18.751930236816406
    8. '[' → logprob: -19.001930236816406
    9. '.for' → logprob: -19.126930236816406
    10. ' ' → logprob: -19.251930236816406

Token 81: ' i' (ID: 575)
  Prédit: ' i'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' i' → logprob: -0.10129429399967194
    2. 'i' → logprob: -2.3512942790985107
    3. ' range' → logprob: -7.35129451751709
    4. 'range' → logprob: -7.85129451751709
    5. ' in' → logprob: -9.97629451751709
    6. ' ' → logprob: -11.85129451751709
    7. ' ' → logprob: -13.85129451751709
    8. 'in' → logprob: -14.60129451751709
    9. 'I' → logprob: -14.97629451751709
    10. '`' → logprob: -15.85129451751709

Token 82: ' in' (ID: 306)
  Prédit: ' in'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' in' → logprob: -0.011165844276547432
    2. 'in' → logprob: -4.511165618896484
    3. 'range' → logprob: -9.136165618896484
    4. ' range' → logprob: -11.886165618896484
    5. ' ' → logprob: -12.761165618896484
    6. 's' → logprob: -16.511165618896484
    7. '```' → logprob: -16.761165618896484
    8. '  ' → logprob: -16.761165618896484
    9. '(range' → logprob: -16.761165618896484
    10. 'space' → logprob: -17.136165618896484

Token 83: ' range' (ID: 3352)
  Prédit: ' range'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' range' → logprob: -0.47407984733581543
    2. 'range' → logprob: -0.9740798473358154
    3. '(range' → logprob: -12.974080085754395
    4. 'len' → logprob: -15.974080085754395
    5. ' ' → logprob: -16.099079132080078
    6. '```' → logprob: -16.224079132080078
    7. ' len' → logprob: -17.224079132080078
    8. '	range' → logprob: -17.224079132080078
    9. ' in' → logprob: -17.349079132080078
    10. 'in' → logprob: -17.599079132080078

Token 84: '(len' (ID: 14990)
  Prédit: '(len'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(len' → logprob: -0.00012047011114191264
    2. '(range' → logprob: -9.125120162963867
    3. 'range' → logprob: -11.625120162963867
    4. 'len' → logprob: -13.375120162963867
    5. '(' → logprob: -14.250120162963867
    6. '[len' → logprob: -15.750120162963867
    7. '<len' → logprob: -16.000120162963867
    8. ' (' → logprob: -17.375120162963867
    9. ',len' → logprob: -18.250120162963867
    10. ' range' → logprob: -18.500120162963867

Token 85: '(per' (ID: 96497)
  Prédit: '(per'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(per' → logprob: -0.0002342912630410865
    2. 'per' → logprob: -8.375234603881836
    3. '(' → logprob: -13.625234603881836
    4. ' (' → logprob: -13.625234603881836
    5. ' perms' → logprob: -14.250234603881836
    6. '(p' → logprob: -16.000234603881836
    7. '(pre' → logprob: -16.250234603881836
    8. 'perm' → logprob: -16.500234603881836
    9. '(pl' → logprob: -16.625234603881836
    10. 's' → logprob: -16.750234603881836

Token 86: 'ms' (ID: 1782)
  Prédit: 'ms'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'ms' → logprob: -0.016340035945177078
    2. 's' → logprob: -4.141340255737305
    3. 'erms' → logprob: -8.641340255737305
    4. 'r' → logprob: -9.766340255737305
    5. 'ps' → logprob: -10.891340255737305
    6. 'rs' → logprob: -11.891340255737305
    7. '```' → logprob: -11.891340255737305
    8. 'per' → logprob: -12.016340255737305
    9. ' perms' → logprob: -12.641340255737305
    10. 'ls' → logprob: -12.891340255737305

Token 87: ')):
' (ID: 22530)
  Prédit: '):
'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '):
' → logprob: -0.5808773040771484
    2. '):' → logprob: -0.8308773040771484
    3. '):
' → logprob: -5.330877304077148
    4. ')' → logprob: -10.205877304077148
    5. '   ' → logprob: -10.330877304077148
    6. '):

' → logprob: -11.955877304077148
    7. ':' → logprob: -12.830877304077148
    8. '()):
' → logprob: -13.705877304077148
    9. ' ' → logprob: -13.830877304077148
    10. '"):
' → logprob: -14.455877304077148

Token 88: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.00013238313840702176
    2. ' if' → logprob: -9.00013256072998
    3. 'if' → logprob: -12.25013256072998
    4. '<|end|>' → logprob: -13.00013256072998
    5. '```' → logprob: -14.37513256072998
    6. '   ' → logprob: -14.50013256072998
    7. '<|end|>' → logprob: -15.25013256072998
    8. '	if' → logprob: -15.62513256072998
    9. '       ' → logprob: -16.125131607055664
    10. '  ' → logprob: -17.000131607055664

Token 89: ' if' (ID: 538)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.008337614126503468
    2. ' if' → logprob: -4.883337497711182
    3. 'if' (adapté à ' if') → logprob: -7.258337497711182
    4. ' ' → logprob: -11.50833797454834
    5. '```' → logprob: -11.63333797454834
    6. '<|end|>' → logprob: -12.75833797454834
    7. '	if' → logprob: -13.00833797454834
    8. '       ' → logprob: -14.00833797454834
    9. '  ' → logprob: -14.25833797454834
    10. '    ' → logprob: -14.63333797454834

Token 90: ' perms' (ID: 189933)
  Prédit: ' perms'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' perms' → logprob: -0.0024839844554662704
    2. 'per' → logprob: -6.00248384475708
    3. '(per' → logprob: -12.252484321594238
    4. ' permutations' → logprob: -13.627484321594238
    5. ' perm' → logprob: -13.752484321594238
    6. '	per' → logprob: -15.252484321594238
    7. 'perm' → logprob: -15.377484321594238
    8. ' per' → logprob: -15.377484321594238
    9. 's' → logprob: -16.127483367919922
    10. 'q' → logprob: -16.502483367919922

Token 91: '[i' (ID: 1768)
  Prédit: '[i'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '[i' → logprob: -5.796184723294573e-06
    2. ' [' → logprob: -12.750005722045898
    3. '[' → logprob: -13.000005722045898
    4. '```' → logprob: -15.375005722045898
    5. ')[' → logprob: -16.5000057220459
    6. '   ' → logprob: -16.8750057220459
    7. ' ' → logprob: -17.6250057220459
    8. '[b' → logprob: -17.7500057220459
    9. '[I' → logprob: -18.1250057220459
    10. '[s' → logprob: -18.2500057220459

Token 92: ']' (ID: 60)
  Prédit: ' =='
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' ==' → logprob: -0.19951874017715454
    2. ']' → logprob: -2.1995186805725098
    3. '==' → logprob: -2.8245186805725098
    4. ')' → logprob: -5.57451868057251
    5. ']==' → logprob: -5.69951868057251
    6. '[i' → logprob: -5.82451868057251
    7. '[' → logprob: -8.324519157409668
    8. '[]' → logprob: -8.574519157409668
    9. ')==' → logprob: -9.949519157409668
    10. '<|end|>' → logprob: -10.574519157409668

Token 93: ' ==' (ID: 951)
  Prédit: ' =='
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' ==' → logprob: -0.16024768352508545
    2. '==' → logprob: -1.9102476835250854
    3. '[' → logprob: -12.035247802734375
    4. ')' → logprob: -12.285247802734375
    5. ']==' → logprob: -12.660247802734375
    6. '=' → logprob: -12.785247802734375
    7. '```' → logprob: -13.410247802734375
    8. ')==' → logprob: -13.660247802734375
    9. ' ' → logprob: -13.910247802734375
    10. ']' → logprob: -14.035247802734375

Token 94: ' tuple' (ID: 31311)
  Prédit: ' tuple'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' tuple' → logprob: -0.04858839511871338
    2. 'tuple' → logprob: -3.048588275909424
    3. '(tuple' → logprob: -13.923588752746582
    4. 'tu' → logprob: -16.798587799072266
    5. ' tu' → logprob: -17.673587799072266
    6. 'q' → logprob: -18.673587799072266
    7. ' tuples' → logprob: -18.923587799072266
    8. ' q' → logprob: -19.173587799072266
    9. '```' → logprob: -19.173587799072266
    10. 't' → logprob: -19.298587799072266

Token 95: '(q' (ID: 21479)
  Prédit: '(q'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(q' → logprob: -6.749814019713085e-06
    2. 'q' → logprob: -12.000006675720215
    3. '(' → logprob: -14.375006675720215
    4. '[q' → logprob: -18.75000762939453
    5. ' (' → logprob: -19.25000762939453
    6. '?q' → logprob: -20.00000762939453
    7. '	q' → logprob: -20.12500762939453
    8. '```' → logprob: -20.12500762939453
    9. '(s' → logprob: -20.62500762939453
    10. '(
' → logprob: -20.75000762939453

Token 96: '):
' (ID: 1883)
  Prédit: '):
'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '):
' → logprob: -0.07046318054199219
    2. '):' → logprob: -2.695463180541992
    3. '):
' → logprob: -7.695463180541992
    4. '       ' → logprob: -10.695463180541992
    5. ')' → logprob: -10.820463180541992
    6. '):

' → logprob: -11.445463180541992
    7. ':
' → logprob: -12.070463180541992
    8. ':' → logprob: -12.070463180541992
    9. ' ):
' → logprob: -13.070463180541992
    10. '   ' → logprob: -13.195463180541992

Token 97: '       ' (ID: 309)
  Prédit: '       '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '       ' → logprob: -0.005536231677979231
    2. 'b' → logprob: -5.255536079406738
    3. ' b' → logprob: -8.505536079406738
    4. '   ' → logprob: -10.005536079406738
    5. '      ' → logprob: -10.505536079406738
    6. '     ' → logprob: -12.380536079406738
    7. '           ' → logprob: -12.505536079406738
    8. ':' → logprob: -12.505536079406738
    9. '        ' → logprob: -12.630536079406738
    10. ' ' → logprob: -13.255536079406738

Token 98: ' b' (ID: 287)
  Prédit: 'b'
  Correct (stricte): False
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'b' (adapté à ' b') → logprob: -0.16022585332393646
    2. ' b' → logprob: -1.9102258682250977
    3. '   ' → logprob: -14.035225868225098
    4. 'i' → logprob: -14.535225868225098
    5. ' i' → logprob: -14.660225868225098
    6. ' ' → logprob: -17.28522491455078
    7. '	b' → logprob: -17.91022491455078
    8. '       ' → logprob: -18.16022491455078
    9. ')b' → logprob: -18.41022491455078
    10. '    ' → logprob: -18.78522491455078

Token 99: ' =' (ID: 314)
  Prédit: ' ='
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' =' → logprob: -0.25193482637405396
    2. '=' → logprob: -1.5019347667694092
    3. ' ' → logprob: -12.751935005187988
    4. '=i' → logprob: -13.376935005187988
    5. '   ' → logprob: -14.126935005187988
    6. '<|end|>' → logprob: -15.126935005187988
    7. '    ' → logprob: -17.126934051513672
    8. ' =)' → logprob: -17.126934051513672
    9. '＝' → logprob: -17.501934051513672
    10. ' =
' → logprob: -17.626934051513672

Token 100: ' i' (ID: 575)
  Prédit: 'i'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'i' → logprob: -0.5759412050247192
    2. ' i' → logprob: -0.8259412050247192
    3. '   ' → logprob: -13.95094108581543
    4. '	i' → logprob: -14.32594108581543
    5. ' ' → logprob: -15.95094108581543
    6. '[i' → logprob: -16.95094108581543
    7. '```' → logprob: -17.45094108581543
    8. ')i' → logprob: -17.70094108581543
    9. '(i' → logprob: -17.82594108581543
    10. ',i' → logprob: -17.82594108581543

Token 101: '
' (ID: 198)
  Prédit: '       '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '       ' → logprob: -0.0001438266917830333
    2. '   ' → logprob: -9.875144004821777
    3. '	' → logprob: -10.000144004821777
    4. '
' → logprob: -11.375144004821777
    5. '<|end|>' → logprob: -11.875144004821777
    6. '      ' → logprob: -12.125144004821777
    7. '           ' → logprob: -12.250144004821777
    8. '	break' → logprob: -12.625144004821777
    9. '	   ' → logprob: -13.125144004821777
    10. '     ' → logprob: -13.250144004821777

Token 102: '       ' (ID: 309)
  Prédit: '       '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '       ' → logprob: -0.09030287712812424
    2. 'print' → logprob: -2.4653029441833496
    3. '
' → logprob: -7.59030294418335
    4. '   ' → logprob: -8.215302467346191
    5. 'abs' → logprob: -8.340302467346191
    6. '        
' → logprob: -9.090302467346191
    7. 'break' → logprob: -9.090302467346191
    8. '           ' → logprob: -10.715302467346191
    9. '        ' → logprob: -10.840302467346191
    10. '```' → logprob: -11.340302467346191

Token 103: ' break' (ID: 2338)
  Prédit: 'break'
  Correct (stricte): False
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'break' (adapté à ' break') → logprob: -0.016946855932474136
    2. '       ' → logprob: -4.516946792602539
    3. ' break' → logprob: -5.141946792602539
    4. '	break' → logprob: -10.516946792602539
    5. '```' → logprob: -12.266946792602539
    6. '   ' → logprob: -13.266946792602539
    7. 'b' → logprob: -15.141946792602539
    8. '           ' → logprob: -15.141946792602539
    9. 'print' → logprob: -15.141946792602539
    10. 'br' → logprob: -15.516946792602539

Token 104: '
' (ID: 198)
  Prédit: 'print'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'print' → logprob: -8.73314929776825e-05
    2. '```' → logprob: -9.75008773803711
    3. '
' → logprob: -10.75008773803711
    4. 'abs' → logprob: -13.62508773803711
    5. '\
' → logprob: -13.62508773803711
    6. '``' → logprob: -13.75008773803711
    7. '    
' → logprob: -13.87508773803711
    8. '\n' → logprob: -14.00008773803711
    9. '  
' → logprob: -14.25008773803711
    10. '\' → logprob: -14.25008773803711

Token 105: 'print' (ID: 1598)
  Prédit: 'print'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'print' → logprob: -4.024604277219623e-05
    2. '
' → logprob: -10.375040054321289
    3. '```' → logprob: -12.125040054321289
    4. '\n' → logprob: -14.000040054321289
    5. '\
' → logprob: -14.000040054321289
    6. '\' → logprob: -14.125040054321289
    7. '  
' → logprob: -15.125040054321289
    8. ' print' → logprob: -15.500040054321289
    9. '
' → logprob: -15.750040054321289
    10. '``' → logprob: -15.875040054321289

Token 106: '(abs' (ID: 71957)
  Prédit: '(abs'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(abs' → logprob: -0.00029685118352063
    2. 'abs' → logprob: -8.250296592712402
    3. '(' → logprob: -10.250296592712402
    4. ' abs' → logprob: -15.625296592712402
    5. '(a' → logprob: -17.50029754638672
    6. '(
' → logprob: -18.75029754638672
    7. '((' → logprob: -19.12529754638672
    8. '```' → logprob: -19.50029754638672
    9. '(ans' → logprob: -19.75029754638672
    10. '(|' → logprob: -19.87529754638672

Token 107: '(a' (ID: 6271)
  Prédit: '(a'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(a' → logprob: -4.842555426876061e-06
    2. 'a' → logprob: -12.750004768371582
    3. '(' → logprob: -13.750004768371582
    4. '(b' → logprob: -14.000004768371582
    5. ')a' → logprob: -17.8750057220459
    6. ')' → logprob: -18.1250057220459
    7. ')(' → logprob: -18.6250057220459
    8. 'b' → logprob: -20.2500057220459
    9. '((' → logprob: -20.6250057220459
    10. '(
' → logprob: -20.7500057220459

Token 108: ' -' (ID: 533)
  Prédit: ' -'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' -' → logprob: -0.3715428411960602
    2. '-' → logprob: -1.3715428113937378
    3. '-b' → logprob: -2.8715429306030273
    4. 'b' → logprob: -12.871542930603027
    5. ' b' → logprob: -13.996542930603027
    6. ' ' → logprob: -14.871542930603027
    7. '−' → logprob: -17.24654197692871
    8. '   ' → logprob: -17.99654197692871
    9. '	b' → logprob: -18.24654197692871
    10. '-
' → logprob: -18.99654197692871

Token 109: ' b' (ID: 287)
  Prédit: 'b'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'b' → logprob: -0.0001584850688232109
    2. ' b' → logprob: -8.750158309936523
    3. ')b' → logprob: -17.125158309936523
    4. '(b' → logprob: -17.875158309936523
    5. '   ' → logprob: -18.375158309936523
    6. '	b' → logprob: -18.875158309936523
    7. '       ' → logprob: -21.125158309936523
    8. ')' → logprob: -21.250158309936523
    9. ' ' → logprob: -21.750158309936523
    10. '```' → logprob: -21.875158309936523

Token 110: '))' (ID: 915)
  Prédit: '))'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '))' → logprob: -0.008615161292254925
    2. ')' → logprob: -4.758615016937256
    3. ')))' → logprob: -14.758615493774414
    4. '))
' → logprob: -15.508615493774414
    5. ' ))' → logprob: -17.133615493774414
    6. '()))' → logprob: -17.383615493774414
    7. ')}' → logprob: -18.133615493774414
    8. '),' → logprob: -18.258615493774414
    9. ')
' → logprob: -18.508615493774414
    10. '])' → logprob: -19.008615493774414


RÉSUMÉ:
--------------------------------------------------------------------------------
Total des tokens analysés: 108
Tokens correctement prédits (1ère position, stricte): 48
Tokens correctement prédits (1ère position, avec adaptation): 51
Tokens correctement prédits (top 10): 90
Précision stricte (1ère position): 44.44%
Précision adaptée (1ère position): 47.22%
Précision (top 10): 83.33%
================================================================================
