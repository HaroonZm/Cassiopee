================================================================================
ANALYSE DE PRÉDICTION TOKEN PAR TOKEN (BATCH API)
Date: 2025-06-04 19:28:52
Modèle de tokenisation: gpt-4o-mini
================================================================================

SCRIPT ANALYSÉ:
--------------------------------------------------------------------------------
N, M = map(int, input().split())

if N == M:
    print("Yes")
else:
    print("No")
--------------------------------------------------------------------------------

RÉSULTATS D'ANALYSE TOKEN PAR TOKEN:
--------------------------------------------------------------------------------
Token 0: 'N' (ID: 45)
  → Token d'amorce (pas de prédiction)

Token 1: ',' (ID: 11)
  → Token d'amorce (pas de prédiction)

Token 2: ' M' (ID: 391)
  → Token d'amorce (pas de prédiction)

Token 3: ' =' (ID: 314)
  Prédit: '='
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '=' → logprob: -0.17474547028541565
    2. ',' → logprob: -1.9247454404830933
    3. ' =' → logprob: -4.299745559692383
    4. '```' → logprob: -7.799745559692383
    5. ';' → logprob: -8.799745559692383
    6. ')' → logprob: -9.299745559692383
    7. '.' → logprob: -10.049745559692383
    8. '#' → logprob: -10.549745559692383
    9. '[' → logprob: -10.674745559692383
    10. ',
' → logprob: -11.049745559692383

Token 4: ' map' (ID: 4014)
  Prédit: ' map'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' map' → logprob: -0.19206015765666962
    2. 'map' → logprob: -1.942060112953186
    3. ' ' → logprob: -3.6920602321624756
    4. '10' → logprob: -5.4420599937438965
    5. 'input' → logprob: -7.3170599937438965
    6. ' input' → logprob: -7.5670599937438965
    7. '0' → logprob: -8.192060470581055
    8. '5' → logprob: -8.817060470581055
    9. '20' → logprob: -9.067060470581055
    10. ' list' → logprob: -9.692060470581055

Token 5: '(int' (ID: 2742)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(' → logprob: -0.012351298704743385
    2. '(lambda' → logprob: -4.6373515129089355
    3. '```' → logprob: -6.7623515129089355
    4. '<|end|>' → logprob: -7.8873515129089355
    5. '(user' → logprob: -8.512351036071777
    6. '(int' → logprob: -8.762351036071777
    7. '(
' → logprob: -9.637351036071777
    8. ')' → logprob: -9.762351036071777
    9. '(token' → logprob: -9.762351036071777
    10. '(input' → logprob: -10.262351036071777

Token 6: ',' (ID: 11)
  Prédit: '(input'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '(input' → logprob: -0.07830429822206497
    2. '(' → logprob: -3.3283042907714844
    3. ')' → logprob: -3.3283042907714844
    4. '(int' → logprob: -6.578304290771484
    5. 'input' → logprob: -7.203304290771484
    6. '(str' → logprob: -7.828304290771484
    7. '(user' → logprob: -8.578304290771484
    8. '```' → logprob: -8.703304290771484
    9. '`)' → logprob: -9.203304290771484
    10. '`' → logprob: -9.578304290771484

Token 7: ' input' (ID: 3422)
  Prédit: ' input'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' input' → logprob: -0.5760123133659363
    2. 'input' → logprob: -0.8260123133659363
    3. '(input' → logprob: -9.82601261138916
    4. ')' → logprob: -11.07601261138916
    5. ',input' → logprob: -12.82601261138916
    6. '=input' → logprob: -15.32601261138916
    7. ' )' → logprob: -15.95101261138916
    8. '<input' → logprob: -15.95101261138916
    9. '[input' → logprob: -16.576011657714844
    10. '	input' → logprob: -16.701011657714844

Token 8: '().' (ID: 1454)
  Prédit: '())'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '())' → logprob: -0.9015554189682007
    2. '('' → logprob: -1.6515554189682007
    3. '()' → logprob: -1.9015554189682007
    4. '(""))' → logprob: -2.2765555381774902
    5. '(' → logprob: -2.5265555381774902
    6. '("")' → logprob: -4.15155553817749
    7. '("' → logprob: -4.27655553817749
    8. ')' → logprob: -4.77655553817749
    9. '(()' → logprob: -5.27655553817749
    10. '`()' → logprob: -5.52655553817749

Token 9: 'split' (ID: 13627)
  Prédit: 'split'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'split' → logprob: -0.00621305126696825
    2. 'strip' → logprob: -5.131213188171387
    3. 'read' → logprob: -8.506213188171387
    4. ')' → logprob: -9.881213188171387
    5. 'rstrip' → logprob: -10.631213188171387
    6. ' split' → logprob: -12.256213188171387
    7. 'decode' → logprob: -14.006213188171387
    8. 'replace' → logprob: -14.756213188171387
    9. 'startswith' → logprob: -15.506213188171387
    10. '(split' → logprob: -15.506213188171387

Token 10: '())

' (ID: 27654)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ')' → logprob: -0.010309260338544846
    2. '())' → logprob: -4.885309219360352
    3. '))' → logprob: -6.260309219360352
    4. '()' → logprob: -8.135309219360352
    5. '`)' → logprob: -8.135309219360352
    6. '(' → logprob: -8.885309219360352
    7. ')`' → logprob: -10.510309219360352
    8. '')' → logprob: -12.010309219360352
    9. '()))' → logprob: -12.635309219360352
    10. '```' → logprob: -12.760309219360352

Token 11: 'if' (ID: 366)
  Prédit: 'for'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'for' → logprob: -0.17999857664108276
    2. 'a' → logprob: -1.9299986362457275
    3. ' for' → logprob: -5.679998397827148
    4. 'A' → logprob: -5.929998397827148
    5. 'data' → logprob: -6.054998397827148
    6. 'array' → logprob: -6.304998397827148
    7. '#' → logprob: -6.804998397827148
    8. 'x' → logprob: -6.929998397827148
    9. 'arr' → logprob: -7.054998397827148
    10. 'd' → logprob: -7.054998397827148

Token 12: ' N' (ID: 478)
  Prédit: ' N'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' N' → logprob: -0.39621761441230774
    2. ' ' → logprob: -1.1462175846099854
    3. ' not' → logprob: -5.3962178230285645
    4. ' M' → logprob: -6.1462178230285645
    5. 'N' → logprob: -6.8962178230285645
    6. ''' → logprob: -7.6462178230285645
    7. ' ' → logprob: -8.271217346191406
    8. '  ' → logprob: -8.396217346191406
    9. ' a' → logprob: -8.521217346191406
    10. '"' → logprob: -9.396217346191406

Token 13: ' ==' (ID: 951)
  Prédit: ' >'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' >' → logprob: -0.013267992064356804
    2. '>' → logprob: -5.513267993927002
    3. ' <' → logprob: -5.513267993927002
    4. ' ' → logprob: -6.138267993927002
    5. ' ==' → logprob: -6.138267993927002
    6. ' >=' → logprob: -8.138267517089844
    7. ' <=' → logprob: -8.513267517089844
    8. ' %' → logprob: -9.638267517089844
    9. '  ' → logprob: -9.763267517089844
    10. '<' → logprob: -10.013267517089844

Token 14: ' M' (ID: 391)
  Prédit: ' M'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' M' → logprob: -0.743038535118103
    2. ' ' → logprob: -0.868038535118103
    3. '0' → logprob: -2.6180386543273926
    4. 'M' → logprob: -3.6180386543273926
    5. '1' → logprob: -5.368038654327393
    6. '2' → logprob: -10.743038177490234
    7. ' ' → logprob: -11.368038177490234
    8. ' '' → logprob: -11.618038177490234
    9. ''' → logprob: -11.743038177490234
    10. ' N' → logprob: -11.743038177490234

Token 15: ':
' (ID: 734)
  Prédit: ':'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ':' → logprob: -1.8550976164988242e-05
    2. ' :' → logprob: -11.625018119812012
    3. ':**' → logprob: -11.875018119812012
    4. '':' → logprob: -14.000018119812012
    5. '):' → logprob: -14.750018119812012
    6. '':'' → logprob: -15.125018119812012
    7. ':
' → logprob: -15.250018119812012
    8. '>:' → logprob: -15.250018119812012
    9. ':return' → logprob: -16.125019073486328
    10. '":' → logprob: -16.250019073486328

Token 16: '   ' (ID: 271)
  Prédit: ':'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ':' → logprob: -0.01675134152173996
    2. ':
' → logprob: -4.641751289367676
    3. '   ' → logprob: -5.016751289367676
    4. '\n' → logprob: -8.891751289367676
    5. '\' → logprob: -10.391751289367676
    6. ',' → logprob: -10.641751289367676
    7. ' :' → logprob: -10.641751289367676
    8. '    
' → logprob: -11.016751289367676
    9. ' print' → logprob: -11.141751289367676
    10. 'print' → logprob: -11.141751289367676

Token 17: ' print' (ID: 2123)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.3984198570251465
    2. ' print' → logprob: -1.3984198570251465
    3. 'print' (adapté à ' print') → logprob: -2.8984198570251465
    4. ' pass' → logprob: -4.6484198570251465
    5. '\n' → logprob: -5.1484198570251465
    6. '    ' → logprob: -5.7734198570251465
    7. '    
' → logprob: -6.0234198570251465
    8. '```' → logprob: -6.5234198570251465
    9. 'pass' → logprob: -6.8984198570251465
    10. '       ' → logprob: -6.8984198570251465

Token 18: '("' (ID: 568)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(' → logprob: -0.0027654136065393686
    2. '("("' → logprob: -6.25276517868042
    3. '('' → logprob: -7.37776517868042
    4. '()' → logprob: -9.002765655517578
    5. '("' → logprob: -10.127765655517578
    6. '(N' → logprob: -10.502765655517578
    7. '("")' → logprob: -12.002765655517578
    8. '(True' → logprob: -12.627765655517578
    9. '("""' → logprob: -13.502765655517578
    10. '(None' → logprob: -13.627765655517578

Token 19: 'Yes' (ID: 13022)
  Prédit: 'N'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'N' → logprob: -1.2738723754882812
    2. 'Equal' → logprob: -1.5238723754882812
    3. 'Yes' → logprob: -2.0238723754882812
    4. 'Hello' → logprob: -2.1488723754882812
    5. '")' → logprob: -2.6488723754882812
    6. '=' → logprob: -2.7738723754882812
    7. 'Same' → logprob: -3.6488723754882812
    8. '0' → logprob: -4.148872375488281
    9. 'equal' → logprob: -4.148872375488281
    10. 'No' → logprob: -4.273872375488281

Token 20: '")
' (ID: 1896)
  Prédit: '")'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '")' → logprob: -8.292095299111679e-05
    2. ')' → logprob: -9.500082969665527
    3. ')")' → logprob: -12.250082969665527
    4. '")
' → logprob: -12.875082969665527
    5. '!")' → logprob: -15.125082969665527
    6. '"' → logprob: -15.375082969665527
    7. '”)' → logprob: -16.75008201599121
    8. '")
' → logprob: -17.00008201599121
    9. '\")' → logprob: -17.00008201599121
    10. '");' → logprob: -17.87508201599121

Token 21: 'else' (ID: 2807)
  Prédit: 'else'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'else' → logprob: -0.10239225625991821
    2. ' else' → logprob: -2.6023921966552734
    3. 'elif' → logprob: -3.8523921966552734
    4. '```' → logprob: -7.352392196655273
    5. ' elif' → logprob: -7.602392196655273
    6. 'e' → logprob: -8.477392196655273
    7. '<|end|>' → logprob: -9.227392196655273
    8. ')' → logprob: -9.602392196655273
    9. '    
' → logprob: -9.602392196655273
    10. '   ' → logprob: -10.102392196655273

Token 22: ':
' (ID: 734)
  Prédit: ':'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ':' → logprob: -2.6060808522743173e-05
    2. ':
' → logprob: -11.250025749206543
    3. ' :' → logprob: -11.500025749206543
    4. '   ' → logprob: -13.000025749206543
    5. '):' → logprob: -15.750025749206543
    6. ':return' → logprob: -16.25002670288086
    7. ':**' → logprob: -16.50002670288086
    8. '```' → logprob: -17.12502670288086
    9. '：' → logprob: -17.25002670288086
    10. '():' → logprob: -17.25002670288086

Token 23: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.0003700165543705225
    2. '    ' → logprob: -9.000370025634766
    3. '"' → logprob: -9.250370025634766
    4. 'print' → logprob: -9.875370025634766
    5. '```' → logprob: -10.250370025634766
    6. '       ' → logprob: -10.500370025634766
    7. ' print' → logprob: -11.375370025634766
    8. ' ' → logprob: -12.000370025634766
    9. '     ' → logprob: -12.375370025634766
    10. '\n' → logprob: -12.625370025634766

Token 24: ' print' (ID: 2123)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.13122877478599548
    2. ' print' → logprob: -2.7562286853790283
    3. 'print' (adapté à ' print') → logprob: -2.8812286853790283
    4. '"' → logprob: -6.006228923797607
    5. '    ' → logprob: -7.756228923797607
    6. '```' → logprob: -8.63122844696045
    7. ' ' → logprob: -9.00622844696045
    8. '    
' → logprob: -10.13122844696045
    9. '       ' → logprob: -10.75622844696045
    10. '  ' → logprob: -10.75622844696045

Token 25: '("' (ID: 568)
  Prédit: '("'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '("' → logprob: -0.3875536620616913
    2. '(' → logprob: -1.1375536918640137
    3. '("("' → logprob: -7.887553691864014
    4. '("")' → logprob: -8.262553215026855
    5. '()' → logprob: -10.887553215026855
    6. '(""' → logprob: -11.637553215026855
    7. '('' → logprob: -12.137553215026855
    8. '("(' → logprob: -12.262553215026855
    9. '("""' → logprob: -12.512553215026855
    10. '(False' → logprob: -13.012553215026855

Token 26: 'No' (ID: 3160)
  Prédit: '"No'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '"No' → logprob: -0.022353021427989006
    2. 'No' → logprob: -4.022353172302246
    3. '"' → logprob: -5.522353172302246
    4. '"N' → logprob: -8.647353172302246
    5. '")' → logprob: -11.522353172302246
    6. '“No' → logprob: -11.897353172302246
    7. ''' → logprob: -13.647353172302246
    8. '""' → logprob: -13.897353172302246
    9. ' No' → logprob: -13.897353172302246
    10. ')' → logprob: -15.022353172302246

Token 27: '")' (ID: 1405)
  Prédit: '")'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '")' → logprob: -0.00012523093027994037
    2. ')' → logprob: -9.00012493133545
    3. ')")' → logprob: -13.37512493133545
    4. '"' → logprob: -15.87512493133545
    5. '")
' → logprob: -15.87512493133545
    6. '")

' → logprob: -19.125125885009766
    7. '')' → logprob: -19.375125885009766
    8. '”)' → logprob: -19.625125885009766
    9. '!")' → logprob: -19.750125885009766
    10. ')"' → logprob: -19.750125885009766


RÉSUMÉ:
--------------------------------------------------------------------------------
Total des tokens analysés: 25
Tokens correctement prédits (1ère position, stricte): 9
Tokens correctement prédits (1ère position, avec adaptation): 9
Tokens correctement prédits (top 10): 21
Précision stricte (1ère position): 36.00%
Précision adaptée (1ère position): 36.00%
Précision (top 10): 84.00%
================================================================================
