================================================================================
ANALYSE DE PRÉDICTION TOKEN PAR TOKEN (BATCH API)
Date: 2025-06-04 19:51:06
Modèle de tokenisation: gpt-4o-mini
================================================================================

SCRIPT ANALYSÉ:
--------------------------------------------------------------------------------
n = input()
n = int(n)
n = n ** 2
n = n * 3
print(n)
--------------------------------------------------------------------------------

RÉSULTATS D'ANALYSE TOKEN PAR TOKEN:
--------------------------------------------------------------------------------
Token 0: 'n' (ID: 77)
  → Token d'amorce (pas de prédiction)

Token 1: ' =' (ID: 314)
  → Token d'amorce (pas de prédiction)

Token 2: ' input' (ID: 3422)
  → Token d'amorce (pas de prédiction)

Token 3: '()
' (ID: 1234)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '(' → logprob: -0.0031533613801002502
    2. ''' → logprob: -6.628153324127197
    3. '('' → logprob: -7.003153324127197
    4. '"' → logprob: -8.003153800964355
    5. '(
' → logprob: -8.253153800964355
    6. '`' → logprob: -9.128153800964355
    7. '("("' → logprob: -9.628153800964355
    8. '()' → logprob: -10.003153800964355
    9. '```' → logprob: -10.378153800964355
    10. '[' → logprob: -11.503153800964355

Token 4: 'n' (ID: 77)
  Prédit: '+'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '+' → logprob: -0.393809050321579
    2. '.' → logprob: -1.5188090801239014
    3. '=' → logprob: -3.6438090801239014
    4. '*' → logprob: -4.393808841705322
    5. '\n' → logprob: -4.393808841705322
    6. '.strip' → logprob: -4.393808841705322
    7. '()' → logprob: -4.518808841705322
    8. ')' → logprob: -5.143808841705322
    9. '\' → logprob: -5.393808841705322
    10. '**' → logprob: -5.768808841705322

Token 5: ' =' (ID: 314)
  Prédit: '+'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '+' → logprob: -0.8422781229019165
    2. '\n' → logprob: -1.7172781229019165
    3. '```' → logprob: -2.217278003692627
    4. '[' → logprob: -2.467278003692627
    5. '*' → logprob: -2.842278003692627
    6. ')' → logprob: -3.342278003692627
    7. '\' → logprob: -3.967278003692627
    8. '.' → logprob: -4.217278003692627
    9. '#' → logprob: -4.342278003692627
    10. ''' → logprob: -5.217278003692627

Token 6: ' int' (ID: 677)
  Prédit: ' int'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' int' → logprob: -0.09344851970672607
    2. 'int' → logprob: -2.5934486389160156
    3. ' n' → logprob: -4.843448638916016
    4. ' input' → logprob: -5.343448638916016
    5. 'n' → logprob: -7.093448638916016
    6. 'input' → logprob: -7.718448638916016
    7. ' ' → logprob: -8.843448638916016
    8. ' float' → logprob: -9.593448638916016
    9. '"' → logprob: -9.718448638916016
    10. ' "' → logprob: -10.218448638916016

Token 7: '(n' (ID: 2406)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(' → logprob: -0.04902014508843422
    2. '(n' → logprob: -3.0490200519561768
    3. '('' → logprob: -8.424019813537598
    4. '()' → logprob: -9.299019813537598
    5. '("("' → logprob: -10.799019813537598
    6. '(
' → logprob: -10.924019813537598
    7. '```' → logprob: -11.049019813537598
    8. '`' → logprob: -11.424019813537598
    9. ' (' → logprob: -11.799019813537598
    10. '(`' → logprob: -12.174019813537598

Token 8: ')
' (ID: 446)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')' → logprob: -2.2200749754119897e-06
    2. ' )' → logprob: -14.625001907348633
    3. '`)' → logprob: -14.750001907348633
    4. '))' → logprob: -15.000001907348633
    5. '')' → logprob: -15.625001907348633
    6. ')`' → logprob: -15.625001907348633
    7. ')
' → logprob: -15.750001907348633
    8. '*' → logprob: -15.750001907348633
    9. '#' → logprob: -16.250001907348633
    10. '+' → logprob: -16.375001907348633

Token 9: 'n' (ID: 77)
  Prédit: '+'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '+' → logprob: -0.07037940621376038
    2. '*' → logprob: -3.8203794956207275
    3. '**' → logprob: -3.9453794956207275
    4. '%' → logprob: -4.820379257202148
    5. '#' → logprob: -4.945379257202148
    6. '+
' → logprob: -5.570379257202148
    7. '\n' → logprob: -6.570379257202148
    8. '\' → logprob: -7.070379257202148
    9. '_' → logprob: -7.070379257202148
    10. 'if' → logprob: -7.320379257202148

Token 10: ' =' (ID: 314)
  Prédit: '+'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '+' → logprob: -0.9234282970428467
    2. '<|end|>' → logprob: -1.5484282970428467
    3. '*' → logprob: -1.7984282970428467
    4. '**' → logprob: -2.7984282970428467
    5. ' ' → logprob: -3.1734282970428467
    6. '\n' → logprob: -3.4234282970428467
    7. '```' → logprob: -3.4234282970428467
    8. '
' → logprob: -4.173428535461426
    9. '#' → logprob: -4.298428535461426
    10. '\' → logprob: -4.673428535461426

Token 11: ' n' (ID: 297)
  Prédit: ' n'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' n' → logprob: -0.03758222982287407
    2. 'n' → logprob: -3.5375821590423584
    3. ' ' → logprob: -5.9125823974609375
    4. ' int' → logprob: -6.0375823974609375
    5. 'int' → logprob: -6.9125823974609375
    6. '0' → logprob: -7.0375823974609375
    7. ' input' → logprob: -8.412582397460938
    8. 'input' → logprob: -9.162582397460938
    9. '10' → logprob: -9.662582397460938
    10. '+' → logprob: -9.662582397460938

Token 12: ' **' (ID: 6240)
  Prédit: '+'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '+' → logprob: -0.22406943142414093
    2. ' +' → logprob: -2.599069356918335
    3. '**' → logprob: -2.724069356918335
    4. '*' → logprob: -3.224069356918335
    5. '%' → logprob: -4.349069595336914
    6. ' *' → logprob: -5.599069595336914
    7. ' **' → logprob: -5.974069595336914
    8. '<|end|>' → logprob: -7.224069595336914
    9. ' %' → logprob: -7.974069595336914
    10. '#' → logprob: -8.724069595336914

Token 13: ' ' (ID: 220)
  Prédit: '2'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '2' → logprob: -0.03004111908376217
    2. ' ' → logprob: -3.530041217803955
    3. '3' → logprob: -8.155040740966797
    4. '0' → logprob: -12.905040740966797
    5. '1' → logprob: -15.405040740966797
    6. '(' → logprob: -15.405040740966797
    7. '4' → logprob: -15.655040740966797
    8. '5' → logprob: -17.030040740966797
    9. ' ' → logprob: -17.155040740966797
    10. '6' → logprob: -17.280040740966797

Token 14: '2' (ID: 17)
  Prédit: '2'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '2' → logprob: -0.008637258782982826
    2. '3' → logprob: -4.758637428283691
    3. '0' → logprob: -11.008637428283691
    4. '(' → logprob: -13.133637428283691
    5. '5' → logprob: -13.883637428283691
    6. '4' → logprob: -14.008637428283691
    7. ' ' → logprob: -14.383637428283691
    8. '1' → logprob: -14.508637428283691
    9. 'n' → logprob: -15.008637428283691
    10. '10' → logprob: -15.383637428283691

Token 15: '
' (ID: 198)
  Prédit: '\n'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '\n' → logprob: -0.498034805059433
    2. '\' → logprob: -1.8730348348617554
    3. '
' → logprob: -1.8730348348617554
    4. '<|end|>' → logprob: -3.248034715652466
    5. '+' → logprob: -3.873034715652466
    6. '#' → logprob: -4.998034954071045
    7. '```' → logprob: -5.248034954071045
    8. '*' → logprob: -5.373034954071045
    9. 'newline' → logprob: -6.373034954071045
    10. ')' → logprob: -6.748034954071045

Token 16: 'n' (ID: 77)
  Prédit: 'print'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'print' → logprob: -0.08284444361925125
    2. '\n' → logprob: -3.5828444957733154
    3. '\' → logprob: -3.8328444957733154
    4. '#' → logprob: -4.582844257354736
    5. '
' → logprob: -4.582844257354736
    6. '(' → logprob: -6.332844257354736
    7. ')' → logprob: -6.457844257354736
    8. '<|end|>' → logprob: -6.832844257354736
    9. '+' → logprob: -6.957844257354736
    10. '(print' → logprob: -7.082844257354736

Token 17: ' =' (ID: 314)
  Prédit: ''
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False

Token 18: ' n' (ID: 297)
  Prédit: ' str'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' str' → logprob: -0.10281752049922943
    2. 'str' → logprob: -2.3528175354003906
    3. ' n' → logprob: -6.227817535400391
    4. 'n' → logprob: -8.47781753540039
    5. ' ' → logprob: -8.60281753540039
    6. ' int' → logprob: -9.60281753540039
    7. ' input' → logprob: -9.85281753540039
    8. 'int' → logprob: -10.97781753540039
    9. ' float' → logprob: -10.97781753540039
    10. ''' → logprob: -11.35281753540039

Token 19: ' *' (ID: 425)
  Prédit: '**'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '**' → logprob: -0.5593556761741638
    2. '+' → logprob: -1.4343557357788086
    3. '<|end|>' → logprob: -2.8093557357788086
    4. '%' → logprob: -3.0593557357788086
    5. ' **' → logprob: -3.4343557357788086
    6. ' ' → logprob: -4.434355735778809
    7. '#' → logprob: -4.934355735778809
    8. '\n' → logprob: -5.059355735778809
    9. '*' → logprob: -5.059355735778809
    10. '.' → logprob: -5.684355735778809

Token 20: ' ' (ID: 220)
  Prédit: '2'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '2' → logprob: -0.25512680411338806
    2. ' ' → logprob: -1.5051268339157104
    3. '3' → logprob: -6.630126953125
    4. '4' → logprob: -7.005126953125
    5. '10' → logprob: -7.380126953125
    6. '5' → logprob: -8.880126953125
    7. '1' → logprob: -9.880126953125
    8. '6' → logprob: -10.005126953125
    9. ' n' → logprob: -10.380126953125
    10. '7' → logprob: -10.880126953125

Token 21: '3' (ID: 18)
  Prédit: '2'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '2' → logprob: -0.0013774950057268143
    2. '3' → logprob: -7.251377582550049
    3. '5' → logprob: -7.751377582550049
    4. '10' → logprob: -9.50137710571289
    5. 'n' → logprob: -9.75137710571289
    6. '4' → logprob: -9.87637710571289
    7. '7' → logprob: -10.75137710571289
    8. '1' → logprob: -10.87637710571289
    9. '6' → logprob: -12.87637710571289
    10. '9' → logprob: -13.12637710571289

Token 22: '
' (ID: 198)
  Prédit: '\n'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '\n' → logprob: -0.882179319858551
    2. '\' → logprob: -1.7571792602539062
    3. '*' → logprob: -1.8821792602539062
    4. '+' → logprob: -2.2571792602539062
    5. '<|end|>' → logprob: -2.6321792602539062
    6. '
' → logprob: -3.3821792602539062
    7. '#' → logprob: -4.007179260253906
    8. 'n' → logprob: -5.007179260253906
    9. 'print' → logprob: -5.132179260253906
    10. ' ' → logprob: -5.382179260253906

Token 23: 'print' (ID: 1598)
  Prédit: '+'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '+' → logprob: -0.18666456639766693
    2. '*' → logprob: -2.436664581298828
    3. '\' → logprob: -3.561664581298828
    4. 'n' → logprob: -4.061664581298828
    5. '\n' → logprob: -4.186664581298828
    6. '
' → logprob: -5.686664581298828
    7. '#' → logprob: -5.686664581298828
    8. '```' → logprob: -5.811664581298828
    9. ')' → logprob: -6.061664581298828
    10. '<|end|>' → logprob: -6.186664581298828

Token 24: '(n' (ID: 2406)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(' → logprob: -0.001222370658069849
    2. '(n' → logprob: -6.751222133636475
    3. '('' → logprob: -10.501222610473633
    4. '("("' → logprob: -10.751222610473633
    5. ' (' → logprob: -13.376222610473633
    6. '((' → logprob: -14.501222610473633
    7. '()' → logprob: -14.501222610473633
    8. '(

' → logprob: -15.876222610473633
    9. '(`' → logprob: -16.251222610473633
    10. '(
' → logprob: -16.376222610473633

Token 25: ')' (ID: 8)
  Prédit: ')'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')' → logprob: -1.5048530030981055e-06
    2. '))' → logprob: -13.750001907348633
    3. ' )' → logprob: -15.000001907348633
    4. ')`' → logprob: -17.000001907348633
    5. '`)' → logprob: -18.875001907348633
    6. '(' → logprob: -19.000001907348633
    7. '')' → logprob: -19.000001907348633
    8. ')}' → logprob: -19.750001907348633
    9. ')
' → logprob: -19.750001907348633
    10. ')n' → logprob: -20.125001907348633


RÉSUMÉ:
--------------------------------------------------------------------------------
Total des tokens analysés: 23
Tokens correctement prédits (1ère position, stricte): 4
Tokens correctement prédits (1ère position, avec adaptation): 4
Tokens correctement prédits (top 10): 14
Précision stricte (1ère position): 17.39%
Précision adaptée (1ère position): 17.39%
Précision (top 10): 60.87%
================================================================================
