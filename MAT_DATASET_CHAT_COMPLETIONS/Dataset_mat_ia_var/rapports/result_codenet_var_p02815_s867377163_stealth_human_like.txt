================================================================================
ANALYSE DE PRÉDICTION TOKEN PAR TOKEN (BATCH API)
Date: 2025-06-04 19:32:29
Modèle de tokenisation: gpt-4o-mini
================================================================================

SCRIPT ANALYSÉ:
--------------------------------------------------------------------------------
import sys

sys.setrecursionlimit(10**6) # Je me demande si c'est vraiment nécessaire ici ?

readline = sys.stdin.readline
read = sys.stdin.read

# Je suppose qu'on lit une première valeur n puis une liste, ça doit faire l'affaire
n, *c = [int(x) for x in read().split()]
c.sort(reverse=True)  # Tri décroissant, je suppose que c'est utile plus loin...

MOD = 10**9 + 7

ans = 0
for idx, val in enumerate(c):
    # on ajoute val multiplié par (idx+2), modulo MOD au cas où ça déborde
    ans += ((idx + 2) * val) % MOD
    ans = ans % MOD  # On aurait pu faire sans la 2e modulo ici mais bon...

mult = pow(2, 2 * n - 2, MOD)
result = (ans * mult) % MOD
print(result)  # Je mets tout dans une variable pour impression, c'est plus clair je trouve

# Peut-être que tout n'est pas optimal mais ça fait le boulot.
--------------------------------------------------------------------------------

RÉSULTATS D'ANALYSE TOKEN PAR TOKEN:
--------------------------------------------------------------------------------
Token 0: 'import' (ID: 561)
  → Token d'amorce (pas de prédiction)

Token 1: ' sys' (ID: 12228)
  → Token d'amorce (pas de prédiction)

Token 2: '

' (ID: 279)
  → Token d'amorce (pas de prédiction)

Token 3: 'sys' (ID: 17324)
  Prédit: '.'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '.' → logprob: -0.18268179893493652
    2. '\n' → logprob: -2.1826817989349365
    3. 'import' → logprob: -3.5576817989349365
    4. '<|end|>' → logprob: -4.932682037353516
    5. '' → logprob: -5.807682037353516
    6. 'newline' → logprob: -5.932682037353516
    7. '\' → logprob: -6.057682037353516
    8. 'print' → logprob: -6.432682037353516
    9. '[' → logprob: -6.557682037353516
    10. '<|end|>' → logprob: -6.807682037353516

Token 4: '.set' (ID: 1230)
  Prédit: '.'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '.' → logprob: -4.0126840758603066e-05
    2. ' .' → logprob: -10.875040054321289
    3. '.user' → logprob: -12.250040054321289
    4. '.`' → logprob: -12.750040054321289
    5. '.readline' → logprob: -13.125040054321289
    6. '.import' → logprob: -13.500040054321289
    7. '.stdout' → logprob: -14.000040054321289
    8. '.exit' → logprob: -14.125040054321289
    9. '."""' → logprob: -14.250040054321289
    10. '.​' → logprob: -14.875040054321289

Token 5: 'rec' (ID: 9285)
  Prédit: '_'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '_' → logprob: -0.04026559367775917
    2. 'sys' → logprob: -5.4152655601501465
    3. '_sys' → logprob: -5.6652655601501465
    4. ' _' → logprob: -5.6652655601501465
    5. 'attr' → logprob: -5.9152655601501465
    6. 'xt' → logprob: -5.9152655601501465
    7. '_trace' → logprob: -6.0402655601501465
    8. 's' → logprob: -6.1652655601501465
    9. '_xt' → logprob: -6.4152655601501465
    10. '_limit' → logprob: -6.5402655601501465

Token 6: 'ursion' (ID: 41658)
  Prédit: 'ursion'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'ursion' → logprob: -0.011730228550732136
    2. 't' → logprob: -6.511730194091797
    3. 'urs' → logprob: -6.511730194091797
    4. 'ursive' → logprob: -6.636730194091797
    5. 'sys' → logprob: -7.011730194091797
    6. 'ut' → logprob: -7.136730194091797
    7. 'all' → logprob: -7.386730194091797
    8. 'urf' → logprob: -7.386730194091797
    9. '_sys' → logprob: -7.511730194091797
    10. 'ur' → logprob: -7.636730194091797

Token 7: 'limit' (ID: 19698)
  Prédit: 'limit'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'limit' → logprob: -0.11447080969810486
    2. '_limit' → logprob: -2.2394707202911377
    3. '_depth' → logprob: -6.989470958709717
    4. '_' → logprob: -8.114470481872559
    5. 'depth' → logprob: -8.989470481872559
    6. 'lim' → logprob: -9.114470481872559
    7. 'error' → logprob: -10.239470481872559
    8. 'al' → logprob: -10.239470481872559
    9. ' limit' → logprob: -10.739470481872559
    10. 'r' → logprob: -11.364470481872559

Token 8: '(' (ID: 7)
  Prédit: '('
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(' → logprob: -3.292907877039397e-06
    2. '(
' → logprob: -13.37500286102295
    3. ' (' → logprob: -14.00000286102295
    4. '(

' → logprob: -14.75000286102295
    5. '("("' → logprob: -15.50000286102295
    6. '('' → logprob: -16.375003814697266
    7. '((' → logprob: -16.625003814697266
    8. '()' → logprob: -16.750003814697266
    9. '(`' → logprob: -17.625003814697266
    10. '(
' → logprob: -18.000003814697266

Token 9: '10' (ID: 702)
  Prédit: '100'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '100' → logprob: -0.16057778894901276
    2. '10' → logprob: -1.9105777740478516
    3. '500' → logprob: -8.660577774047852
    4. ' ' → logprob: -8.785577774047852
    5. '300' → logprob: -11.160577774047852
    6. '1' → logprob: -12.160577774047852
    7. '400' → logprob: -13.035577774047852
    8. '999' → logprob: -13.160577774047852
    9. '  ' → logprob: -13.785577774047852
    10. '150' → logprob: -13.910577774047852

Token 10: '**' (ID: 410)
  Prédit: '0'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '0' → logprob: -0.00045605594641529024
    2. '4' → logprob: -8.625455856323242
    3. '00' → logprob: -9.125455856323242
    4. '000' → logprob: -9.125455856323242
    5. '2' → logprob: -10.500455856323242
    6. '6' → logprob: -10.625455856323242
    7. ')' → logprob: -13.000455856323242
    8. '3' → logprob: -13.000455856323242
    9. '_' → logprob: -14.125455856323242
    10. ''' → logprob: -14.625455856323242

Token 11: '6' (ID: 21)
  Prédit: '7'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '7' → logprob: -0.0005170515505596995
    2. '8' → logprob: -8.000516891479492
    3. '6' → logprob: -9.000516891479492
    4. '9' → logprob: -9.750516891479492
    5. ' ' → logprob: -17.750516891479492
    6. ')' → logprob: -19.125516891479492
    7. '```' → logprob: -19.375516891479492
    8. '}' → logprob: -20.375516891479492
    9. '**' → logprob: -21.250516891479492
    10. '(' → logprob: -22.750516891479492

Token 12: ')' (ID: 8)
  Prédit: ')'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')' → logprob: -3.8889261304575484e-06
    2. '))' → logprob: -12.625003814697266
    3. ' )' → logprob: -14.625003814697266
    4. ')))' → logprob: -17.375003814697266
    5. ')
' → logprob: -17.875003814697266
    6. '）' → logprob: -18.375003814697266
    7. '`)' → logprob: -18.500003814697266
    8. '')' → logprob: -18.875003814697266
    9. ' ' → logprob: -19.500003814697266
    10. ')`' → logprob: -19.500003814697266

Token 13: ' #' (ID: 1069)
  Prédit: '
'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '
' → logprob: -0.08282545953989029
    2. '' → logprob: -3.7078254222869873
    3. '\n' → logprob: -3.7078254222869873
    4. '
' → logprob: -4.207825660705566
    5. '

' → logprob: -4.832825660705566
    6. '```' → logprob: -5.707825660705566
    7. '\' → logprob: -5.957825660705566
    8. 'newline' → logprob: -7.832825660705566
    9. '  
' → logprob: -8.332825660705566
    10. '#' → logprob: -8.832825660705566

Token 14: ' Je' (ID: 4678)
  Prédit: ' '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' ' → logprob: -0.04069306701421738
    2. ' Maximum' → logprob: -5.040693283081055
    3. ' The' → logprob: -5.290693283081055
    4. ' maximum' → logprob: -5.540693283081055
    5. ''s' → logprob: -6.165693283081055
    6. ' Write' → logprob: -6.290693283081055
    7. ' max' → logprob: -6.540693283081055
    8. ''' → logprob: -6.665693283081055
    9. '  ' → logprob: -6.665693283081055
    10. ' ▁' → logprob: -6.790693283081055

Token 15: ' me' (ID: 668)
  Prédit: 't'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 't' → logprob: -0.02774732932448387
    2. 'te' → logprob: -5.02774715423584
    3. '```' → logprob: -5.77774715423584
    4. 'st' → logprob: -5.90274715423584
    5. 'm' → logprob: -6.40274715423584
    6. 'mp' → logprob: -6.52774715423584
    7. 'ter' → logprob: -7.02774715423584
    8. 'd' → logprob: -7.27774715423584
    9. 'p' → logprob: -7.34024715423584
    10. 'u' → logprob: -7.59024715423584

Token 16: ' demande' (ID: 26737)
  Prédit: 's'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 's' → logprob: -0.1733531653881073
    2. '```' → logprob: -3.2983531951904297
    3. 'su' → logprob: -3.4233531951904297
    4. '_s' → logprob: -4.29835319519043
    5. 'sus' → logprob: -4.67335319519043
    6. 'a' → logprob: -4.67335319519043
    7. ' su' → logprob: -4.79835319519043
    8. ' suis' → logprob: -5.29835319519043
    9. ''s' → logprob: -5.42335319519043
    10. ' t' → logprob: -5.67335319519043

Token 17: ' si' (ID: 1784)
  Prédit: ' pourquoi'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' pourquoi' → logprob: -0.07471819967031479
    2. ' ' → logprob: -3.8247182369232178
    3. ' si' → logprob: -3.9497182369232178
    4. ' ' → logprob: -4.574717998504639
    5. ' combien' → logprob: -5.824717998504639
    6. ',' → logprob: -5.949717998504639
    7. ' why' → logprob: -5.949717998504639
    8. ' à' → logprob: -6.199717998504639
    9. ' s' → logprob: -6.324717998504639
    10. 's' → logprob: -6.699717998504639

Token 18: ' c' (ID: 274)
  Prédit: 'cela'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'cela' → logprob: -0.24687905609607697
    2. 'c' → logprob: -2.1218791007995605
    3. 'ce' → logprob: -3.2468791007995605
    4. ' ce' → logprob: -3.7468791007995605
    5. ' ça' → logprob: -4.3718791007995605
    6. ' c' → logprob: -4.4968791007995605
    7. ' cela' → logprob: -5.1218791007995605
    8. 'ça' → logprob: -5.9968791007995605
    9. ' cette' → logprob: -7.6218791007995605
    10. ' la' → logprob: -7.6218791007995605

Token 19: ''est' (ID: 6616)
  Prédit: 'a'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'a' → logprob: -0.2503059208393097
    2. ''' → logprob: -2.6253058910369873
    3. ''a' → logprob: -3.1253058910369873
    4. '   ' → logprob: -3.2503058910369873
    5. ' ' → logprob: -3.8753058910369873
    6. 'la' → logprob: -4.750306129455566
    7. ' '' → logprob: -5.000306129455566
    8. '    ' → logprob: -5.250306129455566
    9. '  ' → logprob: -5.500306129455566
    10. ''s' → logprob: -5.500306129455566

Token 20: ' vraiment' (ID: 26637)
  Prédit: ' suff'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' suff' → logprob: -0.6340948939323425
    2. 's' → logprob: -0.8840948939323425
    3. 'utile' → logprob: -3.3840949535369873
    4. 'né' → logprob: -5.009094715118408
    5. 'asse' → logprob: -5.759094715118408
    6. ' suf' → logprob: -5.884094715118408
    7. ' utile' → logprob: -6.134094715118408
    8. 'bien' → logprob: -6.509094715118408
    9. '```' → logprob: -7.259094715118408
    10. 'possible' → logprob: -7.384094715118408

Token 21: ' nécessaire' (ID: 43098)
  Prédit: 'né'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'né' → logprob: -0.448903888463974
    2. ' utile' → logprob: -1.9489039182662964
    3. 'utile' → logprob: -2.448903799057007
    4. 'necess' → logprob: -3.573903799057007
    5. ' suff' → logprob: -3.698903799057007
    6. ' necess' → logprob: -4.073904037475586
    7. ' nécessaire' → logprob: -4.073904037475586
    8. 's' → logprob: -4.448904037475586
    9. ' né' → logprob: -5.198904037475586
    10. 'util' → logprob: -5.323904037475586

Token 22: ' ici' (ID: 27994)
  Prédit: '\'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '\' → logprob: -0.9338887929916382
    2. '
' → logprob: -1.0588887929916382
    3. '\n' → logprob: -1.4338887929916382
    4. '' → logprob: -4.933888912200928
    5. '

' → logprob: -5.183888912200928
    6. ')' → logprob: -5.933888912200928
    7. '```' → logprob: -6.308888912200928
    8. '
' → logprob: -6.433888912200928
    9. '#' → logprob: -6.683888912200928
    10. '  
' → logprob: -7.183888912200928

Token 23: ' ?

' (ID: 13570)
  Prédit: '
'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '
' → logprob: -0.0976928249001503
    2. '\n' → logprob: -3.7226927280426025
    3. '' → logprob: -3.7226927280426025
    4. '

' → logprob: -3.8476927280426025
    5. '\' → logprob: -4.347692966461182
    6. '
' → logprob: -5.597692966461182
    7. ')' → logprob: -6.722692966461182
    8. '#' → logprob: -6.722692966461182
    9. '  
' → logprob: -6.722692966461182
    10. '```' → logprob: -6.847692966461182

Token 24: 'read' (ID: 1293)
  Prédit: '
'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '
' → logprob: -0.28629666566848755
    2. '\' → logprob: -2.1612966060638428
    3. '\n' → logprob: -2.2862966060638428
    4. '
' → logprob: -4.536296844482422
    5. '

' → logprob: -4.661296844482422
    6. '' → logprob: -5.286296844482422
    7. '  
' → logprob: -6.536296844482422
    8. '```' → logprob: -6.661296844482422
    9. '#' → logprob: -6.786296844482422
    10. 'import' → logprob: -7.411296844482422

Token 25: 'line' (ID: 1137)
  Prédit: 'line'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'line' → logprob: -0.03131697699427605
    2. '_line' → logprob: -3.7813169956207275
    3. 'lines' → logprob: -5.531316757202148
    4. '()' → logprob: -6.656316757202148
    5. 'er' → logprob: -6.906316757202148
    6. '_' → logprob: -7.406316757202148
    7. 'Line' → logprob: -8.281316757202148
    8. 'l' → logprob: -8.781316757202148
    9. 'ln' → logprob: -8.781316757202148
    10. '_input' → logprob: -8.781316757202148

Token 26: ' =' (ID: 314)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(' → logprob: -0.17661763727664948
    2. '()' → logprob: -2.8016176223754883
    3. '=' → logprob: -2.9266176223754883
    4. ' =' → logprob: -3.3016176223754883
    5. ')' → logprob: -5.426617622375488
    6. '.' → logprob: -5.676617622375488
    7. '```' → logprob: -6.801617622375488
    8. 'import' → logprob: -8.426617622375488
    9. ']' → logprob: -8.551617622375488
    10. ' (' → logprob: -8.676617622375488

Token 27: ' sys' (ID: 12228)
  Prédit: 'sys'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'sys' → logprob: -0.2689184844493866
    2. ' sys' → logprob: -1.518918514251709
    3. 'input' → logprob: -4.143918514251709
    4. ' input' → logprob: -7.018918514251709
    5. 'lambda' → logprob: -9.64391803741455
    6. ' lambda' → logprob: -11.76891803741455
    7. '=sys' → logprob: -11.76891803741455
    8. '	sys' → logprob: -12.14391803741455
    9. '(sys' → logprob: -12.51891803741455
    10. 'stdin' → logprob: -14.89391803741455

Token 28: '.stdin' (ID: 93480)
  Prédit: '.stdin'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '.stdin' → logprob: -0.012061596848070621
    2. '.' → logprob: -4.512061595916748
    3. '.stdout' → logprob: -7.387061595916748
    4. '.readline' → logprob: -8.012062072753906
    5. '.std' → logprob: -10.637062072753906
    6. ' .' → logprob: -11.012062072753906
    7. '.argv' → logprob: -11.512062072753906
    8. '.stderr' → logprob: -12.262062072753906
    9. '.input' → logprob: -12.512062072753906
    10. '.version' → logprob: -14.387062072753906

Token 29: '.readline' (ID: 74673)
  Prédit: '.readline'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '.readline' → logprob: -0.0011512940982356668
    2. '.' → logprob: -7.626151084899902
    3. '.read' → logprob: -7.751151084899902
    4. '.buffer' → logprob: -8.376151084899902
    5. '.readlines' → logprob: -13.376151084899902
    6. '.write' → logprob: -15.626151084899902
    7. '.fast' → logprob: -15.876151084899902
    8. ' .' → logprob: -16.12615203857422
    9. '.reader' → logprob: -16.25115203857422
    10. '.Buffered' → logprob: -16.50115203857422

Token 30: '
' (ID: 198)
  Prédit: '
'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '
' → logprob: -0.5256257653236389
    2. 'def' → logprob: -1.5256257057189941
    3. '\n' → logprob: -3.025625705718994
    4. '()' → logprob: -3.025625705718994
    5. '

' → logprob: -3.650625705718994
    6. '' → logprob: -4.150625705718994
    7. '\' → logprob: -4.650625705718994
    8. '```' → logprob: -4.650625705718994
    9. '#' → logprob: -5.025625705718994
    10. '
' → logprob: -5.150625705718994

Token 31: 'read' (ID: 1293)
  Prédit: 'def'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'def' → logprob: -0.37567755579948425
    2. '
' → logprob: -1.3756775856018066
    3. '

' → logprob: -3.1256775856018066
    4. 'n' → logprob: -4.750677585601807
    5. '\n' → logprob: -5.375677585601807
    6. '```' → logprob: -6.625677585601807
    7. '\' → logprob: -7.375677585601807
    8. '
' → logprob: -7.500677585601807
    9. 'import' → logprob: -9.125677108764648
    10. 'class' → logprob: -9.375677108764648

Token 32: ' =' (ID: 314)
  Prédit: 'line'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'line' → logprob: -0.0005100222188048065
    2. 'ine' → logprob: -7.625510215759277
    3. 'lin' → logprob: -11.875510215759277
    4. 'l' → logprob: -12.000510215759277
    5. 'lines' → logprob: -12.875510215759277
    6. '_line' → logprob: -13.625510215759277
    7. 'li' → logprob: -13.875510215759277
    8. 'ln' → logprob: -14.125510215759277
    9. '```' → logprob: -14.375510215759277
    10. 'Line' → logprob: -14.500510215759277

Token 33: ' sys' (ID: 12228)
  Prédit: ' sys'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' sys' → logprob: -0.6941985487937927
    2. 'sys' → logprob: -0.6941985487937927
    3. 'input' → logprob: -7.6941986083984375
    4. '=sys' → logprob: -7.9441986083984375
    5. '(sys' → logprob: -9.569198608398438
    6. ' input' → logprob: -9.819198608398438
    7. 'stdin' → logprob: -10.194198608398438
    8. 'read' → logprob: -10.444198608398438
    9. '	sys' → logprob: -11.069198608398438
    10. 'lambda' → logprob: -11.694198608398438

Token 34: '.stdin' (ID: 93480)
  Prédit: '.stdin'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '.stdin' → logprob: -0.0007665063603781164
    2. '.' → logprob: -7.875766277313232
    3. '.stdout' → logprob: -8.00076675415039
    4. 'stdin' → logprob: -10.62576675415039
    5. '.std' → logprob: -10.87576675415039
    6. '.read' → logprob: -12.75076675415039
    7. '.argv' → logprob: -13.25076675415039
    8. '.stderr' → logprob: -13.50076675415039
    9. '.readline' → logprob: -14.50076675415039
    10. ' stdin' → logprob: -15.00076675415039

Token 35: '.read' (ID: 7211)
  Prédit: '.read'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '.read' → logprob: -0.014822394587099552
    2. '.readline' → logprob: -4.514822483062744
    3. '.' → logprob: -6.264822483062744
    4. '.buffer' → logprob: -6.889822483062744
    5. 'read' → logprob: -7.139822483062744
    6. '.readlines' → logprob: -10.389822006225586
    7. 'buffer' → logprob: -11.514822006225586
    8. ' .' → logprob: -11.764822006225586
    9. '.Read' → logprob: -13.639822006225586
    10. '.write' → logprob: -13.764822006225586

Token 36: '

' (ID: 279)
  Prédit: '
'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '
' → logprob: -0.14925050735473633
    2. '

' → logprob: -2.5242505073547363
    3. '()' → logprob: -3.2742505073547363
    4. 'def' → logprob: -4.899250507354736
    5. '\n' → logprob: -5.524250507354736
    6. '<|end|>' → logprob: -6.774250507354736
    7. '(' → logprob: -6.899250507354736
    8. '#' → logprob: -7.024250507354736
    9. '()

' → logprob: -7.274250507354736
    10. ')' → logprob: -7.274250507354736

Token 37: '#' (ID: 2)
  Prédit: 'def'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'def' → logprob: -0.00900215096771717
    2. 'n' → logprob: -5.259002208709717
    3. 'class' → logprob: -6.384002208709717
    4. '
' → logprob: -7.884002208709717
    5. '\n' → logprob: -7.884002208709717
    6. '#' → logprob: -8.134001731872559
    7. '\' → logprob: -8.259001731872559
    8. 'input' → logprob: -8.384001731872559
    9. '```' → logprob: -8.884001731872559
    10. 'data' → logprob: -9.509001731872559

Token 38: ' Je' (ID: 4678)
  Prédit: 'def'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'def' → logprob: -0.19262155890464783
    2. ' ' → logprob: -2.1926214694976807
    3. '#' → logprob: -3.6926214694976807
    4. 'n' → logprob: -4.44262170791626
    5. ' def' → logprob: -5.06762170791626
    6. 'd' → logprob: -5.06762170791626
    7. 'data' → logprob: -5.44262170791626
    8. 'a' → logprob: -6.19262170791626
    9. 'input' → logprob: -6.56762170791626
    10. 's' → logprob: -6.94262170791626

Token 39: ' suppose' (ID: 35968)
  Prédit: ' ='
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' =' → logprob: -0.1224832683801651
    2. '=' → logprob: -3.747483253479004
    3. 's' → logprob: -3.997483253479004
    4. ' suis' → logprob: -4.247483253479004
    5. 'def' → logprob: -4.372483253479004
    6. ' peux' → logprob: -5.622483253479004
    7. ' n' → logprob: -5.747483253479004
    8. ' ' → logprob: -5.872483253479004
    9. ' veux' → logprob: -5.872483253479004
    10. ' vais' → logprob: -5.997483253479004

Token 40: ' qu' (ID: 474)
  Prédit: ' que'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' que' → logprob: -0.013688809238374233
    2. 'que' → logprob: -4.763689041137695
    3. ' that' → logprob: -5.888689041137695
    4. 'def' → logprob: -6.763689041137695
    5. 'that' → logprob: -8.513689041137695
    6. ' ' → logprob: -8.763689041137695
    7. 's' → logprob: -9.388689041137695
    8. ' qu' → logprob: -9.388689041137695
    9. '```' → logprob: -9.388689041137695
    10. 'import' → logprob: -9.513689041137695

Token 41: ''on' (ID: 25812)
  Prédit: ''on'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ''on' → logprob: -0.50640469789505
    2. ''il' → logprob: -1.6314046382904053
    3. 'e' → logprob: -1.8814046382904053
    4. 'on' → logprob: -4.131404876708984
    5. 'il' → logprob: -4.631404876708984
    6. ''' → logprob: -4.756404876708984
    7. ''ici' → logprob: -5.381404876708984
    8. 'que' → logprob: -5.506404876708984
    9. ' on' → logprob: -6.006404876708984
    10. ''une' → logprob: -6.756404876708984

Token 42: ' lit' (ID: 11980)
  Prédit: ' va'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' va' → logprob: -0.11773642152547836
    2. ' n' → logprob: -3.867736339569092
    3. ' continue' → logprob: -4.117736339569092
    4. ' a' → logprob: -4.117736339569092
    5. ' peut' → logprob: -4.617736339569092
    6. 'a' → logprob: -5.242736339569092
    7. ' veut' → logprob: -5.367736339569092
    8. ' pourrait' → logprob: -5.367736339569092
    9. ' utilise' → logprob: -5.367736339569092
    10. ' doit' → logprob: -5.617736339569092

Token 43: ' une' (ID: 2463)
  Prédit: '()'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '()' → logprob: -0.05861187353730202
    2. 'tout' → logprob: -4.183611869812012
    3. ' =' → logprob: -4.808611869812012
    4. ' les' → logprob: -5.433611869812012
    5. ' ' → logprob: -5.558611869812012
    6. ' tout' → logprob: -5.683611869812012
    7. ' la' → logprob: -5.808611869812012
    8. 'les' → logprob: -6.433611869812012
    9. 'le' → logprob: -6.433611869812012
    10. ' toute' → logprob: -6.558611869812012

Token 44: ' première' (ID: 23423)
  Prédit: ' ligne'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' ligne' → logprob: -0.4747093915939331
    2. ' ' → logprob: -2.3497095108032227
    3. 'ligne' → logprob: -2.4747095108032227
    4. ' input' → logprob: -2.8497095108032227
    5. 'entrée' → logprob: -3.0997095108032227
    6. ' seule' → logprob: -4.349709510803223
    7. 'l' → logprob: -4.474709510803223
    8. ' liste' → logprob: -4.974709510803223
    9. ' phrase' → logprob: -5.474709510803223
    10. 'input' → logprob: -5.474709510803223

Token 45: ' valeur' (ID: 41664)
  Prédit: ' ligne'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' ligne' → logprob: -0.12021400034427643
    2. 'ligne' → logprob: -2.6202139854431152
    3. ' ' → logprob: -3.4952139854431152
    4. ' line' → logprob: -5.620213985443115
    5. 'line' → logprob: -6.370213985443115
    6. 'l' → logprob: -6.495213985443115
    7. ' partie' → logprob: -6.870213985443115
    8. '()' → logprob: -7.745213985443115
    9. ' ' → logprob: -8.495214462280273
    10. ' )' → logprob: -8.870214462280273

Token 46: ' n' (ID: 297)
  Prédit: ' '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' ' → logprob: -0.5014241337776184
    2. ',' → logprob: -1.6264240741729736
    3. 'n' → logprob: -2.8764240741729736
    4. '(' → logprob: -3.2514240741729736
    5. '()' → logprob: -3.7514240741729736
    6. 's' → logprob: -3.8764240741729736
    7. ')' → logprob: -4.001424312591553
    8. ' ,' → logprob: -5.626424312591553
    9. '\' → logprob: -5.751424312591553
    10. '\n' → logprob: -5.751424312591553

Token 47: ' puis' (ID: 18766)
  Prédit: '='
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '=' → logprob: -0.3868104815483093
    2. ' =' → logprob: -1.761810541152954
    3. 'n' → logprob: -2.136810541152954
    4. ' ' → logprob: -4.886810302734375
    5. '\' → logprob: -5.261810302734375
    6. ')' → logprob: -5.261810302734375
    7. '\n' → logprob: -5.761810302734375
    8. ',' → logprob: -6.136810302734375
    9. '#' → logprob: -6.511810302734375
    10. '
' → logprob: -7.136810302734375

Token 48: ' une' (ID: 2463)
  Prédit: ' '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' ' → logprob: -1.106544852256775
    2. ':' → logprob: -1.481544852256775
    3. 'n' → logprob: -1.981544852256775
    4. ' une' → logprob: -2.7315449714660645
    5. 'une' → logprob: -2.7315449714660645
    6. ' n' → logprob: -3.4815449714660645
    7. ' ensuite' → logprob: -3.6065449714660645
    8. ' la' → logprob: -3.7315449714660645
    9. ' un' → logprob: -4.2315449714660645
    10. '=' → logprob: -4.3565449714660645

Token 49: ' liste' (ID: 31719)
  Prédit: ' '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' ' → logprob: -0.04183286055922508
    2. ' ligne' → logprob: -4.54183292388916
    3. 'n' → logprob: -5.29183292388916
    4. 'ligne' → logprob: -5.41683292388916
    5. ' liste' → logprob: -5.54183292388916
    6. 's' → logprob: -5.91683292388916
    7. 'suite' → logprob: -6.04183292388916
    8. 'l' → logprob: -6.16683292388916
    9. 'liste' → logprob: -6.54183292388916
    10. ' n' → logprob: -7.04183292388916

Token 50: ',' (ID: 11)
  Prédit: 'n'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'n' → logprob: -0.6375601887702942
    2. ' =' → logprob: -2.6375601291656494
    3. '(n' → logprob: -2.7625601291656494
    4. '\' → logprob: -3.0125601291656494
    5. ',' → logprob: -3.1375601291656494
    6. '[' → logprob: -3.2625601291656494
    7. '\n' → logprob: -3.2625601291656494
    8. '[n' → logprob: -3.7625601291656494
    9. '_' → logprob: -4.0125603675842285
    10. '=' → logprob: -4.1375603675842285

Token 51: ' ça' (ID: 13590)
  Prédit: ' n'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' n' → logprob: -0.4907187819480896
    2. ' ' → logprob: -1.3657188415527344
    3. 'n' → logprob: -2.2407188415527344
    4. '<|end|>' → logprob: -5.115718841552734
    5. ',' → logprob: -5.740718841552734
    6. '_' → logprob: -5.865718841552734
    7. ' =' → logprob: -5.990718841552734
    8. ' 
' → logprob: -5.990718841552734
    9. ' a' → logprob: -6.365718841552734
    10. ' then' → logprob: -6.740718841552734

Token 52: ' doit' (ID: 21822)
  Prédit: 'n'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'n' → logprob: -0.009425725787878036
    2. '
' → logprob: -4.759425640106201
    3. '\n' → logprob: -7.634425640106201
    4. '

' → logprob: -8.38442611694336
    5. '\' → logprob: -10.25942611694336
    6. '```' → logprob: -11.25942611694336
    7. ' n' → logprob: -11.50942611694336
    8. '[n' → logprob: -12.00942611694336
    9. '
' → logprob: -12.00942611694336
    10. ' 
' → logprob: -12.50942611694336

Token 53: ' faire' (ID: 8119)
  Prédit: ' ='
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' =' → logprob: -0.43488386273384094
    2. ' ' → logprob: -2.0598838329315186
    3. ' être' → logprob: -2.3098838329315186
    4. ' servir' → logprob: -3.3098838329315186
    5. ' be' → logprob: -3.6848838329315186
    6. ' n' → logprob: -4.184884071350098
    7. '  ' → logprob: -4.934884071350098
    8. ' res' → logprob: -5.184884071350098
    9. ' continuer' → logprob: -5.309884071350098
    10. ' probablement' → logprob: -5.559884071350098

Token 54: ' l' (ID: 305)
  Prédit: 'n'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'n' → logprob: -0.05774832144379616
    2. '\n' → logprob: -3.307748317718506
    3. '
' → logprob: -4.307748317718506
    4. ' n' → logprob: -6.057748317718506
    5. '\' → logprob: -6.932748317718506
    6. '```' → logprob: -7.057748317718506
    7. ' 
' → logprob: -8.057748794555664
    8. '

' → logprob: -8.307748794555664
    9. '[n' → logprob: -8.557748794555664
    10. '
' → logprob: -8.557748794555664

Token 55: ''aff' (ID: 53397)
  Prédit: 'e'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'e' → logprob: -0.5876275897026062
    2. 'a' → logprob: -0.8376275897026062
    3. ''ensemble' → logprob: -5.212627410888672
    4. 'es' → logprob: -6.712627410888672
    5. ''a' → logprob: -6.962627410888672
    6. ''' → logprob: -8.087627410888672
    7. ''import' → logprob: -8.087627410888672
    8. ''ent' → logprob: -8.337627410888672
    9. ''en' → logprob: -8.337627410888672
    10. ''e' → logprob: -8.462627410888672

Token 56: 'aire' (ID: 8189)
  Prédit: 'ect'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'ect' → logprob: -0.09504732489585876
    2. 'ichage' → logprob: -3.0950472354888916
    3. 'n' → logprob: -4.470047473907471
    4. 'ic' → logprob: -4.845047473907471
    5. 'a' → logprob: -5.970047473907471
    6. 'icher' → logprob: -5.970047473907471
    7. 'lux' → logprob: -6.345047473907471
    8. 'le' → logprob: -6.470047473907471
    9. 'ective' → logprob: -6.595047473907471
    10. 'ixe' → logprob: -6.720047473907471

Token 57: '
' (ID: 198)
  Prédit: 'n'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'n' → logprob: -0.0016230528708547354
    2. '
' → logprob: -6.626623153686523
    3. '\n' → logprob: -8.376623153686523
    4. '\' → logprob: -10.376623153686523
    5. '```' → logprob: -11.126623153686523
    6. ' n' → logprob: -11.751623153686523
    7. '

' → logprob: -12.001623153686523
    8. 'def' → logprob: -13.626623153686523
    9. '(n' → logprob: -13.876623153686523
    10. ' 
' → logprob: -14.126623153686523

Token 58: 'n' (ID: 77)
  Prédit: 'n'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'n' → logprob: -0.002834588522091508
    2. '
' → logprob: -6.502834796905518
    3. '\n' → logprob: -6.752834796905518
    4. '\' → logprob: -9.37783432006836
    5. '```' → logprob: -9.87783432006836
    6. '

' → logprob: -11.37783432006836
    7. ' n' → logprob: -12.62783432006836
    8. '(n' → logprob: -13.00283432006836
    9. 'def' → logprob: -13.25283432006836
    10. ' 
' → logprob: -13.62783432006836

Token 59: ',' (ID: 11)
  Prédit: ' ='
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' =' → logprob: -0.10774531960487366
    2. ',' → logprob: -2.357745409011841
    3. '=' → logprob: -4.982745170593262
    4. ' ,' → logprob: -7.482745170593262
    5. ' ' → logprob: -9.482745170593262
    6. '=int' → logprob: -12.232745170593262
    7. ')' → logprob: -12.232745170593262
    8. ' =
' → logprob: -13.982745170593262
    9. '.' → logprob: -14.232745170593262
    10. ' ' → logprob: -14.482745170593262

Token 60: ' *' (ID: 425)
  Prédit: ' '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' ' → logprob: -0.4013879597187042
    2. ' =' → logprob: -1.7763879299163818
    3. '=' → logprob: -1.9013879299163818
    4. 'read' → logprob: -5.401388168334961
    5. '_' → logprob: -6.401388168334961
    6. ' read' → logprob: -6.651388168334961
    7. '*' → logprob: -7.276388168334961
    8. ' *' → logprob: -7.276388168334961
    9. 'space' → logprob: -7.276388168334961
    10. '_read' → logprob: -8.651388168334961

Token 61: 'c' (ID: 66)
  Prédit: 'data'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'data' → logprob: -0.5415852069854736
    2. 'a' → logprob: -1.5415852069854736
    3. 'arr' → logprob: -2.4165852069854736
    4. 'lst' → logprob: -2.4165852069854736
    5. 'rest' → logprob: -4.4165849685668945
    6. 'numbers' → logprob: -5.9165849685668945
    7. 'l' → logprob: -6.0415849685668945
    8. 'lines' → logprob: -6.0415849685668945
    9. ' data' → logprob: -6.2915849685668945
    10. 'values' → logprob: -6.6665849685668945

Token 62: ' =' (ID: 314)
  Prédit: ' ='
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' =' → logprob: -0.1279841512441635
    2. '=' → logprob: -2.252984046936035
    3. 'ont' → logprob: -5.252984046936035
    4. 's' → logprob: -5.502984046936035
    5. 'ount' → logprob: -5.627984046936035
    6. 'ost' → logprob: -7.002984046936035
    7. ' ' → logprob: -9.252984046936035
    8. 'nts' → logprob: -9.252984046936035
    9. 'onts' → logprob: -9.502984046936035
    10. 'odes' → logprob: -9.627984046936035

Token 63: ' [' (ID: 723)
  Prédit: 'map'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'map' → logprob: -0.009806144051253796
    2. ' map' → logprob: -4.634806156158447
    3. 'list' → logprob: -10.384805679321289
    4. 'read' → logprob: -11.759805679321289
    5. '[' → logprob: -12.259805679321289
    6. 'ma' → logprob: -13.134805679321289
    7. '	map' → logprob: -13.134805679321289
    8. 'm' → logprob: -13.509805679321289
    9. '(map' → logprob: -14.884805679321289
    10. ' list' → logprob: -15.134805679321289

Token 64: 'int' (ID: 491)
  Prédit: 'map'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'map' → logprob: -0.0060171992518007755
    2. ' map' → logprob: -5.131017208099365
    3. 'int' → logprob: -9.381016731262207
    4. '(map' → logprob: -14.131016731262207
    5. ' ' → logprob: -14.256016731262207
    6. '	map' → logprob: -14.381016731262207
    7. '```' → logprob: -14.381016731262207
    8. 'm' → logprob: -14.881016731262207
    9. 'ma' → logprob: -15.006016731262207
    10. '   ' → logprob: -15.256016731262207

Token 65: '(x' (ID: 4061)
  Prédit: '(x'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(x' → logprob: -0.017048709094524384
    2. '(i' → logprob: -4.7670488357543945
    3. ']' → logprob: -5.6420488357543945
    4. '(' → logprob: -5.7670488357543945
    5. '](' → logprob: -7.2670488357543945
    6. '()]' → logprob: -7.8920488357543945
    7. '(sys' → logprob: -8.392048835754395
    8. '(s' → logprob: -9.017048835754395
    9. ']()' → logprob: -9.142048835754395
    10. '(line' → logprob: -10.267048835754395

Token 66: ')' (ID: 8)
  Prédit: ')'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')' → logprob: -3.845798710244708e-05
    2. ' )' → logprob: -10.875038146972656
    3. ' for' → logprob: -12.000038146972656
    4. '())' → logprob: -12.250038146972656
    5. 'for' → logprob: -12.750038146972656
    6. '()' → logprob: -13.125038146972656
    7. 'sys' → logprob: -13.875038146972656
    8. ')
' → logprob: -14.750038146972656
    9. '(sys' → logprob: -15.125038146972656
    10. 'in' → logprob: -15.250038146972656

Token 67: ' for' (ID: 395)
  Prédit: ' for'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' for' → logprob: -0.7254550457000732
    2. '(sys' → logprob: -1.8504550457000732
    3. '(' → logprob: -2.1004550457000732
    4. 'for' → logprob: -2.2254550457000732
    5. '()' → logprob: -3.2254550457000732
    6. ')' → logprob: -3.4754550457000732
    7. '()]' → logprob: -4.225455284118652
    8. '(read' → logprob: -4.475455284118652
    9. ']' → logprob: -4.600455284118652
    10. '(x' → logprob: -5.725455284118652

Token 68: ' x' (ID: 1215)
  Prédit: ' read'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' read' → logprob: -0.34317833185195923
    2. 'read' → logprob: -2.3431782722473145
    3. ' readline' → logprob: -2.3431782722473145
    4. ' sys' → logprob: -2.8431782722473145
    5. ' x' → logprob: -4.7181782722473145
    6. '_' → logprob: -4.8431782722473145
    7. '<|end|>' → logprob: -5.3431782722473145
    8. ' ' → logprob: -5.4681782722473145
    9. 'sys' → logprob: -5.5931782722473145
    10. '<|end|>' → logprob: -5.8431782722473145

Token 69: ' in' (ID: 306)
  Prédit: '(sys'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(sys' → logprob: -1.3722621202468872
    2. ' sys' → logprob: -1.6222621202468872
    3. ' in' → logprob: -1.7472621202468872
    4. 'sys' → logprob: -2.3722620010375977
    5. ' readline' → logprob: -2.3722620010375977
    6. 'read' → logprob: -2.7472620010375977
    7. '=sys' → logprob: -2.7472620010375977
    8. 'in' → logprob: -3.9972620010375977
    9. '.readline' → logprob: -4.497262001037598
    10. '(read' → logprob: -4.622262001037598

Token 70: ' read' (ID: 1729)
  Prédit: ' read'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' read' → logprob: -0.2833230495452881
    2. 'read' → logprob: -1.408323049545288
    3. ' readline' → logprob: -6.158323287963867
    4. ' input' → logprob: -11.033323287963867
    5. '	read' → logprob: -11.408323287963867
    6. ' sys' → logprob: -11.658323287963867
    7. '(read' → logprob: -11.783323287963867
    8. ' ' → logprob: -13.033323287963867
    9. 'input' → logprob: -13.283323287963867
    10. ')' → logprob: -13.783323287963867

Token 71: '().' (ID: 1454)
  Prédit: '().'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '().' → logprob: -0.8411251306533813
    2. '()' → logprob: -1.0911251306533813
    3. '()]' → logprob: -1.4661251306533813
    4. '())' → logprob: -6.466125011444092
    5. '(' → logprob: -8.96612548828125
    6. '()][' → logprob: -8.96612548828125
    7. '()].' → logprob: -9.59112548828125
    8. '()[' → logprob: -9.71612548828125
    9. '()>' → logprob: -9.96612548828125
    10. '（）' → logprob: -10.71612548828125

Token 72: 'split' (ID: 13627)
  Prédit: 'split'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'split' → logprob: -0.0001246348983841017
    2. 'strip' → logprob: -9.00012493133545
    3. 'rstrip' → logprob: -14.25012493133545
    4. ' split' → logprob: -14.75012493133545
    5. 'spl' → logprob: -15.75012493133545
    6. '(split' → logprob: -16.750123977661133
    7. 'sp' → logprob: -19.000123977661133
    8. '```' → logprob: -19.625123977661133
    9. 's' → logprob: -21.625123977661133
    10. '.split' → logprob: -22.000123977661133

Token 73: '()]
' (ID: 67155)
  Prédit: '()]'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '()]' → logprob: -0.00702769635245204
    2. '(' → logprob: -5.007027626037598
    3. ']' → logprob: -8.757027626037598
    4. '('' → logprob: -9.882027626037598
    5. '())' → logprob: -9.882027626037598
    6. '()' → logprob: -10.507027626037598
    7. ')]' → logprob: -10.757027626037598
    8. ']()' → logprob: -13.632027626037598
    9. '("' → logprob: -14.257027626037598
    10. '`]' → logprob: -14.757027626037598

Token 74: 'c' (ID: 66)
  Prédit: '
'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '
' → logprob: -0.34327569603919983
    2. '\' → logprob: -2.468275785446167
    3. '' → logprob: -3.093275785446167
    4. '\n' → logprob: -3.093275785446167
    5. 'n' → logprob: -3.343275785446167
    6. 'd' → logprob: -3.468275785446167
    7. '#' → logprob: -4.343275547027588
    8. 'c' → logprob: -5.218275547027588
    9. '

' → logprob: -5.593275547027588
    10. '[' → logprob: -5.843275547027588

Token 75: '.sort' (ID: 19551)
  Prédit: '['
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '[' → logprob: -0.8585546016693115
    2. '<|end|>' → logprob: -0.9835546016693115
    3. '.' → logprob: -1.7335546016693115
    4. '
' → logprob: -4.483554840087891
    5. '<|end|>' → logprob: -5.858554840087891
    6. '```' → logprob: -6.108554840087891
    7. '\n' → logprob: -6.233554840087891
    8. '#' → logprob: -6.358554840087891
    9. '[:]' → logprob: -6.483554840087891
    10. '[
' → logprob: -7.483554840087891

Token 76: '(reverse' (ID: 110806)
  Prédit: '()'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '()' → logprob: -0.16028545796871185
    2. '(' → logprob: -1.910285472869873
    3. '()
' → logprob: -10.410284996032715
    4. '```' → logprob: -11.910284996032715
    5. '(
' → logprob: -12.535284996032715
    6. '();' → logprob: -12.785284996032715
    7. '()`' → logprob: -13.035284996032715
    8. '()

' → logprob: -13.285284996032715
    9. ')' → logprob: -13.910284996032715
    10. '(

' → logprob: -13.910284996032715

Token 77: '=True' (ID: 7827)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')' → logprob: -0.5716003179550171
    2. '())' → logprob: -0.9466003179550171
    3. '()' → logprob: -3.0716004371643066
    4. '(' → logprob: -7.321600437164307
    5. '=True' → logprob: -9.196599960327148
    6. '=' → logprob: -9.821599960327148
    7. '();)' → logprob: -10.196599960327148
    8. ' ())' → logprob: -11.071599960327148
    9. '))' → logprob: -11.571599960327148
    10. '())
' → logprob: -11.571599960327148

Token 78: ')' (ID: 8)
  Prédit: ')'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')' → logprob: -4.723352049040841e-06
    2. ')
' → logprob: -12.875004768371582
    3. '))' → logprob: -14.375004768371582
    4. ' )' → logprob: -14.500004768371582
    5. '()' → logprob: -14.875004768371582
    6. ')c' → logprob: -16.000003814697266
    7. ']' → logprob: -16.375003814697266
    8. '())' → logprob: -16.625003814697266
    9. ')

' → logprob: -17.000003814697266
    10. '),' → logprob: -17.000003814697266

Token 79: ' ' (ID: 220)
  Prédit: '
'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '
' → logprob: -0.07350626587867737
    2. '<|end|>' → logprob: -2.8235063552856445
    3. 'for' → logprob: -6.4485063552856445
    4. ' 
' → logprob: -6.4485063552856445
    5. '\n' → logprob: -6.5735063552856445
    6. ' ' → logprob: -6.9485063552856445
    7. '#' → logprob: -7.0735063552856445
    8. '

' → logprob: -7.1985063552856445
    9. 'n' → logprob: -7.1985063552856445
    10. 'if' → logprob: -7.4485063552856445

Token 80: ' #' (ID: 1069)
  Prédit: '#'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '#' → logprob: -0.939009964466095
    2. '
' → logprob: -2.18900990486145
    3. 'c' → logprob: -2.43900990486145
    4. '<|end|>' → logprob: -2.68900990486145
    5. '\n' → logprob: -2.81400990486145
    6. '[' → logprob: -3.06400990486145
    7. '+' → logprob: -3.18900990486145
    8. 'n' → logprob: -3.18900990486145
    9. ')' → logprob: -3.43900990486145
    10. '\' → logprob: -3.56400990486145

Token 81: ' Tri' (ID: 25062)
  Prédit: 'total'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'total' → logprob: -1.0323337316513062
    2. '#' → logprob: -1.2823337316513062
    3. ' total' → logprob: -2.0323338508605957
    4. 'cost' → logprob: -2.7823338508605957
    5. ' #' → logprob: -3.1573338508605957
    6. ' for' → logprob: -4.157333850860596
    7. 'for' → logprob: -4.532333850860596
    8. ' cost' → logprob: -4.532333850860596
    9. ' 
' → logprob: -4.657333850860596
    10. 'result' → logprob: -4.782333850860596

Token 82: ' décro' (ID: 176854)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '(' → logprob: -0.5955713987350464
    2. '<|end|>' → logprob: -1.7205713987350464
    3. '()' → logprob: -2.720571517944336
    4. ')' → logprob: -3.220571517944336
    5. '(c' → logprob: -3.345571517944336
    6. ' (' → logprob: -3.845571517944336
    7. 'c' → logprob: -3.970571517944336
    8. ' ' → logprob: -4.345571517944336
    9. '<|end|>' → logprob: -4.470571517944336
    10. ' for' → logprob: -4.845571517944336

Token 83: 'issant' (ID: 31359)
  Prédit: 'issant'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'issant' → logprob: -0.40598562359809875
    2. 'ss' → logprob: -2.0309855937957764
    3. 's' → logprob: -2.5309855937957764
    4. 'dent' → logprob: -2.7809855937957764
    5. 'd' → logprob: -3.1559855937957764
    6. 'rant' → logprob: -5.4059858322143555
    7. 'sent' → logprob: -5.7809858322143555
    8. 'rent' → logprob: -6.0309858322143555
    9. 'sd' → logprob: -6.6559858322143555
    10. 'isant' → logprob: -6.6559858322143555

Token 84: ',' (ID: 11)
  Prédit: ''
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False

Token 85: ' je' (ID: 1264)
  Prédit: ' on'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' on' → logprob: -0.748532772064209
    2. ' car' → logprob: -0.998532772064209
    3. ' mais' → logprob: -2.998532772064209
    4. ' ' → logprob: -3.998532772064209
    5. ' je' → logprob: -4.123532772064209
    6. 'car' → logprob: -4.498532772064209
    7. 'on' → logprob: -4.623532772064209
    8. ' ce' → logprob: -5.248532772064209
    9. ' c' → logprob: -5.498532772064209
    10. '#' → logprob: -5.623532772064209

Token 86: ' suppose' (ID: 35968)
  Prédit: 'p'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'p' → logprob: -0.884955644607544
    2. 'vais' → logprob: -1.634955644607544
    3. 'veux' → logprob: -2.134955644607544
    4. 'supp' → logprob: -2.509955644607544
    5. 's' → logprob: -3.384955644607544
    6. 'pr' → logprob: -3.509955644607544
    7. 'penser' → logprob: -4.009955406188965
    8. 'n' → logprob: -4.509955406188965
    9. 'vo' → logprob: -4.634955406188965
    10. ' pense' → logprob: -4.634955406188965

Token 87: ' que' (ID: 661)
  Prédit: 'total'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'total' → logprob: -0.6828088164329529
    2. 'result' → logprob: -2.3078088760375977
    3. 'count' → logprob: -3.0578088760375977
    4. '<|end|>' → logprob: -3.0578088760375977
    5. 'def' → logprob: -3.1828088760375977
    6. '#' → logprob: -3.3078088760375977
    7. 'cost' → logprob: -3.3078088760375977
    8. 'max' → logprob: -3.5578088760375977
    9. 'sum' → logprob: -3.8078088760375977
    10. 'answer' → logprob: -3.9328088760375977

Token 88: ' c' (ID: 274)
  Prédit: ' c'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' c' → logprob: -0.5004468560218811
    2. 'c' → logprob: -1.6254467964172363
    3. ' ça' → logprob: -2.8754467964172363
    4. ' on' → logprob: -3.6254467964172363
    5. 'cela' → logprob: -3.8754467964172363
    6. ' tu' → logprob: -4.125446796417236
    7. ' l' → logprob: -4.125446796417236
    8. ' cela' → logprob: -4.500446796417236
    9. ' ceci' → logprob: -5.125446796417236
    10. ' le' → logprob: -5.375446796417236

Token 89: ''est' (ID: 6616)
  Prédit: ''est'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ''est' → logprob: -0.462617427110672
    2. '[' → logprob: -2.0876173973083496
    3. 'est' → logprob: -2.8376173973083496
    4. ' est' → logprob: -3.2126173973083496
    5. 'ont' → logprob: -3.3376173973083496
    6. 'a' → logprob: -3.4626173973083496
    7. ' is' → logprob: -4.33761739730835
    8. ''s' → logprob: -5.08761739730835
    9. 's' → logprob: -5.46261739730835
    10. 'on' → logprob: -5.46261739730835

Token 90: ' utile' (ID: 68237)
  Prédit: 'pour'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'pour' → logprob: -1.281315803527832
    2. ' important' → logprob: -1.656315803527832
    3. 'important' → logprob: -1.781315803527832
    4. ' pour' → logprob: -1.906315803527832
    5. 'utile' → logprob: -2.781315803527832
    6. ' nécessaire' → logprob: -3.281315803527832
    7. ' utile' → logprob: -3.281315803527832
    8. 'le' → logprob: -4.656315803527832
    9. ' parce' → logprob: -5.156315803527832
    10. 'bien' → logprob: -5.281315803527832

Token 91: ' plus' (ID: 2932)
  Prédit: ''
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False

Token 92: ' loin' (ID: 40875)
  Prédit: ' tard'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' tard' → logprob: -0.21364068984985352
    2. 't' → logprob: -1.8386406898498535
    3. 'loin' → logprob: -3.5886406898498535
    4. ' loin' → logprob: -5.8386406898498535
    5. 'bas' → logprob: -6.8386406898498535
    6. 'avant' → logprob: -7.5886406898498535
    7. 'haut' → logprob: -8.088640213012695
    8. ' bas' → logprob: -9.088640213012695
    9. '#' → logprob: -9.588640213012695
    10. 'ens' → logprob: -9.838640213012695

Token 93: '...

' (ID: 2161)
  Prédit: '
'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '
' → logprob: -1.1873283386230469
    2. '#' → logprob: -1.6873283386230469
    3. 'c' → logprob: -2.687328338623047
    4. 'def' → logprob: -2.812328338623047
    5. 'd' → logprob: -2.937328338623047
    6. 'a' → logprob: -3.312328338623047
    7. 'count' → logprob: -3.312328338623047
    8. 'n' → logprob: -3.687328338623047
    9. 'k' → logprob: -3.937328338623047
    10. 'result' → logprob: -3.937328338623047

Token 94: 'MOD' (ID: 52135)
  Prédit: 'result'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'result' → logprob: -1.1351407766342163
    2. 'dp' → logprob: -1.7601407766342163
    3. 'def' → logprob: -2.385140895843506
    4. 'count' → logprob: -2.885140895843506
    5. 'total' → logprob: -2.885140895843506
    6. 'res' → logprob: -3.135140895843506
    7. 'answer' → logprob: -3.135140895843506
    8. 'ans' → logprob: -3.510140895843506
    9. 'max' → logprob: -3.635140895843506
    10. 'k' → logprob: -3.760140895843506

Token 95: ' =' (ID: 314)
  Prédit: ' ='
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' =' → logprob: -0.02630819007754326
    2. '=' → logprob: -3.651308298110962
    3. ',' → logprob: -12.901308059692383
    4. '_' → logprob: -13.026308059692383
    5. ' =
' → logprob: -14.151308059692383
    6. ' ' → logprob: -14.151308059692383
    7. ' ' → logprob: -15.026308059692383
    8. ' =
' → logprob: -15.401308059692383
    9. '.' → logprob: -15.651308059692383
    10. ')' → logprob: -15.901308059692383

Token 96: ' ' (ID: 220)
  Prédit: '10'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '10' → logprob: -0.10525016486644745
    2. '100' → logprob: -2.355250120162964
    3. '998' → logprob: -5.355250358581543
    4. ' ' → logprob: -8.480250358581543
    5. '1' → logprob: -9.355250358581543
    6. '999' → logprob: -12.230250358581543
    7. '123' → logprob: -12.230250358581543
    8. '987' → logprob: -13.980250358581543
    9. '```' → logprob: -14.230250358581543
    10. '2' → logprob: -14.605250358581543

Token 97: '10' (ID: 702)
  Prédit: '10'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '10' → logprob: -0.1044689416885376
    2. '100' → logprob: -2.354468822479248
    3. '998' → logprob: -5.479468822479248
    4. '1' → logprob: -9.479469299316406
    5. '999' → logprob: -13.729469299316406
    6. ' ' → logprob: -13.854469299316406
    7. '```' → logprob: -13.979469299316406
    8. '987' → logprob: -14.354469299316406
    9. '123' → logprob: -14.604469299316406
    10. '2' → logprob: -15.104469299316406

Token 98: '**' (ID: 410)
  Prédit: '9'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '9' → logprob: -0.04306667298078537
    2. '**' → logprob: -3.1680667400360107
    3. '09' → logprob: -10.04306697845459
    4. '```' → logprob: -11.66806697845459
    5. '7' → logprob: -12.04306697845459
    6. '6' → logprob: -12.04306697845459
    7. '^' → logprob: -13.04306697845459
    8. '19' → logprob: -15.29306697845459
    9. '_' → logprob: -15.66806697845459
    10. '8' → logprob: -15.66806697845459

Token 99: '9' (ID: 24)
  Prédit: '9'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '9' → logprob: -1.9361264946837764e-07
    2. '09' → logprob: -15.75
    3. '```' → logprob: -17.875
    4. '10' → logprob: -19.125
    5. ' ' → logprob: -20.125
    6. '4' → logprob: -20.75
    7. '6' → logprob: -21.0
    8. '+' → logprob: -21.0
    9. '18' → logprob: -21.25
    10. '8' → logprob: -21.625

Token 100: ' +' (ID: 659)
  Prédit: '+'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '+' → logprob: -7.493430894101039e-05
    2. '7' → logprob: -9.875075340270996
    3. ' +' → logprob: -10.750075340270996
    4. '+
' → logprob: -13.375075340270996
    5. '+

' → logprob: -16.50007438659668
    6. '＋' → logprob: -16.62507438659668
    7. '```' → logprob: -17.00007438659668
    8. 'plus' → logprob: -17.62507438659668
    9. ' plus' → logprob: -17.75007438659668
    10. '+</' → logprob: -18.00007438659668

Token 101: ' ' (ID: 220)
  Prédit: '7'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '7' → logprob: 0.0
    2. ' ' → logprob: -17.25
    3. '+' → logprob: -18.5
    4. '9' → logprob: -20.375
    5. '```' → logprob: -20.625
    6. '07' → logprob: -22.0
    7. '   ' → logprob: -22.75
    8. ' ' → logprob: -23.75
    9. '

' → logprob: -23.75
    10. '  ' → logprob: -23.8125

Token 102: '7' (ID: 22)
  Prédit: '7'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '7' → logprob: 0.0
    2. ' ' → logprob: -20.0
    3. '```' → logprob: -21.125
    4. '+' → logprob: -22.25
    5. '07' → logprob: -22.75
    6. '７' → logprob: -22.75
    7. '9' → logprob: -22.875
    8. '

' → logprob: -23.375
    9. '   ' → logprob: -23.625
    10. '
' → logprob: -23.75

Token 103: '

' (ID: 279)
  Prédit: '
'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '
' → logprob: -0.031797584146261215
    2. '\n' → logprob: -4.156797409057617
    3. ' 
' → logprob: -5.781797409057617
    4. '

' → logprob: -6.031797409057617
    5. '\' → logprob: -6.156797409057617
    6. 'def' → logprob: -6.656797409057617
    7. 'result' → logprob: -6.656797409057617
    8. '#' → logprob: -6.656797409057617
    9. '<|end|>' → logprob: -7.031797409057617
    10. 'dp' → logprob: -7.281797409057617

Token 104: 'ans' (ID: 616)
  Prédit: 'dp'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'dp' → logprob: -0.31033703684806824
    2. 'result' → logprob: -1.5603370666503906
    3. 'def' → logprob: -4.185337066650391
    4. 'res' → logprob: -4.435337066650391
    5. 'ans' → logprob: -4.685337066650391
    6. 'answer' → logprob: -4.935337066650391
    7. 'for' → logprob: -5.935337066650391
    8. 'count' → logprob: -6.060337066650391
    9. 's' → logprob: -6.185337066650391
    10. 'total' → logprob: -6.935337066650391

Token 105: ' =' (ID: 314)
  Prédit: ' ='
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' =' → logprob: -0.03388173133134842
    2. '=' → logprob: -3.408881664276123
    3. '_' → logprob: -8.658882141113281
    4. ' ' → logprob: -10.783882141113281
    5. ',' → logprob: -11.533882141113281
    6. ' +=' → logprob: -11.658882141113281
    7. '.' → logprob: -12.658882141113281
    8. ')' → logprob: -13.033882141113281
    9. 'space' → logprob: -13.033882141113281
    10. '_space' → logprob: -13.033882141113281

Token 106: ' ' (ID: 220)
  Prédit: '0'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '0' → logprob: -0.15338721871376038
    2. ' ' → logprob: -2.1533873081207275
    3. '1' → logprob: -3.6533873081207275
    4. 'pow' → logprob: -9.278387069702148
    5. 'c' → logprob: -9.653387069702148
    6. ' c' → logprob: -10.528387069702148
    7. 'n' → logprob: -12.215887069702148
    8. '(' → logprob: -12.528387069702148
    9. ' pow' → logprob: -12.528387069702148
    10. ' ' → logprob: -13.340887069702148

Token 107: '0' (ID: 15)
  Prédit: '0'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '0' → logprob: -0.029554571956396103
    2. '1' → logprob: -3.904554605484009
    3. 'c' → logprob: -4.77955436706543
    4. 'sum' → logprob: -7.90455436706543
    5. 'pow' → logprob: -9.02955436706543
    6. '(' → logprob: -10.40455436706543
    7. '(c' → logprob: -11.15455436706543
    8. ' ' → logprob: -11.27955436706543
    9. '(sum' → logprob: -12.02955436706543
    10. 'max' → logprob: -12.65455436706543

Token 108: '
' (ID: 198)
  Prédit: 'for'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'for' → logprob: -0.04104861244559288
    2. '
' → logprob: -4.291048526763916
    3. ' for' → logprob: -4.291048526763916
    4. '+' → logprob: -5.666048526763916
    5. ' ' → logprob: -5.791048526763916
    6. '<|end|>' → logprob: -5.791048526763916
    7. '*' → logprob: -6.666048526763916
    8. ' 
' → logprob: -7.541048526763916
    9. ')' → logprob: -8.291049003601074
    10. '' → logprob: -8.541049003601074

Token 109: 'for' (ID: 1938)
  Prédit: 'for'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'for' → logprob: -0.05004265904426575
    2. ' for' → logprob: -4.050042629241943
    3. ' ' → logprob: -4.175042629241943
    4. '+' → logprob: -4.800042629241943
    5. '*' → logprob: -6.175042629241943
    6. '=' → logprob: -6.800042629241943
    7. 'f' → logprob: -7.050042629241943
    8. 'i' → logprob: -7.050042629241943
    9. ',' → logprob: -7.175042629241943
    10. ' 
' → logprob: -8.300043106079102

Token 110: ' idx' (ID: 14016)
  Prédit: ' i'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' i' → logprob: -0.07043440639972687
    2. 'i' → logprob: -2.695434331893921
    3. '_i' → logprob: -9.5704345703125
    4. ' x' → logprob: -9.6954345703125
    5. ' c' → logprob: -9.6954345703125
    6. '_' → logprob: -9.8204345703125
    7. 'x' → logprob: -10.1954345703125
    8. ' range' → logprob: -10.1954345703125
    9. ' _' → logprob: -10.4454345703125
    10. 'c' → logprob: -10.9454345703125

Token 111: ',' (ID: 11)
  Prédit: ','
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ',' → logprob: -0.1418653130531311
    2. ' in' → logprob: -2.2668652534484863
    3. 'in' → logprob: -3.6418652534484863
    4. ' ,' → logprob: -6.266865253448486
    5. ' ' → logprob: -7.891865253448486
    6. ',value' → logprob: -10.141865730285645
    7. ',in' → logprob: -10.516865730285645
    8. ',n' → logprob: -10.766865730285645
    9. ',val' → logprob: -11.141865730285645
    10. ',c' → logprob: -12.141865730285645

Token 112: ' val' (ID: 1459)
  Prédit: 'value'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'value' → logprob: -0.31605616211891174
    2. 'val' → logprob: -1.4410561323165894
    3. ' value' → logprob: -4.816056251525879
    4. ' val' → logprob: -5.191056251525879
    5. 'coin' → logprob: -5.316056251525879
    6. 'c' → logprob: -5.566056251525879
    7. 'x' → logprob: -6.066056251525879
    8. 'price' → logprob: -6.191056251525879
    9. 'cost' → logprob: -6.191056251525879
    10. 'v' → logprob: -6.316056251525879

Token 113: ' in' (ID: 306)
  Prédit: ' in'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' in' → logprob: -0.12694984674453735
    2. 'in' → logprob: -2.1269497871398926
    3. ' ' → logprob: -11.50195026397705
    4. ',' → logprob: -12.87695026397705
    5. ')' → logprob: -13.62695026397705
    6. 's' → logprob: -14.25195026397705
    7. '	in' → logprob: -14.25195026397705
    8. '<|end|>' → logprob: -14.37695026397705
    9. '```' → logprob: -14.37695026397705
    10. ' ' → logprob: -14.81445026397705

Token 114: ' enumerate' (ID: 29671)
  Prédit: 'enumer'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'enumer' → logprob: -0.029750604182481766
    2. ' enumerate' → logprob: -3.5297505855560303
    3. 'enum' → logprob: -15.90475082397461
    4. 'en' → logprob: -17.15475082397461
    5. '```' → logprob: -18.52975082397461
    6. '.enumer' → logprob: -18.65475082397461
    7. 'Enumer' → logprob: -20.40475082397461
    8. '(en' → logprob: -20.52975082397461
    9. 'enqueue' → logprob: -20.52975082397461
    10. ' enumer' → logprob: -20.65475082397461

Token 115: '(c' (ID: 2410)
  Prédit: '(c'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(c' → logprob: -4.143808109802194e-05
    2. '(' → logprob: -10.125041007995605
    3. 'c' → logprob: -14.750041007995605
    4. ')c' → logprob: -15.125041007995605
    5. ' (' → logprob: -15.250041007995605
    6. '(s' → logprob: -16.125041961669922
    7. '(
' → logprob: -16.375041961669922
    8. ' c' → logprob: -16.625041961669922
    9. '(con' → logprob: -16.750041961669922
    10. '(C' → logprob: -17.000041961669922

Token 116: '):
' (ID: 1883)
  Prédit: '):'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '):' → logprob: -0.004234985448420048
    2. ':' → logprob: -5.504234790802002
    3. ')' → logprob: -9.37923526763916
    4. '):
' → logprob: -10.25423526763916
    5. ',' → logprob: -11.12923526763916
    6. ' ):' → logprob: -11.12923526763916
    7. ']:' → logprob: -13.62923526763916
    8. ' :' → logprob: -13.62923526763916
    9. '}:' → logprob: -13.75423526763916
    10. ':)' → logprob: -13.75423526763916

Token 117: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.02060542069375515
    2. ' ans' → logprob: -4.520605564117432
    3. '<|end|>' → logprob: -5.895605564117432
    4. 'ans' → logprob: -6.145605564117432
    5. '    
' → logprob: -6.270605564117432
    6. '	ans' → logprob: -7.020605564117432
    7. '
' → logprob: -7.020605564117432
    8. ' 
' → logprob: -8.270605087280273
    9. ' if' → logprob: -9.020605087280273
    10. '(ans' → logprob: -9.395605087280273

Token 118: ' #' (ID: 1069)
  Prédit: ' ans'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' ans' → logprob: -0.02689254842698574
    2. 'ans' → logprob: -4.15189266204834
    3. ' if' → logprob: -5.40189266204834
    4. '   ' → logprob: -5.52689266204834
    5. '	ans' → logprob: -7.52689266204834
    6. '
' → logprob: -7.90189266204834
    7. '<|end|>' → logprob: -7.90189266204834
    8. '    
' → logprob: -8.02689266204834
    9. '(ans' → logprob: -8.27689266204834
    10. 'if' → logprob: -8.90189266204834

Token 119: ' on' (ID: 402)
  Prédit: ' ans'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' ans' → logprob: -0.13623926043510437
    2. 'ans' → logprob: -2.2612392902374268
    3. ' if' → logprob: -4.761239051818848
    4. ' multiplier' → logprob: -5.886239051818848
    5. ' pass' → logprob: -6.136239051818848
    6. ' contribution' → logprob: -6.636239051818848
    7. ' val' → logprob: -6.886239051818848
    8. 'factor' → logprob: -6.886239051818848
    9. 'if' → logprob: -7.261239051818848
    10. ' factor' → logprob: -7.386239051818848

Token 120: ' ajoute' (ID: 91611)
  Prédit: ' ans'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' ans' → logprob: -0.43694913387298584
    2. '   ' → logprob: -2.1869492530822754
    3. ' ajoute' → logprob: -3.1869492530822754
    4. 'ans' → logprob: -3.3119492530822754
    5. ' suppose' → logprob: -3.9369492530822754
    6. ' ' → logprob: -4.061949253082275
    7. ' a' → logprob: -4.186949253082275
    8. 's' → logprob: -4.561949253082275
    9. ' pense' → logprob: -4.811949253082275
    10. ' peut' → logprob: -5.061949253082275

Token 121: ' val' (ID: 1459)
  Prédit: ' val'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' val' → logprob: -0.18724747002124786
    2. ' ans' → logprob: -1.9372475147247314
    3. 'val' → logprob: -4.562247276306152
    4. ' (' → logprob: -4.812247276306152
    5. '(ans' → logprob: -5.187247276306152
    6. 'ans' → logprob: -6.437247276306152
    7. '(' → logprob: -8.437247276306152
    8. '(val' → logprob: -8.437247276306152
    9. '   ' → logprob: -8.687247276306152
    10. '    ' → logprob: -9.812247276306152

Token 122: ' multip' (ID: 17524)
  Prédit: ' *'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' *' → logprob: -0.07904103398323059
    2. '*' → logprob: -2.579041004180908
    3. ' ' → logprob: -9.579041481018066
    4. ' **' → logprob: -10.454041481018066
    5. ' ' → logprob: -10.704041481018066
    6. '**' → logprob: -11.454041481018066
    7. ',' → logprob: -12.079041481018066
    8. ')' → logprob: -12.454041481018066
    9. '*(' → logprob: -12.954041481018066
    10. '+' → logprob: -13.704041481018066

Token 123: 'lié' (ID: 102412)
  Prédit: 'lié'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'lié' → logprob: -0.01413094811141491
    2. 'li' → logprob: -4.88913106918335
    3. '*' → logprob: -5.38913106918335
    4. 'lication' → logprob: -7.51413106918335
    5. 'ly' → logprob: -7.88913106918335
    6. ' *' → logprob: -7.88913106918335
    7. 'lé' → logprob: -8.514130592346191
    8. 'lying' → logprob: -8.639130592346191
    9. 'lic' → logprob: -10.139130592346191
    10. 'liable' → logprob: -10.514130592346191

Token 124: ' par' (ID: 686)
  Prédit: ' par'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' par' → logprob: -0.6355250477790833
    2. 'par' → logprob: -1.1355249881744385
    3. ' by' → logprob: -2.5105249881744385
    4. 'by' → logprob: -2.7605249881744385
    5. '(idx' → logprob: -6.135525226593018
    6. 'idx' → logprob: -7.760525226593018
    7. '<|end|>' → logprob: -7.885525226593018
    8. '(par' → logprob: -8.38552474975586
    9. '_by' → logprob: -8.63552474975586
    10. '_par' → logprob: -8.76052474975586

Token 125: ' (' (ID: 350)
  Prédit: ' idx'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' idx' → logprob: -0.8411247730255127
    2. ' (' → logprob: -1.5911247730255127
    3. '(idx' → logprob: -1.7161247730255127
    4. 'idx' → logprob: -1.9661247730255127
    5. '(' → logprob: -3.7161247730255127
    6. ' n' → logprob: -5.216124534606934
    7. '(n' → logprob: -5.341124534606934
    8. 'pow' → logprob: -5.841124534606934
    9. '2' → logprob: -6.591124534606934
    10. ' ' → logprob: -6.841124534606934

Token 126: 'idx' (ID: 13196)
  Prédit: 'idx'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'idx' → logprob: -0.21262551844120026
    2. '(idx' → logprob: -2.087625503540039
    3. ' idx' → logprob: -3.462625503540039
    4. '2' → logprob: -4.337625503540039
    5. 'max' → logprob: -4.962625503540039
    6. '(' → logprob: -5.712625503540039
    7. '(n' → logprob: -5.712625503540039
    8. ' (' → logprob: -5.837625503540039
    9. 'n' → logprob: -6.087625503540039
    10. 'pow' → logprob: -6.587625503540039

Token 127: '+' (ID: 10)
  Prédit: ' +'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' +' → logprob: -0.3136143386363983
    2. '+' → logprob: -1.3136143684387207
    3. ' plus' → logprob: -8.938613891601562
    4. '
' → logprob: -9.688613891601562
    5. ' +
' → logprob: -9.938613891601562
    6. 'plus' → logprob: -10.313613891601562
    7. '+
' → logprob: -10.688613891601562
    8. ')' → logprob: -11.688613891601562
    9. '```' → logprob: -11.813613891601562
    10. ' ' → logprob: -11.876113891601562

Token 128: '2' (ID: 17)
  Prédit: '1'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '1' → logprob: -0.0017113516805693507
    2. ' ' → logprob: -6.376711368560791
    3. '2' → logprob: -12.251710891723633
    4. ' ' → logprob: -14.064210891723633
    5. '
' → logprob: -14.126710891723633
    6. '+' → logprob: -15.064210891723633
    7. '```' → logprob: -15.126710891723633
    8. ')' → logprob: -15.314210891723633
    9. '

' → logprob: -15.689210891723633
    10. 'val' → logprob: -16.001710891723633

Token 129: '),' (ID: 936)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')' → logprob: -0.0657203420996666
    2. ')**' → logprob: -3.065720319747925
    3. '**' → logprob: -4.315720558166504
    4. ' )' → logprob: -5.940720558166504
    5. ' **' → logprob: -8.190720558166504
    6. ',' → logprob: -9.065720558166504
    7. '),' → logprob: -9.690720558166504
    8. ')*' → logprob: -9.690720558166504
    9. ' ' → logprob: -9.940720558166504
    10. '**)' → logprob: -9.940720558166504

Token 130: ' modulo' (ID: 112372)
  Prédit: ' ans'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' ans' → logprob: -0.7030526399612427
    2. ' ' → logprob: -0.9530526399612427
    3. ' because' → logprob: -2.578052520751953
    4. 'ans' → logprob: -4.328052520751953
    5. '<|end|>' → logprob: -4.578052520751953
    6. ' 
' → logprob: -4.703052520751953
    7. '(ans' → logprob: -5.953052520751953
    8. ' as' → logprob: -6.453052520751953
    9. 'because' → logprob: -6.828052520751953
    10. ')' → logprob: -7.203052520751953

Token 131: ' MOD' (ID: 32868)
  Prédit: 'MOD'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'MOD' → logprob: -0.474405974149704
    2. ' MOD' → logprob: -0.9744060039520264
    3. ' (' → logprob: -8.349406242370605
    4. '(M' → logprob: -10.349406242370605
    5. '_MOD' → logprob: -10.974406242370605
    6. ' ' → logprob: -10.974406242370605
    7. '(' → logprob: -11.099406242370605
    8. ' ' → logprob: -12.349406242370605
    9. '(mod' → logprob: -13.349406242370605
    10. '(Mod' → logprob: -13.474406242370605

Token 132: ' au' (ID: 2791)
  Prédit: ':'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ':' → logprob: -0.582823634147644
    2. '   ' → logprob: -1.957823634147644
    3. ' ' → logprob: -2.4578237533569336
    4. ')' → logprob: -2.5828237533569336
    5. '*' → logprob: -3.3328237533569336
    6. '+' → logprob: -3.5828237533569336
    7. '<|end|>' → logprob: -4.332823753356934
    8. ',' → logprob: -4.457823753356934
    9. '(ans' → logprob: -4.582823753356934
    10. ' ans' → logprob: -4.832823753356934

Token 133: ' cas' (ID: 2108)
  Prédit: 'ans'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'ans' → logprob: -0.39046233892440796
    2. ' ans' → logprob: -1.1404623985290527
    3. '(ans' → logprob: -5.640462398529053
    4. '	ans' → logprob: -11.015461921691895
    5. '_ans' → logprob: -11.890461921691895
    6. ' code' → logprob: -12.890461921691895
    7. 'answer' → logprob: -13.265461921691895
    8. ' (' → logprob: -13.765461921691895
    9. '```' → logprob: -14.140461921691895
    10. 'result' → logprob: -14.265461921691895

Token 134: ' où' (ID: 15113)
  Prédit: ' ans'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' ans' → logprob: -0.6513776183128357
    2. 'ans' → logprob: -1.6513776779174805
    3. '(ans' → logprob: -1.6513776779174805
    4. ')' → logprob: -3.2763776779174805
    5. ' de' → logprob: -4.2763776779174805
    6. ' of' → logprob: -5.2763776779174805
    7. ',' → logprob: -5.4013776779174805
    8. ':' → logprob: -6.1513776779174805
    9. ' (' → logprob: -6.1513776779174805
    10. '```' → logprob: -6.2763776779174805

Token 135: ' ça' (ID: 13590)
  Prédit: ' ans'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' ans' → logprob: -1.2416050434112549
    2. '<|end|>' → logprob: -1.3666050434112549
    3. ':' → logprob: -1.4916050434112549
    4. ' ' → logprob: -1.8666050434112549
    5. 'ans' → logprob: -4.116604804992676
    6. '(ans' → logprob: -4.116604804992676
    7. '
' → logprob: -4.491604804992676
    8. '   ' → logprob: -4.491604804992676
    9. ' 
' → logprob: -5.866604804992676
    10. ')' → logprob: -5.866604804992676

Token 136: ' déb' (ID: 37874)
  Prédit: ' dépasse'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' dépasse' → logprob: -0.2831025719642639
    2. 'overflow' → logprob: -1.9081025123596191
    3. ' overflow' → logprob: -2.908102512359619
    4. ' dépass' → logprob: -4.283102512359619
    5. ' soit' → logprob: -4.908102512359619
    6. ' continue' → logprob: -5.783102512359619
    7. 's' → logprob: -5.908102512359619
    8. 'continue' → logprob: -6.033102512359619
    9. ' dépasser' → logprob: -6.158102512359619
    10. 'sur' → logprob: -6.783102512359619

Token 137: 'orde' (ID: 14735)
  Prédit: 'orde'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'orde' → logprob: -0.21086445450782776
    2. 'ord' → logprob: -1.7108644247055054
    3. 'order' → logprob: -4.960864543914795
    4. 'ut' → logprob: -7.460864543914795
    5. 'ordre' → logprob: -7.460864543914795
    6. 'o' → logprob: -7.960864543914795
    7. '\' → logprob: -8.835864067077637
    8. 'uter' → logprob: -8.960864067077637
    9. 'ute' → logprob: -9.335864067077637
    10. '
' → logprob: -9.460864067077637

Token 138: '
' (ID: 198)
  Prédit: ':'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ':' → logprob: -0.846885621547699
    2. '<|end|>' → logprob: -1.8468856811523438
    3. ' ans' → logprob: -1.9718856811523438
    4. ' ' → logprob: -2.0968856811523438
    5. '   ' → logprob: -2.9718856811523438
    6. ',' → logprob: -3.4718856811523438
    7. 'ans' → logprob: -4.096885681152344
    8. ')' → logprob: -4.346885681152344
    9. '(ans' → logprob: -4.471885681152344
    10. '
' → logprob: -5.346885681152344

Token 139: '   ' (ID: 271)
  Prédit: ':'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ':' → logprob: -1.0324715375900269
    2. ' ' → logprob: -1.4074715375900269
    3. '+' → logprob: -1.9074715375900269
    4. '<|end|>' → logprob: -2.1574716567993164
    5. '   ' → logprob: -2.6574716567993164
    6. '*' → logprob: -4.407471656799316
    7. ')' → logprob: -4.407471656799316
    8. '  ' → logprob: -4.907471656799316
    9. '```' → logprob: -5.157471656799316
    10. ' ans' → logprob: -5.407471656799316

Token 140: ' ans' (ID: 3345)
  Prédit: ' ans'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' ans' → logprob: -0.5293673872947693
    2. 'ans' (adapté à ' ans') → logprob: -0.9043673872947693
    3. '   ' → logprob: -5.779367446899414
    4. '(ans' → logprob: -6.279367446899414
    5. '	ans' → logprob: -7.529367446899414
    6. ' 
' → logprob: -8.154367446899414
    7. '```' → logprob: -8.779367446899414
    8. '
' → logprob: -8.904367446899414
    9. '    
' → logprob: -10.029367446899414
    10. '<|end|>' → logprob: -10.654367446899414

Token 141: ' +=' (ID: 2757)
  Prédit: ' +='
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' +=' → logprob: -0.08032786101102829
    2. '+=' → logprob: -2.5803277492523193
    3. '+' → logprob: -6.705327987670898
    4. '=' → logprob: -9.580327987670898
    5. ' =' → logprob: -9.705327987670898
    6. '+=(' → logprob: -10.330327987670898
    7. ' ' → logprob: -11.455327987670898
    8. ' ' → logprob: -11.580327987670898
    9. ']+=' → logprob: -11.830327987670898
    10. ' ^=' → logprob: -11.955327987670898

Token 142: ' ((' (ID: 3536)
  Prédit: ' val'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' val' → logprob: -0.2531031668186188
    2. 'val' → logprob: -1.5031031370162964
    3. '(val' → logprob: -6.878103256225586
    4. ' (' → logprob: -8.878103256225586
    5. '	val' → logprob: -13.628103256225586
    6. '(' → logprob: -13.753103256225586
    7. '[val' → logprob: -14.378103256225586
    8. '   ' → logprob: -14.628103256225586
    9. ',val' → logprob: -15.878103256225586
    10. '```' → logprob: -15.878103256225586

Token 143: 'idx' (ID: 13196)
  Prédit: 'val'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'val' → logprob: -0.0002067588793579489
    2. ' val' → logprob: -9.12520694732666
    3. 'idx' → logprob: -9.25020694732666
    4. '(val' → logprob: -13.75020694732666
    5. '   ' → logprob: -15.25020694732666
    6. '	val' → logprob: -15.37520694732666
    7. '[val' → logprob: -17.000205993652344
    8. ' idx' → logprob: -17.250205993652344
    9. 'vals' → logprob: -17.750205993652344
    10. '  ' → logprob: -18.125205993652344

Token 144: ' +' (ID: 659)
  Prédit: '+'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '+' → logprob: -0.05489932373166084
    2. ' +' → logprob: -2.929899215698242
    3. ')+' → logprob: -11.929899215698242
    4. '()+' → logprob: -12.304899215698242
    5. '+
' → logprob: -13.429899215698242
    6. '2' → logprob: -14.179899215698242
    7. ']+' → logprob: -14.179899215698242
    8. ' +
' → logprob: -14.554899215698242
    9. '}+' → logprob: -14.804899215698242
    10. ')' → logprob: -15.304899215698242

Token 145: ' ' (ID: 220)
  Prédit: '2'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '2' → logprob: -0.004658672492951155
    2. ' ' → logprob: -5.3796586990356445
    3. '1' → logprob: -10.254658699035645
    4. '   ' → logprob: -13.379658699035645
    5. ')' → logprob: -14.817158699035645
    6. '  ' → logprob: -14.817158699035645
    7. '
' → logprob: -15.254658699035645
    8. '```' → logprob: -15.504658699035645
    9. '

' → logprob: -16.629657745361328
    10. '    ' → logprob: -16.879657745361328

Token 146: '2' (ID: 17)
  Prédit: '2'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '2' → logprob: -3.857719275401905e-05
    2. ' ' → logprob: -10.375038146972656
    3. '1' → logprob: -11.875038146972656
    4. '   ' → logprob: -16.187538146972656
    5. '  ' → logprob: -16.750038146972656
    6. '```' → logprob: -16.875038146972656
    7. '

' → logprob: -17.375038146972656
    8. '
' → logprob: -17.437538146972656
    9. '۲' → logprob: -17.562538146972656
    10. '２' → logprob: -18.000038146972656

Token 147: ')' (ID: 8)
  Prédit: ')'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')' → logprob: -0.002610498107969761
    2. ' )' → logprob: -6.502610683441162
    3. ')*' → logprob: -7.127610683441162
    4. ' *' → logprob: -8.752610206604004
    5. '*' → logprob: -8.877610206604004
    6. '*)' → logprob: -12.002610206604004
    7. ' ' → logprob: -15.127610206604004
    8. ')%' → logprob: -15.752610206604004
    9. '   ' → logprob: -16.00261116027832
    10. '```' → logprob: -16.12761116027832

Token 148: ' *' (ID: 425)
  Prédit: ' *'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' *' → logprob: -0.14277127385139465
    2. '*' → logprob: -2.0177712440490723
    3. ')' → logprob: -9.64277172088623
    4. ' ' → logprob: -10.76777172088623
    5. ')*' → logprob: -12.51777172088623
    6. ' ' → logprob: -13.01777172088623
    7. ' *
' → logprob: -13.89277172088623
    8. '*)' → logprob: -14.26777172088623
    9. '   ' → logprob: -14.64277172088623
    10. ' **' → logprob: -15.01777172088623

Token 149: ' val' (ID: 1459)
  Prédit: ' val'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' val' → logprob: -0.06196802109479904
    2. 'val' → logprob: -2.8119680881500244
    3. '	val' → logprob: -15.061967849731445
    4. '(val' → logprob: -17.936967849731445
    5. '[val' → logprob: -18.061967849731445
    6. ' ' → logprob: -18.311967849731445
    7. '_val' → logprob: -18.561967849731445
    8. '.val' → logprob: -19.561967849731445
    9. ' ' → logprob: -19.686967849731445
    10. 'v' → logprob: -20.061967849731445

Token 150: ')' (ID: 8)
  Prédit: ')'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')' → logprob: -0.0008074867073446512
    2. ')%' → logprob: -7.250807285308838
    3. ' )' → logprob: -9.250807762145996
    4. '%' → logprob: -13.625807762145996
    5. '   ' → logprob: -15.750807762145996
    6. ' %' → logprob: -16.12580680847168
    7. ')
' → logprob: -16.62580680847168
    8. '))' → logprob: -17.50080680847168
    9. '%)' → logprob: -18.25080680847168
    10. '）' → logprob: -18.75080680847168

Token 151: ' %' (ID: 1851)
  Prédit: ' %'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' %' → logprob: -0.1435965746641159
    2. '%' → logprob: -2.018596649169922
    3. ')' → logprob: -8.018596649169922
    4. ' %=' → logprob: -8.518596649169922
    5. ' ans' → logprob: -8.893596649169922
    6. '
' → logprob: -9.143596649169922
    7. '<|end|>' → logprob: -10.393596649169922
    8. '(ans' → logprob: -10.518596649169922
    9. ')%' → logprob: -10.768596649169922
    10. ' ' → logprob: -10.893596649169922

Token 152: ' MOD' (ID: 32868)
  Prédit: 'MOD'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'MOD' → logprob: -0.0007100477814674377
    2. ' MOD' → logprob: -7.2507100105285645
    3. '_MOD' → logprob: -16.250709533691406
    4. '.MOD' → logprob: -17.500709533691406
    5. '(M' → logprob: -18.875709533691406
    6. '(Mod' → logprob: -19.750709533691406
    7. '(' → logprob: -20.000709533691406
    8. ' ' → logprob: -20.875709533691406
    9. ' (' → logprob: -21.125709533691406
    10. 'MO' → logprob: -21.375709533691406

Token 153: '
' (ID: 198)
  Prédit: '
'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '
' → logprob: -0.48106083273887634
    2. 'ans' → logprob: -2.231060743331909
    3. ' ans' → logprob: -2.356060743331909
    4. '<|end|>' → logprob: -2.731060743331909
    5. '%' → logprob: -2.981060743331909
    6. ')' → logprob: -3.231060743331909
    7. '(ans' → logprob: -4.356060981750488
    8. ' %' → logprob: -6.106060981750488
    9. ' 
' → logprob: -6.231060981750488
    10. '	ans' → logprob: -6.481060981750488

Token 154: '   ' (ID: 271)
  Prédit: 'ans'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'ans' → logprob: -0.5811099410057068
    2. '
' → logprob: -1.8311100006103516
    3. ' ans' → logprob: -2.0811100006103516
    4. '<|end|>' → logprob: -2.3311100006103516
    5. ')' → logprob: -3.7061100006103516
    6. '(ans' → logprob: -3.8311100006103516
    7. '\n' → logprob: -5.706110000610352
    8. '	ans' → logprob: -6.331110000610352
    9. ' 
' → logprob: -6.456110000610352
    10. '  
' → logprob: -6.581110000610352

Token 155: ' ans' (ID: 3345)
  Prédit: 'ans'
  Correct (stricte): False
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'ans' (adapté à ' ans') → logprob: -0.04539724066853523
    2. ' ans' → logprob: -3.1703972816467285
    3. '(ans' → logprob: -6.2953972816467285
    4. '	ans' → logprob: -8.29539680480957
    5. '
' → logprob: -8.79539680480957
    6. '\n' → logprob: -9.79539680480957
    7. '   ' → logprob: -10.04539680480957
    8. '_ans' → logprob: -10.54539680480957
    9. 'ANS' → logprob: -12.17039680480957
    10. ' 
' → logprob: -12.67039680480957

Token 156: ' =' (ID: 314)
  Prédit: ' %='
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' %=' → logprob: -0.2185332328081131
    2. '%' → logprob: -1.8435332775115967
    3. '%=' → logprob: -3.3435332775115967
    4. ' %' → logprob: -5.968533039093018
    5. '=' → logprob: -9.843533515930176
    6. ')' → logprob: -9.968533515930176
    7. ')%' → logprob: -10.093533515930176
    8. '```' → logprob: -11.343533515930176
    9. ' ' → logprob: -11.468533515930176
    10. ' ' → logprob: -12.468533515930176

Token 157: ' ans' (ID: 3345)
  Prédit: ' ans'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' ans' → logprob: -0.31339991092681885
    2. 'ans' → logprob: -1.3133999109268188
    3. '(ans' → logprob: -8.938400268554688
    4. '	ans' → logprob: -11.938400268554688
    5. '_ans' → logprob: -15.563400268554688
    6. 'Ans' → logprob: -17.313400268554688
    7. ' ' → logprob: -17.438400268554688
    8. ' ' → logprob: -17.563400268554688
    9. 'ANS' → logprob: -17.813400268554688
    10. '   ' → logprob: -17.938400268554688

Token 158: ' %' (ID: 1851)
  Prédit: '%'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '%' → logprob: -0.018150877207517624
    2. ' %' → logprob: -4.018150806427002
    3. 'ans' → logprob: -14.76815128326416
    4. ' ' → logprob: -14.89315128326416
    5. ' ans' → logprob: -16.518150329589844
    6. '%s' → logprob: -17.643150329589844
    7. '%%%' → logprob: -17.643150329589844
    8. ' %=' → logprob: -17.893150329589844
    9. '(ans' → logprob: -18.143150329589844
    10. '%n' → logprob: -18.143150329589844

Token 159: ' MOD' (ID: 32868)
  Prédit: 'MOD'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'MOD' → logprob: -4.320199877838604e-07
    2. ' MOD' → logprob: -14.75
    3. '_MOD' → logprob: -19.375
    4. '(M' → logprob: -21.75
    5. '.MOD' → logprob: -22.0
    6. 'MO' → logprob: -22.25
    7. '(Mod' → logprob: -23.25
    8. 'Mod' → logprob: -23.875
    9. 'MODE' → logprob: -24.125
    10. '```' → logprob: -24.375

Token 160: ' ' (ID: 220)
  Prédit: 'print'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'print' → logprob: -0.00020389800192788243
    2. '<|end|>' → logprob: -8.875204086303711
    3. '
' → logprob: -10.250204086303711
    4. ')' → logprob: -11.250204086303711
    5. '```' → logprob: -11.750204086303711
    6. ' print' → logprob: -13.000204086303711
    7. '#print' → logprob: -13.625204086303711
    8. 'return' → logprob: -13.625204086303711
    9. '#' → logprob: -13.625204086303711
    10. '\' → logprob: -14.500204086303711

Token 161: ' #' (ID: 1069)
  Prédit: 'print'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'print' → logprob: -0.00017410075815860182
    2. '
' → logprob: -8.750174522399902
    3. '<|end|>' → logprob: -11.250174522399902
    4. '```' → logprob: -13.875174522399902
    5. ' print' → logprob: -14.250174522399902
    6. ')' → logprob: -14.375174522399902
    7. '  
' → logprob: -16.125173568725586
    8. '#print' → logprob: -16.125173568725586
    9. '

' → logprob: -16.625173568725586
    10. '
' → logprob: -16.875173568725586

Token 162: ' On' (ID: 2160)
  Prédit: ''
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False

Token 163: ' aurait' (ID: 48306)
  Prédit: 'ans'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'ans' → logprob: -0.33236196637153625
    2. 'continue' → logprob: -1.4573619365692139
    3. ' continue' → logprob: -4.457362174987793
    4. 'print' → logprob: -5.082362174987793
    5. '#' → logprob: -5.207362174987793
    6. '```' → logprob: -5.332362174987793
    7. ')' → logprob: -5.457362174987793
    8. '%' → logprob: -5.582362174987793
    9. '<|end|>' → logprob: -5.707362174987793
    10. '=' → logprob: -5.832362174987793

Token 164: ' pu' (ID: 2923)
  Prédit: 'pu'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'pu' → logprob: -0.0036018555983901024
    2. 'a' → logprob: -6.878602027893066
    3. 'pus' → logprob: -7.128602027893066
    4. 'égal' → logprob: -7.253602027893066
    5. ' pu' → logprob: -7.753602027893066
    6. 'put' → logprob: -8.628602027893066
    7. 'pe' → logprob: -8.753602027893066
    8. ' aussi' → logprob: -10.503602027893066
    9. 'p' → logprob: -10.628602027893066
    10. 'ans' → logprob: -10.628602027893066

Token 165: ' faire' (ID: 8119)
  Prédit: 'ans'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'ans' → logprob: -0.05171401798725128
    2. 'év' → logprob: -4.176713943481445
    3. 'optim' → logprob: -5.051713943481445
    4. 'é' → logprob: -5.051713943481445
    5. 'simpl' → logprob: -5.426713943481445
    6. ' ans' → logprob: -5.926713943481445
    7. '(ans' → logprob: -5.926713943481445
    8. '...' → logprob: -6.301713943481445
    9. 'faire' → logprob: -6.551713943481445
    10. 'just' → logprob: -6.551713943481445

Token 166: ' sans' (ID: 9828)
  Prédit: 'ans'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'ans' → logprob: -0.0015449762577190995
    2. '(ans' → logprob: -7.126544952392578
    3. '```' → logprob: -8.126544952392578
    4. 'continue' → logprob: -8.501544952392578
    5. ' ans' → logprob: -8.751544952392578
    6. 'pass' → logprob: -11.126544952392578
    7. '+=' → logprob: -11.251544952392578
    8. '	ans' → logprob: -11.376544952392578
    9. '=' → logprob: -11.626544952392578
    10. '   ' → logprob: -12.376544952392578

Token 167: ' la' (ID: 557)
  Prédit: 'print'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'print' → logprob: -0.0010930694406852126
    2. '
' → logprob: -6.876092910766602
    3. ')' → logprob: -10.376092910766602
    4. '

' → logprob: -11.376092910766602
    5. '<|end|>' → logprob: -11.751092910766602
    6. ' print' → logprob: -11.876092910766602
    7. '```' → logprob: -13.626092910766602
    8. '
' → logprob: -14.626092910766602
    9. ')
' → logprob: -15.376092910766602
    10. ')

' → logprob: -15.501092910766602

Token 168: ' ' (ID: 220)
  Prédit: 'ans'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'ans' → logprob: -0.10816854983568192
    2. 'mod' → logprob: -2.858168601989746
    3. 'if' → logprob: -4.608168601989746
    4. '%=' → logprob: -4.733168601989746
    5. '%' → logprob: -4.983168601989746
    6. ' ans' → logprob: -4.983168601989746
    7. '+=' → logprob: -5.358168601989746
    8. '(ans' → logprob: -5.983168601989746
    9. ' %=' → logprob: -6.733168601989746
    10. ' modulo' → logprob: -6.858168601989746

Token 169: '2' (ID: 17)
  Prédit: 'if'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'if' → logprob: -0.8279162645339966
    2. 'ans' → logprob: -1.7029162645339966
    3. '%' → logprob: -2.077916145324707
    4. 'mod' → logprob: -2.452916145324707
    5. 'continue' → logprob: -2.577916145324707
    6. 'for' → logprob: -2.952916145324707
    7. '%=' → logprob: -4.827916145324707
    8. '#' → logprob: -5.202916145324707
    9. 'else' → logprob: -5.327916145324707
    10. 'elif' → logprob: -5.702916145324707

Token 170: 'e' (ID: 68)
  Prédit: 'print'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'print' → logprob: -0.4797329902648926
    2. '<|end|>' → logprob: -0.9797329902648926
    3. ')' → logprob: -5.729732990264893
    4. '
' → logprob: -7.354732990264893
    5. '```' → logprob: -7.604732990264893
    6. '#' → logprob: -7.854732990264893
    7. '<|end|>' → logprob: -8.604732513427734
    8. ' print' → logprob: -8.854732513427734
    9. '+' → logprob: -9.604732513427734
    10. ']' → logprob: -9.854732513427734

Token 171: ' modulo' (ID: 112372)
  Prédit: ''
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False

Token 172: ' ici' (ID: 27994)
  Prédit: 'print'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'print' → logprob: -0.007204420864582062
    2. '
' → logprob: -5.132204532623291
    3. '<|end|>' → logprob: -7.007204532623291
    4. ')' → logprob: -8.382204055786133
    5. ' print' → logprob: -9.382204055786133
    6. '

' → logprob: -10.632204055786133
    7. '```' → logprob: -12.007204055786133
    8. '+' → logprob: -12.257204055786133
    9. '  
' → logprob: -12.632204055786133
    10. '#print' → logprob: -12.632204055786133

Token 173: ' mais' (ID: 2899)
  Prédit: 'print'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'print' → logprob: -0.0006129555404186249
    2. '
' → logprob: -7.500612735748291
    3. '<|end|>' → logprob: -10.25061321258545
    4. ')' → logprob: -11.62561321258545
    5. '

' → logprob: -12.00061321258545
    6. ' print' → logprob: -12.12561321258545
    7. '#print' → logprob: -13.62561321258545
    8. '  
' → logprob: -14.25061321258545
    9. '```' → logprob: -14.50061321258545
    10. '
' → logprob: -14.87561321258545

Token 174: ' bon' (ID: 4846)
  Prédit: 'ans'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'ans' → logprob: -0.7035646438598633
    2. ' ans' → logprob: -0.7035646438598633
    3. '(ans' → logprob: -4.828564643859863
    4. ' c' → logprob: -8.328564643859863
    5. '...' → logprob: -8.328564643859863
    6. 'cela' → logprob: -8.328564643859863
    7. '	ans' → logprob: -8.453564643859863
    8. ' mieux' → logprob: -8.828564643859863
    9. ' ' → logprob: -8.953564643859863
    10. ' ça' → logprob: -9.078564643859863

Token 175: '...

' (ID: 2161)
  Prédit: 'print'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'print' → logprob: -0.04779034107923508
    2. '<|end|>' → logprob: -3.297790288925171
    3. ')' → logprob: -5.04779052734375
    4. '
' → logprob: -5.79779052734375
    5. '```' → logprob: -9.54779052734375
    6. '<|end|>' → logprob: -9.92279052734375
    7. ' print' → logprob: -10.29779052734375
    8. '

' → logprob: -10.92279052734375
    9. '#print' → logprob: -11.04779052734375
    10. '#' → logprob: -11.17279052734375

Token 176: 'mult' (ID: 34841)
  Prédit: 'print'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'print' → logprob: -1.6405310816480778e-05
    2. '
' → logprob: -11.250016212463379
    3. ' print' → logprob: -13.875016212463379
    4. '<|end|>' → logprob: -13.875016212463379
    5. '```' → logprob: -14.125016212463379
    6. ')' → logprob: -14.375016212463379
    7. 'return' → logprob: -16.625017166137695
    8. '(print' → logprob: -17.375017166137695
    9. '  
' → logprob: -17.750017166137695
    10. '#print' → logprob: -17.750017166137695

Token 177: ' =' (ID: 314)
  Prédit: 'iplier'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'iplier' → logprob: -0.01636747643351555
    2. 'ipl' → logprob: -4.766367435455322
    3. 'ip' → logprob: -5.516367435455322
    4. '=' → logprob: -6.266367435455322
    5. 'plier' → logprob: -7.266367435455322
    6. ' =' → logprob: -7.516367435455322
    7. '_ans' → logprob: -8.39136791229248
    8. 'iplayer' → logprob: -9.14136791229248
    9. 'iple' → logprob: -9.51636791229248
    10. 'ilier' → logprob: -9.89136791229248

Token 178: ' pow' (ID: 9779)
  Prédit: '1'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '1' → logprob: -0.8935250043869019
    2. '2' → logprob: -1.8935250043869019
    3. 'pow' → logprob: -2.0185251235961914
    4. 'ans' → logprob: -2.6435251235961914
    5. '(ans' → logprob: -2.7685251235961914
    6. '(n' → logprob: -3.0185251235961914
    7. '3' → logprob: -3.3935251235961914
    8. '(' → logprob: -3.7685251235961914
    9. 'c' → logprob: -4.268525123596191
    10. 'n' → logprob: -4.268525123596191

Token 179: '(' (ID: 7)
  Prédit: '('
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(' → logprob: -0.0014935573562979698
    2. '2' → logprob: -7.501493453979492
    3. '(ans' → logprob: -7.751493453979492
    4. '(n' → logprob: -8.126493453979492
    5. '(c' → logprob: -9.876493453979492
    6. '(
' → logprob: -10.001493453979492
    7. '(val' → logprob: -10.626493453979492
    8. '10' → logprob: -11.501493453979492
    9. '(mult' → logprob: -11.501493453979492
    10. 'ans' → logprob: -11.626493453979492

Token 180: '2' (ID: 17)
  Prédit: '2'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '2' → logprob: -0.016988465562462807
    2. '3' → logprob: -5.016988277435303
    3. '(' → logprob: -6.016988277435303
    4. '4' → logprob: -6.016988277435303
    5. 'n' → logprob: -6.266988277435303
    6. 'ans' → logprob: -6.766988277435303
    7. '10' → logprob: -6.891988277435303
    8. '(n' → logprob: -7.891988277435303
    9. ' ' → logprob: -8.516988754272461
    10. 'len' → logprob: -9.016988754272461

Token 181: ',' (ID: 11)
  Prédit: ','
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ',' → logprob: -0.11155445873737335
    2. '(idx' → logprob: -2.7365543842315674
    3. ',len' → logprob: -3.9865543842315674
    4. 'idx' → logprob: -4.6115546226501465
    5. ',n' → logprob: -4.8615546226501465
    6. ' ,' → logprob: -6.4865546226501465
    7. '(len' → logprob: -6.7365546226501465
    8. '(' → logprob: -7.3615546226501465
    9. '(n' → logprob: -7.9865546226501465
    10. ' idx' → logprob: -8.736554145812988

Token 182: ' ' (ID: 220)
  Prédit: 'n'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'n' → logprob: -0.013788280077278614
    2. 'idx' → logprob: -4.513788223266602
    3. 'len' → logprob: -6.013788223266602
    4. ' n' → logprob: -8.638788223266602
    5. '   ' → logprob: -9.638788223266602
    6. ' idx' → logprob: -11.263788223266602
    7. ' ' → logprob: -11.638788223266602
    8. '  ' → logprob: -11.763788223266602
    9. ' len' → logprob: -12.513788223266602
    10. 'ans' → logprob: -12.638788223266602

Token 183: '2' (ID: 17)
  Prédit: 'n'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'n' → logprob: -0.03691711649298668
    2. 'idx' → logprob: -3.411917209625244
    3. 'len' → logprob: -5.786917209625244
    4. ' n' → logprob: -9.661916732788086
    5. '(n' → logprob: -9.786916732788086
    6. '   ' → logprob: -10.786916732788086
    7. ' idx' → logprob: -11.411916732788086
    8. 'i' → logprob: -11.661916732788086
    9. 'ans' → logprob: -11.911916732788086
    10. '(idx' → logprob: -12.286916732788086

Token 184: ' *' (ID: 425)
  Prédit: 'n'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'n' → logprob: -0.002700377954170108
    2. '*n' → logprob: -6.502700328826904
    3. '(n' → logprob: -7.502700328826904
    4. 'idx' → logprob: -8.502700805664062
    5. 'len' → logprob: -8.627700805664062
    6. '*' → logprob: -8.752700805664062
    7. ' n' → logprob: -10.627700805664062
    8. ')' → logprob: -11.252700805664062
    9. ',n' → logprob: -11.377700805664062
    10. '   ' → logprob: -11.502700805664062

Token 185: ' n' (ID: 297)
  Prédit: 'n'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'n' → logprob: -0.0013364320620894432
    2. '(n' → logprob: -6.751336574554443
    3. 'len' → logprob: -9.126336097717285
    4. ' n' → logprob: -10.501336097717285
    5. '(' → logprob: -12.001336097717285
    6. 'idx' → logprob: -12.251336097717285
    7. '(len' → logprob: -12.751336097717285
    8. '
' → logprob: -12.876336097717285
    9. 'ans' → logprob: -12.876336097717285
    10. '   ' → logprob: -13.251336097717285

Token 186: ' -' (ID: 533)
  Prédit: ','
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ',' → logprob: -0.0003277176001574844
    2. '-' → logprob: -8.625328063964844
    3. ' ,' → logprob: -9.750328063964844
    4. ')' → logprob: -9.875328063964844
    5. '[' → logprob: -10.625328063964844
    6. '+' → logprob: -12.250328063964844
    7. ',n' → logprob: -12.375328063964844
    8. ' -' → logprob: -13.125328063964844
    9. '```' → logprob: -14.125328063964844
    10. '*' → logprob: -14.250328063964844

Token 187: ' ' (ID: 220)
  Prédit: '1'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '1' → logprob: -0.012780033983290195
    2. '2' → logprob: -4.38778018951416
    3. '3' → logprob: -8.88778018951416
    4. '-' → logprob: -9.38778018951416
    5. ' ' → logprob: -10.76278018951416
    6. 'idx' → logprob: -11.88778018951416
    7. ' -' → logprob: -12.26278018951416
    8. 'n' → logprob: -12.51278018951416
    9. 'ans' → logprob: -12.63778018951416
    10. 'len' → logprob: -12.63778018951416

Token 188: '2' (ID: 17)
  Prédit: '1'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '1' → logprob: -0.18577714264392853
    2. '2' → logprob: -1.935777187347412
    3. '3' → logprob: -3.685777187347412
    4. 'idx' → logprob: -9.935776710510254
    5. ' ' → logprob: -10.435776710510254
    6. '4' → logprob: -10.560776710510254
    7. '   ' → logprob: -11.498276710510254
    8. '5' → logprob: -11.935776710510254
    9. 'ans' → logprob: -11.998276710510254
    10. 'len' → logprob: -12.498276710510254

Token 189: ',' (ID: 11)
  Prédit: ','
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ',' → logprob: -0.00020926215802319348
    2. ' ,' → logprob: -8.500208854675293
    3. ')' → logprob: -12.250208854675293
    4. '+' → logprob: -15.875208854675293
    5. '```' → logprob: -16.12520980834961
    6. ',n' → logprob: -16.25020980834961
    7. 'MOD' → logprob: -16.25020980834961
    8. '   ' → logprob: -16.25020980834961
    9. ',
' → logprob: -16.87520980834961
    10. '3' → logprob: -16.87520980834961

Token 190: ' MOD' (ID: 32868)
  Prédit: 'MOD'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'MOD' → logprob: -0.001170225441455841
    2. ' MOD' → logprob: -6.7511701583862305
    3. '_MOD' → logprob: -18.626171112060547
    4. ')' → logprob: -19.751171112060547
    5. 'mod' → logprob: -20.251171112060547
    6. '   ' → logprob: -20.251171112060547
    7. ' ' → logprob: -20.626171112060547
    8. '.MOD' → logprob: -20.751171112060547
    9. 'MD' → logprob: -21.251171112060547
    10. 'MO' → logprob: -21.251171112060547

Token 191: ')
' (ID: 446)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')' → logprob: -0.00011951648048125207
    2. ')
' → logprob: -9.25011920928955
    3. ',' → logprob: -10.75011920928955
    4. ')

' → logprob: -13.87511920928955
    5. ' )' → logprob: -15.00011920928955
    6. '))' → logprob: -15.87511920928955
    7. '),' → logprob: -16.125120162963867
    8. ',
' → logprob: -16.375120162963867
    9. '```' → logprob: -16.875120162963867
    10. ')
' → logprob: -17.000120162963867

Token 192: 'result' (ID: 2521)
  Prédit: 'print'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'print' → logprob: -0.20167645812034607
    2. 'ans' → logprob: -1.7016764879226685
    3. 'result' → logprob: -8.451676368713379
    4. 'answer' → logprob: -10.076676368713379
    5. '(ans' → logprob: -12.451676368713379
    6. 'res' → logprob: -14.451676368713379
    7. ' ans' → logprob: -14.451676368713379
    8. '```' → logprob: -14.451676368713379
    9. 'for' → logprob: -14.576676368713379
    10. 'final' → logprob: -14.951676368713379

Token 193: ' =' (ID: 314)
  Prédit: ' ='
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' =' → logprob: -0.038519468158483505
    2. '=' → logprob: -3.2885193824768066
    3. 's' → logprob: -7.663519382476807
    4. ' ' → logprob: -12.413519859313965
    5. '_' → logprob: -13.663519859313965
    6. ' ' → logprob: -13.788519859313965
    7. ' +=' → logprob: -15.038519859313965
    8. '  ' → logprob: -15.288519859313965
    9. ')' → logprob: -15.413519859313965
    10. ',' → logprob: -15.913519859313965

Token 194: ' (' (ID: 350)
  Prédit: '(ans'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(ans' → logprob: -0.0039609745144844055
    2. 'ans' → logprob: -5.628961086273193
    3. ' (' → logprob: -8.128960609436035
    4. ' ans' → logprob: -10.128960609436035
    5. '(' → logprob: -10.878960609436035
    6. '(an' → logprob: -13.378960609436035
    7. '	ans' → logprob: -13.753960609436035
    8. '(mult' → logprob: -14.003960609436035
    9. '(answer' → logprob: -14.128960609436035
    10. '   ' → logprob: -14.503960609436035

Token 195: 'ans' (ID: 616)
  Prédit: 'ans'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'ans' → logprob: -0.014367755502462387
    2. '(ans' → logprob: -4.264367580413818
    3. ' ans' → logprob: -8.514368057250977
    4. '	ans' → logprob: -13.764368057250977
    5. 'answer' → logprob: -14.639368057250977
    6. '   ' → logprob: -14.764368057250977
    7. 'mult' → logprob: -14.764368057250977
    8. '(' → logprob: -15.139368057250977
    9. ' (' → logprob: -15.139368057250977
    10. '_ans' → logprob: -15.139368057250977

Token 196: ' *' (ID: 425)
  Prédit: ' *'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' *' → logprob: -0.34845250844955444
    2. '*' → logprob: -1.2234525680541992
    3. ' ' → logprob: -12.3484525680542
    4. ' ' → logprob: -13.4734525680542
    5. ')' → logprob: -13.9734525680542
    6. '**' → logprob: -14.5984525680542
    7. '*object' → logprob: -15.5984525680542
    8. '+' → logprob: -16.598451614379883
    9. 'mult' → logprob: -16.723451614379883
    10. '```' → logprob: -16.848451614379883

Token 197: ' mult' (ID: 3469)
  Prédit: 'mult'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'mult' → logprob: -0.004081724211573601
    2. ' mult' → logprob: -5.504081726074219
    3. '(mult' → logprob: -13.379081726074219
    4. 'mul' → logprob: -13.754081726074219
    5. 'pow' → logprob: -15.379081726074219
    6. 'mod' → logprob: -16.00408172607422
    7. 'multip' → logprob: -16.00408172607422
    8. ' ' → logprob: -16.50408172607422
    9. '   ' → logprob: -16.50408172607422
    10. ' pow' → logprob: -17.50408172607422

Token 198: ')' (ID: 8)
  Prédit: ')'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')' → logprob: -1.8624639324116288e-06
    2. ')%' → logprob: -13.500001907348633
    3. ' )' → logprob: -15.000001907348633
    4. '）' → logprob: -18.875001907348633
    5. '   ' → logprob: -20.000001907348633
    6. '```' → logprob: -21.000001907348633
    7. ')
' → logprob: -21.125001907348633
    8. '`)' → logprob: -21.250001907348633
    9. '%' → logprob: -21.375001907348633
    10. '')' → logprob: -21.500001907348633

Token 199: ' %' (ID: 1851)
  Prédit: '%'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '%' → logprob: -0.5759427547454834
    2. ' %' → logprob: -0.8259427547454834
    3. 'print' → logprob: -12.950942993164062
    4. ')' → logprob: -15.200942993164062
    5. ' ' → logprob: -15.200942993164062
    6. '
' → logprob: -15.575942993164062
    7. ' %=' → logprob: -16.825942993164062
    8. '```' → logprob: -16.950942993164062
    9. ')%' → logprob: -17.075942993164062
    10. ' ' → logprob: -17.450942993164062

Token 200: ' MOD' (ID: 32868)
  Prédit: 'MOD'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'MOD' → logprob: -3.128163257315464e-07
    2. ' MOD' → logprob: -15.5
    3. '_MOD' → logprob: -20.625
    4. 'MO' → logprob: -21.0
    5. '```' → logprob: -22.5
    6. '.MOD' → logprob: -23.0
    7. '(M' → logprob: -23.125
    8. 'MODE' → logprob: -23.75
    9. 'MODULE' → logprob: -23.75
    10. 'MD' → logprob: -24.5

Token 201: '
' (ID: 198)
  Prédit: 'print'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'print' → logprob: -1.9361264946837764e-07
    2. ' print' → logprob: -16.375
    3. '```' → logprob: -18.25
    4. '<|end|>' → logprob: -18.25
    5. '#print' → logprob: -18.5
    6. 'return' → logprob: -19.125
    7. '
' → logprob: -19.25
    8. 'pr' → logprob: -20.25
    9. '(print' → logprob: -21.625
    10. '#' → logprob: -21.75

Token 202: 'print' (ID: 1598)
  Prédit: 'print'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'print' → logprob: 0.0
    2. '```' → logprob: -18.0
    3. ' print' → logprob: -19.125
    4. 'pr' → logprob: -21.25
    5. 'return' → logprob: -21.25
    6. '#print' → logprob: -21.875
    7. 'result' → logprob: -22.375
    8. 'prin' → logprob: -23.625
    9. '-print' → logprob: -24.75
    10. '<|end|>' → logprob: -24.875

Token 203: '(result' (ID: 8111)
  Prédit: '(result'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(result' → logprob: -0.0031893588602542877
    2. 'result' → logprob: -5.753189563751221
    3. '(' → logprob: -11.378189086914062
    4. ' result' → logprob: -16.253189086914062
    5. ' (' → logprob: -18.128189086914062
    6. '()' → logprob: -18.753189086914062
    7. ',result' → logprob: -18.878189086914062
    8. '(
' → logprob: -19.003189086914062
    9. '=result' → logprob: -19.503189086914062
    10. '[result' → logprob: -19.503189086914062

Token 204: ')' (ID: 8)
  Prédit: ')'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')' → logprob: -3.128163257315464e-07
    2. ' )' → logprob: -15.625
    3. ')
' → logprob: -16.75
    4. '))' → logprob: -18.125
    5. '}' → logprob: -18.875
    6. ')#' → logprob: -19.25
    7. ')`' → logprob: -19.375
    8. '```' → logprob: -20.0
    9. '#' → logprob: -20.125
    10. '(' → logprob: -20.25

Token 205: ' ' (ID: 220)
  Prédit: ''
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False

Token 206: ' #' (ID: 1069)
  Prédit: ''
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False

Token 207: ' Je' (ID: 4678)
  Prédit: ''
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False

Token 208: ' mets' (ID: 87155)
  Prédit: ' pense'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' pense' → logprob: -0.928837239742279
    2. 'vais' → logprob: -1.6788372993469238
    3. 'continue' → logprob: -2.803837299346924
    4. 'veux' → logprob: -2.803837299346924
    5. '```' → logprob: -2.928837299346924
    6. 's' → logprob: -3.053837299346924
    7. ' continue' → logprob: -3.053837299346924
    8. ' suis' → logprob: -3.553837299346924
    9. 'viens' → logprob: -4.678837299346924
    10. 'n' → logprob: -4.928837299346924

Token 209: ' tout' (ID: 5501)
  Prédit: 'le'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'le' → logprob: -1.2554800510406494
    2. 'la' → logprob: -1.2554800510406494
    3. 'ici' → logprob: -2.3804800510406494
    4. 'fin' → logprob: -2.3804800510406494
    5. 'à' → logprob: -2.5054800510406494
    6. 'tout' → logprob: -3.3804800510406494
    7. 'result' → logprob: -3.5054800510406494
    8. 'un' → logprob: -3.8804800510406494
    9. '(result' → logprob: -4.25547981262207
    10. '#' → logprob: -4.88047981262207

Token 210: ' dans' (ID: 2671)
  Prédit: ''
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False

Token 211: ' une' (ID: 2463)
  Prédit: 'une'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'une' → logprob: -0.5452695488929749
    2. 'la' → logprob: -1.67026948928833
    3. 'le' → logprob: -2.17026948928833
    4. 'un' → logprob: -2.29526948928833
    5. 'one' → logprob: -5.04526948928833
    6. 'l' → logprob: -5.17026948928833
    7. 'ce' → logprob: -6.79526948928833
    8. '```' → logprob: -7.17026948928833
    9. 'print' → logprob: -7.79526948928833
    10. 'c' → logprob: -7.79526948928833

Token 212: ' variable' (ID: 11076)
  Prédit: 'single'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'single' → logprob: -0.5314027667045593
    2. 'one' → logprob: -1.781402826309204
    3. 'ligne' → logprob: -2.031402826309204
    4. 'print' → logprob: -3.406402826309204
    5. 'unique' → logprob: -3.656402826309204
    6. 'bou' → logprob: -4.281402587890625
    7. 'se' → logprob: -4.406402587890625
    8. 'phrase' → logprob: -5.281402587890625
    9. 'f' → logprob: -5.906402587890625
    10. 'comment' → logprob: -6.281402587890625

Token 213: ' pour' (ID: 1930)
  Prédit: ''
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False

Token 214: ' impression' (ID: 24462)
  Prédit: 'fac'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'fac' → logprob: -0.48459407687187195
    2. 'la' → logprob: -1.7345941066741943
    3. 'plus' → logprob: -2.8595941066741943
    4. 'clar' → logprob: -3.8595941066741943
    5. 'p' → logprob: -3.9845941066741943
    6. '#' → logprob: -3.9845941066741943
    7. 'g' → logprob: -4.109593868255615
    8. 'avoir' → logprob: -4.234593868255615
    9. ' faciliter' → logprob: -4.484593868255615
    10. 'lais' → logprob: -4.859593868255615

Token 215: ',' (ID: 11)
  Prédit: ''
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False

Token 216: ' c' (ID: 274)
  Prédit: '#'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '#' → logprob: -0.4620901942253113
    2. 'cela' → logprob: -2.212090253829956
    3. ' mais' → logprob: -2.837090253829956
    4. 'car' → logprob: -3.087090253829956
    5. 'mais' → logprob: -3.337090253829956
    6. 'sys' → logprob: -3.712090253829956
    7. ' ' → logprob: -4.837090015411377
    8. 'ens' → logprob: -4.962090015411377
    9. ' parce' → logprob: -4.962090015411377
    10. 'au' → logprob: -4.962090015411377

Token 217: ''est' (ID: 6616)
  Prédit: 'ar'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'ar' → logprob: -0.29130735993385315
    2. 'ont' → logprob: -2.5413074493408203
    3. '#' → logprob: -2.7913074493408203
    4. 'om' → logprob: -3.0413074493408203
    5. ''est' → logprob: -4.16630744934082
    6. 'est' → logprob: -4.41630744934082
    7. 'omm' → logprob: -5.04130744934082
    8. 'ertain' → logprob: -5.04130744934082
    9. 'omme' → logprob: -5.16630744934082
    10. '```' → logprob: -5.16630744934082

Token 218: ' plus' (ID: 2932)
  Prédit: 'plus'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'plus' → logprob: -0.011642344295978546
    2. 'pr' → logprob: -6.0116424560546875
    3. 'f' → logprob: -6.2616424560546875
    4. ' plus' → logprob: -6.6366424560546875
    5. 'be' → logprob: -7.0116424560546875
    6. 'moins' → logprob: -7.0116424560546875
    7. 'tout' → logprob: -7.1366424560546875
    8. 'more' → logprob: -7.2616424560546875
    9. 'pro' → logprob: -7.7616424560546875
    10. 'fac' → logprob: -8.511642456054688

Token 219: ' clair' (ID: 71396)
  Prédit: 'pro'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'pro' → logprob: -0.06485486030578613
    2. 'python' → logprob: -3.939854860305786
    3. 'clair' → logprob: -4.064854621887207
    4. ' propre' → logprob: -4.939854621887207
    5. ' clair' → logprob: -5.189854621887207
    6. 'cl' → logprob: -5.564854621887207
    7. 'pr' → logprob: -5.814854621887207
    8. 'py' → logprob: -6.189854621887207
    9. 'clean' → logprob: -6.939854621887207
    10. 'rob' → logprob: -7.314854621887207

Token 220: ' je' (ID: 1264)
  Prédit: ''
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False

Token 221: ' trouve' (ID: 30913)
  Prédit: '#'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '#' → logprob: -1.0948532819747925
    2. 'n' → logprob: -1.7198532819747925
    3. 's' → logprob: -3.219853401184082
    4. 'print' → logprob: -3.344853401184082
    5. 'continue' → logprob: -3.469853401184082
    6. 'st' → logprob: -3.719853401184082
    7. '```' → logprob: -3.719853401184082
    8. 'cris' → logprob: -3.844853401184082
    9. 'ai' → logprob: -3.969853401184082
    10. 'vais' → logprob: -4.219853401184082

Token 222: '

' (ID: 279)
  Prédit: ''
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False

Token 223: '#' (ID: 2)
  Prédit: ''
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False

Token 224: ' Peut' (ID: 116891)
  Prédit: ''
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False

Token 225: '-être' (ID: 33599)
  Prédit: '-être'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '-être' → logprob: -1.3695573806762695
    2. '#' → logprob: -1.4945573806762695
    3. 'êt' → logprob: -1.7445573806762695
    4. 'ut' → logprob: -1.8695573806762695
    5. 'être' → logprob: -2.6195573806762695
    6. 'ur' → logprob: -3.9945573806762695
    7. 't' → logprob: -3.9945573806762695
    8. 'u' → logprob: -4.1195573806762695
    9. 'etre' → logprob: -4.3695573806762695
    10. ''t' → logprob: -5.1195573806762695

Token 226: ' que' (ID: 661)
  Prédit: ''
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False

Token 227: ' tout' (ID: 5501)
  Prédit: '#'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '#' → logprob: -1.3048588037490845
    2. 'une' → logprob: -1.3048588037490845
    3. 'c' → logprob: -2.054858684539795
    4. 'f' → logprob: -3.304858684539795
    5. 'le' → logprob: -3.304858684539795
    6. 'ce' → logprob: -3.429858684539795
    7. 'un' → logprob: -3.679858684539795
    8. 'd' → logprob: -3.804858684539795
    9. ' ce' → logprob: -3.804858684539795
    10. 'je' → logprob: -4.304858684539795

Token 228: ' n' (ID: 297)
  Prédit: ''
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False

Token 229: ''est' (ID: 6616)
  Prédit: ''est'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ''est' → logprob: -0.4815835952758789
    2. ''était' → logprob: -2.106583595275879
    3. ''' → logprob: -2.356583595275879
    4. '#' → logprob: -2.356583595275879
    5. '```' → logprob: -4.856583595275879
    6. 'est' → logprob: -4.981583595275879
    7. ''avait' → logprob: -5.356583595275879
    8. 'e' → logprob: -5.481583595275879
    9. ''#' → logprob: -5.481583595275879
    10. ''aur' → logprob: -5.481583595275879

Token 230: ' pas' (ID: 2173)
  Prédit: 'pas'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'pas' → logprob: -0.2738945186138153
    2. ' pas' → logprob: -1.5238945484161377
    3. 'f' → logprob: -5.023894309997559
    4. 'à' → logprob: -5.148894309997559
    5. '#' → logprob: -5.648894309997559
    6. 'comment' → logprob: -5.898894309997559
    7. 'utile' → logprob: -6.523894309997559
    8. 'necessary' → logprob: -8.898894309997559
    9. ' inutile' → logprob: -9.023894309997559
    10. ' utile' → logprob: -9.273894309997559

Token 231: ' optimal' (ID: 24174)
  Prédit: 'f'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'f' → logprob: -0.42304548621177673
    2. 'optim' → logprob: -2.9230453968048096
    3. ' parfait' → logprob: -3.0480453968048096
    4. 'optimal' → logprob: -3.0480453968048096
    5. 'par' → logprob: -3.6730453968048096
    6. 'utile' → logprob: -3.7980453968048096
    7. 'né' → logprob: -3.9230453968048096
    8. 'strict' → logprob: -4.048045635223389
    9. 'necessary' → logprob: -4.048045635223389
    10. 'util' → logprob: -4.048045635223389

Token 232: ' mais' (ID: 2899)
  Prédit: ''
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False

Token 233: ' ça' (ID: 13590)
  Prédit: 'ça'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'ça' → logprob: -0.007104632444679737
    2. 'cela' → logprob: -5.632104396820068
    3. 'c' → logprob: -5.882104396820068
    4. ' ça' → logprob: -8.257104873657227
    5. 'le' → logprob: -8.882104873657227
    6. '#' → logprob: -9.632104873657227
    7. 'fonction' → logprob: -9.757104873657227
    8. 'Ça' → logprob: -9.882104873657227
    9. 'on' → logprob: -10.132104873657227
    10. 'ca' → logprob: -11.007104873657227

Token 234: ' fait' (ID: 7473)
  Prédit: ''
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False

Token 235: ' le' (ID: 505)
  Prédit: 'le'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'le' → logprob: -0.07786207646131516
    2. 'ce' → logprob: -3.327862024307251
    3. 'l' → logprob: -3.702862024307251
    4. 'son' → logprob: -5.45286226272583
    5. 'fonction' → logprob: -5.82786226272583
    6. 'bien' → logprob: -6.07786226272583
    7. 'sens' → logprob: -6.45286226272583
    8. 'dé' → logprob: -7.70286226272583
    9. 'global' → logprob: -7.82786226272583
    10. 'part' → logprob: -8.202861785888672

Token 236: ' boulot' (ID: 155211)
  Prédit: 'job'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'job' → logprob: -0.010832153260707855
    2. 'trav' → logprob: -4.6358323097229
    3. 'b' → logprob: -7.6358323097229
    4. 'tr' → logprob: -8.135831832885742
    5. 'bout' → logprob: -10.010831832885742
    6. '_job' → logprob: -10.260831832885742
    7. 'taf' → logprob: -10.760831832885742
    8. '```' → logprob: -10.885831832885742
    9. 'fait' → logprob: -11.260831832885742
    10. 'work' → logprob: -11.385831832885742

Token 237: '.' (ID: 13)
  Prédit: ''
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False


RÉSUMÉ:
--------------------------------------------------------------------------------
Total des tokens analysés: 235
Tokens correctement prédits (1ère position, stricte): 63
Tokens correctement prédits (1ère position, avec adaptation): 64
Tokens correctement prédits (top 10): 134
Précision stricte (1ère position): 26.81%
Précision adaptée (1ère position): 27.23%
Précision (top 10): 57.02%
================================================================================
