================================================================================
ANALYSE DE PRÉDICTION TOKEN PAR TOKEN (BATCH API)
Date: 2025-06-04 20:09:12
Modèle de tokenisation: gpt-4o-mini
================================================================================

SCRIPT ANALYSÉ:
--------------------------------------------------------------------------------
k = int(input())
a = k // 2
if k % 2 == 0:
    print(a * a)
else:
    print(a * (a + 1))
--------------------------------------------------------------------------------

RÉSULTATS D'ANALYSE TOKEN PAR TOKEN:
--------------------------------------------------------------------------------
Token 0: 'k' (ID: 74)
  → Token d'amorce (pas de prédiction)

Token 1: ' =' (ID: 314)
  → Token d'amorce (pas de prédiction)

Token 2: ' int' (ID: 677)
  → Token d'amorce (pas de prédiction)

Token 3: '(input' (ID: 10054)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '(' → logprob: -0.006167917046695948
    2. '(k' → logprob: -5.131167888641357
    3. ''' → logprob: -9.881168365478516
    4. '```' → logprob: -9.881168365478516
    5. 'k' → logprob: -10.256168365478516
    6. '('' → logprob: -10.506168365478516
    7. '("("' → logprob: -11.006168365478516
    8. '()' → logprob: -11.506168365478516
    9. '[' → logprob: -11.506168365478516
    10. ')' → logprob: -11.756168365478516

Token 4: '())
' (ID: 4574)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '(' → logprob: -0.10969176143407822
    2. ')' → logprob: -2.359691858291626
    3. '()' → logprob: -5.109691619873047
    4. '(k' → logprob: -6.859691619873047
    5. '(
' → logprob: -6.984691619873047
    6. '())' → logprob: -7.984691619873047
    7. '('' → logprob: -8.234691619873047
    8. '```' → logprob: -8.734691619873047
    9. '(

' → logprob: -9.109691619873047
    10. ''' → logprob: -9.609691619873047

Token 5: 'a' (ID: 64)
  Prédit: '\n'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '\n' → logprob: -0.9529725909233093
    2. '+' → logprob: -1.077972650527954
    3. '*' → logprob: -1.952972650527954
    4. '%' → logprob: -2.952972650527954
    5. '\' → logprob: -3.827972650527954
    6. '#' → logprob: -4.202972412109375
    7. ' ' → logprob: -4.577972412109375
    8. ''' → logprob: -5.202972412109375
    9. ')' → logprob: -5.452972412109375
    10. '**' → logprob: -5.827972412109375

Token 6: ' =' (ID: 314)
  Prédit: '['
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '[' → logprob: -0.01878177374601364
    2. '+' → logprob: -4.143781661987305
    3. '=' → logprob: -7.018781661987305
    4. 'n' → logprob: -8.018781661987305
    5. 'f' → logprob: -8.268781661987305
    6. '\[' → logprob: -8.518781661987305
    7. '[n' → logprob: -8.893781661987305
    8. '[k' → logprob: -8.893781661987305
    9. '_' → logprob: -9.018781661987305
    10. '*' → logprob: -9.143781661987305

Token 7: ' k' (ID: 372)
  Prédit: ' []'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' []' → logprob: -0.7094888091087341
    2. '[]' → logprob: -0.9594888091087341
    3. '0' → logprob: -3.334488868713379
    4. ' k' → logprob: -4.209488868713379
    5. 'input' → logprob: -4.459488868713379
    6. 'list' → logprob: -4.584488868713379
    7. ' [' → logprob: -4.584488868713379
    8. '[' → logprob: -4.709488868713379
    9. '[int' → logprob: -5.084488868713379
    10. ' list' → logprob: -5.209488868713379

Token 8: ' //' (ID: 602)
  Prédit: '+'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '+' → logprob: -0.20008638501167297
    2. '%' → logprob: -2.2000863552093506
    3. '*' → logprob: -3.3250863552093506
    4. ' +' → logprob: -4.20008659362793
    5. ')' → logprob: -4.95008659362793
    6. '**' → logprob: -5.07508659362793
    7. ' %' → logprob: -6.70008659362793
    8. ' *' → logprob: -7.07508659362793
    9. '-' → logprob: -7.32508659362793
    10. '>' → logprob: -7.45008659362793

Token 9: ' ' (ID: 220)
  Prédit: '2'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '2' → logprob: -0.09429396688938141
    2. '10' → logprob: -2.7192940711975098
    3. '3' → logprob: -4.84429407119751
    4. '100' → logprob: -4.96929407119751
    5. ' ' → logprob: -5.09429407119751
    6. '5' → logprob: -6.21929407119751
    7. '4' → logprob: -8.094293594360352
    8. '1' → logprob: -8.219293594360352
    9. '60' → logprob: -8.469293594360352
    10. '12' → logprob: -9.094293594360352

Token 10: '2' (ID: 17)
  Prédit: '2'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '2' → logprob: -0.5205318331718445
    2. '10' → logprob: -1.0205318927764893
    3. '60' → logprob: -4.27053165435791
    4. '100' → logprob: -4.52053165435791
    5. '3' → logprob: -4.52053165435791
    6. '5' → logprob: -5.14553165435791
    7. '1' → logprob: -6.27053165435791
    8. '4' → logprob: -7.39553165435791
    9. '7' → logprob: -7.64553165435791
    10. '360' → logprob: -8.27053165435791

Token 11: '
' (ID: 198)
  Prédit: '+'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '+' → logprob: -0.0019348275382071733
    2. ' +' → logprob: -7.251935005187988
    3. '\n' → logprob: -8.126935005187988
    4. '*' → logprob: -8.376935005187988
    5. '+
' → logprob: -8.626935005187988
    6. 'if' → logprob: -9.001935005187988
    7. '%' → logprob: -9.626935005187988
    8. '\' → logprob: -9.626935005187988
    9. ' ' → logprob: -9.876935005187988
    10. ')' → logprob: -9.876935005187988

Token 12: 'if' (ID: 366)
  Prédit: '+'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '+' → logprob: -0.01880587264895439
    2. 'if' → logprob: -4.393805980682373
    3. 'print' → logprob: -6.518805980682373
    4. '*' → logprob: -6.518805980682373
    5. ' +' → logprob: -6.893805980682373
    6. 'b' → logprob: -7.143805980682373
    7. ' if' → logprob: -7.643805980682373
    8. ' ' → logprob: -8.518805503845215
    9. '+
' → logprob: -8.643805503845215
    10. '\n' → logprob: -8.893805503845215

Token 13: ' k' (ID: 372)
  Prédit: ' a'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' a' → logprob: -0.11952868849039078
    2. ' k' → logprob: -2.3695287704467773
    3. ' ' → logprob: -4.619528770446777
    4. 'a' → logprob: -4.744528770446777
    5. 'k' → logprob: -7.744528770446777
    6. ' ' → logprob: -9.119528770446777
    7. ' not' → logprob: -11.369528770446777
    8. '  ' → logprob: -11.494528770446777
    9. '_a' → logprob: -11.994528770446777
    10. ' (' → logprob: -12.994528770446777

Token 14: ' %' (ID: 1851)
  Prédit: ' >'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' >' → logprob: -0.9174522161483765
    2. ' ' → logprob: -1.0424522161483765
    3. ' %' → logprob: -2.167452335357666
    4. ' >=' → logprob: -2.292452335357666
    5. ' <=' → logprob: -4.667452335357666
    6. ' <' → logprob: -4.917452335357666
    7. '>' → logprob: -5.042452335357666
    8. '%' → logprob: -5.292452335357666
    9. ' ==' → logprob: -5.792452335357666
    10. '  ' → logprob: -7.917452335357666

Token 15: ' ' (ID: 220)
  Prédit: '2'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '2' → logprob: -0.31326404213905334
    2. ' ' → logprob: -1.313264012336731
    3. '3' → logprob: -14.188263893127441
    4. '```' → logprob: -14.313263893127441
    5. '4' → logprob: -14.563263893127441
    6. ' ' → logprob: -15.438263893127441
    7. '1' → logprob: -15.813263893127441
    8. '  ' → logprob: -17.563264846801758
    9. '>' → logprob: -17.688264846801758
    10. '0' → logprob: -17.938264846801758

Token 16: '2' (ID: 17)
  Prédit: '2'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '2' → logprob: -6.20603168499656e-05
    2. ' ' → logprob: -9.750061988830566
    3. '3' → logprob: -13.000061988830566
    4. 'a' → logprob: -14.000061988830566
    5. '4' → logprob: -14.750061988830566
    6. '1' → logprob: -16.500062942504883
    7. '```' → logprob: -16.625062942504883
    8. '5' → logprob: -18.125062942504883
    9. '   ' → logprob: -18.125062942504883
    10. '10' → logprob: -18.125062942504883

Token 17: ' ==' (ID: 951)
  Prédit: ' =='
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' ==' → logprob: -0.03268427774310112
    2. ' !=' → logprob: -3.657684326171875
    3. '==' → logprob: -5.282684326171875
    4. ' ' → logprob: -7.032684326171875
    5. '!=' → logprob: -9.032684326171875
    6. ' :' → logprob: -9.282684326171875
    7. ':' → logprob: -9.532684326171875
    8. ' =' → logprob: -9.782684326171875
    9. '>' → logprob: -11.032684326171875
    10. ' >' → logprob: -11.282684326171875

Token 18: ' ' (ID: 220)
  Prédit: ' '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' ' → logprob: -0.061976537108421326
    2. '0' → logprob: -2.811976432800293
    3. '1' → logprob: -11.686976432800293
    4. ' ' → logprob: -14.936976432800293
    5. '=' → logprob: -17.56197738647461
    6. '  ' → logprob: -17.62447738647461
    7. '```' → logprob: -17.81197738647461
    8. ' a' → logprob: -18.12447738647461
    9. ')' → logprob: -18.12447738647461
    10. '==' → logprob: -18.18697738647461

Token 19: '0' (ID: 15)
  Prédit: '0'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '0' → logprob: -0.004414217080920935
    2. ' ' → logprob: -5.504414081573486
    3. '1' → logprob: -8.004414558410645
    4. '2' → logprob: -13.254414558410645
    5. '  ' → logprob: -18.004413604736328
    6. '```' → logprob: -18.066913604736328
    7. 'a' → logprob: -18.254413604736328
    8. '==' → logprob: -18.441913604736328
    9. '   ' → logprob: -19.066913604736328
    10. ' ' → logprob: -19.191913604736328

Token 20: ':
' (ID: 734)
  Prédit: ':'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ':' → logprob: -1.0325924449716695e-05
    2. ':**' → logprob: -12.50001049041748
    3. '):' → logprob: -12.62501049041748
    4. ' :' → logprob: -13.75001049041748
    5. ':
' → logprob: -14.12501049041748
    6. '':' → logprob: -14.50001049041748
    7. '>:' → logprob: -14.87501049041748
    8. '':'' → logprob: -15.50001049041748
    9. '":' → logprob: -16.375009536743164
    10. '：' → logprob: -17.125009536743164

Token 21: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.4590952396392822
    2. '\n' → logprob: -1.0840952396392822
    3. 'print' → logprob: -4.084095001220703
    4. '\' → logprob: -5.209095001220703
    5. ' print' → logprob: -5.834095001220703
    6. ' ' → logprob: -6.334095001220703
    7. '```' → logprob: -7.834095001220703
    8. '    
' → logprob: -7.959095001220703
    9. ' a' → logprob: -7.959095001220703
    10. ' \' → logprob: -8.584095001220703

Token 22: ' print' (ID: 2123)
  Prédit: ' print'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' print' → logprob: -0.5663080215454102
    2. 'print' (adapté à ' print') → logprob: -1.3163080215454102
    3. '   ' → logprob: -1.8163080215454102
    4. '```' → logprob: -8.06630802154541
    5. ' ' → logprob: -8.31630802154541
    6. ' a' → logprob: -8.56630802154541
    7. '`' → logprob: -8.56630802154541
    8. '\n' → logprob: -8.81630802154541
    9. ' \' → logprob: -9.19130802154541
    10. '       ' → logprob: -9.69130802154541

Token 23: '(a' (ID: 6271)
  Prédit: '(a'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(a' → logprob: -0.08171674609184265
    2. '(' → logprob: -2.831716775894165
    3. '("' → logprob: -4.331716537475586
    4. '('' → logprob: -5.081716537475586
    5. '(k' → logprob: -9.581716537475586
    6. '("("' → logprob: -9.706716537475586
    7. '((' → logprob: -10.456716537475586
    8. '()' → logprob: -10.956716537475586
    9. 'a' → logprob: -11.331716537475586
    10. '(True' → logprob: -13.331716537475586

Token 24: ' *' (ID: 425)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ')' → logprob: -9.13388703338569e-06
    2. '*' → logprob: -12.625009536743164
    3. '))' → logprob: -13.250009536743164
    4. ')
' → logprob: -13.750009536743164
    5. '+' → logprob: -14.250009536743164
    6. ' )' → logprob: -14.500009536743164
    7. '')' → logprob: -15.000009536743164
    8. '**' → logprob: -15.375009536743164
    9. '`)' → logprob: -15.375009536743164
    10. '```' → logprob: -15.500009536743164

Token 25: ' a' (ID: 261)
  Prédit: '2'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '2' → logprob: -0.2704726457595825
    2. 'a' → logprob: -1.6454726457595825
    3. ' ' → logprob: -4.145472526550293
    4. '"' → logprob: -4.520472526550293
    5. ' a' → logprob: -4.520472526550293
    6. '(a' → logprob: -6.520472526550293
    7. '4' → logprob: -6.770472526550293
    8. '"*' → logprob: -6.895472526550293
    9. '3' → logprob: -7.020472526550293
    10. '(' → logprob: -7.895472526550293

Token 26: ')
' (ID: 446)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')' → logprob: -1.7120533811976202e-05
    2. '*' → logprob: -11.750017166137695
    3. ')
' → logprob: -12.000017166137695
    4. ' )' → logprob: -13.875017166137695
    5. '+' → logprob: -14.750017166137695
    6. '**' → logprob: -15.250017166137695
    7. '))' → logprob: -15.500017166137695
    8. ')`' → logprob: -15.750017166137695
    9. '`)' → logprob: -16.000017166137695
    10. ')**' → logprob: -16.125017166137695

Token 27: 'else' (ID: 2807)
  Prédit: 'else'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'else' → logprob: -0.007750486955046654
    2. ' else' → logprob: -5.382750511169434
    3. 'elif' → logprob: -6.632750511169434
    4. '*' → logprob: -6.882750511169434
    5. '```' → logprob: -8.007750511169434
    6. '<|end|>' → logprob: -8.632750511169434
    7. '\n' → logprob: -9.507750511169434
    8. ')' → logprob: -10.132750511169434
    9. 'e' → logprob: -10.507750511169434
    10. '    
' → logprob: -10.507750511169434

Token 28: ':
' (ID: 734)
  Prédit: ':'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ':' → logprob: -4.334533878136426e-05
    2. ':
' → logprob: -10.125042915344238
    3. '   ' → logprob: -14.000042915344238
    4. ' :' → logprob: -14.500042915344238
    5. '):' → logprob: -14.625042915344238
    6. '**' → logprob: -14.750042915344238
    7. '():' → logprob: -15.250042915344238
    8. ':**' → logprob: -15.375042915344238
    9. '*' → logprob: -15.875042915344238
    10. ',' → logprob: -16.500043869018555

Token 29: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.3183149993419647
    2. '```' → logprob: -2.318315029144287
    3. '<|end|>' → logprob: -2.943315029144287
    4. '+' → logprob: -3.318315029144287
    5. ' ' → logprob: -3.818315029144287
    6. '`' → logprob: -4.443315029144287
    7. '    ' → logprob: -4.568315029144287
    8. '\' → logprob: -5.193315029144287
    9. '\n' → logprob: -5.318315029144287
    10. ' +' → logprob: -5.443315029144287

Token 30: ' print' (ID: 2123)
  Prédit: 'a'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'a' → logprob: -0.7178901433944702
    2. '(a' → logprob: -1.0928901433944702
    3. 'print' (adapté à ' print') → logprob: -1.8428901433944702
    4. '(' → logprob: -4.84289026260376
    5. ' (' → logprob: -5.09289026260376
    6. '```' → logprob: -7.09289026260376
    7. '(k' → logprob: -7.34289026260376
    8. '((' → logprob: -7.34289026260376
    9. '   ' → logprob: -7.46789026260376
    10. ' a' → logprob: -7.59289026260376

Token 31: '(a' (ID: 6271)
  Prédit: '(a'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(a' → logprob: -0.1968012899160385
    2. '((' → logprob: -2.07180118560791
    3. '(' → logprob: -2.94680118560791
    4. '(k' → logprob: -9.19680118560791
    5. 'a' → logprob: -9.69680118560791
    6. '(((' → logprob: -12.57180118560791
    7. '('' → logprob: -12.69680118560791
    8. '(n' → logprob: -12.94680118560791
    9. ' (' → logprob: -12.94680118560791
    10. '(A' → logprob: -14.19680118560791

Token 32: ' *' (ID: 425)
  Prédit: '*'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '*' → logprob: -0.01600116677582264
    2. ' *' → logprob: -4.266001224517822
    3. '+' → logprob: -6.391001224517822
    4. ' +' → logprob: -9.516000747680664
    5. '*(' → logprob: -10.266000747680664
    6. ')' → logprob: -10.391000747680664
    7. '*)' → logprob: -11.266000747680664
    8. ' ' → logprob: -12.891000747680664
    9. '**' → logprob: -13.766000747680664
    10. '*a' → logprob: -14.641000747680664

Token 33: ' (' (ID: 350)
  Prédit: '(a'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(a' → logprob: -0.012796267867088318
    2. '(' → logprob: -4.762796401977539
    3. ' (' → logprob: -6.262796401977539
    4. 'a' → logprob: -6.262796401977539
    5. 'k' → logprob: -8.887796401977539
    6. '(k' → logprob: -9.012796401977539
    7. '(
' → logprob: -10.137796401977539
    8. '   ' → logprob: -11.262796401977539
    9. '    ' → logprob: -11.512796401977539
    10. '1' → logprob: -11.512796401977539

Token 34: 'a' (ID: 64)
  Prédit: 'a'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'a' → logprob: -0.5782179236412048
    2. '(a' → logprob: -0.8282179236412048
    3. '(' → logprob: -6.57821798324585
    4. ' (' → logprob: -7.57821798324585
    5. ' a' → logprob: -8.078217506408691
    6. '1' → logprob: -10.453217506408691
    7. 'k' → logprob: -10.828217506408691
    8. '2' → logprob: -12.078217506408691
    9. ' ' → logprob: -13.453217506408691
    10. ')a' → logprob: -13.578217506408691

Token 35: ' +' (ID: 659)
  Prédit: '+'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '+' → logprob: -0.01823633536696434
    2. ' +' → logprob: -4.01823616027832
    3. '1' → logprob: -10.39323616027832
    4. '+a' → logprob: -10.51823616027832
    5. '+)' → logprob: -11.39323616027832
    6. 'plus' → logprob: -12.01823616027832
    7. ' plus' → logprob: -12.14323616027832
    8. '2' → logprob: -14.01823616027832
    9. '+k' → logprob: -14.26823616027832
    10. '+n' → logprob: -14.26823616027832

Token 36: ' ' (ID: 220)
  Prédit: '1'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '1' → logprob: -1.0325924449716695e-05
    2. ' ' → logprob: -11.50001049041748
    3. ')' → logprob: -16.125009536743164
    4. '```' → logprob: -18.750009536743164
    5. '<|end|>' → logprob: -19.875009536743164
    6. '2' → logprob: -20.000009536743164
    7. '   ' → logprob: -20.250009536743164
    8. '`' → logprob: -21.375009536743164
    9. '１' → logprob: -21.875009536743164
    10. '۱' → logprob: -21.875009536743164

Token 37: '1' (ID: 16)
  Prédit: '1'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '1' → logprob: 0.0
    2. ' ' → logprob: -16.75
    3. ')' → logprob: -18.625
    4. '2' → logprob: -19.625
    5. '```' → logprob: -20.25
    6. '１' → logprob: -21.75
    7. '۱' → logprob: -22.375
    8. '১' → logprob: -22.625
    9. '`' → logprob: -23.125
    10. '१' → logprob: -23.25

Token 38: '))' (ID: 915)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')' → logprob: -2.2007883671903983e-05
    2. '))' → logprob: -10.750021934509277
    3. ' )' → logprob: -15.375021934509277
    4. ')))' → logprob: -15.875021934509277
    5. ')a' → logprob: -16.875022888183594
    6. '`)' → logprob: -17.000022888183594
    7. ')`' → logprob: -17.000022888183594
    8. '*)' → logprob: -17.625022888183594
    9. '')' → logprob: -17.625022888183594
    10. '*' → logprob: -17.625022888183594


RÉSUMÉ:
--------------------------------------------------------------------------------
Total des tokens analysés: 36
Tokens correctement prédits (1ère position, stricte): 13
Tokens correctement prédits (1ère position, avec adaptation): 13
Tokens correctement prédits (top 10): 29
Précision stricte (1ère position): 36.11%
Précision adaptée (1ère position): 36.11%
Précision (top 10): 80.56%
================================================================================
