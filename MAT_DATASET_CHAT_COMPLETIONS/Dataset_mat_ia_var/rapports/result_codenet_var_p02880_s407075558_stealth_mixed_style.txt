================================================================================
ANALYSE DE PRÉDICTION TOKEN PAR TOKEN (BATCH API)
Date: 2025-06-04 19:40:56
Modèle de tokenisation: gpt-4o-mini
================================================================================

SCRIPT ANALYSÉ:
--------------------------------------------------------------------------------
n = int(input())

def check(x):
    for i in range(1,10):
        for j in range(1,10):
            if i*j==x: return True
    return False

class R:
    pass

r = R()
setattr(r, 'ans', 'No')
if check(n):
    r.ans = 'Yes'

print(getattr(r, 'ans'))
--------------------------------------------------------------------------------

RÉSULTATS D'ANALYSE TOKEN PAR TOKEN:
--------------------------------------------------------------------------------
Token 0: 'n' (ID: 77)
  → Token d'amorce (pas de prédiction)

Token 1: ' =' (ID: 314)
  → Token d'amorce (pas de prédiction)

Token 2: ' int' (ID: 677)
  → Token d'amorce (pas de prédiction)

Token 3: '(input' (ID: 10054)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '(' → logprob: -0.0008432185277342796
    2. '('' → logprob: -7.625843048095703
    3. ''' → logprob: -8.500843048095703
    4. '```' → logprob: -10.375843048095703
    5. '("("' → logprob: -10.500843048095703
    6. '`' → logprob: -10.500843048095703
    7. '(
' → logprob: -10.750843048095703
    8. '(n' → logprob: -11.000843048095703
    9. '()' → logprob: -12.000843048095703
    10. '"' → logprob: -12.500843048095703

Token 4: '())

' (ID: 27654)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '(' → logprob: -0.2621469497680664
    2. ')' → logprob: -1.5121469497680664
    3. '()' → logprob: -4.762146949768066
    4. '())' → logprob: -7.012146949768066
    5. '(
' → logprob: -9.137146949768066
    6. '')' → logprob: -9.262146949768066
    7. '('' → logprob: -9.387146949768066
    8. '```' → logprob: -9.637146949768066
    9. ''' → logprob: -10.012146949768066
    10. '")' → logprob: -10.137146949768066

Token 5: 'def' (ID: 1314)
  Prédit: 'if'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'if' → logprob: -0.7557514905929565
    2. 'for' → logprob: -1.0057514905929565
    3. 'i' → logprob: -2.005751609802246
    4. 's' → logprob: -4.255751609802246
    5. 'f' → logprob: -4.880751609802246
    6. 'x' → logprob: -5.630751609802246
    7. ' if' → logprob: -6.755751609802246
    8. ' for' → logprob: -7.005751609802246
    9. 'm' → logprob: -8.130751609802246
    10. 'sum' → logprob: -8.255751609802246

Token 6: ' check' (ID: 2371)
  Prédit: ' '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' ' → logprob: -0.03266558796167374
    2. ' factorial' → logprob: -3.907665491104126
    3. ' space' → logprob: -5.407665729522705
    4. ' f' → logprob: -5.657665729522705
    5. ' my' → logprob: -7.157665729522705
    6. ' sum' → logprob: -7.782665729522705
    7. '_' → logprob: -7.907665729522705
    8. ' main' → logprob: -8.157665252685547
    9. ' factor' → logprob: -8.157665252685547
    10. ' calculate' → logprob: -8.282665252685547

Token 7: '(x' (ID: 4061)
  Prédit: '_'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '_' → logprob: -0.02102130465209484
    2. '(' → logprob: -3.8960213661193848
    3. '_space' → logprob: -8.646020889282227
    4. 's' → logprob: -9.896020889282227
    5. '_parent' → logprob: -9.896020889282227
    6. ' _' → logprob: -10.271020889282227
    7. '_s' → logprob: -10.521020889282227
    8. '_(' → logprob: -10.521020889282227
    9. ' (' → logprob: -10.896020889282227
    10. ' ' → logprob: -11.146020889282227

Token 8: '):
' (ID: 1883)
  Prédit: '):'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '):' → logprob: -0.1003435030579567
    2. ')' → logprob: -2.3503434658050537
    3. ':' → logprob: -10.600343704223633
    4. ',' → logprob: -10.975343704223633
    5. ')>' → logprob: -11.225343704223633
    6. '):
' → logprob: -11.225343704223633
    7. '[' → logprob: -11.475343704223633
    8. '_' → logprob: -11.850343704223633
    9. '(x' → logprob: -11.975343704223633
    10. ' ):' → logprob: -12.100343704223633

Token 9: '   ' (ID: 271)
  Prédit: ':'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ':' → logprob: -0.7432413697242737
    2. '   ' → logprob: -0.7432413697242737
    3. '(' → logprob: -3.618241310119629
    4. ' ' → logprob: -3.993241310119629
    5. ' return' → logprob: -7.493241310119629
    6. ' :' → logprob: -7.618241310119629
    7. ')' → logprob: -7.618241310119629
    8. '    ' → logprob: -7.868241310119629
    9. ':
' → logprob: -7.993241310119629
    10. '):' → logprob: -8.243241310119629

Token 10: ' for' (ID: 395)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.06845571845769882
    2. ' ' → logprob: -3.068455696105957
    3. ' return' → logprob: -4.693455696105957
    4. ' if' → logprob: -5.818455696105957
    5. '    ' → logprob: -6.068455696105957
    6. ' 
' → logprob: -6.443455696105957
    7. 'return' → logprob: -7.818455696105957
    8. ' \' → logprob: -7.943455696105957
    9. '    
' → logprob: -8.068455696105957
    10. '       ' → logprob: -8.068455696105957

Token 11: ' i' (ID: 575)
  Prédit: ' i'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' i' → logprob: -0.08587732911109924
    2. ' ' → logprob: -2.7108774185180664
    3. 'i' → logprob: -4.210877418518066
    4. ' in' → logprob: -7.585877418518066
    5. ' range' → logprob: -8.585877418518066
    6. '_' → logprob: -9.085877418518066
    7. ' _' → logprob: -9.585877418518066
    8. ' num' → logprob: -10.835877418518066
    9. '  ' → logprob: -10.960877418518066
    10. ')' → logprob: -11.085877418518066

Token 12: ' in' (ID: 306)
  Prédit: ' in'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' in' → logprob: -0.014851292595267296
    2. 'in' → logprob: -4.264851093292236
    3. ' ' → logprob: -7.514851093292236
    4. 'n' → logprob: -9.889851570129395
    5. '  ' → logprob: -10.014851570129395
    6. '   ' → logprob: -10.889851570129395
    7. ' n' → logprob: -12.264851570129395
    8. ')' → logprob: -12.264851570129395
    9. ',' → logprob: -12.639851570129395
    10. '	in' → logprob: -12.639851570129395

Token 13: ' range' (ID: 3352)
  Prédit: ' range'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' range' → logprob: -0.016079770401120186
    2. 'range' → logprob: -4.141079902648926
    3. ' ' → logprob: -10.141079902648926
    4. ' x' → logprob: -13.766079902648926
    5. ' xrange' → logprob: -13.891079902648926
    6. '	range' → logprob: -14.266079902648926
    7. '   ' → logprob: -14.516079902648926
    8. ')' → logprob: -14.516079902648926
    9. ' n' → logprob: -14.641079902648926
    10. '  ' → logprob: -14.766079902648926

Token 14: '(' (ID: 7)
  Prédit: '('
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(' → logprob: -0.0008916903752833605
    2. '(x' → logprob: -7.50089168548584
    3. '(n' → logprob: -8.00089168548584
    4. ' (' → logprob: -13.25089168548584
    5. '(len' → logprob: -14.00089168548584
    6. '(i' → logprob: -15.00089168548584
    7. '(int' → logprob: -15.75089168548584
    8. '((' → logprob: -15.87589168548584
    9. '(s' → logprob: -16.625892639160156
    10. '(
' → logprob: -16.750892639160156

Token 15: '1' (ID: 16)
  Prédit: '2'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '2' → logprob: -0.6084354519844055
    2. '1' → logprob: -0.9834354519844055
    3. 'x' → logprob: -2.7334353923797607
    4. 'n' → logprob: -4.73343563079834
    5. ' ' → logprob: -5.60843563079834
    6. '(' → logprob: -6.48343563079834
    7. ' x' → logprob: -6.73343563079834
    8. ')' → logprob: -7.60843563079834
    9. '   ' → logprob: -7.73343563079834
    10. '0' → logprob: -8.23343563079834

Token 16: ',' (ID: 11)
  Prédit: ','
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ',' → logprob: -0.034087300300598145
    2. ' ,' → logprob: -3.4090871810913086
    3. ',n' → logprob: -7.909087181091309
    4. ',x' → logprob: -10.034087181091309
    5. ' ' → logprob: -11.284087181091309
    6. '+' → logprob: -11.409087181091309
    7. 'n' → logprob: -13.659087181091309
    8. '1' → logprob: -14.034087181091309
    9. ' x' → logprob: -14.159087181091309
    10. 'x' → logprob: -14.159087181091309

Token 17: '10' (ID: 702)
  Prédit: ' x'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' x' → logprob: -0.48032766580581665
    2. 'x' → logprob: -0.9803276658058167
    3. ' n' → logprob: -5.480327606201172
    4. 'n' → logprob: -6.230327606201172
    5. ' ' → logprob: -9.605327606201172
    6. ' int' → logprob: -11.605327606201172
    7. '10' → logprob: -11.730327606201172
    8. 'int' → logprob: -11.980327606201172
    9. ')' → logprob: -14.355327606201172
    10. '2' → logprob: -14.605327606201172

Token 18: '):
' (ID: 1883)
  Prédit: '):'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '):' → logprob: -0.0071940007619559765
    2. ')' → logprob: -5.0071940422058105
    3. '+' → logprob: -8.507193565368652
    4. ':' → logprob: -9.507193565368652
    5. '0' → logprob: -9.632193565368652
    6. '):
' → logprob: -9.757193565368652
    7. ' ):' → logprob: -10.507193565368652
    8. '**' → logprob: -10.632193565368652
    9. ' ' → logprob: -11.507193565368652
    10. '1' → logprob: -12.132193565368652

Token 19: '       ' (ID: 309)
  Prédit: ':'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ':' → logprob: -0.21554824709892273
    2. ' ' → logprob: -2.215548276901245
    3. '   ' → logprob: -3.215548276901245
    4. ' :' → logprob: -4.340548038482666
    5. '):' → logprob: -4.465548038482666
    6. '    ' → logprob: -4.590548038482666
    7. ' if' → logprob: -6.465548038482666
    8. '       ' → logprob: -6.715548038482666
    9. '  ' → logprob: -6.840548038482666
    10. '+' → logprob: -6.840548038482666

Token 20: ' for' (ID: 395)
  Prédit: ' if'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' if' → logprob: -0.24506567418575287
    2. '   ' → logprob: -2.370065689086914
    3. ' ' → logprob: -2.995065689086914
    4. '    ' → logprob: -3.245065689086914
    5. 'if' → logprob: -3.870065689086914
    6. ':' → logprob: -5.120065689086914
    7. '       ' → logprob: -5.620065689086914
    8. ' :' → logprob: -6.120065689086914
    9. ' x' → logprob: -7.120065689086914
    10. ' (' → logprob: -8.370065689086914

Token 21: ' j' (ID: 441)
  Prédit: ' range'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' range' → logprob: -0.11527572572231293
    2. ' ' → logprob: -2.6152756214141846
    3. 'range' → logprob: -3.8652756214141846
    4. ' j' → logprob: -4.990275859832764
    5. ' x' → logprob: -5.240275859832764
    6. ' n' → logprob: -7.490275859832764
    7. ' (' → logprob: -7.740275859832764
    8. ' xrange' → logprob: -7.740275859832764
    9. ' i' → logprob: -8.240275382995605
    10. '(range' → logprob: -8.990275382995605

Token 22: ' in' (ID: 306)
  Prédit: ' in'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' in' → logprob: -0.07590404897928238
    2. 'in' → logprob: -2.700904130935669
    3. '(' → logprob: -5.20090389251709
    4. ' ' → logprob: -8.95090389251709
    5. ' (' → logprob: -10.20090389251709
    6. '	in' → logprob: -10.20090389251709
    7. '    ' → logprob: -10.32590389251709
    8. '   ' → logprob: -10.32590389251709
    9. '```' → logprob: -10.57590389251709
    10. ')' → logprob: -10.70090389251709

Token 23: ' range' (ID: 3352)
  Prédit: ' range'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' range' → logprob: -0.52361661195755
    2. 'range' → logprob: -0.89861661195755
    3. '(' → logprob: -8.148616790771484
    4. '(range' → logprob: -9.273616790771484
    5. ' ' → logprob: -10.148616790771484
    6. '1' → logprob: -10.148616790771484
    7. ' i' → logprob: -12.398616790771484
    8. '	range' → logprob: -12.398616790771484
    9. ' (' → logprob: -12.523616790771484
    10. 'n' → logprob: -12.648616790771484

Token 24: '(' (ID: 7)
  Prédit: '('
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(' → logprob: -0.00011975488450843841
    2. '(i' → logprob: -9.750120162963867
    3. ' (' → logprob: -10.000120162963867
    4. '(n' → logprob: -11.250120162963867
    5. '   ' → logprob: -14.375120162963867
    6. '(
' → logprob: -14.625120162963867
    7. '(len' → logprob: -14.750120162963867
    8. '((' → logprob: -15.000120162963867
    9. '(x' → logprob: -15.250120162963867
    10. '(j' → logprob: -15.625120162963867

Token 25: '1' (ID: 16)
  Prédit: '1'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '1' → logprob: -0.06256380677223206
    2. '10' → logprob: -3.062563896179199
    3. '0' → logprob: -4.812563896179199
    4. 'i' → logprob: -5.687563896179199
    5. '   ' → logprob: -7.562563896179199
    6. 'x' → logprob: -7.687563896179199
    7. '(' → logprob: -7.937563896179199
    8. 'n' → logprob: -8.1875638961792
    9. ' ' → logprob: -8.1875638961792
    10. '9' → logprob: -9.1875638961792

Token 26: ',' (ID: 11)
  Prédit: ','
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ',' → logprob: -0.010453424416482449
    2. ' ,' → logprob: -5.010453224182129
    3. '0' → logprob: -5.635453224182129
    4. '10' → logprob: -9.260453224182129
    5. ',n' → logprob: -10.510453224182129
    6. '1' → logprob: -11.635453224182129
    7. '   ' → logprob: -11.635453224182129
    8. ' ' → logprob: -12.135453224182129
    9. '9' → logprob: -12.260453224182129
    10. ',int' → logprob: -13.135453224182129

Token 27: '10' (ID: 702)
  Prédit: '10'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '10' → logprob: -0.003335990710183978
    2. '0' → logprob: -6.503335952758789
    3. '11' → logprob: -7.628335952758789
    4. ' ' → logprob: -7.628335952758789
    5. '1' → logprob: -8.253335952758789
    6. 'n' → logprob: -8.753335952758789
    7. '100' → logprob: -9.128335952758789
    8. 'i' → logprob: -9.253335952758789
    9. 'x' → logprob: -9.253335952758789
    10. '101' → logprob: -9.628335952758789

Token 28: '):
' (ID: 1883)
  Prédit: '):'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '):' → logprob: -0.0012829720508307219
    2. ':' → logprob: -7.501283168792725
    3. '):
' → logprob: -7.501283168792725
    4. '+' → logprob: -8.876282691955566
    5. ')' → logprob: -10.501282691955566
    6. ' ):' → logprob: -12.751282691955566
    7. '   ' → logprob: -13.126282691955566
    8. '**' → logprob: -14.001282691955566
    9. '):
' → logprob: -14.501282691955566
    10. ',' → logprob: -14.501282691955566

Token 29: '           ' (ID: 352)
  Prédit: '           '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '           ' → logprob: -0.42046698927879333
    2. ':' → logprob: -1.2954670190811157
    3. '       ' → logprob: -3.295466899871826
    4. ' :' → logprob: -4.420466899871826
    5. '               ' → logprob: -5.420466899871826
    6. '):' → logprob: -5.795466899871826
    7. '        ' → logprob: -5.920466899871826
    8. ' ' → logprob: -5.920466899871826
    9. '            ' → logprob: -6.295466899871826
    10. '   ' → logprob: -7.170466899871826

Token 30: ' if' (ID: 538)
  Prédit: '               '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '               ' → logprob: -0.7219527363777161
    2. ' if' → logprob: -1.2219526767730713
    3. '           ' → logprob: -2.7219526767730713
    4. ' ' → logprob: -2.9719526767730713
    5. 'if' (adapté à ' if') → logprob: -3.3469526767730713
    6. ':' → logprob: -3.8469526767730713
    7. '            ' → logprob: -4.09695291519165
    8. '                ' → logprob: -5.22195291519165
    9. '<|end|>' → logprob: -5.72195291519165
    10. ' (' → logprob: -5.97195291519165

Token 31: ' i' (ID: 575)
  Prédit: ' x'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' x' → logprob: -0.13334034383296967
    2. 'x' → logprob: -2.758340358734131
    3. ' (' → logprob: -3.383340358734131
    4. ' i' → logprob: -4.258340358734131
    5. ' ' → logprob: -4.883340358734131
    6. '(' → logprob: -6.133340358734131
    7. ' n' → logprob: -6.258340358734131
    8. '(x' → logprob: -7.258340358734131
    9. 'n' → logprob: -8.008339881896973
    10. 'i' → logprob: -8.258339881896973

Token 32: '*j' (ID: 138193)
  Prédit: '*'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '*' → logprob: -0.0450863242149353
    2. ' *' → logprob: -3.67008638381958
    3. '+' → logprob: -5.17008638381958
    4. '==' → logprob: -5.17008638381958
    5. '*j' → logprob: -5.92008638381958
    6. ' ==' → logprob: -6.42008638381958
    7. '*i' → logprob: -6.67008638381958
    8. '*x' → logprob: -7.04508638381958
    9. '%' → logprob: -8.545085906982422
    10. ' +' → logprob: -8.670085906982422

Token 33: '==' (ID: 560)
  Prédit: '=='
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '==' → logprob: -0.6955915093421936
    2. ' ==' → logprob: -0.6955915093421936
    3. '=' → logprob: -6.570591449737549
    4. '>' → logprob: -8.070591926574707
    5. '>=' → logprob: -8.320591926574707
    6. ' >=' → logprob: -8.445591926574707
    7. ' =' → logprob: -9.570591926574707
    8. '%' → logprob: -9.820591926574707
    9. ' >' → logprob: -10.195591926574707
    10. ' ' → logprob: -10.820591926574707

Token 34: 'x' (ID: 87)
  Prédit: 'x'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'x' → logprob: -0.018150178715586662
    2. ' x' → logprob: -4.018150329589844
    3. 'n' → logprob: -15.643150329589844
    4. ' ' → logprob: -16.643150329589844
    5. ')x' → logprob: -17.768150329589844
    6. '	x' → logprob: -18.018150329589844
    7. ' n' → logprob: -18.268150329589844
    8. '>x' → logprob: -20.018150329589844
    9. '"x' → logprob: -20.143150329589844
    10. '(x' → logprob: -20.393150329589844

Token 35: ':' (ID: 25)
  Prédit: ':'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ':' → logprob: -0.004720376338809729
    2. ':return' → logprob: -6.379720211029053
    3. ' and' → logprob: -6.629720211029053
    4. ':
' → logprob: -6.754720211029053
    5. ' :' → logprob: -8.129720687866211
    6. '               ' → logprob: -9.254720687866211
    7. '           ' → logprob: -9.754720687866211
    8. '):' → logprob: -10.879720687866211
    9. '       ' → logprob: -11.129720687866211
    10. 'and' → logprob: -11.254720687866211

Token 36: ' return' (ID: 622)
  Prédit: '               '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '               ' → logprob: -0.0025173963513225317
    2. ' return' → logprob: -6.752517223358154
    3. '           ' → logprob: -7.752517223358154
    4. '\n' → logprob: -8.002517700195312
    5. 'return' → logprob: -9.002517700195312
    6. '                
' → logprob: -9.127517700195312
    7. '                ' → logprob: -9.752517700195312
    8. '                   ' → logprob: -10.002517700195312
    9. ' 
' → logprob: -10.002517700195312
    10. '              ' → logprob: -10.127517700195312

Token 37: ' True' (ID: 6432)
  Prédit: 'True'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'True' → logprob: -0.04314226657152176
    2. ' True' → logprob: -3.418142318725586
    3. 'False' → logprob: -4.793142318725586
    4. 'i' → logprob: -7.418142318725586
    5. 'x' → logprob: -8.793142318725586
    6. '1' → logprob: -9.043142318725586
    7. ' False' → logprob: -9.168142318725586
    8. '"' → logprob: -9.668142318725586
    9. ' i' → logprob: -10.043142318725586
    10. ' ' → logprob: -10.918142318725586

Token 38: '
' (ID: 198)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.0371328629553318
    2. ' return' → logprob: -4.412132740020752
    3. ' ' → logprob: -4.787132740020752
    4. '       ' → logprob: -5.287132740020752
    5. '\n' → logprob: -6.287132740020752
    6. '    
' → logprob: -6.662132740020752
    7. '  ' → logprob: -6.787132740020752
    8. 'return' → logprob: -6.787132740020752
    9. '    ' → logprob: -7.037132740020752
    10. 'n' → logprob: -7.037132740020752

Token 39: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.016935965046286583
    2. ' ' → logprob: -5.1419358253479
    3. ' return' → logprob: -5.7669358253479
    4. '       ' → logprob: -6.0169358253479
    5. ' 
' → logprob: -6.6419358253479
    6. '\n' → logprob: -7.1419358253479
    7. '  ' → logprob: -7.3919358253479
    8. 'return' → logprob: -7.8919358253479
    9. '    
' → logprob: -7.8919358253479
    10. 'n' → logprob: -8.016936302185059

Token 40: ' return' (ID: 622)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.10154332220554352
    2. ' ' → logprob: -2.976543426513672
    3. ' return' → logprob: -4.851543426513672
    4. 'return' (adapté à ' return') → logprob: -4.976543426513672
    5. 'n' → logprob: -5.226543426513672
    6. 'False' → logprob: -5.351543426513672
    7. '  
' → logprob: -5.476543426513672
    8. '    
' → logprob: -5.601543426513672
    9. ' 
' → logprob: -5.726543426513672
    10. '  ' → logprob: -5.851543426513672

Token 41: ' False' (ID: 7983)
  Prédit: ' False'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' False' → logprob: -0.5759395956993103
    2. 'False' → logprob: -0.8259395956993103
    3. ' ' → logprob: -16.200939178466797
    4. ' True' → logprob: -17.200939178466797
    5. 'True' → logprob: -17.950939178466797
    6. ' ' → logprob: -18.075939178466797
    7. '(False' → logprob: -18.700939178466797
    8. ' None' → logprob: -20.950939178466797
    9. 'None' → logprob: -20.950939178466797
    10. ' false' → logprob: -21.200939178466797

Token 42: '

' (ID: 279)
  Prédit: '
'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '
' → logprob: -0.682075560092926
    2. '\n' → logprob: -1.4320755004882812
    3. 'n' → logprob: -1.6820755004882812
    4. '  
' → logprob: -4.182075500488281
    5. ' 
' → logprob: -4.307075500488281
    6. 'if' → logprob: -4.557075500488281
    7. '    
' → logprob: -4.932075500488281
    8. '\' → logprob: -5.057075500488281
    9. '<|end|>' → logprob: -5.432075500488281
    10. '```' → logprob: -5.682075500488281

Token 43: 'class' (ID: 1444)
  Prédit: 'i'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'i' → logprob: -0.7054605484008789
    2. 'if' → logprob: -0.7054605484008789
    3. 'print' → logprob: -5.580460548400879
    4. 'for' → logprob: -5.705460548400879
    5. 'p' → logprob: -6.205460548400879
    6. ' 
' → logprob: -6.955460548400879
    7. 'r' → logprob: -8.080460548400879
    8. ' if' → logprob: -8.080460548400879
    9. 'f' → logprob: -8.205460548400879
    10. 'n' → logprob: -8.330460548400879

Token 44: ' R' (ID: 460)
  Prédit: ' Solution'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' Solution' → logprob: -0.2109663039445877
    2. ' ' → logprob: -1.9609663486480713
    3. ' Solver' → logprob: -4.210966110229492
    4. ' Factor' → logprob: -4.460966110229492
    5. ' ' → logprob: -4.960966110229492
    6. ' Multip' → logprob: -5.335966110229492
    7. ' My' → logprob: -5.960966110229492
    8. ' Calculator' → logprob: -6.335966110229492
    9. ' Checker' → logprob: -6.460966110229492
    10. ' Counter' → logprob: -7.210966110229492

Token 45: ':
' (ID: 734)
  Prédit: 'unner'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'unner' → logprob: -0.18393579125404358
    2. 'un' → logprob: -3.1839358806610107
    3. 'e' → logprob: -3.4339358806610107
    4. 'a' → logprob: -3.5589358806610107
    5. 'u' → logprob: -3.8089358806610107
    6. 'unnable' → logprob: -4.183935642242432
    7. 'ational' → logprob: -4.933935642242432
    8. 'obot' → logprob: -5.433935642242432
    9. 'untime' → logprob: -5.558935642242432
    10. 'ange' → logprob: -5.933935642242432

Token 46: '   ' (ID: 271)
  Prédit: ':'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ':' → logprob: -0.02588091790676117
    2. '   ' → logprob: -4.150880813598633
    3. ' :' → logprob: -5.650880813598633
    4. ':
' → logprob: -5.650880813598633
    5. ' ' → logprob: -6.650880813598633
    6. ' def' → logprob: -8.150880813598633
    7. '(object' → logprob: -8.525880813598633
    8. '(n' → logprob: -8.650880813598633
    9. '  ' → logprob: -8.900880813598633
    10. ' :
' → logprob: -9.150880813598633

Token 47: ' pass' (ID: 1853)
  Prédit: ' def'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' def' → logprob: -0.03170589730143547
    2. 'def' → logprob: -3.781705856323242
    3. ' pass' → logprob: -4.906705856323242
    4. '   ' → logprob: -7.531705856323242
    5. ' __' → logprob: -8.406705856323242
    6. 'pass' (adapté à ' pass') → logprob: -9.281705856323242
    7. 'n' → logprob: -9.656705856323242
    8. ' n' → logprob: -10.156705856323242
    9. '```' → logprob: -11.531705856323242
    10. ' ' → logprob: -11.656705856323242

Token 48: '

' (ID: 279)
  Prédit: ''
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False

Token 49: 'r' (ID: 81)
  Prédit: 'r'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'r' → logprob: -0.23434223234653473
    2. 'if' → logprob: -2.359342336654663
    3. 'for' → logprob: -2.859342336654663
    4. 'R' → logprob: -3.484342336654663
    5. 'def' → logprob: -5.109342098236084
    6. 'result' → logprob: -5.609342098236084
    7. 'class' → logprob: -5.734342098236084
    8. 'a' → logprob: -5.984342098236084
    9. 'x' → logprob: -6.359342098236084
    10. 'ans' → logprob: -6.484342098236084

Token 50: ' =' (ID: 314)
  Prédit: ' ='
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' =' → logprob: -0.08172763139009476
    2. '.' → logprob: -3.0817277431488037
    3. '=' → logprob: -3.4567277431488037
    4. ' ' → logprob: -7.206727504730225
    5. '.=' → logprob: -8.956727981567383
    6. ' .' → logprob: -9.456727981567383
    7. '  ' → logprob: -9.456727981567383
    8. '   ' → logprob: -12.331727981567383
    9. ' .=' → logprob: -12.331727981567383
    10. 'a' → logprob: -12.456727981567383

Token 51: ' R' (ID: 460)
  Prédit: 'R'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'R' → logprob: -0.00031258241506293416
    2. ' R' → logprob: -8.125312805175781
    3. 'int' → logprob: -11.500312805175781
    4. 'n' → logprob: -12.125312805175781
    5. 'r' → logprob: -14.875312805175781
    6. '10' → logprob: -15.875312805175781
    7. ' ' → logprob: -16.50031280517578
    8. 'input' → logprob: -16.50031280517578
    9. '0' → logprob: -16.75031280517578
    10. '[]' → logprob: -17.00031280517578

Token 52: '()
' (ID: 1234)
  Prédit: '.'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '.' → logprob: -0.026401780545711517
    2. '<|end|>' → logprob: -4.026401996612549
    3. '.
' → logprob: -4.901401996612549
    4. '.

' → logprob: -8.27640151977539
    5. '
' → logprob: -9.15140151977539
    6. '<|end|>' → logprob: -9.52640151977539
    7. ' .' → logprob: -9.77640151977539
    8. 'if' → logprob: -10.15140151977539
    9. ' ' → logprob: -10.27640151977539
    10. 'r' → logprob: -10.65140151977539

Token 53: 'set' (ID: 977)
  Prédit: 'r'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'r' → logprob: -0.04193391650915146
    2. 'if' → logprob: -3.791934013366699
    3. 'n' → logprob: -5.041934013366699
    4. 'for' → logprob: -5.416934013366699
    5. '_' → logprob: -6.041934013366699
    6. 'i' → logprob: -6.916934013366699
    7. 'result' → logprob: -6.916934013366699
    8. 'x' → logprob: -7.291934013366699
    9. ' r' → logprob: -7.791934013366699
    10. 'a' → logprob: -8.1669340133667

Token 54: 'attr' (ID: 6035)
  Prédit: 'attr'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'attr' → logprob: -0.017105188220739365
    2. '()' → logprob: -4.1421051025390625
    3. '_attr' → logprob: -7.2671051025390625
    4. '(' → logprob: -9.517105102539062
    5. '(attr' → logprob: -9.517105102539062
    6. 'Attr' → logprob: -9.517105102539062
    7. 'attrs' → logprob: -9.642105102539062
    8. 'attribute' → logprob: -11.142105102539062
    9. 's' → logprob: -11.642105102539062
    10. '_attrs' → logprob: -11.642105102539062

Token 55: '(r' (ID: 4729)
  Prédit: '(r'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(r' → logprob: -0.0004307884373702109
    2. '(' → logprob: -7.750430583953857
    3. '(
' → logprob: -15.750431060791016
    4. '(

' → logprob: -19.500431060791016
    5. ' (' → logprob: -19.750431060791016
    6. '(R' → logprob: -20.375431060791016
    7. 'r' → logprob: -20.500431060791016
    8. '(s' → logprob: -21.125431060791016
    9. '(t' → logprob: -22.250431060791016
    10. '	r' → logprob: -22.250431060791016

Token 56: ',' (ID: 11)
  Prédit: ','
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ',' → logprob: -0.000992795336060226
    2. '(' → logprob: -7.375992774963379
    3. ' ,' → logprob: -8.250992774963379
    4. ',r' → logprob: -9.500992774963379
    5. '(r' → logprob: -11.875992774963379
    6. ','' → logprob: -11.875992774963379
    7. '',' → logprob: -12.125992774963379
    8. ')' → logprob: -13.250992774963379
    9. ''' → logprob: -13.250992774963379
    10. ' ' → logprob: -13.500992774963379

Token 57: ' '' (ID: 461)
  Prédit: '''
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ''' → logprob: -0.6662694215774536
    2. ''n' → logprob: -1.2912694215774536
    3. ''r' → logprob: -2.791269302368164
    4. ''s' → logprob: -2.791269302368164
    5. ''name' → logprob: -2.916269302368164
    6. '"' → logprob: -4.416269302368164
    7. ''a' → logprob: -5.666269302368164
    8. ''x' → logprob: -5.791269302368164
    9. ''f' → logprob: -5.916269302368164
    10. ''"' → logprob: -6.041269302368164

Token 58: 'ans' (ID: 616)
  Prédit: 'a'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'a' → logprob: -0.8637015223503113
    2. 'n' → logprob: -1.613701581954956
    3. 'attr' → logprob: -2.113701581954956
    4. 'x' → logprob: -2.488701581954956
    5. 'val' → logprob: -3.363701581954956
    6. 'value' → logprob: -3.363701581954956
    7. 'v' → logprob: -3.863701581954956
    8. 'name' → logprob: -4.488701343536377
    9. 'num' → logprob: -4.738701343536377
    10. ''' → logprob: -4.863701343536377

Token 59: '',' (ID: 787)
  Prédit: '','
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '',' → logprob: -0.001802630489692092
    2. ''' → logprob: -6.626802444458008
    3. '','' → logprob: -8.876802444458008
    4. 'ow' → logprob: -9.001802444458008
    5. 'w' → logprob: -9.376802444458008
    6. '')' → logprob: -10.126802444458008
    7. 'wer' → logprob: -10.501802444458008
    8. '1' → logprob: -11.251802444458008
    9. '',(' → logprob: -11.376802444458008
    10. ' ',' → logprob: -11.501802444458008

Token 60: ' '' (ID: 461)
  Prédit: 'False'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'False' → logprob: -0.64717698097229
    2. 'n' → logprob: -1.77217698097229
    3. '0' → logprob: -2.14717698097229
    4. 'True' → logprob: -3.39717698097229
    5. 'check' → logprob: -3.64717698097229
    6. ' n' → logprob: -3.89717698097229
    7. ' False' → logprob: -4.022176742553711
    8. 'None' → logprob: -4.522176742553711
    9. ''' → logprob: -4.647176742553711
    10. 'sum' → logprob: -4.647176742553711

Token 61: 'No' (ID: 3160)
  Prédit: 'No'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'No' → logprob: -1.2222312688827515
    2. 'Yes' → logprob: -1.3472312688827515
    3. 'YES' → logprob: -2.472231388092041
    4. '"' → logprob: -2.847231388092041
    5. 'None' → logprob: -3.097231388092041
    6. ''' → logprob: -3.222231388092041
    7. 'NO' → logprob: -3.347231388092041
    8. '')' → logprob: -3.597231388092041
    9. 'False' → logprob: -3.597231388092041
    10. 'True' → logprob: -3.722231388092041

Token 62: '')
' (ID: 2515)
  Prédit: '')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '')' → logprob: -0.3948041796684265
    2. ''' → logprob: -1.1448042392730713
    3. '')
' → logprob: -5.269804000854492
    4. 'if' → logprob: -7.019804000854492
    5. '')

' → logprob: -7.144804000854492
    6. '')
' → logprob: -7.519804000854492
    7. ' if' → logprob: -8.394804000854492
    8. ' ')' → logprob: -9.769804000854492
    9. '')

' → logprob: -10.144804000854492
    10. '")' → logprob: -10.394804000854492

Token 63: 'if' (ID: 366)
  Prédit: 'if'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'if' → logprob: -0.15175138413906097
    2. '
' → logprob: -2.1517512798309326
    3. ' if' → logprob: -4.651751518249512
    4. '<|end|>' → logprob: -5.026751518249512
    5. '\n' → logprob: -5.901751518249512
    6. '```' → logprob: -6.151751518249512
    7. 'for' → logprob: -6.276751518249512
    8. ' 
' → logprob: -8.276751518249512
    9. '
' → logprob: -8.401751518249512
    10. '' → logprob: -8.526751518249512

Token 64: ' check' (ID: 2371)
  Prédit: ' check'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' check' → logprob: -0.15323033928871155
    2. 'check' → logprob: -2.0282304286956787
    3. ' n' → logprob: -5.0282301902771
    4. 'n' → logprob: -6.0282301902771
    5. ' any' → logprob: -6.7782301902771
    6. ' not' → logprob: -8.778230667114258
    7. ' ' → logprob: -9.403230667114258
    8. 'any' → logprob: -9.528230667114258
    9. '(check' → logprob: -10.278230667114258
    10. 'not' → logprob: -11.528230667114258

Token 65: '(n' (ID: 2406)
  Prédit: '(n'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(n' → logprob: -0.009319908916950226
    2. '(' → logprob: -4.75931978225708
    3. ' (' → logprob: -7.25931978225708
    4. '(x' → logprob: -14.634320259094238
    5. '(s' → logprob: -15.134320259094238
    6. ' ' → logprob: -15.384320259094238
    7. '(
' → logprob: -16.009319305419922
    8. ')' → logprob: -16.384319305419922
    9. '(abs' → logprob: -16.509319305419922
    10. '((' → logprob: -16.759319305419922

Token 66: '):
' (ID: 1883)
  Prédit: '):'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '):' → logprob: -0.002216988243162632
    2. ' ):' → logprob: -6.377216815948486
    3. ')' → logprob: -7.627216815948486
    4. '):
' → logprob: -12.127217292785645
    5. ')):' → logprob: -12.252217292785645
    6. ':' → logprob: -12.377217292785645
    7. ''):' → logprob: -12.377217292785645
    8. ' ' → logprob: -12.627217292785645
    9. ')==' → logprob: -13.377217292785645
    10. '==' → logprob: -13.752217292785645

Token 67: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.38976821303367615
    2. ' setattr' → logprob: -1.3897682428359985
    3. ' set' → logprob: -3.264768123626709
    4. 'set' → logprob: -3.764768123626709
    5. ' r' → logprob: -5.889768123626709
    6. ' ' → logprob: -6.264768123626709
    7. 'r' → logprob: -6.764768123626709
    8. '    ' → logprob: -7.014768123626709
    9. ''' → logprob: -7.014768123626709
    10. '    
' → logprob: -7.139768123626709

Token 68: ' r' (ID: 428)
  Prédit: 'set'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'set' → logprob: -0.6595459580421448
    2. ' setattr' → logprob: -0.7845459580421448
    3. 'r' (adapté à ' r') → logprob: -4.5345458984375
    4. ' set' → logprob: -4.7845458984375
    5. ' r' → logprob: -4.9095458984375
    6. '   ' → logprob: -9.2845458984375
    7. ' getattr' → logprob: -12.0345458984375
    8. '_set' → logprob: -12.7845458984375
    9. '.set' → logprob: -12.9095458984375
    10. '#set' → logprob: -13.1595458984375

Token 69: '.' (ID: 13)
  Prédit: '.'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '.' → logprob: -0.0001468067930545658
    2. '.set' → logprob: -9.500146865844727
    3. ' .' → logprob: -9.875146865844727
    4. '.s' → logprob: -12.500146865844727
    5. '.an' → logprob: -12.750146865844727
    6. '	ans' → logprob: -13.375146865844727
    7. '.answer' → logprob: -13.375146865844727
    8. '.ass' → logprob: -13.875146865844727
    9. '.attr' → logprob: -14.000146865844727
    10. '.ant' → logprob: -14.125146865844727

Token 70: 'ans' (ID: 616)
  Prédit: 'ans'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'ans' → logprob: -5.438573680294212e-06
    2. 'set' → logprob: -12.250005722045898
    3. 'a' → logprob: -15.250005722045898
    4. ' ans' → logprob: -16.0000057220459
    5. '	ans' → logprob: -16.1250057220459
    6. '(ans' → logprob: -17.0000057220459
    7. 'answer' → logprob: -18.2500057220459
    8. ' ' → logprob: -18.5000057220459
    9. 'anst' → logprob: -18.6250057220459
    10. 'ann' → logprob: -18.7500057220459

Token 71: ' =' (ID: 314)
  Prédit: ' ='
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' =' → logprob: -0.14269179105758667
    2. '=' → logprob: -2.0176918506622314
    3. ' ' → logprob: -11.892691612243652
    4. ' ==' → logprob: -12.142691612243652
    5. ' ='' → logprob: -13.142691612243652
    6. '==' → logprob: -13.892691612243652
    7. '='' → logprob: -14.892691612243652
    8. ' ="' → logprob: -15.392691612243652
    9. ' =)' → logprob: -15.767691612243652
    10. ' =
' → logprob: -15.892691612243652

Token 72: ' '' (ID: 461)
  Prédit: '''
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ''' → logprob: -0.03699294105172157
    2. ' '' → logprob: -3.4119930267333984
    3. '"' → logprob: -5.786993026733398
    4. ' "' → logprob: -8.411993026733398
    5. ' ' → logprob: -11.161993026733398
    6. '   ' → logprob: -11.536993026733398
    7. ''S' → logprob: -12.036993026733398
    8. '"No' → logprob: -12.411993026733398
    9. ''s' → logprob: -12.786993026733398
    10. 'Yes' → logprob: -12.786993026733398

Token 73: 'Yes' (ID: 13022)
  Prédit: 'Yes'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'Yes' → logprob: -0.0019442226039245725
    2. 'Ye' → logprob: -6.251944065093994
    3. 'Y' → logprob: -12.126944541931152
    4. 'YES' → logprob: -12.251944541931152
    5. 'Ya' → logprob: -13.251944541931152
    6. ' Yes' → logprob: -13.376944541931152
    7. 'Yo' → logprob: -15.001944541931152
    8. 'Yeah' → logprob: -15.001944541931152
    9. ''' → logprob: -15.126944541931152
    10. 'yes' → logprob: -15.376944541931152

Token 74: ''

' (ID: 7497)
  Prédit: '''
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ''' → logprob: -2.5776860184123507e-06
    2. ''
' → logprob: -14.12500286102295
    3. '"' → logprob: -14.50000286102295
    4. '```' → logprob: -14.62500286102295
    5. '<|end|>' → logprob: -14.75000286102295
    6. ''''' → logprob: -15.75000286102295
    7. 'print' → logprob: -15.87500286102295
    8. '')' → logprob: -16.500001907348633
    9. ''r' → logprob: -17.625001907348633
    10. '`' → logprob: -17.750001907348633

Token 75: 'print' (ID: 1598)
  Prédit: ''
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False

Token 76: '(get' (ID: 7119)
  Prédit: '(r'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '(r' → logprob: -0.12694479525089264
    2. '(' → logprob: -2.1269447803497314
    3. '(n' → logprob: -11.751944541931152
    4. '('' → logprob: -12.751944541931152
    5. '()' → logprob: -13.001944541931152
    6. ' (' → logprob: -13.751944541931152
    7. '(f' → logprob: -14.376944541931152
    8. '((' → logprob: -14.376944541931152
    9. '(
' → logprob: -15.126944541931152
    10. 'r' → logprob: -15.626944541931152

Token 77: 'attr' (ID: 6035)
  Prédit: 'attr'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'attr' → logprob: -6.704273118884885e-07
    2. ' attr' → logprob: -15.500000953674316
    3. 'att' → logprob: -15.875000953674316
    4. 'atr' → logprob: -16.375
    5. 'at' → logprob: -16.875
    6. '	attr' → logprob: -17.25
    7. 'attro' → logprob: -17.875
    8. '(attr' → logprob: -18.125
    9. 'a' → logprob: -18.5
    10. 't' → logprob: -19.0

Token 78: '(r' (ID: 4729)
  Prédit: '(r'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(r' → logprob: -0.0003361774142831564
    2. '(' → logprob: -8.000336647033691
    3. 'r' → logprob: -14.625336647033691
    4. ')' → logprob: -16.250335693359375
    5. '(
' → logprob: -16.500335693359375
    6. '(n' → logprob: -17.250335693359375
    7. ' r' → logprob: -19.125335693359375
    8. ' (' → logprob: -19.500335693359375
    9. '	r' → logprob: -19.500335693359375
    10. ',r' → logprob: -19.625335693359375

Token 79: ',' (ID: 11)
  Prédit: ','
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ',' → logprob: -0.0003156817110721022
    2. ' ,' → logprob: -8.62531566619873
    3. ','' → logprob: -9.25031566619873
    4. ',r' → logprob: -10.25031566619873
    5. ' ,'' → logprob: -13.37531566619873
    6. ''' → logprob: -14.00031566619873
    7. '',' → logprob: -14.12531566619873
    8. '('' → logprob: -14.62531566619873
    9. ' ' → logprob: -15.12531566619873
    10. ''r' → logprob: -15.25031566619873

Token 80: ' '' (ID: 461)
  Prédit: '''
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ''' → logprob: -0.006946010515093803
    2. ' '' → logprob: -5.006946086883545
    3. ''r' → logprob: -9.131945610046387
    4. ''an' → logprob: -10.506945610046387
    5. '"' → logprob: -11.131945610046387
    6. ''ann' → logprob: -11.131945610046387
    7. ' ' → logprob: -11.256945610046387
    8. '(ans' → logprob: -11.506945610046387
    9. '   ' → logprob: -11.631945610046387
    10. '	ans' → logprob: -12.381945610046387

Token 81: 'ans' (ID: 616)
  Prédit: 'ans'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'ans' → logprob: -3.292907877039397e-06
    2. ' ans' → logprob: -13.37500286102295
    3. ''' → logprob: -14.00000286102295
    4. 'a' → logprob: -14.12500286102295
    5. '	ans' → logprob: -16.250003814697266
    6. ' ' → logprob: -17.875003814697266
    7. '(ans' → logprob: -18.000003814697266
    8. '   ' → logprob: -18.250003814697266
    9. 'an' → logprob: -18.625003814697266
    10. '  ' → logprob: -18.750003814697266

Token 82: ''))' (ID: 7974)
  Prédit: '))'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '))' → logprob: -0.04113693907856941
    2. ''))' → logprob: -3.2911369800567627
    3. ')' → logprob: -5.791136741638184
    4. '"))' → logprob: -11.166136741638184
    5. '')' → logprob: -11.666136741638184
    6. '()))' → logprob: -11.791136741638184
    7. ')))' → logprob: -13.291136741638184
    8. ' ))' → logprob: -13.291136741638184
    9. ',' → logprob: -14.541136741638184
    10. '))
' → logprob: -14.666136741638184


RÉSUMÉ:
--------------------------------------------------------------------------------
Total des tokens analysés: 80
Tokens correctement prédits (1ère position, stricte): 36
Tokens correctement prédits (1ère position, avec adaptation): 36
Tokens correctement prédits (top 10): 59
Précision stricte (1ère position): 45.00%
Précision adaptée (1ère position): 45.00%
Précision (top 10): 73.75%
================================================================================
