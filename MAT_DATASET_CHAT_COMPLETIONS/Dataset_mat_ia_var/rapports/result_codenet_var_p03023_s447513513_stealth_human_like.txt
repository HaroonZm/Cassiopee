================================================================================
ANALYSE DE PRÉDICTION TOKEN PAR TOKEN (BATCH API)
Date: 2025-06-04 19:58:23
Modèle de tokenisation: gpt-4o-mini
================================================================================

SCRIPT ANALYSÉ:
--------------------------------------------------------------------------------
# Bon, on prend un nombre ici
n = int(input())  # Pourquoi pas minuscule ?

# Calcul comme vu en cours, hein
res = (n - 2) * 180 # Peut-être qu'on aurait pu nommer différemment

print(res)  # Voilà le résultat
--------------------------------------------------------------------------------

RÉSULTATS D'ANALYSE TOKEN PAR TOKEN:
--------------------------------------------------------------------------------
Token 0: '#' (ID: 2)
  → Token d'amorce (pas de prédiction)

Token 1: ' Bon' (ID: 12658)
  → Token d'amorce (pas de prédiction)

Token 2: ',' (ID: 11)
  → Token d'amorce (pas de prédiction)

Token 3: ' on' (ID: 402)
  Prédit: 'jour'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'jour' → logprob: -0.022329123690724373
    2. ' je' → logprob: -5.022329330444336
    3. 'soir' → logprob: -5.522329330444336
    4. ' app' → logprob: -5.647329330444336
    5. '```' → logprob: -6.147329330444336
    6. ' ' → logprob: -6.647329330444336
    7. 'jours' → logprob: -6.647329330444336
    8. 'jou' → logprob: -6.897329330444336
    9. ' voilà' → logprob: -7.897329330444336
    10. '#' → logprob: -7.897329330444336

Token 4: ' prend' (ID: 37463)
  Prédit: ' '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' ' → logprob: -1.3734365701675415
    2. '```' → logprob: -1.8734365701675415
    3. 'n' → logprob: -1.9984365701675415
    4. 'ne' → logprob: -2.623436450958252
    5. 'u' → logprob: -2.748436450958252
    6. 't' → logprob: -2.873436450958252
    7. 'e' → logprob: -2.873436450958252
    8. ''' → logprob: -3.498436450958252
    9. ' ```' → logprob: -3.748436450958252
    10. '`' → logprob: -3.748436450958252

Token 5: ' un' (ID: 537)
  Prédit: ' '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' ' → logprob: -0.05714797228574753
    2. ' un' → logprob: -4.057147979736328
    3. ' ' → logprob: -4.807147979736328
    4. 'tout' → logprob: -5.182147979736328
    5. ' une' → logprob: -5.807147979736328
    6. ' la' → logprob: -5.932147979736328
    7. '  ' → logprob: -5.932147979736328
    8. 'un' → logprob: -6.057147979736328
    9. ' le' → logprob: -6.307147979736328
    10. 'une' → logprob: -6.307147979736328

Token 6: ' nombre' (ID: 9733)
  Prédit: ' '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' ' → logprob: -1.3332589864730835
    2. '#' → logprob: -1.4582589864730835
    3. '```' → logprob: -2.083259105682373
    4. 'pe' → logprob: -2.833259105682373
    5. ' #' → logprob: -3.458259105682373
    6. 'es' → logprob: -3.708259105682373
    7. 'c' → logprob: -3.833259105682373
    8. '  ' → logprob: -4.083259105682373
    9. 'moment' → logprob: -4.083259105682373
    10. 'token' → logprob: -4.333259105682373

Token 7: ' ici' (ID: 27994)
  Prédit: '='
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '=' → logprob: -0.416034996509552
    2. ' ' → logprob: -2.4160349369049072
    3. ' =' → logprob: -2.5410349369049072
    4. '#' → logprob: -2.9160349369049072
    5. 'n' → logprob: -3.4160349369049072
    6. '.' → logprob: -3.5410349369049072
    7. ',' → logprob: -3.6660349369049072
    8. '_' → logprob: -4.916035175323486
    9. ':' → logprob: -5.291035175323486
    10. 's' → logprob: -5.541035175323486

Token 8: '
' (ID: 198)
  Prédit: '='
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '=' → logprob: -0.3129672706127167
    2. 'n' → logprob: -1.937967300415039
    3. '#' → logprob: -3.062967300415039
    4. ' =' → logprob: -3.937967300415039
    5. 'x' → logprob: -4.187967300415039
    6. ',' → logprob: -4.687967300415039
    7. ' ' → logprob: -4.812967300415039
    8. 'nombre' → logprob: -4.812967300415039
    9. '.' → logprob: -5.312967300415039
    10. 'a' → logprob: -5.312967300415039

Token 9: 'n' (ID: 77)
  Prédit: ' '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' ' → logprob: -0.5688647031784058
    2. 'n' → logprob: -1.4438647031784058
    3. ' =' → logprob: -2.9438648223876953
    4. ',' → logprob: -3.5688648223876953
    5. '=' → logprob: -3.6938648223876953
    6. 'nombre' → logprob: -3.8188648223876953
    7. '_' → logprob: -4.443864822387695
    8. '.' → logprob: -4.693864822387695
    9. 'a' → logprob: -4.818864822387695
    10. 'x' → logprob: -4.943864822387695

Token 10: ' =' (ID: 314)
  Prédit: ' ='
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' =' → logprob: -0.2980805039405823
    2. ' ' → logprob: -1.6730804443359375
    3. '=' → logprob: -2.9230804443359375
    4. '_' → logprob: -4.4230804443359375
    5. 'u' → logprob: -7.2980804443359375
    6. 'space' → logprob: -7.6730804443359375
    7. '_space' → logprob: -7.7980804443359375
    8. '.' → logprob: -7.9230804443359375
    9. ')' → logprob: -7.9230804443359375
    10. 'umber' → logprob: -8.048080444335938

Token 11: ' int' (ID: 677)
  Prédit: ' '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' ' → logprob: -0.01738370582461357
    2. ' int' → logprob: -4.892383575439453
    3. '10' → logprob: -5.892383575439453
    4. 'int' → logprob: -6.017383575439453
    5. '5' → logprob: -6.517383575439453
    6. 'input' → logprob: -6.767383575439453
    7. ' input' → logprob: -7.142383575439453
    8. '0' → logprob: -7.517383575439453
    9. '1' → logprob: -8.767383575439453
    10. '4' → logprob: -9.017383575439453

Token 12: '(input' (ID: 10054)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(' → logprob: -0.00011439072113716975
    2. '('' → logprob: -10.750114440917969
    3. ' (' → logprob: -10.750114440917969
    4. '(n' → logprob: -10.875114440917969
    5. '(input' → logprob: -11.500114440917969
    6. '()' → logprob: -11.500114440917969
    7. '(
' → logprob: -11.750114440917969
    8. '(user' → logprob: -12.375114440917969
    9. '<|end|>' → logprob: -12.875114440917969
    10. '```' → logprob: -13.125114440917969

Token 13: '())' (ID: 3516)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(' → logprob: -0.002790611470118165
    2. '()' → logprob: -6.377790451049805
    3. ')' → logprob: -7.127790451049805
    4. '('' → logprob: -9.002790451049805
    5. '())' → logprob: -10.002790451049805
    6. '(""))' → logprob: -10.752790451049805
    7. '(
' → logprob: -11.002790451049805
    8. '("("' → logprob: -11.002790451049805
    9. '("")' → logprob: -11.127790451049805
    10. '(

' → logprob: -11.502790451049805

Token 14: ' ' (ID: 220)
  Prédit: '+'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '+' → logprob: -0.6807144284248352
    2. ')' → logprob: -1.8057143688201904
    3. '*' → logprob: -2.0557143688201904
    4. ' ' → logprob: -2.6807143688201904
    5. '#' → logprob: -3.3057143688201904
    6. '
' → logprob: -3.6807143688201904
    7. '\' → logprob: -4.3057146072387695
    8. '\n' → logprob: -4.4307146072387695
    9. '<|end|>' → logprob: -4.4307146072387695
    10. '```' → logprob: -5.0557146072387695

Token 15: ' #' (ID: 1069)
  Prédit: '#'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '#' → logprob: -0.8375131487846375
    2. '+' → logprob: -1.8375132083892822
    3. ')' → logprob: -2.2125132083892822
    4. 'if' → logprob: -2.3375132083892822
    5. ' ' → logprob: -2.7125132083892822
    6. '\n' → logprob: -3.7125132083892822
    7. '*' → logprob: -3.8375132083892822
    8. 'n' → logprob: -4.712512969970703
    9. 's' → logprob: -4.712512969970703
    10. '**' → logprob: -5.087512969970703

Token 16: ' Pourquoi' (ID: 94511)
  Prédit: ' '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' ' → logprob: -0.004286384675651789
    2. ')' → logprob: -6.754286289215088
    3. ' )' → logprob: -7.004286289215088
    4. '  ' → logprob: -7.254286289215088
    5. '<|end|>' → logprob: -7.879286289215088
    6. ' "' → logprob: -8.379286766052246
    7. ''' → logprob: -9.004286766052246
    8. '"' → logprob: -9.254286766052246
    9. ' \' → logprob: -9.379286766052246
    10. '<|end|>' → logprob: -9.754286766052246

Token 17: ' pas' (ID: 2173)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '(' → logprob: -0.019872359931468964
    2. '()' → logprob: -5.144872188568115
    3. ' (' → logprob: -5.644872188568115
    4. ' ' → logprob: -6.144872188568115
    5. ')' → logprob: -6.394872188568115
    6. '('' → logprob: -6.644872188568115
    7. '?' → logprob: -6.769872188568115
    8. '("' → logprob: -7.144872188568115
    9. ',' → logprob: -7.519872188568115
    10. '#' → logprob: -8.019872665405273

Token 18: ' min' (ID: 1349)
  Prédit: '
'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '
' → logprob: -0.7629624009132385
    2. '\n' → logprob: -0.8879624009132385
    3. '\' → logprob: -3.8879623413085938
    4. ' ' → logprob: -4.137962341308594
    5. '+' → logprob: -4.387962341308594
    6. '#' → logprob: -4.512962341308594
    7. ':' → logprob: -4.637962341308594
    8. '*' → logprob: -4.762962341308594
    9. '  
' → logprob: -4.887962341308594
    10. ')' → logprob: -5.137962341308594

Token 19: 'usc' (ID: 30081)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '(' → logprob: -0.4468790888786316
    2. '_' → logprob: -1.0718791484832764
    3. '()' → logprob: -5.071878910064697
    4. 'imum' → logprob: -5.446878910064697
    5. '(_' → logprob: -6.071878910064697
    6. '(
' → logprob: -6.696878910064697
    7. ')' → logprob: -6.696878910064697
    8. '(n' → logprob: -8.071879386901855
    9. ' _' → logprob: -8.321879386901855
    10. '(

' → logprob: -8.321879386901855

Token 20: 'ule' (ID: 1601)
  Prédit: 'ule'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'ule' → logprob: -0.0005015624337829649
    2. 'u' → logprob: -8.25050163269043
    3. 'ale' → logprob: -9.62550163269043
    4. '```' → logprob: -9.87550163269043
    5. 'ules' → logprob: -10.37550163269043
    6. 'уле' → logprob: -11.25050163269043
    7. 'ul' → logprob: -11.25050163269043
    8. 'e' → logprob: -11.62550163269043
    9. ' ule' → logprob: -11.62550163269043
    10. 'ulé' → logprob: -11.87550163269043

Token 21: ' ?

' (ID: 13570)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '(' → logprob: -0.9264991283416748
    2. ')' → logprob: -1.4264991283416748
    3. '#' → logprob: -2.426499128341675
    4. '+' → logprob: -2.676499128341675
    5. ' ' → logprob: -2.801499128341675
    6. '()' → logprob: -3.926499128341675
    7. ',' → logprob: -4.051499366760254
    8. ':' → logprob: -4.176499366760254
    9. '\' → logprob: -4.301499366760254
    10. '
' → logprob: -4.301499366760254

Token 22: '#' (ID: 2)
  Prédit: '+'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '+' → logprob: -0.710438072681427
    2. '#' → logprob: -2.5854380130767822
    3. 'i' → logprob: -2.5854380130767822
    4. ' ' → logprob: -2.5854380130767822
    5. 'if' → logprob: -2.7104380130767822
    6. ')' → logprob: -3.0854380130767822
    7. 'n' → logprob: -3.5854380130767822
    8. '
' → logprob: -3.8354380130767822
    9. ',' → logprob: -3.9604380130767822
    10. '*' → logprob: -3.9604380130767822

Token 23: ' Calcul' (ID: 57243)
  Prédit: ' if'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' if' → logprob: -0.6943389773368835
    2. 'if' → logprob: -1.1943390369415283
    3. 's' → logprob: -2.9443390369415283
    4. 'for' → logprob: -3.0693390369415283
    5. ' for' → logprob: -3.1943390369415283
    6. 'result' → logprob: -3.9443390369415283
    7. 'i' → logprob: -4.319338798522949
    8. 'x' → logprob: -5.319338798522949
    9. ' result' → logprob: -5.319338798522949
    10. '#' → logprob: -5.569338798522949

Token 24: ' comme' (ID: 7971)
  Prédit: '_'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '_' → logprob: -0.10071565210819244
    2. 's' → logprob: -2.7257156372070312
    3. ' ' → logprob: -3.9757156372070312
    4. '(' → logprob: -5.225715637207031
    5. 'u' → logprob: -6.600715637207031
    6. '#' → logprob: -7.100715637207031
    7. ')' → logprob: -7.225715637207031
    8. 'a' → logprob: -7.850715637207031
    9. 'n' → logprob: -7.975715637207031
    10. '=' → logprob: -7.975715637207031

Token 25: ' vu' (ID: 12005)
  Prédit: 'factor'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'factor' → logprob: -1.413066029548645
    2. ' factor' → logprob: -1.663066029548645
    3. ' la' → logprob: -1.913066029548645
    4. '_factor' → logprob: -1.913066029548645
    5. ' n' → logprob: -2.5380659103393555
    6. ' ceci' → logprob: -3.1630659103393555
    7. ' facteur' → logprob: -3.5380659103393555
    8. ' une' → logprob: -4.0380659103393555
    9. ' ça' → logprob: -4.5380659103393555
    10. '_s' → logprob: -4.7880659103393555

Token 26: ' en' (ID: 469)
  Prédit: ' n'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' n' → logprob: -0.9992398023605347
    2. 'n' → logprob: -1.4992398023605347
    3. 's' → logprob: -1.7492398023605347
    4. ' ' → logprob: -2.499239921569824
    5. '_' → logprob: -2.624239921569824
    6. ',' → logprob: -4.124239921569824
    7. ' ' → logprob: -4.749239921569824
    8. ' ,' → logprob: -4.874239921569824
    9. ' s' → logprob: -5.624239921569824
    10. ' dans' → logprob: -5.749239921569824

Token 27: ' cours' (ID: 10138)
  Prédit: ' cours'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' cours' → logprob: -0.8293974995613098
    2. ' math' → logprob: -1.329397439956665
    3. ' maths' → logprob: -2.454397439956665
    4. 'cours' → logprob: -2.704397439956665
    5. ' classe' → logprob: -3.079397439956665
    6. 'classe' → logprob: -3.204397439956665
    7. 'math' → logprob: -4.204397678375244
    8. 'python' → logprob: -5.204397678375244
    9. '```' → logprob: -5.204397678375244
    10. ' Python' → logprob: -5.704397678375244

Token 28: ',' (ID: 11)
  Prédit: 's'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 's' → logprob: -0.19446411728858948
    2. ' ' → logprob: -2.0694642066955566
    3. 'result' → logprob: -4.694464206695557
    4. '\' → logprob: -4.944464206695557
    5. '_' → logprob: -5.194464206695557
    6. 'r' → logprob: -5.444464206695557
    7. '```' → logprob: -6.069464206695557
    8. ',' → logprob: -6.194464206695557
    9. 'u' → logprob: -6.444464206695557
    10. 'n' → logprob: -6.569464206695557

Token 29: ' hein' (ID: 115155)
  Prédit: 'factor'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'factor' → logprob: -0.6107732653617859
    2. ' ' → logprob: -1.9857733249664307
    3. 's' → logprob: -2.6107733249664307
    4. ' s' → logprob: -2.8607733249664307
    5. ' factor' → logprob: -3.3607733249664307
    6. ' somme' → logprob: -3.3607733249664307
    7. ' factorial' → logprob: -3.9857733249664307
    8. ' facteur' → logprob: -4.110773086547852
    9. 'fact' → logprob: -4.235773086547852
    10. ' m' → logprob: -4.485773086547852

Token 30: '
' (ID: 198)
  Prédit: ' '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' ' → logprob: -0.12006007879972458
    2. 's' → logprob: -2.7450599670410156
    3. 'n' → logprob: -3.7450599670410156
    4. 'r' → logprob: -5.495059967041016
    5. 'a' → logprob: -5.995059967041016
    6. ',' → logprob: -6.120059967041016
    7. 'x' → logprob: -6.495059967041016
    8. '_' → logprob: -6.745059967041016
    9. ' ,' → logprob: -6.745059967041016
    10. 't' → logprob: -6.870059967041016

Token 31: 'res' (ID: 430)
  Prédit: 's'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 's' → logprob: -0.8776871562004089
    2. 'factor' → logprob: -1.3776872158050537
    3. 'result' → logprob: -2.7526872158050537
    4. 'fact' → logprob: -3.2526872158050537
    5. 'r' → logprob: -3.5026872158050537
    6. ' ' → logprob: -3.5026872158050537
    7. 'm' → logprob: -3.5026872158050537
    8. ' result' → logprob: -3.6276872158050537
    9. ' s' → logprob: -4.377686977386475
    10. 'f' → logprob: -4.377686977386475

Token 32: ' =' (ID: 314)
  Prédit: 'ult'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'ult' → logprob: -0.38468432426452637
    2. 'ultat' → logprob: -2.0096843242645264
    3. 'u' → logprob: -2.6346843242645264
    4. '=' → logprob: -2.8846843242645264
    5. ' =' → logprob: -3.1346843242645264
    6. 'ults' → logprob: -4.8846845626831055
    7. 'ul' → logprob: -5.2596845626831055
    8. ' ' → logprob: -7.6346845626831055
    9. 'ault' → logprob: -8.384684562683105
    10. 'ulta' → logprob: -8.384684562683105

Token 33: ' (' (ID: 350)
  Prédit: ' n'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' n' → logprob: -0.7178493142127991
    2. ' ' → logprob: -1.2178492546081543
    3. '1' → logprob: -2.0928492546081543
    4. '0' → logprob: -2.9678492546081543
    5. 'n' → logprob: -3.2178492546081543
    6. ' sum' → logprob: -7.467849254608154
    7. 'sum' → logprob: -8.217849731445312
    8. '2' → logprob: -8.717849731445312
    9. 'pow' → logprob: -9.092849731445312
    10. ' max' → logprob: -9.342849731445312

Token 34: 'n' (ID: 77)
  Prédit: 'n'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'n' → logprob: -0.04465903341770172
    2. ' n' → logprob: -3.16965913772583
    3. '2' → logprob: -7.04465913772583
    4. ' (' → logprob: -8.419658660888672
    5. '1' → logprob: -8.794658660888672
    6. ' ' → logprob: -9.044658660888672
    7. '(' → logprob: -9.294658660888672
    8. '3' → logprob: -9.794658660888672
    9. '(n' → logprob: -10.169658660888672
    10. 'pow' → logprob: -10.919658660888672

Token 35: ' -' (ID: 533)
  Prédit: ' +'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' +' → logprob: -0.7546993494033813
    2. ' *' → logprob: -1.5046993494033813
    3. '+' → logprob: -1.6296993494033813
    4. '*' → logprob: -2.629699230194092
    5. ' -' → logprob: -4.629699230194092
    6. '-' → logprob: -4.754699230194092
    7. '**' → logprob: -4.879699230194092
    8. ')' → logprob: -5.379699230194092
    9. ' )' → logprob: -6.129699230194092
    10. '*(' → logprob: -6.254699230194092

Token 36: ' ' (ID: 220)
  Prédit: ' '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' ' → logprob: -0.08911831676959991
    2. '1' → logprob: -2.464118242263794
    3. '2' → logprob: -9.089118003845215
    4. '3' → logprob: -11.214118003845215
    5. ' (' → logprob: -11.589118003845215
    6. ' n' → logprob: -11.589118003845215
    7. '  ' → logprob: -11.839118003845215
    8. '5' → logprob: -12.464118003845215
    9. '4' → logprob: -12.776618003845215
    10. '7' → logprob: -13.151618003845215

Token 37: '2' (ID: 17)
  Prédit: '1'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '1' → logprob: -0.006684348452836275
    2. ' ' → logprob: -5.506684303283691
    3. '2' → logprob: -6.131684303283691
    4. '3' → logprob: -8.381684303283691
    5. '5' → logprob: -9.756684303283691
    6. '4' → logprob: -10.006684303283691
    7. '10' → logprob: -10.756684303283691
    8. '7' → logprob: -11.256684303283691
    9. '0' → logprob: -11.819184303283691
    10. '42' → logprob: -12.319184303283691

Token 38: ')' (ID: 8)
  Prédit: ')'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')' → logprob: -0.0053240046836435795
    2. ' )' → logprob: -5.255323886871338
    3. ')*' → logprob: -9.630324363708496
    4. '*' → logprob: -10.755324363708496
    5. ' *' → logprob: -13.755324363708496
    6. '*)' → logprob: -14.380324363708496
    7. ' ' → logprob: -15.130324363708496
    8. ' ' → logprob: -15.255324363708496
    9. '）' → logprob: -15.755324363708496
    10. ')*(' → logprob: -16.13032341003418

Token 39: ' *' (ID: 425)
  Prédit: ' *'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' *' → logprob: -0.20272432267665863
    2. '*' → logprob: -1.7027243375778198
    3. ')' → logprob: -6.827724456787109
    4. ' ' → logprob: -9.07772445678711
    5. '0' → logprob: -10.95272445678711
    6. ' )' → logprob: -10.95272445678711
    7. '*n' → logprob: -11.70272445678711
    8. '**' → logprob: -11.82772445678711
    9. '2' → logprob: -11.95272445678711
    10. '1' → logprob: -12.07772445678711

Token 40: ' ' (ID: 220)
  Prédit: '180'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '180' → logprob: -0.006081664469093084
    2. ' ' → logprob: -5.131081581115723
    3. '1' → logprob: -9.006081581115723
    4. '3' → logprob: -10.881081581115723
    5. '90' → logprob: -12.256081581115723
    6. '2' → logprob: -13.256081581115723
    7. '18' → logprob: -13.506081581115723
    8. '10' → logprob: -14.256081581115723
    9. '179' → logprob: -14.256081581115723
    10. '108' → logprob: -14.756081581115723

Token 41: '180' (ID: 7521)
  Prédit: '180'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '180' → logprob: -0.00605737091973424
    2. '1' → logprob: -5.131057262420654
    3. ' ' → logprob: -9.506057739257812
    4. '18' → logprob: -10.631057739257812
    5. '3' → logprob: -11.131057739257812
    6. '90' → logprob: -11.756057739257812
    7. '2' → logprob: -13.006057739257812
    8. '10' → logprob: -13.006057739257812
    9. '108' → logprob: -14.131057739257812
    10. '179' → logprob: -14.631057739257812

Token 42: ' #' (ID: 1069)
  Prédit: ''
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False

Token 43: ' Peut' (ID: 116891)
  Prédit: ''
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False

Token 44: '-être' (ID: 33599)
  Prédit: '#'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '#' → logprob: -0.6302366256713867
    2. ')' → logprob: -1.7552366256713867
    3. ' ' → logprob: -1.7552366256713867
    4. '*' → logprob: -2.5052366256713867
    5. ' #' → logprob: -4.505236625671387
    6. '0' → logprob: -5.255236625671387
    7. '.' → logprob: -5.630236625671387
    8. ' /' → logprob: -6.005236625671387
    9. '<|end|>' → logprob: -6.130236625671387
    10. '  ' → logprob: -6.380236625671387

Token 45: ' qu' (ID: 474)
  Prédit: ''
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False

Token 46: ''on' (ID: 25812)
  Prédit: ' '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' ' → logprob: -0.41560259461402893
    2. ')' → logprob: -1.4156025648117065
    3. ' /' → logprob: -3.665602684020996
    4. ' n' → logprob: -4.290602684020996
    5. ' #' → logprob: -4.290602684020996
    6. ' )' → logprob: -4.415602684020996
    7. '#' → logprob: -4.540602684020996
    8. ' *' → logprob: -5.415602684020996
    9. '*' → logprob: -5.540602684020996
    10. '  ' → logprob: -6.165602684020996

Token 47: ' aurait' (ID: 48306)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ')' → logprob: -1.1992814540863037
    2. '#' → logprob: -1.3242814540863037
    3. ' ' → logprob: -1.6992814540863037
    4. '*' → logprob: -2.6992814540863037
    5. ' )' → logprob: -3.1992814540863037
    6. ' n' → logprob: -3.4492814540863037
    7. ' #' → logprob: -3.4492814540863037
    8. ' *' → logprob: -3.9492814540863037
    9. 'div' → logprob: -4.449281692504883
    10. ' /' → logprob: -4.824281692504883

Token 48: ' pu' (ID: 2923)
  Prédit: ' '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' ' → logprob: -0.40053537487983704
    2. ')' → logprob: -1.5255353450775146
    3. ' )' → logprob: -2.9005353450775146
    4. ' #' → logprob: -4.275535583496094
    5. '#' → logprob: -4.525535583496094
    6. '*' → logprob: -5.150535583496094
    7. ' n' → logprob: -5.400535583496094
    8. 'div' → logprob: -5.525535583496094
    9. '   ' → logprob: -6.275535583496094
    10. ' *' → logprob: -6.275535583496094

Token 49: ' nom' (ID: 8080)
  Prédit: ' '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' ' → logprob: -1.3275395631790161
    2. ' div' → logprob: -1.3275395631790161
    3. 'div' → logprob: -1.7025395631790161
    4. ' #' → logprob: -2.2025394439697266
    5. '#' → logprob: -2.9525394439697266
    6. ' /' → logprob: -3.3275394439697266
    7. ' continuer' → logprob: -3.8275394439697266
    8. ' )' → logprob: -4.202539443969727
    9. ' dividir' → logprob: -4.702539443969727
    10. ')' → logprob: -4.827539443969727

Token 50: 'mer' (ID: 1159)
  Prédit: 'mer'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'mer' → logprob: -0.3575453460216522
    2. 'm' → logprob: -1.8575453758239746
    3. 'er' → logprob: -2.1075453758239746
    4. '   ' → logprob: -4.857545375823975
    5. '```' → logprob: -5.357545375823975
    6. 'ber' → logprob: -6.107545375823975
    7. 'me' → logprob: -6.482545375823975
    8. '=' → logprob: -6.982545375823975
    9. '``' → logprob: -7.482545375823975
    10. '       ' → logprob: -7.607545375823975

Token 51: ' diff' (ID: 8868)
  Prédit: '_'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '_' → logprob: -0.727439284324646
    2. '_angle' → logprob: -1.102439284324646
    3. ' _' → logprob: -2.4774394035339355
    4. ' ' → logprob: -3.4774394035339355
    5. '_res' → logprob: -3.8524394035339355
    6. 'res' → logprob: -4.7274394035339355
    7. '_angles' → logprob: -4.7274394035339355
    8. ')' → logprob: -5.1024394035339355
    9. ' )' → logprob: -5.4774394035339355
    10. '_n' → logprob: -5.6024394035339355

Token 52: 'é' (ID: 377)
  Prédit: 'érence'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'érence' → logprob: -0.2952817380428314
    2. '_' → logprob: -2.1702816486358643
    3. 'érance' → logprob: -3.1702816486358643
    4. 'er' → logprob: -3.1702816486358643
    5. 'érences' → logprob: -4.170281887054443
    6. 'érent' → logprob: -4.795281887054443
    7. 'èr' → logprob: -5.545281887054443
    8. 'ér' → logprob: -5.670281887054443
    9. 'ération' → logprob: -5.795281887054443
    10. ' _' → logprob: -5.920281887054443

Token 53: 'rem' (ID: 1935)
  Prédit: 'rence'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'rence' → logprob: -0.004021883942186832
    2. 'r' → logprob: -5.879022121429443
    3. 'rance' → logprob: -6.879022121429443
    4. 'rent' → logprob: -8.754021644592285
    5. 'ren' → logprob: -11.504021644592285
    6. 'érence' → logprob: -12.379021644592285
    7. ' r' → logprob: -12.629021644592285
    8. 'ré' → logprob: -13.254021644592285
    9. 'férence' → logprob: -13.254021644592285
    10. 'rend' → logprob: -13.754021644592285

Token 54: 'ment' (ID: 508)
  Prédit: 'ence'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'ence' → logprob: -0.35926368832588196
    2. 'rence' → logprob: -1.4842636585235596
    3. 'ent' → logprob: -3.3592636585235596
    4. 'ce' → logprob: -3.8592636585235596
    5. 'ences' → logprob: -4.484263896942139
    6. 'n' → logprob: -6.359263896942139
    7. 'ance' → logprob: -6.734263896942139
    8. 'e' → logprob: -6.859263896942139
    9. 'ces' → logprob: -7.484263896942139
    10. 'er' → logprob: -7.609263896942139

Token 55: '

' (ID: 279)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ')' → logprob: -0.7700456380844116
    2. ' ' → logprob: -0.7700456380844116
    3. '#' → logprob: -3.895045757293701
    4. '<|end|>' → logprob: -4.020045757293701
    5. '```' → logprob: -4.895045757293701
    6. ' )' → logprob: -5.145045757293701
    7. '\' → logprob: -5.645045757293701
    8. 'n' → logprob: -5.770045757293701
    9. 'print' → logprob: -5.770045757293701
    10. '*' → logprob: -6.020045757293701

Token 56: 'print' (ID: 1598)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')' → logprob: -0.25212347507476807
    2. '<|end|>' → logprob: -2.5021233558654785
    3. '#' → logprob: -3.0021233558654785
    4. ' ' → logprob: -3.5021233558654785
    5. '\' → logprob: -4.2521233558654785
    6. '*' → logprob: -4.5021233558654785
    7. '\n' → logprob: -4.6271233558654785
    8. 'print' → logprob: -5.1271233558654785
    9. '```' → logprob: -5.3771233558654785
    10. '
' → logprob: -5.5021233558654785

Token 57: '(res' (ID: 8331)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(' → logprob: -4.143808109802194e-05
    2. '(res' → logprob: -10.250041007995605
    3. '("("' → logprob: -12.875041007995605
    4. ' (' → logprob: -13.750041007995605
    5. '('' → logprob: -14.000041007995605
    6. '(

' → logprob: -14.750041007995605
    7. '()' → logprob: -15.125041007995605
    8. '(
' → logprob: -15.375041007995605
    9. '(print' → logprob: -15.625041007995605
    10. '(`' → logprob: -15.625041007995605

Token 58: ')' (ID: 8)
  Prédit: ')'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')' → logprob: -1.1472419600977446e-06
    2. ' )' → logprob: -14.250000953674316
    3. '))' → logprob: -15.125000953674316
    4. ')`' → logprob: -16.875001907348633
    5. ')
' → logprob: -17.250001907348633
    6. '}' → logprob: -17.500001907348633
    7. '*' → logprob: -17.875001907348633
    8. ')}' → logprob: -18.375001907348633
    9. '`)' → logprob: -18.500001907348633
    10. '),' → logprob: -19.000001907348633

Token 59: ' ' (ID: 220)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')' → logprob: -0.04713189974427223
    2. '<|end|>' → logprob: -3.5471320152282715
    3. '*' → logprob: -5.0471320152282715
    4. '```' → logprob: -5.5471320152282715
    5. '#' → logprob: -6.1721320152282715
    6. '\' → logprob: -6.5471320152282715
    7. '%' → logprob: -7.0471320152282715
    8. ' ' → logprob: -7.7971320152282715
    9. '\n' → logprob: -7.9221320152282715
    10. '.' → logprob: -8.297131538391113

Token 60: ' #' (ID: 1069)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ')' → logprob: -0.16220581531524658
    2. '<|end|>' → logprob: -2.162205696105957
    3. '%' → logprob: -4.787205696105957
    4. '*' → logprob: -4.912205696105957
    5. '```' → logprob: -4.912205696105957
    6. '#' → logprob: -5.787205696105957
    7. '\' → logprob: -5.787205696105957
    8. '()' → logprob: -6.412205696105957
    9. ' ' → logprob: -6.787205696105957
    10. '\n' → logprob: -7.787205696105957

Token 61: ' Voilà' (ID: 149427)
  Prédit: ''
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False

Token 62: ' le' (ID: 505)
  Prédit: ''
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False

Token 63: ' résultat' (ID: 62556)
  Prédit: ' nombre'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' nombre' → logprob: -0.7357690930366516
    2. 'nombre' → logprob: -1.3607690334320068
    3. 'angle' → logprob: -2.110769033432007
    4. ' angle' → logprob: -2.610769033432007
    5. ' résultat' → logprob: -3.485769033432007
    6. ' ' → logprob: -4.110769271850586
    7. 'rés' → logprob: -5.110769271850586
    8. ' code' → logprob: -5.235769271850586
    9. ' ' → logprob: -5.985769271850586
    10. ' nombres' → logprob: -6.610769271850586


RÉSUMÉ:
--------------------------------------------------------------------------------
Total des tokens analysés: 61
Tokens correctement prédits (1ère position, stricte): 10
Tokens correctement prédits (1ère position, avec adaptation): 10
Tokens correctement prédits (top 10): 26
Précision stricte (1ère position): 16.39%
Précision adaptée (1ère position): 16.39%
Précision (top 10): 42.62%
================================================================================
