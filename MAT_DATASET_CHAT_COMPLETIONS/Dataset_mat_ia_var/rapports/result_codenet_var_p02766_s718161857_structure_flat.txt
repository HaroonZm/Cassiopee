================================================================================
ANALYSE DE PRÉDICTION TOKEN PAR TOKEN (BATCH API)
Date: 2025-06-04 19:25:03
Modèle de tokenisation: gpt-4o-mini
================================================================================

SCRIPT ANALYSÉ:
--------------------------------------------------------------------------------
N, K = list(map(int, input().split()))
tmp = K
cnt = 1
while tmp <= N:
    tmp = tmp * K
    cnt = cnt + 1
print(cnt)
--------------------------------------------------------------------------------

RÉSULTATS D'ANALYSE TOKEN PAR TOKEN:
--------------------------------------------------------------------------------
Token 0: 'N' (ID: 45)
  → Token d'amorce (pas de prédiction)

Token 1: ',' (ID: 11)
  → Token d'amorce (pas de prédiction)

Token 2: ' K' (ID: 658)
  → Token d'amorce (pas de prédiction)

Token 3: ' =' (ID: 314)
  Prédit: '='
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '=' → logprob: -0.04897360876202583
    2. ' =' → logprob: -3.173973560333252
    3. ',' → logprob: -5.173973560333252
    4. ')' → logprob: -9.04897403717041
    5. '.' → logprob: -9.79897403717041
    6. ';' → logprob: -10.54897403717041
    7. '+' → logprob: -10.79897403717041
    8. '```' → logprob: -11.17397403717041
    9. '=int' → logprob: -11.29897403717041
    10. '#' → logprob: -11.54897403717041

Token 4: ' list' (ID: 1562)
  Prédit: ' map'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' map' → logprob: -0.18806803226470947
    2. 'map' → logprob: -1.8130680322647095
    3. ' input' → logprob: -5.81306791305542
    4. 'input' → logprob: -6.06306791305542
    5. ' ' → logprob: -6.81306791305542
    6. '10' → logprob: -6.93806791305542
    7. 'int' → logprob: -8.188068389892578
    8. '0' → logprob: -8.313068389892578
    9. ' int' → logprob: -8.438068389892578
    10. ' list' → logprob: -9.813068389892578

Token 5: '(map' (ID: 16946)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '(' → logprob: -0.07356762140989304
    2. '[' → logprob: -2.6985676288604736
    3. '```' → logprob: -6.5735673904418945
    4. '(
' → logprob: -7.3235673904418945
    5. '.' → logprob: -8.198567390441895
    6. ',' → logprob: -8.573567390441895
    7. '()' → logprob: -8.823567390441895
    8. '(N' → logprob: -8.823567390441895
    9. ')' → logprob: -9.073567390441895
    10. '(range' → logprob: -9.198567390441895

Token 6: '(int' (ID: 2742)
  Prédit: '(int'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(int' → logprob: -0.04373874515295029
    2. '(' → logprob: -4.168738842010498
    3. 'int' → logprob: -4.168738842010498
    4. '(str' → logprob: -4.793738842010498
    5. ')' → logprob: -6.418738842010498
    6. '(lambda' → logprob: -7.668738842010498
    7. '<int' → logprob: -7.918738842010498
    8. '```' → logprob: -8.41873836517334
    9. '[int' → logprob: -8.79373836517334
    10. 'list' → logprob: -8.91873836517334

Token 7: ',' (ID: 11)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '(' → logprob: -0.27428728342056274
    2. ')' → logprob: -2.149287223815918
    3. '))' → logprob: -2.399287223815918
    4. '(input' → logprob: -3.649287223815918
    5. '(range' → logprob: -7.149287223815918
    6. '(token' → logprob: -7.524287223815918
    7. '(user' → logprob: -7.524287223815918
    8. '(data' → logprob: -7.774287223815918
    9. '```' → logprob: -8.024287223815918
    10. '((' → logprob: -8.399287223815918

Token 8: ' input' (ID: 3422)
  Prédit: 'input'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'input' → logprob: -0.2037682980298996
    2. ' input' → logprob: -1.703768253326416
    3. '(input' → logprob: -6.078768253326416
    4. ',input' → logprob: -10.328768730163574
    5. ')' → logprob: -10.703768730163574
    6. '<input' → logprob: -13.328768730163574
    7. '=input' → logprob: -13.953768730163574
    8. '(' → logprob: -14.453768730163574
    9. '```' → logprob: -14.453768730163574
    10. ' (' → logprob: -14.703768730163574

Token 9: '().' (ID: 1454)
  Prédit: '()))'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '()))' → logprob: -0.20419223606586456
    2. '()' → logprob: -2.2041921615600586
    3. '())' → logprob: -3.3291921615600586
    4. '(' → logprob: -3.9541921615600586
    5. '))' → logprob: -5.704192161560059
    6. '().' → logprob: -5.829192161560059
    7. '())))' → logprob: -5.829192161560059
    8. '()));' → logprob: -5.954192161560059
    9. '`()' → logprob: -6.079192161560059
    10. '(""))' → logprob: -7.079192161560059

Token 10: 'split' (ID: 13627)
  Prédit: 'split'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'split' → logprob: -0.0011920140823349357
    2. 'strip' → logprob: -6.751192092895508
    3. 'rstrip' → logprob: -10.876192092895508
    4. ' split' → logprob: -13.126192092895508
    5. 'read' → logprob: -14.751192092895508
    6. '(split' → logprob: -15.001192092895508
    7. ')' → logprob: -15.501192092895508
    8. 'spl' → logprob: -17.001192092895508
    9. 'startswith' → logprob: -17.376192092895508
    10. 'replace' → logprob: -17.501192092895508

Token 11: '()))
' (ID: 24521)
  Prédit: '))'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '))' → logprob: -0.43125054240226746
    2. '()))' → logprob: -1.0562505722045898
    3. '())' → logprob: -7.30625057220459
    4. ')' → logprob: -7.30625057220459
    5. '()' → logprob: -7.43125057220459
    6. '(' → logprob: -7.80625057220459
    7. ')))' → logprob: -9.18125057220459
    8. '```' → logprob: -10.68125057220459
    9. '())))' → logprob: -11.05625057220459
    10. '()));' → logprob: -11.18125057220459

Token 12: 'tmp' (ID: 11669)
  Prédit: '\n'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '\n' → logprob: -1.3523153066635132
    2. 'a' → logprob: -1.8523153066635132
    3. '`' → logprob: -2.2273154258728027
    4. 'for' → logprob: -2.3523154258728027
    5. '#' → logprob: -2.6023154258728027
    6. 'if' → logprob: -2.8523154258728027
    7. '```' → logprob: -2.8523154258728027
    8. 'x' → logprob: -2.9773154258728027
    9. '
' → logprob: -4.102315425872803
    10. 's' → logprob: -4.102315425872803

Token 13: ' =' (ID: 314)
  Prédit: '['
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '[' → logprob: -0.7560634016990662
    2. '_' → logprob: -0.8810634016990662
    3. '[:]' → logprob: -3.381063461303711
    4. '.' → logprob: -3.631063461303711
    5. ' =' → logprob: -3.881063461303711
    6. '=' → logprob: -4.006063461303711
    7. '(' → logprob: -5.756063461303711
    8. '[]' → logprob: -5.881063461303711
    9. '()' → logprob: -6.131063461303711
    10. ')' → logprob: -6.881063461303711

Token 14: ' K' (ID: 658)
  Prédit: '[]'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '[]' → logprob: -1.2691384553909302
    2. 'list' → logprob: -1.6441384553909302
    3. ' []' → logprob: -1.7691384553909302
    4. ' [' → logprob: -2.0191383361816406
    5. ' list' → logprob: -2.2691383361816406
    6. '[' → logprob: -2.3941383361816406
    7. '0' → logprob: -5.019138336181641
    8. 'input' → logprob: -5.144138336181641
    9. '[input' → logprob: -5.269138336181641
    10. ' input' → logprob: -6.144138336181641

Token 15: '
' (ID: 198)
  Prédit: '%'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '%' → logprob: -0.5870183706283569
    2. '-' → logprob: -1.087018370628357
    3. ' ' → logprob: -3.5870184898376465
    4. '>' → logprob: -4.0870184898376465
    5. ' %' → logprob: -4.8370184898376465
    6. '#' → logprob: -4.8370184898376465
    7. '<|end|>' → logprob: -4.9620184898376465
    8. '+' → logprob: -5.2120184898376465
    9. '```' → logprob: -5.2120184898376465
    10. 'for' → logprob: -5.5870184898376465

Token 16: 'cnt' (ID: 33160)
  Prédit: '%'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '%' → logprob: -0.8270708322525024
    2. '-' → logprob: -1.4520708322525024
    3. ' ' → logprob: -1.8270708322525024
    4. '+' → logprob: -3.077070713043213
    5. '>' → logprob: -3.452070713043213
    6. 'for' → logprob: -4.077070713043213
    7. '*' → logprob: -4.327070713043213
    8. ' for' → logprob: -4.702070713043213
    9. ' %' → logprob: -4.702070713043213
    10. ')' → logprob: -4.952070713043213

Token 17: ' =' (ID: 314)
  Prédit: ' ='
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' =' → logprob: -0.16024860739707947
    2. '=' → logprob: -2.9102485179901123
    3. ' ' → logprob: -3.1602485179901123
    4. ' +=' → logprob: -3.2852485179901123
    5. '_' → logprob: -4.410248756408691
    6. '+=' → logprob: -7.660248756408691
    7. '  ' → logprob: -8.035248756408691
    8. ' _' → logprob: -8.785248756408691
    9. '+' → logprob: -9.285248756408691
    10. '```' → logprob: -9.785248756408691

Token 18: ' ' (ID: 220)
  Prédit: '0'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '0' → logprob: -0.5765597224235535
    2. ' ' → logprob: -0.8265597224235535
    3. '1' → logprob: -8.326560020446777
    4. 'tmp' → logprob: -8.701560020446777
    5. ' tmp' → logprob: -8.951560020446777
    6. ' K' → logprob: -9.701560020446777
    7. 'K' → logprob: -12.076560020446777
    8. ' ' → logprob: -12.576560020446777
    9. '/tmp' → logprob: -12.826560020446777
    10. '(tmp' → logprob: -13.701560020446777

Token 19: '1' (ID: 16)
  Prédit: '0'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '0' → logprob: -0.0012832103529945016
    2. ' ' → logprob: -7.001283168792725
    3. '1' → logprob: -8.001283645629883
    4. 'tmp' → logprob: -11.001283645629883
    5. 'K' → logprob: -11.376283645629883
    6. 'N' → logprob: -13.501283645629883
    7. '/tmp' → logprob: -13.751283645629883
    8. ' tmp' → logprob: -13.876283645629883
    9. '[' → logprob: -14.001283645629883
    10. '-' → logprob: -14.126283645629883

Token 20: '
' (ID: 198)
  Prédit: '+'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '+' → logprob: -0.5932186841964722
    2. '*' → logprob: -1.0932186841964722
    3. ' while' → logprob: -2.9682188034057617
    4. ' ' → logprob: -4.593218803405762
    5. '-' → logprob: -4.718218803405762
    6. 'while' → logprob: -4.843218803405762
    7. '<|end|>' → logprob: -5.093218803405762
    8. ' for' → logprob: -5.343218803405762
    9. ',' → logprob: -5.468218803405762
    10. ' *' → logprob: -5.468218803405762

Token 21: 'while' (ID: 7032)
  Prédit: ' while'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' while' → logprob: -0.32335829734802246
    2. 'while' → logprob: -1.8233582973480225
    3. '*' → logprob: -2.9483582973480225
    4. ',' → logprob: -3.6983582973480225
    5. ':' → logprob: -4.823358535766602
    6. '=' → logprob: -4.948358535766602
    7. '```' → logprob: -5.448358535766602
    8. ' ' → logprob: -5.823358535766602
    9. '<|end|>' → logprob: -6.073358535766602
    10. '+' → logprob: -6.198358535766602

Token 22: ' tmp' (ID: 8919)
  Prédit: ' tmp'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' tmp' → logprob: -0.12473972886800766
    2. 'tmp' → logprob: -2.249739646911621
    3. ' K' → logprob: -4.749739646911621
    4. ' cnt' → logprob: -6.249739646911621
    5. ' N' → logprob: -7.374739646911621
    6. 'cnt' → logprob: -8.374739646911621
    7. 'K' → logprob: -8.499739646911621
    8. '(tmp' → logprob: -9.624739646911621
    9. ' ' → logprob: -9.874739646911621
    10. 'N' → logprob: -10.249739646911621

Token 23: ' <=' (ID: 5017)
  Prédit: ' >'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' >' → logprob: -0.11653978377580643
    2. '>' → logprob: -2.991539716720581
    3. ' >=' → logprob: -3.616539716720581
    4. ' <' → logprob: -3.991539716720581
    5. ' <=' → logprob: -4.86653995513916
    6. '<' → logprob: -6.36653995513916
    7. '%' → logprob: -6.61653995513916
    8. ' %' → logprob: -6.74153995513916
    9. ' *' → logprob: -7.24153995513916
    10. '>=' → logprob: -7.36653995513916

Token 24: ' N' (ID: 478)
  Prédit: 'N'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'N' → logprob: -0.3133173882961273
    2. ' N' → logprob: -1.3133174180984497
    3. ' ' → logprob: -9.93831729888916
    4. '	N' → logprob: -13.06331729888916
    5. '   ' → logprob: -13.68831729888916
    6. 'K' → logprob: -14.81331729888916
    7. '100' → logprob: -14.81331729888916
    8. '  ' → logprob: -14.93831729888916
    9. '>N' → logprob: -15.18831729888916
    10. 'n' → logprob: -15.25081729888916

Token 25: ':
' (ID: 734)
  Prédit: ':'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ':' → logprob: -0.01834811642765999
    2. ':
' → logprob: -4.268348217010498
    3. ' :' → logprob: -6.393348217010498
    4. '*' → logprob: -6.893348217010498
    5. ' :
' → logprob: -7.268348217010498
    6. ' and' → logprob: -7.393348217010498
    7. ',' → logprob: -9.89334774017334
    8. '**' → logprob: -10.64334774017334
    9. ' ' → logprob: -10.76834774017334
    10. ' *' → logprob: -11.14334774017334

Token 26: '   ' (ID: 271)
  Prédit: ' tmp'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' tmp' → logprob: -0.0811900720000267
    2. '   ' → logprob: -2.9561901092529297
    3. '	tmp' → logprob: -4.08119010925293
    4. 'tmp' → logprob: -4.83119010925293
    5. ' 
' → logprob: -7.83119010925293
    6. '    ' → logprob: -8.33119010925293
    7. '\t' → logprob: -8.95619010925293
    8. ' ' → logprob: -9.20619010925293
    9. '    
' → logprob: -10.08119010925293
    10. '```' → logprob: -10.70619010925293

Token 27: ' tmp' (ID: 8919)
  Prédit: ' tmp'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' tmp' → logprob: -0.10046394169330597
    2. 'tmp' (adapté à ' tmp') → logprob: -2.3504638671875
    3. '	tmp' → logprob: -8.9754638671875
    4. '/tmp' → logprob: -10.3504638671875
    5. ' 
' → logprob: -10.6004638671875
    6. ' ' → logprob: -10.7254638671875
    7. '    ' → logprob: -11.6004638671875
    8. ' K' → logprob: -11.7254638671875
    9. '_tmp' → logprob: -11.7254638671875
    10. ' ' → logprob: -12.1004638671875

Token 28: ' =' (ID: 314)
  Prédit: '*='
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '*=' → logprob: -0.010789825581014156
    2. ' *=' → logprob: -4.88578987121582
    3. '*' → logprob: -6.01078987121582
    4. '=' → logprob: -7.76078987121582
    5. '+=' → logprob: -8.26078987121582
    6. ' =' → logprob: -11.13578987121582
    7. ' +=' → logprob: -11.51078987121582
    8. ' <<=' → logprob: -11.76078987121582
    9. ' ' → logprob: -12.88578987121582
    10. ' *' → logprob: -13.38578987121582

Token 29: ' tmp' (ID: 8919)
  Prédit: 'tmp'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'tmp' → logprob: -0.004662711173295975
    2. ' tmp' → logprob: -5.37966251373291
    3. 'K' → logprob: -10.50466251373291
    4. '(tmp' → logprob: -12.50466251373291
    5. '2' → logprob: -12.75466251373291
    6. ' K' → logprob: -12.87966251373291
    7. '	tmp' → logprob: -13.25466251373291
    8. '/tmp' → logprob: -13.62966251373291
    9. ' ' → logprob: -13.87966251373291
    10. '   ' → logprob: -14.62966251373291

Token 30: ' *' (ID: 425)
  Prédit: '*'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '*' → logprob: -0.007277206983417273
    2. ' *' → logprob: -5.132277011871338
    3. '*K' → logprob: -6.632277011871338
    4. '*k' → logprob: -11.132277488708496
    5. '+' → logprob: -11.757277488708496
    6. '*(' → logprob: -14.007277488708496
    7. '*p' → logprob: -14.132277488708496
    8. ' ' → logprob: -14.257277488708496
    9. '*=' → logprob: -14.257277488708496
    10. ' +' → logprob: -14.257277488708496

Token 31: ' K' (ID: 658)
  Prédit: 'K'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'K' → logprob: -0.07985834777355194
    2. '2' → logprob: -2.5798583030700684
    3. 'k' → logprob: -7.954858303070068
    4. ' K' → logprob: -8.329858779907227
    5. '10' → logprob: -8.454858779907227
    6. 'tmp' → logprob: -9.454858779907227
    7. '5' → logprob: -10.454858779907227
    8. ' ' → logprob: -10.829858779907227
    9. '3' → logprob: -10.954858779907227
    10. '4' → logprob: -12.204858779907227

Token 32: '
' (ID: 198)
  Prédit: 'cnt'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'cnt' → logprob: -0.289289265871048
    2. '
' → logprob: -1.6642892360687256
    3. '   ' → logprob: -4.539289474487305
    4. ' ' → logprob: -4.539289474487305
    5. ' 
' → logprob: -4.789289474487305
    6. 'tmp' → logprob: -5.164289474487305
    7. '*' → logprob: -5.289289474487305
    8. '  
' → logprob: -5.539289474487305
    9. ' cnt' → logprob: -5.664289474487305
    10. '<|end|>' → logprob: -6.039289474487305

Token 33: '   ' (ID: 271)
  Prédit: '+'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '+' → logprob: -0.654468297958374
    2. '
' → logprob: -2.029468297958374
    3. '   ' → logprob: -2.029468297958374
    4. 'cnt' → logprob: -2.654468297958374
    5. ' ' → logprob: -3.029468297958374
    6. '\n' → logprob: -3.154468297958374
    7. ' +' → logprob: -4.154468536376953
    8. '+
' → logprob: -4.404468536376953
    9. '    
' → logprob: -5.404468536376953
    10. ' 
' → logprob: -5.779468536376953

Token 34: ' cnt' (ID: 27340)
  Prédit: 'cnt'
  Correct (stricte): False
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'cnt' (adapté à ' cnt') → logprob: -0.04305148497223854
    2. ' cnt' → logprob: -3.1680514812469482
    3. '	cnt' → logprob: -11.418051719665527
    4. '   ' → logprob: -11.668051719665527
    5. '(cnt' → logprob: -12.293051719665527
    6. '    ' → logprob: -12.293051719665527
    7. '[cnt' → logprob: -12.293051719665527
    8. '_cnt' → logprob: -12.668051719665527
    9. ' 
' → logprob: -12.668051719665527
    10. '```' → logprob: -12.918051719665527

Token 35: ' =' (ID: 314)
  Prédit: '+='
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '+=' → logprob: -0.1780889332294464
    2. ' +=' → logprob: -1.928088903427124
    3. '+' → logprob: -4.053089141845703
    4. '=' → logprob: -8.053089141845703
    5. ' +' → logprob: -11.303089141845703
    6. '++' → logprob: -12.928089141845703
    7. ' =' → logprob: -13.553089141845703
    8. '   ' → logprob: -13.928089141845703
    9. '```' → logprob: -14.553089141845703
    10. '+="' → logprob: -15.053089141845703

Token 36: ' cnt' (ID: 27340)
  Prédit: ' cnt'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' cnt' → logprob: -0.47418639063835144
    2. 'cnt' → logprob: -0.9741864204406738
    3. '+' → logprob: -9.599185943603516
    4. '(cnt' → logprob: -10.849185943603516
    5. '	cnt' → logprob: -11.349185943603516
    6. '    ' → logprob: -12.224185943603516
    7. ' ' → logprob: -13.099185943603516
    8. '[cnt' → logprob: -13.224185943603516
    9. '_cnt' → logprob: -14.974185943603516
    10. ' +' → logprob: -15.349185943603516

Token 37: ' +' (ID: 659)
  Prédit: '+'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '+' → logprob: -0.20141927897930145
    2. ' +' → logprob: -1.7014192342758179
    3. ' plus' → logprob: -12.95141887664795
    4. '＋' → logprob: -13.07641887664795
    5. '2' → logprob: -14.45141887664795
    6. ' ' → logprob: -15.32641887664795
    7. '++' → logprob: -15.95141887664795
    8. '```' → logprob: -16.076419830322266
    9. '1' → logprob: -16.201419830322266
    10. 'plus' → logprob: -16.326419830322266

Token 38: ' ' (ID: 220)
  Prédit: '1'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '1' → logprob: -0.0067156096920371056
    2. ' ' → logprob: -5.006715774536133
    3. '   ' → logprob: -15.756715774536133
    4. 'cnt' → logprob: -16.756715774536133
    5. '  ' → logprob: -17.256715774536133
    6. '+' → logprob: -18.506715774536133
    7. '```' → logprob: -18.631715774536133
    8. '１' → logprob: -18.756715774536133
    9. ' ' → logprob: -18.881715774536133
    10. '2' → logprob: -19.319215774536133

Token 39: '1' (ID: 16)
  Prédit: '1'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '1' → logprob: -4.5491004129871726e-05
    2. ' ' → logprob: -10.000045776367188
    3. '   ' → logprob: -18.125045776367188
    4. '2' → logprob: -18.375045776367188
    5. '  ' → logprob: -18.875045776367188
    6. '<|end|>' → logprob: -18.875045776367188
    7. 'cnt' → logprob: -19.375045776367188
    8. '+' → logprob: -19.500045776367188
    9. '１' → logprob: -20.625045776367188
    10. '```' → logprob: -20.750045776367188

Token 40: '
' (ID: 198)
  Prédit: ''
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False

Token 41: 'print' (ID: 1598)
  Prédit: 'print'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'print' → logprob: -0.0007275633979588747
    2. ' print' → logprob: -7.375727653503418
    3. '<|end|>' → logprob: -10.125727653503418
    4. ')' → logprob: -10.625727653503418
    5. 'if' → logprob: -11.250727653503418
    6. '```' → logprob: -11.875727653503418
    7. '*' → logprob: -12.625727653503418
    8. 'cnt' → logprob: -13.125727653503418
    9. '#' → logprob: -13.250727653503418
    10. ' if' → logprob: -13.250727653503418

Token 42: '(cnt' (ID: 102125)
  Prédit: '(cnt'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(cnt' → logprob: -0.4742177128791809
    2. '(' → logprob: -0.9742177128791809
    3. '()' → logprob: -10.224217414855957
    4. '(len' → logprob: -10.599217414855957
    5. '(tmp' → logprob: -10.849217414855957
    6. 'cnt' → logprob: -10.974217414855957
    7. '(count' → logprob: -11.724217414855957
    8. '((' → logprob: -11.849217414855957
    9. ' (' → logprob: -12.474217414855957
    10. '(C' → logprob: -12.724217414855957

Token 43: ')' (ID: 8)
  Prédit: ')'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')' → logprob: -1.1472419600977446e-06
    2. '))' → logprob: -14.500000953674316
    3. ' )' → logprob: -14.500000953674316
    4. ')`' → logprob: -17.750001907348633
    5. '`)' → logprob: -18.000001907348633
    6. ')
' → logprob: -18.000001907348633
    7. '+' → logprob: -18.375001907348633
    8. ')))' → logprob: -18.625001907348633
    9. '')' → logprob: -18.625001907348633
    10. '）' → logprob: -18.750001907348633


RÉSUMÉ:
--------------------------------------------------------------------------------
Total des tokens analysés: 41
Tokens correctement prédits (1ère position, stricte): 10
Tokens correctement prédits (1ère position, avec adaptation): 11
Tokens correctement prédits (top 10): 32
Précision stricte (1ère position): 24.39%
Précision adaptée (1ère position): 26.83%
Précision (top 10): 78.05%
================================================================================
