================================================================================
ANALYSE DE PRÉDICTION TOKEN PAR TOKEN (BATCH API)
Date: 2025-06-04 19:47:31
Modèle de tokenisation: gpt-4o-mini
================================================================================

SCRIPT ANALYSÉ:
--------------------------------------------------------------------------------
print(input() if (a := int(input())) >= 3200 else 'red')
--------------------------------------------------------------------------------

RÉSULTATS D'ANALYSE TOKEN PAR TOKEN:
--------------------------------------------------------------------------------
Token 0: 'print' (ID: 1598)
  → Token d'amorce (pas de prédiction)

Token 1: '(input' (ID: 10054)
  → Token d'amorce (pas de prédiction)

Token 2: '()' (ID: 416)
  → Token d'amorce (pas de prédiction)

Token 3: ' if' (ID: 538)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ')' → logprob: -0.10021767020225525
    2. '))' → logprob: -2.350217580795288
    3. ')))' → logprob: -11.975217819213867
    4. '())' → logprob: -13.225217819213867
    5. '`)' → logprob: -13.850217819213867
    6. ' )' → logprob: -14.225217819213867
    7. ')`' → logprob: -15.100217819213867
    8. '()' → logprob: -15.100217819213867
    9. ' ))' → logprob: -15.850217819213867
    10. '()))' → logprob: -15.850217819213867

Token 4: ' (' (ID: 350)
  Prédit: ' True'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' True' → logprob: -0.05629273131489754
    2. 'True' → logprob: -3.681292772293091
    3. ' ' → logprob: -4.181292533874512
    4. ' input' → logprob: -5.181292533874512
    5. ' not' → logprob: -6.181292533874512
    6. ''' → logprob: -6.556292533874512
    7. 'input' → logprob: -6.681292533874512
    8. '"' → logprob: -7.181292533874512
    9. ' )' → logprob: -7.806292533874512
    10. ' False' → logprob: -7.806292533874512

Token 5: 'a' (ID: 64)
  Prédit: 'len'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'len' → logprob: -0.6500091552734375
    2. 'input' → logprob: -1.6500091552734375
    3. 'True' → logprob: -2.2750091552734375
    4. ' True' → logprob: -3.0250091552734375
    5. 'not' → logprob: -3.0250091552734375
    6. ' len' → logprob: -3.6500091552734375
    7. ' not' → logprob: -4.0250091552734375
    8. ')' → logprob: -4.9000091552734375
    9. 'print' → logprob: -4.9000091552734375
    10. 'int' → logprob: -4.9000091552734375

Token 6: ' :=' (ID: 3405)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ')' → logprob: -0.7060258388519287
    2. ' ==' → logprob: -1.7060258388519287
    3. '==' → logprob: -1.7060258388519287
    4. ' )' → logprob: -2.9560258388519287
    5. ' ' → logprob: -3.3310258388519287
    6. '))' → logprob: -4.956026077270508
    7. '>' → logprob: -4.956026077270508
    8. '=' → logprob: -5.206026077270508
    9. ' is' → logprob: -5.206026077270508
    10. ' in' → logprob: -5.456026077270508

Token 7: ' int' (ID: 677)
  Prédit: 'input'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'input' → logprob: -0.08610058575868607
    2. ' input' → logprob: -2.8361005783081055
    3. 'int' → logprob: -4.3361005783081055
    4. 'len' → logprob: -5.0861005783081055
    5. ' int' → logprob: -6.3361005783081055
    6. ' True' → logprob: -7.3361005783081055
    7. ' not' → logprob: -7.5861005783081055
    8. ' len' → logprob: -7.7111005783081055
    9. 'not' → logprob: -7.8361005783081055
    10. 'True' → logprob: -8.461100578308105

Token 8: '(input' (ID: 10054)
  Prédit: '(input'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(input' → logprob: -0.546135425567627
    2. '(' → logprob: -0.921135425567627
    3. '(a' → logprob: -5.046135425567627
    4. '())' → logprob: -5.421135425567627
    5. '('' → logprob: -5.671135425567627
    6. '()' → logprob: -5.671135425567627
    7. ')' → logprob: -7.046135425567627
    8. '(print' → logprob: -7.046135425567627
    9. '(()' → logprob: -7.171135425567627
    10. '((' → logprob: -7.171135425567627

Token 9: '()))' (ID: 16829)
  Prédit: '()))'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '()))' → logprob: -0.06369874626398087
    2. '())' → logprob: -3.6886987686157227
    3. '(' → logprob: -4.438698768615723
    4. '()' → logprob: -4.813698768615723
    5. '())))' → logprob: -4.813698768615723
    6. '('' → logprob: -5.188698768615723
    7. '))' → logprob: -6.063698768615723
    8. '())).' → logprob: -9.188698768615723
    9. ')))' → logprob: -9.188698768615723
    10. ')' → logprob: -9.188698768615723

Token 10: ' >=' (ID: 5064)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ')' → logprob: -0.3048385977745056
    2. '>' → logprob: -1.4298386573791504
    3. ' >' → logprob: -5.30483865737915
    4. '>=' → logprob: -5.30483865737915
    5. ' )' → logprob: -5.80483865737915
    6. '<' → logprob: -6.05483865737915
    7. '%' → logprob: -6.42983865737915
    8. '==' → logprob: -6.67983865737915
    9. ')>' → logprob: -6.67983865737915
    10. '>)' → logprob: -7.17983865737915

Token 11: ' ' (ID: 220)
  Prédit: '0'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '0' → logprob: -0.47130727767944336
    2. ' ' → logprob: -1.3463072776794434
    3. '10' → logprob: -2.2213072776794434
    4. '18' → logprob: -6.096307277679443
    5. '1' → logprob: -6.471307277679443
    6. '5' → logprob: -6.596307277679443
    7. '20' → logprob: -7.471307277679443
    8. '100' → logprob: -7.971307277679443
    9. '50' → logprob: -7.971307277679443
    10. '2' → logprob: -8.596307754516602

Token 12: '320' (ID: 15415)
  Prédit: '0'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '0' → logprob: -0.04792477563023567
    2. '10' → logprob: -3.297924757003784
    3. '18' → logprob: -5.547924995422363
    4. '1' → logprob: -6.047924995422363
    5. '5' → logprob: -6.422924995422363
    6. '100' → logprob: -7.422924995422363
    7. '50' → logprob: -8.297924995422363
    8. '3' → logprob: -8.422924995422363
    9. '2' → logprob: -8.672924995422363
    10. ' ' → logprob: -8.797924995422363

Token 13: '0' (ID: 15)
  Prédit: ' else'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' else' → logprob: -0.10064871609210968
    2. ')' → logprob: -2.6006486415863037
    3. 'else' → logprob: -4.100648880004883
    4. ' ' → logprob: -5.850648880004883
    5. '```' → logprob: -7.225648880004883
    6. ' )' → logprob: -7.600648880004883
    7. ':' → logprob: -8.100648880004883
    8. '    ' → logprob: -9.100648880004883
    9. '   ' → logprob: -9.350648880004883
    10. ' :' → logprob: -9.850648880004883

Token 14: ' else' (ID: 1203)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')' → logprob: -0.06606388092041016
    2. ' else' → logprob: -2.81606388092041
    3. 'else' → logprob: -6.19106388092041
    4. ' )' → logprob: -7.19106388092041
    5. ':' → logprob: -7.31606388092041
    6. '):' → logprob: -8.06606388092041
    7. '```' → logprob: -8.94106388092041
    8. ':)' → logprob: -9.81606388092041
    9. ' ' → logprob: -10.06606388092041
    10. '))' → logprob: -11.06606388092041

Token 15: ' '' (ID: 461)
  Prédit: '"'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '"' → logprob: -0.9321717619895935
    2. ''' → logprob: -1.4321718215942383
    3. ' a' → logprob: -2.3071718215942383
    4. ''a' → logprob: -2.3071718215942383
    5. '"a' → logprob: -2.9321718215942383
    6. 'a' → logprob: -3.5571718215942383
    7. ' input' → logprob: -4.057171821594238
    8. ' '' → logprob: -4.307171821594238
    9. 'input' → logprob: -4.432171821594238
    10. ' ' → logprob: -4.432171821594238

Token 16: 'red' (ID: 1291)
  Prédit: '''
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ''' → logprob: -0.7060344219207764
    2. ')' → logprob: -1.3310344219207764
    3. '')' → logprob: -1.7060344219207764
    4. '''' → logprob: -2.9560344219207764
    5. ''a' → logprob: -5.9560346603393555
    6. '"' → logprob: -6.5810346603393555
    7. 'a' → logprob: -7.0810346603393555
    8. '""' → logprob: -7.0810346603393555
    9. '")' → logprob: -7.3310346603393555
    10. 'print' → logprob: -8.081034660339355

Token 17: '')' (ID: 1542)
  Prédit: '')'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '')' → logprob: -0.017585884779691696
    2. ')' → logprob: -4.142585754394531
    3. ''' → logprob: -6.517585754394531
    4. '")' → logprob: -10.142585754394531
    5. ')'' → logprob: -11.392585754394531
    6. '!' → logprob: -12.767585754394531
    7. ' red' → logprob: -12.767585754394531
    8. ' )' → logprob: -13.017585754394531
    9. '')
' → logprob: -13.267585754394531
    10. ''))' → logprob: -13.392585754394531


RÉSUMÉ:
--------------------------------------------------------------------------------
Total des tokens analysés: 15
Tokens correctement prédits (1ère position, stricte): 3
Tokens correctement prédits (1ère position, avec adaptation): 3
Tokens correctement prédits (top 10): 7
Précision stricte (1ère position): 20.00%
Précision adaptée (1ère position): 20.00%
Précision (top 10): 46.67%
================================================================================
