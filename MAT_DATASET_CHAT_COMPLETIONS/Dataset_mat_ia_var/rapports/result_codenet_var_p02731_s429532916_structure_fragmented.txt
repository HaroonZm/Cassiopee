================================================================================
ANALYSE DE PRÉDICTION TOKEN PAR TOKEN (BATCH API)
Date: 2025-06-04 19:20:59
Modèle de tokenisation: gpt-4o-mini
================================================================================

SCRIPT ANALYSÉ:
--------------------------------------------------------------------------------
def read_input():
    return input()

def to_int(value):
    return int(value)

def divide_by_three(value):
    return value / 3

def power(value, exponent):
    return value ** exponent

def format_result(value):
    return value

def output_result(value):
    print(value)

def main():
    raw_input = read_input()
    number = to_int(raw_input)
    divided = divide_by_three(number)
    cubed = power(divided, 3)
    result = format_result(cubed)
    output_result(result)

main()
--------------------------------------------------------------------------------

RÉSULTATS D'ANALYSE TOKEN PAR TOKEN:
--------------------------------------------------------------------------------
Token 0: 'def' (ID: 1314)
  → Token d'amorce (pas de prédiction)

Token 1: ' read' (ID: 1729)
  → Token d'amorce (pas de prédiction)

Token 2: '_input' (ID: 12507)
  → Token d'amorce (pas de prédiction)

Token 3: '():
' (ID: 8595)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '(' → logprob: -0.0038172954227775335
    2. '_' → logprob: -5.878817081451416
    3. '(:' → logprob: -7.878817081451416
    4. '():' → logprob: -7.878817081451416
    5. '(_:' → logprob: -9.378817558288574
    6. ':' → logprob: -9.878817558288574
    7. '```' → logprob: -10.378817558288574
    8. '(_' → logprob: -10.503817558288574
    9. ' (' → logprob: -10.753817558288574
    10. '\(' → logprob: -12.753817558288574

Token 4: '   ' (ID: 271)
  Prédit: '\n'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '\n' → logprob: -1.0053255558013916
    2. '```' → logprob: -1.1303255558013916
    3. '\' → logprob: -1.5053255558013916
    4. '   ' → logprob: -4.0053253173828125
    5. ''\' → logprob: -4.5053253173828125
    6. '``' → logprob: -4.5053253173828125
    7. '    
' → logprob: -4.8803253173828125
    8. ':' → logprob: -5.2553253173828125
    9. ' 
' → logprob: -5.6303253173828125
    10. '
' → logprob: -5.7553253173828125

Token 5: ' return' (ID: 622)
  Prédit: 'return'
  Correct (stricte): False
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'return' (adapté à ' return') → logprob: -0.9083667397499084
    2. '   ' → logprob: -1.1583666801452637
    3. 'input' → logprob: -2.6583666801452637
    4. 'r' → logprob: -2.9083666801452637
    5. '```' → logprob: -3.1583666801452637
    6. 'x' → logprob: -3.2833666801452637
    7. 'data' → logprob: -4.158366680145264
    8. 'i' → logprob: -4.283366680145264
    9. '    ' → logprob: -4.908366680145264
    10. ' ' → logprob: -4.908366680145264

Token 6: ' input' (ID: 3422)
  Prédit: ' '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' ' → logprob: -0.09338024258613586
    2. 'input' → logprob: -3.0933802127838135
    3. ' input' → logprob: -3.7183802127838135
    4. '"' → logprob: -4.343380451202393
    5. ''' → logprob: -5.593380451202393
    6. '  ' → logprob: -6.718380451202393
    7. ' []' → logprob: -7.968380451202393
    8. '(input' → logprob: -8.343379974365234
    9. ' "' → logprob: -8.468379974365234
    10. ' None' → logprob: -9.218379974365234

Token 7: '()

' (ID: 5874)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '(' → logprob: -0.02669362910091877
    2. '()' → logprob: -3.65169358253479
    3. '('' → logprob: -8.901693344116211
    4. ''' → logprob: -10.151693344116211
    5. '("("' → logprob: -10.276693344116211
    6. '(
' → logprob: -10.526693344116211
    7. '```' → logprob: -10.526693344116211
    8. ' ' → logprob: -10.651693344116211
    9. ')' → logprob: -11.151693344116211
    10. '"' → logprob: -11.276693344116211

Token 8: 'def' (ID: 1314)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '(' → logprob: -0.7775183320045471
    2. '\n' → logprob: -0.9025183320045471
    3. '()' → logprob: -3.2775182723999023
    4. '(
' → logprob: -3.7775182723999023
    5. '\' → logprob: -3.9025182723999023
    6. ':' → logprob: -4.152518272399902
    7. '```' → logprob: -4.777518272399902
    8. '
' → logprob: -4.902518272399902
    9. '<|end|>' → logprob: -5.777518272399902
    10. 'newline' → logprob: -6.152518272399902

Token 9: ' to' (ID: 316)
  Prédit: ' write'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' write' → logprob: -1.0810340642929077
    2. ' calculate' → logprob: -1.3310340642929077
    3. ' process' → logprob: -1.4560340642929077
    4. ' read' → logprob: -2.7060341835021973
    5. ' main' → logprob: -3.3310341835021973
    6. ' compute' → logprob: -4.456034183502197
    7. ' space' → logprob: -4.581034183502197
    8. ' parse' → logprob: -4.706034183502197
    9. ' user' → logprob: -5.331034183502197
    10. ' validate' → logprob: -5.831034183502197

Token 10: '_int' (ID: 12285)
  Prédit: '_lower'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_lower' → logprob: -0.5343247056007385
    2. '_upper' → logprob: -1.0343246459960938
    3. '_' → logprob: -3.7843246459960938
    4. '_int' → logprob: -4.034324645996094
    5. '_string' → logprob: -4.784324645996094
    6. '_integer' → logprob: -5.659324645996094
    7. '_str' → logprob: -6.534324645996094
    8. '_bytes' → logprob: -7.034324645996094
    9. '_c' → logprob: -7.159324645996094
    10. 'lower' → logprob: -7.659324645996094

Token 11: '(value' (ID: 6333)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '(' → logprob: -0.011209801770746708
    2. '_' → logprob: -6.011209964752197
    3. '```' → logprob: -6.886209964752197
    4. '()' → logprob: -7.386209964752197
    5. '(_' → logprob: -7.886209964752197
    6. 's' → logprob: -7.886209964752197
    7. '("("' → logprob: -8.261209487915039
    8. 'eger' → logprob: -8.261209487915039
    9. 'ect' → logprob: -8.386209487915039
    10. '**' → logprob: -8.386209487915039

Token 12: '):
' (ID: 1883)
  Prédit: '):'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '):' → logprob: -0.021157987415790558
    2. ')' → logprob: -4.021158218383789
    3. '):
' → logprob: -6.271158218383789
    4. ' ):' → logprob: -7.396158218383789
    5. '   ' → logprob: -8.521158218383789
    6. '(' → logprob: -9.521158218383789
    7. ' ' → logprob: -10.521158218383789
    8. '=' → logprob: -10.771158218383789
    9. '):

' → logprob: -10.771158218383789
    10. '(value' → logprob: -11.146158218383789

Token 13: '   ' (ID: 271)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(' → logprob: -0.20631559193134308
    2. '   ' → logprob: -1.8313156366348267
    3. '(value' → logprob: -4.456315517425537
    4. 'int' → logprob: -5.831315517425537
    5. '(int' → logprob: -5.831315517425537
    6. ' (' → logprob: -6.081315517425537
    7. ' return' → logprob: -6.456315517425537
    8. '    ' → logprob: -6.581315517425537
    9. ' value' → logprob: -7.206315517425537
    10. ' ' → logprob: -7.331315517425537

Token 14: ' return' (ID: 622)
  Prédit: ' int'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' int' → logprob: -0.7254347205162048
    2. '   ' → logprob: -1.1004347801208496
    3. ' return' → logprob: -2.1004347801208496
    4. 'int' → logprob: -2.9754347801208496
    5. 'return' (adapté à ' return') → logprob: -5.35043478012085
    6. '    ' → logprob: -5.35043478012085
    7. ' ' → logprob: -9.350434303283691
    8. '  ' → logprob: -9.725434303283691
    9. '```' → logprob: -10.475434303283691
    10. '(int' → logprob: -11.100434303283691

Token 15: ' int' (ID: 677)
  Prédit: ' int'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' int' → logprob: -0.00034750174381770194
    2. 'int' → logprob: -8.000347137451172
    3. ' ' → logprob: -11.625347137451172
    4. '   ' → logprob: -13.125347137451172
    5. '(int' → logprob: -14.625347137451172
    6. '  ' → logprob: -16.000347137451172
    7. '	int' → logprob: -16.250347137451172
    8. '=int' → logprob: -16.625347137451172
    9. '<int' → logprob: -17.125347137451172
    10. '```' → logprob: -17.250347137451172

Token 16: '(value' (ID: 6333)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(' → logprob: -0.2519400119781494
    2. '(value' → logprob: -1.5019400119781494
    3. ' (' → logprob: -12.87693977355957
    4. '('' → logprob: -13.62693977355957
    5. '("("' → logprob: -13.87693977355957
    6. '(

' → logprob: -14.25193977355957
    7. '(`' → logprob: -14.37693977355957
    8. '()' → logprob: -14.50193977355957
    9. '(
' → logprob: -14.62693977355957
    10. '((' → logprob: -14.75193977355957

Token 17: ')

' (ID: 1029)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ')' → logprob: -5.512236498361744e-07
    2. '))' → logprob: -15.000000953674316
    3. ' )' → logprob: -15.875000953674316
    4. ')
' → logprob: -17.5
    5. ')))' → logprob: -17.5
    6. '())' → logprob: -18.875
    7. '')' → logprob: -19.25
    8. ')`' → logprob: -19.375
    9. '`)' → logprob: -19.875
    10. '   ' → logprob: -20.25

Token 18: 'def' (ID: 1314)
  Prédit: 'def'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'def' → logprob: -0.04438164085149765
    2. '\' → logprob: -4.044381618499756
    3. 'd' → logprob: -4.044381618499756
    4. '\n' → logprob: -5.794381618499756
    5. '#' → logprob: -6.044381618499756
    6. '

' → logprob: -7.044381618499756
    7. '
' → logprob: -7.419381618499756
    8. '' → logprob: -8.419382095336914
    9. '```' → logprob: -8.419382095336914
    10. 'n' → logprob: -8.669382095336914

Token 19: ' divide' (ID: 38484)
  Prédit: ' main'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' main' → logprob: -0.20994499325752258
    2. ' def' → logprob: -3.3349449634552
    3. ' read' → logprob: -3.7099449634552
    4. ' add' → logprob: -3.8349449634552
    5. ' print' → logprob: -3.9599449634552
    6. ' process' → logprob: -4.209945201873779
    7. ' convert' → logprob: -4.209945201873779
    8. ' write' → logprob: -4.209945201873779
    9. ' calculate' → logprob: -4.334945201873779
    10. ' sum' → logprob: -5.084945201873779

Token 20: '_by' (ID: 8214)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '(' → logprob: -0.0034309120383113623
    2. '_' → logprob: -5.7534308433532715
    3. '(a' → logprob: -9.25343132019043
    4. '_div' → logprob: -10.25343132019043
    5. 'def' → logprob: -11.00343132019043
    6. '_(' → logprob: -11.50343132019043
    7. ' (' → logprob: -11.50343132019043
    8. '("("' → logprob: -11.87843132019043
    9. '_parent' → logprob: -12.00343132019043
    10. '()' → logprob: -12.00343132019043

Token 21: '_three' (ID: 121681)
  Prédit: '_'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '_' → logprob: -0.05618827044963837
    2. '_two' → logprob: -3.6811883449554443
    3. '_number' → logprob: -5.181188106536865
    4. '2' → logprob: -5.181188106536865
    5. '(value' → logprob: -5.681188106536865
    6. ' ' → logprob: -5.931188106536865
    7. '(' → logprob: -5.931188106536865
    8. '_value' → logprob: -6.556188106536865
    9. 'two' → logprob: -6.681188106536865
    10. '10' → logprob: -6.806188106536865

Token 22: '(value' (ID: 6333)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(' → logprob: -0.005601072683930397
    2. '(value' → logprob: -5.255600929260254
    3. '_' → logprob: -9.005600929260254
    4. '(n' → logprob: -10.255600929260254
    5. ' (' → logprob: -10.380600929260254
    6. '(x' → logprob: -10.505600929260254
    7. '()' → logprob: -10.505600929260254
    8. '("("' → logprob: -10.630600929260254
    9. '(number' → logprob: -11.130600929260254
    10. '(num' → logprob: -11.380600929260254

Token 23: '):
' (ID: 1883)
  Prédit: '):'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '):' → logprob: -0.03823357820510864
    2. ')' → logprob: -3.288233518600464
    3. ' ):' → logprob: -9.163233757019043
    4. '):
' → logprob: -10.538233757019043
    5. '(' → logprob: -11.038233757019043
    6. ' )' → logprob: -11.413233757019043
    7. '(value' → logprob: -11.663233757019043
    8. '   ' → logprob: -11.788233757019043
    9. ' ' → logprob: -12.538233757019043
    10. '*' → logprob: -12.663233757019043

Token 24: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.037648122757673264
    2. 'return' → logprob: -3.9126482009887695
    3. ' return' → logprob: -4.6626482009887695
    4. '/' → logprob: -6.2876482009887695
    5. '(value' → logprob: -6.2876482009887695
    6. '    ' → logprob: -6.9126482009887695
    7. '(' → logprob: -7.0376482009887695
    8. 'value' → logprob: -7.5376482009887695
    9. ' /' → logprob: -7.6626482009887695
    10. ' ' → logprob: -8.28764820098877

Token 25: ' return' (ID: 622)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.09786222130060196
    2. ' return' → logprob: -2.8478622436523438
    3. 'return' (adapté à ' return') → logprob: -3.3478622436523438
    4. ' if' → logprob: -9.972862243652344
    5. '    ' → logprob: -10.972862243652344
    6. 'value' → logprob: -11.347862243652344
    7. ' value' → logprob: -11.597862243652344
    8. '```' → logprob: -12.472862243652344
    9. 'if' → logprob: -12.597862243652344
    10. '  ' → logprob: -12.972862243652344

Token 26: ' value' (ID: 1432)
  Prédit: ' value'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' value' → logprob: -0.005988401360809803
    2. 'value' → logprob: -5.130988597869873
    3. ' ' → logprob: -10.505988121032715
    4. ' (' → logprob: -11.005988121032715
    5. '(value' → logprob: -11.630988121032715
    6. ' ' → logprob: -13.380988121032715
    7. '   ' → logprob: -14.130988121032715
    8. '    ' → logprob: -14.255988121032715
    9. '"value' → logprob: -14.255988121032715
    10. '3' → logprob: -15.005988121032715

Token 27: ' /' (ID: 820)
  Prédit: ' //'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' //' → logprob: -0.07184893637895584
    2. ' /' → logprob: -2.8218488693237305
    3. ' ' → logprob: -5.6968488693237305
    4. '/' → logprob: -5.8218488693237305
    5. '//' → logprob: -6.1968488693237305
    6. ' %' → logprob: -8.07184886932373
    7. ' ///' → logprob: -8.07184886932373
    8. ' ' → logprob: -8.94684886932373
    9. '_' → logprob: -9.07184886932373
    10. '%' → logprob: -9.44684886932373

Token 28: ' ' (ID: 220)
  Prédit: '3'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '3' → logprob: -0.575951337814331
    2. ' ' → logprob: -0.825951337814331
    3. ' ' → logprob: -11.82595157623291
    4. '  ' → logprob: -13.70095157623291
    5. ' three' → logprob: -13.82595157623291
    6. 'three' → logprob: -14.32595157623291
    7. '```' → logprob: -14.45095157623291
    8. '_' → logprob: -14.82595157623291
    9. '   ' → logprob: -14.95095157623291
    10. '_three' → logprob: -14.95095157623291

Token 29: '3' (ID: 18)
  Prédit: '3'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '3' → logprob: -7.703443770878948e-06
    2. ' ' → logprob: -11.875007629394531
    3. '   ' → logprob: -15.000007629394531
    4. 'three' → logprob: -15.125007629394531
    5. '```' → logprob: -16.00000762939453
    6. '  ' → logprob: -18.50000762939453
    7. ' three' → logprob: -19.12500762939453
    8. '_three' → logprob: -19.25000762939453
    9. '۳' → logprob: -19.87500762939453
    10. 'Three' → logprob: -20.00000762939453

Token 30: '

' (ID: 279)
  Prédit: '\n'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '\n' → logprob: -0.5370354652404785
    2. '*' → logprob: -2.0370354652404785
    3. '
' → logprob: -2.2870354652404785
    4. '<|end|>' → logprob: -2.5370354652404785
    5. '\' → logprob: -3.6620354652404785
    6. '```' → logprob: -3.7870354652404785
    7. '(' → logprob: -3.9120354652404785
    8. 'def' → logprob: -4.6620354652404785
    9. '**' → logprob: -5.2870354652404785
    10. ')' → logprob: -5.6620354652404785

Token 31: 'def' (ID: 1314)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(' → logprob: -0.7767348289489746
    2. '*' → logprob: -1.5267348289489746
    3. '\' → logprob: -1.9017348289489746
    4. '_' → logprob: -3.2767348289489746
    5. 'd' → logprob: -3.2767348289489746
    6. 'def' → logprob: -3.9017348289489746
    7. '\n' → logprob: -4.026734828948975
    8. '()' → logprob: -4.276734828948975
    9. '```' → logprob: -4.526734828948975
    10. '#' → logprob: -4.901734828948975

Token 32: ' power' (ID: 3470)
  Prédit: ' main'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' main' → logprob: -0.1380859911441803
    2. ' multiply' → logprob: -2.5130860805511475
    3. ' calculate' → logprob: -3.2630860805511475
    4. ' divide' → logprob: -6.013085842132568
    5. 'multiply' → logprob: -6.763085842132568
    6. ' square' → logprob: -7.138085842132568
    7. ' floor' → logprob: -7.388085842132568
    8. ' is' → logprob: -7.388085842132568
    9. ' add' → logprob: -7.388085842132568
    10. ' cube' → logprob: -7.513085842132568

Token 33: '(value' (ID: 6333)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '(' → logprob: -0.005394314881414175
    2. '_' → logprob: -5.505394458770752
    3. ' (' → logprob: -7.755394458770752
    4. '_(' → logprob: -8.505393981933594
    5. 'ed' → logprob: -9.505393981933594
    6. 's' → logprob: -9.630393981933594
    7. '(
' → logprob: -9.630393981933594
    8. '```' → logprob: -9.755393981933594
    9. ' ' → logprob: -10.005393981933594
    10. '(

' → logprob: -10.130393981933594

Token 34: ',' (ID: 11)
  Prédit: '):'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '):' → logprob: -0.7144797444343567
    2. ',' → logprob: -1.089479684829712
    3. ')' → logprob: -1.964479684829712
    4. '(' → logprob: -3.839479684829712
    5. '**' → logprob: -5.339479923248291
    6. '   ' → logprob: -5.839479923248291
    7. '(value' → logprob: -6.089479923248291
    8. ' ' → logprob: -7.339479923248291
    9. ',value' → logprob: -8.214479446411133
    10. ' ,' → logprob: -8.464479446411133

Token 35: ' exponent' (ID: 51159)
  Prédit: 'ex'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'ex' → logprob: -0.4877374470233917
    2. '2' → logprob: -1.8627374172210693
    3. ' exponent' → logprob: -2.1127374172210693
    4. '3' → logprob: -2.9877374172210693
    5. 'power' → logprob: -3.6127374172210693
    6. ' power' → logprob: -4.237737655639648
    7. 'exp' → logprob: -4.987737655639648
    8. ' ' → logprob: -5.237737655639648
    9. '   ' → logprob: -5.487737655639648
    10. ' n' → logprob: -7.737737655639648

Token 36: '):
' (ID: 1883)
  Prédit: '):'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '):' → logprob: -0.0015984143828973174
    2. ')' → logprob: -6.501598358154297
    3. '):
' → logprob: -10.376598358154297
    4. '=' → logprob: -10.626598358154297
    5. '   ' → logprob: -11.376598358154297
    6. ' ' → logprob: -12.126598358154297
    7. '(' → logprob: -12.126598358154297
    8. ' ):' → logprob: -12.251598358154297
    9. '**' → logprob: -12.501598358154297
    10. 's' → logprob: -13.126598358154297

Token 37: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.00048107770271599293
    2. ' return' → logprob: -7.875481128692627
    3. 'return' → logprob: -10.250480651855469
    4. '    ' → logprob: -10.375480651855469
    5. ')' → logprob: -12.250480651855469
    6. '  ' → logprob: -12.625480651855469
    7. ' (' → logprob: -12.750480651855469
    8. '   ' → logprob: -12.750480651855469
    9. ':' → logprob: -13.375480651855469
    10. '^' → logprob: -13.375480651855469

Token 38: ' return' (ID: 622)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.5279863476753235
    2. ' return' → logprob: -1.2779862880706787
    3. 'return' (adapté à ' return') → logprob: -2.0279862880706787
    4. '    ' → logprob: -12.277986526489258
    5. ' ' → logprob: -13.027986526489258
    6. '	return' → logprob: -13.277986526489258
    7. '  ' → logprob: -13.902986526489258
    8. '```' → logprob: -14.902986526489258
    9. '   ' → logprob: -15.902986526489258
    10. 'eturn' → logprob: -15.902986526489258

Token 39: ' value' (ID: 1432)
  Prédit: ' value'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' value' → logprob: -0.1270112693309784
    2. 'value' → logprob: -2.127011299133301
    3. ' pow' → logprob: -9.8770112991333
    4. 'pow' → logprob: -10.6270112991333
    5. '(value' → logprob: -13.1270112991333
    6. '   ' → logprob: -13.2520112991333
    7. ' ' → logprob: -13.3770112991333
    8. '	value' → logprob: -15.0020112991333
    9. '"value' → logprob: -15.3770112991333
    10. ' power' → logprob: -15.8770112991333

Token 40: ' **' (ID: 6240)
  Prédit: ' **'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' **' → logprob: -0.16024941205978394
    2. '**' → logprob: -1.9102494716644287
    3. '*' → logprob: -11.035249710083008
    4. ' *' → logprob: -12.285249710083008
    5. ')' → logprob: -13.285249710083008
    6. ' ' → logprob: -13.410249710083008
    7. '^' → logprob: -14.785249710083008
    8. ' ' → logprob: -15.410249710083008
    9. '<|end|>' → logprob: -15.535249710083008
    10. '```' → logprob: -15.785249710083008

Token 41: ' exponent' (ID: 51159)
  Prédit: 'ex'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'ex' → logprob: -0.0041011967696249485
    2. ' exponent' → logprob: -5.504101276397705
    3. '2' → logprob: -10.879100799560547
    4. ' ex' → logprob: -13.504100799560547
    5. '3' → logprob: -14.379100799560547
    6. ' ' → logprob: -14.504100799560547
    7. '(ex' → logprob: -14.754100799560547
    8. '	ex' → logprob: -14.879100799560547
    9. '1' → logprob: -15.379100799560547
    10. 'Exponent' → logprob: -15.879100799560547

Token 42: '

' (ID: 279)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '(' → logprob: -0.4718426764011383
    2. '\n' → logprob: -1.596842646598816
    3. '
' → logprob: -2.7218427658081055
    4. '\' → logprob: -3.2218427658081055
    5. 'def' → logprob: -3.9718427658081055
    6. '*' → logprob: -4.8468427658081055
    7. '(
' → logprob: -4.8468427658081055
    8. '_' → logprob: -5.3468427658081055
    9. '```' → logprob: -5.3468427658081055
    10. '#' → logprob: -5.4718427658081055

Token 43: 'def' (ID: 1314)
  Prédit: 'd'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'd' → logprob: -1.1323429346084595
    2. '(' → logprob: -1.6323429346084595
    3. '_' → logprob: -1.6323429346084595
    4. '#' → logprob: -2.50734281539917
    5. '\' → logprob: -2.88234281539917
    6. '\n' → logprob: -3.00734281539917
    7. 'def' → logprob: -4.00734281539917
    8. '*' → logprob: -4.38234281539917
    9. '
' → logprob: -4.38234281539917
    10. 'a' → logprob: -4.88234281539917

Token 44: ' format' (ID: 6011)
  Prédit: ' main'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' main' → logprob: -0.6878878474235535
    2. ' calculate' → logprob: -0.8128878474235535
    3. ' multiply' → logprob: -4.187887668609619
    4. ' cube' → logprob: -4.312887668609619
    5. ' square' → logprob: -4.687887668609619
    6. ' factorial' → logprob: -4.812887668609619
    7. ' compute' → logprob: -5.312887668609619
    8. ' process' → logprob: -7.062887668609619
    9. ' sum' → logprob: -8.062888145446777
    10. ' is' → logprob: -8.062888145446777

Token 45: '_result' (ID: 11623)
  Prédit: '_'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_' → logprob: -0.06710825860500336
    2. '_value' → logprob: -3.192108154296875
    3. '_output' → logprob: -4.317108154296875
    4. '_string' → logprob: -5.567108154296875
    5. '_result' → logprob: -6.192108154296875
    6. '_number' → logprob: -6.317108154296875
    7. '(' → logprob: -7.442108154296875
    8. '_input' → logprob: -7.442108154296875
    9. '_name' → logprob: -8.067108154296875
    10. '_text' → logprob: -8.192108154296875

Token 46: '(value' (ID: 6333)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(' → logprob: -0.01994551345705986
    2. '(value' → logprob: -4.0199456214904785
    3. '(result' → logprob: -6.6449456214904785
    4. '(def' → logprob: -9.01994514465332
    5. '("("' → logprob: -9.76994514465332
    6. '(data' → logprob: -10.01994514465332
    7. '(_' → logprob: -10.39494514465332
    8. ' (' → logprob: -10.39494514465332
    9. '(output' → logprob: -10.39494514465332
    10. '(return' → logprob: -11.01994514465332

Token 47: '):
' (ID: 1883)
  Prédit: '):'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '):' → logprob: -0.0006590616540051997
    2. ')' → logprob: -7.375658988952637
    3. ',' → logprob: -11.125658988952637
    4. '):
' → logprob: -12.125658988952637
    5. ':' → logprob: -12.375658988952637
    6. '   ' → logprob: -12.750658988952637
    7. '(value' → logprob: -13.125658988952637
    8. ' ):' → logprob: -13.750658988952637
    9. 'value' → logprob: -14.625658988952637
    10. '(' → logprob: -15.125658988952637

Token 48: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.005697099957615137
    2. ' f' → logprob: -5.880697250366211
    3. ' return' → logprob: -6.005697250366211
    4. 'return' → logprob: -8.505697250366211
    5. 'f' → logprob: -8.630697250366211
    6. '    ' → logprob: -11.005697250366211
    7. '"' → logprob: -11.255697250366211
    8. ''' → logprob: -12.505697250366211
    9. '   ' → logprob: -13.130697250366211
    10. '  ' → logprob: -13.505697250366211

Token 49: ' return' (ID: 622)
  Prédit: ' return'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' return' → logprob: -0.3306771218776703
    2. '   ' → logprob: -1.5806771516799927
    3. 'return' (adapté à ' return') → logprob: -2.580677032470703
    4. ' f' → logprob: -12.705677032470703
    5. 'f' → logprob: -14.705677032470703
    6. '    ' → logprob: -14.705677032470703
    7. ' ' → logprob: -15.705677032470703
    8. '  ' → logprob: -15.705677032470703
    9. '```' → logprob: -15.705677032470703
    10. '	return' → logprob: -15.955677032470703

Token 50: ' value' (ID: 1432)
  Prédit: ' f'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' f' → logprob: -0.0016437612939625978
    2. 'f' → logprob: -6.501643657684326
    3. ' str' → logprob: -9.126644134521484
    4. '"' → logprob: -11.001644134521484
    5. ' "{' → logprob: -12.001644134521484
    6. ' ' → logprob: -12.251644134521484
    7. ' "' → logprob: -13.126644134521484
    8. 'str' → logprob: -13.376644134521484
    9. '"{' → logprob: -14.501644134521484
    10. ' "{}' → logprob: -14.876644134521484

Token 51: '

' (ID: 279)
  Prédit: '.'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '.' → logprob: -0.6994367241859436
    2. 'f' → logprob: -2.074436664581299
    3. ' f' → logprob: -2.324436664581299
    4. ')' → logprob: -2.824436664581299
    5. '(str' → logprob: -3.449436664581299
    6. '```' → logprob: -3.574436664581299
    7. 'str' → logprob: -3.949436664581299
    8. ' str' → logprob: -4.074436664581299
    9. ' ' → logprob: -4.449436664581299
    10. ':' → logprob: -4.574436664581299

Token 52: 'def' (ID: 1314)
  Prédit: 'def'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'def' → logprob: -0.04151144251227379
    2. '(' → logprob: -4.166511535644531
    3. '<|end|>' → logprob: -5.291511535644531
    4. '()' → logprob: -5.416511535644531
    5. ':' → logprob: -5.916511535644531
    6. ' def' → logprob: -6.041511535644531
    7. '#' → logprob: -6.666511535644531
    8. '*' → logprob: -7.166511535644531
    9. '(str' → logprob: -7.291511535644531
    10. '<|end|>' → logprob: -7.416511535644531

Token 53: ' output' (ID: 4733)
  Prédit: ' calculate'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' calculate' → logprob: -0.274281769990921
    2. ' main' → logprob: -1.7742817401885986
    3. ' compute' → logprob: -3.3992817401885986
    4. ' format' → logprob: -4.149281978607178
    5. ' process' → logprob: -4.774281978607178
    6. ' read' → logprob: -5.524281978607178
    7. ' formatted' → logprob: -6.524281978607178
    8. ' divide' → logprob: -6.774281978607178
    9. ' ' → logprob: -6.899281978607178
    10. ' convert' → logprob: -7.024281978607178

Token 54: '_result' (ID: 11623)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(' → logprob: -0.005558755248785019
    2. '(value' → logprob: -6.005558967590332
    3. '(result' → logprob: -6.505558967590332
    4. '_' → logprob: -7.255558967590332
    5. '(output' → logprob: -8.255558967590332
    6. '_result' → logprob: -8.880558967590332
    7. '("("' → logprob: -9.505558967590332
    8. '()' → logprob: -9.505558967590332
    9. ' (' → logprob: -9.880558967590332
    10. ')' → logprob: -10.255558967590332

Token 55: '(value' (ID: 6333)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(' → logprob: -0.0025823204778134823
    2. '()' → logprob: -6.377582550048828
    3. '(value' → logprob: -7.752582550048828
    4. '(output' → logprob: -8.877582550048828
    5. '(user' → logprob: -9.627582550048828
    6. '(def' → logprob: -10.127582550048828
    7. '(data' → logprob: -10.252582550048828
    8. '():' → logprob: -10.377582550048828
    9. '("("' → logprob: -10.627582550048828
    10. '(print' → logprob: -11.752582550048828

Token 56: '):
' (ID: 1883)
  Prédit: '):'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '):' → logprob: -0.014175611548125744
    2. ')' → logprob: -4.2641754150390625
    3. '):
' → logprob: -11.514175415039062
    4. ':' → logprob: -13.264175415039062
    5. '   ' → logprob: -15.639175415039062
    6. ' ):' → logprob: -16.139175415039062
    7. '():' → logprob: -16.764175415039062
    8. ')：' → logprob: -17.139175415039062
    9. '):
' → logprob: -17.389175415039062
    10. '):

' → logprob: -18.014175415039062

Token 57: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.07965900003910065
    2. ' print' → logprob: -2.5796589851379395
    3. 'print' → logprob: -7.2046589851379395
    4. '    ' → logprob: -10.829659461975098
    5. '```' → logprob: -12.204659461975098
    6. '	print' → logprob: -15.329659461975098
    7. '   ' → logprob: -15.954659461975098
    8. '    
' → logprob: -16.20465850830078
    9. ' ```' → logprob: -16.20465850830078
    10. '  ' → logprob: -16.57965850830078

Token 58: ' print' (ID: 2123)
  Prédit: ' print'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' print' → logprob: -0.02978948876261711
    2. 'print' (adapté à ' print') → logprob: -3.529789447784424
    3. '   ' → logprob: -10.154789924621582
    4. ' return' → logprob: -17.404788970947266
    5. '```' → logprob: -17.529788970947266
    6. '	print' → logprob: -17.654788970947266
    7. 'pr' → logprob: -18.904788970947266
    8. '    ' → logprob: -18.904788970947266
    9. ' pass' → logprob: -19.529788970947266
    10. ' prin' → logprob: -19.779788970947266

Token 59: '(value' (ID: 6333)
  Prédit: '(value'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(value' → logprob: -0.014171624556183815
    2. '(' → logprob: -4.264171600341797
    3. 'value' → logprob: -12.514171600341797
    4. '()' → logprob: -12.889171600341797
    5. '(result' → logprob: -14.764171600341797
    6. '(output' → logprob: -15.139171600341797
    7. ' (' → logprob: -15.139171600341797
    8. '(f' → logprob: -15.389171600341797
    9. ')' → logprob: -15.764171600341797
    10. '(
' → logprob: -16.264171600341797

Token 60: ')

' (ID: 1029)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')' → logprob: -4.320199877838604e-07
    2. ')
' → logprob: -15.75
    3. ' )' → logprob: -15.875
    4. '))' → logprob: -17.0
    5. ')`' → logprob: -18.625
    6. '()' → logprob: -19.125
    7. ')

' → logprob: -20.0
    8. '   ' → logprob: -20.0
    9. '())' → logprob: -20.375
    10. '),' → logprob: -20.5

Token 61: 'def' (ID: 1314)
  Prédit: 'def'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'def' → logprob: -0.0002619318547658622
    2. 'if' → logprob: -8.625262260437012
    3. '```' → logprob: -10.500262260437012
    4. 'value' → logprob: -11.375262260437012
    5. 'result' → logprob: -11.750262260437012
    6. 'input' → logprob: -11.750262260437012
    7. '\' → logprob: -12.000262260437012
    8. '#' → logprob: -12.625262260437012
    9. '    
' → logprob: -12.750262260437012
    10. 'for' → logprob: -12.875262260437012

Token 62: ' main' (ID: 2758)
  Prédit: ' main'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' main' → logprob: -0.0009305141866207123
    2. ' process' → logprob: -7.000930309295654
    3. ' calculate' → logprob: -11.375930786132812
    4. 'main' → logprob: -12.625930786132812
    5. ' run' → logprob: -12.750930786132812
    6. ' compute' → logprob: -14.500930786132812
    7. ' solve' → logprob: -14.875930786132812
    8. '_main' → logprob: -16.000930786132812
    9. ' analyze' → logprob: -16.750930786132812
    10. ' execute' → logprob: -16.875930786132812

Token 63: '():
' (ID: 8595)
  Prédit: '():'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '():' → logprob: -0.0012623753864318132
    2. '(' → logprob: -6.876262187957764
    3. '()' → logprob: -8.501262664794922
    4. '_' → logprob: -11.251262664794922
    5. ' ():' → logprob: -11.626262664794922
    6. '(:' → logprob: -13.626262664794922
    7. ':' → logprob: -13.751262664794922
    8. '():
' → logprob: -14.251262664794922
    9. '()>' → logprob: -15.126262664794922
    10. '(**' → logprob: -15.876262664794922

Token 64: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.005912327207624912
    2. ' input' → logprob: -5.7559123039245605
    3. 'input' → logprob: -6.1309123039245605
    4. ' user' → logprob: -8.005912780761719
    5. 'user' → logprob: -9.630912780761719
    6. ' value' → logprob: -9.880912780761719
    7. 'value' → logprob: -10.630912780761719
    8. ' line' → logprob: -10.880912780761719
    9. '    
' → logprob: -11.005912780761719
    10. 'n' → logprob: -11.505912780761719

Token 65: ' raw' (ID: 11428)
  Prédit: 'value'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'value' → logprob: -1.3281768560409546
    2. '   ' → logprob: -1.7031768560409546
    3. ' user' → logprob: -1.7031768560409546
    4. ' value' → logprob: -1.9531768560409546
    5. 'user' → logprob: -2.078176975250244
    6. 'n' → logprob: -3.078176975250244
    7. ' n' → logprob: -4.078176975250244
    8. 'input' → logprob: -4.578176975250244
    9. ' x' → logprob: -4.703176975250244
    10. 'x' → logprob: -4.828176975250244

Token 66: '_input' (ID: 12507)
  Prédit: '_input'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_input' → logprob: -0.043073639273643494
    2. '_' → logprob: -3.4180736541748047
    3. '_value' → logprob: -4.793073654174805
    4. '_data' → logprob: -7.793073654174805
    5. '_val' → logprob: -8.418073654174805
    6. ' _' → logprob: -8.668073654174805
    7. '_in' → logprob: -8.793073654174805
    8. '_raw' → logprob: -10.293073654174805
    9. '_text' → logprob: -10.418073654174805
    10. '_user' → logprob: -10.793073654174805

Token 67: ' =' (ID: 314)
  Prédit: '_'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_' → logprob: -0.9514229893684387
    2. '=' → logprob: -1.201422929763794
    3. ' =' → logprob: -1.576422929763794
    4. '_value' → logprob: -3.076422929763794
    5. '(' → logprob: -3.201422929763794
    6. '()' → logprob: -4.701423168182373
    7. '_data' → logprob: -5.576423168182373
    8. '   ' → logprob: -6.201423168182373
    9. '_val' → logprob: -6.451423168182373
    10. ' ' → logprob: -7.201423168182373

Token 68: ' read' (ID: 1729)
  Prédit: ' read'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' read' → logprob: -0.014166564680635929
    2. 'read' → logprob: -4.264166355133057
    3. ' input' → logprob: -12.764166831970215
    4. '	read' → logprob: -16.0141658782959
    5. 'input' → logprob: -16.5141658782959
    6. ' ' → logprob: -17.3891658782959
    7. '(read' → logprob: -17.6391658782959
    8. ' raw' → logprob: -18.0141658782959
    9. ' readline' → logprob: -18.7641658782959
    10. ' ' → logprob: -20.3891658782959

Token 69: '_input' (ID: 12507)
  Prédit: '_input'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_input' → logprob: -0.0003424951864872128
    2. '_' → logprob: -8.00034236907959
    3. '_raw' → logprob: -13.12534236907959
    4. '_output' → logprob: -13.62534236907959
    5. '```' → logprob: -14.25034236907959
    6. ' _' → logprob: -14.50034236907959
    7. '_in' → logprob: -14.50034236907959
    8. '_line' → logprob: -14.62534236907959
    9. '_inputs' → logprob: -14.75034236907959
    10. '_user' → logprob: -15.12534236907959

Token 70: '()
' (ID: 1234)
  Prédit: '()'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '()' → logprob: -2.5822400857578032e-05
    2. '()
' → logprob: -11.125025749206543
    3. '_' → logprob: -12.125025749206543
    4. ' ()' → logprob: -13.375025749206543
    5. '(' → logprob: -13.500025749206543
    6. '()`' → logprob: -14.250025749206543
    7. '()

' → logprob: -14.500025749206543
    8. '().' → logprob: -14.625025749206543
    9. '()\' → logprob: -15.875025749206543
    10. '`()' → logprob: -15.875025749206543

Token 71: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.15993677079677582
    2. '
' → logprob: -2.5349366664886475
    3. '    
' → logprob: -2.9099366664886475
    4. '  
' → logprob: -5.534936904907227
    5. '   
' → logprob: -5.534936904907227
    6. '    ' → logprob: -6.409936904907227
    7. ' ' → logprob: -6.784936904907227
    8. 'value' → logprob: -6.784936904907227
    9. ' 
' → logprob: -7.909936904907227
    10. '```' → logprob: -8.034936904907227

Token 72: ' number' (ID: 2086)
  Prédit: ' value'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' value' → logprob: -0.2400810420513153
    2. 'value' → logprob: -1.9900810718536377
    3. ' number' → logprob: -3.2400810718536377
    4. '   ' → logprob: -4.115080833435059
    5. 'number' (adapté à ' number') → logprob: -4.990080833435059
    6. ' num' → logprob: -5.990080833435059
    7. ' converted' → logprob: -6.240080833435059
    8. ' processed' → logprob: -6.240080833435059
    9. ' raw' → logprob: -6.615080833435059
    10. 'num' → logprob: -6.740080833435059

Token 73: ' =' (ID: 314)
  Prédit: ' ='
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' =' → logprob: -0.0002537104592192918
    2. '=' → logprob: -8.500253677368164
    3. '_' → logprob: -10.750253677368164
    4. ' ' → logprob: -11.000253677368164
    5. 's' → logprob: -11.500253677368164
    6. '  ' → logprob: -14.625253677368164
    7. ' =)' → logprob: -15.375253677368164
    8. ')' → logprob: -15.500253677368164
    9. '   ' → logprob: -15.625253677368164
    10. '_space' → logprob: -15.625253677368164

Token 74: ' to' (ID: 316)
  Prédit: ' to'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' to' → logprob: -0.0036006635054945946
    2. 'to' → logprob: -5.628600597381592
    3. ' ' → logprob: -15.00360107421875
    4. ' int' → logprob: -16.00360107421875
    5. '	to' → logprob: -16.00360107421875
    6. 'int' → logprob: -17.37860107421875
    7. ' power' → logprob: -18.37860107421875
    8. ' ' → logprob: -18.75360107421875
    9. '  ' → logprob: -18.75360107421875
    10. '(to' → logprob: -19.00360107421875

Token 75: '_int' (ID: 12285)
  Prédit: '_int'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_int' → logprob: -1.8550976164988242e-05
    2. '_in' → logprob: -11.750018119812012
    3. '_' → logprob: -12.375018119812012
    4. 'int' → logprob: -12.875018119812012
    5. ' _' → logprob: -13.125018119812012
    6. '_integer' → logprob: -14.500018119812012
    7. '_input' → logprob: -14.750018119812012
    8. '_i' → logprob: -15.750018119812012
    9. '_raw' → logprob: -16.000019073486328
    10. '_t' → logprob: -16.125019073486328

Token 76: '(raw' (ID: 46707)
  Prédit: '(raw'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(raw' → logprob: -0.0024839844554662704
    2. '(' → logprob: -6.00248384475708
    3. ' (' → logprob: -11.752484321594238
    4. ' ' → logprob: -16.127483367919922
    5. '(
' → logprob: -16.127483367919922
    6. '(read' → logprob: -17.127483367919922
    7. '(value' → logprob: -17.127483367919922
    8. '(random' → logprob: -18.002483367919922
    9. '(

' → logprob: -18.002483367919922
    10. '(number' → logprob: -18.627483367919922

Token 77: '_input' (ID: 12507)
  Prédit: '_input'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_input' → logprob: -2.3319124011322856e-05
    2. '_' → logprob: -10.750022888183594
    3. ' _' → logprob: -14.250022888183594
    4. '_in' → logprob: -14.625022888183594
    5. '_inputs' → logprob: -15.000022888183594
    6. 'input' → logprob: -15.750022888183594
    7. 'Input' → logprob: -16.625022888183594
    8. '_INPUT' → logprob: -17.125022888183594
    9. '_i' → logprob: -17.750022888183594
    10. '_Input' → logprob: -18.125022888183594

Token 78: ')
' (ID: 446)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')' → logprob: -1.1472419600977446e-06
    2. ')
' → logprob: -14.250000953674316
    3. ' )' → logprob: -15.000000953674316
    4. '))' → logprob: -18.500001907348633
    5. '),' → logprob: -18.750001907348633
    6. '   ' → logprob: -18.875001907348633
    7. ')

' → logprob: -19.250001907348633
    8. ' ' → logprob: -19.500001907348633
    9. ')
' → logprob: -19.500001907348633
    10. ')`' → logprob: -19.875001907348633

Token 79: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.04817109927535057
    2. '    
' → logprob: -3.298171043395996
    3. '
' → logprob: -4.798171043395996
    4. '  
' → logprob: -7.673171043395996
    5. '<|end|>' → logprob: -7.798171043395996
    6. ' 
' → logprob: -8.548171043395996
    7. '    ' → logprob: -9.048171043395996
    8. ' ' → logprob: -9.173171043395996
    9. '   
' → logprob: -9.173171043395996
    10. ')' → logprob: -9.173171043395996

Token 80: ' divided' (ID: 28261)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.35501164197921753
    2. 'result' → logprob: -1.8550117015838623
    3. 'div' → logprob: -2.1050117015838623
    4. ' result' → logprob: -4.480011463165283
    5. ' divided' → logprob: -5.855011463165283
    6. 'number' → logprob: -6.605011463165283
    7. 'third' → logprob: -6.605011463165283
    8. 'value' → logprob: -7.105011463165283
    9. 'three' → logprob: -7.730011463165283
    10. '    
' → logprob: -8.105011940002441

Token 81: ' =' (ID: 314)
  Prédit: '_by'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_by' → logprob: -0.26004093885421753
    2. '_value' → logprob: -1.7600409984588623
    3. '_number' → logprob: -3.6350409984588623
    4. ' =' → logprob: -4.010040760040283
    5. '_' → logprob: -4.510040760040283
    6. '=' → logprob: -6.760040760040283
    7. '_result' → logprob: -9.010041236877441
    8. '_val' → logprob: -10.385041236877441
    9. '=_' → logprob: -10.385041236877441
    10. '   ' → logprob: -11.260041236877441

Token 82: ' divide' (ID: 38484)
  Prédit: ' divide'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' divide' → logprob: -0.0005032312474213541
    2. 'divide' → logprob: -7.625503063201904
    3. ' number' → logprob: -11.375503540039062
    4. ' division' → logprob: -13.625503540039062
    5. ' divided' → logprob: -13.750503540039062
    6. ' ' → logprob: -14.125503540039062
    7. ' divid' → logprob: -15.125503540039062
    8. 'div' → logprob: -15.875503540039062
    9. ' ' → logprob: -16.500503540039062
    10. 'number' → logprob: -16.875503540039062

Token 83: '_by' (ID: 8214)
  Prédit: '_by'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_by' → logprob: -2.1008713702030946e-06
    2. '_' → logprob: -14.250001907348633
    3. 'd' → logprob: -14.625001907348633
    4. 'ed' → logprob: -15.125001907348633
    5. '_b' → logprob: -15.250001907348633
    6. '_d' → logprob: -16.000001907348633
    7. ' _' → logprob: -16.375001907348633
    8. '_div' → logprob: -16.750001907348633
    9. '_BY' → logprob: -17.125001907348633
    10. '_of' → logprob: -17.375001907348633

Token 84: '_three' (ID: 121681)
  Prédit: '_three'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_three' → logprob: -0.0001254693343071267
    2. 'three' → logprob: -9.000125885009766
    3. '_' → logprob: -13.250125885009766
    4. ' three' → logprob: -16.625125885009766
    5. '_th' → logprob: -16.875125885009766
    6. '_thr' → logprob: -17.000125885009766
    7. '3' → logprob: -17.250125885009766
    8. 'Three' → logprob: -17.500125885009766
    9. 't' → logprob: -18.750125885009766
    10. '_t' → logprob: -18.875125885009766

Token 85: '(number' (ID: 32955)
  Prédit: '(number'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(number' → logprob: -0.38782361149787903
    2. '(div' → logprob: -1.3878235816955566
    3. '(' → logprob: -2.6378235816955566
    4. ' (' → logprob: -8.262824058532715
    5. '(value' → logprob: -10.387824058532715
    6. '   ' → logprob: -10.887824058532715
    7. '()' → logprob: -12.512824058532715
    8. 'div' → logprob: -12.887824058532715
    9. 'number' → logprob: -12.887824058532715
    10. '(
' → logprob: -13.012824058532715

Token 86: ')
' (ID: 446)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')' → logprob: -0.0005763856461271644
    2. ')
' → logprob: -7.500576496124268
    3. '   ' → logprob: -10.87557601928711
    4. ' )' → logprob: -12.50057601928711
    5. ')
' → logprob: -15.00057601928711
    6. ' ' → logprob: -15.37557601928711
    7. ')

' → logprob: -16.50057601928711
    8. ' )
' → logprob: -17.50057601928711
    9. '))' → logprob: -17.62557601928711
    10. '),' → logprob: -17.62557601928711

Token 87: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.0029736608266830444
    2. '    
' → logprob: -6.127973556518555
    3. '
' → logprob: -8.002973556518555
    4. '    ' → logprob: -8.127973556518555
    5. ' ' → logprob: -10.127973556518555
    6. ')' → logprob: -10.502973556518555
    7. '<|end|>' → logprob: -11.502973556518555
    8. '       ' → logprob: -11.627973556518555
    9. ',' → logprob: -11.752973556518555
    10. '   
' → logprob: -12.127973556518555

Token 88: ' cub' (ID: 18538)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -1.0295982360839844
    2. 'powered' → logprob: -1.0295982360839844
    3. 'result' → logprob: -1.5295982360839844
    4. ' powered' → logprob: -3.1545982360839844
    5. ' result' → logprob: -4.404598236083984
    6. 'cub' (adapté à ' cub') → logprob: -5.404598236083984
    7. ' cub' → logprob: -5.904598236083984
    8. 'pow' → logprob: -5.904598236083984
    9. 'power' → logprob: -6.404598236083984
    10. 'raised' → logprob: -6.904598236083984

Token 89: 'ed' (ID: 295)
  Prédit: 'e'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'e' → logprob: -0.16039341688156128
    2. 'ed' → logprob: -1.910393476486206
    3. 'ic' → logprob: -10.285393714904785
    4. ' e' → logprob: -10.285393714904785
    5. '(e' → logprob: -10.535393714904785
    6. 'power' → logprob: -11.410393714904785
    7. '   ' → logprob: -11.660393714904785
    8. '(' → logprob: -11.910393714904785
    9. 'ep' → logprob: -12.410393714904785
    10. 'е' → logprob: -12.472893714904785

Token 90: ' =' (ID: 314)
  Prédit: ' ='
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' =' → logprob: -0.009826334193348885
    2. '=' → logprob: -4.634826183319092
    3. 'ed' → logprob: -10.13482666015625
    4. ' ' → logprob: -11.38482666015625
    5. '   ' → logprob: -11.63482666015625
    6. '  ' → logprob: -12.25982666015625
    7. '_' → logprob: -12.63482666015625
    8. '    ' → logprob: -13.75982666015625
    9. 'd' → logprob: -15.00982666015625
    10. '	' → logprob: -15.63482666015625

Token 91: ' power' (ID: 3470)
  Prédit: ' power'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' power' → logprob: -0.01821666955947876
    2. 'power' → logprob: -4.018216609954834
    3. ' divide' → logprob: -10.268217086791992
    4. ' pow' → logprob: -11.268217086791992
    5. '   ' → logprob: -11.768217086791992
    6. 'pow' → logprob: -12.018217086791992
    7. 'divide' → logprob: -13.518217086791992
    8. '(power' → logprob: -13.643217086791992
    9. 'div' → logprob: -13.768217086791992
    10. '    ' → logprob: -13.768217086791992

Token 92: '(div' (ID: 73108)
  Prédit: '(div'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(div' → logprob: -0.011063382029533386
    2. '(' → logprob: -4.511063575744629
    3. ' (' → logprob: -11.636063575744629
    4. '(
' → logprob: -12.386063575744629
    5. '(c' → logprob: -13.636063575744629
    6. '(di' → logprob: -14.886063575744629
    7. '(d' → logprob: -15.011063575744629
    8. '(

' → logprob: -15.636063575744629
    9. ' ' → logprob: -16.386062622070312
    10. ')' → logprob: -16.511062622070312

Token 93: 'ided' (ID: 6350)
  Prédit: 'ided'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'ided' → logprob: -0.0032983170822262764
    2. 'ed' → logprob: -5.753298282623291
    3. 'ded' → logprob: -9.62829875946045
    4. 'id' → logprob: -10.62829875946045
    5. 'ide' → logprob: -11.12829875946045
    6. 'ied' → logprob: -12.62829875946045
    7. 'eded' → logprob: -12.75329875946045
    8. 'ived' → logprob: -13.87829875946045
    9. '3' → logprob: -14.00329875946045
    10. '   ' → logprob: -14.12829875946045

Token 94: ',' (ID: 11)
  Prédit: ','
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ',' → logprob: -0.01168038509786129
    2. ' ,' → logprob: -4.636680603027344
    3. ')' → logprob: -6.636680603027344
    4. '2' → logprob: -8.511680603027344
    5. '3' → logprob: -8.636680603027344
    6. '(' → logprob: -9.011680603027344
    7. ' ' → logprob: -9.636680603027344
    8. ',
' → logprob: -12.261680603027344
    9. '6' → logprob: -12.386680603027344
    10. '  ' → logprob: -12.511680603027344

Token 95: ' ' (ID: 220)
  Prédit: '3'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '3' → logprob: -0.005234475247561932
    2. ' ' → logprob: -5.255234241485596
    3. '```' → logprob: -15.880234718322754
    4. ')' → logprob: -16.005233764648438
    5. '   ' → logprob: -16.005233764648438
    6. ' ' → logprob: -16.505233764648438
    7. '    ' → logprob: -17.005233764648438
    8. '  ' → logprob: -17.380233764648438
    9. '2' → logprob: -17.755233764648438
    10. '`' → logprob: -18.130233764648438

Token 96: '3' (ID: 18)
  Prédit: '3'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '3' → logprob: -2.236549335066229e-05
    2. ' ' → logprob: -10.750021934509277
    3. '   ' → logprob: -14.750021934509277
    4. '```' → logprob: -16.000022888183594
    5. '  ' → logprob: -16.125022888183594
    6. ')' → logprob: -17.125022888183594
    7. '    ' → logprob: -17.250022888183594
    8. '' → logprob: -17.500022888183594
    9. '`' → logprob: -17.625022888183594
    10. '
' → logprob: -18.250022888183594

Token 97: ')
' (ID: 446)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')' → logprob: -3.297462171758525e-05
    2. ')
' → logprob: -10.375033378601074
    3. ' )' → logprob: -13.500033378601074
    4. ')
' → logprob: -16.375032424926758
    5. ')

' → logprob: -16.750032424926758
    6. '   ' → logprob: -16.875032424926758
    7. '))' → logprob: -17.750032424926758
    8. ' ' → logprob: -17.875032424926758
    9. ')`' → logprob: -18.375032424926758
    10. '),' → logprob: -18.750032424926758

Token 98: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.016425173729658127
    2. '
' → logprob: -4.266425132751465
    3. '    
' → logprob: -6.141425132751465
    4. '  
' → logprob: -10.266425132751465
    5. '   
' → logprob: -10.641425132751465
    6. '<|end|>' → logprob: -11.266425132751465
    7. '```' → logprob: -11.766425132751465
    8. 'output' → logprob: -11.766425132751465
    9. ' 
' → logprob: -12.266425132751465
    10. 'formatted' → logprob: -12.516425132751465

Token 99: ' result' (ID: 1534)
  Prédit: 'formatted'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'formatted' → logprob: -0.305301308631897
    2. 'result' (adapté à ' result') → logprob: -1.805301308631897
    3. '   ' → logprob: -3.0553011894226074
    4. ' formatted' → logprob: -3.6803011894226074
    5. ' result' → logprob: -3.8053011894226074
    6. '
' → logprob: -5.930301189422607
    7. 'output' → logprob: -7.055301189422607
    8. ' output' → logprob: -8.930301666259766
    9. ' ' → logprob: -9.180301666259766
    10. '    
' → logprob: -9.305301666259766

Token 100: ' =' (ID: 314)
  Prédit: ' ='
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' =' → logprob: -0.001984663773328066
    2. '=' → logprob: -6.251984596252441
    3. ' ' → logprob: -10.126984596252441
    4. '_' → logprob: -11.501984596252441
    5. ' ' → logprob: -12.751984596252441
    6. ' =
' → logprob: -13.501984596252441
    7. ' =)' → logprob: -14.001984596252441
    8. '  ' → logprob: -15.126984596252441
    9. '	' → logprob: -16.001985549926758
    10. '.' → logprob: -16.126985549926758

Token 101: ' format' (ID: 6011)
  Prédit: ' format'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' format' → logprob: -0.00672448705881834
    2. 'format' → logprob: -5.0067243576049805
    3. '	format' → logprob: -12.38172435760498
    4. ' formatted' → logprob: -13.88172435760498
    5. '=format' → logprob: -13.88172435760498
    6. ' ' → logprob: -14.00672435760498
    7. ' formatting' → logprob: -14.63172435760498
    8. '_format' → logprob: -14.88172435760498
    9. '.format' → logprob: -15.13172435760498
    10. '(format' → logprob: -15.13172435760498

Token 102: '_result' (ID: 11623)
  Prédit: '_result'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_result' → logprob: -1.7432603272027336e-06
    2. '_res' → logprob: -13.875001907348633
    3. '_' → logprob: -14.250001907348633
    4. '_results' → logprob: -17.125001907348633
    5. '_RESULT' → logprob: -17.750001907348633
    6. '_Result' → logprob: -17.875001907348633
    7. ' _' → logprob: -18.250001907348633
    8. '(result' → logprob: -18.500001907348633
    9. 'result' → logprob: -19.250001907348633
    10. '```' → logprob: -19.375001907348633

Token 103: '(c' (ID: 2410)
  Prédit: '(c'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(c' → logprob: -0.038047123700380325
    2. '(' → logprob: -3.2880470752716064
    3. '(
' → logprob: -12.788046836853027
    4. ' (' → logprob: -14.288046836853027
    5. '(

' → logprob: -14.413046836853027
    6. '((' → logprob: -14.788046836853027
    7. ' ' → logprob: -15.163046836853027
    8. '(ci' → logprob: -15.788046836853027
    9. '(`' → logprob: -16.038047790527344
    10. '(com' → logprob: -16.038047790527344

Token 104: 'ub' (ID: 431)
  Prédit: 'ub'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'ub' → logprob: -9.85366350505501e-05
    2. '   ' → logprob: -10.25009822845459
    3. 'cub' → logprob: -11.00009822845459
    4. '```' → logprob: -11.50009822845459
    5. 'b' → logprob: -12.12509822845459
    6. '  ' → logprob: -12.50009822845459
    7. 'u' → logprob: -13.00009822845459
    8. '>' → logprob: -13.00009822845459
    9. '    ' → logprob: -13.12509822845459
    10. 'уб' → logprob: -13.12509822845459

Token 105: 'ed' (ID: 295)
  Prédit: 'ed'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'ed' → logprob: -1.4736459888808895e-05
    2. 'e' → logprob: -11.875014305114746
    3. '_ed' → logprob: -13.375014305114746
    4. ' ed' → logprob: -13.750014305114746
    5. '```' → logprob: -14.625014305114746
    6. '   ' → logprob: -14.750014305114746
    7. ')' → logprob: -14.750014305114746
    8. 'ед' → logprob: -14.875014305114746
    9. 'ED' → logprob: -14.875014305114746
    10. 'eded' → logprob: -15.187514305114746

Token 106: ')
' (ID: 446)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')' → logprob: -0.006773753557354212
    2. ')
' → logprob: -5.006773948669434
    3. ')
' → logprob: -9.881773948669434
    4. '   ' → logprob: -12.631773948669434
    5. ')

' → logprob: -12.631773948669434
    6. ' ' → logprob: -15.006773948669434
    7. ' )' → logprob: -15.631773948669434
    8. ')value' → logprob: -16.631772994995117
    9. ')

' → logprob: -16.756772994995117
    10. ')`' → logprob: -17.131772994995117

Token 107: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.00591303501278162
    2. '
' → logprob: -6.130913257598877
    3. 'output' → logprob: -6.130913257598877
    4. '    
' → logprob: -6.630913257598877
    5. '	output' → logprob: -9.880912780761719
    6. '  
' → logprob: -10.005912780761719
    7. ' output' → logprob: -10.380912780761719
    8. ')' → logprob: -10.505912780761719
    9. ' 
' → logprob: -11.130912780761719
    10. '```' → logprob: -11.755912780761719

Token 108: ' output' (ID: 4733)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.459154337644577
    2. 'output' (adapté à ' output') → logprob: -1.0841543674468994
    3. ' output' → logprob: -3.5841543674468994
    4. '
' → logprob: -7.33415412902832
    5. '_output' → logprob: -7.45915412902832
    6. '	output' → logprob: -7.58415412902832
    7. '    
' → logprob: -8.45915412902832
    8. ' ' → logprob: -9.08415412902832
    9. '(output' → logprob: -10.33415412902832
    10. '  ' → logprob: -10.45915412902832

Token 109: '_result' (ID: 11623)
  Prédit: '_result'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_result' → logprob: -3.166338137816638e-05
    2. '_' → logprob: -10.625031471252441
    3. '_res' → logprob: -12.750031471252441
    4. '_Result' → logprob: -13.000031471252441
    5. '_results' → logprob: -14.000031471252441
    6. ' _' → logprob: -14.750031471252441
    7. '_RESULT' → logprob: -14.875031471252441
    8. '```' → logprob: -15.250031471252441
    9. '(_' → logprob: -16.750032424926758
    10. '(result' → logprob: -17.500032424926758

Token 110: '(result' (ID: 8111)
  Prédit: '(result'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(result' → logprob: -0.048605985939502716
    2. '(' → logprob: -3.0486059188842773
    3. ' (' → logprob: -11.798605918884277
    4. '(value' → logprob: -12.548605918884277
    5. '(resultado' → logprob: -13.173605918884277
    6. '(results' → logprob: -13.673605918884277
    7. '(res' → logprob: -14.048605918884277
    8. ' ' → logprob: -14.173605918884277
    9. '(
' → logprob: -14.298605918884277
    10. '(

' → logprob: -14.548605918884277

Token 111: ')

' (ID: 1029)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')' → logprob: -6.704273118884885e-07
    2. ' )' → logprob: -15.000000953674316
    3. ')
' → logprob: -15.375000953674316
    4. '()' → logprob: -19.25
    5. ')

' → logprob: -19.625
    6. ')`' → logprob: -19.625
    7. '(' → logprob: -19.875
    8. '))' → logprob: -20.75
    9. ' ' → logprob: -21.125
    10. '）' → logprob: -21.75

Token 112: 'main' (ID: 7731)
  Prédit: 'if'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'if' → logprob: -0.45505544543266296
    2. 'main' → logprob: -1.7050554752349854
    3. '\n' → logprob: -1.8300554752349854
    4. '\' → logprob: -4.705055236816406
    5. '_' → logprob: -5.455055236816406
    6. '#' → logprob: -5.830055236816406
    7. '
' → logprob: -6.205055236816406
    8. '  
' → logprob: -7.205055236816406
    9. '' → logprob: -7.330055236816406
    10. '```' → logprob: -7.330055236816406

Token 113: '()' (ID: 416)
  Prédit: '()'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '()' → logprob: -0.0160506758838892
    2. '(' → logprob: -4.141050815582275
    3. '()
' → logprob: -11.641050338745117
    4. '(
' → logprob: -12.766050338745117
    5. ' ()' → logprob: -13.891050338745117
    6. '()`' → logprob: -14.391050338745117
    7. '(

' → logprob: -14.516050338745117
    8. '()

' → logprob: -14.516050338745117
    9. '();' → logprob: -15.016050338745117
    10. '().' → logprob: -15.141050338745117


RÉSUMÉ:
--------------------------------------------------------------------------------
Total des tokens analysés: 111
Tokens correctement prédits (1ère position, stricte): 49
Tokens correctement prédits (1ère position, avec adaptation): 50
Tokens correctement prédits (top 10): 93
Précision stricte (1ère position): 44.14%
Précision adaptée (1ère position): 45.05%
Précision (top 10): 83.78%
================================================================================
