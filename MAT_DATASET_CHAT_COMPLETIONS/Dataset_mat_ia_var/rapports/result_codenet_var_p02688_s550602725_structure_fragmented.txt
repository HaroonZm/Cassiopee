================================================================================
ANALYSE DE PRÉDICTION TOKEN PAR TOKEN (BATCH API)
Date: 2025-06-04 19:15:38
Modèle de tokenisation: gpt-4o-mini
================================================================================

SCRIPT ANALYSÉ:
--------------------------------------------------------------------------------
def get_n_k():
    return map(int, input().split())

def read_d():
    return int(input())

def read_a():
    return list(map(int, input().split()))

def add_unique(have, value):
    if value not in have:
        have.append(value)

def process_k_times(k, have):
    for _ in range(k):
        process_one_d(have)

def process_one_d(have):
    d = read_d()
    a = read_a()
    process_a_values(d, a, have)

def process_a_values(d, a, have):
    for j in range(d):
        add_unique(have, a[j])

def compute_output(n, have):
    return n - len(have)

def display_result(result):
    print(result)

def main():
    n, k = get_n_k()
    have = []
    process_k_times(k, have)
    output = compute_output(n, have)
    display_result(output)

if __name__ == "__main__":
    main()
--------------------------------------------------------------------------------

RÉSULTATS D'ANALYSE TOKEN PAR TOKEN:
--------------------------------------------------------------------------------
Token 0: 'def' (ID: 1314)
  → Token d'amorce (pas de prédiction)

Token 1: ' get' (ID: 717)
  → Token d'amorce (pas de prédiction)

Token 2: '_n' (ID: 2170)
  → Token d'amorce (pas de prédiction)

Token 3: '_k' (ID: 11637)
  Prédit: '_'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '_' → logprob: -0.020298020914196968
    2. 'umber' → logprob: -4.770298004150391
    3. 'ext' → logprob: -5.770298004150391
    4. '_ext' → logprob: -6.020298004150391
    5. 'ame' → logprob: -6.520298004150391
    6. 'a' → logprob: -6.645298004150391
    7. '_a' → logprob: -7.145298004150391
    8. '_u' → logprob: -7.270298004150391
    9. 'umbers' → logprob: -7.895298004150391
    10. 'u' → logprob: -8.39529800415039

Token 4: '():
' (ID: 8595)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '(' → logprob: -0.5055555701255798
    2. '_' → logprob: -1.5055556297302246
    3. '(_' → logprob: -2.2555556297302246
    4. '()' → logprob: -3.5055556297302246
    5. '```' → logprob: -4.630555629730225
    6. 's' → logprob: -5.255555629730225
    7. '_(' → logprob: -5.255555629730225
    8. '(_)' → logprob: -5.880555629730225
    9. 'def' → logprob: -6.005555629730225
    10. '(e' → logprob: -6.255555629730225

Token 5: '   ' (ID: 271)
  Prédit: '```'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '```' → logprob: -0.3169044852256775
    2. '(' → logprob: -2.0669045448303223
    3. ':' → logprob: -3.0669045448303223
    4. '():' → logprob: -3.3169045448303223
    5. '   ' → logprob: -4.066904544830322
    6. ''' → logprob: -4.441904544830322
    7. '[' → logprob: -5.316904544830322
    8. '``' → logprob: -5.441904544830322
    9. '(n' → logprob: -5.941904544830322
    10. '_' → logprob: -6.066904544830322

Token 6: ' return' (ID: 622)
  Prédit: 'n'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'n' → logprob: -0.6597846150398254
    2. 'return' (adapté à ' return') → logprob: -1.5347845554351807
    3. '   ' → logprob: -2.0347845554351807
    4. 'r' → logprob: -2.7847845554351807
    5. 'x' → logprob: -3.1597845554351807
    6. '```' → logprob: -4.15978479385376
    7. ' ' → logprob: -4.65978479385376
    8. 'a' → logprob: -5.78478479385376
    9. ' return' → logprob: -6.78478479385376
    10. '`' → logprob: -7.53478479385376

Token 7: ' map' (ID: 4014)
  Prédit: ' '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' ' → logprob: -0.07681332528591156
    2. '"' → logprob: -3.201813220977783
    3. ''' → logprob: -4.576813220977783
    4. '  ' → logprob: -4.701813220977783
    5. ' None' → logprob: -5.076813220977783
    6. '0' → logprob: -6.201813220977783
    7. ' (' → logprob: -6.701813220977783
    8. ' "' → logprob: -7.201813220977783
    9. 'None' → logprob: -7.576813220977783
    10. '1' → logprob: -7.576813220977783

Token 8: '(int' (ID: 2742)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '(' → logprob: -0.007064035162329674
    2. '(lambda' → logprob: -5.382063865661621
    3. '.' → logprob: -7.007063865661621
    4. ' (' → logprob: -7.507063865661621
    5. '(
' → logprob: -8.132063865661621
    6. '(None' → logprob: -9.132063865661621
    7. '(space' → logprob: -9.882063865661621
    8. '(.' → logprob: -10.007063865661621
    9. ')' → logprob: -10.007063865661621
    10. '```' → logprob: -10.132063865661621

Token 9: ',' (ID: 11)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '(' → logprob: -0.25760209560394287
    2. ')' → logprob: -1.7576020956039429
    3. '<|end|>' → logprob: -3.2576022148132324
    4. '(input' → logprob: -5.382602214813232
    5. '('' → logprob: -6.257602214813232
    6. '(range' → logprob: -6.632602214813232
    7. '(user' → logprob: -6.632602214813232
    8. ' (' → logprob: -6.882602214813232
    9. '```' → logprob: -6.882602214813232
    10. '<|end|>' → logprob: -7.882602214813232

Token 10: ' input' (ID: 3422)
  Prédit: 'input'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'input' → logprob: -0.22902148962020874
    2. ' input' → logprob: -1.6040215492248535
    3. '(input' → logprob: -6.2290215492248535
    4. ')' → logprob: -6.4790215492248535
    5. ' )' → logprob: -10.604021072387695
    6. ' (' → logprob: -11.229021072387695
    7. ' ' → logprob: -11.229021072387695
    8. '(' → logprob: -11.354021072387695
    9. '=input' → logprob: -11.979021072387695
    10. ',input' → logprob: -11.979021072387695

Token 11: '().' (ID: 1454)
  Prédit: '()'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '()' → logprob: -0.30685171484947205
    2. '())' → logprob: -1.5568517446517944
    3. '('' → logprob: -3.431851625442505
    4. '(()' → logprob: -5.181851863861084
    5. '(' → logprob: -5.681851863861084
    6. '(""))' → logprob: -5.806851863861084
    7. '("' → logprob: -6.556851863861084
    8. '().' → logprob: -6.681851863861084
    9. '()))' → logprob: -6.806851863861084
    10. '());' → logprob: -6.806851863861084

Token 12: 'split' (ID: 13627)
  Prédit: 'split'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'split' → logprob: -0.0004336493439041078
    2. 'strip' → logprob: -7.750433444976807
    3. ' split' → logprob: -13.250433921813965
    4. 'rstrip' → logprob: -14.125433921813965
    5. 'read' → logprob: -15.250433921813965
    6. '(split' → logprob: -15.375433921813965
    7. 'spl' → logprob: -17.12543296813965
    8. ')' → logprob: -19.37543296813965
    9. '_split' → logprob: -19.87543296813965
    10. '().' → logprob: -19.87543296813965

Token 13: '())

' (ID: 27654)
  Prédit: '())'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '())' → logprob: -0.08471867442131042
    2. '()))' → logprob: -2.584718704223633
    3. '()' → logprob: -5.584718704223633
    4. ')' → logprob: -6.709718704223633
    5. '))' → logprob: -7.584718704223633
    6. '(' → logprob: -8.334718704223633
    7. '('' → logprob: -10.459718704223633
    8. ' ())' → logprob: -10.834718704223633
    9. '`()' → logprob: -11.459718704223633
    10. '()),' → logprob: -12.209718704223633

Token 14: 'def' (ID: 1314)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(' → logprob: -0.4037099778652191
    2. '()' → logprob: -1.2787100076675415
    3. '(
' → logprob: -3.778709888458252
    4. 'def' → logprob: -4.153709888458252
    5. '(n' → logprob: -5.653709888458252
    6. 'n' → logprob: -5.778709888458252
    7. '#' → logprob: -6.278709888458252
    8. ')' → logprob: -6.528709888458252
    9. ':' → logprob: -6.903709888458252
    10. '()
' → logprob: -6.903709888458252

Token 15: ' read' (ID: 1729)
  Prédit: ' get'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' get' → logprob: -0.11291484534740448
    2. ' main' → logprob: -3.487914800643921
    3. ' calculate' → logprob: -3.487914800643921
    4. ' solve' → logprob: -4.2379150390625
    5. ' factorial' → logprob: -4.7379150390625
    6. ' find' → logprob: -4.8629150390625
    7. ' process' → logprob: -5.4879150390625
    8. ' count' → logprob: -5.6129150390625
    9. ' compute' → logprob: -7.1129150390625
    10. ' max' → logprob: -7.1129150390625

Token 16: '_d' (ID: 1565)
  Prédit: '()'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '()' → logprob: -0.6081240177154541
    2. '_' → logprob: -0.9831240177154541
    3. '_line' → logprob: -3.233124017715454
    4. '_data' → logprob: -4.108123779296875
    5. '_input' → logprob: -4.608123779296875
    6. '_lines' → logprob: -5.483123779296875
    7. '(' → logprob: -5.733123779296875
    8. '_array' → logprob: -5.983123779296875
    9. '():' → logprob: -6.608123779296875
    10. '_list' → logprob: -6.733123779296875

Token 17: '():
' (ID: 8595)
  Prédit: 'ata'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'ata' → logprob: -0.11272688210010529
    2. 'ef' → logprob: -2.987726926803589
    3. 'ictionary' → logprob: -4.86272668838501
    4. 'efs' → logprob: -4.86272668838501
    5. 'ay' → logprob: -5.36272668838501
    6. 'ict' → logprob: -5.36272668838501
    7. 'ist' → logprob: -5.73772668838501
    8. '()' → logprob: -5.98772668838501
    9. 'ays' → logprob: -6.11272668838501
    10. 'istance' → logprob: -6.36272668838501

Token 18: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.0752476155757904
    2. '()' → logprob: -3.3252475261688232
    3. 'def' → logprob: -3.7002475261688232
    4. ' return' → logprob: -5.450247764587402
    5. 'return' → logprob: -5.700247764587402
    6. 'input' → logprob: -6.200247764587402
    7. ' ()' → logprob: -7.950247764587402
    8. ' input' → logprob: -8.200247764587402
    9. ')' → logprob: -8.450247764587402
    10. 'int' → logprob: -8.700247764587402

Token 19: ' return' (ID: 622)
  Prédit: 'return'
  Correct (stricte): False
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'return' (adapté à ' return') → logprob: -0.14403969049453735
    2. ' return' → logprob: -2.2690396308898926
    3. '   ' → logprob: -3.5190396308898926
    4. 'n' → logprob: -7.519039630889893
    5. 'd' → logprob: -8.64404010772705
    6. 'int' → logprob: -9.26904010772705
    7. 'data' → logprob: -9.39404010772705
    8. 'def' → logprob: -9.76904010772705
    9. ' n' → logprob: -10.39404010772705
    10. 'for' → logprob: -11.01904010772705

Token 20: ' int' (ID: 677)
  Prédit: 'map'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'map' → logprob: -0.9496651887893677
    2. 'list' → logprob: -1.1996651887893677
    3. ' map' → logprob: -1.6996651887893677
    4. ' list' → logprob: -2.574665069580078
    5. 'int' → logprob: -3.449665069580078
    6. '[int' → logprob: -4.824665069580078
    7. ' int' → logprob: -5.324665069580078
    8. 'dict' → logprob: -5.449665069580078
    9. '[' → logprob: -6.949665069580078
    10. ' [' → logprob: -7.324665069580078

Token 21: '(input' (ID: 10054)
  Prédit: '(input'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(input' → logprob: -0.011052182875573635
    2. '(' → logprob: -4.511052131652832
    3. 'input' → logprob: -12.636052131652832
    4. ' (' → logprob: -14.886052131652832
    5. '(

' → logprob: -15.761052131652832
    6. '(in' → logprob: -16.26105308532715
    7. '(open' → logprob: -16.38605308532715
    8. '(
' → logprob: -16.38605308532715
    9. '()' → logprob: -17.01105308532715
    10. '(int' → logprob: -17.26105308532715

Token 22: '())

' (ID: 27654)
  Prédit: '())'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '())' → logprob: -0.01092143077403307
    2. '()' → logprob: -5.010921478271484
    3. '()))' → logprob: -5.510921478271484
    4. ')' → logprob: -8.885921478271484
    5. ' ())' → logprob: -12.010921478271484
    6. '))' → logprob: -12.760921478271484
    7. '().' → logprob: -13.010921478271484
    8. '(' → logprob: -13.760921478271484
    9. '();)' → logprob: -13.885921478271484
    10. '())
' → logprob: -14.385921478271484

Token 23: 'def' (ID: 1314)
  Prédit: 'def'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'def' → logprob: -0.03792741149663925
    2. 'd' → logprob: -3.9129273891448975
    3. 'n' → logprob: -4.162927627563477
    4. 'for' → logprob: -7.162927627563477
    5. '```' → logprob: -8.662927627563477
    6. '\n' → logprob: -9.037927627563477
    7. '\' → logprob: -9.287927627563477
    8. 'k' → logprob: -9.412927627563477
    9. 'a' → logprob: -9.662927627563477
    10. '(n' → logprob: -9.787927627563477

Token 24: ' read' (ID: 1729)
  Prédit: ' solve'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' solve' → logprob: -0.7498494386672974
    2. ' main' → logprob: -1.6248494386672974
    3. '_' → logprob: -1.8748494386672974
    4. ' get' → logprob: -1.9998494386672974
    5. ' calculate' → logprob: -4.374849319458008
    6. ' find' → logprob: -4.874849319458008
    7. ' count' → logprob: -5.624849319458008
    8. ' def' → logprob: -5.874849319458008
    9. ' read' → logprob: -6.124849319458008
    10. ' process' → logprob: -6.374849319458008

Token 25: '_a' (ID: 10852)
  Prédit: '()'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '()' → logprob: -0.18801064789295197
    2. '_' → logprob: -1.9380106925964355
    3. '_array' → logprob: -5.1880106925964355
    4. '_a' → logprob: -5.3130106925964355
    5. '_list' → logprob: -5.5630106925964355
    6. '())' → logprob: -5.9380106925964355
    7. '(' → logprob: -6.3130106925964355
    8. '_d' → logprob: -6.3130106925964355
    9. '_line' → logprob: -6.6880106925964355
    10. '_n' → logprob: -6.8130106925964355

Token 26: '():
' (ID: 8595)
  Prédit: '()'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '()' → logprob: -0.17627748847007751
    2. 'rray' → logprob: -2.1762773990631104
    3. '[]' → logprob: -3.6762773990631104
    4. '_' → logprob: -4.5512776374816895
    5. '():' → logprob: -5.4262776374816895
    6. 'rr' → logprob: -6.3012776374816895
    7. '()]' → logprob: -6.3012776374816895
    8. '()[' → logprob: -7.4262776374816895
    9. '_list' → logprob: -7.4262776374816895
    10. '()>' → logprob: -7.6762776374816895

Token 27: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.02101908065378666
    2. 'return' → logprob: -3.8960189819335938
    3. ' return' → logprob: -7.896018981933594
    4. '[]' → logprob: -9.521018981933594
    5. 'map' → logprob: -10.896018981933594
    6. '    ' → logprob: -13.146018981933594
    7. ' ' → logprob: -13.271018981933594
    8. 'def' → logprob: -13.396018981933594
    9. '	return' → logprob: -13.521018981933594
    10. 'list' → logprob: -13.896018981933594

Token 28: ' return' (ID: 622)
  Prédit: 'return'
  Correct (stricte): False
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'return' (adapté à ' return') → logprob: -0.5371050834655762
    2. 'map' → logprob: -1.2871050834655762
    3. ' map' → logprob: -2.787105083465576
    4. ' return' → logprob: -3.162105083465576
    5. 'list' → logprob: -3.537105083465576
    6. ' list' → logprob: -5.537105083465576
    7. '[]' → logprob: -6.787105083465576
    8. '   ' → logprob: -6.787105083465576
    9. ' []' → logprob: -9.537105560302734
    10. '[' → logprob: -9.912105560302734

Token 29: ' list' (ID: 1562)
  Prédit: ' list'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' list' → logprob: -0.7401753067970276
    2. 'list' → logprob: -0.7401753067970276
    3. ' map' → logprob: -3.740175247192383
    4. 'map' → logprob: -3.990175247192383
    5. 'int' → logprob: -6.365175247192383
    6. '[]' → logprob: -6.990175247192383
    7. ' []' → logprob: -8.115175247192383
    8. ' int' → logprob: -8.240175247192383
    9. '[int' → logprob: -8.490175247192383
    10. ' [' → logprob: -9.490175247192383

Token 30: '(map' (ID: 16946)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(' → logprob: -0.9330419898033142
    2. '(map' → logprob: -0.9330419898033142
    3. '(int' → logprob: -1.558042049407959
    4. '(list' → logprob: -6.433042049407959
    5. '(input' → logprob: -7.308042049407959
    6. '()' → logprob: -9.0580415725708
    7. ' (' → logprob: -9.3080415725708
    8. '(eval' → logprob: -9.4330415725708
    9. '(lambda' → logprob: -10.1830415725708
    10. '(s' → logprob: -10.4330415725708

Token 31: '(int' (ID: 2742)
  Prédit: '(int'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(int' → logprob: -0.0006894402904435992
    2. '(' → logprob: -7.375689506530762
    3. 'int' → logprob: -10.250689506530762
    4. '<int' → logprob: -11.250689506530762
    5. '[int' → logprob: -11.750689506530762
    6. '(lambda' → logprob: -12.625689506530762
    7. ',int' → logprob: -13.625689506530762
    8. '=int' → logprob: -14.250689506530762
    9. ')' → logprob: -15.000689506530762
    10. ']int' → logprob: -15.250689506530762

Token 32: ',' (ID: 11)
  Prédit: ','
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ',' → logprob: -0.32134565711021423
    2. ',input' → logprob: -1.3213456869125366
    3. '(input' → logprob: -4.946345806121826
    4. '(' → logprob: -7.071345806121826
    5. 'input' → logprob: -10.321345329284668
    6. ' ,' → logprob: -10.446345329284668
    7. '(),' → logprob: -11.571345329284668
    8. '),' → logprob: -12.321345329284668
    9. ',(' → logprob: -12.321345329284668
    10. '`,' → logprob: -13.196345329284668

Token 33: ' input' (ID: 3422)
  Prédit: 'input'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'input' → logprob: -0.014167741872370243
    2. ' input' → logprob: -4.264167785644531
    3. '(input' → logprob: -13.014167785644531
    4. ',input' → logprob: -14.639167785644531
    5. '	input' → logprob: -14.889167785644531
    6. '<input' → logprob: -15.014167785644531
    7. ' ' → logprob: -15.014167785644531
    8. '=input' → logprob: -15.139167785644531
    9. ')' → logprob: -15.639167785644531
    10. '   ' → logprob: -16.88916778564453

Token 34: '().' (ID: 1454)
  Prédit: '().'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '().' → logprob: -0.000241085872403346
    2. '()' → logprob: -8.37524127960205
    3. '.' → logprob: -12.25024127960205
    4. ' ().' → logprob: -13.00024127960205
    5. '(' → logprob: -13.50024127960205
    6. '   ' → logprob: -14.00024127960205
    7. ' ' → logprob: -15.62524127960205
    8. '()))' → logprob: -15.75024127960205
    9. '().__' → logprob: -16.000240325927734
    10. '()).' → logprob: -16.000240325927734

Token 35: 'split' (ID: 13627)
  Prédit: 'split'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'split' → logprob: -2.248469718324486e-05
    2. 'strip' → logprob: -10.750022888183594
    3. ' split' → logprob: -14.375022888183594
    4. 'rstrip' → logprob: -15.000022888183594
    5. 'spl' → logprob: -16.500022888183594
    6. ')' → logprob: -18.250022888183594
    7. 'plit' → logprob: -18.625022888183594
    8. 'read' → logprob: -18.875022888183594
    9. '(split' → logprob: -19.000022888183594
    10. '_split' → logprob: -19.750022888183594

Token 36: '()))

' (ID: 125972)
  Prédit: '()))'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '()))' → logprob: -0.06958522647619247
    2. '))' → logprob: -2.8195853233337402
    3. '())' → logprob: -5.19458532333374
    4. '()' → logprob: -6.31958532333374
    5. ')' → logprob: -8.569584846496582
    6. '(' → logprob: -10.444584846496582
    7. '()))
' → logprob: -12.194584846496582
    8. '())))' → logprob: -12.194584846496582
    9. '()));' → logprob: -12.319584846496582
    10. ')))' → logprob: -13.194584846496582

Token 37: 'def' (ID: 1314)
  Prédit: 'def'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'def' → logprob: -0.24360492825508118
    2. 'd' → logprob: -1.9936048984527588
    3. 'n' → logprob: -2.868604898452759
    4. '#' → logprob: -5.118605136871338
    5. '\' → logprob: -5.118605136871338
    6. '```' → logprob: -5.368605136871338
    7. '
' → logprob: -5.618605136871338
    8. '\n' → logprob: -7.243605136871338
    9. 'a' → logprob: -7.618605136871338
    10. '' → logprob: -7.868605136871338

Token 38: ' add' (ID: 1147)
  Prédit: ' main'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' main' → logprob: -0.28127938508987427
    2. ' solve' → logprob: -1.5312793254852295
    3. 'main' → logprob: -4.281279563903809
    4. 'solve' → logprob: -4.656279563903809
    5. ' read' → logprob: -6.156279563903809
    6. ' count' → logprob: -7.031279563903809
    7. ' process' → logprob: -7.531279563903809
    8. '_main' → logprob: -7.531279563903809
    9. ' is' → logprob: -7.781279563903809
    10. ' calculate' → logprob: -8.656279563903809

Token 39: '_unique' (ID: 51840)
  Prédit: '_'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '_' → logprob: -0.027529902756214142
    2. '(' → logprob: -4.027529716491699
    3. '_(' → logprob: -6.152529716491699
    4. '(_' → logprob: -6.402529716491699
    5. '_element' → logprob: -6.902529716491699
    6. '(_)' → logprob: -7.027529716491699
    7. '_parent' → logprob: -7.277529716491699
    8. '_to' → logprob: -7.402529716491699
    9. '_)' → logprob: -7.527529716491699
    10. ' _' → logprob: -7.777529716491699

Token 40: '(h' (ID: 8120)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '(' → logprob: -0.045014865696430206
    2. '(_' → logprob: -3.7950148582458496
    3. '_' → logprob: -4.79501485824585
    4. '_element' → logprob: -5.29501485824585
    5. '_parent' → logprob: -5.92001485824585
    6. '_(' → logprob: -6.42001485824585
    7. '(_)' → logprob: -7.04501485824585
    8. '_item' → logprob: -7.17001485824585
    9. '_user' → logprob: -7.92001485824585
    10. '_elements' → logprob: -8.545015335083008

Token 41: 'ave' (ID: 577)
  Prédit: 'ash'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'ash' → logprob: -0.0012048733187839389
    2. 'e' → logprob: -7.376204967498779
    3. 'ashes' → logprob: -9.001204490661621
    4. 'a' → logprob: -9.376204490661621
    5. 'as' → logprob: -9.501204490661621
    6. 'ashed' → logprob: -9.626204490661621
    7. ')' → logprob: -9.876204490661621
    8. 'asher' → logprob: -9.876204490661621
    9. 'andler' → logprob: -10.501204490661621
    10. 'ashing' → logprob: -11.001204490661621

Token 42: ',' (ID: 11)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')' → logprob: -0.085414357483387
    2. '_' → logprob: -3.460414409637451
    3. ',' → logprob: -4.585414409637451
    4. '_)' → logprob: -4.710414409637451
    5. '):' → logprob: -4.835414409637451
    6. ')_' → logprob: -4.835414409637451
    7. 'd' → logprob: -5.460414409637451
    8. 's' → logprob: -6.210414409637451
    9. '_,' → logprob: -6.585414409637451
    10. '_d' → logprob: -6.710414409637451

Token 43: ' value' (ID: 1432)
  Prédit: ' new'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' new' → logprob: -1.0474696159362793
    2. 'new' → logprob: -1.5474696159362793
    3. 'value' → logprob: -2.6724696159362793
    4. ' add' → logprob: -3.1724696159362793
    5. 'add' → logprob: -3.1724696159362793
    6. ' value' → logprob: -3.1724696159362793
    7. 'item' → logprob: -3.4224696159362793
    8. ' val' → logprob: -3.5474696159362793
    9. 'need' → logprob: -3.7974696159362793
    10. ' want' → logprob: -4.047469615936279

Token 44: '):
' (ID: 1883)
  Prédit: '):'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '):' → logprob: -0.7055842280387878
    2. ',' → logprob: -1.2055842876434326
    3. ')' → logprob: -1.5805842876434326
    4. '):
' → logprob: -8.955584526062012
    5. ')):' → logprob: -9.455584526062012
    6. ' ' → logprob: -9.580584526062012
    7. '))' → logprob: -9.580584526062012
    8. 's' → logprob: -9.705584526062012
    9. '_' → logprob: -9.830584526062012
    10. '   ' → logprob: -9.955584526062012

Token 45: '   ' (ID: 271)
  Prédit: '):'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '):' → logprob: -0.9641841053962708
    2. '   ' → logprob: -1.214184045791626
    3. ':' → logprob: -1.589184045791626
    4. ',' → logprob: -2.464184045791626
    5. '(h' → logprob: -4.839184284210205
    6. '(' → logprob: -4.839184284210205
    7. ')' → logprob: -4.964184284210205
    8. '):
' → logprob: -6.214184284210205
    9. '    ' → logprob: -7.214184284210205
    10. '```' → logprob: -7.214184284210205

Token 46: ' if' (ID: 538)
  Prédit: ' if'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' if' → logprob: -0.155250683426857
    2. '   ' → logprob: -2.0302507877349854
    3. 'if' (adapté à ' if') → logprob: -4.655250549316406
    4. '    ' → logprob: -6.280250549316406
    5. '```' → logprob: -7.280250549316406
    6. '    
' → logprob: -9.280250549316406
    7. ' ```' → logprob: -9.905250549316406
    8. ' ' → logprob: -9.905250549316406
    9. ' None' → logprob: -10.780250549316406
    10. '``' → logprob: -10.905250549316406

Token 47: ' value' (ID: 1432)
  Prédit: ' value'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' value' → logprob: -0.0036254855804145336
    2. 'value' → logprob: -5.628625392913818
    3. ' not' → logprob: -10.628625869750977
    4. ' ' → logprob: -15.003625869750977
    5. 'not' → logprob: -15.003625869750977
    6. '	value' → logprob: -15.628625869750977
    7. '(value' → logprob: -15.878625869750977
    8. '"value' → logprob: -16.253625869750977
    9. ' ' → logprob: -16.378625869750977
    10. ''value' → logprob: -17.878625869750977

Token 48: ' not' (ID: 625)
  Prédit: ' not'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' not' → logprob: -0.004687987733632326
    2. 'not' → logprob: -5.379687786102295
    3. ' in' → logprob: -10.004688262939453
    4. ')' → logprob: -11.629688262939453
    5. ' ' → logprob: -12.504688262939453
    6. '	not' → logprob: -13.004688262939453
    7. '_' → logprob: -13.254688262939453
    8. 'in' → logprob: -13.254688262939453
    9. ' no' → logprob: -13.754688262939453
    10. '[' → logprob: -14.129688262939453

Token 49: ' in' (ID: 306)
  Prédit: ' in'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' in' → logprob: -0.05579443275928497
    2. 'in' → logprob: -2.9307944774627686
    3. ' ' → logprob: -8.305794715881348
    4. '<|end|>' → logprob: -8.305794715881348
    5. ' have' → logprob: -9.680794715881348
    6. ')' → logprob: -9.805794715881348
    7. '.' → logprob: -9.805794715881348
    8. '<|end|>' → logprob: -9.930794715881348
    9. '    ' → logprob: -10.055794715881348
    10. '  ' → logprob: -10.930794715881348

Token 50: ' have' (ID: 679)
  Prédit: 'have'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'have' → logprob: -0.6326376795768738
    2. ' have' → logprob: -0.7576376795768738
    3. ' ' → logprob: -11.257637977600098
    4. '   ' → logprob: -11.757637977600098
    5. 'h' → logprob: -13.257637977600098
    6. 'haven' → logprob: -13.507637977600098
    7. ' set' → logprob: -13.570137977600098
    8. '.have' → logprob: -13.632637977600098
    9. 'hav' → logprob: -13.695137977600098
    10. '_have' → logprob: -14.007637977600098

Token 51: ':
' (ID: 734)
  Prédit: ':'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ':' → logprob: -0.001180704333819449
    2. ' :' → logprob: -7.376180648803711
    3. ':
' → logprob: -8.001180648803711
    4. '):' → logprob: -9.251180648803711
    5. '   ' → logprob: -9.626180648803711
    6. '.' → logprob: -11.126180648803711
    7. '<|end|>' → logprob: -11.876180648803711
    8. ',' → logprob: -12.251180648803711
    9. ')' → logprob: -12.876180648803711
    10. '    ' → logprob: -13.001180648803711

Token 52: '       ' (ID: 309)
  Prédit: '       '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '       ' → logprob: -0.0047170608304440975
    2. '   ' → logprob: -5.629716873168945
    3. ':' → logprob: -7.129716873168945
    4. ':
' → logprob: -9.754716873168945
    5. '	   ' → logprob: -9.879716873168945
    6. '.' → logprob: -10.004716873168945
    7. ',' → logprob: -10.379716873168945
    8. '           ' → logprob: -11.129716873168945
    9. 'add' → logprob: -11.254716873168945
    10. '      ' → logprob: -11.254716873168945

Token 53: ' have' (ID: 679)
  Prédit: ' have'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' have' → logprob: -0.18338510394096375
    2. 'have' (adapté à ' have') → logprob: -1.9333851337432861
    3. '       ' → logprob: -4.183384895324707
    4. '   ' → logprob: -5.308384895324707
    5. '           ' → logprob: -5.933384895324707
    6. ' ' → logprob: -11.308384895324707
    7. ' has' → logprob: -11.433384895324707
    8. '_have' → logprob: -11.933384895324707
    9. '  ' → logprob: -13.308384895324707
    10. '	h' → logprob: -13.308384895324707

Token 54: '.append' (ID: 3709)
  Prédit: '.add'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '.add' → logprob: -0.0487346388399601
    2. '.' → logprob: -3.048734664916992
    3. '.append' → logprob: -9.048734664916992
    4. 'add' → logprob: -11.423734664916992
    5. ' .' → logprob: -11.423734664916992
    6. '   ' → logprob: -12.423734664916992
    7. ' add' → logprob: -12.673734664916992
    8. '.Add' → logprob: -15.923734664916992
    9. ')add' → logprob: -16.298734664916992
    10. '.setdefault' → logprob: -16.548734664916992

Token 55: '(value' (ID: 6333)
  Prédit: '(value'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(value' → logprob: -0.16022484004497528
    2. '(' → logprob: -1.9102247953414917
    3. '(
' → logprob: -15.285224914550781
    4. ' (' → logprob: -15.910224914550781
    5. '('' → logprob: -17.03522491455078
    6. '(

' → logprob: -17.28522491455078
    7. '(valor' → logprob: -17.28522491455078
    8. '("("' → logprob: -17.41022491455078
    9. '()' → logprob: -17.53522491455078
    10. '((' → logprob: -17.66022491455078

Token 56: ')

' (ID: 1029)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')' → logprob: -0.0001561009994475171
    2. ')
' → logprob: -9.50015640258789
    3. '   ' → logprob: -10.12515640258789
    4. '       ' → logprob: -10.75015640258789
    5. ')return' → logprob: -11.12515640258789
    6. ' )' → logprob: -13.00015640258789
    7. '<|end|>' → logprob: -13.87515640258789
    8. '())' → logprob: -14.75015640258789
    9. '))' → logprob: -14.87515640258789
    10. ')

' → logprob: -16.12515640258789

Token 57: 'def' (ID: 1314)
  Prédit: 'def'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'def' → logprob: -0.1323358118534088
    2. '
' → logprob: -2.132335901260376
    3. '

' → logprob: -6.382335662841797
    4. '<|end|>' → logprob: -6.757335662841797
    5. '\' → logprob: -7.382335662841797
    6. '_' → logprob: -7.632335662841797
    7. '\n' → logprob: -8.007335662841797
    8. '```' → logprob: -8.632335662841797
    9. '#' → logprob: -8.757335662841797
    10. ' def' → logprob: -9.382335662841797

Token 58: ' process' (ID: 2273)
  Prédit: ' main'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' main' → logprob: -1.1333495378494263
    2. ' add' → logprob: -1.8833495378494263
    3. ' remove' → logprob: -2.0083494186401367
    4. ' get' → logprob: -2.8833494186401367
    5. ' count' → logprob: -3.1333494186401367
    6. ' find' → logprob: -3.2583494186401367
    7. ' process' → logprob: -3.5083494186401367
    8. ' solve' → logprob: -3.6333494186401367
    9. ' unique' → logprob: -3.8833494186401367
    10. ' is' → logprob: -4.008349418640137

Token 59: '_k' (ID: 11637)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '(' → logprob: -0.31526055932044983
    2. '_' → logprob: -1.8152605295181274
    3. '_data' → logprob: -3.690260648727417
    4. '_(' → logprob: -4.190260410308838
    5. '_input' → logprob: -4.440260410308838
    6. '(h' → logprob: -4.690260410308838
    7. '_items' → logprob: -5.315260410308838
    8. '_line' → logprob: -5.440260410308838
    9. '_values' → logprob: -5.565260410308838
    10. '_list' → logprob: -5.565260410308838

Token 60: '_times' (ID: 53425)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '(' → logprob: -0.6058618426322937
    2. '()' → logprob: -1.2308619022369385
    3. '():' → logprob: -2.6058619022369385
    4. '_' → logprob: -3.3558619022369385
    5. '(k' → logprob: -3.3558619022369385
    6. '_values' → logprob: -5.230861663818359
    7. '(_' → logprob: -5.605861663818359
    8. '(n' → logprob: -6.105861663818359
    9. '(i' → logprob: -6.105861663818359
    10. '_(' → logprob: -7.105861663818359

Token 61: '(k' (ID: 12125)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(' → logprob: -0.04765089973807335
    2. '(k' → logprob: -3.2976508140563965
    3. '():' → logprob: -5.4226508140563965
    4. '()' → logprob: -5.5476508140563965
    5. '(n' → logprob: -7.2976508140563965
    6. '(def' → logprob: -9.422651290893555
    7. '_' → logprob: -9.797651290893555
    8. '(_' → logprob: -10.172651290893555
    9. '(K' → logprob: -10.172651290893555
    10. '```' → logprob: -10.297651290893555

Token 62: ',' (ID: 11)
  Prédit: '):'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '):' → logprob: -0.05255735665559769
    2. ',' → logprob: -3.1775574684143066
    3. ')' → logprob: -4.677557468414307
    4. '(' → logprob: -9.427556991577148
    5. ' ):' → logprob: -10.302556991577148
    6. '(k' → logprob: -10.927556991577148
    7. '   ' → logprob: -11.302556991577148
    8. '):
' → logprob: -11.677556991577148
    9. '=' → logprob: -11.802556991577148
    10. ':' → logprob: -11.802556991577148

Token 63: ' have' (ID: 679)
  Prédit: 'have'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'have' → logprob: -1.0430150032043457
    2. ' have' → logprob: -1.4180150032043457
    3. ' func' → logprob: -1.6680150032043457
    4. 'func' → logprob: -2.0430150032043457
    5. 'process' → logprob: -3.5430150032043457
    6. ' process' → logprob: -3.6680150032043457
    7. ' action' → logprob: -5.043015003204346
    8. ' data' → logprob: -5.418015003204346
    9. 'data' → logprob: -5.793015003204346
    10. 'action' → logprob: -6.293015003204346

Token 64: '):
' (ID: 1883)
  Prédit: ','
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ',' → logprob: -0.043126046657562256
    2. '):' → logprob: -3.168126106262207
    3. ')' → logprob: -9.668126106262207
    4. '):
' → logprob: -10.668126106262207
    5. ' ,' → logprob: -11.168126106262207
    6. ' ):' → logprob: -12.293126106262207
    7. ',value' → logprob: -12.418126106262207
    8. '   ' → logprob: -12.668126106262207
    9. ':' → logprob: -12.793126106262207
    10. '=' → logprob: -13.918126106262207

Token 65: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.004080301150679588
    2. '\n' → logprob: -6.879080295562744
    3. '```' → logprob: -7.254080295562744
    4. '    
' → logprob: -7.254080295562744
    5. '<|end|>' → logprob: -7.879080295562744
    6. '
' → logprob: -8.129080772399902
    7. '    ' → logprob: -8.254080772399902
    8. '       ' → logprob: -8.504080772399902
    9. ' for' → logprob: -8.504080772399902
    10. ':' → logprob: -9.129080772399902

Token 66: ' for' (ID: 395)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.4119033217430115
    2. 'for' (adapté à ' for') → logprob: -1.6619033813476562
    3. ' for' → logprob: -1.9119033813476562
    4. '```' → logprob: -10.661903381347656
    5. '	for' → logprob: -12.161903381347656
    6. 'while' → logprob: -12.911903381347656
    7. ' while' → logprob: -12.911903381347656
    8. '    
' → logprob: -14.661903381347656
    9. '``' → logprob: -15.161903381347656
    10. ' ' → logprob: -15.411903381347656

Token 67: ' _' (ID: 1175)
  Prédit: ' _'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' _' → logprob: -0.05033256113529205
    2. '_' → logprob: -3.300332546234131
    3. ' i' → logprob: -4.550332546234131
    4. ' ' → logprob: -6.550332546234131
    5. ' in' → logprob: -8.800333023071289
    6. ' range' → logprob: -10.300333023071289
    7. ' k' → logprob: -10.425333023071289
    8. 'i' → logprob: -12.425333023071289
    9. '_i' → logprob: -14.175333023071289
    10. ' value' → logprob: -14.300333023071289

Token 68: ' in' (ID: 306)
  Prédit: ' in'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' in' → logprob: -0.031195316463708878
    2. 'in' → logprob: -3.5311954021453857
    3. ' ' → logprob: -6.781195163726807
    4. '_' → logprob: -8.906195640563965
    5. '  ' → logprob: -9.906195640563965
    6. '	in' → logprob: -9.906195640563965
    7. ' _' → logprob: -10.406195640563965
    8. '   ' → logprob: -11.531195640563965
    9. ' k' → logprob: -11.906195640563965
    10. ' i' → logprob: -12.156195640563965

Token 69: ' range' (ID: 3352)
  Prédit: 'range'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'range' → logprob: -0.00019221604452468455
    2. ' range' → logprob: -8.750192642211914
    3. '(range' → logprob: -11.125192642211914
    4. 'ange' → logprob: -11.875192642211914
    5. 'k' → logprob: -12.000192642211914
    6. '   ' → logprob: -13.500192642211914
    7. '	range' → logprob: -13.625192642211914
    8. 'have' → logprob: -14.750192642211914
    9. 'x' → logprob: -14.875192642211914
    10. '```' → logprob: -15.000192642211914

Token 70: '(k' (ID: 12125)
  Prédit: '(k'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(k' → logprob: -0.10718312859535217
    2. ' k' → logprob: -2.4821832180023193
    3. '(' → logprob: -4.35718297958374
    4. 'k' → logprob: -5.35718297958374
    5. ' (' → logprob: -8.607183456420898
    6. 'range' → logprob: -9.107183456420898
    7. ' range' → logprob: -9.357183456420898
    8. ' in' → logprob: -9.482183456420898
    9. ' ' → logprob: -9.857183456420898
    10. '(range' → logprob: -11.482183456420898

Token 71: '):
' (ID: 1883)
  Prédit: '):'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '):' → logprob: -0.001399760483764112
    2. ' ):' → logprob: -7.626399993896484
    3. ':' → logprob: -7.751399993896484
    4. ')' → logprob: -8.001399993896484
    5. '):
' → logprob: -9.251399993896484
    6. '   ' → logprob: -10.626399993896484
    7. ',' → logprob: -11.001399993896484
    8. ' )' → logprob: -12.251399993896484
    9. '():' → logprob: -13.376399993896484
    10. ' ' → logprob: -14.251399993896484

Token 72: '       ' (ID: 309)
  Prédit: '       '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '       ' → logprob: -0.0012724967673420906
    2. '<|end|>' → logprob: -7.001272678375244
    3. 'input' → logprob: -9.251272201538086
    4. '   ' → logprob: -9.876272201538086
    5. '        
' → logprob: -10.126272201538086
    6. ',' → logprob: -10.126272201538086
    7. ' input' → logprob: -10.501272201538086
    8. ' ' → logprob: -11.126272201538086
    9. 'value' → logprob: -11.251272201538086
    10. '<|end|>' → logprob: -11.251272201538086

Token 73: ' process' (ID: 2273)
  Prédit: 'value'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'value' → logprob: -0.985224187374115
    2. 'v' → logprob: -1.9852242469787598
    3. ' value' → logprob: -2.1102242469787598
    4. '   ' → logprob: -2.4852242469787598
    5. 'a' → logprob: -2.8602242469787598
    6. 'x' → logprob: -2.9852242469787598
    7. ' v' → logprob: -3.3602242469787598
    8. 'val' → logprob: -3.4852242469787598
    9. ' val' → logprob: -3.6102242469787598
    10. 'n' → logprob: -3.9852242469787598

Token 74: '_one' (ID: 26979)
  Prédit: '(h'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '(h' → logprob: -0.7674412727355957
    2. '()' → logprob: -2.8924412727355957
    3. '_k' → logprob: -2.8924412727355957
    4. '(' → logprob: -3.2674412727355957
    5. 'ed' → logprob: -3.2674412727355957
    6. '_value' → logprob: -3.2674412727355957
    7. '_input' → logprob: -3.3924412727355957
    8. '_' → logprob: -3.3924412727355957
    9. 'value' → logprob: -3.5174412727355957
    10. ')' → logprob: -3.6424412727355957

Token 75: '_d' (ID: 1565)
  Prédit: '(h'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '(h' → logprob: -0.051154762506484985
    2. '_value' → logprob: -4.426154613494873
    3. '()' → logprob: -4.801154613494873
    4. '_' → logprob: -4.801154613494873
    5. '_line' → logprob: -5.051154613494873
    6. '_command' → logprob: -5.801154613494873
    7. '_step' → logprob: -5.926154613494873
    8. '_item' → logprob: -5.926154613494873
    9. '(' → logprob: -6.801154613494873
    10. '_call' → logprob: -6.801154613494873

Token 76: '(h' (ID: 8120)
  Prédit: '()'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '()' → logprob: -0.0009882692247629166
    2. '(' → logprob: -9.250988006591797
    3. '())' → logprob: -9.250988006591797
    4. '_value' → logprob: -9.375988006591797
    5. 'read' → logprob: -9.750988006591797
    6. '(),' → logprob: -10.000988006591797
    7. '_' → logprob: -10.125988006591797
    8. 'one' → logprob: -10.375988006591797
    9. '(h' → logprob: -10.375988006591797
    10. '_line' → logprob: -10.500988006591797

Token 77: 'ave' (ID: 577)
  Prédit: 'ave'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'ave' → logprob: -1.8550976164988242e-05
    2. '   ' → logprob: -12.375018119812012
    3. ')' → logprob: -12.500018119812012
    4. 'av' → logprob: -12.875018119812012
    5. 'have' → logprob: -13.625018119812012
    6. '    ' → logprob: -13.750018119812012
    7. '```' → logprob: -13.875018119812012
    8. ',' → logprob: -13.875018119812012
    9. ' ave' → logprob: -14.500018119812012
    10. '  ' → logprob: -15.000018119812012

Token 78: ')

' (ID: 1029)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ')' → logprob: -0.062412966042757034
    2. ',' → logprob: -2.812412977218628
    3. ',)' → logprob: -8.187413215637207
    4. ' )' → logprob: -9.812413215637207
    5. '))' → logprob: -10.562413215637207
    6. '   ' → logprob: -11.312413215637207
    7. '<|end|>' → logprob: -11.312413215637207
    8. ')
' → logprob: -11.312413215637207
    9. '[' → logprob: -12.062413215637207
    10. ' ' → logprob: -12.312413215637207

Token 79: 'def' (ID: 1314)
  Prédit: 'def'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'def' → logprob: -0.6826227307319641
    2. '<|end|>' → logprob: -0.9326227307319641
    3. '
' → logprob: -2.5576226711273193
    4. '_' → logprob: -4.432622909545898
    5. '\' → logprob: -5.182622909545898
    6. '<|end|>' → logprob: -5.682622909545898
    7. ' def' → logprob: -6.932622909545898
    8. '```' → logprob: -8.182622909545898
    9. '

' → logprob: -8.557622909545898
    10. '\n' → logprob: -8.557622909545898

Token 80: ' process' (ID: 2273)
  Prédit: ' process'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' process' → logprob: -0.048833638429641724
    2. 'process' → logprob: -3.0488336086273193
    3. '(process' → logprob: -8.798833847045898
    4. '_process' → logprob: -10.298833847045898
    5. '	process' → logprob: -10.423833847045898
    6. 'rocess' → logprob: -11.673833847045898
    7. '_' → logprob: -12.173833847045898
    8. 'def' → logprob: -12.423833847045898
    9. ' ' → logprob: -12.798833847045898
    10. ' def' → logprob: -13.423833847045898

Token 81: '_one' (ID: 26979)
  Prédit: '_one'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_one' → logprob: -9.849109119386412e-06
    2. '_' → logprob: -12.625009536743164
    3. '_two' → logprob: -13.375009536743164
    4. '_k' → logprob: -13.375009536743164
    5. '_o' → logprob: -14.125009536743164
    6. '_a' → logprob: -14.375009536743164
    7. '_once' → logprob: -14.375009536743164
    8. '_ONE' → logprob: -14.875009536743164
    9. '_three' → logprob: -15.625009536743164
    10. 'one' → logprob: -15.750009536743164

Token 82: '_d' (ID: 1565)
  Prédit: '_d'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_d' → logprob: -0.0002448893792461604
    2. 'd' → logprob: -8.750245094299316
    3. '_a' → logprob: -10.500245094299316
    4. '_' → logprob: -10.750245094299316
    5. '_value' → logprob: -11.500245094299316
    6. '_k' → logprob: -12.000245094299316
    7. 'def' → logprob: -12.875245094299316
    8. '_b' → logprob: -13.625245094299316
    9. '_ds' → logprob: -13.625245094299316
    10. '_c' → logprob: -14.000245094299316

Token 83: '(h' (ID: 8120)
  Prédit: '(h'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(h' → logprob: -0.0009424308082088828
    2. '(' → logprob: -7.000942230224609
    3. ' (' → logprob: -10.62594223022461
    4. '(has' → logprob: -12.50094223022461
    5. '(d' → logprob: -14.37594223022461
    6. '(s' → logprob: -14.75094223022461
    7. '(a' → logprob: -15.12594223022461
    8. '(value' → logprob: -15.25094223022461
    9. '```' → logprob: -15.62594223022461
    10. ' ' → logprob: -15.87594223022461

Token 84: 'ave' (ID: 577)
  Prédit: 'ave'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'ave' → logprob: -0.000925157277379185
    2. 'have' → logprob: -7.625925064086914
    3. '(' → logprob: -8.375925064086914
    4. ')' → logprob: -9.125925064086914
    5. '   ' → logprob: -10.625925064086914
    6. '```' → logprob: -11.125925064086914
    7. '):' → logprob: -11.625925064086914
    8. '):
' → logprob: -11.750925064086914
    9. '):

' → logprob: -12.125925064086914
    10. 'AVE' → logprob: -12.750925064086914

Token 85: '):
' (ID: 1883)
  Prédit: '):'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '):' → logprob: -0.2521357834339142
    2. ',' → logprob: -1.5021357536315918
    3. ')' → logprob: -9.12713623046875
    4. '   ' → logprob: -9.87713623046875
    5. ' ):' → logprob: -10.62713623046875
    6. '):
' → logprob: -11.87713623046875
    7. ':' → logprob: -12.50213623046875
    8. ' ,' → logprob: -12.62713623046875
    9. ',d' → logprob: -13.00213623046875
    10. ',value' → logprob: -13.62713623046875

Token 86: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.06909461319446564
    2. ' d' → logprob: -3.319094657897949
    3. ' value' → logprob: -3.819094657897949
    4. 'd' → logprob: -5.694094657897949
    5. ' line' → logprob: -6.319094657897949
    6. ' n' → logprob: -7.319094657897949
    7. ' input' → logprob: -7.569094657897949
    8. 'value' → logprob: -7.569094657897949
    9. ' new' → logprob: -8.06909465789795
    10. ' val' → logprob: -8.06909465789795

Token 87: ' d' (ID: 272)
  Prédit: 'd'
  Correct (stricte): False
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'd' (adapté à ' d') → logprob: -0.25240275263786316
    2. 'value' → logprob: -2.1274027824401855
    3. 'x' → logprob: -2.8774027824401855
    4. '   ' → logprob: -4.0024027824401855
    5. ' d' → logprob: -4.7524027824401855
    6. 'v' → logprob: -5.3774027824401855
    7. ' value' → logprob: -5.5024027824401855
    8. 'val' → logprob: -5.6274027824401855
    9. ' x' → logprob: -6.6274027824401855
    10. 'new' → logprob: -6.6274027824401855

Token 88: ' =' (ID: 314)
  Prédit: ' ='
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' =' → logprob: -0.008757920935750008
    2. '=' → logprob: -4.758758068084717
    3. ',' → logprob: -10.133757591247559
    4. '=int' → logprob: -10.508757591247559
    5. '=input' → logprob: -10.633757591247559
    6. 'ef' → logprob: -10.758757591247559
    7. ' ' → logprob: -11.633757591247559
    8. ')' → logprob: -12.883757591247559
    9. '   ' → logprob: -13.008757591247559
    10. 'etails' → logprob: -13.258757591247559

Token 89: ' read' (ID: 1729)
  Prédit: 'read'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'read' → logprob: -0.8150368928909302
    2. 'int' → logprob: -0.9400368928909302
    3. ' read' → logprob: -2.3150367736816406
    4. ' int' → logprob: -2.6900367736816406
    5. ' ' → logprob: -9.69003677368164
    6. '  ' → logprob: -10.69003677368164
    7. '   ' → logprob: -11.31503677368164
    8. '	read' → logprob: -12.19003677368164
    9. '<int' → logprob: -12.31503677368164
    10. 'input' → logprob: -12.44003677368164

Token 90: '_d' (ID: 1565)
  Prédit: '_'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_' → logprob: -0.6497712135314941
    2. '_d' → logprob: -0.7747712135314941
    3. '_a' → logprob: -4.149771213531494
    4. '(' → logprob: -7.524771213531494
    5. '()' → logprob: -7.899771213531494
    6. ' _' → logprob: -9.399770736694336
    7. 'a' → logprob: -10.274770736694336
    8. '_s' → logprob: -10.399770736694336
    9. '```' → logprob: -10.524770736694336
    10. ')' → logprob: -10.649770736694336

Token 91: '()
' (ID: 1234)
  Prédit: '()'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '()' → logprob: -0.0001242772996192798
    2. '()
' → logprob: -9.125123977661133
    3. '())' → logprob: -11.500123977661133
    4. '()

' → logprob: -13.875123977661133
    5. '()]' → logprob: -14.375123977661133
    6. '()`' → logprob: -14.375123977661133
    7. ')' → logprob: -14.875123977661133
    8. ' ()' → logprob: -14.875123977661133
    9. '()>' → logprob: -14.875123977661133
    10. '()<' → logprob: -15.000123977661133

Token 92: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.030903637409210205
    2. 'a' → logprob: -4.1559038162231445
    3. 'for' → logprob: -5.2809038162231445
    4. 'if' → logprob: -5.5309038162231445
    5. 'value' → logprob: -6.4059038162231445
    6. ' for' → logprob: -7.0309038162231445
    7. 'values' → logprob: -7.2809038162231445
    8. ' if' → logprob: -7.4059038162231445
    9. 'def' → logprob: -8.405903816223145
    10. 'new' → logprob: -8.405903816223145

Token 93: ' a' (ID: 261)
  Prédit: 'a'
  Correct (stricte): False
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'a' (adapté à ' a') → logprob: -0.2901686728000641
    2. 'for' → logprob: -2.2901687622070312
    3. 'if' → logprob: -2.5401687622070312
    4. '   ' → logprob: -4.165168762207031
    5. 'values' → logprob: -4.290168762207031
    6. ' a' → logprob: -4.540168762207031
    7. 'value' → logprob: -4.915168762207031
    8. ' for' → logprob: -5.040168762207031
    9. ' if' → logprob: -5.665168762207031
    10. 'new' → logprob: -5.790168762207031

Token 94: ' =' (ID: 314)
  Prédit: ' ='
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' =' → logprob: -0.3136522173881531
    2. '=' → logprob: -1.3136522769927979
    3. '_' → logprob: -8.688652038574219
    4. '_list' → logprob: -9.188652038574219
    5. '_values' → logprob: -9.688652038574219
    6. ' ' → logprob: -11.313652038574219
    7. 'rray' → logprob: -11.938652038574219
    8. '=[]' → logprob: -12.063652038574219
    9. 's' → logprob: -12.313652038574219
    10. '_=' → logprob: -12.563652038574219

Token 95: ' read' (ID: 1729)
  Prédit: ' read'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' read' → logprob: -0.1128329485654831
    2. 'read' → logprob: -2.237833023071289
    3. '	read' → logprob: -11.987833023071289
    4. ' ' → logprob: -13.737833023071289
    5. '(read' → logprob: -13.862833023071289
    6. ' list' → logprob: -14.487833023071289
    7. '[]' → logprob: -14.487833023071289
    8. '  ' → logprob: -15.237833023071289
    9. ' []' → logprob: -15.237833023071289
    10. 'list' → logprob: -15.987833023071289

Token 96: '_a' (ID: 10852)
  Prédit: '_a'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_a' → logprob: -5.5577775128767826e-06
    2. '_' → logprob: -12.125005722045898
    3. 'a' → logprob: -16.1250057220459
    4. '_d' → logprob: -18.1250057220459
    5. '()' → logprob: -18.6250057220459
    6. '(a' → logprob: -19.2500057220459
    7. '_b' → logprob: -21.0000057220459
    8. '(' → logprob: -21.2500057220459
    9. '_(' → logprob: -21.2500057220459
    10. '_)' → logprob: -22.1250057220459

Token 97: '()
' (ID: 1234)
  Prédit: '()'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '()' → logprob: -0.00043448375072330236
    2. '()
' → logprob: -7.750434398651123
    3. ' ()' → logprob: -13.625434875488281
    4. '())' → logprob: -14.250434875488281
    5. '()

' → logprob: -14.500434875488281
    6. '()
' → logprob: -14.625434875488281
    7. '(' → logprob: -14.750434875488281
    8. ')' → logprob: -15.375434875488281
    9. '()]' → logprob: -16.25043487548828
    10. '()`' → logprob: -16.50043487548828

Token 98: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.009230272844433784
    2. ' for' → logprob: -5.509230136871338
    3. '<|end|>' → logprob: -6.134230136871338
    4. '
' → logprob: -6.259230136871338
    5. ' if' → logprob: -7.384230136871338
    6. 'for' → logprob: -8.634230613708496
    7. 'def' → logprob: -9.384230613708496
    8. '    
' → logprob: -10.134230613708496
    9. 'if' → logprob: -11.134230613708496
    10. '<|end|>' → logprob: -11.259230613708496

Token 99: ' process' (ID: 2273)
  Prédit: ' for'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' for' → logprob: -0.6680436730384827
    2. 'for' → logprob: -0.9180436730384827
    3. '   ' → logprob: -3.043043613433838
    4. ' if' → logprob: -3.668043613433838
    5. 'if' → logprob: -4.418043613433838
    6. 'a' → logprob: -7.793043613433838
    7. ' a' → logprob: -8.168044090270996
    8. 'add' → logprob: -8.293044090270996
    9. ' have' → logprob: -8.668044090270996
    10. ' add' → logprob: -8.793044090270996

Token 100: '_a' (ID: 10852)
  Prédit: '_one'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_one' → logprob: -0.023255497217178345
    2. '_k' → logprob: -4.523255348205566
    3. '_a' → logprob: -5.023255348205566
    4. '_unique' → logprob: -5.898255348205566
    5. '_d' → logprob: -7.523255348205566
    6. '_value' → logprob: -7.648255348205566
    7. '_' → logprob: -8.398255348205566
    8. '_list' → logprob: -8.398255348205566
    9. '_two' → logprob: -8.898255348205566
    10. '_values' → logprob: -8.898255348205566

Token 101: '_values' (ID: 20393)
  Prédit: '(h'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '(h' → logprob: -0.025530504062771797
    2. '(a' → logprob: -4.9005303382873535
    3. '(' → logprob: -5.1505303382873535
    4. '_(' → logprob: -5.7755303382873535
    5. '(d' → logprob: -6.0255303382873535
    6. '_' → logprob: -6.2755303382873535
    7. ' (' → logprob: -6.6505303382873535
    8. 's' → logprob: -6.6505303382873535
    9. '(len' → logprob: -8.150530815124512
    10. '_for' → logprob: -8.900530815124512

Token 102: '(d' (ID: 2572)
  Prédit: '(h'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(h' → logprob: -0.018456721678376198
    2. '(' → logprob: -4.018456935882568
    3. '(a' → logprob: -8.39345645904541
    4. ' (' → logprob: -9.89345645904541
    5. '   ' → logprob: -11.01845645904541
    6. '(d' → logprob: -12.64345645904541
    7. '(
' → logprob: -12.64345645904541
    8. '(has' → logprob: -14.01845645904541
    9. '=' → logprob: -14.26845645904541
    10. 'for' → logprob: -14.39345645904541

Token 103: ',' (ID: 11)
  Prédit: ','
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ',' → logprob: -0.0009791015181690454
    2. ',h' → logprob: -7.250978946685791
    3. ' ,' → logprob: -8.37597942352295
    4. '(h' → logprob: -11.50097942352295
    5. '   ' → logprob: -11.75097942352295
    6. ',a' → logprob: -11.87597942352295
    7. 'a' → logprob: -12.62597942352295
    8. '[' → logprob: -12.87597942352295
    9. ')' → logprob: -13.37597942352295
    10. ' ' → logprob: -14.00097942352295

Token 104: ' a' (ID: 261)
  Prédit: ' have'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' have' → logprob: -0.1455436795949936
    2. 'have' → logprob: -2.0205435752868652
    3. ' a' → logprob: -6.020543575286865
    4. 'a' → logprob: -7.895543575286865
    5. ' ' → logprob: -10.395544052124023
    6. ' d' → logprob: -11.020544052124023
    7. ' has' → logprob: -12.895544052124023
    8. ' value' → logprob: -13.270544052124023
    9. '   ' → logprob: -13.520544052124023
    10. ' hav' → logprob: -13.708044052124023

Token 105: ',' (ID: 11)
  Prédit: ','
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ',' → logprob: -9.412610233994201e-05
    2. ' ,' → logprob: -9.625094413757324
    3. ',h' → logprob: -10.875094413757324
    4. '   ' → logprob: -12.000094413757324
    5. ')' → logprob: -13.000094413757324
    6. '[' → logprob: -15.375094413757324
    7. ' ' → logprob: -16.500093460083008
    8. '  ' → logprob: -16.625093460083008
    9. ',d' → logprob: -17.000093460083008
    10. '    ' → logprob: -17.875093460083008

Token 106: ' have' (ID: 679)
  Prédit: ' have'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' have' → logprob: -0.14269210398197174
    2. 'have' → logprob: -2.0176920890808105
    3. ' ' → logprob: -11.267692565917969
    4. '   ' → logprob: -13.517692565917969
    5. '_have' → logprob: -14.517692565917969
    6. ' hav' → logprob: -15.017692565917969
    7. '-have' → logprob: -15.392692565917969
    8. '    ' → logprob: -15.392692565917969
    9. '  ' → logprob: -15.517692565917969
    10. 'hav' → logprob: -15.767692565917969

Token 107: ')

' (ID: 1029)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')' → logprob: -8.180258191714529e-06
    2. ')
' → logprob: -12.750008583068848
    3. '   ' → logprob: -13.000008583068848
    4. ',' → logprob: -13.125008583068848
    5. ' )' → logprob: -14.875008583068848
    6. ')

' → logprob: -15.625008583068848
    7. ');' → logprob: -16.00000762939453
    8. '[' → logprob: -16.37500762939453
    9. '))' → logprob: -16.50000762939453
    10. '),' → logprob: -16.62500762939453

Token 108: 'def' (ID: 1314)
  Prédit: 'def'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'def' → logprob: -0.00530645065009594
    2. '<|end|>' → logprob: -5.255306243896484
    3. '
' → logprob: -10.630306243896484
    4. ' def' → logprob: -10.880306243896484
    5. '<|end|>' → logprob: -11.630306243896484
    6. '```' → logprob: -12.130306243896484
    7. ':def' → logprob: -12.880306243896484
    8. '[' → logprob: -13.505306243896484
    9. '_' → logprob: -13.630306243896484
    10. '[]' → logprob: -13.630306243896484

Token 109: ' process' (ID: 2273)
  Prédit: ' process'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' process' → logprob: -0.006009375676512718
    2. 'process' → logprob: -5.131009578704834
    3. '_process' → logprob: -9.506009101867676
    4. '	process' → logprob: -12.756009101867676
    5. '(process' → logprob: -13.006009101867676
    6. ' add' → logprob: -14.881009101867676
    7. '_' → logprob: -15.381009101867676
    8. ' ' → logprob: -15.881009101867676
    9. 'rocess' → logprob: -15.881009101867676
    10. ' proces' → logprob: -16.381010055541992

Token 110: '_a' (ID: 10852)
  Prédit: '_a'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_a' → logprob: -0.0009563630446791649
    2. '_k' → logprob: -7.5009565353393555
    3. '_one' → logprob: -8.000956535339355
    4. '_d' → logprob: -10.375956535339355
    5. '_' → logprob: -10.500956535339355
    6. '_b' → logprob: -13.250956535339355
    7. '_s' → logprob: -13.250956535339355
    8. '_all' → logprob: -14.375956535339355
    9. '_x' → logprob: -14.625956535339355
    10. '_c' → logprob: -14.625956535339355

Token 111: '_values' (ID: 20393)
  Prédit: '_values'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_values' → logprob: -6.392202976712724e-06
    2. '_' → logprob: -12.750006675720215
    3. 'values' → logprob: -13.250006675720215
    4. '_vals' → logprob: -14.000006675720215
    5. '_value' → logprob: -14.375006675720215
    6. '_VALUES' → logprob: -16.3750057220459
    7. '_a' → logprob: -17.5000057220459
    8. ' _' → logprob: -18.2500057220459
    9. '(values' → logprob: -18.5000057220459
    10. '_s' → logprob: -18.5000057220459

Token 112: '(d' (ID: 2572)
  Prédit: '(d'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(d' → logprob: -0.00014013137842994183
    2. '(' → logprob: -8.875140190124512
    3. '(def' → logprob: -15.750140190124512
    4. ' (' → logprob: -16.250139236450195
    5. '(D' → logprob: -17.125139236450195
    6. '(
' → logprob: -17.625139236450195
    7. 'def' → logprob: -17.875139236450195
    8. '(a' → logprob: -18.000139236450195
    9. '(h' → logprob: -19.250139236450195
    10. '(de' → logprob: -19.750139236450195

Token 113: ',' (ID: 11)
  Prédit: ','
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ',' → logprob: -2.5776860184123507e-06
    2. ' ,' → logprob: -13.50000286102295
    3. ',h' → logprob: -13.75000286102295
    4. '   ' → logprob: -17.875001907348633
    5. ',
' → logprob: -18.125001907348633
    6. '‌,' → logprob: -18.250001907348633
    7. 'a' → logprob: -18.500001907348633
    8. ',a' → logprob: -18.750001907348633
    9. '，' → logprob: -19.000001907348633
    10. ' ' → logprob: -19.125001907348633

Token 114: ' a' (ID: 261)
  Prédit: ' have'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' have' → logprob: -0.889708399772644
    2. 'have' → logprob: -1.139708399772644
    3. ' a' → logprob: -1.889708399772644
    4. 'a' → logprob: -2.1397085189819336
    5. ' d' → logprob: -9.389708518981934
    6. ' ' → logprob: -9.639708518981934
    7. '   ' → logprob: -9.764708518981934
    8. ' value' → logprob: -10.014708518981934
    9. 'value' → logprob: -10.077208518981934
    10. 'd' → logprob: -10.514708518981934

Token 115: ',' (ID: 11)
  Prédit: ','
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ',' → logprob: -3.9650025428272784e-05
    2. ' ,' → logprob: -10.250040054321289
    3. ',h' → logprob: -13.125040054321289
    4. '   ' → logprob: -14.250040054321289
    5. '):' → logprob: -15.500040054321289
    6. '_,' → logprob: -16.00004005432129
    7. '),' → logprob: -16.00004005432129
    8. '[],' → logprob: -16.12504005432129
    9. 's' → logprob: -16.25004005432129
    10. '`,' → logprob: -16.37504005432129

Token 116: ' have' (ID: 679)
  Prédit: ' have'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' have' → logprob: -0.20144355297088623
    2. 'have' → logprob: -1.7014435529708862
    3. ')' → logprob: -11.701443672180176
    4. '   ' → logprob: -12.201443672180176
    5. ' ' → logprob: -12.201443672180176
    6. '_have' → logprob: -12.701443672180176
    7. '```' → logprob: -13.826443672180176
    8. '-have' → logprob: -13.951443672180176
    9. 'h' → logprob: -14.076443672180176
    10. 'hav' → logprob: -14.201443672180176

Token 117: '):
' (ID: 1883)
  Prédit: '):'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '):' → logprob: -0.0036171816755086184
    2. '):
' → logprob: -5.628617286682129
    3. '):
' → logprob: -11.878617286682129
    4. ')' → logprob: -12.753617286682129
    5. ',' → logprob: -13.003617286682129
    6. ':' → logprob: -13.253617286682129
    7. '   ' → logprob: -13.253617286682129
    8. ' ):' → logprob: -14.128617286682129
    9. '):

' → logprob: -14.753617286682129
    10. '():' → logprob: -16.128616333007812

Token 118: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.07125410437583923
    2. ' for' → logprob: -2.696254014968872
    3. 'for' → logprob: -7.321254253387451
    4. '<|end|>' → logprob: -7.446254253387451
    5. '    
' → logprob: -10.696253776550293
    6. ' if' → logprob: -11.321253776550293
    7. '
' → logprob: -11.321253776550293
    8. '    ' → logprob: -12.196253776550293
    9. '```' → logprob: -12.571253776550293
    10. ')' → logprob: -12.571253776550293

Token 119: ' for' (ID: 395)
  Prédit: 'for'
  Correct (stricte): False
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'for' (adapté à ' for') → logprob: -0.5142964124679565
    2. '   ' → logprob: -1.3892964124679565
    3. ' for' → logprob: -1.8892964124679565
    4. 'if' → logprob: -6.889296531677246
    5. ' if' → logprob: -7.764296531677246
    6. '```' → logprob: -10.014296531677246
    7. ' unique' → logprob: -10.889296531677246
    8. 'unique' → logprob: -11.139296531677246
    9. 'n' → logprob: -11.764296531677246
    10. 'count' → logprob: -11.889296531677246

Token 120: ' j' (ID: 441)
  Prédit: ' value'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' value' → logprob: -0.1534261703491211
    2. 'value' → logprob: -2.028426170349121
    3. ' val' → logprob: -4.903426170349121
    4. ' x' → logprob: -6.778426170349121
    5. 'x' → logprob: -7.278426170349121
    6. ' v' → logprob: -7.528426170349121
    7. 'val' → logprob: -7.653426170349121
    8. 'v' → logprob: -8.278426170349121
    9. '   ' → logprob: -10.278426170349121
    10. 'a' → logprob: -10.653426170349121

Token 121: ' in' (ID: 306)
  Prédit: ' in'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' in' → logprob: -0.004174917936325073
    2. 'in' → logprob: -5.504174709320068
    3. ' ' → logprob: -10.004175186157227
    4. ',' → logprob: -10.129175186157227
    5. '   ' → logprob: -12.379175186157227
    6. ' ,' → logprob: -12.879175186157227
    7. '	in' → logprob: -13.754175186157227
    8. '  ' → logprob: -14.254175186157227
    9. '_in' → logprob: -14.379175186157227
    10. '    ' → logprob: -14.629175186157227

Token 122: ' range' (ID: 3352)
  Prédit: 'a'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'a' → logprob: -0.3519785702228546
    2. ' a' → logprob: -1.8519785404205322
    3. 'range' → logprob: -2.6019785404205322
    4. ' range' → logprob: -2.7269785404205322
    5. '   ' → logprob: -8.851978302001953
    6. ' ' → logprob: -10.914478302001953
    7. 'd' → logprob: -11.726978302001953
    8. '    ' → logprob: -11.976978302001953
    9. '  ' → logprob: -11.976978302001953
    10. '	a' → logprob: -12.351978302001953

Token 123: '(d' (ID: 2572)
  Prédit: '(len'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(len' → logprob: -0.014570661820471287
    2. '(d' → logprob: -4.264570713043213
    3. '(' → logprob: -7.889570713043213
    4. 'len' → logprob: -10.514570236206055
    5. ' len' → logprob: -13.014570236206055
    6. '   ' → logprob: -13.389570236206055
    7. 'd' → logprob: -14.514570236206055
    8. ' (' → logprob: -14.639570236206055
    9. '((' → logprob: -15.639570236206055
    10. '(l' → logprob: -16.264570236206055

Token 124: '):
' (ID: 1883)
  Prédit: '):'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '):' → logprob: -0.003293686080724001
    2. '):
' → logprob: -5.753293514251709
    3. ' ):' → logprob: -9.128293991088867
    4. '   ' → logprob: -13.128293991088867
    5. '):
' → logprob: -13.128293991088867
    6. ':' → logprob: -13.378293991088867
    7. ')' → logprob: -14.878293991088867
    8. 'len' → logprob: -15.253293991088867
    9. ' ):
' → logprob: -15.378293991088867
    10. '):

' → logprob: -15.753293991088867

Token 125: '       ' (ID: 309)
  Prédit: '       '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '       ' → logprob: -0.02879122644662857
    2. ' if' → logprob: -4.028791427612305
    3. ' add' → logprob: -4.778791427612305
    4. 'if' → logprob: -7.403791427612305
    5. 'add' → logprob: -7.778791427612305
    6. '        
' → logprob: -8.153791427612305
    7. '<|end|>' → logprob: -8.403791427612305
    8. '   ' → logprob: -8.903791427612305
    9. '_add' → logprob: -9.153791427612305
    10. '
' → logprob: -9.653791427612305

Token 126: ' add' (ID: 1147)
  Prédit: 'add'
  Correct (stricte): False
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'add' (adapté à ' add') → logprob: -0.11582095921039581
    2. ' add' → logprob: -2.74082088470459
    3. 'if' → logprob: -3.74082088470459
    4. '       ' → logprob: -4.36582088470459
    5. ' if' → logprob: -5.36582088470459
    6. '   ' → logprob: -6.24082088470459
    7. 'value' → logprob: -6.61582088470459
    8. '           ' → logprob: -8.74082088470459
    9. ' value' → logprob: -8.86582088470459
    10. 'a' → logprob: -9.36582088470459

Token 127: '_unique' (ID: 51840)
  Prédit: '_unique'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_unique' → logprob: -7.584239938296378e-06
    2. '_' → logprob: -11.875007629394531
    3. 'unique' → logprob: -16.00000762939453
    4. '_uni' → logprob: -16.12500762939453
    5. 'Unique' → logprob: -16.25000762939453
    6. ' unique' → logprob: -16.75000762939453
    7. ' _' → logprob: -17.25000762939453
    8. '_(' → logprob: -17.87500762939453
    9. ' Unique' → logprob: -18.00000762939453
    10. ')' → logprob: -18.00000762939453

Token 128: '(h' (ID: 8120)
  Prédit: '(h'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(h' → logprob: -0.00020425561524461955
    2. '(' → logprob: -8.500204086303711
    3. '(has' → logprob: -14.500204086303711
    4. ' (' → logprob: -16.12520408630371
    5. '(value' → logprob: -17.00020408630371
    6. '(
' → logprob: -17.87520408630371
    7. '(Have' → logprob: -17.87520408630371
    8. '(s' → logprob: -18.37520408630371
    9. '(H' → logprob: -18.37520408630371
    10. '```' → logprob: -18.50020408630371

Token 129: 'ave' (ID: 577)
  Prédit: 'ave'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'ave' → logprob: -0.007981708273291588
    2. 'have' → logprob: -4.882981777191162
    3. '(h' → logprob: -9.257981300354004
    4. 'av' → logprob: -9.507981300354004
    5. 've' → logprob: -10.132981300354004
    6. 'a' → logprob: -10.382981300354004
    7. '   ' → logprob: -10.632981300354004
    8. ' have' → logprob: -11.132981300354004
    9. ' ' → logprob: -11.257981300354004
    10. '```' → logprob: -11.695481300354004

Token 130: ',' (ID: 11)
  Prédit: ','
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ',' → logprob: -0.08171235769987106
    2. '(a' → logprob: -2.581712245941162
    3. ',a' → logprob: -6.206712245941162
    4. '(' → logprob: -7.331712245941162
    5. 'a' → logprob: -9.45671272277832
    6. ' ,' → logprob: -9.70671272277832
    7. '   ' → logprob: -13.33171272277832
    8. ')' → logprob: -13.33171272277832
    9. '```' → logprob: -13.95671272277832
    10. ',
' → logprob: -13.95671272277832

Token 131: ' a' (ID: 261)
  Prédit: 'a'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'a' → logprob: -0.05488431453704834
    2. ' a' → logprob: -2.929884433746338
    3. '   ' → logprob: -14.05488395690918
    4. '(a' → logprob: -15.17988395690918
    5. ')a' → logprob: -15.42988395690918
    6. ')' → logprob: -15.67988395690918
    7. ' ' → logprob: -15.80488395690918
    8. '	a' → logprob: -15.92988395690918
    9. '    ' → logprob: -15.92988395690918
    10. ' ' → logprob: -16.55488395690918

Token 132: '[j' (ID: 7895)
  Prédit: '[j'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '[j' → logprob: -3.173704271830502e-06
    2. '[' → logprob: -12.87500286102295
    3. ' [' → logprob: -14.75000286102295
    4. '```' → logprob: -16.000003814697266
    5. 'j' → logprob: -16.875003814697266
    6. ')' → logprob: -17.000003814697266
    7. '[i' → logprob: -17.375003814697266
    8. '
' → logprob: -17.750003814697266
    9. '[
' → logprob: -18.250003814697266
    10. '   ' → logprob: -18.250003814697266

Token 133: '])

' (ID: 21045)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ')' → logprob: -0.00010163593105971813
    2. '])' → logprob: -9.625102043151855
    3. ')
' → logprob: -10.625102043151855
    4. '})' → logprob: -12.375102043151855
    5. '))' → logprob: -12.500102043151855
    6. ' )' → logprob: -13.500102043151855
    7. '   ' → logprob: -14.375102043151855
    8. '<|end|>' → logprob: -14.875102043151855
    9. ')])' → logprob: -16.00010108947754
    10. ')

' → logprob: -16.12510108947754

Token 134: 'def' (ID: 1314)
  Prédit: ''
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False

Token 135: ' compute' (ID: 23864)
  Prédit: ' process'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' process' → logprob: -0.017775271087884903
    2. ' __' → logprob: -5.392775058746338
    3. ' ' → logprob: -5.517775058746338
    4. ' main' → logprob: -5.642775058746338
    5. 'process' → logprob: -5.767775058746338
    6. ' _' → logprob: -7.767775058746338
    7. '_' → logprob: -8.017775535583496
    8. ' def' → logprob: -8.142775535583496
    9. ' if' → logprob: -8.142775535583496
    10. ' get' → logprob: -8.392775535583496

Token 136: '_output' (ID: 16732)
  Prédit: '_unique'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '_unique' → logprob: -0.11124508827924728
    2. '_result' → logprob: -3.7362451553344727
    3. '_sum' → logprob: -3.7362451553344727
    4. '_total' → logprob: -4.861245155334473
    5. '_results' → logprob: -4.986245155334473
    6. '_' → logprob: -5.111245155334473
    7. '_max' → logprob: -5.111245155334473
    8. '_union' → logprob: -5.111245155334473
    9. '(' → logprob: -5.361245155334473
    10. '_possible' → logprob: -5.986245155334473

Token 137: '(n' (ID: 2406)
  Prédit: '(h'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(h' → logprob: -0.06365075707435608
    2. '(' → logprob: -3.3136508464813232
    3. '():' → logprob: -3.6886508464813232
    4. '()' → logprob: -9.063651084899902
    5. ' (' → logprob: -9.688651084899902
    6. ' ():' → logprob: -10.563651084899902
    7. '(has' → logprob: -11.563651084899902
    8. '(k' → logprob: -11.813651084899902
    9. '(a' → logprob: -12.188651084899902
    10. '(n' → logprob: -12.188651084899902

Token 138: ',' (ID: 11)
  Prédit: ','
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ',' → logprob: -0.0002690840628929436
    2. ' ,' → logprob: -9.250268936157227
    3. ',k' → logprob: -9.500268936157227
    4. '):' → logprob: -9.750268936157227
    5. ',h' → logprob: -10.625268936157227
    6. ',n' → logprob: -12.250268936157227
    7. ',
' → logprob: -12.500268936157227
    8. ')' → logprob: -13.125268936157227
    9. '):
' → logprob: -14.250268936157227
    10. 'k' → logprob: -14.750268936157227

Token 139: ' have' (ID: 679)
  Prédit: 'k'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'k' → logprob: -0.032347097992897034
    2. 'have' → logprob: -4.032347202301025
    3. ' k' → logprob: -4.407347202301025
    4. ' have' → logprob: -6.282347202301025
    5. ')' → logprob: -10.907346725463867
    6. 'n' → logprob: -12.782346725463867
    7. 'a' → logprob: -13.032346725463867
    8. 'has' → logprob: -13.282346725463867
    9. ' ' → logprob: -13.344846725463867
    10. 'h' → logprob: -13.344846725463867

Token 140: '):
' (ID: 1883)
  Prédit: '):'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '):' → logprob: -0.0708741620182991
    2. ',' → logprob: -2.6958742141723633
    3. '):
' → logprob: -7.070874214172363
    4. ')' → logprob: -9.695874214172363
    5. ' ):' → logprob: -11.820874214172363
    6. ':' → logprob: -12.070874214172363
    7. '):

' → logprob: -12.195874214172363
    8. '):
' → logprob: -12.820874214172363
    9. '   ' → logprob: -13.945874214172363
    10. '),' → logprob: -14.570874214172363

Token 141: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.0021349138114601374
    2. ':' → logprob: -6.377134799957275
    3. '[' → logprob: -9.377135276794434
    4. '<|end|>' → logprob: -9.377135276794434
    5. ' return' → logprob: -10.127135276794434
    6. ':
' → logprob: -10.252135276794434
    7. '    
' → logprob: -10.502135276794434
    8. '    ' → logprob: -10.627135276794434
    9. '[]' → logprob: -11.252135276794434
    10. ':return' → logprob: -11.502135276794434

Token 142: ' return' (ID: 622)
  Prédit: 'return'
  Correct (stricte): False
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'return' (adapté à ' return') → logprob: -0.15829794108867645
    2. ' return' → logprob: -2.4082980155944824
    3. 'result' → logprob: -3.9082980155944824
    4. '   ' → logprob: -4.408298015594482
    5. 'if' → logprob: -4.908298015594482
    6. ' result' → logprob: -5.658298015594482
    7. 'count' → logprob: -5.783298015594482
    8. 'have' → logprob: -5.908298015594482
    9. 'unique' → logprob: -5.908298015594482
    10. ' if' → logprob: -6.533298015594482

Token 143: ' n' (ID: 297)
  Prédit: 'len'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'len' → logprob: -0.16698205471038818
    2. ' len' → logprob: -1.9169820547103882
    3. ' n' → logprob: -5.916982173919678
    4. 'n' → logprob: -6.541982173919678
    5. 'str' → logprob: -7.416982173919678
    6. 'sum' → logprob: -7.791982173919678
    7. ' str' → logprob: -7.791982173919678
    8. 'max' → logprob: -8.29198169708252
    9. ' max' → logprob: -8.41698169708252
    10. ' sum' → logprob: -8.66698169708252

Token 144: ' -' (ID: 533)
  Prédit: ''
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False

Token 145: ' len' (ID: 4631)
  Prédit: 'len'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'len' → logprob: -0.04858794063329697
    2. ' len' → logprob: -3.0485880374908447
    3. '   ' → logprob: -15.298587799072266
    4. '(len' → logprob: -15.673587799072266
    5. '	len' → logprob: -16.798587799072266
    6. 'sum' → logprob: -17.423587799072266
    7. ' ' → logprob: -18.173587799072266
    8. '1' → logprob: -18.548587799072266
    9. '=len' → logprob: -19.173587799072266
    10. '```' → logprob: -19.298587799072266

Token 146: '(h' (ID: 8120)
  Prédit: '(h'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(h' → logprob: -0.00014180023572407663
    2. '(' → logprob: -8.875142097473145
    3. 'have' → logprob: -13.625142097473145
    4. '(has' → logprob: -14.250142097473145
    5. '(Have' → logprob: -16.875141143798828
    6. ' (' → logprob: -17.375141143798828
    7. '(
' → logprob: -19.000141143798828
    8. '(H' → logprob: -19.375141143798828
    9. 'hav' → logprob: -19.500141143798828
    10. '(s' → logprob: -19.875141143798828

Token 147: 'ave' (ID: 577)
  Prédit: 'ave'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'ave' → logprob: -0.0003422567679081112
    2. 'have' → logprob: -8.00034236907959
    3. 'av' → logprob: -12.75034236907959
    4. 'ava' → logprob: -13.62534236907959
    5. '[' → logprob: -13.75034236907959
    6. '_have' → logprob: -14.62534236907959
    7. ' have' → logprob: -14.87534236907959
    8. '   ' → logprob: -15.50034236907959
    9. ' ave' → logprob: -15.87534236907959
    10. '_' → logprob: -16.375341415405273

Token 148: ')

' (ID: 1029)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ')' → logprob: -4.4849443838757e-06
    2. ')
' → logprob: -12.750004768371582
    3. ' )' → logprob: -14.625004768371582
    4. '))' → logprob: -15.625004768371582
    5. '   ' → logprob: -15.625004768371582
    6. '<|end|>' → logprob: -16.000003814697266
    7. ')return' → logprob: -16.500003814697266
    8. '[' → logprob: -16.500003814697266
    9. '())' → logprob: -16.500003814697266
    10. '}' → logprob: -16.750003814697266

Token 149: 'def' (ID: 1314)
  Prédit: ''
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False

Token 150: ' display' (ID: 4589)
  Prédit: ' main'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' main' → logprob: -0.0025106200482696295
    2. 'main' → logprob: -6.0025105476379395
    3. ' process' → logprob: -10.502511024475098
    4. ' def' → logprob: -12.377511024475098
    5. 'process' → logprob: -13.752511024475098
    6. ' run' → logprob: -14.002511024475098
    7. 'def' → logprob: -14.252511024475098
    8. ' solve' → logprob: -14.627511024475098
    9. ' solution' → logprob: -16.50251007080078
    10. '__' → logprob: -17.00251007080078

Token 151: '_result' (ID: 11623)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(' → logprob: -0.8821396231651306
    2. '_output' → logprob: -1.1321396827697754
    3. '(output' → logprob: -1.3821396827697754
    4. '()' → logprob: -5.132139682769775
    5. '_' → logprob: -6.007139682769775
    6. 'output' → logprob: -6.007139682769775
    7. '(_' → logprob: -7.632139682769775
    8. '_result' → logprob: -8.132139205932617
    9. '(_)' → logprob: -8.382139205932617
    10. '(Output' → logprob: -8.882139205932617

Token 152: '(result' (ID: 8111)
  Prédit: '()'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '()' → logprob: -0.7569183707237244
    2. '(' → logprob: -0.8819183707237244
    3. '():' → logprob: -2.756918430328369
    4. '(n' → logprob: -3.006918430328369
    5. '(output' → logprob: -6.131918430328369
    6. '(result' → logprob: -6.631918430328369
    7. '(def' → logprob: -9.506917953491211
    8. '(print' → logprob: -9.756917953491211
    9. ' ()' → logprob: -9.881917953491211
    10. '()(' → logprob: -10.131917953491211

Token 153: '):
' (ID: 1883)
  Prédit: '):'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '):' → logprob: -0.002308696275576949
    2. '):
' → logprob: -6.5023088455200195
    3. ')' → logprob: -7.1273088455200195
    4. ':' → logprob: -13.87730884552002
    5. '):
' → logprob: -13.87730884552002
    6. ' ):' → logprob: -14.37730884552002
    7. '():' → logprob: -15.25230884552002
    8. '   ' → logprob: -15.62730884552002
    9. '):

' → logprob: -15.62730884552002
    10. ')：' → logprob: -17.752307891845703

Token 154: '   ' (ID: 271)
  Prédit: 'print'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'print' → logprob: -0.4129038155078888
    2. '   ' → logprob: -1.1629037857055664
    3. ' print' → logprob: -3.6629037857055664
    4. '```' → logprob: -10.162903785705566
    5. '	print' → logprob: -16.412904739379883
    6. '`' → logprob: -16.537904739379883
    7. 'def' → logprob: -16.912904739379883
    8. '``' → logprob: -16.912904739379883
    9. '(print' → logprob: -16.912904739379883
    10. '   ' → logprob: -17.787904739379883

Token 155: ' print' (ID: 2123)
  Prédit: 'print'
  Correct (stricte): False
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'print' (adapté à ' print') → logprob: -0.0004311460361350328
    2. ' print' → logprob: -7.750431060791016
    3. '```' → logprob: -14.750431060791016
    4. '   ' → logprob: -16.375431060791016
    5. 'pr' → logprob: -20.125431060791016
    6. '
' → logprob: -20.375431060791016
    7. '`' → logprob: -21.750431060791016
    8. '``' → logprob: -22.125431060791016
    9. 'prin' → logprob: -22.250431060791016
    10. 'def' → logprob: -22.500431060791016

Token 156: '(result' (ID: 8111)
  Prédit: '(result'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(result' → logprob: -0.018157200887799263
    2. '(' → logprob: -4.018157005310059
    3. 'result' → logprob: -12.143157005310059
    4. '()' → logprob: -13.893157005310059
    5. '(f' → logprob: -15.018157005310059
    6. ' (' → logprob: -15.143157005310059
    7. '(
' → logprob: -15.768157005310059
    8. '('' → logprob: -17.018157958984375
    9. '((' → logprob: -17.393157958984375
    10. '(resultado' → logprob: -17.643157958984375

Token 157: ')

' (ID: 1029)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ')' → logprob: -3.128163257315464e-07
    2. ')`' → logprob: -16.5
    3. ')
' → logprob: -16.625
    4. '))' → logprob: -16.875
    5. '')' → logprob: -17.625
    6. ' )' → logprob: -17.625
    7. '`)' → logprob: -17.875
    8. '()' → logprob: -18.125
    9. '")' → logprob: -18.5
    10. '())' → logprob: -19.0

Token 158: 'def' (ID: 1314)
  Prédit: 'def'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'def' → logprob: -1.4140441635390744e-05
    2. 'if' → logprob: -11.250014305114746
    3. 'for' → logprob: -14.625014305114746
    4. 'n' → logprob: -15.375014305114746
    5. '```' → logprob: -15.875014305114746
    6. '#' → logprob: -16.00001335144043
    7. 'ndef' → logprob: -16.62501335144043
    8. ' def' → logprob: -17.62501335144043
    9. 'continue' → logprob: -18.75001335144043
    10. '<|end|>' → logprob: -19.87501335144043

Token 159: ' main' (ID: 2758)
  Prédit: 'main'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'main' → logprob: -0.061970602720975876
    2. ' main' → logprob: -2.8119707107543945
    3. 'solve' → logprob: -13.811970710754395
    4. 'process' → logprob: -14.436970710754395
    5. 'run' → logprob: -14.561970710754395
    6. '	main' → logprob: -15.186970710754395
    7. 'def' → logprob: -15.561970710754395
    8. ' solve' → logprob: -15.686970710754395
    9. 'solution' → logprob: -16.311969757080078
    10. ' run' → logprob: -16.561969757080078

Token 160: '():
' (ID: 8595)
  Prédit: '():'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '():' → logprob: -1.3782830137643032e-05
    2. ' ():' → logprob: -12.12501335144043
    3. '():
' → logprob: -12.37501335144043
    4. '(' → logprob: -13.00001335144043
    5. '()' → logprob: -13.37501335144043
    6. '(:' → logprob: -16.00001335144043
    7. '(":' → logprob: -17.25001335144043
    8. '_' → logprob: -17.25001335144043
    9. '():
' → logprob: -17.37501335144043
    10. '():

' → logprob: -17.62501335144043

Token 161: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.36559778451919556
    2. ' n' → logprob: -1.6155977249145508
    3. 'n' → logprob: -2.240597724914551
    4. '(n' → logprob: -7.365597724914551
    5. '	n' → logprob: -8.49059772491455
    6. '_n' → logprob: -8.74059772491455
    7. ',n' → logprob: -10.99059772491455
    8. '(' → logprob: -11.11559772491455
    9. ' ' → logprob: -11.74059772491455
    10. ' (' → logprob: -12.36559772491455

Token 162: ' n' (ID: 297)
  Prédit: 'n'
  Correct (stricte): False
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'n' (adapté à ' n') → logprob: -0.001837487448938191
    2. ' n' → logprob: -6.501837253570557
    3. '   ' → logprob: -8.001837730407715
    4. '	n' → logprob: -15.376837730407715
    5. '_n' → logprob: -16.7518367767334
    6. '
' → logprob: -17.2518367767334
    7. ' ' → logprob: -17.8768367767334
    8. '  ' → logprob: -18.1268367767334
    9. '(n' → logprob: -19.6268367767334
    10. ',n' → logprob: -20.0018367767334

Token 163: ',' (ID: 11)
  Prédit: ','
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ',' → logprob: -0.0009345670696347952
    2. ',k' → logprob: -7.000934600830078
    3. ' ,' → logprob: -10.750934600830078
    4. 'k' → logprob: -13.750934600830078
    5. '‌,' → logprob: -16.125934600830078
    6. ',
' → logprob: -16.250934600830078
    7. ',n' → logprob: -16.625934600830078
    8. ' k' → logprob: -16.750934600830078
    9. '_,' → logprob: -17.250934600830078
    10. '，' → logprob: -17.500934600830078

Token 164: ' k' (ID: 372)
  Prédit: 'k'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'k' → logprob: -0.25192973017692566
    2. ' k' → logprob: -1.501929759979248
    3. '_k' → logprob: -15.37692928314209
    4. '	k' → logprob: -15.75192928314209
    5. '*k' → logprob: -16.126930236816406
    6. ' ' → logprob: -16.126930236816406
    7. '=k' → logprob: -17.251930236816406
    8. ',k' → logprob: -17.376930236816406
    9. '   ' → logprob: -17.501930236816406
    10. 'get' → logprob: -17.751930236816406

Token 165: ' =' (ID: 314)
  Prédit: ' ='
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' =' → logprob: -0.10020720958709717
    2. '=' → logprob: -2.3502073287963867
    3. ',' → logprob: -14.975207328796387
    4. '   ' → logprob: -16.22520637512207
    5. ' ' → logprob: -17.10020637512207
    6. ')' → logprob: -17.35020637512207
    7. '＝' → logprob: -17.97520637512207
    8. '=get' → logprob: -18.22520637512207
    9. '	' → logprob: -18.35020637512207
    10. ' =
' → logprob: -18.60020637512207

Token 166: ' get' (ID: 717)
  Prédit: ' get'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' get' → logprob: -0.029750484973192215
    2. 'get' → logprob: -3.5297505855560303
    3. '(get' → logprob: -17.15475082397461
    4. '=get' → logprob: -17.52975082397461
    5. '	get' → logprob: -19.52975082397461
    6. ' map' → logprob: -19.77975082397461
    7. '_get' → logprob: -20.77975082397461
    8. ')get' → logprob: -20.90475082397461
    9. '.get' → logprob: -21.27975082397461
    10. ' ' → logprob: -21.90475082397461

Token 167: '_n' (ID: 2170)
  Prédit: '_n'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_n' → logprob: -3.2855416066013277e-05
    2. '_' → logprob: -10.750032424926758
    3. ' _' → logprob: -12.000032424926758
    4. 'n' → logprob: -13.125032424926758
    5. '(n' → logprob: -13.250032424926758
    6. '(_' → logprob: -15.000032424926758
    7. ' ' → logprob: -15.125032424926758
    8. '(' → logprob: -15.250032424926758
    9. ' n' → logprob: -15.500032424926758
    10. '_k' → logprob: -16.000032424926758

Token 168: '_k' (ID: 11637)
  Prédit: '_k'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_k' → logprob: -0.0007150543970055878
    2. '_' → logprob: -7.250715255737305
    3. 'k' → logprob: -12.250715255737305
    4. '_K' → logprob: -17.000715255737305
    5. '(k' → logprob: -17.250715255737305
    6. '_key' → logprob: -17.250715255737305
    7. '_space' → logprob: -17.500715255737305
    8. ' _' → logprob: -17.875715255737305
    9. '_n' → logprob: -18.250715255737305
    10. '()' → logprob: -18.375715255737305

Token 169: '()
' (ID: 1234)
  Prédit: '()'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '()' → logprob: -0.3869418203830719
    2. '()
' → logprob: -1.1369417905807495
    3. '()\' → logprob: -10.386941909790039
    4. '
' → logprob: -11.386941909790039
    5. '()
' → logprob: -11.636941909790039
    6. '()

' → logprob: -12.511941909790039
    7. '()`' → logprob: -12.761941909790039
    8. '   ' → logprob: -12.761941909790039
    9. '(
' → logprob: -13.136941909790039
    10. '();' → logprob: -13.386941909790039

Token 170: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.7827163338661194
    2. '
' → logprob: -1.2827162742614746
    3. 'have' → logprob: -1.5327162742614746
    4. ' have' → logprob: -3.0327162742614746
    5. '    
' → logprob: -7.282716274261475
    6. '
' → logprob: -8.282716751098633
    7. '```' → logprob: -8.282716751098633
    8. '	h' → logprob: -9.407716751098633
    9. ' ' → logprob: -10.532716751098633
    10. '(h' → logprob: -10.782716751098633

Token 171: ' have' (ID: 679)
  Prédit: 'have'
  Correct (stricte): False
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'have' (adapté à ' have') → logprob: -0.0001605115394340828
    2. ' have' → logprob: -8.750160217285156
    3. '   ' → logprob: -13.125160217285156
    4. 'has' → logprob: -16.625160217285156
    5. 'hav' → logprob: -18.000160217285156
    6. 'haven' → logprob: -18.375160217285156
    7. '
' → logprob: -18.500160217285156
    8. 'Have' → logprob: -20.000160217285156
    9. '_have' → logprob: -20.000160217285156
    10. '```' → logprob: -20.125160217285156

Token 172: ' =' (ID: 314)
  Prédit: ' ='
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' =' → logprob: -0.07890399545431137
    2. '=' → logprob: -2.578903913497925
    3. ',' → logprob: -11.328904151916504
    4. '=[]' → logprob: -13.703904151916504
    5. '   ' → logprob: -14.828904151916504
    6. ')' → logprob: -15.203904151916504
    7. ' ' → logprob: -16.203903198242188
    8. '[' → logprob: -16.453903198242188
    9. '=[]
' → logprob: -16.703903198242188
    10. 's' → logprob: -16.828903198242188

Token 173: ' []
' (ID: 8911)
  Prédit: '[]'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '[]' → logprob: -7.703443770878948e-06
    2. '[]
' → logprob: -12.000007629394531
    3. ' []' → logprob: -13.875007629394531
    4. '[' → logprob: -15.625007629394531
    5. '[]}' → logprob: -15.875007629394531
    6. '[]

' → logprob: -16.00000762939453
    7. 'list' → logprob: -17.50000762939453
    8. '[]>' → logprob: -17.87500762939453
    9. '[],' → logprob: -18.00000762939453
    10. '[])' → logprob: -18.37500762939453

Token 174: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.053054798394441605
    2. 'process' → logprob: -3.0530548095703125
    3. ' process' → logprob: -5.4280548095703125
    4. '	process' → logprob: -9.678054809570312
    5. '(process' → logprob: -14.178054809570312
    6. 'def' → logprob: -14.553054809570312
    7. '_process' → logprob: -14.928054809570312
    8. 'for' → logprob: -15.053054809570312
    9. '```' → logprob: -15.053054809570312
    10. '   ' → logprob: -15.303054809570312

Token 175: ' process' (ID: 2273)
  Prédit: 'process'
  Correct (stricte): False
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'process' (adapté à ' process') → logprob: -0.0023270058445632458
    2. 'for' → logprob: -6.127326965332031
    3. ' process' → logprob: -9.502326965332031
    4. '   ' → logprob: -9.627326965332031
    5. ' for' → logprob: -14.252326965332031
    6. 'while' → logprob: -14.877326965332031
    7. '	process' → logprob: -15.752326965332031
    8. 'def' → logprob: -16.25232696533203
    9. '(process' → logprob: -16.87732696533203
    10. 'read' → logprob: -17.25232696533203

Token 176: '_k' (ID: 11637)
  Prédit: '_k'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_k' → logprob: -1.0280383548888494e-06
    2. 'k' → logprob: -14.250000953674316
    3. '(k' → logprob: -16.000001907348633
    4. '```' → logprob: -16.000001907348633
    5. 'process' → logprob: -17.375001907348633
    6. '
' → logprob: -17.750001907348633
    7. '_n' → logprob: -18.000001907348633
    8. ' _' → logprob: -18.375001907348633
    9. '_one' → logprob: -18.375001907348633
    10. '_' → logprob: -18.375001907348633

Token 177: '_times' (ID: 53425)
  Prédit: '_times'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_times' → logprob: -0.0010733000235632062
    2. '_k' → logprob: -7.251073360443115
    3. '(k' → logprob: -8.001072883605957
    4. '(_' → logprob: -12.876072883605957
    5. 'times' → logprob: -12.876072883605957
    6. '```' → logprob: -13.001072883605957
    7. '_once' → logprob: -13.126072883605957
    8. '_time' → logprob: -13.251072883605957
    9. '(times' → logprob: -13.501072883605957
    10. '_t' → logprob: -13.501072883605957

Token 178: '(k' (ID: 12125)
  Prédit: '(k'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(k' → logprob: -5.8126592193730175e-05
    2. '(' → logprob: -9.8750581741333
    3. ' (' → logprob: -12.0000581741333
    4. 'k' → logprob: -14.8750581741333
    5. ' k' → logprob: -17.750057220458984
    6. '(
' → logprob: -18.000057220458984
    7. '	k' → logprob: -19.500057220458984
    8. ' ' → logprob: -19.625057220458984
    9. '   ' → logprob: -19.750057220458984
    10. '```' → logprob: -20.000057220458984

Token 179: ',' (ID: 11)
  Prédit: ','
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ',' → logprob: -6.0033853515051305e-05
    2. ',h' → logprob: -10.250060081481934
    3. '(h' → logprob: -11.250060081481934
    4. ' ,' → logprob: -11.875060081481934
    5. 'have' → logprob: -12.750060081481934
    6. ')' → logprob: -14.500060081481934
    7. '```' → logprob: -15.000060081481934
    8. '   ' → logprob: -15.250060081481934
    9. ',
' → logprob: -15.500060081481934
    10. ' have' → logprob: -16.250059127807617

Token 180: ' have' (ID: 679)
  Prédit: 'have'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'have' → logprob: -0.07889397442340851
    2. ' have' → logprob: -2.5788938999176025
    3. '   ' → logprob: -12.578893661499023
    4. ' ' → logprob: -14.953893661499023
    5. '    ' → logprob: -15.453893661499023
    6. ')' → logprob: -15.953893661499023
    7. 'hav' → logprob: -16.828893661499023
    8. '.have' → logprob: -17.453893661499023
    9. '  ' → logprob: -17.578893661499023
    10. 'has' → logprob: -17.828893661499023

Token 181: ')
' (ID: 446)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')' → logprob: -0.3137876093387604
    2. ')
' → logprob: -1.313787579536438
    3. '   ' → logprob: -7.563787460327148
    4. ')
' → logprob: -12.188787460327148
    5. ')

' → logprob: -13.938787460327148
    6. ' )' → logprob: -15.063787460327148
    7. ' )
' → logprob: -15.313787460327148
    8. ' ' → logprob: -17.06378746032715
    9. ')#' → logprob: -17.18878746032715
    10. ')\
' → logprob: -17.18878746032715

Token 182: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.009460686706006527
    2. 'result' → logprob: -5.25946044921875
    3. '
' → logprob: -6.00946044921875
    4. ' result' → logprob: -7.00946044921875
    5. 'display' → logprob: -7.38446044921875
    6. '    
' → logprob: -9.13446044921875
    7. ' display' → logprob: -9.25946044921875
    8. '```' → logprob: -10.75946044921875
    9. '   ' → logprob: -12.63446044921875
    10. 'output' → logprob: -13.50946044921875

Token 183: ' output' (ID: 4733)
  Prédit: 'result'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'result' → logprob: -0.06900950521230698
    2. '   ' → logprob: -3.19400954246521
    3. 'display' → logprob: -3.81900954246521
    4. ' result' → logprob: -5.694009304046631
    5. 'res' → logprob: -8.819009780883789
    6. ' display' → logprob: -8.944009780883789
    7. '
' → logprob: -10.194009780883789
    8. 'output' (adapté à ' output') → logprob: -10.569009780883789
    9. '    
' → logprob: -12.444009780883789
    10. ' ' → logprob: -12.694009780883789

Token 184: ' =' (ID: 314)
  Prédit: ' ='
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' =' → logprob: -0.2164197415113449
    2. '=' → logprob: -1.7164196968078613
    3. '_' → logprob: -4.341419696807861
    4. '_result' → logprob: -6.341419696807861
    5. '   ' → logprob: -10.34142017364502
    6. '=result' → logprob: -10.59142017364502
    7. '_output' → logprob: -10.71642017364502
    8. ')' → logprob: -11.96642017364502
    9. '(' → logprob: -12.21642017364502
    10. 'result' → logprob: -12.46642017364502

Token 185: ' compute' (ID: 23864)
  Prédit: ' compute'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' compute' → logprob: -0.31326204538345337
    2. 'compute' → logprob: -1.3132619857788086
    3. '   ' → logprob: -15.563261985778809
    4. '.compute' → logprob: -15.813261985778809
    5. ' computer' → logprob: -17.063262939453125
    6. '_compute' → logprob: -17.438262939453125
    7. 'computer' → logprob: -18.313262939453125
    8. ' ' → logprob: -19.813262939453125
    9. 'comput' → logprob: -20.563262939453125
    10. '    ' → logprob: -21.063262939453125

Token 186: '_output' (ID: 16732)
  Prédit: '_output'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_output' → logprob: -5.512236498361744e-07
    2. 'output' → logprob: -14.750000953674316
    3. ' _' → logprob: -17.0
    4. '_' → logprob: -17.5
    5. '_input' → logprob: -17.875
    6. '_out' → logprob: -18.375
    7. '```' → logprob: -18.375
    8. '"_' → logprob: -18.875
    9. '_result' → logprob: -19.125
    10. '_OUTPUT' → logprob: -19.25

Token 187: '(n' (ID: 2406)
  Prédit: '(n'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(n' → logprob: -0.0022379241418093443
    2. '(' → logprob: -6.127237796783447
    3. ' (' → logprob: -9.877238273620605
    4. '(
' → logprob: -13.752238273620605
    5. '```' → logprob: -15.377238273620605
    6. '   ' → logprob: -16.50223731994629
    7. '(

' → logprob: -17.25223731994629
    8. '\(' → logprob: -17.25223731994629
    9. '(noun' → logprob: -17.50223731994629
    10. ' ' → logprob: -18.00223731994629

Token 188: ',' (ID: 11)
  Prédit: ','
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ',' → logprob: -6.153795766294934e-06
    2. ' ,' → logprob: -12.375005722045898
    3. ',h' → logprob: -13.500005722045898
    4. 'have' → logprob: -15.750005722045898
    5. ')' → logprob: -16.2500057220459
    6. '(h' → logprob: -16.7500057220459
    7. ',
' → logprob: -16.8750057220459
    8. '   ' → logprob: -17.8750057220459
    9. '(' → logprob: -18.3750057220459
    10. ' have' → logprob: -18.6250057220459

Token 189: ' have' (ID: 679)
  Prédit: 'have'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'have' → logprob: -0.03804149478673935
    2. ' have' → logprob: -3.288041591644287
    3. ' ' → logprob: -17.913042068481445
    4. 'len' → logprob: -18.038042068481445
    5. ' len' → logprob: -18.038042068481445
    6. '   ' → logprob: -18.538042068481445
    7. '_have' → logprob: -18.913042068481445
    8. 'has' → logprob: -19.038042068481445
    9. '-have' → logprob: -19.288042068481445
    10. 'hav' → logprob: -19.788042068481445

Token 190: ')
' (ID: 446)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')' → logprob: -0.38691896200180054
    2. ')
' → logprob: -1.1369190216064453
    3. '   ' → logprob: -10.136919021606445
    4. ')
' → logprob: -11.761919021606445
    5. ' )
' → logprob: -15.636919021606445
    6. ' )' → logprob: -16.261919021606445
    7. ')

' → logprob: -16.511919021606445
    8. ' ' → logprob: -16.511919021606445
    9. ')`
' → logprob: -16.636919021606445
    10. '())
' → logprob: -17.511919021606445

Token 191: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.002849102020263672
    2. 'display' → logprob: -6.002849102020264
    3. '
' → logprob: -8.002849578857422
    4. ' display' → logprob: -10.377849578857422
    5. '	display' → logprob: -12.627849578857422
    6. '"display' → logprob: -13.252849578857422
    7. '```' → logprob: -13.877849578857422
    8. '(display' → logprob: -14.127849578857422
    9. '    
' → logprob: -14.377849578857422
    10. '.display' → logprob: -15.752849578857422

Token 192: ' display' (ID: 4589)
  Prédit: 'display'
  Correct (stricte): False
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'display' (adapté à ' display') → logprob: -4.36574100604048e-06
    2. ' display' → logprob: -12.500004768371582
    3. '   ' → logprob: -14.500004768371582
    4. '	display' → logprob: -18.250003814697266
    5. '"display' → logprob: -18.625003814697266
    6. '
' → logprob: -19.375003814697266
    7. '(display' → logprob: -20.000003814697266
    8. '.display' → logprob: -20.000003814697266
    9. '_display' → logprob: -21.125003814697266
    10. '  ' → logprob: -22.375003814697266

Token 193: '_result' (ID: 11623)
  Prédit: '_result'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_result' → logprob: 0.0
    2. '_' → logprob: -17.5
    3. '_output' → logprob: -17.75
    4. '_res' → logprob: -18.0
    5. 'result' → logprob: -18.125
    6. '_results' → logprob: -18.5
    7. '_RESULT' → logprob: -18.625
    8. ' _' → logprob: -19.75
    9. '_Result' → logprob: -20.75
    10. '(result' → logprob: -21.5

Token 194: '(output' (ID: 22485)
  Prédit: '(output'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(output' → logprob: -7.553032628493384e-05
    2. '(' → logprob: -9.500075340270996
    3. ' (' → logprob: -14.250075340270996
    4. '(
' → logprob: -19.000076293945312
    5. '(Output' → logprob: -20.375076293945312
    6. '(outputs' → logprob: -20.625076293945312
    7. '(input' → logprob: -20.875076293945312
    8. '(out' → logprob: -20.875076293945312
    9. '```' → logprob: -21.250076293945312
    10. 'output' → logprob: -21.500076293945312

Token 195: ')

' (ID: 1029)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')' → logprob: -3.128163257315464e-07
    2. ')
' → logprob: -15.25
    3. '())' → logprob: -18.125
    4. ' )' → logprob: -18.375
    5. '))' → logprob: -19.5
    6. ')`' → logprob: -19.625
    7. '()' → logprob: -19.875
    8. ')#' → logprob: -20.875
    9. ')

' → logprob: -21.125
    10. ')}' → logprob: -21.25

Token 196: 'if' (ID: 366)
  Prédit: 'if'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'if' → logprob: -0.04432564228773117
    2. 'main' → logprob: -3.169325590133667
    3. '
' → logprob: -7.294325828552246
    4. '#' → logprob: -8.919325828552246
    5. '\n' → logprob: -8.919325828552246
    6. ' if' → logprob: -9.169325828552246
    7. '<|end|>' → logprob: -9.294325828552246
    8. '_' → logprob: -10.044325828552246
    9. '```' → logprob: -10.294325828552246
    10. ' main' → logprob: -10.294325828552246

Token 197: ' __' (ID: 2516)
  Prédit: '__'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '__' → logprob: -0.5759698152542114
    2. ' __' → logprob: -0.8259698152542114
    3. ' ' → logprob: -11.450969696044922
    4. '_' → logprob: -11.450969696044922
    5. '_name' → logprob: -12.575969696044922
    6. 'name' → logprob: -12.825969696044922
    7. '___' → logprob: -13.075969696044922
    8. ' ' → logprob: -14.950969696044922
    9. '  ' → logprob: -16.200969696044922
    10. 'Name' → logprob: -16.325969696044922

Token 198: 'name' (ID: 897)
  Prédit: '__'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '__' → logprob: -0.018623247742652893
    2. '==' → logprob: -4.268623352050781
    3. ' ==' → logprob: -5.518623352050781
    4. ' __' → logprob: -8.268623352050781
    5. '__.__' → logprob: -9.643623352050781
    6. '__.' → logprob: -10.143623352050781
    7. '.__' → logprob: -10.518623352050781
    8. '=="' → logprob: -10.643623352050781
    9. '.' → logprob: -11.268623352050781
    10. '=' → logprob: -13.393623352050781

Token 199: '__' (ID: 771)
  Prédit: '__'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '__' → logprob: -2.1008713702030946e-06
    2. '==' → logprob: -13.375001907348633
    3. '__.__' → logprob: -14.750001907348633
    4. '____' → logprob: -17.125001907348633
    5. '___' → logprob: -17.125001907348633
    6. '__.' → logprob: -17.375001907348633
    7. ' ==' → logprob: -18.250001907348633
    8. '_' → logprob: -19.000001907348633
    9. '__
' → logprob: -19.250001907348633
    10. 'name' → logprob: -19.375001907348633

Token 200: ' ==' (ID: 951)
  Prédit: '__'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '__' → logprob: -0.01907714083790779
    2. '==' → logprob: -4.019077301025391
    3. ' ==' → logprob: -7.019077301025391
    4. '=="' → logprob: -10.76907730102539
    5. '=='' → logprob: -12.01907730102539
    6. '___' → logprob: -13.14407730102539
    7. '_' → logprob: -13.39407730102539
    8. '=' → logprob: -14.89407730102539
    9. '===' → logprob: -15.26907730102539
    10. '__.__' → logprob: -15.26907730102539

Token 201: ' "__' (ID: 27367)
  Prédit: '"'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '"' → logprob: -0.07894740998744965
    2. ''' → logprob: -2.5789473056793213
    3. ' "__' → logprob: -9.953947067260742
    4. '__' → logprob: -11.703947067260742
    5. ' '__' → logprob: -13.453947067260742
    6. '"user' → logprob: -16.453947067260742
    7. '"name' → logprob: -16.703947067260742
    8. '"_' → logprob: -16.703947067260742
    9. ''"' → logprob: -17.203947067260742
    10. ''_' → logprob: -17.703947067260742

Token 202: 'main' (ID: 7731)
  Prédit: 'main'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'main' → logprob: -0.20246762037277222
    2. '__' → logprob: -1.702467679977417
    3. 'name' → logprob: -6.952467441558838
    4. '"' → logprob: -9.827467918395996
    5. '_main' → logprob: -10.327467918395996
    6. ''' → logprob: -13.452467918395996
    7. ' main' → logprob: -13.577467918395996
    8. '__":
' → logprob: -13.577467918395996
    9. 'built' → logprob: -13.577467918395996
    10. '___' → logprob: -13.952467918395996

Token 203: '__":
' (ID: 49892)
  Prédit: '__":
'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '__":
' → logprob: -0.07893440127372742
    2. '__' → logprob: -2.57893443107605
    3. '__':
' → logprob: -10.078934669494629
    4. '__["' → logprob: -14.078934669494629
    5. '__:' → logprob: -14.203934669494629
    6. '__.' → logprob: -14.453934669494629
    7. '__",' → logprob: -15.578934669494629
    8. '"' → logprob: -15.828934669494629
    9. '__.__' → logprob: -15.953934669494629
    10. '_' → logprob: -16.578933715820312

Token 204: '   ' (ID: 271)
  Prédit: ' main'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' main' → logprob: -0.12742862105369568
    2. 'main' → logprob: -2.1274285316467285
    3. '   ' → logprob: -8.502429008483887
    4. '__' → logprob: -8.877429008483887
    5. '	main' → logprob: -9.252429008483887
    6. '"' → logprob: -10.002429008483887
    7. ' __' → logprob: -11.627429008483887
    8. '_main' → logprob: -12.252429008483887
    9. ''' → logprob: -13.502429008483887
    10. ' ' → logprob: -14.502429008483887

Token 205: ' main' (ID: 2758)
  Prédit: 'main'
  Correct (stricte): False
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'main' (adapté à ' main') → logprob: -4.842555426876061e-06
    2. ' main' → logprob: -12.250004768371582
    3. '	main' → logprob: -20.3750057220459
    4. '   ' → logprob: -21.6250057220459
    5. '_main' → logprob: -23.5000057220459
    6. '.main' → logprob: -23.8750057220459
    7. '(main' → logprob: -24.7500057220459
    8. 'Main' → logprob: -25.6250057220459
    9. '__' → logprob: -26.6250057220459
    10. 'import' → logprob: -27.1250057220459

Token 206: '()' (ID: 416)
  Prédit: ''
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False


RÉSUMÉ:
--------------------------------------------------------------------------------
Total des tokens analysés: 204
Tokens correctement prédits (1ère position, stricte): 89
Tokens correctement prédits (1ère position, avec adaptation): 102
Tokens correctement prédits (top 10): 167
Précision stricte (1ère position): 43.63%
Précision adaptée (1ère position): 50.00%
Précision (top 10): 81.86%
================================================================================
