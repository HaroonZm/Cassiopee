================================================================================
ANALYSE DE PRÉDICTION TOKEN PAR TOKEN (BATCH API)
Date: 2025-06-04 19:51:04
Modèle de tokenisation: gpt-4o-mini
================================================================================

SCRIPT ANALYSÉ:
--------------------------------------------------------------------------------
from functools import reduce
from itertools import repeat, islice

r = int(input())
area = reduce(lambda x, y: x + y, (next(islice(repeat(r*r, i), 0, 1)) for i in range(3)))
print(area)
--------------------------------------------------------------------------------

RÉSULTATS D'ANALYSE TOKEN PAR TOKEN:
--------------------------------------------------------------------------------
Token 0: 'from' (ID: 2845)
  → Token d'amorce (pas de prédiction)

Token 1: ' functools' (ID: 142636)
  → Token d'amorce (pas de prédiction)

Token 2: ' import' (ID: 1588)
  → Token d'amorce (pas de prédiction)

Token 3: ' reduce' (ID: 10389)
  Prédit: 'wrap'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'wrap' → logprob: -0.3026095926761627
    2. 'partial' → logprob: -1.8026095628738403
    3. 'reduce' → logprob: -2.55260968208313
    4. 'l' → logprob: -4.677609443664551
    5. ' wraps' → logprob: -4.802609443664551
    6. 'cached' → logprob: -8.05260944366455
    7. 'cache' → logprob: -8.55260944366455
    8. 'cmp' → logprob: -9.05260944366455
    9. ' partial' → logprob: -9.42760944366455
    10. ' l' → logprob: -9.80260944366455

Token 4: '
' (ID: 198)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '(' → logprob: -0.020487118512392044
    2. '(lambda' → logprob: -4.645487308502197
    3. '.' → logprob: -5.270487308502197
    4. ',' → logprob: -5.895487308502197
    5. '\' → logprob: -7.145487308502197
    6. ' (' → logprob: -7.520487308502197
    7. '```' → logprob: -8.020486831665039
    8. 'def' → logprob: -8.645486831665039
    9. 'lambda' → logprob: -8.895486831665039
    10. '`' → logprob: -8.895486831665039

Token 5: 'from' (ID: 2845)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '(' → logprob: -0.029214249923825264
    2. '\' → logprob: -4.154214382171631
    3. 'def' → logprob: -5.029214382171631
    4. '(
' → logprob: -5.904214382171631
    5. '(lambda' → logprob: -6.529214382171631
    6. ',' → logprob: -7.529214382171631
    7. '\n' → logprob: -7.779214382171631
    8. '```' → logprob: -7.904214382171631
    9. '\(' → logprob: -8.404213905334473
    10. '`' → logprob: -9.154213905334473

Token 6: ' itertools' (ID: 103178)
  Prédit: ' operator'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' operator' → logprob: -0.2411840558052063
    2. ' itertools' → logprob: -2.1161839962005615
    3. ' math' → logprob: -2.7411839962005615
    4. ' collections' → logprob: -3.8661839962005615
    5. 'operator' → logprob: -4.991184234619141
    6. ' os' → logprob: -7.116184234619141
    7. 'math' → logprob: -7.991184234619141
    8. ' typing' → logprob: -8.49118423461914
    9. 'collections' → logprob: -8.99118423461914
    10. ' ' → logprob: -10.49118423461914

Token 7: ' import' (ID: 1588)
  Prédit: ' import'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' import' → logprob: -0.019087785854935646
    2. 'import' → logprob: -4.019087791442871
    3. '.' → logprob: -7.394087791442871
    4. ' ' → logprob: -8.644087791442871
    5. ' .' → logprob: -9.519087791442871
    6. '.import' → logprob: -10.019087791442871
    7. '	import' → logprob: -11.269087791442871
    8. '_import' → logprob: -12.144087791442871
    9. '<|end|>' → logprob: -13.519087791442871
    10. '.groupby' → logprob: -13.769087791442871

Token 8: ' repeat' (ID: 22962)
  Prédit: ' group'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' group' → logprob: -0.4097050726413727
    2. 'group' → logprob: -2.15970516204834
    3. ' accumulate' → logprob: -2.90970516204834
    4. 'acc' → logprob: -3.40970516204834
    5. 'count' → logprob: -3.40970516204834
    6. ' cycle' → logprob: -3.53470516204834
    7. ' chain' → logprob: -3.53470516204834
    8. 'cycle' → logprob: -4.28470516204834
    9. 'chain' → logprob: -4.40970516204834
    10. ' count' → logprob: -5.03470516204834

Token 9: ',' (ID: 11)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(' → logprob: -0.01283523254096508
    2. '(
' → logprob: -5.6378350257873535
    3. '.' → logprob: -5.7628350257873535
    4. ',' → logprob: -6.3878350257873535
    5. 'def' → logprob: -6.3878350257873535
    6. '\' → logprob: -6.8878350257873535
    7. '\n' → logprob: -8.012835502624512
    8. '#' → logprob: -8.137835502624512
    9. '`' → logprob: -8.512835502624512
    10. ')' → logprob: -8.512835502624512

Token 10: ' is' (ID: 382)
  Prédit: 'count'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'count' → logprob: -0.371333509683609
    2. 'chain' → logprob: -2.121333599090576
    3. 'cycle' → logprob: -2.371333599090576
    4. ' count' → logprob: -4.121333599090576
    5. 'acc' → logprob: -4.371333599090576
    6. 'st' → logprob: -4.496333599090576
    7. ' chain' → logprob: -4.746333599090576
    8. 'product' → logprob: -4.871333599090576
    9. ' cycle' → logprob: -5.121333599090576
    10. 'group' → logprob: -5.246333599090576

Token 11: 'lice' (ID: 7321)
  Prédit: 'lice'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'lice' → logprob: -1.3663626305060461e-05
    2. 'lic' → logprob: -11.37501335144043
    3. 'l' → logprob: -14.25001335144043
    4. 'instance' → logprob: -14.62501335144043
    5. 'liced' → logprob: -15.00001335144043
    6. 'land' → logprob: -15.50001335144043
    7. 'lices' → logprob: -16.00001335144043
    8. '```' → logprob: -16.25001335144043
    9. 'licing' → logprob: -16.37501335144043
    10. 'in' → logprob: -17.50001335144043

Token 12: '

' (ID: 279)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '(' → logprob: -0.05138828977942467
    2. '(
' → logprob: -3.8013882637023926
    3. '\' → logprob: -4.551388263702393
    4. ',' → logprob: -4.926388263702393
    5. '\n' → logprob: -5.426388263702393
    6. 'def' → logprob: -5.926388263702393
    7. '.' → logprob: -6.801388263702393
    8. '\(' → logprob: -7.676388263702393
    9. '`' → logprob: -8.17638874053955
    10. ')' → logprob: -8.67638874053955

Token 13: 'r' (ID: 81)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '(' → logprob: -0.08523069322109222
    2. 'def' → logprob: -3.460230588912964
    3. ',' → logprob: -3.585230588912964
    4. '(
' → logprob: -4.210230827331543
    5. '\n' → logprob: -5.835230827331543
    6. '\' → logprob: -6.460230827331543
    7. '```' → logprob: -7.335230827331543
    8. ')' → logprob: -7.585230827331543
    9. '`' → logprob: -7.835230827331543
    10. '.' → logprob: -7.960230827331543

Token 14: ' =' (ID: 314)
  Prédit: 'e'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'e' → logprob: -0.11528580635786057
    2. 'ed' → logprob: -2.240285873413086
    3. 'educ' → logprob: -6.990285873413086
    4. 'edu' → logprob: -7.240285873413086
    5. 'educt' → logprob: -7.865285873413086
    6. 'ead' → logprob: -8.615285873413086
    7. 'ep' → logprob: -9.115285873413086
    8. 'eed' → logprob: -9.740285873413086
    9. 'ea' → logprob: -10.615285873413086
    10. 'reduce' → logprob: -11.240285873413086

Token 15: ' int' (ID: 677)
  Prédit: 'reduce'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'reduce' → logprob: -0.6346616148948669
    2. ' reduce' → logprob: -1.3846616744995117
    3. 'repeat' → logprob: -2.2596616744995117
    4. 'range' → logprob: -2.7596616744995117
    5. ' repeat' → logprob: -4.259661674499512
    6. 'list' → logprob: -4.509661674499512
    7. ' range' → logprob: -4.509661674499512
    8. ' list' → logprob: -4.884661674499512
    9. 're' → logprob: -5.884661674499512
    10. ' iter' → logprob: -7.009661674499512

Token 16: '(input' (ID: 10054)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(' → logprob: -0.010095203295350075
    2. '('' → logprob: -4.760095119476318
    3. '(r' → logprob: -7.760095119476318
    4. '("' → logprob: -8.135095596313477
    5. '(input' → logprob: -8.260095596313477
    6. ' (' → logprob: -8.260095596313477
    7. '32' → logprob: -10.635095596313477
    8. '(max' → logprob: -10.885095596313477
    9. '(round' → logprob: -11.010095596313477
    10. '(s' → logprob: -11.135095596313477

Token 17: '())
' (ID: 4574)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '(' → logprob: -0.014214987866580486
    2. '()' → logprob: -4.889214992523193
    3. ')' → logprob: -5.264214992523193
    4. '('' → logprob: -7.139214992523193
    5. '())' → logprob: -8.639214515686035
    6. '(
' → logprob: -9.014214515686035
    7. '(()' → logprob: -9.514214515686035
    8. '("("' → logprob: -9.639214515686035
    9. '(

' → logprob: -10.764214515686035
    10. ''' → logprob: -10.889214515686035

Token 18: 'area' (ID: 7502)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ')' → logprob: -0.697158932685852
    2. 'n' → logprob: -2.1971588134765625
    3. 's' → logprob: -2.4471588134765625
    4. '*' → logprob: -2.5721588134765625
    5. 'result' → logprob: -3.0721588134765625
    6. '(' → logprob: -3.4471588134765625
    7. ''' → logprob: -3.5721588134765625
    8. '\n' → logprob: -3.6971588134765625
    9. 'for' → logprob: -4.0721588134765625
    10. 'a' → logprob: -4.4471588134765625

Token 19: ' =' (ID: 314)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(' → logprob: -0.6663477420806885
    2. '_' → logprob: -1.0413477420806885
    3. 's' → logprob: -3.2913477420806885
    4. '=' → logprob: -3.4163477420806885
    5. ' =' → logprob: -3.5413477420806885
    6. ')' → logprob: -4.041347503662109
    7. ' ' → logprob: -4.666347503662109
    8. '(s' → logprob: -5.916347503662109
    9. '_s' → logprob: -6.791347503662109
    10. ' (' → logprob: -7.541347503662109

Token 20: ' reduce' (ID: 10389)
  Prédit: ' sum'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' sum' → logprob: -1.0088144540786743
    2. ' ' → logprob: -1.6338144540786743
    3. ' r' → logprob: -2.0088143348693848
    4. '0' → logprob: -2.1338143348693848
    5. 'r' → logprob: -3.0088143348693848
    6. 'sum' → logprob: -3.2588143348693848
    7. ' list' → logprob: -3.5088143348693848
    8. ' (' → logprob: -3.8838143348693848
    9. ' max' → logprob: -4.258814334869385
    10. ' reduce' → logprob: -5.883814334869385

Token 21: '(lambda' (ID: 43341)
  Prédit: '(lambda'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(lambda' → logprob: -0.10048788040876389
    2. '(' → logprob: -2.3504879474639893
    3. '(operator' → logprob: -8.60048770904541
    4. '((' → logprob: -10.10048770904541
    5. '(pow' → logprob: -11.10048770904541
    6. '```' → logprob: -11.10048770904541
    7. '(sum' → logprob: -11.72548770904541
    8. '(
' → logprob: -12.10048770904541
    9. 'lambda' → logprob: -12.97548770904541
    10. ')' → logprob: -13.47548770904541

Token 22: ' x' (ID: 1215)
  Prédit: ' x'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' x' → logprob: -0.5051928162574768
    2. ' lambda' → logprob: -1.130192756652832
    3. ' a' → logprob: -3.255192756652832
    4. ' area' → logprob: -4.130192756652832
    5. 'lambda' → logprob: -5.255192756652832
    6. ' ' → logprob: -5.505192756652832
    7. 'x' → logprob: -5.755192756652832
    8. 'a' → logprob: -5.880192756652832
    9. ' acc' → logprob: -6.255192756652832
    10. 'area' → logprob: -7.130192756652832

Token 23: ',' (ID: 11)
  Prédit: ','
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ',' → logprob: -0.0038885537069290876
    2. ' ,' → logprob: -5.7538886070251465
    3. '+' → logprob: -8.628888130187988
    4. 'lambda' → logprob: -8.628888130187988
    5. ' x' → logprob: -9.378888130187988
    6. ':' → logprob: -9.753888130187988
    7. ',x' → logprob: -9.878888130187988
    8. ' lambda' → logprob: -10.128888130187988
    9. ' +' → logprob: -10.503888130187988
    10. '=lambda' → logprob: -11.003888130187988

Token 24: ' y' (ID: 342)
  Prédit: 'y'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'y' → logprob: -0.632677435874939
    2. ' y' → logprob: -0.757677435874939
    3. ' ' → logprob: -10.63267707824707
    4. 'a' → logprob: -11.25767707824707
    5. 'acc' → logprob: -11.38267707824707
    6. 'x' → logprob: -12.25767707824707
    7. 'area' → logprob: -12.38267707824707
    8. ' lambda' → logprob: -12.63267707824707
    9. 'lambda' → logprob: -12.75767707824707
    10. ' a' → logprob: -13.00767707824707

Token 25: ':' (ID: 25)
  Prédit: ':'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ':' → logprob: -0.002186545403674245
    2. ',' → logprob: -6.5021867752075195
    3. ' :' → logprob: -7.5021867752075195
    4. ':x' → logprob: -10.00218677520752
    5. 'y' → logprob: -10.87718677520752
    6. '+' → logprob: -11.25218677520752
    7. ',y' → logprob: -11.87718677520752
    8. ',x' → logprob: -12.00218677520752
    9. '+:' → logprob: -12.00218677520752
    10. 'x' → logprob: -12.00218677520752

Token 26: ' x' (ID: 1215)
  Prédit: ' x'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' x' → logprob: -0.5761020183563232
    2. 'x' → logprob: -0.8261020183563232
    3. ' ' → logprob: -9.451102256774902
    4. '(x' → logprob: -11.076102256774902
    5. ' (' → logprob: -11.576102256774902
    6. '  ' → logprob: -11.701102256774902
    7. 'lambda' → logprob: -11.951102256774902
    8. '   ' → logprob: -12.076102256774902
    9. 'int' → logprob: -12.201102256774902
    10. '	x' → logprob: -12.326102256774902

Token 27: ' +' (ID: 659)
  Prédit: '*'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '*' → logprob: -0.08764582127332687
    2. '+' → logprob: -3.2126457691192627
    3. ' *' → logprob: -3.2126457691192627
    4. ' +' → logprob: -6.337646007537842
    5. '*y' → logprob: -6.462646007537842
    6. '+y' → logprob: -9.712645530700684
    7. ' ' → logprob: -11.587645530700684
    8. '**' → logprob: -13.087645530700684
    9. '*x' → logprob: -13.087645530700684
    10. ' ' → logprob: -13.337645530700684

Token 28: ' y' (ID: 342)
  Prédit: ' y'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' y' → logprob: -0.11632237583398819
    2. 'y' → logprob: -2.2413222789764404
    3. ' ' → logprob: -6.6163225173950195
    4. ' (' → logprob: -6.8663225173950195
    5. '(y' → logprob: -8.36632251739502
    6. '2' → logprob: -8.61632251739502
    7. '(' → logprob: -8.99132251739502
    8. '1' → logprob: -9.11632251739502
    9. '4' → logprob: -9.11632251739502
    10. ' r' → logprob: -9.86632251739502

Token 29: ',' (ID: 11)
  Prédit: ','
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ',' → logprob: -0.016490831971168518
    2. ')' → logprob: -5.266490936279297
    3. '*' → logprob: -5.266490936279297
    4. ' ,' → logprob: -6.141490936279297
    5. ' *' → logprob: -6.391490936279297
    6. '+' → logprob: -7.266490936279297
    7. ' +' → logprob: -7.391490936279297
    8. '(' → logprob: -8.141490936279297
    9. '),' → logprob: -9.266490936279297
    10. '*,' → logprob: -9.266490936279297

Token 30: ' (' (ID: 350)
  Prédit: 'is'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'is' → logprob: -0.8164814114570618
    2. 'list' → logprob: -1.441481351852417
    3. ' list' → logprob: -2.441481351852417
    4. 'repeat' → logprob: -2.566481351852417
    5. 'map' → logprob: -3.066481351852417
    6. ' is' → logprob: -3.191481351852417
    7. '[' → logprob: -4.191481590270996
    8. ' map' → logprob: -4.441481590270996
    9. '(is' → logprob: -4.441481590270996
    10. ' (' → logprob: -5.066481590270996

Token 31: 'next' (ID: 7311)
  Prédit: 'map'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'map' → logprob: -0.9501982927322388
    2. 'is' → logprob: -1.8251982927322388
    3. 'i' → logprob: -2.200198173522949
    4. 'r' → logprob: -2.825198173522949
    5. 'int' → logprob: -3.075198173522949
    6. 'float' → logprob: -3.700198173522949
    7. '(i' → logprob: -3.700198173522949
    8. 'x' → logprob: -3.825198173522949
    9. '[i' → logprob: -3.825198173522949
    10. '2' → logprob: -3.950198173522949

Token 32: '(is' (ID: 16171)
  Prédit: '(is'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(is' → logprob: -0.02691541239619255
    2. '(re' → logprob: -4.151915550231934
    3. '(' → logprob: -4.901915550231934
    4. '(iter' → logprob: -5.901915550231934
    5. '(r' → logprob: -9.151915550231934
    6. '(it' → logprob: -9.651915550231934
    7. '(area' → logprob: -9.651915550231934
    8. '(map' → logprob: -10.026915550231934
    9. 'is' → logprob: -10.026915550231934
    10. '(s' → logprob: -10.526915550231934

Token 33: 'lice' (ID: 7321)
  Prédit: 'lice'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'lice' → logprob: -2.4272752852994017e-05
    2. '```' → logprob: -12.50002384185791
    3. 'slice' → logprob: -12.62502384185791
    4. 'l' → logprob: -13.00002384185791
    5. 'li' → logprob: -13.12502384185791
    6. 'ice' → logprob: -13.37502384185791
    7. '(slice' → logprob: -13.37502384185791
    8. '(' → logprob: -13.62502384185791
    9. 'licing' → logprob: -13.75002384185791
    10. 'lace' → logprob: -13.87502384185791

Token 34: '(re' (ID: 8178)
  Prédit: '(re'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(re' → logprob: -0.0009514793055132031
    2. '(' → logprob: -7.875951290130615
    3. '(r' → logprob: -8.375951766967773
    4. 'repeat' → logprob: -8.625951766967773
    5. '(iter' → logprob: -9.875951766967773
    6. '(range' → logprob: -10.000951766967773
    7. ')' → logprob: -11.000951766967773
    8. ' repeat' → logprob: -11.875951766967773
    9. '(it' → logprob: -12.000951766967773
    10. '(area' → logprob: -12.250951766967773

Token 35: 'peat' (ID: 18888)
  Prédit: 'peat'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'peat' → logprob: -2.3795937522663735e-05
    2. 'pe' → logprob: -10.87502384185791
    3. 'peated' → logprob: -13.25002384185791
    4. 'PEAT' → logprob: -13.62502384185791
    5. 'repeat' → logprob: -15.25002384185791
    6. 'peating' → logprob: -15.50002384185791
    7. 'peater' → logprob: -15.50002384185791
    8. '(' → logprob: -15.62502384185791
    9. 'p' → logprob: -16.000022888183594
    10. ')' → logprob: -16.000022888183594

Token 36: '(r' (ID: 4729)
  Prédit: '(r'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(r' → logprob: -0.12407182157039642
    2. '(' → logprob: -2.2490718364715576
    3. '('' → logprob: -5.6240715980529785
    4. '(area' → logprob: -6.4990715980529785
    5. '((' → logprob: -7.3740715980529785
    6. '(s' → logprob: -7.3740715980529785
    7. '(y' → logprob: -7.4990715980529785
    8. '(a' → logprob: -7.6240715980529785
    9. '('*' → logprob: -7.7490715980529785
    10. '(n' → logprob: -7.7490715980529785

Token 37: '*r' (ID: 92096)
  Prédit: '),'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '),' → logprob: -0.7349883317947388
    2. ',' → logprob: -0.8599883317947388
    3. '*r' → logprob: -3.234988212585449
    4. ' ,' → logprob: -3.859988212585449
    5. ',r' → logprob: -4.984988212585449
    6. '**' → logprob: -4.984988212585449
    7. '*' → logprob: -5.359988212585449
    8. ' ),' → logprob: -5.359988212585449
    9. ')' → logprob: -5.859988212585449
    10. ' ' → logprob: -5.984988212585449

Token 38: ',' (ID: 11)
  Prédit: ','
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ',' → logprob: -0.11687976121902466
    2. '),' → logprob: -2.24187970161438
    3. ' ,' → logprob: -5.866879940032959
    4. ',n' → logprob: -8.6168794631958
    5. ' ),' → logprob: -8.6168794631958
    6. ',r' → logprob: -8.8668794631958
    7. ')' → logprob: -8.8668794631958
    8. ',),' → logprob: -9.1168794631958
    9. '   ' → logprob: -9.2418794631958
    10. ')),' → logprob: -10.1168794631958

Token 39: ' i' (ID: 575)
  Prédit: 'r'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'r' → logprob: -0.15233391523361206
    2. ' r' → logprob: -2.277333974838257
    3. 'i' → logprob: -4.277333736419678
    4. '4' → logprob: -5.652333736419678
    5. '3' → logprob: -6.027333736419678
    6. ' i' → logprob: -6.152333736419678
    7. '6' → logprob: -6.152333736419678
    8. '2' → logprob: -6.277333736419678
    9. ' ' → logprob: -6.277333736419678
    10. '9' → logprob: -6.402333736419678

Token 40: '),' (ID: 936)
  Prédit: '),'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '),' → logprob: -0.23911496996879578
    2. '+' → logprob: -1.6141149997711182
    3. '))' → logprob: -5.489114761352539
    4. ')))' → logprob: -5.739114761352539
    5. ' +' → logprob: -6.114114761352539
    6. ')' → logprob: -6.614114761352539
    7. ',' → logprob: -6.614114761352539
    8. ' ),' → logprob: -7.239114761352539
    9. ' ' → logprob: -8.614114761352539
    10. '1' → logprob: -8.864114761352539

Token 41: ' ' (ID: 220)
  Prédit: '1'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '1' → logprob: -0.5357643365859985
    2. ' ' → logprob: -1.4107643365859985
    3. '0' → logprob: -1.7857643365859985
    4. 'i' → logprob: -6.285764217376709
    5. ' i' → logprob: -7.785764217376709
    6. '2' → logprob: -7.910764217376709
    7. '10' → logprob: -9.035764694213867
    8. '   ' → logprob: -9.660764694213867
    9. '3' → logprob: -10.035764694213867
    10. '  ' → logprob: -10.160764694213867

Token 42: '0' (ID: 15)
  Prédit: '1'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '1' → logprob: -0.4188399910926819
    2. '0' → logprob: -1.168839931488037
    3. 'i' → logprob: -3.918839931488037
    4. ' ' → logprob: -4.668839931488037
    5. 'r' → logprob: -6.793839931488037
    6. '10' → logprob: -8.168840408325195
    7. '2' → logprob: -8.293840408325195
    8. ' i' → logprob: -9.043840408325195
    9. '100' → logprob: -9.418840408325195
    10. '   ' → logprob: -9.543840408325195

Token 43: ',' (ID: 11)
  Prédit: ','
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ',' → logprob: -0.02995377965271473
    2. ',i' → logprob: -3.904953718185425
    3. ' ,' → logprob: -5.279953956604004
    4. '))' → logprob: -6.404953956604004
    5. ')))' → logprob: -6.779953956604004
    6. ',n' → logprob: -8.154953956604004
    7. ',r' → logprob: -8.279953956604004
    8. ')' → logprob: -8.404953956604004
    9. '+' → logprob: -8.904953956604004
    10. ' ' → logprob: -9.029953956604004

Token 44: ' ' (ID: 220)
  Prédit: '1'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '1' → logprob: -0.11945592612028122
    2. 'i' → logprob: -2.3694558143615723
    3. ' ' → logprob: -4.244455814361572
    4. ' i' → logprob: -5.494455814361572
    5. '   ' → logprob: -8.24445629119873
    6. 'None' → logprob: -9.61945629119873
    7. '2' → logprob: -9.74445629119873
    8. '  ' → logprob: -9.86945629119873
    9. ' None' → logprob: -9.99445629119873
    10. '3' → logprob: -10.61945629119873

Token 45: '1' (ID: 16)
  Prédit: 'i'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'i' → logprob: -0.11570914834737778
    2. '1' → logprob: -2.240709066390991
    3. ' i' → logprob: -6.49070930480957
    4. ' ' → logprob: -7.99070930480957
    5. '10' → logprob: -8.36570930480957
    6. 'r' → logprob: -8.74070930480957
    7. '2' → logprob: -8.99070930480957
    8. '-' → logprob: -9.24070930480957
    9. '3' → logprob: -9.36570930480957
    10. '   ' → logprob: -9.61570930480957

Token 46: '))' (ID: 915)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')' → logprob: -0.07027651369571686
    2. '))' → logprob: -2.6952764987945557
    3. ')))' → logprob: -8.320276260375977
    4. ' )' → logprob: -10.445276260375977
    5. '),' → logprob: -10.820276260375977
    6. ' ' → logprob: -11.320276260375977
    7. '))))' → logprob: -11.570276260375977
    8. ')
' → logprob: -11.820276260375977
    9. ')),' → logprob: -13.195276260375977
    10. ' ))' → logprob: -13.445276260375977

Token 47: ' for' (ID: 395)
  Prédit: ' for'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' for' → logprob: -0.1078970730304718
    2. 'for' → logprob: -2.3578970432281494
    3. ')' → logprob: -5.2328972816467285
    4. ' ' → logprob: -7.1078972816467285
    5. ',' → logprob: -7.4828972816467285
    6. '))' → logprob: -7.9828972816467285
    7. ' )' → logprob: -8.85789680480957
    8. '+' → logprob: -9.10789680480957
    9. '   ' → logprob: -9.73289680480957
    10. ' ,' → logprob: -9.85789680480957

Token 48: ' i' (ID: 575)
  Prédit: ' range'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' range' → logprob: -0.05769488215446472
    2. 'range' → logprob: -2.932694911956787
    3. ' i' → logprob: -6.057694911956787
    4. 'i' → logprob: -7.682694911956787
    5. ' ' → logprob: -13.057694435119629
    6. ' xrange' → logprob: -13.182694435119629
    7. '	range' → logprob: -13.557694435119629
    8. ' in' → logprob: -14.057694435119629
    9. ' r' → logprob: -14.807694435119629
    10. '(range' → logprob: -15.057694435119629

Token 49: ' in' (ID: 306)
  Prédit: ' in'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' in' → logprob: -0.001709209755063057
    2. ' range' → logprob: -6.501708984375
    3. 'in' → logprob: -9.001708984375
    4. 'range' → logprob: -9.626708984375
    5. ')' → logprob: -11.501708984375
    6. ',' → logprob: -12.876708984375
    7. ' ' → logprob: -13.001708984375
    8. '(range' → logprob: -13.876708984375
    9. ' r' → logprob: -14.501708984375
    10. ' )' → logprob: -15.001708984375

Token 50: ' range' (ID: 3352)
  Prédit: ' range'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' range' → logprob: -0.3868802487850189
    2. 'range' → logprob: -1.1368802785873413
    3. '(range' → logprob: -12.761879920959473
    4. '	range' → logprob: -12.886879920959473
    5. ' ' → logprob: -13.261879920959473
    6. ' xrange' → logprob: -13.386879920959473
    7. ')' → logprob: -15.511879920959473
    8. '  ' → logprob: -16.63688087463379
    9. '   ' → logprob: -16.76188087463379
    10. 'r' → logprob: -16.88688087463379

Token 51: '(' (ID: 7)
  Prédit: '('
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(' → logprob: -0.6931632161140442
    2. '(r' → logprob: -0.6931632161140442
    3. '(n' → logprob: -12.44316291809082
    4. ' (' → logprob: -12.69316291809082
    5. '1' → logprob: -12.94316291809082
    6. '(
' → logprob: -13.19316291809082
    7. '((' → logprob: -13.56816291809082
    8. ')' → logprob: -13.69316291809082
    9. '(

' → logprob: -14.31816291809082
    10. 'r' → logprob: -14.94316291809082

Token 52: '3' (ID: 18)
  Prédit: 'r'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'r' → logprob: -0.14649651944637299
    2. '1' → logprob: -2.021496534347534
    3. ' r' → logprob: -5.646496295928955
    4. ' ' → logprob: -8.896496772766113
    5. '0' → logprob: -9.896496772766113
    6. '2' → logprob: -10.396496772766113
    7. '(r' → logprob: -10.771496772766113
    8. '3' → logprob: -11.771496772766113
    9. '(' → logprob: -11.896496772766113
    10. '4' → logprob: -12.021496772766113

Token 53: ')))
' (ID: 12562)
  Prédit: '))'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '))' → logprob: -0.19721810519695282
    2. ')))' → logprob: -1.9472180604934692
    3. ')' → logprob: -3.322218179702759
    4. '))))' → logprob: -9.82221794128418
    5. '),' → logprob: -10.07221794128418
    6. '+' → logprob: -10.07221794128418
    7. ' ))' → logprob: -10.82221794128418
    8. ')),' → logprob: -11.19721794128418
    9. '3' → logprob: -11.32221794128418
    10. ' ' → logprob: -11.44721794128418

Token 54: 'print' (ID: 1598)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ')' → logprob: -0.19124968349933624
    2. '+' → logprob: -2.1912496089935303
    3. '(' → logprob: -3.0662496089935303
    4. '<|end|>' → logprob: -5.191249847412109
    5. '#' → logprob: -5.316249847412109
    6. '
' → logprob: -6.691249847412109
    7. ' ' → logprob: -6.941249847412109
    8. '*' → logprob: -7.566249847412109
    9. '```' → logprob: -7.691249847412109
    10. '**' → logprob: -7.941249847412109

Token 55: '(area' (ID: 115185)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(' → logprob: -0.6933178305625916
    2. '(area' → logprob: -0.6933178305625916
    3. '(r' → logprob: -9.193317413330078
    4. '((' → logprob: -11.318317413330078
    5. 'area' → logprob: -11.443317413330078
    6. '('' → logprob: -11.568317413330078
    7. '("("' → logprob: -11.943317413330078
    8. '()' → logprob: -12.068317413330078
    9. '(sum' → logprob: -12.568317413330078
    10. '(`' → logprob: -12.818317413330078

Token 56: ')' (ID: 8)
  Prédit: ')'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')' → logprob: -0.005248344969004393
    2. '))' → logprob: -5.255248546600342
    3. ')))' → logprob: -12.130248069763184
    4. ' )' → logprob: -12.755248069763184
    5. '**' → logprob: -13.255248069763184
    6. '*' → logprob: -13.505248069763184
    7. '+' → logprob: -13.880248069763184
    8. ')**' → logprob: -14.505248069763184
    9. '`)' → logprob: -14.630248069763184
    10. ')`' → logprob: -15.130248069763184


RÉSUMÉ:
--------------------------------------------------------------------------------
Total des tokens analysés: 54
Tokens correctement prédits (1ère position, stricte): 22
Tokens correctement prédits (1ère position, avec adaptation): 22
Tokens correctement prédits (top 10): 40
Précision stricte (1ère position): 40.74%
Précision adaptée (1ère position): 40.74%
Précision (top 10): 74.07%
================================================================================
