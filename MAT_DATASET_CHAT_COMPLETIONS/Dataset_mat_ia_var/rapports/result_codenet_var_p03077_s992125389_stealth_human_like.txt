================================================================================
ANALYSE DE PRÉDICTION TOKEN PAR TOKEN (BATCH API)
Date: 2025-06-04 20:03:47
Modèle de tokenisation: gpt-4o-mini
================================================================================

SCRIPT ANALYSÉ:
--------------------------------------------------------------------------------
n = int(input()) # nombre d'éléments je suppose ?
abc = []
for x in range(5):
    val = int(input())
    abc.append(val) # rien de spécial ici

amin = abc[0] # au début je prends le premier
for v in abc:
    if v < amin:
        amin = v # tiens, nouvelle valeur minimale

# Bon, je pense que c'est cette formule.
if n % amin == 0:
    answer = n // amin - 1 + 5 # un petit hack ici...
else:
    answer = n // amin + 5

# Affichage final
print(answer)
--------------------------------------------------------------------------------

RÉSULTATS D'ANALYSE TOKEN PAR TOKEN:
--------------------------------------------------------------------------------
Token 0: 'n' (ID: 77)
  → Token d'amorce (pas de prédiction)

Token 1: ' =' (ID: 314)
  → Token d'amorce (pas de prédiction)

Token 2: ' int' (ID: 677)
  → Token d'amorce (pas de prédiction)

Token 3: '(input' (ID: 10054)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '(' → logprob: -0.0004278083215467632
    2. ''' → logprob: -8.625428199768066
    3. '('' → logprob: -9.375428199768066
    4. '(n' → logprob: -9.875428199768066
    5. '```' → logprob: -10.375428199768066
    6. '`' → logprob: -10.750428199768066
    7. '("("' → logprob: -11.125428199768066
    8. '(
' → logprob: -11.125428199768066
    9. ')' → logprob: -11.750428199768066
    10. '()' → logprob: -12.250428199768066

Token 4: '())' (ID: 3516)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(' → logprob: -0.13287097215652466
    2. ')' → logprob: -2.13287091255188
    3. '()' → logprob: -5.382871150970459
    4. '())' → logprob: -7.382871150970459
    5. '(
' → logprob: -8.1328706741333
    6. '```' → logprob: -9.8828706741333
    7. '(

' → logprob: -10.2578706741333
    8. '('' → logprob: -10.3828706741333
    9. ''' → logprob: -10.6328706741333
    10. '(n' → logprob: -10.7578706741333

Token 5: ' #' (ID: 1069)
  Prédit: '\n'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '\n' → logprob: -0.3534877598285675
    2. '\' → logprob: -1.7284877300262451
    3. '```' → logprob: -3.603487730026245
    4. '#' → logprob: -3.978487730026245
    5. '
' → logprob: -4.353487968444824
    6. 'for' → logprob: -4.478487968444824
    7. '*' → logprob: -4.728487968444824
    8. '\r' → logprob: -4.978487968444824
    9. '`' → logprob: -5.478487968444824
    10. ' 
' → logprob: -5.603487968444824

Token 6: ' nombre' (ID: 9733)
  Prédit: ' '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' ' → logprob: -0.004696407355368137
    2. ' \' → logprob: -6.629696369171143
    3. ''' → logprob: -7.004696369171143
    4. ' n' → logprob: -7.879696369171143
    5. '  ' → logprob: -8.0046968460083
    6. ')' → logprob: -8.2546968460083
    7. '"' → logprob: -8.5046968460083
    8. ' )' → logprob: -8.8796968460083
    9. 'n' → logprob: -9.0046968460083
    10. '\' → logprob: -9.2546968460083

Token 7: ' d' (ID: 272)
  Prédit: ' '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' ' → logprob: -0.47593674063682556
    2. ')' → logprob: -2.4759366512298584
    3. '_' → logprob: -2.6009366512298584
    4. '*' → logprob: -2.6009366512298584
    5. '+' → logprob: -3.2259366512298584
    6. '#' → logprob: -4.1009368896484375
    7. '%' → logprob: -4.1009368896484375
    8. '=' → logprob: -4.3509368896484375
    9. 's' → logprob: -4.7259368896484375
    10. '[' → logprob: -5.2259368896484375

Token 8: ''' (ID: 6)
  Prédit: '''
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ''' → logprob: -0.7652536630630493
    2. ''é' → logprob: -1.1402536630630493
    3. ''él' → logprob: -2.1402535438537598
    4. ''ét' → logprob: -3.6402535438537598
    5. ''éc' → logprob: -4.39025354385376
    6. ''ent' → logprob: -4.39025354385376
    7. 'élé' → logprob: -5.01525354385376
    8. 'é' → logprob: -5.14025354385376
    9. 'e' → logprob: -5.39025354385376
    10. ''e' → logprob: -5.51525354385376

Token 9: 'élé' (ID: 15228)
  Prédit: 'élé'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'élé' → logprob: -0.3751557767391205
    2. 'él' → logprob: -1.6251558065414429
    3. 'en' → logprob: -2.8751556873321533
    4. 'é' → logprob: -3.8751556873321533
    5. ''él' → logprob: -4.625155925750732
    6. 'ét' → logprob: -5.000155925750732
    7. 'équ' → logprob: -5.500155925750732
    8. 'év' → logprob: -5.625155925750732
    9. 'én' → logprob: -5.875155925750732
    10. ''' → logprob: -6.875155925750732

Token 10: 'ments' (ID: 1626)
  Prédit: 'ments'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'ments' → logprob: -0.005332420580089092
    2. 'ment' → logprob: -5.7553324699401855
    3. 'v' → logprob: -6.7553324699401855
    4. '```' → logprob: -8.505331993103027
    5. 'ves' → logprob: -8.755331993103027
    6. 'm' → logprob: -8.755331993103027
    7. 'èves' → logprob: -8.880331993103027
    8. 've' → logprob: -8.880331993103027
    9. 'nts' → logprob: -10.880331993103027
    10. 'vation' → logprob: -11.005331993103027

Token 11: ' je' (ID: 1264)
  Prédit: '
'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '
' → logprob: -1.4447026252746582
    2. 's' → logprob: -1.5697026252746582
    3. ' ' → logprob: -1.8197026252746582
    4. '\n' → logprob: -2.444702625274658
    5. 'for' → logprob: -2.944702625274658
    6. 'a' → logprob: -3.444702625274658
    7. 'i' → logprob: -3.569702625274658
    8. ')' → logprob: -3.569702625274658
    9. '\' → logprob: -3.944702625274658
    10. '```' → logprob: -4.194702625274658

Token 12: ' suppose' (ID: 35968)
  Prédit: 'a'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'a' → logprob: -0.8176684975624084
    2. 'n' → logprob: -0.9426684975624084
    3. 's' → logprob: -2.8176684379577637
    4. ')' → logprob: -3.8176684379577637
    5. 'u' → logprob: -3.8176684379577637
    6. ']' → logprob: -4.567668437957764
    7. '=' → logprob: -4.942668437957764
    8. '```' → logprob: -4.942668437957764
    9. '   ' → logprob: -5.067668437957764
    10. '+' → logprob: -5.317668437957764

Token 13: ' ?
' (ID: 19740)
  Prédit: '\n'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '\n' → logprob: -0.40445804595947266
    2. '\' → logprob: -2.5294580459594727
    3. '
' → logprob: -2.5294580459594727
    4. 'for' → logprob: -3.0294580459594727
    5. ' ' → logprob: -3.9044580459594727
    6. 's' → logprob: -4.154458045959473
    7. ')' → logprob: -4.279458045959473
    8. '\r' → logprob: -4.404458045959473
    9. '```' → logprob: -4.779458045959473
    10. '#' → logprob: -4.779458045959473

Token 14: 'abc' (ID: 26682)
  Prédit: 's'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 's' → logprob: -0.5460873246192932
    2. 'for' → logprob: -1.5460872650146484
    3. 'numbers' → logprob: -3.1710872650146484
    4. 'elements' → logprob: -3.4210872650146484
    5. 'data' → logprob: -3.6710872650146484
    6. 'values' → logprob: -3.9210872650146484
    7. '\n' → logprob: -4.046087265014648
    8. 'a' → logprob: -4.421087265014648
    9. 'sum' → logprob: -4.421087265014648
    10. '\' → logprob: -4.546087265014648

Token 15: ' =' (ID: 314)
  Prédit: '['
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '[' → logprob: -0.25925061106681824
    2. ' =' → logprob: -2.0092506408691406
    3. '=' → logprob: -2.7592506408691406
    4. '_' → logprob: -3.6342506408691406
    5. ')' → logprob: -7.259250640869141
    6. 'a' → logprob: -7.384250640869141
    7. ']' → logprob: -7.509250640869141
    8. ' ' → logprob: -7.634250640869141
    9. '[:' → logprob: -7.884250640869141
    10. 's' → logprob: -8.50925064086914

Token 16: ' []
' (ID: 8911)
  Prédit: ' []'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' []' → logprob: -0.5404534339904785
    2. ' [' → logprob: -1.5404534339904785
    3. '[]' → logprob: -1.7904534339904785
    4. 'list' → logprob: -4.6654534339904785
    5. '[' → logprob: -4.7904534339904785
    6. ' list' → logprob: -5.5404534339904785
    7. ' ['' → logprob: -5.6654534339904785
    8. '['' → logprob: -5.9154534339904785
    9. '[input' → logprob: -6.4154534339904785
    10. ' ' → logprob: -6.9154534339904785

Token 17: 'for' (ID: 1938)
  Prédit: 'for'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'for' → logprob: -0.0010575797641649842
    2. ' for' → logprob: -7.1260576248168945
    3. '```' → logprob: -9.251057624816895
    4. '
' → logprob: -9.501057624816895
    5. 'i' → logprob: -10.251057624816895
    6. '[' → logprob: -10.751057624816895
    7. 'n' → logprob: -11.751057624816895
    8. '\n' → logprob: -12.751057624816895
    9. 'f' → logprob: -12.876057624816895
    10. '_' → logprob: -13.376057624816895

Token 18: ' x' (ID: 1215)
  Prédit: ' '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' ' → logprob: -0.03917525336146355
    2. ' i' → logprob: -3.289175271987915
    3. 'i' → logprob: -7.164175033569336
    4. '  ' → logprob: -8.789175033569336
    5. ' _' → logprob: -9.039175033569336
    6. '_' → logprob: -9.539175033569336
    7. ' ‌' → logprob: -12.289175033569336
    8. ' ' → logprob: -12.539175033569336
    9. ' n' → logprob: -14.039175033569336
    10. ' ▁' → logprob: -14.164175033569336

Token 19: ' in' (ID: 306)
  Prédit: ' in'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' in' → logprob: -0.012015190906822681
    2. 'in' → logprob: -4.512015342712402
    3. ' ' → logprob: -7.012015342712402
    4. '  ' → logprob: -10.512015342712402
    5. 'n' → logprob: -11.512015342712402
    6. 'space' → logprob: -12.387015342712402
    7. 'import' → logprob: -12.762015342712402
    8. '	in' → logprob: -12.887015342712402
    9. '_' → logprob: -13.012015342712402
    10. ' ' → logprob: -13.512015342712402

Token 20: ' range' (ID: 3352)
  Prédit: ' range'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' range' → logprob: -0.25213468074798584
    2. 'range' → logprob: -1.5021346807479858
    3. ' abc' → logprob: -9.377134323120117
    4. 'n' → logprob: -10.127134323120117
    5. ' n' → logprob: -10.627134323120117
    6. ' ' → logprob: -11.002134323120117
    7. 'abc' → logprob: -11.127134323120117
    8. '	range' → logprob: -12.377134323120117
    9. 'rang' → logprob: -13.002134323120117
    10. 'in' → logprob: -13.127134323120117

Token 21: '(' (ID: 7)
  Prédit: '(n'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(n' → logprob: -0.5759430527687073
    2. '(' → logprob: -0.8259430527687073
    3. ' (' → logprob: -13.200942993164062
    4. '(x' → logprob: -14.450942993164062
    5. '(
' → logprob: -14.700942993164062
    6. '(len' → logprob: -15.575942993164062
    7. '(s' → logprob: -16.325942993164062
    8. '(nx' → logprob: -16.575942993164062
    9. '()' → logprob: -16.825942993164062
    10. '((' → logprob: -16.950942993164062

Token 22: '5' (ID: 20)
  Prédit: 'n'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'n' → logprob: -0.0006587040261365473
    2. ' n' → logprob: -7.3756585121154785
    3. '1' → logprob: -10.500658988952637
    4. '0' → logprob: -13.250658988952637
    5. ')n' → logprob: -13.375658988952637
    6. ')' → logprob: -14.625658988952637
    7. '(n' → logprob: -14.750658988952637
    8. '	n' → logprob: -16.12565803527832
    9. '2' → logprob: -16.25065803527832
    10. ' ' → logprob: -16.37565803527832

Token 23: '):
' (ID: 1883)
  Prédit: '):'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '):' → logprob: -0.16235318779945374
    2. ')' → logprob: -1.9123531579971313
    3. '+' → logprob: -7.037353038787842
    4. ' ):' → logprob: -8.037353515625
    5. ',' → logprob: -8.287353515625
    6. ':' → logprob: -8.412353515625
    7. ' )' → logprob: -8.787353515625
    8. 'n' → logprob: -8.912353515625
    9. ')n' → logprob: -10.412353515625
    10. '(n' → logprob: -10.787353515625

Token 24: '   ' (ID: 271)
  Prédit: '    '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '    ' → logprob: -1.0362579822540283
    2. ' ' → logprob: -1.1612579822540283
    3. '   ' → logprob: -1.1612579822540283
    4. ':' → logprob: -5.161257743835449
    5. ' abc' → logprob: -5.286257743835449
    6. '  ' → logprob: -5.786257743835449
    7. 'abc' → logprob: -6.411257743835449
    8. ' :' → logprob: -7.036257743835449
    9. '[' → logprob: -8.03625774383545
    10. ' if' → logprob: -8.16125774383545

Token 25: ' val' (ID: 1459)
  Prédit: ' abc'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' abc' → logprob: -0.5423786640167236
    2. 'abc' → logprob: -0.9173786640167236
    3. '   ' → logprob: -4.0423784255981445
    4. ' ' → logprob: -7.9173784255981445
    5. '    ' → logprob: -8.167378425598145
    6. 'n' → logprob: -8.542378425598145
    7. ' ab' → logprob: -8.917378425598145
    8. ' n' → logprob: -9.167378425598145
    9. ' if' → logprob: -9.542378425598145
    10. '  ' → logprob: -10.104878425598145

Token 26: ' =' (ID: 314)
  Prédit: ' ='
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' =' → logprob: -0.6616173982620239
    2. 'al' → logprob: -2.1616172790527344
    3. '=' → logprob: -2.4116172790527344
    4. '   ' → logprob: -2.4116172790527344
    5. ' ' → logprob: -2.9116172790527344
    6. 'ue' → logprob: -3.1616172790527344
    7. 'a' → logprob: -3.2866172790527344
    8. 'uer' → logprob: -3.6616172790527344
    9. 'eur' → logprob: -4.911617279052734
    10. 'u' → logprob: -5.286617279052734

Token 27: ' int' (ID: 677)
  Prédit: ' int'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' int' → logprob: -0.49232494831085205
    2. 'int' → logprob: -0.992324948310852
    3. ' input' → logprob: -4.2423248291015625
    4. 'input' → logprob: -5.7423248291015625
    5. ' n' → logprob: -8.742324829101562
    6. 'n' → logprob: -9.117324829101562
    7. ' x' → logprob: -9.617324829101562
    8. ' float' → logprob: -9.867324829101562
    9. 'float' → logprob: -10.867324829101562
    10. '   ' → logprob: -11.242324829101562

Token 28: '(input' (ID: 10054)
  Prédit: '(input'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(input' → logprob: -0.01815345324575901
    2. '(' → logprob: -4.018153667449951
    3. 'input' → logprob: -13.518153190612793
    4. ' (' → logprob: -13.893153190612793
    5. '(
' → logprob: -14.893153190612793
    6. '=input' → logprob: -15.768153190612793
    7. '<input' → logprob: -15.768153190612793
    8. '()' → logprob: -16.01815414428711
    9. '(in' → logprob: -16.14315414428711
    10. '(x' → logprob: -16.26815414428711

Token 29: '())
' (ID: 4574)
  Prédit: '())'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '())' → logprob: -0.1002756804227829
    2. '()' → logprob: -2.350275754928589
    3. '(' → logprob: -9.975275993347168
    4. '()))' → logprob: -11.850275993347168
    5. '();)' → logprob: -12.600275993347168
    6. ')' → logprob: -12.725275993347168
    7. '()>' → logprob: -13.225275993347168
    8. ' ())' → logprob: -13.350275993347168
    9. '()]' → logprob: -14.100275993347168
    10. '());' → logprob: -14.100275993347168

Token 30: '   ' (ID: 271)
  Prédit: ''
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False

Token 31: ' abc' (ID: 75094)
  Prédit: 'abc'
  Correct (stricte): False
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'abc' (adapté à ' abc') → logprob: -0.13806700706481934
    2. ' abc' → logprob: -3.0130670070648193
    3. '<|end|>' → logprob: -3.5130670070648193
    4. ' ' → logprob: -3.6380670070648193
    5. '   ' → logprob: -4.138067245483398
    6. ')' → logprob: -5.513067245483398
    7. '    ' → logprob: -6.263067245483398
    8. '<|end|>' → logprob: -8.013067245483398
    9. '  ' → logprob: -8.763067245483398
    10. '```' → logprob: -8.763067245483398

Token 32: '.append' (ID: 3709)
  Prédit: '.append'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '.append' → logprob: -0.16026364266872406
    2. '.' → logprob: -1.9102636575698853
    3. ' .' → logprob: -11.660264015197754
    4. '.extend' → logprob: -11.660264015197754
    5. '.app' → logprob: -12.535264015197754
    6. '.Append' → logprob: -12.535264015197754
    7. '.setdefault' → logprob: -12.660264015197754
    8. 'append' → logprob: -12.910264015197754
    9. '.add' → logprob: -13.410264015197754
    10. '.push' → logprob: -13.410264015197754

Token 33: '(val' (ID: 17391)
  Prédit: '(val'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(val' → logprob: -0.06198034808039665
    2. '(' → logprob: -2.8119802474975586
    3. '(x' → logprob: -11.436980247497559
    4. '(value' → logprob: -14.436980247497559
    5. '(
' → logprob: -15.061980247497559
    6. '(valor' → logprob: -15.061980247497559
    7. '[val' → logprob: -15.811980247497559
    8. '(

' → logprob: -15.811980247497559
    9. '((' → logprob: -16.061981201171875
    10. '(v' → logprob: -16.561981201171875

Token 34: ')' (ID: 8)
  Prédit: ')'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')' → logprob: -2.2200749754119897e-06
    2. ' )' → logprob: -14.000001907348633
    3. '))' → logprob: -14.250001907348633
    4. ')
' → logprob: -14.750001907348633
    5. '')' → logprob: -16.375001907348633
    6. '`)' → logprob: -16.750001907348633
    7. ')))' → logprob: -17.500001907348633
    8. '   ' → logprob: -17.625001907348633
    9. ')`' → logprob: -18.500001907348633
    10. '）' → logprob: -18.625001907348633

Token 35: ' #' (ID: 1069)
  Prédit: '['
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '[' → logprob: -0.38190558552742004
    2. ' ' → logprob: -2.3819055557250977
    3. '[n' → logprob: -2.7569055557250977
    4. '<|end|>' → logprob: -2.8819055557250977
    5. ')' → logprob: -3.8819055557250977
    6. '#' → logprob: -4.506905555725098
    7. 'n' → logprob: -4.506905555725098
    8. '\n' → logprob: -4.631905555725098
    9. 's' → logprob: -5.256905555725098
    10. '```' → logprob: -5.381905555725098

Token 36: ' rien' (ID: 23082)
  Prédit: ' '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' ' → logprob: -0.4099356532096863
    2. '<|end|>' → logprob: -1.534935712814331
    3. ')' → logprob: -2.659935712814331
    4. '\n' → logprob: -4.284935474395752
    5. '  ' → logprob: -5.284935474395752
    6. 'n' → logprob: -5.534935474395752
    7. ' )' → logprob: -5.659935474395752
    8. '    ' → logprob: -5.909935474395752
    9. '```' → logprob: -5.909935474395752
    10. '<|end|>' → logprob: -6.034935474395752

Token 37: ' de' (ID: 334)
  Prédit: ''
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False

Token 38: ' spécial' (ID: 40397)
  Prédit: 'plus'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'plus' → logprob: -0.1648423671722412
    2. ' plus' → logprob: -2.039842367172241
    3. '+' → logprob: -5.16484260559082
    4. 'sp' → logprob: -5.28984260559082
    5. ' ' → logprob: -5.91484260559082
    6. 'r' → logprob: -6.03984260559082
    7. 'special' → logprob: -6.28984260559082
    8. 'more' → logprob: -7.28984260559082
    9. '_plus' → logprob: -7.53984260559082
    10. '<|end|>' → logprob: -8.16484260559082

Token 39: ' ici' (ID: 27994)
  Prédit: '['
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '[' → logprob: -1.0126149654388428
    2. '<|end|>' → logprob: -1.3876149654388428
    3. ')' → logprob: -2.3876149654388428
    4. '
' → logprob: -2.5126149654388428
    5. ' ' → logprob: -3.0126149654388428
    6. '#' → logprob: -3.3876149654388428
    7. '\n' → logprob: -4.012615203857422
    8. ']' → logprob: -4.262615203857422
    9. 'n' → logprob: -4.262615203857422
    10. 's' → logprob: -4.637615203857422

Token 40: '

' (ID: 279)
  Prédit: ' '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' ' → logprob: -1.4806526899337769
    2. '<|end|>' → logprob: -1.4806526899337769
    3. '[' → logprob: -1.6056526899337769
    4. '\n' → logprob: -2.2306528091430664
    5. ')' → logprob: -2.7306528091430664
    6. 'n' → logprob: -3.6056528091430664
    7. '
' → logprob: -3.7306528091430664
    8. '#' → logprob: -3.8556528091430664
    9. '[n' → logprob: -3.8556528091430664
    10. '```' → logprob: -4.230652809143066

Token 41: 'amin' (ID: 7893)
  Prédit: ''
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False

Token 42: ' =' (ID: 314)
  Prédit: '_'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_' → logprob: -0.01612258143723011
    2. '()' → logprob: -4.641122817993164
    3. '_val' → logprob: -6.141122817993164
    4. ' =' → logprob: -6.516122817993164
    5. '(' → logprob: -6.891122817993164
    6. '=' → logprob: -7.141122817993164
    7. '[:]' → logprob: -8.516122817993164
    8. 'imum' → logprob: -8.766122817993164
    9. '_idx' → logprob: -9.891122817993164
    10. 'e' → logprob: -10.141122817993164

Token 43: ' abc' (ID: 75094)
  Prédit: 'min'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'min' → logprob: -0.24178630113601685
    2. ' min' → logprob: -1.741786241531372
    3. 'abc' → logprob: -3.616786241531372
    4. ' abc' → logprob: -4.491786479949951
    5. 'float' → logprob: -7.616786479949951
    6. '0' → logprob: -7.991786479949951
    7. ' float' → logprob: -8.616786003112793
    8. '100' → logprob: -8.616786003112793
    9. 'None' → logprob: -9.866786003112793
    10. ' None' → logprob: -9.866786003112793

Token 44: '[' (ID: 58)
  Prédit: '[:]'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '[:]' → logprob: -0.08581606298685074
    2. '.copy' → logprob: -3.0858161449432373
    3. '[' → logprob: -3.4608161449432373
    4. '.' → logprob: -5.460815906524658
    5. '[:' → logprob: -7.835815906524658
    6. '.min' → logprob: -8.335816383361816
    7. '[min' → logprob: -9.835816383361816
    8. '_min' → logprob: -10.085816383361816
    9. '<|end|>' → logprob: -10.335816383361816
    10. '.index' → logprob: -10.835816383361816

Token 45: '0' (ID: 15)
  Prédit: '0'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '0' → logprob: -6.933173426659778e-05
    2. ' ' → logprob: -9.750069618225098
    3. '1' → logprob: -12.125069618225098
    4. 'x' → logprob: -13.500069618225098
    5. ']' → logprob: -14.000069618225098
    6. '])' → logprob: -14.375069618225098
    7. '-' → logprob: -14.500069618225098
    8. ')' → logprob: -14.750069618225098
    9. ':' → logprob: -15.250069618225098
    10. '2' → logprob: -15.312569618225098

Token 46: ']' (ID: 60)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')' → logprob: -0.3939949870109558
    2. ']' → logprob: -1.1439950466156006
    3. ' )' → logprob: -5.8939948081970215
    4. '])' → logprob: -5.8939948081970215
    5. ' ]' → logprob: -6.7689948081970215
    6. ')]' → logprob: -8.51899528503418
    7. '[' → logprob: -9.39399528503418
    8. ' ' → logprob: -10.64399528503418
    9. ' ])' → logprob: -10.76899528503418
    10. '<|end|>' → logprob: -11.14399528503418

Token 47: ' #' (ID: 1069)
  Prédit: ''
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False

Token 48: ' au' (ID: 2791)
  Prédit: 'abc'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'abc' → logprob: -0.9267739653587341
    2. '_' → logprob: -1.551774024963379
    3. ' ' → logprob: -1.926774024963379
    4. 'min' → logprob: -2.301774024963379
    5. '<|end|>' → logprob: -3.801774024963379
    6. ' 
' → logprob: -4.301774024963379
    7. 'amin' → logprob: -4.426774024963379
    8. 'max' → logprob: -4.676774024963379
    9. ' ' → logprob: -4.676774024963379
    10. ' abc' → logprob: -4.676774024963379

Token 49: ' début' (ID: 29589)
  Prédit: 'min'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'min' → logprob: -0.3675015866756439
    2. '+' → logprob: -2.6175014972686768
    3. 'm' → logprob: -3.3675014972686768
    4. '-' → logprob: -3.8675014972686768
    5. 'moins' → logprob: -3.8675014972686768
    6. 'minimum' → logprob: -3.9925014972686768
    7. 'b' → logprob: -4.117501735687256
    8. '_min' → logprob: -4.242501735687256
    9. 'jour' → logprob: -4.242501735687256
    10. ' ' → logprob: -4.617501735687256

Token 50: ' je' (ID: 1264)
  Prédit: ''
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False

Token 51: ' prends' (ID: 151723)
  Prédit: 'n'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'n' → logprob: -0.8370627164840698
    2. 'm' → logprob: -2.2120628356933594
    3. ' =' → logprob: -2.3370628356933594
    4. 's' → logprob: -2.4620628356933594
    5. '<|end|>' → logprob: -2.7120628356933594
    6. ' pense' → logprob: -3.2120628356933594
    7. '=' → logprob: -3.8370628356933594
    8. ' suppose' → logprob: -3.8370628356933594
    9. '_' → logprob: -4.087062835693359
    10. 'am' → logprob: -4.337062835693359

Token 52: ' le' (ID: 505)
  Prédit: ' abc'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' abc' → logprob: -0.8519888520240784
    2. ' ' → logprob: -1.3519887924194336
    3. 'abc' → logprob: -2.2269887924194336
    4. ' amin' → logprob: -2.4769887924194336
    5. '_' → logprob: -3.3519887924194336
    6. ' a' → logprob: -3.4769887924194336
    7. ' ' → logprob: -3.7269887924194336
    8. '  ' → logprob: -4.101988792419434
    9. '<|end|>' → logprob: -5.851988792419434
    10. ' _' → logprob: -6.351988792419434

Token 53: ' premier' (ID: 15506)
  Prédit: ' plus'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' plus' → logprob: -1.3070489168167114
    2. ' minimum' → logprob: -1.3070489168167114
    3. 'prem' → logprob: -1.8070489168167114
    4. ' premier' → logprob: -1.9320489168167114
    5. 'minimum' → logprob: -2.432048797607422
    6. 'min' → logprob: -3.932048797607422
    7. 'm' → logprob: -4.057048797607422
    8. 'plus' → logprob: -4.807048797607422
    9. ' ' → logprob: -6.057048797607422
    10. ' même' → logprob: -6.307048797607422

Token 54: '
' (ID: 198)
  Prédit: ''
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False

Token 55: 'for' (ID: 1938)
  Prédit: 'for'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'for' → logprob: -0.32806307077407837
    2. '<|end|>' → logprob: -1.3280630111694336
    3. ' for' → logprob: -4.578063011169434
    4. '<|end|>' → logprob: -5.953063011169434
    5. 'min' → logprob: -7.078063011169434
    6. '
' → logprob: -8.078063011169434
    7. ')' → logprob: -8.953063011169434
    8. 's' → logprob: -9.953063011169434
    9. 'a' → logprob: -10.078063011169434
    10. '.' → logprob: -10.203063011169434

Token 56: ' v' (ID: 323)
  Prédit: ' i'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' i' → logprob: -0.16629907488822937
    2. ' x' → logprob: -2.0412991046905518
    3. ' val' → logprob: -4.666298866271973
    4. 'i' → logprob: -5.291298866271973
    5. ' y' → logprob: -5.416298866271973
    6. 'x' → logprob: -6.416298866271973
    7. ' ' → logprob: -6.541298866271973
    8. 'val' → logprob: -7.791298866271973
    9. ' a' → logprob: -7.916298866271973
    10. ' v' → logprob: -9.416298866271973

Token 57: ' in' (ID: 306)
  Prédit: ' in'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' in' → logprob: -0.017535405233502388
    2. 'in' → logprob: -4.142535209655762
    3. ' ' → logprob: -6.892535209655762
    4. 'alue' → logprob: -8.767535209655762
    5. 'al' → logprob: -9.142535209655762
    6. 's' → logprob: -10.142535209655762
    7. 'i' → logprob: -10.517535209655762
    8. 'n' → logprob: -10.517535209655762
    9. 'ariable' → logprob: -11.017535209655762
    10. '   ' → logprob: -11.267535209655762

Token 58: ' abc' (ID: 75094)
  Prédit: ' abc'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' abc' → logprob: -0.005966834723949432
    2. ' range' → logprob: -5.255966663360596
    3. 'abc' → logprob: -7.380966663360596
    4. ' ' → logprob: -9.630967140197754
    5. '  ' → logprob: -10.755967140197754
    6. ' ab' → logprob: -12.130967140197754
    7. '   ' → logprob: -12.255967140197754
    8. '    ' → logprob: -12.693467140197754
    9. 'range' → logprob: -13.568467140197754
    10. ' ' → logprob: -13.755967140197754

Token 59: ':
' (ID: 734)
  Prédit: ':'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ':' → logprob: -0.0700995996594429
    2. ' :' → logprob: -2.6950995922088623
    3. ':
' → logprob: -9.320099830627441
    4. ' in' → logprob: -10.445099830627441
    5. ' :
' → logprob: -11.195099830627441
    6. '[' → logprob: -11.695099830627441
    7. ' if' → logprob: -12.945099830627441
    8. '   ' → logprob: -12.945099830627441
    9. '<|end|>' → logprob: -13.070099830627441
    10. '>' → logprob: -13.320099830627441

Token 60: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.02864539623260498
    2. ' if' → logprob: -4.5286455154418945
    3. '<|end|>' → logprob: -4.6536455154418945
    4. '    
' → logprob: -5.2786455154418945
    5. '    ' → logprob: -7.0286455154418945
    6. ' ' → logprob: -7.1536455154418945
    7. ' 
' → logprob: -8.028645515441895
    8. '  ' → logprob: -8.403645515441895
    9. '<|end|>' → logprob: -9.278645515441895
    10. '   
' → logprob: -9.278645515441895

Token 61: ' if' (ID: 538)
  Prédit: ' if'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' if' → logprob: -0.15061800181865692
    2. '   ' → logprob: -2.025618076324463
    3. 'if' (adapté à ' if') → logprob: -5.025618076324463
    4. '    ' → logprob: -7.025618076324463
    5. ' ' → logprob: -8.400617599487305
    6. '  ' → logprob: -9.150617599487305
    7. '    
' → logprob: -10.025617599487305
    8. '<|end|>' → logprob: -10.775617599487305
    9. '	if' → logprob: -11.025617599487305
    10. '```' → logprob: -11.275617599487305

Token 62: ' v' (ID: 323)
  Prédit: ' v'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' v' → logprob: -0.12696139514446259
    2. 'v' → logprob: -2.1269614696502686
    3. ' ' → logprob: -10.626961708068848
    4. '	v' → logprob: -12.126961708068848
    5. '   ' → logprob: -13.501961708068848
    6. '<v' → logprob: -14.501961708068848
    7. ' ' → logprob: -14.876961708068848
    8. '  ' → logprob: -15.376961708068848
    9. '(v' → logprob: -15.501961708068848
    10. '_v' → logprob: -15.501961708068848

Token 63: ' <' (ID: 464)
  Prédit: ' <'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' <' → logprob: -0.22558121383190155
    2. '<' → logprob: -1.600581169128418
    3. ' ' → logprob: -8.850581169128418
    4. '<int' → logprob: -11.850581169128418
    5. '<AM' → logprob: -12.475581169128418
    6. '   ' → logprob: -12.850581169128418
    7. '<|end|>' → logprob: -12.975581169128418
    8. '  ' → logprob: -14.100581169128418
    9. ' <=' → logprob: -14.100581169128418
    10. ' >' → logprob: -14.475581169128418

Token 64: ' amin' (ID: 17320)
  Prédit: 'amin'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'amin' → logprob: -0.6328102946281433
    2. ' amin' → logprob: -0.7578102946281433
    3. ' ' → logprob: -9.632810592651367
    4. ' am' → logprob: -10.507810592651367
    5. ' amino' → logprob: -10.507810592651367
    6. 'imin' → logprob: -10.632810592651367
    7. 'am' → logprob: -11.257810592651367
    8. 'min' → logprob: -11.257810592651367
    9. ' ' → logprob: -11.632810592651367
    10. 'amn' → logprob: -12.007810592651367

Token 65: ':
' (ID: 734)
  Prédit: ':'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ':' → logprob: -0.0002883913984987885
    2. ':
' → logprob: -8.375288009643555
    3. ' :' → logprob: -9.875288009643555
    4. '):' → logprob: -12.750288009643555
    5. '   ' → logprob: -14.375288009643555
    6. 'amin' → logprob: -14.625288009643555
    7. ':
' → logprob: -14.875288009643555
    8. 'and' → logprob: -15.250288009643555
    9. 'v' → logprob: -15.375288009643555
    10. ':**' → logprob: -15.500288009643555

Token 66: '       ' (ID: 309)
  Prédit: 'amin'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'amin' → logprob: -1.0436713695526123
    2. '       ' → logprob: -1.2936713695526123
    3. ' amin' → logprob: -1.4186713695526123
    4. '        
' → logprob: -3.1686713695526123
    5. '    
' → logprob: -3.4186713695526123
    6. '   ' → logprob: -3.9186713695526123
    7. ' ' → logprob: -5.168671607971191
    8. ' _' → logprob: -5.293671607971191
    9. '_' → logprob: -5.543671607971191
    10. '    ' → logprob: -5.668671607971191

Token 67: ' amin' (ID: 17320)
  Prédit: ' amin'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' amin' → logprob: -0.0061734868213534355
    2. 'amin' (adapté à ' amin') → logprob: -5.131173610687256
    3. '           ' → logprob: -8.881173133850098
    4. '   ' → logprob: -9.756173133850098
    5. '       ' → logprob: -10.631173133850098
    6. ' am' → logprob: -11.256173133850098
    7. ' aman' → logprob: -12.881173133850098
    8. ' amino' → logprob: -13.381173133850098
    9. 'am' → logprob: -13.881173133850098
    10. '    ' → logprob: -14.131173133850098

Token 68: ' =' (ID: 314)
  Prédit: ' ='
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' =' → logprob: -0.2519325911998749
    2. '=' → logprob: -1.5019326210021973
    3. '=v' → logprob: -12.626932144165039
    4. 'v' → logprob: -16.25193214416504
    5. ' ' → logprob: -17.00193214416504
    6. '＝' → logprob: -17.00193214416504
    7. '   ' → logprob: -17.75193214416504
    8. '=int' → logprob: -18.75193214416504
    9. 's' → logprob: -19.00193214416504
    10. '=end' → logprob: -19.00193214416504

Token 69: ' v' (ID: 323)
  Prédit: ' v'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' v' → logprob: -0.25193315744400024
    2. 'v' → logprob: -1.5019330978393555
    3. ' ' → logprob: -12.501933097839355
    4. ' ' → logprob: -15.251933097839355
    5. '	v' → logprob: -16.126934051513672
    6. '_v' → logprob: -17.251934051513672
    7. ' ' → logprob: -18.501934051513672
    8. '```' → logprob: -19.376934051513672
    9. '​' → logprob: -19.501934051513672
    10. '_' → logprob: -19.501934051513672

Token 70: ' #' (ID: 1069)
  Prédit: ''
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False

Token 71: ' tiens' (ID: 155696)
  Prédit: ''
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False

Token 72: ',' (ID: 11)
  Prédit: ''
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False

Token 73: ' nouvelle' (ID: 24562)
  Prédit: ' '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' ' → logprob: -0.1187855526804924
    2. ' amin' → logprob: -2.7437856197357178
    3. '<|end|>' → logprob: -3.8687856197357178
    4. ' n' → logprob: -4.993785381317139
    5. '  ' → logprob: -5.243785381317139
    6. 'n' → logprob: -5.368785381317139
    7. ' ' → logprob: -6.743785381317139
    8. ' continue' → logprob: -6.868785381317139
    9. 'amin' → logprob: -7.368785381317139
    10. '    ' → logprob: -7.368785381317139

Token 74: ' valeur' (ID: 41664)
  Prédit: ''
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False

Token 75: ' minimale' (ID: 143217)
  Prédit: ''
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False

Token 76: '

' (ID: 279)
  Prédit: ''
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False

Token 77: '#' (ID: 2)
  Prédit: 'print'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'print' → logprob: -0.16287244856357574
    2. '<|end|>' → logprob: -2.537872552871704
    3. 'n' → logprob: -3.787872552871704
    4. '
' → logprob: -3.912872552871704
    5. '#' → logprob: -4.287872314453125
    6. ' ' → logprob: -5.537872314453125
    7. '\n' → logprob: -5.912872314453125
    8. ')' → logprob: -6.412872314453125
    9. '  
' → logprob: -6.912872314453125
    10. ' 
' → logprob: -7.537872314453125

Token 78: ' Bon' (ID: 12658)
  Prédit: 'print'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'print' → logprob: -0.9046657681465149
    2. '#' → logprob: -1.4046657085418701
    3. 'n' → logprob: -1.4046657085418701
    4. ' ' → logprob: -3.90466570854187
    5. ' 
' → logprob: -4.279665946960449
    6. ')' → logprob: -4.279665946960449
    7. 'a' → logprob: -4.529665946960449
    8. 'p' → logprob: -4.654665946960449
    9. '<|end|>' → logprob: -5.029665946960449
    10. '.' → logprob: -5.654665946960449

Token 79: ',' (ID: 11)
  Prédit: ''
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False

Token 80: ' je' (ID: 1264)
  Prédit: 'print'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'print' → logprob: -0.07656358927488327
    2. ' print' → logprob: -2.701563596725464
    3. 'amin' → logprob: -5.326563358306885
    4. ' amin' → logprob: -7.451563358306885
    5. ' on' → logprob: -8.451563835144043
    6. '#' → logprob: -8.451563835144043
    7. ' je' → logprob: -8.701563835144043
    8. ' for' → logprob: -9.451563835144043
    9. 'min' → logprob: -9.451563835144043
    10. 'je' → logprob: -9.576563835144043

Token 81: ' pense' (ID: 29077)
  Prédit: 'print'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'print' → logprob: -0.2671716511249542
    2. ' print' → logprob: -1.7671716213226318
    3. ' veux' → logprob: -4.767171859741211
    4. ' pense' → logprob: -4.892171859741211
    5. ' continue' → logprob: -5.017171859741211
    6. ' vais' → logprob: -5.017171859741211
    7. 'vais' → logprob: -5.142171859741211
    8. 'veux' → logprob: -5.267171859741211
    9. ' peux' → logprob: -5.392171859741211
    10. ' suppose' → logprob: -5.392171859741211

Token 82: ' que' (ID: 661)
  Prédit: 'print'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'print' → logprob: -0.192082479596138
    2. '<|end|>' → logprob: -2.067082405090332
    3. ' ' → logprob: -4.442082405090332
    4. 'n' → logprob: -4.442082405090332
    5. '#' → logprob: -4.817082405090332
    6. ')' → logprob: -4.942082405090332
    7. ' print' → logprob: -6.442082405090332
    8. '.' → logprob: -6.817082405090332
    9. '
' → logprob: -7.192082405090332
    10. ',' → logprob: -7.192082405090332

Token 83: ' c' (ID: 274)
  Prédit: 'print'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'print' → logprob: -0.5343537330627441
    2. ' print' → logprob: -0.9093537330627441
    3. 'amin' → logprob: -5.784353733062744
    4. ' je' → logprob: -6.534353733062744
    5. ' tu' → logprob: -6.659353733062744
    6. ' on' → logprob: -7.159353733062744
    7. 'je' → logprob: -7.159353733062744
    8. ' amin' → logprob: -7.159353733062744
    9. 'tu' → logprob: -7.784353733062744
    10. 'prin' → logprob: -8.159353256225586

Token 84: ''est' (ID: 6616)
  Prédit: 'e'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'e' → logprob: -1.4437029361724854
    2. ''' → logprob: -1.5687029361724854
    3. 'a' → logprob: -1.9437029361724854
    4. '#' → logprob: -2.4437029361724854
    5. 'o' → logprob: -2.6937029361724854
    6. 'est' → logprob: -2.9437029361724854
    7. ' a' → logprob: -2.9437029361724854
    8. ' #' → logprob: -3.0687029361724854
    9. ''est' → logprob: -3.8187029361724854
    10. ' '' → logprob: -4.818702697753906

Token 85: ' cette' (ID: 7696)
  Prédit: 'amin'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'amin' → logprob: -0.0019299437990412116
    2. ' amin' → logprob: -6.376929759979248
    3. 'print' → logprob: -9.126930236816406
    4. 'min' → logprob: -10.251930236816406
    5. 'tout' → logprob: -10.876930236816406
    6. 'amins' → logprob: -12.251930236816406
    7. 'bien' → logprob: -12.376930236816406
    8. 'imin' → logprob: -12.501930236816406
    9. 'amant' → logprob: -12.626930236816406
    10. 'amen' → logprob: -12.626930236816406

Token 86: ' formule' (ID: 84316)
  Prédit: 'min'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'min' → logprob: -1.6204320192337036
    2. 'amin' → logprob: -1.7454320192337036
    3. '#' → logprob: -2.245431900024414
    4. 'val' → logprob: -2.370431900024414
    5. ' valeur' → logprob: -2.370431900024414
    6. 'ligne' → logprob: -3.120431900024414
    7. ' ligne' → logprob: -3.370431900024414
    8. ' minimale' → logprob: -3.495431900024414
    9. ' amin' → logprob: -3.620431900024414
    10. ' variable' → logprob: -3.620431900024414

Token 87: '.
' (ID: 558)
  Prédit: 'print'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'print' → logprob: -0.17969563603401184
    2. 'result' → logprob: -2.6796956062316895
    3. 'm' → logprob: -3.3046956062316895
    4. 'min' → logprob: -3.6796956062316895
    5. 'res' → logprob: -4.8046956062316895
    6. 'minimum' → logprob: -4.8046956062316895
    7. 's' → logprob: -5.6796956062316895
    8. 'a' → logprob: -6.3046956062316895
    9. 'max' → logprob: -6.4296956062316895
    10. 'ans' → logprob: -6.4296956062316895

Token 88: 'if' (ID: 366)
  Prédit: 'print'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'print' → logprob: -0.04425470903515816
    2. 'result' → logprob: -3.794254779815674
    3. 'm' → logprob: -4.794254779815674
    4. 'ans' → logprob: -5.919254779815674
    5. 'res' → logprob: -5.919254779815674
    6. 's' → logprob: -6.294254779815674
    7. 'diff' → logprob: -6.419254779815674
    8. 'a' → logprob: -7.169254779815674
    9. 'answer' → logprob: -7.544254779815674
    10. 'sum' → logprob: -7.919254779815674

Token 89: ' n' (ID: 297)
  Prédit: ' amin'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' amin' → logprob: -0.31927746534347534
    2. ' n' → logprob: -1.8192775249481201
    3. 'amin' → logprob: -2.44427752494812
    4. 'n' → logprob: -4.444277286529541
    5. ' abc' → logprob: -5.319277286529541
    6. ' (' → logprob: -5.944277286529541
    7. '(' → logprob: -6.569277286529541
    8. '(n' → logprob: -6.569277286529541
    9. 'abc' → logprob: -7.194277286529541
    10. ' ' → logprob: -7.444277286529541

Token 90: ' %' (ID: 1851)
  Prédit: ' >'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' >' → logprob: -1.075371503829956
    2. ' ==' → logprob: -1.325371503829956
    3. ' <' → logprob: -2.450371503829956
    4. '>' → logprob: -2.575371503829956
    5. '==' → logprob: -2.700371503829956
    6. ' <=' → logprob: -2.950371503829956
    7. '%' → logprob: -3.325371503829956
    8. ' %' → logprob: -3.575371503829956
    9. '<' → logprob: -4.075371742248535
    10. ' >=' → logprob: -4.325371742248535

Token 91: ' amin' (ID: 17320)
  Prédit: '2'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '2' → logprob: -0.4131755232810974
    2. 'amin' → logprob: -1.1631755828857422
    3. ' amin' → logprob: -4.913175582885742
    4. 'abc' → logprob: -5.038175582885742
    5. '3' → logprob: -5.538175582885742
    6. '5' → logprob: -5.788175582885742
    7. ' ' → logprob: -5.913175582885742
    8. 'min' → logprob: -7.038175582885742
    9. '10' → logprob: -7.413175582885742
    10. '4' → logprob: -8.288175582885742

Token 92: ' ==' (ID: 951)
  Prédit: ' =='
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' ==' → logprob: -0.5289855003356934
    2. '==' → logprob: -0.9039855003356934
    3. ' !=' → logprob: -5.653985500335693
    4. '!=' → logprob: -6.403985500335693
    5. ':' → logprob: -7.528985500335693
    6. '=' → logprob: -9.528985977172852
    7. '>' → logprob: -10.403985977172852
    8. ' ' → logprob: -11.278985977172852
    9. ' :' → logprob: -11.528985977172852
    10. ' =' → logprob: -11.653985977172852

Token 93: ' ' (ID: 220)
  Prédit: '0'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '0' → logprob: -0.0336470827460289
    2. ' ' → logprob: -3.408647060394287
    3. '=' → logprob: -15.033647537231445
    4. '1' → logprob: -15.033647537231445
    5. '  ' → logprob: -15.033647537231445
    6. '2' → logprob: -15.908647537231445
    7. 'n' → logprob: -16.783647537231445
    8. '    ' → logprob: -17.283647537231445
    9. '==' → logprob: -17.408647537231445
    10. '```' → logprob: -17.408647537231445

Token 94: '0' (ID: 15)
  Prédit: '0'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '0' → logprob: -0.0019298245897516608
    2. ' ' → logprob: -6.251929759979248
    3. '1' → logprob: -14.501930236816406
    4. '2' → logprob: -15.251930236816406
    5. '  ' → logprob: -15.626930236816406
    6. 'n' → logprob: -15.626930236816406
    7. '=' → logprob: -17.001930236816406
    8. '    ' → logprob: -17.314430236816406
    9. '3' → logprob: -17.689430236816406
    10. '۰' → logprob: -17.876930236816406

Token 95: ':
' (ID: 734)
  Prédit: ':'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ':' → logprob: -0.0002683688362594694
    2. ':
' → logprob: -8.25026798248291
    3. ' :' → logprob: -12.00026798248291
    4. ':return' → logprob: -15.12526798248291
    5. ':

' → logprob: -15.50026798248291
    6. ' and' → logprob: -15.87526798248291
    7. ':def' → logprob: -16.750268936157227
    8. '):' → logprob: -16.750268936157227
    9. ',' → logprob: -17.125268936157227
    10. ':**' → logprob: -17.125268936157227

Token 96: '   ' (ID: 271)
  Prédit: 'print'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'print' → logprob: -0.6003693342208862
    2. '   ' → logprob: -0.8503693342208862
    3. ' print' → logprob: -3.725369453430176
    4. '	print' → logprob: -10.975369453430176
    5. '       ' → logprob: -12.600369453430176
    6. 'result' → logprob: -12.725369453430176
    7. ' ' → logprob: -13.225369453430176
    8. '```' → logprob: -14.100369453430176
    9. '  ' → logprob: -14.225369453430176
    10. '
' → logprob: -14.475369453430176

Token 97: ' answer' (ID: 6052)
  Prédit: 'print'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'print' → logprob: -0.00014489953173324466
    2. ' print' → logprob: -9.125144958496094
    3. '   ' → logprob: -10.375144958496094
    4. 'result' → logprob: -12.375144958496094
    5. 'pass' → logprob: -15.875144958496094
    6. 'for' → logprob: -16.500144958496094
    7. '	print' → logprob: -17.000144958496094
    8. ' ' → logprob: -17.000144958496094
    9. 'n' → logprob: -17.125144958496094
    10. 'abc' → logprob: -17.125144958496094

Token 98: ' =' (ID: 314)
  Prédit: ' ='
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' =' → logprob: -0.020772406831383705
    2. '=' → logprob: -3.8957724571228027
    3. 's' → logprob: -8.395771980285645
    4. ' ' → logprob: -13.020771980285645
    5. '   ' → logprob: -14.520771980285645
    6. '_' → logprob: -14.520771980285645
    7. ' s' → logprob: -14.770771980285645
    8. '  ' → logprob: -15.020771980285645
    9. ':' → logprob: -15.770771980285645
    10. 'print' → logprob: -16.02077293395996

Token 99: ' n' (ID: 297)
  Prédit: '"'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '"' → logprob: -1.1684823036193848
    2. ' n' → logprob: -1.1684823036193848
    3. 'n' → logprob: -1.1684823036193848
    4. ' "' → logprob: -2.7934823036193848
    5. ' True' → logprob: -5.793482303619385
    6. 'True' → logprob: -6.293482303619385
    7. ' ' → logprob: -8.293481826782227
    8. ''' → logprob: -8.418481826782227
    9. ' '' → logprob: -8.793481826782227
    10. ''n' → logprob: -8.918481826782227

Token 100: ' //' (ID: 602)
  Prédit: ' //'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' //' → logprob: -0.017765551805496216
    2. '//' → logprob: -4.142765522003174
    3. ' /' → logprob: -7.142765522003174
    4. ' ' → logprob: -8.142765998840332
    5. ' else' → logprob: -8.142765998840332
    6. ' //
' → logprob: -9.892765998840332
    7. '/' → logprob: -10.017765998840332
    8. '   ' → logprob: -10.142765998840332
    9. '%' → logprob: -10.267765998840332
    10. 'else' → logprob: -10.767765998840332

Token 101: ' amin' (ID: 17320)
  Prédit: 'amin'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'amin' → logprob: -5.288163083605468e-05
    2. ' amin' → logprob: -9.875052452087402
    3. 'ami' → logprob: -14.875052452087402
    4. 'amn' → logprob: -15.375052452087402
    5. ' ' → logprob: -15.875052452087402
    6. 'imin' → logprob: -16.00005340576172
    7. 'min' → logprob: -16.37505340576172
    8. 'amit' → logprob: -16.75005340576172
    9. 'amini' → logprob: -17.00005340576172
    10. '  ' → logprob: -17.00005340576172

Token 102: ' -' (ID: 533)
  Prédit: 'else'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'else' → logprob: -0.0013239304535090923
    2. ' else' → logprob: -7.376323699951172
    3. 'print' → logprob: -7.376323699951172
    4. '   ' → logprob: -9.626323699951172
    5. '<|end|>' → logprob: -13.876323699951172
    6. '    
' → logprob: -14.001323699951172
    7. 'elif' → logprob: -14.126323699951172
    8. '
' → logprob: -14.376323699951172
    9. ' print' → logprob: -15.001323699951172
    10. '```' → logprob: -15.376323699951172

Token 103: ' ' (ID: 220)
  Prédit: '1'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '1' → logprob: -0.00039980647852644324
    2. ' ' → logprob: -7.875399589538574
    3. '2' → logprob: -11.375399589538574
    4. 'abc' → logprob: -12.000399589538574
    5. '   ' → logprob: -14.875399589538574
    6. '3' → logprob: -15.000399589538574
    7. '0' → logprob: -15.125399589538574
    8. '5' → logprob: -15.687899589538574
    9. '(' → logprob: -15.875399589538574
    10. ' abc' → logprob: -16.12540054321289

Token 104: '1' (ID: 16)
  Prédit: '1'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '1' → logprob: -5.180879816180095e-05
    2. ' ' → logprob: -10.000051498413086
    3. '2' → logprob: -12.250051498413086
    4. 'abc' → logprob: -13.875051498413086
    5. '   ' → logprob: -14.875051498413086
    6. '0' → logprob: -16.000051498413086
    7. '3' → logprob: -16.000051498413086
    8. 'len' → logprob: -16.875051498413086
    9. '5' → logprob: -17.500051498413086
    10. '  ' → logprob: -17.625051498413086

Token 105: ' +' (ID: 659)
  Prédit: 'else'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'else' → logprob: -0.0014470219612121582
    2. ' else' → logprob: -6.7514472007751465
    3. 'print' → logprob: -8.626446723937988
    4. '<|end|>' → logprob: -10.001446723937988
    5. 'elif' → logprob: -10.876446723937988
    6. '
' → logprob: -10.876446723937988
    7. '   ' → logprob: -12.376446723937988
    8. ')' → logprob: -12.626446723937988
    9. '    
' → logprob: -13.376446723937988
    10. '#else' → logprob: -14.501446723937988

Token 106: ' ' (ID: 220)
  Prédit: ' n'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' n' → logprob: -1.0241279602050781
    2. ' abc' → logprob: -1.1491279602050781
    3. '1' → logprob: -2.149127960205078
    4. 'abc' → logprob: -2.399127960205078
    5. ' ' → logprob: -3.149127960205078
    6. 'n' → logprob: -3.524127960205078
    7. ' (' → logprob: -4.399127960205078
    8. ' len' → logprob: -4.399127960205078
    9. 'len' → logprob: -5.274127960205078
    10. '(' → logprob: -5.274127960205078

Token 107: '5' (ID: 20)
  Prédit: 'abc'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'abc' → logprob: -1.3079079389572144
    2. '1' → logprob: -1.4329079389572144
    3. 'amin' → logprob: -1.8079079389572144
    4. 'n' → logprob: -1.9329079389572144
    5. '(' → logprob: -2.057908058166504
    6. '(n' → logprob: -3.307908058166504
    7. 'min' → logprob: -5.307908058166504
    8. 'len' → logprob: -5.432908058166504
    9. '(len' → logprob: -6.557908058166504
    10. 'answer' → logprob: -6.682908058166504

Token 108: ' #' (ID: 1069)
  Prédit: 'else'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'else' → logprob: -0.002805821830406785
    2. ' else' → logprob: -6.002805709838867
    3. '<|end|>' → logprob: -8.502805709838867
    4. 'elif' → logprob: -10.127805709838867
    5. '
' → logprob: -10.502805709838867
    6. 'print' → logprob: -10.752805709838867
    7. '   ' → logprob: -11.252805709838867
    8. '    
' → logprob: -12.377805709838867
    9. '#else' → logprob: -12.502805709838867
    10. ')' → logprob: -12.502805709838867

Token 109: ' un' (ID: 537)
  Prédit: 'print'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'print' → logprob: -0.03619972616434097
    2. '<|end|>' → logprob: -3.7861998081207275
    3. '
' → logprob: -4.786199569702148
    4. ' print' → logprob: -5.786199569702148
    5. 'else' → logprob: -7.286199569702148
    6. ')' → logprob: -8.411199569702148
    7. '   ' → logprob: -9.411199569702148
    8. '#' → logprob: -9.661199569702148
    9. '```' → logprob: -9.661199569702148
    10. '<|end|>' → logprob: -9.786199569702148

Token 110: ' petit' (ID: 20577)
  Prédit: ' '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' ' → logprob: -0.8998041749000549
    2. '<|end|>' → logprob: -1.0248041152954102
    3. '+' → logprob: -1.6498041152954102
    4. '<|end|>' → logprob: -4.64980411529541
    5. '0' → logprob: -4.77480411529541
    6. '```' → logprob: -5.77480411529541
    7. ' +' → logprob: -6.14980411529541
    8. '#' → logprob: -6.39980411529541
    9. 'n' → logprob: -6.64980411529541
    10. ' ```' → logprob: -6.77480411529541

Token 111: ' hack' (ID: 27750)
  Prédit: ' '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' ' → logprob: -0.5923414826393127
    2. '+' → logprob: -1.592341423034668
    3. '<|end|>' → logprob: -1.967341423034668
    4. '  ' → logprob: -3.592341423034668
    5. '<|end|>' → logprob: -4.342341423034668
    6. ' +' → logprob: -4.342341423034668
    7. ' ' → logprob: -4.842341423034668
    8. 'print' → logprob: -4.967341423034668
    9. '.' → logprob: -5.092341423034668
    10. '    ' → logprob: -5.592341423034668

Token 112: ' ici' (ID: 27994)
  Prédit: 'else'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'else' → logprob: -0.7602940201759338
    2. '<|end|>' → logprob: -0.7602940201759338
    3. '
' → logprob: -3.635293960571289
    4. 'elif' → logprob: -4.510293960571289
    5. ' else' → logprob: -5.010293960571289
    6. '<|end|>' → logprob: -5.260293960571289
    7. 'print' → logprob: -5.260293960571289
    8. ')' → logprob: -5.635293960571289
    9. '   ' → logprob: -6.385293960571289
    10. '\n' → logprob: -6.385293960571289

Token 113: '...
' (ID: 4908)
  Prédit: 'else'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'else' → logprob: -0.5718557834625244
    2. '<|end|>' → logprob: -0.9468557834625244
    3. '
' → logprob: -3.5718557834625244
    4. 'elif' → logprob: -4.821855545043945
    5. ' else' → logprob: -5.821855545043945
    6. '\n' → logprob: -5.946855545043945
    7. ')' → logprob: -6.571855545043945
    8. '<|end|>' → logprob: -6.821855545043945
    9. '   ' → logprob: -6.946855545043945
    10. '.' → logprob: -7.321855545043945

Token 114: 'else' (ID: 2807)
  Prédit: 'else'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'else' → logprob: -0.0038883150555193424
    2. ' else' → logprob: -6.503888130187988
    3. 'print' → logprob: -6.878888130187988
    4. '<|end|>' → logprob: -7.253888130187988
    5. '
' → logprob: -8.128888130187988
    6. 'elif' → logprob: -8.378888130187988
    7. '   ' → logprob: -10.253888130187988
    8. '```' → logprob: -10.753888130187988
    9. '    
' → logprob: -11.003888130187988
    10. ')' → logprob: -11.753888130187988

Token 115: ':
' (ID: 734)
  Prédit: ':'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ':' → logprob: -0.09157789498567581
    2. ':
' → logprob: -2.4665780067443848
    3. '   ' → logprob: -5.966578006744385
    4. ' :' → logprob: -10.341577529907227
    5. ' :
' → logprob: -11.091577529907227
    6. ' answer' → logprob: -12.341577529907227
    7. 'answer' → logprob: -12.341577529907227
    8. ':

' → logprob: -12.841577529907227
    9. '
' → logprob: -12.966577529907227
    10. '=' → logprob: -13.466577529907227

Token 116: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.13460969924926758
    2. 'answer' → logprob: -2.1346096992492676
    3. ' answer' → logprob: -4.884609699249268
    4. '	answer' → logprob: -9.50960922241211
    5. '   ' → logprob: -11.38460922241211
    6. '
' → logprob: -13.25960922241211
    7. ' ' → logprob: -14.00960922241211
    8. '  ' → logprob: -14.38460922241211
    9. '    
' → logprob: -15.00960922241211
    10. '(answer' → logprob: -15.50960922241211

Token 117: ' answer' (ID: 6052)
  Prédit: 'answer'
  Correct (stricte): False
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'answer' (adapté à ' answer') → logprob: -0.016319746151566505
    2. ' answer' → logprob: -4.141319751739502
    3. 'n' → logprob: -9.016319274902344
    4. '5' → logprob: -9.141319274902344
    5. '   ' → logprob: -10.891319274902344
    6. ' n' → logprob: -11.391319274902344
    7. '	answer' → logprob: -11.891319274902344
    8. 'print' → logprob: -12.266319274902344
    9. '1' → logprob: -12.891319274902344
    10. '0' → logprob: -12.891319274902344

Token 118: ' =' (ID: 314)
  Prédit: ' ='
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' =' → logprob: -0.4740934669971466
    2. '=' → logprob: -0.9740934371948242
    3. ' ' → logprob: -11.599093437194824
    4. ' +=' → logprob: -12.474093437194824
    5. '   ' → logprob: -14.099093437194824
    6. ')' → logprob: -14.224093437194824
    7. 's' → logprob: -14.974093437194824
    8. '+=' → logprob: -15.224093437194824
    9. ' =)' → logprob: -15.349093437194824
    10. ':' → logprob: -15.724093437194824

Token 119: ' n' (ID: 297)
  Prédit: ' n'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' n' → logprob: -0.5815158486366272
    2. 'n' → logprob: -0.8315158486366272
    3. '0' → logprob: -5.831515789031982
    4. '5' → logprob: -6.331515789031982
    5. ' ' → logprob: -7.706515789031982
    6. '(n' → logprob: -8.70651626586914
    7. ' (' → logprob: -8.95651626586914
    8. '7' → logprob: -10.58151626586914
    9. '1' → logprob: -10.83151626586914
    10. '   ' → logprob: -11.08151626586914

Token 120: ' //' (ID: 602)
  Prédit: 'print'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'print' → logprob: -0.0024569875095039606
    2. ' print' → logprob: -6.627457141876221
    3. '<|end|>' → logprob: -7.627457141876221
    4. ')' → logprob: -7.877457141876221
    5. '%' → logprob: -8.752456665039062
    6. '#' → logprob: -10.127456665039062
    7. '.print' → logprob: -10.877456665039062
    8. '
' → logprob: -11.627456665039062
    9. '#print' → logprob: -11.752456665039062
    10. '(print' → logprob: -11.877456665039062

Token 121: ' amin' (ID: 17320)
  Prédit: 'amin'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'amin' → logprob: -0.0002681304467841983
    2. ' amin' → logprob: -8.25026798248291
    3. 'amn' → logprob: -12.75026798248291
    4. 'imin' → logprob: -14.12526798248291
    5. 'ami' → logprob: -14.37526798248291
    6. 'aman' → logprob: -14.50026798248291
    7. 'amit' → logprob: -14.87526798248291
    8. 'abc' → logprob: -15.12526798248291
    9. 'amins' → logprob: -15.50026798248291
    10. ' ' → logprob: -15.50026798248291

Token 122: ' +' (ID: 659)
  Prédit: 'print'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'print' → logprob: -0.6126776337623596
    2. '<|end|>' → logprob: -0.8626776337623596
    3. '#' → logprob: -4.112677574157715
    4. '
' → logprob: -4.987677574157715
    5. '+' → logprob: -5.487677574157715
    6. ' print' → logprob: -5.612677574157715
    7. ')' → logprob: -6.362677574157715
    8. ' ' → logprob: -6.987677574157715
    9. '<|end|>' → logprob: -7.612677574157715
    10. ' #' → logprob: -7.737677574157715

Token 123: ' ' (ID: 220)
  Prédit: '5'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '5' → logprob: -0.015377436764538288
    2. '4' → logprob: -4.265377521514893
    3. '1' → logprob: -7.140377521514893
    4. ' ' → logprob: -7.890377521514893
    5. 'abc' → logprob: -10.890377044677734
    6. '(' → logprob: -11.390377044677734
    7. '6' → logprob: -12.015377044677734
    8. '0' → logprob: -12.015377044677734
    9. 'n' → logprob: -13.890377044677734
    10. '3' → logprob: -14.015377044677734

Token 124: '5' (ID: 20)
  Prédit: '5'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '5' → logprob: -0.016674213111400604
    2. '4' → logprob: -4.141674041748047
    3. '1' → logprob: -7.641674041748047
    4. '6' → logprob: -9.391674041748047
    5. 'abc' → logprob: -10.141674041748047
    6. ' ' → logprob: -10.891674041748047
    7. '(' → logprob: -12.016674041748047
    8. '0' → logprob: -12.016674041748047
    9. 'len' → logprob: -13.266674041748047
    10. '3' → logprob: -13.766674041748047

Token 125: '

' (ID: 279)
  Prédit: 'print'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'print' → logprob: -2.3438327843905427e-05
    2. ' print' → logprob: -11.00002384185791
    3. '<|end|>' → logprob: -12.50002384185791
    4. '
' → logprob: -13.37502384185791
    5. '#print' → logprob: -14.50002384185791
    6. '#' → logprob: -15.00002384185791
    7. '```' → logprob: -15.00002384185791
    8. '\n' → logprob: -15.62502384185791
    9. '\' → logprob: -17.625022888183594
    10. '(print' → logprob: -17.625022888183594

Token 126: '#' (ID: 2)
  Prédit: 'print'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'print' → logprob: -3.650518920039758e-06
    2. ' print' → logprob: -12.625003814697266
    3. '```' → logprob: -15.875003814697266
    4. '<|end|>' → logprob: -16.375003814697266
    5. '#' → logprob: -16.625003814697266
    6. '#print' → logprob: -17.125003814697266
    7. '
' → logprob: -18.250003814697266
    8. '(print' → logprob: -18.625003814697266
    9. '.print' → logprob: -18.750003814697266
    10. ')' → logprob: -18.875003814697266

Token 127: ' Aff' (ID: 13741)
  Prédit: 'print'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'print' → logprob: -2.2200749754119897e-06
    2. ' print' → logprob: -13.125001907348633
    3. 'answer' → logprob: -16.625001907348633
    4. '```' → logprob: -19.750001907348633
    5. '#print' → logprob: -19.750001907348633
    6. 'pr' → logprob: -19.875001907348633
    7. 'prin' → logprob: -20.000001907348633
    8. 'for' → logprob: -20.125001907348633
    9. 'return' → logprob: -20.375001907348633
    10. '#' → logprob: -21.000001907348633

Token 128: 'ichage' (ID: 118475)
  Prédit: 'print'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'print' → logprob: -0.3462510108947754
    2. 'icher' → logprob: -1.5962510108947754
    3. 'ich' → logprob: -2.7212510108947754
    4. 'ichage' → logprob: -3.8462510108947754
    5. 'iche' → logprob: -6.471251010894775
    6. '#' → logprob: -7.221251010894775
    7. ' print' → logprob: -7.971251010894775
    8. '#print' → logprob: -9.596250534057617
    9. 'ic' → logprob: -10.221250534057617
    10. 'ichier' → logprob: -10.346250534057617

Token 129: ' final' (ID: 1721)
  Prédit: 'print'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'print' → logprob: 0.0
    2. ' print' → logprob: -17.0
    3. '```' → logprob: -19.25
    4. '
' → logprob: -23.375
    5. 'for' → logprob: -24.375
    6. '.print' → logprob: -25.125
    7. '#print' → logprob: -25.125
    8. 'if' → logprob: -25.25
    9. 'answer' → logprob: -25.375
    10. 'pr' → logprob: -25.375

Token 130: '
' (ID: 198)
  Prédit: 'print'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'print' → logprob: 0.0
    2. ' print' → logprob: -17.75
    3. '```' → logprob: -18.125
    4. '
' → logprob: -18.875
    5. '#print' → logprob: -23.375
    6. '``' → logprob: -23.75
    7. '(print' → logprob: -23.875
    8. '.print' → logprob: -23.875
    9. 'pr' → logprob: -25.0
    10. 'for' → logprob: -25.0

Token 131: 'print' (ID: 1598)
  Prédit: 'print'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'print' → logprob: 0.0
    2. '```' → logprob: -18.0
    3. ' print' → logprob: -19.625
    4. '#print' → logprob: -22.625
    5. '``' → logprob: -23.875
    6. 'answer' → logprob: -24.25
    7. '	print' → logprob: -25.125
    8. 'for' → logprob: -25.5
    9. 'println' → logprob: -25.625
    10. 'prints' → logprob: -25.625

Token 132: '(answer' (ID: 78433)
  Prédit: '(answer'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(answer' → logprob: -0.47421014308929443
    2. '(' → logprob: -0.9742101430892944
    3. '(ans' → logprob: -9.349209785461426
    4. '()' → logprob: -10.599209785461426
    5. '('' → logprob: -11.599209785461426
    6. ' (' → logprob: -12.474209785461426
    7. '("' → logprob: -13.224209785461426
    8. '((' → logprob: -13.349209785461426
    9. 'answer' → logprob: -14.099209785461426
    10. '(
' → logprob: -14.349209785461426

Token 133: ')' (ID: 8)
  Prédit: ')'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')' → logprob: -1.9361264946837764e-07
    2. ' )' → logprob: -17.375
    3. '()' → logprob: -17.625
    4. '())' → logprob: -18.125
    5. ')`' → logprob: -18.25
    6. '))' → logprob: -18.375
    7. ')}' → logprob: -20.0
    8. ')
' → logprob: -20.25
    9. '(' → logprob: -20.375
    10. '),' → logprob: -20.5


RÉSUMÉ:
--------------------------------------------------------------------------------
Total des tokens analysés: 131
Tokens correctement prédits (1ère position, stricte): 36
Tokens correctement prédits (1ère position, avec adaptation): 38
Tokens correctement prédits (top 10): 72
Précision stricte (1ère position): 27.48%
Précision adaptée (1ère position): 29.01%
Précision (top 10): 54.96%
================================================================================
