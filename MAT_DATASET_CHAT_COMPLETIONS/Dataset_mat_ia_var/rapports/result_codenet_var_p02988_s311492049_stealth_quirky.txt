================================================================================
ANALYSE DE PRÉDICTION TOKEN PAR TOKEN (BATCH API)
Date: 2025-06-04 19:53:27
Modèle de tokenisation: gpt-4o-mini
================================================================================

SCRIPT ANALYSÉ:
--------------------------------------------------------------------------------
getNumber = lambda : int(input())
getList = lambda : [*map(int, input().split())]
length = getNumber()
stuff = getList()
val = [0]
for idx in range(length-2):
    sliceMe = stuff[idx:idx+3]
    middle = sliceMe[1]
    if min(sliceMe) < middle < max(sliceMe):
        val[0] += 1
print(val.pop())
--------------------------------------------------------------------------------

RÉSULTATS D'ANALYSE TOKEN PAR TOKEN:
--------------------------------------------------------------------------------
Token 0: 'get' (ID: 522)
  → Token d'amorce (pas de prédiction)

Token 1: 'Number' (ID: 3695)
  → Token d'amorce (pas de prédiction)

Token 2: ' =' (ID: 314)
  → Token d'amorce (pas de prédiction)

Token 3: ' lambda' (ID: 27871)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '(' → logprob: -0.8373192548751831
    2. ' ' → logprob: -1.587319254875183
    3. ' (' → logprob: -1.837319254875183
    4. ' ()' → logprob: -2.0873193740844727
    5. ''' → logprob: -3.8373193740844727
    6. '  ' → logprob: -3.9623193740844727
    7. '"' → logprob: -4.587319374084473
    8. '()' → logprob: -4.712319374084473
    9. '```' → logprob: -5.837319374084473
    10. '`' → logprob: -6.087319374084473

Token 4: ' :' (ID: 712)
  Prédit: ' x'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' x' → logprob: -0.047094255685806274
    2. 'x' → logprob: -3.1720943450927734
    3. ' n' → logprob: -5.922094345092773
    4. 'n' → logprob: -7.922094345092773
    5. ' number' → logprob: -8.047094345092773
    6. ' a' → logprob: -9.172094345092773
    7. ' (' → logprob: -9.422094345092773
    8. ' ' → logprob: -9.547094345092773
    9. 'number' → logprob: -9.547094345092773
    10. '(' → logprob: -9.672094345092773

Token 5: ' int' (ID: 677)
  Prédit: ' int'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' int' → logprob: -0.6309323310852051
    2. ' input' → logprob: -1.130932331085205
    3. 'int' → logprob: -2.505932331085205
    4. 'input' → logprob: -2.880932331085205
    5. ' ' → logprob: -6.130932331085205
    6. ' random' → logprob: -6.380932331085205
    7. ' randint' → logprob: -6.630932331085205
    8. ' __' → logprob: -7.630932331085205
    9. '0' → logprob: -7.880932331085205
    10. 'random' → logprob: -7.880932331085205

Token 6: '(input' (ID: 10054)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(' → logprob: -0.00045367187703959644
    2. '(input' → logprob: -8.25045394897461
    3. '('' → logprob: -9.62545394897461
    4. ' (' → logprob: -9.87545394897461
    5. '(get' → logprob: -10.25045394897461
    6. '(
' → logprob: -12.25045394897461
    7. '()' → logprob: -12.37545394897461
    8. '(space' → logprob: -12.50045394897461
    9. '(user' → logprob: -12.87545394897461
    10. ' ' → logprob: -13.00045394897461

Token 7: '())
' (ID: 4574)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '(' → logprob: -0.004423589911311865
    2. '()' → logprob: -6.37942361831665
    3. '())' → logprob: -6.87942361831665
    4. ')' → logprob: -7.25442361831665
    5. '('' → logprob: -7.87942361831665
    6. '("("' → logprob: -8.004423141479492
    7. '(""))' → logprob: -9.379423141479492
    8. '(()' → logprob: -9.629423141479492
    9. '(
' → logprob: -10.254423141479492
    10. '("")' → logprob: -11.379423141479492

Token 8: 'get' (ID: 522)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '(' → logprob: -0.0017267032526433468
    2. '+' → logprob: -7.3767266273498535
    3. '(
' → logprob: -7.8767266273498535
    4. ')' → logprob: -8.751727104187012
    5. '()' → logprob: -8.751727104187012
    6. '#' → logprob: -9.001727104187012
    7. '*' → logprob: -9.251727104187012
    8. ' (' → logprob: -10.251727104187012
    9. ' ' → logprob: -10.501727104187012
    10. ',' → logprob: -11.251727104187012

Token 9: 'List' (ID: 950)
  Prédit: 'N'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'N' → logprob: -0.5760881304740906
    2. 'Number' → logprob: -0.8260881304740906
    3. '.' → logprob: -9.701087951660156
    4. ' ' → logprob: -10.951087951660156
    5. ')' → logprob: -11.076087951660156
    6. 'Num' → logprob: -11.701087951660156
    7. 'Nu' → logprob: -11.951087951660156
    8. '(Number' → logprob: -11.951087951660156
    9. '.Number' → logprob: -12.201087951660156
    10. ' Number' → logprob: -12.326087951660156

Token 10: ' =' (ID: 314)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(' → logprob: -0.011959478259086609
    2. '(lambda' → logprob: -4.886959552764893
    3. ' =' → logprob: -6.386959552764893
    4. '=' → logprob: -6.511959552764893
    5. '=lambda' → logprob: -7.636959552764893
    6. ' (' → logprob: -8.386959075927734
    7. '((' → logprob: -9.761959075927734
    8. ')' → logprob: -10.011959075927734
    9. '_' → logprob: -10.011959075927734
    10. '```' → logprob: -10.136959075927734

Token 11: ' lambda' (ID: 27871)
  Prédit: ' lambda'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' lambda' → logprob: -0.038103457540273666
    2. 'lambda' → logprob: -3.2881033420562744
    3. '(lambda' → logprob: -10.413103103637695
    4. ' list' → logprob: -10.913103103637695
    5. 'list' → logprob: -11.913103103637695
    6. ' lamb' → logprob: -12.288103103637695
    7. ' ' → logprob: -14.163103103637695
    8. ' []' → logprob: -14.288103103637695
    9. '=lambda' → logprob: -14.538103103637695
    10. ' λ' → logprob: -15.288103103637695

Token 12: ' :' (ID: 712)
  Prédit: ' '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' ' → logprob: -1.4267354011535645
    2. ' :' → logprob: -1.6767354011535645
    3. ' list' → logprob: -2.5517354011535645
    4. '(int' → logprob: -2.5517354011535645
    5. 'list' → logprob: -2.8017354011535645
    6. '(' → logprob: -2.9267354011535645
    7. ' input' → logprob: -3.0517354011535645
    8. ':' → logprob: -3.0517354011535645
    9. ' ()' → logprob: -3.0517354011535645
    10. ' int' → logprob: -3.1767354011535645

Token 13: ' [' (ID: 723)
  Prédit: 'list'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'list' → logprob: -0.576074481010437
    2. ' list' → logprob: -0.826074481010437
    3. '[list' → logprob: -9.576074600219727
    4. '[' → logprob: -10.701074600219727
    5. 'map' → logprob: -11.076074600219727
    6. ' [' → logprob: -11.201074600219727
    7. ' map' → logprob: -12.201074600219727
    8. ' ' → logprob: -12.701074600219727
    9. '[int' → logprob: -13.201074600219727
    10. '	list' → logprob: -13.951074600219727

Token 14: '*' (ID: 9)
  Prédit: 'int'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'int' → logprob: -0.000918008794542402
    2. ' int' → logprob: -7.000917911529541
    3. '(int' → logprob: -12.7509183883667
    4. ']int' → logprob: -13.2509183883667
    5. 'map' → logprob: -14.2509183883667
    6. 'get' → logprob: -15.3759183883667
    7. ' ' → logprob: -15.5009183883667
    8. '0' → logprob: -15.6259183883667
    9. '   ' → logprob: -15.7509183883667
    10. '<int' → logprob: -16.000917434692383

Token 15: 'map' (ID: 3726)
  Prédit: 'map'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'map' → logprob: -0.00011617878044489771
    2. ' map' → logprob: -9.125116348266602
    3. '(map' → logprob: -12.125116348266602
    4. '{' → logprob: -14.625116348266602
    5. 'range' → logprob: -14.625116348266602
    6. 'int' → logprob: -14.875116348266602
    7. '	map' → logprob: -14.875116348266602
    8. 'input' → logprob: -16.5001163482666
    9. '.map' → logprob: -16.6251163482666
    10. 'list' → logprob: -17.1251163482666

Token 16: '(int' (ID: 2742)
  Prédit: '(int'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(int' → logprob: -0.0060804798267781734
    2. '(' → logprob: -5.131080627441406
    3. 'int' → logprob: -8.881080627441406
    4. '(
' → logprob: -11.881080627441406
    5. '<int' → logprob: -13.506080627441406
    6. ' int' → logprob: -13.756080627441406
    7. ' (' → logprob: -13.881080627441406
    8. ',int' → logprob: -14.381080627441406
    9. ']int' → logprob: -14.381080627441406
    10. '=int' → logprob: -14.756080627441406

Token 17: ',' (ID: 11)
  Prédit: '(input'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(input' → logprob: -0.02484569512307644
    2. ',input' → logprob: -4.149845600128174
    3. 'input' → logprob: -5.149845600128174
    4. ',' → logprob: -6.274845600128174
    5. '(' → logprob: -7.399845600128174
    6. ' input' → logprob: -8.524846076965332
    7. ')]' → logprob: -9.149846076965332
    8. ' (' → logprob: -9.524846076965332
    9. ')' → logprob: -10.024846076965332
    10. '=input' → logprob: -10.649846076965332

Token 18: ' input' (ID: 3422)
  Prédit: 'input'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'input' → logprob: -0.033723387867212296
    2. ' input' → logprob: -3.4087233543395996
    3. '(input' → logprob: -9.533723831176758
    4. ',input' → logprob: -12.783723831176758
    5. ')' → logprob: -14.158723831176758
    6. '=input' → logprob: -14.408723831176758
    7. '<input' → logprob: -14.908723831176758
    8. '	input' → logprob: -15.533723831176758
    9. '[input' → logprob: -15.783723831176758
    10. '```' → logprob: -15.908723831176758

Token 19: '().' (ID: 1454)
  Prédit: '())'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '())' → logprob: -0.45379573106765747
    2. '()' → logprob: -1.8287956714630127
    3. '()]' → logprob: -1.8287956714630127
    4. '().' → logprob: -3.2037956714630127
    5. ')]' → logprob: -6.453795909881592
    6. ')' → logprob: -8.078795433044434
    7. '()))' → logprob: -8.453795433044434
    8. '());' → logprob: -9.078795433044434
    9. ' ())' → logprob: -9.453795433044434
    10. '(' → logprob: -9.703795433044434

Token 20: 'split' (ID: 13627)
  Prédit: 'split'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'split' → logprob: -0.0001576506474521011
    2. 'strip' → logprob: -9.125157356262207
    3. 'rstrip' → logprob: -10.000157356262207
    4. ' split' → logprob: -13.000157356262207
    5. 'read' → logprob: -14.500157356262207
    6. 'spl' → logprob: -14.875157356262207
    7. '(split' → logprob: -16.000158309936523
    8. ')' → logprob: -18.250158309936523
    9. 'sp' → logprob: -18.375158309936523
    10. 's' → logprob: -18.500158309936523

Token 21: '())' (ID: 3516)
  Prédit: '())'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '())' → logprob: -0.001120572560466826
    2. '()' → logprob: -7.751120567321777
    3. '()]' → logprob: -8.001120567321777
    4. ')]' → logprob: -8.126120567321777
    5. '()))' → logprob: -9.876120567321777
    6. ')])' → logprob: -12.876120567321777
    7. ')' → logprob: -13.126120567321777
    8. ' ())' → logprob: -14.001120567321777
    9. '(' → logprob: -14.126120567321777
    10. '());' → logprob: -15.376120567321777

Token 22: ']
' (ID: 1592)
  Prédit: ')]'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ')]' → logprob: -0.011570100672543049
    2. '())' → logprob: -4.511569976806641
    3. '()]' → logprob: -8.01156997680664
    4. ')' → logprob: -8.88656997680664
    5. '()' → logprob: -10.88656997680664
    6. ')])' → logprob: -11.13656997680664
    7. ']' → logprob: -12.38656997680664
    8. ')]
' → logprob: -12.63656997680664
    9. '))' → logprob: -12.76156997680664
    10. '(' → logprob: -13.01156997680664

Token 23: 'length' (ID: 7914)
  Prédit: 'n'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'n' → logprob: -0.043727677315473557
    2. 'a' → logprob: -3.5437276363372803
    3. 'x' → logprob: -6.293727874755859
    4. '\n' → logprob: -6.293727874755859
    5. 'for' → logprob: -6.543727874755859
    6. 'd' → logprob: -6.543727874755859
    7. 'N' → logprob: -6.793727874755859
    8. 's' → logprob: -6.793727874755859
    9. 't' → logprob: -7.418727874755859
    10. 'result' → logprob: -7.543727874755859

Token 24: ' =' (ID: 314)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(' → logprob: -0.42659440636634827
    2. '_' → logprob: -1.1765943765640259
    3. 's' → logprob: -3.4265944957733154
    4. '=' → logprob: -5.676594257354736
    5. ')' → logprob: -7.176594257354736
    6. '_s' → logprob: -7.301594257354736
    7. '(s' → logprob: -8.301594734191895
    8. '()' → logprob: -8.551594734191895
    9. ' (' → logprob: -8.676594734191895
    10. ' =' → logprob: -8.926594734191895

Token 25: ' get' (ID: 717)
  Prédit: ' get'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' get' → logprob: -0.4441640079021454
    2. ' int' → logprob: -1.8191640377044678
    3. 'get' → logprob: -2.0691640377044678
    4. ' len' → logprob: -3.1941640377044678
    5. 'int' → logprob: -4.069163799285889
    6. 'len' → logprob: -4.819163799285889
    7. '0' → logprob: -6.194163799285889
    8. ' ' → logprob: -6.569163799285889
    9. ' input' → logprob: -8.069164276123047
    10. 'input' → logprob: -9.944164276123047

Token 26: 'Number' (ID: 3695)
  Prédit: 'Number'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'Number' → logprob: -0.25597724318504333
    2. 'List' → logprob: -1.5059772729873657
    3. 'Length' → logprob: -5.630977153778076
    4. 'L' → logprob: -7.755977153778076
    5. 'N' → logprob: -11.380977630615234
    6. 'String' → logprob: -12.255977630615234
    7. 'Len' → logprob: -13.130977630615234
    8. 'Leng' → logprob: -13.380977630615234
    9. 'length' → logprob: -13.505977630615234
    10. '(' → logprob: -13.880977630615234

Token 27: '()
' (ID: 1234)
  Prédit: '()'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '()' → logprob: -0.00018244501552544534
    2. '()
' → logprob: -9.625182151794434
    3. ' ()' → logprob: -9.625182151794434
    4. '(' → logprob: -10.750182151794434
    5. '())' → logprob: -11.750182151794434
    6. '()]' → logprob: -12.125182151794434
    7. '()\' → logprob: -12.625182151794434
    8. '()

' → logprob: -12.875182151794434
    9. '()<' → logprob: -13.000182151794434
    10. '()*' → logprob: -13.500182151794434

Token 28: 'stuff' (ID: 91669)
  Prédit: 'numbers'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'numbers' → logprob: -1.0155893564224243
    2. 'lst' → logprob: -1.1405893564224243
    3. 'data' → logprob: -2.2655892372131348
    4. 'list' → logprob: -2.2655892372131348
    5. 'arr' → logprob: -3.0155892372131348
    6. '<|end|>' → logprob: -4.015589237213135
    7. ' lst' → logprob: -5.015589237213135
    8. 'array' → logprob: -5.015589237213135
    9. 'elements' → logprob: -5.265589237213135
    10. ' numbers' → logprob: -5.640589237213135

Token 29: ' =' (ID: 314)
  Prédit: 's'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 's' → logprob: -0.1514691561460495
    2. '_' → logprob: -3.0264692306518555
    3. ' =' → logprob: -3.1514692306518555
    4. '=' → logprob: -3.5264692306518555
    5. '_list' → logprob: -4.5264692306518555
    6. 'List' → logprob: -5.7764692306518555
    7. '_length' → logprob: -6.6514692306518555
    8. '[' → logprob: -6.6514692306518555
    9. '=[]' → logprob: -6.9014692306518555
    10. '[]' → logprob: -7.5264692306518555

Token 30: ' get' (ID: 717)
  Prédit: 'get'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'get' → logprob: -0.0025767285842448473
    2. '[get' → logprob: -6.50257682800293
    3. ' get' → logprob: -7.37757682800293
    4. '(get' → logprob: -7.87757682800293
    5. '[]' → logprob: -10.00257682800293
    6. '[' → logprob: -11.00257682800293
    7. 'list' → logprob: -13.50257682800293
    8. '[*' → logprob: -13.62757682800293
    9. '	get' → logprob: -14.12757682800293
    10. ' []' → logprob: -14.50257682800293

Token 31: 'List' (ID: 950)
  Prédit: 'List'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'List' → logprob: -6.704273118884885e-07
    2. 'Number' → logprob: -14.375000953674316
    3. 'Lists' → logprob: -18.375
    4. 'list' → logprob: -18.625
    5. ' List' → logprob: -19.0
    6. '<List' → logprob: -20.125
    7. '	List' → logprob: -20.125
    8. 'L' → logprob: -20.125
    9. 'Lis' → logprob: -20.875
    10. 'Line' → logprob: -21.125

Token 32: '()
' (ID: 1234)
  Prédit: '()'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '()' → logprob: -5.013994814362377e-05
    2. '()
' → logprob: -10.50005054473877
    3. '()]' → logprob: -12.12505054473877
    4. ' ()' → logprob: -12.50005054473877
    5. '(' → logprob: -12.62505054473877
    6. '()<' → logprob: -13.00005054473877
    7. '();' → logprob: -13.12505054473877
    8. '()

' → logprob: -13.37505054473877
    9. '()\' → logprob: -13.62505054473877
    10. '())' → logprob: -13.75005054473877

Token 33: 'val' (ID: 1105)
  Prédit: 'result'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'result' → logprob: -1.071034550666809
    2. 'total' → logprob: -1.821034550666809
    3. 'sum' → logprob: -2.1960344314575195
    4. 'count' → logprob: -2.3210344314575195
    5. 'max' → logprob: -3.0710344314575195
    6. 'for' → logprob: -3.0710344314575195
    7. 'n' → logprob: -3.6960344314575195
    8. 's' → logprob: -3.6960344314575195
    9. 'length' → logprob: -3.8210344314575195
    10. 'sorted' → logprob: -3.8210344314575195

Token 34: ' =' (ID: 314)
  Prédit: 's'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 's' → logprob: -1.1450711488723755
    2. '=' → logprob: -1.5200711488723755
    3. 'u' → logprob: -1.6450711488723755
    4. ' =' → logprob: -1.8950711488723755
    5. '_' → logprob: -2.895071029663086
    6. 'ue' → logprob: -2.895071029663086
    7. '[' → logprob: -5.395071029663086
    8. 'e' → logprob: -6.395071029663086
    9. ' ' → logprob: -7.270071029663086
    10. 'ues' → logprob: -7.520071029663086

Token 35: ' [' (ID: 723)
  Prédit: ' max'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' max' → logprob: -0.9850015640258789
    2. '0' → logprob: -1.610001564025879
    3. ' stuff' → logprob: -1.860001564025879
    4. 'stuff' → logprob: -1.860001564025879
    5. ' ' → logprob: -2.860001564025879
    6. 'max' → logprob: -3.360001564025879
    7. ' length' → logprob: -5.110001564025879
    8. ' sum' → logprob: -5.735001564025879
    9. ' min' → logprob: -5.860001564025879
    10. 'length' → logprob: -6.110001564025879

Token 36: '0' (ID: 15)
  Prédit: '0'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '0' → logprob: -0.027477825060486794
    2. 'stuff' → logprob: -4.027477741241455
    3. '1' → logprob: -6.277477741241455
    4. 'length' → logprob: -6.527477741241455
    5. '-' → logprob: -6.902477741241455
    6. 'False' → logprob: -7.402477741241455
    7. ']' → logprob: -7.652477741241455
    8. '(' → logprob: -7.652477741241455
    9. ' ' → logprob: -7.652477741241455
    10. 'i' → logprob: -7.777477741241455

Token 37: ']
' (ID: 1592)
  Prédit: ']'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ']' → logprob: -0.004931073635816574
    2. ']*' → logprob: -6.0049309730529785
    3. ' ]' → logprob: -6.6299309730529785
    4. ',' → logprob: -7.0049309730529785
    5. ' for' → logprob: -9.004931449890137
    6. ']*(' → logprob: -9.629931449890137
    7. ']+' → logprob: -11.254931449890137
    8. 'for' → logprob: -11.629931449890137
    9. ')]' → logprob: -12.754931449890137
    10. ']int' → logprob: -13.004931449890137

Token 38: 'for' (ID: 1938)
  Prédit: ' for'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' for' → logprob: -0.8829759955406189
    2. 'for' → logprob: -1.0079760551452637
    3. '+' → logprob: -2.0079760551452637
    4. ' ' → logprob: -3.5079760551452637
    5. '*' → logprob: -3.7579760551452637
    6. 'val' → logprob: -4.757976055145264
    7. ' +' → logprob: -4.882976055145264
    8. ' val' → logprob: -5.507976055145264
    9. ',' → logprob: -6.007976055145264
    10. '0' → logprob: -6.132976055145264

Token 39: ' idx' (ID: 14016)
  Prédit: ' i'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' i' → logprob: -0.19712452590465546
    2. ' _' → logprob: -2.197124481201172
    3. ' ' → logprob: -2.947124481201172
    4. '_' → logprob: -4.697124481201172
    5. ' x' → logprob: -5.822124481201172
    6. 'i' → logprob: -6.572124481201172
    7. ' item' → logprob: -7.072124481201172
    8. ' v' → logprob: -7.822124481201172
    9. ' s' → logprob: -8.697124481201172
    10. ' stuff' → logprob: -9.572124481201172

Token 40: ' in' (ID: 306)
  Prédit: ' in'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' in' → logprob: -0.012284054420888424
    2. 'in' → logprob: -4.512284278869629
    3. ',' → logprob: -7.012284278869629
    4. ' ' → logprob: -8.137284278869629
    5. ' ,' → logprob: -10.262284278869629
    6. '	in' → logprob: -13.137284278869629
    7. ',in' → logprob: -14.137284278869629
    8. '_' → logprob: -14.949784278869629
    9. ',val' → logprob: -15.012284278869629
    10. '  ' → logprob: -15.074784278869629

Token 41: ' range' (ID: 3352)
  Prédit: ' range'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' range' → logprob: -0.12712045013904572
    2. 'range' → logprob: -2.1271204948425293
    3. 'stuff' → logprob: -9.002120018005371
    4. ' stuff' → logprob: -10.002120018005371
    5. '	range' → logprob: -11.502120018005371
    6. ' xrange' → logprob: -12.502120018005371
    7. ' ' → logprob: -12.877120018005371
    8. '(range' → logprob: -13.002120018005371
    9. '   ' → logprob: -13.752120018005371
    10. ' val' → logprob: -14.127120018005371

Token 42: '(length' (ID: 47037)
  Prédit: '(length'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(length' → logprob: -0.20443210005760193
    2. '(' → logprob: -1.7044321298599243
    3. '(len' → logprob: -5.954432010650635
    4. ' (' → logprob: -7.829432010650635
    5. '(l' → logprob: -11.579432487487793
    6. 'length' → logprob: -12.579432487487793
    7. ' length' → logprob: -12.954432487487793
    8. '(space' → logprob: -13.579432487487793
    9. '(range' → logprob: -13.954432487487793
    10. '(size' → logprob: -14.829432487487793

Token 43: '-' (ID: 12)
  Prédit: '):'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '):' → logprob: -0.03389083594083786
    2. '+' → logprob: -3.783890724182129
    3. ' ):' → logprob: -5.158890724182129
    4. ')' → logprob: -6.158890724182129
    5. ' +' → logprob: -6.283890724182129
    6. '):
' → logprob: -7.408890724182129
    7. ',' → logprob: -9.533890724182129
    8. ':' → logprob: -10.283890724182129
    9. ']:' → logprob: -10.408890724182129
    10. ' ' → logprob: -10.533890724182129

Token 44: '2' (ID: 17)
  Prédit: '1'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '1' → logprob: -0.00043710620957426727
    2. ' ' → logprob: -8.125436782836914
    3. '2' → logprob: -8.875436782836914
    4. '-' → logprob: -14.875436782836914
    5. '3' → logprob: -15.250436782836914
    6. '   ' → logprob: -15.625436782836914
    7. '0' → logprob: -16.250436782836914
    8. '  ' → logprob: -16.312936782836914
    9. '4' → logprob: -17.125436782836914
    10. 'len' → logprob: -17.312936782836914

Token 45: '):
' (ID: 1883)
  Prédit: ','
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ',' → logprob: -0.17356213927268982
    2. ',-' → logprob: -2.1735620498657227
    3. '):' → logprob: -3.6735620498657227
    4. ' ,' → logprob: -4.173562049865723
    5. '+' → logprob: -6.298562049865723
    6. ' ,-' → logprob: -6.923562049865723
    7. ')' → logprob: -7.423562049865723
    8. ' ):' → logprob: -7.548562049865723
    9. ',+' → logprob: -8.173562049865723
    10. ' +' → logprob: -8.548562049865723

Token 46: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.8660449385643005
    2. ' val' → logprob: -1.1160449981689453
    3. ' ' → logprob: -1.7410449981689453
    4. '	val' → logprob: -3.7410449981689453
    5. '    ' → logprob: -3.8660449981689453
    6. 'val' → logprob: -4.241044998168945
    7. '_val' → logprob: -5.741044998168945
    8. '<|end|>' → logprob: -6.116044998168945
    9. ' if' → logprob: -6.616044998168945
    10. '    
' → logprob: -6.866044998168945

Token 47: ' slice' (ID: 30288)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.8231812715530396
    2. ' val' → logprob: -0.8231812715530396
    3. ' if' → logprob: -3.32318115234375
    4. ' ' → logprob: -3.44818115234375
    5. 'val' → logprob: -3.57318115234375
    6. '    ' → logprob: -4.82318115234375
    7. ' for' → logprob: -5.69818115234375
    8. '0' → logprob: -5.94818115234375
    9. ' idx' → logprob: -6.44818115234375
    10. '1' → logprob: -6.69818115234375

Token 48: 'Me' (ID: 5507)
  Prédit: 'd'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'd' → logprob: -0.3532966375350952
    2. ' =' → logprob: -1.3532966375350952
    3. '=' → logprob: -3.3532967567443848
    4. '_' → logprob: -6.353296756744385
    5. 'ed' → logprob: -7.103296756744385
    6. '_val' → logprob: -7.978296756744385
    7. 's' → logprob: -8.103296279907227
    8. 'val' → logprob: -9.103296279907227
    9. '_start' → logprob: -9.353296279907227
    10. ' ' → logprob: -9.353296279907227

Token 49: ' =' (ID: 314)
  Prédit: ' ='
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' =' → logprob: -0.5304170250892639
    2. '=' → logprob: -1.0304169654846191
    3. 'd' → logprob: -3.030416965484619
    4. '[' → logprob: -6.155416965484619
    5. '(' → logprob: -6.905416965484619
    6. 's' → logprob: -7.155416965484619
    7. '   ' → logprob: -7.280416965484619
    8. ' ' → logprob: -7.405416965484619
    9. '    ' → logprob: -8.655417442321777
    10. '+' → logprob: -9.030417442321777

Token 50: ' stuff' (ID: 9350)
  Prédit: ' stuff'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' stuff' → logprob: -0.048782315105199814
    2. 'stuff' → logprob: -3.1737823486328125
    3. ' val' → logprob: -5.9237823486328125
    4. ' length' → logprob: -7.2987823486328125
    5. ' ' → logprob: -7.6737823486328125
    6. 'val' → logprob: -7.9237823486328125
    7. ' slice' → logprob: -8.298782348632812
    8. ' [' → logprob: -8.548782348632812
    9. '   ' → logprob: -8.548782348632812
    10. '[' → logprob: -9.173782348632812

Token 51: '[idx' (ID: 25582)
  Prédit: '[idx'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '[idx' → logprob: -0.016629070043563843
    2. '[' → logprob: -4.141629219055176
    3. '   ' → logprob: -8.266629219055176
    4. ' [' → logprob: -8.516629219055176
    5. '[val' → logprob: -10.641629219055176
    6. 'idx' → logprob: -11.266629219055176
    7. '[i' → logprob: -11.391629219055176
    8. ' idx' → logprob: -11.891629219055176
    9. '[
' → logprob: -11.891629219055176
    10. ' ' → logprob: -12.016629219055176

Token 52: ':' (ID: 25)
  Prédit: ':'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ':' → logprob: -0.05433574691414833
    2. '+' → logprob: -3.179335832595825
    3. ' :' → logprob: -5.304335594177246
    4. ' +' → logprob: -5.804335594177246
    5. '   ' → logprob: -6.429335594177246
    6. ' ' → logprob: -7.054335594177246
    7. ']' → logprob: -8.304335594177246
    8. ':]' → logprob: -8.429335594177246
    9. '  ' → logprob: -9.429335594177246
    10. ']+' → logprob: -9.804335594177246

Token 53: 'idx' (ID: 13196)
  Prédit: 'idx'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'idx' → logprob: -0.008971436880528927
    2. ' idx' → logprob: -4.758971214294434
    3. ' ' → logprob: -8.633971214294434
    4. '   ' → logprob: -9.508971214294434
    5. '  ' → logprob: -10.008971214294434
    6. '	idx' → logprob: -10.383971214294434
    7. '3' → logprob: -11.758971214294434
    8. '+' → logprob: -11.758971214294434
    9. '(idx' → logprob: -12.008971214294434
    10. '2' → logprob: -13.758971214294434

Token 54: '+' (ID: 10)
  Prédit: '+'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '+' → logprob: -0.0013315484393388033
    2. ' +' → logprob: -6.626331329345703
    3. '2' → logprob: -13.001331329345703
    4. '3' → logprob: -13.626331329345703
    5. '   ' → logprob: -14.751331329345703
    6. '＋' → logprob: -14.876331329345703
    7. '+
' → logprob: -15.001331329345703
    8. ' ' → logprob: -15.376331329345703
    9. ']+' → logprob: -15.813831329345703
    10. '```' → logprob: -16.063831329345703

Token 55: '3' (ID: 18)
  Prédit: '3'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '3' → logprob: -0.004324841313064098
    2. '2' → logprob: -5.504324913024902
    3. '4' → logprob: -8.504324913024902
    4. ' ' → logprob: -10.379324913024902
    5. '   ' → logprob: -12.129324913024902
    6. '1' → logprob: -13.004324913024902
    7. '5' → logprob: -13.004324913024902
    8. '+' → logprob: -13.879324913024902
    9. '  ' → logprob: -15.129324913024902
    10. '-' → logprob: -15.379324913024902

Token 56: ']
' (ID: 1592)
  Prédit: ']'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ']' → logprob: -0.1854381412267685
    2. ']
' → logprob: -1.8104381561279297
    3. ']
' → logprob: -5.56043815612793
    4. ' ]' → logprob: -6.68543815612793
    5. ' ]
' → logprob: -8.18543815612793
    6. '+' → logprob: -8.81043815612793
    7. ']

' → logprob: -9.81043815612793
    8. '   ' → logprob: -9.93543815612793
    9. ' ' → logprob: -11.43543815612793
    10. ' ]
' → logprob: -11.43543815612793

Token 57: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.0780307874083519
    2. ' if' → logprob: -3.328030824661255
    3. '
' → logprob: -4.328030586242676
    4. '    
' → logprob: -4.953030586242676
    5. ' val' → logprob: -5.078030586242676
    6. 'val' → logprob: -5.828030586242676
    7. '<|end|>' → logprob: -5.953030586242676
    8. '[' → logprob: -6.578030586242676
    9. 'if' → logprob: -6.953030586242676
    10. ' 
' → logprob: -7.203030586242676

Token 58: ' middle' (ID: 10006)
  Prédit: ' val'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' val' → logprob: -0.16543996334075928
    2. ' if' → logprob: -2.665440082550049
    3. 'val' → logprob: -2.790440082550049
    4. ' 
' → logprob: -5.540440082550049
    5. ' sum' → logprob: -5.915440082550049
    6. ' ' → logprob: -6.165440082550049
    7. 'if' → logprob: -6.165440082550049
    8. '   ' → logprob: -6.290440082550049
    9. 'sum' → logprob: -6.540440082550049
    10. '
' → logprob: -6.665440082550049

Token 59: ' =' (ID: 314)
  Prédit: ' ='
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' =' → logprob: -0.4450252652168274
    2. '_val' → logprob: -1.6950252056121826
    3. '=' → logprob: -1.8200252056121826
    4. 'Val' → logprob: -5.070025444030762
    5. '_value' → logprob: -5.695025444030762
    6. '_' → logprob: -6.320025444030762
    7. 'val' → logprob: -7.320025444030762
    8. '_idx' → logprob: -7.320025444030762
    9. '_index' → logprob: -8.695025444030762
    10. 'value' → logprob: -9.070025444030762

Token 60: ' slice' (ID: 30288)
  Prédit: 'slice'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'slice' → logprob: -0.212846577167511
    2. ' slice' → logprob: -1.8378465175628662
    3. 'sum' → logprob: -4.462846755981445
    4. 'sorted' → logprob: -4.712846755981445
    5. ' sum' → logprob: -5.712846755981445
    6. 'max' → logprob: -5.962846755981445
    7. ' max' → logprob: -6.212846755981445
    8. ' sorted' → logprob: -6.337846755981445
    9. '(slice' → logprob: -6.962846755981445
    10. 'min' → logprob: -7.587846755981445

Token 61: 'Me' (ID: 5507)
  Prédit: 'Me'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'Me' → logprob: -1.3425219549390022e-05
    2. '(' → logprob: -12.00001335144043
    3. '3' → logprob: -13.50001335144043
    4. '[' → logprob: -13.62501335144043
    5. '	Me' → logprob: -13.62501335144043
    6. '(Me' → logprob: -14.12501335144043
    7. '_me' → logprob: -14.50001335144043
    8. '   ' → logprob: -14.50001335144043
    9. 'Ma' → logprob: -15.12501335144043
    10. '```' → logprob: -15.12501335144043

Token 62: '[' (ID: 58)
  Prédit: '['
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '[' → logprob: -0.0004291195946279913
    2. '[len' → logprob: -8.000429153442383
    3. '1' → logprob: -10.500429153442383
    4. ' [' → logprob: -10.875429153442383
    5. '[int' → logprob: -11.125429153442383
    6. '```' → logprob: -11.500429153442383
    7. '.index' → logprob: -12.875429153442383
    8. '.' → logprob: -12.875429153442383
    9. '   ' → logprob: -13.000429153442383
    10. '2' → logprob: -13.000429153442383

Token 63: '1' (ID: 16)
  Prédit: '1'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '1' → logprob: -1.7835754988482222e-05
    2. ' ' → logprob: -11.125018119812012
    3. '>' → logprob: -14.312518119812012
    4. '   ' → logprob: -14.562518119812012
    5. '```' → logprob: -14.625018119812012
    6. ']' → logprob: -15.062518119812012
    7. ')' → logprob: -15.937518119812012
    8. '
' → logprob: -16.250017166137695
    9. '  ' → logprob: -16.437517166137695
    10. '...' → logprob: -16.437517166137695

Token 64: ']
' (ID: 1592)
  Prédit: ']'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ']' → logprob: -0.006084749009460211
    2. ']*' → logprob: -5.88108491897583
    3. ']-' → logprob: -6.63108491897583
    4. ']>' → logprob: -7.25608491897583
    5. '<|end|>' → logprob: -8.131084442138672
    6. ' ]' → logprob: -8.631084442138672
    7. '-' → logprob: -8.756084442138672
    8. ']==' → logprob: -9.006084442138672
    9. ']>=' → logprob: -9.131084442138672
    10. ']+' → logprob: -9.506084442138672

Token 65: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.8058808445930481
    2. '+' → logprob: -1.1808807849884033
    3. ' if' → logprob: -2.0558807849884033
    4. ' val' → logprob: -3.0558807849884033
    5. '<|end|>' → logprob: -3.5558807849884033
    6. ' +' → logprob: -4.055881023406982
    7. 'val' → logprob: -4.930881023406982
    8. 'if' → logprob: -5.305881023406982
    9. '*' → logprob: -5.805881023406982
    10. ' ' → logprob: -6.430881023406982

Token 66: ' if' (ID: 538)
  Prédit: 'if'
  Correct (stricte): False
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'if' (adapté à ' if') → logprob: -0.3316098749637604
    2. 'val' → logprob: -1.456609845161438
    3. '   ' → logprob: -4.206609725952148
    4. 'for' → logprob: -4.706609725952148
    5. 'left' → logprob: -5.081609725952148
    6. 'max' → logprob: -5.581609725952148
    7. ' if' → logprob: -5.956609725952148
    8. 'right' → logprob: -6.456609725952148
    9. 'count' → logprob: -6.456609725952148
    10. 'min' → logprob: -6.581609725952148

Token 67: ' min' (ID: 1349)
  Prédit: ' middle'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' middle' → logprob: -1.2025457620620728
    2. ' slice' → logprob: -1.3275457620620728
    3. 'middle' → logprob: -1.9525457620620728
    4. 'slice' → logprob: -2.327545642852783
    5. ' all' → logprob: -2.702545642852783
    6. ' (' → logprob: -3.327545642852783
    7. ' val' → logprob: -4.202545642852783
    8. '(slice' → logprob: -4.202545642852783
    9. 'all' → logprob: -4.702545642852783
    10. ' not' → logprob: -4.702545642852783

Token 68: '(slice' (ID: 175489)
  Prédit: '(slice'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(slice' → logprob: -0.0008448873413726687
    2. '(' → logprob: -7.500844955444336
    3. ' slice' → logprob: -9.500844955444336
    4. 'slice' → logprob: -9.500844955444336
    5. ' (' → logprob: -9.625844955444336
    6. '(min' → logprob: -10.250844955444336
    7. '(s' → logprob: -11.000844955444336
    8. '(sl' → logprob: -11.000844955444336
    9. '(m' → logprob: -13.250844955444336
    10. '(st' → logprob: -14.250844955444336

Token 69: 'Me' (ID: 5507)
  Prédit: 'Me'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'Me' → logprob: -5.676981345459353e-06
    2. '(slice' → logprob: -12.750005722045898
    3. '(Me' → logprob: -13.625005722045898
    4. '	Me' → logprob: -15.000005722045898
    5. 'e' → logprob: -15.250005722045898
    6. ')' → logprob: -15.500005722045898
    7. ' Me' → logprob: -15.500005722045898
    8. 'Ma' → logprob: -15.750005722045898
    9. '.Me' → logprob: -15.750005722045898
    10. '   ' → logprob: -17.0000057220459

Token 70: ')' (ID: 8)
  Prédit: ')'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')' → logprob: -0.018227091059088707
    2. ')<' → logprob: -4.8932271003723145
    3. ')==' → logprob: -5.2682271003723145
    4. ' )' → logprob: -6.1432271003723145
    5. ')>' → logprob: -6.6432271003723145
    6. ')<=' → logprob: -7.7682271003723145
    7. '==' → logprob: -8.268226623535156
    8. '<' → logprob: -8.268226623535156
    9. ',' → logprob: -8.393226623535156
    10. ')!=' → logprob: -8.768226623535156

Token 71: ' <' (ID: 464)
  Prédit: ' <'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' <' → logprob: -0.5155456066131592
    2. '<' → logprob: -2.140545606613159
    3. '==' → logprob: -2.140545606613159
    4. ' ==' → logprob: -2.140545606613159
    5. ' <=' → logprob: -3.765545606613159
    6. ' !=' → logprob: -4.640545845031738
    7. '<=' → logprob: -5.015545845031738
    8. '!=' → logprob: -5.765545845031738
    9. ' ' → logprob: -6.015545845031738
    10. ' >' → logprob: -6.265545845031738

Token 72: ' middle' (ID: 10006)
  Prédit: 'middle'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'middle' → logprob: -0.20163299143314362
    2. ' middle' → logprob: -1.7016329765319824
    3. 'slice' → logprob: -9.82663345336914
    4. ' ' → logprob: -10.07663345336914
    5. 'val' → logprob: -10.07663345336914
    6. '>' → logprob: -10.45163345336914
    7. '0' → logprob: -11.07663345336914
    8. ' slice' → logprob: -11.70163345336914
    9. 'midd' → logprob: -12.07663345336914
    10. ' val' → logprob: -12.32663345336914

Token 73: ' <' (ID: 464)
  Prédit: ' and'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' and' → logprob: -0.10688396543264389
    2. ':' → logprob: -2.606884002685547
    3. 'and' → logprob: -4.481884002685547
    4. ' :' → logprob: -4.731884002685547
    5. ' or' → logprob: -5.106884002685547
    6. ' ' → logprob: -7.606884002685547
    7. '>' → logprob: -8.356884002685547
    8. ':
' → logprob: -8.981884002685547
    9. ' >' → logprob: -9.106884002685547
    10. '   ' → logprob: -9.231884002685547

Token 74: ' max' (ID: 2999)
  Prédit: 'max'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'max' → logprob: -0.11284573376178741
    2. ' max' → logprob: -2.2378456592559814
    3. ' ' → logprob: -11.487845420837402
    4. '(max' → logprob: -12.362845420837402
    5. '   ' → logprob: -13.612845420837402
    6. 'min' → logprob: -13.612845420837402
    7. '	max' → logprob: -13.862845420837402
    8. '=max' → logprob: -13.987845420837402
    9. '  ' → logprob: -14.237845420837402
    10. '1' → logprob: -14.362845420837402

Token 75: '(slice' (ID: 175489)
  Prédit: '(slice'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(slice' → logprob: -0.00011439072113716975
    2. ' (' → logprob: -9.625114440917969
    3. 'slice' → logprob: -10.500114440917969
    4. '(' → logprob: -11.125114440917969
    5. ' slice' → logprob: -12.375114440917969
    6. '(sl' → logprob: -14.000114440917969
    7. ' ' → logprob: -15.500114440917969
    8. '```' → logprob: -15.875114440917969
    9. '(s' → logprob: -16.12511444091797
    10. '  ' → logprob: -16.37511444091797

Token 76: 'Me' (ID: 5507)
  Prédit: 'Me'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'Me' → logprob: -1.2664456789934775e-06
    2. ')' → logprob: -14.875000953674316
    3. '	Me' → logprob: -15.500000953674316
    4. ' Me' → logprob: -15.625000953674316
    5. '_me' → logprob: -15.625000953674316
    6. 'e' → logprob: -16.375001907348633
    7. '(Me' → logprob: -16.500001907348633
    8. '```' → logprob: -17.125001907348633
    9. 'me' → logprob: -17.250001907348633
    10. '   ' → logprob: -18.250001907348633

Token 77: '):
' (ID: 1883)
  Prédit: '):'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '):' → logprob: -0.00538067240267992
    2. ')' → logprob: -5.255380630493164
    3. ':' → logprob: -9.255380630493164
    4. '):
' → logprob: -10.380380630493164
    5. ' ):' → logprob: -11.505380630493164
    6. '   ' → logprob: -12.880380630493164
    7. '[' → logprob: -13.755380630493164
    8. ']:' → logprob: -14.130380630493164
    9. ''):' → logprob: -14.505380630493164
    10. ' and' → logprob: -14.755380630493164

Token 78: '       ' (ID: 309)
  Prédit: '       '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '       ' → logprob: -0.003267314750701189
    2. 'val' → logprob: -6.878267288208008
    3. ':' → logprob: -7.378267288208008
    4. '   ' → logprob: -7.753267288208008
    5. ' val' → logprob: -7.753267288208008
    6. '           ' → logprob: -7.878267288208008
    7. '[val' → logprob: -9.753267288208008
    8. '        
' → logprob: -10.003267288208008
    9. '[' → logprob: -10.128267288208008
    10. '      ' → logprob: -10.253267288208008

Token 79: ' val' (ID: 1459)
  Prédit: 'val'
  Correct (stricte): False
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'val' (adapté à ' val') → logprob: -0.1156044453382492
    2. ' val' → logprob: -2.3656044006347656
    3. '       ' → logprob: -4.615604400634766
    4. '   ' → logprob: -5.740604400634766
    5. '           ' → logprob: -6.240604400634766
    6. '	val' → logprob: -9.240604400634766
    7. '[val' → logprob: -10.365604400634766
    8. '```' → logprob: -11.240604400634766
    9. '_val' → logprob: -11.490604400634766
    10. ',val' → logprob: -11.990604400634766

Token 80: '[' (ID: 58)
  Prédit: '.append'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '.append' → logprob: -0.016520852223038673
    2. '.' → logprob: -4.141520977020264
    3. '.extend' → logprob: -7.891520977020264
    4. ' .' → logprob: -10.016520500183105
    5. '.app' → logprob: -10.266520500183105
    6. '[' → logprob: -11.516520500183105
    7. '.Append' → logprob: -11.641520500183105
    8. '.add' → logprob: -12.391520500183105
    9. '[-' → logprob: -12.641520500183105
    10. ' app' → logprob: -14.266520500183105

Token 81: '0' (ID: 15)
  Prédit: '-'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '-' → logprob: -0.006748058367520571
    2. '0' → logprob: -5.006748199462891
    3. '-I' → logprob: -11.00674819946289
    4. ' -' → logprob: -12.00674819946289
    5. '-val' → logprob: -12.38174819946289
    6. ' ' → logprob: -13.75674819946289
    7. '-add' → logprob: -14.88174819946289
    8. '-Val' → logprob: -15.00674819946289
    9. '1' → logprob: -15.13174819946289
    10. '-A' → logprob: -15.38174819946289

Token 82: ']' (ID: 60)
  Prédit: ']'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ']' → logprob: -0.052216287702322006
    2. ']+=' → logprob: -3.0522162914276123
    3. '+=' → logprob: -5.927216053009033
    4. '+' → logprob: -7.677216053009033
    5. ' ]' → logprob: -7.802216053009033
    6. '+]' → logprob: -10.552216529846191
    7. ']+' → logprob: -11.052216529846191
    8. ' +=' → logprob: -11.177216529846191
    9. '=' → logprob: -11.802216529846191
    10. ')' → logprob: -12.427216529846191

Token 83: ' +=' (ID: 2757)
  Prédit: '+='
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '+=' → logprob: -0.0026899136137217283
    2. '=' → logprob: -6.252689838409424
    3. ' +=' → logprob: -7.252689838409424
    4. '+' → logprob: -10.002690315246582
    5. '-=' → logprob: -13.002690315246582
    6. '+=(' → logprob: -13.377690315246582
    7. '+='' → logprob: -13.877690315246582
    8. '++' → logprob: -14.252690315246582
    9. ']+=' → logprob: -14.377690315246582
    10. '+="' → logprob: -14.752690315246582

Token 84: ' ' (ID: 220)
  Prédit: '1'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '1' → logprob: -0.0010014898143708706
    2. ' ' → logprob: -7.126001358032227
    3. 'slice' → logprob: -9.751001358032227
    4. '3' → logprob: -10.501001358032227
    5. 'stuff' → logprob: -10.501001358032227
    6. 'middle' → logprob: -10.626001358032227
    7. '2' → logprob: -10.751001358032227
    8. '0' → logprob: -11.501001358032227
    9. '   ' → logprob: -12.126001358032227
    10. '10' → logprob: -12.813501358032227

Token 85: '1' (ID: 16)
  Prédit: '1'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '1' → logprob: -7.636475493200123e-05
    2. 'slice' → logprob: -10.375076293945312
    3. 'stuff' → logprob: -11.125076293945312
    4. ' ' → logprob: -11.375076293945312
    5. 'middle' → logprob: -12.125076293945312
    6. '0' → logprob: -12.250076293945312
    7. '2' → logprob: -13.000076293945312
    8. '3' → logprob: -13.375076293945312
    9. 'val' → logprob: -14.312576293945312
    10. '   ' → logprob: -14.437576293945312

Token 86: '
' (ID: 198)
  Prédit: ''
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False

Token 87: 'print' (ID: 1598)
  Prédit: ''
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False

Token 88: '(val' (ID: 17391)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(' → logprob: -0.576438844203949
    2. '(val' → logprob: -0.826438844203949
    3. '('' → logprob: -7.951438903808594
    4. '("("' → logprob: -9.326438903808594
    5. '(len' → logprob: -10.326438903808594
    6. 'val' → logprob: -12.201438903808594
    7. '(value' → logprob: -12.326438903808594
    8. ' (' → logprob: -12.451438903808594
    9. '((' → logprob: -13.201438903808594
    10. '("' → logprob: -13.326438903808594

Token 89: '.pop' (ID: 15746)
  Prédit: '['
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '[' → logprob: -0.005937448237091303
    2. ')' → logprob: -5.130937576293945
    3. '0' → logprob: -12.130937576293945
    4. '])' → logprob: -14.380937576293945
    5. '))' → logprob: -14.380937576293945
    6. ']' → logprob: -14.505937576293945
    7. ' )' → logprob: -14.755937576293945
    8. ')[' → logprob: -14.880937576293945
    9. ')`' → logprob: -15.005937576293945
    10. ' ' → logprob: -15.630937576293945

Token 90: '())' (ID: 3516)
  Prédit: '())'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '())' → logprob: -0.03816232457756996
    2. '()' → logprob: -3.2881622314453125
    3. '(' → logprob: -9.163162231445312
    4. ')' → logprob: -12.288162231445312
    5. '();)' → logprob: -12.663162231445312
    6. '())
' → logprob: -13.163162231445312
    7. ' ())' → logprob: -13.413162231445312
    8. '(),' → logprob: -13.538162231445312
    9. '()))' → logprob: -13.538162231445312
    10. '()]' → logprob: -13.913162231445312


RÉSUMÉ:
--------------------------------------------------------------------------------
Total des tokens analysés: 88
Tokens correctement prédits (1ère position, stricte): 37
Tokens correctement prédits (1ère position, avec adaptation): 39
Tokens correctement prédits (top 10): 64
Précision stricte (1ère position): 42.05%
Précision adaptée (1ère position): 44.32%
Précision (top 10): 72.73%
================================================================================
