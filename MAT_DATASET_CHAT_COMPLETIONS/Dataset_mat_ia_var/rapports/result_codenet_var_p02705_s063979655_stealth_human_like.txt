================================================================================
ANALYSE DE PRÉDICTION TOKEN PAR TOKEN (BATCH API)
Date: 2025-06-04 19:17:11
Modèle de tokenisation: gpt-4o-mini
================================================================================

SCRIPT ANALYSÉ:
--------------------------------------------------------------------------------
import sys
import math

# alors ici j'utilise une lambda, mais c'est ptet pas nécessaire...
int1 = lambda x: int(x) - 1

read = sys.stdin.buffer.read
rl = sys.stdin.buffer.readline
rds = sys.stdin.buffer.readlines

# C'est un peu extrême mais on sait jamais
sys.setrecursionlimit(10**5 * 5)

R = int(read())

# Circumference, c'est bien ce qu'on veut
res = 2 * math.pi * R
print(res)
# print(round(res, 10)) # ptet arrondir mais c'est pas demandé
--------------------------------------------------------------------------------

RÉSULTATS D'ANALYSE TOKEN PAR TOKEN:
--------------------------------------------------------------------------------
Token 0: 'import' (ID: 561)
  → Token d'amorce (pas de prédiction)

Token 1: ' sys' (ID: 12228)
  → Token d'amorce (pas de prédiction)

Token 2: '
' (ID: 198)
  → Token d'amorce (pas de prédiction)

Token 3: 'import' (ID: 561)
  Prédit: '.'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '.' → logprob: -0.2973678708076477
    2. '\n' → logprob: -1.547367811203003
    3. '<|end|>' → logprob: -3.797367811203003
    4. '\' → logprob: -4.922368049621582
    5. 'newline' → logprob: -5.672368049621582
    6. 'import' → logprob: -5.672368049621582
    7. '<|end|>' → logprob: -6.047368049621582
    8. '
' → logprob: -6.922368049621582
    9. '```' → logprob: -6.922368049621582
    10. '' → logprob: -7.547368049621582

Token 4: ' math' (ID: 13324)
  Prédit: ' os'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' os' → logprob: -0.00012535012501757592
    2. 'os' → logprob: -9.00012493133545
    3. ' math' → logprob: -13.87512493133545
    4. '"os' → logprob: -15.12512493133545
    5. ' re' → logprob: -15.50012493133545
    6. ' o' → logprob: -15.87512493133545
    7. ' ' → logprob: -16.125125885009766
    8. ' json' → logprob: -16.250125885009766
    9. '	os' → logprob: -16.375125885009766
    10. '_os' → logprob: -17.000125885009766

Token 5: '

' (ID: 279)
  Prédit: '.'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '.' → logprob: -0.2694591283798218
    2. '\n' → logprob: -2.7694592475891113
    3. 'import' → logprob: -3.1444592475891113
    4. '<|end|>' → logprob: -3.2694592475891113
    5. '\' → logprob: -3.3944592475891113
    6. '
' → logprob: -3.6444592475891113
    7. '```' → logprob: -4.394459247589111
    8. '

' → logprob: -5.269459247589111
    9. '<|end|>' → logprob: -5.269459247589111
    10. ',' → logprob: -5.894459247589111

Token 6: '#' (ID: 2)
  Prédit: '.'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '.' → logprob: -0.8548905253410339
    2. '\n' → logprob: -1.6048905849456787
    3. 'import' → logprob: -1.8548905849456787
    4. '\' → logprob: -2.4798905849456787
    5. '```' → logprob: -2.8548905849456787
    6. '
' → logprob: -3.2298905849456787
    7. ',' → logprob: -4.8548903465271
    8. 'def' → logprob: -4.9798903465271
    9. '

' → logprob: -5.2298903465271
    10. '<|end|>' → logprob: -5.6048903465271

Token 7: ' alors' (ID: 17971)
  Prédit: ' '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' ' → logprob: -0.606051504611969
    2. ' def' → logprob: -1.1060514450073242
    3. 'def' → logprob: -2.231051445007324
    4. ' factorial' → logprob: -6.231051445007324
    5. ' #' → logprob: -6.731051445007324
    6. ' ' → logprob: -6.731051445007324
    7. ' is' → logprob: -6.856051445007324
    8. 'import' → logprob: -7.106051445007324
    9. ' import' → logprob: -7.231051445007324
    10. ' 

' → logprob: -7.356051445007324

Token 8: ' ici' (ID: 27994)
  Prédit: '#'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '#' → logprob: -0.24634425342082977
    2. 'def' → logprob: -2.6213443279266357
    3. ',' → logprob: -2.8713443279266357
    4. '.' → logprob: -3.4963443279266357
    5. '_' → logprob: -3.7463443279266357
    6. '=' → logprob: -4.121344089508057
    7. ':' → logprob: -5.371344089508057
    8. '\' → logprob: -5.996344089508057
    9. 'i' → logprob: -6.246344089508057
    10. 'n' → logprob: -6.371344089508057

Token 9: ' j' (ID: 441)
  Prédit: '#'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '#' → logprob: -0.0046877493150532246
    2. 'def' → logprob: -6.129687786102295
    3. ',' → logprob: -7.254687786102295
    4. '<|end|>' → logprob: -7.879687786102295
    5. '=' → logprob: -8.129687309265137
    6. '\' → logprob: -8.379687309265137
    7. ' ' → logprob: -8.504687309265137
    8. 'import' → logprob: -8.754687309265137
    9. ':' → logprob: -8.754687309265137
    10. '-' → logprob: -10.129687309265137

Token 10: ''util' (ID: 37761)
  Prédit: 'e'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'e' → logprob: -0.18991032242774963
    2. ''' → logprob: -1.8149102926254272
    3. ''é' → logprob: -6.439910411834717
    4. 'a' → logprob: -6.564910411834717
    5. '')' → logprob: -6.564910411834717
    6. 'i' → logprob: -6.689910411834717
    7. 's' → logprob: -7.189910411834717
    8. ''''' → logprob: -7.564910411834717
    9. 'é' → logprob: -7.814910411834717
    10. '#' → logprob: -7.814910411834717

Token 11: 'ise' (ID: 1096)
  Prédit: 'se'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'se' → logprob: -0.0024512805975973606
    2. 's' → logprob: -6.627451419830322
    3. '#' → logprob: -7.377451419830322
    4. 'ser' → logprob: -8.127450942993164
    5. 't' → logprob: -10.127450942993164
    6. '```' → logprob: -10.127450942993164
    7. 'sé' → logprob: -10.127450942993164
    8. 'sera' → logprob: -11.752450942993164
    9. 'import' → logprob: -12.002450942993164
    10. 'set' → logprob: -12.252450942993164

Token 12: ' une' (ID: 2463)
  Prédit: ' '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' ' → logprob: -0.011433986015617847
    2. '_' → logprob: -5.261434078216553
    3. ' math' → logprob: -6.261434078216553
    4. ',' → logprob: -7.386434078216553
    5. '.' → logprob: -7.511434078216553
    6. ' ' → logprob: -7.761434078216553
    7. '  ' → logprob: -8.011433601379395
    8. ' numpy' → logprob: -8.636433601379395
    9. ' un' → logprob: -9.136433601379395
    10. ' `' → logprob: -9.136433601379395

Token 13: ' lambda' (ID: 27871)
  Prédit: ' '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' ' → logprob: -0.5944669246673584
    2. 'fonction' → logprob: -1.2194669246673584
    3. ' fonction' → logprob: -2.5944669246673584
    4. 'f' → logprob: -3.7194669246673584
    5. 'fon' → logprob: -4.3444671630859375
    6. ' #' → logprob: -4.3444671630859375
    7. '#' → logprob: -5.3444671630859375
    8. ' ' → logprob: -5.5944671630859375
    9. ' ```' → logprob: -6.3444671630859375
    10. 'bibli' → logprob: -6.4694671630859375

Token 14: ',' (ID: 11)
  Prédit: ' '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' ' → logprob: -0.4170092046260834
    2. ' =' → logprob: -2.167009115219116
    3. ',' → logprob: -3.417009115219116
    4. ':' → logprob: -3.542009115219116
    5. 'f' → logprob: -3.542009115219116
    6. ' (' → logprob: -3.667009115219116
    7. ' :' → logprob: -3.792009115219116
    8. '(' → logprob: -3.917009115219116
    9. '_' → logprob: -4.417009353637695
    10. '=' → logprob: -4.542009353637695

Token 15: ' mais' (ID: 2899)
  Prédit: ' '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' ' → logprob: -0.1548760086297989
    2. ' lambda' → logprob: -3.7798759937286377
    3. 'lambda' → logprob: -4.154876232147217
    4. ' :' → logprob: -4.279876232147217
    5. ' mais' → logprob: -4.779876232147217
    6. ',' → logprob: -4.904876232147217
    7. 'f' → logprob: -5.029876232147217
    8. ' qui' → logprob: -5.029876232147217
    9. ' ,' → logprob: -5.154876232147217
    10. '(' → logprob: -5.529876232147217

Token 16: ' c' (ID: 274)
  Prédit: ' je'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' je' → logprob: -0.7661904096603394
    2. 'je' → logprob: -2.516190528869629
    3. ' ça' → logprob: -2.641190528869629
    4. ' vous' → logprob: -2.766190528869629
    5. ' ce' → logprob: -2.766190528869629
    6. 'vous' → logprob: -3.016190528869629
    7. 'a' → logprob: -3.266190528869629
    8. 'cela' → logprob: -3.391190528869629
    9. ' on' → logprob: -4.016190528869629
    10. 'c' → logprob: -4.391190528869629

Token 17: ''est' (ID: 6616)
  Prédit: ''est'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ''est' → logprob: -0.20754657685756683
    2. ''' → logprob: -2.7075464725494385
    3. 'est' → logprob: -3.0825464725494385
    4. 'e' → logprob: -3.5825464725494385
    5. 'n' → logprob: -4.582546710968018
    6. ''#' → logprob: -4.582546710968018
    7. '#' → logprob: -5.207546710968018
    8. 'a' → logprob: -5.207546710968018
    9. 'pas' → logprob: -6.207546710968018
    10. ''''' → logprob: -6.332546710968018

Token 18: ' pt' (ID: 18961)
  Prédit: ' une'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' une' → logprob: -0.9948236346244812
    2. 'pas' → logprob: -1.619823694229126
    3. ' pas' → logprob: -2.119823694229126
    4. 'une' → logprob: -3.119823694229126
    5. ' un' → logprob: -3.119823694229126
    6. 'a' → logprob: -3.494823694229126
    7. 'tout' → logprob: -3.619823694229126
    8. ' juste' → logprob: -3.869823694229126
    9. 'plus' → logprob: -3.994823694229126
    10. ' mieux' → logprob: -4.494823455810547

Token 19: 'et' (ID: 292)
  Prédit: 'être'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'être' → logprob: -1.025938630104065
    2. 'etre' → logprob: -1.525938630104065
    3. 'êt' → logprob: -1.775938630104065
    4. 'ête' → logprob: -2.6509385108947754
    5. 'et' → logprob: -2.7759385108947754
    6. '-être' → logprob: -3.6509385108947754
    7. 'ete' → logprob: -3.7759385108947754
    8. 'u' → logprob: -4.025938510894775
    9. '```' → logprob: -4.275938510894775
    10. 'e' → logprob: -4.275938510894775

Token 20: ' pas' (ID: 2173)
  Prédit: ' pas'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' pas' → logprob: -0.5088698863983154
    2. 'pas' → logprob: -1.1338698863983154
    3. ' mieux' → logprob: -2.6338698863983154
    4. 'plus' → logprob: -6.2588701248168945
    5. ' plus' → logprob: -7.5088701248168945
    6. ' une' → logprob: -7.7588701248168945
    7. ' ' → logprob: -8.383870124816895
    8. ' un' → logprob: -8.633870124816895
    9. 'moins' → logprob: -8.633870124816895
    10. ' préférable' → logprob: -9.008870124816895

Token 21: ' nécessaire' (ID: 43098)
  Prédit: 'la'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'la' → logprob: -1.4818315505981445
    2. ' la' → logprob: -2.3568315505981445
    3. 'le' → logprob: -2.4818315505981445
    4. 'tr' → logprob: -2.6068315505981445
    5. ' une' → logprob: -2.6068315505981445
    6. 'une' → logprob: -2.6068315505981445
    7. ' le' → logprob: -2.8568315505981445
    8. 'mal' → logprob: -3.2318315505981445
    9. 'né' → logprob: -3.3568315505981445
    10. 'utile' → logprob: -3.8568315505981445

Token 22: '...
' (ID: 4908)
  Prédit: ','
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ',' → logprob: -0.8544864058494568
    2. '\' → logprob: -1.3544864654541016
    3. ':' → logprob: -2.4794864654541016
    4. '.' → logprob: -2.9794864654541016
    5. 'def' → logprob: -3.1044864654541016
    6. 'f' → logprob: -3.3544864654541016
    7. '#' → logprob: -3.7294864654541016
    8. ')' → logprob: -4.479486465454102
    9. 'x' → logprob: -5.104486465454102
    10. 'a' → logprob: -5.229486465454102

Token 23: 'int' (ID: 491)
  Prédit: ','
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ',' → logprob: -0.6580008268356323
    2. 'f' → logprob: -1.9080008268356323
    3. 'def' → logprob: -2.408000946044922
    4. '\' → logprob: -2.908000946044922
    5. 'a' → logprob: -2.908000946044922
    6. ':' → logprob: -3.158000946044922
    7. '.' → logprob: -3.783000946044922
    8. 'x' → logprob: -4.533000946044922
    9. 'n' → logprob: -4.658000946044922
    10. 's' → logprob: -5.033000946044922

Token 24: '1' (ID: 16)
  Prédit: '_val'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '_val' → logprob: -1.4008718729019165
    2. 'eger' → logprob: -1.4008718729019165
    3. '_' → logprob: -1.5258718729019165
    4. 'er' → logprob: -2.025871753692627
    5. '_var' → logprob: -2.650871753692627
    6. ' =' → logprob: -3.275871753692627
    7. '_func' → logprob: -5.150871753692627
    8. 's' → logprob: -5.275871753692627
    9. 'égr' → logprob: -5.400871753692627
    10. '(' → logprob: -5.400871753692627

Token 25: ' =' (ID: 314)
  Prédit: ' ='
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' =' → logprob: -0.2487221509218216
    2. '=' → logprob: -2.1237220764160156
    3. '_' → logprob: -2.6237220764160156
    4. '(' → logprob: -4.498722076416016
    5. 's' → logprob: -5.873722076416016
    6. ',' → logprob: -5.998722076416016
    7. '1' → logprob: -6.123722076416016
    8. '_lambda' → logprob: -6.498722076416016
    9. '_val' → logprob: -6.498722076416016
    10. ' ' → logprob: -6.623722076416016

Token 26: ' lambda' (ID: 27871)
  Prédit: ' lambda'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' lambda' → logprob: -0.026373455300927162
    2. 'lambda' → logprob: -3.6513733863830566
    3. ' ' → logprob: -10.401373863220215
    4. ' int' → logprob: -10.651373863220215
    5. '(lambda' → logprob: -11.651373863220215
    6. 'int' → logprob: -12.776373863220215
    7. ' lamb' → logprob: -13.526373863220215
    8. '   ' → logprob: -13.776373863220215
    9. ' math' → logprob: -14.026373863220215
    10. '  ' → logprob: -14.276373863220215

Token 27: ' x' (ID: 1215)
  Prédit: ' x'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' x' → logprob: -0.026525072753429413
    2. 'x' → logprob: -3.6515250205993652
    3. ' a' → logprob: -9.151525497436523
    4. ' n' → logprob: -9.776525497436523
    5. ' ' → logprob: -10.901525497436523
    6. 'a' → logprob: -11.151525497436523
    7. ' s' → logprob: -11.776525497436523
    8. ' lambda' → logprob: -12.276525497436523
    9. ' i' → logprob: -12.651525497436523
    10. 'n' → logprob: -13.151525497436523

Token 28: ':' (ID: 25)
  Prédit: ':'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ':' → logprob: -0.007776625920087099
    2. ' :' → logprob: -4.882776737213135
    3. ':x' → logprob: -8.882776260375977
    4. ',' → logprob: -11.257776260375977
    5. ' x' → logprob: -11.382776260375977
    6. 'x' → logprob: -13.257776260375977
    7. ' ' → logprob: -13.882776260375977
    8. ':int' → logprob: -13.882776260375977
    9. '=' → logprob: -14.132776260375977
    10. ',x' → logprob: -14.382776260375977

Token 29: ' int' (ID: 677)
  Prédit: ' int'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' int' → logprob: -0.03094698116183281
    2. 'int' → logprob: -3.780946969985962
    3. ' math' → logprob: -5.530947208404541
    4. ' x' → logprob: -5.780947208404541
    5. 'x' → logprob: -8.530946731567383
    6. 'math' → logprob: -9.030946731567383
    7. ' abs' → logprob: -9.155946731567383
    8. ' ' → logprob: -9.280946731567383
    9. ' max' → logprob: -9.530946731567383
    10. '(int' → logprob: -12.155946731567383

Token 30: '(x' (ID: 4061)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(' → logprob: -0.575975775718689
    2. '(x' → logprob: -0.825975775718689
    3. ' (' → logprob: -10.57597541809082
    4. '(
' → logprob: -12.70097541809082
    5. '('' → logprob: -13.32597541809082
    6. 'x' → logprob: -13.70097541809082
    7. '(round' → logprob: -14.20097541809082
    8. '((' → logprob: -14.45097541809082
    9. '32' → logprob: -14.45097541809082
    10. '(abs' → logprob: -14.70097541809082

Token 31: ')' (ID: 8)
  Prédit: ')'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')' → logprob: -1.1279553291387856e-05
    2. '))' → logprob: -12.125011444091797
    3. ' )' → logprob: -12.625011444091797
    4. '+' → logprob: -15.125011444091797
    5. '(' → logprob: -15.250011444091797
    6. ')`' → logprob: -15.250011444091797
    7. '*' → logprob: -15.750011444091797
    8. ')))' → logprob: -15.750011444091797
    9. '**' → logprob: -15.875011444091797
    10. ' ' → logprob: -15.875011444091797

Token 32: ' -' (ID: 533)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '(' → logprob: -0.026452407240867615
    2. '(
' → logprob: -4.901452541351318
    3. ')' → logprob: -5.026452541351318
    4. '
' → logprob: -5.776452541351318
    5. '#' → logprob: -6.276452541351318
    6. ',' → logprob: -6.651452541351318
    7. '(x' → logprob: -6.901452541351318
    8. ' ' → logprob: -7.026452541351318
    9. '\n' → logprob: -7.151452541351318
    10. '<|end|>' → logprob: -7.651452541351318

Token 33: ' ' (ID: 220)
  Prédit: ' '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' ' → logprob: -0.20172740519046783
    2. '1' → logprob: -1.7017273902893066
    3. '2' → logprob: -8.826727867126465
    4. '5' → logprob: -10.201727867126465
    5. '3' → logprob: -10.701727867126465
    6. '0' → logprob: -10.826727867126465
    7. ' math' → logprob: -11.076727867126465
    8. '10' → logprob: -11.201727867126465
    9. '4' → logprob: -11.326727867126465
    10. '32' → logprob: -11.576727867126465

Token 34: '1' (ID: 16)
  Prédit: '1'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '1' → logprob: -0.03244093060493469
    2. ' ' → logprob: -3.5324409008026123
    3. '2' → logprob: -6.907441139221191
    4. '5' → logprob: -7.657441139221191
    5. '3' → logprob: -8.032441139221191
    6. '0' → logprob: -8.157441139221191
    7. '10' → logprob: -8.532441139221191
    8. '4' → logprob: -9.157441139221191
    9. '42' → logprob: -10.157441139221191
    10. '100' → logprob: -10.282441139221191

Token 35: '

' (ID: 279)
  Prédit: ''
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False

Token 36: 'read' (ID: 1293)
  Prédit: '
'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '
' → logprob: -0.9838781356811523
    2. '#' → logprob: -1.1088781356811523
    3. 'def' → logprob: -2.2338781356811523
    4. '<|end|>' → logprob: -2.3588781356811523
    5. 'x' → logprob: -2.9838781356811523
    6. '

' → logprob: -4.733878135681152
    7. '```' → logprob: -5.108878135681152
    8. ' ' → logprob: -5.483878135681152
    9. '\n' → logprob: -5.608878135681152
    10. '<|end|>' → logprob: -5.858878135681152

Token 37: ' =' (ID: 314)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(' → logprob: -0.8447982668876648
    2. ' =' → logprob: -1.4697983264923096
    3. '_line' → logprob: -1.4697983264923096
    4. '_' → logprob: -2.8447983264923096
    5. '=' → logprob: -4.3447980880737305
    6. '_input' → logprob: -4.5947980880737305
    7. '()' → logprob: -4.7197980880737305
    8. ')' → logprob: -4.8447980880737305
    9. 'line' → logprob: -5.7197980880737305
    10. '_data' → logprob: -6.2197980880737305

Token 38: ' sys' (ID: 12228)
  Prédit: 'sys'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'sys' → logprob: -0.5396573543548584
    2. 'input' → logprob: -1.0396573543548584
    3. 'lambda' → logprob: -3.0396573543548584
    4. ' sys' → logprob: -4.4146575927734375
    5. ' input' → logprob: -6.0396575927734375
    6. ' lambda' → logprob: -6.9146575927734375
    7. '(sys' → logprob: -9.414657592773438
    8. 'int' → logprob: -10.289657592773438
    9. '(lambda' → logprob: -11.164657592773438
    10. '=sys' → logprob: -11.789657592773438

Token 39: '.stdin' (ID: 93480)
  Prédit: '.stdin'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '.stdin' → logprob: -0.0005863950937055051
    2. '.stdout' → logprob: -8.12558650970459
    3. '.' → logprob: -8.62558650970459
    4. '.argv' → logprob: -9.25058650970459
    5. '.std' → logprob: -11.50058650970459
    6. '.readline' → logprob: -13.37558650970459
    7. '.stderr' → logprob: -13.62558650970459
    8. '.st' → logprob: -14.00058650970459
    9. '.input' → logprob: -14.50058650970459
    10. '.standard' → logprob: -16.125585556030273

Token 40: '.buffer' (ID: 48964)
  Prédit: '.readline'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '.readline' → logprob: -0.2580423057079315
    2. '.' → logprob: -1.508042335510254
    3. '.read' → logprob: -5.133042335510254
    4. '.readlines' → logprob: -8.758042335510254
    5. '.Read' → logprob: -12.008042335510254
    6. 'read' → logprob: -12.133042335510254
    7. ' .' → logprob: -12.258042335510254
    8. '<|end|>' → logprob: -12.258042335510254
    9. '.write' → logprob: -12.758042335510254
    10. '.buffer' → logprob: -13.258042335510254

Token 41: '.read' (ID: 7211)
  Prédit: '.readline'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '.readline' → logprob: -0.2016083300113678
    2. '.read' → logprob: -1.7016083002090454
    3. 'read' → logprob: -9.201608657836914
    4. '.' → logprob: -9.701608657836914
    5. '.readlines' → logprob: -10.576608657836914
    6. '_read' → logprob: -12.201608657836914
    7. ' readline' → logprob: -14.326608657836914
    8. '.write' → logprob: -14.451608657836914
    9. '.raw' → logprob: -14.826608657836914
    10. '```' → logprob: -15.076608657836914

Token 42: '
' (ID: 198)
  Prédit: '()'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '()' → logprob: -0.638695478439331
    2. '(' → logprob: -1.513695478439331
    3. 'line' → logprob: -1.638695478439331
    4. '().' → logprob: -3.388695478439331
    5. '_line' → logprob: -4.13869571685791
    6. '1' → logprob: -6.13869571685791
    7. '```' → logprob: -6.76369571685791
    8. 'exact' → logprob: -7.01369571685791
    9. ')' → logprob: -7.76369571685791
    10. 'into' → logprob: -7.76369571685791

Token 43: 'rl' (ID: 3398)
  Prédit: '()'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '()' → logprob: -0.02739524655044079
    2. '(' → logprob: -4.402395248413086
    3. '
' → logprob: -5.652395248413086
    4. '()

' → logprob: -5.777395248413086
    5. '()
' → logprob: -5.777395248413086
    6. '()\' → logprob: -5.902395248413086
    7. 'def' → logprob: -7.277395248413086
    8. '().' → logprob: -7.902395248413086
    9. '(
' → logprob: -7.902395248413086
    10. '\n' → logprob: -8.277395248413086

Token 44: ' =' (ID: 314)
  Prédit: 'ine'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'ine' → logprob: -0.00033320096554234624
    2. 'in' → logprob: -8.625332832336426
    3. 'ines' → logprob: -9.125332832336426
    4. ' =' → logprob: -11.125332832336426
    5. '=' → logprob: -11.500332832336426
    6. 'en' → logprob: -11.875332832336426
    7. '1' → logprob: -12.750332832336426
    8. 'ist' → logprob: -13.125332832336426
    9. '```' → logprob: -13.625332832336426
    10. 'inear' → logprob: -13.875332832336426

Token 45: ' sys' (ID: 12228)
  Prédit: 'sys'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'sys' → logprob: -0.12223632633686066
    2. ' sys' → logprob: -2.7472362518310547
    3. 'lambda' → logprob: -3.1222362518310547
    4. 'read' → logprob: -5.872236251831055
    5. ' lambda' → logprob: -5.872236251831055
    6. 'input' → logprob: -7.872236251831055
    7. ' readline' → logprob: -7.997236251831055
    8. '.readline' → logprob: -8.872236251831055
    9. '(sys' → logprob: -8.872236251831055
    10. '=sys' → logprob: -9.747236251831055

Token 46: '.stdin' (ID: 93480)
  Prédit: '.stdin'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '.stdin' → logprob: -0.004711476620286703
    2. '.stdout' → logprob: -5.754711627960205
    3. '.argv' → logprob: -6.879711627960205
    4. 'stdin' → logprob: -7.879711627960205
    5. '.' → logprob: -10.129711151123047
    6. '.stderr' → logprob: -10.379711151123047
    7. '.readline' → logprob: -10.379711151123047
    8. 'd' → logprob: -12.254711151123047
    9. 'in' → logprob: -12.754711151123047
    10. '.std' → logprob: -12.879711151123047

Token 47: '.buffer' (ID: 48964)
  Prédit: '.readline'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '.readline' → logprob: -0.0069455336779356
    2. '.' → logprob: -5.006945610046387
    3. '.buffer' → logprob: -9.006945610046387
    4. '.read' → logprob: -9.756945610046387
    5. '<|end|>' → logprob: -10.631945610046387
    6. '.readlines' → logprob: -12.006945610046387
    7. ' readline' → logprob: -12.756945610046387
    8. '.stdin' → logprob: -13.131945610046387
    9. ' .' → logprob: -13.256945610046387
    10. '.r' → logprob: -13.381945610046387

Token 48: '.readline' (ID: 74673)
  Prédit: '.readline'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '.readline' → logprob: -0.0024620986077934504
    2. ' readline' → logprob: -6.127461910247803
    3. 'read' → logprob: -8.502462387084961
    4. '1' → logprob: -10.752462387084961
    5. '.read' → logprob: -11.002462387084961
    6. 'line' → logprob: -11.127462387084961
    7. '_read' → logprob: -11.377462387084961
    8. '.readlines' → logprob: -12.502462387084961
    9. 'getline' → logprob: -13.127462387084961
    10. '2' → logprob: -14.377462387084961

Token 49: '
' (ID: 198)
  Prédit: '
'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '
' → logprob: -0.06929997354745865
    2. '()' → logprob: -2.8192999362945557
    3. '

' → logprob: -5.944300174713135
    4. 'def' → logprob: -6.694300174713135
    5. '(' → logprob: -7.194300174713135
    6. '\n' → logprob: -7.694300174713135
    7. '()
' → logprob: -8.069299697875977
    8. '(
' → logprob: -8.194299697875977
    9. '#' → logprob: -8.444299697875977
    10. ' ' → logprob: -8.694299697875977

Token 50: 'r' (ID: 81)
  Prédit: '
'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '
' → logprob: -0.05648168548941612
    2. '

' → logprob: -3.3064815998077393
    3. 'for' → logprob: -5.181481838226318
    4. 'def' → logprob: -5.306481838226318
    5. '<|end|>' → logprob: -6.306481838226318
    6. 'x' → logprob: -6.806481838226318
    7. '#' → logprob: -7.431481838226318
    8. 'read' → logprob: -7.431481838226318
    9. '()' → logprob: -7.681481838226318
    10. '\n' → logprob: -8.30648136138916

Token 51: 'ds' (ID: 8559)
  Prédit: 'l'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'l' → logprob: -0.14439892768859863
    2. 'ead' → logprob: -2.0193989276885986
    3. 'd' → logprob: -8.01939868927002
    4. 'e' → logprob: -8.14439868927002
    5. '1' → logprob: -8.76939868927002
    6. 'un' → logprob: -9.14439868927002
    7. 'el' → logprob: -9.39439868927002
    8. 'L' → logprob: -9.51939868927002
    9. 'aw' → logprob: -9.89439868927002
    10. '```' → logprob: -9.95689868927002

Token 52: ' =' (ID: 314)
  Prédit: ' ='
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' =' → logprob: -0.2962956428527832
    2. 'trip' → logprob: -2.171295642852783
    3. '=' → logprob: -2.421295642852783
    4. 'ys' → logprob: -3.296295642852783
    5. 'plit' → logprob: -5.671295642852783
    6. 't' → logprob: -5.671295642852783
    7. 'tring' → logprob: -6.421295642852783
    8. 'canf' → logprob: -6.796295642852783
    9. 'ize' → logprob: -6.921295642852783
    10. 'tr' → logprob: -7.296295642852783

Token 53: ' sys' (ID: 12228)
  Prédit: 'read'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'read' → logprob: -0.42999133467674255
    2. 'sys' → logprob: -1.304991364479065
    3. ' sys' → logprob: -3.5549912452697754
    4. 'rl' → logprob: -3.6799912452697754
    5. ' read' → logprob: -4.054991245269775
    6. ' rl' → logprob: -5.804991245269775
    7. 'int' → logprob: -5.929991245269775
    8. 'lambda' → logprob: -8.429991722106934
    9. ' readline' → logprob: -8.554991722106934
    10. 'list' → logprob: -8.554991722106934

Token 54: '.stdin' (ID: 93480)
  Prédit: '.stdin'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '.stdin' → logprob: -0.04195494204759598
    2. '.stdout' → logprob: -3.29195499420166
    3. '.' → logprob: -5.91695499420166
    4. '.readline' → logprob: -7.79195499420166
    5. 'stdin' → logprob: -8.41695499420166
    6. '.buffer' → logprob: -8.54195499420166
    7. '.argv' → logprob: -8.66695499420166
    8. '.stderr' → logprob: -8.79195499420166
    9. '.read' → logprob: -11.41695499420166
    10. '.buf' → logprob: -11.66695499420166

Token 55: '.buffer' (ID: 48964)
  Prédit: '.buffer'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '.buffer' → logprob: -0.5429247617721558
    2. '.readline' → logprob: -0.9179247617721558
    3. '.read' → logprob: -5.042924880981445
    4. 'buffer' → logprob: -5.292924880981445
    5. '.' → logprob: -5.417924880981445
    6. '.readlines' → logprob: -6.417924880981445
    7. '.decode' → logprob: -6.917924880981445
    8. '.split' → logprob: -8.292924880981445
    9. '.strip' → logprob: -8.917924880981445
    10. '.rstrip' → logprob: -9.167924880981445

Token 56: '.readlines' (ID: 92237)
  Prédit: 'read'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'read' → logprob: -0.013647175393998623
    2. '.read' → logprob: -5.013647079467773
    3. '.readline' → logprob: -5.638647079467773
    4. '_read' → logprob: -6.263647079467773
    5. 'rstrip' → logprob: -7.888647079467773
    6. 'decode' → logprob: -8.263647079467773
    7. '.readlines' → logprob: -8.513647079467773
    8. 'strip' → logprob: -8.638647079467773
    9. ' readline' → logprob: -8.888647079467773
    10. 'split' → logprob: -9.388647079467773

Token 57: '

' (ID: 279)
  Prédit: '
'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '
' → logprob: -0.2651854157447815
    2. '()' → logprob: -2.1401853561401367
    3. 'r' → logprob: -3.8901853561401367
    4. ' ' → logprob: -4.140185356140137
    5. '<|end|>' → logprob: -4.515185356140137
    6. '(' → logprob: -4.765185356140137
    7. 'read' → logprob: -4.890185356140137
    8. 'def' → logprob: -4.890185356140137
    9. '_' → logprob: -5.015185356140137
    10. '[' → logprob: -5.390185356140137

Token 58: '#' (ID: 2)
  Prédit: 'def'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'def' → logprob: -0.6482946276664734
    2. '#' → logprob: -1.8982946872711182
    3. '(' → logprob: -2.773294687271118
    4. 'x' → logprob: -3.148294687271118
    5. '
' → logprob: -3.148294687271118
    6. 'for' → logprob: -3.398294687271118
    7. 'n' → logprob: -3.523294687271118
    8. '()' → logprob: -3.898294687271118
    9. '=' → logprob: -4.648294448852539
    10. 'r' → logprob: -4.648294448852539

Token 59: ' C' (ID: 363)
  Prédit: 'def'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'def' → logprob: -0.4393545389175415
    2. 'data' → logprob: -1.3143545389175415
    3. '#' → logprob: -3.564354419708252
    4. ' def' → logprob: -4.189354419708252
    5. ' data' → logprob: -4.439354419708252
    6. 'n' → logprob: -4.814354419708252
    7. ' #' → logprob: -5.689354419708252
    8. 'for' → logprob: -5.939354419708252
    9. 'x' → logprob: -6.064354419708252
    10. 'result' → logprob: -6.439354419708252

Token 60: ''est' (ID: 6616)
  Prédit: 'on'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'on' → logprob: -1.28867506980896
    2. '#' → logprob: -1.41367506980896
    3. 'ont' → logprob: -2.41367506980896
    4. 'al' → logprob: -3.28867506980896
    5. ''est' → logprob: -3.53867506980896
    6. ' =' → logprob: -3.53867506980896
    7. 'om' → logprob: -3.66367506980896
    8. 'lass' → logprob: -3.66367506980896
    9. 'omp' → logprob: -3.66367506980896
    10. 'ode' → logprob: -3.66367506980896

Token 61: ' un' (ID: 537)
  Prédit: ' une'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' une' → logprob: -1.2402437925338745
    2. ' un' → logprob: -1.7402437925338745
    3. 'tout' → logprob: -2.240243911743164
    4. ' la' → logprob: -3.115243911743164
    5. ' tout' → logprob: -3.240243911743164
    6. ' souvent' → logprob: -3.365243911743164
    7. ' pour' → logprob: -3.615243911743164
    8. ' ici' → logprob: -3.615243911743164
    9. ' juste' → logprob: -3.615243911743164
    10. ' pas' → logprob: -3.615243911743164

Token 62: ' peu' (ID: 9235)
  Prédit: 'e'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'e' → logprob: -0.21581058204174042
    2. ' commentaire' → logprob: -2.215810537338257
    3. ' comment' → logprob: -3.340810537338257
    4. 'comment' → logprob: -5.590810775756836
    5. ' peu' → logprob: -5.715810775756836
    6. 'a' → logprob: -5.715810775756836
    7. ' style' → logprob: -5.840810775756836
    8. ' input' → logprob: -6.090810775756836
    9. ' outil' → logprob: -6.090810775756836
    10. ' code' → logprob: -6.090810775756836

Token 63: ' extr' (ID: 15674)
  Prédit: 'tout'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'tout' → logprob: -0.25568389892578125
    2. ' tout' → logprob: -2.1306838989257812
    3. 'comme' → logprob: -3.8806838989257812
    4. ' comme' → logprob: -4.630683898925781
    5. 'la' → logprob: -5.130683898925781
    6. ' plus' → logprob: -5.130683898925781
    7. ' compliqué' → logprob: -5.255683898925781
    8. 'plus' → logprob: -5.505683898925781
    9. ' un' → logprob: -5.505683898925781
    10. ' dommage' → logprob: -5.630683898925781

Token 64: 'ême' (ID: 7961)
  Prédit: 'ême'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'ême' → logprob: -0.2043260633945465
    2. 'eme' → logprob: -2.0793261528015137
    3. 'em' → logprob: -3.5793261528015137
    4. 'êmement' → logprob: -4.704326152801514
    5. 'a' → logprob: -4.954326152801514
    6. 'ème' → logprob: -5.079326152801514
    7. 'e' → logprob: -5.454326152801514
    8. 'êm' → logprob: -7.079326152801514
    9. 'emple' → logprob: -7.329326152801514
    10. 'êmes' → logprob: -7.829326152801514

Token 65: ' mais' (ID: 2899)
  Prédit: ','
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ',' → logprob: -0.11221820116043091
    2. '<|end|>' → logprob: -3.237218141555786
    3. '.' → logprob: -3.862218141555786
    4. '<|end|>' → logprob: -4.362218379974365
    5. '#' → logprob: -5.237218379974365
    6. '
' → logprob: -5.487218379974365
    7. 'def' → logprob: -5.612218379974365
    8. ',
' → logprob: -5.862218379974365
    9. '\' → logprob: -5.862218379974365
    10. '\n' → logprob: -5.987218379974365

Token 66: ' on' (ID: 402)
  Prédit: ' ça'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' ça' → logprob: -0.2118300050497055
    2. ' c' → logprob: -3.211829900741577
    3. ' je' → logprob: -3.461829900741577
    4. ' on' → logprob: -3.461829900741577
    5. ' parfois' → logprob: -3.586829900741577
    6. ' cela' → logprob: -4.961830139160156
    7. ' voilà' → logprob: -5.211830139160156
    8. ' pratique' → logprob: -5.336830139160156
    9. ' bon' → logprob: -5.336830139160156
    10. ' j' → logprob: -5.461830139160156

Token 67: ' sait' (ID: 52101)
  Prédit: ' peut'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' peut' → logprob: -0.32988858222961426
    2. ' pourrait' → logprob: -2.0798885822296143
    3. 'pe' → logprob: -3.7048885822296143
    4. 'pour' → logprob: -3.9548885822296143
    5. 'est' → logprob: -4.329888343811035
    6. ' va' → logprob: -4.454888343811035
    7. 'n' → logprob: -4.454888343811035
    8. ' est' → logprob: -4.579888343811035
    9. 'a' → logprob: -4.829888343811035
    10. ' permet' → logprob: -4.829888343811035

Token 68: ' jamais' (ID: 23077)
  Prédit: ' que'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' que' → logprob: -0.44824880361557007
    2. ' jamais' → logprob: -2.323248863220215
    3. ' pas' → logprob: -2.948248863220215
    4. 'tout' → logprob: -3.448248863220215
    5. ' pourquoi' → logprob: -3.573248863220215
    6. ' tout' → logprob: -3.948248863220215
    7. 'que' → logprob: -4.073248863220215
    8. ' lire' → logprob: -4.573248863220215
    9. 'quoi' → logprob: -4.948248863220215
    10. ' exactement' → logprob: -4.948248863220215

Token 69: '
' (ID: 198)
  Prédit: ','
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ',' → logprob: -0.37471768260002136
    2. 'import' → logprob: -2.8747177124023438
    3. '\' → logprob: -2.9997177124023438
    4. '.' → logprob: -2.9997177124023438
    5. ' ' → logprob: -3.1247177124023438
    6. '\n' → logprob: -3.3747177124023438
    7. '#' → logprob: -3.9997177124023438
    8. '```' → logprob: -4.624717712402344
    9. '  
' → logprob: -5.249717712402344
    10. ':' → logprob: -5.374717712402344

Token 70: 'sys' (ID: 17324)
  Prédit: 'def'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'def' → logprob: -0.44906023144721985
    2. 'data' → logprob: -2.8240602016448975
    3. 'input' → logprob: -2.8240602016448975
    4. 'class' → logprob: -3.3240602016448975
    5. '
' → logprob: -3.4490602016448975
    6. 'import' → logprob: -3.6990602016448975
    7. 'max' → logprob: -3.9490602016448975
    8. 'from' → logprob: -4.199060440063477
    9. 'buffer' → logprob: -4.574060440063477
    10. ' def' → logprob: -4.824060440063477

Token 71: '.set' (ID: 1230)
  Prédit: '.exit'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '.exit' → logprob: -0.5716447234153748
    2. '.stdout' → logprob: -1.3216447830200195
    3. '.stderr' → logprob: -2.8216447830200195
    4. '.' → logprob: -2.9466447830200195
    5. '.stdin' → logprob: -3.8216447830200195
    6. '.argv' → logprob: -3.9466447830200195
    7. '.setdefault' → logprob: -4.9466447830200195
    8. '.set' → logprob: -5.4466447830200195
    9. '.path' → logprob: -6.1966447830200195
    10. ' .' → logprob: -6.8216447830200195

Token 72: 'rec' (ID: 9285)
  Prédit: 'rec'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'rec' → logprob: -0.013137523084878922
    2. 'execution' → logprob: -4.888137340545654
    3. 'switch' → logprob: -5.638137340545654
    4. '_int' → logprob: -7.638137340545654
    5. '_execution' → logprob: -7.638137340545654
    6. 'check' → logprob: -8.013137817382812
    7. 'trace' → logprob: -8.013137817382812
    8. 'limit' → logprob: -8.763137817382812
    9. '_rec' → logprob: -9.513137817382812
    10. 'ecution' → logprob: -10.888137817382812

Token 73: 'ursion' (ID: 41658)
  Prédit: 'ursion'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'ursion' → logprob: -4.7159857786027715e-05
    2. 'urs' → logprob: -10.375046730041504
    3. 'limit' → logprob: -11.375046730041504
    4. 'ursive' → logprob: -13.375046730041504
    5. 'ur' → logprob: -13.750046730041504
    6. '_limit' → logprob: -13.875046730041504
    7. 'ursor' → logprob: -14.625046730041504
    8. 'usion' → logprob: -16.00004768371582
    9. 'urse' → logprob: -16.75004768371582
    10. '_' → logprob: -16.87504768371582

Token 74: 'limit' (ID: 19698)
  Prédit: 'limit'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'limit' → logprob: -1.735893965815194e-05
    2. '_limit' → logprob: -11.000017166137695
    3. 'lim' → logprob: -15.000017166137695
    4. 'depth' → logprob: -15.625017166137695
    5. ' limit' → logprob: -15.750017166137695
    6. '_' → logprob: -18.875017166137695
    7. 'Limit' → logprob: -19.125017166137695
    8. '-limit' → logprob: -19.250017166137695
    9. '-' → logprob: -19.500017166137695
    10. '_LIMIT' → logprob: -20.375017166137695

Token 75: '(' (ID: 7)
  Prédit: '('
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(' → logprob: -5.676981345459353e-06
    2. '(int' → logprob: -13.000005722045898
    3. '((' → logprob: -13.125005722045898
    4. '(
' → logprob: -14.250005722045898
    5. ' (' → logprob: -14.875005722045898
    6. '(sys' → logprob: -16.1250057220459
    7. '(

' → logprob: -16.7500057220459
    8. '100' → logprob: -16.7500057220459
    9. '()' → logprob: -17.1250057220459
    10. '(max' → logprob: -17.5000057220459

Token 76: '10' (ID: 702)
  Prédit: '10'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '10' → logprob: -0.0005751936114393175
    2. '100' → logprob: -7.500575065612793
    3. ' ' → logprob: -11.125575065612793
    4. '1' → logprob: -12.875575065612793
    5. '999' → logprob: -13.750575065612793
    6. '500' → logprob: -13.875575065612793
    7. '200' → logprob: -14.000575065612793
    8. '300' → logprob: -14.375575065612793
    9. '400' → logprob: -15.250575065612793
    10. '250' → logprob: -15.250575065612793

Token 77: '**' (ID: 410)
  Prédit: '7'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '7' → logprob: -0.006082972511649132
    2. '6' → logprob: -5.506083011627197
    3. '8' → logprob: -7.131083011627197
    4. '**' → logprob: -7.256083011627197
    5. '9' → logprob: -7.881083011627197
    6. '000' → logprob: -9.631082534790039
    7. '07' → logprob: -10.006082534790039
    8. '0' → logprob: -12.756082534790039
    9. '10' → logprob: -13.006082534790039
    10. '00' → logprob: -13.256082534790039

Token 78: '5' (ID: 20)
  Prédit: '7'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '7' → logprob: -0.16361859440803528
    2. '9' → logprob: -1.913618564605713
    3. '8' → logprob: -5.788618564605713
    4. '6' → logprob: -8.038619041442871
    5. '**' → logprob: -13.038619041442871
    6. ' ' → logprob: -14.663619041442871
    7. '  ' → logprob: -15.413619041442871
    8. '```' → logprob: -15.413619041442871
    9. '10' → logprob: -15.538619041442871
    10. '

' → logprob: -16.538618087768555

Token 79: ' *' (ID: 425)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ')' → logprob: -0.00018113377154804766
    2. ' )' → logprob: -8.625181198120117
    3. '0' → logprob: -13.875181198120117
    4. '))' → logprob: -14.875181198120117
    5. ')
' → logprob: -15.750181198120117
    6. '6' → logprob: -16.250181198120117
    7. ')

' → logprob: -17.250181198120117
    8. ' ' → logprob: -17.375181198120117
    9. '1' → logprob: -17.500181198120117
    10. '3' → logprob: -18.000181198120117

Token 80: ' ' (ID: 220)
  Prédit: '2'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '2' → logprob: -0.046979840844869614
    2. ' ' → logprob: -3.9219799041748047
    3. '3' → logprob: -4.171979904174805
    4. ')' → logprob: -5.546979904174805
    5. '6' → logprob: -5.921979904174805
    6. '5' → logprob: -6.296979904174805
    7. '7' → logprob: -6.796979904174805
    8. '4' → logprob: -7.671979904174805
    9. '1' → logprob: -7.796979904174805
    10. ' )' → logprob: -9.046979904174805

Token 81: '5' (ID: 20)
  Prédit: '2'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '2' → logprob: -0.0219196118414402
    2. '3' → logprob: -4.3969197273254395
    3. '5' → logprob: -5.6469197273254395
    4. '6' → logprob: -5.7719197273254395
    5. '7' → logprob: -6.8969197273254395
    6. ')' → logprob: -7.5219197273254395
    7. '1' → logprob: -7.7719197273254395
    8. '4' → logprob: -7.8969197273254395
    9. ' ' → logprob: -8.271919250488281
    10. '10' → logprob: -9.521919250488281

Token 82: ')

' (ID: 1029)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')' → logprob: -0.00020699729793705046
    2. ' )' → logprob: -8.50020694732666
    3. '0' → logprob: -13.00020694732666
    4. ')
' → logprob: -14.87520694732666
    5. '6' → logprob: -15.37520694732666
    6. '))' → logprob: -16.000207901000977
    7. ' ' → logprob: -16.375207901000977
    8. ')

' → logprob: -16.625207901000977
    9. '3' → logprob: -16.750207901000977
    10. '1' → logprob: -16.750207901000977

Token 83: 'R' (ID: 49)
  Prédit: '
'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '
' → logprob: -0.01875533163547516
    2. '

' → logprob: -4.5187554359436035
    3. '#' → logprob: -5.7687554359436035
    4. 'def' → logprob: -6.2687554359436035
    5. '\n' → logprob: -6.5187554359436035
    6. '<|end|>' → logprob: -8.143754959106445
    7. '<|end|>' → logprob: -8.768754959106445
    8. '
' → logprob: -9.143754959106445
    9. ' 
' → logprob: -9.393754959106445
    10. 'newline' → logprob: -9.768754959106445

Token 84: ' =' (ID: 314)
  Prédit: ' ='
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' =' → logprob: -0.4495568573474884
    2. ',' → logprob: -1.949556827545166
    3. '=' → logprob: -2.199556827545166
    4. 'E' → logprob: -2.449556827545166
    5. 'C' → logprob: -5.199556827545166
    6. 'OW' → logprob: -5.449556827545166
    7. 'O' → logprob: -5.699556827545166
    8. 'EC' → logprob: -6.449556827545166
    9. ' ,' → logprob: -6.699556827545166
    10. ')' → logprob: -6.824556827545166

Token 85: ' int' (ID: 677)
  Prédit: 'int'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'int' → logprob: -0.589331865310669
    2. ' int' → logprob: -0.839331865310669
    3. ' ' → logprob: -4.71433162689209
    4. '10' → logprob: -6.08933162689209
    5. '100' → logprob: -7.71433162689209
    6. '20' → logprob: -8.08933162689209
    7. '5' → logprob: -8.58933162689209
    8. ' math' → logprob: -8.83933162689209
    9. '32' → logprob: -9.08933162689209
    10. '3' → logprob: -9.08933162689209

Token 86: '(read' (ID: 45738)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(' → logprob: -0.009274906478822231
    2. '(sys' → logprob: -5.384274959564209
    3. '(read' → logprob: -5.634274959564209
    4. '(input' → logprob: -7.259274959564209
    5. ' (' → logprob: -8.50927448272705
    6. '(r' → logprob: -10.25927448272705
    7. '()' → logprob: -10.38427448272705
    8. '(
' → logprob: -11.00927448272705
    9. '((' → logprob: -11.00927448272705
    10. '(space' → logprob: -11.50927448272705

Token 87: '())

' (ID: 27654)
  Prédit: '())'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '())' → logprob: -0.12381717562675476
    2. '(' → logprob: -2.498817205429077
    3. '()' → logprob: -3.498817205429077
    4. '().' → logprob: -5.623816967010498
    5. ' ())' → logprob: -8.623817443847656
    6. '()[' → logprob: -9.623817443847656
    7. '()\' → logprob: -10.623817443847656
    8. ' ()' → logprob: -10.748817443847656
    9. '();)' → logprob: -10.748817443847656
    10. ')' → logprob: -10.998817443847656

Token 88: '#' (ID: 2)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '(' → logprob: -0.20490141212940216
    2. '()' → logprob: -1.8299014568328857
    3. '\n' → logprob: -4.329901218414307
    4. ')' → logprob: -6.079901218414307
    5. '()\' → logprob: -6.079901218414307
    6. '(
' → logprob: -6.329901218414307
    7. '()
' → logprob: -6.454901218414307
    8. '\' → logprob: -7.204901218414307
    9. '(\' → logprob: -7.579901218414307
    10. '[' → logprob: -7.954901218414307

Token 89: ' Circ' (ID: 80572)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '(' → logprob: -0.5855047702789307
    2. '()' → logprob: -1.4605047702789307
    3. ' ' → logprob: -2.2105047702789307
    4. ')' → logprob: -3.4605047702789307
    5. '=' → logprob: -4.460504531860352
    6. ' (' → logprob: -5.085504531860352
    7. '```' → logprob: -5.210504531860352
    8. '.' → logprob: -5.460504531860352
    9. '<|end|>' → logprob: -5.585504531860352
    10. '_' → logprob: -5.835504531860352

Token 90: 'um' (ID: 394)
  Prédit: 'um'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'um' → logprob: -0.401067852973938
    2. 'le' → logprob: -1.276067852973938
    3. 'ul' → logprob: -4.651067733764648
    4. 'on' → logprob: -4.776067733764648
    5. '```' → logprob: -4.776067733764648
    6. 'ular' → logprob: -5.276067733764648
    7. '()' → logprob: -5.901067733764648
    8. '_' → logprob: -6.651067733764648
    9. '<|end|>' → logprob: -6.651067733764648
    10. '=' → logprob: -6.901067733764648

Token 91: 'ference' (ID: 3132)
  Prédit: 'ference'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'ference' → logprob: -0.015963399782776833
    2. 'um' → logprob: -4.640963554382324
    3. 'férence' → logprob: -6.015963554382324
    4. 'radius' → logprob: -7.265963554382324
    5. 'FERENCE' → logprob: -7.765963554382324
    6. '```' → logprob: -7.890963554382324
    7. '_' → logprob: -8.015963554382324
    8. 'f' → logprob: -8.515963554382324
    9. '=' → logprob: -8.515963554382324
    10. '<|end|>' → logprob: -8.640963554382324

Token 92: ',' (ID: 11)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(' → logprob: -0.15000677108764648
    2. ' =' → logprob: -3.4000067710876465
    3. ')' → logprob: -3.7750067710876465
    4. '_' → logprob: -4.2750067710876465
    5. ',' → logprob: -4.4000067710876465
    6. ' (' → logprob: -4.5250067710876465
    7. '()' → logprob: -4.5250067710876465
    8. '=' → logprob: -4.7750067710876465
    9. '<|end|>' → logprob: -5.6500067710876465
    10. '```' → logprob: -5.7750067710876465

Token 93: ' c' (ID: 274)
  Prédit: ' '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' ' → logprob: -0.6163527369499207
    2. 'R' → logprob: -2.1163527965545654
    3. 'r' → logprob: -2.3663527965545654
    4. '2' → logprob: -3.4913527965545654
    5. '_' → logprob: -3.4913527965545654
    6. 'D' → logprob: -3.6163527965545654
    7. 'radius' → logprob: -3.6163527965545654
    8. '.' → logprob: -4.241352558135986
    9. ' radius' → logprob: -4.241352558135986
    10. 'import' → logprob: -4.491352558135986

Token 94: ''est' (ID: 6616)
  Prédit: ' ='
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' =' → logprob: -0.09227709472179413
    2. '=' → logprob: -2.4672770500183105
    3. 'irc' → logprob: -6.3422770500183105
    4. 'on' → logprob: -7.4672770500183105
    5. 'om' → logprob: -8.342277526855469
    6. 'ircle' → logprob: -8.842277526855469
    7. '_' → logprob: -9.092277526855469
    8. ',' → logprob: -9.092277526855469
    9. 'm' → logprob: -9.217277526855469
    10. 'um' → logprob: -9.967277526855469

Token 95: ' bien' (ID: 5340)
  Prédit: ' lambda'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' lambda' → logprob: -0.4985131621360779
    2. 'lambda' → logprob: -1.4985132217407227
    3. 'le' → logprob: -2.9985132217407227
    4. ' la' → logprob: -3.4985132217407227
    5. 'la' → logprob: -3.4985132217407227
    6. '2' → logprob: -3.9985132217407227
    7. ' le' → logprob: -4.123513221740723
    8. ' ' → logprob: -4.998513221740723
    9. 'R' → logprob: -5.373513221740723
    10. 'radius' → logprob: -6.123513221740723

Token 96: ' ce' (ID: 2357)
  Prédit: ' ='
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' =' → logprob: -0.3955811858177185
    2. '=' → logprob: -1.1455812454223633
    3. ',' → logprob: -5.520581245422363
    4. ')' → logprob: -6.020581245422363
    5. '*' → logprob: -7.770581245422363
    6. '=int' → logprob: -7.895581245422363
    7. ' *' → logprob: -8.270581245422363
    8. '.' → logprob: -8.270581245422363
    9. 'R' → logprob: -9.270581245422363
    10. '_' → logprob: -9.270581245422363

Token 97: ' qu' (ID: 474)
  Prédit: ' que'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' que' → logprob: -0.5444158315658569
    2. 'que' → logprob: -1.544415831565857
    3. ' qu' → logprob: -2.5444159507751465
    4. 'ci' → logprob: -3.4194159507751465
    5. 'ux' → logprob: -3.9194159507751465
    6. 'qu' → logprob: -4.0444159507751465
    7. 'pend' → logprob: -4.1694159507751465
    8. 'qui' → logprob: -4.9194159507751465
    9. 'u' → logprob: -5.0444159507751465
    10. 'la' → logprob: -5.6694159507751465

Token 98: ''on' (ID: 25812)
  Prédit: 'que'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'que' → logprob: -1.0032527446746826
    2. 'qui' → logprob: -1.5032527446746826
    3. 'qu' → logprob: -1.8782527446746826
    4. ' qu' → logprob: -2.7532527446746826
    5. ' que' → logprob: -2.7532527446746826
    6. ''on' → logprob: -3.2532527446746826
    7. 'ci' → logprob: -3.6282527446746826
    8. ''est' → logprob: -4.128252983093262
    9. ''' → logprob: -5.003252983093262
    10. 'u' → logprob: -5.253252983093262

Token 99: ' veut' (ID: 41653)
  Prédit: 've'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 've' → logprob: -0.6518226265907288
    2. 'cherche' → logprob: -2.401822566986084
    3. ' veut' → logprob: -2.401822566986084
    4. 'v' → logprob: -3.276822566986084
    5. 'par' → logprob: -3.401822566986084
    6. 'voud' → logprob: -3.401822566986084
    7. 'cal' → logprob: -3.526822566986084
    8. 'vou' → logprob: -3.526822566986084
    9. 'veux' → logprob: -3.901822566986084
    10. 'semble' → logprob: -4.401822566986084

Token 100: '
' (ID: 198)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '(' → logprob: -1.1968271732330322
    2. ')' → logprob: -1.1968271732330322
    3. '*' → logprob: -2.5718271732330322
    4. ' *' → logprob: -2.8218271732330322
    5. '()' → logprob: -3.1968271732330322
    6. ',' → logprob: -3.3218271732330322
    7. ' /' → logprob: -3.4468271732330322
    8. '=' → logprob: -3.8218271732330322
    9. ' =' → logprob: -4.071826934814453
    10. '/' → logprob: -4.071826934814453

Token 101: 'res' (ID: 430)
  Prédit: ' *'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' *' → logprob: -0.43254050612449646
    2. '*' → logprob: -1.5575405359268188
    3. ')' → logprob: -3.4325404167175293
    4. 'import' → logprob: -3.5575404167175293
    5. '(' → logprob: -3.8075404167175293
    6. ' /' → logprob: -4.432540416717529
    7. ' =' → logprob: -4.807540416717529
    8. '(R' → logprob: -4.932540416717529
    9. ' ' → logprob: -5.307540416717529
    10. ',' → logprob: -5.682540416717529

Token 102: ' =' (ID: 314)
  Prédit: ' ='
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' =' → logprob: -0.12895378470420837
    2. 'ult' → logprob: -2.628953695297241
    3. '=' → logprob: -3.128953695297241
    4. 'ults' → logprob: -6.25395393371582
    5. 'ultat' → logprob: -7.00395393371582
    6. ' ' → logprob: -7.12895393371582
    7. '_' → logprob: -7.75395393371582
    8. 's' → logprob: -8.12895393371582
    9. 'istance' → logprob: -8.50395393371582
    10. '_circle' → logprob: -9.50395393371582

Token 103: ' ' (ID: 220)
  Prédit: '2'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '2' → logprob: -0.970558762550354
    2. '0' → logprob: -1.345558762550354
    3. ' ' → logprob: -1.470558762550354
    4. 'math' → logprob: -2.9705586433410645
    5. ' R' → logprob: -3.3455586433410645
    6. 'R' → logprob: -4.0955586433410645
    7. ' math' → logprob: -4.2205586433410645
    8. ' (' → logprob: -5.2205586433410645
    9. '(' → logprob: -5.9705586433410645
    10. 'int' → logprob: -6.5955586433410645

Token 104: '2' (ID: 17)
  Prédit: '2'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '2' → logprob: -0.03177564591169357
    2. '0' → logprob: -4.15677547454834
    3. 'R' → logprob: -4.40677547454834
    4. 'math' → logprob: -6.40677547454834
    5. ' ' → logprob: -7.28177547454834
    6. '(' → logprob: -8.03177547454834
    7. 'int' → logprob: -8.53177547454834
    8. 'float' → logprob: -8.65677547454834
    9. ' R' → logprob: -9.15677547454834
    10. '(R' → logprob: -9.53177547454834

Token 105: ' *' (ID: 425)
  Prédit: '*'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '*' → logprob: -0.017003938555717468
    2. '*pi' → logprob: -4.767004013061523
    3. ' *' → logprob: -4.892004013061523
    4. '*Math' → logprob: -7.517004013061523
    5. '**' → logprob: -8.642004013061523
    6. '*m' → logprob: -10.517004013061523
    7. '*r' → logprob: -10.642004013061523
    8. '*object' → logprob: -11.392004013061523
    9. '*M' → logprob: -11.392004013061523
    10. 'import' → logprob: -11.642004013061523

Token 106: ' math' (ID: 13324)
  Prédit: 'math'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'math' → logprob: -0.007957816123962402
    2. '3' → logprob: -5.507957935333252
    3. ' math' → logprob: -5.757957935333252
    4. 'R' → logprob: -7.257957935333252
    5. ' ' → logprob: -12.507957458496094
    6. ' R' → logprob: -12.757957458496094
    7. 'import' → logprob: -13.507957458496094
    8. 'pi' → logprob: -14.382957458496094
    9. '(math' → logprob: -14.882957458496094
    10. '*' → logprob: -15.257957458496094

Token 107: '.pi' (ID: 55497)
  Prédit: '.pi'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '.pi' → logprob: -0.001356667373329401
    2. '.' → logprob: -6.751356601715088
    3. '*pi' → logprob: -8.876357078552246
    4. '*' → logprob: -11.001357078552246
    5. 'import' → logprob: -11.251357078552246
    6. '.PI' → logprob: -11.501357078552246
    7. 'pi' → logprob: -12.626357078552246
    8. '.py' → logprob: -13.251357078552246
    9. '.*' → logprob: -14.751357078552246
    10. '.math' → logprob: -14.876357078552246

Token 108: ' *' (ID: 425)
  Prédit: '*'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '*' → logprob: -0.16025327146053314
    2. ' *' → logprob: -1.9102532863616943
    3. 'R' → logprob: -11.035253524780273
    4. '**' → logprob: -12.410253524780273
    5. '*r' → logprob: -12.410253524780273
    6. ' ' → logprob: -13.035253524780273
    7. '<|end|>' → logprob: -14.285253524780273
    8. ' R' → logprob: -14.660253524780273
    9. '*object' → logprob: -15.035253524780273
    10. ' ' → logprob: -15.035253524780273

Token 109: ' R' (ID: 460)
  Prédit: 'R'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'R' → logprob: -0.003184363478794694
    2. ' R' → logprob: -5.7531843185424805
    3. ' ' → logprob: -12.25318431854248
    4. ' ' → logprob: -14.75318431854248
    5. 'int' → logprob: -14.87818431854248
    6. '	R' → logprob: -15.25318431854248
    7. 'r' → logprob: -15.62818431854248
    8. '  ' → logprob: -15.87818431854248
    9. '   ' → logprob: -16.378185272216797
    10. '(R' → logprob: -16.503185272216797

Token 110: '
' (ID: 198)
  Prédit: ''
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False

Token 111: 'print' (ID: 1598)
  Prédit: 'print'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'print' → logprob: -0.2437712401151657
    2. '<|end|>' → logprob: -1.6187711954116821
    3. '
' → logprob: -4.868771076202393
    4. ')' → logprob: -5.118771076202393
    5. '\n' → logprob: -5.743771076202393
    6. ' print' → logprob: -8.11877155303955
    7. '```' → logprob: -8.24377155303955
    8. '<|end|>' → logprob: -8.61877155303955
    9. '#' → logprob: -8.74377155303955
    10. ' ' → logprob: -8.86877155303955

Token 112: '(res' (ID: 8331)
  Prédit: '(res'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(res' → logprob: -0.008996127173304558
    2. '(' → logprob: -5.13399600982666
    3. '(round' → logprob: -6.13399600982666
    4. '(f' → logprob: -7.13399600982666
    5. 'res' → logprob: -9.88399600982666
    6. '(int' → logprob: -10.50899600982666
    7. '('' → logprob: -12.00899600982666
    8. ' (' → logprob: -12.75899600982666
    9. '("' → logprob: -12.88399600982666
    10. '()' → logprob: -13.13399600982666

Token 113: ')
' (ID: 446)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')' → logprob: -9.253090865968261e-06
    2. ' )' → logprob: -11.625009536743164
    3. ')
' → logprob: -16.375009536743164
    4. ')`' → logprob: -16.500009536743164
    5. '))' → logprob: -17.000009536743164
    6. ')#' → logprob: -18.375009536743164
    7. ')**' → logprob: -19.250009536743164
    8. '),' → logprob: -19.250009536743164
    9. '`)' → logprob: -19.500009536743164
    10. '')' → logprob: -19.625009536743164

Token 114: '#' (ID: 2)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')' → logprob: -0.11558894068002701
    2. '<|end|>' → logprob: -2.365588903427124
    3. '(' → logprob: -5.240589141845703
    4. '\n' → logprob: -6.115589141845703
    5. '()' → logprob: -6.240589141845703
    6. '\' → logprob: -6.365589141845703
    7. '```' → logprob: -6.740589141845703
    8. '#' → logprob: -7.115589141845703
    9. ' ' → logprob: -7.240589141845703
    10. '
' → logprob: -8.490589141845703

Token 115: ' print' (ID: 2123)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ')' → logprob: -0.11668682098388672
    2. '<|end|>' → logprob: -2.4916868209838867
    3. ' ' → logprob: -4.741686820983887
    4. '\n' → logprob: -4.741686820983887
    5. '
' → logprob: -5.991686820983887
    6. '(' → logprob: -6.116686820983887
    7. '\' → logprob: -6.491686820983887
    8. '```' → logprob: -7.116686820983887
    9. '#' → logprob: -7.241686820983887
    10. '()' → logprob: -8.366686820983887

Token 116: '(round' (ID: 75171)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(' → logprob: -0.35930168628692627
    2. '(int' → logprob: -1.7343016862869263
    3. '(round' → logprob: -2.8593015670776367
    4. '()' → logprob: -3.8593015670776367
    5. '("' → logprob: -4.234301567077637
    6. '(res' → logprob: -4.359301567077637
    7. '(math' → logprob: -4.609301567077637
    8. '(f' → logprob: -5.484301567077637
    9. '('' → logprob: -6.234301567077637
    10. '("")' → logprob: -6.984301567077637

Token 117: '(res' (ID: 8331)
  Prédit: '(res'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(res' → logprob: -0.000407316314522177
    2. '(' → logprob: -7.8754072189331055
    3. ')' → logprob: -11.250407218933105
    4. ' (' → logprob: -11.375407218933105
    5. ',res' → logprob: -13.875407218933105
    6. '(round' → logprob: -14.000407218933105
    7. 'res' → logprob: -14.750407218933105
    8. ',' → logprob: -16.000408172607422
    9. ' ' → logprob: -16.250408172607422
    10. '(abs' → logprob: -17.000408172607422

Token 118: ',' (ID: 11)
  Prédit: '))'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '))' → logprob: -0.13053111732006073
    2. ')' → logprob: -2.630531072616577
    3. ',' → logprob: -3.005531072616577
    4. '()))' → logprob: -8.505531311035156
    5. '(' → logprob: -8.880531311035156
    6. '),' → logprob: -9.130531311035156
    7. '(),' → logprob: -9.255531311035156
    8. '())' → logprob: -9.255531311035156
    9. '()' → logprob: -9.880531311035156
    10. ')))' → logprob: -10.130531311035156

Token 119: ' ' (ID: 220)
  Prédit: '6'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '6' → logprob: -0.4343688189983368
    2. '2' → logprob: -1.4343688488006592
    3. '5' → logprob: -3.059368848800659
    4. ' ' → logprob: -3.684368848800659
    5. '3' → logprob: -3.809368848800659
    6. '4' → logprob: -4.30936861038208
    7. '7' → logprob: -5.55936861038208
    8. '10' → logprob: -6.93436861038208
    9. '0' → logprob: -7.18436861038208
    10. '8' → logprob: -7.68436861038208

Token 120: '10' (ID: 702)
  Prédit: '6'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '6' → logprob: -0.30931100249290466
    2. '2' → logprob: -2.1843109130859375
    3. '5' → logprob: -2.8093109130859375
    4. '3' → logprob: -3.3093109130859375
    5. '4' → logprob: -3.8093109130859375
    6. '7' → logprob: -3.8093109130859375
    7. '10' → logprob: -4.9343109130859375
    8. '8' → logprob: -5.8093109130859375
    9. '9' → logprob: -7.0593109130859375
    10. '0' → logprob: -7.6843109130859375

Token 121: '))' (ID: 915)
  Prédit: '))'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '))' → logprob: -0.3132772147655487
    2. ')' → logprob: -1.313277244567871
    3. ')))' → logprob: -11.813277244567871
    4. ' ))' → logprob: -12.813277244567871
    5. '))
' → logprob: -13.188277244567871
    6. ' )' → logprob: -13.438277244567871
    7. ')
' → logprob: -14.063277244567871
    8. '),' → logprob: -14.438277244567871
    9. '0' → logprob: -16.063276290893555
    10. ' ' → logprob: -16.063276290893555

Token 122: ' #' (ID: 1069)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ')' → logprob: -0.29333651065826416
    2. '(' → logprob: -1.4183365106582642
    3. '()' → logprob: -5.293336391448975
    4. '(
' → logprob: -5.918336391448975
    5. ' ' → logprob: -6.668336391448975
    6. '[' → logprob: -7.793336391448975
    7. '<|end|>' → logprob: -7.793336391448975
    8. '#' → logprob: -8.043336868286133
    9. '.' → logprob: -8.293336868286133
    10. '```' → logprob: -8.418336868286133

Token 123: ' pt' (ID: 18961)
  Prédit: ''
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False

Token 124: 'et' (ID: 292)
  Prédit: '#'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '#' → logprob: -0.3663368821144104
    2. '<|end|>' → logprob: -2.2413368225097656
    3. ')' → logprob: -3.3663368225097656
    4. 'u' → logprob: -4.116336822509766
    5. 'er' → logprob: -4.366336822509766
    6. '<|end|>' → logprob: -4.491336822509766
    7. 'ython' → logprob: -4.616336822509766
    8. ' sure' → logprob: -4.741336822509766
    9. ',' → logprob: -5.116336822509766
    10. 'otential' → logprob: -5.241336822509766

Token 125: ' arr' (ID: 1724)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ')' → logprob: -0.5039138197898865
    2. '<|end|>' → logprob: -1.0039138793945312
    3. '(' → logprob: -4.003913879394531
    4. '()' → logprob: -6.003913879394531
    5. '
' → logprob: -6.253913879394531
    6. '<|end|>' → logprob: -6.378913879394531
    7. '#' → logprob: -6.878913879394531
    8. ' ' → logprob: -7.003913879394531
    9. '\n' → logprob: -7.253913879394531
    10. '```' → logprob: -7.503913879394531

Token 126: 'ond' (ID: 1415)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')' → logprob: -0.08332759886980057
    2. '<|end|>' → logprob: -2.708327531814575
    3. 'êt' → logprob: -5.208327770233154
    4. 'ond' → logprob: -5.958327770233154
    5. 'ound' → logprob: -6.708327770233154
    6. ' )' → logprob: -7.083327770233154
    7. 'end' → logprob: -7.458327770233154
    8. 'ondissement' → logprob: -7.708327770233154
    9. '()' → logprob: -8.333327293395996
    10. 'ondi' → logprob: -8.958327293395996

Token 127: 'ir' (ID: 380)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ')' → logprob: -0.013182821683585644
    2. '<|end|>' → logprob: -4.638182640075684
    3. '()' → logprob: -6.763182640075684
    4. 'ing' → logprob: -7.013182640075684
    5. '(' → logprob: -7.263182640075684
    6. '())' → logprob: -9.013182640075684
    7. '<|end|>' → logprob: -9.138182640075684
    8. ' )' → logprob: -9.263182640075684
    9. ' ' → logprob: -9.763182640075684
    10. 'ed' → logprob: -9.763182640075684

Token 128: ' mais' (ID: 2899)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ')' → logprob: -0.08789258450269699
    2. '<|end|>' → logprob: -3.212892532348633
    3. '(' → logprob: -3.462892532348633
    4. '
' → logprob: -5.837892532348633
    5. ' ' → logprob: -5.837892532348633
    6. '(
' → logprob: -6.087892532348633
    7. '()' → logprob: -6.212892532348633
    8. '<|end|>' → logprob: -7.962892532348633
    9. '\n' → logprob: -8.087892532348633
    10. '#' → logprob: -8.212892532348633

Token 129: ' c' (ID: 274)
  Prédit: ''
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False

Token 130: ''est' (ID: 6616)
  Prédit: ''
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False

Token 131: ' pas' (ID: 2173)
  Prédit: 'pas'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'pas' → logprob: -0.5193085670471191
    2. ' pas' → logprob: -1.7693085670471191
    3. ' unnecessary' → logprob: -3.019308567047119
    4. 'inut' → logprob: -3.769308567047119
    5. ' inutile' → logprob: -3.769308567047119
    6. ' mieux' → logprob: -4.019308567047119
    7. '<|end|>' → logprob: -4.144308567047119
    8. ' fine' → logprob: -4.394308567047119
    9. 'tout' → logprob: -4.394308567047119
    10. ' okay' → logprob: -4.644308567047119

Token 132: ' demandé' (ID: 82780)
  Prédit: 'né'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'né' → logprob: -0.3815002143383026
    2. 'necessary' → logprob: -2.256500244140625
    3. 'strict' → logprob: -2.506500244140625
    4. ' nécessaire' → logprob: -2.631500244140625
    5. 'necess' → logprob: -3.006500244140625
    6. 'utile' → logprob: -5.881500244140625
    7. 'n' → logprob: -6.506500244140625
    8. 'needed' → logprob: -7.006500244140625
    9. 'urgent' → logprob: -7.381500244140625
    10. ' demandé' → logprob: -7.631500244140625


RÉSUMÉ:
--------------------------------------------------------------------------------
Total des tokens analysés: 130
Tokens correctement prédits (1ère position, stricte): 33
Tokens correctement prédits (1ère position, avec adaptation): 33
Tokens correctement prédits (top 10): 80
Précision stricte (1ère position): 25.38%
Précision adaptée (1ère position): 25.38%
Précision (top 10): 61.54%
================================================================================
