================================================================================
ANALYSE DE PRÉDICTION TOKEN PAR TOKEN (BATCH API)
Date: 2025-06-04 19:18:18
Modèle de tokenisation: gpt-4o-mini
================================================================================

SCRIPT ANALYSÉ:
--------------------------------------------------------------------------------
print('Yes' if '7' in (N := input()) else 'No')
--------------------------------------------------------------------------------

RÉSULTATS D'ANALYSE TOKEN PAR TOKEN:
--------------------------------------------------------------------------------
Token 0: 'print' (ID: 1598)
  → Token d'amorce (pas de prédiction)

Token 1: '('' (ID: 706)
  → Token d'amorce (pas de prédiction)

Token 2: 'Yes' (ID: 13022)
  → Token d'amorce (pas de prédiction)

Token 3: ''' (ID: 6)
  Prédit: '')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '')' → logprob: -0.004964170511811972
    2. ')' → logprob: -5.629964351654053
    3. '!' → logprob: -7.004964351654053
    4. ''' → logprob: -7.754964351654053
    5. '")' → logprob: -11.379963874816895
    6. '''' → logprob: -12.879963874816895
    7. '```' → logprob: -13.379963874816895
    8. ''''' → logprob: -13.504963874816895
    9. '')"' → logprob: -13.504963874816895
    10. '"' → logprob: -13.504963874816895

Token 4: ' if' (ID: 538)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ')' → logprob: -6.153795766294934e-06
    2. '`)' → logprob: -12.625005722045898
    3. '))' → logprob: -14.000005722045898
    4. '')' → logprob: -14.625005722045898
    5. ')`' → logprob: -14.875005722045898
    6. '```' → logprob: -14.875005722045898
    7. ')
' → logprob: -15.375005722045898
    8. ')">' → logprob: -15.875005722045898
    9. ')")' → logprob: -16.0000057220459
    10. ' )' → logprob: -16.2500057220459

Token 5: ' '' (ID: 461)
  Prédit: ' True'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' True' → logprob: -0.4036657512187958
    2. ' x' → logprob: -1.7786657810211182
    3. ' condition' → logprob: -2.653665781021118
    4. ' a' → logprob: -3.153665781021118
    5. ' user' → logprob: -3.653665781021118
    6. ' ' → logprob: -4.278665542602539
    7. ' not' → logprob: -5.653665542602539
    8. 'True' → logprob: -6.403665542602539
    9. 'x' → logprob: -7.403665542602539
    10. 'condition' → logprob: -7.403665542602539

Token 6: '7' (ID: 22)
  Prédit: 'a'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'a' → logprob: -0.5571488738059998
    2. ''' → logprob: -1.9321489334106445
    3. '1' → logprob: -2.6821489334106445
    4. 'y' → logprob: -3.3071489334106445
    5. 'x' → logprob: -3.8071489334106445
    6. ' '' → logprob: -3.9321489334106445
    7. 'True' → logprob: -4.1821489334106445
    8. 'Yes' → logprob: -4.6821489334106445
    9. 'Python' → logprob: -4.6821489334106445
    10. 'Hello' → logprob: -4.8071489334106445

Token 7: ''' (ID: 6)
  Prédit: '7'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '7' → logprob: -0.015122907236218452
    2. ''' → logprob: -4.265122890472412
    3. ' ' → logprob: -8.39012336730957
    4. ' in' → logprob: -8.51512336730957
    5. ' '' → logprob: -9.26512336730957
    6. ''in' → logprob: -9.76512336730957
    7. '0' → logprob: -10.14012336730957
    8. '%'' → logprob: -10.26512336730957
    9. '2' → logprob: -10.39012336730957
    10. '1' → logprob: -10.39012336730957

Token 8: ' in' (ID: 306)
  Prédit: ' in'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' in' → logprob: -0.010117624886333942
    2. 'in' → logprob: -4.635117530822754
    3. ')' → logprob: -9.010117530822754
    4. ' ' → logprob: -9.010117530822754
    5. '==' → logprob: -10.135117530822754
    6. ' ==' → logprob: -10.510117530822754
    7. ' not' → logprob: -11.260117530822754
    8. ' )' → logprob: -11.510117530822754
    9. '```' → logprob: -12.510117530822754
    10. 'not' → logprob: -12.760117530822754

Token 9: ' (' (ID: 350)
  Prédit: ' input'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' input' → logprob: -1.1110025644302368
    2. ''' → logprob: -1.2360025644302368
    3. 'input' → logprob: -1.9860025644302368
    4. 'str' → logprob: -2.3610024452209473
    5. ' str' → logprob: -2.8610024452209473
    6. ' '' → logprob: -3.3610024452209473
    7. 's' → logprob: -3.9860024452209473
    8. ' s' → logprob: -4.736002445220947
    9. 'x' → logprob: -5.486002445220947
    10. ''s' → logprob: -5.486002445220947

Token 10: 'N' (ID: 45)
  Prédit: 'input'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'input' → logprob: -0.49044889211654663
    2. 'str' → logprob: -1.4904489517211914
    3. ''' → logprob: -2.2404489517211914
    4. ' input' → logprob: -3.4904489517211914
    5. '7' → logprob: -4.865448951721191
    6. ' str' → logprob: -5.865448951721191
    7. ''s' → logprob: -6.115448951721191
    8. ')' → logprob: -6.490448951721191
    9. '')' → logprob: -6.490448951721191
    10. 'x' → logprob: -6.740448951721191

Token 11: ' :=' (ID: 3405)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ')' → logprob: -0.02501337230205536
    2. ' )' → logprob: -4.650013446807861
    3. ',)' → logprob: -5.525013446807861
    4. ',' → logprob: -6.025013446807861
    5. ' else' → logprob: -6.525013446807861
    6. ' ' → logprob: -6.650013446807861
    7. 'else' → logprob: -6.650013446807861
    8. ' ,' → logprob: -7.525013446807861
    9. '.strip' → logprob: -7.525013446807861
    10. '```' → logprob: -7.650013446807861

Token 12: ' input' (ID: 3422)
  Prédit: 'input'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'input' → logprob: -0.0620235949754715
    2. ' input' → logprob: -2.812023639678955
    3. '(input' → logprob: -10.437023162841797
    4. 'str' → logprob: -11.812023162841797
    5. ' ' → logprob: -12.062023162841797
    6. 'int' → logprob: -12.437023162841797
    7. '<input' → logprob: -13.187023162841797
    8. '```' → logprob: -13.312023162841797
    9. ' str' → logprob: -13.687023162841797
    10. '	input' → logprob: -14.312023162841797

Token 13: '())' (ID: 3516)
  Prédit: '())'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '())' → logprob: -0.020355477929115295
    2. '('' → logprob: -4.520355701446533
    3. '()' → logprob: -5.020355701446533
    4. '()))' → logprob: -6.645355701446533
    5. '(' → logprob: -8.020355224609375
    6. ')' → logprob: -8.145355224609375
    7. '`()' → logprob: -8.770355224609375
    8. ' ())' → logprob: -9.020355224609375
    9. '')' → logprob: -9.145355224609375
    10. '()){' → logprob: -9.895355224609375

Token 14: ' else' (ID: 1203)
  Prédit: ' else'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' else' → logprob: -0.012850061990320683
    2. 'else' → logprob: -4.887850284576416
    3. ' and' → logprob: -6.012850284576416
    4. ')' → logprob: -6.387850284576416
    5. ' ' → logprob: -7.262850284576416
    6. '```' → logprob: -8.637849807739258
    7. ' )' → logprob: -9.137849807739258
    8. 'and' → logprob: -10.137849807739258
    9. '==' → logprob: -10.887849807739258
    10. '>' → logprob: -11.012849807739258

Token 15: ' '' (ID: 461)
  Prédit: '''
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ''' → logprob: -0.002443669829517603
    2. ' '' → logprob: -6.377443790435791
    3. 'print' → logprob: -7.627443790435791
    4. ' ' → logprob: -9.377443313598633
    5. 'No' → logprob: -9.877443313598633
    6. ' No' → logprob: -10.127443313598633
    7. ' print' → logprob: -10.252443313598633
    8. '('' → logprob: -10.877443313598633
    9. '   ' → logprob: -11.502443313598633
    10. '"No' → logprob: -12.002443313598633

Token 16: 'No' (ID: 3160)
  Prédit: 'No'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'No' → logprob: -0.014240606687963009
    2. ''' → logprob: -4.264240741729736
    3. ' No' → logprob: -9.639240264892578
    4. 'NO' → logprob: -12.514240264892578
    5. '"No' → logprob: -12.764240264892578
    6. ' ' → logprob: -13.639240264892578
    7. '')' → logprob: -14.514240264892578
    8. ' '' → logprob: -14.764240264892578
    9. ''N' → logprob: -14.764240264892578
    10. 'Yes' → logprob: -14.889240264892578

Token 17: '')' (ID: 1542)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')' → logprob: -0.14277663826942444
    2. '')' → logprob: -2.0177767276763916
    3. '`)' → logprob: -10.017776489257812
    4. '```' → logprob: -10.642776489257812
    5. '")' → logprob: -11.267776489257812
    6. ''' → logprob: -11.267776489257812
    7. ')`' → logprob: -13.642776489257812
    8. ' )' → logprob: -13.767776489257812
    9. '))' → logprob: -13.892776489257812
    10. '’)' → logprob: -14.642776489257812


RÉSUMÉ:
--------------------------------------------------------------------------------
Total des tokens analysés: 15
Tokens correctement prédits (1ère position, stricte): 4
Tokens correctement prédits (1ère position, avec adaptation): 4
Tokens correctement prédits (top 10): 9
Précision stricte (1ère position): 26.67%
Précision adaptée (1ère position): 26.67%
Précision (top 10): 60.00%
================================================================================
