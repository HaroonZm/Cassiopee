================================================================================
ANALYSE DE PRÉDICTION TOKEN PAR TOKEN (BATCH API)
Date: 2025-06-04 20:13:07
Modèle de tokenisation: gpt-4o-mini
================================================================================

SCRIPT ANALYSÉ:
--------------------------------------------------------------------------------
t = int(input())    # nb de test cases

def pgcd(a, b):      # Bon, on va faire le PGCD, façon Euclide
    while b != 0:    # On pourrait le faire récursif mais bon, ça marche.
        a, b = b, a % b
    return a

def verif(a, b, c, d): # on va regarder si c'est 'bon' ou pas
    # alors b plus grand que a, ou d plus petit, c'est KO
    if b > a or d < b:
        return False
    g = pgcd(b, d)
    # ca c'est pour trouver (?) un k... pas trop clair mais ok
    k = (a - c - 1) // g
    p = a - k * g
    if p - b < 0:    # encore un test
        return False
    return True    # sinon c'est bon, je crois

for i in range(t):  # On aurait pu utiliser '_' mais je préfère voir l'index
    # lecture des données - pfff toujours avec des splits
    a, b, c, d = map(int, input().split())
    if verif(a, b, c, d):
        print("Yes")   # je mets les majuscules ici c'est plus joli
    else:
        print("No")    # on aurait pu écrire yes/no en minuscules, mais bon
--------------------------------------------------------------------------------

RÉSULTATS D'ANALYSE TOKEN PAR TOKEN:
--------------------------------------------------------------------------------
Token 0: 't' (ID: 83)
  → Token d'amorce (pas de prédiction)

Token 1: ' =' (ID: 314)
  → Token d'amorce (pas de prédiction)

Token 2: ' int' (ID: 677)
  → Token d'amorce (pas de prédiction)

Token 3: '(input' (ID: 10054)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '(' → logprob: -0.0002942287246696651
    2. '(t' → logprob: -8.87529468536377
    3. '(
' → logprob: -10.25029468536377
    4. ')' → logprob: -10.62529468536377
    5. '```' → logprob: -10.75029468536377
    6. ''' → logprob: -10.87529468536377
    7. 't' → logprob: -11.12529468536377
    8. '('' → logprob: -11.25029468536377
    9. '`' → logprob: -12.25029468536377
    10. '()' → logprob: -12.62529468536377

Token 4: '())' (ID: 3516)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')' → logprob: -0.6586940884590149
    2. '(' → logprob: -0.7836940884590149
    3. '()' → logprob: -4.283694267272949
    4. '())' → logprob: -5.283694267272949
    5. '")' → logprob: -6.408694267272949
    6. '))' → logprob: -6.533694267272949
    7. '')' → logprob: -6.783694267272949
    8. '(
' → logprob: -6.908694267272949
    9. '`)' → logprob: -8.28369426727295
    10. '('' → logprob: -8.53369426727295

Token 5: '   ' (ID: 271)
  Prédit: '\n'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '\n' → logprob: -0.018009813502430916
    2. '\' → logprob: -5.018009662628174
    3. 'for' → logprob: -5.643009662628174
    4. '
' → logprob: -5.768009662628174
    5. '\r' → logprob: -7.018009662628174
    6. '  
' → logprob: -7.143009662628174
    7. ' 
' → logprob: -7.268009662628174
    8. ' for' → logprob: -7.393009662628174
    9. '' → logprob: -7.643009662628174
    10. 'if' → logprob: -8.393010139465332

Token 6: ' #' (ID: 1069)
  Prédit: '\n'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '\n' → logprob: -0.04115627706050873
    2. 'for' → logprob: -3.41615629196167
    3. '
' → logprob: -6.41615629196167
    4. '\' → logprob: -6.41615629196167
    5. ' for' → logprob: -6.91615629196167
    6. '\r' → logprob: -7.04115629196167
    7. ' 
' → logprob: -7.54115629196167
    8. 'if' → logprob: -7.79115629196167
    9. 'n' → logprob: -8.291155815124512
    10. '  
' → logprob: -8.666155815124512

Token 7: ' nb' (ID: 28791)
  Prédit: '\n'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '\n' → logprob: -0.7523171305656433
    2. ' ' → logprob: -1.502317190170288
    3. 'for' → logprob: -1.877317190170288
    4. ' for' → logprob: -3.127317190170288
    5. '\' → logprob: -3.377317190170288
    6. '#' → logprob: -4.127316951751709
    7. '<|end|>' → logprob: -4.252316951751709
    8. ')' → logprob: -4.627316951751709
    9. '
' → logprob: -5.127316951751709
    10. ' t' → logprob: -5.752316951751709

Token 8: ' de' (ID: 334)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ')' → logprob: -1.355228066444397
    2. ' ' → logprob: -1.355228066444397
    3. '_' → logprob: -2.1052279472351074
    4. '+' → logprob: -2.6052279472351074
    5. '*' → logprob: -2.9802279472351074
    6. 'for' → logprob: -3.1052279472351074
    7. '\' → logprob: -3.3552279472351074
    8. '=' → logprob: -3.7302279472351074
    9. '\n' → logprob: -3.8552279472351074
    10. 's' → logprob: -4.355227947235107

Token 9: ' test' (ID: 1746)
  Prédit: ' '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' ' → logprob: -0.23241464793682098
    2. ' test' → logprob: -1.6074146032333374
    3. 'test' → logprob: -5.982414722442627
    4. 't' → logprob: -7.482414722442627
    5. ' ​' → logprob: -7.482414722442627
    6. 'é' → logprob: -7.732414722442627
    7. 'space' → logprob: -8.107414245605469
    8. 's' → logprob: -8.482414245605469
    9. 'élé' → logprob: -8.607414245605469
    10. 'c' → logprob: -8.607414245605469

Token 10: ' cases' (ID: 7911)
  Prédit: '\n'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '\n' → logprob: -0.10134568065404892
    2. '
' → logprob: -2.8513457775115967
    3. 'for' → logprob: -4.226345539093018
    4. '' → logprob: -4.726345539093018
    5. '\' → logprob: -4.851345539093018
    6. ' for' → logprob: -5.976345539093018
    7. '\r' → logprob: -5.976345539093018
    8. '  
' → logprob: -6.976345539093018
    9. ' ' → logprob: -8.101346015930176
    10. 'n' → logprob: -8.851346015930176

Token 11: '

' (ID: 279)
  Prédit: '\n'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '\n' → logprob: -0.1910906583070755
    2. '
' → logprob: -2.0660905838012695
    3. '\' → logprob: -3.5660905838012695
    4. '' → logprob: -4.3160905838012695
    5. '\r' → logprob: -6.4410905838012695
    6. '  
' → logprob: -6.5660905838012695
    7. 'for' → logprob: -7.1910905838012695
    8. ' 
' → logprob: -7.9410905838012695
    9. ' ' → logprob: -7.9410905838012695
    10. '
' → logprob: -8.56609058380127

Token 12: 'def' (ID: 1314)
  Prédit: '\n'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '\n' → logprob: -0.16656121611595154
    2. 'for' → logprob: -2.0415611267089844
    3. '
' → logprob: -4.291561126708984
    4. '\' → logprob: -5.416561126708984
    5. '' → logprob: -6.291561126708984
    6. ' for' → logprob: -6.541561126708984
    7. '\r' → logprob: -6.666561126708984
    8. '```' → logprob: -8.916561126708984
    9. 'i' → logprob: -9.166561126708984
    10. 's' → logprob: -9.291561126708984

Token 13: ' pg' (ID: 32259)
  Prédit: ' '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' ' → logprob: -0.1357801854610443
    2. ' test' → logprob: -2.760780096054077
    3. ' process' → logprob: -4.010780334472656
    4. ' space' → logprob: -4.260780334472656
    5. '_' → logprob: -4.510780334472656
    6. ' factorial' → logprob: -5.135780334472656
    7. ' func' → logprob: -6.010780334472656
    8. ' solve' → logprob: -6.135780334472656
    9. ' f' → logprob: -6.635780334472656
    10. ' calculate' → logprob: -6.635780334472656

Token 14: 'cd' (ID: 8301)
  Prédit: 'cd'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'cd' → logprob: -0.004003011621534824
    2. 'def' → logprob: -5.629003047943115
    3. 'r' → logprob: -8.379002571105957
    4. 'c' → logprob: -10.379002571105957
    5. 'g' → logprob: -10.379002571105957
    6. 'p' → logprob: -10.629002571105957
    7. '```' → logprob: -10.754002571105957
    8. 'pow' → logprob: -11.254002571105957
    9. '_cd' → logprob: -11.254002571105957
    10. ' def' → logprob: -12.004002571105957

Token 15: '(a' (ID: 6271)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(' → logprob: -0.0033986021298915148
    2. '_' → logprob: -6.128398418426514
    3. ' (' → logprob: -7.503398418426514
    4. '(a' → logprob: -7.503398418426514
    5. 'a' → logprob: -11.003398895263672
    6. '(x' → logprob: -11.128398895263672
    7. '(t' → logprob: -11.378398895263672
    8. '(p' → logprob: -11.378398895263672
    9. ')' → logprob: -11.503398895263672
    10. 's' → logprob: -11.628398895263672

Token 16: ',' (ID: 11)
  Prédit: ','
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ',' → logprob: -0.0005424272385425866
    2. ' ,' → logprob: -8.000542640686035
    3. ',a' → logprob: -9.250542640686035
    4. ')' → logprob: -9.625542640686035
    5. ',)' → logprob: -10.875542640686035
    6. ',b' → logprob: -11.000542640686035
    7. 'a' → logprob: -13.125542640686035
    8. ',

' → logprob: -13.500542640686035
    9. ',n' → logprob: -14.125542640686035
    10. ',p' → logprob: -14.375542640686035

Token 17: ' b' (ID: 287)
  Prédit: 'b'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'b' → logprob: -0.17982003092765808
    2. ' b' → logprob: -1.8048200607299805
    3. ',' → logprob: -10.67982006072998
    4. ' ' → logprob: -10.80482006072998
    5. ',b' → logprob: -10.92982006072998
    6. ' ,' → logprob: -11.55482006072998
    7. ')' → logprob: -13.67982006072998
    8. '<|end|>' → logprob: -14.05482006072998
    9. ' )' → logprob: -14.42982006072998
    10. '  ' → logprob: -14.55482006072998

Token 18: '):' (ID: 3127)
  Prédit: '):'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '):' → logprob: -0.0266476608812809
    2. ')' → logprob: -3.6516475677490234
    3. '):
' → logprob: -8.651647567749023
    4. ',' → logprob: -9.026647567749023
    5. ':' → logprob: -11.276647567749023
    6. 'a' → logprob: -11.776647567749023
    7. ' ):' → logprob: -12.151647567749023
    8. '(a' → logprob: -12.276647567749023
    9. ')>' → logprob: -12.276647567749023
    10. '   ' → logprob: -13.026647567749023

Token 19: '     ' (ID: 530)
  Prédit: ' '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' ' → logprob: -0.8380020260810852
    2. '   ' → logprob: -1.3380019664764404
    3. ':' → logprob: -1.5880019664764404
    4. ' 
' → logprob: -3.3380019664764404
    5. ' :' → logprob: -4.0880022048950195
    6. '    ' → logprob: -4.7130022048950195
    7. '<|end|>' → logprob: -5.0880022048950195
    8. '    
' → logprob: -5.3380022048950195
    9. ' return' → logprob: -5.4630022048950195
    10. '  
' → logprob: -5.4630022048950195

Token 20: ' #' (ID: 1069)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.35896673798561096
    2. ':' → logprob: -1.6089667081832886
    3. ' if' → logprob: -3.483966827392578
    4. ' ' → logprob: -4.233966827392578
    5. '```' → logprob: -4.608966827392578
    6. 'if' → logprob: -4.733966827392578
    7. ' return' → logprob: -4.858966827392578
    8. ':return' → logprob: -5.233966827392578
    9. '<|end|>' → logprob: -5.358966827392578
    10. ' :' → logprob: -5.483966827392578

Token 21: ' Bon' (ID: 12658)
  Prédit: ' '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' ' → logprob: -0.04217999801039696
    2. ' return' → logprob: -4.042180061340332
    3. ' if' → logprob: -4.292180061340332
    4. ' """' → logprob: -5.542180061340332
    5. ' while' → logprob: -6.417180061340332
    6. '   ' → logprob: -6.917180061340332
    7. ' "' → logprob: -7.292180061340332
    8. ' a' → logprob: -7.417180061340332
    9. '  ' → logprob: -7.792180061340332
    10. ' )' → logprob: -8.542180061340332

Token 22: ',' (ID: 11)
  Prédit: ':'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ':' → logprob: -0.5012437105178833
    2. ' ' → logprob: -1.1262437105178833
    3. ' :' → logprob: -3.0012435913085938
    4. '   ' → logprob: -4.251243591308594
    5. ':return' → logprob: -6.876243591308594
    6. ')' → logprob: -7.126243591308594
    7. '  ' → logprob: -7.376243591308594
    8. ''' → logprob: -7.501243591308594
    9. '<|end|>' → logprob: -8.001243591308594
    10. '):' → logprob: -8.126243591308594

Token 23: ' on' (ID: 402)
  Prédit: ' if'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' if' → logprob: -0.43503648042678833
    2. ' return' → logprob: -2.0600364208221436
    3. '   ' → logprob: -2.4350364208221436
    4. ' ' → logprob: -2.6850364208221436
    5. ' """' → logprob: -3.5600364208221436
    6. ' i' → logprob: -4.185036659240723
    7. ' while' → logprob: -4.810036659240723
    8. ' r' → logprob: -5.060036659240723
    9. '    ' → logprob: -5.810036659240723
    10. 'r' → logprob: -5.810036659240723

Token 24: ' va' (ID: 3423)
  Prédit: ' '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' ' → logprob: -0.6437578797340393
    2. ''' → logprob: -1.5187578201293945
    3. ' a' → logprob: -2.3937578201293945
    4. ' '' → logprob: -3.1437578201293945
    5. 'a' → logprob: -3.8937578201293945
    6. 's' → logprob: -4.0187578201293945
    7. 'n' → logprob: -5.0187578201293945
    8. 'r' → logprob: -5.1437578201293945
    9. '  ' → logprob: -5.1437578201293945
    10. ' calculate' → logprob: -5.1437578201293945

Token 25: ' faire' (ID: 8119)
  Prédit: ' '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' ' → logprob: -0.27022585272789
    2. '   ' → logprob: -2.395225763320923
    3. ' calcul' → logprob: -3.270225763320923
    4. '  ' → logprob: -3.895225763320923
    5. ' return' → logprob: -3.895225763320923
    6. '    ' → logprob: -4.145226001739502
    7. ' continuer' → logprob: -4.395226001739502
    8. 'r' → logprob: -5.270226001739502
    9. '    
' → logprob: -6.145226001739502
    10. 'l' → logprob: -6.270226001739502

Token 26: ' le' (ID: 505)
  Prédit: ' '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' ' → logprob: -0.0066690705716609955
    2. '   ' → logprob: -5.756669044494629
    3. '  ' → logprob: -6.506669044494629
    4. '    ' → logprob: -8.256669044494629
    5. ':' → logprob: -8.506669044494629
    6. '_' → logprob: -8.631669044494629
    7. ',' → logprob: -8.756669044494629
    8. 'l' → logprob: -8.756669044494629
    9. ' un' → logprob: -8.756669044494629
    10. ' return' → logprob: -8.881669044494629

Token 27: ' PG' (ID: 44249)
  Prédit: ' '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' ' → logprob: -0.20511670410633087
    2. ' while' → logprob: -3.2051167488098145
    3. '   ' → logprob: -3.7051167488098145
    4. 'a' → logprob: -4.0801167488098145
    5. 'r' → logprob: -4.0801167488098145
    6. '=' → logprob: -4.3301167488098145
    7. 'd' → logprob: -4.4551167488098145
    8. 's' → logprob: -4.5801167488098145
    9. '  ' → logprob: -4.8301167488098145
    10. '_' → logprob: -5.3301167488098145

Token 28: 'CD' (ID: 8257)
  Prédit: 'cd'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'cd' → logprob: -0.5634360313415527
    2. 'c' → logprob: -1.0634360313415527
    3. 'CD' → logprob: -3.0634360313415527
    4. '_' → logprob: -4.563436031341553
    5. 'a' → logprob: -5.063436031341553
    6. '(' → logprob: -5.563436031341553
    7. 'C' → logprob: -5.563436031341553
    8. ' ' → logprob: -5.813436031341553
    9. '```' → logprob: -5.938436031341553
    10. 'd' → logprob: -6.063436031341553

Token 29: ',' (ID: 11)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(' → logprob: -0.07005580514669418
    2. ' ' → logprob: -3.0700557231903076
    3. 'def' → logprob: -5.320055961608887
    4. ':' → logprob: -5.695055961608887
    5. 's' → logprob: -5.945055961608887
    6. '   ' → logprob: -6.320055961608887
    7. ')' → logprob: -6.445055961608887
    8. '_' → logprob: -6.570055961608887
    9. '(
' → logprob: -7.070055961608887
    10. ',' → logprob: -7.195055961608887

Token 30: ' façon' (ID: 33381)
  Prédit: ' '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' ' → logprob: -0.03203359246253967
    2. '   ' → logprob: -4.282033443450928
    3. '  ' → logprob: -5.407033443450928
    4. ' if' → logprob: -5.657033443450928
    5. ' return' → logprob: -6.407033443450928
    6. ')' → logprob: -6.532033443450928
    7. ' )' → logprob: -6.782033443450928
    8. ' 
' → logprob: -6.907033443450928
    9. '    ' → logprob: -7.157033443450928
    10. '(' → logprob: -7.657033443450928

Token 31: ' Eu' (ID: 10237)
  Prédit: ' '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' ' → logprob: -0.5822084546089172
    2. 'def' → logprob: -1.5822083950042725
    3. 'a' → logprob: -2.9572083950042725
    4. 'import' → logprob: -3.3322083950042725
    5. '   ' → logprob: -3.8322083950042725
    6. '(' → logprob: -3.9572083950042725
    7. ')' → logprob: -4.207208633422852
    8. '  ' → logprob: -4.582208633422852
    9. ' )' → logprob: -4.582208633422852
    10. ' def' → logprob: -4.707208633422852

Token 32: 'cl' (ID: 565)
  Prédit: 'c'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'c' → logprob: -0.003487939015030861
    2. 'cl' → logprob: -6.378488063812256
    3. 'clidean' → logprob: -7.503488063812256
    4. 'l' → logprob: -7.628488063812256
    5. 'clid' → logprob: -8.503487586975098
    6. ')' → logprob: -8.878487586975098
    7. '   ' → logprob: -9.753487586975098
    8. '```' → logprob: -10.003487586975098
    9. '#' → logprob: -10.378487586975098
    10. '_' → logprob: -10.628487586975098

Token 33: 'ide' (ID: 617)
  Prédit: 'e'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'e' → logprob: -1.0130516290664673
    2. 'ène' → logprob: -1.0130516290664673
    3. 'é' → logprob: -2.3880515098571777
    4. 'ene' → logprob: -3.2630515098571777
    5. 'en' → logprob: -3.2630515098571777
    6. 'a' → logprob: -3.3880515098571777
    7. '   ' → logprob: -4.263051509857178
    8. '```' → logprob: -4.763051509857178
    9. '  ' → logprob: -5.263051509857178
    10. 'éan' → logprob: -5.763051509857178

Token 34: '
' (ID: 198)
  Prédit: ':'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ':' → logprob: -0.42987120151519775
    2. '   ' → logprob: -1.5548712015151978
    3. ' ' → logprob: -2.679871082305908
    4. ' :' → logprob: -2.929871082305908
    5. '  ' → logprob: -6.179871082305908
    6. ')' → logprob: -6.429871082305908
    7. '
' → logprob: -6.554871082305908
    8. ':
' → logprob: -6.804871082305908
    9. ' :
' → logprob: -6.804871082305908
    10. '):' → logprob: -6.929871082305908

Token 35: '   ' (ID: 271)
  Prédit: ':'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ':' → logprob: -0.5119544863700867
    2. '   ' → logprob: -1.2619545459747314
    3. ' ' → logprob: -3.3869545459747314
    4. '):' → logprob: -3.6369545459747314
    5. '(' → logprob: -3.7619545459747314
    6. ' :' → logprob: -4.386954307556152
    7. ')' → logprob: -5.261954307556152
    8. ' (' → logprob: -5.636954307556152
    9. '():' → logprob: -5.761954307556152
    10. '  ' → logprob: -6.136954307556152

Token 36: ' while' (ID: 2049)
  Prédit: ' while'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' while' → logprob: -0.5942956209182739
    2. '   ' → logprob: -1.094295620918274
    3. 'while' (adapté à ' while') → logprob: -2.7192955017089844
    4. ' if' → logprob: -3.2192955017089844
    5. 'if' → logprob: -5.219295501708984
    6. ' return' → logprob: -7.219295501708984
    7. '	while' → logprob: -7.969295501708984
    8. '    
' → logprob: -8.344295501708984
    9. ' ' → logprob: -8.719295501708984
    10. 'return' → logprob: -8.719295501708984

Token 37: ' b' (ID: 287)
  Prédit: ' b'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' b' → logprob: -0.009998070076107979
    2. 'b' → logprob: -4.634997844696045
    3. ' a' → logprob: -8.509998321533203
    4. 'a' → logprob: -10.759998321533203
    5. ' ' → logprob: -11.134998321533203
    6. '	b' → logprob: -12.384998321533203
    7. '   ' → logprob: -15.509998321533203
    8. '_b' → logprob: -16.009998321533203
    9. ' б' → logprob: -16.634998321533203
    10. '(b' → logprob: -16.884998321533203

Token 38: ' !=' (ID: 1666)
  Prédit: ' !='
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' !=' → logprob: -0.2988448739051819
    2. ':' → logprob: -1.548844814300537
    3. '!=' → logprob: -3.298844814300537
    4. ' :' → logprob: -5.673844814300537
    5. ' >' → logprob: -5.673844814300537
    6. '>' → logprob: -6.298844814300537
    7. ' and' → logprob: -9.673845291137695
    8. ' ' → logprob: -9.798845291137695
    9. ' ' → logprob: -10.423845291137695
    10. 'and' → logprob: -11.798845291137695

Token 39: ' ' (ID: 220)
  Prédit: ' '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' ' → logprob: -0.12692873179912567
    2. '0' → logprob: -2.1269288063049316
    3. '  ' → logprob: -15.001928329467773
    4. ' ' → logprob: -15.251928329467773
    5. '   ' → logprob: -16.626928329467773
    6. 'a' → logprob: -18.001928329467773
    7. '```' → logprob: -18.501928329467773
    8. '<|end|>' → logprob: -19.001928329467773
    9. '	' → logprob: -19.126928329467773
    10. '۰' → logprob: -19.251928329467773

Token 40: '0' (ID: 15)
  Prédit: '0'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '0' → logprob: -0.0028049908578395844
    2. ' ' → logprob: -5.877804756164551
    3. '   ' → logprob: -16.377805709838867
    4. '  ' → logprob: -16.877805709838867
    5. ' ' → logprob: -17.252805709838867
    6. '```' → logprob: -19.252805709838867
    7. '۰' → logprob: -19.502805709838867
    8. '	' → logprob: -19.877805709838867
    9. '00' → logprob: -20.877805709838867
    10. '    ' → logprob: -20.877805709838867

Token 41: ':' (ID: 25)
  Prédit: ':'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ':' → logprob: -0.001240348443388939
    2. ' :' → logprob: -7.251240253448486
    3. ':
' → logprob: -8.126240730285645
    4. '):' → logprob: -8.751240730285645
    5. '   ' → logprob: -10.501240730285645
    6. ':**' → logprob: -11.251240730285645
    7. '<|end|>' → logprob: -11.251240730285645
    8. '       ' → logprob: -11.876240730285645
    9. ' :
' → logprob: -13.126240730285645
    10. ')' → logprob: -13.251240730285645

Token 42: '   ' (ID: 271)
  Prédit: '       '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '       ' → logprob: -0.5600930452346802
    2. '
' → logprob: -1.1850930452346802
    3. '\n' → logprob: -3.4350929260253906
    4. '<|end|>' → logprob: -3.5600929260253906
    5. ' 
' → logprob: -3.9350929260253906
    6. ' ' → logprob: -4.435092926025391
    7. '    ' → logprob: -4.560092926025391
    8. '   ' → logprob: -4.810092926025391
    9. '    
' → logprob: -5.185092926025391
    10. '        
' → logprob: -5.935092926025391

Token 43: ' #' (ID: 1069)
  Prédit: '       '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '       ' → logprob: -0.16192857921123505
    2. '
' → logprob: -2.661928653717041
    3. '   ' → logprob: -4.036928653717041
    4. ':' → logprob: -4.036928653717041
    5. '\n' → logprob: -4.036928653717041
    6. '    
' → logprob: -5.161928653717041
    7. ':
' → logprob: -5.536928653717041
    8. ' ' → logprob: -5.536928653717041
    9. '        
' → logprob: -5.786928653717041
    10. ' 
' → logprob: -6.161928653717041

Token 44: ' On' (ID: 2160)
  Prédit: '       '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '       ' → logprob: -0.5796523690223694
    2. '
' → logprob: -1.2046523094177246
    3. ' 
' → logprob: -3.2046523094177246
    4. '    ' → logprob: -3.7046523094177246
    5. '        
' → logprob: -3.9546523094177246
    6. '    
' → logprob: -4.204652309417725
    7. '   ' → logprob: -4.204652309417725
    8. ' ' → logprob: -4.829652309417725
    9. '<|end|>' → logprob: -5.329652309417725
    10. '     
' → logprob: -5.704652309417725

Token 45: ' pourrait' (ID: 39622)
  Prédit: '='
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '=' → logprob: -0.705514669418335
    2. ' =' → logprob: -1.705514669418335
    3. ' ' → logprob: -2.580514669418335
    4. '    ' → logprob: -2.705514669418335
    5. 't' → logprob: -2.955514669418335
    6. '   ' → logprob: -3.455514669418335
    7. ' a' → logprob: -3.705514669418335
    8. ' t' → logprob: -4.580514907836914
    9. '<|end|>' → logprob: -4.580514907836914
    10. 'a' → logprob: -4.705514907836914

Token 46: ' le' (ID: 505)
  Prédit: '       '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '       ' → logprob: -0.4248202443122864
    2. '    ' → logprob: -1.4248201847076416
    3. ':' → logprob: -3.7998201847076416
    4. '   ' → logprob: -4.174820423126221
    5. '        ' → logprob: -4.424820423126221
    6. '<|end|>' → logprob: -4.549820423126221
    7. ' ' → logprob: -4.674820423126221
    8. '        
' → logprob: -5.424820423126221
    9. '     ' → logprob: -5.674820423126221
    10. 't' → logprob: -5.799820423126221

Token 47: ' faire' (ID: 8119)
  Prédit: ' faire'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' faire' → logprob: -0.6950638294219971
    2. '   ' → logprob: -2.070063829421997
    3. ' calcul' → logprob: -2.320063829421997
    4. ' return' → logprob: -3.070063829421997
    5. 'faire' → logprob: -3.195063829421997
    6. ' remplacer' → logprob: -3.570063829421997
    7. ' continuer' → logprob: -3.820063829421997
    8. ' écrire' → logprob: -3.945063829421997
    9. '    ' → logprob: -4.570063591003418
    10. 'return' → logprob: -4.695063591003418

Token 48: ' réc' (ID: 36254)
  Prédit: '       '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '       ' → logprob: -0.9332768321037292
    2. '    ' → logprob: -1.433276891708374
    3. '   ' → logprob: -1.433276891708374
    4. '    
' → logprob: -2.808276891708374
    5. ' ' → logprob: -4.308276653289795
    6. '\n' → logprob: -4.433276653289795
    7. ':' → logprob: -4.683276653289795
    8. ' :' → logprob: -5.058276653289795
    9. '        
' → logprob: -5.308276653289795
    10. ' :
' → logprob: -5.808276653289795

Token 49: 'urs' (ID: 1628)
  Prédit: 'ursive'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'ursive' → logprob: -0.45883476734161377
    2. 'urs' → logprob: -2.083834648132324
    3. 'u' → logprob: -2.208834648132324
    4. 'ur' → logprob: -2.333834648132324
    5. 'ursion' → logprob: -4.708834648132324
    6. '   ' → logprob: -5.083834648132324
    7. ' ' → logprob: -5.708834648132324
    8. 'urse' → logprob: -6.208834648132324
    9. '```' → logprob: -6.583834648132324
    10. 'ursively' → logprob: -6.646334648132324

Token 50: 'if' (ID: 366)
  Prédit: 'ent'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'ent' → logprob: -0.2724853754043579
    2. 's' → logprob: -2.6474852561950684
    3. 'e' → logprob: -2.8974852561950684
    4. 'ursive' → logprob: -3.0224852561950684
    5. 'ers' → logprob: -4.147485256195068
    6. 'es' → logprob: -4.272485256195068
    7. 'er' → logprob: -4.397485256195068
    8. 'urs' → logprob: -5.147485256195068
    9. 'is' → logprob: -5.397485256195068
    10. '```' → logprob: -6.522485256195068

Token 51: ' mais' (ID: 2899)
  Prédit: '       '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '       ' → logprob: -0.46371597051620483
    2. ':' → logprob: -1.3387160301208496
    3. '   ' → logprob: -2.5887160301208496
    4. '    ' → logprob: -4.58871603012085
    5. ' ' → logprob: -5.08871603012085
    6. ' :' → logprob: -5.33871603012085
    7. ',' → logprob: -5.58871603012085
    8. '<|end|>' → logprob: -5.83871603012085
    9. '    
' → logprob: -7.08871603012085
    10. '        
' → logprob: -7.21371603012085

Token 52: ' bon' (ID: 4846)
  Prédit: '       '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '       ' → logprob: -0.6797379851341248
    2. '    ' → logprob: -1.1797380447387695
    3. ' ' → logprob: -2.6797380447387695
    4. '   ' → logprob: -2.8047380447387695
    5. '<|end|>' → logprob: -3.4297380447387695
    6. '    
' → logprob: -4.4297380447387695
    7. '        
' → logprob: -5.9297380447387695
    8. '     
' → logprob: -6.4297380447387695
    9. '        ' → logprob: -6.6797380447387695
    10. '     ' → logprob: -6.9297380447387695

Token 53: ',' (ID: 11)
  Prédit: '       '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '       ' → logprob: -0.08562809228897095
    2. ':' → logprob: -3.210628032684326
    3. '   ' → logprob: -3.960628032684326
    4. ',' → logprob: -5.460628032684326
    5. '    ' → logprob: -5.585628032684326
    6. '    
' → logprob: -5.835628032684326
    7. '<|end|>' → logprob: -5.835628032684326
    8. '        
' → logprob: -5.960628032684326
    9. ':
' → logprob: -6.835628032684326
    10. ' :' → logprob: -7.085628032684326

Token 54: ' ça' (ID: 13590)
  Prédit: '       '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '       ' → logprob: -0.13605573773384094
    2. '   ' → logprob: -2.7610557079315186
    3. '    ' → logprob: -3.8860557079315186
    4. '<|end|>' → logprob: -4.386055946350098
    5. ' ' → logprob: -4.761055946350098
    6. '    
' → logprob: -4.886055946350098
    7. ':' → logprob: -5.636055946350098
    8. ' 
' → logprob: -6.136055946350098
    9. '        
' → logprob: -6.261055946350098
    10. '     
' → logprob: -7.136055946350098

Token 55: ' marche' (ID: 58191)
  Prédit: ' a'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' a' → logprob: -1.3176287412643433
    2. ' ' → logprob: -1.4426287412643433
    3. ' )' → logprob: -2.567628860473633
    4. ' continue' → logprob: -2.692628860473633
    5. ' n' → logprob: -2.942628860473633
    6. ' s' → logprob: -3.442628860473633
    7. ' space' → logprob: -3.567628860473633
    8. 's' → logprob: -3.567628860473633
    9. 'a' → logprob: -3.817628860473633
    10. '    ' → logprob: -3.817628860473633

Token 56: '.
' (ID: 558)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.19026587903499603
    2. '    
' → logprob: -3.3152658939361572
    3. '       ' → logprob: -3.4402658939361572
    4. ':' → logprob: -3.4402658939361572
    5. '    ' → logprob: -3.9402658939361572
    6. ' ' → logprob: -4.190265655517578
    7. ',' → logprob: -4.565265655517578
    8. ' and' → logprob: -5.940265655517578
    9. ' :' → logprob: -5.940265655517578
    10. '  ' → logprob: -6.065265655517578

Token 57: '       ' (ID: 309)
  Prédit: '       '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '       ' → logprob: -0.06749676913022995
    2. '   ' → logprob: -3.1924967765808105
    3. '    
' → logprob: -4.8174967765808105
    4. '    ' → logprob: -5.4424967765808105
    5. '        
' → logprob: -5.9424967765808105
    6. ' 
' → logprob: -6.1924967765808105
    7. '
' → logprob: -6.1924967765808105
    8. ' ' → logprob: -6.8174967765808105
    9. '  
' → logprob: -6.8174967765808105
    10. 'a' → logprob: -7.0674967765808105

Token 58: ' a' (ID: 261)
  Prédit: 'a'
  Correct (stricte): False
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'a' (adapté à ' a') → logprob: -0.1658111959695816
    2. ' a' → logprob: -1.9158111810684204
    3. '   ' → logprob: -5.915811061859131
    4. 'r' → logprob: -6.790811061859131
    5. 't' → logprob: -7.040811061859131
    6. ' t' → logprob: -8.540811538696289
    7. 'temp' → logprob: -8.665811538696289
    8. '	a' → logprob: -8.790811538696289
    9. ' r' → logprob: -8.915811538696289
    10. '    ' → logprob: -9.415811538696289

Token 59: ',' (ID: 11)
  Prédit: ','
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ',' → logprob: -0.002570544835180044
    2. '%' → logprob: -6.877570629119873
    3. ' ,' → logprob: -7.002570629119873
    4. ' %=' → logprob: -7.877570629119873
    5. ' %' → logprob: -8.627570152282715
    6. '<|end|>' → logprob: -10.377570152282715
    7. ',b' → logprob: -11.002570152282715
    8. ' ' → logprob: -12.377570152282715
    9. '%,' → logprob: -12.502570152282715
    10. '%=' → logprob: -12.627570152282715

Token 60: ' b' (ID: 287)
  Prédit: ' b'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' b' → logprob: -0.012589470483362675
    2. 'b' → logprob: -4.637589454650879
    3. ' ' → logprob: -5.887589454650879
    4. '<|end|>' → logprob: -10.137589454650879
    5. '	b' → logprob: -11.762589454650879
    6. '    ' → logprob: -12.262589454650879
    7. '  ' → logprob: -13.887589454650879
    8. ' ' → logprob: -14.512589454650879
    9. '<|end|>' → logprob: -14.512589454650879
    10. '>b' → logprob: -14.887589454650879

Token 61: ' =' (ID: 314)
  Prédit: ' ='
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' =' → logprob: -0.0548846572637558
    2. '=' → logprob: -2.929884672164917
    3. ',' → logprob: -13.804884910583496
    4. ' ' → logprob: -15.054884910583496
    5. '<|end|>' → logprob: -15.054884910583496
    6. ' %=' → logprob: -15.179884910583496
    7. ' =
' → logprob: -15.679884910583496
    8. '%=' → logprob: -15.929884910583496
    9. ' =)' → logprob: -17.17988395690918
    10. ')' → logprob: -17.80488395690918

Token 62: ' b' (ID: 287)
  Prédit: ' b'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' b' → logprob: -0.1002098023891449
    2. 'b' → logprob: -2.3502097129821777
    3. ' ' → logprob: -12.725210189819336
    4. '	b' → logprob: -15.975210189819336
    5. ' ' → logprob: -17.725210189819336
    6. '   ' → logprob: -17.975210189819336
    7. '>b' → logprob: -17.975210189819336
    8. '  ' → logprob: -18.725210189819336
    9. ')b' → logprob: -18.725210189819336
    10. '    ' → logprob: -18.850210189819336

Token 63: ',' (ID: 11)
  Prédit: ','
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ',' → logprob: -0.0001302374730585143
    2. ' ,' → logprob: -9.000130653381348
    3. 'a' → logprob: -13.375130653381348
    4. '<|end|>' → logprob: -13.375130653381348
    5. ',a' → logprob: -13.500130653381348
    6. ' ' → logprob: -13.500130653381348
    7. ' a' → logprob: -14.875130653381348
    8. '%' → logprob: -15.750130653381348
    9. ',
' → logprob: -16.00012969970703
    10. '‌,' → logprob: -16.37512969970703

Token 64: ' a' (ID: 261)
  Prédit: ' a'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' a' → logprob: -0.16026271879673004
    2. 'a' → logprob: -1.9102627038955688
    3. ' ' → logprob: -10.285263061523438
    4. '	a' → logprob: -12.785263061523438
    5. '  ' → logprob: -14.285263061523438
    6. ' ' → logprob: -14.660263061523438
    7. '   ' → logprob: -15.285263061523438
    8. '>a' → logprob: -16.160263061523438
    9. '<|end|>' → logprob: -17.035263061523438
    10. '>' → logprob: -17.035263061523438

Token 65: ' %' (ID: 1851)
  Prédit: ' %'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' %' → logprob: -0.3487512469291687
    2. '%' → logprob: -1.2237513065338135
    3. ' ' → logprob: -8.473751068115234
    4. 'a' → logprob: -10.098751068115234
    5. '<|end|>' → logprob: -10.348751068115234
    6. ' a' → logprob: -11.973751068115234
    7. '%i' → logprob: -12.473751068115234
    8. '%A' → logprob: -12.473751068115234
    9. ' %
' → logprob: -12.848751068115234
    10. '%b' → logprob: -13.098751068115234

Token 66: ' b' (ID: 287)
  Prédit: 'b'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'b' → logprob: -0.0007099286303855479
    2. ' b' → logprob: -7.2507100105285645
    3. ' ' → logprob: -18.250709533691406
    4. '	b' → logprob: -18.625709533691406
    5. '%b' → logprob: -20.250709533691406
    6. '<|end|>' → logprob: -21.000709533691406
    7. '_b' → logprob: -21.125709533691406
    8. '%' → logprob: -21.250709533691406
    9. '>b' → logprob: -21.250709533691406
    10. ')b' → logprob: -21.250709533691406

Token 67: '
' (ID: 198)
  Prédit: '
'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '
' → logprob: -0.45967185497283936
    2. '\n' → logprob: -1.4596718549728394
    3. ' 
' → logprob: -3.084671974182129
    4. '<|end|>' → logprob: -3.709671974182129
    5. '   ' → logprob: -3.959671974182129
    6. 'return' → logprob: -4.209671974182129
    7. '  
' → logprob: -4.959671974182129
    8. '    
' → logprob: -5.209671974182129
    9. ' return' → logprob: -5.209671974182129
    10. 'newline' → logprob: -6.084671974182129

Token 68: '   ' (ID: 271)
  Prédit: '\n'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '\n' → logprob: -0.6185482144355774
    2. ' 
' → logprob: -1.6185481548309326
    3. '
' → logprob: -1.9935481548309326
    4. '  
' → logprob: -3.6185481548309326
    5. ' ' → logprob: -3.7435481548309326
    6. '   ' → logprob: -4.118548393249512
    7. '<|end|>' → logprob: -4.493548393249512
    8. 'return' → logprob: -4.618548393249512
    9. '    
' → logprob: -4.743548393249512
    10. ' return' → logprob: -4.868548393249512

Token 69: ' return' (ID: 622)
  Prédit: 'return'
  Correct (stricte): False
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'return' (adapté à ' return') → logprob: -0.30998098850250244
    2. '   ' → logprob: -1.6849809885025024
    3. ' return' → logprob: -2.559980869293213
    4. 'a' → logprob: -5.934980869293213
    5. '	return' → logprob: -7.684980869293213
    6. ' ' → logprob: -8.184981346130371
    7. ':return' → logprob: -8.559981346130371
    8. ' a' → logprob: -9.559981346130371
    9. 'eturn' → logprob: -10.434981346130371
    10. '  ' → logprob: -10.684981346130371

Token 70: ' a' (ID: 261)
  Prédit: ' a'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' a' → logprob: -0.05488837882876396
    2. 'a' → logprob: -2.9298884868621826
    3. ' ' → logprob: -12.179888725280762
    4. '	a' → logprob: -14.304888725280762
    5. ' ' → logprob: -15.429888725280762
    6. '   ' → logprob: -16.554887771606445
    7. '  ' → logprob: -17.304887771606445
    8. 't' → logprob: -17.679887771606445
    9. '    ' → logprob: -18.304887771606445
    10. ' а' → logprob: -18.304887771606445

Token 71: '

' (ID: 279)
  Prédit: '
'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '
' → logprob: -0.114614337682724
    2. '

' → logprob: -2.489614248275757
    3. '\n' → logprob: -4.864614486694336
    4. ' 
' → logprob: -5.489614486694336
    5. '
' → logprob: -5.864614486694336
    6. 'for' → logprob: -5.989614486694336
    7. '' → logprob: -6.114614486694336
    8. ' 

' → logprob: -6.239614486694336
    9. '  
' → logprob: -6.364614486694336
    10. ' for' → logprob: -7.739614486694336

Token 72: 'def' (ID: 1314)
  Prédit: 'for'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'for' → logprob: -0.19542887806892395
    2. '
' → logprob: -1.8204288482666016
    3. '\n' → logprob: -4.695428848266602
    4. ' for' → logprob: -5.820428848266602
    5. '

' → logprob: -6.195428848266602
    6. '\' → logprob: -7.445428848266602
    7. '
' → logprob: -8.070428848266602
    8. '```' → logprob: -8.695428848266602
    9. '' → logprob: -9.320428848266602
    10. '<|end|>' → logprob: -9.820428848266602

Token 73: ' ver' (ID: 1245)
  Prédit: ' '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' ' → logprob: -1.3133386373519897
    2. ' l' → logprob: -1.5633386373519897
    3. ' pg' → logprob: -1.5633386373519897
    4. ' gcd' → logprob: -1.9383386373519897
    5. ' ' → logprob: -3.5633387565612793
    6. ' main' → logprob: -3.8133387565612793
    7. ' p' → logprob: -4.313338756561279
    8. ' cop' → logprob: -4.563338756561279
    9. ' pow' → logprob: -4.563338756561279
    10. ' f' → logprob: -4.688338756561279

Token 74: 'if' (ID: 366)
  Prédit: 'if'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'if' → logprob: -0.16279929876327515
    2. 'ify' → logprob: -2.16279935836792
    3. 'ifie' → logprob: -3.78779935836792
    4. 'i' → logprob: -5.41279935836792
    5. 'ifier' → logprob: -6.03779935836792
    6. ' if' → logprob: -6.16279935836792
    7. 'ification' → logprob: -6.53779935836792
    8. 's' → logprob: -7.66279935836792
    9. 'ifi' → logprob: -7.78779935836792
    10. 'y' → logprob: -8.162798881530762

Token 75: '(a' (ID: 6271)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(' → logprob: -0.10737629979848862
    2. '(a' → logprob: -2.7323763370513916
    3. '_' → logprob: -3.4823763370513916
    4. '_(' → logprob: -6.4823760986328125
    5. '(e' → logprob: -6.9823760986328125
    6. '(_' → logprob: -7.4823760986328125
    7. '(x' → logprob: -8.357376098632812
    8. '(i' → logprob: -8.732376098632812
    9. '_sat' → logprob: -8.732376098632812
    10. '(s' → logprob: -8.857376098632812

Token 76: ',' (ID: 11)
  Prédit: ','
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ',' → logprob: -0.0009941066382452846
    2. ',b' → logprob: -8.000993728637695
    3. '):' → logprob: -8.000993728637695
    4. ' ,' → logprob: -8.500993728637695
    5. ')' → logprob: -9.375993728637695
    6. ',a' → logprob: -11.000993728637695
    7. ' ' → logprob: -13.250993728637695
    8. ',n' → logprob: -13.250993728637695
    9. '_,' → logprob: -13.375993728637695
    10. ',p' → logprob: -13.500993728637695

Token 77: ' b' (ID: 287)
  Prédit: 'b'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'b' → logprob: -0.28268736600875854
    2. ' b' → logprob: -1.4076874256134033
    3. ' ' → logprob: -7.907687187194824
    4. 'n' → logprob: -8.657687187194824
    5. 't' → logprob: -9.032687187194824
    6. ' n' → logprob: -9.157687187194824
    7. ' t' → logprob: -9.407687187194824
    8. 'a' → logprob: -9.532687187194824
    9. ')' → logprob: -9.532687187194824
    10. 'm' → logprob: -9.595187187194824

Token 78: ',' (ID: 11)
  Prédit: '):'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '):' → logprob: -0.007237906102091074
    2. ')' → logprob: -5.007237911224365
    3. ',' → logprob: -7.632237911224365
    4. ':' → logprob: -11.132237434387207
    5. ' ):' → logprob: -11.132237434387207
    6. '=' → logprob: -12.882237434387207
    7. '):
' → logprob: -13.382237434387207
    8. '():' → logprob: -14.382237434387207
    9. '   ' → logprob: -14.757237434387207
    10. ' )' → logprob: -15.007237434387207

Token 79: ' c' (ID: 274)
  Prédit: ' c'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' c' → logprob: -0.5205175280570984
    2. 'c' → logprob: -1.0205175876617432
    3. ' n' → logprob: -4.645517349243164
    4. 'n' → logprob: -5.020517349243164
    5. ' t' → logprob: -5.270517349243164
    6. ' k' → logprob: -6.020517349243164
    7. 't' → logprob: -6.083017349243164
    8. ' p' → logprob: -6.208017349243164
    9. 'k' → logprob: -6.208017349243164
    10. 'p' → logprob: -6.520517349243164

Token 80: ',' (ID: 11)
  Prédit: '):'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '):' → logprob: -0.004669595509767532
    2. ')' → logprob: -5.379669666290283
    3. ',' → logprob: -10.629669189453125
    4. ' ):' → logprob: -11.254669189453125
    5. ':' → logprob: -12.004669189453125
    6. '=' → logprob: -13.004669189453125
    7. '):
' → logprob: -13.754669189453125
    8. '),' → logprob: -15.129669189453125
    9. '>' → logprob: -15.379669189453125
    10. ''):' → logprob: -15.379669189453125

Token 81: ' d' (ID: 272)
  Prédit: ' d'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' d' → logprob: -0.3231703042984009
    2. 'd' → logprob: -1.3231703042984009
    3. ')' → logprob: -6.198170185089111
    4. ' )' → logprob: -6.323170185089111
    5. ' t' → logprob: -7.198170185089111
    6. ' n' → logprob: -7.448170185089111
    7. ' ' → logprob: -7.823170185089111
    8. ' p' → logprob: -7.948170185089111
    9. ' s' → logprob: -8.07317066192627
    10. 'n' → logprob: -8.19817066192627

Token 82: '):' (ID: 3127)
  Prédit: '):'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '):' → logprob: -0.0028354227542877197
    2. ')' → logprob: -5.877835273742676
    3. ' ):' → logprob: -11.502835273742676
    4. ':' → logprob: -11.502835273742676
    5. ',' → logprob: -12.127835273742676
    6. '):
' → logprob: -12.502835273742676
    7. ''):' → logprob: -15.877835273742676
    8. '   ' → logprob: -16.127836227416992
    9. '>' → logprob: -16.252836227416992
    10. '=' → logprob: -16.502836227416992

Token 83: ' #' (ID: 1069)
  Prédit: ':'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ':' → logprob: -0.5294185280799866
    2. '   ' → logprob: -1.4044184684753418
    3. '<|end|>' → logprob: -2.154418468475342
    4. ' ' → logprob: -3.404418468475342
    5. ' :' → logprob: -5.154418468475342
    6. '    ' → logprob: -5.904418468475342
    7. ' 
' → logprob: -6.404418468475342
    8. ' (' → logprob: -6.529418468475342
    9. '  ' → logprob: -7.154418468475342
    10. '(' → logprob: -7.404418468475342

Token 84: ' on' (ID: 402)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.06605293601751328
    2. ' return' → logprob: -3.5660529136657715
    3. ' if' → logprob: -4.4410529136657715
    4. ' while' → logprob: -4.9410529136657715
    5. ' ' → logprob: -5.1910529136657715
    6. 'return' → logprob: -5.5660529136657715
    7. 'while' → logprob: -6.4410529136657715
    8. '    ' → logprob: -6.4410529136657715
    9. ' #' → logprob: -6.8160529136657715
    10. 'if' → logprob: -6.9410529136657715

Token 85: ' va' (ID: 3423)
  Prédit: ' a'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' a' → logprob: -1.603562593460083
    2. '   ' → logprob: -2.103562593460083
    3. 'def' → logprob: -2.353562593460083
    4. ')' → logprob: -2.978562593460083
    5. '=' → logprob: -2.978562593460083
    6. ' veut' → logprob: -2.978562593460083
    7. ',' → logprob: -3.478562593460083
    8. '>' → logprob: -3.478562593460083
    9. ' def' → logprob: -3.603562593460083
    10. ' ' → logprob: -3.603562593460083

Token 86: ' regarder' (ID: 73220)
  Prédit: 'v'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'v' → logprob: -1.1893131732940674
    2. ' ' → logprob: -1.1893131732940674
    3. ' vérifier' → logprob: -1.3143131732940674
    4. '   ' → logprob: -3.6893131732940674
    5. ' v' → logprob: -3.9393131732940674
    6. ' voir' → logprob: -4.064312934875488
    7. ' vér' → logprob: -5.314312934875488
    8. ' return' → logprob: -5.314312934875488
    9. 'r' → logprob: -5.439312934875488
    10. ' calcul' → logprob: -5.689312934875488

Token 87: ' si' (ID: 1784)
  Prédit: ' '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' ' → logprob: -0.315319687128067
    2. '   ' → logprob: -1.9403196573257446
    3. '  ' → logprob: -2.440319776535034
    4. ')' → logprob: -4.565319538116455
    5. ' if' → logprob: -4.565319538116455
    6. ',' → logprob: -5.440319538116455
    7. '    ' → logprob: -5.940319538116455
    8. '<|end|>' → logprob: -6.440319538116455
    9. ' )' → logprob: -6.440319538116455
    10. ':' → logprob: -6.690319538116455

Token 88: ' c' (ID: 274)
  Prédit: ' ('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' (' → logprob: -0.5824655294418335
    2. ' c' → logprob: -1.8324655294418335
    3. ' a' → logprob: -2.207465648651123
    4. 'a' → logprob: -3.082465648651123
    5. '(a' → logprob: -3.332465648651123
    6. ' b' → logprob: -3.707465648651123
    7. 'c' → logprob: -3.957465648651123
    8. '(' → logprob: -4.332465648651123
    9. ' d' → logprob: -4.457465648651123
    10. 'b' → logprob: -4.957465648651123

Token 89: ''est' (ID: 6616)
  Prédit: '*'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '*' → logprob: -1.052578330039978
    2. ' *' → logprob: -1.302578330039978
    3. '+' → logprob: -3.1775784492492676
    4. ' ==' → logprob: -3.3025784492492676
    5. ' %' → logprob: -3.4275784492492676
    6. '%' → logprob: -3.6775784492492676
    7. ' +' → logprob: -3.9275784492492676
    8. ' /' → logprob: -4.052578449249268
    9. '*d' → logprob: -4.052578449249268
    10. ''est' → logprob: -4.052578449249268

Token 90: ' '' (ID: 461)
  Prédit: ' possible'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' possible' → logprob: -0.4198160469532013
    2. 'possible' → logprob: -1.919816017150879
    3. ' divisible' → logprob: -2.544816017150879
    4. ' une' → logprob: -4.294816017150879
    5. 'div' → logprob: -4.419816017150879
    6. ' ' → logprob: -4.419816017150879
    7. ' un' → logprob: -4.544816017150879
    8. ' bon' → logprob: -5.919816017150879
    9. 'u' → logprob: -5.919816017150879
    10. ' cop' → logprob: -6.107316017150879

Token 91: 'bon' (ID: 6865)
  Prédit: 'possible'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'possible' → logprob: -1.6853227615356445
    2. 'p' → logprob: -2.1853227615356445
    3. 'u' → logprob: -2.1853227615356445
    4. 'v' → logprob: -2.9353227615356445
    5. 'g' → logprob: -3.0603227615356445
    6. ''' → logprob: -3.3103227615356445
    7. 'un' → logprob: -3.6853227615356445
    8. 'l' → logprob: -3.7478227615356445
    9. 'poss' → logprob: -3.7478227615356445
    10. 'a' → logprob: -3.7478227615356445

Token 92: ''' (ID: 6)
  Prédit: '''
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ''' → logprob: -0.13189053535461426
    2. ' '' → logprob: -2.6318905353546143
    3. ')' → logprob: -3.3818905353546143
    4. ')'' → logprob: -4.381890296936035
    5. ' )' → logprob: -6.256890296936035
    6. 'a' → logprob: -8.006890296936035
    7. 'e' → logprob: -8.131890296936035
    8. 'def' → logprob: -8.131890296936035
    9. '')' → logprob: -8.256890296936035
    10. ' ' → logprob: -8.506890296936035

Token 93: ' ou' (ID: 2031)
  Prédit: ':'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ':' → logprob: -0.08903773128986359
    2. '   ' → logprob: -2.7140376567840576
    3. ' :' → logprob: -4.214037895202637
    4. ',' → logprob: -6.964037895202637
    5. '):' → logprob: -6.964037895202637
    6. '<|end|>' → logprob: -7.214037895202637
    7. ' ' → logprob: -7.339037895202637
    8. ')' → logprob: -8.589037895202637
    9. ':return' → logprob: -8.964037895202637
    10. '  ' → logprob: -9.214037895202637

Token 94: ' pas' (ID: 2173)
  Prédit: '''
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ''' → logprob: -1.206640601158142
    2. ' pas' → logprob: -1.331640601158142
    3. 'pas' → logprob: -1.456640601158142
    4. ' not' → logprob: -2.5816407203674316
    5. 'not' → logprob: -3.3316407203674316
    6. ' '' → logprob: -3.5816407203674316
    7. ' ' → logprob: -3.7066407203674316
    8. 'non' → logprob: -4.331640720367432
    9. ' non' → logprob: -5.206640720367432
    10. ''n' → logprob: -5.456640720367432

Token 95: '
' (ID: 198)
  Prédit: ':'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ':' → logprob: -0.4945651590824127
    2. '   ' → logprob: -0.9945651292800903
    3. '<|end|>' → logprob: -4.494565010070801
    4. ' :' → logprob: -6.244565010070801
    5. '):' → logprob: -6.369565010070801
    6. ')' → logprob: -6.619565010070801
    7. ',' → logprob: -7.119565010070801
    8. ' ' → logprob: -7.244565010070801
    9. '
' → logprob: -7.369565010070801
    10. '       ' → logprob: -7.744565010070801

Token 96: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.000627610192168504
    2. '
' → logprob: -8.625627517700195
    3. '    
' → logprob: -8.625627517700195
    4. '<|end|>' → logprob: -8.875627517700195
    5. '       ' → logprob: -9.625627517700195
    6. ':' → logprob: -11.375627517700195
    7. ' return' → logprob: -11.500627517700195
    8. '<|end|>' → logprob: -11.750627517700195
    9. ',' → logprob: -12.000627517700195
    10. '	return' → logprob: -12.000627517700195

Token 97: ' #' (ID: 1069)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.022563889622688293
    2. ' return' → logprob: -4.772563934326172
    3. ' if' → logprob: -4.772563934326172
    4. 'return' → logprob: -6.147563934326172
    5. 'if' → logprob: -6.772563934326172
    6. 'g' → logprob: -7.397563934326172
    7. '    ' → logprob: -7.772563934326172
    8. ' gcd' → logprob: -8.397563934326172
    9. ' while' → logprob: -8.522563934326172
    10. '    
' → logprob: -8.897563934326172

Token 98: ' alors' (ID: 17971)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.20625168085098267
    2. ' if' → logprob: -2.456251621246338
    3. ' return' → logprob: -2.831251621246338
    4. 'return' → logprob: -4.081251621246338
    5. 'if' → logprob: -4.456251621246338
    6. 'a' → logprob: -6.206251621246338
    7. ' ' → logprob: -6.331251621246338
    8. ' a' → logprob: -6.456251621246338
    9. ' gcd' → logprob: -6.456251621246338
    10. '    ' → logprob: -6.831251621246338

Token 99: ' b' (ID: 287)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.032181937247514725
    2. ' if' → logprob: -3.657181978225708
    3. ' return' → logprob: -6.532181739807129
    4. 'if' → logprob: -6.657181739807129
    5. ' gcd' → logprob: -7.532181739807129
    6. 'return' → logprob: -7.657181739807129
    7. ' a' → logprob: -7.782181739807129
    8. '    ' → logprob: -7.907181739807129
    9. 'a' → logprob: -8.032181739807129
    10. 'g' → logprob: -8.532181739807129

Token 100: ' plus' (ID: 2932)
  Prédit: ' %'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' %' → logprob: -0.8498903512954712
    2. '*' → logprob: -1.9748903512954712
    3. ' *' → logprob: -2.0998902320861816
    4. '%' → logprob: -2.0998902320861816
    5. ' ==' → logprob: -2.3498902320861816
    6. '==' → logprob: -3.3498902320861816
    7. ' <=' → logprob: -4.349890232086182
    8. ' >' → logprob: -4.849890232086182
    9. ' !=' → logprob: -5.224890232086182
    10. ' >=' → logprob: -5.349890232086182

Token 101: ' grand' (ID: 6363)
  Prédit: 'grand'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'grand' → logprob: -0.7748227119445801
    2. ' grand' → logprob: -1.52482271194458
    3. '=' → logprob: -3.14982271194458
    4. '1' → logprob: -3.14982271194458
    5. 'd' → logprob: -3.27482271194458
    6. 'c' → logprob: -3.27482271194458
    7. ' c' → logprob: -3.52482271194458
    8. 'a' → logprob: -3.52482271194458
    9. 'ieurs' → logprob: -4.14982271194458
    10. ' ' → logprob: -4.39982271194458

Token 102: ' que' (ID: 661)
  Prédit: ' >'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' >' → logprob: -0.13751254975795746
    2. ' >=' → logprob: -2.762512445449829
    3. ' <=' → logprob: -3.012512445449829
    4. '>' → logprob: -4.762512683868408
    5. ' ' → logprob: -5.762512683868408
    6. ' <' → logprob: -6.887512683868408
    7. '>=' → logprob: -6.887512683868408
    8. '   ' → logprob: -7.387512683868408
    9. '=' → logprob: -7.887512683868408
    10. '<=' → logprob: -8.01251220703125

Token 103: ' a' (ID: 261)
  Prédit: 'a'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'a' → logprob: -0.06500612199306488
    2. ' a' → logprob: -2.9400060176849365
    3. 'd' → logprob: -4.815006256103516
    4. ' d' → logprob: -6.815006256103516
    5. ' ' → logprob: -7.940006256103516
    6. 'c' → logprob: -8.065006256103516
    7. ' c' → logprob: -9.315006256103516
    8. '   ' → logprob: -10.315006256103516
    9. '  ' → logprob: -10.690006256103516
    10. '	a' → logprob: -11.690006256103516

Token 104: ',' (ID: 11)
  Prédit: ' and'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' and' → logprob: -0.9201620221138
    2. ' >' → logprob: -0.9201620221138
    3. '   ' → logprob: -3.0451619625091553
    4. ' <=' → logprob: -3.1701619625091553
    5. '>' → logprob: -3.4201619625091553
    6. ',' → logprob: -3.9201619625091553
    7. ' >=' → logprob: -4.045162200927734
    8. ' or' → logprob: -4.545162200927734
    9. ':' → logprob: -4.670162200927734
    10. ' ' → logprob: -5.295162200927734

Token 105: ' ou' (ID: 2031)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.3674781322479248
    2. ' if' → logprob: -1.6174781322479248
    3. ' c' → logprob: -3.492478132247925
    4. ' return' → logprob: -3.617478132247925
    5. '    ' → logprob: -4.617478370666504
    6. ' ' → logprob: -4.617478370666504
    7. ' d' → logprob: -4.867478370666504
    8. ' or' → logprob: -5.492478370666504
    9. 'd' → logprob: -5.617478370666504
    10. ' and' → logprob: -5.617478370666504

Token 106: ' d' (ID: 272)
  Prédit: ' c'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' c' → logprob: -0.5458454489707947
    2. ' d' → logprob: -0.9208454489707947
    3. ' b' → logprob: -4.9208455085754395
    4. 'd' → logprob: -5.0458455085754395
    5. 'c' → logprob: -5.6708455085754395
    6. ' a' → logprob: -5.7958455085754395
    7. ' not' → logprob: -7.0458455085754395
    8. 'a' → logprob: -7.4208455085754395
    9. ' (' → logprob: -8.795845031738281
    10. '  ' → logprob: -9.045845031738281

Token 107: ' plus' (ID: 2932)
  Prédit: ' >'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' >' → logprob: -0.24855807423591614
    2. '>' → logprob: -1.6235580444335938
    3. ' >=' → logprob: -4.623558044433594
    4. ' <=' → logprob: -5.623558044433594
    5. '>=' → logprob: -5.748558044433594
    6. ' <' → logprob: -6.248558044433594
    7. ' plus' → logprob: -6.748558044433594
    8. '<=' → logprob: -7.248558044433594
    9. '   ' → logprob: -7.498558044433594
    10. ',' → logprob: -7.873558044433594

Token 108: ' petit' (ID: 20577)
  Prédit: 'grand'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'grand' → logprob: -0.01862979307770729
    2. ' grand' → logprob: -4.018630027770996
    3. 'gr' → logprob: -7.893630027770996
    4. 'pet' → logprob: -9.768630027770996
    5. ' petit' → logprob: -10.518630027770996
    6. '```' → logprob: -12.268630027770996
    7. 'gran' → logprob: -12.768630027770996
    8. ' grande' → logprob: -13.268630027770996
    9. 'b' → logprob: -13.518630027770996
    10. ' ' → logprob: -13.768630027770996

Token 109: ',' (ID: 11)
  Prédit: ' or'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' or' → logprob: -0.3123036324977875
    2. '=' → logprob: -2.0623035430908203
    3. '<|end|>' → logprob: -2.5623035430908203
    4. ' =' → logprob: -4.18730354309082
    5. ',' → logprob: -4.56230354309082
    6. ' ou' → logprob: -4.93730354309082
    7. ' than' → logprob: -5.06230354309082
    8. ' ' → logprob: -5.43730354309082
    9. 'or' → logprob: -5.56230354309082
    10. '?' → logprob: -5.68730354309082

Token 110: ' c' (ID: 274)
  Prédit: ' return'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' return' → logprob: -0.1607528030872345
    2. '   ' → logprob: -2.660752773284912
    3. ' or' → logprob: -3.535752773284912
    4. '    ' → logprob: -4.285752773284912
    5. 'return' → logprob: -4.285752773284912
    6. ' if' → logprob: -4.910752773284912
    7. ' ou' → logprob: -5.660752773284912
    8. ' ' → logprob: -5.910752773284912
    9. 'def' → logprob: -6.160752773284912
    10. '  ' → logprob: -7.035752773284912

Token 111: ''est' (ID: 6616)
  Prédit: ','
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ',' → logprob: -0.7924447059631348
    2. ' or' → logprob: -1.0424447059631348
    3. ' >' → logprob: -2.9174447059631348
    4. '>' → logprob: -3.6674447059631348
    5. '   ' → logprob: -4.042444705963135
    6. ' ==' → logprob: -4.292444705963135
    7. ' >=' → logprob: -4.542444705963135
    8. '<|end|>' → logprob: -4.542444705963135
    9. '==' → logprob: -4.792444705963135
    10. ':' → logprob: -4.917444705963135

Token 112: ' KO' (ID: 60856)
  Prédit: ' False'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' False' → logprob: -0.800372302532196
    2. ' True' → logprob: -1.3003723621368408
    3. 'False' → logprob: -1.6753723621368408
    4. ' pas' → logprob: -3.425372362136841
    5. 'True' → logprob: -3.800372362136841
    6. ' not' → logprob: -4.675372123718262
    7. ' mauvais' → logprob: -5.175372123718262
    8. ' vrai' → logprob: -5.425372123718262
    9. 'not' → logprob: -5.800372123718262
    10. ' non' → logprob: -6.175372123718262

Token 113: '
' (ID: 198)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.028365137055516243
    2. '<|end|>' → logprob: -3.653365135192871
    3. '<|end|>' → logprob: -7.778365135192871
    4. ' if' → logprob: -8.153365135192871
    5. ' or' → logprob: -8.153365135192871
    6. ',' → logprob: -8.653365135192871
    7. ' ' → logprob: -8.653365135192871
    8. '  ' → logprob: -8.903365135192871
    9. '    ' → logprob: -9.028365135192871
    10. '    
' → logprob: -9.153365135192871

Token 114: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.043859466910362244
    2. '<|end|>' → logprob: -3.1688594818115234
    3. ' if' → logprob: -8.168859481811523
    4. ' ' → logprob: -9.043859481811523
    5. '<|end|>' → logprob: -9.293859481811523
    6. '    ' → logprob: -9.293859481811523
    7. '
' → logprob: -9.543859481811523
    8. '    
' → logprob: -9.668859481811523
    9. '  ' → logprob: -10.043859481811523
    10. ',' → logprob: -10.543859481811523

Token 115: ' if' (ID: 538)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.0041618566028773785
    2. ' if' → logprob: -5.629161834716797
    3. 'if' (adapté à ' if') → logprob: -7.629161834716797
    4. '
' → logprob: -10.379161834716797
    5. '    
' → logprob: -10.879161834716797
    6. '<|end|>' → logprob: -11.504161834716797
    7. '	if' → logprob: -12.254161834716797
    8. '       ' → logprob: -13.129161834716797
    9. '  ' → logprob: -13.629161834716797
    10. '    ' → logprob: -13.629161834716797

Token 116: ' b' (ID: 287)
  Prédit: ' b'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' b' → logprob: -0.0160920862108469
    2. 'b' → logprob: -4.141092300415039
    3. ' (' → logprob: -10.766092300415039
    4. ' ' → logprob: -11.266092300415039
    5. '(b' → logprob: -11.266092300415039
    6. '   ' → logprob: -12.141092300415039
    7. ' a' → logprob: -13.141092300415039
    8. ' ' → logprob: -13.891092300415039
    9. '	b' → logprob: -14.016092300415039
    10. '(' → logprob: -14.141092300415039

Token 117: ' >' (ID: 1424)
  Prédit: ' >'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' >' → logprob: -0.10783897340297699
    2. '>' → logprob: -2.3578388690948486
    3. ' <=' → logprob: -5.232839107513428
    4. ' <' → logprob: -6.357839107513428
    5. '<=' → logprob: -8.23283863067627
    6. '<' → logprob: -9.35783863067627
    7. ' >=' → logprob: -9.48283863067627
    8. ' ' → logprob: -10.10783863067627
    9. '<|end|>' → logprob: -10.85783863067627
    10. '   ' → logprob: -11.10783863067627

Token 118: ' a' (ID: 261)
  Prédit: 'a'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'a' → logprob: -0.2519494891166687
    2. ' a' → logprob: -1.5019495487213135
    3. '	a' → logprob: -11.251949310302734
    4. ' ' → logprob: -12.501949310302734
    5. '   ' → logprob: -12.751949310302734
    6. '>a' → logprob: -15.126949310302734
    7. '  ' → logprob: -15.501949310302734
    8. '    ' → logprob: -15.751949310302734
    9. '1' → logprob: -16.751949310302734
    10. ')a' → logprob: -16.876949310302734

Token 119: ' or' (ID: 503)
  Prédit: ' or'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' or' → logprob: -0.004131711088120937
    2. ':' → logprob: -5.62913179397583
    3. '   ' → logprob: -7.87913179397583
    4. ' :' → logprob: -10.254131317138672
    5. ' and' → logprob: -10.254131317138672
    6. ' ' → logprob: -10.504131317138672
    7. 'or' → logprob: -11.129131317138672
    8. ':return' → logprob: -11.629131317138672
    9. '       ' → logprob: -11.879131317138672
    10. '    ' → logprob: -12.004131317138672

Token 120: ' d' (ID: 272)
  Prédit: ' d'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' d' → logprob: -0.0336923822760582
    2. 'd' → logprob: -3.4086923599243164
    3. '   ' → logprob: -10.283692359924316
    4. '	d' → logprob: -12.783692359924316
    5. ' c' → logprob: -12.783692359924316
    6. 'c' → logprob: -13.158692359924316
    7. ' ' → logprob: -13.283692359924316
    8. '    ' → logprob: -14.033692359924316
    9. '  ' → logprob: -14.408692359924316
    10. '```' → logprob: -14.783692359924316

Token 121: ' <' (ID: 464)
  Prédit: ' >'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' >' → logprob: -0.3952864110469818
    2. ' <' → logprob: -1.1452864408493042
    3. '>' → logprob: -4.895286560058594
    4. '<' → logprob: -7.145286560058594
    5. ' >=' → logprob: -9.520286560058594
    6. ' ' → logprob: -10.770286560058594
    7. '<|end|>' → logprob: -12.395286560058594
    8. ' <=' → logprob: -12.770286560058594
    9. '>=' → logprob: -13.270286560058594
    10. '   ' → logprob: -13.520286560058594

Token 122: ' b' (ID: 287)
  Prédit: 'c'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'c' → logprob: -0.012966567650437355
    2. ' c' → logprob: -4.387966632843018
    3. '<|end|>' → logprob: -8.13796615600586
    4. '	c' → logprob: -9.51296615600586
    5. ')c' → logprob: -10.01296615600586
    6. '   ' → logprob: -10.88796615600586
    7. ' ' → logprob: -11.63796615600586
    8. '       ' → logprob: -12.51296615600586
    9. '0' → logprob: -12.76296615600586
    10. '=c' → logprob: -13.38796615600586

Token 123: ':
' (ID: 734)
  Prédit: ':'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ':' → logprob: -0.043488144874572754
    2. ':
' → logprob: -3.168488025665283
    3. ':return' → logprob: -7.918488025665283
    4. '   ' → logprob: -9.418488502502441
    5. '):
' → logprob: -11.418488502502441
    6. ' or' → logprob: -11.668488502502441
    7. ' :' → logprob: -11.668488502502441
    8. ':
' → logprob: -12.793488502502441
    9. '):' → logprob: -12.793488502502441
    10. ' :
' → logprob: -13.043488502502441

Token 124: '       ' (ID: 309)
  Prédit: '       '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '       ' → logprob: -0.0011599812423810363
    2. ':' → logprob: -7.751160144805908
    3. '   ' → logprob: -8.12615966796875
    4. ' return' → logprob: -8.37615966796875
    5. '
' → logprob: -9.37615966796875
    6. ':
' → logprob: -10.25115966796875
    7. ':return' → logprob: -10.75115966796875
    8. '	' → logprob: -10.87615966796875
    9. 'return' → logprob: -11.25115966796875
    10. '	return' → logprob: -11.62615966796875

Token 125: ' return' (ID: 622)
  Prédit: '       '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '       ' → logprob: -0.32609033584594727
    2. 'return' (adapté à ' return') → logprob: -1.4510903358459473
    3. ' return' → logprob: -3.2010903358459473
    4. '   ' → logprob: -5.951090335845947
    5. '
' → logprob: -9.326089859008789
    6. '      ' → logprob: -9.451089859008789
    7. '           ' → logprob: -9.451089859008789
    8. ' ' → logprob: -9.576089859008789
    9. '	return' → logprob: -9.576089859008789
    10. '     ' → logprob: -9.701089859008789

Token 126: ' False' (ID: 7983)
  Prédit: ' False'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' False' → logprob: -0.28144699335098267
    2. 'False' → logprob: -1.406446933746338
    3. ' True' → logprob: -8.531447410583496
    4. ' None' → logprob: -9.906447410583496
    5. 'True' → logprob: -10.656447410583496
    6. 'None' → logprob: -11.906447410583496
    7. '   ' → logprob: -12.031447410583496
    8. '0' → logprob: -12.406447410583496
    9. ' ' → logprob: -12.406447410583496
    10. '(False' → logprob: -12.531447410583496

Token 127: '
' (ID: 198)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.0017258725129067898
    2. '<|end|>' → logprob: -7.251725673675537
    3. '    
' → logprob: -7.501725673675537
    4. '
' → logprob: -8.126726150512695
    5. '  
' → logprob: -10.251726150512695
    6. '\n' → logprob: -10.251726150512695
    7. ' ' → logprob: -10.876726150512695
    8. '       ' → logprob: -11.376726150512695
    9. '  ' → logprob: -11.376726150512695
    10. '<|end|>' → logprob: -11.501726150512695

Token 128: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.0076817539520561695
    2. '    
' → logprob: -5.382681846618652
    3. '<|end|>' → logprob: -6.632681846618652
    4. '
' → logprob: -7.007681846618652
    5. '  
' → logprob: -8.632681846618652
    6. '    ' → logprob: -9.257681846618652
    7. ' 
' → logprob: -9.257681846618652
    8. ' ' → logprob: -9.507681846618652
    9. ',' → logprob: -9.757681846618652
    10. '       ' → logprob: -9.882681846618652

Token 129: ' g' (ID: 329)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.00043925188947468996
    2. 'return' → logprob: -8.375439643859863
    3. '    
' → logprob: -9.500439643859863
    4. ' return' → logprob: -9.750439643859863
    5. '       ' → logprob: -10.625439643859863
    6. ' if' → logprob: -11.250439643859863
    7. 'if' → logprob: -11.625439643859863
    8. '	return' → logprob: -12.000439643859863
    9. '
' → logprob: -12.250439643859863
    10. '  ' → logprob: -12.750439643859863

Token 130: ' =' (ID: 314)
  Prédit: ' ='
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' =' → logprob: -1.0578265190124512
    2. '=' → logprob: -1.1828265190124512
    3. '=g' → logprob: -1.4328265190124512
    4. 'cd' → logprob: -2.932826519012451
    5. '<|end|>' → logprob: -4.057826519012451
    6. 'g' → logprob: -4.182826519012451
    7. 't' → logprob: -5.182826519012451
    8. ',' → logprob: -5.557826519012451
    9. 'return' → logprob: -5.932826519012451
    10. '=int' → logprob: -6.682826519012451

Token 131: ' pg' (ID: 32259)
  Prédit: 'pg'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'pg' → logprob: -0.0040987045504152775
    2. ' pg' → logprob: -5.504098892211914
    3. '(pg' → logprob: -11.879098892211914
    4. 'b' → logprob: -12.504098892211914
    5. 'g' → logprob: -13.129098892211914
    6. 'a' → logprob: -13.254098892211914
    7. '   ' → logprob: -13.754098892211914
    8. 'pb' → logprob: -14.129098892211914
    9. '_pg' → logprob: -14.129098892211914
    10. ' ' → logprob: -14.504098892211914

Token 132: 'cd' (ID: 8301)
  Prédit: 'cd'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'cd' → logprob: -2.935296834039036e-06
    2. 'c' → logprob: -13.62500286102295
    3. 'cod' → logprob: -14.50000286102295
    4. '   ' → logprob: -14.87500286102295
    5. 'g' → logprob: -15.12500286102295
    6. '```' → logprob: -16.500003814697266
    7. '=' → logprob: -16.625003814697266
    8. 'cdn' → logprob: -16.750003814697266
    9. 'pd' → logprob: -16.875003814697266
    10. '  ' → logprob: -17.375003814697266

Token 133: '(b' (ID: 3229)
  Prédit: '(a'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(a' → logprob: -0.20702558755874634
    2. '(c' → logprob: -2.3320255279541016
    3. '(b' → logprob: -2.4570255279541016
    4. '(' → logprob: -5.957025527954102
    5. '(d' → logprob: -6.707025527954102
    6. '<|end|>' → logprob: -8.332025527954102
    7. '(g' → logprob: -9.332025527954102
    8. '(abs' → logprob: -11.082025527954102
    9. 'a' → logprob: -11.207025527954102
    10. '(s' → logprob: -11.582025527954102

Token 134: ',' (ID: 11)
  Prédit: ','
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ',' → logprob: -0.003798892255872488
    2. ',a' → logprob: -6.253798961639404
    3. ',d' → logprob: -6.878798961639404
    4. 'd' → logprob: -8.378798484802246
    5. ' ,' → logprob: -8.378798484802246
    6. ',c' → logprob: -8.753798484802246
    7. 'a' → logprob: -9.003798484802246
    8. ' -' → logprob: -10.628798484802246
    9. '   ' → logprob: -10.628798484802246
    10. 'c' → logprob: -11.378798484802246

Token 135: ' d' (ID: 272)
  Prédit: 'd'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'd' → logprob: -0.04793239384889603
    2. 'c' → logprob: -3.1729323863983154
    3. ' d' → logprob: -5.5479326248168945
    4. 'a' → logprob: -7.5479326248168945
    5. ' c' → logprob: -8.422932624816895
    6. '   ' → logprob: -8.547932624816895
    7. ' ' → logprob: -10.422932624816895
    8. '       ' → logprob: -10.797932624816895
    9. '    ' → logprob: -11.922932624816895
    10. '  ' → logprob: -12.047932624816895

Token 136: ')
' (ID: 446)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')' → logprob: -0.06995955854654312
    2. ')
' → logprob: -2.6949596405029297
    3. ')
' → logprob: -11.44495964050293
    4. '   ' → logprob: -11.94495964050293
    5. ')

' → logprob: -13.19495964050293
    6. ' )' → logprob: -13.19495964050293
    7. ' )
' → logprob: -14.31995964050293
    8. '))' → logprob: -15.19495964050293
    9. ')#' → logprob: -15.19495964050293
    10. 'def' → logprob: -15.69495964050293

Token 137: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.016961153596639633
    2. '
' → logprob: -5.266961097717285
    3. '    
' → logprob: -5.516961097717285
    4. ' if' → logprob: -6.266961097717285
    5. '  
' → logprob: -6.516961097717285
    6. 'if' → logprob: -6.641961097717285
    7. '   
' → logprob: -7.016961097717285
    8. '<|end|>' → logprob: -7.641961097717285
    9. 'g' → logprob: -8.266961097717285
    10. '  ' → logprob: -8.641961097717285

Token 138: ' #' (ID: 1069)
  Prédit: 'if'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'if' → logprob: -0.49978742003440857
    2. 'b' → logprob: -1.124787449836731
    3. 'return' → logprob: -2.9997873306274414
    4. 'a' → logprob: -4.749787330627441
    5. '   ' → logprob: -5.749787330627441
    6. ' if' → logprob: -5.999787330627441
    7. 'c' → logprob: -7.249787330627441
    8. 'u' → logprob: -7.249787330627441
    9. ' return' → logprob: -7.749787330627441
    10. 'g' → logprob: -7.749787330627441

Token 139: ' ca' (ID: 3268)
  Prédit: ' if'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' if' → logprob: -0.7943242192268372
    2. 'if' → logprob: -1.4193241596221924
    3. ' return' → logprob: -1.9193241596221924
    4. 'return' → logprob: -2.1693241596221924
    5. '   ' → logprob: -3.4193241596221924
    6. ' (' → logprob: -6.2943243980407715
    7. ' g' → logprob: -6.4193243980407715
    8. 'b' → logprob: -6.4193243980407715
    9. ' b' → logprob: -6.5443243980407715
    10. '#' → logprob: -7.0443243980407715

Token 140: ' c' (ID: 274)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.2620123028755188
    2. ' ==' → logprob: -2.387012243270874
    3. ' if' → logprob: -3.137012243270874
    4. ' =' → logprob: -3.762012243270874
    5. ' return' → logprob: -4.262012481689453
    6. '==' → logprob: -4.512012481689453
    7. ',' → logprob: -4.762012481689453
    8. '=' → logprob: -4.887012481689453
    9. 'if' → logprob: -4.887012481689453
    10. ' #' → logprob: -5.512012481689453

Token 141: ''est' (ID: 6616)
  Prédit: ''est'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ''est' → logprob: -1.7178759574890137
    2. 'om' → logprob: -2.0928759574890137
    3. 'ont' → logprob: -2.0928759574890137
    4. 'e' → logprob: -2.2178759574890137
    5. '#' → logprob: -2.3428759574890137
    6. 'on' → logprob: -2.7178759574890137
    7. '   ' → logprob: -3.0928759574890137
    8. '=' → logprob: -3.3428759574890137
    9. 'omme' → logprob: -3.4678759574890137
    10. ' if' → logprob: -3.4678759574890137

Token 142: ' pour' (ID: 1930)
  Prédit: ' ('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' (' → logprob: -1.6551231145858765
    2. ' True' → logprob: -1.7801231145858765
    3. ' d' → logprob: -2.030123233795166
    4. ' b' → logprob: -2.530123233795166
    5. '   ' → logprob: -2.530123233795166
    6. 'd' → logprob: -2.530123233795166
    7. 'b' → logprob: -3.030123233795166
    8. '(' → logprob: -3.280123233795166
    9. ' not' → logprob: -3.405123233795166
    10. ' False' → logprob: -3.530123233795166

Token 143: ' trouver' (ID: 23195)
  Prédit: ' vérifier'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' vérifier' → logprob: -0.38870927691459656
    2. 'v' → logprob: -3.013709306716919
    3. ' s' → logprob: -3.388709306716919
    4. ' la' → logprob: -3.888709306716919
    5. ' verifier' → logprob: -4.01370906829834
    6. ' v' → logprob: -4.01370906829834
    7. ' return' → logprob: -4.26370906829834
    8. '   ' → logprob: -4.38870906829834
    9. ' b' → logprob: -4.51370906829834
    10. ' if' → logprob: -4.51370906829834

Token 144: ' (?)' (ID: 132177)
  Prédit: ' if'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' if' → logprob: -0.42602023482322693
    2. 'if' → logprob: -2.3010201454162598
    3. 'b' → logprob: -3.0510201454162598
    4. '   ' → logprob: -3.4260201454162598
    5. ' b' → logprob: -3.4260201454162598
    6. 'le' → logprob: -3.5510201454162598
    7. ' le' → logprob: -3.8010201454162598
    8. 'd' → logprob: -3.9260201454162598
    9. ' (' → logprob: -4.67602014541626
    10. ' True' → logprob: -4.92602014541626

Token 145: ' un' (ID: 537)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.5212641358375549
    2. ' if' → logprob: -1.6462640762329102
    3. ' n' → logprob: -2.89626407623291
    4. ' k' → logprob: -3.39626407623291
    5. ' return' → logprob: -3.39626407623291
    6. 'n' → logprob: -4.52126407623291
    7. 'if' → logprob: -4.77126407623291
    8. ' l' → logprob: -4.89626407623291
    9. 'return' → logprob: -5.02126407623291
    10. 'def' → logprob: -5.39626407623291

Token 146: ' k' (ID: 372)
  Prédit: ' multiple'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' multiple' → logprob: -0.6718441843986511
    2. 'multiple' → logprob: -2.046844244003296
    3. 'e' → logprob: -3.421844244003296
    4. 'multip' → logprob: -3.796844244003296
    5. 'div' → logprob: -3.921844244003296
    6. ' ' → logprob: -4.171844005584717
    7. 'm' → logprob: -4.296844005584717
    8. '   ' → logprob: -4.359344005584717
    9. ' common' → logprob: -4.421844005584717
    10. 'den' → logprob: -4.484344005584717

Token 147: '...' (ID: 1008)
  Prédit: ' ='
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' =' → logprob: -0.04887041822075844
    2. '=' → logprob: -3.548870325088501
    3. '   ' → logprob: -4.79887056350708
    4. ',' → logprob: -5.04887056350708
    5. '<|end|>' → logprob: -6.79887056350708
    6. 'k' → logprob: -7.54887056350708
    7. '<|end|>' → logprob: -7.54887056350708
    8. ')' → logprob: -7.92387056350708
    9. ' k' → logprob: -8.423870086669922
    10. '    ' → logprob: -8.548870086669922

Token 148: ' pas' (ID: 2173)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.061071716248989105
    2. ' k' → logprob: -4.436071872711182
    3. '<|end|>' → logprob: -4.561071872711182
    4. 'k' → logprob: -4.811071872711182
    5. ',' → logprob: -4.936071872711182
    6. ' if' → logprob: -5.311071872711182
    7. '    
' → logprob: -5.436071872711182
    8. '<|end|>' → logprob: -6.436071872711182
    9. '...' → logprob: -6.561071872711182
    10. '
' → logprob: -6.811071872711182

Token 149: ' trop' (ID: 14765)
  Prédit: 'g'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'g' → logprob: -1.7041912078857422
    2. '   ' → logprob: -1.9541912078857422
    3. 'return' → logprob: -2.454191207885742
    4. ' return' → logprob: -2.579191207885742
    5. '#' → logprob: -3.204191207885742
    6. 'def' → logprob: -3.204191207885742
    7. ' de' → logprob: -3.329191207885742
    8. ' k' → logprob: -3.454191207885742
    9. ' g' → logprob: -3.454191207885742
    10. 'de' → logprob: -3.579191207885742

Token 150: ' clair' (ID: 71396)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.7258478403091431
    2. ' if' → logprob: -1.475847840309143
    3. ' ' → logprob: -3.3508477210998535
    4. '    ' → logprob: -3.4758477210998535
    5. ' =' → logprob: -3.4758477210998535
    6. ' k' → logprob: -3.4758477210998535
    7. '  ' → logprob: -3.9758477210998535
    8. 'def' → logprob: -4.2258477210998535
    9. ' for' → logprob: -4.3508477210998535
    10. '=' → logprob: -4.4758477210998535

Token 151: ' mais' (ID: 2899)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.06759951263666153
    2. ' k' → logprob: -3.1925995349884033
    3. 'k' → logprob: -3.9425995349884033
    4. ',' → logprob: -6.567599296569824
    5. ' if' → logprob: -6.817599296569824
    6. ' for' → logprob: -7.692599296569824
    7. '<|end|>' → logprob: -7.942599296569824
    8. '    
' → logprob: -8.317599296569824
    9. ',k' → logprob: -8.692599296569824
    10. ' return' → logprob: -8.817599296569824

Token 152: ' ok' (ID: 4763)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.2915186583995819
    2. ' k' → logprob: -2.0415186882019043
    3. ' return' → logprob: -2.7915186882019043
    4. ' if' → logprob: -3.6665186882019043
    5. ' g' → logprob: -4.666518688201904
    6. 'k' → logprob: -4.791518688201904
    7. 'return' → logprob: -4.916518688201904
    8. '    ' → logprob: -5.791518688201904
    9. 'g' → logprob: -6.041518688201904
    10. 'if' → logprob: -6.916518688201904

Token 153: '
' (ID: 198)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.004207563120871782
    2. ' k' → logprob: -6.879207611083984
    3. 'k' → logprob: -7.129207611083984
    4. '<|end|>' → logprob: -7.254207611083984
    5. '    
' → logprob: -7.754207611083984
    6. ' if' → logprob: -8.504207611083984
    7. ',' → logprob: -8.754207611083984
    8. '  ' → logprob: -9.129207611083984
    9. '  
' → logprob: -9.254207611083984
    10. '    ' → logprob: -9.504207611083984

Token 154: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.38921061158180237
    2. ' k' → logprob: -1.26421058177948
    3. '<|end|>' → logprob: -4.2642107009887695
    4. 'k' → logprob: -4.7642107009887695
    5. ' if' → logprob: -5.0142107009887695
    6. '    ' → logprob: -5.6392107009887695
    7. '       ' → logprob: -7.0142107009887695
    8. '    
' → logprob: -7.1392107009887695
    9. '```' → logprob: -7.1392107009887695
    10. ' g' → logprob: -7.3892107009887695

Token 155: ' k' (ID: 372)
  Prédit: ' k'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' k' → logprob: -0.14623166620731354
    2. 'k' (adapté à ' k') → logprob: -2.0212316513061523
    3. ' if' → logprob: -6.396231651306152
    4. '   ' → logprob: -6.521231651306152
    5. ' n' → logprob: -9.521231651306152
    6. 'if' → logprob: -10.021231651306152
    7. 'n' → logprob: -10.021231651306152
    8. ' for' → logprob: -10.396231651306152
    9. ' x' → logprob: -10.521231651306152
    10. ' return' → logprob: -10.521231651306152

Token 156: ' =' (ID: 314)
  Prédit: ' ='
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' =' → logprob: -0.048588961362838745
    2. '=' → logprob: -3.048588991165161
    3. ',' → logprob: -14.423588752746582
    4. ' =(' → logprob: -14.548588752746582
    5. ' ' → logprob: -15.173588752746582
    6. '=int' → logprob: -15.548588752746582
    7. ' =
' → logprob: -17.0485897064209
    8. '=k' → logprob: -17.0485897064209
    9. '=(' → logprob: -17.4235897064209
    10. '＝' → logprob: -17.4235897064209

Token 157: ' (' (ID: 350)
  Prédit: 'b'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'b' → logprob: -0.472715824842453
    2. '(b' → logprob: -1.4727158546447754
    3. ' b' → logprob: -2.8477158546447754
    4. ' (' → logprob: -3.5977158546447754
    5. '(a' → logprob: -3.7227158546447754
    6. 'a' → logprob: -3.9727158546447754
    7. '(d' → logprob: -5.347715854644775
    8. 'd' → logprob: -5.597715854644775
    9. ' min' → logprob: -5.972715854644775
    10. 'min' → logprob: -5.972715854644775

Token 158: 'a' (ID: 64)
  Prédit: 'b'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'b' → logprob: -0.43602460622787476
    2. 'a' → logprob: -1.0610246658325195
    3. 'c' → logprob: -5.5610246658325195
    4. 'd' → logprob: -5.9360246658325195
    5. ' b' → logprob: -8.31102466583252
    6. '(a' → logprob: -8.31102466583252
    7. '(b' → logprob: -9.31102466583252
    8. ' a' → logprob: -9.31102466583252
    9. '   ' → logprob: -9.68602466583252
    10. '(d' → logprob: -11.18602466583252

Token 159: ' -' (ID: 533)
  Prédit: '*'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '*' → logprob: -1.1589717864990234
    2. ' *' → logprob: -1.1589717864990234
    3. ' -' → logprob: -1.7839717864990234
    4. '-' → logprob: -2.2839717864990234
    5. '//' → logprob: -3.4089717864990234
    6. '*b' → logprob: -3.5339717864990234
    7. ' //' → logprob: -3.6589717864990234
    8. ' +' → logprob: -5.408971786499023
    9. '+' → logprob: -5.783971786499023
    10. '-b' → logprob: -6.658971786499023

Token 160: ' c' (ID: 274)
  Prédit: 'b'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'b' → logprob: -0.08325103670358658
    2. 'c' → logprob: -2.5832509994506836
    3. ' b' → logprob: -5.583250999450684
    4. ' c' → logprob: -7.458250999450684
    5. '   ' → logprob: -11.958250999450684
    6. '	b' → logprob: -13.083250999450684
    7. ' ' → logprob: -13.333250999450684
    8. 'a' → logprob: -13.708250999450684
    9. 'd' → logprob: -13.958250999450684
    10. '	c' → logprob: -14.708250999450684

Token 161: ' -' (ID: 533)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ')' → logprob: -0.002672330243512988
    2. '*' → logprob: -6.00267219543457
    3. '+' → logprob: -10.00267219543457
    4. ' )' → logprob: -10.37767219543457
    5. ' *' → logprob: -10.50267219543457
    6. ')*' → logprob: -10.62767219543457
    7. '*)' → logprob: -10.87767219543457
    8. ')//' → logprob: -11.25267219543457
    9. ' +' → logprob: -12.00267219543457
    10. '*g' → logprob: -12.00267219543457

Token 162: ' ' (ID: 220)
  Prédit: 'b'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'b' → logprob: -0.41893085837364197
    2. '1' → logprob: -1.5439308881759644
    3. 'd' → logprob: -2.668930768966675
    4. ' b' → logprob: -3.293930768966675
    5. ' ' → logprob: -4.918931007385254
    6. ' d' → logprob: -5.168931007385254
    7. '(b' → logprob: -5.918931007385254
    8. 'a' → logprob: -6.543931007385254
    9. ' (' → logprob: -6.668931007385254
    10. ')' → logprob: -6.918931007385254

Token 163: '1' (ID: 16)
  Prédit: 'b'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'b' → logprob: -0.12652188539505005
    2. 'd' → logprob: -2.8765218257904053
    3. '1' → logprob: -3.0015218257904053
    4. 'a' → logprob: -5.376522064208984
    5. '(b' → logprob: -5.876522064208984
    6. 'c' → logprob: -6.626522064208984
    7. 'g' → logprob: -7.126522064208984
    8. ' b' → logprob: -7.126522064208984
    9. '(d' → logprob: -7.876522064208984
    10. '(' → logprob: -7.876522064208984

Token 164: ')' (ID: 8)
  Prédit: ')'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')' → logprob: -0.0008359544444829226
    2. ')//' → logprob: -7.75083589553833
    3. ' )' → logprob: -8.375836372375488
    4. '+' → logprob: -8.875836372375488
    5. ' +' → logprob: -11.375836372375488
    6. '//' → logprob: -11.500836372375488
    7. '*' → logprob: -12.000836372375488
    8. ')
' → logprob: -13.250836372375488
    9. '-' → logprob: -13.625836372375488
    10. '   ' → logprob: -13.625836372375488

Token 165: ' //' (ID: 602)
  Prédit: '//'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '//' → logprob: -0.7274559736251831
    2. ' //' → logprob: -0.7274559736251831
    3. ')' → logprob: -4.352456092834473
    4. '#' → logprob: -5.102456092834473
    5. '*' → logprob: -5.102456092834473
    6. '+' → logprob: -5.977456092834473
    7. '
' → logprob: -6.227456092834473
    8. 'div' → logprob: -7.477456092834473
    9. ' *' → logprob: -7.477456092834473
    10. '%' → logprob: -7.852456092834473

Token 166: ' g' (ID: 329)
  Prédit: 'g'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'g' → logprob: -0.015641657635569572
    2. 'b' → logprob: -4.640641689300537
    3. '(g' → logprob: -5.765641689300537
    4. 'd' → logprob: -6.640641689300537
    5. '(b' → logprob: -7.515641689300537
    6. '(d' → logprob: -7.890641689300537
    7. '(' → logprob: -8.390641212463379
    8. ' g' → logprob: -8.765641212463379
    9. '((' → logprob: -9.515641212463379
    10. ' (' → logprob: -10.515641212463379

Token 167: '
' (ID: 198)
  Prédit: '+'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '+' → logprob: -0.7151298522949219
    2. '<|end|>' → logprob: -0.7151298522949219
    3. ' +' → logprob: -4.840129852294922
    4. '   ' → logprob: -5.215129852294922
    5. '<|end|>' → logprob: -5.590129852294922
    6. ')' → logprob: -6.340129852294922
    7. ' ' → logprob: -6.965129852294922
    8. '
' → logprob: -7.340129852294922
    9. '+
' → logprob: -7.590129852294922
    10. '  ' → logprob: -9.215129852294922

Token 168: '   ' (ID: 271)
  Prédit: ''
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False

Token 169: ' p' (ID: 275)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.7729893922805786
    2. ' if' → logprob: -1.1479893922805786
    3. 'if' → logprob: -2.147989273071289
    4. 'return' → logprob: -2.772989273071289
    5. ' return' → logprob: -3.272989273071289
    6. ')' → logprob: -6.772989273071289
    7. '<|end|>' → logprob: -7.272989273071289
    8. 'k' → logprob: -7.897989273071289
    9. '+' → logprob: -7.897989273071289
    10. ' k' → logprob: -8.272989273071289

Token 170: ' =' (ID: 314)
  Prédit: 'r'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'r' → logprob: -0.37850791215896606
    2. ' =' → logprob: -1.5035078525543213
    3. '=' → logprob: -3.5035078525543213
    4. 'g' → logprob: -3.6285078525543213
    5. 'if' → logprob: -4.6285080909729
    6. 'd' → logprob: -5.5035080909729
    7. 'k' → logprob: -5.7535080909729
    8. 'b' → logprob: -6.1285080909729
    9. ',' → logprob: -6.3785080909729
    10. '   ' → logprob: -6.5035080909729

Token 171: ' a' (ID: 261)
  Prédit: 'k'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'k' → logprob: -1.6550979614257812
    2. '(k' → logprob: -2.1550979614257812
    3. '(a' → logprob: -2.1550979614257812
    4. '(b' → logprob: -2.2800979614257812
    5. ' (' → logprob: -2.2800979614257812
    6. '(c' → logprob: -2.4050979614257812
    7. 'b' → logprob: -2.5300979614257812
    8. ' k' → logprob: -3.1550979614257812
    9. 'c' → logprob: -3.1550979614257812
    10. ' b' → logprob: -3.5300979614257812

Token 172: ' -' (ID: 533)
  Prédit: ' -'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' -' → logprob: -0.5840215086936951
    2. '-' → logprob: -1.9590215682983398
    3. ' %' → logprob: -2.33402156829834
    4. ' +' → logprob: -2.83402156829834
    5. ' *' → logprob: -3.08402156829834
    6. '+' → logprob: -3.58402156829834
    7. '%' → logprob: -3.70902156829834
    8. ' ' → logprob: -4.20902156829834
    9. '*' → logprob: -4.33402156829834
    10. '<|end|>' → logprob: -5.95902156829834

Token 173: ' k' (ID: 372)
  Prédit: 'k'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'k' → logprob: -0.663516104221344
    2. 'd' → logprob: -1.9135160446166992
    3. 'b' → logprob: -2.038516044616699
    4. 'c' → logprob: -2.413516044616699
    5. '1' → logprob: -2.788516044616699
    6. 'g' → logprob: -3.788516044616699
    7. '(k' → logprob: -4.538516044616699
    8. ' k' → logprob: -5.038516044616699
    9. ' d' → logprob: -5.663516044616699
    10. '(' → logprob: -6.163516044616699

Token 174: ' *' (ID: 425)
  Prédit: ' *'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' *' → logprob: -0.6220942735671997
    2. '*' → logprob: -1.1220942735671997
    3. '*d' → logprob: -2.62209415435791
    4. 'd' → logprob: -3.74709415435791
    5. '*p' → logprob: -4.49709415435791
    6. '*c' → logprob: -4.87209415435791
    7. '*b' → logprob: -5.12209415435791
    8. '*(' → logprob: -5.37209415435791
    9. ' -' → logprob: -5.87209415435791
    10. '-' → logprob: -6.12209415435791

Token 175: ' g' (ID: 329)
  Prédit: 'g'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'g' → logprob: -0.0004062434600200504
    2. 'c' → logprob: -8.000406265258789
    3. ' g' → logprob: -9.875406265258789
    4. 'd' → logprob: -11.375406265258789
    5. '*g' → logprob: -12.125406265258789
    6. 'b' → logprob: -13.750406265258789
    7. '   ' → logprob: -14.500406265258789
    8. '#g' → logprob: -15.250406265258789
    9. ' ' → logprob: -15.875406265258789
    10. '	g' → logprob: -15.875406265258789

Token 176: '
' (ID: 198)
  Prédit: ''
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False

Token 177: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.40497270226478577
    2. ' if' → logprob: -1.1549726724624634
    3. 'if' → logprob: -4.904972553253174
    4. ')' → logprob: -5.529972553253174
    5. '<|end|>' → logprob: -6.029972553253174
    6. ' ' → logprob: -6.904972553253174
    7. ',' → logprob: -7.654972553253174
    8. '+' → logprob: -8.029973030090332
    9. '  ' → logprob: -8.154973030090332
    10. ' return' → logprob: -8.279973030090332

Token 178: ' if' (ID: 538)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.6974679827690125
    2. ' if' → logprob: -1.1974680423736572
    3. 'if' (adapté à ' if') → logprob: -2.1974680423736572
    4. 'return' → logprob: -2.9474680423736572
    5. ' return' → logprob: -3.4474680423736572
    6. ')' → logprob: -6.447467803955078
    7. '+' → logprob: -7.447467803955078
    8. '%' → logprob: -8.072467803955078
    9. ',' → logprob: -8.072467803955078
    10. ' p' → logprob: -8.447467803955078

Token 179: ' p' (ID: 275)
  Prédit: ' p'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' p' → logprob: -0.3989713191986084
    2. ' c' → logprob: -2.0239713191986084
    3. 'p' → logprob: -2.2739713191986084
    4. ' b' → logprob: -3.2739713191986084
    5. ' (' → logprob: -4.2739715576171875
    6. 'c' → logprob: -4.2739715576171875
    7. ' a' → logprob: -5.0239715576171875
    8. 'b' → logprob: -5.1489715576171875
    9. '(p' → logprob: -5.3989715576171875
    10. ' d' → logprob: -5.8989715576171875

Token 180: ' -' (ID: 533)
  Prédit: ' <'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' <' → logprob: -0.8078240752220154
    2. ' >=' → logprob: -1.5578241348266602
    3. ' <=' → logprob: -1.8078241348266602
    4. ' >' → logprob: -2.18282413482666
    5. ' ==' → logprob: -3.80782413482666
    6. '<' → logprob: -4.18282413482666
    7. '>' → logprob: -4.68282413482666
    8. '>=' → logprob: -4.93282413482666
    9. '<=' → logprob: -5.05782413482666
    10. ' ' → logprob: -5.80782413482666

Token 181: ' b' (ID: 287)
  Prédit: 'b'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'b' → logprob: -0.6992496252059937
    2. 'c' → logprob: -0.8242496252059937
    3. ' c' → logprob: -3.824249744415283
    4. 'd' → logprob: -3.949249744415283
    5. ' b' → logprob: -4.449249744415283
    6. '1' → logprob: -4.699249744415283
    7. ' d' → logprob: -7.074249744415283
    8. 'a' → logprob: -7.199249744415283
    9. ' ' → logprob: -8.074249267578125
    10. '(c' → logprob: -8.949249267578125

Token 182: ' <' (ID: 464)
  Prédit: ' <'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' <' → logprob: -0.8552969098091125
    2. ' >=' → logprob: -1.7302968502044678
    3. ' >' → logprob: -1.8552968502044678
    4. ' <=' → logprob: -2.3552968502044678
    5. '<' → logprob: -2.7302968502044678
    6. '>' → logprob: -3.2302968502044678
    7. '>=' → logprob: -3.7302968502044678
    8. '<=' → logprob: -4.230297088623047
    9. ' ' → logprob: -6.105297088623047
    10. ' ==' → logprob: -8.105297088623047

Token 183: ' ' (ID: 220)
  Prédit: '0'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '0' → logprob: -1.0105383396148682
    2. ' c' → logprob: -1.2605383396148682
    3. 'c' → logprob: -1.8855383396148682
    4. ' ' → logprob: -2.510538339614868
    5. '=' → logprob: -2.885538339614868
    6. '1' → logprob: -3.510538339614868
    7. ' d' → logprob: -4.260538101196289
    8. 'd' → logprob: -4.635538101196289
    9. 'a' → logprob: -6.260538101196289
    10. ' a' → logprob: -6.510538101196289

Token 184: '0' (ID: 15)
  Prédit: '0'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '0' → logprob: -0.6040046811103821
    2. 'c' → logprob: -1.1040046215057373
    3. '1' → logprob: -3.4790046215057373
    4. '=' → logprob: -3.6040046215057373
    5. ' c' → logprob: -3.8540046215057373
    6. 'd' → logprob: -3.9790046215057373
    7. ' ' → logprob: -4.479004859924316
    8. 'g' → logprob: -5.979004859924316
    9. 'p' → logprob: -6.104004859924316
    10. ' d' → logprob: -6.354004859924316

Token 185: ':' (ID: 25)
  Prédit: ':'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ':' → logprob: -0.07745572924613953
    2. ':
' → logprob: -2.827455759048462
    3. ':return' → logprob: -4.577455520629883
    4. '   ' → logprob: -6.077455520629883
    5. ' or' → logprob: -6.202455520629883
    6. ' :' → logprob: -7.952455520629883
    7. '       ' → logprob: -8.202455520629883
    8. ' :
' → logprob: -9.577455520629883
    9. ':
' → logprob: -10.202455520629883
    10. ' and' → logprob: -11.077455520629883

Token 186: '   ' (ID: 271)
  Prédit: '       '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '       ' → logprob: -0.010659268125891685
    2. '
' → logprob: -5.135659217834473
    3. ' return' → logprob: -5.635659217834473
    4. '   ' → logprob: -7.260659217834473
    5. 'return' → logprob: -8.385659217834473
    6. ' 
' → logprob: -9.885659217834473
    7. '
' → logprob: -10.385659217834473
    8. '	return' → logprob: -10.510659217834473
    9. '        
' → logprob: -10.885659217834473
    10. '           ' → logprob: -11.260659217834473

Token 187: ' #' (ID: 1069)
  Prédit: '       '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '       ' → logprob: -0.17277824878692627
    2. '   ' → logprob: -2.6727781295776367
    3. '
' → logprob: -3.0477781295776367
    4. ' return' → logprob: -3.9227781295776367
    5. ':
' → logprob: -5.047778129577637
    6. ':return' → logprob: -5.422778129577637
    7. 'return' → logprob: -6.047778129577637
    8. '    ' → logprob: -6.297778129577637
    9. '	return' → logprob: -6.547778129577637
    10. ':' → logprob: -6.547778129577637

Token 188: ' encore' (ID: 14043)
  Prédit: ' return'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' return' → logprob: -0.47453609108924866
    2. '       ' → logprob: -1.0995360612869263
    3. 'return' → logprob: -3.724536180496216
    4. '   ' → logprob: -4.099535942077637
    5. '    ' → logprob: -6.099535942077637
    6. '	return' → logprob: -7.349535942077637
    7. ')' → logprob: -8.724535942077637
    8. ' ' → logprob: -8.849535942077637
    9. '           ' → logprob: -8.974535942077637
    10. ':return' → logprob: -9.224535942077637

Token 189: ' un' (ID: 537)
  Prédit: '       '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '       ' → logprob: -0.0038465093821287155
    2. '   ' → logprob: -6.378846645355225
    3. ' return' → logprob: -6.503846645355225
    4. '
' → logprob: -7.753846645355225
    5. 'return' → logprob: -9.378846168518066
    6. '	return' → logprob: -10.128846168518066
    7. ',' → logprob: -11.378846168518066
    8. '    ' → logprob: -11.628846168518066
    9. '        
' → logprob: -11.628846168518066
    10. '           ' → logprob: -11.628846168518066

Token 190: ' test' (ID: 1746)
  Prédit: '       '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '       ' → logprob: -0.04920241981744766
    2. '   ' → logprob: -3.1742024421691895
    3. ' return' → logprob: -5.2992024421691895
    4. 'return' → logprob: -7.7992024421691895
    5. '    ' → logprob: -8.424201965332031
    6. '	return' → logprob: -9.299201965332031
    7. '
' → logprob: -9.674201965332031
    8. ' ' → logprob: -9.799201965332031
    9. ':return' → logprob: -9.924201965332031
    10. '           ' → logprob: -10.174201965332031

Token 191: '
' (ID: 198)
  Prédit: '       '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '       ' → logprob: -0.0067147789523005486
    2. ':
' → logprob: -5.381714820861816
    3. ':' → logprob: -6.881714820861816
    4. '   ' → logprob: -7.006714820861816
    5. '
' → logprob: -10.006714820861816
    6. ' or' → logprob: -10.381714820861816
    7. ':return' → logprob: -10.881714820861816
    8. ' return' → logprob: -11.006714820861816
    9. ',' → logprob: -11.381714820861816
    10. '           ' → logprob: -12.131714820861816

Token 192: '       ' (ID: 309)
  Prédit: '       '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '       ' → logprob: -0.00039349604048766196
    2. ' return' → logprob: -8.500393867492676
    3. '
' → logprob: -9.500393867492676
    4. '   ' → logprob: -10.250393867492676
    5. 'return' → logprob: -10.375393867492676
    6. '<|end|>' → logprob: -11.375393867492676
    7. '           ' → logprob: -11.625393867492676
    8. '	return' → logprob: -12.125393867492676
    9. '        
' → logprob: -12.375393867492676
    10. ',' → logprob: -12.875393867492676

Token 193: ' return' (ID: 622)
  Prédit: 'return'
  Correct (stricte): False
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'return' (adapté à ' return') → logprob: -0.6821332573890686
    2. ' return' → logprob: -0.9321332573890686
    3. '       ' → logprob: -2.307133197784424
    4. '   ' → logprob: -6.932133197784424
    5. '	return' → logprob: -8.807133674621582
    6. ' ' → logprob: -10.432133674621582
    7. '           ' → logprob: -10.432133674621582
    8. '    ' → logprob: -12.682133674621582
    9. '  ' → logprob: -12.807133674621582
    10. '{return' → logprob: -13.057133674621582

Token 194: ' False' (ID: 7983)
  Prédit: ' False'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' False' → logprob: -0.5759493708610535
    2. 'False' → logprob: -0.8259493708610535
    3. ' True' → logprob: -11.950949668884277
    4. 'True' → logprob: -12.825949668884277
    5. '(False' → logprob: -14.825949668884277
    6. ' ' → logprob: -15.450949668884277
    7. ' None' → logprob: -15.950949668884277
    8. '   ' → logprob: -16.45094871520996
    9. 'None' → logprob: -16.57594871520996
    10. '=False' → logprob: -17.57594871520996

Token 195: '
' (ID: 198)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.00044914212776347995
    2. '    
' → logprob: -8.500449180603027
    3. '<|end|>' → logprob: -9.750449180603027
    4. 'return' → logprob: -9.750449180603027
    5. '
' → logprob: -9.875449180603027
    6. '	return' → logprob: -10.750449180603027
    7. ' return' → logprob: -10.875449180603027
    8. '       ' → logprob: -11.250449180603027
    9. ')' → logprob: -11.750449180603027
    10. '  
' → logprob: -12.375449180603027

Token 196: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.03436792641878128
    2. '<|end|>' → logprob: -4.03436803817749
    3. '    
' → logprob: -4.65936803817749
    4. '
' → logprob: -6.28436803817749
    5. '  
' → logprob: -6.28436803817749
    6. ' return' → logprob: -7.65936803817749
    7. '	return' → logprob: -7.65936803817749
    8. ' 
' → logprob: -7.78436803817749
    9. '  ' → logprob: -8.034367561340332
    10. ')' → logprob: -8.284367561340332

Token 197: ' return' (ID: 622)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.0009829123737290502
    2. 'return' (adapté à ' return') → logprob: -7.000982761383057
    3. '	return' → logprob: -10.500983238220215
    4. ' return' → logprob: -10.750983238220215
    5. '       ' → logprob: -11.875983238220215
    6. ')' → logprob: -12.250983238220215
    7. '    
' → logprob: -12.750983238220215
    8. '.' → logprob: -13.000983238220215
    9. ' ' → logprob: -13.500983238220215
    10. '  ' → logprob: -13.750983238220215

Token 198: ' True' (ID: 6432)
  Prédit: 'True'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'True' → logprob: -0.31583085656166077
    2. ' True' → logprob: -1.3158308267593384
    3. 'False' → logprob: -6.065830707550049
    4. ' False' → logprob: -8.315831184387207
    5. '   ' → logprob: -15.565831184387207
    6. 'None' → logprob: -16.81583023071289
    7. '(True' → logprob: -16.81583023071289
    8. ' ' → logprob: -17.06583023071289
    9. ' p' → logprob: -17.69083023071289
    10. ' ' → logprob: -18.81583023071289

Token 199: '   ' (ID: 271)
  Prédit: ''
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False

Token 200: ' #' (ID: 1069)
  Prédit: ''
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False

Token 201: ' sinon' (ID: 52915)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ')' → logprob: -1.4170912504196167
    2. ':' → logprob: -1.4170912504196167
    3. '<|end|>' → logprob: -1.6670912504196167
    4. 'for' → logprob: -2.0420913696289062
    5. '(' → logprob: -2.9170913696289062
    6. '
' → logprob: -3.0420913696289062
    7. 't' → logprob: -3.6670913696289062
    8. '(
' → logprob: -3.7920913696289062
    9. '#' → logprob: -4.792091369628906
    10. ' for' → logprob: -5.042091369628906

Token 202: ' c' (ID: 274)
  Prédit: 'for'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'for' → logprob: -0.002930514281615615
    2. ' for' → logprob: -6.002930641174316
    3. '
' → logprob: -9.252930641174316
    4. '\n' → logprob: -9.377930641174316
    5. 'n' → logprob: -9.627930641174316
    6. '  
' → logprob: -9.627930641174316
    7. 't' → logprob: -10.377930641174316
    8. ' 
' → logprob: -10.627930641174316
    9. '<|end|>' → logprob: -11.127930641174316
    10. '    
' → logprob: -11.377930641174316

Token 203: ''est' (ID: 6616)
  Prédit: ''
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False

Token 204: ' bon' (ID: 4846)
  Prédit: 'True'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'True' → logprob: -0.474338173866272
    2. ' True' → logprob: -0.974338173866272
    3. 'False' → logprob: -8.34933853149414
    4. ' False' → logprob: -10.72433853149414
    5. '   ' → logprob: -13.34933853149414
    6. '(True' → logprob: -14.34933853149414
    7. '    ' → logprob: -16.72433853149414
    8. ' ' → logprob: -16.72433853149414
    9. ' vrai' → logprob: -17.47433853149414
    10. 'OK' → logprob: -17.47433853149414

Token 205: ',' (ID: 11)
  Prédit: 'for'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'for' → logprob: -0.06989196687936783
    2. '(' → logprob: -4.069891929626465
    3. ' for' → logprob: -4.194891929626465
    4. '<|end|>' → logprob: -4.569891929626465
    5. 't' → logprob: -5.069891929626465
    6. '(
' → logprob: -5.694891929626465
    7. '#' → logprob: -5.944891929626465
    8. ':' → logprob: -6.319891929626465
    9. '
' → logprob: -6.694891929626465
    10. '  
' → logprob: -6.944891929626465

Token 206: ' je' (ID: 1264)
  Prédit: ''
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False

Token 207: ' crois' (ID: 65485)
  Prédit: ''
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False

Token 208: '

' (ID: 279)
  Prédit: '\n'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '\n' → logprob: -1.0096110105514526
    2. '<|end|>' → logprob: -1.2596110105514526
    3. 'for' → logprob: -1.3846110105514526
    4. '\' → logprob: -2.759611129760742
    5. 't' → logprob: -5.009611129760742
    6. ' for' → logprob: -5.134611129760742
    7. '(' → logprob: -5.759611129760742
    8. 'n' → logprob: -5.884611129760742
    9. '
' → logprob: -6.134611129760742
    10. '#' → logprob: -6.259611129760742

Token 209: 'for' (ID: 1938)
  Prédit: 'for'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'for' → logprob: -0.00014406509581021965
    2. ' for' → logprob: -9.000144004821777
    3. 'while' → logprob: -11.500144004821777
    4. 'n' → logprob: -12.625144004821777
    5. 'f' → logprob: -13.000144004821777
    6. 't' → logprob: -13.125144004821777
    7. 'i' → logprob: -14.125144004821777
    8. '
' → logprob: -14.250144004821777
    9. '#' → logprob: -14.875144004821777
    10. '\n' → logprob: -15.250144004821777

Token 210: ' i' (ID: 575)
  Prédit: ' _'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' _' → logprob: -0.011608640663325787
    2. '_' → logprob: -4.511608600616455
    3. ' i' → logprob: -7.511608600616455
    4. '_i' → logprob: -11.886609077453613
    5. 'i' → logprob: -12.136609077453613
    6. ' ' → logprob: -14.136609077453613
    7. ' ' → logprob: -14.261609077453613
    8. ' range' → logprob: -15.136609077453613
    9. '   ' → logprob: -17.011608123779297
    10. ' _
' → logprob: -17.636608123779297

Token 211: ' in' (ID: 306)
  Prédit: ' in'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' in' → logprob: -0.03844604641199112
    2. 'in' → logprob: -3.2884459495544434
    3. ' ' → logprob: -7.913445949554443
    4. '_' → logprob: -10.788446426391602
    5. '  ' → logprob: -12.538446426391602
    6. ' i' → logprob: -13.163446426391602
    7. 'n' → logprob: -13.288446426391602
    8. '	in' → logprob: -13.413446426391602
    9. ' ' → logprob: -13.538446426391602
    10. 'range' → logprob: -14.038446426391602

Token 212: ' range' (ID: 3352)
  Prédit: 'range'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'range' → logprob: -0.5759412050247192
    2. ' range' → logprob: -0.8259412050247192
    3. ' ' → logprob: -14.32594108581543
    4. '_' → logprob: -15.07594108581543
    5. 't' → logprob: -15.20094108581543
    6. ' in' → logprob: -15.45094108581543
    7. '	range' → logprob: -16.07594108581543
    8. 'in' → logprob: -16.20094108581543
    9. ' t' → logprob: -16.70094108581543
    10. '  ' → logprob: -17.07594108581543

Token 213: '(t' (ID: 2025)
  Prédit: '(t'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(t' → logprob: -0.014177851378917694
    2. '(' → logprob: -4.2641777992248535
    3. ' t' → logprob: -11.764178276062012
    4. ' (' → logprob: -12.389178276062012
    5. 't' → logprob: -13.014178276062012
    6. '(s' → logprob: -16.264177322387695
    7. '(
' → logprob: -17.014177322387695
    8. '(T' → logprob: -18.639177322387695
    9. '(len' → logprob: -19.014177322387695
    10. '(n' → logprob: -19.514177322387695

Token 214: '):' (ID: 3127)
  Prédit: '):'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '):' → logprob: -0.0005488642491400242
    2. ' ):' → logprob: -7.625548839569092
    3. '):
' → logprob: -10.12554931640625
    4. '+' → logprob: -11.12554931640625
    5. ')' → logprob: -12.37554931640625
    6. ':' → logprob: -14.00054931640625
    7. '():' → logprob: -14.87554931640625
    8. '):
' → logprob: -15.75054931640625
    9. ' +' → logprob: -16.25054931640625
    10. '+:' → logprob: -16.50054931640625

Token 215: ' ' (ID: 220)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.08018055558204651
    2. 'a' → logprob: -3.3301806449890137
    3. ' a' → logprob: -3.7051806449890137
    4. '    
' → logprob: -4.330180644989014
    5. '	a' → logprob: -6.705180644989014
    6. ',a' → logprob: -7.205180644989014
    7. ' 
' → logprob: -7.830180644989014
    8. '    ' → logprob: -8.330180168151855
    9. ',' → logprob: -8.705180168151855
    10. '<|end|>' → logprob: -9.080180168151855

Token 216: ' #' (ID: 1069)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.14877475798130035
    2. ' a' → logprob: -2.6487748622894287
    3. 'a' → logprob: -2.8987748622894287
    4. '    
' → logprob: -4.52377462387085
    5. '	a' → logprob: -7.89877462387085
    6. ' 
' → logprob: -8.148775100708008
    7. ',a' → logprob: -9.273775100708008
    8. ' line' → logprob: -9.398775100708008
    9. ' parts' → logprob: -9.523775100708008
    10. '    ' → logprob: -9.523775100708008

Token 217: ' On' (ID: 2160)
  Prédit: ' a'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' a' → logprob: -0.06489529460668564
    2. 'a' → logprob: -3.1898953914642334
    3. '   ' → logprob: -3.9398953914642334
    4. ' inputs' → logprob: -6.939895153045654
    5. '	a' → logprob: -8.189895629882812
    6. ' parts' → logprob: -8.189895629882812
    7. ' 
' → logprob: -8.564895629882812
    8. ' input' → logprob: -9.189895629882812
    9. '    
' → logprob: -9.439895629882812
    10. '    ' → logprob: -10.189895629882812

Token 218: ' aurait' (ID: 48306)
  Prédit: ' a'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' a' → logprob: -1.296469807624817
    2. ' ' → logprob: -1.421469807624817
    3. 'a' → logprob: -1.796469807624817
    4. ' =' → logprob: -2.0464696884155273
    5. ':' → logprob: -2.7964696884155273
    6. '_a' → logprob: -3.7964696884155273
    7. '_' → logprob: -4.046469688415527
    8. '   ' → logprob: -4.671469688415527
    9. ' input' → logprob: -4.921469688415527
    10. ' :' → logprob: -4.921469688415527

Token 219: ' pu' (ID: 2923)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.6243758201599121
    2. ' ' → logprob: -1.124375820159912
    3. ' input' → logprob: -3.624375820159912
    4. '  ' → logprob: -4.124375820159912
    5. ' print' → logprob: -4.749375820159912
    6. ' not' → logprob: -4.874375820159912
    7. ' une' → logprob: -4.999375820159912
    8. '
' → logprob: -5.249375820159912
    9. ' la' → logprob: -5.249375820159912
    10. ' peut' → logprob: -5.374375820159912

Token 220: ' utiliser' (ID: 43227)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.02059631235897541
    2. '    
' → logprob: -4.895596504211426
    3. ' range' → logprob: -5.395596504211426
    4. 'range' → logprob: -6.395596504211426
    5. '
' → logprob: -6.520596504211426
    6. ' input' → logprob: -6.770596504211426
    7. ' for' → logprob: -7.395596504211426
    8. 'import' → logprob: -7.520596504211426
    9. 'input' → logprob: -7.895596504211426
    10. ' print' → logprob: -8.020596504211426

Token 221: ' '_'' (ID: 86115)
  Prédit: 'range'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'range' → logprob: -0.40373528003692627
    2. ' range' → logprob: -1.4037352800369263
    3. ' input' → logprob: -3.0287351608276367
    4. 'input' → logprob: -3.7787351608276367
    5. '   ' → logprob: -4.403735160827637
    6. ' ' → logprob: -7.528735160827637
    7. ' une' → logprob: -7.778735160827637
    8. '_' → logprob: -8.028735160827637
    9. 'for' → logprob: -8.153735160827637
    10. 't' → logprob: -8.528735160827637

Token 222: ' mais' (ID: 2899)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.034026116132736206
    2. 'a' → logprob: -4.034026145935059
    3. ' a' → logprob: -5.659026145935059
    4. '    
' → logprob: -5.909026145935059
    5. ' 
' → logprob: -6.159026145935059
    6. '
' → logprob: -6.284026145935059
    7. ',' → logprob: -6.534026145935059
    8. ',a' → logprob: -7.159026145935059
    9. ' ,' → logprob: -7.409026145935059
    10. ' ' → logprob: -7.909026145935059

Token 223: ' je' (ID: 1264)
  Prédit: ' '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' ' → logprob: -0.9664422869682312
    2. ' i' → logprob: -1.716442346572876
    3. ' True' → logprob: -2.341442346572876
    4. ' range' → logprob: -2.466442346572876
    5. '_' → logprob: -2.466442346572876
    6. ' _' → logprob: -3.091442346572876
    7. '   ' → logprob: -3.216442346572876
    8. ' a' → logprob: -3.466442346572876
    9. 'range' → logprob: -4.216442108154297
    10. '  ' → logprob: -4.841442108154297

Token 224: ' préfère' (ID: 141784)
  Prédit: ' range'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' range' → logprob: -0.4434339702129364
    2. 'range' → logprob: -1.0684340000152588
    3. ' préfère' → logprob: -4.69343376159668
    4. ' vais' → logprob: -5.94343376159668
    5. ' n' → logprob: -7.31843376159668
    6. ' continue' → logprob: -8.31843376159668
    7. 'i' → logprob: -8.44343376159668
    8. 'vais' → logprob: -8.69343376159668
    9. ' veux' → logprob: -8.69343376159668
    10. ' aime' → logprob: -9.06843376159668

Token 225: ' voir' (ID: 20611)
  Prédit: '_'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '_' → logprob: -0.6942571401596069
    2. ':' → logprob: -0.8192571401596069
    3. '_:' → logprob: -3.1942572593688965
    4. '   ' → logprob: -4.5692572593688965
    5. ' :' → logprob: -6.1942572593688965
    6. ':
' → logprob: -7.0692572593688965
    7. '_input' → logprob: -7.1942572593688965
    8. 'input' → logprob: -7.1942572593688965
    9. ' _' → logprob: -7.3192572593688965
    10. 'a' → logprob: -7.5692572593688965

Token 226: ' l' (ID: 305)
  Prédit: '_'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '_' → logprob: -0.07581156492233276
    2. '   ' → logprob: -3.4508116245269775
    3. ' ' → logprob: -4.575811386108398
    4. '(' → logprob: -4.700811386108398
    5. '()' → logprob: -5.450811386108398
    6. ' _' → logprob: -5.700811386108398
    7. ':' → logprob: -5.950811386108398
    8. '():' → logprob: -6.200811386108398
    9. 'i' → logprob: -6.575811386108398
    10. '  ' → logprob: -6.825811386108398

Token 227: ''' (ID: 6)
  Prédit: 'i'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'i' → logprob: -0.4557032287120819
    2. '_' → logprob: -1.9557032585144043
    3. ' i' → logprob: -2.2057032585144043
    4. ' range' → logprob: -3.3307032585144043
    5. 'a' → logprob: -3.7057032585144043
    6. 'range' → logprob: -3.7057032585144043
    7. 'variable' → logprob: -4.205703258514404
    8. ' variable' → logprob: -5.080703258514404
    9. 'o' → logprob: -6.455703258514404
    10. ' ' → logprob: -6.580703258514404

Token 228: 'index' (ID: 2257)
  Prédit: 'i'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'i' → logprob: -0.0019763342570513487
    2. ' i' → logprob: -6.876976490020752
    3. '_' → logprob: -7.126976490020752
    4. '_i' → logprob: -9.001976013183594
    5. 'variable' → logprob: -11.376976013183594
    6. ' variable' → logprob: -12.626976013183594
    7. ' ' → logprob: -14.126976013183594
    8. 'input' → logprob: -14.751976013183594
    9. 'a' → logprob: -16.251976013183594
    10. ' _' → logprob: -16.376976013183594

Token 229: '
' (ID: 198)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.2770787179470062
    2. 'a' → logprob: -1.7770787477493286
    3. ' a' → logprob: -3.402078628540039
    4. ' input' → logprob: -4.152078628540039
    5. ' inputs' → logprob: -5.277078628540039
    6. ':' → logprob: -5.402078628540039
    7. 'input' → logprob: -5.777078628540039
    8. '    
' → logprob: -6.152078628540039
    9. ':
' → logprob: -6.277078628540039
    10. 'inputs' → logprob: -6.527078628540039

Token 230: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.7102674245834351
    2. ' a' → logprob: -0.9602674245834351
    3. 'a' → logprob: -2.0852675437927246
    4. '	a' → logprob: -7.585267543792725
    5. '    
' → logprob: -8.085267066955566
    6. ',a' → logprob: -8.585267066955566
    7. ' input' → logprob: -9.335267066955566
    8. ' A' → logprob: -9.835267066955566
    9. '    ' → logprob: -9.960267066955566
    10. ' inputs' → logprob: -9.960267066955566

Token 231: ' #' (ID: 1069)
  Prédit: 'a'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'a' → logprob: -0.019769631326198578
    2. ' a' → logprob: -4.019769668579102
    3. '   ' → logprob: -6.519769668579102
    4. 'A' → logprob: -10.394769668579102
    5. '	a' → logprob: -10.769769668579102
    6. 'n' → logprob: -11.269769668579102
    7. '    
' → logprob: -11.394769668579102
    8. 'c' → logprob: -11.519769668579102
    9. 'line' → logprob: -11.769769668579102
    10. 'l' → logprob: -11.769769668579102

Token 232: ' lecture' (ID: 31993)
  Prédit: 'a'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'a' → logprob: -0.009173333644866943
    2. ' a' → logprob: -4.759173393249512
    3. 'line' → logprob: -8.884173393249512
    4. 'n' → logprob: -9.134173393249512
    5. ' line' → logprob: -9.884173393249512
    6. 'l' → logprob: -9.884173393249512
    7. 'A' → logprob: -10.134173393249512
    8. '   ' → logprob: -10.134173393249512
    9. 'x' → logprob: -10.384173393249512
    10. 'c' → logprob: -11.009173393249512

Token 233: ' des' (ID: 731)
  Prédit: 'a'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'a' → logprob: -0.15408183634281158
    2. ' a' → logprob: -2.0290818214416504
    3. ' =' → logprob: -4.90408182144165
    4. '   ' → logprob: -7.15408182144165
    5. ' line' → logprob: -7.27908182144165
    6. 'A' → logprob: -7.77908182144165
    7. ',' → logprob: -8.029082298278809
    8. '_a' → logprob: -8.154082298278809
    9. ',a' → logprob: -8.529082298278809
    10. '=' → logprob: -8.654082298278809

Token 234: ' données' (ID: 30580)
  Prédit: 'a'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'a' → logprob: -0.006609741598367691
    2. ' a' → logprob: -5.131609916687012
    3. 'values' → logprob: -8.756609916687012
    4. 'l' → logprob: -9.506609916687012
    5. 'inputs' → logprob: -9.506609916687012
    6. 'val' → logprob: -10.006609916687012
    7. 'line' → logprob: -10.256609916687012
    8. 'x' → logprob: -10.506609916687012
    9. ' valeurs' → logprob: -10.756609916687012
    10. 'n' → logprob: -10.756609916687012

Token 235: ' -' (ID: 533)
  Prédit: 'a'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'a' → logprob: -0.42879778146743774
    2. ' a' → logprob: -1.053797721862793
    3. '   ' → logprob: -10.178797721862793
    4. 'A' → logprob: -11.178797721862793
    5. '_a' → logprob: -11.428797721862793
    6. '	a' → logprob: -11.428797721862793
    7. ',a' → logprob: -11.928797721862793
    8. 'x' → logprob: -13.053797721862793
    9. ',' → logprob: -13.303797721862793
    10. 'n' → logprob: -13.428797721862793

Token 236: ' p' (ID: 275)
  Prédit: 'a'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'a' → logprob: -0.14286541938781738
    2. ' a' → logprob: -2.0178654193878174
    3. ' line' → logprob: -10.517865180969238
    4. 'l' → logprob: -10.642865180969238
    5. '   ' → logprob: -10.767865180969238
    6. 'A' → logprob: -11.267865180969238
    7. 'line' → logprob: -11.517865180969238
    8. 'n' → logprob: -11.517865180969238
    9. 'c' → logprob: -11.642865180969238
    10. ' ' → logprob: -11.767865180969238

Token 237: 'fff' (ID: 29318)
  Prédit: ','
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ',' → logprob: -0.16344711184501648
    2. ' =' → logprob: -3.413447141647339
    3. ',a' → logprob: -3.538447141647339
    4. '1' → logprob: -3.663447141647339
    5. 'ar' → logprob: -3.663447141647339
    6. 'r' → logprob: -4.16344690322876
    7. 'a' → logprob: -4.28844690322876
    8. ',q' → logprob: -6.03844690322876
    9. 'arts' → logprob: -6.78844690322876
    10. 'art' → logprob: -6.91344690322876

Token 238: ' toujours' (ID: 16867)
  Prédit: 'a'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'a' → logprob: -0.38737788796424866
    2. ' a' → logprob: -1.1373778581619263
    3. ' line' → logprob: -8.012377738952637
    4. '   ' → logprob: -9.512377738952637
    5. 'line' → logprob: -10.887377738952637
    6. ' data' → logprob: -11.637377738952637
    7. 'x' → logprob: -11.637377738952637
    8. ',a' → logprob: -11.637377738952637
    9. '	a' → logprob: -12.012377738952637
    10. 'A' → logprob: -12.262377738952637

Token 239: ' avec' (ID: 3937)
  Prédit: 'a'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'a' → logprob: -0.2521156966686249
    2. ' a' → logprob: -1.5021157264709473
    3. ' line' → logprob: -10.127115249633789
    4. 'x' → logprob: -10.377115249633789
    5. 'l' → logprob: -10.877115249633789
    6. 'line' → logprob: -10.877115249633789
    7. '   ' → logprob: -11.377115249633789
    8. 'n' → logprob: -11.752115249633789
    9. ' ' → logprob: -11.752115249633789
    10. 'r' → logprob: -11.752115249633789

Token 240: ' des' (ID: 731)
  Prédit: 'a'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'a' → logprob: -0.04487026110291481
    2. ' a' → logprob: -3.169870376586914
    3. 'input' → logprob: -7.669870376586914
    4. 'l' → logprob: -8.419870376586914
    5. 'line' → logprob: -8.669870376586914
    6. ' line' → logprob: -8.794870376586914
    7. 'data' → logprob: -8.919870376586914
    8. 'x' → logprob: -9.169870376586914
    9. ' input' → logprob: -9.419870376586914
    10. 'n' → logprob: -9.919870376586914

Token 241: ' splits' (ID: 76848)
  Prédit: 'l'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'l' → logprob: -0.9190173745155334
    2. 'a' → logprob: -1.6690173149108887
    3. 'input' → logprob: -1.6690173149108887
    4. 'map' → logprob: -2.6690173149108887
    5. 'list' → logprob: -2.9190173149108887
    6. 'spaces' → logprob: -4.419017314910889
    7. 'ints' → logprob: -4.544017314910889
    8. ' input' → logprob: -5.169017314910889
    9. 'trip' → logprob: -5.169017314910889
    10. 'lines' → logprob: -5.169017314910889

Token 242: '
' (ID: 198)
  Prédit: 'a'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'a' → logprob: -0.1515597254037857
    2. ' a' → logprob: -2.026559829711914
    3. ' line' → logprob: -6.026559829711914
    4. ' data' → logprob: -6.151559829711914
    5. 'data' → logprob: -6.401559829711914
    6. 'x' → logprob: -7.276559829711914
    7. '   ' → logprob: -7.776559829711914
    8. 'line' → logprob: -8.026559829711914
    9. '    
' → logprob: -8.901559829711914
    10. 'l' → logprob: -8.901559829711914

Token 243: '   ' (ID: 271)
  Prédit: 'a'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'a' → logprob: -0.04884180799126625
    2. ' a' → logprob: -3.048841714859009
    3. '   ' → logprob: -8.79884147644043
    4. '    
' → logprob: -10.42384147644043
    5. ' line' → logprob: -10.67384147644043
    6. 'data' → logprob: -11.79884147644043
    7. '	a' → logprob: -11.92384147644043
    8. 'A' → logprob: -12.42384147644043
    9. '[a' → logprob: -12.54884147644043
    10. 'line' → logprob: -12.67384147644043

Token 244: ' a' (ID: 261)
  Prédit: 'a'
  Correct (stricte): False
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'a' (adapté à ' a') → logprob: -0.01417115144431591
    2. ' a' → logprob: -4.264171123504639
    3. '	a' → logprob: -13.639171600341797
    4. 'l' → logprob: -13.639171600341797
    5. 'x' → logprob: -13.889171600341797
    6. 'line' → logprob: -14.139171600341797
    7. '   ' → logprob: -14.264171600341797
    8. '[a' → logprob: -14.389171600341797
    9. ' line' → logprob: -14.639171600341797
    10. 'n' → logprob: -14.639171600341797

Token 245: ',' (ID: 11)
  Prédit: ','
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ',' → logprob: -0.004099058452993631
    2. ',b' → logprob: -5.504098892211914
    3. 'b' → logprob: -11.379098892211914
    4. ' ,' → logprob: -11.754098892211914
    5. 's' → logprob: -14.879098892211914
    6. ',s' → logprob: -14.879098892211914
    7. '_,' → logprob: -15.129098892211914
    8. ',a' → logprob: -15.629098892211914
    9. ',B' → logprob: -16.879098892211914
    10. ',input' → logprob: -17.129098892211914

Token 246: ' b' (ID: 287)
  Prédit: 'b'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'b' → logprob: -0.008650264702737331
    2. ' b' → logprob: -4.758650302886963
    3. 'c' → logprob: -10.258649826049805
    4. ' c' → logprob: -14.258649826049805
    5. ' ' → logprob: -17.383649826049805
    6. '=' → logprob: -17.883649826049805
    7. '	b' → logprob: -18.258649826049805
    8. 'bc' → logprob: -18.258649826049805
    9. '_b' → logprob: -18.508649826049805
    10. '=b' → logprob: -18.883649826049805

Token 247: ',' (ID: 11)
  Prédit: ','
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ',' → logprob: -0.06060441955924034
    2. ' =' → logprob: -3.4356043338775635
    3. '=' → logprob: -3.6856043338775635
    4. ',c' → logprob: -6.685604572296143
    5. 'c' → logprob: -8.435604095458984
    6. ' ,' → logprob: -10.185604095458984
    7. '=input' → logprob: -12.685604095458984
    8. ' ' → logprob: -13.310604095458984
    9. ' c' → logprob: -13.435604095458984
    10. ',d' → logprob: -13.685604095458984

Token 248: ' c' (ID: 274)
  Prédit: 'c'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'c' → logprob: -0.009767776355147362
    2. ' c' → logprob: -4.634768009185791
    3. '   ' → logprob: -12.259767532348633
    4. '  ' → logprob: -13.009767532348633
    5. ' ' → logprob: -13.384767532348633
    6. ' =' → logprob: -13.634767532348633
    7. 'a' → logprob: -14.384767532348633
    8. '=' → logprob: -14.759767532348633
    9. '	c' → logprob: -15.259767532348633
    10. '    ' → logprob: -15.697267532348633

Token 249: ',' (ID: 11)
  Prédit: ','
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ',' → logprob: -0.052308615297079086
    2. ' =' → logprob: -3.3023085594177246
    3. '=' → logprob: -4.677308559417725
    4. ',d' → logprob: -5.427308559417725
    5. 'd' → logprob: -7.802308559417725
    6. ' ,' → logprob: -10.177309036254883
    7. ' ' → logprob: -12.302309036254883
    8. '=d' → logprob: -12.677309036254883
    9. '=input' → logprob: -13.177309036254883
    10. ' d' → logprob: -13.427309036254883

Token 250: ' d' (ID: 272)
  Prédit: 'd'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'd' → logprob: -0.0889471024274826
    2. ' d' → logprob: -2.463947057723999
    3. ' =' → logprob: -12.963947296142578
    4. '  ' → logprob: -13.588947296142578
    5. '   ' → logprob: -13.588947296142578
    6. ' ' → logprob: -13.713947296142578
    7. 's' → logprob: -15.088947296142578
    8. '=' → logprob: -15.088947296142578
    9. ',d' → logprob: -15.463947296142578
    10. '	d' → logprob: -15.463947296142578

Token 251: ' =' (ID: 314)
  Prédit: '='
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '=' → logprob: -0.31328263878822327
    2. ' =' → logprob: -1.3132826089859009
    3. '=input' → logprob: -10.81328296661377
    4. ' ' → logprob: -15.43828296661377
    5. '=list' → logprob: -15.93828296661377
    6. '=int' → logprob: -15.93828296661377
    7. '=line' → logprob: -16.438282012939453
    8. '   ' → logprob: -17.063282012939453
    9. ' ' → logprob: -17.188282012939453
    10. ',' → logprob: -17.313282012939453

Token 252: ' map' (ID: 4014)
  Prédit: ' map'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' map' → logprob: -0.20141683518886566
    2. 'map' → logprob: -1.7014168500900269
    3. '[' → logprob: -13.576416969299316
    4. ' list' → logprob: -13.826416969299316
    5. '	map' → logprob: -14.576416969299316
    6. 'list' → logprob: -15.076416969299316
    7. ' ' → logprob: -15.826416969299316
    8. '(map' → logprob: -16.201416015625
    9. ' ' → logprob: -16.326416015625
    10. ' [' → logprob: -16.576416015625

Token 253: '(int' (ID: 2742)
  Prédit: '(int'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(int' → logprob: -6.015305552864447e-05
    2. 'int' → logprob: -9.750060081481934
    3. '(' → logprob: -13.500060081481934
    4. '<int' → logprob: -15.625060081481934
    5. ' int' → logprob: -16.00006103515625
    6. '[int' → logprob: -16.00006103515625
    7. '(input' → logprob: -17.00006103515625
    8. '=int' → logprob: -17.00006103515625
    9. '(
' → logprob: -17.75006103515625
    10. '	int' → logprob: -18.12506103515625

Token 254: ',' (ID: 11)
  Prédit: '(input'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(input' → logprob: -0.007307018619030714
    2. 'input' → logprob: -5.007307052612305
    3. ',input' → logprob: -7.507307052612305
    4. ' input' → logprob: -10.382307052612305
    5. '(' → logprob: -12.132307052612305
    6. '=input' → logprob: -12.882307052612305
    7. ')' → logprob: -13.632307052612305
    8. ',' → logprob: -13.882307052612305
    9. '	input' → logprob: -14.882307052612305
    10. ' (' → logprob: -15.007307052612305

Token 255: ' input' (ID: 3422)
  Prédit: 'input'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'input' → logprob: -0.0007100477814674377
    2. ' input' → logprob: -7.2507100105285645
    3. '   ' → logprob: -17.500709533691406
    4. '(input' → logprob: -18.000709533691406
    5. '	input' → logprob: -19.625709533691406
    6. ' ' → logprob: -20.375709533691406
    7. '=input' → logprob: -20.875709533691406
    8. '<input' → logprob: -21.125709533691406
    9. ',input' → logprob: -21.500709533691406
    10. '  ' → logprob: -22.000709533691406

Token 256: '().' (ID: 1454)
  Prédit: '().'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '().' → logprob: -1.318681188422488e-05
    2. '()' → logprob: -11.25001335144043
    3. ' ().' → logprob: -16.37501335144043
    4. '(' → logprob: -16.75001335144043
    5. '()
' → logprob: -18.87501335144043
    6. '.split' → logprob: -19.50001335144043
    7. '   ' → logprob: -21.50001335144043
    8. '())' → logprob: -22.00001335144043
    9. '("").' → logprob: -22.00001335144043
    10. ')' → logprob: -22.12501335144043

Token 257: 'split' (ID: 13627)
  Prédit: 'split'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'split' → logprob: -0.0004315036640036851
    2. 'strip' → logprob: -7.750431537628174
    3. ' split' → logprob: -14.250431060791016
    4. '(split' → logprob: -15.500431060791016
    5. 'rstrip' → logprob: -16.750431060791016
    6. '.split' → logprob: -18.750431060791016
    7. 'plit' → logprob: -19.375431060791016
    8. '_split' → logprob: -20.000431060791016
    9. 'spl' → logprob: -20.125431060791016
    10. ' strip' → logprob: -21.000431060791016

Token 258: '())
' (ID: 4574)
  Prédit: '())'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '())' → logprob: -0.0004766671918332577
    2. '()' → logprob: -8.500476837158203
    3. '()))' → logprob: -8.500476837158203
    4. ')' → logprob: -9.625476837158203
    5. '))' → logprob: -13.625476837158203
    6. '(' → logprob: -13.625476837158203
    7. '())
' → logprob: -14.125476837158203
    8. ' ())' → logprob: -14.875476837158203
    9. '(),' → logprob: -16.250476837158203
    10. '('' → logprob: -16.875476837158203

Token 259: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.13183483481407166
    2. '<|end|>' → logprob: -2.1318347454071045
    3. '    
' → logprob: -6.131834983825684
    4. '
' → logprob: -6.381834983825684
    5. '<|end|>' → logprob: -7.506834983825684
    6. ')' → logprob: -9.006834983825684
    7. ' if' → logprob: -9.131834983825684
    8. '  
' → logprob: -9.881834983825684
    9. '  ' → logprob: -10.506834983825684
    10. ':' → logprob: -10.631834983825684

Token 260: ' if' (ID: 538)
  Prédit: 'if'
  Correct (stricte): False
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'if' (adapté à ' if') → logprob: -0.2267797589302063
    2. ' if' → logprob: -2.2267796993255615
    3. 'print' → logprob: -2.4767796993255615
    4. '   ' → logprob: -4.601779937744141
    5. ' print' → logprob: -7.101779937744141
    6. 'result' → logprob: -9.47677993774414
    7. '    
' → logprob: -10.60177993774414
    8. '<|end|>' → logprob: -11.60177993774414
    9. ' 
' → logprob: -11.85177993774414
    10. '
' → logprob: -11.85177993774414

Token 261: ' ver' (ID: 1245)
  Prédit: ' ver'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' ver' → logprob: -0.06199457868933678
    2. 'ver' → logprob: -2.8119945526123047
    3. '(ver' → logprob: -11.061994552612305
    4. ' ' → logprob: -11.936994552612305
    5. ' not' → logprob: -12.561994552612305
    6. '   ' → logprob: -14.936994552612305
    7. 'not' → logprob: -15.186994552612305
    8. ' ' → logprob: -15.686994552612305
    9. '_ver' → logprob: -15.811994552612305
    10. '  ' → logprob: -15.811994552612305

Token 262: 'if' (ID: 366)
  Prédit: 'if'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'if' → logprob: -1.1472419600977446e-06
    2. ' if' → logprob: -13.750000953674316
    3. 'i' → logprob: -18.125001907348633
    4. '   ' → logprob: -19.125001907348633
    5. 'ify' → logprob: -19.250001907348633
    6. 'If' → logprob: -19.625001907348633
    7. 'иф' → logprob: -19.875001907348633
    8. '(if' → logprob: -20.250001907348633
    9. '_if' → logprob: -21.250001907348633
    10. 'ifi' → logprob: -22.000001907348633

Token 263: '(a' (ID: 6271)
  Prédit: '(a'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(a' → logprob: -2.9160102712921798e-05
    2. '(' → logprob: -10.875029563903809
    3. ' (' → logprob: -11.500029563903809
    4. '(
' → logprob: -17.250028610229492
    5. '   ' → logprob: -19.125028610229492
    6. '(ai' → logprob: -19.250028610229492
    7. ' ' → logprob: -19.750028610229492
    8. 'a' → logprob: -20.000028610229492
    9. '(A' → logprob: -20.000028610229492
    10. '```' → logprob: -20.125028610229492

Token 264: ',' (ID: 11)
  Prédit: ','
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ',' → logprob: -0.0007750853546895087
    2. ' ,' → logprob: -7.37577486038208
    3. ',b' → logprob: -8.875775337219238
    4. ',a' → logprob: -12.000775337219238
    5. ',c' → logprob: -14.000775337219238
    6. 'a' → logprob: -14.000775337219238
    7. '(' → logprob: -15.375775337219238
    8. '   ' → logprob: -15.500775337219238
    9. ',
' → logprob: -15.500775337219238
    10. ' ' → logprob: -16.000774383544922

Token 265: ' b' (ID: 287)
  Prédit: 'b'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'b' → logprob: -0.12692999839782715
    2. ' b' → logprob: -2.126929998397827
    3. '   ' → logprob: -14.126930236816406
    4. ' ' → logprob: -14.126930236816406
    5. '    ' → logprob: -15.626930236816406
    6. '	b' → logprob: -15.751930236816406
    7. '  ' → logprob: -16.126930236816406
    8. 'c' → logprob: -16.376930236816406
    9. ',b' → logprob: -17.751930236816406
    10. ')b' → logprob: -17.751930236816406

Token 266: ',' (ID: 11)
  Prédit: ','
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ',' → logprob: -0.0006921819876879454
    2. ' ,' → logprob: -7.625692367553711
    3. ',c' → logprob: -8.500692367553711
    4. '   ' → logprob: -15.000692367553711
    5. ',
' → logprob: -15.250692367553711
    6. 'c' → logprob: -15.500692367553711
    7. ',b' → logprob: -17.50069236755371
    8. '  ' → logprob: -17.87569236755371
    9. ' ' → logprob: -17.87569236755371
    10. 'a' → logprob: -18.12569236755371

Token 267: ' c' (ID: 274)
  Prédit: 'c'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'c' → logprob: -0.03804183006286621
    2. ' c' → logprob: -3.288041830062866
    3. ' ' → logprob: -14.913042068481445
    4. '   ' → logprob: -16.788042068481445
    5. '	c' → logprob: -16.788042068481445
    6. '  ' → logprob: -18.413042068481445
    7. ')c' → logprob: -19.413042068481445
    8. ',c' → logprob: -19.913042068481445
    9. '    ' → logprob: -20.163042068481445
    10. '     ' → logprob: -21.038042068481445

Token 268: ',' (ID: 11)
  Prédit: ','
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ',' → logprob: -0.0003676324849948287
    2. ',d' → logprob: -8.625367164611816
    3. ' ,' → logprob: -8.875367164611816
    4. 'd' → logprob: -10.000367164611816
    5. ',b' → logprob: -14.500367164611816
    6. '   ' → logprob: -14.625367164611816
    7. '```' → logprob: -14.750367164611816
    8. ' d' → logprob: -14.875367164611816
    9. ',
' → logprob: -14.875367164611816
    10. 'b' → logprob: -15.625367164611816

Token 269: ' d' (ID: 272)
  Prédit: 'd'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'd' → logprob: -0.12692968547344208
    2. ' d' → logprob: -2.126929759979248
    3. ' ' → logprob: -14.50192928314209
    4. ')d' → logprob: -14.75192928314209
    5. '	d' → logprob: -15.00192928314209
    6. '   ' → logprob: -15.50192928314209
    7. ',d' → logprob: -16.001930236816406
    8. ')' → logprob: -16.751930236816406
    9. '  ' → logprob: -16.876930236816406
    10. '>d' → logprob: -18.251930236816406

Token 270: '):
' (ID: 1883)
  Prédit: '):'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '):' → logprob: -5.621933451038785e-05
    2. '):
' → logprob: -10.375056266784668
    3. ' ):' → logprob: -10.750056266784668
    4. ')' → logprob: -12.625056266784668
    5. ':' → logprob: -16.00005531311035
    6. '):
' → logprob: -16.25005531311035
    7. '():' → logprob: -17.37505531311035
    8. ')):' → logprob: -18.37505531311035
    9. ')==' → logprob: -18.50005531311035
    10. '):

' → logprob: -18.75005531311035

Token 271: '       ' (ID: 309)
  Prédit: '       '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '       ' → logprob: -0.000939450750593096
    2. ':' → logprob: -7.87593936920166
    3. ' print' → logprob: -8.25093936920166
    4. 'print' → logprob: -8.50093936920166
    5. '   ' → logprob: -10.37593936920166
    6. '
' → logprob: -10.62593936920166
    7. '        
' → logprob: -11.00093936920166
    8. ':
' → logprob: -11.75093936920166
    9. '           ' → logprob: -13.25093936920166
    10. '	print' → logprob: -13.25093936920166

Token 272: ' print' (ID: 2123)
  Prédit: 'print'
  Correct (stricte): False
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'print' (adapté à ' print') → logprob: -0.16884967684745789
    2. ' print' → logprob: -1.9188497066497803
    3. '       ' → logprob: -5.043849468231201
    4. '   ' → logprob: -6.168849468231201
    5. '	print' → logprob: -10.29384994506836
    6. '
' → logprob: -12.79384994506836
    7. '```' → logprob: -13.29384994506836
    8. '    
' → logprob: -13.41884994506836
    9. '    ' → logprob: -13.54384994506836
    10. ' 
' → logprob: -13.66884994506836

Token 273: '("' (ID: 568)
  Prédit: '("'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '("' → logprob: -0.0015585471410304308
    2. '(' → logprob: -6.751558780670166
    3. '('' → logprob: -7.876558780670166
    4. '(True' → logprob: -12.501558303833008
    5. '(":' → logprob: -13.751558303833008
    6. ' ("' → logprob: -13.876558303833008
    7. '(
' → logprob: -13.876558303833008
    8. '"' → logprob: -14.876558303833008
    9. '(-' → logprob: -15.376558303833008
    10. '("#' → logprob: -15.376558303833008

Token 274: 'Yes' (ID: 13022)
  Prédit: 'YES'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'YES' → logprob: -0.28389573097229004
    2. 'Yes' → logprob: -1.65889573097229
    3. 'O' → logprob: -3.53389573097229
    4. 'Oui' → logprob: -4.283895492553711
    5. 'OK' → logprob: -5.533895492553711
    6. 'Good' → logprob: -6.158895492553711
    7. 'Y' → logprob: -7.158895492553711
    8. 'B' → logprob: -7.158895492553711
    9. 'oui' → logprob: -7.408895492553711
    10. 'Possible' → logprob: -7.408895492553711

Token 275: '")' (ID: 1405)
  Prédit: '")'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '")' → logprob: -0.014169031754136086
    2. '")
' → logprob: -4.264169216156006
    3. '")
' → logprob: -12.514168739318848
    4. ')' → logprob: -13.764168739318848
    5. '")

' → logprob: -15.389168739318848
    6. ' ")' → logprob: -15.514168739318848
    7. '!")' → logprob: -15.639168739318848
    8. ')")' → logprob: -16.264169692993164
    9. '"' → logprob: -16.389169692993164
    10. '");' → logprob: -17.264169692993164

Token 276: '  ' (ID: 256)
  Prédit: 'else'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'else' → logprob: -0.6431983709335327
    2. '   ' → logprob: -1.3931983709335327
    3. ' else' → logprob: -1.5181983709335327
    4. '<|end|>' → logprob: -5.268198490142822
    5. '
' → logprob: -6.768198490142822
    6. '	else' → logprob: -7.768198490142822
    7. '<|end|>' → logprob: -9.643198013305664
    8. '       ' → logprob: -9.893198013305664
    9. '```' → logprob: -10.268198013305664
    10. '#else' → logprob: -10.643198013305664

Token 277: ' #' (ID: 1069)
  Prédit: 'else'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'else' → logprob: -0.09848801791667938
    2. ' else' → logprob: -2.7234880924224854
    3. '   ' → logprob: -4.223487854003906
    4. '<|end|>' → logprob: -4.473487854003906
    5. '
' → logprob: -6.473487854003906
    6. '<|end|>' → logprob: -8.848487854003906
    7. '	else' → logprob: -9.223487854003906
    8. '#else' → logprob: -9.723487854003906
    9. '```' → logprob: -9.973487854003906
    10. 'elif' → logprob: -10.098487854003906

Token 278: ' je' (ID: 1264)
  Prédit: ''
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False

Token 279: ' mets' (ID: 87155)
  Prédit: ''
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False

Token 280: ' les' (ID: 1341)
  Prédit: '("'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '("' → logprob: -1.093886137008667
    2. '"' → logprob: -1.593886137008667
    3. ' "' → logprob: -1.843886137008667
    4. '   ' → logprob: -2.468886137008667
    5. ' la' → logprob: -2.968886137008667
    6. ' ' → logprob: -3.468886137008667
    7. 'print' → logprob: -3.593886137008667
    8. 'Yes' → logprob: -3.718886137008667
    9. ' Yes' → logprob: -3.968886137008667
    10. ' print' → logprob: -4.218886375427246

Token 281: ' maj' (ID: 15575)
  Prédit: ' espaces'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' espaces' → logprob: -0.3329685628414154
    2. ' spaces' → logprob: -2.2079684734344482
    3. ' tokens' → logprob: -3.3329684734344482
    4. 's' → logprob: -3.4579684734344482
    5. 'else' → logprob: -4.082968711853027
    6. 'spaces' → logprob: -4.332968711853027
    7. 'Yes' → logprob: -4.457968711853027
    8. ' else' → logprob: -4.832968711853027
    9. 'es' → logprob: -5.207968711853027
    10. ' mots' → logprob: -5.332968711853027

Token 282: 'us' (ID: 385)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.40870895981788635
    2. 'else' → logprob: -1.283708930015564
    3. '       ' → logprob: -3.1587090492248535
    4. ' else' → logprob: -4.1587090492248535
    5. '<|end|>' → logprob: -8.408708572387695
    6. '	else' → logprob: -10.658708572387695
    7. '     ' → logprob: -10.908708572387695
    8. 'e' → logprob: -10.908708572387695
    9. 'elif' → logprob: -11.033708572387695
    10. '  ' → logprob: -11.783708572387695

Token 283: 'cules' (ID: 40805)
  Prédit: 'else'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'else' → logprob: -0.1745818853378296
    2. '   ' → logprob: -2.424582004547119
    3. 'e' → logprob: -3.424582004547119
    4. ' else' → logprob: -4.424582004547119
    5. 'print' → logprob: -4.674582004547119
    6. 's' → logprob: -4.924582004547119
    7. '       ' → logprob: -6.174582004547119
    8. 'es' → logprob: -6.924582004547119
    9. '")' → logprob: -6.924582004547119
    10. 'elif' → logprob: -6.924582004547119

Token 284: ' ici' (ID: 27994)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.14706295728683472
    2. '       ' → logprob: -2.5220630168914795
    3. '<|end|>' → logprob: -3.1470630168914795
    4. ' else' → logprob: -5.0220627784729
    5. 'else' → logprob: -5.1470627784729
    6. '<|end|>' → logprob: -7.1470627784729
    7. ')' → logprob: -9.397063255310059
    8. '
' → logprob: -10.772063255310059
    9. '  ' → logprob: -10.772063255310059
    10. '```' → logprob: -10.772063255310059

Token 285: ' c' (ID: 274)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.1294989436864853
    2. '       ' → logprob: -3.1294989585876465
    3. ' else' → logprob: -3.3794989585876465
    4. '<|end|>' → logprob: -3.6294989585876465
    5. 'else' → logprob: -4.1294989585876465
    6. '<|end|>' → logprob: -7.2544989585876465
    7. '
' → logprob: -9.879498481750488
    8. '  ' → logprob: -10.254498481750488
    9. ')' → logprob: -10.379498481750488
    10. '	else' → logprob: -10.504498481750488

Token 286: ''est' (ID: 6616)
  Prédit: 'ont'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'ont' → logprob: -0.002473635831847787
    2. '   ' → logprob: -6.502473831176758
    3. 'ode' → logprob: -8.127473831176758
    4. '       ' → logprob: -8.127473831176758
    5. 'on' → logprob: -8.877473831176758
    6. '  ' → logprob: -10.377473831176758
    7. 'ons' → logprob: -10.502473831176758
    8. 'onte' → logprob: -10.502473831176758
    9. '      ' → logprob: -10.877473831176758
    10. 'onta' → logprob: -11.002473831176758

Token 287: ' plus' (ID: 2932)
  Prédit: 'par'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'par' → logprob: -0.7493018507957458
    2. ' parce' → logprob: -2.2493019104003906
    3. ' correct' → logprob: -2.8743019104003906
    4. ' volontaire' → logprob: -2.8743019104003906
    5. ' mieux' → logprob: -2.9993019104003906
    6. 'pour' → logprob: -2.9993019104003906
    7. ' par' → logprob: -3.7493019104003906
    8. 'important' → logprob: -3.8743019104003906
    9. ' important' → logprob: -3.9993019104003906
    10. 'just' → logprob: -4.124301910400391

Token 288: ' joli' (ID: 116736)
  Prédit: 'pro'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'pro' → logprob: -0.16090574860572815
    2. 'pr' → logprob: -2.5359058380126953
    3. 'clair' → logprob: -3.1609058380126953
    4. ' clair' → logprob: -5.410905838012695
    5. 'sym' → logprob: -5.535905838012695
    6. 'cool' → logprob: -5.910905838012695
    7. 'classe' → logprob: -6.285905838012695
    8. 'cl' → logprob: -6.285905838012695
    9. ' propre' → logprob: -6.535905838012695
    10. 'Pro' → logprob: -6.785905838012695

Token 289: '
' (ID: 198)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.015826359391212463
    2. '       ' → logprob: -4.640826225280762
    3. ' else' → logprob: -5.765826225280762
    4. '<|end|>' → logprob: -6.765826225280762
    5. 'else' → logprob: -7.015826225280762
    6. '
' → logprob: -7.265826225280762
    7. '	else' → logprob: -10.015826225280762
    8. '<|end|>' → logprob: -10.015826225280762
    9. '    
' → logprob: -11.015826225280762
    10. '  ' → logprob: -11.265826225280762

Token 290: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.0012129719834774733
    2. 'else' → logprob: -7.501213073730469
    3. ' else' → logprob: -7.626213073730469
    4. '<|end|>' → logprob: -8.751213073730469
    5. '       ' → logprob: -12.126213073730469
    6. '<|end|>' → logprob: -13.126213073730469
    7. '```' → logprob: -13.376213073730469
    8. '	else' → logprob: -13.626213073730469
    9. '    
' → logprob: -14.001213073730469
    10. '
' → logprob: -14.376213073730469

Token 291: ' else' (ID: 1203)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.06689286977052689
    2. 'else' (adapté à ' else') → logprob: -2.8168928623199463
    3. ' else' → logprob: -5.316893100738525
    4. '	else' → logprob: -12.566892623901367
    5. '       ' → logprob: -13.566892623901367
    6. ' ' → logprob: -15.316892623901367
    7. '  ' → logprob: -16.191892623901367
    8. 'elif' → logprob: -16.816892623901367
    9. '    
' → logprob: -18.066892623901367
    10. '    ' → logprob: -18.566892623901367

Token 292: ':
' (ID: 734)
  Prédit: ':'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ':' → logprob: -0.5306270718574524
    2. '       ' → logprob: -1.0306270122528076
    3. ':
' → logprob: -2.9056270122528076
    4. '   ' → logprob: -9.530627250671387
    5. ' :' → logprob: -9.905627250671387
    6. ' :
' → logprob: -9.905627250671387
    7. '):
' → logprob: -10.780627250671387
    8. '):' → logprob: -11.155627250671387
    9. '<|end|>' → logprob: -11.405627250671387
    10. '():
' → logprob: -11.655627250671387

Token 293: '       ' (ID: 309)
  Prédit: '       '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '       ' → logprob: -0.01588701829314232
    2. ' print' → logprob: -4.2658867835998535
    3. 'print' → logprob: -6.3908867835998535
    4. '   ' → logprob: -11.015887260437012
    5. '    ' → logprob: -12.015887260437012
    6. ' ' → logprob: -12.515887260437012
    7. '     ' → logprob: -12.515887260437012
    8. '    ' → logprob: -12.765887260437012
    9. '        
' → logprob: -13.265887260437012
    10. '	print' → logprob: -13.265887260437012

Token 294: ' print' (ID: 2123)
  Prédit: 'print'
  Correct (stricte): False
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'print' (adapté à ' print') → logprob: -0.20142921805381775
    2. ' print' → logprob: -1.7014292478561401
    3. '       ' → logprob: -11.20142936706543
    4. '   ' → logprob: -13.70142936706543
    5. '	print' → logprob: -13.82642936706543
    6. '.print' → logprob: -17.32642936706543
    7. '    ' → logprob: -17.82642936706543
    8. '(print' → logprob: -18.20142936706543
    9. 'pr' → logprob: -18.32642936706543
    10. '```' → logprob: -18.82642936706543

Token 295: '("' (ID: 568)
  Prédit: '("'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '("' → logprob: -0.0009119403548538685
    2. '(' → logprob: -7.000911712646484
    3. '('' → logprob: -14.875911712646484
    4. '(
' → logprob: -16.750911712646484
    5. '("("' → logprob: -17.125911712646484
    6. ' ("' → logprob: -17.500911712646484
    7. '"' → logprob: -18.500911712646484
    8. '("""' → logprob: -18.750911712646484
    9. '("")' → logprob: -19.500911712646484
    10. '("(' → logprob: -19.625911712646484

Token 296: 'No' (ID: 3160)
  Prédit: 'No'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'No' → logprob: -0.0011705794604495168
    2. '"No' → logprob: -6.751170635223389
    3. 'NO' → logprob: -15.37617015838623
    4. 'no' → logprob: -16.376171112060547
    5. '"' → logprob: -17.126171112060547
    6. ' No' → logprob: -17.376171112060547
    7. '“No' → logprob: -17.751171112060547
    8. '>No' → logprob: -20.126171112060547
    9. '"N' → logprob: -20.876171112060547
    10. '   ' → logprob: -20.876171112060547

Token 297: '")' (ID: 1405)
  Prédit: '")'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '")' → logprob: -1.0280383548888494e-06
    2. ')' → logprob: -14.250000953674316
    3. ')")' → logprob: -15.500000953674316
    4. '")
' → logprob: -16.000001907348633
    5. '')' → logprob: -19.750001907348633
    6. '");' → logprob: -21.000001907348633
    7. '”)' → logprob: -21.000001907348633
    8. '"' → logprob: -21.000001907348633
    9. '")
' → logprob: -21.625001907348633
    10. '")

' → logprob: -21.625001907348633

Token 298: '   ' (ID: 271)
  Prédit: ''
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False

Token 299: ' #' (ID: 1069)
  Prédit: ''
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False

Token 300: ' on' (ID: 402)
  Prédit: ''
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False

Token 301: ' aurait' (ID: 48306)
  Prédit: ''
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False

Token 302: ' pu' (ID: 2923)
  Prédit: 'pu'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'pu' → logprob: -0.4271313548088074
    2. ' pu' → logprob: -1.5521314144134521
    3. 'put' → logprob: -2.802131414413452
    4. ' put' → logprob: -3.177131414413452
    5. ' pouvoir' → logprob: -4.052131175994873
    6. ' ' → logprob: -5.677131175994873
    7. 'print' → logprob: -6.052131175994873
    8. ' préféré' → logprob: -6.552131175994873
    9. 'pour' → logprob: -7.052131175994873
    10. ' podido' → logprob: -7.052131175994873

Token 303: ' écrire' (ID: 118651)
  Prédit: ' mettre'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' mettre' → logprob: -0.9975326657295227
    2. ' print' → logprob: -1.497532606124878
    3. ' continuer' → logprob: -2.122532606124878
    4. 'print' → logprob: -2.122532606124878
    5. 'mettre' → logprob: -2.872532606124878
    6. ' utiliser' → logprob: -3.622532606124878
    7. ' put' → logprob: -4.122532844543457
    8. 'put' → logprob: -4.372532844543457
    9. '   ' → logprob: -4.622532844543457
    10. ' écrire' → logprob: -5.122532844543457

Token 304: ' yes' (ID: 14531)
  Prédit: '("'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '("' → logprob: -0.0055058803409338
    2. '"' → logprob: -5.5055060386657715
    3. '(' → logprob: -6.8805060386657715
    4. '   ' → logprob: -8.505505561828613
    5. '('' → logprob: -10.130505561828613
    6. '()' → logprob: -10.130505561828613
    7. '"No' → logprob: -10.755505561828613
    8. '("")' → logprob: -11.130505561828613
    9. '       ' → logprob: -11.380505561828613
    10. '#' → logprob: -11.380505561828613

Token 305: '/no' (ID: 60414)
  Prédit: ''
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False

Token 306: ' en' (ID: 469)
  Prédit: ''
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False

Token 307: ' minus' (ID: 40335)
  Prédit: 'minus'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'minus' → logprob: -0.30058759450912476
    2. 'min' → logprob: -1.4255876541137695
    3. 'lower' → logprob: -4.0505876541137695
    4. ' lowercase' → logprob: -7.4255876541137695
    5. ' minus' → logprob: -7.5505876541137695
    6. '```' → logprob: -8.55058765411377
    7. '   ' → logprob: -8.80058765411377
    8. 'plus' → logprob: -9.30058765411377
    9. 'moins' → logprob: -9.55058765411377
    10. ' min' → logprob: -10.55058765411377

Token 308: 'cules' (ID: 40805)
  Prédit: ''
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False

Token 309: ',' (ID: 11)
  Prédit: ''
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False

Token 310: ' mais' (ID: 2899)
  Prédit: ' but'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' but' → logprob: -0.08652584999799728
    2. 'but' → logprob: -3.2115259170532227
    3. ' mais' → logprob: -3.5865259170532227
    4. '<|end|>' → logprob: -4.836525917053223
    5. '   ' → logprob: -6.211525917053223
    6. ')' → logprob: -6.586525917053223
    7. 'mais' → logprob: -7.336525917053223
    8. ' ' → logprob: -7.711525917053223
    9. '```' → logprob: -7.836525917053223
    10. '    
' → logprob: -8.086525917053223

Token 311: ' bon' (ID: 4846)
  Prédit: '#'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '#' → logprob: -0.11582562327384949
    2. ' #' → logprob: -2.990825653076172
    3. ' c' → logprob: -3.740825653076172
    4. '<|end|>' → logprob: -4.615825653076172
    5. '   ' → logprob: -5.115825653076172
    6. '       ' → logprob: -5.240825653076172
    7. '...' → logprob: -6.115825653076172
    8. '.' → logprob: -6.240825653076172
    9. ')' → logprob: -6.240825653076172
    10. 'c' → logprob: -6.615825653076172


RÉSUMÉ:
--------------------------------------------------------------------------------
Total des tokens analysés: 309
Tokens correctement prédits (1ère position, stricte): 81
Tokens correctement prédits (1ère position, avec adaptation): 88
Tokens correctement prédits (top 10): 171
Précision stricte (1ère position): 26.21%
Précision adaptée (1ère position): 28.48%
Précision (top 10): 55.34%
================================================================================
