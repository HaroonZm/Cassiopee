================================================================================
ANALYSE DE PRÉDICTION TOKEN PAR TOKEN (BATCH API)
Date: 2025-06-04 20:15:37
Modèle de tokenisation: gpt-4o-mini
================================================================================

SCRIPT ANALYSÉ:
--------------------------------------------------------------------------------
import math

def do_calc(total, group):
    return math.ceil((total - group) / (group - 1)) + 1

N_K = input()
N, K = [int(i) for i in N_K.split()]
nums = list(map(int, input().split())); res = None

class Dummy:
    pass

dummy = Dummy()
dummy.value = None

if K == N:
    res = 1
else:
    dummy.value = do_calc(N, K)
    res = dummy.value

for _ in range(1):
    print(res)
--------------------------------------------------------------------------------

RÉSULTATS D'ANALYSE TOKEN PAR TOKEN:
--------------------------------------------------------------------------------
Token 0: 'import' (ID: 561)
  → Token d'amorce (pas de prédiction)

Token 1: ' math' (ID: 13324)
  → Token d'amorce (pas de prédiction)

Token 2: '

' (ID: 279)
  → Token d'amorce (pas de prédiction)

Token 3: 'def' (ID: 1314)
  Prédit: '.'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '.' → logprob: -0.0024338087532669306
    2. '```' → logprob: -7.252433776855469
    3. '\n' → logprob: -7.377433776855469
    4. '\' → logprob: -7.877433776855469
    5. 'import' → logprob: -8.002433776855469
    6. '<|end|>' → logprob: -9.252433776855469
    7. '.pi' → logprob: -10.127433776855469
    8. 'a' → logprob: -11.002433776855469
    9. '.e' → logprob: -11.127433776855469
    10. '<|end|>' → logprob: -11.127433776855469

Token 4: ' do' (ID: 621)
  Prédit: ' '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' ' → logprob: -0.009838729165494442
    2. ' calculate' → logprob: -6.009838581085205
    3. ' math' → logprob: -6.009838581085205
    4. ' sqrt' → logprob: -6.134838581085205
    5. ' space' → logprob: -7.384838581085205
    6. '_' → logprob: -7.384838581085205
    7. ' factorial' → logprob: -7.384838581085205
    8. ' ' → logprob: -8.884839057922363
    9. ' f' → logprob: -9.134839057922363
    10. ' square' → logprob: -9.634839057922363

Token 5: '_calc' (ID: 107191)
  Prédit: '_'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '_' → logprob: -0.03565805032849312
    2. '_s' → logprob: -3.660658121109009
    3. 'Something' → logprob: -5.91065788269043
    4. ' ' → logprob: -6.66065788269043
    5. 'ing' → logprob: -7.03565788269043
    6. ' _' → logprob: -7.16065788269043
    7. '_n' → logprob: -7.16065788269043
    8. '_space' → logprob: -7.41065788269043
    9. '(' → logprob: -7.53565788269043
    10. ' something' → logprob: -7.91065788269043

Token 6: '(total' (ID: 39744)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '(' → logprob: -0.013179297558963299
    2. 's' → logprob: -4.513179302215576
    3. '_' → logprob: -7.138179302215576
    4. '(
' → logprob: -8.388178825378418
    5. 'ulate' → logprob: -9.138178825378418
    6. '```' → logprob: -9.263178825378418
    7. 'u' → logprob: -9.513178825378418
    8. '*' → logprob: -9.638178825378418
    9. '**' → logprob: -9.888178825378418
    10. 'ulating' → logprob: -10.013178825378418

Token 7: ',' (ID: 11)
  Prédit: '):'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '):' → logprob: -0.2209095060825348
    2. ',' → logprob: -1.7209094762802124
    3. ')' → logprob: -4.720909595489502
    4. '+' → logprob: -5.470909595489502
    5. ':' → logprob: -6.845909595489502
    6. '*' → logprob: -6.845909595489502
    7. 's' → logprob: -6.970909595489502
    8. '=' → logprob: -7.345909595489502
    9. '_' → logprob: -7.470909595489502
    10. ' *' → logprob: -7.720909595489502

Token 8: ' group' (ID: 3566)
  Prédit: ' value'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' value' → logprob: -0.4117703139781952
    2. ' count' → logprob: -2.2867703437805176
    3. ' x' → logprob: -2.6617703437805176
    4. ' divisor' → logprob: -2.9117703437805176
    5. ' factor' → logprob: -4.286770343780518
    6. ' amount' → logprob: -4.286770343780518
    7. ' number' → logprob: -4.536770343780518
    8. ' increment' → logprob: -4.536770343780518
    9. ' num' → logprob: -5.036770343780518
    10. ' current' → logprob: -5.161770343780518

Token 9: '):
' (ID: 1883)
  Prédit: 's'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 's' → logprob: -0.24646146595478058
    2. '_size' → logprob: -1.9964615106582642
    3. '):' → logprob: -3.3714613914489746
    4. '_s' → logprob: -3.4964613914489746
    5. '_' → logprob: -4.121461391448975
    6. ')' → logprob: -7.371461391448975
    7. ')_' → logprob: -8.746461868286133
    8. '):
' → logprob: -8.871461868286133
    9. '_count' → logprob: -8.996461868286133
    10. 'ed' → logprob: -9.496461868286133

Token 10: '   ' (ID: 271)
  Prédit: ':'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ':' → logprob: -0.6872607469558716
    2. '   ' → logprob: -0.8122607469558716
    3. '):' → logprob: -3.937260627746582
    4. '    ' → logprob: -4.687260627746582
    5. ' :' → logprob: -4.812260627746582
    6. '```' → logprob: -5.312260627746582
    7. '(' → logprob: -5.687260627746582
    8. '():' → logprob: -6.562260627746582
    9. '':' → logprob: -6.812260627746582
    10. ''' → logprob: -7.187260627746582

Token 11: ' return' (ID: 622)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.07823078334331512
    2. ' return' → logprob: -3.328230857849121
    3. ' ' → logprob: -4.328230857849121
    4. '    ' → logprob: -4.453230857849121
    5. 'return' (adapté à ' return') → logprob: -5.703230857849121
    6. ':' → logprob: -6.328230857849121
    7. '```' → logprob: -6.578230857849121
    8. ' if' → logprob: -6.703230857849121
    9. ' 
' → logprob: -7.328230857849121
    10. '(' → logprob: -7.328230857849121

Token 12: ' math' (ID: 13324)
  Prédit: ' total'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' total' → logprob: -0.04810794070363045
    2. 'total' → logprob: -3.423107862472534
    3. ' math' → logprob: -4.298108100891113
    4. ' ' → logprob: -7.923108100891113
    5. ' (' → logprob: -8.423108100891113
    6. 'math' → logprob: -9.423108100891113
    7. '(total' → logprob: -9.798108100891113
    8. ' int' → logprob: -11.298108100891113
    9. ' max' → logprob: -11.923108100891113
    10. '    ' → logprob: -12.173108100891113

Token 13: '.ceil' (ID: 60295)
  Prédit: '.'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '.' → logprob: -0.020963752642273903
    2. '.sqrt' → logprob: -3.895963668823242
    3. '.ceil' → logprob: -8.645963668823242
    4. '.pow' → logprob: -9.270963668823242
    5. '.sin' → logprob: -9.770963668823242
    6. '.floor' → logprob: -10.395963668823242
    7. '.atan' → logprob: -11.145963668823242
    8. '.pi' → logprob: -11.270963668823242
    9. '.factor' → logprob: -11.770963668823242
    10. ' .' → logprob: -12.145963668823242

Token 14: '((' (ID: 2054)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(' → logprob: -0.000170882252859883
    2. ' (' → logprob: -10.000170707702637
    3. '<|end|>' → logprob: -10.375170707702637
    4. '(math' → logprob: -10.625170707702637
    5. '(total' → logprob: -11.000170707702637
    6. '('' → logprob: -11.625170707702637
    7. '(user' → logprob: -12.125170707702637
    8. '((' → logprob: -12.250170707702637
    9. '(Math' → logprob: -12.250170707702637
    10. '(token' → logprob: -12.750170707702637

Token 15: 'total' (ID: 9577)
  Prédit: 'total'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'total' → logprob: -0.014174322597682476
    2. ' total' → logprob: -4.264174461364746
    3. '   ' → logprob: -12.139174461364746
    4. '(total' → logprob: -12.889174461364746
    5. ')' → logprob: -13.764174461364746
    6. '	total' → logprob: -13.889174461364746
    7. ' ' → logprob: -14.639174461364746
    8. '_total' → logprob: -15.889174461364746
    9. 'group' → logprob: -16.01417350769043
    10. 'float' → logprob: -16.51417350769043

Token 16: ' -' (ID: 533)
  Prédit: ' /'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' /' → logprob: -0.022629160434007645
    2. '/' → logprob: -3.8976292610168457
    3. ')' → logprob: -6.897629261016846
    4. ' ' → logprob: -7.897629261016846
    5. ' )' → logprob: -8.272628784179688
    6. '/group' → logprob: -8.522628784179688
    7. ')/' → logprob: -9.022628784179688
    8. '    ' → logprob: -10.022628784179688
    9. ')/(' → logprob: -10.522628784179688
    10. '   ' → logprob: -10.897628784179688

Token 17: ' group' (ID: 3566)
  Prédit: ' group'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' group' → logprob: -0.05935828387737274
    2. 'group' → logprob: -3.1843583583831787
    3. '1' → logprob: -4.5593581199646
    4. ' ' → logprob: -5.6843581199646
    5. ' (' → logprob: -6.8093581199646
    6. '(group' → logprob: -7.1843581199646
    7. ' total' → logprob: -9.059358596801758
    8. ')' → logprob: -9.309358596801758
    9. '2' → logprob: -10.059358596801758
    10. 'total' → logprob: -10.059358596801758

Token 18: ')' (ID: 8)
  Prédit: ')'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')' → logprob: -0.005987812764942646
    2. ' )' → logprob: -5.380987644195557
    3. ')/' → logprob: -6.630987644195557
    4. '+' → logprob: -10.755988121032715
    5. ' +' → logprob: -11.505988121032715
    6. '   ' → logprob: -11.880988121032715
    7. ')/(' → logprob: -13.005988121032715
    8. '1' → logprob: -13.630988121032715
    9. ' ' → logprob: -14.130988121032715
    10. '  ' → logprob: -14.255988121032715

Token 19: ' /' (ID: 820)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')' → logprob: -0.08016680181026459
    2. ' /' → logprob: -3.080166816711426
    3. ')/' → logprob: -4.205166816711426
    4. ' )' → logprob: -4.330166816711426
    5. '/' → logprob: -5.955166816711426
    6. '))' → logprob: -8.455166816711426
    7. '   ' → logprob: -9.580166816711426
    8. ')/(' → logprob: -10.080166816711426
    9. ')))' → logprob: -11.205166816711426
    10. ' ' → logprob: -11.205166816711426

Token 20: ' (' (ID: 350)
  Prédit: 'group'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'group' → logprob: -0.2811577320098877
    2. ' group' → logprob: -1.4061577320098877
    3. ')' → logprob: -13.656157493591309
    4. '   ' → logprob: -13.781157493591309
    5. '2' → logprob: -13.906157493591309
    6. ' ' → logprob: -14.031157493591309
    7. '"group' → logprob: -14.031157493591309
    8. '(group' → logprob: -14.281157493591309
    9. 'total' → logprob: -14.406157493591309
    10. '	group' → logprob: -14.906157493591309

Token 21: 'group' (ID: 4323)
  Prédit: 'group'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'group' → logprob: -0.12708894908428192
    2. ' group' → logprob: -2.127089023590088
    3. '2' → logprob: -10.25208854675293
    4. '   ' → logprob: -10.37708854675293
    5. 'total' → logprob: -10.50208854675293
    6. ' ' → logprob: -11.25208854675293
    7. ')' → logprob: -11.25208854675293
    8. '"group' → logprob: -11.62708854675293
    9. '	group' → logprob: -12.25208854675293
    10. '(group' → logprob: -12.50208854675293

Token 22: ' -' (ID: 533)
  Prédit: '))'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '))' → logprob: -0.044386886060237885
    2. ')' → logprob: -3.169386863708496
    3. '+' → logprob: -7.669386863708496
    4. ')))' → logprob: -8.044386863708496
    5. ' ))' → logprob: -8.294386863708496
    6. ' +' → logprob: -8.544386863708496
    7. ' )' → logprob: -10.419386863708496
    8. '   ' → logprob: -10.544386863708496
    9. ')+' → logprob: -10.669386863708496
    10. '**' → logprob: -11.169386863708496

Token 23: ' ' (ID: 220)
  Prédit: '1'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '1' → logprob: -0.020544106140732765
    2. ' ' → logprob: -3.8955440521240234
    3. '2' → logprob: -14.270544052124023
    4. '0' → logprob: -14.520544052124023
    5. ')' → logprob: -14.645544052124023
    6. '  ' → logprob: -16.333044052124023
    7. 'math' → logprob: -16.458044052124023
    8. ' math' → logprob: -16.520544052124023
    9. ' )' → logprob: -16.708044052124023
    10. '   ' → logprob: -17.020544052124023

Token 24: '1' (ID: 16)
  Prédit: '1'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '1' → logprob: -0.0001825642102630809
    2. ' ' → logprob: -8.625182151794434
    3. '2' → logprob: -13.375182151794434
    4. ')' → logprob: -14.000182151794434
    5. '0' → logprob: -15.375182151794434
    6. 'math' → logprob: -16.43768310546875
    7. '   ' → logprob: -16.93768310546875
    8. '１' → logprob: -17.06268310546875
    9. '  ' → logprob: -17.25018310546875
    10. '3' → logprob: -17.25018310546875

Token 25: '))' (ID: 915)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')' → logprob: -0.5759892463684082
    2. '))' → logprob: -0.8259892463684082
    3. ')))' → logprob: -9.95098876953125
    4. ')
' → logprob: -14.32598876953125
    5. ' )' → logprob: -15.20098876953125
    6. '),' → logprob: -15.45098876953125
    7. '))
' → logprob: -15.57598876953125
    8. ' ))' → logprob: -15.95098876953125
    9. ')>' → logprob: -16.20098876953125
    10. ')}' → logprob: -16.32598876953125

Token 26: ' +' (ID: 659)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ')' → logprob: -0.05452698841691017
    2. '<|end|>' → logprob: -3.1795270442962646
    3. '*' → logprob: -5.4295268058776855
    4. '+' → logprob: -6.1795268058776855
    5. '
' → logprob: -6.5545268058776855
    6. '\n' → logprob: -6.5545268058776855
    7. '(' → logprob: -7.0545268058776855
    8. '```' → logprob: -7.9295268058776855
    9. '\' → logprob: -8.429527282714844
    10. '<|end|>' → logprob: -8.929527282714844

Token 27: ' ' (ID: 220)
  Prédit: '1'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '1' → logprob: -0.034541718661785126
    2. ' ' → logprob: -3.409541606903076
    3. ' total' → logprob: -8.284542083740234
    4. '2' → logprob: -8.409542083740234
    5. ' math' → logprob: -8.909542083740234
    6. ' group' → logprob: -9.284542083740234
    7. 'total' → logprob: -9.409542083740234
    8. '0' → logprob: -9.534542083740234
    9. 'group' → logprob: -11.034542083740234
    10. 'math' → logprob: -11.659542083740234

Token 28: '1' (ID: 16)
  Prédit: '1'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '1' → logprob: -0.010802087374031544
    2. ' ' → logprob: -5.510802268981934
    3. 'total' → logprob: -6.010802268981934
    4. 'group' → logprob: -6.260802268981934
    5. ' group' → logprob: -7.260802268981934
    6. '2' → logprob: -7.385802268981934
    7. '0' → logprob: -7.885802268981934
    8. ' total' → logprob: -8.010802268981934
    9. 'math' → logprob: -8.635802268981934
    10. ' math' → logprob: -9.260802268981934

Token 29: '

' (ID: 279)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '(' → logprob: -0.2302025854587555
    2. ')' → logprob: -2.8552026748657227
    3. '
' → logprob: -2.8552026748657227
    4. '<|end|>' → logprob: -2.8552026748657227
    5. '(
' → logprob: -4.480202674865723
    6. '\n' → logprob: -5.105202674865723
    7. '```' → logprob: -5.230202674865723
    8. '#' → logprob: -5.980202674865723
    9. '\' → logprob: -6.730202674865723
    10. ' ' → logprob: -6.730202674865723

Token 30: 'N' (ID: 45)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '(' → logprob: -0.06085122004151344
    2. ')' → logprob: -3.1858513355255127
    3. '(
' → logprob: -5.560851097106934
    4. '<|end|>' → logprob: -5.810851097106934
    5. '```' → logprob: -5.810851097106934
    6. '#' → logprob: -6.185851097106934
    7. '\n' → logprob: -6.310851097106934
    8. '
' → logprob: -6.935851097106934
    9. '\' → logprob: -7.060851097106934
    10. ' ' → logprob: -7.560851097106934

Token 31: '_K' (ID: 20555)
  Prédit: ' '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' ' → logprob: -0.704810619354248
    2. ' =' → logprob: -1.704810619354248
    3. ')' → logprob: -1.954810619354248
    4. '=' → logprob: -2.954810619354248
    5. '_' → logprob: -3.579810619354248
    6. ',' → logprob: -3.954810619354248
    7. '  ' → logprob: -4.204810619354248
    8. '<|end|>' → logprob: -4.204810619354248
    9. '.' → logprob: -4.704810619354248
    10. ' )' → logprob: -4.829810619354248

Token 32: ' =' (ID: 314)
  Prédit: ' ='
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' =' → logprob: -1.0659024715423584
    2. 'S' → logprob: -1.4409024715423584
    3. 'EY' → logprob: -1.8159024715423584
    4. '=' → logprob: -2.1909024715423584
    5. ')' → logprob: -3.1909024715423584
    6. 'E' → logprob: -3.8159024715423584
    7. ',' → logprob: -4.1909027099609375
    8. 'A' → logprob: -4.4409027099609375
    9. 'eys' → logprob: -5.0659027099609375
    10. 'I' → logprob: -5.3159027099609375

Token 33: ' input' (ID: 3422)
  Prédit: ' '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' ' → logprob: -0.4753091037273407
    2. '10' → logprob: -1.475309133529663
    3. ' [' → logprob: -3.100309133529663
    4. ' int' → logprob: -3.850309133529663
    5. 'int' → logprob: -4.225308895111084
    6. '[int' → logprob: -4.350308895111084
    7. '100' → logprob: -4.600308895111084
    8. '5' → logprob: -4.600308895111084
    9. '[' → logprob: -5.100308895111084
    10. ' (' → logprob: -5.475308895111084

Token 34: '()
' (ID: 1234)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '(' → logprob: -0.000983743229880929
    2. '("("' → logprob: -7.625983715057373
    3. '('' → logprob: -7.750983715057373
    4. '()' → logprob: -10.250984191894531
    5. '("")' → logprob: -11.500984191894531
    6. '(`' → logprob: -12.125984191894531
    7. '("' → logprob: -12.750984191894531
    8. '```' → logprob: -13.250984191894531
    9. '(
' → logprob: -13.375984191894531
    10. '(

' → logprob: -13.375984191894531

Token 35: 'N' (ID: 45)
  Prédit: '.split'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '.split' → logprob: -0.2769124507904053
    2. '.' → logprob: -1.7769124507904053
    3. '.strip' → logprob: -3.4019124507904053
    4. 'split' → logprob: -4.651912689208984
    5. '<|end|>' → logprob: -4.651912689208984
    6. '.readline' → logprob: -5.151912689208984
    7. '```' → logprob: -5.776912689208984
    8. ')' → logprob: -5.901912689208984
    9. ' ' → logprob: -7.151912689208984
    10. '.replace' → logprob: -7.151912689208984

Token 36: ',' (ID: 11)
  Prédit: '_K'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_K' → logprob: -0.6405065655708313
    2. '_' → logprob: -0.7655065655708313
    3. '_k' → logprob: -6.265506744384766
    4. ' =' → logprob: -6.890506744384766
    5. '=' → logprob: -7.390506744384766
    6. '.split' → logprob: -7.515506744384766
    7. '.' → logprob: -7.515506744384766
    8. ',' → logprob: -7.890506744384766
    9. '_=' → logprob: -8.015506744384766
    10. '_split' → logprob: -8.140506744384766

Token 37: ' K' (ID: 658)
  Prédit: 'K'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'K' → logprob: -0.25662967562675476
    2. ' K' → logprob: -1.5066297054290771
    3. '<|end|>' → logprob: -5.881629467010498
    4. ' ' → logprob: -6.756629467010498
    5. 'group' → logprob: -9.256629943847656
    6. '"' → logprob: -9.381629943847656
    7. 'space' → logprob: -9.506629943847656
    8. 'k' → logprob: -9.631629943847656
    9. ''' → logprob: -9.631629943847656
    10. ' =' → logprob: -9.756629943847656

Token 38: ' =' (ID: 314)
  Prédit: ' ='
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' =' → logprob: -0.07889870554208755
    2. '=' → logprob: -2.5788986682891846
    3. ',' → logprob: -12.328898429870605
    4. ' ' → logprob: -12.453898429870605
    5. ')' → logprob: -15.828898429870605
    6. ' ,' → logprob: -15.953898429870605
    7. '=input' → logprob: -16.828899383544922
    8. ' =
' → logprob: -16.953899383544922
    9. 's' → logprob: -17.078899383544922
    10. '```' → logprob: -17.078899383544922

Token 39: ' [' (ID: 723)
  Prédit: ' map'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' map' → logprob: -0.028997953981161118
    2. ' N' → logprob: -4.278997898101807
    3. 'map' → logprob: -4.278997898101807
    4. 'N' → logprob: -7.528997898101807
    5. ' [' → logprob: -9.028998374938965
    6. '[' → logprob: -9.028998374938965
    7. ' ' → logprob: -9.903998374938965
    8. ' input' → logprob: -11.028998374938965
    9. ' list' → logprob: -11.403998374938965
    10. '(map' → logprob: -12.403998374938965

Token 40: 'int' (ID: 491)
  Prédit: 'int'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'int' → logprob: -4.1080467781284824e-05
    2. ' int' → logprob: -10.125041007995605
    3. 'map' → logprob: -15.125041007995605
    4. '   ' → logprob: -15.625041007995605
    5. '(int' → logprob: -16.250041961669922
    6. '*' → logprob: -16.375041961669922
    7. ']int' → logprob: -16.375041961669922
    8. '```' → logprob: -16.375041961669922
    9. ' ' → logprob: -16.500041961669922
    10. '  ' → logprob: -17.625041961669922

Token 41: '(i' (ID: 3649)
  Prédit: '(x'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(x' → logprob: -0.062094736844301224
    2. '(i' → logprob: -2.8120946884155273
    3. '(s' → logprob: -9.687094688415527
    4. '(' → logprob: -11.062094688415527
    5. ']' → logprob: -11.062094688415527
    6. '(_)' → logprob: -11.687094688415527
    7. '(n' → logprob: -11.937094688415527
    8. '(a' → logprob: -12.312094688415527
    9. '(item' → logprob: -12.312094688415527
    10. '(N' → logprob: -12.937094688415527

Token 42: ')' (ID: 8)
  Prédit: ')'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')' → logprob: -0.00013560164370574057
    2. '(x' → logprob: -9.62513542175293
    3. ' )' → logprob: -10.12513542175293
    4. '())' → logprob: -11.12513542175293
    5. 'for' → logprob: -12.25013542175293
    6. '(' → logprob: -13.00013542175293
    7. '(i' → logprob: -13.12513542175293
    8. '()' → logprob: -13.50013542175293
    9. ' for' → logprob: -14.00013542175293
    10. ')x' → logprob: -14.50013542175293

Token 43: ' for' (ID: 395)
  Prédit: '(x'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(x' → logprob: -0.19498471915721893
    2. '(' → logprob: -2.1949846744537354
    3. '(input' → logprob: -4.4449849128723145
    4. ']' → logprob: -4.4449849128723145
    5. ')' → logprob: -4.8199849128723145
    6. '(n' → logprob: -4.8199849128723145
    7. ' for' → logprob: -4.9449849128723145
    8. '(s' → logprob: -5.3199849128723145
    9. '(i' → logprob: -5.6949849128723145
    10. '(token' → logprob: -5.8199849128723145

Token 44: ' i' (ID: 575)
  Prédit: ' N'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' N' → logprob: -0.1016160100698471
    2. ' i' → logprob: -2.8516159057617188
    3. 'N' → logprob: -3.9766159057617188
    4. ' ' → logprob: -4.226615905761719
    5. 'i' → logprob: -5.476615905761719
    6. '  ' → logprob: -7.351615905761719
    7. ' in' → logprob: -8.351615905761719
    8. '<|end|>' → logprob: -8.476615905761719
    9. '<|end|>' → logprob: -9.101615905761719
    10. ' input' → logprob: -9.851615905761719

Token 45: ' in' (ID: 306)
  Prédit: ' in'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' in' → logprob: -0.04655677080154419
    2. 'in' → logprob: -3.9215567111968994
    3. ' N' → logprob: -4.6715569496154785
    4. ' ' → logprob: -4.7965569496154785
    5. '(' → logprob: -5.6715569496154785
    6. '(N' → logprob: -5.9215569496154785
    7. 'N' → logprob: -6.5465569496154785
    8. '_' → logprob: -9.04655647277832
    9. '  ' → logprob: -9.67155647277832
    10. 'user' → logprob: -10.04655647277832

Token 46: ' N' (ID: 478)
  Prédit: 'N'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'N' → logprob: -0.061969030648469925
    2. ' N' → logprob: -2.811969041824341
    3. ' ' → logprob: -14.061968803405762
    4. 'input' → logprob: -14.936968803405762
    5. ' input' → logprob: -16.061969757080078
    6. '(N' → logprob: -16.686969757080078
    7. ')' → logprob: -17.811969757080078
    8. '	N' → logprob: -18.186969757080078
    9. '  ' → logprob: -18.311969757080078
    10. ' range' → logprob: -18.311969757080078

Token 47: '_K' (ID: 20555)
  Prédit: '_K'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_K' → logprob: -0.00033188972156494856
    2. '.split' → logprob: -8.75033187866211
    3. 'split' → logprob: -9.37533187866211
    4. 'K' → logprob: -10.50033187866211
    5. ')' → logprob: -10.87533187866211
    6. '.strip' → logprob: -11.50033187866211
    7. '```' → logprob: -11.87533187866211
    8. '_' → logprob: -11.87533187866211
    9. '_SPL' → logprob: -12.62533187866211
    10. '_.' → logprob: -12.87533187866211

Token 48: '.split' (ID: 10347)
  Prédit: '.split'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '.split' → logprob: -0.10522054880857468
    2. '.' → logprob: -2.4802205562591553
    3. '.strip' → logprob: -4.355220317840576
    4. 'split' → logprob: -5.855220317840576
    5. ' split' → logprob: -8.480220794677734
    6. ' .' → logprob: -8.605220794677734
    7. '.rstrip' → logprob: -10.480220794677734
    8. 'strip' → logprob: -11.605220794677734
    9. '().' → logprob: -12.105220794677734
    10. '.readline' → logprob: -12.855220794677734

Token 49: '()]
' (ID: 67155)
  Prédit: '(''
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '('' → logprob: -0.5894824266433716
    2. '()]' → logprob: -0.8394824266433716
    3. '()' → logprob: -4.589482307434082
    4. '(' → logprob: -5.839482307434082
    5. '("' → logprob: -7.964482307434082
    6. '(',' → logprob: -10.714482307434082
    7. '())' → logprob: -12.589482307434082
    8. '("("' → logprob: -12.589482307434082
    9. ']' → logprob: -13.339482307434082
    10. '()]
' → logprob: -13.714482307434082

Token 50: 'nums' (ID: 44465)
  Prédit: '
'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '
' → logprob: -0.5063135623931885
    2. 'result' → logprob: -1.6313135623931885
    3. 'print' → logprob: -1.6313135623931885
    4. '<|end|>' → logprob: -5.756313323974609
    5. '
' → logprob: -6.756313323974609
    6. 'results' → logprob: -7.506313323974609
    7. 'n' → logprob: -9.00631332397461
    8. ' print' → logprob: -9.13131332397461
    9. 'output' → logprob: -9.13131332397461
    10. '\n' → logprob: -9.25631332397461

Token 51: ' =' (ID: 314)
  Prédit: ' ='
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' =' → logprob: -0.11297190934419632
    2. '=' → logprob: -2.2379720211029053
    3. '[' → logprob: -9.737972259521484
    4. '[:]' → logprob: -10.237972259521484
    5. '.' → logprob: -10.487972259521484
    6. '=[]' → logprob: -12.237972259521484
    7. ' =[' → logprob: -12.487972259521484
    8. ')' → logprob: -12.487972259521484
    9. ' ' → logprob: -12.737972259521484
    10. ',' → logprob: -13.112972259521484

Token 52: ' list' (ID: 1562)
  Prédit: '['
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '[' → logprob: -0.502598762512207
    2. ' [' → logprob: -1.252598762512207
    3. '[input' → logprob: -3.127598762512207
    4. ' []' → logprob: -3.752598762512207
    5. '[]' → logprob: -4.002598762512207
    6. '[int' → logprob: -4.252598762512207
    7. '[list' → logprob: -5.127598762512207
    8. ' list' → logprob: -6.627598762512207
    9. '[i' → logprob: -6.877598762512207
    10. ' ' → logprob: -8.377598762512207

Token 53: '(map' (ID: 16946)
  Prédit: '(map'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(map' → logprob: -0.03865836560726166
    2. '(' → logprob: -3.288658380508423
    3. '(range' → logprob: -7.663658142089844
    4. '(int' → logprob: -9.163658142089844
    5. '()' → logprob: -10.913658142089844
    6. '(input' → logprob: -10.913658142089844
    7. '(
' → logprob: -13.288658142089844
    8. 'map' → logprob: -14.288658142089844
    9. '(

' → logprob: -14.538658142089844
    10. '(eval' → logprob: -14.538658142089844

Token 54: '(int' (ID: 2742)
  Prédit: '(int'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(int' → logprob: -0.0001450187264708802
    2. '(' → logprob: -9.000144958496094
    3. 'int' → logprob: -11.000144958496094
    4. '<int' → logprob: -13.500144958496094
    5. ',int' → logprob: -13.875144958496094
    6. '```' → logprob: -14.375144958496094
    7. '[int' → logprob: -15.250144958496094
    8. '=int' → logprob: -15.250144958496094
    9. ']int' → logprob: -15.375144958496094
    10. '(lambda' → logprob: -15.375144958496094

Token 55: ',' (ID: 11)
  Prédit: ',input'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ',input' → logprob: -0.09442305564880371
    2. '(input' → logprob: -2.5944230556488037
    3. ',' → logprob: -4.219423294067383
    4. '(' → logprob: -7.469423294067383
    5. 'input' → logprob: -9.344423294067383
    6. ',(' → logprob: -11.344423294067383
    7. ',int' → logprob: -11.469423294067383
    8. ' ,' → logprob: -11.594423294067383
    9. '(),' → logprob: -12.094423294067383
    10. ' input' → logprob: -12.594423294067383

Token 56: ' input' (ID: 3422)
  Prédit: 'input'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'input' → logprob: -0.048594068735837936
    2. ' input' → logprob: -3.0485939979553223
    3. ',input' → logprob: -13.29859447479248
    4. '(input' → logprob: -13.42359447479248
    5. 'range' → logprob: -13.67359447479248
    6. ' ' → logprob: -14.04859447479248
    7. '	input' → logprob: -14.17359447479248
    8. '=input' → logprob: -14.79859447479248
    9. '<input' → logprob: -16.173593521118164
    10. '   ' → logprob: -16.423593521118164

Token 57: '().' (ID: 1454)
  Prédit: '().'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '().' → logprob: -9.901345038088039e-05
    2. '()' → logprob: -9.250099182128906
    3. ' ().' → logprob: -13.250099182128906
    4. '(' → logprob: -14.750099182128906
    5. '()
' → logprob: -15.000099182128906
    6. '()))' → logprob: -15.875099182128906
    7. '   ' → logprob: -16.875099182128906
    8. ' ' → logprob: -17.625099182128906
    9. '())))' → logprob: -17.750099182128906
    10. '()

' → logprob: -17.875099182128906

Token 58: 'split' (ID: 13627)
  Prédit: 'split'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'split' → logprob: -0.0007136239437386394
    2. 'strip' → logprob: -7.25071382522583
    3. ' split' → logprob: -13.250713348388672
    4. 'rstrip' → logprob: -13.375713348388672
    5. '(split' → logprob: -15.500713348388672
    6. 'spl' → logprob: -16.875713348388672
    7. ')' → logprob: -16.875713348388672
    8. 's' → logprob: -17.125713348388672
    9. '.split' → logprob: -18.125713348388672
    10. 'sp' → logprob: -18.375713348388672

Token 59: '()));' (ID: 175746)
  Prédit: '()))'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '()))' → logprob: -0.03777451813220978
    2. '())' → logprob: -3.5377745628356934
    3. '()' → logprob: -4.912774562835693
    4. '(' → logprob: -7.787774562835693
    5. '))' → logprob: -8.662774085998535
    6. '()))
' → logprob: -10.912774085998535
    7. '())))' → logprob: -11.537774085998535
    8. ')' → logprob: -11.662774085998535
    9. '()));' → logprob: -11.912774085998535
    10. '(),' → logprob: -13.037774085998535

Token 60: ' res' (ID: 694)
  Prédit: 'result'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'result' → logprob: -0.4072217643260956
    2. 'for' → logprob: -2.407221794128418
    3. '
' → logprob: -2.657221794128418
    4. 'print' → logprob: -2.657221794128418
    5. 'total' → logprob: -4.157221794128418
    6. ' 
' → logprob: -4.157221794128418
    7. 'nums' → logprob: -4.282221794128418
    8. 'if' → logprob: -4.657221794128418
    9. 'count' → logprob: -4.782221794128418
    10. ' for' → logprob: -5.157221794128418

Token 61: ' =' (ID: 314)
  Prédit: ' ='
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' =' → logprob: -0.16075696051120758
    2. '=' → logprob: -1.9107569456100464
    3. ' ' → logprob: -8.660757064819336
    4. 's' → logprob: -9.035757064819336
    5. '=[]' → logprob: -9.035757064819336
    6. '[:]' → logprob: -11.035757064819336
    7. '.' → logprob: -11.160757064819336
    8. 'ult' → logprob: -11.285757064819336
    9. '  ' → logprob: -11.660757064819336
    10. 'ault' → logprob: -12.035757064819336

Token 62: ' None' (ID: 4662)
  Prédit: '0'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '0' → logprob: -0.5060521364212036
    2. ' ' → logprob: -1.7560521364212036
    3. ' []' → logprob: -2.131052017211914
    4. '[]' → logprob: -2.881052017211914
    5. 'do' → logprob: -3.131052017211914
    6. ' do' → logprob: -5.381052017211914
    7. '[' → logprob: -7.631052017211914
    8. '"' → logprob: -8.131052017211914
    9. ' [' → logprob: -9.256052017211914
    10. ' max' → logprob: -9.506052017211914

Token 63: '

' (ID: 279)
  Prédit: '
'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '
' → logprob: -0.09638388454914093
    2. 'for' → logprob: -3.596383810043335
    3. ' 
' → logprob: -3.596383810043335
    4. '<|end|>' → logprob: -4.596384048461914
    5. 'if' → logprob: -4.971384048461914
    6. '

' → logprob: -5.346384048461914
    7. '
' → logprob: -6.096384048461914
    8. ' for' → logprob: -6.221384048461914
    9. '' → logprob: -6.346384048461914
    10. ' ' → logprob: -6.346384048461914

Token 64: 'class' (ID: 1444)
  Prédit: 'for'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'for' → logprob: -0.530969500541687
    2. 'if' → logprob: -1.280969500541687
    3. 'res' → logprob: -2.5309696197509766
    4. ' for' → logprob: -4.530969619750977
    5. 'group' → logprob: -4.530969619750977
    6. ' if' → logprob: -5.030969619750977
    7. 'max' → logprob: -5.405969619750977
    8. 'total' → logprob: -5.655969619750977
    9. '
' → logprob: -5.780969619750977
    10. 's' → logprob: -6.280969619750977

Token 65: ' Dummy' (ID: 84970)
  Prédit: ' Solution'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' Solution' → logprob: -0.060932982712984085
    2. ' Calculator' → logprob: -3.3109328746795654
    3. ' Group' → logprob: -4.4359331130981445
    4. ' Solver' → logprob: -4.9359331130981445
    5. ' My' → logprob: -6.8109331130981445
    6. ' Counter' → logprob: -7.4359331130981445
    7. ' Processor' → logprob: -7.8109331130981445
    8. 'Solution' → logprob: -7.8109331130981445
    9. ' Calculation' → logprob: -9.060933113098145
    10. ' Result' → logprob: -9.185933113098145

Token 66: ':
' (ID: 734)
  Prédit: ':'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ':' → logprob: -0.0008976469398476183
    2. '():' → logprob: -7.3758978843688965
    3. ':
' → logprob: -8.625897407531738
    4. ' :' → logprob: -9.500897407531738
    5. '(object' → logprob: -11.750897407531738
    6. '(' → logprob: -12.625897407531738
    7. ':def' → logprob: -13.000897407531738
    8. '(D' → logprob: -14.375897407531738
    9. ' ():' → logprob: -15.000897407531738
    10. '):' → logprob: -15.125897407531738

Token 67: '   ' (ID: 271)
  Prédit: ':'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ':' → logprob: -0.2860359251499176
    2. '<|end|>' → logprob: -1.6610358953475952
    3. '
' → logprob: -4.411036014556885
    4. '   ' → logprob: -4.536036014556885
    5. '<|end|>' → logprob: -4.661036014556885
    6. ' pass' → logprob: -4.786036014556885
    7. '(' → logprob: -5.411036014556885
    8. ' ' → logprob: -5.661036014556885
    9. ' def' → logprob: -6.536036014556885
    10. '    ' → logprob: -6.536036014556885

Token 68: ' pass' (ID: 1853)
  Prédit: ' pass'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' pass' → logprob: -0.15499620139598846
    2. ' def' → logprob: -2.529996156692505
    3. '    ' → logprob: -3.404996156692505
    4. '   ' → logprob: -4.529996395111084
    5. 'pass' (adapté à ' pass') → logprob: -4.529996395111084
    6. 'def' → logprob: -5.029996395111084
    7. ' ' → logprob: -7.404996395111084
    8. ' 
' → logprob: -7.404996395111084
    9. '    
' → logprob: -7.529996395111084
    10. ' None' → logprob: -7.904996395111084

Token 69: '

' (ID: 279)
  Prédit: '
'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '
' → logprob: -0.7814422845840454
    2. '<|end|>' → logprob: -1.2814422845840454
    3. '

' → logprob: -2.031442165374756
    4. 'res' → logprob: -2.156442165374756
    5. 'dummy' → logprob: -4.906442165374756
    6. 'd' → logprob: -6.031442165374756
    7. '<|end|>' → logprob: -6.156442165374756
    8. 'def' → logprob: -6.156442165374756
    9. 'for' → logprob: -7.531442165374756
    10. 'n' → logprob: -7.656442165374756

Token 70: 'dummy' (ID: 67144)
  Prédit: '
'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '
' → logprob: -0.5883994102478027
    2. '<|end|>' → logprob: -1.4633994102478027
    3. 'res' → logprob: -1.8383994102478027
    4. 'd' → logprob: -3.8383994102478027
    5. 'dummy' → logprob: -4.338399410247803
    6. '

' → logprob: -4.588399410247803
    7. '<|end|>' → logprob: -5.713399410247803
    8. 'if' → logprob: -6.588399410247803
    9. 'for' → logprob: -6.713399410247803
    10. 'def' → logprob: -7.213399410247803

Token 71: ' =' (ID: 314)
  Prédit: '.'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '.' → logprob: -0.1842803955078125
    2. ' =' → logprob: -2.3092803955078125
    3. '=' → logprob: -2.6842803955078125
    4. ' .' → logprob: -8.684280395507812
    5. '.=' → logprob: -8.809280395507812
    6. ' ' → logprob: -9.059280395507812
    7. '_' → logprob: -9.934280395507812
    8. 'es' → logprob: -10.184280395507812
    9. '.D' → logprob: -10.309280395507812
    10. '<|end|>' → logprob: -10.434280395507812

Token 72: ' Dummy' (ID: 84970)
  Prédit: ' Dummy'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' Dummy' → logprob: -0.038042064756155014
    2. 'Dummy' → logprob: -3.2880420684814453
    3. ' dummy' → logprob: -14.413042068481445
    4. ' Dumb' → logprob: -18.663042068481445
    5. '_dummy' → logprob: -18.788042068481445
    6. '	D' → logprob: -19.538042068481445
    7. 'dummy' → logprob: -20.038042068481445
    8. ' None' → logprob: -20.538042068481445
    9. '<|end|>' → logprob: -20.663042068481445
    10. ' ' → logprob: -21.163042068481445

Token 73: '()
' (ID: 1234)
  Prédit: '
'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '
' → logprob: -0.4993801414966583
    2. '<|end|>' → logprob: -0.9993801116943359
    3. '

' → logprob: -4.499380111694336
    4. 'res' → logprob: -5.374380111694336
    5. '<|end|>' → logprob: -5.749380111694336
    6. '.' → logprob: -5.999380111694336
    7. 'if' → logprob: -6.999380111694336
    8. 'for' → logprob: -7.874380111694336
    9. '()' → logprob: -7.874380111694336
    10. 'def' → logprob: -7.999380111694336

Token 74: 'dummy' (ID: 67144)
  Prédit: ''
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False

Token 75: '.value' (ID: 4683)
  Prédit: '.'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '.' → logprob: -0.0017923936247825623
    2. '<|end|>' → logprob: -6.5017924308776855
    3. ' .' → logprob: -9.376791954040527
    4. '<|end|>' → logprob: -9.626791954040527
    5. '.<' → logprob: -10.126791954040527
    6. '.K' → logprob: -10.501791954040527
    7. '.
' → logprob: -11.501791954040527
    8. '.n' → logprob: -11.876791954040527
    9. '.

' → logprob: -12.126791954040527
    10. '.N' → logprob: -12.126791954040527

Token 76: ' =' (ID: 314)
  Prédit: ' ='
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' =' → logprob: -0.33420389890670776
    2. '=' → logprob: -1.7092039585113525
    3. '<|end|>' → logprob: -2.3342039585113525
    4. ' ' → logprob: -5.334203720092773
    5. '<|end|>' → logprob: -7.459203720092773
    6. ' is' → logprob: -8.084203720092773
    7. '=None' → logprob: -8.584203720092773
    8. ' None' → logprob: -9.209203720092773
    9. 'None' → logprob: -9.334203720092773
    10. '.' → logprob: -10.584203720092773

Token 77: ' None' (ID: 4662)
  Prédit: '0'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '0' → logprob: -0.08949857950210571
    2. 'nums' → logprob: -3.214498519897461
    3. ' ' → logprob: -4.714498519897461
    4. 'res' → logprob: -5.214498519897461
    5. 'do' → logprob: -5.339498519897461
    6. 'max' → logprob: -5.339498519897461
    7. 'math' → logprob: -5.339498519897461
    8. '[]' → logprob: -5.964498519897461
    9. '1' → logprob: -6.214498519897461
    10. '-' → logprob: -6.339498519897461

Token 78: '

' (ID: 279)
  Prédit: ''
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False

Token 79: 'if' (ID: 366)
  Prédit: 'for'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'for' → logprob: -0.10970264673233032
    2. 'if' → logprob: -2.8597025871276855
    3. 'res' → logprob: -3.1097025871276855
    4. ' for' → logprob: -7.2347025871276855
    5. 'i' → logprob: -8.109703063964844
    6. 'while' → logprob: -8.484703063964844
    7. 'max' → logprob: -8.484703063964844
    8. 'nums' → logprob: -9.109703063964844
    9. 'idx' → logprob: -9.609703063964844
    10. 'def' → logprob: -9.609703063964844

Token 80: ' K' (ID: 658)
  Prédit: ' K'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' K' → logprob: -0.5848525762557983
    2. ' N' → logprob: -1.0848525762557983
    3. 'K' → logprob: -3.584852695465088
    4. ' res' → logprob: -3.834852695465088
    5. ' nums' → logprob: -3.834852695465088
    6. 'N' → logprob: -3.959852695465088
    7. ' ' → logprob: -4.959852695465088
    8. 'nums' → logprob: -5.584852695465088
    9. ' len' → logprob: -6.459852695465088
    10. 'res' → logprob: -7.084852695465088

Token 81: ' ==' (ID: 951)
  Prédit: ' >'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' >' → logprob: -0.6758134365081787
    2. ' ==' → logprob: -1.0508134365081787
    3. '>' → logprob: -3.0508134365081787
    4. '==' → logprob: -3.0508134365081787
    5. ' <=' → logprob: -3.8008134365081787
    6. ' >=' → logprob: -4.550813674926758
    7. ' <' → logprob: -5.175813674926758
    8. ' ' → logprob: -5.675813674926758
    9. '<=' → logprob: -6.675813674926758
    10. ' !=' → logprob: -6.800813674926758

Token 82: ' N' (ID: 478)
  Prédit: '1'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '1' → logprob: -0.031825073063373566
    2. ' ' → logprob: -3.531825065612793
    3. '0' → logprob: -6.281825065612793
    4. '2' → logprob: -8.656825065612793
    5. '   ' → logprob: -12.031825065612793
    6. '3' → logprob: -12.031825065612793
    7. 'N' → logprob: -12.156825065612793
    8. '  ' → logprob: -12.906825065612793
    9. ' N' → logprob: -13.906825065612793
    10. '10' → logprob: -13.969325065612793

Token 83: ':
' (ID: 734)
  Prédit: ':'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ':' → logprob: -0.054991062730550766
    2. ':
' → logprob: -2.9299910068511963
    3. ' and' → logprob: -10.554990768432617
    4. ' :' → logprob: -10.679990768432617
    5. ' or' → logprob: -11.054990768432617
    6. ':
' → logprob: -11.054990768432617
    7. ' :
' → logprob: -11.804990768432617
    8. '   ' → logprob: -12.054990768432617
    9. ':return' → logprob: -12.054990768432617
    10. 'and' → logprob: -13.804990768432617

Token 84: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.0024687631521373987
    2. '
' → logprob: -6.627468585968018
    3. '    
' → logprob: -7.502468585968018
    4. 'res' → logprob: -7.752468585968018
    5. ' res' → logprob: -9.627469062805176
    6. 'print' → logprob: -10.127469062805176
    7. 'dummy' → logprob: -10.627469062805176
    8. ' print' → logprob: -12.127469062805176
    9. '  ' → logprob: -12.127469062805176
    10. '	res' → logprob: -12.502469062805176

Token 85: ' res' (ID: 694)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.7581666111946106
    2. 'print' → logprob: -1.0081665515899658
    3. 'res' (adapté à ' res') → logprob: -2.258166551589966
    4. '
' → logprob: -3.133166551589966
    5. ' print' → logprob: -4.383166790008545
    6. '    
' → logprob: -6.133166790008545
    7. ' res' → logprob: -6.133166790008545
    8. '0' → logprob: -8.133166313171387
    9. '1' → logprob: -8.383166313171387
    10. '    ' → logprob: -8.758166313171387

Token 86: ' =' (ID: 314)
  Prédit: ' ='
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' =' → logprob: -0.5759536027908325
    2. '=' → logprob: -0.8259536027908325
    3. ' ' → logprob: -12.200953483581543
    4. '.' → logprob: -12.200953483581543
    5. ',' → logprob: -14.325953483581543
    6. 's' → logprob: -14.575953483581543
    7. '.=' → logprob: -14.825953483581543
    8. ')' → logprob: -14.950953483581543
    9. '＝' → logprob: -14.950953483581543
    10. '<|end|>' → logprob: -14.950953483581543

Token 87: ' ' (ID: 220)
  Prédit: '1'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '1' → logprob: -0.9237474799156189
    2. 'nums' → logprob: -1.4237475395202637
    3. 'max' → logprob: -1.6737475395202637
    4. 'min' → logprob: -2.4237475395202637
    5. '0' → logprob: -3.1737475395202637
    6. 'sum' → logprob: -3.7987475395202637
    7. 'N' → logprob: -4.173747539520264
    8. 'K' → logprob: -6.048747539520264
    9. 'math' → logprob: -6.798747539520264
    10. ' ' → logprob: -7.548747539520264

Token 88: '1' (ID: 16)
  Prédit: '1'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '1' → logprob: -0.8359866142272949
    2. 'nums' → logprob: -1.335986614227295
    3. 'max' → logprob: -1.960986614227295
    4. 'min' → logprob: -2.710986614227295
    5. '0' → logprob: -2.710986614227295
    6. 'N' → logprob: -4.210986614227295
    7. 'sum' → logprob: -4.835986614227295
    8. 'math' → logprob: -5.960986614227295
    9. 'K' → logprob: -6.585986614227295
    10. 'len' → logprob: -7.210986614227295

Token 89: '
' (ID: 198)
  Prédit: '
'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '
' → logprob: -0.704833984375
    2. 'else' → logprob: -1.079833984375
    3. '<|end|>' → logprob: -2.579833984375
    4. ' else' → logprob: -2.704833984375
    5. 'elif' → logprob: -3.829833984375
    6. ' 
' → logprob: -7.704833984375
    7. ' elif' → logprob: -7.829833984375
    8. '<|end|>' → logprob: -8.079833984375
    9. '\n' → logprob: -8.704833984375
    10. '    
' → logprob: -9.954833984375

Token 90: 'else' (ID: 2807)
  Prédit: 'else'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'else' → logprob: -0.5672752261161804
    2. ' else' → logprob: -1.5672752857208252
    3. '
' → logprob: -1.9422752857208252
    4. '<|end|>' → logprob: -3.067275285720825
    5. 'elif' → logprob: -3.442275285720825
    6. ' elif' → logprob: -6.567275047302246
    7. '<|end|>' → logprob: -8.192275047302246
    8. '\n' → logprob: -8.567275047302246
    9. ' 
' → logprob: -8.692275047302246
    10. '```' → logprob: -9.817275047302246

Token 91: ':
' (ID: 734)
  Prédit: ':'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ':' → logprob: -0.0015462874434888363
    2. ':
' → logprob: -6.626546382904053
    3. ' :' → logprob: -8.626545906066895
    4. ',' → logprob: -10.751545906066895
    5. '<|end|>' → logprob: -11.751545906066895
    6. ':

' → logprob: -12.501545906066895
    7. ' if' → logprob: -13.501545906066895
    8. ' :
' → logprob: -13.501545906066895
    9. '<|end|>' → logprob: -13.751545906066895
    10. ':
' → logprob: -14.376545906066895

Token 92: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -1.3980042934417725
    2. 'nums' → logprob: -1.5230042934417725
    3. ' res' → logprob: -1.8980042934417725
    4. ' dummy' → logprob: -2.1480042934417725
    5. ' nums' → logprob: -2.3980042934417725
    6. 'res' → logprob: -2.6480042934417725
    7. 'dummy' → logprob: -2.7730042934417725
    8. 'max' → logprob: -5.023004531860352
    9. ' max' → logprob: -5.398004531860352
    10. ' for' → logprob: -5.398004531860352

Token 93: ' dummy' (ID: 34516)
  Prédit: 'nums'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'nums' → logprob: -0.2968553304672241
    2. 'res' → logprob: -2.2968554496765137
    3. 'dummy' (adapté à ' dummy') → logprob: -2.5468554496765137
    4. 'max' → logprob: -4.796855449676514
    5. 'sorted' → logprob: -4.796855449676514
    6. '   ' → logprob: -5.171855449676514
    7. 'for' → logprob: -5.296855449676514
    8. 'arr' → logprob: -5.546855449676514
    9. 'diff' → logprob: -5.671855449676514
    10. 's' → logprob: -5.671855449676514

Token 94: '.value' (ID: 4683)
  Prédit: '.value'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '.value' → logprob: -0.026810500770807266
    2. '.' → logprob: -3.65181040763855
    3. 'value' → logprob: -8.026810646057129
    4. ' .' → logprob: -8.901810646057129
    5. ').' → logprob: -12.026810646057129
    6. '<|end|>' → logprob: -12.401810646057129
    7. '```' → logprob: -12.776810646057129
    8. ' ' → logprob: -12.776810646057129
    9. '.values' → logprob: -13.151810646057129
    10. '
' → logprob: -13.151810646057129

Token 95: ' =' (ID: 314)
  Prédit: ' ='
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' =' → logprob: -0.061980683356523514
    2. '=' → logprob: -2.811980724334717
    3. ' ' → logprob: -11.811980247497559
    4. '<|end|>' → logprob: -13.186980247497559
    5. ' =
' → logprob: -14.061980247497559
    6. ',' → logprob: -14.311980247497559
    7. ')' → logprob: -14.436980247497559
    8. ' =)' → logprob: -15.311980247497559
    9. ' ' → logprob: -15.436980247497559
    10. '=None' → logprob: -15.436980247497559

Token 96: ' do' (ID: 621)
  Prédit: 'do'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'do' → logprob: -0.013912200927734375
    2. 'max' → logprob: -5.138912200927734
    3. ' do' → logprob: -5.263912200927734
    4. 'math' → logprob: -7.138912200927734
    5. ' max' → logprob: -7.638912200927734
    6. '0' → logprob: -7.638912200927734
    7. 'nums' → logprob: -8.013912200927734
    8. 'min' → logprob: -8.513912200927734
    9. ' math' → logprob: -9.013912200927734
    10. 'sum' → logprob: -9.388912200927734

Token 97: '_calc' (ID: 107191)
  Prédit: '_calc'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_calc' → logprob: -0.00013786651834379882
    2. '_' → logprob: -9.500138282775879
    3. '_cal' → logprob: -9.875138282775879
    4. 'calc' → logprob: -12.000138282775879
    5. '_do' → logprob: -13.250138282775879
    6. '_c' → logprob: -14.000138282775879
    7. '(calc' → logprob: -14.125138282775879
    8. '_val' → logprob: -15.125138282775879
    9. '_call' → logprob: -15.250138282775879
    10. 'Calc' → logprob: -15.625138282775879

Token 98: '(N' (ID: 10564)
  Prédit: '(total'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(total' → logprob: -0.3437667787075043
    2. '(N' → logprob: -1.7187668085098267
    3. '(' → logprob: -2.843766689300537
    4. '(nums' → logprob: -2.968766689300537
    5. '(num' → logprob: -7.218766689300537
    6. ' (' → logprob: -7.343766689300537
    7. '(len' → logprob: -8.468767166137695
    8. '(sum' → logprob: -8.593767166137695
    9. 'total' → logprob: -9.093767166137695
    10. '(n' → logprob: -9.843767166137695

Token 99: ',' (ID: 11)
  Prédit: ','
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ',' → logprob: -0.0018418944673612714
    2. ',K' → logprob: -6.501842021942139
    3. ' ,' → logprob: -8.00184154510498
    4. ',
' → logprob: -12.87684154510498
    5. '   ' → logprob: -14.50184154510498
    6. ' ' → logprob: -14.62684154510498
    7. ',k' → logprob: -14.87684154510498
    8. 'K' → logprob: -15.50184154510498
    9. '，' → logprob: -16.501842498779297
    10. ' K' → logprob: -16.626842498779297

Token 100: ' K' (ID: 658)
  Prédit: 'K'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'K' → logprob: -0.42870602011680603
    2. ' K' → logprob: -1.0537060499191284
    3. ' ' → logprob: -13.053706169128418
    4. '   ' → logprob: -14.178706169128418
    5. '	K' → logprob: -14.178706169128418
    6. ')' → logprob: -14.303706169128418
    7. '>K' → logprob: -14.803706169128418
    8. '  ' → logprob: -15.678706169128418
    9. ' ' → logprob: -15.678706169128418
    10. '    ' → logprob: -15.928706169128418

Token 101: ')
' (ID: 446)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')' → logprob: -1.0325924449716695e-05
    2. ')
' → logprob: -12.25001049041748
    3. ' )' → logprob: -12.37501049041748
    4. '))' → logprob: -13.87501049041748
    5. ')

' → logprob: -17.000009536743164
    6. ')`' → logprob: -17.000009536743164
    7. ')+' → logprob: -17.250009536743164
    8. '   ' → logprob: -17.750009536743164
    9. ')}' → logprob: -18.000009536743164
    10. ')
' → logprob: -18.000009536743164

Token 102: '   ' (ID: 271)
  Prédit: 'print'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'print' → logprob: -0.4900583326816559
    2. 'res' → logprob: -0.9900583028793335
    3. '\n' → logprob: -5.490058422088623
    4. 'if' → logprob: -5.490058422088623
    5. '#' → logprob: -6.240058422088623
    6. '\' → logprob: -6.365058422088623
    7. '
' → logprob: -6.615058422088623
    8. '<|end|>' → logprob: -6.990058422088623
    9. ' res' → logprob: -7.990058422088623
    10. '```' → logprob: -8.115057945251465

Token 103: ' res' (ID: 694)
  Prédit: 'res'
  Correct (stricte): False
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'res' (adapté à ' res') → logprob: -0.06643662601709366
    2. 'print' → logprob: -3.691436529159546
    3. '   ' → logprob: -4.191436767578125
    4. 'for' → logprob: -4.441436767578125
    5. 'if' → logprob: -4.816436767578125
    6. 'dummy' → logprob: -5.816436767578125
    7. ' res' → logprob: -7.316436767578125
    8. 'import' → logprob: -9.191436767578125
    9. 'while' → logprob: -9.316436767578125
    10. '#' → logprob: -9.316436767578125

Token 104: ' =' (ID: 314)
  Prédit: ' ='
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' =' → logprob: -0.01472384762018919
    2. '=' → logprob: -4.264723777770996
    3. ' ' → logprob: -7.514723777770996
    4. ' +=' → logprob: -11.514723777770996
    5. ' ==' → logprob: -13.139723777770996
    6. ' =)' → logprob: -14.014723777770996
    7. '    ' → logprob: -14.389723777770996
    8. ')' → logprob: -14.764723777770996
    9. ' !=' → logprob: -15.639723777770996
    10. '.' → logprob: -15.889723777770996

Token 105: ' dummy' (ID: 34516)
  Prédit: ' dummy'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' dummy' → logprob: -0.34898409247398376
    2. 'dummy' → logprob: -1.2239841222763062
    3. ' math' → logprob: -8.348983764648438
    4. '(dummy' → logprob: -9.473983764648438
    5. ' max' → logprob: -9.598983764648438
    6. ' ' → logprob: -10.098983764648438
    7. 'math' → logprob: -10.723983764648438
    8. 'max' → logprob: -11.098983764648438
    9. ' int' → logprob: -11.223983764648438
    10. ' min' → logprob: -11.473983764648438

Token 106: '.value' (ID: 4683)
  Prédit: '.value'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '.value' → logprob: -0.01019563339650631
    2. '.' → logprob: -5.385195732116699
    3. '
' → logprob: -6.010195732116699
    4. 'value' → logprob: -6.135195732116699
    5. '<|end|>' → logprob: -7.135195732116699
    6. ' ' → logprob: -11.1351957321167
    7. ' .' → logprob: -11.1351957321167
    8. '```' → logprob: -11.1351957321167
    9. '<|end|>' → logprob: -11.1351957321167
    10. '

' → logprob: -11.8851957321167

Token 107: '

' (ID: 279)
  Prédit: 'print'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'print' → logprob: -0.0034464688505977392
    2. '<|end|>' → logprob: -6.003446578979492
    3. '
' → logprob: -7.003446578979492
    4. ' print' → logprob: -10.628446578979492
    5. '\n' → logprob: -11.753446578979492
    6. '#' → logprob: -12.128446578979492
    7. '  
' → logprob: -12.628446578979492
    8. '#print' → logprob: -12.753446578979492
    9. '```' → logprob: -12.878446578979492
    10. '    
' → logprob: -13.003446578979492

Token 108: 'for' (ID: 1938)
  Prédit: 'print'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'print' → logprob: -3.452426608419046e-05
    2. '<|end|>' → logprob: -10.87503433227539
    3. '
' → logprob: -12.25003433227539
    4. ' print' → logprob: -13.12503433227539
    5. 'pr' → logprob: -13.12503433227539
    6. 'if' → logprob: -13.50003433227539
    7. '#print' → logprob: -13.50003433227539
    8. '\n' → logprob: -13.50003433227539
    9. '#' → logprob: -14.12503433227539
    10. '\' → logprob: -15.00003433227539

Token 109: ' _' (ID: 1175)
  Prédit: ' i'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' i' → logprob: -0.46170565485954285
    2. ' num' → logprob: -1.3367056846618652
    3. 'i' → logprob: -2.8367056846618652
    4. 'num' → logprob: -3.4617056846618652
    5. '_' → logprob: -4.336705684661865
    6. ' _' → logprob: -5.711705684661865
    7. ' n' → logprob: -8.336705207824707
    8. ' ' → logprob: -8.961705207824707
    9. 'n' → logprob: -9.086705207824707
    10. ' x' → logprob: -9.461705207824707

Token 110: ' in' (ID: 306)
  Prédit: ' in'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' in' → logprob: -0.007013725582510233
    2. 'in' → logprob: -5.00701379776001
    3. ' ' → logprob: -8.507013320922852
    4. 'n' → logprob: -10.007013320922852
    5. '_' → logprob: -10.882013320922852
    6. ' _' → logprob: -11.507013320922852
    7. 's' → logprob: -11.882013320922852
    8. ',' → logprob: -12.132013320922852
    9. 'i' → logprob: -13.132013320922852
    10. 'range' → logprob: -13.257013320922852

Token 111: ' range' (ID: 3352)
  Prédit: 'range'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'range' → logprob: -0.07889056205749512
    2. ' range' → logprob: -2.578890562057495
    3. ' ' → logprob: -15.453890800476074
    4. 'nums' → logprob: -16.078889846801758
    5. '(range' → logprob: -16.328889846801758
    6. '	range' → logprob: -16.578889846801758
    7. 'dummy' → logprob: -16.703889846801758
    8. 'res' → logprob: -16.703889846801758
    9. '   ' → logprob: -16.828889846801758
    10. '_' → logprob: -17.203889846801758

Token 112: '(' (ID: 7)
  Prédit: '(res'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(res' → logprob: -0.38663360476493835
    2. '(dummy' → logprob: -1.3866336345672607
    3. '(N' → logprob: -3.2616336345672607
    4. '(' → logprob: -3.5116336345672607
    5. '(K' → logprob: -6.261633396148682
    6. '(int' → logprob: -8.38663387298584
    7. '(n' → logprob: -9.01163387298584
    8. '(nums' → logprob: -9.13663387298584
    9. ' (' → logprob: -9.26163387298584
    10. '((' → logprob: -10.51163387298584

Token 113: '1' (ID: 16)
  Prédit: 'res'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'res' → logprob: -0.15127363801002502
    2. 'dummy' → logprob: -2.026273727416992
    3. ' res' → logprob: -5.276273727416992
    4. 'N' → logprob: -6.651273727416992
    5. ' dummy' → logprob: -6.776273727416992
    6. 'K' → logprob: -7.901273727416992
    7. '0' → logprob: -9.151273727416992
    8. ' N' → logprob: -9.401273727416992
    9. 'int' → logprob: -9.526273727416992
    10. ' ' → logprob: -9.526273727416992

Token 114: '):
' (ID: 1883)
  Prédit: ','
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ',' → logprob: -0.014303002506494522
    2. ' ,' → logprob: -4.264303207397461
    3. ',d' → logprob: -9.514303207397461
    4. ',res' → logprob: -9.889303207397461
    5. ',N' → logprob: -11.889303207397461
    6. 'res' → logprob: -12.764303207397461
    7. ',n' → logprob: -13.639303207397461
    8. '0' → logprob: -14.014303207397461
    9. '   ' → logprob: -14.389303207397461
    10. 'N' → logprob: -14.764303207397461

Token 115: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.10416565090417862
    2. ':' → logprob: -2.354165554046631
    3. ' :' → logprob: -6.854165554046631
    4. ' print' → logprob: -6.854165554046631
    5. ':
' → logprob: -7.979165554046631
    6. ' res' → logprob: -8.104166030883789
    7. 'print' → logprob: -8.104166030883789
    8. '    ' → logprob: -8.354166030883789
    9. '    
' → logprob: -8.354166030883789
    10. ' if' → logprob: -9.354166030883789

Token 116: ' print' (ID: 2123)
  Prédit: ' res'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' res' → logprob: -1.0100841522216797
    2. ' if' → logprob: -1.6350841522216797
    3. '   ' → logprob: -1.8850841522216797
    4. ' dummy' → logprob: -2.6350841522216797
    5. ' nums' → logprob: -2.8850841522216797
    6. ' pass' → logprob: -3.0100841522216797
    7. ' print' → logprob: -3.1350841522216797
    8. '    ' → logprob: -4.38508415222168
    9. 'print' (adapté à ' print') → logprob: -4.51008415222168
    10. ' for' → logprob: -4.76008415222168

Token 117: '(res' (ID: 8331)
  Prédit: '(res'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(res' → logprob: -0.005799740087240934
    2. 'res' → logprob: -5.255799770355225
    3. '(' → logprob: -7.505799770355225
    4. ' res' → logprob: -11.130799293518066
    5. ' (' → logprob: -14.130799293518066
    6. '('' → logprob: -15.380799293518066
    7. '_res' → logprob: -16.880800247192383
    8. '	res' → logprob: -17.005800247192383
    9. '(f' → logprob: -17.630800247192383
    10. '()' → logprob: -18.005800247192383

Token 118: ')' (ID: 8)
  Prédit: ')'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')' → logprob: -7.896309739408025e-07
    2. ')`' → logprob: -15.375000953674316
    3. ' )' → logprob: -15.500000953674316
    4. ')
' → logprob: -15.625000953674316
    5. '))' → logprob: -16.25
    6. '+' → logprob: -16.75
    7. ')}' → logprob: -17.875
    8. ')**' → logprob: -18.125
    9. '),' → logprob: -19.0
    10. ')#' → logprob: -19.125


RÉSUMÉ:
--------------------------------------------------------------------------------
Total des tokens analysés: 116
Tokens correctement prédits (1ère position, stricte): 40
Tokens correctement prédits (1ère position, avec adaptation): 41
Tokens correctement prédits (top 10): 86
Précision stricte (1ère position): 34.48%
Précision adaptée (1ère position): 35.34%
Précision (top 10): 74.14%
================================================================================
