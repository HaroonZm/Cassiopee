================================================================================
ANALYSE DE PRÉDICTION TOKEN PAR TOKEN (BATCH API)
Date: 2025-06-04 20:01:51
Modèle de tokenisation: gpt-4o-mini
================================================================================

SCRIPT ANALYSÉ:
--------------------------------------------------------------------------------
def main():
    A, B, T = map(int, input().split())
    print(T // A * B)

if __name__ == '__main__':
    main()
--------------------------------------------------------------------------------

RÉSULTATS D'ANALYSE TOKEN PAR TOKEN:
--------------------------------------------------------------------------------
Token 0: 'def' (ID: 1314)
  → Token d'amorce (pas de prédiction)

Token 1: ' main' (ID: 2758)
  → Token d'amorce (pas de prédiction)

Token 2: '():
' (ID: 8595)
  → Token d'amorce (pas de prédiction)

Token 3: '   ' (ID: 271)
  Prédit: '\'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '\' → logprob: -0.27454787492752075
    2. '\n' → logprob: -1.774547815322876
    3. '   ' → logprob: -3.524547815322876
    4. '(' → logprob: -4.399548053741455
    5. ' 
' → logprob: -5.149548053741455
    6. '    
' → logprob: -5.274548053741455
    7. ' ' → logprob: -5.524548053741455
    8. ''' → logprob: -5.649548053741455
    9. '```' → logprob: -6.274548053741455
    10. '    ' → logprob: -6.399548053741455

Token 4: ' A' (ID: 355)
  Prédit: 'print'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'print' → logprob: -0.5843620896339417
    2. '   ' → logprob: -1.4593620300292969
    3. 'pass' → logprob: -2.209362030029297
    4. 'return' → logprob: -2.834362030029297
    5. '#' → logprob: -4.209362030029297
    6. 'p' → logprob: -5.209362030029297
    7. '```' → logprob: -5.709362030029297
    8. 'r' → logprob: -5.709362030029297
    9. '\' → logprob: -5.959362030029297
    10. 'a' → logprob: -6.084362030029297

Token 5: ',' (ID: 11)
  Prédit: '.'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '.' → logprob: -0.535333514213562
    2. '=' → logprob: -1.410333514213562
    3. '[' → logprob: -2.4103336334228516
    4. ' =' → logprob: -2.7853336334228516
    5. ',' → logprob: -4.785333633422852
    6. ')' → logprob: -6.410333633422852
    7. '[:]' → logprob: -6.785333633422852
    8. '+' → logprob: -7.160333633422852
    9. '   ' → logprob: -7.160333633422852
    10. '.append' → logprob: -7.285333633422852

Token 6: ' B' (ID: 418)
  Prédit: ' B'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' B' → logprob: -0.11804915964603424
    2. 'B' → logprob: -2.243049144744873
    3. ' ' → logprob: -5.368049144744873
    4. ' =' → logprob: -8.868049621582031
    5. '_' → logprob: -9.618049621582031
    6. ' b' → logprob: -9.868049621582031
    7. '=' → logprob: -9.868049621582031
    8. '    ' → logprob: -9.868049621582031
    9. 'space' → logprob: -10.118049621582031
    10. 'b' → logprob: -10.493049621582031

Token 7: ',' (ID: 11)
  Prédit: '='
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '=' → logprob: -0.4872203767299652
    2. ' =' → logprob: -0.9872204065322876
    3. ',' → logprob: -4.362220287322998
    4. ')' → logprob: -9.362220764160156
    5. ' ,' → logprob: -9.987220764160156
    6. '   ' → logprob: -9.987220764160156
    7. ' ' → logprob: -10.612220764160156
    8. '<|end|>' → logprob: -10.862220764160156
    9. '_' → logprob: -10.987220764160156
    10. '.' → logprob: -11.362220764160156

Token 8: ' T' (ID: 353)
  Prédit: ' C'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' C' → logprob: -0.10341223329305649
    2. 'C' → logprob: -2.60341215133667
    3. ' =' → logprob: -4.47841215133667
    4. ' ' → logprob: -4.72841215133667
    5. '=' → logprob: -5.60341215133667
    6. '=C' → logprob: -8.853412628173828
    7. '  ' → logprob: -9.978412628173828
    8. '    ' → logprob: -10.353412628173828
    9. ',' → logprob: -10.478412628173828
    10. '   ' → logprob: -10.978412628173828

Token 9: ' =' (ID: 314)
  Prédit: ' ='
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' =' → logprob: -0.6326348185539246
    2. '=' → logprob: -0.7576348185539246
    3. '  ' → logprob: -10.757635116577148
    4. '   ' → logprob: -12.007635116577148
    5. ',' → logprob: -13.007635116577148
    6. ' ' → logprob: -13.257635116577148
    7. ')' → logprob: -13.882635116577148
    8. '_' → logprob: -14.507635116577148
    9. '=int' → logprob: -15.132635116577148
    10. ' =
' → logprob: -15.257635116577148

Token 10: ' map' (ID: 4014)
  Prédit: ' map'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' map' → logprob: -0.07897581905126572
    2. 'map' → logprob: -2.5789759159088135
    3. '0' → logprob: -10.453975677490234
    4. ' input' → logprob: -11.078975677490234
    5. ' ' → logprob: -11.328975677490234
    6. ' list' → logprob: -11.578975677490234
    7. 'input' → logprob: -11.828975677490234
    8. ' [' → logprob: -13.078975677490234
    9. 'list' → logprob: -13.078975677490234
    10. '	map' → logprob: -13.078975677490234

Token 11: '(int' (ID: 2742)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(' → logprob: -0.30274108052253723
    2. '(lambda' → logprob: -1.9277410507202148
    3. '(int' → logprob: -2.552741050720215
    4. '(str' → logprob: -3.552741050720215
    5. '<|end|>' → logprob: -5.427741050720215
    6. '```' → logprob: -6.552741050720215
    7. '<|end|>' → logprob: -8.177741050720215
    8. 'int' → logprob: -8.177741050720215
    9. '(
' → logprob: -8.427741050720215
    10. '('' → logprob: -8.677741050720215

Token 12: ',' (ID: 11)
  Prédit: '(input'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(input' → logprob: -0.3578679859638214
    2. ')' → logprob: -1.357867956161499
    3. 'input' → logprob: -3.232867956161499
    4. '(' → logprob: -6.107868194580078
    5. ',input' → logprob: -7.107868194580078
    6. ' input' → logprob: -7.482868194580078
    7. ',' → logprob: -7.857868194580078
    8. '=input' → logprob: -9.982868194580078
    9. '<input' → logprob: -10.232868194580078
    10. ')(' → logprob: -10.732868194580078

Token 13: ' input' (ID: 3422)
  Prédit: 'input'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'input' → logprob: -0.4740939140319824
    2. ' input' → logprob: -0.9740939140319824
    3. ')' → logprob: -11.59909439086914
    4. '(input' → logprob: -11.97409439086914
    5. '=input' → logprob: -14.47409439086914
    6. '	input' → logprob: -15.22409439086914
    7. ',input' → logprob: -15.34909439086914
    8. ' ' → logprob: -15.84909439086914
    9. '<input' → logprob: -15.84909439086914
    10. ' )' → logprob: -17.34909439086914

Token 14: '().' (ID: 1454)
  Prédit: '().'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '().' → logprob: -0.03480654954910278
    2. '())' → logprob: -3.659806489944458
    3. ')' → logprob: -5.409806728363037
    4. '()' → logprob: -5.534806728363037
    5. '()))' → logprob: -10.909806251525879
    6. '(' → logprob: -11.784806251525879
    7. '))' → logprob: -12.159806251525879
    8. '());' → logprob: -12.159806251525879
    9. '();)' → logprob: -13.034806251525879
    10. '()),' → logprob: -13.659806251525879

Token 15: 'split' (ID: 13627)
  Prédit: 'split'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'split' → logprob: -0.00017243190086446702
    2. 'strip' → logprob: -8.87517261505127
    3. 'rstrip' → logprob: -10.37517261505127
    4. ' split' → logprob: -14.25017261505127
    5. '(split' → logprob: -15.00017261505127
    6. 'read' → logprob: -15.25017261505127
    7. ')' → logprob: -16.875171661376953
    8. 'spl' → logprob: -17.750171661376953
    9. ' readline' → logprob: -19.125171661376953
    10. '```' → logprob: -19.375171661376953

Token 16: '())
' (ID: 4574)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ')' → logprob: -0.013590727932751179
    2. '))' → logprob: -4.3885908126831055
    3. '())' → logprob: -6.8885908126831055
    4. '()' → logprob: -10.388590812683105
    5. ')))' → logprob: -11.513590812683105
    6. '()))' → logprob: -12.013590812683105
    7. '`)' → logprob: -13.013590812683105
    8. '),' → logprob: -13.138590812683105
    9. ')`' → logprob: -13.263590812683105
    10. ' )' → logprob: -13.513590812683105

Token 17: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.2626045346260071
    2. 'for' → logprob: -2.7626044750213623
    3. '<|end|>' → logprob: -3.2626044750213623
    4. '```' → logprob: -3.3876044750213623
    5. '\n' → logprob: -3.7626044750213623
    6. ' for' → logprob: -3.7626044750213623
    7. '
' → logprob: -4.387604713439941
    8. '    
' → logprob: -4.762604713439941
    9. ' ' → logprob: -5.137604713439941
    10. ')' → logprob: -5.637604713439941

Token 18: ' print' (ID: 2123)
  Prédit: 'for'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'for' → logprob: -0.11991491913795471
    2. ' for' → logprob: -2.619915008544922
    3. '   ' → logprob: -3.994915008544922
    4. 's' → logprob: -4.994915008544922
    5. 'result' → logprob: -5.244915008544922
    6. 'r' → logprob: -5.869915008544922
    7. 'count' → logprob: -6.494915008544922
    8. '```' → logprob: -6.869915008544922
    9. 'total' → logprob: -7.369915008544922
    10. 'f' → logprob: -7.369915008544922

Token 19: '(T' (ID: 7014)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '(' → logprob: -0.00045045334263704717
    2. '(A' → logprob: -8.250450134277344
    3. '((' → logprob: -9.375450134277344
    4. '('' → logprob: -9.875450134277344
    5. '("("' → logprob: -10.750450134277344
    6. '("' → logprob: -11.250450134277344
    7. '(sum' → logprob: -12.375450134277344
    8. '()' → logprob: -12.500450134277344
    9. '(max' → logprob: -13.500450134277344
    10. '(len' → logprob: -13.875450134277344

Token 20: ' //' (ID: 602)
  Prédit: '//'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '//' → logprob: -0.32072851061820984
    2. ' //' → logprob: -1.6957285404205322
    3. ')' → logprob: -2.6957285404205322
    4. '*' → logprob: -3.9457285404205322
    5. ' *' → logprob: -5.945728302001953
    6. ' )' → logprob: -7.445728302001953
    7. ' ' → logprob: -7.820728302001953
    8. '   ' → logprob: -8.695728302001953
    9. ')//' → logprob: -10.195728302001953
    10. '"' → logprob: -10.195728302001953

Token 21: ' A' (ID: 355)
  Prédit: 'A'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'A' → logprob: -0.000838576874230057
    2. ' A' → logprob: -7.125838756561279
    3. 'B' → logprob: -10.625838279724121
    4. ' ' → logprob: -12.875838279724121
    5. '	A' → logprob: -13.250838279724121
    6. '_A' → logprob: -13.875838279724121
    7. 'a' → logprob: -13.875838279724121
    8. ')' → logprob: -13.875838279724121
    9. '  ' → logprob: -14.500838279724121
    10. '   ' → logprob: -14.875838279724121

Token 22: ' *' (ID: 425)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')' → logprob: -0.0029925592243671417
    2. '*' → logprob: -5.877992630004883
    3. '*)' → logprob: -9.627992630004883
    4. ' )' → logprob: -10.002992630004883
    5. '))' → logprob: -10.627992630004883
    6. ')*' → logprob: -11.002992630004883
    7. ' *' → logprob: -11.127992630004883
    8. ')
' → logprob: -12.377992630004883
    9. '*A' → logprob: -12.502992630004883
    10. '`)' → logprob: -12.752992630004883

Token 23: ' B' (ID: 418)
  Prédit: 'B'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'B' → logprob: -0.04300912097096443
    2. ' B' → logprob: -3.168009042739868
    3. ' ' → logprob: -12.418008804321289
    4. ')' → logprob: -13.418008804321289
    5. '	B' → logprob: -13.918008804321289
    6. '   ' → logprob: -14.168008804321289
    7. '(B' → logprob: -14.168008804321289
    8. '(' → logprob: -14.668008804321289
    9. '  ' → logprob: -14.793008804321289
    10. 'C' → logprob: -15.543008804321289

Token 24: ')

' (ID: 1029)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ')' → logprob: -4.008129963040119e-06
    2. '))' → logprob: -13.250003814697266
    3. ' )' → logprob: -13.375003814697266
    4. '`)' → logprob: -15.375003814697266
    5. ')`' → logprob: -15.875003814697266
    6. '')' → logprob: -16.250003814697266
    7. ')))' → logprob: -16.750003814697266
    8. '```' → logprob: -17.250003814697266
    9. '）' → logprob: -17.500003814697266
    10. ')
' → logprob: -17.500003814697266

Token 25: 'if' (ID: 366)
  Prédit: ''
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False

Token 26: ' __' (ID: 2516)
  Prédit: ' __'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' __' → logprob: -0.006110686343163252
    2. '__' → logprob: -5.131110668182373
    3. ' ' → logprob: -8.881111145019531
    4. '_' → logprob: -10.506111145019531
    5. ' ' → logprob: -11.506111145019531
    6. ' True' → logprob: -12.756111145019531
    7. ' _' → logprob: -14.631111145019531
    8. ' ​' → logprob: -15.006111145019531
    9. '  ' → logprob: -15.131111145019531
    10. ' ___' → logprob: -15.131111145019531

Token 27: 'name' (ID: 897)
  Prédit: '__'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '__' → logprob: -0.07445157319307327
    2. ' ==' → logprob: -2.9494516849517822
    3. '==' → logprob: -4.449451446533203
    4. '.' → logprob: -5.324451446533203
    5. '__.__' → logprob: -6.824451446533203
    6. '.__' → logprob: -7.574451446533203
    7. ' __' → logprob: -7.574451446533203
    8. '_' → logprob: -9.074451446533203
    9. '[' → logprob: -9.074451446533203
    10. ' .' → logprob: -9.449451446533203

Token 28: '__' (ID: 771)
  Prédit: '__'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '__' → logprob: -1.0921942703134846e-05
    2. '_' → logprob: -11.62501049041748
    3. '___' → logprob: -13.87501049041748
    4. '____' → logprob: -14.25001049041748
    5. '__.__' → logprob: -15.87501049041748
    6. '__

' → logprob: -16.125011444091797
    7. '__
' → logprob: -17.500011444091797
    8. '__)' → logprob: -17.500011444091797
    9. '__('' → logprob: -18.000011444091797
    10. '__[' → logprob: -18.500011444091797

Token 29: ' ==' (ID: 951)
  Prédit: ' =='
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' ==' → logprob: -0.3242399990558624
    2. '__' → logprob: -1.32423996925354
    3. '==' → logprob: -4.574240207672119
    4. '"' → logprob: -8.949239730834961
    5. ' =' → logprob: -8.949239730834961
    6. '.' → logprob: -8.949239730834961
    7. '=="' → logprob: -9.824239730834961
    8. '=' → logprob: -10.199239730834961
    9. '.__' → logprob: -10.824239730834961
    10. '__.__' → logprob: -10.949239730834961

Token 30: ' '__' (ID: 28278)
  Prédit: '"'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '"' → logprob: -0.16029825806617737
    2. ''' → logprob: -1.910298228263855
    3. ' "__' → logprob: -10.035298347473145
    4. '__' → logprob: -10.660298347473145
    5. ' '__' → logprob: -12.785298347473145
    6. ' "' → logprob: -12.785298347473145
    7. '"user' → logprob: -14.535298347473145
    8. '"name' → logprob: -15.910298347473145
    9. ' '' → logprob: -16.535297393798828
    10. '`' → logprob: -16.660297393798828

Token 31: 'main' (ID: 7731)
  Prédit: 'main'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'main' → logprob: -1.4855663721391466e-05
    2. 'name' → logprob: -11.375015258789062
    3. 'm' → logprob: -13.500015258789062
    4. '__' → logprob: -13.625015258789062
    5. '_main' → logprob: -14.625015258789062
    6. ' main' → logprob: -16.000015258789062
    7. 'ma' → logprob: -17.000015258789062
    8. '__':
' → logprob: -17.500015258789062
    9. ' '__' → logprob: -18.250015258789062
    10. 'maine' → logprob: -18.750015258789062

Token 32: '__':
' (ID: 39314)
  Prédit: '__'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '__' → logprob: -0.02329031564295292
    2. '__':
' → logprob: -3.7732903957366943
    3. '_' → logprob: -10.398290634155273
    4. '__:' → logprob: -11.523290634155273
    5. '__('' → logprob: -13.023290634155273
    6. '__.' → logprob: -13.523290634155273
    7. ''' → logprob: -15.523290634155273
    8. '__":
' → logprob: -15.523290634155273
    9. '___' → logprob: -15.773290634155273
    10. '_'' → logprob: -15.898290634155273

Token 33: '   ' (ID: 271)
  Prédit: ' main'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' main' → logprob: -0.006502201315015554
    2. '   ' → logprob: -5.756502151489258
    3. 'main' → logprob: -6.006502151489258
    4. '	main' → logprob: -7.381502151489258
    5. '(main' → logprob: -9.506502151489258
    6. '<|end|>' → logprob: -9.506502151489258
    7. '    
' → logprob: -10.006502151489258
    8. '```' → logprob: -11.506502151489258
    9. '_main' → logprob: -11.756502151489258
    10. ' ' → logprob: -12.506502151489258

Token 34: ' main' (ID: 2758)
  Prédit: 'main'
  Correct (stricte): False
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'main' (adapté à ' main') → logprob: -0.20141451060771942
    2. ' main' → logprob: -1.7014144659042358
    3. '	main' → logprob: -13.951414108276367
    4. '   ' → logprob: -16.451414108276367
    5. '(main' → logprob: -16.951414108276367
    6. '_main' → logprob: -16.951414108276367
    7. 'ma' → logprob: -17.201414108276367
    8. 'maine' → logprob: -17.326414108276367
    9. '.main' → logprob: -17.701414108276367
    10. 'mai' → logprob: -17.701414108276367

Token 35: '()' (ID: 416)
  Prédit: '()'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '()' → logprob: -0.00019412329129409045
    2. '(' → logprob: -8.750194549560547
    3. '`()' → logprob: -11.250194549560547
    4. '()
' → logprob: -11.875194549560547
    5. ']()' → logprob: -12.625194549560547
    6. '()`' → logprob: -12.750194549560547
    7. ' ()' → logprob: -13.250194549560547
    8. '```' → logprob: -13.250194549560547
    9. '|()
' → logprob: -13.750194549560547
    10. ')' → logprob: -14.125194549560547


RÉSUMÉ:
--------------------------------------------------------------------------------
Total des tokens analysés: 33
Tokens correctement prédits (1ère position, stricte): 11
Tokens correctement prédits (1ère position, avec adaptation): 12
Tokens correctement prédits (top 10): 25
Précision stricte (1ère position): 33.33%
Précision adaptée (1ère position): 36.36%
Précision (top 10): 75.76%
================================================================================
