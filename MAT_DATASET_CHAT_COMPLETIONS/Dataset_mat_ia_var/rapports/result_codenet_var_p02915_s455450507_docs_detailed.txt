================================================================================
ANALYSE DE PRÉDICTION TOKEN PAR TOKEN (BATCH API)
Date: 2025-06-04 19:45:12
Modèle de tokenisation: gpt-4o-mini
================================================================================

SCRIPT ANALYSÉ:
--------------------------------------------------------------------------------
def compute_cube(n):
    """
    Calcule le cube d'un nombre entier.
    
    Args:
        n (int): Le nombre entier dont on souhaite calculer le cube.
    
    Returns:
        int: Le cube de n (n*n*n).
    """
    return n * n * n

def main():
    """
    Fonction principale du programme. Elle demande à l'utilisateur de saisir un entier,
    puis affiche le cube de cet entier.
    """
    # Demande à l'utilisateur de saisir un nombre entier
    n = int(input("Entrez un entier : "))
    
    # Calcule le cube de l'entier grâce à la fonction compute_cube
    result = compute_cube(n)
    
    # Affiche le résultat
    print(result)

# Appel de la fonction principale pour exécuter le programme
if __name__ == "__main__":
    main()
--------------------------------------------------------------------------------

RÉSULTATS D'ANALYSE TOKEN PAR TOKEN:
--------------------------------------------------------------------------------
Token 0: 'def' (ID: 1314)
  → Token d'amorce (pas de prédiction)

Token 1: ' compute' (ID: 23864)
  → Token d'amorce (pas de prédiction)

Token 2: '_cube' (ID: 171900)
  → Token d'amorce (pas de prédiction)

Token 3: '(n' (ID: 2406)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '(' → logprob: -0.017831360921263695
    2. '_' → logprob: -4.517831325531006
    3. '```' → logprob: -5.267831325531006
    4. '(_' → logprob: -8.142831802368164
    5. '_cube' → logprob: -8.767831802368164
    6. '(x' → logprob: -8.767831802368164
    7. '<|end|>' → logprob: -8.892831802368164
    8. ' (' → logprob: -9.392831802368164
    9. '("("' → logprob: -9.517831802368164
    10. 'def' → logprob: -9.642831802368164

Token 4: '):
' (ID: 1883)
  Prédit: '):'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '):' → logprob: -0.28151214122772217
    2. ')' → logprob: -1.4065121412277222
    3. '**' → logprob: -9.531512260437012
    4. ':' → logprob: -9.781512260437012
    5. ')n' → logprob: -9.906512260437012
    6. '*' → logprob: -10.156512260437012
    7. '(n' → logprob: -10.656512260437012
    8. '):
' → logprob: -10.781512260437012
    9. ')**' → logprob: -11.031512260437012
    10. '```' → logprob: -11.156512260437012

Token 5: '   ' (ID: 271)
  Prédit: ':'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ':' → logprob: -0.05040397867560387
    2. '   ' → logprob: -3.0504040718078613
    3. '():' → logprob: -7.800404071807861
    4. ':
' → logprob: -8.300403594970703
    5. '```' → logprob: -8.300403594970703
    6. '(' → logprob: -8.425403594970703
    7. ':return' → logprob: -8.550403594970703
    8. '):' → logprob: -8.675403594970703
    9. '    
' → logprob: -10.300403594970703
    10. ' :' → logprob: -10.300403594970703

Token 6: ' """
' (ID: 7037)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.035485491156578064
    2. ' ' → logprob: -3.7854855060577393
    3. 'return' → logprob: -5.28548526763916
    4. ' return' → logprob: -5.41048526763916
    5. '```' → logprob: -6.91048526763916
    6. '    ' → logprob: -7.03548526763916
    7. '  ' → logprob: -8.28548526763916
    8. '`' → logprob: -9.41048526763916
    9. '    
' → logprob: -9.53548526763916
    10. '(' → logprob: -10.03548526763916

Token 7: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.6629072427749634
    2. '"""' → logprob: -1.1629072427749634
    3. 'r' → logprob: -3.162907123565674
    4. ' ' → logprob: -3.287907123565674
    5. ' """' → logprob: -3.412907123565674
    6. ''''' → logprob: -4.037907123565674
    7. ')' → logprob: -4.287907123565674
    8. ''' → logprob: -5.412907123565674
    9. '"""
' → logprob: -5.412907123565674
    10. 'return' → logprob: -5.662907123565674

Token 8: ' Cal' (ID: 4453)
  Prédit: 'Calculate'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'Calculate' → logprob: -1.1140038967132568
    2. 'Calcul' → logprob: -1.2390038967132568
    3. 'Returns' → logprob: -2.114003896713257
    4. 'Compute' → logprob: -2.364003896713257
    5. '"""' → logprob: -2.739003896713257
    6. 'Comput' → logprob: -3.239003896713257
    7. 'C' → logprob: -3.614003896713257
    8. 'Return' → logprob: -3.864003896713257
    9. '   ' → logprob: -4.989004135131836
    10. ''''' → logprob: -6.364004135131836

Token 9: 'cule' (ID: 45017)
  Prédit: 'culate'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'culate' → logprob: -0.3022927939891815
    2. 'cul' → logprob: -1.677292823791504
    3. 'c' → logprob: -2.802292823791504
    4. 'cu' → logprob: -5.177292823791504
    5. ' c' → logprob: -6.052292823791504
    6. '   ' → logprob: -6.302292823791504
    7. 'l' → logprob: -7.177292823791504
    8. 'cula' → logprob: -7.302292823791504
    9. '```' → logprob: -7.802292823791504
    10. '  ' → logprob: -7.802292823791504

Token 10: ' le' (ID: 505)
  Prédit: 's'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 's' → logprob: -0.8101669549942017
    2. 'te' → logprob: -0.8101669549942017
    3. 'r' → logprob: -2.560166835784912
    4. 'tes' → logprob: -3.810166835784912
    5. 't' → logprob: -5.810166835784912
    6. '   ' → logprob: -6.185166835784912
    7. '_' → logprob: -6.435166835784912
    8. 'u' → logprob: -6.810166835784912
    9. 'l' → logprob: -7.060166835784912
    10. '```' → logprob: -7.810166835784912

Token 11: ' cube' (ID: 46822)
  Prédit: ' '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' ' → logprob: -0.4592747092247009
    2. ' cube' → logprob: -1.0842747688293457
    3. '   ' → logprob: -4.209274768829346
    4. '  ' → logprob: -4.459274768829346
    5. ' volume' → logprob: -6.834274768829346
    6. 's' → logprob: -7.584274768829346
    7. ' ' → logprob: -7.959274768829346
    8. 'cube' → logprob: -8.084274291992188
    9. '    ' → logprob: -8.459274291992188
    10. ' \' → logprob: -8.834274291992188

Token 12: ' d' (ID: 272)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.4030632972717285
    2. ' ' → logprob: -1.6530632972717285
    3. ')' → logprob: -3.2780632972717285
    4. ''' → logprob: -3.7780632972717285
    5. '(' → logprob: -4.0280632972717285
    6. ' de' → logprob: -4.1530632972717285
    7. '```' → logprob: -4.6530632972717285
    8. '  ' → logprob: -5.1530632972717285
    9. '`' → logprob: -5.2780632972717285
    10. 'd' → logprob: -5.2780632972717285

Token 13: ''un' (ID: 9788)
  Prédit: 'e'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'e' → logprob: -0.7888298630714417
    2. ''un' → logprob: -1.2888298034667969
    3. 'u' → logprob: -2.663829803466797
    4. ''' → logprob: -2.663829803466797
    5. ' ' → logprob: -2.788829803466797
    6. 'a' → logprob: -3.413829803466797
    7. 'n' → logprob: -4.413829803466797
    8. ' un' → logprob: -4.913829803466797
    9. '`' → logprob: -5.288829803466797
    10. 'un' → logprob: -5.663829803466797

Token 14: ' nombre' (ID: 9733)
  Prédit: ' nombre'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' nombre' → logprob: -0.19424493610858917
    2. ' ' → logprob: -1.9442449808120728
    3. 'nombre' → logprob: -3.944244861602783
    4. 'n' → logprob: -5.069244861602783
    5. ' entier' → logprob: -5.569244861602783
    6. ' n' → logprob: -6.194244861602783
    7. ' nombres' → logprob: -8.319245338439941
    8. 'élé' → logprob: -8.569245338439941
    9. ' number' → logprob: -8.819245338439941
    10. 'e' → logprob: -8.819245338439941

Token 15: ' entier' (ID: 80473)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.10671544820070267
    2. '```' → logprob: -2.981715440750122
    3. '.' → logprob: -3.856715440750122
    4. ')' → logprob: -5.106715679168701
    5. ''' → logprob: -5.481715679168701
    6. '\' → logprob: -5.731715679168701
    7. '`' → logprob: -5.981715679168701
    8. '\n' → logprob: -6.356715679168701
    9. ' ' → logprob: -6.481715679168701
    10. '``' → logprob: -6.606715679168701

Token 16: '.
' (ID: 558)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.03325821831822395
    2. '\n' → logprob: -4.783258438110352
    3. '.' → logprob: -4.908258438110352
    4. ' ' → logprob: -5.033258438110352
    5. '\' → logprob: -5.908258438110352
    6. '```' → logprob: -6.283258438110352
    7. ':' → logprob: -6.908258438110352
    8. '  ' → logprob: -7.158258438110352
    9. ''' → logprob: -7.408258438110352
    10. '(' → logprob: -8.033258438110352

Token 17: '    
' (ID: 1944)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.05366067960858345
    2. '```' → logprob: -4.428660869598389
    3. ')' → logprob: -4.553660869598389
    4. '"""
' → logprob: -4.928660869598389
    5. '"""' → logprob: -4.928660869598389
    6. '`' → logprob: -5.553660869598389
    7. '"' → logprob: -5.803660869598389
    8. '    
' → logprob: -6.428660869598389
    9. ''' → logprob: -6.553660869598389
    10. '\n' → logprob: -6.803660869598389

Token 18: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.001694461447186768
    2. '"""' → logprob: -7.376694679260254
    3. ' ' → logprob: -7.626694679260254
    4. '    ' → logprob: -9.126694679260254
    5. '```' → logprob: -9.251694679260254
    6. 'return' → logprob: -9.376694679260254
    7. ' """' → logprob: -9.626694679260254
    8. '  ' → logprob: -9.751694679260254
    9. ')' → logprob: -10.126694679260254
    10. 'r' → logprob: -10.376694679260254

Token 19: ' Args' (ID: 39185)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.0004468772385735065
    2. 'return' → logprob: -8.125447273254395
    3. '"""' → logprob: -9.625447273254395
    4. '    ' → logprob: -10.375447273254395
    5. '```' → logprob: -11.125447273254395
    6. ' ' → logprob: -11.500447273254395
    7. '  ' → logprob: -11.500447273254395
    8. '   ' → logprob: -12.000447273254395
    9. '       ' → logprob: -12.875447273254395
    10. ' ' → logprob: -13.000447273254395

Token 20: ':
' (ID: 734)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.569652795791626
    2. ' :' → logprob: -1.944652795791626
    3. ':' → logprob: -2.069652795791626
    4. '```' → logprob: -2.944652795791626
    5. '[' → logprob: -3.569652795791626
    6. ')' → logprob: -3.944652795791626
    7. '(n' → logprob: -4.444652557373047
    8. '):' → logprob: -4.694652557373047
    9. ',' → logprob: -4.819652557373047
    10. ''' → logprob: -5.069652557373047

Token 21: '       ' (ID: 309)
  Prédit: ' n'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' n' → logprob: -0.6373625993728638
    2. 'n' → logprob: -0.7623625993728638
    3. '   ' → logprob: -5.387362480163574
    4. '    ' → logprob: -9.137362480163574
    5. '```' → logprob: -10.637362480163574
    6. ' ' → logprob: -11.137362480163574
    7. ' )' → logprob: -11.887362480163574
    8. '	n' → logprob: -12.012362480163574
    9. ')' → logprob: -12.512362480163574
    10. '  ' → logprob: -13.012362480163574

Token 22: ' n' (ID: 297)
  Prédit: 'n'
  Correct (stricte): False
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'n' (adapté à ' n') → logprob: -0.011214634403586388
    2. ' n' → logprob: -4.511214733123779
    3. '   ' → logprob: -8.761214256286621
    4. '       ' → logprob: -12.261214256286621
    5. '	n' → logprob: -13.261214256286621
    6. '`' → logprob: -13.511214256286621
    7. '```' → logprob: -14.011214256286621
    8. '    ' → logprob: -14.386214256286621
    9. ' `' → logprob: -15.511214256286621
    10. 'self' → logprob: -16.011215209960938

Token 23: ' (' (ID: 350)
  Prédit: '):'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '):' → logprob: -0.2284938246011734
    2. ')' → logprob: -1.9784938097000122
    3. ':' → logprob: -3.7284939289093018
    4. '<|end|>' → logprob: -4.103493690490723
    5. ' ):' → logprob: -4.478493690490723
    6. ' )' → logprob: -5.353493690490723
    7. '   ' → logprob: -5.728493690490723
    8. ' :' → logprob: -6.478493690490723
    9. '<|end|>' → logprob: -6.478493690490723
    10. '):
' → logprob: -7.103493690490723

Token 24: 'int' (ID: 491)
  Prédit: 'int'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'int' → logprob: -0.00015979631280060858
    2. ' int' → logprob: -8.750160217285156
    3. '   ' → logprob: -13.625160217285156
    4. '```' → logprob: -16.500160217285156
    5. '(int' → logprob: -20.625160217285156
    6. '	int' → logprob: -20.875160217285156
    7. '[int' → logprob: -20.875160217285156
    8. ':int' → logprob: -20.875160217285156
    9. '       ' → logprob: -21.125160217285156
    10. 'integer' → logprob: -21.250160217285156

Token 25: '):' (ID: 3127)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')' → logprob: -0.22631338238716125
    2. '):' → logprob: -1.6013133525848389
    3. '   ' → logprob: -7.851313591003418
    4. ' )' → logprob: -8.226313591003418
    5. ' ):' → logprob: -9.101313591003418
    6. '```' → logprob: -9.476313591003418
    7. '):
' → logprob: -10.601313591003418
    8. ' ' → logprob: -12.226313591003418
    9. '    ' → logprob: -12.351313591003418
    10. '[int' → logprob: -12.976313591003418

Token 26: ' Le' (ID: 2018)
  Prédit: ' un'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' un' → logprob: -0.8053178191184998
    2. '<|end|>' → logprob: -2.0553178787231445
    3. ' Le' → logprob: -2.1803178787231445
    4. ' The' → logprob: -2.5553178787231445
    5. '   ' → logprob: -2.8053178787231445
    6. ' ' → logprob: -3.0553178787231445
    7. ')' → logprob: -3.8053178787231445
    8. '    ' → logprob: -3.8053178787231445
    9. ' Un' → logprob: -4.1803178787231445
    10. ' l' → logprob: -4.3053178787231445

Token 27: ' nombre' (ID: 9733)
  Prédit: ' nombre'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' nombre' → logprob: -0.04505953937768936
    2. ' ' → logprob: -3.2950594425201416
    3. 'nombre' → logprob: -5.045059680938721
    4. ' entier' → logprob: -8.920059204101562
    5. ' numéro' → logprob: -9.045059204101562
    6. '   ' → logprob: -9.295059204101562
    7. '  ' → logprob: -9.670059204101562
    8. ' cube' → logprob: -9.795059204101562
    9. 'n' → logprob: -10.920059204101562
    10. ' number' → logprob: -11.170059204101562

Token 28: ' entier' (ID: 80473)
  Prédit: ' à'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' à' → logprob: -0.12080927193164825
    2. '   ' → logprob: -3.120809316635132
    3. ' ' → logprob: -3.495809316635132
    4. ' dont' → logprob: -3.870809316635132
    5. '    ' → logprob: -5.370809078216553
    6. ' auquel' → logprob: -5.995809078216553
    7. ' entier' → logprob: -6.120809078216553
    8. ')' → logprob: -6.370809078216553
    9. '```' → logprob: -6.870809078216553
    10. ' donné' → logprob: -6.995809078216553

Token 29: ' dont' (ID: 11562)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ')' → logprob: -0.424841970205307
    2. '   ' → logprob: -1.1748420000076294
    3. ' à' → logprob: -3.79984188079834
    4. ' )' → logprob: -5.04984188079834
    5. '```' → logprob: -5.92484188079834
    6. '    ' → logprob: -6.04984188079834
    7. '):' → logprob: -7.54984188079834
    8. '       ' → logprob: -7.92484188079834
    9. ' ' → logprob: -8.04984188079834
    10. '  ' → logprob: -8.42484188079834

Token 30: ' on' (ID: 402)
  Prédit: ' on'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' on' → logprob: -0.015187721699476242
    2. 'on' → logprob: -5.265187740325928
    3. '```' → logprob: -5.890187740325928
    4. ' le' → logprob: -6.265187740325928
    5. '   ' → logprob: -6.390187740325928
    6. ' vous' → logprob: -6.765187740325928
    7. ''on' → logprob: -6.890187740325928
    8. 'le' → logprob: -7.640187740325928
    9. ' il' → logprob: -7.640187740325928
    10. 'cube' → logprob: -9.14018726348877

Token 31: ' souhaite' (ID: 68897)
  Prédit: ' veut'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' veut' → logprob: -0.15935522317886353
    2. ' souhaite' → logprob: -2.1593551635742188
    3. 've' → logprob: -4.159355163574219
    4. '   ' → logprob: -4.909355163574219
    5. ' doit' → logprob: -6.159355163574219
    6. ' calc' → logprob: -6.284355163574219
    7. 'veux' → logprob: -6.909355163574219
    8. 'cube' → logprob: -7.159355163574219
    9. ' va' → logprob: -7.409355163574219
    10. ' veux' → logprob: -7.534355163574219

Token 32: ' calcul' (ID: 7559)
  Prédit: ' calcul'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' calcul' → logprob: -0.0628337562084198
    2. '   ' → logprob: -3.937833786010742
    3. 'calcul' → logprob: -4.062833786010742
    4. ' ' → logprob: -4.562833786010742
    5. ' calcular' → logprob: -5.687833786010742
    6. ' cube' → logprob: -5.937833786010742
    7. '    ' → logprob: -6.812833786010742
    8. ' compute' → logprob: -7.187833786010742
    9. ' calc' → logprob: -7.312833786010742
    10. ' obtenir' → logprob: -7.437833786010742

Token 33: 'er' (ID: 259)
  Prédit: 'er'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'er' → logprob: -0.003624308155849576
    2. 'e' → logprob: -5.628624439239502
    3. '   ' → logprob: -11.128623962402344
    4. '```' → logprob: -12.128623962402344
    5. 'é' → logprob: -14.253623962402344
    6. 'a' → logprob: -14.753623962402344
    7. '#' → logprob: -14.878623962402344
    8. 'ate' → logprob: -15.003623962402344
    9. 'uler' → logprob: -15.503623962402344
    10. 'le' → logprob: -15.628623962402344

Token 34: ' le' (ID: 505)
  Prédit: ' le'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' le' → logprob: -0.09613887220621109
    2. 'le' → logprob: -2.7211389541625977
    3. ' ' → logprob: -4.471138954162598
    4. '  ' → logprob: -4.721138954162598
    5. ' l' → logprob: -6.596138954162598
    6. 'l' → logprob: -6.971138954162598
    7. '```' → logprob: -6.971138954162598
    8. '_le' → logprob: -7.471138954162598
    9. '   ' → logprob: -7.471138954162598
    10. ' la' → logprob: -7.721138954162598

Token 35: ' cube' (ID: 46822)
  Prédit: ' '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' ' → logprob: -0.1858738660812378
    2. ' cube' → logprob: -1.8108738660812378
    3. 'cube' → logprob: -5.310873985290527
    4. '  ' → logprob: -7.685873985290527
    5. '   ' → logprob: -8.435873985290527
    6. 'c' → logprob: -9.060873985290527
    7. '_cube' → logprob: -9.810873985290527
    8. '_' → logprob: -10.060873985290527
    9. ' espace' → logprob: -10.185873985290527
    10. ' _' → logprob: -10.185873985290527

Token 36: '.
' (ID: 558)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.5352598428726196
    2. ')' → logprob: -0.9102598428726196
    3. '):' → logprob: -5.16025972366333
    4. '```' → logprob: -6.41025972366333
    5. ')
' → logprob: -6.78525972366333
    6. '\n' → logprob: -7.41025972366333
    7. ')\' → logprob: -7.53525972366333
    8. '"""' → logprob: -7.53525972366333
    9. '    
' → logprob: -7.66025972366333
    10. '
' → logprob: -8.160260200500488

Token 37: '    
' (ID: 1944)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.2522096037864685
    2. ')' → logprob: -2.2522096633911133
    3. '\n' → logprob: -3.2522096633911133
    4. '    
' → logprob: -3.8772096633911133
    5. ')
' → logprob: -4.002209663391113
    6. '"""
' → logprob: -4.252209663391113
    7. '```' → logprob: -5.127209663391113
    8. '
' → logprob: -5.627209663391113
    9. ' 
' → logprob: -5.752209663391113
    10. '"""' → logprob: -5.877209663391113

Token 38: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.2705245018005371
    2. 'Returns' → logprob: -1.520524501800537
    3. ' Returns' → logprob: -4.020524501800537
    4. 'Return' → logprob: -8.770524978637695
    5. '"""' → logprob: -9.020524978637695
    6. '"""
' → logprob: -10.270524978637695
    7. ' """
' → logprob: -10.395524978637695
    8. '    ' → logprob: -10.395524978637695
    9. ' returns' → logprob: -10.770524978637695
    10. '    
' → logprob: -11.270524978637695

Token 39: ' Returns' (ID: 9609)
  Prédit: 'Returns'
  Correct (stricte): False
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'Returns' (adapté à ' Returns') → logprob: -0.005150977522134781
    2. 'return' → logprob: -6.00515079498291
    3. 'Return' → logprob: -7.13015079498291
    4. '   ' → logprob: -7.38015079498291
    5. ' Returns' → logprob: -7.63015079498291
    6. '"""' → logprob: -8.25515079498291
    7. 'returns' → logprob: -8.25515079498291
    8. 'Retour' → logprob: -8.63015079498291
    9. '"""
' → logprob: -10.50515079498291
    10. '```' → logprob: -10.88015079498291

Token 40: ':
' (ID: 734)
  Prédit: ':'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ':' → logprob: -0.3232257664203644
    2. ' :' → logprob: -1.823225736618042
    3. '   ' → logprob: -2.573225736618042
    4. '<|end|>' → logprob: -4.198225975036621
    5. '```' → logprob: -4.948225975036621
    6. '    ' → logprob: -5.823225975036621
    7. ' =' → logprob: -6.198225975036621
    8. '):' → logprob: -6.698225975036621
    9. '<|end|>' → logprob: -6.698225975036621
    10. '=' → logprob: -6.823225975036621

Token 41: '       ' (ID: 309)
  Prédit: ' n'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' n' → logprob: -0.03141864016652107
    2. 'n' → logprob: -4.031418800354004
    3. ' int' → logprob: -4.781418800354004
    4. '   ' → logprob: -5.531418800354004
    5. '    ' → logprob: -7.656418800354004
    6. 'int' → logprob: -8.281418800354004
    7. ' ' → logprob: -10.156418800354004
    8. ' ' → logprob: -10.781418800354004
    9. '       ' → logprob: -11.406418800354004
    10. ')' → logprob: -11.531418800354004

Token 42: ' int' (ID: 677)
  Prédit: 'int'
  Correct (stricte): False
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'int' (adapté à ' int') → logprob: -0.57607501745224
    2. ' int' → logprob: -0.82607501745224
    3. '   ' → logprob: -8.951074600219727
    4. '       ' → logprob: -12.326074600219727
    5. 'n' → logprob: -14.701074600219727
    6. ' n' → logprob: -14.826074600219727
    7. '(int' → logprob: -15.201074600219727
    8. ':int' → logprob: -16.326074600219727
    9. ' ' → logprob: -16.451074600219727
    10. '  ' → logprob: -16.451074600219727

Token 43: ':' (ID: 25)
  Prédit: ':'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ':' → logprob: -0.011348310858011246
    2. ' :' → logprob: -5.011348247528076
    3. '   ' → logprob: -5.636348247528076
    4. '):' → logprob: -7.636348247528076
    5. '       ' → logprob: -8.511348724365234
    6. '    ' → logprob: -9.261348724365234
    7. ')' → logprob: -9.386348724365234
    8. '"""' → logprob: -9.886348724365234
    9. '```' → logprob: -10.136348724365234
    10. '           ' → logprob: -10.761348724365234

Token 44: ' Le' (ID: 2018)
  Prédit: ' n'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' n' → logprob: -0.12966784834861755
    2. ' Le' → logprob: -3.0046677589416504
    3. 'n' → logprob: -3.2546677589416504
    4. '   ' → logprob: -4.00466775894165
    5. '    ' → logprob: -5.12966775894165
    6. ' le' → logprob: -5.25466775894165
    7. 'Le' → logprob: -6.00466775894165
    8. ' return' → logprob: -7.75466775894165
    9. 'le' → logprob: -8.254668235778809
    10. ' ' → logprob: -8.504668235778809

Token 45: ' cube' (ID: 46822)
  Prédit: ' cube'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' cube' → logprob: -0.006349523086100817
    2. 'cube' → logprob: -5.631349563598633
    3. ' ' → logprob: -6.131349563598633
    4. '   ' → logprob: -8.131349563598633
    5. '  ' → logprob: -9.256349563598633
    6. '    ' → logprob: -9.756349563598633
    7. ' cub' → logprob: -10.506349563598633
    8. ' ' → logprob: -10.881349563598633
    9. ' nombre' → logprob: -11.381349563598633
    10. '     ' → logprob: -11.381349563598633

Token 46: ' de' (ID: 334)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.024712661281228065
    2. ' de' → logprob: -4.524712562561035
    3. '    ' → logprob: -5.149712562561035
    4. '       ' → logprob: -5.774712562561035
    5. ' du' → logprob: -6.399712562561035
    6. '    
' → logprob: -7.399712562561035
    7. '```' → logprob: -7.524712562561035
    8. '  ' → logprob: -7.524712562561035
    9. 'de' → logprob: -7.649712562561035
    10. ')' → logprob: -9.274712562561035

Token 47: ' n' (ID: 297)
  Prédit: ' n'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' n' → logprob: -0.019508961588144302
    2. 'n' → logprob: -4.3945088386535645
    3. ' ' → logprob: -5.0195088386535645
    4. ' ' → logprob: -8.394509315490723
    5. ' l' → logprob: -9.894509315490723
    6. ' `' → logprob: -10.519509315490723
    7. ' le' → logprob: -10.769509315490723
    8. ' un' → logprob: -11.644509315490723
    9. '```' → logprob: -11.769509315490723
    10. '  ' → logprob: -12.019509315490723

Token 48: ' (' (ID: 350)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.30915769934654236
    2. '
' → logprob: -2.184157609939575
    3. '\n' → logprob: -3.184157609939575
    4. '}' → logprob: -3.434157609939575
    5. '```' → logprob: -3.684157609939575
    6. ')' → logprob: -3.934157609939575
    7. '.' → logprob: -4.059157848358154
    8. '"""' → logprob: -5.434157848358154
    9. '<|end|>' → logprob: -5.559157848358154
    10. '    
' → logprob: -6.059157848358154

Token 49: 'n' (ID: 77)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')' → logprob: -0.15595807135105133
    2. 'n' → logprob: -2.2809581756591797
    3. ' n' → logprob: -3.6559581756591797
    4. ')n' → logprob: -4.90595817565918
    5. ' )' → logprob: -5.40595817565918
    6. ').' → logprob: -5.65595817565918
    7. ')**' → logprob: -8.65595817565918
    8. '   ' → logprob: -8.78095817565918
    9. ')`' → logprob: -9.40595817565918
    10. '`)' → logprob: -9.53095817565918

Token 50: '*n' (ID: 58470)
  Prédit: ' **'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' **' → logprob: -0.030737608671188354
    2. '**' → logprob: -4.030737400054932
    3. ' *' → logprob: -4.780737400054932
    4. ')' → logprob: -6.905737400054932
    5. '   ' → logprob: -7.030737400054932
    6. ' ' → logprob: -7.280737400054932
    7. ' ' → logprob: -7.655737400054932
    8. '*' → logprob: -8.03073787689209
    9. '  ' → logprob: -8.40573787689209
    10. ')**' → logprob: -8.78073787689209

Token 51: '*n' (ID: 58470)
  Prédit: '*'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '*' → logprob: -0.004818849731236696
    2. '*n' → logprob: -5.504818916320801
    3. '*)' → logprob: -7.629818916320801
    4. ')' → logprob: -8.3798189163208
    5. ')*' → logprob: -11.0048189163208
    6. '*num' → logprob: -13.0048189163208
    7. ' *' → logprob: -13.1298189163208
    8. 'n' → logprob: -14.1298189163208
    9. '*m' → logprob: -14.8798189163208
    10. '*p' → logprob: -15.1298189163208

Token 52: ').
' (ID: 6294)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ')' → logprob: -1.2471589798224159e-05
    2. ').' → logprob: -12.250012397766113
    3. ')**' → logprob: -13.125012397766113
    4. '}' → logprob: -13.875012397766113
    5. '   ' → logprob: -13.875012397766113
    6. ')
' → logprob: -14.250012397766113
    7. '**' → logprob: -14.375012397766113
    8. '```' → logprob: -14.500012397766113
    9. ')`' → logprob: -14.750012397766113
    10. ' )' → logprob: -14.750012397766113

Token 53: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.023333178833127022
    2. '\n' → logprob: -4.5233330726623535
    3. '"""' → logprob: -5.1483330726623535
    4. '    
' → logprob: -5.6483330726623535
    5. '```' → logprob: -6.7733330726623535
    6. '\' → logprob: -7.8983330726623535
    7. '
' → logprob: -7.8983330726623535
    8. ')' → logprob: -8.148333549499512
    9. '"\' → logprob: -9.273333549499512
    10. '"""
' → logprob: -9.398333549499512

Token 54: ' """
' (ID: 7037)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.06910818815231323
    2. '
' → logprob: -3.444108247756958
    3. '\n' → logprob: -4.194108009338379
    4. '"""' → logprob: -5.069108009338379
    5. '```' → logprob: -5.319108009338379
    6. ')' → logprob: -5.319108009338379
    7. '    
' → logprob: -5.944108009338379
    8. '\' → logprob: -8.569108009338379
    9. ' 
' → logprob: -8.694108009338379
    10. '"""
' (adapté à ' """
') → logprob: -8.819108009338379

Token 55: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.0009326597792096436
    2. '
' → logprob: -7.750932693481445
    3. 'return' → logprob: -7.750932693481445
    4. '    
' → logprob: -10.250932693481445
    5. ' return' → logprob: -10.625932693481445
    6. '\n' → logprob: -12.375932693481445
    7. '```' → logprob: -12.500932693481445
    8. '	return' → logprob: -13.375932693481445
    9. ' 
' → logprob: -14.250932693481445
    10. '    ' → logprob: -14.500932693481445

Token 56: ' return' (ID: 622)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.020110970363020897
    2. 'return' (adapté à ' return') → logprob: -4.145111083984375
    3. ' return' → logprob: -5.520111083984375
    4. 'r' → logprob: -10.895111083984375
    5. '    
' → logprob: -11.020111083984375
    6. '    ' → logprob: -11.145111083984375
    7. '   ' → logprob: -12.770111083984375
    8. '```' → logprob: -12.895111083984375
    9. '	return' → logprob: -13.770111083984375
    10. ' 
' → logprob: -13.770111083984375

Token 57: ' n' (ID: 297)
  Prédit: ' n'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' n' → logprob: -0.20213761925697327
    2. ' ' → logprob: -1.7021375894546509
    3. 'n' → logprob: -7.702137470245361
    4. ' ' → logprob: -8.32713794708252
    5. ' ‌' → logprob: -11.45213794708252
    6. ' space' → logprob: -12.70213794708252
    7. ' (' → logprob: -12.70213794708252
    8. '	n' → logprob: -13.07713794708252
    9. ' nn' → logprob: -13.07713794708252
    10. ' )' → logprob: -13.57713794708252

Token 58: ' *' (ID: 425)
  Prédit: '**'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '**' → logprob: -0.43527016043663025
    2. ' *' → logprob: -1.8102701902389526
    3. ' **' → logprob: -2.060270071029663
    4. '*' → logprob: -2.810270071029663
    5. '***' → logprob: -6.935270309448242
    6. ' ***' → logprob: -8.310270309448242
    7. '```' → logprob: -8.935270309448242
    8. '   ' → logprob: -9.560270309448242
    9. ' ' → logprob: -9.810270309448242
    10. '  ' → logprob: -10.185270309448242

Token 59: ' n' (ID: 297)
  Prédit: 'n'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'n' → logprob: -0.00861456897109747
    2. ' n' → logprob: -4.758614540100098
    3. '	n' → logprob: -16.508615493774414
    4. ' ' → logprob: -17.258615493774414
    5. ' ' → logprob: -17.758615493774414
    6. '  ' → logprob: -18.758615493774414
    7. '3' → logprob: -19.258615493774414
    8. '*n' → logprob: -19.508615493774414
    9. '   ' → logprob: -20.008615493774414
    10. '_n' → logprob: -20.883615493774414

Token 60: ' *' (ID: 425)
  Prédit: '*'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '*' → logprob: -0.0005021584220230579
    2. ' *' → logprob: -8.250502586364746
    3. '*n' → logprob: -8.375502586364746
    4. '<|end|>' → logprob: -12.500502586364746
    5. '_' → logprob: -13.000502586364746
    6. ''*' → logprob: -14.375502586364746
    7. '**' → logprob: -14.500502586364746
    8. '*u' → logprob: -14.875502586364746
    9. '*num' → logprob: -15.000502586364746
    10. '*

' → logprob: -15.125502586364746

Token 61: ' n' (ID: 297)
  Prédit: 'n'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'n' → logprob: -2.935296834039036e-06
    2. ' n' → logprob: -12.75000286102295
    3. '<|end|>' → logprob: -19.500003814697266
    4. '	n' → logprob: -21.000003814697266
    5. '_n' → logprob: -21.375003814697266
    6. '*n' → logprob: -22.750003814697266
    7. ')n' → logprob: -22.875003814697266
    8. ' ' → logprob: -23.625003814697266
    9. '<n' → logprob: -24.500003814697266
    10. '-n' → logprob: -24.750003814697266

Token 62: '

' (ID: 279)
  Prédit: '
'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '
' → logprob: -1.0620192289352417
    2. '<|end|>' → logprob: -1.0620192289352417
    3. '\n' → logprob: -1.3120192289352417
    4. '```' → logprob: -4.187019348144531
    5. '\' → logprob: -4.687019348144531
    6. '<|end|>' → logprob: -5.812019348144531
    7. ')' → logprob: -6.187019348144531
    8. '

' → logprob: -6.312019348144531
    9. '(' → logprob: -6.437019348144531
    10. '#' → logprob: -6.437019348144531

Token 63: 'def' (ID: 1314)
  Prédit: '
'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '
' → logprob: -0.26593926548957825
    2. '\n' → logprob: -2.390939235687256
    3. '<|end|>' → logprob: -2.640939235687256
    4. '```' → logprob: -3.140939235687256
    5. '

' → logprob: -4.390939235687256
    6. '\' → logprob: -5.390939235687256
    7. '#' → logprob: -5.890939235687256
    8. '<|end|>' → logprob: -6.265939235687256
    9. '(' → logprob: -6.515939235687256
    10. ')' → logprob: -7.140939235687256

Token 64: ' main' (ID: 2758)
  Prédit: ' compute'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' compute' → logprob: -0.029574356973171234
    2. ' ' → logprob: -3.779574394226074
    3. ' calculate' → logprob: -6.154574394226074
    4. ' space' → logprob: -6.904574394226074
    5. ' square' → logprob: -6.904574394226074
    6. '_' → logprob: -7.154574394226074
    7. ' factorial' → logprob: -7.154574394226074
    8. ' add' → logprob: -8.654574394226074
    9. 'compute' → logprob: -9.404574394226074
    10. ' sum' → logprob: -9.529574394226074

Token 65: '():
' (ID: 8595)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '(' → logprob: -0.002141101285815239
    2. '_' → logprob: -6.502140998840332
    3. '():' → logprob: -7.752140998840332
    4. '()' → logprob: -9.377140998840332
    5. ' (' → logprob: -9.877140998840332
    6. '(_' → logprob: -12.002140998840332
    7. '(
' → logprob: -12.252140998840332
    8. '(**' → logprob: -12.252140998840332
    9. '("("' → logprob: -12.252140998840332
    10. ':' → logprob: -12.627140998840332

Token 66: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.2402586042881012
    2. '(' → logprob: -2.2402586936950684
    3. ' ' → logprob: -2.4902586936950684
    4. '    ' → logprob: -4.740258693695068
    5. '(n' → logprob: -5.115258693695068
    6. 'n' → logprob: -5.990258693695068
    7. '    
' → logprob: -6.365258693695068
    8. ' 
' → logprob: -6.740258693695068
    9. '\' → logprob: -7.490258693695068
    10. ' (' → logprob: -7.615258693695068

Token 67: ' """
' (ID: 7037)
  Prédit: 'n'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'n' → logprob: -0.056670043617486954
    2. ' n' → logprob: -3.4316699504852295
    3. '   ' → logprob: -4.431670188903809
    4. ' ' → logprob: -6.181670188903809
    5. ' result' → logprob: -6.556670188903809
    6. ' print' → logprob: -6.931670188903809
    7. 'result' → logprob: -7.056670188903809
    8. ' space' → logprob: -7.056670188903809
    9. 'space' → logprob: -7.556670188903809
    10. ' user' → logprob: -7.556670188903809

Token 68: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.024724746122956276
    2. 'Calcul' → logprob: -4.524724960327148
    3. ' Cal' → logprob: -5.524724960327148
    4. 'Cal' → logprob: -5.899724960327148
    5. ' Aff' → logprob: -6.149724960327148
    6. ' Calcul' → logprob: -6.524724960327148
    7. 'Aff' → logprob: -7.024724960327148
    8. 'Afficher' → logprob: -7.649724960327148
    9. 'Calculate' → logprob: -8.399724960327148
    10. '    ' → logprob: -8.524724960327148

Token 69: ' Fonction' (ID: 189149)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.4573579728603363
    2. 'Cal' → logprob: -2.082357883453369
    3. 'Calcul' → logprob: -2.082357883453369
    4. 'Aff' → logprob: -2.707357883453369
    5. ' Cal' → logprob: -4.332357883453369
    6. ' Aff' → logprob: -5.082357883453369
    7. 'Afficher' → logprob: -5.082357883453369
    8. 'Print' → logprob: -5.207357883453369
    9. '#' → logprob: -5.207357883453369
    10. 'Calculate' → logprob: -5.707357883453369

Token 70: ' principale' (ID: 68926)
  Prédit: ' principale'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' principale' → logprob: -0.026313187554478645
    2. ' principal' → logprob: -4.026313304901123
    3. ' main' → logprob: -5.151313304901123
    4. ' d' → logprob: -7.526313304901123
    5. '   ' → logprob: -7.651313304901123
    6. ' de' → logprob: -8.151312828063965
    7. 'princip' → logprob: -8.276312828063965
    8. ' ' → logprob: -8.401312828063965
    9. ' qui' → logprob: -8.901312828063965
    10. ' prin' → logprob: -9.151312828063965

Token 71: ' du' (ID: 1462)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.004553304053843021
    2. 'def' → logprob: -6.379553318023682
    3. ' pour' → logprob: -7.254553318023682
    4. '    
' → logprob: -7.629553318023682
    5. ':' → logprob: -7.754553318023682
    6. ' qui' → logprob: -8.004552841186523
    7. ' :' → logprob: -8.879552841186523
    8. ' permettant' → logprob: -8.879552841186523
    9. ' ' → logprob: -9.129552841186523
    10. ' de' → logprob: -9.629552841186523

Token 72: ' programme' (ID: 18190)
  Prédit: ' programme'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' programme' → logprob: -0.053372301161289215
    2. ' script' → logprob: -3.053372383117676
    3. 'programme' → logprob: -5.928372383117676
    4. ' program' → logprob: -6.303372383117676
    5. ' progr' → logprob: -9.678372383117676
    6. ' code' → logprob: -9.678372383117676
    7. 'program' → logprob: -10.178372383117676
    8. ' programa' → logprob: -10.803372383117676
    9. ' module' → logprob: -10.928372383117676
    10. ' programma' → logprob: -11.053372383117676

Token 73: '.' (ID: 13)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.00048751471331343055
    2. 'def' → logprob: -9.125487327575684
    3. '    
' → logprob: -9.250487327575684
    4. ',' → logprob: -9.625487327575684
    5. '.' → logprob: -9.625487327575684
    6. ':' → logprob: -9.875487327575684
    7. '```' → logprob: -10.375487327575684
    8. '
' → logprob: -10.750487327575684
    9. '    ' → logprob: -11.750487327575684
    10. '  ' → logprob: -12.125487327575684

Token 74: ' Elle' (ID: 21300)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.11063939332962036
    2. '    
' → logprob: -2.8606393337249756
    3. ' 
' → logprob: -3.7356393337249756
    4. '    ' → logprob: -4.235639572143555
    5. '     
' → logprob: -5.610639572143555
    6. '
' → logprob: -6.235639572143555
    7. '   
' → logprob: -7.110639572143555
    8. '  
' → logprob: -7.110639572143555
    9. '\n' → logprob: -7.610639572143555
    10. '```' → logprob: -7.860639572143555

Token 75: ' demande' (ID: 26737)
  Prédit: ' demande'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' demande' → logprob: -1.143293857574463
    2. ' calc' → logprob: -1.893293857574463
    3. ' ' → logprob: -2.018293857574463
    4. ' permet' → logprob: -2.643293857574463
    5. ' appelle' → logprob: -2.643293857574463
    6. ' affiche' → logprob: -2.768293857574463
    7. ' démar' → logprob: -3.393293857574463
    8. ' continue' → logprob: -3.518293857574463
    9. ' récup' → logprob: -3.768293857574463
    10. ' complète' → logprob: -4.268293857574463

Token 76: ' à' (ID: 1221)
  Prédit: ' à'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' à' → logprob: -0.6027258038520813
    2. ' un' → logprob: -1.3527257442474365
    3. ' ' → logprob: -2.4777257442474365
    4. ' a' → logprob: -2.7277257442474365
    5. '   ' → logprob: -4.227725982666016
    6. ' l' → logprob: -4.352725982666016
    7. ' une' → logprob: -5.727725982666016
    8. ' ' → logprob: -5.727725982666016
    9. 'à' → logprob: -6.227725982666016
    10. 'l' → logprob: -6.227725982666016

Token 77: ' l' (ID: 305)
  Prédit: ' l'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' l' → logprob: -0.5805938243865967
    2. 'l' → logprob: -0.8305938243865967
    3. '	l' → logprob: -6.205594062805176
    4. ' ' → logprob: -7.580594062805176
    5. 'user' → logprob: -7.580594062805176
    6. ' utilisateur' → logprob: -7.955594062805176
    7. ''utilisateur' → logprob: -7.955594062805176
    8. '   ' → logprob: -8.705594062805176
    9. ' user' → logprob: -8.955594062805176
    10. 'n' → logprob: -8.955594062805176

Token 78: ''utilisateur' (ID: 140803)
  Prédit: ''utilisateur'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ''utilisateur' → logprob: -0.24313296377658844
    2. 'u' → logprob: -1.9931329488754272
    3. ''' → logprob: -3.118133068084717
    4. 'a' → logprob: -3.618133068084717
    5. '’utilisateur' → logprob: -5.368133068084717
    6. 'e' → logprob: -6.368133068084717
    7. ''u' → logprob: -7.493133068084717
    8. ''util' → logprob: -7.618133068084717
    9. ''us' → logprob: -8.368132591247559
    10. ''user' → logprob: -8.368132591247559

Token 79: ' de' (ID: 334)
  Prédit: ' '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' ' → logprob: -0.19095416367053986
    2. ' de' → logprob: -2.5659542083740234
    3. '  ' → logprob: -3.5659542083740234
    4. ' d' → logprob: -3.9409542083740234
    5. '<|end|>' → logprob: -4.065954208374023
    6. '    ' → logprob: -4.940954208374023
    7. ' un' → logprob: -4.940954208374023
    8. ' ' → logprob: -5.440954208374023
    9. ' a' → logprob: -6.315954208374023
    10. 'a' → logprob: -6.815954208374023

Token 80: ' saisir' (ID: 152120)
  Prédit: ' saisir'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' saisir' → logprob: -0.6286638379096985
    2. ' calcul' → logprob: -1.2536637783050537
    3. ' ' → logprob: -2.2536637783050537
    4. 's' → logprob: -4.128664016723633
    5. 'n' → logprob: -4.378664016723633
    6. 'r' → logprob: -4.503664016723633
    7. ' calculate' → logprob: -5.003664016723633
    8. ' calcular' → logprob: -5.128664016723633
    9. ' compute' → logprob: -5.378664016723633
    10. ' entr' → logprob: -5.628664016723633

Token 81: ' un' (ID: 537)
  Prédit: ' un'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' un' → logprob: -0.47278380393981934
    2. ' ' → logprob: -1.2227838039398193
    3. '<|end|>' → logprob: -2.9727838039398193
    4. '  ' → logprob: -4.222784042358398
    5. ' a' → logprob: -5.472784042358398
    6. ' ' → logprob: -5.597784042358398
    7. 'a' → logprob: -6.097784042358398
    8. 'un' → logprob: -6.722784042358398
    9. '    ' → logprob: -7.347784042358398
    10. 'n' → logprob: -7.722784042358398

Token 82: ' entier' (ID: 80473)
  Prédit: ' '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' ' → logprob: -0.0846916139125824
    2. ' nombre' → logprob: -2.5846915245056152
    3. 'n' → logprob: -5.709691524505615
    4. 'nombre' → logprob: -6.209691524505615
    5. ' n' → logprob: -9.459692001342773
    6. ' nombres' → logprob: -9.584692001342773
    7. ' nomb' → logprob: -9.834692001342773
    8. 'e' → logprob: -10.459692001342773
    9. ' space' → logprob: -10.834692001342773
    10. 'a' → logprob: -10.834692001342773

Token 83: ',
' (ID: 412)
  Prédit: ' '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' ' → logprob: -0.24155057966709137
    2. ' ,' → logprob: -1.8665505647659302
    3. ',' → logprob: -2.8665506839752197
    4. '  ' → logprob: -6.991550445556641
    5. ' et' → logprob: -7.366550445556641
    6. '.' → logprob: -7.491550445556641
    7. ' a' → logprob: -8.36655044555664
    8. ' )' → logprob: -8.36655044555664
    9. '   ' → logprob: -10.11655044555664
    10. ')' → logprob: -10.11655044555664

Token 84: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.41329658031463623
    2. ' puis' → logprob: -1.5382965803146362
    3. ' ' → logprob: -2.413296699523926
    4. 'p' → logprob: -5.038296699523926
    5. 'n' → logprob: -5.413296699523926
    6. '    ' → logprob: -6.038296699523926
    7. ',' → logprob: -6.038296699523926
    8. ' et' → logprob: -6.163296699523926
    9. '  ' → logprob: -6.288296699523926
    10. ' then' → logprob: -6.413296699523926

Token 85: ' puis' (ID: 18766)
  Prédit: ' calc'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' calc' → logprob: -0.21170924603939056
    2. ' puis' → logprob: -2.2117092609405518
    3. ' appelle' → logprob: -3.2117092609405518
    4. 'cal' → logprob: -4.461709022521973
    5. ' calcul' → logprob: -4.961709022521973
    6. ' cal' → logprob: -5.336709022521973
    7. 'p' → logprob: -5.961709022521973
    8. '   ' → logprob: -6.086709022521973
    9. ' le' → logprob: -6.211709022521973
    10. 'calc' → logprob: -6.336709022521973

Token 86: ' affiche' (ID: 127479)
  Prédit: ' appelle'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' appelle' → logprob: -0.741997480392456
    2. ' calc' → logprob: -1.241997480392456
    3. ' ' → logprob: -2.741997480392456
    4. ' calculate' → logprob: -3.491997480392456
    5. ' calcul' → logprob: -3.491997480392456
    6. ' compute' → logprob: -3.741997480392456
    7. ' affiche' → logprob: -3.741997480392456
    8. ' ' → logprob: -4.366997718811035
    9. ' calcula' → logprob: -4.366997718811035
    10. ' calculates' → logprob: -4.491997718811035

Token 87: ' le' (ID: 505)
  Prédit: ' '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' ' → logprob: -0.4920501708984375
    2. ' le' → logprob: -1.8670501708984375
    3. '  ' → logprob: -2.3670501708984375
    4. '"' → logprob: -3.4920501708984375
    5. 'le' → logprob: -3.6170501708984375
    6. 'l' → logprob: -3.7420501708984375
    7. ' l' → logprob: -4.1170501708984375
    8. 's' → logprob: -4.2420501708984375
    9. ' ' → logprob: -5.6170501708984375
    10. '```' → logprob: -5.8670501708984375

Token 88: ' cube' (ID: 46822)
  Prédit: ' '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' ' → logprob: -0.014964858070015907
    2. ' cube' → logprob: -4.639965057373047
    3. ' résultat' → logprob: -5.639965057373047
    4. ' espace' → logprob: -7.639965057373047
    5. '  ' → logprob: -7.889965057373047
    6. ' ' → logprob: -9.264965057373047
    7. 'cube' → logprob: -9.264965057373047
    8. '_' → logprob: -9.639965057373047
    9. '  ' → logprob: -9.639965057373047
    10. ' space' → logprob: -9.639965057373047

Token 89: ' de' (ID: 334)
  Prédit: ' de'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' de' → logprob: -0.053328339010477066
    2. ' du' → logprob: -3.428328275680542
    3. ' ' → logprob: -4.428328514099121
    4. 'de' → logprob: -5.428328514099121
    5. ' d' → logprob: -6.803328514099121
    6. ' (' → logprob: -7.303328514099121
    7. 's' → logprob: -8.053328514099121
    8. '(' → logprob: -8.928328514099121
    9. '  ' → logprob: -8.928328514099121
    10. ' computed' → logprob: -8.928328514099121

Token 90: ' cet' (ID: 19505)
  Prédit: ' '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' ' → logprob: -0.6694303750991821
    2. ' l' → logprob: -1.2944303750991821
    3. ' cet' → logprob: -2.1694302558898926
    4. ' ce' → logprob: -2.4194302558898926
    5. ' celui' → logprob: -5.169430255889893
    6. 'l' → logprob: -5.544430255889893
    7. ' ' → logprob: -8.04443073272705
    8. 'cet' → logprob: -8.79443073272705
    9. '  ' → logprob: -9.16943073272705
    10. 'n' → logprob: -9.79443073272705

Token 91: ' entier' (ID: 80473)
  Prédit: 'e'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'e' → logprob: -0.29330697655677795
    2. ' ' → logprob: -1.9183069467544556
    3. ' entier' → logprob: -2.668307065963745
    4. ' espace' → logprob: -4.668306827545166
    5. ' e' → logprob: -5.043306827545166
    6. 'ent' → logprob: -5.418306827545166
    7. '```' → logprob: -6.168306827545166
    8. 'a' → logprob: -6.168306827545166
    9. ' utilisateur' → logprob: -6.293306827545166
    10. 'u' → logprob: -6.793306827545166

Token 92: '.
' (ID: 558)
  Prédit: '.'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '.' → logprob: -0.04475194588303566
    2. '   ' → logprob: -3.1697518825531006
    3. ',' → logprob: -6.79475212097168
    4. ' ' → logprob: -8.54475212097168
    5. '    
' → logprob: -8.79475212097168
    6. '.
' → logprob: -9.29475212097168
    7. ' .' → logprob: -9.79475212097168
    8. '  ' → logprob: -10.66975212097168
    9. 'n' → logprob: -11.04475212097168
    10. '  
' → logprob: -11.41975212097168

Token 93: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.08314210176467896
    2. '
' → logprob: -2.833142042160034
    3. '    
' → logprob: -3.958142042160034
    4. '  
' → logprob: -7.583142280578613
    5. ' 
' → logprob: -7.958142280578613
    6. '   
' → logprob: -8.208142280578613
    7. '```' → logprob: -8.458142280578613
    8. 'n' → logprob: -9.458142280578613
    9. ' ' → logprob: -9.583142280578613
    10. '\' → logprob: -9.583142280578613

Token 94: ' """
' (ID: 7037)
  Prédit: '
'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '
' → logprob: -0.37857136130332947
    2. '   ' → logprob: -1.3785713911056519
    3. '    
' → logprob: -3.0035712718963623
    4. 'n' → logprob: -4.753571510314941
    5. ' 
' → logprob: -6.378571510314941
    6. '  
' → logprob: -6.753571510314941
    7. '   
' → logprob: -6.753571510314941
    8. '\n' → logprob: -8.128571510314941
    9. '\' → logprob: -8.503571510314941
    10. '```' → logprob: -9.128571510314941

Token 95: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.05461312085390091
    2. 'n' → logprob: -3.1796131134033203
    3. ' 
' → logprob: -5.30461311340332
    4. '
' → logprob: -6.05461311340332
    5. ' try' → logprob: -6.30461311340332
    6. '    
' → logprob: -6.67961311340332
    7. 'try' → logprob: -7.05461311340332
    8. '   
' → logprob: -9.55461311340332
    9. ' n' → logprob: -9.67961311340332
    10. '  
' → logprob: -10.80461311340332

Token 96: ' #' (ID: 1069)
  Prédit: 'n'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'n' → logprob: -0.1464506983757019
    2. 'try' → logprob: -2.0214507579803467
    3. 'user' → logprob: -6.896450519561768
    4. 'while' → logprob: -7.021450519561768
    5. ' try' → logprob: -7.146450519561768
    6. '   ' → logprob: -7.271450519561768
    7. ' n' → logprob: -8.646450996398926
    8. 'value' → logprob: -10.271450996398926
    9. 'num' → logprob: -10.271450996398926
    10. 'number' → logprob: -10.271450996398926

Token 97: ' Dem' (ID: 9458)
  Prédit: 'n'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'n' → logprob: -0.054938364773988724
    2. 'user' → logprob: -4.054938316345215
    3. 'u' → logprob: -4.679938316345215
    4. 'try' → logprob: -4.929938316345215
    5. 'input' → logprob: -5.679938316345215
    6. 'value' → logprob: -5.804938316345215
    7. 'i' → logprob: -5.804938316345215
    8. '   ' → logprob: -6.429938316345215
    9. ' n' → logprob: -6.804938316345215
    10. ' user' → logprob: -6.804938316345215

Token 98: 'ande' (ID: 4102)
  Prédit: 'ande'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'ande' → logprob: -0.4769442677497864
    2. 'ander' → logprob: -1.1019442081451416
    3. 'and' → logprob: -3.8519442081451416
    4. 'a' → logprob: -4.476944446563721
    5. 'an' → logprob: -5.101944446563721
    6. 'andez' → logprob: -5.226944446563721
    7. '   ' → logprob: -6.351944446563721
    8. ' and' → logprob: -8.226943969726562
    9. '       ' → logprob: -8.976943969726562
    10. '```' → logprob: -9.101943969726562

Token 99: ' à' (ID: 1221)
  Prédit: ' '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' ' → logprob: -0.40909096598625183
    2. ' à' → logprob: -1.1590909957885742
    3. ' a' → logprob: -4.909090995788574
    4. '   ' → logprob: -5.034090995788574
    5. '  ' → logprob: -5.534090995788574
    6. '    ' → logprob: -7.034090995788574
    7. ' ‌' → logprob: -7.534090995788574
    8. ' de' → logprob: -8.034090995788574
    9. ' ' → logprob: -8.159090995788574
    10. ' d' → logprob: -8.159090995788574

Token 100: ' l' (ID: 305)
  Prédit: ' l'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' l' → logprob: -0.02543485537171364
    2. 'l' → logprob: -3.775434970855713
    3. ' ' → logprob: -7.025434970855713
    4. ' user' → logprob: -7.150434970855713
    5. ' utilisateur' → logprob: -7.900434970855713
    6. 'user' → logprob: -9.525434494018555
    7. '	l' → logprob: -10.900434494018555
    8. ''utilisateur' → logprob: -11.275434494018555
    9. ' ' → logprob: -11.400434494018555
    10. ' lâ' → logprob: -12.150434494018555

Token 101: ''utilisateur' (ID: 140803)
  Prédit: ''utilisateur'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ''utilisateur' → logprob: -0.008528879843652248
    2. ''' → logprob: -5.133528709411621
    3. ''util' → logprob: -7.258528709411621
    4. 'u' → logprob: -7.258528709411621
    5. ''user' → logprob: -7.633528709411621
    6. '’utilisateur' → logprob: -7.758528709411621
    7. ''us' → logprob: -9.133528709411621
    8. 'user' → logprob: -9.758528709411621
    9. ''u' → logprob: -10.383528709411621
    10. 'util' → logprob: -10.758528709411621

Token 102: ' de' (ID: 334)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.13984115421772003
    2. ' à' → logprob: -3.014841079711914
    3. 'n' → logprob: -3.514841079711914
    4. '    ' → logprob: -4.514841079711914
    5. ' n' → logprob: -5.014841079711914
    6. ' une' → logprob: -5.514841079711914
    7. ' =' → logprob: -5.639841079711914
    8. ' un' → logprob: -5.889841079711914
    9. ' de' → logprob: -5.889841079711914
    10. ' to' → logprob: -5.889841079711914

Token 103: ' saisir' (ID: 152120)
  Prédit: ' saisir'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' saisir' → logprob: -0.3797062337398529
    2. ' input' → logprob: -1.7547062635421753
    3. 'input' → logprob: -2.6297061443328857
    4. 's' → logprob: -2.7547061443328857
    5. ' entrer' → logprob: -6.129706382751465
    6. 'n' → logprob: -6.254706382751465
    7. 'l' → logprob: -7.004706382751465
    8. ' sais' → logprob: -7.504706382751465
    9. 'int' → logprob: -7.629706382751465
    10. ' ' → logprob: -8.129706382751465

Token 104: ' un' (ID: 537)
  Prédit: ' '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' ' → logprob: -0.012132509611546993
    2. ' un' → logprob: -4.63713264465332
    3. ' a' → logprob: -7.01213264465332
    4. '  ' → logprob: -7.26213264465332
    5. ' l' → logprob: -9.01213264465332
    6. 'un' → logprob: -9.38713264465332
    7. '   ' → logprob: -9.38713264465332
    8. '    ' → logprob: -9.51213264465332
    9. 'n' → logprob: -9.63713264465332
    10. ' ' → logprob: -9.63713264465332

Token 105: ' nombre' (ID: 9733)
  Prédit: 'n'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'n' → logprob: -0.20731018483638763
    2. ' ' → logprob: -1.7073101997375488
    3. ' nombre' → logprob: -5.457310199737549
    4. 'nombre' → logprob: -7.332310199737549
    5. ' n' → logprob: -7.457310199737549
    6. ' entier' → logprob: -8.95730972290039
    7. ' )' → logprob: -9.70730972290039
    8. '  ' → logprob: -10.33230972290039
    9. 'ent' → logprob: -11.08230972290039
    10. 'r' → logprob: -11.33230972290039

Token 106: ' entier' (ID: 80473)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.32299286127090454
    2. ' ' → logprob: -1.6979928016662598
    3. 'n' → logprob: -2.9479928016662598
    4. '  ' → logprob: -4.19799280166626
    5. ' )' → logprob: -5.07299280166626
    6. '    ' → logprob: -5.32299280166626
    7. ' n' → logprob: -6.44799280166626
    8. 'u' → logprob: -6.57299280166626
    9. ' un' → logprob: -6.57299280166626
    10. ' entier' → logprob: -6.69799280166626

Token 107: '
' (ID: 198)
  Prédit: 'n'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'n' → logprob: -0.35765892267227173
    2. '   ' → logprob: -1.232658863067627
    3. '    
' → logprob: -5.357658863067627
    4. ' n' → logprob: -5.607658863067627
    5. ' ' → logprob: -9.107659339904785
    6. ' 
' → logprob: -9.232659339904785
    7. '  ' → logprob: -9.232659339904785
    8. '   
' → logprob: -9.232659339904785
    9. '    ' → logprob: -9.357659339904785
    10. '  
' → logprob: -9.857659339904785

Token 108: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.16699597239494324
    2. 'n' → logprob: -1.9169960021972656
    3. ' n' → logprob: -5.791996002197266
    4. ' ' → logprob: -6.291996002197266
    5. '    
' → logprob: -6.916996002197266
    6. '  ' → logprob: -8.791996002197266
    7. '    ' → logprob: -8.791996002197266
    8. ',' → logprob: -9.166996002197266
    9. ' )' → logprob: -9.791996002197266
    10. '   
' → logprob: -10.041996002197266

Token 109: ' n' (ID: 297)
  Prédit: 'n'
  Correct (stricte): False
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'n' (adapté à ' n') → logprob: -0.034465242177248
    2. 'number' → logprob: -3.6594653129577637
    3. 'num' → logprob: -5.409465312957764
    4. 'nombre' → logprob: -6.409465312957764
    5. 'user' → logprob: -7.284465312957764
    6. '   ' → logprob: -7.534465312957764
    7. ' n' → logprob: -7.909465312957764
    8. 'try' → logprob: -8.659464836120605
    9. ' number' → logprob: -8.909464836120605
    10. 'numero' → logprob: -10.409464836120605

Token 110: ' =' (ID: 314)
  Prédit: ' ='
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' =' → logprob: -0.0004386558721307665
    2. '=' → logprob: -7.750438690185547
    3. ' ' → logprob: -12.625438690185547
    4. '  ' → logprob: -14.125438690185547
    5. '_' → logprob: -14.125438690185547
    6. 's' → logprob: -14.375438690185547
    7. ' ' → logprob: -14.375438690185547
    8. ' =
' → logprob: -14.625438690185547
    9. '=input' → logprob: -14.750438690185547
    10. '=int' → logprob: -14.875438690185547

Token 111: ' int' (ID: 677)
  Prédit: ' int'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' int' → logprob: -0.0071840533055365086
    2. 'int' → logprob: -5.257184028625488
    3. ' input' → logprob: -6.257184028625488
    4. 'input' → logprob: -10.757184028625488
    5. ' ' → logprob: -11.632184028625488
    6. ' ' → logprob: -14.257184028625488
    7. '	int' → logprob: -14.632184028625488
    8. '=int' → logprob: -15.632184028625488
    9. '   ' → logprob: -16.632184982299805
    10. '```' → logprob: -16.632184982299805

Token 112: '(input' (ID: 10054)
  Prédit: '(input'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(input' → logprob: -0.25194817781448364
    2. '(' → logprob: -1.5019481182098389
    3. '(
' → logprob: -11.376948356628418
    4. 'input' → logprob: -12.126948356628418
    5. '(

' → logprob: -14.126948356628418
    6. ' (' → logprob: -14.501948356628418
    7. '()' → logprob: -14.876948356628418
    8. '(raw' → logprob: -15.876948356628418
    9. '('' → logprob: -16.3769474029541
    10. '=input' → logprob: -16.7519474029541

Token 113: '("' (ID: 568)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(' → logprob: -0.7365272045135498
    2. '("("' → logprob: -0.8615272045135498
    3. '("' → logprob: -2.48652720451355
    4. '('' → logprob: -4.611527442932129
    5. '(">' → logprob: -6.111527442932129
    6. '("(' → logprob: -6.111527442932129
    7. '("")' → logprob: -7.736527442932129
    8. '()' → logprob: -7.861527442932129
    9. '(
' → logprob: -8.986527442932129
    10. '(""))' → logprob: -9.611527442932129

Token 114: 'Ent' (ID: 3263)
  Prédit: 'Ent'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'Ent' → logprob: -0.0011955865193158388
    2. 'Veuillez' → logprob: -7.126195430755615
    3. 'Entr' → logprob: -8.376195907592773
    4. 'Enter' → logprob: -9.126195907592773
    5. 'S' → logprob: -10.501195907592773
    6. '"' → logprob: -11.376195907592773
    7. '"S' → logprob: -12.626195907592773
    8. 'Quel' → logprob: -12.876195907592773
    9. ' Ent' → logprob: -13.251195907592773
    10. 'ent' → logprob: -13.251195907592773

Token 115: 'rez' (ID: 13676)
  Prédit: 'ier'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'ier' → logprob: -0.014742407016456127
    2. 'rez' → logprob: -4.264742374420166
    3. ' ier' → logprob: -8.139742851257324
    4. 'er' → logprob: -8.514742851257324
    5. 're' → logprob: -10.514742851257324
    6. 'r' → logprob: -11.139742851257324
    7. 'rier' → logprob: -11.514742851257324
    8. '   ' → logprob: -11.764742851257324
    9. 'rer' → logprob: -11.764742851257324
    10. 'ierz' → logprob: -12.514742851257324

Token 116: ' un' (ID: 537)
  Prédit: ' un'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' un' → logprob: -0.18672984838485718
    2. ' )' → logprob: -2.061729907989502
    3. ' ' → logprob: -3.811729907989502
    4. ')' → logprob: -4.686729907989502
    5. ' ' → logprob: -5.811729907989502
    6. ' votre' → logprob: -6.186729907989502
    7. ' ")' → logprob: -6.811729907989502
    8. '<|end|>' → logprob: -6.811729907989502
    9. ' l' → logprob: -7.061729907989502
    10. ' une' → logprob: -7.561729907989502

Token 117: ' entier' (ID: 80473)
  Prédit: ' entier'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' entier' → logprob: -0.2503111958503723
    2. ' ' → logprob: -1.6253111362457275
    3. ' nombre' → logprob: -3.7503111362457275
    4. '   ' → logprob: -8.375310897827148
    5. 'nombre' → logprob: -8.750310897827148
    6. '  ' → logprob: -8.875310897827148
    7. 'ent' → logprob: -9.000310897827148
    8. ' ' → logprob: -9.250310897827148
    9. ' entière' → logprob: -9.375310897827148
    10. ' espace' → logprob: -9.750310897827148

Token 118: ' :' (ID: 712)
  Prédit: ':'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ':' → logprob: -0.47418835759162903
    2. ' :' → logprob: -0.9741883277893066
    3. ' à' → logprob: -10.099188804626465
    4. ' ' → logprob: -10.349188804626465
    5. '"))' → logprob: -10.724188804626465
    6. ' "))' → logprob: -12.224188804626465
    7. 'à' → logprob: -12.474188804626465
    8. '>' → logprob: -13.599188804626465
    9. ' pour' → logprob: -13.724188804626465
    10. '   ' → logprob: -13.724188804626465

Token 119: ' "))
' (ID: 94820)
  Prédit: '"))'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '"))' → logprob: -0.005265425890684128
    2. ' "))' → logprob: -5.255265235900879
    3. '"' → logprob: -11.130265235900879
    4. '"))
' → logprob: -11.505265235900879
    5. '))' → logprob: -13.005265235900879
    6. '")' → logprob: -13.380265235900879
    7. '")))' → logprob: -14.005265235900879
    8. ''))' → logprob: -14.255265235900879
    9. '"))

' → logprob: -14.755265235900879
    10. '"))
' → logprob: -15.005265235900879

Token 120: '    
' (ID: 1944)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.3125501275062561
    2. '
' → logprob: -1.4375500679016113
    3. '    
' → logprob: -3.6875500679016113
    4. 'print' → logprob: -5.687550067901611
    5. '  
' → logprob: -6.562550067901611
    6. '  ' → logprob: -8.81255054473877
    7. '   
' → logprob: -8.81255054473877
    8. ' 
' → logprob: -8.81255054473877
    9. 'result' → logprob: -8.93755054473877
    10. '```' → logprob: -9.06255054473877

Token 121: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.22039152681827545
    2. 'result' → logprob: -1.9703915119171143
    3. 'print' → logprob: -3.0953915119171143
    4. 'cube' → logprob: -4.470391750335693
    5. 'c' → logprob: -7.095391750335693
    6. '    
' → logprob: -8.095391273498535
    7. ' result' → logprob: -8.470391273498535
    8. ' cube' → logprob: -9.095391273498535
    9. '```' → logprob: -9.220391273498535
    10. 'cub' → logprob: -10.470391273498535

Token 122: ' #' (ID: 1069)
  Prédit: 'cube'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'cube' → logprob: -0.5552191734313965
    2. 'result' → logprob: -1.0552191734313965
    3. 'print' → logprob: -2.5552191734313965
    4. 'cub' → logprob: -9.305219650268555
    5. ' cube' → logprob: -9.680219650268555
    6. 'c' → logprob: -9.930219650268555
    7. '   ' → logprob: -10.805219650268555
    8. '#' (adapté à ' #') → logprob: -11.305219650268555
    9. 'rés' → logprob: -11.555219650268555
    10. '```' → logprob: -11.930219650268555

Token 123: ' Cal' (ID: 4453)
  Prédit: 'print'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'print' → logprob: -0.1719907522201538
    2. 'result' → logprob: -2.6719908714294434
    3. 'cube' → logprob: -2.6719908714294434
    4. ' print' → logprob: -4.546990871429443
    5. ' cube' → logprob: -5.296990871429443
    6. ' result' → logprob: -5.546990871429443
    7. '   ' → logprob: -9.296990394592285
    8. 'cub' → logprob: -10.171990394592285
    9. 'rés' → logprob: -10.421990394592285
    10. '```' → logprob: -10.796990394592285

Token 124: 'cule' (ID: 45017)
  Prédit: 'cule'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'cule' → logprob: -0.028989853337407112
    2. 'cul' → logprob: -3.653989791870117
    3. 'culate' → logprob: -6.528989791870117
    4. 'c' → logprob: -7.278989791870117
    5. '   ' → logprob: -8.028989791870117
    6. 'cules' → logprob: -10.028989791870117
    7. '       ' → logprob: -10.778989791870117
    8. 'cula' → logprob: -10.903989791870117
    9. '```' → logprob: -11.153989791870117
    10. '  ' → logprob: -11.153989791870117

Token 125: ' le' (ID: 505)
  Prédit: ' le'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' le' → logprob: -0.6144512891769409
    2. ' et' → logprob: -1.989451289176941
    3. ' ' → logprob: -2.1144514083862305
    4. '<|end|>' → logprob: -2.3644514083862305
    5. 'le' → logprob: -3.3644514083862305
    6. '   ' → logprob: -4.2394514083862305
    7. ' l' → logprob: -4.3644514083862305
    8. ' ' → logprob: -4.4894514083862305
    9. '    ' → logprob: -4.9894514083862305
    10. '  ' → logprob: -5.1144514083862305

Token 126: ' cube' (ID: 46822)
  Prédit: 'cube'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'cube' → logprob: -0.07909203320741653
    2. ' cube' → logprob: -2.579092025756836
    3. 'result' → logprob: -9.829092025756836
    4. '   ' → logprob: -10.204092025756836
    5. 'cub' → logprob: -10.329092025756836
    6. ' ' → logprob: -10.579092025756836
    7. 'c' → logprob: -10.829092025756836
    8. ' result' → logprob: -11.329092025756836
    9. '_cube' → logprob: -11.579092025756836
    10. ' résultat' → logprob: -12.954092025756836

Token 127: ' de' (ID: 334)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.7220273017883301
    2. ' de' → logprob: -0.9720273017883301
    3. 'de' → logprob: -2.72202730178833
    4. ' du' → logprob: -4.09702730178833
    5. '(n' → logprob: -4.47202730178833
    6. 'du' → logprob: -4.47202730178833
    7. 'n' → logprob: -4.59702730178833
    8. ' =' → logprob: -4.97202730178833
    9. '=' → logprob: -5.47202730178833
    10. '  ' → logprob: -6.47202730178833

Token 128: ' l' (ID: 305)
  Prédit: ' n'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' n' → logprob: -0.038103342056274414
    2. 'n' → logprob: -3.2881033420562744
    3. '(n' → logprob: -10.288103103637695
    4. ' ' → logprob: -11.788103103637695
    5. ' ' → logprob: -11.913103103637695
    6. '<|end|>' → logprob: -13.163103103637695
    7. ' l' → logprob: -13.288103103637695
    8. '	n' → logprob: -13.288103103637695
    9. 'compute' → logprob: -13.288103103637695
    10. ' compute' → logprob: -14.288103103637695

Token 129: ''ent' (ID: 53422)
  Prédit: 'n'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'n' → logprob: -0.5403546094894409
    2. 'ent' → logprob: -1.665354609489441
    3. ''ent' → logprob: -2.0403547286987305
    4. ''utilisateur' → logprob: -3.4153547286987305
    5. 'e' → logprob: -3.6653547286987305
    6. 'a' → logprob: -3.9153547286987305
    7. ' n' → logprob: -5.1653547286987305
    8. 'u' → logprob: -5.9153547286987305
    9. '   ' → logprob: -6.2903547286987305
    10. ''' → logprob: -6.4153547286987305

Token 130: 'ier' (ID: 905)
  Prédit: 'ier'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'ier' → logprob: -0.16628676652908325
    2. 're' → logprob: -2.2912867069244385
    3. 't' → logprob: -3.6662867069244385
    4. 'er' → logprob: -3.9162867069244385
    5. 'tre' → logprob: -6.541286945343018
    6. 'ré' → logprob: -6.916286945343018
    7. 'ter' → logprob: -7.166286945343018
    8. 'ière' → logprob: -7.541286945343018
    9. 'e' → logprob: -7.666286945343018
    10. 'n' → logprob: -8.16628646850586

Token 131: ' grâce' (ID: 31589)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.009243723005056381
    2. '    
' → logprob: -5.259243488311768
    3. 'result' → logprob: -6.384243488311768
    4. 'cube' → logprob: -7.384243488311768
    5. '  ' → logprob: -7.759243488311768
    6. ' ' → logprob: -8.259243965148926
    7. ' cube' → logprob: -8.634243965148926
    8. ' result' → logprob: -8.884243965148926
    9. '  
' → logprob: -9.009243965148926
    10. 'n' → logprob: -9.009243965148926

Token 132: ' à' (ID: 1221)
  Prédit: ' à'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' à' → logprob: -0.7337953448295593
    2. 'à' → logprob: -0.9837953448295593
    3. 'au' → logprob: -2.733795404434204
    4. '<|end|>' → logprob: -3.358795404434204
    5. ''à' → logprob: -4.108795166015625
    6. ' au' → logprob: -4.483795166015625
    7. '   ' → logprob: -4.858795166015625
    8. '’à' → logprob: -5.858795166015625
    9. ' ' → logprob: -5.858795166015625
    10. ''au' → logprob: -6.983795166015625

Token 133: ' la' (ID: 557)
  Prédit: ' compute'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' compute' → logprob: -0.0036105208564549685
    2. 'compute' → logprob: -5.628610610961914
    3. ' la' → logprob: -11.753610610961914
    4. '_compute' → logprob: -14.253610610961914
    5. ' calculate' → logprob: -14.503610610961914
    6. ' ' → logprob: -14.628610610961914
    7. ' ' → logprob: -14.753610610961914
    8. '.compute' → logprob: -15.003610610961914
    9. ' le' → logprob: -16.753610610961914
    10. '	com' → logprob: -16.753610610961914

Token 134: ' fonction' (ID: 17610)
  Prédit: 'compute'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'compute' → logprob: -0.08897491544485092
    2. ' compute' → logprob: -2.463974952697754
    3. 'def' → logprob: -11.713974952697754
    4. 'cube' → logprob: -11.838974952697754
    5. 'fonction' → logprob: -12.213974952697754
    6. 'calculate' → logprob: -12.463974952697754
    7. 'function' → logprob: -12.963974952697754
    8. ' cube' → logprob: -13.463974952697754
    9. '.compute' → logprob: -13.588974952697754
    10. '   ' → logprob: -13.838974952697754

Token 135: ' compute' (ID: 23864)
  Prédit: ' compute'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' compute' → logprob: -0.38706281781196594
    2. 'compute' → logprob: -1.1370627880096436
    3. '`' → logprob: -9.262063026428223
    4. ' `' → logprob: -9.387063026428223
    5. '   ' → logprob: -12.762063026428223
    6. '_compute' → logprob: -12.887063026428223
    7. '```' → logprob: -13.012063026428223
    8. '.compute' → logprob: -13.512063026428223
    9. ' ' → logprob: -14.012063026428223
    10. 'calculate' → logprob: -14.512063026428223

Token 136: '_cube' (ID: 171900)
  Prédit: '_cube'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_cube' → logprob: -0.00016158436483237892
    2. '_' → logprob: -8.750161170959473
    3. '_c' → logprob: -12.875161170959473
    4. ' _' → logprob: -16.25016212463379
    5. 'cube' → logprob: -16.87516212463379
    6. '_circle' → logprob: -17.75016212463379
    7. '__' → logprob: -17.75016212463379
    8. ' cube' → logprob: -17.87516212463379
    9. '_square' → logprob: -18.00016212463379
    10. '_
' → logprob: -18.00016212463379

Token 137: '
' (ID: 198)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.25254425406455994
    2. '(n' → logprob: -1.6275442838668823
    3. 'n' → logprob: -4.627544403076172
    4. '(' → logprob: -4.877544403076172
    5. ',' → logprob: -5.752544403076172
    6. 'result' → logprob: -6.377544403076172
    7. '    
' → logprob: -6.627544403076172
    8. '()' → logprob: -7.377544403076172
    9. '  ' → logprob: -7.877544403076172
    10. ' ' → logprob: -8.002544403076172

Token 138: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.33019495010375977
    2. 'result' → logprob: -1.4551949501037598
    3. '    
' → logprob: -3.5801949501037598
    4. '
' → logprob: -4.58019495010376
    5. ' result' → logprob: -4.83019495010376
    6. 'cube' → logprob: -7.83019495010376
    7. '  
' → logprob: -8.080194473266602
    8. 'n' → logprob: -8.330194473266602
    9. '   
' → logprob: -8.580194473266602
    10. ' cube' → logprob: -9.205194473266602

Token 139: ' result' (ID: 1534)
  Prédit: 'result'
  Correct (stricte): False
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'result' (adapté à ' result') → logprob: -0.510625958442688
    2. 'cube' → logprob: -1.760625958442688
    3. ' result' → logprob: -2.0106258392333984
    4. ' cube' → logprob: -2.3856258392333984
    5. '   ' → logprob: -6.385625839233398
    6. 'c' → logprob: -9.260625839233398
    7. ' resultat' → logprob: -9.260625839233398
    8. '    
' → logprob: -10.260625839233398
    9. ' résultat' → logprob: -10.635625839233398
    10. 'cub' → logprob: -11.260625839233398

Token 140: ' =' (ID: 314)
  Prédit: ' ='
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' =' → logprob: -0.14270305633544922
    2. '=' → logprob: -2.017703056335449
    3. '_' → logprob: -11.26770305633545
    4. ' ' → logprob: -12.01770305633545
    5. 's' → logprob: -13.01770305633545
    6. ' ' → logprob: -13.14270305633545
    7. '   ' → logprob: -13.39270305633545
    8. '  ' → logprob: -13.64270305633545
    9. ')' → logprob: -14.39270305633545
    10. 'space' → logprob: -15.14270305633545

Token 141: ' compute' (ID: 23864)
  Prédit: ' compute'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' compute' → logprob: -0.001502598519437015
    2. 'compute' → logprob: -6.501502513885498
    3. ' ' → logprob: -16.501502990722656
    4. '_compute' → logprob: -16.501502990722656
    5. ' computer' → logprob: -16.751502990722656
    6. '.compute' → logprob: -17.001502990722656
    7. '	com' → logprob: -18.876502990722656
    8. ' ' → logprob: -19.251502990722656
    9. '(com' → logprob: -20.376502990722656
    10. 'computer' → logprob: -20.376502990722656

Token 142: '_cube' (ID: 171900)
  Prédit: '_cube'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_cube' → logprob: -9.913265239447355e-05
    2. '_' → logprob: -9.250099182128906
    3. '_c' → logprob: -13.250099182128906
    4. ' _' → logprob: -14.125099182128906
    5. '__' → logprob: -16.000099182128906
    6. '_chunk' → logprob: -16.750099182128906
    7. '```' → logprob: -17.250099182128906
    8. 'Cube' → logprob: -17.500099182128906
    9. '_cuda' → logprob: -17.625099182128906
    10. ')_' → logprob: -17.750099182128906

Token 143: '(n' (ID: 2406)
  Prédit: '(n'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(n' → logprob: -0.16022808849811554
    2. '(' → logprob: -1.9102281332015991
    3. '(
' → logprob: -12.91022777557373
    4. ' (' → logprob: -13.66022777557373
    5. '(

' → logprob: -16.285228729248047
    6. '(s' → logprob: -17.035228729248047
    7. '(noun' → logprob: -17.910228729248047
    8. '(nn' → logprob: -18.535228729248047
    9. '(user' → logprob: -18.660228729248047
    10. '<|end|>' → logprob: -18.785228729248047

Token 144: ')
' (ID: 446)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')' → logprob: -2.696889623621246e-06
    2. ')
' → logprob: -13.37500286102295
    3. ' )' → logprob: -14.12500286102295
    4. ')`' → logprob: -16.500001907348633
    5. '))' → logprob: -16.625001907348633
    6. ')

' → logprob: -16.750001907348633
    7. ')**' → logprob: -16.875001907348633
    8. '   ' → logprob: -17.125001907348633
    9. '),' → logprob: -18.375001907348633
    10. ')#' → logprob: -19.125001907348633

Token 145: '    
' (ID: 1944)
  Prédit: '
'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '
' → logprob: -0.6109153628349304
    2. '    
' → logprob: -1.3609154224395752
    3. '   ' → logprob: -1.6109154224395752
    4. 'print' → logprob: -6.985915184020996
    5. '  
' → logprob: -10.235915184020996
    6. '   
' → logprob: -11.360915184020996
    7. '
' → logprob: -11.610915184020996
    8. ' 
' → logprob: -11.735915184020996
    9. '    
    
' → logprob: -12.110915184020996
    10. '```' → logprob: -12.485915184020996

Token 146: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.011952880769968033
    2. 'print' → logprob: -4.636952877044678
    3. ' print' → logprob: -6.511952877044678
    4. '    
' → logprob: -7.386952877044678
    5. '
' → logprob: -9.386953353881836
    6. '    ' → logprob: -13.261953353881836
    7. ' 
' → logprob: -13.511953353881836
    8. '   
' → logprob: -14.386953353881836
    9. '```' → logprob: -14.386953353881836
    10. '  
' → logprob: -14.636953353881836

Token 147: ' #' (ID: 1069)
  Prédit: 'print'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'print' → logprob: -0.000432695698691532
    2. ' print' → logprob: -7.87543249130249
    3. '   ' → logprob: -9.875432968139648
    4. 'pr' → logprob: -14.750432968139648
    5. 'p' → logprob: -15.000432968139648
    6. '    
' → logprob: -16.00043296813965
    7. 'prin' → logprob: -16.00043296813965
    8. '#' (adapté à ' #') → logprob: -16.12543296813965
    9. '```' → logprob: -16.50043296813965
    10. '#print' → logprob: -17.00043296813965

Token 148: ' Aff' (ID: 13741)
  Prédit: 'print'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'print' → logprob: -0.0021857109386473894
    2. ' print' → logprob: -6.127185821533203
    3. 'pr' → logprob: -15.627185821533203
    4. 'prin' → logprob: -15.627185821533203
    5. '   ' → logprob: -16.502185821533203
    6. 'Print' → logprob: -16.752185821533203
    7. 'aff' → logprob: -17.252185821533203
    8. 'p' → logprob: -17.252185821533203
    9. '```' → logprob: -17.752185821533203
    10. '#print' → logprob: -18.002185821533203

Token 149: 'iche' (ID: 7509)
  Prédit: 'iche'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'iche' → logprob: -0.01278297696262598
    2. 'icher' → logprob: -4.387783050537109
    3. '   ' → logprob: -9.01278305053711
    4. 'ic' → logprob: -9.63778305053711
    5. 'ich' → logprob: -10.13778305053711
    6. 'ichage' → logprob: -11.01278305053711
    7. '#' → logprob: -11.76278305053711
    8. '  ' → logprob: -12.88778305053711
    9. '       ' → logprob: -13.13778305053711
    10. '    ' → logprob: -13.13778305053711

Token 150: ' le' (ID: 505)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '(' → logprob: -0.08702676743268967
    2. '("' → logprob: -2.587026834487915
    3. '(f' → logprob: -4.837026596069336
    4. '(result' → logprob: -9.212026596069336
    5. '('' → logprob: -10.462026596069336
    6. '(
' → logprob: -10.587026596069336
    7. '("")' → logprob: -12.212026596069336
    8. ' (' → logprob: -12.587026596069336
    9. ' ' → logprob: -13.087026596069336
    10. '"' → logprob: -13.212026596069336

Token 151: ' résultat' (ID: 62556)
  Prédit: ' résultat'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' résultat' → logprob: -0.75987708568573
    2. '"' → logprob: -1.63487708568573
    3. 'rés' → logprob: -2.5098772048950195
    4. 'f' → logprob: -2.5098772048950195
    5. 'result' → logprob: -2.6348772048950195
    6. ' f' → logprob: -3.2598772048950195
    7. ' result' → logprob: -4.1348772048950195
    8. ' cube' → logprob: -4.2598772048950195
    9. 'Rés' → logprob: -4.3848772048950195
    10. 'cube' → logprob: -4.6348772048950195

Token 152: '
' (ID: 198)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.0007908092229627073
    2. '    
' → logprob: -7.625790596008301
    3. '
' → logprob: -9.0007905960083
    4. 'print' → logprob: -9.1257905960083
    5. ' print' → logprob: -9.6257905960083
    6. '(' → logprob: -13.6257905960083
    7. ',' → logprob: -14.5007905960083
    8. '```' → logprob: -14.7507905960083
    9. '   ' → logprob: -14.7507905960083
    10. '    ' → logprob: -15.1257905960083

Token 153: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.0028578934725373983
    2. 'print' → logprob: -6.002857685089111
    3. '    
' → logprob: -8.12785816192627
    4. ' print' → logprob: -9.37785816192627
    5. '   ' → logprob: -14.50285816192627
    6. '
' → logprob: -14.62785816192627
    7. '```' → logprob: -15.12785816192627
    8. '   
' → logprob: -15.62785816192627
    9. '	print' → logprob: -16.002857208251953
    10. '  
' → logprob: -16.002857208251953

Token 154: ' print' (ID: 2123)
  Prédit: ' print'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' print' → logprob: -0.3870798945426941
    2. 'print' (adapté à ' print') → logprob: -1.1370799541473389
    3. '   ' → logprob: -8.512080192565918
    4. 'p' → logprob: -12.762080192565918
    5. 'pr' → logprob: -13.137080192565918
    6. ' p' → logprob: -14.137080192565918
    7. ' prin' → logprob: -14.762080192565918
    8. '```' → logprob: -14.762080192565918
    9. '    
' → logprob: -14.887080192565918
    10. 'prin' → logprob: -15.012080192565918

Token 155: '(result' (ID: 8111)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(' → logprob: -0.0011303325882181525
    2. '(f' → logprob: -7.001130104064941
    3. '("' → logprob: -9.126130104064941
    4. '("("' → logprob: -9.251130104064941
    5. '('' → logprob: -12.376130104064941
    6. '("")' → logprob: -12.751130104064941
    7. '()' → logprob: -13.376130104064941
    8. '(
' → logprob: -13.626130104064941
    9. '(result' → logprob: -13.626130104064941
    10. '(

' → logprob: -14.251130104064941

Token 156: ')

' (ID: 1029)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ')' → logprob: -1.0280383548888494e-06
    2. ' )' → logprob: -14.125000953674316
    3. ')
' → logprob: -16.125001907348633
    4. ')`' → logprob: -17.000001907348633
    5. '))' → logprob: -17.125001907348633
    6. '')' → logprob: -18.125001907348633
    7. '`)' → logprob: -18.375001907348633
    8. '()' → logprob: -18.500001907348633
    9. '")' → logprob: -18.625001907348633
    10. '())' → logprob: -19.250001907348633

Token 157: '#' (ID: 2)
  Prédit: 'if'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'if' → logprob: -0.1308026760816574
    2. '
' → logprob: -2.130802631378174
    3. 'i' → logprob: -5.630802631378174
    4. '

' → logprob: -9.255803108215332
    5. '\n' → logprob: -9.630803108215332
    6. '  
' → logprob: -10.505803108215332
    7. ' 
' → logprob: -10.880803108215332
    8. '    
' → logprob: -11.005803108215332
    9. '#' → logprob: -11.130803108215332
    10. '' → logprob: -11.380803108215332

Token 158: ' App' (ID: 2583)
  Prédit: 'if'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'if' → logprob: -0.0009117019944824278
    2. ' if' → logprob: -7.000911712646484
    3. 'main' → logprob: -15.500911712646484
    4. 'If' → logprob: -16.875911712646484
    5. '__' → logprob: -19.250911712646484
    6. ' If' → logprob: -20.125911712646484
    7. ' main' → logprob: -20.625911712646484
    8. 'ifdef' → logprob: -21.000911712646484
    9. '```' → logprob: -21.375911712646484
    10. '#' → logprob: -21.625911712646484

Token 159: 'el' (ID: 296)
  Prédit: 'el'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'el' → logprob: -0.0018269078573212028
    2. 'eler' → logprob: -6.751826763153076
    3. 'if' → logprob: -7.751826763153076
    4. 'le' → logprob: -9.876827239990234
    5. 'elé' → logprob: -9.876827239990234
    6. 'elif' → logprob: -10.626827239990234
    7. 'ell' → logprob: -10.626827239990234
    8. 'en' → logprob: -10.626827239990234
    9. 'els' → logprob: -11.376827239990234
    10. 'elle' → logprob: -11.751827239990234

Token 160: ' de' (ID: 334)
  Prédit: 'if'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'if' → logprob: -0.04299474507570267
    2. '(' → logprob: -3.917994737625122
    3. '_main' → logprob: -5.042994976043701
    4. ' main' → logprob: -5.542994976043701
    5. ' if' → logprob: -5.542994976043701
    6. '_' → logprob: -5.792994976043701
    7. 'main' → logprob: -5.917994976043701
    8. '(main' → logprob: -6.542994976043701
    9. '()' → logprob: -8.167994499206543
    10. '(
' → logprob: -9.042994499206543

Token 161: ' la' (ID: 557)
  Prédit: ' main'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' main' → logprob: -0.035045769065618515
    2. 'main' → logprob: -3.535045862197876
    3. 'if' → logprob: -5.785045623779297
    4. ' __' → logprob: -6.285045623779297
    5. ' if' → logprob: -8.535045623779297
    6. '_main' → logprob: -9.910045623779297
    7. '(main' → logprob: -10.285045623779297
    8. '__' → logprob: -10.535045623779297
    9. '	main' → logprob: -11.160045623779297
    10. ' ' → logprob: -11.535045623779297

Token 162: ' fonction' (ID: 17610)
  Prédit: ' main'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' main' → logprob: -0.16139188408851624
    2. 'main' → logprob: -1.9113918542861938
    3. 'if' → logprob: -6.786391735076904
    4. ' if' → logprob: -11.661392211914062
    5. ' principale' → logprob: -11.661392211914062
    6. '__' → logprob: -12.161392211914062
    7. ' __' → logprob: -12.161392211914062
    8. '_main' → logprob: -12.536392211914062
    9. '	main' → logprob: -12.661392211914062
    10. '(main' → logprob: -13.786392211914062

Token 163: ' principale' (ID: 68926)
  Prédit: 'main'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'main' → logprob: -0.20485343039035797
    2. 'if' → logprob: -1.7048534154891968
    3. ' main' → logprob: -5.704853534698486
    4. ' if' → logprob: -9.204853057861328
    5. '(main' → logprob: -12.704853057861328
    6. '```' → logprob: -15.079853057861328
    7. '_main' → logprob: -15.454853057861328
    8. '	main' → logprob: -15.704853057861328
    9. '.main' → logprob: -16.829853057861328
    10. 'm' → logprob: -17.454853057861328

Token 164: ' pour' (ID: 1930)
  Prédit: '
'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '
' → logprob: -0.20599161088466644
    2. 'if' → logprob: -1.7059916257858276
    3. 'main' → logprob: -5.705991744995117
    4. '

' → logprob: -7.705991744995117
    5. '  
' → logprob: -8.080991744995117
    6. ' 
' → logprob: -8.830991744995117
    7. ' if' → logprob: -9.080991744995117
    8. '
' → logprob: -9.455991744995117
    9. '(main' → logprob: -10.080991744995117
    10. ' main' → logprob: -10.330991744995117

Token 165: ' ex' (ID: 513)
  Prédit: ' lancer'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' lancer' → logprob: -0.10720647126436234
    2. ' ex' → logprob: -2.6072065830230713
    3. ' execut' → logprob: -4.232206344604492
    4. 'ex' → logprob: -5.357206344604492
    5. ' dém' → logprob: -5.982206344604492
    6. ' main' → logprob: -6.357206344604492
    7. 'l' → logprob: -6.482206344604492
    8. 'execut' → logprob: -7.107206344604492
    9. 'main' → logprob: -7.232206344604492
    10. ' run' → logprob: -8.107206344604492

Token 166: 'éc' (ID: 5675)
  Prédit: 'éc'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'éc' → logprob: -0.05673683434724808
    2. 'ecut' → logprob: -3.181736946105957
    3. 'é' → logprob: -4.556736946105957
    4. 'ec' → logprob: -6.681736946105957
    5. 'ecute' → logprob: -6.931736946105957
    6. 'e' → logprob: -8.056736946105957
    7. 'cut' → logprob: -8.306736946105957
    8. 'écut' → logprob: -8.431736946105957
    9. 'ecu' → logprob: -10.431736946105957
    10. 'cute' → logprob: -10.931736946105957

Token 167: 'uter' (ID: 23469)
  Prédit: 'uter'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'uter' → logprob: -4.4849443838757e-06
    2. 'ute' → logprob: -12.750004768371582
    3. '```' → logprob: -14.125004768371582
    4. '   ' → logprob: -16.000003814697266
    5. '``' → logprob: -16.500003814697266
    6. '

' → logprob: -16.500003814697266
    7. 'ter' → logprob: -16.625003814697266
    8. 'u' → logprob: -16.875003814697266
    9. ' uter' → logprob: -16.875003814697266
    10. 'cut' → logprob: -17.000003814697266

Token 168: ' le' (ID: 505)
  Prédit: 'main'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'main' → logprob: -0.14546173810958862
    2. ' main' → logprob: -2.0204617977142334
    3. '(main' → logprob: -6.770461559295654
    4. 'if' → logprob: -7.020461559295654
    5. ' le' → logprob: -8.020462036132812
    6. 'le' → logprob: -8.520462036132812
    7. '_main' → logprob: -9.395462036132812
    8. ' if' → logprob: -9.895462036132812
    9. '	main' → logprob: -10.520462036132812
    10. ' la' → logprob: -11.145462036132812

Token 169: ' programme' (ID: 18190)
  Prédit: ' programme'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' programme' → logprob: -0.5486910343170166
    2. 'programme' → logprob: -1.0486910343170166
    3. ' script' → logprob: -3.4236910343170166
    4. ' code' → logprob: -4.0486907958984375
    5. 'program' → logprob: -4.5486907958984375
    6. 'script' → logprob: -5.5486907958984375
    7. 'code' → logprob: -5.6736907958984375
    8. ' program' → logprob: -5.6736907958984375
    9. ' main' → logprob: -8.798690795898438
    10. '_' → logprob: -9.173690795898438

Token 170: '
' (ID: 198)
  Prédit: '
'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '
' → logprob: -0.0015565206995233893
    2. 'if' → logprob: -6.626556396484375
    3. '
' → logprob: -9.251556396484375
    4. '

' → logprob: -9.626556396484375
    5. ' 
' → logprob: -10.626556396484375
    6. 'main' → logprob: -10.626556396484375
    7. '  
' → logprob: -11.001556396484375
    8. ' if' → logprob: -13.876556396484375
    9. '    
' → logprob: -13.876556396484375
    10. '\n' → logprob: -15.251556396484375

Token 171: 'if' (ID: 366)
  Prédit: 'main'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'main' → logprob: -0.04883896932005882
    2. 'if' → logprob: -3.0488388538360596
    3. '
' → logprob: -8.29883861541748
    4. ' main' → logprob: -13.04883861541748
    5. '(main' → logprob: -15.42383861541748
    6. '

' → logprob: -15.92383861541748
    7. ' if' → logprob: -16.548839569091797
    8. '```' → logprob: -17.173839569091797
    9. ' 
' → logprob: -17.423839569091797
    10. '
' → logprob: -17.923839569091797

Token 172: ' __' (ID: 2516)
  Prédit: ' __'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' __' → logprob: -0.004163283389061689
    2. '__' → logprob: -5.6291632652282715
    3. ' ' → logprob: -7.7541632652282715
    4. ' ' → logprob: -9.25416374206543
    5. '_' → logprob: -11.50416374206543
    6. '<|end|>' → logprob: -11.75416374206543
    7. ' ' → logprob: -12.25416374206543
    8. ' ‌' → logprob: -12.50416374206543
    9. ' True' → logprob: -12.87916374206543
    10. '  ' → logprob: -13.12916374206543

Token 173: 'name' (ID: 897)
  Prédit: ' =='
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' ==' → logprob: -0.21046841144561768
    2. '__' → logprob: -1.9604684114456177
    3. ' __' → logprob: -3.460468292236328
    4. '==' → logprob: -4.960468292236328
    5. '<|end|>' → logprob: -5.085468292236328
    6. ' ' → logprob: -6.460468292236328
    7. '_' → logprob: -6.835468292236328
    8. '.' → logprob: -8.335468292236328
    9. '.__' → logprob: -8.335468292236328
    10. ' _' → logprob: -8.460468292236328

Token 174: '__' (ID: 771)
  Prédit: '__'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '__' → logprob: -7.896309739408025e-07
    2. '_' → logprob: -14.875000953674316
    3. '==' → logprob: -15.500000953674316
    4. ' ==' → logprob: -16.0
    5. '___' → logprob: -17.25
    6. '__.__' → logprob: -17.625
    7. '"' → logprob: -17.75
    8. '__
' → logprob: -17.875
    9. '__

' → logprob: -18.125
    10. '=="' → logprob: -18.125

Token 175: ' ==' (ID: 951)
  Prédit: '__'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '__' → logprob: -0.000980766722932458
    2. ' ==' → logprob: -7.500980854034424
    3. '==' → logprob: -7.875980854034424
    4. '=="' → logprob: -10.125980377197266
    5. '_' → logprob: -12.875980377197266
    6. '"' → logprob: -13.375980377197266
    7. '___' → logprob: -13.625980377197266
    8. '=='' → logprob: -14.750980377197266
    9. '__.__' → logprob: -15.000980377197266
    10. '=' → logprob: -15.125980377197266

Token 176: ' "__' (ID: 27367)
  Prédit: '"'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '"' → logprob: -0.014174322597682476
    2. ''' → logprob: -4.264174461364746
    3. ' "__' → logprob: -11.764174461364746
    4. '__' → logprob: -12.764174461364746
    5. ' '__' → logprob: -16.13917350769043
    6. ' "' → logprob: -16.26417350769043
    7. '"user' → logprob: -17.51417350769043
    8. '"I' → logprob: -18.88917350769043
    9. '"name' → logprob: -19.01417350769043
    10. ''s' → logprob: -19.13917350769043

Token 177: 'main' (ID: 7731)
  Prédit: 'main'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'main' → logprob: -1.9361264946837764e-07
    2. ' main' → logprob: -15.75
    3. 'name' → logprob: -17.375
    4. '_main' → logprob: -19.625
    5. '	main' → logprob: -20.25
    6. 'mai' → logprob: -21.25
    7. 'ma' → logprob: -21.375
    8. 'maine' → logprob: -21.625
    9. '-main' → logprob: -22.75
    10. 'm' → logprob: -23.125

Token 178: '__":
' (ID: 49892)
  Prédit: '__'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '__' → logprob: -0.023248042911291122
    2. '__":
' → logprob: -3.7732479572296143
    3. '"' → logprob: -14.148247718811035
    4. '_"' → logprob: -14.398247718811035
    5. '__["' → logprob: -14.648247718811035
    6. '__':
' → logprob: -15.273247718811035
    7. '_' → logprob: -15.273247718811035
    8. '__("' → logprob: -16.14824867248535
    9. ' __' → logprob: -16.39824867248535
    10. '___' → logprob: -16.77324867248535

Token 179: '   ' (ID: 271)
  Prédit: ' main'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' main' → logprob: -0.207284614443779
    2. 'main' → logprob: -1.9572845697402954
    3. '"' → logprob: -3.457284688949585
    4. ' __' → logprob: -4.832284450531006
    5. ' "__' → logprob: -6.457284450531006
    6. '__' → logprob: -6.457284450531006
    7. ' "' → logprob: -6.957284450531006
    8. '	main' → logprob: -7.207284450531006
    9. '_main' → logprob: -7.457284450531006
    10. '   ' → logprob: -7.582284450531006

Token 180: ' main' (ID: 2758)
  Prédit: ' main'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' main' → logprob: -0.6931474208831787
    2. 'main' (adapté à ' main') → logprob: -0.6931474208831787
    3. '	main' → logprob: -15.318147659301758
    4. '_main' → logprob: -16.568147659301758
    5. '(main' → logprob: -19.068147659301758
    6. ' ' → logprob: -19.193147659301758
    7. ' 
' → logprob: -20.193147659301758
    8. '   ' → logprob: -20.193147659301758
    9. '.main' → logprob: -20.318147659301758
    10. 'Main' → logprob: -20.943147659301758

Token 181: '()' (ID: 416)
  Prédit: '()'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '()' → logprob: -8.613945101387799e-05
    2. '()
' → logprob: -9.625085830688477
    3. '(' → logprob: -11.000085830688477
    4. ' ()' → logprob: -13.500085830688477
    5. '<|end|>' → logprob: -14.875085830688477
    6. '()

' → logprob: -15.000085830688477
    7. '()\' → logprob: -15.125085830688477
    8. '(
' → logprob: -15.375085830688477
    9. '```' → logprob: -15.625085830688477
    10. '()<' → logprob: -15.875085830688477


RÉSUMÉ:
--------------------------------------------------------------------------------
Total des tokens analysés: 179
Tokens correctement prédits (1ère position, stricte): 68
Tokens correctement prédits (1ère position, avec adaptation): 73
Tokens correctement prédits (top 10): 133
Précision stricte (1ère position): 37.99%
Précision adaptée (1ère position): 40.78%
Précision (top 10): 74.30%
================================================================================
