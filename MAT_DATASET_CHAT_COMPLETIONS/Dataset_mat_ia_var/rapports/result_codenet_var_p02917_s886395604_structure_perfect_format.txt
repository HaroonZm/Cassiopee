================================================================================
ANALYSE DE PRÉDICTION TOKEN PAR TOKEN (BATCH API)
Date: 2025-06-04 19:45:54
Modèle de tokenisation: gpt-4o-mini
================================================================================

SCRIPT ANALYSÉ:
--------------------------------------------------------------------------------
n = int(input())
B = list(map(int, input().split()))

A = [B[0]]
for i in range(n - 2):
    A.append(min(B[i], B[i + 1]))
A.append(B[-1])

print(sum(A))
--------------------------------------------------------------------------------

RÉSULTATS D'ANALYSE TOKEN PAR TOKEN:
--------------------------------------------------------------------------------
Token 0: 'n' (ID: 77)
  → Token d'amorce (pas de prédiction)

Token 1: ' =' (ID: 314)
  → Token d'amorce (pas de prédiction)

Token 2: ' int' (ID: 677)
  → Token d'amorce (pas de prédiction)

Token 3: '(input' (ID: 10054)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '(' → logprob: -0.00038134094211272895
    2. '(n' → logprob: -9.000381469726562
    3. ''' → logprob: -9.500381469726562
    4. '('' → logprob: -10.125381469726562
    5. '```' → logprob: -10.125381469726562
    6. '`' → logprob: -10.750381469726562
    7. '("("' → logprob: -10.750381469726562
    8. '()' → logprob: -11.250381469726562
    9. 'n' → logprob: -11.625381469726562
    10. ')' → logprob: -12.000381469726562

Token 4: '())
' (ID: 4574)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '(' → logprob: -0.03871168941259384
    2. ')' → logprob: -3.5387117862701416
    3. '()' → logprob: -4.9137115478515625
    4. '())' → logprob: -7.1637115478515625
    5. '(
' → logprob: -8.663711547851562
    6. '```' → logprob: -9.163711547851562
    7. '(()' → logprob: -9.413711547851562
    8. '("("' → logprob: -9.663711547851562
    9. '('' → logprob: -9.913711547851562
    10. '`' → logprob: -10.163711547851562

Token 5: 'B' (ID: 33)
  Prédit: 'if'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'if' → logprob: -1.1005412340164185
    2. 'i' → logprob: -1.6005412340164185
    3. 'for' → logprob: -1.6005412340164185
    4. 's' → logprob: -2.850541114807129
    5. '*' → logprob: -3.100541114807129
    6. 'x' → logprob: -3.600541114807129
    7. 'a' → logprob: -3.850541114807129
    8. ')' → logprob: -3.850541114807129
    9. '#' → logprob: -4.225541114807129
    10. ' ' → logprob: -4.350541114807129

Token 6: ' =' (ID: 314)
  Prédit: ' ='
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' =' → logprob: -0.2281964123249054
    2. '=' → logprob: -2.603196382522583
    3. '**' → logprob: -2.978196382522583
    4. '[i' → logprob: -3.228196382522583
    5. '[' → logprob: -4.103196620941162
    6. ',' → logprob: -5.728196620941162
    7. ')' → logprob: -6.103196620941162
    8. '-' → logprob: -6.103196620941162
    9. '*' → logprob: -6.103196620941162
    10. '.' → logprob: -6.603196620941162

Token 7: ' list' (ID: 1562)
  Prédit: '[]'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '[]' → logprob: -0.45777392387390137
    2. ' []' → logprob: -1.9577739238739014
    3. ' [' → logprob: -2.3327739238739014
    4. '[' → logprob: -2.7077739238739014
    5. 'n' → logprob: -4.0827741622924805
    6. '[n' → logprob: -4.3327741622924805
    7. '0' → logprob: -4.5827741622924805
    8. 'list' → logprob: -4.9577741622924805
    9. ' n' → logprob: -5.4577741622924805
    10. ' ' → logprob: -6.2077741622924805

Token 8: '(map' (ID: 16946)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '(' → logprob: -5.3596853831550106e-05
    2. '(range' → logprob: -11.000053405761719
    3. '(B' → logprob: -11.125053405761719
    4. '()' → logprob: -12.375053405761719
    5. '(
' → logprob: -12.750053405761719
    6. '(n' → logprob: -13.000053405761719
    7. '[' → logprob: -13.250053405761719
    8. '(`' → logprob: -13.625053405761719
    9. '(input' → logprob: -13.875053405761719
    10. ' (' → logprob: -14.000053405761719

Token 9: '(int' (ID: 2742)
  Prédit: '(int'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(int' → logprob: -0.013020927086472511
    2. '(' → logprob: -4.513020992279053
    3. '(str' → logprob: -6.513020992279053
    4. '(input' → logprob: -8.388020515441895
    5. '(lambda' → logprob: -9.138020515441895
    6. 'int' → logprob: -9.638020515441895
    7. '<int' → logprob: -10.638020515441895
    8. '(eval' → logprob: -10.763020515441895
    9. '(
' → logprob: -11.763020515441895
    10. ')' → logprob: -12.013020515441895

Token 10: ',' (ID: 11)
  Prédit: '(input'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(input' → logprob: -0.007703160867094994
    2. ',input' → logprob: -5.6327033042907715
    3. '(' → logprob: -6.1327033042907715
    4. ')' → logprob: -7.1327033042907715
    5. ',' → logprob: -7.5077033042907715
    6. '))' → logprob: -9.007702827453613
    7. '=input' → logprob: -9.132702827453613
    8. '(int' → logprob: -9.257702827453613
    9. 'input' → logprob: -9.757702827453613
    10. '<input' → logprob: -10.507702827453613

Token 11: ' input' (ID: 3422)
  Prédit: 'input'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'input' → logprob: -0.31327199935913086
    2. ' input' → logprob: -1.3132719993591309
    3. '(input' → logprob: -12.438272476196289
    4. ')' → logprob: -12.688272476196289
    5. ',input' → logprob: -13.188272476196289
    6. ' ' → logprob: -14.688272476196289
    7. '	input' → logprob: -15.313272476196289
    8. '=input' → logprob: -15.563272476196289
    9. '[input' → logprob: -15.938272476196289
    10. 'range' → logprob: -16.43827247619629

Token 12: '().' (ID: 1454)
  Prédit: '())'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '())' → logprob: -0.5506778359413147
    2. '()' → logprob: -1.42567777633667
    3. '()))' → logprob: -1.80067777633667
    4. '().' → logprob: -5.30067777633667
    5. '(' → logprob: -5.30067777633667
    6. ')' → logprob: -5.42567777633667
    7. '()));' → logprob: -6.42567777633667
    8. '()>' → logprob: -7.67567777633667
    9. '());' → logprob: -7.92567777633667
    10. '))' → logprob: -7.92567777633667

Token 13: 'split' (ID: 13627)
  Prédit: 'split'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'split' → logprob: -0.000936355150770396
    2. 'strip' → logprob: -7.000936508178711
    3. 'rstrip' → logprob: -10.750936508178711
    4. ' split' → logprob: -12.875936508178711
    5. '(split' → logprob: -14.625936508178711
    6. ')' → logprob: -15.625936508178711
    7. 'spl' → logprob: -16.00093650817871
    8. 's' → logprob: -16.87593650817871
    9. 'replace' → logprob: -17.37593650817871
    10. 'sp' → logprob: -17.87593650817871

Token 14: '()))

' (ID: 125972)
  Prédit: '))'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '))' → logprob: -0.6011977791786194
    2. '()))' → logprob: -0.9761977791786194
    3. ')' → logprob: -3.3511977195739746
    4. '())' → logprob: -3.6011977195739746
    5. '(' → logprob: -4.726197719573975
    6. '()' → logprob: -6.101197719573975
    7. '('' → logprob: -6.976197719573975
    8. ''))' → logprob: -8.101198196411133
    9. '(','' → logprob: -8.726198196411133
    10. ')))' → logprob: -9.476198196411133

Token 15: 'A' (ID: 32)
  Prédit: 's'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 's' → logprob: -0.5968326330184937
    2. 'c' → logprob: -2.096832752227783
    3. 'max' → logprob: -2.721832752227783
    4. 'm' → logprob: -3.221832752227783
    5. 'd' → logprob: -3.346832752227783
    6. 'for' → logprob: -3.596832752227783
    7. 'a' → logprob: -3.721832752227783
    8. 'S' → logprob: -3.721832752227783
    9. 'B' → logprob: -4.221832752227783
    10. 'k' → logprob: -4.471832752227783

Token 16: ' =' (ID: 314)
  Prédit: '['
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '[' → logprob: -0.002137532690539956
    2. '=' → logprob: -7.252137660980225
    3. ' =' → logprob: -7.502137660980225
    4. '[i' → logprob: -8.252137184143066
    5. '[:]' → logprob: -8.627137184143066
    6. '.' → logprob: -9.002137184143066
    7. '\[' → logprob: -9.252137184143066
    8. '[]' → logprob: -9.502137184143066
    9. '_' → logprob: -10.627137184143066
    10. ' ' → logprob: -10.877137184143066

Token 17: ' [' (ID: 723)
  Prédit: ' ['
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' [' → logprob: -1.0400739908218384
    2. '[]' → logprob: -1.0400739908218384
    3. '[' → logprob: -1.7900739908218384
    4. ' []' → logprob: -2.290073871612549
    5. ' B' → logprob: -4.290073871612549
    6. '[B' → logprob: -5.165073871612549
    7. 'B' → logprob: -5.915073871612549
    8. ' sorted' → logprob: -6.665073871612549
    9. '[n' → logprob: -8.040074348449707
    10. '[len' → logprob: -8.165074348449707

Token 18: 'B' (ID: 33)
  Prédit: '0'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '0' → logprob: -0.09044238924980164
    2. 'B' → logprob: -2.465442419052124
    3. ' ' → logprob: -7.090442180633545
    4. ' B' → logprob: -7.965442180633545
    5. ')' → logprob: -8.965442657470703
    6. ']' → logprob: -9.215442657470703
    7. '])' → logprob: -9.590442657470703
    8. '1' → logprob: -12.340442657470703
    9. '   ' → logprob: -12.840442657470703
    10. ' ])' → logprob: -12.965442657470703

Token 19: '[' (ID: 58)
  Prédit: '['
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '[' → logprob: -0.003884869161993265
    2. '[i' → logprob: -5.753884792327881
    3. '[-' → logprob: -7.753884792327881
    4. '[:' → logprob: -9.878885269165039
    5. '.index' → logprob: -9.878885269165039
    6. '[:]' → logprob: -10.378885269165039
    7. '-' → logprob: -10.503885269165039
    8. ']' → logprob: -10.628885269165039
    9. '])' → logprob: -11.003885269165039
    10. '[n' → logprob: -11.003885269165039

Token 20: '0' (ID: 15)
  Prédit: '0'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '0' → logprob: -0.0031100958585739136
    2. 'i' → logprob: -6.503109931945801
    3. '-' → logprob: -6.753109931945801
    4. '1' → logprob: -8.3781099319458
    5. ' ' → logprob: -9.0031099319458
    6. 'n' → logprob: -9.8781099319458
    7. ']' → logprob: -11.5031099319458
    8. ' -' → logprob: -11.6281099319458
    9. ' i' → logprob: -12.0031099319458
    10. '   ' → logprob: -13.2531099319458

Token 21: ']]
' (ID: 29446)
  Prédit: ']'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ']' → logprob: -0.7458304166793823
    2. '])' → logprob: -1.2458304166793823
    3. ',' → logprob: -2.870830535888672
    4. ' ])' → logprob: -2.995830535888672
    5. ' -' → logprob: -3.495830535888672
    6. ')]' → logprob: -3.620830535888672
    7. '])]' → logprob: -3.620830535888672
    8. ' ]' → logprob: -4.370830535888672
    9. ')' → logprob: -4.495830535888672
    10. '-' → logprob: -4.620830535888672

Token 22: 'for' (ID: 1938)
  Prédit: ','
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ',' → logprob: -0.4892909526824951
    2. '+' → logprob: -1.4892909526824951
    3. ' ' → logprob: -2.864290952682495
    4. ' for' → logprob: -2.989290952682495
    5. ' ,' → logprob: -4.239291191101074
    6. 'for' → logprob: -4.239291191101074
    7. ' +' → logprob: -4.989291191101074
    8. '[' → logprob: -5.114291191101074
    9. ')' → logprob: -5.739291191101074
    10. '0' → logprob: -5.864291191101074

Token 23: ' i' (ID: 575)
  Prédit: ' i'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' i' → logprob: -0.13780933618545532
    2. ' ' → logprob: -2.1378092765808105
    3. 'i' → logprob: -4.6378092765808105
    4. ' _' → logprob: -7.2628092765808105
    5. '_' → logprob: -7.7628092765808105
    6. '  ' → logprob: -11.762809753417969
    7. ' ' → logprob: -12.387809753417969
    8. '_i' → logprob: -13.887809753417969
    9. ' ‌' → logprob: -14.137809753417969
    10. ' in' → logprob: -14.262809753417969

Token 24: ' in' (ID: 306)
  Prédit: ' in'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' in' → logprob: -0.0012435632525011897
    2. 'in' → logprob: -6.751243591308594
    3. ' ' → logprob: -9.626243591308594
    4. '	in' → logprob: -13.126243591308594
    5. ',' → logprob: -13.376243591308594
    6. '  ' → logprob: -13.751243591308594
    7. '   ' → logprob: -14.001243591308594
    8. 'n' → logprob: -14.626243591308594
    9. '+' → logprob: -15.126243591308594
    10. ')' → logprob: -15.376243591308594

Token 25: ' range' (ID: 3352)
  Prédit: ' range'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' range' → logprob: -0.0299056526273489
    2. 'range' → logprob: -3.5299055576324463
    3. ' ' → logprob: -8.779905319213867
    4. '	range' → logprob: -14.529905319213867
    5. ' xrange' → logprob: -15.154905319213867
    6. '  ' → logprob: -15.154905319213867
    7. '(range' → logprob: -15.529905319213867
    8. ' in' → logprob: -16.529905319213867
    9. '   ' → logprob: -17.279905319213867
    10. ')' → logprob: -17.404905319213867

Token 26: '(n' (ID: 2406)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(' → logprob: -7.703443770878948e-06
    2. '(len' → logprob: -11.875007629394531
    3. ' (' → logprob: -14.375007629394531
    4. '(n' → logprob: -16.75000762939453
    5. '(i' → logprob: -17.25000762939453
    6. ' ' → logprob: -17.50000762939453
    7. '(
' → logprob: -17.87500762939453
    8. '((' → logprob: -19.37500762939453
    9. '()' → logprob: -19.75000762939453
    10. '(+' → logprob: -19.87500762939453

Token 27: ' -' (ID: 533)
  Prédit: '-'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '-' → logprob: -0.39227044582366943
    2. '):' → logprob: -1.6422704458236694
    3. ' -' → logprob: -2.142270565032959
    4. '):
' → logprob: -4.767270565032959
    5. ')' → logprob: -6.767270565032959
    6. ' ):' → logprob: -6.767270565032959
    7. ' ' → logprob: -6.892270565032959
    8. '1' → logprob: -7.017270565032959
    9. '+' → logprob: -8.0172700881958
    10. '2' → logprob: -8.7672700881958

Token 28: ' ' (ID: 220)
  Prédit: '1'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '1' → logprob: -0.08894132822751999
    2. ' ' → logprob: -2.4639413356781006
    3. '2' → logprob: -13.33894157409668
    4. '  ' → logprob: -16.33894157409668
    5. '   ' → logprob: -16.96394157409668
    6. ' ' → logprob: -17.52644157409668
    7. '<|end|>' → logprob: -17.58894157409668
    8. ')' → logprob: -17.83894157409668
    9. '１' → logprob: -17.83894157409668
    10. '0' → logprob: -18.58894157409668

Token 29: '2' (ID: 17)
  Prédit: '1'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '1' → logprob: -0.0005552975926548243
    2. ' ' → logprob: -7.500555515289307
    3. '2' → logprob: -13.250555038452148
    4. '  ' → logprob: -16.12555503845215
    5. '   ' → logprob: -16.37555503845215
    6. '```' → logprob: -16.50055503845215
    7. ')' → logprob: -16.56305503845215
    8. '１' → logprob: -16.68805503845215
    9. '۱' → logprob: -17.75055503845215
    10. '3' → logprob: -18.25055503845215

Token 30: '):
' (ID: 1883)
  Prédit: ','
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ',' → logprob: -0.3062472939491272
    2. '):' → logprob: -2.0562472343444824
    3. ' ,' → logprob: -2.5562472343444824
    4. ',-' → logprob: -3.3062472343444824
    5. '):
' → logprob: -4.806247234344482
    6. ')' → logprob: -5.556247234344482
    7. '+' → logprob: -5.806247234344482
    8. ' ):' → logprob: -5.931247234344482
    9. ' +' → logprob: -6.931247234344482
    10. ' -' → logprob: -7.431247234344482

Token 31: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.5048348903656006
    2. ' A' → logprob: -1.0048348903656006
    3. ' ' → logprob: -3.8798348903656006
    4. 'A' → logprob: -5.25483512878418
    5. '    
' → logprob: -6.37983512878418
    6. '	A' → logprob: -6.75483512878418
    7. ' 
' → logprob: -7.75483512878418
    8. '  ' → logprob: -8.25483512878418
    9. '    ' → logprob: -8.62983512878418
    10. '```' → logprob: -9.00483512878418

Token 32: ' A' (ID: 355)
  Prédit: 'A'
  Correct (stricte): False
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'A' (adapté à ' A') → logprob: -0.286498486995697
    2. ' A' → logprob: -1.4114985466003418
    3. '   ' → logprob: -5.411498546600342
    4. ' ' → logprob: -7.536498546600342
    5. 'B' → logprob: -9.661498069763184
    6. ' if' → logprob: -9.786498069763184
    7. ' B' → logprob: -10.411498069763184
    8. 'a' → logprob: -10.411498069763184
    9. 'if' → logprob: -10.411498069763184
    10. 'print' → logprob: -10.911498069763184

Token 33: '.append' (ID: 3709)
  Prédit: '.append'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '.append' → logprob: -0.47872689366340637
    2. '.' → logprob: -0.978726863861084
    3. '+' → logprob: -5.853726863861084
    4. ' .' → logprob: -7.228726863861084
    5. ' +=' → logprob: -8.103727340698242
    6. ' ' → logprob: -8.228727340698242
    7. '+=' → logprob: -8.978727340698242
    8. '.app' → logprob: -9.603727340698242
    9. '+.' → logprob: -9.853727340698242
    10. '.a' → logprob: -10.103727340698242

Token 34: '(min' (ID: 26035)
  Prédit: '(B'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(B' → logprob: -0.48963499069213867
    2. '(A' → logprob: -1.4896349906921387
    3. '((' → logprob: -2.1146349906921387
    4. '(' → logprob: -3.2396349906921387
    5. '(max' → logprob: -6.614634990692139
    6. '(min' → logprob: -8.364635467529297
    7. '(abs' → logprob: -8.864635467529297
    8. '(((' → logprob: -10.614635467529297
    9. '(sum' → logprob: -10.739635467529297
    10. '(a' → logprob: -11.114635467529297

Token 35: '(B' (ID: 8409)
  Prédit: '(B'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(B' → logprob: -0.6933332085609436
    2. '(A' → logprob: -0.6933332085609436
    3. '(' → logprob: -8.943333625793457
    4. ')' → logprob: -11.443333625793457
    5. 'A' → logprob: -11.443333625793457
    6. '((' → logprob: -11.568333625793457
    7. 'B' → logprob: -11.818333625793457
    8. '(a' → logprob: -11.943333625793457
    9. '(i' → logprob: -13.443333625793457
    10. '(
' → logprob: -13.818333625793457

Token 36: '[i' (ID: 1768)
  Prédit: '[i'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '[i' → logprob: -0.00011236425780225545
    2. '[A' → logprob: -9.375112533569336
    3. '[' → logprob: -10.625112533569336
    4. ')' → logprob: -13.625112533569336
    5. '[
' → logprob: -15.000112533569336
    6. '[a' → logprob: -15.125112533569336
    7. '[-' → logprob: -15.625112533569336
    8. '[j' → logprob: -15.750112533569336
    9. '[I' → logprob: -15.750112533569336
    10. ' [' → logprob: -15.875112533569336

Token 37: '],' (ID: 2155)
  Prédit: ','
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ',' → logprob: -0.44696494936943054
    2. '[i' → logprob: -1.196964979171753
    3. '+' → logprob: -3.571964979171753
    4. '[' → logprob: -4.321964740753174
    5. ' ,' → logprob: -4.946964740753174
    6. '],' → logprob: -5.821964740753174
    7. ',i' → logprob: -5.946964740753174
    8. ']' → logprob: -6.446964740753174
    9. 'i' → logprob: -7.696964740753174
    10. '   ' → logprob: -7.946964740753174

Token 38: ' B' (ID: 418)
  Prédit: ' B'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' B' → logprob: -0.6326481699943542
    2. 'B' → logprob: -0.7576481699943542
    3. ' ' → logprob: -11.007648468017578
    4. ' ' → logprob: -11.132648468017578
    5. '   ' → logprob: -11.257648468017578
    6. '	B' → logprob: -13.945148468017578
    7. '  ' → logprob: -14.007648468017578
    8. 'A' → logprob: -14.070148468017578
    9. ' A' → logprob: -14.882648468017578
    10. '    ' → logprob: -14.945148468017578

Token 39: '[i' (ID: 1768)
  Prédit: '[i'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '[i' → logprob: -0.00013893934374209493
    2. '[' → logprob: -9.000139236450195
    3. '+' → logprob: -11.375139236450195
    4. '[j' → logprob: -12.875139236450195
    5. '[++' → logprob: -15.000139236450195
    6. '[
' → logprob: -15.625139236450195
    7. ' [' → logprob: -16.250139236450195
    8. '][' → logprob: -16.250139236450195
    9. '   ' → logprob: -16.375139236450195
    10. '[len' → logprob: -16.500139236450195

Token 40: ' +' (ID: 659)
  Prédit: '+'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '+' → logprob: -0.012525065802037716
    2. ' +' → logprob: -4.3875250816345215
    3. '   ' → logprob: -11.887524604797363
    4. ' ' → logprob: -12.762524604797363
    5. '1' → logprob: -13.137524604797363
    6. '],' → logprob: -13.387524604797363
    7. '+i' → logprob: -13.887524604797363
    8. '  ' → logprob: -15.262524604797363
    9. '-' → logprob: -15.387524604797363
    10. ']' → logprob: -15.387524604797363

Token 41: ' ' (ID: 220)
  Prédit: '1'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '1' → logprob: -8.93579563125968e-05
    2. ' ' → logprob: -9.375089645385742
    3. '+' → logprob: -13.000089645385742
    4. '   ' → logprob: -13.625089645385742
    5. '0' → logprob: -15.000089645385742
    6. '2' → logprob: -15.375089645385742
    7. '  ' → logprob: -16.125089645385742
    8. '])' → logprob: -16.562589645385742
    9. '-' → logprob: -17.000089645385742
    10. ' +' → logprob: -17.187589645385742

Token 42: '1' (ID: 16)
  Prédit: '1'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '1' → logprob: -1.9146995327901095e-05
    2. ' ' → logprob: -11.000019073486328
    3. '   ' → logprob: -14.125019073486328
    4. '+' → logprob: -14.687519073486328
    5. '0' → logprob: -14.812519073486328
    6. '2' → logprob: -15.125019073486328
    7. '  ' → logprob: -15.750019073486328
    8. '])' → logprob: -16.187519073486328
    9. '-' → logprob: -16.312519073486328
    10. '11' → logprob: -17.187519073486328

Token 43: ']))
' (ID: 24801)
  Prédit: '))'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '))' → logprob: -0.27369225025177
    2. ')' → logprob: -1.89869225025177
    3. ')))' → logprob: -2.6486921310424805
    4. ']))' → logprob: -4.0236921310424805
    5. ')])' → logprob: -7.6486921310424805
    6. '])' → logprob: -8.52369213104248
    7. ']' → logprob: -9.77369213104248
    8. '))
' → logprob: -9.77369213104248
    9. '}))' → logprob: -9.89869213104248
    10. '']))' → logprob: -9.89869213104248

Token 44: 'A' (ID: 32)
  Prédit: 'A'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'A' → logprob: -0.00903050322085619
    2. '```' → logprob: -5.884030342102051
    3. 'print' → logprob: -6.009030342102051
    4. ' A' → logprob: -7.009030342102051
    5. ')
' → logprob: -7.009030342102051
    6. '``' → logprob: -7.634030342102051
    7. 'B' → logprob: -8.00903034210205
    8. ')' → logprob: -8.38403034210205
    9. '  
' → logprob: -8.38403034210205
    10. '
' → logprob: -8.63403034210205

Token 45: '.append' (ID: 3709)
  Prédit: '.append'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '.append' → logprob: -0.0031949470285326242
    2. '.' → logprob: -5.753194808959961
    3. '+' → logprob: -12.503194808959961
    4. ' .' → logprob: -12.753194808959961
    5. '[' → logprob: -13.128194808959961
    6. '.Append' → logprob: -13.128194808959961
    7. 'append' → logprob: -13.253194808959961
    8. '<|end|>' → logprob: -13.628194808959961
    9. '.app' → logprob: -14.253194808959961
    10. '.py' → logprob: -14.878194808959961

Token 46: '(B' (ID: 8409)
  Prédit: '(B'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(B' → logprob: -8.566264295950532e-05
    2. '(' → logprob: -9.375085830688477
    3. 'B' → logprob: -15.375085830688477
    4. '(min' → logprob: -15.375085830688477
    5. '((' → logprob: -16.125085830688477
    6. '(A' → logprob: -16.500085830688477
    7. '(b' → logprob: -16.750085830688477
    8. ' (' → logprob: -17.000085830688477
    9. '(
' → logprob: -18.500085830688477
    10. '()' → logprob: -19.125085830688477

Token 47: '[-' (ID: 17503)
  Prédit: '[-'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '[-' → logprob: -3.5597102396423e-05
    2. '[n' → logprob: -10.500035285949707
    3. '[' → logprob: -11.750035285949707
    4. '[len' → logprob: -16.125036239624023
    5. '[i' → logprob: -17.000036239624023
    6. '[
' → logprob: -18.250036239624023
    7. '[N' → logprob: -19.250036239624023
    8. ')' → logprob: -20.250036239624023
    9. '-' → logprob: -20.625036239624023
    10. ' [-' → logprob: -21.250036239624023

Token 48: '1' (ID: 16)
  Prédit: '1'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '1' → logprob: -1.981667537620524e-06
    2. ' ' → logprob: -13.875001907348633
    3. '0' → logprob: -14.125001907348633
    4. '2' → logprob: -15.250001907348633
    5. '-' → logprob: -17.625001907348633
    6. '１' → logprob: -17.937501907348633
    7. '])' → logprob: -18.062501907348633
    8. '   ' → logprob: -18.250001907348633
    9. '  ' → logprob: -18.312501907348633
    10. '```' → logprob: -18.750001907348633

Token 49: '])

' (ID: 21045)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ')' → logprob: -0.0002583594177849591
    2. '])' → logprob: -8.375258445739746
    3. '))' → logprob: -10.750258445739746
    4. '）' → logprob: -13.125258445739746
    5. ')
' → logprob: -13.875258445739746
    6. ')])' → logprob: -14.000258445739746
    7. '})' → logprob: -14.250258445739746
    8. '`)' → logprob: -14.625258445739746
    9. ']' → logprob: -14.750258445739746
    10. ')]' → logprob: -14.875258445739746

Token 50: 'print' (ID: 1598)
  Prédit: 'print'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'print' → logprob: -7.111979357432574e-05
    2. 'for' → logprob: -9.75007152557373
    3. '```' → logprob: -11.62507152557373
    4. '#print' → logprob: -13.37507152557373
    5. '#' → logprob: -13.50007152557373
    6. ' print' → logprob: -14.50007152557373
    7. '<|end|>' → logprob: -15.25007152557373
    8. ')' → logprob: -16.250070571899414
    9. '``' → logprob: -17.125070571899414
    10. '
' → logprob: -17.500070571899414

Token 51: '(sum' (ID: 45528)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(' → logprob: -0.2524392306804657
    2. '(A' → logprob: -1.502439260482788
    3. '(len' → logprob: -8.377439498901367
    4. '()' → logprob: -9.127439498901367
    5. '('' → logprob: -9.752439498901367
    6. '(sum' → logprob: -10.002439498901367
    7. '("("' → logprob: -10.752439498901367
    8. '((' → logprob: -11.002439498901367
    9. '(*' → logprob: -11.127439498901367
    10. '(max' → logprob: -12.502439498901367

Token 52: '(A' (ID: 10706)
  Prédit: '(A'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(A' → logprob: -0.00015872348740231246
    2. '(' → logprob: -8.750158309936523
    3. '(a' → logprob: -16.125158309936523
    4. '(B' → logprob: -16.625158309936523
    5. '(
' → logprob: -16.875158309936523
    6. ')' → logprob: -17.750158309936523
    7. '()' → logprob: -18.375158309936523
    8. '(`' → logprob: -18.750158309936523
    9. '(

' → logprob: -19.000158309936523
    10. ' (' → logprob: -19.375158309936523

Token 53: '))' (ID: 915)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')' → logprob: -0.4740792512893677
    2. '))' → logprob: -0.9740792512893677
    3. ')))' → logprob: -13.974079132080078
    4. ')
' → logprob: -14.224079132080078
    5. '))
' → logprob: -15.474079132080078
    6. ' )' → logprob: -15.849079132080078
    7. '])' → logprob: -16.474079132080078
    8. ')`' → logprob: -16.474079132080078
    9. ')")' → logprob: -17.224079132080078
    10. ')**' → logprob: -17.474079132080078


RÉSUMÉ:
--------------------------------------------------------------------------------
Total des tokens analysés: 51
Tokens correctement prédits (1ère position, stricte): 23
Tokens correctement prédits (1ère position, avec adaptation): 24
Tokens correctement prédits (top 10): 41
Précision stricte (1ère position): 45.10%
Précision adaptée (1ère position): 47.06%
Précision (top 10): 80.39%
================================================================================
