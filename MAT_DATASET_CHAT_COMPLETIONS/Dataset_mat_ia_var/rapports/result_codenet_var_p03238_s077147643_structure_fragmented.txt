================================================================================
ANALYSE DE PRÉDICTION TOKEN PAR TOKEN (BATCH API)
Date: 2025-06-04 20:06:39
Modèle de tokenisation: gpt-4o-mini
================================================================================

SCRIPT ANALYSÉ:
--------------------------------------------------------------------------------
def get_input_as_int():
    return int(input())

def is_one(value):
    return value == 1

def print_hello_world():
    print('Hello World')

def get_two_int_inputs():
    return int(input()), int(input())

def sum_values(a, b):
    return a + b

def print_sum(val):
    print(val)

def handle_case_one():
    print_hello_world()

def handle_case_else():
    a, b = get_two_int_inputs()
    total = sum_values(a, b)
    print_sum(total)

def execute_case(n):
    if is_one(n):
        handle_case_one()
    else:
        handle_case_else()

def main():
    n = get_input_as_int()
    execute_case(n)

if __name__ == '__main__':
    main()
--------------------------------------------------------------------------------

RÉSULTATS D'ANALYSE TOKEN PAR TOKEN:
--------------------------------------------------------------------------------
Token 0: 'def' (ID: 1314)
  → Token d'amorce (pas de prédiction)

Token 1: ' get' (ID: 717)
  → Token d'amorce (pas de prédiction)

Token 2: '_input' (ID: 12507)
  → Token d'amorce (pas de prédiction)

Token 3: '_as' (ID: 25206)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '(' → logprob: -0.002158825984224677
    2. '_' → logprob: -6.2521586418151855
    3. '():' → logprob: -9.252159118652344
    4. ' (' → logprob: -10.252159118652344
    5. '()' → logprob: -10.627159118652344
    6. '```' → logprob: -10.627159118652344
    7. '(_' → logprob: -11.502159118652344
    8. '(:' → logprob: -11.627159118652344
    9. '(_:' → logprob: -12.127159118652344
    10. ':' → logprob: -12.502159118652344

Token 4: '_int' (ID: 12285)
  Prédit: '_string'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '_string' → logprob: -0.1704360693693161
    2. 'string' → logprob: -2.545436143875122
    3. '_str' → logprob: -3.295436143875122
    4. 's' → logprob: -3.920436143875122
    5. '_list' → logprob: -4.670435905456543
    6. '```' → logprob: -5.420435905456543
    7. 'tring' → logprob: -6.670435905456543
    8. 'str' → logprob: -7.045435905456543
    9. '_' → logprob: -7.045435905456543
    10. 'def' → logprob: -7.170435905456543

Token 5: '():
' (ID: 8595)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '(' → logprob: -0.0010269738268107176
    2. '():' → logprob: -7.2510271072387695
    3. '_' → logprob: -8.62602710723877
    4. '(:' → logprob: -10.37602710723877
    5. ' (' → logprob: -10.62602710723877
    6. '```' → logprob: -10.62602710723877
    7. '(_:' → logprob: -11.37602710723877
    8. '()' → logprob: -11.50102710723877
    9. ':' → logprob: -11.62602710723877
    10. '(_' → logprob: -12.25102710723877

Token 6: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -1.319033145904541
    2. '\n' → logprob: -1.694033145904541
    3. ':' → logprob: -1.819033145904541
    4. '```' → logprob: -1.819033145904541
    5. '():' → logprob: -2.694033145904541
    6. '\' → logprob: -2.944033145904541
    7. '(' → logprob: -3.819033145904541
    8. '    
' → logprob: -4.069033145904541
    9. ':
' → logprob: -4.194033145904541
    10. '
' → logprob: -4.319033145904541

Token 7: ' return' (ID: 622)
  Prédit: 'return'
  Correct (stricte): False
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'return' (adapté à ' return') → logprob: -0.6344497799873352
    2. '   ' → logprob: -1.6344497203826904
    3. 'x' → logprob: -2.5094497203826904
    4. 'i' → logprob: -2.7594497203826904
    5. 'input' → logprob: -3.1344497203826904
    6. '```' → logprob: -3.7594497203826904
    7. ' return' → logprob: -4.0094499588012695
    8. 'n' → logprob: -4.1344499588012695
    9. 'r' → logprob: -4.6344499588012695
    10. ' ' → logprob: -5.6344499588012695

Token 8: ' int' (ID: 677)
  Prédit: ' int'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' int' → logprob: -0.004698426462709904
    2. 'int' → logprob: -5.629698276519775
    3. ' input' → logprob: -7.504698276519775
    4. ' ' → logprob: -7.629698276519775
    5. 'input' → logprob: -10.629698753356934
    6. '  ' → logprob: -11.504698753356934
    7. '(int' → logprob: -11.754698753356934
    8. '0' → logprob: -12.504698753356934
    9. '<int' → logprob: -12.879698753356934
    10. '```' → logprob: -13.129698753356934

Token 9: '(input' (ID: 10054)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(' → logprob: -0.006947787944227457
    2. '(input' → logprob: -5.006947994232178
    3. '()' → logprob: -9.75694751739502
    4. '('' → logprob: -9.88194751739502
    5. 'input' → logprob: -10.25694751739502
    6. '```' → logprob: -10.50694751739502
    7. ' (' → logprob: -10.75694751739502
    8. '("("' → logprob: -12.13194751739502
    9. '(
' → logprob: -12.50694751739502
    10. ''' → logprob: -12.50694751739502

Token 10: '())

' (ID: 27654)
  Prédit: '())'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '())' → logprob: -0.2823391556739807
    2. '()' → logprob: -1.907339096069336
    3. '(' → logprob: -2.532339096069336
    4. '()))' → logprob: -4.157339096069336
    5. ')' → logprob: -6.532339096069336
    6. ' ())' → logprob: -8.407339096069336
    7. '(()' → logprob: -8.532339096069336
    8. '(""))' → logprob: -8.907339096069336
    9. '))' → logprob: -9.282339096069336
    10. '('' → logprob: -9.907339096069336

Token 11: 'def' (ID: 1314)
  Prédit: '\n'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '\n' → logprob: -0.5924813747406006
    2. '```' → logprob: -1.4674813747406006
    3. '
' → logprob: -2.5924813747406006
    4. '\' → logprob: -3.5924813747406006
    5. '' → logprob: -3.7174813747406006
    6. '()' → logprob: -4.21748161315918
    7. '<|end|>' → logprob: -4.21748161315918
    8. ':' → logprob: -4.46748161315918
    9. '#' → logprob: -5.21748161315918
    10. '(' → logprob: -5.34248161315918

Token 12: ' is' (ID: 382)
  Prédit: ' get'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' get' → logprob: -0.15950238704681396
    2. ' calculate' → logprob: -2.1595025062561035
    3. ' space' → logprob: -4.5345025062561035
    4. ' ' → logprob: -5.0345025062561035
    5. ' user' → logprob: -5.9095025062561035
    6. ' add' → logprob: -6.2845025062561035
    7. ' main' → logprob: -6.6595025062561035
    8. ' process' → logprob: -6.6595025062561035
    9. ' compute' → logprob: -6.9095025062561035
    10. ' my' → logprob: -7.1595025062561035

Token 13: '_one' (ID: 26979)
  Prédit: '_prime'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '_prime' → logprob: -0.4630919098854065
    2. '_' → logprob: -1.8380918502807617
    3. '_pal' → logprob: -2.0880918502807617
    4. '_even' → logprob: -2.7130918502807617
    5. ' prime' → logprob: -5.463091850280762
    6. '_valid' → logprob: -5.588091850280762
    7. ' ' → logprob: -5.713091850280762
    8. ' even' → logprob: -5.838091850280762
    9. '_div' → logprob: -6.088091850280762
    10. ' _' → logprob: -6.213091850280762

Token 14: '(value' (ID: 6333)
  Prédit: '_'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '_' → logprob: -0.0042301202192902565
    2. '(' → logprob: -6.12923002243042
    3. '_(' → logprob: -7.62923002243042
    4. '_equal' → logprob: -8.254230499267578
    5. '_word' → logprob: -8.504230499267578
    6. '_space' → logprob: -8.629230499267578
    7. '_digit' → logprob: -8.629230499267578
    8. '_number' → logprob: -9.254230499267578
    9. '__' → logprob: -9.504230499267578
    10. 's' → logprob: -9.754230499267578

Token 15: '):
' (ID: 1883)
  Prédit: '):'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '):' → logprob: -0.4578946530818939
    2. ')' → logprob: -1.7078946828842163
    3. '=' → logprob: -1.9578946828842163
    4. '==' → logprob: -3.3328945636749268
    5. ')==' → logprob: -6.082894802093506
    6. ' ==' → logprob: -6.207894802093506
    7. ' ):' → logprob: -6.957894802093506
    8. '_' → logprob: -6.957894802093506
    9. '(' → logprob: -7.082894802093506
    10. ' )' → logprob: -8.082894325256348

Token 16: '   ' (ID: 271)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(' → logprob: -0.24271444976329803
    2. '(value' → logprob: -1.6177144050598145
    3. ' (' → logprob: -4.1177144050598145
    4. '   ' → logprob: -8.117714881896973
    5. ' value' → logprob: -8.867714881896973
    6. ' ' → logprob: -8.992714881896973
    7. '    ' → logprob: -9.742714881896973
    8. ' return' → logprob: -10.117714881896973
    9. 'value' → logprob: -10.117714881896973
    10. '(
' → logprob: -10.492714881896973

Token 17: ' return' (ID: 622)
  Prédit: ' value'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' value' → logprob: -0.055795103311538696
    2. 'value' → logprob: -2.930795192718506
    3. ' return' → logprob: -7.180795192718506
    4. '   ' → logprob: -9.305794715881348
    5. '(value' → logprob: -10.180794715881348
    6. 'return' (adapté à ' return') → logprob: -11.430794715881348
    7. '    ' → logprob: -12.305794715881348
    8. ' (' → logprob: -12.680794715881348
    9. 'v' → logprob: -13.930794715881348
    10. ' ' → logprob: -14.305794715881348

Token 18: ' value' (ID: 1432)
  Prédit: ' value'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' value' → logprob: -0.020638704299926758
    2. 'value' → logprob: -3.8956387042999268
    3. ' ' → logprob: -9.895638465881348
    4. ' True' → logprob: -10.770638465881348
    5. '(value' → logprob: -10.895638465881348
    6. '1' → logprob: -12.895638465881348
    7. 'True' → logprob: -13.645638465881348
    8. ' (' → logprob: -14.145638465881348
    9. ' ' → logprob: -14.395638465881348
    10. '"value' → logprob: -14.895638465881348

Token 19: ' ==' (ID: 951)
  Prédit: ' =='
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' ==' → logprob: -0.03390040248632431
    2. '==' → logprob: -3.408900499343872
    3. ' ' → logprob: -8.533900260925293
    4. '=' → logprob: -10.283900260925293
    5. ')' → logprob: -11.408900260925293
    6. '()==' → logprob: -12.908900260925293
    7. ' ' → logprob: -13.408900260925293
    8. ' =' → logprob: -13.408900260925293
    9. '()' → logprob: -13.408900260925293
    10. '===' → logprob: -13.658900260925293

Token 20: ' ' (ID: 220)
  Prédit: ' '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' ' → logprob: -0.47408124804496765
    2. '1' → logprob: -0.97408127784729
    3. ' ' → logprob: -13.224081039428711
    4. '0' → logprob: -13.974081039428711
    5. ' one' → logprob: -14.599081039428711
    6. '_' → logprob: -14.974081039428711
    7. '   ' → logprob: -15.974081039428711
    8. 'One' → logprob: -16.09908103942871
    9. '```' → logprob: -16.22408103942871
    10. '`' → logprob: -16.22408103942871

Token 21: '1' (ID: 16)
  Prédit: '1'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '1' → logprob: -0.00023107275774236768
    2. ' ' → logprob: -8.37523078918457
    3. '   ' → logprob: -15.12523078918457
    4. '0' → logprob: -16.50023078918457
    5. '```' → logprob: -17.12523078918457
    6. '`' → logprob: -17.62523078918457
    7. '  ' → logprob: -18.37523078918457
    8. '(' → logprob: -19.00023078918457
    9. 'One' → logprob: -19.06273078918457
    10. 'True' → logprob: -20.06273078918457

Token 22: '

' (ID: 279)
  Prédit: '

'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '

' → logprob: -0.3914816975593567
    2. 'def' → logprob: -1.891481637954712
    3. '
' → logprob: -2.391481637954712
    4. '\n' → logprob: -3.266481637954712
    5. '\' → logprob: -4.016481876373291
    6. '<|end|>' → logprob: -4.266481876373291
    7. 'newline' → logprob: -5.391481876373291
    8. '```' → logprob: -6.141481876373291
    9. '#' → logprob: -7.516481876373291
    10. '.' → logprob: -7.641481876373291

Token 23: 'def' (ID: 1314)
  Prédit: 'def'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'def' → logprob: -0.5889942646026611
    2. 'd' → logprob: -0.9639942646026611
    3. '\' → logprob: -3.713994264602661
    4. '
' → logprob: -4.838994026184082
    5. '#' → logprob: -5.088994026184082
    6. '\n' → logprob: -5.088994026184082
    7. '(' → logprob: -5.213994026184082
    8. '```' → logprob: -5.838994026184082
    9. 'newline' → logprob: -6.338994026184082
    10. '<|end|>' → logprob: -6.588994026184082

Token 24: ' print' (ID: 2123)
  Prédit: ' is'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' is' → logprob: -0.002535355743020773
    2. ' get' → logprob: -7.252535343170166
    3. 'is' → logprob: -7.377535343170166
    4. ' main' → logprob: -8.502535820007324
    5. ' add' → logprob: -8.627535820007324
    6. '_' → logprob: -8.627535820007324
    7. ' calculate' → logprob: -8.752535820007324
    8. ' factorial' → logprob: -8.877535820007324
    9. ' _' → logprob: -9.502535820007324
    10. '_is' → logprob: -10.002535820007324

Token 25: '_' (ID: 62)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(' → logprob: -0.0060060597024858
    2. '_' → logprob: -5.256006240844727
    3. '("("' → logprob: -8.256006240844727
    4. '_parent' → logprob: -8.881006240844727
    5. '_(' → logprob: -9.506006240844727
    6. '_s' → logprob: -10.256006240844727
    7. '('' → logprob: -10.506006240844727
    8. '("")' → logprob: -10.631006240844727
    9. ' (' → logprob: -11.006006240844727
    10. 's' → logprob: -11.256006240844727

Token 26: 'hello' (ID: 24912)
  Prédit: 'result'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'result' → logprob: -0.43104544281959534
    2. 'yes' → logprob: -1.931045413017273
    3. 'one' → logprob: -2.4310455322265625
    4. 'is' → logprob: -3.3060455322265625
    5. 'hello' → logprob: -3.6810455322265625
    6. 'message' → logprob: -4.0560455322265625
    7. 'value' → logprob: -4.5560455322265625
    8. 'error' → logprob: -4.8060455322265625
    9. 'sum' → logprob: -6.0560455322265625
    10. 'odd' → logprob: -6.1810455322265625

Token 27: '_world' (ID: 76816)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '(' → logprob: -0.05588146299123764
    2. '()' → logprob: -3.0558815002441406
    3. '_' → logprob: -5.555881500244141
    4. '():' → logprob: -5.930881500244141
    5. '40' → logprob: -8.30588150024414
    6. '```' → logprob: -8.55588150024414
    7. '_parent' → logprob: -9.43088150024414
    8. '("("' → logprob: -10.18088150024414
    9. '(_)' → logprob: -10.43088150024414
    10. '`()' → logprob: -11.18088150024414

Token 28: '():
' (ID: 8595)
  Prédit: '():'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '():' → logprob: -0.01648356206715107
    2. '()' → logprob: -4.141483783721924
    3. '(' → logprob: -7.891483783721924
    4. '_' → logprob: -10.016483306884766
    5. ' ():' → logprob: -11.641483306884766
    6. ' ()' → logprob: -12.266483306884766
    7. '():
' → logprob: -12.391483306884766
    8. '```' → logprob: -13.016483306884766
    9. '`()' → logprob: -13.266483306884766
    10. '()">' → logprob: -13.391483306884766

Token 29: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.032805416733026505
    2. '(' → logprob: -3.5328054428100586
    3. 'print' → logprob: -6.407805442810059
    4. ' print' → logprob: -7.782805442810059
    5. '    ' → logprob: -8.282805442810059
    6. ''' → logprob: -8.407805442810059
    7. '()' → logprob: -8.532805442810059
    8. '(
' → logprob: -9.657805442810059
    9. '('' → logprob: -10.032805442810059
    10. '       ' → logprob: -10.157805442810059

Token 30: ' print' (ID: 2123)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.03405757620930672
    2. ' print' → logprob: -3.7840576171875
    3. 'print' (adapté à ' print') → logprob: -4.5340576171875
    4. '```' → logprob: -11.4090576171875
    5. 'pr' → logprob: -13.5340576171875
    6. '    ' → logprob: -13.9090576171875
    7. '   ' → logprob: -13.9090576171875
    8. ' ' → logprob: -14.4090576171875
    9. 'p' → logprob: -14.9090576171875
    10. ' p' → logprob: -15.2840576171875

Token 31: '('' (ID: 706)
  Prédit: '("'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '("' → logprob: -0.081206776201725
    2. '(' → logprob: -2.581206798553467
    3. '('' → logprob: -6.331206798553467
    4. '("("' → logprob: -7.706206798553467
    5. '()' → logprob: -10.456206321716309
    6. '("")' → logprob: -10.706206321716309
    7. '   ' → logprob: -11.331206321716309
    8. ' ' → logprob: -11.956206321716309
    9. '("""' → logprob: -12.581206321716309
    10. ' ("' → logprob: -12.956206321716309

Token 32: 'Hello' (ID: 13225)
  Prédit: 'Hello'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'Hello' → logprob: -2.8206473871250637e-05
    2. 'hello' → logprob: -10.500028610229492
    3. ' Hello' → logprob: -14.750028610229492
    4. 'Hell' → logprob: -15.875028610229492
    5. '>Hello' → logprob: -17.625028610229492
    6. ''' → logprob: -17.750028610229492
    7. 'HEL' → logprob: -17.750028610229492
    8. 'H' → logprob: -17.875028610229492
    9. 'Hallo' → logprob: -17.875028610229492
    10. 'hell' → logprob: -19.000028610229492

Token 33: ' World' (ID: 5922)
  Prédit: ' World'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' World' → logprob: -0.0274290069937706
    2. ',' → logprob: -3.6524291038513184
    3. 'World' → logprob: -7.027429103851318
    4. ' world' → logprob: -8.40242862701416
    5. ' ' → logprob: -12.02742862701416
    6. '   ' → logprob: -12.15242862701416
    7. '_world' → logprob: -13.52742862701416
    8. '(World' → logprob: -13.90242862701416
    9. ' ,' → logprob: -14.15242862701416
    10. '  ' → logprob: -14.77742862701416

Token 34: '')

' (ID: 9735)
  Prédit: '')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '')' → logprob: -0.029779773205518723
    2. '!' → logprob: -3.5297796726226807
    3. ')' → logprob: -10.904779434204102
    4. '")' → logprob: -12.654779434204102
    5. '()' → logprob: -12.654779434204102
    6. ''' → logprob: -13.529779434204102
    7. '')
' → logprob: -13.779779434204102
    8. '!")' → logprob: -14.279779434204102
    9. '!)' → logprob: -14.779779434204102
    10. '!'' → logprob: -15.654779434204102

Token 35: 'def' (ID: 1314)
  Prédit: 'def'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'def' → logprob: -0.5494934916496277
    2. 'if' → logprob: -1.0494935512542725
    3. 'value' → logprob: -3.4244935512542725
    4. 'for' → logprob: -4.299493312835693
    5. 'n' → logprob: -4.424493312835693
    6. 'i' → logprob: -5.674493312835693
    7. '```' → logprob: -5.674493312835693
    8. 'x' → logprob: -6.049493312835693
    9. '
' → logprob: -6.424493312835693
    10. '

' → logprob: -7.299493312835693

Token 36: ' get' (ID: 717)
  Prédit: ' main'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' main' → logprob: -0.10220231115818024
    2. ' print' → logprob: -3.3522024154663086
    3. ' check' → logprob: -3.4772024154663086
    4. ' calculate' → logprob: -4.102202415466309
    5. ' is' → logprob: -5.602202415466309
    6. ' process' → logprob: -5.727202415466309
    7. ' run' → logprob: -5.852202415466309
    8. ' get' → logprob: -6.477202415466309
    9. ' test' → logprob: -7.227202415466309
    10. ' execute' → logprob: -7.977202415466309

Token 37: '_two' (ID: 54305)
  Prédit: '_input'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '_input' → logprob: -0.08154075592756271
    2. '_user' → logprob: -3.456540822982788
    3. '_sum' → logprob: -4.206540584564209
    4. '_value' → logprob: -4.706540584564209
    5. '_' → logprob: -4.831540584564209
    6. '_number' → logprob: -5.331540584564209
    7. '_square' → logprob: -7.081540584564209
    8. '_max' → logprob: -7.206540584564209
    9. '_name' → logprob: -7.206540584564209
    10. '_result' → logprob: -7.331540584564209

Token 38: '_int' (ID: 12285)
  Prédit: '_'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '_' → logprob: -0.6166802644729614
    2. '()' → logprob: -1.1166802644729614
    3. '_as' → logprob: -2.241680145263672
    4. '_input' → logprob: -4.616680145263672
    5. '_value' → logprob: -5.991680145263672
    6. '_numbers' → logprob: -6.116680145263672
    7. ' ()' → logprob: -6.616680145263672
    8. '_values' → logprob: -7.116680145263672
    9. '_digits' → logprob: -7.241680145263672
    10. '_to' → logprob: -7.366680145263672

Token 39: '_inputs' (ID: 67304)
  Prédit: 's'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 's' → logprob: -0.0050348639488220215
    2. '()' → logprob: -5.380034923553467
    3. '_s' → logprob: -7.880034923553467
    4. '_' → logprob: -11.130034446716309
    5. '_values' → logprob: -12.380034446716309
    6. 'eg' → logprob: -13.005034446716309
    7. ' s' → logprob: -13.005034446716309
    8. 'eger' → logprob: -13.130034446716309
    9. '_inputs' → logprob: -13.380034446716309
    10. '_input' → logprob: -13.505034446716309

Token 40: '():
' (ID: 8595)
  Prédit: '():'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '():' → logprob: -0.0018234545132145286
    2. '()' → logprob: -6.376823425292969
    3. '_' → logprob: -9.376823425292969
    4. '():
' → logprob: -12.251823425292969
    5. 's' → logprob: -12.376823425292969
    6. '_input' → logprob: -12.376823425292969
    7. '(' → logprob: -12.751823425292969
    8. ' ():' → logprob: -13.001823425292969
    9. '()>' → logprob: -13.251823425292969
    10. '_s' → logprob: -13.751823425292969

Token 41: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.0004878723411820829
    2. '(' → logprob: -8.25048828125
    3. '()' → logprob: -9.25048828125
    4. ' return' → logprob: -10.12548828125
    5. '    
' → logprob: -10.62548828125
    6. 'return' → logprob: -11.12548828125
    7. '       ' → logprob: -11.12548828125
    8. '    ' → logprob: -11.62548828125
    9. ' ' → logprob: -11.87548828125
    10. ' (' → logprob: -12.75048828125

Token 42: ' return' (ID: 622)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.24767406284809113
    2. 'a' → logprob: -2.247673988342285
    3. 'return' (adapté à ' return') → logprob: -2.997673988342285
    4. ' return' → logprob: -3.622673988342285
    5. ' a' → logprob: -3.997673988342285
    6. 'x' → logprob: -5.997673988342285
    7. '    
' → logprob: -5.997673988342285
    8. 'value' → logprob: -6.247673988342285
    9. 'first' → logprob: -6.372673988342285
    10. 'input' → logprob: -6.497673988342285

Token 43: ' int' (ID: 677)
  Prédit: ' int'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' int' → logprob: -0.10266295075416565
    2. 'int' → logprob: -2.602663040161133
    3. ' tuple' → logprob: -4.227663040161133
    4. ' map' → logprob: -5.102663040161133
    5. 'tuple' → logprob: -6.977663040161133
    6. ' ' → logprob: -7.852663040161133
    7. 'map' → logprob: -7.977663040161133
    8. ' [' → logprob: -8.102663040161133
    9. '[int' → logprob: -8.227663040161133
    10. '(int' → logprob: -8.727663040161133

Token 44: '(input' (ID: 10054)
  Prédit: '(input'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(input' → logprob: -0.011063382029533386
    2. '(' → logprob: -4.511063575744629
    3. ' (' → logprob: -11.511063575744629
    4. 'input' → logprob: -12.761063575744629
    5. '()' → logprob: -14.386063575744629
    6. '_input' → logprob: -14.511063575744629
    7. 's' → logprob: -14.761063575744629
    8. '(
' → logprob: -15.636063575744629
    9. ' ' → logprob: -15.636063575744629
    10. ',input' → logprob: -15.761063575744629

Token 45: '()),' (ID: 24379)
  Prédit: '()),'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '()),' → logprob: -0.015400087460875511
    2. '())' → logprob: -4.265399932861328
    3. '()' → logprob: -6.765399932861328
    4. '(),' → logprob: -9.890399932861328
    5. '(' → logprob: -11.140399932861328
    6. '()))' → logprob: -11.640399932861328
    7. '()),
' → logprob: -12.765399932861328
    8. '().' → logprob: -12.890399932861328
    9. '),' → logprob: -13.890399932861328
    10. '());' → logprob: -14.515399932861328

Token 46: ' int' (ID: 677)
  Prédit: ' int'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' int' → logprob: -0.0432254932820797
    2. 'int' → logprob: -3.1682255268096924
    3. ' ' → logprob: -8.918225288391113
    4. ' space' → logprob: -10.793225288391113
    5. 'space' → logprob: -11.043225288391113
    6. ' ' → logprob: -11.418225288391113
    7. '<int' → logprob: -11.668225288391113
    8. '    ' → logprob: -12.293225288391113
    9. '[int' → logprob: -12.418225288391113
    10. '(int' → logprob: -12.543225288391113

Token 47: '(input' (ID: 10054)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(' → logprob: -0.1005665734410286
    2. '(input' → logprob: -2.3505666255950928
    3. ' (' → logprob: -8.850566864013672
    4. '('' → logprob: -9.850566864013672
    5. '(
' → logprob: -10.100566864013672
    6. '(space' → logprob: -10.600566864013672
    7. '(user' → logprob: -10.725566864013672
    8. '("("' → logprob: -11.225566864013672
    9. '<|end|>' → logprob: -11.475566864013672
    10. 'input' → logprob: -11.475566864013672

Token 48: '())

' (ID: 27654)
  Prédit: '())'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '())' → logprob: -0.000727325037587434
    2. '()' → logprob: -7.37572717666626
    3. ')' → logprob: -9.500727653503418
    4. '()))' → logprob: -10.875727653503418
    5. ' ())' → logprob: -12.000727653503418
    6. '())
' → logprob: -15.125727653503418
    7. '();)' → logprob: -15.250727653503418
    8. '()),' → logprob: -15.250727653503418
    9. '())

' → logprob: -16.7507266998291
    10. '))' → logprob: -16.8757266998291

Token 49: 'def' (ID: 1314)
  Prédit: 'def'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'def' → logprob: -0.0003488129877950996
    2. '

' → logprob: -9.000349044799805
    3. '```' → logprob: -9.625349044799805
    4. '
' → logprob: -9.750349044799805
    5. '\' → logprob: -10.125349044799805
    6. '\n' → logprob: -11.125349044799805
    7. '<|end|>' → logprob: -11.500349044799805
    8. '<|end|>' → logprob: -11.750349044799805
    9. 'for' → logprob: -12.250349044799805
    10. 'ndef' → logprob: -12.625349044799805

Token 50: ' sum' (ID: 4215)
  Prédit: ' is'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' is' → logprob: -0.8717794418334961
    2. ' main' → logprob: -1.371779441833496
    3. ' multiply' → logprob: -2.496779441833496
    4. ' get' → logprob: -2.621779441833496
    5. ' calculate' → logprob: -2.996779441833496
    6. ' add' → logprob: -3.246779441833496
    7. ' sum' → logprob: -3.496779441833496
    8. ' factorial' → logprob: -4.746779441833496
    9. ' print' → logprob: -4.871779441833496
    10. ' check' → logprob: -5.246779441833496

Token 51: '_values' (ID: 20393)
  Prédit: '_'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_' → logprob: -0.4938368499279022
    2. '(' → logprob: -0.9938368797302246
    3. '_numbers' → logprob: -4.993836879730225
    4. '_two' → logprob: -5.118836879730225
    5. '_values' → logprob: -6.118836879730225
    6. '_(' → logprob: -7.368836879730225
    7. '_of' → logprob: -7.368836879730225
    8. '_user' → logprob: -7.743836879730225
    9. '_sum' → logprob: -7.743836879730225
    10. '_elements' → logprob: -7.868836879730225

Token 52: '(a' (ID: 6271)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(' → logprob: -0.0018328495789319277
    2. '(values' → logprob: -7.376832962036133
    3. '_' → logprob: -8.126832962036133
    4. '(a' → logprob: -8.251832962036133
    5. '()' → logprob: -8.751832962036133
    6. '(_' → logprob: -9.126832962036133
    7. '_values' → logprob: -9.126832962036133
    8. ' (' → logprob: -9.501832962036133
    9. '(value' → logprob: -9.751832962036133
    10. '(s' → logprob: -11.251832962036133

Token 53: ',' (ID: 11)
  Prédit: ','
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ',' → logprob: -0.0019601555541157722
    2. ' ,' → logprob: -6.251960277557373
    3. ',b' → logprob: -10.876959800720215
    4. ',a' → logprob: -11.376959800720215
    5. ')' → logprob: -15.001959800720215
    6. 'a' → logprob: -15.126959800720215
    7. ' ' → logprob: -15.126959800720215
    8. '_,' → logprob: -16.50196075439453
    9. ',)' → logprob: -16.75196075439453
    10. ' a' → logprob: -16.87696075439453

Token 54: ' b' (ID: 287)
  Prédit: ' b'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' b' → logprob: -0.25193196535110474
    2. 'b' → logprob: -1.50193190574646
    3. ' ' → logprob: -13.126932144165039
    4. '<|end|>' → logprob: -14.876932144165039
    5. ')' → logprob: -15.501932144165039
    6. ')b' → logprob: -15.751932144165039
    7. ' ' → logprob: -16.25193214416504
    8. '	b' → logprob: -17.50193214416504
    9. ' б' → logprob: -17.75193214416504
    10. ' )' → logprob: -18.00193214416504

Token 55: '):
' (ID: 1883)
  Prédit: '):'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '):' → logprob: -0.0036540029104799032
    2. ')' → logprob: -5.6286540031433105
    3. '):
' → logprob: -10.003653526306152
    4. ':' → logprob: -12.628653526306152
    5. ' ):' → logprob: -12.878653526306152
    6. ',' → logprob: -13.253653526306152
    7. '):
' → logprob: -15.003653526306152
    8. '):

' → logprob: -15.628653526306152
    9. '),' → logprob: -16.25365447998047
    10. '**' → logprob: -16.37865447998047

Token 56: '   ' (ID: 271)
  Prédit: ' a'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' a' → logprob: -0.5144168138504028
    2. '   ' → logprob: -1.6394168138504028
    3. 'a' → logprob: -1.8894168138504028
    4. ' return' → logprob: -2.8894166946411133
    5. 'return' → logprob: -6.889416694641113
    6. ' ' → logprob: -9.014416694641113
    7. '    ' → logprob: -9.139416694641113
    8. '  ' → logprob: -10.889416694641113
    9. ')' → logprob: -11.264416694641113
    10. '    
' → logprob: -13.639416694641113

Token 57: ' return' (ID: 622)
  Prédit: ' return'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' return' → logprob: -0.08081156015396118
    2. '   ' → logprob: -3.3308115005493164
    3. 'return' (adapté à ' return') → logprob: -3.3308115005493164
    4. ' a' → logprob: -5.205811500549316
    5. 'a' → logprob: -7.455811500549316
    6. ' ' → logprob: -10.705811500549316
    7. '    ' → logprob: -11.080811500549316
    8. '  ' → logprob: -13.080811500549316
    9. '	return' → logprob: -14.205811500549316
    10. '    
' → logprob: -15.455811500549316

Token 58: ' a' (ID: 261)
  Prédit: ' a'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' a' → logprob: -0.5759397745132446
    2. 'a' → logprob: -0.8259397745132446
    3. ' ' → logprob: -15.200940132141113
    4. '	a' → logprob: -16.325939178466797
    5. '   ' → logprob: -17.825939178466797
    6. ' ' → logprob: -18.075939178466797
    7. '(a' → logprob: -18.450939178466797
    8. '_a' → logprob: -18.825939178466797
    9. '  ' → logprob: -19.825939178466797
    10. 'а' → logprob: -20.138439178466797

Token 59: ' +' (ID: 659)
  Prédit: ' +'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' +' → logprob: -0.06197037547826767
    2. '+' → logprob: -2.8119704723358154
    3. '+b' → logprob: -13.561970710754395
    4. ' ' → logprob: -13.686970710754395
    5. ' +
' → logprob: -16.186969757080078
    6. ' ' → logprob: -16.561969757080078
    7. '+B' → logprob: -17.436969757080078
    8. ' plus' → logprob: -18.186969757080078
    9. '_' → logprob: -19.186969757080078
    10. ' +
' → logprob: -19.436969757080078

Token 60: ' b' (ID: 287)
  Prédit: 'b'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'b' → logprob: -0.474077433347702
    2. ' b' → logprob: -0.9740774631500244
    3. ' ' → logprob: -15.099077224731445
    4. '	b' → logprob: -16.474077224731445
    5. ' ' → logprob: -17.224077224731445
    6. ' б' → logprob: -17.474077224731445
    7. ')b' → logprob: -18.224077224731445
    8. '<|end|>' → logprob: -18.974077224731445
    9. '   ' → logprob: -19.099077224731445
    10. '    ' → logprob: -19.349077224731445

Token 61: '

' (ID: 279)
  Prédit: 'def'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'def' → logprob: -0.3102755844593048
    2. '<|end|>' → logprob: -1.4352755546569824
    3. '
' → logprob: -4.435275554656982
    4. '<|end|>' → logprob: -5.185275554656982
    5. '\' → logprob: -5.685275554656982
    6. '#' → logprob: -5.810275554656982
    7. '\n' → logprob: -5.810275554656982
    8. '```' → logprob: -7.685275554656982
    9. '

' → logprob: -7.935275554656982
    10. 'newline' → logprob: -8.43527603149414

Token 62: 'def' (ID: 1314)
  Prédit: 'def'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'def' → logprob: -0.09990348666906357
    2. 'if' → logprob: -2.7249035835266113
    3. 'for' → logprob: -4.224903583526611
    4. 'a' → logprob: -5.224903583526611
    5. '```' → logprob: -6.224903583526611
    6. 'result' → logprob: -6.474903583526611
    7. 'n' → logprob: -6.474903583526611
    8. '\' → logprob: -6.724903583526611
    9. 'd' → logprob: -7.224903583526611
    10. '#' → logprob: -7.474903583526611

Token 63: ' print' (ID: 2123)
  Prédit: ' main'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' main' → logprob: -0.43519797921180725
    2. ' multiply' → logprob: -2.0601980686187744
    3. ' is' → logprob: -2.3101980686187744
    4. ' print' → logprob: -2.5601980686187744
    5. ' check' → logprob: -3.1851980686187744
    6. 'multiply' → logprob: -6.810197830200195
    7. ' get' → logprob: -6.935197830200195
    8. ' calculate' → logprob: -7.185197830200195
    9. ' ' → logprob: -7.310197830200195
    10. ' product' → logprob: -7.310197830200195

Token 64: '_sum' (ID: 29859)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '(' → logprob: -0.7254161238670349
    2. '_' → logprob: -0.7254161238670349
    3. '('' → logprob: -3.4754161834716797
    4. '_(' → logprob: -8.10041618347168
    5. '('_' → logprob: -8.22541618347168
    6. '("' → logprob: -10.10041618347168
    7. '()' → logprob: -10.47541618347168
    8. ' (' → logprob: -10.72541618347168
    9. '(_' → logprob: -10.85041618347168
    10. '_values' → logprob: -10.97541618347168

Token 65: '(val' (ID: 17391)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '(' → logprob: -0.03663743659853935
    2. '()' → logprob: -3.536637544631958
    3. '(_' → logprob: -5.911637306213379
    4. '(a' → logprob: -6.411637306213379
    5. '(s' → logprob: -7.036637306213379
    6. '(values' → logprob: -7.786637306213379
    7. '_values' → logprob: -7.911637306213379
    8. '(value' → logprob: -8.161637306213379
    9. '(_)' → logprob: -8.911637306213379
    10. '_' → logprob: -9.036637306213379

Token 66: '):
' (ID: 1883)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ')' → logprob: -0.011253300122916698
    2. 'ue' → logprob: -5.011253356933594
    3. '(' → logprob: -6.261253356933594
    4. 'ues' → logprob: -7.136253356933594
    5. 'u' → logprob: -7.136253356933594
    6. 's' → logprob: -8.136253356933594
    7. 'uer' → logprob: -9.511253356933594
    8. '_values' → logprob: -9.511253356933594
    9. ')`' → logprob: -9.886253356933594
    10. '   ' → logprob: -9.886253356933594

Token 67: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.0010538881178945303
    2. ' print' → logprob: -6.876053810119629
    3. 'print' → logprob: -10.876053810119629
    4. '(' → logprob: -13.751053810119629
    5. '   ' → logprob: -14.876053810119629
    6. '()' → logprob: -15.501053810119629
    7. '```' → logprob: -15.751053810119629
    8. '(print' → logprob: -15.876053810119629
    9. '	print' → logprob: -16.001054763793945
    10. ' ' → logprob: -16.751054763793945

Token 68: ' print' (ID: 2123)
  Prédit: ' print'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' print' → logprob: -0.621078372001648
    2. 'print' (adapté à ' print') → logprob: -0.871078372001648
    3. '   ' → logprob: -3.1210784912109375
    4. '```' → logprob: -10.746078491210938
    5. '	print' → logprob: -13.496078491210938
    6. ' p' → logprob: -14.621078491210938
    7. 'pr' → logprob: -14.996078491210938
    8. '``' → logprob: -14.996078491210938
    9. ' ' → logprob: -15.121078491210938
    10. '`' → logprob: -15.121078491210938

Token 69: '(val' (ID: 17391)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(' → logprob: -0.03419041633605957
    2. '(val' → logprob: -3.4091904163360596
    3. '(f' → logprob: -8.53419017791748
    4. ' (' → logprob: -8.78419017791748
    5. '(sum' → logprob: -8.78419017791748
    6. '('' → logprob: -11.03419017791748
    7. '()' → logprob: -11.40919017791748
    8. '(`' → logprob: -12.53419017791748
    9. '("("' → logprob: -12.65919017791748
    10. '(value' → logprob: -13.53419017791748

Token 70: ')

' (ID: 1029)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ')' → logprob: -5.512236498361744e-07
    2. '))' → logprob: -14.625000953674316
    3. ' )' → logprob: -17.0
    4. ')
' → logprob: -17.125
    5. ')`' → logprob: -17.5
    6. ')}' → logprob: -18.125
    7. '')' → logprob: -18.625
    8. '),' → logprob: -19.75
    9. ')")' → logprob: -19.875
    10. ')))' → logprob: -19.875

Token 71: 'def' (ID: 1314)
  Prédit: 'def'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'def' → logprob: -0.6895672082901001
    2. 'if' → logprob: -0.9395672082901001
    3. 'a' → logprob: -3.3145670890808105
    4. 'n' → logprob: -3.4395670890808105
    5. 'for' → logprob: -4.0645670890808105
    6. 'value' → logprob: -4.8145670890808105
    7. 'val' → logprob: -5.1895670890808105
    8. 'result' → logprob: -5.8145670890808105
    9. 'i' → logprob: -6.5645670890808105
    10. 'print' → logprob: -7.0645670890808105

Token 72: ' handle' (ID: 5318)
  Prédit: ' main'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' main' → logprob: -0.006302738096565008
    2. ' calculate' → logprob: -5.631302833557129
    3. ' get' → logprob: -7.631302833557129
    4. ' process' → logprob: -7.756302833557129
    5. ' print' → logprob: -8.006302833557129
    6. ' _' → logprob: -8.131302833557129
    7. ' compute' → logprob: -8.381302833557129
    8. ' run' → logprob: -8.381302833557129
    9. ' check' → logprob: -8.881302833557129
    10. '_main' → logprob: -9.131302833557129

Token 73: '_case' (ID: 43667)
  Prédit: '_input'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '_input' → logprob: -0.05465441942214966
    2. '_' → logprob: -3.304654359817505
    3. '_one' → logprob: -5.054654598236084
    4. '_value' → logprob: -5.429654598236084
    5. '_sum' → logprob: -5.679654598236084
    6. '_two' → logprob: -7.179654598236084
    7. '_values' → logprob: -7.429654598236084
    8. '_inputs' → logprob: -8.429654121398926
    9. '_s' → logprob: -8.804654121398926
    10. '_(' → logprob: -8.929654121398926

Token 74: '_one' (ID: 26979)
  Prédit: '_'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '_' → logprob: -0.3368784189224243
    2. '(' → logprob: -1.8368784189224243
    3. '():' → logprob: -2.4618782997131348
    4. '_(' → logprob: -3.8368782997131348
    5. '(_' → logprob: -4.836878299713135
    6. '()' → logprob: -6.211878299713135
    7. '_:' → logprob: -6.461878299713135
    8. '(case' → logprob: -6.461878299713135
    9. '1' → logprob: -6.586878299713135
    10. '_case' → logprob: -6.586878299713135

Token 75: '():
' (ID: 8595)
  Prédit: '():'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '():' → logprob: -0.0068221669644117355
    2. '()' → logprob: -5.006822109222412
    3. '(' → logprob: -10.00682258605957
    4. '_' → logprob: -10.25682258605957
    5. ' ():' → logprob: -11.63182258605957
    6. '():
' → logprob: -12.63182258605957
    7. ':' → logprob: -12.88182258605957
    8. ' ()' → logprob: -13.13182258605957
    9. '()(' → logprob: -13.13182258605957
    10. '();' → logprob: -14.25682258605957

Token 76: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.003764212829992175
    2. 'print' → logprob: -5.8787641525268555
    3. '    
' → logprob: -7.1287641525268555
    4. '(print' → logprob: -10.378764152526855
    5. '       ' → logprob: -10.628764152526855
    6. '(' → logprob: -11.003764152526855
    7. '
' → logprob: -11.003764152526855
    8. '\n' → logprob: -11.003764152526855
    9. '```' → logprob: -11.003764152526855
    10. '	print' → logprob: -11.628764152526855

Token 77: ' print' (ID: 2123)
  Prédit: 'print'
  Correct (stricte): False
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'print' (adapté à ' print') → logprob: -0.5140703916549683
    2. '   ' → logprob: -1.3890703916549683
    3. ' print' → logprob: -1.8890703916549683
    4. '    
' → logprob: -6.639070510864258
    5. '
' → logprob: -10.639070510864258
    6. 'p' → logprob: -10.889070510864258
    7. '    ' → logprob: -11.014070510864258
    8. ' 
' → logprob: -11.389070510864258
    9. '	print' → logprob: -11.639070510864258
    10. ' p' → logprob: -12.139070510864258

Token 78: '_' (ID: 62)
  Prédit: '_'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_' → logprob: -0.33558252453804016
    2. '('' → logprob: -1.3355824947357178
    3. '(' → logprob: -4.085582733154297
    4. '('_' → logprob: -5.460582733154297
    5. '_(' → logprob: -7.835582733154297
    6. ' ('' → logprob: -8.960582733154297
    7. '("' → logprob: -9.085582733154297
    8. ' ' → logprob: -9.460582733154297
    9. '(_' → logprob: -9.460582733154297
    10. '_("' → logprob: -10.085582733154297

Token 79: 'hello' (ID: 24912)
  Prédit: '''
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ''' → logprob: -0.5306444764137268
    2. '('' → logprob: -1.655644416809082
    3. 'Hello' → logprob: -2.155644416809082
    4. '_' → logprob: -2.655644416809082
    5. '(' → logprob: -3.905644416809082
    6. 'hello' → logprob: -4.905644416809082
    7. ''H' → logprob: -5.155644416809082
    8. ''_' → logprob: -8.030644416809082
    9. '_H' → logprob: -8.530644416809082
    10. '"' → logprob: -9.030644416809082

Token 80: '_world' (ID: 76816)
  Prédit: '_'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_' → logprob: -0.006976436823606491
    2. '_world' → logprob: -5.63197660446167
    3. ' _' → logprob: -5.75697660446167
    4. ' ' → logprob: -8.631976127624512
    5. '_space' → logprob: -11.631976127624512
    6. ' World' → logprob: -12.131976127624512
    7. 'World' → logprob: -12.506976127624512
    8. 'world' → logprob: -13.256976127624512
    9. 'space' → logprob: -13.506976127624512
    10. 'o' → logprob: -13.631976127624512

Token 81: '()

' (ID: 5874)
  Prédit: '()'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '()' → logprob: -0.07925679534673691
    2. '(' → logprob: -2.579256772994995
    3. '()
' → logprob: -8.079257011413574
    4. '(
' → logprob: -10.829257011413574
    5. ')' → logprob: -11.579257011413574
    6. '()

' → logprob: -11.954257011413574
    7. '`()' → logprob: -12.454257011413574
    8. '```' → logprob: -12.579257011413574
    9. '()`' → logprob: -12.829257011413574
    10. '(

' → logprob: -13.079257011413574

Token 82: 'def' (ID: 1314)
  Prédit: 'def'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'def' → logprob: -0.04223953187465668
    2. '
' → logprob: -4.042239665985107
    3. '\' → logprob: -4.167239665985107
    4. 'd' → logprob: -5.042239665985107
    5. '

' → logprob: -7.167239665985107
    6. '```' → logprob: -7.417239665985107
    7. '\n' → logprob: -8.91723918914795
    8. '' → logprob: -9.54223918914795
    9. 'e' → logprob: -9.79223918914795
    10. '#' → logprob: -10.16723918914795

Token 83: ' handle' (ID: 5318)
  Prédit: ' handle'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' handle' → logprob: -0.07336825132369995
    2. '_' → logprob: -3.3233683109283447
    3. '_handle' → logprob: -4.073368072509766
    4. 'handle' → logprob: -4.198368072509766
    5. ' ' → logprob: -6.823368072509766
    6. '(handle' → logprob: -7.198368072509766
    7. ' def' → logprob: -7.948368072509766
    8. '	handle' → logprob: -8.698368072509766
    9. ' _' → logprob: -9.198368072509766
    10. 'andle' → logprob: -10.073368072509766

Token 84: '_case' (ID: 43667)
  Prédit: '_case'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_case' → logprob: -0.00104614719748497
    2. '_' → logprob: -6.876046180725098
    3. '_two' → logprob: -12.376046180725098
    4. '__' → logprob: -13.126046180725098
    5. '```' → logprob: -13.251046180725098
    6. ' _' → logprob: -13.501046180725098
    7. '_c' → logprob: -13.501046180725098
    8. '_code' → logprob: -14.626046180725098
    9. '_cases' → logprob: -14.876046180725098
    10. 'case' → logprob: -14.876046180725098

Token 85: '_else' (ID: 148349)
  Prédit: '_two'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '_two' → logprob: -0.11531120538711548
    2. '_' → logprob: -2.3653111457824707
    3. '_one' → logprob: -4.990311145782471
    4. '_o' → logprob: -5.365311145782471
    5. '_three' → logprob: -6.240311145782471
    6. '_t' → logprob: -7.115311145782471
    7. '__' → logprob: -7.990311145782471
    8. '_tw' → logprob: -8.990311622619629
    9. '_f' → logprob: -9.240311622619629
    10. '_a' → logprob: -10.490311622619629

Token 86: '():
' (ID: 8595)
  Prédit: '():'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '():' → logprob: -8.232493564719334e-05
    2. '(' → logprob: -10.375082015991211
    3. ' ():' → logprob: -10.500082015991211
    4. ':' → logprob: -11.750082015991211
    5. '(:' → logprob: -12.000082015991211
    6. '()' → logprob: -12.250082015991211
    7. '():
' → logprob: -12.750082015991211
    8. '_' → logprob: -14.250082015991211
    9. '(":' → logprob: -15.125082015991211
    10. '):' → logprob: -15.125082015991211

Token 87: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.00993126817047596
    2. ' pass' → logprob: -4.8849310874938965
    3. 'pass' → logprob: -7.0099310874938965
    4. '    ' → logprob: -7.5099310874938965
    5. 'print' → logprob: -7.8849310874938965
    6. ' print' → logprob: -8.009931564331055
    7. '    
' → logprob: -9.384931564331055
    8. '```' → logprob: -11.009931564331055
    9. '       ' → logprob: -11.509931564331055
    10. ' return' → logprob: -12.009931564331055

Token 88: ' a' (ID: 261)
  Prédit: 'print'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'print' → logprob: -0.46147841215133667
    2. 'pass' → logprob: -1.9614784717559814
    3. '   ' → logprob: -2.3364784717559814
    4. ' pass' → logprob: -2.4614784717559814
    5. ' print' → logprob: -3.0864784717559814
    6. 'p' → logprob: -7.586478233337402
    7. '```' → logprob: -8.211478233337402
    8. '  ' → logprob: -8.961478233337402
    9. ' ' → logprob: -9.086478233337402
    10. 'return' → logprob: -10.086478233337402

Token 89: ',' (ID: 11)
  Prédit: ','
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ',' → logprob: -0.7947055697441101
    2. '_' → logprob: -1.7947056293487549
    3. ' ' → logprob: -1.7947056293487549
    4. '=' → logprob: -2.419705629348755
    5. '<|end|>' → logprob: -3.044705629348755
    6. 'nd' → logprob: -3.794705629348755
    7. ' ,' → logprob: -4.544705390930176
    8. ' =' → logprob: -4.669705390930176
    9. 's' → logprob: -4.794705390930176
    10. 'd' → logprob: -4.919705390930176

Token 90: ' b' (ID: 287)
  Prédit: 'b'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'b' → logprob: -0.6932421326637268
    2. ' b' → logprob: -0.6932421326637268
    3. '<|end|>' → logprob: -9.693242073059082
    4. ' ' → logprob: -10.568242073059082
    5. '_' → logprob: -13.818242073059082
    6. '_b' → logprob: -13.818242073059082
    7. ' =' → logprob: -13.818242073059082
    8. '=' → logprob: -13.818242073059082
    9. '	b' → logprob: -14.318242073059082
    10. '    ' → logprob: -14.693242073059082

Token 91: ' =' (ID: 314)
  Prédit: ' ='
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' =' → logprob: -0.11283795535564423
    2. '=' → logprob: -2.23783802986145
    3. ')' → logprob: -11.862837791442871
    4. '<|end|>' → logprob: -12.487837791442871
    5. ' ' → logprob: -13.362837791442871
    6. '  ' → logprob: -13.737837791442871
    7. ',' → logprob: -14.237837791442871
    8. ' =)' → logprob: -15.237837791442871
    9. '>' → logprob: -15.487837791442871
    10. ':' → logprob: -15.737837791442871

Token 92: ' get' (ID: 717)
  Prédit: ' get'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' get' → logprob: -0.055240944027900696
    2. 'get' → logprob: -2.9302408695220947
    3. ' ' → logprob: -8.430240631103516
    4. ' int' → logprob: -10.555240631103516
    5. '	get' → logprob: -10.555240631103516
    6. ' g' → logprob: -11.055240631103516
    7. '(get' → logprob: -11.180240631103516
    8. '    ' → logprob: -11.680240631103516
    9. 'int' → logprob: -11.930240631103516
    10. 'g' → logprob: -12.055240631103516

Token 93: '_two' (ID: 54305)
  Prédit: '_two'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_two' → logprob: -2.3795937522663735e-05
    2. '_' → logprob: -11.12502384185791
    3. '_tw' → logprob: -11.87502384185791
    4. 'two' → logprob: -13.37502384185791
    5. '_t' → logprob: -15.75002384185791
    6. '_TWO' → logprob: -16.500022888183594
    7. '__' → logprob: -16.750022888183594
    8. 'Two' → logprob: -16.750022888183594
    9. ' two' → logprob: -17.500022888183594
    10. '```' → logprob: -18.375022888183594

Token 94: '_int' (ID: 12285)
  Prédit: '_int'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_int' → logprob: -0.0022593331523239613
    2. '_' → logprob: -6.127259254455566
    3. ' _' → logprob: -10.377259254455566
    4. 'int' → logprob: -11.127259254455566
    5. '_in' → logprob: -11.252259254455566
    6. '_i' → logprob: -11.877259254455566
    7. '_input' → logprob: -13.002259254455566
    8. '_inputs' → logprob: -13.627259254455566
    9. '```' → logprob: -14.127259254455566
    10. '_val' → logprob: -14.252259254455566

Token 95: '_inputs' (ID: 67304)
  Prédit: '_inputs'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_inputs' → logprob: -0.014455756172537804
    2. '_' → logprob: -4.264455795288086
    3. 'inputs' → logprob: -9.014455795288086
    4. '_input' → logprob: -9.514455795288086
    5. '_values' → logprob: -10.389455795288086
    6. '_in' → logprob: -10.764455795288086
    7. ' _' → logprob: -11.264455795288086
    8. 's' → logprob: -11.514455795288086
    9. ' inputs' → logprob: -12.514455795288086
    10. '()' → logprob: -13.139455795288086

Token 96: '()
' (ID: 1234)
  Prédit: '()'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '()' → logprob: -0.0001600347168277949
    2. '()
' → logprob: -8.750160217285156
    3. '()

' → logprob: -14.125160217285156
    4. '()`' → logprob: -15.250160217285156
    5. '(' → logprob: -15.625160217285156
    6. '()]' → logprob: -15.750160217285156
    7. '())' → logprob: -16.375160217285156
    8. '()
' → logprob: -16.625160217285156
    9. ' ()' → logprob: -17.500160217285156
    10. '()"' → logprob: -17.625160217285156

Token 97: '   ' (ID: 271)
  Prédit: '
'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '
' → logprob: -0.05325000360608101
    2. '   ' → logprob: -3.1782500743865967
    3. '    
' → logprob: -5.678249835968018
    4. '  
' → logprob: -6.428249835968018
    5. '<|end|>' → logprob: -6.553249835968018
    6. ' 
' → logprob: -7.428249835968018
    7. 'print' → logprob: -7.428249835968018
    8. ' ' → logprob: -7.553249835968018
    9. '```' → logprob: -7.803249835968018
    10. '' → logprob: -7.803249835968018

Token 98: ' total' (ID: 3609)
  Prédit: 'print'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'print' → logprob: -0.4590449035167694
    2. ' print' → logprob: -2.334044933319092
    3. ' val' → logprob: -2.459044933319092
    4. 'val' → logprob: -2.709044933319092
    5. 'sum' → logprob: -2.959044933319092
    6. '   ' → logprob: -3.959044933319092
    7. 'result' → logprob: -3.959044933319092
    8. ' sum' → logprob: -4.709044933319092
    9. ' result' → logprob: -4.834044933319092
    10. 's' → logprob: -5.584044933319092

Token 99: ' =' (ID: 314)
  Prédit: ' ='
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' =' → logprob: -0.062335241585969925
    2. '=' → logprob: -2.812335252761841
    3. '_' → logprob: -7.937335014343262
    4. ' ' → logprob: -12.687335014343262
    5. ' _' → logprob: -13.312335014343262
    6. ')' → logprob: -13.687335014343262
    7. '   ' → logprob: -13.937335014343262
    8. '  ' → logprob: -14.312335014343262
    9. ' ' → logprob: -14.812335014343262
    10. '	' → logprob: -14.812335014343262

Token 100: ' sum' (ID: 4215)
  Prédit: ' sum'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' sum' → logprob: -0.038047123700380325
    2. 'sum' → logprob: -3.2880470752716064
    3. 'a' → logprob: -12.413046836853027
    4. ' a' → logprob: -13.913046836853027
    5. '	sum' → logprob: -15.288046836853027
    6. ' suma' → logprob: -15.788046836853027
    7. '(sum' → logprob: -16.038047790527344
    8. 's' → logprob: -16.538047790527344
    9. ' ' → logprob: -16.663047790527344
    10. ' ' → logprob: -18.413047790527344

Token 101: '_values' (ID: 20393)
  Prédit: '_values'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_values' → logprob: -0.0011734402505680919
    2. '_' → logprob: -6.751173496246338
    3. '_val' → logprob: -13.25117301940918
    4. '_vals' → logprob: -14.25117301940918
    5. '_VALUES' → logprob: -14.87617301940918
    6. '_value' → logprob: -15.62617301940918
    7. ' _' → logprob: -15.75117301940918
    8. '_va' → logprob: -16.50117301940918
    9. '_

' → logprob: -17.87617301940918
    10. '(a' → logprob: -18.00117301940918

Token 102: '(a' (ID: 6271)
  Prédit: '(a'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(a' → logprob: -0.011052302084863186
    2. '(' → logprob: -4.511052131652832
    3. '(
' → logprob: -12.386052131652832
    4. '(b' → logprob: -16.01105308532715
    5. ' (' → logprob: -16.38605308532715
    6. '(

' → logprob: -17.63605308532715
    7. '(ai' → logprob: -17.88605308532715
    8. '(
' → logprob: -18.01105308532715
    9. '(ab' → logprob: -18.13605308532715
    10. '()' → logprob: -18.76105308532715

Token 103: ',' (ID: 11)
  Prédit: ','
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ',' → logprob: -9.233804303221405e-05
    2. ',b' → logprob: -9.500092506408691
    3. ' ,' → logprob: -11.000092506408691
    4. ',
' → logprob: -15.375092506408691
    5. 'b' → logprob: -15.500092506408691
    6. ')' → logprob: -15.500092506408691
    7. ' ' → logprob: -15.750092506408691
    8. ',

' → logprob: -17.875091552734375
    9. ' b' → logprob: -18.000091552734375
    10. '<|end|>' → logprob: -18.375091552734375

Token 104: ' b' (ID: 287)
  Prédit: ' b'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' b' → logprob: -0.17975179851055145
    2. 'b' → logprob: -1.8047517538070679
    3. ' ' → logprob: -12.8047513961792
    4. ')b' → logprob: -13.0547513961792
    5. ')' → logprob: -13.8047513961792
    6. '<|end|>' → logprob: -14.4297513961792
    7. ' )' → logprob: -15.6797513961792
    8. ' ' → logprob: -16.054752349853516
    9. '    ' → logprob: -16.679752349853516
    10. '	b' → logprob: -16.679752349853516

Token 105: ')
' (ID: 446)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')' → logprob: -0.0006283254479058087
    2. ')
' → logprob: -7.375628471374512
    3. ')

' → logprob: -14.000628471374512
    4. ')
' → logprob: -14.625628471374512
    5. ' )' → logprob: -15.875628471374512
    6. ')return' → logprob: -16.000627517700195
    7. '   ' → logprob: -16.250627517700195
    8. ' ' → logprob: -17.375627517700195
    9. '<|end|>' → logprob: -17.500627517700195
    10. '),' → logprob: -17.625627517700195

Token 106: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.007247499655932188
    2. '
' → logprob: -5.257247447967529
    3. '    
' → logprob: -7.257247447967529
    4. 'print' → logprob: -7.757247447967529
    5. ' ' → logprob: -7.882247447967529
    6. ' print' → logprob: -8.507247924804688
    7. ' 
' → logprob: -9.257247924804688
    8. '  ' → logprob: -10.257247924804688
    9. '  
' → logprob: -10.507247924804688
    10. '' → logprob: -10.632247924804688

Token 107: ' print' (ID: 2123)
  Prédit: 'print'
  Correct (stricte): False
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'print' (adapté à ' print') → logprob: -2.856408536899835e-05
    2. ' print' → logprob: -10.500028610229492
    3. '   ' → logprob: -14.125028610229492
    4. 'p' → logprob: -16.750028610229492
    5. '
' → logprob: -17.125028610229492
    6. ' ' → logprob: -17.375028610229492
    7. '	print' → logprob: -18.000028610229492
    8. '_print' → logprob: -18.000028610229492
    9. '    
' → logprob: -18.625028610229492
    10. '  ' → logprob: -18.625028610229492

Token 108: '_sum' (ID: 29859)
  Prédit: '_sum'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_sum' → logprob: -1.9385402993066236e-05
    2. '_' → logprob: -10.875019073486328
    3. ' _' → logprob: -15.500019073486328
    4. '_s' → logprob: -16.375019073486328
    5. '_total' → logprob: -16.875019073486328
    6. '```' → logprob: -17.375019073486328
    7. '(' → logprob: -17.500019073486328
    8. '_SUM' → logprob: -18.250019073486328
    9. '(_' → logprob: -18.625019073486328
    10. '__' → logprob: -19.125019073486328

Token 109: '(total' (ID: 39744)
  Prédit: '(total'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(total' → logprob: -0.011049585416913033
    2. '(' → logprob: -4.511049747467041
    3. ' (' → logprob: -14.136049270629883
    4. '(
' → logprob: -15.011049270629883
    5. '(t' → logprob: -15.511049270629883
    6. '(

' → logprob: -15.636049270629883
    7. 'total' → logprob: -16.386049270629883
    8. ',total' → logprob: -16.636049270629883
    9. ' ' → logprob: -17.261049270629883
    10. '(top' → logprob: -17.261049270629883

Token 110: ')

' (ID: 1029)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')' → logprob: -2.47495681833243e-05
    2. ')
' → logprob: -10.625024795532227
    3. ')

' → logprob: -15.875024795532227
    4. '))' → logprob: -16.375024795532227
    5. ' )' → logprob: -16.625024795532227
    6. '`)' → logprob: -18.125024795532227
    7. ')
' → logprob: -18.125024795532227
    8. '()' → logprob: -18.125024795532227
    9. '')' → logprob: -18.125024795532227
    10. '   ' → logprob: -18.875024795532227

Token 111: 'def' (ID: 1314)
  Prédit: 'def'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'def' → logprob: -0.02242821455001831
    2. 'd' → logprob: -3.897428274154663
    3. 'n' → logprob: -7.147428035736084
    4. 'v' → logprob: -7.897428035736084
    5. 'i' → logprob: -8.022428512573242
    6. 'if' → logprob: -8.397428512573242
    7. 'value' → logprob: -10.147428512573242
    8. '```' → logprob: -10.522428512573242
    9. 'case' → logprob: -10.897428512573242
    10. '
' → logprob: -11.397428512573242

Token 112: ' execute' (ID: 15792)
  Prédit: ' main'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' main' → logprob: -0.04586051404476166
    2. ' handle' → logprob: -3.170860528945923
    3. ' process' → logprob: -6.420860290527344
    4. ' run' → logprob: -6.920860290527344
    5. 'main' → logprob: -9.795860290527344
    6. ' choose' → logprob: -9.920860290527344
    7. ' dispatch' → logprob: -10.920860290527344
    8. 'handle' → logprob: -11.045860290527344
    9. ' solve' → logprob: -11.045860290527344
    10. ' execute' → logprob: -11.295860290527344

Token 113: '_case' (ID: 43667)
  Prédit: '_case'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_case' → logprob: -0.07996191084384918
    2. '_' → logprob: -2.7049620151519775
    3. '(' → logprob: -5.204961776733398
    4. '_(' → logprob: -6.329961776733398
    5. '(case' → logprob: -7.329961776733398
    6. '(_' → logprob: -7.454961776733398
    7. '_command' → logprob: -7.829961776733398
    8. '_code' → logprob: -9.079961776733398
    9. '_function' → logprob: -9.204961776733398
    10. 'case' → logprob: -9.329961776733398

Token 114: '(n' (ID: 2406)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '(' → logprob: -0.7591384053230286
    2. '(case' → logprob: -0.8841384053230286
    3. '(value' → logprob: -3.259138345718384
    4. '_(' → logprob: -3.259138345718384
    5. '(_' → logprob: -3.759138345718384
    6. '_' → logprob: -4.509138584136963
    7. '_case' → logprob: -6.509138584136963
    8. '(s' → logprob: -6.884138584136963
    9. '(i' → logprob: -7.259138584136963
    10. '(a' → logprob: -7.509138584136963

Token 115: '):
' (ID: 1883)
  Prédit: '):'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '):' → logprob: -0.013326112180948257
    2. ')' → logprob: -4.763326168060303
    3. '):
' → logprob: -5.388326168060303
    4. 'u' → logprob: -9.763325691223145
    5. '_' → logprob: -10.888325691223145
    6. ':' → logprob: -11.263325691223145
    7. 'umer' → logprob: -11.388325691223145
    8. 'umber' → logprob: -11.888325691223145
    9. 'e' → logprob: -12.388325691223145
    10. '):

' → logprob: -13.013325691223145

Token 116: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.08002034574747086
    2. ':' → logprob: -2.5800204277038574
    3. '    
' → logprob: -8.0800199508667
    4. ' if' → logprob: -8.3300199508667
    5. '<|end|>' → logprob: -8.9550199508667
    6. '    ' → logprob: -9.2050199508667
    7. ' 
' → logprob: -9.8300199508667
    8. ':
' → logprob: -9.8300199508667
    9. '(' → logprob: -9.9550199508667
    10. ' :' → logprob: -10.2050199508667

Token 117: ' if' (ID: 538)
  Prédit: ' if'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' if' → logprob: -0.49804624915122986
    2. 'if' (adapté à ' if') → logprob: -1.3730462789535522
    3. '   ' → logprob: -1.9980462789535522
    4. ' i' → logprob: -5.873046398162842
    5. 'i' → logprob: -7.748046398162842
    6. '```' → logprob: -9.873045921325684
    7. '	if' → logprob: -10.998045921325684
    8. '    
' → logprob: -11.498045921325684
    9. ' ' → logprob: -11.748045921325684
    10. ' 
' → logprob: -12.373045921325684

Token 118: ' is' (ID: 382)
  Prédit: ' is'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' is' → logprob: -0.09412363916635513
    2. ' n' → logprob: -2.469123601913452
    3. 'is' → logprob: -5.969123840332031
    4. 'n' → logprob: -6.094123840332031
    5. '_' → logprob: -8.094123840332031
    6. ' (' → logprob: -10.719123840332031
    7. '_n' → logprob: -11.719123840332031
    8. ' _' → logprob: -12.219123840332031
    9. ' ' → logprob: -12.344123840332031
    10. ' ' → logprob: -12.594123840332031

Token 119: '_one' (ID: 26979)
  Prédit: '_one'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_one' → logprob: -9.088346359931165e-07
    2. '_' → logprob: -14.500000953674316
    3. '_on' → logprob: -15.875000953674316
    4. '_once' → logprob: -17.0
    5. '_o' → logprob: -17.25
    6. '_ONE' → logprob: -17.375
    7. '_two' → logprob: -17.375
    8. ' _' → logprob: -19.0
    9. '_case' → logprob: -19.5
    10. '_n' → logprob: -20.0

Token 120: '(n' (ID: 2406)
  Prédit: '(n'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(n' → logprob: -0.006722706835716963
    2. '(' → logprob: -5.006722927093506
    3. ' (' → logprob: -11.881722450256348
    4. '(value' → logprob: -14.881722450256348
    5. ' ' → logprob: -17.006723403930664
    6. ')' → logprob: -17.131723403930664
    7. '(
' → logprob: -17.631723403930664
    8. '(

' → logprob: -19.006723403930664
    9. '(noun' → logprob: -19.381723403930664
    10. ')(' → logprob: -19.381723403930664

Token 121: '):
' (ID: 1883)
  Prédit: '):'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '):' → logprob: -0.0027386622969061136
    2. ')' → logprob: -6.1277384757995605
    3. ' ):' → logprob: -8.127738952636719
    4. '):
' → logprob: -8.377738952636719
    5. ':' → logprob: -10.752738952636719
    6. '():' → logprob: -12.502738952636719
    7. ' )' → logprob: -14.002738952636719
    8. ''):' → logprob: -14.627738952636719
    9. ' ' → logprob: -14.877738952636719
    10. ')):' → logprob: -15.127738952636719

Token 122: '       ' (ID: 309)
  Prédit: '       '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '       ' → logprob: -0.2420073002576828
    2. '<|end|>' → logprob: -2.492007255554199
    3. '()' → logprob: -2.992007255554199
    4. ':' → logprob: -3.492007255554199
    5. '   ' → logprob: -3.992007255554199
    6. '():
' → logprob: -4.742007255554199
    7. '():' → logprob: -5.117007255554199
    8. ')' → logprob: -5.367007255554199
    9. ':
' → logprob: -5.742007255554199
    10. 'handle' → logprob: -6.492007255554199

Token 123: ' handle' (ID: 5318)
  Prédit: 'handle'
  Correct (stricte): False
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'handle' (adapté à ' handle') → logprob: -0.03932620584964752
    2. '       ' → logprob: -3.4143261909484863
    3. ' handle' → logprob: -5.414326190948486
    4. '_handle' → logprob: -7.789326190948486
    5. '   ' → logprob: -7.914326190948486
    6. '	handle' → logprob: -8.039326667785645
    7. '(handle' → logprob: -9.414326667785645
    8. '        
' → logprob: -11.164326667785645
    9. '.handle' → logprob: -12.414326667785645
    10. ' ' → logprob: -13.039326667785645

Token 124: '_case' (ID: 43667)
  Prédit: '_case'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_case' → logprob: -2.0100624169572257e-05
    2. '_' → logprob: -10.875020027160645
    3. ' _' → logprob: -15.000020027160645
    4. '_c' → logprob: -15.500020027160645
    5. '```' → logprob: -16.00002098083496
    6. '
' → logprob: -16.12502098083496
    7. '_code' → logprob: -16.50002098083496
    8. '_one' → logprob: -16.75002098083496
    9. '_cases' → logprob: -16.87502098083496
    10. '

' → logprob: -17.00002098083496

Token 125: '_one' (ID: 26979)
  Prédit: '_one'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_one' → logprob: -2.558399319241289e-05
    2. '_on' → logprob: -11.125025749206543
    3. '_once' → logprob: -12.750025749206543
    4. '_case' → logprob: -13.000025749206543
    5. '_else' → logprob: -13.000025749206543
    6. '_' → logprob: -13.500025749206543
    7. '_two' → logprob: -14.125025749206543
    8. '```' → logprob: -14.500025749206543
    9. '_o' → logprob: -15.000025749206543
    10. '_three' → logprob: -16.500024795532227

Token 126: '()
' (ID: 1234)
  Prédit: '()'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '()' → logprob: -0.3132767081260681
    2. '()
' → logprob: -1.313276767730713
    3. '()

' → logprob: -11.438276290893555
    4. '()
' → logprob: -12.938276290893555
    5. '(' → logprob: -13.688276290893555
    6. '()`' → logprob: -15.313276290893555
    7. '(
' → logprob: -15.813276290893555
    8. ' ()' → logprob: -16.313276290893555
    9. '()\' → logprob: -16.563276290893555
    10. '()"' → logprob: -17.438276290893555

Token 127: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.11048804223537445
    2. 'else' → logprob: -2.360487937927246
    3. ' else' → logprob: -4.610487937927246
    4. 'elif' → logprob: -8.985487937927246
    5. '	else' → logprob: -9.610487937927246
    6. '    
' → logprob: -9.735487937927246
    7. '<|end|>' → logprob: -11.360487937927246
    8. '
' → logprob: -11.985487937927246
    9. '```' → logprob: -12.610487937927246
    10. ' elif' → logprob: -12.860487937927246

Token 128: ' else' (ID: 1203)
  Prédit: 'else'
  Correct (stricte): False
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'else' (adapté à ' else') → logprob: -0.13217926025390625
    2. ' else' → logprob: -2.1321792602539062
    3. '   ' → logprob: -5.257179260253906
    4. '	else' → logprob: -11.507179260253906
    5. ' ' → logprob: -12.257179260253906
    6. 'elif' → logprob: -12.507179260253906
    7. '_else' → logprob: -12.632179260253906
    8. 'el' → logprob: -13.257179260253906
    9. 'e' → logprob: -13.757179260253906
    10. 'elser' → logprob: -14.132179260253906

Token 129: ':
' (ID: 734)
  Prédit: ':'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ':' → logprob: -0.0020422483794391155
    2. ':
' → logprob: -6.252042293548584
    3. '       ' → logprob: -9.377041816711426
    4. ' :' → logprob: -11.877041816711426
    5. '():' → logprob: -11.877041816711426
    6. '<|end|>' → logprob: -12.002041816711426
    7. '):' → logprob: -13.252041816711426
    8. '   ' → logprob: -13.377041816711426
    9. ':**' → logprob: -13.877041816711426
    10. ':

' → logprob: -13.877041816711426

Token 130: '       ' (ID: 309)
  Prédit: '       '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '       ' → logprob: -0.09159617125988007
    2. 'handle' → logprob: -2.4665961265563965
    3. ' handle' → logprob: -5.9665961265563965
    4. '<|end|>' → logprob: -10.841596603393555
    5. '_handle' → logprob: -11.091596603393555
    6. '	handle' → logprob: -11.216596603393555
    7. '.handle' → logprob: -11.466596603393555
    8. '   ' → logprob: -11.591596603393555
    9. '        
' → logprob: -11.841596603393555
    10. '(handle' → logprob: -11.841596603393555

Token 131: ' handle' (ID: 5318)
  Prédit: 'handle'
  Correct (stricte): False
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'handle' (adapté à ' handle') → logprob: -0.0032027887646108866
    2. ' handle' → logprob: -5.75320291519165
    3. '       ' → logprob: -11.003202438354492
    4. '	handle' → logprob: -12.378202438354492
    5. '   ' → logprob: -12.878202438354492
    6. '.handle' → logprob: -14.503202438354492
    7. '_handle' → logprob: -14.878202438354492
    8. ' ' → logprob: -15.003202438354492
    9. '(handle' → logprob: -15.378202438354492
    10. '           ' → logprob: -16.878202438354492

Token 132: '_case' (ID: 43667)
  Prédit: '_case'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_case' → logprob: -1.7432603272027336e-06
    2. '_' → logprob: -13.625001907348633
    3. 'case' → logprob: -15.125001907348633
    4. '_code' → logprob: -17.750001907348633
    5. '_c' → logprob: -18.125001907348633
    6. ' _' → logprob: -18.250001907348633
    7. '_line' → logprob: -18.500001907348633
    8. '_handle' → logprob: -18.625001907348633
    9. 'er' → logprob: -18.750001907348633
    10. '__' → logprob: -19.625001907348633

Token 133: '_else' (ID: 148349)
  Prédit: '_else'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_else' → logprob: -1.0445127372804563e-05
    2. 'else' → logprob: -11.50001049041748
    3. '_' → logprob: -15.75001049041748
    4. '_other' → logprob: -17.375009536743164
    5. '_el' → logprob: -17.500009536743164
    6. '_e' → logprob: -17.750009536743164
    7. '_es' → logprob: -17.875009536743164
    8. '_except' → logprob: -18.000009536743164
    9. '_use' → logprob: -18.250009536743164
    10. '_case' → logprob: -18.750009536743164

Token 134: '()

' (ID: 5874)
  Prédit: '()'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '()' → logprob: -0.0005687602679245174
    2. '()
' → logprob: -7.500568866729736
    3. '(' → logprob: -11.875568389892578
    4. '()

' → logprob: -12.250568389892578
    5. '()\' → logprob: -12.750568389892578
    6. '()
' → logprob: -14.750568389892578
    7. '()`' → logprob: -15.625568389892578
    8. ' ()' → logprob: -15.750568389892578
    9. '()<' → logprob: -16.000568389892578
    10. '()"' → logprob: -16.000568389892578

Token 135: 'def' (ID: 1314)
  Prédit: 'n'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'n' → logprob: -0.01083817146718502
    2. 'def' → logprob: -4.760838031768799
    3. 'if' → logprob: -6.135838031768799
    4. 'i' → logprob: -10.260838508605957
    5. '    
' → logprob: -12.385838508605957
    6. 'ndef' → logprob: -12.510838508605957
    7. '```' → logprob: -12.885838508605957
    8. '#' → logprob: -13.010838508605957
    9. '\' → logprob: -13.260838508605957
    10. '  
' → logprob: -13.510838508605957

Token 136: ' main' (ID: 2758)
  Prédit: ' main'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' main' → logprob: -4.644463479053229e-05
    2. 'main' → logprob: -10.375046730041504
    3. ' run' → logprob: -11.125046730041504
    4. '_main' → logprob: -15.625046730041504
    5. ' __' → logprob: -17.000045776367188
    6. ' ' → logprob: -17.125045776367188
    7. '	main' → logprob: -17.125045776367188
    8. ' execute' → logprob: -17.250045776367188
    9. ' _' → logprob: -17.375045776367188
    10. ' get' → logprob: -17.750045776367188

Token 137: '():
' (ID: 8595)
  Prédit: '():'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '():' → logprob: -1.1279553291387856e-05
    2. '():
' → logprob: -11.625011444091797
    3. ' ():' → logprob: -13.250011444091797
    4. '()' → logprob: -14.500011444091797
    5. '():
' → logprob: -17.125011444091797
    6. '()>' → logprob: -17.375011444091797
    7. ':' → logprob: -17.500011444091797
    8. '(' → logprob: -18.625011444091797
    9. '():

' → logprob: -20.250011444091797
    10. '()">' → logprob: -20.500011444091797

Token 138: '   ' (ID: 271)
  Prédit: '
'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '
' → logprob: -0.5988003015518188
    2. 'n' → logprob: -1.3488003015518188
    3. '   ' → logprob: -1.8488003015518188
    4. ' n' → logprob: -3.5988001823425293
    5. '(n' → logprob: -5.848800182342529
    6. '	n' → logprob: -6.598800182342529
    7. '    
' → logprob: -6.723800182342529
    8. ' 
' → logprob: -8.223800659179688
    9. '  
' → logprob: -9.098800659179688
    10. ' ' → logprob: -9.723800659179688

Token 139: ' n' (ID: 297)
  Prédit: ' n'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' n' → logprob: -0.38911333680152893
    2. 'n' (adapté à ' n') → logprob: -1.1391133069992065
    3. '   ' → logprob: -6.139113426208496
    4. '
' → logprob: -9.889113426208496
    5. '```' → logprob: -11.014113426208496
    6. '	n' → logprob: -12.139113426208496
    7. '    
' → logprob: -12.264113426208496
    8. ' 
' → logprob: -13.139113426208496
    9. '``' → logprob: -14.514113426208496
    10. 'num' → logprob: -14.764113426208496

Token 140: ' =' (ID: 314)
  Prédit: ' ='
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' =' → logprob: -0.016036832705140114
    2. '=' → logprob: -4.1410369873046875
    3. ' ' → logprob: -13.516036987304688
    4. ' =
' → logprob: -14.766036987304688
    5. '  ' → logprob: -15.391036987304688
    6. ' ' → logprob: -15.641036987304688
    7. ')' → logprob: -15.766036987304688
    8. '=int' → logprob: -16.641036987304688
    9. '_' → logprob: -16.891036987304688
    10. ' =)' → logprob: -17.016036987304688

Token 141: ' get' (ID: 717)
  Prédit: 'get'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'get' → logprob: -0.3870519697666168
    2. ' get' → logprob: -1.1370519399642944
    3. 'int' → logprob: -8.887051582336426
    4. ' int' → logprob: -10.137051582336426
    5. '	get' → logprob: -13.637051582336426
    6. ' ' → logprob: -13.762051582336426
    7. '(get' → logprob: -15.512051582336426
    8. '_get' → logprob: -15.637051582336426
    9. ')get' → logprob: -16.262052536010742
    10. '=get' → logprob: -16.387052536010742

Token 142: '_input' (ID: 12507)
  Prédit: '_input'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_input' → logprob: -1.0280383548888494e-06
    2. '_' → logprob: -13.875000953674316
    3. '_in' → logprob: -17.250001907348633
    4. '_output' → logprob: -18.750001907348633
    5. ' _' → logprob: -19.375001907348633
    6. '_Input' → logprob: -19.500001907348633
    7. '__' → logprob: -20.250001907348633
    8. '_INPUT' → logprob: -20.250001907348633
    9. '_inputs' → logprob: -20.875001907348633
    10. '_int' → logprob: -21.375001907348633

Token 143: '_as' (ID: 25206)
  Prédit: '_as'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_as' → logprob: -8.375538163818419e-05
    2. '()' → logprob: -9.625083923339844
    3. '_' → logprob: -11.000083923339844
    4. '_a' → logprob: -15.250083923339844
    5. 'as' → logprob: -15.375083923339844
    6. '_value' → logprob: -16.000083923339844
    7. '_As' → logprob: -16.625083923339844
    8. ' _' → logprob: -16.750083923339844
    9. '())' → logprob: -17.250083923339844
    10. 'As' → logprob: -17.625083923339844

Token 144: '_int' (ID: 12285)
  Prédit: '_int'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_int' → logprob: -0.09092078357934952
    2. 'int' → logprob: -2.8409206867218018
    3. 't' → logprob: -3.5909206867218018
    4. 'nt' → logprob: -7.340920925140381
    5. '_t' → logprob: -8.465920448303223
    6. ' int' → logprob: -10.215920448303223
    7. '```' → logprob: -10.840920448303223
    8. '_' → logprob: -11.465920448303223
    9. '<int' → logprob: -12.090920448303223
    10. '   ' → logprob: -12.340920448303223

Token 145: '()
' (ID: 1234)
  Prédit: '()'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '()' → logprob: -0.00011677479778882116
    2. '()
' → logprob: -9.125116348266602
    3. '(' → logprob: -12.375116348266602
    4. '()

' → logprob: -13.625116348266602
    5. ' ()' → logprob: -14.625116348266602
    6. '()`' → logprob: -14.875116348266602
    7. '()"' → logprob: -15.375116348266602
    8. '()<' → logprob: -15.500116348266602
    9. '()>' → logprob: -15.625116348266602
    10. '().' → logprob: -15.750116348266602

Token 146: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.07555937021970749
    2. '
' → logprob: -3.200559377670288
    3. 'execute' → logprob: -3.450559377670288
    4. '    
' → logprob: -8.825559616088867
    5. ' execute' → logprob: -10.450559616088867
    6. '	ex' → logprob: -10.450559616088867
    7. '.execute' → logprob: -10.950559616088867
    8. '  ' → logprob: -11.075559616088867
    9. '  
' → logprob: -11.075559616088867
    10. '<|end|>' → logprob: -11.200559616088867

Token 147: ' execute' (ID: 15792)
  Prédit: 'execute'
  Correct (stricte): False
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'execute' (adapté à ' execute') → logprob: -0.00019543453527148813
    2. ' execute' → logprob: -9.125195503234863
    3. '   ' → logprob: -9.375195503234863
    4. '.execute' → logprob: -13.750195503234863
    5. '_execute' → logprob: -15.500195503234863
    6. '
' → logprob: -16.000194549560547
    7. 'execut' → logprob: -16.000194549560547
    8. 'ecute' → logprob: -16.375194549560547
    9. ' ' → logprob: -16.625194549560547
    10. 'exec' → logprob: -16.875194549560547

Token 148: '_case' (ID: 43667)
  Prédit: '_case'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_case' → logprob: -1.9361264946837764e-07
    2. '_' → logprob: -15.75
    3. '_c' → logprob: -17.875
    4. '_cases' → logprob: -18.125
    5. ' _' → logprob: -18.375
    6. '_CASE' → logprob: -19.125
    7. 'case' → logprob: -19.5
    8. '_code' → logprob: -19.875
    9. '```' → logprob: -19.875
    10. '_ca' → logprob: -20.0

Token 149: '(n' (ID: 2406)
  Prédit: '(n'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(n' → logprob: -0.018156733363866806
    2. '(' → logprob: -4.0181565284729
    3. '(
' → logprob: -12.768157005310059
    4. ' (' → logprob: -12.768157005310059
    5. '((' → logprob: -14.643157005310059
    6. '("("' → logprob: -15.893157005310059
    7. '(noun' → logprob: -16.393156051635742
    8. '(

' → logprob: -16.393156051635742
    9. '('' → logprob: -16.768156051635742
    10. '()' → logprob: -17.393156051635742

Token 150: ')

' (ID: 1029)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')' → logprob: -9.674858301877975e-05
    2. ')
' → logprob: -9.250096321105957
    3. ')

' → logprob: -15.125096321105957
    4. ' )' → logprob: -15.375096321105957
    5. '()' → logprob: -16.875097274780273
    6. '())' → logprob: -17.125097274780273
    7. '
' → logprob: -18.625097274780273
    8. ')#' → logprob: -19.375097274780273
    9. ')
' → logprob: -19.375097274780273
    10. ')return' → logprob: -19.500097274780273

Token 151: 'if' (ID: 366)
  Prédit: 'if'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'if' → logprob: -0.013655643910169601
    2. '\n' → logprob: -5.013655662536621
    3. '
' → logprob: -5.638655662536621
    4. 'main' → logprob: -5.888655662536621
    5. '```' → logprob: -8.388655662536621
    6. '\' → logprob: -8.763655662536621
    7. '<|end|>' → logprob: -9.388655662536621
    8. '    
' → logprob: -10.888655662536621
    9. ' if' → logprob: -10.888655662536621
    10. '  
' → logprob: -11.013655662536621

Token 152: ' __' (ID: 2516)
  Prédit: ' __'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' __' → logprob: -0.005004259757697582
    2. '__' → logprob: -5.505004405975342
    3. '_' → logprob: -7.630004405975342
    4. ' ' → logprob: -8.380003929138184
    5. ' ' → logprob: -9.505003929138184
    6. ' _' → logprob: -9.755003929138184
    7. '_name' → logprob: -10.005003929138184
    8. ' ' → logprob: -11.880003929138184
    9. ' ‌' → logprob: -12.255003929138184
    10. '<|end|>' → logprob: -12.380003929138184

Token 153: 'name' (ID: 897)
  Prédit: '.'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '.' → logprob: -0.5490691661834717
    2. '__' → logprob: -1.0490691661834717
    3. '<|end|>' → logprob: -3.4240691661834717
    4. '.__' → logprob: -3.5490691661834717
    5. '_' → logprob: -5.174069404602051
    6. '__.__' → logprob: -6.924069404602051
    7. '<|end|>' → logprob: -6.924069404602051
    8. '==' → logprob: -7.174069404602051
    9. '._' → logprob: -7.799069404602051
    10. '[' → logprob: -7.799069404602051

Token 154: '__' (ID: 771)
  Prédit: '__'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '__' → logprob: -6.885492621222511e-05
    2. '==' → logprob: -10.000068664550781
    3. ' ==' → logprob: -10.875068664550781
    4. '_' → logprob: -12.625068664550781
    5. ' __' → logprob: -14.500068664550781
    6. '__.__' → logprob: -15.500068664550781
    7. '___' → logprob: -15.875068664550781
    8. '____' → logprob: -16.12506866455078
    9. '=="' → logprob: -16.25006866455078
    10. '=='' → logprob: -17.50006866455078

Token 155: ' ==' (ID: 951)
  Prédit: '__'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '__' → logprob: -0.3794984221458435
    2. ' ==' → logprob: -1.3794984817504883
    3. '==' → logprob: -2.7544984817504883
    4. '_' → logprob: -9.129498481750488
    5. '=="' → logprob: -9.379498481750488
    6. '___' → logprob: -9.504498481750488
    7. '=' → logprob: -9.754498481750488
    8. '=='' → logprob: -10.129498481750488
    9. ' =' → logprob: -10.629498481750488
    10. '===' → logprob: -11.379498481750488

Token 156: ' '__' (ID: 28278)
  Prédit: '''
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ''' → logprob: -0.06197362765669823
    2. '"' → logprob: -2.8119735717773438
    3. ' "__' → logprob: -13.436973571777344
    4. ' '' → logprob: -13.686973571777344
    5. ' '__' → logprob: -13.686973571777344
    6. '__' → logprob: -14.186973571777344
    7. ' "' → logprob: -14.311973571777344
    8. '"user' → logprob: -15.061973571777344
    9. ''s' → logprob: -15.311973571777344
    10. ''"' → logprob: -16.311973571777344

Token 157: 'main' (ID: 7731)
  Prédit: 'main'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'main' → logprob: -1.4259644558478612e-05
    2. '__' → logprob: -11.625014305114746
    3. 'm' → logprob: -12.875014305114746
    4. 'ma' → logprob: -13.250014305114746
    5. 'name' → logprob: -14.625014305114746
    6. '_main' → logprob: -15.375014305114746
    7. 'mai' → logprob: -15.625014305114746
    8. ' main' → logprob: -17.75001335144043
    9. '__':
' → logprob: -18.75001335144043
    10. '-main' → logprob: -19.37501335144043

Token 158: '__':
' (ID: 39314)
  Prédit: '__'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '__' → logprob: -0.12711907923221588
    2. '__':
' → logprob: -2.1271190643310547
    3. '_' → logprob: -8.627119064331055
    4. ''' → logprob: -12.377119064331055
    5. '__":
' → logprob: -12.752119064331055
    6. '_'' → logprob: -13.502119064331055
    7. '__.' → logprob: -14.002119064331055
    8. '___' → logprob: -14.002119064331055
    9. '__
' → logprob: -14.377119064331055
    10. '__:' → logprob: -14.627119064331055

Token 159: '   ' (ID: 271)
  Prédit: 'main'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'main' → logprob: -0.0003963569179177284
    2. '__' → logprob: -8.250396728515625
    3. ' main' → logprob: -9.250396728515625
    4. '_main' → logprob: -10.375396728515625
    5. '	main' → logprob: -12.625396728515625
    6. 'm' → logprob: -13.375396728515625
    7. ''' → logprob: -13.500396728515625
    8. '_' → logprob: -14.875396728515625
    9. 'Main' → logprob: -15.375396728515625
    10. '   ' → logprob: -15.375396728515625

Token 160: ' main' (ID: 2758)
  Prédit: 'main'
  Correct (stricte): False
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'main' (adapté à ' main') → logprob: -0.38688334822654724
    2. ' main' → logprob: -1.1368833780288696
    3. '	main' → logprob: -11.511883735656738
    4. 'm' → logprob: -14.011883735656738
    5. '_main' → logprob: -14.511883735656738
    6. 'maine' → logprob: -15.261883735656738
    7. '(main' → logprob: -15.886883735656738
    8. ' m' → logprob: -16.011882781982422
    9. '.main' → logprob: -16.261882781982422
    10. ' 
' → logprob: -16.386882781982422

Token 161: '()' (ID: 416)
  Prédit: '()'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '()' → logprob: -0.0002456046058796346
    2. '()
' → logprob: -8.750246047973633
    3. '(' → logprob: -9.375246047973633
    4. '(
' → logprob: -14.500246047973633
    5. '()

' → logprob: -14.500246047973633
    6. ' ()' → logprob: -14.750246047973633
    7. '```' → logprob: -15.750246047973633
    8. '()<' → logprob: -15.875246047973633
    9. '()`' → logprob: -15.875246047973633
    10. '#' → logprob: -16.000246047973633


RÉSUMÉ:
--------------------------------------------------------------------------------
Total des tokens analysés: 159
Tokens correctement prédits (1ère position, stricte): 76
Tokens correctement prédits (1ère position, avec adaptation): 84
Tokens correctement prédits (top 10): 133
Précision stricte (1ère position): 47.80%
Précision adaptée (1ère position): 52.83%
Précision (top 10): 83.65%
================================================================================
