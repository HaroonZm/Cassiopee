================================================================================
ANALYSE DE PRÉDICTION TOKEN PAR TOKEN (BATCH API)
Date: 2025-06-04 19:28:29
Modèle de tokenisation: gpt-4o-mini
================================================================================

SCRIPT ANALYSÉ:
--------------------------------------------------------------------------------
# Bon, on y va !
nk = input().split()
n = int(nk[0])
k = int(nk[1])

heights = list(map(int, input().split()))
# Ouaih, pas le plus efficace mais tant pis.

if k >= n:
    res = 0  # Tous enlevés, donc 0
else:
    heights.sort()
    # On prend le début... c'est bizarre mais c'est comme ça pour le résultat
    res = 0
    for i in range(n-k):
        res += heights[i]
        # Pas la peine de faire ça en une ligne parfois

print(res)
# Voilà, ça devrait marcher (je crois)
--------------------------------------------------------------------------------

RÉSULTATS D'ANALYSE TOKEN PAR TOKEN:
--------------------------------------------------------------------------------
Token 0: '#' (ID: 2)
  → Token d'amorce (pas de prédiction)

Token 1: ' Bon' (ID: 12658)
  → Token d'amorce (pas de prédiction)

Token 2: ',' (ID: 11)
  → Token d'amorce (pas de prédiction)

Token 3: ' on' (ID: 402)
  Prédit: ' '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' ' → logprob: -0.1559932678937912
    2. '```' → logprob: -2.1559932231903076
    3. '  ' → logprob: -4.530993461608887
    4. 'jour' → logprob: -5.530993461608887
    5. '`' → logprob: -5.655993461608887
    6. ' je' → logprob: -6.030993461608887
    7. ''' → logprob: -6.155993461608887
    8. '#' → logprob: -7.530993461608887
    9. ' ```' → logprob: -7.655993461608887
    10. ' j' → logprob: -7.655993461608887

Token 4: ' y' (ID: 342)
  Prédit: '''
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ''' → logprob: -0.028362007811665535
    2. ''t' → logprob: -4.653361797332764
    3. 'n' → logprob: -5.528361797332764
    4. '`' → logprob: -5.653361797332764
    5. 't' → logprob: -5.903361797332764
    6. ' ' → logprob: -6.028361797332764
    7. '```' → logprob: -6.403361797332764
    8. 'ne' → logprob: -7.278361797332764
    9. 's' → logprob: -7.403361797332764
    10. '_' → logprob: -7.778361797332764

Token 5: ' va' (ID: 3423)
  Prédit: 'va'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'va' → logprob: -0.2505682706832886
    2. ' va' → logprob: -2.000568389892578
    3. 'a' → logprob: -3.125568389892578
    4. 'v' → logprob: -3.625568389892578
    5. 'est' → logprob: -5.125568389892578
    6. 'part' → logprob: -6.125568389892578
    7. 'vas' → logprob: -6.500568389892578
    8. '```' → logprob: -6.750568389892578
    9. 'vient' → logprob: -6.875568389892578
    10. 'vais' → logprob: -7.375568389892578

Token 6: ' !
' (ID: 27498)
  Prédit: '!'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '!' → logprob: -0.12356594204902649
    2. '```' → logprob: -2.748565912246704
    3. '\n' → logprob: -3.998565912246704
    4. '#' → logprob: -4.373566150665283
    5. ':' → logprob: -4.748566150665283
    6. '
' → logprob: -5.373566150665283
    7. '\' → logprob: -6.123566150665283
    8. ',' → logprob: -6.623566150665283
    9. 'print' → logprob: -7.123566150665283
    10. '``' → logprob: -7.373566150665283

Token 7: 'nk' (ID: 55159)
  Prédit: '#'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '#' → logprob: -1.1350980997085571
    2. 'print' → logprob: -1.1350980997085571
    3. '\n' → logprob: -1.2600980997085571
    4. '\' → logprob: -2.7600979804992676
    5. '```' → logprob: -5.135097980499268
    6. '
' → logprob: -5.885097980499268
    7. '#print' → logprob: -8.010098457336426
    8. 'import' → logprob: -8.260098457336426
    9. '' → logprob: -9.010098457336426
    10. '\r' → logprob: -9.260098457336426

Token 8: ' =' (ID: 314)
  Prédit: '.'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '.' → logprob: -1.3164559602737427
    2. '=' → logprob: -1.4414559602737427
    3. 't' → logprob: -1.5664559602737427
    4. ' =' → logprob: -2.316455841064453
    5. 'e' → logprob: -2.816455841064453
    6. '_' → logprob: -3.316455841064453
    7. 'a' → logprob: -4.441455841064453
    8. 'i' → logprob: -4.441455841064453
    9. 'u' → logprob: -4.566455841064453
    10. 's' → logprob: -4.816455841064453

Token 9: ' input' (ID: 3422)
  Prédit: ' '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' ' → logprob: -0.2806318700313568
    2. '10' → logprob: -2.4056317806243896
    3. '5' → logprob: -3.5306317806243896
    4. '3' → logprob: -3.7806317806243896
    5. ' np' → logprob: -3.9056317806243896
    6. '1' → logprob: -4.905632019042969
    7. '2' → logprob: -4.905632019042969
    8. '0' → logprob: -4.905632019042969
    9. ' None' → logprob: -4.905632019042969
    10. '4' → logprob: -5.030632019042969

Token 10: '().' (ID: 1454)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '(' → logprob: -7.886803359724581e-05
    2. '("("' → logprob: -10.000079154968262
    3. '(
' → logprob: -11.125079154968262
    4. '('' → logprob: -11.375079154968262
    5. '(

' → logprob: -12.500079154968262
    6. '()' → logprob: -14.250079154968262
    7. '(`' → logprob: -14.250079154968262
    8. ' (' → logprob: -14.375079154968262
    9. '("")' → logprob: -14.875079154968262
    10. '("' → logprob: -15.250079154968262

Token 11: 'split' (ID: 13627)
  Prédit: 'strip'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'strip' → logprob: -0.007788085378706455
    2. 'split' → logprob: -5.007788181304932
    3. 'lower' → logprob: -7.257788181304932
    4. 'rstrip' → logprob: -8.257787704467773
    5. 'replace' → logprob: -9.257787704467773
    6. 'isdigit' → logprob: -12.632787704467773
    7. 'startswith' → logprob: -13.132787704467773
    8. 'str' → logprob: -13.257787704467773
    9. ' strip' → logprob: -13.757787704467773
    10. 'read' → logprob: -14.257787704467773

Token 12: '()
' (ID: 1234)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '(' → logprob: -0.03291592374444008
    2. '('' → logprob: -3.6579158306121826
    3. '("("' → logprob: -5.157916069030762
    4. '()' → logprob: -7.282916069030762
    5. '(`' → logprob: -10.407916069030762
    6. '(
' → logprob: -10.407916069030762
    7. '(

' → logprob: -10.532916069030762
    8. '((' → logprob: -11.032916069030762
    9. '("' → logprob: -11.782916069030762
    10. ' (' → logprob: -11.907916069030762

Token 13: 'n' (ID: 77)
  Prédit: 'n'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'n' → logprob: -0.645388662815094
    2. '[' → logprob: -1.0203886032104492
    3. 'x' → logprob: -3.520388603210449
    4. '=' → logprob: -3.770388603210449
    5. 'a' → logprob: -4.270388603210449
    6. 'nk' → logprob: -4.395388603210449
    7. '[n' → logprob: -4.645388603210449
    8. 'for' → logprob: -4.770388603210449
    9. 'k' → logprob: -5.395388603210449
    10. 'if' → logprob: -6.020388603210449

Token 14: ' =' (ID: 314)
  Prédit: ','
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ',' → logprob: -0.5152560472488403
    2. 'k' → logprob: -1.7652560472488403
    3. ' =' → logprob: -2.265255928039551
    4. ',k' → logprob: -3.015255928039551
    5. '=' → logprob: -3.640255928039551
    6. ' ' → logprob: -4.015255928039551
    7. '_' → logprob: -4.515255928039551
    8. '[' → logprob: -4.765255928039551
    9. ' ,' → logprob: -5.015255928039551
    10. '_k' → logprob: -5.390255928039551

Token 15: ' int' (ID: 677)
  Prédit: 'int'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'int' → logprob: -0.023252464830875397
    2. ' int' → logprob: -3.773252487182617
    3. ' ' → logprob: -12.898252487182617
    4. 'len' → logprob: -13.023252487182617
    5. 'nk' → logprob: -13.648252487182617
    6. '[int' → logprob: -14.523252487182617
    7. ' nk' → logprob: -15.398252487182617
    8. '  ' → logprob: -15.898252487182617
    9. 'nt' → logprob: -16.273252487182617
    10. ' len' → logprob: -16.648252487182617

Token 16: '(n' (ID: 2406)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(' → logprob: -0.5761044025421143
    2. '(n' → logprob: -0.8261044025421143
    3. '('' → logprob: -9.076104164123535
    4. '(kn' → logprob: -11.451104164123535
    5. '(k' → logprob: -11.576104164123535
    6. '("' → logprob: -11.826104164123535
    7. '(nn' → logprob: -12.076104164123535
    8. '()' → logprob: -12.576104164123535
    9. '(nx' → logprob: -12.576104164123535
    10. '("("' → logprob: -13.076104164123535

Token 17: 'k' (ID: 74)
  Prédit: 'k'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'k' → logprob: -0.004526485223323107
    2. '[' → logprob: -6.004526615142822
    3. '[k' → logprob: -6.504526615142822
    4. '(k' → logprob: -7.879526615142822
    5. '(' → logprob: -9.504526138305664
    6. '_k' → logprob: -10.004526138305664
    7. ')' → logprob: -10.504526138305664
    8. 'K' → logprob: -12.254526138305664
    9. '"k' → logprob: -12.254526138305664
    10. '()[' → logprob: -13.004526138305664

Token 18: '[' (ID: 58)
  Prédit: '['
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '[' → logprob: -1.8624639324116288e-06
    2. '[n' → logprob: -13.875001907348633
    3. ' [' → logprob: -14.875001907348633
    4. ')' → logprob: -15.000001907348633
    5. '[k' → logprob: -16.625001907348633
    6. '['' → logprob: -16.625001907348633
    7. '[
' → logprob: -16.750001907348633
    8. '   ' → logprob: -17.500001907348633
    9. ' ' → logprob: -18.625001907348633
    10. '0' → logprob: -18.875001907348633

Token 19: '0' (ID: 15)
  Prédit: '0'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '0' → logprob: -6.869017852295656e-06
    2. ' ' → logprob: -12.375006675720215
    3. '1' → logprob: -12.875006675720215
    4. ')' → logprob: -19.75000762939453
    5. '۰' → logprob: -21.12500762939453
    6. ']' → logprob: -21.37500762939453
    7. '  ' → logprob: -21.50000762939453
    8. '０' → logprob: -21.75000762939453
    9. '```' → logprob: -21.75000762939453
    10. '   ' → logprob: -21.93750762939453

Token 20: '])
' (ID: 5169)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ')' → logprob: -0.31351256370544434
    2. '])' → logprob: -1.3135125637054443
    3. ']' → logprob: -8.938512802124023
    4. ' ])' → logprob: -10.188512802124023
    5. ''])' → logprob: -11.063512802124023
    6. ' )' → logprob: -11.063512802124023
    7. ')
' → logprob: -11.063512802124023
    8. ')])' → logprob: -11.563512802124023
    9. '))' → logprob: -11.938512802124023
    10. ')]' → logprob: -12.813512802124023

Token 21: 'k' (ID: 74)
  Prédit: 'k'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'k' → logprob: -0.00023524489370174706
    2. ' k' → logprob: -8.625235557556152
    3. ' ' → logprob: -10.250235557556152
    4. 'm' → logprob: -12.375235557556152
    5. ',k' → logprob: -12.375235557556152
    6. 'n' → logprob: -12.750235557556152
    7. ')' → logprob: -13.250235557556152
    8. ',' → logprob: -13.500235557556152
    9. ' 
' → logprob: -13.875235557556152
    10. '<|end|>' → logprob: -14.000235557556152

Token 22: ' =' (ID: 314)
  Prédit: ' ='
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' =' → logprob: -0.18399423360824585
    2. '=' → logprob: -1.8089942932128906
    3. ')' → logprob: -5.808994293212891
    4. ' ' → logprob: -7.308994293212891
    5. '[' → logprob: -8.93399429321289
    6. '<|end|>' → logprob: -8.93399429321289
    7. '=int' → logprob: -9.30899429321289
    8. ' ==' → logprob: -10.05899429321289
    9. '  ' → logprob: -10.18399429321289
    10. '.' → logprob: -10.43399429321289

Token 23: ' int' (ID: 677)
  Prédit: ' int'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' int' → logprob: -0.47409528493881226
    2. 'int' → logprob: -0.9740952849388123
    3. ' nk' → logprob: -10.974095344543457
    4. 'nk' → logprob: -14.349095344543457
    5. ' n' → logprob: -15.224095344543457
    6. ' ' → logprob: -15.724095344543457
    7. 'n' → logprob: -16.84909439086914
    8. '=int' → logprob: -17.34909439086914
    9. '(int' → logprob: -17.59909439086914
    10. '	int' → logprob: -18.59909439086914

Token 24: '(n' (ID: 2406)
  Prédit: '(n'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(n' → logprob: -0.038787391036748886
    2. '(' → logprob: -3.288787364959717
    3. '(k' → logprob: -7.288787364959717
    4. ' (' → logprob: -9.788787841796875
    5. '(kn' → logprob: -12.913787841796875
    6. '()' → logprob: -14.038787841796875
    7. '(
' → logprob: -14.788787841796875
    8. 'nk' → logprob: -14.788787841796875
    9. '(nx' → logprob: -14.913787841796875
    10. '(nt' → logprob: -15.163787841796875

Token 25: 'k' (ID: 74)
  Prédit: 'k'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'k' → logprob: -0.004690476227551699
    2. '[' → logprob: -5.629690647125244
    3. '[k' → logprob: -6.879690647125244
    4. '_k' → logprob: -10.879690170288086
    5. ')' → logprob: -11.129690170288086
    6. '-k' → logprob: -11.504690170288086
    7. 'K' → logprob: -11.504690170288086
    8. '])' → logprob: -12.754690170288086
    9. ' k' → logprob: -13.504690170288086
    10. '[
' → logprob: -14.004690170288086

Token 26: '[' (ID: 58)
  Prédit: '['
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '[' → logprob: -1.0206720617134124e-05
    2. ' [' → logprob: -11.87501049041748
    3. '1' → logprob: -13.00001049041748
    4. '][' → logprob: -15.12501049041748
    5. '```' → logprob: -15.75001049041748
    6. ' ' → logprob: -15.87501049041748
    7. ']' → logprob: -16.125009536743164
    8. ')' → logprob: -16.500009536743164
    9. '   ' → logprob: -16.625009536743164
    10. '])' → logprob: -16.875009536743164

Token 27: '1' (ID: 16)
  Prédit: '1'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '1' → logprob: -1.3856492842023727e-06
    2. '0' → logprob: -13.875000953674316
    3. ' ' → logprob: -15.250000953674316
    4. '])' → logprob: -16.375001907348633
    5. '```' → logprob: -17.750001907348633
    6. '2' → logprob: -18.625001907348633
    7. '   ' → logprob: -19.000001907348633
    8. '-' → logprob: -19.375001907348633
    9. '１' → logprob: -19.500001907348633
    10. '[' → logprob: -19.875001907348633

Token 28: '])

' (ID: 21045)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ')' → logprob: -4.320199877838604e-07
    2. '))' → logprob: -15.625
    3. ')
' → logprob: -16.75
    4. '')' → logprob: -17.125
    5. ']' → logprob: -17.25
    6. ' )' → logprob: -17.5
    7. '）' → logprob: -17.875
    8. '`)' → logprob: -18.0
    9. '])' → logprob: -18.375
    10. ')n' → logprob: -19.25

Token 29: 'he' (ID: 273)
  Prédit: 'a'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'a' → logprob: -1.5213972330093384
    2. 's' → logprob: -1.5213972330093384
    3. 'r' → logprob: -2.021397113800049
    4. '#' → logprob: -2.521397113800049
    5. 'i' → logprob: -2.646397113800049
    6. 'f' → logprob: -3.021397113800049
    7. 'd' → logprob: -3.396397113800049
    8. 'n' → logprob: -3.396397113800049
    9. 'c' → logprob: -3.521397113800049
    10. 't' → logprob: -3.521397113800049

Token 30: 'ights' (ID: 3635)
  Prédit: 'a'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'a' → logprob: -0.41711753606796265
    2. 'ight' → logprob: -2.0421175956726074
    3. 'l' → logprob: -2.5421175956726074
    4. 'ad' → logprob: -3.2921175956726074
    5. 'ap' → logprob: -3.7921175956726074
    6. 'i' → logprob: -3.7921175956726074
    7. 'aders' → logprob: -3.9171175956726074
    8. 'ader' → logprob: -4.292117595672607
    9. 'ig' → logprob: -4.667117595672607
    10. 'ights' → logprob: -5.917117595672607

Token 31: ' =' (ID: 314)
  Prédit: ' ='
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' =' → logprob: -0.7039873003959656
    2. '=' → logprob: -0.8289873003959656
    3. '[' → logprob: -2.7039873600006104
    4. '_' → logprob: -6.578987121582031
    5. '.' → logprob: -8.203987121582031
    6. 's' → logprob: -9.703987121582031
    7. '[:]' → logprob: -9.828987121582031
    8. ')' → logprob: -10.078987121582031
    9. '[]' → logprob: -10.078987121582031
    10. '=[]' → logprob: -10.828987121582031

Token 32: ' list' (ID: 1562)
  Prédit: 'list'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'list' → logprob: -0.7992671728134155
    2. ' list' → logprob: -1.0492671728134155
    3. '[]' → logprob: -2.424267292022705
    4. '[' → logprob: -3.424267292022705
    5. ' [' → logprob: -3.424267292022705
    6. '[list' → logprob: -3.924267292022705
    7. ' []' → logprob: -4.174267292022705
    8. '[input' → logprob: -4.674267292022705
    9. 'input' → logprob: -6.674267292022705
    10. '[int' → logprob: -7.799267292022705

Token 33: '(map' (ID: 16946)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(' → logprob: -0.008275307714939117
    2. '(map' → logprob: -5.258275508880615
    3. '(int' → logprob: -6.633275508880615
    4. '(range' → logprob: -6.883275508880615
    5. '(input' → logprob: -7.508275508880615
    6. '()' → logprob: -9.633275032043457
    7. '(

' → logprob: -10.508275032043457
    8. '(
' → logprob: -11.383275032043457
    9. '(np' → logprob: -12.258275032043457
    10. '(height' → logprob: -12.633275032043457

Token 34: '(int' (ID: 2742)
  Prédit: '(int'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(int' → logprob: -0.048623356968164444
    2. '(' → logprob: -3.0486233234405518
    3. '(
' → logprob: -10.548623085021973
    4. '(str' → logprob: -12.298623085021973
    5. 'int' → logprob: -13.673623085021973
    6. '(

' → logprob: -13.798623085021973
    7. '(height' → logprob: -14.298623085021973
    8. '<int' → logprob: -14.298623085021973
    9. '(len' → logprob: -15.173623085021973
    10. ')' → logprob: -15.173623085021973

Token 35: ',' (ID: 11)
  Prédit: '(input'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(input' → logprob: -0.007146418560296297
    2. '(' → logprob: -5.38214635848999
    3. ',input' → logprob: -6.25714635848999
    4. 'input' → logprob: -7.50714635848999
    5. ',' → logprob: -10.257146835327148
    6. ' (' → logprob: -11.882146835327148
    7. ')' → logprob: -12.257146835327148
    8. ' input' → logprob: -12.632146835327148
    9. '(
' → logprob: -13.382146835327148
    10. ' ,' → logprob: -13.632146835327148

Token 36: ' input' (ID: 3422)
  Prédit: 'input'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'input' → logprob: -0.011077526025474072
    2. ' input' → logprob: -4.511077404022217
    3. '(input' → logprob: -10.761077880859375
    4. ')' → logprob: -12.511077880859375
    5. ',input' → logprob: -12.761077880859375
    6. '	input' → logprob: -14.261077880859375
    7. '=input' → logprob: -14.386077880859375
    8. '))' → logprob: -15.386077880859375
    9. ' ' → logprob: -16.011077880859375
    10. '(' → logprob: -16.386077880859375

Token 37: '().' (ID: 1454)
  Prédit: '().'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '().' → logprob: -0.0020092912018299103
    2. '()' → logprob: -6.502009391784668
    3. '()))' → logprob: -7.877009391784668
    4. '())' → logprob: -9.127009391784668
    5. '()));' → logprob: -11.877009391784668
    6. '())))' → logprob: -12.627009391784668
    7. ')' → logprob: -13.252009391784668
    8. '()>' → logprob: -13.377009391784668
    9. '(' → logprob: -13.752009391784668
    10. '))' → logprob: -13.877009391784668

Token 38: 'split' (ID: 13627)
  Prédit: 'split'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'split' → logprob: -0.00012570773833431304
    2. 'strip' → logprob: -9.000125885009766
    3. ' split' → logprob: -13.625125885009766
    4. 'rstrip' → logprob: -14.000125885009766
    5. '(split' → logprob: -15.500125885009766
    6. '.split' → logprob: -17.250125885009766
    7. ')' → logprob: -18.125125885009766
    8. 'spl' → logprob: -18.750125885009766
    9. 'read' → logprob: -19.000125885009766
    10. ' strip' → logprob: -20.875125885009766

Token 39: '()))
' (ID: 24521)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ')' → logprob: -1.0460731983184814
    2. '))' → logprob: -1.0460731983184814
    3. '()))' → logprob: -1.5460731983184814
    4. '())' → logprob: -2.5460731983184814
    5. '()' → logprob: -5.546072959899902
    6. '(' → logprob: -6.296072959899902
    7. ')))' → logprob: -9.796072959899902
    8. '()));' → logprob: -11.046072959899902
    9. '),' → logprob: -11.671072959899902
    10. ')>' → logprob: -11.796072959899902

Token 40: '#' (ID: 2)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')' → logprob: -0.9869533777236938
    2. '.' → logprob: -1.4869533777236938
    3. '#' → logprob: -2.1119532585144043
    4. '<|end|>' → logprob: -3.1119532585144043
    5. '[' → logprob: -3.2369532585144043
    6. ' ' → logprob: -3.3619532585144043
    7. ' 
' → logprob: -3.6119532585144043
    8. '
' → logprob: -3.7369532585144043
    9. '\n' → logprob: -4.236953258514404
    10. '=' → logprob: -4.486953258514404

Token 41: ' Ou' (ID: 33134)
  Prédit: ' heights'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' heights' → logprob: -0.7683546543121338
    2. 'he' → logprob: -0.8933546543121338
    3. 'for' → logprob: -3.018354654312134
    4. 's' → logprob: -4.143354415893555
    5. ' for' → logprob: -4.268354415893555
    6. 'h' → logprob: -4.393354415893555
    7. ' ' → logprob: -4.893354415893555
    8. '#' → logprob: -5.143354415893555
    9. ' 
' → logprob: -5.268354415893555
    10. 'if' → logprob: -5.768354415893555

Token 42: 'aih' (ID: 150275)
  Prédit: 'i'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'i' → logprob: -0.0948205217719078
    2. 't' → logprob: -2.594820499420166
    3. '```' → logprob: -5.719820499420166
    4. 'is' → logprob: -6.094820499420166
    5. 'r' → logprob: -6.219820499420166
    6. 'tre' → logprob: -6.469820499420166
    7. 'f' → logprob: -7.094820499420166
    8. 'if' → logprob: -7.219820499420166
    9. '``' → logprob: -7.594820499420166
    10. 'p' → logprob: -7.844820499420166

Token 43: ',' (ID: 11)
  Prédit: 'he'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'he' → logprob: -1.047130823135376
    2. ' heights' → logprob: -1.297130823135376
    3. ',' → logprob: -1.422130823135376
    4. ')' → logprob: -4.172130584716797
    5. '<|end|>' → logprob: -4.172130584716797
    6. '.' → logprob: -4.297130584716797
    7. 'for' → logprob: -4.297130584716797
    8. 'h' → logprob: -4.547130584716797
    9. 'n' → logprob: -4.672130584716797
    10. ' for' → logprob: -4.797130584716797

Token 44: ' pas' (ID: 2173)
  Prédit: ' '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' ' → logprob: -0.8596375584602356
    2. ' on' → logprob: -1.7346374988555908
    3. ' c' → logprob: -1.8596374988555908
    4. ' heights' → logprob: -1.9846374988555908
    5. ' k' → logprob: -3.859637498855591
    6. ' len' → logprob: -4.10963773727417
    7. ' ' → logprob: -4.23463773727417
    8. ' je' → logprob: -4.23463773727417
    9. 'he' → logprob: -5.48463773727417
    10. '  ' → logprob: -5.73463773727417

Token 45: ' le' (ID: 505)
  Prédit: 'de'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'de' → logprob: -0.7850872874259949
    2. ' de' → logprob: -1.0350873470306396
    3. ' question' → logprob: -2.5350873470306396
    4. 'question' → logprob: -4.0350871086120605
    5. ' mal' → logprob: -4.2850871086120605
    6. ' d' → logprob: -4.6600871086120605
    7. 'que' → logprob: -4.7850871086120605
    8. ' grave' → logprob: -4.9100871086120605
    9. ' ' → logprob: -5.0350871086120605
    10. 'grave' → logprob: -5.1600871086120605

Token 46: ' plus' (ID: 2932)
  Prédit: 'temps'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'temps' → logprob: -0.011621476151049137
    2. 'd' → logprob: -5.636621475219727
    3. 'bon' → logprob: -5.886621475219727
    4. 'plus' → logprob: -6.636621475219727
    5. 'time' → logprob: -6.761621475219727
    6. 'pe' → logprob: -8.011621475219727
    7. ' temps' → logprob: -8.136621475219727
    8. 'me' → logprob: -8.386621475219727
    9. 'temp' → logprob: -8.636621475219727
    10. 'r' → logprob: -8.886621475219727

Token 47: ' efficace' (ID: 54338)
  Prédit: 'simple'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'simple' → logprob: -1.7777469158172607
    2. ' simple' → logprob: -2.0277469158172607
    3. 'fac' → logprob: -2.4027469158172607
    4. '```' → logprob: -2.6527469158172607
    5. 'mal' → logprob: -2.7777469158172607
    6. 'f' → logprob: -2.9027469158172607
    7. 'eff' → logprob: -2.9027469158172607
    8. 'efficient' → logprob: -3.5277469158172607
    9. 'optimal' → logprob: -3.5277469158172607
    10. ' efficace' → logprob: -3.6527469158172607

Token 48: ' mais' (ID: 2899)
  Prédit: 'he'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'he' → logprob: -0.1618887186050415
    2. ',' → logprob: -2.661888599395752
    3. 'for' → logprob: -2.911888599395752
    4. ' heights' → logprob: -4.661888599395752
    5. 'sorted' → logprob: -5.411888599395752
    6. ',
' → logprob: -6.161888599395752
    7. '
' → logprob: -6.536888599395752
    8. '.' → logprob: -7.161888599395752
    9. ' for' → logprob: -7.161888599395752
    10. '#' → logprob: -7.286888599395752

Token 49: ' tant' (ID: 16235)
  Prédit: ' c'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' c' → logprob: -1.501068353652954
    2. 'ça' → logprob: -1.501068353652954
    3. ' on' → logprob: -1.626068353652954
    4. ' ça' → logprob: -2.251068353652954
    5. 'c' → logprob: -2.876068353652954
    6. 'bon' → logprob: -3.376068353652954
    7. '```' → logprob: -3.376068353652954
    8. ' bon' → logprob: -3.501068353652954
    9. 'cela' → logprob: -3.501068353652954
    10. 'on' → logprob: -3.751068353652954

Token 50: ' pis' (ID: 19525)
  Prédit: 'pis'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'pis' → logprob: -0.25595638155937195
    2. 'p' → logprob: -2.0059564113616943
    3. 'qu' → logprob: -3.1309564113616943
    4. 'que' → logprob: -3.2559564113616943
    5. ' pis' → logprob: -6.255956172943115
    6. 'pi' → logprob: -6.255956172943115
    7. ' ' → logprob: -6.255956172943115
    8. 'm' → logprob: -7.130956172943115
    9. ' mieux' → logprob: -7.630956172943115
    10. ' ' → logprob: -8.130956649780273

Token 51: '.

' (ID: 364)
  Prédit: 'he'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'he' → logprob: -0.05612492933869362
    2. 'for' → logprob: -3.9311249256134033
    3. '
' → logprob: -4.431125164031982
    4. ' heights' → logprob: -4.931125164031982
    5. ' 
' → logprob: -5.181125164031982
    6. '' → logprob: -6.181125164031982
    7. '.' → logprob: -6.556125164031982
    8. ' for' → logprob: -6.806125164031982
    9. '```' → logprob: -6.931125164031982
    10. '#' → logprob: -7.056125164031982

Token 52: 'if' (ID: 366)
  Prédit: 'he'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'he' → logprob: -0.011536873877048492
    2. 'for' → logprob: -4.636537075042725
    3. 'sorted' → logprob: -7.511537075042725
    4. 'h' → logprob: -8.386536598205566
    5. 'height' → logprob: -8.511536598205566
    6. 'if' → logprob: -8.886536598205566
    7. 'dp' → logprob: -9.261536598205566
    8. 'i' → logprob: -10.011536598205566
    9. 'result' → logprob: -10.261536598205566
    10. 'res' → logprob: -10.261536598205566

Token 53: ' k' (ID: 372)
  Prédit: ' k'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' k' → logprob: -0.030227916315197945
    2. 'k' → logprob: -4.280228137969971
    3. ' n' → logprob: -4.405228137969971
    4. ' ' → logprob: -6.280228137969971
    5. ' heights' → logprob: -7.405228137969971
    6. ' len' → logprob: -7.530228137969971
    7. ' max' → logprob: -8.405227661132812
    8. 'n' → logprob: -8.405227661132812
    9. ' ' → logprob: -10.405227661132812
    10. ' (' → logprob: -10.530227661132812

Token 54: ' >=' (ID: 5064)
  Prédit: ' >'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' >' → logprob: -0.8494964241981506
    2. ' ==' → logprob: -1.7244963645935059
    3. ' <=' → logprob: -1.8494963645935059
    4. ' <' → logprob: -2.724496364593506
    5. ' >=' → logprob: -2.849496364593506
    6. '>' → logprob: -2.974496364593506
    7. '==' → logprob: -3.599496364593506
    8. '<=' → logprob: -4.474496364593506
    9. '<' → logprob: -5.099496364593506
    10. '>=' → logprob: -5.099496364593506

Token 55: ' n' (ID: 297)
  Prédit: 'n'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'n' → logprob: -0.02259383723139763
    2. 'he' → logprob: -4.897593975067139
    3. 'len' → logprob: -5.147593975067139
    4. '1' → logprob: -5.397593975067139
    5. 'max' → logprob: -6.022593975067139
    6. ' n' → logprob: -6.647593975067139
    7. '2' → logprob: -8.02259349822998
    8. '100' → logprob: -9.14759349822998
    9. '3' → logprob: -9.89759349822998
    10. ' ' → logprob: -10.02259349822998

Token 56: ':
' (ID: 734)
  Prédit: ':'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ':' → logprob: -0.0048328572884202
    2. ' :' → logprob: -5.379832744598389
    3. ':
' → logprob: -8.754833221435547
    4. '-' → logprob: -10.379833221435547
    5. ' or' → logprob: -12.254833221435547
    6. ':return' → logprob: -12.504833221435547
    7. ' :
' → logprob: -12.629833221435547
    8. ' -' → logprob: -12.879833221435547
    9. '):' → logprob: -13.254833221435547
    10. ' and' → logprob: -13.504833221435547

Token 57: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.282428115606308
    2. 'print' → logprob: -2.032428026199341
    3. ':' → logprob: -2.657428026199341
    4. ' print' → logprob: -3.532428026199341
    5. ':
' → logprob: -4.90742826461792
    6. '
' → logprob: -5.65742826461792
    7. ' ' → logprob: -6.90742826461792
    8. '    
' → logprob: -7.15742826461792
    9. '0' → logprob: -7.28242826461792
    10. '	print' → logprob: -7.53242826461792

Token 58: ' res' (ID: 694)
  Prédit: 'print'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'print' → logprob: -0.17349568009376526
    2. ' print' → logprob: -1.9234956502914429
    3. '   ' → logprob: -4.423495769500732
    4. '0' → logprob: -8.173495292663574
    5. '
' → logprob: -8.548495292663574
    6. ' ' → logprob: -8.548495292663574
    7. '    
' → logprob: -9.298495292663574
    8. '    ' → logprob: -9.548495292663574
    9. ' heights' → logprob: -9.673495292663574
    10. 'height' → logprob: -10.610995292663574

Token 59: ' =' (ID: 314)
  Prédit: 'ult'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'ult' → logprob: -0.42233243584632874
    2. ' =' → logprob: -1.1723324060440063
    3. '=' → logprob: -3.672332525253296
    4. 'ults' → logprob: -4.797332286834717
    5. 'ultat' → logprob: -8.297332763671875
    6. 't' → logprob: -8.422332763671875
    7. ' ult' → logprob: -8.672332763671875
    8. 'ul' → logprob: -8.922332763671875
    9. 'u' → logprob: -8.922332763671875
    10. '   ' → logprob: -9.672332763671875

Token 60: ' ' (ID: 220)
  Prédit: 'max'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'max' → logprob: -0.15438947081565857
    2. '0' → logprob: -2.7793893814086914
    3. 'min' → logprob: -3.4043893814086914
    4. 'sum' → logprob: -3.5293893814086914
    5. ' max' → logprob: -5.029389381408691
    6. 'he' → logprob: -5.154389381408691
    7. '1' → logprob: -6.154389381408691
    8. ' ' → logprob: -6.779389381408691
    9. 'n' → logprob: -7.279389381408691
    10. 'len' → logprob: -7.654389381408691

Token 61: '0' (ID: 15)
  Prédit: 'max'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'max' → logprob: -0.21666128933429718
    2. '0' → logprob: -2.466661214828491
    3. 'min' → logprob: -3.216661214828491
    4. 'he' → logprob: -3.591661214828491
    5. 'sum' → logprob: -3.591661214828491
    6. 'n' → logprob: -4.96666145324707
    7. '1' → logprob: -5.46666145324707
    8. '-' → logprob: -6.84166145324707
    9. 'len' → logprob: -7.34166145324707
    10. 'height' → logprob: -7.84166145324707

Token 62: ' ' (ID: 220)
  Prédit: '
'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '
' → logprob: -0.37527790665626526
    2. 'else' → logprob: -1.3752778768539429
    3. 'elif' → logprob: -3.7502779960632324
    4. '\n' → logprob: -4.125277996063232
    5. ' else' → logprob: -4.500277996063232
    6. '
' → logprob: -5.875277996063232
    7. '<|end|>' → logprob: -6.250277996063232
    8. '    
' → logprob: -6.375277996063232
    9. '

' → logprob: -7.375277996063232
    10. '' → logprob: -7.500277996063232

Token 63: ' #' (ID: 1069)
  Prédit: 'else'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'else' → logprob: -0.4012391269207001
    2. '
' → logprob: -1.1512391567230225
    3. '\n' → logprob: -5.151238918304443
    4. 'elif' → logprob: -5.651238918304443
    5. ' else' → logprob: -6.026238918304443
    6. '
' → logprob: -6.776238918304443
    7. '    
' → logprob: -7.776238918304443
    8. 'print' → logprob: -8.151239395141602
    9. '' → logprob: -8.651239395141602
    10. ' 
' → logprob: -9.151239395141602

Token 64: ' Tous' (ID: 64900)
  Prédit: 'print'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'print' → logprob: -0.3102395832538605
    2. 'else' → logprob: -1.685239553451538
    3. '
' → logprob: -3.685239553451538
    4. ' else' → logprob: -4.060239791870117
    5. ' print' → logprob: -4.310239791870117
    6. 'elif' → logprob: -4.310239791870117
    7. 'for' → logprob: -5.060239791870117
    8. '\n' → logprob: -5.935239791870117
    9. ' for' → logprob: -6.935239791870117
    10. ' ' → logprob: -7.810239791870117

Token 65: ' en' (ID: 469)
  Prédit: 'les'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'les' → logprob: -0.2869358956813812
    2. ' les' → logprob: -1.5369359254837036
    3. 'dans' → logprob: -4.786935806274414
    4. ' heights' → logprob: -5.161935806274414
    5. 's' → logprob: -5.661935806274414
    6. 'ensemble' → logprob: -5.661935806274414
    7. 'ser' → logprob: -5.786935806274414
    8. 'height' → logprob: -6.786935806274414
    9. ' dans' → logprob: -7.036935806274414
    10. ' ensemble' → logprob: -7.661935806274414

Token 66: 'lev' (ID: 3944)
  Prédit: 'semble'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'semble' → logprob: -0.036418721079826355
    2. 'place' → logprob: -4.786418914794922
    3. 'sil' → logprob: -5.786418914794922
    4. 'ensemble' → logprob: -5.911418914794922
    5. 'pile' → logprob: -5.911418914794922
    6. 'suite' → logprob: -6.286418914794922
    7. 'sembl' → logprob: -6.411418914794922
    8. 'moins' → logprob: -7.161418914794922
    9. 'tr' → logprob: -7.286418914794922
    10. '0' → logprob: -7.411418914794922

Token 67: 'és' (ID: 1756)
  Prédit: 'és'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'és' → logprob: -0.042720530182123184
    2. 'er' → logprob: -3.4177205562591553
    3. 'es' → logprob: -5.417720317840576
    4. 'é' → logprob: -5.542720317840576
    5. 'ées' → logprob: -8.917720794677734
    6. '```' → logprob: -9.042720794677734
    7. 'ers' → logprob: -9.417720794677734
    8. 'e' → logprob: -9.542720794677734
    9. 'ès' → logprob: -9.542720794677734
    10. 'ables' → logprob: -9.792720794677734

Token 68: ',' (ID: 11)
  Prédit: '
'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '
' → logprob: -0.3639931380748749
    2. 'else' → logprob: -1.4889931678771973
    3. '\n' → logprob: -3.4889931678771973
    4. ' else' → logprob: -3.8639931678771973
    5. '<|end|>' → logprob: -4.238993167877197
    6. 'elif' → logprob: -5.613993167877197
    7. '
' → logprob: -5.863993167877197
    8. '.' → logprob: -6.488993167877197
    9. '    
' → logprob: -6.613993167877197
    10. '' → logprob: -6.988993167877197

Token 69: ' donc' (ID: 14206)
  Prédit: 'else'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'else' → logprob: -0.10314668715000153
    2. ' else' → logprob: -2.72814679145813
    3. 'elif' → logprob: -3.72814679145813
    4. 'print' → logprob: -5.103146553039551
    5. '
' → logprob: -6.853146553039551
    6. ' print' → logprob: -8.35314655303955
    7. ' elif' → logprob: -8.60314655303955
    8. 'except' → logprob: -8.97814655303955
    9. ' sauf' → logprob: -9.47814655303955
    10. '   ' → logprob: -9.47814655303955

Token 70: ' ' (ID: 220)
  Prédit: 'auc'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'auc' → logprob: -1.3823881149291992
    2. ' aucun' → logprob: -1.7573881149291992
    3. '0' → logprob: -2.257388114929199
    4. ' ' → logprob: -2.257388114929199
    5. ' rien' → logprob: -2.382388114929199
    6. ' la' → logprob: -2.632388114929199
    7. ' le' → logprob: -2.882388114929199
    8. ' aucune' → logprob: -3.007388114929199
    9. ' les' → logprob: -4.007388114929199
    10. 'au' → logprob: -4.257388114929199

Token 71: '0' (ID: 15)
  Prédit: 'auc'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'auc' → logprob: -0.5673418045043945
    2. '0' → logprob: -0.9423418045043945
    3. 'r' → logprob: -3.8173418045043945
    4. 'pas' → logprob: -5.0673418045043945
    5. ' ' → logprob: -6.0673418045043945
    6. 'reste' → logprob: -6.4423418045043945
    7. ' aucun' → logprob: -6.8173418045043945
    8. 'il' → logprob: -7.0673418045043945
    9. 'le' → logprob: -7.0673418045043945
    10. 'height' → logprob: -7.4423418045043945

Token 72: '
' (ID: 198)
  Prédit: 'else'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'else' → logprob: -0.1526392251253128
    2. '
' → logprob: -2.652639150619507
    3. ' else' → logprob: -2.902639150619507
    4. 'elif' → logprob: -5.152639389038086
    5. '\n' → logprob: -5.777639389038086
    6. '    
' → logprob: -6.152639389038086
    7. '
' → logprob: -6.277639389038086
    8. '<|end|>' → logprob: -6.902639389038086
    9. '.' → logprob: -7.402639389038086
    10. '' → logprob: -8.652639389038086

Token 73: 'else' (ID: 2807)
  Prédit: 'else'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'else' → logprob: -0.0023681551683694124
    2. 'elif' → logprob: -6.377367973327637
    3. 'print' → logprob: -7.752367973327637
    4. ' else' → logprob: -8.377367973327637
    5. 'for' → logprob: -13.002367973327637
    6. '   ' → logprob: -13.752367973327637
    7. ')' → logprob: -14.377367973327637
    8. '
' → logprob: -15.252367973327637
    9. ' print' → logprob: -15.377367973327637
    10. '    
' → logprob: -15.752367973327637

Token 74: ':
' (ID: 734)
  Prédit: ':'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ':' → logprob: -0.0008245145436376333
    2. ':
' → logprob: -7.500824451446533
    3. ' :' → logprob: -8.250824928283691
    4. ',' → logprob: -13.000824928283691
    5. ':

' → logprob: -13.375824928283691
    6. ' :
' → logprob: -13.375824928283691
    7. ':def' → logprob: -13.875824928283691
    8. '<|end|>' → logprob: -14.125824928283691
    9. '
' → logprob: -14.375824928283691
    10. ':
' → logprob: -14.500824928283691

Token 75: '   ' (ID: 271)
  Prédit: ' heights'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' heights' → logprob: -0.2603607475757599
    2. '   ' → logprob: -2.7603607177734375
    3. ' res' → logprob: -3.5103607177734375
    4. '    
' → logprob: -3.7603607177734375
    5. 'he' → logprob: -3.7603607177734375
    6. ' sorted' → logprob: -4.3853607177734375
    7. 'res' → logprob: -4.6353607177734375
    8. ' min' → logprob: -4.6353607177734375
    9. ' max' → logprob: -4.8853607177734375
    10. 'min' → logprob: -5.5103607177734375

Token 76: ' heights' (ID: 57359)
  Prédit: 'he'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'he' → logprob: -0.28770267963409424
    2. 'dp' → logprob: -2.4127025604248047
    3. 'res' → logprob: -3.1627025604248047
    4. 'max' → logprob: -4.037702560424805
    5. 'sorted' → logprob: -4.162702560424805
    6. '   ' → logprob: -4.662702560424805
    7. 'min' → logprob: -4.662702560424805
    8. ' heights' → logprob: -4.787702560424805
    9. '#' → logprob: -5.162702560424805
    10. 'diff' → logprob: -5.412702560424805

Token 77: '.sort' (ID: 19551)
  Prédit: '.sort'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '.sort' → logprob: -0.004960612393915653
    2. '=' → logprob: -5.504960536956787
    3. '.' → logprob: -7.504960536956787
    4. 'sort' → logprob: -8.879961013793945
    5. ' =' → logprob: -9.004961013793945
    6. '_sorted' → logprob: -9.879961013793945
    7. 'sorted' → logprob: -11.254961013793945
    8. '.sorted' → logprob: -13.754961013793945
    9. 's' → logprob: -13.879961013793945
    10. '_sort' → logprob: -14.254961013793945

Token 78: '()
' (ID: 1234)
  Prédit: '()'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '()' → logprob: -0.003459775587543845
    2. '()
' → logprob: -5.753459930419922
    3. '(reverse' → logprob: -8.753459930419922
    4. '(' → logprob: -9.628459930419922
    5. '()

' → logprob: -10.503459930419922
    6. ')' → logprob: -11.128459930419922
    7. '[' → logprob: -12.378459930419922
    8. '()
' → logprob: -12.628459930419922
    9. '(
' → logprob: -12.878459930419922
    10. '()[' → logprob: -13.378459930419922

Token 79: '   ' (ID: 271)
  Prédit: '
'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '
' → logprob: -1.0081427097320557
    2. 'res' → logprob: -1.1331427097320557
    3. '    
' → logprob: -2.1331427097320557
    4. '   ' → logprob: -2.7581427097320557
    5. ' 
' → logprob: -3.2581427097320557
    6. '[' → logprob: -3.3831427097320557
    7. '    ' → logprob: -5.008142471313477
    8. '     
' → logprob: -5.008142471313477
    9. 'diff' → logprob: -5.633142471313477
    10. '  
' → logprob: -5.633142471313477

Token 80: ' #' (ID: 1069)
  Prédit: 'res'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'res' → logprob: -0.009776752442121506
    2. '   ' → logprob: -6.134776592254639
    3. 'diff' → logprob: -6.384776592254639
    4. 'he' → logprob: -7.134776592254639
    5. 'i' → logprob: -7.259776592254639
    6. 'count' → logprob: -7.384776592254639
    7. 'sum' → logprob: -7.384776592254639
    8. 'max' → logprob: -7.509776592254639
    9. 'prefix' → logprob: -8.259777069091797
    10. 'remove' → logprob: -8.384777069091797

Token 81: ' On' (ID: 2160)
  Prédit: ' res'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' res' → logprob: -0.174398273229599
    2. 'res' → logprob: -1.9243983030319214
    3. '   ' → logprob: -5.174398422241211
    4. 'diff' → logprob: -6.549398422241211
    5. ' i' → logprob: -7.424398422241211
    6. ' window' → logprob: -7.674398422241211
    7. ' diff' → logprob: -8.049398422241211
    8. ' max' → logprob: -8.049398422241211
    9. 'rem' → logprob: -8.174398422241211
    10. 'he' → logprob: -8.174398422241211

Token 82: ' prend' (ID: 37463)
  Prédit: ' va'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' va' → logprob: -2.0925424098968506
    2. 'res' → logprob: -2.7175424098968506
    3. 'supp' → logprob: -2.8425424098968506
    4. 's' → logprob: -2.9675424098968506
    5. '_' → logprob: -3.2175424098968506
    6. ' ' → logprob: -3.3425424098968506
    7. ' =' → logprob: -3.4675424098968506
    8. 'va' → logprob: -3.5925424098968506
    9. 'max' → logprob: -3.5925424098968506
    10. 'r' → logprob: -3.7175424098968506

Token 83: ' le' (ID: 505)
  Prédit: ' k'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' k' → logprob: -0.6648886203765869
    2. 'k' → logprob: -1.164888620376587
    3. ' les' → logprob: -3.039888620376587
    4. 'les' → logprob: -3.164888620376587
    5. 'he' → logprob: -3.914888620376587
    6. ' heights' → logprob: -4.164888381958008
    7. ' la' → logprob: -4.664888381958008
    8. 'the' → logprob: -4.789888381958008
    9. 'le' → logprob: -4.914888381958008
    10. '<|end|>' → logprob: -5.164888381958008

Token 84: ' début' (ID: 29589)
  Prédit: 'k'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'k' → logprob: -0.657711386680603
    2. 'n' → logprob: -1.657711386680603
    3. ' k' → logprob: -2.1577115058898926
    4. ' n' → logprob: -2.4077115058898926
    5. 's' → logprob: -2.7827115058898926
    6. ' sum' → logprob: -5.032711505889893
    7. 'sum' → logprob: -5.532711505889893
    8. '[n' → logprob: -6.157711505889893
    9. ' plus' → logprob: -6.282711505889893
    10. ' top' → logprob: -6.532711505889893

Token 85: '...' (ID: 1008)
  Prédit: 'k'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'k' → logprob: -0.44973233342170715
    2. ' k' → logprob: -2.8247323036193848
    3. '+' → logprob: -2.9497323036193848
    4. 'n' → logprob: -3.0747323036193848
    5. ' +' → logprob: -3.0747323036193848
    6. ',' → logprob: -3.3247323036193848
    7. '(' → logprob: -3.9497323036193848
    8. ' n' → logprob: -4.074732303619385
    9. '+k' → logprob: -4.324732303619385
    10. ' and' → logprob: -4.574732303619385

Token 86: ' c' (ID: 274)
  Prédit: 'k'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'k' → logprob: -1.740712285041809
    2. 'he' → logprob: -1.740712285041809
    3. '<|end|>' → logprob: -1.990712285041809
    4. '   ' → logprob: -2.3657121658325195
    5. 'n' → logprob: -2.4907121658325195
    6. 'et' → logprob: -2.8657121658325195
    7. '...' → logprob: -3.2407121658325195
    8. ',' → logprob: -3.4907121658325195
    9. 'for' → logprob: -3.4907121658325195
    10. 's' → logprob: -3.6157121658325195

Token 87: ''est' (ID: 6616)
  Prédit: 'on'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'on' → logprob: -1.6541656255722046
    2. 'ont' → logprob: -2.154165744781494
    3. '+' → logprob: -2.529165744781494
    4. 'om' → logprob: -2.779165744781494
    5. ' =' → logprob: -2.904165744781494
    6. 'omme' → logprob: -3.029165744781494
    7. 'e' → logprob: -3.154165744781494
    8. 'ho' → logprob: -3.279165744781494
    9. 'est' → logprob: -3.529165744781494
    10. '=' → logprob: -3.529165744781494

Token 88: ' bizarre' (ID: 61150)
  Prédit: 'le'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'le' → logprob: -0.9917150735855103
    2. 'la' → logprob: -1.4917150735855103
    3. 'les' → logprob: -2.6167149543762207
    4. 'k' → logprob: -2.7417149543762207
    5. 'tout' → logprob: -2.7417149543762207
    6. ' k' → logprob: -3.6167149543762207
    7. 'n' → logprob: -3.8667149543762207
    8. ' le' → logprob: -4.116714954376221
    9. 'l' → logprob: -4.241714954376221
    10. 'plus' → logprob: -4.366714954376221

Token 89: ' mais' (ID: 2899)
  Prédit: ','
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ',' → logprob: -0.251630574464798
    2. ' ,' → logprob: -3.0016305446624756
    3. 'et' → logprob: -3.2516305446624756
    4. '.' → logprob: -3.5016305446624756
    5. 'he' → logprob: -4.251630783081055
    6. ' et' → logprob: -4.501630783081055
    7. '<|end|>' → logprob: -4.626630783081055
    8. ' ' → logprob: -4.876630783081055
    9. '  ' → logprob: -4.876630783081055
    10. 's' → logprob: -5.126630783081055

Token 90: ' c' (ID: 274)
  Prédit: ' c'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' c' → logprob: -0.2953127324581146
    2. ' on' → logprob: -2.4203126430511475
    3. ' logique' → logprob: -2.9203126430511475
    4. 'c' → logprob: -3.1703126430511475
    5. ' ça' → logprob: -3.6703126430511475
    6. 'on' → logprob: -4.545312881469727
    7. '```' → logprob: -5.170312881469727
    8. 'log' → logprob: -5.920312881469727
    9. 'ça' → logprob: -6.045312881469727
    10. ' le' → logprob: -6.420312881469727

Token 91: ''est' (ID: 6616)
  Prédit: ''est'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ''est' → logprob: -0.2617705762386322
    2. ''' → logprob: -2.886770486831665
    3. 'omme' → logprob: -3.261770486831665
    4. 'est' → logprob: -3.386770486831665
    5. 'e' → logprob: -3.386770486831665
    6. 'ar' → logprob: -4.011770725250244
    7. 'a' → logprob: -4.386770725250244
    8. 'ela' → logprob: -4.511770725250244
    9. 'on' → logprob: -5.136770725250244
    10. 'al' → logprob: -5.511770725250244

Token 92: ' comme' (ID: 7971)
  Prédit: 'le'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'le' → logprob: -0.6256574392318726
    2. 'la' → logprob: -2.125657558441162
    3. 'log' → logprob: -3.000657558441162
    4. 'l' → logprob: -3.500657558441162
    5. 'bien' → logprob: -3.625657558441162
    6. 'ce' → logprob: -3.875657558441162
    7. 'tout' → logprob: -3.875657558441162
    8. 'm' → logprob: -3.875657558441162
    9. ' le' → logprob: -4.000657558441162
    10. 'plus' → logprob: -4.250657558441162

Token 93: ' ça' (ID: 13590)
  Prédit: 'ça'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'ça' → logprob: -0.14716987311840057
    2. ' ça' → logprob: -2.147169828414917
    3. 'cela' → logprob: -4.147170066833496
    4. 'ç' → logprob: -6.022170066833496
    5. '   ' → logprob: -8.397170066833496
    6. ' ' → logprob: -8.397170066833496
    7. '```' → logprob: -8.522170066833496
    8. ' ç' → logprob: -8.647170066833496
    9. 'ca' → logprob: -8.647170066833496
    10. ' cela' → logprob: -8.897170066833496

Token 94: ' pour' (ID: 1930)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '   ' → logprob: -1.327805757522583
    2. '<|end|>' → logprob: -1.827805757522583
    3. '.' → logprob: -1.952805757522583
    4. 'res' → logprob: -2.077805757522583
    5. '    
' → logprob: -2.577805757522583
    6. '
' → logprob: -2.702805757522583
    7. '[' → logprob: -2.952805757522583
    8. ',' → logprob: -4.452805519104004
    9. ' 
' → logprob: -4.577805519104004
    10. '    ' → logprob: -4.577805519104004

Token 95: ' le' (ID: 505)
  Prédit: 'l'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'l' → logprob: -0.77500981092453
    2. 'le' → logprob: -1.1500098705291748
    3. 'avoir' → logprob: -3.025009870529175
    4. 'c' → logprob: -3.525009870529175
    5. 'maint' → logprob: -3.650009870529175
    6. ' l' → logprob: -4.400009632110596
    7. 'la' → logprob: -4.400009632110596
    8. 'pass' → logprob: -4.525009632110596
    9. 'les' → logprob: -4.650009632110596
    10. 'faire' → logprob: -4.900009632110596

Token 96: ' résultat' (ID: 62556)
  Prédit: 'moment'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'moment' → logprob: -0.28800079226493835
    2. 'k' → logprob: -2.1630008220672607
    3. ' moment' → logprob: -3.2880008220672607
    4. 'me' → logprob: -3.2880008220672607
    5. 'min' → logprob: -4.663000583648682
    6. 'res' → logprob: -5.038000583648682
    7. 'dé' → logprob: -5.163000583648682
    8. ' k' → logprob: -5.288000583648682
    9. 'mom' → logprob: -5.538000583648682
    10. 'code' → logprob: -5.788000583648682

Token 97: '
' (ID: 198)
  Prédit: 'res'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'res' → logprob: -0.9092757701873779
    2. '.' → logprob: -1.409275770187378
    3. '<|end|>' → logprob: -1.909275770187378
    4. '   ' → logprob: -2.409275770187378
    5. ' res' → logprob: -3.159275770187378
    6. '    
' → logprob: -4.284276008605957
    7. '<|end|>' → logprob: -4.534276008605957
    8. '[' → logprob: -4.784276008605957
    9. ',' → logprob: -5.284276008605957
    10. '    ' → logprob: -5.284276008605957

Token 98: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.709265410900116
    2. '
' → logprob: -1.4592654705047607
    3. 'res' → logprob: -1.7092654705047607
    4. '    
' → logprob: -3.2092654705047607
    5. ' res' → logprob: -4.084265232086182
    6. 'diff' → logprob: -4.584265232086182
    7. '<|end|>' → logprob: -4.709265232086182
    8. '[' → logprob: -5.709265232086182
    9. ' 
' → logprob: -5.834265232086182
    10. '  
' → logprob: -5.959265232086182

Token 99: ' res' (ID: 694)
  Prédit: 'res'
  Correct (stricte): False
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'res' (adapté à ' res') → logprob: -0.0026079986710101366
    2. '   ' → logprob: -6.252607822418213
    3. ' res' → logprob: -7.877607822418213
    4. 'he' → logprob: -8.252608299255371
    5. 'print' → logprob: -11.002608299255371
    6. '    
' → logprob: -11.377608299255371
    7. 'ress' → logprob: -13.127608299255371
    8. 'diff' → logprob: -13.502608299255371
    9. 'height' → logprob: -14.002608299255371
    10. '
' → logprob: -14.127608299255371

Token 100: ' =' (ID: 314)
  Prédit: ' ='
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' =' → logprob: -0.004629603587090969
    2. '=' → logprob: -5.379629611968994
    3. ' +=' → logprob: -11.629629135131836
    4. ' =
' → logprob: -15.129629135131836
    5. ' ' → logprob: -16.129629135131836
    6. ' ' → logprob: -16.754629135131836
    7. '+=' → logprob: -17.129629135131836
    8. '=len' → logprob: -17.129629135131836
    9. ' =
' → logprob: -17.379629135131836
    10. '=int' → logprob: -17.504629135131836

Token 101: ' ' (ID: 220)
  Prédit: 'he'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'he' → logprob: -0.48120853304862976
    2. ' heights' → logprob: -1.1062085628509521
    3. 'sum' → logprob: -3.481208562850952
    4. ' sum' → logprob: -4.106208324432373
    5. 'max' → logprob: -6.606208324432373
    6. ' max' → logprob: -7.231208324432373
    7. 'height' → logprob: -7.356208324432373
    8. ' he' → logprob: -7.981208324432373
    9. '   ' → logprob: -8.231208801269531
    10. 'min' → logprob: -8.731208801269531

Token 102: '0' (ID: 15)
  Prédit: 'sum'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'sum' → logprob: -0.3506186306476593
    2. 'he' → logprob: -1.350618600845337
    3. ' sum' → logprob: -3.600618600845337
    4. ' heights' → logprob: -5.350618839263916
    5. 'max' → logprob: -6.475618839263916
    6. 'n' → logprob: -7.100618839263916
    7. 'height' → logprob: -7.225618839263916
    8. 'k' → logprob: -7.350618839263916
    9. 'min' → logprob: -8.475618362426758
    10. 'abs' → logprob: -9.100618362426758

Token 103: '
' (ID: 198)
  Prédit: '
'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '
' → logprob: -0.001129498123191297
    2. '\n' → logprob: -8.251129150390625
    3. '   ' → logprob: -8.501129150390625
    4. '
' → logprob: -8.751129150390625
    5. '    
' → logprob: -8.876129150390625
    6. '

' → logprob: -9.251129150390625
    7. 'for' → logprob: -9.626129150390625
    8. '' → logprob: -9.751129150390625
    9. ' 
' → logprob: -10.001129150390625
    10. '  
' → logprob: -10.751129150390625

Token 104: '   ' (ID: 271)
  Prédit: '
'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '
' → logprob: -0.04262823238968849
    2. '   ' → logprob: -3.917628288269043
    3. 'for' → logprob: -5.042628288269043
    4. '+' → logprob: -5.417628288269043
    5. '    
' → logprob: -5.917628288269043
    6. ' for' → logprob: -6.167628288269043
    7. ' +' → logprob: -6.292628288269043
    8. '\n' → logprob: -6.667628288269043
    9. ' 
' → logprob: -7.167628288269043
    10. '    ' → logprob: -8.042628288269043

Token 105: ' for' (ID: 395)
  Prédit: 'for'
  Correct (stricte): False
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'for' (adapté à ' for') → logprob: -0.0030885895248502493
    2. '   ' → logprob: -6.628088474273682
    3. '
' → logprob: -6.753088474273682
    4. ' for' → logprob: -7.628088474273682
    5. 'i' → logprob: -9.37808895111084
    6. '    
' → logprob: -12.37808895111084
    7. '	for' → logprob: -12.50308895111084
    8. 'while' → logprob: -12.62808895111084
    9. 'res' → logprob: -12.87808895111084
    10. '
' → logprob: -13.50308895111084

Token 106: ' i' (ID: 575)
  Prédit: ' i'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' i' → logprob: -0.020583350211381912
    2. ' _' → logprob: -4.145583152770996
    3. 'i' → logprob: -5.770583152770996
    4. '_' → logprob: -7.020583152770996
    5. ' ' → logprob: -7.770583152770996
    6. '_i' → logprob: -9.520583152770996
    7. '	i' → logprob: -11.145583152770996
    8. ' ' → logprob: -12.020583152770996
    9. '  ' → logprob: -12.645583152770996
    10. '   ' → logprob: -12.770583152770996

Token 107: ' in' (ID: 306)
  Prédit: ' in'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' in' → logprob: -0.00820827204734087
    2. 'in' → logprob: -4.883208274841309
    3. ' ' → logprob: -7.883208274841309
    4. 'range' → logprob: -9.008208274841309
    5. '   ' → logprob: -10.758208274841309
    6. ',' → logprob: -10.758208274841309
    7. '  ' → logprob: -11.133208274841309
    8. ' range' → logprob: -11.883208274841309
    9. '(' → logprob: -12.133208274841309
    10. ')' → logprob: -12.508208274841309

Token 108: ' range' (ID: 3352)
  Prédit: 'range'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'range' → logprob: -0.029767265543341637
    2. ' range' → logprob: -3.5297672748565674
    3. '   ' → logprob: -11.529767036437988
    4. ' ' → logprob: -12.654767036437988
    5. '  ' → logprob: -13.154767036437988
    6. '(range' → logprob: -14.904767036437988
    7. '	range' → logprob: -14.904767036437988
    8. '    ' → logprob: -15.029767036437988
    9. 'rang' → logprob: -15.404767036437988
    10. '```' → logprob: -15.779767036437988

Token 109: '(n' (ID: 2406)
  Prédit: '(k'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(k' → logprob: -0.031968358904123306
    2. '(n' → logprob: -3.531968355178833
    3. '(' → logprob: -6.156968593597412
    4. ' (' → logprob: -10.156968116760254
    5. '(len' → logprob: -10.406968116760254
    6. '(s' → logprob: -11.781968116760254
    7. '(i' → logprob: -11.781968116760254
    8. 'k' → logprob: -12.531968116760254
    9. '(res' → logprob: -13.406968116760254
    10. '(m' → logprob: -13.531968116760254

Token 110: '-k' (ID: 10897)
  Prédit: '-k'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '-k' → logprob: -0.6101992726325989
    2. ' -' → logprob: -0.9851992726325989
    3. '-' → logprob: -2.485199213027954
    4. ')' → logprob: -10.735198974609375
    5. '):
' → logprob: -10.860198974609375
    6. '-n' → logprob: -10.985198974609375
    7. '):' → logprob: -12.235198974609375
    8. '-m' → logprob: -12.235198974609375
    9. ' ' → logprob: -12.485198974609375
    10. '   ' → logprob: -12.610198974609375

Token 111: '):
' (ID: 1883)
  Prédit: '):'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '):' → logprob: -0.28265127539634705
    2. '):
' → logprob: -1.6576513051986694
    3. '+' → logprob: -2.90765118598938
    4. '+i' → logprob: -8.5326509475708
    5. ' ):' → logprob: -8.6576509475708
    6. '-' → logprob: -8.6576509475708
    7. ' +' → logprob: -9.1576509475708
    8. '   ' → logprob: -9.5326509475708
    9. '+n' → logprob: -9.6576509475708
    10. '+k' → logprob: -9.9076509475708

Token 112: '       ' (ID: 309)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.22665584087371826
    2. 'res' → logprob: -1.9766558408737183
    3. ' res' → logprob: -2.851655960083008
    4. '       ' → logprob: -5.226655960083008
    5. ':' → logprob: -8.351655960083008
    6. '	res' → logprob: -8.351655960083008
    7. '+' → logprob: -8.476655960083008
    8. '  ' → logprob: -8.976655960083008
    9. '    
' → logprob: -9.601655960083008
    10. ' ' → logprob: -9.601655960083008

Token 113: ' res' (ID: 694)
  Prédit: 'res'
  Correct (stricte): False
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'res' (adapté à ' res') → logprob: -0.18148784339427948
    2. ' res' → logprob: -2.431487798690796
    3. '   ' → logprob: -2.556487798690796
    4. '       ' → logprob: -8.681488037109375
    5. '           ' → logprob: -8.806488037109375
    6. '	res' → logprob: -9.931488037109375
    7. ' ' → logprob: -10.181488037109375
    8. '  ' → logprob: -10.306488037109375
    9. '
' → logprob: -10.431488037109375
    10. 'ress' → logprob: -12.556488037109375

Token 114: ' +=' (ID: 2757)
  Prédit: ' +='
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' +=' → logprob: -0.6326829195022583
    2. '+=' → logprob: -0.7576829195022583
    3. '=' → logprob: -10.132682800292969
    4. ' =' → logprob: -11.007682800292969
    5. '+' → logprob: -11.757682800292969
    6. ']+=' → logprob: -12.007682800292969
    7. ' ' → logprob: -12.757682800292969
    8. '+=(' → logprob: -12.882682800292969
    9. ' -=' → logprob: -13.132682800292969
    10. '   ' → logprob: -13.132682800292969

Token 115: ' heights' (ID: 57359)
  Prédit: 'he'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'he' → logprob: -0.22572532296180725
    2. ' heights' → logprob: -1.6007252931594849
    3. 'height' → logprob: -9.100725173950195
    4. '   ' → logprob: -9.350725173950195
    5. 'abs' → logprob: -10.350725173950195
    6. '(' → logprob: -10.725725173950195
    7. ' he' → logprob: -11.100725173950195
    8. ' ' → logprob: -11.600725173950195
    9. ' (' → logprob: -11.725725173950195
    10. '  ' → logprob: -12.100725173950195

Token 116: '[i' (ID: 1768)
  Prédit: '[i'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '[i' → logprob: -1.4736459888808895e-05
    2. '[' → logprob: -11.250014305114746
    3. 'i' → logprob: -14.250014305114746
    4. ' [' → logprob: -15.375014305114746
    5. '   ' → logprob: -15.500014305114746
    6. '[k' → logprob: -15.875014305114746
    7. '[n' → logprob: -16.000015258789062
    8. '[
' → logprob: -16.625015258789062
    9. '```' → logprob: -16.625015258789062
    10. '
' → logprob: -17.125015258789062

Token 117: ']
' (ID: 1592)
  Prédit: ']'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ']' → logprob: -0.02157270349562168
    2. '])' → logprob: -3.8965725898742676
    3. ')' → logprob: -7.896572589874268
    4. ' ]' → logprob: -8.396573066711426
    5. '[' → logprob: -8.646573066711426
    6. ')]' → logprob: -8.771573066711426
    7. ']
' → logprob: -10.146573066711426
    8. '-' → logprob: -11.146573066711426
    9. '+' → logprob: -11.521573066711426
    10. ' ])' → logprob: -11.896573066711426

Token 118: '       ' (ID: 309)
  Prédit: 'print'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'print' → logprob: -0.0002214172709500417
    2. '
' → logprob: -8.625221252441406
    3. ' print' → logprob: -10.250221252441406
    4. '+' → logprob: -13.000221252441406
    5. '-print' → logprob: -13.625221252441406
    6. '
' → logprob: -14.500221252441406
    7. ' 
' → logprob: -14.875221252441406
    8. '    
' → logprob: -14.875221252441406
    9. ')' → logprob: -14.875221252441406
    10. '#print' → logprob: -15.125221252441406

Token 119: ' #' (ID: 1069)
  Prédit: 'print'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'print' → logprob: -0.00018041854491457343
    2. '
' → logprob: -9.0001802444458
    3. ' print' → logprob: -10.0001802444458
    4. '   ' → logprob: -12.2501802444458
    5. '    
' → logprob: -13.1251802444458
    6. '```' → logprob: -13.2501802444458
    7. '        
' → logprob: -14.0001802444458
    8. '
' → logprob: -14.7501802444458
    9. '  
' → logprob: -15.5001802444458
    10. '.print' → logprob: -15.5001802444458

Token 120: ' Pas' (ID: 18323)
  Prédit: 'print'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'print' → logprob: -0.0015943651087582111
    2. '<|end|>' → logprob: -7.001594543457031
    3. '
' → logprob: -8.251594543457031
    4. ' print' → logprob: -8.626594543457031
    5. ')' → logprob: -9.626594543457031
    6. '\n' → logprob: -10.376594543457031
    7. '```' → logprob: -10.376594543457031
    8. '#' → logprob: -10.501594543457031
    9. '#print' → logprob: -10.626594543457031
    10. '<|end|>' → logprob: -11.001594543457031

Token 121: ' la' (ID: 557)
  Prédit: 'de'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'de' → logprob: -1.7018765211105347
    2. ' ' → logprob: -1.9518765211105347
    3. ' de' → logprob: -2.076876640319824
    4. 'f' → logprob: -2.076876640319824
    5. '   ' → logprob: -2.201876640319824
    6. ' sûr' → logprob: -3.076876640319824
    7. 'possible' → logprob: -3.951876640319824
    8. ' besoin' → logprob: -4.076876640319824
    9. ' fini' → logprob: -4.201876640319824
    10. 'le' → logprob: -4.201876640319824

Token 122: ' peine' (ID: 62983)
  Prédit: 'print'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'print' → logprob: -0.5016554594039917
    2. 'else' → logprob: -1.0016554594039917
    3. 'res' → logprob: -4.001655578613281
    4. ' else' → logprob: -6.376655578613281
    5. '#' → logprob: -6.501655578613281
    6. '   ' → logprob: -6.626655578613281
    7. ' ' → logprob: -7.001655578613281
    8. 'for' → logprob: -8.001655578613281
    9. 'elif' → logprob: -8.126655578613281
    10. 'return' → logprob: -8.251655578613281

Token 123: ' de' (ID: 334)
  Prédit: ' de'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' de' → logprob: -0.23073738813400269
    2. 'de' → logprob: -2.1057374477386475
    3. ' d' → logprob: -3.3557374477386475
    4. 'd' → logprob: -3.4807374477386475
    5. '   ' → logprob: -4.980737209320068
    6. '    ' → logprob: -5.105737209320068
    7. '    
' → logprob: -5.980737209320068
    8. '        
' → logprob: -7.480737209320068
    9. '
' → logprob: -7.730737209320068
    10. ' of' → logprob: -7.980737209320068

Token 124: ' faire' (ID: 8119)
  Prédit: 'break'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'break' → logprob: -0.7814507484436035
    2. 'print' → logprob: -1.2814507484436035
    3. 'contin' → logprob: -2.1564507484436035
    4. ' continuer' → logprob: -2.6564507484436035
    5. 'continue' → logprob: -3.2814507484436035
    6. 'faire' → logprob: -5.0314507484436035
    7. ' print' → logprob: -5.2814507484436035
    8. '#' → logprob: -5.2814507484436035
    9. ' break' → logprob: -5.4064507484436035
    10. 'prendre' → logprob: -5.6564507484436035

Token 125: ' ça' (ID: 13590)
  Prédit: 'res'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'res' → logprob: -1.079075813293457
    2. 'de' → logprob: -1.454075813293457
    3. 'plus' → logprob: -1.704075813293457
    4. 'le' → logprob: -2.954075813293457
    5. ' de' → logprob: -3.204075813293457
    6. 'd' → logprob: -4.079075813293457
    7. ' res' → logprob: -4.329075813293457
    8. ' plus' → logprob: -4.454075813293457
    9. 'un' → logprob: -4.704075813293457
    10. 'diff' → logprob: -4.704075813293457

Token 126: ' en' (ID: 469)
  Prédit: '\n'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '\n' → logprob: -0.5287599563598633
    2. '
' → logprob: -1.9037599563598633
    3. 'print' → logprob: -1.9037599563598633
    4. '    
' → logprob: -3.1537599563598633
    5. '   ' → logprob: -3.2787599563598633
    6. '  
' → logprob: -4.528759956359863
    7. '        
' → logprob: -4.778759956359863
    8. 'res' → logprob: -5.903759956359863
    9. ' 
' → logprob: -6.528759956359863
    10. '   
' → logprob: -6.653759956359863

Token 127: ' une' (ID: 2463)
  Prédit: 'plus'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'plus' → logprob: -0.33700165152549744
    2. 'python' → logprob: -2.2120015621185303
    3. 'une' → logprob: -3.2120015621185303
    4. '```' → logprob: -3.8370015621185303
    5. 'for' → logprob: -3.9620015621185303
    6. 'range' → logprob: -4.462001800537109
    7. 'plein' → logprob: -4.837001800537109
    8. 'de' → logprob: -4.962001800537109
    9. 'continue' → logprob: -4.962001800537109
    10. 'reverse' → logprob: -5.087001800537109

Token 128: ' ligne' (ID: 19583)
  Prédit: 'ligne'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'ligne' → logprob: -0.009487486444413662
    2. 'line' → logprob: -5.134487628936768
    3. 'fois' → logprob: -6.259487628936768
    4. 'se' → logprob: -6.884487628936768
    5. ' ligne' → logprob: -8.13448715209961
    6. 'l' → logprob: -9.25948715209961
    7. '```' → logprob: -9.88448715209961
    8. ' seule' → logprob: -10.13448715209961
    9. 'pass' → logprob: -10.25948715209961
    10. 'lin' → logprob: -10.63448715209961

Token 129: ' parfois' (ID: 44575)
  Prédit: 'print'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'print' → logprob: -0.034793078899383545
    2. '
' → logprob: -3.7847931385040283
    3. '<|end|>' → logprob: -5.284792900085449
    4. '\n' → logprob: -5.784792900085449
    5. ' 
' → logprob: -8.15979290008545
    6. '   ' → logprob: -8.15979290008545
    7. '        ' → logprob: -8.28479290008545
    8. '       ' → logprob: -8.28479290008545
    9. 'newline' → logprob: -8.28479290008545
    10. 'n' → logprob: -8.28479290008545

Token 130: '

' (ID: 279)
  Prédit: 'print'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'print' → logprob: -0.4748409390449524
    2. '
' → logprob: -1.5998408794403076
    3. '\n' → logprob: -2.8498408794403076
    4. '    
' → logprob: -2.9748408794403076
    5. '   ' → logprob: -3.9748408794403076
    6. '        
' → logprob: -4.224841117858887
    7. 'res' → logprob: -4.974841117858887
    8. ' 
' → logprob: -5.349841117858887
    9. '  
' → logprob: -5.474841117858887
    10. '       ' → logprob: -5.724841117858887

Token 131: 'print' (ID: 1598)
  Prédit: 'print'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'print' → logprob: -0.0003763343847822398
    2. ' print' → logprob: -8.50037670135498
    3. '
' → logprob: -9.62537670135498
    4. '<|end|>' → logprob: -9.62537670135498
    5. '   ' → logprob: -10.75037670135498
    6. '\n' → logprob: -12.37537670135498
    7. '#print' → logprob: -12.62537670135498
    8. '```' → logprob: -13.00037670135498
    9. '    
' → logprob: -13.25037670135498
    10. ')' → logprob: -13.37537670135498

Token 132: '(res' (ID: 8331)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(' → logprob: -0.002486715093255043
    2. '(res' → logprob: -6.002486705780029
    3. '('' → logprob: -11.752487182617188
    4. '("' → logprob: -13.877487182617188
    5. ' (' → logprob: -14.002487182617188
    6. '()' → logprob: -14.502487182617188
    7. '("("' → logprob: -14.877487182617188
    8. '(
' → logprob: -15.002487182617188
    9. '((' → logprob: -16.377487182617188
    10. '(

' → logprob: -16.502487182617188

Token 133: ')
' (ID: 446)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')' → logprob: -2.339278580620885e-06
    2. ' )' → logprob: -13.125001907348633
    3. '))' → logprob: -16.125001907348633
    4. ')`' → logprob: -16.625001907348633
    5. '+' → logprob: -17.875001907348633
    6. ')
' → logprob: -18.250001907348633
    7. '(' → logprob: -19.000001907348633
    8. '')' → logprob: -19.125001907348633
    9. '),' → logprob: -19.625001907348633
    10. ')}' → logprob: -19.625001907348633

Token 134: '#' (ID: 2)
  Prédit: ''
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False

Token 135: ' Voilà' (ID: 149427)
  Prédit: ''
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False

Token 136: ',' (ID: 11)
  Prédit: ''
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False

Token 137: ' ça' (ID: 13590)
  Prédit: ''
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False

Token 138: ' devrait' (ID: 52773)
  Prédit: ''
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False

Token 139: ' marcher' (ID: 171848)
  Prédit: 'fonction'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'fonction' → logprob: -0.6249176263809204
    2. 'march' → logprob: -1.7499176263809204
    3. ' marcher' → logprob: -2.624917507171631
    4. 'faire' → logprob: -2.624917507171631
    5. 'tout' → logprob: -3.249917507171631
    6. 'aller' → logprob: -3.749917507171631
    7. ' fonctionner' → logprob: -3.874917507171631
    8. 'le' → logprob: -3.999917507171631
    9. 'f' → logprob: -4.249917507171631
    10. 'bien' → logprob: -4.874917507171631

Token 140: ' (' (ID: 350)
  Prédit: ''
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False

Token 141: 'je' (ID: 1587)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ')' → logprob: -0.00013929695705883205
    2. '!' → logprob: -9.875139236450195
    3. '!)' → logprob: -10.000139236450195
    4. ' )' → logprob: -11.250139236450195
    5. ')
' → logprob: -11.375139236450195
    6. '#' → logprob: -12.125139236450195
    7. ')#' → logprob: -12.500139236450195
    8. '<|end|>' → logprob: -13.125139236450195
    9. '```' → logprob: -14.000139236450195
    10. '))' → logprob: -14.375139236450195

Token 142: ' crois' (ID: 65485)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ')' → logprob: -0.43118369579315186
    2. 's' → logprob: -1.4311836957931519
    3. 'vais' → logprob: -4.056183815002441
    4. ' pense' → logprob: -4.681183815002441
    5. 'l' → logprob: -4.806183815002441
    6. 'p' → logprob: -4.931183815002441
    7. 'f' → logprob: -5.056183815002441
    8. 'n' → logprob: -5.431183815002441
    9. '#' → logprob: -5.556183815002441
    10. ';' → logprob: -5.556183815002441

Token 143: ')' (ID: 8)
  Prédit: ')'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')' → logprob: -4.9186317482963204e-05
    2. '!)' → logprob: -11.000049591064453
    3. '))' → logprob: -11.125049591064453
    4. ' )' → logprob: -12.125049591064453
    5. '!' → logprob: -13.125049591064453
    6. '())' → logprob: -13.125049591064453
    7. '`)' → logprob: -13.250049591064453
    8. '()' → logprob: -13.375049591064453
    9. ')")' → logprob: -13.875049591064453
    10. ')
' → logprob: -14.000049591064453


RÉSUMÉ:
--------------------------------------------------------------------------------
Total des tokens analysés: 141
Tokens correctement prédits (1ère position, stricte): 33
Tokens correctement prédits (1ère position, avec adaptation): 36
Tokens correctement prédits (top 10): 78
Précision stricte (1ère position): 23.40%
Précision adaptée (1ère position): 25.53%
Précision (top 10): 55.32%
================================================================================
