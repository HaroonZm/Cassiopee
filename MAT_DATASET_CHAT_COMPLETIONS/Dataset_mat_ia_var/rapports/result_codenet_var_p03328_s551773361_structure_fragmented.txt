================================================================================
ANALYSE DE PRÉDICTION TOKEN PAR TOKEN (BATCH API)
Date: 2025-06-04 20:16:32
Modèle de tokenisation: gpt-4o-mini
================================================================================

SCRIPT ANALYSÉ:
--------------------------------------------------------------------------------
def read_input():
    return input()

def split_input(s):
    return s.split()

def convert_to_ints(lst):
    return list(map(int, lst))

def calculate_diff(a, b):
    return b - a

def calculate_ans(n, a):
    return n * (n + 1) // 2 - a

def check_and_print(diff, a):
    def loop(n):
        if n >= 1000:
            return
        if diff == n + 1:
            ans = calculate_ans(n, a)
            output_answer(ans)
        loop(n + 1)
    loop(0)

def output_answer(ans):
    print(ans)

def main():
    s = read_input()
    lst = split_input(s)
    a, b = convert_to_ints(lst)
    diff = calculate_diff(a, b)
    check_and_print(diff, a)

main()
--------------------------------------------------------------------------------

RÉSULTATS D'ANALYSE TOKEN PAR TOKEN:
--------------------------------------------------------------------------------
Token 0: 'def' (ID: 1314)
  → Token d'amorce (pas de prédiction)

Token 1: ' read' (ID: 1729)
  → Token d'amorce (pas de prédiction)

Token 2: '_input' (ID: 12507)
  → Token d'amorce (pas de prédiction)

Token 3: '():
' (ID: 8595)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '(' → logprob: -0.005430120043456554
    2. '():' → logprob: -5.880430221557617
    3. '_' → logprob: -6.255430221557617
    4. '(:' → logprob: -8.005430221557617
    5. '```' → logprob: -9.005430221557617
    6. '(_:' → logprob: -9.255430221557617
    7. ' (' → logprob: -10.380430221557617
    8. ':' → logprob: -10.380430221557617
    9. '()' → logprob: -11.130430221557617
    10. '(_' → logprob: -11.380430221557617

Token 4: '   ' (ID: 271)
  Prédit: '\'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '\' → logprob: -0.851538896560669
    2. '```' → logprob: -1.351538896560669
    3. '\n' → logprob: -1.976538896560669
    4. '   ' → logprob: -2.476538896560669
    5. '    
' → logprob: -3.726538896560669
    6. '(' → logprob: -4.35153865814209
    7. ':' → logprob: -4.72653865814209
    8. ''\' → logprob: -5.35153865814209
    9. ''' → logprob: -5.47653865814209
    10. '``' → logprob: -5.60153865814209

Token 5: ' return' (ID: 622)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.44198349118232727
    2. '```' → logprob: -2.066983461380005
    3. 'return' (adapté à ' return') → logprob: -2.691983461380005
    4. 'input' → logprob: -3.441983461380005
    5. '    ' → logprob: -3.441983461380005
    6. 'r' → logprob: -3.566983461380005
    7. '\' → logprob: -4.191983699798584
    8. 'x' → logprob: -4.316983699798584
    9. '       ' → logprob: -4.691983699798584
    10. '`' → logprob: -5.191983699798584

Token 6: ' input' (ID: 3422)
  Prédit: ' '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' ' → logprob: -0.21671399474143982
    2. '"' → logprob: -2.3417139053344727
    3. 'input' → logprob: -2.9667139053344727
    4. ' input' → logprob: -3.5917139053344727
    5. ''' → logprob: -4.091713905334473
    6. '  ' → logprob: -6.966713905334473
    7. ' "' → logprob: -7.966713905334473
    8. ' []' → logprob: -8.216713905334473
    9. '(input' → logprob: -8.466713905334473
    10. '`' → logprob: -8.716713905334473

Token 7: '()

' (ID: 5874)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '(' → logprob: -0.0013410773826763034
    2. '()' → logprob: -7.376340866088867
    3. ''' → logprob: -8.376340866088867
    4. '"' → logprob: -9.126340866088867
    5. '('' → logprob: -9.376340866088867
    6. '("("' → logprob: -9.501340866088867
    7. '```' → logprob: -9.751340866088867
    8. '(
' → logprob: -10.126340866088867
    9. ')' → logprob: -11.126340866088867
    10. '`' → logprob: -11.251340866088867

Token 8: 'def' (ID: 1314)
  Prédit: '\n'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '\n' → logprob: -0.8395724892616272
    2. '(' → logprob: -1.8395724296569824
    3. '
' → logprob: -2.4645724296569824
    4. '```' → logprob: -2.5895724296569824
    5. '()' → logprob: -2.8395724296569824
    6. '<|end|>' → logprob: -3.2145724296569824
    7. '#' → logprob: -3.4645724296569824
    8. 'def' → logprob: -3.5895724296569824
    9. '(
' → logprob: -4.339572429656982
    10. '\' → logprob: -4.464572429656982

Token 9: ' split' (ID: 12648)
  Prédit: ' process'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' process' → logprob: -0.7485584020614624
    2. ' calculate' → logprob: -1.4985584020614624
    3. ' write' → logprob: -2.123558521270752
    4. ' main' → logprob: -2.498558521270752
    5. ' read' → logprob: -2.748558521270752
    6. ' compute' → logprob: -4.373558521270752
    7. ' parse' → logprob: -4.998558521270752
    8. ' user' → logprob: -6.123558521270752
    9. ' validate' → logprob: -6.248558521270752
    10. ' print' → logprob: -6.373558521270752

Token 10: '_input' (ID: 12507)
  Prédit: '_'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_' → logprob: -0.003173314267769456
    2. '_text' → logprob: -7.003173351287842
    3. '(' → logprob: -7.253173351287842
    4. '_line' → logprob: -7.253173351287842
    5. '_input' → logprob: -8.753172874450684
    6. '_string' → logprob: -9.253172874450684
    7. '_words' → logprob: -9.378172874450684
    8. '_word' → logprob: -9.628172874450684
    9. '_s' → logprob: -10.128172874450684
    10. '('_' → logprob: -10.253172874450684

Token 11: '(s' (ID: 1858)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '(' → logprob: -0.014758501201868057
    2. '_' → logprob: -4.639758586883545
    3. '('_' → logprob: -6.264758586883545
    4. '("("' → logprob: -7.889758586883545
    5. '_line' → logprob: -8.014758110046387
    6. '(_)' → logprob: -8.139758110046387
    7. '_text' → logprob: -8.264758110046387
    8. '(_' → logprob: -8.389758110046387
    9. '```' → logprob: -8.389758110046387
    10. '()' → logprob: -8.389758110046387

Token 12: '):
' (ID: 1883)
  Prédit: '):'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '):' → logprob: -0.027550550177693367
    2. ',' → logprob: -3.902550458908081
    3. ')' → logprob: -5.15255069732666
    4. '):
' → logprob: -7.90255069732666
    5. ' ):' → logprob: -8.27755069732666
    6. ':' → logprob: -8.40255069732666
    7. '.split' → logprob: -9.77755069732666
    8. '   ' → logprob: -10.65255069732666
    9. '.' → logprob: -10.65255069732666
    10. 's' → logprob: -10.77755069732666

Token 13: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.0016812481917440891
    2. ' return' → logprob: -7.501681327819824
    3. '(s' → logprob: -8.376681327819824
    4. 's' → logprob: -8.626681327819824
    5. 'return' → logprob: -8.626681327819824
    6. '    ' → logprob: -9.126681327819824
    7. '.split' → logprob: -9.126681327819824
    8. '(' → logprob: -9.751681327819824
    9. ' s' → logprob: -10.126681327819824
    10. '_' → logprob: -10.126681327819824

Token 14: ' return' (ID: 622)
  Prédit: ' s'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' s' → logprob: -0.5849831700325012
    2. 's' → logprob: -1.2099831104278564
    3. ' return' → logprob: -2.7099831104278564
    4. '   ' → logprob: -2.7099831104278564
    5. 'return' (adapté à ' return') → logprob: -4.4599833488464355
    6. '(s' → logprob: -11.334982872009277
    7. '    ' → logprob: -11.834982872009277
    8. '```' → logprob: -12.084982872009277
    9. ' split' → logprob: -12.209982872009277
    10. 'spl' → logprob: -12.959982872009277

Token 15: ' s' (ID: 265)
  Prédit: ' s'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' s' → logprob: -0.10020741820335388
    2. 's' → logprob: -2.3502073287963867
    3. '(s' → logprob: -14.350207328796387
    4. ' ' → logprob: -17.100208282470703
    5. '   ' → logprob: -17.350208282470703
    6. ' []' → logprob: -17.600208282470703
    7. '	s' → logprob: -17.600208282470703
    8. ''s' → logprob: -17.725208282470703
    9. '[]' → logprob: -17.725208282470703
    10. '[' → logprob: -17.850208282470703

Token 16: '.split' (ID: 10347)
  Prédit: '.split'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '.split' → logprob: -0.31349819898605347
    2. '.' → logprob: -1.3134982585906982
    3. '.strip' → logprob: -8.563498497009277
    4. ' .' → logprob: -10.313498497009277
    5. '.replace' → logprob: -12.563498497009277
    6. 'split' → logprob: -13.188498497009277
    7. '.s' → logprob: -13.438498497009277
    8. '.rstrip' → logprob: -13.813498497009277
    9. '.readline' → logprob: -14.563498497009277
    10. '   ' → logprob: -14.688498497009277

Token 17: '()

' (ID: 5874)
  Prédit: '(''
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '('' → logprob: -0.07399236410856247
    2. '()' → logprob: -2.9489922523498535
    3. '(' → logprob: -4.0739922523498535
    4. '("("' → logprob: -6.3239922523498535
    5. ''' → logprob: -10.073992729187012
    6. '("' → logprob: -10.323992729187012
    7. '('.')' → logprob: -10.448992729187012
    8. '(',' → logprob: -11.823992729187012
    9. '(('' → logprob: -12.948992729187012
    10. '(`' → logprob: -13.198992729187012

Token 18: 'def' (ID: 1314)
  Prédit: 'def'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'def' → logprob: -2.6537622034084052e-05
    2. '#' → logprob: -11.87502670288086
    3. 'd' → logprob: -12.25002670288086
    4. '```' → logprob: -12.25002670288086
    5. '\' → logprob: -12.37502670288086
    6. 'de' → logprob: -13.50002670288086
    7. ' def' → logprob: -13.87502670288086
    8. '<|end|>' → logprob: -14.75002670288086
    9. '
' → logprob: -14.87502670288086
    10. '[' → logprob: -15.12502670288086

Token 19: ' convert' (ID: 8452)
  Prédit: ' main'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' main' → logprob: -0.39685654640197754
    2. ' join' → logprob: -1.8968565464019775
    3. ' process' → logprob: -2.2718565464019775
    4. 'main' → logprob: -3.8968565464019775
    5. ' convert' → logprob: -4.146856307983398
    6. 'join' → logprob: -4.646856307983398
    7. 'process' → logprob: -4.771856307983398
    8. ' parse' → logprob: -5.146856307983398
    9. 'convert' → logprob: -6.271856307983398
    10. ' calculate' → logprob: -6.771856307983398

Token 20: '_to' (ID: 5089)
  Prédit: '_'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_' → logprob: -0.4899490177631378
    2. '_to' → logprob: -0.9899489879608154
    3. '(' → logprob: -4.7399492263793945
    4. '_token' → logprob: -5.9899492263793945
    5. '_(' → logprob: -6.6149492263793945
    6. '_tokens' → logprob: -7.2399492263793945
    7. '(_' → logprob: -7.8649492263793945
    8. '```' → logprob: -7.9899492263793945
    9. '_input' → logprob: -8.364949226379395
    10. '_string' → logprob: -8.739949226379395

Token 21: '_int' (ID: 12285)
  Prédit: '_int'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_int' → logprob: -0.00022010602697264403
    2. 'int' → logprob: -8.62522029876709
    3. '_' → logprob: -10.87522029876709
    4. '_float' → logprob: -12.12522029876709
    5. '_list' → logprob: -12.50022029876709
    6. '_tokens' → logprob: -12.87522029876709
    7. '_in' → logprob: -13.00022029876709
    8. '_integer' → logprob: -13.25022029876709
    9. '_numbers' → logprob: -13.62522029876709
    10. '_string' → logprob: -13.62522029876709

Token 22: 's' (ID: 82)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(' → logprob: -0.20511263608932495
    2. '(s' → logprob: -1.8301126956939697
    3. 's' → logprob: -3.7051126956939697
    4. ' (' → logprob: -8.20511245727539
    5. '("("' → logprob: -10.20511245727539
    6. '(n' → logprob: -10.70511245727539
    7. '()' → logprob: -10.83011245727539
    8. '(x' → logprob: -10.95511245727539
    9. '('' → logprob: -11.45511245727539
    10. '(a' → logprob: -11.83011245727539

Token 23: '(lst' (ID: 95688)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(' → logprob: -0.6974138617515564
    2. '(s' → logprob: -0.6974138617515564
    3. ' (' → logprob: -5.572413921356201
    4. '(lst' → logprob: -9.322413444519043
    5. '(strings' → logprob: -9.322413444519043
    6. '(tokens' → logprob: -10.197413444519043
    7. '(l' → logprob: -10.197413444519043
    8. '(ls' → logprob: -10.322413444519043
    9. '("("' → logprob: -10.697413444519043
    10. 's' → logprob: -10.947413444519043

Token 24: '):
' (ID: 1883)
  Prédit: '):'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '):' → logprob: -0.0032693336252123117
    2. ')' → logprob: -6.003269195556641
    3. '(lst' → logprob: -8.12826919555664
    4. '(' → logprob: -8.62826919555664
    5. ' ):' → logprob: -9.00326919555664
    6. '):
' → logprob: -9.12826919555664
    7. '[]):' → logprob: -11.00326919555664
    8. '   ' → logprob: -11.25326919555664
    9. ',' → logprob: -11.37826919555664
    10. '):

' → logprob: -11.62826919555664

Token 25: '   ' (ID: 271)
  Prédit: '['
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '[' → logprob: -0.14559870958328247
    2. '[int' → logprob: -2.2705986499786377
    3. 'return' → logprob: -4.270598888397217
    4. '   ' → logprob: -4.770598888397217
    5. ' return' → logprob: -5.520598888397217
    6. '[:]' → logprob: -6.020598888397217
    7. '(' → logprob: -7.270598888397217
    8. '[i' → logprob: -7.520598888397217
    9. ' [' → logprob: -7.770598888397217
    10. '[]' → logprob: -7.895598888397217

Token 26: ' return' (ID: 622)
  Prédit: '[int'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '[int' → logprob: -0.6568821668624878
    2. '[' → logprob: -1.6568821668624878
    3. '   ' → logprob: -1.6568821668624878
    4. ' [' → logprob: -3.0318822860717773
    5. 'return' (adapté à ' return') → logprob: -3.6568822860717773
    6. ' return' → logprob: -3.7818822860717773
    7. '[i' → logprob: -6.531882286071777
    8. '[list' → logprob: -7.656882286071777
    9. ' list' → logprob: -7.906882286071777
    10. 'list' → logprob: -9.156882286071777

Token 27: ' list' (ID: 1562)
  Prédit: ' ['
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' [' → logprob: -0.3550793528556824
    2. ' list' → logprob: -1.4800794124603271
    3. '[' → logprob: -2.980079412460327
    4. '[list' → logprob: -4.105079174041748
    5. 'list' → logprob: -5.855079174041748
    6. '[int' → logprob: -6.855079174041748
    7. '[List' → logprob: -10.730079650878906
    8. '[len' → logprob: -11.355079650878906
    9. ' map' → logprob: -12.105079650878906
    10. ' ' → logprob: -12.480079650878906

Token 28: '(map' (ID: 16946)
  Prédit: '(map'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(map' → logprob: -0.0019360085716471076
    2. '(' → logprob: -6.251935958862305
    3. '(int' → logprob: -12.126935958862305
    4. '(
' → logprob: -14.876935958862305
    5. '(

' → logprob: -14.876935958862305
    6. 'map' → logprob: -15.251935958862305
    7. '(range' → logprob: -15.501935958862305
    8. '_map' → logprob: -15.626935958862305
    9. '(lst' → logprob: -15.626935958862305
    10. ' map' → logprob: -15.626935958862305

Token 29: '(int' (ID: 2742)
  Prédit: '(int'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(int' → logprob: -0.0009014541283249855
    2. '(' → logprob: -7.375901222229004
    3. 'int' → logprob: -8.875901222229004
    4. ' int' → logprob: -9.125901222229004
    5. '<int' → logprob: -11.750901222229004
    6. ' (' → logprob: -12.500901222229004
    7. '   ' → logprob: -12.500901222229004
    8. ',int' → logprob: -12.750901222229004
    9. ')' → logprob: -12.875901222229004
    10. '=int' → logprob: -12.875901222229004

Token 30: ',' (ID: 11)
  Prédit: ','
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ',' → logprob: -0.0002831464516930282
    2. ' ,' → logprob: -9.000283241271973
    3. '(lst' → logprob: -9.750283241271973
    4. '(' → logprob: -9.875283241271973
    5. ',l' → logprob: -10.250283241271973
    6. ')' → logprob: -12.375283241271973
    7. ',
' → logprob: -13.375283241271973
    8. '))' → logprob: -13.500283241271973
    9. ' (' → logprob: -13.500283241271973
    10. ',(' → logprob: -13.875283241271973

Token 31: ' lst' (ID: 33384)
  Prédit: ' lst'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' lst' → logprob: -0.5759456157684326
    2. 'lst' → logprob: -0.8259456157684326
    3. '(lst' → logprob: -12.200945854187012
    4. '_lst' → logprob: -14.450945854187012
    5. '.lst' → logprob: -15.575945854187012
    6. ')' → logprob: -15.700945854187012
    7. ' ' → logprob: -16.325944900512695
    8. 'list' → logprob: -16.700944900512695
    9. 'Lst' → logprob: -17.825944900512695
    10. '))' → logprob: -17.825944900512695

Token 32: '))

' (ID: 9746)
  Prédit: '))'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '))' → logprob: -6.551721889991313e-05
    2. ')))' → logprob: -10.250065803527832
    3. ')' → logprob: -10.500065803527832
    4. ' ))' → logprob: -13.375065803527832
    5. '))
' → logprob: -14.250065803527832
    6. '   ' → logprob: -15.750065803527832
    7. '()))' → logprob: -16.500064849853516
    8. '))))' → logprob: -17.625064849853516
    9. ' ' → logprob: -17.750064849853516
    10. '));' → logprob: -18.000064849853516

Token 33: 'def' (ID: 1314)
  Prédit: 'def'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'def' → logprob: -1.3544423381972592e-05
    2. '```' → logprob: -12.25001335144043
    3. '\' → logprob: -12.62501335144043
    4. '#' → logprob: -13.00001335144043
    5. '<|end|>' → logprob: -14.25001335144043
    6. ' def' → logprob: -14.25001335144043
    7. '
' → logprob: -14.87501335144043
    8. '<|end|>' → logprob: -15.12501335144043
    9. '

' → logprob: -15.87501335144043
    10. 'de' → logprob: -16.00001335144043

Token 34: ' calculate' (ID: 17950)
  Prédit: ' main'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' main' → logprob: -0.07647491991519928
    2. ' calculate' → logprob: -3.576474905014038
    3. ' solve' → logprob: -3.951474905014038
    4. ' process' → logprob: -4.076475143432617
    5. ' compute' → logprob: -5.951475143432617
    6. ' find' → logprob: -6.201475143432617
    7. ' sort' → logprob: -6.826475143432617
    8. ' count' → logprob: -7.326475143432617
    9. ' sum' → logprob: -7.326475143432617
    10. ' convert' → logprob: -8.076475143432617

Token 35: '_diff' (ID: 41047)
  Prédit: '_sum'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '_sum' → logprob: -0.11593455076217651
    2. '_' → logprob: -2.8659346103668213
    3. '_total' → logprob: -3.8659346103668213
    4. '(' → logprob: -4.990934371948242
    5. '_average' → logprob: -5.115934371948242
    6. '_factor' → logprob: -5.615934371948242
    7. '_frequency' → logprob: -6.365934371948242
    8. '_product' → logprob: -6.740934371948242
    9. '_max' → logprob: -6.990934371948242
    10. '_difference' → logprob: -7.240934371948242

Token 36: '(a' (ID: 6271)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(' → logprob: -0.7367028594017029
    2. '(s' → logprob: -1.1117029190063477
    3. 's' → logprob: -1.8617029190063477
    4. '(a' → logprob: -3.9867029190063477
    5. '(lst' → logprob: -5.111702919006348
    6. '(er' → logprob: -5.486702919006348
    7. '_' → logprob: -6.361702919006348
    8. '(_' → logprob: -7.111702919006348
    9. '(nums' → logprob: -7.736702919006348
    10. '(arr' → logprob: -7.986702919006348

Token 37: ',' (ID: 11)
  Prédit: ','
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ',' → logprob: -0.023964902386069298
    2. '):' → logprob: -3.8989648818969727
    3. ',b' → logprob: -6.023964881896973
    4. ' ,' → logprob: -7.898964881896973
    5. '[' → logprob: -8.648964881896973
    6. '[]):' → logprob: -9.273964881896973
    7. 's' → logprob: -9.773964881896973
    8. '_,' → logprob: -10.273964881896973
    9. 'rray' → logprob: -10.398964881896973
    10. '1' → logprob: -10.523964881896973

Token 38: ' b' (ID: 287)
  Prédit: 'b'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'b' → logprob: -0.14269034564495087
    2. ' b' → logprob: -2.017690420150757
    3. '   ' → logprob: -12.392690658569336
    4. ' ' → logprob: -12.517690658569336
    5. ')' → logprob: -12.892690658569336
    6. ')b' → logprob: -14.142690658569336
    7. '<|end|>' → logprob: -14.267690658569336
    8. '	b' → logprob: -14.892690658569336
    9. '  ' → logprob: -15.080190658569336
    10. ' )' → logprob: -15.080190658569336

Token 39: '):
' (ID: 1883)
  Prédit: '):'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '):' → logprob: -0.00030817187507636845
    2. '):
' → logprob: -8.1253080368042
    3. ')' → logprob: -12.1253080368042
    4. ' ):' → logprob: -13.0003080368042
    5. '):
' → logprob: -13.6253080368042
    6. ':' → logprob: -13.6253080368042
    7. '[]):' → logprob: -14.5003080368042
    8. 's' → logprob: -15.1253080368042
    9. ')):' → logprob: -15.3753080368042
    10. '   ' → logprob: -15.3753080368042

Token 40: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.0038630201015621424
    2. ':' → logprob: -6.1288628578186035
    3. 'return' → logprob: -7.1288628578186035
    4. ' return' → logprob: -7.2538628578186035
    5. '):' → logprob: -10.503863334655762
    6. ':
' → logprob: -10.628863334655762
    7. ')' → logprob: -10.628863334655762
    8. ':return' → logprob: -10.628863334655762
    9. '.' → logprob: -10.753863334655762
    10. '    ' → logprob: -11.503863334655762

Token 41: ' return' (ID: 622)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.2875654399394989
    2. 'return' (adapté à ' return') → logprob: -1.5375654697418213
    3. ' return' → logprob: -3.4125654697418213
    4. 'abs' → logprob: -6.287565231323242
    5. ' abs' → logprob: -8.662565231323242
    6. '```' → logprob: -11.662565231323242
    7. '    ' → logprob: -12.537565231323242
    8. '  ' → logprob: -13.412565231323242
    9. '	return' → logprob: -13.412565231323242
    10. ' ' → logprob: -13.537565231323242

Token 42: ' b' (ID: 287)
  Prédit: 'abs'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'abs' → logprob: -0.044502388685941696
    2. ' abs' → logprob: -3.5445024967193604
    3. 'a' → logprob: -4.544502258300781
    4. 'b' → logprob: -5.669502258300781
    5. 'max' → logprob: -8.794502258300781
    6. ' a' → logprob: -8.794502258300781
    7. ' b' → logprob: -8.919502258300781
    8. '   ' → logprob: -9.294502258300781
    9. ' max' → logprob: -10.544502258300781
    10. '(abs' → logprob: -12.044502258300781

Token 43: ' -' (ID: 533)
  Prédit: '-'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '-' → logprob: -0.11284701526165009
    2. ' -' → logprob: -2.237847089767456
    3. ' ' → logprob: -10.862847328186035
    4. '[' → logprob: -13.487847328186035
    5. ' ' → logprob: -14.362847328186035
    6. '   ' → logprob: -14.487847328186035
    7. '-a' → logprob: -14.737847328186035
    8. '-token' → logprob: -15.112847328186035
    9. '<|end|>' → logprob: -15.362847328186035
    10. ')' → logprob: -15.612847328186035

Token 44: ' a' (ID: 261)
  Prédit: 'a'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'a' → logprob: -0.0002613358374219388
    2. ' a' → logprob: -8.250261306762695
    3. '	a' → logprob: -18.500261306762695
    4. ' ' → logprob: -19.875261306762695
    5. 'а' → logprob: -21.250261306762695
    6. '<|end|>' → logprob: -21.250261306762695
    7. '   ' → logprob: -21.750261306762695
    8. '>a' → logprob: -22.000261306762695
    9. '_a' → logprob: -22.500261306762695
    10. '  ' → logprob: -22.500261306762695

Token 45: '

' (ID: 279)
  Prédit: 'def'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'def' → logprob: -0.0073233554139733315
    2. '<|end|>' → logprob: -5.632323265075684
    3. '
' → logprob: -6.632323265075684
    4. '```' → logprob: -7.007323265075684
    5. '

' → logprob: -7.257323265075684
    6. '\n' → logprob: -8.132323265075684
    7. '<|end|>' → logprob: -8.882323265075684
    8. 'newline' → logprob: -9.507323265075684
    9. '\' → logprob: -9.632323265075684
    10. '#' → logprob: -9.757323265075684

Token 46: 'def' (ID: 1314)
  Prédit: 'def'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'def' → logprob: -0.0025200152304023504
    2. '#' → logprob: -7.3775200843811035
    3. '```' → logprob: -7.3775200843811035
    4. '<|end|>' → logprob: -7.7525200843811035
    5. 'print' → logprob: -8.127519607543945
    6. 'a' → logprob: -8.252519607543945
    7. '\' → logprob: -9.377519607543945
    8. 'for' → logprob: -10.377519607543945
    9. '<|end|>' → logprob: -10.377519607543945
    10. '\n' → logprob: -10.502519607543945

Token 47: ' calculate' (ID: 17950)
  Prédit: ' main'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' main' → logprob: -0.01400458998978138
    2. ' calculate' → logprob: -4.514004707336426
    3. 'main' → logprob: -6.889004707336426
    4. ' find' → logprob: -7.514004707336426
    5. ' solve' → logprob: -7.889004707336426
    6. ' max' → logprob: -8.389004707336426
    7. ' process' → logprob: -8.514004707336426
    8. ' compute' → logprob: -8.639004707336426
    9. 'calculate' → logprob: -8.889004707336426
    10. ' sum' → logprob: -9.514004707336426

Token 48: '_ans' (ID: 146254)
  Prédit: '_sum'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '_sum' → logprob: -0.2184656709432602
    2. '_diff' → logprob: -2.968465566635132
    3. '_average' → logprob: -2.968465566635132
    4. '_product' → logprob: -3.593465566635132
    5. '_max' → logprob: -3.718465566635132
    6. '_total' → logprob: -4.343465805053711
    7. '_avg' → logprob: -4.843465805053711
    8. '_difference' → logprob: -5.468465805053711
    9. '_mean' → logprob: -5.968465805053711
    10. '_abs' → logprob: -6.093465805053711

Token 49: '(n' (ID: 2406)
  Prédit: '(a'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '(a' → logprob: -0.032131608575582504
    2. '(' → logprob: -3.7821316719055176
    3. '(s' → logprob: -5.657131671905518
    4. '():' → logprob: -6.282131671905518
    5. 's' → logprob: -6.782131671905518
    6. '()' → logprob: -7.532131671905518
    7. '(lst' → logprob: -7.907131671905518
    8. '(x' → logprob: -8.15713119506836
    9. '(_' → logprob: -8.90713119506836
    10. '(u' → logprob: -9.53213119506836

Token 50: ',' (ID: 11)
  Prédit: ','
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ',' → logprob: -0.18249309062957764
    2. '):' → logprob: -1.8074930906295776
    3. ' ):' → logprob: -7.307493209838867
    4. ' ,' → logprob: -7.307493209838867
    5. ')' → logprob: -7.557493209838867
    6. '-' → logprob: -8.182493209838867
    7. ',a' → logprob: -8.807493209838867
    8. ',n' → logprob: -8.932493209838867
    9. '):
' → logprob: -9.932493209838867
    10. ',
' → logprob: -10.307493209838867

Token 51: ' a' (ID: 261)
  Prédit: 'arr'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'arr' → logprob: -1.0751444101333618
    2. 'a' → logprob: -1.3251444101333618
    3. 'k' → logprob: -1.9501444101333618
    4. 'lst' → logprob: -2.7001442909240723
    5. 'm' → logprob: -2.8251442909240723
    6. 'd' → logprob: -3.7001442909240723
    7. 'values' → logprob: -4.200144290924072
    8. 'x' → logprob: -4.450144290924072
    9. 'diff' → logprob: -4.825144290924072
    10. 'l' → logprob: -4.950144290924072

Token 52: '):
' (ID: 1883)
  Prédit: ','
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ',' → logprob: -0.7763754725456238
    2. '_list' → logprob: -1.5263755321502686
    3. '):' → logprob: -1.6513755321502686
    4. 's' → logprob: -2.1513755321502686
    5. '[' → logprob: -5.7763752937316895
    6. '_values' → logprob: -5.9013752937316895
    7. '_lst' → logprob: -6.7763752937316895
    8. '[]):' → logprob: -6.7763752937316895
    9. '[i' → logprob: -7.2763752937316895
    10. ' ):' → logprob: -7.5263752937316895

Token 53: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.02528306469321251
    2. 'max' → logprob: -5.275282859802246
    3. ' max' → logprob: -5.275282859802246
    4. 'sum' → logprob: -5.900282859802246
    5. 'a' → logprob: -6.275282859802246
    6. 'total' → logprob: -6.400282859802246
    7. 'ans' → logprob: -6.525282859802246
    8. ' ans' → logprob: -6.900282859802246
    9. 'diff' → logprob: -6.900282859802246
    10. 'result' → logprob: -7.025282859802246

Token 54: ' return' (ID: 622)
  Prédit: 'ans'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'ans' → logprob: -1.1926679611206055
    2. 'diff' → logprob: -1.3176679611206055
    3. 'a' → logprob: -2.3176679611206055
    4. '   ' → logprob: -2.5676679611206055
    5. 'total' → logprob: -2.5676679611206055
    6. 'max' → logprob: -2.9426679611206055
    7. 'result' → logprob: -3.5676679611206055
    8. 'sum' → logprob: -4.1926679611206055
    9. 'res' → logprob: -4.4426679611206055
    10. ' ans' → logprob: -4.5676679611206055

Token 55: ' n' (ID: 297)
  Prédit: ' max'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' max' → logprob: -0.6682291030883789
    2. ' sum' → logprob: -1.543229103088379
    3. 'sum' → logprob: -2.543229103088379
    4. ' n' → logprob: -2.668229103088379
    5. 'max' → logprob: -2.793229103088379
    6. ' a' → logprob: -3.793229103088379
    7. 'a' → logprob: -4.293229103088379
    8. 'n' → logprob: -5.168229103088379
    9. '0' → logprob: -5.543229103088379
    10. ' (' → logprob: -5.793229103088379

Token 56: ' *' (ID: 425)
  Prédit: ''
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False

Token 57: ' (' (ID: 350)
  Prédit: ' ('
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' (' → logprob: -1.7656317949295044
    2. '(n' → logprob: -1.7656317949295044
    3. 'a' → logprob: -2.015631675720215
    4. ' ' → logprob: -2.015631675720215
    5. ' max' → logprob: -2.390631675720215
    6. '2' → logprob: -2.765631675720215
    7. '(max' → logprob: -2.765631675720215
    8. '(a' → logprob: -3.265631675720215
    9. 'max' → logprob: -3.390631675720215
    10. '(' → logprob: -4.140631675720215

Token 58: 'n' (ID: 77)
  Prédit: 'a'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'a' → logprob: -0.15774871408939362
    2. 'n' → logprob: -2.0327486991882324
    3. '(n' → logprob: -4.657748699188232
    4. 'max' → logprob: -6.282748699188232
    5. '(a' → logprob: -6.282748699188232
    6. '(max' → logprob: -8.03274917602539
    7. '2' → logprob: -8.15774917602539
    8. '9' → logprob: -8.78274917602539
    9. '(' → logprob: -9.03274917602539
    10. '1' → logprob: -9.15774917602539

Token 59: ' +' (ID: 659)
  Prédit: '-'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '-' → logprob: -0.20990025997161865
    2. ' -' → logprob: -2.334900379180908
    3. '+' → logprob: -2.459900379180908
    4. ' +' → logprob: -5.209900379180908
    5. '1' → logprob: -6.709900379180908
    6. ' ' → logprob: -8.20989990234375
    7. ')' → logprob: -10.58489990234375
    8. 'a' → logprob: -10.64739990234375
    9. '   ' → logprob: -11.08489990234375
    10. '+)' → logprob: -11.95989990234375

Token 60: ' ' (ID: 220)
  Prédit: '1'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '1' → logprob: -0.0009542173356749117
    2. ' ' → logprob: -7.0009541511535645
    3. ')' → logprob: -10.250954627990723
    4. '   ' → logprob: -12.625954627990723
    5. '<|end|>' → logprob: -14.000954627990723
    6. 'a' → logprob: -14.375954627990723
    7. '```' → logprob: -14.625954627990723
    8. '...' → logprob: -14.750954627990723
    9. '
' → logprob: -15.000954627990723
    10. '`' → logprob: -15.000954627990723

Token 61: '1' (ID: 16)
  Prédit: '1'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '1' → logprob: -3.2855416066013277e-05
    2. ')' → logprob: -10.875032424926758
    3. ' ' → logprob: -11.375032424926758
    4. '   ' → logprob: -14.125032424926758
    5. '<|end|>' → logprob: -14.375032424926758
    6. 'a' → logprob: -15.625032424926758
    7. '```' → logprob: -15.625032424926758
    8. '`' → logprob: -16.187532424926758
    9. '
' → logprob: -16.250032424926758
    10. '')' → logprob: -16.625032424926758

Token 62: ')' (ID: 8)
  Prédit: ')'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')' → logprob: -0.005222494248300791
    2. ')//' → logprob: -5.880222320556641
    3. ' )' → logprob: -6.255222320556641
    4. ' //' → logprob: -7.755222320556641
    5. '//' → logprob: -9.75522232055664
    6. '   ' → logprob: -13.25522232055664
    7. ')/' → logprob: -14.06772232055664
    8. ')`' → logprob: -14.19272232055664
    9. '```' → logprob: -14.44272232055664
    10. '")' → logprob: -14.56772232055664

Token 63: ' //' (ID: 602)
  Prédit: ' //'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' //' → logprob: -0.2530897557735443
    2. '//' → logprob: -1.5030897855758667
    3. '"' → logprob: -8.128089904785156
    4. ''' → logprob: -8.628089904785156
    5. '`' → logprob: -8.753089904785156
    6. 'def' → logprob: -9.003089904785156
    7. '```' → logprob: -9.253089904785156
    8. '#' → logprob: -9.253089904785156
    9. ' #' → logprob: -10.628089904785156
    10. '   ' → logprob: -10.628089904785156

Token 64: ' ' (ID: 220)
  Prédit: '2'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '2' → logprob: -2.463036435074173e-05
    2. ' ' → logprob: -10.625024795532227
    3. '1' → logprob: -16.000024795532227
    4. '   ' → logprob: -16.375024795532227
    5. '```' → logprob: -17.312524795532227
    6. '۲' → logprob: -17.437524795532227
    7. '202' → logprob: -18.250024795532227
    8. '२' → logprob: -18.687524795532227
    9. '  ' → logprob: -18.687524795532227
    10. '{' → logprob: -18.875024795532227

Token 65: '2' (ID: 17)
  Prédit: '2'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '2' → logprob: -5.512236498361744e-07
    2. '1' → logprob: -15.250000953674316
    3. ' ' → logprob: -16.5
    4. '```' → logprob: -17.0
    5. '۲' → logprob: -18.5
    6. '22' → logprob: -18.75
    7. '{' → logprob: -19.125
    8. '２' → logprob: -19.3125
    9. '202' → logprob: -19.5
    10. '   ' → logprob: -19.5625

Token 66: ' -' (ID: 533)
  Prédit: ''
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False

Token 67: ' a' (ID: 261)
  Prédit: ' sum'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' sum' → logprob: -0.25114893913269043
    2. 'sum' → logprob: -1.8761489391326904
    3. ' a' → logprob: -3.3761489391326904
    4. 'a' → logprob: -3.8761489391326904
    5. ' max' → logprob: -4.6261491775512695
    6. ' min' → logprob: -6.6261491775512695
    7. 'max' → logprob: -6.8761491775512695
    8. ' calculate' → logprob: -7.0011491775512695
    9. 'calculate' → logprob: -7.7511491775512695
    10. 'min' → logprob: -8.87614917755127

Token 68: '

' (ID: 279)
  Prédit: '\n'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '\n' → logprob: -0.6506703495979309
    2. '(' → logprob: -1.5256702899932861
    3. '_' → logprob: -2.900670289993286
    4. '[' → logprob: -2.900670289993286
    5. '<|end|>' → logprob: -3.275670289993286
    6. '*' → logprob: -3.400670289993286
    7. '
' → logprob: -4.150670528411865
    8. '.' → logprob: -4.525670528411865
    9. '```' → logprob: -4.650670528411865
    10. 'newline' → logprob: -4.900670528411865

Token 69: 'def' (ID: 1314)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(' → logprob: -0.10149507224559784
    2. '[' → logprob: -2.4764950275421143
    3. '(
' → logprob: -6.226495265960693
    4. '.' → logprob: -6.601495265960693
    5. 'def' → logprob: -6.726495265960693
    6. ' ' → logprob: -6.851495265960693
    7. '_' → logprob: -6.851495265960693
    8. ''' → logprob: -6.976495265960693
    9. ':' → logprob: -7.226495265960693
    10. 's' → logprob: -7.601495265960693

Token 70: ' check' (ID: 2371)
  Prédit: ' calculate'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' calculate' → logprob: -0.1046271100640297
    2. ' ' → logprob: -2.4796271324157715
    3. ' read' → logprob: -4.9796271324157715
    4. '_' → logprob: -5.4796271324157715
    5. 'calculate' → logprob: -6.3546271324157715
    6. ' _' → logprob: -6.7296271324157715
    7. ' main' → logprob: -7.3546271324157715
    8. ' compute' → logprob: -8.979626655578613
    9. ' def' → logprob: -9.229626655578613
    10. ' split' → logprob: -9.354626655578613

Token 71: '_and' (ID: 18645)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '(' → logprob: -0.031167933717370033
    2. '_' → logprob: -3.906167984008789
    3. ' (' → logprob: -5.531167984008789
    4. '_diff' → logprob: -6.031167984008789
    5. '(a' → logprob: -6.906167984008789
    6. '_difference' → logprob: -7.156167984008789
    7. '_space' → logprob: -8.031167984008789
    8. '(n' → logprob: -8.156167984008789
    9. '_max' → logprob: -8.531167984008789
    10. '_input' → logprob: -8.656167984008789

Token 72: '_print' (ID: 31509)
  Prédit: '_continue'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_continue' → logprob: -1.4340187311172485
    2. '_' → logprob: -1.8090187311172485
    3. '_return' → logprob: -2.059018611907959
    4. '_update' → logprob: -2.184018611907959
    5. '_print' → logprob: -2.684018611907959
    6. '_cal' → logprob: -3.059018611907959
    7. '_execute' → logprob: -3.309018611907959
    8. '_compute' → logprob: -3.684018611907959
    9. '_generate' → logprob: -3.934018611907959
    10. '_replace' → logprob: -4.184018611907959

Token 73: '(diff' (ID: 84195)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '(' → logprob: -0.00022201328829396516
    2. '_' → logprob: -10.000222206115723
    3. ' (' → logprob: -10.125222206115723
    4. '('' → logprob: -10.375222206115723
    5. '()' → logprob: -11.000222206115723
    6. '("("' → logprob: -11.000222206115723
    7. '(_' → logprob: -11.375222206115723
    8. '_(' → logprob: -11.500222206115723
    9. '("""' → logprob: -11.750222206115723
    10. '('_' → logprob: -12.125222206115723

Token 74: ',' (ID: 11)
  Prédit: '):'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '):' → logprob: -0.06391392648220062
    2. ')' → logprob: -3.4389138221740723
    3. '(' → logprob: -4.063913822174072
    4. 's' → logprob: -4.938913822174072
    5. ',' → logprob: -5.688913822174072
    6. ' ):' → logprob: -7.563913822174072
    7. '_' → logprob: -8.06391429901123
    8. '_diff' → logprob: -8.43891429901123
    9. '(diff' → logprob: -8.56391429901123
    10. '):
' → logprob: -8.81391429901123

Token 75: ' a' (ID: 261)
  Prédit: 'ans'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'ans' → logprob: -0.6652788519859314
    2. 'a' → logprob: -1.5402789115905762
    3. ' ans' → logprob: -2.040278911590576
    4. 'n' → logprob: -3.165278911590576
    5. ' a' → logprob: -3.415278911590576
    6. ' n' → logprob: -4.540278911590576
    7. 'b' → logprob: -5.165278911590576
    8. 'x' → logprob: -5.540278911590576
    9. 'answer' → logprob: -5.727778911590576
    10. 'total' → logprob: -5.790278911590576

Token 76: '):
' (ID: 1883)
  Prédit: '):'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '):' → logprob: -0.021103015169501305
    2. ',' → logprob: -4.1461029052734375
    3. ')' → logprob: -6.1461029052734375
    4. '_' → logprob: -6.7711029052734375
    5. ' ):' → logprob: -6.8961029052734375
    6. '):
' → logprob: -7.8961029052734375
    7. 's' → logprob: -10.271102905273438
    8. '_,' → logprob: -10.271102905273438
    9. ' ,' → logprob: -10.396102905273438
    10. '=' → logprob: -10.521102905273438

Token 77: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.013098694384098053
    2. '(' → logprob: -5.38809871673584
    3. ':' → logprob: -5.38809871673584
    4. ' ' → logprob: -6.13809871673584
    5. ' if' → logprob: -7.13809871673584
    6. '    ' → logprob: -8.63809871673584
    7. ' (' → logprob: -8.76309871673584
    8. '       ' → logprob: -9.26309871673584
    9. ''' → logprob: -9.38809871673584
    10. '    
' → logprob: -9.63809871673584

Token 78: ' def' (ID: 1056)
  Prédit: ' if'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' if' → logprob: -0.034323692321777344
    2. 'if' → logprob: -4.034323692321777
    3. '   ' → logprob: -4.159323692321777
    4. ' print' → logprob: -8.034323692321777
    5. '```' → logprob: -10.284323692321777
    6. ' for' → logprob: -11.159323692321777
    7. 'print' → logprob: -11.284323692321777
    8. '    ' → logprob: -11.284323692321777
    9. ' return' → logprob: -12.034323692321777
    10. '    
' → logprob: -12.284323692321777

Token 79: ' loop' (ID: 11453)
  Prédit: ' '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' ' → logprob: -0.6086394190788269
    2. ' check' → logprob: -1.4836394786834717
    3. ' print' → logprob: -2.8586394786834717
    4. ' _' → logprob: -2.9836394786834717
    5. ' diff' → logprob: -3.3586394786834717
    6. ' calculate' → logprob: -3.7336394786834717
    7. ' a' → logprob: -4.358639240264893
    8. ' if' → logprob: -4.858639240264893
    9. '_' → logprob: -5.108639240264893
    10. ' is' → logprob: -5.358639240264893

Token 80: '(n' (ID: 2406)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(' → logprob: -0.30774766206741333
    2. ' (' → logprob: -2.6827476024627686
    3. '(n' → logprob: -2.6827476024627686
    4. ':' → logprob: -2.9327476024627686
    5. '_' → logprob: -3.4327476024627686
    6. '(i' → logprob: -3.9327476024627686
    7. '   ' → logprob: -5.057747840881348
    8. ' :' → logprob: -5.557747840881348
    9. ' ' → logprob: -5.807747840881348
    10. ' for' → logprob: -6.182747840881348

Token 81: '):
' (ID: 1883)
  Prédit: '):'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '):' → logprob: -0.05100614205002785
    2. ',' → logprob: -3.8010060787200928
    3. '=' → logprob: -3.8010060787200928
    4. ')' → logprob: -6.176006317138672
    5. ' ):' → logprob: -6.676006317138672
    6. '):
' → logprob: -7.801006317138672
    7. ' ,' → logprob: -8.301006317138672
    8. ' =' → logprob: -8.301006317138672
    9. ' in' → logprob: -8.676006317138672
    10. '   ' → logprob: -8.926006317138672

Token 82: '       ' (ID: 309)
  Prédit: '       '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '       ' → logprob: -0.019196078181266785
    2. '    ' → logprob: -5.519196033477783
    3. '<|end|>' → logprob: -5.644196033477783
    4. '   ' → logprob: -5.894196033477783
    5. '(n' → logprob: -6.519196033477783
    6. ' if' → logprob: -6.519196033477783
    7. ':' → logprob: -6.894196033477783
    8. ' ' → logprob: -7.019196033477783
    9. '(' → logprob: -7.644196033477783
    10. '        ' → logprob: -7.769196033477783

Token 83: ' if' (ID: 538)
  Prédit: ' if'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' if' → logprob: -0.05066147446632385
    2. 'if' (adapté à ' if') → logprob: -3.550661563873291
    3. ' for' → logprob: -5.175661563873291
    4. ' while' → logprob: -5.425661563873291
    5. '       ' → logprob: -5.550661563873291
    6. '    ' → logprob: -6.050661563873291
    7. ' ' → logprob: -6.550661563873291
    8. ' i' → logprob: -6.800661563873291
    9. '   ' → logprob: -7.300661563873291
    10. ' n' → logprob: -8.175661087036133

Token 84: ' n' (ID: 297)
  Prédit: ' n'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' n' → logprob: -0.20160014927387238
    2. 'n' → logprob: -1.701600193977356
    3. 'diff' → logprob: -9.576600074768066
    4. ' diff' → logprob: -9.826600074768066
    5. ' not' → logprob: -10.951600074768066
    6. '    ' → logprob: -11.076600074768066
    7. ' ' → logprob: -11.826600074768066
    8. '	n' → logprob: -11.951600074768066
    9. '(n' → logprob: -12.451600074768066
    10. 'not' → logprob: -13.451600074768066

Token 85: ' >=' (ID: 5064)
  Prédit: ' =='
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' ==' → logprob: -0.461747407913208
    2. ' >' → logprob: -1.586747407913208
    3. '==' → logprob: -2.586747407913208
    4. ' <=' → logprob: -2.961747407913208
    5. ' <' → logprob: -4.211747169494629
    6. '>' → logprob: -4.836747169494629
    7. ' >=' → logprob: -5.211747169494629
    8. '<=' → logprob: -5.211747169494629
    9. '<' → logprob: -5.961747169494629
    10. ' ' → logprob: -7.086747169494629

Token 86: ' ' (ID: 220)
  Prédit: 'len'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'len' → logprob: -0.47332626581192017
    2. 'diff' → logprob: -1.2233262062072754
    3. 'a' → logprob: -3.0983262062072754
    4. '100' → logprob: -4.473326206207275
    5. ' len' → logprob: -4.848326206207275
    6. '10' → logprob: -5.223326206207275
    7. '1' → logprob: -5.598326206207275
    8. ' diff' → logprob: -5.973326206207275
    9. '0' → logprob: -6.723326206207275
    10. ' a' → logprob: -7.223326206207275

Token 87: '100' (ID: 1353)
  Prédit: 'diff'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'diff' → logprob: -0.6340969204902649
    2. 'len' → logprob: -0.8840969204902649
    3. '100' → logprob: -3.88409686088562
    4. 'a' → logprob: -4.009097099304199
    5. '10' → logprob: -5.009097099304199
    6. '1' → logprob: -6.259097099304199
    7. '20' → logprob: -6.634097099304199
    8. ' len' → logprob: -7.509097099304199
    9. ' diff' → logprob: -7.884097099304199
    10. '30' → logprob: -7.884097099304199

Token 88: '0' (ID: 15)
  Prédit: ':'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ':' → logprob: -0.09980271756649017
    2. '000' → logprob: -3.0998027324676514
    3. '0' → logprob: -3.2248027324676514
    4. '00' → logprob: -4.974802494049072
    5. ':return' → logprob: -6.349802494049072
    6. ':
' → logprob: -7.724802494049072
    7. '   ' → logprob: -8.47480297088623
    8. '():' → logprob: -8.59980297088623
    9. '001' → logprob: -8.72480297088623
    10. '       ' → logprob: -9.34980297088623

Token 89: ':
' (ID: 734)
  Prédit: ':'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ':' → logprob: -0.004858361091464758
    2. '):' → logprob: -6.379858493804932
    3. ':
' → logprob: -6.379858493804932
    4. ' :' → logprob: -7.504858493804932
    5. ' and' → logprob: -7.879858493804932
    6. ' or' → logprob: -8.879858016967773
    7. '0' → logprob: -8.879858016967773
    8. ':return' → logprob: -8.879858016967773
    9. '<|end|>' → logprob: -10.504858016967773
    10. '():' → logprob: -10.879858016967773

Token 90: '           ' (ID: 352)
  Prédit: '           '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '           ' → logprob: -0.5404227375984192
    2. ':' → logprob: -1.0404226779937744
    3. '       ' → logprob: -3.2904226779937744
    4. ':return' → logprob: -4.4154229164123535
    5. ':
' → logprob: -5.1654229164123535
    6. ' return' → logprob: -5.2904229164123535
    7. '               ' → logprob: -7.2904229164123535
    8. '):' → logprob: -7.4154229164123535
    9. '<|end|>' → logprob: -7.5404229164123535
    10. '\n' → logprob: -7.6654229164123535

Token 91: ' return' (ID: 622)
  Prédit: ' return'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' return' → logprob: -0.3068443536758423
    2. 'return' (adapté à ' return') → logprob: -2.5568442344665527
    3. '       ' → logprob: -2.6818442344665527
    4. '           ' → logprob: -2.8068442344665527
    5. '               ' → logprob: -3.1818442344665527
    6. ' print' → logprob: -4.681844234466553
    7. 'print' → logprob: -5.306844234466553
    8. '   ' → logprob: -7.181844234466553
    9. ' ' → logprob: -9.056844711303711
    10. ':return' → logprob: -9.056844711303711

Token 92: '
' (ID: 198)
  Prédit: ' None'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' None' → logprob: -1.2471413612365723
    2. ' True' → logprob: -1.3721413612365723
    3. 'None' → logprob: -1.7471413612365723
    4. ' False' → logprob: -2.2471413612365723
    5. 'False' → logprob: -2.6221413612365723
    6. 'True' → logprob: -3.1221413612365723
    7. '
' → logprob: -3.6221413612365723
    8. '0' → logprob: -5.122141361236572
    9. '<|end|>' → logprob: -5.372141361236572
    10. ' ' → logprob: -5.372141361236572

Token 93: '       ' (ID: 309)
  Prédit: '
'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '
' → logprob: -0.8635689616203308
    2. '<|end|>' → logprob: -0.8635689616203308
    3. '       ' → logprob: -2.1135690212249756
    4. '\n' → logprob: -4.6135687828063965
    5. '        
' → logprob: -4.7385687828063965
    6. '<|end|>' → logprob: -5.2385687828063965
    7. '  
' → logprob: -5.7385687828063965
    8. '\
' → logprob: -6.1135687828063965
    9. '    
' → logprob: -6.2385687828063965
    10. ' else' → logprob: -7.7385687828063965

Token 94: ' if' (ID: 538)
  Prédit: ''
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False

Token 95: ' diff' (ID: 8868)
  Prédit: ' diff'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' diff' → logprob: -0.18569043278694153
    2. ' calculate' → logprob: -2.185690402984619
    3. 'diff' → logprob: -3.560690402984619
    4. ' abs' → logprob: -4.435690402984619
    5. ' a' → logprob: -5.435690402984619
    6. ' (' → logprob: -5.810690402984619
    7. ' check' → logprob: -5.935690402984619
    8. ' n' → logprob: -6.185690402984619
    9. 'calculate' → logprob: -6.560690402984619
    10. 'n' → logprob: -7.185690402984619

Token 96: ' ==' (ID: 951)
  Prédit: ' =='
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' ==' → logprob: -0.12335319817066193
    2. ' >' → logprob: -2.7483532428741455
    3. ' <=' → logprob: -3.7483532428741455
    4. ' !=' → logprob: -4.623353004455566
    5. ' ' → logprob: -5.123353004455566
    6. ' <' → logprob: -5.623353004455566
    7. '==' → logprob: -5.623353004455566
    8. ' >=' → logprob: -5.748353004455566
    9. '[' → logprob: -7.123353004455566
    10. ' %' → logprob: -7.623353004455566

Token 97: ' n' (ID: 297)
  Prédit: ' a'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' a' → logprob: -0.7296416163444519
    2. ' ' → logprob: -1.3546416759490967
    3. 'a' → logprob: -1.7296416759490967
    4. '0' → logprob: -2.8546416759490967
    5. '1' → logprob: -4.479641437530518
    6. ' n' → logprob: -5.104641437530518
    7. 'n' → logprob: -5.854641437530518
    8. '100' → logprob: -6.979641437530518
    9. ' -' → logprob: -7.854641437530518
    10. '2' → logprob: -8.104641914367676

Token 98: ' +' (ID: 659)
  Prédit: ':'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ':' → logprob: -0.03731122985482216
    2. ' and' → logprob: -3.662311315536499
    3. ':
' → logprob: -5.28731107711792
    4. ' or' → logprob: -6.28731107711792
    5. '+' → logprob: -6.91231107711792
    6. ' :' → logprob: -6.91231107711792
    7. 'and' → logprob: -7.28731107711792
    8. ' +' → logprob: -7.41231107711792
    9. ':return' → logprob: -9.037311553955078
    10. '   ' → logprob: -9.162311553955078

Token 99: ' ' (ID: 220)
  Prédit: 'a'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'a' → logprob: -0.7111738920211792
    2. '1' → logprob: -0.9611738920211792
    3. ' a' → logprob: -2.2111740112304688
    4. ' ' → logprob: -4.211174011230469
    5. '(a' → logprob: -7.836174011230469
    6. '2' → logprob: -8.586174011230469
    7. ' (' → logprob: -8.961174011230469
    8. '(' → logprob: -9.086174011230469
    9. '	a' → logprob: -9.086174011230469
    10. ' calculate' → logprob: -9.086174011230469

Token 100: '1' (ID: 16)
  Prédit: '1'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '1' → logprob: -0.6353304982185364
    2. 'a' → logprob: -0.7603304982185364
    3. ' a' → logprob: -6.260330677032471
    4. ' ' → logprob: -7.885330677032471
    5. '(a' → logprob: -8.635330200195312
    6. '2' → logprob: -9.760330200195312
    7. '   ' → logprob: -10.385330200195312
    8. '(' → logprob: -10.885330200195312
    9. '	a' → logprob: -11.510330200195312
    10. '100' → logprob: -11.635330200195312

Token 101: ':
' (ID: 734)
  Prédit: ':'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ':' → logprob: -0.125496044754982
    2. ' and' → logprob: -2.5004961490631104
    3. ':
' → logprob: -3.3754961490631104
    4. ' or' → logprob: -7.625495910644531
    5. 'and' → logprob: -8.125495910644531
    6. '       ' → logprob: -8.125495910644531
    7. '<|end|>' → logprob: -8.625495910644531
    8. '):' → logprob: -8.875495910644531
    9. '):
' → logprob: -9.125495910644531
    10. ')' → logprob: -10.250495910644531

Token 102: '           ' (ID: 352)
  Prédit: '           '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '           ' → logprob: -0.08177848905324936
    2. ':' → logprob: -3.2067785263061523
    3. '       ' → logprob: -4.206778526306152
    4. '<|end|>' → logprob: -4.456778526306152
    5. ' and' → logprob: -5.456778526306152
    6. ':
' → logprob: -6.706778526306152
    7. '               ' → logprob: -6.831778526306152
    8. ' print' → logprob: -7.331778526306152
    9. '<|end|>' → logprob: -7.331778526306152
    10. ')' → logprob: -7.581778526306152

Token 103: ' ans' (ID: 3345)
  Prédit: ' print'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' print' → logprob: -0.453664630651474
    2. 'print' → logprob: -1.9536646604537964
    3. '           ' → logprob: -2.078664541244507
    4. '       ' → logprob: -2.703664541244507
    5. ' check' → logprob: -3.828664541244507
    6. '               ' → logprob: -5.953664779663086
    7. 'check' → logprob: -6.078664779663086
    8. '   ' → logprob: -6.453664779663086
    9. ' if' → logprob: -6.953664779663086
    10. ' return' → logprob: -7.953664779663086

Token 104: ' =' (ID: 314)
  Prédit: ' ='
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' =' → logprob: -0.007300159893929958
    2. '=' → logprob: -5.63230037689209
    3. ' ' → logprob: -6.88230037689209
    4. ',' → logprob: -7.00730037689209
    5. ')' → logprob: -7.75730037689209
    6. '           ' → logprob: -8.38230037689209
    7. '        ' → logprob: -8.50730037689209
    8. '       ' → logprob: -8.63230037689209
    9. '    ' → logprob: -8.88230037689209
    10. ':' → logprob: -9.50730037689209

Token 105: ' calculate' (ID: 17950)
  Prédit: 'calculate'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'calculate' → logprob: -0.5271798968315125
    2. ' calculate' → logprob: -0.9021798968315125
    3. 'check' → logprob: -6.152179718017578
    4. ' check' → logprob: -6.402179718017578
    5. '           ' → logprob: -9.652179718017578
    6. 'a' → logprob: -10.277179718017578
    7. 'n' → logprob: -10.402179718017578
    8. 'calc' → logprob: -10.652179718017578
    9. ' a' → logprob: -10.902179718017578
    10. ' ' → logprob: -11.027179718017578

Token 106: '_ans' (ID: 146254)
  Prédit: '_ans'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_ans' → logprob: -0.00010509284038562328
    2. 'ans' → logprob: -9.875104904174805
    3. '_diff' → logprob: -9.875104904174805
    4. '	ans' → logprob: -14.750104904174805
    5. '(ans' → logprob: -14.750104904174805
    6. '_an' → logprob: -15.000104904174805
    7. ' ans' → logprob: -15.250104904174805
    8. '_' → logprob: -15.250104904174805
    9. '_answer' → logprob: -16.250104904174805
    10. '_a' → logprob: -16.250104904174805

Token 107: '(n' (ID: 2406)
  Prédit: '(n'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(n' → logprob: -0.0036891514901071787
    2. '(' → logprob: -6.253689289093018
    3. '(diff' → logprob: -6.378689289093018
    4. 'n' → logprob: -11.00368881225586
    5. 'diff' → logprob: -11.12868881225586
    6. '(a' → logprob: -11.50368881225586
    7. '(
' → logprob: -12.62868881225586
    8. ' (' → logprob: -12.62868881225586
    9. '(s' → logprob: -12.87868881225586
    10. '((' → logprob: -13.25368881225586

Token 108: ',' (ID: 11)
  Prédit: ','
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ',' → logprob: -0.0021132626570761204
    2. ',a' → logprob: -6.627113342285156
    3. ' ,' → logprob: -7.502113342285156
    4. '+' → logprob: -9.252113342285156
    5. 'a' → logprob: -9.877113342285156
    6. ',n' → logprob: -11.252113342285156
    7. ',
' → logprob: -11.377113342285156
    8. '-' → logprob: -11.752113342285156
    9. '   ' → logprob: -12.002113342285156
    10. ' +' → logprob: -12.127113342285156

Token 109: ' a' (ID: 261)
  Prédit: 'a'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'a' → logprob: -0.029752571135759354
    2. ' a' → logprob: -3.529752492904663
    3. '	a' → logprob: -13.529752731323242
    4. '   ' → logprob: -15.529752731323242
    5. ')a' → logprob: -15.779752731323242
    6. '(a' → logprob: -16.029752731323242
    7. ' ' → logprob: -16.654752731323242
    8. '
' → logprob: -17.279752731323242
    9. '+a' → logprob: -17.279752731323242
    10. '"a' → logprob: -17.404752731323242

Token 110: ')
' (ID: 446)
  Prédit: ')
'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')
' → logprob: -0.034484025090932846
    2. ')' → logprob: -3.4094839096069336
    3. ')
' → logprob: -7.534483909606934
    4. ')

' → logprob: -8.409483909606934
    5. '           ' → logprob: -9.909483909606934
    6. '               ' → logprob: -11.284483909606934
    7. '       ' → logprob: -11.284483909606934
    8. ' )
' → logprob: -13.284483909606934
    9. '   ' → logprob: -13.909483909606934
    10. ')`
' → logprob: -14.284483909606934

Token 111: '           ' (ID: 352)
  Prédit: '           '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '           ' → logprob: -0.00011546355381142348
    2. '       ' → logprob: -10.250115394592285
    3. 'print' → logprob: -10.250115394592285
    4. '            
' → logprob: -11.250115394592285
    5. '<|end|>' → logprob: -11.625115394592285
    6. '               ' → logprob: -11.875115394592285
    7. '```' → logprob: -12.125115394592285
    8. '   ' → logprob: -12.750115394592285
    9. ' print' → logprob: -13.750115394592285
    10. '        
' → logprob: -14.500115394592285

Token 112: ' output' (ID: 4733)
  Prédit: '           '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '           ' → logprob: -0.1620350182056427
    2. 'print' → logprob: -2.1620349884033203
    3. ' print' → logprob: -3.4120349884033203
    4. 'check' → logprob: -7.28703498840332
    5. ' check' → logprob: -7.28703498840332
    6. '       ' → logprob: -9.28703498840332
    7. '               ' → logprob: -10.78703498840332
    8. '   ' → logprob: -11.03703498840332
    9. '```' → logprob: -11.66203498840332
    10. 'break' → logprob: -13.03703498840332

Token 113: '_answer' (ID: 65702)
  Prédit: ' ='
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' =' → logprob: -0.3716121315956116
    2. '=' → logprob: -1.8716120719909668
    3. '()' → logprob: -1.9966120719909668
    4. '(' → logprob: -4.621612071990967
    5. 's' → logprob: -5.996612071990967
    6. '_' → logprob: -6.496612071990967
    7. '_str' → logprob: -7.121612071990967
    8. '()
' → logprob: -7.246612071990967
    9. ')' → logprob: -7.371612071990967
    10. '(ans' → logprob: -7.371612071990967

Token 114: '(ans' (ID: 70054)
  Prédit: '(ans'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(ans' → logprob: -0.05928211286664009
    2. '(' → logprob: -2.934282064437866
    3. '("("' → logprob: -6.184282302856445
    4. '(s' → logprob: -7.059282302856445
    5. '('' → logprob: -7.809282302856445
    6. '("(' → logprob: -8.059282302856445
    7. 's' → logprob: -8.809282302856445
    8. ' (' → logprob: -8.809282302856445
    9. '('(' → logprob: -8.934282302856445
    10. '(f' → logprob: -9.184282302856445

Token 115: ')
' (ID: 446)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')' → logprob: -0.14508409798145294
    2. ')
' → logprob: -2.0200841426849365
    3. '()' → logprob: -6.770083904266357
    4. '())' → logprob: -7.770083904266357
    5. '())
' → logprob: -8.145084381103516
    6. '()
' → logprob: -8.395084381103516
    7. ')
' → logprob: -9.145084381103516
    8. '           ' → logprob: -9.395084381103516
    9. '       ' → logprob: -9.645084381103516
    10. '               ' → logprob: -11.020084381103516

Token 116: '       ' (ID: 309)
  Prédit: '           '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '           ' → logprob: -0.03899893909692764
    2. '       ' → logprob: -3.28899884223938
    3. '   ' → logprob: -8.0389986038208
    4. '<|end|>' → logprob: -8.2889986038208
    5. 'else' → logprob: -9.1639986038208
    6. '```' → logprob: -9.4139986038208
    7. 'return' → logprob: -9.6639986038208
    8. '               ' → logprob: -10.1639986038208
    9. '<|end|>' → logprob: -10.9139986038208
    10. ' else' → logprob: -11.2889986038208

Token 117: ' loop' (ID: 11453)
  Prédit: '       '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '       ' → logprob: -0.1814659833908081
    2. 'else' → logprob: -2.5564661026000977
    3. ' else' → logprob: -3.3064661026000977
    4. '           ' → logprob: -3.3064661026000977
    5. '   ' → logprob: -4.306466102600098
    6. '	' → logprob: -7.431466102600098
    7. '	else' → logprob: -8.306466102600098
    8. '
' → logprob: -8.931466102600098
    9. ' ' → logprob: -9.306466102600098
    10. '	   ' → logprob: -9.681466102600098

Token 118: '(n' (ID: 2406)
  Prédit: '(n'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(n' → logprob: -0.002483149990439415
    2. '(' → logprob: -6.002483367919922
    3. ' (' → logprob: -12.252483367919922
    4. '(
' → logprob: -13.252483367919922
    5. '((' → logprob: -14.627483367919922
    6. '(s' → logprob: -15.377483367919922
    7. '(next' → logprob: -16.752483367919922
    8. '```' → logprob: -17.377483367919922
    9. '()' → logprob: -17.627483367919922
    10. '(+' → logprob: -18.127483367919922

Token 119: ' +' (ID: 659)
  Prédit: '+'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '+' → logprob: -0.20142386853694916
    2. ' +' → logprob: -1.7014238834381104
    3. '+)' → logprob: -11.701423645019531
    4. ')' → logprob: -13.701423645019531
    5. '+
' → logprob: -14.826423645019531
    6. '()+' → logprob: -15.201423645019531
    7. '+n' → logprob: -15.826423645019531
    8. ')+' → logprob: -16.20142364501953
    9. ' ' → logprob: -16.20142364501953
    10. ' +
' → logprob: -16.45142364501953

Token 120: ' ' (ID: 220)
  Prédit: '1'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '1' → logprob: -0.00012928384239785373
    2. ' ' → logprob: -9.000129699707031
    3. '   ' → logprob: -12.375129699707031
    4. '       ' → logprob: -14.500129699707031
    5. '<|end|>' → logprob: -14.750129699707031
    6. ')' → logprob: -16.00012969970703
    7. '```' → logprob: -16.50012969970703
    8. '  ' → logprob: -16.50012969970703
    9. 'def' → logprob: -16.62512969970703
    10. '    ' → logprob: -16.87512969970703

Token 121: '1' (ID: 16)
  Prédit: '1'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '1' → logprob: -1.8670179997570813e-05
    2. ' ' → logprob: -11.000019073486328
    3. '   ' → logprob: -14.250019073486328
    4. 'def' → logprob: -14.625019073486328
    5. '<|end|>' → logprob: -15.687519073486328
    6. '```' → logprob: -16.062519073486328
    7. '2' → logprob: -16.187519073486328
    8. '...' → logprob: -16.375019073486328
    9. ')' → logprob: -16.812519073486328
    10. '  ' → logprob: -16.812519073486328

Token 122: ')
' (ID: 446)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')' → logprob: -0.0011818927014246583
    2. ')
' → logprob: -6.7511820793151855
    3. '   ' → logprob: -12.626181602478027
    4. ')

' → logprob: -12.626181602478027
    5. '<|end|>' → logprob: -13.501181602478027
    6. '       ' → logprob: -13.751181602478027
    7. ')return' → logprob: -14.001181602478027
    8. '
' → logprob: -15.126181602478027
    9. ')
' → logprob: -15.376181602478027
    10. ' )' → logprob: -15.501181602478027

Token 123: '   ' (ID: 271)
  Prédit: ''
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False

Token 124: ' loop' (ID: 11453)
  Prédit: '
'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '
' → logprob: -0.8143943548202515
    2. '<|end|>' → logprob: -0.9393943548202515
    3. '   ' → logprob: -2.189394474029541
    4. 'check' → logprob: -4.064394474029541
    5. 'def' → logprob: -4.564394474029541
    6. ' check' → logprob: -4.814394474029541
    7. 'output' → logprob: -5.189394474029541
    8. ' ' → logprob: -6.064394474029541
    9. ' loop' → logprob: -6.189394474029541
    10. 'loop' (adapté à ' loop') → logprob: -6.314394474029541

Token 125: '(' (ID: 7)
  Prédit: '('
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(' → logprob: -2.0100624169572257e-05
    2. '()' → logprob: -11.375020027160645
    3. '0' → logprob: -11.750020027160645
    4. ' (' → logprob: -15.375020027160645
    5. '()(' → logprob: -15.750020027160645
    6. '((' → logprob: -16.37502098083496
    7. '(
' → logprob: -17.25002098083496
    8. '(n' → logprob: -18.00002098083496
    9. '(None' → logprob: -18.50002098083496
    10. '(int' → logprob: -18.50002098083496

Token 126: '0' (ID: 15)
  Prédit: '0'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '0' → logprob: -0.0003131784324068576
    2. '1' → logprob: -8.125312805175781
    3. ' ' → logprob: -11.250312805175781
    4. ')' → logprob: -13.750312805175781
    5. '   ' → logprob: -14.000312805175781
    6. '2' → logprob: -14.375312805175781
    7. '10' → logprob: -15.000312805175781
    8. 'def' → logprob: -15.125312805175781
    9. '5' → logprob: -15.500312805175781
    10. '3' → logprob: -15.625312805175781

Token 127: ')

' (ID: 1029)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')' → logprob: -1.7120533811976202e-05
    2. ')
' → logprob: -11.000017166137695
    3. ' )' → logprob: -15.875017166137695
    4. ')

' → logprob: -16.000017166137695
    5. '<|end|>' → logprob: -17.625017166137695
    6. ')return' → logprob: -17.750017166137695
    7. '))' → logprob: -17.875017166137695
    8. '
' → logprob: -18.000017166137695
    9. '),' → logprob: -18.250017166137695
    10. ')`' → logprob: -19.125017166137695

Token 128: 'def' (ID: 1314)
  Prédit: 'def'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'def' → logprob: -0.0001037815964082256
    2. '<|end|>' → logprob: -9.750103950500488
    3. '
' → logprob: -10.750103950500488
    4. ')' → logprob: -11.500103950500488
    5. ' def' → logprob: -12.125103950500488
    6. '\' → logprob: -12.625103950500488
    7. '    
' → logprob: -13.750103950500488
    8. '  
' → logprob: -14.125103950500488
    9. '#' → logprob: -14.250103950500488
    10. 'print' → logprob: -14.875103950500488

Token 129: ' output' (ID: 4733)
  Prédit: 'output'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'output' → logprob: -0.5759630799293518
    2. ' output' → logprob: -0.8259630799293518
    3. '_output' → logprob: -11.325963020324707
    4. ' main' → logprob: -12.450963020324707
    5. 'input' → logprob: -13.075963020324707
    6. 'main' → logprob: -13.075963020324707
    7. 'def' → logprob: -13.700963020324707
    8. 'print' → logprob: -14.450963020324707
    9. 'Output' → logprob: -14.450963020324707
    10. ' input' → logprob: -14.700963020324707

Token 130: '_answer' (ID: 65702)
  Prédit: '_answer'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_answer' → logprob: -4.251091377227567e-05
    2. '_' → logprob: -10.250042915344238
    3. '_ans' → logprob: -12.500042915344238
    4. '_answers' → logprob: -14.000042915344238
    5. '_question' → logprob: -14.375042915344238
    6. '_a' → logprob: -14.750042915344238
    7. '_string' → logprob: -15.000042915344238
    8. '_text' → logprob: -15.250042915344238
    9. '_output' → logprob: -15.500042915344238
    10. '_print' → logprob: -16.375041961669922

Token 131: '(ans' (ID: 70054)
  Prédit: '(ans'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(ans' → logprob: -0.057409025728702545
    2. '(' → logprob: -2.9324090480804443
    3. '(answer' → logprob: -6.057408809661865
    4. '(a' → logprob: -10.057409286499023
    5. '("("' → logprob: -10.432409286499023
    6. '(value' → logprob: -10.557409286499023
    7. '(output' → logprob: -11.432409286499023
    8. '(s' → logprob: -11.807409286499023
    9. '(an' → logprob: -11.932409286499023
    10. ' (' → logprob: -11.932409286499023

Token 132: '):
' (ID: 1883)
  Prédit: '):'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '):' → logprob: -0.0009284949628636241
    2. '):
' → logprob: -7.0009284019470215
    3. ')' → logprob: -11.12592887878418
    4. ':' → logprob: -13.75092887878418
    5. ' ):' → logprob: -14.50092887878418
    6. '():' → logprob: -14.87592887878418
    7. '):
' → logprob: -15.00092887878418
    8. '   ' → logprob: -17.25092887878418
    9. '):

' → logprob: -17.50092887878418
    10. '}:' → logprob: -18.87592887878418

Token 133: '   ' (ID: 271)
  Prédit: ' print'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' print' → logprob: -0.3490152955055237
    2. 'print' → logprob: -1.349015235900879
    3. '   ' → logprob: -3.349015235900879
    4. '```' → logprob: -12.849015235900879
    5. '	print' → logprob: -15.474015235900879
    6. 'def' → logprob: -17.224016189575195
    7. '`' → logprob: -17.474016189575195
    8. '    ' → logprob: -17.724016189575195
    9. ' ' → logprob: -17.724016189575195
    10. '  ' → logprob: -17.849016189575195

Token 134: ' print' (ID: 2123)
  Prédit: 'print'
  Correct (stricte): False
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'print' (adapté à ' print') → logprob: -4.7159857786027715e-05
    2. ' print' → logprob: -10.000046730041504
    3. '   ' → logprob: -13.375046730041504
    4. 'pr' → logprob: -16.25004768371582
    5. 'prin' → logprob: -17.62504768371582
    6. '```' → logprob: -17.87504768371582
    7. 'if' → logprob: -19.62504768371582
    8. 'prit' → logprob: -20.00004768371582
    9. 'pass' → logprob: -20.25004768371582
    10. '	print' → logprob: -20.37504768371582

Token 135: '(ans' (ID: 70054)
  Prédit: '(ans'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(ans' → logprob: -0.0015058133285492659
    2. '(' → logprob: -6.5015058517456055
    3. '()' → logprob: -13.751505851745605
    4. '(abs' → logprob: -13.876505851745605
    5. '(answer' → logprob: -14.751505851745605
    6. 'ans' → logprob: -15.126505851745605
    7. '(f' → logprob: -15.501505851745605
    8. '('' → logprob: -16.00150489807129
    9. '((' → logprob: -16.12650489807129
    10. '(`' → logprob: -16.50150489807129

Token 136: ')

' (ID: 1029)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ')' → logprob: -1.9361264946837764e-07
    2. ')
' → logprob: -16.25
    3. ' )' → logprob: -17.0
    4. ')`' → logprob: -19.0
    5. '))' → logprob: -19.125
    6. ')}' → logprob: -19.75
    7. '')' → logprob: -19.75
    8. '),' → logprob: -20.0
    9. '()' → logprob: -20.25
    10. '}' → logprob: -20.625

Token 137: 'def' (ID: 1314)
  Prédit: 'def'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'def' → logprob: -0.003039154689759016
    2. 's' → logprob: -6.628039360046387
    3. 'if' → logprob: -7.378039360046387
    4. '#' → logprob: -7.753039360046387
    5. 'input' → logprob: -8.253039360046387
    6. 'print' → logprob: -9.253039360046387
    7. '<|end|>' → logprob: -9.253039360046387
    8. 'n' → logprob: -9.753039360046387
    9. 'for' → logprob: -10.003039360046387
    10. 'a' → logprob: -11.003039360046387

Token 138: ' main' (ID: 2758)
  Prédit: ' main'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' main' → logprob: -0.20141586661338806
    2. 'main' → logprob: -1.7014158964157104
    3. '__' → logprob: -13.451416015625
    4. '_main' → logprob: -14.701416015625
    5. ' __' → logprob: -14.951416015625
    6. ' run' → logprob: -16.326416015625
    7. ' process' → logprob: -16.451416015625
    8. '	main' → logprob: -16.451416015625
    9. 'process' → logprob: -16.701416015625
    10. 'def' → logprob: -17.076416015625

Token 139: '():
' (ID: 8595)
  Prédit: '():'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '():' → logprob: -1.1279553291387856e-05
    2. ' ():' → logprob: -11.750011444091797
    3. '():
' → logprob: -13.125011444091797
    4. '()' → logprob: -13.625011444091797
    5. '(' → logprob: -16.125011444091797
    6. '_' → logprob: -16.750011444091797
    7. '():
' → logprob: -17.625011444091797
    8. '()>' → logprob: -19.125011444091797
    9. '(":' → logprob: -19.375011444091797
    10. '():

' → logprob: -19.500011444091797

Token 140: '   ' (ID: 271)
  Prédit: ' s'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' s' → logprob: -0.5650178790092468
    2. 's' → logprob: -1.1900179386138916
    3. '   ' → logprob: -2.0650179386138916
    4. ' input' → logprob: -7.8150177001953125
    5. 'input' → logprob: -8.815017700195312
    6. ' raw' → logprob: -10.815017700195312
    7. ' inputs' → logprob: -11.940017700195312
    8. ' line' → logprob: -12.190017700195312
    9. '	s' → logprob: -12.190017700195312
    10. 'n' → logprob: -12.315017700195312

Token 141: ' s' (ID: 265)
  Prédit: 's'
  Correct (stricte): False
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 's' (adapté à ' s') → logprob: -0.026537848636507988
    2. ' s' → logprob: -3.6515378952026367
    3. '   ' → logprob: -9.526537895202637
    4. 'input' → logprob: -9.526537895202637
    5. 'data' → logprob: -10.401537895202637
    6. 'a' → logprob: -11.401537895202637
    7. 'n' → logprob: -11.651537895202637
    8. ' input' → logprob: -11.776537895202637
    9. 'raw' → logprob: -11.776537895202637
    10. 'line' → logprob: -12.401537895202637

Token 142: ' =' (ID: 314)
  Prédit: ' ='
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' =' → logprob: -0.029791690409183502
    2. '=' → logprob: -3.5297915935516357
    3. '=input' → logprob: -10.154791831970215
    4. '_' → logprob: -13.904791831970215
    5. ' ' → logprob: -14.779791831970215
    6. '   ' → logprob: -15.404791831970215
    7. '_input' → logprob: -15.404791831970215
    8. 's' → logprob: -15.779791831970215
    9. '_=' → logprob: -15.904791831970215
    10. ' ' → logprob: -16.6547908782959

Token 143: ' read' (ID: 1729)
  Prédit: 'read'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'read' → logprob: -0.4741206467151642
    2. ' read' → logprob: -0.9741206169128418
    3. 'input' → logprob: -10.47412109375
    4. ' input' → logprob: -11.22412109375
    5. '(read' → logprob: -13.47412109375
    6. '	read' → logprob: -14.84912109375
    7. ' ' → logprob: -16.22412109375
    8. 'split' → logprob: -16.97412109375
    9. '  ' → logprob: -17.34912109375
    10. '_read' → logprob: -17.34912109375

Token 144: '_input' (ID: 12507)
  Prédit: '_input'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_input' → logprob: -0.00014358828775584698
    2. '_' → logprob: -8.875144004821777
    3. '_line' → logprob: -13.625144004821777
    4. '()' → logprob: -14.125144004821777
    5. '_output' → logprob: -14.875144004821777
    6. '_inputs' → logprob: -14.875144004821777
    7. '_in' → logprob: -15.125144004821777
    8. ' _' → logprob: -15.375144004821777
    9. '_Input' → logprob: -15.875144004821777
    10. '__' → logprob: -16.12514305114746

Token 145: '()
' (ID: 1234)
  Prédit: '()'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '()' → logprob: -2.045823566731997e-05
    2. '()
' → logprob: -11.000020027160645
    3. '()

' → logprob: -13.000020027160645
    4. '())' → logprob: -14.750020027160645
    5. ' ()' → logprob: -15.250020027160645
    6. '(' → logprob: -15.375020027160645
    7. '()`' → logprob: -16.12502098083496
    8. ')' → logprob: -16.50002098083496
    9. '()"' → logprob: -16.50002098083496
    10. '().' → logprob: -16.62502098083496

Token 146: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.0697910264134407
    2. 'lst' → logprob: -2.944791078567505
    3. ' lst' → logprob: -4.569790840148926
    4. 'tokens' → logprob: -6.194790840148926
    5. 'a' → logprob: -6.694790840148926
    6. ' parts' → logprob: -7.569790840148926
    7. '    
' → logprob: -9.194790840148926
    8. 'parts' → logprob: -9.444790840148926
    9. ' tokens' → logprob: -9.569790840148926
    10. 'b' → logprob: -9.819790840148926

Token 147: ' lst' (ID: 33384)
  Prédit: 'lst'
  Correct (stricte): False
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'lst' (adapté à ' lst') → logprob: -0.009195538237690926
    2. ' lst' → logprob: -4.759195327758789
    3. 'words' → logprob: -8.759195327758789
    4. 'tokens' → logprob: -9.259195327758789
    5. 'a' → logprob: -9.509195327758789
    6. 'parts' → logprob: -9.634195327758789
    7. 'arr' → logprob: -9.759195327758789
    8. 'l' → logprob: -9.884195327758789
    9. '   ' → logprob: -10.134195327758789
    10. ' parts' → logprob: -11.384195327758789

Token 148: ' =' (ID: 314)
  Prédit: ' ='
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' =' → logprob: -0.06197284162044525
    2. '=' → logprob: -2.8119728565216064
    3. '_' → logprob: -12.561972618103027
    4. 's' → logprob: -14.311972618103027
    5. '(' → logprob: -14.561972618103027
    6. ')' → logprob: -15.061972618103027
    7. ' ' → logprob: -17.186973571777344
    8. ',' → logprob: -17.311973571777344
    9. '  ' → logprob: -17.311973571777344
    10. '()' → logprob: -17.436973571777344

Token 149: ' split' (ID: 12648)
  Prédit: 'split'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'split' → logprob: -0.20141646265983582
    2. ' split' → logprob: -1.7014164924621582
    3. '(split' → logprob: -12.701416015625
    4. 'spl' → logprob: -16.951416015625
    5. ' ' → logprob: -17.826416015625
    6. '   ' → logprob: -17.951416015625
    7. '.split' → logprob: -18.076416015625
    8. 'plit' → logprob: -18.201416015625
    9. '_split' → logprob: -18.576416015625
    10. '  ' → logprob: -18.951416015625

Token 150: '_input' (ID: 12507)
  Prédit: '_input'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_input' → logprob: -4.320199877838604e-07
    2. '_' → logprob: -16.125
    3. '_output' → logprob: -16.5
    4. 'input' → logprob: -16.75
    5. '_inputs' → logprob: -16.75
    6. '(s' → logprob: -17.125
    7. 's' → logprob: -18.625
    8. '_s' → logprob: -18.75
    9. '(' → logprob: -18.875
    10. '(input' → logprob: -18.875

Token 151: '(s' (ID: 1858)
  Prédit: '(s'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(s' → logprob: -1.1756367712223437e-05
    2. '(' → logprob: -11.375011444091797
    3. 's' → logprob: -16.000011444091797
    4. ' (' → logprob: -17.000011444091797
    5. '(lst' → logprob: -17.625011444091797
    6. '```' → logprob: -20.000011444091797
    7. '(ls' → logprob: -21.875011444091797
    8. '(l' → logprob: -22.250011444091797
    9. '(S' → logprob: -22.625011444091797
    10. '(n' → logprob: -22.750011444091797

Token 152: ')
' (ID: 446)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')' → logprob: -0.006699973251670599
    2. '(s' → logprob: -5.131700038909912
    3. ')
' → logprob: -8.256699562072754
    4. '(' → logprob: -8.256699562072754
    5. 's' → logprob: -9.131699562072754
    6. '   ' → logprob: -9.381699562072754
    7. ')s' → logprob: -11.256699562072754
    8. 'a' → logprob: -11.631699562072754
    9. '(lst' → logprob: -12.131699562072754
    10. '[' → logprob: -12.131699562072754

Token 153: '   ' (ID: 271)
  Prédit: 'a'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'a' → logprob: -0.2409524917602539
    2. '   ' → logprob: -1.740952491760254
    3. ' a' → logprob: -4.490952491760254
    4. 'n' → logprob: -4.490952491760254
    5. 'ints' → logprob: -4.490952491760254
    6. 'nums' → logprob: -6.365952491760254
    7. 'numbers' → logprob: -7.240952491760254
    8. 'lst' → logprob: -7.490952491760254
    9. ' ' → logprob: -7.740952491760254
    10. '<|end|>' → logprob: -7.865952491760254

Token 154: ' a' (ID: 261)
  Prédit: 'ints'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'ints' → logprob: -0.07304906100034714
    2. 'nums' → logprob: -2.9480490684509277
    3. 'a' (adapté à ' a') → logprob: -4.448049068450928
    4. 'int' → logprob: -5.698049068450928
    5. 'numbers' → logprob: -6.198049068450928
    6. 'n' → logprob: -8.19804859161377
    7. 'lst' → logprob: -8.57304859161377
    8. 'inte' → logprob: -9.57304859161377
    9. ' ints' → logprob: -9.57304859161377
    10. 'num' → logprob: -9.69804859161377

Token 155: ',' (ID: 11)
  Prédit: ' ='
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' =' → logprob: -0.0019330393988639116
    2. '=' → logprob: -6.2519330978393555
    3. '_' → logprob: -12.751933097839355
    4. 's' → logprob: -14.001933097839355
    5. ',' → logprob: -15.126933097839355
    6. ')' → logprob: -16.00193214416504
    7. ' ' → logprob: -16.12693214416504
    8. ' =)' → logprob: -16.75193214416504
    9. '<|end|>' → logprob: -17.25193214416504
    10. '_=' → logprob: -17.37693214416504

Token 156: ' b' (ID: 287)
  Prédit: 'b'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'b' → logprob: -0.06258127093315125
    2. ' b' → logprob: -3.8125813007354736
    3. '_' → logprob: -4.6875810623168945
    4. '=' → logprob: -4.8125810623168945
    5. 'diff' → logprob: -5.3125810623168945
    6. ' =' → logprob: -5.8125810623168945
    7. 'n' → logprob: -5.8125810623168945
    8. '*' → logprob: -5.8125810623168945
    9. 'lst' → logprob: -6.1875810623168945
    10. '*b' → logprob: -6.5625810623168945

Token 157: ' =' (ID: 314)
  Prédit: ' ='
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' =' → logprob: -0.04311018064618111
    2. '=' → logprob: -3.1681101322174072
    3. ',' → logprob: -9.168109893798828
    4. '<|end|>' → logprob: -12.168109893798828
    5. ')' → logprob: -14.543109893798828
    6. '<|end|>' → logprob: -15.168109893798828
    7. ' ' → logprob: -15.668109893798828
    8. ' =
' → logprob: -16.168109893798828
    9. '[' → logprob: -16.293109893798828
    10. ' =)' → logprob: -16.418109893798828

Token 158: ' convert' (ID: 8452)
  Prédit: 'convert'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'convert' → logprob: -0.018158607184886932
    2. ' convert' → logprob: -4.018158435821533
    3. 'map' → logprob: -12.143158912658691
    4. '(convert' → logprob: -13.268158912658691
    5. ' map' → logprob: -13.893158912658691
    6. '   ' → logprob: -15.268158912658691
    7. '_convert' → logprob: -15.893158912658691
    8. '[' → logprob: -16.018157958984375
    9. '.convert' → logprob: -16.518157958984375
    10. '  ' → logprob: -16.643157958984375

Token 159: '_to' (ID: 5089)
  Prédit: '_to'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_to' → logprob: 0.0
    2. 'to' → logprob: -17.75
    3. '_' → logprob: -18.0
    4. '##_' → logprob: -18.5
    5. 'tolist' → logprob: -18.5
    6. '```' → logprob: -19.125
    7. ')_' → logprob: -19.25
    8. '(lst' → logprob: -19.25
    9. 'To' → logprob: -19.375
    10. '_into' → logprob: -19.375

Token 160: '_int' (ID: 12285)
  Prédit: '_int'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_int' → logprob: -0.17562833428382874
    2. 'ints' → logprob: -2.300628423690796
    3. 'int' → logprob: -2.800628423690796
    4. 'Ints' → logprob: -9.800628662109375
    5. 's' → logprob: -10.300628662109375
    6. 'Int' → logprob: -12.300628662109375
    7. 'a' → logprob: -12.675628662109375
    8. ' ints' → logprob: -13.800628662109375
    9. 'inds' → logprob: -14.300628662109375
    10. 'nts' → logprob: -14.550628662109375

Token 161: 's' (ID: 82)
  Prédit: 's'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 's' → logprob: -4.961759259458631e-06
    2. ' s' → logprob: -13.000004768371582
    3. '(s' → logprob: -13.750004768371582
    4. 'a' → logprob: -14.625004768371582
    5. '[s' → logprob: -14.750004768371582
    6. '_s' → logprob: -15.375004768371582
    7. '```' → logprob: -16.1250057220459
    8. 'lst' → logprob: -16.5000057220459
    9. 'ints' → logprob: -16.6250057220459
    10. ''s' → logprob: -16.8750057220459

Token 162: '(lst' (ID: 95688)
  Prédit: '(lst'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(lst' → logprob: -8.180258191714529e-06
    2. '(' → logprob: -12.000008583068848
    3. '(l' → logprob: -14.375008583068848
    4. '(ls' → logprob: -14.500008583068848
    5. 'lst' → logprob: -15.000008583068848
    6. ' (' → logprob: -15.375008583068848
    7. '([' → logprob: -16.25000762939453
    8. '(list' → logprob: -16.50000762939453
    9. '(lista' → logprob: -17.00000762939453
    10. '((' → logprob: -17.37500762939453

Token 163: ')
' (ID: 446)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')' → logprob: -0.00826562475413084
    2. '())' → logprob: -5.008265495300293
    3. '()' → logprob: -6.508265495300293
    4. ')
' → logprob: -10.383265495300293
    5. '[' → logprob: -11.508265495300293
    6. ' )' → logprob: -12.383265495300293
    7. '()
' → logprob: -12.883265495300293
    8. '(' → logprob: -13.258265495300293
    9. '   ' → logprob: -13.508265495300293
    10. '))' → logprob: -13.633265495300293

Token 164: '   ' (ID: 271)
  Prédit: 'diff'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'diff' → logprob: -0.314511775970459
    2. ' diff' → logprob: -1.689511775970459
    3. '   ' → logprob: -3.064511775970459
    4. '
' → logprob: -3.439511775970459
    5. 'd' → logprob: -5.814511775970459
    6. '    
' → logprob: -6.689511775970459
    7. '	diff' → logprob: -6.689511775970459
    8. '```' → logprob: -8.439512252807617
    9. 'c' → logprob: -8.689512252807617
    10. ' d' → logprob: -9.064512252807617

Token 165: ' diff' (ID: 8868)
  Prédit: 'diff'
  Correct (stricte): False
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'diff' (adapté à ' diff') → logprob: -0.0007768734358251095
    2. 'd' → logprob: -7.750776767730713
    3. ' diff' → logprob: -8.000777244567871
    4. '
' → logprob: -12.000777244567871
    5. 'dif' → logprob: -13.125777244567871
    6. '   ' → logprob: -14.250777244567871
    7. 'difference' → logprob: -14.375777244567871
    8. '	diff' → logprob: -14.375777244567871
    9. 'def' → logprob: -15.250777244567871
    10. 'if' → logprob: -16.125776290893555

Token 166: ' =' (ID: 314)
  Prédit: ' ='
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' =' → logprob: -0.008619185537099838
    2. '=' → logprob: -4.75861930847168
    3. '_' → logprob: -13.13361930847168
    4. ',' → logprob: -13.25861930847168
    5. ' ' → logprob: -15.25861930847168
    6. ')' → logprob: -15.50861930847168
    7. ' ' → logprob: -16.25861930847168
    8. ' =
' → logprob: -16.25861930847168
    9. 's' → logprob: -16.50861930847168
    10. ' =)' → logprob: -16.88361930847168

Token 167: ' calculate' (ID: 17950)
  Prédit: 'calculate'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'calculate' → logprob: -0.2523403465747833
    2. ' calculate' → logprob: -1.502340316772461
    3. 'b' → logprob: -8.127340316772461
    4. ' b' → logprob: -9.252340316772461
    5. '   ' → logprob: -11.377340316772461
    6. ' ' → logprob: -12.627340316772461
    7. '  ' → logprob: -13.002340316772461
    8. '.calculate' → logprob: -13.502340316772461
    9. 'Calculate' → logprob: -15.127340316772461
    10. '    ' → logprob: -15.377340316772461

Token 168: '_diff' (ID: 41047)
  Prédit: '_diff'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_diff' → logprob: -1.0280383548888494e-06
    2. 'diff' → logprob: -14.500000953674316
    3. '_' → logprob: -14.875000953674316
    4. '_d' → logprob: -15.875000953674316
    5. '_dist' → logprob: -18.250001907348633
    6. '_difference' → logprob: -18.250001907348633
    7. '_def' → logprob: -18.625001907348633
    8. '_DIFF' → logprob: -18.875001907348633
    9. ' _' → logprob: -19.375001907348633
    10. '_di' → logprob: -19.625001907348633

Token 169: '(a' (ID: 6271)
  Prédit: '(a'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(a' → logprob: -3.650518920039758e-06
    2. '(' → logprob: -12.625003814697266
    3. 'a' → logprob: -15.625003814697266
    4. '(
' → logprob: -16.375003814697266
    5. ' (' → logprob: -19.000003814697266
    6. '(b' → logprob: -20.125003814697266
    7. '(A' → logprob: -20.375003814697266
    8. '(ai' → logprob: -20.375003814697266
    9. '(i' → logprob: -20.750003814697266
    10. '((' → logprob: -20.875003814697266

Token 170: ',' (ID: 11)
  Prédit: ','
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ',' → logprob: -0.0017795454477891326
    2. ',b' → logprob: -6.501779556274414
    3. 'b' → logprob: -8.626779556274414
    4. ' ,' → logprob: -9.251779556274414
    5. ' b' → logprob: -14.251779556274414
    6. ',
' → logprob: -14.501779556274414
    7. 'a' → logprob: -15.501779556274414
    8. '',' → logprob: -16.376779556274414
    9. '   ' → logprob: -16.501779556274414
    10. '‌,' → logprob: -16.626779556274414

Token 171: ' b' (ID: 287)
  Prédit: 'b'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'b' → logprob: -0.01815006136894226
    2. ' b' → logprob: -4.0181498527526855
    3. ')b' → logprob: -16.518150329589844
    4. '>b' → logprob: -19.518150329589844
    5. ')' → logprob: -20.268150329589844
    6. '<|end|>' → logprob: -20.393150329589844
    7. '	b' → logprob: -21.018150329589844
    8. ' б' → logprob: -22.518150329589844
    9. ' ' → logprob: -22.518150329589844
    10. '```' → logprob: -22.643150329589844

Token 172: ')
' (ID: 446)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')' → logprob: -7.703443770878948e-06
    2. ')
' → logprob: -11.875007629394531
    3. ' )' → logprob: -15.000007629394531
    4. '))' → logprob: -16.25000762939453
    5. ')

' → logprob: -16.25000762939453
    6. ')#' → logprob: -17.12500762939453
    7. ')a' → logprob: -17.50000762939453
    8. ')`' → logprob: -18.00000762939453
    9. '),' → logprob: -18.25000762939453
    10. ')<' → logprob: -18.62500762939453

Token 173: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.003717653686180711
    2. 'check' → logprob: -5.878717422485352
    3. ' check' → logprob: -7.003717422485352
    4. '	check' → logprob: -13.128717422485352
    5. '```' → logprob: -14.128717422485352
    6. '(check' → logprob: -14.378717422485352
    7. '
' → logprob: -15.253717422485352
    8. '   ' → logprob: -15.753717422485352
    9. '    
' → logprob: -16.50371742248535
    10. '.check' → logprob: -16.87871742248535

Token 174: ' check' (ID: 2371)
  Prédit: 'check'
  Correct (stricte): False
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'check' (adapté à ' check') → logprob: -0.0027367589063942432
    2. ' check' → logprob: -6.252736568450928
    3. '   ' → logprob: -7.127736568450928
    4. '	check' → logprob: -12.377737045288086
    5. '
' → logprob: -14.252737045288086
    6. ' ' → logprob: -15.502737045288086
    7. '    
' → logprob: -16.252737045288086
    8. 'chec' → logprob: -16.377737045288086
    9. '  ' → logprob: -16.752737045288086
    10. '(check' → logprob: -17.127737045288086

Token 175: '_and' (ID: 18645)
  Prédit: '_and'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_and' → logprob: -1.4140441635390744e-05
    2. '_' → logprob: -11.250014305114746
    3. '_an' → logprob: -14.750014305114746
    4. '_a' → logprob: -15.250014305114746
    5. ' _' → logprob: -15.500014305114746
    6. '__' → logprob: -17.37501335144043
    7. '```' → logprob: -17.50001335144043
    8. '_AND' → logprob: -17.50001335144043
    9. '_
' → logprob: -17.75001335144043
    10. ',_' → logprob: -18.50001335144043

Token 176: '_print' (ID: 31509)
  Prédit: '_print'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_print' → logprob: -0.04859009385108948
    2. 'print' → logprob: -3.0485901832580566
    3. ' print' → logprob: -13.548589706420898
    4. 'diff' → logprob: -14.173589706420898
    5. '(print' → logprob: -14.548589706420898
    6. '_PRINT' → logprob: -16.4235897064209
    7. '_' → logprob: -16.5485897064209
    8. '.print' → logprob: -16.9235897064209
    9. '```' → logprob: -17.4235897064209
    10. '#print' → logprob: -17.7985897064209

Token 177: '(diff' (ID: 84195)
  Prédit: '(diff'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(diff' → logprob: -1.0206720617134124e-05
    2. '(' → logprob: -11.50001049041748
    3. 'diff' → logprob: -18.125009536743164
    4. ' (' → logprob: -18.500009536743164
    5. '(dist' → logprob: -19.750009536743164
    6. '(
' → logprob: -20.000009536743164
    7. '(div' → logprob: -20.125009536743164
    8. ' diff' → logprob: -20.375009536743164
    9. '(def' → logprob: -20.375009536743164
    10. '	diff' → logprob: -20.375009536743164

Token 178: ',' (ID: 11)
  Prédit: ','
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ',' → logprob: -0.0002692032721824944
    2. ' ,' → logprob: -9.000268936157227
    3. ',a' → logprob: -9.375268936157227
    4. 'a' → logprob: -9.750268936157227
    5. ' a' → logprob: -14.000268936157227
    6. ' ' → logprob: -14.625268936157227
    7. ')' → logprob: -15.000268936157227
    8. ',
' → logprob: -15.000268936157227
    9. '`,' → logprob: -15.875268936157227
    10. '   ' → logprob: -16.000268936157227

Token 179: ' a' (ID: 261)
  Prédit: 'a'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'a' → logprob: -0.05488927662372589
    2. ' a' → logprob: -2.92988920211792
    3. '0' → logprob: -13.054889678955078
    4. ' ' → logprob: -13.679889678955078
    5. 'b' → logprob: -13.679889678955078
    6. '	a' → logprob: -14.179889678955078
    7. '   ' → logprob: -14.429889678955078
    8. ' b' → logprob: -14.929889678955078
    9. '1' → logprob: -15.554889678955078
    10. '7' → logprob: -16.429889678955078

Token 180: ')

' (ID: 1029)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')' → logprob: -1.7432603272027336e-06
    2. ')
' → logprob: -13.500001907348633
    3. ' )' → logprob: -15.500001907348633
    4. ')

' → logprob: -17.125001907348633
    5. '))' → logprob: -17.125001907348633
    6. '())' → logprob: -18.625001907348633
    7. ')}' → logprob: -19.125001907348633
    8. '   ' → logprob: -19.250001907348633
    9. ')#' → logprob: -19.500001907348633
    10. '(' → logprob: -20.000001907348633

Token 181: 'main' (ID: 7731)
  Prédit: 'main'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'main' → logprob: -0.02985404059290886
    2. 'if' → logprob: -3.5298540592193604
    3. '
' → logprob: -10.279853820800781
    4. '\n' → logprob: -10.404853820800781
    5. ' main' → logprob: -11.154853820800781
    6. '(main' → logprob: -11.779853820800781
    7. 'print' → logprob: -12.029853820800781
    8. '\' → logprob: -12.154853820800781
    9. 'def' → logprob: -13.029853820800781
    10. '\
' → logprob: -14.154853820800781

Token 182: '()' (ID: 416)
  Prédit: '()'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '()' → logprob: -0.0002764710516203195
    2. '(' → logprob: -8.250276565551758
    3. '()
' → logprob: -11.750276565551758
    4. '()

' → logprob: -13.250276565551758
    5. '()`' → logprob: -13.625276565551758
    6. '();' → logprob: -13.875276565551758
    7. '()<' → logprob: -14.750276565551758
    8. '()"' → logprob: -14.750276565551758
    9. '()?' → logprob: -14.875276565551758
    10. '()">' → logprob: -15.000276565551758


RÉSUMÉ:
--------------------------------------------------------------------------------
Total des tokens analysés: 180
Tokens correctement prédits (1ère position, stricte): 69
Tokens correctement prédits (1ère position, avec adaptation): 74
Tokens correctement prédits (top 10): 152
Précision stricte (1ère position): 38.33%
Précision adaptée (1ère position): 41.11%
Précision (top 10): 84.44%
================================================================================
