================================================================================
ANALYSE DE PRÉDICTION TOKEN PAR TOKEN (BATCH API)
Date: 2025-06-04 19:31:08
Modèle de tokenisation: gpt-4o-mini
================================================================================

SCRIPT ANALYSÉ:
--------------------------------------------------------------------------------
collect = lambda n: [input().split() for _ in range(n)]
getnum = lambda: int(input())
res = [0]
found = [0]
n = getnum()
data = collect(n)
marker = input()

def process():
    for pair in data:
        k, v = pair
        if found[0]:
            res[0] += int(v)
        if k == marker:
            found[0] = 1

process()
print(res[0])
--------------------------------------------------------------------------------

RÉSULTATS D'ANALYSE TOKEN PAR TOKEN:
--------------------------------------------------------------------------------
Token 0: 'collect' (ID: 25670)
  → Token d'amorce (pas de prédiction)

Token 1: ' =' (ID: 314)
  → Token d'amorce (pas de prédiction)

Token 2: ' lambda' (ID: 27871)
  → Token d'amorce (pas de prédiction)

Token 3: ' n' (ID: 297)
  Prédit: ' collect'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' collect' → logprob: -0.32472068071365356
    2. ' ' → logprob: -2.199720621109009
    3. ' x' → logprob: -2.699720621109009
    4. ' ' → logprob: -2.949720621109009
    5. ' collection' → logprob: -4.324720859527588
    6. ' s' → logprob: -4.574720859527588
    7. 'collect' → logprob: -4.949720859527588
    8. ' a' → logprob: -5.324720859527588
    9. ' ,' → logprob: -6.324720859527588
    10. ' space' → logprob: -6.449720859527588

Token 4: ':' (ID: 25)
  Prédit: ':'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ':' → logprob: -0.07003758102655411
    2. ' :' → logprob: -2.695037603378296
    3. ',' → logprob: -10.445037841796875
    4. ':n' → logprob: -11.695037841796875
    5. ' n' → logprob: -11.945037841796875
    6. ',:' → logprob: -11.945037841796875
    7. '_:' → logprob: -12.320037841796875
    8. ' ' → logprob: -12.570037841796875
    9. ':,' → logprob: -12.820037841796875
    10. 'lambda' → logprob: -13.070037841796875

Token 5: ' [' (ID: 723)
  Prédit: ' ['
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' [' → logprob: -0.7030170559883118
    2. ' n' → logprob: -1.828016996383667
    3. ' list' → logprob: -2.453016996383667
    4. ' []' → logprob: -2.453016996383667
    5. '[' → logprob: -2.953016996383667
    6. ' range' → logprob: -2.953016996383667
    7. '[n' → logprob: -4.203017234802246
    8. '[]' → logprob: -4.703017234802246
    9. 'range' → logprob: -4.703017234802246
    10. ' (' → logprob: -5.078017234802246

Token 6: 'input' (ID: 2586)
  Prédit: 'i'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'i' → logprob: -0.2807472050189972
    2. 'n' → logprob: -1.5307471752166748
    3. 'x' → logprob: -3.780747175216675
    4. '_' → logprob: -6.530747413635254
    5. '0' → logprob: -6.905747413635254
    6. ' i' → logprob: -7.280747413635254
    7. 'int' → logprob: -7.405747413635254
    8. ' n' → logprob: -7.530747413635254
    9. 'k' → logprob: -8.405747413635254
    10. 'range' → logprob: -8.905747413635254

Token 7: '().' (ID: 1454)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '(' → logprob: -0.01610405370593071
    2. '()' → logprob: -4.766104221343994
    3. '()]' → logprob: -5.516104221343994
    4. '('' → logprob: -6.516104221343994
    5. '("("' → logprob: -7.516104221343994
    6. ']' → logprob: -7.766104221343994
    7. '(f' → logprob: -8.516103744506836
    8. ',' → logprob: -9.141103744506836
    9. '("' → logprob: -9.141103744506836
    10. '(
' → logprob: -9.516103744506836

Token 8: 'split' (ID: 13627)
  Prédit: 'split'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'split' → logprob: -0.1270768791437149
    2. 'strip' → logprob: -2.1270768642425537
    3. 'rstrip' → logprob: -9.002077102661133
    4. 'startswith' → logprob: -10.877077102661133
    5. 'lower' → logprob: -12.752077102661133
    6. ' split' → logprob: -13.252077102661133
    7. 'isdigit' → logprob: -13.502077102661133
    8. 'join' → logprob: -15.502077102661133
    9. ' strip' → logprob: -16.002077102661133
    10. 'append' → logprob: -16.002077102661133

Token 9: '()' (ID: 416)
  Prédit: '(''
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '('' → logprob: -0.04162338748574257
    2. '(' → logprob: -3.79162335395813
    3. '("("' → logprob: -4.416623592376709
    4. '()]' → logprob: -5.416623592376709
    5. '()' → logprob: -7.166623592376709
    6. '())' → logprob: -7.541623592376709
    7. '(()' → logprob: -9.54162311553955
    8. ''' → logprob: -9.91662311553955
    9. '(',' → logprob: -9.91662311553955
    10. '("' → logprob: -9.91662311553955

Token 10: ' for' (ID: 395)
  Prédit: ']'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ']' → logprob: -0.1351565718650818
    2. ',' → logprob: -3.0101566314697266
    3. 'for' → logprob: -3.6351566314697266
    4. ' for' → logprob: -4.135156631469727
    5. '(n' → logprob: -4.885156631469727
    6. '()]' → logprob: -4.885156631469727
    7. ',n' → logprob: -5.010156631469727
    8. ')' → logprob: -5.760156631469727
    9. '[n' → logprob: -6.010156631469727
    10. ')]' → logprob: -6.385156631469727

Token 11: ' _' (ID: 1175)
  Prédit: ' _'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' _' → logprob: -0.48923179507255554
    2. '_' → logprob: -0.9892318248748779
    3. ' i' → logprob: -4.989231586456299
    4. ' in' → logprob: -5.364231586456299
    5. ' ' → logprob: -6.364231586456299
    6. ' n' → logprob: -6.739231586456299
    7. ' range' → logprob: -7.864231586456299
    8. 'range' → logprob: -9.614232063293457
    9. '_range' → logprob: -10.114232063293457
    10. 'i' → logprob: -10.114232063293457

Token 12: ' in' (ID: 306)
  Prédit: ' in'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' in' → logprob: -0.14275039732456207
    2. 'in' → logprob: -2.0177505016326904
    3. ' ' → logprob: -10.39275074005127
    4. '	in' → logprob: -11.89275074005127
    5. 'n' → logprob: -12.01775074005127
    6. '_' → logprob: -12.01775074005127
    7. '<|end|>' → logprob: -12.01775074005127
    8. '_in' → logprob: -12.14275074005127
    9. 'range' → logprob: -12.26775074005127
    10. 's' → logprob: -12.51775074005127

Token 13: ' range' (ID: 3352)
  Prédit: 'range'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'range' → logprob: -0.38687366247177124
    2. ' range' → logprob: -1.136873722076416
    3. ' n' → logprob: -14.011873245239258
    4. 'n' → logprob: -14.011873245239258
    5. '	range' → logprob: -14.761873245239258
    6. '(range' → logprob: -15.761873245239258
    7. ' ' → logprob: -16.011873245239258
    8. ' xrange' → logprob: -16.886873245239258
    9. '```' → logprob: -16.886873245239258
    10. ')' → logprob: -17.511873245239258

Token 14: '(n' (ID: 2406)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(' → logprob: -0.1271265298128128
    2. '(n' → logprob: -2.127126455307007
    3. ' (' → logprob: -9.127126693725586
    4. '(
' → logprob: -9.502126693725586
    5. '(len' → logprob: -11.877126693725586
    6. '(

' → logprob: -13.002126693725586
    7. '(int' → logprob: -14.502126693725586
    8. ')' → logprob: -14.627126693725586
    9. '(N' → logprob: -14.752126693725586
    10. '(nt' → logprob: -14.877126693725586

Token 15: ')]
' (ID: 11587)
  Prédit: ')]'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ')]' → logprob: -0.00012582694762386382
    2. ')' → logprob: -9.250125885009766
    3. ']' → logprob: -10.625125885009766
    4. ')])' → logprob: -12.750125885009766
    5. '])]' → logprob: -14.500125885009766
    6. '')]' → logprob: -14.625125885009766
    7. ' )' → logprob: -14.875125885009766
    8. ')],' → logprob: -15.375125885009766
    9. '])' → logprob: -15.375125885009766
    10. '))' → logprob: -16.125125885009766

Token 16: 'get' (ID: 522)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '(' → logprob: -0.1603531837463379
    2. '()' → logprob: -3.160353183746338
    3. '<|end|>' → logprob: -3.285353183746338
    4. ')' → logprob: -4.410353183746338
    5. '```' → logprob: -4.660353183746338
    6. '\n' → logprob: -4.660353183746338
    7. '(
' → logprob: -4.785353183746338
    8. '#' → logprob: -5.035353183746338
    9. '[' → logprob: -5.535353183746338
    10. '
' → logprob: -5.785353183746338

Token 17: 'num' (ID: 4571)
  Prédit: '_'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '_' → logprob: -0.09605494886636734
    2. 's' → logprob: -4.221055030822754
    3. '_item' → logprob: -4.471055030822754
    4. 'attr' → logprob: -4.596055030822754
    5. '_token' → logprob: -4.721055030822754
    6. 'item' → logprob: -4.971055030822754
    7. '_items' → logprob: -5.221055030822754
    8. '<|end|>' → logprob: -5.221055030822754
    9. '(' → logprob: -5.471055030822754
    10. 'token' → logprob: -5.971055030822754

Token 18: ' =' (ID: 314)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(' → logprob: -0.37582606077194214
    2. 's' → logprob: -1.250826120376587
    3. '()' → logprob: -4.250825881958008
    4. '=' → logprob: -5.375825881958008
    5. ' =' → logprob: -6.250825881958008
    6. ')' → logprob: -7.000825881958008
    7. '=lambda' → logprob: -7.250825881958008
    8. '```' → logprob: -7.375825881958008
    9. '("("' → logprob: -7.750825881958008
    10. ']' → logprob: -7.750825881958008

Token 19: ' lambda' (ID: 27871)
  Prédit: ' int'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' int' → logprob: -0.3842708468437195
    2. 'int' → logprob: -1.3842709064483643
    3. ' lambda' → logprob: -2.8842709064483643
    4. 'lambda' → logprob: -4.509270668029785
    5. ' input' → logprob: -7.134270668029785
    6. '(int' → logprob: -7.759270668029785
    7. 'input' → logprob: -8.009270668029785
    8. '(lambda' → logprob: -9.759270668029785
    9. '[int' → logprob: -11.509270668029785
    10. ' ' → logprob: -12.759270668029785

Token 20: ':' (ID: 25)
  Prédit: 'int'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'int' → logprob: -0.5878729224205017
    2. ' input' → logprob: -1.8378729820251465
    3. ' int' → logprob: -2.0878729820251465
    4. 'input' → logprob: -3.2128729820251465
    5. ':' → logprob: -3.5878729820251465
    6. ':int' → logprob: -3.5878729820251465
    7. 'x' → logprob: -3.8378729820251465
    8. ' x' → logprob: -4.4628729820251465
    9. 'str' → logprob: -4.7128729820251465
    10. ' str' → logprob: -4.9628729820251465

Token 21: ' int' (ID: 677)
  Prédit: 'int'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'int' → logprob: -0.42947882413864136
    2. ' int' → logprob: -1.0544788837432861
    3. ' map' → logprob: -7.804478645324707
    4. ' list' → logprob: -8.929478645324707
    5. 'map' → logprob: -9.304478645324707
    6. 'list' → logprob: -9.804478645324707
    7. 'input' → logprob: -10.304478645324707
    8. ' input' → logprob: -10.304478645324707
    9. ' ' → logprob: -11.429478645324707
    10. '[int' → logprob: -12.679478645324707

Token 22: '(input' (ID: 10054)
  Prédit: '(input'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(input' → logprob: -0.00012809180771000683
    2. '(' → logprob: -9.250127792358398
    3. 'input' → logprob: -10.375127792358398
    4. ' (' → logprob: -14.875127792358398
    5. '()' → logprob: -15.625127792358398
    6. ' input' → logprob: -16.2501277923584
    7. '(in' → logprob: -17.6251277923584
    8. '(
' → logprob: -17.8751277923584
    9. '((' → logprob: -18.0001277923584
    10. ' ' → logprob: -18.1251277923584

Token 23: '())
' (ID: 4574)
  Prédit: '())'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '())' → logprob: -0.0015710416482761502
    2. '()' → logprob: -6.501571178436279
    3. ')' → logprob: -9.876570701599121
    4. ' ())' → logprob: -11.626570701599121
    5. '();)' → logprob: -12.626570701599121
    6. '()))' → logprob: -12.876570701599121
    7. '().' → logprob: -14.376570701599121
    8. '()]' → logprob: -14.626570701599121
    9. '())
' → logprob: -14.876570701599121
    10. '()`' → logprob: -15.251570701599121

Token 24: 'res' (ID: 430)
  Prédit: 'n'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'n' → logprob: -1.2133052349090576
    2. 'data' → logprob: -1.3383052349090576
    3. 'for' → logprob: -1.9633052349090576
    4. 'result' → logprob: -2.8383052349090576
    5. 'def' → logprob: -3.4633052349090576
    6. 'num' → logprob: -3.5883052349090576
    7. 'a' → logprob: -3.5883052349090576
    8. '<|end|>' → logprob: -3.9633052349090576
    9. '```' → logprob: -4.088305473327637
    10. '[' → logprob: -4.088305473327637

Token 25: ' =' (ID: 314)
  Prédit: 'ult'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'ult' → logprob: -0.692877471446991
    2. 'u' → logprob: -1.6928775310516357
    3. 'ults' → logprob: -1.9428775310516357
    4. '=' → logprob: -2.4428775310516357
    5. ' =' → logprob: -2.5678775310516357
    6. 'ul' → logprob: -5.567877292633057
    7. 'ultat' → logprob: -6.317877292633057
    8. '.' → logprob: -7.067877292633057
    9. 'ulta' → logprob: -7.442877292633057
    10. 't' → logprob: -7.692877292633057

Token 26: ' [' (ID: 723)
  Prédit: '[]'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '[]' → logprob: -0.4493335485458374
    2. ' []' → logprob: -1.0743335485458374
    3. 'get' → logprob: -5.074333667755127
    4. 'collect' → logprob: -5.574333667755127
    5. ' collect' → logprob: -5.699333667755127
    6. '[' → logprob: -6.199333667755127
    7. '[get' → logprob: -6.574333667755127
    8. ' get' → logprob: -6.699333667755127
    9. ' [' → logprob: -6.949333667755127
    10. 'sum' → logprob: -8.449333190917969

Token 27: '0' (ID: 15)
  Prédit: 'get'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'get' → logprob: -0.7487664818763733
    2. 'input' → logprob: -1.1237664222717285
    3. 'int' → logprob: -2.3737664222717285
    4. 'x' → logprob: -3.8737664222717285
    5. 'collect' → logprob: -4.1237664222717285
    6. 'sum' → logprob: -4.3737664222717285
    7. 'list' → logprob: -4.6237664222717285
    8. '[]' → logprob: -4.7487664222717285
    9. '0' → logprob: -4.9987664222717285
    10. ' input' → logprob: -5.1237664222717285

Token 28: ']
' (ID: 1592)
  Prédit: ']'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ']' → logprob: -0.07545081526041031
    2. ',' → logprob: -2.700450897216797
    3. ' for' → logprob: -6.200450897216797
    4. ')]' → logprob: -6.700450897216797
    5. ' ]' → logprob: -7.075450897216797
    6. ']*' → logprob: -7.325450897216797
    7. 'for' → logprob: -8.325450897216797
    8. ']+' → logprob: -8.950450897216797
    9. ')' → logprob: -9.325450897216797
    10. ',
' → logprob: -9.950450897216797

Token 29: 'found' (ID: 26334)
  Prédit: 'for'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'for' → logprob: -0.16699627041816711
    2. ' for' → logprob: -2.1669962406158447
    3. ' ' → logprob: -4.041996479034424
    4. '+' → logprob: -4.791996479034424
    5. '[' → logprob: -5.541996479034424
    6. '.' → logprob: -6.291996479034424
    7. '=' → logprob: -6.791996479034424
    8. '(' → logprob: -6.916996479034424
    9. ' 
' → logprob: -7.166996479034424
    10. 'd' → logprob: -7.166996479034424

Token 30: ' =' (ID: 314)
  Prédit: '_'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_' → logprob: -0.8639732599258423
    2. ' =' → logprob: -0.9889732599258423
    3. '=' → logprob: -1.6139732599258423
    4. ' ' → logprob: -5.988973140716553
    5. '(' → logprob: -6.363973140716553
    6. ':' → logprob: -6.863973140716553
    7. ',' → logprob: -7.113973140716553
    8. '[' → logprob: -8.738973617553711
    9. ' _' → logprob: -8.738973617553711
    10. '_=' → logprob: -8.738973617553711

Token 31: ' [' (ID: 723)
  Prédit: ' False'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' False' → logprob: -0.35139328241348267
    2. 'False' → logprob: -1.226393222808838
    3. ' True' → logprob: -6.851393222808838
    4. ' []' → logprob: -7.351393222808838
    5. ' set' → logprob: -7.851393222808838
    6. '[]' → logprob: -8.351393699645996
    7. 'set' → logprob: -8.851393699645996
    8. 'True' → logprob: -8.976393699645996
    9. ' None' → logprob: -9.351393699645996
    10. ' {}' → logprob: -9.726393699645996

Token 32: '0' (ID: 15)
  Prédit: 'False'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'False' → logprob: -0.05491715297102928
    2. ']' → logprob: -3.429917097091675
    3. '0' → logprob: -4.179917335510254
    4. ' False' → logprob: -5.804917335510254
    5. '(False' → logprob: -7.304917335510254
    6. '[]' → logprob: -7.304917335510254
    7. 'True' → logprob: -7.804917335510254
    8. '{}' → logprob: -8.429917335510254
    9. '()]' → logprob: -8.804917335510254
    10. ' ]' → logprob: -9.054917335510254

Token 33: ']
' (ID: 1592)
  Prédit: ']'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ']' → logprob: -5.490809417096898e-05
    2. ' ]' → logprob: -10.125055313110352
    3. ')]' → logprob: -12.375055313110352
    4. '()]' → logprob: -12.750055313110352
    5. ')' → logprob: -13.125055313110352
    6. ']
' → logprob: -13.375055313110352
    7. '[' → logprob: -14.000055313110352
    8. '])' → logprob: -14.250055313110352
    9. '`]' → logprob: -14.375055313110352
    10. '[]' → logprob: -14.500055313110352

Token 34: 'n' (ID: 77)
  Prédit: ''
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False

Token 35: ' =' (ID: 314)
  Prédit: ' ='
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' =' → logprob: -0.04596344009041786
    2. '=' → logprob: -3.1709635257720947
    3. ' ' → logprob: -5.920963287353516
    4. ',' → logprob: -9.170963287353516
    5. '  ' → logprob: -10.170963287353516
    6. '_' → logprob: -10.920963287353516
    7. '.' → logprob: -11.045963287353516
    8. ' ,' → logprob: -11.295963287353516
    9. 'space' → logprob: -11.420963287353516
    10. '=input' → logprob: -11.420963287353516

Token 36: ' get' (ID: 717)
  Prédit: ' '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' ' → logprob: -0.5772736668586731
    2. ' get' → logprob: -0.8272736668586731
    3. 'get' → logprob: -7.452273845672607
    4. '<|end|>' → logprob: -8.20227336883545
    5. ' int' → logprob: -8.82727336883545
    6. '  ' → logprob: -9.95227336883545
    7. ' )' → logprob: -10.07727336883545
    8. ' space' → logprob: -10.07727336883545
    9. ' input' → logprob: -10.45227336883545
    10. '32' → logprob: -10.45227336883545

Token 37: 'num' (ID: 4571)
  Prédit: 'num'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'num' → logprob: -9.491498531133402e-06
    2. '()' → logprob: -11.750009536743164
    3. ')' → logprob: -15.000009536743164
    4. 'um' → logprob: -15.250009536743164
    5. '(num' → logprob: -15.500009536743164
    6. ' num' → logprob: -15.500009536743164
    7. '())' → logprob: -15.625009536743164
    8. 'n' → logprob: -15.750009536743164
    9. '(' → logprob: -16.000009536743164
    10. 'nu' → logprob: -17.000009536743164

Token 38: '()
' (ID: 1234)
  Prédit: '()'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '()' → logprob: -0.0002919638354796916
    2. '()
' → logprob: -8.25029182434082
    3. '(' → logprob: -11.62529182434082
    4. '()\' → logprob: -11.62529182434082
    5. ' ()' → logprob: -12.37529182434082
    6. '()

' → logprob: -12.87529182434082
    7. '()]' → logprob: -13.37529182434082
    8. '()<' → logprob: -13.87529182434082
    9. '()>' → logprob: -14.25029182434082
    10. '())' → logprob: -14.25029182434082

Token 39: 'data' (ID: 1074)
  Prédit: 'for'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'for' → logprob: -0.28979215025901794
    2. ' for' → logprob: -1.6647921800613403
    3. '<|end|>' → logprob: -3.289792060852051
    4. ' ' → logprob: -4.039792060852051
    5. 'n' → logprob: -6.414792060852051
    6. '_' → logprob: -7.039792060852051
    7. 'data' → logprob: -7.164792060852051
    8. '[' → logprob: -7.539792060852051
    9. ' 
' → logprob: -7.664792060852051
    10. ')' → logprob: -7.789792060852051

Token 40: ' =' (ID: 314)
  Prédit: ' ='
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' =' → logprob: -0.0076278080232441425
    2. '=' → logprob: -4.882627964019775
    3. ' ' → logprob: -11.757627487182617
    4. '[' → logprob: -12.007627487182617
    5. '.' → logprob: -13.007627487182617
    6. '[:]' → logprob: -14.007627487182617
    7. 's' → logprob: -14.257627487182617
    8. '_' → logprob: -14.382627487182617
    9. '.append' → logprob: -14.507627487182617
    10. '.extend' → logprob: -14.882627487182617

Token 41: ' collect' (ID: 7916)
  Prédit: ' collect'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' collect' → logprob: -0.793224573135376
    2. 'collect' → logprob: -1.043224573135376
    3. '[' → logprob: -1.918224573135376
    4. ' [' → logprob: -3.043224573135376
    5. '[input' → logprob: -9.043224334716797
    6. '[col' → logprob: -9.043224334716797
    7. '[get' → logprob: -9.043224334716797
    8. '.collect' → logprob: -9.293224334716797
    9. '[]' → logprob: -9.543224334716797
    10. ' []' → logprob: -10.418224334716797

Token 42: '(n' (ID: 2406)
  Prédit: '(n'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(n' → logprob: -0.0001875671005109325
    2. '(' → logprob: -8.625187873840332
    3. ' (' → logprob: -11.875187873840332
    4. 'n' → logprob: -14.500187873840332
    5. '(
' → logprob: -15.625187873840332
    6. '(int' → logprob: -17.125186920166016
    7. '((' → logprob: -17.500186920166016
    8. '<|end|>' → logprob: -17.500186920166016
    9. '(num' → logprob: -17.750186920166016
    10. ' ' → logprob: -17.750186920166016

Token 43: ')
' (ID: 446)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')' → logprob: -1.9981420336989686e-05
    2. '))' → logprob: -11.000020027160645
    3. ' )' → logprob: -13.875020027160645
    4. ')
' → logprob: -14.125020027160645
    5. ')]' → logprob: -14.125020027160645
    6. '())' → logprob: -15.125020027160645
    7. ')`' → logprob: -16.250019073486328
    8. ')}' → logprob: -16.625019073486328
    9. '()' → logprob: -16.750019073486328
    10. ')n' → logprob: -17.000019073486328

Token 44: 'marker' (ID: 56511)
  Prédit: ' for'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' for' → logprob: -0.7033349871635437
    2. 'for' → logprob: -0.8283349871635437
    3. '<|end|>' → logprob: -3.2033350467681885
    4. ' ' → logprob: -4.078334808349609
    5. ' 
' → logprob: -6.203334808349609
    6. 'i' → logprob: -6.453334808349609
    7. '
' → logprob: -6.953334808349609
    8. '[' → logprob: -7.203334808349609
    9. '\n' → logprob: -7.203334808349609
    10. 'n' → logprob: -7.453334808349609

Token 45: ' =' (ID: 314)
  Prédit: ' ='
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' =' → logprob: -0.07471498847007751
    2. '=' → logprob: -2.9497148990631104
    3. 's' → logprob: -4.1997151374816895
    4. '_' → logprob: -5.8247151374816895
    5. '_idx' → logprob: -7.6997151374816895
    6. ' ' → logprob: -7.9497151374816895
    7. '_index' → logprob: -8.074714660644531
    8. ':' → logprob: -9.574714660644531
    9. ',' → logprob: -9.824714660644531
    10. '[:]' → logprob: -9.824714660644531

Token 46: ' input' (ID: 3422)
  Prédit: '0'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '0' → logprob: -0.625087559223175
    2. ' ' → logprob: -2.0000874996185303
    3. ' [' → logprob: -2.2500874996185303
    4. '{}' → logprob: -2.6250874996185303
    5. '[' → logprob: -2.8750874996185303
    6. ' {}' → logprob: -3.6250874996185303
    7. '-' → logprob: -4.500087738037109
    8. ' -' → logprob: -4.625087738037109
    9. ' set' → logprob: -4.625087738037109
    10. 'set' → logprob: -5.000087738037109

Token 47: '()

' (ID: 5874)
  Prédit: '()'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '()' → logprob: -0.0002398938377154991
    2. '(' → logprob: -9.125240325927734
    3. '`()' → logprob: -10.125240325927734
    4. '()`' → logprob: -10.750240325927734
    5. '()
' → logprob: -11.000240325927734
    6. ' ()' → logprob: -11.250240325927734
    7. '().' → logprob: -11.625240325927734
    8. '```' → logprob: -12.000240325927734
    9. '()]' → logprob: -12.375240325927734
    10. '()

' → logprob: -12.375240325927734

Token 48: 'def' (ID: 1314)
  Prédit: 'for'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'for' → logprob: -0.0019966813270002604
    2. ' for' → logprob: -6.3769965171813965
    3. 'if' → logprob: -8.876996994018555
    4. '
' → logprob: -9.751996994018555
    5. 'd' → logprob: -11.376996994018555
    6. '```' → logprob: -11.376996994018555
    7. '<|end|>' → logprob: -11.376996994018555
    8. '#' → logprob: -11.501996994018555
    9. '[' → logprob: -11.501996994018555
    10. 'i' → logprob: -11.626996994018555

Token 49: ' process' (ID: 2273)
  Prédit: ' find'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' find' → logprob: -0.5827454328536987
    2. ' search' → logprob: -1.3327454328536987
    3. ' process' → logprob: -2.5827455520629883
    4. ' solve' → logprob: -2.8327455520629883
    5. ' check' → logprob: -3.8327455520629883
    6. ' solution' → logprob: -5.207745552062988
    7. ' collect' → logprob: -5.332745552062988
    8. ' match' → logprob: -6.207745552062988
    9. ' ' → logprob: -6.457745552062988
    10. ' filter' → logprob: -6.457745552062988

Token 50: '():
' (ID: 8595)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '(' → logprob: -0.21538786590099335
    2. '(data' → logprob: -1.8403878211975098
    3. '_' → logprob: -4.34038782119751
    4. '_data' → logprob: -4.96538782119751
    5. '_marker' → logprob: -5.21538782119751
    6. ' (' → logprob: -5.96538782119751
    7. '(marker' → logprob: -6.09038782119751
    8. '(line' → logprob: -6.59038782119751
    9. 'data' → logprob: -7.34038782119751
    10. '(token' → logprob: -7.71538782119751

Token 51: '   ' (ID: 271)
  Prédit: ''
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False

Token 52: ' for' (ID: 395)
  Prédit: ' for'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' for' → logprob: -0.1813298612833023
    2. 'for' (adapté à ' for') → logprob: -2.9313299655914307
    3. ' global' → logprob: -3.1813299655914307
    4. ' res' → logprob: -3.8063299655914307
    5. '   ' → logprob: -4.306329727172852
    6. ' i' → logprob: -4.556329727172852
    7. 'global' → logprob: -5.431329727172852
    8. ' pass' → logprob: -5.556329727172852
    9. ' total' → logprob: -6.056329727172852
    10. ' if' → logprob: -6.056329727172852

Token 53: ' pair' (ID: 10610)
  Prédit: ' i'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' i' → logprob: -0.05797053501009941
    2. ' row' → logprob: -3.1829705238342285
    3. ' item' → logprob: -4.8079705238342285
    4. ' x' → logprob: -6.4329705238342285
    5. 'i' → logprob: -6.5579705238342285
    6. ' line' → logprob: -6.8079705238342285
    7. ' idx' → logprob: -7.5579705238342285
    8. ' _' → logprob: -7.5579705238342285
    9. ' ' → logprob: -8.057971000671387
    10. ' word' → logprob: -8.557971000671387

Token 54: ' in' (ID: 306)
  Prédit: ' in'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' in' → logprob: -0.001997631276026368
    2. 'in' → logprob: -6.251997470855713
    3. ' ' → logprob: -10.126997947692871
    4. 's' → logprob: -11.126997947692871
    5. '   ' → logprob: -12.501997947692871
    6. ',' → logprob: -13.126997947692871
    7. '_in' → logprob: -13.626997947692871
    8. '<|end|>' → logprob: -13.626997947692871
    9. '    ' → logprob: -14.001997947692871
    10. '_' → logprob: -14.001997947692871

Token 55: ' data' (ID: 1238)
  Prédit: 'data'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'data' → logprob: -0.5759411454200745
    2. ' data' → logprob: -0.8259411454200745
    3. '(data' → logprob: -13.82594108581543
    4. '	data' → logprob: -15.20094108581543
    5. ' range' → logprob: -15.82594108581543
    6. '<data' → logprob: -16.07594108581543
    7. 'range' → logprob: -16.57594108581543
    8. '[data' → logprob: -16.95094108581543
    9. ':data' → logprob: -17.07594108581543
    10. ')data' → logprob: -17.20094108581543

Token 56: ':
' (ID: 734)
  Prédit: ':'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ':' → logprob: -0.0014424959663301706
    2. ':
' → logprob: -6.6264424324035645
    3. ' :' → logprob: -9.876442909240723
    4. '<|end|>' → logprob: -11.001442909240723
    5. '[' → logprob: -11.251442909240723
    6. '   ' → logprob: -11.751442909240723
    7. '       ' → logprob: -11.876442909240723
    8. ',' → logprob: -12.126442909240723
    9. '):' → logprob: -12.126442909240723
    10. '<|end|>' → logprob: -13.126442909240723

Token 57: '       ' (ID: 309)
  Prédit: '       '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '       ' → logprob: -0.028245314955711365
    2. '<|end|>' → logprob: -4.903245449066162
    3. '        ' → logprob: -5.028245449066162
    4. ' ' → logprob: -5.278245449066162
    5. '    ' → logprob: -5.278245449066162
    6. ' if' → logprob: -6.778245449066162
    7. '        
' → logprob: -6.903245449066162
    8. '[' → logprob: -7.653245449066162
    9. '   ' → logprob: -8.278244972229004
    10. ',' → logprob: -8.653244972229004

Token 58: ' k' (ID: 372)
  Prédit: ' if'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' if' → logprob: -0.019761454313993454
    2. ' ' → logprob: -5.269761562347412
    3. '        ' → logprob: -5.269761562347412
    4. 'if' → logprob: -5.394761562347412
    5. '       ' → logprob: -5.644761562347412
    6. '    ' → logprob: -7.269761562347412
    7. '<|end|>' → logprob: -8.644761085510254
    8. ' s' → logprob: -9.894761085510254
    9. '   ' → logprob: -9.894761085510254
    10. ' ' → logprob: -9.894761085510254

Token 59: ',' (ID: 11)
  Prédit: 'ey'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'ey' → logprob: -0.8714183568954468
    2. ',' → logprob: -1.1214183568954468
    3. ' =' → logprob: -1.7464183568954468
    4. '=' → logprob: -2.6214184761047363
    5. ',v' → logprob: -5.621418476104736
    6. '   ' → logprob: -7.121418476104736
    7. ' ,' → logprob: -7.371418476104736
    8. 'if' → logprob: -7.371418476104736
    9. ' if' → logprob: -7.496418476104736
    10. ' ' → logprob: -7.496418476104736

Token 60: ' v' (ID: 323)
  Prédit: 'v'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'v' → logprob: -0.012582412920892239
    2. ' v' → logprob: -4.387582302093506
    3. 'k' → logprob: -11.512582778930664
    4. '=' → logprob: -11.762582778930664
    5. 'm' → logprob: -12.012582778930664
    6. ' =' → logprob: -12.012582778930664
    7. 'val' → logprob: -12.137582778930664
    8. ' ' → logprob: -12.262582778930664
    9. 'p' → logprob: -12.387582778930664
    10. 's' → logprob: -12.637582778930664

Token 61: ' =' (ID: 314)
  Prédit: ' ='
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' =' → logprob: -0.31327390670776367
    2. '=' → logprob: -1.3132739067077637
    3. ' ' → logprob: -11.813274383544922
    4. '    ' → logprob: -13.313274383544922
    5. ',' → logprob: -13.938274383544922
    6. '   ' → logprob: -14.563274383544922
    7. '=k' → logprob: -15.438274383544922
    8. '  ' → logprob: -15.438274383544922
    9. '=int' → logprob: -15.688274383544922
    10. '=input' → logprob: -15.938274383544922

Token 62: ' pair' (ID: 10610)
  Prédit: 'pair'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'pair' → logprob: -0.47432124614715576
    2. ' pair' → logprob: -0.9743212461471558
    3. '(pair' → logprob: -9.099321365356445
    4. 'int' → logprob: -9.599321365356445
    5. 'map' → logprob: -10.724321365356445
    6. ' int' → logprob: -10.974321365356445
    7. ' map' → logprob: -11.724321365356445
    8. ' ' → logprob: -12.224321365356445
    9. '   ' → logprob: -12.474321365356445
    10. '<pair' → logprob: -13.224321365356445

Token 63: '
' (ID: 198)
  Prédit: ' ='
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' =' → logprob: -0.20432831346988678
    2. '=' → logprob: -1.7043282985687256
    3. '[' → logprob: -7.454328536987305
    4. ')' → logprob: -7.829328536987305
    5. ':' → logprob: -8.329328536987305
    6. '.split' → logprob: -8.454328536987305
    7. ' ' → logprob: -8.454328536987305
    8. ' =
' → logprob: -8.954328536987305
    9. '   ' → logprob: -9.079328536987305
    10. ',' → logprob: -9.204328536987305

Token 64: '       ' (ID: 309)
  Prédit: '       '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '       ' → logprob: -0.05402598902583122
    2. '<|end|>' → logprob: -4.054026126861572
    3. '
' → logprob: -4.304026126861572
    4. ' =' → logprob: -5.179026126861572
    5. ' if' → logprob: -5.429026126861572
    6. ' ' → logprob: -5.554026126861572
    7. ':' → logprob: -6.679026126861572
    8. '        
' → logprob: -6.679026126861572
    9. '=' → logprob: -7.054026126861572
    10. ',' → logprob: -7.179026126861572

Token 65: ' if' (ID: 538)
  Prédit: '
'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '
' → logprob: -0.2682969868183136
    2. ' if' → logprob: -1.7682969570159912
    3. ' 
' → logprob: -3.643296957015991
    4. 'if' (adapté à ' if') → logprob: -4.14329719543457
    5. '       ' → logprob: -4.64329719543457
    6. ' ' → logprob: -4.76829719543457
    7. '<|end|>' → logprob: -6.14329719543457
    8. '        ' → logprob: -6.76829719543457
    9. '
' → logprob: -8.01829719543457
    10. '        
' → logprob: -8.89329719543457

Token 66: ' found' (ID: 2491)
  Prédit: 'k'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'k' → logprob: -0.03704509511590004
    2. ' k' → logprob: -3.4120450019836426
    3. 'v' → logprob: -6.787045001983643
    4. ' marker' → logprob: -6.912045001983643
    5. 'marker' → logprob: -6.912045001983643
    6. ' v' → logprob: -8.2870454788208
    7. '   ' → logprob: -12.1620454788208
    8. ' not' → logprob: -12.4120454788208
    9. 'mark' → logprob: -12.6620454788208
    10. ' ' → logprob: -12.7870454788208

Token 67: '[' (ID: 58)
  Prédit: '['
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '[' → logprob: -0.024765800684690475
    2. '[k' → logprob: -4.024765968322754
    3. '==' → logprob: -6.649765968322754
    4. '.count' → logprob: -6.774765968322754
    5. '[int' → logprob: -6.899765968322754
    6. ' and' → logprob: -7.149765968322754
    7. '[v' → logprob: -7.399765968322754
    8. ' ==' → logprob: -7.524765968322754
    9. ' [' → logprob: -8.149765968322754
    10. '[count' → logprob: -8.524765968322754

Token 68: '0' (ID: 15)
  Prédit: '0'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '0' → logprob: -7.123899558791891e-05
    2. ' ' → logprob: -9.62507152557373
    3. '
' → logprob: -13.81257152557373
    4. 'k' → logprob: -14.31257152557373
    5. '-' → logprob: -14.37507152557373
    6. '   ' → logprob: -14.75007152557373
    7. '

' → logprob: -15.00007152557373
    8. '1' → logprob: -15.25007152557373
    9. ']' → logprob: -15.25007152557373
    10. ':' → logprob: -15.56257152557373

Token 69: ']:
' (ID: 22152)
  Prédit: ' =='
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' ==' → logprob: -0.293676495552063
    2. '==' → logprob: -1.418676495552063
    3. ' <' → logprob: -5.043676376342773
    4. ')' → logprob: -6.168676376342773
    5. ' >=' → logprob: -7.168676376342773
    6. '):' → logprob: -7.168676376342773
    7. ':' → logprob: -7.293676376342773
    8. ' ):' → logprob: -8.043676376342773
    9. ']==' → logprob: -8.168676376342773
    10. '<' → logprob: -8.668676376342773

Token 70: '           ' (ID: 352)
  Prédit: '           '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '           ' → logprob: -0.0016281676944345236
    2. ':' → logprob: -8.001627922058105
    3. ' break' → logprob: -8.001627922058105
    4. '               ' → logprob: -8.376627922058105
    5. ' return' → logprob: -8.876627922058105
    6. ' =' → logprob: -9.001627922058105
    7. ' continue' → logprob: -9.001627922058105
    8. ' and' → logprob: -9.376627922058105
    9. '		' → logprob: -10.626627922058105
    10. ' or' → logprob: -10.751627922058105

Token 71: ' res' (ID: 694)
  Prédit: '           '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '           ' → logprob: -0.7833263874053955
    2. ' break' → logprob: -0.7833263874053955
    3. ' return' → logprob: -3.1583263874053955
    4. '               ' → logprob: -3.7833263874053955
    5. 'break' → logprob: -4.658326148986816
    6. ' if' → logprob: -5.158326148986816
    7. ' continue' → logprob: -6.283326148986816
    8. 'return' → logprob: -6.283326148986816
    9. '       ' → logprob: -7.283326148986816
    10. '   ' → logprob: -8.158326148986816

Token 72: '[' (ID: 58)
  Prédit: '['
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '[' → logprob: -0.2711207866668701
    2. '.append' → logprob: -1.5211207866668701
    3. '[-' → logprob: -4.021121025085449
    4. '.extend' → logprob: -8.27112102508545
    5. ' =' → logprob: -8.64612102508545
    6. ' +=' → logprob: -9.02112102508545
    7. ' [' → logprob: -9.02112102508545
    8. '.' → logprob: -9.27112102508545
    9. ' .' → logprob: -9.52112102508545
    10. '.pop' → logprob: -10.02112102508545

Token 73: '0' (ID: 15)
  Prédit: '0'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '0' → logprob: -0.00615345872938633
    2. '-' → logprob: -5.256153583526611
    3. ' ' → logprob: -7.256153583526611
    4. '1' → logprob: -9.131153106689453
    5. ' -' → logprob: -9.631153106689453
    6. ']' → logprob: -10.881153106689453
    7. '
' → logprob: -12.756153106689453
    8. '   ' → logprob: -13.131153106689453
    9. '[' → logprob: -13.506153106689453
    10. ')' → logprob: -13.818653106689453

Token 74: ']' (ID: 60)
  Prédit: ' +='
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' +=' → logprob: -0.07464729994535446
    2. ' =' → logprob: -3.9496471881866455
    3. ']' → logprob: -4.324647426605225
    4. ' -=' → logprob: -4.574647426605225
    5. ' *=' → logprob: -4.824647426605225
    6. '+=' → logprob: -5.074647426605225
    7. ' ' → logprob: -5.574647426605225
    8. ')' → logprob: -5.699647426605225
    9. '=' → logprob: -6.324647426605225
    10. ' +' → logprob: -6.574647426605225

Token 75: ' +=' (ID: 2757)
  Prédit: ' +='
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' +=' → logprob: -0.586285412311554
    2. '+=' → logprob: -1.0862853527069092
    3. ' =' → logprob: -2.961285352706909
    4. '=' → logprob: -3.086285352706909
    5. ' *=' → logprob: -5.586285591125488
    6. '*=' → logprob: -5.836285591125488
    7. '.append' → logprob: -7.836285591125488
    8. ' -=' → logprob: -7.836285591125488
    9. '+' → logprob: -8.086285591125488
    10. '   ' → logprob: -8.461285591125488

Token 76: ' int' (ID: 677)
  Prédit: ' int'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' int' → logprob: -0.9134698510169983
    2. '1' → logprob: -1.2884697914123535
    3. 'int' → logprob: -1.4134697914123535
    4. ' ' → logprob: -2.6634697914123535
    5. ' v' → logprob: -5.6634697914123535
    6. 'v' → logprob: -5.9134697914123535
    7. '"' → logprob: -7.2884697914123535
    8. ' len' → logprob: -7.4134697914123535
    9. 'len' → logprob: -7.6634697914123535
    10. ' "' → logprob: -8.163470268249512

Token 77: '(v' (ID: 6932)
  Prédit: '(v'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(v' → logprob: -0.040357884019613266
    2. '(k' → logprob: -3.290357828140259
    3. '(' → logprob: -6.290358066558838
    4. 'v' → logprob: -8.41535758972168
    5. ' (' → logprob: -9.16535758972168
    6. 'k' → logprob: -9.66535758972168
    7. '(marker' → logprob: -10.41535758972168
    8. '((' → logprob: -12.16535758972168
    9. ' v' → logprob: -12.29035758972168
    10. '(value' → logprob: -12.41535758972168

Token 78: ')
' (ID: 446)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')' → logprob: -0.0814288929104805
    2. ')
' → logprob: -2.5814290046691895
    3. '       ' → logprob: -7.0814290046691895
    4. '           ' → logprob: -8.081428527832031
    5. ')
' → logprob: -8.081428527832031
    6. ' )' → logprob: -8.206428527832031
    7. '   ' → logprob: -8.956428527832031
    8. '               ' → logprob: -9.081428527832031
    9. ')

' → logprob: -9.331428527832031
    10. ' )
' → logprob: -9.456428527832031

Token 79: '       ' (ID: 309)
  Prédit: '       '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '       ' → logprob: -0.5944947600364685
    2. ' elif' → logprob: -1.5944948196411133
    3. ' else' → logprob: -1.7194948196411133
    4. 'elif' → logprob: -3.4694948196411133
    5. 'else' → logprob: -3.9694948196411133
    6. '   ' → logprob: -5.219494819641113
    7. ' if' → logprob: -5.844494819641113
    8. ' ' → logprob: -5.969494819641113
    9. '<|end|>' → logprob: -6.594494819641113
    10. '           ' → logprob: -6.594494819641113

Token 80: ' if' (ID: 538)
  Prédit: 'elif'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'elif' → logprob: -0.14212378859519958
    2. ' elif' → logprob: -2.8921236991882324
    3. 'if' (adapté à ' if') → logprob: -3.3921236991882324
    4. '       ' → logprob: -3.6421236991882324
    5. 'else' → logprob: -4.517123699188232
    6. ' if' → logprob: -5.642123699188232
    7. '   ' → logprob: -6.267123699188232
    8. ' else' → logprob: -7.142123699188232
    9. '           ' → logprob: -10.39212417602539
    10. ' ' → logprob: -12.89212417602539

Token 81: ' k' (ID: 372)
  Prédit: ' k'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' k' → logprob: -0.01696397177875042
    2. 'k' → logprob: -4.141963958740234
    3. ' marker' → logprob: -7.516963958740234
    4. ' ' → logprob: -8.516963958740234
    5. ' not' → logprob: -9.266963958740234
    6. ' pair' → logprob: -9.891963958740234
    7. 'marker' → logprob: -11.641963958740234
    8. '(k' → logprob: -12.454463958740234
    9. ' ' → logprob: -12.579463958740234
    10. ' v' → logprob: -12.641963958740234

Token 82: ' ==' (ID: 951)
  Prédit: ' =='
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' ==' → logprob: -0.22542783617973328
    2. '==' → logprob: -1.6004278659820557
    3. '==
' → logprob: -12.350427627563477
    4. '=' → logprob: -12.850427627563477
    5. '[' → logprob: -13.100427627563477
    6. ' ' → logprob: -13.100427627563477
    7. '===' → logprob: -14.350427627563477
    8. ' =' → logprob: -14.350427627563477
    9. ')' → logprob: -14.725427627563477
    10. ' ' → logprob: -14.975427627563477

Token 83: ' marker' (ID: 22071)
  Prédit: ' marker'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' marker' → logprob: -0.11575087904930115
    2. 'marker' → logprob: -2.490750789642334
    3. ''' → logprob: -4.365750789642334
    4. ' f' → logprob: -4.490750789642334
    5. '"' → logprob: -7.115750789642334
    6. ' '' → logprob: -7.240750789642334
    7. 'f' → logprob: -7.365750789642334
    8. '(marker' → logprob: -8.615751266479492
    9. '_marker' → logprob: -9.365751266479492
    10. ' ' → logprob: -10.490751266479492

Token 84: ':
' (ID: 734)
  Prédit: ':'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ':' → logprob: -0.009929967112839222
    2. ':
' → logprob: -4.63493013381958
    3. ' :' → logprob: -9.884929656982422
    4. '       ' → logprob: -10.509929656982422
    5. '):' → logprob: -10.509929656982422
    6. ' and' → logprob: -10.634929656982422
    7. ':return' → logprob: -11.259929656982422
    8. '           ' → logprob: -12.009929656982422
    9. ' :
' → logprob: -12.259929656982422
    10. '):
' → logprob: -12.384929656982422

Token 85: '           ' (ID: 352)
  Prédit: ' found'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' found' → logprob: -0.5474714636802673
    2. '           ' → logprob: -1.297471523284912
    3. 'found' → logprob: -1.922471523284912
    4. '       ' → logprob: -7.172471523284912
    5. '	found' → logprob: -7.547471523284912
    6. '
' → logprob: -8.047471046447754
    7. '   ' → logprob: -8.422471046447754
    8. '(found' → logprob: -9.172471046447754
    9. ' Found' → logprob: -9.922471046447754
    10. 'Found' → logprob: -10.047471046447754

Token 86: ' found' (ID: 2491)
  Prédit: ' found'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' found' → logprob: -0.16026932001113892
    2. 'found' (adapté à ' found') → logprob: -1.9102692604064941
    3. 'Found' → logprob: -11.160269737243652
    4. '	found' → logprob: -11.160269737243652
    5. '           ' → logprob: -11.535269737243652
    6. '
' → logprob: -12.910269737243652
    7. '       ' → logprob: -13.660269737243652
    8. '   ' → logprob: -13.785269737243652
    9. '_found' → logprob: -14.535269737243652
    10. ' Found' → logprob: -14.535269737243652

Token 87: '[' (ID: 58)
  Prédit: '['
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '[' → logprob: -4.320199877838604e-07
    2. '```' → logprob: -15.625
    3. '][' → logprob: -17.5
    4. ' [' → logprob: -17.75
    5. 's' → logprob: -19.125
    6. '[
' → logprob: -19.25
    7. '=' → logprob: -19.25
    8. ')[' → logprob: -19.5625
    9. '...' → logprob: -19.6875
    10. '
' → logprob: -19.75

Token 88: '0' (ID: 15)
  Prédit: '0'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '0' → logprob: -1.4021237802808173e-05
    2. ' ' → logprob: -11.375014305114746
    3. '[' → logprob: -13.000014305114746
    4. '][' → logprob: -15.875014305114746
    5. '(' → logprob: -18.12501335144043
    6. '<|end|>' → logprob: -18.37501335144043
    7. '-' → logprob: -18.50001335144043
    8. ']' → logprob: -18.62501335144043
    9. ')' → logprob: -18.75001335144043
    10. '۰' → logprob: -18.87501335144043

Token 89: ']' (ID: 60)
  Prédit: ']'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ']' → logprob: -0.07129184156656265
    2. '=' → logprob: -2.821291923522949
    3. ']=' → logprob: -4.946291923522949
    4. ' =' → logprob: -6.196291923522949
    5. ' ]' → logprob: -9.44629192352295
    6. ']+=' → logprob: -10.32129192352295
    7. ')' → logprob: -11.94629192352295
    8. '<|end|>' → logprob: -11.94629192352295
    9. '=True' → logprob: -12.44629192352295
    10. '[' → logprob: -13.82129192352295

Token 90: ' =' (ID: 314)
  Prédit: '='
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '=' → logprob: -0.3132713735103607
    2. ' =' → logprob: -1.313271403312683
    3. '=True' → logprob: -12.063271522521973
    4. ' |=' → logprob: -13.438271522521973
    5. ' ' → logprob: -13.813271522521973
    6. ' +=' → logprob: -14.063271522521973
    7. '+=' → logprob: -14.313271522521973
    8. '[' → logprob: -17.688270568847656
    9. ' ' → logprob: -17.688270568847656
    10. 's' → logprob: -18.188270568847656

Token 91: ' ' (ID: 220)
  Prédit: '1'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '1' → logprob: -0.00024751186720095575
    2. ' ' → logprob: -8.375247955322266
    3. 'True' → logprob: -11.625247955322266
    4. ' True' → logprob: -11.750247955322266
    5. '   ' → logprob: -17.000247955322266
    6. ' ' → logprob: -19.250247955322266
    7. '(True' → logprob: -19.500247955322266
    8. '0' → logprob: -19.875247955322266
    9. '  ' → logprob: -20.125247955322266
    10. '2' → logprob: -20.750247955322266

Token 92: '1' (ID: 16)
  Prédit: '1'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '1' → logprob: -3.03521392197581e-05
    2. 'True' → logprob: -10.500030517578125
    3. ' ' → logprob: -12.875030517578125
    4. ' True' → logprob: -15.375030517578125
    5. '   ' → logprob: -18.000030517578125
    6. '0' → logprob: -19.500030517578125
    7. '(True' → logprob: -19.750030517578125
    8. 'true' → logprob: -20.750030517578125
    9. '[' → logprob: -20.750030517578125
    10. '  ' → logprob: -20.875030517578125

Token 93: '

' (ID: 279)
  Prédit: '
'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '
' → logprob: -0.5318456292152405
    2. '<|end|>' → logprob: -1.1568455696105957
    3. 'process' → logprob: -3.0318455696105957
    4. '\n' → logprob: -3.6568455696105957
    5. ' process' → logprob: -5.031845569610596
    6. 'newline' → logprob: -5.156845569610596
    7. '<|end|>' → logprob: -5.531845569610596
    8. '   ' → logprob: -6.406845569610596
    9. ' ' → logprob: -6.781845569610596
    10. '```' → logprob: -7.281845569610596

Token 94: 'process' (ID: 9139)
  Prédit: 'process'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'process' → logprob: -0.3530554175376892
    2. ')' → logprob: -1.478055477142334
    3. '<|end|>' → logprob: -3.603055477142334
    4. '#' → logprob: -4.728055477142334
    5. '
' → logprob: -5.353055477142334
    6. '(' → logprob: -5.478055477142334
    7. '(process' → logprob: -5.603055477142334
    8. '\n' → logprob: -5.853055477142334
    9. ' process' → logprob: -5.978055477142334
    10. '.' → logprob: -6.103055477142334

Token 95: '()
' (ID: 1234)
  Prédit: '()'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '()' → logprob: -9.729906196298543e-06
    2. '(' → logprob: -12.125009536743164
    3. ' ()' → logprob: -13.875009536743164
    4. '();' → logprob: -14.250009536743164
    5. '()
' → logprob: -14.375009536743164
    6. '()`' → logprob: -15.000009536743164
    7. '()]' → logprob: -15.250009536743164
    8. '()?' → logprob: -15.250009536743164
    9. '().' → logprob: -15.375009536743164
    10. '()<' → logprob: -15.500009536743164

Token 96: 'print' (ID: 1598)
  Prédit: 'print'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'print' → logprob: -1.4736459888808895e-05
    2. '<|end|>' → logprob: -12.125014305114746
    3. '```' → logprob: -12.250014305114746
    4. 'for' → logprob: -13.500014305114746
    5. ' print' → logprob: -13.750014305114746
    6. 'if' → logprob: -13.875014305114746
    7. 'return' → logprob: -15.000014305114746
    8. '
' → logprob: -15.500014305114746
    9. '#print' → logprob: -15.500014305114746
    10. '#' → logprob: -15.750014305114746

Token 97: '(res' (ID: 8331)
  Prédit: '(res'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(res' → logprob: -0.06215175613760948
    2. '(' → logprob: -2.8121516704559326
    3. '('' → logprob: -9.312151908874512
    4. ' (' → logprob: -10.062151908874512
    5. '(*' → logprob: -10.812151908874512
    6. 'res' → logprob: -11.437151908874512
    7. '(sum' → logprob: -11.812151908874512
    8. '(f' → logprob: -12.062151908874512
    9. '()' → logprob: -13.187151908874512
    10. '(
' → logprob: -13.937151908874512

Token 98: '[' (ID: 58)
  Prédit: '['
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '[' → logprob: -9.088346359931165e-07
    2. ')' → logprob: -14.125000953674316
    3. '0' → logprob: -16.75
    4. '```' → logprob: -16.75
    5. ')[' → logprob: -18.5
    6. ' [' → logprob: -20.25
    7. '``' → logprob: -21.0
    8. '`' → logprob: -21.375
    9. '][' → logprob: -21.75
    10. ']' → logprob: -21.875

Token 99: '0' (ID: 15)
  Prédit: '0'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '0' → logprob: -1.9361264946837764e-07
    2. ' ' → logprob: -16.625
    3. '[' → logprob: -17.0
    4. '-' → logprob: -18.125
    5. '```' → logprob: -18.25
    6. '
' → logprob: -19.0
    7. '   ' → logprob: -19.25
    8. '０' → logprob: -19.5
    9. '۰' → logprob: -19.5
    10. '

' → logprob: -19.625

Token 100: '])' (ID: 4636)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')' → logprob: -5.319370302458992e-06
    2. '))' → logprob: -12.625005722045898
    3. '})' → logprob: -14.000005722045898
    4. '])' → logprob: -14.375005722045898
    5. '`)' → logprob: -15.500005722045898
    6. ')`' → logprob: -16.0000057220459
    7. ' )' → logprob: -16.3750057220459
    8. '）' → logprob: -17.2500057220459
    9. ')
' → logprob: -18.1250057220459
    10. ')}' → logprob: -18.2500057220459


RÉSUMÉ:
--------------------------------------------------------------------------------
Total des tokens analysés: 98
Tokens correctement prédits (1ère position, stricte): 39
Tokens correctement prédits (1ère position, avec adaptation): 39
Tokens correctement prédits (top 10): 75
Précision stricte (1ère position): 39.80%
Précision adaptée (1ère position): 39.80%
Précision (top 10): 76.53%
================================================================================
