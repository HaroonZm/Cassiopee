================================================================================
ANALYSE DE PRÉDICTION TOKEN PAR TOKEN (BATCH API)
Date: 2025-06-04 20:11:24
Modèle de tokenisation: gpt-4o-mini
================================================================================

SCRIPT ANALYSÉ:
--------------------------------------------------------------------------------
N, K = map(int, input().split())
print(int(N % K != 0))
--------------------------------------------------------------------------------

RÉSULTATS D'ANALYSE TOKEN PAR TOKEN:
--------------------------------------------------------------------------------
Token 0: 'N' (ID: 45)
  → Token d'amorce (pas de prédiction)

Token 1: ',' (ID: 11)
  → Token d'amorce (pas de prédiction)

Token 2: ' K' (ID: 658)
  → Token d'amorce (pas de prédiction)

Token 3: ' =' (ID: 314)
  Prédit: '='
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '=' → logprob: -0.023425642400979996
    2. ' =' → logprob: -4.148425579071045
    3. ',' → logprob: -5.023425579071045
    4. '.' → logprob: -8.398426055908203
    5. '+' → logprob: -9.023426055908203
    6. ')' → logprob: -9.273426055908203
    7. '[' → logprob: -9.398426055908203
    8. '#' → logprob: -10.148426055908203
    9. ''' → logprob: -10.398426055908203
    10. ' ' → logprob: -10.523426055908203

Token 4: ' map' (ID: 4014)
  Prédit: ' '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' ' → logprob: -0.09702791273593903
    2. ' map' → logprob: -3.0970280170440674
    3. '10' → logprob: -3.5970280170440674
    4. 'map' → logprob: -4.597027778625488
    5. '0' → logprob: -6.097027778625488
    6. ' input' → logprob: -6.097027778625488
    7. 'input' → logprob: -6.597027778625488
    8. '5' → logprob: -7.097027778625488
    9. '20' → logprob: -7.097027778625488
    10. '32' → logprob: -7.972027778625488

Token 5: '(int' (ID: 2742)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(' → logprob: -0.01603788509964943
    2. '(lambda' → logprob: -4.516037940979004
    3. '(int' → logprob: -5.516037940979004
    4. '(str' → logprob: -7.641037940979004
    5. '```' → logprob: -9.266037940979004
    6. '<|end|>' → logprob: -9.391037940979004
    7. '(input' → logprob: -9.766037940979004
    8. '(user' → logprob: -9.891037940979004
    9. '(
' → logprob: -10.391037940979004
    10. '(eval' → logprob: -11.141037940979004

Token 6: ',' (ID: 11)
  Prédit: '(input'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '(input' → logprob: -0.3702891767024994
    2. '(' → logprob: -1.6202892065048218
    3. ')' → logprob: -2.2452890872955322
    4. '(user' → logprob: -6.870289325714111
    5. '(int' → logprob: -6.995289325714111
    6. 'input' → logprob: -7.370289325714111
    7. '```' → logprob: -7.370289325714111
    8. '(str' → logprob: -7.495289325714111
    9. '(raw' → logprob: -8.120288848876953
    10. '('' → logprob: -9.120288848876953

Token 7: ' input' (ID: 3422)
  Prédit: 'input'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'input' → logprob: -0.20144394040107727
    2. ' input' → logprob: -1.7014439105987549
    3. '(input' → logprob: -10.826443672180176
    4. ')' → logprob: -11.701443672180176
    5. ',input' → logprob: -13.201443672180176
    6. '=input' → logprob: -15.451443672180176
    7. '<input' → logprob: -15.951443672180176
    8. '	input' → logprob: -16.326444625854492
    9. '[input' → logprob: -16.826444625854492
    10. '_input' → logprob: -16.951444625854492

Token 8: '().' (ID: 1454)
  Prédit: '()'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '()' → logprob: -0.8797216415405273
    2. '())' → logprob: -0.8797216415405273
    3. ')' → logprob: -2.3797216415405273
    4. '(' → logprob: -2.7547216415405273
    5. '('' → logprob: -5.504721641540527
    6. '(()' → logprob: -6.004721641540527
    7. '`()' → logprob: -7.004721641540527
    8. '```' → logprob: -7.129721641540527
    9. '().' → logprob: -7.254721641540527
    10. '(""))' → logprob: -7.254721641540527

Token 9: 'split' (ID: 13627)
  Prédit: 'split'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'split' → logprob: -0.002525245537981391
    2. 'strip' → logprob: -6.002525329589844
    3. 'rstrip' → logprob: -10.752525329589844
    4. 'read' → logprob: -11.252525329589844
    5. ')' → logprob: -11.752525329589844
    6. ' split' → logprob: -12.002525329589844
    7. 'spl' → logprob: -15.127525329589844
    8. '(split' → logprob: -15.627525329589844
    9. 'startswith' → logprob: -15.627525329589844
    10. 'replace' → logprob: -15.752525329589844

Token 10: '())
' (ID: 4574)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ')' → logprob: -0.03583116829395294
    2. '))' → logprob: -3.7858312129974365
    3. '())' → logprob: -4.410830974578857
    4. '()' → logprob: -8.660831451416016
    5. '()))' → logprob: -9.785831451416016
    6. '(' → logprob: -9.910831451416016
    7. '`)' → logprob: -10.160831451416016
    8. ')`' → logprob: -11.660831451416016
    9. '>)' → logprob: -11.910831451416016
    10. ')))' → logprob: -12.285831451416016

Token 11: 'print' (ID: 1598)
  Prédit: 'a'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'a' → logprob: -0.7303032279014587
    2. '#' → logprob: -2.3553032875061035
    3. 'x' → logprob: -2.7303032875061035
    4. '```' → logprob: -3.1053032875061035
    5. ',' → logprob: -3.2303032875061035
    6. 'for' → logprob: -3.3553032875061035
    7. ''' → logprob: -3.6053032875061035
    8. '`' → logprob: -3.6053032875061035
    9. ')' → logprob: -3.7303032875061035
    10. '\n' → logprob: -3.8553032875061035

Token 12: '(int' (ID: 2742)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '(' → logprob: -0.0006177236791700125
    2. '('' → logprob: -8.000617980957031
    3. '("("' → logprob: -8.250617980957031
    4. '((' → logprob: -12.250617980957031
    5. '()' → logprob: -12.500617980957031
    6. '("""' → logprob: -12.625617980957031
    7. '(
' → logprob: -13.250617980957031
    8. '(`' → logprob: -13.500617980957031
    9. '("")' → logprob: -14.000617980957031
    10. '```' → logprob: -14.375617980957031

Token 13: '(N' (ID: 10564)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(' → logprob: -0.009472259320318699
    2. '(input' → logprob: -5.884472370147705
    3. '(N' → logprob: -6.009472370147705
    4. '((' → logprob: -6.384472370147705
    5. '('' → logprob: -6.509472370147705
    6. '(pow' → logprob: -8.509471893310547
    7. '(K' → logprob: -8.509471893310547
    8. '("' → logprob: -9.009471893310547
    9. '(len' → logprob: -9.259471893310547
    10. ' (' → logprob: -9.384471893310547

Token 14: ' %' (ID: 1851)
  Prédit: ' /'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' /' → logprob: -0.9379041194915771
    2. '/' → logprob: -1.0629041194915771
    3. '/K' → logprob: -2.437904119491577
    4. '*' → logprob: -3.312904119491577
    5. '%' → logprob: -3.437904119491577
    6. '**' → logprob: -3.437904119491577
    7. '>' → logprob: -4.187904357910156
    8. ')' → logprob: -4.812904357910156
    9. '+' → logprob: -4.812904357910156
    10. ' %' → logprob: -5.062904357910156

Token 15: ' K' (ID: 658)
  Prédit: 'K'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'K' → logprob: -0.05499681457877159
    2. ' K' → logprob: -2.9299967288970947
    3. ' ' → logprob: -9.304996490478516
    4. '(' → logprob: -12.429996490478516
    5. ' (' → logprob: -12.554996490478516
    6. '1' → logprob: -12.554996490478516
    7. ''' → logprob: -13.304996490478516
    8. '"' → logprob: -13.429996490478516
    9. '10' → logprob: -13.554996490478516
    10. '100' → logprob: -13.679996490478516

Token 16: ' !=' (ID: 1666)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ')' → logprob: -0.47410252690315247
    2. '))' → logprob: -0.9741024971008301
    3. ')))' → logprob: -11.099102973937988
    4. '**' → logprob: -12.974102973937988
    5. '%' → logprob: -13.599102973937988
    6. ')**' → logprob: -13.974102973937988
    7. ''))' → logprob: -14.099102973937988
    8. '),' → logprob: -14.224102973937988
    9. ' )' → logprob: -14.849102973937988
    10. ' ))' → logprob: -14.849102973937988

Token 17: ' ' (ID: 220)
  Prédit: '0'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '0' → logprob: -0.0009117019944824278
    2. ' ' → logprob: -7.000911712646484
    3. ')' → logprob: -17.250911712646484
    4. '=' → logprob: -17.375911712646484
    5. '   ' → logprob: -17.375911712646484
    6. '  ' → logprob: -17.938411712646484
    7. ' ' → logprob: -18.938411712646484
    8. '`' → logprob: -19.000911712646484
    9. '۰' → logprob: -19.188411712646484
    10. '```' → logprob: -19.250911712646484

Token 18: '0' (ID: 15)
  Prédit: '0'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '0' → logprob: -4.36574100604048e-06
    2. ' ' → logprob: -12.375004768371582
    3. ')' → logprob: -17.562503814697266
    4. '۰' → logprob: -18.125003814697266
    5. '```' → logprob: -18.500003814697266
    6. '1' → logprob: -18.687503814697266
    7. '０' → logprob: -18.875003814697266
    8. 'zero' → logprob: -19.000003814697266
    9. ' ' → logprob: -19.187503814697266
    10. '   ' → logprob: -19.187503814697266

Token 19: '))' (ID: 915)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')' → logprob: -0.20141762495040894
    2. '))' → logprob: -1.7014176845550537
    3. ')))' → logprob: -13.701417922973633
    4. ')
' → logprob: -14.576417922973633
    5. '),' → logprob: -14.826417922973633
    6. ' )' → logprob: -14.826417922973633
    7. '`)' → logprob: -14.826417922973633
    8. ''))' → logprob: -14.951417922973633
    9. '')' → logprob: -15.201417922973633
    10. '))
' → logprob: -15.326417922973633


RÉSUMÉ:
--------------------------------------------------------------------------------
Total des tokens analysés: 17
Tokens correctement prédits (1ère position, stricte): 2
Tokens correctement prédits (1ère position, avec adaptation): 2
Tokens correctement prédits (top 10): 12
Précision stricte (1ère position): 11.76%
Précision adaptée (1ère position): 11.76%
Précision (top 10): 70.59%
================================================================================
