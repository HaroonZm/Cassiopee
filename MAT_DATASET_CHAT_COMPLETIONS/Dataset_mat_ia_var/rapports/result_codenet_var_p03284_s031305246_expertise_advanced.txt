================================================================================
ANALYSE DE PRÉDICTION TOKEN PAR TOKEN (BATCH API)
Date: 2025-06-04 20:11:21
Modèle de tokenisation: gpt-4o-mini
================================================================================

SCRIPT ANALYSÉ:
--------------------------------------------------------------------------------
from sys import stdin

N, K = map(int, stdin.readline().split())
print(int(bool(N % K)))
--------------------------------------------------------------------------------

RÉSULTATS D'ANALYSE TOKEN PAR TOKEN:
--------------------------------------------------------------------------------
Token 0: 'from' (ID: 2845)
  → Token d'amorce (pas de prédiction)

Token 1: ' sys' (ID: 12228)
  → Token d'amorce (pas de prédiction)

Token 2: ' import' (ID: 1588)
  → Token d'amorce (pas de prédiction)

Token 3: ' stdin' (ID: 75143)
  Prédit: 'argv'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'argv' → logprob: -0.051410701125860214
    2. ' argv' → logprob: -3.426410675048828
    3. 'exit' → logprob: -4.176410675048828
    4. ' exit' → logprob: -6.801410675048828
    5. 'stdout' → logprob: -7.301410675048828
    6. 'stdin' → logprob: -8.426410675048828
    7. 'path' → logprob: -8.926410675048828
    8. 'import' → logprob: -10.176410675048828
    9. 'stderr' → logprob: -10.426410675048828
    10. 'version' → logprob: -10.676410675048828

Token 4: '

' (ID: 279)
  Prédit: '.'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '.' → logprob: -0.0006454797694459558
    2. '.readline' → logprob: -8.250645637512207
    3. '\n' → logprob: -8.500645637512207
    4. '.
' → logprob: -10.125645637512207
    5. 'import' → logprob: -10.250645637512207
    6. '\' → logprob: -10.375645637512207
    7. '```' → logprob: -10.875645637512207
    8. '.read' → logprob: -10.875645637512207
    9. '' → logprob: -12.000645637512207
    10. ',' → logprob: -12.125645637512207

Token 5: 'N' (ID: 45)
  Prédit: '.'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '.' → logprob: -0.026680389419198036
    2. '.readline' → logprob: -3.9016804695129395
    3. '.read' → logprob: -6.2766804695129395
    4. '\n' → logprob: -7.0266804695129395
    5. ',' → logprob: -7.4016804695129395
    6. 'for' → logprob: -7.5266804695129395
    7. 'print' → logprob: -7.7766804695129395
    8. 'import' → logprob: -7.9016804695129395
    9. '
' → logprob: -8.151679992675781
    10. '```' → logprob: -8.276679992675781

Token 6: ',' (ID: 11)
  Prédit: '='
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '=' → logprob: -0.697516143321991
    2. ' =' → logprob: -0.697516143321991
    3. ' ' → logprob: -6.322515964508057
    4. ',' → logprob: -6.697515964508057
    5. '.' → logprob: -7.447515964508057
    6. ')' → logprob: -7.947515964508057
    7. '=int' → logprob: -8.947516441345215
    8. '_' → logprob: -9.572516441345215
    9. '  ' → logprob: -10.072516441345215
    10. '>' → logprob: -10.697516441345215

Token 7: ' K' (ID: 658)
  Prédit: ' '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' ' → logprob: -0.1437942087650299
    2. ' M' → logprob: -2.893794298171997
    3. 'M' → logprob: -3.268794298171997
    4. 'input' → logprob: -4.143794059753418
    5. '_' → logprob: -5.143794059753418
    6. ' K' → logprob: -5.643794059753418
    7. 'stdin' → logprob: -6.143794059753418
    8. '"' → logprob: -6.518794059753418
    9. 'space' → logprob: -6.643794059753418
    10. ' =' → logprob: -6.643794059753418

Token 8: ' =' (ID: 314)
  Prédit: ' ='
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' =' → logprob: -0.0486019104719162
    2. '=' → logprob: -3.0486018657684326
    3. ',' → logprob: -11.423602104187012
    4. ' ' → logprob: -13.298602104187012
    5. '=input' → logprob: -14.423602104187012
    6. ' ,' → logprob: -15.173602104187012
    7. ' =",' → logprob: -15.548602104187012
    8. ')' → logprob: -15.673602104187012
    9. '<|end|>' → logprob: -15.673602104187012
    10. '=int' → logprob: -15.923602104187012

Token 9: ' map' (ID: 4014)
  Prédit: ' map'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' map' → logprob: -0.020559638738632202
    2. 'map' → logprob: -3.895559549331665
    3. ' stdin' → logprob: -11.645559310913086
    4. ' list' → logprob: -12.270559310913086
    5. ' ' → logprob: -13.145559310913086
    6. 'stdin' → logprob: -14.145559310913086
    7. ' [' → logprob: -14.645559310913086
    8. 'list' → logprob: -14.770559310913086
    9. '(map' → logprob: -15.145559310913086
    10. '[' → logprob: -15.645559310913086

Token 10: '(int' (ID: 2742)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(' → logprob: -0.015604105778038502
    2. '(lambda' → logprob: -5.015604019165039
    3. '(int' → logprob: -5.390604019165039
    4. '(str' → logprob: -5.640604019165039
    5. '<|end|>' → logprob: -8.390604019165039
    6. '('' → logprob: -10.515604019165039
    7. '(stdin' → logprob: -10.515604019165039
    8. '()' → logprob: -10.515604019165039
    9. '(user' → logprob: -10.640604019165039
    10. '(token' → logprob: -10.765604019165039

Token 11: ',' (ID: 11)
  Prédit: '(stdin'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(stdin' → logprob: -0.0034406499471515417
    2. ')' → logprob: -6.128440856933594
    3. '(' → logprob: -7.003440856933594
    4. 'stdin' → logprob: -8.378440856933594
    5. '(st' → logprob: -9.753440856933594
    6. '(std' → logprob: -11.503440856933594
    7. '(input' → logprob: -11.503440856933594
    8. ',' → logprob: -11.503440856933594
    9. ' stdin' → logprob: -11.878440856933594
    10. ')(' → logprob: -12.128440856933594

Token 12: ' stdin' (ID: 75143)
  Prédit: 'stdin'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'stdin' → logprob: -0.20183105766773224
    2. ' stdin' → logprob: -1.7018311023712158
    3. '(stdin' → logprob: -7.826830863952637
    4. ')' → logprob: -11.576830863952637
    5. '.stdin' → logprob: -12.201830863952637
    6. 'input' → logprob: -12.576830863952637
    7. 'stdout' → logprob: -15.326830863952637
    8. ' input' → logprob: -15.826830863952637
    9. ' ' → logprob: -16.326831817626953
    10. ' )' → logprob: -16.576831817626953

Token 13: '.readline' (ID: 74673)
  Prédit: '.readline'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '.readline' → logprob: -0.005311666056513786
    2. '.read' → logprob: -5.255311489105225
    3. '.' → logprob: -9.505311965942383
    4. '.readlines' → logprob: -12.755311965942383
    5. ').' → logprob: -15.755311965942383
    6. ' .' → logprob: -15.880311965942383
    7. '.Read' → logprob: -16.255311965942383
    8. '.buffer' → logprob: -17.755311965942383
    9. '.READ' → logprob: -17.755311965942383
    10. '.rstrip' → logprob: -17.755311965942383

Token 14: '().' (ID: 1454)
  Prédit: '().'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '().' → logprob: -0.444807767868042
    2. '())' → logprob: -1.069807767868042
    3. '()' → logprob: -4.194808006286621
    4. '()))' → logprob: -7.319808006286621
    5. ')' → logprob: -8.694808006286621
    6. '()[' → logprob: -11.069808006286621
    7. '());' → logprob: -11.194808006286621
    8. '();)' → logprob: -12.194808006286621
    9. ' ())' → logprob: -12.569808006286621
    10. '(' → logprob: -12.569808006286621

Token 15: 'split' (ID: 13627)
  Prédit: 'strip'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'strip' → logprob: -0.022993173450231552
    2. 'split' → logprob: -4.022993087768555
    3. 'rstrip' → logprob: -5.397993087768555
    4. ')' → logprob: -8.397993087768555
    5. 'read' → logprob: -9.647993087768555
    6. ' strip' → logprob: -11.647993087768555
    7. '())' → logprob: -13.272993087768555
    8. '```' → logprob: -13.397993087768555
    9. '_strip' → logprob: -14.147993087768555
    10. '()' → logprob: -14.272993087768555

Token 16: '())
' (ID: 4574)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ')' → logprob: -0.017991306260228157
    2. '))' → logprob: -4.142991542816162
    3. '())' → logprob: -6.392991542816162
    4. '()' → logprob: -8.267991065979004
    5. '()))' → logprob: -11.517991065979004
    6. '`)' → logprob: -12.267991065979004
    7. ')))' → logprob: -12.892991065979004
    8. '(' → logprob: -13.392991065979004
    9. '),' → logprob: -13.642991065979004
    10. ')
' → logprob: -13.767991065979004

Token 17: 'print' (ID: 1598)
  Prédit: 'a'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'a' → logprob: -0.5979557037353516
    2. 'for' → logprob: -2.3479557037353516
    3. '\n' → logprob: -2.4729557037353516
    4. 'A' → logprob: -3.2229557037353516
    5. 'd' → logprob: -3.3479557037353516
    6. 'data' → logprob: -3.4729557037353516
    7. 'x' → logprob: -3.7229557037353516
    8. '' → logprob: -3.9729557037353516
    9. 's' → logprob: -4.222955703735352
    10. '
' → logprob: -4.722955703735352

Token 18: '(int' (ID: 2742)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '(' → logprob: -0.0011504596332088113
    2. '('' → logprob: -7.126150608062744
    3. '("("' → logprob: -8.001150131225586
    4. '("""' → logprob: -13.001150131225586
    5. '()' → logprob: -13.126150131225586
    6. '(`' → logprob: -13.626150131225586
    7. '((' → logprob: -13.626150131225586
    8. '("")' → logprob: -14.126150131225586
    9. '(
' → logprob: -14.126150131225586
    10. '(f' → logprob: -14.626150131225586

Token 19: '(bool' (ID: 22323)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '(' → logprob: -0.022729255259037018
    2. '(N' → logprob: -4.272729396820068
    3. '(K' → logprob: -5.147729396820068
    4. '((' → logprob: -6.522729396820068
    5. '('' → logprob: -8.77272891998291
    6. ')' → logprob: -9.02272891998291
    7. ' (' → logprob: -9.27272891998291
    8. '(
' → logprob: -9.39772891998291
    9. '(input' → logprob: -9.39772891998291
    10. '(len' → logprob: -9.39772891998291

Token 20: '(N' (ID: 10564)
  Prédit: '(N'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(N' → logprob: -0.7447761297225952
    2. '(' → logprob: -1.1197761297225952
    3. '(K' → logprob: -1.6197761297225952
    4. '((' → logprob: -7.244776248931885
    5. ' (' → logprob: -9.744775772094727
    6. '(
' → logprob: -10.244775772094727
    7. '(`' → logprob: -11.994775772094727
    8. ')' → logprob: -12.244775772094727
    9. '(n' → logprob: -12.244775772094727
    10. '(A' → logprob: -12.494775772094727

Token 21: ' %' (ID: 1851)
  Prédit: ' &'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' &' → logprob: -0.429293692111969
    2. '&' → logprob: -1.0542936325073242
    3. '%' → logprob: -8.304293632507324
    4. ' &
' → logprob: -9.429293632507324
    5. ' ' → logprob: -9.804293632507324
    6. ' %' → logprob: -9.929293632507324
    7. '&
' → logprob: -9.929293632507324
    8. ' and' → logprob: -10.804293632507324
    9. 'and' → logprob: -11.054293632507324
    10. '>' → logprob: -11.429293632507324

Token 22: ' K' (ID: 658)
  Prédit: 'K'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'K' → logprob: -0.1269703060388565
    2. ' K' → logprob: -2.1269702911376953
    3. ' ' → logprob: -10.126970291137695
    4. ')' → logprob: -14.626970291137695
    5. ' ' → logprob: -14.751970291137695
    6. '(' → logprob: -15.251970291137695
    7. '2' → logprob: -15.501970291137695
    8. ' (' → logprob: -15.626970291137695
    9. '  ' → logprob: -15.751970291137695
    10. ' 
' → logprob: -16.251970291137695

Token 23: ')))' (ID: 15975)
  Prédit: ')))'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')))' → logprob: -0.06213685870170593
    2. ')' → logprob: -2.9371368885040283
    3. '))' → logprob: -4.937136650085449
    4. ' ' → logprob: -10.68713665008545
    5. '))))' → logprob: -11.18713665008545
    6. ')))
' → logprob: -11.93713665008545
    7. ')));' → logprob: -12.43713665008545
    8. ')==' → logprob: -13.43713665008545
    9. ' )' → logprob: -13.93713665008545
    10. ')))

' → logprob: -14.68713665008545


RÉSUMÉ:
--------------------------------------------------------------------------------
Total des tokens analysés: 21
Tokens correctement prédits (1ère position, stricte): 6
Tokens correctement prédits (1ère position, avec adaptation): 6
Tokens correctement prédits (top 10): 14
Précision stricte (1ère position): 28.57%
Précision adaptée (1ère position): 28.57%
Précision (top 10): 66.67%
================================================================================
