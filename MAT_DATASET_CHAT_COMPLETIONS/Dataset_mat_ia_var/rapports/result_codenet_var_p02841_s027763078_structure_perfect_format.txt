================================================================================
ANALYSE DE PRÉDICTION TOKEN PAR TOKEN (BATCH API)
Date: 2025-06-04 19:35:33
Modèle de tokenisation: gpt-4o-mini
================================================================================

SCRIPT ANALYSÉ:
--------------------------------------------------------------------------------
m1, _ = input().split()
m2, _ = input().split()
ans = 0

if m1 != m2:
    ans = 1

print(ans)
--------------------------------------------------------------------------------

RÉSULTATS D'ANALYSE TOKEN PAR TOKEN:
--------------------------------------------------------------------------------
Token 0: 'm' (ID: 76)
  → Token d'amorce (pas de prédiction)

Token 1: '1' (ID: 16)
  → Token d'amorce (pas de prédiction)

Token 2: ',' (ID: 11)
  → Token d'amorce (pas de prédiction)

Token 3: ' _' (ID: 1175)
  Prédit: '.'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '.' → logprob: -0.5570034980773926
    2. ',' → logprob: -1.9320034980773926
    3. 'm' → logprob: -2.1820034980773926
    4. '=' → logprob: -2.9320034980773926
    5. ' m' → logprob: -2.9320034980773926
    6. '[' → logprob: -3.9320034980773926
    7. ' =' → logprob: -4.432003498077393
    8. '_' → logprob: -4.557003498077393
    9. ' ' → logprob: -5.557003498077393
    10. ' .' → logprob: -6.182003498077393

Token 4: ' =' (ID: 314)
  Prédit: '='
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '=' → logprob: -0.18533840775489807
    2. ',' → logprob: -1.8103383779525757
    3. ' =' → logprob: -5.310338497161865
    4. ')' → logprob: -8.060338020324707
    5. 'm' → logprob: -8.810338020324707
    6. '.' → logprob: -9.810338020324707
    7. '(' → logprob: -11.560338020324707
    8. ' ' → logprob: -11.560338020324707
    9. '[' → logprob: -11.560338020324707
    10. '```' → logprob: -11.560338020324707

Token 5: ' input' (ID: 3422)
  Prédit: ' torch'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' torch' → logprob: -1.0903913974761963
    2. 'torch' → logprob: -2.2153913974761963
    3. ' model' → logprob: -2.5903913974761963
    4. 'some' → logprob: -2.8403913974761963
    5. ' np' → logprob: -2.9653913974761963
    6. ' func' → logprob: -2.9653913974761963
    7. ' some' → logprob: -3.3403913974761963
    8. 'np' → logprob: -3.3403913974761963
    9. 'func' → logprob: -3.7153913974761963
    10. ' self' → logprob: -3.7153913974761963

Token 6: '().' (ID: 1454)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(' → logprob: -0.01928003877401352
    2. '()' → logprob: -4.144279956817627
    3. '().' → logprob: -7.644279956817627
    4. '('' → logprob: -7.894279956817627
    5. 'split' → logprob: -8.019280433654785
    6. '.' → logprob: -8.144280433654785
    7. '(
' → logprob: -8.269280433654785
    8. '(.)' → logprob: -8.394280433654785
    9. '(.' → logprob: -8.769280433654785
    10. '[' → logprob: -8.894280433654785

Token 7: 'split' (ID: 13627)
  Prédit: 'split'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'split' → logprob: -0.005250829737633467
    2. 'strip' → logprob: -5.255250930786133
    3. 'rstrip' → logprob: -11.505250930786133
    4. ' split' → logprob: -13.005250930786133
    5. 'spl' → logprob: -13.130250930786133
    6. 'rs' → logprob: -13.505250930786133
    7. 'replace' → logprob: -13.755250930786133
    8. '.split' → logprob: -16.130250930786133
    9. 'startswith' → logprob: -16.755250930786133
    10. 'r' → logprob: -17.130250930786133

Token 8: '()
' (ID: 1234)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '(' → logprob: -0.04113922640681267
    2. '('' → logprob: -3.2911391258239746
    3. '("("' → logprob: -5.916139125823975
    4. '()' → logprob: -8.541139602661133
    5. ''' → logprob: -9.541139602661133
    6. '(
' → logprob: -10.416139602661133
    7. '((' → logprob: -10.791139602661133
    8. '(`' → logprob: -10.791139602661133
    9. '```' → logprob: -11.166139602661133
    10. '(**' → logprob: -11.916139602661133

Token 9: 'm' (ID: 76)
  Prédit: 'm'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'm' → logprob: -0.04205130785703659
    2. 'if' → logprob: -4.292051315307617
    3. '=' → logprob: -4.792051315307617
    4. ',' → logprob: -5.042051315307617
    5. '.' → logprob: -5.917051315307617
    6. ' m' → logprob: -6.042051315307617
    7. '*' → logprob: -6.917051315307617
    8. '`' → logprob: -7.292051315307617
    9. '+' → logprob: -7.417051315307617
    10. 'print' → logprob: -7.417051315307617

Token 10: '2' (ID: 17)
  Prédit: '1'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '1' → logprob: -7.314625690924004e-05
    2. '2' → logprob: -10.500073432922363
    3. '_' → logprob: -10.625073432922363
    4. '[' → logprob: -11.375073432922363
    5. '.' → logprob: -12.375073432922363
    6. '```' → logprob: -13.375073432922363
    7. '0' → logprob: -14.500073432922363
    8. ' ' → logprob: -14.625073432922363
    9. ')' → logprob: -14.625073432922363
    10. 'm' → logprob: -15.000073432922363

Token 11: ',' (ID: 11)
  Prédit: ''
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False

Token 12: ' _' (ID: 1175)
  Prédit: '_'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_' → logprob: -0.012443018145859241
    2. '<|end|>' → logprob: -5.1374430656433105
    3. ' ' → logprob: -5.5124430656433105
    4. ''' → logprob: -7.0124430656433105
    5. ' _' → logprob: -7.2624430656433105
    6. 'input' → logprob: -8.012442588806152
    7. '"' → logprob: -9.262442588806152
    8. '<|end|>' → logprob: -9.887442588806152
    9. 'space' → logprob: -10.012442588806152
    10. '_space' → logprob: -10.137442588806152

Token 13: ' =' (ID: 314)
  Prédit: ' ='
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' =' → logprob: -0.07356507331132889
    2. '=' → logprob: -2.6985650062561035
    3. ',' → logprob: -6.1985650062561035
    4. '<|end|>' → logprob: -6.6985650062561035
    5. ')' → logprob: -8.698565483093262
    6. ' ' → logprob: -8.948565483093262
    7. '<|end|>' → logprob: -11.448565483093262
    8. '=input' → logprob: -11.823565483093262
    9. ' ,' → logprob: -11.823565483093262
    10. 'm' → logprob: -11.823565483093262

Token 14: ' input' (ID: 3422)
  Prédit: 'input'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'input' → logprob: -0.5759422183036804
    2. ' input' → logprob: -0.8259422183036804
    3. ' ' → logprob: -13.950942039489746
    4. '<input' → logprob: -14.200942039489746
    5. '(input' → logprob: -14.825942039489746
    6. '	input' → logprob: -15.200942039489746
    7. '=input' → logprob: -15.575942039489746
    8. 'm' → logprob: -16.450942993164062
    9. ' ' → logprob: -16.825942993164062
    10. '[input' → logprob: -17.450942993164062

Token 15: '().' (ID: 1454)
  Prédit: '().'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '().' → logprob: -0.5235881209373474
    2. '()' → logprob: -0.8985881209373474
    3. '(' → logprob: -8.023588180541992
    4. '()(' → logprob: -10.523588180541992
    5. '()
' → logprob: -11.148588180541992
    6. '.' → logprob: -11.273588180541992
    7. '().__' → logprob: -11.398588180541992
    8. '```' → logprob: -11.523588180541992
    9. '`()' → logprob: -11.523588180541992
    10. '();' → logprob: -11.773588180541992

Token 16: 'split' (ID: 13627)
  Prédit: 'split'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'split' → logprob: -5.512236498361744e-07
    2. ' split' → logprob: -15.000000953674316
    3. 'strip' → logprob: -16.375
    4. 'spl' → logprob: -17.5
    5. 'rstrip' → logprob: -17.75
    6. 'replace' → logprob: -18.875
    7. '(split' → logprob: -19.125
    8. '```' → logprob: -19.375
    9. 'read' → logprob: -20.125
    10. '.split' → logprob: -20.375

Token 17: '()
' (ID: 1234)
  Prédit: '()'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '()' → logprob: -0.07933475822210312
    2. '(' → logprob: -2.5793347358703613
    3. '()
' → logprob: -8.45433521270752
    4. '(
' → logprob: -9.70433521270752
    5. '()

' → logprob: -9.82933521270752
    6. '```' → logprob: -10.57933521270752
    7. '`()' → logprob: -11.07933521270752
    8. '()`' → logprob: -11.20433521270752
    9. '(

' → logprob: -11.57933521270752
    10. ')' → logprob: -11.70433521270752

Token 18: 'ans' (ID: 616)
  Prédit: 'm'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'm' → logprob: -0.07339107245206833
    2. 'if' → logprob: -4.073390960693359
    3. 'print' → logprob: -4.198390960693359
    4. '+' → logprob: -4.698390960693359
    5. '#' → logprob: -4.823390960693359
    6. 'n' → logprob: -5.573390960693359
    7. '*' → logprob: -6.073390960693359
    8. 'a' → logprob: -6.198390960693359
    9. '.' → logprob: -6.198390960693359
    10. 'for' → logprob: -6.698390960693359

Token 19: ' =' (ID: 314)
  Prédit: '='
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '=' → logprob: -0.6971054673194885
    2. ' =' → logprob: -1.3221054077148438
    3. '.' → logprob: -1.5721054077148438
    4. '[' → logprob: -4.072105407714844
    5. '(' → logprob: -5.572105407714844
    6. '_' → logprob: -5.947105407714844
    7. '.append' → logprob: -7.197105407714844
    8. ')' → logprob: -7.447105407714844
    9. '1' → logprob: -7.572105407714844
    10. ',' → logprob: -7.697105407714844

Token 20: ' ' (ID: 220)
  Prédit: 'int'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'int' → logprob: -0.2925221025943756
    2. 'm' → logprob: -2.1675221920013428
    3. ' m' → logprob: -3.2925221920013428
    4. ' int' → logprob: -3.5425221920013428
    5. 'float' → logprob: -3.6675221920013428
    6. 'min' → logprob: -4.292521953582764
    7. 'max' → logprob: -4.542521953582764
    8. 'str' → logprob: -5.667521953582764
    9. ' float' → logprob: -5.792521953582764
    10. '"' → logprob: -5.792521953582764

Token 21: '0' (ID: 15)
  Prédit: 'int'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'int' → logprob: -0.19662395119667053
    2. 'm' → logprob: -2.8216240406036377
    3. 'abs' → logprob: -3.3216240406036377
    4. 'min' → logprob: -3.9466240406036377
    5. 'max' → logprob: -3.9466240406036377
    6. 'float' → logprob: -4.071623802185059
    7. 'str' → logprob: -4.196623802185059
    8. 'set' → logprob: -5.821623802185059
    9. '(int' → logprob: -6.696623802185059
    10. '"' → logprob: -6.696623802185059

Token 22: '

' (ID: 279)
  Prédit: '\n'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '\n' → logprob: -0.6747700572013855
    2. '
' → logprob: -1.2997701168060303
    3. ' 
' → logprob: -2.2997701168060303
    4. '<|end|>' → logprob: -3.0497701168060303
    5. 'for' → logprob: -3.6747701168060303
    6. ' ' → logprob: -4.049769878387451
    7. ' for' → logprob: -4.924769878387451
    8. '\' → logprob: -5.424769878387451
    9. '+' → logprob: -5.924769878387451
    10. '  
' → logprob: -6.174769878387451

Token 23: 'if' (ID: 366)
  Prédit: 'for'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'for' → logprob: -0.10171455144882202
    2. 'if' → logprob: -2.351714611053467
    3. 'i' → logprob: -6.726714611053467
    4. 'm' → logprob: -9.351714134216309
    5. ' for' → logprob: -9.476714134216309
    6. '```' → logprob: -9.976714134216309
    7. 'f' → logprob: -10.351714134216309
    8. '#' → logprob: -11.101714134216309
    9. ' if' → logprob: -11.726714134216309
    10. 'while' → logprob: -12.101714134216309

Token 24: ' m' (ID: 284)
  Prédit: ' m'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' m' → logprob: -0.11872658878564835
    2. 'm' → logprob: -2.2437264919281006
    3. 'int' → logprob: -5.86872673034668
    4. ' int' → logprob: -5.86872673034668
    5. ' ' → logprob: -9.49372673034668
    6. ' (' → logprob: -10.61872673034668
    7. ' '' → logprob: -10.74372673034668
    8. '(' → logprob: -10.74372673034668
    9. '(m' → logprob: -10.86872673034668
    10. ' len' → logprob: -11.49372673034668

Token 25: '1' (ID: 16)
  Prédit: '1'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '1' → logprob: -2.868328920158092e-05
    2. '2' → logprob: -10.500028610229492
    3. ' ' → logprob: -15.812528610229492
    4. '１' → logprob: -16.062528610229492
    5. '_' → logprob: -16.187528610229492
    6. '```' → logprob: -16.187528610229492
    7. '[' → logprob: -17.000028610229492
    8. '१' → logprob: -17.125028610229492
    9. '১' → logprob: -17.250028610229492
    10. '.' → logprob: -17.437528610229492

Token 26: ' !=' (ID: 1666)
  Prédit: ' =='
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' ==' → logprob: -0.3458862602710724
    2. '==' → logprob: -2.09588623046875
    3. ' >' → logprob: -2.59588623046875
    4. '[' → logprob: -3.59588623046875
    5. ' <' → logprob: -3.72088623046875
    6. '>' → logprob: -3.97088623046875
    7. ' !=' → logprob: -4.47088623046875
    8. ' in' → logprob: -5.59588623046875
    9. '!=' → logprob: -6.09588623046875
    10. '.startswith' → logprob: -6.59588623046875

Token 27: ' m' (ID: 284)
  Prédit: 'm'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'm' → logprob: -0.0037924700882285833
    2. ''' → logprob: -6.2537922859191895
    3. ' m' → logprob: -7.3787922859191895
    4. '"' → logprob: -7.7537922859191895
    5. '_' → logprob: -7.8787922859191895
    6. '0' → logprob: -8.753792762756348
    7. ''m' → logprob: -9.628792762756348
    8. '''' → logprob: -10.003792762756348
    9. ' ' → logprob: -10.753792762756348
    10. '""' → logprob: -11.003792762756348

Token 28: '2' (ID: 17)
  Prédit: '2'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '2' → logprob: -0.006719759665429592
    2. '1' → logprob: -5.006719589233398
    3. '```' → logprob: -13.819219589233398
    4. ''' → logprob: -14.194219589233398
    5. '_' → logprob: -14.569219589233398
    6. ' ' → logprob: -14.631719589233398
    7. '"' → logprob: -14.756719589233398
    8. '`' → logprob: -15.569219589233398
    9. '₂' → logprob: -16.2567195892334
    10. '２' → logprob: -16.3817195892334

Token 29: ':
' (ID: 734)
  Prédit: ':'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ':' → logprob: -0.00029279827140271664
    2. ' :' → logprob: -8.375292778015137
    3. ':
' → logprob: -9.750292778015137
    4. ' and' → logprob: -13.625292778015137
    5. ':**' → logprob: -13.750292778015137
    6. ':

' → logprob: -15.500292778015137
    7. ' :
' → logprob: -15.500292778015137
    8. '):' → logprob: -16.000293731689453
    9. '+:' → logprob: -16.000293731689453
    10. '>:' → logprob: -16.000293731689453

Token 30: '   ' (ID: 271)
  Prédit: ' ans'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' ans' → logprob: -0.5022847652435303
    2. '   ' → logprob: -1.0022847652435303
    3. 'ans' → logprob: -4.002285003662109
    4. '\n' → logprob: -5.752285003662109
    5. '	ans' → logprob: -6.252285003662109
    6. '
' → logprob: -6.502285003662109
    7. ' 
' → logprob: -6.752285003662109
    8. '```' → logprob: -7.752285003662109
    9. '    
' → logprob: -8.12728500366211
    10. ' if' → logprob: -8.37728500366211

Token 31: ' ans' (ID: 3345)
  Prédit: ' ans'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' ans' → logprob: -0.058676064014434814
    2. 'ans' (adapté à ' ans') → logprob: -2.93367600440979
    3. ' for' → logprob: -6.433676242828369
    4. ' if' → logprob: -7.933676242828369
    5. '\n' → logprob: -8.558675765991211
    6. ' pass' → logprob: -8.683675765991211
    7. ' 
' → logprob: -8.683675765991211
    8. '   ' → logprob: -8.683675765991211
    9. 'for' → logprob: -8.933675765991211
    10. '	ans' → logprob: -8.933675765991211

Token 32: ' =' (ID: 314)
  Prédit: ' +='
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' +=' → logprob: -0.2929723858833313
    2. ' =' → logprob: -1.6679723262786865
    3. '+=' → logprob: -3.0429723262786865
    4. '=' → logprob: -4.042972564697266
    5. '+' → logprob: -9.667972564697266
    6. ' ' → logprob: -11.292972564697266
    7. ' -=' → logprob: -12.792972564697266
    8. ' +' → logprob: -12.917972564697266
    9. ' |=' → logprob: -13.292972564697266
    10. ',' → logprob: -13.292972564697266

Token 33: ' ' (ID: 220)
  Prédit: '1'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '1' → logprob: -0.03474748879671097
    2. ' ' → logprob: -3.65974760055542
    3. 'int' → logprob: -6.15974760055542
    4. '0' → logprob: -6.65974760055542
    5. '100' → logprob: -6.90974760055542
    6. 'm' → logprob: -7.15974760055542
    7. 'abs' → logprob: -7.53474760055542
    8. '10' → logprob: -7.65974760055542
    9. '-' → logprob: -7.65974760055542
    10. '2' → logprob: -8.034747123718262

Token 34: '1' (ID: 16)
  Prédit: '1'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '1' → logprob: -0.029276296496391296
    2. 'abs' → logprob: -4.154276371002197
    3. '2' → logprob: -5.904276371002197
    4. 'int' → logprob: -6.029276371002197
    5. 'm' → logprob: -6.279276371002197
    6. '"' → logprob: -6.529276371002197
    7. '100' → logprob: -7.279276371002197
    8. 'max' → logprob: -7.279276371002197
    9. 'len' → logprob: -7.654276371002197
    10. '0' → logprob: -7.654276371002197

Token 35: '

' (ID: 279)
  Prédit: '
'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '
' → logprob: -0.7274765372276306
    2. '\n' → logprob: -0.9774765372276306
    3. '<|end|>' → logprob: -2.4774765968322754
    4. 'print' → logprob: -2.9774765968322754
    5. '\' → logprob: -6.102476596832275
    6. '```' → logprob: -7.102476596832275
    7. '#' → logprob: -7.602476596832275
    8. 'else' → logprob: -8.477476119995117
    9. '<|end|>' → logprob: -8.477476119995117
    10. '.' → logprob: -8.602476119995117

Token 36: 'print' (ID: 1598)
  Prédit: 'print'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'print' → logprob: -0.04705730080604553
    2. '<|end|>' → logprob: -3.4220573902130127
    3. '\n' → logprob: -5.047057151794434
    4. '
' → logprob: -5.297057151794434
    5. ' print' → logprob: -7.547057151794434
    6. '#' → logprob: -7.797057151794434
    7. '\' → logprob: -8.047057151794434
    8. '```' → logprob: -8.047057151794434
    9. '<|end|>' → logprob: -8.922057151794434
    10. '[' → logprob: -10.547057151794434

Token 37: '(ans' (ID: 70054)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(' → logprob: -0.25203731656074524
    2. '(ans' → logprob: -1.5020372867584229
    3. '()' → logprob: -9.252037048339844
    4. '('' → logprob: -12.002037048339844
    5. 'ans' → logprob: -13.877037048339844
    6. ' (' → logprob: -14.002037048339844
    7. '((' → logprob: -14.127037048339844
    8. '(
' → logprob: -14.502037048339844
    9. '(m' → logprob: -14.627037048339844
    10. '(abs' → logprob: -14.752037048339844

Token 38: ')' (ID: 8)
  Prédit: ')'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')' → logprob: -4.320199877838604e-07
    2. ' )' → logprob: -15.5
    3. '))' → logprob: -17.0
    4. ')`' → logprob: -17.375
    5. '`)' → logprob: -17.875
    6. ')
' → logprob: -19.0
    7. '')' → logprob: -19.25
    8. '）' → logprob: -19.625
    9. ')**' → logprob: -20.625
    10. '()' → logprob: -20.75


RÉSUMÉ:
--------------------------------------------------------------------------------
Total des tokens analysés: 36
Tokens correctement prédits (1ère position, stricte): 12
Tokens correctement prédits (1ère position, avec adaptation): 12
Tokens correctement prédits (top 10): 27
Précision stricte (1ère position): 33.33%
Précision adaptée (1ère position): 33.33%
Précision (top 10): 75.00%
================================================================================
