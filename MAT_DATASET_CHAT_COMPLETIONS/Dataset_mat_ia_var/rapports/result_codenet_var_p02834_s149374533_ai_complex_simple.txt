================================================================================
ANALYSE DE PRÉDICTION TOKEN PAR TOKEN (BATCH API)
Date: 2025-06-04 19:34:47
Modèle de tokenisation: gpt-4o-mini
================================================================================

SCRIPT ANALYSÉ:
--------------------------------------------------------------------------------
from collections import Counter, defaultdict, deque
import sys
import bisect
import math
import itertools
import string
import queue
import copy
from itertools import permutations, combinations, chain
from heapq import heappop, heappush
sys.setrecursionlimit(10**8)
mod = 10**9 + 7

def inp():
    # Version inutilement complexe: utilise eval et strings
    return eval('int(input())')

def inpm():
    # Utilise une comprehension et unpacker pour crocheter map
    return tuple(map(int, (lambda x: x.split())(input())))

def inpl():
    # Compose map et lambda, puis double appel pour l'effet inutile
    return list(map(int, list(map(str, input().split()))))

def inpls():
    # Use starmap (itertools) à la place d'un simple split
    return list(itertools.starmap(str, enumerate(input().split()))) and input().split()

def inplm(n):
    # Construction par accumulation pendant la lecture
    return list(map(int, list(itertools.islice((input() for _ in iter(int, 1)), n))))

def inpll(n):
    # Use reduce for list building
    from functools import reduce
    return reduce(lambda acc, _: acc + [list(map(int, input().split()))], range(n), [])

def bfs(s, n, g):
    # Useless nested function, une quiche de itertools pour une boucle
    went = [False for _ in range(n)]
    dis = [0 for _ in range(n)]
    que = deque([s])
    went[s] = True
    def visit_iteration(queue):
        go = queue.pop()
        yield go
    while que:
        for go in visit_iteration(que):
            for nxt in filter(lambda x: not went[x], g[go]):
                dis[nxt] = dis[go] + 1
                went[nxt] = True
                que.append(nxt)
    return dis

def main():
    # Double destructuration, compréhension sur la lecture des entrées
    n, u, v = (x for x in inpm())
    g = [list() for _ in range(n)]
    g1 = copy.deepcopy(g)
    ab = []
    # Utilise enumerate et chain pour parcourir la boucle
    for idx, (a, b) in enumerate(itertools.starmap(lambda _: inpm(), range(n - 1))):
        a -= 1
        b -= 1
        g[a].append(b)
        g[b].append(a)
        ab.append((a, b))
    dis = bfs(u - 1, n, g)
    path = [v - 1]
    que = deque([v - 1])
    d = dis[v - 1] - 1
    # Path Construction, use itertools to simulate a loop
    while que:
        go = que.pop()
        indices = range(len(g[go]))
        candidates = itertools.compress(g[go], [dis[x] == d for x in g[go]])
        found = False
        for node in candidates:
            if dis[node] == d:
                d -= 1
                path.append(node)
                que.append(node)
                found = True
                break
        if not found:
            break
    ans = next(iter(itertools.islice(iter(lambda: len(path)//2 - 1, None), 1)))
    path = list(reversed(path))
    # Utilise une expression génératrice et any() pour le saut
    for idx in range(n-1):
        jump = ((ab[idx][0], ab[idx][1]) == (path[ans], path[ans+1]) or (ab[idx][1], ab[idx][0]) == (path[ans], path[ans+1]))
        if jump:
            continue
        g1[ab[idx][0]].append(ab[idx][1])
        g1[ab[idx][1]].append(ab[idx][0])
    dis1 = bfs(path[ans], n, g1)
    x = ans + max(itertools.accumulate(dis1, lambda a, b: b if b > a else a))
    # Ternaire doublement inutile
    x += 1 if len(path) % 2 == 1 else 0
    print(x)

if __name__ == "__main__":
    main()
--------------------------------------------------------------------------------

RÉSULTATS D'ANALYSE TOKEN PAR TOKEN:
--------------------------------------------------------------------------------
Token 0: 'from' (ID: 2845)
  → Token d'amorce (pas de prédiction)

Token 1: ' collections' (ID: 22690)
  → Token d'amorce (pas de prédiction)

Token 2: ' import' (ID: 1588)
  → Token d'amorce (pas de prédiction)

Token 3: ' Counter' (ID: 32251)
  Prédit: 'default'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'default' → logprob: -1.408840298652649
    2. 'abc' → logprob: -1.408840298652649
    3. 'deque' → logprob: -1.408840298652649
    4. 'Counter' → logprob: -2.1588401794433594
    5. ' defaultdict' → logprob: -2.1588401794433594
    6. ' Counter' → logprob: -4.033840179443359
    7. ' abc' → logprob: -4.658840179443359
    8. 'named' → logprob: -5.533840179443359
    9. ' deque' → logprob: -6.283840179443359
    10. '```' → logprob: -6.783840179443359

Token 4: ',' (ID: 11)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '(' → logprob: -0.0007455448503606021
    2. '.' → logprob: -7.62574577331543
    3. '\(' → logprob: -8.50074577331543
    4. ' (' → logprob: -11.62574577331543
    5. '(
' → logprob: -11.62574577331543
    6. '\' → logprob: -11.75074577331543
    7. '```' → logprob: -12.12574577331543
    8. '`' → logprob: -12.37574577331543
    9. '()' → logprob: -12.37574577331543
    10. 'a' → logprob: -13.00074577331543

Token 5: ' defaultdict' (ID: 107098)
  Prédit: ' defaultdict'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' defaultdict' → logprob: -0.050978947430849075
    2. 'default' → logprob: -3.050978899002075
    3. 'deque' → logprob: -6.175979137420654
    4. ' deque' → logprob: -8.300978660583496
    5. 'abc' → logprob: -10.925978660583496
    6. ' default' → logprob: -11.425978660583496
    7. 'named' → logprob: -11.550978660583496
    8. 'Ordered' → logprob: -11.675978660583496
    9. ' abc' → logprob: -11.800978660583496
    10. ' Ordered' → logprob: -12.550978660583496

Token 6: ',' (ID: 11)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(' → logprob: -0.008343053050339222
    2. '(
' → logprob: -5.00834321975708
    3. '\' → logprob: -7.50834321975708
    4. ',' → logprob: -8.633342742919922
    5. '\n' → logprob: -8.883342742919922
    6. '\(' → logprob: -9.008342742919922
    7. '' → logprob: -9.133342742919922
    8. '
' → logprob: -9.258342742919922
    9. '```' → logprob: -9.758342742919922
    10. 'import' → logprob: -10.008342742919922

Token 7: ' deque' (ID: 90347)
  Prédit: ' deque'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' deque' → logprob: -0.24250532686710358
    2. ' Ordered' → logprob: -2.1175053119659424
    3. 'deque' → logprob: -2.4925053119659424
    4. 'Ordered' → logprob: -4.7425055503845215
    5. ' abc' → logprob: -6.3675055503845215
    6. ' named' → logprob: -6.8675055503845215
    7. ' ' → logprob: -8.117505073547363
    8. ' Chain' → logprob: -8.867505073547363
    9. 'Deque' → logprob: -9.492505073547363
    10. ' defaultdict' → logprob: -9.617505073547363

Token 8: '
' (ID: 198)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '(' → logprob: -0.07318612188100815
    2. '.' → logprob: -3.573186159133911
    3. '\' → logprob: -4.323185920715332
    4. ',' → logprob: -4.698185920715332
    5. '\n' → logprob: -5.448185920715332
    6. '```' → logprob: -5.823185920715332
    7. ' (' → logprob: -5.948185920715332
    8. '(
' → logprob: -5.948185920715332
    9. '\(' → logprob: -6.448185920715332
    10. '<|end|>' → logprob: -6.448185920715332

Token 9: 'import' (ID: 561)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(' → logprob: -0.4876376688480377
    2. '\n' → logprob: -1.9876376390457153
    3. '```' → logprob: -2.987637758255005
    4. 'a' → logprob: -3.237637758255005
    5. 'd' → logprob: -3.487637758255005
    6. '\' → logprob: -3.612637758255005
    7. '.' → logprob: -3.612637758255005
    8. 'import' → logprob: -4.487637519836426
    9. '(
' → logprob: -4.487637519836426
    10. '
' → logprob: -4.737637519836426

Token 10: ' sys' (ID: 12228)
  Prédit: ' os'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' os' → logprob: -0.3439037799835205
    2. ' sys' → logprob: -1.5939037799835205
    3. ' itertools' → logprob: -2.5939037799835205
    4. ' re' → logprob: -5.218903541564941
    5. ' collections' → logprob: -5.718903541564941
    6. ' json' → logprob: -6.093903541564941
    7. ' numpy' → logprob: -6.718903541564941
    8. ' pandas' → logprob: -8.218903541564941
    9. ' math' → logprob: -8.343903541564941
    10. ' heap' → logprob: -9.218903541564941

Token 11: '
' (ID: 198)
  Prédit: '.'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '.' → logprob: -0.7961354851722717
    2. '\n' → logprob: -1.171135425567627
    3. '\' → logprob: -2.171135425567627
    4. '
' → logprob: -3.171135425567627
    5. '```' → logprob: -3.296135425567627
    6. 'def' → logprob: -4.921135425567627
    7. '`' → logprob: -5.046135425567627
    8. 'import' → logprob: -5.171135425567627
    9. '.
' → logprob: -5.546135425567627
    10. 'for' → logprob: -5.671135425567627

Token 12: 'import' (ID: 561)
  Prédit: '\n'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '\n' → logprob: -0.970786988735199
    2. '
' → logprob: -1.4707870483398438
    3. '.' → logprob: -2.2207870483398438
    4. '\' → logprob: -2.5957870483398438
    5. ',' → logprob: -2.7207870483398438
    6. 'import' → logprob: -2.9707870483398438
    7. '```' → logprob: -2.9707870483398438
    8. '

' → logprob: -4.970787048339844
    9. ',
' → logprob: -5.470787048339844
    10. '[' → logprob: -5.720787048339844

Token 13: ' bis' (ID: 7204)
  Prédit: ' os'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' os' → logprob: -0.0009643423254601657
    2. 'os' → logprob: -7.625964164733887
    3. ' collections' → logprob: -8.375964164733887
    4. ' itertools' → logprob: -8.625964164733887
    5. ' math' → logprob: -10.500964164733887
    6. ' re' → logprob: -10.750964164733887
    7. ' io' → logprob: -12.125964164733887
    8. ' threading' → logprob: -12.250964164733887
    9. 'collections' → logprob: -12.875964164733887
    10. ' heap' → logprob: -13.500964164733887

Token 14: 'ect' (ID: 534)
  Prédit: 'ect'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'ect' → logprob: -3.762356209335849e-05
    2. 'ected' → logprob: -11.12503719329834
    3. 't' → logprob: -11.50003719329834
    4. 'ection' → logprob: -11.62503719329834
    5. 'ects' → logprob: -13.50003719329834
    6. 'ective' → logprob: -14.00003719329834
    7. 'ector' → logprob: -14.25003719329834
    8. 'ectl' → logprob: -15.25003719329834
    9. 'ecta' → logprob: -15.87503719329834
    10. 'ectin' → logprob: -16.000038146972656

Token 15: '
' (ID: 198)
  Prédit: '.'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '.' → logprob: -1.2404812574386597
    2. '
' → logprob: -1.7404812574386597
    3. '\n' → logprob: -1.9904812574386597
    4. '\' → logprob: -2.365481376647949
    5. '' → logprob: -2.740481376647949
    6. '```' → logprob: -2.865481376647949
    7. '

' → logprob: -3.240481376647949
    8. '
' → logprob: -3.740481376647949
    9. 'newline' → logprob: -4.115481376647949
    10. '#' → logprob: -4.240481376647949

Token 16: 'import' (ID: 561)
  Prédit: '
'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '
' → logprob: -1.2222100496292114
    2. '\n' → logprob: -1.3472100496292114
    3. '\' → logprob: -1.9722100496292114
    4. 'def' → logprob: -2.597209930419922
    5. '

' → logprob: -2.722209930419922
    6. '#' → logprob: -3.347209930419922
    7. '' → logprob: -3.347209930419922
    8. '```' → logprob: -3.597209930419922
    9. 'import' → logprob: -3.847209930419922
    10. 'class' → logprob: -4.597209930419922

Token 17: ' math' (ID: 13324)
  Prédit: ' heap'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' heap' → logprob: -0.5016728043556213
    2. ' math' → logprob: -1.0016727447509766
    3. ' itertools' → logprob: -3.7516727447509766
    4. 'heap' → logprob: -5.751672744750977
    5. 'math' → logprob: -7.751672744750977
    6. ' threading' → logprob: -9.001672744750977
    7. ' functools' → logprob: -13.126672744750977
    8. ' collections' → logprob: -13.751672744750977
    9. 'it' → logprob: -14.001672744750977
    10. ' os' → logprob: -14.126672744750977

Token 18: '
' (ID: 198)
  Prédit: '
'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '
' → logprob: -1.0441653728485107
    2. '\n' → logprob: -1.1691653728485107
    3. '\' → logprob: -2.4191653728485107
    4. '.' → logprob: -2.9191653728485107
    5. '

' → logprob: -3.0441653728485107
    6. 'import' → logprob: -3.1691653728485107
    7. '<|end|>' → logprob: -3.5441653728485107
    8. '' → logprob: -3.6691653728485107
    9. '```' → logprob: -4.54416561126709
    10. 'def' → logprob: -4.54416561126709

Token 19: 'import' (ID: 561)
  Prédit: '```'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '```' → logprob: -1.1379377841949463
    2. '
' → logprob: -1.6379377841949463
    3. '\n' → logprob: -2.0129377841949463
    4. 'import' → logprob: -2.3879377841949463
    5. 'def' → logprob: -2.8879377841949463
    6. '\' → logprob: -2.8879377841949463
    7. '#' → logprob: -3.2629377841949463
    8. '

' → logprob: -3.2629377841949463
    9. '`' → logprob: -3.5129377841949463
    10. '.' → logprob: -4.637937545776367

Token 20: ' itertools' (ID: 103178)
  Prédit: ' heap'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' heap' → logprob: -0.06210246682167053
    2. ' itertools' → logprob: -3.0621025562286377
    3. 'heap' → logprob: -4.687102317810059
    4. ' random' → logprob: -5.812102317810059
    5. 'random' → logprob: -7.437102317810059
    6. ' os' → logprob: -8.437102317810059
    7. ' functools' → logprob: -8.812102317810059
    8. ' operator' → logprob: -9.437102317810059
    9. ' statistics' → logprob: -9.562102317810059
    10. ' threading' → logprob: -10.312102317810059

Token 21: '
' (ID: 198)
  Prédit: '\n'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '\n' → logprob: -1.01177978515625
    2. '
' → logprob: -1.13677978515625
    3. 'import' → logprob: -2.01177978515625
    4. '

' → logprob: -2.88677978515625
    5. '<|end|>' → logprob: -2.88677978515625
    6. '\' → logprob: -3.13677978515625
    7. '```' → logprob: -4.38677978515625
    8. '<|end|>' → logprob: -5.63677978515625
    9. '.' → logprob: -6.26177978515625
    10. ',' → logprob: -6.26177978515625

Token 22: 'import' (ID: 561)
  Prédit: '
'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '
' → logprob: -1.6222989559173584
    2. '\n' → logprob: -1.6222989559173584
    3. 'def' → logprob: -1.8722989559173584
    4. '#' → logprob: -1.9972989559173584
    5. '\' → logprob: -2.1222989559173584
    6. '.' → logprob: -2.8722989559173584
    7. '```' → logprob: -2.8722989559173584
    8. 'import' → logprob: -3.8722989559173584
    9. ',' → logprob: -4.6222991943359375
    10. '<|end|>' → logprob: -4.6222991943359375

Token 23: ' string' (ID: 1621)
  Prédit: ' heap'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' heap' → logprob: -0.8527140021324158
    2. ' operator' → logprob: -1.1027140617370605
    3. 'heap' → logprob: -2.4777140617370605
    4. 'operator' → logprob: -2.7277140617370605
    5. ' functools' → logprob: -2.7277140617370605
    6. ' os' → logprob: -4.7277140617370605
    7. 'os' → logprob: -5.2277140617370605
    8. 'fun' → logprob: -5.4777140617370605
    9. 'random' → logprob: -5.6027140617370605
    10. 'fra' → logprob: -6.3527140617370605

Token 24: '
' (ID: 198)
  Prédit: '
'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '
' → logprob: -0.97342848777771
    2. '\n' → logprob: -1.09842848777771
    3. '#' → logprob: -2.09842848777771
    4. '

' → logprob: -2.84842848777771
    5. '<|end|>' → logprob: -3.59842848777771
    6. '.' → logprob: -3.84842848777771
    7. '\' → logprob: -3.97342848777771
    8. '```' → logprob: -4.598428726196289
    9. '' → logprob: -4.723428726196289
    10. 'import' → logprob: -4.848428726196289

Token 25: 'import' (ID: 561)
  Prédit: '
'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '
' → logprob: -0.5789995193481445
    2. '\n' → logprob: -1.9539995193481445
    3. '

' → logprob: -2.0789995193481445
    4. '#' → logprob: -2.5789995193481445
    5. '<|end|>' → logprob: -3.4539995193481445
    6. 'def' → logprob: -4.3289995193481445
    7. '\' → logprob: -4.7039995193481445
    8. '.' → logprob: -4.7039995193481445
    9. '```' → logprob: -4.8289995193481445
    10. 'import' → logprob: -5.0789995193481445

Token 26: ' queue' (ID: 13661)
  Prédit: 're'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 're' → logprob: -0.5888299942016602
    2. 'random' → logprob: -1.7138299942016602
    3. ' re' → logprob: -2.08882999420166
    4. ' random' → logprob: -2.83882999420166
    5. 'os' → logprob: -3.71382999420166
    6. ' os' → logprob: -3.96382999420166
    7. 'heap' → logprob: -4.46382999420166
    8. ' heap' → logprob: -4.46382999420166
    9. 'operator' → logprob: -5.46382999420166
    10. ' functools' → logprob: -5.46382999420166

Token 27: '
' (ID: 198)
  Prédit: '.'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '.' → logprob: -0.5902068018913269
    2. '<|end|>' → logprob: -1.5902068614959717
    3. '
' → logprob: -2.2152068614959717
    4. '\n' → logprob: -2.8402068614959717
    5. '#' → logprob: -3.5902068614959717
    6. '

' → logprob: -4.215206623077393
    7. '\' → logprob: -4.215206623077393
    8. 'import' → logprob: -5.090206623077393
    9. '<|end|>' → logprob: -6.090206623077393
    10. '```' → logprob: -6.340206623077393

Token 28: 'import' (ID: 561)
  Prédit: '#'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '#' → logprob: -0.47152307629585266
    2. '
' → logprob: -1.7215230464935303
    3. 'import' → logprob: -2.4715230464935303
    4. '<|end|>' → logprob: -3.2215230464935303
    5. '\n' → logprob: -4.096523284912109
    6. '```' → logprob: -4.596523284912109
    7. '

' → logprob: -4.596523284912109
    8. 'from' → logprob: -4.846523284912109
    9. '.' → logprob: -4.846523284912109
    10. '\' → logprob: -5.221523284912109

Token 29: ' copy' (ID: 5150)
  Prédit: ' threading'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' threading' → logprob: -0.21588589251041412
    2. ' random' → logprob: -2.465885877609253
    3. ' heap' → logprob: -2.465885877609253
    4. 'random' → logprob: -4.465886116027832
    5. 'heap' → logprob: -4.840886116027832
    6. ' functools' → logprob: -6.715886116027832
    7. 'thread' → logprob: -7.090886116027832
    8. ' time' → logprob: -7.215886116027832
    9. ' os' → logprob: -7.590886116027832
    10. ' multiprocessing' → logprob: -7.965886116027832

Token 30: '
' (ID: 198)
  Prédit: ''
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False

Token 31: 'from' (ID: 2845)
  Prédit: '
'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '
' → logprob: -0.5237103700637817
    2. '

' → logprob: -1.5237103700637817
    3. '<|end|>' → logprob: -2.523710250854492
    4. '\n' → logprob: -3.523710250854492
    5. '#' → logprob: -3.773710250854492
    6. 'import' → logprob: -4.023710250854492
    7. '```' → logprob: -4.398710250854492
    8. 'def' → logprob: -4.898710250854492
    9. '\' → logprob: -5.398710250854492
    10. '[' → logprob: -5.523710250854492

Token 32: ' itertools' (ID: 103178)
  Prédit: ' typing'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' typing' → logprob: -1.2999099493026733
    2. ' collections' → logprob: -1.5499099493026733
    3. ' functools' → logprob: -1.6749099493026733
    4. ' heap' → logprob: -1.9249099493026733
    5. ' fractions' → logprob: -3.299910068511963
    6. 'collections' → logprob: -3.424910068511963
    7. 'heap' → logprob: -3.549910068511963
    8. ' threading' → logprob: -3.924910068511963
    9. ' math' → logprob: -4.549910068511963
    10. ' os' → logprob: -4.799910068511963

Token 33: ' import' (ID: 1588)
  Prédit: ' import'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' import' → logprob: -0.028488419950008392
    2. 'import' → logprob: -3.6534883975982666
    3. '.' → logprob: -6.403488636016846
    4. '.import' → logprob: -9.028488159179688
    5. ' itertools' → logprob: -9.278488159179688
    6. '	import' → logprob: -9.278488159179688
    7. ' ' → logprob: -9.403488159179688
    8. '.im' → logprob: -10.528488159179688
    9. '.groupby' → logprob: -10.528488159179688
    10. '_import' → logprob: -11.153488159179688

Token 34: ' permutations' (ID: 174595)
  Prédit: ' chain'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' chain' → logprob: -1.0835344791412354
    2. ' group' → logprob: -1.2085344791412354
    3. ' cycle' → logprob: -2.2085344791412354
    4. ' permutations' → logprob: -3.0835344791412354
    5. ' accumulate' → logprob: -3.0835344791412354
    6. 'per' → logprob: -3.8335344791412354
    7. 'count' → logprob: -3.8335344791412354
    8. 'cycle' → logprob: -3.9585344791412354
    9. 'group' → logprob: -4.083534240722656
    10. ' product' → logprob: -4.208534240722656

Token 35: ',' (ID: 11)
  Prédit: ''
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False

Token 36: ' combinations' (ID: 43835)
  Prédit: 'com'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'com' → logprob: -0.04275994002819061
    2. ' combinations' → logprob: -3.667759895324707
    3. 'product' → logprob: -4.167759895324707
    4. ' product' → logprob: -7.167759895324707
    5. 'comb' → logprob: -10.792759895324707
    6. 'chain' → logprob: -11.042759895324707
    7. '	com' → logprob: -11.042759895324707
    8. 'group' → logprob: -12.542759895324707
    9. 'cycle' → logprob: -13.042759895324707
    10. 'acc' → logprob: -13.167759895324707

Token 37: ',' (ID: 11)
  Prédit: ''
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False

Token 38: ' chain' (ID: 13464)
  Prédit: 'product'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'product' → logprob: -0.07613031566143036
    2. ' product' → logprob: -2.8261303901672363
    3. 'com' → logprob: -4.701130390167236
    4. 'acc' → logprob: -5.826130390167236
    5. ' combinations' → logprob: -6.701130390167236
    6. 'group' → logprob: -7.826130390167236
    7. 'chain' → logprob: -8.951129913330078
    8. ' accumulate' → logprob: -9.076129913330078
    9. ' group' → logprob: -10.201129913330078
    10. 'prod' → logprob: -10.576129913330078

Token 39: '
' (ID: 198)
  Prédit: ''
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False

Token 40: 'from' (ID: 2845)
  Prédit: '
'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '
' → logprob: -0.6791353821754456
    2. '#' → logprob: -1.1791353225708008
    3. 'def' → logprob: -3.054135322570801
    4. '<|end|>' → logprob: -3.554135322570801
    5. '

' → logprob: -3.679135322570801
    6. '.' → logprob: -4.054135322570801
    7. ',' → logprob: -4.054135322570801
    8. 'import' → logprob: -4.554135322570801
    9. '\n' → logprob: -4.554135322570801
    10. '' → logprob: -5.179135322570801

Token 41: ' heap' (ID: 37237)
  Prédit: ' functools'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' functools' → logprob: -0.8837769627571106
    2. ' heap' → logprob: -2.008776903152466
    3. ' operator' → logprob: -2.258776903152466
    4. 'collections' → logprob: -2.383776903152466
    5. 'heap' → logprob: -2.883776903152466
    6. ' collections' → logprob: -2.883776903152466
    7. 'fun' → logprob: -3.258776903152466
    8. 'operator' → logprob: -3.758776903152466
    9. ' math' → logprob: -4.008777141571045
    10. ' typing' → logprob: -4.008777141571045

Token 42: 'q' (ID: 80)
  Prédit: 'q'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'q' → logprob: -1.9361264946837764e-07
    2. 'queue' → logprob: -15.875
    3. 'import' → logprob: -19.0
    4. ' queue' → logprob: -20.25
    5. 'dict' → logprob: -20.625
    6. '```' → logprob: -21.625
    7. 'n' → logprob: -22.25
    8. 'que' → logprob: -22.375
    9. 's' → logprob: -22.625
    10. 'f' → logprob: -23.0

Token 43: ' import' (ID: 1588)
  Prédit: ' import'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' import' → logprob: -0.026322131976485252
    2. 'import' → logprob: -3.65132212638855
    3. ' ' → logprob: -11.401322364807129
    4. '	import' → logprob: -12.401322364807129
    5. '<|end|>' → logprob: -12.526322364807129
    6. '_import' → logprob: -14.276322364807129
    7. '.' → logprob: -14.401322364807129
    8. ' imports' → logprob: -15.151322364807129
    9. '  ' → logprob: -15.651322364807129
    10. '.import' → logprob: -15.776322364807129

Token 44: ' he' (ID: 501)
  Prédit: 'he'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'he' → logprob: -0.22087576985359192
    2. ' he' → logprob: -1.7208757400512695
    3. 'heap' → logprob: -3.9708757400512695
    4. ' heap' → logprob: -8.84587574005127
    5. 'import' → logprob: -9.72087574005127
    6. 'nl' → logprob: -9.72087574005127
    7. '```' → logprob: -9.97087574005127
    8. 'merge' → logprob: -10.09587574005127
    9. '.he' → logprob: -10.47087574005127
    10. 'n' → logprob: -10.97087574005127

Token 45: 'app' (ID: 903)
  Prédit: 'app'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'app' → logprob: -0.018155446276068687
    2. 'ap' → logprob: -4.018155574798584
    3. 'a' → logprob: -12.143155097961426
    4. 'ап' → logprob: -16.143156051635742
    5. 'aq' → logprob: -17.143156051635742
    6. '```' → logprob: -17.143156051635742
    7. 'q' → logprob: -18.018156051635742
    8. 'aps' → logprob: -18.018156051635742
    9. 'appen' → logprob: -18.518156051635742
    10. '[' → logprob: -18.643156051635742

Token 46: 'op' (ID: 467)
  Prédit: 'ush'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'ush' → logprob: -0.011048170737922192
    2. 'op' → logprob: -4.511048316955566
    3. 'u' → logprob: -16.38604736328125
    4. 'o' → logprob: -16.88604736328125
    5. 'us' → logprob: -17.01104736328125
    6. '[' → logprob: -17.51104736328125
    7. '```' → logprob: -17.51104736328125
    8. 'ut' → logprob: -17.63604736328125
    9. '

' → logprob: -17.76104736328125
    10. '   ' → logprob: -18.01104736328125

Token 47: ',' (ID: 11)
  Prédit: ','
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ',' → logprob: -0.05111522972583771
    2. 'import' → logprob: -3.8011152744293213
    3. 'ush' → logprob: -3.8011152744293213
    4. 'he' → logprob: -5.676115036010742
    5. ' ,' → logprob: -7.676115036010742
    6. 'push' → logprob: -7.926115036010742
    7. ' he' → logprob: -7.926115036010742
    8. ' ' → logprob: -8.301115036010742
    9. ' and' → logprob: -9.426115036010742
    10. ',p' → logprob: -10.301115036010742

Token 48: ' he' (ID: 501)
  Prédit: 'he'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'he' → logprob: -0.26677823066711426
    2. ' he' → logprob: -1.5167782306671143
    3. 'heap' → logprob: -4.266777992248535
    4. ' heap' → logprob: -7.266777992248535
    5. '```' → logprob: -12.016777992248535
    6. ' ' → logprob: -13.141777992248535
    7. 'hep' → logprob: -13.391777992248535
    8. '.he' → logprob: -13.391777992248535
    9. ' heaps' → logprob: -14.141777992248535
    10. 'h' → logprob: -15.141777992248535

Token 49: 'app' (ID: 903)
  Prédit: 'app'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'app' → logprob: -0.00026300468016415834
    2. 'ap' → logprob: -8.250263214111328
    3. 'a' → logprob: -13.375263214111328
    4. 'appen' → logprob: -17.250263214111328
    5. 'ап' → logprob: -17.625263214111328
    6. 'aq' → logprob: -17.750263214111328
    7. 'APP' → logprob: -17.875263214111328
    8. '(app' → logprob: -19.000263214111328
    9. 'q' → logprob: -19.125263214111328
    10. 'appe' → logprob: -19.375263214111328

Token 50: 'ush' (ID: 1776)
  Prédit: 'ush'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'ush' → logprob: -1.723973582556937e-05
    2. 'op' → logprob: -11.000017166137695
    3. 'us' → logprob: -15.375017166137695
    4. 'push' → logprob: -16.375017166137695
    5. 'u' → logprob: -17.375017166137695
    6. 'sh' → logprob: -18.250017166137695
    7. '   ' → logprob: -18.250017166137695
    8. 'p' → logprob: -18.500017166137695
    9. '```' → logprob: -18.625017166137695
    10. '[' → logprob: -18.625017166137695

Token 51: '
' (ID: 198)
  Prédit: '\n'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '\n' → logprob: -0.7561679482460022
    2. '
' → logprob: -1.3811678886413574
    3. '\' → logprob: -1.8811678886413574
    4. '#' → logprob: -3.3811678886413574
    5. '' → logprob: -3.8811678886413574
    6. '

' → logprob: -4.006167888641357
    7. '<|end|>' → logprob: -4.006167888641357
    8. 'def' → logprob: -4.131167888641357
    9. 'n' → logprob: -5.256167888641357
    10. 'd' → logprob: -5.631167888641357

Token 52: 'sys' (ID: 17324)
  Prédit: '
'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '
' → logprob: -0.7292899489402771
    2. 'def' → logprob: -1.2292900085449219
    3. '\n' → logprob: -2.979290008544922
    4. 'import' → logprob: -3.479290008544922
    5. 'd' → logprob: -3.604290008544922
    6. '#' → logprob: -3.604290008544922
    7. '<|end|>' → logprob: -3.729290008544922
    8. '\' → logprob: -3.854290008544922
    9. '

' → logprob: -4.229290008544922
    10. '' → logprob: -5.104290008544922

Token 53: '.set' (ID: 1230)
  Prédit: '.'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '.' → logprob: -7.64839569455944e-05
    2. '.argv' → logprob: -11.125076293945312
    3. '.stdout' → logprob: -11.250076293945312
    4. '.exit' → logprob: -11.375076293945312
    5. '.readline' → logprob: -11.375076293945312
    6. '.stdin' → logprob: -11.750076293945312
    7. '.setdefault' → logprob: -12.500076293945312
    8. '.stderr' → logprob: -13.000076293945312
    9. ' .' → logprob: -13.250076293945312
    10. '.​' → logprob: -13.625076293945312

Token 54: 'rec' (ID: 9285)
  Prédit: 'rec'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'rec' → logprob: -0.015428148210048676
    2. '_rec' → logprob: -4.265428066253662
    3. '_limit' → logprob: -8.14042854309082
    4. ' recursion' → logprob: -8.64042854309082
    5. '_version' → logprob: -9.39042854309082
    6. '_int' → logprob: -9.39042854309082
    7. '_' → logprob: -9.51542854309082
    8. '_exc' → logprob: -9.76542854309082
    9. '_trace' → logprob: -9.89042854309082
    10. '_depth' → logprob: -9.89042854309082

Token 55: 'ursion' (ID: 41658)
  Prédit: 'ursion'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'ursion' → logprob: -2.093505099765025e-05
    2. 'limit' → logprob: -11.875020980834961
    3. 'ursive' → logprob: -11.875020980834961
    4. 'urs' → logprob: -12.125020980834961
    5. 'ur' → logprob: -14.125020980834961
    6. 'ursor' → logprob: -14.875020980834961
    7. 'usion' → logprob: -15.750020980834961
    8. 'ursively' → logprob: -16.37502098083496
    9. 'urst' → logprob: -17.12502098083496
    10. 'all' → logprob: -17.50002098083496

Token 56: 'limit' (ID: 19698)
  Prédit: 'limit'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'limit' → logprob: -0.03850925713777542
    2. '_limit' → logprob: -3.2885093688964844
    3. 'rl' → logprob: -8.413509368896484
    4. 'lim' → logprob: -9.163509368896484
    5. ' limit' → logprob: -10.038509368896484
    6. 'depth' → logprob: -11.288509368896484
    7. '_rl' → logprob: -11.288509368896484
    8. '_lim' → logprob: -11.413509368896484
    9. '_depth' → logprob: -11.538509368896484
    10. '_' → logprob: -12.163509368896484

Token 57: '(' (ID: 7)
  Prédit: '('
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(' → logprob: -4.60414821645827e-06
    2. '(
' → logprob: -12.625004768371582
    3. '(

' → logprob: -14.375004768371582
    4. ' (' → logprob: -15.125004768371582
    5. '((' → logprob: -16.125003814697266
    6. '()' → logprob: -16.500003814697266
    7. '(
' → logprob: -17.000003814697266
    8. '("("' → logprob: -17.125003814697266
    9. '40' → logprob: -17.625003814697266
    10. '```' → logprob: -17.750003814697266

Token 58: '10' (ID: 702)
  Prédit: '10'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '10' → logprob: -0.004079589620232582
    2. '100' → logprob: -5.504079818725586
    3. ' ' → logprob: -14.504079818725586
    4. '1' → logprob: -15.129079818725586
    5. '300' → logprob: -15.629079818725586
    6. '200' → logprob: -16.004079818725586
    7. '500' → logprob: -16.129079818725586
    8. '999' → logprob: -16.879079818725586
    9. '400' → logprob: -17.879079818725586
    10. '250' → logprob: -18.254079818725586

Token 59: '**' (ID: 410)
  Prédit: '000'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '000' → logprob: -0.013186939060688019
    2. '00' → logprob: -5.013186931610107
    3. '0' → logprob: -5.263186931610107
    4. '**' → logprob: -6.763186931610107
    5. '6' → logprob: -10.013187408447266
    6. ' ' → logprob: -10.638187408447266
    7. '7' → logprob: -10.638187408447266
    8. '```' → logprob: -11.638187408447266
    9. ')' → logprob: -12.138187408447266
    10. ' **' → logprob: -12.888187408447266

Token 60: '8' (ID: 23)
  Prédit: '7'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '7' → logprob: -0.0041742026805877686
    2. '9' → logprob: -5.50417423248291
    3. '8' → logprob: -9.25417423248291
    4. '6' → logprob: -16.629173278808594
    5. '```' → logprob: -19.629173278808594
    6. ' ' → logprob: -21.629173278808594
    7. '**' → logprob: -21.754173278808594
    8. '۷' → logprob: -23.004173278808594
    9. '৭' → logprob: -23.379173278808594
    10. '+' → logprob: -23.379173278808594

Token 61: ')
' (ID: 446)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')' → logprob: -3.128163257315464e-07
    2. ' )' → logprob: -16.125
    3. '))' → logprob: -16.375
    4. ')
' → logprob: -16.375
    5. '),' → logprob: -20.0
    6. ')`' → logprob: -20.125
    7. '}' → logprob: -20.25
    8. ')
' → logprob: -20.375
    9. ')))' → logprob: -20.875
    10. ')

' → logprob: -21.125

Token 62: 'mod' (ID: 4847)
  Prédit: '
'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '
' → logprob: -0.4695312976837158
    2. 'def' → logprob: -1.8445312976837158
    3. '

' → logprob: -2.594531297683716
    4. 'n' → logprob: -3.219531297683716
    5. 'class' → logprob: -3.219531297683716
    6. '#' → logprob: -3.969531297683716
    7. '\' → logprob: -3.969531297683716
    8. '\n' → logprob: -4.719531059265137
    9. '' → logprob: -4.969531059265137
    10. '
' → logprob: -5.594531059265137

Token 63: ' =' (ID: 314)
  Prédit: ' ='
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' =' → logprob: -0.08002353459596634
    2. '=' → logprob: -2.5800235271453857
    3. ' ' → logprob: -7.080023765563965
    4. '_' → logprob: -9.330023765563965
    5. '.' → logprob: -9.830023765563965
    6. ',' → logprob: -10.330023765563965
    7. ')' → logprob: -10.455023765563965
    8. '  ' → logprob: -10.580023765563965
    9. '<|end|>' → logprob: -11.205023765563965
    10. ' =)' → logprob: -11.830023765563965

Token 64: ' ' (ID: 220)
  Prédit: '10'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '10' → logprob: -0.059356484562158585
    2. ' ' → logprob: -2.934356451034546
    3. '100' → logprob: -5.434356689453125
    4. '998' → logprob: -9.434356689453125
    5. '1' → logprob: -10.934356689453125
    6. '0' → logprob: -13.934356689453125
    7. 'int' → logprob: -14.184356689453125
    8. ' ' → logprob: -15.684356689453125
    9. '999' → logprob: -15.684356689453125
    10. 'pow' → logprob: -16.184356689453125

Token 65: '10' (ID: 702)
  Prédit: '10'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '10' → logprob: -0.0003336777735967189
    2. '100' → logprob: -8.250333786010742
    3. ' ' → logprob: -10.250333786010742
    4. '1' → logprob: -10.375333786010742
    5. '998' → logprob: -12.125333786010742
    6. 'int' → logprob: -15.125333786010742
    7. '(' → logprob: -17.625333786010742
    8. '109' → logprob: -17.875333786010742
    9. '999' → logprob: -18.250333786010742
    10. '0' → logprob: -18.750333786010742

Token 66: '**' (ID: 410)
  Prédit: '**'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '**' → logprob: -0.4792611598968506
    2. '0' → logprob: -1.6042611598968506
    3. '\n' → logprob: -2.3542611598968506
    4. '\' → logprob: -2.7292611598968506
    5. '=' → logprob: -5.60426139831543
    6. '' → logprob: -6.22926139831543
    7. '2' → logprob: -6.60426139831543
    8. '9' → logprob: -6.60426139831543
    9. '
' → logprob: -6.72926139831543
    10. '```' → logprob: -6.85426139831543

Token 67: '9' (ID: 24)
  Prédit: '9'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '9' → logprob: -2.2200749754119897e-06
    2. '09' → logprob: -13.125001907348633
    3. '+' → logprob: -16.125001907348633
    4. '```' → logprob: -19.000001907348633
    5. '10' → logprob: -19.500001907348633
    6. '18' → logprob: -21.750001907348633
    7. ' ' → logprob: -21.875001907348633
    8. '19' → logprob: -21.875001907348633
    9. '９' → logprob: -22.000001907348633
    10. '12' → logprob: -22.875001907348633

Token 68: ' +' (ID: 659)
  Prédit: '+'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '+' → logprob: -0.00023333763238042593
    2. ' +' → logprob: -8.62523365020752
    3. '7' → logprob: -9.87523365020752
    4. '+
' → logprob: -13.37523365020752
    5. '＋' → logprob: -15.50023365020752
    6. ' plus' → logprob: -15.75023365020752
    7. '9' → logprob: -15.87523365020752
    8. 'plus' → logprob: -16.000232696533203
    9. '```' → logprob: -16.750232696533203
    10. '+

' → logprob: -17.750232696533203

Token 69: ' ' (ID: 220)
  Prédit: '7'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '7' → logprob: -3.128163257315464e-07
    2. '+' → logprob: -15.5
    3. ' ' → logprob: -17.5
    4. '```' → logprob: -18.875
    5. '   ' → logprob: -20.0
    6. '9' → logprob: -20.25
    7. '

' → logprob: -20.75
    8. '  ' → logprob: -21.0
    9. '07' → logprob: -21.125
    10. '79' → logprob: -22.1875

Token 70: '7' (ID: 22)
  Prédit: '7'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '7' → logprob: 0.0
    2. '+' → logprob: -17.375
    3. ' ' → logprob: -18.625
    4. '```' → logprob: -19.375
    5. '9' → logprob: -20.25
    6. '   ' → logprob: -21.0
    7. '07' → logprob: -21.0
    8. '

' → logprob: -21.875
    9. '' → logprob: -22.375
    10. ' ' → logprob: -22.9375

Token 71: '

' (ID: 279)
  Prédit: '
'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '
' → logprob: -0.016145335510373116
    2. '

' → logprob: -4.6411452293396
    3. '
' → logprob: -5.7661452293396
    4. 'def' → logprob: -6.0161452293396
    5. '' → logprob: -7.3911452293396
    6. 'n' → logprob: -10.141145706176758
    7. 'class' → logprob: -10.516145706176758
    8. '\n' → logprob: -10.516145706176758
    9. '<|end|>' → logprob: -10.891145706176758
    10. '```' → logprob: -11.016145706176758

Token 72: 'def' (ID: 1314)
  Prédit: 'n'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'n' → logprob: -0.4616747796535492
    2. 'def' → logprob: -1.2116748094558716
    3. 'd' → logprob: -2.961674690246582
    4. '
' → logprob: -4.086674690246582
    5. '\' → logprob: -7.211674690246582
    6. 'a' → logprob: -7.211674690246582
    7. '#' → logprob: -7.211674690246582
    8. 'class' → logprob: -7.711674690246582
    9. '

' → logprob: -7.961674690246582
    10. '\n' → logprob: -8.336674690246582

Token 73: ' inp' (ID: 64450)
  Prédit: ' main'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' main' → logprob: -0.9146192669868469
    2. ' solve' → logprob: -1.0396192073822021
    3. ' ' → logprob: -1.6646192073822021
    4. ' dfs' → logprob: -3.039619207382202
    5. ' factor' → logprob: -6.289619445800781
    6. ' factorial' → logprob: -6.664619445800781
    7. ' ' → logprob: -6.914619445800781
    8. ' solver' → logprob: -7.289619445800781
    9. ' solution' → logprob: -7.539619445800781
    10. 'solve' → logprob: -7.914619445800781

Token 74: '():
' (ID: 8595)
  Prédit: 'ut'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'ut' → logprob: -0.00015038289711810648
    2. 'u' → logprob: -8.875150680541992
    3. '():' → logprob: -11.875150680541992
    4. ' ut' → logprob: -13.250150680541992
    5. '():
' → logprob: -14.250150680541992
    6. '()' → logprob: -15.250150680541992
    7. '(' → logprob: -15.625150680541992
    8. 'ут' → logprob: -15.625150680541992
    9. 'uts' → logprob: -15.875150680541992
    10. '_ut' → logprob: -16.375150680541992

Token 75: '   ' (ID: 271)
  Prédit: '():'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '():' → logprob: -0.1440403014421463
    2. '()' → logprob: -2.01904034614563
    3. ' ()' → logprob: -7.394040107727051
    4. '():
' → logprob: -7.519040107727051
    5. ' ():' → logprob: -9.26904010772705
    6. '().' → logprob: -9.64404010772705
    7. '(' → logprob: -10.76904010772705
    8. ':' → logprob: -12.64404010772705
    9. '()`' → logprob: -12.89404010772705
    10. '()
' → logprob: -12.89404010772705

Token 76: ' #' (ID: 1069)
  Prédit: 'return'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'return' → logprob: -0.10567787289619446
    2. 'input' → logprob: -2.855677843093872
    3. ' return' → logprob: -3.730677843093872
    4. 'int' → logprob: -4.105678081512451
    5. ' input' → logprob: -6.605678081512451
    6. 'list' → logprob: -7.730678081512451
    7. 'map' → logprob: -8.230677604675293
    8. ' int' → logprob: -9.230677604675293
    9. '   ' → logprob: -9.730677604675293
    10. ' list' → logprob: -9.855677604675293

Token 77: ' Version' (ID: 10004)
  Prédit: 'return'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'return' → logprob: -0.5792104601860046
    2. ' return' → logprob: -0.8292104601860046
    3. '()' → logprob: -6.45421028137207
    4. '   ' → logprob: -7.07921028137207
    5. ' ' → logprob: -8.20421028137207
    6. ' input' → logprob: -8.70421028137207
    7. 'input' → logprob: -8.82921028137207
    8. '    ' → logprob: -9.82921028137207
    9. ')' → logprob: -10.07921028137207
    10. 'int' → logprob: -10.32921028137207

Token 78: ' inutile' (ID: 157748)
  Prédit: '()'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '()' → logprob: -0.033514175564050674
    2. '().' → logprob: -4.158514022827148
    3. '(' → logprob: -4.283514022827148
    4. '():' → logprob: -6.533514022827148
    5. ' ()' → logprob: -7.158514022827148
    6. ' =' → logprob: -7.908514022827148
    7. '.' → logprob: -8.783514022827148
    8. 'put' → logprob: -9.033514022827148
    9. '()
' → logprob: -9.033514022827148
    10. '()`' → logprob: -9.533514022827148

Token 79: 'ment' (ID: 508)
  Prédit: '()'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '()' → logprob: -0.7668821215629578
    2. '():' → logprob: -1.0168821811676025
    3. 'ut' → logprob: -1.8918821811676025
    4. 'put' → logprob: -4.391881942749023
    5. 'u' → logprob: -5.516881942749023
    6. ' ()' → logprob: -5.766881942749023
    7. '().' → logprob: -6.266881942749023
    8. ' ():' → logprob: -7.391881942749023
    9. ' put' → logprob: -9.141881942749023
    10. '(' → logprob: -9.391881942749023

Token 80: ' complexe' (ID: 78615)
  Prédit: '()'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '()' → logprob: -0.7255676984786987
    2. 'e' → logprob: -2.2255678176879883
    3. ' =' → logprob: -2.4755678176879883
    4. 's' → logprob: -3.1005678176879883
    5. '   ' → logprob: -3.2255678176879883
    6. 'simpl' → logprob: -3.9755678176879883
    7. 'def' → logprob: -4.225567817687988
    8. ',' → logprob: -4.225567817687988
    9. 'split' → logprob: -4.350567817687988
    10. '=' → logprob: -4.350567817687988

Token 81: ':' (ID: 25)
  Prédit: '()'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '()' → logprob: -0.6946861743927002
    2. '():' → logprob: -0.6946861743927002
    3. '():
' → logprob: -7.944685935974121
    4. '()
' → logprob: -8.194685935974121
    5. ' ()' → logprob: -8.319685935974121
    6. '(' → logprob: -9.069685935974121
    7. '   ' → logprob: -9.069685935974121
    8. ':' → logprob: -9.569685935974121
    9. ' ():' → logprob: -9.694685935974121
    10. '()\' → logprob: -10.069685935974121

Token 82: ' utilise' (ID: 70283)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.04381692036986351
    2. ' return' → logprob: -3.2938168048858643
    3. 'return' → logprob: -5.168817043304443
    4. '    ' → logprob: -10.543816566467285
    5. '	return' → logprob: -10.793816566467285
    6. '   ' → logprob: -11.793816566467285
    7. ' pass' → logprob: -12.918816566467285
    8. '  ' → logprob: -13.168816566467285
    9. '   ' → logprob: -13.543816566467285
    10. ' ' → logprob: -13.668816566467285

Token 83: ' eval' (ID: 29383)
  Prédit: 'input'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'input' → logprob: -0.9207205176353455
    2. 'return' → logprob: -1.5457205772399902
    3. ' return' → logprob: -2.4207205772399902
    4. ' input' → logprob: -2.4207205772399902
    5. 'r' → logprob: -2.9207205772399902
    6. 'sys' → logprob: -3.1707205772399902
    7. ' sys' → logprob: -3.4207205772399902
    8. 'int' → logprob: -3.9207205772399902
    9. 's' → logprob: -4.29572057723999
    10. ' simplement' → logprob: -4.54572057723999

Token 84: ' et' (ID: 859)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '(' → logprob: -0.03244311735033989
    2. '(input' → logprob: -4.032443046569824
    3. '("("' → logprob: -4.782443046569824
    4. '('' → logprob: -5.282443046569824
    5. '("")' → logprob: -8.657443046569824
    6. '(
' → logprob: -8.782443046569824
    7. '("' → logprob: -9.657443046569824
    8. '(eval' → logprob: -9.657443046569824
    9. '(open' → logprob: -10.032443046569824
    10. '()' → logprob: -10.282443046569824

Token 85: ' strings' (ID: 18279)
  Prédit: 'input'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'input' → logprob: -0.4304386079311371
    2. ' input' → logprob: -1.0554386377334595
    3. '(input' → logprob: -7.80543851852417
    4. ' ' → logprob: -7.80543851852417
    5. 'sys' → logprob: -8.180438995361328
    6. ' sys' → logprob: -8.305438995361328
    7. '   ' → logprob: -10.305438995361328
    8. 'int' → logprob: -10.305438995361328
    9. 'stdin' → logprob: -10.430438995361328
    10. '```' → logprob: -10.430438995361328

Token 86: '
' (ID: 198)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '(' → logprob: -0.04879208654165268
    2. '   ' → logprob: -4.048791885375977
    3. '('' → logprob: -4.423791885375977
    4. '("")' → logprob: -5.173791885375977
    5. '("("' → logprob: -5.548791885375977
    6. '()' → logprob: -6.048791885375977
    7. '(
' → logprob: -6.548791885375977
    8. '('\' → logprob: -6.673791885375977
    9. '    ' → logprob: -7.673791885375977
    10. ',' → logprob: -8.048791885375977

Token 87: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.5640403032302856
    2. '(' → logprob: -1.1890403032302856
    3. '()' → logprob: -2.189040184020996
    4. '(
' → logprob: -6.064040184020996
    5. '  ' → logprob: -6.439040184020996
    6. ' ' → logprob: -6.564040184020996
    7. '\n' → logprob: -6.689040184020996
    8. '    ' → logprob: -6.939040184020996
    9. '
' → logprob: -7.189040184020996
    10. '()
' → logprob: -7.439040184020996

Token 88: ' return' (ID: 622)
  Prédit: 'return'
  Correct (stricte): False
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'return' (adapté à ' return') → logprob: -0.2603394091129303
    2. '   ' → logprob: -1.760339379310608
    3. ' return' → logprob: -3.1353394985198975
    4. '(' → logprob: -4.885339260101318
    5. '()' → logprob: -5.385339260101318
    6. 'input' → logprob: -8.010339736938477
    7. ' ' → logprob: -8.135339736938477
    8. 's' → logprob: -8.635339736938477
    9. '    ' → logprob: -9.260339736938477
    10. 'ret' → logprob: -9.760339736938477

Token 89: ' eval' (ID: 29383)
  Prédit: 'eval'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'eval' → logprob: -0.7712481617927551
    2. ' eval' → logprob: -1.6462481021881104
    3. 'int' → logprob: -1.7712481021881104
    4. 'input' → logprob: -2.5212481021881104
    5. ' int' → logprob: -3.1462481021881104
    6. ' input' → logprob: -3.6462481021881104
    7. ' list' → logprob: -4.3962483406066895
    8. 'list' → logprob: -4.7712483406066895
    9. '(eval' → logprob: -6.3962483406066895
    10. '   ' → logprob: -6.6462483406066895

Token 90: '('' (ID: 706)
  Prédit: '(input'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(input' → logprob: -0.006383045110851526
    2. '(' → logprob: -5.131382942199707
    3. '("("' → logprob: -8.631382942199707
    4. '(sys' → logprob: -8.881382942199707
    5. 'input' → logprob: -9.131382942199707
    6. '('' → logprob: -11.756382942199707
    7. '("(' → logprob: -12.381382942199707
    8. ' ' → logprob: -12.756382942199707
    9. '('(' → logprob: -12.756382942199707
    10. '"(' → logprob: -13.006382942199707

Token 91: 'int' (ID: 491)
  Prédit: 'input'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'input' → logprob: -0.0022765810135751963
    2. '(input' → logprob: -6.252276420593262
    3. ''' → logprob: -8.502276420593262
    4. 'sys' → logprob: -9.627276420593262
    5. '('' → logprob: -11.377276420593262
    6. ' input' → logprob: -11.377276420593262
    7. '(' → logprob: -11.627276420593262
    8. '"' → logprob: -11.627276420593262
    9. 'in' → logprob: -11.752276420593262
    10. 'raw' → logprob: -12.377276420593262

Token 92: '(input' (ID: 10054)
  Prédit: '(input'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(input' → logprob: -0.017141517251729965
    2. '')(' → logprob: -4.267141342163086
    3. '('' → logprob: -6.142141342163086
    4. '(sys' → logprob: -7.767141342163086
    5. '(' → logprob: -8.392141342163086
    6. ''(' → logprob: -9.517141342163086
    7. ''' → logprob: -10.017141342163086
    8. 'input' → logprob: -10.642141342163086
    9. '')' → logprob: -10.892141342163086
    10. '(inp' → logprob: -12.517141342163086

Token 93: '())' (ID: 3516)
  Prédit: '())'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '())' → logprob: -0.0008070098701864481
    2. '()' → logprob: -7.37580680847168
    3. '()))' → logprob: -8.87580680847168
    4. '().' → logprob: -10.75080680847168
    5. ' ())' → logprob: -11.25080680847168
    6. '(()' → logprob: -13.12580680847168
    7. ')' → logprob: -13.75080680847168
    8. '()"' → logprob: -14.12580680847168
    9. '(' → logprob: -14.25080680847168
    10. '())
' → logprob: -14.75080680847168

Token 94: '')

' (ID: 9735)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ')' → logprob: -0.9067994952201843
    2. '()' → logprob: -0.9067994952201843
    3. '())' → logprob: -1.656799554824829
    4. '')' → logprob: -6.65679931640625
    5. '(' → logprob: -8.40679931640625
    6. ' )' → logprob: -9.65679931640625
    7. ' ())' → logprob: -11.15679931640625
    8. '().' → logprob: -11.78179931640625
    9. '('' → logprob: -12.15679931640625
    10. '))' → logprob: -12.28179931640625

Token 95: 'def' (ID: 1314)
  Prédit: 'def'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'def' → logprob: -0.16197195649147034
    2. '
' → logprob: -1.911971926689148
    3. '

' → logprob: -7.1619720458984375
    4. '\' → logprob: -8.286972045898438
    5. '\n' → logprob: -8.661972045898438
    6. '#' → logprob: -8.911972045898438
    7. ' def' → logprob: -9.661972045898438
    8. '  
' → logprob: -9.911972045898438
    9. '<|end|>' → logprob: -10.161972045898438
    10. '
' → logprob: -10.286972045898438

Token 96: ' in' (ID: 306)
  Prédit: 'in'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'in' → logprob: -1.0908833742141724
    2. 'input' → logprob: -1.4658833742141724
    3. ' input' → logprob: -2.090883255004883
    4. 'int' → logprob: -2.215883255004883
    5. ' in' → logprob: -2.465883255004883
    6. 'ints' → logprob: -3.465883255004883
    7. ' inp' → logprob: -3.590883255004883
    8. 'inp' → logprob: -4.090883255004883
    9. 'ip' → logprob: -4.840883255004883
    10. ' main' → logprob: -5.090883255004883

Token 97: 'pm' (ID: 6991)
  Prédit: 'put'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'put' → logprob: -0.027760550379753113
    2. 't' → logprob: -4.0277605056762695
    3. 'p' → logprob: -4.6527605056762695
    4. 'pt' → logprob: -10.90276050567627
    5. 'puts' → logprob: -11.77776050567627
    6. 'pu' → logprob: -13.65276050567627
    7. 'pi' → logprob: -14.77776050567627
    8. 'print' → logprob: -15.27776050567627
    9. 'pit' → logprob: -15.40276050567627
    10. 'pute' → logprob: -15.52776050567627

Token 98: '():
' (ID: 8595)
  Prédit: '()'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '()' → logprob: -0.6968932747840881
    2. '():' → logprob: -0.6968932747840881
    3. '():
' → logprob: -6.196893215179443
    4. 'ut' → logprob: -6.571893215179443
    5. 't' → logprob: -9.446893692016602
    6. 'ul' → logprob: -10.071893692016602
    7. 'ap' → logprob: -10.696893692016602
    8. '()
' → logprob: -11.071893692016602
    9. '():

' → logprob: -11.196893692016602
    10. 'a' → logprob: -11.321893692016602

Token 99: '   ' (ID: 271)
  Prédit: '():'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '():' → logprob: -0.009183370508253574
    2. '()' → logprob: -5.134183406829834
    3. '():
' → logprob: -5.759183406829834
    4. '().' → logprob: -10.384182929992676
    5. ' ():' → logprob: -10.759182929992676
    6. ':' → logprob: -10.884182929992676
    7. 'list' → logprob: -12.259182929992676
    8. ' ()' → logprob: -12.509182929992676
    9. '()[' → logprob: -12.634182929992676
    10. '):' → logprob: -13.134182929992676

Token 100: ' #' (ID: 1069)
  Prédit: '():'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '():' → logprob: -0.40911930799484253
    2. '():
' → logprob: -2.1591193675994873
    3. 'list' → logprob: -2.4091193675994873
    4. ' list' → logprob: -3.2841193675994873
    5. '()' → logprob: -3.9091193675994873
    6. '   ' → logprob: -4.534119129180908
    7. 'return' → logprob: -4.534119129180908
    8. ':' → logprob: -4.909119129180908
    9. 'map' → logprob: -4.909119129180908
    10. '):' → logprob: -5.159119129180908

Token 101: ' Util' (ID: 13564)
  Prédit: 'return'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'return' → logprob: -0.11920221149921417
    2. 'def' → logprob: -2.994202136993408
    3. ' return' → logprob: -3.119202136993408
    4. 'lambda' → logprob: -4.244202136993408
    5. 'map' → logprob: -6.119202136993408
    6. 'list' → logprob: -7.494202136993408
    7. ' lambda' → logprob: -7.494202136993408
    8. ' map' → logprob: -8.494202613830566
    9. '   ' → logprob: -9.994202613830566
    10. '(lambda' → logprob: -10.244202613830566

Token 102: 'ise' (ID: 1096)
  Prédit: '()'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '()' → logprob: -0.30041345953941345
    2. 'def' → logprob: -2.6754133701324463
    3. 'port' → logprob: -3.1754133701324463
    4. 'put' → logprob: -3.1754133701324463
    5. 'er' → logprob: -3.3004133701324463
    6. '()
' → logprob: -4.300413608551025
    7. 'pute' → logprob: -4.675413608551025
    8. 'puts' → logprob: -4.800413608551025
    9. '():
' → logprob: -4.800413608551025
    10. 'ut' → logprob: -4.925413608551025

Token 103: ' une' (ID: 2463)
  Prédit: 'map'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'map' → logprob: -0.4829880893230438
    2. 'list' → logprob: -1.3579881191253662
    3. '(map' → logprob: -2.732988119125366
    4. '(list' → logprob: -3.232988119125366
    5. '(lambda' → logprob: -4.982987880706787
    6. ' map' → logprob: -5.357987880706787
    7. 'lambda' → logprob: -5.857987880706787
    8. '(' → logprob: -6.232987880706787
    9. ' list' → logprob: -6.732987880706787
    10. '(tuple' → logprob: -6.982987880706787

Token 104: ' comprehension' (ID: 91423)
  Prédit: 'map'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'map' → logprob: -0.059884436428546906
    2. ' map' → logprob: -3.309884548187256
    3. 'list' → logprob: -3.934884548187256
    4. ' list' → logprob: -7.184884548187256
    5. 'input' → logprob: -7.809884548187256
    6. 'liste' → logprob: -7.934884548187256
    7. 'split' → logprob: -9.059884071350098
    8. 'tuple' → logprob: -9.559884071350098
    9. 's' → logprob: -10.059884071350098
    10. 'return' → logprob: -10.434884071350098

Token 105: ' et' (ID: 859)
  Prédit: '()'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '()' → logprob: -0.06499595195055008
    2. '[]' → logprob: -3.4399960041046143
    3. '[' → logprob: -4.939995765686035
    4. '()[' → logprob: -5.189995765686035
    5. ':' → logprob: -5.314995765686035
    6. '():' → logprob: -6.564995765686035
    7. ' =' → logprob: -6.564995765686035
    8. '[:]' → logprob: -6.564995765686035
    9. '(lambda' → logprob: -6.564995765686035
    10. '   ' → logprob: -6.939995765686035

Token 106: ' unpack' (ID: 61704)
  Prédit: 'list'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'list' → logprob: -1.129349708557129
    2. ' map' → logprob: -1.254349708557129
    3. ' list' → logprob: -1.379349708557129
    4. 'map' → logprob: -2.004349708557129
    5. 'input' → logprob: -6.254349708557129
    6. ' input' → logprob: -6.504349708557129
    7. 'split' → logprob: -7.504349708557129
    8. '[' → logprob: -8.504349708557129
    9. ' la' → logprob: -8.504349708557129
    10. ' tuple' → logprob: -9.629349708557129

Token 107: 'er' (ID: 259)
  Prédit: '()'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '()' → logprob: -0.023405270650982857
    2. '=' → logprob: -4.398405075073242
    3. '():' → logprob: -5.898405075073242
    4. 'return' → logprob: -6.273405075073242
    5. ' ()' → logprob: -6.773405075073242
    6. ' =' → logprob: -6.773405075073242
    7. '=lambda' → logprob: -7.148405075073242
    8. '()`' → logprob: -7.648405075073242
    9. '   ' → logprob: -8.023405075073242
    10. '(lambda' → logprob: -8.023405075073242

Token 108: ' pour' (ID: 1930)
  Prédit: '():'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '():' → logprob: -0.23921678960323334
    2. '()' → logprob: -1.7392168045043945
    3. '():
' → logprob: -3.3642168045043945
    4. '=' → logprob: -6.7392168045043945
    5. ':' → logprob: -7.8642168045043945
    6. '()
' → logprob: -8.114216804504395
    7. ' ()' → logprob: -8.739216804504395
    8. ' =' → logprob: -8.989216804504395
    9. '(' → logprob: -9.989216804504395
    10. '()`' → logprob: -10.114216804504395

Token 109: ' croche' (ID: 192409)
  Prédit: 'map'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'map' → logprob: -0.6054136157035828
    2. ' map' → logprob: -0.8554136157035828
    3. 'return' → logprob: -3.9804136753082275
    4. ' return' → logprob: -5.480413436889648
    5. 'list' → logprob: -5.480413436889648
    6. ' list' → logprob: -6.980413436889648
    7. 'input' → logprob: -7.855413436889648
    8. 'split' → logprob: -8.855413436889648
    9. ' input' → logprob: -8.980413436889648
    10. 'int' → logprob: -9.105413436889648

Token 110: 'ter' (ID: 399)
  Prédit: 't'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 't' → logprob: -0.14557170867919922
    2. 'ts' → logprob: -2.020571708679199
    3. 'ter' → logprob: -6.020571708679199
    4. 'ters' → logprob: -9.2705717086792
    5. '[' → logprob: -9.3955717086792
    6. 'r' → logprob: -9.5205717086792
    7. 'tes' → logprob: -10.0205717086792
    8. '```' → logprob: -10.5205717086792
    9. '[t' → logprob: -10.7705717086792
    10. 'tter' → logprob: -10.7705717086792

Token 111: ' map' (ID: 4014)
  Prédit: '()'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '()' → logprob: -0.045324571430683136
    2. '():' → logprob: -3.4203245639801025
    3. '[]' → logprob: -5.420324802398682
    4. '()[' → logprob: -5.920324802398682
    5. ' ()' → logprob: -6.795324802398682
    6. '()`' → logprob: -7.545324802398682
    7. '[' → logprob: -7.920324802398682
    8. ':' → logprob: -7.920324802398682
    9. '   ' → logprob: -8.045324325561523
    10. '()
' → logprob: -8.295324325561523

Token 112: '
' (ID: 198)
  Prédit: '(int'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '(int' → logprob: -0.8247771263122559
    2. '()' → logprob: -1.1997771263122559
    3. '(lambda' → logprob: -1.8247771263122559
    4. '():' → logprob: -2.449777126312256
    5. '(list' → logprob: -5.324777126312256
    6. '(' → logprob: -6.699777126312256
    7. 'list' → logprob: -6.824777126312256
    8. ':' → logprob: -7.074777126312256
    9. '(str' → logprob: -7.074777126312256
    10. 'int' → logprob: -7.324777126312256

Token 113: '   ' (ID: 271)
  Prédit: '():'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '():' → logprob: -0.25508028268814087
    2. '():
' → logprob: -2.005080223083496
    3. '()' → logprob: -3.130080223083496
    4. '(lambda' → logprob: -3.630080223083496
    5. '   ' → logprob: -4.630080223083496
    6. 'def' → logprob: -6.005080223083496
    7. ' =' → logprob: -6.130080223083496
    8. '()
' → logprob: -6.255080223083496
    9. '=' → logprob: -7.130080223083496
    10. ':' → logprob: -7.130080223083496

Token 114: ' return' (ID: 622)
  Prédit: 'return'
  Correct (stricte): False
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'return' (adapté à ' return') → logprob: -0.022226758301258087
    2. ' return' → logprob: -4.647226810455322
    3. '():' → logprob: -5.522226810455322
    4. 'def' → logprob: -6.022226810455322
    5. 'lambda' → logprob: -6.147226810455322
    6. '   ' → logprob: -6.397226810455322
    7. '(lambda' → logprob: -7.647226810455322
    8. ':' → logprob: -7.897226810455322
    9. ' =' → logprob: -8.147226333618164
    10. ':return' → logprob: -8.147226333618164

Token 115: ' tuple' (ID: 31311)
  Prédit: 'map'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'map' → logprob: -0.03488161787390709
    2. ' map' → logprob: -4.034881591796875
    3. 'list' → logprob: -4.409881591796875
    4. 'int' → logprob: -5.909881591796875
    5. '[int' → logprob: -7.159881591796875
    6. ' list' → logprob: -7.659881591796875
    7. 'tuple' → logprob: -8.409881591796875
    8. '[' → logprob: -9.159881591796875
    9. ' int' → logprob: -10.034881591796875
    10. '[*' → logprob: -10.284881591796875

Token 116: '(map' (ID: 16946)
  Prédit: '(map'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(map' → logprob: -0.000639169302303344
    2. '(int' → logprob: -7.500638961791992
    3. '(' → logprob: -9.375638961791992
    4. 'map' → logprob: -14.375638961791992
    5. '([' → logprob: -15.875638961791992
    6. '(i' → logprob: -15.875638961791992
    7. '(m' → logprob: -16.000638961791992
    8. '(input' → logprob: -16.250638961791992
    9. '(list' → logprob: -16.875638961791992
    10. ' map' → logprob: -17.250638961791992

Token 117: '(int' (ID: 2742)
  Prédit: '(int'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(int' → logprob: -3.225939872208983e-05
    2. 'int' → logprob: -10.500032424926758
    3. '(' → logprob: -12.500032424926758
    4. '<int' → logprob: -14.750032424926758
    5. '[int' → logprob: -16.000032424926758
    6. ' int' → logprob: -16.125032424926758
    7. '=int' → logprob: -16.250032424926758
    8. ',int' → logprob: -17.000032424926758
    9. '```' → logprob: -17.125032424926758
    10. '   ' → logprob: -17.500032424926758

Token 118: ',' (ID: 11)
  Prédit: ',input'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ',input' → logprob: -0.25752249360084534
    2. ',' → logprob: -1.507522463798523
    3. 'input' → logprob: -5.5075225830078125
    4. '(input' → logprob: -6.5075225830078125
    5. ' ,' → logprob: -11.257522583007812
    6. ' input' → logprob: -11.757522583007812
    7. '   ' → logprob: -12.882522583007812
    8. ' (' → logprob: -13.132522583007812
    9. '=input' → logprob: -14.382522583007812
    10. '(' → logprob: -14.382522583007812

Token 119: ' (' (ID: 350)
  Prédit: 'input'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'input' → logprob: -0.0017049367306753993
    2. ' input' → logprob: -6.376705169677734
    3. '(input' → logprob: -13.751705169677734
    4. '   ' → logprob: -14.376705169677734
    5. ',input' → logprob: -14.626705169677734
    6. 'sys' → logprob: -15.126705169677734
    7. ' ' → logprob: -16.001705169677734
    8. '<input' → logprob: -16.626705169677734
    9. '	input' → logprob: -16.626705169677734
    10. '=input' → logprob: -17.251705169677734

Token 120: 'lambda' (ID: 35280)
  Prédit: 'input'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'input' → logprob: -0.001066631986759603
    2. ' input' → logprob: -6.8760666847229
    3. '   ' → logprob: -11.251066207885742
    4. '(input' → logprob: -11.376066207885742
    5. 'sys' → logprob: -12.876066207885742
    6. ' ' → logprob: -13.876066207885742
    7. '=input' → logprob: -14.126066207885742
    8. ',input' → logprob: -14.126066207885742
    9. '[input' → logprob: -14.251066207885742
    10. 'str' → logprob: -14.376066207885742

Token 121: ' x' (ID: 1215)
  Prédit: ':'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ':' → logprob: -0.87117600440979
    2. 'input' → logprob: -1.37117600440979
    3. 'x' → logprob: -1.49617600440979
    4. 's' → logprob: -3.37117600440979
    5. ' input' → logprob: -3.74617600440979
    6. ' x' → logprob: -4.246175765991211
    7. ':list' → logprob: -4.996175765991211
    8. ' s' → logprob: -5.621175765991211
    9. ':x' → logprob: -5.871175765991211
    10. 'line' → logprob: -5.996175765991211

Token 122: ':' (ID: 25)
  Prédit: ':'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ':' → logprob: -0.019225891679525375
    2. ':x' → logprob: -4.01922607421875
    3. ' :' → logprob: -7.64422607421875
    4. 'x' → logprob: -8.14422607421875
    5. ':list' → logprob: -8.39422607421875
    6. ':str' → logprob: -10.14422607421875
    7. ':int' → logprob: -10.89422607421875
    8. ' x' → logprob: -11.89422607421875
    9. ':n' → logprob: -13.51922607421875
    10. '=' → logprob: -13.89422607421875

Token 123: ' x' (ID: 1215)
  Prédit: 'x'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'x' → logprob: -0.010764464735984802
    2. ' x' → logprob: -4.6357645988464355
    3. 'input' → logprob: -7.0107645988464355
    4. 'str' → logprob: -9.510764122009277
    5. ' input' → logprob: -11.385764122009277
    6. 'sys' → logprob: -11.760764122009277
    7. '(x' → logprob: -12.385764122009277
    8. 'list' → logprob: -12.635764122009277
    9. '[x' → logprob: -14.135764122009277
    10. '   ' → logprob: -14.135764122009277

Token 124: '.split' (ID: 10347)
  Prédit: '().'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '().' → logprob: -0.0832933783531189
    2. '.split' → logprob: -2.7082934379577637
    3. '.strip' → logprob: -4.333293437957764
    4. '()' → logprob: -9.208292961120605
    5. '.rstrip' → logprob: -12.208292961120605
    6. 'input' → logprob: -12.333292961120605
    7. 'split' → logprob: -12.458292961120605
    8. ')' → logprob: -12.583292961120605
    9. '.' → logprob: -12.583292961120605
    10. '.readline' → logprob: -12.708292961120605

Token 125: '())' (ID: 3516)
  Prédit: '())'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '())' → logprob: -0.3331350088119507
    2. '()' → logprob: -1.3331350088119507
    3. '()))' → logprob: -4.33313512802124
    4. '()(' → logprob: -5.95813512802124
    5. '('' → logprob: -6.20813512802124
    6. '()
' → logprob: -7.33313512802124
    7. '())))' → logprob: -7.83313512802124
    8. '())[' → logprob: -8.833134651184082
    9. ')' → logprob: -8.958134651184082
    10. '())))
' → logprob: -9.208134651184082

Token 126: '(' (ID: 7)
  Prédit: '(input'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(input' → logprob: -0.0012247511185705662
    2. '(sys' → logprob: -7.501224517822266
    3. ' (' → logprob: -8.251224517822266
    4. '(inp' → logprob: -8.376224517822266
    5. ')(' → logprob: -9.376224517822266
    6. '(in' → logprob: -10.001224517822266
    7. '(' → logprob: -10.876224517822266
    8. ')' → logprob: -11.376224517822266
    9. '))(' → logprob: -12.251224517822266
    10. '((' → logprob: -13.001224517822266

Token 127: 'input' (ID: 2586)
  Prédit: 'input'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'input' → logprob: -0.00010235115041723475
    2. ' input' → logprob: -9.375102043151855
    3. '(input' → logprob: -11.750102043151855
    4. 'sys' → logprob: -11.875102043151855
    5. '   ' → logprob: -14.125102043151855
    6. 'in' → logprob: -14.250102043151855
    7. 'inp' → logprob: -14.625102043151855
    8. '<input' → logprob: -15.375102043151855
    9. ' ' → logprob: -16.125102996826172
    10. '	input' → logprob: -16.250102996826172

Token 128: '()))' (ID: 16829)
  Prédit: '())))'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '())))' → logprob: -0.07069956511259079
    2. '()' → logprob: -3.070699453353882
    3. '()))' → logprob: -4.070699691772461
    4. '())' → logprob: -5.945699691772461
    5. '().' → logprob: -6.945699691772461
    6. ')))' → logprob: -6.945699691772461
    7. '())))
' → logprob: -8.570699691772461
    8. '))))' → logprob: -10.820699691772461
    9. '()));' → logprob: -10.945699691772461
    10. '())).' → logprob: -12.195699691772461

Token 129: ')

' (ID: 1029)
  Prédit: '))'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '))' → logprob: -0.003489239141345024
    2. ')' → logprob: -6.003489017486572
    3. '()))' → logprob: -7.503489017486572
    4. ')))' → logprob: -7.753489017486572
    5. '()' → logprob: -11.12848949432373
    6. '())' → logprob: -11.62848949432373
    7. '   ' → logprob: -12.62848949432373
    8. '))
' → logprob: -13.25348949432373
    9. ' ' → logprob: -13.50348949432373
    10. ' ))' → logprob: -13.50348949432373

Token 130: 'def' (ID: 1314)
  Prédit: 'def'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'def' → logprob: -0.000992199289612472
    2. '
' → logprob: -7.125992298126221
    3. '#' → logprob: -9.750991821289062
    4. '\' → logprob: -10.125991821289062
    5. '<|end|>' → logprob: -10.750991821289062
    6. '\n' → logprob: -11.000991821289062
    7. '  
' → logprob: -11.250991821289062
    8. '    
' → logprob: -11.375991821289062
    9. ' 
' → logprob: -11.750991821289062
    10. ' def' → logprob: -12.375991821289062

Token 131: ' in' (ID: 306)
  Prédit: 'in'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'in' → logprob: -0.6475266218185425
    2. ' in' → logprob: -1.5225266218185425
    3. 'int' → logprob: -2.147526741027832
    4. ' inp' → logprob: -3.397526741027832
    5. 'inp' → logprob: -3.647526741027832
    6. ' input' → logprob: -3.772526741027832
    7. 'input' → logprob: -4.147526741027832
    8. ' int' → logprob: -4.522526741027832
    9. ' main' → logprob: -4.772526741027832
    10. 'ints' → logprob: -5.147526741027832

Token 132: 'pl' (ID: 528)
  Prédit: 't'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 't' → logprob: -0.019718201830983162
    2. 'p' → logprob: -4.019718170166016
    3. 'put' → logprob: -6.519718170166016
    4. 'pt' → logprob: -10.269718170166016
    5. 'pi' → logprob: -11.144718170166016
    6. '():
' → logprob: -11.394718170166016
    7. '()' → logprob: -11.894718170166016
    8. 'puts' → logprob: -12.519718170166016
    9. '()
' → logprob: -12.769718170166016
    10. 'i' → logprob: -13.019718170166016

Token 133: '():
' (ID: 8595)
  Prédit: '()'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '()' → logprob: -0.7675724625587463
    2. '():
' → logprob: -0.7675724625587463
    3. 'ist' → logprob: -3.3925724029541016
    4. '():' → logprob: -3.3925724029541016
    5. '()
' → logprob: -6.142572402954102
    6. 'ine' → logprob: -6.517572402954102
    7. '():
' → logprob: -7.642572402954102
    8. '())' → logprob: -9.392572402954102
    9. '()):
' → logprob: -9.392572402954102
    10. '()`' → logprob: -10.017572402954102

Token 134: '   ' (ID: 271)
  Prédit: 'return'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'return' → logprob: -0.15175855159759521
    2. '   ' → logprob: -2.0267586708068848
    3. 'list' → logprob: -5.151758670806885
    4. ' return' → logprob: -5.776758670806885
    5. ':list' → logprob: -10.401758193969727
    6. ' list' → logprob: -10.651758193969727
    7. ':return' → logprob: -10.651758193969727
    8. 'map' → logprob: -11.526758193969727
    9. '():
' → logprob: -11.651758193969727
    10. '	return' → logprob: -12.026758193969727

Token 135: ' #' (ID: 1069)
  Prédit: 'list'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'list' → logprob: -0.0053240046836435795
    2. 'return' → logprob: -5.255323886871338
    3. ' list' → logprob: -9.755324363708496
    4. '   ' → logprob: -11.005324363708496
    5. 'lambda' → logprob: -11.880324363708496
    6. 'map' → logprob: -12.005324363708496
    7. ' return' → logprob: -13.005324363708496
    8. '=list' → logprob: -16.88032341003418
    9. 'def' → logprob: -17.00532341003418
    10. '#' (adapté à ' #') → logprob: -17.88032341003418

Token 136: ' Compose' (ID: 183887)
  Prédit: 'return'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'return' → logprob: -0.31716445088386536
    2. 'list' → logprob: -1.317164421081543
    3. 'lambda' → logprob: -6.067164421081543
    4. ' return' → logprob: -7.067164421081543
    5. 'def' → logprob: -7.942164421081543
    6. ' list' → logprob: -8.942164421081543
    7. '#' → logprob: -9.067164421081543
    8. '   ' → logprob: -9.817164421081543
    9. 'map' → logprob: -9.942164421081543
    10. '    ' → logprob: -12.442164421081543

Token 137: ' map' (ID: 4014)
  Prédit: 'd'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'd' → logprob: -1.0246622562408447
    2. '(lambda' → logprob: -1.3996622562408447
    3. '(list' → logprob: -2.1496622562408447
    4. 'list' → logprob: -2.3996622562408447
    5. ' =' → logprob: -3.0246622562408447
    6. '=lambda' → logprob: -3.5246622562408447
    7. '=list' → logprob: -3.5246622562408447
    8. '=' → logprob: -3.8996622562408447
    9. 'lambda' → logprob: -4.524662017822266
    10. 't' → logprob: -4.649662017822266

Token 138: ' et' (ID: 859)
  Prédit: '(int'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '(int' → logprob: -0.0032286944333463907
    2. '(list' → logprob: -6.253228664398193
    3. 'list' → logprob: -7.003228664398193
    4. '(' → logprob: -8.378229141235352
    5. '(lambda' → logprob: -9.503229141235352
    6. 'int' → logprob: -9.628229141235352
    7. '(str' → logprob: -11.503229141235352
    8. '(
' → logprob: -12.128229141235352
    9. '<int' → logprob: -14.378229141235352
    10. ' int' → logprob: -14.753229141235352

Token 139: ' lambda' (ID: 27871)
  Prédit: 'list'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'list' → logprob: -0.00010199354437645525
    2. ' list' → logprob: -9.250102043151855
    3. 'lambda' → logprob: -12.500102043151855
    4. 'int' → logprob: -13.250102043151855
    5. '(list' → logprob: -15.375102043151855
    6. 'input' → logprob: -15.625102043151855
    7. 'li' → logprob: -18.12510108947754
    8. ' lambda' → logprob: -18.37510108947754
    9. '	list' → logprob: -18.50010108947754
    10. '(int' → logprob: -18.62510108947754

Token 140: ',' (ID: 11)
  Prédit: '(lambda'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '(lambda' → logprob: -0.007351516745984554
    2. '(int' → logprob: -5.132351398468018
    3. '(' → logprob: -7.382351398468018
    4. '(list' → logprob: -8.382351875305176
    5. 'list' → logprob: -8.882351875305176
    6. 'int' → logprob: -9.007351875305176
    7. ':' → logprob: -9.257351875305176
    8. '(input' → logprob: -9.632351875305176
    9. ' (' → logprob: -10.132351875305176
    10. 'lambda' → logprob: -10.257351875305176

Token 141: ' puis' (ID: 18766)
  Prédit: 'return'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'return' → logprob: -0.17257283627986908
    2. 'lambda' → logprob: -2.5475728511810303
    3. ' return' → logprob: -2.7975728511810303
    4. ' lambda' → logprob: -4.422572612762451
    5. 'list' → logprob: -5.547572612762451
    6. '   ' → logprob: -6.922572612762451
    7. '(lambda' → logprob: -7.672572612762451
    8. '    ' → logprob: -8.04757308959961
    9. 'def' → logprob: -8.17257308959961
    10. ' list' → logprob: -8.67257308959961

Token 142: ' double' (ID: 3503)
  Prédit: 'list'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'list' → logprob: -0.03906978666782379
    2. ' list' → logprob: -3.414069890975952
    3. 'lambda' → logprob: -6.039069652557373
    4. 'return' → logprob: -6.289069652557373
    5. ' return' → logprob: -8.414070129394531
    6. ' lambda' → logprob: -8.789070129394531
    7. 'filter' → logprob: -8.914070129394531
    8. 'input' → logprob: -9.039070129394531
    9. 'liste' → logprob: -9.039070129394531
    10. 'map' → logprob: -9.164070129394531

Token 143: ' appel' (ID: 34642)
  Prédit: 'map'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'map' → logprob: -0.18813419342041016
    2. 'list' → logprob: -2.06313419342041
    3. ' map' → logprob: -4.06313419342041
    4. 'filter' → logprob: -5.06313419342041
    5. '(map' → logprob: -5.56313419342041
    6. 'chain' → logprob: -5.68813419342041
    7. ' list' → logprob: -6.18813419342041
    8. 'zip' → logprob: -6.56313419342041
    9. 'underscore' → logprob: -6.68813419342041
    10. '_map' → logprob: -6.93813419342041

Token 144: ' pour' (ID: 1930)
  Prédit: 'map'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'map' → logprob: -0.4891776144504547
    2. 'return' → logprob: -1.7391775846481323
    3. 'input' → logprob: -2.614177703857422
    4. '   ' → logprob: -3.239177703857422
    5. 'def' → logprob: -3.739177703857422
    6. '(input' → logprob: -3.989177703857422
    7. '(lambda' → logprob: -4.489177703857422
    8. 'list' → logprob: -4.864177703857422
    9. '(map' → logprob: -4.864177703857422
    10. 'lambda' → logprob: -4.864177703857422

Token 145: ' l' (ID: 305)
  Prédit: 'list'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'list' → logprob: -0.09205499291419983
    2. ' list' → logprob: -2.467055082321167
    3. 'map' → logprob: -7.092054843902588
    4. 'input' → logprob: -7.217054843902588
    5. 'return' → logprob: -7.842054843902588
    6. 'int' → logprob: -8.467055320739746
    7. 'lambda' → logprob: -8.592055320739746
    8. ' input' → logprob: -8.967055320739746
    9. 'sorted' → logprob: -9.467055320739746
    10. 'liste' → logprob: -9.717055320739746

Token 146: ''effet' (ID: 197975)
  Prédit: 'input'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'input' → logprob: -0.2110072374343872
    2. 'ire' → logprob: -2.9610071182250977
    3. 'ambda' → logprob: -3.4610071182250977
    4. 'ist' → logprob: -3.5860071182250977
    5. ' input' → logprob: -3.7110071182250977
    6. 'ister' → logprob: -3.7110071182250977
    7. 'iste' → logprob: -5.336007118225098
    8. 'lambda' → logprob: -5.336007118225098
    9. 'is' → logprob: -5.586007118225098
    10. 'st' → logprob: -6.211007118225098

Token 147: ' inutile' (ID: 157748)
  Prédit: ' lambda'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' lambda' → logprob: -1.7416541576385498
    2. 'map' → logprob: -1.9916541576385498
    3. 'def' → logprob: -2.49165415763855
    4. ' input' → logprob: -2.49165415763855
    5. ' list' → logprob: -2.74165415763855
    6. ' return' → logprob: -2.74165415763855
    7. ' map' → logprob: -2.86665415763855
    8. 'lambda' → logprob: -2.86665415763855
    9. ' def' → logprob: -2.99165415763855
    10. 'return' → logprob: -3.11665415763855

Token 148: '
' (ID: 198)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.6141377687454224
    2. 'return' → logprob: -2.364137649536133
    3. ' return' → logprob: -2.364137649536133
    4. ':' → logprob: -2.614137649536133
    5. 'def' → logprob: -2.989137649536133
    6. '(lambda' → logprob: -2.989137649536133
    7. ' lambda' → logprob: -3.864137649536133
    8. 'lambda' → logprob: -4.114137649536133
    9. 'map' → logprob: -4.489137649536133
    10. '=lambda' → logprob: -4.989137649536133

Token 149: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.013860582374036312
    2. ' return' → logprob: -5.138860702514648
    3. ':' → logprob: -5.638860702514648
    4. 'def' → logprob: -6.138860702514648
    5. 'return' → logprob: -6.388860702514648
    6. ' def' → logprob: -8.638860702514648
    7. ':
' → logprob: -9.388860702514648
    8. ':return' → logprob: -9.763860702514648
    9. ' =' → logprob: -10.138860702514648
    10. ' ' → logprob: -10.638860702514648

Token 150: ' return' (ID: 622)
  Prédit: 'return'
  Correct (stricte): False
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'return' (adapté à ' return') → logprob: -0.03393024951219559
    2. ' return' → logprob: -3.6589303016662598
    3. '   ' → logprob: -4.90893030166626
    4. 'list' → logprob: -8.783929824829102
    5. '  ' → logprob: -10.908929824829102
    6. 'def' → logprob: -11.033929824829102
    7. ' ' → logprob: -11.283929824829102
    8. ' list' → logprob: -12.533929824829102
    9. 'lambda' → logprob: -12.658929824829102
    10. '	return' → logprob: -12.908929824829102

Token 151: ' list' (ID: 1562)
  Prédit: 'list'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'list' → logprob: -0.048622000962495804
    2. ' list' → logprob: -3.048621892929077
    3. 'map' → logprob: -10.548622131347656
    4. '(list' → logprob: -13.048622131347656
    5. 'tuple' → logprob: -13.048622131347656
    6. '[list' → logprob: -13.798622131347656
    7. ' map' → logprob: -14.298622131347656
    8. '[' → logprob: -14.798622131347656
    9. ' tuple' → logprob: -14.923622131347656
    10. ' ' → logprob: -15.298622131347656

Token 152: '(map' (ID: 16946)
  Prédit: '(map'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(map' → logprob: -2.4868770196917467e-05
    2. '(' → logprob: -10.625024795532227
    3. 'map' → logprob: -14.625024795532227
    4. ',map' → logprob: -18.500024795532227
    5. '(
' → logprob: -18.750024795532227
    6. '((' → logprob: -18.750024795532227
    7. '(int' → logprob: -18.875024795532227
    8. '	map' → logprob: -19.250024795532227
    9. '.map' → logprob: -19.500024795532227
    10. ' (' → logprob: -19.500024795532227

Token 153: '(int' (ID: 2742)
  Prédit: '(int'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(int' → logprob: -0.0011984437005594373
    2. 'int' → logprob: -6.8761982917785645
    3. '(lambda' → logprob: -9.001198768615723
    4. '(' → logprob: -10.376198768615723
    5. '(str' → logprob: -12.626198768615723
    6. ' int' → logprob: -13.001198768615723
    7. ' (' → logprob: -13.001198768615723
    8. 'lambda' → logprob: -14.001198768615723
    9. '   ' → logprob: -14.126198768615723
    10. 'str' → logprob: -15.001198768615723

Token 154: ',' (ID: 11)
  Prédit: ','
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ',' → logprob: -0.04510603845119476
    2. ',input' → logprob: -3.4201059341430664
    3. '(input' → logprob: -4.920105934143066
    4. ',(' → logprob: -5.670105934143066
    5. 'input' → logprob: -8.045105934143066
    6. '(lambda' → logprob: -8.545105934143066
    7. ' ,' → logprob: -9.795105934143066
    8. ' (' → logprob: -10.045105934143066
    9. 'lambda' → logprob: -11.420105934143066
    10. '((' → logprob: -11.670105934143066

Token 155: ' list' (ID: 1562)
  Prédit: '(lambda'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '(lambda' → logprob: -0.8054084777832031
    2. '(input' → logprob: -1.4304084777832031
    3. ' (' → logprob: -2.055408477783203
    4. 'input' → logprob: -2.305408477783203
    5. 'lambda' → logprob: -2.680408477783203
    6. ' input' → logprob: -4.805408477783203
    7. 'list' → logprob: -5.805408477783203
    8. ' lambda' → logprob: -6.055408477783203
    9. 'filter' → logprob: -6.930408477783203
    10. ' ' → logprob: -7.180408477783203

Token 156: '(map' (ID: 16946)
  Prédit: '(input'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(input' → logprob: -0.05064867064356804
    2. '(lambda' → logprob: -3.4256486892700195
    3. '((' → logprob: -4.6756486892700195
    4. '(map' → logprob: -5.0506486892700195
    5. 'input' → logprob: -7.3006486892700195
    6. '(' → logprob: -8.67564868927002
    7. '(str' → logprob: -8.92564868927002
    8. 'lambda' → logprob: -9.55064868927002
    9. 'map' → logprob: -9.92564868927002
    10. '(filter' → logprob: -10.92564868927002

Token 157: '(str' (ID: 7946)
  Prédit: '(str'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(str' → logprob: -0.6664021611213684
    2. '(int' → logprob: -1.4164021015167236
    3. '(lambda' → logprob: -1.4164021015167236
    4. '(input' → logprob: -7.291402339935303
    5. 'str' → logprob: -8.416401863098145
    6. '(ord' → logprob: -8.916401863098145
    7. 'lambda' → logprob: -9.041401863098145
    8. '(chr' → logprob: -9.916401863098145
    9. 'int' → logprob: -10.041401863098145
    10. '((' → logprob: -11.791401863098145

Token 158: ',' (ID: 11)
  Prédit: ',input'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ',input' → logprob: -0.033915963023900986
    2. ',' → logprob: -3.6589159965515137
    3. ',int' → logprob: -4.908915996551514
    4. 'input' → logprob: -9.158915519714355
    5. ',str' → logprob: -10.658915519714355
    6. '(input' → logprob: -10.658915519714355
    7. ',(' → logprob: -10.783915519714355
    8. '.strip' → logprob: -11.283915519714355
    9. '(int' → logprob: -11.783915519714355
    10. ' ,' → logprob: -12.408915519714355

Token 159: ' input' (ID: 3422)
  Prédit: 'input'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'input' → logprob: -0.09713447093963623
    2. '(input' → logprob: -3.597134590148926
    3. ' input' → logprob: -3.597134590148926
    4. '(lambda' → logprob: -4.097134590148926
    5. 'lambda' → logprob: -4.097134590148926
    6. '   ' → logprob: -6.347134590148926
    7. ' (' → logprob: -6.472134590148926
    8. ' lambda' → logprob: -8.222134590148926
    9. ' ' → logprob: -8.472134590148926
    10. '  ' → logprob: -8.847134590148926

Token 160: '().' (ID: 1454)
  Prédit: '().'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '().' → logprob: -0.01059297937899828
    2. '()))' → logprob: -4.885592937469482
    3. '()' → logprob: -6.010592937469482
    4. '())))' → logprob: -7.885592937469482
    5. '))))' → logprob: -8.88559341430664
    6. '())' → logprob: -11.63559341430664
    7. '()
' → logprob: -13.26059341430664
    8. '))' → logprob: -13.38559341430664
    9. ')))' → logprob: -14.01059341430664
    10. '.' → logprob: -14.63559341430664

Token 161: 'split' (ID: 13627)
  Prédit: 'split'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'split' → logprob: -0.0019393461989238858
    2. 'strip' → logprob: -6.251939296722412
    3. ' split' → logprob: -11.50193977355957
    4. 'rstrip' → logprob: -15.62693977355957
    5. '(split' → logprob: -16.37693977355957
    6. '().' → logprob: -16.37693977355957
    7. ' strip' → logprob: -16.75193977355957
    8. 'spl' → logprob: -16.87693977355957
    9. ' ' → logprob: -17.75193977355957
    10. ')' → logprob: -18.25193977355957

Token 162: '()))' (ID: 16829)
  Prédit: '()))'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '()))' → logprob: -0.029008952900767326
    2. '()' → logprob: -3.7790088653564453
    3. '())))' → logprob: -5.404008865356445
    4. '))))' → logprob: -6.904008865356445
    5. '())' → logprob: -8.404008865356445
    6. '(' → logprob: -12.404008865356445
    7. '().' → logprob: -12.529008865356445
    8. '))' → logprob: -13.029008865356445
    9. '())))
' → logprob: -13.529008865356445
    10. '()));' → logprob: -13.529008865356445

Token 163: '))

' (ID: 9746)
  Prédit: ')))'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ')))' → logprob: -0.4745984971523285
    2. '))' → logprob: -0.9745985269546509
    3. '()))' → logprob: -7.974598407745361
    4. '))))' → logprob: -8.97459888458252
    5. '())))' → logprob: -10.47459888458252
    6. ')' → logprob: -11.22459888458252
    7. '()' → logprob: -12.09959888458252
    8. '))
' → logprob: -14.34959888458252
    9. ')))
' → logprob: -14.34959888458252
    10. '   ' → logprob: -14.34959888458252

Token 164: 'def' (ID: 1314)
  Prédit: 'def'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'def' → logprob: -0.20203612744808197
    2. ')' → logprob: -1.7020361423492432
    3. '
' → logprob: -7.827035903930664
    4. '#' → logprob: -8.952035903930664
    5. ' def' → logprob: -11.202035903930664
    6. '<|end|>' → logprob: -11.327035903930664
    7. '\n' → logprob: -11.452035903930664
    8. '  
' → logprob: -11.702035903930664
    9. '

' → logprob: -12.202035903930664
    10. '```' → logprob: -12.327035903930664

Token 165: ' in' (ID: 306)
  Prédit: ' in'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' in' → logprob: -0.6523585319519043
    2. 'in' → logprob: -1.7773585319519043
    3. ' main' → logprob: -2.1523585319519043
    4. ' ins' → logprob: -3.2773585319519043
    5. ' inp' → logprob: -3.2773585319519043
    6. 'ins' → logprob: -3.7773585319519043
    7. ' solve' → logprob: -3.7773585319519043
    8. ' input' → logprob: -4.027358531951904
    9. ' out' → logprob: -4.527358531951904
    10. 'main' → logprob: -5.277358531951904

Token 166: 'pls' (ID: 118628)
  Prédit: 't'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 't' → logprob: -0.018171953037381172
    2. 'p' → logprob: -4.143171787261963
    3. 'put' → logprob: -6.893171787261963
    4. '():
' → logprob: -7.518171787261963
    5. 'i' → logprob: -7.768171787261963
    6. 'pi' → logprob: -10.268172264099121
    7. 'q' → logprob: -10.643172264099121
    8. 'n' → logprob: -11.143172264099121
    9. '()' → logprob: -11.143172264099121
    10. 'g' → logprob: -11.393172264099121

Token 167: '():
' (ID: 8595)
  Prédit: '():'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '():' → logprob: -0.007105701137334108
    2. '():
' → logprob: -5.132105827331543
    3. '()' → logprob: -6.757105827331543
    4. ' ():' → logprob: -12.007105827331543
    5. '):' → logprob: -12.257105827331543
    6. '():

' → logprob: -13.882105827331543
    7. '():
' → logprob: -14.382105827331543
    8. ':' → logprob: -14.632105827331543
    9. 'def' → logprob: -14.882105827331543
    10. ' ()' → logprob: -15.257105827331543

Token 168: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.3511611521244049
    2. 'return' → logprob: -1.2261611223220825
    3. ' return' → logprob: -6.101161003112793
    4. 'input' → logprob: -8.601161003112793
    5. 'def' → logprob: -9.726161003112793
    6. '()' → logprob: -9.851161003112793
    7. 'list' → logprob: -10.101161003112793
    8. 'str' → logprob: -10.101161003112793
    9. 'lambda' → logprob: -10.601161003112793
    10. 'string' → logprob: -10.976161003112793

Token 169: ' #' (ID: 1069)
  Prédit: 'return'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'return' → logprob: -0.4791646897792816
    2. '   ' → logprob: -0.979164719581604
    3. ' return' → logprob: -6.3541646003723145
    4. 'input' → logprob: -6.3541646003723145
    5. 'lambda' → logprob: -6.9791646003723145
    6. 'list' → logprob: -8.104165077209473
    7. 'str' → logprob: -8.479165077209473
    8. 'def' → logprob: -9.604165077209473
    9. 'string' → logprob: -10.854165077209473
    10. '()' → logprob: -11.229165077209473

Token 170: ' Use' (ID: 7649)
  Prédit: 'return'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'return' → logprob: -0.014348593540489674
    2. 'def' → logprob: -4.88934850692749
    3. ' return' → logprob: -5.13934850692749
    4. '   ' → logprob: -8.014348983764648
    5. 'list' → logprob: -9.014348983764648
    6. '
' → logprob: -9.139348983764648
    7. 'lambda' → logprob: -9.139348983764648
    8. '#' → logprob: -9.514348983764648
    9. 'str' → logprob: -9.514348983764648
    10. 's' → logprob: -11.389348983764648

Token 171: ' st' (ID: 420)
  Prédit: 'input'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'input' → logprob: -0.5488219261169434
    2. 'list' → logprob: -1.7988219261169434
    3. 'lambda' → logprob: -2.2988219261169434
    4. 'r' → logprob: -3.2988219261169434
    5. 't' → logprob: -3.9238219261169434
    6. 'return' → logprob: -4.048821926116943
    7. 'tr' → logprob: -4.173821926116943
    8. 'map' → logprob: -4.298821926116943
    9. '=input' → logprob: -4.548821926116943
    10. 'str' → logprob: -4.923821926116943

Token 172: 'arm' (ID: 2218)
  Prédit: 'r'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'r' → logprob: -0.007886854000389576
    2. 'ring' → logprob: -5.50788688659668
    3. 'rip' → logprob: -5.63288688659668
    4. 'rin' → logprob: -8.88288688659668
    5. 'rings' → logprob: -9.63288688659668
    6. 'rid' → logprob: -12.88288688659668
    7. 'd' → logprob: -13.00788688659668
    8. 'rain' → logprob: -13.13288688659668
    9. 'rib' → logprob: -13.50788688659668
    10. 'rstrip' → logprob: -13.88288688659668

Token 173: 'ap' (ID: 403)
  Prédit: 'ap'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'ap' → logprob: -1.9361264946837764e-07
    2. 'ep' → logprob: -16.875
    3. 'ip' → logprob: -17.25
    4. 'p' → logprob: -18.5
    5. '(ap' → logprob: -18.5
    6. '_ap' → logprob: -18.625
    7. 'ethod' → logprob: -18.75
    8. 'aps' → logprob: -19.0
    9. 'apping' → logprob: -19.125
    10. 'e' → logprob: -20.0

Token 174: ' (' (ID: 350)
  Prédit: '(lambda'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '(lambda' → logprob: -0.4052276611328125
    2. 'def' → logprob: -1.7802276611328125
    3. 'from' → logprob: -2.6552276611328125
    4. '   ' → logprob: -2.9052276611328125
    5. 'import' → logprob: -4.0302276611328125
    6. '(chain' → logprob: -5.1552276611328125
    7. '(str' → logprob: -5.6552276611328125
    8. '(def' → logprob: -6.0302276611328125
    9. '(int' → logprob: -6.1552276611328125
    10. '(it' → logprob: -6.6552276611328125

Token 175: 'it' (ID: 278)
  Prédit: 'lambda'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'lambda' → logprob: -0.8682363033294678
    2. 'operator' → logprob: -1.3682363033294678
    3. 'str' → logprob: -1.9932363033294678
    4. 'it' → logprob: -2.1182363033294678
    5. ')' → logprob: -3.3682363033294678
    6. 'string' → logprob: -4.493236541748047
    7. 'from' → logprob: -5.118236541748047
    8. '(lambda' → logprob: -5.243236541748047
    9. 'import' → logprob: -6.243236541748047
    10. 'input' → logprob: -6.368236541748047

Token 176: 'ertools' (ID: 88385)
  Prédit: 'ertools'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'ertools' → logprob: -0.02661016955971718
    2. 'er' → logprob: -3.7766101360321045
    3. 'ar' → logprob: -6.776610374450684
    4. 'ools' → logprob: -7.026610374450684
    5. 'import' → logprob: -7.276610374450684
    6. 'arm' → logprob: -8.026610374450684
    7. 'ert' → logprob: -9.151610374450684
    8. 'erm' → logprob: -9.901610374450684
    9. 'ool' → logprob: -10.401610374450684
    10. 'ol' → logprob: -10.776610374450684

Token 177: ')' (ID: 8)
  Prédit: ','
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ',' → logprob: -0.2685513198375702
    2. 'from' → logprob: -2.0185513496398926
    3. 'import' → logprob: -3.0185513496398926
    4. 'def' → logprob: -3.1435513496398926
    5. ')' → logprob: -5.518551349639893
    6. '(lambda' → logprob: -6.268551349639893
    7. ',map' → logprob: -6.768551349639893
    8. ' from' → logprob: -6.893551349639893
    9. ' ,' → logprob: -7.268551349639893
    10. '(it' → logprob: -8.018550872802734

Token 178: ' à' (ID: 1221)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.10523320734500885
    2. 'def' → logprob: -2.4802331924438477
    3. 'return' → logprob: -4.605233192443848
    4. '(' → logprob: -5.980233192443848
    5. ' return' → logprob: -6.105233192443848
    6. ' def' → logprob: -8.230233192443848
    7. 'from' → logprob: -8.355233192443848
    8. 'import' → logprob: -8.355233192443848
    9. '
' → logprob: -8.730233192443848
    10. '(
' → logprob: -8.730233192443848

Token 179: ' la' (ID: 557)
  Prédit: 'input'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'input' → logprob: -0.8376891016960144
    2. 'lambda' → logprob: -0.8376891016960144
    3. 'string' → logprob: -2.837689161300659
    4. 'str' → logprob: -3.212689161300659
    5. ' lambda' → logprob: -4.46268892288208
    6. '(lambda' → logprob: -4.83768892288208
    7. 'tring' → logprob: -5.71268892288208
    8. ' input' → logprob: -6.08768892288208
    9. 'list' → logprob: -6.46268892288208
    10. 'chain' → logprob: -6.83768892288208

Token 180: ' place' (ID: 2475)
  Prédit: 'chaine'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'chaine' → logprob: -0.5338008403778076
    2. 'fois' → logprob: -1.5338008403778076
    3. 'per' → logprob: -3.2838008403778076
    4. 'string' → logprob: -3.2838008403778076
    5. 'vol' → logprob: -3.5338008403778076
    6. 'ligne' → logprob: -4.283801078796387
    7. 'next' → logprob: -4.408801078796387
    8. 'chain' → logprob: -4.658801078796387
    9. 'place' → logprob: -5.033801078796387
    10. 'minute' → logprob: -5.158801078796387

Token 181: ' d' (ID: 272)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.12522608041763306
    2. 'def' → logprob: -2.2502260208129883
    3. 'return' → logprob: -5.375226020812988
    4. ' return' → logprob: -5.625226020812988
    5. 'import' → logprob: -6.375226020812988
    6. '(' → logprob: -7.125226020812988
    7. ' def' → logprob: -7.375226020812988
    8. '
' → logprob: -7.875226020812988
    9. 'from' → logprob: -8.750226020812988
    10. '```' → logprob: -9.125226020812988

Token 182: ''un' (ID: 9788)
  Prédit: 'input'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'input' → logprob: -0.8331465721130371
    2. '('' → logprob: -1.583146572113037
    3. 'string' → logprob: -2.208146572113037
    4. 'it' → logprob: -2.458146572113037
    5. ' input' → logprob: -3.458146572113037
    6. ''' → logprob: -3.833146572113037
    7. 'map' → logprob: -4.208146572113037
    8. 'lambda' → logprob: -4.708146572113037
    9. 'chain' → logprob: -4.833146572113037
    10. 'st' → logprob: -4.833146572113037

Token 183: ' simple' (ID: 4705)
  Prédit: 'chain'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'chain' → logprob: -0.4177910089492798
    2. 'map' → logprob: -1.2927910089492798
    3. 'lambda' → logprob: -3.2927908897399902
    4. 'join' → logprob: -4.16779088973999
    5. 'filter' → logprob: -5.54279088973999
    6. 'split' → logprob: -6.16779088973999
    7. ' chain' → logprob: -6.16779088973999
    8. 'st' → logprob: -6.29279088973999
    9. 'input' → logprob: -7.16779088973999
    10. 'for' → logprob: -7.29279088973999

Token 184: ' split' (ID: 12648)
  Prédit: 'map'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'map' → logprob: -0.07487184554338455
    2. 'join' → logprob: -2.949871778488159
    3. 'input' → logprob: -4.949872016906738
    4. 'print' → logprob: -5.699872016906738
    5. 'zip' → logprob: -5.699872016906738
    6. 'chain' → logprob: -6.074872016906738
    7. 'split' → logprob: -6.949872016906738
    8. 'strip' → logprob: -7.074872016906738
    9. 'for' → logprob: -7.574872016906738
    10. 'st' → logprob: -8.449872016906738

Token 185: '
' (ID: 198)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.09004134684801102
    2. '():' → logprob: -3.090041399002075
    3. '():
' → logprob: -3.590041399002075
    4. ':' → logprob: -4.965041160583496
    5. 'return' → logprob: -6.215041160583496
    6. ' return' → logprob: -6.715041160583496
    7. '()' → logprob: -6.965041160583496
    8. ':
' → logprob: -7.215041160583496
    9. 'def' → logprob: -7.965041160583496
    10. '()
' → logprob: -8.715041160583496

Token 186: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.0019174530170857906
    2. 'return' → logprob: -6.876917362213135
    3. 'def' → logprob: -7.626917362213135
    4. ' return' → logprob: -7.876917362213135
    5. '    
' → logprob: -12.626917839050293
    6. '
' → logprob: -12.626917839050293
    7. '	return' → logprob: -12.876917839050293
    8. '```' → logprob: -13.001917839050293
    9. '()' → logprob: -13.626917839050293
    10. '(' → logprob: -13.876917839050293

Token 187: ' return' (ID: 622)
  Prédit: 'return'
  Correct (stricte): False
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'return' (adapté à ' return') → logprob: -0.5814627408981323
    2. '   ' → logprob: -1.0814627408981323
    3. ' return' → logprob: -2.331462860107422
    4. 'def' → logprob: -5.456462860107422
    5. 'import' → logprob: -9.331462860107422
    6. 'from' → logprob: -9.331462860107422
    7. 's' → logprob: -9.956462860107422
    8. ' def' → logprob: -10.081462860107422
    9. ' ' → logprob: -10.581462860107422
    10. '
' → logprob: -11.081462860107422

Token 188: ' list' (ID: 1562)
  Prédit: 'list'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'list' → logprob: -0.0012159519828855991
    2. ' list' → logprob: -6.751215934753418
    3. ''' → logprob: -11.126215934753418
    4. '''.' → logprob: -11.626215934753418
    5. 'next' → logprob: -12.251215934753418
    6. '"' → logprob: -12.251215934753418
    7. 'tuple' → logprob: -12.251215934753418
    8. 'it' → logprob: -13.126215934753418
    9. 'input' → logprob: -13.751215934753418
    10. 'dict' → logprob: -14.001215934753418

Token 189: '(it' (ID: 29445)
  Prédit: '(it'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(it' → logprob: -0.07160316407680511
    2. '(map' → logprob: -2.6966030597686768
    3. '(chain' → logprob: -7.196603298187256
    4. '(string' → logprob: -7.571603298187256
    5. '(iter' → logprob: -8.696602821350098
    6. 'it' → logprob: -9.946602821350098
    7. '(filter' → logprob: -10.071602821350098
    8. '(' → logprob: -10.321602821350098
    9. 'map' → logprob: -10.571602821350098
    10. '(st' → logprob: -10.571602821350098

Token 190: 'ertools' (ID: 88385)
  Prédit: 'ertools'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'ertools' → logprob: -0.03401275351643562
    2. 'it' → logprob: -4.534012794494629
    3. 'import' → logprob: -4.784012794494629
    4. 'er' → logprob: -5.034012794494629
    5. '(it' → logprob: -5.534012794494629
    6. 'from' → logprob: -6.534012794494629
    7. 'ert' → logprob: -6.534012794494629
    8. 'per' → logprob: -8.784012794494629
    9. 'erm' → logprob: -8.784012794494629
    10. 'st' → logprob: -9.284012794494629

Token 191: '.st' (ID: 1980)
  Prédit: '.st'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '.st' → logprob: -0.0013315484393388033
    2. '.chain' → logprob: -6.626331329345703
    3. 'st' → logprob: -13.501331329345703
    4. '	st' → logprob: -14.001331329345703
    5. '.star' → logprob: -14.126331329345703
    6. '.' → logprob: -14.126331329345703
    7. ' .' → logprob: -14.251331329345703
    8. '_st' → logprob: -14.376331329345703
    9. '(st' → logprob: -15.251331329345703
    10. '.acc' → logprob: -15.501331329345703

Token 192: 'arm' (ID: 2218)
  Prédit: 'arm'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'arm' → logprob: -2.963691804325208e-05
    2. 'ar' → logprob: -10.625029563903809
    3. '.chain' → logprob: -13.000029563903809
    4. 'arp' → logprob: -14.250029563903809
    5. 'erm' → logprob: -14.750029563903809
    6. 'arms' → logprob: -15.000029563903809
    7. 'ap' → logprob: -15.125029563903809
    8. 'ertools' → logprob: -15.125029563903809
    9. 'ars' → logprob: -15.500029563903809
    10. 'am' → logprob: -15.750029563903809

Token 193: 'ap' (ID: 403)
  Prédit: 'ap'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'ap' → logprob: -0.00027063372544944286
    2. 'map' → logprob: -8.50027084350586
    3. 'arm' → logprob: -9.62527084350586
    4. 'app' → logprob: -14.75027084350586
    5. '(map' → logprob: -15.25027084350586
    6. 'product' → logprob: -15.50027084350586
    7. '(ap' → logprob: -17.00027084350586
    8. 'prod' → logprob: -17.75027084350586
    9. 'apply' → logprob: -17.87527084350586
    10. 'ax' → logprob: -17.87527084350586

Token 194: '(str' (ID: 7946)
  Prédit: '(int'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(int' → logprob: -0.37367329001426697
    2. '(str' → logprob: -1.9986733198165894
    3. 'int' → logprob: -2.4986732006073
    4. 'str' → logprob: -2.4986732006073
    5. '(lambda' → logprob: -4.873673439025879
    6. 'lambda' → logprob: -5.748673439025879
    7. '[int' → logprob: -7.498673439025879
    8. '   ' → logprob: -9.498673439025879
    9. 'operator' → logprob: -9.623673439025879
    10. '(chr' → logprob: -9.623673439025879

Token 195: ',' (ID: 11)
  Prédit: ','
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ',' → logprob: -0.3567516505718231
    2. ',str' → logprob: -1.4817516803741455
    3. '.split' → logprob: -3.4817516803741455
    4. '.strip' → logprob: -3.7317516803741455
    5. '.__' → logprob: -4.981751441955566
    6. '.join' → logprob: -5.606751441955566
    7. ',input' → logprob: -5.856751441955566
    8. 'str' → logprob: -6.856751441955566
    9. 'chr' → logprob: -7.106751441955566
    10. '.str' → logprob: -7.606751441955566

Token 196: ' enumerate' (ID: 29671)
  Prédit: 'input'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'input' → logprob: -0.6426518559455872
    2. 'lambda' → logprob: -0.8926518559455872
    3. 'zip' → logprob: -3.1426517963409424
    4. '[input' → logprob: -4.8926520347595215
    5. ' input' → logprob: -5.8926520347595215
    6. ' lambda' → logprob: -5.8926520347595215
    7. '   ' → logprob: -6.0176520347595215
    8. 'it' → logprob: -6.7676520347595215
    9. '(lambda' → logprob: -6.7676520347595215
    10. ' ' → logprob: -7.2676520347595215

Token 197: '(input' (ID: 10054)
  Prédit: '(input'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(input' → logprob: -0.00044795009307563305
    2. ',input' → logprob: -8.375448226928711
    3. 'input' → logprob: -8.875448226928711
    4. '((' → logprob: -10.250448226928711
    5. '))' → logprob: -11.375448226928711
    6. ',' → logprob: -11.750448226928711
    7. '(list' → logprob: -11.750448226928711
    8. '(' → logprob: -12.750448226928711
    9. ')(' → logprob: -12.875448226928711
    10. '(lambda' → logprob: -13.500448226928711

Token 198: '().' (ID: 1454)
  Prédit: '())))'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '())))' → logprob: -0.06339266151189804
    2. '()' → logprob: -2.9383926391601562
    3. '()))' → logprob: -5.688392639160156
    4. '().' → logprob: -5.688392639160156
    5. ')))' → logprob: -6.938392639160156
    6. '())))
' → logprob: -8.188392639160156
    7. '(),' → logprob: -8.313392639160156
    8. '())' → logprob: -8.938392639160156
    9. '(' → logprob: -11.188392639160156
    10. '()[' → logprob: -11.188392639160156

Token 199: 'split' (ID: 13627)
  Prédit: 'split'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'split' → logprob: -0.10056065022945404
    2. 'strip' → logprob: -2.3505606651306152
    3. 'rstrip' → logprob: -8.350560188293457
    4. '()))' → logprob: -9.725560188293457
    5. '))' → logprob: -10.350560188293457
    6. ')))' → logprob: -11.350560188293457
    7. '())))' → logprob: -12.350560188293457
    8. 'replace' → logprob: -13.100560188293457
    9. 'read' → logprob: -13.225560188293457
    10. '()' → logprob: -13.600560188293457

Token 200: '())))' (ID: 168342)
  Prédit: '())))'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '())))' → logprob: -0.0422954186797142
    2. '(),' → logprob: -3.667295455932617
    3. '()' → logprob: -4.542295455932617
    4. '()))' → logprob: -5.792295455932617
    5. ')))' → logprob: -6.542295455932617
    6. '())))
' → logprob: -7.667295455932617
    7. '())' → logprob: -9.042295455932617
    8. '(' → logprob: -9.292295455932617
    9. ',' → logprob: -11.417295455932617
    10. ' (' → logprob: -11.667295455932617

Token 201: ' and' (ID: 326)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ')' → logprob: -0.6761080026626587
    2. '(' → logprob: -0.9261080026626587
    3. '()' → logprob: -3.301107883453369
    4. 'def' → logprob: -4.051107883453369
    5. '<|end|>' → logprob: -4.301107883453369
    6. '(
' → logprob: -4.426107883453369
    7. '())' → logprob: -5.051107883453369
    8. '
' → logprob: -5.176107883453369
    9. '[' → logprob: -7.176107883453369
    10. '#' → logprob: -8.051108360290527

Token 202: ' input' (ID: 3422)
  Prédit: 'input'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'input' → logprob: -0.01542732398957014
    2. 'list' → logprob: -4.265427112579346
    3. ' input' → logprob: -7.640427112579346
    4. '[input' → logprob: -7.765427112579346
    5. '[]' → logprob: -8.640427589416504
    6. '(input' → logprob: -9.265427589416504
    7. '[' → logprob: -10.640427589416504
    8. ' list' → logprob: -11.515427589416504
    9. 'None' → logprob: -11.640427589416504
    10. '[]
' → logprob: -11.765427589416504

Token 203: '().' (ID: 1454)
  Prédit: '()'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '()' → logprob: -0.16023924946784973
    2. '().' → logprob: -1.9102392196655273
    3. '())' → logprob: -11.785239219665527
    4. '()
' → logprob: -12.660239219665527
    5. ' ()' → logprob: -13.035239219665527
    6. '()`' → logprob: -14.785239219665527
    7. '.split' → logprob: -15.410239219665527
    8. '()[' → logprob: -15.535239219665527
    9. '()"' → logprob: -16.035240173339844
    10. '()\' → logprob: -16.035240173339844

Token 204: 'split' (ID: 13627)
  Prédit: 'split'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'split' → logprob: -0.033675666898489
    2. 'strip' → logprob: -3.4086756706237793
    3. 'rstrip' → logprob: -10.658675193786621
    4. ' split' → logprob: -13.033675193786621
    5. 'spl' → logprob: -13.408675193786621
    6. '```' → logprob: -14.033675193786621
    7. 'replace' → logprob: -14.283675193786621
    8. '.split' → logprob: -15.408675193786621
    9. 'startswith' → logprob: -15.533675193786621
    10. 'plit' → logprob: -15.533675193786621

Token 205: '()

' (ID: 5874)
  Prédit: '()'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '()' → logprob: -6.968934758333489e-05
    2. '()[' → logprob: -10.625069618225098
    3. '())' → logprob: -10.625069618225098
    4. '()
' → logprob: -11.125069618225098
    5. '()]' → logprob: -12.875069618225098
    6. '(' → logprob: -13.750069618225098
    7. ' ()' → logprob: -13.875069618225098
    8. '()

' → logprob: -14.625069618225098
    9. ')' → logprob: -14.875069618225098
    10. '()`' → logprob: -15.000069618225098

Token 206: 'def' (ID: 1314)
  Prédit: '()'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '()' → logprob: -0.011290543712675571
    2. '<|end|>' → logprob: -4.636290550231934
    3. '(' → logprob: -7.511290550231934
    4. '()
' → logprob: -7.886290550231934
    5. '()[' → logprob: -8.261290550231934
    6. '())' → logprob: -9.261290550231934
    7. ')' → logprob: -9.636290550231934
    8. '
' → logprob: -10.386290550231934
    9. '<|end|>' → logprob: -10.386290550231934
    10. '[' → logprob: -10.636290550231934

Token 207: ' in' (ID: 306)
  Prédit: 'in'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'in' → logprob: -0.9565266370773315
    2. ' main' → logprob: -1.4565266370773315
    3. ' in' → logprob: -1.8315266370773315
    4. 'main' → logprob: -2.706526756286621
    5. ' inp' → logprob: -2.956526756286621
    6. 'inp' → logprob: -3.206526756286621
    7. ' input' → logprob: -4.206526756286621
    8. 'input' → logprob: -4.331526756286621
    9. 'ins' → logprob: -4.831526756286621
    10. ' solve' → logprob: -4.831526756286621

Token 208: 'pl' (ID: 528)
  Prédit: 'p'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'p' → logprob: -0.07820718735456467
    2. 'put' → logprob: -2.70320725440979
    3. 'pl' → logprob: -5.078207015991211
    4. 'puts' → logprob: -7.453207015991211
    5. 'pt' → logprob: -7.578207015991211
    6. 'pm' → logprob: -7.703207015991211
    7. 't' → logprob: -9.578207015991211
    8. 'ps' → logprob: -9.703207015991211
    9. 'pls' → logprob: -9.703207015991211
    10. '()' → logprob: -9.828207015991211

Token 209: 'm' (ID: 76)
  Prédit: '():'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '():' → logprob: -0.03509192541241646
    2. '()' → logprob: -3.6600918769836426
    3. '():
' → logprob: -4.785091876983643
    4. 's' → logprob: -8.1600923538208
    5. 'ist' → logprob: -10.5350923538208
    6. '():

' → logprob: -10.5350923538208
    7. '():
' → logprob: -10.6600923538208
    8. 'n' → logprob: -11.5350923538208
    9. 'st' → logprob: -12.0350923538208
    10. '();' → logprob: -12.1600923538208

Token 210: '(n' (ID: 2406)
  Prédit: '():'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '():' → logprob: -0.0381246842443943
    2. '():
' → logprob: -3.2881247997283936
    3. '()' → logprob: -9.788125038146973
    4. ' ():' → logprob: -10.913125038146973
    5. '():

' → logprob: -12.413125038146973
    6. '():
' → logprob: -13.288125038146973
    7. 'b' → logprob: -14.288125038146973
    8. ':' → logprob: -14.413125038146973
    9. 's' → logprob: -14.788125038146973
    10. 'a' → logprob: -14.788125038146973

Token 211: '):
' (ID: 1883)
  Prédit: '):'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '):' → logprob: -0.0038504323456436396
    2. '):
' → logprob: -5.87885046005249
    3. ')' → logprob: -6.87885046005249
    4. ',' → logprob: -12.378849983215332
    5. ':' → logprob: -12.753849983215332
    6. '(n' → logprob: -13.503849983215332
    7. '):

' → logprob: -13.753849983215332
    8. 'u' → logprob: -13.753849983215332
    9. '=' → logprob: -14.003849983215332
    10. ' ):' → logprob: -14.128849983215332

Token 212: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.0005974736995995045
    2. 'return' → logprob: -8.00059700012207
    3. ' return' → logprob: -8.75059700012207
    4. '(n' → logprob: -10.75059700012207
    5. 'def' → logprob: -11.00059700012207
    6. '	return' → logprob: -11.00059700012207
    7. ':' → logprob: -11.62559700012207
    8. 'n' → logprob: -12.12559700012207
    9. '(' → logprob: -12.50059700012207
    10. ':
' → logprob: -12.75059700012207

Token 213: ' #' (ID: 1069)
  Prédit: 'return'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'return' → logprob: -0.6035774946212769
    2. '   ' → logprob: -0.8535774946212769
    3. ' return' → logprob: -3.6035776138305664
    4. '	return' → logprob: -10.353577613830566
    5. '[' → logprob: -15.353577613830566
    6. '
' → logprob: -15.353577613830566
    7. ' ' → logprob: -15.478577613830566
    8. '  ' → logprob: -15.478577613830566
    9. 'for' → logprob: -15.728577613830566
    10. '   ' → logprob: -15.728577613830566

Token 214: ' Construction' (ID: 31452)
  Prédit: 'return'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'return' → logprob: -0.002037964528426528
    2. ' return' → logprob: -6.37703800201416
    3. '   ' → logprob: -8.62703800201416
    4. 'def' → logprob: -9.37703800201416
    5. 'res' → logprob: -10.00203800201416
    6. 'for' → logprob: -11.62703800201416
    7. 'result' → logprob: -11.75203800201416
    8. 'lst' → logprob: -12.12703800201416
    9. 'lines' → logprob: -13.87703800201416
    10. '#' → logprob: -14.50203800201416

Token 215: ' par' (ID: 686)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.887156069278717
    2. 'def' → logprob: -1.0121560096740723
    3. '(n' → logprob: -2.5121560096740723
    4. '(' → logprob: -2.7621560096740723
    5. '(
' → logprob: -3.2621560096740723
    6. ' des' → logprob: -5.012156009674072
    7. ' (' → logprob: -5.012156009674072
    8. ' def' → logprob: -5.387156009674072
    9. ' of' → logprob: -5.387156009674072
    10. ' de' → logprob: -5.887156009674072

Token 216: ' accumulation' (ID: 70787)
  Prédit: '['
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '[' → logprob: -0.47039175033569336
    2. '[n' → logprob: -1.9703917503356934
    3. '[int' → logprob: -2.5953917503356934
    4. '[i' → logprob: -3.0953917503356934
    5. 'return' → logprob: -3.2203917503356934
    6. '[l' → logprob: -4.720391750335693
    7. ' [' → logprob: -4.845391750335693
    8. 'def' → logprob: -4.970391750335693
    9. '[]' → logprob: -5.095391750335693
    10. '[line' → logprob: -5.095391750335693

Token 217: ' pendant' (ID: 22611)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.00828559324145317
    2. 'def' → logprob: -5.5082855224609375
    3. 'lst' → logprob: -6.6332855224609375
    4. 'result' → logprob: -7.3832855224609375
    5. '(lst' → logprob: -7.7582855224609375
    6. ' lst' → logprob: -7.8832855224609375
    7. 'res' → logprob: -8.383285522460938
    8. 'arr' → logprob: -9.008285522460938
    9. ' def' → logprob: -9.008285522460938
    10. '(l' → logprob: -9.383285522460938

Token 218: ' la' (ID: 557)
  Prédit: '_'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '_' → logprob: -0.489035427570343
    2. 'n' → logprob: -1.8640353679656982
    3. 'def' → logprob: -2.1140353679656982
    4. '
' → logprob: -3.6140353679656982
    5. 'l' → logprob: -3.9890353679656982
    6. 'lines' → logprob: -4.114035606384277
    7. ' n' → logprob: -4.739035606384277
    8. '_
' → logprob: -5.489035606384277
    9. 'le' → logprob: -5.739035606384277
    10. 'range' → logprob: -5.989035606384277

Token 219: ' lecture' (ID: 31993)
  Prédit: 'lecture'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'lecture' → logprob: -0.16433708369731903
    2. 'for' → logprob: -3.414337158203125
    3. ' lecture' → logprob: -3.414337158203125
    4. 's' → logprob: -4.164337158203125
    5. 'bou' → logprob: -4.164337158203125
    6. 'range' → logprob: -4.414337158203125
    7. 'r' → logprob: -5.039337158203125
    8. 'l' → logprob: -5.289337158203125
    9. ' boucle' → logprob: -5.289337158203125
    10. 'iteration' → logprob: -5.414337158203125

Token 220: '
' (ID: 198)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.04319706931710243
    2. '(lst' → logprob: -4.418197154998779
    3. 'lst' → logprob: -5.668197154998779
    4. 'result' → logprob: -5.793197154998779
    5. '(
' → logprob: -6.043197154998779
    6. '(r' → logprob: -6.168197154998779
    7. '
' → logprob: -6.168197154998779
    8. '(' → logprob: -6.168197154998779
    9. 'return' → logprob: -6.168197154998779
    10. 'data' → logprob: -6.293197154998779

Token 221: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -4.978233846486546e-05
    2. 'lst' → logprob: -10.750049591064453
    3. 'data' → logprob: -12.125049591064453
    4. 'arr' → logprob: -12.125049591064453
    5. '	arr' → logprob: -13.125049591064453
    6. '   ' → logprob: -13.375049591064453
    7. 'def' → logprob: -13.500049591064453
    8. '	l' → logprob: -13.625049591064453
    9. ' lst' → logprob: -13.750049591064453
    10. 'res' → logprob: -13.750049591064453

Token 222: ' return' (ID: 622)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.03885652869939804
    2. 'res' → logprob: -3.6638565063476562
    3. ' res' → logprob: -4.663856506347656
    4. 'arr' → logprob: -6.788856506347656
    5. 'l' → logprob: -7.538856506347656
    6. 'lst' → logprob: -8.163856506347656
    7. 'return' (adapté à ' return') → logprob: -8.288856506347656
    8. 'result' → logprob: -9.038856506347656
    9. '	res' → logprob: -9.038856506347656
    10. '	l' → logprob: -9.413856506347656

Token 223: ' list' (ID: 1562)
  Prédit: '[list'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '[list' → logprob: -0.24316811561584473
    2. '[' → logprob: -1.7431681156158447
    3. '[int' → logprob: -3.2431681156158447
    4. '[n' → logprob: -7.118167877197266
    5. 'list' → logprob: -8.493167877197266
    6. '[List' → logprob: -8.993167877197266
    7. '[i' → logprob: -9.118167877197266
    8. '[input' → logprob: -9.243167877197266
    9. '[str' → logprob: -9.368167877197266
    10. '[l' → logprob: -9.618167877197266

Token 224: '(map' (ID: 16946)
  Prédit: '(map'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(map' → logprob: -0.04638233035802841
    2. '(int' → logprob: -3.421382427215576
    3. '(it' → logprob: -4.921382427215576
    4. '(iter' → logprob: -5.796382427215576
    5. '(tuple' → logprob: -6.671382427215576
    6. '(input' → logprob: -8.296381950378418
    7. '(copy' → logprob: -8.921381950378418
    8. '(' → logprob: -9.046381950378418
    9. '(list' → logprob: -9.421381950378418
    10. 'map' → logprob: -9.546381950378418

Token 225: '(int' (ID: 2742)
  Prédit: '(int'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(int' → logprob: -0.0004837001906707883
    2. '(lambda' → logprob: -8.000483512878418
    3. 'int' → logprob: -9.000483512878418
    4. '(' → logprob: -10.750483512878418
    5. '(str' → logprob: -14.125483512878418
    6. '(input' → logprob: -14.500483512878418
    7. '(
' → logprob: -14.750483512878418
    8. ' int' → logprob: -15.000483512878418
    9. '(list' → logprob: -15.250483512878418
    10. '[int' → logprob: -15.625483512878418

Token 226: ',' (ID: 11)
  Prédit: ','
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ',' → logprob: -0.37566354870796204
    2. '(input' → logprob: -1.7506635189056396
    3. ',input' → logprob: -2.0006635189056396
    4. 'input' → logprob: -6.625663757324219
    5. '(range' → logprob: -7.375663757324219
    6. '(sys' → logprob: -7.375663757324219
    7. 'sys' → logprob: -8.000663757324219
    8. 'range' → logprob: -8.000663757324219
    9. '[input' → logprob: -8.000663757324219
    10. '(' → logprob: -8.125663757324219

Token 227: ' list' (ID: 1562)
  Prédit: 'input'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'input' → logprob: -0.6630115509033203
    2. 'sys' → logprob: -1.0380115509033203
    3. 'iter' → logprob: -3.0380115509033203
    4. '[input' → logprob: -3.6630115509033203
    5. 'it' → logprob: -3.7880115509033203
    6. 'lambda' → logprob: -4.03801155090332
    7. '[' → logprob: -5.03801155090332
    8. '(lambda' → logprob: -5.53801155090332
    9. '(sys' → logprob: -5.91301155090332
    10. '(input' → logprob: -6.66301155090332

Token 228: '(it' (ID: 29445)
  Prédit: '(input'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(input' → logprob: -0.4743320345878601
    2. '(map' → logprob: -1.7243320941925049
    3. '(it' → logprob: -2.224332094192505
    4. '(iter' → logprob: -2.724332094192505
    5. 'input' → logprob: -4.974331855773926
    6. '(range' → logprob: -5.224331855773926
    7. '(chain' → logprob: -5.724331855773926
    8. 'it' → logprob: -5.849331855773926
    9. '(' → logprob: -6.349331855773926
    10. 'map' → logprob: -6.724331855773926

Token 229: 'ertools' (ID: 88385)
  Prédit: '(input'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(input' → logprob: -0.47368961572647095
    2. 'input' → logprob: -1.5986895561218262
    3. 'put' → logprob: -2.598689556121826
    4. 'map' → logprob: -2.973689556121826
    5. 'er' → logprob: -3.348689556121826
    6. 'e' → logprob: -6.098689556121826
    7. 'ertools' → logprob: -6.223689556121826
    8. 'n' → logprob: -6.973689556121826
    9. 'x' → logprob: -7.223689556121826
    10. '   ' → logprob: -7.223689556121826

Token 230: '.is' (ID: 3109)
  Prédit: '.chain'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '.chain' → logprob: -0.11414894461631775
    2. '.acc' → logprob: -2.6141488552093506
    3. '.is' → logprob: -3.7391488552093506
    4. '.st' → logprob: -4.61414909362793
    5. '.repeat' → logprob: -7.48914909362793
    6. '.take' → logprob: -8.98914909362793
    7. 'acc' → logprob: -9.36414909362793
    8. 'chain' → logprob: -10.11414909362793
    9. 'is' → logprob: -10.48914909362793
    10. '.c' → logprob: -10.73914909362793

Token 231: 'lice' (ID: 7321)
  Prédit: 'lice'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'lice' → logprob: -3.650518920039758e-06
    2. '
' → logprob: -14.500003814697266
    3. 'lices' → logprob: -14.875003814697266
    4. 't' → logprob: -15.125003814697266
    5. 'lic' → logprob: -15.375003814697266
    6. '.chain' → logprob: -15.375003814697266
    7. 'ice' → logprob: -15.625003814697266
    8. 'l' → logprob: -15.750003814697266
    9. 'liced' → logprob: -15.750003814697266
    10. 'pace' → logprob: -15.750003814697266

Token 232: '((' (ID: 2054)
  Prédit: '(input'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '(input' → logprob: -0.004568019416183233
    2. '(iter' → logprob: -6.504568099975586
    3. '(it' → logprob: -6.754568099975586
    4. 'input' → logprob: -7.004568099975586
    5. '(sys' → logprob: -8.254568099975586
    6. ',input' → logprob: -8.379568099975586
    7. '   ' → logprob: -9.129568099975586
    8. ' (' → logprob: -9.254568099975586
    9. '(' → logprob: -9.254568099975586
    10. '(map' → logprob: -9.504568099975586

Token 233: 'input' (ID: 2586)
  Prédit: 'map'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'map' → logprob: -0.1893666386604309
    2. 'input' → logprob: -2.189366579055786
    3. 'it' → logprob: -2.939366579055786
    4. 'sys' → logprob: -5.689366817474365
    5. 'iter' → logprob: -6.814366817474365
    6. 'int' → logprob: -6.939366817474365
    7. '(map' → logprob: -6.939366817474365
    8. '(it' → logprob: -7.189366817474365
    9. '(input' → logprob: -9.189366340637207
    10. 'lambda' → logprob: -9.314366340637207

Token 234: '()' (ID: 416)
  Prédit: '().'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '().' → logprob: -0.016593659296631813
    2. '()' → logprob: -4.2665934562683105
    3. '()),' → logprob: -6.3915934562683105
    4. '(),' → logprob: -7.2665934562683105
    5. '()))' → logprob: -10.516593933105469
    6. '())))' → logprob: -11.641593933105469
    7. 'for' → logprob: -12.641593933105469
    8. '),' → logprob: -12.766593933105469
    9. '().__' → logprob: -12.766593933105469
    10. '()
' → logprob: -13.141593933105469

Token 235: ' for' (ID: 395)
  Prédit: '().'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '().' → logprob: -0.021459652110934258
    2. '()' → logprob: -3.8964595794677734
    3. '.split' → logprob: -8.271459579467773
    4. '()),' → logprob: -8.271459579467773
    5. 'for' → logprob: -8.521459579467773
    6. ' for' → logprob: -9.646459579467773
    7. '),' → logprob: -9.896459579467773
    8. '   ' → logprob: -10.021459579467773
    9. '(),' → logprob: -11.021459579467773
    10. '()
' → logprob: -11.896459579467773

Token 236: ' _' (ID: 1175)
  Prédit: '_'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_' → logprob: -0.005877717863768339
    2. '_range' → logprob: -5.505877494812012
    3. ' range' → logprob: -6.630877494812012
    4. 'range' → logprob: -7.755877494812012
    5. '_i' → logprob: -11.630877494812012
    6. '_iter' → logprob: -11.880877494812012
    7. '_in' → logprob: -12.130877494812012
    8. ' _' → logprob: -12.255877494812012
    9. '_
' → logprob: -12.505877494812012
    10. '   ' → logprob: -12.630877494812012

Token 237: ' in' (ID: 306)
  Prédit: 'range'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'range' → logprob: -0.03813375160098076
    2. ' range' → logprob: -3.2881338596343994
    3. '(range' → logprob: -9.91313362121582
    4. '	range' → logprob: -10.53813362121582
    5. 'in' → logprob: -12.16313362121582
    6. ' in' → logprob: -12.28813362121582
    7. '_' → logprob: -13.03813362121582
    8. ' ' → logprob: -13.28813362121582
    9. '_range' → logprob: -14.16313362121582
    10. '  ' → logprob: -14.53813362121582

Token 238: ' iter' (ID: 10621)
  Prédit: 'range'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'range' → logprob: -0.0007117166533134878
    2. ' range' → logprob: -7.250711917877197
    3. ' ' → logprob: -14.625711441040039
    4. '	range' → logprob: -14.750711441040039
    5. '   ' → logprob: -14.875711441040039
    6. '(range' → logprob: -15.750711441040039
    7. '  ' → logprob: -15.750711441040039
    8. '
' → logprob: -16.25071144104004
    9. ')' → logprob: -16.50071144104004
    10. 'rang' → logprob: -17.12571144104004

Token 239: '(int' (ID: 2742)
  Prédit: 'range'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'range' → logprob: -0.6191294193267822
    2. '(range' → logprob: -0.8691294193267822
    3. '(int' → logprob: -3.2441294193267822
    4. 'int' → logprob: -6.744129180908203
    5. 'n' → logprob: -7.244129180908203
    6. '(lambda' → logprob: -7.869129180908203
    7. '(n' → logprob: -8.244129180908203
    8. ' range' → logprob: -8.244129180908203
    9. 'ate' → logprob: -8.744129180908203
    10. 's' → logprob: -9.119129180908203

Token 240: ',' (ID: 11)
  Prédit: ','
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ',' → logprob: -0.3887287378311157
    2. ',n' → logprob: -1.5137287378311157
    3. ',input' → logprob: -3.763728618621826
    4. '(range' → logprob: -4.388728618621826
    5. '(n' → logprob: -4.513728618621826
    6. '
' → logprob: -4.513728618621826
    7. '(int' → logprob: -4.638728618621826
    8. 'n' → logprob: -5.013728618621826
    9. '),' → logprob: -5.138728618621826
    10. 'range' → logprob: -5.138728618621826

Token 241: ' ' (ID: 220)
  Prédit: ''''
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '''' → logprob: -0.4054052233695984
    2. ''' → logprob: -1.5304052829742432
    3. ''n' → logprob: -2.405405282974243
    4. 'n' → logprob: -4.155405044555664
    5. '1' → logprob: -4.905405044555664
    6. '0' → logprob: -6.405405044555664
    7. '"' → logprob: -7.030405044555664
    8. '''
' → logprob: -8.655405044555664
    9. ''',' → logprob: -8.655405044555664
    10. '(n' → logprob: -8.780405044555664

Token 242: '1' (ID: 16)
  Prédit: ''''
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '''' → logprob: -0.6897046566009521
    2. 'n' → logprob: -0.9397046566009521
    3. '0' → logprob: -2.939704656600952
    4. ''' → logprob: -3.939704656600952
    5. '1' → logprob: -4.064704895019531
    6. ''n' → logprob: -4.439704895019531
    7. '()' → logprob: -6.064704895019531
    8. '""' → logprob: -6.939704895019531
    9. '(n' → logprob: -7.564704895019531
    10. '"' → logprob: -7.814704895019531

Token 243: ')),' (ID: 12098)
  Prédit: ')),'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')),' → logprob: -0.4955383837223053
    2. '),' → logprob: -1.620538353919983
    3. '()' → logprob: -2.2455384731292725
    4. '()),' → logprob: -2.7455384731292725
    5. ')' → logprob: -5.620538234710693
    6. '):
' → logprob: -5.745538234710693
    7. '   ' → logprob: -5.870538234710693
    8. '):' → logprob: -6.120538234710693
    9. '))),' → logprob: -6.870538234710693
    10. ')],' → logprob: -6.995538234710693

Token 244: ' n' (ID: 297)
  Prédit: 'n'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'n' → logprob: -0.0005756704485975206
    2. ' n' → logprob: -7.500575542449951
    3. '   ' → logprob: -11.00057601928711
    4. '	n' → logprob: -12.75057601928711
    5. '(n' → logprob: -14.12557601928711
    6. '  ' → logprob: -14.25057601928711
    7. ')n' → logprob: -15.25057601928711
    8. ' ' → logprob: -15.50057601928711
    9. '0' → logprob: -16.00057601928711
    10. 'int' → logprob: -16.25057601928711

Token 245: '))))

' (ID: 161772)
  Prédit: '))))'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '))))' → logprob: -0.069849394261837
    2. ')))' → logprob: -3.0698494911193848
    3. ')' → logprob: -3.9448494911193848
    4. '))' → logprob: -6.569849491119385
    5. '()))' → logprob: -8.944849014282227
    6. '())))' → logprob: -9.819849014282227
    7. '()' → logprob: -10.069849014282227
    8. '])))' → logprob: -11.319849014282227
    9. '())' → logprob: -11.694849014282227
    10. ' ))' → logprob: -11.944849014282227

Token 246: 'def' (ID: 1314)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')' → logprob: -0.4062652885913849
    2. ':' → logprob: -1.2812652587890625
    3. '(' → logprob: -3.5312652587890625
    4. '
' → logprob: -5.2812652587890625
    5. '#' → logprob: -5.7812652587890625
    6. '[' → logprob: -5.7812652587890625
    7. '<|end|>' → logprob: -5.9062652587890625
    8. ' ' → logprob: -6.0312652587890625
    9. 'def' → logprob: -6.0312652587890625
    10. '   ' → logprob: -6.2812652587890625

Token 247: ' in' (ID: 306)
  Prédit: 'in'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'in' → logprob: -0.7188822627067566
    2. ' in' → logprob: -1.8438823223114014
    3. 'inp' → logprob: -2.8438823223114014
    4. 'ins' → logprob: -3.0938823223114014
    5. ' main' → logprob: -3.3438823223114014
    6. 'main' → logprob: -3.4688823223114014
    7. 'ind' → logprob: -3.8438823223114014
    8. 'input' → logprob: -3.8438823223114014
    9. 'out' → logprob: -3.9688823223114014
    10. ' inp' → logprob: -4.343882083892822

Token 248: 'pll' (ID: 187560)
  Prédit: 'p'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'p' → logprob: -0.09650307148694992
    2. 'pl' → logprob: -2.7215030193328857
    3. 'pm' → logprob: -3.7215030193328857
    4. 'put' → logprob: -7.346503257751465
    5. 't' → logprob: -7.471503257751465
    6. 'pt' → logprob: -8.471503257751465
    7. '()' → logprob: -8.721503257751465
    8. 'm' → logprob: -9.346503257751465
    9. 'pi' → logprob: -9.846503257751465
    10. 'q' → logprob: -10.221503257751465

Token 249: '(n' (ID: 2406)
  Prédit: '(n'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(n' → logprob: -0.06278976052999496
    2. '():' → logprob: -2.8127896785736084
    3. '():
' → logprob: -7.8127899169921875
    4. '(' → logprob: -7.9377899169921875
    5. '()' → logprob: -10.187789916992188
    6. 'n' → logprob: -12.187789916992188
    7. '(size' → logprob: -13.187789916992188
    8. '(m' → logprob: -13.187789916992188
    9. '(s' → logprob: -13.312789916992188
    10. 'm' → logprob: -13.312789916992188

Token 250: '):
' (ID: 1883)
  Prédit: '):'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '):' → logprob: -0.02979191765189171
    2. '):
' → logprob: -3.529791831970215
    3. ')' → logprob: -10.404791831970215
    4. '(n' → logprob: -12.529791831970215
    5. ':' → logprob: -12.904791831970215
    6. '):
' → logprob: -13.029791831970215
    7. '):

' → logprob: -13.404791831970215
    8. ' ):' → logprob: -14.654791831970215
    9. ')):' → logprob: -15.029791831970215
    10. '   ' → logprob: -15.404791831970215

Token 251: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.00022284770966507494
    2. 'return' → logprob: -8.625223159790039
    3. '	return' → logprob: -10.875223159790039
    4. ' return' → logprob: -10.875223159790039
    5. 'def' → logprob: -12.625223159790039
    6. '[]' → logprob: -14.125223159790039
    7. '[' → logprob: -15.000223159790039
    8. '   ' → logprob: -15.000223159790039
    9. '       ' → logprob: -15.250223159790039
    10. '    ' → logprob: -15.875223159790039

Token 252: ' #' (ID: 1069)
  Prédit: 'return'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'return' → logprob: -0.06696522235870361
    2. '   ' → logprob: -2.816965103149414
    3. ' return' → logprob: -5.316965103149414
    4. 'def' → logprob: -9.816965103149414
    5. '#' (adapté à ' #') → logprob: -11.066965103149414
    6. '	return' → logprob: -13.066965103149414
    7. '
' → logprob: -13.066965103149414
    8. '[]' → logprob: -14.566965103149414
    9. '[' → logprob: -14.941965103149414
    10. 'for' → logprob: -15.191965103149414

Token 253: ' Use' (ID: 7649)
  Prédit: 'return'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'return' → logprob: -0.0029697378631681204
    2. 'def' → logprob: -6.377969741821289
    3. '[' → logprob: -7.377969741821289
    4. ' return' → logprob: -7.627969741821289
    5. '   ' → logprob: -9.877969741821289
    6. '[l' → logprob: -10.877969741821289
    7. ' [' → logprob: -11.502969741821289
    8. '[list' → logprob: -11.752969741821289
    9. '[s' → logprob: -11.877969741821289
    10. 'l' → logprob: -12.252969741821289

Token 254: ' reduce' (ID: 10389)
  Prédit: 'list'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'list' → logprob: -0.18550200760364532
    2. '[list' → logprob: -3.060502052307129
    3. ' list' → logprob: -3.310502052307129
    4. '[' → logprob: -3.560502052307129
    5. ' [' → logprob: -4.060502052307129
    6. 'lambda' → logprob: -4.560502052307129
    7. 'copy' → logprob: -5.185502052307129
    8. 'deque' → logprob: -5.685502052307129
    9. 'def' → logprob: -5.810502052307129
    10. 'map' → logprob: -6.185502052307129

Token 255: ' for' (ID: 395)
  Prédit: 'from'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'from' → logprob: -0.3936413824558258
    2. 'import' → logprob: -1.5186413526535034
    3. 'def' → logprob: -2.768641471862793
    4. ' from' → logprob: -4.393641471862793
    5. '(lambda' → logprob: -4.393641471862793
    6. ',' → logprob: -4.643641471862793
    7. '   ' → logprob: -4.893641471862793
    8. ' (' → logprob: -7.893641471862793
    9. ' def' → logprob: -8.018641471862793
    10. ':' → logprob: -8.393641471862793

Token 256: ' list' (ID: 1562)
  Prédit: 'lambda'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'lambda' → logprob: -0.08088941127061844
    2. '(lambda' → logprob: -2.5808894634246826
    3. ' lambda' → logprob: -6.3308892250061035
    4. 'int' → logprob: -9.205889701843262
    5. 'import' → logprob: -10.080889701843262
    6. 'list' → logprob: -10.705889701843262
    7. 'operator' → logprob: -11.205889701843262
    8. ' functools' → logprob: -11.455889701843262
    9. '(int' → logprob: -11.580889701843262
    10. 'from' → logprob: -12.330889701843262

Token 257: ' building' (ID: 6282)
  Prédit: 'from'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'from' → logprob: -0.3692995309829712
    2. 'import' → logprob: -1.7442995309829712
    3. 'def' → logprob: -2.2442994117736816
    4. '   ' → logprob: -4.119299411773682
    5. ' from' → logprob: -5.119299411773682
    6. '
' → logprob: -5.869299411773682
    7. ',' → logprob: -6.619299411773682
    8. ' def' → logprob: -7.369299411773682
    9. 'return' → logprob: -7.744299411773682
    10. ' import' → logprob: -8.61929988861084

Token 258: '
' (ID: 198)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.0063940612599253654
    2. 'from' → logprob: -6.006393909454346
    3. 'return' → logprob: -6.381393909454346
    4. 'def' → logprob: -7.131393909454346
    5. ' return' → logprob: -7.381393909454346
    6. 'import' → logprob: -7.756393909454346
    7. ' from' → logprob: -8.881394386291504
    8. ',' → logprob: -9.381394386291504
    9. ':' → logprob: -9.756394386291504
    10. ':
' → logprob: -10.881394386291504

Token 259: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.0015687840059399605
    2. 'def' → logprob: -7.376568794250488
    3. 'return' → logprob: -7.376568794250488
    4. 'from' → logprob: -8.376568794250488
    5. 'import' → logprob: -9.626568794250488
    6. ' return' → logprob: -11.001568794250488
    7. '```' → logprob: -13.751568794250488
    8. '	return' → logprob: -14.001568794250488
    9. '
' → logprob: -14.376568794250488
    10. ' from' → logprob: -14.626568794250488

Token 260: ' from' (ID: 591)
  Prédit: 'return'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'return' → logprob: -0.04170892387628555
    2. '   ' → logprob: -3.5417089462280273
    3. 'from' (adapté à ' from') → logprob: -4.541708946228027
    4. 'import' → logprob: -6.791708946228027
    5. ' return' → logprob: -9.166708946228027
    6. 'def' → logprob: -12.916708946228027
    7. '	return' → logprob: -13.416708946228027
    8. '
' → logprob: -15.291708946228027
    9. ' from' → logprob: -15.541708946228027
    10. '  ' → logprob: -17.16670799255371

Token 261: ' functools' (ID: 142636)
  Prédit: 'fun'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'fun' → logprob: -0.0009125363430939615
    2. ' functools' → logprob: -7.000912666320801
    3. 'operator' → logprob: -14.7509126663208
    4. 'fra' → logprob: -14.8759126663208
    5. 'func' → logprob: -15.8759126663208
    6. 'ft' → logprob: -17.000911712646484
    7. 'math' → logprob: -17.125911712646484
    8. ' ' → logprob: -17.125911712646484
    9. 'collections' → logprob: -17.500911712646484
    10. 'it' → logprob: -18.000911712646484

Token 262: ' import' (ID: 1588)
  Prédit: 'import'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'import' → logprob: -0.3132745921611786
    2. ' import' → logprob: -1.313274621963501
    3. '	import' → logprob: -11.438274383544922
    4. '_import' → logprob: -13.688274383544922
    5. '   ' → logprob: -15.188274383544922
    6. ' imports' → logprob: -16.313274383544922
    7. ' ' → logprob: -16.313274383544922
    8. ' ' → logprob: -16.688274383544922
    9. 'reduce' → logprob: -16.938274383544922
    10. ' importe' → logprob: -17.188274383544922

Token 263: ' reduce' (ID: 10389)
  Prédit: 'reduce'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'reduce' → logprob: -0.00026181264547631145
    2. ' reduce' → logprob: -8.250262260437012
    3. 'redu' → logprob: -15.250262260437012
    4. '_reduce' → logprob: -15.875262260437012
    5. '.reduce' → logprob: -16.500261306762695
    6. 'partial' → logprob: -17.875261306762695
    7. '   ' → logprob: -19.125261306762695
    8. 'Reduce' → logprob: -19.625261306762695
    9. 'import' → logprob: -20.375261306762695
    10. '```' → logprob: -20.750261306762695

Token 264: '
' (ID: 198)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.047648508101701736
    2. '
' → logprob: -3.1726484298706055
    3. ',' → logprob: -5.7976484298706055
    4. '    
' → logprob: -6.9226484298706055
    5. 'def' → logprob: -8.547648429870605
    6. 'return' → logprob: -8.922648429870605
    7. 'import' → logprob: -9.172648429870605
    8. ' return' → logprob: -10.047648429870605
    9. ',
' → logprob: -10.672648429870605
    10. '(lambda' → logprob: -10.922648429870605

Token 265: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.017923278734087944
    2. '
' → logprob: -4.142923355102539
    3. 'return' → logprob: -7.267923355102539
    4. ' return' → logprob: -7.892923355102539
    5. 'def' → logprob: -7.892923355102539
    6. '    
' → logprob: -8.267923355102539
    7. '[]
' → logprob: -9.892923355102539
    8. '[]' → logprob: -11.017923355102539
    9. '()
' → logprob: -11.142923355102539
    10. 'n' → logprob: -11.392923355102539

Token 266: ' return' (ID: 622)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.004830361343920231
    2. 'return' (adapté à ' return') → logprob: -5.504830360412598
    3. ' return' → logprob: -7.254830360412598
    4. 'def' → logprob: -10.129830360412598
    5. 'import' → logprob: -12.754830360412598
    6. '
' → logprob: -14.504830360412598
    7. ' def' → logprob: -14.879830360412598
    8. '   ' → logprob: -15.129830360412598
    9. 'result' → logprob: -15.129830360412598
    10. '	return' → logprob: -15.504830360412598

Token 267: ' reduce' (ID: 10389)
  Prédit: 'list'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'list' → logprob: -0.39034712314605713
    2. 'reduce' → logprob: -1.1403471231460571
    3. ' list' → logprob: -6.765347003936768
    4. '[' → logprob: -6.765347003936768
    5. ' reduce' → logprob: -7.640347003936768
    6. 'lambda' → logprob: -8.390347480773926
    7. 'fun' → logprob: -8.640347480773926
    8. ' functools' → logprob: -9.640347480773926
    9. '   ' → logprob: -10.015347480773926
    10. ' ' → logprob: -10.015347480773926

Token 268: '(lambda' (ID: 43341)
  Prédit: '(lambda'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(lambda' → logprob: -0.0002570481738075614
    2. '(' → logprob: -8.75025749206543
    3. '(list' → logprob: -9.62525749206543
    4. '(
' → logprob: -11.25025749206543
    5. '(operator' → logprob: -11.50025749206543
    6. '   ' → logprob: -12.12525749206543
    7. '```' → logprob: -13.50025749206543
    8. 'lambda' → logprob: -14.12525749206543
    9. '((' → logprob: -14.25025749206543
    10. ' (' → logprob: -14.37525749206543

Token 269: ' acc' (ID: 1259)
  Prédit: 'x'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'x' → logprob: -1.0543935298919678
    2. ' lambda' → logprob: -1.3043935298919678
    3. ' x' → logprob: -1.8043935298919678
    4. 'lambda' → logprob: -2.1793935298919678
    5. ' acc' → logprob: -2.4293935298919678
    6. 'a' → logprob: -4.929393768310547
    7. 'l' → logprob: -6.304393768310547
    8. 'acc' → logprob: -6.304393768310547
    9. 'lst' → logprob: -6.804393768310547
    10. ' a' → logprob: -6.929393768310547

Token 270: ',' (ID: 11)
  Prédit: ','
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ',' → logprob: -7.398067828034982e-05
    2. ',x' → logprob: -10.62507438659668
    3. ' ,' → logprob: -10.87507438659668
    4. 'lambda' → logprob: -11.00007438659668
    5. 'x' → logprob: -13.12507438659668
    6. ',l' → logprob: -13.12507438659668
    7. 'a' → logprob: -13.37507438659668
    8. 'acc' → logprob: -13.50007438659668
    9. '_,' → logprob: -13.50007438659668
    10. 's' → logprob: -14.12507438659668

Token 271: ' _:' (ID: 133568)
  Prédit: 'x'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'x' → logprob: -1.8388495445251465
    2. '   ' → logprob: -1.9638495445251465
    3. '_,' → logprob: -1.9638495445251465
    4. '    ' → logprob: -2.3388495445251465
    5. '_:' → logprob: -2.4638495445251465
    6. ' x' → logprob: -2.8388495445251465
    7. ' _:' → logprob: -2.9638495445251465
    8. '     ' → logprob: -3.3388495445251465
    9. '      ' → logprob: -3.8388495445251465
    10. '       ' → logprob: -4.0888495445251465

Token 272: ' acc' (ID: 1259)
  Prédit: 'acc'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'acc' → logprob: -0.00607087928801775
    2. ' acc' → logprob: -5.256071090698242
    3. '   ' → logprob: -7.256071090698242
    4. 'lambda' → logprob: -9.631071090698242
    5. '(acc' → logprob: -10.506071090698242
    6. ' ' → logprob: -11.506071090698242
    7. '	acc' → logprob: -11.756071090698242
    8. '    ' → logprob: -12.131071090698242
    9. '  ' → logprob: -12.631071090698242
    10. '     ' → logprob: -13.006071090698242

Token 273: ' +' (ID: 659)
  Prédit: '+['
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '+[' → logprob: -0.6844996213912964
    2. ' +' → logprob: -0.9344996213912964
    3. '+' → logprob: -2.309499740600586
    4. '.append' → logprob: -6.809499740600586
    5. '    ' → logprob: -6.934499740600586
    6. ':' → logprob: -7.809499740600586
    7. 'lambda' → logprob: -7.809499740600586
    8. 'append' → logprob: -8.059499740600586
    9. '+x' → logprob: -9.559499740600586
    10. '   ' → logprob: -9.684499740600586

Token 274: ' [' (ID: 723)
  Prédit: 'list'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'list' → logprob: -1.4553828239440918
    2. '[in' → logprob: -1.4553828239440918
    3. 'in' → logprob: -1.5803828239440918
    4. '[input' → logprob: -1.9553828239440918
    5. '[' → logprob: -2.455382823944092
    6. '[list' → logprob: -2.580382823944092
    7. '[int' → logprob: -4.455382823944092
    8. 'input' → logprob: -4.830382823944092
    9. ' [' → logprob: -6.955382823944092
    10. '[x' → logprob: -7.080382823944092

Token 275: 'list' (ID: 2641)
  Prédit: 'int'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'int' → logprob: -3.128163257315464e-07
    2. '[int' → logprob: -16.0
    3. ' int' → logprob: -16.625
    4. '   ' → logprob: -17.375
    5. 'list' → logprob: -18.0
    6. 'in' → logprob: -18.875
    7. 'inp' → logprob: -19.0
    8. '(int' → logprob: -19.0
    9. 'input' → logprob: -19.125
    10. '
' → logprob: -19.375

Token 276: '(map' (ID: 16946)
  Prédit: '(map'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(map' → logprob: -1.1279553291387856e-05
    2. 'map' → logprob: -11.500011444091797
    3. '(' → logprob: -14.125011444091797
    4. '(int' → logprob: -15.625011444091797
    5. '(in' → logprob: -15.875011444091797
    6. '	map' → logprob: -17.750011444091797
    7. ' map' → logprob: -17.875011444091797
    8. '(
' → logprob: -17.875011444091797
    9. '(it' → logprob: -18.250011444091797
    10. '.map' → logprob: -18.500011444091797

Token 277: '(int' (ID: 2742)
  Prédit: '(int'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(int' → logprob: -0.00463945372030139
    2. 'int' → logprob: -5.379639625549316
    3. ' int' → logprob: -12.004639625549316
    4. '(
' → logprob: -12.754639625549316
    5. '(' → logprob: -13.004639625549316
    6. '   ' → logprob: -13.129639625549316
    7. '(str' → logprob: -13.254639625549316
    8. 'str' → logprob: -13.879639625549316
    9. '[int' → logprob: -14.004639625549316
    10. ',int' → logprob: -14.129639625549316

Token 278: ',' (ID: 11)
  Prédit: ','
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ',' → logprob: -0.38809359073638916
    2. ',input' → logprob: -1.3880935907363892
    3. '(input' → logprob: -2.6380934715270996
    4. 'input' → logprob: -7.7630934715271
    5. '(' → logprob: -8.888093948364258
    6. ' ,' → logprob: -11.763093948364258
    7. '(),' → logprob: -11.888093948364258
    8. ',(' → logprob: -12.013093948364258
    9. '   ' → logprob: -12.138093948364258
    10. '(in' → logprob: -12.513093948364258

Token 279: ' input' (ID: 3422)
  Prédit: 'input'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'input' → logprob: -0.0002470350591465831
    2. ' input' → logprob: -8.37524700164795
    3. '   ' → logprob: -12.12524700164795
    4. 'str' → logprob: -12.25024700164795
    5. '(input' → logprob: -13.00024700164795
    6. 'lambda' → logprob: -13.37524700164795
    7. 'list' → logprob: -13.75024700164795
    8. '    ' → logprob: -15.37524700164795
    9. '           ' → logprob: -16.125247955322266
    10. '<input' → logprob: -16.125247955322266

Token 280: '().' (ID: 1454)
  Prédit: '().'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '().' → logprob: -0.0001490716531407088
    2. '()))' → logprob: -9.37514877319336
    3. '()' → logprob: -9.87514877319336
    4. '))' → logprob: -12.12514877319336
    5. '()
' → logprob: -12.87514877319336
    6. '.split' → logprob: -12.87514877319336
    7. '   ' → logprob: -14.12514877319336
    8. '(' → logprob: -14.37514877319336
    9. '    ' → logprob: -16.00014877319336
    10. ' ' → logprob: -16.25014877319336

Token 281: 'split' (ID: 13627)
  Prédit: 'split'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'split' → logprob: -7.896309739408025e-07
    2. ' split' → logprob: -14.375000953674316
    3. 'strip' → logprob: -15.750000953674316
    4. 'rstrip' → logprob: -18.25
    5. '(split' → logprob: -18.625
    6. '.split' → logprob: -18.625
    7. '   ' → logprob: -19.625
    8. 'spl' → logprob: -20.0
    9. 'plit' → logprob: -21.375
    10. '```' → logprob: -22.0

Token 282: '()))' (ID: 16829)
  Prédit: '()))'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '()))' → logprob: -0.0067955441772937775
    2. '))' → logprob: -5.631795406341553
    3. '()' → logprob: -5.756795406341553
    4. '())))' → logprob: -11.256795883178711
    5. '()))
' → logprob: -12.131795883178711
    6. '())' → logprob: -12.506795883178711
    7. '())),
' → logprob: -13.256795883178711
    8. '))]
' → logprob: -13.381795883178711
    9. '()
' → logprob: -14.006795883178711
    10. '(' → logprob: -14.381795883178711

Token 283: '],' (ID: 2155)
  Prédit: '],'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '],' → logprob: -0.2716425359249115
    2. ',' → logprob: -1.7716425657272339
    3. '   ' → logprob: -3.7716424465179443
    4. '()],' → logprob: -3.7716424465179443
    5. ')],' → logprob: -4.646642684936523
    6. ']),' → logprob: -5.146642684936523
    7. ']' → logprob: -6.521642684936523
    8. '(n' → logprob: -7.021642684936523
    9. '),' → logprob: -7.396642684936523
    10. '(),' → logprob: -7.396642684936523

Token 284: ' range' (ID: 3352)
  Prédit: 'range'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'range' → logprob: -0.02332933433353901
    2. ' range' → logprob: -3.773329257965088
    3. '   ' → logprob: -9.523329734802246
    4. '	range' → logprob: -12.023329734802246
    5. '    ' → logprob: -13.648329734802246
    6. '(range' → logprob: -13.773329734802246
    7. '[' → logprob: -14.023329734802246
    8. ' ' → logprob: -14.523329734802246
    9. '  ' → logprob: -15.273329734802246
    10. '           ' → logprob: -16.14832878112793

Token 285: '(n' (ID: 2406)
  Prédit: '(n'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(n' → logprob: -2.093505099765025e-05
    2. '(' → logprob: -11.125020980834961
    3. 'n' → logprob: -12.000020980834961
    4. '   ' → logprob: -16.87502098083496
    5. ' (' → logprob: -19.25002098083496
    6. '(
' → logprob: -19.25002098083496
    7. '	n' → logprob: -19.62502098083496
    8. ',' → logprob: -20.00002098083496
    9. '```' → logprob: -20.62502098083496
    10. ',n' → logprob: -20.75002098083496

Token 286: '),' (ID: 936)
  Prédit: '),'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '),' → logprob: -3.702754474943504e-05
    2. '))' → logprob: -11.12503719329834
    3. ' ),' → logprob: -11.62503719329834
    4. ')' → logprob: -12.25003719329834
    5. '   ' → logprob: -12.37503719329834
    6. ',' → logprob: -13.87503719329834
    7. '()),' → logprob: -13.87503719329834
    8. ')),' → logprob: -14.37503719329834
    9. '1' → logprob: -14.75003719329834
    10. '0' → logprob: -15.37503719329834

Token 287: ' [])

' (ID: 124233)
  Prédit: '[])'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '[])' → logprob: -0.0031866247300058603
    2. ' [])' → logprob: -6.0031867027282715
    3. '[]' → logprob: -7.2531867027282715
    4. '[])
' → logprob: -13.628186225891113
    5. ')' → logprob: -13.753186225891113
    6. ' []' → logprob: -15.628186225891113
    7. '   ' → logprob: -16.25318717956543
    8. ' ' → logprob: -16.50318717956543
    9. '[]):' → logprob: -16.50318717956543
    10. '[]
' → logprob: -17.75318717956543

Token 288: 'def' (ID: 1314)
  Prédit: ''
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False

Token 289: ' bfs' (ID: 147571)
  Prédit: ' main'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' main' → logprob: -0.29799678921699524
    2. ' in' → logprob: -2.172996759414673
    3. 'main' → logprob: -2.922996759414673
    4. 'in' → logprob: -3.672996759414673
    5. ' solve' → logprob: -3.672996759414673
    6. ' def' → logprob: -4.047996997833252
    7. 'def' → logprob: -5.797996997833252
    8. 'solve' → logprob: -5.797996997833252
    9. ' inp' → logprob: -5.922996997833252
    10. '__' → logprob: -6.547996997833252

Token 290: '(s' (ID: 1858)
  Prédit: '(start'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(start' → logprob: -0.7067223787307739
    2. '(graph' → logprob: -1.456722378730774
    3. '(s' → logprob: -2.7067222595214844
    4. '(queue' → logprob: -2.8317222595214844
    5. '(q' → logprob: -3.2067222595214844
    6. '(node' → logprob: -3.3317222595214844
    7. '(root' → logprob: -3.3317222595214844
    8. '(' → logprob: -3.4567222595214844
    9. '(u' → logprob: -6.956722259521484
    10. '(source' → logprob: -7.206722259521484

Token 291: ',' (ID: 11)
  Prédit: '):'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '):' → logprob: -0.1322629153728485
    2. '):
' → logprob: -2.382262945175171
    3. ',' → logprob: -3.882262945175171
    4. '(s' → logprob: -4.757262706756592
    5. '):
' → logprob: -6.257262706756592
    6. '   ' → logprob: -9.13226318359375
    7. '(start' → logprob: -9.63226318359375
    8. ':' → logprob: -10.13226318359375
    9. ')' → logprob: -10.13226318359375
    10. 'q' → logprob: -10.25726318359375

Token 292: ' n' (ID: 297)
  Prédit: 'graph'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'graph' → logprob: -0.22047452628612518
    2. 'g' → logprob: -1.7204744815826416
    3. 'adj' → logprob: -4.095474720001221
    4. ' graph' → logprob: -6.470474720001221
    5. 'G' → logprob: -7.595474720001221
    6. 'edges' → logprob: -9.845474243164062
    7. 'n' → logprob: -10.470474243164062
    8. ' adj' → logprob: -10.720474243164062
    9. 'gra' → logprob: -10.845474243164062
    10. ' g' → logprob: -11.095474243164062

Token 293: ',' (ID: 11)
  Prédit: ','
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ',' → logprob: -0.06847964972257614
    2. '):' → logprob: -3.068479537963867
    3. '):
' → logprob: -3.943479537963867
    4. '):
' → logprob: -8.193479537963867
    5. ' ,' → logprob: -11.693479537963867
    6. '   ' → logprob: -11.943479537963867
    7. ')' → logprob: -11.943479537963867
    8. '):

' → logprob: -12.568479537963867
    9. ':' → logprob: -12.943479537963867
    10. ',
' → logprob: -13.318479537963867

Token 294: ' g' (ID: 329)
  Prédit: 'graph'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'graph' → logprob: -0.6866607069969177
    2. 'g' → logprob: -1.1866607666015625
    3. 'adj' → logprob: -1.6866607666015625
    4. 'edges' → logprob: -5.3116607666015625
    5. 'G' → logprob: -6.8116607666015625
    6. 'gr' → logprob: -9.061660766601562
    7. 'ad' → logprob: -10.186660766601562
    8. 'graf' → logprob: -10.186660766601562
    9. 'gra' → logprob: -10.311660766601562
    10. ' graph' → logprob: -10.436660766601562

Token 295: '):
' (ID: 1883)
  Prédit: '):'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '):' → logprob: -0.7361312508583069
    2. '):
' → logprob: -1.486131191253662
    3. 'raph' → logprob: -1.611131191253662
    4. ',' → logprob: -2.361131191253662
    5. '):
' → logprob: -7.236131191253662
    6. 'u' → logprob: -10.73613166809082
    7. '):

' → logprob: -11.23613166809082
    8. 'aph' → logprob: -11.23613166809082
    9. ')' → logprob: -11.36113166809082
    10. 'raphics' → logprob: -11.73613166809082

Token 296: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.012521425262093544
    2. '	queue' → logprob: -5.137521266937256
    3. ':' → logprob: -5.512521266937256
    4. ':
' → logprob: -7.262521266937256
    5. 'queue' → logprob: -7.262521266937256
    6. ' queue' → logprob: -7.887521266937256
    7. '(queue' → logprob: -8.262521743774414
    8. 'q' → logprob: -8.887521743774414
    9. '	q' → logprob: -9.262521743774414
    10. '):' → logprob: -9.637521743774414

Token 297: ' #' (ID: 1069)
  Prédit: 'q'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'q' → logprob: -0.5480901598930359
    2. '   ' → logprob: -1.2980902194976807
    3. 'queue' → logprob: -2.2980902194976807
    4. 'visited' → logprob: -3.0480902194976807
    5. 'vis' → logprob: -7.923089981079102
    6. ' q' → logprob: -9.173089981079102
    7. 'que' → logprob: -9.298089981079102
    8. 'dq' → logprob: -9.548089981079102
    9. ' visited' → logprob: -9.798089981079102
    10. '    
' → logprob: -9.798089981079102

Token 298: ' U' (ID: 601)
  Prédit: 'visited'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'visited' → logprob: -0.19256845116615295
    2. 'q' → logprob: -1.9425684213638306
    3. 'dist' → logprob: -4.317568302154541
    4. 'queue' → logprob: -4.817568302154541
    5. 'vis' → logprob: -5.192568302154541
    6. 'from' → logprob: -6.317568302154541
    7. '   ' → logprob: -6.692568302154541
    8. 'd' → logprob: -7.067568302154541
    9. 'seen' → logprob: -8.0675687789917
    10. 'que' → logprob: -8.8175687789917

Token 299: 'sel' (ID: 4430)
  Prédit: 'visited'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'visited' → logprob: -0.141488179564476
    2. '   ' → logprob: -3.3914880752563477
    3. 'vis' → logprob: -3.5164880752563477
    4. 'sed' → logprob: -4.141488075256348
    5. 'queue' → logprob: -4.266488075256348
    6. 'seen' → logprob: -4.391488075256348
    7. 'q' → logprob: -4.641488075256348
    8. 'dist' → logprob: -4.641488075256348
    9. 'n' → logprob: -6.391488075256348
    10. 'se' → logprob: -7.016488075256348

Token 300: 'ess' (ID: 436)
  Prédit: 'n'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'n' → logprob: -0.870913565158844
    2. 'se' → logprob: -1.1209135055541992
    3. 'ntil' → logprob: -3.120913505554199
    4. 'ndef' → logprob: -3.370913505554199
    5. 'def' → logprob: -3.620913505554199
    6. 'e' → logprob: -3.745913505554199
    7. 'sing' → logprob: -3.995913505554199
    8. 'visited' → logprob: -3.995913505554199
    9. 'nit' → logprob: -3.995913505554199
    10. 'np' → logprob: -4.370913505554199

Token 301: ' nested' (ID: 47576)
  Prédit: 'visited'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'visited' → logprob: -1.009625792503357
    2. '   ' → logprob: -1.384625792503357
    3. 'e' → logprob: -2.0096259117126465
    4. ' =' → logprob: -2.8846259117126465
    5. 'ue' → logprob: -3.2596259117126465
    6. 'queue' → logprob: -3.3846259117126465
    7. '=' → logprob: -3.8846259117126465
    8. 'deque' → logprob: -4.0096259117126465
    9. ' queue' → logprob: -4.1346259117126465
    10. '  ' → logprob: -4.6346259117126465

Token 302: ' function' (ID: 1114)
  Prédit: 'def'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'def' → logprob: -0.001399164437316358
    2. ' def' → logprob: -6.626399040222168
    3. 'de' → logprob: -10.126399040222168
    4. '   ' → logprob: -10.751399040222168
    5. 'deque' → logprob: -12.251399040222168
    6. 'q' → logprob: -13.251399040222168
    7. '	def' → logprob: -14.001399040222168
    8. ' de' → logprob: -14.501399040222168
    9. ' ' → logprob: -14.501399040222168
    10. '
' → logprob: -14.751399040222168

Token 303: ',' (ID: 11)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.7433246374130249
    2. ':' → logprob: -0.8683246374130249
    3. '
' → logprob: -3.7433247566223145
    4. 'def' → logprob: -3.7433247566223145
    5. ':
' → logprob: -3.7433247566223145
    6. '():' → logprob: -3.7433247566223145
    7. '():
' → logprob: -5.3683247566223145
    8. ' def' → logprob: -6.4933247566223145
    9. '):' → logprob: -7.4933247566223145
    10. '):
' → logprob: -7.4933247566223145

Token 304: ' une' (ID: 2463)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.02239324152469635
    2. 'def' → logprob: -4.147393226623535
    3. 'visited' → logprob: -5.897393226623535
    4. ' visited' → logprob: -6.022393226623535
    5. ' def' → logprob: -7.647393226623535
    6. '
' → logprob: -7.772393226623535
    7. '  ' → logprob: -9.897393226623535
    8. '    
' → logprob: -10.147393226623535
    9. ' ' → logprob: -10.647393226623535
    10. ' queue' → logprob: -11.022393226623535

Token 305: ' qu' (ID: 474)
  Prédit: 'def'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'def' → logprob: -0.538517951965332
    2. '   ' → logprob: -1.413517951965332
    3. 'f' → logprob: -2.663517951965332
    4. 'ef' → logprob: -3.413517951965332
    5. 'ndef' → logprob: -3.663517951965332
    6. ' def' → logprob: -3.913517951965332
    7. ' ' → logprob: -5.038517951965332
    8. 'n' → logprob: -5.288517951965332
    9. ' queue' → logprob: -6.038517951965332
    10. '  ' → logprob: -6.663517951965332

Token 306: 'iche' (ID: 7509)
  Prédit: 'e'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'e' → logprob: -0.18986231088638306
    2. 'el' → logprob: -2.5648622512817383
    3. 'elle' → logprob: -2.6898622512817383
    4. 'estion' → logprob: -4.314862251281738
    5. ''elle' → logprob: -5.064862251281738
    6. 'al' → logprob: -5.939862251281738
    7. 'alité' → logprob: -6.564862251281738
    8. '``' → logprob: -7.939862251281738
    9. 'and' → logprob: -8.189862251281738
    10. '```' → logprob: -8.189862251281738

Token 307: ' de' (ID: 334)
  Prédit: 'def'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'def' → logprob: -0.7510685324668884
    2. '   ' → logprob: -1.0010685920715332
    3. '(s' → logprob: -2.251068592071533
    4. '():
' → logprob: -3.626068592071533
    5. ' def' → logprob: -4.501068592071533
    6. '
' → logprob: -5.376068592071533
    7. ':
' → logprob: -6.251068592071533
    8. '()
' → logprob: -6.501068592071533
    9. '():' → logprob: -6.876068592071533
    10. '()' → logprob: -7.001068592071533

Token 308: ' itertools' (ID: 103178)
  Prédit: 'b'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'b' → logprob: -0.749352753162384
    2. 'la' → logprob: -2.2493526935577393
    3. 'fonction' → logprob: -2.6243526935577393
    4. 'code' → logprob: -3.2493526935577393
    5. 'python' → logprob: -3.2493526935577393
    6. 'queue' → logprob: -3.4993526935577393
    7. 'nom' → logprob: -3.7493526935577393
    8. 'par' → logprob: -3.8743526935577393
    9. 'bread' → logprob: -3.9993526935577393
    10. 'f' → logprob: -3.9993526935577393

Token 309: ' pour' (ID: 1930)
  Prédit: '():
'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '():
' → logprob: -1.273851990699768
    2. '(s' → logprob: -1.648851990699768
    3. '   ' → logprob: -1.773851990699768
    4. 'def' → logprob: -1.773851990699768
    5. '():' → logprob: -2.6488518714904785
    6. '):
' → logprob: -3.6488518714904785
    7. '(queue' → logprob: -3.8988518714904785
    8. ':' → logprob: -4.1488518714904785
    9. '):' → logprob: -4.1488518714904785
    10. '(' → logprob: -5.0238518714904785

Token 310: ' une' (ID: 2463)
  Prédit: 'i'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'i' → logprob: -1.4591931104660034
    2. 'node' → logprob: -1.8341931104660034
    3. 'visited' → logprob: -2.209193229675293
    4. 'queue' → logprob: -2.584193229675293
    5. '_' → logprob: -2.834193229675293
    6. 'x' → logprob: -3.209193229675293
    7. 'q' → logprob: -3.334193229675293
    8. 'range' → logprob: -3.709193229675293
    9. 'v' → logprob: -3.834193229675293
    10. 'dfs' → logprob: -3.959193229675293

Token 311: ' boucle' (ID: 174211)
  Prédit: 'def'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'def' → logprob: -1.2056862115859985
    2. 'range' → logprob: -2.455686092376709
    3. 'while' → logprob: -2.580686092376709
    4. 'chain' → logprob: -3.080686092376709
    5. 'for' → logprob: -3.205686092376709
    6. 'raison' → logprob: -3.455686092376709
    7. 'com' → logprob: -3.580686092376709
    8. 'chaine' → logprob: -3.830686092376709
    9. 'lambda' → logprob: -4.455686092376709
    10. 'queue' → logprob: -4.518186092376709

Token 312: '
' (ID: 198)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.27379125356674194
    2. 'def' → logprob: -2.3987913131713867
    3. '(s' → logprob: -3.1487913131713867
    4. '():
' → logprob: -3.3987913131713867
    5. ':' → logprob: -4.023791313171387
    6. '():' → logprob: -4.773791313171387
    7. ':
' → logprob: -4.898791313171387
    8. '):
' → logprob: -5.023791313171387
    9. ' for' → logprob: -5.273791313171387
    10. ',' → logprob: -5.523791313171387

Token 313: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.12127873301506042
    2. '
' → logprob: -3.371278762817383
    3. ':
' → logprob: -3.621278762817383
    4. 'def' → logprob: -3.996278762817383
    5. ':' → logprob: -4.371278762817383
    6. '):
' → logprob: -4.621278762817383
    7. '():
' → logprob: -5.121278762817383
    8. '    
' → logprob: -6.621278762817383
    9. '():' → logprob: -6.621278762817383
    10. '(queue' → logprob: -7.121278762817383

Token 314: ' went' (ID: 5981)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.2905735671520233
    2. 'visited' → logprob: -2.0405735969543457
    3. 'def' → logprob: -2.7905735969543457
    4. 'q' → logprob: -3.0405735969543457
    5. 'd' → logprob: -5.790573596954346
    6. 'visit' → logprob: -6.165573596954346
    7. 'queue' → logprob: -6.415573596954346
    8. 'dq' → logprob: -6.915573596954346
    9. ' visited' → logprob: -7.040573596954346
    10. 'from' → logprob: -7.290573596954346

Token 315: ' =' (ID: 314)
  Prédit: ' ='
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' =' → logprob: -0.0947125181555748
    2. '=' → logprob: -2.594712495803833
    3. ',' → logprob: -4.344712734222412
    4. ' ' → logprob: -6.844712734222412
    5. '   ' → logprob: -7.469712734222412
    6. '=[]' → logprob: -8.219712257385254
    7. '=[]
' → logprob: -8.219712257385254
    8. 'ed' → logprob: -9.094712257385254
    9. '=set' → logprob: -9.344712257385254
    10. '  ' → logprob: -9.469712257385254

Token 316: ' [' (ID: 723)
  Prédit: 'set'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'set' → logprob: -0.20487703382968903
    2. '{' → logprob: -2.0798771381378174
    3. 'deque' → logprob: -3.4548771381378174
    4. '[' → logprob: -3.7048771381378174
    5. ' set' → logprob: -5.954876899719238
    6. ' [' → logprob: -7.704876899719238
    7. ' {' → logprob: -8.079876899719238
    8. 'default' → logprob: -8.329876899719238
    9. '[n' → logprob: -9.329876899719238
    10. ' deque' → logprob: -9.454876899719238

Token 317: 'False' (ID: 8168)
  Prédit: 'False'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'False' → logprob: -0.0002636006975080818
    2. '0' → logprob: -8.250263214111328
    3. 'True' → logprob: -13.750263214111328
    4. ' False' → logprob: -13.750263214111328
    5. '(False' → logprob: -16.000263214111328
    6. '-' → logprob: -18.125263214111328
    7. 'deque' → logprob: -18.250263214111328
    8. '[' → logprob: -18.750263214111328
    9. 'false' → logprob: -19.750263214111328
    10. '1' → logprob: -19.750263214111328

Token 318: ' for' (ID: 395)
  Prédit: ']'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ']' → logprob: -0.07474111020565033
    2. ']*' → logprob: -2.8247411251068115
    3. ' for' → logprob: -4.699740886688232
    4. 'for' → logprob: -6.199740886688232
    5. ']*(' → logprob: -6.574740886688232
    6. '(s' → logprob: -9.32474136352539
    7. '(n' → logprob: -10.44974136352539
    8. ']+' → logprob: -10.69974136352539
    9. 's' → logprob: -11.32474136352539
    10. '   ' → logprob: -11.82474136352539

Token 319: ' _' (ID: 1175)
  Prédit: '_'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_' → logprob: -0.002192852320149541
    2. ' _' → logprob: -6.127192974090576
    3. ' range' → logprob: -12.627192497253418
    4. 'range' → logprob: -13.002192497253418
    5. '_range' → logprob: -13.877192497253418
    6. ' in' → logprob: -14.377192497253418
    7. ' i' → logprob: -15.127192497253418
    8. ' ' → logprob: -16.127193450927734
    9. '_i' → logprob: -16.252193450927734
    10. 'i' → logprob: -16.752193450927734

Token 320: ' in' (ID: 306)
  Prédit: 'range'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'range' → logprob: -0.048717379570007324
    2. '_' → logprob: -3.423717498779297
    3. ' range' → logprob: -4.673717498779297
    4. 'in' → logprob: -5.548717498779297
    5. ' in' → logprob: -6.423717498779297
    6. '_range' → logprob: -9.798717498779297
    7. '(range' → logprob: -10.298717498779297
    8. '_in' → logprob: -12.173717498779297
    9. ' ' → logprob: -12.673717498779297
    10. ' _' → logprob: -12.923717498779297

Token 321: ' range' (ID: 3352)
  Prédit: 'range'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'range' → logprob: -0.0001584850688232109
    2. ' range' → logprob: -8.750158309936523
    3. '_' → logprob: -17.625158309936523
    4. '	range' → logprob: -18.250158309936523
    5. '(range' → logprob: -18.625158309936523
    6. '   ' → logprob: -18.625158309936523
    7. ' ' → logprob: -19.500158309936523
    8. 'g' → logprob: -19.500158309936523
    9. 'rang' → logprob: -19.750158309936523
    10. '  ' → logprob: -20.375158309936523

Token 322: '(n' (ID: 2406)
  Prédit: '(n'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(n' → logprob: -2.15310683415737e-05
    2. '(' → logprob: -11.250021934509277
    3. '(range' → logprob: -12.750021934509277
    4. 'n' → logprob: -12.875021934509277
    5. 'range' → logprob: -12.875021934509277
    6. ' (' → logprob: -14.625021934509277
    7. ' range' → logprob: -17.00002098083496
    8. '((' → logprob: -17.37502098083496
    9. '(s' → logprob: -18.25002098083496
    10. ' n' → logprob: -18.50002098083496

Token 323: ')]
' (ID: 11587)
  Prédit: ')]'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')]' → logprob: -0.18136753141880035
    2. ')]
' → logprob: -2.1813676357269287
    3. ']' → logprob: -3.0563676357269287
    4. ']
' → logprob: -5.43136739730835
    5. ')]
' → logprob: -6.80636739730835
    6. ')' → logprob: -8.181367874145508
    7. ']
' → logprob: -9.431367874145508
    8. ')]

' → logprob: -10.431367874145508
    9. ' ]' → logprob: -10.931367874145508
    10. '])' → logprob: -12.056367874145508

Token 324: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.13008010387420654
    2. '
' → logprob: -2.255080223083496
    3. 'queue' → logprob: -4.880080223083496
    4. '    
' → logprob: -5.505080223083496
    5. ' queue' → logprob: -5.755080223083496
    6. 'q' → logprob: -7.005080223083496
    7. '  
' → logprob: -7.255080223083496
    8. '	queue' → logprob: -8.255080223083496
    9. 'deque' → logprob: -10.130080223083496
    10. '```' → logprob: -10.130080223083496

Token 325: ' dis' (ID: 829)
  Prédit: 'q'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'q' → logprob: -0.24048732221126556
    2. 'queue' → logprob: -2.1154873371124268
    3. '   ' → logprob: -2.8654873371124268
    4. ' q' → logprob: -4.615487098693848
    5. ' queue' → logprob: -4.740487098693848
    6. 'dq' → logprob: -4.990487098693848
    7. 'd' → logprob: -5.115487098693848
    8. ' ' → logprob: -6.865487098693848
    9. 'deque' → logprob: -7.240487098693848
    10. 'que' → logprob: -7.865487098693848

Token 326: ' =' (ID: 314)
  Prédit: 't'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 't' → logprob: -0.0007419686880894005
    2. ' =' → logprob: -7.750741958618164
    3. '=' → logprob: -9.000741958618164
    4. 'tant' → logprob: -9.250741958618164
    5. '[t' → logprob: -9.875741958618164
    6. 'tan' → logprob: -11.000741958618164
    7. '=t' → logprob: -11.750741958618164
    8. 'ts' → logprob: -12.500741958618164
    9. '   ' → logprob: -13.375741958618164
    10. 'q' → logprob: -13.625741958618164

Token 327: ' [' (ID: 723)
  Prédit: '['
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '[' → logprob: -0.033886462450027466
    2. '[-' → logprob: -3.533886432647705
    3. ' [' → logprob: -5.533886432647705
    4. '[n' → logprob: -9.408886909484863
    5. ' [-' → logprob: -9.533886909484863
    6. '   ' → logprob: -11.408886909484863
    7. '[s' → logprob: -11.783886909484863
    8. '[int' → logprob: -13.408886909484863
    9. '[len' → logprob: -14.283886909484863
    10. '{' → logprob: -15.658886909484863

Token 328: '0' (ID: 15)
  Prédit: '-'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '-' → logprob: -0.023098604753613472
    2. 'math' → logprob: -4.023098468780518
    3. '0' → logprob: -6.023098468780518
    4. 'float' → logprob: -6.398098468780518
    5. '-inf' → logprob: -7.898098468780518
    6. '-m' → logprob: -8.773098945617676
    7. '10' → logprob: -9.023098945617676
    8. '-n' → logprob: -9.773098945617676
    9. 'None' → logprob: -10.398098945617676
    10. 'sys' → logprob: -10.398098945617676

Token 329: ' for' (ID: 395)
  Prédit: ' for'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' for' → logprob: -0.3413625657558441
    2. 'for' → logprob: -1.8413625955581665
    3. ']' → logprob: -2.216362476348877
    4. ']*' → logprob: -3.841362476348877
    5. ' ]' → logprob: -9.966362953186035
    6. '   ' → logprob: -10.466362953186035
    7. '	for' → logprob: -11.091362953186035
    8. ' ' → logprob: -11.091362953186035
    9. ']*(' → logprob: -11.216362953186035
    10. ']+' → logprob: -12.841362953186035

Token 330: ' _' (ID: 1175)
  Prédit: '_'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_' → logprob: -0.002867400413379073
    2. ' _' → logprob: -5.877867221832275
    3. ' range' → logprob: -10.502867698669434
    4. ' in' → logprob: -10.627867698669434
    5. 'range' → logprob: -11.752867698669434
    6. '_range' → logprob: -13.502867698669434
    7. '(range' → logprob: -13.752867698669434
    8. 'in' → logprob: -15.502867698669434
    9. 'n' → logprob: -17.002866744995117
    10. ' i' → logprob: -17.377866744995117

Token 331: ' in' (ID: 306)
  Prédit: 'range'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'range' → logprob: -0.038132719695568085
    2. ' range' → logprob: -3.288132667541504
    3. '(range' → logprob: -9.663132667541504
    4. '_' → logprob: -10.663132667541504
    5. '_range' → logprob: -12.913132667541504
    6. ' in' → logprob: -14.038132667541504
    7. 'n' → logprob: -14.913132667541504
    8. '	range' → logprob: -15.288132667541504
    9. 'in' → logprob: -15.538132667541504
    10. '(' → logprob: -16.03813362121582

Token 332: ' range' (ID: 3352)
  Prédit: 'range'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'range' → logprob: -0.0019307781476527452
    2. ' range' → logprob: -6.2519307136535645
    3. '(range' → logprob: -13.501931190490723
    4. 'n' → logprob: -14.126931190490723
    5. '(n' → logprob: -17.626930236816406
    6. '	range' → logprob: -18.251930236816406
    7. '_' → logprob: -19.251930236816406
    8. 'rang' → logprob: -19.501930236816406
    9. '   ' → logprob: -19.501930236816406
    10. '
' → logprob: -19.751930236816406

Token 333: '(n' (ID: 2406)
  Prédit: '(n'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(n' → logprob: -0.001346423290669918
    2. 'n' → logprob: -6.626346588134766
    3. '(' → logprob: -11.376346588134766
    4. 'range' → logprob: -12.501346588134766
    5. ' (' → logprob: -12.876346588134766
    6. ' n' → logprob: -14.376346588134766
    7. '(range' → logprob: -14.751346588134766
    8. '(s' → logprob: -14.751346588134766
    9. '
' → logprob: -15.126346588134766
    10. ' range' → logprob: -15.626346588134766

Token 334: ')]
' (ID: 11587)
  Prédit: ')]'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')]' → logprob: -0.4291502833366394
    2. ']' → logprob: -1.1791503429412842
    3. ')]
' → logprob: -3.804150342941284
    4. ']
' → logprob: -4.179150104522705
    5. ')' → logprob: -5.679150104522705
    6. '   ' → logprob: -8.804150581359863
    7. ')]
' → logprob: -9.304150581359863
    8. ']
' → logprob: -9.804150581359863
    9. ' ]' → logprob: -10.554150581359863
    10. '])' → logprob: -10.804150581359863

Token 335: '   ' (ID: 271)
  Prédit: '
'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '
' → logprob: -0.1637120097875595
    2. '   ' → logprob: -1.9137120246887207
    3. '    
' → logprob: -6.663712024688721
    4. 'queue' → logprob: -7.163712024688721
    5. '  
' → logprob: -8.038711547851562
    6. 'q' → logprob: -8.413711547851562
    7. '
' → logprob: -8.663711547851562
    8. ' queue' → logprob: -8.913711547851562
    9. '	queue' → logprob: -9.038711547851562
    10. 's' → logprob: -9.288711547851562

Token 336: ' que' (ID: 661)
  Prédit: 'q'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'q' → logprob: -0.29331427812576294
    2. '   ' → logprob: -1.6683142185211182
    3. 'queue' → logprob: -3.168314218521118
    4. ' q' → logprob: -4.293314456939697
    5. 'dq' → logprob: -5.543314456939697
    6. ' queue' → logprob: -5.793314456939697
    7. '	q' → logprob: -7.418314456939697
    8. '
' → logprob: -7.668314456939697
    9. ' ' → logprob: -7.918314456939697
    10. 'd' → logprob: -8.043313980102539

Token 337: ' =' (ID: 314)
  Prédit: 'ue'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'ue' → logprob: -0.2684630751609802
    2. '=' → logprob: -2.143463134765625
    3. ' =' → logprob: -2.143463134765625
    4. 'u' → logprob: -7.393463134765625
    5. 'e' → logprob: -8.393463134765625
    6. 'uer' → logprob: -10.268463134765625
    7. '```' → logprob: -11.143463134765625
    8. '   ' → logprob: -11.268463134765625
    9. '.append' → logprob: -12.018463134765625
    10. 'que' → logprob: -12.268463134765625

Token 338: ' deque' (ID: 90347)
  Prédit: 'deque'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'deque' → logprob: -5.0259150157216936e-05
    2. ' deque' → logprob: -10.00005054473877
    3. 'queue' → logprob: -12.25005054473877
    4. 'collections' → logprob: -17.125049591064453
    5. '[' → logprob: -19.250049591064453
    6. 'de' → logprob: -20.625049591064453
    7. 'Deque' → logprob: -20.625049591064453
    8. '[]' → logprob: -21.125049591064453
    9. ' ' → logprob: -21.375049591064453
    10. '   ' → logprob: -21.375049591064453

Token 339: '([' (ID: 5194)
  Prédit: '(['
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '([' → logprob: -0.004364132881164551
    2. '()
' → logprob: -6.004364013671875
    3. '()' → logprob: -6.754364013671875
    4. '([(' → logprob: -7.254364013671875
    5. '[(' → logprob: -12.254364013671875
    6. '(s' → logprob: -12.754364013671875
    7. '((' → logprob: -13.129364013671875
    8. '(' → logprob: -13.879364013671875
    9. '[s' → logprob: -13.879364013671875
    10. '()

' → logprob: -14.004364013671875

Token 340: 's' (ID: 82)
  Prédit: 's'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 's' → logprob: -4.4060561776859686e-05
    2. '(s' → logprob: -10.125043869018555
    3. ' s' → logprob: -12.500043869018555
    4. '(' → logprob: -16.375043869018555
    5. '   ' → logprob: -16.750043869018555
    6. '{s' → logprob: -17.125043869018555
    7. '[s' → logprob: -18.500043869018555
    8. ' (' → logprob: -18.625043869018555
    9. '	s' → logprob: -18.625043869018555
    10. '_s' → logprob: -19.000043869018555

Token 341: '])
' (ID: 5169)
  Prédit: '])'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '])' → logprob: -0.018188223242759705
    2. '])
' → logprob: -4.018187999725342
    3. '])
' → logprob: -10.2681884765625
    4. ' ])' → logprob: -13.2681884765625
    5. '])

' → logprob: -13.8931884765625
    6. ')])' → logprob: -15.2681884765625
    7. ']);' → logprob: -15.3931884765625
    8. ')' → logprob: -16.0181884765625
    9. '])]' → logprob: -16.1431884765625
    10. ' ])
' → logprob: -16.5181884765625

Token 342: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.02723841555416584
    2. '
' → logprob: -4.902238368988037
    3. ' while' → logprob: -4.902238368988037
    4. 'while' → logprob: -5.027238368988037
    5. '    
' → logprob: -5.902238368988037
    6. '	while' → logprob: -6.277238368988037
    7. ' went' → logprob: -8.652238845825195
    8. '  
' → logprob: -8.777238845825195
    9. ')' → logprob: -9.152238845825195
    10. '<|end|>' → logprob: -9.402238845825195

Token 343: ' went' (ID: 5981)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -1.0429576635360718
    2. 'went' (adapté à ' went') → logprob: -1.0429576635360718
    3. 'while' → logprob: -1.2929576635360718
    4. ' went' → logprob: -4.292957782745361
    5. ' while' → logprob: -6.167957782745361
    6. 'w' → logprob: -6.542957782745361
    7. '	w' → logprob: -6.667957782745361
    8. '	while' → logprob: -6.917957782745361
    9. '
' → logprob: -8.042957305908203
    10. 'visited' → logprob: -8.417957305908203

Token 344: '[s' (ID: 24177)
  Prédit: '[s'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '[s' → logprob: -0.04868638142943382
    2. '[' → logprob: -3.0486862659454346
    3. '   ' → logprob: -9.423686027526855
    4. ' [' → logprob: -12.048686027526855
    5. '
' → logprob: -12.798686027526855
    6. '(s' → logprob: -13.298686027526855
    7. '[w' → logprob: -14.048686027526855
    8. '    
' → logprob: -14.173686027526855
    9. '

' → logprob: -14.298686027526855
    10. 's' → logprob: -14.548686027526855

Token 345: ']' (ID: 60)
  Prédit: ']'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ']' → logprob: -6.384836888173595e-05
    2. ']=' → logprob: -9.7500638961792
    3. ' ]' → logprob: -12.1250638961792
    4. '=' → logprob: -17.250062942504883
    5. '   ' → logprob: -18.250062942504883
    6. '']' → logprob: -18.375062942504883
    7. 'True' → logprob: -19.000062942504883
    8. '[' → logprob: -19.125062942504883
    9. ']
' → logprob: -19.125062942504883
    10. ']]' → logprob: -19.625062942504883

Token 346: ' =' (ID: 314)
  Prédit: '='
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '=' → logprob: -0.0299210324883461
    2. ' =' → logprob: -3.529921054840088
    3. ']' → logprob: -9.02992057800293
    4. ']=' → logprob: -10.27992057800293
    5. '=True' → logprob: -11.02992057800293
    6. '=False' → logprob: -16.27992057800293
    7. ',' → logprob: -16.77992057800293
    8. '[' → logprob: -16.77992057800293
    9. ' ' → logprob: -16.90492057800293
    10. ')' → logprob: -17.65492057800293

Token 347: ' True' (ID: 6432)
  Prédit: 'True'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'True' → logprob: -0.0031777136027812958
    2. ' True' → logprob: -5.753177642822266
    3. '(True' → logprob: -17.503177642822266
    4. '1' → logprob: -19.128177642822266
    5. '=True' → logprob: -19.878177642822266
    6. 'Tr' → logprob: -20.253177642822266
    7. ' ' → logprob: -21.253177642822266
    8. 'False' → logprob: -21.753177642822266
    9. 'T' → logprob: -22.003177642822266
    10. '0' → logprob: -22.503177642822266

Token 348: '
' (ID: 198)
  Prédit: '
'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '
' → logprob: -0.021252764388918877
    2. '   ' → logprob: -4.146252632141113
    3. '    
' → logprob: -6.521252632141113
    4. ' while' → logprob: -6.896252632141113
    5. 'while' → logprob: -7.271252632141113
    6. '	
' → logprob: -7.771252632141113
    7. '	while' → logprob: -7.771252632141113
    8. '  
' → logprob: -8.146252632141113
    9. '<|end|>' → logprob: -8.146252632141113
    10. ')' → logprob: -8.646252632141113

Token 349: '   ' (ID: 271)
  Prédit: '
'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '
' → logprob: -0.4339861571788788
    2. '   ' → logprob: -1.4339861869812012
    3. ' while' → logprob: -2.933986186981201
    4. 'while' → logprob: -3.433986186981201
    5. '	while' → logprob: -4.058986186981201
    6. '    
' → logprob: -5.308986186981201
    7. ')' → logprob: -6.433986186981201
    8. '	
' → logprob: -6.808986186981201
    9. '  
' → logprob: -6.933986186981201
    10. ' 
' → logprob: -7.308986186981201

Token 350: ' def' (ID: 1056)
  Prédit: 'while'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'while' → logprob: -0.0026975206565111876
    2. '   ' → logprob: -6.502697467803955
    3. ' while' → logprob: -6.752697467803955
    4. '	while' → logprob: -11.127697944641113
    5. '
' → logprob: -11.377697944641113
    6. 'While' → logprob: -15.877697944641113
    7. '```' → logprob: -15.877697944641113
    8. ' ' → logprob: -16.127696990966797
    9. '  ' → logprob: -16.252696990966797
    10. '    
' → logprob: -16.377696990966797

Token 351: ' visit' (ID: 4030)
  Prédit: ' visit'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' visit' → logprob: -1.8582801818847656
    2. '_' → logprob: -2.1082801818847656
    3. ' inner' → logprob: -2.2332801818847656
    4. 'visit' → logprob: -2.9832801818847656
    5. ' loop' → logprob: -3.1082801818847656
    6. ' bfs' → logprob: -3.1082801818847656
    7. ' step' → logprob: -3.2332801818847656
    8. 'inner' → logprob: -3.2332801818847656
    9. 'q' → logprob: -3.4832801818847656
    10. ' _' → logprob: -3.6082801818847656

Token 352: '_iteration' (ID: 161656)
  Prédit: '():
'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '():
' → logprob: -0.9735446572303772
    2. '(u' → logprob: -1.2235445976257324
    3. '():' → logprob: -1.2235445976257324
    4. '(v' → logprob: -3.5985445976257324
    5. '(node' → logprob: -5.598544597625732
    6. '(x' → logprob: -5.973544597625732
    7. '(q' → logprob: -9.47354507446289
    8. '(i' → logprob: -9.47354507446289
    9. '(vertex' → logprob: -10.84854507446289
    10. '(n' → logprob: -11.22354507446289

Token 353: '(queue' (ID: 72316)
  Prédit: '():
'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '():
' → logprob: -0.5774242281913757
    2. '():' → logprob: -0.8274242281913757
    3. '()' → logprob: -6.577424049377441
    4. '():
' → logprob: -9.327424049377441
    5. ' ():' → logprob: -13.577424049377441
    6. '():

' → logprob: -13.577424049377441
    7. '(' → logprob: -14.577424049377441
    8. ' ()' → logprob: -16.202425003051758
    9. '()):
' → logprob: -16.452425003051758
    10. '()`' → logprob: -17.452425003051758

Token 354: '):
' (ID: 1883)
  Prédit: '):'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '):' → logprob: -0.2660522758960724
    2. '()' → logprob: -2.01605224609375
    3. '():' → logprob: -2.76605224609375
    4. '):
' → logprob: -3.76605224609375
    5. '()):
' → logprob: -4.89105224609375
    6. '():
' → logprob: -5.64105224609375
    7. ')' → logprob: -5.89105224609375
    8. '(' → logprob: -8.26605224609375
    9. ' ):' → logprob: -10.26605224609375
    10. ':' → logprob: -10.39105224609375

Token 355: '       ' (ID: 309)
  Prédit: '       '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '       ' → logprob: -0.0018293926259502769
    2. '   ' → logprob: -6.876829624176025
    3. '    ' → logprob: -8.376829147338867
    4. '        
' → logprob: -8.751829147338867
    5. '	   ' → logprob: -9.626829147338867
    6. '    
' → logprob: -9.626829147338867
    7. ':' → logprob: -10.126829147338867
    8. ',' → logprob: -10.251829147338867
    9. '      ' → logprob: -10.876829147338867
    10. '	' → logprob: -11.001829147338867

Token 356: ' go' (ID: 810)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.27122271060943604
    2. ' if' → logprob: -2.2712225914001465
    3. '       ' → logprob: -2.7712225914001465
    4. ' while' → logprob: -3.6462225914001465
    5. 'if' → logprob: -4.3962225914001465
    6. ' queue' → logprob: -5.1462225914001465
    7. 'while' → logprob: -5.1462225914001465
    8. ' try' → logprob: -5.6462225914001465
    9. 'try' → logprob: -5.7712225914001465
    10. ' q' → logprob: -5.8962225914001465

Token 357: ' =' (ID: 314)
  Prédit: ' ='
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' =' → logprob: -0.441113144159317
    2. '=' → logprob: -1.1911131143569946
    3. 'al' → logprob: -4.066112995147705
    4. 't' → logprob: -4.941112995147705
    5. '   ' → logprob: -5.191112995147705
    6. 'def' → logprob: -5.566112995147705
    7. 'q' → logprob: -6.441112995147705
    8. 'r' → logprob: -6.566112995147705
    9. 'to' → logprob: -6.566112995147705
    10. 'd' → logprob: -6.691112995147705

Token 358: ' queue' (ID: 13661)
  Prédit: 'next'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'next' → logprob: -1.0432593822479248
    2. 'queue' → logprob: -1.1682593822479248
    3. 'lambda' → logprob: -1.5432593822479248
    4. '(lambda' → logprob: -3.543259382247925
    5. 'len' → logprob: -3.918259382247925
    6. 'list' → logprob: -3.918259382247925
    7. 'not' → logprob: -4.043259620666504
    8. '(next' → logprob: -4.793259620666504
    9. '(queue' → logprob: -5.043259620666504
    10. 'deque' → logprob: -5.543259620666504

Token 359: '.pop' (ID: 15746)
  Prédit: '.p'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '.p' → logprob: -0.00291887647472322
    2. ' and' → logprob: -6.627918720245361
    3. '.pop' → logprob: -7.752918720245361
    4. 'and' → logprob: -7.877918720245361
    5. '   ' → logprob: -8.00291919708252
    6. 'p' → logprob: -8.25291919708252
    7. '.append' → logprob: -9.37791919708252
    8. '.' → logprob: -10.25291919708252
    9. '```' → logprob: -10.62791919708252
    10. ':
' → logprob: -11.62791919708252

Token 360: '()
' (ID: 1234)
  Prédit: '()'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '()' → logprob: -0.18140174448490143
    2. 'left' → logprob: -1.8064017295837402
    3. 'le' → logprob: -7.30640172958374
    4. '()
' → logprob: -8.306402206420898
    5. '())' → logprob: -8.306402206420898
    6. 'lef' → logprob: -8.931402206420898
    7. 'Left' → logprob: -9.306402206420898
    8. 'right' → logprob: -9.306402206420898
    9. '(' → logprob: -10.181402206420898
    10. ')' → logprob: -10.556402206420898

Token 361: '       ' (ID: 309)
  Prédit: '       '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '       ' → logprob: -0.48395174741744995
    2. '
' → logprob: -1.3589518070220947
    3. '   ' → logprob: -2.7339518070220947
    4. '()
' → logprob: -3.6089518070220947
    5. ' if' → logprob: -4.233951568603516
    6. '()' → logprob: -5.483951568603516
    7. ';' → logprob: -5.983951568603516
    8. ' for' → logprob: -6.733951568603516
    9. ' while' → logprob: -6.733951568603516
    10. ' and' → logprob: -6.858951568603516

Token 362: ' yield' (ID: 14376)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.3877887725830078
    2. 'for' → logprob: -1.3877887725830078
    3. ' for' → logprob: -2.887788772583008
    4. 'if' → logprob: -5.012788772583008
    5. 'go' → logprob: -5.137788772583008
    6. ' if' → logprob: -7.012788772583008
    7. '       ' → logprob: -7.262788772583008
    8. 'que' → logprob: -7.887788772583008
    9. ' go' → logprob: -8.012788772583008
    10. 'return' → logprob: -8.262788772583008

Token 363: ' go' (ID: 810)
  Prédit: 'go'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'go' → logprob: -0.23446717858314514
    2. ' go' → logprob: -1.6094671487808228
    3. '(go' → logprob: -5.734467029571533
    4. ' from' → logprob: -5.984467029571533
    5. 'from' → logprob: -6.109467029571533
    6. 'queue' → logprob: -8.609467506408691
    7. '	go' → logprob: -8.609467506408691
    8. ' que' → logprob: -8.734467506408691
    9. 'que' → logprob: -8.984467506408691
    10. 'g' → logprob: -9.359467506408691

Token 364: '
' (ID: 198)
  Prédit: '       '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '       ' → logprob: -0.2666611075401306
    2. '<|end|>' → logprob: -2.2666611671447754
    3. '   ' → logprob: -2.7666611671447754
    4. ',' → logprob: -3.7666611671447754
    5. '
' → logprob: -3.8916611671447754
    6. '<|end|>' → logprob: -5.516661167144775
    7. '    ' → logprob: -5.766661167144775
    8. ',
' → logprob: -6.141661167144775
    9. '        ' → logprob: -6.391661167144775
    10. '    
' → logprob: -6.391661167144775

Token 365: '   ' (ID: 271)
  Prédit: '       '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '       ' → logprob: -0.10149195790290833
    2. '   ' → logprob: -2.351491928100586
    3. ',' → logprob: -8.101491928100586
    4. '
' → logprob: -8.601491928100586
    5. '<|end|>' → logprob: -8.601491928100586
    6. '    
' → logprob: -8.851491928100586
    7. ',
' → logprob: -9.601491928100586
    8. '    ' → logprob: -9.851491928100586
    9. '           ' → logprob: -9.976491928100586
    10. '        
' → logprob: -10.101491928100586

Token 366: ' while' (ID: 2049)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.0009112251573242247
    2. '
' → logprob: -7.875911235809326
    3. ' while' → logprob: -8.375910758972168
    4. '    
' → logprob: -8.375910758972168
    5. 'while' (adapté à ' while') → logprob: -11.000910758972168
    6. ' 
' → logprob: -11.500910758972168
    7. '    ' → logprob: -11.875910758972168
    8. ',' → logprob: -12.000910758972168
    9. '  
' → logprob: -12.125910758972168
    10. '	while' → logprob: -12.375910758972168

Token 367: ' que' (ID: 661)
  Prédit: ' que'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' que' → logprob: -0.1239246055483818
    2. 'que' → logprob: -2.248924493789673
    3. ' len' → logprob: -4.623924732208252
    4. 'True' → logprob: -7.623924732208252
    5. 'len' → logprob: -7.748924732208252
    6. '(len' → logprob: -9.373924255371094
    7. ' True' → logprob: -9.748924255371094
    8. '(' → logprob: -9.873924255371094
    9. ' not' → logprob: -10.498924255371094
    10. ' went' → logprob: -10.748924255371094

Token 368: ':
' (ID: 734)
  Prédit: ':'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ':' → logprob: -0.0033515440300107002
    2. ':
' → logprob: -5.75335168838501
    3. ' and' → logprob: -10.003351211547852
    4. '.pop' → logprob: -10.003351211547852
    5. '):' → logprob: -10.378351211547852
    6. '():' → logprob: -11.378351211547852
    7. '.append' → logprob: -11.503351211547852
    8. ' :' → logprob: -12.378351211547852
    9. '>:' → logprob: -12.753351211547852
    10. '   ' → logprob: -12.753351211547852

Token 369: '       ' (ID: 309)
  Prédit: '       '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '       ' → logprob: -0.0013641661498695612
    2. ' for' → logprob: -7.626364231109619
    3. ' s' → logprob: -8.376363754272461
    4. ',' → logprob: -9.001363754272461
    5. '   ' → logprob: -9.001363754272461
    6. ' go' → logprob: -9.376363754272461
    7. ' x' → logprob: -9.751363754272461
    8. '      ' → logprob: -10.251363754272461
    9. '        
' → logprob: -10.251363754272461
    10. '    ' → logprob: -10.376363754272461

Token 370: ' for' (ID: 395)
  Prédit: 'u'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'u' → logprob: -0.4298136532306671
    2. 'v' → logprob: -1.4298136234283447
    3. ' u' → logprob: -3.8048136234283447
    4. 'go' → logprob: -3.8048136234283447
    5. 'cur' → logprob: -4.054813861846924
    6. 'node' → logprob: -4.429813861846924
    7. 'for' (adapté à ' for') → logprob: -4.804813861846924
    8. '   ' → logprob: -4.929813861846924
    9. 'x' → logprob: -5.054813861846924
    10. ' v' → logprob: -5.304813861846924

Token 371: ' go' (ID: 810)
  Prédit: 'node'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'node' → logprob: -0.65977942943573
    2. 'x' → logprob: -1.53477942943573
    3. 'v' → logprob: -1.78477942943573
    4. ' node' → logprob: -3.2847795486450195
    5. '_' → logprob: -3.6597795486450195
    6. '_node' → logprob: -4.2847795486450195
    7. 'u' → logprob: -5.0347795486450195
    8. 'go' → logprob: -5.2847795486450195
    9. ' v' → logprob: -5.5347795486450195
    10. ' x' → logprob: -6.6597795486450195

Token 372: ' in' (ID: 306)
  Prédit: ' in'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' in' → logprob: -0.004651911091059446
    2. 'in' → logprob: -5.37965202331543
    3. ' ' → logprob: -10.62965202331543
    4. '	in' → logprob: -13.37965202331543
    5. ' ' → logprob: -14.00465202331543
    6. '
' → logprob: -14.00465202331543
    7. '   ' → logprob: -14.50465202331543
    8. '_in' → logprob: -14.50465202331543
    9. ',' → logprob: -14.62965202331543
    10. 's' → logprob: -14.75465202331543

Token 373: ' visit' (ID: 4030)
  Prédit: 'visit'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'visit' → logprob: -0.0036477106623351574
    2. ' visit' → logprob: -5.628647804260254
    3. '   ' → logprob: -10.378647804260254
    4. 'b' → logprob: -12.378647804260254
    5. 'visited' → logprob: -12.628647804260254
    6. 'list' → logprob: -13.003647804260254
    7. 'queue' → logprob: -13.628647804260254
    8. ' ' → logprob: -13.878647804260254
    9. 'deque' → logprob: -13.878647804260254
    10. '  ' → logprob: -14.253647804260254

Token 374: '_iteration' (ID: 161656)
  Prédit: '_iteration'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_iteration' → logprob: -6.392202976712724e-06
    2. '_iterator' → logprob: -13.500006675720215
    3. '_iterations' → logprob: -13.750006675720215
    4. '(iter' → logprob: -14.125006675720215
    5. 'ation' → logprob: -14.125006675720215
    6. '(s' → logprob: -14.875006675720215
    7. '
' → logprob: -15.125006675720215
    8. 's' → logprob: -15.250006675720215
    9. '_iter' → logprob: -15.250006675720215
    10. '_' → logprob: -15.375006675720215

Token 375: '(' (ID: 7)
  Prédit: '('
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(' → logprob: -6.704273118884885e-07
    2. '((' → logprob: -15.375000953674316
    3. ' (' → logprob: -15.500000953674316
    4. '(queue' → logprob: -16.375
    5. '(de' → logprob: -17.25
    6. '   ' → logprob: -19.25
    7. '(s' → logprob: -19.25
    8. '(qu' → logprob: -19.375
    9. '(
' → logprob: -19.75
    10. '(re' → logprob: -19.75

Token 376: 'que' (ID: 1126)
  Prédit: 'que'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'que' → logprob: -0.0002251125843031332
    2. ' que' → logprob: -8.625225067138672
    3. 'deque' → logprob: -11.000225067138672
    4. '(' → logprob: -11.125225067138672
    5. '   ' → logprob: -12.375225067138672
    6. ')' → logprob: -13.000225067138672
    7. 'qu' → logprob: -14.125225067138672
    8. '     ' → logprob: -14.125225067138672
    9. '```' → logprob: -14.125225067138672
    10. '[' → logprob: -14.125225067138672

Token 377: '):
' (ID: 1883)
  Prédit: '):
'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '):
' → logprob: -0.14590401947498322
    2. '):' → logprob: -2.145904064178467
    3. ':' → logprob: -4.520904064178467
    4. ':
' → logprob: -5.145904064178467
    5. '       ' → logprob: -6.520904064178467
    6. '():
' → logprob: -8.895903587341309
    7. '   ' → logprob: -9.020903587341309
    8. ')' → logprob: -9.020903587341309
    9. '           ' → logprob: -9.145903587341309
    10. '):
' → logprob: -9.520903587341309

Token 378: '           ' (ID: 352)
  Prédit: '       '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '       ' → logprob: -0.10894445329904556
    2. '           ' → logprob: -2.3589444160461426
    3. ':' → logprob: -5.108944416046143
    4. ' =' → logprob: -7.483944416046143
    5. ' for' → logprob: -7.983944416046143
    6. ' go' → logprob: -7.983944416046143
    7. ':
' → logprob: -8.2339448928833
    8. ',' → logprob: -8.3589448928833
    9. '   ' → logprob: -8.6089448928833
    10. '=' → logprob: -9.2339448928833

Token 379: ' for' (ID: 395)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -1.0205929279327393
    2. ' for' → logprob: -1.6455929279327393
    3. 'for' (adapté à ' for') → logprob: -2.2705929279327393
    4. 'dis' → logprob: -2.5205929279327393
    5. 'v' → logprob: -2.6455929279327393
    6. ' dis' → logprob: -3.8955929279327393
    7. '           ' → logprob: -3.8955929279327393
    8. 'cur' → logprob: -4.27059268951416
    9. 'ne' → logprob: -4.39559268951416
    10. '       ' → logprob: -4.52059268951416

Token 380: ' nxt' (ID: 160200)
  Prédit: 'v'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'v' → logprob: -1.7034087181091309
    2. ' nxt' → logprob: -1.7034087181091309
    3. 'nx' → logprob: -1.8284087181091309
    4. 'ne' → logprob: -1.9534087181091309
    5. 'n' → logprob: -2.328408718109131
    6. 'w' → logprob: -3.078408718109131
    7. 'to' → logprob: -3.328408718109131
    8. 'nv' → logprob: -3.953408718109131
    9. 'nei' → logprob: -3.953408718109131
    10. ' v' → logprob: -4.078408718109131

Token 381: ' in' (ID: 306)
  Prédit: ' in'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' in' → logprob: -0.018160473555326462
    2. 'in' → logprob: -4.018160343170166
    3. ' ' → logprob: -12.518160820007324
    4. '	in' → logprob: -12.893160820007324
    5. 'n' → logprob: -13.393160820007324
    6. 's' → logprob: -14.268160820007324
    7. '  ' → logprob: -14.393160820007324
    8. '   ' → logprob: -14.518160820007324
    9. '_in' → logprob: -15.018160820007324
    10. ',' → logprob: -15.768160820007324

Token 382: ' filter' (ID: 6690)
  Prédit: 'g'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'g' → logprob: -0.000714935187716037
    2. ' g' → logprob: -7.2507147789001465
    3. '   ' → logprob: -13.250715255737305
    4. '[g' → logprob: -13.500715255737305
    5. '	g' → logprob: -14.125715255737305
    6. 'go' → logprob: -14.625715255737305
    7. ' reversed' → logprob: -15.500715255737305
    8. 'range' → logprob: -15.500715255737305
    9. 're' → logprob: -16.125715255737305
    10. '(g' → logprob: -16.625715255737305

Token 383: '(lambda' (ID: 43341)
  Prédit: '(lambda'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(lambda' → logprob: -0.0008398807840421796
    2. 'lambda' → logprob: -7.750839710235596
    3. '(part' → logprob: -8.125840187072754
    4. 'partial' → logprob: -9.750840187072754
    5. '(' → logprob: -10.500840187072754
    6. '(None' → logprob: -11.375840187072754
    7. '(go' → logprob: -11.625840187072754
    8. '(not' → logprob: -12.500840187072754
    9. '   ' → logprob: -14.000840187072754
    10. '((' → logprob: -14.250840187072754

Token 384: ' x' (ID: 1215)
  Prédit: 'lambda'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'lambda' → logprob: -0.5528597831726074
    2. '(lambda' → logprob: -0.9278597831726074
    3. ' lambda' → logprob: -3.8028597831726074
    4. ' (' → logprob: -5.677859783172607
    5. 'partial' → logprob: -6.302859783172607
    6. 'go' → logprob: -7.677859783172607
    7. ' partial' → logprob: -8.177860260009766
    8. 'None' → logprob: -8.177860260009766
    9. 'not' → logprob: -8.677860260009766
    10. '(' → logprob: -8.927860260009766

Token 385: ':' (ID: 25)
  Prédit: ':'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ':' → logprob: -0.16044123470783234
    2. ' :' → logprob: -1.910441279411316
    3. ',' → logprob: -9.285441398620605
    4. ':not' → logprob: -9.910441398620605
    5. 'not' → logprob: -11.535441398620605
    6. 's' → logprob: -11.535441398620605
    7. ':
' → logprob: -11.910441398620605
    8. '   ' → logprob: -12.160441398620605
    9. ' not' → logprob: -12.285441398620605
    10. ' in' → logprob: -12.660441398620605

Token 386: ' not' (ID: 625)
  Prédit: 'not'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'not' → logprob: -0.022090228274464607
    2. 'lambda' → logprob: -4.522090435028076
    3. '(not' → logprob: -5.022090435028076
    4. ' not' → logprob: -5.647090435028076
    5. 'went' → logprob: -8.147089958190918
    6. '(lambda' → logprob: -8.272089958190918
    7. '   ' → logprob: -8.522089958190918
    8. 'go' → logprob: -10.772089958190918
    9. ' lambda' → logprob: -11.022089958190918
    10. '(' → logprob: -11.397089958190918

Token 387: ' went' (ID: 5981)
  Prédit: ' went'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' went' → logprob: -0.20141714811325073
    2. 'went' → logprob: -1.7014172077178955
    3. 'go' → logprob: -14.076416969299316
    4. 'w' → logprob: -14.076416969299316
    5. '   ' → logprob: -14.451416969299316
    6. ' go' → logprob: -14.576416969299316
    7. 'visited' → logprob: -14.576416969299316
    8. ' visited' → logprob: -14.701416969299316
    9. ' ' → logprob: -15.201416969299316
    10. '
' → logprob: -16.451417922973633

Token 388: '[x' (ID: 17295)
  Prédit: '[x'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '[x' → logprob: -0.0001329791557509452
    2. '[n' → logprob: -9.00013256072998
    3. '[' → logprob: -11.62513256072998
    4. ' [' → logprob: -15.25013256072998
    5. '
' → logprob: -15.87513256072998
    6. '[
' → logprob: -15.87513256072998
    7. '[q' → logprob: -18.125133514404297
    8. '[int' → logprob: -18.250133514404297
    9. '[next' → logprob: -18.375133514404297
    10. '[i' → logprob: -18.500133514404297

Token 389: '],' (ID: 2155)
  Prédit: '],'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '],' → logprob: -7.517272024415433e-05
    2. ' ],' → logprob: -10.250075340270996
    3. '   ' → logprob: -11.500075340270996
    4. ',' → logprob: -11.500075340270996
    5. ']' → logprob: -12.250075340270996
    6. '],
' → logprob: -12.500075340270996
    7. '       ' → logprob: -13.000075340270996
    8. '           ' → logprob: -13.000075340270996
    9. 'and' → logprob: -13.625075340270996
    10. ':],' → logprob: -14.000075340270996

Token 390: ' g' (ID: 329)
  Prédit: 'g'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'g' → logprob: -0.048948872834444046
    2. ' g' → logprob: -3.0489487648010254
    3. '   ' → logprob: -8.173949241638184
    4. '	g' → logprob: -10.048949241638184
    5. '           ' → logprob: -11.673949241638184
    6. '       ' → logprob: -11.798949241638184
    7. ' ' → logprob: -12.423949241638184
    8. '                   ' → logprob: -12.923949241638184
    9. '  ' → logprob: -13.048949241638184
    10. '[g' → logprob: -13.423949241638184

Token 391: '[' (ID: 58)
  Prédit: '['
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '[' → logprob: -1.282920129597187e-05
    2. 'go' → logprob: -12.000012397766113
    3. '(go' → logprob: -13.000012397766113
    4. '[get' → logprob: -14.375012397766113
    5. ' [' → logprob: -14.500012397766113
    6. ')' → logprob: -14.750012397766113
    7. '[
' → logprob: -15.000012397766113
    8. '   ' → logprob: -15.125012397766113
    9. '[g' → logprob: -15.375012397766113
    10. ' go' → logprob: -15.500012397766113

Token 392: 'go' (ID: 2319)
  Prédit: 'go'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'go' → logprob: -0.0006319015519693494
    2. ' go' → logprob: -8.125632286071777
    3. '[' → logprob: -8.625632286071777
    4. '(go' → logprob: -9.375632286071777
    5. 'o' → logprob: -9.750632286071777
    6. '	go' → logprob: -12.750632286071777
    7. '"go' → logprob: -12.875632286071777
    8. ']' → logprob: -13.500632286071777
    9. '
' → logprob: -13.875632286071777
    10. '_go' → logprob: -14.125632286071777

Token 393: ']):
' (ID: 51989)
  Prédit: ']):
'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ']):
' → logprob: -0.16787433624267578
    2. ']):' → logprob: -1.9178743362426758
    3. '):
' → logprob: -5.042874336242676
    4. '):' → logprob: -7.792874336242676
    5. ']' → logprob: -8.292874336242676
    6. '           ' → logprob: -8.917874336242676
    7. '       ' → logprob: -9.292874336242676
    8. '   ' → logprob: -9.667874336242676
    9. '])):
' → logprob: -10.292874336242676
    10. '])' → logprob: -10.667874336242676

Token 394: '               ' (ID: 506)
  Prédit: '               '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '               ' → logprob: -0.005614819470793009
    2. ':
' → logprob: -6.630614757537842
    3. '           ' → logprob: -6.755614757537842
    4. '):
' → logprob: -6.755614757537842
    5. ' que' → logprob: -7.255614757537842
    6. ':' → logprob: -8.255615234375
    7. '       ' → logprob: -8.505615234375
    8. '):' → logprob: -9.130615234375
    9. ')' → logprob: -9.255615234375
    10. '   ' → logprob: -9.380615234375

Token 395: ' dis' (ID: 829)
  Prédit: '               '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '               ' → logprob: -1.1534674167633057
    2. ' went' → logprob: -1.2784674167633057
    3. ' que' → logprob: -1.5284674167633057
    4. '           ' → logprob: -2.7784674167633057
    5. '                   ' → logprob: -2.7784674167633057
    6. '   ' → logprob: -3.4034674167633057
    7. ' visited' → logprob: -4.903467178344727
    8. 'went' → logprob: -5.153467178344727
    9. 'que' → logprob: -5.403467178344727
    10. ' ' → logprob: -6.028467178344727

Token 396: '[n' (ID: 15433)
  Prédit: '[n'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '[n' → logprob: -0.0005979505367577076
    2. '[' → logprob: -8.000597953796387
    3. '[x' → logprob: -9.000597953796387
    4. '[next' → logprob: -10.375597953796387
    5. 'n' → logprob: -10.500597953796387
    6. '
' → logprob: -11.500597953796387
    7. ',' → logprob: -12.000597953796387
    8. ' =' → logprob: -12.000597953796387
    9. '```' → logprob: -12.125597953796387
    10. ']' → logprob: -12.250597953796387

Token 397: 'xt' (ID: 711)
  Prédit: 'xt'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'xt' → logprob: -0.001973838312551379
    2. 'x' → logprob: -6.876973628997803
    3. 't' → logprob: -7.126973628997803
    4. '[n' → logprob: -9.626974105834961
    5. '[x' → logprob: -10.876974105834961
    6. '[' → logprob: -11.126974105834961
    7. ']' → logprob: -11.126974105834961
    8. '[t' → logprob: -11.501974105834961
    9. '[next' → logprob: -12.126974105834961
    10. ' nxt' → logprob: -13.376974105834961

Token 398: ']' (ID: 60)
  Prédit: ']'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ']' → logprob: -0.0031471773982048035
    2. ']=' → logprob: -5.878147125244141
    3. ' ]' → logprob: -8.75314712524414
    4. '=' → logprob: -9.00314712524414
    5. ' =' → logprob: -10.12814712524414
    6. ')' → logprob: -11.37814712524414
    7. '   ' → logprob: -12.50314712524414
    8. '[' → logprob: -12.75314712524414
    9. '],' → logprob: -13.87814712524414
    10. ']+=' → logprob: -14.25314712524414

Token 399: ' =' (ID: 314)
  Prédit: ' ='
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' =' → logprob: -0.31328731775283813
    2. '=' → logprob: -1.3132872581481934
    3. ',' → logprob: -11.188287734985352
    4. '   ' → logprob: -12.313287734985352
    5. ']' → logprob: -12.563287734985352
    6. ' ' → logprob: -13.813287734985352
    7. ']=' → logprob: -13.813287734985352
    8. '[' → logprob: -14.188287734985352
    9. ')' → logprob: -15.188287734985352
    10. ' +=' → logprob: -15.438287734985352

Token 400: ' dis' (ID: 829)
  Prédit: 'dis'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'dis' → logprob: -2.534558552724775e-05
    2. ' dis' → logprob: -10.625025749206543
    3. '   ' → logprob: -14.625025749206543
    4. '	dis' → logprob: -14.875025749206543
    5. 'd' → logprob: -16.375024795532227
    6. '(dis' → logprob: -17.250024795532227
    7. ' ' → logprob: -17.500024795532227
    8. '  ' → logprob: -17.875024795532227
    9. '1' → logprob: -19.625024795532227
    10. '0' → logprob: -20.125024795532227

Token 401: '[' (ID: 58)
  Prédit: '['
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '[' → logprob: -1.8312570318812504e-05
    2. 'go' → logprob: -11.125018119812012
    3. ' go' → logprob: -13.000018119812012
    4. ' [' → logprob: -14.125018119812012
    5. '   ' → logprob: -15.500018119812012
    6. '	go' → logprob: -15.625018119812012
    7. '(go' → logprob: -16.125019073486328
    8. ' ' → logprob: -16.750019073486328
    9. 'Go' → logprob: -17.500019073486328
    10. '       ' → logprob: -17.500019073486328

Token 402: 'go' (ID: 2319)
  Prédit: 'go'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'go' → logprob: -2.7848862373502925e-05
    2. ' go' → logprob: -10.500027656555176
    3. '(go' → logprob: -15.750027656555176
    4. '"go' → logprob: -17.125028610229492
    5. '	go' → logprob: -17.250028610229492
    6. '[' → logprob: -17.625028610229492
    7. ']' → logprob: -18.750028610229492
    8. 'g' → logprob: -18.875028610229492
    9. 'Go' → logprob: -19.000028610229492
    10. '   ' → logprob: -19.500028610229492

Token 403: ']' (ID: 60)
  Prédit: ']'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ']' → logprob: -0.011063856072723866
    2. ']+' → logprob: -4.511064052581787
    3. '+' → logprob: -11.261063575744629
    4. ' ]' → logprob: -13.011063575744629
    5. '[' → logprob: -14.761063575744629
    6. '+]' → logprob: -15.761063575744629
    7. '   ' → logprob: -16.136064529418945
    8. ' +' → logprob: -16.136064529418945
    9. ']+=' → logprob: -16.386064529418945
    10. '']' → logprob: -17.136064529418945

Token 404: ' +' (ID: 659)
  Prédit: '+'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '+' → logprob: -0.4740793704986572
    2. ' +' → logprob: -0.9740793704986572
    3. '+
' → logprob: -13.974079132080078
    4. ' ' → logprob: -15.224079132080078
    5. ' +
' → logprob: -15.349079132080078
    6. '
' → logprob: -15.724079132080078
    7. '               ' → logprob: -15.849079132080078
    8. '()+' → logprob: -16.224079132080078
    9. ' plus' → logprob: -16.349079132080078
    10. ' ' → logprob: -16.599079132080078

Token 405: ' ' (ID: 220)
  Prédit: '1'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '1' → logprob: -1.318681188422488e-05
    2. ' ' → logprob: -11.25001335144043
    3. '   ' → logprob: -16.37501335144043
    4. '```' → logprob: -17.62501335144043
    5. '[' → logprob: -17.87501335144043
    6. '
' → logprob: -18.37501335144043
    7. '                   ' → logprob: -19.18751335144043
    8. '  ' → logprob: -19.25001335144043
    9. '' → logprob: -19.25001335144043
    10. '           ' → logprob: -19.31251335144043

Token 406: '1' (ID: 16)
  Prédit: '1'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '1' → logprob: -5.438573680294212e-06
    2. ' ' → logprob: -12.125005722045898
    3. '   ' → logprob: -18.5000057220459
    4. '[' → logprob: -18.7500057220459
    5. '```' → logprob: -19.2500057220459
    6. '
' → logprob: -19.7500057220459
    7. '' → logprob: -20.6875057220459
    8. '  ' → logprob: -20.6875057220459
    9. '１' → logprob: -21.5000057220459
    10. '{' → logprob: -21.5000057220459

Token 407: '
' (ID: 198)
  Prédit: '               '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '               ' → logprob: -0.00015908108616713434
    2. '                
' → logprob: -10.25015926361084
    3. '
' → logprob: -10.37515926361084
    4. '           ' → logprob: -10.75015926361084
    5. '       ' → logprob: -11.00015926361084
    6. ' went' → logprob: -11.25015926361084
    7. ',' → logprob: -11.75015926361084
    8. '<|end|>' → logprob: -12.00015926361084
    9. '			' → logprob: -12.12515926361084
    10. '   ' → logprob: -12.62515926361084

Token 408: '               ' (ID: 506)
  Prédit: '               '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '               ' → logprob: -0.0014630960067734122
    2. ' went' → logprob: -7.001462936401367
    3. '           ' → logprob: -8.626462936401367
    4. ' que' → logprob: -9.251462936401367
    5. 'went' → logprob: -9.251462936401367
    6. 'que' → logprob: -10.126462936401367
    7. '              ' → logprob: -10.251462936401367
    8. '                
' → logprob: -10.501462936401367
    9. '       ' → logprob: -11.126462936401367
    10. '   ' → logprob: -11.501462936401367

Token 409: ' went' (ID: 5981)
  Prédit: 'went'
  Correct (stricte): False
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'went' (adapté à ' went') → logprob: -0.1062091812491417
    2. 'que' → logprob: -2.3562092781066895
    3. '       ' → logprob: -5.3562092781066895
    4. '           ' → logprob: -7.8562092781066895
    5. '   ' → logprob: -8.106208801269531
    6. ' went' → logprob: -8.856208801269531
    7. 'visited' → logprob: -9.106208801269531
    8. '         ' → logprob: -9.856208801269531
    9. '      ' → logprob: -10.231208801269531
    10. '```' → logprob: -10.606208801269531

Token 410: '[n' (ID: 15433)
  Prédit: '[n'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '[n' → logprob: -5.319370302458992e-06
    2. '[' → logprob: -12.625005722045898
    3. '[x' → logprob: -14.000005722045898
    4. 'n' → logprob: -14.500005722045898
    5. '```' → logprob: -14.875005722045898
    6. ' [' → logprob: -16.1250057220459
    7. '
' → logprob: -16.6250057220459
    8. '	n' → logprob: -17.2500057220459
    9. '[next' → logprob: -17.3750057220459
    10. '

' → logprob: -17.5000057220459

Token 411: 'xt' (ID: 711)
  Prédit: 'xt'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'xt' → logprob: -0.0004019521293230355
    2. 't' → logprob: -7.875401973724365
    3. 'x' → logprob: -11.375401496887207
    4. '[n' → logprob: -12.750401496887207
    5. 'tx' → logprob: -12.875401496887207
    6. '[t' → logprob: -13.250401496887207
    7. '[' → logprob: -13.875401496887207
    8. '[x' → logprob: -14.000401496887207
    9. 'т' → logprob: -15.250401496887207
    10. 'txt' → logprob: -15.375401496887207

Token 412: ']' (ID: 60)
  Prédit: ']'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ']' → logprob: -0.0004901225329376757
    2. ']=' → logprob: -8.125490188598633
    3. '=' → logprob: -8.625490188598633
    4. ' =' → logprob: -11.875490188598633
    5. ' ]' → logprob: -12.250490188598633
    6. '[' → logprob: -13.250490188598633
    7. '=True' → logprob: -14.000490188598633
    8. ')' → logprob: -16.125490188598633
    9. 'True' → logprob: -16.750490188598633
    10. ']
' → logprob: -17.375490188598633

Token 413: ' =' (ID: 314)
  Prédit: '='
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '=' → logprob: -0.16025063395500183
    2. ' =' → logprob: -1.9102506637573242
    3. '=True' → logprob: -11.160250663757324
    4. '[' → logprob: -11.785250663757324
    5. ']' → logprob: -12.785250663757324
    6. ',' → logprob: -14.285250663757324
    7. ']=' → logprob: -14.660250663757324
    8. ' ' → logprob: -14.910250663757324
    9. '   ' → logprob: -15.410250663757324
    10. ')' → logprob: -15.785250663757324

Token 414: ' True' (ID: 6432)
  Prédit: 'True'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'True' → logprob: -0.0001234428636962548
    2. ' True' → logprob: -9.000123023986816
    3. '   ' → logprob: -17.500123977661133
    4. '(True' → logprob: -17.875123977661133
    5. '1' → logprob: -19.500123977661133
    6. 'true' → logprob: -19.500123977661133
    7. 'False' → logprob: -20.375123977661133
    8. 'not' → logprob: -20.750123977661133
    9. '=True' → logprob: -21.125123977661133
    10. '
' → logprob: -21.500123977661133

Token 415: '
' (ID: 198)
  Prédit: '               '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '               ' → logprob: -5.4192871175473556e-05
    2. 'que' → logprob: -10.750054359436035
    3. ' que' → logprob: -10.875054359436035
    4. '                   ' → logprob: -12.250054359436035
    5. '           ' → logprob: -12.750054359436035
    6. '              ' → logprob: -13.000054359436035
    7. '       ' → logprob: -14.125054359436035
    8. ',' → logprob: -14.500054359436035
    9. '   ' → logprob: -15.000054359436035
    10. '			' → logprob: -15.125054359436035

Token 416: '               ' (ID: 506)
  Prédit: '               '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '               ' → logprob: -0.00022392053506337106
    2. ' que' → logprob: -9.625224113464355
    3. 'que' → logprob: -9.875224113464355
    4. '			' → logprob: -10.125224113464355
    5. '              ' → logprob: -11.125224113464355
    6. '	           ' → logprob: -11.500224113464355
    7. '           ' → logprob: -11.875224113464355
    8. '		       ' → logprob: -11.875224113464355
    9. '       ' → logprob: -12.125224113464355
    10. '	' → logprob: -12.375224113464355

Token 417: ' que' (ID: 661)
  Prédit: 'que'
  Correct (stricte): False
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'que' (adapté à ' que') → logprob: -0.00014585316239390522
    2. 'deque' → logprob: -9.37514591217041
    3. ' que' → logprob: -10.37514591217041
    4. '               ' → logprob: -11.75014591217041
    5. '       ' → logprob: -12.25014591217041
    6. 'queue' → logprob: -12.25014591217041
    7. '   ' → logprob: -12.25014591217041
    8. '           ' → logprob: -12.50014591217041
    9. '
' → logprob: -14.12514591217041
    10. '```' → logprob: -14.37514591217041

Token 418: '.append' (ID: 3709)
  Prédit: '.append'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '.append' → logprob: -0.00023321842309087515
    2. '.' → logprob: -9.00023365020752
    3. 'append' → logprob: -9.37523365020752
    4. '.p' → logprob: -10.87523365020752
    5. '.app' → logprob: -12.75023365020752
    6. '```' → logprob: -14.12523365020752
    7. 'app' → logprob: -14.50023365020752
    8. ' .' → logprob: -14.75023365020752
    9. '.push' → logprob: -15.50023365020752
    10. '().' → logprob: -15.75023365020752

Token 419: '(n' (ID: 2406)
  Prédit: '(n'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(n' → logprob: -0.001936962129548192
    2. 'left' → logprob: -6.251936912536621
    3. '(' → logprob: -12.251936912536621
    4. 'n' → logprob: -12.751936912536621
    5. '[n' → logprob: -15.876936912536621
    6. '(nx' → logprob: -16.251937866210938
    7. '(x' → logprob: -16.501937866210938
    8. '<n' → logprob: -16.626937866210938
    9. '(left' → logprob: -16.751937866210938
    10. '(
' → logprob: -17.001937866210938

Token 420: 'xt' (ID: 711)
  Prédit: 'xt'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'xt' → logprob: -4.7994282795116305e-05
    2. 't' → logprob: -10.12504768371582
    3. '(t' → logprob: -13.00004768371582
    4. '(' → logprob: -13.37504768371582
    5. '[' → logprob: -13.87504768371582
    6. '(n' → logprob: -14.25004768371582
    7. 'x' → logprob: -14.75004768371582
    8. '```' → logprob: -14.75004768371582
    9. 'ft' → logprob: -15.12504768371582
    10. ')' → logprob: -15.12504768371582

Token 421: ')
' (ID: 446)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')' → logprob: -1.688212614681106e-05
    2. ')
' → logprob: -11.125017166137695
    3. ')return' → logprob: -14.125017166137695
    4. '))' → logprob: -15.125017166137695
    5. '<|end|>' → logprob: -15.125017166137695
    6. ' )' → logprob: -15.250017166137695
    7. '())' → logprob: -15.875017166137695
    8. ')}' → logprob: -16.625017166137695
    9. ')n' → logprob: -16.750017166137695
    10. ')}}' → logprob: -16.875017166137695

Token 422: '   ' (ID: 271)
  Prédit: ''
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False

Token 423: ' return' (ID: 622)
  Prédit: ''
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False

Token 424: ' dis' (ID: 829)
  Prédit: 'dis'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'dis' → logprob: -9.639096970204264e-05
    2. ' dis' → logprob: -9.375096321105957
    3. '(dis' → logprob: -11.375096321105957
    4. '	dis' → logprob: -18.250097274780273
    5. 'd' → logprob: -19.500097274780273
    6. '[' → logprob: -20.000097274780273
    7. '   ' → logprob: -20.500097274780273
    8. '(' → logprob: -21.000097274780273
    9. ' ' → logprob: -21.125097274780273
    10. '_dis' → logprob: -21.375097274780273

Token 425: '

' (ID: 279)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ')' → logprob: -0.6353641748428345
    2. '[' → logprob: -1.0103641748428345
    3. '<|end|>' → logprob: -3.010364055633545
    4. ':' → logprob: -3.760364055633545
    5. ']' → logprob: -4.885364055633545
    6. 's' → logprob: -4.885364055633545
    7. '(' → logprob: -5.510364055633545
    8. '.' → logprob: -5.635364055633545
    9. '.pop' → logprob: -5.885364055633545
    10. ',' → logprob: -6.385364055633545

Token 426: 'def' (ID: 1314)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ')' → logprob: -1.1055519580841064
    2. ':' → logprob: -1.1055519580841064
    3. '[' → logprob: -1.6055519580841064
    4. '#' → logprob: -2.3555519580841064
    5. ',' → logprob: -4.480551719665527
    6. 's' → logprob: -4.730551719665527
    7. ']' → logprob: -5.105551719665527
    8. '<|end|>' → logprob: -5.855551719665527
    9. '.' → logprob: -6.105551719665527
    10. '(' → logprob: -6.355551719665527

Token 427: ' main' (ID: 2758)
  Prédit: ' dfs'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' dfs' → logprob: -0.4655213952064514
    2. 'dfs' → logprob: -1.0905213356018066
    3. ' main' → logprob: -3.7155213356018066
    4. ' solve' → logprob: -5.465521335601807
    5. 'main' → logprob: -5.590521335601807
    6. 'd' → logprob: -6.090521335601807
    7. 'solve' → logprob: -7.340521335601807
    8. ' d' → logprob: -7.590521335601807
    9. 'b' → logprob: -9.090521812438965
    10. ' bfs' → logprob: -9.340521812438965

Token 428: '():
' (ID: 8595)
  Prédit: '():'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '():' → logprob: -9.253090865968261e-06
    2. '():
' → logprob: -11.750009536743164
    3. ' ():' → logprob: -13.625009536743164
    4. '():
' → logprob: -16.500009536743164
    5. '()' → logprob: -18.000009536743164
    6. '():

' → logprob: -19.625009536743164
    7. '(' → logprob: -19.750009536743164
    8. ':' → logprob: -22.125009536743164
    9. '()>' → logprob: -22.625009536743164
    10. '().' → logprob: -22.750009536743164

Token 429: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.2043856382369995
    2. 'n' → logprob: -1.7043856382369995
    3. '	n' → logprob: -6.454385757446289
    4. ' n' → logprob: -6.704385757446289
    5. '(n' → logprob: -9.704385757446289
    6. ',n' → logprob: -10.454385757446289
    7. '    
' → logprob: -10.829385757446289
    8. '    ' → logprob: -10.954385757446289
    9. '```' → logprob: -11.204385757446289
    10. '  ' → logprob: -11.579385757446289

Token 430: ' #' (ID: 1069)
  Prédit: 'n'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'n' → logprob: -0.008839694783091545
    2. '   ' → logprob: -4.7588396072387695
    3. 't' → logprob: -9.00883960723877
    4. ' n' → logprob: -9.63383960723877
    5. '	n' → logprob: -10.38383960723877
    6. 'N' → logprob: -12.50883960723877
    7. '#' (adapté à ' #') → logprob: -12.88383960723877
    8. '    
' → logprob: -16.258840560913086
    9. ' ' → logprob: -16.758840560913086
    10. ' t' → logprob: -17.133840560913086

Token 431: ' Double' (ID: 11646)
  Prédit: 'n'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'n' → logprob: -0.014493011869490147
    2. '   ' → logprob: -4.264492988586426
    3. ' n' → logprob: -8.514492988586426
    4. 't' → logprob: -9.514492988586426
    5. '#' → logprob: -11.014492988586426
    6. '	n' → logprob: -11.264492988586426
    7. 'import' → logprob: -11.889492988586426
    8. 'pass' → logprob: -12.014492988586426
    9. 'N' → logprob: -12.264492988586426
    10. '```' → logprob: -12.764492988586426

Token 432: ' destruct' (ID: 39223)
  Prédit: ' ='
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' =' → logprob: -1.477860450744629
    2. 'def' → logprob: -1.602860450744629
    3. 'for' → logprob: -1.852860450744629
    4. '=' → logprob: -2.352860450744629
    5. '_input' → logprob: -2.477860450744629
    6. 'input' → logprob: -2.602860450744629
    7. 's' → logprob: -3.102860450744629
    8. '=input' → logprob: -3.977860450744629
    9. 'n' → logprob: -4.352860450744629
    10. '_' → logprob: -4.352860450744629

Token 433: 'uration' (ID: 3306)
  Prédit: 'ure'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'ure' → logprob: -0.3157847821712494
    2. 'uring' → logprob: -1.3157848119735718
    3. 'uration' → logprob: -6.440784931182861
    4. '   ' → logprob: -7.065784931182861
    5. 'ur' → logprob: -11.065784454345703
    6. 'urer' → logprob: -11.065784454345703
    7. 'uré' → logprob: -11.815784454345703
    8. ' ' → logprob: -11.815784454345703
    9. 'def' → logprob: -11.940784454345703
    10. 'ing' → logprob: -12.190784454345703

Token 434: ',' (ID: 11)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.2883051633834839
    2. 'a' → logprob: -2.5383052825927734
    3. '():' → logprob: -2.7883052825927734
    4. '()' → logprob: -3.1633052825927734
    5. 'n' → logprob: -4.288305282592773
    6. 's' → logprob: -4.413305282592773
    7. '():
' → logprob: -4.913305282592773
    8. ' =' → logprob: -5.038305282592773
    9. ':' → logprob: -5.163305282592773
    10. '(n' → logprob: -5.288305282592773

Token 435: ' compréhension' (ID: 142333)
  Prédit: 'n'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'n' → logprob: -0.5774816274642944
    2. '   ' → logprob: -0.9524816274642944
    3. ' n' → logprob: -2.952481746673584
    4. '#' → logprob: -8.202481269836426
    5. '	n' → logprob: -9.577481269836426
    6. '    
' → logprob: -9.702481269836426
    7. 'a' → logprob: -10.077481269836426
    8. '    ' → logprob: -10.327481269836426
    9. 't' → logprob: -10.327481269836426
    10. '```' → logprob: -10.577481269836426

Token 436: ' sur' (ID: 1512)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.08954271674156189
    2. ' des' → logprob: -3.2145426273345947
    3. ' for' → logprob: -4.339542865753174
    4. ' ' → logprob: -5.214542865753174
    5. ' de' → logprob: -5.339542865753174
    6. 's' → logprob: -5.464542865753174
    7. ' =' → logprob: -5.464542865753174
    8. ' of' → logprob: -5.839542865753174
    9. 'n' → logprob: -6.214542865753174
    10. 'for' → logprob: -6.589542865753174

Token 437: ' la' (ID: 557)
  Prédit: 'range'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'range' → logprob: -0.030132731422781944
    2. '[' → logprob: -5.15513277053833
    3. 'input' → logprob: -5.28013277053833
    4. '_' → logprob: -5.28013277053833
    5. 'in' → logprob: -5.40513277053833
    6. 'n' → logprob: -5.65513277053833
    7. '[]' → logprob: -6.40513277053833
    8. '[n' → logprob: -7.65513277053833
    9. '(range' → logprob: -7.78013277053833
    10. ' range' → logprob: -7.78013277053833

Token 438: ' lecture' (ID: 31993)
  Prédit: 'range'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'range' → logprob: -0.32177796959877014
    2. 'input' → logprob: -1.4467779397964478
    3. 'ligne' → logprob: -3.8217780590057373
    4. 'stdin' → logprob: -4.821777820587158
    5. 'entrée' → logprob: -6.946777820587158
    6. 'lines' → logprob: -7.071777820587158
    7. 'line' → logprob: -7.071777820587158
    8. 'import' → logprob: -7.071777820587158
    9. 'inputs' → logprob: -7.321777820587158
    10. 'sys' → logprob: -7.446777820587158

Token 439: ' des' (ID: 731)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.023503083735704422
    2. '()' → logprob: -4.773503303527832
    3. '():' → logprob: -4.773503303527832
    4. 'n' → logprob: -5.398503303527832
    5. '():
' → logprob: -6.773503303527832
    6. '(n' → logprob: -8.023503303527832
    7. '()
' → logprob: -9.523503303527832
    8. ':' → logprob: -9.898503303527832
    9. 's' → logprob: -10.273503303527832
    10. '
' → logprob: -11.148503303527832

Token 440: ' entr' (ID: 7072)
  Prédit: 'n'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'n' → logprob: -1.528523564338684
    2. 'range' → logprob: -1.653523564338684
    3. 'input' → logprob: -1.653523564338684
    4. 'inputs' → logprob: -2.0285234451293945
    5. 'cases' → logprob: -2.9035234451293945
    6. 'data' → logprob: -3.1535234451293945
    7. '_' → logprob: -3.2785234451293945
    8. 'l' → logprob: -3.6535234451293945
    9. 'graph' → logprob: -4.0285234451293945
    10. 'lines' → logprob: -4.1535234451293945

Token 441: 'ées' (ID: 5161)
  Prédit: 'ees'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'ees' → logprob: -0.20672915875911713
    2. 'ées' → logprob: -1.7067291736602783
    3. 'ée' → logprob: -5.456728935241699
    4. 'ee' → logprob: -6.956728935241699
    5. 'e' → logprob: -10.2067289352417
    6. 'es' → logprob: -10.7067289352417
    7. 'ies' → logprob: -11.3317289352417
    8. ' ees' → logprob: -12.5817289352417
    9. '```' → logprob: -13.0817289352417
    10. '   ' → logprob: -13.8317289352417

Token 442: '
' (ID: 198)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.0189750324934721
    2. '()' → logprob: -4.893975257873535
    3. '():' → logprob: -5.018975257873535
    4. '():
' → logprob: -6.643975257873535
    5. '
' → logprob: -6.893975257873535
    6. 'n' → logprob: -7.143975257873535
    7. ':' → logprob: -7.643975257873535
    8. '    
' → logprob: -8.018975257873535
    9. '()
' → logprob: -8.143975257873535
    10. '```' → logprob: -9.393975257873535

Token 443: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.13034749031066895
    2. 'n' → logprob: -2.130347490310669
    3. '()' → logprob: -6.25534725189209
    4. ' n' → logprob: -7.63034725189209
    5. '(n' → logprob: -8.00534725189209
    6. '
' → logprob: -8.75534725189209
    7. '    
' → logprob: -9.00534725189209
    8. '():' → logprob: -9.13034725189209
    9. '	n' → logprob: -10.00534725189209
    10. '()
' → logprob: -10.13034725189209

Token 444: ' n' (ID: 297)
  Prédit: 'n'
  Correct (stricte): False
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'n' (adapté à ' n') → logprob: -0.0008310707635246217
    2. '   ' → logprob: -7.250831127166748
    3. 'N' → logprob: -9.75083065032959
    4. '(n' → logprob: -10.25083065032959
    5. 't' → logprob: -11.37583065032959
    6. '
' → logprob: -11.87583065032959
    7. ' n' → logprob: -12.37583065032959
    8. '	n' → logprob: -13.75083065032959
    9. '    
' → logprob: -14.25083065032959
    10. '```' → logprob: -14.37583065032959

Token 445: ',' (ID: 11)
  Prédit: ','
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ',' → logprob: -0.008225183002650738
    2. ',k' → logprob: -5.133224964141846
    3. ',m' → logprob: -6.133224964141846
    4. ',s' → logprob: -9.508225440979004
    5. ',q' → logprob: -10.883225440979004
    6. ',d' → logprob: -12.008225440979004
    7. ',t' → logprob: -12.258225440979004
    8. ',a' → logprob: -12.508225440979004
    9. ',
' → logprob: -12.633225440979004
    10. ',p' → logprob: -12.883225440979004

Token 446: ' u' (ID: 337)
  Prédit: 'm'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'm' → logprob: -0.01145083736628294
    2. 'k' → logprob: -4.63645076751709
    3. 'q' → logprob: -6.51145076751709
    4. ' m' → logprob: -9.13645076751709
    5. 's' → logprob: -9.63645076751709
    6. 'p' → logprob: -11.76145076751709
    7. 'g' → logprob: -11.76145076751709
    8. 'd' → logprob: -12.26145076751709
    9. ' k' → logprob: -13.13645076751709
    10. '_' → logprob: -13.38645076751709

Token 447: ',' (ID: 11)
  Prédit: ','
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ',' → logprob: -0.02383256144821644
    2. '=' → logprob: -4.14883279800415
    3. ' =' → logprob: -4.89883279800415
    4. ',v' → logprob: -8.898832321166992
    5. 'v' → logprob: -9.148832321166992
    6. ' ,' → logprob: -11.148832321166992
    7. 's' → logprob: -11.273832321166992
    8. 'n' → logprob: -11.273832321166992
    9. 'k' → logprob: -11.898832321166992
    10. '<|end|>' → logprob: -13.023832321166992

Token 448: ' v' (ID: 323)
  Prédit: 'v'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'v' → logprob: -0.00015229015843942761
    2. 'w' → logprob: -9.000152587890625
    3. 'k' → logprob: -11.375152587890625
    4. 'd' → logprob: -12.375152587890625
    5. 'x' → logprob: -12.625152587890625
    6. 'r' → logprob: -13.000152587890625
    7. ' v' → logprob: -13.250152587890625
    8. 't' → logprob: -14.000152587890625
    9. 'vv' → logprob: -14.000152587890625
    10. 'q' → logprob: -14.000152587890625

Token 449: ' =' (ID: 314)
  Prédit: '='
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '=' → logprob: -0.012512002140283585
    2. ' =' → logprob: -4.38751220703125
    3. ',' → logprob: -13.13751220703125
    4. '=input' → logprob: -15.76251220703125
    5. ')' → logprob: -16.51251220703125
    6. ')=' → logprob: -17.51251220703125
    7. '=
' → logprob: -18.63751220703125
    8. '＝' → logprob: -18.76251220703125
    9. '=int' → logprob: -19.01251220703125
    10. ' ' → logprob: -19.01251220703125

Token 450: ' (' (ID: 350)
  Prédit: 'in'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'in' → logprob: -0.0013123786775395274
    2. ' in' → logprob: -6.876312255859375
    3. 'map' → logprob: -8.251312255859375
    4. ' map' → logprob: -11.126312255859375
    5. 'tuple' → logprob: -12.876312255859375
    6. 'inp' → logprob: -14.626312255859375
    7. '(in' → logprob: -15.126312255859375
    8. '	in' → logprob: -15.501312255859375
    9. ' tuple' → logprob: -16.251312255859375
    10. 'input' → logprob: -16.501312255859375

Token 451: 'x' (ID: 87)
  Prédit: 'in'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'in' → logprob: -0.062437042593955994
    2. 'map' → logprob: -2.812437057495117
    3. '*' → logprob: -9.062437057495117
    4. ' in' → logprob: -9.062437057495117
    5. ' map' → logprob: -9.062437057495117
    6. 'int' → logprob: -9.812437057495117
    7. 'tuple' → logprob: -10.437437057495117
    8. ')' → logprob: -10.937437057495117
    9. 'inp' → logprob: -11.812437057495117
    10. 'input' → logprob: -12.687437057495117

Token 452: ' for' (ID: 395)
  Prédit: ' for'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' for' → logprob: -0.09748922288417816
    2. 'for' → logprob: -2.47248911857605
    3. 'in' → logprob: -5.347489356994629
    4. '()' → logprob: -7.222489356994629
    5. 'int' → logprob: -7.222489356994629
    6. ')' → logprob: -7.347489356994629
    7. '=' → logprob: -7.347489356994629
    8. ' in' → logprob: -7.972489356994629
    9. '-' → logprob: -9.097489356994629
    10. 'inp' → logprob: -9.097489356994629

Token 453: ' x' (ID: 1215)
  Prédit: 'in'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'in' → logprob: -0.05633353069424629
    2. ' in' → logprob: -3.181333541870117
    3. '_' → logprob: -4.681333541870117
    4. 'x' → logprob: -5.681333541870117
    5. 'inp' → logprob: -8.181333541870117
    6. ' x' → logprob: -8.806333541870117
    7. '_in' → logprob: -10.306333541870117
    8. 'input' → logprob: -10.556333541870117
    9. '_x' → logprob: -10.931333541870117
    10. 'int' → logprob: -11.056333541870117

Token 454: ' in' (ID: 306)
  Prédit: 'in'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'in' → logprob: -0.038047339767217636
    2. ' in' → logprob: -3.2880473136901855
    3. 'input' → logprob: -13.163047790527344
    4. ' ' → logprob: -13.788047790527344
    5. 'x' → logprob: -14.663047790527344
    6. 'inp' → logprob: -14.788047790527344
    7. ',' → logprob: -14.913047790527344
    8. 'inx' → logprob: -14.913047790527344
    9. 'import' → logprob: -15.288047790527344
    10. '
' → logprob: -15.538047790527344

Token 455: ' in' (ID: 306)
  Prédit: 'in'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'in' → logprob: -0.013578872196376324
    2. 'input' → logprob: -4.38857889175415
    3. 'map' → logprob: -7.13857889175415
    4. ' in' → logprob: -9.013578414916992
    5. 'inp' → logprob: -9.638578414916992
    6. 'range' → logprob: -10.388578414916992
    7. '[' → logprob: -11.013578414916992
    8. '[in' → logprob: -11.138578414916992
    9. ' input' → logprob: -11.763578414916992
    10. ' map' → logprob: -12.138578414916992

Token 456: 'pm' (ID: 6991)
  Prédit: 'pm'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'pm' → logprob: -0.3140340745449066
    2. 'pl' → logprob: -1.314034104347229
    3. 'p' → logprob: -7.5640339851379395
    4. 'pls' → logprob: -8.689034461975098
    5. 'pll' → logprob: -10.439034461975098
    6. 'mpl' → logprob: -10.939034461975098
    7. 'plt' → logprob: -11.189034461975098
    8. 'm' → logprob: -11.314034461975098
    9. 'pmn' → logprob: -11.939034461975098
    10. 'plit' → logprob: -14.439034461975098

Token 457: '())
' (ID: 4574)
  Prédit: '())'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '())' → logprob: -0.014230971224606037
    2. '()' → logprob: -4.264231204986572
    3. ')' → logprob: -10.764230728149414
    4. '(' → logprob: -10.764230728149414
    5. ' ())' → logprob: -11.389230728149414
    6. '())
' → logprob: -12.014230728149414
    7. '()))' → logprob: -13.139230728149414
    8. '();)' → logprob: -13.514230728149414
    9. '());' → logprob: -14.014230728149414
    10. '())

' → logprob: -14.014230728149414

Token 458: '   ' (ID: 271)
  Prédit: 'g'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'g' → logprob: -0.6517951488494873
    2. '   ' → logprob: -0.7767951488494873
    3. '
' → logprob: -4.776795387268066
    4. '    
' → logprob: -5.401795387268066
    5. 'u' → logprob: -6.526795387268066
    6. ' g' → logprob: -6.776795387268066
    7. 'graph' → logprob: -7.026795387268066
    8. 'n' → logprob: -7.151795387268066
    9. ' 
' → logprob: -8.026795387268066
    10. '	g' → logprob: -8.151795387268066

Token 459: ' g' (ID: 329)
  Prédit: 'g'
  Correct (stricte): False
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'g' (adapté à ' g') → logprob: -0.006688733585178852
    2. '   ' → logprob: -5.256688594818115
    3. 'graph' → logprob: -6.756688594818115
    4. 'n' → logprob: -9.131689071655273
    5. '_g' → logprob: -10.381689071655273
    6. 'u' → logprob: -10.881689071655273
    7. 'l' → logprob: -10.881689071655273
    8. 'G' → logprob: -11.131689071655273
    9. 'edges' → logprob: -11.256689071655273
    10. ' g' → logprob: -11.381689071655273

Token 460: ' =' (ID: 314)
  Prédit: '='
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '=' → logprob: -0.12693923711776733
    2. ' =' → logprob: -2.126939296722412
    3. '=[]' → logprob: -11.876938819885254
    4. '=[' → logprob: -13.626938819885254
    5. 'g' → logprob: -13.876938819885254
    6. '=[]
' → logprob: -14.376938819885254
    7. '=g' → logprob: -14.876938819885254
    8. '[' → logprob: -15.126938819885254
    9. ' ' → logprob: -15.126938819885254
    10. ',' → logprob: -15.751938819885254

Token 461: ' [' (ID: 723)
  Prédit: '['
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '[' → logprob: -0.03921102359890938
    2. 'default' → logprob: -3.2892110347747803
    3. ' [[]' → logprob: -6.789210796356201
    4. '{' → logprob: -10.78921127319336
    5. '[[' → logprob: -11.03921127319336
    6. '   ' → logprob: -13.78921127319336
    7. '[n' → logprob: -13.78921127319336
    8. '[list' → logprob: -14.03921127319336
    9. '[]' → logprob: -14.16421127319336
    10. '[]
' → logprob: -14.16421127319336

Token 462: 'list' (ID: 2641)
  Prédit: '[]'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '[]' → logprob: -4.978233846486546e-05
    2. '[]
' → logprob: -10.000049591064453
    3. 'set' → logprob: -12.750049591064453
    4. ' []' → logprob: -13.750049591064453
    5. '[]

' → logprob: -15.625049591064453
    6. '[' → logprob: -15.750049591064453
    7. 'deque' → logprob: -16.500049591064453
    8. 'list' → logprob: -17.625049591064453
    9. '[]}' → logprob: -17.750049591064453
    10. '[]"' → logprob: -19.250049591064453

Token 463: '()' (ID: 416)
  Prédit: '()'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '()' → logprob: -0.006945652887225151
    2. '(map' → logprob: -5.631945610046387
    3. '()]' → logprob: -5.881945610046387
    4. '[]' → logprob: -8.381945610046387
    5. '(in' → logprob: -8.756945610046387
    6. '([]' → logprob: -9.631945610046387
    7. 'in' → logprob: -10.256945610046387
    8. 'map' → logprob: -10.256945610046387
    9. '()]
' → logprob: -11.131945610046387
    10. '(set' → logprob: -13.381945610046387

Token 464: ' for' (ID: 395)
  Prédit: '()'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '()' → logprob: -0.16757836937904358
    2. 'for' → logprob: -1.9175783395767212
    3. ' for' → logprob: -4.917578220367432
    4. '   ' → logprob: -12.16757869720459
    5. '[]' → logprob: -13.54257869720459
    6. ']' → logprob: -13.91757869720459
    7. ' ()' → logprob: -14.04257869720459
    8. '()]' → logprob: -14.29257869720459
    9. '	for' → logprob: -15.16757869720459
    10. ' ' → logprob: -15.41757869720459

Token 465: ' _' (ID: 1175)
  Prédit: '_'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_' → logprob: -0.00018983196059707552
    2. ' _' → logprob: -9.000189781188965
    3. ' range' → logprob: -10.625189781188965
    4. ' in' → logprob: -10.875189781188965
    5. 'range' → logprob: -11.000189781188965
    6. '_range' → logprob: -12.500189781188965
    7. 'in' → logprob: -13.375189781188965
    8. '_=' → logprob: -15.250189781188965
    9. '_x' → logprob: -15.750189781188965
    10. ' ' → logprob: -16.00019073486328

Token 466: ' in' (ID: 306)
  Prédit: 'range'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'range' → logprob: -0.4170217216014862
    2. '_' → logprob: -1.1670217514038086
    3. ' range' → logprob: -4.167021751403809
    4. 'in' → logprob: -4.417021751403809
    5. ' in' → logprob: -6.167021751403809
    6. '_range' → logprob: -11.292021751403809
    7. '0' → logprob: -12.042021751403809
    8. '(range' → logprob: -12.292021751403809
    9. ' _' → logprob: -12.542021751403809
    10. 'i' → logprob: -13.167021751403809

Token 467: ' range' (ID: 3352)
  Prédit: 'range'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'range' → logprob: -0.00020425561524461955
    2. ' range' → logprob: -8.500204086303711
    3. '_' → logprob: -14.250204086303711
    4. '_range' → logprob: -16.75020408630371
    5. '   ' → logprob: -18.62520408630371
    6. '	range' → logprob: -18.87520408630371
    7. 'rang' → logprob: -19.25020408630371
    8. 'in' → logprob: -19.25020408630371
    9. '(range' → logprob: -19.37520408630371
    10. ' ' → logprob: -19.62520408630371

Token 468: '(n' (ID: 2406)
  Prédit: 'range'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'range' → logprob: -0.0013738033594563603
    2. '(range' → logprob: -6.751373767852783
    3. ' range' → logprob: -8.501374244689941
    4. '(n' → logprob: -15.626374244689941
    5. '	range' → logprob: -16.251373291015625
    6. 'n' → logprob: -16.876373291015625
    7. '   ' → logprob: -17.501373291015625
    8. '
' → logprob: -18.626373291015625
    9. 'in' → logprob: -18.751373291015625
    10. 'ran' → logprob: -19.001373291015625

Token 469: ')]
' (ID: 11587)
  Prédit: ')]'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')]' → logprob: -0.00028171599842607975
    2. ')]
' → logprob: -8.37528133392334
    3. ']' → logprob: -10.62528133392334
    4. ')' → logprob: -10.62528133392334
    5. ')]
' → logprob: -14.00028133392334
    6. ')]

' → logprob: -14.37528133392334
    7. ' )' → logprob: -15.50028133392334
    8. ']
' → logprob: -15.62528133392334
    9. ')
' → logprob: -15.75028133392334
    10. '])' → logprob: -16.000282287597656

Token 470: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.004464654717594385
    2. 'for' → logprob: -5.504464626312256
    3. ' for' → logprob: -7.879464626312256
    4. '	for' → logprob: -12.004465103149414
    5. '    
' → logprob: -13.754465103149414
    6. '<|end|>' → logprob: -15.004465103149414
    7. '   ' → logprob: -16.379465103149414
    8. '
' → logprob: -16.879465103149414
    9. '```' → logprob: -17.004465103149414
    10. '  ' → logprob: -17.879465103149414

Token 471: ' g' (ID: 329)
  Prédit: 'for'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'for' → logprob: -9.13388703338569e-06
    2. ' for' → logprob: -12.000009536743164
    3. '   ' → logprob: -12.750009536743164
    4. '	for' → logprob: -17.750009536743164
    5. '    
' → logprob: -21.375009536743164
    6. '```' → logprob: -21.375009536743164
    7. '
' → logprob: -21.750009536743164
    8. '_for' → logprob: -22.875009536743164
    9. 'For' → logprob: -23.625009536743164
    10. '_' → logprob: -24.375009536743164

Token 472: '1' (ID: 16)
  Prédit: '[u'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '[u' → logprob: -0.10019771754741669
    2. 'for' → logprob: -3.2251977920532227
    3. '[' → logprob: -3.6001977920532227
    4. 'u' → logprob: -5.225197792053223
    5. '[int' → logprob: -5.600197792053223
    6. ' =' → logprob: -5.850197792053223
    7. '[n' → logprob: -5.975197792053223
    8. '[v' → logprob: -6.350197792053223
    9. 'def' → logprob: -6.350197792053223
    10. 'in' → logprob: -6.600197792053223

Token 473: ' =' (ID: 314)
  Prédit: '[u'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '[u' → logprob: -0.026010777801275253
    2. ']' → logprob: -5.151010990142822
    3. 'n' → logprob: -5.276010990142822
    4. '[v' → logprob: -5.401010990142822
    5. '[' → logprob: -5.651010990142822
    6. '[n' → logprob: -6.901010990142822
    7. '[int' → logprob: -7.026010990142822
    8. 'for' → logprob: -7.151010990142822
    9. 'g' → logprob: -7.401010990142822
    10. ' =' → logprob: -7.526010990142822

Token 474: ' copy' (ID: 5150)
  Prédit: 'copy'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'copy' → logprob: -0.23110578954219818
    2. '[' → logprob: -2.3561058044433594
    3. 'list' → logprob: -2.8561058044433594
    4. 'in' → logprob: -3.8561058044433594
    5. 'default' → logprob: -4.106105804443359
    6. ' copy' → logprob: -5.731105804443359
    7. ' [' → logprob: -5.731105804443359
    8. '[g' → logprob: -6.106105804443359
    9. '[list' → logprob: -6.231105804443359
    10. 'g' → logprob: -6.606105804443359

Token 475: '.deepcopy' (ID: 130390)
  Prédit: '.deepcopy'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '.deepcopy' → logprob: -0.00035906085395254195
    2. '(g' → logprob: -8.125359535217285
    3. '.copy' → logprob: -10.125359535217285
    4. 'deep' → logprob: -11.125359535217285
    5. '(de' → logprob: -12.625359535217285
    6. '.deep' → logprob: -13.000359535217285
    7. ' deepcopy' → logprob: -13.250359535217285
    8. '[g' → logprob: -15.375359535217285
    9. 'import' → logprob: -15.500359535217285
    10. '.' → logprob: -15.875359535217285

Token 476: '(g' (ID: 7791)
  Prédit: '(g'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(g' → logprob: -2.696889623621246e-06
    2. 'g' → logprob: -12.87500286102295
    3. '(' → logprob: -17.125001907348633
    4. '((' → logprob: -18.625001907348633
    5. '[g' → logprob: -19.000001907348633
    6. '
' → logprob: -19.750001907348633
    7. ' (' → logprob: -19.875001907348633
    8. '(
' → logprob: -19.875001907348633
    9. '(h' → logprob: -20.000001907348633
    10. '(in' → logprob: -20.000001907348633

Token 477: ')
' (ID: 446)
  Prédit: ')
'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')
' → logprob: -0.1603759378194809
    2. ')' → logprob: -1.910375952720642
    3. '   ' → logprob: -10.035375595092773
    4. 'for' → logprob: -10.035375595092773
    5. ')

' → logprob: -10.160375595092773
    6. ')
' → logprob: -10.785375595092773
    7. ' )
' → logprob: -13.785375595092773
    8. 'g' → logprob: -14.535375595092773
    9. ')`
' → logprob: -14.535375595092773
    10. ');' → logprob: -14.910375595092773

Token 478: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.00877127330750227
    2. 'for' → logprob: -4.8837714195251465
    3. ' for' → logprob: -6.7587714195251465
    4. '    
' → logprob: -13.258770942687988
    5. '	for' → logprob: -13.383770942687988
    6. '
' → logprob: -15.133770942687988
    7. '   ' → logprob: -16.383771896362305
    8. '<|end|>' → logprob: -16.633771896362305
    9. '```' → logprob: -16.758771896362305
    10. '  ' → logprob: -17.508771896362305

Token 479: ' ab' (ID: 692)
  Prédit: 'for'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'for' → logprob: -2.522638169466518e-05
    2. '   ' → logprob: -10.750024795532227
    3. ' for' → logprob: -12.500024795532227
    4. '
' → logprob: -17.250024795532227
    5. '	for' → logprob: -17.375024795532227
    6. '    
' → logprob: -18.250024795532227
    7. '[' → logprob: -20.125024795532227
    8. '```' → logprob: -20.750024795532227
    9. '#' → logprob: -20.875024795532227
    10. 'For' → logprob: -22.000024795532227

Token 480: ' =' (ID: 314)
  Prédit: ' ='
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' =' → logprob: -0.05892007425427437
    2. '=' → logprob: -2.93392014503479
    3. 's' → logprob: -6.308919906616211
    4. 'for' → logprob: -7.058919906616211
    5. '=[]' → logprob: -8.183919906616211
    6. '=[]
' → logprob: -8.308919906616211
    7. '=[' → logprob: -8.933919906616211
    8. '_list' → logprob: -9.308919906616211
    9. ',' → logprob: -9.683919906616211
    10. '.append' → logprob: -9.933919906616211

Token 481: ' []
' (ID: 8911)
  Prédit: '[in'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '[in' → logprob: -0.07307033240795135
    2. 'in' → logprob: -2.9480702877044678
    3. '[' → logprob: -4.073070526123047
    4. ' [' → logprob: -7.823070526123047
    5. '[list' → logprob: -7.948070526123047
    6. '(in' → logprob: -8.948070526123047
    7. 'list' → logprob: -10.698070526123047
    8. ' in' → logprob: -10.823070526123047
    9. '[input' → logprob: -11.323070526123047
    10. '[int' → logprob: -11.448070526123047

Token 482: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.02198398858308792
    2. 'for' → logprob: -4.521984100341797
    3. ' for' → logprob: -4.521984100341797
    4. '	for' → logprob: -11.771984100341797
    5. '<|end|>' → logprob: -14.521984100341797
    6. '    
' → logprob: -14.771984100341797
    7. '
' → logprob: -16.146984100341797
    8. '[' → logprob: -16.271984100341797
    9. '```' → logprob: -16.396984100341797
    10. '   ' → logprob: -16.521984100341797

Token 483: ' #' (ID: 1069)
  Prédit: 'for'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'for' → logprob: -4.4418171455617994e-05
    2. ' for' → logprob: -10.500044822692871
    3. '   ' → logprob: -11.000044822692871
    4. '	for' → logprob: -16.250043869018555
    5. '
' → logprob: -18.375043869018555
    6. '    
' → logprob: -19.500043869018555
    7. '[' → logprob: -19.625043869018555
    8. '_' → logprob: -20.125043869018555
    9. '_for' → logprob: -20.125043869018555
    10. ' ' → logprob: -21.375043869018555

Token 484: ' Util' (ID: 13564)
  Prédit: 'for'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'for' → logprob: -3.7697225252486533e-06
    2. ' for' → logprob: -12.500003814697266
    3. '   ' → logprob: -19.500003814697266
    4. '
' → logprob: -20.000003814697266
    5. '	for' → logprob: -20.875003814697266
    6. '[' → logprob: -22.125003814697266
    7. '_' → logprob: -22.250003814697266
    8. '#' → logprob: -23.000003814697266
    9. '_for' → logprob: -23.000003814697266
    10. 'import' → logprob: -23.750003814697266

Token 485: 'ise' (ID: 1096)
  Prédit: 'for'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'for' → logprob: -1.0366061925888062
    2. 'isant' → logprob: -1.6616061925888062
    3. 'iser' → logprob: -1.9116061925888062
    4. 'isez' → logprob: -2.0366063117980957
    5. 'isateur' → logprob: -2.4116063117980957
    6. 'ise' → logprob: -3.9116063117980957
    7. 'ize' → logprob: -4.786606311798096
    8. 'e' → logprob: -4.911606311798096
    9. 'ising' → logprob: -5.036606311798096
    10. 'izing' → logprob: -5.036606311798096

Token 486: ' enumerate' (ID: 29671)
  Prédit: 'for'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'for' → logprob: -0.16275544464588165
    2. '[' → logprob: -2.5377554893493652
    3. '[in' → logprob: -3.1627554893493652
    4. 'range' → logprob: -4.287755489349365
    5. 'in' → logprob: -5.162755489349365
    6. '_' → logprob: -6.162755489349365
    7. ' for' → logprob: -6.412755489349365
    8. ' [' → logprob: -6.787755489349365
    9. '[b' → logprob: -6.787755489349365
    10. '[list' → logprob: -7.287755489349365

Token 487: ' et' (ID: 859)
  Prédit: 'for'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'for' → logprob: -0.02425641193985939
    2. '(input' → logprob: -4.399256229400635
    3. ' for' → logprob: -4.649256229400635
    4. '   ' → logprob: -7.024256229400635
    5. '(' → logprob: -7.774256229400635
    6. '(for' → logprob: -8.399256706237793
    7. '(range' → logprob: -8.649256706237793
    8. '(
' → logprob: -9.274256706237793
    9. '((' → logprob: -9.774256706237793
    10. ',' → logprob: -10.149256706237793

Token 488: ' chain' (ID: 13464)
  Prédit: 'in'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'in' → logprob: -0.020399633795022964
    2. 'range' → logprob: -4.145399570465088
    3. ' in' → logprob: -6.020399570465088
    4. 'for' → logprob: -6.770399570465088
    5. 'enumer' → logprob: -8.520400047302246
    6. ' range' → logprob: -9.020400047302246
    7. 'input' → logprob: -9.020400047302246
    8. '(in' → logprob: -9.520400047302246
    9. 'map' → logprob: -9.645400047302246
    10. 'zip' → logprob: -10.020400047302246

Token 489: ' pour' (ID: 1930)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.5938770174980164
    2. 'for' → logprob: -1.2188770771026611
    3. ' for' → logprob: -1.9688770771026611
    4. '
' → logprob: -5.718876838684082
    5. '(input' → logprob: -6.218876838684082
    6. ',' → logprob: -6.468876838684082
    7. '(en' → logprob: -6.718876838684082
    8. '(' → logprob: -7.718876838684082
    9. '(it' → logprob: -7.718876838684082
    10. 'from' → logprob: -7.968876838684082

Token 490: ' parcour' (ID: 130642)
  Prédit: '_'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '_' → logprob: -0.4186893105506897
    2. 'line' → logprob: -2.168689250946045
    3. 'for' → logprob: -2.418689250946045
    4. ' line' → logprob: -3.168689250946045
    5. 'in' → logprob: -3.668689250946045
    6. 'chain' → logprob: -4.293689250946045
    7. '_line' → logprob: -4.793689250946045
    8. 'x' → logprob: -5.293689250946045
    9. ' for' → logprob: -5.293689250946045
    10. '_in' → logprob: -5.668689250946045

Token 491: 'ir' (ID: 380)
  Prédit: 'er'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'er' → logprob: -0.0017724005738273263
    2. 'ir' → logprob: -6.376772403717041
    3. 'uer' → logprob: -10.001771926879883
    4. 'r' → logprob: -12.501771926879883
    5. 'iner' → logprob: -12.626771926879883
    6. 'e' → logprob: -12.751771926879883
    7. 'u' → logprob: -13.126771926879883
    8. 'rer' → logprob: -13.126771926879883
    9. 're' → logprob: -13.251771926879883
    10. 'ner' → logprob: -13.501771926879883

Token 492: ' la' (ID: 557)
  Prédit: 'range'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'range' → logprob: -1.1155471801757812
    2. 'in' → logprob: -1.2405471801757812
    3. '(range' → logprob: -1.8655471801757812
    4. '(in' → logprob: -2.1155471801757812
    5. '(it' → logprob: -3.2405471801757812
    6. 'it' → logprob: -3.7405471801757812
    7. 'zip' → logprob: -4.115547180175781
    8. '(zip' → logprob: -4.365547180175781
    9. 'chain' → logprob: -5.740547180175781
    10. '(chain' → logprob: -5.740547180175781

Token 493: ' boucle' (ID: 174211)
  Prédit: 'range'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'range' → logprob: -0.31149211525917053
    2. 'in' → logprob: -1.9364920854568481
    3. 'it' → logprob: -2.1864922046661377
    4. '(it' → logprob: -5.686491966247559
    5. '(range' → logprob: -6.061491966247559
    6. 'chain' → logprob: -6.436491966247559
    7. 'sys' → logprob: -6.561491966247559
    8. 'input' → logprob: -7.311491966247559
    9. 'zip' → logprob: -7.936491966247559
    10. '(in' → logprob: -8.061491966247559

Token 494: '
' (ID: 198)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.16054438054561615
    2. ' for' → logprob: -2.2855443954467773
    3. '(range' → logprob: -4.035544395446777
    4. 'for' → logprob: -4.410544395446777
    5. '(' → logprob: -4.410544395446777
    6. '(chain' → logprob: -6.660544395446777
    7. '
' → logprob: -7.035544395446777
    8. '(zip' → logprob: -7.910544395446777
    9. ',' → logprob: -8.160544395446777
    10. '((' → logprob: -8.410544395446777

Token 495: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.4809749126434326
    2. 'for' → logprob: -0.9809749126434326
    3. ' for' → logprob: -4.980975151062012
    4. '    
' → logprob: -12.855975151062012
    5. '
' → logprob: -13.105975151062012
    6. '	for' → logprob: -14.230975151062012
    7. 'from' → logprob: -14.730975151062012
    8. '```' → logprob: -14.980975151062012
    9. 'import' → logprob: -15.730975151062012
    10. '       ' → logprob: -15.855975151062012

Token 496: ' for' (ID: 395)
  Prédit: 'for'
  Correct (stricte): False
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'for' (adapté à ' for') → logprob: -0.0008237993461079895
    2. ' for' → logprob: -7.625823974609375
    3. '   ' → logprob: -8.000823974609375
    4. 'from' → logprob: -15.250823974609375
    5. '
' → logprob: -15.500823974609375
    6. 'import' → logprob: -17.125823974609375
    7. '    
' → logprob: -17.125823974609375
    8. '	for' → logprob: -17.250823974609375
    9. 'enumer' → logprob: -17.750823974609375
    10. 'chain' → logprob: -17.875823974609375

Token 497: ' idx' (ID: 14016)
  Prédit: 'i'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'i' → logprob: -0.05658770352602005
    2. '_,' → logprob: -3.5565876960754395
    3. ' i' → logprob: -4.4315876960754395
    4. '_i' → logprob: -5.3065876960754395
    5. 'a' → logprob: -5.4315876960754395
    6. '_' → logprob: -5.4315876960754395
    7. ' _,' → logprob: -8.681588172912598
    8. ' _' → logprob: -8.931588172912598
    9. '_a' → logprob: -8.931588172912598
    10. 'u' → logprob: -9.431588172912598

Token 498: ',' (ID: 11)
  Prédit: ','
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ',' → logprob: -0.03583403676748276
    2. ' in' → logprob: -3.5358340740203857
    3. 'in' → logprob: -5.910833835601807
    4. '_,' → logprob: -6.410833835601807
    5. ' ,' → logprob: -6.910833835601807
    6. ',_' → logprob: -7.410833835601807
    7. '_' → logprob: -10.785834312438965
    8. ',a' → logprob: -10.910834312438965
    9. 'i' → logprob: -11.910834312438965
    10. ',i' → logprob: -12.160834312438965

Token 499: ' (' (ID: 350)
  Prédit: '(i'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(i' → logprob: -0.8193411231040955
    2. '(x' → logprob: -1.1943411827087402
    3. '(line' → logprob: -2.5693411827087402
    4. '(a' → logprob: -3.1943411827087402
    5. 'line' → logprob: -3.1943411827087402
    6. '(val' → logprob: -3.3193411827087402
    7. '(u' → logprob: -3.9443411827087402
    8. 'x' → logprob: -4.69434118270874
    9. ' (' → logprob: -4.69434118270874
    10. '_' → logprob: -5.19434118270874

Token 500: 'a' (ID: 64)
  Prédit: 'a'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'a' → logprob: -0.00022308611369226128
    2. ' a' → logprob: -8.875223159790039
    3. '_a' → logprob: -10.375223159790039
    4. 'x' → logprob: -11.750223159790039
    5. '   ' → logprob: -11.750223159790039
    6. '(a' → logprob: -11.875223159790039
    7. 'i' → logprob: -12.250223159790039
    8. 'u' → logprob: -12.375223159790039
    9. '	a' → logprob: -12.375223159790039
    10. '_,' → logprob: -13.000223159790039

Token 501: ',' (ID: 11)
  Prédit: ','
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ',' → logprob: -0.04361654072999954
    2. ',b' → logprob: -3.168616533279419
    3. ' ,' → logprob: -8.04361629486084
    4. 'b' → logprob: -8.16861629486084
    5. '_,' → logprob: -11.91861629486084
    6. ',
' → logprob: -13.41861629486084
    7. ',_' → logprob: -13.79361629486084
    8. ',n' → logprob: -14.04361629486084
    9. ' b' → logprob: -14.16861629486084
    10. ',i' → logprob: -15.29361629486084

Token 502: ' b' (ID: 287)
  Prédit: 'b'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'b' → logprob: -0.0015023599844425917
    2. ' b' → logprob: -6.501502513885498
    3. '
' → logprob: -17.501502990722656
    4. ' ' → logprob: -17.751502990722656
    5. '	b' → logprob: -18.251502990722656
    6. ')b' → logprob: -19.126502990722656
    7. '_' → logprob: -19.376502990722656
    8. '_b' → logprob: -19.376502990722656
    9. ')' → logprob: -19.751502990722656
    10. '   ' → logprob: -19.876502990722656

Token 503: ')' (ID: 8)
  Prédit: ')'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')' → logprob: -1.664371848164592e-05
    2. 'in' → logprob: -11.750016212463379
    3. ' )' → logprob: -11.875016212463379
    4. ' in' → logprob: -14.500016212463379
    5. '   ' → logprob: -15.000016212463379
    6. ',)' → logprob: -15.750016212463379
    7. '),' → logprob: -16.125017166137695
    8. ')
' → logprob: -16.375017166137695
    9. '_)' → logprob: -16.625017166137695
    10. ' ' → logprob: -16.625017166137695

Token 504: ' in' (ID: 306)
  Prédit: ' in'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' in' → logprob: -0.20142942667007446
    2. 'in' → logprob: -1.7014293670654297
    3. ')' → logprob: -11.32642936706543
    4. ' ' → logprob: -12.95142936706543
    5. '
' → logprob: -14.57642936706543
    6. '   ' → logprob: -15.45142936706543
    7. ',' → logprob: -15.45142936706543
    8. '	in' → logprob: -15.82642936706543
    9. '  ' → logprob: -16.20142936706543
    10. ' ' → logprob: -17.20142936706543

Token 505: ' enumerate' (ID: 29671)
  Prédit: 'enumer'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'enumer' → logprob: -0.003223821986466646
    2. ' enumerate' → logprob: -5.753223896026611
    3. 'it' → logprob: -10.503223419189453
    4. 'zip' → logprob: -11.628223419189453
    5. 'chain' → logprob: -11.753223419189453
    6. 'en' → logprob: -14.378223419189453
    7. ' itertools' → logprob: -15.128223419189453
    8. 'enum' → logprob: -15.503223419189453
    9. '   ' → logprob: -15.753223419189453
    10. '(en' → logprob: -15.878223419189453

Token 506: '(it' (ID: 29445)
  Prédit: '(it'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(it' → logprob: -0.40716665983200073
    2. '(chain' → logprob: -2.0321667194366455
    3. '(in' → logprob: -2.6571667194366455
    4. 'it' → logprob: -2.9071667194366455
    5. 'in' → logprob: -3.0321667194366455
    6. 'chain' → logprob: -3.6571667194366455
    7. '(iter' → logprob: -6.782166481018066
    8. '(zip' → logprob: -7.032166481018066
    9. '((' → logprob: -7.532166481018066
    10. ' itertools' → logprob: -7.907166481018066

Token 507: 'ertools' (ID: 88385)
  Prédit: 'ertools'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'ertools' → logprob: -0.0012241550721228123
    2. 'er' → logprob: -7.001224040985107
    3. 'erm' → logprob: -8.501224517822266
    4. '(it' → logprob: -10.001224517822266
    5. 'chain' → logprob: -11.126224517822266
    6. 'it' → logprob: -11.751224517822266
    7. 'ermap' → logprob: -11.751224517822266
    8. 'erms' → logprob: -11.751224517822266
    9. ' itertools' → logprob: -12.001224517822266
    10. '(chain' → logprob: -12.001224517822266

Token 508: '.st' (ID: 1980)
  Prédit: '.chain'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '.chain' → logprob: -0.018772771582007408
    2. '.is' → logprob: -4.143772602081299
    3. '.zip' → logprob: -6.268772602081299
    4. '.st' → logprob: -7.893772602081299
    5. 'chain' → logprob: -9.018773078918457
    6. '.c' → logprob: -9.268773078918457
    7. '.com' → logprob: -9.393773078918457
    8. 'is' → logprob: -9.393773078918457
    9. '.count' → logprob: -11.268773078918457
    10. '.' → logprob: -11.268773078918457

Token 509: 'arm' (ID: 2218)
  Prédit: 'er'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'er' → logprob: -0.3961479067802429
    2. 'ertools' → logprob: -1.3961479663848877
    3. 'arm' → logprob: -2.7711479663848877
    4. 'erm' → logprob: -5.521147727966309
    5. 'per' → logprob: -5.646147727966309
    6. '.chain' → logprob: -6.146147727966309
    7. 'chain' → logprob: -6.396147727966309
    8. '(chain' → logprob: -6.521147727966309
    9. 'ar' → logprob: -6.896147727966309
    10. '.com' → logprob: -7.646147727966309

Token 510: 'ap' (ID: 403)
  Prédit: 'ap'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'ap' → logprob: -1.9504606825648807e-05
    2. 'arm' → logprob: -11.250019073486328
    3. 'map' → logprob: -12.250019073486328
    4. 'app' → logprob: -13.750019073486328
    5. 'com' → logprob: -15.500019073486328
    6. '(ap' → logprob: -16.875019073486328
    7. 'am' → logprob: -17.125019073486328
    8. 'per' → logprob: -17.250019073486328
    9. 'ar' → logprob: -17.375019073486328
    10. 'ack' → logprob: -17.625019073486328

Token 511: '(lambda' (ID: 43341)
  Prédit: '(lambda'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(lambda' → logprob: -0.5905544757843018
    2. '(in' → logprob: -0.8405544757843018
    3. '(tuple' → logprob: -5.090554237365723
    4. '(input' → logprob: -5.840554237365723
    5. '(int' → logprob: -5.965554237365723
    6. '(zip' → logprob: -6.715554237365723
    7. '(' → logprob: -7.715554237365723
    8. 'in' → logprob: -7.715554237365723
    9. '(range' → logprob: -8.340554237365723
    10. 'lambda' → logprob: -8.965554237365723

Token 512: ' _:' (ID: 133568)
  Prédit: 'lambda'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'lambda' → logprob: -0.16250772774219513
    2. 'int' → logprob: -2.4125077724456787
    3. 'tuple' → logprob: -4.0375075340271
    4. 'in' → logprob: -4.2875075340271
    5. '(lambda' → logprob: -4.7875075340271
    6. '   ' → logprob: -5.4125075340271
    7. 'range' → logprob: -5.5375075340271
    8. ' lambda' → logprob: -5.6625075340271
    9. '(int' → logprob: -6.2875075340271
    10. 'ab' → logprob: -7.1625075340271

Token 513: ' in' (ID: 306)
  Prédit: 'in'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'in' → logprob: -0.29359084367752075
    2. 'lambda' → logprob: -1.668590784072876
    3. 'tuple' → logprob: -3.418590784072876
    4. 'ab' → logprob: -3.793590784072876
    5. '(lambda' → logprob: -5.293591022491455
    6. ' in' → logprob: -6.543591022491455
    7. ' lambda' → logprob: -7.293591022491455
    8. 'input' → logprob: -7.293591022491455
    9. '   ' → logprob: -7.418591022491455
    10. 'range' → logprob: -8.043590545654297

Token 514: 'pm' (ID: 6991)
  Prédit: 'pl'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'pl' → logprob: -0.019760984927415848
    2. 'in' → logprob: -4.394761085510254
    3. 'pm' → logprob: -5.269761085510254
    4. 'pls' → logprob: -7.019761085510254
    5. '(pl' → logprob: -8.894761085510254
    6. 'plt' → logprob: -9.019761085510254
    7. 'plit' → logprob: -9.144761085510254
    8. ' in' → logprob: -9.394761085510254
    9. 'p' → logprob: -9.394761085510254
    10. 'tuple' → logprob: -9.519761085510254

Token 515: '(),' (ID: 2547)
  Prédit: ','
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ',' → logprob: -0.04416404664516449
    2. 'range' → logprob: -3.419163942337036
    3. '(range' → logprob: -5.669164180755615
    4. '   ' → logprob: -5.919164180755615
    5. ' ,' → logprob: -6.669164180755615
    6. '(),' → logprob: -7.169164180755615
    7. 'lambda' → logprob: -7.294164180755615
    8. '_,' → logprob: -7.919164180755615
    9. '(lambda' → logprob: -8.169163703918457
    10. ' range' → logprob: -8.794163703918457

Token 516: ' range' (ID: 3352)
  Prédit: 'range'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'range' → logprob: -0.0023157147224992514
    2. 'it' → logprob: -6.752315521240234
    3. ' range' → logprob: -7.627315521240234
    4. 'enumer' → logprob: -8.502315521240234
    5. 'chain' → logprob: -8.877315521240234
    6. '[' → logprob: -9.377315521240234
    7. '   ' → logprob: -9.502315521240234
    8. '[(' → logprob: -9.627315521240234
    9. 'zip' → logprob: -10.127315521240234
    10. '(range' → logprob: -10.752315521240234

Token 517: '(n' (ID: 2406)
  Prédit: '(n'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(n' → logprob: -0.0019010324031114578
    2. '(' → logprob: -6.376901149749756
    3. 'n' → logprob: -8.626900672912598
    4. '(len' → logprob: -12.126900672912598
    5. '((' → logprob: -12.251900672912598
    6. '(int' → logprob: -12.376900672912598
    7. '(m' → logprob: -13.876900672912598
    8. '   ' → logprob: -14.126900672912598
    9. '(
' → logprob: -14.251900672912598
    10. '1' → logprob: -14.251900672912598

Token 518: ' -' (ID: 533)
  Prédit: '-'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '-' → logprob: -0.9694516658782959
    2. ' -' → logprob: -0.9694516658782959
    3. '(n' → logprob: -1.469451665878296
    4. 'n' → logprob: -6.094451904296875
    5. ')):
' → logprob: -6.219451904296875
    6. '(' → logprob: -6.344451904296875
    7. ',' → logprob: -6.594451904296875
    8. '))' → logprob: -6.719451904296875
    9. '   ' → logprob: -6.969451904296875
    10. ')):' → logprob: -7.344451904296875

Token 519: ' ' (ID: 220)
  Prédit: '1'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '1' → logprob: -0.00041220002458430827
    2. '   ' → logprob: -9.125411987304688
    3. 'n' → logprob: -9.500411987304688
    4. ' ' → logprob: -9.750411987304688
    5. '2' → logprob: -9.875411987304688
    6. '(' → logprob: -10.250411987304688
    7. '(n' → logprob: -10.250411987304688
    8. '-' → logprob: -10.375411987304688
    9. ')' → logprob: -12.375411987304688
    10. '  ' → logprob: -12.500411987304688

Token 520: '1' (ID: 16)
  Prédit: '1'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '1' → logprob: -0.00458202650770545
    2. '2' → logprob: -5.629581928253174
    3. '-' → logprob: -8.379582405090332
    4. 'idx' → logprob: -8.629582405090332
    5. 'n' → logprob: -8.879582405090332
    6. '(' → logprob: -8.879582405090332
    7. ')' → logprob: -9.879582405090332
    8. ' ' → logprob: -10.004582405090332
    9. '   ' → logprob: -10.254582405090332
    10. '))' → logprob: -10.879582405090332

Token 521: '))' (ID: 915)
  Prédit: ')):'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')):' → logprob: -0.02151448093354702
    2. '))' → logprob: -4.146514415740967
    3. ')):
' → logprob: -5.271514415740967
    4. '):' → logprob: -8.771514892578125
    5. ')):
' → logprob: -9.521514892578125
    6. '()))' → logprob: -10.521514892578125
    7. ' ))' → logprob: -11.021514892578125
    8. ')' → logprob: -11.021514892578125
    9. ':' → logprob: -11.271514892578125
    10. '));' → logprob: -11.646514892578125

Token 522: '):
' (ID: 1883)
  Prédit: '):'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '):' → logprob: -0.020879000425338745
    2. '):
' → logprob: -3.895879030227661
    3. ':' → logprob: -8.395878791809082
    4. '   ' → logprob: -9.520878791809082
    5. '):
' → logprob: -10.770878791809082
    6. ')' → logprob: -11.145878791809082
    7. '():' → logprob: -14.020878791809082
    8. '       ' → logprob: -14.645878791809082
    9. ':
' → logprob: -14.770878791809082
    10. ',' → logprob: -15.645878791809082

Token 523: '       ' (ID: 309)
  Prédit: '       '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '       ' → logprob: -0.016945799812674522
    2. '   ' → logprob: -4.141945838928223
    3. ':' → logprob: -7.641945838928223
    4. '):
' → logprob: -8.891945838928223
    5. ',' → logprob: -9.391945838928223
    6. ':
' → logprob: -9.766945838928223
    7. '
' → logprob: -10.266945838928223
    8. '<|end|>' → logprob: -10.641945838928223
    9. '):' → logprob: -11.266945838928223
    10. '      ' → logprob: -11.516945838928223

Token 524: ' a' (ID: 261)
  Prédit: '       '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '       ' → logprob: -0.06390229612588882
    2. '   ' → logprob: -2.8139023780822754
    3. 'a' (adapté à ' a') → logprob: -7.063902378082275
    4. ' a' → logprob: -7.938902378082275
    5. 'ab' → logprob: -8.313901901245117
    6. ' ab' → logprob: -8.438901901245117
    7. 'g' → logprob: -8.813901901245117
    8. ' g' → logprob: -10.313901901245117
    9. '    ' → logprob: -10.813901901245117
    10. '      ' → logprob: -11.438901901245117

Token 525: ' -=' (ID: 12583)
  Prédit: ','
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ',' → logprob: -0.03600171580910683
    2. '-' → logprob: -4.161001682281494
    3. ' -=' → logprob: -4.286001682281494
    4. '-=' → logprob: -5.661001682281494
    5. ' ,' → logprob: -6.411001682281494
    6. ' -' → logprob: -8.286002159118652
    7. ',a' → logprob: -8.411002159118652
    8. ',b' → logprob: -8.911002159118652
    9. '   ' → logprob: -9.536002159118652
    10. ',v' → logprob: -9.661002159118652

Token 526: ' ' (ID: 220)
  Prédit: '1'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '1' → logprob: -2.7729658540920354e-05
    2. ' ' → logprob: -10.500027656555176
    3. '   ' → logprob: -16.750028610229492
    4. '<|end|>' → logprob: -17.125028610229492
    5. '```' → logprob: -19.750028610229492
    6. '
' → logprob: -20.562528610229492
    7. '۱' → logprob: -20.625028610229492
    8. '  ' → logprob: -20.625028610229492
    9. '...' → logprob: -20.937528610229492
    10. '    ' → logprob: -21.000028610229492

Token 527: '1' (ID: 16)
  Prédit: '1'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '1' → logprob: -4.36574100604048e-06
    2. ' ' → logprob: -12.375004768371582
    3. '   ' → logprob: -16.750003814697266
    4. '<|end|>' → logprob: -17.625003814697266
    5. '```' → logprob: -19.125003814697266
    6. '[' → logprob: -20.750003814697266
    7. 'def' → logprob: -20.750003814697266
    8. '১' → logprob: -20.812503814697266
    9. '۱' → logprob: -20.875003814697266
    10. '       ' → logprob: -20.937503814697266

Token 528: '
' (ID: 198)
  Prédit: 'b'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'b' → logprob: -0.09918855130672455
    2. '       ' → logprob: -2.7241885662078857
    3. '
' → logprob: -4.349188327789307
    4. '   ' → logprob: -4.599188327789307
    5. ',' → logprob: -5.724188327789307
    6. '<|end|>' → logprob: -7.224188327789307
    7. ' b' → logprob: -7.474188327789307
    8. ',b' → logprob: -7.849188327789307
    9. '           ' → logprob: -7.974188327789307
    10. '	b' → logprob: -8.724188804626465

Token 529: '       ' (ID: 309)
  Prédit: 'b'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'b' → logprob: -0.0432397685945034
    2. '   ' → logprob: -3.2932398319244385
    3. ' b' → logprob: -5.293239593505859
    4. '       ' → logprob: -9.41823959350586
    5. ' ' → logprob: -10.66823959350586
    6. '	b' → logprob: -11.04323959350586
    7. '
' → logprob: -11.16823959350586
    8. ',b' → logprob: -11.29323959350586
    9. ',' → logprob: -11.41823959350586
    10. '  ' → logprob: -15.04323959350586

Token 530: ' b' (ID: 287)
  Prédit: 'b'
  Correct (stricte): False
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'b' (adapté à ' b') → logprob: -2.7491250875755213e-05
    2. '   ' → logprob: -11.000027656555176
    3. ' b' → logprob: -11.875027656555176
    4. '       ' → logprob: -12.500027656555176
    5. '    ' → logprob: -17.50002670288086
    6. '	b' → logprob: -17.50002670288086
    7. '           ' → logprob: -18.12502670288086
    8. '        ' → logprob: -18.37502670288086
    9. ' ' → logprob: -18.87502670288086
    10. 'ab' → logprob: -19.50002670288086

Token 531: ' -=' (ID: 12583)
  Prédit: ' -='
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' -=' → logprob: -0.030138399451971054
    2. '-=' → logprob: -3.5301384925842285
    3. '-' → logprob: -7.9051384925842285
    4. ' ' → logprob: -11.78013801574707
    5. ' -' → logprob: -12.53013801574707
    6. '=' → logprob: -13.03013801574707
    7. '   ' → logprob: -13.03013801574707
    8. '	' → logprob: -14.40513801574707
    9. ',' → logprob: -14.40513801574707
    10. ' ' → logprob: -14.65513801574707

Token 532: ' ' (ID: 220)
  Prédit: '1'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '1' → logprob: -0.0001234428636962548
    2. ' ' → logprob: -9.000123023986816
    3. '   ' → logprob: -18.125123977661133
    4. '<|end|>' → logprob: -18.500123977661133
    5. '-' → logprob: -19.500123977661133
    6. '=' → logprob: -19.750123977661133
    7. '```' → logprob: -19.750123977661133
    8. '0' → logprob: -19.875123977661133
    9. '2' → logprob: -20.125123977661133
    10. 'def' → logprob: -20.875123977661133

Token 533: '1' (ID: 16)
  Prédit: '1'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '1' → logprob: -1.1875571544806007e-05
    2. ' ' → logprob: -11.375011444091797
    3. '```' → logprob: -16.375011444091797
    4. '   ' → logprob: -16.687511444091797
    5. '-' → logprob: -17.375011444091797
    6. '2' → logprob: -17.562511444091797
    7. '0' → logprob: -18.062511444091797
    8. 'a' → logprob: -18.375011444091797
    9. '۱' → logprob: -18.375011444091797
    10. '１' → logprob: -18.562511444091797

Token 534: '
' (ID: 198)
  Prédit: '       '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '       ' → logprob: -0.0033401409164071083
    2. '   ' → logprob: -5.753340244293213
    3. '<|end|>' → logprob: -9.003339767456055
    4. ',' → logprob: -10.878339767456055
    5. '
' → logprob: -11.628339767456055
    6. ' ' → logprob: -12.253339767456055
    7. 'g' → logprob: -13.253339767456055
    8. ' g' → logprob: -14.253339767456055
    9. '<|end|>' → logprob: -14.253339767456055
    10. ' ab' → logprob: -14.628339767456055

Token 535: '       ' (ID: 309)
  Prédit: '       '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '       ' → logprob: -0.03812858462333679
    2. '   ' → logprob: -3.288128614425659
    3. 'g' → logprob: -10.413128852844238
    4. '<|end|>' → logprob: -10.663128852844238
    5. ' ' → logprob: -11.788128852844238
    6. 'ab' → logprob: -11.913128852844238
    7. ' ab' → logprob: -12.288128852844238
    8. '
' → logprob: -12.663128852844238
    9. '     ' → logprob: -13.038128852844238
    10. '           ' → logprob: -13.163128852844238

Token 536: ' g' (ID: 329)
  Prédit: 'g'
  Correct (stricte): False
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'g' (adapté à ' g') → logprob: -0.0007889019907452166
    2. 'ab' → logprob: -7.750788688659668
    3. '   ' → logprob: -8.000788688659668
    4. '       ' → logprob: -10.875788688659668
    5. ' g' → logprob: -12.750788688659668
    6. 'a' → logprob: -14.625788688659668
    7. '	g' → logprob: -15.000788688659668
    8. '           ' → logprob: -15.625788688659668
    9. '  ' → logprob: -17.125789642333984
    10. '    ' → logprob: -17.250789642333984

Token 537: '[a' (ID: 32035)
  Prédit: '[a'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '[a' → logprob: -3.416665640543215e-05
    2. '[u' → logprob: -10.37503433227539
    3. '[g' → logprob: -13.37503433227539
    4. 'a' → logprob: -14.00003433227539
    5. '[' → logprob: -14.87503433227539
    6. '1' → logprob: -16.25003433227539
    7. '[b' → logprob: -17.25003433227539
    8. '```' → logprob: -17.87503433227539
    9. '[i' → logprob: -18.12503433227539
    10. 'g' → logprob: -19.12503433227539

Token 538: '].' (ID: 1651)
  Prédit: '].'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '].' → logprob: -3.774276774493046e-05
    2. '.append' → logprob: -10.875038146972656
    3. ']' → logprob: -11.250038146972656
    4. ' ].' → logprob: -12.875038146972656
    5. '   ' → logprob: -13.125038146972656
    6. '[a' → logprob: -14.250038146972656
    7. '.' → logprob: -16.000038146972656
    8. '[' → logprob: -16.250038146972656
    9. ').' → logprob: -16.500038146972656
    10. 'append' → logprob: -16.875038146972656

Token 539: 'append' (ID: 9132)
  Prédit: 'append'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'append' → logprob: -3.128163257315464e-07
    2. '.append' → logprob: -15.5
    3. ' append' → logprob: -16.75
    4. 'app' → logprob: -19.25
    5. '_append' → logprob: -20.625
    6. 'Append' → logprob: -20.75
    7. 'appen' → logprob: -20.875
    8. '	append' → logprob: -21.125
    9. 'push' → logprob: -21.75
    10. 'add' → logprob: -22.25

Token 540: '(b' (ID: 3229)
  Prédit: 'b'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'b' → logprob: -0.04859123006463051
    2. '(b' → logprob: -3.048591136932373
    3. ' b' → logprob: -12.548591613769531
    4. '	b' → logprob: -14.923591613769531
    5. ')b' → logprob: -17.42359161376953
    6. '   ' → logprob: -19.04859161376953
    7. '[b' → logprob: -19.04859161376953
    8. ',b' → logprob: -19.29859161376953
    9. '_b' → logprob: -19.29859161376953
    10. ' (' → logprob: -20.17359161376953

Token 541: ')
' (ID: 446)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')' → logprob: -0.25198543071746826
    2. ')
' → logprob: -1.5019854307174683
    3. '       ' → logprob: -10.251985549926758
    4. ')
' → logprob: -10.876985549926758
    5. ')

' → logprob: -14.251985549926758
    6. '   ' → logprob: -14.751985549926758
    7. '),' → logprob: -15.501985549926758
    8. ')b' → logprob: -15.501985549926758
    9. '<|end|>' → logprob: -15.626985549926758
    10. ' )
' → logprob: -15.751985549926758

Token 542: '       ' (ID: 309)
  Prédit: '       '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '       ' → logprob: -0.00031890018726699054
    2. 'g' → logprob: -8.37531852722168
    3. ' g' → logprob: -9.87531852722168
    4. '   ' → logprob: -10.50031852722168
    5. '<|end|>' → logprob: -11.87531852722168
    6. ' ' → logprob: -13.50031852722168
    7. 'b' → logprob: -14.87531852722168
    8. ',' → logprob: -16.00031852722168
    9. '```' → logprob: -16.00031852722168
    10. ' and' → logprob: -16.50031852722168

Token 543: ' g' (ID: 329)
  Prédit: 'g'
  Correct (stricte): False
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'g' (adapté à ' g') → logprob: -0.08029024302959442
    2. '       ' → logprob: -2.5802903175354004
    3. ' g' → logprob: -6.5802903175354
    4. '   ' → logprob: -12.205289840698242
    5. 'v' → logprob: -12.830289840698242
    6. '	g' → logprob: -12.955289840698242
    7. ' ' → logprob: -14.205289840698242
    8. 'b' → logprob: -15.330289840698242
    9. '      ' → logprob: -15.705289840698242
    10. ' ' → logprob: -15.705289840698242

Token 544: '[b' (ID: 40800)
  Prédit: '[b'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '[b' → logprob: -2.236549335066229e-05
    2. 'b' → logprob: -11.000021934509277
    3. '[a' → logprob: -12.875021934509277
    4. '[g' → logprob: -13.000021934509277
    5. '[' → logprob: -14.375021934509277
    6. '1' → logprob: -16.375022888183594
    7. '```' → logprob: -16.750022888183594
    8. '[u' → logprob: -17.000022888183594
    9. '   ' → logprob: -18.125022888183594
    10. '	b' → logprob: -18.125022888183594

Token 545: '].' (ID: 1651)
  Prédit: '].'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '].' → logprob: -7.576873758807778e-05
    2. ').' → logprob: -9.625075340270996
    3. ' ].' → logprob: -12.375075340270996
    4. '.append' → logprob: -12.875075340270996
    5. '.' → logprob: -13.500075340270996
    6. ']' → logprob: -13.875075340270996
    7. '   ' → logprob: -15.625075340270996
    8. '}.' → logprob: -16.500076293945312
    9. ' .' → logprob: -17.125076293945312
    10. '[' → logprob: -17.500076293945312

Token 546: 'append' (ID: 9132)
  Prédit: 'append'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'append' → logprob: -2.1008713702030946e-06
    2. 'appen' → logprob: -13.875001907348633
    3. ' append' → logprob: -14.375001907348633
    4. '.append' → logprob: -15.000001907348633
    5. 'app' → logprob: -16.000001907348633
    6. '	append' → logprob: -16.375001907348633
    7. 'add' → logprob: -17.875001907348633
    8. '```' → logprob: -18.750001907348633
    9. 'insert' → logprob: -19.000001907348633
    10. 'prepend' → logprob: -19.000001907348633

Token 547: '(a' (ID: 6271)
  Prédit: '(a'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(a' → logprob: -0.0009130131802521646
    2. 'a' → logprob: -7.000913143157959
    3. '(
' → logprob: -14.0009126663208
    4. '(' → logprob: -14.2509126663208
    5. 'g' → logprob: -18.625913619995117
    6. ' (' → logprob: -18.625913619995117
    7. '```' → logprob: -18.750913619995117
    8. '   ' → logprob: -19.500913619995117
    9. '[a' → logprob: -19.500913619995117
    10. '((' → logprob: -19.625913619995117

Token 548: ')
' (ID: 446)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')' → logprob: -0.00011343709047650918
    2. ')
' → logprob: -9.125113487243652
    3. '       ' → logprob: -13.375113487243652
    4. '<|end|>' → logprob: -13.750113487243652
    5. '   ' → logprob: -14.250113487243652
    6. ')

' → logprob: -15.250113487243652
    7. ' )' → logprob: -15.500113487243652
    8. ')return' → logprob: -15.500113487243652
    9. ')}' → logprob: -16.125112533569336
    10. '))' → logprob: -16.250112533569336

Token 549: '       ' (ID: 309)
  Prédit: '       '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '       ' → logprob: -0.00012296605564188212
    2. '   ' → logprob: -9.250123023986816
    3. '<|end|>' → logprob: -10.875123023986816
    4. '
' → logprob: -13.000123023986816
    5. '<|end|>' → logprob: -13.375123023986816
    6. '```' → logprob: -14.000123023986816
    7. ',' → logprob: -14.375123023986816
    8. 'ab' → logprob: -14.375123023986816
    9. ' ' → logprob: -15.000123023986816
    10. '           ' → logprob: -15.000123023986816

Token 550: ' ab' (ID: 692)
  Prédit: 'ab'
  Correct (stricte): False
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'ab' (adapté à ' ab') → logprob: -0.15325918793678284
    2. ' ab' → logprob: -2.40325927734375
    3. '   ' → logprob: -3.27825927734375
    4. '       ' → logprob: -4.27825927734375
    5. '
' → logprob: -10.15325927734375
    6. ' ' → logprob: -11.02825927734375
    7. '  ' → logprob: -11.52825927734375
    8. '_ab' → logprob: -11.90325927734375
    9. '      ' → logprob: -12.65325927734375
    10. '    ' → logprob: -12.65325927734375

Token 551: '.append' (ID: 3709)
  Prédit: '.append'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '.append' → logprob: -0.0004791704413946718
    2. '.' → logprob: -7.875479221343994
    3. '.ap' → logprob: -9.500478744506836
    4. '.app' → logprob: -10.875478744506836
    5. ' .' → logprob: -13.375478744506836
    6. '.extend' → logprob: -13.875478744506836
    7. '.add' → logprob: -14.625478744506836
    8. ').' → logprob: -14.750478744506836
    9. '.push' → logprob: -14.750478744506836
    10. '=' → logprob: -15.125478744506836

Token 552: '((' (ID: 2054)
  Prédit: '(('
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '((' → logprob: -0.3944116234779358
    2. '(a' → logprob: -1.144411563873291
    3. '(' → logprob: -4.894411563873291
    4. ' (' → logprob: -11.89441204071045
    5. '(ab' → logprob: -12.26941204071045
    6. '([' → logprob: -12.51941204071045
    7. '(b' → logprob: -13.26941204071045
    8. '((_' → logprob: -13.39441204071045
    9. '(ans' → logprob: -13.76941204071045
    10. '(_' → logprob: -14.14441204071045

Token 553: 'a' (ID: 64)
  Prédit: 'a'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'a' → logprob: -6.742448022123426e-05
    2. ' a' → logprob: -9.625067710876465
    3. '(a' → logprob: -14.125067710876465
    4. '   ' → logprob: -14.750067710876465
    5. ')a' → logprob: -16.50006675720215
    6. ')' → logprob: -16.87506675720215
    7. ' (' → logprob: -17.00006675720215
    8. '	a' → logprob: -17.12506675720215
    9. '[a' → logprob: -17.75006675720215
    10. ' ' → logprob: -18.00006675720215

Token 554: ',' (ID: 11)
  Prédit: ','
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ',' → logprob: -0.0012218938209116459
    2. ',b' → logprob: -6.751221656799316
    3. ' ,' → logprob: -10.126221656799316
    4. ',
' → logprob: -11.501221656799316
    5. 'b' → logprob: -14.376221656799316
    6. ')' → logprob: -15.251221656799316
    7. '),' → logprob: -15.376221656799316
    8. '<|end|>' → logprob: -15.626221656799316
    9. ',a' → logprob: -15.751221656799316
    10. 'a' → logprob: -16.626222610473633

Token 555: ' b' (ID: 287)
  Prédit: 'b'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'b' → logprob: -5.848420551046729e-05
    2. ' b' → logprob: -9.7500581741333
    3. ')b' → logprob: -16.625059127807617
    4. ')' → logprob: -17.125059127807617
    5. '(b' → logprob: -18.000059127807617
    6. '<|end|>' → logprob: -18.375059127807617
    7. '   ' → logprob: -20.750059127807617
    8. ' (' → logprob: -20.875059127807617
    9. '	b' → logprob: -21.250059127807617
    10. ' ' → logprob: -21.875059127807617

Token 556: '))
' (ID: 2210)
  Prédit: '))'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '))' → logprob: -0.2520449161529541
    2. ')' → logprob: -1.502044916152954
    3. '))
' → logprob: -9.252044677734375
    4. ')
' → logprob: -11.252044677734375
    5. ')))' → logprob: -12.252044677734375
    6. ')}' → logprob: -14.877044677734375
    7. '       ' → logprob: -15.002044677734375
    8. ' ))' → logprob: -15.252044677734375
    9. '),' → logprob: -15.752044677734375
    10. '   ' → logprob: -15.752044677734375

Token 557: '   ' (ID: 271)
  Prédit: ''
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False

Token 558: ' dis' (ID: 829)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.00791842956095934
    2. '<|end|>' → logprob: -5.132918357849121
    3. 'u' → logprob: -7.382918357849121
    4. ' u' → logprob: -7.632918357849121
    5. 'v' → logprob: -8.132918357849121
    6. ')' → logprob: -8.632918357849121
    7. '    
' → logprob: -9.382918357849121
    8. '#' → logprob: -9.507918357849121
    9. '
' → logprob: -9.632918357849121
    10. '	u' → logprob: -11.007918357849121

Token 559: ' =' (ID: 314)
  Prédit: 'u'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'u' → logprob: -0.4247829020023346
    2. '_u' → logprob: -1.5497828722000122
    3. ' =' → logprob: -2.1747829914093018
    4. '=' → logprob: -5.424782752990723
    5. '   ' → logprob: -5.674782752990723
    6. '1' → logprob: -5.924782752990723
    7. '[u' → logprob: -6.049782752990723
    8. '_uv' → logprob: -6.424782752990723
    9. 's' → logprob: -6.549782752990723
    10. '=u' → logprob: -7.049782752990723

Token 560: ' bfs' (ID: 147571)
  Prédit: 'b'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'b' → logprob: -0.014487717300653458
    2. ' bfs' → logprob: -4.2644877433776855
    3. '[b' → logprob: -8.639487266540527
    4. '   ' → logprob: -9.514487266540527
    5. '(b' → logprob: -10.014487266540527
    6. ' b' → logprob: -11.889487266540527
    7. '  ' → logprob: -12.014487266540527
    8. ' ' → logprob: -12.389487266540527
    9. '[' → logprob: -12.764487266540527
    10. '	b' → logprob: -13.514487266540527

Token 561: '(u' (ID: 17057)
  Prédit: '(u'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(u' → logprob: -9.603335638530552e-05
    2. '(v' → logprob: -9.500096321105957
    3. '(' → logprob: -10.875096321105957
    4. 'u' → logprob: -13.750096321105957
    5. '(
' → logprob: -14.375096321105957
    6. '(s' → logprob: -15.625096321105957
    7. ',u' → logprob: -16.25009536743164
    8. '((' → logprob: -16.50009536743164
    9. ' (' → logprob: -16.62509536743164
    10. 'v' → logprob: -17.12509536743164

Token 562: ' -' (ID: 533)
  Prédit: '-'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '-' → logprob: -0.39324629306793213
    2. ' -' → logprob: -1.1432462930679321
    3. ',' → logprob: -5.518246173858643
    4. '(v' → logprob: -6.643246173858643
    5. '(' → logprob: -8.1432466506958
    6. ' ' → logprob: -9.0182466506958
    7. '   ' → logprob: -9.3932466506958
    8. ',v' → logprob: -9.3932466506958
    9. 'v' → logprob: -9.6432466506958
    10. ' ,' → logprob: -9.7682466506958

Token 563: ' ' (ID: 220)
  Prédit: '1'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '1' → logprob: -9.372294698550832e-06
    2. ' ' → logprob: -11.625009536743164
    3. ')' → logprob: -15.500009536743164
    4. ',' → logprob: -16.375009536743164
    5. '```' → logprob: -17.625009536743164
    6. 'v' → logprob: -17.750009536743164
    7. '2' → logprob: -17.750009536743164
    8. '100' → logprob: -18.687509536743164
    9. '۱' → logprob: -18.750009536743164
    10. '１' → logprob: -19.250009536743164

Token 564: '1' (ID: 16)
  Prédit: '1'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '1' → logprob: -1.0325924449716695e-05
    2. ' ' → logprob: -11.75001049041748
    3. ')' → logprob: -13.62501049041748
    4. ',' → logprob: -14.87501049041748
    5. '```' → logprob: -15.12501049041748
    6. '   ' → logprob: -15.93751049041748
    7. '
' → logprob: -16.312509536743164
    8. '2' → logprob: -16.750009536743164
    9. 'v' → logprob: -17.187509536743164
    10. '),' → logprob: -17.875009536743164

Token 565: ',' (ID: 11)
  Prédit: ','
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ',' → logprob: -0.0011079480173066258
    2. ')' → logprob: -7.251108169555664
    3. ',n' → logprob: -8.126108169555664
    4. ',v' → logprob: -9.501108169555664
    5. ' ,' → logprob: -11.251108169555664
    6. ',g' → logprob: -11.876108169555664
    7. ',
' → logprob: -13.126108169555664
    8. '(n' → logprob: -14.001108169555664
    9. '(' → logprob: -14.876108169555664
    10. 'v' → logprob: -14.876108169555664

Token 566: ' n' (ID: 297)
  Prédit: 'n'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'n' → logprob: -5.598092684522271e-05
    2. ' n' → logprob: -9.875056266784668
    3. '   ' → logprob: -12.500056266784668
    4. '	n' → logprob: -14.625056266784668
    5. ')' → logprob: -16.50005531311035
    6. '
' → logprob: -16.62505531311035
    7. 'v' → logprob: -16.75005531311035
    8. ')n' → logprob: -17.00005531311035
    9. '<|end|>' → logprob: -17.25005531311035
    10. '    ' → logprob: -18.00005531311035

Token 567: ',' (ID: 11)
  Prédit: ','
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ',' → logprob: -0.00023607931507285684
    2. ',g' → logprob: -8.500236511230469
    3. 'g' → logprob: -10.625236511230469
    4. ' ,' → logprob: -12.125236511230469
    5. '   ' → logprob: -14.000236511230469
    6. ')' → logprob: -14.125236511230469
    7. ',
' → logprob: -14.750236511230469
    8. ' g' → logprob: -15.125236511230469
    9. '```' → logprob: -15.375236511230469
    10. '_,' → logprob: -17.56273651123047

Token 568: ' g' (ID: 329)
  Prédit: 'g'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'g' → logprob: -8.77627644513268e-06
    2. ' g' → logprob: -11.750008583068848
    3. '   ' → logprob: -14.500008583068848
    4. ')' → logprob: -15.750008583068848
    5. '[g' → logprob: -16.250009536743164
    6. '	g' → logprob: -17.875009536743164
    7. '```' → logprob: -18.000009536743164
    8. 'v' → logprob: -18.250009536743164
    9. '(g' → logprob: -18.750009536743164
    10. '
' → logprob: -18.875009536743164

Token 569: ')
' (ID: 446)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')' → logprob: -0.1602325439453125
    2. ')
' → logprob: -1.9102325439453125
    3. ')
' → logprob: -12.035232543945312
    4. ')

' → logprob: -13.535232543945312
    5. ' )' → logprob: -14.660232543945312
    6. ' )
' → logprob: -15.535232543945312
    7. '),' → logprob: -16.285232543945312
    8. ')#' → logprob: -16.285232543945312
    9. '   ' → logprob: -16.660232543945312
    10. ')v' → logprob: -16.660232543945312

Token 570: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.028013858944177628
    2. 'dis' → logprob: -4.028013706207275
    3. 'dist' → logprob: -5.153013706207275
    4. 'max' → logprob: -6.153013706207275
    5. 'd' → logprob: -7.403013706207275
    6. 'dv' → logprob: -8.028014183044434
    7. 'print' → logprob: -8.528014183044434
    8. 'dp' → logprob: -8.653014183044434
    9. 'def' → logprob: -9.903014183044434
    10. 'ans' → logprob: -9.903014183044434

Token 571: ' path' (ID: 3104)
  Prédit: 'dis'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'dis' → logprob: -0.028858298435807228
    2. 'dist' → logprob: -4.278858184814453
    3. 'dv' → logprob: -4.778858184814453
    4. 'd' → logprob: -6.653858184814453
    5. 'ans' → logprob: -6.903858184814453
    6. 'max' → logprob: -7.028858184814453
    7. 'res' → logprob: -7.278858184814453
    8. '   ' → logprob: -7.903858184814453
    9. 'print' → logprob: -8.153858184814453
    10. 'for' → logprob: -8.403858184814453

Token 572: ' =' (ID: 314)
  Prédit: ' ='
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' =' → logprob: -0.07908619195222855
    2. '=' → logprob: -2.5790863037109375
    3. ',' → logprob: -8.829086303710938
    4. '=[]' → logprob: -10.704086303710938
    5. '_' → logprob: -12.204086303710938
    6. '[' → logprob: -12.829086303710938
    7. '=[' → logprob: -13.079086303710938
    8. ' ' → logprob: -13.079086303710938
    9. '<|end|>' → logprob: -13.079086303710938
    10. ' =
' → logprob: -13.329086303710938

Token 573: ' [' (ID: 723)
  Prédit: '[]'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '[]' → logprob: -0.8024895787239075
    2. '[' → logprob: -1.1774895191192627
    3. '[u' → logprob: -2.0524895191192627
    4. '[v' → logprob: -2.8024895191192627
    5. '[]
' → logprob: -3.4274895191192627
    6. 'deque' → logprob: -4.427489757537842
    7. '[b' → logprob: -5.052489757537842
    8. '[n' → logprob: -7.302489757537842
    9. '[d' → logprob: -7.677489757537842
    10. '{' → logprob: -8.677489280700684

Token 574: 'v' (ID: 85)
  Prédit: 'v'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'v' → logprob: -0.014413466677069664
    2. 'u' → logprob: -4.264413356781006
    3. 'dis' → logprob: -9.014413833618164
    4. ']' → logprob: -10.639413833618164
    5. '(v' → logprob: -10.764413833618164
    6. ' v' → logprob: -11.139413833618164
    7. '[v' → logprob: -11.264413833618164
    8. '0' → logprob: -11.389413833618164
    9. 'ab' → logprob: -11.889413833618164
    10. '	v' → logprob: -13.014413833618164

Token 575: ' -' (ID: 533)
  Prédit: ' -'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' -' → logprob: -0.38689184188842773
    2. '-' → logprob: -1.1368918418884277
    3. ']' → logprob: -11.636892318725586
    4. '   ' → logprob: -12.386892318725586
    5. ' ' → logprob: -13.011892318725586
    6. '[' → logprob: -13.761892318725586
    7. ')' → logprob: -13.886892318725586
    8. '```' → logprob: -14.886892318725586
    9. '()-' → logprob: -15.011892318725586
    10. '--' → logprob: -15.136892318725586

Token 576: ' ' (ID: 220)
  Prédit: '1'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '1' → logprob: -5.080963092041202e-06
    2. ' ' → logprob: -12.375004768371582
    3. '   ' → logprob: -15.125004768371582
    4. '```' → logprob: -15.125004768371582
    5. '2' → logprob: -16.3750057220459
    6. '-' → logprob: -16.6875057220459
    7. ')' → logprob: -17.1250057220459
    8. ']' → logprob: -18.2500057220459
    9. '           ' → logprob: -18.5000057220459
    10. '۱' → logprob: -18.7500057220459

Token 577: '1' (ID: 16)
  Prédit: '1'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '1' → logprob: -7.896309739408025e-07
    2. ' ' → logprob: -15.250000953674316
    3. '```' → logprob: -15.250000953674316
    4. '   ' → logprob: -16.625
    5. '-' → logprob: -16.8125
    6. '2' → logprob: -17.1875
    7. '۱' → logprob: -17.9375
    8. '
' → logprob: -18.0625
    9. '１' → logprob: -18.1875
    10. '[' → logprob: -18.3125

Token 578: ']
' (ID: 1592)
  Prédit: ']
'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ']
' → logprob: -0.4297879934310913
    2. ']' → logprob: -1.0547879934310913
    3. ']

' → logprob: -7.804788112640381
    4. 'while' → logprob: -8.054787635803223
    5. ']
' → logprob: -8.179787635803223
    6. ' ]
' → logprob: -10.304787635803223
    7. ' ]' → logprob: -10.679787635803223
    8. ' while' → logprob: -11.929787635803223
    9. ',' → logprob: -12.804787635803223
    10. '
' → logprob: -12.929787635803223

Token 579: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.23440420627593994
    2. 'while' → logprob: -1.85940420627594
    3. ' while' → logprob: -3.4844040870666504
    4. 'current' → logprob: -3.9844040870666504
    5. ' current' → logprob: -6.48440408706665
    6. '    
' → logprob: -7.48440408706665
    7. '```' → logprob: -7.48440408706665
    8. ',' → logprob: -7.85940408706665
    9. '	while' → logprob: -7.98440408706665
    10. '
' → logprob: -9.109404563903809

Token 580: ' que' (ID: 661)
  Prédit: 'while'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'while' → logprob: -0.08593630790710449
    2. 'current' → logprob: -2.8359363079071045
    3. ' while' → logprob: -3.8359363079071045
    4. 'cur' → logprob: -6.585936546325684
    5. ' current' → logprob: -8.460936546325684
    6. 'curr' → logprob: -9.085936546325684
    7. '
' → logprob: -9.210936546325684
    8. '```' → logprob: -9.460936546325684
    9. 'last' → logprob: -9.710936546325684
    10. 'prev' → logprob: -10.085936546325684

Token 581: ' =' (ID: 314)
  Prédit: ' ='
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' =' → logprob: -0.2963090240955353
    2. '=' → logprob: -1.921308994293213
    3. '.append' → logprob: -2.796308994293213
    4. 'ue' → logprob: -3.046308994293213
    5. 'u' → logprob: -6.796308994293213
    6. '=[' → logprob: -8.796309471130371
    7. '=[]' → logprob: -9.796309471130371
    8. '.pop' → logprob: -10.171309471130371
    9. '=u' → logprob: -10.296309471130371
    10. '.extend' → logprob: -11.671309471130371

Token 582: ' deque' (ID: 90347)
  Prédit: 'deque'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'deque' → logprob: -0.00011510594777064398
    2. '[' → logprob: -9.250115394592285
    3. ' deque' → logprob: -11.625115394592285
    4. '[g' → logprob: -12.375115394592285
    5. '[u' → logprob: -13.625115394592285
    6. '[v' → logprob: -13.750115394592285
    7. 'dis' → logprob: -14.125115394592285
    8. 'queue' → logprob: -14.375115394592285
    9. '[path' → logprob: -14.500115394592285
    10. 'g' → logprob: -15.125115394592285

Token 583: '([' (ID: 5194)
  Prédit: '(['
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '([' → logprob: -0.006183672230690718
    2. '([(' → logprob: -6.006183624267578
    3. '(g' → logprob: -6.631183624267578
    4. '(path' → logprob: -6.631183624267578
    5. '()' → logprob: -8.006183624267578
    6. '[g' → logprob: -8.381183624267578
    7. '(ab' → logprob: -8.756183624267578
    8. '[path' → logprob: -9.131183624267578
    9. '[(' → logprob: -9.881183624267578
    10. '[' → logprob: -9.881183624267578

Token 584: 'v' (ID: 85)
  Prédit: 'v'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'v' → logprob: -0.39916378259658813
    2. 'path' → logprob: -1.1491637229919434
    3. 'dis' → logprob: -4.524163722991943
    4. '(path' → logprob: -7.524163722991943
    5. '(v' → logprob: -7.774163722991943
    6. '(dis' → logprob: -8.899164199829102
    7. 'ab' → logprob: -9.399164199829102
    8. ' path' → logprob: -9.649164199829102
    9. '(' → logprob: -9.774164199829102
    10. ' v' → logprob: -10.774164199829102

Token 585: ' -' (ID: 533)
  Prédit: '-'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '-' → logprob: -0.20327606797218323
    2. ' -' → logprob: -1.8282760381698608
    3. '()-' → logprob: -5.07827615737915
    4. '])' → logprob: -5.70327615737915
    5. '   ' → logprob: -5.82827615737915
    6. '()' → logprob: -5.95327615737915
    7. '])
' → logprob: -5.95327615737915
    8. '(' → logprob: -6.20327615737915
    9. '[' → logprob: -6.45327615737915
    10. '()])
' → logprob: -7.07827615737915

Token 586: ' ' (ID: 220)
  Prédit: '1'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '1' → logprob: -0.00030805266578681767
    2. '2' → logprob: -8.2503080368042
    3. ' ' → logprob: -10.1253080368042
    4. 'v' → logprob: -13.1878080368042
    5. '```' → logprob: -13.2503080368042
    6. '   ' → logprob: -14.5628080368042
    7. 'b' → logprob: -15.3128080368042
    8. '-' → logprob: -15.3128080368042
    9. '(' → logprob: -15.5628080368042
    10. ')' → logprob: -15.6253080368042

Token 587: '1' (ID: 16)
  Prédit: '1'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '1' → logprob: -0.0005642342148348689
    2. '2' → logprob: -7.500564098358154
    3. ' ' → logprob: -12.313064575195312
    4. '```' → logprob: -12.938064575195312
    5. 'v' → logprob: -13.438064575195312
    6. 'b' → logprob: -15.063064575195312
    7. '   ' → logprob: -15.313064575195312
    8. '-' → logprob: -15.688064575195312
    9. '11' → logprob: -15.813064575195312
    10. '۱' → logprob: -15.875564575195312

Token 588: '])
' (ID: 5169)
  Prédit: '])'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '])' → logprob: -0.07917794585227966
    2. '])
' → logprob: -2.5791778564453125
    3. ')' → logprob: -8.579177856445312
    4. ')
' → logprob: -9.829177856445312
    5. '])

' → logprob: -10.954177856445312
    6. '])
' → logprob: -11.704177856445312
    7. ')])' → logprob: -12.454177856445312
    8. ' ])' → logprob: -12.454177856445312
    9. '   ' → logprob: -13.204177856445312
    10. ']' → logprob: -13.204177856445312

Token 589: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.0743892714381218
    2. ' while' → logprob: -3.0743892192840576
    3. 'while' → logprob: -3.6993892192840576
    4. '	while' → logprob: -8.074389457702637
    5. '```' → logprob: -8.574389457702637
    6. '
' → logprob: -9.199389457702637
    7. '    
' → logprob: -9.949389457702637
    8. ')' → logprob: -10.199389457702637
    9. '<|end|>' → logprob: -11.699389457702637
    10. ',' → logprob: -11.824389457702637

Token 590: ' d' (ID: 272)
  Prédit: 'while'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'while' → logprob: -0.5651222467422485
    2. '   ' → logprob: -1.1901222467422485
    3. ' while' → logprob: -2.065122127532959
    4. '	while' → logprob: -8.190122604370117
    5. '```' → logprob: -8.440122604370117
    6. 'prev' → logprob: -9.315122604370117
    7. 'parent' → logprob: -9.690122604370117
    8. 'visited' → logprob: -11.065122604370117
    9. 'dis' → logprob: -11.315122604370117
    10. '
' → logprob: -11.565122604370117

Token 591: ' =' (ID: 314)
  Prédit: 'is'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'is' → logprob: -0.008215012028813362
    2. ' =' → logprob: -5.133214950561523
    3. '=' → logprob: -7.008214950561523
    4. 'istance' → logprob: -7.383214950561523
    5. 'ef' → logprob: -7.508214950561523
    6. 'ist' → logprob: -9.258214950561523
    7. 'e' → logprob: -10.508214950561523
    8. 'dis' → logprob: -10.508214950561523
    9. '   ' → logprob: -10.633214950561523
    10. 'ep' → logprob: -12.758214950561523

Token 592: ' dis' (ID: 829)
  Prédit: 'dis'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'dis' → logprob: -0.2237888127565384
    2. '{' → logprob: -2.2237887382507324
    3. '[' → logprob: -2.7237887382507324
    4. 'is' → logprob: -4.098788738250732
    5. '{}' → logprob: -4.973788738250732
    6. '[-' → logprob: -6.848788738250732
    7. '{}
' → logprob: -7.598788738250732
    8. 'default' → logprob: -7.973788738250732
    9. 'b' → logprob: -8.22378921508789
    10. '{-' → logprob: -8.34878921508789

Token 593: '[v' (ID: 36561)
  Prédit: ''
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False

Token 594: ' -' (ID: 533)
  Prédit: ' -'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' -' → logprob: -0.313407301902771
    2. '-' → logprob: -1.313407301902771
    3. ']' → logprob: -9.063406944274902
    4. '[' → logprob: -11.063406944274902
    5. '   ' → logprob: -12.313406944274902
    6. ' ' → logprob: -12.938406944274902
    7. '1' → logprob: -13.688406944274902
    8. ']-' → logprob: -13.688406944274902
    9. '  ' → logprob: -14.063406944274902
    10. '])' → logprob: -14.438406944274902

Token 595: ' ' (ID: 220)
  Prédit: '1'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '1' → logprob: -1.1517960956552997e-05
    2. ' ' → logprob: -11.625011444091797
    3. '```' → logprob: -14.125011444091797
    4. '2' → logprob: -14.812511444091797
    5. '-' → logprob: -15.000011444091797
    6. '   ' → logprob: -15.312511444091797
    7. ']' → logprob: -15.312511444091797
    8. '100' → logprob: -16.437511444091797
    9. '11' → logprob: -16.875011444091797
    10. '0' → logprob: -16.937511444091797

Token 596: '1' (ID: 16)
  Prédit: '1'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '1' → logprob: -0.00017123986617662013
    2. ' ' → logprob: -8.750171661376953
    3. '```' → logprob: -12.187671661376953
    4. '-' → logprob: -13.500171661376953
    5. '   ' → logprob: -13.562671661376953
    6. '2' → logprob: -14.000171661376953
    7. ']' → logprob: -14.437671661376953
    8. ')' → logprob: -15.437671661376953
    9. '0' → logprob: -15.562671661376953
    10. '
' → logprob: -15.687671661376953

Token 597: ']' (ID: 60)
  Prédit: ']'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ']' → logprob: -0.006136991549283266
    2. ']
' → logprob: -5.381136894226074
    3. ']+' → logprob: -7.756136894226074
    4. ' ]' → logprob: -7.881136894226074
    5. '])' → logprob: -8.506136894226074
    6. '-' → logprob: -8.631136894226074
    7. ' -' → logprob: -9.006136894226074
    8. ')' → logprob: -10.006136894226074
    9. ']
' → logprob: -10.131136894226074
    10. ']-' → logprob: -10.631136894226074

Token 598: ' -' (ID: 533)
  Prédit: ''
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False

Token 599: ' ' (ID: 220)
  Prédit: '1'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '1' → logprob: -0.0002261854097014293
    2. ' ' → logprob: -8.625226020812988
    3. '0' → logprob: -11.250226020812988
    4. '2' → logprob: -11.375226020812988
    5. 'dis' → logprob: -11.375226020812988
    6. '   ' → logprob: -11.750226020812988
    7. '[' → logprob: -14.375226020812988
    8. '  ' → logprob: -15.375226020812988
    9. '```' → logprob: -15.375226020812988
    10. '10' → logprob: -15.500226020812988

Token 600: '1' (ID: 16)
  Prédit: '1'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '1' → logprob: -2.3199920178740285e-05
    2. ' ' → logprob: -11.000022888183594
    3. '2' → logprob: -13.125022888183594
    4. '0' → logprob: -13.250022888183594
    5. 'dis' → logprob: -13.250022888183594
    6. '   ' → logprob: -15.250022888183594
    7. '[' → logprob: -15.625022888183594
    8. 'b' → logprob: -16.250022888183594
    9. 'que' → logprob: -16.250022888183594
    10. 'd' → logprob: -16.875022888183594

Token 601: '
' (ID: 198)
  Prédit: '
'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '
' → logprob: -0.2806791365146637
    2. '   ' → logprob: -1.9056791067123413
    3. ' while' → logprob: -3.030679225921631
    4. '<|end|>' → logprob: -3.530679225921631
    5. 'while' → logprob: -4.280679225921631
    6. ')' → logprob: -6.530679225921631
    7. '	while' → logprob: -6.530679225921631
    8. '    
' → logprob: -7.905679225921631
    9. ' 
' → logprob: -8.155678749084473
    10. '  
' → logprob: -8.655678749084473

Token 602: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.3015248775482178
    2. ' while' → logprob: -1.6765248775482178
    3. 'while' → logprob: -2.8015248775482178
    4. '	while' → logprob: -4.551525115966797
    5. '<|end|>' → logprob: -6.426525115966797
    6. ')' → logprob: -9.176525115966797
    7. '```' → logprob: -9.426525115966797
    8. ' for' → logprob: -9.551525115966797
    9. 'for' → logprob: -10.301525115966797
    10. '[' → logprob: -11.176525115966797

Token 603: ' #' (ID: 1069)
  Prédit: 'while'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'while' → logprob: -0.08137745410203934
    2. ' while' → logprob: -2.8313775062561035
    3. '   ' → logprob: -3.9563775062561035
    4. '	while' → logprob: -10.456377029418945
    5. '```' → logprob: -10.456377029418945
    6. ')' → logprob: -10.956377029418945
    7. 'for' → logprob: -11.331377029418945
    8. 'While' → logprob: -13.956377029418945
    9. ' for' → logprob: -14.581377029418945
    10. '    
' → logprob: -14.831377029418945

Token 604: ' Path' (ID: 14027)
  Prédit: 'while'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'while' → logprob: -0.0009207503753714263
    2. ' while' → logprob: -7.00092077255249
    3. 'for' → logprob: -12.125920295715332
    4. '```' → logprob: -12.875920295715332
    5. 'prev' → logprob: -14.375920295715332
    6. '   ' → logprob: -15.625920295715332
    7. 'While' → logprob: -15.750920295715332
    8. '
' → logprob: -16.25092124938965
    9. 'path' → logprob: -17.12592124938965
    10. 'def' → logprob: -17.25092124938965

Token 605: ' Construction' (ID: 31452)
  Prédit: ' ='
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' =' → logprob: -0.5103103518486023
    2. '<|end|>' → logprob: -1.760310411453247
    3. 'while' → logprob: -1.885310411453247
    4. ' while' → logprob: -3.760310411453247
    5. '   ' → logprob: -4.010310173034668
    6. '[' → logprob: -4.885310173034668
    7. '=' → logprob: -5.385310173034668
    8. '.append' → logprob: -5.635310173034668
    9. 's' → logprob: -6.010310173034668
    10. ',' → logprob: -6.385310173034668

Token 606: ',' (ID: 11)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.28471171855926514
    2. ' while' → logprob: -1.7847117185592651
    3. 'while' → logprob: -2.9097118377685547
    4. '<|end|>' → logprob: -4.034711837768555
    5. '	while' → logprob: -5.284711837768555
    6. ')' → logprob: -7.284711837768555
    7. ' for' → logprob: -7.284711837768555
    8. '
' → logprob: -7.784711837768555
    9. 'for' → logprob: -9.034711837768555
    10. '[' → logprob: -9.284711837768555

Token 607: ' use' (ID: 1199)
  Prédit: 'while'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'while' → logprob: -0.10024592280387878
    2. ' while' → logprob: -2.350245952606201
    3. '   ' → logprob: -10.725245475769043
    4. 'for' → logprob: -11.725245475769043
    5. '	while' → logprob: -12.975245475769043
    6. '
' → logprob: -13.100245475769043
    7. 'current' → logprob: -13.225245475769043
    8. '```' → logprob: -13.725245475769043
    9. ' for' → logprob: -14.350245475769043
    10. ' current' → logprob: -14.725245475769043

Token 608: ' itertools' (ID: 103178)
  Prédit: ' while'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' while' → logprob: -0.3221852481365204
    2. 'while' → logprob: -1.3221852779388428
    3. ' reverse' → logprob: -6.697185039520264
    4. ' lambda' → logprob: -7.072185039520264
    5. 'hile' → logprob: -7.447185039520264
    6. ' a' → logprob: -7.822185039520264
    7. ' for' → logprob: -7.822185039520264
    8. '   ' → logprob: -7.822185039520264
    9. ' =' → logprob: -7.947185039520264
    10. 'd' → logprob: -7.947185039520264

Token 609: ' to' (ID: 316)
  Prédit: 'while'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'while' → logprob: -0.2010546177625656
    2. '   ' → logprob: -2.451054573059082
    3. 'import' → logprob: -2.701054573059082
    4. 'for' → logprob: -4.076054573059082
    5. '.chain' → logprob: -5.326054573059082
    6. ' while' → logprob: -5.951054573059082
    7. '.take' → logprob: -6.576054573059082
    8. '.drop' → logprob: -7.576054573059082
    9. '
' → logprob: -7.576054573059082
    10. ' for' → logprob: -7.701054573059082

Token 610: ' simulate' (ID: 66687)
  Prédit: 'chain'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'chain' → logprob: -0.10302261263132095
    2. 'while' → logprob: -3.103022575378418
    3. ' chain' → logprob: -3.353022575378418
    4. 'iterate' → logprob: -4.728022575378418
    5. 'iter' → logprob: -6.103022575378418
    6. 'for' → logprob: -6.978022575378418
    7. 'extend' → logprob: -7.228022575378418
    8. 'repeat' → logprob: -7.603022575378418
    9. 'consume' → logprob: -7.728022575378418
    10. 'filter' → logprob: -7.728022575378418

Token 611: ' a' (ID: 261)
  Prédit: 'while'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'while' → logprob: -0.27349549531936646
    2. '   ' → logprob: -2.2734954357147217
    3. 'filter' → logprob: -3.1484954357147217
    4. 'for' → logprob: -3.6484954357147217
    5. 'chain' → logprob: -4.023495674133301
    6. 'it' → logprob: -4.523495674133301
    7. 'is' → logprob: -5.023495674133301
    8. 'take' → logprob: -5.273495674133301
    9. ' itertools' → logprob: -5.648495674133301
    10. '
' → logprob: -5.773495674133301

Token 612: ' loop' (ID: 11453)
  Prédit: 'while'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'while' → logprob: -0.6698600053787231
    2. 'chain' → logprob: -1.2948600053787231
    3. 'filter' → logprob: -2.6698598861694336
    4. 'for' → logprob: -2.9198598861694336
    5. 'take' → logprob: -2.9198598861694336
    6. 'drop' → logprob: -3.9198598861694336
    7. 'next' → logprob: -5.794859886169434
    8. 'cycle' → logprob: -5.794859886169434
    9. 'continue' → logprob: -5.794859886169434
    10. 'com' → logprob: -6.044859886169434

Token 613: '
' (ID: 198)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.05297566577792168
    2. '
' → logprob: -3.177975654602051
    3. ' while' → logprob: -5.927975654602051
    4. '<|end|>' → logprob: -6.177975654602051
    5. 'while' → logprob: -6.427975654602051
    6. ' for' → logprob: -6.552975654602051
    7. ':' → logprob: -7.552975654602051
    8. '    
' → logprob: -8.05297565460205
    9. ',' → logprob: -8.17797565460205
    10. '  
' → logprob: -8.55297565460205

Token 614: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.19433151185512543
    2. '
' → logprob: -2.319331407546997
    3. ' while' → logprob: -3.194331407546997
    4. 'while' → logprob: -3.569331407546997
    5. ' for' → logprob: -5.944331645965576
    6. '    
' → logprob: -6.319331645965576
    7. '	while' → logprob: -6.444331645965576
    8. '```' → logprob: -7.069331645965576
    9. 'for' → logprob: -7.194331645965576
    10. '  
' → logprob: -7.819331645965576

Token 615: ' while' (ID: 2049)
  Prédit: 'while'
  Correct (stricte): False
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'while' (adapté à ' while') → logprob: -0.26372256875038147
    2. ' while' → logprob: -1.888722538948059
    3. '   ' → logprob: -2.7637226581573486
    4. 'for' → logprob: -4.2637224197387695
    5. ' for' → logprob: -5.7637224197387695
    6. 'import' → logprob: -8.88872241973877
    7. '
' → logprob: -9.63872241973877
    8. 'from' → logprob: -9.88872241973877
    9. '	while' → logprob: -12.01372241973877
    10. '```' → logprob: -12.01372241973877

Token 616: ' que' (ID: 661)
  Prédit: 'que'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'que' → logprob: -0.39440736174583435
    2. 'len' → logprob: -1.7694073915481567
    3. 'd' → logprob: -2.894407272338867
    4. 'path' → logprob: -2.894407272338867
    5. ' que' → logprob: -3.894407272338867
    6. ' path' → logprob: -4.769407272338867
    7. ' len' → logprob: -5.019407272338867
    8. 'dis' → logprob: -5.394407272338867
    9. 'not' → logprob: -6.144407272338867
    10. ' d' → logprob: -6.644407272338867

Token 617: ':
' (ID: 734)
  Prédit: ':'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ':' → logprob: -0.034624166786670685
    2. ':
' → logprob: -3.4096240997314453
    3. '):' → logprob: -7.659624099731445
    4. '[' → logprob: -8.534624099731445
    5. '):
' → logprob: -9.409624099731445
    6. ' and' → logprob: -9.409624099731445
    7. '>:' → logprob: -10.159624099731445
    8. '   ' → logprob: -11.034624099731445
    9. '.pop' → logprob: -11.284624099731445
    10. 'and' → logprob: -11.284624099731445

Token 618: '       ' (ID: 309)
  Prédit: '       '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '       ' → logprob: -0.2071809321641922
    2. '   ' → logprob: -1.7071809768676758
    3. ' for' → logprob: -6.957180976867676
    4. '    
' → logprob: -7.207180976867676
    5. '
' → logprob: -7.457180976867676
    6. '    ' → logprob: -7.582180976867676
    7. '```' → logprob: -7.832180976867676
    8. ' go' → logprob: -8.207180976867676
    9. ':' → logprob: -8.332180976867676
    10. ' x' → logprob: -8.332180976867676

Token 619: ' go' (ID: 810)
  Prédit: 'for'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'for' → logprob: -0.5166687369346619
    2. 'cur' → logprob: -1.8916687965393066
    3. ' for' → logprob: -2.2666687965393066
    4. 'go' (adapté à ' go') → logprob: -3.2666687965393066
    5. '           ' → logprob: -3.8916687965393066
    6. 'curr' → logprob: -4.016668796539307
    7. 'node' → logprob: -4.266668796539307
    8. 'current' → logprob: -4.391668796539307
    9. '   ' → logprob: -4.516668796539307
    10. ' go' → logprob: -4.891668796539307

Token 620: ' =' (ID: 314)
  Prédit: '='
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '=' → logprob: -0.14289911091327667
    2. ' =' → logprob: -2.0178990364074707
    3. '.append' → logprob: -8.767899513244629
    4. '   ' → logprob: -10.267899513244629
    5. '.pop' → logprob: -11.142899513244629
    6. '.' → logprob: -12.642899513244629
    7. '.extend' → logprob: -12.642899513244629
    8. '	' → logprob: -13.017899513244629
    9. '       ' → logprob: -13.642899513244629
    10. '=
' → logprob: -13.642899513244629

Token 621: ' que' (ID: 661)
  Prédit: 'que'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'que' → logprob: -0.0029472745954990387
    2. ' que' → logprob: -5.8779473304748535
    3. '   ' → logprob: -9.627946853637695
    4. '[' → logprob: -11.002946853637695
    5. 'queue' → logprob: -11.002946853637695
    6. 'next' → logprob: -11.377946853637695
    7. 'deque' → logprob: -12.002946853637695
    8. 'path' → logprob: -12.502946853637695
    9. 'g' → logprob: -13.002946853637695
    10. '  ' → logprob: -13.127946853637695

Token 622: '.pop' (ID: 15746)
  Prédit: '.p'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '.p' → logprob: -0.5769447684288025
    2. '.pop' → logprob: -0.8269447684288025
    3. '[-' → logprob: -7.326944828033447
    4. 'pop' → logprob: -8.326944351196289
    5. '.' → logprob: -9.951944351196289
    6. '[' → logprob: -10.326944351196289
    7. 'p' → logprob: -11.076944351196289
    8. '   ' → logprob: -12.826944351196289
    9. ' .' → logprob: -12.951944351196289
    10. '.append' → logprob: -13.201944351196289

Token 623: '()
' (ID: 1234)
  Prédit: '()
'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '()
' → logprob: -0.032889630645513535
    2. '()' → logprob: -3.5328896045684814
    3. '       ' → logprob: -5.7828898429870605
    4. '()
' → logprob: -10.532889366149902
    5. '   ' → logprob: -11.657889366149902
    6. ')
' → logprob: -11.907889366149902
    7. 'for' → logprob: -12.782889366149902
    8. '()

' → logprob: -13.657889366149902
    9. ' ()
' → logprob: -13.907889366149902
    10. ')' → logprob: -13.907889366149902

Token 624: '       ' (ID: 309)
  Prédit: '       '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '       ' → logprob: -0.023875167593359947
    2. ' for' → logprob: -4.0238752365112305
    3. '   ' → logprob: -5.2738752365112305
    4. 'for' → logprob: -8.02387523651123
    5. ',' → logprob: -9.02387523651123
    6. '        
' → logprob: -10.14887523651123
    7. '	for' → logprob: -10.89887523651123
    8. ' found' → logprob: -11.27387523651123
    9. '           ' → logprob: -11.77387523651123
    10. '	' → logprob: -12.39887523651123

Token 625: ' indices' (ID: 30378)
  Prédit: 'for'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'for' → logprob: -0.019634395837783813
    2. '       ' → logprob: -4.519634246826172
    3. '   ' → logprob: -5.394634246826172
    4. 'found' → logprob: -5.894634246826172
    5. 'prev' → logprob: -7.269634246826172
    6. 'next' → logprob: -8.394634246826172
    7. 'path' → logprob: -8.769634246826172
    8. ' for' → logprob: -9.394634246826172
    9. 'neighbors' → logprob: -10.769634246826172
    10. 'n' → logprob: -11.519634246826172

Token 626: ' =' (ID: 314)
  Prédit: '='
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '=' → logprob: -0.6327703595161438
    2. ' =' → logprob: -0.7577703595161438
    3. 'for' → logprob: -9.882770538330078
    4. ',' → logprob: -10.632770538330078
    5. ' for' → logprob: -10.882770538330078
    6. '=[' → logprob: -11.257770538330078
    7. ' in' → logprob: -11.382770538330078
    8. '=list' → logprob: -11.632770538330078
    9. '   ' → logprob: -11.882770538330078
    10. '=[]' → logprob: -12.132770538330078

Token 627: ' range' (ID: 3352)
  Prédit: 'list'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'list' → logprob: -0.08495445549488068
    2. 'filter' → logprob: -3.8349545001983643
    3. '[g' → logprob: -3.9599545001983643
    4. '[i' → logprob: -4.334954261779785
    5. '[' → logprob: -4.334954261779785
    6. '[list' → logprob: -5.209954261779785
    7. 'it' → logprob: -6.209954261779785
    8. '(list' → logprob: -6.459954261779785
    9. 'chain' → logprob: -6.834954261779785
    10. '[it' → logprob: -7.084954261779785

Token 628: '(len' (ID: 14990)
  Prédit: '(len'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(len' → logprob: -0.3153807520866394
    2. '(n' → logprob: -1.6903808116912842
    3. '(dis' → logprob: -3.315380811691284
    4. '(go' → logprob: -3.440380811691284
    5. '(d' → logprob: -4.065380573272705
    6. '(' → logprob: -8.440381050109863
    7. '(g' → logprob: -8.815381050109863
    8. 'len' → logprob: -10.315381050109863
    9. '(max' → logprob: -10.690381050109863
    10. '(path' → logprob: -10.940381050109863

Token 629: '(g' (ID: 7791)
  Prédit: '(path'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(path' → logprob: -0.5540807843208313
    2. '(ab' → logprob: -1.1790807247161865
    3. '(g' → logprob: -2.1790807247161865
    4. '(go' → logprob: -5.554080963134766
    5. '(dis' → logprob: -7.929080963134766
    6. '(' → logprob: -8.179080963134766
    7. 'path' → logprob: -10.179080963134766
    8. 'ab' → logprob: -10.679080963134766
    9. '(queue' → logprob: -10.679080963134766
    10. '(d' → logprob: -11.304080963134766

Token 630: '[' (ID: 58)
  Prédit: '['
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '[' → logprob: -6.749814019713085e-06
    2. 'go' → logprob: -13.125006675720215
    3. '[g' → logprob: -13.375006675720215
    4. ' [' → logprob: -14.125006675720215
    5. ')' → logprob: -14.250006675720215
    6. ' go' → logprob: -14.375006675720215
    7. '(go' → logprob: -14.500006675720215
    8. 'g' → logprob: -15.375006675720215
    9. '[
' → logprob: -16.25000762939453
    10. ')[' → logprob: -16.50000762939453

Token 631: 'go' (ID: 2319)
  Prédit: 'go'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'go' → logprob: -0.001967650605365634
    2. '[' → logprob: -6.251967430114746
    3. '(go' → logprob: -10.751967430114746
    4. ' go' → logprob: -11.001967430114746
    5. 'g' → logprob: -14.626967430114746
    6. '   ' → logprob: -15.751967430114746
    7. '"go' → logprob: -15.751967430114746
    8. '	go' → logprob: -16.251968383789062
    9. ')' → logprob: -16.626968383789062
    10. '_go' → logprob: -17.001968383789062

Token 632: ']))
' (ID: 24801)
  Prédit: '))
'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '))
' → logprob: -0.10160987824201584
    2. '))' → logprob: -2.351609945297241
    3. '[' → logprob: -6.726609706878662
    4. '))
' → logprob: -9.72661018371582
    5. ' ))
' → logprob: -10.10161018371582
    6. '))

' → logprob: -10.85161018371582
    7. '()))
' → logprob: -11.10161018371582
    8. '   ' → logprob: -11.47661018371582
    9. ')' → logprob: -11.47661018371582
    10. ']))
' → logprob: -11.85161018371582

Token 633: '       ' (ID: 309)
  Prédit: 'for'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'for' → logprob: -0.8413445949554443
    2. '       ' → logprob: -1.0913445949554443
    3. ' for' → logprob: -1.4663445949554443
    4. '   ' → logprob: -6.716344833374023
    5. '	for' → logprob: -7.341344833374023
    6. '           ' → logprob: -8.841344833374023
    7. '```' → logprob: -9.591344833374023
    8. '        
' → logprob: -10.091344833374023
    9. 'filtered' → logprob: -10.341344833374023
    10. 'if' → logprob: -10.466344833374023

Token 634: ' candidates' (ID: 18116)
  Prédit: 'for'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'for' → logprob: -0.04880877211689949
    2. '       ' → logprob: -3.6738088130950928
    3. 'found' → logprob: -5.173808574676514
    4. 'prev' → logprob: -5.173808574676514
    5. 'next' → logprob: -5.423808574676514
    6. 'neighbors' → logprob: -5.673808574676514
    7. 'c' → logprob: -7.548808574676514
    8. 'n' → logprob: -7.798808574676514
    9. 'path' → logprob: -8.048809051513672
    10. 'possible' → logprob: -8.173809051513672

Token 635: ' =' (ID: 314)
  Prédit: ' ='
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' =' → logprob: -0.20143096148967743
    2. '=' → logprob: -1.7014309167861938
    3. '   ' → logprob: -11.951431274414062
    4. '	' → logprob: -12.826431274414062
    5. '=list' → logprob: -13.326431274414062
    6. '       ' → logprob: -13.826431274414062
    7. ' ' → logprob: -14.076431274414062
    8. '=[' → logprob: -14.201431274414062
    9. 'for' → logprob: -14.701431274414062
    10. ' ' → logprob: -14.701431274414062

Token 636: ' itertools' (ID: 103178)
  Prédit: 'list'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'list' → logprob: -0.18039458990097046
    2. 'filter' → logprob: -2.0553946495056152
    3. '[i' → logprob: -3.6803946495056152
    4. '[list' → logprob: -5.055394649505615
    5. '[' → logprob: -6.555394649505615
    6. '[it' → logprob: -7.055394649505615
    7. '(filter' → logprob: -7.305394649505615
    8. '[x' → logprob: -7.430394649505615
    9. '(list' → logprob: -8.180394172668457
    10. 'it' → logprob: -8.180394172668457

Token 637: '.compress' (ID: 164279)
  Prédit: '.filter'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '.filter' → logprob: -0.04173315688967705
    2. '.compress' → logprob: -3.2917332649230957
    3. '.chain' → logprob: -5.916733264923096
    4. '.drop' → logprob: -7.291733264923096
    5. 'filter' → logprob: -8.916732788085938
    6. '.take' → logprob: -9.541732788085938
    7. '.is' → logprob: -10.416732788085938
    8. 'compress' → logprob: -10.791732788085938
    9. '.if' → logprob: -10.791732788085938
    10. '.com' → logprob: -11.166732788085938

Token 638: '(g' (ID: 7791)
  Prédit: '(g'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(g' → logprob: -0.0015099779702723026
    2. '(indices' → logprob: -6.876510143280029
    3. '(' → logprob: -9.251509666442871
    4. '   ' → logprob: -9.376509666442871
    5. '(
' → logprob: -9.501509666442871
    6. 'indices' → logprob: -9.626509666442871
    7. 'g' → logprob: -9.751509666442871
    8. '(range' → logprob: -9.751509666442871
    9. '(iter' → logprob: -10.751509666442871
    10. '(list' → logprob: -12.001509666442871

Token 639: '[' (ID: 58)
  Prédit: '['
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '[' → logprob: -2.7968066206085496e-05
    2. '   ' → logprob: -11.500027656555176
    3. '(go' → logprob: -12.875027656555176
    4. '       ' → logprob: -13.000027656555176
    5. '```' → logprob: -13.000027656555176
    6. ',' → logprob: -13.125027656555176
    7. 'go' → logprob: -13.500027656555176
    8. 's' → logprob: -14.000027656555176
    9. ' [' → logprob: -14.125027656555176
    10. '[
' → logprob: -14.375027656555176

Token 640: 'go' (ID: 2319)
  Prédit: '['
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '[' → logprob: -0.20211035013198853
    2. 'go' → logprob: -1.7021102905273438
    3. '(go' → logprob: -7.327110290527344
    4. ' go' → logprob: -11.577110290527344
    5. '   ' → logprob: -12.327110290527344
    6. 'g' → logprob: -12.452110290527344
    7. '```' → logprob: -12.577110290527344
    8. '(' → logprob: -12.702110290527344
    9. '_go' → logprob: -12.952110290527344
    10. '.go' → logprob: -13.077110290527344

Token 641: '],' (ID: 2155)
  Prédit: ','
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ',' → logprob: -0.002789899706840515
    2. ' ,' → logprob: -6.6277899742126465
    3. ',[' → logprob: -6.8777899742126465
    4. ',g' → logprob: -9.002789497375488
    5. '   ' → logprob: -9.627789497375488
    6. '       ' → logprob: -10.002789497375488
    7. ',
' → logprob: -10.627789497375488
    8. '(),' → logprob: -10.627789497375488
    9. '[' → logprob: -10.627789497375488
    10. ',(' → logprob: -10.877789497375488

Token 642: ' [' (ID: 723)
  Prédit: '['
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '[' → logprob: -0.6566691398620605
    2. '[(' → logprob: -1.6566691398620605
    3. 'map' → logprob: -2.1566691398620605
    4. '[it' → logprob: -2.2816691398620605
    5. '(map' → logprob: -3.7816691398620605
    6. '(it' → logprob: -4.1566691398620605
    7. '[i' → logprob: -4.4066691398620605
    8. '[w' → logprob: -4.6566691398620605
    9. '[list' → logprob: -5.7816691398620605
    10. '[x' → logprob: -6.9066691398620605

Token 643: 'dis' (ID: 4220)
  Prédit: 'dis'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'dis' → logprob: -0.019912676885724068
    2. '(dis' → logprob: -4.7699127197265625
    3. 'x' → logprob: -5.3949127197265625
    4. 'd' → logprob: -6.5199127197265625
    5. '[' → logprob: -6.6449127197265625
    6. '1' → logprob: -6.6449127197265625
    7. '(' → logprob: -6.7699127197265625
    8. '[x' → logprob: -8.394912719726562
    9. '(x' → logprob: -8.394912719726562
    10. 'map' → logprob: -9.019912719726562

Token 644: '[x' (ID: 17295)
  Prédit: '[x'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '[x' → logprob: -0.3271787464618683
    2. '[' → logprob: -1.702178716659546
    3. '[n' → logprob: -2.577178716659546
    4. '[i' → logprob: -4.327178955078125
    5. '[node' → logprob: -6.077178955078125
    6. '[to' → logprob: -6.077178955078125
    7. '[w' → logprob: -6.827178955078125
    8. 'x' → logprob: -8.202178955078125
    9. '[g' → logprob: -8.202178955078125
    10. '[next' → logprob: -8.327178955078125

Token 645: ']' (ID: 60)
  Prédit: '[x'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '[x' → logprob: -0.1244824156165123
    2. '[i' → logprob: -2.2494823932647705
    3. 'x' → logprob: -5.99948263168335
    4. '[n' → logprob: -6.37448263168335
    5. '[' → logprob: -6.62448263168335
    6. 'i' → logprob: -6.74948263168335
    7. '[y' → logprob: -7.37448263168335
    8. 'go' → logprob: -7.49948263168335
    9. '[v' → logprob: -7.49948263168335
    10. '[a' → logprob: -7.87448263168335

Token 646: ' ==' (ID: 951)
  Prédit: '[x'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '[x' → logprob: -0.10744674503803253
    2. '[i' → logprob: -2.4824466705322266
    3. '[' → logprob: -4.732446670532227
    4. '==' → logprob: -5.982446670532227
    5. 'go' → logprob: -6.107446670532227
    6. 'x' → logprob: -6.107446670532227
    7. '[y' → logprob: -7.107446670532227
    8. '[j' → logprob: -7.232446670532227
    9. '.index' → logprob: -9.357446670532227
    10. '[k' → logprob: -9.357446670532227

Token 647: ' d' (ID: 272)
  Prédit: 'd'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'd' → logprob: -0.06226019188761711
    2. 'dis' → logprob: -2.812260150909424
    3. ' d' → logprob: -8.812260627746582
    4. '   ' → logprob: -10.187260627746582
    5. ' dis' → logprob: -10.312260627746582
    6. '(dis' → logprob: -10.812260627746582
    7. '(d' → logprob: -11.437260627746582
    8. ' ' → logprob: -11.562260627746582
    9. '(' → logprob: -12.187260627746582
    10. '	d' → logprob: -12.437260627746582

Token 648: ' for' (ID: 395)
  Prédit: ' for'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' for' → logprob: -0.06197945028543472
    2. 'for' → logprob: -2.8119795322418213
    3. ' ' → logprob: -11.811979293823242
    4. '   ' → logprob: -13.311979293823242
    5. '-' → logprob: -14.436979293823242
    6. '	for' → logprob: -14.686979293823242
    7. ')' → logprob: -14.811979293823242
    8. 'e' → logprob: -15.311979293823242
    9. '  ' → logprob: -15.561979293823242
    10. ']' → logprob: -15.686979293823242

Token 649: ' x' (ID: 1215)
  Prédit: 'x'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'x' → logprob: -0.0017086135921999812
    2. ' x' → logprob: -6.376708507537842
    3. 'g' → logprob: -12.251708984375
    4. ' ' → logprob: -14.626708984375
    5. '	x' → logprob: -15.376708984375
    6. ' g' → logprob: -15.501708984375
    7. '   ' → logprob: -15.626708984375
    8. ' ' → logprob: -15.751708984375
    9. '_' → logprob: -16.126708984375
    10. '  ' → logprob: -16.501708984375

Token 650: ' in' (ID: 306)
  Prédit: ' in'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' in' → logprob: -0.7213156819343567
    2. 'in' → logprob: -0.8463156819343567
    3. 'x' → logprob: -2.471315622329712
    4. ' x' → logprob: -7.846315860748291
    5. ' ' → logprob: -11.346315383911133
    6. 'for' → logprob: -11.971315383911133
    7. '   ' → logprob: -12.721315383911133
    8. '  ' → logprob: -13.221315383911133
    9. '(x' → logprob: -14.471315383911133
    10. 's' → logprob: -14.471315383911133

Token 651: ' g' (ID: 329)
  Prédit: 'g'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'g' → logprob: -0.1260298490524292
    2. 'indices' → logprob: -2.2510299682617188
    3. 'range' → logprob: -4.376029968261719
    4. ' g' → logprob: -8.376029968261719
    5. 'it' → logprob: -9.626029968261719
    6. ' indices' → logprob: -9.876029968261719
    7. ' range' → logprob: -10.251029968261719
    8. 'indexes' → logprob: -10.626029968261719
    9. '   ' → logprob: -10.751029968261719
    10. 'index' → logprob: -11.126029968261719

Token 652: '[' (ID: 58)
  Prédit: '['
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '[' → logprob: -0.07805923372507095
    2. '])' → logprob: -3.328059196472168
    3. 'go' → logprob: -3.453059196472168
    4. '(go' → logprob: -5.453059196472168
    5. 'indices' → logprob: -6.453059196472168
    6. '])
' → logprob: -7.453059196472168
    7. '(' → logprob: -8.203059196472168
    8. 'x' → logprob: -8.453059196472168
    9. '   ' → logprob: -9.828059196472168
    10. ' go' → logprob: -9.953059196472168

Token 653: 'go' (ID: 2319)
  Prédit: 'go'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'go' → logprob: -0.00011737081513274461
    2. '[' → logprob: -9.250117301940918
    3. '(go' → logprob: -11.375117301940918
    4. ' go' → logprob: -13.000117301940918
    5. 'го' → logprob: -13.125117301940918
    6. ']' → logprob: -13.750117301940918
    7. 'g' → logprob: -13.875117301940918
    8. 'o' → logprob: -14.375117301940918
    9. 'x' → logprob: -14.750117301940918
    10. '(' → logprob: -15.125117301940918

Token 654: ']])
' (ID: 62818)
  Prédit: '])'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '])' → logprob: -0.4747457802295685
    2. '])
' → logprob: -0.9747457504272461
    3. '])
' → logprob: -7.599745750427246
    4. ' ])
' → logprob: -9.599745750427246
    5. '])

' → logprob: -10.099745750427246
    6. ' ])' → logprob: -10.099745750427246
    7. '   ' → logprob: -12.349745750427246
    8. ']' → logprob: -12.724745750427246
    9. '       ' → logprob: -13.224745750427246
    10. ' ' → logprob: -13.474745750427246

Token 655: '       ' (ID: 309)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.379001647233963
    2. ' for' → logprob: -1.7540016174316406
    3. 'for' → logprob: -2.2540016174316406
    4. '       ' → logprob: -4.129001617431641
    5. ' que' → logprob: -4.379001617431641
    6. 'que' → logprob: -5.629001617431641
    7. '
' → logprob: -5.879001617431641
    8. ')' → logprob: -6.879001617431641
    9. '    
' → logprob: -7.629001617431641
    10. ' if' → logprob: -8.50400161743164

Token 656: ' found' (ID: 2491)
  Prédit: 'que'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'que' → logprob: -0.1875157356262207
    2. 'for' → logprob: -1.8125157356262207
    3. 'if' → logprob: -5.937515735626221
    4. '       ' → logprob: -6.062515735626221
    5. 'path' → logprob: -6.812515735626221
    6. '   ' → logprob: -7.312515735626221
    7. 'next' → logprob: -7.937515735626221
    8. ' que' → logprob: -8.312515258789062
    9. 'queue' → logprob: -8.687515258789062
    10. 'go' → logprob: -9.687515258789062

Token 657: ' =' (ID: 314)
  Prédit: ' ='
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' =' → logprob: -0.041933685541152954
    2. '=' → logprob: -3.29193377494812
    3. '_node' → logprob: -6.916933536529541
    4. '_candidate' → logprob: -7.291933536529541
    5. '_token' → logprob: -7.416933536529541
    6. '_' → logprob: -7.541933536529541
    7. ' ' → logprob: -7.916933536529541
    8. '_item' → logprob: -8.0419340133667
    9. '_go' → logprob: -8.9169340133667
    10. '_element' → logprob: -10.2919340133667

Token 658: ' False' (ID: 7983)
  Prédit: 'next'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'next' → logprob: -0.47650694847106934
    2. 'False' → logprob: -0.9765069484710693
    3. ' next' → logprob: -6.726507186889648
    4. ' False' → logprob: -6.851507186889648
    5. 'None' → logprob: -9.226507186889648
    6. 'list' → logprob: -10.101507186889648
    7. '   ' → logprob: -11.601507186889648
    8. 'any' → logprob: -11.976507186889648
    9. 'it' → logprob: -12.226507186889648
    10. '(next' → logprob: -12.851507186889648

Token 659: '
' (ID: 198)
  Prédit: '       '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '       ' → logprob: -0.15385985374450684
    2. '<|end|>' → logprob: -2.278859853744507
    3. '
' → logprob: -3.778859853744507
    4. '   ' → logprob: -5.028860092163086
    5. ' for' → logprob: -6.153860092163086
    6. ')' → logprob: -6.153860092163086
    7. ' if' → logprob: -6.278860092163086
    8. ' ' → logprob: -7.153860092163086
    9. '	' → logprob: -7.278860092163086
    10. ',' → logprob: -7.403860092163086

Token 660: '       ' (ID: 309)
  Prédit: ' for'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' for' → logprob: -0.035352934151887894
    2. '       ' → logprob: -4.16035270690918
    3. 'for' → logprob: -4.41035270690918
    4. '	for' → logprob: -5.66035270690918
    5. '<|end|>' → logprob: -6.41035270690918
    6. '   ' → logprob: -6.66035270690918
    7. ' ' → logprob: -9.03535270690918
    8. ' 
' → logprob: -9.41035270690918
    9. ')' → logprob: -9.53535270690918
    10. '    
' → logprob: -9.78535270690918

Token 661: ' for' (ID: 395)
  Prédit: 'for'
  Correct (stricte): False
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'for' (adapté à ' for') → logprob: -0.005815975368022919
    2. ' for' → logprob: -5.3808159828186035
    3. '       ' → logprob: -6.8808159828186035
    4. 'if' → logprob: -9.005815505981445
    5. '   ' → logprob: -10.130815505981445
    6. 'next' → logprob: -13.505815505981445
    7. '        
' → logprob: -14.505815505981445
    8. ' if' → logprob: -14.630815505981445
    9. '	for' → logprob: -14.755815505981445
    10. 'while' → logprob: -14.755815505981445

Token 662: ' node' (ID: 4596)
  Prédit: 'n'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'n' → logprob: -0.5859171748161316
    2. 'nx' → logprob: -1.5859172344207764
    3. 'x' → logprob: -2.5859172344207764
    4. ' nxt' → logprob: -2.5859172344207764
    5. 'c' → logprob: -3.2109172344207764
    6. 'node' → logprob: -4.460916996002197
    7. 'next' → logprob: -4.585916996002197
    8. 'candidate' → logprob: -5.085916996002197
    9. 'cand' → logprob: -5.335916996002197
    10. 'p' → logprob: -5.585916996002197

Token 663: ' in' (ID: 306)
  Prédit: ' in'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' in' → logprob: -0.004629484377801418
    2. 'in' → logprob: -5.379629611968994
    3. ' ' → logprob: -12.129629135131836
    4. '	in' → logprob: -13.379629135131836
    5. ' ' → logprob: -13.504629135131836
    6. 's' → logprob: -16.004629135131836
    7. '  ' → logprob: -16.254629135131836
    8. 'd' → logprob: -16.379629135131836
    9. '
' → logprob: -16.379629135131836
    10. ' 
' → logprob: -16.504629135131836

Token 664: ' candidates' (ID: 18116)
  Prédit: 'c'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'c' → logprob: -0.0003119863977190107
    2. ' candidates' → logprob: -8.375311851501465
    3. '   ' → logprob: -9.500311851501465
    4. '           ' → logprob: -13.875311851501465
    5. ' ' → logprob: -14.125311851501465
    6. '	c' → logprob: -14.125311851501465
    7. 'cand' → logprob: -14.125311851501465
    8. 'indices' → logprob: -14.250311851501465
    9. '       ' → logprob: -14.750311851501465
    10. '  ' → logprob: -14.750311851501465

Token 665: ':
' (ID: 734)
  Prédit: ':'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ':' → logprob: -0.17993484437465668
    2. ':
' → logprob: -1.8049348592758179
    3. '           ' → logprob: -8.92993450164795
    4. ',' → logprob: -11.05493450164795
    5. ':
' → logprob: -11.30493450164795
    6. '):
' → logprob: -11.55493450164795
    7. '):' → logprob: -12.55493450164795
    8. ':

' → logprob: -12.80493450164795
    9. '       ' → logprob: -12.92993450164795
    10. '():
' → logprob: -13.17993450164795

Token 666: '           ' (ID: 352)
  Prédit: '           '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '           ' → logprob: -0.010168611072003841
    2. ' if' → logprob: -4.635168552398682
    3. 'if' → logprob: -8.51016902923584
    4. '               ' → logprob: -9.63516902923584
    5. '       ' → logprob: -10.26016902923584
    6. '   ' → logprob: -10.38516902923584
    7. ' found' → logprob: -10.76016902923584
    8. ' path' → logprob: -10.76016902923584
    9. 'path' → logprob: -11.88516902923584
    10. ' queue' → logprob: -11.88516902923584

Token 667: ' if' (ID: 538)
  Prédit: 'path'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'path' → logprob: -0.6071615815162659
    2. '           ' → logprob: -1.482161521911621
    3. '   ' → logprob: -1.982161521911621
    4. 'if' (adapté à ' if') → logprob: -3.357161521911621
    5. ' path' → logprob: -3.357161521911621
    6. ' if' → logprob: -4.107161521911621
    7. 'que' → logprob: -6.232161521911621
    8. '               ' → logprob: -6.482161521911621
    9. '       ' → logprob: -8.732161521911621
    10. 'found' → logprob: -9.482161521911621

Token 668: ' dis' (ID: 829)
  Prédit: 'dis'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'dis' → logprob: -0.02099001780152321
    2. 'not' → logprob: -3.8959901332855225
    3. ' dis' → logprob: -9.020990371704102
    4. 'found' → logprob: -9.145990371704102
    5. ' not' → logprob: -9.895990371704102
    6. 'd' → logprob: -10.270990371704102
    7. '   ' → logprob: -10.395990371704102
    8. 'True' → logprob: -10.520990371704102
    9. '(dis' → logprob: -10.520990371704102
    10. '           ' → logprob: -11.770990371704102

Token 669: '[node' (ID: 67268)
  Prédit: '[node'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '[node' → logprob: -2.0339031834737398e-05
    2. 'node' → logprob: -11.250020027160645
    3. '[' → logprob: -12.250020027160645
    4. ' [' → logprob: -13.875020027160645
    5. ' node' → logprob: -14.375020027160645
    6. '(node' → logprob: -14.875020027160645
    7. '=node' → logprob: -16.12502098083496
    8. '[
' → logprob: -16.37502098083496
    9. '```' → logprob: -16.37502098083496
    10. ',node' → logprob: -17.12502098083496

Token 670: ']' (ID: 60)
  Prédit: '=='
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '==' → logprob: -0.24042800068855286
    2. ' ==' → logprob: -1.6154279708862305
    3. ']==' → logprob: -4.4904279708862305
    4. ']' → logprob: -5.6154279708862305
    5. '[' → logprob: -11.11542797088623
    6. '=' → logprob: -11.74042797088623
    7. ')==' → logprob: -12.36542797088623
    8. ')' → logprob: -12.74042797088623
    9. '```' → logprob: -12.74042797088623
    10. '==
' → logprob: -13.36542797088623

Token 671: ' ==' (ID: 951)
  Prédit: '=='
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '==' → logprob: -0.0699506625533104
    2. ' ==' → logprob: -2.694950580596924
    3. ']==' → logprob: -12.194951057434082
    4. '==
' → logprob: -13.194951057434082
    5. ')==' → logprob: -13.194951057434082
    6. '<' → logprob: -13.444951057434082
    7. '===' → logprob: -13.694951057434082
    8. '=' → logprob: -13.819951057434082
    9. '==(' → logprob: -14.444951057434082
    10. '==-' → logprob: -14.569951057434082

Token 672: ' d' (ID: 272)
  Prédit: 'd'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'd' → logprob: -7.696077227592468e-05
    2. ' d' → logprob: -9.500077247619629
    3. '   ' → logprob: -14.125077247619629
    4. '           ' → logprob: -14.750077247619629
    5. '       ' → logprob: -15.750077247619629
    6. 'dis' → logprob: -16.125076293945312
    7. '
' → logprob: -16.125076293945312
    8. '                   ' → logprob: -16.250076293945312
    9. '               ' → logprob: -16.375076293945312
    10. '	d' → logprob: -16.500076293945312

Token 673: ':
' (ID: 734)
  Prédit: ' and'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' and' → logprob: -0.6750764846801758
    2. ':
' → logprob: -0.8000764846801758
    3. ':' → logprob: -3.550076484680176
    4. '               ' → logprob: -4.800076484680176
    5. 'and' → logprob: -5.550076484680176
    6. '           ' → logprob: -7.550076484680176
    7. '):
' → logprob: -9.550076484680176
    8. ' :
' → logprob: -10.175076484680176
    9. '              ' → logprob: -10.550076484680176
    10. '            ' → logprob: -10.925076484680176

Token 674: '               ' (ID: 506)
  Prédit: '               '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '               ' → logprob: -0.002008814597502351
    2. ':
' → logprob: -7.12700891494751
    3. ' and' → logprob: -7.50200891494751
    4. '                
' → logprob: -8.627008438110352
    5. ':' → logprob: -8.752008438110352
    6. ',' → logprob: -9.752008438110352
    7. ' :
' → logprob: -9.877008438110352
    8. '           ' → logprob: -10.002008438110352
    9. ' :' → logprob: -10.127008438110352
    10. '                ' → logprob: -10.877008438110352

Token 675: ' d' (ID: 272)
  Prédit: ' path'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' path' → logprob: -0.6609734892845154
    2. '           ' → logprob: -0.9109734892845154
    3. 'path' → logprob: -2.91097354888916
    4. '               ' → logprob: -4.28597354888916
    5. '   ' → logprob: -4.53597354888916
    6. 'que' → logprob: -7.28597354888916
    7. ' que' → logprob: -7.41097354888916
    8. ' found' → logprob: -8.03597354888916
    9. ' queue' → logprob: -8.41097354888916
    10. ' d' → logprob: -8.53597354888916

Token 676: ' -=' (ID: 12583)
  Prédit: '-='
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '-=' → logprob: -0.2557847201824188
    2. ' -=' → logprob: -1.5057847499847412
    3. '=' → logprob: -5.880784511566162
    4. '-' → logprob: -7.380784511566162
    5. ' =' → logprob: -8.00578498840332
    6. '               ' → logprob: -10.00578498840332
    7. '   ' → logprob: -11.25578498840332
    8. '+=' → logprob: -11.38078498840332
    9. '                   ' → logprob: -11.50578498840332
    10. '           ' → logprob: -11.75578498840332

Token 677: ' ' (ID: 220)
  Prédit: '1'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '1' → logprob: -3.128163257315464e-07
    2. ' ' → logprob: -15.125
    3. '   ' → logprob: -20.5
    4. '```' → logprob: -21.875
    5. '<|end|>' → logprob: -21.875
    6. '           ' → logprob: -22.25
    7. '
' → logprob: -22.5
    8. '۱' → logprob: -22.625
    9. '  ' → logprob: -22.875
    10. '[' → logprob: -23.5625

Token 678: '1' (ID: 16)
  Prédit: '1'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '1' → logprob: -3.128163257315464e-07
    2. ' ' → logprob: -15.5
    3. '<|end|>' → logprob: -19.125
    4. '   ' → logprob: -21.375
    5. '```' → logprob: -21.875
    6. '
' → logprob: -22.0
    7. '۱' → logprob: -23.375
    8. '0' → logprob: -23.625
    9. '[' → logprob: -23.75
    10. '  ' → logprob: -23.875

Token 679: '
' (ID: 198)
  Prédit: '               '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '               ' → logprob: -0.004619883839040995
    2. '           ' → logprob: -5.50462007522583
    3. '
' → logprob: -9.004619598388672
    4. '                   ' → logprob: -9.004619598388672
    5. ',' → logprob: -10.004619598388672
    6. '       ' → logprob: -10.129619598388672
    7. '<|end|>' → logprob: -10.129619598388672
    8. '              ' → logprob: -10.379619598388672
    9. ')' → logprob: -10.504619598388672
    10. '                
' → logprob: -10.629619598388672

Token 680: '               ' (ID: 506)
  Prédit: '               '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '               ' → logprob: -0.004244485404342413
    2. '           ' → logprob: -5.629244327545166
    3. 'path' → logprob: -8.004244804382324
    4. 'que' → logprob: -9.504244804382324
    5. ' path' → logprob: -9.629244804382324
    6. '   ' → logprob: -10.254244804382324
    7. 'queue' → logprob: -10.504244804382324
    8. '       ' → logprob: -10.879244804382324
    9. ' que' → logprob: -11.004244804382324
    10. '                   ' → logprob: -11.129244804382324

Token 681: ' path' (ID: 3104)
  Prédit: 'path'
  Correct (stricte): False
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'path' (adapté à ' path') → logprob: -0.0822642371058464
    2. 'que' → logprob: -3.2072641849517822
    3. ' path' → logprob: -3.4572641849517822
    4. '           ' → logprob: -5.582264423370361
    5. ' que' → logprob: -6.457264423370361
    6. '               ' → logprob: -6.707264423370361
    7. 'queue' → logprob: -8.707263946533203
    8. '       ' → logprob: -9.082263946533203
    9. '   ' → logprob: -9.207263946533203
    10. '                   ' → logprob: -11.832263946533203

Token 682: '.append' (ID: 3709)
  Prédit: '.append'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '.append' → logprob: -2.8802491215174086e-05
    2. '.' → logprob: -10.500028610229492
    3. '.app' → logprob: -14.500028610229492
    4. '.insert' → logprob: -14.500028610229492
    5. '.extend' → logprob: -15.875028610229492
    6. 'append' → logprob: -16.625028610229492
    7. '.ap' → logprob: -18.125028610229492
    8. ' .' → logprob: -18.375028610229492
    9. '.pop' → logprob: -18.375028610229492
    10. '.push' → logprob: -18.625028610229492

Token 683: '(node' (ID: 13356)
  Prédit: '(node'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(node' → logprob: -3.128163257315464e-07
    2. 'node' → logprob: -15.5
    3. '(' → logprob: -18.625
    4. '(
' → logprob: -20.75
    5. '[node' → logprob: -20.875
    6. '((' → logprob: -21.75
    7. ' (' → logprob: -22.0
    8. ',node' → logprob: -22.5
    9. '=node' → logprob: -22.75
    10. '(n' → logprob: -22.875

Token 684: ')
' (ID: 446)
  Prédit: '               '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '               ' → logprob: -0.35326138138771057
    2. ')
' → logprob: -1.6032613515853882
    3. ')' → logprob: -2.3532614707946777
    4. '           ' → logprob: -7.478261470794678
    5. '<|end|>' → logprob: -7.603261470794678
    6. '
' → logprob: -9.35326099395752
    7. '       ' → logprob: -10.22826099395752
    8. '<|end|>' → logprob: -10.72826099395752
    9. '                   ' → logprob: -10.85326099395752
    10. ')
' → logprob: -11.10326099395752

Token 685: '               ' (ID: 506)
  Prédit: '               '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '               ' → logprob: -0.0042968266643583775
    2. 'que' → logprob: -5.504296779632568
    3. '           ' → logprob: -9.379297256469727
    4. '       ' → logprob: -9.379297256469727
    5. ' que' → logprob: -10.129297256469727
    6. '              ' → logprob: -12.129297256469727
    7. '   ' → logprob: -13.004297256469727
    8. '                   ' → logprob: -14.504297256469727
    9. 'queue' → logprob: -14.504297256469727
    10. 'ques' → logprob: -16.004297256469727

Token 686: ' que' (ID: 661)
  Prédit: 'que'
  Correct (stricte): False
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'que' (adapté à ' que') → logprob: -0.00029041420202702284
    2. '       ' → logprob: -9.000290870666504
    3. '               ' → logprob: -9.125290870666504
    4. '           ' → logprob: -10.375290870666504
    5. ' que' → logprob: -10.750290870666504
    6. '   ' → logprob: -12.750290870666504
    7. '              ' → logprob: -13.375290870666504
    8. 'queue' → logprob: -15.375290870666504
    9. 'break' → logprob: -15.750290870666504
    10. '      ' → logprob: -16.125289916992188

Token 687: '.append' (ID: 3709)
  Prédit: '.append'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '.append' → logprob: -8.149051427608356e-05
    2. 'append' → logprob: -9.625081062316895
    3. '.' → logprob: -11.125081062316895
    4. '.extend' → logprob: -15.875081062316895
    5. '.push' → logprob: -15.875081062316895
    6. ' .' → logprob: -16.00008201599121
    7. 'app' → logprob: -17.00008201599121
    8. '.app' → logprob: -17.25008201599121
    9. '.clear' → logprob: -17.50008201599121
    10. ' append' → logprob: -17.62508201599121

Token 688: '(node' (ID: 13356)
  Prédit: '(node'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(node' → logprob: -1.981667537620524e-06
    2. 'node' → logprob: -13.875001907348633
    3. '(' → logprob: -14.375001907348633
    4. '(path' → logprob: -15.750001907348633
    5. 'left' → logprob: -16.250001907348633
    6. '(
' → logprob: -16.625001907348633
    7. ' node' → logprob: -18.125001907348633
    8. '(nodes' → logprob: -19.000001907348633
    9. '(n' → logprob: -19.125001907348633
    10. '(token' → logprob: -19.375001907348633

Token 689: ')
' (ID: 446)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')' → logprob: -0.07001401484012604
    2. ')
' → logprob: -2.695013999938965
    3. '               ' → logprob: -9.945013999938965
    4. ')return' → logprob: -10.820013999938965
    5. '<|end|>' → logprob: -13.070013999938965
    6. ')
' → logprob: -13.195013999938965
    7. ' )' → logprob: -13.445013999938965
    8. ')

' → logprob: -13.695013999938965
    9. '           ' → logprob: -14.195013999938965
    10. ' )
' → logprob: -14.820013999938965

Token 690: '               ' (ID: 506)
  Prédit: '               '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '               ' → logprob: -0.3339551091194153
    2. '<|end|>' → logprob: -1.3339550495147705
    3. '           ' → logprob: -4.70895528793335
    4. '       ' → logprob: -5.33395528793335
    5. '   ' → logprob: -5.83395528793335
    6. ')' → logprob: -6.58395528793335
    7. '                   ' → logprob: -7.70895528793335
    8. '<|end|>' → logprob: -8.208954811096191
    9. '                ' → logprob: -8.583954811096191
    10. '                           ' → logprob: -8.708954811096191

Token 691: ' found' (ID: 2491)
  Prédit: '               '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '               ' → logprob: -0.013917726464569569
    2. 'break' → logprob: -5.138917922973633
    3. ' break' → logprob: -5.763917922973633
    4. '<|end|>' → logprob: -6.013917922973633
    5. '           ' → logprob: -7.263917922973633
    6. '                ' → logprob: -7.638917922973633
    7. '	break' → logprob: -8.138917922973633
    8. '                   ' → logprob: -8.388917922973633
    9. '       ' → logprob: -8.513917922973633
    10. '              ' → logprob: -8.888917922973633

Token 692: ' =' (ID: 314)
  Prédit: '='
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '=' → logprob: -0.6933181285858154
    2. ' =' → logprob: -0.6933181285858154
    3. '=True' → logprob: -8.693318367004395
    4. '=
' → logprob: -13.568318367004395
    5. ' =
' → logprob: -14.443318367004395
    6. '=False' → logprob: -14.693318367004395
    7. '
' → logprob: -14.818318367004395
    8. '<|end|>' → logprob: -15.193318367004395
    9. ' ' → logprob: -16.068317413330078
    10. ')' → logprob: -17.193317413330078

Token 693: ' True' (ID: 6432)
  Prédit: 'True'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'True' → logprob: -9.615255839889869e-05
    2. ' True' → logprob: -9.250096321105957
    3. '(True' → logprob: -19.37509536743164
    4. 'False' → logprob: -21.00009536743164
    5. 'true' → logprob: -22.87509536743164
    6. '=True' → logprob: -23.12509536743164
    7. 'not' → logprob: -24.37509536743164
    8. '   ' → logprob: -24.37509536743164
    9. 'Tr' → logprob: -24.62509536743164
    10. '.True' → logprob: -25.25009536743164

Token 694: '
' (ID: 198)
  Prédit: '               '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '               ' → logprob: -0.01889103837311268
    2. '<|end|>' → logprob: -4.518890857696533
    3. '           ' → logprob: -5.143890857696533
    4. '       ' → logprob: -7.143890857696533
    5. ' if' → logprob: -8.268891334533691
    6. '                   ' → logprob: -8.518891334533691
    7. '                ' → logprob: -8.768891334533691
    8. 'if' → logprob: -9.268891334533691
    9. '                       ' → logprob: -9.518891334533691
    10. '              ' → logprob: -9.643891334533691

Token 695: '               ' (ID: 506)
  Prédit: '               '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '               ' → logprob: -0.012402629479765892
    2. '           ' → logprob: -5.137402534484863
    3. '<|end|>' → logprob: -5.637402534484863
    4. '       ' → logprob: -6.512402534484863
    5. ' if' → logprob: -7.887402534484863
    6. '                   ' → logprob: -8.262402534484863
    7. '                       ' → logprob: -8.512402534484863
    8. '              ' → logprob: -9.137402534484863
    9. 'if' → logprob: -9.262402534484863
    10. '                ' → logprob: -9.262402534484863

Token 696: ' break' (ID: 2338)
  Prédit: '               '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '               ' → logprob: -0.00048072010395117104
    2. '			' → logprob: -8.875480651855469
    3. 'break' (adapté à ' break') → logprob: -9.000480651855469
    4. '	break' → logprob: -9.875480651855469
    5. '		       ' → logprob: -10.250480651855469
    6. '	           ' → logprob: -10.500480651855469
    7. '                   ' → logprob: -10.875480651855469
    8. '           ' → logprob: -11.250480651855469
    9. '       ' → logprob: -11.500480651855469
    10. '	       ' → logprob: -11.625480651855469

Token 697: '
' (ID: 198)
  Prédit: ''
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False

Token 698: '       ' (ID: 309)
  Prédit: ''
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False

Token 699: ' if' (ID: 538)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.31904903054237366
    2. '<|end|>' → logprob: -1.3190490007400513
    3. 'return' → logprob: -6.819048881530762
    4. '       ' → logprob: -7.069048881530762
    5. '
' → logprob: -7.319048881530762
    6. '    ' → logprob: -7.444048881530762
    7. ')' → logprob: -8.069048881530762
    8. ' return' → logprob: -8.069048881530762
    9. '<|end|>' → logprob: -8.069048881530762
    10. '```' → logprob: -8.444048881530762

Token 700: ' not' (ID: 625)
  Prédit: ' not'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' not' → logprob: -0.31328821182250977
    2. 'not' → logprob: -1.3132882118225098
    3. ' found' → logprob: -11.188287734985352
    4. 'found' → logprob: -11.438287734985352
    5. '	not' → logprob: -14.188287734985352
    6. '   ' → logprob: -14.313287734985352
    7. '(not' → logprob: -15.563287734985352
    8. ' ' → logprob: -16.43828773498535
    9. ' ' → logprob: -16.56328773498535
    10. 'd' → logprob: -16.81328773498535

Token 701: ' found' (ID: 2491)
  Prédit: 'found'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'found' → logprob: -0.1602262556552887
    2. ' found' → logprob: -1.9102262258529663
    3. '(found' → logprob: -13.910225868225098
    4. ' ' → logprob: -14.535225868225098
    5. '	found' → logprob: -14.785225868225098
    6. 'path' → logprob: -16.035226821899414
    7. 'Found' → logprob: -16.285226821899414
    8. ' path' → logprob: -16.285226821899414
    9. '_found' → logprob: -17.285226821899414
    10. ' ' → logprob: -17.660226821899414

Token 702: ':
' (ID: 734)
  Prédit: ':'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ':' → logprob: -0.2526780664920807
    2. '           ' → logprob: -1.7526780366897583
    3. ':
' → logprob: -3.002678155899048
    4. ' :' → logprob: -9.752677917480469
    5. '       ' → logprob: -9.877677917480469
    6. ':return' → logprob: -9.877677917480469
    7. '               ' → logprob: -10.002677917480469
    8. '   ' → logprob: -10.377677917480469
    9. ' :
' → logprob: -10.627677917480469
    10. '          ' → logprob: -10.627677917480469

Token 703: '           ' (ID: 352)
  Prédit: '           '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '           ' → logprob: -0.00326410005800426
    2. '       ' → logprob: -5.7532639503479
    3. 'break' → logprob: -10.003264427185059
    4. ' break' → logprob: -11.253264427185059
    5. '   ' → logprob: -11.378264427185059
    6. '               ' → logprob: -11.878264427185059
    7. '	       ' → logprob: -12.503264427185059
    8. '	break' → logprob: -12.628264427185059
    9. '```' → logprob: -14.253264427185059
    10. '		' → logprob: -14.378264427185059

Token 704: ' break' (ID: 2338)
  Prédit: 'break'
  Correct (stricte): False
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'break' (adapté à ' break') → logprob: -0.390683650970459
    2. ' break' → logprob: -1.140683650970459
    3. '           ' → logprob: -5.640683650970459
    4. '       ' → logprob: -8.890684127807617
    5. '   ' → logprob: -9.890684127807617
    6. '	break' → logprob: -9.890684127807617
    7. 'return' → logprob: -11.640684127807617
    8. '               ' → logprob: -12.265684127807617
    9. '```' → logprob: -14.140684127807617
    10. ' return' → logprob: -14.515684127807617

Token 705: '
' (ID: 198)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.340615838766098
    2. '<|end|>' → logprob: -1.3406158685684204
    3. '
' → logprob: -4.465615749359131
    4. ')' → logprob: -5.340615749359131
    5. 'return' → logprob: -5.465615749359131
    6. '    
' → logprob: -6.840615749359131
    7. ' return' → logprob: -6.840615749359131
    8. '[' → logprob: -6.965615749359131
    9. '<|end|>' → logprob: -7.340615749359131
    10. ']' → logprob: -7.715615749359131

Token 706: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.032984789460897446
    2. '<|end|>' → logprob: -3.657984733581543
    3. '
' → logprob: -6.157984733581543
    4. 'return' → logprob: -6.532984733581543
    5. ')' → logprob: -6.782984733581543
    6. '    
' → logprob: -7.532984733581543
    7. 'if' → logprob: -7.657984733581543
    8. ' return' → logprob: -8.407984733581543
    9. '}' → logprob: -9.407984733581543
    10. '#' → logprob: -9.532984733581543

Token 707: ' ans' (ID: 3345)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.02590090222656727
    2. ')' → logprob: -4.650900840759277
    3. 'print' → logprob: -4.900900840759277
    4. '.' → logprob: -6.650900840759277
    5. '    
' → logprob: -6.900900840759277
    6. 'return' → logprob: -7.025900840759277
    7. 'max' → logprob: -7.025900840759277
    8. '#' → logprob: -7.150900840759277
    9. '    ' → logprob: -7.275900840759277
    10. 'u' → logprob: -7.400900840759277

Token 708: ' =' (ID: 314)
  Prédit: ' ='
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' =' → logprob: -0.020590588450431824
    2. '=' → logprob: -3.8955905437469482
    3. ' ' → logprob: -11.395590782165527
    4. '_' → logprob: -11.645590782165527
    5. ',' → logprob: -12.270590782165527
    6. 'max' → logprob: -12.270590782165527
    7. '1' → logprob: -12.270590782165527
    8. '[' → logprob: -12.520590782165527
    9. '_max' → logprob: -13.020590782165527
    10. 's' → logprob: -13.770590782165527

Token 709: ' next' (ID: 2613)
  Prédit: 'dis'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'dis' → logprob: -0.29396069049835205
    2. 'max' → logprob: -1.418960690498352
    3. ' dis' → logprob: -5.5439605712890625
    4. ' max' → logprob: -5.5439605712890625
    5. 'sum' → logprob: -6.1689605712890625
    6. 'str' → logprob: -7.4189605712890625
    7. '(dis' → logprob: -7.5439605712890625
    8. '(max' → logprob: -7.7939605712890625
    9. '0' → logprob: -8.168960571289062
    10. 'mod' → logprob: -8.543960571289062

Token 710: '(iter' (ID: 61014)
  Prédit: '(iter'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(iter' → logprob: -0.5995047688484192
    2. '(x' → logprob: -1.3495047092437744
    3. '(it' → logprob: -2.5995047092437744
    4. '((' → logprob: -2.8495047092437744
    5. '(i' → logprob: -3.4745047092437744
    6. '(filter' → logprob: -4.4745049476623535
    7. '(len' → logprob: -5.4745049476623535
    8. '(max' → logprob: -6.2245049476623535
    9. '(' → logprob: -6.3495049476623535
    10. '(chain' → logprob: -6.4745049476623535

Token 711: '(it' (ID: 29445)
  Prédit: '(path'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '(path' → logprob: -0.029480144381523132
    2. '(ab' → logprob: -4.27947998046875
    3. '(dis' → logprob: -4.90447998046875
    4. '(g' → logprob: -5.52947998046875
    5. '(range' → logprob: -6.77947998046875
    6. '(set' → logprob: -7.27947998046875
    7. '((' → logprob: -7.40447998046875
    8. 'path' → logprob: -7.77947998046875
    9. '([' → logprob: -8.40447998046875
    10. '(' → logprob: -8.77947998046875

Token 712: 'ertools' (ID: 88385)
  Prédit: '(path'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '(path' → logprob: -0.04877698794007301
    2. '(ab' → logprob: -3.6737771034240723
    3. 'path' → logprob: -4.923777103424072
    4. '(s' → logprob: -5.548777103424072
    5. '(set' → logprob: -5.923777103424072
    6. 's' → logprob: -6.548777103424072
    7. '(range' → logprob: -6.673777103424072
    8. '(ans' → logprob: -6.923777103424072
    9. '(abs' → logprob: -7.048777103424072
    10. '(filter' → logprob: -7.548777103424072

Token 713: '.is' (ID: 3109)
  Prédit: '(chain'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '(chain' → logprob: -0.15011285245418549
    2. '(acc' → logprob: -3.4001128673553467
    3. '(per' → logprob: -3.6501128673553467
    4. '(filter' → logprob: -3.9001128673553467
    5. '(com' → logprob: -4.400112628936768
    6. '(' → logprob: -4.525112628936768
    7. '.chain' → logprob: -5.025112628936768
    8. '(range' → logprob: -5.275112628936768
    9. '(g' → logprob: -5.775112628936768
    10. '(drop' → logprob: -6.025112628936768

Token 714: 'lice' (ID: 7321)
  Prédit: 'ertools'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'ertools' → logprob: -0.07048750668764114
    2. 'm' → logprob: -3.0704874992370605
    3. 'lice' → logprob: -5.1954874992370605
    4. 'chain' → logprob: -5.9454874992370605
    5. 'er' → logprob: -6.1954874992370605
    6. 'ch' → logprob: -6.1954874992370605
    7. 'cal' → logprob: -6.6954874992370605
    8. 'count' → logprob: -6.8204874992370605
    9. 'tools' → logprob: -7.3204874992370605
    10. '.chain' → logprob: -7.5704874992370605

Token 715: '(iter' (ID: 61014)
  Prédit: '(path'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '(path' → logprob: -0.014659128151834011
    2. '(ab' → logprob: -4.8896589279174805
    3. '(dis' → logprob: -5.5146589279174805
    4. '(copy' → logprob: -7.6396589279174805
    5. '(chain' → logprob: -7.6396589279174805
    6. '(re' → logprob: -7.8896589279174805
    7. '(sorted' → logprob: -8.26465892791748
    8. '(range' → logprob: -8.26465892791748
    9. '(it' → logprob: -8.38965892791748
    10. '((' → logprob: -8.88965892791748

Token 716: '(lambda' (ID: 43341)
  Prédit: '(path'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '(path' → logprob: -0.002010241150856018
    2. '(ab' → logprob: -6.377010345458984
    3. '(dis' → logprob: -9.502010345458984
    4. '(re' → logprob: -10.127010345458984
    5. '(set' → logprob: -10.627010345458984
    6. 'path' → logprob: -10.877010345458984
    7. '(abs' → logprob: -11.002010345458984
    8. '(g' → logprob: -11.127010345458984
    9. '(copy' → logprob: -11.127010345458984
    10. '([' → logprob: -11.127010345458984

Token 717: ':' (ID: 25)
  Prédit: 'path'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'path' → logprob: -0.8195384740829468
    2. ' path' → logprob: -1.0695384740829468
    3. '(path' → logprob: -2.5695385932922363
    4. ' reversed' → logprob: -3.9445385932922363
    5. 'ab' → logprob: -4.069538593292236
    6. ' ab' → logprob: -4.569538593292236
    7. ' dis' → logprob: -4.569538593292236
    8. 'lambda' → logprob: -4.944538593292236
    9. 'copy' → logprob: -4.944538593292236
    10. ' copy' → logprob: -5.194538593292236

Token 718: ' len' (ID: 4631)
  Prédit: 'max'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'max' → logprob: -0.1766582876443863
    2. '0' → logprob: -3.5516583919525146
    3. 'path' → logprob: -3.8016583919525146
    4. '(max' → logprob: -4.0516581535339355
    5. 'dis' → logprob: -4.1766581535339355
    6. 'abs' → logprob: -4.3016581535339355
    7. ' max' → logprob: -4.4266581535339355
    8. '(' → logprob: -4.9266581535339355
    9. 'len' → logprob: -5.4266581535339355
    10. 'min' → logprob: -5.5516581535339355

Token 719: '(path' (ID: 10993)
  Prédit: '(path'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(path' → logprob: -0.0011437878711149096
    2. '(ab' → logprob: -7.126143932342529
    3. 'path' → logprob: -8.876143455505371
    4. '(set' → logprob: -9.626143455505371
    5. '(ans' → logprob: -9.876143455505371
    6. '(' → logprob: -10.376143455505371
    7. '(g' → logprob: -10.501143455505371
    8. '([' → logprob: -12.626143455505371
    9. '(dis' → logprob: -12.626143455505371
    10. ' path' → logprob: -13.126143455505371

Token 720: ')//' (ID: 60375)
  Prédit: '),'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '),' → logprob: -0.47478318214416504
    2. ',' → logprob: -1.724783182144165
    3. ' -' → logprob: -2.224783182144165
    4. '-' → logprob: -2.599783182144165
    5. ')' → logprob: -5.099782943725586
    6. ' ,' → logprob: -5.349782943725586
    7. ')-' → logprob: -5.599782943725586
    8. ' ),' → logprob: -7.349782943725586
    9. '[::-' → logprob: -7.349782943725586
    10. '   ' → logprob: -7.724782943725586

Token 721: '2' (ID: 17)
  Prédit: '2'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '2' → logprob: -0.011899872682988644
    2. ' ' → logprob: -4.511899948120117
    3. '1' → logprob: -7.511899948120117
    4. '3' → logprob: -8.386899948120117
    5. '
' → logprob: -11.449399948120117
    6. '   ' → logprob: -11.449399948120117
    7. '  ' → logprob: -11.949399948120117
    8. '10' → logprob: -11.949399948120117
    9. '4' → logprob: -12.699399948120117
    10. '(' → logprob: -12.886899948120117

Token 722: ' -' (ID: 533)
  Prédit: '),'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '),' → logprob: -0.3388780951499939
    2. ',' → logprob: -1.4638781547546387
    3. ' +' → logprob: -4.088878154754639
    4. ' ),' → logprob: -4.338878154754639
    5. ' ,' → logprob: -4.463878154754639
    6. '+' → logprob: -4.838878154754639
    7. '(),' → logprob: -6.213878154754639
    8. '()),' → logprob: -6.713878154754639
    9. ')' → logprob: -7.213878154754639
    10. ')),' → logprob: -7.338878154754639

Token 723: ' ' (ID: 220)
  Prédit: '1'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '1' → logprob: -0.023976195603609085
    2. ' ' → logprob: -3.7739760875701904
    3. '2' → logprob: -7.3989763259887695
    4. '(' → logprob: -10.52397632598877
    5. '0' → logprob: -10.77397632598877
    6. ' (' → logprob: -11.14897632598877
    7. '3' → logprob: -11.64897632598877
    8. 'len' → logprob: -11.77397632598877
    9. 'd' → logprob: -12.33647632598877
    10. '  ' → logprob: -12.46147632598877

Token 724: '1' (ID: 16)
  Prédit: '1'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '1' → logprob: -0.0006596576422452927
    2. '0' → logprob: -8.250659942626953
    3. '(' → logprob: -8.750659942626953
    4. ' ' → logprob: -8.875659942626953
    5. '2' → logprob: -9.875659942626953
    6. 'len' → logprob: -11.500659942626953
    7. '-' → logprob: -12.250659942626953
    8. 'abs' → logprob: -12.250659942626953
    9. 'max' → logprob: -12.375659942626953
    10. '3' → logprob: -12.750659942626953

Token 725: ',' (ID: 11)
  Prédit: ','
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ',' → logprob: -0.1282084733247757
    2. '),' → logprob: -2.1282083988189697
    3. ' ,' → logprob: -7.503208637237549
    4. ',),' → logprob: -7.878208637237549
    5. '(),' → logprob: -8.87820816040039
    6. ')' → logprob: -9.75320816040039
    7. ' ),' → logprob: -10.12820816040039
    8. ')),' → logprob: -10.37820816040039
    9. '   ' → logprob: -10.50320816040039
    10. ')))' → logprob: -11.37820816040039

Token 726: ' None' (ID: 4662)
  Prédit: '1'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '1' → logprob: -0.011028959415853024
    2. ' ' → logprob: -4.76102876663208
    3. '2' → logprob: -6.63602876663208
    4. 'None' → logprob: -7.13602876663208
    5. ' None' → logprob: -8.761029243469238
    6. '10' → logprob: -10.011029243469238
    7. '0' → logprob: -10.261029243469238
    8. '   ' → logprob: -10.636029243469238
    9. '3' → logprob: -11.261029243469238
    10. '  ' → logprob: -11.886029243469238

Token 727: '),' (ID: 936)
  Prédit: '),'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '),' → logprob: -0.5772671103477478
    2. ',' → logprob: -0.8272671103477478
    3. ')))' → logprob: -6.952267169952393
    4. ')' → logprob: -8.702266693115234
    5. '))),' → logprob: -9.952266693115234
    6. ',),' → logprob: -9.952266693115234
    7. ')),' → logprob: -10.327266693115234
    8. '(),' → logprob: -11.077266693115234
    9. '))' → logprob: -11.202266693115234
    10. ')));' → logprob: -11.577266693115234

Token 728: ' ' (ID: 220)
  Prédit: '1'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '1' → logprob: -1.9146995327901095e-05
    2. '0' → logprob: -11.250019073486328
    3. ' ' → logprob: -12.125019073486328
    4. '2' → logprob: -15.750019073486328
    5. '   ' → logprob: -15.750019073486328
    6. 'None' → logprob: -15.750019073486328
    7. '+' → logprob: -17.687519073486328
    8. '[' → logprob: -18.250019073486328
    9. '10' → logprob: -18.312519073486328
    10. '```' → logprob: -18.562519073486328

Token 729: '1' (ID: 16)
  Prédit: '1'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '1' → logprob: -5.764977686339989e-05
    2. '0' → logprob: -10.000057220458984
    3. ' ' → logprob: -11.375057220458984
    4. '   ' → logprob: -15.250057220458984
    5. '2' → logprob: -15.375057220458984
    6. 'None' → logprob: -16.250057220458984
    7. ',' → logprob: -17.250057220458984
    8. '+' → logprob: -17.500057220458984
    9. '(' → logprob: -17.500057220458984
    10. ')' → logprob: -17.687557220458984

Token 730: ')))
' (ID: 12562)
  Prédit: '))'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '))' → logprob: -0.005903434474021196
    2. ')))' → logprob: -5.380903244018555
    3. ',' → logprob: -7.005903244018555
    4. ')' → logprob: -8.380903244018555
    5. '))
' → logprob: -10.255903244018555
    6. '()))' → logprob: -10.630903244018555
    7. '),' → logprob: -10.880903244018555
    8. ':' → logprob: -11.130903244018555
    9. ' ))' → logprob: -11.130903244018555
    10. ')):' → logprob: -11.880903244018555

Token 731: '   ' (ID: 271)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')' → logprob: -0.67658931016922
    2. '<|end|>' → logprob: -1.8015892505645752
    3. '
' → logprob: -2.176589250564575
    4. '   ' → logprob: -2.176589250564575
    5. 'print' → logprob: -2.926589250564575
    6. '+' → logprob: -4.801589488983154
    7. ' ' → logprob: -4.926589488983154
    8. '#' → logprob: -5.051589488983154
    9. '```' → logprob: -5.426589488983154
    10. '()' → logprob: -5.676589488983154

Token 732: ' path' (ID: 3104)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.04785091429948807
    2. 'print' → logprob: -3.6728508472442627
    3. ')' → logprob: -4.047851085662842
    4. '<|end|>' → logprob: -6.297851085662842
    5. '
' → logprob: -7.172851085662842
    6. ' print' → logprob: -8.297850608825684
    7. '    
' → logprob: -8.797850608825684
    8. '[' → logprob: -9.297850608825684
    9. '```' → logprob: -9.422850608825684
    10. '.' → logprob: -9.422850608825684

Token 733: ' =' (ID: 314)
  Prédit: ''
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False

Token 734: ' list' (ID: 1562)
  Prédit: 'path'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'path' → logprob: -0.0961729884147644
    2. 'list' → logprob: -2.471173048019409
    3. ' path' → logprob: -6.09617280960083
    4. 'tuple' → logprob: -6.72117280960083
    5. 're' → logprob: -6.97117280960083
    6. '[path' → logprob: -7.09617280960083
    7. 'deque' → logprob: -7.34617280960083
    8. '[' → logprob: -7.47117280960083
    9. '[]' → logprob: -8.596173286437988
    10. '[::-' → logprob: -8.721173286437988

Token 735: '(re' (ID: 8178)
  Prédit: '(re'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(re' → logprob: -0.001625429606065154
    2. '(path' → logprob: -7.0016255378723145
    3. 're' → logprob: -7.3766255378723145
    4. '(dict' → logprob: -10.376625061035156
    5. '(it' → logprob: -10.626625061035156
    6. '(set' → logprob: -10.876625061035156
    7. '(' → logprob: -12.626625061035156
    8. '(map' → logprob: -12.751625061035156
    9. '(sorted' → logprob: -12.876625061035156
    10. '(iter' → logprob: -13.501625061035156

Token 736: 'versed' (ID: 76479)
  Prédit: 'versed'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'versed' → logprob: -5.512236498361744e-07
    2. 'verse' → logprob: -15.250000953674316
    3. 'ver' → logprob: -16.0
    4. 'verted' → logprob: -17.0
    5. '```' → logprob: -18.25
    6. 'vers' → logprob: -18.625
    7. 'versible' → logprob: -19.0
    8. ' versed' → logprob: -19.125
    9. 've' → logprob: -19.25
    10. 're' → logprob: -19.375

Token 737: '(path' (ID: 10993)
  Prédit: '(path'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(path' → logprob: -7.600714161526412e-05
    2. 'path' → logprob: -9.625076293945312
    3. '(' → logprob: -11.750076293945312
    4. ' (' → logprob: -13.750076293945312
    5. ')' → logprob: -14.625076293945312
    6. '[path' → logprob: -16.375076293945312
    7. '(
' → logprob: -16.375076293945312
    8. ',path' → logprob: -16.500076293945312
    9. ' path' → logprob: -16.750076293945312
    10. '   ' → logprob: -16.875076293945312

Token 738: '))
' (ID: 2210)
  Prédit: '))'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '))' → logprob: -0.001991682220250368
    2. ')' → logprob: -6.3769917488098145
    3. '))
' → logprob: -8.751991271972656
    4. '()))' → logprob: -9.126991271972656
    5. '   ' → logprob: -11.876991271972656
    6. ')))' → logprob: -12.001991271972656
    7. ' ))' → logprob: -12.376991271972656
    8. '()' → logprob: -12.751991271972656
    9. '())' → logprob: -14.001991271972656
    10. ' ' → logprob: -14.376991271972656

Token 739: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.09409195184707642
    2. '<|end|>' → logprob: -2.8440918922424316
    3. ')' → logprob: -3.5940918922424316
    4. '
' → logprob: -6.219091892242432
    5. '[' → logprob: -8.34409236907959
    6. ']' → logprob: -8.46909236907959
    7. '```' → logprob: -8.59409236907959
    8. '    
' → logprob: -8.59409236907959
    9. '}' → logprob: -8.84409236907959
    10. '...' → logprob: -8.84409236907959

Token 740: ' #' (ID: 1069)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.22935545444488525
    2. 'print' → logprob: -1.7293554544448853
    3. ')' → logprob: -3.8543553352355957
    4. 'for' → logprob: -5.979355335235596
    5. '<|end|>' → logprob: -6.854355335235596
    6. ' for' → logprob: -7.229355335235596
    7. ' print' → logprob: -7.729355335235596
    8. 'he' → logprob: -8.604355812072754
    9. '#' (adapté à ' #') → logprob: -8.729355812072754
    10. 'u' → logprob: -8.854355812072754

Token 741: ' Util' (ID: 13564)
  Prédit: 'print'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'print' → logprob: -0.3771294057369232
    2. 'dist' → logprob: -2.502129316329956
    3. 'max' → logprob: -2.752129316329956
    4. 'for' → logprob: -3.252129316329956
    5. 'ans' → logprob: -3.252129316329956
    6. ' print' → logprob: -3.752129316329956
    7. '   ' → logprob: -3.877129316329956
    8. 'u' → logprob: -4.502129554748535
    9. 'res' → logprob: -5.502129554748535
    10. ' dist' → logprob: -5.752129554748535

Token 742: 'ise' (ID: 1096)
  Prédit: 't'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 't' → logprob: -0.5257894992828369
    2. 'def' → logprob: -1.025789499282837
    3. '   ' → logprob: -4.150789260864258
    4. 'te' → logprob: -4.525789260864258
    5. 'ate' → logprob: -4.900789260864258
    6. '#' → logprob: -5.025789260864258
    7. '...' → logprob: -6.400789260864258
    8. 'ts' → logprob: -6.900789260864258
    9. 'ze' → logprob: -7.275789260864258
    10. 'ize' → logprob: -7.525789260864258

Token 743: ' une' (ID: 2463)
  Prédit: 'max'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'max' → logprob: -0.6709527373313904
    2. 'print' → logprob: -1.2959527969360352
    3. 'he' → logprob: -2.420952796936035
    4. 'math' → logprob: -3.170952796936035
    5. 'heap' → logprob: -3.295952796936035
    6. 'for' → logprob: -4.170952796936035
    7. ' max' → logprob: -4.795952796936035
    8. 'len' → logprob: -4.920952796936035
    9. 'sys' → logprob: -5.795952796936035
    10. 'it' → logprob: -5.920952796936035

Token 744: ' expression' (ID: 12973)
  Prédit: 'for'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'for' → logprob: -0.20560045540332794
    2. 'heap' → logprob: -2.4556005001068115
    3. 'def' → logprob: -3.4556005001068115
    4. 'while' → logprob: -3.5806005001068115
    5. 'deque' → logprob: -4.330600261688232
    6. ' for' → logprob: -5.455600261688232
    7. 'bou' → logprob: -5.705600261688232
    8. '#' → logprob: -5.830600261688232
    9. 'queue' → logprob: -5.955600261688232
    10. 'stack' → logprob: -6.080600261688232

Token 745: ' génér' (ID: 18939)
  Prédit: 'max'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'max' → logprob: -0.057398006319999695
    2. 'sum' → logprob: -3.8073980808258057
    3. 'generator' → logprob: -4.182397842407227
    4. 'g' → logprob: -5.432397842407227
    5. 'min' → logprob: -6.182397842407227
    6. 'for' → logprob: -6.182397842407227
    7. '_generator' → logprob: -6.432397842407227
    8. ' max' → logprob: -6.682397842407227
    9. 'print' → logprob: -6.807397842407227
    10. '=max' → logprob: -7.432397842407227

Token 746: 'atrice' (ID: 48155)
  Prédit: 'ator'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'ator' → logprob: -0.022473322227597237
    2. 'ateur' → logprob: -4.897473335266113
    3. 'ate' → logprob: -5.272473335266113
    4. 'al' → logprob: -5.397473335266113
    5. 'ale' → logprob: -5.897473335266113
    6. 'atrice' → logprob: -6.522473335266113
    7. 'at' → logprob: -7.897473335266113
    8. 'atore' → logprob: -9.522473335266113
    9. 'a' → logprob: -9.522473335266113
    10. 'r' → logprob: -9.647473335266113

Token 747: ' et' (ID: 859)
  Prédit: 'for'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'for' → logprob: -0.6336198449134827
    2. ' for' → logprob: -1.008619785308838
    3. '   ' → logprob: -3.258619785308838
    4. 'max' → logprob: -4.008619785308838
    5. ',' → logprob: -4.383619785308838
    6. 'sum' → logprob: -4.758619785308838
    7. '
' → logprob: -5.258619785308838
    8. '#' → logprob: -5.633619785308838
    9. 'ans' → logprob: -5.883619785308838
    10. ')' → logprob: -6.383619785308838

Token 748: ' any' (ID: 1062)
  Prédit: 'max'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'max' → logprob: -0.15149004757404327
    2. 'sum' → logprob: -2.4014899730682373
    3. 'print' → logprob: -3.4014899730682373
    4. ' max' → logprob: -4.651490211486816
    5. 'min' → logprob: -5.651490211486816
    6. 'next' → logprob: -7.151490211486816
    7. ' sum' → logprob: -7.651490211486816
    8. 'heap' → logprob: -7.776490211486816
    9. 'abs' → logprob: -8.151490211486816
    10. 'for' → logprob: -8.151490211486816

Token 749: '()' (ID: 416)
  Prédit: 'for'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'for' → logprob: -0.606113076210022
    2. '   ' → logprob: -1.231113076210022
    3. ' for' → logprob: -2.2311129570007324
    4. '(ans' → logprob: -4.356112957000732
    5. '(
' → logprob: -5.231112957000732
    6. '()' → logprob: -5.356112957000732
    7. 'ans' → logprob: -5.481112957000732
    8. ',' → logprob: -5.481112957000732
    9. 'def' → logprob: -5.856112957000732
    10. '
' → logprob: -5.856112957000732

Token 750: ' pour' (ID: 1930)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.2885943651199341
    2. 'for' → logprob: -2.0385942459106445
    3. ' for' → logprob: -3.0385942459106445
    4. '
' → logprob: -3.9135942459106445
    5. 'max' → logprob: -4.0385942459106445
    6. 'ans' → logprob: -4.5385942459106445
    7. 'dist' → logprob: -4.7885942459106445
    8. 'if' → logprob: -5.7885942459106445
    9. '    
' → logprob: -6.1635942459106445
    10. ',' → logprob: -6.5385942459106445

Token 751: ' le' (ID: 505)
  Prédit: 'any'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'any' → logprob: -0.7297877669334412
    2. 'print' → logprob: -1.229787826538086
    3. 'max' → logprob: -1.729787826538086
    4. 'all' → logprob: -4.729787826538086
    5. 'ans' → logprob: -4.729787826538086
    6. 'not' → logprob: -4.854787826538086
    7. 'dist' → logprob: -5.479787826538086
    8. 'node' → logprob: -5.979787826538086
    9. '#' → logprob: -6.104787826538086
    10. 'dis' → logprob: -6.604787826538086

Token 752: ' saut' (ID: 111480)
  Prédit: 'max'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'max' → logprob: -0.2402697652578354
    2. 'for' → logprob: -3.365269660949707
    3. 'maximum' → logprob: -3.365269660949707
    4. '_' → logprob: -3.865269660949707
    5. ' max' → logprob: -3.865269660949707
    6. 'print' → logprob: -3.990269660949707
    7. 'i' → logprob: -4.365269660949707
    8. 'x' → logprob: -4.740269660949707
    9. ' maximum' → logprob: -4.865269660949707
    10. 'while' → logprob: -5.490269660949707

Token 753: '
' (ID: 198)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.14832748472690582
    2. 'for' → logprob: -2.648327589035034
    3. ' for' → logprob: -3.898327589035034
    4. 'max' → logprob: -4.773327350616455
    5. '(' → logprob: -5.398327350616455
    6. '(
' → logprob: -5.773327350616455
    7. 'def' → logprob: -5.773327350616455
    8. ' de' → logprob: -5.773327350616455
    9. 'of' → logprob: -6.273327350616455
    10. 'de' → logprob: -6.273327350616455

Token 754: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.8327273726463318
    2. ' for' → logprob: -1.4577274322509766
    3. 'for' → logprob: -1.4577274322509766
    4. 'max' → logprob: -3.0827274322509766
    5. ' max' → logprob: -5.207727432250977
    6. 'print' → logprob: -5.457727432250977
    7. 'dist' → logprob: -5.457727432250977
    8. '
' → logprob: -5.832727432250977
    9. 'jump' → logprob: -5.832727432250977
    10. 'if' → logprob: -5.957727432250977

Token 755: ' for' (ID: 395)
  Prédit: 'for'
  Correct (stricte): False
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'for' (adapté à ' for') → logprob: -0.9340962171554565
    2. 'print' → logprob: -1.1840962171554565
    3. 'ans' → logprob: -2.684096336364746
    4. 'skip' → logprob: -2.809096336364746
    5. 'jump' → logprob: -2.934096336364746
    6. 'max' → logprob: -3.309096336364746
    7. 'dist' → logprob: -4.059096336364746
    8. 'if' → logprob: -4.184096336364746
    9. 'res' → logprob: -4.309096336364746
    10. 'u' → logprob: -5.434096336364746

Token 756: ' idx' (ID: 14016)
  Prédit: 'i'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'i' → logprob: -0.1047946885228157
    2. ' i' → logprob: -2.72979474067688
    3. 'x' → logprob: -5.104794502258301
    4. '_' → logprob: -5.229794502258301
    5. '(i' → logprob: -5.354794502258301
    6. 'u' → logprob: -5.479794502258301
    7. 'a' → logprob: -5.979794502258301
    8. 'idx' → logprob: -6.104794502258301
    9. '_i' → logprob: -6.604794502258301
    10. 'node' → logprob: -6.854794502258301

Token 757: ' in' (ID: 306)
  Prédit: ','
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ',' → logprob: -0.5416281223297119
    2. ' in' → logprob: -0.9166281223297119
    3. 'in' → logprob: -4.416627883911133
    4. ' ,' → logprob: -5.166627883911133
    5. '   ' → logprob: -9.041627883911133
    6. ' ' → logprob: -9.041627883911133
    7. '_,' → logprob: -9.666627883911133
    8. '(' → logprob: -9.916627883911133
    9. '  ' → logprob: -10.416627883911133
    10. ',(' → logprob: -10.916627883911133

Token 758: ' range' (ID: 3352)
  Prédit: 'range'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'range' → logprob: -0.002622978063300252
    2. ' range' → logprob: -6.252623081207275
    3. 'path' → logprob: -8.252622604370117
    4. 'ab' → logprob: -8.377622604370117
    5. 'it' → logprob: -9.127622604370117
    6. '(range' → logprob: -10.127622604370117
    7. 'chain' → logprob: -10.752622604370117
    8. 'in' → logprob: -11.377622604370117
    9. 're' → logprob: -11.752622604370117
    10. '(' → logprob: -12.752622604370117

Token 759: '(n' (ID: 2406)
  Prédit: '(len'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(len' → logprob: -0.019129997119307518
    2. '(' → logprob: -4.769130229949951
    3. '(n' → logprob: -4.894130229949951
    4. '(ans' → logprob: -5.894130229949951
    5. 'len' → logprob: -9.519129753112793
    6. '((' → logprob: -10.019129753112793
    7. '(path' → logprob: -10.269129753112793
    8. '(l' → logprob: -11.519129753112793
    9. ' (' → logprob: -12.019129753112793
    10. '(d' → logprob: -12.019129753112793

Token 760: '-' (ID: 12)
  Prédit: ' -'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' -' → logprob: -0.24416808784008026
    2. '-' → logprob: -1.7441680431365967
    3. '):
' → logprob: -3.3691680431365967
    4. '   ' → logprob: -5.119168281555176
    5. '):' → logprob: -6.619168281555176
    6. ' ' → logprob: -9.869168281555176
    7. '  ' → logprob: -11.369168281555176
    8. ')' → logprob: -11.494168281555176
    9. '
' → logprob: -11.619168281555176
    10. ' ):
' → logprob: -11.744168281555176

Token 761: '1' (ID: 16)
  Prédit: '1'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '1' → logprob: -0.0030242912471294403
    2. '-' → logprob: -6.753024101257324
    3. ' ' → logprob: -6.753024101257324
    4. '2' → logprob: -7.753024101257324
    5. '(' → logprob: -9.253024101257324
    6. ' -' → logprob: -9.753024101257324
    7. 'len' → logprob: -10.503024101257324
    8. '   ' → logprob: -10.503024101257324
    9. '(len' → logprob: -11.503024101257324
    10. ')' → logprob: -11.878024101257324

Token 762: '):
' (ID: 1883)
  Prédit: '):
'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '):
' → logprob: -0.034917764365673065
    2. '):' → logprob: -3.6599178314208984
    3. '   ' → logprob: -4.909917831420898
    4. ':' → logprob: -7.409917831420898
    5. ':
' → logprob: -8.284917831420898
    6. ')' → logprob: -9.034917831420898
    7. '):
' → logprob: -9.659917831420898
    8. '       ' → logprob: -10.284917831420898
    9. '+' → logprob: -10.534917831420898
    10. ' ):
' → logprob: -10.909917831420898

Token 763: '       ' (ID: 309)
  Prédit: '       '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '       ' → logprob: -0.18526659905910492
    2. '   ' → logprob: -1.9352666139602661
    3. ' if' → logprob: -3.8102664947509766
    4. 'if' → logprob: -7.060266494750977
    5. '<|end|>' → logprob: -7.310266494750977
    6. ',' → logprob: -7.435266494750977
    7. 'a' → logprob: -9.685266494750977
    8. '    ' → logprob: -10.060266494750977
    9. '):
' → logprob: -10.310266494750977
    10. ')' → logprob: -10.560266494750977

Token 764: ' jump' (ID: 13843)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.7820466160774231
    2. 'a' → logprob: -1.0320465564727783
    3. 'if' → logprob: -2.0320465564727783
    4. '       ' → logprob: -3.2820465564727783
    5. ' if' → logprob: -4.532046794891357
    6. 'u' → logprob: -5.532046794891357
    7. ' a' → logprob: -6.157046794891357
    8. 'x' → logprob: -8.2820463180542
    9. 'print' → logprob: -8.5320463180542
    10. ' u' → logprob: -9.4070463180542

Token 765: ' =' (ID: 314)
  Prédit: ' ='
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' =' → logprob: -0.2262876182794571
    2. '=' → logprob: -1.851287603378296
    3. ' if' → logprob: -4.226287841796875
    4. ',' → logprob: -4.226287841796875
    5. '   ' → logprob: -4.726287841796875
    6. ' in' → logprob: -5.726287841796875
    7. 'if' → logprob: -6.101287841796875
    8. 'in' → logprob: -8.601287841796875
    9. ' ' → logprob: -8.726287841796875
    10. '    ' → logprob: -8.726287841796875

Token 766: ' ((' (ID: 3536)
  Prédit: 'abs'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'abs' → logprob: -0.8934317231178284
    2. 'any' → logprob: -1.6434316635131836
    3. 'path' → logprob: -1.8934316635131836
    4. 'dis' → logprob: -3.0184316635131836
    5. 'max' → logprob: -3.0184316635131836
    6. 'ans' → logprob: -3.3934316635131836
    7. '1' → logprob: -4.018431663513184
    8. 'ab' → logprob: -4.143431663513184
    9. '(path' → logprob: -4.393431663513184
    10. '(' → logprob: -5.143431663513184

Token 767: 'ab' (ID: 378)
  Prédit: 'path'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'path' → logprob: -0.4347690939903259
    2. 'dis' → logprob: -1.4347691535949707
    3. 'ab' → logprob: -3.3097691535949707
    4. 'abs' → logprob: -3.4347691535949707
    5. 'ans' → logprob: -4.309769153594971
    6. 'idx' → logprob: -4.809769153594971
    7. 'len' → logprob: -5.309769153594971
    8. '(path' → logprob: -5.434769153594971
    9. 'u' → logprob: -5.559769153594971
    10. 'max' → logprob: -6.434769153594971

Token 768: '[idx' (ID: 25582)
  Prédit: '[idx'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '[idx' → logprob: -0.0019161454401910305
    2. '[path' → logprob: -6.87691593170166
    3. '[' → logprob: -7.37691593170166
    4. 'idx' → logprob: -9.62691593170166
    5. ')[' → logprob: -9.75191593170166
    6. '   ' → logprob: -10.25191593170166
    7. 'path' → logprob: -10.37691593170166
    8. ')' → logprob: -11.75191593170166
    9. '[i' → logprob: -11.75191593170166
    10. '       ' → logprob: -11.87691593170166

Token 769: '][' (ID: 2696)
  Prédit: '['
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '[' → logprob: -0.004220505245029926
    2. '][' → logprob: -5.754220485687256
    3. ')[' → logprob: -7.254220485687256
    4. '[idx' → logprob: -9.129220962524414
    5. '   ' → logprob: -9.629220962524414
    6. ' [' → logprob: -10.254220962524414
    7. '#' → logprob: -11.629220962524414
    8. '0' → logprob: -11.629220962524414
    9. ')' → logprob: -11.754220962524414
    10. ']' → logprob: -12.004220962524414

Token 770: '0' (ID: 15)
  Prédit: '0'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '0' → logprob: -0.018186818808317184
    2. '1' → logprob: -4.018187046051025
    3. ' ' → logprob: -11.143186569213867
    4. 'path' → logprob: -12.330686569213867
    5. '   ' → logprob: -12.705686569213867
    6. '
' → logprob: -13.518186569213867
    7. 'jump' → logprob: -13.893186569213867
    8. 'idx' → logprob: -13.955686569213867
    9. '[' → logprob: -14.018186569213867
    10. '(' → logprob: -14.518186569213867

Token 771: '],' (ID: 2155)
  Prédit: ' +'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' +' → logprob: -0.7317417860031128
    2. '+' → logprob: -1.1067417860031128
    3. ',' → logprob: -2.1067419052124023
    4. ' ,' → logprob: -3.8567419052124023
    5. ' !=' → logprob: -4.106741905212402
    6. ')' → logprob: -4.731741905212402
    7. '!=' → logprob: -4.981741905212402
    8. ' if' → logprob: -5.731741905212402
    9. '),' → logprob: -6.106741905212402
    10. ' -' → logprob: -6.231741905212402

Token 772: ' ab' (ID: 692)
  Prédit: 'ab'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'ab' → logprob: -0.14351427555084229
    2. ' ab' → logprob: -2.0185141563415527
    3. 'path' → logprob: -7.643514156341553
    4. ' path' → logprob: -9.018514633178711
    5. '   ' → logprob: -9.518514633178711
    6. ' ' → logprob: -10.893514633178711
    7. '(ab' → logprob: -10.893514633178711
    8. '    ' → logprob: -11.018514633178711
    9. 'abs' → logprob: -11.143514633178711
    10. '  ' → logprob: -11.143514633178711

Token 773: '[idx' (ID: 25582)
  Prédit: '['
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '[' → logprob: -0.13294851779937744
    2. '[idx' → logprob: -2.632948398590088
    3. '1' → logprob: -3.132948398590088
    4. ')[' → logprob: -4.882948398590088
    5. '][' → logprob: -7.632948398590088
    6. 'idx' → logprob: -8.132948875427246
    7. ')' → logprob: -8.882948875427246
    8. '0' → logprob: -9.257948875427246
    9. ' [' → logprob: -9.507948875427246
    10. '   ' → logprob: -9.632948875427246

Token 774: '][' (ID: 2696)
  Prédit: ']['
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '][' → logprob: -0.16004028916358948
    2. '[' → logprob: -2.0350403785705566
    3. '1' → logprob: -4.410040378570557
    4. ')[' → logprob: -5.910040378570557
    5. ')][' → logprob: -7.160040378570557
    6. '])[' → logprob: -7.660040378570557
    7. '0' → logprob: -8.410039901733398
    8. '   ' → logprob: -8.535039901733398
    9. '
' → logprob: -9.160039901733398
    10. ' ][' → logprob: -9.285039901733398

Token 775: '1' (ID: 16)
  Prédit: '1'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '1' → logprob: -3.106736039626412e-05
    2. '0' → logprob: -11.375031471252441
    3. ' ' → logprob: -11.375031471252441
    4. '
' → logprob: -13.250031471252441
    5. '-' → logprob: -13.312531471252441
    6. 'idx' → logprob: -13.812531471252441
    7. '   ' → logprob: -13.937531471252441
    8. '```' → logprob: -14.875031471252441
    9. '[' → logprob: -15.062531471252441
    10. '  ' → logprob: -15.125031471252441

Token 776: '])' (ID: 4636)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ')' → logprob: -0.6460902094841003
    2. '),' → logprob: -1.1460902690887451
    3. '))' → logprob: -2.396090269088745
    4. '[' → logprob: -3.271090269088745
    5. ',' → logprob: -4.271090030670166
    6. ' )' → logprob: -5.396090030670166
    7. ' ),' → logprob: -5.896090030670166
    8. ' ))' → logprob: -6.271090030670166
    9. ' if' → logprob: -6.646090030670166
    10. '))
' → logprob: -7.021090030670166

Token 777: ' ==' (ID: 951)
  Prédit: ','
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ',' → logprob: -0.6044378876686096
    2. '[' → logprob: -1.8544378280639648
    3. ' if' → logprob: -1.9794378280639648
    4. ')' → logprob: -2.604437828063965
    5. ' ,' → logprob: -3.354437828063965
    6. ' in' → logprob: -3.729437828063965
    7. 'if' → logprob: -4.479437828063965
    8. ' ==' → logprob: -5.854437828063965
    9. ')
' → logprob: -6.229437828063965
    10. ',
' → logprob: -6.354437828063965

Token 778: ' (' (ID: 350)
  Prédit: '(path'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(path' → logprob: -0.003055904060602188
    2. ' (' → logprob: -6.003056049346924
    3. '(u' → logprob: -7.753056049346924
    4. '(v' → logprob: -10.003055572509766
    5. 'path' → logprob: -10.378055572509766
    6. '(ans' → logprob: -10.878055572509766
    7. '   ' → logprob: -11.128055572509766
    8. '(ab' → logprob: -11.253055572509766
    9. '(' → logprob: -11.628055572509766
    10. '(tuple' → logprob: -12.878055572509766

Token 779: 'path' (ID: 4189)
  Prédit: '(path'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(path' → logprob: -0.6793577671051025
    2. 'path' → logprob: -0.8043577671051025
    3. '(u' → logprob: -3.6793577671051025
    4. ' path' → logprob: -4.554357528686523
    5. ' (' → logprob: -5.179357528686523
    6. 'u' → logprob: -6.554357528686523
    7. '(v' → logprob: -6.554357528686523
    8. '   ' → logprob: -7.429357528686523
    9. 'v' → logprob: -7.804357528686523
    10. '(ans' → logprob: -8.679357528686523

Token 780: '[' (ID: 58)
  Prédit: '[idx'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '[idx' → logprob: -0.06956376135349274
    2. '[' → logprob: -2.819563865661621
    3. '[-' → logprob: -5.194563865661621
    4. '[len' → logprob: -6.569563865661621
    5. 'idx' → logprob: -8.319563865661621
    6. '[path' → logprob: -8.944563865661621
    7. '[j' → logprob: -9.819563865661621
    8. '[(' → logprob: -10.694563865661621
    9. '   ' → logprob: -10.944563865661621
    10. '[i' → logprob: -11.069563865661621

Token 781: 'ans' (ID: 616)
  Prédit: 'idx'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'idx' → logprob: -0.08764287829399109
    2. '0' → logprob: -2.9626429080963135
    3. 'ans' → logprob: -3.5876429080963135
    4. '-' → logprob: -6.462642669677734
    5. 'len' → logprob: -6.712642669677734
    6. '1' → logprob: -7.337642669677734
    7. ' idx' → logprob: -8.462642669677734
    8. '[idx' → logprob: -8.712642669677734
    9. '   ' → logprob: -8.962642669677734
    10. 'i' → logprob: -9.462642669677734

Token 782: '],' (ID: 2155)
  Prédit: '],'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '],' → logprob: -0.5874802470207214
    2. '[' → logprob: -1.4624803066253662
    3. '[idx' → logprob: -1.8374803066253662
    4. 'idx' → logprob: -3.212480306625366
    5. 'ans' → logprob: -5.087480068206787
    6. '   ' → logprob: -5.462480068206787
    7. '-' → logprob: -6.462480068206787
    8. '[-' → logprob: -8.337480545043945
    9. '```' → logprob: -8.712480545043945
    10. ']' → logprob: -8.712480545043945

Token 783: ' path' (ID: 3104)
  Prédit: 'path'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'path' → logprob: -0.0017082560807466507
    2. ' path' → logprob: -6.376708030700684
    3. '   ' → logprob: -12.251708030700684
    4. ')' → logprob: -14.876708030700684
    5. '	path' → logprob: -14.876708030700684
    6. '(path' → logprob: -15.751708030700684
    7. '
' → logprob: -16.001708984375
    8. '    ' → logprob: -16.626708984375
    9. '    
' → logprob: -16.876708984375
    10. ' ' → logprob: -17.126708984375

Token 784: '[' (ID: 58)
  Prédit: '['
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '[' → logprob: -5.319370302458992e-06
    2. 'ans' → logprob: -12.875005722045898
    3. '   ' → logprob: -13.125005722045898
    4. ' [' → logprob: -14.875005722045898
    5. '           ' → logprob: -15.875005722045898
    6. '       ' → logprob: -16.5000057220459
    7. '    ' → logprob: -17.2500057220459
    8. '[
' → logprob: -17.3750057220459
    9. '(ans' → logprob: -17.7500057220459
    10. ' ' → logprob: -18.1250057220459

Token 785: 'ans' (ID: 616)
  Prédit: 'ans'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'ans' → logprob: -1.6166903151315637e-05
    2. '[' → logprob: -11.750016212463379
    3. '(ans' → logprob: -12.125016212463379
    4. ' ans' → logprob: -13.500016212463379
    5. '   ' → logprob: -13.875016212463379
    6. '(' → logprob: -15.875016212463379
    7. '	ans' → logprob: -16.125015258789062
    8. '
' → logprob: -16.500015258789062
    9. '  ' → logprob: -16.500015258789062
    10. ' ' → logprob: -17.000015258789062

Token 786: '+' (ID: 10)
  Prédit: '+'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '+' → logprob: -0.007089134305715561
    2. '-' → logprob: -5.632089138031006
    3. ' +' → logprob: -5.882089138031006
    4. '])' → logprob: -7.882089138031006
    5. '   ' → logprob: -9.507088661193848
    6. ']))' → logprob: -9.632088661193848
    7. ' -' → logprob: -9.882088661193848
    8. ']' → logprob: -10.007088661193848
    9. 'ans' → logprob: -11.007088661193848
    10. ' ' → logprob: -11.632088661193848

Token 787: '1' (ID: 16)
  Prédit: '1'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '1' → logprob: -0.00030578780570067465
    2. 'ans' → logprob: -8.125306129455566
    3. ' ' → logprob: -12.125306129455566
    4. '   ' → logprob: -12.875306129455566
    5. '(ans' → logprob: -14.375306129455566
    6. '  ' → logprob: -14.625306129455566
    7. ' ans' → logprob: -15.125306129455566
    8. '+' → logprob: -15.750306129455566
    9. '0' → logprob: -16.50030517578125
    10. '-' → logprob: -16.75030517578125

Token 788: '])' (ID: 4636)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ')' → logprob: -0.35012394189834595
    2. '))' → logprob: -1.2251238822937012
    3. ' )' → logprob: -6.975123882293701
    4. ' ))' → logprob: -7.475123882293701
    5. ')
' → logprob: -9.85012435913086
    6. '))
' → logprob: -9.97512435913086
    7. ' or' → logprob: -9.97512435913086
    8. 'or' → logprob: -12.22512435913086
    9. '   ' → logprob: -12.47512435913086
    10. ')))' → logprob: -12.60012435913086

Token 789: ' or' (ID: 503)
  Prédit: ' or'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' or' → logprob: -0.05570908263325691
    2. ')' → logprob: -3.30570912361145
    3. 'or' → logprob: -4.055708885192871
    4. ' )' → logprob: -9.680708885192871
    5. '       ' → logprob: -9.680708885192871
    6. '    ' → logprob: -11.430708885192871
    7. '        ' → logprob: -11.680708885192871
    8. ' ' → logprob: -12.180708885192871
    9. '      ' → logprob: -12.180708885192871
    10. '           ' → logprob: -12.180708885192871

Token 790: ' (' (ID: 350)
  Prédit: '(ab'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(ab' → logprob: -0.6826987266540527
    2. ' (' → logprob: -1.5576987266540527
    3. '       ' → logprob: -2.3076987266540527
    4. '      ' → logprob: -2.8076987266540527
    5. '        ' → logprob: -3.0576987266540527
    6. '(' → logprob: -4.307698726654053
    7. '              ' → logprob: -4.557698726654053
    8. '             ' → logprob: -4.807698726654053
    9. '          ' → logprob: -4.807698726654053
    10. '    ' → logprob: -4.932698726654053

Token 791: 'ab' (ID: 378)
  Prédit: 'ab'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'ab' → logprob: -0.3178773820400238
    2. ' ab' → logprob: -1.3178774118423462
    3. '(ab' → logprob: -5.692877292633057
    4. '    ' → logprob: -7.317877292633057
    5. '   ' → logprob: -8.942877769470215
    6. '        ' → logprob: -9.067877769470215
    7. '      ' → logprob: -10.067877769470215
    8. '     ' → logprob: -10.192877769470215
    9. '         ' → logprob: -10.317877769470215
    10. ' (' → logprob: -10.317877769470215

Token 792: '[idx' (ID: 25582)
  Prédit: '[idx'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '[idx' → logprob: -0.00011594036914175376
    2. 'idx' → logprob: -9.125116348266602
    3. '[' → logprob: -12.750116348266602
    4. ' idx' → logprob: -13.000116348266602
    5. '[user' → logprob: -15.125116348266602
    6. ' [' → logprob: -15.375116348266602
    7. '[
' → logprob: -15.500116348266602
    8. ')[' → logprob: -15.625116348266602
    9. '```' → logprob: -16.0001163482666
    10. '[id' → logprob: -16.1251163482666

Token 793: '][' (ID: 2696)
  Prédit: ']['
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '][' → logprob: -0.007644133176654577
    2. '[' → logprob: -5.007644176483154
    3. ')[' → logprob: -7.507644176483154
    4. 'idx' → logprob: -9.257643699645996
    5. ' ][' → logprob: -9.632643699645996
    6. ']' → logprob: -10.007643699645996
    7. ')][' → logprob: -10.882643699645996
    8. '   ' → logprob: -10.882643699645996
    9. '[idx' → logprob: -11.257643699645996
    10. ']][' → logprob: -11.257643699645996

Token 794: '1' (ID: 16)
  Prédit: '1'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '1' → logprob: -0.0006097480072639883
    2. '0' → logprob: -7.625609874725342
    3. '[' → logprob: -9.250609397888184
    4. '   ' → logprob: -11.375609397888184
    5. ' ' → logprob: -11.500609397888184
    6. '
' → logprob: -14.000609397888184
    7. '```' → logprob: -14.500609397888184
    8. '  ' → logprob: -14.813109397888184
    9. 'ans' → logprob: -14.813109397888184
    10. '+' → logprob: -15.375609397888184

Token 795: '],' (ID: 2155)
  Prédit: ','
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ',' → logprob: -0.14432649314403534
    2. '],' → logprob: -2.5193264484405518
    3. '][' → logprob: -3.8943264484405518
    4. '[' → logprob: -3.8943264484405518
    5. '],[' → logprob: -5.519326686859131
    6. '<|end|>' → logprob: -5.644326686859131
    7. ' ,' → logprob: -5.894326686859131
    8. '),' → logprob: -7.019326686859131
    9. ']==' → logprob: -7.894326686859131
    10. ']' → logprob: -8.019326210021973

Token 796: ' ab' (ID: 692)
  Prédit: 'path'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'path' → logprob: -0.7098727226257324
    2. 'ab' → logprob: -0.9598727226257324
    3. ' path' → logprob: -2.7098727226257324
    4. ' ab' → logprob: -2.8348727226257324
    5. 'ans' → logprob: -11.58487319946289
    6. 'abs' → logprob: -11.58487319946289
    7. '   ' → logprob: -11.70987319946289
    8. '           ' → logprob: -12.20987319946289
    9. '(ab' → logprob: -12.33487319946289
    10. '(path' → logprob: -12.45987319946289

Token 797: '[idx' (ID: 25582)
  Prédit: '['
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '[' → logprob: -0.8403598070144653
    2. '[idx' → logprob: -0.8403598070144653
    3. 'idx' → logprob: -2.215359687805176
    4. 'ans' → logprob: -3.590359687805176
    5. '(ans' → logprob: -9.715359687805176
    6. '_ans' → logprob: -10.840359687805176
    7. '=' → logprob: -10.965359687805176
    8. '           ' → logprob: -11.215359687805176
    9. '```' → logprob: -11.465359687805176
    10. '   ' → logprob: -11.465359687805176

Token 798: '][' (ID: 2696)
  Prédit: 'ans'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'ans' → logprob: -0.005310604348778725
    2. '[' → logprob: -5.255310535430908
    3. '(ans' → logprob: -10.130311012268066
    4. ' ans' → logprob: -11.380311012268066
    5. '	ans' → logprob: -11.755311012268066
    6. '   ' → logprob: -12.005311012268066
    7. '+' → logprob: -12.130311012268066
    8. '_ans' → logprob: -13.005311012268066
    9. 'idx' → logprob: -13.505311012268066
    10. '       ' → logprob: -14.380311012268066

Token 799: '0' (ID: 15)
  Prédit: 'ans'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'ans' → logprob: -2.6537622034084052e-05
    2. '0' → logprob: -10.87502670288086
    3. '(ans' → logprob: -12.87502670288086
    4. ' ans' → logprob: -13.12502670288086
    5. 'idx' → logprob: -13.25002670288086
    6. '
' → logprob: -14.37502670288086
    7. '[' → logprob: -15.37502670288086
    8. '	ans' → logprob: -15.62502670288086
    9. '   ' → logprob: -16.00002670288086
    10. '_ans' → logprob: -17.00002670288086

Token 800: '])' (ID: 4636)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')' → logprob: -0.0018459362909197807
    2. ')==' → logprob: -6.876845836639404
    3. '])' → logprob: -7.376845836639404
    4. ' )' → logprob: -9.251846313476562
    5. ']' → logprob: -10.126846313476562
    6. ']==' → logprob: -10.876846313476562
    7. '   ' → logprob: -11.876846313476562
    8. '==' → logprob: -12.126846313476562
    9. '())' → logprob: -12.251846313476562
    10. '[' → logprob: -12.876846313476562

Token 801: ' ==' (ID: 951)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')' → logprob: -0.014916706830263138
    2. ')==' → logprob: -4.639916896820068
    3. '==' → logprob: -5.389916896820068
    4. ' ==' → logprob: -7.514916896820068
    5. ' )' → logprob: -11.01491641998291
    6. ']==' → logprob: -11.13991641998291
    7. '==(' → logprob: -13.13991641998291
    8. ']' → logprob: -13.63991641998291
    9. '```' → logprob: -14.13991641998291
    10. '))' → logprob: -14.13991641998291

Token 802: ' (' (ID: 350)
  Prédit: '(path'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(path' → logprob: -0.016040703281760216
    2. ' (' → logprob: -4.141040802001953
    3. '   ' → logprob: -13.141040802001953
    4. '[path' → logprob: -13.891040802001953
    5. '(Path' → logprob: -14.266040802001953
    6. '(paths' → logprob: -14.391040802001953
    7. '(ab' → logprob: -14.766040802001953
    8. '
' → logprob: -14.891040802001953
    9. '(PATH' → logprob: -15.016040802001953
    10. '  ' → logprob: -15.016040802001953

Token 803: 'path' (ID: 4189)
  Prédit: 'path'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'path' → logprob: -0.00031615851912647486
    2. ' path' → logprob: -8.250316619873047
    3. '(path' → logprob: -9.875316619873047
    4. '   ' → logprob: -12.875316619873047
    5. '
' → logprob: -14.750316619873047
    6. ' ' → logprob: -16.500316619873047
    7. '  ' → logprob: -16.750316619873047
    8. '"path' → logprob: -16.750316619873047
    9. '	path' → logprob: -16.875316619873047
    10. 'pat' → logprob: -17.000316619873047

Token 804: '[' (ID: 58)
  Prédit: '['
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '[' → logprob: -1.5332478142227046e-05
    2. 'ans' → logprob: -11.125015258789062
    3. ' [' → logprob: -15.000015258789062
    4. '   ' → logprob: -16.125015258789062
    5. '[
' → logprob: -16.125015258789062
    6. '
' → logprob: -17.125015258789062
    7. '(ans' → logprob: -17.500015258789062
    8. '```' → logprob: -17.625015258789062
    9. ' ' → logprob: -18.250015258789062
    10. '	ans' → logprob: -19.125015258789062

Token 805: 'ans' (ID: 616)
  Prédit: 'ans'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'ans' → logprob: -7.624555291840807e-05
    2. '[' → logprob: -9.500076293945312
    3. ' ans' → logprob: -14.250076293945312
    4. '(ans' → logprob: -14.500076293945312
    5. '   ' → logprob: -15.875076293945312
    6. ' ' → logprob: -17.125076293945312
    7. '	ans' → logprob: -17.250076293945312
    8. 'idx' → logprob: -17.875076293945312
    9. '
' → logprob: -17.875076293945312
    10. '```' → logprob: -18.500076293945312

Token 806: '],' (ID: 2155)
  Prédit: '],'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '],' → logprob: -0.17650693655014038
    2. '+' → logprob: -2.051506996154785
    3. 'ans' → logprob: -4.051506996154785
    4. '[' → logprob: -4.676506996154785
    5. ',' → logprob: -5.676506996154785
    6. '   ' → logprob: -6.676506996154785
    7. '][' → logprob: -7.426506996154785
    8. ' ans' → logprob: -7.426506996154785
    9. ']' → logprob: -8.051506996154785
    10. '(ans' → logprob: -8.926506996154785

Token 807: ' path' (ID: 3104)
  Prédit: 'path'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'path' → logprob: -0.08895561099052429
    2. ' path' → logprob: -2.4639556407928467
    3. '   ' → logprob: -12.213955879211426
    4. 'ab' → logprob: -12.463955879211426
    5. 'ans' → logprob: -13.088955879211426
    6. ' ab' → logprob: -14.088955879211426
    7. '    ' → logprob: -14.588955879211426
    8. '           ' → logprob: -14.588955879211426
    9. ' ' → logprob: -14.713955879211426
    10. '       ' → logprob: -14.838955879211426

Token 808: '[' (ID: 58)
  Prédit: 'ans'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'ans' → logprob: -0.4741978645324707
    2. '[' → logprob: -0.9741978645324707
    3. '(ans' → logprob: -9.974197387695312
    4. '   ' → logprob: -10.849197387695312
    5. 'idx' → logprob: -11.099197387695312
    6. ' ans' → logprob: -11.224197387695312
    7. '+' → logprob: -11.349197387695312
    8. '	ans' → logprob: -12.224197387695312
    9. '[idx' → logprob: -12.599197387695312
    10. '```' → logprob: -12.849197387695312

Token 809: 'ans' (ID: 616)
  Prédit: 'ans'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'ans' → logprob: -1.9743012671824545e-05
    2. '(ans' → logprob: -11.750020027160645
    3. '[' → logprob: -12.000020027160645
    4. ' ans' → logprob: -12.500020027160645
    5. '   ' → logprob: -13.875020027160645
    6. '	ans' → logprob: -14.375020027160645
    7. 'ann' → logprob: -15.875020027160645
    8. '_ans' → logprob: -16.625019073486328
    9. 'anz' → logprob: -17.625019073486328
    10. 'ass' → logprob: -17.875019073486328

Token 810: '+' (ID: 10)
  Prédit: '+'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '+' → logprob: -0.0003832445072475821
    2. '1' → logprob: -8.375383377075195
    3. ' +' → logprob: -8.875383377075195
    4. '   ' → logprob: -12.000383377075195
    5. ']+' → logprob: -13.125383377075195
    6. '[' → logprob: -13.750383377075195
    7. 'idx' → logprob: -14.125383377075195
    8. '])' → logprob: -14.750383377075195
    9. 'ans' → logprob: -14.875383377075195
    10. '```' → logprob: -15.000383377075195

Token 811: '1' (ID: 16)
  Prédit: '1'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '1' → logprob: -5.5027299822540954e-05
    2. '+' → logprob: -10.125055313110352
    3. ' ' → logprob: -11.250055313110352
    4. '   ' → logprob: -14.500055313110352
    5. 'idx' → logprob: -15.250055313110352
    6. '2' → logprob: -15.500055313110352
    7. '0' → logprob: -15.625055313110352
    8. ']+' → logprob: -15.750055313110352
    9. '```' → logprob: -16.00005531311035
    10. '  ' → logprob: -16.50005531311035

Token 812: ']))
' (ID: 24801)
  Prédit: ')):
'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ')):
' → logprob: -0.7827586531639099
    2. '))' → logprob: -0.9077586531639099
    3. ')):' → logprob: -2.0327587127685547
    4. ')))' → logprob: -5.782758712768555
    5. ')):
' → logprob: -6.282758712768555
    6. '))
' → logprob: -6.282758712768555
    7. ')' → logprob: -6.907758712768555
    8. '       ' → logprob: -8.782758712768555
    9. '   ' → logprob: -9.032758712768555
    10. ' ))' → logprob: -9.407758712768555

Token 813: '       ' (ID: 309)
  Prédit: '       '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '       ' → logprob: -0.016534922644495964
    2. '           ' → logprob: -4.641534805297852
    3. ' or' → logprob: -5.766534805297852
    4. ':' → logprob: -6.141534805297852
    5. ' and' → logprob: -7.516534805297852
    6. '):' → logprob: -8.141534805297852
    7. '):
' → logprob: -8.266534805297852
    8. '<|end|>' → logprob: -9.266534805297852
    9. ':
' → logprob: -9.641534805297852
    10. '   ' → logprob: -9.891534805297852

Token 814: ' if' (ID: 538)
  Prédit: '       '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '       ' → logprob: -0.17385470867156982
    2. ' if' → logprob: -2.7988548278808594
    3. 'if' (adapté à ' if') → logprob: -3.0488548278808594
    4. '   ' → logprob: -3.2988548278808594
    5. '           ' → logprob: -4.673854827880859
    6. 'print' → logprob: -5.673854827880859
    7. 'continue' → logprob: -7.173854827880859
    8. ' print' → logprob: -8.04885482788086
    9. ' continue' → logprob: -8.29885482788086
    10. ')' → logprob: -10.54885482788086

Token 815: ' jump' (ID: 13843)
  Prédit: 'jump'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'jump' → logprob: -0.01685895211994648
    2. 'not' → logprob: -4.39185905456543
    3. ' jump' → logprob: -5.64185905456543
    4. '   ' → logprob: -7.89185905456543
    5. ' not' → logprob: -8.01685905456543
    6. '    ' → logprob: -10.39185905456543
    7. '       ' → logprob: -11.14185905456543
    8. '  ' → logprob: -11.51685905456543
    9. ' ' → logprob: -11.64185905456543
    10. 'j' → logprob: -12.89185905456543

Token 816: ':
' (ID: 734)
  Prédit: ':'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ':' → logprob: -0.19974075257778168
    2. ':
' → logprob: -1.9497407674789429
    3. '           ' → logprob: -3.3247406482696533
    4. '       ' → logprob: -6.324740886688232
    5. ' and' → logprob: -8.199740409851074
    6. '==' → logprob: -8.574740409851074
    7. ' ==' → logprob: -9.574740409851074
    8. '):
' → logprob: -9.699740409851074
    9. ':return' → logprob: -9.949740409851074
    10. '=' → logprob: -10.074740409851074

Token 817: '           ' (ID: 352)
  Prédit: '           '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '           ' → logprob: -0.2841998338699341
    2. '       ' → logprob: -1.409199833869934
    3. 'print' → logprob: -6.0341997146606445
    4. ' print' → logprob: -7.5341997146606445
    5. '   ' → logprob: -10.034199714660645
    6. 'continue' → logprob: -10.409199714660645
    7. ' continue' → logprob: -11.034199714660645
    8. '               ' → logprob: -12.409199714660645
    9. '         ' → logprob: -12.784199714660645
    10. '          ' → logprob: -13.159199714660645

Token 818: ' continue' (ID: 4901)
  Prédit: 'print'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'print' → logprob: -0.01966782845556736
    2. 'continue' (adapté à ' continue') → logprob: -4.144667625427246
    3. '           ' → logprob: -6.144667625427246
    4. 'break' → logprob: -7.394667625427246
    5. '   ' → logprob: -7.519667625427246
    6. 'ans' → logprob: -9.019667625427246
    7. '       ' → logprob: -9.519667625427246
    8. 'pass' → logprob: -9.644667625427246
    9. ' print' → logprob: -10.394667625427246
    10. '               ' → logprob: -11.394667625427246

Token 819: '
' (ID: 198)
  Prédit: '       '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '       ' → logprob: -0.286742627620697
    2. 'print' → logprob: -1.4117426872253418
    3. '   ' → logprob: -5.286742687225342
    4. ' print' → logprob: -7.786742687225342
    5. '           ' → logprob: -10.786742210388184
    6. 'else' → logprob: -11.036742210388184
    7. '<|end|>' → logprob: -11.411742210388184
    8. '```' → logprob: -11.661742210388184
    9. '
' → logprob: -11.911742210388184
    10. '#print' → logprob: -12.036742210388184

Token 820: '       ' (ID: 309)
  Prédit: '       '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '       ' → logprob: -0.4768328070640564
    2. 'print' → logprob: -0.9768328070640564
    3. '   ' → logprob: -5.976832866668701
    4. ' print' → logprob: -8.601832389831543
    5. '           ' → logprob: -11.976832389831543
    6. '```' → logprob: -12.351832389831543
    7. '<|end|>' → logprob: -12.476832389831543
    8. '#print' → logprob: -12.601832389831543
    9. 'return' → logprob: -12.976832389831543
    10. 'else' → logprob: -13.226832389831543

Token 821: ' g' (ID: 329)
  Prédit: 'print'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'print' → logprob: -0.0069070677272975445
    2. 'g' (adapté à ' g') → logprob: -5.756906986236572
    3. 'ans' → logprob: -6.506906986236572
    4. 'u' → logprob: -6.756906986236572
    5. '   ' → logprob: -7.506906986236572
    6. 'mod' → logprob: -9.25690746307373
    7. 'sys' → logprob: -9.38190746307373
    8. ' print' → logprob: -9.88190746307373
    9. 'if' → logprob: -10.00690746307373
    10. 'he' → logprob: -10.00690746307373

Token 822: '1' (ID: 16)
  Prédit: '['
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '[' → logprob: -0.21418385207653046
    2. '1' → logprob: -1.7141838073730469
    3. '[idx' → logprob: -4.589183807373047
    4. '[u' → logprob: -6.214183807373047
    5. '[a' → logprob: -8.214183807373047
    6. '[path' → logprob: -9.714183807373047
    7. '[g' → logprob: -9.964183807373047
    8. '[arr' → logprob: -10.464183807373047
    9. '```' → logprob: -11.214183807373047
    10. ' [' → logprob: -11.214183807373047

Token 823: '[' (ID: 58)
  Prédit: '['
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '[' → logprob: -0.011145791970193386
    2. '[g' → logprob: -4.51114559173584
    3. '[path' → logprob: -9.76114559173584
    4. '[u' → logprob: -10.76114559173584
    5. '[a' → logprob: -11.26114559173584
    6. 'g' → logprob: -13.63614559173584
    7. '[b' → logprob: -15.01114559173584
    8. '[arr' → logprob: -15.01114559173584
    9. '[node' → logprob: -15.13614559173584
    10. '```' → logprob: -15.13614559173584

Token 824: 'ab' (ID: 378)
  Prédit: 'ab'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'ab' → logprob: -3.054500666621607e-06
    2. '[' → logprob: -13.37500286102295
    3. ' ab' → logprob: -14.37500286102295
    4. 'idx' → logprob: -14.37500286102295
    5. '   ' → logprob: -16.000003814697266
    6. 'a' → logprob: -16.125003814697266
    7. 'jump' → logprob: -17.625003814697266
    8. '
' → logprob: -17.750003814697266
    9. 'abbr' → logprob: -18.875003814697266
    10. 'copy' → logprob: -19.250003814697266

Token 825: '[idx' (ID: 25582)
  Prédit: '[idx'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '[idx' → logprob: -0.000386105413781479
    2. 'idx' → logprob: -7.8753862380981445
    3. '[' → logprob: -12.875386238098145
    4. '][' → logprob: -14.000386238098145
    5. ' idx' → logprob: -14.125386238098145
    6. '	idx' → logprob: -14.375386238098145
    7. '```' → logprob: -15.375386238098145
    8. '[i' → logprob: -15.375386238098145
    9. '(idx' → logprob: -15.500386238098145
    10. '[a' → logprob: -16.750385284423828

Token 826: '][' (ID: 2696)
  Prédit: '['
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '[' → logprob: -0.2545739710330963
    2. '][' → logprob: -1.504573941230774
    3. '[idx' → logprob: -6.254573822021484
    4. '0' → logprob: -8.129573822021484
    5. 'idx' → logprob: -8.379573822021484
    6. ')[' → logprob: -10.254573822021484
    7. '   ' → logprob: -10.254573822021484
    8. ']][' → logprob: -10.629573822021484
    9. ' ][' → logprob: -11.004573822021484
    10. ']' → logprob: -11.754573822021484

Token 827: '0' (ID: 15)
  Prédit: '0'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '0' → logprob: -0.003187459195032716
    2. '1' → logprob: -5.753187656402588
    3. 'idx' → logprob: -12.44068717956543
    4. '۰' → logprob: -14.00318717956543
    5. '   ' → logprob: -14.44068717956543
    6. '[' → logprob: -14.69068717956543
    7. ']' → logprob: -14.75318717956543
    8. '
' → logprob: -14.94068717956543
    9. ' ' → logprob: -15.31568717956543
    10. '
' → logprob: -15.37818717956543

Token 828: ']].' (ID: 47690)
  Prédit: '].'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '].' → logprob: -2.9160102712921798e-05
    2. '][' → logprob: -10.625029563903809
    3. ']' → logprob: -13.625029563903809
    4. ' ].' → logprob: -13.625029563903809
    5. ']].' → logprob: -13.750029563903809
    6. '[' → logprob: -14.250029563903809
    7. '()].' → logprob: -14.750029563903809
    8. '   ' → logprob: -15.875029563903809
    9. ').' → logprob: -16.500028610229492
    10. ')].' → logprob: -17.000028610229492

Token 829: 'append' (ID: 9132)
  Prédit: 'remove'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'remove' → logprob: -0.20163494348526
    2. 'append' → logprob: -1.7016348838806152
    3. 'pop' → logprob: -8.451635360717773
    4. 'discard' → logprob: -13.076635360717773
    5. 'clear' → logprob: -13.576635360717773
    6. 'add' → logprob: -13.701635360717773
    7. 'rem' → logprob: -13.701635360717773
    8. '.remove' → logprob: -13.951635360717773
    9. ' remove' → logprob: -14.701635360717773
    10. '.append' → logprob: -15.201635360717773

Token 830: '(ab' (ID: 115191)
  Prédit: 'ab'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'ab' → logprob: -8.232493564719334e-05
    2. ' ab' → logprob: -10.125082015991211
    3. '   ' → logprob: -10.250082015991211
    4. '(ab' → logprob: -12.250082015991211
    5. '  ' → logprob: -13.875082015991211
    6. '(' → logprob: -15.250082015991211
    7. '    ' → logprob: -15.250082015991211
    8. ' ' → logprob: -15.500082015991211
    9. 'abbr' → logprob: -16.00008201599121
    10. 'abs' → logprob: -16.37508201599121

Token 831: '[idx' (ID: 25582)
  Prédit: '[idx'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '[idx' → logprob: -1.9385402993066236e-05
    2. 'idx' → logprob: -10.875019073486328
    3. '[' → logprob: -16.125019073486328
    4. '(idx' → logprob: -16.500019073486328
    5. ' idx' → logprob: -16.750019073486328
    6. '	idx' → logprob: -17.125019073486328
    7. '1' → logprob: -18.500019073486328
    8. '```' → logprob: -18.625019073486328
    9. '[i' → logprob: -19.375019073486328
    10. '_idx' → logprob: -20.500019073486328

Token 832: '][' (ID: 2696)
  Prédit: '['
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '[' → logprob: -0.2711679935455322
    2. '][' → logprob: -1.6461679935455322
    3. '[idx' → logprob: -3.2711679935455322
    4. 'idx' → logprob: -5.771167755126953
    5. '1' → logprob: -6.021167755126953
    6. '(idx' → logprob: -7.521167755126953
    7. ' idx' → logprob: -8.771167755126953
    8. '   ' → logprob: -9.396167755126953
    9. '_idx' → logprob: -10.021167755126953
    10. ')[' → logprob: -10.146167755126953

Token 833: '1' (ID: 16)
  Prédit: '1'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '1' → logprob: -1.5048530030981055e-06
    2. '0' → logprob: -13.875001907348633
    3. ' ' → logprob: -15.625001907348633
    4. '```' → logprob: -16.125001907348633
    5. '' → logprob: -16.375001907348633
    6. '   ' → logprob: -16.875001907348633
    7. 'idx' → logprob: -17.375001907348633
    8. '۱' → logprob: -17.562501907348633
    9. '১' → logprob: -17.937501907348633
    10. ']' → logprob: -18.125001907348633

Token 834: '])
' (ID: 5169)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ')' → logprob: -0.007628399878740311
    2. ')
' → logprob: -4.882628440856934
    3. '])' → logprob: -11.382628440856934
    4. ')]' → logprob: -13.007628440856934
    5. ']' → logprob: -13.382628440856934
    6. '       ' → logprob: -13.507628440856934
    7. ')
' → logprob: -13.632628440856934
    8. '   ' → logprob: -13.757628440856934
    9. ')

' → logprob: -13.882628440856934
    10. '<|end|>' → logprob: -14.382628440856934

Token 835: '       ' (ID: 309)
  Prédit: '       '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '       ' → logprob: -8.061054359131958e-06
    2. '<|end|>' → logprob: -12.875007629394531
    3. '           ' → logprob: -13.625007629394531
    4. ')' → logprob: -13.625007629394531
    5. '   ' → logprob: -13.750007629394531
    6. '
' → logprob: -14.875007629394531
    7. '      ' → logprob: -14.875007629394531
    8. ',' → logprob: -15.250007629394531
    9. '	' → logprob: -15.500007629394531
    10. 'g' → logprob: -15.625007629394531

Token 836: ' g' (ID: 329)
  Prédit: 'g'
  Correct (stricte): False
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'g' (adapté à ' g') → logprob: -0.042095646262168884
    2. '       ' → logprob: -3.66709566116333
    3. ' g' → logprob: -4.16709566116333
    4. '   ' → logprob: -8.792095184326172
    5. '	g' → logprob: -11.792095184326172
    6. '           ' → logprob: -12.917095184326172
    7. ' ' → logprob: -13.042095184326172
    8. '    ' → logprob: -13.667095184326172
    9. '      ' → logprob: -13.792095184326172
    10. '.g' → logprob: -13.792095184326172

Token 837: '1' (ID: 16)
  Prédit: '[idx'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '[idx' → logprob: -0.06622254103422165
    2. '1' → logprob: -2.9412224292755127
    3. '[' → logprob: -5.191222667694092
    4. 'ab' → logprob: -5.691222667694092
    5. 'idx' → logprob: -6.066222667694092
    6. '[index' → logprob: -12.441222190856934
    7. '```' → logprob: -13.566222190856934
    8. ' idx' → logprob: -13.691222190856934
    9. '[a' → logprob: -13.941222190856934
    10. '
' → logprob: -14.066222190856934

Token 838: '[' (ID: 58)
  Prédit: '['
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '[' → logprob: -9.372294698550832e-06
    2. '[idx' → logprob: -12.000009536743164
    3. '][' → logprob: -13.750009536743164
    4. 'ab' → logprob: -13.875009536743164
    5. '```' → logprob: -14.875009536743164
    6. '1' → logprob: -15.500009536743164
    7. ')[' → logprob: -16.875009536743164
    8. '
' → logprob: -17.000009536743164
    9. '[a' → logprob: -17.125009536743164
    10. 'def' → logprob: -17.125009536743164

Token 839: 'ab' (ID: 378)
  Prédit: 'ab'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'ab' → logprob: -5.9153885558771435e-06
    2. 'idx' → logprob: -12.375005722045898
    3. '[' → logprob: -13.500005722045898
    4. '[idx' → logprob: -16.1250057220459
    5. ' ab' → logprob: -16.8750057220459
    6. 'аб' → logprob: -17.0000057220459
    7. '
' → logprob: -17.3750057220459
    8. 'abd' → logprob: -18.1250057220459
    9. '(ab' → logprob: -18.2500057220459
    10. '           ' → logprob: -18.3750057220459

Token 840: '[idx' (ID: 25582)
  Prédit: '[idx'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '[idx' → logprob: -0.12709945440292358
    2. 'idx' → logprob: -2.1270995140075684
    3. 'x' → logprob: -9.62709903717041
    4. ' idx' → logprob: -10.12709903717041
    5. '	idx' → logprob: -10.75209903717041
    6. '_idx' → logprob: -10.87709903717041
    7. 'dx' → logprob: -11.37709903717041
    8. 'IDX' → logprob: -12.62709903717041
    9. '[ix' → logprob: -13.00209903717041
    10. '(idx' → logprob: -13.25209903717041

Token 841: '][' (ID: 2696)
  Prédit: 'idx'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'idx' → logprob: -0.43674299120903015
    2. '[idx' → logprob: -1.9367430210113525
    3. '[' → logprob: -2.0617430210113525
    4. '][' → logprob: -2.5617430210113525
    5. '0' → logprob: -5.561742782592773
    6. ' idx' → logprob: -7.811742782592773
    7. '1' → logprob: -8.061742782592773
    8. ')[' → logprob: -8.311742782592773
    9. '_idx' → logprob: -9.561742782592773
    10. '	idx' → logprob: -9.811742782592773

Token 842: '1' (ID: 16)
  Prédit: '0'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '0' → logprob: -0.20159801840782166
    2. 'idx' → logprob: -1.701598048210144
    3. ' idx' → logprob: -9.451598167419434
    4. '1' → logprob: -10.076598167419434
    5. '[idx' → logprob: -10.701598167419434
    6. '(idx' → logprob: -10.951598167419434
    7. '
' → logprob: -11.826598167419434
    8. 'index' → logprob: -12.326598167419434
    9. ']' → logprob: -12.826598167419434
    10. '	idx' → logprob: -12.951598167419434

Token 843: ']].' (ID: 47690)
  Prédit: '].'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '].' → logprob: -0.0005357555346563458
    2. ')].' → logprob: -7.87553596496582
    3. ').' → logprob: -9.87553596496582
    4. '[' → logprob: -10.37553596496582
    5. ']).' → logprob: -10.37553596496582
    6. ']].' → logprob: -10.50053596496582
    7. ']' → logprob: -11.87553596496582
    8. '][' → logprob: -12.87553596496582
    9. '()].' → logprob: -13.00053596496582
    10. ' ].' → logprob: -13.12553596496582

Token 844: 'append' (ID: 9132)
  Prédit: 'append'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'append' → logprob: -7.226628895296017e-06
    2. '.append' → logprob: -12.250007629394531
    3. 'appen' → logprob: -13.500007629394531
    4. ' append' → logprob: -14.125007629394531
    5. '0' → logprob: -16.12500762939453
    6. '	append' → logprob: -16.25000762939453
    7. '```' → logprob: -17.25000762939453
    8. 'app' → logprob: -17.62500762939453
    9. '1' → logprob: -18.75000762939453
    10. 'Append' → logprob: -18.75000762939453

Token 845: '(ab' (ID: 115191)
  Prédit: '(ab'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(ab' → logprob: -0.0031777136027812958
    2. 'ab' → logprob: -5.753177642822266
    3. ' ab' → logprob: -17.628177642822266
    4. '#ab' → logprob: -17.878177642822266
    5. '_ab' → logprob: -18.878177642822266
    6. '   ' → logprob: -20.253177642822266
    7. ' (' → logprob: -20.378177642822266
    8. 'AB' → logprob: -20.378177642822266
    9. ''ab' → logprob: -20.628177642822266
    10. '(' → logprob: -20.628177642822266

Token 846: '[idx' (ID: 25582)
  Prédit: '[idx'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '[idx' → logprob: -0.11861034482717514
    2. '[' → logprob: -2.243610382080078
    3. 'ab' → logprob: -6.118610382080078
    4. 'idx' → logprob: -6.493610382080078
    5. '(ab' → logprob: -6.743610382080078
    6. '(idx' → logprob: -7.118610382080078
    7. ' idx' → logprob: -10.493610382080078
    8. ' ab' → logprob: -11.243610382080078
    9. '	idx' → logprob: -11.993610382080078
    10. '#ab' → logprob: -12.618610382080078

Token 847: '][' (ID: 2696)
  Prédit: '[idx'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '[idx' → logprob: -0.0014458298683166504
    2. 'idx' → logprob: -6.626445770263672
    3. '[' → logprob: -9.376445770263672
    4. ' idx' → logprob: -11.126445770263672
    5. '(idx' → logprob: -11.126445770263672
    6. '0' → logprob: -13.001445770263672
    7. '_idx' → logprob: -13.251445770263672
    8. '	idx' → logprob: -14.001445770263672
    9. '][' → logprob: -14.876445770263672
    10. '.idx' → logprob: -15.626445770263672

Token 848: '0' (ID: 15)
  Prédit: 'idx'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'idx' → logprob: -0.5771678686141968
    2. 'ab' → logprob: -0.8271678686141968
    3. '0' → logprob: -6.827167987823486
    4. '[idx' → logprob: -8.952167510986328
    5. ' idx' → logprob: -11.577167510986328
    6. '(idx' → logprob: -13.327167510986328
    7. 'abs' → logprob: -13.577167510986328
    8. ' ab' → logprob: -13.952167510986328
    9. '	idx' → logprob: -15.327167510986328
    10. '[' → logprob: -15.577167510986328

Token 849: '])
' (ID: 5169)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ')' → logprob: -0.0014422574313357472
    2. ')
' → logprob: -6.7514424324035645
    3. '])' → logprob: -8.376441955566406
    4. ')]' → logprob: -10.501441955566406
    5. '       ' → logprob: -12.251441955566406
    6. '   ' → logprob: -12.876441955566406
    7. '))' → logprob: -13.376441955566406
    8. ']' → logprob: -13.376441955566406
    9. ')])' → logprob: -13.751441955566406
    10. ' )' → logprob: -14.626441955566406

Token 850: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.1288624107837677
    2. 'dis' → logprob: -2.6288623809814453
    3. 'print' → logprob: -3.2538623809814453
    4. ' dis' → logprob: -6.128862380981445
    5. 'max' → logprob: -6.628862380981445
    6. ' print' → logprob: -6.878862380981445
    7. '```' → logprob: -7.378862380981445
    8. 'u' → logprob: -7.628862380981445
    9. '#' → logprob: -7.628862380981445
    10. 'dist' → logprob: -7.878862380981445

Token 851: ' dis' (ID: 829)
  Prédit: 'dis'
  Correct (stricte): False
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'dis' (adapté à ' dis') → logprob: -0.14509214460849762
    2. 'dist' → logprob: -3.145092248916626
    3. 'd' → logprob: -3.270092248916626
    4. '   ' → logprob: -3.770092248916626
    5. 'du' → logprob: -4.270092010498047
    6. 'def' → logprob: -5.145092010498047
    7. 'dp' → logprob: -6.145092010498047
    8. 'da' → logprob: -6.770092010498047
    9. 'res' → logprob: -6.770092010498047
    10. 'ans' → logprob: -7.020092010498047

Token 852: '1' (ID: 16)
  Prédit: ' ='
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' =' → logprob: -1.0031660795211792
    2. ',' → logprob: -1.1281660795211792
    3. '=' → logprob: -2.3781661987304688
    4. 'g' → logprob: -2.5031661987304688
    5. '(g' → logprob: -2.5031661987304688
    6. '[' → logprob: -4.378166198730469
    7. '[g' → logprob: -4.503166198730469
    8. '1' → logprob: -4.878166198730469
    9. '=g' → logprob: -4.878166198730469
    10. ',g' → logprob: -5.253166198730469

Token 853: ' =' (ID: 314)
  Prédit: ' ='
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' =' → logprob: -0.5761244893074036
    2. '=' → logprob: -0.8261244893074036
    3. '=g' → logprob: -8.82612419128418
    4. '1' → logprob: -10.95112419128418
    5. 'g' → logprob: -11.95112419128418
    6. '=v' → logprob: -13.20112419128418
    7. ',' → logprob: -13.32612419128418
    8. 's' → logprob: -13.70112419128418
    9. '=[' → logprob: -13.70112419128418
    10. ' ' → logprob: -13.82612419128418

Token 854: ' bfs' (ID: 147571)
  Prédit: 'b'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'b' → logprob: -4.5491004129871726e-05
    2. ' bfs' → logprob: -10.000045776367188
    3. '   ' → logprob: -17.500045776367188
    4. '[b' → logprob: -18.125045776367188
    5. 'dfs' → logprob: -18.500045776367188
    6. '(b' → logprob: -19.125045776367188
    7. ' ' → logprob: -19.125045776367188
    8. '  ' → logprob: -20.000045776367188
    9. '	b' → logprob: -20.000045776367188
    10. 'bf' → logprob: -20.125045776367188

Token 855: '(path' (ID: 10993)
  Prédit: '(u'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(u' → logprob: -0.09010104089975357
    2. '(v' → logprob: -2.9651010036468506
    3. '(path' → logprob: -3.7151010036468506
    4. '(' → logprob: -4.84010124206543
    5. '(ans' → logprob: -6.71510124206543
    6. '(s' → logprob: -6.96510124206543
    7. 'u' → logprob: -8.96510124206543
    8. 'path' → logprob: -10.34010124206543
    9. '(n' → logprob: -12.46510124206543
    10. '(
' → logprob: -12.84010124206543

Token 856: '[' (ID: 58)
  Prédit: '['
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '[' → logprob: -0.030045166611671448
    2. '0' → logprob: -4.405045032501221
    3. '[u' → logprob: -5.405045032501221
    4. '[-' → logprob: -5.530045032501221
    5. '(ans' → logprob: -5.780045032501221
    6. 'ans' → logprob: -5.905045032501221
    7. '[v' → logprob: -6.030045032501221
    8. '(' → logprob: -8.280045509338379
    9. '1' → logprob: -8.780045509338379
    10. 'v' → logprob: -9.030045509338379

Token 857: 'ans' (ID: 616)
  Prédit: '0'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '0' → logprob: -0.10451017320156097
    2. 'u' → logprob: -2.7295100688934326
    3. 'ans' → logprob: -3.8545100688934326
    4. 'v' → logprob: -4.479510307312012
    5. '-' → logprob: -6.979510307312012
    6. '1' → logprob: -8.229510307312012
    7. '   ' → logprob: -10.104510307312012
    8. '(ans' → logprob: -10.104510307312012
    9. '(' → logprob: -10.354510307312012
    10. ' ans' → logprob: -10.479510307312012

Token 858: '],' (ID: 2155)
  Prédit: '+'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '+' → logprob: -0.21062374114990234
    2. '[' → logprob: -1.8356237411499023
    3. ',' → logprob: -4.710623741149902
    4. '1' → logprob: -4.835623741149902
    5. '[-' → logprob: -4.835623741149902
    6. ' +' → logprob: -5.960623741149902
    7. '-' → logprob: -6.835623741149902
    8. 'ans' → logprob: -7.585623741149902
    9. '],' → logprob: -8.085623741149902
    10. '(ans' → logprob: -8.335623741149902

Token 859: ' n' (ID: 297)
  Prédit: 'n'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'n' → logprob: -7.982165698194876e-05
    2. ' n' → logprob: -9.500080108642578
    3. '   ' → logprob: -13.250080108642578
    4. 'len' → logprob: -13.625080108642578
    5. '0' → logprob: -13.875080108642578
    6. 'v' → logprob: -14.625080108642578
    7. 'u' → logprob: -15.250080108642578
    8. 'path' → logprob: -15.750080108642578
    9. '	n' → logprob: -17.125080108642578
    10. '
' → logprob: -17.375080108642578

Token 860: ',' (ID: 11)
  Prédit: ','
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ',' → logprob: -6.12258882028982e-05
    2. ' ,' → logprob: -10.50006103515625
    3. ',g' → logprob: -10.62506103515625
    4. 'g' → logprob: -11.87506103515625
    5. ',
' → logprob: -14.00006103515625
    6. ' g' → logprob: -14.50006103515625
    7. '   ' → logprob: -14.75006103515625
    8. ')' → logprob: -14.87506103515625
    9. '```' → logprob: -16.37506103515625
    10. '),' → logprob: -16.75006103515625

Token 861: ' g' (ID: 329)
  Prédit: 'g'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'g' → logprob: -8.494741632603109e-05
    2. ' g' → logprob: -9.37508487701416
    3. '   ' → logprob: -16.750085830688477
    4. '	g' → logprob: -19.000085830688477
    5. ')' → logprob: -19.625085830688477
    6. '_g' → logprob: -20.625085830688477
    7. '```' → logprob: -20.750085830688477
    8. '[g' → logprob: -21.000085830688477
    9. '#g' → logprob: -21.000085830688477
    10. '(g' → logprob: -21.125085830688477

Token 862: '1' (ID: 16)
  Prédit: '1'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '1' → logprob: -0.0036981776356697083
    2. 'g' → logprob: -6.128698348999023
    3. ')' → logprob: -6.503698348999023
    4. ' g' → logprob: -11.628698348999023
    5. ')
' → logprob: -13.253698348999023
    6. '[' → logprob: -13.253698348999023
    7. '   ' → logprob: -14.878698348999023
    8. 's' → logprob: -15.128698348999023
    9. '```' → logprob: -15.878698348999023
    10. 'f' → logprob: -16.378698348999023

Token 863: ')
' (ID: 446)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')' → logprob: -0.014177384786307812
    2. ')
' → logprob: -4.264177322387695
    3. '   ' → logprob: -11.389177322387695
    4. ')
' → logprob: -13.389177322387695
    5. ' )' → logprob: -14.889177322387695
    6. ')

' → logprob: -15.264177322387695
    7. ')`' → logprob: -16.014177322387695
    8. ')[' → logprob: -16.764177322387695
    9. ')`
' → logprob: -16.889177322387695
    10. ')return' → logprob: -17.139177322387695

Token 864: '   ' (ID: 271)
  Prédit: 'print'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'print' → logprob: -0.0005212200339883566
    2. '   ' → logprob: -7.625521183013916
    3. 'res' → logprob: -11.750521659851074
    4. ' print' → logprob: -11.750521659851074
    5. 'result' → logprob: -12.000521659851074
    6. 'answer' → logprob: -12.500521659851074
    7. 'ans' → logprob: -12.625521659851074
    8. '```' → logprob: -13.875521659851074
    9. '#print' → logprob: -13.875521659851074
    10. 'max' → logprob: -14.625521659851074

Token 865: ' x' (ID: 1215)
  Prédit: 'print'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'print' → logprob: -4.930552313453518e-05
    2. 'res' → logprob: -10.500049591064453
    3. 'max' → logprob: -11.750049591064453
    4. 'result' → logprob: -11.875049591064453
    5. 'answer' → logprob: -12.750049591064453
    6. 'ans' → logprob: -13.625049591064453
    7. 'for' → logprob: -14.625049591064453
    8. ' print' → logprob: -14.750049591064453
    9. 'mx' → logprob: -15.125049591064453
    10. '#print' → logprob: -15.125049591064453

Token 866: ' =' (ID: 314)
  Prédit: ' ='
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' =' → logprob: -0.11341454833745956
    2. '=' → logprob: -2.2384145259857178
    3. '=max' → logprob: -7.988414764404297
    4. 'max' → logprob: -9.363414764404297
    5. ',' → logprob: -9.738414764404297
    6. 'x' → logprob: -10.113414764404297
    7. 'ans' → logprob: -10.863414764404297
    8. 'ns' → logprob: -11.988414764404297
    9. '1' → logprob: -11.988414764404297
    10. '   ' → logprob: -12.113414764404297

Token 867: ' ans' (ID: 3345)
  Prédit: 'max'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'max' → logprob: -0.05022849887609482
    2. 'dis' → logprob: -3.1752285957336426
    3. ' max' → logprob: -5.050228595733643
    4. '(max' → logprob: -7.800228595733643
    5. ' dis' → logprob: -8.925228118896484
    6. '0' → logprob: -9.550228118896484
    7. 'ans' → logprob: -9.800228118896484
    8. '(dis' → logprob: -10.300228118896484
    9. 'next' → logprob: -10.925228118896484
    10. 'path' → logprob: -11.050228118896484

Token 868: ' +' (ID: 659)
  Prédit: '+'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '+' → logprob: -0.2802174985408783
    2. ' +' → logprob: -1.5302175283432007
    3. '<|end|>' → logprob: -4.15521764755249
    4. '
' → logprob: -5.28021764755249
    5. '-' → logprob: -6.65521764755249
    6. ' -' → logprob: -6.78021764755249
    7. '   ' → logprob: -6.90521764755249
    8. '<|end|>' → logprob: -7.03021764755249
    9. ',' → logprob: -7.15521764755249
    10. ' =' → logprob: -7.53021764755249

Token 869: ' max' (ID: 2999)
  Prédit: '1'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '1' → logprob: -0.053117770701646805
    2. 'dis' → logprob: -3.5531177520751953
    3. '(dis' → logprob: -4.178117752075195
    4. ' ' → logprob: -5.553117752075195
    5. ' dis' → logprob: -5.803117752075195
    6. '2' → logprob: -8.553117752075195
    7. '(' → logprob: -8.553117752075195
    8. '0' → logprob: -9.303117752075195
    9. 'max' → logprob: -9.678117752075195
    10. ' (' → logprob: -9.678117752075195

Token 870: '(it' (ID: 29445)
  Prédit: '(dis'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '(dis' → logprob: -0.002618943341076374
    2. '((' → logprob: -6.627618789672852
    3. '(' → logprob: -7.002618789672852
    4. '([' → logprob: -8.127618789672852
    5. '(range' → logprob: -10.377618789672852
    6. '(d' → logprob: -10.627618789672852
    7. 'dis' → logprob: -11.502618789672852
    8. '(i' → logprob: -11.627618789672852
    9. '([(' → logprob: -13.002618789672852
    10. '(dist' → logprob: -13.127618789672852

Token 871: 'ertools' (ID: 88385)
  Prédit: '(dis'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '(dis' → logprob: -0.7358798384666443
    2. '(range' → logprob: -1.235879898071289
    3. 'dis' → logprob: -2.235879898071289
    4. 'range' → logprob: -3.610879898071289
    5. '([' → logprob: -3.610879898071289
    6. '(path' → logprob: -3.735879898071289
    7. '[' → logprob: -4.610879898071289
    8. '((' → logprob: -4.860879898071289
    9. '(' → logprob: -5.485879898071289
    10. 'path' → logprob: -5.735879898071289

Token 872: '.acc' (ID: 70239)
  Prédit: '(range'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(range' → logprob: -0.5547869801521301
    2. '(st' → logprob: -1.9297869205474854
    3. '(chain' → logprob: -1.9297869205474854
    4. '.st' → logprob: -3.0547869205474854
    5. '.chain' → logprob: -3.5547869205474854
    6. '(it' → logprob: -3.8047869205474854
    7. '(acc' → logprob: -5.3047871589660645
    8. '((' → logprob: -5.5547871589660645
    9. '.drop' → logprob: -5.6797871589660645
    10. '.acc' → logprob: -5.8047871589660645

Token 873: 'umulate' (ID: 134636)
  Prédit: 'er'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'er' → logprob: -0.712742269039154
    2. 'umulate' → logprob: -1.5877423286437988
    3. 'om' → logprob: -1.9627423286437988
    4. 'ertools' → logprob: -2.587742328643799
    5. 'imate' → logprob: -3.712742328643799
    6. 'emplate' → logprob: -5.337742328643799
    7. 'or' → logprob: -5.337742328643799
    8. 'erm' → logprob: -5.337742328643799
    9. 'ort' → logprob: -5.837742328643799
    10. 'ex' → logprob: -5.962742328643799

Token 874: '(dis' (ID: 26948)
  Prédit: '(dis'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(dis' → logprob: -0.01905994489789009
    2. '((' → logprob: -4.269060134887695
    3. '([' → logprob: -5.894060134887695
    4. '(range' → logprob: -7.019060134887695
    5. '(' → logprob: -7.269060134887695
    6. '(map' → logprob: -7.894060134887695
    7. '(it' → logprob: -10.144060134887695
    8. 'dis' → logprob: -10.144060134887695
    9. '((-' → logprob: -10.644060134887695
    10. '(filter' → logprob: -11.394060134887695

Token 875: '1' (ID: 16)
  Prédit: '1'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '1' → logprob: -3.869639476761222e-05
    2. 'dis' → logprob: -10.875039100646973
    3. '(dis' → logprob: -11.250039100646973
    4. '([' → logprob: -13.000039100646973
    5. '[' → logprob: -13.500039100646973
    6. '(x' → logprob: -14.125039100646973
    7. '(' → logprob: -14.625039100646973
    8. '
' → logprob: -14.750039100646973
    9. '[x' → logprob: -15.500039100646973
    10. ')' → logprob: -15.500039100646973

Token 876: ',' (ID: 11)
  Prédit: '(range'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(range' → logprob: -0.9195358753204346
    2. ')' → logprob: -1.0445358753204346
    3. '(path' → logprob: -2.0445358753204346
    4. '(dis' → logprob: -2.5445358753204346
    5. '([' → logprob: -3.5445358753204346
    6. ',' → logprob: -5.9195356369018555
    7. '(' → logprob: -6.2945356369018555
    8. 'dis' → logprob: -6.2945356369018555
    9. '(lambda' → logprob: -6.6695356369018555
    10. '[' → logprob: -6.7945356369018555

Token 877: ' lambda' (ID: 27871)
  Prédit: 'lambda'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'lambda' → logprob: -0.0650181844830513
    2. '(lambda' → logprob: -3.0650181770324707
    3. '[' → logprob: -4.940018177032471
    4. 'range' → logprob: -5.440018177032471
    5. 'operator' → logprob: -6.690018177032471
    6. ')' → logprob: -7.565018177032471
    7. '[]' → logprob: -7.690018177032471
    8. '0' → logprob: -7.940018177032471
    9. '(' → logprob: -8.190018653869629
    10. '1' → logprob: -8.315018653869629

Token 878: ' a' (ID: 261)
  Prédit: 'a'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'a' → logprob: -0.13439711928367615
    2. 'acc' → logprob: -2.259397029876709
    3. 'x' → logprob: -4.759397029876709
    4. 'ac' → logprob: -5.009397029876709
    5. ' acc' → logprob: -5.259397029876709
    6. ' a' → logprob: -7.259397029876709
    7. ' x' → logprob: -10.759397506713867
    8. 's' → logprob: -10.759397506713867
    9. 'c' → logprob: -11.134397506713867
    10. 'p' → logprob: -11.259397506713867

Token 879: ',' (ID: 11)
  Prédit: ','
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ',' → logprob: -0.13324841856956482
    2. ',x' → logprob: -2.1332483291625977
    3. ',b' → logprob: -5.133248329162598
    4. ',a' → logprob: -8.633248329162598
    5. ',c' → logprob: -9.258248329162598
    6. ' ,' → logprob: -9.383248329162598
    7. 'x' → logprob: -11.383248329162598
    8. ',i' → logprob: -12.008248329162598
    9. ',s' → logprob: -12.383248329162598
    10. ',v' → logprob: -12.508248329162598

Token 880: ' b' (ID: 287)
  Prédit: 'b'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'b' → logprob: -2.15310683415737e-05
    2. ' b' → logprob: -10.875021934509277
    3. 'x' → logprob: -13.000021934509277
    4. 'y' → logprob: -16.50002098083496
    5. 'v' → logprob: -16.87502098083496
    6. '   ' → logprob: -17.75002098083496
    7. 'c' → logprob: -18.37502098083496
    8. 'e' → logprob: -18.50002098083496
    9. ' ' → logprob: -19.12502098083496
    10. 'z' → logprob: -19.87502098083496

Token 881: ':' (ID: 25)
  Prédit: ','
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ',' → logprob: -0.06582549214363098
    2. ':' → logprob: -3.5658254623413086
    3. ',a' → logprob: -4.065825462341309
    4. 'lambda' → logprob: -5.065825462341309
    5. ',b' → logprob: -5.315825462341309
    6. ',max' → logprob: -5.440825462341309
    7. 'a' → logprob: -7.315825462341309
    8. ' :' → logprob: -7.690825462341309
    9. ',x' → logprob: -7.815825462341309
    10. '(lambda' → logprob: -8.190825462341309

Token 882: ' b' (ID: 287)
  Prédit: 'a'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'a' → logprob: -0.47745266556739807
    2. 'max' → logprob: -0.9774526357650757
    3. ' max' → logprob: -5.852452754974365
    4. ' a' → logprob: -7.977452754974365
    5. '(max' → logprob: -9.602452278137207
    6. '   ' → logprob: -10.227452278137207
    7. '	max' → logprob: -11.477452278137207
    8. 'min' → logprob: -11.602452278137207
    9. ' ' → logprob: -12.102452278137207
    10. '[max' → logprob: -12.352452278137207

Token 883: ' if' (ID: 538)
  Prédit: ','
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ',' → logprob: -0.4276387393474579
    2. ':' → logprob: -1.3026387691497803
    3. ' if' → logprob: -3.4276387691497803
    4. 'if' → logprob: -3.8026387691497803
    5. ',a' → logprob: -4.302638530731201
    6. ' :' → logprob: -5.802638530731201
    7. 'a' → logprob: -6.177638530731201
    8. ',b' → logprob: -6.927638530731201
    9. ',max' → logprob: -7.802638530731201
    10. ',x' → logprob: -8.05263900756836

Token 884: ' b' (ID: 287)
  Prédit: 'b'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'b' → logprob: -0.39053475856781006
    2. 'a' → logprob: -1.14053475856781
    3. ' b' → logprob: -6.1405348777771
    4. ' a' → logprob: -6.5155348777771
    5. '(a' → logprob: -12.140534400939941
    6. ' ' → logprob: -12.140534400939941
    7. '   ' → logprob: -12.265534400939941
    8. '(b' → logprob: -13.140534400939941
    9. '  ' → logprob: -13.265534400939941
    10. '	b' → logprob: -13.765534400939941

Token 885: ' >' (ID: 1424)
  Prédit: '>'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '>' → logprob: -0.023204127326607704
    2. ' >' → logprob: -4.148204326629639
    3. '>a' → logprob: -5.023204326629639
    4. '>x' → logprob: -8.02320384979248
    5. '>b' → logprob: -8.39820384979248
    6. ' ' → logprob: -13.14820384979248
    7. 'else' → logprob: -13.52320384979248
    8. '>
' → logprob: -14.14820384979248
    9. 'a' → logprob: -14.39820384979248
    10. ' else' → logprob: -14.77320384979248

Token 886: ' a' (ID: 261)
  Prédit: 'a'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'a' → logprob: -9.65101717156358e-05
    2. ' a' → logprob: -9.250096321105957
    3. '   ' → logprob: -15.250096321105957
    4. 'b' → logprob: -15.875096321105957
    5. ' ' → logprob: -18.000097274780273
    6. '  ' → logprob: -18.000097274780273
    7. '	a' → logprob: -18.375097274780273
    8. '>a' → logprob: -19.750097274780273
    9. '    ' → logprob: -19.875097274780273
    10. '```' → logprob: -20.000097274780273

Token 887: ' else' (ID: 1203)
  Prédit: ' else'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' else' → logprob: -0.138864666223526
    2. ',' → logprob: -2.138864755630493
    3. 'else' → logprob: -5.263864517211914
    4. 'b' → logprob: -6.013864517211914
    5. ',b' → logprob: -6.013864517211914
    6. ' b' → logprob: -6.513864517211914
    7. ' ,' → logprob: -9.138864517211914
    8. ' a' → logprob: -9.763864517211914
    9. '   ' → logprob: -10.138864517211914
    10. ' ' → logprob: -10.513864517211914

Token 888: ' a' (ID: 261)
  Prédit: 'a'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'a' → logprob: -0.00023178798437584192
    2. ' a' → logprob: -8.375231742858887
    3. '   ' → logprob: -14.125231742858887
    4. '  ' → logprob: -15.125231742858887
    5. ' ' → logprob: -15.875231742858887
    6. 'b' → logprob: -16.750232696533203
    7. '    ' → logprob: -16.875232696533203
    8. '	a' → logprob: -17.000232696533203
    9. ' ' → logprob: -17.750232696533203
    10. '     ' → logprob: -19.000232696533203

Token 889: '))
' (ID: 2210)
  Prédit: ','
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ',' → logprob: -0.01719260774552822
    2. '))' → logprob: -4.767192840576172
    3. ',x' → logprob: -5.142192840576172
    4. ' ,' → logprob: -6.267192840576172
    5. ',b' → logprob: -7.892192840576172
    6. ')))' → logprob: -8.767192840576172
    7. ')' → logprob: -8.892192840576172
    8. ',a' → logprob: -10.017192840576172
    9. ' else' → logprob: -11.767192840576172
    10. ',
' → logprob: -11.892192840576172

Token 890: '   ' (ID: 271)
  Prédit: ''
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False

Token 891: ' #' (ID: 1069)
  Prédit: 'print'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'print' → logprob: -0.3495786190032959
    2. '   ' → logprob: -1.224578619003296
    3. ' print' → logprob: -7.974578857421875
    4. '<|end|>' → logprob: -8.099578857421875
    5. '
' → logprob: -8.349578857421875
    6. ')' → logprob: -9.599578857421875
    7. '	print' → logprob: -9.724578857421875
    8. '#' (adapté à ' #') → logprob: -10.349578857421875
    9. '```' → logprob: -10.474578857421875
    10. '    
' → logprob: -10.974578857421875

Token 892: ' Ter' (ID: 14343)
  Prédit: 'print'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'print' → logprob: -0.0008538239635527134
    2. ' print' → logprob: -7.500854015350342
    3. '   ' → logprob: -8.125853538513184
    4. '```' → logprob: -12.500853538513184
    5. '	print' → logprob: -14.750853538513184
    6. 'return' → logprob: -15.250853538513184
    7. 'x' → logprob: -15.750853538513184
    8. '#print' → logprob: -15.750853538513184
    9. '
' → logprob: -16.0008544921875
    10. ')' → logprob: -16.7508544921875

Token 893: 'naire' (ID: 30464)
  Prédit: 'min'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'min' → logprob: -0.049674633890390396
    2. 'm' → logprob: -4.1746745109558105
    3. 'mine' → logprob: -4.1746745109558105
    4. 'main' → logprob: -4.4246745109558105
    5. 'mina' → logprob: -6.6746745109558105
    6. '```' → logprob: -6.9246745109558105
    7. 'miner' → logprob: -7.4246745109558105
    8. 'naire' → logprob: -7.7996745109558105
    9. 'me' → logprob: -7.7996745109558105
    10. '#' → logprob: -8.049674987792969

Token 894: ' double' (ID: 3503)
  Prédit: 'print'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'print' → logprob: -0.6393563747406006
    2. '   ' → logprob: -1.1393563747406006
    3. 'if' → logprob: -2.5143563747406006
    4. ' if' → logprob: -3.0143563747406006
    5. ' print' → logprob: -4.88935661315918
    6. 'return' → logprob: -5.38935661315918
    7. 'x' → logprob: -5.88935661315918
    8. ' =' → logprob: -6.38935661315918
    9. '=' → logprob: -6.76435661315918
    10. ' and' → logprob: -7.26435661315918

Token 895: 'ment' (ID: 508)
  Prédit: ' if'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' if' → logprob: -0.8378372192382812
    2. 'print' → logprob: -1.5878372192382812
    3. 'x' → logprob: -1.8378372192382812
    4. 'if' → logprob: -2.4628372192382812
    5. 'return' → logprob: -3.5878372192382812
    6. ' x' → logprob: -4.212837219238281
    7. ' =' → logprob: -4.212837219238281
    8. ' print' → logprob: -4.462837219238281
    9. ' ans' → logprob: -4.462837219238281
    10. ' return' → logprob: -4.587837219238281

Token 896: ' inutile' (ID: 157748)
  Prédit: 'print'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'print' → logprob: -1.2909098863601685
    2. '   ' → logprob: -1.5409098863601685
    3. 'x' → logprob: -1.9159098863601685
    4. ' =' → logprob: -2.165909767150879
    5. 'return' → logprob: -3.040909767150879
    6. ' if' → logprob: -3.165909767150879
    7. 'if' → logprob: -3.415909767150879
    8. '=' → logprob: -3.415909767150879
    9. ':' → logprob: -3.915909767150879
    10. ' x' → logprob: -4.415909767150879

Token 897: '
' (ID: 198)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.11307241767644882
    2. 'print' → logprob: -2.363072395324707
    3. 'return' → logprob: -4.863072395324707
    4. ' print' → logprob: -6.238072395324707
    5. 'if' → logprob: -6.738072395324707
    6. ' if' → logprob: -6.738072395324707
    7. ' return' → logprob: -8.238072395324707
    8. 'x' → logprob: -8.988072395324707
    9. '```' → logprob: -9.238072395324707
    10. 'result' → logprob: -9.988072395324707

Token 898: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.10398700833320618
    2. 'print' → logprob: -2.353986978530884
    3. 'return' → logprob: -5.853987216949463
    4. 'if' → logprob: -7.978987216949463
    5. ' print' → logprob: -8.103986740112305
    6. 'x' → logprob: -8.978986740112305
    7. ' if' → logprob: -9.728986740112305
    8. ' return' → logprob: -10.603986740112305
    9. 'result' → logprob: -10.853986740112305
    10. '```' → logprob: -12.228986740112305

Token 899: ' x' (ID: 1215)
  Prédit: 'print'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'print' → logprob: -6.015305552864447e-05
    2. 'x' (adapté à ' x') → logprob: -10.625060081481934
    3. ' print' → logprob: -11.125060081481934
    4. '   ' → logprob: -11.750060081481934
    5. 'return' → logprob: -12.000060081481934
    6. 'if' → logprob: -12.625060081481934
    7. 'result' → logprob: -13.000060081481934
    8. 'y' → logprob: -14.750060081481934
    9. 'ans' → logprob: -15.125060081481934
    10. 'res' → logprob: -15.375060081481934

Token 900: ' +=' (ID: 2757)
  Prédit: '='
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '=' → logprob: -0.3891972005367279
    2. ' =' → logprob: -1.1391972303390503
    3. '+=' → logprob: -6.51419734954834
    4. ' if' → logprob: -8.01419734954834
    5. 'if' → logprob: -8.13919734954834
    6. ' +=' → logprob: -9.01419734954834
    7. '=x' → logprob: -9.76419734954834
    8. '-=' → logprob: -11.38919734954834
    9. '+' → logprob: -11.51419734954834
    10. ',' → logprob: -12.38919734954834

Token 901: ' ' (ID: 220)
  Prédit: '1'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '1' → logprob: -0.33794674277305603
    2. '0' → logprob: -1.7129467725753784
    3. ' ' → logprob: -2.712946653366089
    4. '(' → logprob: -4.837946891784668
    5. 'ans' → logprob: -5.212946891784668
    6. '(ans' → logprob: -5.462946891784668
    7. ' (' → logprob: -5.837946891784668
    8. 'x' → logprob: -6.212946891784668
    9. '(n' → logprob: -6.587946891784668
    10. '-' → logprob: -6.587946891784668

Token 902: '1' (ID: 16)
  Prédit: '1'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '1' → logprob: -0.09265345335006714
    2. '0' → logprob: -2.842653512954712
    3. 'dis' → logprob: -5.092653274536133
    4. 'ans' → logprob: -5.217653274536133
    5. 'x' → logprob: -5.842653274536133
    6. '(' → logprob: -5.842653274536133
    7. '(dis' → logprob: -6.342653274536133
    8. '(ans' → logprob: -6.342653274536133
    9. 'mod' → logprob: -6.467653274536133
    10. '(x' → logprob: -6.842653274536133

Token 903: ' if' (ID: 538)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.27612143754959106
    2. 'print' → logprob: -1.5261213779449463
    3. '
' → logprob: -3.7761213779449463
    4. 'if' → logprob: -7.776121616363525
    5. ' print' → logprob: -8.026121139526367
    6. '<|end|>' → logprob: -9.651121139526367
    7. '    
' → logprob: -9.901121139526367
    8. '```' → logprob: -10.151121139526367
    9. ' if' → logprob: -10.776121139526367
    10. 'x' → logprob: -11.276121139526367

Token 904: ' len' (ID: 4631)
  Prédit: 'x'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'x' → logprob: -0.45792633295059204
    2. 'dis' → logprob: -1.8329262733459473
    3. 'u' → logprob: -2.4579262733459473
    4. 'ans' → logprob: -2.9579262733459473
    5. 'path' → logprob: -3.9579262733459473
    6. 'v' → logprob: -4.082926273345947
    7. ' x' → logprob: -4.832926273345947
    8. ' dis' → logprob: -5.082926273345947
    9. '(x' → logprob: -5.832926273345947
    10. 'n' → logprob: -6.082926273345947

Token 905: '(path' (ID: 10993)
  Prédit: '(path'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(path' → logprob: -0.0008151084766723216
    2. '(g' → logprob: -8.125815391540527
    3. '(ab' → logprob: -8.125815391540527
    4. '(dis' → logprob: -8.625815391540527
    5. 'path' → logprob: -10.875815391540527
    6. '(' → logprob: -12.250815391540527
    7. '(set' → logprob: -12.250815391540527
    8. '(x' → logprob: -12.375815391540527
    9. '(ans' → logprob: -13.500815391540527
    10. '(str' → logprob: -13.875815391540527

Token 906: ')' (ID: 8)
  Prédit: ')'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')' → logprob: -0.22491447627544403
    2. '>' → logprob: -2.09991455078125
    3. ')>' → logprob: -2.59991455078125
    4. ' >' → logprob: -5.84991455078125
    5. '//' → logprob: -7.09991455078125
    6. ' )' → logprob: -8.22491455078125
    7. '()>' → logprob: -8.47491455078125
    8. ')//' → logprob: -9.34991455078125
    9. '()' → logprob: -9.72491455078125
    10. '   ' → logprob: -9.84991455078125

Token 907: ' %' (ID: 1851)
  Prédit: '>'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '>' → logprob: -0.048504918813705444
    2. ' >' → logprob: -3.1735048294067383
    3. '//' → logprob: -6.298504829406738
    4. '()>' → logprob: -7.173504829406738
    5. '==' → logprob: -7.798504829406738
    6. ')' → logprob: -7.798504829406738
    7. '()' → logprob: -7.923504829406738
    8. '<=' → logprob: -8.048504829406738
    9. ' ' → logprob: -8.548504829406738
    10. '[' → logprob: -8.798504829406738

Token 908: ' ' (ID: 220)
  Prédit: '2'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '2' → logprob: -0.016040585935115814
    2. ' ' → logprob: -4.141040802001953
    3. '3' → logprob: -13.641040802001953
    4. '>' → logprob: -14.016040802001953
    5. '  ' → logprob: -14.141040802001953
    6. '==' → logprob: -14.266040802001953
    7. '```' → logprob: -14.453540802001953
    8. '4' → logprob: -14.766040802001953
    9. '   ' → logprob: -14.828540802001953
    10. '(' → logprob: -14.891040802001953

Token 909: '2' (ID: 17)
  Prédit: '2'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '2' → logprob: -6.742448022123426e-05
    2. ' ' → logprob: -9.625067710876465
    3. '   ' → logprob: -15.000067710876465
    4. '3' → logprob: -15.250067710876465
    5. '```' → logprob: -15.250067710876465
    6. '>' → logprob: -15.937567710876465
    7. '  ' → logprob: -16.12506675720215
    8. '4' → logprob: -16.43756675720215
    9. '==' → logprob: -17.00006675720215
    10. '
' → logprob: -17.06256675720215

Token 910: ' ==' (ID: 951)
  Prédit: '=='
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '==' → logprob: -0.19331547617912292
    2. 'else' → logprob: -2.3183155059814453
    3. ' else' → logprob: -3.1933155059814453
    4. '!=' → logprob: -3.5683155059814453
    5. '0' → logprob: -5.568315505981445
    6. ' ==' → logprob: -5.568315505981445
    7. ' !=' → logprob: -8.193315505981445
    8. '()==' → logprob: -9.693315505981445
    9. '1' → logprob: -9.943315505981445
    10. '2' → logprob: -10.443315505981445

Token 911: ' ' (ID: 220)
  Prédit: '0'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '0' → logprob: -0.02978428266942501
    2. '1' → logprob: -3.5297842025756836
    3. ' ' → logprob: -10.529784202575684
    4. '2' → logprob: -12.029784202575684
    5. '
' → logprob: -15.217284202575684
    6. '```' → logprob: -15.217284202575684
    7. '==' → logprob: -16.15478515625
    8. '3' → logprob: -16.21728515625
    9. '

' → logprob: -16.46728515625
    10. '=' → logprob: -16.71728515625

Token 912: '1' (ID: 16)
  Prédit: '0'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '0' → logprob: -0.0067208209075033665
    2. '1' → logprob: -5.006721019744873
    3. '2' → logprob: -12.256720542907715
    4. ' ' → logprob: -14.131720542907715
    5. '```' → logprob: -17.38172149658203
    6. '3' → logprob: -18.31922149658203
    7. '０' → logprob: -18.56922149658203
    8. '==' → logprob: -18.81922149658203
    9. '
' → logprob: -19.13172149658203
    10. '=' → logprob: -19.19422149658203

Token 913: ' else' (ID: 1203)
  Prédit: ' else'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' else' → logprob: -0.029751179739832878
    2. 'else' → logprob: -3.5297510623931885
    3. ' ' → logprob: -15.27975082397461
    4. '	else' → logprob: -15.27975082397461
    5. '0' → logprob: -16.40475082397461
    6. '+' → logprob: -16.40475082397461
    7. ' ' → logprob: -17.40475082397461
    8. '   ' → logprob: -18.15475082397461
    9. '-' → logprob: -18.15475082397461
    10. '_else' → logprob: -18.90475082397461

Token 914: ' ' (ID: 220)
  Prédit: '0'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '0' → logprob: -0.009697424247860909
    2. '1' → logprob: -5.009697437286377
    3. ' ' → logprob: -5.884697437286377
    4. '-' → logprob: -9.134696960449219
    5. '2' → logprob: -9.634696960449219
    6. 'x' → logprob: -12.134696960449219
    7. '   ' → logprob: -12.259696960449219
    8. ' -' → logprob: -12.259696960449219
    9. '+' → logprob: -13.009696960449219
    10. '(' → logprob: -14.634696960449219

Token 915: '0' (ID: 15)
  Prédit: '0'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '0' → logprob: -0.00046379686682485044
    2. '1' → logprob: -8.000463485717773
    3. ' ' → logprob: -9.750463485717773
    4. '-' → logprob: -9.875463485717773
    5. '2' → logprob: -11.000463485717773
    6. 'x' → logprob: -14.375463485717773
    7. '   ' → logprob: -14.750463485717773
    8. ' -' → logprob: -14.750463485717773
    9. '+' → logprob: -16.062963485717773
    10. '
' → logprob: -16.625463485717773

Token 916: '
' (ID: 198)
  Prédit: 'print'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'print' → logprob: -0.700381875038147
    2. '   ' → logprob: -1.450381875038147
    3. '<|end|>' → logprob: -1.950381875038147
    4. 'if' → logprob: -2.3253817558288574
    5. 'return' → logprob: -4.200381755828857
    6. '
' → logprob: -5.325381755828857
    7. '```' → logprob: -5.325381755828857
    8. '#' → logprob: -7.075381755828857
    9. 'x' → logprob: -7.075381755828857
    10. ' if' → logprob: -7.450381755828857

Token 917: '   ' (ID: 271)
  Prédit: 'print'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'print' → logprob: -0.007020479999482632
    2. '   ' → logprob: -5.257020473480225
    3. 'return' → logprob: -6.757020473480225
    4. '<|end|>' → logprob: -8.132020950317383
    5. ' print' → logprob: -8.507020950317383
    6. '```' → logprob: -9.882020950317383
    7. 'def' → logprob: -10.632020950317383
    8. '
' → logprob: -11.257020950317383
    9. 'if' → logprob: -11.382020950317383
    10. '#' → logprob: -11.757020950317383

Token 918: ' print' (ID: 2123)
  Prédit: 'print'
  Correct (stricte): False
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'print' (adapté à ' print') → logprob: -0.003978785593062639
    2. 'if' → logprob: -6.128978729248047
    3. '   ' → logprob: -6.378978729248047
    4. 'return' → logprob: -10.253978729248047
    5. ' print' → logprob: -10.503978729248047
    6. '```' → logprob: -11.128978729248047
    7. '<|end|>' → logprob: -12.128978729248047
    8. '#' → logprob: -12.628978729248047
    9. 'def' → logprob: -12.878978729248047
    10. 'x' → logprob: -13.253978729248047

Token 919: '(x' (ID: 4061)
  Prédit: '(x'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(x' → logprob: -7.703443770878948e-06
    2. '(' → logprob: -12.000007629394531
    3. '(max' → logprob: -14.625007629394531
    4. 'x' → logprob: -14.875007629394531
    5. '(f' → logprob: -15.000007629394531
    6. '((' → logprob: -16.00000762939453
    7. '(min' → logprob: -16.75000762939453
    8. '(len' → logprob: -17.62500762939453
    9. ' (' → logprob: -17.62500762939453
    10. '(n' → logprob: -18.12500762939453

Token 920: ')

' (ID: 1029)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ')' → logprob: -1.5690089639974758e-05
    2. ')
' → logprob: -11.375015258789062
    3. ' )' → logprob: -13.000015258789062
    4. '())' → logprob: -14.000015258789062
    5. '()' → logprob: -14.625015258789062
    6. '))' → logprob: -15.750015258789062
    7. ')`' → logprob: -16.125015258789062
    8. '+' → logprob: -16.375015258789062
    9. '   ' → logprob: -16.625015258789062
    10. ')}' → logprob: -16.750015258789062

Token 921: 'if' (ID: 366)
  Prédit: 'if'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'if' → logprob: -0.0009349246975034475
    2. 'main' → logprob: -7.000935077667236
    3. '#' → logprob: -11.375934600830078
    4. ' if' → logprob: -12.375934600830078
    5. '```' → logprob: -12.375934600830078
    6. '
' → logprob: -13.125934600830078
    7. '<|end|>' → logprob: -15.000934600830078
    8. 'x' → logprob: -15.500934600830078
    9. '(main' → logprob: -16.125934600830078
    10. '#if' → logprob: -16.125934600830078

Token 922: ' __' (ID: 2516)
  Prédit: ' __'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' __' → logprob: -0.023303015157580376
    2. '__' → logprob: -3.7733030319213867
    3. '_' → logprob: -10.273303031921387
    4. '_name' → logprob: -11.773303031921387
    5. 'name' → logprob: -11.898303031921387
    6. '___' → logprob: -12.523303031921387
    7. ' ' → logprob: -13.273303031921387
    8. ' _' → logprob: -13.773303031921387
    9. ' ___' → logprob: -14.398303031921387
    10. ' ' → logprob: -15.023303031921387

Token 923: 'name' (ID: 897)
  Prédit: '__'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '__' → logprob: -0.014060556888580322
    2. ' ==' → logprob: -4.6390604972839355
    3. '==' → logprob: -6.0140604972839355
    4. ' __' → logprob: -6.3890604972839355
    5. '.__' → logprob: -9.514060974121094
    6. '__.__' → logprob: -9.764060974121094
    7. '__.' → logprob: -11.389060974121094
    8. '=="' → logprob: -11.514060974121094
    9. 'name' → logprob: -11.764060974121094
    10. '=='' → logprob: -13.639060974121094

Token 924: '__' (ID: 771)
  Prédit: '__'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '__' → logprob: -5.466968650580384e-05
    2. '==' → logprob: -9.875054359436035
    3. ' ==' → logprob: -13.250054359436035
    4. '__.__' → logprob: -14.250054359436035
    5. '=="' → logprob: -15.500054359436035
    6. 'name' → logprob: -16.00005531311035
    7. '__.' → logprob: -16.25005531311035
    8. '___' → logprob: -16.50005531311035
    9. '__('' → logprob: -17.00005531311035
    10. '```' → logprob: -17.00005531311035

Token 925: ' ==' (ID: 951)
  Prédit: '__'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '__' → logprob: -0.13080580532550812
    2. '==' → logprob: -2.130805730819702
    3. ' ==' → logprob: -6.130805969238281
    4. '=="' → logprob: -6.505805969238281
    5. '=='' → logprob: -8.630805969238281
    6. '==
' → logprob: -12.255805969238281
    7. '_' → logprob: -12.755805969238281
    8. '===' → logprob: -13.005805969238281
    9. '__.__' → logprob: -13.255805969238281
    10. '```' → logprob: -13.380805969238281

Token 926: ' "__' (ID: 27367)
  Prédit: '"'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '"' → logprob: -0.0789572075009346
    2. ''' → logprob: -2.5789573192596436
    3. '__' → logprob: -9.703957557678223
    4. ' "__' → logprob: -12.078957557678223
    5. ' '__' → logprob: -14.578957557678223
    6. '('__' → logprob: -16.828956604003906
    7. '   ' → logprob: -16.953956604003906
    8. ''"' → logprob: -17.078956604003906
    9. '("__' → logprob: -17.453956604003906
    10. 'main' → logprob: -17.578956604003906

Token 927: 'main' (ID: 7731)
  Prédit: 'main'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'main' → logprob: -0.08226368576288223
    2. '__' → logprob: -2.707263708114624
    3. '"' → logprob: -4.957263469696045
    4. ''' → logprob: -5.332263469696045
    5. 'name' → logprob: -7.957263469696045
    6. '__":
' → logprob: -11.707263946533203
    7. '__
' → logprob: -12.082263946533203
    8. '_main' → logprob: -12.207263946533203
    9. ''name' → logprob: -12.582263946533203
    10. ' main' → logprob: -12.582263946533203

Token 928: '__":
' (ID: 49892)
  Prédit: '__":
'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '__":
' → logprob: -0.038823846727609634
    2. '__' → logprob: -3.2888238430023193
    3. '__':
' → logprob: -7.163824081420898
    4. '__()
' → logprob: -12.663824081420898
    5. '():
' → logprob: -13.038824081420898
    6. '__["' → logprob: -14.288824081420898
    7. '__.' → logprob: -14.288824081420898
    8. '()' → logprob: -14.413824081420898
    9. '__.__' → logprob: -15.038824081420898
    10. '__
' → logprob: -15.413824081420898

Token 929: '   ' (ID: 271)
  Prédit: 'main'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'main' → logprob: -0.001970031065866351
    2. '	main' → logprob: -6.251969814300537
    3. ' main' → logprob: -10.626970291137695
    4. '   ' → logprob: -11.001970291137695
    5. '_main' → logprob: -15.001970291137695
    6. 'amain' → logprob: -17.126970291137695
    7. ' ' → logprob: -17.751970291137695
    8. '__' → logprob: -17.751970291137695
    9. 'import' → logprob: -18.001970291137695
    10. '    
' → logprob: -18.251970291137695

Token 930: ' main' (ID: 2758)
  Prédit: 'main'
  Correct (stricte): False
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'main' (adapté à ' main') → logprob: -3.128163257315464e-07
    2. ' main' → logprob: -15.25
    3. '	main' → logprob: -19.0
    4. '   ' → logprob: -20.25
    5. '(main' → logprob: -24.375
    6. '_main' → logprob: -24.375
    7. '.main' → logprob: -25.5
    8. 'import' → logprob: -25.75
    9. 'Main' → logprob: -26.375
    10. '  ' → logprob: -27.0

Token 931: '()' (ID: 416)
  Prédit: ''
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False


RÉSUMÉ:
--------------------------------------------------------------------------------
Total des tokens analysés: 929
Tokens correctement prédits (1ère position, stricte): 307
Tokens correctement prédits (1ère position, avec adaptation): 330
Tokens correctement prédits (top 10): 671
Précision stricte (1ère position): 33.05%
Précision adaptée (1ère position): 35.52%
Précision (top 10): 72.23%
================================================================================
