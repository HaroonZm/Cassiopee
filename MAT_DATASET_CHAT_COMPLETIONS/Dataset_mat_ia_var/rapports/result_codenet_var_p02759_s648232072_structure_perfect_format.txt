================================================================================
ANALYSE DE PRÉDICTION TOKEN PAR TOKEN (BATCH API)
Date: 2025-06-04 19:23:43
Modèle de tokenisation: gpt-4o-mini
================================================================================

SCRIPT ANALYSÉ:
--------------------------------------------------------------------------------
n = int(input())
n = -(-n // 2)
print(n)
--------------------------------------------------------------------------------

RÉSULTATS D'ANALYSE TOKEN PAR TOKEN:
--------------------------------------------------------------------------------
Token 0: 'n' (ID: 77)
  → Token d'amorce (pas de prédiction)

Token 1: ' =' (ID: 314)
  → Token d'amorce (pas de prédiction)

Token 2: ' int' (ID: 677)
  → Token d'amorce (pas de prédiction)

Token 3: '(input' (ID: 10054)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '(' → logprob: -5.7530574849806726e-05
    2. ''' → logprob: -10.750057220458984
    3. '('' → logprob: -11.125057220458984
    4. '(
' → logprob: -11.750057220458984
    5. '(n' → logprob: -13.000057220458984
    6. '```' → logprob: -13.125057220458984
    7. '("("' → logprob: -13.125057220458984
    8. '()' → logprob: -13.500057220458984
    9. '`' → logprob: -13.500057220458984
    10. '[' → logprob: -14.125057220458984

Token 4: '())
' (ID: 4574)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '(' → logprob: -0.0733630508184433
    2. ')' → logprob: -2.8233630657196045
    3. '()' → logprob: -4.698362827301025
    4. '())' → logprob: -6.948362827301025
    5. '```' → logprob: -8.198363304138184
    6. '(
' → logprob: -8.448363304138184
    7. '('' → logprob: -8.948363304138184
    8. '(()' → logprob: -9.073363304138184
    9. '`' → logprob: -9.198363304138184
    10. '("("' → logprob: -9.698363304138184

Token 5: 'n' (ID: 77)
  Prédit: 'if'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'if' → logprob: -1.105031132698059
    2. 'i' → logprob: -1.230031132698059
    3. 'for' → logprob: -1.730031132698059
    4. 's' → logprob: -2.4800310134887695
    5. 'x' → logprob: -3.8550310134887695
    6. ' ' → logprob: -3.8550310134887695
    7. 'a' → logprob: -4.6050310134887695
    8. ''' → logprob: -4.8550310134887695
    9. '#' → logprob: -4.9800310134887695
    10. ')' → logprob: -4.9800310134887695

Token 6: ' =' (ID: 314)
  Prédit: '+'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '+' → logprob: -0.6508852243423462
    2. '*' → logprob: -1.4008852243423462
    3. '**' → logprob: -2.2758851051330566
    4. '```' → logprob: -2.9008851051330566
    5. '\n' → logprob: -3.4008851051330566
    6. '\' → logprob: -3.7758851051330566
    7. ')' → logprob: -5.775885105133057
    8. ' ' → logprob: -6.150885105133057
    9. '#' → logprob: -6.150885105133057
    10. '%' → logprob: -6.400885105133057

Token 7: ' -' (ID: 533)
  Prédit: ' n'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' n' → logprob: -0.41132283210754395
    2. ' ' → logprob: -1.411322832107544
    3. ' int' → logprob: -3.036322832107544
    4. 'n' → logprob: -3.911322832107544
    5. '0' → logprob: -4.411322593688965
    6. 'int' → logprob: -4.661322593688965
    7. '1' → logprob: -6.911322593688965
    8. ' input' → logprob: -6.911322593688965
    9. '2' → logprob: -8.286322593688965
    10. ' ' → logprob: -8.411322593688965

Token 8: '(-' (ID: 8087)
  Prédit: 'n'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'n' → logprob: -0.670549750328064
    2. '1' → logprob: -0.795549750328064
    3. ' n' → logprob: -4.1705498695373535
    4. 'int' → logprob: -4.2955498695373535
    5. '-' → logprob: -5.2955498695373535
    6. ' int' → logprob: -6.7955498695373535
    7. ' ' → logprob: -7.1705498695373535
    8. 'input' → logprob: -8.170549392700195
    9. ' -' → logprob: -8.670549392700195
    10. '-n' → logprob: -8.920549392700195

Token 9: 'n' (ID: 77)
  Prédit: 'n'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'n' → logprob: -5.180879816180095e-05
    2. ' n' → logprob: -9.875051498413086
    3. ')n' → logprob: -16.625051498413086
    4. '1' → logprob: -16.750051498413086
    5. '(n' → logprob: -17.000051498413086
    6. ' ' → logprob: -17.250051498413086
    7. 'int' → logprob: -17.750051498413086
    8. '```' → logprob: -18.000051498413086
    9. '`' → logprob: -18.500051498413086
    10. 'python' → logprob: -18.625051498413086

Token 10: ' //' (ID: 602)
  Prédit: '//'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '//' → logprob: -0.5840113759040833
    2. ' //' → logprob: -0.8340113759040833
    3. '1' → logprob: -5.834011554718018
    4. ' ' → logprob: -6.459011554718018
    5. ')' → logprob: -7.209011554718018
    6. '>>' → logprob: -7.209011554718018
    7. '2' → logprob: -7.834011554718018
    8. '3' → logprob: -8.20901107788086
    9. ' ' → logprob: -8.20901107788086
    10. '/' → logprob: -8.33401107788086

Token 11: ' ' (ID: 220)
  Prédit: '2'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '2' → logprob: -1.1102787256240845
    2. '3' → logprob: -1.2352787256240845
    3. '5' → logprob: -2.610278606414795
    4. '7' → logprob: -2.610278606414795
    5. '10' → logprob: -2.610278606414795
    6. '4' → logprob: -2.735278606414795
    7. '8' → logprob: -3.235278606414795
    8. '16' → logprob: -4.110278606414795
    9. '32' → logprob: -4.610278606414795
    10. '64' → logprob: -4.860278606414795

Token 12: '2' (ID: 17)
  Prédit: '3'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '3' → logprob: -1.0615555047988892
    2. '2' → logprob: -2.0615553855895996
    3. '10' → logprob: -2.0615553855895996
    4. '5' → logprob: -2.1865553855895996
    5. '7' → logprob: -2.3115553855895996
    6. '8' → logprob: -3.0615553855895996
    7. '16' → logprob: -3.0615553855895996
    8. '4' → logprob: -3.1865553855895996
    9. '32' → logprob: -4.4365553855896
    10. '15' → logprob: -4.8115553855896

Token 13: ')
' (ID: 446)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ')' → logprob: -0.0009308716980740428
    2. '2' → logprob: -7.0009307861328125
    3. '))' → logprob: -11.875930786132812
    4. ')`' → logprob: -12.750930786132812
    5. ' )' → logprob: -13.000930786132812
    6. ')n' → logprob: -13.250930786132812
    7. '1' → logprob: -13.625930786132812
    8. ')#' → logprob: -14.000930786132812
    9. '`)' → logprob: -14.125930786132812
    10. '#' → logprob: -14.625930786132812

Token 14: 'print' (ID: 1598)
  Prédit: 'print'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'print' → logprob: -0.8609862923622131
    2. ' ' → logprob: -1.2359862327575684
    3. '#' → logprob: -2.4859862327575684
    4. '<|end|>' → logprob: -2.6109862327575684
    5. '*' → logprob: -2.8609862327575684
    6. '+' → logprob: -3.7359862327575684
    7. ')' → logprob: -4.235986232757568
    8. 'n' → logprob: -4.485986232757568
    9. '*n' → logprob: -5.485986232757568
    10. '2' → logprob: -5.735986232757568

Token 15: '(n' (ID: 2406)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(' → logprob: -0.005251660477370024
    2. '(n' → logprob: -5.255251884460449
    3. '('' → logprob: -11.88025188446045
    4. '()' → logprob: -12.63025188446045
    5. '((' → logprob: -13.25525188446045
    6. '(
' → logprob: -13.50525188446045
    7. '(*' → logprob: -13.75525188446045
    8. '(max' → logprob: -14.50525188446045
    9. '(sum' → logprob: -14.50525188446045
    10. '(

' → logprob: -15.13025188446045

Token 16: ')' (ID: 8)
  Prédit: ')'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')' → logprob: -0.000205566844670102
    2. '))' → logprob: -8.500205993652344
    3. '`)' → logprob: -14.500205993652344
    4. ' )' → logprob: -14.875205993652344
    5. '*' → logprob: -15.000205993652344
    6. ')`' → logprob: -15.125205993652344
    7. '')' → logprob: -15.750205993652344
    8. ')
' → logprob: -16.000205993652344
    9. ')))' → logprob: -16.250205993652344
    10. '+' → logprob: -16.625205993652344


RÉSUMÉ:
--------------------------------------------------------------------------------
Total des tokens analysés: 14
Tokens correctement prédits (1ère position, stricte): 3
Tokens correctement prédits (1ère position, avec adaptation): 3
Tokens correctement prédits (top 10): 6
Précision stricte (1ère position): 21.43%
Précision adaptée (1ère position): 21.43%
Précision (top 10): 42.86%
================================================================================
