================================================================================
ANALYSE DE PRÉDICTION TOKEN PAR TOKEN (BATCH API)
Date: 2025-06-04 19:47:56
Modèle de tokenisation: gpt-4o-mini
================================================================================

SCRIPT ANALYSÉ:
--------------------------------------------------------------------------------
n = int(input())
liste = input().split()
v = []
for x in liste:
    v.append(int(x))
v.sort()
for i in range(n-1):
    v[i+1] = (v[i] + v[i+1]) / 2
print(v[n-1])
--------------------------------------------------------------------------------

RÉSULTATS D'ANALYSE TOKEN PAR TOKEN:
--------------------------------------------------------------------------------
Token 0: 'n' (ID: 77)
  → Token d'amorce (pas de prédiction)

Token 1: ' =' (ID: 314)
  → Token d'amorce (pas de prédiction)

Token 2: ' int' (ID: 677)
  → Token d'amorce (pas de prédiction)

Token 3: '(input' (ID: 10054)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '(' → logprob: -0.00010807292710524052
    2. '(n' → logprob: -10.250107765197754
    3. ''' → logprob: -10.625107765197754
    4. '('' → logprob: -11.375107765197754
    5. '```' → logprob: -11.625107765197754
    6. '(
' → logprob: -12.000107765197754
    7. '()' → logprob: -12.375107765197754
    8. '("("' → logprob: -12.375107765197754
    9. '`' → logprob: -12.500107765197754
    10. ')' → logprob: -13.125107765197754

Token 4: '())
' (ID: 4574)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '(' → logprob: -0.03871168941259384
    2. ')' → logprob: -3.5387117862701416
    3. '()' → logprob: -4.9137115478515625
    4. '())' → logprob: -7.1637115478515625
    5. '(
' → logprob: -8.663711547851562
    6. '```' → logprob: -9.163711547851562
    7. '(()' → logprob: -9.413711547851562
    8. '("("' → logprob: -9.663711547851562
    9. '('' → logprob: -9.913711547851562
    10. '`' → logprob: -10.163711547851562

Token 5: 'liste' (ID: 69656)
  Prédit: 'if'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'if' → logprob: -0.6515942215919495
    2. 'for' → logprob: -1.4015941619873047
    3. 'i' → logprob: -2.1515941619873047
    4. 's' → logprob: -2.7765941619873047
    5. 'x' → logprob: -4.651594161987305
    6. ')' → logprob: -5.151594161987305
    7. 'a' → logprob: -5.401594161987305
    8. '*' → logprob: -5.401594161987305
    9. ' ' → logprob: -5.651594161987305
    10. 'f' → logprob: -5.901594161987305

Token 6: ' =' (ID: 314)
  Prédit: '['
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '[' → logprob: -0.010002439841628075
    2. 's' → logprob: -4.885002613067627
    3. '.' → logprob: -6.635002613067627
    4. '[]' → logprob: -8.010002136230469
    5. '[m' → logprob: -9.010002136230469
    6. '[n' → logprob: -9.260002136230469
    7. ''s' → logprob: -9.385002136230469
    8. '\[' → logprob: -9.635002136230469
    9. '```' → logprob: -9.760002136230469
    10. '[
' → logprob: -9.885002136230469

Token 7: ' input' (ID: 3422)
  Prédit: ' []'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' []' → logprob: -0.1865697056055069
    2. '[]' → logprob: -1.8115696907043457
    3. '[' → logprob: -5.311569690704346
    4. ' [' → logprob: -6.561569690704346
    5. ' ' → logprob: -8.561570167541504
    6. '[input' → logprob: -9.186570167541504
    7. 'list' → logprob: -9.686570167541504
    8. 'input' → logprob: -10.436570167541504
    9. ' list' → logprob: -10.686570167541504
    10. ' input' → logprob: -11.561570167541504

Token 8: '().' (ID: 1454)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '(' → logprob: -0.0023515033535659313
    2. '('' → logprob: -6.5023512840271
    3. ''' → logprob: -7.8773512840271
    4. '()' → logprob: -9.002351760864258
    5. '("("' → logprob: -9.127351760864258
    6. '(
' → logprob: -9.752351760864258
    7. ')' → logprob: -10.002351760864258
    8. '"' → logprob: -10.377351760864258
    9. ' (' → logprob: -10.752351760864258
    10. '(

' → logprob: -11.377351760864258

Token 9: 'split' (ID: 13627)
  Prédit: 'split'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'split' → logprob: -0.0007212492637336254
    2. 'strip' → logprob: -7.250721454620361
    3. 'rstrip' → logprob: -12.250720977783203
    4. ' split' → logprob: -12.625720977783203
    5. 'replace' → logprob: -13.500720977783203
    6. 'spl' → logprob: -13.750720977783203
    7. 's' → logprob: -14.875720977783203
    8. 'rs' → logprob: -15.250720977783203
    9. 'sp' → logprob: -16.125720977783203
    10. '(split' → logprob: -16.875720977783203

Token 10: '()
' (ID: 1234)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '(' → logprob: -0.06375746428966522
    2. '()' → logprob: -3.0637574195861816
    3. '('' → logprob: -4.563757419586182
    4. '("("' → logprob: -5.438757419586182
    5. '(`' → logprob: -9.93875789642334
    6. '("' → logprob: -10.31375789642334
    7. '```' → logprob: -10.31375789642334
    8. '(
' → logprob: -10.81375789642334
    9. '"' → logprob: -10.93875789642334
    10. '((' → logprob: -11.06375789642334

Token 11: 'v' (ID: 85)
  Prédit: 'for'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'for' → logprob: -0.7703734636306763
    2. '[' → logprob: -1.1453734636306763
    3. 'n' → logprob: -3.1453733444213867
    4. '=' → logprob: -3.1453733444213867
    5. '.' → logprob: -3.5203733444213867
    6. 's' → logprob: -3.8953733444213867
    7. '#' → logprob: -4.145373344421387
    8. 'a' → logprob: -4.395373344421387
    9. 'result' → logprob: -5.145373344421387
    10. 'f' → logprob: -5.145373344421387

Token 12: ' =' (ID: 314)
  Prédit: 'a'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'a' → logprob: -0.4951569139957428
    2. 'al' → logprob: -1.1201568841934204
    3. ' =' → logprob: -3.62015700340271
    4. '[' → logprob: -3.99515700340271
    5. '[a' → logprob: -5.370156764984131
    6. '=' → logprob: -5.745156764984131
    7. 'als' → logprob: -5.870156764984131
    8. 'alue' → logprob: -5.995156764984131
    9. '[i' → logprob: -6.745156764984131
    10. 's' → logprob: -7.245156764984131

Token 13: ' []
' (ID: 8911)
  Prédit: '[]'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '[]' → logprob: -0.4194954037666321
    2. ' []' → logprob: -1.6694953441619873
    3. '0' → logprob: -2.9194953441619873
    4. '[int' → logprob: -3.4194953441619873
    5. 'int' → logprob: -3.6694953441619873
    6. 'list' → logprob: -3.9194953441619873
    7. '[' → logprob: -5.169495582580566
    8. '{}' → logprob: -5.294495582580566
    9. ' ' → logprob: -6.044495582580566
    10. ' [' → logprob: -6.544495582580566

Token 14: 'for' (ID: 1938)
  Prédit: 'for'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'for' → logprob: -0.0064217825420200825
    2. ' for' → logprob: -5.3814215660095215
    3. 'f' → logprob: -6.7564215660095215
    4. '=' → logprob: -7.8814215660095215
    5. 'i' → logprob: -9.00642204284668
    6. '[' → logprob: -10.00642204284668
    7. ')' → logprob: -11.25642204284668
    8. ' ' → logprob: -11.25642204284668
    9. ',' → logprob: -11.50642204284668
    10. 'd' → logprob: -11.75642204284668

Token 15: ' x' (ID: 1215)
  Prédit: ' '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' ' → logprob: -0.05825824663043022
    2. ' i' → logprob: -3.058258295059204
    3. '  ' → logprob: -5.058258056640625
    4. 'i' → logprob: -6.683258056640625
    5. '_' → logprob: -7.308258056640625
    6. ' ' → logprob: -7.808258056640625
    7. ' ‌' → logprob: -8.183258056640625
    8. ' _' → logprob: -8.558258056640625
    9. ' n' → logprob: -8.808258056640625
    10. ' v' → logprob: -9.183258056640625

Token 16: ' in' (ID: 306)
  Prédit: ' in'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' in' → logprob: -0.048719312995672226
    2. 'in' → logprob: -3.0487194061279297
    3. ' ' → logprob: -9.54871940612793
    4. '  ' → logprob: -10.79871940612793
    5. 'space' → logprob: -12.17371940612793
    6. '	in' → logprob: -12.29871940612793
    7. '<|end|>' → logprob: -12.29871940612793
    8. 'n' → logprob: -12.54871940612793
    9. '_' → logprob: -12.79871940612793
    10. 'range' → logprob: -12.92371940612793

Token 17: ' liste' (ID: 31719)
  Prédit: 'liste'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'liste' → logprob: -0.5304095149040222
    2. ' liste' → logprob: -1.280409574508667
    3. ' range' → logprob: -2.655409574508667
    4. 'range' → logprob: -2.780409574508667
    5. 'list' → logprob: -7.030409336090088
    6. 'v' → logprob: -9.530409812927246
    7. 'lst' → logprob: -9.530409812927246
    8. ' v' → logprob: -9.530409812927246
    9. ' list' → logprob: -9.655409812927246
    10. ' ' → logprob: -9.780409812927246

Token 18: ':
' (ID: 734)
  Prédit: ':'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ':' → logprob: -0.0006417844560928643
    2. ' :' → logprob: -7.375641822814941
    3. ':**' → logprob: -11.875641822814941
    4. '):' → logprob: -13.500641822814941
    5. ':
' → logprob: -13.500641822814941
    6. ' if' → logprob: -13.625641822814941
    7. '[:]' → logprob: -14.375641822814941
    8. 'if' → logprob: -14.500641822814941
    9. ',' → logprob: -14.625641822814941
    10. '=' → logprob: -14.750641822814941

Token 19: '   ' (ID: 271)
  Prédit: 'v'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'v' → logprob: -0.2953920364379883
    2. ' v' → logprob: -1.4203920364379883
    3. ' if' → logprob: -4.920392036437988
    4. '   ' → logprob: -5.045392036437988
    5. 'if' → logprob: -8.795392036437988
    6. '	v' → logprob: -9.045392036437988
    7. 'n' → logprob: -9.295392036437988
    8. ' n' → logprob: -11.420392036437988
    9. 'int' → logprob: -11.545392036437988
    10. '```' → logprob: -12.795392036437988

Token 20: ' v' (ID: 323)
  Prédit: 'v'
  Correct (stricte): False
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'v' (adapté à ' v') → logprob: -0.3076424300670624
    2. ' v' → logprob: -2.0576424598693848
    3. ' if' → logprob: -2.1826424598693848
    4. 'if' → logprob: -3.8076424598693848
    5. '   ' → logprob: -6.432642459869385
    6. 'i' → logprob: -8.182641983032227
    7. ' i' → logprob: -9.307641983032227
    8. '    ' → logprob: -9.807641983032227
    9. '```' → logprob: -10.557641983032227
    10. ' ' → logprob: -11.557641983032227

Token 21: '.append' (ID: 3709)
  Prédit: '.append'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '.append' → logprob: -0.4740959405899048
    2. '.' → logprob: -0.9740959405899048
    3. '.extend' → logprob: -11.849096298217773
    4. '.app' → logprob: -12.599096298217773
    5. 'append' → logprob: -12.974096298217773
    6. ' .' → logprob: -13.099096298217773
    7. '.add' → logprob: -13.599096298217773
    8. '.ap' → logprob: -13.849096298217773
    9. '.=' → logprob: -14.474096298217773
    10. '.push' → logprob: -15.349096298217773

Token 22: '(int' (ID: 2742)
  Prédit: '(int'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(int' → logprob: -0.00493083568289876
    2. '(' → logprob: -5.3799309730529785
    3. '(x' → logprob: -8.62993049621582
    4. '(float' → logprob: -9.25493049621582
    5. 'int' → logprob: -10.50493049621582
    6. '((' → logprob: -12.87993049621582
    7. ' (' → logprob: -13.75493049621582
    8. '(eval' → logprob: -13.87993049621582
    9. '(i' → logprob: -14.00493049621582
    10. '(ord' → logprob: -14.25493049621582

Token 23: '(x' (ID: 4061)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(' → logprob: -0.31326669454574585
    2. '(x' → logprob: -1.3132667541503906
    3. '(
' → logprob: -13.68826675415039
    4. '(s' → logprob: -13.81326675415039
    5. ')' → logprob: -14.31326675415039
    6. '(v' → logprob: -14.68826675415039
    7. ' (' → logprob: -14.81326675415039
    8. '('' → logprob: -14.81326675415039
    9. '()' → logprob: -15.06326675415039
    10. '(X' → logprob: -15.56326675415039

Token 24: '))
' (ID: 2210)
  Prédit: '))'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '))' → logprob: -0.04860564321279526
    2. ')' → logprob: -3.0486056804656982
    3. ')))' → logprob: -11.173605918884277
    4. ' ))' → logprob: -13.048605918884277
    5. '))
' → logprob: -14.048605918884277
    6. ''))' → logprob: -14.923605918884277
    7. '),' → logprob: -15.048605918884277
    8. ' )' → logprob: -16.17360496520996
    9. ')
' → logprob: -16.17360496520996
    10. '   ' → logprob: -16.54860496520996

Token 25: 'v' (ID: 85)
  Prédit: 'v'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'v' → logprob: -0.4826337695121765
    2. '#' → logprob: -2.3576338291168213
    3. '[' → logprob: -2.7326338291168213
    4. 'for' → logprob: -2.7326338291168213
    5. ' ' → logprob: -3.6076338291168213
    6. '.' → logprob: -3.6076338291168213
    7. 'i' → logprob: -3.8576338291168213
    8. 'n' → logprob: -4.107633590698242
    9. ')' → logprob: -4.232633590698242
    10. ',' → logprob: -5.232633590698242

Token 26: '.sort' (ID: 19551)
  Prédit: ''
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False

Token 27: '()
' (ID: 1234)
  Prédit: '()'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '()' → logprob: -0.00018542143516242504
    2. '(' → logprob: -8.625185012817383
    3. '()
' → logprob: -12.875185012817383
    4. '()`' → logprob: -13.125185012817383
    5. '()

' → logprob: -15.000185012817383
    6. '())' → logprob: -16.250185012817383
    7. '```' → logprob: -16.250185012817383
    8. '();' → logprob: -16.375185012817383
    9. '()]' → logprob: -16.375185012817383
    10. '()<' → logprob: -16.500185012817383

Token 28: 'for' (ID: 1938)
  Prédit: 'print'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'print' → logprob: -1.105831503868103
    2. 'for' → logprob: -1.230831503868103
    3. 'n' → logprob: -1.980831503868103
    4. 'i' → logprob: -2.2308316230773926
    5. 'if' → logprob: -3.3558316230773926
    6. '#' → logprob: -3.7308316230773926
    7. 'a' → logprob: -4.105831623077393
    8. 'p' → logprob: -4.355831623077393
    9. '[' → logprob: -4.605831623077393
    10. 'k' → logprob: -5.355831623077393

Token 29: ' i' (ID: 575)
  Prédit: ' i'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' i' → logprob: -0.10654743015766144
    2. ' x' → logprob: -2.6065473556518555
    3. ' v' → logprob: -3.7315473556518555
    4. ' ' → logprob: -6.2315473556518555
    5. 'i' → logprob: -7.1065473556518555
    6. 'x' → logprob: -8.856547355651855
    7. 'v' → logprob: -9.231547355651855
    8. ' _' → logprob: -9.481547355651855
    9. ' ' → logprob: -9.731547355651855
    10. ' value' → logprob: -9.856547355651855

Token 30: ' in' (ID: 306)
  Prédit: ' in'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' in' → logprob: -0.03825148195028305
    2. 'in' → logprob: -3.2882513999938965
    3. ' ' → logprob: -8.913251876831055
    4. '	in' → logprob: -10.413251876831055
    5. '  ' → logprob: -11.163251876831055
    6. 'n' → logprob: -11.413251876831055
    7. ',' → logprob: -11.913251876831055
    8. ' n' → logprob: -12.913251876831055
    9. 'In' → logprob: -13.663251876831055
    10. '   ' → logprob: -13.663251876831055

Token 31: ' range' (ID: 3352)
  Prédit: 'range'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'range' → logprob: -0.5844067335128784
    2. ' range' → logprob: -0.8344067335128784
    3. 'v' → logprob: -4.959406852722168
    4. ' v' → logprob: -6.584406852722168
    5. ' ' → logprob: -11.709406852722168
    6. '	range' → logprob: -12.209406852722168
    7. '(range' → logprob: -12.334406852722168
    8. '  ' → logprob: -12.584406852722168
    9. '   ' → logprob: -13.209406852722168
    10. 'rang' → logprob: -13.584406852722168

Token 32: '(n' (ID: 2406)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(' → logprob: -0.20443092286586761
    2. '(len' → logprob: -1.7044309377670288
    3. '(n' → logprob: -5.829431056976318
    4. '(v' → logprob: -9.95443058013916
    5. ' (' → logprob: -11.20443058013916
    6. '(length' → logprob: -12.45443058013916
    7. '(l' → logprob: -12.70443058013916
    8. '(
' → logprob: -13.70443058013916
    9. '(m' → logprob: -14.32943058013916
    10. '(

' → logprob: -14.32943058013916

Token 33: '-' (ID: 12)
  Prédit: '):'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '):' → logprob: -0.004825849551707506
    2. ')' → logprob: -5.629826068878174
    3. '-' → logprob: -7.379826068878174
    4. ' ):' → logprob: -7.504826068878174
    5. '):
' → logprob: -10.629825592041016
    6. ':' → logprob: -11.379825592041016
    7. ' -' → logprob: -12.004825592041016
    8. ' )' → logprob: -12.879825592041016
    9. '>' → logprob: -13.504825592041016
    10. '+' → logprob: -14.254825592041016

Token 34: '1' (ID: 16)
  Prédit: '1'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '1' → logprob: -0.00013846253568772227
    2. ' ' → logprob: -9.125138282775879
    3. '2' → logprob: -10.500138282775879
    4. '-' → logprob: -13.875138282775879
    5. '   ' → logprob: -15.250138282775879
    6. '3' → logprob: -15.687638282775879
    7. '  ' → logprob: -16.000139236450195
    8. '```' → logprob: -16.250139236450195
    9. ')' → logprob: -16.625139236450195
    10. '１' → logprob: -17.250139236450195

Token 35: '):
' (ID: 1883)
  Prédit: '):'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '):' → logprob: -0.028545420616865158
    2. ',' → logprob: -4.278545379638672
    3. ')' → logprob: -4.403545379638672
    4. ':' → logprob: -6.528545379638672
    5. ' ):' → logprob: -7.903545379638672
    6. '):
' → logprob: -9.653545379638672
    7. '-' → logprob: -10.403545379638672
    8. '>' → logprob: -10.653545379638672
    9. ' ,' → logprob: -11.028545379638672
    10. ' :' → logprob: -11.403545379638672

Token 36: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.27020102739334106
    2. ' if' → logprob: -2.5202009677886963
    3. ' ' → logprob: -2.8952009677886963
    4. ' print' → logprob: -3.1452009677886963
    5. ' 
' → logprob: -3.7702009677886963
    6. 'print' → logprob: -4.895201206207275
    7. '    
' → logprob: -5.145201206207275
    8. '    ' → logprob: -5.270201206207275
    9. '<|end|>' → logprob: -5.270201206207275
    10. 'if' → logprob: -6.020201206207275

Token 37: ' v' (ID: 323)
  Prédit: 'print'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'print' → logprob: -0.49948418140411377
    2. ' if' → logprob: -1.7494841814041138
    3. 'if' → logprob: -2.124484062194824
    4. ' print' → logprob: -2.374484062194824
    5. '   ' → logprob: -5.124484062194824
    6. ' ' → logprob: -7.749484062194824
    7. '    ' → logprob: -8.749484062194824
    8. 'for' → logprob: -9.874484062194824
    9. ' for' → logprob: -10.624484062194824
    10. '	print' → logprob: -10.874484062194824

Token 38: '[i' (ID: 1768)
  Prédit: '[i'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '[i' → logprob: -0.2018820196390152
    2. '[' → logprob: -1.701882004737854
    3. '[v' → logprob: -8.576882362365723
    4. '[-' → logprob: -9.826882362365723
    5. 'print' → logprob: -10.201882362365723
    6. '[:]' → logprob: -10.326882362365723
    7. '.append' → logprob: -10.826882362365723
    8. '[j' → logprob: -11.076882362365723
    9. '[min' → logprob: -11.201882362365723
    10. '.' → logprob: -11.701882362365723

Token 39: '+' (ID: 10)
  Prédit: ','
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ',' → logprob: -1.1516127586364746
    2. ' >' → logprob: -1.6516127586364746
    3. '+' → logprob: -2.0266127586364746
    4. '>' → logprob: -2.1516127586364746
    5. ' ,' → logprob: -2.4016127586364746
    6. ' <' → logprob: -3.2766127586364746
    7. ' <=' → logprob: -3.4016127586364746
    8. ' ' → logprob: -3.7766127586364746
    9. ',v' → logprob: -4.526612758636475
    10. '<' → logprob: -4.901612758636475

Token 40: '1' (ID: 16)
  Prédit: '1'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '1' → logprob: -0.0004766671918332577
    2. ' ' → logprob: -8.000476837158203
    3. '0' → logprob: -9.750476837158203
    4. ']' → logprob: -9.750476837158203
    5. ')' → logprob: -11.125476837158203
    6. '```' → logprob: -13.250476837158203
    7. '<|end|>' → logprob: -13.250476837158203
    8. '-' → logprob: -13.500476837158203
    9. ' -' → logprob: -13.750476837158203
    10. '  ' → logprob: -13.875476837158203

Token 41: ']' (ID: 60)
  Prédit: ']'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ']' → logprob: -0.03288605436682701
    2. ']=' → logprob: -4.282886028289795
    3. '-' → logprob: -4.907886028289795
    4. ']+=' → logprob: -5.657886028289795
    5. '=' → logprob: -6.032886028289795
    6. ' -' → logprob: -6.657886028289795
    7. '>' → logprob: -7.157886028289795
    8. ']-' → logprob: -7.157886028289795
    9. '],' → logprob: -7.407886028289795
    10. '-=' → logprob: -7.657886028289795

Token 42: ' =' (ID: 314)
  Prédit: '='
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '=' → logprob: -0.7473397850990295
    2. ' -=' → logprob: -1.6223397254943848
    3. '-=' → logprob: -1.8723397254943848
    4. '-' → logprob: -2.3723397254943848
    5. ' =' → logprob: -2.9973397254943848
    6. ' -' → logprob: -3.4973397254943848
    7. '+=' → logprob: -7.122339725494385
    8. '>' → logprob: -8.372340202331543
    9. ' +=' → logprob: -8.747340202331543
    10. ',' → logprob: -9.122340202331543

Token 43: ' (' (ID: 350)
  Prédit: 'v'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'v' → logprob: -0.026697341352701187
    2. 'max' → logprob: -3.7766973972320557
    3. 'min' → logprob: -6.276697158813477
    4. ' v' → logprob: -6.651697158813477
    5. ' max' → logprob: -8.401697158813477
    6. '	v' → logprob: -11.276697158813477
    7. ' min' → logprob: -11.651697158813477
    8. '   ' → logprob: -12.026697158813477
    9. 'abs' → logprob: -12.151697158813477
    10. ' ' → logprob: -12.526697158813477

Token 44: 'v' (ID: 85)
  Prédit: 'v'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'v' → logprob: -0.012874533422291279
    2. ' v' → logprob: -4.512874603271484
    3. ')' → logprob: -7.512874603271484
    4. ')v' → logprob: -7.887874603271484
    5. 'max' → logprob: -8.012874603271484
    6. '   ' → logprob: -9.137874603271484
    7. 'min' → logprob: -9.262874603271484
    8. '(v' → logprob: -9.262874603271484
    9. '2' → logprob: -10.262874603271484
    10. '-v' → logprob: -10.262874603271484

Token 45: '[i' (ID: 1768)
  Prédit: '[i'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '[i' → logprob: -9.253090865968261e-06
    2. 'i' → logprob: -12.375009536743164
    3. '[' → logprob: -12.750009536743164
    4. ')[' → logprob: -14.000009536743164
    5. ')' → logprob: -15.375009536743164
    6. ' [' → logprob: -15.625009536743164
    7. '   ' → logprob: -15.750009536743164
    8. ' ' → logprob: -15.750009536743164
    9. '[v' → logprob: -16.125009536743164
    10. ' i' → logprob: -16.250009536743164

Token 46: ']' (ID: 60)
  Prédit: '+'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '+' → logprob: -0.026363123208284378
    2. ' +' → logprob: -3.6513631343841553
    3. ']+' → logprob: -11.026363372802734
    4. ')' → logprob: -11.901363372802734
    5. ']' → logprob: -12.026363372802734
    6. '-' → logprob: -12.026363372802734
    7. ')+' → logprob: -12.151363372802734
    8. '   ' → logprob: -12.276363372802734
    9. ' -' → logprob: -13.151363372802734
    10. '>' → logprob: -13.276363372802734

Token 47: ' +' (ID: 659)
  Prédit: '+'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '+' → logprob: -0.1429169774055481
    2. ' +' → logprob: -2.0179169178009033
    3. '-' → logprob: -9.517916679382324
    4. ' -' → logprob: -9.892916679382324
    5. '*' → logprob: -10.017916679382324
    6. ')' → logprob: -11.142916679382324
    7. ',' → logprob: -11.142916679382324
    8. '|' → logprob: -11.892916679382324
    9. ')+' → logprob: -12.017916679382324
    10. ' ' → logprob: -12.517916679382324

Token 48: ' v' (ID: 323)
  Prédit: 'v'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'v' → logprob: -0.2522324323654175
    2. ' v' → logprob: -1.5022324323654175
    3. ' ' → logprob: -8.627232551574707
    4. '1' → logprob: -10.127232551574707
    5. '	v' → logprob: -11.002232551574707
    6. '  ' → logprob: -11.377232551574707
    7. ')' → logprob: -11.627232551574707
    8. '"' → logprob: -11.752232551574707
    9. '   ' → logprob: -12.002232551574707
    10. '2' → logprob: -12.377232551574707

Token 49: '[i' (ID: 1768)
  Prédit: '[i'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '[i' → logprob: -3.054500666621607e-06
    2. '[' → logprob: -13.00000286102295
    3. ')[' → logprob: -14.62500286102295
    4. 'i' → logprob: -16.500003814697266
    5. ' [' → logprob: -16.875003814697266
    6. '[I' → logprob: -16.875003814697266
    7. ')' → logprob: -17.000003814697266
    8. ' ' → logprob: -17.625003814697266
    9. '][' → logprob: -17.750003814697266
    10. '[j' → logprob: -17.875003814697266

Token 50: '+' (ID: 10)
  Prédit: '+'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '+' → logprob: -0.12767615914344788
    2. '[i' → logprob: -2.127676248550415
    3. '[' → logprob: -7.377676010131836
    4. ']' → logprob: -9.877676010131836
    5. '1' → logprob: -10.877676010131836
    6. '][' → logprob: -11.627676010131836
    7. 'i' → logprob: -11.752676010131836
    8. '   ' → logprob: -11.752676010131836
    9. '```' → logprob: -11.752676010131836
    10. '-' → logprob: -12.252676010131836

Token 51: '1' (ID: 16)
  Prédit: '1'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '1' → logprob: -5.5577775128767826e-06
    2. ' ' → logprob: -12.750005722045898
    3. '+' → logprob: -13.875005722045898
    4. '0' → logprob: -14.750005722045898
    5. ']' → logprob: -15.062505722045898
    6. 'i' → logprob: -15.250005722045898
    7. '   ' → logprob: -15.437505722045898
    8. '2' → logprob: -15.937505722045898
    9. '])' → logprob: -16.5000057220459
    10. '```' → logprob: -17.4375057220459

Token 52: '])' (ID: 4636)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ')' → logprob: -0.11319548636674881
    2. ')//' → logprob: -2.2381954193115234
    3. ' )' → logprob: -8.488195419311523
    4. ')/' → logprob: -8.863195419311523
    5. ')>>' → logprob: -11.238195419311523
    6. ')#' → logprob: -11.988195419311523
    7. '//' → logprob: -13.363195419311523
    8. '+' → logprob: -13.988195419311523
    9. '))' → logprob: -14.238195419311523
    10. '   ' → logprob: -14.738195419311523

Token 53: ' /' (ID: 820)
  Prédit: ''
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False

Token 54: ' ' (ID: 220)
  Prédit: '2'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '2' → logprob: -0.0036032749339938164
    2. ' ' → logprob: -5.628603458404541
    3. '3' → logprob: -14.003602981567383
    4. '```' → logprob: -14.378602981567383
    5. '   ' → logprob: -14.691102981567383
    6. '  ' → logprob: -15.316102981567383
    7. '1' → logprob: -15.503602981567383
    8. '２' → logprob: -15.816102981567383
    9. '(' → logprob: -16.128602981567383
    10. 'float' → logprob: -16.316102981567383

Token 55: '2' (ID: 17)
  Prédit: '2'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '2' → logprob: -0.00020652047533076257
    2. ' ' → logprob: -8.50020694732666
    3. '3' → logprob: -13.25020694732666
    4. '1' → logprob: -15.25020694732666
    5. '```' → logprob: -15.37520694732666
    6. '   ' → logprob: -15.87520694732666
    7. 'float' → logprob: -16.562705993652344
    8. '(' → logprob: -16.625205993652344
    9. '4' → logprob: -16.750205993652344
    10. '10' → logprob: -16.812705993652344

Token 56: '
' (ID: 198)
  Prédit: '\n'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '\n' → logprob: -0.9010041952133179
    2. '<|end|>' → logprob: -1.0260041952133179
    3. 'print' → logprob: -2.4010043144226074
    4. '
' → logprob: -2.6510043144226074
    5. ')' → logprob: -3.4010043144226074
    6. 'v' → logprob: -4.151004314422607
    7. ' ' → logprob: -4.901004314422607
    8. '```' → logprob: -5.401004314422607
    9. '#' → logprob: -5.651004314422607
    10. '\' → logprob: -6.151004314422607

Token 57: 'print' (ID: 1598)
  Prédit: 'print'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'print' → logprob: -0.002405027626082301
    2. '#' → logprob: -7.002405166625977
    3. ')' → logprob: -7.752405166625977
    4. 'for' → logprob: -8.002405166625977
    5. '<|end|>' → logprob: -8.377405166625977
    6. 'v' → logprob: -9.377405166625977
    7. ' print' → logprob: -9.502405166625977
    8. '```' → logprob: -9.502405166625977
    9. 'p' → logprob: -10.002405166625977
    10. '\n' → logprob: -10.002405166625977

Token 58: '(v' (ID: 6932)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(' → logprob: -0.008746705949306488
    2. '(v' → logprob: -4.75874662399292
    3. '()' → logprob: -9.758747100830078
    4. '('' → logprob: -9.883747100830078
    5. '("("' → logprob: -11.508747100830078
    6. '(
' → logprob: -12.508747100830078
    7. '((' → logprob: -12.633747100830078
    8. '(n' → logprob: -14.133747100830078
    9. '(*' → logprob: -14.258747100830078
    10. '("' → logprob: -14.383747100830078

Token 59: '[n' (ID: 15433)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')' → logprob: -0.008660659193992615
    2. '[' → logprob: -4.758660793304443
    3. '`)' → logprob: -11.258660316467285
    4. '[-' → logprob: -12.008660316467285
    5. '])' → logprob: -12.258660316467285
    6. '))' → logprob: -12.258660316467285
    7. '[])' → logprob: -12.508660316467285
    8. '[n' → logprob: -12.758660316467285
    9. '')' → logprob: -13.008660316467285
    10. ']' → logprob: -13.008660316467285

Token 60: '-' (ID: 12)
  Prédit: '-'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '-' → logprob: -0.001446545124053955
    2. '])' → logprob: -6.626446723937988
    3. ' -' → logprob: -9.376446723937988
    4. ')' → logprob: -10.626446723937988
    5. ']' → logprob: -11.626446723937988
    6. '-)' → logprob: -14.376446723937988
    7. '1' → logprob: -14.626446723937988
    8. '−' → logprob: -14.751446723937988
    9. ']-' → logprob: -15.251446723937988
    10. '[-' → logprob: -15.751446723937988

Token 61: '1' (ID: 16)
  Prédit: '1'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '1' → logprob: -2.696889623621246e-06
    2. ' ' → logprob: -13.00000286102295
    3. '2' → logprob: -15.37500286102295
    4. '   ' → logprob: -16.437501907348633
    5. '```' → logprob: -17.062501907348633
    6. ')' → logprob: -18.187501907348633
    7. '۱' → logprob: -18.250001907348633
    8. '  ' → logprob: -18.500001907348633
    9. '１' → logprob: -18.875001907348633
    10. '१' → logprob: -19.000001907348633

Token 62: '])' (ID: 4636)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')' → logprob: -3.6550729419104755e-05
    2. '))' → logprob: -10.250036239624023
    3. '})' → logprob: -14.875036239624023
    4. '])' → logprob: -15.000036239624023
    5. ' )' → logprob: -15.750036239624023
    6. '`)' → logprob: -16.125036239624023
    7. ')`' → logprob: -16.375036239624023
    8. '）' → logprob: -16.875036239624023
    9. ')}' → logprob: -17.750036239624023
    10. '}' → logprob: -17.875036239624023


RÉSUMÉ:
--------------------------------------------------------------------------------
Total des tokens analysés: 60
Tokens correctement prédits (1ère position, stricte): 22
Tokens correctement prédits (1ère position, avec adaptation): 23
Tokens correctement prédits (top 10): 46
Précision stricte (1ère position): 36.67%
Précision adaptée (1ère position): 38.33%
Précision (top 10): 76.67%
================================================================================
