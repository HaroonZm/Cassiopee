================================================================================
ANALYSE DE PRÉDICTION TOKEN PAR TOKEN (BATCH API)
Date: 2025-06-04 19:28:58
Modèle de tokenisation: gpt-4o-mini
================================================================================

SCRIPT ANALYSÉ:
--------------------------------------------------------------------------------
n,m=[int(i)for i in input().split()]
def cmp(a,b): return 'Yes' if a==b else 'No'
print(cmp(n,m))
--------------------------------------------------------------------------------

RÉSULTATS D'ANALYSE TOKEN PAR TOKEN:
--------------------------------------------------------------------------------
Token 0: 'n' (ID: 77)
  → Token d'amorce (pas de prédiction)

Token 1: ',m' (ID: 26648)
  → Token d'amorce (pas de prédiction)

Token 2: '=[' (ID: 13370)
  → Token d'amorce (pas de prédiction)

Token 3: 'int' (ID: 491)
  Prédit: 'int'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'int' → logprob: -0.030719345435500145
    2. '0' → logprob: -3.53071928024292
    3. 'i' → logprob: -7.40571928024292
    4. ']int' → logprob: -8.405719757080078
    5. ']' → logprob: -9.655719757080078
    6. '[int' → logprob: -10.405719757080078
    7. 'map' → logprob: -11.155719757080078
    8. '(int' → logprob: -11.655719757080078
    9. '```' → logprob: -12.155719757080078
    10. 'n' → logprob: -12.280719757080078

Token 4: '(i' (ID: 3649)
  Prédit: '(x'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(x' → logprob: -0.46472612023353577
    2. '(' → logprob: -1.0897260904312134
    3. '(i' → logprob: -3.839726209640503
    4. ']' → logprob: -5.089725971221924
    5. '()]' → logprob: -5.089725971221924
    6. '(s' → logprob: -7.714725971221924
    7. '(input' → logprob: -7.964725971221924
    8. '(item' → logprob: -8.714726448059082
    9. '(a' → logprob: -8.964726448059082
    10. '(c' → logprob: -9.089726448059082

Token 5: ')' (ID: 8)
  Prédit: ')'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')' → logprob: -0.15346942842006683
    2. 'for' → logprob: -2.0284693241119385
    3. ' for' → logprob: -4.778469562530518
    4. '(x' → logprob: -6.403469562530518
    5. '(' → logprob: -8.15346908569336
    6. ' ' → logprob: -9.15346908569336
    7. ')]' → logprob: -9.77846908569336
    8. '(i' → logprob: -9.77846908569336
    9. ' )' → logprob: -10.40346908569336
    10. '()' → logprob: -10.52846908569336

Token 6: 'for' (ID: 1938)
  Prédit: 'for'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'for' → logprob: -0.1883482038974762
    2. ' for' → logprob: -1.8133481740951538
    3. '(x' → logprob: -5.313348293304443
    4. 'x' → logprob: -6.313348293304443
    5. ')' → logprob: -7.188348293304443
    6. '(' → logprob: -7.313348293304443
    7. ']' → logprob: -8.938347816467285
    8. ' ' → logprob: -9.563347816467285
    9. '```' → logprob: -9.938347816467285
    10. ' x' → logprob: -10.438347816467285

Token 7: ' i' (ID: 575)
  Prédit: ' input'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' input' → logprob: -0.3202592134475708
    2. 'input' → logprob: -1.9452592134475708
    3. ' ' → logprob: -2.5702590942382812
    4. '_' → logprob: -3.4452590942382812
    5. ' in' → logprob: -4.820259094238281
    6. ' i' → logprob: -5.070259094238281
    7. 'i' → logprob: -6.695259094238281
    8. ' range' → logprob: -6.820259094238281
    9. '_input' → logprob: -6.945259094238281
    10. '<|end|>' → logprob: -6.945259094238281

Token 8: ' in' (ID: 306)
  Prédit: ' input'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' input' → logprob: -0.13070560991764069
    2. 'input' → logprob: -2.5057055950164795
    3. ' in' → logprob: -3.3807055950164795
    4. '=input' → logprob: -5.505705833435059
    5. '(input' → logprob: -6.755705833435059
    6. '<|end|>' → logprob: -7.255705833435059
    7. 'in' → logprob: -7.630705833435059
    8. ' ' → logprob: -8.005705833435059
    9. '_input' → logprob: -10.130705833435059
    10. ',input' → logprob: -10.505705833435059

Token 9: ' input' (ID: 3422)
  Prédit: 'input'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'input' → logprob: -0.005234121344983578
    2. ' input' → logprob: -5.255234241485596
    3. '(input' → logprob: -15.130233764648438
    4. '=input' → logprob: -17.130233764648438
    5. '```' → logprob: -17.380233764648438
    6. '<input' → logprob: -17.505233764648438
    7. ',input' → logprob: -17.755233764648438
    8. '	input' → logprob: -18.880233764648438
    9. '[input' → logprob: -20.130233764648438
    10. ' ' → logprob: -20.255233764648438

Token 10: '().' (ID: 1454)
  Prédit: '()]'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '()]' → logprob: -0.05211195722222328
    2. '()' → logprob: -3.177111864089966
    3. '().' → logprob: -5.177112102508545
    4. '()][' → logprob: -6.302112102508545
    5. '(' → logprob: -7.927112102508545
    6. '()].' → logprob: -8.302111625671387
    7. ']()' → logprob: -8.302111625671387
    8. ']' → logprob: -8.552111625671387
    9. '()>' → logprob: -9.802111625671387
    10. '()],' → logprob: -9.802111625671387

Token 11: 'split' (ID: 13627)
  Prédit: 'split'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'split' → logprob: -0.00018113377154804766
    2. 'strip' → logprob: -8.750181198120117
    3. 'rstrip' → logprob: -10.750181198120117
    4. ' split' → logprob: -13.875181198120117
    5. '(split' → logprob: -15.875181198120117
    6. 'spl' → logprob: -16.625181198120117
    7. 'read' → logprob: -17.625181198120117
    8. 'replace' → logprob: -18.750181198120117
    9. 's' → logprob: -19.875181198120117
    10. '```' → logprob: -20.250181198120117

Token 12: '()]
' (ID: 67155)
  Prédit: '()]'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '()]' → logprob: -0.0020541429985314608
    2. '(' → logprob: -6.627054214477539
    3. '()' → logprob: -7.627054214477539
    4. ']' → logprob: -8.752054214477539
    5. '())' → logprob: -10.627054214477539
    6. '('' → logprob: -11.252054214477539
    7. ']()' → logprob: -11.252054214477539
    8. ')]' → logprob: -11.377054214477539
    9. '()][' → logprob: -12.002054214477539
    10. '()],' → logprob: -12.252054214477539

Token 13: 'def' (ID: 1314)
  Prédit: 'a'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'a' → logprob: -1.4289864301681519
    2. '
' → logprob: -1.9289864301681519
    3. ' ' → logprob: -2.3039865493774414
    4. 'for' → logprob: -2.5539865493774414
    5. '\n' → logprob: -2.9289865493774414
    6. '#' → logprob: -3.0539865493774414
    7. 'r' → logprob: -3.0539865493774414
    8. '`' → logprob: -3.1789865493774414
    9. 'n' → logprob: -3.3039865493774414
    10. ',' → logprob: -3.3039865493774414

Token 14: ' cmp' (ID: 57822)
  Prédit: ' dfs'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' dfs' → logprob: -0.6392866373062134
    2. ' f' → logprob: -1.6392866373062134
    3. ' solve' → logprob: -2.889286518096924
    4. ' solution' → logprob: -3.139286518096924
    5. ' a' → logprob: -3.514286518096924
    6. ' func' → logprob: -3.889286518096924
    7. ' main' → logprob: -4.139286518096924
    8. ' max' → logprob: -4.389286518096924
    9. ' factorial' → logprob: -4.389286518096924
    10. ' ' → logprob: -4.514286518096924

Token 15: '(a' (ID: 6271)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(' → logprob: -0.02744664065539837
    2. '_' → logprob: -4.152446746826172
    3. '(a' → logprob: -4.527446746826172
    4. '_(' → logprob: -8.652446746826172
    5. '(x' → logprob: -9.027446746826172
    6. 'a' → logprob: -9.777446746826172
    7. ' (' → logprob: -10.277446746826172
    8. '(_' → logprob: -10.527446746826172
    9. '(_)' → logprob: -10.527446746826172
    10. 's' → logprob: -11.402446746826172

Token 16: ',b' (ID: 17568)
  Prédit: ','
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ',' → logprob: -0.025882195681333542
    2. ',b' → logprob: -4.275882244110107
    3. ',a' → logprob: -4.650882244110107
    4. ' ,' → logprob: -6.775882244110107
    5. ',)' → logprob: -8.27588176727295
    6. ')' → logprob: -8.52588176727295
    7. ',c' → logprob: -9.77588176727295
    8. ',k' → logprob: -9.77588176727295
    9. ',p' → logprob: -10.02588176727295
    10. ',n' → logprob: -10.27588176727295

Token 17: '):' (ID: 3127)
  Prédit: '):'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '):' → logprob: -0.0014542824355885386
    2. ')' → logprob: -6.6264543533325195
    3. ' ):' → logprob: -9.37645435333252
    4. ',' → logprob: -10.50145435333252
    5. '):
' → logprob: -12.12645435333252
    6. ',a' → logprob: -12.37645435333252
    7. ':' → logprob: -13.87645435333252
    8. ')):' → logprob: -14.50145435333252
    9. ']:' → logprob: -14.62645435333252
    10. ',b' → logprob: -14.87645435333252

Token 18: ' return' (ID: 622)
  Prédit: ':'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ':' → logprob: -0.013169880956411362
    2. ' ' → logprob: -5.013169765472412
    3. ':return' → logprob: -6.138169765472412
    4. '   ' → logprob: -6.513169765472412
    5. ' :' → logprob: -6.763169765472412
    6. ' return' → logprob: -8.01317024230957
    7. '):' → logprob: -8.13817024230957
    8. ':
' → logprob: -8.38817024230957
    9. '-' → logprob: -9.13817024230957
    10. ',' → logprob: -9.13817024230957

Token 19: ' '' (ID: 461)
  Prédit: '(a'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '(a' → logprob: -0.5493081212043762
    2. '(' → logprob: -2.0493080615997314
    3. ' (' → logprob: -2.0493080615997314
    4. 'a' → logprob: -2.2993080615997314
    5. '-' → logprob: -3.4243080615997314
    6. '1' → logprob: -4.2993083000183105
    7. ' ' → logprob: -5.0493083000183105
    8. ' a' → logprob: -5.2993083000183105
    9. '0' → logprob: -5.4243083000183105
    10. ' -' → logprob: -6.4243083000183105

Token 20: 'Yes' (ID: 13022)
  Prédit: '<''
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '<'' → logprob: -1.0699517726898193
    2. '-' → logprob: -1.5699517726898193
    3. 'a' → logprob: -1.9449517726898193
    4. '>'' → logprob: -2.3199517726898193
    5. '1' → logprob: -2.9449517726898193
    6. '>' → logprob: -3.4449517726898193
    7. '(a' → logprob: -3.6949517726898193
    8. '<' → logprob: -3.6949517726898193
    9. ''' → logprob: -4.194952011108398
    10. '-'' → logprob: -4.694952011108398

Token 21: ''' (ID: 6)
  Prédit: '''
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ''' → logprob: -0.007692271377891302
    2. '\n' → logprob: -4.882692337036133
    3. ' if' → logprob: -10.007692337036133
    4. 'if' → logprob: -10.507692337036133
    5. ' '' → logprob: -11.757692337036133
    6. '"' → logprob: -12.507692337036133
    7. '

' → logprob: -14.257692337036133
    8. 'n' → logprob: -15.382692337036133
    9. '
' → logprob: -15.382692337036133
    10. '\' → logprob: -16.132692337036133

Token 22: ' if' (ID: 538)
  Prédit: ''
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False

Token 23: ' a' (ID: 261)
  Prédit: 'a'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'a' → logprob: -0.42984500527381897
    2. ' a' → logprob: -1.0548449754714966
    3. ' abs' → logprob: -7.054844856262207
    4. 'abs' → logprob: -9.304844856262207
    5. '(a' → logprob: -9.429844856262207
    6. ' ' → logprob: -10.304844856262207
    7. ' (' → logprob: -10.429844856262207
    8. ' len' → logprob: -11.804844856262207
    9. '(' → logprob: -12.054844856262207
    10. ' b' → logprob: -12.554844856262207

Token 24: '==' (ID: 560)
  Prédit: '>'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '>' → logprob: -0.5448023080825806
    2. '==' → logprob: -1.1698023080825806
    3. ' >' → logprob: -3.169802188873291
    4. ' ==' → logprob: -3.919802188873291
    5. '<' → logprob: -4.169802188873291
    6. '<=' → logprob: -4.294802188873291
    7. '>=' → logprob: -5.044802188873291
    8. '>b' → logprob: -5.669802188873291
    9. '%' → logprob: -5.919802188873291
    10. ' <' → logprob: -6.044802188873291

Token 25: 'b' (ID: 65)
  Prédit: 'b'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'b' → logprob: -0.005940413102507591
    2. ' b' → logprob: -5.1309404373168945
    3. ' ' → logprob: -11.505940437316895
    4. 'a' → logprob: -15.005940437316895
    5. '=' → logprob: -15.380940437316895
    6. '=b' → logprob: -15.630940437316895
    7. 'm' → logprob: -15.755940437316895
    8. ''b' → logprob: -16.130939483642578
    9. '	b' → logprob: -16.130939483642578
    10. '>b' → logprob: -16.130939483642578

Token 26: ' else' (ID: 1203)
  Prédit: ' else'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' else' → logprob: -0.25202423334121704
    2. 'else' → logprob: -1.5020241737365723
    3. ' ' → logprob: -10.37702465057373
    4. '+' → logprob: -10.62702465057373
    5. '```' → logprob: -10.87702465057373
    6. '	else' → logprob: -12.50202465057373
    7. '  ' → logprob: -12.87702465057373
    8. '-' → logprob: -13.00202465057373
    9. '   ' → logprob: -13.50202465057373
    10. '>' → logprob: -13.87702465057373

Token 27: ' '' (ID: 461)
  Prédit: '''
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ''' → logprob: -4.9186317482963204e-05
    2. '"' → logprob: -10.625049591064453
    3. ' '' → logprob: -11.250049591064453
    4. ' ' → logprob: -12.250049591064453
    5. '''' → logprob: -12.625049591064453
    6. '`' → logprob: -13.625049591064453
    7. '

' → logprob: -14.812549591064453
    8. ''\' → logprob: -14.937549591064453
    9. '```' → logprob: -15.062549591064453
    10. '   ' → logprob: -15.625049591064453

Token 28: 'No' (ID: 3160)
  Prédit: '''
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ''' → logprob: -0.0021533535327762365
    2. 'No' → logprob: -6.752153396606445
    3. ' '' → logprob: -7.377153396606445
    4. ' No' → logprob: -8.627153396606445
    5. ' ' → logprob: -9.752153396606445
    6. '"No' → logprob: -9.752153396606445
    7. '''' → logprob: -10.877153396606445
    8. '   ' → logprob: -11.502153396606445
    9. '  ' → logprob: -11.877153396606445
    10. '	' → logprob: -12.439653396606445

Token 29: ''
' (ID: 2207)
  Prédit: '''
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ''' → logprob: -5.1928003813372925e-05
    2. '<|end|>' → logprob: -10.625051498413086
    3. '```' → logprob: -11.500051498413086
    4. '"' → logprob: -11.750051498413086
    5. '')' → logprob: -13.000051498413086
    6. ''''' → logprob: -13.250051498413086
    7. ''
' → logprob: -13.875051498413086
    8. '<|end|>' → logprob: -14.250051498413086
    9. '\n' → logprob: -14.500051498413086
    10. '']' → logprob: -15.125051498413086

Token 30: 'print' (ID: 1598)
  Prédit: '
'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '
' → logprob: -0.432987779378891
    2. 'a' → logprob: -1.6829878091812134
    3. 'n' → logprob: -2.182987689971924
    4. 'print' → logprob: -4.432987689971924
    5. ' 
' → logprob: -4.932987689971924
    6. 'x' → logprob: -4.932987689971924
    7. 'm' → logprob: -5.557987689971924
    8. '' → logprob: -5.557987689971924
    9. '  
' → logprob: -5.807987689971924
    10. '<|end|>' → logprob: -5.807987689971924

Token 31: '(c' (ID: 2410)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(' → logprob: -0.026618758216500282
    2. '(c' → logprob: -3.651618719100952
    3. '('' → logprob: -8.401618957519531
    4. '()' → logprob: -10.026618957519531
    5. '(cm' → logprob: -11.401618957519531
    6. '((' → logprob: -11.901618957519531
    7. '(n' → logprob: -12.276618957519531
    8. '(comp' → logprob: -12.276618957519531
    9. '(
' → logprob: -13.026618957519531
    10. '("' → logprob: -13.026618957519531

Token 32: 'mp' (ID: 2211)
  Prédit: 'mp'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'mp' → logprob: -0.001993943238630891
    2. 'm' → logprob: -6.2519941329956055
    3. 'p' → logprob: -9.876994132995605
    4. 'mpr' → logprob: -11.876994132995605
    5. 'pm' → logprob: -13.376994132995605
    6. 'np' → logprob: -13.751994132995605
    7. '(mp' → logprob: -14.126994132995605
    8. 'omp' → logprob: -14.126994132995605
    9. ' mp' → logprob: -15.001994132995605
    10. '(m' → logprob: -15.126994132995605

Token 33: '(n' (ID: 2406)
  Prédit: '(n'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(n' → logprob: -0.47657838463783264
    2. '(' → logprob: -1.2265783548355103
    3. '(m' → logprob: -2.4765784740448
    4. '(a' → logprob: -7.351578235626221
    5. '((' → logprob: -7.726578235626221
    6. '('' → logprob: -8.351578712463379
    7. ')' → logprob: -9.351578712463379
    8. '(s' → logprob: -9.726578712463379
    9. '(
' → logprob: -9.851578712463379
    10. '(int' → logprob: -10.226578712463379

Token 34: ',m' (ID: 26648)
  Prédit: ','
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ',' → logprob: -0.48840826749801636
    2. ',m' → logprob: -0.9884082674980164
    3. ' ,' → logprob: -4.363408088684082
    4. ',n' → logprob: -6.988408088684082
    5. ' ' → logprob: -8.363408088684082
    6. ' m' → logprob: -8.988408088684082
    7. 'm' → logprob: -9.113408088684082
    8. ',b' → logprob: -10.113408088684082
    9. '+m' → logprob: -11.113408088684082
    10. ',
' → logprob: -12.363408088684082

Token 35: '))' (ID: 915)
  Prédit: '))'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '))' → logprob: -0.005236717872321606
    2. ')' → logprob: -5.255236625671387
    3. ')))' → logprob: -13.255236625671387
    4. ' ))' → logprob: -14.380236625671387
    5. '))
' → logprob: -14.880236625671387
    6. '),' → logprob: -16.505237579345703
    7. ' ' → logprob: -16.755237579345703
    8. ''))' → logprob: -17.630237579345703
    9. ' )' → logprob: -18.130237579345703
    10. ')}' → logprob: -18.255237579345703


RÉSUMÉ:
--------------------------------------------------------------------------------
Total des tokens analysés: 33
Tokens correctement prédits (1ère position, stricte): 11
Tokens correctement prédits (1ère position, avec adaptation): 11
Tokens correctement prédits (top 10): 27
Précision stricte (1ère position): 33.33%
Précision adaptée (1ère position): 33.33%
Précision (top 10): 81.82%
================================================================================
