================================================================================
ANALYSE DE PRÉDICTION TOKEN PAR TOKEN (BATCH API)
Date: 2025-06-04 20:01:54
Modèle de tokenisation: gpt-4o-mini
================================================================================

SCRIPT ANALYSÉ:
--------------------------------------------------------------------------------
def read_integer_list(prompt):
    """
    Lit une ligne d'entrées séparées par des espaces et retourne une liste d'entiers.
    
    Args:
        prompt (str): Le message à afficher pour demander l'entrée utilisateur.
        
    Returns:
        list of int: Une liste d'entiers extraite de l'entrée utilisateur.
    """
    return list(map(int, input(prompt).split()))

def calculate_max_profit(values, costs):
    """
    Calcule le profit maximal pouvant être obtenu, en choisissant les éléments 
    ayant un profit positif (profit = value - cost).
    
    Args:
        values (list of int): La liste des valeurs pour chaque article.
        costs (list of int): La liste des coûts pour chaque article.
        
    Returns:
        int: La somme maximale des profits positifs triés par ordre décroissant.
    """
    # Calculer le profit pour chaque élément
    profit_list = []
    for i in range(len(values)):
        profit = values[i] - costs[i]
        profit_list.append(profit)
    
    # Trier la liste des profits en ordre décroissant pour d'abord traiter les plus grands profits
    profit_list.sort(reverse=True)
    
    # Cumuler les profits tant qu'ils sont strictement positifs
    max_profit = 0
    for profit in profit_list:
        if profit <= 0:
            # Arrêter le cumul si on atteint un profit nul ou négatif
            break
        max_profit += profit
    
    return max_profit

def main():
    """
    Point d'entrée principal du script.
    Lit les entrées utilisateur, calcule et affiche le profit maximal possible.
    """
    # Lire le nombre d'éléments à traiter
    N = int(input())
    
    # Lire la liste des valeurs associées aux éléments
    value_lst = read_integer_list('')
    
    # Lire la liste des coûts associés aux éléments
    cost_lst = read_integer_list('')
    
    # Calculer et afficher le profit maximal possible
    plofit_max = calculate_max_profit(value_lst, cost_lst)
    print(plofit_max)

# Exécuter le script principal si ce fichier est exécuté directement
if __name__ == "__main__":
    main()
--------------------------------------------------------------------------------

RÉSULTATS D'ANALYSE TOKEN PAR TOKEN:
--------------------------------------------------------------------------------
Token 0: 'def' (ID: 1314)
  → Token d'amorce (pas de prédiction)

Token 1: ' read' (ID: 1729)
  → Token d'amorce (pas de prédiction)

Token 2: '_integer' (ID: 82911)
  → Token d'amorce (pas de prédiction)

Token 3: '_list' (ID: 4162)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '(' → logprob: -0.0626840740442276
    2. '_' → logprob: -2.8126840591430664
    3. '```' → logprob: -7.937684059143066
    4. ':' → logprob: -9.562684059143066
    5. '(_:' → logprob: -9.812684059143066
    6. '(_' → logprob: -9.812684059143066
    7. ' (' → logprob: -10.187684059143066
    8. '():' → logprob: -10.312684059143066
    9. '_:' → logprob: -10.687684059143066
    10. '(:' → logprob: -10.812684059143066

Token 4: '(prompt' (ID: 148306)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '(' → logprob: -0.014760617166757584
    2. '():' → logprob: -4.389760494232178
    3. '_' → logprob: -6.889760494232178
    4. '```' → logprob: -7.764760494232178
    5. '(:' → logprob: -8.139760971069336
    6. ':' → logprob: -8.639760971069336
    7. '(_:' → logprob: -8.764760971069336
    8. '(_' → logprob: -10.639760971069336
    9. ' (' → logprob: -10.889760971069336
    10. '("("' → logprob: -11.014760971069336

Token 5: '):
' (ID: 1883)
  Prédit: '):'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '):' → logprob: -0.005675753112882376
    2. ')' → logprob: -5.255675792694092
    3. ':' → logprob: -8.505675315856934
    4. '):
' → logprob: -9.255675315856934
    5. '```' → logprob: -9.505675315856934
    6. ''):' → logprob: -11.505675315856934
    7. '**' → logprob: -11.630675315856934
    8. '"):' → logprob: -11.880675315856934
    9. '():' → logprob: -11.880675315856934
    10. ',' → logprob: -12.505675315856934

Token 6: '   ' (ID: 271)
  Prédit: ':'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ':' → logprob: -0.22133837640285492
    2. '```' → logprob: -2.0963382720947266
    3. '   ' → logprob: -3.0963382720947266
    4. '():' → logprob: -3.8463382720947266
    5. ':return' → logprob: -6.221338272094727
    6. '    
' → logprob: -6.971338272094727
    7. '(' → logprob: -7.096338272094727
    8. ':
' → logprob: -7.346338272094727
    9. '``' → logprob: -7.346338272094727
    10. '):' → logprob: -7.596338272094727

Token 7: ' """
' (ID: 7037)
  Prédit: '```'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '```' → logprob: -0.5896317958831787
    2. '   ' → logprob: -1.8396317958831787
    3. 'return' → logprob: -1.8396317958831787
    4. ' return' → logprob: -2.9646317958831787
    5. ' ' → logprob: -3.4646317958831787
    6. '`' → logprob: -3.8396317958831787
    7. 'input' → logprob: -5.339632034301758
    8. '    ' → logprob: -5.839632034301758
    9. 'x' → logprob: -6.089632034301758
    10. '``' → logprob: -6.464632034301758

Token 8: '   ' (ID: 271)
  Prédit: '"""'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '"""' → logprob: -0.8282524943351746
    2. '   ' → logprob: -1.7032525539398193
    3. 'Returns' → logprob: -1.8282525539398193
    4. ' Reads' → logprob: -2.9532525539398193
    5. 'Reads' → logprob: -3.2032525539398193
    6. ' reads' → logprob: -3.4532525539398193
    7. ' """' → logprob: -3.8282525539398193
    8. ''''' → logprob: -4.57825231552124
    9. 'r' → logprob: -4.70325231552124
    10. 'Read' → logprob: -4.95325231552124

Token 9: ' Lit' (ID: 45595)
  Prédit: 'Reads'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'Reads' → logprob: -0.2929985225200653
    2. '"""' → logprob: -2.5429985523223877
    3. 'Read' → logprob: -2.9179985523223877
    4. 'Returns' → logprob: -3.1679985523223877
    5. '   ' → logprob: -3.2929985523223877
    6. 'R' → logprob: -3.6679985523223877
    7. 'Return' → logprob: -5.417998313903809
    8. 'Re' → logprob: -5.667998313903809
    9. ' Reads' → logprob: -6.417998313903809
    10. ''''' → logprob: -7.042998313903809

Token 10: ' une' (ID: 2463)
  Prédit: 'er'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'er' → logprob: -0.32749852538108826
    2. 'e' → logprob: -1.3274985551834106
    3. 'eral' → logprob: -5.702498435974121
    4. 'éral' → logprob: -5.952498435974121
    5. 're' → logprob: -6.577498435974121
    6. 'ère' → logprob: -6.827498435974121
    7. 'é' → logprob: -6.952498435974121
    8. 'érale' → logprob: -7.202498435974121
    9. 'ér' → logprob: -7.577498435974121
    10. 'érer' → logprob: -7.577498435974121

Token 11: ' ligne' (ID: 19583)
  Prédit: ' liste'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' liste' → logprob: -0.1883043497800827
    2. ' ' → logprob: -2.0633044242858887
    3. 'liste' → logprob: -4.063304424285889
    4. ' une' → logprob: -4.563304424285889
    5. '   ' → logprob: -5.063304424285889
    6. ' ent' → logprob: -5.938304424285889
    7. 'ent' → logprob: -6.563304424285889
    8. ' entier' → logprob: -7.063304424285889
    9. 'une' → logprob: -7.188304424285889
    10. ' list' → logprob: -7.313304424285889

Token 12: ' d' (ID: 272)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.39781346917152405
    2. ' et' → logprob: -1.8978134393692017
    3. '\n' → logprob: -2.897813558578491
    4. ' ' → logprob: -2.897813558578491
    5. ' de' → logprob: -4.022813320159912
    6. 's' → logprob: -4.522813320159912
    7. ',' → logprob: -4.897813320159912
    8. ' en' → logprob: -5.397813320159912
    9. 'e' → logprob: -5.397813320159912
    10. '\' → logprob: -5.522813320159912

Token 13: ''' (ID: 6)
  Prédit: 'entrée'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'entrée' → logprob: -0.6530700325965881
    2. ''entrée' → logprob: -1.2780699729919434
    3. 'ent' → logprob: -1.7780699729919434
    4. ''ent' → logprob: -3.5280699729919434
    5. 'e' → logprob: -7.028069972991943
    6. 'entr' → logprob: -7.278069972991943
    7. ' entrée' → logprob: -8.528070449829102
    8. '’entrée' → logprob: -9.028070449829102
    9. ' ent' → logprob: -9.278070449829102
    10. 'input' → logprob: -9.403070449829102

Token 14: 'entr' (ID: 12792)
  Prédit: 'entrée'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'entrée' → logprob: -0.08004190772771835
    2. 'ent' → logprob: -2.9550418853759766
    3. ''entrée' → logprob: -3.8300418853759766
    4. ''ent' → logprob: -6.955041885375977
    5. 'entr' → logprob: -7.330041885375977
    6. ' entrée' → logprob: -7.455041885375977
    7. 'input' → logprob: -8.330041885375977
    8. 'inte' → logprob: -8.830041885375977
    9. ' entr' → logprob: -9.080041885375977
    10. 'e' → logprob: -9.705041885375977

Token 15: 'ées' (ID: 5161)
  Prédit: 'ée'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'ée' → logprob: -0.0026542514096945524
    2. 'ées' → logprob: -6.252654075622559
    3. 'é' → logprob: -7.252654075622559
    4. 'e' → logprob: -11.252654075622559
    5. 'ee' → logprob: -13.377654075622559
    6. 'è' → logprob: -13.752654075622559
    7. '\xe' → logprob: -15.502654075622559
    8. 'és' → logprob: -15.627654075622559
    9. 'éer' → logprob: -15.877654075622559
    10. '\x' → logprob: -16.002655029296875

Token 16: ' sépar' (ID: 97160)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.5174843668937683
    2. 's' → logprob: -1.767484426498413
    3. ' en' → logprob: -2.267484426498413
    4. ' de' → logprob: -2.892484426498413
    5. ' et' → logprob: -4.892484188079834
    6. 'es' → logprob: -5.017484188079834
    7. ' ' → logprob: -5.392484188079834
    8. ' )' → logprob: -5.392484188079834
    9. 'de' → logprob: -5.517484188079834
    10. ',' → logprob: -5.517484188079834

Token 17: 'ées' (ID: 5161)
  Prédit: 'ées'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'ées' → logprob: -0.003696039319038391
    2. 'és' → logprob: -6.128695964813232
    3. 'é' → logprob: -7.128695964813232
    4. 'ée' → logprob: -8.25369644165039
    5. 'par' → logprob: -8.37869644165039
    6. ' par' → logprob: -9.00369644165039
    7. 'es' → logprob: -9.62869644165039
    8. 'ees' → logprob: -12.12869644165039
    9. '```' → logprob: -12.25369644165039
    10. '-' → logprob: -12.87869644165039

Token 18: ' par' (ID: 686)
  Prédit: 'par'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'par' → logprob: -0.4028647541999817
    2. ' par' → logprob: -1.152864694595337
    3. 'es' → logprob: -4.277864933013916
    4. '```' → logprob: -7.277864933013916
    5. '"""' → logprob: -7.777864933013916
    6. '(par' → logprob: -8.277864456176758
    7. 's' → logprob: -8.527864456176758
    8. '_par' → logprob: -9.777864456176758
    9. '  ' → logprob: -10.027864456176758
    10. ',' → logprob: -10.402864456176758

Token 19: ' des' (ID: 731)
  Prédit: 'des'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'des' → logprob: -0.3228188455104828
    2. ' des' → logprob: -1.3228188753128052
    3. 'un' → logprob: -4.947818756103516
    4. 'esp' → logprob: -6.572818756103516
    5. 'es' → logprob: -8.197818756103516
    6. ' un' → logprob: -8.447818756103516
    7. ' espaces' → logprob: -8.447818756103516
    8. 'spaces' → logprob: -9.197818756103516
    9. '```' → logprob: -10.072818756103516
    10. '_des' → logprob: -10.697818756103516

Token 20: ' espaces' (ID: 98361)
  Prédit: 'esp'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'esp' → logprob: -0.08643488585948944
    2. ' espaces' → logprob: -2.711434841156006
    3. 'es' → logprob: -4.836434841156006
    4. ''esp' → logprob: -4.961434841156006
    5. 'spaces' → logprob: -6.961434841156006
    6. ''espace' → logprob: -8.336435317993164
    7. '```' → logprob: -9.836435317993164
    8. 'space' → logprob: -10.211435317993164
    9. '   ' → logprob: -10.211435317993164
    10. '’esp' → logprob: -10.211435317993164

Token 21: ' et' (ID: 859)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.12018831074237823
    2. '.' → logprob: -3.4951882362365723
    3. ' ' → logprob: -4.120188236236572
    4. 'e' → logprob: -4.370188236236572
    5. ' et' → logprob: -4.370188236236572
    6. ',' → logprob: -4.745188236236572
    7. '\n' → logprob: -5.245188236236572
    8. '    ' → logprob: -5.495188236236572
    9. ' en' → logprob: -5.620188236236572
    10. ''' → logprob: -6.370188236236572

Token 22: ' retourne' (ID: 178818)
  Prédit: ' retourne'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' retourne' → logprob: -0.9076888561248779
    2. ' ren' → logprob: -1.532688856124878
    3. 'ren' → logprob: -1.782688856124878
    4. 'ret' → logprob: -2.407688856124878
    5. '   ' → logprob: -2.532688856124878
    6. 'return' → logprob: -3.657688856124878
    7. ' return' → logprob: -5.282689094543457
    8. ' convert' → logprob: -5.407689094543457
    9. 'convert' → logprob: -6.157689094543457
    10. ' la' → logprob: -6.782689094543457

Token 23: ' une' (ID: 2463)
  Prédit: ' la'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' la' → logprob: -0.15401969850063324
    2. ' ' → logprob: -2.529019594192505
    3. ' des' → logprob: -3.404019594192505
    4. 's' → logprob: -4.904019832611084
    5. ' une' → logprob: -5.154019832611084
    6. '   ' → logprob: -5.654019832611084
    7. 'la' → logprob: -5.904019832611084
    8. ' les' → logprob: -6.404019832611084
    9. ' ' → logprob: -6.654019832611084
    10. '    ' → logprob: -6.654019832611084

Token 24: ' liste' (ID: 31719)
  Prédit: ' liste'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' liste' → logprob: -0.017336364835500717
    2. ' ' → logprob: -4.392336368560791
    3. 'liste' → logprob: -5.642336368560791
    4. ' list' → logprob: -7.142336368560791
    5. '   ' → logprob: -8.017335891723633
    6. 'list' → logprob: -10.142335891723633
    7. ' listes' → logprob: -11.017335891723633
    8. ' Liste' → logprob: -11.017335891723633
    9. 'ent' → logprob: -11.267335891723633
    10. 'int' → logprob: -11.517335891723633

Token 25: ' d' (ID: 272)
  Prédit: ' de'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' de' → logprob: -0.3289041519165039
    2. ' des' → logprob: -1.578904151916504
    3. ' d' → logprob: -3.203904151916504
    4. ' of' → logprob: -4.828904151916504
    5. ' ' → logprob: -4.953904151916504
    6. '[' → logprob: -5.453904151916504
    7. '<|end|>' → logprob: -6.203904151916504
    8. 'd' → logprob: -6.453904151916504
    9. 'de' → logprob: -6.578904151916504
    10. '[int' → logprob: -6.703904151916504

Token 26: ''ent' (ID: 53422)
  Prédit: ''ent'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ''ent' → logprob: -0.0014141658321022987
    2. ''' → logprob: -7.6264142990112305
    3. 'ent' → logprob: -7.7514142990112305
    4. '’ent' → logprob: -8.25141429901123
    5. 'e' → logprob: -8.62641429901123
    6. ''e' → logprob: -11.12641429901123
    7. ''int' → logprob: -11.25141429901123
    8. ''in' → logprob: -12.37641429901123
    9. '_ent' → logprob: -12.62641429901123
    10. ''é' → logprob: -13.12641429901123

Token 27: 'iers' (ID: 11012)
  Prédit: 'iers'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'iers' → logprob: -0.387580931186676
    2. 'i' → logprob: -1.1375808715820312
    3. 'ières' → logprob: -7.762580871582031
    4. 'ié' → logprob: -8.512580871582031
    5. '_i' → logprob: -10.137580871582031
    6. '```' → logprob: -10.887580871582031
    7. ' i' → logprob: -11.762580871582031
    8. '   ' → logprob: -12.012580871582031
    9. 'ier' → logprob: -13.012580871582031
    10. '	i' → logprob: -13.512580871582031

Token 28: '.
' (ID: 558)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.016948264092206955
    2. '\n' → logprob: -5.266948223114014
    3. '.' → logprob: -5.516948223114014
    4. '    
' → logprob: -5.891948223114014
    5. '    ' → logprob: -6.891948223114014
    6. '\' → logprob: -7.516948223114014
    7. '```' → logprob: -7.516948223114014
    8. ' ' → logprob: -7.766948223114014
    9. '  
' → logprob: -8.266948699951172
    10. ')' → logprob: -8.391948699951172

Token 29: '    
' (ID: 1944)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.5448888540267944
    2. '"""' → logprob: -0.9198888540267944
    3. '"""
' → logprob: -5.294888973236084
    4. ' """' → logprob: -5.294888973236084
    5. '"' → logprob: -5.919888973236084
    6. '\n' → logprob: -6.169888973236084
    7. '""' → logprob: -6.294888973236084
    8. '    ' → logprob: -6.419888973236084
    9. '```' → logprob: -7.044888973236084
    10. ')' → logprob: -7.419888973236084

Token 30: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.0019360085716471076
    2. '"""' → logprob: -6.751935958862305
    3. ' """' → logprob: -8.001935958862305
    4. 'return' → logprob: -8.626935958862305
    5. '    ' → logprob: -9.501935958862305
    6. ')' → logprob: -10.126935958862305
    7. '```' → logprob: -10.251935958862305
    8. ' return' → logprob: -10.876935958862305
    9. ' ' → logprob: -10.876935958862305
    10. '  ' → logprob: -11.376935958862305

Token 31: ' Args' (ID: 39185)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.2379617542028427
    2. 'return' → logprob: -1.612961769104004
    3. '"""' → logprob: -5.737961769104004
    4. 'user' → logprob: -6.612961769104004
    5. 'result' → logprob: -6.862961769104004
    6. ' return' → logprob: -7.237961769104004
    7. 'input' → logprob: -7.237961769104004
    8. 'lines' → logprob: -7.237961769104004
    9. 'try' → logprob: -7.362961769104004
    10. 'line' → logprob: -7.612961769104004

Token 32: ':
' (ID: 734)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.30888426303863525
    2. '):' → logprob: -2.1838841438293457
    3. ' :' → logprob: -2.5588841438293457
    4. ':' → logprob: -2.9338841438293457
    5. ')' → logprob: -4.433884143829346
    6. '):
' → logprob: -5.808884143829346
    7. ',' → logprob: -5.933884143829346
    8. ' ):' → logprob: -6.933884143829346
    9. '<|end|>' → logprob: -7.183884143829346
    10. 'def' → logprob: -7.308884143829346

Token 33: '       ' (ID: 309)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.014464933425188065
    2. 'prompt' → logprob: -5.264464855194092
    3. ' prompt' → logprob: -5.389464855194092
    4. '    ' → logprob: -5.514464855194092
    5. ')' → logprob: -8.76446533203125
    6. '       ' → logprob: -8.88946533203125
    7. '```' → logprob: -9.51446533203125
    8. ' str' → logprob: -10.01446533203125
    9. ' )' → logprob: -10.13946533203125
    10. ' ' → logprob: -11.13946533203125

Token 34: ' prompt' (ID: 15226)
  Prédit: 'prompt'
  Correct (stricte): False
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'prompt' (adapté à ' prompt') → logprob: -0.01678956113755703
    2. '   ' → logprob: -4.141789436340332
    3. ' prompt' → logprob: -7.641789436340332
    4. 'self' → logprob: -8.641789436340332
    5. 'str' → logprob: -10.516789436340332
    6. '       ' → logprob: -11.016789436340332
    7. 'prom' → logprob: -11.141789436340332
    8. '(prompt' → logprob: -11.641789436340332
    9. 'line' → logprob: -12.516789436340332
    10. 'input' → logprob: -13.016789436340332

Token 35: ' (' (ID: 350)
  Prédit: '):'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '):' → logprob: -0.022642558440566063
    2. ')' → logprob: -4.272642612457275
    3. ':' → logprob: -5.397642612457275
    4. '=' → logprob: -5.772642612457275
    5. '   ' → logprob: -8.022642135620117
    6. '):
' → logprob: -8.272642135620117
    7. ' ):' → logprob: -9.397642135620117
    8. ' ' → logprob: -10.397642135620117
    9. '=None' → logprob: -10.522642135620117
    10. ' :' → logprob: -10.522642135620117

Token 36: 'str' (ID: 689)
  Prédit: 'str'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'str' → logprob: -0.0038498362991958857
    2. ' str' → logprob: -6.253849983215332
    3. ')' → logprob: -6.378849983215332
    4. '):' → logprob: -8.503849983215332
    5. '[str' → logprob: -11.503849983215332
    6. '   ' → logprob: -12.128849983215332
    7. '(str' → logprob: -13.628849983215332
    8. 'string' → logprob: -14.003849983215332
    9. '	str' → logprob: -14.378849983215332
    10. 'prompt' → logprob: -14.628849983215332

Token 37: '):' (ID: 3127)
  Prédit: '):'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '):' → logprob: -0.08898582309484482
    2. ')' → logprob: -2.4639859199523926
    3. '):
' → logprob: -10.588985443115234
    4. '   ' → logprob: -11.588985443115234
    5. '):

' → logprob: -12.963985443115234
    6. ':' → logprob: -12.963985443115234
    7. ' ):' → logprob: -13.088985443115234
    8. ''):' → logprob: -13.838985443115234
    9. '"):' → logprob: -14.588985443115234
    10. '),' → logprob: -15.338985443115234

Token 38: ' Le' (ID: 2018)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')' → logprob: -0.3109361231327057
    2. ' str' → logprob: -1.8109360933303833
    3. '   ' → logprob: -3.310936212539673
    4. ' ' → logprob: -3.810936212539673
    5. '    ' → logprob: -4.185935974121094
    6. ' )' → logprob: -4.810935974121094
    7. ' La' → logprob: -5.435935974121094
    8. 'str' → logprob: -5.685935974121094
    9. 'La' → logprob: -6.435935974121094
    10. ' Le' → logprob: -6.560935974121094

Token 39: ' message' (ID: 3176)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -1.1196609735488892
    2. ' prompt' → logprob: -1.1196609735488892
    3. ' message' → logprob: -1.8696609735488892
    4. ' texte' → logprob: -2.8696608543395996
    5. '    ' → logprob: -3.3696608543395996
    6. 'prompt' → logprob: -3.4946608543395996
    7. ' ' → logprob: -4.2446608543396
    8. 'message' → logprob: -4.2446608543396
    9. 'texte' → logprob: -4.3696608543396
    10. ')' → logprob: -4.7446608543396

Token 40: ' à' (ID: 1221)
  Prédit: ' à'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' à' → logprob: -0.9767951369285583
    2. ')' → logprob: -1.6017951965332031
    3. '   ' → logprob: -1.7267951965332031
    4. ' )' → logprob: -2.101795196533203
    5. ' ' → logprob: -2.726795196533203
    6. ' d' → logprob: -3.226795196533203
    7. ' affich' → logprob: -5.101795196533203
    8. ' a' → logprob: -6.476795196533203
    9. 'd' → logprob: -6.726795196533203
    10. ' pour' → logprob: -7.101795196533203

Token 41: ' afficher' (ID: 146524)
  Prédit: ' afficher'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' afficher' → logprob: -0.4748849868774414
    2. 'aff' → logprob: -0.9748849868774414
    3. 'display' → logprob: -7.849884986877441
    4. 'Afficher' → logprob: -8.349884986877441
    5. ' aff' → logprob: -9.349884986877441
    6. ''aff' → logprob: -10.349884986877441
    7. ' affich' → logprob: -10.849884986877441
    8. '   ' → logprob: -10.974884986877441
    9. ' ' → logprob: -12.099884986877441
    10. '_aff' → logprob: -12.349884986877441

Token 42: ' pour' (ID: 1930)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')' → logprob: -0.03329569473862648
    2. '   ' → logprob: -3.7832956314086914
    3. ' )' → logprob: -5.033295631408691
    4. ' pour' → logprob: -6.783295631408691
    5. ' lors' → logprob: -7.158295631408691
    6. ')
' → logprob: -7.283295631408691
    7. ' ' → logprob: -8.533295631408691
    8. '       ' → logprob: -8.783295631408691
    9. '")' → logprob: -9.408295631408691
    10. ' à' → logprob: -9.533295631408691

Token 43: ' demander' (ID: 60771)
  Prédit: ' l'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' l' → logprob: -0.2849935293197632
    2. ' demander' → logprob: -1.9099935293197632
    3. 'l' → logprob: -3.1599936485290527
    4. ' input' → logprob: -3.9099936485290527
    5. ' inviter' → logprob: -4.284993648529053
    6. 'input' → logprob: -4.784993648529053
    7. ' afficher' → logprob: -5.534993648529053
    8. ' ' → logprob: -5.784993648529053
    9. ' la' → logprob: -6.284993648529053
    10. ' solicitar' → logprob: -6.784993648529053

Token 44: ' l' (ID: 305)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')' → logprob: -0.4351643919944763
    2. ' )' → logprob: -1.685164451599121
    3. ' la' → logprob: -2.685164451599121
    4. ' l' → logprob: -3.435164451599121
    5. ' à' → logprob: -3.685164451599121
    6. 'l' → logprob: -4.310164451599121
    7. ' ' → logprob: -4.435164451599121
    8. ' une' → logprob: -4.685164451599121
    9. 'input' → logprob: -5.810164451599121
    10. 'le' → logprob: -7.435164451599121

Token 45: ''entrée' (ID: 115820)
  Prédit: 'e'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'e' → logprob: -0.15381202101707458
    2. 'a' → logprob: -2.9038119316101074
    3. ''utilisateur' → logprob: -3.0288119316101074
    4. ''entrée' → logprob: -4.278811931610107
    5. '   ' → logprob: -4.528811931610107
    6. 'es' → logprob: -5.153811931610107
    7. ''ent' → logprob: -6.153811931610107
    8. 'u' → logprob: -6.653811931610107
    9. 'entrée' → logprob: -6.778811931610107
    10. '’utilisateur' → logprob: -7.028811931610107

Token 46: ' utilisateur' (ID: 115595)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ')' → logprob: -0.2601195275783539
    2. '):' → logprob: -1.8851195573806763
    3. '   ' → logprob: -2.6351194381713867
    4. '):
' → logprob: -5.510119438171387
    5. ' )' → logprob: -7.510119438171387
    6. '")' → logprob: -8.510119438171387
    7. ')
' → logprob: -8.760119438171387
    8. ' ):' → logprob: -9.260119438171387
    9. '')' → logprob: -9.510119438171387
    10. '```' → logprob: -9.635119438171387

Token 47: '.
' (ID: 558)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ')' → logprob: -0.5027554035186768
    2. '   ' → logprob: -1.1277554035186768
    3. '):' → logprob: -2.7527554035186768
    4. '):
' → logprob: -5.377755165100098
    5. ')
' → logprob: -7.252755165100098
    6. '"""' → logprob: -7.502755165100098
    7. '")' → logprob: -7.752755165100098
    8. ' )' → logprob: -7.877755165100098
    9. '```' → logprob: -8.627755165100098
    10. '""' → logprob: -8.877755165100098

Token 48: '        
' (ID: 3564)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.05309787392616272
    2. '"""
' → logprob: -3.67809796333313
    3. ')' → logprob: -4.053097724914551
    4. '"""' → logprob: -5.678097724914551
    5. ')
' → logprob: -6.303097724914551
    6. '    
' → logprob: -6.928097724914551
    7. '):' → logprob: -7.303097724914551
    8. '""' → logprob: -7.553097724914551
    9. '\n' → logprob: -7.928097724914551
    10. '):
' → logprob: -8.55309772491455

Token 49: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.024041136726737022
    2. ')' → logprob: -4.149041175842285
    3. '"""' → logprob: -5.399041175842285
    4. '"""
' → logprob: -6.024041175842285
    5. '""' → logprob: -8.149041175842285
    6. '```' → logprob: -8.149041175842285
    7. '    ' → logprob: -9.024041175842285
    8. ' ' → logprob: -9.399041175842285
    9. '       ' → logprob: -9.649041175842285
    10. ' )' → logprob: -10.274041175842285

Token 50: ' Returns' (ID: 9609)
  Prédit: 'return'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'return' → logprob: -0.568504810333252
    2. 'Returns' (adapté à ' Returns') → logprob: -1.193504810333252
    3. '   ' → logprob: -3.068504810333252
    4. 'returns' → logprob: -3.443504810333252
    5. '"""
' → logprob: -3.818504810333252
    6. '"""' → logprob: -4.193504810333252
    7. ')' → logprob: -5.068504810333252
    8. ' Returns' → logprob: -5.943504810333252
    9. '""' → logprob: -6.443504810333252
    10. ':return' → logprob: -6.443504810333252

Token 51: ':
' (ID: 734)
  Prédit: ':'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ':' → logprob: -0.30163490772247314
    2. ' :' → logprob: -1.5516349077224731
    3. '   ' → logprob: -3.0516347885131836
    4. ':list' → logprob: -8.801634788513184
    5. 'List' → logprob: -8.926634788513184
    6. '    ' → logprob: -8.926634788513184
    7. '[List' → logprob: -8.926634788513184
    8. ':
' → logprob: -9.051634788513184
    9. ':return' → logprob: -9.551634788513184
    10. '```' → logprob: -9.676634788513184

Token 52: '       ' (ID: 309)
  Prédit: ' List'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' List' → logprob: -0.5661335587501526
    2. 'List' → logprob: -1.3161334991455078
    3. '   ' → logprob: -1.9411334991455078
    4. '       ' → logprob: -4.316133499145508
    5. ' list' → logprob: -5.191133499145508
    6. 'list' → logprob: -6.816133499145508
    7. '[List' → logprob: -8.191133499145508
    8. '    ' → logprob: -8.691133499145508
    9. '           ' → logprob: -10.441133499145508
    10. '```' → logprob: -11.066133499145508

Token 53: ' list' (ID: 1562)
  Prédit: 'List'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'List' → logprob: -0.290611207485199
    2. 'list' (adapté à ' list') → logprob: -1.4156112670898438
    3. '       ' → logprob: -5.415611267089844
    4. ' list' → logprob: -5.790611267089844
    5. ' List' → logprob: -6.790611267089844
    6. '   ' → logprob: -7.290611267089844
    7. '[List' → logprob: -10.040611267089844
    8. '```' → logprob: -11.165611267089844
    9. 'Liste' → logprob: -11.290611267089844
    10. '           ' → logprob: -11.540611267089844

Token 54: ' of' (ID: 328)
  Prédit: '[int'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '[int' → logprob: -0.003977954853326082
    2. ' of' → logprob: -6.1289777755737305
    3. '<int' → logprob: -6.3789777755737305
    4. '<|end|>' → logprob: -10.25397777557373
    5. 'int' → logprob: -10.50397777557373
    6. '[' → logprob: -11.25397777557373
    7. '(int' → logprob: -11.87897777557373
    8. '```' → logprob: -12.12897777557373
    9. '   ' → logprob: -13.62897777557373
    10. ']int' → logprob: -13.87897777557373

Token 55: ' int' (ID: 677)
  Prédit: 'int'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'int' → logprob: -0.6932812333106995
    2. ' int' → logprob: -0.6932812333106995
    3. ' integers' → logprob: -9.193281173706055
    4. ' ints' → logprob: -11.068281173706055
    5. '[int' → logprob: -12.193281173706055
    6. '<int' → logprob: -12.568281173706055
    7. 'inte' → logprob: -12.568281173706055
    8. 'ints' → logprob: -13.318281173706055
    9. '(int' → logprob: -13.943281173706055
    10. ':int' → logprob: -14.068281173706055

Token 56: ':' (ID: 25)
  Prédit: '[int'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '[int' → logprob: -0.6093192100524902
    2. '   ' → logprob: -1.4843192100524902
    3. '"""' → logprob: -2.9843192100524902
    4. ':' → logprob: -3.2343192100524902
    5. '<|end|>' → logprob: -3.2343192100524902
    6. ']' → logprob: -3.6093192100524902
    7. '```' → logprob: -3.9843192100524902
    8. '
' → logprob: -4.60931921005249
    9. '<|end|>' → logprob: -5.23431921005249
    10. '):' → logprob: -5.48431921005249

Token 57: ' Une' (ID: 19758)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.8198086023330688
    2. '<|end|>' → logprob: -0.8198086023330688
    3. ' La' → logprob: -3.3198084831237793
    4. '[int' → logprob: -4.319808483123779
    5. ' The' → logprob: -4.444808483123779
    6. ' la' → logprob: -4.444808483123779
    7. ' integers' → logprob: -4.569808483123779
    8. ' ' → logprob: -4.819808483123779
    9. 'La' → logprob: -5.194808483123779
    10. '       ' → logprob: -5.819808483123779

Token 58: ' liste' (ID: 31719)
  Prédit: ' liste'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' liste' → logprob: -0.0013758298009634018
    2. 'liste' → logprob: -7.251375675201416
    3. ' list' → logprob: -7.876375675201416
    4. ' ' → logprob: -8.501376152038574
    5. 'list' → logprob: -10.751376152038574
    6. 'e' → logprob: -10.876376152038574
    7. ' listes' → logprob: -11.376376152038574
    8. 's' → logprob: -12.126376152038574
    9. ' ' → logprob: -12.251376152038574
    10. '   ' → logprob: -12.376376152038574

Token 59: ' d' (ID: 272)
  Prédit: '[int'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '[int' → logprob: -1.0011414289474487
    2. 'd' → logprob: -1.1261414289474487
    3. ' d' → logprob: -2.1261415481567383
    4. '<|end|>' → logprob: -2.3761415481567383
    5. ' des' → logprob: -3.1261415481567383
    6. 'des' → logprob: -3.7511415481567383
    7. '<int' → logprob: -4.376141548156738
    8. '[' → logprob: -4.751141548156738
    9. ' of' → logprob: -6.126141548156738
    10. 'de' → logprob: -6.626141548156738

Token 60: ''ent' (ID: 53422)
  Prédit: ''ent'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ''ent' → logprob: -0.0035444782115519047
    2. 'ent' → logprob: -6.253544330596924
    3. ' ent' → logprob: -6.753544330596924
    4. '’ent' → logprob: -7.878544330596924
    5. 'e' → logprob: -10.628544807434082
    6. ''' → logprob: -11.003544807434082
    7. '_ent' → logprob: -11.628544807434082
    8. ' entier' → logprob: -12.628544807434082
    9. '	ent' → logprob: -13.003544807434082
    10. ''int' → logprob: -13.128544807434082

Token 61: 'iers' (ID: 11012)
  Prédit: 'iers'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'iers' → logprob: -0.0032766987569630146
    2. 'i' → logprob: -5.753276824951172
    3. 'ières' → logprob: -9.628276824951172
    4. 'ier' → logprob: -11.128276824951172
    5. '```' → logprob: -11.503276824951172
    6. 'ière' → logprob: -13.003276824951172
    7. '   ' → logprob: -13.003276824951172
    8. ' i' → logprob: -13.878276824951172
    9. '       ' → logprob: -15.003276824951172
    10. 'ié' → logprob: -15.378276824951172

Token 62: ' extra' (ID: 5018)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.024848835542798042
    2. '    
' → logprob: -4.649848937988281
    3. ':
' → logprob: -4.899848937988281
    4. '
' → logprob: -6.274848937988281
    5. ':' → logprob: -6.399848937988281
    6. '"""' → logprob: -6.899848937988281
    7. '"""
' → logprob: -6.899848937988281
    8. '```' → logprob: -7.649848937988281
    9. '):' → logprob: -8.649848937988281
    10. '        
' → logprob: -8.774848937988281

Token 63: 'ite' (ID: 651)
  Prédit: 'm'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'm' → logprob: -0.06242450326681137
    2. 'ct' → logprob: -4.187424659729004
    3. 'mits' → logprob: -4.312424659729004
    4. 'r' → logprob: -4.562424659729004
    5. 'cts' → logprob: -5.062424659729004
    6. 'ra' → logprob: -6.062424659729004
    7. 'aits' → logprob: -6.562424659729004
    8. 'mit' → logprob: -7.187424659729004
    9. 'ints' → logprob: -7.312424659729004
    10. 'ite' → logprob: -7.312424659729004

Token 64: ' de' (ID: 334)
  Prédit: ' des'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' des' → logprob: -0.36040422320365906
    2. ' de' → logprob: -1.3604042530059814
    3. ' à' → logprob: -3.6104042530059814
    4. ' from' → logprob: -4.360404014587402
    5. ' ' → logprob: -5.985404014587402
    6. ' du' → logprob: -6.360404014587402
    7. 'from' → logprob: -7.110404014587402
    8. ' a' → logprob: -7.735404014587402
    9. ' d' → logprob: -8.610404014587402
    10. 'de' → logprob: -8.735404014587402

Token 65: ' l' (ID: 305)
  Prédit: ' la'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' la' → logprob: -0.30411750078201294
    2. ' l' → logprob: -1.6791174411773682
    3. ' ' → logprob: -3.429117441177368
    4. 'l' → logprob: -4.179117679595947
    5. ' input' → logprob: -4.304117679595947
    6. ' ' → logprob: -5.679117679595947
    7. ' prompt' → logprob: -5.679117679595947
    8. 'la' → logprob: -5.804117679595947
    9. ' the' → logprob: -6.179117679595947
    10. 'input' → logprob: -7.679117679595947

Token 66: ''entrée' (ID: 115820)
  Prédit: ''entrée'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ''entrée' → logprob: -0.08421965688467026
    2. 'a' → logprob: -2.8342196941375732
    3. 'input' → logprob: -4.959219455718994
    4. ''utilisateur' → logprob: -5.209219455718994
    5. 'e' → logprob: -5.584219455718994
    6. ' input' → logprob: -6.334219455718994
    7. 'entrée' → logprob: -6.334219455718994
    8. 'es' → logprob: -7.709219455718994
    9. ''ent' → logprob: -8.334219932556152
    10. ''' → logprob: -8.334219932556152

Token 67: ' utilisateur' (ID: 115595)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.16214874386787415
    2. '"""' → logprob: -2.6621487140655518
    3. '.' → logprob: -3.4121487140655518
    4. '"""
' → logprob: -3.7871487140655518
    5. ' ' → logprob: -5.412148952484131
    6. '```' → logprob: -5.912148952484131
    7. '.
' → logprob: -6.037148952484131
    8. ' """' → logprob: -6.162148952484131
    9. '."""' → logprob: -6.412148952484131
    10. '       ' → logprob: -6.412148952484131

Token 68: '.
' (ID: 558)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.006026557646691799
    2. '"""
' → logprob: -6.506026744842529
    3. '"""' → logprob: -6.881026744842529
    4. '    
' → logprob: -7.256026744842529
    5. '):' → logprob: -7.381026744842529
    6. '
' → logprob: -7.381026744842529
    7. ':
' → logprob: -8.006026268005371
    8. ')' → logprob: -8.131026268005371
    9. '):
' → logprob: -8.381026268005371
    10. '```' → logprob: -8.756026268005371

Token 69: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.20550815761089325
    2. '"""' → logprob: -1.7055081129074097
    3. '"""
' → logprob: -5.580508232116699
    4. '""' → logprob: -8.5805082321167
    5. ' """' → logprob: -10.4555082321167
    6. '"' → logprob: -10.5805082321167
    7. '```' → logprob: -10.5805082321167
    8. ')' → logprob: -11.3305082321167
    9. '\n' → logprob: -11.4555082321167
    10. '    
' → logprob: -11.9555082321167

Token 70: ' """
' (ID: 7037)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.46698322892189026
    2. '"""
' (adapté à ' """
') → logprob: -1.4669831991195679
    3. '"""' → logprob: -1.9669831991195679
    4. '""' → logprob: -6.591983318328857
    5. ')' → logprob: -7.841983318328857
    6. '```' → logprob: -8.4669828414917
    7. ' """
' → logprob: -8.5919828414917
    8. '"' → logprob: -9.0919828414917
    9. '\n' → logprob: -9.3419828414917
    10. '"""

' → logprob: -9.8419828414917

Token 71: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.0008122475701384246
    2. 'return' → logprob: -7.62581205368042
    3. ' return' → logprob: -9.000812530517578
    4. 'input' → logprob: -9.625812530517578
    5. 'user' → logprob: -10.125812530517578
    6. 'try' → logprob: -10.750812530517578
    7. '    
' → logprob: -10.750812530517578
    8. '    ' → logprob: -11.625812530517578
    9. 'n' → logprob: -11.875812530517578
    10. ' input' → logprob: -12.375812530517578

Token 72: ' return' (ID: 622)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.40965983271598816
    2. 'user' → logprob: -1.5346598625183105
    3. 'return' (adapté à ' return') → logprob: -2.9096598625183105
    4. 'input' → logprob: -4.0346598625183105
    5. ' user' → logprob: -4.2846598625183105
    6. 'try' → logprob: -4.6596598625183105
    7. 'line' → logprob: -4.6596598625183105
    8. ' line' → logprob: -5.4096598625183105
    9. 'value' → logprob: -5.9096598625183105
    10. ' return' → logprob: -5.9096598625183105

Token 73: ' list' (ID: 1562)
  Prédit: ' ['
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' [' → logprob: -0.6949059367179871
    2. ' list' → logprob: -0.6949059367179871
    3. ' int' → logprob: -7.444905757904053
    4. ' map' → logprob: -8.194906234741211
    5. 'list' → logprob: -8.569906234741211
    6. '[int' → logprob: -8.569906234741211
    7. ' ' → logprob: -8.819906234741211
    8. ' []' → logprob: -8.819906234741211
    9. '[' → logprob: -9.444906234741211
    10. ' input' → logprob: -9.819906234741211

Token 74: '(map' (ID: 16946)
  Prédit: '(map'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(map' → logprob: -0.25232312083244324
    2. '(' → logprob: -1.5023231506347656
    3. '(int' → logprob: -7.877323150634766
    4. 'map' → logprob: -11.752323150634766
    5. ' map' → logprob: -12.752323150634766
    6. '(
' → logprob: -13.502323150634766
    7. '(input' → logprob: -14.752323150634766
    8. '	map' → logprob: -15.127323150634766
    9. '_map' → logprob: -15.252323150634766
    10. '[int' → logprob: -15.502323150634766

Token 75: '(int' (ID: 2742)
  Prédit: '(int'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(int' → logprob: -0.029841667041182518
    2. '(' → logprob: -3.529841661453247
    3. 'int' → logprob: -10.404841423034668
    4. '(lambda' → logprob: -11.154841423034668
    5. ' int' → logprob: -11.279841423034668
    6. '[int' → logprob: -11.404841423034668
    7. ' (' → logprob: -11.779841423034668
    8. '(
' → logprob: -12.029841423034668
    9. '<int' → logprob: -12.029841423034668
    10. ')' → logprob: -13.654841423034668

Token 76: ',' (ID: 11)
  Prédit: '(input'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(input' → logprob: -0.05859725922346115
    2. '(' → logprob: -3.3085973262786865
    3. ',' → logprob: -4.683597087860107
    4. 'input' → logprob: -5.308597087860107
    5. ',input' → logprob: -5.308597087860107
    6. ')' → logprob: -7.683597087860107
    7. '   ' → logprob: -8.183597564697266
    8. ' input' → logprob: -8.183597564697266
    9. '=input' → logprob: -10.058597564697266
    10. ' ,' → logprob: -10.183597564697266

Token 77: ' input' (ID: 3422)
  Prédit: ' input'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' input' → logprob: -0.16048721969127655
    2. 'input' → logprob: -1.910487174987793
    3. '(input' → logprob: -8.285487174987793
    4. '=input' → logprob: -12.410487174987793
    5. ',input' → logprob: -12.910487174987793
    6. '   ' → logprob: -13.910487174987793
    7. '[input' → logprob: -14.035487174987793
    8. '	input' → logprob: -14.285487174987793
    9. ' ' → logprob: -14.660487174987793
    10. ')' → logprob: -14.785487174987793

Token 78: '(prompt' (ID: 148306)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(' → logprob: -0.525743305683136
    2. '(prompt' → logprob: -0.900743305683136
    3. '(f' → logprob: -6.65074348449707
    4. '(input' → logprob: -7.27574348449707
    5. '('' → logprob: -8.52574348449707
    6. ')' → logprob: -9.02574348449707
    7. '(
' → logprob: -9.40074348449707
    8. ' (' → logprob: -9.65074348449707
    9. '("("' → logprob: -10.40074348449707
    10. '(prom' → logprob: -10.65074348449707

Token 79: ').' (ID: 741)
  Prédit: ').'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ').' → logprob: -0.38249751925468445
    2. '()).' → logprob: -1.5074975490570068
    3. '().' → logprob: -2.882497549057007
    4. ')' → logprob: -4.507497310638428
    5. '())' → logprob: -4.507497310638428
    6. '()' → logprob: -5.507497310638428
    7. '").' → logprob: -5.632497310638428
    8. '("' → logprob: -6.007497310638428
    9. '('' → logprob: -6.132497310638428
    10. ')))' → logprob: -6.257497310638428

Token 80: 'split' (ID: 13627)
  Prédit: 'split'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'split' → logprob: -0.03804459050297737
    2. 'strip' → logprob: -3.2880446910858154
    3. 'rstrip' → logprob: -13.038044929504395
    4. ' split' → logprob: -13.913044929504395
    5. ' strip' → logprob: -18.288043975830078
    6. '(split' → logprob: -18.288043975830078
    7. 'spl' → logprob: -19.163043975830078
    8. '.split' → logprob: -20.538043975830078
    9. 'str' → logprob: -20.913043975830078
    10. 's' → logprob: -20.913043975830078

Token 81: '()))

' (ID: 125972)
  Prédit: '()))'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '()))' → logprob: -0.03777521476149559
    2. '()' → logprob: -3.5377752780914307
    3. '())' → logprob: -4.912775039672852
    4. '())))' → logprob: -8.037775039672852
    5. '))' → logprob: -8.537775039672852
    6. '(' → logprob: -9.912775039672852
    7. '('' → logprob: -10.162775039672852
    8. '()))
' → logprob: -10.912775039672852
    9. '()));' → logprob: -12.412775039672852
    10. '()))

' → logprob: -13.037775039672852

Token 82: 'def' (ID: 1314)
  Prédit: '
'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '
' → logprob: -0.08676338940858841
    2. 'def' → logprob: -3.836763381958008
    3. '<|end|>' → logprob: -3.836763381958008
    4. '#' → logprob: -4.211763381958008
    5. '

' → logprob: -4.836763381958008
    6. '[' → logprob: -5.336763381958008
    7. '\n' → logprob: -5.586763381958008
    8. '```' → logprob: -6.086763381958008
    9. '\' → logprob: -6.711763381958008
    10. '<|end|>' → logprob: -6.961763381958008

Token 83: ' calculate' (ID: 17950)
  Prédit: ' calculate'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' calculate' → logprob: -0.4847508370876312
    2. ' sum' → logprob: -2.109750747680664
    3. ' add' → logprob: -2.984750747680664
    4. ' compute' → logprob: -3.109750747680664
    5. ' write' → logprob: -3.359750747680664
    6. ' read' → logprob: -3.359750747680664
    7. ' factorial' → logprob: -3.609750747680664
    8. ' space' → logprob: -3.734750747680664
    9. ' find' → logprob: -4.484750747680664
    10. ' ' → logprob: -4.609750747680664

Token 84: '_max' (ID: 13731)
  Prédit: '_sum'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_sum' → logprob: -0.4903753697872162
    2. '_average' → logprob: -1.2403753995895386
    3. '_' → logprob: -2.990375280380249
    4. '_factor' → logprob: -3.490375280380249
    5. '_total' → logprob: -5.240375518798828
    6. '_mean' → logprob: -5.615375518798828
    7. '_max' → logprob: -5.990375518798828
    8. '_square' → logprob: -6.740375518798828
    9. '_area' → logprob: -6.990375518798828
    10. '_frequency' → logprob: -7.365375518798828

Token 85: '_profit' (ID: 186239)
  Prédit: '_sum'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '_sum' → logprob: -0.651765763759613
    2. '_difference' → logprob: -1.5267658233642578
    3. '_' → logprob: -2.026765823364258
    4. '_value' → logprob: -2.901765823364258
    5. '_average' → logprob: -4.526765823364258
    6. 'imum' → logprob: -4.526765823364258
    7. '_sub' → logprob: -4.651765823364258
    8. '_sequence' → logprob: -5.776765823364258
    9. '_diff' → logprob: -5.776765823364258
    10. '_score' → logprob: -5.776765823364258

Token 86: '(values' (ID: 40883)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '(' → logprob: -0.608347475528717
    2. '(pro' → logprob: -1.3583474159240723
    3. '(price' → logprob: -2.7333474159240723
    4. '(pr' → logprob: -3.1083474159240723
    5. '(stock' → logprob: -3.7333474159240723
    6. '(p' → logprob: -4.233347415924072
    7. ' (' → logprob: -4.233347415924072
    8. '(s' → logprob: -4.233347415924072
    9. '(product' → logprob: -5.358347415924072
    10. '(products' → logprob: -5.608347415924072

Token 87: ',' (ID: 11)
  Prédit: '):'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '):' → logprob: -0.004258257802575827
    2. ',' → logprob: -5.629258155822754
    3. ' ):' → logprob: -8.504258155822754
    4. '):
' → logprob: -9.254258155822754
    5. ')):' → logprob: -9.504258155822754
    6. '   ' → logprob: -9.629258155822754
    7. '[]):' → logprob: -9.754258155822754
    8. ')' → logprob: -9.879258155822754
    9. '_list' → logprob: -10.754258155822754
    10. '[' → logprob: -11.004258155822754

Token 88: ' costs' (ID: 8959)
  Prédit: ' costs'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' costs' → logprob: -1.157798409461975
    2. ' prices' → logprob: -2.4077982902526855
    3. ' k' → logprob: -2.5327982902526855
    4. 'prices' → logprob: -2.6577982902526855
    5. ' budget' → logprob: -2.7827982902526855
    6. 'k' → logprob: -3.1577982902526855
    7. 'budget' → logprob: -3.2827982902526855
    8. 'capacity' → logprob: -3.5327982902526855
    9. 'cost' → logprob: -3.5327982902526855
    10. ' max' → logprob: -3.7827982902526855

Token 89: '):
' (ID: 1883)
  Prédit: '):'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '):' → logprob: -0.0009349246975034475
    2. ',' → logprob: -7.625935077667236
    3. ')' → logprob: -8.500934600830078
    4. '):
' → logprob: -9.250934600830078
    5. ')):' → logprob: -9.375934600830078
    6. '   ' → logprob: -10.250934600830078
    7. ' ):' → logprob: -11.250934600830078
    8. ':' → logprob: -12.750934600830078
    9. ' ' → logprob: -13.250934600830078
    10. 'def' → logprob: -13.500934600830078

Token 90: '   ' (ID: 271)
  Prédit: ':'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ':' → logprob: -0.24245846271514893
    2. '   ' → logprob: -1.617458462715149
    3. '():' → logprob: -5.117458343505859
    4. '(' → logprob: -6.242458343505859
    5. '):' → logprob: -6.367458343505859
    6. ':
' → logprob: -6.867458343505859
    7. '<|end|>' → logprob: -6.867458343505859
    8. ' :' → logprob: -6.992458343505859
    9. '<|end|>' → logprob: -7.742458343505859
    10. '(n' → logprob: -7.867458343505859

Token 91: ' """
' (ID: 7037)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.08698195964097977
    2. ' max' → logprob: -3.711982011795044
    3. 'max' → logprob: -3.961982011795044
    4. '    
' → logprob: -4.711981773376465
    5. ' profits' → logprob: -4.836981773376465
    6. 'profits' → logprob: -5.586981773376465
    7. 'n' → logprob: -5.836981773376465
    8. ' profit' → logprob: -6.086981773376465
    9. ' 
' → logprob: -6.211981773376465
    10. 'profit' → logprob: -6.211981773376465

Token 92: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.130616694688797
    2. '"""
' → logprob: -2.2556166648864746
    3. ' """
' → logprob: -4.505616664886475
    4. '"""' → logprob: -5.380616664886475
    5. 'Calcul' → logprob: -7.130616664886475
    6. '"' → logprob: -7.880616664886475
    7. '    ' → logprob: -8.380617141723633
    8. 'Calculate' → logprob: -9.380617141723633
    9. ' """' → logprob: -9.505617141723633
    10. ' Calculates' → logprob: -9.630617141723633

Token 93: ' Cal' (ID: 4453)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.4444708824157715
    2. 'Calcul' → logprob: -1.6944708824157715
    3. ' """
' → logprob: -2.6944708824157715
    4. ' Calculates' → logprob: -3.1944708824157715
    5. 'Calculate' → logprob: -3.6944708824157715
    6. '"""
' → logprob: -4.9444708824157715
    7. ' Cal' → logprob: -5.0694708824157715
    8. ' """' → logprob: -5.1944708824157715
    9. ' Calculate' → logprob: -5.3194708824157715
    10. 'Cal' (adapté à ' Cal') → logprob: -5.5694708824157715

Token 94: 'cule' (ID: 45017)
  Prédit: 'cule'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'cule' → logprob: -0.0018900912255048752
    2. 'cul' → logprob: -6.501890182495117
    3. 'c' → logprob: -8.376890182495117
    4. 'culate' → logprob: -9.251890182495117
    5. 'cules' → logprob: -10.001890182495117
    6. '
' → logprob: -12.251890182495117
    7. 'cula' → logprob: -12.876890182495117
    8. '```' → logprob: -13.126890182495117
    9. '   ' → logprob: -13.751890182495117
    10. '**' → logprob: -14.376890182495117

Token 95: ' le' (ID: 505)
  Prédit: ' le'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' le' → logprob: -0.594102680683136
    2. ' la' → logprob: -0.969102680683136
    3. ' l' → logprob: -3.344102621078491
    4. ' ' → logprob: -4.09410285949707
    5. ' the' → logprob: -4.84410285949707
    6. '_' → logprob: -5.84410285949707
    7. '_le' → logprob: -6.09410285949707
    8. ',' → logprob: -7.46910285949707
    9. '_la' → logprob: -7.84410285949707
    10. ' maximale' → logprob: -7.84410285949707

Token 96: ' profit' (ID: 15971)
  Prédit: ' bénéf'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' bénéf' → logprob: -0.1679944545030594
    2. ' profit' → logprob: -1.917994499206543
    3. ' maximum' → logprob: -5.542994499206543
    4. 'profit' → logprob: -5.917994499206543
    5. '_profit' → logprob: -8.042994499206543
    6. ' gain' → logprob: -8.792994499206543
    7. '   ' → logprob: -9.042994499206543
    8. '_' → logprob: -9.542994499206543
    9. ' rendement' → logprob: -9.667994499206543
    10. ' montant' → logprob: -9.792994499206543

Token 97: ' maximal' (ID: 65414)
  Prédit: ' maximal'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' maximal' → logprob: -0.057619716972112656
    2. ' maximum' → logprob: -3.43261981010437
    3. '_max' → logprob: -4.307619571685791
    4. '_' → logprob: -5.807619571685791
    5. 'max' → logprob: -5.807619571685791
    6. '   ' → logprob: -6.307619571685791
    7. ' max' → logprob: -7.182619571685791
    8. 'maximum' → logprob: -7.307619571685791
    9. ' maximale' → logprob: -7.557619571685791
    10. ' maksimal' → logprob: -9.05762004852295

Token 98: ' pouvant' (ID: 104840)
  Prédit: '_'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '_' → logprob: -1.1572028398513794
    2. '_possible' → logprob: -1.1572028398513794
    3. ' possible' → logprob: -1.7822028398513794
    4. ' entre' → logprob: -3.15720272064209
    5. ' à' → logprob: -3.53220272064209
    6. 'possible' → logprob: -3.53220272064209
    7. ' ' → logprob: -3.78220272064209
    8. ' que' → logprob: -4.40720272064209
    9. ' obtenu' → logprob: -5.03220272064209
    10. ' maximal' → logprob: -5.15720272064209

Token 99: ' être' (ID: 9104)
  Prédit: ' être'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' être' → logprob: -0.2024480551481247
    2. 'être' → logprob: -1.7024480104446411
    3. ' etre' → logprob: -8.077447891235352
    4. ''être' → logprob: -8.452447891235352
    5. ' be' → logprob: -9.077447891235352
    6. 'êtres' → logprob: -9.327447891235352
    7. '’être' → logprob: -9.577447891235352
    8. ' ê' → logprob: -9.827447891235352
    9. 'ê' → logprob: -10.702447891235352
    10. ' ' → logprob: -10.827447891235352

Token 100: ' obtenu' (ID: 117330)
  Prédit: ' obtenu'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' obtenu' → logprob: -0.28707003593444824
    2. 'ob' → logprob: -1.7870700359344482
    3. ' réalisé' → logprob: -3.0370700359344482
    4. ' obten' → logprob: -4.162070274353027
    5. 'obt' → logprob: -4.537070274353027
    6. 'ré' → logprob: -5.287070274353027
    7. ' atteint' → logprob: -7.162070274353027
    8. 'real' → logprob: -8.287070274353027
    9. ' réalis' → logprob: -8.287070274353027
    10. ' génér' → logprob: -8.537070274353027

Token 101: ',' (ID: 11)
  Prédit: ' en'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' en' → logprob: -0.2839912176132202
    2. ' à' → logprob: -1.6589912176132202
    3. ' avec' → logprob: -3.4089913368225098
    4. ' ' → logprob: -4.65899133682251
    5. '   ' → logprob: -5.78399133682251
    6. ' (' → logprob: -5.90899133682251
    7. ' par' → logprob: -6.15899133682251
    8. ' dans' → logprob: -7.03399133682251
    9. ' grâce' → logprob: -7.28399133682251
    10. ' entre' → logprob: -7.53399133682251

Token 102: ' en' (ID: 469)
  Prédit: ' compte'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' compte' → logprob: -0.20286273956298828
    2. ' en' → logprob: -2.3278627395629883
    3. ' given' → logprob: -2.8278627395629883
    4. '   ' → logprob: -4.952862739562988
    5. ' sachant' → logprob: -5.577862739562988
    6. ' ' → logprob: -6.702862739562988
    7. ' étant' → logprob: -6.702862739562988
    8. ' index' → logprob: -6.952862739562988
    9. ' comptes' → logprob: -6.952862739562988
    10. 'given' → logprob: -7.077862739562988

Token 103: ' chois' (ID: 33475)
  Prédit: ' chois'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' chois' → logprob: -1.4070699214935303
    2. ' considér' → logprob: -1.6570699214935303
    3. ' utilisant' → logprob: -1.6570699214935303
    4. ' tenant' → logprob: -1.9070699214935303
    5. ' respect' → logprob: -2.2820699214935303
    6. ' fonction' → logprob: -3.1570699214935303
    7. ' prenant' → logprob: -3.4070699214935303
    8. 'consider' → logprob: -3.9070699214935303
    9. ' consid' → logprob: -4.907070159912109
    10. ' suivant' → logprob: -5.157070159912109

Token 104: 'issant' (ID: 31359)
  Prédit: 'issant'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'issant' → logprob: -0.4295007288455963
    2. 'ant' → logprob: -1.054500699043274
    3. 'is' → logprob: -8.179500579833984
    4. 'isant' → logprob: -8.679500579833984
    5. 'nant' → logprob: -10.054500579833984
    6. 'e' → logprob: -10.179500579833984
    7. 'ev' → logprob: -10.304500579833984
    8. 'iss' → logprob: -10.554500579833984
    9. '
' → logprob: -10.679500579833984
    10. 'ss' → logprob: -10.804500579833984

Token 105: ' les' (ID: 1341)
  Prédit: ' un'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' un' → logprob: -0.6925476789474487
    2. ' une' → logprob: -1.1925476789474487
    3. ' des' → logprob: -1.9425476789474487
    4. ' les' → logprob: -4.567547798156738
    5. ' uniquement' → logprob: -4.817547798156738
    6. ' certains' → logprob: -5.192547798156738
    7. ' au' → logprob: -5.317547798156738
    8. 'un' → logprob: -5.317547798156738
    9. ' a' → logprob: -5.317547798156738
    10. ' parmi' → logprob: -6.442547798156738

Token 106: ' éléments' (ID: 57375)
  Prédit: ' éléments'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' éléments' → logprob: -0.2170378863811493
    2. ' indices' → logprob: -2.2170379161834717
    3. ' items' → logprob: -3.9670379161834717
    4. ' articles' → logprob: -4.217037677764893
    5. ' investissements' → logprob: -4.217037677764893
    6. 'élé' → logprob: -4.592037677764893
    7. ' projets' → logprob: -4.717037677764893
    8. ' objets' → logprob: -5.467037677764893
    9. ' elements' → logprob: -6.092037677764893
    10. '   ' → logprob: -6.467037677764893

Token 107: ' 
' (ID: 793)
  Prédit: ' à'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' à' → logprob: -0.10141579806804657
    2. ' de' → logprob: -3.2264158725738525
    3. ' disponibles' → logprob: -3.4764158725738525
    4. ' dans' → logprob: -5.601415634155273
    5. '   ' → logprob: -5.976415634155273
    6. ' ' → logprob: -5.976415634155273
    7. ' suivants' → logprob: -5.976415634155273
    8. ' sélection' → logprob: -6.351415634155273
    9. ' du' → logprob: -6.601415634155273
    10. ',' → logprob: -6.601415634155273

Token 108: '   ' (ID: 271)
  Prédit: ' à'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' à' → logprob: -0.16439089179039001
    2. ' de' → logprob: -3.164390802383423
    3. ' disponibles' → logprob: -3.164390802383423
    4. ' dans' → logprob: -3.664390802383423
    5. '   ' → logprob: -4.789391040802002
    6. 'dans' → logprob: -5.164391040802002
    7. ' parmi' → logprob: -5.664391040802002
    8. ',' → logprob: -5.664391040802002
    9. ' sur' → logprob: -6.039391040802002
    10. ' du' → logprob: -6.039391040802002

Token 109: ' ayant' (ID: 45436)
  Prédit: ' à'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' à' → logprob: -0.32311928272247314
    2. ' dans' → logprob: -2.0731191635131836
    3. ' de' → logprob: -2.4481191635131836
    4. 'dans' → logprob: -3.3231191635131836
    5. ' disponibles' → logprob: -4.823119163513184
    6. 'à' → logprob: -5.698119163513184
    7. ' parmi' → logprob: -5.948119163513184
    8. ' sur' → logprob: -6.073119163513184
    9. 'de' → logprob: -6.573119163513184
    10. ' qui' → logprob: -6.698119163513184

Token 110: ' un' (ID: 537)
  Prédit: ' un'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' un' → logprob: -0.0792117491364479
    2. 'un' → logprob: -3.454211711883545
    3. 'une' → logprob: -4.204211711883545
    4. ' une' → logprob: -4.579211711883545
    5. ' des' → logprob: -4.829211711883545
    6. ' indices' → logprob: -6.329211711883545
    7. '<|end|>' → logprob: -6.329211711883545
    8. ' les' → logprob: -6.704211711883545
    9. 'des' → logprob: -7.079211711883545
    10. 'indices' → logprob: -7.204211711883545

Token 111: ' profit' (ID: 15971)
  Prédit: 'profit'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'profit' → logprob: -0.5513225197792053
    2. ' profit' → logprob: -1.4263224601745605
    3. 'indice' → logprob: -2.4263224601745605
    4. ' coût' → logprob: -3.8013224601745605
    5. ' indice' → logprob: -3.9263224601745605
    6. ' bénéf' → logprob: -4.3013224601745605
    7. 'co' → logprob: -5.3013224601745605
    8. 'index' → logprob: -5.4263224601745605
    9. 'e' → logprob: -5.4263224601745605
    10. ' index' → logprob: -5.8013224601745605

Token 112: ' positif' (ID: 89008)
  Prédit: ' maximal'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' maximal' → logprob: -1.012526035308838
    2. ' =' → logprob: -1.137526035308838
    3. ' net' → logprob: -2.887526035308838
    4. 's' → logprob: -3.012526035308838
    5. ' (' → logprob: -3.262526035308838
    6. ' potentiel' → logprob: -3.762526035308838
    7. '<|end|>' → logprob: -3.887526035308838
    8. ' ' → logprob: -4.262526035308838
    9. 'max' → logprob: -4.387526035308838
    10. ' positif' → logprob: -4.512526035308838

Token 113: ' (' (ID: 350)
  Prédit: ' ('
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' (' → logprob: -0.4368811845779419
    2. '.' → logprob: -1.561881184577942
    3. ',' → logprob: -2.3118810653686523
    4. ' entre' → logprob: -4.436881065368652
    5. ' possible' → logprob: -4.936881065368652
    6. 's' → logprob: -5.061881065368652
    7. ' ' → logprob: -5.186881065368652
    8. 'possible' → logprob: -6.436881065368652
    9. '(' → logprob: -6.811881065368652
    10. ' ,' → logprob: -6.811881065368652

Token 114: 'profit' (ID: 40796)
  Prédit: 'values'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'values' → logprob: -0.6877238750457764
    2. 'value' → logprob: -1.5627238750457764
    3. 'val' → logprob: -2.0627238750457764
    4. ' values' → logprob: -2.6877238750457764
    5. ' value' → logprob: -3.0627238750457764
    6. 'v' → logprob: -3.9377238750457764
    7. ' val' → logprob: -4.6877241134643555
    8. ')' → logprob: -6.0627241134643555
    9. ' valeur' → logprob: -6.0627241134643555
    10. 'profit' → logprob: -6.1877241134643555

Token 115: ' =' (ID: 314)
  Prédit: ' ='
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' =' → logprob: -0.10292818397283554
    2. '=' → logprob: -2.3529281616210938
    3. 's' → logprob: -6.977928161621094
    4. '   ' → logprob: -7.102928161621094
    5. ')' → logprob: -7.352928161621094
    6. '):
' → logprob: -9.352928161621094
    7. '):' → logprob: -9.727928161621094
    8. ' :=' → logprob: -10.602928161621094
    9. ' ' → logprob: -10.852928161621094
    10. '  ' → logprob: -11.102928161621094

Token 116: ' value' (ID: 1432)
  Prédit: 'values'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'values' → logprob: -0.8693647384643555
    2. 'value' → logprob: -1.2443647384643555
    3. 'v' → logprob: -2.4943647384643555
    4. ' value' → logprob: -2.6193647384643555
    5. 'val' → logprob: -2.6193647384643555
    6. ' values' → logprob: -3.2443647384643555
    7. ' v' → logprob: -4.2443647384643555
    8. ' val' → logprob: -5.2443647384643555
    9. ' valeur' → logprob: -5.6193647384643555
    10. ' valeurs' → logprob: -7.4943647384643555

Token 117: ' -' (ID: 533)
  Prédit: ' -'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' -' → logprob: -0.09111015498638153
    2. 's' → logprob: -3.2161102294921875
    3. '-' → logprob: -3.4661102294921875
    4. ' ' → logprob: -4.8411102294921875
    5. ')' → logprob: -5.5911102294921875
    6. '   ' → logprob: -5.9661102294921875
    7. '  ' → logprob: -7.7161102294921875
    8. '[' → logprob: -7.8411102294921875
    9. '[i' → logprob: -8.216110229492188
    10. ' s' → logprob: -8.966110229492188

Token 118: ' cost' (ID: 3097)
  Prédit: ' cost'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' cost' → logprob: -0.20190967619419098
    2. 'cost' → logprob: -1.7019096612930298
    3. ' costs' → logprob: -8.326910018920898
    4. ' coût' → logprob: -9.826910018920898
    5. '   ' → logprob: -10.201910018920898
    6. ' ' → logprob: -10.326910018920898
    7. ' coste' → logprob: -10.451910018920898
    8. 'co' → logprob: -10.576910018920898
    9. 'c' → logprob: -11.201910018920898
    10. ' costo' → logprob: -11.639410018920898

Token 119: ').
' (ID: 6294)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')' → logprob: -0.1572151929140091
    2. ').' → logprob: -2.032215118408203
    3. '):' → logprob: -4.657215118408203
    4. '):
' → logprob: -5.907215118408203
    5. '   ' → logprob: -7.032215118408203
    6. ')
' → logprob: -7.907215118408203
    7. ' )' → logprob: -8.032215118408203
    8. '),' → logprob: -8.782215118408203
    9. ').
' → logprob: -8.907215118408203
    10. 'def' → logprob: -9.657215118408203

Token 120: '    
' (ID: 1944)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.02495349571108818
    2. '    
' → logprob: -4.274953365325928
    3. '
' → logprob: -4.774953365325928
    4. 'def' → logprob: -6.899953365325928
    5. ')
' → logprob: -7.899953365325928
    6. ')' → logprob: -8.524953842163086
    7. ',' → logprob: -8.774953842163086
    8. '   
' → logprob: -9.399953842163086
    9. '  
' → logprob: -9.399953842163086
    10. ' def' → logprob: -9.649953842163086

Token 121: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.0028682351112365723
    2. '    
' → logprob: -7.002868175506592
    3. 'n' → logprob: -7.127868175506592
    4. '
' → logprob: -8.00286865234375
    5. 'def' → logprob: -8.25286865234375
    6. ')' → logprob: -8.62786865234375
    7. ' n' → logprob: -9.00286865234375
    8. ')
' → logprob: -9.75286865234375
    9. '"""
' → logprob: -10.87786865234375
    10. ' def' → logprob: -10.87786865234375

Token 122: ' Args' (ID: 39185)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.02413097582757473
    2. ' profit' → logprob: -4.649130821228027
    3. 'profit' → logprob: -5.024130821228027
    4. 'max' → logprob: -6.524130821228027
    5. '    
' → logprob: -6.649130821228027
    6. '
' → logprob: -6.774130821228027
    7. ' profits' → logprob: -7.274130821228027
    8. 'result' → logprob: -7.524130821228027
    9. ' max' → logprob: -7.524130821228027
    10. 'profits' → logprob: -7.649130821228027

Token 123: ':
' (ID: 734)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.06507492810487747
    2. ')' → logprob: -4.065074920654297
    3. '       ' → logprob: -4.190074920654297
    4. ' (' → logprob: -4.690074920654297
    5. '(values' → logprob: -4.940074920654297
    6. '):' → logprob: -5.065074920654297
    7. '(' → logprob: -5.565074920654297
    8. ':' → logprob: -6.690074920654297
    9. '):
' → logprob: -7.065074920654297
    10. '    ' → logprob: -7.690074920654297

Token 124: '       ' (ID: 309)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.034915342926979065
    2. ' values' → logprob: -3.4099154472351074
    3. 'values' → logprob: -6.909915447235107
    4. '       ' → logprob: -8.40991497039795
    5. '	values' → logprob: -10.90991497039795
    6. '(values' → logprob: -11.40991497039795
    7. '
' → logprob: -12.65991497039795
    8. '    
' → logprob: -13.28491497039795
    9. '    ' → logprob: -13.28491497039795
    10. 'Values' → logprob: -13.65991497039795

Token 125: ' values' (ID: 4824)
  Prédit: 'values'
  Correct (stricte): False
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'values' (adapté à ' values') → logprob: -0.016097597777843475
    2. ' values' → logprob: -4.141097545623779
    3. '   ' → logprob: -9.891098022460938
    4. '	values' → logprob: -12.516098022460938
    5. 'value' → logprob: -12.641098022460938
    6. 'list' → logprob: -13.516098022460938
    7. '.values' → logprob: -13.766098022460938
    8. ' valeurs' → logprob: -14.266098022460938
    9. '(values' → logprob: -14.516098022460938
    10. 'val' → logprob: -14.891098022460938

Token 126: ' (' (ID: 350)
  Prédit: ' ('
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' (' → logprob: -0.01600867509841919
    2. ',' → logprob: -4.6410088539123535
    3. ':' → logprob: -5.6410088539123535
    4. '   ' → logprob: -6.6410088539123535
    5. '(list' → logprob: -7.6410088539123535
    6. ' ' → logprob: -8.266008377075195
    7. '):' → logprob: -8.391008377075195
    8. ' :' → logprob: -8.766008377075195
    9. ')' → logprob: -9.016008377075195
    10. ':list' → logprob: -10.141008377075195

Token 127: 'list' (ID: 2641)
  Prédit: 'list'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'list' → logprob: -0.007837885059416294
    2. ' list' → logprob: -4.882837772369385
    3. 'List' → logprob: -9.507838249206543
    4. '   ' → logprob: -9.757838249206543
    5. ':list' → logprob: -10.382838249206543
    6. ')' → logprob: -10.757838249206543
    7. 'int' → logprob: -11.257838249206543
    8. '=list' → logprob: -11.382838249206543
    9. ':' → logprob: -12.132838249206543
    10. '_list' → logprob: -12.382838249206543

Token 128: ' of' (ID: 328)
  Prédit: ' of'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' of' → logprob: -0.7985801100730896
    2. '[int' → logprob: -0.7985801100730896
    3. '):' → logprob: -2.6735801696777344
    4. ':' → logprob: -4.298580169677734
    5. '   ' → logprob: -5.298580169677734
    6. '):
' → logprob: -5.423580169677734
    7. 'of' → logprob: -5.548580169677734
    8. ' (' → logprob: -6.423580169677734
    9. '(int' → logprob: -7.548580169677734
    10. ' ' → logprob: -7.798580169677734

Token 129: ' int' (ID: 677)
  Prédit: 'int'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'int' → logprob: -0.04858986660838127
    2. ' int' → logprob: -3.0485899448394775
    3. '[int' → logprob: -13.673589706420898
    4. 'float' → logprob: -14.548589706420898
    5. '(int' → logprob: -15.798589706420898
    6. ')' → logprob: -15.923589706420898
    7. '<int' → logprob: -16.0485897064209
    8. '   ' → logprob: -16.2985897064209
    9. ']int' → logprob: -16.2985897064209
    10. ':int' → logprob: -16.7985897064209

Token 130: '):' (ID: 3127)
  Prédit: '):'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '):' → logprob: -0.0036690791603177786
    2. ')' → logprob: -6.378669261932373
    3. '   ' → logprob: -6.878669261932373
    4. ' ):' → logprob: -7.503669261932373
    5. '):
' → logprob: -8.128668785095215
    6. ')):' → logprob: -9.628668785095215
    7. '):

' → logprob: -12.628668785095215
    8. ':' → logprob: -12.878668785095215
    9. '    ' → logprob: -13.128668785095215
    10. '),' → logprob: -13.128668785095215

Token 131: ' La' (ID: 3038)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -1.2653638124465942
    2. ' list' → logprob: -1.6403638124465942
    3. 'List' → logprob: -1.8903638124465942
    4. '       ' → logprob: -2.1403636932373047
    5. ' List' → logprob: -2.3903636932373047
    6. 'list' → logprob: -2.8903636932373047
    7. 'La' → logprob: -3.2653636932373047
    8. ')' → logprob: -3.5153636932373047
    9. ' La' → logprob: -4.515363693237305
    10. 'int' → logprob: -4.890363693237305

Token 132: ' liste' (ID: 31719)
  Prédit: 'val'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'val' → logprob: -0.24010999500751495
    2. ' valeurs' → logprob: -1.7401100397109985
    3. ' liste' → logprob: -4.490109920501709
    4. 'values' → logprob: -5.115109920501709
    5. ' listes' → logprob: -5.115109920501709
    6. ' valeur' → logprob: -5.490109920501709
    7. 'liste' → logprob: -5.615109920501709
    8. 'list' → logprob: -6.365109920501709
    9. ' values' → logprob: -6.865109920501709
    10. ' list' → logprob: -6.990109920501709

Token 133: ' des' (ID: 731)
  Prédit: ' des'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' des' → logprob: -0.2449893355369568
    2. ')' → logprob: -1.7449893951416016
    3. '   ' → logprob: -4.119989395141602
    4. ' of' → logprob: -4.994989395141602
    5. '<|end|>' → logprob: -5.244989395141602
    6. 'des' → logprob: -5.369989395141602
    7. ' d' → logprob: -5.994989395141602
    8. ' )' → logprob: -5.994989395141602
    9. ' de' → logprob: -6.369989395141602
    10. '[int' → logprob: -6.869989395141602

Token 134: ' valeurs' (ID: 73668)
  Prédit: 'val'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'val' → logprob: -0.1830310821533203
    2. ' valeurs' → logprob: -1.8080310821533203
    3. 'values' → logprob: -6.05803108215332
    4. 'prix' → logprob: -8.68303108215332
    5. 'vals' → logprob: -8.80803108215332
    6. 'profits' → logprob: -9.43303108215332
    7. 'valu' → logprob: -9.43303108215332
    8. 'vale' → logprob: -9.68303108215332
    9. ' values' → logprob: -9.68303108215332
    10. ' val' → logprob: -10.05803108215332

Token 135: ' pour' (ID: 1930)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ')' → logprob: -0.14288081228733063
    2. ' des' → logprob: -2.642880916595459
    3. '   ' → logprob: -3.267880916595459
    4. '<|end|>' → logprob: -4.267880916595459
    5. 'des' → logprob: -5.767880916595459
    6. ' )' → logprob: -5.767880916595459
    7. '):
' → logprob: -7.017880916595459
    8. '):' → logprob: -7.017880916595459
    9. '<|end|>' → logprob: -7.892880916595459
    10. ' ' → logprob: -8.1428804397583

Token 136: ' chaque' (ID: 21194)
  Prédit: ' les'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' les' → logprob: -0.39521804451942444
    2. ' chaque' → logprob: -1.770218014717102
    3. ')' → logprob: -3.0202181339263916
    4. ' each' → logprob: -3.1452181339263916
    5. ' ' → logprob: -4.2702178955078125
    6. 'each' → logprob: -4.3952178955078125
    7. '<|end|>' → logprob: -4.7702178955078125
    8. 'values' → logprob: -5.0202178955078125
    9. '   ' → logprob: -5.7702178955078125
    10. ' des' → logprob: -6.1452178955078125

Token 137: ' article' (ID: 5787)
  Prédit: 'élé'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'élé' → logprob: -0.166129469871521
    2. ' éléments' → logprob: -2.1661295890808105
    3. ' items' → logprob: -4.2911295890808105
    4. 'items' → logprob: -4.6661295890808105
    5. 'articles' → logprob: -5.5411295890808105
    6. 'obj' → logprob: -6.0411295890808105
    7. ' objets' → logprob: -6.0411295890808105
    8. ' articles' → logprob: -6.2911295890808105
    9. ' élément' → logprob: -6.4161295890808105
    10. 'item' → logprob: -7.6661295890808105

Token 138: '.
' (ID: 558)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.01334821805357933
    2. ')' → logprob: -5.26334810256958
    3. '):' → logprob: -5.63834810256958
    4. '       ' → logprob: -6.01334810256958
    5. '):
' → logprob: -7.13834810256958
    6. ',' → logprob: -7.63834810256958
    7. 'def' → logprob: -8.388348579406738
    8. '
' → logprob: -9.013348579406738
    9. 's' → logprob: -9.263348579406738
    10. '    
' → logprob: -9.388348579406738

Token 139: '       ' (ID: 309)
  Prédit: '       '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '       ' → logprob: -0.4551721513271332
    2. '   ' → logprob: -1.0801721811294556
    3. ')' → logprob: -4.455172061920166
    4. '<|end|>' → logprob: -4.830172061920166
    5. '
' → logprob: -5.330172061920166
    6. ',' → logprob: -7.830172061920166
    7. '```' → logprob: -8.330172538757324
    8. '    
' → logprob: -8.330172538757324
    9. '        
' → logprob: -8.455172538757324
    10. '<|end|>' → logprob: -8.705172538757324

Token 140: ' costs' (ID: 8959)
  Prédit: ' costs'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' costs' → logprob: -0.3386959433555603
    2. 'cost' → logprob: -1.338696002960205
    3. '   ' → logprob: -3.713696002960205
    4. ' cost' → logprob: -8.088695526123047
    5. '       ' → logprob: -8.463695526123047
    6. '
' → logprob: -8.838695526123047
    7. '    ' → logprob: -11.088695526123047
    8. 'Costs' → logprob: -11.963695526123047
    9. ' costos' → logprob: -12.338695526123047
    10. ' ' → logprob: -12.463695526123047

Token 141: ' (' (ID: 350)
  Prédit: ' ('
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' (' → logprob: -0.011236914433538914
    2. '(list' → logprob: -4.511237144470215
    3. ':' → logprob: -9.636237144470215
    4. '=' → logprob: -10.386237144470215
    5. ')' → logprob: -10.511237144470215
    6. '   ' → logprob: -10.761237144470215
    7. ' ' → logprob: -11.636237144470215
    8. '=list' → logprob: -11.886237144470215
    9. '(int' → logprob: -12.011237144470215
    10. '(' → logprob: -12.011237144470215

Token 142: 'list' (ID: 2641)
  Prédit: 'list'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'list' → logprob: -0.05600118264555931
    2. ' list' → logprob: -3.3060011863708496
    3. '(list' → logprob: -4.05600118637085
    4. '=list' → logprob: -9.181000709533691
    5. '[list' → logprob: -9.181000709533691
    6. ' (' → logprob: -9.306000709533691
    7. ')' → logprob: -9.556000709533691
    8. ':list' → logprob: -9.681000709533691
    9. '   ' → logprob: -10.056000709533691
    10. ',list' → logprob: -13.681000709533691

Token 143: ' of' (ID: 328)
  Prédit: ' of'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' of' → logprob: -0.0006394077208824456
    2. 'of' → logprob: -7.37563943862915
    3. '   ' → logprob: -11.875638961791992
    4. ')' → logprob: -13.125638961791992
    5. ' ' → logprob: -13.500638961791992
    6. 'd' → logprob: -14.375638961791992
    7. '[int' → logprob: -14.375638961791992
    8. 'def' → logprob: -15.125638961791992
    9. '[' → logprob: -15.250638961791992
    10. '  ' → logprob: -15.875638961791992

Token 144: ' int' (ID: 677)
  Prédit: 'int'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'int' → logprob: -0.001171056181192398
    2. ' int' → logprob: -6.751171112060547
    3. '[int' → logprob: -14.876171112060547
    4. '(int' → logprob: -15.376171112060547
    5. ')' → logprob: -16.751171112060547
    6. '<int' → logprob: -16.876171112060547
    7. ']int' → logprob: -17.376171112060547
    8. '=int' → logprob: -18.001171112060547
    9. '   ' → logprob: -18.251171112060547
    10. ':int' → logprob: -18.376171112060547

Token 145: '):' (ID: 3127)
  Prédit: '):'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '):' → logprob: -0.0032869174610823393
    2. ')):' → logprob: -6.003286838531494
    3. '   ' → logprob: -7.628286838531494
    4. ' ):' → logprob: -8.753287315368652
    5. ')' → logprob: -8.878287315368652
    6. ' ' → logprob: -12.003287315368652
    7. ':' → logprob: -12.378287315368652
    8. '):
' → logprob: -12.503287315368652
    9. '>):' → logprob: -12.628287315368652
    10. ']):' → logprob: -13.003287315368652

Token 146: ' La' (ID: 3038)
  Prédit: ' list'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' list' → logprob: -0.1360294073820114
    2. ' (' → logprob: -2.5110294818878174
    3. 'list' → logprob: -3.3860294818878174
    4. '(list' → logprob: -4.886029243469238
    5. ' la' → logprob: -6.136029243469238
    6. '   ' → logprob: -6.261029243469238
    7. ')' → logprob: -8.636029243469238
    8. ' ' → logprob: -10.011029243469238
    9. '       ' → logprob: -10.136029243469238
    10. ' def' → logprob: -10.136029243469238

Token 147: ' liste' (ID: 31719)
  Prédit: ' liste'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' liste' → logprob: -0.06557399034500122
    2. ' list' → logprob: -2.8155739307403564
    3. 'liste' → logprob: -6.1905741691589355
    4. 'list' → logprob: -7.0655741691589355
    5. ' listes' → logprob: -7.5655741691589355
    6. ' lista' → logprob: -10.565573692321777
    7. ' corresponding' → logprob: -10.565573692321777
    8. '   ' → logprob: -10.940573692321777
    9. ' correspond' → logprob: -11.315573692321777
    10. 'Liste' → logprob: -11.440573692321777

Token 148: ' des' (ID: 731)
  Prédit: ' des'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' des' → logprob: -0.047478340566158295
    2. ' of' → logprob: -3.297478437423706
    3. '   ' → logprob: -5.047478199005127
    4. 'des' → logprob: -6.547478199005127
    5. ' (' → logprob: -7.547478199005127
    6. '       ' → logprob: -7.922478199005127
    7. ')' → logprob: -9.297478675842285
    8. 'of' → logprob: -9.422478675842285
    9. ' de' → logprob: -9.547478675842285
    10. '[' → logprob: -9.547478675842285

Token 149: ' coûts' (ID: 116912)
  Prédit: ' coûts'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' coûts' → logprob: -0.5347011685371399
    2. 'co' → logprob: -1.1597011089324951
    3. 'cout' → logprob: -2.409701108932495
    4. ' cout' → logprob: -5.409701347351074
    5. 'prix' → logprob: -6.284701347351074
    6. 'cost' → logprob: -6.784701347351074
    7. 'f' → logprob: -6.909701347351074
    8. 'c' → logprob: -7.034701347351074
    9. ' coût' → logprob: -7.909701347351074
    10. ' frais' → logprob: -8.659701347351074

Token 150: ' pour' (ID: 1930)
  Prédit: ' pour'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' pour' → logprob: -0.33598846197128296
    2. ' for' → logprob: -2.2109885215759277
    3. ' correspond' → logprob: -2.9609885215759277
    4. 'pour' → logprob: -3.0859885215759277
    5. 'for' → logprob: -3.8359885215759277
    6. '   ' → logprob: -3.8359885215759277
    7. ')' → logprob: -4.335988521575928
    8. ' (' → logprob: -4.835988521575928
    9. ' associés' → logprob: -5.585988521575928
    10. 's' → logprob: -6.085988521575928

Token 151: ' chaque' (ID: 21194)
  Prédit: ' chaque'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' chaque' → logprob: -0.0057567148469388485
    2. ' each' → logprob: -5.880756855010986
    3. 'each' → logprob: -5.880756855010986
    4. 'cha' → logprob: -9.505756378173828
    5. 'Chaque' → logprob: -9.630756378173828
    6. ' cada' → logprob: -12.505756378173828
    7. ' Chaque' → logprob: -13.630756378173828
    8. ' jedes' → logprob: -13.755756378173828
    9. '每' → logprob: -14.005756378173828
    10. 'ch' → logprob: -14.130756378173828

Token 152: ' article' (ID: 5787)
  Prédit: ' article'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' article' → logprob: -0.34893998503685
    2. 'article' → logprob: -1.2239400148391724
    3. ''article' → logprob: -8.598939895629883
    4. ' ' → logprob: -9.848939895629883
    5. 'élé' → logprob: -9.973939895629883
    6. ' élément' → logprob: -10.348939895629883
    7. ' item' → logprob: -10.598939895629883
    8. 'item' → logprob: -10.723939895629883
    9. '   ' → logprob: -10.973939895629883
    10. '(article' → logprob: -11.098939895629883

Token 153: '.
' (ID: 558)
  Prédit: '):
'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '):
' → logprob: -0.7312052845954895
    2. '):' → logprob: -0.9812052845954895
    3. '   ' → logprob: -1.9812052249908447
    4. ')' → logprob: -5.856205463409424
    5. '):

' → logprob: -5.981205463409424
    6. 'def' → logprob: -9.231204986572266
    7. '):
' → logprob: -9.481204986572266
    8. ' ):
' → logprob: -9.481204986572266
    9. ' ):' → logprob: -9.981204986572266
    10. ')):
' → logprob: -9.981204986572266

Token 154: '        
' (ID: 3564)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.09900457412004471
    2. '    
' → logprob: -2.9740045070648193
    3. '
' → logprob: -3.2240045070648193
    4. ')' → logprob: -6.099004745483398
    5. '        
' → logprob: -7.724004745483398
    6. '):
' → logprob: -8.599004745483398
    7. ')
' → logprob: -9.224004745483398
    8. '  
' → logprob: -9.349004745483398
    9. '   
' → logprob: -9.474004745483398
    10. '):' → logprob: -9.849004745483398

Token 155: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.008001930080354214
    2. '"""
' → logprob: -5.758001804351807
    3. ')' → logprob: -6.133001804351807
    4. '
' → logprob: -6.883001804351807
    5. ')
' → logprob: -7.508001804351807
    6. '    
' → logprob: -7.883001804351807
    7. 'Returns' → logprob: -7.883001804351807
    8. '"""' → logprob: -9.008002281188965
    9. ' """
' → logprob: -9.258002281188965
    10. '):
' → logprob: -11.383002281188965

Token 156: ' Returns' (ID: 9609)
  Prédit: 'Returns'
  Correct (stricte): False
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'Returns' (adapté à ' Returns') → logprob: -0.41901475191116333
    2. '"""
' → logprob: -1.5440146923065186
    3. '   ' → logprob: -2.7940146923065186
    4. 'profit' → logprob: -3.2940146923065186
    5. 'max' → logprob: -4.919014930725098
    6. 'result' → logprob: -4.919014930725098
    7. '"""' → logprob: -5.794014930725098
    8. 'Calcul' → logprob: -5.919014930725098
    9. '#' → logprob: -6.044014930725098
    10. 'profits' → logprob: -6.544014930725098

Token 157: ':
' (ID: 734)
  Prédit: ':'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ':' → logprob: -0.011381542310118675
    2. '   ' → logprob: -5.01138162612915
    3. ' :' → logprob: -6.76138162612915
    4. ' list' → logprob: -7.13638162612915
    5. ':
' → logprob: -7.88638162612915
    6. '[' → logprob: -8.011381149291992
    7. 'max' → logprob: -8.261381149291992
    8. ':list' → logprob: -8.261381149291992
    9. '):' → logprob: -8.386381149291992
    10. ' max' → logprob: -8.511381149291992

Token 158: '       ' (ID: 309)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.09300381690263748
    2. ' max' → logprob: -2.718003749847412
    3. ' int' → logprob: -4.218003749847412
    4. ' sum' → logprob: -5.218003749847412
    5. 'max' → logprob: -6.468003749847412
    6. 'int' → logprob: -7.593003749847412
    7. 'sum' → logprob: -8.59300422668457
    8. '    ' → logprob: -8.71800422668457
    9. '0' → logprob: -9.09300422668457
    10. ' None' → logprob: -10.09300422668457

Token 159: ' int' (ID: 677)
  Prédit: 'int'
  Correct (stricte): False
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'int' (adapté à ' int') → logprob: -0.4288991093635559
    2. ' int' → logprob: -1.0538990497589111
    3. '   ' → logprob: -8.553898811340332
    4. '(int' → logprob: -13.053898811340332
    5. '
' → logprob: -13.428898811340332
    6. '```' → logprob: -14.428898811340332
    7. '[int' → logprob: -14.928898811340332
    8. '	int' → logprob: -15.678898811340332
    9. 'max' → logprob: -16.05389976501465
    10. ':int' → logprob: -16.17889976501465

Token 160: ':' (ID: 25)
  Prédit: ':'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ':' → logprob: -0.002495633438229561
    2. ' :' → logprob: -6.377495765686035
    3. '   ' → logprob: -7.377495765686035
    4. ':return' → logprob: -9.627495765686035
    5. ')' → logprob: -10.377495765686035
    6. '):' → logprob: -10.877495765686035
    7. ':
' → logprob: -11.002495765686035
    8. 'max' → logprob: -11.752495765686035
    9. ',' → logprob: -12.252495765686035
    10. '```' → logprob: -12.877495765686035

Token 161: ' La' (ID: 3038)
  Prédit: ' Le'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' Le' → logprob: -0.8857714533805847
    2. ' le' → logprob: -1.3857715129852295
    3. '0' → logprob: -1.5107715129852295
    4. 'Le' → logprob: -2.5107715129852295
    5. ' max' → logprob: -4.38577127456665
    6. '   ' → logprob: -4.51077127456665
    7. ' sum' → logprob: -5.63577127456665
    8. ' la' → logprob: -5.76077127456665
    9. ' ' → logprob: -7.13577127456665
    10. ' La' → logprob: -7.26077127456665

Token 162: ' somme' (ID: 64484)
  Prédit: ' profit'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' profit' → logprob: -0.4820879399776459
    2. ' maximum' → logprob: -1.6070879697799683
    3. 'profit' → logprob: -2.8570878505706787
    4. ' maximal' → logprob: -3.1070878505706787
    5. ' max' → logprob: -4.107088088989258
    6. 's' → logprob: -4.232088088989258
    7. 'max' → logprob: -4.232088088989258
    8. ' somme' → logprob: -4.357088088989258
    9. ' sum' → logprob: -4.732088088989258
    10. 'maximum' → logprob: -5.482088088989258

Token 163: ' maximale' (ID: 76380)
  Prédit: ' des'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' des' → logprob: -0.29284653067588806
    2. ' maximale' → logprob: -1.4178465604782104
    3. '   ' → logprob: -4.9178466796875
    4. ' du' → logprob: -7.5428466796875
    5. 'max' → logprob: -7.6678466796875
    6. ' max' → logprob: -7.6678466796875
    7. 'des' → logprob: -7.6678466796875
    8. ' totale' → logprob: -7.7928466796875
    9. ' maximal' → logprob: -7.7928466796875
    10. ' maxim' → logprob: -7.9178466796875

Token 164: ' des' (ID: 731)
  Prédit: ' des'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' des' → logprob: -0.024641824886202812
    2. 'des' → logprob: -4.024641990661621
    3. ' possible' → logprob: -5.399641990661621
    4. 'possible' → logprob: -7.274641990661621
    5. ' de' → logprob: -7.524641990661621
    6. ' du' → logprob: -8.024641990661621
    7. 'de' → logprob: -8.774641990661621
    8. '   ' → logprob: -8.774641990661621
    9. ' ' → logprob: -10.899641990661621
    10. '_des' → logprob: -11.024641990661621

Token 165: ' profits' (ID: 32798)
  Prédit: ' profits'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' profits' → logprob: -0.29905784130096436
    2. 'profits' → logprob: -1.5490578413009644
    3. 'profit' → logprob: -4.049057960510254
    4. 'prof' → logprob: -4.299057960510254
    5. ' profit' → logprob: -4.549057960510254
    6. 'pro' → logprob: -6.924057960510254
    7. '[' → logprob: -7.299057960510254
    8. ' prof' → logprob: -7.549057960510254
    9. '(pro' → logprob: -7.549057960510254
    10. ' bénéf' → logprob: -8.736557960510254

Token 166: ' posit' (ID: 13047)
  Prédit: ' posit'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' posit' → logprob: -0.2864941656589508
    2. ' possibles' → logprob: -2.536494255065918
    3. '   ' → logprob: -2.911494255065918
    4. ' des' → logprob: -3.161494255065918
    5. ')' → logprob: -4.161494255065918
    6. 'posit' → logprob: -4.786494255065918
    7. ' positive' → logprob: -4.786494255065918
    8. ' )' → logprob: -5.036494255065918
    9. 'pos' → logprob: -5.286494255065918
    10. ' obten' → logprob: -5.786494255065918

Token 167: 'ifs' (ID: 14119)
  Prédit: 'ifs'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'ifs' → logprob: -0.0015092701651155949
    2. 'if' → logprob: -6.501509189605713
    3. '```' → logprob: -13.376509666442871
    4. 's' → logprob: -13.501509666442871
    5. '   ' → logprob: -13.501509666442871
    6. 'fs' → logprob: -14.376509666442871
    7. 'i' → logprob: -15.126509666442871
    8. 'f' → logprob: -15.376509666442871
    9. '</' → logprob: -15.876509666442871
    10. '>' → logprob: -16.001508712768555

Token 168: ' tri' (ID: 12665)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.4245046377182007
    2. ')' → logprob: -1.4245046377182007
    3. '.' → logprob: -3.1745047569274902
    4. ' )' → logprob: -4.42450475692749
    5. ' obten' → logprob: -4.79950475692749
    6. ')
' → logprob: -4.79950475692749
    7. ' possible' → logprob: -5.29950475692749
    8. '
' → logprob: -5.67450475692749
    9. ' des' → logprob: -5.79950475692749
    10. ' possibles' → logprob: -5.79950475692749

Token 169: 'és' (ID: 1756)
  Prédit: 'és'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'és' → logprob: -0.4079429507255554
    2. 'ang' → logprob: -1.6579430103302002
    3. 'ée' → logprob: -2.1579430103302
    4. 'm' → logprob: -5.282942771911621
    5. 'é' → logprob: -5.657942771911621
    6. 'ées' → logprob: -5.782942771911621
    7. 'e' → logprob: -5.782942771911621
    8. 'angle' → logprob: -6.032942771911621
    9. 'ng' → logprob: -6.157942771911621
    10. 's' → logprob: -6.532942771911621

Token 170: ' par' (ID: 686)
  Prédit: '()'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '()' → logprob: -0.20351672172546387
    2. '())' → logprob: -2.953516721725464
    3. ')' → logprob: -3.203516721725464
    4. '.' → logprob: -3.578516721725464
    5. ' )' → logprob: -4.828516960144043
    6. '().' → logprob: -4.828516960144043
    7. '(' → logprob: -4.828516960144043
    8. ' des' → logprob: -5.203516960144043
    9. 'def' → logprob: -5.328516960144043
    10. ' ()' → logprob: -5.703516960144043

Token 171: ' ordre' (ID: 103061)
  Prédit: 'profit'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'profit' → logprob: -0.7225700616836548
    2. 'val' → logprob: -1.0975700616836548
    3. 'value' → logprob: -2.5975699424743652
    4. 'ordre' → logprob: -3.2225699424743652
    5. 'de' → logprob: -4.472569942474365
    6. '   ' → logprob: -5.097569942474365
    7. ' profit' → logprob: -5.222569942474365
    8. '>' → logprob: -5.222569942474365
    9. 'descending' → logprob: -5.597569942474365
    10. ' ordre' → logprob: -5.722569942474365

Token 172: ' décro' (ID: 176854)
  Prédit: ' décro'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' décro' → logprob: -0.22886835038661957
    2. 'cro' → logprob: -1.8538683652877808
    3. ' cro' → logprob: -3.978868246078491
    4. 'desc' → logprob: -3.978868246078491
    5. 'd' → logprob: -4.85386848449707
    6. 'dec' → logprob: -7.22886848449707
    7. '   ' → logprob: -7.47886848449707
    8. ' decreasing' → logprob: -7.85386848449707
    9. ' dec' → logprob: -8.10386848449707
    10. 'de' → logprob: -8.35386848449707

Token 173: 'issant' (ID: 31359)
  Prédit: 'dent'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'dent' → logprob: -0.2855028510093689
    2. 'd' → logprob: -1.4105029106140137
    3. 'de' → logprob: -6.160502910614014
    4. 'nd' → logprob: -7.285502910614014
    5. 'issant' → logprob: -7.660502910614014
    6. 'sent' → logprob: -7.910502910614014
    7. 'ent' → logprob: -8.285502433776855
    8. 'nent' → logprob: -9.660502433776855
    9. 'ment' → logprob: -9.660502433776855
    10. 'nt' → logprob: -9.785502433776855

Token 174: '.
' (ID: 558)
  Prédit: '.'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '.' → logprob: -0.6166999936103821
    2. ')' → logprob: -1.4916999340057373
    3. '   ' → logprob: -1.6166999340057373
    4. ').' → logprob: -4.366700172424316
    5. ',' → logprob: -5.241700172424316
    6. ' )' → logprob: -5.491700172424316
    7. '.)' → logprob: -5.741700172424316
    8. 'def' → logprob: -5.866700172424316
    9. ')
' → logprob: -5.991700172424316
    10. '.
' → logprob: -5.991700172424316

Token 175: '   ' (ID: 271)
  Prédit: '    
'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '    
' → logprob: -0.6745216250419617
    2. '   ' → logprob: -0.9245216250419617
    3. '
' → logprob: -2.4245216846466064
    4. '\n' → logprob: -6.424521446228027
    5. ' 
' → logprob: -6.549521446228027
    6. '   
' → logprob: -7.049521446228027
    7. '     
' → logprob: -7.799521446228027
    8. '    
    
' → logprob: -7.924521446228027
    9. ')' → logprob: -8.799521446228027
    10. '  
' → logprob: -9.424521446228027

Token 176: ' """
' (ID: 7037)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.2665601372718811
    2. '
' → logprob: -1.5165600776672363
    3. '    
' → logprob: -4.391560077667236
    4. '):
' → logprob: -7.641560077667236
    5. 'profit' → logprob: -7.891560077667236
    6. 'def' → logprob: -8.516560554504395
    7. '   
' → logprob: -8.516560554504395
    8. ')' → logprob: -8.891560554504395
    9. '  
' → logprob: -9.016560554504395
    10. ':
' → logprob: -9.016560554504395

Token 177: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.18003970384597778
    2. ' profit' → logprob: -2.555039644241333
    3. 'profit' → logprob: -2.805039644241333
    4. ' profits' → logprob: -4.180039882659912
    5. 'profits' → logprob: -4.805039882659912
    6. 'max' → logprob: -7.680039882659912
    7. ' profitable' → logprob: -7.805039882659912
    8. ' max' → logprob: -7.930039882659912
    9. '    
' → logprob: -8.055039405822754
    10. 'prof' → logprob: -8.305039405822754

Token 178: ' #' (ID: 1069)
  Prédit: 'profits'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'profits' → logprob: -0.05405580252408981
    2. '   ' → logprob: -3.429055690765381
    3. 'profit' → logprob: -4.179055690765381
    4. ' profits' → logprob: -5.429055690765381
    5. 'positive' → logprob: -8.804056167602539
    6. 'prof' → logprob: -9.304056167602539
    7. ' profit' → logprob: -9.804056167602539
    8. 'n' → logprob: -9.804056167602539
    9. 'total' → logprob: -9.804056167602539
    10. '    
' → logprob: -10.929056167602539

Token 179: ' Calcul' (ID: 57243)
  Prédit: 'profits'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'profits' → logprob: -0.3782753050327301
    2. ' profits' → logprob: -1.3782752752304077
    3. 'profit' → logprob: -3.3782753944396973
    4. ' profit' → logprob: -4.003275394439697
    5. '   ' → logprob: -4.753275394439697
    6. 'prof' → logprob: -7.503275394439697
    7. '#' → logprob: -7.878275394439697
    8. 'total' → logprob: -9.128274917602539
    9. ' profitable' → logprob: -9.128274917602539
    10. 'pro' → logprob: -9.378274917602539

Token 180: 'er' (ID: 259)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.065289705991745
    2. ' profits' → logprob: -3.1902897357940674
    3. 'profits' → logprob: -4.315289497375488
    4. ' profit' → logprob: -5.065289497375488
    5. 'profit' → logprob: -6.315289497375488
    6. '(pro' → logprob: -8.565289497375488
    7. 'pro' → logprob: -10.190289497375488
    8. '_profit' → logprob: -10.190289497375488
    9. 'def' → logprob: -10.440289497375488
    10. 's' → logprob: -10.690289497375488

Token 181: ' le' (ID: 505)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.9153584837913513
    2. 'profits' → logprob: -0.9153584837913513
    3. ' profits' → logprob: -1.665358543395996
    4. ' les' → logprob: -5.165358543395996
    5. 'profit' → logprob: -6.415358543395996
    6. ' profit' → logprob: -7.415358543395996
    7. 'les' → logprob: -7.415358543395996
    8. ' des' → logprob: -7.790358543395996
    9. ' le' → logprob: -8.290358543395996
    10. ' ' → logprob: -8.290358543395996

Token 182: ' profit' (ID: 15971)
  Prédit: 'profits'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'profits' → logprob: -0.022779596969485283
    2. ' profits' → logprob: -3.897779703140259
    3. 'profit' → logprob: -6.64777946472168
    4. '   ' → logprob: -7.64777946472168
    5. 'prof' → logprob: -8.14777946472168
    6. '#' → logprob: -10.27277946472168
    7. ' profit' → logprob: -10.39777946472168
    8. 'pro' → logprob: -11.21027946472168
    9. 'benef' → logprob: -11.58527946472168
    10. ' ' → logprob: -11.58527946472168

Token 183: ' pour' (ID: 1930)
  Prédit: 's'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 's' → logprob: -0.013176234439015388
    2. '   ' → logprob: -4.388176441192627
    3. ' =' → logprob: -7.763176441192627
    4. 'profits' → logprob: -8.888175964355469
    5. 'profit' → logprob: -10.513175964355469
    6. '=' → logprob: -10.513175964355469
    7. ' s' → logprob: -11.263175964355469
    8. ' profits' → logprob: -12.013175964355469
    9. '_profit' → logprob: -12.263175964355469
    10. '_pro' → logprob: -12.263175964355469

Token 184: ' chaque' (ID: 21194)
  Prédit: ' i'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' i' → logprob: -0.11873389035463333
    2. 'i' → logprob: -2.4937338829040527
    3. ' chaque' → logprob: -3.9937338829040527
    4. ' each' → logprob: -5.118733882904053
    5. 'each' → logprob: -6.118733882904053
    6. 'val' → logprob: -6.618733882904053
    7. ' val' → logprob: -8.118734359741211
    8. '[i' → logprob: -8.368734359741211
    9. 'value' → logprob: -8.743734359741211
    10. ' value' → logprob: -9.118734359741211

Token 185: ' élément' (ID: 99627)
  Prédit: ' i'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' i' → logprob: -0.07212792336940765
    2. 'i' → logprob: -3.4471278190612793
    3. ' article' → logprob: -4.697127819061279
    4. 'article' → logprob: -5.072127819061279
    5. ' élément' → logprob: -5.072127819061279
    6. 'élé' → logprob: -5.322127819061279
    7. 'item' → logprob: -5.447127819061279
    8. ' item' → logprob: -5.947127819061279
    9. ' index' → logprob: -6.697127819061279
    10. 'index' → logprob: -6.947127819061279

Token 186: '
' (ID: 198)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.12709955871105194
    2. 'profits' → logprob: -2.7520995140075684
    3. ' profits' → logprob: -3.5020995140075684
    4. 'profit' → logprob: -4.502099514007568
    5. ' profit' → logprob: -5.377099514007568
    6. '    
' → logprob: -5.502099514007568
    7. ':' → logprob: -6.252099514007568
    8. '
' → logprob: -6.377099514007568
    9. 's' → logprob: -6.752099514007568
    10. '_profit' → logprob: -8.627099990844727

Token 187: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.03926614671945572
    2. 'profits' → logprob: -3.4142661094665527
    3. ' profits' → logprob: -5.664266109466553
    4. 'profit' → logprob: -6.414266109466553
    5. '    
' → logprob: -8.289266586303711
    6. ' profit' → logprob: -9.414266586303711
    7. '
' → logprob: -10.289266586303711
    8. '(pro' → logprob: -10.539266586303711
    9. ':' → logprob: -10.539266586303711
    10. 'pro' → logprob: -10.789266586303711

Token 188: ' profit' (ID: 15971)
  Prédit: 'profits'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'profits' → logprob: -0.2605186700820923
    2. '   ' → logprob: -1.8855186700820923
    3. ' profits' → logprob: -2.6355185508728027
    4. 'profit' (adapté à ' profit') → logprob: -5.260518550872803
    5. ' profit' → logprob: -8.385519027709961
    6. 'pro' → logprob: -8.385519027709961
    7. 'prof' → logprob: -8.760519027709961
    8. ' ' → logprob: -10.510519027709961
    9. '    
' → logprob: -10.510519027709961
    10. '	pro' → logprob: -11.823019027709961

Token 189: '_list' (ID: 4162)
  Prédit: 's'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 's' → logprob: -0.0001085497424355708
    2. ' =' → logprob: -9.25010871887207
    3. '=' → logprob: -11.37510871887207
    4. '_s' → logprob: -14.87510871887207
    5. ' s' → logprob: -15.00010871887207
    6. '=s' → logprob: -15.12510871887207
    7. '_' → logprob: -16.75010871887207
    8. '   ' → logprob: -17.37510871887207
    9. '(s' → logprob: -18.87510871887207
    10. '_list' → logprob: -19.00010871887207

Token 190: ' =' (ID: 314)
  Prédit: ' ='
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' =' → logprob: -0.0076079354621469975
    2. '=' → logprob: -4.882607936859131
    3. '   ' → logprob: -13.632607460021973
    4. ' ' → logprob: -15.382607460021973
    5. ' =[' → logprob: -15.757607460021973
    6. 's' → logprob: -16.13260841369629
    7. '=[]' → logprob: -17.25760841369629
    8. ')' → logprob: -17.25760841369629
    9. '[:]' → logprob: -17.38260841369629
    10. '[' → logprob: -17.50760841369629

Token 191: ' []
' (ID: 8911)
  Prédit: ' ['
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' [' → logprob: -0.0506579615175724
    2. '[value' → logprob: -3.0506579875946045
    3. '[' → logprob: -6.800657749176025
    4. '[val' → logprob: -7.300657749176025
    5. '[v' → logprob: -8.800658226013184
    6. '[i' → logprob: -9.800658226013184
    7. '[list' → logprob: -9.800658226013184
    8. '   ' → logprob: -11.800658226013184
    9. '[int' → logprob: -12.550658226013184
    10. '[len' → logprob: -13.800658226013184

Token 192: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.08370723575353622
    2. ' for' → logprob: -2.708707332611084
    3. 'for' → logprob: -4.333707332611084
    4. '    
' → logprob: -8.083706855773926
    5. '
' → logprob: -9.208706855773926
    6. '	for' → logprob: -9.583706855773926
    7. '    ' → logprob: -10.958706855773926
    8. ',' → logprob: -11.583706855773926
    9. '  ' → logprob: -11.708706855773926
    10. ' ' → logprob: -11.833706855773926

Token 193: ' for' (ID: 395)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.3003523647785187
    2. 'for' (adapté à ' for') → logprob: -1.9253523349761963
    3. ' for' → logprob: -2.1753523349761963
    4. '    
' → logprob: -10.175352096557617
    5. '	for' → logprob: -11.925352096557617
    6. '
' → logprob: -13.300352096557617
    7. '   ' → logprob: -14.300352096557617
    8. '  ' → logprob: -14.550352096557617
    9. 'n' → logprob: -14.550352096557617
    10. '    ' → logprob: -14.800352096557617

Token 194: ' i' (ID: 575)
  Prédit: ' i'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' i' → logprob: -0.7404512166976929
    2. ' value' → logprob: -1.3654512166976929
    3. 'value' → logprob: -2.1154513359069824
    4. 'v' → logprob: -2.6154513359069824
    5. 'i' → logprob: -2.9904513359069824
    6. ' v' → logprob: -3.7404513359069824
    7. ' val' → logprob: -10.115450859069824
    8. 'val' → logprob: -10.240450859069824
    9. ' idx' → logprob: -11.740450859069824
    10. 'index' → logprob: -11.865450859069824

Token 195: ' in' (ID: 306)
  Prédit: ' in'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' in' → logprob: -0.006759652402251959
    2. 'in' → logprob: -5.0067596435546875
    3. ' ' → logprob: -10.256759643554688
    4. ',' → logprob: -12.006759643554688
    5. 'range' → logprob: -14.256759643554688
    6. ' ,' → logprob: -14.381759643554688
    7. '  ' → logprob: -14.631759643554688
    8. '   ' → logprob: -14.881759643554688
    9. '    ' → logprob: -15.131759643554688
    10. '	in' → logprob: -15.506759643554688

Token 196: ' range' (ID: 3352)
  Prédit: 'range'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'range' → logprob: -0.2519364058971405
    2. ' range' → logprob: -1.501936435699463
    3. ' ' → logprob: -12.876935958862305
    4. '	range' → logprob: -13.126935958862305
    5. '   ' → logprob: -13.876935958862305
    6. '(range' → logprob: -14.501935958862305
    7. '  ' → logprob: -14.751935958862305
    8. 'ange' → logprob: -15.126935958862305
    9. 'rang' → logprob: -15.251935958862305
    10. ' xrange' → logprob: -15.501935958862305

Token 197: '(len' (ID: 14990)
  Prédit: '(len'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(len' → logprob: -9.221884101862088e-05
    2. ' len' → logprob: -9.500092506408691
    3. 'len' → logprob: -11.000092506408691
    4. '(' → logprob: -15.500092506408691
    5. '   ' → logprob: -15.875092506408691
    6. '	len' → logprob: -15.875092506408691
    7. ' (' → logprob: -16.125091552734375
    8. ',len' → logprob: -18.750091552734375
    9. '[len' → logprob: -20.250091552734375
    10. '=len' → logprob: -20.500091552734375

Token 198: '(values' (ID: 40883)
  Prédit: '(values'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(values' → logprob: -0.011695466935634613
    2. 'values' → logprob: -4.511695384979248
    3. ' values' → logprob: -7.386695384979248
    4. '(' → logprob: -11.261695861816406
    5. ' (' → logprob: -12.011695861816406
    6. '(cost' → logprob: -12.511695861816406
    7. '	values' → logprob: -13.261695861816406
    8. ')' → logprob: -13.761695861816406
    9. '.values' → logprob: -14.386695861816406
    10. 'cost' → logprob: -15.011695861816406

Token 199: ')):
' (ID: 22530)
  Prédit: ')):
'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')):
' → logprob: -0.06428860127925873
    2. ')):' → logprob: -2.81428861618042
    3. '):
' → logprob: -6.68928861618042
    4. '))' → logprob: -7.68928861618042
    5. '):' → logprob: -8.564288139343262
    6. ' ' → logprob: -8.689288139343262
    7. '   ' → logprob: -8.689288139343262
    8. ')):
' → logprob: -9.939288139343262
    9. ')' → logprob: -10.314288139343262
    10. '       ' → logprob: -13.189288139343262

Token 200: '       ' (ID: 309)
  Prédit: '       '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '       ' → logprob: -0.002387302927672863
    2. ':' → logprob: -6.252387523651123
    3. '   ' → logprob: -9.377387046813965
    4. '        
' → logprob: -9.377387046813965
    5. ':
' → logprob: -9.752387046813965
    6. '):
' → logprob: -9.752387046813965
    7. ' profit' → logprob: -10.252387046813965
    8. ',' → logprob: -10.252387046813965
    9. '):' → logprob: -10.627387046813965
    10. '    
' → logprob: -11.502387046813965

Token 201: ' profit' (ID: 15971)
  Prédit: ' profit'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' profit' → logprob: -0.34136223793029785
    2. 'profit' (adapté à ' profit') → logprob: -1.3413622379302979
    3. '       ' → logprob: -3.841362237930298
    4. '   ' → logprob: -5.091361999511719
    5. 'prof' → logprob: -11.216361999511719
    6. '_profit' → logprob: -11.216361999511719
    7. '        
' → logprob: -11.716361999511719
    8. ' profits' → logprob: -11.716361999511719
    9. 'profits' → logprob: -12.091361999511719
    10. '           ' → logprob: -12.153861999511719

Token 202: ' =' (ID: 314)
  Prédit: ' ='
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' =' → logprob: -0.0849732831120491
    2. '=' → logprob: -2.9599733352661133
    3. '_' → logprob: -3.5849733352661133
    4. '_list' → logprob: -6.334973335266113
    5. '   ' → logprob: -10.084973335266113
    6. 's' → logprob: -10.334973335266113
    7. ' _' → logprob: -11.459973335266113
    8. '_value' → logprob: -11.584973335266113
    9. '=_' → logprob: -11.709973335266113
    10. '_=' → logprob: -11.709973335266113

Token 203: ' values' (ID: 4824)
  Prédit: ' values'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' values' → logprob: -0.04859054833650589
    2. 'values' → logprob: -3.048590660095215
    3. '	values' → logprob: -13.548590660095215
    4. '(values' → logprob: -13.673590660095215
    5. '   ' → logprob: -15.173590660095215
    6. ' valeurs' → logprob: -16.2985897064209
    7. '.values' → logprob: -16.4235897064209
    8. ' valores' → logprob: -16.7985897064209
    9. '_values' → logprob: -16.7985897064209
    10. 'value' → logprob: -17.0485897064209

Token 204: '[i' (ID: 1768)
  Prédit: '[i'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '[i' → logprob: -0.002221745438873768
    2. '[' → logprob: -6.127221584320068
    3. ' [' → logprob: -10.252222061157227
    4. ' -' → logprob: -14.127222061157227
    5. ')' → logprob: -15.627222061157227
    6. '[I' → logprob: -15.627222061157227
    7. '-' → logprob: -16.127222061157227
    8. '   ' → logprob: -17.252222061157227
    9. '[
' → logprob: -17.627222061157227
    10. '[...]' → logprob: -17.877222061157227

Token 205: ']' (ID: 60)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')' → logprob: -0.4798189699649811
    2. ' -' → logprob: -1.2298189401626587
    3. '-' → logprob: -3.1048190593719482
    4. ']' → logprob: -3.2298190593719482
    5. '[i' → logprob: -6.229818820953369
    6. ' )' → logprob: -6.354818820953369
    7. '[' → logprob: -7.854818820953369
    8. ' ' → logprob: -9.354819297790527
    9. ' ]' → logprob: -9.604819297790527
    10. '   ' → logprob: -9.604819297790527

Token 206: ' -' (ID: 533)
  Prédit: '-'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '-' → logprob: -0.6931522488594055
    2. ' -' → logprob: -0.6931522488594055
    3. ' ' → logprob: -12.56815242767334
    4. ')' → logprob: -14.06815242767334
    5. ' ' → logprob: -14.94315242767334
    6. '   ' → logprob: -15.81815242767334
    7. '-cost' → logprob: -15.81815242767334
    8. '[' → logprob: -16.568151473999023
    9. ' minus' → logprob: -17.693151473999023
    10. '  ' → logprob: -18.193151473999023

Token 207: ' costs' (ID: 8959)
  Prédit: 'cost'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'cost' → logprob: -0.225730761885643
    2. ' costs' → logprob: -1.6007307767868042
    3. ' cost' → logprob: -8.100730895996094
    4. '   ' → logprob: -12.475730895996094
    5. '(cost' → logprob: -12.725730895996094
    6. '_cost' → logprob: -13.100730895996094
    7. ' costos' → logprob: -13.725730895996094
    8. 'Costs' → logprob: -14.475730895996094
    9. 'co' → logprob: -14.600730895996094
    10. ' costes' → logprob: -14.850730895996094

Token 208: '[i' (ID: 1768)
  Prédit: '[i'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '[i' → logprob: -1.1472419600977446e-06
    2. '[' → logprob: -14.250000953674316
    3. ' [' → logprob: -15.000000953674316
    4. '[j' → logprob: -17.625001907348633
    5. ' i' → logprob: -18.750001907348633
    6. 'i' → logprob: -19.125001907348633
    7. ')[' → logprob: -19.500001907348633
    8. ')' → logprob: -19.500001907348633
    9. '[I' → logprob: -19.625001907348633
    10. '[
' → logprob: -20.125001907348633

Token 209: ']
' (ID: 1592)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ')' → logprob: -0.005624308250844479
    2. ')
' → logprob: -5.255624294281006
    3. '   ' → logprob: -9.005624771118164
    4. '       ' → logprob: -9.380624771118164
    5. ']' → logprob: -9.630624771118164
    6. ' )' → logprob: -9.880624771118164
    7. '])' → logprob: -10.005624771118164
    8. ')]' → logprob: -12.505624771118164
    9. '<|end|>' → logprob: -12.630624771118164
    10. '))' → logprob: -13.130624771118164

Token 210: '       ' (ID: 309)
  Prédit: '       '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '       ' → logprob: -0.0004450892156455666
    2. '
' → logprob: -8.125445365905762
    3. '   ' → logprob: -9.375445365905762
    4. '        
' → logprob: -10.000445365905762
    5. '  
' → logprob: -12.500445365905762
    6. '           ' → logprob: -12.625445365905762
    7. ' if' → logprob: -12.875445365905762
    8. '<|end|>' → logprob: -12.875445365905762
    9. ',' → logprob: -13.500445365905762
    10. '    
' → logprob: -14.125445365905762

Token 211: ' profit' (ID: 15971)
  Prédit: '       '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '       ' → logprob: -0.7600669264793396
    2. ' if' → logprob: -1.2600669860839844
    3. 'if' → logprob: -1.5100669860839844
    4. ' profit' → logprob: -4.135066986083984
    5. 'profit' (adapté à ' profit') → logprob: -4.760066986083984
    6. '   ' → logprob: -5.760066986083984
    7. 'prof' → logprob: -11.260066986083984
    8. '           ' → logprob: -11.385066986083984
    9. ' ' → logprob: -11.635066986083984
    10. '
' → logprob: -11.760066986083984

Token 212: '_list' (ID: 4162)
  Prédit: '_list'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_list' → logprob: -3.190178904333152e-05
    2. 's' → logprob: -10.625031471252441
    3. '_' → logprob: -13.125031471252441
    4. ' =' → logprob: -14.125031471252441
    5. 'list' → logprob: -14.125031471252441
    6. '   ' → logprob: -14.250031471252441
    7. '>' → logprob: -14.375031471252441
    8. '=' → logprob: -14.500031471252441
    9. 'if' → logprob: -14.875031471252441
    10. '.append' → logprob: -14.875031471252441

Token 213: '.append' (ID: 3709)
  Prédit: '.append'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '.append' → logprob: -0.006718452088534832
    2. '.' → logprob: -5.006718635559082
    3. ' .' → logprob: -13.381718635559082
    4. '.app' → logprob: -13.881718635559082
    5. '.ap' → logprob: -15.256718635559082
    6. 'append' → logprob: -15.506718635559082
    7. '   ' → logprob: -16.881717681884766
    8. ').' → logprob: -16.881717681884766
    9. '.insert' → logprob: -17.756717681884766
    10. '.push' → logprob: -17.881717681884766

Token 214: '(pro' (ID: 7092)
  Prédit: '(pro'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(pro' → logprob: -0.0001137947037932463
    2. 'profit' → logprob: -9.250113487243652
    3. ' profit' → logprob: -11.625113487243652
    4. '(' → logprob: -12.125113487243652
    5. '(prob' → logprob: -13.625113487243652
    6. ' (' → logprob: -14.375113487243652
    7. '((' → logprob: -14.625113487243652
    8. '(max' → logprob: -15.250113487243652
    9. '_profit' → logprob: -15.625113487243652
    10. 'Profit' → logprob: -15.625113487243652

Token 215: 'fit' (ID: 8487)
  Prédit: 'fit'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'fit' → logprob: -0.0004341261519584805
    2. 'of' → logprob: -7.750433921813965
    3. 'f' → logprob: -13.875433921813965
    4. 'ro' → logprob: -14.750433921813965
    5. 'profit' → logprob: -14.875433921813965
    6. ' of' → logprob: -15.000433921813965
    7. 'fi' → logprob: -15.125433921813965
    8. ' fit' → logprob: -16.12543487548828
    9. '.fit' → logprob: -16.12543487548828
    10. 'dit' → logprob: -16.25043487548828

Token 216: ')
' (ID: 446)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')' → logprob: -0.00037621514638885856
    2. '   ' → logprob: -8.000375747680664
    3. ')
' → logprob: -10.500375747680664
    4. ' )' → logprob: -11.750375747680664
    5. ' if' → logprob: -13.125375747680664
    6. ')

' → logprob: -13.125375747680664
    7. 'if' → logprob: -14.250375747680664
    8. '       ' → logprob: -15.875375747680664
    9. '))' → logprob: -15.875375747680664
    10. ' ' → logprob: -16.375375747680664

Token 217: '    
' (ID: 1944)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.2774863541126251
    2. '
' → logprob: -1.9024863243103027
    3. '    
' → logprob: -2.4024863243103027
    4. 'profit' → logprob: -6.652486324310303
    5. 'positive' → logprob: -7.527486324310303
    6. '  
' → logprob: -8.652486801147461
    7. '        
' → logprob: -8.652486801147461
    8. 'profits' → logprob: -9.027486801147461
    9. '   
' → logprob: -9.777486801147461
    10. '

' → logprob: -10.277486801147461

Token 218: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.02905619703233242
    2. 'profit' → logprob: -4.279056072235107
    3. '    
' → logprob: -4.654056072235107
    4. '
' → logprob: -6.654056072235107
    5. 'profits' → logprob: -6.654056072235107
    6. 'positive' → logprob: -6.904056072235107
    7. ' profit' → logprob: -7.154056072235107
    8. '#' → logprob: -7.904056072235107
    9. ' profits' → logprob: -8.779056549072266
    10. ' positive' → logprob: -9.279056549072266

Token 219: ' #' (ID: 1069)
  Prédit: 'profit'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'profit' → logprob: -0.09730169177055359
    2. '#' (adapté à ' #') → logprob: -2.972301721572876
    3. 'positive' → logprob: -3.347301721572876
    4. '   ' → logprob: -5.597301483154297
    5. 'profits' → logprob: -6.847301483154297
    6. 'sorted' → logprob: -7.097301483154297
    7. ' profit' → logprob: -8.347301483154297
    8. 'prof' → logprob: -8.347301483154297
    9. 'posit' → logprob: -8.847301483154297
    10. 'filtered' → logprob: -9.722301483154297

Token 220: ' Trier' (ID: 191551)
  Prédit: 'profit'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'profit' → logprob: -0.27207398414611816
    2. 'profits' → logprob: -2.272073984146118
    3. '#' → logprob: -2.772073984146118
    4. ' profit' → logprob: -3.397073984146118
    5. 'prof' → logprob: -4.397073745727539
    6. 'positive' → logprob: -4.772073745727539
    7. 'fil' → logprob: -5.522073745727539
    8. ' profits' → logprob: -5.772073745727539
    9. 'Fil' → logprob: -6.022073745727539
    10. 'posit' → logprob: -6.522073745727539

Token 221: ' la' (ID: 557)
  Prédit: 'profit'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'profit' → logprob: -0.25640755891799927
    2. '(pro' → logprob: -1.6314074993133545
    3. ' profit' → logprob: -3.6314074993133545
    4. '(' → logprob: -6.506407737731934
    5. 'profits' → logprob: -7.131407737731934
    6. 'pro' → logprob: -7.381407737731934
    7. 'prof' → logprob: -7.756407737731934
    8. '   ' → logprob: -8.131407737731934
    9. '_profit' → logprob: -8.506407737731934
    10. ' profits' → logprob: -9.381407737731934

Token 222: ' liste' (ID: 31719)
  Prédit: 'profit'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'profit' → logprob: -0.04531453922390938
    2. ' profit' → logprob: -3.2953145503997803
    3. '[' → logprob: -5.170314311981201
    4. ' [' → logprob: -7.170314311981201
    5. 'sorted' → logprob: -8.04531478881836
    6. 'prof' → logprob: -8.79531478881836
    7. 'profits' → logprob: -8.92031478881836
    8. 'pro' → logprob: -9.79531478881836
    9. '_profit' → logprob: -10.29531478881836
    10. ' sorted' → logprob: -10.54531478881836

Token 223: ' des' (ID: 731)
  Prédit: 'profit'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'profit' → logprob: -0.3185192942619324
    2. '   ' → logprob: -1.6935193538665771
    3. ' profit' → logprob: -3.193519353866577
    4. ' des' → logprob: -4.068519115447998
    5. 'profits' → logprob: -4.818519115447998
    6. ' =' → logprob: -5.318519115447998
    7. 'des' → logprob: -5.693519115447998
    8. 'prof' → logprob: -5.818519115447998
    9. ',' → logprob: -6.068519115447998
    10. '_profit' → logprob: -6.318519115447998

Token 224: ' profits' (ID: 32798)
  Prédit: 'profit'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'profit' → logprob: -0.14705471694469452
    2. 'profits' → logprob: -2.022054672241211
    3. ' profit' → logprob: -6.772054672241211
    4. ' profits' → logprob: -7.022054672241211
    5. 'prof' → logprob: -7.272054672241211
    6. '[' → logprob: -7.397054672241211
    7. 'p' → logprob: -8.022054672241211
    8. '[i' → logprob: -8.272054672241211
    9. '[x' → logprob: -9.147054672241211
    10. '[p' → logprob: -9.522054672241211

Token 225: ' en' (ID: 469)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -1.1113935708999634
    2. 'profit' → logprob: -1.1113935708999634
    3. ',' → logprob: -1.7363935708999634
    4. ' profit' → logprob: -1.9863935708999634
    5. ' en' → logprob: -4.236393451690674
    6. 'profits' → logprob: -5.486393451690674
    7. ' profits' → logprob: -5.861393451690674
    8. '_profit' → logprob: -6.611393451690674
    9. ' ,' → logprob: -7.111393451690674
    10. 'en' → logprob: -7.236393451690674

Token 226: ' ordre' (ID: 103061)
  Prédit: 'descending'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'descending' → logprob: -1.0177921056747437
    2. 'reverse' → logprob: -1.2677921056747437
    3. 'd' → logprob: -1.5177921056747437
    4. ' reverse' → logprob: -2.517792224884033
    5. 'sorted' → logprob: -4.267792224884033
    6. 'dec' → logprob: -5.017792224884033
    7. ' décro' → logprob: -5.017792224884033
    8. 'ordre' → logprob: -5.017792224884033
    9. 'de' → logprob: -5.267792224884033
    10. ' descending' → logprob: -5.392792224884033

Token 227: ' décro' (ID: 176854)
  Prédit: 'd'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'd' → logprob: -0.6198505759239197
    2. ' décro' → logprob: -0.8698505759239197
    3. '   ' → logprob: -3.6198506355285645
    4. 'desc' → logprob: -4.7448506355285645
    5. 'dé' → logprob: -5.7448506355285645
    6. 'dec' → logprob: -6.3698506355285645
    7. ' déc' → logprob: -7.2448506355285645
    8. 'de' → logprob: -7.7448506355285645
    9. ' dec' → logprob: -7.9948506355285645
    10. 'descending' → logprob: -8.244850158691406

Token 228: 'issant' (ID: 31359)
  Prédit: 'issant'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'issant' → logprob: -0.5436190366744995
    2. 'ss' → logprob: -0.9186190366744995
    3. 's' → logprob: -5.293619155883789
    4. 'd' → logprob: -6.168619155883789
    5. 'asant' → logprob: -6.168619155883789
    6. 'sd' → logprob: -6.293619155883789
    7. 'sent' → logprob: -6.418619155883789
    8. 'issante' → logprob: -6.543619155883789
    9. 'nd' → logprob: -6.668619155883789
    10. 'sc' → logprob: -6.918619155883789

Token 229: ' pour' (ID: 1930)
  Prédit: 'profit'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'profit' → logprob: -0.4822363257408142
    2. '   ' → logprob: -1.107236385345459
    3. ' profit' → logprob: -3.482236385345459
    4. '
' → logprob: -5.107236385345459
    5. ',' → logprob: -5.232236385345459
    6. 'profits' → logprob: -5.732236385345459
    7. ',
' → logprob: -5.982236385345459
    8. '    
' → logprob: -6.482236385345459
    9. 'sorted' → logprob: -7.357236385345459
    10. ')' → logprob: -7.357236385345459

Token 230: ' d' (ID: 272)
  Prédit: ' profit'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' profit' → logprob: -0.23157353699207306
    2. 'profit' → logprob: -1.6065735816955566
    3. ' profiter' → logprob: -5.856573581695557
    4. ' p' → logprob: -7.231573581695557
    5. 'prof' → logprob: -7.356573581695557
    6. ' pouvoir' → logprob: -7.481573581695557
    7. ' val' → logprob: -7.981573581695557
    8. ' prof' → logprob: -8.481573104858398
    9. 'profits' → logprob: -9.356573104858398
    10. ' reverse' → logprob: -9.606573104858398

Token 231: ''abord' (ID: 89989)
  Prédit: ' profit'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' profit' → logprob: -0.3200044333934784
    2. 'profit' → logprob: -1.3200044631958008
    3. 'éc' → logprob: -5.445004463195801
    4. 'e' → logprob: -7.320004463195801
    5. 'ec' → logprob: -8.1950044631958
    6. '_profit' → logprob: -8.1950044631958
    7. 'prof' → logprob: -8.6950044631958
    8. ' prof' → logprob: -8.8200044631958
    9. 'ef' → logprob: -8.9450044631958
    10. 'i' → logprob: -9.1950044631958

Token 232: ' traiter' (ID: 105852)
  Prédit: 'profit'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'profit' → logprob: -0.5451723337173462
    2. ' profit' → logprob: -0.9201723337173462
    3. ' p' → logprob: -5.295172214508057
    4. 'prof' → logprob: -5.545172214508057
    5. ' profiter' → logprob: -5.670172214508057
    6. ' les' → logprob: -5.920172214508057
    7. 'p' → logprob: -6.045172214508057
    8. 'les' → logprob: -7.170172214508057
    9. 'val' → logprob: -7.795172214508057
    10. ' prof' → logprob: -8.545172691345215

Token 233: ' les' (ID: 1341)
  Prédit: ' les'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' les' → logprob: -0.03625616803765297
    2. ' profit' → logprob: -4.911256313323975
    3. 'les' → logprob: -5.286256313323975
    4. ' profitable' → logprob: -5.286256313323975
    5. ' positive' → logprob: -5.786256313323975
    6. ' la' → logprob: -5.786256313323975
    7. ' ceux' → logprob: -6.161256313323975
    8. '   ' → logprob: -6.411256313323975
    9. ' the' → logprob: -6.411256313323975
    10. ' profits' → logprob: -6.536256313323975

Token 234: ' plus' (ID: 2932)
  Prédit: ' profits'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' profits' → logprob: -0.7424299716949463
    2. ' profit' → logprob: -1.3674299716949463
    3. 'profits' → logprob: -1.8674299716949463
    4. 'profit' → logprob: -2.3674299716949463
    5. ' positive' → logprob: -4.992429733276367
    6. 'prof' → logprob: -5.117429733276367
    7. ' profitable' → logprob: -6.492429733276367
    8. 'positive' → logprob: -6.617429733276367
    9. ' prof' → logprob: -6.867429733276367
    10. ' bénéf' → logprob: -7.367429733276367

Token 235: ' grands' (ID: 43085)
  Prédit: ' grandes'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' grandes' → logprob: -0.7446193099021912
    2. ' grands' → logprob: -1.369619369506836
    3. '   ' → logprob: -2.994619369506836
    4. ' ' → logprob: -3.744619369506836
    5. ' grand' → logprob: -3.744619369506836
    6. ' large' → logprob: -4.119619369506836
    7. ' élevés' → logprob: -4.119619369506836
    8. ' positive' → logprob: -4.244619369506836
    9. ' importants' → logprob: -4.244619369506836
    10. ' profit' → logprob: -4.244619369506836

Token 236: ' profits' (ID: 32798)
  Prédit: 'profits'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'profits' → logprob: -0.3229371905326843
    2. 'profit' → logprob: -2.072937250137329
    3. ',' → logprob: -2.447937250137329
    4. ' profits' → logprob: -3.322937250137329
    5. '.' → logprob: -4.19793701171875
    6. ')' → logprob: -5.07293701171875
    7. ' profit' → logprob: -5.69793701171875
    8. 'prof' → logprob: -6.57293701171875
    9. 'pro' → logprob: -7.82293701171875
    10. '(pro' → logprob: -8.32293701171875

Token 237: '
' (ID: 198)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.1752733290195465
    2. 'profit' → logprob: -2.1752734184265137
    3. '
' → logprob: -3.4252734184265137
    4. '    
' → logprob: -5.425273418426514
    5. ' profit' → logprob: -5.425273418426514
    6. 'profits' → logprob: -6.175273418426514
    7. ',' → logprob: -6.425273418426514
    8. ',
' → logprob: -7.675273418426514
    9. '.' → logprob: -8.050272941589355
    10. ' profits' → logprob: -8.050272941589355

Token 238: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.028096498921513557
    2. '
' → logprob: -4.278096675872803
    3. 'profit' → logprob: -4.778096675872803
    4. '    
' → logprob: -5.528096675872803
    5. ' profit' → logprob: -7.028096675872803
    6. ',' → logprob: -8.903096199035645
    7. 'sorted' → logprob: -9.278096199035645
    8. 'profits' → logprob: -9.278096199035645
    9. ',
' → logprob: -10.028096199035645
    10. '  
' → logprob: -10.153096199035645

Token 239: ' profit' (ID: 15971)
  Prédit: 'profit'
  Correct (stricte): False
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'profit' (adapté à ' profit') → logprob: -0.13609579205513
    2. ' profit' → logprob: -2.3860957622528076
    3. '   ' → logprob: -3.3860957622528076
    4. '
' → logprob: -7.386096000671387
    5. '    
' → logprob: -8.261096000671387
    6. 'profits' → logprob: -8.636096000671387
    7. 'sorted' → logprob: -9.386096000671387
    8. 'prof' → logprob: -9.761096000671387
    9. ' profits' → logprob: -9.886096000671387
    10. 'Profit' → logprob: -10.886096000671387

Token 240: '_list' (ID: 4162)
  Prédit: '_list'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_list' → logprob: -0.005547255277633667
    2. '_sorted' → logprob: -5.755547046661377
    3. 's' → logprob: -6.130547046661377
    4. '_s' → logprob: -9.130547523498535
    5. '_' → logprob: -10.005547523498535
    6. '_sort' → logprob: -11.630547523498535
    7. ' =' → logprob: -11.880547523498535
    8. '=' → logprob: -12.380547523498535
    9. 'sorted' → logprob: -12.380547523498535
    10. ')_' → logprob: -13.005547523498535

Token 241: '.sort' (ID: 19551)
  Prédit: '.sort'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '.sort' → logprob: -0.06199177727103233
    2. '.' → logprob: -2.8119916915893555
    3. '=' → logprob: -11.061991691589355
    4. ' =' → logprob: -12.811991691589355
    5. ' .' → logprob: -13.186991691589355
    6. 'sort' → logprob: -13.561991691589355
    7. '.sorted' → logprob: -14.061991691589355
    8. '.=' → logprob: -14.436991691589355
    9. '_sorted' → logprob: -14.811991691589355
    10. '.s' → logprob: -15.061991691589355

Token 242: '(reverse' (ID: 110806)
  Prédit: '(reverse'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(reverse' → logprob: -0.00023798657639417797
    2. '(' → logprob: -8.375238418579102
    3. 'reverse' → logprob: -11.875238418579102
    4. '()' → logprob: -15.250238418579102
    5. '(re' → logprob: -16.2502384185791
    6. '(key' → logprob: -16.8752384185791
    7. '_reverse' → logprob: -17.0002384185791
    8. '(
' → logprob: -17.0002384185791
    9. ' reverse' → logprob: -17.1252384185791
    10. '.reverse' → logprob: -18.5002384185791

Token 243: '=True' (ID: 7827)
  Prédit: '=True'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '=True' → logprob: -0.004678491968661547
    2. '=' → logprob: -5.629678726196289
    3. ')' → logprob: -6.879678726196289
    4. '(True' → logprob: -10.629678726196289
    5. ')=' → logprob: -12.004678726196289
    6. 'True' → logprob: -12.379678726196289
    7. '())' → logprob: -12.504678726196289
    8. '()' → logprob: -13.004678726196289
    9. ' =' → logprob: -13.129678726196289
    10. '   ' → logprob: -13.254678726196289

Token 244: ')
' (ID: 446)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')' → logprob: -2.5822400857578032e-05
    2. ')
' → logprob: -10.625025749206543
    3. ' )' → logprob: -13.875025749206543
    4. ')

' → logprob: -15.375025749206543
    5. '   ' → logprob: -15.875025749206543
    6. '))' → logprob: -17.00002670288086
    7. ')return' → logprob: -17.00002670288086
    8. ')
' → logprob: -17.37502670288086
    9. '[' → logprob: -17.75002670288086
    10. ')`' → logprob: -18.00002670288086

Token 245: '    
' (ID: 1944)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -1.0786511898040771
    2. 'total' → logprob: -1.2036511898040771
    3. 'result' → logprob: -2.328651189804077
    4. 'max' → logprob: -2.453651189804077
    5. '
' → logprob: -2.578651189804077
    6. 'sum' → logprob: -3.328651189804077
    7. 'profit' → logprob: -3.453651189804077
    8. '    
' → logprob: -4.203651428222656
    9. 'positive' → logprob: -4.578651428222656
    10. ' total' → logprob: -6.078651428222656

Token 246: '   ' (ID: 271)
  Prédit: 'total'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'total' → logprob: -0.6926501393318176
    2. 'result' → logprob: -1.1926500797271729
    3. '   ' → logprob: -2.192650079727173
    4. 'max' → logprob: -3.192650079727173
    5. ' total' → logprob: -3.942650079727173
    6. 'sum' → logprob: -4.442650318145752
    7. 'profit' → logprob: -5.317650318145752
    8. ' result' → logprob: -5.817650318145752
    9. '    
' → logprob: -6.692650318145752
    10. '
' → logprob: -6.692650318145752

Token 247: ' #' (ID: 1069)
  Prédit: 'total'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'total' → logprob: -0.6815273761749268
    2. 'max' → logprob: -0.9315273761749268
    3. 'profit' → logprob: -2.6815273761749268
    4. 'result' → logprob: -3.6815273761749268
    5. 'sum' → logprob: -5.306527137756348
    6. '   ' → logprob: -7.056527137756348
    7. 's' → logprob: -8.681527137756348
    8. 'return' → logprob: -8.806527137756348
    9. 'maximum' → logprob: -9.056527137756348
    10. 'positive' → logprob: -9.681527137756348

Token 248: ' Cum' (ID: 42248)
  Prédit: 'max'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'max' → logprob: -0.7728193998336792
    2. 'total' → logprob: -0.8978193998336792
    3. 'profit' → logprob: -2.6478195190429688
    4. ' total' → logprob: -3.7728195190429688
    5. 'result' → logprob: -4.022819519042969
    6. ' max' → logprob: -4.647819519042969
    7. 'sum' → logprob: -5.522819519042969
    8. ' profit' → logprob: -5.772819519042969
    9. 'return' → logprob: -7.397819519042969
    10. ' result' → logprob: -7.772819519042969

Token 249: 'uler' (ID: 11802)
  Prédit: 'uler'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'uler' → logprob: -0.5889996290206909
    2. 'ul' → logprob: -1.588999629020691
    3. 'ulate' → logprob: -2.7139997482299805
    4. 'ulative' → logprob: -2.8389997482299805
    5. 'ulé' → logprob: -3.3389997482299805
    6. 'ulated' → logprob: -3.9639997482299805
    7. 'm' → logprob: -4.0889997482299805
    8. 'ulat' → logprob: -4.2139997482299805
    9. 'sum' → logprob: -4.9639997482299805
    10. 'ule' → logprob: -5.2139997482299805

Token 250: ' les' (ID: 1341)
  Prédit: 'profit'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'profit' → logprob: -0.6727750897407532
    2. ' profit' → logprob: -1.4227750301361084
    3. 'total' → logprob: -1.7977750301361084
    4. ' total' → logprob: -3.0477750301361084
    5. 'max' → logprob: -3.6727750301361084
    6. 'sum' → logprob: -5.1727752685546875
    7. 'result' → logprob: -6.0477752685546875
    8. ' max' → logprob: -6.7977752685546875
    9. ' sum' → logprob: -8.422775268554688
    10. ' result' → logprob: -8.672775268554688

Token 251: ' profits' (ID: 32798)
  Prédit: ' profit'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' profit' → logprob: -0.6984654664993286
    2. 'profit' → logprob: -1.3234654664993286
    3. ' profits' → logprob: -2.323465347290039
    4. ' total' → logprob: -3.198465347290039
    5. 'profits' → logprob: -3.323465347290039
    6. 'max' → logprob: -4.573465347290039
    7. 'total' → logprob: -4.698465347290039
    8. 'sum' → logprob: -4.698465347290039
    9. ' sum' → logprob: -4.823465347290039
    10. ' positive' → logprob: -5.448465347290039

Token 252: ' tant' (ID: 16235)
  Prédit: 'total'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'total' → logprob: -0.7264938354492188
    2. 'max' → logprob: -1.6014938354492188
    3. '   ' → logprob: -2.1014938354492188
    4. '
' → logprob: -2.7264938354492188
    5. '=' → logprob: -3.3514938354492188
    6. ' total' → logprob: -3.9764938354492188
    7. 'sum' → logprob: -4.351493835449219
    8. 'result' → logprob: -4.476493835449219
    9. ' =' → logprob: -4.476493835449219
    10. '    
' → logprob: -4.851493835449219

Token 253: ' qu' (ID: 474)
  Prédit: ' que'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' que' → logprob: -0.05512836202979088
    2. 'que' → logprob: -2.930128335952759
    3. ' qu' → logprob: -8.93012809753418
    4. '   ' → logprob: -9.93012809753418
    5. 'qu' → logprob: -10.05512809753418
    6. ' that' → logprob: -11.55512809753418
    7. 'that' → logprob: -11.93012809753418
    8. 'Que' → logprob: -13.43012809753418
    9. 'ôt' → logprob: -13.80512809753418
    10. 'quee' → logprob: -14.68012809753418

Token 254: ''ils' (ID: 41108)
  Prédit: ' profit'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' profit' → logprob: -0.014690839685499668
    2. 'profit' → logprob: -4.63969087600708
    3. ' profits' → logprob: -6.13969087600708
    4. '   ' → logprob: -6.76469087600708
    5. ' que' → logprob: -7.26469087600708
    6. ' len' → logprob: -8.514690399169922
    7. ' le' → logprob: -9.264690399169922
    8. '(pro' → logprob: -9.389690399169922
    9. '_profit' → logprob: -9.639690399169922
    10. ' ils' → logprob: -9.639690399169922

Token 255: ' sont' (ID: 5242)
  Prédit: '>'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '>' → logprob: -0.15678848326206207
    2. ' >' → logprob: -2.0317885875701904
    3. '[' → logprob: -4.656788349151611
    4. ' sont' → logprob: -5.781788349151611
    5. ' are' → logprob: -7.656788349151611
    6. '[i' → logprob: -7.656788349151611
    7. 's' → logprob: -8.90678882598877
    8. '   ' → logprob: -9.15678882598877
    9. 'ont' → logprob: -10.40678882598877
    10. '[pos' → logprob: -10.65678882598877

Token 256: ' strict' (ID: 12035)
  Prédit: '>'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '>' → logprob: -0.5488417744636536
    2. ' >' → logprob: -1.2988417148590088
    3. ' posit' → logprob: -2.173841714859009
    4. 'posit' → logprob: -3.673841714859009
    5. ' positive' → logprob: -5.673841953277588
    6. ' positivos' → logprob: -6.048841953277588
    7. ' positiv' → logprob: -6.423841953277588
    8. ' positif' → logprob: -6.548841953277588
    9. 'positive' → logprob: -7.673841953277588
    10. 'sup' → logprob: -8.04884147644043

Token 257: 'ement' (ID: 962)
  Prédit: 'ement'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'ement' → logprob: -0.0014170228969305754
    2. '>' → logprob: -6.87641716003418
    3. 'ly' → logprob: -8.62641716003418
    4. 'ment' → logprob: -9.75141716003418
    5. 'e' → logprob: -10.12641716003418
    6. 'ément' → logprob: -10.37641716003418
    7. 'ely' → logprob: -10.87641716003418
    8. 'em' → logprob: -11.25141716003418
    9. 'emen' → logprob: -11.75141716003418
    10. 'lement' → logprob: -11.75141716003418

Token 258: ' posit' (ID: 13047)
  Prédit: '>'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '>' → logprob: -0.24243713915348053
    2. ' posit' → logprob: -2.1174371242523193
    3. ' >' → logprob: -2.9924371242523193
    4. 'posit' → logprob: -3.6174371242523193
    5. 'sup' → logprob: -4.617437362670898
    6. ' sup' → logprob: -5.242437362670898
    7. ' positivos' → logprob: -7.117437362670898
    8. ' positive' → logprob: -7.117437362670898
    9. ' positif' → logprob: -7.617437362670898
    10. 'positive' → logprob: -8.742437362670898

Token 259: 'ifs' (ID: 14119)
  Prédit: 'ifs'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'ifs' → logprob: -0.0011864188127219677
    2. 'if' → logprob: -6.751186370849609
    3. 'fs' → logprob: -11.62618637084961
    4. 's' → logprob: -12.00118637084961
    5. 'f' → logprob: -14.62618637084961
    6. 'is' → logprob: -15.25118637084961
    7. '   ' → logprob: -15.25118637084961
    8. 'i' → logprob: -16.50118637084961
    9. '```' → logprob: -17.12618637084961
    10. 'IFS' → logprob: -18.00118637084961

Token 260: '
' (ID: 198)
  Prédit: 'total'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'total' → logprob: -0.9141209721565247
    2. 'result' → logprob: -1.1641209125518799
    3. '   ' → logprob: -1.7891209125518799
    4. '
' → logprob: -2.41412091255188
    5. 'profit' → logprob: -4.289121150970459
    6. 'sum' → logprob: -4.914121150970459
    7. '    
' → logprob: -5.164121150970459
    8. ' total' → logprob: -6.539121150970459
    9. 'max' → logprob: -7.539121150970459
    10. 's' → logprob: -7.664121150970459

Token 261: '   ' (ID: 271)
  Prédit: 'total'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'total' → logprob: -0.5919591784477234
    2. '   ' → logprob: -1.4669592380523682
    3. 'result' → logprob: -2.216959238052368
    4. 'profit' → logprob: -2.466959238052368
    5. 'max' → logprob: -5.091958999633789
    6. '    
' → logprob: -5.216958999633789
    7. 'sum' → logprob: -5.341958999633789
    8. '
' → logprob: -5.841958999633789
    9. ' total' → logprob: -6.341958999633789
    10. ' profit' → logprob: -7.591958999633789

Token 262: ' max' (ID: 2999)
  Prédit: 'total'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'total' → logprob: -0.3924665153026581
    2. 'max' (adapté à ' max') → logprob: -1.2674665451049805
    3. '   ' → logprob: -3.6424665451049805
    4. 'profit' → logprob: -4.7674665451049805
    5. ' total' → logprob: -5.5174665451049805
    6. 'result' → logprob: -5.7674665451049805
    7. ' max' → logprob: -7.6424665451049805
    8. 'sum' → logprob: -7.8924665451049805
    9. ' profit' → logprob: -9.01746654510498
    10. 'cum' → logprob: -9.76746654510498

Token 263: '_profit' (ID: 186239)
  Prédit: '_profit'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_profit' → logprob: -0.0028878487646579742
    2. '_' → logprob: -6.252887725830078
    3. '_sum' → logprob: -7.127887725830078
    4. '_total' → logprob: -9.502887725830078
    5. '_prof' → logprob: -9.877887725830078
    6. '_pro' → logprob: -10.877887725830078
    7. 'profit' → logprob: -11.877887725830078
    8. '_value' → logprob: -14.002887725830078
    9. ' profit' → logprob: -14.002887725830078
    10. '_p' → logprob: -14.252887725830078

Token 264: ' =' (ID: 314)
  Prédit: ' ='
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' =' → logprob: -0.0021857109386473894
    2. '=' → logprob: -6.127185821533203
    3. ' +=' → logprob: -15.627185821533203
    4. '_' → logprob: -15.627185821533203
    5. ' ' → logprob: -16.252185821533203
    6. 's' → logprob: -16.252185821533203
    7. ',' → logprob: -16.377185821533203
    8. ' ' → logprob: -17.877185821533203
    9. ' =
' → logprob: -18.502185821533203
    10. '_sum' → logprob: -19.127185821533203

Token 265: ' ' (ID: 220)
  Prédit: '0'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '0' → logprob: -0.04300296679139137
    2. ' ' → logprob: -3.1680030822753906
    3. '   ' → logprob: -12.79300308227539
    4. ' ' → logprob: -14.16800308227539
    5. '  ' → logprob: -15.91800308227539
    6. 'sum' → logprob: -16.16800308227539
    7. ' sum' → logprob: -18.16800308227539
    8. '۰' → logprob: -18.29300308227539
    9. '+' → logprob: -18.54300308227539
    10. '    ' → logprob: -18.85550308227539

Token 266: '0' (ID: 15)
  Prédit: '0'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '0' → logprob: -1.0802738870552275e-05
    2. 'sum' → logprob: -11.62501049041748
    3. ' ' → logprob: -13.25001049041748
    4. '   ' → logprob: -17.625011444091797
    5. ' sum' → logprob: -19.500011444091797
    6. '０' → logprob: -20.000011444091797
    7. '۰' → logprob: -20.062511444091797
    8. '```' → logprob: -20.250011444091797
    9. '  ' → logprob: -20.375011444091797
    10. '000' → logprob: -20.812511444091797

Token 267: '
' (ID: 198)
  Prédit: '
'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '
' → logprob: -0.0038938994985073805
    2. ' for' → logprob: -6.878893852233887
    3. '   ' → logprob: -6.878893852233887
    4. '    
' → logprob: -7.128893852233887
    5. 'for' → logprob: -7.378893852233887
    6. '
' → logprob: -8.753893852233887
    7. '  
' → logprob: -9.128893852233887
    8. ' 
' → logprob: -9.878893852233887
    9. '\n' → logprob: -10.503893852233887
    10. '   
' → logprob: -10.753893852233887

Token 268: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.6442936062812805
    2. 'for' → logprob: -0.8942936062812805
    3. ' for' → logprob: -2.8942935466766357
    4. '
' → logprob: -4.644293785095215
    5. '    
' → logprob: -6.894293785095215
    6. '	for' → logprob: -10.144293785095215
    7. ' 
' → logprob: -11.019293785095215
    8. '   
' → logprob: -11.269293785095215
    9. ' i' → logprob: -11.644293785095215
    10. 'i' → logprob: -11.644293785095215

Token 269: ' for' (ID: 395)
  Prédit: 'for'
  Correct (stricte): False
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'for' (adapté à ' for') → logprob: -0.0012099954765290022
    2. '   ' → logprob: -7.0012102127075195
    3. 'i' → logprob: -8.75121021270752
    4. ' for' → logprob: -8.87621021270752
    5. ' i' → logprob: -15.00121021270752
    6. '    
' → logprob: -16.501209259033203
    7. 'idx' → logprob: -16.751209259033203
    8. '```' → logprob: -17.001209259033203
    9. '
' → logprob: -17.376209259033203
    10. '	for' → logprob: -18.126209259033203

Token 270: ' profit' (ID: 15971)
  Prédit: 'profit'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'profit' → logprob: -0.2610441744327545
    2. ' profit' → logprob: -1.7610441446304321
    3. 'p' → logprob: -3.0110442638397217
    4. ' p' → logprob: -4.761044025421143
    5. 'prof' → logprob: -9.5110445022583
    6. '   ' → logprob: -13.0110445022583
    7. ' ' → logprob: -13.3860445022583
    8. 'value' → logprob: -13.7610445022583
    9. 'gain' → logprob: -13.8860445022583
    10. 'profits' → logprob: -14.0110445022583

Token 271: ' in' (ID: 306)
  Prédit: ' in'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' in' → logprob: -0.0022912099957466125
    2. 'in' → logprob: -6.127291202545166
    3. ' >' → logprob: -10.127291679382324
    4. '>' → logprob: -10.627291679382324
    5. ' ' → logprob: -10.752291679382324
    6. 's' → logprob: -11.627291679382324
    7. '   ' → logprob: -12.002291679382324
    8. '  ' → logprob: -13.127291679382324
    9. '	in' → logprob: -13.627291679382324
    10. '_in' → logprob: -14.627291679382324

Token 272: ' profit' (ID: 15971)
  Prédit: ' profit'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' profit' → logprob: -0.4741610288619995
    2. 'profit' → logprob: -0.9741610288619995
    3. 'prof' → logprob: -10.474161148071289
    4. ' profits' → logprob: -10.974161148071289
    5. '_profit' → logprob: -11.599161148071289
    6. '   ' → logprob: -11.849161148071289
    7. 'profits' → logprob: -11.974161148071289
    8. ' ' → logprob: -12.474161148071289
    9. ' profitable' → logprob: -12.599161148071289
    10. 'Profit' → logprob: -12.974161148071289

Token 273: '_list' (ID: 4162)
  Prédit: '_list'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_list' → logprob: -1.3544423381972592e-05
    2. 's' → logprob: -11.75001335144043
    3. 'list' → logprob: -13.37501335144043
    4. 'if' → logprob: -13.37501335144043
    5. '_' → logprob: -14.00001335144043
    6. 'List' → logprob: -14.00001335144043
    7. ':' → logprob: -14.37501335144043
    8. 'profit' → logprob: -16.25001335144043
    9. ' if' → logprob: -16.75001335144043
    10. '_LIST' → logprob: -16.87501335144043

Token 274: ':
' (ID: 734)
  Prédit: ':'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ':' → logprob: -0.05241698399186134
    2. ':
' → logprob: -3.677417039871216
    3. '       ' → logprob: -4.052416801452637
    4. '   ' → logprob: -4.802416801452637
    5. ' :' → logprob: -9.802416801452637
    6. '>' → logprob: -9.802416801452637
    7. '    ' → logprob: -11.177416801452637
    8. '):
' → logprob: -11.302416801452637
    9. ' :
' → logprob: -11.802416801452637
    10. '<|end|>' → logprob: -11.802416801452637

Token 275: '       ' (ID: 309)
  Prédit: '       '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '       ' → logprob: -0.001123072113841772
    2. ' if' → logprob: -7.251122951507568
    3. '<|end|>' → logprob: -8.376123428344727
    4. '   ' → logprob: -8.876123428344727
    5. '        
' → logprob: -11.501123428344727
    6. '    ' → logprob: -11.626123428344727
    7. 'if' → logprob: -12.126123428344727
    8. '      ' → logprob: -12.376123428344727
    9. ',' → logprob: -12.626123428344727
    10. '           ' → logprob: -13.251123428344727

Token 276: ' if' (ID: 538)
  Prédit: ' if'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' if' → logprob: -0.12091194838285446
    2. 'if' (adapté à ' if') → logprob: -2.6209118366241455
    3. '       ' → logprob: -3.2459118366241455
    4. '   ' → logprob: -6.120912075042725
    5. '    ' → logprob: -11.245911598205566
    6. ' ' → logprob: -12.745911598205566
    7. '	if' → logprob: -13.620911598205566
    8. '  ' → logprob: -13.620911598205566
    9. '           ' → logprob: -14.495911598205566
    10. ' 
' → logprob: -14.745911598205566

Token 277: ' profit' (ID: 15971)
  Prédit: ' profit'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' profit' → logprob: -0.018150994554162025
    2. 'profit' → logprob: -4.018150806427002
    3. '	pro' → logprob: -14.64315128326416
    4. 'prof' → logprob: -15.26815128326416
    5. '   ' → logprob: -16.143150329589844
    6. 'pro' → logprob: -16.643150329589844
    7. '_profit' → logprob: -16.643150329589844
    8. 'Profit' → logprob: -16.768150329589844
    9. ' profi' → logprob: -17.143150329589844
    10. ' pro' → logprob: -17.268150329589844

Token 278: ' <=' (ID: 5017)
  Prédit: ' >'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' >' → logprob: -0.029077626764774323
    2. '>' → logprob: -3.9040775299072266
    3. ' <=' → logprob: -4.779077529907227
    4. '<=' → logprob: -9.279077529907227
    5. ' ' → logprob: -13.404077529907227
    6. ' ' → logprob: -15.404077529907227
    7. ')' → logprob: -15.779077529907227
    8. '   ' → logprob: -15.904077529907227
    9. 's' → logprob: -17.029077529907227
    10. '[' → logprob: -17.904077529907227

Token 279: ' ' (ID: 220)
  Prédit: '0'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '0' → logprob: -0.10020667314529419
    2. ' ' → logprob: -2.3502066135406494
    3. '۰' → logprob: -19.35020637512207
    4. '```' → logprob: -19.35020637512207
    5. '  ' → logprob: -19.47520637512207
    6. '<|end|>' → logprob: -19.60020637512207
    7. '   ' → logprob: -19.85020637512207
    8. ' ' → logprob: -20.72520637512207
    9. 's' → logprob: -21.72520637512207
    10. '０' → logprob: -22.22520637512207

Token 280: '0' (ID: 15)
  Prédit: '0'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '0' → logprob: -3.7697225252486533e-06
    2. ' ' → logprob: -12.500003814697266
    3. '۰' → logprob: -19.625003814697266
    4. '00' → logprob: -21.375003814697266
    5. '０' → logprob: -22.375003814697266
    6. '<|end|>' → logprob: -22.500003814697266
    7. '```' → logprob: -22.625003814697266
    8. '٠' → logprob: -22.875003814697266
    9. '০' → logprob: -23.625003814697266
    10. '   ' → logprob: -24.375003814697266

Token 281: ':
' (ID: 734)
  Prédit: ':'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ':' → logprob: -0.2016945779323578
    2. ':
' → logprob: -1.7016946077346802
    3. '           ' → logprob: -8.32669448852539
    4. '       ' → logprob: -10.95169448852539
    5. '):
' → logprob: -12.32669448852539
    6. ' :
' → logprob: -12.32669448852539
    7. ' :' → logprob: -12.70169448852539
    8. '   ' → logprob: -12.70169448852539
    9. ':
' → logprob: -12.82669448852539
    10. '):' → logprob: -13.82669448852539

Token 282: '           ' (ID: 352)
  Prédit: '           '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '           ' → logprob: -0.0011467679869383574
    2. 'break' → logprob: -7.1261467933654785
    3. ' break' → logprob: -8.00114631652832
    4. '       ' → logprob: -12.37614631652832
    5. '	break' → logprob: -13.75114631652832
    6. '   ' → logprob: -14.37614631652832
    7. '```' → logprob: -15.00114631652832
    8. '		' → logprob: -15.00114631652832
    9. '               ' → logprob: -15.37614631652832
    10. '_break' → logprob: -16.00114631652832

Token 283: ' #' (ID: 1069)
  Prédit: '           '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '           ' → logprob: -0.34912043809890747
    2. 'break' → logprob: -1.3491203784942627
    3. ' break' → logprob: -3.3491203784942627
    4. '	break' → logprob: -9.474120140075684
    5. '               ' → logprob: -11.224120140075684
    6. '       ' → logprob: -11.974120140075684
    7. '   ' → logprob: -12.724120140075684
    8. '_break' → logprob: -12.724120140075684
    9. '```' → logprob: -13.224120140075684
    10. 'return' → logprob: -13.974120140075684

Token 284: ' Arr' (ID: 16880)
  Prédit: ' break'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' break' → logprob: -1.0229054689407349
    2. 'break' → logprob: -1.0229054689407349
    3. '           ' → logprob: -1.2729054689407349
    4. '       ' → logprob: -7.147905349731445
    5. '	break' → logprob: -9.522905349731445
    6. '_break' → logprob: -11.897905349731445
    7. '   ' → logprob: -12.272905349731445
    8. '               ' → logprob: -12.272905349731445
    9. 'Break' → logprob: -12.647905349731445
    10. '-break' → logprob: -13.397905349731445

Token 285: 'êter' (ID: 73125)
  Prédit: 'êter'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'êter' → logprob: -0.0016135312616825104
    2. 'êt' → logprob: -6.626613616943359
    3. 'ê' → logprob: -9.00161361694336
    4. '   ' → logprob: -9.62661361694336
    5. 'éter' → logprob: -10.37661361694336
    6. '       ' → logprob: -10.87661361694336
    7. 'ête' → logprob: -11.25161361694336
    8. ' ' → logprob: -12.00161361694336
    9. 'êts' → logprob: -12.00161361694336
    10. 'et' → logprob: -12.62661361694336

Token 286: ' le' (ID: 505)
  Prédit: '           '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '           ' → logprob: -0.06466937065124512
    2. '       ' → logprob: -2.814669370651245
    3. 'le' → logprob: -7.064669609069824
    4. 'break' → logprob: -7.189669609069824
    5. ' le' → logprob: -7.564669609069824
    6. ' la' → logprob: -8.439669609069824
    7. '   ' → logprob: -9.189669609069824
    8. '               ' → logprob: -9.439669609069824
    9. '        ' → logprob: -9.814669609069824
    10. 'la' → logprob: -10.564669609069824

Token 287: ' cumul' (ID: 163119)
  Prédit: 'for'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'for' → logprob: -0.19675026834011078
    2. ' for' → logprob: -2.5717501640319824
    3. 'b' → logprob: -3.5717501640319824
    4. 'calcul' → logprob: -3.5717501640319824
    5. 'break' → logprob: -4.321750164031982
    6. '   ' → logprob: -4.821750164031982
    7. 'trait' → logprob: -5.446750164031982
    8. 'loop' → logprob: -5.446750164031982
    9. ' calcul' → logprob: -5.571750164031982
    10. 'profit' → logprob: -5.946750164031982

Token 288: ' si' (ID: 1784)
  Prédit: '       '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '       ' → logprob: -0.06999523937702179
    2. '           ' → logprob: -2.694995164871216
    3. 'break' → logprob: -10.319994926452637
    4. '               ' → logprob: -11.569994926452637
    5. ',' → logprob: -12.069994926452637
    6. '        ' → logprob: -12.944994926452637
    7. ' break' → logprob: -13.194994926452637
    8. '   ' → logprob: -13.319994926452637
    9. '.' → logprob: -13.694994926452637
    10. '      ' → logprob: -13.944994926452637

Token 289: ' on' (ID: 402)
  Prédit: ' profit'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' profit' → logprob: -0.3651514947414398
    2. 'profit' → logprob: -1.2401515245437622
    3. ' le' → logprob: -4.865151405334473
    4. 'le' → logprob: -6.115151405334473
    5. ' on' → logprob: -6.365151405334473
    6. 'prof' → logprob: -6.490151405334473
    7. ' the' → logprob: -7.240151405334473
    8. ' la' → logprob: -7.490151405334473
    9. 'the' → logprob: -7.615151405334473
    10. '   ' → logprob: -7.740151405334473

Token 290: ' atteint' (ID: 104876)
  Prédit: 'ren'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'ren' → logprob: -0.8256187438964844
    2. ' rencontre' → logprob: -0.9506187438964844
    3. 'enc' → logprob: -1.9506187438964844
    4. ' ren' → logprob: -4.075618743896484
    5. ' atteint' → logprob: -5.325618743896484
    6. 'n' → logprob: -5.575618743896484
    7. ' encounter' → logprob: -6.075618743896484
    8. 'arr' → logprob: -6.450618743896484
    9. 'tr' → logprob: -7.325618743896484
    10. ' arrive' → logprob: -7.825618743896484

Token 291: ' un' (ID: 537)
  Prédit: 'un'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'un' → logprob: -0.8785210251808167
    2. 'une' → logprob: -1.2535209655761719
    3. ' un' → logprob: -1.5035209655761719
    4. ' une' → logprob: -2.628520965576172
    5. '   ' → logprob: -6.128520965576172
    6. 'les' → logprob: -7.503520965576172
    7. 'le' → logprob: -7.753520965576172
    8. 'a' → logprob: -7.753520965576172
    9. ' ' → logprob: -8.378520965576172
    10. ' des' → logprob: -8.628520965576172

Token 292: ' profit' (ID: 15971)
  Prédit: 'profit'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'profit' → logprob: -0.023637570440769196
    2. ' profit' → logprob: -3.773637533187866
    3. 'prof' → logprob: -8.273637771606445
    4. 'élé' → logprob: -9.523637771606445
    5. 'profits' → logprob: -11.148637771606445
    6. ' bénéf' → logprob: -11.398637771606445
    7. ' élément' → logprob: -11.898637771606445
    8. '_profit' → logprob: -12.023637771606445
    9. ' ' → logprob: -12.398637771606445
    10. 'pro' → logprob: -12.648637771606445

Token 293: ' nul' (ID: 64435)
  Prédit: 'non'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'non' → logprob: -0.7097321152687073
    2. 'n' → logprob: -1.3347320556640625
    3. '   ' → logprob: -2.0847320556640625
    4. ' non' → logprob: -2.5847320556640625
    5. ' nég' → logprob: -3.3347320556640625
    6. 'neg' → logprob: -5.0847320556640625
    7. 'nul' → logprob: -6.7097320556640625
    8. '       ' → logprob: -7.9597320556640625
    9. 'strict' → logprob: -8.084732055664062
    10. '           ' → logprob: -8.209732055664062

Token 294: ' ou' (ID: 2031)
  Prédit: '       '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '       ' → logprob: -0.7485888004302979
    2. '           ' → logprob: -0.7485888004302979
    3. ' ou' → logprob: -3.498588800430298
    4. 'ou' → logprob: -3.873588800430298
    5. ' or' → logprob: -6.123588562011719
    6. 'or' → logprob: -7.748588562011719
    7. '.' → logprob: -9.748588562011719
    8. '               ' → logprob: -9.998588562011719
    9. '        ' → logprob: -10.123588562011719
    10. 'au' → logprob: -10.373588562011719

Token 295: ' nég' (ID: 55805)
  Prédit: 'neg'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'neg' → logprob: -0.3975282907485962
    2. ' nég' → logprob: -1.3975282907485962
    3. 'negative' → logprob: -2.8975281715393066
    4. 'n' → logprob: -3.7725281715393066
    5. ' negatif' → logprob: -7.147528171539307
    6. '<' → logprob: -7.272528171539307
    7. 'moins' → logprob: -8.147528648376465
    8. 'nul' → logprob: -8.522528648376465
    9. '   ' → logprob: -8.772528648376465
    10. 'né' → logprob: -9.022528648376465

Token 296: 'atif' (ID: 23984)
  Prédit: 'atif'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'atif' → logprob: -0.1800522357225418
    2. 'if' → logprob: -2.1800522804260254
    3. 'itif' → logprob: -3.0550522804260254
    4. '   ' → logprob: -5.930052280426025
    5. 'it' → logprob: -6.555052280426025
    6. '
' → logprob: -8.805051803588867
    7. '       ' → logprob: -9.305051803588867
    8. 't' → logprob: -10.180051803588867
    9. 'ative' → logprob: -10.305051803588867
    10. 'al' → logprob: -10.430051803588867

Token 297: '
' (ID: 198)
  Prédit: '           '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '           ' → logprob: -0.0006258221692405641
    2. '       ' → logprob: -7.5006256103515625
    3. ' break' → logprob: -9.750625610351562
    4. 'break' → logprob: -11.375625610351562
    5. '		' → logprob: -13.625625610351562
    6. '               ' → logprob: -14.375625610351562
    7. ',' → logprob: -14.500625610351562
    8. '   ' → logprob: -15.125625610351562
    9. '	break' → logprob: -15.375625610351562
    10. '          ' → logprob: -15.875625610351562

Token 298: '           ' (ID: 352)
  Prédit: '           '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '           ' → logprob: -0.00010747690976131707
    2. ' break' → logprob: -10.000107765197754
    3. 'break' → logprob: -10.000107765197754
    4. '       ' → logprob: -11.125107765197754
    5. '               ' → logprob: -13.875107765197754
    6. '		' → logprob: -14.750107765197754
    7. '   ' → logprob: -15.625107765197754
    8. '	break' → logprob: -16.000106811523438
    9. '          ' → logprob: -16.250106811523438
    10. '	       ' → logprob: -17.500106811523438

Token 299: ' break' (ID: 2338)
  Prédit: 'break'
  Correct (stricte): False
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'break' (adapté à ' break') → logprob: -0.020350104197859764
    2. '           ' → logprob: -4.270349979400635
    3. ' break' → logprob: -5.270349979400635
    4. '       ' → logprob: -6.895349979400635
    5. '	break' → logprob: -11.520350456237793
    6. '               ' → logprob: -13.270350456237793
    7. '   ' → logprob: -14.520350456237793
    8. '_break' → logprob: -15.020350456237793
    9. 'return' → logprob: -15.645350456237793
    10. 'Break' → logprob: -15.770350456237793

Token 300: '
' (ID: 198)
  Prédit: '       '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '       ' → logprob: -5.32392441527918e-05
    2. '   ' → logprob: -10.875053405761719
    3. '        
' → logprob: -11.500053405761719
    4. '
' → logprob: -11.875053405761719
    5. 'max' → logprob: -12.125053405761719
    6. '           ' → logprob: -12.125053405761719
    7. '    
' → logprob: -13.625053405761719
    8. '      ' → logprob: -14.000053405761719
    9. ',' → logprob: -14.500053405761719
    10. '```' → logprob: -14.500053405761719

Token 301: '       ' (ID: 309)
  Prédit: '       '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '       ' → logprob: -0.0001105762057704851
    2. 'max' → logprob: -9.500110626220703
    3. '   ' → logprob: -11.125110626220703
    4. ' max' → logprob: -11.375110626220703
    5. '           ' → logprob: -12.125110626220703
    6. '        
' → logprob: -13.750110626220703
    7. '```' → logprob: -14.625110626220703
    8. '      ' → logprob: -14.625110626220703
    9. '+' → logprob: -15.375110626220703
    10. '
' → logprob: -15.375110626220703

Token 302: ' max' (ID: 2999)
  Prédit: '       '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '       ' → logprob: -0.20500484108924866
    2. 'max' (adapté à ' max') → logprob: -1.8300048112869263
    3. ' max' → logprob: -4.080004692077637
    4. '   ' → logprob: -4.830004692077637
    5. '      ' → logprob: -11.455004692077637
    6. '           ' → logprob: -11.580004692077637
    7. '	max' → logprob: -12.205004692077637
    8. '     ' → logprob: -12.330004692077637
    9. '+' → logprob: -12.455004692077637
    10. '        
' → logprob: -12.580004692077637

Token 303: '_profit' (ID: 186239)
  Prédit: '_profit'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_profit' → logprob: -5.438573680294212e-06
    2. '_pro' → logprob: -13.500005722045898
    3. '_prof' → logprob: -13.500005722045898
    4. '_' → logprob: -13.625005722045898
    5. 'profit' → logprob: -14.000005722045898
    6. ' profit' → logprob: -15.250005722045898
    7. ' _' → logprob: -16.2500057220459
    8. 'Profit' → logprob: -17.1250057220459
    9. '   ' → logprob: -17.5000057220459
    10. '_prob' → logprob: -17.7500057220459

Token 304: ' +=' (ID: 2757)
  Prédit: ' +='
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' +=' → logprob: -0.029762065038084984
    2. '+=' → logprob: -3.529762029647827
    3. '   ' → logprob: -12.029762268066406
    4. '       ' → logprob: -12.654762268066406
    5. ']+=' → logprob: -13.904762268066406
    6. '+' → logprob: -14.154762268066406
    7. '    ' → logprob: -14.529762268066406
    8. '        ' → logprob: -16.529762268066406
    9. '```' → logprob: -16.654762268066406
    10. '+=(' → logprob: -16.779762268066406

Token 305: ' profit' (ID: 15971)
  Prédit: 'profit'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'profit' → logprob: -0.06196891888976097
    2. ' profit' → logprob: -2.8119688034057617
    3. 'prof' → logprob: -13.936968803405762
    4. 'pro' → logprob: -15.186968803405762
    5. 'prob' → logprob: -16.311969757080078
    6. '_profit' → logprob: -17.436969757080078
    7. 'Profit' → logprob: -17.436969757080078
    8. '	pro' → logprob: -17.561969757080078
    9. 'profits' → logprob: -17.811969757080078
    10. 'prot' → logprob: -19.686969757080078

Token 306: '
    
' (ID: 15698)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.015099780634045601
    2. '
' → logprob: -4.640100002288818
    3. '    
' → logprob: -5.890100002288818
    4. 'return' → logprob: -6.015100002288818
    5. ' return' → logprob: -9.26509952545166
    6. '  
' → logprob: -11.39009952545166
    7. '   
' → logprob: -12.14009952545166
    8. ' 
' → logprob: -12.89009952545166
    9. '	return' → logprob: -13.01509952545166
    10. '        
' → logprob: -13.14009952545166

Token 307: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.07903817296028137
    2. 'return' → logprob: -2.579038143157959
    3. ' return' → logprob: -9.079038619995117
    4. '
' → logprob: -10.579038619995117
    5. '    
' → logprob: -12.079038619995117
    6. '	return' → logprob: -12.829038619995117
    7. '```' → logprob: -15.954038619995117
    8. ':return' → logprob: -16.079038619995117
    9. '       ' → logprob: -16.454038619995117
    10. ' ' → logprob: -16.579038619995117

Token 308: ' return' (ID: 622)
  Prédit: 'return'
  Correct (stricte): False
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'return' (adapté à ' return') → logprob: -0.04867934063076973
    2. '   ' → logprob: -3.0486793518066406
    3. ' return' → logprob: -9.29867935180664
    4. '	return' → logprob: -15.29867935180664
    5. '
' → logprob: -16.79867935180664
    6. '    
' → logprob: -17.17367935180664
    7. '       ' → logprob: -18.29867935180664
    8. 'ret' → logprob: -18.29867935180664
    9. 'eturn' → logprob: -18.42367935180664
    10. '```' → logprob: -18.54867935180664

Token 309: ' max' (ID: 2999)
  Prédit: 'max'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'max' → logprob: -0.3868710398674011
    2. ' max' → logprob: -1.136871099472046
    3. '(max' → logprob: -18.386871337890625
    4. '	max' → logprob: -19.136871337890625
    5. '_max' → logprob: -19.261871337890625
    6. '[max' → logprob: -20.761871337890625
    7. ',max' → logprob: -22.261871337890625
    8. '=max' → logprob: -22.636871337890625
    9. ' ' → logprob: -22.886871337890625
    10. ' ' → logprob: -23.136871337890625

Token 310: '_profit' (ID: 186239)
  Prédit: '_profit'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_profit' → logprob: -1.5213274309644476e-05
    2. 'profit' → logprob: -11.375015258789062
    3. '_pro' → logprob: -13.125015258789062
    4. '_prof' → logprob: -13.500015258789062
    5. 'Profit' → logprob: -16.375015258789062
    6. ' profit' → logprob: -16.625015258789062
    7. '-profit' → logprob: -16.875015258789062
    8. '_' → logprob: -17.500015258789062
    9. '_prob' → logprob: -18.375015258789062
    10. '\' → logprob: -18.875015258789062

Token 311: '

' (ID: 279)
  Prédit: ''
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False

Token 312: 'def' (ID: 1314)
  Prédit: 'def'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'def' → logprob: -0.31948715448379517
    2. '#' → logprob: -1.9444870948791504
    3. 'values' → logprob: -2.5694870948791504
    4. 'if' → logprob: -3.1944870948791504
    5. 'print' → logprob: -4.56948709487915
    6. 'n' → logprob: -6.81948709487915
    7. 'prompt' → logprob: -7.44448709487915
    8. '```' → logprob: -8.319487571716309
    9. 'value' → logprob: -9.069487571716309
    10. '<|end|>' → logprob: -9.819487571716309

Token 313: ' main' (ID: 2758)
  Prédit: ' main'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' main' → logprob: -0.00909501314163208
    2. ' calculate' → logprob: -6.134095191955566
    3. ' read' → logprob: -6.259095191955566
    4. ' solve' → logprob: -6.634095191955566
    5. ' maximize' → logprob: -6.634095191955566
    6. 'main' → logprob: -7.384095191955566
    7. ' find' → logprob: -7.634095191955566
    8. ' max' → logprob: -8.009095191955566
    9. ' compute' → logprob: -8.509095191955566
    10. ' optimize' → logprob: -8.884095191955566

Token 314: '():
' (ID: 8595)
  Prédit: '():'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '():' → logprob: -1.747814349073451e-05
    2. ' ():' → logprob: -11.375017166137695
    3. '():
' → logprob: -12.375017166137695
    4. '()' → logprob: -14.000017166137695
    5. '(' → logprob: -15.000017166137695
    6. '()>' → logprob: -15.500017166137695
    7. '():
' → logprob: -16.000017166137695
    8. '_' → logprob: -16.250017166137695
    9. ':' → logprob: -16.625017166137695
    10. '():

' → logprob: -18.000017166137695

Token 315: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.0009648191626183689
    2. 'n' → logprob: -7.250964641571045
    3. '    
' → logprob: -8.625965118408203
    4. '
' → logprob: -10.125965118408203
    5. ' n' → logprob: -11.375965118408203
    6. '(n' → logprob: -12.000965118408203
    7. '```' → logprob: -12.125965118408203
    8. 'values' → logprob: -12.250965118408203
    9. '(values' → logprob: -14.000965118408203
    10. 'num' → logprob: -14.250965118408203

Token 316: ' """
' (ID: 7037)
  Prédit: 'values'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'values' → logprob: -0.33829358220100403
    2. '   ' → logprob: -1.3382935523986816
    3. ' values' → logprob: -3.7132935523986816
    4. '#' → logprob: -9.33829402923584
    5. 'print' → logprob: -9.58829402923584
    6. 'val' → logprob: -10.08829402923584
    7. '	values' → logprob: -10.08829402923584
    8. 'vals' → logprob: -10.46329402923584
    9. ' valeurs' → logprob: -10.96329402923584
    10. '    
' → logprob: -11.71329402923584

Token 317: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.02049855887889862
    2. 'values' → logprob: -4.145498752593994
    3. ' values' → logprob: -5.645498752593994
    4. 'prompt' → logprob: -7.770498752593994
    5. ' prompt' → logprob: -8.145498275756836
    6. '#' → logprob: -10.145498275756836
    7. '    
' → logprob: -10.395498275756836
    8. 'val' → logprob: -10.645498275756836
    9. 'print' → logprob: -10.645498275756836
    10. ' valeurs' → logprob: -11.395498275756836

Token 318: ' Point' (ID: 9971)
  Prédit: ' values'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' values' → logprob: -0.6930581331253052
    2. '   ' → logprob: -1.4430581331253052
    3. 'values' → logprob: -1.6930581331253052
    4. ' prompt' → logprob: -4.318058013916016
    5. 'print' → logprob: -4.568058013916016
    6. ' n' → logprob: -4.568058013916016
    7. '#' → logprob: -4.818058013916016
    8. ' lines' → logprob: -4.818058013916016
    9. 'prompt' → logprob: -4.818058013916016
    10. ' print' → logprob: -4.943058013916016

Token 319: ' d' (ID: 272)
  Prédit: ' d'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' d' → logprob: -0.04635956510901451
    2. 'd' → logprob: -3.4213595390319824
    3. ' de' → logprob: -4.671359539031982
    4. 'def' → logprob: -6.671359539031982
    5. '   ' → logprob: -7.546359539031982
    6. ' ' → logprob: -8.17136001586914
    7. '_' → logprob: -8.17136001586914
    8. '_d' → logprob: -8.42136001586914
    9. 'de' → logprob: -8.79636001586914
    10. '  ' → logprob: -9.04636001586914

Token 320: ''entrée' (ID: 115820)
  Prédit: 'entrée'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'entrée' → logprob: -0.008696592412889004
    2. ''entrée' → logprob: -4.758696556091309
    3. 'entr' → logprob: -9.633696556091309
    4. '’entrée' → logprob: -12.133696556091309
    5. '_' → logprob: -12.383696556091309
    6. ' entrée' → logprob: -13.133696556091309
    7. 'ent' → logprob: -13.258696556091309
    8. 'entry' → logprob: -13.508696556091309
    9. 'entrant' → logprob: -14.008696556091309
    10. ''' → logprob: -15.258696556091309

Token 321: ' principal' (ID: 10589)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.7278448939323425
    2. ' de' → logprob: -0.9778448939323425
    3. ':' → logprob: -3.1028449535369873
    4. 'de' → logprob: -3.2278449535369873
    5. 'def' → logprob: -4.477844715118408
    6. '()' → logprob: -4.727844715118408
    7. ' d' → logprob: -4.727844715118408
    8. ' du' → logprob: -4.852844715118408
    9. '():' → logprob: -5.352844715118408
    10. '    
' → logprob: -6.102844715118408

Token 322: ' du' (ID: 1462)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.055176761001348495
    2. 'def' → logprob: -3.6801767349243164
    3. ' de' → logprob: -4.555176734924316
    4. ' du' → logprob: -5.305176734924316
    5. ':' → logprob: -5.555176734924316
    6. 'de' → logprob: -5.680176734924316
    7. ' pour' → logprob: -6.055176734924316
    8. '()' → logprob: -7.055176734924316
    9. '.' → logprob: -7.180176734924316
    10. 'if' → logprob: -8.430176734924316

Token 323: ' script' (ID: 11713)
  Prédit: 'programme'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'programme' → logprob: -0.10322517901659012
    2. ' programme' → logprob: -2.3532252311706543
    3. 'program' → logprob: -5.853225231170654
    4. 'script' → logprob: -9.228224754333496
    5. ' program' → logprob: -10.853224754333496
    6. ' script' → logprob: -11.103224754333496
    7. 'programm' → logprob: -12.353224754333496
    8. 'Programme' → logprob: -12.853224754333496
    9. 'programma' → logprob: -12.978224754333496
    10. 'code' → logprob: -14.228224754333496

Token 324: '.
' (ID: 558)
  Prédit: ':'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ':' → logprob: -0.80305016040802
    2. '():' → logprob: -1.17805016040802
    3. '   ' → logprob: -1.55305016040802
    4. '():
' → logprob: -4.3030500411987305
    5. '.' → logprob: -5.0530500411987305
    6. '):' → logprob: -5.5530500411987305
    7. ':
' → logprob: -5.8030500411987305
    8. '()' → logprob: -6.6780500411987305
    9. '
' → logprob: -6.6780500411987305
    10. '    
' → logprob: -6.9280500411987305

Token 325: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -2.47495681833243e-05
    2. '    
' → logprob: -10.750024795532227
    3. '```' → logprob: -14.375024795532227
    4. '    ' → logprob: -14.500024795532227
    5. '
' → logprob: -14.875024795532227
    6. ')' → logprob: -15.000024795532227
    7. '   ' → logprob: -15.250024795532227
    8. '       ' → logprob: -15.250024795532227
    9. '#' → logprob: -15.750024795532227
    10. 'n' → logprob: -16.000024795532227

Token 326: ' Lit' (ID: 45595)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.0008084330474957824
    2. ' values' → logprob: -7.875808238983154
    3. 'values' → logprob: -8.125808715820312
    4. '    
' → logprob: -9.375808715820312
    5. '
' → logprob: -10.500808715820312
    6. '(values' → logprob: -12.625808715820312
    7. 'n' → logprob: -12.750808715820312
    8. ' valeurs' → logprob: -13.000808715820312
    9. '	values' → logprob: -13.500808715820312
    10. '    ' → logprob: -13.500808715820312

Token 327: ' les' (ID: 1341)
  Prédit: ' les'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' les' → logprob: -0.5144895315170288
    2. '   ' → logprob: -1.1394895315170288
    3. '()' → logprob: -3.5144896507263184
    4. ' la' → logprob: -3.7644896507263184
    5. ' une' → logprob: -5.139489650726318
    6. ' ' → logprob: -5.264489650726318
    7. '(' → logprob: -5.514489650726318
    8. ' l' → logprob: -5.764489650726318
    9. ' des' → logprob: -6.139489650726318
    10. '  ' → logprob: -6.639489650726318

Token 328: ' entr' (ID: 7072)
  Prédit: 'val'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'val' → logprob: -0.33477896451950073
    2. 'values' → logprob: -1.5847790241241455
    3. ' valeurs' → logprob: -2.8347790241241455
    4. ' values' → logprob: -4.584778785705566
    5. 'n' → logprob: -4.959778785705566
    6. '   ' → logprob: -6.959778785705566
    7. ' val' → logprob: -7.334778785705566
    8. 'nombre' → logprob: -7.334778785705566
    9. ' nombres' → logprob: -7.959778785705566
    10. 'vals' → logprob: -7.959778785705566

Token 329: 'ées' (ID: 5161)
  Prédit: 'ées'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'ées' → logprob: -0.0002120038407156244
    2. 'ees' → logprob: -9.125211715698242
    3. 'ée' → logprob: -9.250211715698242
    4. 'é' → logprob: -13.250211715698242
    5. 'es' → logprob: -13.375211715698242
    6. '   ' → logprob: -13.625211715698242
    7. 'ies' → logprob: -14.125211715698242
    8. 'e' → logprob: -14.250211715698242
    9. 'nées' → logprob: -15.125211715698242
    10. 'er' → logprob: -15.375211715698242

Token 330: ' utilisateur' (ID: 115595)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.9040752053260803
    2. ',' → logprob: -1.0290751457214355
    3. '()' → logprob: -1.9040751457214355
    4. '(' → logprob: -3.7790751457214355
    5. ' et' → logprob: -3.9040751457214355
    6. ':' → logprob: -4.5290751457214355
    7. 'et' → logprob: -5.1540751457214355
    8. '.' → logprob: -5.1540751457214355
    9. '(
' → logprob: -5.5290751457214355
    10. 'values' → logprob: -5.9040751457214355

Token 331: ',' (ID: 11)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.08427991718053818
    2. ',' → logprob: -2.584280014038086
    3. ':' → logprob: -5.959280014038086
    4. '(' → logprob: -6.709280014038086
    5. '.' → logprob: -7.584280014038086
    6. '()' → logprob: -7.584280014038086
    7. ' et' → logprob: -8.584280014038086
    8. ' (' → logprob: -9.334280014038086
    9. ' :' → logprob: -10.084280014038086
    10. '    
' → logprob: -10.209280014038086

Token 332: ' calc' (ID: 25691)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.024137025699019432
    2. ' values' → logprob: -4.024137020111084
    3. 'values' → logprob: -5.149137020111084
    4. '	values' → logprob: -9.899137496948242
    5. '    
' → logprob: -10.149137496948242
    6. ' valeurs' → logprob: -10.274137496948242
    7. '  ' → logprob: -11.649137496948242
    8. '   ' → logprob: -11.649137496948242
    9. '    ' → logprob: -12.024137496948242
    10. ' valores' → logprob: -12.774137496948242

Token 333: 'ule' (ID: 1601)
  Prédit: 'ule'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'ule' → logprob: -0.000206401280593127
    2. 'cule' → logprob: -8.875205993652344
    3. '   ' → logprob: -10.250205993652344
    4. 'ul' → logprob: -11.750205993652344
    5. 'ure' → logprob: -12.500205993652344
    6. 'ulé' → logprob: -12.625205993652344
    7. '```' → logprob: -12.750205993652344
    8. '       ' → logprob: -12.875205993652344
    9. 'l' → logprob: -13.125205993652344
    10. '#' → logprob: -13.250205993652344

Token 334: ' et' (ID: 859)
  Prédit: ' le'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' le' → logprob: -0.784894585609436
    2. ' et' → logprob: -0.784894585609436
    3. '   ' → logprob: -3.9098944664001465
    4. '_' → logprob: -4.0348944664001465
    5. ' la' → logprob: -4.4098944664001465
    6. '(' → logprob: -4.6598944664001465
    7. 'le' → logprob: -5.1598944664001465
    8. '()' → logprob: -5.2848944664001465
    9. 'et' → logprob: -5.5348944664001465
    10. ',' → logprob: -5.6598944664001465

Token 335: ' affiche' (ID: 127479)
  Prédit: ' affiche'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' affiche' → logprob: -0.006584635470062494
    2. ' imprime' → logprob: -5.506584644317627
    3. '   ' → logprob: -6.881584644317627
    4. 'aff' → logprob: -7.256584644317627
    5. ' afficher' → logprob: -8.256584167480469
    6. ' print' → logprob: -8.256584167480469
    7. ' affich' → logprob: -8.881584167480469
    8. 'print' → logprob: -9.381584167480469
    9. ' display' → logprob: -12.256584167480469
    10. '_aff' → logprob: -12.381584167480469

Token 336: ' le' (ID: 505)
  Prédit: ' le'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' le' → logprob: -0.25711265206336975
    2. '(' → logprob: -2.257112741470337
    3. '()' → logprob: -3.007112741470337
    4. ' la' → logprob: -3.132112741470337
    5. '   ' → logprob: -4.132112503051758
    6. '("' → logprob: -4.882112503051758
    7. 'le' → logprob: -6.632112503051758
    8. ' the' → logprob: -6.757112503051758
    9. ')' → logprob: -7.132112503051758
    10. '(
' → logprob: -7.757112503051758

Token 337: ' profit' (ID: 15971)
  Prédit: ' profit'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' profit' → logprob: -0.007573738694190979
    2. 'profit' → logprob: -5.25757360458374
    3. ' résultat' → logprob: -6.88257360458374
    4. ' bénéf' → logprob: -7.25757360458374
    5. ' maximum' → logprob: -8.007574081420898
    6. ' meilleur' → logprob: -9.382574081420898
    7. '_profit' → logprob: -9.507574081420898
    8. ' maximal' → logprob: -10.132574081420898
    9. '_' → logprob: -10.757574081420898
    10. ' gain' → logprob: -10.882574081420898

Token 338: ' maximal' (ID: 65414)
  Prédit: ' maximal'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' maximal' → logprob: -0.000681457226164639
    2. ' maximum' → logprob: -7.500681400299072
    3. ' max' → logprob: -10.12568187713623
    4. ' maksimal' → logprob: -10.37568187713623
    5. '_max' → logprob: -10.62568187713623
    6. 'max' → logprob: -11.12568187713623
    7. ' maximale' → logprob: -11.25068187713623
    8. ' maxim' → logprob: -12.62568187713623
    9. ' максим' → logprob: -13.75068187713623
    10. ' optimal' → logprob: -15.12568187713623

Token 339: ' possible' (ID: 4149)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.3587151765823364
    2. '.' → logprob: -1.2337151765823364
    3. '()' → logprob: -5.358715057373047
    4. 'possible' → logprob: -6.358715057373047
    5. ' possible' → logprob: -6.608715057373047
    6. ' obtenu' → logprob: -6.858715057373047
    7. ')' → logprob: -8.358715057373047
    8. '    
' → logprob: -8.358715057373047
    9. ',' → logprob: -8.733715057373047
    10. '_possible' → logprob: -9.108715057373047

Token 340: '.
' (ID: 558)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.05642231926321983
    2. '.' → logprob: -2.931422233581543
    3. '    
' → logprob: -7.056422233581543
    4. ':' → logprob: -7.806422233581543
    5. '()' → logprob: -9.556422233581543
    6. ',' → logprob: -9.806422233581543
    7. '(' → logprob: -10.056422233581543
    8. '```' → logprob: -10.931422233581543
    9. 'def' → logprob: -11.306422233581543
    10. ')' → logprob: -11.306422233581543

Token 341: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.02087141014635563
    2. '    
' → logprob: -4.520871639251709
    3. '
' → logprob: -4.645871639251709
    4. '```' → logprob: -10.02087116241455
    5. ':' → logprob: -10.52087116241455
    6. '  
' → logprob: -10.77087116241455
    7. 'def' → logprob: -11.02087116241455
    8. '    
    
' → logprob: -11.39587116241455
    9. '()' → logprob: -11.64587116241455
    10. '   
' → logprob: -11.89587116241455

Token 342: ' """
' (ID: 7037)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.004331845324486494
    2. '    
' → logprob: -5.879332065582275
    3. '
' → logprob: -6.754332065582275
    4. 'values' → logprob: -8.004331588745117
    5. ' values' → logprob: -11.379331588745117
    6. '```' → logprob: -13.129331588745117
    7. '   
' → logprob: -13.254331588745117
    8. '  
' → logprob: -13.379331588745117
    9. '(values' → logprob: -13.504331588745117
    10. 'n' → logprob: -13.504331588745117

Token 343: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.14776019752025604
    2. 'values' → logprob: -2.1477601528167725
    3. ' values' → logprob: -3.8977601528167725
    4. 'n' → logprob: -9.272760391235352
    5. 'vals' → logprob: -9.522760391235352
    6. '	values' → logprob: -9.522760391235352
    7. 'val' → logprob: -10.397760391235352
    8. ' valeurs' → logprob: -11.147760391235352
    9. ' n' → logprob: -11.772760391235352
    10. '    
' → logprob: -11.897760391235352

Token 344: ' #' (ID: 1069)
  Prédit: 'values'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'values' → logprob: -0.0011858227662742138
    2. ' values' → logprob: -6.876185894012451
    3. '   ' → logprob: -9.001185417175293
    4. 'val' → logprob: -11.251185417175293
    5. 'print' → logprob: -12.126185417175293
    6. 'vals' → logprob: -12.626185417175293
    7. '#' (adapté à ' #') → logprob: -12.626185417175293
    8. 'value' → logprob: -13.376185417175293
    9. 'n' → logprob: -14.001185417175293
    10. '	values' → logprob: -14.126185417175293

Token 345: ' Lire' (ID: 57624)
  Prédit: 'values'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'values' → logprob: -0.006026676390320063
    2. ' values' → logprob: -5.131026744842529
    3. '   ' → logprob: -9.756026268005371
    4. 'val' → logprob: -11.131026268005371
    5. '#' → logprob: -11.506026268005371
    6. 'value' → logprob: -12.256026268005371
    7. ' valeurs' → logprob: -12.881026268005371
    8. 'vals' → logprob: -13.006026268005371
    9. '	values' → logprob: -13.006026268005371
    10. '.values' → logprob: -14.381026268005371

Token 346: ' le' (ID: 505)
  Prédit: ' values'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' values' → logprob: -0.026692116633057594
    2. 'values' → logprob: -3.6516921520233154
    3. ' les' → logprob: -8.651692390441895
    4. ' valeurs' → logprob: -8.651692390441895
    5. ' la' → logprob: -10.651692390441895
    6. '   ' → logprob: -12.026692390441895
    7. ' valores' → logprob: -12.526692390441895
    8. '	values' → logprob: -13.151692390441895
    9. 'val' → logprob: -13.276692390441895
    10. 'les' → logprob: -13.401692390441895

Token 347: ' nombre' (ID: 9733)
  Prédit: 'values'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'values' → logprob: -0.15048684179782867
    2. 'n' → logprob: -2.025486946105957
    3. 'nombre' → logprob: -5.525486946105957
    4. 'val' → logprob: -6.275486946105957
    5. ' values' → logprob: -7.150486946105957
    6. '   ' → logprob: -7.650486946105957
    7. 'nb' → logprob: -8.025486946105957
    8. ' n' → logprob: -8.900486946105957
    9. 'N' → logprob: -9.900486946105957
    10. 'names' → logprob: -10.650486946105957

Token 348: ' d' (ID: 272)
  Prédit: ' d'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' d' → logprob: -0.1434611976146698
    2. '   ' → logprob: -2.518461227416992
    3. ' des' → logprob: -4.143461227416992
    4. ' de' → logprob: -4.518461227416992
    5. 'd' → logprob: -4.893461227416992
    6. '_' → logprob: -5.518461227416992
    7. '_d' → logprob: -5.768461227416992
    8. ' n' → logprob: -6.143461227416992
    9. ' ' → logprob: -6.268461227416992
    10. '  ' → logprob: -6.393461227416992

Token 349: ''' (ID: 6)
  Prédit: '_'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '_' → logprob: -0.8635388016700745
    2. '_articles' → logprob: -1.2385387420654297
    3. ' articles' → logprob: -2.4885387420654297
    4. '_items' → logprob: -2.7385387420654297
    5. 'articles' → logprob: -2.8635387420654297
    6. 'élé' → logprob: -3.7385387420654297
    7. ' ' → logprob: -3.7385387420654297
    8. '_elements' → logprob: -4.11353874206543
    9. ' éléments' → logprob: -5.48853874206543
    10. ' _' → logprob: -5.48853874206543

Token 350: 'élé' (ID: 15228)
  Prédit: 'articles'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'articles' → logprob: -0.12603868544101715
    2. 'élé' → logprob: -2.2510387897491455
    3. 'elements' → logprob: -5.001038551330566
    4. 'items' → logprob: -5.626038551330566
    5. 'obj' → logprob: -6.501038551330566
    6. ' articles' → logprob: -7.251038551330566
    7. '_articles' → logprob: -9.001038551330566
    8. 'é' → logprob: -9.251038551330566
    9. ' éléments' → logprob: -9.501038551330566
    10. '```' → logprob: -10.126038551330566

Token 351: 'ments' (ID: 1626)
  Prédit: 'ments'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'ments' → logprob: -1.5928495486150496e-05
    2. 'ment' → logprob: -12.125016212463379
    3. 'phants' → logprob: -12.125016212463379
    4. 'ements' → logprob: -13.500016212463379
    5. '   ' → logprob: -14.125016212463379
    6. 'me' → logprob: -14.625016212463379
    7. '```' → logprob: -14.625016212463379
    8. 'éments' → logprob: -15.000016212463379
    9. 'MENTS' → logprob: -15.000016212463379
    10. 'm' → logprob: -15.250016212463379

Token 352: ' à' (ID: 1221)
  Prédit: 'n'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'n' → logprob: -0.6032899022102356
    2. ' n' → logprob: -1.2282898426055908
    3. '   ' → logprob: -1.8532898426055908
    4. 'num' → logprob: -6.10329008102417
    5. ' num' → logprob: -7.60329008102417
    6. '	n' → logprob: -8.103289604187012
    7. ' =' → logprob: -8.853289604187012
    8. '(n' → logprob: -9.478289604187012
    9. '    ' → logprob: -10.228289604187012
    10. '    
' → logprob: -10.353289604187012

Token 353: ' traiter' (ID: 105852)
  Prédit: ' traiter'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' traiter' → logprob: -0.36102136969566345
    2. 'trait' → logprob: -1.2360213994979858
    3. 'tr' → logprob: -4.861021518707275
    4. 'tra' → logprob: -5.861021518707275
    5. ' trait' → logprob: -7.736021518707275
    6. 'process' → logprob: -8.111021041870117
    7. 'invest' → logprob: -8.111021041870117
    8. '_trait' → logprob: -8.861021041870117
    9. 'prendre' → logprob: -8.986021041870117
    10. 'acheter' → logprob: -9.486021041870117

Token 354: '
' (ID: 198)
  Prédit: 'n'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'n' → logprob: -0.46520042419433594
    2. '   ' → logprob: -1.340200424194336
    3. ' n' → logprob: -2.215200424194336
    4. 'num' → logprob: -7.715200424194336
    5. '(n' → logprob: -8.590200424194336
    6. '
' → logprob: -8.715200424194336
    7. '    
' → logprob: -9.090200424194336
    8. '	n' → logprob: -9.465200424194336
    9. ' num' → logprob: -11.090200424194336
    10. '_n' → logprob: -11.590200424194336

Token 355: '   ' (ID: 271)
  Prédit: ' n'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' n' → logprob: -0.18910786509513855
    2. 'n' → logprob: -1.939107894897461
    3. '   ' → logprob: -3.564107894897461
    4. ' num' → logprob: -9.564107894897461
    5. 'num' → logprob: -10.064107894897461
    6. '	n' → logprob: -10.564107894897461
    7. ' N' → logprob: -13.064107894897461
    8. ' nb' → logprob: -13.314107894897461
    9. 'nb' → logprob: -13.814107894897461
    10. '    
' → logprob: -14.064107894897461

Token 356: ' N' (ID: 478)
  Prédit: 'n'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'n' → logprob: -0.39562636613845825
    2. ' n' → logprob: -1.1456263065338135
    3. 'num' → logprob: -5.270626544952393
    4. '   ' → logprob: -5.895626544952393
    5. ' num' → logprob: -7.145626544952393
    6. 'nb' → logprob: -11.520626068115234
    7. '	n' → logprob: -11.895626068115234
    8. ' number' → logprob: -12.145626068115234
    9. 'count' → logprob: -12.270626068115234
    10. ' count' → logprob: -12.520626068115234

Token 357: ' =' (ID: 314)
  Prédit: ' ='
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' =' → logprob: -0.007611243985593319
    2. '=' → logprob: -4.882611274719238
    3. '=int' → logprob: -12.382611274719238
    4. ',' → logprob: -14.632611274719238
    5. '=input' → logprob: -15.882611274719238
    6. ' ' → logprob: -16.132610321044922
    7. ')' → logprob: -16.257610321044922
    8. ' ' → logprob: -16.757610321044922
    9. '   ' → logprob: -17.007610321044922
    10. ' =
' → logprob: -17.257610321044922

Token 358: ' int' (ID: 677)
  Prédit: ' int'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' int' → logprob: -0.04878493398427963
    2. ' read' → logprob: -3.1737849712371826
    3. 'int' → logprob: -5.1737847328186035
    4. 'read' → logprob: -9.173785209655762
    5. ' ' → logprob: -13.298785209655762
    6. ' ' → logprob: -15.923785209655762
    7. ' input' → logprob: -15.923785209655762
    8. '=int' → logprob: -16.173784255981445
    9. '(int' → logprob: -17.548784255981445
    10. ' reads' → logprob: -17.673784255981445

Token 359: '(input' (ID: 10054)
  Prédit: '(input'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(input' → logprob: -0.0032187069300562143
    2. '(' → logprob: -5.753218650817871
    3. 'input' → logprob: -10.128218650817871
    4. ' (' → logprob: -14.253218650817871
    5. ' input' → logprob: -15.878218650817871
    6. '=input' → logprob: -16.253219604492188
    7. '()' → logprob: -17.253219604492188
    8. '(
' → logprob: -17.378219604492188
    9. '('' → logprob: -18.378219604492188
    10. ',input' → logprob: -18.503219604492188

Token 360: '())
' (ID: 4574)
  Prédit: '())'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '())' → logprob: -0.07536911964416504
    2. '("' → logprob: -3.200369119644165
    3. '()' → logprob: -3.700369119644165
    4. '(' → logprob: -5.575368881225586
    5. '("("' → logprob: -6.075368881225586
    6. '(">' → logprob: -7.700368881225586
    7. '("(' → logprob: -8.075368881225586
    8. '(""))' → logprob: -8.700368881225586
    9. '('' → logprob: -10.200368881225586
    10. '("")' → logprob: -10.825368881225586

Token 361: '    
' (ID: 1944)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.07371922582387924
    2. '    
' → logprob: -2.8237192630767822
    3. '
' → logprob: -4.698719024658203
    4. 'values' → logprob: -6.823719024658203
    5. ' values' → logprob: -8.198719024658203
    6. '  
' → logprob: -8.448719024658203
    7. '   
' → logprob: -8.448719024658203
    8. '\n' → logprob: -8.448719024658203
    9. ')' → logprob: -8.823719024658203
    10. ' 
' → logprob: -8.823719024658203

Token 362: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.012986564077436924
    2. 'values' → logprob: -4.887986660003662
    3. ' values' → logprob: -5.262986660003662
    4. '    
' → logprob: -9.762986183166504
    5. '	values' → logprob: -10.012986183166504
    6. '_values' → logprob: -10.512986183166504
    7. '   ' → logprob: -11.387986183166504
    8. '#' → logprob: -11.637986183166504
    9. ' valeurs' → logprob: -11.762986183166504
    10. '    ' → logprob: -11.887986183166504

Token 363: ' #' (ID: 1069)
  Prédit: 'values'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'values' → logprob: -0.02677777223289013
    2. ' values' → logprob: -3.651777744293213
    3. '#' (adapté à ' #') → logprob: -8.276778221130371
    4. '   ' → logprob: -8.776778221130371
    5. '	values' → logprob: -11.151778221130371
    6. 'val' → logprob: -11.276778221130371
    7. ' valeurs' → logprob: -11.401778221130371
    8. 'vals' → logprob: -11.901778221130371
    9. ' #' → logprob: -11.901778221130371
    10. '_values' → logprob: -12.276778221130371

Token 364: ' Lire' (ID: 57624)
  Prédit: 'values'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'values' → logprob: -0.01833406835794449
    2. ' values' → logprob: -4.018333911895752
    3. '#' → logprob: -9.26833438873291
    4. 'val' → logprob: -10.64333438873291
    5. '   ' → logprob: -10.64333438873291
    6. ' valeurs' → logprob: -11.51833438873291
    7. 'vals' → logprob: -11.89333438873291
    8. '	values' → logprob: -11.89333438873291
    9. '.values' → logprob: -12.51833438873291
    10. 'Values' → logprob: -12.89333438873291

Token 365: ' la' (ID: 557)
  Prédit: 'values'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'values' → logprob: -0.041446246206760406
    2. ' values' → logprob: -3.7914462089538574
    3. '(values' → logprob: -4.791446208953857
    4. '   ' → logprob: -5.041446208953857
    5. 'les' → logprob: -6.791446208953857
    6. ' les' → logprob: -7.291446208953857
    7. '	values' → logprob: -7.791446208953857
    8. '_values' → logprob: -8.291446685791016
    9. 'the' → logprob: -8.916446685791016
    10. '()' → logprob: -9.166446685791016

Token 366: ' liste' (ID: 31719)
  Prédit: 'values'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'values' → logprob: -0.011963368393480778
    2. 'val' → logprob: -4.761963367462158
    3. ' values' → logprob: -5.761963367462158
    4. ' valeurs' → logprob: -9.261963844299316
    5. '_values' → logprob: -10.136963844299316
    6. 'vals' → logprob: -10.386963844299316
    7. 'liste' → logprob: -11.011963844299316
    8. 'list' → logprob: -12.636963844299316
    9. ' val' → logprob: -12.636963844299316
    10. '.values' → logprob: -12.886963844299316

Token 367: ' des' (ID: 731)
  Prédit: ' des'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' des' → logprob: -0.4223780930042267
    2. 'des' → logprob: -1.1723780632019043
    3. ' of' → logprob: -4.297378063201904
    4. 'values' → logprob: -4.422378063201904
    5. '(values' → logprob: -5.547378063201904
    6. ' values' → logprob: -6.672378063201904
    7. 'of' → logprob: -7.047378063201904
    8. 'd' → logprob: -7.047378063201904
    9. 'de' → logprob: -7.172378063201904
    10. '   ' → logprob: -7.297378063201904

Token 368: ' valeurs' (ID: 73668)
  Prédit: 'values'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'values' → logprob: -0.4089412987232208
    2. 'val' → logprob: -1.1589412689208984
    3. ' values' → logprob: -4.033941268920898
    4. ' valeurs' → logprob: -5.533941268920898
    5. 'vals' → logprob: -9.158941268920898
    6. ' val' → logprob: -10.408941268920898
    7. 'valu' → logprob: -10.783941268920898
    8. '(values' → logprob: -12.283941268920898
    9. '_values' → logprob: -12.408941268920898
    10. 'value' → logprob: -12.658941268920898

Token 369: ' associ' (ID: 5516)
  Prédit: ' ='
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' =' → logprob: -0.19436843693256378
    2. '   ' → logprob: -1.8193684816360474
    3. '=' → logprob: -5.069368362426758
    4. 'values' → logprob: -5.194368362426758
    5. '(values' → logprob: -6.819368362426758
    6. ' values' → logprob: -6.944368362426758
    7. ',' → logprob: -8.069368362426758
    8. ':' → logprob: -8.944368362426758
    9. '_values' → logprob: -10.319368362426758
    10. '    
' → logprob: -10.444368362426758

Token 370: 'ées' (ID: 5161)
  Prédit: 'ées'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'ées' → logprob: -0.00011045700375689194
    2. 'ée' → logprob: -9.500110626220703
    3. 'é' → logprob: -10.375110626220703
    4. '   ' → logprob: -13.250110626220703
    5. 'és' → logprob: -13.500110626220703
    6. 'à' → logprob: -15.125110626220703
    7. 'ees' → logprob: -15.375110626220703
    8. '```' → logprob: -15.375110626220703
    9. 'es' → logprob: -15.500110626220703
    10. 'a' → logprob: -16.500110626220703

Token 371: ' aux' (ID: 5850)
  Prédit: '(values'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '(values' → logprob: -0.7969845533370972
    2. '(' → logprob: -1.0469845533370972
    3. '   ' → logprob: -1.9219845533370972
    4. '()' → logprob: -4.171984672546387
    5. ' (' → logprob: -4.421984672546387
    6. 'values' → logprob: -4.796984672546387
    7. ')' → logprob: -4.921984672546387
    8. ' =' → logprob: -6.421984672546387
    9. 'des' → logprob: -6.671984672546387
    10. ' des' → logprob: -6.671984672546387

Token 372: ' éléments' (ID: 57375)
  Prédit: 'items'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'items' → logprob: -0.7014625072479248
    2. 'articles' → logprob: -1.8264625072479248
    3. 'élé' → logprob: -2.576462507247925
    4. ' items' → logprob: -2.951462507247925
    5. ' N' → logprob: -3.076462507247925
    6. 'N' → logprob: -3.201462507247925
    7. 'elements' → logprob: -3.201462507247925
    8. ' articles' → logprob: -3.826462507247925
    9. ' elements' → logprob: -4.576462745666504
    10. '_' → logprob: -5.201462745666504

Token 373: '
' (ID: 198)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.006192561239004135
    2. 'values' → logprob: -5.506192684173584
    3. '(values' → logprob: -6.756192684173584
    4. ' values' → logprob: -7.506192684173584
    5. '    
' → logprob: -8.131192207336426
    6. '	values' → logprob: -10.756192207336426
    7. '  ' → logprob: -11.131192207336426
    8. ',' → logprob: -11.131192207336426
    9. ' (' → logprob: -11.756192207336426
    10. '.values' → logprob: -11.881192207336426

Token 374: '   ' (ID: 271)
  Prédit: 'values'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'values' → logprob: -0.770714521408081
    2. '   ' → logprob: -0.895714521408081
    3. ' values' → logprob: -2.520714521408081
    4. '(values' → logprob: -3.270714521408081
    5. '    
' → logprob: -5.39571475982666
    6. '_values' → logprob: -6.27071475982666
    7. '	values' → logprob: -6.64571475982666
    8. ' =' → logprob: -7.27071475982666
    9. '.values' → logprob: -7.77071475982666
    10. ',' → logprob: -7.89571475982666

Token 375: ' value' (ID: 1432)
  Prédit: ' values'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' values' → logprob: -0.34852948784828186
    2. 'values' → logprob: -1.2235294580459595
    3. ' valeurs' → logprob: -10.223529815673828
    4. '   ' → logprob: -10.973529815673828
    5. 'val' → logprob: -11.348529815673828
    6. '	values' → logprob: -12.598529815673828
    7. 'value' (adapté à ' value') → logprob: -12.848529815673828
    8. '(values' → logprob: -12.973529815673828
    9. ' valores' → logprob: -12.973529815673828
    10. ' val' → logprob: -13.098529815673828

Token 376: '_lst' (ID: 72474)
  Prédit: 's'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 's' → logprob: -0.00015288250870071352
    2. '_s' → logprob: -9.250152587890625
    3. '_list' → logprob: -10.625152587890625
    4. ' s' → logprob: -10.750152587890625
    5. ' =' → logprob: -11.750152587890625
    6. '_values' → logprob: -14.000152587890625
    7. '=' → logprob: -14.250152587890625
    8. '   ' → logprob: -15.000152587890625
    9. '_' → logprob: -15.125152587890625
    10. '=s' → logprob: -15.250152587890625

Token 377: ' =' (ID: 314)
  Prédit: ' ='
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' =' → logprob: -0.32594388723373413
    2. 's' → logprob: -1.575943946838379
    3. '=' → logprob: -2.700943946838379
    4. '   ' → logprob: -5.575943946838379
    5. 'es' → logprob: -8.450943946838379
    6. 'ues' → logprob: -9.075943946838379
    7. ' ' → logprob: -9.825943946838379
    8. '  ' → logprob: -12.325943946838379
    9. '()' → logprob: -12.325943946838379
    10. '(s' → logprob: -12.450943946838379

Token 378: ' read' (ID: 1729)
  Prédit: ' read'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' read' → logprob: -0.38687121868133545
    2. 'read' → logprob: -1.1368712186813354
    3. '	read' → logprob: -15.386871337890625
    4. ' reads' → logprob: -18.636871337890625
    5. '_read' → logprob: -18.761871337890625
    6. '(read' → logprob: -18.761871337890625
    7. '.read' → logprob: -19.136871337890625
    8. '   ' → logprob: -20.136871337890625
    9. ' reading' → logprob: -21.011871337890625
    10. '  ' → logprob: -21.386871337890625

Token 379: '_integer' (ID: 82911)
  Prédit: '_integer'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_integer' → logprob: -3.292907877039397e-06
    2. '_INTEGER' → logprob: -13.50000286102295
    3. '_' → logprob: -13.87500286102295
    4. 'Integer' → logprob: -15.37500286102295
    5. 'integer' → logprob: -15.75000286102295
    6. '_in' → logprob: -15.75000286102295
    7. '_int' → logprob: -16.125003814697266
    8. '_Integer' → logprob: -16.375003814697266
    9. '_integr' → logprob: -16.875003814697266
    10. '_string' → logprob: -18.000003814697266

Token 380: '_list' (ID: 4162)
  Prédit: '_list'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_list' → logprob: -9.13388703338569e-06
    2. 's' → logprob: -11.750009536743164
    3. 'list' → logprob: -14.375009536743164
    4. '_line' → logprob: -15.500009536743164
    5. '_lists' → logprob: -15.875009536743164
    6. 'List' → logprob: -16.125009536743164
    7. '_lst' → logprob: -16.375009536743164
    8. ' list' → logprob: -17.250009536743164
    9. '_' → logprob: -17.500009536743164
    10. '```' → logprob: -17.750009536743164

Token 381: '('')
' (ID: 74203)
  Prédit: '("'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '("' → logprob: -0.007283357437700033
    2. '("(' → logprob: -5.7572832107543945
    3. '("")' → logprob: -6.0072832107543945
    4. '(' → logprob: -7.5072832107543945
    5. '(">' → logprob: -7.5072832107543945
    6. '("("' → logprob: -8.257283210754395
    7. '(":' → logprob: -8.632283210754395
    8. '('' → logprob: -9.632283210754395
    9. '()' → logprob: -11.132283210754395
    10. '(",' → logprob: -12.132283210754395

Token 382: '    
' (ID: 1944)
  Prédit: '    
'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '    
' → logprob: -0.58549964427948
    2. '   ' → logprob: -0.83549964427948
    3. '
' → logprob: -4.7104997634887695
    4. 'cost' → logprob: -8.21049976348877
    5. '   
' → logprob: -9.21049976348877
    6. ' 
' → logprob: -10.08549976348877
    7. '  
' → logprob: -10.46049976348877
    8. '        
' → logprob: -10.58549976348877
    9. '    
' → logprob: -11.83549976348877
    10. '     
' → logprob: -12.08549976348877

Token 383: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.19810323417186737
    2. '#' → logprob: -2.823103189468384
    3. '
' → logprob: -2.948103189468384
    4. '    
' → logprob: -2.948103189468384
    5. 'cost' → logprob: -4.198103427886963
    6. ' cost' → logprob: -8.948102951049805
    7. ' #' → logprob: -9.448102951049805
    8. '   
' → logprob: -9.698102951049805
    9. '  
' → logprob: -10.323102951049805
    10. ' 
' → logprob: -10.698102951049805

Token 384: ' #' (ID: 1069)
  Prédit: 'cost'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'cost' → logprob: -0.096542589366436
    2. '#' (adapté à ' #') → logprob: -2.5965425968170166
    3. '   ' → logprob: -4.2215423583984375
    4. ' cost' → logprob: -6.4715423583984375
    5. '
' → logprob: -6.9715423583984375
    6. '    
' → logprob: -8.346542358398438
    7. ' #' → logprob: -9.596542358398438
    8. 'c' → logprob: -12.096542358398438
    9. '

' → logprob: -12.346542358398438
    10. '```' → logprob: -12.846542358398438

Token 385: ' Lire' (ID: 57624)
  Prédit: 'cost'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'cost' → logprob: -0.006824058946222067
    2. '#' → logprob: -5.381824016571045
    3. ' cost' → logprob: -6.131824016571045
    4. 'co' → logprob: -11.756824493408203
    5. ' #' → logprob: -11.881824493408203
    6. '   ' → logprob: -12.381824493408203
    7. 'c' → logprob: -13.256824493408203
    8. 'Cost' → logprob: -13.256824493408203
    9. 'Lire' → logprob: -13.631824493408203
    10. ' costs' → logprob: -14.256824493408203

Token 386: ' la' (ID: 557)
  Prédit: 'cost'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'cost' → logprob: -0.18196932971477509
    2. ' cost' → logprob: -2.306969404220581
    3. ' the' → logprob: -3.681969404220581
    4. 'the' → logprob: -3.806969404220581
    5. ' costs' → logprob: -5.056969165802002
    6. ' la' → logprob: -5.306969165802002
    7. '('' → logprob: -5.556969165802002
    8. '   ' → logprob: -6.931969165802002
    9. '(cost' → logprob: -7.556969165802002
    10. 'la' → logprob: -7.681969165802002

Token 387: ' liste' (ID: 31719)
  Prédit: 'cost'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'cost' → logprob: -0.011237505823373795
    2. ' cost' → logprob: -4.511237621307373
    3. '_cost' → logprob: -9.886237144470215
    4. 'code' → logprob: -10.511237144470215
    5. '(cost' → logprob: -11.261237144470215
    6. 'list' → logprob: -11.636237144470215
    7. 'co' → logprob: -11.761237144470215
    8. '_integer' → logprob: -11.761237144470215
    9. ' coût' → logprob: -11.761237144470215
    10. ' costs' → logprob: -11.761237144470215

Token 388: ' des' (ID: 731)
  Prédit: '(''
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '('' → logprob: -0.14997312426567078
    2. ' of' → logprob: -2.399973154067993
    3. 'of' → logprob: -3.774973154067993
    4. ' des' → logprob: -4.649972915649414
    5. 'des' → logprob: -4.774972915649414
    6. 'cost' → logprob: -5.274972915649414
    7. '('',' → logprob: -7.274972915649414
    8. '('_' → logprob: -7.399972915649414
    9. '('')
' → logprob: -8.149972915649414
    10. '_of' → logprob: -8.649972915649414

Token 389: ' coûts' (ID: 116912)
  Prédit: 'cost'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'cost' → logprob: -0.11648832261562347
    2. ' cost' → logprob: -2.241488218307495
    3. ' costs' → logprob: -5.741488456726074
    4. '_cost' → logprob: -7.991488456726074
    5. '_integer' → logprob: -10.491488456726074
    6. 'c' → logprob: -10.991488456726074
    7. ' coût' → logprob: -11.116488456726074
    8. 'integer' → logprob: -11.741488456726074
    9. ' coûts' → logprob: -11.741488456726074
    10. ' integer' → logprob: -11.866488456726074

Token 390: ' associés' (ID: 154470)
  Prédit: '(''
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '('' → logprob: -4.906711546937004e-05
    2. '('').' → logprob: -11.250048637390137
    3. '('',' → logprob: -11.500048637390137
    4. '(' → logprob: -11.875048637390137
    5. '''' → logprob: -12.375048637390137
    6. '("")' → logprob: -12.500048637390137
    7. '   ' → logprob: -12.750048637390137
    8. '('')
' → logprob: -12.875048637390137
    9. '=''' → logprob: -13.000048637390137
    10. ' ('' → logprob: -13.375048637390137

Token 391: ' aux' (ID: 5850)
  Prédit: '(''
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '('' → logprob: -0.00029959288076497614
    2. '''' → logprob: -9.125299453735352
    3. 'to' → logprob: -10.250299453735352
    4. '   ' → logprob: -10.375299453735352
    5. '=''' → logprob: -10.375299453735352
    6. ' ('' → logprob: -10.625299453735352
    7. '('').' → logprob: -11.250299453735352
    8. '('',' → logprob: -11.500299453735352
    9. '(' → logprob: -11.500299453735352
    10. '('')
' → logprob: -11.875299453735352

Token 392: ' éléments' (ID: 57375)
  Prédit: ''''
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '''' → logprob: -0.011730700731277466
    2. ' ''' → logprob: -4.761730670928955
    3. ''' → logprob: -6.636730670928955
    4. ' '')' → logprob: -7.386730670928955
    5. ' elements' → logprob: -8.011731147766113
    6. ''''' → logprob: -8.636731147766113
    7. 'elements' → logprob: -8.886731147766113
    8. '=''' → logprob: -8.886731147766113
    9. ''value' → logprob: -10.261731147766113
    10. 'inputs' → logprob: -10.636731147766113

Token 393: '
' (ID: 198)
  Prédit: '(''
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '('' → logprob: -0.00019746100588236004
    2. '''' → logprob: -9.500197410583496
    3. ' ('' → logprob: -10.375197410583496
    4. '('').' → logprob: -10.500197410583496
    5. '(' → logprob: -11.000197410583496
    6. '('')
' → logprob: -11.125197410583496
    7. '('',' → logprob: -11.625197410583496
    8. '=''' → logprob: -11.750197410583496
    9. '("")' → logprob: -12.000197410583496
    10. '   ' → logprob: -12.250197410583496

Token 394: '   ' (ID: 271)
  Prédit: 'cost'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'cost' → logprob: -0.2236698567867279
    2. ' costs' → logprob: -2.2236697673797607
    3. ' cost' → logprob: -2.8486697673797607
    4. '''' → logprob: -3.8486697673797607
    5. '   ' → logprob: -5.84867000579834
    6. '=''' → logprob: -5.97367000579834
    7. '(cost' → logprob: -6.09867000579834
    8. '('' → logprob: -6.97367000579834
    9. '('',' → logprob: -7.34867000579834
    10. ' =' → logprob: -7.47367000579834

Token 395: ' cost' (ID: 3097)
  Prédit: 'cost'
  Correct (stricte): False
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'cost' (adapté à ' cost') → logprob: -0.6134026646614075
    2. 'read' → logprob: -1.3634026050567627
    3. ' cost' → logprob: -1.8634026050567627
    4. ' read' → logprob: -3.2384026050567627
    5. ' costs' → logprob: -4.863402843475342
    6. '''' → logprob: -7.863402843475342
    7. '_cost' → logprob: -9.113402366638184
    8. '(cost' → logprob: -10.238402366638184
    9. 'Cost' → logprob: -11.488402366638184
    10. 'Costs' → logprob: -11.488402366638184

Token 396: '_lst' (ID: 72474)
  Prédit: '_lst'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_lst' → logprob: -0.0008180848672054708
    2. 's' → logprob: -7.125818252563477
    3. '_l' → logprob: -12.125818252563477
    4. '_list' → logprob: -12.625818252563477
    5. '_ls' → logprob: -12.750818252563477
    6. '_s' → logprob: -13.875818252563477
    7. 'lst' → logprob: -15.125818252563477
    8. 'e' → logprob: -15.625818252563477
    9. '_rst' → logprob: -15.875818252563477
    10. ''_' → logprob: -16.250818252563477

Token 397: ' =' (ID: 314)
  Prédit: ' ='
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' =' → logprob: -0.7115956544876099
    2. '('' → logprob: -0.9615956544876099
    3. '=' → logprob: -2.0865955352783203
    4. '('')
' → logprob: -6.71159553527832
    5. '('',' → logprob: -7.96159553527832
    6. '   ' → logprob: -8.21159553527832
    7. '(' → logprob: -8.33659553527832
    8. '('').' → logprob: -8.46159553527832
    9. 'read' → logprob: -8.83659553527832
    10. '=''' → logprob: -9.08659553527832

Token 398: ' read' (ID: 1729)
  Prédit: ' read'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' read' → logprob: -0.1602245420217514
    2. 'read' → logprob: -1.9102245569229126
    3. '(read' → logprob: -15.910224914550781
    4. '	read' → logprob: -16.28522491455078
    5. '.read' → logprob: -16.78522491455078
    6. '_read' → logprob: -17.41022491455078
    7. ' ' → logprob: -18.16022491455078
    8. ' list' → logprob: -19.03522491455078
    9. ' reads' → logprob: -19.03522491455078
    10. 'Read' → logprob: -19.66022491455078

Token 399: '_integer' (ID: 82911)
  Prédit: '_integer'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_integer' → logprob: -4.961759259458631e-06
    2. '_INTEGER' → logprob: -13.000004768371582
    3. 'Integer' → logprob: -13.625004768371582
    4. '_' → logprob: -14.500004768371582
    5. 'integer' → logprob: -14.625004768371582
    6. '('_' → logprob: -15.375004768371582
    7. '_Integer' → logprob: -16.3750057220459
    8. '_in' → logprob: -17.2500057220459
    9. '_int' → logprob: -18.0000057220459
    10. '('' → logprob: -18.2500057220459

Token 400: '_list' (ID: 4162)
  Prédit: '_list'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_list' → logprob: -2.618001053633634e-05
    2. 'list' → logprob: -11.000025749206543
    3. 'List' → logprob: -11.875025749206543
    4. '('_' → logprob: -13.375025749206543
    5. '('' → logprob: -14.500025749206543
    6. '_l' → logprob: -16.37502670288086
    7. '_line' → logprob: -17.25002670288086
    8. '_LIST' → logprob: -17.37502670288086
    9. 's' → logprob: -17.50002670288086
    10. '_' → logprob: -17.50002670288086

Token 401: '('')
' (ID: 74203)
  Prédit: '(''
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '('' → logprob: -6.754368223482743e-05
    2. '''' → logprob: -10.375067710876465
    3. '('',' → logprob: -10.750067710876465
    4. '('').' → logprob: -11.625067710876465
    5. '("")' → logprob: -13.250067710876465
    6. ' ('' → logprob: -13.375067710876465
    7. '('')
' → logprob: -13.625067710876465
    8. '(' → logprob: -13.750067710876465
    9. '=''' → logprob: -16.12506675720215
    10. '()' → logprob: -16.87506675720215

Token 402: '    
' (ID: 1944)
  Prédit: '
'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '
' → logprob: -0.3226935863494873
    2. '    
' → logprob: -1.3226935863494873
    3. '   ' → logprob: -4.697693824768066
    4. '

' → logprob: -9.197693824768066
    5. '    
    
' → logprob: -9.572693824768066
    6. '  
' → logprob: -10.697693824768066
    7. '
    
' → logprob: -10.822693824768066
    8. '   
' → logprob: -11.447693824768066
    9. 'profit' → logprob: -11.572693824768066
    10. '
' → logprob: -11.947693824768066

Token 403: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.16072681546211243
    2. 'result' → logprob: -2.16072678565979
    3. 'profit' → logprob: -4.035727024078369
    4. ' profit' → logprob: -4.535727024078369
    5. '
' → logprob: -6.410727024078369
    6. ' result' → logprob: -6.535727024078369
    7. '    
' → logprob: -6.785727024078369
    8. 'print' → logprob: -7.535727024078369
    9. '```' → logprob: -10.160726547241211
    10. 'max' → logprob: -10.660726547241211

Token 404: ' #' (ID: 1069)
  Prédit: 'result'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'result' → logprob: -0.7656676173210144
    2. 'max' → logprob: -1.0156676769256592
    3. 'profit' → logprob: -1.7656676769256592
    4. ' profit' → logprob: -7.51566743850708
    5. ' max' → logprob: -7.64066743850708
    6. '   ' → logprob: -8.015667915344238
    7. 'print' → logprob: -8.765667915344238
    8. ' result' → logprob: -8.890667915344238
    9. '
' → logprob: -10.265667915344238
    10. '#' (adapté à ' #') → logprob: -10.265667915344238

Token 405: ' Calcul' (ID: 57243)
  Prédit: 'max'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'max' → logprob: -0.15837354958057404
    2. 'profit' → logprob: -2.5333735942840576
    3. 'result' → logprob: -3.1583735942840576
    4. ' max' → logprob: -3.7833735942840576
    5. ' profit' → logprob: -6.7833733558654785
    6. ' result' → logprob: -7.6583733558654785
    7. 'print' → logprob: -8.783373832702637
    8. '   ' → logprob: -10.658373832702637
    9. 'best' → logprob: -11.283373832702637
    10. '#' → logprob: -11.533373832702637

Token 406: 'er' (ID: 259)
  Prédit: 'er'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'er' → logprob: -0.00258897733874619
    2. 'ate' → logprob: -6.002588748931885
    3. '   ' → logprob: -9.127589225769043
    4. '_max' → logprob: -12.877589225769043
    5. '#' → logprob: -14.502589225769043
    6. 'uler' → logprob: -14.877589225769043
    7. 'ateur' → logprob: -15.627589225769043
    8. '_' → logprob: -15.627589225769043
    9. 'ater' → logprob: -16.002588272094727
    10. '_er' → logprob: -16.127588272094727

Token 407: ' et' (ID: 859)
  Prédit: 'max'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'max' → logprob: -0.5801108479499817
    2. '_max' → logprob: -1.580110788345337
    3. '   ' → logprob: -2.455110788345337
    4. ' le' → logprob: -2.705110788345337
    5. ' max' → logprob: -2.830110788345337
    6. 'le' → logprob: -5.080111026763916
    7. '(max' → logprob: -5.455111026763916
    8. 'calculate' → logprob: -5.830111026763916
    9. ' et' → logprob: -6.830111026763916
    10. ' calculate' → logprob: -6.830111026763916

Token 408: ' afficher' (ID: 146524)
  Prédit: 'print'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'print' → logprob: -0.3869948983192444
    2. ' print' → logprob: -1.1369948387145996
    3. '   ' → logprob: -9.136995315551758
    4. ' afficher' → logprob: -11.261995315551758
    5. 'aff' → logprob: -14.011995315551758
    6. '_print' → logprob: -14.511995315551758
    7. '```' → logprob: -14.886995315551758
    8. '#print' → logprob: -15.136995315551758
    9. '#' → logprob: -15.261995315551758
    10. '	print' → logprob: -15.761995315551758

Token 409: ' le' (ID: 505)
  Prédit: '(c'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(c' → logprob: -0.0038099302910268307
    2. 'calculate' → logprob: -6.128809928894043
    3. '(' → logprob: -6.628809928894043
    4. 'le' → logprob: -9.128809928894043
    5. '(max' → logprob: -9.503809928894043
    6. ' calculate' → logprob: -9.628809928894043
    7. ' le' → logprob: -11.003809928894043
    8. 'c' → logprob: -11.253809928894043
    9. '(calc' → logprob: -11.753809928894043
    10. '   ' → logprob: -12.378809928894043

Token 410: ' profit' (ID: 15971)
  Prédit: 'max'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'max' → logprob: -0.008302146568894386
    2. ' max' → logprob: -5.008302211761475
    3. 'calculate' → logprob: -7.758302211761475
    4. '(max' → logprob: -8.008301734924316
    5. '_max' → logprob: -8.258301734924316
    6. 'result' → logprob: -9.008301734924316
    7. ' maximale' → logprob: -9.008301734924316
    8. ' maximal' → logprob: -9.258301734924316
    9. 'maximum' → logprob: -9.633301734924316
    10. 'maximize' → logprob: -9.883301734924316

Token 411: ' maximal' (ID: 65414)
  Prédit: ' maximal'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' maximal' → logprob: -0.7954128384590149
    2. 'max' → logprob: -1.2954127788543701
    3. '_max' → logprob: -1.2954127788543701
    4. ' maximale' → logprob: -7.670413017272949
    5. ' max' → logprob: -8.54541301727295
    6. ' maksimal' → logprob: -9.17041301727295
    7. '(max' → logprob: -9.54541301727295
    8. '   ' → logprob: -9.79541301727295
    9. ' maximum' → logprob: -10.17041301727295
    10. 'maximum' → logprob: -10.29541301727295

Token 412: ' possible' (ID: 4149)
  Prédit: '(max'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '(max' → logprob: -0.7246910333633423
    2. '(' → logprob: -0.9746910333633423
    3. '   ' → logprob: -2.5996909141540527
    4. 'max' → logprob: -2.8496909141540527
    5. '(
' → logprob: -6.224690914154053
    6. '_max' → logprob: -7.349690914154053
    7. 'print' → logprob: -7.349690914154053
    8. 'result' → logprob: -7.849690914154053
    9. '()' → logprob: -7.849690914154053
    10. '(print' → logprob: -8.099691390991211

Token 413: '
' (ID: 198)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.03173349052667618
    2. 'print' → logprob: -3.906733512878418
    3. 'result' → logprob: -5.031733512878418
    4. '
' → logprob: -6.031733512878418
    5. 'max' → logprob: -7.031733512878418
    6. 'profit' → logprob: -7.656733512878418
    7. '(max' → logprob: -8.406733512878418
    8. '    
' → logprob: -8.406733512878418
    9. ' print' → logprob: -8.781733512878418
    10. ' result' → logprob: -9.406733512878418

Token 414: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.0017137357499450445
    2. 'print' → logprob: -6.501713752746582
    3. 'result' → logprob: -8.876713752746582
    4. 'max' → logprob: -10.626713752746582
    5. ' print' → logprob: -10.876713752746582
    6. 'profit' → logprob: -11.126713752746582
    7. ' profit' → logprob: -12.001713752746582
    8. ' result' → logprob: -12.376713752746582
    9. '    
' → logprob: -13.626713752746582
    10. '
' → logprob: -14.251713752746582

Token 415: ' pl' (ID: 633)
  Prédit: 'print'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'print' → logprob: -0.0020271388348191977
    2. 'max' → logprob: -7.0020270347595215
    3. 'result' → logprob: -7.5020270347595215
    4. ' print' → logprob: -7.7520270347595215
    5. 'profit' → logprob: -9.00202751159668
    6. ' max' → logprob: -12.25202751159668
    7. ' result' → logprob: -12.75202751159668
    8. ' profit' → logprob: -13.12702751159668
    9. '   ' → logprob: -14.87702751159668
    10. '```' → logprob: -17.62702751159668

Token 416: 'of' (ID: 1440)
  Prédit: 'print'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'print' → logprob: -0.31427595019340515
    2. 'us' → logprob: -1.9392759799957275
    3. 'ay' → logprob: -2.8142759799957275
    4. '_print' → logprob: -3.3142759799957275
    5. 'int' → logprob: -4.439275741577148
    6. 'max' → logprob: -5.439275741577148
    7. ' =' → logprob: -5.814275741577148
    8. 'an' → logprob: -5.939275741577148
    9. '_max' → logprob: -6.564275741577148
    10. '_profit' → logprob: -6.564275741577148

Token 417: 'it' (ID: 278)
  Prédit: 'it'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'it' → logprob: -0.18853697180747986
    2. 't' → logprob: -1.9385370016098022
    3. 'fit' → logprob: -3.6885368824005127
    4. 'print' → logprob: -6.813537120819092
    5. 'f' → logprob: -7.813537120819092
    6. '_max' → logprob: -7.938537120819092
    7. '_' → logprob: -8.313536643981934
    8. '_profit' → logprob: -8.438536643981934
    9. 'max' → logprob: -8.563536643981934
    10. '_t' → logprob: -9.188536643981934

Token 418: '_max' (ID: 13731)
  Prédit: 't'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 't' → logprob: -0.01904543675482273
    2. '_profit' → logprob: -4.769045352935791
    3. '_' → logprob: -5.519045352935791
    4. '_max' → logprob: -5.644045352935791
    5. 'it' → logprob: -6.894045352935791
    6. '_t' → logprob: -7.019045352935791
    7. ' =' → logprob: -7.769045352935791
    8. 'max' → logprob: -8.89404582977295
    9. '=' → logprob: -9.01904582977295
    10. 'profit' → logprob: -9.89404582977295

Token 419: ' =' (ID: 314)
  Prédit: '_max'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_max' → logprob: -0.1684347540140152
    2. 't' → logprob: -2.1684348583221436
    3. '_profit' → logprob: -3.6684348583221436
    4. '_' → logprob: -4.2934346199035645
    5. '_t' → logprob: -7.6684346199035645
    6. ' =' → logprob: -7.6684346199035645
    7. 'max' → logprob: -8.918435096740723
    8. 'it' → logprob: -9.043435096740723
    9. '_prof' → logprob: -9.168435096740723
    10. '=' → logprob: -9.668435096740723

Token 420: ' calculate' (ID: 17950)
  Prédit: 'calculate'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'calculate' → logprob: -0.023245712742209435
    2. ' calculate' → logprob: -3.7732458114624023
    3. 'alculate' → logprob: -16.273244857788086
    4. '   ' → logprob: -16.773244857788086
    5. '.calculate' → logprob: -17.023244857788086
    6. 'compute' → logprob: -17.148244857788086
    7. ' ' → logprob: -18.398244857788086
    8. 'cal' → logprob: -18.773244857788086
    9. 'calcul' → logprob: -19.273244857788086
    10. ' compute' → logprob: -19.523244857788086

Token 421: '_max' (ID: 13731)
  Prédit: '_max'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_max' → logprob: -5.764977686339989e-05
    2. 'max' → logprob: -10.250057220458984
    3. '_profit' → logprob: -11.000057220458984
    4. '_' → logprob: -12.625057220458984
    5. '_MAX' → logprob: -14.250057220458984
    6. '(max' → logprob: -14.500057220458984
    7. '(_' → logprob: -15.250057220458984
    8. '_Max' → logprob: -15.500057220458984
    9. 'Max' → logprob: -15.750057220458984
    10. ')_' → logprob: -15.875057220458984

Token 422: '_profit' (ID: 186239)
  Prédit: '_profit'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_profit' → logprob: -6.76628842484206e-05
    2. '_' → logprob: -10.625067710876465
    3. '_pro' → logprob: -10.625067710876465
    4. '_prof' → logprob: -11.375067710876465
    5. '_max' → logprob: -12.250067710876465
    6. 'profit' → logprob: -13.500067710876465
    7. '_prob' → logprob: -14.625067710876465
    8. 'Profit' → logprob: -15.250067710876465
    9. '_p' → logprob: -15.625067710876465
    10. ' profit' → logprob: -16.62506675720215

Token 423: '(value' (ID: 6333)
  Prédit: '(value'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(value' → logprob: -0.2521783113479614
    2. '(values' → logprob: -1.5021783113479614
    3. '(' → logprob: -8.377178192138672
    4. ' (' → logprob: -11.002178192138672
    5. '(val' → logprob: -14.127178192138672
    6. 'values' → logprob: -14.627178192138672
    7. '(cost' → logprob: -14.752178192138672
    8. '(Value' → logprob: -15.502178192138672
    9. '(vals' → logprob: -16.127178192138672
    10. 'value' → logprob: -16.627178192138672

Token 424: '_lst' (ID: 72474)
  Prédit: 's'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 's' → logprob: -0.043886393308639526
    2. '_lst' → logprob: -3.168886423110962
    3. '(value' → logprob: -8.043886184692383
    4. 'values' → logprob: -8.668886184692383
    5. '_s' → logprob: -9.043886184692383
    6. 'value' → logprob: -9.543886184692383
    7. 'es' → logprob: -9.793886184692383
    8. ',' → logprob: -10.418886184692383
    9. 'S' → logprob: -10.668886184692383
    10. 'lst' → logprob: -10.918886184692383

Token 425: ',' (ID: 11)
  Prédit: ','
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ',' → logprob: -1.5928495486150496e-05
    2. ' ,' → logprob: -11.625016212463379
    3. ',c' → logprob: -12.250016212463379
    4. '(cost' → logprob: -13.875016212463379
    5. '   ' → logprob: -14.625016212463379
    6. 'cost' → logprob: -15.125016212463379
    7. ',value' → logprob: -15.875016212463379
    8. ' cost' → logprob: -16.250015258789062
    9. ',
' → logprob: -16.875015258789062
    10. ',n' → logprob: -17.125015258789062

Token 426: ' cost' (ID: 3097)
  Prédit: ' cost'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' cost' → logprob: -0.10020678490400314
    2. 'cost' → logprob: -2.3502068519592285
    3. '(cost' → logprob: -16.22520637512207
    4. '_cost' → logprob: -17.10020637512207
    5. 'Cost' → logprob: -18.35020637512207
    6. ')' → logprob: -19.10020637512207
    7. ' kost' → logprob: -19.10020637512207
    8. ' coste' → logprob: -19.35020637512207
    9. 'c' → logprob: -19.85020637512207
    10. '.cost' → logprob: -20.10020637512207

Token 427: '_lst' (ID: 72474)
  Prédit: '_lst'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_lst' → logprob: -0.002985309576615691
    2. 'cost' → logprob: -5.87798547744751
    3. 'lst' → logprob: -9.377985000610352
    4. ' cost' → logprob: -9.752985000610352
    5. 'st' → logprob: -11.377985000610352
    6. 'Lst' → logprob: -11.877985000610352
    7. 's' → logprob: -12.002985000610352
    8. '_l' → logprob: -12.002985000610352
    9. 'ist' → logprob: -13.252985000610352
    10. '_list' → logprob: -13.627985000610352

Token 428: ')
' (ID: 446)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')' → logprob: -0.018195131793618202
    2. ')
' → logprob: -4.018195152282715
    3. ')
' → logprob: -10.518195152282715
    4. '   ' → logprob: -11.018195152282715
    5. ')

' → logprob: -14.518195152282715
    6. '()' → logprob: -14.643195152282715
    7. ' )' → logprob: -14.768195152282715
    8. '())' → logprob: -16.1431941986084
    9. ')`
' → logprob: -16.1431941986084
    10. ')\' → logprob: -16.3931941986084

Token 429: '   ' (ID: 271)
  Prédit: '
'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '
' → logprob: -0.23963619768619537
    2. '   ' → logprob: -1.6146361827850342
    3. 'print' → logprob: -4.364636421203613
    4. '    
' → logprob: -7.114636421203613
    5. '  
' → logprob: -8.114636421203613
    6. ' print' → logprob: -9.364636421203613
    7. '\n' → logprob: -9.489636421203613
    8. '
' → logprob: -9.864636421203613
    9. ' 
' → logprob: -11.114636421203613
    10. '```' → logprob: -11.114636421203613

Token 430: ' print' (ID: 2123)
  Prédit: 'print'
  Correct (stricte): False
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'print' (adapté à ' print') → logprob: -0.06374203413724899
    2. '   ' → logprob: -3.31374192237854
    3. '
' → logprob: -4.063742160797119
    4. ' print' → logprob: -4.813742160797119
    5. '    
' → logprob: -9.938741683959961
    6. '  
' → logprob: -11.813741683959961
    7. ' 
' → logprob: -12.438741683959961
    8. 'p' → logprob: -13.063741683959961
    9. '	print' → logprob: -13.438741683959961
    10. ' ' → logprob: -13.563741683959961

Token 431: '(pl' (ID: 81738)
  Prédit: '(pl'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(pl' → logprob: -0.02456006035208702
    2. '(pro' → logprob: -3.77455997467041
    3. '(' → logprob: -6.64955997467041
    4. '(max' → logprob: -11.14955997467041
    5. '(p' → logprob: -13.39955997467041
    6. '(plot' → logprob: -14.14955997467041
    7. '(pr' → logprob: -14.77455997467041
    8. '()' → logprob: -14.89955997467041
    9. ' (' → logprob: -15.14955997467041
    10. '(prob' → logprob: -15.27455997467041

Token 432: 'of' (ID: 1440)
  Prédit: 'of'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'of' → logprob: -0.018783999606966972
    2. 'ax' → logprob: -4.518784046173096
    3. 'ro' → logprob: -6.268784046173096
    4. 'o' → logprob: -7.018784046173096
    5. '   ' → logprob: -7.018784046173096
    6. 'oit' → logprob: -7.268784046173096
    7. 'profit' → logprob: -7.518784046173096
    8. 'ox' → logprob: -7.643784046173096
    9. 'max' → logprob: -8.018783569335938
    10. '```' → logprob: -8.268783569335938

Token 433: 'it' (ID: 278)
  Prédit: 'it'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'it' → logprob: -2.2603901015827432e-05
    2. 't' → logprob: -10.750022888183594
    3. 'ot' → logprob: -14.875022888183594
    4. ' it' → logprob: -15.250022888183594
    5. '   ' → logprob: -15.750022888183594
    6. 'i' → logprob: -15.750022888183594
    7. '_profit' → logprob: -16.750022888183594
    8. 'fit' → logprob: -17.000022888183594
    9. '_it' → logprob: -17.250022888183594
    10. 'max' → logprob: -17.500022888183594

Token 434: '_max' (ID: 13731)
  Prédit: '_max'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_max' → logprob: -1.1160349458805285e-05
    2. 'max' → logprob: -11.500011444091797
    3. ')_' → logprob: -15.125011444091797
    4. '_' → logprob: -15.500011444091797
    5. ' _' → logprob: -16.125011444091797
    6. '__' → logprob: -16.375011444091797
    7. '_m' → logprob: -17.125011444091797
    8. '_MAX' → logprob: -17.250011444091797
    9. '_x' → logprob: -17.250011444091797
    10. 'ax' → logprob: -17.625011444091797

Token 435: ')

' (ID: 1029)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')' → logprob: -1.2352385965641588e-05
    2. ')
' → logprob: -11.375012397766113
    3. ' )' → logprob: -14.875012397766113
    4. '())' → logprob: -14.875012397766113
    5. '()' → logprob: -16.375011444091797
    6. ')`' → logprob: -17.125011444091797
    7. '))' → logprob: -18.000011444091797
    8. '   ' → logprob: -18.125011444091797
    9. '')' → logprob: -18.500011444091797
    10. ')

' → logprob: -19.250011444091797

Token 436: '#' (ID: 2)
  Prédit: 'r'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'r' → logprob: -0.34813550114631653
    2. 'p' → logprob: -1.3481354713439941
    3. 't' → logprob: -3.473135471343994
    4. ' ' → logprob: -6.223135471343994
    5. '  
' → logprob: -8.223135948181152
    6. '   ' → logprob: -8.348135948181152
    7. 'o' → logprob: -8.473135948181152
    8. 'i' → logprob: -8.973135948181152
    9. 'pr' → logprob: -9.348135948181152
    10. 'n' → logprob: -9.973135948181152

Token 437: ' Ex' (ID: 1771)
  Prédit: 'if'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'if' → logprob: -0.08110994100570679
    2. 'i' → logprob: -2.5811100006103516
    3. 'p' → logprob: -6.956110000610352
    4. '_' → logprob: -6.956110000610352
    5. 'profit' → logprob: -8.456110000610352
    6. ' if' → logprob: -10.206110000610352
    7. '#' → logprob: -10.956110000610352
    8. '__' → logprob: -11.206110000610352
    9. 'pro' → logprob: -11.581110000610352
    10. '_i' → logprob: -12.456110000610352

Token 438: 'éc' (ID: 5675)
  Prédit: 'e'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'e' → logprob: -0.34914758801460266
    2. 'ecute' → logprob: -1.9741475582122803
    3. 'if' → logprob: -2.2241475582122803
    4. 'ec' → logprob: -3.0991475582122803
    5. 'ecut' → logprob: -7.099147796630859
    6. 'ecution' → logprob: -7.349147796630859
    7. 'ecu' → logprob: -7.724147796630859
    8. 'éc' → logprob: -8.22414779663086
    9. 'é' → logprob: -8.72414779663086
    10. 'ecutable' → logprob: -9.84914779663086

Token 439: 'uter' (ID: 23469)
  Prédit: 'ecute'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'ecute' → logprob: -0.2434147745370865
    2. 'ec' → logprob: -2.243414878845215
    3. 'éc' → logprob: -2.743414878845215
    4. 'e' → logprob: -3.743414878845215
    5. 'if' → logprob: -4.868414878845215
    6. '#' → logprob: -5.618414878845215
    7. 'é' → logprob: -5.743414878845215
    8. 'écution' → logprob: -5.993414878845215
    9. 'ecution' → logprob: -5.993414878845215
    10. 'écut' → logprob: -7.118414878845215

Token 440: ' le' (ID: 505)
  Prédit: 'if'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'if' → logprob: -0.09089934080839157
    2. ' if' → logprob: -3.4658992290496826
    3. ' main' → logprob: -3.4658992290496826
    4. 'main' → logprob: -3.7158992290496826
    5. '_main' → logprob: -10.840899467468262
    6. '
' → logprob: -11.090899467468262
    7. 'def' → logprob: -11.215899467468262
    8. '(main' → logprob: -11.590899467468262
    9. '```' → logprob: -13.215899467468262
    10. '_' → logprob: -13.340899467468262

Token 441: ' script' (ID: 11713)
  Prédit: 'if'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'if' → logprob: -0.05465228110551834
    2. 'main' → logprob: -3.304652214050293
    3. ' main' → logprob: -4.679652214050293
    4. '__' → logprob: -5.304652214050293
    5. ' if' → logprob: -6.304652214050293
    6. '_main' → logprob: -8.429652214050293
    7. '_' → logprob: -8.804652214050293
    8. ' __' → logprob: -11.804652214050293
    9. 'def' → logprob: -11.929652214050293
    10. '_if' → logprob: -12.179652214050293

Token 442: ' principal' (ID: 10589)
  Prédit: 'if'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'if' → logprob: -0.3897046744823456
    2. '
' → logprob: -1.139704704284668
    3. '

' → logprob: -5.889704704284668
    4. ' if' → logprob: -9.889704704284668
    5. '
    
' → logprob: -12.889704704284668
    6. '
' → logprob: -13.014704704284668
    7. '  
' → logprob: -13.389704704284668
    8. '    
' → logprob: -13.764704704284668
    9. ' 
' → logprob: -13.764704704284668
    10. 'main' → logprob: -14.139704704284668

Token 443: ' si' (ID: 1784)
  Prédit: 'if'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'if' → logprob: -0.2520310878753662
    2. '
' → logprob: -1.5020310878753662
    3. '

' → logprob: -9.627031326293945
    4. ' if' → logprob: -11.627031326293945
    5. '  
' → logprob: -11.627031326293945
    6. 'main' → logprob: -12.002031326293945
    7. '    
' → logprob: -12.502031326293945
    8. '\n' → logprob: -13.002031326293945
    9. '\' → logprob: -13.502031326293945
    10. '
' → logprob: -13.627031326293945

Token 444: ' ce' (ID: 2357)
  Prédit: '__'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '__' → logprob: -0.03804149478673935
    2. ' __' → logprob: -3.288041591644287
    3. ' ' → logprob: -17.288042068481445
    4. '```' → logprob: -18.038042068481445
    5. 'name' → logprob: -18.163042068481445
    6. 'if' → logprob: -18.663042068481445
    7. '   ' → logprob: -18.788042068481445
    8. '/__' → logprob: -18.913042068481445
    9. '___' → logprob: -19.413042068481445
    10. '(__' → logprob: -20.163042068481445

Token 445: ' fichier' (ID: 69637)
  Prédit: '__'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '__' → logprob: -0.021734734997153282
    2. ' __' → logprob: -4.771734714508057
    3. 'if' → logprob: -5.271734714508057
    4. '_' → logprob: -5.521734714508057
    5. 'name' → logprob: -7.146734714508057
    6. ' ==' → logprob: -7.521734714508057
    7. '_name' → logprob: -7.771734714508057
    8. '```' → logprob: -7.771734714508057
    9. 'est' → logprob: -8.271735191345215
    10. ' script' → logprob: -8.646735191345215

Token 446: ' est' (ID: 893)
  Prédit: '__'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '__' → logprob: -0.0784166231751442
    2. ' ==' → logprob: -3.703416585922241
    3. ' __' → logprob: -3.953416585922241
    4. 'if' → logprob: -4.32841682434082
    5. 'est' → logprob: -5.45341682434082
    6. '==' → logprob: -5.57841682434082
    7. ' is' → logprob: -6.32841682434082
    8. ' est' → logprob: -6.57841682434082
    9. '_name' → logprob: -6.70341682434082
    10. 'name' → logprob: -6.82841682434082

Token 447: ' exécut' (ID: 165350)
  Prédit: '__'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '__' → logprob: -0.2520221173763275
    2. ' __' → logprob: -1.50202214717865
    3. ' run' → logprob: -10.127021789550781
    4. ' "__' → logprob: -11.127021789550781
    5. ' executed' → logprob: -11.752021789550781
    6. 'name' → logprob: -11.752021789550781
    7. '_name' → logprob: -12.002021789550781
    8. '___' → logprob: -12.752021789550781
    9. 'if' → logprob: -13.127021789550781
    10. '"' → logprob: -13.252021789550781

Token 448: 'é' (ID: 377)
  Prédit: '__'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '__' → logprob: -0.13721953332424164
    2. 'é' → logprob: -2.1372194290161133
    3. 'if' → logprob: -5.137219429016113
    4. ' __' → logprob: -5.887219429016113
    5. 'e' → logprob: -7.137219429016113
    6. '   ' → logprob: -8.637219429016113
    7. ' if' → logprob: -9.137219429016113
    8. 'er' → logprob: -9.387219429016113
    9. ' en' → logprob: -9.512219429016113
    10. 'u' → logprob: -9.887219429016113

Token 449: ' directement' (ID: 52317)
  Prédit: 'if'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'if' → logprob: -0.5417872071266174
    2. '__' → logprob: -1.1667871475219727
    3. '```' → logprob: -3.5417871475219727
    4. ' under' → logprob: -3.9167871475219727
    5. ' en' → logprob: -3.9167871475219727
    6. ' if' → logprob: -4.166787147521973
    7. ' as' → logprob: -4.791787147521973
    8. 'as' → logprob: -6.291787147521973
    9. ' __' → logprob: -6.291787147521973
    10. ' sous' → logprob: -6.416787147521973

Token 450: '
' (ID: 198)
  Prédit: '
'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '
' → logprob: -0.08688808232545853
    2. 'if' → logprob: -2.586888074874878
    3. '

' → logprob: -4.836888313293457
    4. ' if' → logprob: -11.586888313293457
    5. '\n' → logprob: -11.836888313293457
    6. '```' → logprob: -12.336888313293457
    7. '
' → logprob: -12.586888313293457
    8. '
    
' → logprob: -12.711888313293457
    9. '  
' → logprob: -12.961888313293457
    10. ' 
' → logprob: -13.336888313293457

Token 451: 'if' (ID: 366)
  Prédit: 'if'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'if' → logprob: -4.0722858102526516e-05
    2. '
' → logprob: -10.250041007995605
    3. '```' → logprob: -12.625041007995605
    4. ' if' → logprob: -13.250041007995605
    5. '    
' → logprob: -17.25004005432129
    6. '``' → logprob: -17.37504005432129
    7. '\
' → logprob: -17.62504005432129
    8. '\n' → logprob: -17.75004005432129
    9. '  
' → logprob: -18.00004005432129
    10. '

' → logprob: -18.12504005432129

Token 452: ' __' (ID: 2516)
  Prédit: ' __'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' __' → logprob: -0.005234121344983578
    2. '__' → logprob: -5.255234241485596
    3. ' ' → logprob: -15.005233764648438
    4. ' "__' → logprob: -18.630233764648438
    5. ' ' → logprob: -19.130233764648438
    6. ' ' → logprob: -19.380233764648438
    7. ' name' → logprob: -19.505233764648438
    8. ' (__' → logprob: -19.505233764648438
    9. '```' → logprob: -20.005233764648438
    10. '/__' → logprob: -20.130233764648438

Token 453: 'name' (ID: 897)
  Prédit: ' =='
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' ==' → logprob: -0.9035173654556274
    2. '__' → logprob: -1.1535173654556274
    3. '==' → logprob: -1.2785173654556274
    4. 'name' → logprob: -7.903517246246338
    5. ' __' → logprob: -8.278517723083496
    6. '=="' → logprob: -8.903517723083496
    7. '=' → logprob: -10.153517723083496
    8. '=='' → logprob: -10.278517723083496
    9. '_' → logprob: -10.903517723083496
    10. '[' → logprob: -11.528517723083496

Token 454: '__' (ID: 771)
  Prédit: '__'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '__' → logprob: -8.2994620242971e-06
    2. '==' → logprob: -11.750008583068848
    3. '__.__' → logprob: -15.250008583068848
    4. '____' → logprob: -16.62500762939453
    5. '___' → logprob: -17.00000762939453
    6. ' ==' → logprob: -17.25000762939453
    7. 'name' → logprob: -17.25000762939453
    8. '__,' → logprob: -18.50000762939453
    9. '__('' → logprob: -18.87500762939453
    10. ' __' → logprob: -18.87500762939453

Token 455: ' ==' (ID: 951)
  Prédit: '__'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '__' → logprob: -0.12912121415138245
    2. '==' → logprob: -2.1291213035583496
    3. ' ==' → logprob: -6.25412130355835
    4. '=="' → logprob: -8.379120826721191
    5. '=='' → logprob: -10.379120826721191
    6. '=' → logprob: -12.504120826721191
    7. '===' → logprob: -13.754120826721191
    8. '"' → logprob: -14.004120826721191
    9. '___' → logprob: -14.629120826721191
    10. '_' → logprob: -15.129120826721191

Token 456: ' "__' (ID: 27367)
  Prédit: '"'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '"' → logprob: -0.693373441696167
    2. ''' → logprob: -0.693373441696167
    3. ' "__' → logprob: -8.568373680114746
    4. ' '__' → logprob: -10.318373680114746
    5. '__' → logprob: -12.818373680114746
    6. '"name' → logprob: -16.69337272644043
    7. ''_' → logprob: -16.69337272644043
    8. '('__' → logprob: -16.69337272644043
    9. ''"' → logprob: -16.81837272644043
    10. '"user' → logprob: -16.81837272644043

Token 457: 'main' (ID: 7731)
  Prédit: 'main'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'main' → logprob: -1.9361264946837764e-07
    2. 'name' → logprob: -16.375
    3. ' main' → logprob: -18.625
    4. '_main' → logprob: -18.875
    5. 'ma' → logprob: -20.875
    6. 'm' → logprob: -21.25
    7. '__' → logprob: -21.375
    8. '	main' → logprob: -22.125
    9. 'maine' → logprob: -23.25
    10. '"' → logprob: -23.375

Token 458: '__":
' (ID: 49892)
  Prédit: '__":
'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '__":
' → logprob: -0.3868824541568756
    2. '__' → logprob: -1.1368824243545532
    3. '__':
' → logprob: -11.636882781982422
    4. '__("' → logprob: -13.386882781982422
    5. '__["' → logprob: -14.136882781982422
    6. '__",' → logprob: -15.886882781982422
    7. '__.__' → logprob: -17.136882781982422
    8. '```' → logprob: -17.136882781982422
    9. '"' → logprob: -17.261882781982422
    10. '_"' → logprob: -18.386882781982422

Token 459: '   ' (ID: 271)
  Prédit: ' main'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' main' → logprob: -0.6385505199432373
    2. '__' → logprob: -1.2635505199432373
    3. 'main' → logprob: -2.3885505199432373
    4. '   ' → logprob: -3.0135505199432373
    5. ' __' → logprob: -3.3885505199432373
    6. '"' → logprob: -4.513550758361816
    7. ' "__' → logprob: -5.888550758361816
    8. ' '__' → logprob: -8.263550758361816
    9. '_main' → logprob: -8.513550758361816
    10. '	main' → logprob: -8.763550758361816

Token 460: ' main' (ID: 2758)
  Prédit: 'main'
  Correct (stricte): False
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'main' (adapté à ' main') → logprob: -0.00037251986213959754
    2. ' main' → logprob: -8.000372886657715
    3. '   ' → logprob: -10.250372886657715
    4. '	main' → logprob: -13.250372886657715
    5. '_main' → logprob: -18.3753719329834
    6. '(main' → logprob: -19.7503719329834
    7. '.main' → logprob: -21.0003719329834
    8. 'Main' → logprob: -21.2503719329834
    9. ' ' → logprob: -21.2503719329834
    10. '  ' → logprob: -21.3753719329834

Token 461: '()' (ID: 416)
  Prédit: '_'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_' → logprob: -0.6047419905662537
    2. ')' → logprob: -1.3547420501708984
    3. '<|end|>' → logprob: -2.1047420501708984
    4. '()' → logprob: -3.3547420501708984
    5. '(' → logprob: -4.229742050170898
    6. '
' → logprob: -4.979742050170898
    7. '```' → logprob: -5.479742050170898
    8. ' ' → logprob: -5.854742050170898
    9. 'P' → logprob: -6.479742050170898
    10. '#' → logprob: -7.229742050170898


RÉSUMÉ:
--------------------------------------------------------------------------------
Total des tokens analysés: 459
Tokens correctement prédits (1ère position, stricte): 172
Tokens correctement prédits (1ère position, avec adaptation): 183
Tokens correctement prédits (top 10): 343
Précision stricte (1ère position): 37.47%
Précision adaptée (1ère position): 39.87%
Précision (top 10): 74.73%
================================================================================
