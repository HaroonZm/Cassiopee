================================================================================
ANALYSE DE PRÉDICTION TOKEN PAR TOKEN (BATCH API)
Date: 2025-06-04 20:01:51
Modèle de tokenisation: gpt-4o-mini
================================================================================

SCRIPT ANALYSÉ:
--------------------------------------------------------------------------------
A, B, T = map(int, input().split())
print(T // A * B)
--------------------------------------------------------------------------------

RÉSULTATS D'ANALYSE TOKEN PAR TOKEN:
--------------------------------------------------------------------------------
Token 0: 'A' (ID: 32)
  → Token d'amorce (pas de prédiction)

Token 1: ',' (ID: 11)
  → Token d'amorce (pas de prédiction)

Token 2: ' B' (ID: 418)
  → Token d'amorce (pas de prédiction)

Token 3: ',' (ID: 11)
  Prédit: '='
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '=' → logprob: -0.1461086869239807
    2. '+' → logprob: -2.771108627319336
    3. ')' → logprob: -4.146108627319336
    4. '.' → logprob: -4.396108627319336
    5. '[' → logprob: -4.521108627319336
    6. ',' → logprob: -4.771108627319336
    7. '(' → logprob: -4.896108627319336
    8. ' =' → logprob: -4.896108627319336
    9. ';' → logprob: -5.021108627319336
    10. ':' → logprob: -7.396108627319336

Token 4: ' T' (ID: 353)
  Prédit: '='
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '=' → logprob: -0.5948389172554016
    2. ',' → logprob: -1.3448388576507568
    3. ' =' → logprob: -2.094838857650757
    4. 'C' → logprob: -2.844838857650757
    5. ',C' → logprob: -6.094839096069336
    6. ')' → logprob: -6.469839096069336
    7. '.' → logprob: -7.344839096069336
    8. ' ' → logprob: -7.594839096069336
    9. ' C' → logprob: -7.594839096069336
    10. '=C' → logprob: -7.844839096069336

Token 5: ' =' (ID: 314)
  Prédit: '='
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '=' → logprob: -0.08288098871707916
    2. '+' → logprob: -3.832880973815918
    3. ' =' → logprob: -4.207880973815918
    4. '(' → logprob: -4.332880973815918
    5. '[' → logprob: -4.707880973815918
    6. ')' → logprob: -4.832880973815918
    7. ',' → logprob: -5.457880973815918
    8. '.' → logprob: -5.957880973815918
    9. ';' → logprob: -6.332880973815918
    10. '*' → logprob: -6.707880973815918

Token 6: ' map' (ID: 4014)
  Prédit: ' map'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' map' → logprob: -1.102125644683838
    2. '0' → logprob: -1.727125644683838
    3. ' ' → logprob: -1.727125644683838
    4. 'map' → logprob: -2.352125644683838
    5. ' input' → logprob: -2.852125644683838
    6. 'input' → logprob: -2.977125644683838
    7. ' [],' → logprob: -3.602125644683838
    8. ' [' → logprob: -3.977125644683838
    9. '[]' → logprob: -4.102125644683838
    10. '1' → logprob: -4.602125644683838

Token 7: '(int' (ID: 2742)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(' → logprob: -0.07103139907121658
    2. '(lambda' → logprob: -2.821031332015991
    3. '(int' → logprob: -5.19603157043457
    4. '<|end|>' → logprob: -6.32103157043457
    5. '```' → logprob: -7.69603157043457
    6. ')' → logprob: -8.07103157043457
    7. '(str' → logprob: -8.69603157043457
    8. '(user' → logprob: -9.57103157043457
    9. '(input' → logprob: -9.69603157043457
    10. '(open' → logprob: -10.07103157043457

Token 8: ',' (ID: 11)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ')' → logprob: -0.26371315121650696
    2. '(' → logprob: -2.0137131214141846
    3. '(input' → logprob: -2.6387131214141846
    4. '```' → logprob: -5.263713359832764
    5. '<|end|>' → logprob: -5.388713359832764
    6. '(user' → logprob: -5.513713359832764
    7. '`)' → logprob: -6.263713359832764
    8. ')(' → logprob: -6.513713359832764
    9. '(token' → logprob: -6.513713359832764
    10. '`' → logprob: -7.138713359832764

Token 9: ' input' (ID: 3422)
  Prédit: 'input'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'input' → logprob: -0.03808888420462608
    2. ' input' → logprob: -3.288088798522949
    3. ')' → logprob: -10.03808879852295
    4. '(input' → logprob: -12.66308879852295
    5. ',input' → logprob: -15.28808879852295
    6. ' )' → logprob: -15.78808879852295
    7. ' ' → logprob: -16.663089752197266
    8. '=input' → logprob: -17.413089752197266
    9. '	input' → logprob: -17.663089752197266
    10. '<input' → logprob: -17.788089752197266

Token 10: '().' (ID: 1454)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ')' → logprob: -1.1255899667739868
    2. '(' → logprob: -1.5005899667739868
    3. '()' → logprob: -1.5005899667739868
    4. '())' → logprob: -1.8755899667739868
    5. '(()' → logprob: -3.3755898475646973
    6. '<|end|>' → logprob: -5.500589847564697
    7. '```' → logprob: -5.625589847564697
    8. '(""))' → logprob: -5.750589847564697
    9. '('' → logprob: -5.750589847564697
    10. '()>' → logprob: -6.000589847564697

Token 11: 'split' (ID: 13627)
  Prédit: 'split'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'split' → logprob: -0.0009468303760513663
    2. 'strip' → logprob: -7.000946998596191
    3. ')' → logprob: -11.250946998596191
    4. 'rstrip' → logprob: -11.375946998596191
    5. ' split' → logprob: -11.875946998596191
    6. 'read' → logprob: -13.000946998596191
    7. '```' → logprob: -14.500946998596191
    8. '(split' → logprob: -14.625946998596191
    9. 'spl' → logprob: -15.625946998596191
    10. 's' → logprob: -16.000946044921875

Token 12: '())
' (ID: 4574)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ')' → logprob: -0.008850920014083385
    2. '())' → logprob: -4.883851051330566
    3. '))' → logprob: -7.258851051330566
    4. '`)' → logprob: -8.133851051330566
    5. '()' → logprob: -9.008851051330566
    6. ')`' → logprob: -10.258851051330566
    7. '(' → logprob: -10.258851051330566
    8. '```' → logprob: -10.883851051330566
    9. '`' → logprob: -12.383851051330566
    10. '<|end|>' → logprob: -12.633851051330566

Token 13: 'print' (ID: 1598)
  Prédit: 'if'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'if' → logprob: -0.904734194278717
    2. 'x' → logprob: -1.6547341346740723
    3. 'a' → logprob: -2.6547341346740723
    4. '`' → logprob: -3.0297341346740723
    5. '#' → logprob: -3.1547341346740723
    6. 'i' → logprob: -3.1547341346740723
    7. 'for' → logprob: -3.2797341346740723
    8. 's' → logprob: -3.4047341346740723
    9. 'n' → logprob: -4.154734134674072
    10. 'c' → logprob: -4.279734134674072

Token 14: '(T' (ID: 7014)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '(' → logprob: -0.0006840797723270953
    2. '('' → logprob: -7.7506842613220215
    3. '("("' → logprob: -8.375683784484863
    4. '("""' → logprob: -11.875683784484863
    5. '()' → logprob: -12.500683784484863
    6. '((' → logprob: -13.000683784484863
    7. '(
' → logprob: -13.500683784484863
    8. '(`' → logprob: -13.625683784484863
    9. '(f' → logprob: -13.750683784484863
    10. '("")' → logprob: -14.375683784484863

Token 15: ' //' (ID: 602)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ')' → logprob: -0.00020866614067927003
    2. '+' → logprob: -9.500208854675293
    3. '*' → logprob: -9.750208854675293
    4. ' )' → logprob: -10.500208854675293
    5. '))' → logprob: -11.250208854675293
    6. ',' → logprob: -11.250208854675293
    7. '-' → logprob: -12.250208854675293
    8. '**' → logprob: -12.625208854675293
    9. '```' → logprob: -13.250208854675293
    10. '`)' → logprob: -13.375208854675293

Token 16: ' A' (ID: 355)
  Prédit: 'A'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'A' → logprob: -0.027246657758951187
    2. 'B' → logprob: -3.6522467136383057
    3. '60' → logprob: -7.277246475219727
    4. '2' → logprob: -9.027246475219727
    5. '(A' → logprob: -10.152246475219727
    6. ' A' → logprob: -10.527246475219727
    7. '(' → logprob: -10.902246475219727
    8. '6' → logprob: -11.652246475219727
    9. '100' → logprob: -11.777246475219727
    10. '3' → logprob: -12.152246475219727

Token 17: ' *' (ID: 425)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ')' → logprob: -0.0006095095886848867
    2. '*' → logprob: -7.750609397888184
    3. '//' → logprob: -9.500609397888184
    4. '`)' → logprob: -10.000609397888184
    5. ')`' → logprob: -11.125609397888184
    6. '*)' → logprob: -11.500609397888184
    7. '))' → logprob: -11.625609397888184
    8. ' )' → logprob: -12.250609397888184
    9. '*A' → logprob: -12.250609397888184
    10. '`' → logprob: -13.125609397888184

Token 18: ' B' (ID: 418)
  Prédit: 'B'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'B' → logprob: -0.054906439036130905
    2. ' B' → logprob: -2.9299063682556152
    3. ''' → logprob: -12.304906845092773
    4. ' ' → logprob: -12.429906845092773
    5. 'A' → logprob: -12.554906845092773
    6. '(B' → logprob: -12.679906845092773
    7. ' (' → logprob: -13.054906845092773
    8. '(' → logprob: -13.429906845092773
    9. ')' → logprob: -13.554906845092773
    10. '"' → logprob: -13.929906845092773

Token 19: ')' (ID: 8)
  Prédit: ')'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')' → logprob: -1.676292231422849e-05
    2. '`)' → logprob: -12.250017166137695
    3. '*' → logprob: -12.750017166137695
    4. '```' → logprob: -13.000017166137695
    5. '//' → logprob: -13.375017166137695
    6. ' )' → logprob: -13.375017166137695
    7. ')
' → logprob: -14.125017166137695
    8. '))' → logprob: -14.250017166137695
    9. ')`' → logprob: -14.625017166137695
    10. '#' → logprob: -14.750017166137695


RÉSUMÉ:
--------------------------------------------------------------------------------
Total des tokens analysés: 17
Tokens correctement prédits (1ère position, stricte): 3
Tokens correctement prédits (1ère position, avec adaptation): 3
Tokens correctement prédits (top 10): 9
Précision stricte (1ère position): 17.65%
Précision adaptée (1ère position): 17.65%
Précision (top 10): 52.94%
================================================================================
