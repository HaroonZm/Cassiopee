================================================================================
ANALYSE DE PRÉDICTION TOKEN PAR TOKEN (BATCH API)
Date: 2025-06-04 20:18:18
Modèle de tokenisation: gpt-4o-mini
================================================================================

SCRIPT ANALYSÉ:
--------------------------------------------------------------------------------
import sys
import queue
import math
import copy
import itertools
from fractions import gcd

def set_recursion_limit():
    sys.setrecursionlimit(10 ** 7)

def get_inf():
    return 10 ** 18

def get_mod():
    return 10 ** 9 + 7

def li_input():
    return [int(x) for x in sys.stdin.readline().split()]

def get_input_reduced():
    return [int(x) - 1 for x in sys.stdin.readline().split()]

def read_int():
    return int(input())

def append_to_list_end(lst, elem):
    lst.append(elem)
    return lst

def init_vars():
    return 0, 0, 0, 0

def can_extend(xor_val, a_elem):
    return (xor_val & a_elem) == 0

def update_xor(xor_val, a_elem):
    return xor_val ^ a_elem

def update_ans(ans, l, r):
    return ans + (r - l)

def get_intersection(xor_val, a_elem):
    return xor_val & a_elem

def decrease_s(s, a_l):
    return s - (s & a_l)

def xor_remove(xor_val, a_l):
    return xor_val ^ a_l

def increase_idx(idx):
    return idx + 1

def process_inner_while(s, l, xor_val, A):
    while s:
        s = decrease_s(s, A[l])
        xor_val = xor_remove(xor_val, A[l])
        l = increase_idx(l)
    return l, xor_val

def solve():
    set_recursion_limit()
    INF = get_inf()
    MOD = get_mod()
    N = read_int()
    A = li_input()
    A = append_to_list_end(A, -1)
    ans, l, r, xor = init_vars()
    while r < N:
        if can_extend(xor, A[r]):
            xor = update_xor(xor, A[r])
            r = increase_idx(r)
            ans = update_ans(ans, l, r)
        else:
            s = get_intersection(xor, A[r])
            l, xor = process_inner_while(s, l, xor, A)
    print(ans)

solve()
--------------------------------------------------------------------------------

RÉSULTATS D'ANALYSE TOKEN PAR TOKEN:
--------------------------------------------------------------------------------
Token 0: 'import' (ID: 561)
  → Token d'amorce (pas de prédiction)

Token 1: ' sys' (ID: 12228)
  → Token d'amorce (pas de prédiction)

Token 2: '
' (ID: 198)
  → Token d'amorce (pas de prédiction)

Token 3: 'import' (ID: 561)
  Prédit: '.'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '.' → logprob: -0.29731935262680054
    2. '\n' → logprob: -1.5473194122314453
    3. '<|end|>' → logprob: -3.7973194122314453
    4. '\' → logprob: -4.922319412231445
    5. 'newline' → logprob: -5.672319412231445
    6. 'import' → logprob: -5.672319412231445
    7. '<|end|>' → logprob: -6.047319412231445
    8. '
' → logprob: -6.922319412231445
    9. '```' → logprob: -6.922319412231445
    10. '' → logprob: -7.672319412231445

Token 4: ' queue' (ID: 13661)
  Prédit: ' os'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' os' → logprob: -1.259079363080673e-05
    2. 'os' → logprob: -11.375012397766113
    3. ' math' → logprob: -15.000012397766113
    4. '"os' → logprob: -15.250012397766113
    5. ' re' → logprob: -15.875012397766113
    6. ' json' → logprob: -16.00001335144043
    7. '_os' → logprob: -17.00001335144043
    8. '	os' → logprob: -17.00001335144043
    9. ' ' → logprob: -17.25001335144043
    10. ' argparse' → logprob: -17.25001335144043

Token 5: '
' (ID: 198)
  Prédit: '.'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '.' → logprob: -0.32937508821487427
    2. '
' → logprob: -1.9543750286102295
    3. '<|end|>' → logprob: -3.3293750286102295
    4. '

' → logprob: -3.5793750286102295
    5. '\n' → logprob: -3.7043750286102295
    6. '<|end|>' → logprob: -3.9543750286102295
    7. '.Queue' → logprob: -4.079375267028809
    8. 'import' → logprob: -5.454375267028809
    9. '\' → logprob: -6.204375267028809
    10. 'newline' → logprob: -6.829375267028809

Token 6: 'import' (ID: 561)
  Prédit: '.'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '.' → logprob: -0.1720702350139618
    2. '
' → logprob: -3.047070264816284
    3. 'import' → logprob: -3.422070264816284
    4. '\n' → logprob: -3.547070264816284
    5. '```' → logprob: -4.672070026397705
    6. '

' → logprob: -4.797070026397705
    7. ',' → logprob: -4.797070026397705
    8. '\' → logprob: -5.297070026397705
    9. ' as' → logprob: -5.297070026397705
    10. '#' → logprob: -5.922070026397705

Token 7: ' math' (ID: 13324)
  Prédit: ' threading'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' threading' → logprob: -0.0033063970040529966
    2. 'thread' → logprob: -6.5033063888549805
    3. ' os' → logprob: -7.1283063888549805
    4. ' collections' → logprob: -7.3783063888549805
    5. ' multiprocessing' → logprob: -9.00330638885498
    6. ' time' → logprob: -9.62830638885498
    7. 'collections' → logprob: -10.00330638885498
    8. ' socket' → logprob: -10.12830638885498
    9. 'os' → logprob: -10.50330638885498
    10. ' asyncio' → logprob: -10.50330638885498

Token 8: '
' (ID: 198)
  Prédit: '.'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '.' → logprob: -0.49485471844673157
    2. '
' → logprob: -1.7448546886444092
    3. '

' → logprob: -3.119854688644409
    4. '<|end|>' → logprob: -3.369854688644409
    5. '```' → logprob: -3.494854688644409
    6. '\n' → logprob: -3.619854688644409
    7. 'import' → logprob: -3.744854688644409
    8. '\' → logprob: -3.869854688644409
    9. ',' → logprob: -3.994854688644409
    10. '<|end|>' → logprob: -5.494854927062988

Token 9: 'import' (ID: 561)
  Prédit: 'import'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'import' → logprob: -1.0184085369110107
    2. '
' → logprob: -1.1434085369110107
    3. '\n' → logprob: -2.2684085369110107
    4. '.' → logprob: -2.7684085369110107
    5. '```' → logprob: -2.8934085369110107
    6. '

' → logprob: -3.3934085369110107
    7. '\' → logprob: -3.5184085369110107
    8. '<|end|>' → logprob: -4.64340877532959
    9. ',' → logprob: -4.89340877532959
    10. 'from' → logprob: -5.76840877532959

Token 10: ' copy' (ID: 5150)
  Prédit: ' threading'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' threading' → logprob: -0.449423223733902
    2. ' os' → logprob: -2.199423313140869
    3. ' random' → logprob: -2.824423313140869
    4. 'random' → logprob: -3.199423313140869
    5. ' collections' → logprob: -3.199423313140869
    6. ' heap' → logprob: -3.324423313140869
    7. ' time' → logprob: -3.699423313140869
    8. 'time' → logprob: -4.199423313140869
    9. 'collections' → logprob: -4.449423313140869
    10. 'os' → logprob: -4.574423313140869

Token 11: '
' (ID: 198)
  Prédit: '
'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '
' → logprob: -0.5364558696746826
    2. '

' → logprob: -1.7864558696746826
    3. '.' → logprob: -2.6614558696746826
    4. 'import' → logprob: -2.9114558696746826
    5. '```' → logprob: -3.1614558696746826
    6. '\n' → logprob: -3.2864558696746826
    7. '<|end|>' → logprob: -4.036456108093262
    8. '\' → logprob: -4.536456108093262
    9. '' → logprob: -5.661456108093262
    10. 'newline' → logprob: -6.286456108093262

Token 12: 'import' (ID: 561)
  Prédit: 'import'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'import' → logprob: -1.1586339473724365
    2. '
' → logprob: -1.4086339473724365
    3. '```' → logprob: -1.9086339473724365
    4. '

' → logprob: -2.1586339473724365
    5. '\n' → logprob: -2.4086339473724365
    6. '\' → logprob: -3.9086339473724365
    7. 'class' → logprob: -4.033634185791016
    8. '#' → logprob: -4.783634185791016
    9. '<|end|>' → logprob: -5.033634185791016
    10. '.' → logprob: -5.033634185791016

Token 13: ' itertools' (ID: 103178)
  Prédit: ' threading'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' threading' → logprob: -0.3245582580566406
    2. 'collections' → logprob: -2.3245582580566406
    3. ' collections' → logprob: -2.6995582580566406
    4. ' itertools' → logprob: -3.3245582580566406
    5. ' heap' → logprob: -3.8245582580566406
    6. 'heap' → logprob: -4.199558258056641
    7. 'random' → logprob: -4.324558258056641
    8. 'time' → logprob: -4.949558258056641
    9. 'thread' → logprob: -5.199558258056641
    10. ' random' → logprob: -5.199558258056641

Token 14: '
' (ID: 198)
  Prédit: '.'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '.' → logprob: -0.7359496355056763
    2. '\n' → logprob: -1.4859496355056763
    3. 'import' → logprob: -1.7359496355056763
    4. '
' → logprob: -3.2359495162963867
    5. '\' → logprob: -3.8609495162963867
    6. '```' → logprob: -3.8609495162963867
    7. '<|end|>' → logprob: -4.235949516296387
    8. '

' → logprob: -4.735949516296387
    9. '<|end|>' → logprob: -6.235949516296387
    10. 'from' → logprob: -6.360949516296387

Token 15: 'from' (ID: 2845)
  Prédit: '.'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '.' → logprob: -1.1151471138000488
    2. '
' → logprob: -1.4901471138000488
    3. 'import' → logprob: -1.8651471138000488
    4. '\n' → logprob: -2.240147113800049
    5. '

' → logprob: -2.615147113800049
    6. '```' → logprob: -2.865147113800049
    7. '<|end|>' → logprob: -3.990147113800049
    8. '\' → logprob: -4.990147113800049
    9. ',' → logprob: -4.990147113800049
    10. '#' → logprob: -5.740147113800049

Token 16: ' fractions' (ID: 110523)
  Prédit: ' collections'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' collections' → logprob: -0.06402965635061264
    2. 'collections' → logprob: -2.9390296936035156
    3. ' typing' → logprob: -5.314029693603516
    4. ' math' → logprob: -6.564029693603516
    5. ' functools' → logprob: -7.064029693603516
    6. ' sys' → logprob: -7.814029693603516
    7. ' enum' → logprob: -7.814029693603516
    8. ' ' → logprob: -8.189029693603516
    9. ' operator' → logprob: -8.439029693603516
    10. 'typing' → logprob: -9.189029693603516

Token 17: ' import' (ID: 1588)
  Prédit: ' import'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' import' → logprob: -0.026803307235240936
    2. 'import' → logprob: -3.6518032550811768
    3. '.' → logprob: -7.901803493499756
    4. '<|end|>' → logprob: -9.526803016662598
    5. '	import' → logprob: -10.776803016662598
    6. ' ' → logprob: -11.526803016662598
    7. '<|end|>' → logprob: -11.651803016662598
    8. '_import' → logprob: -11.901803016662598
    9. '.import' → logprob: -13.526803016662598
    10. 'from' → logprob: -13.651803016662598

Token 18: ' gcd' (ID: 106918)
  Prédit: ' Fraction'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' Fraction' → logprob: -0.16029967367649078
    2. 'Fraction' → logprob: -1.9102996587753296
    3. ' gcd' → logprob: -9.785299301147461
    4. ' fractions' → logprob: -12.035299301147461
    5. ' ' → logprob: -12.910299301147461
    6. 'Fra' → logprob: -13.160299301147461
    7. '```' → logprob: -13.160299301147461
    8. 'fra' → logprob: -13.410299301147461
    9. ' F' → logprob: -13.910299301147461
    10. 'F' → logprob: -14.160299301147461

Token 19: '

' (ID: 279)
  Prédit: ''
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False

Token 20: 'def' (ID: 1314)
  Prédit: '#'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '#' → logprob: -1.9438050985336304
    2. '
' → logprob: -2.19380521774292
    3. 'def' → logprob: -2.19380521774292
    4. 'as' → logprob: -2.31880521774292
    5. '<|end|>' → logprob: -2.31880521774292
    6. 'import' → logprob: -2.94380521774292
    7. '

' → logprob: -2.94380521774292
    8. '(' → logprob: -3.44380521774292
    9. ' as' → logprob: -3.56880521774292
    10. '(
' → logprob: -3.56880521774292

Token 21: ' set' (ID: 920)
  Prédit: ' gcd'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' gcd' → logprob: -1.3753931522369385
    2. ' ' → logprob: -1.5003931522369385
    3. ' main' → logprob: -1.6253931522369385
    4. ' calculate' → logprob: -1.8753931522369385
    5. ' solve' → logprob: -2.6253931522369385
    6. ' bfs' → logprob: -4.125392913818359
    7. ' compute' → logprob: -4.375392913818359
    8. ' is' → logprob: -4.500392913818359
    9. ' factor' → logprob: -4.750392913818359
    10. ' dfs' → logprob: -5.125392913818359

Token 22: '_rec' (ID: 35314)
  Prédit: '_'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '_' → logprob: -0.022259168326854706
    2. ' _' → logprob: -4.14725923538208
    3. '_up' → logprob: -6.77225923538208
    4. '_target' → logprob: -6.77225923538208
    5. 'uptools' → logprob: -7.52225923538208
    6. '_parameters' → logprob: -7.77225923538208
    7. '_params' → logprob: -8.272258758544922
    8. '_union' → logprob: -8.397258758544922
    9. '_a' → logprob: -8.772258758544922
    10. '_data' → logprob: -8.897258758544922

Token 23: 'ursion' (ID: 41658)
  Prédit: 't'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 't' → logprob: -0.01823914423584938
    2. '_' → logprob: -5.1432390213012695
    3. 'ursion' → logprob: -5.2682390213012695
    4. '_t' → logprob: -6.0182390213012695
    5. '```' → logprob: -7.2682390213012695
    6. 'ur' → logprob: -7.3932390213012695
    7. 'tor' → logprob: -7.3932390213012695
    8. 'ursive' → logprob: -7.6432390213012695
    9. '(t' → logprob: -7.8932390213012695
    10. 'tal' → logprob: -8.01823902130127

Token 24: '_limit' (ID: 34361)
  Prédit: '_limit'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_limit' → logprob: -0.004667811095714569
    2. '_depth' → logprob: -5.50466775894165
    3. 'limit' → logprob: -7.50466775894165
    4. '_' → logprob: -10.629668235778809
    5. '_limits' → logprob: -11.754668235778809
    6. '_stack' → logprob: -12.379668235778809
    7. '_lim' → logprob: -14.254668235778809
    8. '_target' → logprob: -14.504668235778809
    9. '_LIMIT' → logprob: -15.254668235778809
    10. ' limit' → logprob: -15.254668235778809

Token 25: '():
' (ID: 8595)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '(' → logprob: -0.008958564139902592
    2. ' (' → logprob: -5.133958339691162
    3. '_' → logprob: -5.883958339691162
    4. ' ' → logprob: -10.00895881652832
    5. '('' → logprob: -10.50895881652832
    6. '("("' → logprob: -11.13395881652832
    7. '(x' → logprob: -11.25895881652832
    8. '(_)' → logprob: -11.38395881652832
    9. '()' → logprob: -11.38395881652832
    10. '(_' → logprob: -11.50895881652832

Token 26: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.29086676239967346
    2. '(' → logprob: -2.2908668518066406
    3. '():' → logprob: -2.2908668518066406
    4. ':' → logprob: -3.1658668518066406
    5. ' :' → logprob: -6.040866851806641
    6. '):' → logprob: -6.290866851806641
    7. ' ():' → logprob: -6.790866851806641
    8. '  ' → logprob: -7.290866851806641
    9. ' (' → logprob: -7.665866851806641
    10. ' ' → logprob: -7.665866851806641

Token 27: ' sys' (ID: 12228)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.4152578115463257
    2. ' sys' → logprob: -1.1652578115463257
    3. '    ' → logprob: -4.415257930755615
    4. 'sys' (adapté à ' sys') → logprob: -4.790257930755615
    5. 'import' → logprob: -5.415257930755615
    6. ' import' → logprob: -6.040257930755615
    7. ' ' → logprob: -7.790257930755615
    8. '  ' → logprob: -9.040257453918457
    9. '	sys' → logprob: -9.790257453918457
    10. '(sys' → logprob: -10.290257453918457

Token 28: '.set' (ID: 1230)
  Prédit: '.set'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '.set' → logprob: -0.11537589132785797
    2. '.' → logprob: -2.3653759956359863
    3. '.setdefault' → logprob: -4.240375995635986
    4. ' .' → logprob: -7.615375995635986
    5. '.stdout' → logprob: -9.865375518798828
    6. '.exit' → logprob: -9.990375518798828
    7. '.stdin' → logprob: -10.240375518798828
    8. '.argv' → logprob: -11.490375518798828
    9. '.stderr' → logprob: -12.365375518798828
    10. '.get' → logprob: -12.865375518798828

Token 29: 'rec' (ID: 9285)
  Prédit: '_rec'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_rec' → logprob: -0.2759552001953125
    2. 'rec' → logprob: -1.5259552001953125
    3. '_' → logprob: -4.2759552001953125
    4. '_limit' → logprob: -6.2759552001953125
    5. '_depth' → logprob: -6.5259552001953125
    6. '_max' → logprob: -6.6509552001953125
    7. '_stack' → logprob: -7.0259552001953125
    8. '_recursive' → logprob: -7.0259552001953125
    9. '_set' → logprob: -7.4009552001953125
    10. '_execution' → logprob: -8.025955200195312

Token 30: 'ursion' (ID: 41658)
  Prédit: 'ursion'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'ursion' → logprob: -2.5107177862082608e-05
    2. 'limit' → logprob: -10.750024795532227
    3. 'urs' → logprob: -13.375024795532227
    4. '_limit' → logprob: -14.000024795532227
    5. 'ur' → logprob: -14.125024795532227
    6. 'ursive' → logprob: -15.625024795532227
    7. 'usion' → logprob: -15.750024795532227
    8. 'rs' → logprob: -17.000024795532227
    9. 'ursor' → logprob: -17.500024795532227
    10. '_' → logprob: -17.625024795532227

Token 31: 'limit' (ID: 19698)
  Prédit: 'limit'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'limit' → logprob: -0.0031871015671640635
    2. '_limit' → logprob: -5.75318717956543
    3. ' limit' → logprob: -12.00318717956543
    4. 'lim' → logprob: -13.12818717956543
    5. 'depth' → logprob: -14.25318717956543
    6. '_depth' → logprob: -14.75318717956543
    7. '_LIMIT' → logprob: -16.62818717956543
    8. 'al' → logprob: -17.37818717956543
    9. '_' → logprob: -17.62818717956543
    10. 'Limit' → logprob: -17.75318717956543

Token 32: '(' (ID: 7)
  Prédit: '('
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(' → logprob: -1.4498052223643754e-05
    2. ' (' → logprob: -12.375014305114746
    3. '((' → logprob: -13.000014305114746
    4. '('' → logprob: -13.375014305114746
    5. '(

' → logprob: -13.750014305114746
    6. '()' → logprob: -13.875014305114746
    7. '("("' → logprob: -14.000014305114746
    8. '40' → logprob: -14.125014305114746
    9. '(
' → logprob: -14.375014305114746
    10. '(int' → logprob: -15.000014305114746

Token 33: '10' (ID: 702)
  Prédit: '100'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '100' → logprob: -0.22782254219055176
    2. '10' → logprob: -1.6028225421905518
    3. '500' → logprob: -6.977822303771973
    4. ' ' → logprob: -7.477822303771973
    5. '300' → logprob: -7.477822303771973
    6. '200' → logprob: -8.977822303771973
    7. '250' → logprob: -9.352822303771973
    8. '(' → logprob: -10.227822303771973
    9. '400' → logprob: -10.602822303771973
    10. '   ' → logprob: -10.852822303771973

Token 34: ' **' (ID: 6240)
  Prédit: '000'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '000' → logprob: -0.027205832302570343
    2. '0' → logprob: -3.9022059440612793
    3. '00' → logprob: -5.027205944061279
    4. '**' → logprob: -10.027205467224121
    5. '6' → logprob: -10.527205467224121
    6. '7' → logprob: -12.902205467224121
    7. '4' → logprob: -13.152205467224121
    8. '007' → logprob: -13.277205467224121
    9. '5' → logprob: -13.402205467224121
    10. ')' → logprob: -13.777205467224121

Token 35: ' ' (ID: 220)
  Prédit: '7'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '7' → logprob: -0.035025276243686676
    2. '9' → logprob: -3.9100253582000732
    3. '6' → logprob: -4.285025119781494
    4. '8' → logprob: -7.410025119781494
    5. '**' → logprob: -15.160025596618652
    6. '5' → logprob: -16.035024642944336
    7. '```' → logprob: -16.285024642944336
    8. ' ' → logprob: -17.160024642944336
    9. '4' → logprob: -17.410024642944336
    10. '  ' → logprob: -18.035024642944336

Token 36: '7' (ID: 22)
  Prédit: '7'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '7' → logprob: -0.016244681552052498
    2. '9' → logprob: -4.641244888305664
    3. '6' → logprob: -5.141244888305664
    4. '8' → logprob: -7.391244888305664
    5. '**' → logprob: -15.266244888305664
    6. '5' → logprob: -15.516244888305664
    7. '```' → logprob: -16.016244888305664
    8. '

' → logprob: -16.766244888305664
    9. '}' → logprob: -17.016244888305664
    10. '  ' → logprob: -17.703744888305664

Token 37: ')

' (ID: 1029)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')' → logprob: -7.3458322731312364e-06
    2. ')
' → logprob: -12.375007629394531
    3. ' )' → logprob: -12.750007629394531
    4. ' ' → logprob: -16.87500762939453
    5. '))' → logprob: -16.87500762939453
    6. ')

' → logprob: -17.25000762939453
    7. '
' → logprob: -18.12500762939453
    8. '   ' → logprob: -18.25000762939453
    9. '}' → logprob: -18.75000762939453
    10. '.' → logprob: -19.12500762939453

Token 38: 'def' (ID: 1314)
  Prédit: '
'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '
' → logprob: -0.01600421778857708
    2. '

' → logprob: -4.2660040855407715
    3. 'def' → logprob: -6.8910040855407715
    4. '' → logprob: -8.26600456237793
    5. '#' → logprob: -9.01600456237793
    6. '\n' → logprob: -9.14100456237793
    7. '
' → logprob: -9.39100456237793
    8. '


' → logprob: -9.76600456237793
    9. '\' → logprob: -10.51600456237793
    10. ' 
' → logprob: -10.89100456237793

Token 39: ' get' (ID: 717)
  Prédit: ' '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' ' → logprob: -0.43280428647994995
    2. ' main' → logprob: -1.5578043460845947
    3. ' calculate' → logprob: -3.4328043460845947
    4. ' solve' → logprob: -3.5578043460845947
    5. ' space' → logprob: -3.6828043460845947
    6. ' dfs' → logprob: -4.307804107666016
    7. ' bfs' → logprob: -4.557804107666016
    8. ' factorial' → logprob: -5.307804107666016
    9. ' set' → logprob: -5.557804107666016
    10. '_' → logprob: -5.682804107666016

Token 40: '_inf' (ID: 107309)
  Prédit: '_'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '_' → logprob: -0.6539676785469055
    2. '_input' → logprob: -1.2789676189422607
    3. '_max' → logprob: -2.2789676189422607
    4. '_factor' → logprob: -3.7789676189422607
    5. '_queue' → logprob: -5.02896785736084
    6. '_depth' → logprob: -5.15396785736084
    7. '_user' → logprob: -5.15396785736084
    8. '_div' → logprob: -5.15396785736084
    9. '_answer' → logprob: -5.40396785736084
    10. '_l' → logprob: -5.77896785736084

Token 41: '():
' (ID: 8595)
  Prédit: 'inity'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'inity' → logprob: -0.03454149141907692
    2. 'ity' → logprob: -4.409541606903076
    3. 'inty' → logprob: -5.034541606903076
    4. '():' → logprob: -5.159541606903076
    5. '```' → logprob: -5.659541606903076
    6. '()' → logprob: -5.659541606903076
    7. 'init' → logprob: -7.534541606903076
    8. 'finity' → logprob: -7.659541606903076
    9. 'inite' → logprob: -8.034541130065918
    10. 'i' → logprob: -8.284541130065918

Token 42: '   ' (ID: 271)
  Prédit: 'return'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'return' → logprob: -0.6340221762657166
    2. 'float' → logprob: -1.5090222358703613
    3. '(' → logprob: -2.6340222358703613
    4. ' return' → logprob: -2.6340222358703613
    5. '()' → logprob: -3.2590222358703613
    6. ' float' → logprob: -4.009022235870361
    7. 'f' → logprob: -4.384022235870361
    8. '   ' → logprob: -4.759022235870361
    9. '(float' → logprob: -5.009022235870361
    10. 'inf' → logprob: -5.634022235870361

Token 43: ' return' (ID: 622)
  Prédit: ' float'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' float' → logprob: -0.14635081589221954
    2. 'float' → logprob: -2.271350860595703
    3. ' return' → logprob: -4.646350860595703
    4. ' math' → logprob: -5.146350860595703
    5. '10' → logprob: -5.271350860595703
    6. 'return' (adapté à ' return') → logprob: -5.646350860595703
    7. 'math' → logprob: -5.771350860595703
    8. ' ' → logprob: -6.021350860595703
    9. '   ' → logprob: -6.021350860595703
    10. '1' → logprob: -8.521350860595703

Token 44: ' ' (ID: 220)
  Prédit: ' float'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' float' → logprob: -0.026618294417858124
    2. ' math' → logprob: -4.276618480682373
    3. 'float' → logprob: -4.526618480682373
    4. ' ' → logprob: -6.651618480682373
    5. 'math' → logprob: -8.776618003845215
    6. '10' → logprob: -10.151618003845215
    7. 'fl' → logprob: -11.526618003845215
    8. ' f' → logprob: -11.776618003845215
    9. '	float' → logprob: -11.901618003845215
    10. ' inf' → logprob: -11.901618003845215

Token 45: '10' (ID: 702)
  Prédit: 'float'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'float' → logprob: -0.07318467646837234
    2. 'math' → logprob: -2.6981847286224365
    3. '10' → logprob: -5.948184490203857
    4. ' float' → logprob: -7.573184490203857
    5. ' math' → logprob: -9.948184967041016
    6. '1' → logprob: -10.573184967041016
    7. 'int' → logprob: -10.823184967041016
    8. ' ' → logprob: -11.823184967041016
    9. '   ' → logprob: -12.198184967041016
    10. 'fl' → logprob: -12.573184967041016

Token 46: ' **' (ID: 6240)
  Prédit: '18'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '18' → logprob: -0.089114710688591
    2. '9' → logprob: -3.2141146659851074
    3. '**' → logprob: -4.089114665985107
    4. '8' → logprob: -4.589114665985107
    5. '10' → logprob: -5.464114665985107
    6. '12' → logprob: -5.714114665985107
    7. '0' → logprob: -5.839114665985107
    8. '20' → logprob: -6.214114665985107
    9. '15' → logprob: -6.714114665985107
    10. '00' → logprob: -6.839114665985107

Token 47: ' ' (ID: 220)
  Prédit: '18'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '18' → logprob: -0.7503155469894409
    2. '9' → logprob: -0.8753155469894409
    3. '15' → logprob: -2.6253156661987305
    4. '10' → logprob: -3.6253156661987305
    5. '20' → logprob: -4.7503156661987305
    6. '12' → logprob: -6.5003156661987305
    7. '1' → logprob: -7.1253156661987305
    8. '16' → logprob: -7.2503156661987305
    9. '14' → logprob: -9.50031566619873
    10. '19' → logprob: -9.62531566619873

Token 48: '18' (ID: 1157)
  Prédit: '9'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '9' → logprob: -0.4888920485973358
    2. '18' → logprob: -1.2388920783996582
    3. '15' → logprob: -2.863892078399658
    4. '10' → logprob: -3.613892078399658
    5. '20' → logprob: -4.738892078399658
    6. '12' → logprob: -6.363892078399658
    7. '1' → logprob: -6.363892078399658
    8. '16' → logprob: -7.613892078399658
    9. '19' → logprob: -9.6138916015625
    10. '13' → logprob: -9.6138916015625

Token 49: '

' (ID: 279)
  Prédit: '
'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '
' → logprob: -0.43358853459358215
    2. '\n' → logprob: -2.5585885047912598
    3. 'def' → logprob: -2.5585885047912598
    4. '<|end|>' → logprob: -2.5585885047912598
    5. '

' → logprob: -3.0585885047912598
    6. '\' → logprob: -4.55858850479126
    7. '*' → logprob: -4.55858850479126
    8. '<|end|>' → logprob: -5.05858850479126
    9. '' → logprob: -5.18358850479126
    10. '#' → logprob: -5.55858850479126

Token 50: 'def' (ID: 1314)
  Prédit: 'def'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'def' → logprob: -0.045418087393045425
    2. '
' → logprob: -3.7954180240631104
    3. '_' → logprob: -5.1704182624816895
    4. '\n' → logprob: -5.6704182624816895
    5. '\' → logprob: -5.9204182624816895
    6. '#' → logprob: -6.0454182624816895
    7. '

' → logprob: -6.1704182624816895
    8. '<|end|>' → logprob: -6.5454182624816895
    9. ':' → logprob: -6.7954182624816895
    10. '```' → logprob: -7.1704182624816895

Token 51: ' get' (ID: 717)
  Prédit: ' main'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' main' → logprob: -0.3398226797580719
    2. ' max' → logprob: -2.089822769165039
    3. ' gcd' → logprob: -2.214822769165039
    4. ' l' → logprob: -4.089822769165039
    5. ' get' → logprob: -4.339822769165039
    6. ' is' → logprob: -5.089822769165039
    7. ' solve' → logprob: -5.214822769165039
    8. ' ceil' → logprob: -6.089822769165039
    9. ' pow' → logprob: -6.214822769165039
    10. ' factorial' → logprob: -6.214822769165039

Token 52: '_mod' (ID: 15325)
  Prédit: '_inf'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_inf' → logprob: -0.9071671962738037
    2. '_max' → logprob: -1.5321671962738037
    3. '_min' → logprob: -2.1571671962738037
    4. '_g' → logprob: -2.7821671962738037
    5. '_mod' → logprob: -3.2821671962738037
    6. '_int' → logprob: -3.2821671962738037
    7. '_' → logprob: -4.032167434692383
    8. '_pi' → logprob: -4.407167434692383
    9. '_s' → logprob: -4.782167434692383
    10. '_abs' → logprob: -4.782167434692383

Token 53: '():
' (ID: 8595)
  Prédit: '():'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '():' → logprob: -0.0009264685213565826
    2. '()' → logprob: -7.375926494598389
    3. '():
' → logprob: -8.37592601776123
    4. '(' → logprob: -10.12592601776123
    5. ' ():' → logprob: -10.75092601776123
    6. '()(' → logprob: -13.12592601776123
    7. '();' → logprob: -14.25092601776123
    8. '40' → logprob: -14.50092601776123
    9. '():

' → logprob: -14.62592601776123
    10. ' ()' → logprob: -14.62592601776123

Token 54: '   ' (ID: 271)
  Prédit: '()'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '()' → logprob: -0.6263225674629211
    2. '():' → logprob: -1.2513225078582764
    3. '(' → logprob: -3.1263225078582764
    4. '   ' → logprob: -3.2513225078582764
    5. '():
' → logprob: -3.7513225078582764
    6. '100' → logprob: -4.2513227462768555
    7. '40' → logprob: -4.6263227462768555
    8. ' ' → logprob: -4.6263227462768555
    9. ':' → logprob: -4.7513227462768555
    10. ' ()' → logprob: -5.3763227462768555

Token 55: ' return' (ID: 622)
  Prédit: ' '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' ' → logprob: -0.7818815112113953
    2. '100' → logprob: -0.9068815112113953
    3. ' return' → logprob: -2.65688157081604
    4. '10' → logprob: -3.03188157081604
    5. 'return' (adapté à ' return') → logprob: -4.281881332397461
    6. '409' → logprob: -6.281881332397461
    7. '(' → logprob: -6.781881332397461
    8. '   ' → logprob: -7.156881332397461
    9. '1' → logprob: -7.656881332397461
    10. '999' → logprob: -8.031881332397461

Token 56: ' ' (ID: 220)
  Prédit: ' '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' ' → logprob: -0.025701655074954033
    2. '10' → logprob: -4.025701522827148
    3. '100' → logprob: -4.900701522827148
    4. '1' → logprob: -10.525701522827148
    5. ' (' → logprob: -10.525701522827148
    6. '(' → logprob: -11.025701522827148
    7. ' ' → logprob: -12.025701522827148
    8. ' int' → logprob: -13.650701522827148
    9. '998' → logprob: -13.650701522827148
    10. '999' → logprob: -14.650701522827148

Token 57: '10' (ID: 702)
  Prédit: '10'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '10' → logprob: -0.02431226149201393
    2. '100' → logprob: -3.7743122577667236
    3. '(' → logprob: -7.274312496185303
    4. '998' → logprob: -8.274312019348145
    5. ' ' → logprob: -9.274312019348145
    6. '1' → logprob: -10.899312019348145
    7. 'int' → logprob: -12.774312019348145
    8. '(int' → logprob: -13.274312019348145
    9. ' (' → logprob: -14.274312019348145
    10. 'pow' → logprob: -15.899312019348145

Token 58: ' **' (ID: 6240)
  Prédit: '9'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '9' → logprob: -0.01828678697347641
    2. '**' → logprob: -4.01828670501709
    3. '09' → logprob: -9.26828670501709
    4. '7' → logprob: -11.39328670501709
    5. ' **' → logprob: -11.89328670501709
    6. '+' → logprob: -12.01828670501709
    7. '19' → logprob: -12.51828670501709
    8. ' ' → logprob: -12.51828670501709
    9. '18' → logprob: -12.89328670501709
    10. '8' → logprob: -13.14328670501709

Token 59: ' ' (ID: 220)
  Prédit: '9'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '9' → logprob: -1.5048530030981055e-06
    2. ' ' → logprob: -14.000001907348633
    3. '8' → logprob: -15.375001907348633
    4. '09' → logprob: -15.375001907348633
    5. '10' → logprob: -15.750001907348633
    6. '18' → logprob: -17.000001907348633
    7. '1' → logprob: -17.875001907348633
    8. '+' → logprob: -18.625001907348633
    9. '0' → logprob: -18.625001907348633
    10. '12' → logprob: -18.750001907348633

Token 60: '9' (ID: 24)
  Prédit: '9'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '9' → logprob: -3.128163257315464e-07
    2. ' ' → logprob: -15.25
    3. '10' → logprob: -17.25
    4. '09' → logprob: -17.25
    5. '8' → logprob: -17.375
    6. '18' → logprob: -18.0
    7. '1' → logprob: -19.25
    8. '+' → logprob: -19.375
    9. '９' → logprob: -19.75
    10. '7' → logprob: -20.125

Token 61: ' +' (ID: 659)
  Prédit: '+'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '+' → logprob: -0.0010229245526716113
    2. ' +' → logprob: -7.001022815704346
    3. '7' → logprob: -9.126023292541504
    4. '+
' → logprob: -13.376023292541504
    5. '＋' → logprob: -14.751023292541504
    6. '+

' → logprob: -15.126023292541504
    7. ' plus' → logprob: -16.001022338867188
    8. ' +
' → logprob: -16.751022338867188
    9. '+</' → logprob: -17.251022338867188
    10. 'plus' → logprob: -17.376022338867188

Token 62: ' ' (ID: 220)
  Prédit: '7'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '7' → logprob: -2.816093228830141e-06
    2. '+' → logprob: -13.12500286102295
    3. ' ' → logprob: -14.12500286102295
    4. '9' → logprob: -17.500001907348633
    5. '   ' → logprob: -17.875001907348633
    6. ' +' → logprob: -19.125001907348633
    7. '```' → logprob: -19.625001907348633
    8. '  ' → logprob: -19.750001907348633
    9. '07' → logprob: -19.812501907348633
    10. '

' → logprob: -20.625001907348633

Token 63: '7' (ID: 22)
  Prédit: '7'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '7' → logprob: 0.0
    2. '+' → logprob: -17.5
    3. ' ' → logprob: -18.75
    4. '```' → logprob: -19.875
    5. '

' → logprob: -20.625
    6. '   ' → logprob: -20.625
    7. '７' → logprob: -20.875
    8. '9' → logprob: -21.0
    9. '07' → logprob: -21.125
    10. '  ' → logprob: -21.875

Token 64: '

' (ID: 279)
  Prédit: '
'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '
' → logprob: -0.5727332830429077
    2. '\n' → logprob: -1.6977332830429077
    3. '<|end|>' → logprob: -1.6977332830429077
    4. '\' → logprob: -4.322733402252197
    5. '_' → logprob: -4.322733402252197
    6. '```' → logprob: -4.697733402252197
    7. '#' → logprob: -5.072733402252197
    8. 'def' → logprob: -5.072733402252197
    9. '

' → logprob: -5.447733402252197
    10. '' → logprob: -5.947733402252197

Token 65: 'def' (ID: 1314)
  Prédit: 'def'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'def' → logprob: -0.38066956400871277
    2. 'd' → logprob: -1.7556695938110352
    3. '
' → logprob: -2.255669593811035
    4. '\' → logprob: -3.755669593811035
    5. '

' → logprob: -4.755669593811035
    6. '#' → logprob: -5.880669593811035
    7. '\n' → logprob: -7.005669593811035
    8. 'de' → logprob: -7.130669593811035
    9. '```' → logprob: -7.255669593811035
    10. '' → logprob: -7.880669593811035

Token 66: ' li' (ID: 3476)
  Prédit: ' main'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' main' → logprob: -0.1176794171333313
    2. ' ' → logprob: -2.7426793575286865
    3. ' _' → logprob: -4.367679595947266
    4. ' solve' → logprob: -4.867679595947266
    5. ' factorial' → logprob: -4.867679595947266
    6. '_' → logprob: -5.242679595947266
    7. ' gcd' → logprob: -5.492679595947266
    8. ' calculate' → logprob: -6.367679595947266
    9. ' max' → logprob: -7.367679595947266
    10. ' compute' → logprob: -7.367679595947266

Token 67: '_input' (ID: 12507)
  Prédit: 'st'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'st' → logprob: -0.010242708027362823
    2. 'n' → logprob: -4.635242938995361
    3. 'ne' → logprob: -7.885242938995361
    4. 'sts' → logprob: -10.010242462158203
    5. 'nt' → logprob: -10.760242462158203
    6. 'nist' → logprob: -11.885242462158203
    7. 'nst' → logprob: -12.010242462158203
    8. '()' → logprob: -12.135242462158203
    9. 's' → logprob: -12.760242462158203
    10. 'nes' → logprob: -13.135242462158203

Token 68: '():
' (ID: 8595)
  Prédit: '():'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '():' → logprob: -0.06236704811453819
    2. '()' → logprob: -2.8123669624328613
    3. 'st' → logprob: -9.06236743927002
    4. '():
' → logprob: -9.31236743927002
    5. ' ()' → logprob: -9.43736743927002
    6. 'nt' → logprob: -9.93736743927002
    7. ' ():' → logprob: -11.18736743927002
    8. 'n' → logprob: -11.68736743927002
    9. 't' → logprob: -11.68736743927002
    10. 's' → logprob: -11.81236743927002

Token 69: '   ' (ID: 271)
  Prédit: '()'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '()' → logprob: -0.018212802708148956
    2. '():' → logprob: -4.268212795257568
    3. ' ()' → logprob: -6.643212795257568
    4. 'return' → logprob: -6.768212795257568
    5. '(' → logprob: -8.018213272094727
    6. '():
' → logprob: -8.393213272094727
    7. '()
' → logprob: -8.518213272094727
    8. ' return' → logprob: -9.268213272094727
    9. '[]' → logprob: -9.393213272094727
    10. '=' → logprob: -9.393213272094727

Token 70: ' return' (ID: 622)
  Prédit: 'list'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'list' → logprob: -0.026994196698069572
    2. ' list' → logprob: -4.026994228363037
    3. 'return' (adapté à ' return') → logprob: -4.901994228363037
    4. 'map' → logprob: -6.651994228363037
    5. ' return' → logprob: -9.776993751525879
    6. ' map' → logprob: -11.276993751525879
    7. '   ' → logprob: -11.901993751525879
    8. 'int' → logprob: -13.526993751525879
    9. ' ' → logprob: -14.276993751525879
    10. 'input' → logprob: -14.651993751525879

Token 71: ' [' (ID: 723)
  Prédit: 'list'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'list' → logprob: -0.1603081077337265
    2. ' list' → logprob: -1.9103081226348877
    3. '[list' → logprob: -9.660307884216309
    4. '[' → logprob: -12.035307884216309
    5. '	list' → logprob: -12.160307884216309
    6. 'map' → logprob: -12.535307884216309
    7. ' [' → logprob: -12.910307884216309
    8. '(list' → logprob: -14.160307884216309
    9. ' ' → logprob: -14.285307884216309
    10. '=list' → logprob: -15.035307884216309

Token 72: 'int' (ID: 491)
  Prédit: 'int'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'int' → logprob: -7.107425062713446e-06
    2. ' int' → logprob: -12.000006675720215
    3. ']int' → logprob: -14.250006675720215
    4. '	int' → logprob: -16.62500762939453
    5. '
' → logprob: -17.37500762939453
    6. '(int' → logprob: -17.62500762939453
    7. ' ' → logprob: -17.75000762939453
    8. '   ' → logprob: -17.75000762939453
    9. 'map' → logprob: -17.87500762939453
    10. '[int' → logprob: -18.00000762939453

Token 73: '(x' (ID: 4061)
  Prédit: '(x'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(x' → logprob: -0.0343804769217968
    2. '(i' → logprob: -3.7843804359436035
    3. '(' → logprob: -4.5343804359436035
    4. '(s' → logprob: -8.534380912780762
    5. '(input' → logprob: -9.159380912780762
    6. '(
' → logprob: -11.909380912780762
    7. ']' → logprob: -12.284380912780762
    8. '(a' → logprob: -12.409380912780762
    9. '(sys' → logprob: -12.784380912780762
    10. '(ii' → logprob: -12.909380912780762

Token 74: ')' (ID: 8)
  Prédit: ')'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')' → logprob: -0.00032259183353744447
    2. 'for' → logprob: -8.250322341918945
    3. '()' → logprob: -10.125322341918945
    4. '())' → logprob: -11.375322341918945
    5. ' for' → logprob: -12.000322341918945
    6. ' )' → logprob: -13.000322341918945
    7. 'input' → logprob: -14.750322341918945
    8. 'in' → logprob: -15.125322341918945
    9. '(x' → logprob: -15.625322341918945
    10. '(' → logprob: -16.625322341918945

Token 75: ' for' (ID: 395)
  Prédit: 'for'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'for' → logprob: -0.4741469621658325
    2. ' for' → logprob: -0.9741469621658325
    3. ')' → logprob: -9.849146842956543
    4. 'input' → logprob: -11.224146842956543
    5. '.' → logprob: -13.974146842956543
    6. ' input' → logprob: -14.224146842956543
    7. '	for' → logprob: -14.724146842956543
    8. 'in' → logprob: -14.849146842956543
    9. ' in' → logprob: -14.849146842956543
    10. '()' → logprob: -15.224146842956543

Token 76: ' x' (ID: 1215)
  Prédit: ' input'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' input' → logprob: -0.014974720776081085
    2. 'input' → logprob: -4.264974594116211
    3. ' sys' → logprob: -7.139974594116211
    4. ' ' → logprob: -12.139974594116211
    5. '(input' → logprob: -12.264974594116211
    6. 'sys' → logprob: -12.889974594116211
    7. ' in' → logprob: -13.389974594116211
    8. '=input' → logprob: -13.764974594116211
    9. ' x' → logprob: -14.139974594116211
    10. ' ' → logprob: -14.889974594116211

Token 77: ' in' (ID: 306)
  Prédit: ' in'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' in' → logprob: -0.1602928638458252
    2. 'input' → logprob: -2.160292863845825
    3. ' input' → logprob: -3.660292863845825
    4. 'in' → logprob: -5.785292625427246
    5. '(input' → logprob: -5.910292625427246
    6. ' sys' → logprob: -8.535292625427246
    7. ' .' → logprob: -8.785292625427246
    8. '.input' → logprob: -8.785292625427246
    9. '=input' → logprob: -8.910292625427246
    10. '.' → logprob: -9.035292625427246

Token 78: ' sys' (ID: 12228)
  Prédit: 'input'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'input' → logprob: -0.5184926390647888
    2. ' input' → logprob: -1.1434926986694336
    3. ' sys' → logprob: -2.7684926986694336
    4. 'sys' → logprob: -3.7684926986694336
    5. ' ' → logprob: -11.393492698669434
    6. '(sys' → logprob: -12.268492698669434
    7. '=sys' → logprob: -12.393492698669434
    8. 's' → logprob: -13.143492698669434
    9. '(input' → logprob: -13.518492698669434
    10. 'stdin' → logprob: -13.643492698669434

Token 79: '.stdin' (ID: 93480)
  Prédit: '.stdin'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '.stdin' → logprob: -3.881560041918419e-05
    2. '.' → logprob: -10.250039100646973
    3. '.argv' → logprob: -13.750039100646973
    4. '.std' → logprob: -13.750039100646973
    5. '.readline' → logprob: -13.875039100646973
    6. '.stdout' → logprob: -15.875039100646973
    7. '.st' → logprob: -16.125038146972656
    8. 'stdin' → logprob: -16.500038146972656
    9. '(stdin' → logprob: -17.250038146972656
    10. '.input' → logprob: -18.000038146972656

Token 80: '.readline' (ID: 74673)
  Prédit: '.readline'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '.readline' → logprob: -2.2961512513575144e-05
    2. '.' → logprob: -11.125022888183594
    3. '.readlines' → logprob: -12.375022888183594
    4. '.read' → logprob: -12.500022888183594
    5. ' .' → logprob: -15.375022888183594
    6. '.stdin' → logprob: -17.500022888183594
    7. ' readline' → logprob: -18.125022888183594
    8. '.re' → logprob: -18.250022888183594
    9. '().' → logprob: -18.750022888183594
    10. '.rstrip' → logprob: -19.125022888183594

Token 81: '().' (ID: 1454)
  Prédit: '().'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '().' → logprob: -0.5789510607719421
    2. '()]' → logprob: -0.8289510607719421
    3. '()' → logprob: -5.828950881958008
    4. '()].' → logprob: -9.828950881958008
    5. '())' → logprob: -11.703950881958008
    6. ' ().' → logprob: -14.078950881958008
    7. ' ()' → logprob: -14.203950881958008
    8. '()][' → logprob: -14.328950881958008
    9. '（）' → logprob: -14.453950881958008
    10. '(' → logprob: -15.328950881958008

Token 82: 'split' (ID: 13627)
  Prédit: 'strip'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'strip' → logprob: -0.014211111702024937
    2. 'rstrip' → logprob: -4.264211177825928
    3. 'split' → logprob: -10.01421070098877
    4. ' strip' → logprob: -12.76421070098877
    5. 'read' → logprob: -17.389211654663086
    6. 'rst' → logprob: -18.264211654663086
    7. '(strip' → logprob: -18.264211654663086
    8. '_strip' → logprob: -18.514211654663086
    9. 'decode' → logprob: -19.264211654663086
    10. '-strip' → logprob: -20.139211654663086

Token 83: '()' (ID: 416)
  Prédit: '()]'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '()]' → logprob: -6.074907287256792e-05
    2. '()' → logprob: -10.00006103515625
    3. '())' → logprob: -11.37506103515625
    4. ']' → logprob: -13.25006103515625
    5. '(' → logprob: -13.50006103515625
    6. ')]' → logprob: -15.12506103515625
    7. '()]
' → logprob: -15.37506103515625
    8. ']()' → logprob: -15.50006103515625
    9. '()][' → logprob: -17.37506103515625
    10. '()],' → logprob: -18.00006103515625

Token 84: ']

' (ID: 3144)
  Prédit: ']'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ']' → logprob: -0.10950970649719238
    2. ')]' → logprob: -2.3595097064971924
    3. ')' → logprob: -5.359509468078613
    4. '()]' → logprob: -5.484509468078613
    5. '])' → logprob: -7.984509468078613
    6. ']()' → logprob: -10.359509468078613
    7. ']
' → logprob: -11.484509468078613
    8. '()' → logprob: -11.734509468078613
    9. ' ]' → logprob: -12.234509468078613
    10. ')])' → logprob: -12.484509468078613

Token 85: 'def' (ID: 1314)
  Prédit: 'def'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'def' → logprob: -0.14821206033229828
    2. 'd' → logprob: -2.02321195602417
    3. '
' → logprob: -5.52321195602417
    4. '\' → logprob: -7.77321195602417
    5. '#' → logprob: -7.89821195602417
    6. '

' → logprob: -8.273212432861328
    7. 'de' → logprob: -8.273212432861328
    8. '' → logprob: -9.773212432861328
    9. '_' → logprob: -10.148212432861328
    10. '```' → logprob: -10.398212432861328

Token 86: ' get' (ID: 717)
  Prédit: 'int'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'int' → logprob: -1.1786880493164062
    2. '_input' → logprob: -1.6786880493164062
    3. 'input' → logprob: -2.1786880493164062
    4. ' input' → logprob: -2.8036880493164062
    5. ' main' → logprob: -2.8036880493164062
    6. ' int' → logprob: -2.9286880493164062
    7. 's' → logprob: -2.9286880493164062
    8. '_' → logprob: -3.4286880493164062
    9. 'i' → logprob: -3.6786880493164062
    10. '_int' → logprob: -4.178688049316406

Token 87: '_input' (ID: 12507)
  Prédit: '_int'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_int' → logprob: -0.8824759125709534
    2. '_input' → logprob: -1.2574758529663086
    3. '_' → logprob: -2.0074758529663086
    4. '_line' → logprob: -3.6324758529663086
    5. '_list' → logprob: -4.132475852966309
    6. '_max' → logprob: -4.257475852966309
    7. '_inf' → logprob: -4.382475852966309
    8. '_s' → logprob: -4.507475852966309
    9. '_l' → logprob: -4.757475852966309
    10. '_str' → logprob: -5.257475852966309

Token 88: '_re' (ID: 3067)
  Prédit: '():'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '():' → logprob: -0.006286860443651676
    2. '()' → logprob: -5.131287097930908
    3. '():
' → logprob: -8.00628662109375
    4. ' ():' → logprob: -12.25628662109375
    5. '():

' → logprob: -12.38128662109375
    6. '().' → logprob: -12.63128662109375
    7. '(' → logprob: -12.88128662109375
    8. '()>' → logprob: -13.13128662109375
    9. '()">' → logprob: -13.25628662109375
    10. '_line' → logprob: -13.88128662109375

Token 89: 'duced' (ID: 77024)
  Prédit: 'st'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'st' → logprob: -0.6961526870727539
    2. 'mainder' → logprob: -0.8211526870727539
    3. 'main' → logprob: -3.946152687072754
    4. 'm' → logprob: -4.321152687072754
    5. 'peat' → logprob: -4.696152687072754
    6. 'ad' → logprob: -5.321152687072754
    7. 's' → logprob: -5.946152687072754
    8. 'ader' → logprob: -6.571152687072754
    9. 'turn' → logprob: -6.696152687072754
    10. 'place' → logprob: -6.696152687072754

Token 90: '():
' (ID: 8595)
  Prédit: '():'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '():' → logprob: -0.0007553085451945662
    2. '()' → logprob: -7.750755310058594
    3. '():
' → logprob: -8.375755310058594
    4. ' ():' → logprob: -9.875755310058594
    5. '_line' → logprob: -10.625755310058594
    6. '_' → logprob: -12.500755310058594
    7. '():

' → logprob: -13.250755310058594
    8. '_length' → logprob: -13.375755310058594
    9. 'line' → logprob: -13.500755310058594
    10. ' ()' → logprob: -13.875755310058594

Token 91: '   ' (ID: 271)
  Prédit: '()'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '()' → logprob: -0.7680965065956116
    2. '():' → logprob: -0.7680965065956116
    3. '   ' → logprob: -2.893096446990967
    4. ' ()' → logprob: -4.768096446990967
    5. '():
' → logprob: -6.018096446990967
    6. '()
' → logprob: -6.268096446990967
    7. ' ():' → logprob: -6.643096446990967
    8. ':' → logprob: -7.393096446990967
    9. ' return' → logprob: -7.768096446990967
    10. ' ' → logprob: -7.893096446990967

Token 92: ' return' (ID: 622)
  Prédit: 'return'
  Correct (stricte): False
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'return' (adapté à ' return') → logprob: -0.29185187816619873
    2. ' return' → logprob: -1.4168518781661987
    3. '   ' → logprob: -4.791851997375488
    4. '()' → logprob: -6.791851997375488
    5. ' ' → logprob: -8.291851997375488
    6. 'sys' → logprob: -8.416851997375488
    7. '()
' → logprob: -9.041851997375488
    8. ' sys' → logprob: -9.041851997375488
    9. '	return' → logprob: -9.416851997375488
    10. 'x' → logprob: -9.541851997375488

Token 93: ' [' (ID: 723)
  Prédit: 'int'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'int' → logprob: -0.8298217058181763
    2. ' int' → logprob: -1.3298217058181763
    3. '[int' → logprob: -2.2048215866088867
    4. ' sys' → logprob: -2.4548215866088867
    5. 'sys' → logprob: -3.0798215866088867
    6. ' list' → logprob: -4.079821586608887
    7. ' [' → logprob: -4.204821586608887
    8. 'list' → logprob: -4.329821586608887
    9. '[' → logprob: -5.704821586608887
    10. ' map' → logprob: -6.829821586608887

Token 94: 'int' (ID: 491)
  Prédit: 'int'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'int' → logprob: -0.0036503183655440807
    2. 'float' → logprob: -6.128650188446045
    3. 'x' → logprob: -6.753650188446045
    4. '(int' → logprob: -10.003650665283203
    5. 'i' → logprob: -10.003650665283203
    6. '1' → logprob: -10.253650665283203
    7. 'str' → logprob: -10.378650665283203
    8. 'ord' → logprob: -10.503650665283203
    9. 'len' → logprob: -11.003650665283203
    10. 'sys' → logprob: -11.128650665283203

Token 95: '(x' (ID: 4061)
  Prédit: '(x'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(x' → logprob: -3.881560041918419e-05
    2. '(' → logprob: -10.250039100646973
    3. '(sys' → logprob: -14.375039100646973
    4. ' (' → logprob: -14.500039100646973
    5. 'x' → logprob: -14.625039100646973
    6. '(i' → logprob: -14.875039100646973
    7. ' ' → logprob: -15.000039100646973
    8. '
' → logprob: -15.375039100646973
    9. '](' → logprob: -15.375039100646973
    10. ']' → logprob: -15.375039100646973

Token 96: ')' (ID: 8)
  Prédit: ')'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')' → logprob: -0.010729319415986538
    2. '()' → logprob: -4.8857293128967285
    3. '())' → logprob: -6.0107293128967285
    4. '(x' → logprob: -7.3857293128967285
    5. '(' → logprob: -11.135729789733887
    6. ' )' → logprob: -11.510729789733887
    7. 'for' → logprob: -11.885729789733887
    8. '(sys' → logprob: -12.385729789733887
    9. ' for' → logprob: -13.760729789733887
    10. ')x' → logprob: -14.010729789733887

Token 97: ' -' (ID: 533)
  Prédit: 'for'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'for' → logprob: -0.5542387366294861
    2. ' for' → logprob: -1.4292387962341309
    3. '(x' → logprob: -2.054238796234131
    4. '()' → logprob: -3.304238796234131
    5. '(sys' → logprob: -4.179238796234131
    6. '(' → logprob: -5.804238796234131
    7. ')' → logprob: -6.179238796234131
    8. '(s' → logprob: -8.804238319396973
    9. '(f' → logprob: -9.304238319396973
    10. '	for' → logprob: -9.304238319396973

Token 98: ' ' (ID: 220)
  Prédit: '1'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '1' → logprob: -0.004079112783074379
    2. ' ' → logprob: -5.504079341888428
    3. 'int' → logprob: -15.12907886505127
    4. '<|end|>' → logprob: -15.25407886505127
    5. ' int' → logprob: -16.254079818725586
    6. ' for' → logprob: -17.379079818725586
    7. '１' → logprob: -17.629079818725586
    8. '  ' → logprob: -17.879079818725586
    9. '<|end|>' → logprob: -17.879079818725586
    10. ' ' → logprob: -18.441579818725586

Token 99: '1' (ID: 16)
  Prédit: '1'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '1' → logprob: -7.493430894101039e-05
    2. ' ' → logprob: -9.500075340270996
    3. '１' → logprob: -19.12507438659668
    4. 'for' → logprob: -20.12507438659668
    5. '<|end|>' → logprob: -20.25007438659668
    6. '   ' → logprob: -20.37507438659668
    7. '0' → logprob: -20.50007438659668
    8. '2' → logprob: -20.87507438659668
    9. '100' → logprob: -20.87507438659668
    10. '```' → logprob: -21.00007438659668

Token 100: ' for' (ID: 395)
  Prédit: '(x'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(x' → logprob: -0.4663694202899933
    2. 'for' → logprob: -1.466369390487671
    3. ' for' → logprob: -1.966369390487671
    4. 'x' → logprob: -6.46636962890625
    5. ')' → logprob: -8.59136962890625
    6. '(' → logprob: -8.96636962890625
    7. ' x' → logprob: -9.71636962890625
    8. ' ' → logprob: -10.34136962890625
    9. '	for' → logprob: -11.21636962890625
    10. '   ' → logprob: -11.96636962890625

Token 101: ' x' (ID: 1215)
  Prédit: ' x'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' x' → logprob: -0.000657750410027802
    2. 'x' → logprob: -7.375657558441162
    3. ' sys' → logprob: -10.62565803527832
    4. ' ' → logprob: -12.12565803527832
    5. '(x' → logprob: -14.75065803527832
    6. '  ' → logprob: -15.00065803527832
    7. ' ' → logprob: -15.12565803527832
    8. 'sys' → logprob: -15.25065803527832
    9. '_' → logprob: -16.00065803527832
    10. '<|end|>' → logprob: -16.87565803527832

Token 102: ' in' (ID: 306)
  Prédit: ' in'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' in' → logprob: -0.008617172949016094
    2. 'in' → logprob: -4.758617401123047
    3. ' ' → logprob: -13.883617401123047
    4. '  ' → logprob: -14.758617401123047
    5. 'import' → logprob: -14.883617401123047
    6. ' x' → logprob: -15.758617401123047
    7. '=sys' → logprob: -16.008617401123047
    8. ' i' → logprob: -16.383617401123047
    9. 'In' → logprob: -16.383617401123047
    10. 'x' → logprob: -16.508617401123047

Token 103: ' sys' (ID: 12228)
  Prédit: 'sys'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'sys' → logprob: -0.3133196532726288
    2. ' sys' → logprob: -1.3133196830749512
    3. ' li' → logprob: -11.313319206237793
    4. '(sys' → logprob: -11.563319206237793
    5. 'li' → logprob: -11.688319206237793
    6. ' ' → logprob: -11.813319206237793
    7. '	sys' → logprob: -11.938319206237793
    8. '=sys' → logprob: -12.438319206237793
    9. 's' → logprob: -12.938319206237793
    10. 'system' → logprob: -13.188319206237793

Token 104: '.stdin' (ID: 93480)
  Prédit: '.stdin'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '.stdin' → logprob: -9.627176768844947e-05
    2. 'stdin' → logprob: -9.500096321105957
    3. '.stdout' → logprob: -11.750096321105957
    4. '.' → logprob: -12.250096321105957
    5. '.std' → logprob: -12.500096321105957
    6. '.argv' → logprob: -12.750096321105957
    7. '.readline' → logprob: -13.750096321105957
    8. '(stdin' → logprob: -14.625096321105957
    9. ' stdin' → logprob: -14.875096321105957
    10. '.stderr' → logprob: -16.25009536743164

Token 105: '.readline' (ID: 74673)
  Prédit: '.readline'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '.readline' → logprob: -4.274932143744081e-05
    2. '.' → logprob: -10.625042915344238
    3. '().' → logprob: -11.000042915344238
    4. '.readlines' → logprob: -14.000042915344238
    5. '.stdin' → logprob: -14.875042915344238
    6. ' .' → logprob: -15.500042915344238
    7. '.read' → logprob: -16.625041961669922
    8. ' readline' → logprob: -16.625041961669922
    9. '.urlopen' → logprob: -19.125041961669922
    10. '.reader' → logprob: -19.250041961669922

Token 106: '().' (ID: 1454)
  Prédit: '().'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '().' → logprob: -2.3080716346157715e-05
    2. '()' → logprob: -10.875022888183594
    3. ' ().' → logprob: -12.500022888183594
    4. '(' → logprob: -16.125022888183594
    5. '()).' → logprob: -16.375022888183594
    6. '()].' → logprob: -16.750022888183594
    7. '.split' → logprob: -17.000022888183594
    8. '()
' → logprob: -18.875022888183594
    9. ' ()' → logprob: -19.500022888183594
    10. ' .' → logprob: -19.750022888183594

Token 107: 'split' (ID: 13627)
  Prédit: 'split'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'split' → logprob: -0.0002724217774812132
    2. 'strip' → logprob: -8.250272750854492
    3. ' split' → logprob: -12.125272750854492
    4. 'rstrip' → logprob: -12.125272750854492
    5. 'read' → logprob: -15.750272750854492
    6. 'spl' → logprob: -17.250272750854492
    7. '(split' → logprob: -17.625272750854492
    8. 'decode' → logprob: -18.125272750854492
    9. '_split' → logprob: -18.500272750854492
    10. 'plit' → logprob: -18.625272750854492

Token 108: '()' (ID: 416)
  Prédit: '()]'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '()]' → logprob: -0.0005548207554966211
    2. '()' → logprob: -7.500555038452148
    3. '(' → logprob: -14.500555038452148
    4. '())' → logprob: -14.875555038452148
    5. '()]
' → logprob: -15.250555038452148
    6. '()][' → logprob: -15.500555038452148
    7. ']()' → logprob: -15.875555038452148
    8. ']' → logprob: -16.25055503845215
    9. ' ()' → logprob: -16.50055503845215
    10. '()],' → logprob: -16.62555503845215

Token 109: ']

' (ID: 3144)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ')' → logprob: -0.00010628487507347018
    2. ']' → logprob: -9.500105857849121
    3. ')]' → logprob: -11.250105857849121
    4. ')
' → logprob: -11.875105857849121
    5. '])' → logprob: -12.125105857849121
    6. '）' → logprob: -12.750105857849121
    7. ' )' → logprob: -13.125105857849121
    8. ')return' → logprob: -15.250105857849121
    9. '))' → logprob: -15.375105857849121
    10. '())' → logprob: -16.375106811523438

Token 110: 'def' (ID: 1314)
  Prédit: 'def'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'def' → logprob: -0.0014464260311797261
    2. '#' → logprob: -7.00144624710083
    3. '<|end|>' → logprob: -8.376446723937988
    4. '\' → logprob: -8.876446723937988
    5. '
' → logprob: -10.001446723937988
    6. '```' → logprob: -10.251446723937988
    7. 'class' → logprob: -11.001446723937988
    8. 'd' → logprob: -11.376446723937988
    9. '

' → logprob: -11.876446723937988
    10. 'de' → logprob: -12.001446723937988

Token 111: ' read' (ID: 1729)
  Prédit: ' main'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' main' → logprob: -0.017132848501205444
    2. 'main' → logprob: -5.267132759094238
    3. ' bfs' → logprob: -5.892132759094238
    4. ' solve' → logprob: -6.267132759094238
    5. ' dfs' → logprob: -6.892132759094238
    6. ' factorial' → logprob: -6.892132759094238
    7. ' get' → logprob: -7.267132759094238
    8. ' is' → logprob: -7.267132759094238
    9. ' input' → logprob: -7.392132759094238
    10. ' def' → logprob: -8.017132759094238

Token 112: '_int' (ID: 12285)
  Prédit: '_line'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_line' → logprob: -0.08669103682041168
    2. 'line' → logprob: -2.58669114112854
    3. '()' → logprob: -5.586690902709961
    4. '_input' → logprob: -5.711690902709961
    5. '_' → logprob: -8.336690902709961
    6. 'Line' → logprob: -9.086690902709961
    7. 'ine' → logprob: -10.086690902709961
    8. '_int' → logprob: -10.086690902709961
    9. 'ln' → logprob: -10.211690902709961
    10. '_li' → logprob: -10.461690902709961

Token 113: '():
' (ID: 8595)
  Prédit: '():'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '():' → logprob: -0.02642221562564373
    2. '()' → logprob: -3.9014222621917725
    3. '():
' → logprob: -5.151422023773193
    4. '()>' → logprob: -11.026422500610352
    5. ' ():' → logprob: -11.526422500610352
    6. '():
' → logprob: -11.651422500610352
    7. ' ()' → logprob: -11.901422500610352
    8. '()">' → logprob: -11.901422500610352
    9. '()*' → logprob: -12.276422500610352
    10. '():

' → logprob: -12.901422500610352

Token 114: '   ' (ID: 271)
  Prédit: '():'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '():' → logprob: -0.577429473400116
    2. '():
' → logprob: -0.827429473400116
    3. '()' → logprob: -6.702429294586182
    4. ' ():' → logprob: -8.70242977142334
    5. '   ' → logprob: -10.82742977142334
    6. ':' → logprob: -10.82742977142334
    7. ':
' → logprob: -11.07742977142334
    8. ' return' → logprob: -11.57742977142334
    9. '():
' → logprob: -11.82742977142334
    10. '(' → logprob: -12.57742977142334

Token 115: ' return' (ID: 622)
  Prédit: ' return'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' return' → logprob: -0.08016646653413773
    2. 'return' (adapté à ' return') → logprob: -2.5801665782928467
    3. 'int' → logprob: -7.080166339874268
    4. ' int' → logprob: -8.330166816711426
    5. '   ' → logprob: -8.580166816711426
    6. ' ' → logprob: -13.455166816711426
    7. '
' → logprob: -14.205166816711426
    8. '	return' → logprob: -14.330166816711426
    9. '    ' → logprob: -14.455166816711426
    10. '    
' → logprob: -14.455166816711426

Token 116: ' int' (ID: 677)
  Prédit: ' int'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' int' → logprob: -0.2519593834877014
    2. 'int' → logprob: -1.5019593238830566
    3. '(int' → logprob: -11.001959800720215
    4. ' ' → logprob: -11.376959800720215
    5. '	int' → logprob: -13.876959800720215
    6. '<int' → logprob: -14.751959800720215
    7. '   ' → logprob: -15.376959800720215
    8. '[int' → logprob: -15.876959800720215
    9. '=int' → logprob: -16.0019588470459
    10. '  ' → logprob: -16.2519588470459

Token 117: '(input' (ID: 10054)
  Prédit: '(sys'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '(sys' → logprob: -0.12694500386714935
    2. '(' → logprob: -2.1269450187683105
    3. '(
' → logprob: -11.876944541931152
    4. '(s' → logprob: -12.626944541931152
    5. 'sys' → logprob: -13.501944541931152
    6. ' (' → logprob: -13.626944541931152
    7. '(

' → logprob: -13.626944541931152
    8. '(system' → logprob: -13.751944541931152
    9. '(Sys' → logprob: -14.001944541931152
    10. '(System' → logprob: -15.001944541931152

Token 118: '())

' (ID: 27654)
  Prédit: '())'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '())' → logprob: -0.0015154577558860183
    2. '()' → logprob: -6.5015153884887695
    3. '().' → logprob: -11.75151538848877
    4. ' ())' → logprob: -12.87651538848877
    5. '(' → logprob: -14.25151538848877
    6. '())
' → logprob: -14.37651538848877
    7. '();)' → logprob: -14.62651538848877
    8. '()]' → logprob: -14.75151538848877
    9. '()))' → logprob: -15.62651538848877
    10. ')' → logprob: -15.87651538848877

Token 119: 'def' (ID: 1314)
  Prédit: 'def'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'def' → logprob: -0.002284787595272064
    2. '
' → logprob: -6.877285003662109
    3. '<|end|>' → logprob: -7.002285003662109
    4. '#' → logprob: -9.12728500366211
    5. '\' → logprob: -9.87728500366211
    6. 'class' → logprob: -10.12728500366211
    7. ')' → logprob: -10.87728500366211
    8. '<|end|>' → logprob: -11.00228500366211
    9. '

' → logprob: -11.12728500366211
    10. '```' → logprob: -11.12728500366211

Token 120: ' append' (ID: 17147)
  Prédit: ' read'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' read' → logprob: -0.6861512064933777
    2. ' main' → logprob: -1.3111512660980225
    3. 'read' → logprob: -1.8111512660980225
    4. 'main' → logprob: -3.3111512660980225
    5. ' input' → logprob: -4.936151027679443
    6. 'input' → logprob: -5.186151027679443
    7. ' readline' → logprob: -6.311151027679443
    8. ' str' → logprob: -6.311151027679443
    9. 'str' → logprob: -6.436151027679443
    10. 'int' → logprob: -6.561151027679443

Token 121: '_to' (ID: 5089)
  Prédit: '_'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_' → logprob: -0.3395291566848755
    2. '(' → logprob: -2.714529037475586
    3. '_item' → logprob: -2.964529037475586
    4. '_element' → logprob: -3.339529037475586
    5. '_parent' → logprob: -3.339529037475586
    6. '_to' → logprob: -3.589529037475586
    7. '_line' → logprob: -4.214529037475586
    8. '(_' → logprob: -4.964529037475586
    9. '_node' → logprob: -5.214529037475586
    10. '_list' → logprob: -5.214529037475586

Token 122: '_list' (ID: 4162)
  Prédit: '_list'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_list' → logprob: -0.044863756746053696
    2. '_' → logprob: -3.419863700866699
    3. '(' → logprob: -5.669863700866699
    4. 'list' → logprob: -6.044863700866699
    5. '(list' → logprob: -6.419863700866699
    6. '(lst' → logprob: -7.044863700866699
    7. '_array' → logprob: -7.169863700866699
    8. '_lst' → logprob: -8.4198637008667
    9. '_queue' → logprob: -8.5448637008667
    10. '(_' → logprob: -8.6698637008667

Token 123: '_end' (ID: 13707)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '(' → logprob: -0.04998120293021202
    2. '(lst' → logprob: -3.424981117248535
    3. '(l' → logprob: -5.174981117248535
    4. '(list' → logprob: -5.424981117248535
    5. '(a' → logprob: -6.174981117248535
    6. ' (' → logprob: -7.299981117248535
    7. '(ls' → logprob: -7.424981117248535
    8. '_list' → logprob: -7.549981117248535
    9. '(lista' → logprob: -7.674981117248535
    10. '(li' → logprob: -7.924981117248535

Token 124: '(lst' (ID: 95688)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(' → logprob: -0.1640387624502182
    2. '(lst' → logprob: -2.16403865814209
    3. '(l' → logprob: -4.28903865814209
    4. '(list' → logprob: -4.41403865814209
    5. '(a' → logprob: -5.91403865814209
    6. '(obj' → logprob: -6.41403865814209
    7. '(ls' → logprob: -6.41403865814209
    8. '(li' → logprob: -7.16403865814209
    9. '(line' → logprob: -7.66403865814209
    10. '(s' → logprob: -8.03903865814209

Token 125: ',' (ID: 11)
  Prédit: ','
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ',' → logprob: -0.0005623269826173782
    2. ',item' → logprob: -8.00056266784668
    3. ' ,' → logprob: -9.12556266784668
    4. ',value' → logprob: -9.37556266784668
    5. ',l' → logprob: -11.87556266784668
    6. ',val' → logprob: -12.37556266784668
    7. ')' → logprob: -12.75056266784668
    8. '):' → logprob: -13.25056266784668
    9. '(item' → logprob: -13.25056266784668
    10. '(' → logprob: -13.25056266784668

Token 126: ' elem' (ID: 23108)
  Prédit: ' value'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' value' → logprob: -1.037036657333374
    2. 'value' → logprob: -1.412036657333374
    3. ' val' → logprob: -2.287036657333374
    4. 'x' → logprob: -2.912036657333374
    5. ' element' → logprob: -3.037036657333374
    6. 'element' → logprob: -3.162036657333374
    7. ' x' → logprob: -3.287036657333374
    8. ' item' → logprob: -3.412036657333374
    9. 'item' → logprob: -3.537036657333374
    10. 'val' → logprob: -3.662036657333374

Token 127: '):
' (ID: 1883)
  Prédit: '):'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '):' → logprob: -0.009052484296262264
    2. '):
' → logprob: -4.759052276611328
    3. ')' → logprob: -7.759052276611328
    4. ' ):' → logprob: -12.009052276611328
    5. '):
' → logprob: -13.259052276611328
    6. 's' → logprob: -14.134052276611328
    7. ':' → logprob: -14.259052276611328
    8. '):

' → logprob: -14.884052276611328
    9. ',' → logprob: -15.509052276611328
    10. ' ' → logprob: -16.134052276611328

Token 128: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.13038957118988037
    2. ':' → logprob: -2.50538969039917
    3. ':
' → logprob: -3.38038969039917
    4. '):' → logprob: -5.38038969039917
    5. '):
' → logprob: -6.88038969039917
    6. '(lst' → logprob: -8.755389213562012
    7. ' ' → logprob: -8.880389213562012
    8. ' lst' → logprob: -8.880389213562012
    9. '  ' → logprob: -9.380389213562012
    10. ' :
' → logprob: -9.505389213562012

Token 129: ' lst' (ID: 33384)
  Prédit: 'lst'
  Correct (stricte): False
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'lst' (adapté à ' lst') → logprob: -0.21571305394172668
    2. ' lst' → logprob: -2.2157130241394043
    3. '   ' → logprob: -2.4657130241394043
    4. '_lst' → logprob: -12.340713500976562
    5. '(lst' → logprob: -12.840713500976562
    6. '   ' → logprob: -14.840713500976562
    7. '	l' → logprob: -15.090713500976562
    8. '    ' → logprob: -15.090713500976562
    9. 'ls' → logprob: -15.215713500976562
    10. '  ' → logprob: -15.340713500976562

Token 130: '.append' (ID: 3709)
  Prédit: '.append'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '.append' → logprob: -0.018182599917054176
    2. '.' → logprob: -4.018182754516602
    3. ' .' → logprob: -11.143182754516602
    4. '.app' → logprob: -11.768182754516602
    5. '.extend' → logprob: -12.143182754516602
    6. '.push' → logprob: -13.018182754516602
    7. 'append' → logprob: -14.018182754516602
    8. '.add' → logprob: -14.643182754516602
    9. '.Append' → logprob: -14.893182754516602
    10. '.ap' → logprob: -14.893182754516602

Token 131: '(elem' (ID: 61564)
  Prédit: '(elem'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(elem' → logprob: -0.3135477602481842
    2. '(' → logprob: -1.3135477304458618
    3. '(ele' → logprob: -8.43854808807373
    4. '(e' → logprob: -10.18854808807373
    5. '(element' → logprob: -10.93854808807373
    6. '(
' → logprob: -11.43854808807373
    7. ' (' → logprob: -13.43854808807373
    8. '(expr' → logprob: -15.31354808807373
    9. '(

' → logprob: -15.43854808807373
    10. '('' → logprob: -15.43854808807373

Token 132: ')
' (ID: 446)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')' → logprob: -1.0802738870552275e-05
    2. ')
' → logprob: -11.62501049041748
    3. ' )' → logprob: -13.62501049041748
    4. ')return' → logprob: -14.37501049041748
    5. ')

' → logprob: -17.125011444091797
    6. '),' → logprob: -17.500011444091797
    7. '
' → logprob: -17.500011444091797
    8. '<|end|>' → logprob: -17.500011444091797
    9. '))' → logprob: -18.875011444091797
    10. '}' → logprob: -19.125011444091797

Token 133: '   ' (ID: 271)
  Prédit: '
'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '
' → logprob: -0.34185686707496643
    2. '<|end|>' → logprob: -1.341856837272644
    3. '\n' → logprob: -3.9668569564819336
    4. 'def' → logprob: -4.841856956481934
    5. '<|end|>' → logprob: -7.966856956481934
    6. 'newline' → logprob: -8.216856956481934
    7. '

' → logprob: -8.966856956481934
    8. ')' → logprob: -9.216856956481934
    9. '    
' → logprob: -9.341856956481934
    10. 'return' → logprob: -9.466856956481934

Token 134: ' return' (ID: 622)
  Prédit: ''
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False

Token 135: ' lst' (ID: 33384)
  Prédit: 'lst'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'lst' → logprob: -0.7550402879714966
    2. '<|end|>' → logprob: -1.0050402879714966
    3. 'None' → logprob: -2.505040168762207
    4. ' None' → logprob: -2.755040168762207
    5. ' lst' → logprob: -4.005040168762207
    6. ' ' → logprob: -8.505040168762207
    7. '(lst' → logprob: -9.005040168762207
    8. '<|end|>' → logprob: -10.380040168762207
    9. '(None' → logprob: -10.755040168762207
    10. '_lst' → logprob: -10.755040168762207

Token 136: '

' (ID: 279)
  Prédit: 'def'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'def' → logprob: -0.239095538854599
    2. '
' → logprob: -1.9890955686569214
    3. '<|end|>' → logprob: -2.614095449447632
    4. '

' → logprob: -6.364095687866211
    5. '<|end|>' → logprob: -7.864095687866211
    6. '\n' → logprob: -8.864095687866211
    7. ' def' → logprob: -9.239095687866211
    8. 'newline' → logprob: -9.739095687866211
    9. '  
' → logprob: -10.739095687866211
    10. '#' → logprob: -10.864095687866211

Token 137: 'def' (ID: 1314)
  Prédit: 'def'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'def' → logprob: -0.010196933522820473
    2. '
' → logprob: -5.010197162628174
    3. '<|end|>' → logprob: -5.885197162628174
    4. '#' → logprob: -8.260196685791016
    5. 'd' → logprob: -9.135196685791016
    6. '\' → logprob: -9.760196685791016
    7. ' def' → logprob: -10.135196685791016
    8. '\n' → logprob: -10.135196685791016
    9. ' 
' → logprob: -10.260196685791016
    10. ' ' → logprob: -10.885196685791016

Token 138: ' init' (ID: 6327)
  Prédit: ' append'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' append' → logprob: -0.30143314599990845
    2. 'append' → logprob: -1.6764330863952637
    3. ' pop' → logprob: -3.1764330863952637
    4. ' main' → logprob: -4.551433086395264
    5. ' remove' → logprob: -5.051433086395264
    6. 'pop' → logprob: -5.926433086395264
    7. 'remove' → logprob: -6.551433086395264
    8. ' reverse' → logprob: -6.676433086395264
    9. ' extend' → logprob: -6.926433086395264
    10. ' list' → logprob: -6.926433086395264

Token 139: '_vars' (ID: 25901)
  Prédit: '_list'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '_list' → logprob: -0.42669132351875305
    2. '_array' → logprob: -2.1766912937164307
    3. '_queue' → logprob: -2.1766912937164307
    4. '_' → logprob: -2.3016912937164307
    5. '_stack' → logprob: -5.30169153213501
    6. '_matrix' → logprob: -5.67669153213501
    7. 'ialize' → logprob: -5.92669153213501
    8. '_set' → logprob: -6.30169153213501
    9. '_lst' → logprob: -6.30169153213501
    10. '_counter' → logprob: -6.55169153213501

Token 140: '():
' (ID: 8595)
  Prédit: '():'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '():' → logprob: -0.008418352343142033
    2. '(size' → logprob: -5.633418560028076
    3. '():
' → logprob: -6.258418560028076
    4. '(n' → logprob: -6.883418560028076
    5. ' ():' → logprob: -7.883418560028076
    6. '(' → logprob: -8.133418083190918
    7. '(lst' → logprob: -8.258418083190918
    8. '()' → logprob: -8.383418083190918
    9. '(num' → logprob: -8.633418083190918
    10. '(name' → logprob: -9.258418083190918

Token 141: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.0019186449935659766
    2. '    
' → logprob: -6.501918792724609
    3. 'a' → logprob: -9.12691879272461
    4. '
' → logprob: -9.62691879272461
    5. '    ' → logprob: -10.00191879272461
    6. '<|end|>' → logprob: -10.75191879272461
    7. '[' → logprob: -10.87691879272461
    8. '[]' → logprob: -11.00191879272461
    9. 'return' → logprob: -11.12691879272461
    10. 'global' → logprob: -11.12691879272461

Token 142: ' return' (ID: 622)
  Prédit: 'a'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'a' → logprob: -0.5972920060157776
    2. 'n' → logprob: -1.5972919464111328
    3. ' a' → logprob: -2.347291946411133
    4. '   ' → logprob: -3.222291946411133
    5. 'return' (adapté à ' return') → logprob: -3.972291946411133
    6. ' n' → logprob: -4.097291946411133
    7. ' return' → logprob: -4.347291946411133
    8. 'N' → logprob: -4.347291946411133
    9. 'vars' → logprob: -4.972291946411133
    10. 'result' → logprob: -5.472291946411133

Token 143: ' ' (ID: 220)
  Prédit: ' []'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' []' → logprob: -0.37110787630081177
    2. '[]' → logprob: -1.871107816696167
    3. ' [],' → logprob: -2.496107816696167
    4. ' {}' → logprob: -3.371107816696167
    5. '[],' → logprob: -4.496108055114746
    6. ' {},' → logprob: -4.621108055114746
    7. '{}' → logprob: -4.871108055114746
    8. ' ' → logprob: -5.246108055114746
    9. ' [' → logprob: -6.246108055114746
    10. '0' → logprob: -6.871108055114746

Token 144: '0' (ID: 15)
  Prédit: '[]'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '[]' → logprob: -0.04105399176478386
    2. '{}' → logprob: -3.2910540103912354
    3. '0' → logprob: -7.041053771972656
    4. '{' → logprob: -7.541053771972656
    5. '[],' → logprob: -7.666053771972656
    6. '[' → logprob: -7.916053771972656
    7. '[]
' → logprob: -8.291053771972656
    8. '{
' → logprob: -8.791053771972656
    9. '[]}' → logprob: -9.166053771972656
    10. 'dict' → logprob: -9.791053771972656

Token 145: ',' (ID: 11)
  Prédit: ','
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ',' → logprob: -0.6463818550109863
    2. '<|end|>' → logprob: -0.7713818550109863
    3. '<|end|>' → logprob: -5.021381855010986
    4. '
' → logprob: -5.521381855010986
    5. 'def' → logprob: -6.021381855010986
    6. ',
' → logprob: -8.771381378173828
    7. ',None' → logprob: -9.021381378173828
    8. ' ,' → logprob: -9.771381378173828
    9. ' ' → logprob: -10.396381378173828
    10. ';' → logprob: -10.521381378173828

Token 146: ' ' (ID: 220)
  Prédit: '0'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '0' → logprob: -0.6680253744125366
    2. ' ' → logprob: -0.9180253744125366
    3. ' []' → logprob: -2.793025493621826
    4. '[]' → logprob: -3.793025493621826
    5. ' [],' → logprob: -6.543025493621826
    6. '[],' → logprob: -6.668025493621826
    7. '1' → logprob: -7.543025493621826
    8. 'False' → logprob: -8.418025016784668
    9. ' {}' → logprob: -9.043025016784668
    10. '{}' → logprob: -9.293025016784668

Token 147: '0' (ID: 15)
  Prédit: '0'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '0' → logprob: -0.1076890081167221
    2. '[]' → logprob: -2.3576889038085938
    3. '[],' → logprob: -5.982688903808594
    4. '{}' → logprob: -6.107688903808594
    5. '1' → logprob: -6.982688903808594
    6. 'False' → logprob: -7.107688903808594
    7. 'None' → logprob: -8.232688903808594
    8. '""' → logprob: -9.107688903808594
    9. '''' → logprob: -9.107688903808594
    10. '10' → logprob: -9.357688903808594

Token 148: ',' (ID: 11)
  Prédit: ''
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False

Token 149: ' ' (ID: 220)
  Prédit: '[]'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '[]' → logprob: -0.12845540046691895
    2. '0' → logprob: -2.503455400466919
    3. '[],' → logprob: -3.503455400466919
    4. '{}' → logprob: -5.37845516204834
    5. ' []' → logprob: -6.25345516204834
    6. '[]
' → logprob: -7.00345516204834
    7. ' ' → logprob: -8.00345516204834
    8. '[]

' → logprob: -8.12845516204834
    9. 'False' → logprob: -8.75345516204834
    10. '[]}' → logprob: -9.12845516204834

Token 150: '0' (ID: 15)
  Prédit: '[]'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '[]' → logprob: -0.07296018302440643
    2. '0' → logprob: -2.947960138320923
    3. '[],' → logprob: -4.447960376739502
    4. '{}' → logprob: -5.447960376739502
    5. '[]
' → logprob: -7.197960376739502
    6. '[]

' → logprob: -7.447960376739502
    7. 'False' → logprob: -8.822959899902344
    8. '""' → logprob: -9.322959899902344
    9. '[]}' → logprob: -9.322959899902344
    10. ' []' → logprob: -9.822959899902344

Token 151: ',' (ID: 11)
  Prédit: ','
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ',' → logprob: -0.9652114510536194
    2. '<|end|>' → logprob: -0.9652114510536194
    3. 'def' → logprob: -1.5902113914489746
    4. '
' → logprob: -3.4652113914489746
    5. '<|end|>' → logprob: -6.215211391448975
    6. ',
' → logprob: -7.965211391448975
    7. ',n' → logprob: -9.215211868286133
    8. '

' → logprob: -9.340211868286133
    9. '0' → logprob: -9.465211868286133
    10. '...' → logprob: -9.590211868286133

Token 152: ' ' (ID: 220)
  Prédit: ' []'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' []' → logprob: -0.16035766899585724
    2. ' ' → logprob: -2.285357713699341
    3. '[]' → logprob: -3.410357713699341
    4. ' [],' → logprob: -5.160357475280762
    5. '0' → logprob: -5.285357475280762
    6. ' []
' → logprob: -7.035357475280762
    7. '[],' → logprob: -7.285357475280762
    8. ' {}' → logprob: -8.035357475280762
    9. ' False' → logprob: -9.410357475280762
    10. ' None' → logprob: -9.535357475280762

Token 153: '0' (ID: 15)
  Prédit: '[]'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '[]' → logprob: -0.2627689242362976
    2. '0' → logprob: -1.5127689838409424
    3. '[],' → logprob: -5.137768745422363
    4. '{}' → logprob: -5.762768745422363
    5. '[]
' → logprob: -7.387768745422363
    6. 'None' → logprob: -7.887768745422363
    7. '[]

' → logprob: -8.387768745422363
    8. '[]}' → logprob: -8.637768745422363
    9. 'False' → logprob: -9.137768745422363
    10. '{' → logprob: -9.762768745422363

Token 154: '

' (ID: 279)
  Prédit: 'def'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'def' → logprob: -0.8091682195663452
    2. '<|end|>' → logprob: -0.9341682195663452
    3. '
' → logprob: -2.1841683387756348
    4. ',' → logprob: -3.0591683387756348
    5. '<|end|>' → logprob: -6.809168338775635
    6. '

' → logprob: -7.809168338775635
    7. '  
' → logprob: -8.309167861938477
    8. ',
' → logprob: -8.434167861938477
    9. '#' → logprob: -8.809167861938477
    10. ' def' → logprob: -10.559167861938477

Token 155: 'def' (ID: 1314)
  Prédit: 'def'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'def' → logprob: -0.0005126410396769643
    2. '
' → logprob: -8.250513076782227
    3. '<|end|>' → logprob: -8.750513076782227
    4. '\' → logprob: -10.125513076782227
    5. '#' → logprob: -11.000513076782227
    6. '<|end|>' → logprob: -11.375513076782227
    7. 'class' → logprob: -12.125513076782227
    8. '\n' → logprob: -12.500513076782227
    9. '```' → logprob: -12.875513076782227
    10. 'd' → logprob: -13.125513076782227

Token 156: ' can' (ID: 665)
  Prédit: ' main'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' main' → logprob: -0.11956338584423065
    2. 'main' → logprob: -3.244563341140747
    3. ' solve' → logprob: -3.869563341140747
    4. ' factorial' → logprob: -4.619563579559326
    5. ' multiply' → logprob: -4.994563579559326
    6. ' is' → logprob: -4.994563579559326
    7. ' calculate' → logprob: -5.869563579559326
    8. 'solve' → logprob: -5.994563579559326
    9. ' add' → logprob: -6.119563579559326
    10. ' process' → logprob: -6.244563579559326

Token 157: '_extend' (ID: 195756)
  Prédit: '_jump'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '_jump' → logprob: -1.1042969226837158
    2. '_' → logprob: -1.8542969226837158
    3. '_continue' → logprob: -2.604296922683716
    4. '_move' → logprob: -2.729296922683716
    5. '_make' → logprob: -2.854296922683716
    6. '_use' → logprob: -2.979296922683716
    7. '_access' → logprob: -3.729296922683716
    8. '_re' → logprob: -4.104296684265137
    9. '_div' → logprob: -4.104296684265137
    10. '_split' → logprob: -4.229296684265137

Token 158: '(x' (ID: 4061)
  Prédit: '_path'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '_path' → logprob: -0.5589858889579773
    2. '(node' → logprob: -2.683985948562622
    3. '_sequence' → logprob: -2.933985948562622
    4. '(path' → logprob: -3.058985948562622
    5. '(current' → logprob: -3.183985948562622
    6. '(sequence' → logprob: -3.433985948562622
    7. '(lst' → logprob: -3.933985948562622
    8. '(seq' → logprob: -4.058985710144043
    9. '_chain' → logprob: -4.308985710144043
    10. '():' → logprob: -4.433985710144043

Token 159: 'or' (ID: 267)
  Prédit: ','
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ',' → logprob: -0.003946129232645035
    2. '):' → logprob: -5.878946304321289
    3. ' ,' → logprob: -8.003946304321289
    4. ',y' → logprob: -8.503946304321289
    5. '):
' → logprob: -8.628946304321289
    6. ',
' → logprob: -9.128946304321289
    7. ')' → logprob: -9.253946304321289
    8. '1' → logprob: -9.378946304321289
    9. '_,' → logprob: -9.878946304321289
    10. 'y' → logprob: -11.253946304321289

Token 160: '_val' (ID: 13694)
  Prédit: '_val'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_val' → logprob: -0.5764299035072327
    2. '_value' → logprob: -1.576429843902588
    3. ',' → logprob: -2.076429843902588
    4. '_,' → logprob: -4.076429843902588
    5. '):' → logprob: -4.326429843902588
    6. 's' → logprob: -4.451429843902588
    7. '_' → logprob: -4.451429843902588
    8. '_list' → logprob: -4.951429843902588
    9. 'val' → logprob: -5.076429843902588
    10. '_mask' → logprob: -5.451429843902588

Token 161: ',' (ID: 11)
  Prédit: ','
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ',' → logprob: -0.0011321206111460924
    2. ' ,' → logprob: -7.376132011413574
    3. '):' → logprob: -8.376132011413574
    4. ',current' → logprob: -10.126132011413574
    5. 's' → logprob: -10.501132011413574
    6. ',x' → logprob: -10.626132011413574
    7. '_,' → logprob: -11.251132011413574
    8. 'current' → logprob: -11.376132011413574
    9. ',val' → logprob: -11.501132011413574
    10. ' ' → logprob: -11.501132011413574

Token 162: ' a' (ID: 261)
  Prédit: ' mask'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' mask' → logprob: -1.474191427230835
    2. ' visited' → logprob: -2.099191427230835
    3. ' y' → logprob: -2.724191427230835
    4. ' val' → logprob: -3.099191427230835
    5. ' current' → logprob: -3.474191427230835
    6. ' arr' → logprob: -3.599191427230835
    7. ' bit' → logprob: -3.599191427230835
    8. ' length' → logprob: -3.724191427230835
    9. ' limit' → logprob: -3.974191427230835
    10. ' subset' → logprob: -3.974191427230835

Token 163: '_elem' (ID: 68468)
  Prédit: ','
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ',' → logprob: -0.8676050305366516
    2. '):' → logprob: -0.8676050305366516
    3. '_val' → logprob: -2.992604970932007
    4. '_list' → logprob: -3.492604970932007
    5. '):
' → logprob: -3.992604970932007
    6. 'rray' → logprob: -4.492605209350586
    7. 'rr' → logprob: -4.867605209350586
    8. 's' → logprob: -4.992605209350586
    9. 'val' → logprob: -5.492605209350586
    10. ')' → logprob: -5.617605209350586

Token 164: '):
' (ID: 1883)
  Prédit: ','
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ',' → logprob: -0.5510648488998413
    2. '):' → logprob: -0.9260648488998413
    3. '):
' → logprob: -3.676064968109131
    4. ')' → logprob: -7.301064968109131
    5. ' ,' → logprob: -7.301064968109131
    6. ' ):' → logprob: -7.801064968109131
    7. '_list' → logprob: -9.551064491271973
    8. 's' → logprob: -9.551064491271973
    9. '):

' → logprob: -10.301064491271973
    10. '   ' → logprob: -10.551064491271973

Token 165: '   ' (ID: 271)
  Prédit: ':'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ':' → logprob: -0.03477615863084793
    2. ',' → logprob: -3.909776210784912
    3. '):' → logprob: -5.034776210784912
    4. '   ' → logprob: -5.784776210784912
    5. ' :' → logprob: -5.909776210784912
    6. ':
' → logprob: -6.784776210784912
    7. ' and' → logprob: -8.159775733947754
    8. ':return' → logprob: -9.034775733947754
    9. '):
' → logprob: -9.534775733947754
    10. ')' → logprob: -9.784775733947754

Token 166: ' return' (ID: 622)
  Prédit: ' return'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' return' → logprob: -0.5326356887817383
    2. 'return' (adapté à ' return') → logprob: -1.0326356887817383
    3. '   ' → logprob: -2.9076356887817383
    4. '
' → logprob: -7.157635688781738
    5. ' (' → logprob: -7.407635688781738
    6. '(x' → logprob: -8.282635688781738
    7. 'xor' → logprob: -8.907635688781738
    8. '	return' → logprob: -9.407635688781738
    9. ' if' → logprob: -9.657635688781738
    10. ' ' → logprob: -9.657635688781738

Token 167: ' (' (ID: 350)
  Prédit: '(x'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(x' → logprob: -0.3960314393043518
    2. ' (' → logprob: -1.146031379699707
    3. 'xor' → logprob: -5.521031379699707
    4. ' xor' → logprob: -5.896031379699707
    5. '(a' → logprob: -6.521031379699707
    6. '((' → logprob: -7.896031379699707
    7. ' ((' → logprob: -8.646031379699707
    8. '(bin' → logprob: -9.396031379699707
    9. ' ' → logprob: -10.521031379699707
    10. 'x' → logprob: -10.521031379699707

Token 168: 'xor' (ID: 114252)
  Prédit: 'xor'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'xor' → logprob: -0.014531314373016357
    2. ' xor' → logprob: -4.889531135559082
    3. '(x' → logprob: -5.139531135559082
    4. ' (' → logprob: -7.639531135559082
    5. '(a' → logprob: -8.639531135559082
    6. 'a' → logprob: -8.764531135559082
    7. 'x' → logprob: -9.639531135559082
    8. '(' → logprob: -10.014531135559082
    9. ')' → logprob: -10.639531135559082
    10. ' ' → logprob: -11.202031135559082

Token 169: '_val' (ID: 13694)
  Prédit: '_val'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_val' → logprob: -8.41866585687967e-06
    2. '_' → logprob: -11.750008583068848
    3. 'val' → logprob: -15.250008583068848
    4. '_va' → logprob: -16.00000762939453
    5. ' _' → logprob: -16.25000762939453
    6. '_VAL' → logprob: -17.37500762939453
    7. '_var' → logprob: -17.37500762939453
    8. '_v' → logprob: -17.87500762939453
    9. '_
' → logprob: -18.37500762939453
    10. '__' → logprob: -18.75000762939453

Token 170: ' &' (ID: 827)
  Prédit: ' ^'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' ^' → logprob: -0.5822826623916626
    2. '^' → logprob: -0.8322826623916626
    3. '&' → logprob: -6.207282543182373
    4. ' &' → logprob: -6.582282543182373
    5. ' ' → logprob: -6.832282543182373
    6. '|' → logprob: -7.332282543182373
    7. ' |' → logprob: -7.457282543182373
    8. ')' → logprob: -8.582283020019531
    9. ' ^
' → logprob: -8.957283020019531
    10. '+' → logprob: -10.207283020019531

Token 171: ' a' (ID: 261)
  Prédit: ' a'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' a' → logprob: -0.03931165114045143
    2. 'a' → logprob: -3.289311647415161
    3. ' (' → logprob: -6.78931188583374
    4. '(' → logprob: -10.039311408996582
    5. ' ' → logprob: -10.289311408996582
    6. '(a' → logprob: -10.414311408996582
    7. ' (~' → logprob: -11.164311408996582
    8. '	a' → logprob: -12.289311408996582
    9. 'nbsp' → logprob: -12.601811408996582
    10. '
' → logprob: -13.039311408996582

Token 172: '_elem' (ID: 68468)
  Prédit: '_elem'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_elem' → logprob: -3.273621405242011e-05
    2. 'elem' → logprob: -10.375032424926758
    3. '	elem' → logprob: -14.500032424926758
    4. '_' → logprob: -15.125032424926758
    5. '_ele' → logprob: -15.750032424926758
    6. ' _' → logprob: -16.500032424926758
    7. '_element' → logprob: -16.625032424926758
    8. '
' → logprob: -16.750032424926758
    9. ' elem' → logprob: -16.750032424926758
    10. 'e' → logprob: -17.250032424926758

Token 173: ')' (ID: 8)
  Prédit: ')'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')' → logprob: -0.004163995385169983
    2. ')==' → logprob: -5.504164218902588
    3. ' )' → logprob: -9.87916374206543
    4. '==' → logprob: -10.75416374206543
    5. ')!=' → logprob: -11.62916374206543
    6. ')
' → logprob: -13.50416374206543
    7. ')=' → logprob: -13.75416374206543
    8. ')

' → logprob: -14.75416374206543
    9. '=' → logprob: -15.25416374206543
    10. '）' → logprob: -15.75416374206543

Token 174: ' ==' (ID: 951)
  Prédit: '=='
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '==' → logprob: -0.18211330473423004
    2. ' ==' → logprob: -1.8071132898330688
    3. ')==' → logprob: -6.807113170623779
    4. ')' → logprob: -7.307113170623779
    5. '!=' → logprob: -8.807113647460938
    6. ' ' → logprob: -9.307113647460938
    7. '<|end|>' → logprob: -9.307113647460938
    8. ' !=' → logprob: -9.432113647460938
    9. '=' → logprob: -9.682113647460938
    10. '==
' → logprob: -10.307113647460938

Token 175: ' ' (ID: 220)
  Prédit: '0'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '0' → logprob: -0.16229309141635895
    2. ' ' → logprob: -1.9122930765151978
    3. 'a' → logprob: -6.662292957305908
    4. ' a' → logprob: -7.162292957305908
    5. 'x' → logprob: -12.724793434143066
    6. '   ' → logprob: -13.599793434143066
    7. '=' → logprob: -13.787293434143066
    8. '  ' → logprob: -13.787293434143066
    9. '```' → logprob: -13.974793434143066
    10. 'xor' → logprob: -14.037293434143066

Token 176: '0' (ID: 15)
  Prédit: '0'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '0' → logprob: -0.09187883138656616
    2. 'a' → logprob: -2.466878890991211
    3. ' ' → logprob: -6.091878890991211
    4. ' a' → logprob: -7.591878890991211
    5. 'xor' → logprob: -9.091878890991211
    6. 'x' → logprob: -10.341878890991211
    7. '000' → logprob: -13.091878890991211
    8. '```' → logprob: -13.154378890991211
    9. ' xor' → logprob: -13.216878890991211
    10. ' ' → logprob: -13.529378890991211

Token 177: '

' (ID: 279)
  Prédit: 'def'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'def' → logprob: -0.5756859183311462
    2. '<|end|>' → logprob: -0.9506859183311462
    3. '
' → logprob: -3.075685977935791
    4. '<|end|>' → logprob: -6.200685977935791
    5. '\n' → logprob: -7.325685977935791
    6. ':' → logprob: -7.450685977935791
    7. '#' → logprob: -8.325685501098633
    8. '\' → logprob: -8.450685501098633
    9. '.' → logprob: -8.825685501098633
    10. '

' → logprob: -8.825685501098633

Token 178: 'def' (ID: 1314)
  Prédit: 'def'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'def' → logprob: -0.0006017650011926889
    2. ':' → logprob: -8.625601768493652
    3. '
' → logprob: -8.875601768493652
    4. '_' → logprob: -9.250601768493652
    5. ':def' → logprob: -9.625601768493652
    6. '<|end|>' → logprob: -10.000601768493652
    7. '\' → logprob: -10.750601768493652
    8. '#' → logprob: -11.125601768493652
    9. 'de' → logprob: -12.125601768493652
    10. '

' → logprob: -12.250601768493652

Token 179: ' update' (ID: 4027)
  Prédit: ' update'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' update' → logprob: -2.0153563022613525
    2. ' extend' → logprob: -2.2653563022613525
    3. ' main' → logprob: -2.3903563022613525
    4. ' find' → logprob: -2.3903563022613525
    5. ' max' → logprob: -2.6403563022613525
    6. 'max' → logprob: -3.0153563022613525
    7. ' xor' → logprob: -3.1403563022613525
    8. ' add' → logprob: -3.2653563022613525
    9. ' get' → logprob: -3.3903563022613525
    10. ' try' → logprob: -3.3903563022613525

Token 180: '_x' (ID: 7054)
  Prédit: '_x'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_x' → logprob: -0.13433198630809784
    2. '_basis' → logprob: -2.2593319416046143
    3. '_val' → logprob: -5.884332180023193
    4. '_' → logprob: -6.009332180023193
    5. '_linear' → logprob: -6.134332180023193
    6. '_list' → logprob: -6.134332180023193
    7. 'xor' → logprob: -6.634332180023193
    8. '_set' → logprob: -6.634332180023193
    9. '_mask' → logprob: -6.884332180023193
    10. '(x' → logprob: -6.884332180023193

Token 181: 'or' (ID: 267)
  Prédit: 'or'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'or' → logprob: -9.77022064034827e-05
    2. '_or' → logprob: -11.250097274780273
    3. 'ors' → logprob: -11.750097274780273
    4. '```' → logprob: -11.750097274780273
    5. 'orr' → logprob: -11.875097274780273
    6. '_val' → logprob: -11.875097274780273
    7. 'o' → logprob: -12.375097274780273
    8. 'orm' → logprob: -12.437597274780273
    9. 'xor' → logprob: -12.500097274780273
    10. '_' → logprob: -12.500097274780273

Token 182: '(x' (ID: 4061)
  Prédit: '(x'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(x' → logprob: -0.07693938910961151
    2. '(' → logprob: -3.076939344406128
    3. '_val' → logprob: -3.951939344406128
    4. '(val' → logprob: -5.576939582824707
    5. 'xor' → logprob: -6.076939582824707
    6. '_value' → logprob: -6.826939582824707
    7. 'val' → logprob: -7.701939582824707
    8. '_x' → logprob: -8.326939582824707
    9. '(_' → logprob: -8.576939582824707
    10. '(current' → logprob: -8.826939582824707

Token 183: 'or' (ID: 267)
  Prédit: 'or'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'or' → logprob: -0.00044044392416253686
    2. '_or' → logprob: -8.62544059753418
    3. '_val' → logprob: -9.00044059753418
    4. 'o' → logprob: -10.00044059753418
    5. '_' → logprob: -10.25044059753418
    6. 'xor' → logprob: -11.37544059753418
    7. '(or' → logprob: -11.50044059753418
    8. ' or' → logprob: -12.12544059753418
    9. 'val' → logprob: -12.37544059753418
    10. 'orr' → logprob: -12.87544059753418

Token 184: '_val' (ID: 13694)
  Prédit: '_val'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_val' → logprob: -8.816591434879228e-05
    2. '_' → logprob: -9.62508773803711
    3. 'val' → logprob: -11.00008773803711
    4. '_value' → logprob: -13.62508773803711
    5. ')' → logprob: -13.75008773803711
    6. '_VAL' → logprob: -13.75008773803711
    7. ' _' → logprob: -14.37508773803711
    8. 'Val' → logprob: -15.00008773803711
    9. ')_' → logprob: -15.37508773803711
    10. '_vals' → logprob: -16.37508773803711

Token 185: ',' (ID: 11)
  Prédit: ','
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ',' → logprob: -0.0002028251619776711
    2. ' ,' → logprob: -8.625203132629395
    3. ',a' → logprob: -11.000203132629395
    4. ',
' → logprob: -13.125203132629395
    5. ',x' → logprob: -13.500203132629395
    6. 'a' → logprob: -13.500203132629395
    7. '_,' → logprob: -14.375203132629395
    8. 'xor' → logprob: -15.625203132629395
    9. '‌,' → logprob: -15.750203132629395
    10. ')' → logprob: -15.750203132629395

Token 186: ' a' (ID: 261)
  Prédit: ' a'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' a' → logprob: -0.2813342809677124
    2. 'a' → logprob: -1.4063342809677124
    3. 'elem' → logprob: -9.656333923339844
    4. ' elem' → logprob: -10.406333923339844
    5. ' ' → logprob: -10.781333923339844
    6. 'x' → logprob: -11.031333923339844
    7. '   ' → logprob: -11.781333923339844
    8. '	a' → logprob: -11.906333923339844
    9. ' x' → logprob: -12.156333923339844
    10. 'xor' → logprob: -12.156333923339844

Token 187: '_elem' (ID: 68468)
  Prédit: '_elem'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_elem' → logprob: -0.0029765141662210226
    2. 'elem' → logprob: -5.877976417541504
    3. '_val' → logprob: -9.502976417541504
    4. '_' → logprob: -9.627976417541504
    5. '_element' → logprob: -11.627976417541504
    6. '	elem' → logprob: -12.252976417541504
    7. 'Elem' → logprob: -12.752976417541504
    8. '_ele' → logprob: -13.002976417541504
    9. '[' → logprob: -13.127976417541504
    10. ')' → logprob: -13.377976417541504

Token 188: '):
' (ID: 1883)
  Prédit: '):'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '):' → logprob: -0.07073754817247391
    2. '):
' → logprob: -2.695737600326538
    3. ')' → logprob: -7.695737361907959
    4. ':' → logprob: -8.570737838745117
    5. ' ):' → logprob: -9.945737838745117
    6. '   ' → logprob: -10.195737838745117
    7. '):
' → logprob: -10.195737838745117
    8. ',' → logprob: -11.195737838745117
    9. ' ):
' → logprob: -12.570737838745117
    10. '=' → logprob: -12.570737838745117

Token 189: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.012392976321280003
    2. ' return' → logprob: -5.637392997741699
    3. ' xor' → logprob: -5.887392997741699
    4. ':' → logprob: -6.012392997741699
    5. 'xor' → logprob: -6.762392997741699
    6. 'return' → logprob: -7.012392997741699
    7. ' ^' → logprob: -7.387392997741699
    8. ':
' → logprob: -8.6373929977417
    9. '^' → logprob: -8.7623929977417
    10. '	return' → logprob: -9.0123929977417

Token 190: ' return' (ID: 622)
  Prédit: 'return'
  Correct (stricte): False
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'return' (adapté à ' return') → logprob: -0.09389858692884445
    2. ' return' → logprob: -2.8438985347747803
    3. '   ' → logprob: -3.7188985347747803
    4. 'xor' → logprob: -4.968898773193359
    5. ' xor' → logprob: -8.71889877319336
    6. '	return' → logprob: -10.96889877319336
    7. ' ' → logprob: -11.34389877319336
    8. 'x' → logprob: -11.71889877319336
    9. '  ' → logprob: -12.96889877319336
    10. 'eturn' → logprob: -13.21889877319336

Token 191: ' xor' (ID: 106402)
  Prédit: 'xor'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'xor' → logprob: -0.16028332710266113
    2. ' xor' → logprob: -1.9102833271026611
    3. ' ' → logprob: -10.785283088684082
    4. '   ' → logprob: -11.285283088684082
    5. '(x' → logprob: -11.535283088684082
    6. 'x' → logprob: -12.285283088684082
    7. ' ' → logprob: -12.535283088684082
    8. ' (' → logprob: -13.410283088684082
    9. ' XOR' → logprob: -13.910283088684082
    10. '  ' → logprob: -13.910283088684082

Token 192: '_val' (ID: 13694)
  Prédit: '_val'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_val' → logprob: -6.313314952421933e-05
    2. 'val' → logprob: -10.000062942504883
    3. '_' → logprob: -11.000062942504883
    4. 'xor' → logprob: -15.250062942504883
    5. ' _' → logprob: -15.875062942504883
    6. '_va' → logprob: -16.125062942504883
    7. '_VAL' → logprob: -16.375062942504883
    8. '_x' → logprob: -16.625062942504883
    9. 'a' → logprob: -16.750062942504883
    10. '_var' → logprob: -17.125062942504883

Token 193: ' ^' (ID: 7602)
  Prédit: '^'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '^' → logprob: -0.20314279198646545
    2. ' ^' → logprob: -1.703142762184143
    3. '|' → logprob: -6.4531426429748535
    4. ' |' → logprob: -9.203143119812012
    5. ' ' → logprob: -10.453143119812012
    6. ' ' → logprob: -11.578143119812012
    7. ' xor' → logprob: -12.078143119812012
    8. 'xor' → logprob: -13.578143119812012
    9. '
' → logprob: -13.953143119812012
    10. '^

' → logprob: -14.078143119812012

Token 194: ' a' (ID: 261)
  Prédit: 'a'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'a' → logprob: -0.033648353070020676
    2. ' a' → logprob: -3.4086482524871826
    3. ' ' → logprob: -13.408648490905762
    4. '_a' → logprob: -14.283648490905762
    5. '   ' → logprob: -15.283648490905762
    6. '	a' → logprob: -15.408648490905762
    7. '  ' → logprob: -16.408647537231445
    8. ' ' → logprob: -16.783647537231445
    9. 'x' → logprob: -17.658647537231445
    10. '(a' → logprob: -17.783647537231445

Token 195: '_elem' (ID: 68468)
  Prédit: '_elem'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_elem' → logprob: -0.00023727134976070374
    2. 'elem' → logprob: -8.375237464904785
    3. 'lem' → logprob: -12.375237464904785
    4. '	elem' → logprob: -14.375237464904785
    5. '_' → logprob: -14.750237464904785
    6. 'Elem' → logprob: -15.000237464904785
    7. 'l' → logprob: -15.250237464904785
    8. ' _' → logprob: -15.875237464904785
    9. '"_' → logprob: -16.12523651123047
    10. 'el' → logprob: -16.25023651123047

Token 196: '

' (ID: 279)
  Prédit: 'def'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'def' → logprob: -0.09815318137407303
    2. '
' → logprob: -2.8481531143188477
    3. '<|end|>' → logprob: -3.3481531143188477
    4. '

' → logprob: -9.098153114318848
    5. '<|end|>' → logprob: -9.223153114318848
    6. '  
' → logprob: -10.598153114318848
    7. '\n' → logprob: -10.723153114318848
    8. ' def' → logprob: -10.973153114318848
    9. '#' → logprob: -10.973153114318848
    10. '\' → logprob: -10.973153114318848

Token 197: 'def' (ID: 1314)
  Prédit: 'def'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'def' → logprob: -0.0005253921262919903
    2. '#' → logprob: -8.12552547454834
    3. '<|end|>' → logprob: -9.25052547454834
    4. 'class' → logprob: -10.50052547454834
    5. ')' → logprob: -10.62552547454834
    6. '.' → logprob: -11.00052547454834
    7. ':' → logprob: -11.37552547454834
    8. 'a' → logprob: -11.62552547454834
    9. 'for' → logprob: -11.62552547454834
    10. ',' → logprob: -12.00052547454834

Token 198: ' update' (ID: 4027)
  Prédit: ' main'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' main' → logprob: -0.5856828093528748
    2. ' find' → logprob: -2.2106828689575195
    3. 'main' → logprob: -2.7106828689575195
    4. 'def' → logprob: -3.2106828689575195
    5. ' max' → logprob: -3.3356828689575195
    6. 'max' → logprob: -3.9606828689575195
    7. ' get' → logprob: -4.0856828689575195
    8. ' solve' → logprob: -4.0856828689575195
    9. ' count' → logprob: -4.4606828689575195
    10. ' def' → logprob: -4.4606828689575195

Token 199: '_ans' (ID: 146254)
  Prédit: '_list'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '_list' → logprob: -0.6917378902435303
    2. '_x' → logprob: -1.0667378902435303
    3. '_sum' → logprob: -3.8167378902435303
    4. '_max' → logprob: -4.191738128662109
    5. '_mask' → logprob: -4.441738128662109
    6. '_queue' → logprob: -4.816738128662109
    7. '_result' → logprob: -4.816738128662109
    8. '_' → logprob: -4.816738128662109
    9. '_val' → logprob: -5.066738128662109
    10. '_count' → logprob: -5.191738128662109

Token 200: '(ans' (ID: 70054)
  Prédit: '(ans'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(ans' → logprob: -0.013419028371572495
    2. '(' → logprob: -4.763419151306152
    3. ' (' → logprob: -5.763419151306152
    4. '(answer' → logprob: -7.263419151306152
    5. '(x' → logprob: -8.513419151306152
    6. '(a' → logprob: -8.513419151306152
    7. '(s' → logprob: -8.888419151306152
    8. '(current' → logprob: -9.263419151306152
    9. '(max' → logprob: -9.513419151306152
    10. ',' → logprob: -10.138419151306152

Token 201: ',' (ID: 11)
  Prédit: ','
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ',' → logprob: -0.002312976634129882
    2. ' ,' → logprob: -6.127313137054443
    3. '):' → logprob: -9.627312660217285
    4. ',
' → logprob: -10.877312660217285
    5. ')' → logprob: -11.752312660217285
    6. ',val' → logprob: -12.127312660217285
    7. '):
' → logprob: -12.502312660217285
    8. ' ' → logprob: -12.877312660217285
    9. ',value' → logprob: -13.002312660217285
    10. ',x' → logprob: -13.127312660217285

Token 202: ' l' (ID: 305)
  Prédit: ' new'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' new' → logprob: -0.5102582573890686
    2. ' val' → logprob: -1.8852581977844238
    3. 'new' → logprob: -3.010258197784424
    4. ' xor' → logprob: -3.135258197784424
    5. 'val' → logprob: -3.385258197784424
    6. 'xor' → logprob: -3.760258197784424
    7. ' value' → logprob: -3.885258197784424
    8. ' a' → logprob: -4.385258197784424
    9. ' x' → logprob: -4.635258197784424
    10. ' count' → logprob: -5.010258197784424

Token 203: ',' (ID: 11)
  Prédit: ','
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ',' → logprob: -0.06155224144458771
    2. 'eft' → logprob: -3.5615522861480713
    3. 'ast' → logprob: -4.436552047729492
    4. 'en' → logprob: -5.061552047729492
    5. '_idx' → logprob: -6.311552047729492
    6. '_,' → logprob: -6.436552047729492
    7. '+' → logprob: -6.436552047729492
    8. ' ,' → logprob: -6.561552047729492
    9. 'e' → logprob: -7.061552047729492
    10. ',r' → logprob: -7.436552047729492

Token 204: ' r' (ID: 428)
  Prédit: 'r'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'r' → logprob: -0.014360821805894375
    2. ' r' → logprob: -4.2643609046936035
    3. '   ' → logprob: -9.764360427856445
    4. ' ' → logprob: -10.514360427856445
    5. 'i' → logprob: -11.014360427856445
    6. '```' → logprob: -11.014360427856445
    7. 'x' → logprob: -11.139360427856445
    8. ')' → logprob: -12.139360427856445
    9. 'ans' → logprob: -12.201860427856445
    10. '
' → logprob: -12.326860427856445

Token 205: '):
' (ID: 1883)
  Prédit: '):'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '):' → logprob: -0.03985214978456497
    2. '):
' → logprob: -3.6648521423339844
    3. ',' → logprob: -4.414852142333984
    4. ')' → logprob: -6.789852142333984
    5. ' ):' → logprob: -8.789852142333984
    6. '):
' → logprob: -9.789852142333984
    7. '):

' → logprob: -11.414852142333984
    8. '+' → logprob: -12.539852142333984
    9. ':' → logprob: -12.914852142333984
    10. ' ):
' → logprob: -13.039852142333984

Token 206: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.013857531361281872
    2. 'return' → logprob: -4.388857364654541
    3. ' return' → logprob: -6.638857364654541
    4. '	return' → logprob: -10.7638578414917
    5. 'if' → logprob: -11.3888578414917
    6. ' if' → logprob: -13.1388578414917
    7. '  ' → logprob: -13.7638578414917
    8. 'max' → logprob: -14.3888578414917
    9. '       ' → logprob: -14.5138578414917
    10. 'for' → logprob: -15.0138578414917

Token 207: ' return' (ID: 622)
  Prédit: 'return'
  Correct (stricte): False
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'return' (adapté à ' return') → logprob: -0.07396967709064484
    2. '   ' → logprob: -2.698969602584839
    3. ' return' → logprob: -5.823969841003418
    4. 'if' → logprob: -7.323969841003418
    5. 'ans' → logprob: -8.448969841003418
    6. 'max' → logprob: -8.698969841003418
    7. '	return' → logprob: -12.073969841003418
    8. 'for' → logprob: -12.323969841003418
    9. ' ' → logprob: -12.448969841003418
    10. ' if' → logprob: -13.073969841003418

Token 208: ' ans' (ID: 3345)
  Prédit: 'max'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'max' → logprob: -0.28594720363616943
    2. 'ans' → logprob: -1.4109472036361694
    3. ' max' → logprob: -6.285947322845459
    4. '(ans' → logprob: -6.910947322845459
    5. '(max' → logprob: -7.285947322845459
    6. ' ans' → logprob: -7.660947322845459
    7. 'min' → logprob: -7.785947322845459
    8. 'r' → logprob: -8.2859468460083
    9. '(r' → logprob: -10.4109468460083
    10. '[max' → logprob: -10.7859468460083

Token 209: ' +' (ID: 659)
  Prédit: ''
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False

Token 210: ' (' (ID: 350)
  Prédit: '(r'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(r' → logprob: -0.5863986611366272
    2. ' (' → logprob: -1.3363986015319824
    3. 'r' → logprob: -1.9613986015319824
    4. ' r' → logprob: -3.3363986015319824
    5. '(' → logprob: -6.211398601531982
    6. '1' → logprob: -6.336398601531982
    7. ' max' → logprob: -8.58639907836914
    8. '(max' → logprob: -8.71139907836914
    9. 'max' → logprob: -8.83639907836914
    10. ' ' → logprob: -8.96139907836914

Token 211: 'r' (ID: 81)
  Prédit: 'r'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'r' → logprob: -0.031029725447297096
    2. '(r' → logprob: -3.53102970123291
    3. ' r' → logprob: -7.53102970123291
    4. '1' → logprob: -8.15602970123291
    5. ' (' → logprob: -8.65602970123291
    6. ')' → logprob: -8.90602970123291
    7. '2' → logprob: -10.53102970123291
    8. '(' → logprob: -10.90602970123291
    9. '   ' → logprob: -10.90602970123291
    10. ' ' → logprob: -11.03102970123291

Token 212: ' -' (ID: 533)
  Prédit: '-'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '-' → logprob: -0.22547350823879242
    2. ' -' → logprob: -1.6004735231399536
    3. '+' → logprob: -10.725473403930664
    4. ' ' → logprob: -11.100473403930664
    5. '[' → logprob: -11.725473403930664
    6. ')' → logprob: -11.850473403930664
    7. '   ' → logprob: -13.350473403930664
    8. ' +' → logprob: -14.225473403930664
    9. '  ' → logprob: -14.287973403930664
    10. ',' → logprob: -14.350473403930664

Token 213: ' l' (ID: 305)
  Prédit: 'l'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'l' → logprob: -0.006718571297824383
    2. ' l' → logprob: -5.006718635559082
    3. '	l' → logprob: -13.131718635559082
    4. '   ' → logprob: -14.756718635559082
    5. ' ' → logprob: -14.881718635559082
    6. '(l' → logprob: -15.881718635559082
    7. '  ' → logprob: -15.881718635559082
    8. '1' → logprob: -16.506717681884766
    9. '    ' → logprob: -17.006717681884766
    10. '(' → logprob: -17.631717681884766

Token 214: ')

' (ID: 1029)
  Prédit: '+'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '+' → logprob: -0.728833019733429
    2. ' +' → logprob: -0.728833019733429
    3. ')' → logprob: -3.353832960128784
    4. '1' → logprob: -10.853833198547363
    5. ')+' → logprob: -11.228833198547363
    6. ' )' → logprob: -11.353833198547363
    7. '+)' → logprob: -11.353833198547363
    8. '```' → logprob: -11.603833198547363
    9. '   ' → logprob: -11.728833198547363
    10. ')*' → logprob: -12.291333198547363

Token 215: 'def' (ID: 1314)
  Prédit: 'def'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'def' → logprob: -1.8624639324116288e-06
    2. '<|end|>' → logprob: -13.875001907348633
    3. ' def' → logprob: -15.500001907348633
    4. '#' → logprob: -15.500001907348633
    5. '
' → logprob: -15.875001907348633
    6. ')' → logprob: -16.500001907348633
    7. '\' → logprob: -16.625001907348633
    8. 'de' → logprob: -17.000001907348633
    9. 'class' → logprob: -17.000001907348633
    10. '```' → logprob: -17.125001907348633

Token 216: ' get' (ID: 717)
  Prédit: ' def'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' def' → logprob: -0.673429012298584
    2. 'def' → logprob: -1.673429012298584
    3. ' main' → logprob: -1.798429012298584
    4. ' update' → logprob: -2.673429012298584
    5. ' get' → logprob: -3.798429012298584
    6. ' find' → logprob: -4.548429012298584
    7. ' set' → logprob: -4.798429012298584
    8. ' calculate' → logprob: -5.423429012298584
    9. 'main' → logprob: -6.173429012298584
    10. ' ' → logprob: -6.673429012298584

Token 217: '_inter' (ID: 16818)
  Prédit: '_max'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '_max' → logprob: -0.8037331700325012
    2. '_l' → logprob: -2.4287331104278564
    3. '_ans' → logprob: -2.5537331104278564
    4. '_min' → logprob: -2.8037331104278564
    5. '_x' → logprob: -2.9287331104278564
    6. '_' → logprob: -3.3037331104278564
    7. '_sub' → logprob: -3.4287331104278564
    8. '_length' → logprob: -3.6787331104278564
    9. '_sum' → logprob: -3.8037331104278564
    10. '_range' → logprob: -4.6787333488464355

Token 218: 'section' (ID: 6471)
  Prédit: 'val'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'val' → logprob: -0.009327114559710026
    2. 'section' → logprob: -5.134326934814453
    3. 'vals' → logprob: -6.259326934814453
    4. 'face' → logprob: -7.009326934814453
    5. '_val' → logprob: -8.759326934814453
    6. 'sect' → logprob: -8.884326934814453
    7. 'nal' → logprob: -9.509326934814453
    8. 'sections' → logprob: -10.509326934814453
    9. 'mediate' → logprob: -10.634326934814453
    10. 'action' → logprob: -10.759326934814453

Token 219: '(x' (ID: 4061)
  Prédit: '(l'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '(l' → logprob: -0.6084012985229492
    2. '_length' → logprob: -1.9834012985229492
    3. '(' → logprob: -2.108401298522949
    4. '(a' → logprob: -2.608401298522949
    5. '_size' → logprob: -2.733401298522949
    6. '(lst' → logprob: -3.483401298522949
    7. '_area' → logprob: -5.608401298522949
    8. '(s' → logprob: -5.608401298522949
    9. '_len' → logprob: -5.733401298522949
    10. '(arr' → logprob: -5.983401298522949

Token 220: 'or' (ID: 267)
  Prédit: '1'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '1' → logprob: -1.316910982131958
    2. '_start' → logprob: -1.316910982131958
    3. '_val' → logprob: -2.066910982131958
    4. 'def' → logprob: -2.066910982131958
    5. '_l' → logprob: -2.441910982131958
    6. '_left' → logprob: -3.691910982131958
    7. 'r' → logprob: -3.816910982131958
    8. 'l' → logprob: -4.191910743713379
    9. 'val' → logprob: -4.691910743713379
    10. 'start' → logprob: -4.816910743713379

Token 221: '_val' (ID: 13694)
  Prédit: '_val'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_val' → logprob: -0.0005018008523620665
    2. '_' → logprob: -9.25050163269043
    3. '_vals' → logprob: -9.25050163269043
    4. 'val' → logprob: -9.37550163269043
    5. ')_' → logprob: -9.62550163269043
    6. ')' → logprob: -10.00050163269043
    7. ',' → logprob: -10.12550163269043
    8. '_value' → logprob: -10.87550163269043
    9. ',val' → logprob: -11.12550163269043
    10. '_VAL' → logprob: -12.00050163269043

Token 222: ',' (ID: 11)
  Prédit: ','
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ',' → logprob: -0.0041618566028773785
    2. ' ,' → logprob: -5.504161834716797
    3. '):' → logprob: -10.629161834716797
    4. '):
' → logprob: -10.754161834716797
    5. ',
' → logprob: -12.004161834716797
    6. ',l' → logprob: -12.254161834716797
    7. ',r' → logprob: -12.629161834716797
    8. ',a' → logprob: -12.754161834716797
    9. '_,' → logprob: -12.879161834716797
    10. 'def' → logprob: -13.129161834716797

Token 223: ' a' (ID: 261)
  Prédit: 'a'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'a' → logprob: -0.4075310528278351
    2. ' a' → logprob: -1.2825310230255127
    3. ' l' → logprob: -4.907531261444092
    4. 'l' → logprob: -5.032531261444092
    5. ' mask' → logprob: -5.157531261444092
    6. 'lst' → logprob: -5.282531261444092
    7. 'mask' → logprob: -5.532531261444092
    8. ' lst' → logprob: -5.657531261444092
    9. 'r' → logprob: -5.782531261444092
    10. ' y' → logprob: -6.532531261444092

Token 224: '_elem' (ID: 68468)
  Prédit: '_elem'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_elem' → logprob: -0.0025845777709037066
    2. 'elem' → logprob: -6.502584457397461
    3. '_val' → logprob: -7.252584457397461
    4. '_element' → logprob: -8.752584457397461
    5. '_elements' → logprob: -9.627584457397461
    6. '[' → logprob: -9.627584457397461
    7. ')' → logprob: -11.002584457397461
    8. '[_' → logprob: -11.002584457397461
    9. '_' → logprob: -11.377584457397461
    10. '_ele' → logprob: -12.127584457397461

Token 225: '):
' (ID: 1883)
  Prédit: '):'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '):' → logprob: -0.43073520064353943
    2. '):
' → logprob: -1.0557352304458618
    3. ',' → logprob: -6.430735111236572
    4. ')' → logprob: -8.18073558807373
    5. '):
' → logprob: -9.30573558807373
    6. ' ):' → logprob: -10.55573558807373
    7. ' ):
' → logprob: -11.80573558807373
    8. '   ' → logprob: -12.05573558807373
    9. '):

' → logprob: -12.18073558807373
    10. 'def' → logprob: -13.80573558807373

Token 226: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.011563386768102646
    2. 'return' → logprob: -5.261563301086426
    3. 'xor' → logprob: -5.511563301086426
    4. ' return' → logprob: -6.261563301086426
    5. ' xor' → logprob: -8.136563301086426
    6. '    ' → logprob: -10.886563301086426
    7. '  ' → logprob: -11.136563301086426
    8. '       ' → logprob: -11.886563301086426
    9. ' ' → logprob: -12.136563301086426
    10. 'x' → logprob: -12.261563301086426

Token 227: ' return' (ID: 622)
  Prédit: 'return'
  Correct (stricte): False
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'return' (adapté à ' return') → logprob: -0.869838297367096
    2. '   ' → logprob: -1.2448382377624512
    3. 'xor' → logprob: -1.2448382377624512
    4. ' return' → logprob: -5.494838237762451
    5. ' xor' → logprob: -7.369838237762451
    6. 'x' → logprob: -9.74483871459961
    7. '  ' → logprob: -9.99483871459961
    8. ' ' → logprob: -10.24483871459961
    9. '
' → logprob: -10.86983871459961
    10. '	return' → logprob: -11.24483871459961

Token 228: ' xor' (ID: 106402)
  Prédit: 'xor'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'xor' → logprob: -0.16081035137176514
    2. ' xor' → logprob: -1.9108103513717651
    3. '   ' → logprob: -8.035810470581055
    4. ' ' → logprob: -9.410810470581055
    5. 'x' → logprob: -9.660810470581055
    6. '(x' → logprob: -10.035810470581055
    7. ' (' → logprob: -10.535810470581055
    8. ' x' → logprob: -11.035810470581055
    9. '  ' → logprob: -11.785810470581055
    10. 'xr' → logprob: -12.785810470581055

Token 229: '_val' (ID: 13694)
  Prédit: '_val'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_val' → logprob: -2.2723104848410003e-05
    2. 'val' → logprob: -10.750022888183594
    3. '_' → logprob: -14.250022888183594
    4. 'xor' → logprob: -15.875022888183594
    5. 'Val' → logprob: -16.750022888183594
    6. '&_' → logprob: -16.875022888183594
    7. 'a' → logprob: -17.125022888183594
    8. '_VAL' → logprob: -17.125022888183594
    9. '_value' → logprob: -17.500022888183594
    10. ' _' → logprob: -17.500022888183594

Token 230: ' &' (ID: 827)
  Prédit: '&'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '&' → logprob: -0.4747107923030853
    2. ' &' → logprob: -0.9747108221054077
    3. '&a' → logprob: -8.224710464477539
    4. '&amp' → logprob: -8.349710464477539
    5. '&nbsp' → logprob: -9.974710464477539
    6. '&A' → logprob: -10.474710464477539
    7. '&r' → logprob: -11.099710464477539
    8. '|' → logprob: -11.349710464477539
    9. ' ' → logprob: -12.099710464477539
    10. ' ' → logprob: -12.849710464477539

Token 231: ' a' (ID: 261)
  Prédit: 'a'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'a' → logprob: -0.038042180240154266
    2. ' a' → logprob: -3.2880420684814453
    3. '	a' → logprob: -14.788042068481445
    4. ' ' → logprob: -15.288042068481445
    5. '_a' → logprob: -16.913042068481445
    6. '   ' → logprob: -16.913042068481445
    7. '(a' → logprob: -17.663042068481445
    8. ' ' → logprob: -17.913042068481445
    9. '  ' → logprob: -18.163042068481445
    10. 'x' → logprob: -18.413042068481445

Token 232: '_elem' (ID: 68468)
  Prédit: '_elem'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_elem' → logprob: -0.002853255718946457
    2. 'elem' → logprob: -5.8778533935546875
    3. 'a' → logprob: -10.752853393554688
    4. 'lem' → logprob: -11.502853393554688
    5. 'Elem' → logprob: -12.627853393554688
    6. ''_' → logprob: -13.002853393554688
    7. '_element' → logprob: -13.127853393554688
    8. '"_' → logprob: -13.502853393554688
    9. '```' → logprob: -13.502853393554688
    10. '_' → logprob: -13.752853393554688

Token 233: '

' (ID: 279)
  Prédit: ''
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False

Token 234: 'def' (ID: 1314)
  Prédit: 'def'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'def' → logprob: -0.01670960709452629
    2. '<|end|>' → logprob: -4.766709804534912
    3. '
' → logprob: -5.016709804534912
    4. '\n' → logprob: -7.891709804534912
    5. '[' → logprob: -8.766709327697754
    6. '\' → logprob: -9.016709327697754
    7. '(' → logprob: -9.141709327697754
    8. ' def' → logprob: -9.141709327697754
    9. '<|end|>' → logprob: -9.266709327697754
    10. ')' → logprob: -9.891709327697754

Token 235: ' decrease' (ID: 25848)
  Prédit: ' main'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' main' → logprob: -0.4867725372314453
    2. 'main' → logprob: -1.9867725372314453
    3. ' get' → logprob: -3.3617725372314453
    4. ' max' → logprob: -3.4867725372314453
    5. ' find' → logprob: -3.6117725372314453
    6. ' update' → logprob: -3.7367725372314453
    7. 'max' → logprob: -3.9867725372314453
    8. ' solve' → logprob: -4.111772537231445
    9. ' is' → logprob: -4.486772537231445
    10. ' check' → logprob: -4.611772537231445

Token 236: '_s' (ID: 1278)
  Prédit: '_'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '_' → logprob: -0.9005100727081299
    2. '(' → logprob: -1.6505100727081299
    3. '_ans' → logprob: -1.9005100727081299
    4. ' (' → logprob: -2.40051007270813
    5. '(ans' → logprob: -2.77551007270813
    6. '(x' → logprob: -3.65051007270813
    7. '_count' → logprob: -4.775509834289551
    8. '_answer' → logprob: -4.900509834289551
    9. '_x' → logprob: -5.150509834289551
    10. '_val' → logprob: -5.150509834289551

Token 237: '(s' (ID: 1858)
  Prédit: 'et'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'et' → logprob: -0.6672933101654053
    2. 'ize' → logprob: -1.2922933101654053
    3. 't' → logprob: -2.1672933101654053
    4. 'ub' → logprob: -3.1672933101654053
    5. 'tr' → logprob: -4.167293548583984
    6. 'tring' → logprob: -4.542293548583984
    7. 'uffix' → logprob: -4.792293548583984
    8. 'um' → logprob: -5.292293548583984
    9. 'earch' → logprob: -5.792293548583984
    10. 'tep' → logprob: -6.667293548583984

Token 238: ',' (ID: 11)
  Prédit: '):'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '):' → logprob: -0.25456368923187256
    2. '):
' → logprob: -1.6295636892318726
    3. ',' → logprob: -4.129563808441162
    4. ')' → logprob: -5.254563808441162
    5. 'tr' → logprob: -5.379563808441162
    6. '):

' → logprob: -6.754563808441162
    7. 'tring' → logprob: -7.129563808441162
    8. '):
' → logprob: -7.629563808441162
    9. 'ize' → logprob: -10.004563331604004
    10. ' ):' → logprob: -10.004563331604004

Token 239: ' a' (ID: 261)
  Prédit: ' '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' ' → logprob: -0.23515453934669495
    2. '1' → logprob: -1.6101545095443726
    3. ' idx' → logprob: -5.985154628753662
    4. ' amount' → logprob: -6.610154628753662
    5. ' index' → logprob: -7.110154628753662
    6. ' x' → logprob: -7.235154628753662
    7. ' c' → logprob: -7.860154628753662
    8. ' s' → logprob: -7.860154628753662
    9. 'idx' → logprob: -7.860154628753662
    10. ')' → logprob: -8.110154151916504

Token 240: '_l' (ID: 1478)
  Prédit: '_elem'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '_elem' → logprob: -0.049773089587688446
    2. 'elem' → logprob: -3.9247729778289795
    3. '[s' → logprob: -4.049773216247559
    4. '[' → logprob: -5.924773216247559
    5. '_idx' → logprob: -5.924773216247559
    6. '_s' → logprob: -7.174773216247559
    7. ')' → logprob: -7.299773216247559
    8. '[_' → logprob: -7.299773216247559
    9. '_lst' → logprob: -7.924773216247559
    10. '_element' → logprob: -7.924773216247559

Token 241: '):
' (ID: 1883)
  Prédit: '):
'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '):
' → logprob: -0.8681696057319641
    2. '):' → logprob: -1.2431695461273193
    3. ')' → logprob: -1.4931695461273193
    4. '_idx' → logprob: -3.6181695461273193
    5. '[' → logprob: -4.743169784545898
    6. '[l' → logprob: -5.243169784545898
    7. ')]' → logprob: -5.493169784545898
    8. '):

' → logprob: -5.868169784545898
    9. ',' → logprob: -5.993169784545898
    10. '_index' → logprob: -6.243169784545898

Token 242: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.03271704539656639
    2. ':
' → logprob: -4.782717227935791
    3. 'return' → logprob: -4.907717227935791
    4. ':' → logprob: -5.032717227935791
    5. ' return' → logprob: -5.532717227935791
    6. '=' → logprob: -5.907717227935791
    7. ' =' → logprob: -6.907717227935791
    8. 'eturn' → logprob: -7.532717227935791
    9. '	return' → logprob: -7.907717227935791
    10. ' s' → logprob: -8.032716751098633

Token 243: ' return' (ID: 622)
  Prédit: 'return'
  Correct (stricte): False
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'return' (adapté à ' return') → logprob: -0.08381784707307816
    2. ' return' → logprob: -2.583817958831787
    3. '   ' → logprob: -5.458817958831787
    4. 's' → logprob: -7.708817958831787
    5. ' s' → logprob: -8.833817481994629
    6. 'eturn' → logprob: -10.458817481994629
    7. 'for' → logprob: -11.583817481994629
    8. 'ret' → logprob: -12.083817481994629
    9. '	return' → logprob: -12.208817481994629
    10. ' ' → logprob: -12.208817481994629

Token 244: ' s' (ID: 265)
  Prédit: 's'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 's' → logprob: -0.20142249763011932
    2. ' s' → logprob: -1.7014224529266357
    3. '(s' → logprob: -12.951422691345215
    4. 'max' → logprob: -13.326422691345215
    5. ' ' → logprob: -13.576422691345215
    6. '{s' → logprob: -14.326422691345215
    7. 'len' → logprob: -14.576422691345215
    8. ' max' → logprob: -14.701422691345215
    9. 'str' → logprob: -14.951422691345215
    10. '_s' → logprob: -15.076422691345215

Token 245: ' -' (ID: 533)
  Prédit: '-'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '-' → logprob: -0.12721902132034302
    2. ' -' → logprob: -2.1272189617156982
    3. '.replace' → logprob: -9.502219200134277
    4. '+' → logprob: -9.627219200134277
    5. '^' → logprob: -10.502219200134277
    6. '[' → logprob: -10.752219200134277
    7. '.' → logprob: -10.877219200134277
    8. ' ' → logprob: -11.002219200134277
    9. ' ^' → logprob: -11.377219200134277
    10. ' ' → logprob: -12.002219200134277

Token 246: ' (' (ID: 350)
  Prédit: 'a'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'a' → logprob: -0.004080301150679588
    2. ' a' → logprob: -5.504080295562744
    3. '(a' → logprob: -14.004080772399902
    4. ' ' → logprob: -15.004080772399902
    5. '1' → logprob: -15.379080772399902
    6. ' (' → logprob: -15.754080772399902
    7. '	a' → logprob: -16.254079818725586
    8. '   ' → logprob: -16.629079818725586
    9. '_a' → logprob: -17.004079818725586
    10. '[a' → logprob: -17.129079818725586

Token 247: 's' (ID: 82)
  Prédit: 'a'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'a' → logprob: -0.007188673131167889
    2. 's' → logprob: -5.75718879699707
    3. 'get' → logprob: -6.13218879699707
    4. '1' → logprob: -7.13218879699707
    5. '(a' → logprob: -7.13218879699707
    6. ' a' → logprob: -9.50718879699707
    7. '(get' → logprob: -10.00718879699707
    8. '(' → logprob: -10.00718879699707
    9. '2' → logprob: -10.88218879699707
    10. '(s' → logprob: -11.38218879699707

Token 248: ' &' (ID: 827)
  Prédit: ' &'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' &' → logprob: -0.33512750267982483
    2. '&' → logprob: -1.3351274728775024
    3. '%' → logprob: -4.335127353668213
    4. ' %' → logprob: -5.460127353668213
    5. '>>' → logprob: -6.585127353668213
    6. ' ' → logprob: -6.710127353668213
    7. '&a' → logprob: -7.960127353668213
    8. ' //' → logprob: -8.085127830505371
    9. ' >>' → logprob: -8.335127830505371
    10. '[' → logprob: -8.460127830505371

Token 249: ' a' (ID: 261)
  Prédit: ' a'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' a' → logprob: -0.5759993195533752
    2. 'a' → logprob: -0.8259993195533752
    3. '(a' → logprob: -10.95099925994873
    4. '	a' → logprob: -11.20099925994873
    5. ' (' → logprob: -11.20099925994873
    6. ' ' → logprob: -12.20099925994873
    7. '(' → logprob: -12.45099925994873
    8. '_a' → logprob: -13.57599925994873
    9. ' ' → logprob: -14.07599925994873
    10. ')a' → logprob: -14.07599925994873

Token 250: '_l' (ID: 1478)
  Prédit: '_l'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_l' → logprob: -6.630610641877865e-06
    2. '[l' → logprob: -12.125006675720215
    3. '[_' → logprob: -14.750006675720215
    4. '[' → logprob: -15.250006675720215
    5. 'l' → logprob: -15.500006675720215
    6. '_' → logprob: -16.2500057220459
    7. '```' → logprob: -17.1250057220459
    8. '	l' → logprob: -17.6250057220459
    9. ')' → logprob: -18.0000057220459
    10. '_)' → logprob: -18.1250057220459

Token 251: ')

' (ID: 1029)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')' → logprob: -2.816093228830141e-06
    2. ' )' → logprob: -13.62500286102295
    3. ')
' → logprob: -14.12500286102295
    4. '))' → logprob: -15.50000286102295
    5. '[' → logprob: -16.000001907348633
    6. '<|end|>' → logprob: -16.250001907348633
    7. '())' → logprob: -16.750001907348633
    8. ')

' → logprob: -17.250001907348633
    9. 'def' → logprob: -17.375001907348633
    10. '')' → logprob: -17.375001907348633

Token 252: 'def' (ID: 1314)
  Prédit: 'def'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'def' → logprob: -0.0864170640707016
    2. '<|end|>' → logprob: -2.9614169597625732
    3. '
' → logprob: -4.086417198181152
    4. '\n' → logprob: -4.461417198181152
    5. '<|end|>' → logprob: -6.586417198181152
    6. '\' → logprob: -7.711417198181152
    7. '

' → logprob: -8.461417198181152
    8. ' def' → logprob: -8.586417198181152
    9. '#' → logprob: -9.586417198181152
    10. ')' → logprob: -10.086417198181152

Token 253: ' xor' (ID: 106402)
  Prédit: ' main'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' main' → logprob: -0.6217628121376038
    2. ' get' → logprob: -1.996762752532959
    3. ' decrease' → logprob: -2.871762752532959
    4. ' set' → logprob: -3.246762752532959
    5. 'main' → logprob: -3.371762752532959
    6. 'def' → logprob: -3.496762752532959
    7. ' def' → logprob: -3.746762752532959
    8. ' update' → logprob: -4.371762752532959
    9. ' append' → logprob: -4.996762752532959
    10. ' can' → logprob: -4.996762752532959

Token 254: '_remove' (ID: 41629)
  Prédit: '_val'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '_val' → logprob: -0.031000148504972458
    2. '_' → logprob: -3.5310001373291016
    3. ' ' → logprob: -7.906000137329102
    4. 'val' → logprob: -8.156000137329102
    5. ' _' → logprob: -8.656000137329102
    6. '(' → logprob: -8.781000137329102
    7. '_value' → logprob: -10.156000137329102
    8. '<|end|>' → logprob: -10.156000137329102
    9. '(val' → logprob: -10.531000137329102
    10. '_x' → logprob: -10.781000137329102

Token 255: '(x' (ID: 4061)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(' → logprob: -0.912553608417511
    2. '(x' → logprob: -1.0375535488128662
    3. '(s' → logprob: -1.6625535488128662
    4. '_' → logprob: -3.412553548812866
    5. ' (' → logprob: -5.162553787231445
    6. '(_' → logprob: -5.162553787231445
    7. '(a' → logprob: -6.537553787231445
    8. '_x' → logprob: -6.662553787231445
    9. '_s' → logprob: -6.912553787231445
    10. 'ed' → logprob: -7.287553787231445

Token 256: 'or' (ID: 267)
  Prédit: 'or'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'or' → logprob: -0.018730653449892998
    2. '_' → logprob: -4.893730640411377
    3. '_val' → logprob: -5.893730640411377
    4. '_s' → logprob: -6.393730640411377
    5. 's' → logprob: -6.643730640411377
    6. ')' → logprob: -6.893730640411377
    7. '_or' → logprob: -7.018730640411377
    8. '(s' → logprob: -7.518730640411377
    9. 'ors' → logprob: -7.768730640411377
    10. 'xor' → logprob: -7.768730640411377

Token 257: '_val' (ID: 13694)
  Prédit: '_val'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_val' → logprob: -0.0041463072411715984
    2. '_' → logprob: -5.879146099090576
    3. 'val' → logprob: -7.129146099090576
    4. '_s' → logprob: -8.754146575927734
    5. '_remove' → logprob: -9.129146575927734
    6. ')' → logprob: -9.254146575927734
    7. ' _' → logprob: -10.504146575927734
    8. ' ' → logprob: -10.504146575927734
    9. ')_' → logprob: -10.879146575927734
    10. '_value' → logprob: -11.254146575927734

Token 258: ',' (ID: 11)
  Prédit: ','
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ',' → logprob: -0.0009621966164559126
    2. ' ,' → logprob: -7.125962257385254
    3. ')' → logprob: -10.000962257385254
    4. ',x' → logprob: -10.125962257385254
    5. '_,' → logprob: -10.625962257385254
    6. '):' → logprob: -11.250962257385254
    7. ',
' → logprob: -11.250962257385254
    8. ',a' → logprob: -12.125962257385254
    9. ' ' → logprob: -12.750962257385254
    10. '),' → logprob: -13.250962257385254

Token 259: ' a' (ID: 261)
  Prédit: 'a'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'a' → logprob: -0.48263633251190186
    2. ' a' → logprob: -0.9826363325119019
    3. 'x' → logprob: -5.857636451721191
    4. ' x' → logprob: -6.732636451721191
    5. 'xor' → logprob: -6.732636451721191
    6. ' s' → logprob: -7.482636451721191
    7. ' elem' → logprob: -7.482636451721191
    8. 'elem' → logprob: -7.482636451721191
    9. 's' → logprob: -7.732636451721191
    10. ' xor' → logprob: -8.982636451721191

Token 260: '_l' (ID: 1478)
  Prédit: '_elem'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_elem' → logprob: -0.20196501910686493
    2. '_l' → logprob: -1.8269649744033813
    3. '_val' → logprob: -4.201964855194092
    4. 'elem' → logprob: -5.826964855194092
    5. '[_' → logprob: -6.826964855194092
    6. '[l' → logprob: -7.326964855194092
    7. '[' → logprob: -7.451964855194092
    8. '_' → logprob: -7.701964855194092
    9. '_element' → logprob: -8.45196533203125
    10. '_elements' → logprob: -8.70196533203125

Token 261: '):
' (ID: 1883)
  Prédit: '):'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '):' → logprob: -0.24710728228092194
    2. '):
' → logprob: -1.9971072673797607
    3. ')' → logprob: -2.4971072673797607
    4. ',' → logprob: -7.87210750579834
    5. ' ):' → logprob: -8.37210750579834
    6. '):
' → logprob: -9.37210750579834
    7. ' )' → logprob: -9.87210750579834
    8. ')=' → logprob: -10.62210750579834
    9. '   ' → logprob: -10.99710750579834
    10. '):

' → logprob: -10.99710750579834

Token 262: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.4431615471839905
    2. 'return' → logprob: -1.5681614875793457
    3. ' return' → logprob: -1.9431614875793457
    4. 'xor' → logprob: -6.068161487579346
    5. '=' → logprob: -6.193161487579346
    6. ' xor' → logprob: -7.068161487579346
    7. ' =' → logprob: -7.568161487579346
    8. ')' → logprob: -8.193161964416504
    9. ' ' → logprob: -8.943161964416504
    10. '	return' → logprob: -8.943161964416504

Token 263: ' return' (ID: 622)
  Prédit: 'return'
  Correct (stricte): False
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'return' (adapté à ' return') → logprob: -0.09829775243997574
    2. ' return' → logprob: -2.5982978343963623
    3. '   ' → logprob: -4.223297595977783
    4. 'xor' → logprob: -5.473297595977783
    5. ' xor' → logprob: -8.348298072814941
    6. ' ' → logprob: -9.598298072814941
    7. 'eturn' → logprob: -10.723298072814941
    8. '	return' → logprob: -11.223298072814941
    9. ')' → logprob: -11.473298072814941
    10. '=' → logprob: -12.098298072814941

Token 264: ' xor' (ID: 106402)
  Prédit: 'xor'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'xor' → logprob: -0.06198449432849884
    2. ' xor' → logprob: -2.8119845390319824
    3. 'x' → logprob: -11.561984062194824
    4. ' ' → logprob: -12.686984062194824
    5. '   ' → logprob: -13.311984062194824
    6. '0' → logprob: -13.436984062194824
    7. '  ' → logprob: -14.686984062194824
    8. '(x' → logprob: -15.811984062194824
    9. ' x' → logprob: -16.31198501586914
    10. '10' → logprob: -17.06198501586914

Token 265: '_val' (ID: 13694)
  Prédit: '_val'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_val' → logprob: -0.00032354547875002027
    2. 'val' → logprob: -8.125323295593262
    3. '_' → logprob: -11.375323295593262
    4. ' _' → logprob: -12.000323295593262
    5. '^' → logprob: -12.750323295593262
    6. '_x' → logprob: -13.375323295593262
    7. ' ^' → logprob: -13.750323295593262
    8. 'xor' → logprob: -13.875323295593262
    9. '_va' → logprob: -14.000323295593262
    10. '_var' → logprob: -14.500323295593262

Token 266: ' ^' (ID: 7602)
  Prédit: ' ^'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' ^' → logprob: -0.03962656483054161
    2. '^' → logprob: -3.2896265983581543
    3. ' &' → logprob: -7.039626598358154
    4. ' ' → logprob: -7.539626598358154
    5. ' ' → logprob: -9.539626121520996
    6. '&' → logprob: -9.664626121520996
    7. '&nbsp' → logprob: -10.914626121520996
    8. ' ^=' → logprob: -11.664626121520996
    9. ' ^
' → logprob: -12.789626121520996
    10. ' xor' → logprob: -13.164626121520996

Token 267: ' a' (ID: 261)
  Prédit: 'a'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'a' → logprob: -0.006715967319905758
    2. ' a' → logprob: -5.006715774536133
    3. '(a' → logprob: -15.256715774536133
    4. '(' → logprob: -16.131715774536133
    5. ' (' → logprob: -16.131715774536133
    6. '	a' → logprob: -16.381715774536133
    7. ' ' → logprob: -16.756715774536133
    8. '_a' → logprob: -17.256715774536133
    9. '   ' → logprob: -17.506715774536133
    10. '<|end|>' → logprob: -18.131715774536133

Token 268: '_l' (ID: 1478)
  Prédit: '_l'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_l' → logprob: -9.913265239447355e-05
    2. 'l' → logprob: -9.250099182128906
    3. '_' → logprob: -13.750099182128906
    4. 'a' → logprob: -14.625099182128906
    5. '```' → logprob: -15.000099182128906
    6. ' _' → logprob: -16.250099182128906
    7. '	l' → logprob: -16.250099182128906
    8. '_elem' → logprob: -16.875099182128906
    9. '_ls' → logprob: -17.000099182128906
    10. '_a' → logprob: -17.000099182128906

Token 269: '

' (ID: 279)
  Prédit: 'def'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'def' → logprob: -0.3270093500614166
    2. '<|end|>' → logprob: -1.3270093202590942
    3. '
' → logprob: -5.077009201049805
    4. '<|end|>' → logprob: -5.577009201049805
    5. '\n' → logprob: -7.577009201049805
    6. '[' → logprob: -7.702009201049805
    7. ')' → logprob: -7.827009201049805
    8. '```' → logprob: -7.952009201049805
    9. 'a' → logprob: -8.077009201049805
    10. 'x' → logprob: -8.327009201049805

Token 270: 'def' (ID: 1314)
  Prédit: 'def'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'def' → logprob: -0.028026949614286423
    2. '
' → logprob: -4.903027057647705
    3. '<|end|>' → logprob: -4.903027057647705
    4. '\n' → logprob: -5.778027057647705
    5. '#' → logprob: -6.278027057647705
    6. '\' → logprob: -6.653027057647705
    7. ')' → logprob: -7.153027057647705
    8. '.' → logprob: -7.278027057647705
    9. ' ' → logprob: -7.403027057647705
    10. '<|end|>' → logprob: -7.528027057647705

Token 271: ' increase' (ID: 7064)
  Prédit: 'main'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'main' → logprob: -0.20563985407352448
    2. ' main' → logprob: -1.9556398391723633
    3. 'max' → logprob: -4.705639839172363
    4. 'find' → logprob: -4.955639839172363
    5. 'solve' → logprob: -5.080639839172363
    6. 'process' → logprob: -5.455639839172363
    7. ' find' → logprob: -6.080639839172363
    8. ' solve' → logprob: -6.330639839172363
    9. 'calculate' → logprob: -6.580639839172363
    10. 'get' → logprob: -6.580639839172363

Token 272: '_idx' (ID: 15257)
  Prédit: '_s'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '_s' → logprob: -0.20508933067321777
    2. '_ans' → logprob: -1.7050893306732178
    3. '(ans' → logprob: -6.705089569091797
    4. '_answer' → logprob: -7.330089569091797
    5. '(s' → logprob: -7.955089569091797
    6. '_' → logprob: -8.205089569091797
    7. 'def' → logprob: -8.330089569091797
    8. '_a' → logprob: -8.455089569091797
    9. 's' → logprob: -8.580089569091797
    10. 'ans' → logprob: -8.705089569091797

Token 273: '(idx' (ID: 42793)
  Prédit: '(idx'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(idx' → logprob: -0.31987231969833374
    2. '(' → logprob: -1.6948723793029785
    3. '(i' → logprob: -2.8198723793029785
    4. '(index' → logprob: -4.3198723793029785
    5. '()' → logprob: -4.9448723793029785
    6. ' (' → logprob: -5.1948723793029785
    7. '(x' → logprob: -6.3198723793029785
    8. '(s' → logprob: -7.1948723793029785
    9. '(a' → logprob: -8.56987190246582
    10. '(_' → logprob: -8.69487190246582

Token 274: '):
' (ID: 1883)
  Prédit: '):'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '):' → logprob: -0.13725818693637848
    2. ',' → logprob: -2.762258291244507
    3. '):
' → logprob: -2.762258291244507
    4. ')' → logprob: -6.887258052825928
    5. ' ):' → logprob: -7.387258052825928
    6. '   ' → logprob: -9.262258529663086
    7. ' ,' → logprob: -9.887258529663086
    8. ' ):
' → logprob: -10.512258529663086
    9. '):
' → logprob: -10.637258529663086
    10. ',
' → logprob: -10.887258529663086

Token 275: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.47771066427230835
    2. 'return' → logprob: -1.7277107238769531
    3. ' return' → logprob: -1.7277107238769531
    4. ' idx' → logprob: -4.102710723876953
    5. 'idx' → logprob: -4.852710723876953
    6. '	return' → logprob: -10.227710723876953
    7. '	idx' → logprob: -11.102710723876953
    8. ' ' → logprob: -11.727710723876953
    9. '(idx' → logprob: -11.852710723876953
    10. '    
' → logprob: -12.477710723876953

Token 276: ' return' (ID: 622)
  Prédit: 'return'
  Correct (stricte): False
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'return' (adapté à ' return') → logprob: -0.20633703470230103
    2. 'idx' → logprob: -2.2063369750976562
    3. ' return' → logprob: -2.7063369750976562
    4. ' idx' → logprob: -4.831336975097656
    5. '   ' → logprob: -6.456336975097656
    6. '	return' → logprob: -12.831336975097656
    7. 'index' → logprob: -13.081336975097656
    8. '	idx' → logprob: -13.331336975097656
    9. '(idx' → logprob: -14.081336975097656
    10. ' ' → logprob: -14.081336975097656

Token 277: ' idx' (ID: 14016)
  Prédit: 'idx'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'idx' → logprob: -0.69315105676651
    2. ' idx' → logprob: -0.69315105676651
    3. '	idx' → logprob: -12.693151473999023
    4. '(idx' → logprob: -14.568151473999023
    5. '[idx' → logprob: -15.818151473999023
    6. 'index' → logprob: -16.568151473999023
    7. '1' → logprob: -17.068151473999023
    8. ' ' → logprob: -17.068151473999023
    9. '_idx' → logprob: -17.943151473999023
    10. '0' → logprob: -18.318151473999023

Token 278: ' +' (ID: 659)
  Prédit: '+'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '+' → logprob: -0.06196824833750725
    2. ' +' → logprob: -2.8119683265686035
    3. '()+' → logprob: -15.436967849731445
    4. '+=' → logprob: -15.811967849731445
    5. '1' → logprob: -16.186967849731445
    6. '+
' → logprob: -16.811967849731445
    7. ' plus' → logprob: -17.061967849731445
    8. '+++' → logprob: -17.186967849731445
    9. ' +
' → logprob: -17.686967849731445
    10. '[' → logprob: -18.186967849731445

Token 279: ' ' (ID: 220)
  Prédit: '1'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '1' → logprob: -0.00014025058771949261
    2. ' ' → logprob: -8.875140190124512
    3. '   ' → logprob: -14.750140190124512
    4. '  ' → logprob: -18.375141143798828
    5. '```' → logprob: -18.750141143798828
    6. '<|end|>' → logprob: -19.625141143798828
    7. '0' → logprob: -20.125141143798828
    8. 'def' → logprob: -20.625141143798828
    9. '2' → logprob: -20.625141143798828
    10. '[' → logprob: -21.125141143798828

Token 280: '1' (ID: 16)
  Prédit: '1'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '1' → logprob: -2.816093228830141e-06
    2. ' ' → logprob: -12.87500286102295
    3. '   ' → logprob: -17.125001907348633
    4. '```' → logprob: -17.500001907348633
    5. '  ' → logprob: -18.250001907348633
    6. '0' → logprob: -18.750001907348633
    7. '<|end|>' → logprob: -19.500001907348633
    8. '2' → logprob: -20.062501907348633
    9. 'def' → logprob: -20.562501907348633
    10. '[' → logprob: -20.625001907348633

Token 281: '

' (ID: 279)
  Prédit: 'def'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'def' → logprob: -0.04631756991147995
    2. '
' → logprob: -3.4213175773620605
    3. '<|end|>' → logprob: -4.5463175773620605
    4. '

' → logprob: -6.6713175773620605
    5. '<|end|>' → logprob: -8.421317100524902
    6. '\' → logprob: -9.046317100524902
    7. '```' → logprob: -9.171317100524902
    8. '\n' → logprob: -9.171317100524902
    9. '#' → logprob: -10.796317100524902
    10. ':def' → logprob: -11.046317100524902

Token 282: 'def' (ID: 1314)
  Prédit: 'def'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'def' → logprob: -0.026663562282919884
    2. '<|end|>' → logprob: -4.651663780212402
    3. '
' → logprob: -5.651663780212402
    4. '#' → logprob: -5.776663780212402
    5. ':' → logprob: -5.776663780212402
    6. 'x' → logprob: -6.276663780212402
    7. '\' → logprob: -6.651663780212402
    8. '\n' → logprob: -6.776663780212402
    9. 'd' → logprob: -7.151663780212402
    10. 'de' → logprob: -7.651663780212402

Token 283: ' process' (ID: 2273)
  Prédit: ' main'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' main' → logprob: -0.02665891870856285
    2. 'main' → logprob: -5.15165901184082
    3. ' def' → logprob: -5.27665901184082
    4. ' get' → logprob: -6.15165901184082
    5. ' set' → logprob: -6.15165901184082
    6. 'def' → logprob: -6.15165901184082
    7. ' find' → logprob: -6.40165901184082
    8. ' range' → logprob: -6.52665901184082
    9. ' increase' → logprob: -7.15165901184082
    10. ' __' → logprob: -7.52665901184082

Token 284: '_inner' (ID: 81672)
  Prédit: '_'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '_' → logprob: -0.33223918080329895
    2. '_array' → logprob: -2.5822391510009766
    3. '(' → logprob: -2.8322391510009766
    4. '_input' → logprob: -3.4572391510009766
    5. '_list' → logprob: -3.9572391510009766
    6. '(a' → logprob: -4.457239151000977
    7. '_(' → logprob: -4.582239151000977
    8. '_data' → logprob: -4.707239151000977
    9. '_sequence' → logprob: -5.082239151000977
    10. '_segment' → logprob: -5.082239151000977

Token 285: '_' (ID: 62)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(' → logprob: -0.8295409679412842
    2. '_loop' → logprob: -1.5795409679412842
    3. '()' → logprob: -1.7045409679412842
    4. '():' → logprob: -2.704540967941284
    5. '_' → logprob: -2.954540967941284
    6. '(x' → logprob: -4.079541206359863
    7. '_range' → logprob: -4.829541206359863
    8. '_window' → logprob: -5.329541206359863
    9. '_block' → logprob: -5.579541206359863
    10. '_list' → logprob: -6.204541206359863

Token 286: 'while' (ID: 7032)
  Prédit: 'loop'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'loop' → logprob: -0.006352838594466448
    2. '_loop' → logprob: -5.75635290145874
    3. 'window' → logprob: -6.75635290145874
    4. 'for' → logprob: -7.38135290145874
    5. '()' → logprob: -8.256352424621582
    6. 'block' → logprob: -8.381352424621582
    7. 'while' → logprob: -8.631352424621582
    8. 'range' → logprob: -9.006352424621582
    9. 'segment' → logprob: -9.381352424621582
    10. 'idx' → logprob: -9.631352424621582

Token 287: '(s' (ID: 1858)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(' → logprob: -0.7534530758857727
    2. '():' → logprob: -1.628453016281128
    3. '(x' → logprob: -1.753453016281128
    4. '()' → logprob: -2.753453016281128
    5. ' (' → logprob: -3.378453016281128
    6. '_' → logprob: -3.753453016281128
    7. ' ():' → logprob: -4.003453254699707
    8. ' ()' → logprob: -4.378453254699707
    9. '(idx' → logprob: -6.253453254699707
    10. '(s' → logprob: -6.503453254699707

Token 288: ',' (ID: 11)
  Prédit: ','
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ',' → logprob: -0.00213788659311831
    2. ' ,' → logprob: -7.127137660980225
    3. 's' → logprob: -8.127138137817383
    4. ',x' → logprob: -8.252138137817383
    5. 'x' → logprob: -8.502138137817383
    6. '):' → logprob: -8.877138137817383
    7. ')' → logprob: -9.127138137817383
    8. ' ' → logprob: -9.752138137817383
    9. ',s' → logprob: -9.877138137817383
    10. '   ' → logprob: -9.877138137817383

Token 289: ' l' (ID: 305)
  Prédit: 'xor'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'xor' → logprob: -0.8758705258369446
    2. 'a' → logprob: -1.1258704662322998
    3. 'idx' → logprob: -1.7508704662322998
    4. ' a' → logprob: -4.000870704650879
    5. 'l' → logprob: -4.125870704650879
    6. ' idx' → logprob: -4.250870704650879
    7. ' xor' → logprob: -4.500870704650879
    8. 'x' → logprob: -5.125870704650879
    9. 's' → logprob: -5.375870704650879
    10. ' l' → logprob: -5.500870704650879

Token 290: ',' (ID: 11)
  Prédit: ','
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ',' → logprob: -0.00020938136731274426
    2. ' ,' → logprob: -9.50020980834961
    3. ',
' → logprob: -9.75020980834961
    4. '):' → logprob: -10.25020980834961
    5. '):
' → logprob: -11.37520980834961
    6. ')' → logprob: -11.87520980834961
    7. ',r' → logprob: -12.25020980834961
    8. 'x' → logprob: -12.75020980834961
    9. '   ' → logprob: -13.00020980834961
    10. ' ' → logprob: -13.12520980834961

Token 291: ' xor' (ID: 106402)
  Prédit: 'r'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'r' → logprob: -0.20011216402053833
    2. 'a' → logprob: -2.2001121044158936
    3. ' r' → logprob: -3.0751121044158936
    4. 'idx' → logprob: -4.450112342834473
    5. ' a' → logprob: -4.825112342834473
    6. 'xor' → logprob: -6.575112342834473
    7. ' idx' → logprob: -6.950112342834473
    8. '   ' → logprob: -7.950112342834473
    9. ')' → logprob: -7.950112342834473
    10. 's' → logprob: -8.075112342834473

Token 292: '_val' (ID: 13694)
  Prédit: '_val'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_val' → logprob: -0.0001818489981815219
    2. 'val' → logprob: -9.500182151794434
    3. ',' → logprob: -9.750182151794434
    4. '_' → logprob: -11.500182151794434
    5. ',val' → logprob: -11.500182151794434
    6. ')' → logprob: -11.625182151794434
    7. ')_' → logprob: -12.375182151794434
    8. ',_' → logprob: -13.000182151794434
    9. '_v' → logprob: -13.125182151794434
    10. '_,' → logprob: -13.250182151794434

Token 293: ',' (ID: 11)
  Prédit: ','
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ',' → logprob: -0.004889077506959438
    2. '):' → logprob: -5.504889011383057
    3. '):
' → logprob: -7.254889011383057
    4. '   ' → logprob: -10.254889488220215
    5. ' ,' → logprob: -10.879889488220215
    6. ',a' → logprob: -11.754889488220215
    7. ',l' → logprob: -11.879889488220215
    8. ')' → logprob: -12.004889488220215
    9. ',x' → logprob: -12.254889488220215
    10. ',
' → logprob: -12.504889488220215

Token 294: ' A' (ID: 355)
  Prédit: 'a'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'a' → logprob: -0.5519441366195679
    2. 'r' → logprob: -1.1769441366195679
    3. ' a' → logprob: -2.9269442558288574
    4. 'idx' → logprob: -3.5519442558288574
    5. ' r' → logprob: -3.6769442558288574
    6. ' idx' → logprob: -5.426944255828857
    7. ')' → logprob: -6.676944255828857
    8. '   ' → logprob: -6.676944255828857
    9. 'l' → logprob: -8.3644437789917
    10. 's' → logprob: -8.6769437789917

Token 295: '):
' (ID: 1883)
  Prédit: ','
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ',' → logprob: -0.22826005518436432
    2. '):' → logprob: -1.7282600402832031
    3. '):
' → logprob: -4.478260040283203
    4. '_elem' → logprob: -5.853260040283203
    5. '_,' → logprob: -6.228260040283203
    6. '_l' → logprob: -6.228260040283203
    7. '_' → logprob: -6.603260040283203
    8. ')' → logprob: -6.603260040283203
    9. ',l' → logprob: -6.978260040283203
    10. ' ):' → logprob: -7.353260040283203

Token 296: '   ' (ID: 271)
  Prédit: ','
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ',' → logprob: -0.49685564637184143
    2. ':' → logprob: -1.496855616569519
    3. '   ' → logprob: -2.1218557357788086
    4. '):' → logprob: -3.7468557357788086
    5. ':
' → logprob: -4.246855735778809
    6. '):
' → logprob: -4.871855735778809
    7. ' :' → logprob: -7.246855735778809
    8. 'while' → logprob: -8.371855735778809
    9. ' while' → logprob: -8.746855735778809
    10. ' ,' → logprob: -9.246855735778809

Token 297: ' while' (ID: 2049)
  Prédit: 'while'
  Correct (stricte): False
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'while' (adapté à ' while') → logprob: -0.08505639433860779
    2. '   ' → logprob: -2.5850563049316406
    3. ' while' → logprob: -5.210056304931641
    4. 'if' → logprob: -7.835056304931641
    5. 'True' → logprob: -9.33505630493164
    6. '	while' → logprob: -9.71005630493164
    7. 'idx' → logprob: -9.83505630493164
    8. 'n' → logprob: -10.71005630493164
    9. '```' → logprob: -11.21005630493164
    10. 'len' → logprob: -11.83505630493164

Token 298: ' s' (ID: 265)
  Prédit: 'l'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'l' → logprob: -0.023914504796266556
    2. 'increase' → logprob: -4.648914337158203
    3. 's' → logprob: -5.023914337158203
    4. ' l' → logprob: -5.273914337158203
    5. 'can' → logprob: -7.273914337158203
    6. 'not' → logprob: -7.523914337158203
    7. '(l' → logprob: -8.898914337158203
    8. '   ' → logprob: -9.148914337158203
    9. 'True' → logprob: -9.273914337158203
    10. ' s' → logprob: -9.398914337158203

Token 299: ':
' (ID: 734)
  Prédit: ' &'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' &' → logprob: -0.1345282346010208
    2. '&' → logprob: -2.884528160095215
    3. 'and' → logprob: -3.384528160095215
    4. ' and' → logprob: -4.384528160095215
    5. '>' → logprob: -4.884528160095215
    6. ' <' → logprob: -5.509528160095215
    7. '!=' → logprob: -5.884528160095215
    8. ' >' → logprob: -6.134528160095215
    9. ' !=' → logprob: -6.259528160095215
    10. '   ' → logprob: -6.384528160095215

Token 300: '       ' (ID: 309)
  Prédit: '       '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '       ' → logprob: -0.13613595068454742
    2. ' and' → logprob: -2.386136054992676
    3. ',' → logprob: -4.886136054992676
    4. 'and' → logprob: -4.886136054992676
    5. ' if' → logprob: -5.386136054992676
    6. '   ' → logprob: -5.386136054992676
    7. '        ' → logprob: -6.136136054992676
    8. '[' → logprob: -6.636136054992676
    9. '<|end|>' → logprob: -6.636136054992676
    10. 'if' → logprob: -6.761136054992676

Token 301: ' s' (ID: 265)
  Prédit: ' if'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' if' → logprob: -1.1098763942718506
    2. '       ' → logprob: -1.4848763942718506
    3. '           ' → logprob: -1.6098763942718506
    4. ' l' → logprob: -2.3598763942718506
    5. ' s' → logprob: -2.7348763942718506
    6. 'if' → logprob: -3.7348763942718506
    7. 's' (adapté à ' s') → logprob: -3.8598763942718506
    8. '   ' → logprob: -4.23487663269043
    9. 'l' → logprob: -4.85987663269043
    10. '        ' → logprob: -5.10987663269043

Token 302: ' =' (ID: 314)
  Prédit: '='
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '=' → logprob: -1.072479248046875
    2. ' &=' → logprob: -1.447479248046875
    3. ' =' → logprob: -1.572479248046875
    4. ',' → logprob: -2.447479248046875
    5. ' &' → logprob: -2.697479248046875
    6. '&' → logprob: -3.572479248046875
    7. ' -=' → logprob: -5.072479248046875
    8. 'and' → logprob: -5.197479248046875
    9. ' and' → logprob: -5.322479248046875
    10. '>' → logprob: -5.572479248046875

Token 303: ' decrease' (ID: 25848)
  Prédit: ' decrease'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' decrease' → logprob: -0.6506640315055847
    2. 'de' → logprob: -0.7756640315055847
    3. 's' → logprob: -4.52566385269165
    4. ' s' → logprob: -5.15066385269165
    5. ' de' → logprob: -7.27566385269165
    6. ' ' → logprob: -9.025664329528809
    7. 'increase' → logprob: -9.150664329528809
    8. ' increase' → logprob: -10.213164329528809
    9. 'xor' → logprob: -10.213164329528809
    10. '(s' → logprob: -10.588164329528809

Token 304: '_s' (ID: 1278)
  Prédit: '_s'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_s' → logprob: -7.386147626675665e-05
    2. '_' → logprob: -9.875073432922363
    3. 's' → logprob: -10.750073432922363
    4. '(s' → logprob: -14.375073432922363
    5. ' _' → logprob: -15.750073432922363
    6. '_(' → logprob: -16.50007438659668
    7. '_
' → logprob: -17.62507438659668
    8. '(_' → logprob: -17.75007438659668
    9. ' s' → logprob: -17.87507438659668
    10. '```' → logprob: -18.00007438659668

Token 305: '(s' (ID: 1858)
  Prédit: '(s'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(s' → logprob: -0.0005583931924775243
    2. '(' → logprob: -7.500558376312256
    3. ' (' → logprob: -12.750558853149414
    4. '(
' → logprob: -13.875558853149414
    5. '```' → logprob: -14.250558853149414
    6. '       ' → logprob: -14.750558853149414
    7. ',' → logprob: -15.625558853149414
    8. 's' → logprob: -16.250558853149414
    9. ')' → logprob: -16.375558853149414
    10. '   ' → logprob: -17.000558853149414

Token 306: ',' (ID: 11)
  Prédit: ','
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ',' → logprob: -0.00018232580623589456
    2. ',A' → logprob: -8.875182151794434
    3. ' ,' → logprob: -10.750182151794434
    4. 'A' → logprob: -11.500182151794434
    5. ',
' → logprob: -12.250182151794434
    6. ')' → logprob: -13.250182151794434
    7. ',a' → logprob: -13.625182151794434
    8. '   ' → logprob: -14.125182151794434
    9. 'a' → logprob: -14.625182151794434
    10. '```' → logprob: -15.000182151794434

Token 307: ' A' (ID: 355)
  Prédit: ' A'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' A' → logprob: -0.47413772344589233
    2. 'A' → logprob: -0.9741377234458923
    3. 'a' → logprob: -10.849137306213379
    4. ' ' → logprob: -11.599137306213379
    5. ' a' → logprob: -11.849137306213379
    6. '	A' → logprob: -12.099137306213379
    7. '   ' → logprob: -12.224137306213379
    8. '=A' → logprob: -12.349137306213379
    9. '(A' → logprob: -13.661637306213379
    10. ' ' → logprob: -13.974137306213379

Token 308: '[l' (ID: 38286)
  Prédit: '[l'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '[l' → logprob: -0.001706367009319365
    2. '[' → logprob: -7.251706600189209
    3. 'l' → logprob: -7.376706600189209
    4. '[in' → logprob: -8.00170612335205
    5. '	l' → logprob: -11.12670612335205
    6. '[
' → logprob: -12.00170612335205
    7. '   ' → logprob: -13.25170612335205
    8. ' [' → logprob: -13.37670612335205
    9. '
' → logprob: -13.87670612335205
    10. '[left' → logprob: -14.00170612335205

Token 309: '])
' (ID: 5169)
  Prédit: '])'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '])' → logprob: -0.06688974797725677
    2. '])
' → logprob: -3.191889762878418
    3. '[l' → logprob: -3.816889762878418
    4. 'l' → logprob: -7.816889762878418
    5. '[' → logprob: -7.941889762878418
    6. ' ])' → logprob: -8.066889762878418
    7. ']' → logprob: -8.441889762878418
    8. ')' → logprob: -9.191889762878418
    9. ' ])
' → logprob: -9.691889762878418
    10. '])

' → logprob: -10.066889762878418

Token 310: '       ' (ID: 309)
  Prédit: '       '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '       ' → logprob: -0.0007565005216747522
    2. '        ' → logprob: -8.12575626373291
    3. '	' → logprob: -9.37575626373291
    4. 'l' → logprob: -9.62575626373291
    5. '   ' → logprob: -9.87575626373291
    6. ',' → logprob: -10.00075626373291
    7. ' ' → logprob: -10.25075626373291
    8. ',l' → logprob: -10.25075626373291
    9. '	l' → logprob: -10.50075626373291
    10. '<|end|>' → logprob: -10.50075626373291

Token 311: ' xor' (ID: 106402)
  Prédit: 'l'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'l' → logprob: -0.1553286612033844
    2. '       ' → logprob: -2.0303287506103516
    3. 'xor' (adapté à ' xor') → logprob: -4.905328750610352
    4. '   ' → logprob: -5.780328750610352
    5. 'x' → logprob: -6.655328750610352
    6. ' l' → logprob: -7.655328750610352
    7. '	l' → logprob: -9.030328750610352
    8. ' ' → logprob: -10.280328750610352
    9. ' xor' → logprob: -10.280328750610352
    10. '
' → logprob: -10.655328750610352

Token 312: '_val' (ID: 13694)
  Prédit: '_val'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_val' → logprob: -0.00014454191841650754
    2. 'val' → logprob: -9.125144958496094
    3. '_' → logprob: -10.500144958496094
    4. '_remove' → logprob: -12.500144958496094
    5. '_value' → logprob: -13.500144958496094
    6. 'Val' → logprob: -13.625144958496094
    7. '_v' → logprob: -15.250144958496094
    8. 'remove' → logprob: -15.625144958496094
    9. ' _' → logprob: -15.625144958496094
    10. '_rem' → logprob: -16.125144958496094

Token 313: ' =' (ID: 314)
  Prédit: ' ='
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' =' → logprob: -0.4778885245323181
    2. '=' → logprob: -0.9778885245323181
    3. ' ^=' → logprob: -5.727888584136963
    4. ',' → logprob: -7.852888584136963
    5. ' ' → logprob: -9.727888107299805
    6. '^' → logprob: -9.727888107299805
    7. ' ^' → logprob: -10.602888107299805
    8. ' ,' → logprob: -11.852888107299805
    9. ' |=' → logprob: -13.477888107299805
    10. ')' → logprob: -13.477888107299805

Token 314: ' xor' (ID: 106402)
  Prédit: 'xor'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'xor' → logprob: -0.25203999876976013
    2. ' xor' → logprob: -1.5020400285720825
    3. 'update' → logprob: -9.752039909362793
    4. ' update' → logprob: -10.002039909362793
    5. ' ' → logprob: -12.752039909362793
    6. 'x' → logprob: -13.627039909362793
    7. '   ' → logprob: -14.002039909362793
    8. '
' → logprob: -15.127039909362793
    9. '```' → logprob: -15.127039909362793
    10. 'increase' → logprob: -15.377039909362793

Token 315: '_remove' (ID: 41629)
  Prédit: '_val'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_val' → logprob: -0.0010818752925843
    2. 'val' → logprob: -7.376081943511963
    3. '_remove' → logprob: -7.751081943511963
    4. 'al' → logprob: -11.626081466674805
    5. 'xor' → logprob: -12.001081466674805
    6. '_' → logprob: -12.376081466674805
    7. 'remove' → logprob: -12.876081466674805
    8. 'or' → logprob: -14.876081466674805
    9. '_value' → logprob: -15.126081466674805
    10. '	val' → logprob: -15.251081466674805

Token 316: '(x' (ID: 4061)
  Prédit: '(x'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(x' → logprob: -0.0036061247810721397
    2. '(' → logprob: -5.62860631942749
    3. '(
' → logprob: -13.003605842590332
    4. 'xor' → logprob: -13.003605842590332
    5. 'x' → logprob: -14.128605842590332
    6. ' (' → logprob: -15.003605842590332
    7. '```' → logprob: -15.628605842590332
    8. ' ' → logprob: -16.12860679626465
    9. ' xor' → logprob: -17.12860679626465
    10. '(xhr' → logprob: -17.12860679626465

Token 317: 'or' (ID: 267)
  Prédit: '_val'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_val' → logprob: -0.09009646624326706
    2. 'or' → logprob: -2.8400964736938477
    3. 'val' → logprob: -3.7150964736938477
    4. 'al' → logprob: -5.965096473693848
    5. 'xor' → logprob: -7.340096473693848
    6. 'r' → logprob: -9.090096473693848
    7. '_var' → logprob: -11.965096473693848
    8. 'ar' → logprob: -12.090096473693848
    9. 'v' → logprob: -12.215096473693848
    10. 'o' → logprob: -12.215096473693848

Token 318: '_val' (ID: 13694)
  Prédit: '_val'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_val' → logprob: -0.003180921310558915
    2. 'val' → logprob: -5.753180980682373
    3. '_' → logprob: -14.628180503845215
    4. '   ' → logprob: -15.253180503845215
    5. '_value' → logprob: -15.253180503845215
    6. 'Val' → logprob: -15.503180503845215
    7. '	val' → logprob: -15.503180503845215
    8. '[val' → logprob: -15.503180503845215
    9. '_var' → logprob: -15.628180503845215
    10. '_VAL' → logprob: -16.00318145751953

Token 319: ',' (ID: 11)
  Prédit: ','
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ',' → logprob: -4.5252596464706585e-05
    2. ',A' → logprob: -10.250044822692871
    3. ' ,' → logprob: -12.375044822692871
    4. 'A' → logprob: -12.875044822692871
    5. ',
' → logprob: -13.000044822692871
    6. ')' → logprob: -15.125044822692871
    7. '),' → logprob: -16.000045776367188
    8. 's' → logprob: -16.375045776367188
    9. '```' → logprob: -16.875045776367188
    10. '(A' → logprob: -17.125045776367188

Token 320: ' A' (ID: 355)
  Prédit: 'A'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'A' → logprob: -0.0076081594452261925
    2. ' A' → logprob: -4.882607936859131
    3. ')' → logprob: -14.382608413696289
    4. ' ' → logprob: -15.507608413696289
    5. '   ' → logprob: -15.507608413696289
    6. '	A' → logprob: -15.757608413696289
    7. '(A' → logprob: -15.757608413696289
    8. '[A' → logprob: -15.882608413696289
    9. '=A' → logprob: -16.25760841369629
    10. 'a' → logprob: -16.88260841369629

Token 321: '[l' (ID: 38286)
  Prédit: '[l'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '[l' → logprob: -0.0003519086167216301
    2. 'l' → logprob: -8.125351905822754
    3. '[' → logprob: -10.000351905822754
    4. '[
' → logprob: -11.625351905822754
    5. '	l' → logprob: -14.000351905822754
    6. '```' → logprob: -16.12535285949707
    7. ']' → logprob: -16.25035285949707
    8. ' [' → logprob: -16.37535285949707
    9. '(l' → logprob: -16.50035285949707
    10. '   ' → logprob: -16.62535285949707

Token 322: '])
' (ID: 5169)
  Prédit: '])'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '])' → logprob: -0.47489258646965027
    2. '])
' → logprob: -0.9748926162719727
    3. '[l' → logprob: -8.099892616271973
    4. ')
' → logprob: -8.224892616271973
    5. ')' → logprob: -9.099892616271973
    6. ']' → logprob: -10.349892616271973
    7. '])

' → logprob: -10.849892616271973
    8. '])
' → logprob: -10.974892616271973
    9. ' ])
' → logprob: -10.974892616271973
    10. '[' → logprob: -10.974892616271973

Token 323: '       ' (ID: 309)
  Prédit: '       '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '       ' → logprob: -0.00036655968870036304
    2. '   ' → logprob: -8.3753662109375
    3. 'l' → logprob: -9.2503662109375
    4. ' l' → logprob: -10.8753662109375
    5. '	l' → logprob: -11.3753662109375
    6. '      ' → logprob: -13.1253662109375
    7. '	' → logprob: -13.3753662109375
    8. '	   ' → logprob: -13.7503662109375
    9. ' ' → logprob: -13.8753662109375
    10. '     ' → logprob: -14.1253662109375

Token 324: ' l' (ID: 305)
  Prédit: 'l'
  Correct (stricte): False
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'l' (adapté à ' l') → logprob: -0.25422796607017517
    2. '       ' → logprob: -1.5042279958724976
    3. ' l' → logprob: -6.379228115081787
    4. '   ' → logprob: -8.379227638244629
    5. '	l' → logprob: -8.629227638244629
    6. '	' → logprob: -8.879227638244629
    7. '	   ' → logprob: -11.004227638244629
    8. ',l' → logprob: -11.504227638244629
    9. ' ' → logprob: -12.004227638244629
    10. '           ' → logprob: -12.129227638244629

Token 325: ' =' (ID: 314)
  Prédit: '='
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '=' → logprob: -0.0201907679438591
    2. ' =' → logprob: -4.270190715789795
    3. '+=' → logprob: -5.145190715789795
    4. ' +=' → logprob: -8.645191192626953
    5. '    ' → logprob: -13.395191192626953
    6. ',' → logprob: -14.145191192626953
    7. '   ' → logprob: -14.270191192626953
    8. '+' → logprob: -14.645191192626953
    9. ' ' → logprob: -14.770191192626953
    10. '```' → logprob: -15.020191192626953

Token 326: ' increase' (ID: 7064)
  Prédit: 'increase'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'increase' → logprob: -0.0007115975022315979
    2. ' increase' → logprob: -7.250711441040039
    3. 'in' → logprob: -14.250711441040039
    4. 'l' → logprob: -14.625711441040039
    5. 'increment' → logprob: -15.250711441040039
    6. '   ' → logprob: -15.375711441040039
    7. '    ' → logprob: -17.12571144104004
    8. ' ' → logprob: -18.50071144104004
    9. 'Increase' → logprob: -18.62571144104004
    10. '  ' → logprob: -19.12571144104004

Token 327: '_idx' (ID: 15257)
  Prédit: '_idx'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_idx' → logprob: -0.1270301640033722
    2. 'idx' → logprob: -2.12703013420105
    3. 'l' → logprob: -9.252030372619629
    4. 'Idx' → logprob: -12.377030372619629
    5. '(idx' → logprob: -14.627030372619629
    6. '	idx' → logprob: -15.127030372619629
    7. 'index' → logprob: -15.252030372619629
    8. '_IDX' → logprob: -15.377030372619629
    9. 'x' → logprob: -15.502030372619629
    10. '_' → logprob: -16.252029418945312

Token 328: '(l' (ID: 4179)
  Prédit: '(l'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(l' → logprob: -0.00012439649435691535
    2. '(' → logprob: -9.000123977661133
    3. 'l' → logprob: -14.000123977661133
    4. '(
' → logprob: -16.500123977661133
    5. ' (' → logprob: -17.000123977661133
    6. '	l' → logprob: -18.250123977661133
    7. '(i' → logprob: -19.625123977661133
    8. '(

' → logprob: -21.000123977661133
    9. '(n' → logprob: -21.125123977661133
    10. ' l' → logprob: -21.250123977661133

Token 329: ')
' (ID: 446)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')' → logprob: -0.000977075076662004
    2. ')
' → logprob: -7.000977039337158
    3. '       ' → logprob: -10.625977516174316
    4. ' )' → logprob: -11.000977516174316
    5. ')return' → logprob: -11.875977516174316
    6. '   ' → logprob: -11.875977516174316
    7. '<|end|>' → logprob: -12.000977516174316
    8. ')

' → logprob: -13.500977516174316
    9. '())' → logprob: -14.000977516174316
    10. '	' → logprob: -15.000977516174316

Token 330: '   ' (ID: 271)
  Prédit: ''
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False

Token 331: ' return' (ID: 622)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.5114712119102478
    2. '<|end|>' → logprob: -1.7614712715148926
    3. ' return' → logprob: -1.8864712715148926
    4. ' ' → logprob: -3.7614712715148926
    5. '       ' → logprob: -4.011471271514893
    6. 'return' (adapté à ' return') → logprob: -4.136471271514893
    7. '	return' → logprob: -4.511471271514893
    8. '
' → logprob: -6.011471271514893
    9. '    ' → logprob: -6.386471271514893
    10. ' 
' → logprob: -6.761471271514893

Token 332: ' l' (ID: 305)
  Prédit: ' l'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' l' → logprob: -0.2257753610610962
    2. ' s' → logprob: -2.3507752418518066
    3. 'l' → logprob: -2.7257752418518066
    4. 's' → logprob: -3.2257752418518066
    5. ' ' → logprob: -7.475775241851807
    6. ' (' → logprob: -7.725775241851807
    7. '(l' → logprob: -8.225775718688965
    8. '(s' → logprob: -8.475775718688965
    9. '(' → logprob: -10.100775718688965
    10. '	l' → logprob: -10.850775718688965

Token 333: ',' (ID: 11)
  Prédit: 'def'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'def' → logprob: -0.5261539220809937
    2. '<|end|>' → logprob: -0.9011539220809937
    3. '
' → logprob: -6.651154041290283
    4. '<|end|>' → logprob: -6.901154041290283
    5. ',' → logprob: -8.151153564453125
    6. ' def' → logprob: -8.401153564453125
    7. ')' → logprob: -9.651153564453125
    8. '  
' → logprob: -10.901153564453125
    9. '_' → logprob: -10.901153564453125
    10. '#' → logprob: -11.401153564453125

Token 334: ' xor' (ID: 106402)
  Prédit: 'xor'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'xor' → logprob: -0.567706823348999
    2. 's' → logprob: -1.192706823348999
    3. ' xor' → logprob: -2.192706823348999
    4. ' s' → logprob: -4.067707061767578
    5. ' ' → logprob: -7.817707061767578
    6. '0' → logprob: -8.192707061767578
    7. 'x' → logprob: -8.817707061767578
    8. '(s' → logprob: -10.880207061767578
    9. 'l' → logprob: -10.942707061767578
    10. ' x' → logprob: -11.067707061767578

Token 335: '_val' (ID: 13694)
  Prédit: '_val'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_val' → logprob: -2.1888679839321412e-05
    2. 'val' → logprob: -10.750021934509277
    3. '_' → logprob: -15.500021934509277
    4. '_v' → logprob: -15.750021934509277
    5. '_value' → logprob: -16.75002098083496
    6. '_var' → logprob: -17.37502098083496
    7. 'v' → logprob: -17.37502098083496
    8. ' _' → logprob: -17.87502098083496
    9. '_VAL' → logprob: -18.37502098083496
    10. '_va' → logprob: -19.62502098083496

Token 336: '

' (ID: 279)
  Prédit: 'def'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'def' → logprob: -0.4982154965400696
    2. '<|end|>' → logprob: -0.9982154965400696
    3. '
' → logprob: -3.873215436935425
    4. '

' → logprob: -6.623215675354004
    5. '<|end|>' → logprob: -6.748215675354004
    6. ' def' → logprob: -8.248215675354004
    7. ',' → logprob: -8.873215675354004
    8. '  
' → logprob: -10.248215675354004
    9. '\n' → logprob: -11.123215675354004
    10. '```' → logprob: -11.373215675354004

Token 337: 'def' (ID: 1314)
  Prédit: 'def'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'def' → logprob: -0.22776788473129272
    2. '<|end|>' → logprob: -1.9777679443359375
    3. '
' → logprob: -3.3527679443359375
    4. ' def' → logprob: -4.1027679443359375
    5. ',' → logprob: -5.6027679443359375
    6. ' ' → logprob: -6.1027679443359375
    7. '<|end|>' → logprob: -6.2277679443359375
    8. ':' → logprob: -7.1027679443359375
    9. ')' → logprob: -7.2277679443359375
    10. '[' → logprob: -7.4777679443359375

Token 338: ' solve' (ID: 17722)
  Prédit: ' main'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' main' → logprob: -0.605233907699585
    2. ' process' → logprob: -1.855233907699585
    3. ' solve' → logprob: -1.980233907699585
    4. ' find' → logprob: -2.980233907699585
    5. 'main' → logprob: -3.605233907699585
    6. 'solve' → logprob: -3.855233907699585
    7. ' count' → logprob: -4.230234146118164
    8. 'process' → logprob: -4.355234146118164
    9. ' calculate' → logprob: -4.855234146118164
    10. 'count' → logprob: -5.855234146118164

Token 339: '():
' (ID: 8595)
  Prédit: '():'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '():' → logprob: -0.00020592445798683912
    2. '():
' → logprob: -8.750205993652344
    3. ' ():' → logprob: -10.250205993652344
    4. '(A' → logprob: -12.000205993652344
    5. '(' → logprob: -12.750205993652344
    6. '()' → logprob: -13.000205993652344
    7. '(a' → logprob: -15.125205993652344
    8. '()(' → logprob: -16.375205993652344
    9. '():

' → logprob: -16.375205993652344
    10. '():
' → logprob: -16.375205993652344

Token 340: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.01384800672531128
    2. ' n' → logprob: -4.513847827911377
    3. 'n' → logprob: -6.138847827911377
    4. ' A' → logprob: -7.638847827911377
    5. 'A' → logprob: -9.138848304748535
    6. '	n' → logprob: -11.013848304748535
    7. '   ' → logprob: -11.763848304748535
    8. '()' → logprob: -12.013848304748535
    9. '(n' → logprob: -12.138848304748535
    10. ' l' → logprob: -13.138848304748535

Token 341: ' set' (ID: 920)
  Prédit: 'n'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'n' → logprob: -0.11912792921066284
    2. 'N' → logprob: -2.2441279888153076
    3. '   ' → logprob: -5.1191277503967285
    4. ' n' → logprob: -8.994128227233887
    5. '#' → logprob: -9.619128227233887
    6. ' N' → logprob: -10.494128227233887
    7. ' ' → logprob: -11.119128227233887
    8. 'l' → logprob: -11.494128227233887
    9. '_n' → logprob: -11.494128227233887
    10. '
' → logprob: -11.869128227233887

Token 342: '_rec' (ID: 35314)
  Prédit: '_rec'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_rec' → logprob: -0.0002646735229063779
    2. '_' → logprob: -8.250265121459961
    3. '_recursive' → logprob: -13.500265121459961
    4. 'rec' → logprob: -14.250265121459961
    5. '_rep' → logprob: -14.875265121459961
    6. ' _' → logprob: -15.250265121459961
    7. '_re' → logprob: -16.12526512145996
    8. '(rec' → logprob: -16.25026512145996
    9. '_REC' → logprob: -16.62526512145996
    10. '_rest' → logprob: -16.62526512145996

Token 343: 'ursion' (ID: 41658)
  Prédit: 'ursion'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'ursion' → logprob: -4.1557283111615106e-05
    2. 'urs' → logprob: -10.125041961669922
    3. 'ursive' → logprob: -14.375041961669922
    4. 'rs' → logprob: -15.500041961669922
    5. '   ' → logprob: -15.625041961669922
    6. '```' → logprob: -16.000041961669922
    7. '
' → logprob: -16.375041961669922
    8. '_' → logprob: -16.750041961669922
    9. 'ursor' → logprob: -17.125041961669922
    10. 'ur' → logprob: -17.750041961669922

Token 344: '_limit' (ID: 34361)
  Prédit: '_limit'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_limit' → logprob: -5.438573680294212e-06
    2. 'limit' → logprob: -12.250005722045898
    3. '_limits' → logprob: -14.875005722045898
    4. '_lim' → logprob: -16.6250057220459
    5. '_LIMIT' → logprob: -16.7500057220459
    6. ' _' → logprob: -17.8750057220459
    7. 'Limit' → logprob: -18.1250057220459
    8. '_' → logprob: -18.7500057220459
    9. 'imit' → logprob: -18.8750057220459
    10. '(limit' → logprob: -18.8750057220459

Token 345: '()
' (ID: 1234)
  Prédit: '()'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '()' → logprob: -9.543733904138207e-05
    2. '()
' → logprob: -9.62509536743164
    3. '(' → logprob: -10.87509536743164
    4. '();' → logprob: -12.37509536743164
    5. ' ()' → logprob: -12.75009536743164
    6. '()

' → logprob: -13.50009536743164
    7. '()<' → logprob: -14.75009536743164
    8. '())' → logprob: -14.87509536743164
    9. '()`' → logprob: -15.62509536743164
    10. ')' → logprob: -15.87509536743164

Token 346: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.00034118397161364555
    2. 'A' → logprob: -8.375341415405273
    3. '    
' → logprob: -9.875341415405273
    4. 'n' → logprob: -10.625341415405273
    5. 'a' → logprob: -11.125341415405273
    6. ' A' → logprob: -11.625341415405273
    7. '
' → logprob: -12.500341415405273
    8. 'import' → logprob: -13.250341415405273
    9. '    ' → logprob: -13.500341415405273
    10. '```' → logprob: -14.250341415405273

Token 347: ' INF' (ID: 69196)
  Prédit: 'n'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'n' → logprob: -0.32233619689941406
    2. 'N' → logprob: -1.322336196899414
    3. '   ' → logprob: -5.072336196899414
    4. 'l' → logprob: -6.947336196899414
    5. ' n' → logprob: -7.697336196899414
    6. 'A' → logprob: -8.197336196899414
    7. 't' → logprob: -8.572336196899414
    8. ' N' → logprob: -8.822336196899414
    9. 's' → logprob: -8.947336196899414
    10. '#' → logprob: -9.447336196899414

Token 348: ' =' (ID: 314)
  Prédit: ' ='
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' =' → logprob: -0.0024826733861118555
    2. '=' → logprob: -6.002482891082764
    3. '   ' → logprob: -13.002482414245605
    4. '_' → logprob: -13.002482414245605
    5. ',' → logprob: -13.252482414245605
    6. '	' → logprob: -15.752482414245605
    7. '＝' → logprob: -16.377483367919922
    8. ')' → logprob: -16.627483367919922
    9. ' =
' → logprob: -16.627483367919922
    10. ' ' → logprob: -16.627483367919922

Token 349: ' get' (ID: 717)
  Prédit: 'get'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'get' → logprob: -0.003264338243752718
    2. ' get' → logprob: -5.753264427185059
    3. '10' → logprob: -9.378264427185059
    4. ' ' → logprob: -13.753264427185059
    5. '   ' → logprob: -14.128264427185059
    6. '	get' → logprob: -15.753264427185059
    7. '  ' → logprob: -17.128263473510742
    8. '100' → logprob: -17.253263473510742
    9. '1' → logprob: -17.378263473510742
    10. 'float' → logprob: -17.628263473510742

Token 350: '_inf' (ID: 107309)
  Prédit: '_inf'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_inf' → logprob: -1.1472419600977446e-06
    2. 'inf' → logprob: -14.125000953674316
    3. '_mod' → logprob: -15.500000953674316
    4. '_' → logprob: -16.500001907348633
    5. '_int' → logprob: -17.250001907348633
    6. '_in' → logprob: -17.375001907348633
    7. '_INF' → logprob: -17.625001907348633
    8. '_ind' → logprob: -19.750001907348633
    9. ' _' → logprob: -20.000001907348633
    10. '_inst' → logprob: -20.125001907348633

Token 351: '()
' (ID: 1234)
  Prédit: '()'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '()' → logprob: -0.3133566975593567
    2. '()
' → logprob: -1.313356637954712
    3. '()
' → logprob: -9.563356399536133
    4. '()

' → logprob: -10.938356399536133
    5. '   ' → logprob: -12.313356399536133
    6. ' ()' → logprob: -14.438356399536133
    7. '())' → logprob: -14.938356399536133
    8. '()\' → logprob: -15.188356399536133
    9. '(' → logprob: -15.438356399536133
    10. ' ()
' → logprob: -15.563356399536133

Token 352: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.0036783369723707438
    2. 'A' → logprob: -7.003678321838379
    3. 'n' → logprob: -7.003678321838379
    4. 'ans' → logprob: -8.003678321838379
    5. 'mod' → logprob: -8.128678321838379
    6. 'MOD' → logprob: -8.378678321838379
    7. ' ans' → logprob: -8.628678321838379
    8. ' A' → logprob: -8.753678321838379
    9. 'a' → logprob: -8.753678321838379
    10. '
' → logprob: -9.503678321838379

Token 353: ' MOD' (ID: 32868)
  Prédit: 'n'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'n' → logprob: -1.0463364124298096
    2. 'N' → logprob: -1.1713364124298096
    3. 'mod' → logprob: -1.7963364124298096
    4. 'MOD' (adapté à ' MOD') → logprob: -2.1713364124298096
    5. 'ans' → logprob: -3.0463364124298096
    6. 'A' → logprob: -5.2963361740112305
    7. 'l' → logprob: -6.0463361740112305
    8. 'a' → logprob: -6.5463361740112305
    9. '   ' → logprob: -7.1713361740112305
    10. 'input' → logprob: -7.6713361740112305

Token 354: ' =' (ID: 314)
  Prédit: '='
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '=' → logprob: -0.694402813911438
    2. ' =' → logprob: -0.694402813911438
    3. '()' → logprob: -6.694402694702148
    4. '(' → logprob: -12.319402694702148
    5. ',' → logprob: -12.319402694702148
    6. '   ' → logprob: -12.444402694702148
    7. ')' → logprob: -13.569402694702148
    8. ' ' → logprob: -14.194402694702148
    9. '	' → logprob: -14.444402694702148
    10. ':' → logprob: -14.444402694702148

Token 355: ' get' (ID: 717)
  Prédit: 'get'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'get' → logprob: -0.06196824833750725
    2. ' get' → logprob: -2.8119683265686035
    3. '10' → logprob: -14.811967849731445
    4. ' ' → logprob: -15.686967849731445
    5. '(get' → logprob: -17.561967849731445
    6. '	get' → logprob: -17.936967849731445
    7. '  ' → logprob: -19.186967849731445
    8. '   ' → logprob: -19.436967849731445
    9. '=get' → logprob: -19.436967849731445
    10. '_get' → logprob: -19.811967849731445

Token 356: '_mod' (ID: 15325)
  Prédit: '_mod'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_mod' → logprob: -9.088346359931165e-07
    2. 'mod' → logprob: -14.375000953674316
    3. '_mode' → logprob: -15.750000953674316
    4. '_' → logprob: -16.25
    5. ' _' → logprob: -18.125
    6. '_MOD' → logprob: -18.375
    7. '_m' → logprob: -18.375
    8. '_inf' → logprob: -19.125
    9. ' mod' → logprob: -20.5
    10. ' ' → logprob: -20.625

Token 357: '()
' (ID: 1234)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.13272881507873535
    2. '
' → logprob: -2.3827288150787354
    3. '    
' → logprob: -3.6327288150787354
    4. '<|end|>' → logprob: -5.507728576660156
    5. '<|end|>' → logprob: -8.132728576660156
    6. '	
' → logprob: -8.507728576660156
    7. '#' → logprob: -8.632728576660156
    8. '```' → logprob: -8.882728576660156
    9. ',' → logprob: -9.132728576660156
    10. '()' → logprob: -9.132728576660156

Token 358: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.0017200425500050187
    2. '    
' → logprob: -6.501719951629639
    3. '
' → logprob: -9.251720428466797
    4. '    ' → logprob: -9.876720428466797
    5. 'A' → logprob: -10.876720428466797
    6. 'a' → logprob: -11.626720428466797
    7. ' A' → logprob: -11.626720428466797
    8. '```' → logprob: -11.626720428466797
    9. 'n' → logprob: -12.501720428466797
    10. '       ' → logprob: -12.626720428466797

Token 359: ' N' (ID: 478)
  Prédit: 'n'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'n' → logprob: -0.5395346283912659
    2. 'N' (adapté à ' N') → logprob: -0.9145346283912659
    3. '   ' → logprob: -4.164534568786621
    4. '
' → logprob: -8.914534568786621
    5. '#' → logprob: -9.289534568786621
    6. 't' → logprob: -9.414534568786621
    7. 'l' → logprob: -9.414534568786621
    8. ' n' → logprob: -9.789534568786621
    9. '    
' → logprob: -9.914534568786621
    10. ' N' → logprob: -10.289534568786621

Token 360: ' =' (ID: 314)
  Prédit: ','
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ',' → logprob: -0.5085614323616028
    2. ' =' → logprob: -1.008561372756958
    3. '=' → logprob: -3.508561372756958
    4. ' ,' → logprob: -5.633561611175537
    5. ',N' → logprob: -8.758561134338379
    6. ' ' → logprob: -8.758561134338379
    7. ',n' → logprob: -11.508561134338379
    8. ')' → logprob: -11.758561134338379
    9. '=int' → logprob: -11.883561134338379
    10. '    ' → logprob: -12.133561134338379

Token 361: ' read' (ID: 1729)
  Prédit: ' read'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' read' → logprob: -0.16168631613254547
    2. 'read' → logprob: -2.036686420440674
    3. ' int' → logprob: -4.286686420440674
    4. 'int' → logprob: -5.286686420440674
    5. ' ' → logprob: -11.911685943603516
    6. ' li' → logprob: -12.411685943603516
    7. 'li' → logprob: -12.536685943603516
    8. '	read' → logprob: -12.536685943603516
    9. ' len' → logprob: -14.411685943603516
    10. '   ' → logprob: -14.411685943603516

Token 362: '_int' (ID: 12285)
  Prédit: '()'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '()' → logprob: -0.001402848749421537
    2. '()
' → logprob: -6.626402854919434
    3. 'int' → logprob: -10.751402854919434
    4. ' ()' → logprob: -11.001402854919434
    5. '())' → logprob: -11.501402854919434
    6. '_int' → logprob: -12.376402854919434
    7. '()<' → logprob: -12.501402854919434
    8. '()\' → logprob: -12.876402854919434
    9. '_' → logprob: -13.001402854919434
    10. '().' → logprob: -13.126402854919434

Token 363: '()
' (ID: 1234)
  Prédit: '()'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '()' → logprob: -0.02659752033650875
    2. '()
' → logprob: -3.651597499847412
    3. '   ' → logprob: -8.15159797668457
    4. '()\' → logprob: -13.02659797668457
    5. ' ()' → logprob: -13.15159797668457
    6. '())' → logprob: -13.77659797668457
    7. '()
' → logprob: -13.90159797668457
    8. ')' → logprob: -14.52659797668457
    9. '()<' → logprob: -15.15159797668457
    10. '(' → logprob: -15.15159797668457

Token 364: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.007900102995336056
    2. 'A' → logprob: -5.132900238037109
    3. ' A' → logprob: -6.257900238037109
    4. '	A' → logprob: -10.25790023803711
    5. '
' → logprob: -12.00790023803711
    6. '    
' → logprob: -12.50790023803711
    7. '   ' → logprob: -12.63290023803711
    8. '  ' → logprob: -13.63290023803711
    9. ' ' → logprob: -13.88290023803711
    10. '```' → logprob: -14.00790023803711

Token 365: ' A' (ID: 355)
  Prédit: 'A'
  Correct (stricte): False
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'A' (adapté à ' A') → logprob: -0.00019936825265176594
    2. '   ' → logprob: -8.875199317932129
    3. ' A' → logprob: -10.125199317932129
    4. 'a' → logprob: -11.000199317932129
    5. '
' → logprob: -14.625199317932129
    6. '	A' → logprob: -14.750199317932129
    7. '    
' → logprob: -14.875199317932129
    8. '```' → logprob: -15.125199317932129
    9. 's' → logprob: -15.625199317932129
    10. 'def' → logprob: -15.750199317932129

Token 366: ' =' (ID: 314)
  Prédit: ' ='
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' =' → logprob: -0.22565826773643494
    2. '=' → logprob: -1.6006582975387573
    3. ',' → logprob: -8.350658416748047
    4. ' ' → logprob: -13.225658416748047
    5. ' =
' → logprob: -13.350658416748047
    6. ' =[' → logprob: -13.475658416748047
    7. '=[]' → logprob: -13.850658416748047
    8. ')' → logprob: -13.975658416748047
    9. '[' → logprob: -14.725658416748047
    10. ' ,' → logprob: -14.850658416748047

Token 367: ' li' (ID: 3476)
  Prédit: 'li'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'li' → logprob: -0.10330452769994736
    2. ' li' → logprob: -2.478304624557495
    3. 'list' → logprob: -4.728304386138916
    4. 'get' → logprob: -6.103304386138916
    5. ' list' → logprob: -6.228304386138916
    6. ' get' → logprob: -6.978304386138916
    7. '[' → logprob: -8.853304862976074
    8. ' [' → logprob: -9.228304862976074
    9. '[get' → logprob: -11.853304862976074
    10. '   ' → logprob: -11.978304862976074

Token 368: '_input' (ID: 12507)
  Prédit: '_input'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_input' → logprob: -3.643152740551159e-05
    2. 'input' → logprob: -10.500036239624023
    3. 'put' → logprob: -12.000036239624023
    4. 'n' → logprob: -13.625036239624023
    5. '_' → logprob: -14.750036239624023
    6. '_output' → logprob: -14.875036239624023
    7. ' _' → logprob: -15.125036239624023
    8. '[_' → logprob: -16.250036239624023
    9. '_put' → logprob: -16.750036239624023
    10. '_INPUT' → logprob: -16.875036239624023

Token 369: '()
' (ID: 1234)
  Prédit: '()'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '()' → logprob: -0.0036071976646780968
    2. '()
' → logprob: -5.628607273101807
    3. '   ' → logprob: -12.628606796264648
    4. '()

' → logprob: -13.753606796264648
    5. '())' → logprob: -14.503606796264648
    6. '()\' → logprob: -14.503606796264648
    7. '()]' → logprob: -14.878606796264648
    8. '()
' → logprob: -15.128606796264648
    9. '()<' → logprob: -15.128606796264648
    10. '();' → logprob: -15.378606796264648

Token 370: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.0011245026253163815
    2. ' ans' → logprob: -8.001124382019043
    3. ' l' → logprob: -8.376124382019043
    4. 'l' → logprob: -8.376124382019043
    5. '```' → logprob: -9.001124382019043
    6. 'ans' → logprob: -9.251124382019043
    7. '
' → logprob: -9.876124382019043
    8. '    
' → logprob: -10.626124382019043
    9. 'idx' → logprob: -12.251124382019043
    10. '	ans' → logprob: -12.251124382019043

Token 371: ' A' (ID: 355)
  Prédit: 'ans'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'ans' → logprob: -0.25573235750198364
    2. 'l' → logprob: -1.6307322978973389
    3. '   ' → logprob: -3.755732297897339
    4. 's' → logprob: -5.380732536315918
    5. 'xor' → logprob: -7.005732536315918
    6. ' ans' → logprob: -7.505732536315918
    7. ' l' → logprob: -8.880732536315918
    8. 'answer' → logprob: -9.380732536315918
    9. '    
' → logprob: -9.630732536315918
    10. '
' → logprob: -10.630732536315918

Token 372: ' =' (ID: 314)
  Prédit: ' ='
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' =' → logprob: -0.47775599360466003
    2. '=' → logprob: -1.3527560234069824
    3. '_idx' → logprob: -3.3527560234069824
    4. ',' → logprob: -3.6027560234069824
    5. '.sort' → logprob: -4.352756023406982
    6. '.append' → logprob: -4.477756023406982
    7. '_len' → logprob: -5.102756023406982
    8. '[' → logprob: -5.602756023406982
    9. ')' → logprob: -5.602756023406982
    10. '_length' → logprob: -6.102756023406982

Token 373: ' append' (ID: 17147)
  Prédit: '['
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '[' → logprob: -0.23449696600437164
    2. 'list' → logprob: -2.7344970703125
    3. '[A' → logprob: -2.8594970703125
    4. ' [' → logprob: -3.1094970703125
    5. 'copy' → logprob: -4.1094970703125
    6. '[list' → logprob: -4.4844970703125
    7. 'A' → logprob: -5.3594970703125
    8. 'sorted' → logprob: -5.4844970703125
    9. '[a' → logprob: -6.2344970703125
    10. ' list' → logprob: -6.6094970703125

Token 374: '_to' (ID: 5089)
  Prédit: '_to'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_to' → logprob: -0.00020890454470645636
    2. '(A' → logprob: -8.500208854675293
    3. 'To' → logprob: -13.250208854675293
    4. '_' → logprob: -13.500208854675293
    5. '_(' → logprob: -14.625208854675293
    6. '
' → logprob: -15.000208854675293
    7. '(_' → logprob: -15.125208854675293
    8. '\' → logprob: -15.375208854675293
    9. 'to' → logprob: -15.500208854675293
    10. '```' → logprob: -15.500208854675293

Token 375: '_list' (ID: 4162)
  Prédit: '_list'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_list' → logprob: -0.023277508094906807
    2. 'list' → logprob: -3.773277521133423
    3. 'List' → logprob: -11.273277282714844
    4. 'lst' → logprob: -11.523277282714844
    5. 'ist' → logprob: -11.898277282714844
    6. 'end' → logprob: -13.023277282714844
    7. '_lst' → logprob: -16.148277282714844
    8. '_lists' → logprob: -17.023277282714844
    9. 'tolist' → logprob: -17.023277282714844
    10. 'alist' → logprob: -17.273277282714844

Token 376: '_end' (ID: 13707)
  Prédit: '_end'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_end' → logprob: -3.531315314830863e-06
    2. 'end' → logprob: -12.625003814697266
    3. 'End' → logprob: -15.875003814697266
    4. '(end' → logprob: -18.625003814697266
    5. '_END' → logprob: -19.250003814697266
    6. '_start' → logprob: -19.375003814697266
    7. '```' → logprob: -19.375003814697266
    8. '_' → logprob: -19.500003814697266
    9. 's' → logprob: -20.000003814697266
    10. '(_' → logprob: -20.125003814697266

Token 377: '(A' (ID: 10706)
  Prédit: '(A'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(A' → logprob: -1.1637164789135568e-05
    2. '(' → logprob: -11.500011444091797
    3. ' (' → logprob: -14.000011444091797
    4. '(end' → logprob: -15.000011444091797
    5. '(
' → logprob: -15.750011444091797
    6. '((' → logprob: -16.500011444091797
    7. '```' → logprob: -17.250011444091797
    8. 'A' → logprob: -17.500011444091797
    9. '([],' → logprob: -17.500011444091797
    10. '(None' → logprob: -17.625011444091797

Token 378: ',' (ID: 11)
  Prédit: ','
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ',' → logprob: -0.0008850149461068213
    2. '([' → logprob: -7.875885009765625
    3. '(' → logprob: -8.000885009765625
    4. ',[' → logprob: -9.250885009765625
    5. ',A' → logprob: -10.375885009765625
    6. '(A' → logprob: -10.875885009765625
    7. ',(' → logprob: -12.000885009765625
    8. '([]' → logprob: -12.375885009765625
    9. ' ,' → logprob: -12.500885009765625
    10. '([-' → logprob: -12.625885009765625

Token 379: ' -' (ID: 533)
  Prédit: '0'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '0' → logprob: -0.0023075041826814413
    2. ' ' → logprob: -7.002307415008545
    3. '10' → logprob: -7.752307415008545
    4. '-' → logprob: -8.127307891845703
    5. 'get' → logprob: -8.127307891845703
    6. 'float' → logprob: -9.002307891845703
    7. 'INF' → logprob: -9.002307891845703
    8. '1' → logprob: -10.627307891845703
    9. 'inf' → logprob: -11.002307891845703
    10. 'A' → logprob: -11.377307891845703

Token 380: '1' (ID: 16)
  Prédit: '1'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '1' → logprob: -5.7053759519476444e-05
    2. 'INF' → logprob: -10.625057220458984
    3. '2' → logprob: -11.000057220458984
    4. 'A' → logprob: -12.500057220458984
    5. '10' → logprob: -13.000057220458984
    6. ' ' → logprob: -13.125057220458984
    7. 'inf' → logprob: -13.375057220458984
    8. '999' → logprob: -13.625057220458984
    9. '(' → logprob: -13.750057220458984
    10. 'sys' → logprob: -13.875057220458984

Token 381: ')
' (ID: 446)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')' → logprob: -0.005326962564140558
    2. ')
' → logprob: -5.255326747894287
    3. ' )' → logprob: -9.380327224731445
    4. ')

' → logprob: -12.255327224731445
    5. ' )
' → logprob: -13.005327224731445
    6. ')
' → logprob: -14.130327224731445
    7. ')`
' → logprob: -14.880327224731445
    8. ')`' → logprob: -15.380327224731445
    9. ')#' → logprob: -16.130327224731445
    10. '))' → logprob: -16.505327224731445

Token 382: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.0011598621495068073
    2. '
' → logprob: -7.50115966796875
    3. '    
' → logprob: -8.37615966796875
    4. ' l' → logprob: -8.87615966796875
    5. 'l' → logprob: -9.62615966796875
    6. '<|end|>' → logprob: -9.87615966796875
    7. '    ' → logprob: -10.25115966796875
    8. ',' → logprob: -10.75115966796875
    9. '```' → logprob: -11.25115966796875
    10. ')' → logprob: -12.00115966796875

Token 383: ' ans' (ID: 3345)
  Prédit: 'l'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'l' → logprob: -0.4765312969684601
    2. 'ans' (adapté à ' ans') → logprob: -1.1015312671661377
    3. 'xor' → logprob: -3.8515312671661377
    4. ' ans' → logprob: -5.226531505584717
    5. 's' → logprob: -5.351531505584717
    6. 'N' → logprob: -5.351531505584717
    7. ' l' → logprob: -5.601531505584717
    8. '   ' → logprob: -6.101531505584717
    9. 'n' → logprob: -6.351531505584717
    10. 'INF' → logprob: -7.101531505584717

Token 384: ',' (ID: 11)
  Prédit: ' ='
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' =' → logprob: -0.005109595600515604
    2. '=' → logprob: -5.380109786987305
    3. ',' → logprob: -7.630109786987305
    4. ' ,' → logprob: -12.630109786987305
    5. ' ' → logprob: -15.130109786987305
    6. '  ' → logprob: -17.005109786987305
    7. '＝' → logprob: -17.505109786987305
    8. '   ' → logprob: -17.755109786987305
    9. ' =
' → logprob: -18.380109786987305
    10. ' ' → logprob: -18.380109786987305

Token 385: ' l' (ID: 305)
  Prédit: 'l'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'l' → logprob: -0.1435958594083786
    2. ' l' → logprob: -2.0185959339141846
    3. '0' → logprob: -7.5185956954956055
    4. 's' → logprob: -8.518595695495605
    5. ' s' → logprob: -9.393595695495605
    6. ' ' → logprob: -10.018595695495605
    7. 'xor' → logprob: -10.768595695495605
    8. ' xor' → logprob: -12.143595695495605
    9. '	l' → logprob: -12.268595695495605
    10. 'ans' → logprob: -12.768595695495605

Token 386: ',' (ID: 11)
  Prédit: ','
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ',' → logprob: -0.007228327449411154
    2. '=' → logprob: -5.632228374481201
    3. ' =' → logprob: -5.632228374481201
    4. ' ,' → logprob: -10.632227897644043
    5. ',l' → logprob: -11.257227897644043
    6. ',r' → logprob: -13.632227897644043
    7. ',s' → logprob: -14.882227897644043
    8. '<|end|>' → logprob: -15.569727897644043
    9. ',
' → logprob: -15.632227897644043
    10. '```' → logprob: -15.694727897644043

Token 387: ' r' (ID: 428)
  Prédit: 'r'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'r' → logprob: -0.01823153719305992
    2. ' r' → logprob: -4.018231391906738
    3. 'xor' → logprob: -10.143231391906738
    4. '0' → logprob: -10.768231391906738
    5. '=' → logprob: -11.643231391906738
    6. ' ' → logprob: -12.643231391906738
    7. ' =' → logprob: -12.768231391906738
    8. 'idx' → logprob: -13.393231391906738
    9. ' xor' → logprob: -13.643231391906738
    10. '
' → logprob: -14.518231391906738

Token 388: ',' (ID: 11)
  Prédit: ' ='
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' =' → logprob: -0.31385189294815063
    2. '=' → logprob: -1.3138518333435059
    3. ',' → logprob: -7.438851833343506
    4. ' ' → logprob: -13.688852310180664
    5. ' ,' → logprob: -15.813852310180664
    6. '  ' → logprob: -16.063852310180664
    7. ' =
' → logprob: -16.063852310180664
    8. '   ' → logprob: -16.188852310180664
    9. ')' → logprob: -16.313852310180664
    10. '=
' → logprob: -17.188852310180664

Token 389: ' xor' (ID: 106402)
  Prédit: 'xor'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'xor' → logprob: -0.0020365375094115734
    2. ' xor' → logprob: -6.2520365715026855
    3. 's' → logprob: -9.627036094665527
    4. '=' → logprob: -10.752036094665527
    5. ' =' → logprob: -12.377036094665527
    6. ' ' → logprob: -12.502036094665527
    7. 'x' → logprob: -12.627036094665527
    8. 'ans' → logprob: -12.877036094665527
    9. '0' → logprob: -13.252036094665527
    10. 'xr' → logprob: -14.002036094665527

Token 390: ' =' (ID: 314)
  Prédit: '_val'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_val' → logprob: -1.2113979209971149e-05
    2. '_' → logprob: -11.500012397766113
    3. 'val' → logprob: -13.500012397766113
    4. '_value' → logprob: -15.750012397766113
    5. 'Val' → logprob: -16.000011444091797
    6. '_v' → logprob: -16.000011444091797
    7. '=' → logprob: -16.375011444091797
    8. '_=' → logprob: -17.125011444091797
    9. ' =' → logprob: -17.250011444091797
    10. '_VAL' → logprob: -17.500011444091797

Token 391: ' init' (ID: 6327)
  Prédit: '0'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '0' → logprob: -0.09286998957395554
    2. 'init' → logprob: -2.467869997024536
    3. ' ' → logprob: -5.842869758605957
    4. ' init' → logprob: -7.092869758605957
    5. '(' → logprob: -9.092869758605957
    6. '=' → logprob: -10.842869758605957
    7. '   ' → logprob: -11.217869758605957
    8. ' (' → logprob: -11.342869758605957
    9. ' =' → logprob: -11.842869758605957
    10. '(init' → logprob: -11.842869758605957

Token 392: '_vars' (ID: 25901)
  Prédit: '_vars'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_vars' → logprob: -0.2277861088514328
    2. '_vals' → logprob: -1.8527860641479492
    3. '_ans' → logprob: -4.477786064147949
    4. '_' → logprob: -4.727786064147949
    5. '_x' → logprob: -4.977786064147949
    6. 'vars' → logprob: -5.352786064147949
    7. 'ans' → logprob: -5.852786064147949
    8. '_val' → logprob: -5.977786064147949
    9. '0' → logprob: -6.102786064147949
    10. '_,' → logprob: -6.227786064147949

Token 393: '()
' (ID: 1234)
  Prédit: '
'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '
' → logprob: -0.10364525765180588
    2. '<|end|>' → logprob: -2.4786453247070312
    3. '   ' → logprob: -4.603645324707031
    4. '  
' → logprob: -6.478645324707031
    5. '<|end|>' → logprob: -6.728645324707031
    6. '    
' → logprob: -7.228645324707031
    7. ',' → logprob: -7.978645324707031
    8. ' 
' → logprob: -8.603645324707031
    9. ',
' → logprob: -9.228645324707031
    10. ':
' → logprob: -9.228645324707031

Token 394: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.21747876703739166
    2. '
' → logprob: -2.0924787521362305
    3. '<|end|>' → logprob: -2.7174787521362305
    4. '    
' → logprob: -5.9674787521362305
    5. '  
' → logprob: -6.4674787521362305
    6. '<|end|>' → logprob: -7.5924787521362305
    7. ' while' → logprob: -7.9674787521362305
    8. ' 
' → logprob: -8.46747875213623
    9. '	while' → logprob: -8.59247875213623
    10. '```' → logprob: -9.09247875213623

Token 395: ' while' (ID: 2049)
  Prédit: 'while'
  Correct (stricte): False
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'while' (adapté à ' while') → logprob: -0.7884147763252258
    2. ' while' → logprob: -0.9134147763252258
    3. '   ' → logprob: -3.038414716720581
    4. 'r' → logprob: -3.413414716720581
    5. 'for' → logprob: -3.413414716720581
    6. ' for' → logprob: -3.663414716720581
    7. ' r' → logprob: -5.91341495513916
    8. '	while' → logprob: -7.66341495513916
    9. ' ' → logprob: -8.03841495513916
    10. 'n' → logprob: -8.41341495513916

Token 396: ' r' (ID: 428)
  Prédit: ' r'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' r' → logprob: -0.17042984068393707
    2. 'r' → logprob: -1.9204298257827759
    3. ' True' → logprob: -5.670429706573486
    4. 'True' → logprob: -6.045429706573486
    5. ' can' → logprob: -6.670429706573486
    6. '(r' → logprob: -6.795429706573486
    7. ' (' → logprob: -7.545429706573486
    8. ' not' → logprob: -7.670429706573486
    9. ' l' → logprob: -8.295430183410645
    10. '(' → logprob: -8.545430183410645

Token 397: ' <' (ID: 464)
  Prédit: ' <'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' <' → logprob: -0.06923399865627289
    2. '<' → logprob: -2.8192338943481445
    3. ' <=' → logprob: -5.0692338943481445
    4. '<=' → logprob: -7.4442338943481445
    5. '<len' → logprob: -8.819233894348145
    6. '<N' → logprob: -9.444233894348145
    7. ' ' → logprob: -9.694233894348145
    8. ' !=' → logprob: -9.819233894348145
    9. '!=' → logprob: -11.569233894348145
    10. '<n' → logprob: -12.444233894348145

Token 398: ' N' (ID: 478)
  Prédit: 'N'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'N' → logprob: -0.0002007987059187144
    2. ' N' → logprob: -8.750201225280762
    3. 'len' → logprob: -10.125201225280762
    4. '   ' → logprob: -14.500201225280762
    5. ' ' → logprob: -14.625201225280762
    6. '
' → logprob: -14.625201225280762
    7. ' len' → logprob: -15.000201225280762
    8. 'n' → logprob: -16.000200271606445
    9. '	N' → logprob: -16.625200271606445
    10. '10' → logprob: -17.125200271606445

Token 399: ':
' (ID: 734)
  Prédit: ':'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ':' → logprob: -0.3586271405220032
    2. ':
' → logprob: -1.4836270809173584
    3. ' and' → logprob: -2.6086270809173584
    4. '   ' → logprob: -7.8586273193359375
    5. 'and' → logprob: -7.8586273193359375
    6. ' :' → logprob: -9.983627319335938
    7. ' :
' → logprob: -9.983627319335938
    8. ':
' → logprob: -11.608627319335938
    9. ',' → logprob: -11.733627319335938
    10. ' ' → logprob: -11.858627319335938

Token 400: '       ' (ID: 309)
  Prédit: '       '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '       ' → logprob: -0.07201790064573288
    2. ' if' → logprob: -3.0720179080963135
    3. ' ' → logprob: -4.822017669677734
    4. '<|end|>' → logprob: -5.322017669677734
    5. '+' → logprob: -6.572017669677734
    6. 'if' → logprob: -6.697017669677734
    7. '   ' → logprob: -7.072017669677734
    8. ' s' → logprob: -7.197017669677734
    9. ' and' → logprob: -7.197017669677734
    10. ' 
' → logprob: -7.197017669677734

Token 401: ' if' (ID: 538)
  Prédit: 'if'
  Correct (stricte): False
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'if' (adapté à ' if') → logprob: -0.09482474625110626
    2. '       ' → logprob: -2.71982479095459
    3. ' if' → logprob: -4.21982479095459
    4. '   ' → logprob: -5.21982479095459
    5. 's' → logprob: -6.21982479095459
    6. 'a' → logprob: -7.34482479095459
    7. 'xor' → logprob: -7.59482479095459
    8. '           ' → logprob: -8.09482479095459
    9. 'and' → logprob: -8.34482479095459
    10. 'while' → logprob: -8.46982479095459

Token 402: ' can' (ID: 665)
  Prédit: 'can'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'can' → logprob: -0.04107973724603653
    2. ' can' → logprob: -3.2910797595977783
    3. 'r' → logprob: -6.041079521179199
    4. '(can' → logprob: -8.2910795211792
    5. '   ' → logprob: -8.9160795211792
    6. 'xor' → logprob: -9.6660795211792
    7. ' r' → logprob: -9.9160795211792
    8. 'not' → logprob: -10.6660795211792
    9. ' not' → logprob: -10.7910795211792
    10. ' ' → logprob: -11.0410795211792

Token 403: '_extend' (ID: 195756)
  Prédit: '_extend'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_extend' → logprob: -0.00014025058771949261
    2. 'extend' → logprob: -9.000140190124512
    3. '_ext' → logprob: -11.250140190124512
    4. '_extent' → logprob: -13.750140190124512
    5. 'can' → logprob: -14.375140190124512
    6. '.extend' → logprob: -14.625140190124512
    7. '_extension' → logprob: -15.125140190124512
    8. '_expand' → logprob: -15.125140190124512
    9. '   ' → logprob: -15.125140190124512
    10. ' extend' → logprob: -15.500140190124512

Token 404: '(x' (ID: 4061)
  Prédit: '(x'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(x' → logprob: -0.003290251363068819
    2. 'xor' → logprob: -6.628290176391602
    3. '(' → logprob: -6.753290176391602
    4. '(update' → logprob: -7.378290176391602
    5. 'x' → logprob: -9.628290176391602
    6. 'update' → logprob: -10.753290176391602
    7. ' (' → logprob: -10.878290176391602
    8. '(
' → logprob: -11.128290176391602
    9. ' xor' → logprob: -11.253290176391602
    10. '((' → logprob: -11.503290176391602

Token 405: 'or' (ID: 267)
  Prédit: '_val'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_val' → logprob: -0.9515092372894287
    2. 'val' → logprob: -1.4515092372894287
    3. 'or' → logprob: -1.7015092372894287
    4. 'xor' → logprob: -1.9515092372894287
    5. 'r' → logprob: -3.9515092372894287
    6. ',' → logprob: -3.9515092372894287
    7. '(r' → logprob: -5.826509475708008
    8. '   ' → logprob: -5.951509475708008
    9. '(x' → logprob: -6.076509475708008
    10. 'x' → logprob: -6.951509475708008

Token 406: ',' (ID: 11)
  Prédit: ','
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ',' → logprob: -0.0014952188357710838
    2. ' ,' → logprob: -6.751495361328125
    3. '_val' → logprob: -8.876495361328125
    4. '_,' → logprob: -9.251495361328125
    5. 'val' → logprob: -10.376495361328125
    6. ',val' → logprob: -10.751495361328125
    7. '   ' → logprob: -11.751495361328125
    8. ',x' → logprob: -11.876495361328125
    9. ',
' → logprob: -12.626495361328125
    10. 'Val' → logprob: -13.126495361328125

Token 407: ' A' (ID: 355)
  Prédit: 'A'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'A' → logprob: -0.03366021811962128
    2. ' A' → logprob: -3.4086601734161377
    3. '   ' → logprob: -12.033659934997559
    4. 'update' → logprob: -13.158659934997559
    5. '       ' → logprob: -13.283659934997559
    6. '=A' → logprob: -14.283659934997559
    7. '    ' → logprob: -14.408659934997559
    8. ' ' → logprob: -14.658659934997559
    9. '	A' → logprob: -14.658659934997559
    10. ')' → logprob: -14.783659934997559

Token 408: '[r' (ID: 33265)
  Prédit: '[r'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '[r' → logprob: -9.353008499601856e-05
    2. '[' → logprob: -9.625093460083008
    3. 'r' → logprob: -10.750093460083008
    4. '[
' → logprob: -13.250093460083008
    5. '
' → logprob: -13.375093460083008
    6. ' [' → logprob: -14.250093460083008
    7. '   ' → logprob: -14.375093460083008
    8. ' r' → logprob: -14.750093460083008
    9. ')' → logprob: -15.125093460083008
    10. '	r' → logprob: -15.500093460083008

Token 409: ']):
' (ID: 51989)
  Prédit: ']):'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ']):' → logprob: -0.6231957077980042
    2. ']):
' → logprob: -0.8731957077980042
    3. '):' → logprob: -4.123195648193359
    4. '):
' → logprob: -4.498195648193359
    5. ')' → logprob: -4.998195648193359
    6. '])' → logprob: -5.123195648193359
    7. ']' → logprob: -5.373195648193359
    8. ' ]' → logprob: -7.873195648193359
    9. ')]' → logprob: -8.24819564819336
    10. ')):' → logprob: -8.87319564819336

Token 410: '           ' (ID: 352)
  Prédit: 'xor'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'xor' → logprob: -0.5823150277137756
    2. '           ' → logprob: -0.8323150277137756
    3. ' xor' → logprob: -5.207314968109131
    4. ':' → logprob: -8.207315444946289
    5. ':
' → logprob: -8.582315444946289
    6. 'x' → logprob: -9.457315444946289
    7. '       ' → logprob: -9.707315444946289
    8. '
' → logprob: -9.957315444946289
    9. '          ' → logprob: -10.207315444946289
    10. '```' → logprob: -10.582315444946289

Token 411: ' xor' (ID: 106402)
  Prédit: 'xor'
  Correct (stricte): False
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'xor' (adapté à ' xor') → logprob: -0.008509965613484383
    2. ' xor' → logprob: -5.633510112762451
    3. '           ' → logprob: -5.758510112762451
    4. '       ' → logprob: -7.008510112762451
    5. '   ' → logprob: -7.383510112762451
    6. '               ' → logprob: -8.633509635925293
    7. 'x' → logprob: -10.508509635925293
    8. '
' → logprob: -12.883509635925293
    9. ' ' → logprob: -12.883509635925293
    10. 'xr' → logprob: -13.383509635925293

Token 412: ' =' (ID: 314)
  Prédit: ' ='
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' =' → logprob: -0.4741014838218689
    2. '=' → logprob: -0.9741014838218689
    3. ' ^=' → logprob: -11.224101066589355
    4. ',' → logprob: -11.849101066589355
    5. ' ' → logprob: -12.974101066589355
    6. ')' → logprob: -14.849101066589355
    7. ' |=' → logprob: -15.224101066589355
    8. ' +=' → logprob: -15.349101066589355
    9. ' ,' → logprob: -16.349102020263672
    10. '^' → logprob: -16.349102020263672

Token 413: ' update' (ID: 4027)
  Prédit: 'update'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'update' → logprob: -0.029757659882307053
    2. ' update' → logprob: -3.5297577381134033
    3. 'xor' → logprob: -12.279757499694824
    4. '           ' → logprob: -13.529757499694824
    5. ' xor' → logprob: -14.779757499694824
    6. '	update' → logprob: -15.279757499694824
    7. '(update' → logprob: -15.904757499694824
    8. '.update' → logprob: -15.904757499694824
    9. '   ' → logprob: -16.52975845336914
    10. ' ' → logprob: -16.65475845336914

Token 414: '_x' (ID: 7054)
  Prédit: '_x'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_x' → logprob: -0.2316533327102661
    2. 'xor' → logprob: -1.6066533327102661
    3. 'x' → logprob: -5.106653213500977
    4. '_ans' → logprob: -9.731653213500977
    5. '(x' → logprob: -10.606653213500977
    6. 'ans' → logprob: -10.606653213500977
    7. 'val' → logprob: -10.981653213500977
    8. ' xor' → logprob: -11.231653213500977
    9. '_' → logprob: -11.731653213500977
    10. '```' → logprob: -12.606653213500977

Token 415: 'or' (ID: 267)
  Prédit: 'or'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'or' → logprob: -0.023568756878376007
    2. 'xor' → logprob: -3.898568868637085
    3. 'val' → logprob: -6.023568630218506
    4. 'r' → logprob: -8.773569107055664
    5. '_val' → logprob: -9.023569107055664
    6. 'orz' → logprob: -9.273569107055664
    7. 'x' → logprob: -9.648569107055664
    8. '```' → logprob: -11.148569107055664
    9. 'ox' → logprob: -11.273569107055664
    10. '(or' → logprob: -11.273569107055664

Token 416: '(x' (ID: 4061)
  Prédit: '(x'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(x' → logprob: -0.002823181450366974
    2. '(' → logprob: -5.877823352813721
    3. 'xor' → logprob: -11.752822875976562
    4. ' (' → logprob: -12.252822875976562
    5. '(
' → logprob: -13.252822875976562
    6. ' xor' → logprob: -14.252822875976562
    7. ',' → logprob: -14.377822875976562
    8. 'x' → logprob: -14.627822875976562
    9. ')' → logprob: -14.752822875976562
    10. ' ' → logprob: -14.877822875976562

Token 417: 'or' (ID: 267)
  Prédit: ','
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ',' → logprob: -0.014514977112412453
    2. ',r' → logprob: -4.639514923095703
    3. 'r' → logprob: -6.389514923095703
    4. ' ,' → logprob: -7.389514923095703
    5. 'xor' → logprob: -7.514514923095703
    6. '),' → logprob: -7.639514923095703
    7. ' ' → logprob: -7.764514923095703
    8. ')' → logprob: -8.014514923095703
    9. ',val' → logprob: -8.764514923095703
    10. 'val' → logprob: -9.264514923095703

Token 418: ',' (ID: 11)
  Prédit: ','
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ',' → logprob: -4.167648876318708e-05
    2. ' ,' → logprob: -10.875041961669922
    3. ',A' → logprob: -11.125041961669922
    4. 'A' → logprob: -12.250041961669922
    5. ',
' → logprob: -13.125041961669922
    6. '),' → logprob: -15.000041961669922
    7. ')' → logprob: -15.375041961669922
    8. '`,' → logprob: -16.125041961669922
    9. ',r' → logprob: -16.125041961669922
    10. ' A' → logprob: -16.125041961669922

Token 419: ' A' (ID: 355)
  Prédit: 'A'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'A' → logprob: -0.16022595763206482
    2. ' A' → logprob: -1.9102259874343872
    3. '   ' → logprob: -14.035225868225098
    4. ' ' → logprob: -14.285225868225098
    5. '	A' → logprob: -15.785225868225098
    6. '  ' → logprob: -16.785226821899414
    7. ')' → logprob: -16.785226821899414
    8. 'a' → logprob: -16.910226821899414
    9. '    ' → logprob: -17.035226821899414
    10. '           ' → logprob: -18.035226821899414

Token 420: '[r' (ID: 33265)
  Prédit: '[r'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '[r' → logprob: -3.214019307051785e-05
    2. '[' → logprob: -10.500032424926758
    3. 'r' → logprob: -12.750032424926758
    4. '[
' → logprob: -13.625032424926758
    5. ')' → logprob: -16.125032424926758
    6. '(r' → logprob: -16.750032424926758
    7. ' [' → logprob: -16.750032424926758
    8. '	r' → logprob: -16.875032424926758
    9. '```' → logprob: -17.500032424926758
    10. '
' → logprob: -17.625032424926758

Token 421: '])
' (ID: 5169)
  Prédit: ')
'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')
' → logprob: -0.2520551085472107
    2. ')' → logprob: -1.5020551681518555
    3. ')
' → logprob: -9.502055168151855
    4. ' )
' → logprob: -10.877055168151855
    5. ')

' → logprob: -11.127055168151855
    6. '])' → logprob: -12.502055168151855
    7. '])
' → logprob: -12.752055168151855
    8. ' )' → logprob: -13.127055168151855
    9. '           ' → logprob: -13.377055168151855
    10. ']' → logprob: -13.627055168151855

Token 422: '           ' (ID: 352)
  Prédit: '           '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '           ' → logprob: -0.010792183689773083
    2. '
' → logprob: -4.760792255401611
    3. ',' → logprob: -6.635792255401611
    4. 'r' → logprob: -7.760792255401611
    5. '            
' → logprob: -8.760791778564453
    6. ',
' → logprob: -9.010791778564453
    7. ' r' → logprob: -10.635791778564453
    8. '       ' → logprob: -10.885791778564453
    9. '   ' → logprob: -11.135791778564453
    10. '        
' → logprob: -11.385791778564453

Token 423: ' r' (ID: 428)
  Prédit: 'r'
  Correct (stricte): False
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'r' (adapté à ' r') → logprob: -0.005273838527500629
    2. ' r' → logprob: -5.880273818969727
    3. '           ' → logprob: -6.380273818969727
    4. '       ' → logprob: -7.380273818969727
    5. '   ' → logprob: -8.880273818969727
    6. '
' → logprob: -13.005273818969727
    7. '	r' → logprob: -13.005273818969727
    8. '               ' → logprob: -13.255273818969727
    9. ' ' → logprob: -13.755273818969727
    10. '     ' → logprob: -15.255273818969727

Token 424: ' =' (ID: 314)
  Prédit: '='
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '=' → logprob: -0.11237078160047531
    2. ' =' → logprob: -2.862370729446411
    3. '+=' → logprob: -3.487370729446411
    4. ' +=' → logprob: -3.987370729446411
    5. ' ' → logprob: -10.737370491027832
    6. '+' → logprob: -13.362370491027832
    7. ')' → logprob: -15.237370491027832
    8. '++' → logprob: -16.11237144470215
    9. '=in' → logprob: -16.11237144470215
    10. '=int' → logprob: -16.48737144470215

Token 425: ' increase' (ID: 7064)
  Prédit: 'increase'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'increase' → logprob: -0.014164102263748646
    2. ' increase' → logprob: -4.264163970947266
    3. 'increment' → logprob: -15.264163970947266
    4. ' ' → logprob: -15.889163970947266
    5. 'r' → logprob: -16.014163970947266
    6. 'in' → logprob: -16.139163970947266
    7. '   ' → logprob: -18.014163970947266
    8. 'Increase' → logprob: -19.639163970947266
    9. 'advance' → logprob: -19.889163970947266
    10. '  ' → logprob: -20.139163970947266

Token 426: '_idx' (ID: 15257)
  Prédit: '_idx'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_idx' → logprob: -0.47883763909339905
    2. 'idx' → logprob: -0.9788376092910767
    3. 'r' → logprob: -5.353837490081787
    4. '(r' → logprob: -11.478837966918945
    5. 'Idx' → logprob: -12.603837966918945
    6. '_r' → logprob: -13.603837966918945
    7. 'd' → logprob: -13.853837966918945
    8. '(idx' → logprob: -14.353837966918945
    9. '	idx' → logprob: -14.353837966918945
    10. 'x' → logprob: -14.603837966918945

Token 427: '(r' (ID: 4729)
  Prédit: '(r'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(r' → logprob: -4.60414821645827e-06
    2. '(' → logprob: -12.500004768371582
    3. 'r' → logprob: -14.250004768371582
    4. ' (' → logprob: -15.625004768371582
    5. '(
' → logprob: -20.375003814697266
    6. '	r' → logprob: -20.750003814697266
    7. ' r' → logprob: -21.125003814697266
    8. ' ' → logprob: -22.125003814697266
    9. '```' → logprob: -22.750003814697266
    10. ')' → logprob: -23.125003814697266

Token 428: ')
' (ID: 446)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')' → logprob: -0.0486053042113781
    2. ')
' → logprob: -3.04860520362854
    3. ')

' → logprob: -11.298604965209961
    4. ')
' → logprob: -12.923604965209961
    5. '<|end|>' → logprob: -14.173604965209961
    6. ' )' → logprob: -14.423604965209961
    7. '       ' → logprob: -14.673604965209961
    8. '   ' → logprob: -14.798604965209961
    9. ')\' → logprob: -15.173604965209961
    10. ')return' → logprob: -15.548604965209961

Token 429: '           ' (ID: 352)
  Prédit: '       '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '       ' → logprob: -0.05526847019791603
    2. '<|end|>' → logprob: -3.0552685260772705
    3. '           ' → logprob: -5.930268287658691
    4. ',' → logprob: -6.680268287658691
    5. 'else' → logprob: -6.680268287658691
    6. '<|end|>' → logprob: -8.055268287658691
    7. '   ' → logprob: -8.305268287658691
    8. '
' → logprob: -8.430268287658691
    9. ' else' → logprob: -8.430268287658691
    10. '```' → logprob: -8.555268287658691

Token 430: ' ans' (ID: 3345)
  Prédit: 'ans'
  Correct (stricte): False
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'ans' (adapté à ' ans') → logprob: -0.04219267889857292
    2. '           ' → logprob: -3.2921926975250244
    3. ' ans' → logprob: -6.417192459106445
    4. '   ' → logprob: -6.792192459106445
    5. '       ' → logprob: -6.792192459106445
    6. '	ans' → logprob: -9.292192459106445
    7. 'continue' → logprob: -9.542192459106445
    8. 'answer' → logprob: -10.042192459106445
    9. '
' → logprob: -10.792192459106445
    10. '(ans' → logprob: -11.417192459106445

Token 431: ' =' (ID: 314)
  Prédit: ' ='
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' =' → logprob: -0.03375842049717903
    2. '=' → logprob: -3.4087584018707275
    3. ' +=' → logprob: -9.158758163452148
    4. ' ' → logprob: -12.283758163452148
    5. '+=' → logprob: -12.908758163452148
    6. ',' → logprob: -15.908758163452148
    7. ')' → logprob: -16.90875816345215
    8. '+' → logprob: -17.03375816345215
    9. '  ' → logprob: -17.03375816345215
    10. '＝' → logprob: -17.15875816345215

Token 432: ' update' (ID: 4027)
  Prédit: 'update'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'update' → logprob: -0.01815064437687397
    2. ' update' → logprob: -4.018150806427002
    3. '(update' → logprob: -14.893150329589844
    4. 'increase' → logprob: -16.268150329589844
    5. '   ' → logprob: -16.643150329589844
    6. '	update' → logprob: -16.893150329589844
    7. '           ' → logprob: -17.768150329589844
    8. 'ans' → logprob: -17.768150329589844
    9. '.update' → logprob: -17.768150329589844
    10. '       ' → logprob: -18.893150329589844

Token 433: '_ans' (ID: 146254)
  Prédit: '_ans'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_ans' → logprob: -0.023282168433070183
    2. 'ans' → logprob: -3.773282051086426
    3. '(ans' → logprob: -10.273282051086426
    4. 'Ans' → logprob: -13.523282051086426
    5. ' ans' → logprob: -15.273282051086426
    6. '	ans' → logprob: -15.398282051086426
    7. '_answer' → logprob: -15.523282051086426
    8. '
' → logprob: -16.398283004760742
    9. '```' → logprob: -16.898283004760742
    10. 'ANS' → logprob: -17.148283004760742

Token 434: '(ans' (ID: 70054)
  Prédit: '(ans'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(ans' → logprob: -1.9361264946837764e-07
    2. 'ans' → logprob: -15.875
    3. '(answer' → logprob: -18.0
    4. '	ans' → logprob: -20.25
    5. '(' → logprob: -20.375
    6. ' (' → logprob: -21.375
    7. ' ans' → logprob: -21.5
    8. '(
' → logprob: -22.125
    9. '(err' → logprob: -22.625
    10. '_ans' → logprob: -22.75

Token 435: ',' (ID: 11)
  Prédit: ','
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ',' → logprob: -0.020655402913689613
    2. '(ans' → logprob: -3.895655393600464
    3. ' ,' → logprob: -9.645655632019043
    4. ' ans' → logprob: -10.645655632019043
    5. 'ans' → logprob: -10.895655632019043
    6. ')' → logprob: -12.895655632019043
    7. '(' → logprob: -13.270655632019043
    8. ',
' → logprob: -14.020655632019043
    9. '	ans' → logprob: -15.020655632019043
    10. '(answer' → logprob: -15.145655632019043

Token 436: ' l' (ID: 305)
  Prédit: 'ans'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'ans' → logprob: -0.0003374886582605541
    2. ' ans' → logprob: -8.000337600708008
    3. 'l' → logprob: -13.250337600708008
    4. '(ans' → logprob: -16.125337600708008
    5. '	ans' → logprob: -16.500337600708008
    6. 'answer' → logprob: -18.000337600708008
    7. '   ' → logprob: -18.000337600708008
    8. ' l' → logprob: -18.875337600708008
    9. '_ans' → logprob: -20.625337600708008
    10. ' ' → logprob: -21.375337600708008

Token 437: ',' (ID: 11)
  Prédit: ','
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ',' → logprob: -0.0011212840909138322
    2. ',r' → logprob: -6.876121520996094
    3. ' ,' → logprob: -9.501121520996094
    4. ',
' → logprob: -11.876121520996094
    5. 'r' → logprob: -12.001121520996094
    6. ' r' → logprob: -15.626121520996094
    7. ' ' → logprob: -16.126121520996094
    8. '
' → logprob: -16.501121520996094
    9. ')' → logprob: -16.626121520996094
    10. '   ' → logprob: -17.251121520996094

Token 438: ' r' (ID: 428)
  Prédit: 'r'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'r' → logprob: -0.0002613358374219388
    2. ' r' → logprob: -8.250261306762695
    3. '   ' → logprob: -17.625261306762695
    4. '	r' → logprob: -18.375261306762695
    5. ' ' → logprob: -19.625261306762695
    6. '
' → logprob: -21.750261306762695
    7. '  ' → logprob: -22.125261306762695
    8. '_r' → logprob: -22.625261306762695
    9. ',r' → logprob: -22.750261306762695
    10. '    ' → logprob: -23.000261306762695

Token 439: ')
' (ID: 446)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')' → logprob: -0.16025875508785248
    2. ')
' → logprob: -1.9102587699890137
    3. ')

' → logprob: -10.660258293151855
    4. ')
' → logprob: -12.660258293151855
    5. '       ' → logprob: -13.160258293151855
    6. '   ' → logprob: -13.285258293151855
    7. ')return' → logprob: -13.785258293151855
    8. ',' → logprob: -14.035258293151855
    9. ')\' → logprob: -14.160258293151855
    10. ' )' → logprob: -14.285258293151855

Token 440: '       ' (ID: 309)
  Prédit: '       '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '       ' → logprob: -0.02007065899670124
    2. 'else' → logprob: -4.020070552825928
    3. ' else' → logprob: -6.395070552825928
    4. '   ' → logprob: -8.770071029663086
    5. '<|end|>' → logprob: -9.895071029663086
    6. '	else' → logprob: -11.145071029663086
    7. '```' → logprob: -11.770071029663086
    8. '
' → logprob: -12.395071029663086
    9. ')' → logprob: -12.645071029663086
    10. '	' → logprob: -12.770071029663086

Token 441: ' else' (ID: 1203)
  Prédit: 'else'
  Correct (stricte): False
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'else' (adapté à ' else') → logprob: -0.12346068024635315
    2. '       ' → logprob: -2.7484607696533203
    3. ' else' → logprob: -2.9984607696533203
    4. '   ' → logprob: -6.12346076965332
    5. '	else' → logprob: -9.99846076965332
    6. 'elif' → logprob: -11.24846076965332
    7. '```' → logprob: -14.49846076965332
    8. '           ' → logprob: -14.74846076965332
    9. ')' → logprob: -14.74846076965332
    10. '	' → logprob: -15.12346076965332

Token 442: ':
' (ID: 734)
  Prédit: ':
'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ':
' → logprob: -0.3871895968914032
    2. ':' → logprob: -1.1371896266937256
    3. '           ' → logprob: -8.137189865112305
    4. ':
' → logprob: -11.637189865112305
    5. ':

' → logprob: -12.012189865112305
    6. '       ' → logprob: -12.512189865112305
    7. ' :
' → logprob: -12.637189865112305
    8. ',' → logprob: -13.762189865112305
    9. '   ' → logprob: -14.012189865112305
    10. '):
' → logprob: -14.512189865112305

Token 443: '           ' (ID: 352)
  Prédit: '           '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '           ' → logprob: -0.8577212691307068
    2. ' l' → logprob: -1.2327213287353516
    3. 'l' → logprob: -1.3577213287353516
    4. '       ' → logprob: -3.9827213287353516
    5. '   ' → logprob: -5.107721328735352
    6. 's' → logprob: -7.232721328735352
    7. ' s' → logprob: -7.482721328735352
    8. '
' → logprob: -8.982721328735352
    9. ' if' → logprob: -9.107721328735352
    10. '               ' → logprob: -9.232721328735352

Token 444: ' s' (ID: 265)
  Prédit: 'l'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'l' → logprob: -0.00793510489165783
    2. '           ' → logprob: -5.257935047149658
    3. ' l' → logprob: -6.007935047149658
    4. '   ' → logprob: -9.007935523986816
    5. '       ' → logprob: -9.757935523986816
    6. 's' (adapté à ' s') → logprob: -10.507935523986816
    7. '               ' → logprob: -11.757935523986816
    8. 'if' → logprob: -12.257935523986816
    9. 'while' → logprob: -12.382935523986816
    10. ',' → logprob: -13.382935523986816

Token 445: ' =' (ID: 314)
  Prédit: '='
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '=' → logprob: -0.8305706977844238
    2. ' =' → logprob: -1.2055706977844238
    3. ',' → logprob: -1.3305706977844238
    4. ' ,' → logprob: -9.580570220947266
    5. ' +=' → logprob: -10.080570220947266
    6. '+=' → logprob: -10.205570220947266
    7. 'while' → logprob: -10.205570220947266
    8. '=l' → logprob: -10.330570220947266
    9. ',l' → logprob: -10.705570220947266
    10. 'l' → logprob: -10.955570220947266

Token 446: ' get' (ID: 717)
  Prédit: 'xor'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'xor' → logprob: -0.35520729422569275
    2. 'get' → logprob: -1.2302073240280151
    3. ' get' → logprob: -6.480207443237305
    4. 'update' → logprob: -6.480207443237305
    5. ' xor' → logprob: -6.980207443237305
    6. 'A' → logprob: -7.105207443237305
    7. 'de' → logprob: -7.355207443237305
    8. '(get' → logprob: -7.980207443237305
    9. 'increase' → logprob: -8.480207443237305
    10. 's' → logprob: -8.980207443237305

Token 447: '_inter' (ID: 16818)
  Prédit: '_inter'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_inter' → logprob: -0.13221101462841034
    2. 'intersection' → logprob: -2.1322109699249268
    3. 'get' → logprob: -5.507211208343506
    4. 'xor' → logprob: -7.257211208343506
    5. 'inter' → logprob: -7.632211208343506
    6. ' intersection' → logprob: -11.757210731506348
    7. '
' → logprob: -12.257210731506348
    8. '(get' → logprob: -13.007210731506348
    9. 'x' → logprob: -13.382210731506348
    10. 'interaction' → logprob: -14.007210731506348

Token 448: 'section' (ID: 6471)
  Prédit: 'section'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'section' → logprob: -2.856408536899835e-05
    2. '<section' → logprob: -11.375028610229492
    3. 's' → logprob: -11.625028610229492
    4. '```' → logprob: -12.375028610229492
    5. 'sections' → logprob: -14.500028610229492
    6. 'ection' → logprob: -14.500028610229492
    7. 'intersection' → logprob: -14.750028610229492
    8. 'sect' → logprob: -14.750028610229492
    9. '   ' → logprob: -14.875028610229492
    10. ' ' → logprob: -15.250028610229492

Token 449: '(x' (ID: 4061)
  Prédit: '(x'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(x' → logprob: -0.00011892046313732862
    2. '(' → logprob: -9.12511920928955
    3. 'xor' → logprob: -11.62511920928955
    4. 'x' → logprob: -15.12511920928955
    5. '(s' → logprob: -15.25011920928955
    6. ' (' → logprob: -15.75011920928955
    7. '(
' → logprob: -15.75011920928955
    8. '```' → logprob: -17.125118255615234
    9. '()' → logprob: -17.250118255615234
    10. 's' → logprob: -17.250118255615234

Token 450: 'or' (ID: 267)
  Prédit: 'or'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'or' → logprob: -0.2945743501186371
    2. 'xor' → logprob: -1.4195743799209595
    3. 'val' → logprob: -4.66957426071167
    4. ',' → logprob: -7.29457426071167
    5. ' xor' → logprob: -7.29457426071167
    6. '   ' → logprob: -7.91957426071167
    7. '(or' → logprob: -8.044574737548828
    8. 'al' → logprob: -8.294574737548828
    9. ')' → logprob: -8.419574737548828
    10. 'r' → logprob: -8.544574737548828

Token 451: ',' (ID: 11)
  Prédit: ','
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ',' → logprob: -4.1318875446449965e-05
    2. ' ,' → logprob: -10.625041007995605
    3. ',A' → logprob: -11.875041007995605
    4. ')' → logprob: -12.375041007995605
    5. 'A' → logprob: -13.000041007995605
    6. ',
' → logprob: -13.625041007995605
    7. '(A' → logprob: -13.875041007995605
    8. '(' → logprob: -14.750041007995605
    9. 's' → logprob: -15.000041007995605
    10. '(),' → logprob: -15.750041007995605

Token 452: ' A' (ID: 355)
  Prédit: 'A'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'A' → logprob: -0.05488532781600952
    2. ' A' → logprob: -2.9298853874206543
    3. '   ' → logprob: -13.804884910583496
    4. ' ' → logprob: -14.304884910583496
    5. '	A' → logprob: -14.804884910583496
    6. 'a' → logprob: -15.054884910583496
    7. ')' → logprob: -15.054884910583496
    8. 'update' → logprob: -16.929885864257812
    9. '    ' → logprob: -17.054885864257812
    10. '
' → logprob: -17.179885864257812

Token 453: '[r' (ID: 33265)
  Prédit: '[r'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '[r' → logprob: -7.107425062713446e-06
    2. 'r' → logprob: -12.000006675720215
    3. '[' → logprob: -14.625006675720215
    4. ')' → logprob: -16.62500762939453
    5. '   ' → logprob: -16.62500762939453
    6. '	r' → logprob: -16.75000762939453
    7. ',r' → logprob: -16.87500762939453
    8. '
' → logprob: -16.87500762939453
    9. '(r' → logprob: -17.12500762939453
    10. '

' → logprob: -17.12500762939453

Token 454: '])
' (ID: 5169)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')' → logprob: -0.0555858351290226
    2. '])' → logprob: -3.4305858612060547
    3. ')
' → logprob: -4.055585861206055
    4. '[r' → logprob: -5.555585861206055
    5. '])
' → logprob: -8.805585861206055
    6. ' )' → logprob: -9.555585861206055
    7. ']' → logprob: -9.930585861206055
    8. '))' → logprob: -10.180585861206055
    9. ')`' → logprob: -10.305585861206055
    10. '[' → logprob: -10.430585861206055

Token 455: '           ' (ID: 352)
  Prédit: '           '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '           ' → logprob: -0.00038443657103925943
    2. '       ' → logprob: -8.000384330749512
    3. ' l' → logprob: -10.875384330749512
    4. 'l' → logprob: -11.500384330749512
    5. '		' → logprob: -12.000384330749512
    6. '   ' → logprob: -12.125384330749512
    7. '
' → logprob: -12.875384330749512
    8. ',' → logprob: -13.500384330749512
    9. '```' → logprob: -13.625384330749512
    10. 'r' → logprob: -14.750384330749512

Token 456: ' l' (ID: 305)
  Prédit: 'l'
  Correct (stricte): False
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'l' (adapté à ' l') → logprob: -0.023627441376447678
    2. ' l' → logprob: -3.773627519607544
    3. '           ' → logprob: -8.273627281188965
    4. '       ' → logprob: -9.523627281188965
    5. '   ' → logprob: -10.023627281188965
    6. '	l' → logprob: -11.773627281188965
    7. '               ' → logprob: -14.898627281188965
    8. '    ' → logprob: -15.398627281188965
    9. ',l' → logprob: -15.523627281188965
    10. '(l' → logprob: -15.648627281188965

Token 457: ',' (ID: 11)
  Prédit: ','
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ',' → logprob: -0.1384793519973755
    2. '=' → logprob: -2.138479232788086
    3. ' =' → logprob: -4.513479232788086
    4. '+=' → logprob: -8.763479232788086
    5. ' ,' → logprob: -8.763479232788086
    6. ' +=' → logprob: -8.888479232788086
    7. ',l' → logprob: -10.388479232788086
    8. ',s' → logprob: -12.513479232788086
    9. ',
' → logprob: -12.638479232788086
    10. 's' → logprob: -12.888479232788086

Token 458: ' xor' (ID: 106402)
  Prédit: 'xor'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'xor' → logprob: -0.16712094843387604
    2. ' xor' → logprob: -1.9171209335327148
    3. '=' → logprob: -5.667120933532715
    4. ' =' → logprob: -6.292120933532715
    5. ' process' → logprob: -7.042120933532715
    6. 'process' → logprob: -7.417120933532715
    7. 's' → logprob: -10.042120933532715
    8. ' s' → logprob: -11.542120933532715
    9. ' ' → logprob: -11.542120933532715
    10. 'x' → logprob: -11.667120933532715

Token 459: ' =' (ID: 314)
  Prédit: '='
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '=' → logprob: -0.01815064437687397
    2. ' =' → logprob: -4.018150806427002
    3. ',' → logprob: -14.268150329589844
    4. 'process' → logprob: -16.768150329589844
    5. '<|end|>' → logprob: -17.268150329589844
    6. ' ' → logprob: -17.393150329589844
    7. '＝' → logprob: -17.643150329589844
    8. '=user' → logprob: -18.268150329589844
    9. '(process' → logprob: -18.268150329589844
    10. '=
' → logprob: -18.268150329589844

Token 460: ' process' (ID: 2273)
  Prédit: ' process'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' process' → logprob: -0.47407791018486023
    2. 'process' → logprob: -0.9740779399871826
    3. ' proces' → logprob: -14.849078178405762
    4. '	process' → logprob: -15.099078178405762
    5. '(process' → logprob: -15.974078178405762
    6. '_process' → logprob: -16.724077224731445
    7. 'rocess' → logprob: -16.724077224731445
    8. 'proces' → logprob: -17.224077224731445
    9. '.process' → logprob: -17.599077224731445
    10. 'processable' → logprob: -19.724077224731445

Token 461: '_inner' (ID: 81672)
  Prédit: '_inner'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_inner' → logprob: -0.0009258725331164896
    2. '(s' → logprob: -7.0009260177612305
    3. 'inner' → logprob: -11.75092601776123
    4. '_outer' → logprob: -13.25092601776123
    5. '(inner' → logprob: -13.75092601776123
    6. '_in' → logprob: -14.12592601776123
    7. '_' → logprob: -14.50092601776123
    8. '_inside' → logprob: -14.62592601776123
    9. '_s' → logprob: -15.00092601776123
    10. 's' → logprob: -15.12592601776123

Token 462: '_' (ID: 62)
  Prédit: '_'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_' → logprob: -0.0004421127669047564
    2. 'while' → logprob: -7.750442028045654
    3. '(s' → logprob: -12.125442504882812
    4. 's' → logprob: -12.625442504882812
    5. '_s' → logprob: -13.375442504882812
    6. '```' → logprob: -14.375442504882812
    7. ' while' → logprob: -15.250442504882812
    8. '_wh' → logprob: -15.750442504882812
    9. 'While' → logprob: -17.000442504882812
    10. '(' → logprob: -17.375442504882812

Token 463: 'while' (ID: 7032)
  Prédit: 'while'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'while' → logprob: -4.453737710718997e-05
    2. 's' → logprob: -10.250044822692871
    3. '_' → logprob: -12.500044822692871
    4. ' while' → logprob: -12.625044822692871
    5. 'l' → logprob: -14.375044822692871
    6. 'While' → logprob: -14.750044822692871
    7. '```' → logprob: -15.125044822692871
    8. 'w' → logprob: -15.750044822692871
    9. '
' → logprob: -15.750044822692871
    10. '	while' → logprob: -16.500043869018555

Token 464: '(s' (ID: 1858)
  Prédit: '(s'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(s' → logprob: -1.9504606825648807e-05
    2. '(' → logprob: -11.000019073486328
    3. ' (' → logprob: -13.125019073486328
    4. '(
' → logprob: -14.625019073486328
    5. 's' → logprob: -16.000019073486328
    6. '(x' → logprob: -16.000019073486328
    7. '
' → logprob: -17.875019073486328
    8. '```' → logprob: -17.875019073486328
    9. '(ans' → logprob: -18.125019073486328
    10. '   ' → logprob: -18.125019073486328

Token 465: ',' (ID: 11)
  Prédit: ','
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ',' → logprob: -0.007436366286128759
    2. ',l' → logprob: -5.007436275482178
    3. ' ,' → logprob: -7.257436275482178
    4. '(l' → logprob: -12.382436752319336
    5. '   ' → logprob: -12.382436752319336
    6. ',
' → logprob: -12.757436752319336
    7. ',s' → logprob: -13.257436752319336
    8. '(' → logprob: -14.382436752319336
    9. ')' → logprob: -14.632436752319336
    10. '
' → logprob: -14.882436752319336

Token 466: ' l' (ID: 305)
  Prédit: 'l'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'l' → logprob: -0.0067176250740885735
    2. ' l' → logprob: -5.006717681884766
    3. '	l' → logprob: -13.381717681884766
    4. '   ' → logprob: -14.256717681884766
    5. ' ' → logprob: -17.131717681884766
    6. '
' → logprob: -18.881717681884766
    7. '  ' → logprob: -19.006717681884766
    8. '    ' → logprob: -19.131717681884766
    9. ')' → logprob: -19.256717681884766
    10. ',l' → logprob: -19.631717681884766

Token 467: ',' (ID: 11)
  Prédit: ','
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ',' → logprob: -0.003021679585799575
    2. ',A' → logprob: -5.878021717071533
    3. ' ,' → logprob: -9.003021240234375
    4. 'A' → logprob: -10.503021240234375
    5. ',r' → logprob: -10.628021240234375
    6. ',x' → logprob: -10.753021240234375
    7. '   ' → logprob: -12.253021240234375
    8. '```' → logprob: -12.628021240234375
    9. '           ' → logprob: -13.003021240234375
    10. ')' → logprob: -13.128021240234375

Token 468: ' xor' (ID: 106402)
  Prédit: 'xor'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'xor' → logprob: -0.28881409764289856
    2. 'A' → logprob: -1.4138140678405762
    3. ' xor' → logprob: -5.163814067840576
    4. ' A' → logprob: -6.288814067840576
    5. 'r' → logprob: -10.913814544677734
    6. '   ' → logprob: -11.538814544677734
    7. 'xr' → logprob: -11.913814544677734
    8. 'x' → logprob: -12.163814544677734
    9. 'copy' → logprob: -12.538814544677734
    10. ' ' → logprob: -12.538814544677734

Token 469: ',' (ID: 11)
  Prédit: ','
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ',' → logprob: -0.13136008381843567
    2. ')' → logprob: -2.3813600540161133
    3. ',r' → logprob: -3.6313600540161133
    4. ',val' → logprob: -6.131360054016113
    5. '_val' → logprob: -6.756360054016113
    6. ',A' → logprob: -8.506360054016113
    7. ' ,' → logprob: -8.881360054016113
    8. 'val' → logprob: -9.131360054016113
    9. ',n' → logprob: -9.881360054016113
    10. '   ' → logprob: -10.131360054016113

Token 470: ' A' (ID: 355)
  Prédit: 'A'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'A' → logprob: -0.003609101288020611
    2. ' A' → logprob: -5.6286091804504395
    3. ')' → logprob: -11.753608703613281
    4. '   ' → logprob: -14.003608703613281
    5. ' ' → logprob: -15.878608703613281
    6. '	A' → logprob: -16.50360870361328
    7. ')
' → logprob: -16.62860870361328
    8. '
' → logprob: -17.12860870361328
    9. '  ' → logprob: -17.62860870361328
    10. '```' → logprob: -17.75360870361328

Token 471: ')
' (ID: 446)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')' → logprob: -0.00010580805974313989
    2. ')
' → logprob: -9.250105857849121
    3. ' )' → logprob: -12.125105857849121
    4. '       ' → logprob: -13.500105857849121
    5. '   ' → logprob: -13.625105857849121
    6. ')return' → logprob: -14.375105857849121
    7. ')

' → logprob: -15.375105857849121
    8. ',' → logprob: -15.500105857849121
    9. '[r' → logprob: -15.625105857849121
    10. '           ' → logprob: -16.250104904174805

Token 472: '   ' (ID: 271)
  Prédit: 'if'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'if' → logprob: -0.783844530582428
    2. '<|end|>' → logprob: -1.1588444709777832
    3. '```' → logprob: -2.158844470977783
    4. '   ' → logprob: -3.408844470977783
    5. '       ' → logprob: -3.533844470977783
    6. 'solve' → logprob: -4.033844470977783
    7. 'continue' → logprob: -5.158844470977783
    8. ' if' → logprob: -5.158844470977783
    9. '           ' → logprob: -5.283844470977783
    10. 'print' → logprob: -5.658844470977783

Token 473: ' print' (ID: 2123)
  Prédit: ''
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False

Token 474: '(ans' (ID: 70054)
  Prédit: '(ans'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(ans' → logprob: -2.0339031834737398e-05
    2. '(' → logprob: -11.000020027160645
    3. 'ans' → logprob: -12.625020027160645
    4. '(answer' → logprob: -15.875020027160645
    5. '(
' → logprob: -16.00002098083496
    6. ' (' → logprob: -16.87502098083496
    7. '	ans' → logprob: -17.25002098083496
    8. '()' → logprob: -18.25002098083496
    9. '(abs' → logprob: -18.75002098083496
    10. '(a' → logprob: -19.00002098083496

Token 475: ')

' (ID: 1029)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ')' → logprob: -5.5577775128767826e-06
    2. ')
' → logprob: -12.875005722045898
    3. ' )' → logprob: -13.000005722045898
    4. ')`' → logprob: -15.625005722045898
    5. '())' → logprob: -15.875005722045898
    6. ')}' → logprob: -16.5000057220459
    7. '`)' → logprob: -16.5000057220459
    8. '()' → logprob: -16.7500057220459
    9. '))' → logprob: -16.7500057220459
    10. '}' → logprob: -17.5000057220459

Token 476: 'solve' (ID: 117273)
  Prédit: 'if'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'if' → logprob: -0.10619770735502243
    2. 'solve' → logprob: -2.6061975955963135
    3. '<|end|>' → logprob: -4.481197834014893
    4. '
' → logprob: -5.106197834014893
    5. '```' → logprob: -5.731197834014893
    6. '#' → logprob: -6.981197834014893
    7. '{' → logprob: -6.981197834014893
    8. '()' → logprob: -7.231197834014893
    9. ' if' → logprob: -7.231197834014893
    10. ' solve' → logprob: -7.606197834014893

Token 477: '()' (ID: 416)
  Prédit: ''
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False


RÉSUMÉ:
--------------------------------------------------------------------------------
Total des tokens analysés: 475
Tokens correctement prédits (1ère position, stricte): 195
Tokens correctement prédits (1ère position, avec adaptation): 213
Tokens correctement prédits (top 10): 398
Précision stricte (1ère position): 41.05%
Précision adaptée (1ère position): 44.84%
Précision (top 10): 83.79%
================================================================================
