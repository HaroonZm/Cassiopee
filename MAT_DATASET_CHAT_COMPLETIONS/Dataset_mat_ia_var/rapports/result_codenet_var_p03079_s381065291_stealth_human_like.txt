================================================================================
ANALYSE DE PRÉDICTION TOKEN PAR TOKEN (BATCH API)
Date: 2025-06-04 20:03:57
Modèle de tokenisation: gpt-4o-mini
================================================================================

SCRIPT ANALYSÉ:
--------------------------------------------------------------------------------
# valeurs lues en une fois, séparées par des espaces
A, B, C = [int(x) for x in input().split()]
# je suppose qu'il faut qu'ils soient tous pareils ?
if A == B and B == C:
    print("Yes") # on affiche Oui si tout va bien
else:
    print("No")   # sinon Non (dommage)
--------------------------------------------------------------------------------

RÉSULTATS D'ANALYSE TOKEN PAR TOKEN:
--------------------------------------------------------------------------------
Token 0: '#' (ID: 2)
  → Token d'amorce (pas de prédiction)

Token 1: ' valeurs' (ID: 73668)
  → Token d'amorce (pas de prédiction)

Token 2: ' l' (ID: 305)
  → Token d'amorce (pas de prédiction)

Token 3: 'ues' (ID: 1406)
  Prédit: 'iste'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'iste' → logprob: -1.0311071872711182
    2. 'ist' → logprob: -1.6561071872711182
    3. 'ignes' → logprob: -2.031107187271118
    4. 'i' → logprob: -2.281107187271118
    5. '=' → logprob: -2.906107187271118
    6. 'istes' → logprob: -3.656107187271118
    7. 'e' → logprob: -4.031106948852539
    8. 'igne' → logprob: -4.156106948852539
    9. 'es' → logprob: -4.656106948852539
    10. '```' → logprob: -4.781106948852539

Token 4: ' en' (ID: 469)
  Prédit: ':'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ':' → logprob: -0.9015570878982544
    2. '_' → logprob: -1.1515570878982544
    3. '=' → logprob: -2.151556968688965
    4. ' =' → logprob: -2.526556968688965
    5. '#' → logprob: -3.401556968688965
    6. ' ' → logprob: -3.901556968688965
    7. ' :' → logprob: -4.776556968688965
    8. ',' → logprob: -5.526556968688965
    9. '```' → logprob: -5.901556968688965
    10. '[' → logprob: -6.401556968688965

Token 5: ' une' (ID: 2463)
  Prédit: 'entrée'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'entrée' → logprob: -0.03980644419789314
    2. '#' → logprob: -4.789806365966797
    3. 'ent' → logprob: -4.789806365966797
    4. ' entrée' → logprob: -5.539806365966797
    5. 'python' → logprob: -5.539806365966797
    6. 'input' → logprob: -5.664806365966797
    7. 'f' → logprob: -6.289806365966797
    8. 'entr' → logprob: -6.914806365966797
    9. 'temps' → logprob: -6.914806365966797
    10. 'lecture' → logprob: -6.914806365966797

Token 6: ' fois' (ID: 14697)
  Prédit: 'se'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'se' → logprob: -0.6282865405082703
    2. 'ligne' → logprob: -0.8782865405082703
    3. 'fois' → logprob: -3.753286600112915
    4. ' seule' → logprob: -5.378286361694336
    5. 'line' → logprob: -5.628286361694336
    6. ' ' → logprob: -6.003286361694336
    7. 'l' → logprob: -6.003286361694336
    8. ' ligne' → logprob: -6.378286361694336
    9. ',' → logprob: -6.503286361694336
    10. 'f' → logprob: -7.003286361694336

Token 7: ',' (ID: 11)
  Prédit: ' ='
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' =' → logprob: -0.6446733474731445
    2. '_' → logprob: -2.2696733474731445
    3. ',' → logprob: -2.3946733474731445
    4. '=' → logprob: -2.7696733474731445
    5. ':' → logprob: -2.8946733474731445
    6. '#' → logprob: -3.2696733474731445
    7. 's' → logprob: -3.6446733474731445
    8. '```' → logprob: -3.7696733474731445
    9. ' ' → logprob: -4.3946733474731445
    10. 'val' → logprob: -4.7696733474731445

Token 8: ' sépar' (ID: 97160)
  Prédit: ' f'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' f' → logprob: -1.7485884428024292
    2. 'f' → logprob: -1.8735884428024292
    3. 's' → logprob: -1.8735884428024292
    4. ' =' → logprob: -2.2485885620117188
    5. 'data' → logprob: -2.4985885620117188
    6. ' avec' → logprob: -3.1235885620117188
    7. ' data' → logprob: -3.2485885620117188
    8. 'avec' → logprob: -3.6235885620117188
    9. 'values' → logprob: -3.7485885620117188
    10. 'input' → logprob: -4.373588562011719

Token 9: 'ées' (ID: 5161)
  Prédit: '#'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '#' → logprob: -1.3188568353652954
    2. 'r' → logprob: -1.5688568353652954
    3. '`' → logprob: -2.193856716156006
    4. 'par' → logprob: -2.318856716156006
    5. '```' → logprob: -2.568856716156006
    6. 'es' → logprob: -2.693856716156006
    7. ',' → logprob: -3.193856716156006
    8. 'ées' → logprob: -3.443856716156006
    9. 'é' → logprob: -4.068856716156006
    10. ' par' → logprob: -4.068856716156006

Token 10: ' par' (ID: 686)
  Prédit: 'par'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'par' → logprob: -0.08016086369752884
    2. '=' → logprob: -2.8301608562469482
    3. ',' → logprob: -4.455161094665527
    4. ';' → logprob: -6.830161094665527
    5. ' par' → logprob: -7.205161094665527
    6. ' =' → logprob: -7.330161094665527
    7. '_par' → logprob: -7.455161094665527
    8. ':' → logprob: -7.830161094665527
    9. '[:]' → logprob: -7.955161094665527
    10. '```' → logprob: -7.955161094665527

Token 11: ' des' (ID: 731)
  Prédit: 'des'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'des' → logprob: -0.9699233770370483
    2. 'es' → logprob: -1.3449233770370483
    3. 'esp' → logprob: -1.4699233770370483
    4. 'un' → logprob: -2.594923496246338
    5. ' des' → logprob: -4.969923496246338
    6. 'une' → logprob: -5.094923496246338
    7. 'spaces' → logprob: -5.094923496246338
    8. ''esp' → logprob: -5.344923496246338
    9. '```' → logprob: -5.344923496246338
    10. 'space' → logprob: -5.469923496246338

Token 12: ' espaces' (ID: 98361)
  Prédit: 'esp'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'esp' → logprob: -0.11569353938102722
    2. 'es' → logprob: -2.9906935691833496
    3. ''esp' → logprob: -3.6156935691833496
    4. ' espaces' → logprob: -4.61569356918335
    5. 'vir' → logprob: -5.24069356918335
    6. ''espace' → logprob: -5.36569356918335
    7. 'spaces' → logprob: -5.49069356918335
    8. 'space' → logprob: -6.49069356918335
    9. ''' → logprob: -6.86569356918335
    10. '```' → logprob: -6.99069356918335

Token 13: '
' (ID: 198)
  Prédit: 'n'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'n' → logprob: -1.4020367860794067
    2. 'input' → logprob: -1.5270367860794067
    3. 'v' → logprob: -1.5270367860794067
    4. '=' → logprob: -2.277036666870117
    5. 'x' → logprob: -3.152036666870117
    6. 'values' → logprob: -3.277036666870117
    7. 'val' → logprob: -3.527036666870117
    8. 'a' → logprob: -3.652036666870117
    9. 'i' → logprob: -4.152036666870117
    10. 'data' → logprob: -4.277036666870117

Token 14: 'A' (ID: 32)
  Prédit: 'n'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'n' → logprob: -0.8488446474075317
    2. 'v' → logprob: -1.3488446474075317
    3. 'x' → logprob: -2.348844528198242
    4. 'l' → logprob: -2.973844528198242
    5. 'val' → logprob: -3.223844528198242
    6. 'a' → logprob: -3.723844528198242
    7. 'data' → logprob: -4.223844528198242
    8. 'values' → logprob: -4.223844528198242
    9. 'input' → logprob: -4.473844528198242
    10. 'd' → logprob: -4.848844528198242

Token 15: ',' (ID: 11)
  Prédit: ' ='
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' =' → logprob: -0.42482051253318787
    2. '=' → logprob: -1.7998205423355103
    3. '=input' → logprob: -2.2998204231262207
    4. ',' → logprob: -2.9248204231262207
    5. 'input' → logprob: -4.799820423126221
    6. '[' → logprob: -5.924820423126221
    7. '#' → logprob: -5.924820423126221
    8. '   ' → logprob: -6.674820423126221
    9. ',b' → logprob: -6.799820423126221
    10. '=int' → logprob: -7.299820423126221

Token 16: ' B' (ID: 418)
  Prédit: 'B'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'B' → logprob: -0.09521424770355225
    2. ' B' → logprob: -2.470214366912842
    3. '*' → logprob: -6.095214366912842
    4. 'input' → logprob: -6.345214366912842
    5. ' ' → logprob: -7.095214366912842
    6. ' =' → logprob: -7.595214366912842
    7. '=' → logprob: -8.595213890075684
    8. ' input' → logprob: -8.720213890075684
    9. 'space' → logprob: -8.845213890075684
    10. 'b' → logprob: -8.970213890075684

Token 17: ',' (ID: 11)
  Prédit: ' ='
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' =' → logprob: -0.26633426547050476
    2. '=' → logprob: -1.5163342952728271
    3. ',' → logprob: -4.266334056854248
    4. '=input' → logprob: -8.391334533691406
    5. ' ,' → logprob: -11.391334533691406
    6. 'input' → logprob: -11.391334533691406
    7. '=int' → logprob: -12.391334533691406
    8. ' ' → logprob: -12.891334533691406
    9. 's' → logprob: -13.016334533691406
    10. ')' → logprob: -13.391334533691406

Token 18: ' C' (ID: 363)
  Prédit: 'C'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'C' → logprob: -0.5380328893661499
    2. ' C' → logprob: -1.03803288936615
    3. ' =' → logprob: -3.1630330085754395
    4. '=' → logprob: -4.0380330085754395
    5. ' ' → logprob: -6.9130330085754395
    6. ',' → logprob: -8.038032531738281
    7. '=input' → logprob: -8.663032531738281
    8. '=C' → logprob: -9.163032531738281
    9. '*' → logprob: -9.288032531738281
    10. '_' → logprob: -9.413032531738281

Token 19: ' =' (ID: 314)
  Prédit: ' ='
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' =' → logprob: -0.31764844059944153
    2. '=' → logprob: -1.3176484107971191
    3. ',' → logprob: -5.442648410797119
    4. '=input' → logprob: -10.192648887634277
    5. ' ,' → logprob: -12.692648887634277
    6. 's' → logprob: -13.317648887634277
    7. '.' → logprob: -13.817648887634277
    8. ')' → logprob: -14.192648887634277
    9. ' ' → logprob: -14.317648887634277
    10. 'input' → logprob: -14.317648887634277

Token 20: ' [' (ID: 723)
  Prédit: ' input'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' input' → logprob: -0.824428915977478
    2. ' map' → logprob: -0.949428915977478
    3. 'input' → logprob: -2.3244290351867676
    4. 'map' → logprob: -2.5744290351867676
    5. ' list' → logprob: -8.19942855834961
    6. ' [' → logprob: -8.94942855834961
    7. 'list' → logprob: -9.94942855834961
    8. ' ' → logprob: -10.94942855834961
    9. '[' → logprob: -11.44942855834961
    10. '[input' → logprob: -11.44942855834961

Token 21: 'int' (ID: 491)
  Prédit: 'int'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'int' → logprob: -0.0009414771921001375
    2. 'float' → logprob: -7.625941276550293
    3. '*' → logprob: -8.125941276550293
    4. ' int' → logprob: -9.250941276550293
    5. 'map' → logprob: -9.750941276550293
    6. '```' → logprob: -13.875941276550293
    7. ' float' → logprob: -14.250941276550293
    8. ']int' → logprob: -15.250941276550293
    9. '(int' → logprob: -15.375941276550293
    10. '0' → logprob: -15.375941276550293

Token 22: '(x' (ID: 4061)
  Prédit: '(x'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(x' → logprob: -0.10176127403974533
    2. '(i' → logprob: -2.3517613410949707
    3. '(s' → logprob: -7.101761341094971
    4. '(input' → logprob: -7.976761341094971
    5. '(' → logprob: -8.226760864257812
    6. ']' → logprob: -9.351760864257812
    7. '(token' → logprob: -11.351760864257812
    8. '(_)' → logprob: -12.476760864257812
    9. 'x' → logprob: -12.726760864257812
    10. '()]' → logprob: -12.976760864257812

Token 23: ')' (ID: 8)
  Prédit: ')'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')' → logprob: -1.1875571544806007e-05
    2. 'for' → logprob: -12.500011444091797
    3. ' )' → logprob: -12.500011444091797
    4. ' for' → logprob: -13.500011444091797
    5. ')i' → logprob: -14.125011444091797
    6. '())' → logprob: -14.625011444091797
    7. '(x' → logprob: -15.375011444091797
    8. '(i' → logprob: -15.500011444091797
    9. 'input' → logprob: -15.625011444091797
    10. '(' → logprob: -16.000011444091797

Token 24: ' for' (ID: 395)
  Prédit: 'for'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'for' → logprob: -0.5261363387107849
    2. ' for' → logprob: -0.9011363387107849
    3. ')' → logprob: -6.27613639831543
    4. 'i' → logprob: -7.52613639831543
    5. '(i' → logprob: -8.90113639831543
    6. ']' → logprob: -9.02613639831543
    7. 'in' → logprob: -9.40113639831543
    8. ' i' → logprob: -9.65113639831543
    9. '(s' → logprob: -10.40113639831543
    10. ' in' → logprob: -10.77613639831543

Token 25: ' x' (ID: 1215)
  Prédit: ' input'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' input' → logprob: -0.1269349306821823
    2. 'input' → logprob: -2.1269350051879883
    3. '=input' → logprob: -12.751935005187988
    4. ' in' → logprob: -13.376935005187988
    5. ' ' → logprob: -14.001935005187988
    6. '(input' → logprob: -14.751935005187988
    7. '	input' → logprob: -15.251935005187988
    8. '<input' → logprob: -15.876935005187988
    9. ' ' → logprob: -16.001934051513672
    10. 'in' → logprob: -16.001934051513672

Token 26: ' in' (ID: 306)
  Prédit: ' in'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' in' → logprob: -0.3322587311267853
    2. ' input' → logprob: -1.582258701324463
    3. 'input' → logprob: -2.707258701324463
    4. 'in' → logprob: -5.207258701324463
    5. '=input' → logprob: -5.707258701324463
    6. '(input' → logprob: -6.582258701324463
    7. ' ' → logprob: -8.832259178161621
    8. ',input' → logprob: -10.582259178161621
    9. '<|end|>' → logprob: -11.207259178161621
    10. '	input' → logprob: -11.332259178161621

Token 27: ' input' (ID: 3422)
  Prédit: 'input'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'input' → logprob: -0.25193437933921814
    2. ' input' → logprob: -1.5019344091415405
    3. '(input' → logprob: -12.876934051513672
    4. '=input' → logprob: -14.126934051513672
    5. ' ' → logprob: -14.626934051513672
    6. '<input' → logprob: -15.001934051513672
    7. '.input' → logprob: -15.626934051513672
    8. '[input' → logprob: -15.626934051513672
    9. ',input' → logprob: -15.751934051513672
    10. '```' → logprob: -15.876934051513672

Token 28: '().' (ID: 1454)
  Prédit: '().'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '().' → logprob: -0.08923956006765366
    2. '()' → logprob: -2.5892395973205566
    3. '()]' → logprob: -4.589239597320557
    4. '(' → logprob: -9.464239120483398
    5. '()].' → logprob: -10.214239120483398
    6. ' ()' → logprob: -11.964239120483398
    7. ' ().' → logprob: -12.214239120483398
    8. '())' → logprob: -12.339239120483398
    9. '("' → logprob: -13.589239120483398
    10. '()`' → logprob: -13.964239120483398

Token 29: 'split' (ID: 13627)
  Prédit: 'split'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'split' → logprob: -0.0009156247251667082
    2. 'strip' → logprob: -7.00091552734375
    3. 'rstrip' → logprob: -12.50091552734375
    4. ' split' → logprob: -14.75091552734375
    5. 'spl' → logprob: -15.87591552734375
    6. '(split' → logprob: -18.62591552734375
    7. 'sp' → logprob: -19.00091552734375
    8. 's' → logprob: -19.62591552734375
    9. '.split' → logprob: -20.25091552734375
    10. 'replace' → logprob: -20.25091552734375

Token 30: '()]
' (ID: 67155)
  Prédit: '()]'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '()]' → logprob: -0.024285268038511276
    2. '())' → logprob: -4.024285316467285
    3. '()' → logprob: -5.274285316467285
    4. '(' → logprob: -7.024285316467285
    5. '('' → logprob: -9.274285316467285
    6. ')]' → logprob: -13.024285316467285
    7. '("' → logprob: -13.649285316467285
    8. '()))' → logprob: -13.649285316467285
    9. '()]
' → logprob: -13.774285316467285
    10. '()`' → logprob: -13.899285316467285

Token 31: '#' (ID: 2)
  Prédit: 'if'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'if' → logprob: -0.7048607468605042
    2. '#' → logprob: -0.8298607468605042
    3. '
' → logprob: -4.329860687255859
    4. '+' → logprob: -4.329860687255859
    5. 'print' → logprob: -4.579860687255859
    6. ')' → logprob: -4.954860687255859
    7. 'i' → logprob: -5.454860687255859
    8. '<|end|>' → logprob: -5.454860687255859
    9. ',' → logprob: -5.704860687255859
    10. ' if' → logprob: -5.829860687255859

Token 32: ' je' (ID: 1264)
  Prédit: 'if'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'if' → logprob: -0.022779596969485283
    2. ' if' → logprob: -4.89777946472168
    3. 'print' → logprob: -5.39777946472168
    4. 'D' → logprob: -5.77277946472168
    5. '#' → logprob: -5.89777946472168
    6. 'A' → logprob: -6.39777946472168
    7. 'max' → logprob: -7.77277946472168
    8. 'i' → logprob: -7.77277946472168
    9. 'def' → logprob: -7.77277946472168
    10. 'sum' → logprob: -8.14777946472168

Token 33: ' suppose' (ID: 35968)
  Prédit: 'f'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'f' → logprob: -0.37171170115470886
    2. ' veux' → logprob: -1.9967117309570312
    3. ' souhaite' → logprob: -3.6217117309570312
    4. 'veux' → logprob: -3.7467117309570312
    5. ' vais' → logprob: -4.121711730957031
    6. ' ' → logprob: -4.246711730957031
    7. 'n' → logprob: -4.496711730957031
    8. 's' → logprob: -4.496711730957031
    9. '_' → logprob: -4.871711730957031
    10. 'voud' → logprob: -4.871711730957031

Token 34: ' qu' (ID: 474)
  Prédit: ' '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' ' → logprob: -0.3843374252319336
    2. ' que' → logprob: -1.5093374252319336
    3. '<|end|>' → logprob: -3.5093374252319336
    4. '_' → logprob: -3.8843374252319336
    5. ' ' → logprob: -5.009337425231934
    6. ' that' → logprob: -5.009337425231934
    7. 's' → logprob: -5.384337425231934
    8. '  ' → logprob: -5.634337425231934
    9. '#' → logprob: -5.884337425231934
    10. ''' → logprob: -6.009337425231934

Token 35: ''il' (ID: 14683)
  Prédit: 'e'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'e' → logprob: -0.22664445638656616
    2. ''' → logprob: -1.726644515991211
    3. 'u' → logprob: -5.101644515991211
    4. ''on' → logprob: -5.101644515991211
    5. ''il' → logprob: -5.226644515991211
    6. 'que' → logprob: -6.851644515991211
    7. '_' → logprob: -6.976644515991211
    8. 'a' → logprob: -7.226644515991211
    9. ''une' → logprob: -7.351644515991211
    10. ' que' → logprob: -8.101644515991211

Token 36: ' faut' (ID: 17821)
  Prédit: 's'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 's' → logprob: -0.6097108125686646
    2. 'f' → logprob: -1.2347108125686646
    3. ' faut' → logprob: -1.9847108125686646
    4. 'est' → logprob: -5.359710693359375
    5. ' f' → logprob: -5.484710693359375
    6. ' manque' → logprob: -5.484710693359375
    7. ' faudra' → logprob: -5.484710693359375
    8. ' s' → logprob: -5.609710693359375
    9. ' faudrait' → logprob: -6.734710693359375
    10. ' y' → logprob: -6.734710693359375

Token 37: ' qu' (ID: 474)
  Prédit: 'tr'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'tr' → logprob: -0.5210327506065369
    2. 'aff' → logprob: -1.3960328102111816
    3. ' déterminer' → logprob: -4.021032810211182
    4. 'calcul' → logprob: -4.146032810211182
    5. ' afficher' → logprob: -4.146032810211182
    6. ' vérifier' → logprob: -4.396032810211182
    7. 'aj' → logprob: -4.521032810211182
    8. ' calcul' → logprob: -5.021032810211182
    9. 'ré' → logprob: -5.146032810211182
    10. 'dé' → logprob: -5.146032810211182

Token 38: ''ils' (ID: 41108)
  Prédit: ''on'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ''on' → logprob: -0.4054587781429291
    2. 'e' → logprob: -1.1554588079452515
    3. ''il' → logprob: -5.030458927154541
    4. 'u' → logprob: -5.780458927154541
    5. ''' → logprob: -6.405458927154541
    6. '#' → logprob: -6.530458927154541
    7. 'ue' → logprob: -6.655458927154541
    8. ' on' → logprob: -6.655458927154541
    9. 'on' → logprob: -7.155458927154541
    10. ''''' → logprob: -7.905458927154541

Token 39: ' soient' (ID: 59497)
  Prédit: ' soient'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' soient' → logprob: -0.580373227596283
    2. 's' → logprob: -1.0803732872009277
    3. 'so' → logprob: -3.8303732872009277
    4. ' f' → logprob: -4.205373287200928
    5. 'f' → logprob: -4.455373287200928
    6. ' puissent' → logprob: -4.705373287200928
    7. ' sois' → logprob: -5.330373287200928
    8. 'tr' → logprob: -5.330373287200928
    9. ' réalis' → logprob: -5.830373287200928
    10. ' s' → logprob: -6.080373287200928

Token 40: ' tous' (ID: 10688)
  Prédit: 'dans'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'dans' → logprob: -0.9398505091667175
    2. ' tri' → logprob: -1.9398505687713623
    3. ' dans' → logprob: -2.3148505687713623
    4. 'tri' → logprob: -2.3148505687713623
    5. ' en' → logprob: -2.8148505687713623
    6. 'en' → logprob: -3.4398505687713623
    7. 't' → logprob: -3.5648505687713623
    8. 'strict' → logprob: -3.9398505687713623
    9. 'distinct' → logprob: -4.439850330352783
    10. ' ord' → logprob: -4.564850330352783

Token 41: ' pare' (ID: 9160)
  Prédit: 'posit'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'posit' → logprob: -0.31483402848243713
    2. '>' → logprob: -2.0648341178894043
    3. 'strict' → logprob: -3.1898341178894043
    4. ' posit' → logprob: -3.4398341178894043
    5. '>=' → logprob: -4.064834117889404
    6. 'positive' → logprob: -4.189834117889404
    7. 'sup' → logprob: -4.439834117889404
    8. ' >' → logprob: -5.564834117889404
    9. 'diff' → logprob: -5.689834117889404
    10. 'distinct' → logprob: -5.939834117889404

Token 42: 'ils' (ID: 5879)
  Prédit: 'ils'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'ils' → logprob: -0.001675302512012422
    2. 'il' → logprob: -6.501675128936768
    3. 's' → logprob: -9.501675605773926
    4. 'ls' → logprob: -9.876675605773926
    5. 'i' → logprob: -11.376675605773926
    6. 'illes' → logprob: -11.751675605773926
    7. 'ds' → logprob: -12.501675605773926
    8. 'ille' → logprob: -12.501675605773926
    9. '-ils' → logprob: -13.001675605773926
    10. '```' → logprob: -13.126675605773926

Token 43: ' ?
' (ID: 19740)
  Prédit: 'if'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'if' → logprob: -0.5201268792152405
    2. ' if' → logprob: -1.2701268196105957
    3. ':' → logprob: -2.2701268196105957
    4. '
' → logprob: -4.770126819610596
    5. ',' → logprob: -5.020126819610596
    6. 'i' → logprob: -6.520126819610596
    7. ':
' → logprob: -6.645126819610596
    8. ' ' → logprob: -7.270126819610596
    9. ' 
' → logprob: -7.395126819610596
    10. ' and' → logprob: -8.020127296447754

Token 44: 'if' (ID: 366)
  Prédit: 'if'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'if' → logprob: -0.07409830391407013
    2. ' if' → logprob: -2.6990983486175537
    3. '
' → logprob: -6.199098110198975
    4. 'i' → logprob: -6.699098110198975
    5. ':' → logprob: -7.574098110198975
    6. '```' → logprob: -9.449098587036133
    7. ' 
' → logprob: -9.699098587036133
    8. ',' → logprob: -9.949098587036133
    9. ' i' → logprob: -10.574098587036133
    10. '\n' → logprob: -10.949098587036133

Token 45: ' A' (ID: 355)
  Prédit: ' A'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' A' → logprob: -0.023277508094906807
    2. 'A' → logprob: -3.773277521133423
    3. ' ' → logprob: -10.398277282714844
    4. ' (' → logprob: -14.148277282714844
    5. '  ' → logprob: -14.773277282714844
    6. '(' → logprob: -15.148277282714844
    7. ' ' → logprob: -16.023277282714844
    8. '	A' → logprob: -16.523277282714844
    9. '(A' → logprob: -16.773277282714844
    10. '   ' → logprob: -17.273277282714844

Token 46: ' ==' (ID: 951)
  Prédit: ' =='
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' ==' → logprob: -0.018381712958216667
    2. '==' → logprob: -4.018381595611572
    3. ' !=' → logprob: -8.89338207244873
    4. '=' → logprob: -9.89338207244873
    5. ' =' → logprob: -10.51838207244873
    6. ' ' → logprob: -12.01838207244873
    7. '!=' → logprob: -12.51838207244873
    8. ' ' → logprob: -13.51838207244873
    9. '>' → logprob: -13.89338207244873
    10. ')' → logprob: -13.89338207244873

Token 47: ' B' (ID: 418)
  Prédit: 'B'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'B' → logprob: -0.5759397745132446
    2. ' B' → logprob: -0.8259397745132446
    3. ' ' → logprob: -14.950940132141113
    4. '	B' → logprob: -18.950939178466797
    5. '  ' → logprob: -19.200939178466797
    6. '=B' → logprob: -19.200939178466797
    7. 'A' → logprob: -19.575939178466797
    8. 'b' → logprob: -19.700939178466797
    9. '1' → logprob: -20.450939178466797
    10. '   ' → logprob: -20.575939178466797

Token 48: ' and' (ID: 326)
  Prédit: ' =='
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' ==' → logprob: -0.04210364818572998
    2. '==' → logprob: -3.5421037673950195
    3. ' and' → logprob: -4.4171037673950195
    4. 'and' → logprob: -8.54210376739502
    5. ' ' → logprob: -11.54210376739502
    6. ' ' → logprob: -13.54210376739502
    7. '=' → logprob: -14.66710376739502
    8. ' ==
' → logprob: -15.41710376739502
    9. '==
' → logprob: -15.79210376739502
    10. 'a' → logprob: -15.91710376739502

Token 49: ' B' (ID: 418)
  Prédit: ' C'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' C' → logprob: -0.4993723928928375
    2. ' B' → logprob: -0.9993723630905151
    3. ' ' → logprob: -3.7493724822998047
    4. 'C' → logprob: -7.499372482299805
    5. ' A' → logprob: -7.749372482299805
    6. 'B' → logprob: -7.999372482299805
    7. ' ' → logprob: -9.374372482299805
    8. '  ' → logprob: -10.499372482299805
    9. '<|end|>' → logprob: -13.124372482299805
    10. 'A' → logprob: -13.124372482299805

Token 50: ' ==' (ID: 951)
  Prédit: '=='
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '==' → logprob: -0.47407910227775574
    2. ' ==' → logprob: -0.9740791320800781
    3. '==
' → logprob: -13.974079132080078
    4. '=' → logprob: -14.599079132080078
    5. ' ' → logprob: -15.224079132080078
    6. ' and' → logprob: -15.974079132080078
    7. ')==' → logprob: -16.474079132080078
    8. '===' → logprob: -16.474079132080078
    9. 'and' → logprob: -16.724079132080078
    10. ']==' → logprob: -16.974079132080078

Token 51: ' C' (ID: 363)
  Prédit: 'C'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'C' → logprob: -0.038042064756155014
    2. ' C' → logprob: -3.2880420684814453
    3. ' ' → logprob: -14.913042068481445
    4. '	C' → logprob: -16.538042068481445
    5. ' ' → logprob: -16.538042068481445
    6. 'c' → logprob: -17.413042068481445
    7. '>C' → logprob: -17.663042068481445
    8. '_C' → logprob: -17.788042068481445
    9. '```' → logprob: -17.913042068481445
    10. '  ' → logprob: -18.288042068481445

Token 52: ':
' (ID: 734)
  Prédit: ':'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ':' → logprob: -0.1002325564622879
    2. ' :' → logprob: -2.3502326011657715
    3. ' and' → logprob: -10.850232124328613
    4. 'and' → logprob: -13.725232124328613
    5. '):' → logprob: -13.725232124328613
    6. ':**' → logprob: -13.725232124328613
    7. '>:' → logprob: -13.850232124328613
    8. ':
' → logprob: -14.350232124328613
    9. ' :
' → logprob: -15.350232124328613
    10. ' :]' → logprob: -15.725232124328613

Token 53: '   ' (ID: 271)
  Prédit: ':'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ':' → logprob: -0.00279263430275023
    2. ' :' → logprob: -6.127792835235596
    3. ':
' → logprob: -7.752792835235596
    4. '   ' → logprob: -8.877792358398438
    5. ' print' → logprob: -11.127792358398438
    6. 'print' → logprob: -11.877792358398438
    7. ' :
' → logprob: -12.127792358398438
    8. ' and' → logprob: -12.377792358398438
    9. ',' → logprob: -13.252792358398438
    10. '	print' → logprob: -14.127792358398438

Token 54: ' print' (ID: 2123)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -1.0222880840301514
    2. ' print' → logprob: -1.0222880840301514
    3. 'print' (adapté à ' print') → logprob: -1.2722880840301514
    4. ' ' → logprob: -9.89728832244873
    5. ' pass' → logprob: -10.02228832244873
    6. '    ' → logprob: -10.39728832244873
    7. 'pass' → logprob: -10.64728832244873
    8. ':' → logprob: -10.77228832244873
    9. '    
' → logprob: -10.77228832244873
    10. '	print' → logprob: -10.89728832244873

Token 55: '("' (ID: 568)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(' → logprob: -0.05660121142864227
    2. '("' → logprob: -3.6816012859344482
    3. '(A' → logprob: -3.8066012859344482
    4. '("("' → logprob: -5.556601047515869
    5. '('' → logprob: -5.681601047515869
    6. '(True' → logprob: -8.056601524353027
    7. '((' → logprob: -12.056601524353027
    8. '()' → logprob: -12.556601524353027
    9. '("(' → logprob: -12.681601524353027
    10. '(B' → logprob: -12.931601524353027

Token 56: 'Yes' (ID: 13022)
  Prédit: 'O'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'O' → logprob: -1.688232421875
    2. 'E' → logprob: -1.938232421875
    3. 'OK' → logprob: -1.938232421875
    4. 'É' → logprob: -1.938232421875
    5. 'EG' → logprob: -2.313232421875
    6. 'égalité' → logprob: -2.438232421875
    7. 'egal' → logprob: -2.688232421875
    8. 'oui' → logprob: -3.563232421875
    9. 'YES' → logprob: -3.938232421875
    10. 'Equal' → logprob: -4.188232421875

Token 57: '")' (ID: 1405)
  Prédit: '")'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '")' → logprob: -3.333223139634356e-05
    2. '!")' → logprob: -10.750033378601074
    3. ')")' → logprob: -12.375033378601074
    4. '")
' → logprob: -12.375033378601074
    5. '"' → logprob: -13.250033378601074
    6. ')' → logprob: -13.625033378601074
    7. ' ")' → logprob: -16.375032424926758
    8. '”)' → logprob: -16.375032424926758
    9. '")
' → logprob: -17.000032424926758
    10. '\")' → logprob: -17.125032424926758

Token 58: ' #' (ID: 1069)
  Prédit: 'else'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'else' → logprob: -0.011285721324384212
    2. ' else' → logprob: -4.761285781860352
    3. '<|end|>' → logprob: -6.011285781860352
    4. 'e' → logprob: -9.886285781860352
    5. '```' → logprob: -10.136285781860352
    6. '<|end|>' → logprob: -10.511285781860352
    7. 'elif' → logprob: -10.761285781860352
    8. ')' → logprob: -10.886285781860352
    9. 'es' → logprob: -11.636285781860352
    10. '!' → logprob: -12.011285781860352

Token 59: ' on' (ID: 402)
  Prédit: ' else'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' else' → logprob: -1.0151937007904053
    2. 'else' → logprob: -1.1401937007904053
    3. '<|end|>' → logprob: -1.2651937007904053
    4. '<|end|>' → logprob: -4.015193939208984
    5. '
' → logprob: -5.515193939208984
    6. ')' → logprob: -6.015193939208984
    7. '!' → logprob: -6.390193939208984
    8. '#' → logprob: -6.515193939208984
    9. ',' → logprob: -6.640193939208984
    10. '```' → logprob: -7.140193939208984

Token 60: ' affiche' (ID: 127479)
  Prédit: ' continue'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' continue' → logprob: -0.2627973258495331
    2. ' peut' → logprob: -2.5127973556518555
    3. ' suppose' → logprob: -2.8877973556518555
    4. ' a' → logprob: -4.2627973556518555
    5. ' print' → logprob: -4.2627973556518555
    6. ' ' → logprob: -4.6377973556518555
    7. ' n' → logprob: -5.2627973556518555
    8. ' considère' → logprob: -5.3877973556518555
    9. ' veut' → logprob: -5.5127973556518555
    10. ' peux' → logprob: -5.6377973556518555

Token 61: ' Oui' (ID: 87429)
  Prédit: ''
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False

Token 62: ' si' (ID: 1784)
  Prédit: 'else'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'else' → logprob: -0.44837191700935364
    2. '<|end|>' → logprob: -1.3233718872070312
    3. '```' → logprob: -2.9483718872070312
    4. ' else' → logprob: -4.573371887207031
    5. '!' → logprob: -4.823371887207031
    6. 'es' → logprob: -4.823371887207031
    7. 's' → logprob: -5.448371887207031
    8. 'e' → logprob: -5.573371887207031
    9. '#' → logprob: -5.698371887207031
    10. ')' → logprob: -6.573371887207031

Token 63: ' tout' (ID: 5501)
  Prédit: ' les'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' les' → logprob: -1.2237269878387451
    2. ' ils' → logprob: -1.4737269878387451
    3. 'les' → logprob: -1.4737269878387451
    4. 't' → logprob: -2.098726987838745
    5. ' they' → logprob: -3.348726987838745
    6. 'ils' → logprob: -3.598726987838745
    7. ' c' → logprob: -4.223727226257324
    8. ' tous' → logprob: -4.473727226257324
    9. 'tout' → logprob: -4.848727226257324
    10. ' all' → logprob: -5.223727226257324

Token 64: ' va' (ID: 3423)
  Prédit: ' est'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' est' → logprob: -0.2605436444282532
    2. 'est' → logprob: -2.1355435848236084
    3. 's' → logprob: -2.8855435848236084
    4. 'le' → logprob: -3.5105435848236084
    5. ' le' → logprob: -3.8855435848236084
    6. ' ' → logprob: -6.0105438232421875
    7. 'es' → logprob: -7.3855438232421875
    8. 'e' → logprob: -7.7605438232421875
    9. '  ' → logprob: -8.135543823242188
    10. '   ' → logprob: -8.260543823242188

Token 65: ' bien' (ID: 5340)
  Prédit: 'bien'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'bien' → logprob: -0.20489558577537537
    2. ' bien' → logprob: -1.7048956155776978
    3. ' ' → logprob: -6.329895496368408
    4. 'Bien' → logprob: -7.329895496368408
    5. ' ' → logprob: -7.954895496368408
    6. 'b' → logprob: -8.829895973205566
    7. 't' → logprob: -9.454895973205566
    8. 's' → logprob: -9.829895973205566
    9. '!' → logprob: -10.329895973205566
    10. ' biens' → logprob: -10.329895973205566

Token 66: '
' (ID: 198)
  Prédit: 'else'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'else' → logprob: -0.02777783013880253
    2. '<|end|>' → logprob: -3.777777910232544
    3. ' else' → logprob: -5.902777671813965
    4. 'es' → logprob: -7.652777671813965
    5. '```' → logprob: -8.027777671813965
    6. 'e' → logprob: -8.152777671813965
    7. '#else' → logprob: -9.402777671813965
    8. '
' → logprob: -9.402777671813965
    9. '<|end|>' → logprob: -9.527777671813965
    10. 'elser' → logprob: -9.777777671813965

Token 67: 'else' (ID: 2807)
  Prédit: 'else'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'else' → logprob: -0.008710538037121296
    2. ' else' → logprob: -4.7587103843688965
    3. '<|end|>' → logprob: -9.633710861206055
    4. 'elif' → logprob: -11.758710861206055
    5. 'elser' → logprob: -12.633710861206055
    6. 'e' → logprob: -12.758710861206055
    7. '```' → logprob: -12.883710861206055
    8. '_else' → logprob: -13.258710861206055
    9. '#else' → logprob: -13.258710861206055
    10. '
' → logprob: -13.383710861206055

Token 68: ':
' (ID: 734)
  Prédit: ':'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ':' → logprob: -0.0021979559678584337
    2. ':
' → logprob: -6.127197742462158
    3. '   ' → logprob: -11.627198219299316
    4. ' :' → logprob: -12.627198219299316
    5. ':

' → logprob: -15.377198219299316
    6. 'print' → logprob: -15.752198219299316
    7. ':
' → logprob: -15.877198219299316
    8. ' :
' → logprob: -16.127197265625
    9. ' print' → logprob: -17.002197265625
    10. '  ' → logprob: -18.752197265625

Token 69: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.00042268994729965925
    2. ' print' → logprob: -8.375422477722168
    3. 'print' → logprob: -8.750422477722168
    4. '    ' → logprob: -10.750422477722168
    5. '    
' → logprob: -12.000422477722168
    6. '   ' → logprob: -13.375422477722168
    7. '	print' → logprob: -13.750422477722168
    8. '
' → logprob: -14.375422477722168
    9. '```' → logprob: -14.500422477722168
    10. '       ' → logprob: -14.750422477722168

Token 70: ' print' (ID: 2123)
  Prédit: 'print'
  Correct (stricte): False
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'print' (adapté à ' print') → logprob: -0.419721394777298
    2. '   ' → logprob: -1.4197213649749756
    3. ' print' → logprob: -2.2947213649749756
    4. '    ' → logprob: -9.294721603393555
    5. ' ' → logprob: -9.794721603393555
    6. '	print' → logprob: -10.669721603393555
    7. '       ' → logprob: -12.169721603393555
    8. '```' → logprob: -12.294721603393555
    9. '  ' → logprob: -12.419721603393555
    10. '(print' → logprob: -12.794721603393555

Token 71: '("' (ID: 568)
  Prédit: '("'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '("' → logprob: -0.04862154647707939
    2. '(' → logprob: -3.048621654510498
    3. '("("' → logprob: -10.54862117767334
    4. '('' → logprob: -12.29862117767334
    5. '("")' → logprob: -13.42362117767334
    6. '("""' → logprob: -14.29862117767334
    7. '()' → logprob: -14.92362117767334
    8. '(""' → logprob: -15.17362117767334
    9. '("(' → logprob: -15.29862117767334
    10. '(False' → logprob: -16.423622131347656

Token 72: 'No' (ID: 3160)
  Prédit: 'No'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'No' → logprob: -0.20158806443214417
    2. '"No' → logprob: -1.7015880346298218
    3. '"' → logprob: -8.701587677001953
    4. ' No' → logprob: -12.701587677001953
    5. '“No' → logprob: -13.201587677001953
    6. '"N' → logprob: -13.451587677001953
    7. 'NO' → logprob: -14.076587677001953
    8. 'Yes' → logprob: -15.576587677001953
    9. 'Non' → logprob: -15.576587677001953
    10. ''' → logprob: -15.701587677001953

Token 73: '")' (ID: 1405)
  Prédit: '")'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '")' → logprob: -1.676292231422849e-05
    2. ')")' → logprob: -11.375017166137695
    3. ')' → logprob: -12.250017166137695
    4. '"' → logprob: -15.250017166137695
    5. '")
' → logprob: -16.375017166137695
    6. ' ")' → logprob: -17.000017166137695
    7. '}")' → logprob: -17.500017166137695
    8. '!")' → logprob: -17.625017166137695
    9. '"))' → logprob: -18.875017166137695
    10. '”)' → logprob: -19.000017166137695

Token 74: '  ' (ID: 256)
  Prédit: ''
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False

Token 75: ' #' (ID: 1069)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')' → logprob: -0.045738693326711655
    2. '<|end|>' → logprob: -4.045738697052002
    3. '#' (adapté à ' #') → logprob: -4.545738697052002
    4. '()' → logprob: -4.920738697052002
    5. '")' → logprob: -5.545738697052002
    6. ' ' → logprob: -6.295738697052002
    7. '(' → logprob: -6.670738697052002
    8. '("' → logprob: -7.920738697052002
    9. 'n' → logprob: -8.170738220214844
    10. 'f' → logprob: -8.420738220214844

Token 76: ' sinon' (ID: 52915)
  Prédit: ' on'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' on' → logprob: -0.8567897081375122
    2. ' ' → logprob: -1.1067897081375122
    3. '#' → logprob: -3.3567895889282227
    4. ' print' → logprob: -3.3567895889282227
    5. 'on' → logprob: -3.4817895889282227
    6. 'print' → logprob: -3.7317895889282227
    7. ' non' → logprob: -3.8567895889282227
    8. '  ' → logprob: -4.231789588928223
    9. '"' → logprob: -4.356789588928223
    10. ' ' → logprob: -4.856789588928223

Token 77: ' Non' (ID: 13763)
  Prédit: ''
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False

Token 78: ' (' (ID: 350)
  Prédit: ''
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False

Token 79: 'dom' (ID: 7385)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ')' → logprob: -0.000111768240458332
    2. ' )' → logprob: -9.62511157989502
    3. '")' → logprob: -10.50011157989502
    4. '`)' → logprob: -12.25011157989502
    5. '<|end|>' → logprob: -12.50011157989502
    6. '```' → logprob: -13.12511157989502
    7. '')' → logprob: -13.50011157989502
    8. '))' → logprob: -13.50011157989502
    9. ')")' → logprob: -13.50011157989502
    10. ' ' → logprob: -13.75011157989502

Token 80: 'mage' (ID: 67937)
  Prédit: 'mage'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'mage' → logprob: -0.005404150113463402
    2. 'mages' → logprob: -5.255403995513916
    3. 'm' → logprob: -9.130404472351074
    4. 'age' → logprob: -10.505404472351074
    5. 'mag' → logprob: -10.630404472351074
    6. 'ic' → logprob: -12.380404472351074
    7. 'mic' → logprob: -13.380404472351074
    8. '   ' → logprob: -13.755404472351074
    9. 'âge' → logprob: -14.005404472351074
    10. '```' → logprob: -14.380404472351074

Token 81: ')' (ID: 8)
  Prédit: ')'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')' → logprob: -0.001352379797026515
    2. '")' → logprob: -6.626352310180664
    3. '`)' → logprob: -11.876352310180664
    4. '')' → logprob: -12.126352310180664
    5. ')")' → logprob: -12.251352310180664
    6. '))' → logprob: -12.751352310180664
    7. ' )' → logprob: -13.126352310180664
    8. '```' → logprob: -13.501352310180664
    9. '})' → logprob: -14.501352310180664
    10. '<|end|>' → logprob: -15.001352310180664


RÉSUMÉ:
--------------------------------------------------------------------------------
Total des tokens analysés: 79
Tokens correctement prédits (1ère position, stricte): 20
Tokens correctement prédits (1ère position, avec adaptation): 21
Tokens correctement prédits (top 10): 50
Précision stricte (1ère position): 25.32%
Précision adaptée (1ère position): 26.58%
Précision (top 10): 63.29%
================================================================================
