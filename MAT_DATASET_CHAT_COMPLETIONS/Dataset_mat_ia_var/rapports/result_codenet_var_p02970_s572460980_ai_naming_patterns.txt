================================================================================
ANALYSE DE PRÉDICTION TOKEN PAR TOKEN (BATCH API)
Date: 2025-06-04 19:51:20
Modèle de tokenisation: gpt-4o-mini
================================================================================

SCRIPT ANALYSÉ:
--------------------------------------------------------------------------------
n_value, d_value = map(int, input().split())
range_span = 2 * d_value + 1
required_steps = (n_value - 1) // range_span + 1
print(required_steps)
--------------------------------------------------------------------------------

RÉSULTATS D'ANALYSE TOKEN PAR TOKEN:
--------------------------------------------------------------------------------
Token 0: 'n' (ID: 77)
  → Token d'amorce (pas de prédiction)

Token 1: '_value' (ID: 6734)
  → Token d'amorce (pas de prédiction)

Token 2: ',' (ID: 11)
  → Token d'amorce (pas de prédiction)

Token 3: ' d' (ID: 272)
  Prédit: '='
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '=' → logprob: -0.47804713249206543
    2. ' =' → logprob: -1.8530471324920654
    3. ' ' → logprob: -2.3530471324920654
    4. '_' → logprob: -2.7280471324920654
    5. ')' → logprob: -3.4780471324920654
    6. ',' → logprob: -5.4780473709106445
    7. ' _' → logprob: -5.4780473709106445
    8. ' ,' → logprob: -5.7280473709106445
    9. 'space' → logprob: -6.2280473709106445
    10. '_space' → logprob: -6.2280473709106445

Token 4: '_value' (ID: 6734)
  Prédit: '='
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '=' → logprob: -0.5810436010360718
    2. '_' → logprob: -1.0810436010360718
    3. ',' → logprob: -2.9560437202453613
    4. ')' → logprob: -3.7060437202453613
    5. ' =' → logprob: -4.831043720245361
    6. '.' → logprob: -4.956043720245361
    7. '[' → logprob: -5.331043720245361
    8. '```' → logprob: -6.831043720245361
    9. '*' → logprob: -7.081043720245361
    10. 'e' → logprob: -7.831043720245361

Token 5: ' =' (ID: 314)
  Prédit: '='
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '=' → logprob: -0.1347699612379074
    2. ' =' → logprob: -2.759769916534424
    3. '_' → logprob: -3.259769916534424
    4. ',' → logprob: -3.884769916534424
    5. ')' → logprob: -6.134769916534424
    6. '```' → logprob: -7.384769916534424
    7. '.' → logprob: -8.259770393371582
    8. '[' → logprob: -8.509770393371582
    9. '+' → logprob: -9.009770393371582
    10. '*' → logprob: -9.259770393371582

Token 6: ' map' (ID: 4014)
  Prédit: ' map'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' map' → logprob: -0.2638961672782898
    2. 'map' → logprob: -2.0138962268829346
    3. ' ' → logprob: -3.1388962268829346
    4. ' input' → logprob: -4.3888959884643555
    5. 'input' → logprob: -4.5138959884643555
    6. '0' → logprob: -4.7638959884643555
    7. ' None' → logprob: -5.5138959884643555
    8. ' n' → logprob: -5.7638959884643555
    9. '1' → logprob: -6.3888959884643555
    10. ' int' → logprob: -6.6388959884643555

Token 7: '(int' (ID: 2742)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(' → logprob: -0.5372072458267212
    2. '(lambda' → logprob: -1.2872072458267212
    3. '(int' → logprob: -2.9122071266174316
    4. '```' → logprob: -3.1622071266174316
    5. '<|end|>' → logprob: -3.9122071266174316
    6. '(str' → logprob: -5.037207126617432
    7. '[int' → logprob: -5.912207126617432
    8. '(range' → logprob: -6.412207126617432
    9. 'int' → logprob: -7.037207126617432
    10. '<|end|>' → logprob: -7.037207126617432

Token 8: ',' (ID: 11)
  Prédit: '(input'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '(input' → logprob: -0.014991636388003826
    2. '(' → logprob: -4.639991760253906
    3. ')' → logprob: -5.889991760253906
    4. 'input' → logprob: -6.264991760253906
    5. '('' → logprob: -8.639991760253906
    6. '(user' → logprob: -8.764991760253906
    7. '(raw' → logprob: -9.389991760253906
    8. '(value' → logprob: -11.139991760253906
    9. '```' → logprob: -11.139991760253906
    10. '("' → logprob: -11.264991760253906

Token 9: ' input' (ID: 3422)
  Prédit: 'input'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'input' → logprob: -0.061986736953258514
    2. ' input' → logprob: -2.8119866847991943
    3. ')' → logprob: -11.686986923217773
    4. '(input' → logprob: -11.686986923217773
    5. 'user' → logprob: -14.186986923217773
    6. ',input' → logprob: -15.061986923217773
    7. '```' → logprob: -15.186986923217773
    8. '<input' → logprob: -15.561986923217773
    9. '=input' → logprob: -16.186986923217773
    10. '`' → logprob: -16.311986923217773

Token 10: '().' (ID: 1454)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '(' → logprob: -1.1433312892913818
    2. '('' → logprob: -1.1433312892913818
    3. '()' → logprob: -1.6433312892913818
    4. '())' → logprob: -2.268331289291382
    5. ')' → logprob: -4.143331527709961
    6. '`()' → logprob: -4.518331527709961
    7. '(""))' → logprob: -4.643331527709961
    8. '("("' → logprob: -4.893331527709961
    9. '```' → logprob: -5.393331527709961
    10. '("")' → logprob: -5.768331527709961

Token 11: 'split' (ID: 13627)
  Prédit: 'split'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'split' → logprob: -0.0015340241370722651
    2. 'strip' → logprob: -6.5015339851379395
    3. 'rstrip' → logprob: -10.501534461975098
    4. ' split' → logprob: -12.626534461975098
    5. '(split' → logprob: -14.751534461975098
    6. 'read' → logprob: -15.751534461975098
    7. 'spl' → logprob: -15.876534461975098
    8. '```' → logprob: -16.12653350830078
    9. ')' → logprob: -16.62653350830078
    10. 'replace' → logprob: -16.87653350830078

Token 12: '())
' (ID: 4574)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ')' → logprob: -0.741253137588501
    2. '())' → logprob: -0.741253137588501
    3. '))' → logprob: -3.241253137588501
    4. '()' → logprob: -5.741252899169922
    5. '(' → logprob: -6.116252899169922
    6. '()))' → logprob: -6.491252899169922
    7. '('' → logprob: -7.491252899169922
    8. '`)' → logprob: -8.741252899169922
    9. '')' → logprob: -9.741252899169922
    10. ')`' → logprob: -10.866252899169922

Token 13: 'range' (ID: 20967)
  Prédit: '+'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '+' → logprob: -0.23199313879013062
    2. '#' → logprob: -2.2319931983947754
    3. '*' → logprob: -3.6069931983947754
    4. '<|end|>' → logprob: -4.356993198394775
    5. ',' → logprob: -4.606993198394775
    6. ')' → logprob: -4.606993198394775
    7. '+
' → logprob: -4.731993198394775
    8. '
' → logprob: -4.981993198394775
    9. 'if' → logprob: -5.356993198394775
    10. '\n' → logprob: -5.731993198394775

Token 14: '_span' (ID: 90052)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '(' → logprob: -0.00011319868644932285
    2. '(
' → logprob: -10.250113487243652
    3. '(n' → logprob: -11.000113487243652
    4. '(range' → logprob: -11.000113487243652
    5. '_' → logprob: -11.625113487243652
    6. '((' → logprob: -12.000113487243652
    7. ' (' → logprob: -12.250113487243652
    8. '(`' → logprob: -12.375113487243652
    9. '_range' → logprob: -12.500113487243652
    10. '(

' → logprob: -12.625113487243652

Token 15: ' =' (ID: 314)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '(' → logprob: -3.893480243277736e-05
    2. '_' → logprob: -11.500039100646973
    3. ' (' → logprob: -12.250039100646973
    4. '(range' → logprob: -12.250039100646973
    5. '_range' → logprob: -12.500039100646973
    6. '("("' → logprob: -13.250039100646973
    7. '(`' → logprob: -13.375039100646973
    8. '(
' → logprob: -13.500039100646973
    9. '((' → logprob: -13.500039100646973
    10. '()' → logprob: -13.625039100646973

Token 16: ' ' (ID: 220)
  Prédit: ' n'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' n' → logprob: -0.9987780451774597
    2. 'range' → logprob: -1.4987781047821045
    3. 'n' → logprob: -1.6237781047821045
    4. ' range' → logprob: -2.4987781047821045
    5. 'd' → logprob: -2.7487781047821045
    6. ' d' → logprob: -2.8737781047821045
    7. '(n' → logprob: -6.373777866363525
    8. '(' → logprob: -6.498777866363525
    9. ' ' → logprob: -6.623777866363525
    10. 'max' → logprob: -6.998777866363525

Token 17: '2' (ID: 17)
  Prédit: 'range'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'range' → logprob: -0.08636436611413956
    2. 'n' → logprob: -2.586364269256592
    3. 'd' → logprob: -5.836364269256592
    4. 'max' → logprob: -6.086364269256592
    5. ' range' → logprob: -7.586364269256592
    6. '1' → logprob: -7.961364269256592
    7. 'min' → logprob: -7.961364269256592
    8. '(n' → logprob: -8.33636474609375
    9. ' n' → logprob: -8.96136474609375
    10. '10' → logprob: -8.96136474609375

Token 18: ' *' (ID: 425)
  Prédit: '..'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '..' → logprob: -1.1362707614898682
    2. '**' → logprob: -1.6362707614898682
    3. '...' → logprob: -1.7612707614898682
    4. '.' → logprob: -1.8862707614898682
    5. ' **' → logprob: -3.136270761489868
    6. ',' → logprob: -3.386270761489868
    7. '*' → logprob: -4.011270523071289
    8. ':' → logprob: -4.511270523071289
    9. ' ...' → logprob: -4.636270523071289
    10. ' ' → logprob: -4.636270523071289

Token 19: ' d' (ID: 272)
  Prédit: ' n'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' n' → logprob: -0.6318349242210388
    2. 'n' → logprob: -1.2568349838256836
    3. ' d' → logprob: -2.2568349838256836
    4. 'd' → logprob: -2.6318349838256836
    5. ' ' → logprob: -5.006834983825684
    6. 'range' → logprob: -9.256834983825684
    7. ' ' → logprob: -9.506834983825684
    8. '10' → logprob: -9.756834983825684
    9. '  ' → logprob: -9.756834983825684
    10. ' range' → logprob: -9.756834983825684

Token 20: '_value' (ID: 6734)
  Prédit: '_value'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_value' → logprob: -0.04899778217077255
    2. '_' → logprob: -3.7989978790283203
    3. '_span' → logprob: -3.9239978790283203
    4. '_range' → logprob: -5.42399787902832
    5. '_val' → logprob: -7.29899787902832
    6. ' _' → logprob: -8.17399787902832
    7. '+' → logprob: -9.29899787902832
    8. '_-' → logprob: -10.42399787902832
    9. 'value' → logprob: -10.54899787902832
    10. '_space' → logprob: -10.79899787902832

Token 21: ' +' (ID: 659)
  Prédit: '+'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '+' → logprob: -0.09708935767412186
    2. ' +' → logprob: -3.0970892906188965
    3. ' ' → logprob: -3.7220892906188965
    4. '<|end|>' → logprob: -5.2220892906188965
    5. '+
' → logprob: -5.2220892906188965
    6. '
' → logprob: -6.3470892906188965
    7. '*' → logprob: -6.4720892906188965
    8. '-' → logprob: -6.7220892906188965
    9. 'for' → logprob: -6.9720892906188965
    10. ')' → logprob: -7.0970892906188965

Token 22: ' ' (ID: 220)
  Prédit: '1'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '1' → logprob: -0.007607100997120142
    2. ' ' → logprob: -4.8826069831848145
    3. '2' → logprob: -15.695107460021973
    4. '3' → logprob: -15.882607460021973
    5. '11' → logprob: -16.320106506347656
    6. '  ' → logprob: -16.507606506347656
    7. '+' → logprob: -16.757606506347656
    8. '```' → logprob: -17.070106506347656
    9. '5' → logprob: -17.257606506347656
    10. '7' → logprob: -17.445106506347656

Token 23: '1' (ID: 16)
  Prédit: '1'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '1' → logprob: -8.506661833962426e-05
    2. ' ' → logprob: -9.37508487701416
    3. '2' → logprob: -17.375085830688477
    4. '3' → logprob: -17.937585830688477
    5. '+' → logprob: -17.937585830688477
    6. '   ' → logprob: -18.250085830688477
    7. '  ' → logprob: -18.375085830688477
    8. 'n' → logprob: -18.437585830688477
    9. '0' → logprob: -18.875085830688477
    10. '7' → logprob: -18.875085830688477

Token 24: '
' (ID: 198)
  Prédit: 'for'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'for' → logprob: -1.609197735786438
    2. '\n' → logprob: -1.609197735786438
    3. ':' → logprob: -2.2341976165771484
    4. '\' → logprob: -2.3591976165771484
    5. ')' → logprob: -2.6091976165771484
    6. ' for' → logprob: -2.7341976165771484
    7. '`' → logprob: -3.4841976165771484
    8. '
' → logprob: -3.6091976165771484
    9. ' ' → logprob: -3.6091976165771484
    10. '' → logprob: -3.7341976165771484

Token 25: 'required' (ID: 12919)
  Prédit: 'for'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'for' → logprob: -0.712992250919342
    2. '\n' → logprob: -1.7129921913146973
    3. '
' → logprob: -2.7129921913146973
    4. 'result' → logprob: -2.7129921913146973
    5. 'n' → logprob: -3.2129921913146973
    6. ' for' → logprob: -3.5879921913146973
    7. '' → logprob: -3.8379921913146973
    8. 'range' → logprob: -3.8379921913146973
    9. '\' → logprob: -4.337992191314697
    10. 'max' → logprob: -4.587992191314697

Token 26: '_steps' (ID: 52120)
  Prédit: '_'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '_' → logprob: -0.8989271521568298
    2. '_ranges' → logprob: -1.3989272117614746
    3. '_positions' → logprob: -2.3989272117614746
    4. '_range' → logprob: -2.6489272117614746
    5. '_sp' → logprob: -3.6489272117614746
    6. '_cells' → logprob: -3.7739272117614746
    7. '_points' → logprob: -3.7739272117614746
    8. '_length' → logprob: -4.148927211761475
    9. '_blocks' → logprob: -4.148927211761475
    10. ' =' → logprob: -4.898927211761475

Token 27: ' =' (ID: 314)
  Prédit: ' ='
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' =' → logprob: -0.00820673443377018
    2. '=' → logprob: -5.258206844329834
    3. ' ' → logprob: -6.008206844329834
    4. ' +=' → logprob: -9.008206367492676
    5. '_' → logprob: -9.133206367492676
    6. '<|end|>' → logprob: -9.383206367492676
    7. ' >=' → logprob: -10.133206367492676
    8. ' >' → logprob: -10.383206367492676
    9. ')' → logprob: -10.758206367492676
    10. '_space' → logprob: -11.008206367492676

Token 28: ' (' (ID: 350)
  Prédit: ' n'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' n' → logprob: -0.4090001881122589
    2. ' (' → logprob: -1.9090001583099365
    3. 'n' → logprob: -2.0340001583099365
    4. '(n' → logprob: -3.7840001583099365
    5. ' max' → logprob: -4.159000396728516
    6. 'range' → logprob: -5.409000396728516
    7. 'max' → logprob: -5.659000396728516
    8. '(' → logprob: -6.034000396728516
    9. ' range' → logprob: -6.409000396728516
    10. ' d' → logprob: -6.409000396728516

Token 29: 'n' (ID: 77)
  Prédit: 'n'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'n' → logprob: -0.05570242926478386
    2. ' n' → logprob: -3.0557024478912354
    3. '(n' → logprob: -5.180702209472656
    4. ' (' → logprob: -7.430702209472656
    5. 'range' → logprob: -7.555702209472656
    6. '(' → logprob: -9.430702209472656
    7. ' ' → logprob: -9.680702209472656
    8. ' range' → logprob: -10.305702209472656
    9. 'max' → logprob: -10.305702209472656
    10. '   ' → logprob: -10.805702209472656

Token 30: '_value' (ID: 6734)
  Prédit: '_value'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_value' → logprob: -0.006209854502230883
    2. '_' → logprob: -5.131209850311279
    3. ' -' → logprob: -9.006210327148438
    4. '-' → logprob: -9.256210327148438
    5. ' +' → logprob: -10.506210327148438
    6. ' _' → logprob: -11.381210327148438
    7. '+' → logprob: -11.506210327148438
    8. ' ' → logprob: -12.881210327148438
    9. '_-' → logprob: -13.131210327148438
    10. '_val' → logprob: -13.506210327148438

Token 31: ' -' (ID: 533)
  Prédit: ' +'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' +' → logprob: -0.21075215935707092
    2. ' -' → logprob: -2.210752248764038
    3. '+' → logprob: -2.835752248764038
    4. '-' → logprob: -3.835752248764038
    5. ')' → logprob: -10.085752487182617
    6. ' ' → logprob: -10.085752487182617
    7. ' )' → logprob: -10.460752487182617
    8. ' //' → logprob: -11.210752487182617
    9. ' ' → logprob: -12.148252487182617
    10. ' plus' → logprob: -12.585752487182617

Token 32: ' ' (ID: 220)
  Prédit: '1'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '1' → logprob: -0.25556492805480957
    2. ' ' → logprob: -1.5055649280548096
    3. ' range' → logprob: -6.3805646896362305
    4. 'range' → logprob: -7.0055646896362305
    5. ')' → logprob: -7.7555646896362305
    6. ' d' → logprob: -8.00556468963623
    7. 'd' → logprob: -9.38056468963623
    8. ' )' → logprob: -9.63056468963623
    9. '-' → logprob: -11.13056468963623
    10. '2' → logprob: -11.25556468963623

Token 33: '1' (ID: 16)
  Prédit: '1'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '1' → logprob: -0.013625658117234707
    2. ' ' → logprob: -4.513625621795654
    3. 'range' → logprob: -6.263625621795654
    4. 'd' → logprob: -8.263626098632812
    5. ' range' → logprob: -8.263626098632812
    6. ' d' → logprob: -9.513626098632812
    7. ')' → logprob: -10.638626098632812
    8. '2' → logprob: -11.138626098632812
    9. 'n' → logprob: -12.263626098632812
    10. '   ' → logprob: -12.388626098632812

Token 34: ')' (ID: 8)
  Prédit: ')'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')' → logprob: -0.24878905713558197
    2. ' +' → logprob: -1.6237890720367432
    3. '+' → logprob: -3.998789072036743
    4. ' )' → logprob: -5.373788833618164
    5. ' //' → logprob: -9.998788833618164
    6. ')//' → logprob: -10.123788833618164
    7. '-' → logprob: -11.123788833618164
    8. ' ' → logprob: -11.748788833618164
    9. ' -' → logprob: -11.873788833618164
    10. '+)' → logprob: -12.373788833618164

Token 35: ' //' (ID: 602)
  Prédit: ' //'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' //' → logprob: -0.00520138256251812
    2. '//' → logprob: -5.38020133972168
    3. ' +' → logprob: -7.75520133972168
    4. '+' → logprob: -8.88020133972168
    5. '```' → logprob: -12.63020133972168
    6. ' //
' → logprob: -12.88020133972168
    7. ' ' → logprob: -13.50520133972168
    8. ' ' → logprob: -13.50520133972168
    9. ' /' → logprob: -14.00520133972168
    10. ' #' → logprob: -14.63020133972168

Token 36: ' range' (ID: 3352)
  Prédit: 'range'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'range' → logprob: -0.06196959316730499
    2. ' range' → logprob: -2.811969518661499
    3. '	range' → logprob: -13.436969757080078
    4. '(range' → logprob: -15.561969757080078
    5. 'rang' → logprob: -16.061969757080078
    6. ' ' → logprob: -16.436969757080078
    7. 'd' → logprob: -17.436969757080078
    8. 'span' → logprob: -18.436969757080078
    9. 'r' → logprob: -18.561969757080078
    10. '.range' → logprob: -19.061969757080078

Token 37: '_span' (ID: 90052)
  Prédit: '_span'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_span' → logprob: -5.490809417096898e-05
    2. '_' → logprob: -11.000055313110352
    3. 'span' → logprob: -11.000055313110352
    4. ' _' → logprob: -12.000055313110352
    5. '_sp' → logprob: -12.125055313110352
    6. '_range' → logprob: -12.750055313110352
    7. '_s' → logprob: -12.875055313110352
    8. '_scope' → logprob: -13.625055313110352
    9. '```' → logprob: -14.125055313110352
    10. '_spacing' → logprob: -14.875055313110352

Token 38: ' +' (ID: 659)
  Prédit: '+'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '+' → logprob: -0.4314793646335602
    2. ' +' → logprob: -1.0564793348312378
    3. '<|end|>' → logprob: -6.056479454040527
    4. '+
' → logprob: -8.806479454040527
    5. ' +
' → logprob: -9.306479454040527
    6. ' ' → logprob: -9.306479454040527
    7. '
' → logprob: -10.181479454040527
    8. '<|end|>' → logprob: -10.681479454040527
    9. '```' → logprob: -11.181479454040527
    10. ' 
' → logprob: -11.931479454040527

Token 39: ' ' (ID: 220)
  Prédit: '1'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '1' → logprob: -0.0013261953135952353
    2. ' ' → logprob: -6.626326084136963
    3. '2' → logprob: -16.251325607299805
    4. '```' → logprob: -16.251325607299805
    5. '<|end|>' → logprob: -16.876325607299805
    6. ' ' → logprob: -18.001325607299805
    7. '`' → logprob: -18.376325607299805
    8. '+' → logprob: -18.376325607299805
    9. '0' → logprob: -18.501325607299805
    10. ')' → logprob: -19.188825607299805

Token 40: '1' (ID: 16)
  Prédit: '1'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '1' → logprob: -1.4974866644479334e-05
    2. ' ' → logprob: -11.125015258789062
    3. '2' → logprob: -16.375015258789062
    4. '```' → logprob: -18.375015258789062
    5. '0' → logprob: -19.125015258789062
    6. '   ' → logprob: -19.375015258789062
    7. '+' → logprob: -20.000015258789062
    8. '`' → logprob: -20.000015258789062
    9. '  ' → logprob: -20.750015258789062
    10. '(' → logprob: -21.312515258789062

Token 41: '
' (ID: 198)
  Prédit: '
'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '
' → logprob: -0.5174536108970642
    2. '\n' → logprob: -1.517453670501709
    3. 'print' → logprob: -2.142453670501709
    4. '<|end|>' → logprob: -2.892453670501709
    5. ' 
' → logprob: -6.392453670501709
    6. '#' → logprob: -6.517453670501709
    7. '```' → logprob: -6.517453670501709
    8. '*' → logprob: -6.892453670501709
    9. 'n' → logprob: -7.017453670501709
    10. '\' → logprob: -7.142453670501709

Token 42: 'print' (ID: 1598)
  Prédit: 'print'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'print' → logprob: -0.00018327576981391758
    2. ' print' → logprob: -8.75018310546875
    3. '
' → logprob: -11.62518310546875
    4. '<|end|>' → logprob: -12.12518310546875
    5. '#' → logprob: -12.87518310546875
    6. '\n' → logprob: -13.00018310546875
    7. '```' → logprob: -13.37518310546875
    8. '#print' → logprob: -14.25018310546875
    9. '(print' → logprob: -14.50018310546875
    10. '\' → logprob: -14.87518310546875

Token 43: '(required' (ID: 77614)
  Prédit: '(required'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(required' → logprob: -0.3871549069881439
    2. '(' → logprob: -1.1371549367904663
    3. '(require' → logprob: -8.637154579162598
    4. '(re' → logprob: -10.512154579162598
    5. '("("' → logprob: -11.012154579162598
    6. '((' → logprob: -11.137154579162598
    7. '(range' → logprob: -11.512154579162598
    8. '(f' → logprob: -11.512154579162598
    9. '('' → logprob: -11.887154579162598
    10. ' (' → logprob: -12.012154579162598

Token 44: '_steps' (ID: 52120)
  Prédit: '_steps'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_steps' → logprob: -2.129266067640856e-05
    2. '_' → logprob: -10.875020980834961
    3. '_s' → logprob: -13.250020980834961
    4. ')_' → logprob: -15.750020980834961
    5. ' _' → logprob: -15.875020980834961
    6. ')' → logprob: -17.00002098083496
    7. '_)' → logprob: -17.37502098083496
    8. '_step' → logprob: -17.50002098083496
    9. '_st' → logprob: -18.00002098083496
    10. '_sn' → logprob: -18.12502098083496

Token 45: ')' (ID: 8)
  Prédit: ')'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')' → logprob: -2.45848218582978e-06
    2. '))' → logprob: -13.50000286102295
    3. ')`' → logprob: -14.50000286102295
    4. ' )' → logprob: -15.00000286102295
    5. '`)' → logprob: -15.87500286102295
    6. '')' → logprob: -17.250001907348633
    7. '```' → logprob: -17.625001907348633
    8. ')}' → logprob: -17.625001907348633
    9. ')
' → logprob: -17.875001907348633
    10. ')**' → logprob: -18.000001907348633


RÉSUMÉ:
--------------------------------------------------------------------------------
Total des tokens analysés: 43
Tokens correctement prédits (1ère position, stricte): 17
Tokens correctement prédits (1ère position, avec adaptation): 17
Tokens correctement prédits (top 10): 31
Précision stricte (1ère position): 39.53%
Précision adaptée (1ère position): 39.53%
Précision (top 10): 72.09%
================================================================================
