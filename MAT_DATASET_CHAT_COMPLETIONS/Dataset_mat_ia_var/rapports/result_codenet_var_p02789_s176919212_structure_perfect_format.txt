================================================================================
ANALYSE DE PRÉDICTION TOKEN PAR TOKEN (BATCH API)
Date: 2025-06-04 19:28:54
Modèle de tokenisation: gpt-4o-mini
================================================================================

SCRIPT ANALYSÉ:
--------------------------------------------------------------------------------
n, m = map(int, input().split())
print('Yes' if n == m else 'No')
--------------------------------------------------------------------------------

RÉSULTATS D'ANALYSE TOKEN PAR TOKEN:
--------------------------------------------------------------------------------
Token 0: 'n' (ID: 77)
  → Token d'amorce (pas de prédiction)

Token 1: ',' (ID: 11)
  → Token d'amorce (pas de prédiction)

Token 2: ' m' (ID: 284)
  → Token d'amorce (pas de prédiction)

Token 3: ' =' (ID: 314)
  Prédit: '='
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '=' → logprob: -0.216105654835701
    2. ',' → logprob: -2.2161056995391846
    3. ' =' → logprob: -2.4661056995391846
    4. ' ' → logprob: -9.216105461120605
    5. ')' → logprob: -9.966105461120605
    6. ' ,' → logprob: -10.216105461120605
    7. ';' → logprob: -10.466105461120605
    8. '[' → logprob: -10.716105461120605
    9. '.' → logprob: -10.841105461120605
    10. ''' → logprob: -10.841105461120605

Token 4: ' map' (ID: 4014)
  Prédit: ' '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' ' → logprob: -0.16286484897136688
    2. ' map' → logprob: -2.537864923477173
    3. ' input' → logprob: -3.412864923477173
    4. 'input' → logprob: -4.537864685058594
    5. 'map' → logprob: -4.537864685058594
    6. '0' → logprob: -4.662864685058594
    7. ' n' → logprob: -5.912864685058594
    8. '10' → logprob: -5.912864685058594
    9. '1' → logprob: -7.162864685058594
    10. ' int' → logprob: -7.537864685058594

Token 5: '(int' (ID: 2742)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(' → logprob: -0.274688720703125
    2. '```' → logprob: -2.274688720703125
    3. '(lambda' → logprob: -2.649688720703125
    4. '<|end|>' → logprob: -3.524688720703125
    5. '(int' → logprob: -4.649688720703125
    6. '[' → logprob: -5.274688720703125
    7. '[int' → logprob: -5.649688720703125
    8. '(str' → logprob: -5.899688720703125
    9. ')' → logprob: -6.149688720703125
    10. '<|end|>' → logprob: -6.149688720703125

Token 6: ',' (ID: 11)
  Prédit: '(input'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '(input' → logprob: -0.037350501865148544
    2. '(' → logprob: -3.9123504161834717
    3. ')' → logprob: -4.287350654602051
    4. 'input' → logprob: -6.037350654602051
    5. '(str' → logprob: -9.41235065460205
    6. ' input' → logprob: -9.53735065460205
    7. '(int' → logprob: -9.66235065460205
    8. ',input' → logprob: -9.78735065460205
    9. '=input' → logprob: -9.91235065460205
    10. '(raw' → logprob: -10.16235065460205

Token 7: ' input' (ID: 3422)
  Prédit: ' input'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' input' → logprob: -0.1602884978055954
    2. 'input' → logprob: -1.9102884531021118
    3. '(input' → logprob: -9.66028881072998
    4. ')' → logprob: -15.03528881072998
    5. ',input' → logprob: -15.91028881072998
    6. '=input' → logprob: -16.160287857055664
    7. '<input' → logprob: -17.160287857055664
    8. ' )' → logprob: -17.785287857055664
    9. '[input' → logprob: -17.785287857055664
    10. '```' → logprob: -18.035287857055664

Token 8: '().' (ID: 1454)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '(' → logprob: -1.0473259687423706
    2. '())' → logprob: -1.1723259687423706
    3. '()' → logprob: -1.7973259687423706
    4. ')' → logprob: -2.17232608795166
    5. '```' → logprob: -4.67232608795166
    6. '('' → logprob: -4.79732608795166
    7. '(token' → logprob: -5.04732608795166
    8. '`()' → logprob: -5.29732608795166
    9. '(""))' → logprob: -5.67232608795166
    10. '`)' → logprob: -5.79732608795166

Token 9: 'split' (ID: 13627)
  Prédit: 'split'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'split' → logprob: -0.0005641150055453181
    2. 'strip' → logprob: -7.500564098358154
    3. 'rstrip' → logprob: -12.375564575195312
    4. ')' → logprob: -12.500564575195312
    5. ' split' → logprob: -13.375564575195312
    6. 'read' → logprob: -13.625564575195312
    7. '(split' → logprob: -15.125564575195312
    8. 'spl' → logprob: -16.500564575195312
    9. 'startswith' → logprob: -17.875564575195312
    10. 'replace' → logprob: -17.875564575195312

Token 10: '())
' (ID: 4574)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ')' → logprob: -0.009555501863360405
    2. '))' → logprob: -5.384555339813232
    3. '())' → logprob: -5.384555339813232
    4. '(' → logprob: -8.75955581665039
    5. '()' → logprob: -9.25955581665039
    6. '`)' → logprob: -10.00955581665039
    7. ')`' → logprob: -11.13455581665039
    8. '()))' → logprob: -12.25955581665039
    9. '')' → logprob: -12.63455581665039
    10. ')))' → logprob: -13.00955581665039

Token 11: 'print' (ID: 1598)
  Prédit: 'a'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'a' → logprob: -0.28062009811401367
    2. '`' → logprob: -3.0306200981140137
    3. 'x' → logprob: -3.2806200981140137
    4. 'for' → logprob: -3.7806200981140137
    5. '\n' → logprob: -3.9056200981140137
    6. ',' → logprob: -3.9056200981140137
    7. '#' → logprob: -4.155620098114014
    8. ' ' → logprob: -4.155620098114014
    9. '[' → logprob: -4.280620098114014
    10. '```' → logprob: -4.655620098114014

Token 12: '('' (ID: 706)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(' → logprob: -0.0003167545364703983
    2. '('' → logprob: -8.625316619873047
    3. '("("' → logprob: -9.000316619873047
    4. '()' → logprob: -13.000316619873047
    5. '("""' → logprob: -13.250316619873047
    6. '(
' → logprob: -13.250316619873047
    7. '((' → logprob: -13.625316619873047
    8. '(`' → logprob: -13.875316619873047
    9. ' (' → logprob: -14.000316619873047
    10. '```' → logprob: -14.250316619873047

Token 13: 'Yes' (ID: 13022)
  Prédit: 'Hello'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'Hello' → logprob: -0.7136580944061279
    2. ''' → logprob: -1.338658094406128
    3. '')' → logprob: -2.588658094406128
    4. '"' → logprob: -2.838658094406128
    5. '*' → logprob: -3.338658094406128
    6. ')' → logprob: -3.338658094406128
    7. 'n' → logprob: -4.838658332824707
    8. '#' → logprob: -5.088658332824707
    9. '0' → logprob: -5.838658332824707
    10. 'Yes' → logprob: -6.213658332824707

Token 14: ''' (ID: 6)
  Prédit: '')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '')' → logprob: -0.10027308762073517
    2. ')' → logprob: -2.3502731323242188
    3. '")' → logprob: -9.850273132324219
    4. '!' → logprob: -11.600273132324219
    5. ''' → logprob: -13.350273132324219
    6. ')'' → logprob: -13.850273132324219
    7. '!)' → logprob: -13.850273132324219
    8. '')
' → logprob: -15.975273132324219
    9. '’)' → logprob: -16.35027313232422
    10. '('' → logprob: -16.35027313232422

Token 15: ' if' (ID: 538)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ')' → logprob: -6.229872087715194e-05
    2. ',' → logprob: -10.125061988830566
    3. ',)' → logprob: -11.125061988830566
    4. '')' → logprob: -12.875061988830566
    5. ' )' → logprob: -13.250061988830566
    6. '))' → logprob: -13.875061988830566
    7. '`)' → logprob: -14.375061988830566
    8. '),' → logprob: -15.000061988830566
    9. '(' → logprob: -15.500061988830566
    10. '")' → logprob: -15.625061988830566

Token 16: ' n' (ID: 297)
  Prédit: ' n'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' n' → logprob: -0.003628461854532361
    2. 'n' → logprob: -5.753628253936768
    3. ' m' → logprob: -8.378628730773926
    4. ' ' → logprob: -9.503628730773926
    5. ' (' → logprob: -9.503628730773926
    6. ' abs' → logprob: -10.003628730773926
    7. '(n' → logprob: -11.253628730773926
    8. 'm' → logprob: -12.128628730773926
    9. '(' → logprob: -13.128628730773926
    10. ')' → logprob: -13.753628730773926

Token 17: ' ==' (ID: 951)
  Prédit: ' =='
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' ==' → logprob: -0.8388280272483826
    2. ' >' → logprob: -1.3388280868530273
    3. '==' → logprob: -1.9638280868530273
    4. '>' → logprob: -2.2138280868530273
    5. '%' → logprob: -3.5888280868530273
    6. ' %' → logprob: -4.963828086853027
    7. ' <' → logprob: -4.963828086853027
    8. ' >=' → logprob: -5.213828086853027
    9. ' <=' → logprob: -5.463828086853027
    10. '<' → logprob: -6.213828086853027

Token 18: ' m' (ID: 284)
  Prédit: 'm'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'm' → logprob: -0.4291450083255768
    2. ' m' → logprob: -1.0541449785232544
    3. ' ' → logprob: -8.054144859313965
    4. '0' → logprob: -9.929144859313965
    5. '1' → logprob: -10.054144859313965
    6. '2' → logprob: -11.929144859313965
    7. '10' → logprob: -12.179144859313965
    8. '7' → logprob: -12.679144859313965
    9. '100' → logprob: -12.804144859313965
    10. '3' → logprob: -13.304144859313965

Token 19: ' else' (ID: 1203)
  Prédit: ' else'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' else' → logprob: -0.016194021329283714
    2. 'else' → logprob: -4.266193866729736
    3. ')' → logprob: -6.516193866729736
    4. ' and' → logprob: -8.391194343566895
    5. ' ' → logprob: -8.516194343566895
    6. '```' → logprob: -9.766194343566895
    7. ' )' → logprob: -10.516194343566895
    8. 'and' → logprob: -10.516194343566895
    9. '  ' → logprob: -12.891194343566895
    10. '==' → logprob: -13.016194343566895

Token 20: ' '' (ID: 461)
  Prédit: '''
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ''' → logprob: -4.024604277219623e-05
    2. ' '' → logprob: -10.375040054321289
    3. ' ' → logprob: -12.125040054321289
    4. ')' → logprob: -14.125040054321289
    5. '"' → logprob: -14.375040054321289
    6. '   ' → logprob: -14.500040054321289
    7. 'No' → logprob: -14.625040054321289
    8. '')' → logprob: -15.250040054321289
    9. '('' → logprob: -15.375040054321289
    10. ' No' → logprob: -15.500040054321289

Token 21: 'No' (ID: 3160)
  Prédit: '''
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ''' → logprob: -0.004629838280379772
    2. 'No' → logprob: -5.379629611968994
    3. '"No' → logprob: -12.004630088806152
    4. ' No' → logprob: -14.004630088806152
    5. ' '' → logprob: -14.129630088806152
    6. ' ' → logprob: -14.129630088806152
    7. '   ' → logprob: -14.504630088806152
    8. '''' → logprob: -16.004629135131836
    9. ''\' → logprob: -16.504629135131836
    10. '`' → logprob: -16.754629135131836

Token 22: '')' (ID: 1542)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')' → logprob: -0.16026973724365234
    2. '')' → logprob: -1.9102697372436523
    3. '`)' → logprob: -10.285269737243652
    4. '")' → logprob: -11.785269737243652
    5. ''' → logprob: -14.285269737243652
    6. '```' → logprob: -14.410269737243652
    7. '）' → logprob: -14.535269737243652
    8. '))' → logprob: -14.660269737243652
    9. '’)' → logprob: -14.785269737243652
    10. ' )' → logprob: -15.285269737243652


RÉSUMÉ:
--------------------------------------------------------------------------------
Total des tokens analysés: 20
Tokens correctement prédits (1ère position, stricte): 5
Tokens correctement prédits (1ère position, avec adaptation): 5
Tokens correctement prédits (top 10): 15
Précision stricte (1ère position): 25.00%
Précision adaptée (1ère position): 25.00%
Précision (top 10): 75.00%
================================================================================
