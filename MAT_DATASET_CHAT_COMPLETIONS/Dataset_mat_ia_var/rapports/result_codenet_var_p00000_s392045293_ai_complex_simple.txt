================================================================================
ANALYSE DE PRÉDICTION TOKEN PAR TOKEN (BATCH API)
Date: 2025-06-04 15:50:23
Modèle de tokenisation: gpt-4o-mini
================================================================================

SCRIPT ANALYSÉ:
--------------------------------------------------------------------------------
import itertools
import operator
import functools

def mystery():
    gen = ((a, b) for a, b in itertools.product(range(1,10), repeat=2))
    func = lambda x: "{}x{}={}".format(*x, operator.mul(*x))
    deque = list(map(func, gen))
    print('\n'.join(deque))

mystery()
--------------------------------------------------------------------------------

RÉSULTATS D'ANALYSE TOKEN PAR TOKEN:
--------------------------------------------------------------------------------
Token 0: 'import' (ID: 561)
  → Token d'amorce (pas de prédiction)

Token 1: ' itertools' (ID: 103178)
  → Token d'amorce (pas de prédiction)

Token 2: '
' (ID: 198)
  → Token d'amorce (pas de prédiction)

Token 3: 'import' (ID: 561)
  Prédit: 'as'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'as' → logprob: -0.06847742944955826
    2. 'import' → logprob: -3.0684773921966553
    3. ' as' → logprob: -4.568477630615234
    4. '<|end|>' → logprob: -4.943477630615234
    5. 'from' → logprob: -7.443477630615234
    6. '<|end|>' → logprob: -7.943477630615234
    7. ',' → logprob: -8.193477630615234
    8. '```' → logprob: -8.318477630615234
    9. '#' → logprob: -8.693477630615234
    10. ' ' → logprob: -8.818477630615234

Token 4: ' operator' (ID: 11019)
  Prédit: 'numpy'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'numpy' → logprob: -0.38162580132484436
    2. 'json' → logprob: -2.1316258907318115
    3. 'math' → logprob: -2.6316258907318115
    4. 'random' → logprob: -2.6316258907318115
    5. 'collections' → logprob: -3.8816258907318115
    6. ' numpy' → logprob: -4.631625652313232
    7. 'fun' → logprob: -4.881625652313232
    8. 'os' → logprob: -5.256625652313232
    9. ' functools' → logprob: -5.881625652313232
    10. 're' → logprob: -6.756625652313232

Token 5: '
' (ID: 198)
  Prédit: 'as'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'as' → logprob: -0.3031814396381378
    2. 'import' → logprob: -1.4281814098358154
    3. '#' → logprob: -4.4281816482543945
    4. 'from' → logprob: -5.1781816482543945
    5. ' as' → logprob: -5.8031816482543945
    6. '<|end|>' → logprob: -7.6781816482543945
    7. ',' → logprob: -8.678181648254395
    8. '```' → logprob: -9.428181648254395
    9. '\n' → logprob: -9.553181648254395
    10. 'As' → logprob: -9.803181648254395

Token 6: 'import' (ID: 561)
  Prédit: 'as'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'as' → logprob: -0.03159629926085472
    2. 'import' → logprob: -4.0315961837768555
    3. ' as' → logprob: -5.1565961837768555
    4. '#' → logprob: -5.2815961837768555
    5. 'from' → logprob: -6.2815961837768555
    6. '<|end|>' → logprob: -8.156596183776855
    7. '_as' → logprob: -9.906596183776855
    8. ' ' → logprob: -10.156596183776855
    9. 'As' → logprob: -10.156596183776855
    10. ',' → logprob: -10.281596183776855

Token 7: ' functools' (ID: 142636)
  Prédit: 'fun'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'fun' → logprob: -0.45642945170402527
    2. ' functools' → logprob: -1.0814294815063477
    3. 'math' → logprob: -4.581429481506348
    4. 'random' → logprob: -4.706429481506348
    5. 'numpy' → logprob: -5.581429481506348
    6. 'json' → logprob: -6.581429481506348
    7. 're' → logprob: -7.331429481506348
    8. 'collections' → logprob: -7.456429481506348
    9. ' math' → logprob: -7.706429481506348
    10. 'sys' → logprob: -7.956429481506348

Token 8: '

' (ID: 279)
  Prédit: 'as'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'as' → logprob: -0.14544987678527832
    2. 'import' → logprob: -2.0204498767852783
    3. ' as' → logprob: -6.645449638366699
    4. 'from' → logprob: -7.145449638366699
    5. '#' → logprob: -7.770449638366699
    6. '```' → logprob: -9.3954496383667
    7. 'As' → logprob: -9.8954496383667
    8. 'numpy' → logprob: -10.8954496383667
    9. '<|end|>' → logprob: -11.1454496383667
    10. 'def' → logprob: -11.2704496383667

Token 9: 'def' (ID: 1314)
  Prédit: '#'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '#' → logprob: -0.4649741053581238
    2. 'import' → logprob: -1.4649741649627686
    3. 'as' → logprob: -2.3399741649627686
    4. 'from' → logprob: -3.4649741649627686
    5. 'def' → logprob: -4.5899739265441895
    6. ' as' → logprob: -7.0899739265441895
    7. 'class' → logprob: -7.7149739265441895
    8. 'numpy' → logprob: -8.214974403381348
    9. '<|end|>' → logprob: -8.589974403381348
    10. ' ' → logprob: -9.089974403381348

Token 10: ' mystery' (ID: 34618)
  Prédit: 'my'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'my' → logprob: -0.940443754196167
    2. ' my' → logprob: -1.440443754196167
    3. 'calculate' → logprob: -2.690443754196167
    4. 'add' → logprob: -3.065443754196167
    5. 'combine' → logprob: -3.190443754196167
    6. 'function' → logprob: -3.315443754196167
    7. 'def' → logprob: -3.315443754196167
    8. ' combine' → logprob: -4.315443992614746
    9. ' calculate' → logprob: -4.440443992614746
    10. ' add' → logprob: -4.565443992614746

Token 11: '():
' (ID: 8595)
  Prédit: '():'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '():' → logprob: -0.027229486033320427
    2. '(:' → logprob: -3.7772295475006104
    3. '(_:' → logprob: -6.527229309082031
    4. '_function' → logprob: -7.152229309082031
    5. '(' → logprob: -7.402229309082031
    6. '(...' → logprob: -8.402229309082031
    7. 'def' → logprob: -8.902229309082031
    8. '_' → logprob: -9.152229309082031
    9. '_def' → logprob: -9.527229309082031
    10. '()' → logprob: -9.527229309082031

Token 12: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.029892917722463608
    2. 'pass' → logprob: -3.529892921447754
    3. 'return' → logprob: -10.154892921447754
    4. '	pass' → logprob: -10.154892921447754
    5. ' pass' → logprob: -10.404892921447754
    6. '  ' → logprob: -11.279892921447754
    7. '   ' → logprob: -12.154892921447754
    8. ' ' → logprob: -12.154892921447754
    9. '    ' → logprob: -12.779892921447754
    10. '```' → logprob: -13.279892921447754

Token 13: ' gen' (ID: 3645)
  Prédit: 'pass'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'pass' → logprob: -0.2579662501811981
    2. '   ' → logprob: -1.5079662799835205
    3. 'return' → logprob: -5.132966041564941
    4. ' pass' → logprob: -9.882966041564941
    5. '#' → logprob: -10.382966041564941
    6. '	pass' → logprob: -11.132966041564941
    7. ' ' → logprob: -12.132966041564941
    8. '  ' → logprob: -12.257966041564941
    9. 'print' → logprob: -12.507966041564941
    10. 'x' → logprob: -13.132966041564941

Token 14: ' =' (ID: 314)
  Prédit: ' ='
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' =' → logprob: -0.5961164832115173
    2. '=' → logprob: -0.9711164832115173
    3. 'er' → logprob: -2.721116542816162
    4. 'erat' → logprob: -6.596116542816162
    5. 'ERATOR' → logprob: -7.096116542816162
    6. '=lambda' → logprob: -7.596116542816162
    7. ' ' → logprob: -8.221116065979004
    8. '   ' → logprob: -8.346116065979004
    9. '-er' → logprob: -8.471116065979004
    10. '.er' → logprob: -8.596116065979004

Token 15: ' ((' (ID: 3536)
  Prédit: 'it'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'it' → logprob: -0.019693195819854736
    2. 'iter' → logprob: -4.019693374633789
    3. ' itertools' → logprob: -6.519693374633789
    4. 'itt' → logprob: -11.144693374633789
    5. ' ' → logprob: -11.644693374633789
    6. 'ite' → logprob: -11.769693374633789
    7. '   ' → logprob: -11.894693374633789
    8. 'itr' → logprob: -12.769693374633789
    9. 'iterator' → logprob: -12.894693374633789
    10. '(it' → logprob: -12.894693374633789

Token 16: 'a' (ID: 64)
  Prédit: 'x'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'x' → logprob: -0.016306845471262932
    2. 'i' → logprob: -4.1413068771362305
    3. 'it' → logprob: -8.76630687713623
    4. 'operator' → logprob: -10.14130687713623
    5. 'item' → logprob: -10.26630687713623
    6. 'a' → logprob: -11.14130687713623
    7. 'n' → logprob: -11.39130687713623
    8. ')' → logprob: -12.64130687713623
    9. ')x' → logprob: -13.26630687713623
    10. 'for' → logprob: -13.26630687713623

Token 17: ',' (ID: 11)
  Prédit: 'for'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'for' → logprob: -0.024524809792637825
    2. ',' → logprob: -3.8995249271392822
    3. ' for' → logprob: -6.149524688720703
    4. '+' → logprob: -6.399524688720703
    5. 'in' → logprob: -8.774524688720703
    6. '*' → logprob: -11.524524688720703
    7. ' +' → logprob: -12.524524688720703
    8. 'range' → logprob: -13.149524688720703
    9. 'from' → logprob: -13.899524688720703
    10. '+b' → logprob: -14.399524688720703

Token 18: ' b' (ID: 287)
  Prédit: 'b'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'b' → logprob: -1.8624639324116288e-06
    2. ' b' → logprob: -13.500001907348633
    3. 'a' → logprob: -15.000001907348633
    4. '   ' → logprob: -19.125001907348633
    5. '*b' → logprob: -20.250001907348633
    6. '(b' → logprob: -20.625001907348633
    7. 'c' → logprob: -20.750001907348633
    8. '	b' → logprob: -20.750001907348633
    9. ')b' → logprob: -21.000001907348633
    10. ' ' → logprob: -21.250001907348633

Token 19: ')' (ID: 8)
  Prédit: ')'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')' → logprob: -0.08981852978467941
    2. 'for' → logprob: -2.4648184776306152
    3. ' for' → logprob: -7.839818477630615
    4. '):' → logprob: -8.589818954467773
    5. '   ' → logprob: -8.714818954467773
    6. ':' → logprob: -9.464818954467773
    7. ',' → logprob: -10.839818954467773
    8. '),' → logprob: -11.714818954467773
    9. '       ' → logprob: -12.089818954467773
    10. ' ' → logprob: -12.464818954467773

Token 20: ' for' (ID: 395)
  Prédit: 'for'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'for' → logprob: -1.282920129597187e-05
    2. ' for' → logprob: -11.375012397766113
    3. 'in' → logprob: -13.750012397766113
    4. '   ' → logprob: -16.12501335144043
    5. 'from' → logprob: -16.50001335144043
    6. ' ' → logprob: -18.12501335144043
    7. '	for' → logprob: -18.25001335144043
    8. ':' → logprob: -18.50001335144043
    9. 'import' → logprob: -19.50001335144043
    10. '       ' → logprob: -19.62501335144043

Token 21: ' a' (ID: 261)
  Prédit: 'it'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'it' → logprob: -0.4911749064922333
    2. ' itertools' → logprob: -1.4911749362945557
    3. 'a' → logprob: -2.7411749362945557
    4. ' ' → logprob: -3.7411749362945557
    5. ' in' → logprob: -3.8661749362945557
    6. 'operator' → logprob: -4.241174697875977
    7. 'in' → logprob: -4.741174697875977
    8. '   ' → logprob: -4.866174697875977
    9. '(a' → logprob: -5.491174697875977
    10. ' (' → logprob: -5.491174697875977

Token 22: ',' (ID: 11)
  Prédit: 'in'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'in' → logprob: -0.26344990730285645
    2. ',' → logprob: -1.5134499073028564
    3. ' in' → logprob: -4.513449668884277
    4. 'for' → logprob: -7.763449668884277
    5. ',in' → logprob: -9.763449668884277
    6. 'import' → logprob: -12.388449668884277
    7. 'from' → logprob: -12.888449668884277
    8. 'In' → logprob: -13.888449668884277
    9. 'range' → logprob: -14.138449668884277
    10. 'and' → logprob: -15.013449668884277

Token 23: ' b' (ID: 287)
  Prédit: 'b'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'b' → logprob: -1.8624639324116288e-06
    2. ' b' → logprob: -13.250001907348633
    3. '   ' → logprob: -18.000001907348633
    4. 'c' → logprob: -18.125001907348633
    5. 'in' → logprob: -18.250001907348633
    6. '(b' → logprob: -19.750001907348633
    7. '	b' → logprob: -20.000001907348633
    8. '  ' → logprob: -20.500001907348633
    9. ' б' → logprob: -20.875001907348633
    10. ' ' → logprob: -21.250001907348633

Token 24: ' in' (ID: 306)
  Prédit: 'in'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'in' → logprob: -0.00026205103495158255
    2. ' in' → logprob: -8.250262260437012
    3. 'for' → logprob: -14.750262260437012
    4. 'from' → logprob: -15.750262260437012
    5. 'import' → logprob: -16.500261306762695
    6. 'In' → logprob: -18.750261306762695
    7. 'IN' → logprob: -19.875261306762695
    8. '_in' → logprob: -20.000261306762695
    9. 'inthe' → logprob: -20.000261306762695
    10. 'ind' → logprob: -20.250261306762695

Token 25: ' itertools' (ID: 103178)
  Prédit: 'it'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'it' → logprob: -2.816093228830141e-06
    2. ' itertools' → logprob: -13.12500286102295
    3. 'itt' → logprob: -15.00000286102295
    4. 'iter' → logprob: -15.37500286102295
    5. '(it' → logprob: -17.500001907348633
    6. 'itin' → logprob: -17.625001907348633
    7. 'itab' → logprob: -17.625001907348633
    8. 'zip' → logprob: -17.625001907348633
    9. 'ite' → logprob: -18.125001907348633
    10. 'itag' → logprob: -18.500001907348633

Token 26: '.product' (ID: 21166)
  Prédit: '.com'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '.com' → logprob: -0.43751782178878784
    2. '.product' → logprob: -1.0625178813934326
    3. '.per' → logprob: -5.1875176429748535
    4. '.' → logprob: -6.9375176429748535
    5. '.cart' → logprob: -7.3125176429748535
    6. '.zip' → logprob: -8.312518119812012
    7. '.prod' → logprob: -8.562518119812012
    8. '.products' → logprob: -8.687518119812012
    9. '.chain' → logprob: -8.812518119812012
    10. '.groupby' → logprob: -8.937518119812012

Token 27: '(range' (ID: 50017)
  Prédit: '(*'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(*' → logprob: -0.5373839139938354
    2. '(range' → logprob: -1.1623839139938354
    3. '(' → logprob: -3.287384033203125
    4. '(**' → logprob: -3.787384033203125
    5. '(it' → logprob: -4.287384033203125
    6. '(...' → logprob: -4.287384033203125
    7. '(iter' → logprob: -5.162384033203125
    8. '((' → logprob: -6.412384033203125
    9. '((*' → logprob: -6.662384033203125
    10. '(*(' → logprob: -6.787384033203125

Token 28: '(' (ID: 7)
  Prédit: '('
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(' → logprob: -0.08095350116491318
    2. '(len' → logprob: -2.580953598022461
    3. '(range' → logprob: -6.205953598022461
    4. '(num' → logprob: -11.455953598022461
    5. '(length' → logprob: -11.955953598022461
    6. '(max' → logprob: -12.080953598022461
    7. '(n' → logprob: -12.205953598022461
    8. '(min' → logprob: -12.955953598022461
    9. '(int' → logprob: -13.205953598022461
    10. '(size' → logprob: -13.580953598022461

Token 29: '1' (ID: 16)
  Prédit: '5'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '5' → logprob: -0.5802308917045593
    2. '3' → logprob: -1.080230951309204
    3. '10' → logprob: -2.330230951309204
    4. '2' → logprob: -5.955230712890625
    5. '4' → logprob: -7.205230712890625
    6. '0' → logprob: -9.830230712890625
    7. '1' → logprob: -10.705230712890625
    8. '6' → logprob: -10.830230712890625
    9. '100' → logprob: -12.830230712890625
    10. '7' → logprob: -12.955230712890625

Token 30: ',' (ID: 11)
  Prédit: ','
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ',' → logprob: -4.961759259458631e-06
    2. '),' → logprob: -13.125004768371582
    3. ' ,' → logprob: -13.750004768371582
    4. '10' → logprob: -14.875004768371582
    5. '，' → logprob: -15.000004768371582
    6. '   ' → logprob: -15.000004768371582
    7. ' ' → logprob: -16.2500057220459
    8. '12' → logprob: -16.5000057220459
    9. '```' → logprob: -16.5000057220459
    10. ',,' → logprob: -16.8750057220459

Token 31: '10' (ID: 702)
  Prédit: '6'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '6' → logprob: -0.7314648628234863
    2. '4' → logprob: -0.9814648628234863
    3. '10' → logprob: -2.4814648628234863
    4. '5' → logprob: -3.4814648628234863
    5. '11' → logprob: -3.6064648628234863
    6. '101' → logprob: -6.981464862823486
    7. '8' → logprob: -7.356464862823486
    8. '7' → logprob: -7.856464862823486
    9. 'n' → logprob: -8.356464385986328
    10. '9' → logprob: -9.231464385986328

Token 32: '),' (ID: 936)
  Prédit: '),'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '),' → logprob: -0.011757681146264076
    2. '))' → logprob: -4.761757850646973
    3. ')):' → logprob: -6.261757850646973
    4. ')):
' → logprob: -7.511757850646973
    5. ')' → logprob: -8.011757850646973
    6. ')),' → logprob: -8.636757850646973
    7. '+' → logprob: -9.761757850646973
    8. '   ' → logprob: -10.511757850646973
    9. '):' → logprob: -11.136757850646973
    10. ')).' → logprob: -11.636757850646973

Token 33: ' repeat' (ID: 22962)
  Prédit: 'range'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'range' → logprob: -0.2519832253456116
    2. 'repeat' → logprob: -1.5019831657409668
    3. ' range' → logprob: -10.626983642578125
    4. ' repeat' → logprob: -10.751983642578125
    5. 'start' → logprob: -12.876983642578125
    6. '(range' → logprob: -13.251983642578125
    7. '	range' → logprob: -13.626983642578125
    8. 're' → logprob: -14.376983642578125
    9. 'reverse' → logprob: -14.626983642578125
    10. '_repeat' → logprob: -15.001983642578125

Token 34: '=' (ID: 28)
  Prédit: '='
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '=' → logprob: -0.00032044618274085224
    2. '=(' → logprob: -8.625320434570312
    3. '(' → logprob: -8.875320434570312
    4. ' =' → logprob: -14.625320434570312
    5. '_=' → logprob: -15.625320434570312
    6. '=[' → logprob: -16.125320434570312
    7. '=len' → logprob: -16.625320434570312
    8. '=int' → logprob: -16.875320434570312
    9. '==' → logprob: -17.000320434570312
    10. '=None' → logprob: -17.500320434570312

Token 35: '2' (ID: 17)
  Prédit: '2'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '2' → logprob: 0.0
    2. '3' → logprob: -16.75
    3. '4' → logprob: -20.0
    4. 'two' → logprob: -20.75
    5. ' ' → logprob: -21.5
    6. '5' → logprob: -21.625
    7. '1' → logprob: -22.0
    8. '10' → logprob: -22.625
    9. '２' → logprob: -22.875
    10. '8' → logprob: -23.0

Token 36: '))
' (ID: 2210)
  Prédit: '))'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '))' → logprob: -0.013802158646285534
    2. ')' → logprob: -5.1388020515441895
    3. ')):' → logprob: -5.5138020515441895
    4. '):' → logprob: -6.1388020515441895
    5. '   ' → logprob: -7.1388020515441895
    6. '))
' → logprob: -7.2638020515441895
    7. ')):
' → logprob: -9.263802528381348
    8. '))

' → logprob: -10.763802528381348
    9. ')).' → logprob: -11.013802528381348
    10. '))
' → logprob: -12.388802528381348

Token 37: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.0008828802965581417
    2. '       ' → logprob: -7.125883102416992
    3. 'return' → logprob: -9.500883102416992
    4. '  ' → logprob: -13.000883102416992
    5. '    ' → logprob: -14.250883102416992
    6. ' ' → logprob: -15.375883102416992
    7. 'for' → logprob: -15.375883102416992
    8. '     ' → logprob: -16.000883102416992
    9. ' return' → logprob: -16.625883102416992
    10. '           ' → logprob: -16.875883102416992

Token 38: ' func' (ID: 4660)
  Prédit: 'return'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'return' → logprob: -0.40113377571105957
    2. '   ' → logprob: -1.1511337757110596
    3. 'result' → logprob: -4.4011335372924805
    4. 'for' → logprob: -6.5261335372924805
    5. 'yield' → logprob: -8.52613353729248
    6. 'while' → logprob: -9.77613353729248
    7. 'sum' → logprob: -9.90113353729248
    8. 'print' → logprob: -10.15113353729248
    9. '       ' → logprob: -10.40113353729248
    10. 'results' → logprob: -11.02613353729248

Token 39: ' =' (ID: 314)
  Prédit: '='
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '=' → logprob: -0.04381612315773964
    2. ' =' → logprob: -3.168816089630127
    3. 'tion' → logprob: -7.418816089630127
    4. '=lambda' → logprob: -9.293816566467285
    5. 't' → logprob: -9.543816566467285
    6. '=t' → logprob: -11.418816566467285
    7. 'def' → logprob: -11.543816566467285
    8. 'c' → logprob: -12.043816566467285
    9. 'ct' → logprob: -12.293816566467285
    10. 'ction' → logprob: -12.668816566467285

Token 40: ' lambda' (ID: 27871)
  Prédit: 'operator'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'operator' → logprob: -0.11339783668518066
    2. 'fun' → logprob: -2.3633978366851807
    3. 'lambda' → logprob: -4.363397598266602
    4. ' functools' → logprob: -8.113397598266602
    5. 'func' → logprob: -10.738397598266602
    6. ' operator' → logprob: -10.988397598266602
    7. 'partial' → logprob: -11.238397598266602
    8. 'sum' → logprob: -11.988397598266602
    9. 'max' → logprob: -12.988397598266602
    10. '(lambda' → logprob: -13.113397598266602

Token 41: ' x' (ID: 1215)
  Prédit: ':'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ':' → logprob: -0.07016260921955109
    2. 'x' → logprob: -2.695162534713745
    3. 'a' → logprob: -8.695162773132324
    4. ':x' → logprob: -10.945162773132324
    5. ':a' → logprob: -11.570162773132324
    6. ' x' → logprob: -11.570162773132324
    7. 'func' → logprob: -12.070162773132324
    8. ':def' → logprob: -13.320162773132324
    9. '：' → logprob: -13.445162773132324
    10. ' :' → logprob: -13.445162773132324

Token 42: ':' (ID: 25)
  Prédit: ':'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ':' → logprob: -1.0280383548888494e-06
    2. ':return' → logprob: -14.750000953674316
    3. ':def' → logprob: -15.250000953674316
    4. '：' → logprob: -16.500001907348633
    5. ':x' → logprob: -16.875001907348633
    6. '   ' → logprob: -17.625001907348633
    7. ':int' → logprob: -17.750001907348633
    8. ':self' → logprob: -18.000001907348633
    9. '):' → logprob: -18.125001907348633
    10. ' :' → logprob: -18.250001907348633

Token 43: ' "{}' (ID: 94666)
  Prédit: 'x'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'x' → logprob: -0.00031890018726699054
    2. ' x' → logprob: -8.62531852722168
    3. 'operator' → logprob: -9.00031852722168
    4. '(x' → logprob: -12.00031852722168
    5. 'func' → logprob: -12.25031852722168
    6. 'a' → logprob: -13.50031852722168
    7. ' operator' → logprob: -13.50031852722168
    8. 'sum' → logprob: -13.87531852722168
    9. 'fun' → logprob: -14.50031852722168
    10. '   ' → logprob: -15.62531852722168

Token 44: 'x' (ID: 87)
  Prédit: '{}".'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '{}".' → logprob: -0.04566432908177376
    2. '{}' → logprob: -3.2956643104553223
    3. '".' → logprob: -5.795664310455322
    4. '{' → logprob: -6.295664310455322
    5. '-' → logprob: -7.170664310455322
    6. ' {}".' → logprob: -7.295664310455322
    7. '"' → logprob: -7.545664310455322
    8. ':' → logprob: -7.920664310455322
    9. '{}",' → logprob: -9.79566478729248
    10. ',' → logprob: -9.79566478729248

Token 45: '{}' (ID: 12083)
  Prédit: '{}".'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '{}".' → logprob: -0.05005819350481033
    2. '{}' → logprob: -3.675058126449585
    3. '{' → logprob: -4.800058364868164
    4. '"' → logprob: -5.300058364868164
    5. '{:' → logprob: -5.550058364868164
    6. '".' → logprob: -5.550058364868164
    7. '{}'.' → logprob: -7.800058364868164
    8. '{}",' → logprob: -8.175058364868164
    9. '={' → logprob: -8.300058364868164
    10. 'x' → logprob: -8.300058364868164

Token 46: '={' (ID: 1693)
  Prédit: '".'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '".' → logprob: -0.2894366383552551
    2. '{}".' → logprob: -1.4144365787506104
    3. '"' → logprob: -6.0394368171691895
    4. '={' → logprob: -6.6644368171691895
    5. ' =' → logprob: -6.6644368171691895
    6. ' {}".' → logprob: -6.7894368171691895
    7. '.format' → logprob: -7.6644368171691895
    8. '{}' → logprob: -7.9144368171691895
    9. '=' → logprob: -8.039436340332031
    10. ':' → logprob: -8.164436340332031

Token 47: '}".' (ID: 53576)
  Prédit: '}".'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '}".' → logprob: -0.015259108506143093
    2. '}' → logprob: -4.515259265899658
    3. '}"' → logprob: -5.515259265899658
    4. '}"
' → logprob: -9.5152587890625
    5. '}\' → logprob: -10.0152587890625
    6. '}{' → logprob: -11.6402587890625
    7. 'x' → logprob: -11.6402587890625
    8. '}'.' → logprob: -11.7652587890625
    9. '}.' → logprob: -11.8902587890625
    10. '}",' → logprob: -11.8902587890625

Token 48: 'format' (ID: 4078)
  Prédit: 'format'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'format' → logprob: -3.070975071750581e-05
    2. '.format' → logprob: -10.500030517578125
    3. 'f' → logprob: -14.250030517578125
    4. 'join' → logprob: -14.625030517578125
    5. 'formatter' → logprob: -14.750030517578125
    6. 'formatted' → logprob: -15.000030517578125
    7. ' format' → logprob: -15.125030517578125
    8. '_format' → logprob: -15.125030517578125
    9. 'form' → logprob: -15.250030517578125
    10. '(format' → logprob: -15.625030517578125

Token 49: '(*' (ID: 9000)
  Prédit: '(func'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '(func' → logprob: -0.07374580949544907
    2. '(x' → logprob: -3.1987457275390625
    3. '(lambda' → logprob: -3.9487457275390625
    4. '(gen' → logprob: -4.9487457275390625
    5. 'func' → logprob: -6.0737457275390625
    6. 'x' → logprob: -7.0737457275390625
    7. '(' → logprob: -7.8237457275390625
    8. '   ' → logprob: -9.448745727539062
    9. '(fun' → logprob: -9.948745727539062
    10. '(generator' → logprob: -10.323745727539062

Token 50: 'x' (ID: 87)
  Prédit: 'x'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'x' → logprob: -0.04964015632867813
    2. '(x' → logprob: -3.04964017868042
    3. 'gen' → logprob: -6.92464017868042
    4. '(' → logprob: -10.799639701843262
    5. '(a' → logprob: -11.299639701843262
    6. 'it' → logprob: -11.424639701843262
    7. '(gen' → logprob: -11.424639701843262
    8. '(it' → logprob: -12.424639701843262
    9. ' x' → logprob: -13.049639701843262
    10. 'operator' → logprob: -13.299639701843262

Token 51: ',' (ID: 11)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ')' → logprob: -0.0008563125738874078
    2. ').' → logprob: -8.250856399536133
    3. ')
' → logprob: -8.875856399536133
    4. '})' → logprob: -9.375856399536133
    5. '   ' → logprob: -9.750856399536133
    6. '(' → logprob: -9.875856399536133
    7. '(x' → logprob: -10.000856399536133
    8. '))' → logprob: -10.000856399536133
    9. '())' → logprob: -10.250856399536133
    10. '```' → logprob: -11.250856399536133

Token 52: ' operator' (ID: 11019)
  Prédit: 'x'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'x' → logprob: -0.06869637221097946
    2. 'operator' → logprob: -2.8186962604522705
    3. 'func' → logprob: -5.56869649887085
    4. 'fun' → logprob: -6.44369649887085
    5. ' operator' → logprob: -7.56869649887085
    6. ' x' → logprob: -8.068696022033691
    7. 'it' → logprob: -9.068696022033691
    8. 'a' → logprob: -9.568696022033691
    9. ' functools' → logprob: -9.693696022033691
    10. ' ' → logprob: -10.318696022033691

Token 53: '.mul' (ID: 106202)
  Prédit: '.mul'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '.mul' → logprob: -0.008959034457802773
    2. '.im' → logprob: -6.38395881652832
    3. '.prod' → logprob: -6.38395881652832
    4. '.' → logprob: -6.75895881652832
    5. '.product' → logprob: -7.00895881652832
    6. '.item' → logprob: -7.50895881652832
    7. '.attr' → logprob: -7.63395881652832
    8. '.apply' → logprob: -8.38395881652832
    9. '.eq' → logprob: -8.50895881652832
    10. '.mult' → logprob: -8.50895881652832

Token 54: '(*' (ID: 9000)
  Prédit: '(x'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(x' → logprob: -0.0012745194835588336
    2. '(*' → logprob: -7.876274585723877
    3. '(gen' → logprob: -7.876274585723877
    4. ')' → logprob: -8.251274108886719
    5. ')(' → logprob: -9.501274108886719
    6. '())' → logprob: -9.626274108886719
    7. '(' → logprob: -10.001274108886719
    8. '(func' → logprob: -10.626274108886719
    9. '(a' → logprob: -10.876274108886719
    10. '(**' → logprob: -11.501274108886719

Token 55: 'x' (ID: 87)
  Prédit: 'x'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'x' → logprob: -1.7432603272027336e-06
    2. '(x' → logprob: -13.625001907348633
    3. ' x' → logprob: -15.125001907348633
    4. '*x' → logprob: -15.875001907348633
    5. ')x' → logprob: -16.875001907348633
    6. '$x' → logprob: -18.625001907348633
    7. '=x' → logprob: -19.000001907348633
    8. '	x' → logprob: -19.250001907348633
    9. '{x' → logprob: -19.375001907348633
    10. '_x' → logprob: -20.375001907348633

Token 56: '))
' (ID: 2210)
  Prédit: '))'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '))' → logprob: -0.0013061909703537822
    2. ')' → logprob: -7.376306056976318
    3. '))
' → logprob: -7.376306056976318
    4. '()))' → logprob: -10.876306533813477
    5. '))

' → logprob: -11.626306533813477
    6. ').' → logprob: -12.251306533813477
    7. '(x' → logprob: -12.251306533813477
    8. ')).' → logprob: -12.376306533813477
    9. ')))' → logprob: -13.001306533813477
    10. '```' → logprob: -13.126306533813477

Token 57: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -3.6550729419104755e-05
    2. 'return' → logprob: -10.250036239624023
    3. '       ' → logprob: -14.250036239624023
    4. '  ' → logprob: -14.750036239624023
    5. '    ' → logprob: -16.875036239624023
    6. ' return' → logprob: -17.750036239624023
    7. ' ' → logprob: -17.875036239624023
    8. '    
' → logprob: -19.250036239624023
    9. '	return' → logprob: -19.250036239624023
    10. '     ' → logprob: -19.375036239624023

Token 58: ' deque' (ID: 90347)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.0067590675316751
    2. 'return' → logprob: -5.006759166717529
    3. 'for' → logprob: -10.131758689880371
    4. 'print' → logprob: -13.131758689880371
    5. 'result' → logprob: -14.006758689880371
    6. '       ' → logprob: -14.756758689880371
    7. '  ' → logprob: -14.756758689880371
    8. ' return' → logprob: -16.506759643554688
    9. 'yield' → logprob: -16.631759643554688
    10. 'while' → logprob: -16.881759643554688

Token 59: ' =' (ID: 314)
  Prédit: '.append'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '.append' → logprob: -0.2805786430835724
    2. 'ue' → logprob: -2.03057861328125
    3. ' =' → logprob: -3.53057861328125
    4. '.de' → logprob: -3.65557861328125
    5. '=' → logprob: -4.65557861328125
    6. '().' → logprob: -5.03057861328125
    7. '.' → logprob: -5.03057861328125
    8. '.import' → logprob: -5.15557861328125
    9. '.p' → logprob: -5.40557861328125
    10. 'ued' → logprob: -5.40557861328125

Token 60: ' list' (ID: 1562)
  Prédit: 'deque'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'deque' → logprob: -0.6834062337875366
    2. 'collections' → logprob: -1.1834062337875366
    3. 'fun' → logprob: -2.433406352996826
    4. 'list' → logprob: -2.683406352996826
    5. ' functools' → logprob: -3.808406352996826
    6. ' deque' → logprob: -6.058406352996826
    7. '[]' → logprob: -6.058406352996826
    8. 'func' → logprob: -6.808406352996826
    9. ' itertools' → logprob: -7.058406352996826
    10. 'import' → logprob: -7.308406352996826

Token 61: '(map' (ID: 16946)
  Prédit: '(gen'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(gen' → logprob: -0.1572728306055069
    2. '(func' → logprob: -2.9072728157043457
    3. '(de' → logprob: -3.1572728157043457
    4. '()' → logprob: -4.032272815704346
    5. '(list' → logprob: -4.532272815704346
    6. '(' → logprob: -5.407272815704346
    7. 'deque' → logprob: -5.532272815704346
    8. '(lambda' → logprob: -5.782272815704346
    9. '(map' → logprob: -6.032272815704346
    10. 'gen' → logprob: -6.532272815704346

Token 62: '(func' (ID: 40416)
  Prédit: '(func'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(func' → logprob: -0.536048948764801
    2. '(gen' → logprob: -1.5360488891601562
    3. '(de' → logprob: -1.7860488891601562
    4. '(lambda' → logprob: -3.6610488891601562
    5. '(' → logprob: -5.786048889160156
    6. '(map' → logprob: -7.036048889160156
    7. '(fun' → logprob: -7.161048889160156
    8. '(generator' → logprob: -7.786048889160156
    9. '(list' → logprob: -8.036048889160156
    10. '(generate' → logprob: -8.911048889160156

Token 63: ',' (ID: 11)
  Prédit: '(gen'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(gen' → logprob: -0.025489015504717827
    2. ',' → logprob: -4.27548885345459
    3. '(de' → logprob: -4.65048885345459
    4. '(' → logprob: -6.77548885345459
    5. '(),' → logprob: -7.77548885345459
    6. 'gen' → logprob: -10.27548885345459
    7. '(generator' → logprob: -10.27548885345459
    8. '(iter' → logprob: -12.02548885345459
    9. ' gen' → logprob: -12.15048885345459
    10. '((' → logprob: -12.15048885345459

Token 64: ' gen' (ID: 3645)
  Prédit: 'gen'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'gen' → logprob: 0.0
    2. ' gen' → logprob: -17.0
    3. '	gen' → logprob: -19.125
    4. 'deque' → logprob: -20.125
    5. '(gen' → logprob: -20.875
    6. '_gen' → logprob: -21.5
    7. ' ген' → logprob: -21.875
    8. '.gen' → logprob: -22.0
    9. 'gener' → logprob: -22.0
    10. 'gens' → logprob: -22.125

Token 65: '))
' (ID: 2210)
  Prédit: '))'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '))' → logprob: -0.00014573395310435444
    2. '))
' → logprob: -9.00014591217041
    3. '))

' → logprob: -11.25014591217041
    4. ')' → logprob: -12.37514591217041
    5. ')).' → logprob: -13.00014591217041
    6. ')))' → logprob: -13.87514591217041
    7. '   ' → logprob: -14.12514591217041
    8. '))
' → logprob: -14.62514591217041
    9. '()))' → logprob: -15.25014591217041
    10. ').' → logprob: -16.250144958496094

Token 66: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -1.1472419600977446e-06
    2. 'return' → logprob: -14.375000953674316
    3. '  ' → logprob: -14.500000953674316
    4. ' ' → logprob: -17.625001907348633
    5. '       ' → logprob: -18.500001907348633
    6. '    ' → logprob: -18.625001907348633
    7. 'print' → logprob: -19.125001907348633
    8. ' return' → logprob: -20.250001907348633
    9. '   ' → logprob: -20.250001907348633
    10. '	return' → logprob: -20.375001907348633

Token 67: ' print' (ID: 2123)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.1269601434469223
    2. 'return' → logprob: -2.126960039138794
    3. 'print' (adapté à ' print') → logprob: -10.626959800720215
    4. ' return' → logprob: -12.126959800720215
    5. '  ' → logprob: -13.876959800720215
    6. '	return' → logprob: -14.376959800720215
    7. ' ' → logprob: -15.376959800720215
    8. 'de' → logprob: -15.501959800720215
    9. '       ' → logprob: -15.501959800720215
    10. 'deque' → logprob: -16.00196075439453

Token 68: '('\' (ID: 24345)
  Prédit: '(de'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '(de' → logprob: -0.0014384465757757425
    2. '(' → logprob: -6.626438617706299
    3. '()(' → logprob: -10.00143814086914
    4. '(d' → logprob: -11.00143814086914
    5. '("("' → logprob: -11.37643814086914
    6. '()' → logprob: -12.25143814086914
    7. '(deck' → logprob: -13.00143814086914
    8. '("' → logprob: -13.12643814086914
    9. '(paren' → logprob: -13.25143814086914
    10. '(list' → logprob: -13.50143814086914

Token 69: 'n' (ID: 77)
  Prédit: 'n'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'n' → logprob: -0.8733747601509094
    2. 'd' → logprob: -1.2483747005462646
    3. 't' → logprob: -2.1233747005462646
    4. 'de' → logprob: -2.4983747005462646
    5. 'print' → logprob: -3.3733747005462646
    6. 'deque' → logprob: -3.8733747005462646
    7. ''' → logprob: -4.123374938964844
    8. 'l' → logprob: -5.248374938964844
    9. '')' → logprob: -6.123374938964844
    10. 'p' → logprob: -6.498374938964844

Token 70: ''.' (ID: 6120)
  Prédit: ''.'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ''.' → logprob: -0.30106571316719055
    2. '.join' → logprob: -1.4260656833648682
    3. '   ' → logprob: -4.301065921783447
    4. ').' → logprob: -6.426065921783447
    5. '`.' → logprob: -7.176065921783447
    6. 'deque' → logprob: -7.176065921783447
    7. '".' → logprob: -7.676065921783447
    8. 'join' → logprob: -7.801065921783447
    9. '.de' → logprob: -7.926065921783447
    10. '```' → logprob: -8.051065444946289

Token 71: 'join' (ID: 10891)
  Prédit: 'join'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'join' → logprob: -6.704273118884885e-07
    2. 'format' → logprob: -15.000000953674316
    3. '.join' → logprob: -16.875
    4. 'joining' → logprob: -16.875
    5. 'joined' → logprob: -17.375
    6. ' join' → logprob: -17.5
    7. 'joins' → logprob: -17.625
    8. 'fill' → logprob: -18.0
    9. 'strip' → logprob: -18.5
    10. 'JOIN' → logprob: -18.5

Token 72: '(de' (ID: 20586)
  Prédit: '(de'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(de' → logprob: -6.194110756041482e-05
    2. '(' → logprob: -9.875061988830566
    3. '()(' → logprob: -12.625061988830566
    4. '(deck' → logprob: -13.625061988830566
    5. '(gen' → logprob: -14.000061988830566
    6. '(d' → logprob: -14.125061988830566
    7. '(des' → logprob: -14.250061988830566
    8. '(dec' → logprob: -15.250061988830566
    9. '(`' → logprob: -15.375061988830566
    10. '(le' → logprob: -15.375061988830566

Token 73: 'que' (ID: 1126)
  Prédit: 'que'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'que' → logprob: -0.05198747664690018
    2. 'ue' → logprob: -3.926987409591675
    3. 'deque' → logprob: -4.426987648010254
    4. 'qu' → logprob: -5.551987648010254
    5. 'queue' → logprob: -5.676987648010254
    6. ')' → logprob: -5.676987648010254
    7. ' deque' → logprob: -6.176987648010254
    8. '`' → logprob: -7.176987648010254
    9. ' que' → logprob: -7.301987648010254
    10. 'Deque' → logprob: -7.551987648010254

Token 74: '))

' (ID: 9746)
  Prédit: '))'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '))' → logprob: -0.007986200973391533
    2. ''))' → logprob: -5.507986068725586
    3. '   ' → logprob: -5.632986068725586
    4. ')' → logprob: -9.132986068725586
    5. ')))' → logprob: -9.132986068725586
    6. '"))' → logprob: -10.632986068725586
    7. '))
' → logprob: -10.882986068725586
    8. '__))' → logprob: -10.882986068725586
    9. '()))' → logprob: -11.007986068725586
    10. '       ' → logprob: -12.007986068725586

Token 75: 'm' (ID: 76)
  Prédit: 'm'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'm' → logprob: -0.0008346432005055249
    2. 'if' → logprob: -7.6258344650268555
    3. '   ' → logprob: -8.625834465026855
    4. 'def' → logprob: -9.000834465026855
    5. 'print' → logprob: -10.500834465026855
    6. '#' → logprob: -12.125834465026855
    7. '```' → logprob: -13.125834465026855
    8. 'None' → logprob: -13.250834465026855
    9. 'deque' → logprob: -13.750834465026855
    10. 'de' → logprob: -14.500834465026855

Token 76: 'yst' (ID: 783)
  Prédit: 'yst'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'yst' → logprob: -0.00039623770862817764
    2. 'y' → logprob: -8.625395774841309
    3. 'YST' → logprob: -9.375395774841309
    4. 'yster' → logprob: -9.375395774841309
    5. 'ysty' → logprob: -10.375395774841309
    6. 'def' → logprob: -12.625395774841309
    7. '```' → logprob: -12.625395774841309
    8. 'yste' → logprob: -13.375395774841309
    9. 'ys' → logprob: -13.750395774841309
    10. 'ister' → logprob: -13.875395774841309

Token 77: 'ery' (ID: 875)
  Prédit: 'ery'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'ery' → logprob: -1.981667537620524e-06
    2. 'ERY' → logprob: -13.625001907348633
    3. 'e' → logprob: -15.000001907348633
    4. ' ery' → logprob: -15.750001907348633
    5. 'éry' → logprob: -16.375001907348633
    6. 'eries' → logprob: -17.500001907348633
    7. 'ey' → logprob: -18.125001907348633
    8. 'eryl' → logprob: -18.500001907348633
    9. 'erty' → logprob: -18.875001907348633
    10. 'tery' → logprob: -19.000001907348633

Token 78: '()' (ID: 416)
  Prédit: '()'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '()' → logprob: -4.008129963040119e-06
    2. '()`' → logprob: -12.875003814697266
    3. '().' → logprob: -14.625003814697266
    4. '()(' → logprob: -15.625003814697266
    5. '()"' → logprob: -15.875003814697266
    6. ']()' → logprob: -16.250003814697266
    7. '()
' → logprob: -16.875003814697266
    8. '(' → logprob: -17.125003814697266
    9. '()<' → logprob: -17.125003814697266
    10. '（）' → logprob: -17.375003814697266


RÉSUMÉ:
--------------------------------------------------------------------------------
Total des tokens analysés: 76
Tokens correctement prédits (1ère position, stricte): 27
Tokens correctement prédits (1ère position, avec adaptation): 27
Tokens correctement prédits (top 10): 58
Précision stricte (1ère position): 35.53%
Précision adaptée (1ère position): 35.53%
Précision (top 10): 76.32%
================================================================================
