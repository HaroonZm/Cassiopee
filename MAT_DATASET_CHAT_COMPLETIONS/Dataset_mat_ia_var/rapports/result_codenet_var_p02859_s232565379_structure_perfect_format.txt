================================================================================
ANALYSE DE PRÉDICTION TOKEN PAR TOKEN (BATCH API)
Date: 2025-06-04 19:38:02
Modèle de tokenisation: gpt-4o-mini
================================================================================

SCRIPT ANALYSÉ:
--------------------------------------------------------------------------------
r = int(input())
print(r * r)
--------------------------------------------------------------------------------

RÉSULTATS D'ANALYSE TOKEN PAR TOKEN:
--------------------------------------------------------------------------------
Token 0: 'r' (ID: 81)
  → Token d'amorce (pas de prédiction)

Token 1: ' =' (ID: 314)
  → Token d'amorce (pas de prédiction)

Token 2: ' int' (ID: 677)
  → Token d'amorce (pas de prédiction)

Token 3: '(input' (ID: 10054)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '(' → logprob: -0.0019693158101290464
    2. '(r' → logprob: -6.501969337463379
    3. 'r' → logprob: -8.501969337463379
    4. '```' → logprob: -8.876969337463379
    5. '('' → logprob: -10.126969337463379
    6. ''' → logprob: -11.251969337463379
    7. '("("' → logprob: -11.251969337463379
    8. '()' → logprob: -11.876969337463379
    9. ' (' → logprob: -12.001969337463379
    10. ')' → logprob: -12.251969337463379

Token 4: '())
' (ID: 4574)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '(' → logprob: -0.015442471019923687
    2. ')' → logprob: -4.515442371368408
    3. '()' → logprob: -5.640442371368408
    4. '(
' → logprob: -8.265442848205566
    5. ''' → logprob: -9.265442848205566
    6. '```' → logprob: -9.640442848205566
    7. '())' → logprob: -9.890442848205566
    8. '[' → logprob: -10.015442848205566
    9. '"' → logprob: -10.015442848205566
    10. '(()' → logprob: -10.640442848205566

Token 5: 'print' (ID: 1598)
  Prédit: 'if'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'if' → logprob: -0.8202597498893738
    2. '+' → logprob: -1.4452598094940186
    3. '%' → logprob: -2.0702598094940186
    4. '*' → logprob: -3.1952598094940186
    5. 's' → logprob: -3.3202598094940186
    6. '\n' → logprob: -3.8202598094940186
    7. 'for' → logprob: -3.9452598094940186
    8. 'i' → logprob: -4.6952595710754395
    9. '`' → logprob: -4.6952595710754395
    10. ''' → logprob: -4.8202595710754395

Token 6: '(r' (ID: 4729)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(' → logprob: -0.005143985152244568
    2. '('' → logprob: -5.380144119262695
    3. '("("' → logprob: -7.755144119262695
    4. '(r' → logprob: -9.380144119262695
    5. '()' → logprob: -12.755144119262695
    6. '(f' → logprob: -12.880144119262695
    7. '("""' → logprob: -13.505144119262695
    8. '("")' → logprob: -14.255144119262695
    9. '(
' → logprob: -14.505144119262695
    10. '((' → logprob: -14.505144119262695

Token 7: ' *' (ID: 425)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ')' → logprob: -0.0002406090497970581
    2. '))' → logprob: -8.625240325927734
    3. '`)' → logprob: -10.000240325927734
    4. '')' → logprob: -11.625240325927734
    5. '")' → logprob: -12.875240325927734
    6. ' )' → logprob: -13.875240325927734
    7. ')`' → logprob: -14.625240325927734
    8. '[' → logprob: -14.750240325927734
    9. 'r' → logprob: -14.875240325927734
    10. ')))' → logprob: -15.375240325927734

Token 8: ' r' (ID: 428)
  Prédit: '2'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '2' → logprob: -0.9119842648506165
    2. ' ' → logprob: -1.0369842052459717
    3. 'r' → logprob: -2.5369842052459717
    4. ' r' → logprob: -2.9119842052459717
    5. '"' → logprob: -3.0369842052459717
    6. ''' → logprob: -3.4119842052459717
    7. '10' → logprob: -5.161984443664551
    8. ' '' → logprob: -5.161984443664551
    9. ' "' → logprob: -5.786984443664551
    10. ')' → logprob: -6.036984443664551

Token 9: ')' (ID: 8)
  Prédit: ')'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')' → logprob: -0.00012844942102674395
    2. '))' → logprob: -9.625128746032715
    3. '`)' → logprob: -9.750128746032715
    4. ' )' → logprob: -13.625128746032715
    5. '')' → logprob: -13.875128746032715
    6. ')`' → logprob: -14.750128746032715
    7. ')
' → logprob: -14.875128746032715
    8. '```' → logprob: -15.375128746032715
    9. '#' → logprob: -15.750128746032715
    10. '*' → logprob: -16.2501277923584


RÉSUMÉ:
--------------------------------------------------------------------------------
Total des tokens analysés: 7
Tokens correctement prédits (1ère position, stricte): 1
Tokens correctement prédits (1ère position, avec adaptation): 1
Tokens correctement prédits (top 10): 3
Précision stricte (1ère position): 14.29%
Précision adaptée (1ère position): 14.29%
Précision (top 10): 42.86%
================================================================================
