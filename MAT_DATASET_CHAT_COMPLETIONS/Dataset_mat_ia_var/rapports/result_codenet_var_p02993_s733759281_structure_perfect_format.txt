================================================================================
ANALYSE DE PRÉDICTION TOKEN PAR TOKEN (BATCH API)
Date: 2025-06-04 19:54:27
Modèle de tokenisation: gpt-4o-mini
================================================================================

SCRIPT ANALYSÉ:
--------------------------------------------------------------------------------
s = input()
for i in range(3):
    if s[i] == s[i + 1]:
        print("Bad")
        exit()
print("Good")
--------------------------------------------------------------------------------

RÉSULTATS D'ANALYSE TOKEN PAR TOKEN:
--------------------------------------------------------------------------------
Token 0: 's' (ID: 82)
  → Token d'amorce (pas de prédiction)

Token 1: ' =' (ID: 314)
  → Token d'amorce (pas de prédiction)

Token 2: ' input' (ID: 3422)
  → Token d'amorce (pas de prédiction)

Token 3: '()
' (ID: 1234)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '(' → logprob: -0.003705062437802553
    2. '('' → logprob: -6.378705024719238
    3. '()' → logprob: -7.128705024719238
    4. ''' → logprob: -7.128705024719238
    5. '"' → logprob: -9.128705024719238
    6. '`' → logprob: -9.378705024719238
    7. '(
' → logprob: -9.753705024719238
    8. '("("' → logprob: -10.128705024719238
    9. '```' → logprob: -10.378705024719238
    10. '(`' → logprob: -11.253705024719238

Token 4: 'for' (ID: 1938)
  Prédit: '.'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '.' → logprob: -0.20795322954654694
    2. 'if' → logprob: -2.2079532146453857
    3. '.strip' → logprob: -3.7079532146453857
    4. '+' → logprob: -4.207953453063965
    5. 'print' → logprob: -4.832953453063965
    6. '[' → logprob: -4.957953453063965
    7. '[::-' → logprob: -5.332953453063965
    8. '.split' → logprob: -6.082953453063965
    9. ' if' → logprob: -6.082953453063965
    10. '```' → logprob: -6.332953453063965

Token 5: ' i' (ID: 575)
  Prédit: ' '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' ' → logprob: -0.004056671168655157
    2. ' s' → logprob: -6.254056453704834
    3. '  ' → logprob: -6.754056453704834
    4. ' i' → logprob: -7.004056453704834
    5. ''' → logprob: -11.629056930541992
    6. 'i' → logprob: -11.754056930541992
    7. 's' → logprob: -11.879056930541992
    8. ' n' → logprob: -12.629056930541992
    9. ' ‌' → logprob: -12.629056930541992
    10. ' ' → logprob: -12.754056930541992

Token 6: ' in' (ID: 306)
  Prédit: 'n'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'n' → logprob: -0.22433599829673767
    2. 'in' → logprob: -2.3493359088897705
    3. ' in' → logprob: -2.4743359088897705
    4. ' n' → logprob: -4.09933614730835
    5. ' ' → logprob: -5.47433614730835
    6. '  ' → logprob: -8.724335670471191
    7. ',' → logprob: -9.724335670471191
    8. '(n' → logprob: -10.099335670471191
    9. 'nt' → logprob: -10.224335670471191
    10. '_' → logprob: -10.349335670471191

Token 7: ' range' (ID: 3352)
  Prédit: ' range'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' range' → logprob: -0.12216722965240479
    2. 'range' → logprob: -2.2471671104431152
    3. ' s' → logprob: -4.997167110443115
    4. 's' → logprob: -5.997167110443115
    5. ' ' → logprob: -9.997167587280273
    6. ''' → logprob: -12.497167587280273
    7. '(range' → logprob: -13.247167587280273
    8. '	range' → logprob: -13.247167587280273
    9. '_range' → logprob: -13.372167587280273
    10. ' in' → logprob: -13.872167587280273

Token 8: '(' (ID: 7)
  Prédit: '('
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(' → logprob: -0.0006118826568126678
    2. '(len' → logprob: -7.500611782073975
    3. '(s' → logprob: -10.125612258911133
    4. '(i' → logprob: -12.250612258911133
    5. 's' → logprob: -12.625612258911133
    6. '((' → logprob: -12.750612258911133
    7. ' (' → logprob: -12.875612258911133
    8. '(n' → logprob: -13.375612258911133
    9. '(`' → logprob: -14.000612258911133
    10. '(length' → logprob: -14.375612258911133

Token 9: '3' (ID: 18)
  Prédit: 'len'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'len' → logprob: -0.026837540790438652
    2. '1' → logprob: -4.151837348937988
    3. 's' → logprob: -5.151837348937988
    4. ' len' → logprob: -5.776837348937988
    5. '10' → logprob: -6.776837348937988
    6. '(len' → logprob: -8.026837348937988
    7. '3' → logprob: -9.151837348937988
    8. '0' → logprob: -9.651837348937988
    9. '5' → logprob: -9.901837348937988
    10. 'int' → logprob: -10.776837348937988

Token 10: '):
' (ID: 1883)
  Prédit: '):'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '):' → logprob: -0.01262336503714323
    2. ')' → logprob: -4.387623310089111
    3. ':' → logprob: -9.88762378692627
    4. ',' → logprob: -10.88762378692627
    5. '[' → logprob: -11.38762378692627
    6. '):
' → logprob: -12.13762378692627
    7. '+' → logprob: -12.26262378692627
    8. ' ):' → logprob: -12.26262378692627
    9. '*' → logprob: -12.38762378692627
    10. 's' → logprob: -12.38762378692627

Token 11: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.09068498760461807
    2. ':' → logprob: -2.5906848907470703
    3. '    ' → logprob: -5.46568489074707
    4. '```' → logprob: -6.21568489074707
    5. ''' → logprob: -6.34068489074707
    6. '    
' → logprob: -7.09068489074707
    7. ' ' → logprob: -7.46568489074707
    8. 's' → logprob: -7.84068489074707
    9. '"' → logprob: -7.96568489074707
    10. 'print' → logprob: -8.46568489074707

Token 12: ' if' (ID: 538)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.8895773887634277
    2. ' print' → logprob: -1.2645773887634277
    3. ' s' → logprob: -2.0145773887634277
    4. 's' → logprob: -2.1395773887634277
    5. 'print' → logprob: -3.0145773887634277
    6. '    ' → logprob: -5.264577388763428
    7. '```' → logprob: -7.389577388763428
    8. ' for' → logprob: -8.139577865600586
    9. ' ' → logprob: -8.889577865600586
    10. '_' → logprob: -10.389577865600586

Token 13: ' s' (ID: 265)
  Prédit: ' s'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' s' → logprob: -0.09722176194190979
    2. 's' → logprob: -2.597221851348877
    3. ' i' → logprob: -4.722221851348877
    4. ' ' → logprob: -4.972221851348877
    5. 'i' → logprob: -6.097221851348877
    6. ' not' → logprob: -10.347221374511719
    7. '  ' → logprob: -10.972221374511719
    8. ' ' → logprob: -10.972221374511719
    9. ' len' → logprob: -12.097221374511719
    10. '   ' → logprob: -12.722221374511719

Token 14: '[i' (ID: 1768)
  Prédit: '[i'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '[i' → logprob: -0.12741780281066895
    2. '[' → logprob: -2.127417802810669
    3. '.startswith' → logprob: -8.50241756439209
    4. ' ==' → logprob: -9.12741756439209
    5. '==' → logprob: -9.12741756439209
    6. ' [' → logprob: -10.75241756439209
    7. '[int' → logprob: -11.62741756439209
    8. '.' → logprob: -11.62741756439209
    9. '[in' → logprob: -12.62741756439209
    10. '[I' → logprob: -12.75241756439209

Token 15: ']' (ID: 60)
  Prédit: ']'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ']' → logprob: -0.024356363341212273
    2. ']==' → logprob: -4.899356365203857
    3. '==' → logprob: -5.149356365203857
    4. '[' → logprob: -5.524356365203857
    5. ' ]' → logprob: -5.774356365203857
    6. ' ==' → logprob: -6.149356365203857
    7. '=' → logprob: -7.399356365203857
    8. ':' → logprob: -8.2743558883667
    9. ')' → logprob: -8.7743558883667
    10. ' ' → logprob: -9.5243558883667

Token 16: ' ==' (ID: 951)
  Prédit: '=='
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '==' → logprob: -0.2928381562232971
    2. ' ==' → logprob: -1.4178380966186523
    3. '!=' → logprob: -5.167838096618652
    4. '=' → logprob: -5.667838096618652
    5. ' !=' → logprob: -7.417838096618652
    6. ' in' → logprob: -7.667838096618652
    7. '[' → logprob: -8.292838096618652
    8. ':' → logprob: -8.292838096618652
    9. '.' → logprob: -8.917838096618652
    10. ' ' → logprob: -9.542838096618652

Token 17: ' s' (ID: 265)
  Prédit: '''
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ''' → logprob: -0.16812677681446075
    2. '"' → logprob: -2.6681268215179443
    3. ''a' → logprob: -2.9181268215179443
    4. ''s' → logprob: -5.168126583099365
    5. ''A' → logprob: -5.293126583099365
    6. 's' → logprob: -5.418126583099365
    7. '"s' → logprob: -5.543126583099365
    8. ''o' → logprob: -6.043126583099365
    9. '"a' → logprob: -6.793126583099365
    10. ''i' → logprob: -7.168126583099365

Token 18: '[i' (ID: 1768)
  Prédit: '[i'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '[i' → logprob: -0.0075965765863657
    2. '[' → logprob: -5.007596492767334
    3. '[j' → logprob: -8.382596969604492
    4. ''' → logprob: -8.882596969604492
    5. ''[' → logprob: -9.257596969604492
    6. ']' → logprob: -9.757596969604492
    7. ''.' → logprob: -10.382596969604492
    8. '[s' → logprob: -10.507596969604492
    9. '[(' → logprob: -10.507596969604492
    10. '-' → logprob: -10.757596969604492

Token 19: ' +' (ID: 659)
  Prédit: '+'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '+' → logprob: -0.018516402691602707
    2. '-' → logprob: -4.143516540527344
    3. ' +' → logprob: -6.268516540527344
    4. ']' → logprob: -8.143516540527344
    5. ' -' → logprob: -9.018516540527344
    6. ']+' → logprob: -10.143516540527344
    7. ']:' → logprob: -10.143516540527344
    8. '1' → logprob: -10.643516540527344
    9. ' ' → logprob: -11.018516540527344
    10. '   ' → logprob: -11.768516540527344

Token 20: ' ' (ID: 220)
  Prédit: '1'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '1' → logprob: -0.0009574358118698001
    2. ' ' → logprob: -7.000957489013672
    3. '2' → logprob: -10.250957489013672
    4. '3' → logprob: -12.500957489013672
    5. '4' → logprob: -12.750957489013672
    6. ''' → logprob: -13.500957489013672
    7. '6' → logprob: -14.813457489013672
    8. '`' → logprob: -15.125957489013672
    9. '```' → logprob: -15.125957489013672
    10. 'i' → logprob: -15.313457489013672

Token 21: '1' (ID: 16)
  Prédit: '1'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '1' → logprob: -4.870950215263292e-05
    2. '2' → logprob: -10.625048637390137
    3. '3' → logprob: -11.125048637390137
    4. ' ' → logprob: -11.750048637390137
    5. '4' → logprob: -15.000048637390137
    6. '   ' → logprob: -15.125048637390137
    7. 'i' → logprob: -15.500048637390137
    8. '```' → logprob: -15.687548637390137
    9. '0' → logprob: -16.062549591064453
    10. '-' → logprob: -16.187549591064453

Token 22: ']:
' (ID: 22152)
  Prédit: ':'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ':' → logprob: -0.6682928800582886
    2. '):' → logprob: -1.0432928800582886
    3. ']:' → logprob: -2.793292999267578
    4. ' or' → logprob: -3.668292999267578
    5. ' ):' → logprob: -4.293292999267578
    6. ' and' → logprob: -4.668292999267578
    7. ')' → logprob: -4.793292999267578
    8. ' :' → logprob: -5.043292999267578
    9. ']' → logprob: -5.793292999267578
    10. '=' → logprob: -6.793292999267578

Token 23: '       ' (ID: 309)
  Prédit: '       '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '       ' → logprob: -0.23101551830768585
    2. '   ' → logprob: -1.8560155630111694
    3. ' continue' → logprob: -3.98101544380188
    4. ':' → logprob: -4.356015682220459
    5. '    ' → logprob: -4.356015682220459
    6. 'continue' → logprob: -5.856015682220459
    7. '     ' → logprob: -7.481015682220459
    8. ' ' → logprob: -7.981015682220459
    9. 'print' → logprob: -7.981015682220459
    10. '           ' → logprob: -8.3560152053833

Token 24: ' print' (ID: 2123)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -1.08079993724823
    2. ' continue' → logprob: -1.33079993724823
    3. 'print' (adapté à ' print') → logprob: -1.83079993724823
    4. 'continue' → logprob: -2.2058000564575195
    5. '       ' → logprob: -2.4558000564575195
    6. ' print' → logprob: -3.7058000564575195
    7. 's' → logprob: -4.4558000564575195
    8. '           ' → logprob: -6.5808000564575195
    9. ' s' → logprob: -6.8308000564575195
    10. '    ' → logprob: -7.4558000564575195

Token 25: '("' (ID: 568)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(' → logprob: -0.17930030822753906
    2. '(s' → logprob: -1.929300308227539
    3. '("' → logprob: -4.804300308227539
    4. '('' → logprob: -5.554300308227539
    5. '(i' → logprob: -5.804300308227539
    6. '("("' → logprob: -6.179300308227539
    7. 's' → logprob: -7.054300308227539
    8. '()' → logprob: -7.804300308227539
    9. '((' → logprob: -7.929300308227539
    10. '(True' → logprob: -10.054300308227539

Token 26: 'Bad' (ID: 22048)
  Prédit: 'No'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'No' → logprob: -1.423168659210205
    2. 'Yes' → logprob: -1.673168659210205
    3. 'Bad' → logprob: -1.798168659210205
    4. ')' → logprob: -1.923168659210205
    5. '"' → logprob: -2.548168659210205
    6. 's' → logprob: -2.798168659210205
    7. '")' → logprob: -3.673168659210205
    8. 'Error' → logprob: -4.173168659210205
    9. 'NO' → logprob: -4.298168659210205
    10. 'i' → logprob: -4.798168659210205

Token 27: '")
' (ID: 1896)
  Prédit: '")'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '")' → logprob: -0.017689771950244904
    2. ' ")' → logprob: -4.6426897048950195
    3. 'String' → logprob: -5.5176897048950195
    4. 'Input' → logprob: -7.0176897048950195
    5. ' )' → logprob: -7.2676897048950195
    6. ' String' → logprob: -7.8926897048950195
    7. ')' → logprob: -7.8926897048950195
    8. ' ' → logprob: -8.01768970489502
    9. '")
' → logprob: -8.39268970489502
    10. ' string' → logprob: -8.64268970489502

Token 28: '       ' (ID: 309)
  Prédit: '       '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '       ' → logprob: -0.0006522706826217473
    2. '           ' → logprob: -8.375652313232422
    3. '```' → logprob: -9.000652313232422
    4. '   ' → logprob: -9.250652313232422
    5. '<|end|>' → logprob: -9.750652313232422
    6. ' else' → logprob: -9.875652313232422
    7. 'else' → logprob: -10.000652313232422
    8. ')' → logprob: -11.000652313232422
    9. ',' → logprob: -12.125652313232422
    10. '
' → logprob: -12.375652313232422

Token 29: ' exit' (ID: 10654)
  Prédit: '       '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '       ' → logprob: -0.0009743517730385065
    2. '```' → logprob: -7.750974178314209
    3. '   ' → logprob: -8.750974655151367
    4. ' break' → logprob: -9.250974655151367
    5. 'break' → logprob: -9.250974655151367
    6. '           ' → logprob: -10.125974655151367
    7. '\n' → logprob: -10.375974655151367
    8. '        
' → logprob: -10.625974655151367
    9. '
' → logprob: -11.000974655151367
    10. '	break' → logprob: -11.125974655151367

Token 30: '()
' (ID: 1234)
  Prédit: '()'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '()' → logprob: -0.004647165071219206
    2. '(' → logprob: -5.379647254943848
    3. '()
' → logprob: -10.879647254943848
    4. '()

' → logprob: -13.129647254943848
    5. '()`' → logprob: -13.879647254943848
    6. ' ()' → logprob: -14.004647254943848
    7. '(
' → logprob: -14.254647254943848
    8. '()\' → logprob: -14.504647254943848
    9. '())' → logprob: -14.629647254943848
    10. '();' → logprob: -14.754647254943848

Token 31: 'print' (ID: 1598)
  Prédit: 'print'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'print' → logprob: -6.623244553338736e-05
    2. 'else' → logprob: -10.125065803527832
    3. ' print' → logprob: -11.250065803527832
    4. '```' → logprob: -12.500065803527832
    5. 'Print' → logprob: -13.125065803527832
    6. 'for' → logprob: -13.750065803527832
    7. 'continue' → logprob: -13.875065803527832
    8. 'Bad' → logprob: -14.000065803527832
    9. '   ' → logprob: -14.125065803527832
    10. ')' → logprob: -14.125065803527832

Token 32: '("' (ID: 568)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(' → logprob: -0.29962995648384094
    2. '()' → logprob: -2.0496299266815186
    3. '("' → logprob: -2.0496299266815186
    4. '("("' → logprob: -6.799630165100098
    5. '("")' → logprob: -8.924630165100098
    6. '('' → logprob: -9.549630165100098
    7. '(True' → logprob: -11.674630165100098
    8. '(s' → logprob: -11.674630165100098
    9. '"' → logprob: -13.674630165100098
    10. 's' → logprob: -14.049630165100098

Token 33: 'Good' (ID: 17212)
  Prédit: 'Good'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'Good' → logprob: -0.0010446012020111084
    2. 'Yes' → logprob: -7.751044750213623
    3. '"' → logprob: -7.876044750213623
    4. 'OK' → logprob: -9.376044273376465
    5. 'Ok' → logprob: -10.126044273376465
    6. 'Nice' → logprob: -10.751044273376465
    7. 'Perfect' → logprob: -11.001044273376465
    8. 'Safe' → logprob: -11.501044273376465
    9. 'Okay' → logprob: -11.751044273376465
    10. 's' → logprob: -12.001044273376465

Token 34: '")' (ID: 1405)
  Prédit: '")'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '")' → logprob: -1.8193366486229934e-05
    2. ')' → logprob: -11.000018119812012
    3. ')")' → logprob: -13.750018119812012
    4. '")
' → logprob: -15.500018119812012
    5. '"' → logprob: -16.000019073486328
    6. '!")' → logprob: -16.250019073486328
    7. '')' → logprob: -17.750019073486328
    8. '()' → logprob: -18.375019073486328
    9. '")

' → logprob: -18.750019073486328
    10. '\")' → logprob: -18.875019073486328


RÉSUMÉ:
--------------------------------------------------------------------------------
Total des tokens analysés: 32
Tokens correctement prédits (1ère position, stricte): 13
Tokens correctement prédits (1ère position, avec adaptation): 13
Tokens correctement prédits (top 10): 26
Précision stricte (1ère position): 40.62%
Précision adaptée (1ère position): 40.62%
Précision (top 10): 81.25%
================================================================================
