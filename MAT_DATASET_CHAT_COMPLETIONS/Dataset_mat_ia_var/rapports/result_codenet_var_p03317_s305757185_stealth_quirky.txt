================================================================================
ANALYSE DE PRÉDICTION TOKEN PAR TOKEN (BATCH API)
Date: 2025-06-04 20:15:25
Modèle de tokenisation: gpt-4o-mini
================================================================================

SCRIPT ANALYSÉ:
--------------------------------------------------------------------------------
from math import ceil as pizza_slice

d, s = (int(x) for x in input().split())
arr = [*map(int, input().split())]

getResult = lambda: pizza_slice((d-1)/(s-1))

print(getResult())
--------------------------------------------------------------------------------

RÉSULTATS D'ANALYSE TOKEN PAR TOKEN:
--------------------------------------------------------------------------------
Token 0: 'from' (ID: 2845)
  → Token d'amorce (pas de prédiction)

Token 1: ' math' (ID: 13324)
  → Token d'amorce (pas de prédiction)

Token 2: ' import' (ID: 1588)
  → Token d'amorce (pas de prédiction)

Token 3: ' ceil' (ID: 35964)
  Prédit: ' sqrt'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' sqrt' → logprob: -0.33762478828430176
    2. 'sqrt' → logprob: -1.3376247882843018
    3. ' pi' → logprob: -4.087624549865723
    4. 'pow' → logprob: -6.212624549865723
    5. 'pi' → logprob: -6.462624549865723
    6. ' sin' → logprob: -6.962624549865723
    7. 'sin' → logprob: -6.962624549865723
    8. ' ceil' → logprob: -7.337624549865723
    9. ' pow' → logprob: -8.212624549865723
    10. ' factorial' → logprob: -8.462624549865723

Token 4: ' as' (ID: 472)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '(' → logprob: -0.00012201975914649665
    2. '\(' → logprob: -9.3751220703125
    3. '(
' → logprob: -11.0001220703125
    4. '\' → logprob: -12.5001220703125
    5. ' (' → logprob: -12.5001220703125
    6. ',' → logprob: -12.5001220703125
    7. ' ' → logprob: -12.8751220703125
    8. 'a' → logprob: -13.5001220703125
    9. '.' → logprob: -13.6251220703125
    10. '\n' → logprob: -13.7501220703125

Token 5: ' pizza' (ID: 27941)
  Prédit: ' ceil'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' ceil' → logprob: -0.7079179883003235
    2. ' c' → logprob: -1.7079179286956787
    3. 'ceil' → logprob: -1.7079179286956787
    4. 'c' → logprob: -1.9579179286956787
    5. 'ce' → logprob: -7.082918167114258
    6. 'cel' → logprob: -7.332918167114258
    7. ' ce' → logprob: -7.457918167114258
    8. ' _' → logprob: -7.832918167114258
    9. ' ceiling' → logprob: -8.082918167114258
    10. ' ' → logprob: -8.457918167114258

Token 6: '_slice' (ID: 62789)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '(' → logprob: -0.001512004528194666
    2. ',' → logprob: -8.001511573791504
    3. '(p' → logprob: -8.001511573791504
    4. '(
' → logprob: -8.251511573791504
    5. '.' → logprob: -8.376511573791504
    6. '\(' → logprob: -8.876511573791504
    7. 'p' → logprob: -9.501511573791504
    8. ' (' → logprob: -10.876511573791504
    9. '#' → logprob: -10.876511573791504
    10. '\' → logprob: -11.251511573791504

Token 7: '

' (ID: 279)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '(' → logprob: -0.0030961965676397085
    2. '(
' → logprob: -6.628096103668213
    3. '\(' → logprob: -7.628096103668213
    4. ',' → logprob: -7.878096103668213
    5. '(p' → logprob: -8.128096580505371
    6. '#' → logprob: -8.878096580505371
    7. 'p' → logprob: -9.253096580505371
    8. ' (' → logprob: -9.753096580505371
    9. '\' → logprob: -10.003096580505371
    10. '\n' → logprob: -10.253096580505371

Token 8: 'd' (ID: 67)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '(' → logprob: -0.00039230400579981506
    2. '\(' → logprob: -9.125391960144043
    3. ',' → logprob: -9.250391960144043
    4. '(
' → logprob: -9.375391960144043
    5. '(p' → logprob: -10.625391960144043
    6. ' (' → logprob: -11.000391960144043
    7. '#' → logprob: -11.125391960144043
    8. '\' → logprob: -11.750391960144043
    9. 'p' → logprob: -12.125391960144043
    10. '.' → logprob: -12.375391960144043

Token 9: ',' (ID: 11)
  Prédit: 'e'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'e' → logprob: -0.2015429586172104
    2. 'i' → logprob: -2.701542854309082
    3. 'ef' → logprob: -3.451542854309082
    4. 'p' → logprob: -3.576542854309082
    5. '=' → logprob: -4.326542854309082
    6. ')' → logprob: -4.451542854309082
    7. 'o' → logprob: -4.826542854309082
    8. 'iv' → logprob: -5.451542854309082
    9. 'a' → logprob: -5.701542854309082
    10. 'f' → logprob: -5.826542854309082

Token 10: ' s' (ID: 265)
  Prédit: 'n'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'n' → logprob: -0.551592230796814
    2. ' n' → logprob: -1.926592230796814
    3. 'p' → logprob: -2.4265923500061035
    4. 't' → logprob: -3.0515923500061035
    5. 'm' → logprob: -3.1765923500061035
    6. 'h' → logprob: -3.8015923500061035
    7. ' p' → logprob: -4.0515923500061035
    8. ' t' → logprob: -4.4265923500061035
    9. ' m' → logprob: -4.6765923500061035
    10. 'k' → logprob: -5.0515923500061035

Token 11: ' =' (ID: 314)
  Prédit: '='
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '=' → logprob: -0.11298926919698715
    2. ' =' → logprob: -2.2379891872406006
    3. ',' → logprob: -8.98798942565918
    4. ' ' → logprob: -11.23798942565918
    5. ')' → logprob: -11.73798942565918
    6. '_' → logprob: -12.61298942565918
    7. 's' → logprob: -12.73798942565918
    8. 'p' → logprob: -13.11298942565918
    9. '=int' → logprob: -13.11298942565918
    10. '=s' → logprob: -13.48798942565918

Token 12: ' (' (ID: 350)
  Prédit: ' map'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' map' → logprob: -0.2712412476539612
    2. 'map' → logprob: -1.7712411880493164
    3. ' ' → logprob: -3.6462411880493164
    4. 'input' → logprob: -3.7712411880493164
    5. ' input' → logprob: -4.896241188049316
    6. '0' → logprob: -5.771241188049316
    7. '1' → logprob: -6.271241188049316
    8. '5' → logprob: -6.396241188049316
    9. '10' → logprob: -6.646241188049316
    10. '2' → logprob: -7.771241188049316

Token 13: 'int' (ID: 491)
  Prédit: '10'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '10' → logprob: -1.6453006267547607
    2. '5' → logprob: -1.7703006267547607
    3. '1' → logprob: -2.0203006267547607
    4. '4' → logprob: -2.6453006267547607
    5. ' ' → logprob: -2.6453006267547607
    6. 'int' → logprob: -2.8953006267547607
    7. 'map' → logprob: -3.0203006267547607
    8. '2' → logprob: -3.2703006267547607
    9. '8' → logprob: -3.3953006267547607
    10. '0' → logprob: -3.3953006267547607

Token 14: '(x' (ID: 4061)
  Prédit: '(input'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(input' → logprob: -0.01273753959685564
    2. '(x' → logprob: -5.13773775100708
    3. '(' → logprob: -5.38773775100708
    4. '(i' → logprob: -6.38773775100708
    5. '(s' → logprob: -8.762737274169922
    6. '()' → logprob: -9.262737274169922
    7. 'input' → logprob: -9.387737274169922
    8. ')' → logprob: -9.512737274169922
    9. '(token' → logprob: -11.012737274169922
    10. '(raw' → logprob: -11.012737274169922

Token 15: ')' (ID: 8)
  Prédit: ')'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')' → logprob: -0.00019448090461082757
    2. '())' → logprob: -9.000194549560547
    3. 'input' → logprob: -10.000194549560547
    4. '(input' → logprob: -11.875194549560547
    5. '),' → logprob: -12.125194549560547
    6. '))' → logprob: -12.250194549560547
    7. ' )' → logprob: -13.375194549560547
    8. '(x' → logprob: -14.125194549560547
    9. '('' → logprob: -14.250194549560547
    10. '()' → logprob: -14.250194549560547

Token 16: ' for' (ID: 395)
  Prédit: 'input'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'input' → logprob: -0.4753759801387787
    2. ')' → logprob: -1.100376009941101
    3. 'for' → logprob: -3.9753758907318115
    4. '(input' → logprob: -3.9753758907318115
    5. ' input' → logprob: -5.225376129150391
    6. ' for' → logprob: -6.475376129150391
    7. '()' → logprob: -7.975376129150391
    8. '),' → logprob: -8.10037612915039
    9. '=input' → logprob: -8.22537612915039
    10. ',' → logprob: -10.22537612915039

Token 17: ' x' (ID: 1215)
  Prédit: ' input'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' input' → logprob: -0.016847703605890274
    2. 'input' → logprob: -4.266847610473633
    3. ' x' → logprob: -6.891847610473633
    4. ' range' → logprob: -7.016847610473633
    5. ' ' → logprob: -8.141847610473633
    6. ' raw' → logprob: -8.766847610473633
    7. ' s' → logprob: -9.516847610473633
    8. ' user' → logprob: -10.016847610473633
    9. ' in' → logprob: -10.391847610473633
    10. ' d' → logprob: -10.516847610473633

Token 18: ' in' (ID: 306)
  Prédit: ' in'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' in' → logprob: -0.20249176025390625
    2. ' input' → logprob: -1.9524917602539062
    3. 'input' → logprob: -3.2024917602539062
    4. 'in' → logprob: -7.577491760253906
    5. '=input' → logprob: -9.202491760253906
    6. ')' → logprob: -10.702491760253906
    7. ' ' → logprob: -10.952491760253906
    8. ' range' → logprob: -11.202491760253906
    9. '[input' → logprob: -11.202491760253906
    10. '(input' → logprob: -11.952491760253906

Token 19: ' input' (ID: 3422)
  Prédit: 'input'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'input' → logprob: -0.2014610916376114
    2. ' input' → logprob: -1.7014610767364502
    3. '(input' → logprob: -11.326460838317871
    4. 's' → logprob: -11.951460838317871
    5. ' ' → logprob: -12.076460838317871
    6. 'range' → logprob: -12.201460838317871
    7. 'str' → logprob: -12.951460838317871
    8. ')' → logprob: -12.951460838317871
    9. ' s' → logprob: -13.201460838317871
    10. '=input' → logprob: -13.326460838317871

Token 20: '().' (ID: 1454)
  Prédit: '()'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '()' → logprob: -0.505162239074707
    2. '())' → logprob: -1.630162239074707
    3. '().' → logprob: -1.630162239074707
    4. '(' → logprob: -6.505162239074707
    5. '());' → logprob: -6.505162239074707
    6. '()),' → logprob: -7.755162239074707
    7. '('' → logprob: -8.130162239074707
    8. '()>' → logprob: -8.755162239074707
    9. '()))' → logprob: -8.880162239074707
    10. '();)' → logprob: -8.880162239074707

Token 21: 'split' (ID: 13627)
  Prédit: 'split'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'split' → logprob: -0.0007145775598473847
    2. 'strip' → logprob: -7.2507147789001465
    3. 'rstrip' → logprob: -12.500714302062988
    4. ' split' → logprob: -14.125714302062988
    5. ')' → logprob: -16.125715255737305
    6. 'spl' → logprob: -16.875715255737305
    7. '(split' → logprob: -17.625715255737305
    8. 'read' → logprob: -18.125715255737305
    9. '_split' → logprob: -18.875715255737305
    10. 's' → logprob: -19.125715255737305

Token 22: '())
' (ID: 4574)
  Prédit: '())'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '())' → logprob: -0.06802435964345932
    2. ')' → logprob: -3.1930243968963623
    3. '()' → logprob: -4.443024158477783
    4. '('' → logprob: -4.818024158477783
    5. '(' → logprob: -5.693024158477783
    6. '()))' → logprob: -7.443024158477783
    7. '))' → logprob: -7.693024158477783
    8. '(','' → logprob: -8.193024635314941
    9. '(()' → logprob: -10.568024635314941
    10. ' ())' → logprob: -10.693024635314941

Token 23: 'arr' (ID: 1614)
  Prédit: '
'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '
' → logprob: -0.8583886623382568
    2. ')' → logprob: -1.4833886623382568
    3. '\n' → logprob: -2.733388662338257
    4. ' 
' → logprob: -2.858388662338257
    5. ',' → logprob: -2.983388662338257
    6. ':' → logprob: -3.358388662338257
    7. '  
' → logprob: -3.733388662338257
    8. ' ' → logprob: -3.983388662338257
    9. ' pizza' → logprob: -3.983388662338257
    10. '<|end|>' → logprob: -4.108388900756836

Token 24: ' =' (ID: 314)
  Prédit: '['
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '[' → logprob: -0.3959132432937622
    2. '[:]' → logprob: -1.7709132432937622
    3. ' =' → logprob: -3.1459131240844727
    4. '[]' → logprob: -3.5209131240844727
    5. '=' → logprob: -3.8959131240844727
    6. 's' → logprob: -4.020913124084473
    7. 'ays' → logprob: -4.395913124084473
    8. 'ay' → logprob: -5.270913124084473
    9. '=[]' → logprob: -5.395913124084473
    10. ')' → logprob: -5.395913124084473

Token 25: ' [' (ID: 723)
  Prédit: '['
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '[' → logprob: -0.9006471037864685
    2. ' [' → logprob: -1.2756471633911133
    3. '[]' → logprob: -1.6506471633911133
    4. '[list' → logprob: -3.4006471633911133
    5. 'list' → logprob: -3.5256471633911133
    6. ' list' → logprob: -4.400647163391113
    7. '[int' → logprob: -4.525647163391113
    8. ' []' → logprob: -4.525647163391113
    9. '[i' → logprob: -4.900647163391113
    10. '[input' → logprob: -5.150647163391113

Token 26: '*' (ID: 9)
  Prédit: 'int'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'int' → logprob: -0.008489049971103668
    2. '0' → logprob: -5.00848913192749
    3. ' int' → logprob: -6.63348913192749
    4. '(int' → logprob: -9.008488655090332
    5. 'pizza' → logprob: -9.258488655090332
    6. '   ' → logprob: -9.508488655090332
    7. ']int' → logprob: -10.258488655090332
    8. '[int' → logprob: -10.633488655090332
    9. ' ' → logprob: -11.133488655090332
    10. '1' → logprob: -11.508488655090332

Token 27: 'map' (ID: 3726)
  Prédit: 'map'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'map' → logprob: -0.2033807635307312
    2. 'range' → logprob: -1.703380823135376
    3. '(map' → logprob: -6.828380584716797
    4. '(int' → logprob: -8.453380584716797
    5. '(range' → logprob: -8.453380584716797
    6. 'input' → logprob: -8.578380584716797
    7. 'int' → logprob: -9.078380584716797
    8. ' map' → logprob: -9.578380584716797
    9. ' range' → logprob: -9.703380584716797
    10. '[int' → logprob: -11.453380584716797

Token 28: '(int' (ID: 2742)
  Prédit: '(int'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(int' → logprob: -0.0005171707598492503
    2. '(' → logprob: -7.75051736831665
    3. '(p' → logprob: -10.000516891479492
    4. '(float' → logprob: -10.500516891479492
    5. 'int' → logprob: -12.375516891479492
    6. ']int' → logprob: -13.125516891479492
    7. ',int' → logprob: -13.375516891479492
    8. '<int' → logprob: -13.750516891479492
    9. '(str' → logprob: -13.750516891479492
    10. ' (' → logprob: -14.000516891479492

Token 29: ',' (ID: 11)
  Prédit: ',input'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ',input' → logprob: -0.0431777723133564
    2. ',' → logprob: -3.168177843093872
    3. 'input' → logprob: -9.293177604675293
    4. '(input' → logprob: -9.543177604675293
    5. ' ,' → logprob: -11.543177604675293
    6. ',(' → logprob: -13.668177604675293
    7. '(' → logprob: -14.168177604675293
    8. '(),' → logprob: -14.418177604675293
    9. ',int' → logprob: -14.668177604675293
    10. '```' → logprob: -15.293177604675293

Token 30: ' input' (ID: 3422)
  Prédit: 'input'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'input' → logprob: -0.1605851948261261
    2. ' input' → logprob: -1.9105851650238037
    3. ' ' → logprob: -8.535585403442383
    4. '   ' → logprob: -10.160585403442383
    5. ',input' → logprob: -10.660585403442383
    6. 'range' → logprob: -11.160585403442383
    7. ')' → logprob: -11.285585403442383
    8. '(input' → logprob: -11.285585403442383
    9. '  ' → logprob: -11.410585403442383
    10. '    ' → logprob: -11.660585403442383

Token 31: '().' (ID: 1454)
  Prédit: '().'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '().' → logprob: -0.00022952310973778367
    2. ')' → logprob: -8.875229835510254
    3. '())' → logprob: -9.875229835510254
    4. '()' → logprob: -10.375229835510254
    5. ')]' → logprob: -12.875229835510254
    6. ')])' → logprob: -13.500229835510254
    7. ' ().' → logprob: -13.500229835510254
    8. '))' → logprob: -14.500229835510254
    9. '.' → logprob: -15.000229835510254
    10. '()))' → logprob: -15.625229835510254

Token 32: 'split' (ID: 13627)
  Prédit: 'split'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'split' → logprob: -2.093505099765025e-05
    2. ' split' → logprob: -11.500020980834961
    3. 'strip' → logprob: -11.625020980834961
    4. 'rstrip' → logprob: -13.750020980834961
    5. 'spl' → logprob: -14.750020980834961
    6. '(split' → logprob: -16.00002098083496
    7. ' ' → logprob: -16.12502098083496
    8. ')' → logprob: -17.00002098083496
    9. 's' → logprob: -17.00002098083496
    10. '.split' → logprob: -17.12502098083496

Token 33: '())' (ID: 3516)
  Prédit: '())'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '())' → logprob: -0.0017985886661335826
    2. ')]' → logprob: -6.751798629760742
    3. '()]' → logprob: -8.501798629760742
    4. '()))' → logprob: -8.501798629760742
    5. ')' → logprob: -9.126798629760742
    6. '()' → logprob: -9.251798629760742
    7. ')])' → logprob: -12.001798629760742
    8. '))' → logprob: -12.376798629760742
    9. '(' → logprob: -13.126798629760742
    10. '()),' → logprob: -13.126798629760742

Token 34: ']

' (ID: 3144)
  Prédit: ')]'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ')]' → logprob: -0.006698319222778082
    2. ')' → logprob: -5.131698131561279
    3. ']' → logprob: -7.256698131561279
    4. ')])' → logprob: -10.381698608398438
    5. ')]
' → logprob: -11.256698608398438
    6. '))' → logprob: -12.381698608398438
    7. '()]' → logprob: -12.756698608398438
    8. ')]

' → logprob: -13.006698608398438
    9. '])]' → logprob: -13.381698608398438
    10. ')],' → logprob: -13.381698608398438

Token 35: 'get' (ID: 522)
  Prédit: 'total'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'total' → logprob: -0.8864664435386658
    2. '
' → logprob: -1.1364665031433105
    3. 'n' → logprob: -3.0114665031433105
    4. 's' → logprob: -3.2614665031433105
    5. 'print' → logprob: -3.2614665031433105
    6. 'for' → logprob: -3.7614665031433105
    7. 'result' → logprob: -4.1364665031433105
    8. 'pizza' → logprob: -4.3864665031433105
    9. ' 
' → logprob: -4.5114665031433105
    10. ' total' → logprob: -4.6364665031433105

Token 36: 'Result' (ID: 2769)
  Prédit: '_'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '_' → logprob: -0.20118191838264465
    2. '_slice' → logprob: -2.9511818885803223
    3. '_s' → logprob: -3.4511818885803223
    4. 'attr' → logprob: -3.8261818885803223
    5. '_p' → logprob: -3.9511818885803223
    6. '_max' → logprob: -4.201181888580322
    7. '_total' → logprob: -4.576181888580322
    8. 's' → logprob: -4.576181888580322
    9. ' =' → logprob: -5.951181888580322
    10. '_len' → logprob: -6.201181888580322

Token 37: ' =' (ID: 314)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '(' → logprob: -0.009700260125100613
    2. '(p' → logprob: -5.134700298309326
    3. '((' → logprob: -7.009700298309326
    4. '()' → logprob: -7.384700298309326
    5. '_p' → logprob: -7.884700298309326
    6. '=' → logprob: -8.259699821472168
    7. 's' → logprob: -8.509699821472168
    8. '_' → logprob: -8.509699821472168
    9. '_value' → logprob: -8.509699821472168
    10. '('' → logprob: -8.634699821472168

Token 38: ' lambda' (ID: 27871)
  Prédit: 'lambda'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'lambda' → logprob: -0.5721579194068909
    2. 'max' → logprob: -1.947157859802246
    3. ' lambda' → logprob: -2.197157859802246
    4. 'pizza' → logprob: -2.447157859802246
    5. '(lambda' → logprob: -3.197157859802246
    6. ' max' → logprob: -3.322157859802246
    7. ' pizza' → logprob: -5.072157859802246
    8. 'sum' → logprob: -5.447157859802246
    9. 'min' → logprob: -5.572157859802246
    10. '(max' → logprob: -7.197157859802246

Token 39: ':' (ID: 25)
  Prédit: ' d'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' d' → logprob: -1.6839845180511475
    2. ' s' → logprob: -1.8089845180511475
    3. ' lambda' → logprob: -2.0589845180511475
    4. ' x' → logprob: -2.1839845180511475
    5. 'd' → logprob: -2.6839845180511475
    6. 's' → logprob: -3.0589845180511475
    7. ' a' → logprob: -3.3089845180511475
    8. ' n' → logprob: -3.5589845180511475
    9. ' arr' → logprob: -3.6839845180511475
    10. 'x' → logprob: -3.6839845180511475

Token 40: ' pizza' (ID: 27941)
  Prédit: 'pizza'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'pizza' → logprob: -0.4077902138233185
    2. ' pizza' → logprob: -1.532790184020996
    3. ' max' → logprob: -3.532790184020996
    4. '(p' → logprob: -4.032790184020996
    5. ' ceil' → logprob: -4.157790184020996
    6. 'max' → logprob: -4.532790184020996
    7. ' sum' → logprob: -4.782790184020996
    8. ' (' → logprob: -5.032790184020996
    9. 'ceil' → logprob: -5.032790184020996
    10. 'sum' → logprob: -5.282790184020996

Token 41: '_slice' (ID: 62789)
  Prédit: '_slice'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_slice' → logprob: -3.054500666621607e-06
    2. '_s' → logprob: -12.87500286102295
    3. '_' → logprob: -15.12500286102295
    4. '_slide' → logprob: -16.375003814697266
    5. ' _' → logprob: -16.875003814697266
    6. '_sn' → logprob: -17.500003814697266
    7. '_piece' → logprob: -17.500003814697266
    8. 'slice' → logprob: -17.875003814697266
    9. '_sl' → logprob: -18.250003814697266
    10. '_cube' → logprob: -18.875003814697266

Token 42: '((' (ID: 2054)
  Prédit: '(sum'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(sum' → logprob: -0.07602182775735855
    2. '(max' → logprob: -3.201021909713745
    3. '((' → logprob: -3.951021909713745
    4. '(' → logprob: -4.576021671295166
    5. '(s' → logprob: -6.451021671295166
    6. '(len' → logprob: -7.326021671295166
    7. 'sum' → logprob: -8.951022148132324
    8. '(arr' → logprob: -9.076022148132324
    9. '(min' → logprob: -9.201022148132324
    10. '(d' → logprob: -9.326022148132324

Token 43: 'd' (ID: 67)
  Prédit: 'sum'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'sum' → logprob: -0.2512154281139374
    2. 's' → logprob: -2.7512154579162598
    3. 'max' → logprob: -3.1262154579162598
    4. 'd' → logprob: -3.2512154579162598
    5. 'arr' → logprob: -3.3762154579162598
    6. ' sum' → logprob: -3.6262154579162598
    7. '(sum' → logprob: -5.12621545791626
    8. ' max' → logprob: -6.37621545791626
    9. 'len' → logprob: -6.37621545791626
    10. ' s' → logprob: -6.50121545791626

Token 44: '-' (ID: 12)
  Prédit: '-'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '-' → logprob: -1.1706112623214722
    2. ' -' → logprob: -1.1706112623214722
    3. '+' → logprob: -1.2956112623214722
    4. ' +' → logprob: -2.2956113815307617
    5. '-s' → logprob: -6.045611381530762
    6. ' ' → logprob: -7.170611381530762
    7. '*' → logprob: -7.420611381530762
    8. ',' → logprob: -8.295611381530762
    9. ')' → logprob: -8.420611381530762
    10. ' /' → logprob: -8.795611381530762

Token 45: '1' (ID: 16)
  Prédit: '1'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '1' → logprob: -0.04321247711777687
    2. 'sum' → logprob: -3.918212413787842
    3. 's' → logprob: -4.168212413787842
    4. 'len' → logprob: -5.418212413787842
    5. '2' → logprob: -7.418212413787842
    6. ' ' → logprob: -7.668212413787842
    7. ' sum' → logprob: -7.793212413787842
    8. 'arr' → logprob: -7.918212413787842
    9. ' s' → logprob: -8.293212890625
    10. ' len' → logprob: -8.793212890625

Token 46: ')/(' (ID: 60504)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ')' → logprob: -0.28643184900283813
    2. '+' → logprob: -1.9114317893981934
    3. ' +' → logprob: -2.6614317893981934
    4. ')/' → logprob: -4.286431789398193
    5. ' )' → logprob: -4.286431789398193
    6. ')+' → logprob: -6.536431789398193
    7. ' -' → logprob: -7.411431789398193
    8. '*' → logprob: -7.911431789398193
    9. '),' → logprob: -7.911431789398193
    10. '-' → logprob: -8.286432266235352

Token 47: 's' (ID: 82)
  Prédit: 's'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 's' → logprob: -0.35124310851097107
    2. ' s' → logprob: -1.2262431383132935
    3. 'arr' → logprob: -7.851243019104004
    4. ' ' → logprob: -7.851243019104004
    5. 'max' → logprob: -7.976243019104004
    6. '2' → logprob: -8.226243019104004
    7. 'len' → logprob: -8.476243019104004
    8. ' max' → logprob: -8.851243019104004
    9. '   ' → logprob: -8.976243019104004
    10. '6' → logprob: -8.976243019104004

Token 48: '-' (ID: 12)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ')' → logprob: -0.6508894562721252
    2. ')+' → logprob: -1.5258893966674805
    3. '+' → logprob: -2.0258893966674805
    4. ' )' → logprob: -2.5258893966674805
    5. '))' → logprob: -3.7758893966674805
    6. ' +' → logprob: -3.9008893966674805
    7. ' ))' → logprob: -5.9008893966674805
    8. '),' → logprob: -6.5258893966674805
    9. '+)' → logprob: -7.6508893966674805
    10. '))+' → logprob: -7.6508893966674805

Token 49: '1' (ID: 16)
  Prédit: '1'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '1' → logprob: -0.0006056951242499053
    2. ' ' → logprob: -7.750605583190918
    3. 'd' → logprob: -9.125605583190918
    4. ')' → logprob: -10.000605583190918
    5. '2' → logprob: -12.125605583190918
    6. '-' → logprob: -12.375605583190918
    7. '(' → logprob: -13.125605583190918
    8. '0' → logprob: -13.250605583190918
    9. ' d' → logprob: -14.125605583190918
    10. '+' → logprob: -14.313105583190918

Token 50: '))

' (ID: 9746)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ')' → logprob: -0.09382760524749756
    2. '))' → logprob: -2.593827724456787
    3. ')+' → logprob: -4.343827724456787
    4. ' )' → logprob: -7.343827724456787
    5. '),' → logprob: -7.468827724456787
    6. ')))' → logprob: -8.343827247619629
    7. '+' → logprob: -8.593827247619629
    8. '))+' → logprob: -9.218827247619629
    9. ' ))' → logprob: -10.218827247619629
    10. ')*' → logprob: -11.093827247619629

Token 51: 'print' (ID: 1598)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ')' → logprob: -0.008538220077753067
    2. '(' → logprob: -4.883538246154785
    3. ')
' → logprob: -7.883538246154785
    4. '*' → logprob: -8.883538246154785
    5. '+' → logprob: -9.008538246154785
    6. '()' → logprob: -9.258538246154785
    7. ',' → logprob: -10.008538246154785
    8. '(
' → logprob: -10.133538246154785
    9. ' ' → logprob: -10.633538246154785
    10. '```' → logprob: -11.258538246154785

Token 52: '(get' (ID: 7119)
  Prédit: '(get'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(get' → logprob: -0.576168954372406
    2. '(' → logprob: -0.826168954372406
    3. '(print' → logprob: -9.07616901397705
    4. '(p' → logprob: -10.07616901397705
    5. '((' → logprob: -10.95116901397705
    6. '("("' → logprob: -11.20116901397705
    7. '('' → logprob: -11.70116901397705
    8. '()' → logprob: -11.95116901397705
    9. '(()' → logprob: -12.82616901397705
    10. '(`' → logprob: -12.82616901397705

Token 53: 'Result' (ID: 2769)
  Prédit: 'Result'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'Result' → logprob: -9.519893501419574e-05
    2. 'Res' → logprob: -9.37509536743164
    3. 'R' → logprob: -12.12509536743164
    4. ')' → logprob: -12.87509536743164
    5. '	Result' → logprob: -14.12509536743164
    6. 'Re' → logprob: -14.37509536743164
    7. 'Results' → logprob: -14.75009536743164
    8. ' Result' → logprob: -15.25009536743164
    9. '_Result' → logprob: -16.00009536743164
    10. '()' → logprob: -16.25009536743164

Token 54: '())' (ID: 3516)
  Prédit: '())'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '())' → logprob: -0.008541406132280827
    2. ')' → logprob: -5.008541584014893
    3. '()))' → logprob: -7.258541584014893
    4. '()' → logprob: -7.383541584014893
    5. '))' → logprob: -7.633541584014893
    6. ' ())' → logprob: -12.008541107177734
    7. '())
' → logprob: -12.758541107177734
    8. '(' → logprob: -13.008541107177734
    9. '();)' → logprob: -13.758541107177734
    10. '])' → logprob: -14.633541107177734


RÉSUMÉ:
--------------------------------------------------------------------------------
Total des tokens analysés: 52
Tokens correctement prédits (1ère position, stricte): 16
Tokens correctement prédits (1ère position, avec adaptation): 16
Tokens correctement prédits (top 10): 32
Précision stricte (1ère position): 30.77%
Précision adaptée (1ère position): 30.77%
Précision (top 10): 61.54%
================================================================================
