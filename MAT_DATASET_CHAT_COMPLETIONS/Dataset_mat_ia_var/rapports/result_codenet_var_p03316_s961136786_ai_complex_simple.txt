================================================================================
ANALYSE DE PRÉDICTION TOKEN PAR TOKEN (BATCH API)
Date: 2025-06-04 20:15:22
Modèle de tokenisation: gpt-4o-mini
================================================================================

SCRIPT ANALYSÉ:
--------------------------------------------------------------------------------
from functools import reduce
from operator import floordiv, mod, add

n = int(__import__('builtins').input())
digits = list(map(int, filter(str.isdigit, str(n))))
divisible = (lambda s, n: not mod(n, s))
print(('No', 'Yes')[divisible(reduce(add, digits, 0), n)])
--------------------------------------------------------------------------------

RÉSULTATS D'ANALYSE TOKEN PAR TOKEN:
--------------------------------------------------------------------------------
Token 0: 'from' (ID: 2845)
  → Token d'amorce (pas de prédiction)

Token 1: ' functools' (ID: 142636)
  → Token d'amorce (pas de prédiction)

Token 2: ' import' (ID: 1588)
  → Token d'amorce (pas de prédiction)

Token 3: ' reduce' (ID: 10389)
  Prédit: 'partial'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'partial' → logprob: -0.6194254755973816
    2. 'wrap' → logprob: -0.8694254755973816
    3. 'reduce' → logprob: -3.3694255352020264
    4. ' wraps' → logprob: -5.369425296783447
    5. 'l' → logprob: -6.119425296783447
    6. 'cached' → logprob: -7.869425296783447
    7. ' partial' → logprob: -8.119425773620605
    8. 'cache' → logprob: -8.494425773620605
    9. '```' → logprob: -8.869425773620605
    10. 'cmp' → logprob: -8.994425773620605

Token 4: '
' (ID: 198)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '(' → logprob: -0.010317044332623482
    2. '(lambda' → logprob: -4.760316848754883
    3. ' (' → logprob: -7.385316848754883
    4. ',' → logprob: -7.885316848754883
    5. 'def' → logprob: -8.135316848754883
    6. '.' → logprob: -8.635316848754883
    7. '```' → logprob: -10.135316848754883
    8. '(
' → logprob: -10.385316848754883
    9. 'lambda' → logprob: -10.635316848754883
    10. ' ' → logprob: -10.760316848754883

Token 5: 'from' (ID: 2845)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '(' → logprob: -0.014403714798390865
    2. '(
' → logprob: -5.139403820037842
    3. '(lambda' → logprob: -5.389403820037842
    4. 'def' → logprob: -6.639403820037842
    5. ',' → logprob: -7.139403820037842
    6. '\' → logprob: -8.139403343200684
    7. ' ' → logprob: -8.264403343200684
    8. ' (' → logprob: -8.389403343200684
    9. '
' → logprob: -9.139403343200684
    10. '' → logprob: -9.139403343200684

Token 6: ' operator' (ID: 11019)
  Prédit: ' math'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' math' → logprob: -1.0021368265151978
    2. ' operator' → logprob: -1.2521368265151978
    3. ' itertools' → logprob: -1.5021368265151978
    4. ' collections' → logprob: -2.127136707305908
    5. ' os' → logprob: -5.877136707305908
    6. 'operator' → logprob: -6.752136707305908
    7. 'math' → logprob: -7.877136707305908
    8. ' typing' → logprob: -8.002137184143066
    9. 'collections' → logprob: -8.127137184143066
    10. ' sys' → logprob: -9.252137184143066

Token 7: ' import' (ID: 1588)
  Prédit: ' import'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' import' → logprob: -0.044668834656476974
    2. 'import' → logprob: -3.6696689128875732
    3. '.' → logprob: -4.169668674468994
    4. ' ' → logprob: -6.044668674468994
    5. ' .' → logprob: -8.419669151306152
    6. '.import' → logprob: -9.169669151306152
    7. '	import' → logprob: -11.419669151306152
    8. '_import' → logprob: -11.544669151306152
    9. '<|end|>' → logprob: -11.794669151306152
    10. ' Import' → logprob: -13.169669151306152

Token 8: ' flo' (ID: 15037)
  Prédit: ' add'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' add' → logprob: -0.22591231763362885
    2. ' import' → logprob: -1.97591233253479
    3. ' mul' → logprob: -3.60091233253479
    4. 'add' → logprob: -3.97591233253479
    5. ' ' → logprob: -4.350912094116211
    6. 'import' → logprob: -5.975912094116211
    7. 'mul' → logprob: -6.600912094116211
    8. ' item' → logprob: -8.100912094116211
    9. ' icon' → logprob: -9.475912094116211
    10. ' ad' → logprob: -10.100912094116211

Token 9: 'ord' (ID: 604)
  Prédit: 'or'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'or' → logprob: -0.474287748336792
    2. 'ord' → logprob: -0.974287748336792
    3. 'orm' → logprob: -9.474287986755371
    4. 'o' → logprob: -9.474287986755371
    5. 'orf' → logprob: -10.349287986755371
    6. '```' → logprob: -11.724287986755371
    7. 'orld' → logprob: -12.599287986755371
    8. 'od' → logprob: -12.974287986755371
    9. '``' → logprob: -13.849287986755371
    10. '##' → logprob: -13.974287986755371

Token 10: 'iv' (ID: 349)
  Prédit: 'iv'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'iv' → logprob: -2.1008713702030946e-06
    2. 'i' → logprob: -14.000001907348633
    3. 'ivid' → logprob: -14.000001907348633
    4. 'ivi' → logprob: -15.625001907348633
    5. 'ived' → logprob: -17.375001907348633
    6. 'ivind' → logprob: -17.375001907348633
    7. 'ivr' → logprob: -17.750001907348633
    8. '_iv' → logprob: -17.750001907348633
    9. '_div' → logprob: -18.125001907348633
    10. 'v' → logprob: -18.125001907348633

Token 11: ',' (ID: 11)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(' → logprob: -0.5131489038467407
    2. 'def' → logprob: -1.6381489038467407
    3. ',' → logprob: -2.513148784637451
    4. '\' → logprob: -3.263148784637451
    5. '#' → logprob: -3.638148784637451
    6. '(
' → logprob: -4.138148784637451
    7. '\n' → logprob: -4.513148784637451
    8. ' ' → logprob: -5.388148784637451
    9. 'import' → logprob: -5.638148784637451
    10. '`' → logprob: -5.888148784637451

Token 12: ' mod' (ID: 1812)
  Prédit: 'mod'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'mod' → logprob: -0.7048941254615784
    2. 'mul' → logprob: -0.9548941254615784
    3. ' mul' → logprob: -2.2048940658569336
    4. 'add' → logprob: -5.329894065856934
    5. ' mod' → logprob: -5.954894065856934
    6. 'pow' → logprob: -6.454894065856934
    7. 'import' → logprob: -7.579894065856934
    8. 'tr' → logprob: -8.079894065856934
    9. ' imod' → logprob: -8.204894065856934
    10. ' add' → logprob: -8.204894065856934

Token 13: ',' (ID: 11)
  Prédit: ','
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ',' → logprob: -1.304648518562317
    2. 'def' → logprob: -1.554648518562317
    3. '#' → logprob: -1.804648518562317
    4. '*' → logprob: -2.0546483993530273
    5. '(' → logprob: -2.0546483993530273
    6. '\' → logprob: -3.5546483993530273
    7. '`' → logprob: -4.429648399353027
    8. '\n' → logprob: -4.429648399353027
    9. '(
' → logprob: -5.179648399353027
    10. ')' → logprob: -5.304648399353027

Token 14: ' add' (ID: 1147)
  Prédit: ' mul'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' mul' → logprob: -0.3083217442035675
    2. 'pow' → logprob: -2.058321714401245
    3. 'mul' → logprob: -2.808321714401245
    4. ' pow' → logprob: -2.808321714401245
    5. ' tr' → logprob: -4.933321952819824
    6. ' add' → logprob: -5.433321952819824
    7. 'add' → logprob: -5.808321952819824
    8. 'tr' → logprob: -7.058321952819824
    9. 'div' → logprob: -8.183321952819824
    10. ' xor' → logprob: -8.308321952819824

Token 15: '

' (ID: 279)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '(' → logprob: -0.7827065587043762
    2. ',' → logprob: -1.6577064990997314
    3. 'def' → logprob: -1.6577064990997314
    4. '#' → logprob: -2.6577064990997314
    5. '*' → logprob: -3.2827064990997314
    6. '\' → logprob: -4.7827067375183105
    7. '(
' → logprob: -4.9077067375183105
    8. '`' → logprob: -5.0327067375183105
    9. '_' → logprob: -5.0327067375183105
    10. ')' → logprob: -5.7827067375183105

Token 16: 'n' (ID: 77)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '(' → logprob: -0.4385131597518921
    2. 'def' → logprob: -1.688513159751892
    3. ',' → logprob: -2.4385132789611816
    4. '#' → logprob: -3.6885132789611816
    5. '(
' → logprob: -4.188513278961182
    6. '*' → logprob: -4.688513278961182
    7. ')' → logprob: -5.188513278961182
    8. '=' → logprob: -5.438513278961182
    9. '[' → logprob: -5.563513278961182
    10. '`' → logprob: -5.813513278961182

Token 17: ' =' (ID: 314)
  Prédit: '_'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_' → logprob: -1.202359914779663
    2. '=' → logprob: -1.577359914779663
    3. ' =' → logprob: -1.577359914779663
    4. 'u' → logprob: -1.952359914779663
    5. ' ' → logprob: -3.077359914779663
    6. ',' → logprob: -3.327359914779663
    7. ')' → logprob: -4.327360153198242
    8. 'o' → logprob: -4.327360153198242
    9. 'a' → logprob: -4.952360153198242
    10. '[' → logprob: -4.952360153198242

Token 18: ' int' (ID: 677)
  Prédit: ' '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' ' → logprob: -0.019294537603855133
    2. '10' → logprob: -5.019294738769531
    3. '100' → logprob: -6.144294738769531
    4. '1' → logprob: -6.144294738769531
    5. ' int' → logprob: -6.394294738769531
    6. ' [' → logprob: -6.894294738769531
    7. '0' → logprob: -7.019294738769531
    8. '20' → logprob: -7.394294738769531
    9. '5' → logprob: -7.394294738769531
    10. 'int' → logprob: -7.519294738769531

Token 19: '(__' (ID: 11782)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '(' → logprob: -0.0009407619945704937
    2. '(input' → logprob: -7.500940799713135
    3. '(n' → logprob: -8.125940322875977
    4. '()' → logprob: -11.375940322875977
    5. '(user' → logprob: -11.375940322875977
    6. '```' → logprob: -11.625940322875977
    7. ' (' → logprob: -11.750940322875977
    8. '(`' → logprob: -12.000940322875977
    9. '<|end|>' → logprob: -12.375940322875977
    10. '`' → logprob: -12.375940322875977

Token 20: 'import' (ID: 561)
  Prédit: 'input'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'input' → logprob: -0.005018259398639202
    2. '(input' → logprob: -6.00501823425293
    3. 'stdin' → logprob: -6.63001823425293
    4. 'user' → logprob: -7.00501823425293
    5. ' input' → logprob: -9.25501823425293
    6. 'import' → logprob: -9.63001823425293
    7. '(stdin' → logprob: -9.75501823425293
    8. '_' → logprob: -10.63001823425293
    9. '<input' → logprob: -11.13001823425293
    10. '```' → logprob: -11.13001823425293

Token 21: '__('' (ID: 54460)
  Prédit: '__(''
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '__('' → logprob: -0.7181103825569153
    2. '(' → logprob: -1.2181103229522705
    3. '__("' → logprob: -1.8431103229522705
    4. '('' → logprob: -3.3431103229522705
    5. '("("' → logprob: -4.96811056137085
    6. '("' → logprob: -5.09311056137085
    7. '("__' → logprob: -5.96811056137085
    8. '__(
' → logprob: -6.34311056137085
    9. '('__' → logprob: -6.46811056137085
    10. ')(__' → logprob: -7.09311056137085

Token 22: 'built' (ID: 81936)
  Prédit: 'built'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'built' → logprob: -0.5762823224067688
    2. 'sys' → logprob: -0.8262823224067688
    3. 'math' → logprob: -8.701282501220703
    4. '__' → logprob: -8.951282501220703
    5. 'code' → logprob: -10.701282501220703
    6. ' built' → logprob: -11.326282501220703
    7. '-built' → logprob: -12.826282501220703
    8. 'os' → logprob: -13.076282501220703
    9. '')' → logprob: -13.576282501220703
    10. 'stdin' → logprob: -13.701282501220703

Token 23: 'ins' (ID: 1564)
  Prédit: 'ins'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'ins' → logprob: -8.41866585687967e-06
    2. 'in' → logprob: -11.750008583068848
    3. 'ints' → logprob: -15.375008583068848
    4. 'int' → logprob: -16.75000762939453
    5. 'i' → logprob: -16.75000762939453
    6. '__' → logprob: -16.87500762939453
    7. '```' → logprob: -17.12500762939453
    8. 'insi' → logprob: -18.37500762939453
    9. 'insu' → logprob: -18.62500762939453
    10. 'ains' → logprob: -18.62500762939453

Token 24: '').' (ID: 3426)
  Prédit: '').'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '').' → logprob: -0.10038436949253082
    2. '.' → logprob: -2.975384473800659
    3. ').' → logprob: -3.225384473800659
    4. ').__' → logprob: -6.47538423538208
    5. '.input' → logprob: -6.60038423538208
    6. '.__' → logprob: -7.60038423538208
    7. '')' → logprob: -8.350384712219238
    8. ''' → logprob: -8.725384712219238
    9. ')' → logprob: -8.850384712219238
    10. ' ).' → logprob: -9.600384712219238

Token 25: 'input' (ID: 2586)
  Prédit: 'input'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'input' → logprob: -0.00017445837147533894
    2. 'eval' → logprob: -9.000174522399902
    3. 'int' → logprob: -10.875174522399902
    4. ' input' → logprob: -11.125174522399902
    5. 'abs' → logprob: -11.875174522399902
    6. 'raw' → logprob: -12.250174522399902
    7. '__' → logprob: -13.250174522399902
    8. 'exec' → logprob: -13.625174522399902
    9. 'get' → logprob: -14.125174522399902
    10. 'open' → logprob: -14.875174522399902

Token 26: '())
' (ID: 4574)
  Prédit: '()'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '()' → logprob: -1.0701398849487305
    2. '(' → logprob: -1.1951398849487305
    3. '())' → logprob: -1.5701398849487305
    4. ')' → logprob: -2.1951398849487305
    5. '('' → logprob: -3.5701398849487305
    6. '(()' → logprob: -6.0701398849487305
    7. '(
' → logprob: -6.6951398849487305
    8. ' ' → logprob: -7.8201398849487305
    9. '(

' → logprob: -8.19513988494873
    10. '().' → logprob: -8.57013988494873

Token 27: 'digits' (ID: 135574)
  Prédit: 'numbers'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'numbers' → logprob: -1.3588824272155762
    2. 'data' → logprob: -1.8588824272155762
    3. 'a' → logprob: -1.9838824272155762
    4. '_' → logprob: -2.108882427215576
    5. '(' → logprob: -2.858882427215576
    6. 'nums' → logprob: -2.983882427215576
    7. 'lst' → logprob: -3.108882427215576
    8. 'result' → logprob: -3.733882427215576
    9. 'values' → logprob: -3.733882427215576
    10. ')' → logprob: -3.983882427215576

Token 28: ' =' (ID: 314)
  Prédit: ' ='
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' =' → logprob: -0.21723437309265137
    2. '=' → logprob: -1.7172343730926514
    3. '_' → logprob: -4.4672346115112305
    4. '[' → logprob: -6.3422346115112305
    5. '(' → logprob: -7.5922346115112305
    6. '[:]' → logprob: -7.5922346115112305
    7. ' ' → logprob: -8.09223461151123
    8. 's' → logprob: -8.09223461151123
    9. '=[]' → logprob: -8.21723461151123
    10. ')' → logprob: -8.59223461151123

Token 29: ' list' (ID: 1562)
  Prédit: 'list'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'list' → logprob: -0.3508213758468628
    2. ' list' → logprob: -1.6008213758468628
    3. ' [' → logprob: -3.3508214950561523
    4. '[' → logprob: -3.4758214950561523
    5. '[n' → logprob: -5.100821495056152
    6. '[list' → logprob: -5.225821495056152
    7. '[]' → logprob: -5.350821495056152
    8. '[input' → logprob: -5.600821495056152
    9. '(list' → logprob: -6.600821495056152
    10. ' []' → logprob: -6.725821495056152

Token 30: '(map' (ID: 16946)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(' → logprob: -0.020588601008057594
    2. '(range' → logprob: -4.145588397979736
    3. '(int' → logprob: -6.145588397979736
    4. '(n' → logprob: -7.645588397979736
    5. '()' → logprob: -7.895588397979736
    6. '(map' → logprob: -8.520588874816895
    7. '((' → logprob: -8.520588874816895
    8. '(str' → logprob: -8.645588874816895
    9. '(d' → logprob: -8.770588874816895
    10. '(input' → logprob: -9.145588874816895

Token 31: '(int' (ID: 2742)
  Prédit: '(int'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(int' → logprob: -0.0014952188357710838
    2. '(' → logprob: -6.626495361328125
    3. '(str' → logprob: -9.376495361328125
    4. '(lambda' → logprob: -9.626495361328125
    5. 'int' → logprob: -11.751495361328125
    6. '<int' → logprob: -12.876495361328125
    7. ',int' → logprob: -13.626495361328125
    8. '=int' → logprob: -13.626495361328125
    9. '(ord' → logprob: -13.626495361328125
    10. '[int' → logprob: -13.751495361328125

Token 32: ',' (ID: 11)
  Prédit: '(input'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(input' → logprob: -0.15340307354927063
    2. '(__' → logprob: -2.4034030437469482
    3. '(' → logprob: -3.0284030437469482
    4. ',input' → logprob: -7.028403282165527
    5. ',' → logprob: -7.153403282165527
    6. ')(__' → logprob: -7.653403282165527
    7. 'input' → logprob: -8.028403282165527
    8. '((' → logprob: -8.903403282165527
    9. ',__' → logprob: -8.903403282165527
    10. '(n' → logprob: -9.153403282165527

Token 33: ' filter' (ID: 6690)
  Prédit: 'input'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'input' → logprob: -0.3138625919818878
    2. '__' → logprob: -1.5638625621795654
    3. ' input' → logprob: -3.6888625621795654
    4. 'str' → logprob: -4.1888628005981445
    5. ' __' → logprob: -4.3138628005981445
    6. '(input' → logprob: -6.3138628005981445
    7. 'list' → logprob: -6.4388628005981445
    8. '(__' → logprob: -7.0638628005981445
    9. ' str' → logprob: -7.5638628005981445
    10. '___' → logprob: -8.188862800598145

Token 34: '(str' (ID: 7946)
  Prédit: '(lambda'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(lambda' → logprob: -0.28699514269828796
    2. '(' → logprob: -1.4119951725006104
    3. '(None' → logprob: -5.411994934082031
    4. '(str' → logprob: -7.411994934082031
    5. '(len' → logprob: -8.411994934082031
    6. '('' → logprob: -8.536994934082031
    7. '(
' → logprob: -9.786994934082031
    8. '(False' → logprob: -10.161994934082031
    9. '(True' → logprob: -10.786994934082031
    10. '(int' → logprob: -11.036994934082031

Token 35: '.is' (ID: 3109)
  Prédit: '.is'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '.is' → logprob: -0.00031091354321688414
    2. '.' → logprob: -8.375310897827148
    3. 'isdigit' → logprob: -9.500310897827148
    4. ' .' → logprob: -13.000310897827148
    5. '(is' → logprob: -14.500310897827148
    6. '.isnan' → logprob: -14.625310897827148
    7. '.endswith' → logprob: -14.875310897827148
    8. ')' → logprob: -14.875310897827148
    9. '))' → logprob: -15.375310897827148
    10. '.rstrip' → logprob: -15.625310897827148

Token 36: 'digit' (ID: 78327)
  Prédit: 'digit'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'digit' → logprob: -0.004089796915650368
    2. 'decimal' → logprob: -5.504089832305908
    3. 'numeric' → logprob: -12.00408935546875
    4. 'isdigit' → logprob: -13.37908935546875
    5. 'digits' → logprob: -13.75408935546875
    6. 'dec' → logprob: -14.12908935546875
    7. 'al' → logprob: -14.25408935546875
    8. 'digital' → logprob: -14.62908935546875
    9. 'dig' → logprob: -15.50408935546875
    10. 'd' → logprob: -15.62908935546875

Token 37: ',' (ID: 11)
  Prédit: ','
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ',' → logprob: -0.052936311811208725
    2. ',n' → logprob: -3.177936315536499
    3. '(n' → logprob: -4.92793607711792
    4. ',__' → logprob: -7.05293607711792
    5. ',input' → logprob: -7.17793607711792
    6. '(' → logprob: -8.427936553955078
    7. ',(' → logprob: -8.427936553955078
    8. ' ,' → logprob: -8.552936553955078
    9. ')))' → logprob: -9.552936553955078
    10. 'n' → logprob: -9.677936553955078

Token 38: ' str' (ID: 989)
  Prédit: '__'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '__' → logprob: -0.5624313354492188
    2. 'input' → logprob: -1.0624313354492188
    3. 'str' → logprob: -3.0624313354492188
    4. ' __' → logprob: -4.437431335449219
    5. ' input' → logprob: -4.812431335449219
    6. '(__' → logprob: -5.437431335449219
    7. 'n' → logprob: -5.687431335449219
    8. 'list' → logprob: -6.312431335449219
    9. '   ' → logprob: -6.312431335449219
    10. '___' → logprob: -6.437431335449219

Token 39: '(n' (ID: 2406)
  Prédit: '(n'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(n' → logprob: -0.01739296317100525
    2. '(' → logprob: -4.517393112182617
    3. '(input' → logprob: -5.267393112182617
    4. '(__' → logprob: -7.142393112182617
    5. '(_' → logprob: -8.892393112182617
    6. '((' → logprob: -9.142393112182617
    7. ')(' → logprob: -11.017393112182617
    8. '(_)' → logprob: -11.517393112182617
    9. ' (' → logprob: -12.017393112182617
    10. '(`' → logprob: -12.142393112182617

Token 40: '))))
' (ID: 55084)
  Prédit: '))))'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '))))' → logprob: -0.029920464381575584
    2. ')))' → logprob: -3.7799205780029297
    3. ')' → logprob: -5.02992057800293
    4. '))' → logprob: -9.65492057800293
    5. '))))
' → logprob: -10.40492057800293
    6. '))))

' → logprob: -12.27992057800293
    7. '])))' → logprob: -12.65492057800293
    8. '')))' → logprob: -13.02992057800293
    9. ')));' → logprob: -13.77992057800293
    10. ' ' → logprob: -13.77992057800293

Token 41: 'div' (ID: 862)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ')' → logprob: -0.04436362534761429
    2. '
' → logprob: -4.419363498687744
    3. ')
' → logprob: -4.669363498687744
    4. ':' → logprob: -5.419363498687744
    5. '[' → logprob: -5.794363498687744
    6. ' 
' → logprob: -6.544363498687744
    7. '  
' → logprob: -6.794363498687744
    8. 'if' → logprob: -7.044363498687744
    9. ' ' → logprob: -7.044363498687744
    10. '_' → logprob: -7.169363498687744

Token 42: 'isible' (ID: 181386)
  Prédit: 'mod'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'mod' → logprob: -0.22674821317195892
    2. 'ide' → logprob: -2.72674822807312
    3. 'er' → logprob: -2.97674822807312
    4. 'e' → logprob: -3.60174822807312
    5. 'ider' → logprob: -4.351747989654541
    6. 'iders' → logprob: -4.851747989654541
    7. 'is' → logprob: -5.226747989654541
    8. 'ed' → logprob: -5.351747989654541
    9. 'ers' → logprob: -5.476747989654541
    10. 's' → logprob: -5.601747989654541

Token 43: ' =' (ID: 314)
  Prédit: '_by'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_by' → logprob: -0.787448525428772
    2. 's' → logprob: -0.912448525428772
    3. 'by' → logprob: -2.7874484062194824
    4. '_' → logprob: -2.7874484062194824
    5. '=' → logprob: -5.412448406219482
    6. ' =' → logprob: -5.412448406219482
    7. '(' → logprob: -5.912448406219482
    8. '_s' → logprob: -6.287448406219482
    9. '?' → logprob: -6.662448406219482
    10. '_values' → logprob: -8.03744888305664

Token 44: ' (' (ID: 350)
  Prédit: 'reduce'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'reduce' → logprob: -0.3076884150505066
    2. 'all' → logprob: -1.8076884746551514
    3. 'lambda' → logprob: -3.3076884746551514
    4. ' all' → logprob: -4.182688236236572
    5. '[' → logprob: -4.307688236236572
    6. ' reduce' → logprob: -4.557688236236572
    7. 'True' → logprob: -4.682688236236572
    8. ' lambda' → logprob: -5.682688236236572
    9. '(lambda' → logprob: -5.682688236236572
    10. ' True' → logprob: -6.557688236236572

Token 45: 'lambda' (ID: 35280)
  Prédit: 'reduce'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'reduce' → logprob: -0.24024783074855804
    2. 'add' → logprob: -3.1152477264404297
    3. 'n' → logprob: -3.3652477264404297
    4. 'len' → logprob: -3.7402477264404297
    5. 'lambda' → logprob: -3.7402477264404297
    6. 'all' → logprob: -3.9902477264404297
    7. ' reduce' → logprob: -4.36524772644043
    8. 'digits' → logprob: -4.49024772644043
    9. '   ' → logprob: -4.74024772644043
    10. 'sum' → logprob: -4.86524772644043

Token 46: ' s' (ID: 265)
  Prédit: 'x'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'x' → logprob: -0.9193601012229919
    2. ' x' → logprob: -0.9193601012229919
    3. 'd' → logprob: -2.5443601608276367
    4. ' d' → logprob: -2.6693601608276367
    5. ' digits' → logprob: -4.419360160827637
    6. 'a' → logprob: -4.919360160827637
    7. ' a' → logprob: -5.294360160827637
    8. 'n' → logprob: -5.419360160827637
    9. 'digits' → logprob: -5.544360160827637
    10. ' n' → logprob: -5.669360160827637

Token 47: ',' (ID: 11)
  Prédit: ':'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ':' → logprob: -0.09800803661346436
    2. ' :' → logprob: -2.973008155822754
    3. ',' → logprob: -3.348008155822754
    4. 's' → logprob: -5.723008155822754
    5. ' s' → logprob: -6.223008155822754
    6. 'd' → logprob: -7.848008155822754
    7. '=' → logprob: -8.223008155822754
    8. 'x' → logprob: -8.723008155822754
    9. ' ,' → logprob: -8.723008155822754
    10. ':s' → logprob: -9.473008155822754

Token 48: ' n' (ID: 297)
  Prédit: ' x'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' x' → logprob: -1.3012484312057495
    2. ' lambda' → logprob: -1.3012484312057495
    3. 'x' → logprob: -1.5512484312057495
    4. 'lambda' → logprob: -2.551248550415039
    5. ' d' → logprob: -3.801248550415039
    6. 'd' → logprob: -3.801248550415039
    7. ' i' → logprob: -4.426248550415039
    8. ' acc' → logprob: -4.801248550415039
    9. 'i' → logprob: -4.926248550415039
    10. ' s' → logprob: -5.051248550415039

Token 49: ':' (ID: 25)
  Prédit: ':'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ':' → logprob: -0.004208039958029985
    2. ',' → logprob: -6.254208087921143
    3. ' :' → logprob: -6.379208087921143
    4. '=' → logprob: -8.004207611083984
    5. 's' → logprob: -9.129207611083984
    6. ':s' → logprob: -10.004207611083984
    7. ':(' → logprob: -10.754207611083984
    8. ',:' → logprob: -10.879207611083984
    9. ':
' → logprob: -11.879207611083984
    10. ':f' → logprob: -12.129207611083984

Token 50: ' not' (ID: 625)
  Prédit: 'all'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'all' → logprob: -1.4024765491485596
    2. 'reduce' → logprob: -1.4024765491485596
    3. ' all' → logprob: -2.0274765491485596
    4. 'len' → logprob: -2.5274765491485596
    5. 's' → logprob: -2.7774765491485596
    6. 'n' → logprob: -3.0274765491485596
    7. ' reduce' → logprob: -3.4024765491485596
    8. 'not' → logprob: -3.6524765491485596
    9. ' n' → logprob: -3.9024765491485596
    10. 'sum' → logprob: -3.9024765491485596

Token 51: ' mod' (ID: 1812)
  Prédit: 'reduce'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'reduce' → logprob: -1.5721170902252197
    2. ' any' → logprob: -2.1971170902252197
    3. ' reduce' → logprob: -2.3221170902252197
    4. 'any' → logprob: -2.4471170902252197
    5. ' s' → logprob: -2.8221170902252197
    6. 's' → logprob: -2.8221170902252197
    7. 'sum' → logprob: -2.8221170902252197
    8. ' n' → logprob: -2.9471170902252197
    9. ' sum' → logprob: -2.9471170902252197
    10. '(s' → logprob: -3.3221170902252197

Token 52: '(n' (ID: 2406)
  Prédit: '(n'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(n' → logprob: -0.5120654702186584
    2. '(s' → logprob: -1.0120654106140137
    3. '(' → logprob: -3.6370654106140137
    4. ')(' → logprob: -5.262065410614014
    5. ' (' → logprob: -6.262065410614014
    6. ')' → logprob: -6.762065410614014
    7. '(div' → logprob: -6.887065410614014
    8. 'n' → logprob: -7.637065410614014
    9. 's' → logprob: -8.012065887451172
    10. '(sum' → logprob: -8.387065887451172

Token 53: ',' (ID: 11)
  Prédit: ','
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ',' → logprob: -0.020652368664741516
    2. 's' → logprob: -4.0206522941589355
    3. ' ,' → logprob: -6.6456522941589355
    4. ',s' → logprob: -7.3956522941589355
    5. ' s' → logprob: -8.770652770996094
    6. '(s' → logprob: -8.895652770996094
    7. ')' → logprob: -10.145652770996094
    8. ',
' → logprob: -10.270652770996094
    9. 'div' → logprob: -10.270652770996094
    10. ',sum' → logprob: -10.395652770996094

Token 54: ' s' (ID: 265)
  Prédit: 's'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 's' → logprob: -0.6448830962181091
    2. 'reduce' → logprob: -0.7698830962181091
    3. 'int' → logprob: -5.769883155822754
    4. 'sum' → logprob: -5.894883155822754
    5. ' reduce' → logprob: -6.019883155822754
    6. ' s' → logprob: -6.394883155822754
    7. 'add' → logprob: -7.644883155822754
    8. '   ' → logprob: -7.769883155822754
    9. ' ' → logprob: -7.769883155822754
    10. 're' → logprob: -8.644883155822754

Token 55: '))
' (ID: 2210)
  Prédit: '))'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '))' → logprob: -0.2542416751384735
    2. ')' → logprob: -1.629241704940796
    3. ')))' → logprob: -3.754241704940796
    4. '))(' → logprob: -5.879241466522217
    5. ')(' → logprob: -7.879241466522217
    6. '[' → logprob: -8.254241943359375
    7. '(' → logprob: -8.504241943359375
    8. ' ' → logprob: -8.879241943359375
    9. '))
' → logprob: -9.129241943359375
    10. ' or' → logprob: -9.254241943359375

Token 56: 'print' (ID: 1598)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '(' → logprob: -0.019183095544576645
    2. '(
' → logprob: -4.394183158874512
    3. ')' → logprob: -6.394183158874512
    4. '[' → logprob: -6.644183158874512
    5. ' ' → logprob: -7.144183158874512
    6. 'digits' → logprob: -7.394183158874512
    7. '(n' → logprob: -8.144183158874512
    8. '(d' → logprob: -8.269183158874512
    9. '0' → logprob: -8.394183158874512
    10. '_' → logprob: -8.644183158874512

Token 57: '(('' (ID: 122195)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '(' → logprob: -0.029140954837203026
    2. '(add' → logprob: -4.154140949249268
    3. '(div' → logprob: -4.654140949249268
    4. '(f' → logprob: -7.404140949249268
    5. '(sum' → logprob: -7.654140949249268
    6. '('' → logprob: -7.654140949249268
    7. '((' → logprob: -8.029141426086426
    8. '(mod' → logprob: -8.154141426086426
    9. '(max' → logprob: -9.029141426086426
    10. '(len' → logprob: -9.029141426086426

Token 58: 'No' (ID: 3160)
  Prédit: '''
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ''' → logprob: -1.5463263988494873
    2. 'add' → logprob: -1.9213263988494873
    3. 'div' → logprob: -2.6713263988494873
    4. ''.' → logprob: -2.7963263988494873
    5. 'n' → logprob: -2.9213263988494873
    6. 'sum' → logprob: -2.9213263988494873
    7. '9' → logprob: -3.1713263988494873
    8. '10' → logprob: -3.1713263988494873
    9. '1' → logprob: -3.1713263988494873
    10. '0' → logprob: -3.5463263988494873

Token 59: '',' (ID: 787)
  Prédit: ' divisible'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' divisible' → logprob: -0.5763136148452759
    2. 't' → logprob: -1.2013136148452759
    3. ' ' → logprob: -3.9513134956359863
    4. ''' → logprob: -3.9513134956359863
    5. ')' → logprob: -3.9513134956359863
    6. '')' → logprob: -4.076313495635986
    7. ' t' → logprob: -4.326313495635986
    8. 'div' → logprob: -4.576313495635986
    9. ' '' → logprob: -5.076313495635986
    10. ''))' → logprob: -5.201313495635986

Token 60: ' '' (ID: 461)
  Prédit: '''
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ''' → logprob: -0.09173277765512466
    2. ' '' → logprob: -2.4667327404022217
    3. ')' → logprob: -6.216732978820801
    4. ' ('' → logprob: -9.0917329788208
    5. '('' → logprob: -9.3417329788208
    6. '''' → logprob: -9.3417329788208
    7. '"' → logprob: -9.5917329788208
    8. ' ' → logprob: -10.0917329788208
    9. ''end' → logprob: -10.2167329788208
    10. ' not' → logprob: -10.2167329788208

Token 61: 'Yes' (ID: 13022)
  Prédit: 'Yes'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'Yes' → logprob: -0.11160009354352951
    2. ''' → logprob: -2.861600160598755
    3. '','' → logprob: -3.861600160598755
    4. '',' → logprob: -3.861600160598755
    5. 'No' → logprob: -5.861599922180176
    6. '')' → logprob: -6.861599922180176
    7. ' Yes' → logprob: -7.361599922180176
    8. '('' → logprob: -7.861599922180176
    9. ')' → logprob: -7.861599922180176
    10. ' ' → logprob: -9.486599922180176

Token 62: '')[' (ID: 28534)
  Prédit: '')['
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '')[' → logprob: -0.02928301878273487
    2. ''[' → logprob: -3.654283046722412
    3. '')' → logprob: -6.029283046722412
    4. ''' → logprob: -7.904283046722412
    5. ')[' → logprob: -9.654282569885254
    6. ' ')[' → logprob: -9.779282569885254
    7. ''))' → logprob: -10.529282569885254
    8. '[' → logprob: -11.529282569885254
    9. '')['' → logprob: -11.529282569885254
    10. '',' → logprob: -12.029282569885254

Token 63: 'div' (ID: 862)
  Prédit: 'div'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'div' → logprob: -0.008350263349711895
    2. ' divisible' → logprob: -5.633350372314453
    3. '(div' → logprob: -6.633350372314453
    4. 'any' → logprob: -7.008350372314453
    5. 'digits' → logprob: -7.258350372314453
    6. 'all' → logprob: -7.383350372314453
    7. ' div' → logprob: -8.133350372314453
    8. 'sum' → logprob: -8.508350372314453
    9. 'reduce' → logprob: -8.758350372314453
    10. 'len' → logprob: -9.383350372314453

Token 64: 'isible' (ID: 181386)
  Prédit: 'isible'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'isible' → logprob: -3.6789137084269896e-05
    2. 'is' → logprob: -11.12503719329834
    3. 'ISIBLE' → logprob: -11.75003719329834
    4. 'ible' → logprob: -12.12503719329834
    5. 'isable' → logprob: -12.50003719329834
    6. 'sible' → logprob: -12.75003719329834
    7. 'able' → logprob: -13.75003719329834
    8. '(' → logprob: -14.50003719329834
    9. 's' → logprob: -15.75003719329834
    10. '(is' → logprob: -16.250036239624023

Token 65: '(re' (ID: 8178)
  Prédit: '(sum'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(sum' → logprob: -0.7186081409454346
    2. '(len' → logprob: -1.7186081409454346
    3. '(d' → logprob: -1.8436081409454346
    4. '(' → logprob: -1.9686081409454346
    5. '(n' → logprob: -4.3436079025268555
    6. '(f' → logprob: -4.4686079025268555
    7. '](' → logprob: -5.8436079025268555
    8. ' (' → logprob: -5.9686079025268555
    9. '(re' → logprob: -6.9686079025268555
    10. '(int' → logprob: -7.3436079025268555

Token 66: 'duce' (ID: 21375)
  Prédit: 'duce'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'duce' → logprob: -0.0056209927424788475
    2. 'd' → logprob: -5.380620956420898
    3. '(' → logprob: -8.630620956420898
    4. 'du' → logprob: -8.755620956420898
    5. 'duced' → logprob: -8.755620956420898
    6. 'digits' → logprob: -8.755620956420898
    7. '(d' → logprob: -9.505620956420898
    8. '9' → logprob: -10.130620956420898
    9. '3' → logprob: -10.380620956420898
    10. 'digit' → logprob: -10.505620956420898

Token 67: '(add' (ID: 40159)
  Prédit: '(add'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(add' → logprob: -0.008207087405025959
    2. '(f' → logprob: -5.758207321166992
    3. '(lambda' → logprob: -5.758207321166992
    4. '(' → logprob: -7.258207321166992
    5. ' (' → logprob: -7.758207321166992
    6. 'add' → logprob: -8.133207321166992
    7. ')add' → logprob: -9.508207321166992
    8. ')' → logprob: -9.758207321166992
    9. '(mod' → logprob: -9.883207321166992
    10. '(ad' → logprob: -10.133207321166992

Token 68: ',' (ID: 11)
  Prédit: ','
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ',' → logprob: -0.01335245743393898
    2. ',d' → logprob: -4.388352394104004
    3. ' ,' → logprob: -7.638352394104004
    4. 'digits' → logprob: -8.638352394104004
    5. ' digits' → logprob: -11.013352394104004
    6. ',n' → logprob: -11.013352394104004
    7. ',(' → logprob: -11.263352394104004
    8. 'igits' → logprob: -11.513352394104004
    9. ',int' → logprob: -11.638352394104004
    10. '(' → logprob: -11.638352394104004

Token 69: ' digits' (ID: 37806)
  Prédit: ' digits'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' digits' → logprob: -0.5760622620582581
    2. 'digits' → logprob: -0.8260622620582581
    3. '<|end|>' → logprob: -10.701062202453613
    4. '(d' → logprob: -10.701062202453613
    5. '_digits' → logprob: -11.201062202453613
    6. 'Digits' → logprob: -11.326062202453613
    7. 'd' → logprob: -11.451062202453613
    8. ',d' → logprob: -11.576062202453613
    9. ')' → logprob: -11.701062202453613
    10. 'igits' → logprob: -12.201062202453613

Token 70: ',' (ID: 11)
  Prédit: ','
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ',' → logprob: -0.173123300075531
    2. '),' → logprob: -2.798123359680176
    3. ' ,' → logprob: -3.673123359680176
    4. '(),' → logprob: -3.673123359680176
    5. '(n' → logprob: -4.048123359680176
    6. '(' → logprob: -4.048123359680176
    7. ')' → logprob: -5.048123359680176
    8. ',n' → logprob: -6.798123359680176
    9. '(len' → logprob: -7.048123359680176
    10. ',),' → logprob: -7.548123359680176

Token 71: ' ' (ID: 220)
  Prédit: '0'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '0' → logprob: -0.7549311518669128
    2. ' ' → logprob: -1.1299312114715576
    3. '1' → logprob: -1.7549312114715576
    4. ' n' → logprob: -3.8799312114715576
    5. 'n' → logprob: -4.5049309730529785
    6. ')' → logprob: -7.8799309730529785
    7. '10' → logprob: -7.8799309730529785
    8. '9' → logprob: -8.504931449890137
    9. '-' → logprob: -8.754931449890137
    10. ' len' → logprob: -8.879931449890137

Token 72: '0' (ID: 15)
  Prédit: '0'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '0' → logprob: -0.05017656832933426
    2. '1' → logprob: -3.4251766204833984
    3. ' ' → logprob: -4.800176620483398
    4. 'n' → logprob: -5.425176620483398
    5. '9' → logprob: -7.050176620483398
    6. '3' → logprob: -7.175176620483398
    7. ')' → logprob: -7.675176620483398
    8. '))' → logprob: -7.675176620483398
    9. '),' → logprob: -8.550176620483398
    10. ' n' → logprob: -8.800176620483398

Token 73: '),' (ID: 936)
  Prédit: '),'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '),' → logprob: -0.39531636238098145
    2. ',' → logprob: -1.1453163623809814
    3. ')' → logprob: -5.145316123962402
    4. ' ,' → logprob: -6.895316123962402
    5. ' ),' → logprob: -7.520316123962402
    6. ',n' → logprob: -8.145316123962402
    7. '(n' → logprob: -8.645316123962402
    8. ' ' → logprob: -9.020316123962402
    9. ',),' → logprob: -9.395316123962402
    10. '1' → logprob: -10.020316123962402

Token 74: ' n' (ID: 297)
  Prédit: 'n'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'n' → logprob: -0.2185724973678589
    2. '3' → logprob: -1.9685724973678589
    3. '9' → logprob: -3.4685726165771484
    4. ' n' → logprob: -3.9685726165771484
    5. ' ' → logprob: -5.218572616577148
    6. '15' → logprob: -7.718572616577148
    7. '6' → logprob: -8.218572616577148
    8. '7' → logprob: -9.468572616577148
    9. '11' → logprob: -10.218572616577148
    10. '	n' → logprob: -10.218572616577148

Token 75: ')])' (ID: 99066)
  Prédit: ')])'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')])' → logprob: -0.005436520557850599
    2. ')' → logprob: -5.630436420440674
    3. ')]' → logprob: -6.505436420440674
    4. '))' → logprob: -8.255436897277832
    5. ')])
' → logprob: -10.380436897277832
    6. ')))' → logprob: -11.005436897277832
    7. ')])

' → logprob: -11.380436897277832
    8. '])' → logprob: -11.630436897277832
    9. ' )' → logprob: -13.130436897277832
    10. ')],' → logprob: -13.130436897277832


RÉSUMÉ:
--------------------------------------------------------------------------------
Total des tokens analysés: 73
Tokens correctement prédits (1ère position, stricte): 29
Tokens correctement prédits (1ère position, avec adaptation): 29
Tokens correctement prédits (top 10): 51
Précision stricte (1ère position): 39.73%
Précision adaptée (1ère position): 39.73%
Précision (top 10): 69.86%
================================================================================
