================================================================================
ANALYSE DE PRÉDICTION TOKEN PAR TOKEN (BATCH API)
Date: 2025-06-04 19:30:03
Modèle de tokenisation: gpt-4o-mini
================================================================================

SCRIPT ANALYSÉ:
--------------------------------------------------------------------------------
import math

def get_integer():
    # Petite fonction, juste pour demander un entier à l'utilisateur
    return int(input()) # On suppose que l'utilisateur sait ce qu'il fait

# Récupérer la hauteur
H = get_integer()
W = get_integer()
N = get_integer()   # le nombre total (?)

length = max(H, W)
# J'aurais pu appeler ça max_side, tant pis

answer = math.ceil(N / float(length))  # on divise, normalement ça donne ce qu'il faut

print(int(answer)) # juste au cas où, on imprime bien un entier
--------------------------------------------------------------------------------

RÉSULTATS D'ANALYSE TOKEN PAR TOKEN:
--------------------------------------------------------------------------------
Token 0: 'import' (ID: 561)
  → Token d'amorce (pas de prédiction)

Token 1: ' math' (ID: 13324)
  → Token d'amorce (pas de prédiction)

Token 2: '

' (ID: 279)
  → Token d'amorce (pas de prédiction)

Token 3: 'def' (ID: 1314)
  Prédit: '.'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '.' → logprob: -8.470901229884475e-05
    2. 'import' → logprob: -10.62508487701416
    3. '```' → logprob: -11.00008487701416
    4. '\' → logprob: -11.25008487701416
    5. '.
' → logprob: -12.62508487701416
    6. 'def' → logprob: -12.75008487701416
    7. '.pi' → logprob: -12.87508487701416
    8. '\n' → logprob: -13.00008487701416
    9. '<|end|>' → logprob: -13.12508487701416
    10. '.e' → logprob: -13.25008487701416

Token 4: ' get' (ID: 717)
  Prédit: ' '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' ' → logprob: -0.003915376495569944
    2. ' math' → logprob: -6.378915309906006
    3. '_' → logprob: -7.128915309906006
    4. ' space' → logprob: -8.378915786743164
    5. ' ' → logprob: -8.503915786743164
    6. ' factorial' → logprob: -8.503915786743164
    7. ' sqrt' → logprob: -8.628915786743164
    8. ' calculate' → logprob: -9.003915786743164
    9. ' f' → logprob: -9.503915786743164
    10. ' _' → logprob: -10.128915786743164

Token 5: '_integer' (ID: 82911)
  Prédit: '_'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '_' → logprob: -0.22691115736961365
    2. '_factor' → logprob: -1.976911187171936
    3. '_s' → logprob: -3.3519110679626465
    4. '_area' → logprob: -4.1019110679626465
    5. '_pi' → logprob: -6.1019110679626465
    6. ' _' → logprob: -6.2269110679626465
    7. '_max' → logprob: -6.7269110679626465
    8. '_distance' → logprob: -6.9769110679626465
    9. '_cube' → logprob: -7.1019110679626465
    10. '_circle' → logprob: -7.1019110679626465

Token 6: '():
' (ID: 8595)
  Prédit: '_'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '_' → logprob: -0.04085581377148628
    2. '_value' → logprob: -3.790855884552002
    3. '(' → logprob: -4.415855884552002
    4. ' _' → logprob: -7.540855884552002
    5. '_token' → logprob: -7.540855884552002
    6. '_values' → logprob: -7.540855884552002
    7. '```' → logprob: -8.040855407714844
    8. '_a' → logprob: -8.290855407714844
    9. '_factor' → logprob: -8.415855407714844
    10. ')' → logprob: -8.415855407714844

Token 7: '   ' (ID: 271)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(' → logprob: -0.9665029644966125
    2. '   ' → logprob: -1.4665029048919678
    3. ' return' → logprob: -2.2165029048919678
    4. '():' → logprob: -2.2165029048919678
    5. ':' → logprob: -2.3415029048919678
    6. ' ' → logprob: -3.8415029048919678
    7. 'return' → logprob: -3.9665029048919678
    8. ' (' → logprob: -4.841503143310547
    9. '```' → logprob: -4.966503143310547
    10. ':return' → logprob: -5.716503143310547

Token 8: ' #' (ID: 1069)
  Prédit: 'return'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'return' → logprob: -0.29553598165512085
    2. '   ' → logprob: -1.9205360412597656
    3. ' return' → logprob: -2.6705360412597656
    4. 'n' → logprob: -4.045536041259766
    5. 'x' → logprob: -4.420536041259766
    6. ' ' → logprob: -5.670536041259766
    7. 'r' → logprob: -6.170536041259766
    8. 'value' → logprob: -6.795536041259766
    9. '```' → logprob: -6.795536041259766
    10. 'i' → logprob: -7.045536041259766

Token 9: ' Petite' (ID: 129719)
  Prédit: 'return'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'return' → logprob: -1.0472440719604492
    2. ' return' → logprob: -1.6722440719604492
    3. '   ' → logprob: -2.172244071960449
    4. 'value' → logprob: -2.172244071960449
    5. ' number' → logprob: -3.422244071960449
    6. ' while' → logprob: -3.422244071960449
    7. 'num' → logprob: -3.422244071960449
    8. 'number' → logprob: -3.422244071960449
    9. ' value' → logprob: -3.672244071960449
    10. 'pass' → logprob: -3.922244071960449

Token 10: ' fonction' (ID: 17610)
  Prédit: ' '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' ' → logprob: -0.21941609680652618
    2. 's' → logprob: -2.0944161415100098
    3. ' s' → logprob: -3.9694161415100098
    4. ' number' → logprob: -4.09441614151001
    5. '   ' → logprob: -4.96941614151001
    6. '  ' → logprob: -5.21941614151001
    7. ' _' → logprob: -5.96941614151001
    8. 'r' → logprob: -6.09441614151001
    9. ' def' → logprob: -6.09441614151001
    10. '_' → logprob: -6.09441614151001

Token 11: ',' (ID: 11)
  Prédit: ' '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' ' → logprob: -0.9563049674034119
    2. '   ' → logprob: -1.7063050270080566
    3. 'def' → logprob: -1.9563050270080566
    4. '(' → logprob: -2.7063050270080566
    5. '\' → logprob: -2.9563050270080566
    6. '```' → logprob: -3.5813050270080566
    7. '  ' → logprob: -3.8313050270080566
    8. '    ' → logprob: -3.8313050270080566
    9. ' return' → logprob: -4.331305027008057
    10. ' def' → logprob: -4.331305027008057

Token 12: ' juste' (ID: 31553)
  Prédit: ' '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' ' → logprob: -0.2886268198490143
    2. '   ' → logprob: -2.0386269092559814
    3. ' return' → logprob: -2.6636269092559814
    4. ' ' → logprob: -4.913626670837402
    5. 'def' → logprob: -4.913626670837402
    6. '    ' → logprob: -5.038626670837402
    7. 'return' → logprob: -5.413626670837402
    8. ' def' → logprob: -5.538626670837402
    9. ' qui' → logprob: -5.913626670837402
    10. '  ' → logprob: -6.038626670837402

Token 13: ' pour' (ID: 1930)
  Prédit: ' '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' ' → logprob: -0.16718067228794098
    2. ' un' → logprob: -2.2921807765960693
    3. ' une' → logprob: -4.41718053817749
    4. ' return' → logprob: -4.41718053817749
    5. ' pour' → logprob: -5.04218053817749
    6. '   ' → logprob: -5.16718053817749
    7. ' to' → logprob: -5.54218053817749
    8. 'return' → logprob: -5.54218053817749
    9. ' for' → logprob: -6.16718053817749
    10. ' de' → logprob: -6.54218053817749

Token 14: ' demander' (ID: 60771)
  Prédit: 'r'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'r' → logprob: -0.7493553757667542
    2. ' récupérer' → logprob: -1.8743553161621094
    3. ' retourner' → logprob: -2.2493553161621094
    4. ' demander' → logprob: -2.7493553161621094
    5. 'return' → logprob: -3.7493553161621094
    6. 'dem' → logprob: -3.7493553161621094
    7. ' obtenir' → logprob: -3.8743553161621094
    8. ' saisir' → logprob: -4.124355316162109
    9. ' lire' → logprob: -4.249355316162109
    10. ' tester' → logprob: -4.374355316162109

Token 15: ' un' (ID: 537)
  Prédit: ' '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' ' → logprob: -0.18123069405555725
    2. ' un' → logprob: -3.0562307834625244
    3. ' )' → logprob: -3.5562307834625244
    4. '_' → logprob: -3.6812307834625244
    5. ' a' → logprob: -4.056230545043945
    6. ')' → logprob: -4.431230545043945
    7. ' une' → logprob: -5.056230545043945
    8. '  ' → logprob: -5.431230545043945
    9. 's' → logprob: -5.556230545043945
    10. ' à' → logprob: -5.556230545043945

Token 16: ' entier' (ID: 80473)
  Prédit: 'ent'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'ent' → logprob: -1.181032657623291
    2. 'e' → logprob: -1.306032657623291
    3. 'n' → logprob: -1.306032657623291
    4. 'nombre' → logprob: -2.556032657623291
    5. ' ' → logprob: -3.431032657623291
    6. ' nombre' → logprob: -3.806032657623291
    7. ' entier' → logprob: -4.431032657623291
    8. 'integer' → logprob: -6.681032657623291
    9. 'a' → logprob: -7.056032657623291
    10. ' ' → logprob: -7.806032657623291

Token 17: ' à' (ID: 1221)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.6863424181938171
    2. ':' → logprob: -1.686342477798462
    3. '():' → logprob: -2.186342477798462
    4. ' ' → logprob: -2.436342477798462
    5. '```' → logprob: -2.936342477798462
    6. 'return' → logprob: -4.561342239379883
    7. ' :' → logprob: -4.561342239379883
    8. '(' → logprob: -4.561342239379883
    9. 'def' → logprob: -4.936342239379883
    10. ' return' → logprob: -5.436342239379883

Token 18: ' l' (ID: 305)
  Prédit: 'l'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'l' → logprob: -0.015354663133621216
    2. ' l' → logprob: -4.265354633331299
    3. '	l' → logprob: -7.515354633331299
    4. 'util' → logprob: -8.015355110168457
    5. 'user' → logprob: -8.765355110168457
    6. ' ' → logprob: -9.765355110168457
    7. '   ' → logprob: -10.390355110168457
    8. ''utilisateur' → logprob: -10.640355110168457
    9. ' ' → logprob: -12.265355110168457
    10. '_l' → logprob: -12.515355110168457

Token 19: ''utilisateur' (ID: 140803)
  Prédit: ''utilisateur'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ''utilisateur' → logprob: -0.17021125555038452
    2. 'u' → logprob: -1.9202113151550293
    3. ''us' → logprob: -5.545211315155029
    4. 'a' → logprob: -6.045211315155029
    5. ''util' → logprob: -6.920211315155029
    6. ''u' → logprob: -6.920211315155029
    7. ''' → logprob: -7.420211315155029
    8. '’utilisateur' → logprob: -8.045210838317871
    9. ''user' → logprob: -8.045210838317871
    10. 'util' → logprob: -8.170210838317871

Token 20: '
' (ID: 198)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.07883846014738083
    2. ':' → logprob: -2.703838348388672
    3. ' ' → logprob: -5.703838348388672
    4. '```' → logprob: -6.203838348388672
    5. '(' → logprob: -7.078838348388672
    6. '():' → logprob: -7.328838348388672
    7. ' :' → logprob: -7.453838348388672
    8. '    
' → logprob: -8.453838348388672
    9. '
' → logprob: -8.703838348388672
    10. '  
' → logprob: -8.828838348388672

Token 21: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.005844173487275839
    2. '```' → logprob: -5.8808441162109375
    3. 'return' → logprob: -7.0058441162109375
    4. ' return' → logprob: -7.3808441162109375
    5. ':' → logprob: -7.5058441162109375
    6. ' ' → logprob: -7.6308441162109375
    7. '    
' → logprob: -9.005844116210938
    8. '(' → logprob: -10.380844116210938
    9. 'def' → logprob: -10.380844116210938
    10. 'n' → logprob: -10.630844116210938

Token 22: ' return' (ID: 622)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.03845579922199249
    2. 'n' → logprob: -4.038455963134766
    3. ' ' → logprob: -4.663455963134766
    4. 'return' (adapté à ' return') → logprob: -5.413455963134766
    5. 'x' → logprob: -6.413455963134766
    6. '    ' → logprob: -7.163455963134766
    7. '  ' → logprob: -7.163455963134766
    8. 'i' → logprob: -7.663455963134766
    9. 'value' → logprob: -7.913455963134766
    10. ' return' → logprob: -7.913455963134766

Token 23: ' int' (ID: 677)
  Prédit: ' int'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' int' → logprob: -0.00021057340200059116
    2. 'int' → logprob: -8.500210762023926
    3. ' ' → logprob: -12.125210762023926
    4. ' ' → logprob: -13.750210762023926
    5. '=int' → logprob: -15.750210762023926
    6. '(int' → logprob: -15.875210762023926
    7. '<int' → logprob: -16.62520980834961
    8. ' in' → logprob: -17.00020980834961
    9. '  ' → logprob: -17.12520980834961
    10. '[int' → logprob: -17.25020980834961

Token 24: '(input' (ID: 10054)
  Prédit: '(input'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(input' → logprob: -0.31327563524246216
    2. '(' → logprob: -1.3132755756378174
    3. 'input' → logprob: -11.563275337219238
    4. '()' → logprob: -13.188275337219238
    5. '(
' → logprob: -13.688275337219238
    6. '('' → logprob: -15.063275337219238
    7. '(

' → logprob: -15.188275337219238
    8. ' (' → logprob: -15.563275337219238
    9. '(raw' → logprob: -15.938275337219238
    10. '(eval' → logprob: -16.313276290893555

Token 25: '())' (ID: 3516)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(' → logprob: -0.037819743156433105
    2. '("("' → logprob: -3.7878198623657227
    3. '('' → logprob: -4.412819862365723
    4. '(""))' → logprob: -7.037819862365723
    5. '("' → logprob: -7.662819862365723
    6. '()' → logprob: -8.162819862365723
    7. '("")' → logprob: -8.287819862365723
    8. '(
' → logprob: -9.037819862365723
    9. '(">' → logprob: -9.537819862365723
    10. '())' → logprob: -9.912819862365723

Token 26: ' #' (ID: 1069)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '(' → logprob: -0.7159901261329651
    2. '\n' → logprob: -1.4659900665283203
    3. '
' → logprob: -2.5909900665283203
    4. '<|end|>' → logprob: -2.8409900665283203
    5. '()' → logprob: -2.9659900665283203
    6. ')' → logprob: -3.7159900665283203
    7. 'def' → logprob: -4.46599006652832
    8. '(
' → logprob: -4.46599006652832
    9. '\' → logprob: -4.46599006652832
    10. '```' → logprob: -4.84099006652832

Token 27: ' On' (ID: 2160)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ')' → logprob: -0.1246793270111084
    2. '<|end|>' → logprob: -2.9996793270111084
    3. '()' → logprob: -3.2496793270111084
    4. '(' → logprob: -4.9996795654296875
    5. '\n' → logprob: -5.1246795654296875
    6. ' ' → logprob: -5.1246795654296875
    7. '<|end|>' → logprob: -5.6246795654296875
    8. ' )' → logprob: -6.4996795654296875
    9. '\' → logprob: -6.8746795654296875
    10. '```' → logprob: -6.9996795654296875

Token 28: ' suppose' (ID: 35968)
  Prédit: ' continue'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' continue' → logprob: -1.2869670391082764
    2. ' suppose' → logprob: -1.4119670391082764
    3. ' récup' → logprob: -3.2869670391082764
    4. ' esp' → logprob: -3.4119670391082764
    5. ' souhaite' → logprob: -3.4119670391082764
    6. ' demande' → logprob: -3.4119670391082764
    7. ' a' → logprob: -3.6619670391082764
    8. ' assume' → logprob: -3.6619670391082764
    9. ' recommande' → logprob: -3.6619670391082764
    10. ' ajoute' → logprob: -3.9119670391082764

Token 29: ' que' (ID: 661)
  Prédit: ' que'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' que' → logprob: -0.09078264236450195
    2. 'que' → logprob: -2.715782642364502
    3. ' that' → logprob: -4.715782642364502
    4. ' ' → logprob: -5.090782642364502
    5. '<|end|>' → logprob: -6.715782642364502
    6. 'that' → logprob: -7.090782642364502
    7. '   ' → logprob: -7.590782642364502
    8. ' toujours' → logprob: -7.715782642364502
    9. ' ici' → logprob: -8.215782165527344
    10. ' valid' → logprob: -8.215782165527344

Token 30: ' l' (ID: 305)
  Prédit: 'l'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'l' → logprob: -0.6980598568916321
    2. ' l' → logprob: -0.6980598568916321
    3. ' lâ' → logprob: -5.823060035705566
    4. ' the' → logprob: -7.323060035705566
    5. '	l' → logprob: -7.698060035705566
    6. 'the' → logprob: -8.573060035705566
    7. ''utilisateur' → logprob: -8.948060035705566
    8. ' ' → logprob: -9.698060035705566
    9. '<|end|>' → logprob: -9.698060035705566
    10. 'user' → logprob: -9.823060035705566

Token 31: ''utilisateur' (ID: 140803)
  Prédit: ''utilisateur'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ''utilisateur' → logprob: -0.005894071888178587
    2. '’utilisateur' → logprob: -5.755894184112549
    3. ' utilisateur' → logprob: -7.130894184112549
    4. ''' → logprob: -7.130894184112549
    5. 'a' → logprob: -7.880894184112549
    6. 'e' → logprob: -8.13089370727539
    7. 'util' → logprob: -8.88089370727539
    8. ''util' → logprob: -9.50589370727539
    9. ''user' → logprob: -9.63089370727539
    10. ''entrée' → logprob: -9.88089370727539

Token 32: ' sait' (ID: 52101)
  Prédit: ' entre'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' entre' → logprob: -0.784336507320404
    2. 'entr' → logprob: -1.6593365669250488
    3. ' entr' → logprob: -2.034336566925049
    4. 'entre' → logprob: -2.534336566925049
    5. 'ent' → logprob: -2.784336566925049
    6. ' sais' → logprob: -3.284336566925049
    7. 'enter' → logprob: -4.784336566925049
    8. 's' → logprob: -5.159336566925049
    9. ' ' → logprob: -5.659336566925049
    10. ' enter' → logprob: -5.659336566925049

Token 33: ' ce' (ID: 2357)
  Prédit: 'entr'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'entr' → logprob: -0.31994694471359253
    2. 'ent' → logprob: -2.6949470043182373
    3. ' entrer' → logprob: -2.6949470043182373
    4. ' saisir' → logprob: -3.0699470043182373
    5. ' rentrer' → logprob: -3.5699470043182373
    6. ' ' → logprob: -3.6949470043182373
    7. ' entr' → logprob: -5.069946765899658
    8. 'coder' → logprob: -5.069946765899658
    9. ' coder' → logprob: -5.944946765899658
    10. 'entrée' → logprob: -5.944946765899658

Token 34: ' qu' (ID: 474)
  Prédit: 'qu'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'qu' → logprob: -0.015206274576485157
    2. 'que' → logprob: -5.390206336975098
    3. ' qu' → logprob: -5.640206336975098
    4. 'qui' → logprob: -5.640206336975098
    5. 'quil' → logprob: -6.515206336975098
    6. ' quil' → logprob: -7.265206336975098
    7. '```' → logprob: -7.765206336975098
    8. 'q' → logprob: -8.765206336975098
    9. 'quelle' → logprob: -8.765206336975098
    10. ' ' → logprob: -10.265206336975098

Token 35: ''il' (ID: 14683)
  Prédit: ''il'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ''il' → logprob: -0.47853201627731323
    2. ''' → logprob: -1.478532075881958
    3. 'qu' → logprob: -1.978532075881958
    4. 'a' → logprob: -5.478531837463379
    5. 'u' → logprob: -6.353531837463379
    6. 'e' → logprob: -6.603531837463379
    7. 'l' → logprob: -6.603531837463379
    8. ' qu' → logprob: -6.603531837463379
    9. ''on' → logprob: -6.853531837463379
    10. ''elle' → logprob: -7.603531837463379

Token 36: ' fait' (ID: 7473)
  Prédit: 'f'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'f' → logprob: -0.9603236317634583
    2. ' faut' → logprob: -1.2103235721588135
    3. 've' → logprob: -2.3353235721588135
    4. ' doit' → logprob: -2.5853235721588135
    5. 'fait' → logprob: -2.9603235721588135
    6. 'do' → logprob: -3.3353235721588135
    7. ' veut' → logprob: -3.8353235721588135
    8. ' fait' → logprob: -3.9603235721588135
    9. ' demande' → logprob: -5.835323810577393
    10. 'veux' → logprob: -6.085323810577393

Token 37: '

' (ID: 279)
  Prédit: 'def'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'def' → logprob: -0.6996421813964844
    2. '

' → logprob: -1.3246421813964844
    3. '
' → logprob: -1.5746421813964844
    4. '<|end|>' → logprob: -4.574642181396484
    5. '#' → logprob: -4.949642181396484
    6. '```' → logprob: -5.199642181396484
    7. '\n' → logprob: -5.824642181396484
    8. '\' → logprob: -7.324642181396484
    9. '<|end|>' → logprob: -7.574642181396484
    10. ' 

' → logprob: -7.699642181396484

Token 38: '#' (ID: 2)
  Prédit: '

'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '

' → logprob: -0.812501072883606
    2. 'def' → logprob: -0.937501072883606
    3. '
' → logprob: -1.937501072883606
    4. 'n' → logprob: -5.062500953674316
    5. '```' → logprob: -5.437500953674316
    6. 'x' → logprob: -5.562500953674316
    7. '\n' → logprob: -6.312500953674316
    8. '#' → logprob: -6.562500953674316
    9. 'a' → logprob: -7.187500953674316
    10. '\' → logprob: -7.187500953674316

Token 39: ' R' (ID: 460)
  Prédit: 'def'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'def' → logprob: -0.013596025295555592
    2. '#' → logprob: -4.763596057891846
    3. '

' → logprob: -6.513596057891846
    4. ' 

' → logprob: -6.888596057891846
    5. ' def' → logprob: -7.513596057891846
    6. '
' → logprob: -7.513596057891846
    7. 'n' → logprob: -7.888596057891846
    8. '```' → logprob: -8.388595581054688
    9. 'x' → logprob: -9.013595581054688
    10. '\' → logprob: -9.138595581054688

Token 40: 'éc' (ID: 5675)
  Prédit: 'es'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'es' → logprob: -1.1717864274978638
    2. 'e' → logprob: -1.5467864274978638
    3. 'és' → logprob: -1.5467864274978638
    4. 'eturn' → logprob: -2.296786308288574
    5. 'et' → logprob: -2.796786308288574
    6. 'ep' → logprob: -4.046786308288574
    7. 'é' → logprob: -4.046786308288574
    8. 'etur' → logprob: -4.171786308288574
    9. 'ec' → logprob: -4.796786308288574
    10. 'a' → logprob: -5.296786308288574

Token 41: 'up' (ID: 817)
  Prédit: 'up'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'up' → logprob: -0.009180297143757343
    2. 'uper' → logprob: -5.509180068969727
    3. 'u' → logprob: -5.759180068969727
    4. 'upr' → logprob: -7.009180068969727
    5. 'ursive' → logprob: -8.634180068969727
    6. 'ap' → logprob: -8.759180068969727
    7. 'ursion' → logprob: -8.884180068969727
    8. 'urs' → logprob: -8.884180068969727
    9. 'ur' → logprob: -9.134180068969727
    10. 'urrent' → logprob: -9.384180068969727

Token 42: 'érer' (ID: 29097)
  Prédit: 'érer'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'érer' → logprob: -0.06204061955213547
    2. 'ération' → logprob: -2.9370405673980713
    3. 'er' → logprob: -5.43704080581665
    4. 'up' → logprob: -6.93704080581665
    5. 'ère' → logprob: -7.06204080581665
    6. 'erer' → logprob: -8.062040328979492
    7. '	' → logprob: -9.562040328979492
    8. 'èr' → logprob: -9.562040328979492
    9. 'érez' → logprob: -9.562040328979492
    10. 'è' → logprob: -10.187040328979492

Token 43: ' la' (ID: 557)
  Prédit: ' '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' ' → logprob: -0.571044921875
    2. ' l' → logprob: -2.071044921875
    3. '_' → logprob: -2.196044921875
    4. '()' → logprob: -2.946044921875
    5. 'l' → logprob: -3.821044921875
    6. ' un' → logprob: -3.946044921875
    7. '(' → logprob: -4.446044921875
    8. 'user' → logprob: -4.446044921875
    9. ' (' → logprob: -4.696044921875
    10. 'le' → logprob: -4.821044921875

Token 44: ' hauteur' (ID: 72987)
  Prédit: 'nombre'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'nombre' → logprob: -0.8092998266220093
    2. 'ray' → logprob: -1.6842998266220093
    3. ' nombre' → logprob: -2.184299945831299
    4. 'val' → logprob: -2.809299945831299
    5. ' valeur' → logprob: -3.309299945831299
    6. ' rayon' → logprob: -3.559299945831299
    7. 'distance' → logprob: -3.684299945831299
    8. 'radius' → logprob: -4.059299945831299
    9. 'n' → logprob: -4.434299945831299
    10. 'tail' → logprob: -4.559299945831299

Token 45: '
' (ID: 198)
  Prédit: '()'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '()' → logprob: -1.1291927099227905
    2. '=' → logprob: -1.6291927099227905
    3. ' =' → logprob: -2.25419282913208
    4. '_' → logprob: -2.37919282913208
    5. '(' → logprob: -2.50419282913208
    6. 'height' → logprob: -2.75419282913208
    7. '_height' → logprob: -3.00419282913208
    8. 'ha' → logprob: -3.37919282913208
    9. ':' → logprob: -4.50419282913208
    10. 'def' → logprob: -4.75419282913208

Token 46: 'H' (ID: 39)
  Prédit: 'ha'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'ha' → logprob: -0.3538689911365509
    2. 'height' → logprob: -1.6038689613342285
    3. 'h' → logprob: -2.3538689613342285
    4. 'Ha' → logprob: -7.6038689613342285
    5. 'altura' → logprob: -8.228869438171387
    6. ' hauteur' → logprob: -8.603869438171387
    7. ' ' → logprob: -8.853869438171387
    8. 'haut' → logprob: -9.478869438171387
    9. 'H' → logprob: -9.603869438171387
    10. 'n' → logprob: -9.978869438171387

Token 47: ' =' (ID: 314)
  Prédit: ' ='
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' =' → logprob: -0.2055407613515854
    2. '=' → logprob: -2.330540657043457
    3. 'eight' → logprob: -3.080540657043457
    4. 'e' → logprob: -3.705540657043457
    5. '_' → logprob: -4.205540657043457
    6. '_e' → logprob: -6.955540657043457
    7. 'ight' → logprob: -7.330540657043457
    8. 't' → logprob: -7.580540657043457
    9. ' ' → logprob: -7.955540657043457
    10. '   ' → logprob: -8.830540657043457

Token 48: ' get' (ID: 717)
  Prédit: ' get'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' get' → logprob: -0.023266442120075226
    2. 'get' → logprob: -3.773266553878784
    3. ' int' → logprob: -10.898266792297363
    4. '_get' → logprob: -14.148266792297363
    5. 'int' → logprob: -14.273266792297363
    6. ' ' → logprob: -14.398266792297363
    7. '(get' → logprob: -15.273266792297363
    8. ' math' → logprob: -16.148265838623047
    9. '.get' → logprob: -16.773265838623047
    10. '	get' → logprob: -17.023265838623047

Token 49: '_integer' (ID: 82911)
  Prédit: '_integer'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_integer' → logprob: -4.620622712536715e-05
    2. '_' → logprob: -10.375045776367188
    3. '_int' → logprob: -11.250045776367188
    4. '_in' → logprob: -13.750045776367188
    5. '_INTEGER' → logprob: -15.250045776367188
    6. '_string' → logprob: -15.875045776367188
    7. '_Integer' → logprob: -16.250045776367188
    8. '_height' → logprob: -16.500045776367188
    9. '_float' → logprob: -16.875045776367188
    10. ' _' → logprob: -17.000045776367188

Token 50: '()
' (ID: 1234)
  Prédit: '()'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '()' → logprob: -0.00018506382184568793
    2. '(' → logprob: -8.625185012817383
    3. ' ()' → logprob: -13.375185012817383
    4. '()
' → logprob: -13.500185012817383
    5. '(H' → logprob: -14.000185012817383
    6. '()

' → logprob: -14.750185012817383
    7. '())' → logprob: -15.000185012817383
    8. '()(' → logprob: -15.750185012817383
    9. '()]' → logprob: -15.750185012817383
    10. '()<' → logprob: -16.000185012817383

Token 51: 'W' (ID: 54)
  Prédit: '#'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '#' → logprob: -0.6965131759643555
    2. '<|end|>' → logprob: -1.3215131759643555
    3. '*' → logprob: -2.6965131759643555
    4. 'n' → logprob: -2.9465131759643555
    5. '
' → logprob: -3.6965131759643555
    6. 'x' → logprob: -4.5715131759643555
    7. ')' → logprob: -4.5715131759643555
    8. 'N' → logprob: -4.9465131759643555
    9. 's' → logprob: -5.0715131759643555
    10. 'def' → logprob: -5.3215131759643555

Token 52: ' =' (ID: 314)
  Prédit: ' ='
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' =' → logprob: -0.02339385822415352
    2. '=' → logprob: -3.7733938694000244
    3. ')' → logprob: -9.523393630981445
    4. ',' → logprob: -10.523393630981445
    5. '_' → logprob: -11.398393630981445
    6. '<|end|>' → logprob: -11.398393630981445
    7. '.' → logprob: -11.523393630981445
    8. ' ' → logprob: -12.023393630981445
    9. ' ,' → logprob: -12.773393630981445
    10. '  ' → logprob: -14.148393630981445

Token 53: ' get' (ID: 717)
  Prédit: ' get'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' get' → logprob: -0.2519311308860779
    2. 'get' → logprob: -1.5019311904907227
    3. '(get' → logprob: -14.626931190490723
    4. ' math' → logprob: -14.751931190490723
    5. ' int' → logprob: -14.876931190490723
    6. 'int' → logprob: -15.001931190490723
    7. '=get' → logprob: -16.001930236816406
    8. ' ' → logprob: -16.626930236816406
    9. 'math' → logprob: -16.626930236816406
    10. '_get' → logprob: -16.626930236816406

Token 54: '_integer' (ID: 82911)
  Prédit: '_integer'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_integer' → logprob: -1.0921942703134846e-05
    2. '_INTEGER' → logprob: -12.25001049041748
    3. 'integer' → logprob: -12.75001049041748
    4. 'int' → logprob: -14.12501049041748
    5. '_int' → logprob: -14.12501049041748
    6. 'teger' → logprob: -14.50001049041748
    7. 'Integer' → logprob: -14.75001049041748
    8. '_string' → logprob: -15.75001049041748
    9. '_Integer' → logprob: -15.87501049041748
    10. '_' → logprob: -16.250011444091797

Token 55: '()
' (ID: 1234)
  Prédit: '()'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '()' → logprob: -2.999452772201039e-05
    2. '(' → logprob: -11.125029563903809
    3. '()
' → logprob: -12.000029563903809
    4. ' ()' → logprob: -13.125029563903809
    5. '()

' → logprob: -13.125029563903809
    6. '()]' → logprob: -13.625029563903809
    7. '()`' → logprob: -14.250029563903809
    8. '()<' → logprob: -14.500029563903809
    9. '`()' → logprob: -14.750029563903809
    10. '()>' → logprob: -14.875029563903809

Token 56: 'N' (ID: 45)
  Prédit: '#'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '#' → logprob: -0.638927161693573
    2. 'def' → logprob: -1.6389272212982178
    3. 'area' → logprob: -2.8889272212982178
    4. 'result' → logprob: -3.1389272212982178
    5. 'R' → logprob: -3.3889272212982178
    6. '<|end|>' → logprob: -4.013926982879639
    7. 'M' → logprob: -4.138926982879639
    8. 'n' → logprob: -4.388926982879639
    9. 'r' → logprob: -4.513926982879639
    10. 'S' → logprob: -4.763926982879639

Token 57: ' =' (ID: 314)
  Prédit: ' ='
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' =' → logprob: -0.38906019926071167
    2. '=' → logprob: -1.1390602588653564
    3. '_' → logprob: -6.514060020446777
    4. '<|end|>' → logprob: -8.639060020446777
    5. '=int' → logprob: -8.889060020446777
    6. ')' → logprob: -9.764060020446777
    7. 's' → logprob: -10.014060020446777
    8. '>' → logprob: -10.764060020446777
    9. 'x' → logprob: -10.764060020446777
    10. '<|end|>' → logprob: -10.951560020446777

Token 58: ' get' (ID: 717)
  Prédit: 'get'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'get' → logprob: -0.31332287192344666
    2. ' get' → logprob: -1.313322901725769
    3. 'int' → logprob: -10.188323020935059
    4. ' int' → logprob: -10.688323020935059
    5. 'math' → logprob: -15.313323020935059
    6. ' math' → logprob: -15.688323020935059
    7. '(get' → logprob: -15.938323020935059
    8. '=get' → logprob: -16.063322067260742
    9. '.get' → logprob: -17.188322067260742
    10. ' ' → logprob: -17.313322067260742

Token 59: '_integer' (ID: 82911)
  Prédit: '_integer'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_integer' → logprob: -2.5822400857578032e-05
    2. 'Integer' → logprob: -11.625025749206543
    3. 'integer' → logprob: -11.750025749206543
    4. '_INTEGER' → logprob: -12.375025749206543
    5. '()' → logprob: -13.000025749206543
    6. 'int' → logprob: -14.875025749206543
    7. '(' → logprob: -15.125025749206543
    8. '_' → logprob: -15.250025749206543
    9. '_Integer' → logprob: -15.250025749206543
    10. '_in' → logprob: -15.750025749206543

Token 60: '()' (ID: 416)
  Prédit: '()'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '()' → logprob: -4.4656579120783135e-05
    2. '(' → logprob: -10.375044822692871
    3. ' ()' → logprob: -12.000044822692871
    4. '()
' → logprob: -13.875044822692871
    5. '()`' → logprob: -14.125044822692871
    6. '`()' → logprob: -14.250044822692871
    7. '()]' → logprob: -14.375044822692871
    8. ']()' → logprob: -14.500044822692871
    9. '()(' → logprob: -14.625044822692871
    10. '()>' → logprob: -14.625044822692871

Token 61: '  ' (ID: 256)
  Prédit: 'rect'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'rect' → logprob: -1.0596510171890259
    2. 'points' → logprob: -1.1846510171890259
    3. 'tiles' → logprob: -2.4346508979797363
    4. 'for' → logprob: -2.9346508979797363
    5. 'blocks' → logprob: -3.8096508979797363
    6. 'positions' → logprob: -4.309650897979736
    7. 'grid' → logprob: -4.684650897979736
    8. 'items' → logprob: -4.809650897979736
    9. 'houses' → logprob: -4.809650897979736
    10. 'boxes' → logprob: -4.934650897979736

Token 62: ' #' (ID: 1069)
  Prédit: 'for'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'for' → logprob: -1.3117380142211914
    2. 'houses' → logprob: -1.9367380142211914
    3. 'points' → logprob: -2.5617380142211914
    4. '#' (adapté à ' #') → logprob: -2.9367380142211914
    5. 'tiles' → logprob: -3.0617380142211914
    6. 'rect' → logprob: -3.1867380142211914
    7. 'boxes' → logprob: -3.3117380142211914
    8. 'items' → logprob: -3.4367380142211914
    9. 'positions' → logprob: -3.6867380142211914
    10. 'L' → logprob: -4.061738014221191

Token 63: ' le' (ID: 505)
  Prédit: '#'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '#' → logprob: -1.1050336360931396
    2. 'for' → logprob: -2.4800336360931396
    3. 'points' → logprob: -2.6050336360931396
    4. ' bricks' → logprob: -2.9800336360931396
    5. 'tiles' → logprob: -3.2300336360931396
    6. 'x' → logprob: -3.2300336360931396
    7. 'tokens' → logprob: -3.3550336360931396
    8. 'X' → logprob: -3.4800336360931396
    9. 's' → logprob: -3.7300336360931396
    10. 'blocks' → logprob: -4.105033874511719

Token 64: ' nombre' (ID: 9733)
  Prédit: ' nombre'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' nombre' → logprob: -0.038742545992136
    2. 'ombre' → logprob: -3.7887425422668457
    3. 'nombre' → logprob: -4.913742542266846
    4. ' number' → logprob: -6.288742542266846
    5. ' ' → logprob: -7.038742542266846
    6. ' nombres' → logprob: -7.163742542266846
    7. 'ombr' → logprob: -7.538742542266846
    8. '_' → logprob: -7.788742542266846
    9. ' #' → logprob: -7.788742542266846
    10. ' nbr' → logprob: -7.788742542266846

Token 65: ' total' (ID: 3609)
  Prédit: ''
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False

Token 66: ' (' (ID: 350)
  Prédit: ''
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False

Token 67: '?)

' (ID: 95357)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ')' → logprob: -0.40146809816360474
    2. ' des' → logprob: -2.65146803855896
    3. ' de' → logprob: -2.77646803855896
    4. 'des' → logprob: -2.90146803855896
    5. 'de' → logprob: -3.15146803855896
    6. ' )' → logprob: -3.40146803855896
    7. 'd' → logprob: -3.77646803855896
    8. ' d' → logprob: -4.026468276977539
    9. '<|end|>' → logprob: -4.901468276977539
    10. ' ' → logprob: -5.026468276977539

Token 68: 'length' (ID: 7914)
  Prédit: 'tiles'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'tiles' → logprob: -2.3203823566436768
    2. 'points' → logprob: -2.4453823566436768
    3. 'blocks' → logprob: -2.4453823566436768
    4. '#' → logprob: -2.6953823566436768
    5. 'houses' → logprob: -2.6953823566436768
    6. 'for' → logprob: -3.1953823566436768
    7. 'positions' → logprob: -3.3203823566436768
    8. 't' → logprob: -3.5703823566436768
    9. 'layers' → logprob: -3.5703823566436768
    10. 'items' → logprob: -3.6953823566436768

Token 69: ' =' (ID: 314)
  Prédit: 's'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 's' → logprob: -0.31832367181777954
    2. '_' → logprob: -1.4433236122131348
    3. ' =' → logprob: -3.6933236122131348
    4. '=' → logprob: -5.068323612213135
    5. '_s' → logprob: -5.943323612213135
    6. '_max' → logprob: -7.818323612213135
    7. '_=' → logprob: -8.318324089050293
    8. 'es' → logprob: -8.818324089050293
    9. '_length' → logprob: -8.818324089050293
    10. '_per' → logprob: -8.943324089050293

Token 70: ' max' (ID: 2999)
  Prédit: ' W'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' W' → logprob: -1.5135475397109985
    2. 'math' → logprob: -1.6385475397109985
    3. 'W' → logprob: -1.7635475397109985
    4. ' math' → logprob: -1.8885475397109985
    5. 'H' → logprob: -2.638547420501709
    6. ' H' → logprob: -3.013547420501709
    7. 'int' → logprob: -4.013547420501709
    8. '[]' → logprob: -4.013547420501709
    9. ' int' → logprob: -4.138547420501709
    10. 'min' → logprob: -4.138547420501709

Token 71: '(H' (ID: 20904)
  Prédit: '(H'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(H' → logprob: -0.5966197848320007
    2. '(' → logprob: -0.8466197848320007
    3. '(length' → logprob: -4.596619606018066
    4. '(len' → logprob: -5.096619606018066
    5. '(W' → logprob: -5.596619606018066
    6. '((' → logprob: -8.346619606018066
    7. '([' → logprob: -10.096619606018066
    8. 'length' → logprob: -10.096619606018066
    9. '(math' → logprob: -10.221619606018066
    10. '(`' → logprob: -10.596619606018066

Token 72: ',' (ID: 11)
  Prédit: ','
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ',' → logprob: -0.010679792612791061
    2. ' ,' → logprob: -4.635679721832275
    3. ',W' → logprob: -7.010679721832275
    4. ' ' → logprob: -11.760680198669434
    5. ',H' → logprob: -12.635680198669434
    6. ')' → logprob: -12.760680198669434
    7. ' *' → logprob: -13.885680198669434
    8. ' W' → logprob: -14.010680198669434
    9. 'W' → logprob: -14.385680198669434
    10. ',w' → logprob: -14.385680198669434

Token 73: ' W' (ID: 486)
  Prédit: 'W'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'W' → logprob: -0.03811665624380112
    2. ' W' → logprob: -3.288116693496704
    3. ' ' → logprob: -9.788116455078125
    4. ')' → logprob: -11.788116455078125
    5. '   ' → logprob: -12.788116455078125
    6. '	W' → logprob: -13.038116455078125
    7. '  ' → logprob: -13.163116455078125
    8. ' ' → logprob: -13.538116455078125
    9. 'H' → logprob: -14.288116455078125
    10. ',W' → logprob: -14.538116455078125

Token 74: ')
' (ID: 446)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')' → logprob: -0.00019901065388694406
    2. ' )' → logprob: -9.000199317932129
    3. ',' → logprob: -10.000199317932129
    4. ')
' → logprob: -11.750199317932129
    5. '))' → logprob: -12.125199317932129
    6. ')*' → logprob: -13.250199317932129
    7. '),' → logprob: -13.500199317932129
    8. ')**' → logprob: -13.625199317932129
    9. '+' → logprob: -13.750199317932129
    10. 'length' → logprob: -13.875199317932129

Token 75: '#' (ID: 2)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')' → logprob: -1.3525378704071045
    2. '**' → logprob: -1.3525378704071045
    3. '*' → logprob: -1.7275378704071045
    4. '#' → logprob: -1.9775378704071045
    5. '<|end|>' → logprob: -3.3525378704071045
    6. '+' → logprob: -3.6025378704071045
    7. '.' → logprob: -4.102538108825684
    8. 'N' → logprob: -4.227538108825684
    9. 'n' → logprob: -4.602538108825684
    10. '
' → logprob: -5.227538108825684

Token 76: ' J' (ID: 643)
  Prédit: 'for'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'for' → logprob: -1.0896766185760498
    2. 'if' → logprob: -1.5896766185760498
    3. '#' → logprob: -3.08967661857605
    4. 'def' → logprob: -3.21467661857605
    5. ' for' → logprob: -3.46467661857605
    6. 'tiles' → logprob: -3.58967661857605
    7. 'length' → logprob: -3.71467661857605
    8. 'block' → logprob: -4.089676856994629
    9. 'print' → logprob: -4.089676856994629
    10. 'while' → logprob: -4.214676856994629

Token 77: ''aurais' (ID: 149917)
  Prédit: 'e'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'e' → logprob: -0.1085330918431282
    2. 'ust' → logprob: -3.2335331439971924
    3. 'uge' → logprob: -4.233532905578613
    4. ''' → logprob: -4.858532905578613
    5. 'uste' → logprob: -5.358532905578613
    6. 'oueur' → logprob: -5.483532905578613
    7. ''util' → logprob: -5.858532905578613
    8. ''ai' → logprob: -5.858532905578613
    9. 'continue' → logprob: -5.983532905578613
    10. '#' → logprob: -6.233532905578613

Token 78: ' pu' (ID: 2923)
  Prédit: 'pré'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'pré' → logprob: -1.7857017517089844
    2. ' aimé' → logprob: -2.4107017517089844
    3. 'pu' → logprob: -2.5357017517089844
    4. ' préféré' → logprob: -2.5357017517089844
    5. 'aim' → logprob: -2.7857017517089844
    6. 'f' → logprob: -2.9107017517089844
    7. 'bien' → logprob: -2.9107017517089844
    8. 'pr' → logprob: -3.2857017517089844
    9. ' besoin' → logprob: -3.2857017517089844
    10. 'bes' → logprob: -3.4107017517089844

Token 79: ' appeler' (ID: 172747)
  Prédit: ' utiliser'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' utiliser' → logprob: -0.7535034418106079
    2. 'util' → logprob: -1.628503441810608
    3. 'faire' → logprob: -2.3785033226013184
    4. ' faire' → logprob: -3.0035033226013184
    5. ' prendre' → logprob: -3.6285033226013184
    6. 'import' → logprob: -3.7535033226013184
    7. ' continuer' → logprob: -3.8785033226013184
    8. 'mettre' → logprob: -4.128503322601318
    9. 'prendre' → logprob: -4.128503322601318
    10. 'contin' → logprob: -4.253503322601318

Token 80: ' ça' (ID: 13590)
  Prédit: 'length'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'length' → logprob: -0.3724588453769684
    2. ' length' → logprob: -2.4974589347839355
    3. ' math' → logprob: -2.7474589347839355
    4. 'math' → logprob: -2.8724589347839355
    5. 'max' → logprob: -3.7474589347839355
    6. ' N' → logprob: -4.2474589347839355
    7. 'N' → logprob: -4.6224589347839355
    8. 'get' → logprob: -4.7474589347839355
    9. ' get' → logprob: -4.7474589347839355
    10. ' la' → logprob: -4.8724589347839355

Token 81: ' max' (ID: 2999)
  Prédit: ' length'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' length' → logprob: -0.9685494899749756
    2. ' size' → logprob: -1.8435494899749756
    3. 'length' → logprob: -1.8435494899749756
    4. ' max' → logprob: -2.2185494899749756
    5. '"' → logprob: -3.0935494899749756
    6. ' "' → logprob: -3.2185494899749756
    7. 'size' → logprob: -3.4685494899749756
    8. 'max' → logprob: -4.093549728393555
    9. ' side' → logprob: -4.343549728393555
    10. ' diagonal' → logprob: -4.843549728393555

Token 82: '_side' (ID: 46130)
  Prédit: '_length'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_length' → logprob: -0.2833489179611206
    2. 'length' → logprob: -1.7833489179611206
    3. '_size' → logprob: -3.90834903717041
    4. '_dim' → logprob: -4.78334903717041
    5. 'size' → logprob: -5.28334903717041
    6. ')' → logprob: -5.28334903717041
    7. '_' → logprob: -5.40834903717041
    8. '(' → logprob: -5.40834903717041
    9. '_dimension' → logprob: -5.40834903717041
    10. '_side' → logprob: -5.78334903717041

Token 83: ',' (ID: 11)
  Prédit: '**'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '**' → logprob: -1.7649224996566772
    2. 'length' → logprob: -1.7649224996566772
    3. '#' → logprob: -2.639922618865967
    4. 'def' → logprob: -2.639922618865967
    5. 'max' → logprob: -3.139922618865967
    6. 'square' → logprob: -3.139922618865967
    7. '.' → logprob: -3.389922618865967
    8. ')' → logprob: -3.389922618865967
    9. 'size' → logprob: -3.389922618865967
    10. '*' → logprob: -3.514922618865967

Token 84: ' tant' (ID: 16235)
  Prédit: ' but'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' but' → logprob: -0.32994651794433594
    2. '#' → logprob: -1.829946517944336
    3. 'but' → logprob: -2.704946517944336
    4. 'max' → logprob: -3.579946517944336
    5. 'length' → logprob: -5.454946517944336
    6. ' #' → logprob: -5.704946517944336
    7. ' max' → logprob: -5.829946517944336
    8. 'min' → logprob: -5.954946517944336
    9. 'side' → logprob: -6.204946517944336
    10. 'size' → logprob: -6.829946517944336

Token 85: ' pis' (ID: 19525)
  Prédit: 'p'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'p' → logprob: -1.1388227939605713
    2. 'qu' → logprob: -1.1388227939605713
    3. 'que' → logprob: -1.7638227939605713
    4. 'm' → logprob: -2.3888227939605713
    5. 'pis' → logprob: -2.5138227939605713
    6. 'ôt' → logprob: -4.888822555541992
    7. ' mieux' → logprob: -6.013822555541992
    8. '#' → logprob: -6.638822555541992
    9. ' qu' → logprob: -7.263822555541992
    10. 'pour' → logprob: -7.263822555541992

Token 86: '

' (ID: 279)
  Prédit: '#'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '#' → logprob: -1.78797447681427
    2. '
' → logprob: -1.91297447681427
    3. 'length' → logprob: -1.91297447681427
    4. 'max' → logprob: -2.6629743576049805
    5. '<|end|>' → logprob: -2.9129743576049805
    6. '*' → logprob: -3.0379743576049805
    7. '.' → logprob: -3.2879743576049805
    8. 'x' → logprob: -3.5379743576049805
    9. 's' → logprob: -3.5379743576049805
    10. ')' → logprob: -3.6629743576049805

Token 87: 'answer' (ID: 17021)
  Prédit: 'for'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'for' → logprob: -1.8975721597671509
    2. 'tiles' → logprob: -2.6475720405578613
    3. 'radius' → logprob: -2.7725720405578613
    4. 'if' → logprob: -2.8975720405578613
    5. 'square' → logprob: -2.8975720405578613
    6. '#' → logprob: -3.0225720405578613
    7. 'block' → logprob: -3.3975720405578613
    8. 'print' → logprob: -3.3975720405578613
    9. 'tile' → logprob: -3.3975720405578613
    10. 'circle' → logprob: -3.6475720405578613

Token 88: ' =' (ID: 314)
  Prédit: ' ='
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' =' → logprob: -0.019021928310394287
    2. '=' → logprob: -4.019021987915039
    3. 's' → logprob: -7.144021987915039
    4. '_' → logprob: -9.769021987915039
    5. ' ' → logprob: -12.144021987915039
    6. '_length' → logprob: -12.269021987915039
    7. 'es' → logprob: -13.144021987915039
    8. ',' → logprob: -13.394021987915039
    9. ' ' → logprob: -13.519021987915039
    10. 'length' → logprob: -13.894021987915039

Token 89: ' math' (ID: 13324)
  Prédit: 'math'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'math' → logprob: -1.1587979793548584
    2. 'length' → logprob: -1.4087979793548584
    3. '0' → logprob: -1.7837979793548584
    4. ' math' → logprob: -2.0337979793548584
    5. ' length' → logprob: -2.5337979793548584
    6. ' ' → logprob: -3.9087979793548584
    7. 'float' → logprob: -4.5337982177734375
    8. ' float' → logprob: -5.2837982177734375
    9. 'max' → logprob: -5.2837982177734375
    10. 'int' → logprob: -5.5337982177734375

Token 90: '.ceil' (ID: 60295)
  Prédit: '.sqrt'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '.sqrt' → logprob: -0.16806410253047943
    2. '.ceil' → logprob: -1.9180641174316406
    3. '.max' → logprob: -5.543064117431641
    4. '.' → logprob: -6.793064117431641
    5. '.pow' → logprob: -6.793064117431641
    6. '.floor' → logprob: -7.418064117431641
    7. '.pi' → logprob: -7.543064117431641
    8. '.s' → logprob: -8.91806411743164
    9. '.log' → logprob: -9.29306411743164
    10. '.prod' → logprob: -9.41806411743164

Token 91: '(N' (ID: 10564)
  Prédit: '(length'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(length' → logprob: -0.020038645714521408
    2. '(math' → logprob: -4.270038604736328
    3. '(' → logprob: -5.770038604736328
    4. '((' → logprob: -6.145038604736328
    5. '(N' → logprob: -8.020038604736328
    6. '(len' → logprob: -9.020038604736328
    7. 'length' → logprob: -9.895038604736328
    8. '(s' → logprob: -10.895038604736328
    9. '(l' → logprob: -11.520038604736328
    10. '(H' → logprob: -11.520038604736328

Token 92: ' /' (ID: 820)
  Prédit: ' /'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' /' → logprob: -0.11326222866773605
    2. '/' → logprob: -2.238262176513672
    3. '**' → logprob: -8.613262176513672
    4. '/math' → logprob: -8.988262176513672
    5. ' **' → logprob: -9.988262176513672
    6. '/(' → logprob: -10.613262176513672
    7. ')' → logprob: -10.988262176513672
    8. ' ' → logprob: -11.488262176513672
    9. '/log' → logprob: -11.613262176513672
    10. '*' → logprob: -11.738262176513672

Token 93: ' float' (ID: 4428)
  Prédit: 'length'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'length' → logprob: -0.6527031660079956
    2. ' length' → logprob: -0.7777031660079956
    3. '(length' → logprob: -4.277703285217285
    4. ' (' → logprob: -5.152703285217285
    5. '(' → logprob: -8.902703285217285
    6. ' ' → logprob: -11.152703285217285
    7. ' lenght' → logprob: -11.152703285217285
    8. 'leng' → logprob: -11.527703285217285
    9. '((' → logprob: -12.152703285217285
    10. '	length' → logprob: -12.277703285217285

Token 94: '(length' (ID: 47037)
  Prédit: '(length'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(length' → logprob: -0.04979611560702324
    2. 'length' → logprob: -3.0497961044311523
    3. '(' → logprob: -7.424796104431152
    4. ' length' → logprob: -8.299796104431152
    5. ')' → logprob: -8.299796104431152
    6. ' (' → logprob: -9.174796104431152
    7. '(H' → logprob: -12.674796104431152
    8. '(len' → logprob: -13.299796104431152
    9. ')(' → logprob: -13.799796104431152
    10. '(max' → logprob: -13.924796104431152

Token 95: '))' (ID: 915)
  Prédit: '))'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '))' → logprob: -0.006041369866579771
    2. ')' → logprob: -5.131041526794434
    3. ')))' → logprob: -9.506041526794434
    4. '))
' → logprob: -10.881041526794434
    5. ' ))' → logprob: -11.131041526794434
    6. '*' → logprob: -13.881041526794434
    7. '))

' → logprob: -14.131041526794434
    8. ' )' → logprob: -14.631041526794434
    9. ')
' → logprob: -14.881041526794434
    10. '),' → logprob: -15.131041526794434

Token 96: ' ' (ID: 220)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')' → logprob: -0.5604070425033569
    2. '<|end|>' → logprob: -0.9354070425033569
    3. '*' → logprob: -4.1854071617126465
    4. ' ' → logprob: -4.1854071617126465
    5. '<|end|>' → logprob: -6.6854071617126465
    6. '+' → logprob: -6.9354071617126465
    7. ' )' → logprob: -6.9354071617126465
    8. ' 
' → logprob: -7.4354071617126465
    9. '(' → logprob: -8.060406684875488
    10. '#' → logprob: -8.185406684875488

Token 97: ' #' (ID: 1069)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ')' → logprob: -0.41655433177948
    2. '*' → logprob: -1.66655433177948
    3. 'length' → logprob: -2.5415544509887695
    4. ' ' → logprob: -3.4165544509887695
    5. '<|end|>' → logprob: -4.2915544509887695
    6. ' *' → logprob: -4.6665544509887695
    7. ' length' → logprob: -5.5415544509887695
    8. ' )' → logprob: -6.2915544509887695
    9. '(length' → logprob: -6.2915544509887695
    10. ' 
' → logprob: -6.5415544509887695

Token 98: ' on' (ID: 402)
  Prédit: 'length'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'length' → logprob: -0.12736763060092926
    2. 'answer' → logprob: -2.3773677349090576
    3. ' length' → logprob: -3.7523677349090576
    4. ' answer' → logprob: -5.8773674964904785
    5. 'max' → logprob: -8.877367973327637
    6. '(length' → logprob: -9.502367973327637
    7. ' ' → logprob: -9.752367973327637
    8. 'min' → logprob: -10.127367973327637
    9. '1' → logprob: -10.502367973327637
    10. '(answer' → logprob: -10.502367973327637

Token 99: ' div' (ID: 4223)
  Prédit: ' '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' ' → logprob: -1.1380068063735962
    2. '<|end|>' → logprob: -1.8880068063735962
    3. ')' → logprob: -2.3880066871643066
    4. '<|end|>' → logprob: -3.0130066871643066
    5. ' print' → logprob: -3.1380066871643066
    6. 'print' → logprob: -3.5130066871643066
    7. ' answer' → logprob: -3.6380066871643066
    8. ' continue' → logprob: -3.8880066871643066
    9. ' n' → logprob: -3.8880066871643066
    10. 'n' → logprob: -3.8880066871643066

Token 100: 'ise' (ID: 1096)
  Prédit: 'ise'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'ise' → logprob: -0.2585945427417755
    2. 'ide' → logprob: -1.5085945129394531
    3. 'iser' → logprob: -6.133594512939453
    4. 'er' → logprob: -6.383594512939453
    5. 'e' → logprob: -7.008594512939453
    6. 'id' → logprob: -7.508594512939453
    7. 'ider' → logprob: -8.508594512939453
    8. '#' → logprob: -9.633594512939453
    9. 'ize' → logprob: -9.633594512939453
    10. '_' → logprob: -9.633594512939453

Token 101: ',' (ID: 11)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '(' → logprob: -1.3464980125427246
    2. '(length' → logprob: -1.5964980125427246
    3. 'length' → logprob: -1.7214980125427246
    4. 'answer' → logprob: -1.7214980125427246
    5. '(answer' → logprob: -2.3464980125427246
    6. ')' → logprob: -2.5964980125427246
    7. '(H' → logprob: -6.221498012542725
    8. ' answer' → logprob: -6.346498012542725
    9. ' (' → logprob: -6.721498012542725
    10. '(max' → logprob: -7.096498012542725

Token 102: ' normalement' (ID: 164432)
  Prédit: ' answer'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' answer' → logprob: -0.970745325088501
    2. 'answer' → logprob: -1.345745325088501
    3. 'length' → logprob: -1.720745325088501
    4. ' length' → logprob: -2.220745325088501
    5. ' puis' → logprob: -3.345745325088501
    6. ' mais' → logprob: -4.720745086669922
    7. ' math' → logprob: -4.970745086669922
    8. ' then' → logprob: -5.470745086669922
    9. 'max' → logprob: -5.845745086669922
    10. ' ' → logprob: -5.845745086669922

Token 103: ' ça' (ID: 13590)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ')' → logprob: -0.49907174706459045
    2. '*' → logprob: -1.999071717262268
    3. ' ' → logprob: -2.1240718364715576
    4. 'print' → logprob: -2.8740718364715576
    5. '\n' → logprob: -3.1240718364715576
    6. '+' → logprob: -4.6240715980529785
    7. '<|end|>' → logprob: -5.1240715980529785
    8. '
' → logprob: -5.6240715980529785
    9. ' )' → logprob: -5.6240715980529785
    10. ' 
' → logprob: -5.7490715980529785

Token 104: ' donne' (ID: 30004)
  Prédit: 'fonction'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'fonction' → logprob: -1.6343175172805786
    2. ' marche' → logprob: -1.7593175172805786
    3. 's' → logprob: -2.009317398071289
    4. ' s' → logprob: -2.259317398071289
    5. ' fonctionne' → logprob: -2.384317398071289
    6. ' donne' → logprob: -2.884317398071289
    7. 'don' → logprob: -3.134317398071289
    8. ' doit' → logprob: -3.759317398071289
    9. ' suffit' → logprob: -3.759317398071289
    10. ' devrait' → logprob: -4.134317398071289

Token 105: ' ce' (ID: 2357)
  Prédit: 'length'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'length' → logprob: -0.7437800168991089
    2. 'le' → logprob: -1.4937800168991089
    3. ' le' → logprob: -2.2437801361083984
    4. 'answer' → logprob: -3.6187801361083984
    5. '1' → logprob: -3.7437801361083984
    6. '2' → logprob: -3.8687801361083984
    7. 'N' → logprob: -3.9937801361083984
    8. ' length' → logprob: -4.118780136108398
    9. ' la' → logprob: -4.243780136108398
    10. ' answer' → logprob: -4.368780136108398

Token 106: ' qu' (ID: 474)
  Prédit: ' qui'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' qui' → logprob: -0.7582034468650818
    2. ' que' → logprob: -1.5082035064697266
    3. ' qu' → logprob: -2.0082035064697266
    4. 'qui' → logprob: -2.8832035064697266
    5. 'ci' → logprob: -3.7582035064697266
    6. ' nombre' → logprob: -3.8832035064697266
    7. ' code' → logprob: -4.133203506469727
    8. 'nombre' → logprob: -4.758203506469727
    9. 'qu' → logprob: -5.383203506469727
    10. 'int' → logprob: -5.508203506469727

Token 107: ''il' (ID: 14683)
  Prédit: ''il'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ''il' → logprob: -0.14217373728752136
    2. 'il' → logprob: -3.2671737670898438
    3. ''on' → logprob: -3.2671737670898438
    4. ''' → logprob: -3.7671737670898438
    5. ' '' → logprob: -4.892173767089844
    6. ''est' → logprob: -4.892173767089844
    7. 'e' → logprob: -5.142173767089844
    8. ' faut' → logprob: -6.892173767089844
    9. ' il' → logprob: -7.017173767089844
    10. ' on' → logprob: -7.017173767089844

Token 108: ' faut' (ID: 17821)
  Prédit: 'don'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'don' → logprob: -0.4479539692401886
    2. 'man' → logprob: -2.447953939437866
    3. 'f' → logprob: -2.822953939437866
    4. 'fait' → logprob: -3.197953939437866
    5. 'do' → logprob: -3.697953939437866
    6. 'voud' → logprob: -3.822953939437866
    7. ' donne' → logprob: -4.072954177856445
    8. 've' → logprob: -4.322954177856445
    9. ' veut' → logprob: -4.322954177856445
    10. 'veux' → logprob: -4.572954177856445

Token 109: '

' (ID: 279)
  Prédit: 'print'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'print' → logprob: -0.38999536633491516
    2. ')' → logprob: -1.5149953365325928
    3. '\n' → logprob: -3.0149953365325928
    4. '<|end|>' → logprob: -3.8899953365325928
    5. '*' → logprob: -4.139995574951172
    6. '
' → logprob: -4.639995574951172
    7. '#' → logprob: -6.639995574951172
    8. ' print' → logprob: -6.639995574951172
    9. ' ' → logprob: -6.764995574951172
    10. '```' → logprob: -6.889995574951172

Token 110: 'print' (ID: 1598)
  Prédit: 'print'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'print' → logprob: -0.39417392015457153
    2. ')' → logprob: -1.3941738605499268
    3. '\n' → logprob: -3.0191738605499268
    4. '*' → logprob: -4.519174098968506
    5. 'length' → logprob: -5.644174098968506
    6. '
' → logprob: -5.894174098968506
    7. ' ' → logprob: -5.894174098968506
    8. 'answer' → logprob: -6.144174098968506
    9. '#' → logprob: -6.644174098968506
    10. '+' → logprob: -6.769174098968506

Token 111: '(int' (ID: 2742)
  Prédit: '(answer'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '(answer' → logprob: -0.3132782578468323
    2. '(' → logprob: -1.3132781982421875
    3. '()' → logprob: -12.313278198242188
    4. '('' → logprob: -12.813278198242188
    5. '(ans' → logprob: -12.813278198242188
    6. '(length' → logprob: -13.438278198242188
    7. '(len' → logprob: -13.813278198242188
    8. ' (' → logprob: -14.313278198242188
    9. '("("' → logprob: -14.688278198242188
    10. '(
' → logprob: -14.938278198242188

Token 112: '(answer' (ID: 78433)
  Prédit: '(answer'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(answer' → logprob: -0.00017588881019037217
    2. '(' → logprob: -9.250175476074219
    3. 'answer' → logprob: -9.875175476074219
    4. ')' → logprob: -10.625175476074219
    5. ' (' → logprob: -13.625175476074219
    6. ')(' → logprob: -14.000175476074219
    7. '	answer' → logprob: -14.625175476074219
    8. '(round' → logprob: -15.375175476074219
    9. '(ans' → logprob: -15.750175476074219
    10. '())' → logprob: -15.875175476074219

Token 113: '))' (ID: 915)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')' → logprob: -0.008619658648967743
    2. '))' → logprob: -4.758619785308838
    3. ')))' → logprob: -12.38361930847168
    4. ' )' → logprob: -14.88361930847168
    5. ')`' → logprob: -15.00861930847168
    6. ')}' → logprob: -16.13361930847168
    7. '())' → logprob: -16.50861930847168
    8. ')")' → logprob: -17.13361930847168
    9. ')
' → logprob: -17.25861930847168
    10. '()' → logprob: -17.75861930847168

Token 114: ' #' (ID: 1069)
  Prédit: ''
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False

Token 115: ' juste' (ID: 31553)
  Prédit: ''
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False

Token 116: ' au' (ID: 2791)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ')' → logprob: -0.6278278827667236
    2. '<|end|>' → logprob: -0.8778278827667236
    3. '
' → logprob: -4.1278276443481445
    4. '*' → logprob: -4.3778276443481445
    5. '#' → logprob: -5.2528276443481445
    6. '```' → logprob: -5.3778276443481445
    7. ' ' → logprob: -5.6278276443481445
    8. '<|end|>' → logprob: -6.0028276443481445
    9. '+' → logprob: -6.2528276443481445
    10. '\n' → logprob: -7.2528276443481445

Token 117: ' cas' (ID: 2108)
  Prédit: 'cas'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'cas' → logprob: -0.08284543454647064
    2. ' cas' → logprob: -2.707845449447632
    3. 'case' → logprob: -4.832845211029053
    4. 'final' → logprob: -6.082845211029053
    5. 'c' → logprob: -7.832845211029053
    6. 'coin' → logprob: -7.957845211029053
    7. 'pas' → logprob: -8.207845687866211
    8. '   ' → logprob: -8.207845687866211
    9. ' final' → logprob: -8.957845687866211
    10. '  ' → logprob: -9.082845687866211

Token 118: ' où' (ID: 15113)
  Prédit: ''
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False

Token 119: ',' (ID: 11)
  Prédit: ''
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False

Token 120: ' on' (ID: 402)
  Prédit: ''
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False

Token 121: ' imprime' (ID: 195564)
  Prédit: 'print'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'print' → logprob: -1.3896656036376953
    2. ' veut' → logprob: -1.5146656036376953
    3. ' print' → logprob: -1.5146656036376953
    4. ' continue' → logprob: -2.2646656036376953
    5. ' souhaite' → logprob: -3.3896656036376953
    6. '#' → logprob: -4.139665603637695
    7. 'continue' → logprob: -4.514665603637695
    8. ' ' → logprob: -4.514665603637695
    9. ' préfère' → logprob: -4.514665603637695
    10. ' imprime' → logprob: -4.514665603637695

Token 122: ' bien' (ID: 5340)
  Prédit: ''
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False

Token 123: ' un' (ID: 537)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ')' → logprob: -0.5992473363876343
    2. '<|end|>' → logprob: -0.8492473363876343
    3. '\n' → logprob: -5.224247455596924
    4. '#' → logprob: -5.599247455596924
    5. '```' → logprob: -5.599247455596924
    6. ' ' → logprob: -6.099247455596924
    7. '*' → logprob: -6.599247455596924
    8. '
' → logprob: -6.974247455596924
    9. '<|end|>' → logprob: -6.974247455596924
    10. '+' → logprob: -7.474247455596924

Token 124: ' entier' (ID: 80473)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ')' → logprob: -0.5340648889541626
    2. '```' → logprob: -1.6590648889541626
    3. '<|end|>' → logprob: -2.284064769744873
    4. '\n' → logprob: -2.784064769744873
    5. ' ' → logprob: -3.909064769744873
    6. '#' → logprob: -4.659064769744873
    7. '\' → logprob: -5.159064769744873
    8. '`' → logprob: -5.534064769744873
    9. '<|end|>' → logprob: -5.534064769744873
    10. 'newline' → logprob: -5.784064769744873


RÉSUMÉ:
--------------------------------------------------------------------------------
Total des tokens analysés: 122
Tokens correctement prédits (1ère position, stricte): 29
Tokens correctement prédits (1ère position, avec adaptation): 29
Tokens correctement prédits (top 10): 65
Précision stricte (1ère position): 23.77%
Précision adaptée (1ère position): 23.77%
Précision (top 10): 53.28%
================================================================================
