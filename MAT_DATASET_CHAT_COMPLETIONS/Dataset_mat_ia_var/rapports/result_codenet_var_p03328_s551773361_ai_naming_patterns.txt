================================================================================
ANALYSE DE PRÉDICTION TOKEN PAR TOKEN (BATCH API)
Date: 2025-06-04 20:16:26
Modèle de tokenisation: gpt-4o-mini
================================================================================

SCRIPT ANALYSÉ:
--------------------------------------------------------------------------------
input_value_start, input_value_end = map(int, input().split())

value_difference = input_value_end - input_value_start
for iteration_index in range(1000):
    if value_difference == iteration_index + 1:
        result_output = iteration_index * (iteration_index + 1) // 2 - input_value_start
        print(result_output)
--------------------------------------------------------------------------------

RÉSULTATS D'ANALYSE TOKEN PAR TOKEN:
--------------------------------------------------------------------------------
Token 0: 'input' (ID: 2586)
  → Token d'amorce (pas de prédiction)

Token 1: '_value' (ID: 6734)
  → Token d'amorce (pas de prédiction)

Token 2: '_start' (ID: 10949)
  → Token d'amorce (pas de prédiction)

Token 3: ',' (ID: 11)
  Prédit: '='
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '=' → logprob: -0.5364730358123779
    2. '_' → logprob: -1.786473035812378
    3. ':' → logprob: -2.411473035812378
    4. '(' → logprob: -2.536473035812378
    5. '[' → logprob: -4.036473274230957
    6. ')' → logprob: -4.286473274230957
    7. '+' → logprob: -4.786473274230957
    8. '.' → logprob: -4.786473274230957
    9. '"' → logprob: -5.411473274230957
    10. ',' → logprob: -5.536473274230957

Token 4: ' input' (ID: 3422)
  Prédit: 'input'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'input' → logprob: -0.5695750713348389
    2. '_' → logprob: -1.4445750713348389
    3. '=' → logprob: -2.819575071334839
    4. ' ' → logprob: -3.194575071334839
    5. ' input' → logprob: -3.944575071334839
    6. '```' → logprob: -3.944575071334839
    7. '_input' → logprob: -4.444575309753418
    8. ' =' → logprob: -5.194575309753418
    9. ',' → logprob: -5.194575309753418
    10. ' _' → logprob: -5.319575309753418

Token 5: '_value' (ID: 6734)
  Prédit: '_'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_' → logprob: -0.05773516371846199
    2. '_value' → logprob: -2.9327352046966553
    3. '.' → logprob: -6.932734966278076
    4. ')' → logprob: -7.932734966278076
    5. '[' → logprob: -8.057735443115234
    6. '=' → logprob: -8.307735443115234
    7. '```' → logprob: -8.932735443115234
    8. '._' → logprob: -9.307735443115234
    9. '_val' → logprob: -9.432735443115234
    10. '_=' → logprob: -9.682735443115234

Token 6: '_end' (ID: 13707)
  Prédit: '_'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '_' → logprob: -0.21857699751853943
    2. '=' → logprob: -1.9685770273208618
    3. ')' → logprob: -4.218576908111572
    4. '[' → logprob: -4.343576908111572
    5. ',' → logprob: -4.343576908111572
    6. '+' → logprob: -5.593576908111572
    7. '.' → logprob: -5.718576908111572
    8. '```' → logprob: -5.718576908111572
    9. ' =' → logprob: -6.593576908111572
    10. ':' → logprob: -6.843576908111572

Token 7: ' =' (ID: 314)
  Prédit: '_'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '_' → logprob: -0.11073555052280426
    2. ',' → logprob: -2.8607356548309326
    3. '=' → logprob: -4.1107354164123535
    4. ')' → logprob: -4.6107354164123535
    5. '[' → logprob: -4.7357354164123535
    6. '```' → logprob: -5.2357354164123535
    7. ':' → logprob: -6.3607354164123535
    8. ']' → logprob: -6.7357354164123535
    9. '+' → logprob: -6.8607354164123535
    10. '.' → logprob: -6.9857354164123535

Token 8: ' map' (ID: 4014)
  Prédit: ' input'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' input' → logprob: -1.0604606866836548
    2. ' ' → logprob: -1.4354606866836548
    3. ' None' → logprob: -1.4354606866836548
    4. 'input' → logprob: -2.3104605674743652
    5. '0' → logprob: -3.4354605674743652
    6. ' map' → logprob: -3.5604605674743652
    7. 'None' → logprob: -4.685460567474365
    8. 'map' → logprob: -6.060460567474365
    9. ' int' → logprob: -6.685460567474365
    10. ' []' → logprob: -6.685460567474365

Token 9: '(int' (ID: 2742)
  Prédit: ''
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False

Token 10: ',' (ID: 11)
  Prédit: '(input'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '(input' → logprob: -0.009861035272479057
    2. 'input' → logprob: -5.009860992431641
    3. ')' → logprob: -6.134860992431641
    4. '(' → logprob: -7.509860992431641
    5. ' input' → logprob: -8.75986099243164
    6. '(user' → logprob: -9.50986099243164
    7. ',input' → logprob: -9.63486099243164
    8. '('' → logprob: -10.75986099243164
    9. '[input' → logprob: -11.13486099243164
    10. '```' → logprob: -11.25986099243164

Token 11: ' input' (ID: 3422)
  Prédit: 'input'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'input' → logprob: -0.026390748098492622
    2. ' input' → logprob: -3.651390790939331
    3. '(input' → logprob: -9.65139102935791
    4. ')' → logprob: -10.65139102935791
    5. ',input' → logprob: -14.27639102935791
    6. '<input' → logprob: -14.65139102935791
    7. 'user' → logprob: -14.90139102935791
    8. '=input' → logprob: -15.40139102935791
    9. '[input' → logprob: -15.77639102935791
    10. '```' → logprob: -15.90139102935791

Token 12: '().' (ID: 1454)
  Prédit: '())'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '())' → logprob: -0.7607694268226624
    2. '()' → logprob: -0.8857694268226624
    3. '().' → logprob: -2.5107693672180176
    4. '(' → logprob: -3.8857693672180176
    5. ')' → logprob: -4.385769367218018
    6. '('' → logprob: -6.510769367218018
    7. '`()' → logprob: -6.885769367218018
    8. ' ())' → logprob: -7.135769367218018
    9. '(()' → logprob: -8.135769844055176
    10. '()['' → logprob: -8.385769844055176

Token 13: 'split' (ID: 13627)
  Prédit: 'split'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'split' → logprob: -0.000712670327629894
    2. 'strip' → logprob: -7.250712871551514
    3. 'rstrip' → logprob: -13.375712394714355
    4. ' split' → logprob: -14.000712394714355
    5. '(split' → logprob: -15.750712394714355
    6. 'startswith' → logprob: -16.000713348388672
    7. 'spl' → logprob: -16.125713348388672
    8. 'replace' → logprob: -17.750713348388672
    9. '```' → logprob: -18.000713348388672
    10. ')' → logprob: -19.875713348388672

Token 14: '())

' (ID: 27654)
  Prédit: '())'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '())' → logprob: -0.014545761048793793
    2. ')' → logprob: -5.014545917510986
    3. '()' → logprob: -5.514545917510986
    4. '()))' → logprob: -6.139545917510986
    5. '(' → logprob: -7.389545917510986
    6. '))' → logprob: -7.639545917510986
    7. '('' → logprob: -7.889545917510986
    8. ' ())' → logprob: -9.514545440673828
    9. '(()' → logprob: -11.389545440673828
    10. '()),' → logprob: -12.014545440673828

Token 15: 'value' (ID: 1594)
  Prédit: '#'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '#' → logprob: -0.9878334403038025
    2. '+' → logprob: -1.9878334999084473
    3. '\n' → logprob: -1.9878334999084473
    4. ':' → logprob: -2.6128334999084473
    5. 'if' → logprob: -2.6128334999084473
    6. '```' → logprob: -3.2378334999084473
    7. ',' → logprob: -3.7378334999084473
    8. '.' → logprob: -3.8628334999084473
    9. '
' → logprob: -3.8628334999084473
    10. ')' → logprob: -3.9878334999084473

Token 16: '_difference' (ID: 123771)
  Prédit: '_'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '_' → logprob: -0.5507083535194397
    2. '[' → logprob: -0.9257083535194397
    3. ')' → logprob: -4.175708293914795
    4. 's' → logprob: -5.425708293914795
    5. '(' → logprob: -6.675708293914795
    6. '[:]' → logprob: -7.300708293914795
    7. '_space' → logprob: -7.300708293914795
    8. '[s' → logprob: -7.550708293914795
    9. '_s' → logprob: -7.925708293914795
    10. '_value' → logprob: -8.050708770751953

Token 17: ' =' (ID: 314)
  Prédit: ' ='
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' =' → logprob: -0.1062111184000969
    2. '_' → logprob: -3.3562111854553223
    3. '<|end|>' → logprob: -3.3562111854553223
    4. '=' → logprob: -3.9812111854553223
    5. ')' → logprob: -5.356211185455322
    6. ' ' → logprob: -5.481211185455322
    7. ' _' → logprob: -6.731211185455322
    8. ' +=' → logprob: -7.356211185455322
    9. '  ' → logprob: -8.106210708618164
    10. '_space' → logprob: -8.606210708618164

Token 18: ' input' (ID: 3422)
  Prédit: ' input'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' input' → logprob: -0.4742479622364044
    2. 'input' → logprob: -0.974247932434082
    3. ' abs' → logprob: -9.224247932434082
    4. 'abs' → logprob: -9.724247932434082
    5. ' value' → logprob: -12.474247932434082
    6. 'value' → logprob: -12.724247932434082
    7. ' ' → logprob: -13.099247932434082
    8. '(input' → logprob: -13.099247932434082
    9. 'int' → logprob: -14.474247932434082
    10. ' int' → logprob: -15.849247932434082

Token 19: '_value' (ID: 6734)
  Prédit: '_value'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_value' → logprob: -0.00023476807109545916
    2. '_' → logprob: -9.375234603881836
    3. '_val' → logprob: -10.125234603881836
    4. ')_' → logprob: -10.250234603881836
    5. '_token' → logprob: -10.875234603881836
    6. '```' → logprob: -11.125234603881836
    7. ''_' → logprob: -11.875234603881836
    8. '()' → logprob: -12.125234603881836
    9. '"_' → logprob: -12.125234603881836
    10. '('_' → logprob: -12.625234603881836

Token 20: '_end' (ID: 13707)
  Prédit: '_end'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_end' → logprob: -0.005810294300317764
    2. '_start' → logprob: -5.380810260772705
    3. '_' → logprob: -6.755810260772705
    4. '_difference' → logprob: -11.630810737609863
    5. '_END' → logprob: -11.880810737609863
    6. ' _' → logprob: -13.255810737609863
    7. '```' → logprob: -13.630810737609863
    8. '_diff' → logprob: -13.630810737609863
    9. '_value' → logprob: -14.505810737609863
    10. '_finish' → logprob: -14.505810737609863

Token 21: ' -' (ID: 533)
  Prédit: ' -'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' -' → logprob: -0.06200006976723671
    2. '-' → logprob: -2.812000036239624
    3. ')' → logprob: -11.437000274658203
    4. ' ' → logprob: -11.562000274658203
    5. '[' → logprob: -12.437000274658203
    6. '<|end|>' → logprob: -12.812000274658203
    7. ' -=' → logprob: -14.062000274658203
    8. '"' → logprob: -14.437000274658203
    9. '>' → logprob: -14.562000274658203
    10. '  ' → logprob: -14.812000274658203

Token 22: ' input' (ID: 3422)
  Prédit: 'input'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'input' → logprob: -0.06197104603052139
    2. ' input' → logprob: -2.8119709491729736
    3. 'value' → logprob: -13.561970710754395
    4. '_input' → logprob: -14.686970710754395
    5. ' ' → logprob: -14.936970710754395
    6. '=input' → logprob: -14.936970710754395
    7. '<input' → logprob: -15.186970710754395
    8. '1' → logprob: -16.06197166442871
    9. '	input' → logprob: -16.06197166442871
    10. 'int' → logprob: -16.31197166442871

Token 23: '_value' (ID: 6734)
  Prédit: '_value'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_value' → logprob: -0.0009810051415115595
    2. '_' → logprob: -7.750980854034424
    3. '._' → logprob: -8.625981330871582
    4. ')_' → logprob: -9.625981330871582
    5. '_val' → logprob: -10.000981330871582
    6. 'value' → logprob: -10.125981330871582
    7. 'Value' → logprob: -10.125981330871582
    8. '_Value' → logprob: -10.250981330871582
    9. '_VALUE' → logprob: -10.500981330871582
    10. '```' → logprob: -10.750981330871582

Token 24: '_start' (ID: 10949)
  Prédit: '_start'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_start' → logprob: -0.0002930366899818182
    2. 'start' → logprob: -8.625292778015137
    3. '_value' → logprob: -9.250292778015137
    4. '_' → logprob: -11.125292778015137
    5. '_START' → logprob: -14.000292778015137
    6. '_end' → logprob: -14.250292778015137
    7. 'Start' → logprob: -14.750292778015137
    8. '_difference' → logprob: -16.250293731689453
    9. '_Start' → logprob: -16.375293731689453
    10. 'value' → logprob: -16.500293731689453

Token 25: '
' (ID: 198)
  Prédit: 'if'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'if' → logprob: -0.9611749649047852
    2. ' if' → logprob: -1.2111749649047852
    3. 'print' → logprob: -1.3361749649047852
    4. '
' → logprob: -3.211174964904785
    5. ' ' → logprob: -5.336174964904785
    6. '<|end|>' → logprob: -5.586174964904785
    7. '+' → logprob: -6.336174964904785
    8. '>' → logprob: -6.961174964904785
    9. ')' → logprob: -6.961174964904785
    10. ' print' → logprob: -7.211174964904785

Token 26: 'for' (ID: 1938)
  Prédit: 'if'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'if' → logprob: -1.4022173881530762
    2. 'print' → logprob: -1.5272173881530762
    3. '<|end|>' → logprob: -1.6522173881530762
    4. ' if' → logprob: -1.7772173881530762
    5. '
' → logprob: -2.152217388153076
    6. ')' → logprob: -4.777217388153076
    7. '\n' → logprob: -4.777217388153076
    8. ' ' → logprob: -4.777217388153076
    9. '*' → logprob: -4.902217388153076
    10. '+' → logprob: -5.152217388153076

Token 27: ' iteration' (ID: 43155)
  Prédit: ' i'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' i' → logprob: -0.2531214952468872
    2. ' ' → logprob: -1.8781214952468872
    3. ' _' → logprob: -2.7531213760375977
    4. '_' → logprob: -5.128121376037598
    5. ' value' → logprob: -7.628121376037598
    6. ' input' → logprob: -7.878121376037598
    7. ' range' → logprob: -9.378121376037598
    8. '  ' → logprob: -9.628121376037598
    9. 'i' → logprob: -10.003121376037598
    10. ' variable' → logprob: -12.128121376037598

Token 28: '_index' (ID: 7748)
  Prédit: ' in'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' in' → logprob: -0.07909401506185532
    2. 'in' → logprob: -2.7040939331054688
    3. ' ' → logprob: -4.829093933105469
    4. '_' → logprob: -7.329093933105469
    5. '  ' → logprob: -9.079093933105469
    6. '_in' → logprob: -9.454093933105469
    7. ' :' → logprob: -9.954093933105469
    8. ',' → logprob: -10.204093933105469
    9. ':' → logprob: -10.704093933105469
    10. ' i' → logprob: -10.829093933105469

Token 29: ' in' (ID: 306)
  Prédit: ' in'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' in' → logprob: -0.004926685243844986
    2. 'in' → logprob: -5.379926681518555
    3. ' ' → logprob: -8.129926681518555
    4. ',' → logprob: -12.754926681518555
    5. '	in' → logprob: -13.254926681518555
    6. ' ,' → logprob: -13.504926681518555
    7. '  ' → logprob: -13.754926681518555
    8. '```' → logprob: -14.004926681518555
    9. '0' → logprob: -14.754926681518555
    10. '_' → logprob: -14.942426681518555

Token 30: ' range' (ID: 3352)
  Prédit: ' range'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' range' → logprob: -0.08894525468349457
    2. 'range' → logprob: -2.463945150375366
    3. '	range' → logprob: -12.713945388793945
    4. ' ' → logprob: -13.213945388793945
    5. '(range' → logprob: -14.963945388793945
    6. ' xrange' → logprob: -16.213945388793945
    7. '```' → logprob: -16.213945388793945
    8. '_range' → logprob: -16.588945388793945
    9. '  ' → logprob: -16.713945388793945
    10. '.range' → logprob: -17.088945388793945

Token 31: '(' (ID: 7)
  Prédit: '('
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(' → logprob: -0.06533180177211761
    2. '(value' → logprob: -2.8153316974639893
    3. '(len' → logprob: -6.315331935882568
    4. '(input' → logprob: -6.565331935882568
    5. ' (' → logprob: -9.06533145904541
    6. '(length' → logprob: -11.81533145904541
    7. '(int' → logprob: -12.44033145904541
    8. '(
' → logprob: -12.69033145904541
    9. '(n' → logprob: -12.81533145904541
    10. '(in' → logprob: -13.81533145904541

Token 32: '100' (ID: 1353)
  Prédit: 'value'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'value' → logprob: -0.09469810128211975
    2. 'input' → logprob: -2.719698190689087
    3. ' value' → logprob: -3.844698190689087
    4. ' input' → logprob: -6.594697952270508
    5. '1' → logprob: -6.719697952270508
    6. 'abs' → logprob: -8.344697952270508
    7. '(value' → logprob: -9.969697952270508
    8. '   ' → logprob: -10.344697952270508
    9. 'iteration' → logprob: -10.469697952270508
    10. '0' → logprob: -10.594697952270508

Token 33: '0' (ID: 15)
  Prédit: '):'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '):' → logprob: -0.00711470190435648
    2. ' ):' → logprob: -5.257114887237549
    3. ':' → logprob: -6.757114887237549
    4. '0' → logprob: -7.757114887237549
    5. ')' → logprob: -8.88211441040039
    6. ' :' → logprob: -9.63211441040039
    7. ',' → logprob: -11.00711441040039
    8. '1' → logprob: -11.13211441040039
    9. '):
' → logprob: -11.50711441040039
    10. '6' → logprob: -11.75711441040039

Token 34: '):
' (ID: 1883)
  Prédit: '):'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '):' → logprob: -0.0004789320519194007
    2. ' ):' → logprob: -8.375478744506836
    3. ':' → logprob: -8.625478744506836
    4. '):
' → logprob: -10.375478744506836
    5. ')' → logprob: -10.750478744506836
    6. '+' → logprob: -11.500478744506836
    7. ',' → logprob: -13.125478744506836
    8. ' :' → logprob: -13.875478744506836
    9. '():' → logprob: -14.375478744506836
    10. '+:' → logprob: -14.500478744506836

Token 35: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.006172297988086939
    2. '    
' → logprob: -5.881172180175781
    3. ' if' → logprob: -6.506172180175781
    4. '    ' → logprob: -6.756172180175781
    5. '<|end|>' → logprob: -8.381172180175781
    6. ' ' → logprob: -9.381172180175781
    7. '     
' → logprob: -9.631172180175781
    8. ' 
' → logprob: -9.881172180175781
    9. ':' → logprob: -10.006172180175781
    10. '4' → logprob: -10.631172180175781

Token 36: ' if' (ID: 538)
  Prédit: ' if'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' if' → logprob: -0.6875855326652527
    2. '   ' → logprob: -1.3125855922698975
    3. '    ' → logprob: -2.3125855922698975
    4. ' value' → logprob: -3.0625855922698975
    5. 'value' → logprob: -3.0625855922698975
    6. 'if' (adapté à ' if') → logprob: -3.6875855922698975
    7. ' input' → logprob: -5.437585353851318
    8. 'input' → logprob: -6.687585353851318
    9. 'print' → logprob: -6.812585353851318
    10. ' print' → logprob: -6.812585353851318

Token 37: ' value' (ID: 1432)
  Prédit: ' value'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' value' → logprob: -0.04235266149044037
    2. ' iteration' → logprob: -3.5423526763916016
    3. 'value' → logprob: -4.667352676391602
    4. ' input' → logprob: -6.542352676391602
    5. ' ' → logprob: -7.042352676391602
    6. 'iteration' → logprob: -7.417352676391602
    7. ' abs' → logprob: -9.167352676391602
    8. '(value' → logprob: -10.667352676391602
    9. 'input' → logprob: -10.667352676391602
    10. 'abs' → logprob: -11.167352676391602

Token 38: '_difference' (ID: 123771)
  Prédit: '_difference'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_difference' → logprob: -0.00012987985974177718
    2. '_' → logprob: -9.250129699707031
    3. '_d' → logprob: -10.625129699707031
    4. '_diff' → logprob: -12.500129699707031
    5. 'difference' → logprob: -12.875129699707031
    6. '_value' → logprob: -13.125129699707031
    7. ' _' → logprob: -15.125129699707031
    8. '_di' → logprob: -15.250129699707031
    9. '__' → logprob: -15.875129699707031
    10. ' difference' → logprob: -16.62512969970703

Token 39: ' ==' (ID: 951)
  Prédit: ' >'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' >' → logprob: -0.13674739003181458
    2. ' ==' → logprob: -3.011747360229492
    3. '>' → logprob: -3.636747360229492
    4. ' <=' → logprob: -3.636747360229492
    5. ' <' → logprob: -4.261747360229492
    6. ' >=' → logprob: -4.761747360229492
    7. '==' → logprob: -6.386747360229492
    8. ' ' → logprob: -6.886747360229492
    9. '<' → logprob: -9.011747360229492
    10. '<=' → logprob: -9.011747360229492

Token 40: ' iteration' (ID: 43155)
  Prédit: ' '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' ' → logprob: -0.12642493844032288
    2. '0' → logprob: -2.62642502784729
    3. ' iteration' → logprob: -3.50142502784729
    4. 'iteration' → logprob: -4.126424789428711
    5. '1' → logprob: -10.376424789428711
    6. ' input' → logprob: -11.251424789428711
    7. '100' → logprob: -11.313924789428711
    8. '  ' → logprob: -11.751424789428711
    9. 'input' → logprob: -11.813924789428711
    10. '_iteration' → logprob: -12.001424789428711

Token 41: '_index' (ID: 7748)
  Prédit: '_index'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_index' → logprob: -0.004808653611689806
    2. '_' → logprob: -6.00480842590332
    3. 'ation' → logprob: -6.75480842590332
    4. ' _' → logprob: -7.37980842590332
    5. '__' → logprob: -8.50480842590332
    6. '_value' → logprob: -9.50480842590332
    7. '-_' → logprob: -10.25480842590332
    8. 'er' → logprob: -10.37980842590332
    9. '   ' → logprob: -10.37980842590332
    10. '```' → logprob: -10.75480842590332

Token 42: ' +' (ID: 659)
  Prédit: ':'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ':' → logprob: -0.00020127551397308707
    2. ' :' → logprob: -8.625201225280762
    3. ':
' → logprob: -11.625201225280762
    4. '+:' → logprob: -12.625201225280762
    5. '):' → logprob: -13.000201225280762
    6. ':return' → logprob: -13.125201225280762
    7. ':**' → logprob: -13.250201225280762
    8. '   ' → logprob: -13.875201225280762
    9. '+' → logprob: -14.750201225280762
    10. ' and' → logprob: -14.875201225280762

Token 43: ' ' (ID: 220)
  Prédit: '1'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '1' → logprob: -0.08895451575517654
    2. ' ' → logprob: -2.463954448699951
    3. '+' → logprob: -12.96395492553711
    4. '2' → logprob: -13.08895492553711
    5. 'value' → logprob: -13.08895492553711
    6. '0' → logprob: -13.33895492553711
    7. ' value' → logprob: -13.58895492553711
    8. '   ' → logprob: -13.71395492553711
    9. '    ' → logprob: -14.46395492553711
    10. '100' → logprob: -14.58895492553711

Token 44: '1' (ID: 16)
  Prédit: '1'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '1' → logprob: -0.0006042646709829569
    2. ' ' → logprob: -7.500604152679443
    3. 'value' → logprob: -10.500604629516602
    4. '2' → logprob: -11.625604629516602
    5. '0' → logprob: -12.500604629516602
    6. '   ' → logprob: -13.125604629516602
    7. ' value' → logprob: -13.250604629516602
    8. 'input' → logprob: -13.500604629516602
    9. '10' → logprob: -14.438104629516602
    10. '  ' → logprob: -14.438104629516602

Token 45: ':
' (ID: 734)
  Prédit: ':'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ':' → logprob: -0.00020294437126722187
    2. ':
' → logprob: -8.750203132629395
    3. '):' → logprob: -11.125203132629395
    4. ' :' → logprob: -11.875203132629395
    5. ' and' → logprob: -12.000203132629395
    6. '   ' → logprob: -12.125203132629395
    7. ' or' → logprob: -12.625203132629395
    8. '       ' → logprob: -12.625203132629395
    9. ':return' → logprob: -13.125203132629395
    10. ',' → logprob: -14.375203132629395

Token 46: '       ' (ID: 309)
  Prédit: '       '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '       ' → logprob: -0.0016338820569217205
    2. ':' → logprob: -6.501633644104004
    3. '   ' → logprob: -9.751633644104004
    4. ' break' → logprob: -11.251633644104004
    5. '\n' → logprob: -11.376633644104004
    6. '```' → logprob: -11.626633644104004
    7. ':
' → logprob: -11.876633644104004
    8. '        
' → logprob: -12.251633644104004
    9. ',' → logprob: -12.501633644104004
    10. '<|end|>' → logprob: -12.876633644104004

Token 47: ' result' (ID: 1534)
  Prédit: '       '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '       ' → logprob: -0.20933079719543457
    2. ' break' → logprob: -1.9593307971954346
    3. '   ' → logprob: -3.8343307971954346
    4. ' print' → logprob: -4.0843305587768555
    5. 'break' → logprob: -5.3343305587768555
    6. 'print' → logprob: -5.4593305587768555
    7. '           ' → logprob: -8.709330558776855
    8. '    ' → logprob: -9.709330558776855
    9. ' continue' → logprob: -9.959330558776855
    10. ' ' → logprob: -11.209330558776855

Token 48: '_output' (ID: 16732)
  Prédit: ' ='
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' =' → logprob: -0.2812664210796356
    2. '=' → logprob: -1.406266450881958
    3. ' ' → logprob: -10.031266212463379
    4. ' +=' → logprob: -10.281266212463379
    5. 's' → logprob: -11.281266212463379
    6. '_' → logprob: -11.531266212463379
    7. '+=' → logprob: -13.031266212463379
    8. ')' → logprob: -13.156266212463379
    9. ' =
' → logprob: -13.281266212463379
    10. '```' → logprob: -13.406266212463379

Token 49: ' =' (ID: 314)
  Prédit: ' ='
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' =' → logprob: -0.2270587980747223
    2. '=' → logprob: -1.6020587682724
    3. ' +=' → logprob: -6.7270588874816895
    4. '+=' → logprob: -9.227058410644531
    5. '_' → logprob: -9.602058410644531
    6. ' ' → logprob: -9.602058410644531
    7. ')' → logprob: -10.227058410644531
    8. '(' → logprob: -10.477058410644531
    9. ' ==' → logprob: -10.602058410644531
    10. '()' → logprob: -10.602058410644531

Token 50: ' iteration' (ID: 43155)
  Prédit: ' value'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' value' → logprob: -1.4018640518188477
    2. 'value' → logprob: -1.5268640518188477
    3. '"value' → logprob: -1.6518640518188477
    4. '"' → logprob: -2.0268640518188477
    5. ' iteration' → logprob: -2.9018640518188477
    6. 'iteration' → logprob: -2.9018640518188477
    7. ' True' → logprob: -3.0268640518188477
    8. 'True' → logprob: -4.026864051818848
    9. 'input' → logprob: -4.651864051818848
    10. ' "' → logprob: -4.651864051818848

Token 51: '_index' (ID: 7748)
  Prédit: '_index'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_index' → logprob: -0.00035751116229221225
    2. '_value' → logprob: -8.625357627868652
    3. '_output' → logprob: -10.250357627868652
    4. '_' → logprob: -10.500357627868652
    5. 't' → logprob: -10.875357627868652
    6. 'er' → logprob: -11.250357627868652
    7. 'index' → logprob: -11.375357627868652
    8. '+' → logprob: -11.875357627868652
    9. '```' → logprob: -12.125357627868652
    10. '   ' → logprob: -12.250357627868652

Token 52: ' *' (ID: 425)
  Prédit: '+'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '+' → logprob: -0.27511921525001526
    2. ' +' → logprob: -2.2751193046569824
    3. '       ' → logprob: -2.2751193046569824
    4. '   ' → logprob: -4.150119304656982
    5. '
' → logprob: -5.025119304656982
    6. '+
' → logprob: -5.775119304656982
    7. '    ' → logprob: -6.400119304656982
    8. '           ' → logprob: -6.525119304656982
    9. ' ' → logprob: -6.650119304656982
    10. '        ' → logprob: -6.775119304656982

Token 53: ' (' (ID: 350)
  Prédit: 'iteration'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'iteration' → logprob: -1.0881249904632568
    2. '2' → logprob: -1.2131249904632568
    3. '(value' → logprob: -2.213124990463257
    4. 'value' → logprob: -2.713124990463257
    5. '(iter' → logprob: -2.713124990463257
    6. '(' → logprob: -2.963124990463257
    7. ' (' → logprob: -3.463124990463257
    8. '(input' → logprob: -4.588125228881836
    9. 'input' → logprob: -4.838125228881836
    10. ' iteration' → logprob: -5.088125228881836

Token 54: 'iteration' (ID: 78354)
  Prédit: 'iteration'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'iteration' → logprob: -0.5641589164733887
    2. '(iter' → logprob: -1.6891589164733887
    3. '(' → logprob: -2.5641589164733887
    4. ' iteration' → logprob: -3.1891589164733887
    5. ')' → logprob: -3.1891589164733887
    6. ' (' → logprob: -3.6891589164733887
    7. '2' → logprob: -3.9391589164733887
    8. ' ' → logprob: -4.439158916473389
    9. '   ' → logprob: -5.064158916473389
    10. 'value' → logprob: -5.314158916473389

Token 55: '_index' (ID: 7748)
  Prédit: '_index'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_index' → logprob: -0.0016244759317487478
    2. '+' → logprob: -6.626624584197998
    3. '_' → logprob: -9.37662410736084
    4. 'index' → logprob: -9.62662410736084
    5. 'nd' → logprob: -10.00162410736084
    6. '1' → logprob: -10.62662410736084
    7. '_token' → logprob: -11.37662410736084
    8. '_value' → logprob: -11.50162410736084
    9. ' +' → logprob: -11.75162410736084
    10. '```' → logprob: -11.87662410736084

Token 56: ' +' (ID: 659)
  Prédit: '+'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '+' → logprob: -0.25201359391212463
    2. ' +' → logprob: -1.5020135641098022
    3. '1' → logprob: -10.252013206481934
    4. '   ' → logprob: -10.627013206481934
    5. ')' → logprob: -12.002013206481934
    6. '+)' → logprob: -12.127013206481934
    7. '    ' → logprob: -12.252013206481934
    8. ' ' → logprob: -13.252013206481934
    9. ')+' → logprob: -13.752013206481934
    10. ' plus' → logprob: -13.752013206481934

Token 57: ' ' (ID: 220)
  Prédit: '1'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '1' → logprob: -0.02102690562605858
    2. '2' → logprob: -4.146027088165283
    3. ' ' → logprob: -5.396027088165283
    4. ')' → logprob: -8.021026611328125
    5. '```' → logprob: -10.021026611328125
    6. '<|end|>' → logprob: -10.646026611328125
    7. '`' → logprob: -11.896026611328125
    8. '>' → logprob: -11.958526611328125
    9. '...' → logprob: -12.333526611328125
    10. '3' → logprob: -12.646026611328125

Token 58: '1' (ID: 16)
  Prédit: '1'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '1' → logprob: -0.014469859190285206
    2. '2' → logprob: -4.264469623565674
    3. ')' → logprob: -8.514470100402832
    4. '```' → logprob: -9.514470100402832
    5. '<|end|>' → logprob: -11.764470100402832
    6. ' ' → logprob: -12.264470100402832
    7. '`' → logprob: -12.639470100402832
    8. '3' → logprob: -12.764470100402832
    9. '...' → logprob: -13.326970100402832
    10. '`)' → logprob: -13.451970100402832

Token 59: ')' (ID: 8)
  Prédit: ')'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')' → logprob: -0.011385554447770119
    2. ')//' → logprob: -5.011385440826416
    3. ' )' → logprob: -5.761385440826416
    4. '//' → logprob: -7.261385440826416
    5. ' //' → logprob: -7.386385440826416
    6. '   ' → logprob: -9.136385917663574
    7. ')/' → logprob: -10.136385917663574
    8. ')
' → logprob: -11.761385917663574
    9. '```' → logprob: -11.886385917663574
    10. ')`' → logprob: -12.011385917663574

Token 60: ' //' (ID: 602)
  Prédit: '       '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '       ' → logprob: -0.004294215235859156
    2. '+' → logprob: -6.254294395446777
    3. ' +' → logprob: -6.879294395446777
    4. '<|end|>' → logprob: -7.504294395446777
    5. '   ' → logprob: -9.004294395446777
    6. '
' → logprob: -9.129294395446777
    7. '        ' → logprob: -9.504294395446777
    8. '           ' → logprob: -9.504294395446777
    9. '      ' → logprob: -10.254294395446777
    10. '.' → logprob: -10.379294395446777

Token 61: ' ' (ID: 220)
  Prédit: '2'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '2' → logprob: -4.56102097814437e-05
    2. ' ' → logprob: -10.000045776367188
    3. '   ' → logprob: -16.625045776367188
    4. '1' → logprob: -17.750045776367188
    5. '```' → logprob: -17.750045776367188
    6. '۲' → logprob: -18.250045776367188
    7. '202' → logprob: -18.375045776367188
    8. '<|end|>' → logprob: -18.625045776367188
    9. '    ' → logprob: -18.875045776367188
    10. '٢' → logprob: -19.062545776367188

Token 62: '2' (ID: 17)
  Prédit: '2'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '2' → logprob: -2.5776860184123507e-06
    2. ' ' → logprob: -13.00000286102295
    3. '   ' → logprob: -16.000001907348633
    4. '1' → logprob: -17.000001907348633
    5. '۲' → logprob: -17.312501907348633
    6. '```' → logprob: -17.312501907348633
    7. '٢' → logprob: -17.812501907348633
    8. '  ' → logprob: -18.312501907348633
    9. '    ' → logprob: -18.562501907348633
    10. '२' → logprob: -18.625001907348633

Token 63: ' -' (ID: 533)
  Prédit: '       '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '       ' → logprob: -0.4697745144367218
    2. '<|end|>' → logprob: -1.4697744846343994
    3. '
' → logprob: -1.9697744846343994
    4. '\n' → logprob: -6.7197747230529785
    5. '   ' → logprob: -6.8447747230529785
    6. '<|end|>' → logprob: -7.3447747230529785
    7. ')' → logprob: -7.7197747230529785
    8. ',' → logprob: -7.8447747230529785
    9. '           ' → logprob: -8.34477424621582
    10. '#' → logprob: -8.59477424621582

Token 64: ' input' (ID: 3422)
  Prédit: ' input'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' input' → logprob: -0.3209509551525116
    2. 'input' → logprob: -1.945950984954834
    3. ' value' → logprob: -2.570950984954834
    4. ' (' → logprob: -4.195950984954834
    5. 'value' → logprob: -4.320950984954834
    6. '1' → logprob: -4.820950984954834
    7. ' ' → logprob: -4.945950984954834
    8. '(input' → logprob: -5.695950984954834
    9. ' iteration' → logprob: -5.820950984954834
    10. '<|end|>' → logprob: -5.820950984954834

Token 65: '_value' (ID: 6734)
  Prédit: '_value'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_value' → logprob: -5.919942486798391e-05
    2. '_' → logprob: -10.250059127807617
    3. 'value' → logprob: -11.750059127807617
    4. '_val' → logprob: -12.375059127807617
    5. '_values' → logprob: -12.750059127807617
    6. 'Value' → logprob: -13.625059127807617
    7. '```' → logprob: -13.875059127807617
    8. ')_' → logprob: -14.000059127807617
    9. '_Value' → logprob: -14.000059127807617
    10. '_token' → logprob: -14.125059127807617

Token 66: '_start' (ID: 10949)
  Prédit: '_value'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_value' → logprob: -0.16057272255420685
    2. '_start' → logprob: -1.9105727672576904
    3. '_difference' → logprob: -8.91057300567627
    4. '_end' → logprob: -9.28557300567627
    5. '_' → logprob: -9.41057300567627
    6. '_values' → logprob: -11.91057300567627
    7. 'value' → logprob: -12.03557300567627
    8. '_range' → logprob: -12.16057300567627
    9. '_val' → logprob: -12.53557300567627
    10. '_length' → logprob: -12.78557300567627

Token 67: '
' (ID: 198)
  Prédit: '       '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '       ' → logprob: -0.2016109824180603
    2. '<|end|>' → logprob: -1.951611042022705
    3. '
' → logprob: -3.576611042022705
    4. '\n' → logprob: -5.826611042022705
    5. ')' → logprob: -5.826611042022705
    6. '   ' → logprob: -5.951611042022705
    7. '<|end|>' → logprob: -7.326611042022705
    8. '        ' → logprob: -7.326611042022705
    9. '           ' → logprob: -7.951611042022705
    10. ' ' → logprob: -8.076610565185547

Token 68: '       ' (ID: 309)
  Prédit: ''
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False

Token 69: ' print' (ID: 2123)
  Prédit: '       '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '       ' → logprob: -0.007967629469931126
    2. '   ' → logprob: -5.632967472076416
    3. 'break' → logprob: -6.757967472076416
    4. '<|end|>' → logprob: -7.007967472076416
    5. ' break' → logprob: -7.257967472076416
    6. '           ' → logprob: -7.882967472076416
    7. '\n' → logprob: -8.257967948913574
    8. 'print' (adapté à ' print') → logprob: -8.507967948913574
    9. '	break' → logprob: -8.757967948913574
    10. '
' → logprob: -9.382967948913574

Token 70: '(result' (ID: 8111)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(' → logprob: -0.2014363408088684
    2. '(result' → logprob: -1.7014362812042236
    3. '(value' → logprob: -12.076436042785645
    4. '('' → logprob: -12.076436042785645
    5. ' (' → logprob: -12.951436042785645
    6. 'result' → logprob: -12.951436042785645
    7. '()' → logprob: -13.451436042785645
    8. '(
' → logprob: -13.576436042785645
    9. '(res' → logprob: -14.076436042785645
    10. '("' → logprob: -14.076436042785645

Token 71: '_output' (ID: 16732)
  Prédit: '_output'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_output' → logprob: -0.00034928982495330274
    2. ')' → logprob: -8.875349044799805
    3. '_out' → logprob: -8.875349044799805
    4. '_value' → logprob: -10.750349044799805
    5. 'output' → logprob: -10.875349044799805
    6. ')_' → logprob: -11.250349044799805
    7. '_' → logprob: -11.750349044799805
    8. '_)' → logprob: -12.125349044799805
    9. '_input' → logprob: -14.000349044799805
    10. '_result' → logprob: -14.000349044799805

Token 72: ')' (ID: 8)
  Prédit: ')'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')' → logprob: -1.0802738870552275e-05
    2. ')
' → logprob: -11.62501049041748
    3. '   ' → logprob: -14.50001049041748
    4. ' )' → logprob: -14.62501049041748
    5. '       ' → logprob: -14.87501049041748
    6. '))' → logprob: -15.25001049041748
    7. '()' → logprob: -16.875011444091797
    8. ')`' → logprob: -16.875011444091797
    9. '`)' → logprob: -17.125011444091797
    10. '')' → logprob: -17.500011444091797


RÉSUMÉ:
--------------------------------------------------------------------------------
Total des tokens analysés: 70
Tokens correctement prédits (1ère position, stricte): 29
Tokens correctement prédits (1ère position, avec adaptation): 29
Tokens correctement prédits (top 10): 52
Précision stricte (1ère position): 41.43%
Précision adaptée (1ère position): 41.43%
Précision (top 10): 74.29%
================================================================================
