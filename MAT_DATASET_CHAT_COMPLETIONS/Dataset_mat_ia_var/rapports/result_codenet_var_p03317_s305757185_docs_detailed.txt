================================================================================
ANALYSE DE PRÉDICTION TOKEN PAR TOKEN (BATCH API)
Date: 2025-06-04 20:15:24
Modèle de tokenisation: gpt-4o-mini
================================================================================

SCRIPT ANALYSÉ:
--------------------------------------------------------------------------------
import math

def calculate_minimum_trips(N, K, A):
    """
    Calcule le nombre minimal de voyages nécessaires pour traiter tous les éléments d'une liste A,
    sachant que chaque voyage peut traiter jusqu'à K éléments, et que le premier élément est traité au premier voyage,
    puis chaque voyage suivant traite jusqu'à K-1 nouveaux éléments non encore traités.

    Args:
        N (int): Le nombre total d'éléments à traiter.
        K (int): Le nombre maximal d'éléments pouvant être traités lors du premier voyage,
                 puis chaque voyage suivant peut ajouter jusqu'à K-1 nouveaux éléments.
        A (List[int]): La liste des éléments à traiter.

    Returns:
        int: Le nombre minimum de voyages nécessaires pour traiter tous les éléments.
    """
    # On calcule le nombre d'éléments restant à traiter après le premier voyage (N-1)
    # Chaque voyage additionnel permet de traiter jusqu'à (K-1) nouveaux éléments non encore traités
    # On utilise math.ceil pour s'assurer d'arrondir vers le haut si la division n'est pas entière
    trips = math.ceil((N - 1) / (K - 1))
    return trips

if __name__ == "__main__":
    # Lecture des entrées utilisateur
    # N: le nombre total d'éléments, K: la capacité du premier voyage
    N, K = map(int, input().split())
    # Lecture de la liste des éléments à traiter
    A = list(map(int, input().split()))
    # Appel de la fonction et affichage du résultat
    print(calculate_minimum_trips(N, K, A))
--------------------------------------------------------------------------------

RÉSULTATS D'ANALYSE TOKEN PAR TOKEN:
--------------------------------------------------------------------------------
Token 0: 'import' (ID: 561)
  → Token d'amorce (pas de prédiction)

Token 1: ' math' (ID: 13324)
  → Token d'amorce (pas de prédiction)

Token 2: '

' (ID: 279)
  → Token d'amorce (pas de prédiction)

Token 3: 'def' (ID: 1314)
  Prédit: '.'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '.' → logprob: -0.002430951688438654
    2. '```' → logprob: -7.2524309158325195
    3. '\n' → logprob: -7.3774309158325195
    4. '\' → logprob: -7.8774309158325195
    5. 'import' → logprob: -8.00243091583252
    6. '<|end|>' → logprob: -9.25243091583252
    7. '.pi' → logprob: -10.25243091583252
    8. 'a' → logprob: -11.00243091583252
    9. '.e' → logprob: -11.12743091583252
    10. '<|end|>' → logprob: -11.12743091583252

Token 4: ' calculate' (ID: 17950)
  Prédit: ' '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' ' → logprob: -0.009838729165494442
    2. ' calculate' → logprob: -6.009838581085205
    3. ' math' → logprob: -6.009838581085205
    4. ' sqrt' → logprob: -6.134838581085205
    5. ' space' → logprob: -7.384838581085205
    6. '_' → logprob: -7.384838581085205
    7. ' factorial' → logprob: -7.384838581085205
    8. ' ' → logprob: -8.884839057922363
    9. ' f' → logprob: -9.134839057922363
    10. ' square' → logprob: -9.634839057922363

Token 5: '_min' (ID: 15950)
  Prédit: '_area'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '_area' → logprob: -0.39444467425346375
    2. '(' → logprob: -2.394444704055786
    3. '_' → logprob: -2.394444704055786
    4. '_factor' → logprob: -2.394444704055786
    5. '_radius' → logprob: -4.019444465637207
    6. '_square' → logprob: -4.769444465637207
    7. '_s' → logprob: -5.269444465637207
    8. '_circle' → logprob: -5.644444465637207
    9. '_distance' → logprob: -5.644444465637207
    10. '_angle' → logprob: -5.769444465637207

Token 6: 'imum' (ID: 4556)
  Prédit: '_'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_' → logprob: -0.12602217495441437
    2. 'imum' → logprob: -2.2510221004486084
    3. '_distance' → logprob: -6.0010223388671875
    4. '_val' → logprob: -6.5010223388671875
    5. '_sum' → logprob: -6.7510223388671875
    6. '(' → logprob: -6.7510223388671875
    7. '_area' → logprob: -7.0010223388671875
    8. 'imal' → logprob: -7.1260223388671875
    9. '_factor' → logprob: -7.2510223388671875
    10. '_im' → logprob: -7.8760223388671875

Token 7: '_tr' (ID: 7410)
  Prédit: '_'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '_' → logprob: -0.0048951273784041405
    2. '(' → logprob: -6.129895210266113
    3. '_space' → logprob: -6.879895210266113
    4. '_distance' → logprob: -7.379895210266113
    5. '_angle' → logprob: -9.004895210266113
    6. '_parent' → logprob: -9.254895210266113
    7. '_div' → logprob: -9.254895210266113
    8. '_difference' → logprob: -9.379895210266113
    9. '_area' → logprob: -9.629895210266113
    10. '_price' → logprob: -9.879895210266113

Token 8: 'ips' (ID: 3200)
  Prédit: 'iangle'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'iangle' → logprob: -0.04875655099749565
    2. 'ans' → logprob: -3.6737565994262695
    3. 'angle' → logprob: -4.0487565994262695
    4. 'ee' → logprob: -6.6737565994262695
    5. 'avel' → logprob: -7.0487565994262695
    6. 'i' → logprob: -7.4237565994262695
    7. 'iang' → logprob: -7.4237565994262695
    8. 'ip' → logprob: -7.9237565994262695
    9. 'ees' → logprob: -8.54875659942627
    10. 'a' → logprob: -8.67375659942627

Token 9: '(N' (ID: 10564)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '(' → logprob: -0.0014630960067734122
    2. '():' → logprob: -7.376462936401367
    3. '(:' → logprob: -7.626462936401367
    4. ':' → logprob: -9.501462936401367
    5. '_' → logprob: -9.876462936401367
    6. '```' → logprob: -10.876462936401367
    7. '(user' → logprob: -10.876462936401367
    8. '(":' → logprob: -11.001462936401367
    9. '):' → logprob: -11.376462936401367
    10. '(`' → logprob: -11.626462936401367

Token 10: ',' (ID: 11)
  Prédit: ','
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ',' → logprob: -0.016167858615517616
    2. '):' → logprob: -4.266167640686035
    3. ')' → logprob: -6.266167640686035
    4. ' ,' → logprob: -9.516167640686035
    5. ':' → logprob: -11.516167640686035
    6. ' ):' → logprob: -12.141167640686035
    7. 's' → logprob: -13.391167640686035
    8. ' )' → logprob: -13.891167640686035
    9. '_' → logprob: -14.141167640686035
    10. ',int' → logprob: -14.266167640686035

Token 11: ' K' (ID: 658)
  Prédit: ' M'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' M' → logprob: -1.5124989748001099
    2. ' items' → logprob: -1.6374989748001099
    3. ' weights' → logprob: -1.7624989748001099
    4. ' K' → logprob: -2.5124988555908203
    5. 'weights' → logprob: -2.8874988555908203
    6. ' weight' → logprob: -3.1374988555908203
    7. ' W' → logprob: -3.3874988555908203
    8. ' capacity' → logprob: -3.7624988555908203
    9. ' packages' → logprob: -4.01249885559082
    10. ' distances' → logprob: -4.01249885559082

Token 12: ',' (ID: 11)
  Prédit: '):'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '):' → logprob: -0.0013035722076892853
    2. ')' → logprob: -7.126303672790527
    3. ',' → logprob: -7.751303672790527
    4. ':' → logprob: -10.376303672790527
    5. ''):' → logprob: -11.251303672790527
    6. '):
' → logprob: -11.626303672790527
    7. '```' → logprob: -12.501303672790527
    8. '**' → logprob: -13.501303672790527
    9. ' ):' → logprob: -13.501303672790527
    10. '   ' → logprob: -13.501303672790527

Token 13: ' A' (ID: 355)
  Prédit: ' weights'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' weights' → logprob: -0.9092484712600708
    2. 'weights' → logprob: -2.1592483520507812
    3. ' items' → logprob: -2.4092483520507812
    4. ' M' → logprob: -2.5342483520507812
    5. ' distances' → logprob: -2.7842483520507812
    6. ' W' → logprob: -3.1592483520507812
    7. ' L' → logprob: -4.034248352050781
    8. ' positions' → logprob: -4.034248352050781
    9. ' D' → logprob: -4.596748352050781
    10. ' dist' → logprob: -4.659248352050781

Token 14: '):
' (ID: 1883)
  Prédit: '):'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '):' → logprob: -0.00040219054790213704
    2. ')' → logprob: -8.625402450561523
    3. '):
' → logprob: -9.000402450561523
    4. '):
' → logprob: -9.625402450561523
    5. ',' → logprob: -11.875402450561523
    6. ' ):' → logprob: -12.000402450561523
    7. ':' → logprob: -12.375402450561523
    8. '[' → logprob: -12.500402450561523
    9. '[]):' → logprob: -13.000402450561523
    10. 's' → logprob: -13.375402450561523

Token 15: '   ' (ID: 271)
  Prédit: ':'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ':' → logprob: -0.007509603165090084
    2. ':
' → logprob: -5.007509708404541
    3. '   ' → logprob: -7.507509708404541
    4. '":' → logprob: -9.632509231567383
    5. '```' → logprob: -10.007509231567383
    6. '':' → logprob: -10.257509231567383
    7. '):' → logprob: -10.632509231567383
    8. '`:' → logprob: -10.882509231567383
    9. ':return' → logprob: -11.132509231567383
    10. ' :' → logprob: -11.382509231567383

Token 16: ' """
' (ID: 7037)
  Prédit: ' max'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' max' → logprob: -0.832402229309082
    2. '   ' → logprob: -1.207402229309082
    3. 'max' → logprob: -2.207402229309082
    4. ' total' → logprob: -2.832402229309082
    5. 'total' → logprob: -3.082402229309082
    6. ' trips' → logprob: -4.207402229309082
    7. ' ' → logprob: -4.582402229309082
    8. ' min' → logprob: -5.707402229309082
    9. '```' → logprob: -6.332402229309082
    10. ' if' → logprob: -6.332402229309082

Token 17: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.5935200452804565
    2. ' """' → logprob: -1.8435200452804565
    3. ' Calculate' → logprob: -2.468520164489746
    4. ' """
' → logprob: -3.218520164489746
    5. 'Calculate' → logprob: -3.468520164489746
    6. ' Calculates' → logprob: -3.468520164489746
    7. '"""' → logprob: -3.593520164489746
    8. '#' → logprob: -3.593520164489746
    9. '    ' → logprob: -4.843520164489746
    10. ' #' → logprob: -4.968520164489746

Token 18: ' Cal' (ID: 4453)
  Prédit: 'Calculate'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'Calculate' → logprob: -0.29893699288368225
    2. 'Calcul' → logprob: -2.4239370822906494
    3. ' Calculates' → logprob: -2.6739370822906494
    4. ' Calculate' → logprob: -3.1739370822906494
    5. '"""' → logprob: -3.7989370822906494
    6. 'Returns' → logprob: -4.17393684387207
    7. '"""
' → logprob: -4.54893684387207
    8. '   ' → logprob: -6.42393684387207
    9. 'Determine' → logprob: -6.54893684387207
    10. 'Given' → logprob: -6.67393684387207

Token 19: 'cule' (ID: 45017)
  Prédit: 'culate'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'culate' → logprob: -0.25231799483299255
    2. 'cul' → logprob: -1.502318024635315
    3. 'cula' → logprob: -9.002318382263184
    4. 'cular' → logprob: -9.502318382263184
    5. 'culated' → logprob: -10.002318382263184
    6. 'cu' → logprob: -10.002318382263184
    7. 'c' → logprob: -10.252318382263184
    8. 'l' → logprob: -10.627318382263184
    9. 'culator' → logprob: -11.127318382263184
    10. 'culation' → logprob: -11.752318382263184

Token 20: ' le' (ID: 505)
  Prédit: 'r'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'r' → logprob: -0.0018685447284951806
    2. 'te' → logprob: -6.626868724822998
    3. 'rate' → logprob: -8.00186824798584
    4. 'ate' → logprob: -9.87686824798584
    5. 't' → logprob: -9.87686824798584
    6. 'z' → logprob: -10.75186824798584
    7. 's' → logprob: -10.87686824798584
    8. 'late' → logprob: -11.25186824798584
    9. '```' → logprob: -11.25186824798584
    10. 'ra' → logprob: -11.37686824798584

Token 21: ' nombre' (ID: 9733)
  Prédit: ' nombre'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' nombre' → logprob: -0.17721951007843018
    2. ' ' → logprob: -1.9272195100784302
    3. 's' → logprob: -4.802219390869141
    4. '   ' → logprob: -5.677219390869141
    5. 'nombre' → logprob: -5.802219390869141
    6. '  ' → logprob: -6.677219390869141
    7. ' ' → logprob: -8.05221939086914
    8. ' nombres' → logprob: -8.42721939086914
    9. ' minimum' → logprob: -8.80221939086914
    10. '_nombre' → logprob: -9.30221939086914

Token 22: ' minimal' (ID: 19957)
  Prédit: '_'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '_' → logprob: -1.0258208513259888
    2. ' ' → logprob: -1.1508208513259888
    3. ' d' → logprob: -1.9008208513259888
    4. ' de' → logprob: -2.400820732116699
    5. '  ' → logprob: -3.025820732116699
    6. ' minimum' → logprob: -4.650820732116699
    7. 'space' → logprob: -5.150820732116699
    8. 'minimum' → logprob: -5.775820732116699
    9. '_space' → logprob: -6.025820732116699
    10. '_de' → logprob: -6.150820732116699

Token 23: ' de' (ID: 334)
  Prédit: ' de'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' de' → logprob: -0.3446599543094635
    2. '_' → logprob: -1.7196599245071411
    3. ' d' → logprob: -2.5946600437164307
    4. ' ' → logprob: -3.7196600437164307
    5. '_de' → logprob: -4.844659805297852
    6. '  ' → logprob: -6.219659805297852
    7. '<|end|>' → logprob: -6.844659805297852
    8. 'de' → logprob: -7.094659805297852
    9. '   ' → logprob: -7.844659805297852
    10. '_d' → logprob: -8.094659805297852

Token 24: ' voyages' (ID: 113716)
  Prédit: ' voyages'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' voyages' → logprob: -0.10954485833644867
    2. ' déplacements' → logprob: -3.4845447540283203
    3. ' ' → logprob: -3.8595447540283203
    4. ' traj' → logprob: -4.10954475402832
    5. 'voy' → logprob: -4.35954475402832
    6. ' trips' → logprob: -4.35954475402832
    7. ' passages' → logprob: -6.60954475402832
    8. ' transports' → logprob: -6.85954475402832
    9. 'traj' → logprob: -7.10954475402832
    10. ' fois' → logprob: -7.29704475402832

Token 25: ' nécessaires' (ID: 74402)
  Prédit: ' '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' ' → logprob: -0.058169733732938766
    2. '   ' → logprob: -3.6831698417663574
    3. ' nécessaires' → logprob: -3.6831698417663574
    4. '  ' → logprob: -6.683169841766357
    5. ' nécessaire' → logprob: -6.808169841766357
    6. ' pour' → logprob: -7.308169841766357
    7. ' necess' → logprob: -7.683169841766357
    8. ' ' → logprob: -7.683169841766357
    9. '    ' → logprob: -7.808169841766357
    10. 's' → logprob: -8.0581693649292

Token 26: ' pour' (ID: 1930)
  Prédit: ' pour'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' pour' → logprob: -0.06572224199771881
    2. ' ' → logprob: -3.0657222270965576
    3. 'pour' → logprob: -4.565722465515137
    4. ' to' → logprob: -5.940722465515137
    5. '   ' → logprob: -6.565722465515137
    6. ' en' → logprob: -6.815722465515137
    7. ' afin' → logprob: -7.940722465515137
    8. ' à' → logprob: -8.315722465515137
    9. '.' → logprob: -8.565722465515137
    10. '  ' → logprob: -8.815722465515137

Token 27: ' traiter' (ID: 105852)
  Prédit: ' transporter'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' transporter' → logprob: -0.011403471231460571
    2. ' transport' → logprob: -5.386403560638428
    3. 'transport' → logprob: -6.636403560638428
    4. ' effectuer' → logprob: -7.011403560638428
    5. 'trans' → logprob: -7.511403560638428
    6. ' ram' → logprob: -8.01140308380127
    7. ' réaliser' → logprob: -8.01140308380127
    8. '   ' → logprob: -8.26140308380127
    9. 'porter' → logprob: -8.51140308380127
    10. ' parcour' → logprob: -8.51140308380127

Token 28: ' tous' (ID: 10688)
  Prédit: ' les'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' les' → logprob: -1.13746178150177
    2. ' ' → logprob: -1.38746178150177
    3. ' chaque' → logprob: -2.2624616622924805
    4. ' la' → logprob: -2.3874616622924805
    5. ' le' → logprob: -2.7624616622924805
    6. ' un' → logprob: -2.7624616622924805
    7. ' l' → logprob: -3.1374616622924805
    8. ' une' → logprob: -4.1374616622924805
    9. ' toutes' → logprob: -4.6374616622924805
    10. ' tous' → logprob: -4.6374616622924805

Token 29: ' les' (ID: 1341)
  Prédit: ' les'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' les' → logprob: -0.04678522050380707
    2. ' ' → logprob: -3.1717851161956787
    3. 'les' → logprob: -6.671785354614258
    4. ' l' → logprob: -7.171785354614258
    5. ' des' → logprob: -7.296785354614258
    6. ' la' → logprob: -8.171785354614258
    7. ' le' → logprob: -9.046785354614258
    8. ' ' → logprob: -9.046785354614258
    9. 'l' → logprob: -9.609285354614258
    10. ' the' → logprob: -9.734285354614258

Token 30: ' éléments' (ID: 57375)
  Prédit: ' articles'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' articles' → logprob: -1.53927743434906
    2. ' objets' → logprob: -1.53927743434906
    3. ' éléments' → logprob: -1.66427743434906
    4. ' colis' → logprob: -2.7892775535583496
    5. ' sacs' → logprob: -3.1642775535583496
    6. 'articles' → logprob: -3.5392775535583496
    7. ' items' → logprob: -3.5392775535583496
    8. ' fruits' → logprob: -3.9142775535583496
    9. ' déchets' → logprob: -4.16427755355835
    10. 'élé' → logprob: -4.28927755355835

Token 31: ' d' (ID: 272)
  Prédit: '.'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '.' → logprob: -0.7994936108589172
    2. ' de' → logprob: -1.5494935512542725
    3. ' en' → logprob: -1.5494935512542725
    4. 's' → logprob: -3.6744935512542725
    5. ' ' → logprob: -3.7994935512542725
    6. ',' → logprob: -3.7994935512542725
    7. ' du' → logprob: -4.049493789672852
    8. ' dans' → logprob: -4.799493789672852
    9. ' .' → logprob: -5.299493789672852
    10. ' ,' → logprob: -5.674493789672852

Token 32: ''une' (ID: 13337)
  Prédit: 'e'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'e' → logprob: -0.4206365644931793
    2. ' A' → logprob: -2.5456366539001465
    3. 'A' → logprob: -2.6706366539001465
    4. ''une' → logprob: -3.1706366539001465
    5. ''A' → logprob: -3.6706366539001465
    6. 'u' → logprob: -3.7956366539001465
    7. ''' → logprob: -3.7956366539001465
    8. ' la' → logprob: -4.1706366539001465
    9. 'es' → logprob: -4.4206366539001465
    10. ''un' → logprob: -4.6706366539001465

Token 33: ' liste' (ID: 31719)
  Prédit: ' liste'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' liste' → logprob: -0.30958735942840576
    2. 'liste' → logprob: -1.4345873594284058
    3. ' list' → logprob: -4.184587478637695
    4. 'list' → logprob: -5.059587478637695
    5. ' ' → logprob: -6.184587478637695
    6. ' collection' → logprob: -7.559587478637695
    7. 's' → logprob: -7.684587478637695
    8. '   ' → logprob: -7.809587478637695
    9. 'Liste' → logprob: -8.059587478637695
    10. ' file' → logprob: -8.184587478637695

Token 34: ' A' (ID: 355)
  Prédit: '.'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '.' → logprob: -0.9281094670295715
    2. '   ' → logprob: -1.3031094074249268
    3. ' en' → logprob: -1.6781094074249268
    4. ',' → logprob: -2.9281094074249268
    5. ' de' → logprob: -3.1781094074249268
    6. 's' → logprob: -4.803109645843506
    7. ' ' → logprob: -4.803109645843506
    8. '```' → logprob: -5.053109645843506
    9. ' (' → logprob: -6.053109645843506
    10. 'de' → logprob: -6.053109645843506

Token 35: ',
' (ID: 412)
  Prédit: ' en'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' en' → logprob: -0.9894603490829468
    2. '.' → logprob: -1.1144603490829468
    3. '   ' → logprob: -1.8644603490829468
    4. ',' → logprob: -2.1144604682922363
    5. '"""' → logprob: -5.239460468292236
    6. '```' → logprob: -5.864460468292236
    7. ' ' → logprob: -5.989460468292236
    8. ':' → logprob: -6.614460468292236
    9. '"""
' → logprob: -6.614460468292236
    10. ' dans' → logprob: -6.739460468292236

Token 36: '   ' (ID: 271)
  Prédit: ' en'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' en' → logprob: -0.006348930299282074
    2. ' compte' → logprob: -5.881349086761475
    3. ' ' → logprob: -7.131349086761475
    4. ' avec' → logprob: -7.881349086761475
    5. ' étant' → logprob: -7.881349086761475
    6. ' given' → logprob: -8.006348609924316
    7. ' ' → logprob: -8.131348609924316
    8. '   ' → logprob: -8.506348609924316
    9. ' sachant' → logprob: -8.631348609924316
    10. ' et' → logprob: -8.756348609924316

Token 37: ' sachant' (ID: 174239)
  Prédit: ' en'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' en' → logprob: -0.09113910794258118
    2. ' ' → logprob: -2.716139078140259
    3. ' compte' → logprob: -4.091139316558838
    4. ' étant' → logprob: -7.091139316558838
    5. ' avec' → logprob: -7.716139316558838
    6. ' ' → logprob: -8.09113883972168
    7. ' given' → logprob: -8.09113883972168
    8. ' et' → logprob: -8.21613883972168
    9. ' tout' → logprob: -8.21613883972168
    10. ' sachant' → logprob: -8.34113883972168

Token 38: ' que' (ID: 661)
  Prédit: ' que'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' que' → logprob: -0.01822521537542343
    2. ' qu' → logprob: -4.268225193023682
    3. ' ' → logprob: -5.893225193023682
    4. ' ' → logprob: -7.643225193023682
    5. ' that' → logprob: -8.64322566986084
    6. 'que' → logprob: -9.01822566986084
    7. ' de' → logprob: -9.01822566986084
    8. ' d' → logprob: -10.01822566986084
    9. ' des' → logprob: -10.01822566986084
    10. '   ' → logprob: -10.14322566986084

Token 39: ' chaque' (ID: 21194)
  Prédit: ' chaque'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' chaque' → logprob: -0.010532584972679615
    2. ' l' → logprob: -5.760532379150391
    3. ' la' → logprob: -6.135532379150391
    4. ' K' → logprob: -6.885532379150391
    5. ' each' → logprob: -7.010532379150391
    6. ' le' → logprob: -7.010532379150391
    7. ' ' → logprob: -7.385532379150391
    8. ' ' → logprob: -7.510532379150391
    9. ' on' → logprob: -8.76053237915039
    10. ' chacune' → logprob: -8.88553237915039

Token 40: ' voyage' (ID: 35454)
  Prédit: ' voyage'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' voyage' → logprob: -0.5330755710601807
    2. 'voy' → logprob: -1.6580755710601807
    3. 'élé' → logprob: -2.1580755710601807
    4. ' élément' → logprob: -2.4080755710601807
    5. ' trip' → logprob: -6.158075332641602
    6. ' trajet' → logprob: -6.158075332641602
    7. ' ' → logprob: -6.470575332641602
    8. ' element' → logprob: -6.783075332641602
    9. 'trip' → logprob: -7.408075332641602
    10. ' déplacement' → logprob: -7.470575332641602

Token 41: ' peut' (ID: 9216)
  Prédit: ' peut'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' peut' → logprob: -0.027045946568250656
    2. ' ne' → logprob: -4.277045726776123
    3. ' transport' → logprob: -6.152045726776123
    4. ' em' → logprob: -6.402045726776123
    5. ' peux' → logprob: -6.527045726776123
    6. ' contient' → logprob: -6.527045726776123
    7. 'pe' → logprob: -7.152045726776123
    8. ' permet' → logprob: -7.152045726776123
    9. ' doit' → logprob: -7.527045726776123
    10. ' ' → logprob: -7.527045726776123

Token 42: ' traiter' (ID: 105852)
  Prédit: ' transporter'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' transporter' → logprob: -0.27690601348876953
    2. ' traiter' → logprob: -1.5269060134887695
    3. ' conten' → logprob: -4.6519060134887695
    4. ' em' → logprob: -5.5269060134887695
    5. ' transport' → logprob: -5.9019060134887695
    6. ' prendre' → logprob: -5.9019060134887695
    7. 'trait' → logprob: -6.2769060134887695
    8. ' emm' → logprob: -6.9019060134887695
    9. ' couvrir' → logprob: -7.5269060134887695
    10. 'transport' → logprob: -7.9019060134887695

Token 43: ' jusqu' (ID: 21961)
  Prédit: ' au'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' au' → logprob: -0.4460599720478058
    2. ' ' → logprob: -1.3210599422454834
    3. ' up' → logprob: -3.0710599422454834
    4. ' K' → logprob: -4.0710601806640625
    5. ' jusqu' → logprob: -4.5710601806640625
    6. 'au' → logprob: -4.6960601806640625
    7. ' un' → logprob: -5.4460601806640625
    8. ' une' → logprob: -5.6960601806640625
    9. '  ' → logprob: -7.4460601806640625
    10. ' a' → logprob: -8.321060180664062

Token 44: ''à' (ID: 33688)
  Prédit: ''à'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ''à' → logprob: -0.13984011113643646
    2. ' à' → logprob: -2.2648401260375977
    3. '’à' → logprob: -4.139840126037598
    4. 'à' → logprob: -4.639840126037598
    5. ' ' → logprob: -8.014840126037598
    6. '`' → logprob: -8.514840126037598
    7. ''' → logprob: -9.264840126037598
    8. 'a' → logprob: -9.389840126037598
    9. ' a' → logprob: -9.514840126037598
    10. '```' → logprob: -9.514840126037598

Token 45: ' K' (ID: 658)
  Prédit: ' K'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' K' → logprob: -0.06224608048796654
    2. 'K' → logprob: -2.812246084213257
    3. ' ' → logprob: -8.812246322631836
    4. ' ' → logprob: -9.187246322631836
    5. ' une' → logprob: -11.937246322631836
    6. 'k' → logprob: -12.062246322631836
    7. 'un' → logprob: -12.812246322631836
    8. ' `' → logprob: -13.312246322631836
    9. ' un' → logprob: -13.312246322631836
    10. '`' → logprob: -13.562246322631836

Token 46: ' éléments' (ID: 57375)
  Prédit: ' éléments'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' éléments' → logprob: -0.17495743930339813
    2. 'élé' → logprob: -2.049957513809204
    3. ' ' → logprob: -3.549957513809204
    4. ' élément' → logprob: -6.924957275390625
    5. ' elements' → logprob: -7.049957275390625
    6. ' items' → logprob: -8.174957275390625
    7. '```' → logprob: -8.549957275390625
    8. ' objets' → logprob: -9.299957275390625
    9. 'elements' → logprob: -9.424957275390625
    10. ''' → logprob: -9.924957275390625

Token 47: ',' (ID: 11)
  Prédit: '.'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '.' → logprob: -0.03152225539088249
    2. ',' → logprob: -3.656522274017334
    3. ' .' → logprob: -6.031522274017334
    4. ' ' → logprob: -7.531522274017334
    5. ' ,' → logprob: -7.906522274017334
    6. '.
' → logprob: -8.031521797180176
    7. '   ' → logprob: -8.031521797180176
    8. '```' → logprob: -8.406521797180176
    9. ')' → logprob: -8.781521797180176
    10. ').' → logprob: -9.031521797180176

Token 48: ' et' (ID: 859)
  Prédit: ' et'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' et' → logprob: -0.17553722858428955
    2. ' en' → logprob: -2.800537109375
    3. '   ' → logprob: -3.050537109375
    4. 'et' → logprob: -4.300537109375
    5. ' ' → logprob: -5.175537109375
    6. '.' → logprob: -5.550537109375
    7. ' y' → logprob: -6.050537109375
    8. ')' → logprob: -6.300537109375
    9. ' ' → logprob: -6.300537109375
    10. ' """
' → logprob: -6.300537109375

Token 49: ' que' (ID: 661)
  Prédit: ' que'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' que' → logprob: -0.07145468890666962
    2. ' qu' → logprob: -3.9464547634124756
    3. '   ' → logprob: -4.3214545249938965
    4. ' au' → logprob: -5.0714545249938965
    5. ' chaque' → logprob: -5.1964545249938965
    6. ' on' → logprob: -6.0714545249938965
    7. ' les' → logprob: -6.1964545249938965
    8. ' la' → logprob: -6.3214545249938965
    9. 'que' → logprob: -6.3214545249938965
    10. ' le' → logprob: -6.5714545249938965

Token 50: ' le' (ID: 505)
  Prédit: ' chaque'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' chaque' → logprob: -0.7144970893859863
    2. ' l' → logprob: -1.8394970893859863
    3. ' la' → logprob: -2.2144970893859863
    4. ' les' → logprob: -2.4644970893859863
    5. ' len' → logprob: -2.9644970893859863
    6. ' le' → logprob: -3.2144970893859863
    7. ' N' → logprob: -4.214497089385986
    8. ' ' → logprob: -4.464497089385986
    9. ' tous' → logprob: -4.464497089385986
    10. ' A' → logprob: -5.339497089385986

Token 51: ' premier' (ID: 15506)
  Prédit: ' nombre'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' nombre' → logprob: -0.4754951596260071
    2. ' total' → logprob: -2.8504951000213623
    3. ' plus' → logprob: -2.9754951000213623
    4. 's' → logprob: -3.3504951000213623
    5. ' premier' → logprob: -3.4754951000213623
    6. ' traitement' → logprob: -3.4754951000213623
    7. ' maximum' → logprob: -3.7254951000213623
    8. ' code' → logprob: -4.225495338439941
    9. ' reste' → logprob: -4.225495338439941
    10. ' déplacement' → logprob: -4.475495338439941

Token 52: ' élément' (ID: 99627)
  Prédit: ' voyage'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' voyage' → logprob: -0.22765026986598969
    2. '_' → logprob: -1.9776502847671509
    3. 'voy' → logprob: -3.1026501655578613
    4. '_v' → logprob: -5.602650165557861
    5. 'élé' → logprob: -6.102650165557861
    6. ' ' → logprob: -6.227650165557861
    7. ' trajet' → logprob: -6.477650165557861
    8. ' _' → logprob: -6.727650165557861
    9. ' trip' → logprob: -6.727650165557861
    10. '_trip' → logprob: -6.727650165557861

Token 53: ' est' (ID: 893)
  Prédit: ' de'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' de' → logprob: -1.1746450662612915
    2. ' du' → logprob: -2.299644947052002
    3. ' peut' → logprob: -2.424644947052002
    4. ' traité' → logprob: -2.424644947052002
    5. '<|end|>' → logprob: -2.549644947052002
    6. ' est' → logprob: -2.674644947052002
    7. ' à' → logprob: -2.674644947052002
    8. ' a' → logprob: -3.174644947052002
    9. ' ' → logprob: -3.674644947052002
    10. 'de' → logprob: -4.049644947052002

Token 54: ' traité' (ID: 160836)
  Prédit: ' traité'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' traité' → logprob: -0.17379160225391388
    2. ' toujours' → logprob: -2.2987916469573975
    3. 'trait' → logprob: -4.298791408538818
    4. ' trait' → logprob: -4.548791408538818
    5. ' pris' → logprob: -4.798791408538818
    6. ' le' → logprob: -5.048791408538818
    7. ' un' → logprob: -5.423791408538818
    8. ' considéré' → logprob: -6.298791408538818
    9. ' à' → logprob: -6.548791408538818
    10. ' always' → logprob: -6.673791408538818

Token 55: ' au' (ID: 2791)
  Prédit: ' au'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' au' → logprob: -0.629544734954834
    2. ' ' → logprob: -2.129544734954834
    3. ' en' → logprob: -2.629544734954834
    4. 'au' → logprob: -2.879544734954834
    5. ' lors' → logprob: -3.129544734954834
    6. ' à' → logprob: -3.254544734954834
    7. ' dans' → logprob: -4.004544734954834
    8. ' dès' → logprob: -4.254544734954834
    9. ' sépar' → logprob: -4.254544734954834
    10. ' avant' → logprob: -4.379544734954834

Token 56: ' premier' (ID: 15506)
  Prédit: 'dé'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'dé' → logprob: -1.9617202281951904
    2. 'plus' → logprob: -2.2117202281951904
    3. 'prem' → logprob: -2.5867202281951904
    4. 'total' → logprob: -2.7117202281951904
    5. ' départ' → logprob: -2.7117202281951904
    6. 'moins' → logprob: -2.8367202281951904
    7. ' ' → logprob: -3.0867202281951904
    8. 'd' → logprob: -3.2117202281951904
    9. 'tour' → logprob: -3.2117202281951904
    10. 'm' → logprob: -3.4617202281951904

Token 57: ' voyage' (ID: 35454)
  Prédit: 'voy'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'voy' → logprob: -0.5292859673500061
    2. ' voyage' → logprob: -0.9042859673500061
    3. ' ' → logprob: -6.654285907745361
    4. '_' → logprob: -7.654285907745361
    5. 'pass' → logprob: -7.654285907745361
    6. ' passage' → logprob: -7.654285907745361
    7. 'vo' → logprob: -7.904285907745361
    8. 'élé' → logprob: -8.27928638458252
    9. 'trip' → logprob: -8.27928638458252
    10. ' trajet' → logprob: -8.59178638458252

Token 58: ',
' (ID: 412)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')' → logprob: -0.8193122148513794
    2. '.' → logprob: -0.9443122148513794
    3. ',' → logprob: -2.56931209564209
    4. '   ' → logprob: -2.94431209564209
    5. '):' → logprob: -4.56931209564209
    6. ' ' → logprob: -4.94431209564209
    7. '"""' → logprob: -5.44431209564209
    8. ' )' → logprob: -5.94431209564209
    9. '```' → logprob: -5.94431209564209
    10. ',
' → logprob: -5.94431209564209

Token 59: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.23437552154064178
    2. ' et' → logprob: -1.8593754768371582
    3. ',' → logprob: -3.859375476837158
    4. ' puis' → logprob: -4.359375476837158
    5. 'et' → logprob: -4.609375476837158
    6. '.' → logprob: -6.234375476837158
    7. ' ' → logprob: -6.984375476837158
    8. '    ' → logprob: -7.109375476837158
    9. ' mais' → logprob: -7.484375476837158
    10. ')' → logprob: -7.859375476837158

Token 60: ' puis' (ID: 18766)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.5804888010025024
    2. ' et' → logprob: -1.5804888010025024
    3. 'et' → logprob: -2.455488681793213
    4. ' puis' → logprob: -2.580488681793213
    5. '.' → logprob: -4.955488681793213
    6. ',' → logprob: -4.955488681793213
    7. ')' → logprob: -5.205488681793213
    8. ' mais' → logprob: -5.330488681793213
    9. ' en' → logprob: -5.455488681793213
    10. ' le' → logprob: -5.455488681793213

Token 61: ' chaque' (ID: 21194)
  Prédit: ' les'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' les' → logprob: -0.3667503595352173
    2. ' chaque' → logprob: -1.8667503595352173
    3. ' le' → logprob: -2.3667502403259277
    4. ' ' → logprob: -4.366750240325928
    5. ' la' → logprob: -4.866750240325928
    6. ' ' → logprob: -4.991750240325928
    7. ' que' → logprob: -4.991750240325928
    8. ' l' → logprob: -5.116750240325928
    9. 'le' → logprob: -5.366750240325928
    10. 'les' → logprob: -6.116750240325928

Token 62: ' voyage' (ID: 35454)
  Prédit: 'élé'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'élé' → logprob: -0.7064042687416077
    2. ' élément' → logprob: -1.081404209136963
    3. ' voyage' → logprob: -2.206404209136963
    4. 'voy' → logprob: -3.456404209136963
    5. ' subsequent' → logprob: -4.456404209136963
    6. ' trip' → logprob: -5.706404209136963
    7. 'element' → logprob: -6.456404209136963
    8. ' ' → logprob: -6.581404209136963
    9. ' déplacement' → logprob: -6.956404209136963
    10. 'trip' → logprob: -6.956404209136963

Token 63: ' suivant' (ID: 68705)
  Prédit: ' peut'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' peut' → logprob: -1.1004188060760498
    2. ' doit' → logprob: -1.4754188060760498
    3. ' traite' → logprob: -2.10041880607605
    4. ' suivant' → logprob: -2.35041880607605
    5. ' suivante' → logprob: -2.85041880607605
    6. ' subsequent' → logprob: -3.10041880607605
    7. ' subs' → logprob: -3.35041880607605
    8. ' ' → logprob: -3.47541880607605
    9. ' suivants' → logprob: -5.600419044494629
    10. ' trait' → logprob: -5.600419044494629

Token 64: ' traite' (ID: 180696)
  Prédit: ' peut'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' peut' → logprob: -0.41461434960365295
    2. ' doit' → logprob: -1.7896143198013306
    3. ' traite' → logprob: -1.9146143198013306
    4. ' trait' → logprob: -5.164614200592041
    5. ' ' → logprob: -6.039614200592041
    6. ' tra' → logprob: -6.164614200592041
    7. ' nécessite' → logprob: -6.414614200592041
    8. ' peux' → logprob: -6.664614200592041
    9. '   ' → logprob: -6.664614200592041
    10. ' prend' → logprob: -6.789614200592041

Token 65: ' jusqu' (ID: 21961)
  Prédit: ' au'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' au' → logprob: -0.3229137361049652
    2. ' K' → logprob: -2.197913646697998
    3. ' ' → logprob: -3.197913646697998
    4. ' jusqu' → logprob: -3.572913646697998
    5. ' une' → logprob: -3.947913646697998
    6. ' les' → logprob: -4.072913646697998
    7. ' un' → logprob: -4.322913646697998
    8. 'au' → logprob: -4.447913646697998
    9. ' up' → logprob: -5.072913646697998
    10. ' math' → logprob: -5.072913646697998

Token 66: ''à' (ID: 33688)
  Prédit: ''à'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ''à' → logprob: -0.136952206492424
    2. ' à' → logprob: -2.5119521617889404
    3. 'à' → logprob: -3.7619521617889404
    4. '’à' → logprob: -3.8869521617889404
    5. '  ' → logprob: -7.1369524002075195
    6. ''au' → logprob: -7.2619524002075195
    7. ''' → logprob: -7.5119524002075195
    8. 'au' → logprob: -7.8869524002075195
    9. '   ' → logprob: -8.26195240020752
    10. '`' → logprob: -8.88695240020752

Token 67: ' K' (ID: 658)
  Prédit: ' K'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' K' → logprob: -0.011477592401206493
    2. 'K' → logprob: -4.886477470397949
    3. ' ' → logprob: -5.761477470397949
    4. ' math' → logprob: -7.886477470397949
    5. ' min' → logprob: -8.76147747039795
    6. ' ' → logprob: -9.51147747039795
    7. ' `' → logprob: -10.76147747039795
    8. ' max' → logprob: -10.76147747039795
    9. ' une' → logprob: -11.76147747039795
    10. 'min' → logprob: -11.88647747039795

Token 68: '-' (ID: 12)
  Prédit: ''
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False

Token 69: '1' (ID: 16)
  Prédit: '1'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '1' → logprob: -0.018162699416279793
    2. ' ' → logprob: -4.018162727355957
    3. '2' → logprob: -12.268162727355957
    4. '-' → logprob: -12.393162727355957
    5. ' ' → logprob: -13.643162727355957
    6. '<|end|>' → logprob: -13.893162727355957
    7. '```' → logprob: -15.018162727355957
    8. '  ' → logprob: -15.580662727355957
    9. '0' → logprob: -15.893162727355957
    10. ' -' → logprob: -16.08066177368164

Token 70: ' nouveaux' (ID: 43964)
  Prédit: ' éléments'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' éléments' → logprob: -0.2353786677122116
    2. 'élé' → logprob: -2.2353787422180176
    3. ' elements' → logprob: -2.3603787422180176
    4. 'elements' → logprob: -4.985378742218018
    5. ')' → logprob: -7.860378742218018
    6. ' élément' → logprob: -8.11037826538086
    7. ' )' → logprob: -9.11037826538086
    8. 'element' → logprob: -9.36037826538086
    9. ' items' → logprob: -9.48537826538086
    10. '_elements' → logprob: -9.61037826538086

Token 71: ' éléments' (ID: 57375)
  Prédit: ' éléments'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' éléments' → logprob: -0.29546087980270386
    2. 'élé' → logprob: -1.4204609394073486
    3. ' elements' → logprob: -4.4204607009887695
    4. ' élément' → logprob: -7.4204607009887695
    5. 'elements' → logprob: -7.5454607009887695
    6. ' espaces' → logprob: -7.6704607009887695
    7. ' ' → logprob: -8.92046070098877
    8. ' él' → logprob: -9.54546070098877
    9. 'element' → logprob: -9.67046070098877
    10. ' tokens' → logprob: -9.92046070098877

Token 72: ' non' (ID: 2893)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.7152450680732727
    2. ')' → logprob: -2.090245008468628
    3. '.' → logprob: -2.590245008468628
    4. '"""' → logprob: -2.590245008468628
    5. '):' → logprob: -2.715245008468628
    6. '\n' → logprob: -2.840245008468628
    7. '"""
' → logprob: -3.465245008468628
    8. '```' → logprob: -4.090245246887207
    9. ':' → logprob: -4.215245246887207
    10. '
' → logprob: -4.340245246887207

Token 73: ' encore' (ID: 14043)
  Prédit: ' trait'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' trait' → logprob: -0.12063071131706238
    2. 'trait' → logprob: -2.3706307411193848
    3. '_trait' → logprob: -4.495630741119385
    4. ' traité' → logprob: -5.870630741119385
    5. ' déjà' → logprob: -6.245630741119385
    6. 'dé' → logprob: -6.370630741119385
    7. '_' → logprob: -7.995630741119385
    8. 'tr' → logprob: -8.745630264282227
    9. ' ' → logprob: -8.870630264282227
    10. 'traits' → logprob: -8.995630264282227

Token 74: ' trait' (ID: 15458)
  Prédit: ' trait'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' trait' → logprob: -0.06349458545446396
    2. 'trait' → logprob: -2.8134946823120117
    3. ' pris' → logprob: -7.563494682312012
    4. ' traité' → logprob: -7.813494682312012
    5. 's' → logprob: -8.563494682312012
    6. '_trait' → logprob: -9.563494682312012
    7. 'pris' → logprob: -9.938494682312012
    8. ' cou' → logprob: -10.188494682312012
    9. ' couvert' → logprob: -10.313494682312012
    10. 'tra' → logprob: -10.688494682312012

Token 75: 'és' (ID: 1756)
  Prédit: 'és'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'és' → logprob: -0.0007908092229627073
    2. 'é' → logprob: -7.375790596008301
    3. 'es' → logprob: -9.1257905960083
    4. 'ées' → logprob: -10.5007905960083
    5. 'ÉS' → logprob: -11.7507905960083
    6. '```' → logprob: -11.7507905960083
    7. 'ée' → logprob: -13.0007905960083
    8. 'ès' → logprob: -13.5007905960083
    9. 'a' → logprob: -13.6257905960083
    10. ' és' → logprob: -13.6257905960083

Token 76: '.

' (ID: 364)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ')' → logprob: -0.7611263990402222
    2. '   ' → logprob: -1.5111263990402222
    3. '
' → logprob: -2.3861265182495117
    4. '):' → logprob: -2.5111265182495117
    5. '.' → logprob: -2.7611265182495117
    6. ',' → logprob: -4.136126518249512
    7. '"""' → logprob: -4.136126518249512
    8. ':' → logprob: -4.636126518249512
    9. '\n' → logprob: -4.636126518249512
    10. '):
' → logprob: -5.136126518249512

Token 77: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.27709445357322693
    2. '"""' → logprob: -1.7770944833755493
    3. '```' → logprob: -3.6520943641662598
    4. '"""
' → logprob: -3.6520943641662598
    5. '\n' → logprob: -4.15209436416626
    6. '""' → logprob: -6.27709436416626
    7. ')' → logprob: -6.52709436416626
    8. '
' → logprob: -7.40209436416626
    9. '"' → logprob: -8.277094841003418
    10. '``' → logprob: -8.902094841003418

Token 78: ' Args' (ID: 39185)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.17434822022914886
    2. '\n' → logprob: -3.0493481159210205
    3. '
' → logprob: -3.2993481159210205
    4. '```' → logprob: -3.7993481159210205
    5. '"""' → logprob: -3.7993481159210205
    6. ')' → logprob: -4.4243483543396
    7. ' 
' → logprob: -5.2993483543396
    8. '"""
' → logprob: -5.2993483543396
    9. ' """
' → logprob: -6.0493483543396
    10. ' """' → logprob: -6.4243483543396

Token 79: ':
' (ID: 734)
  Prédit: ','
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ',' → logprob: -0.16479668021202087
    2. ':' → logprob: -1.9147967100143433
    3. '):' → logprob: -6.664796829223633
    4. ' :' → logprob: -6.789796829223633
    5. ' ,' → logprob: -7.164796829223633
    6. '   ' → logprob: -7.789796829223633
    7. ')' → logprob: -8.164796829223633
    8. '[' → logprob: -8.789796829223633
    9. '```' → logprob: -8.914796829223633
    10. '=' → logprob: -9.289796829223633

Token 80: '       ' (ID: 309)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.3396754860877991
    2. ')' → logprob: -2.2146754264831543
    3. '    ' → logprob: -2.7146754264831543
    4. ' N' → logprob: -3.0896754264831543
    5. ' )' → logprob: -3.3396754264831543
    6. ' ' → logprob: -4.214675426483154
    7. 'N' → logprob: -4.714675426483154
    8. '```' → logprob: -6.214675426483154
    9. ' ):' → logprob: -6.589675426483154
    10. '):' → logprob: -6.839675426483154

Token 81: ' N' (ID: 478)
  Prédit: 'N'
  Correct (stricte): False
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'N' (adapté à ' N') → logprob: -0.07034196704626083
    2. ' N' → logprob: -2.9453420639038086
    3. '   ' → logprob: -4.195342063903809
    4. 'n' → logprob: -9.195342063903809
    5. '```' → logprob: -9.695342063903809
    6. '    ' → logprob: -10.195342063903809
    7. 'A' → logprob: -10.945342063903809
    8. ' ' → logprob: -11.445342063903809
    9. ' n' → logprob: -12.070342063903809
    10. '       ' → logprob: -12.070342063903809

Token 82: ' (' (ID: 350)
  Prédit: ','
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ',' → logprob: -0.00081963452976197
    2. ' ,' → logprob: -7.250819683074951
    3. ':' → logprob: -9.375819206237793
    4. '):' → logprob: -11.500819206237793
    5. ')' → logprob: -12.375819206237793
    6. ',int' → logprob: -12.625819206237793
    7. ':int' → logprob: -13.000819206237793
    8. '   ' → logprob: -13.750819206237793
    9. 'int' → logprob: -14.000819206237793
    10. '  ' → logprob: -14.625819206237793

Token 83: 'int' (ID: 491)
  Prédit: ','
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ',' → logprob: -0.7016357183456421
    2. 'int' → logprob: -1.201635718345642
    3. ' int' → logprob: -1.701635718345642
    4. ',int' → logprob: -4.201635837554932
    5. ' ,' → logprob: -5.326635837554932
    6. '   ' → logprob: -7.576635837554932
    7. '=int' → logprob: -8.326635360717773
    8. ':int' → logprob: -8.576635360717773
    9. ')' → logprob: -8.701635360717773
    10. '[int' → logprob: -9.576635360717773

Token 84: '):' (ID: 3127)
  Prédit: ','
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ',' → logprob: -0.015141117386519909
    2. ')' → logprob: -4.390141010284424
    3. '):' → logprob: -6.015141010284424
    4. '),' → logprob: -8.765141487121582
    5. '   ' → logprob: -11.515141487121582
    6. ' ,' → logprob: -11.765141487121582
    7. '<|end|>' → logprob: -12.890141487121582
    8. ' )' → logprob: -13.015141487121582
    9. ' ' → logprob: -13.390141487121582
    10. ',N' → logprob: -13.765141487121582

Token 85: ' Le' (ID: 2018)
  Prédit: ' Le'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' Le' → logprob: -0.2680473029613495
    2. ' Nombre' → logprob: -1.8930473327636719
    3. ' The' → logprob: -3.018047332763672
    4. ' nombre' → logprob: -4.518047332763672
    5. ' Number' → logprob: -4.518047332763672
    6. ' ' → logprob: -5.268047332763672
    7. ' le' → logprob: -5.643047332763672
    8. ' N' → logprob: -6.393047332763672
    9. 'Nombre' → logprob: -7.018047332763672
    10. ' number' → logprob: -7.518047332763672

Token 86: ' nombre' (ID: 9733)
  Prédit: ' nombre'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' nombre' → logprob: -0.009842856787145138
    2. 'nombre' → logprob: -4.759842872619629
    3. ' ' → logprob: -6.759842872619629
    4. ' nombres' → logprob: -10.884842872619629
    5. ' nomb' → logprob: -10.884842872619629
    6. ' n' → logprob: -12.259842872619629
    7. ' nombr' → logprob: -12.509842872619629
    8. ' number' → logprob: -12.759842872619629
    9. 'Nombre' → logprob: -12.884842872619629
    10. '   ' → logprob: -12.884842872619629

Token 87: ' total' (ID: 3609)
  Prédit: ' total'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' total' → logprob: -0.5644881129264832
    2. ' d' → logprob: -1.189488172531128
    3. ' ' → logprob: -2.314488172531128
    4. '_total' → logprob: -4.064487934112549
    5. 'total' → logprob: -4.939487934112549
    6. ' maximal' → logprob: -6.814487934112549
    7. ' de' → logprob: -6.939487934112549
    8. ' )' → logprob: -7.939487934112549
    9. '  ' → logprob: -8.439488410949707
    10. ')' → logprob: -8.564488410949707

Token 88: ' d' (ID: 272)
  Prédit: ' d'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' d' → logprob: -0.00585508206859231
    2. 'd' → logprob: -6.005855083465576
    3. ' ' → logprob: -6.380855083465576
    4. ' de' → logprob: -6.755855083465576
    5. ')' → logprob: -8.630854606628418
    6. ' des' → logprob: -9.130854606628418
    7. ' )' → logprob: -9.505854606628418
    8. '  ' → logprob: -10.005854606628418
    9. ' total' → logprob: -10.755854606628418
    10. 'de' → logprob: -11.005854606628418

Token 89: ''' (ID: 6)
  Prédit: ' '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' ' → logprob: -0.5746192932128906
    2. ' éléments' → logprob: -0.9496192932128906
    3. 'élé' → logprob: -3.0746192932128906
    4. ' elements' → logprob: -6.699619293212891
    5. ' espaces' → logprob: -7.324619293212891
    6. ' él' → logprob: -7.324619293212891
    7. ' é' → logprob: -8.19961929321289
    8. '  ' → logprob: -8.57461929321289
    9. ' élément' → logprob: -8.57461929321289
    10. ' )' → logprob: -8.82461929321289

Token 90: 'élé' (ID: 15228)
  Prédit: 'élé'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'élé' → logprob: -0.009209711104631424
    2. 'é' → logprob: -5.384209632873535
    3. ' éléments' → logprob: -5.759209632873535
    4. ''' → logprob: -7.134209632873535
    5. ''é' → logprob: -8.134209632873535
    6. 'él' → logprob: -9.009209632873535
    7. ' ' → logprob: -10.259209632873535
    8. ' é' → logprob: -10.384209632873535
    9. ' él' → logprob: -10.509209632873535
    10. 'elements' → logprob: -10.634209632873535

Token 91: 'ments' (ID: 1626)
  Prédit: 'ments'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'ments' → logprob: -0.000897885300219059
    2. 'm' → logprob: -7.1258978843688965
    3. 'nts' → logprob: -10.375898361206055
    4. 'ment' → logprob: -10.500898361206055
    5. 'me' → logprob: -11.250898361206055
    6. ')' → logprob: -12.375898361206055
    7. 'mé' → logprob: -13.000898361206055
    8. 'phants' → logprob: -13.250898361206055
    9. '```' → logprob: -13.250898361206055
    10. 'éments' → logprob: -13.500898361206055

Token 92: ' à' (ID: 1221)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ')' → logprob: -0.5274292826652527
    2. ',' → logprob: -1.5274293422698975
    3. '   ' → logprob: -1.7774293422698975
    4. ' )' → logprob: -5.152429103851318
    5. '):' → logprob: -5.152429103851318
    6. '```' → logprob: -5.277429103851318
    7. ' ,' → logprob: -5.777429103851318
    8. '),' → logprob: -6.402429103851318
    9. ',
' → logprob: -7.777429103851318
    10. '.' → logprob: -8.027429580688477

Token 93: ' traiter' (ID: 105852)
  Prédit: ' traiter'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' traiter' → logprob: -0.0030380822718143463
    2. 'trait' → logprob: -6.253037929534912
    3. 'tra' → logprob: -8.00303840637207
    4. ' tra' → logprob: -8.25303840637207
    5. 'tr' → logprob: -8.37803840637207
    6. '   ' → logprob: -9.87803840637207
    7. ' trait' → logprob: -10.00303840637207
    8. ' process' → logprob: -10.25303840637207
    9. 'process' → logprob: -10.25303840637207
    10. ' tr' → logprob: -11.00303840637207

Token 94: '.
' (ID: 558)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ')' → logprob: -0.21944673359394073
    2. ',' → logprob: -1.7194467782974243
    3. '   ' → logprob: -4.719446659088135
    4. '),' → logprob: -5.094446659088135
    5. '):' → logprob: -6.219446659088135
    6. '```' → logprob: -7.844446659088135
    7. '):
' → logprob: -9.344447135925293
    8. ')
' → logprob: -9.469447135925293
    9. ' ,' → logprob: -9.719447135925293
    10. ' )' → logprob: -9.844447135925293

Token 95: '       ' (ID: 309)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ')' → logprob: -0.1343633532524109
    2. '   ' → logprob: -3.0093634128570557
    3. '  
' → logprob: -4.009363174438477
    4. '
' → logprob: -4.259363174438477
    5. '```' → logprob: -4.384363174438477
    6. ' 
' → logprob: -5.134363174438477
    7. ',' → logprob: -5.134363174438477
    8. '    
' → logprob: -5.259363174438477
    9. '   
' → logprob: -5.259363174438477
    10. ' )' → logprob: -5.259363174438477

Token 96: ' K' (ID: 658)
  Prédit: '```'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '```' → logprob: -0.8934230208396912
    2. 'K' (adapté à ' K') → logprob: -1.518423080444336
    3. '   ' → logprob: -2.018423080444336
    4. ' K' → logprob: -2.143423080444336
    5. '
' → logprob: -3.768423080444336
    6. 'A' → logprob: -3.893423080444336
    7. ' ' → logprob: -4.268423080444336
    8. ' 
' → logprob: -4.268423080444336
    9. '"""' → logprob: -4.268423080444336
    10. ')' → logprob: -5.268423080444336

Token 97: ' (' (ID: 350)
  Prédit: '):'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '):' → logprob: -0.0892348662018776
    2. ')' → logprob: -2.8392348289489746
    3. ' (' → logprob: -4.964234828948975
    4. ',' → logprob: -4.964234828948975
    5. ' ):' → logprob: -5.214234828948975
    6. ':' → logprob: -5.464234828948975
    7. ':int' → logprob: -6.464234828948975
    8. ' ' → logprob: -7.839234828948975
    9. '):
' → logprob: -8.214235305786133
    10. ' )' → logprob: -8.839235305786133

Token 98: 'int' (ID: 491)
  Prédit: 'int'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'int' → logprob: -0.014750284142792225
    2. ' int' → logprob: -4.7647504806518555
    3. ')' → logprob: -5.2647504806518555
    4. ':int' → logprob: -7.6397504806518555
    5. ',' → logprob: -7.8897504806518555
    6. '=int' → logprob: -10.139750480651855
    7. ',int' → logprob: -10.889750480651855
    8. '[int' → logprob: -11.389750480651855
    9. '(int' → logprob: -11.889750480651855
    10. ':' → logprob: -12.264750480651855

Token 99: '):' (ID: 3127)
  Prédit: '):'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '):' → logprob: -0.0010475777089595795
    2. ')' → logprob: -7.751047611236572
    3. ' ):' → logprob: -7.876047611236572
    4. '):
' → logprob: -9.251047134399414
    5. ':' → logprob: -9.376047134399414
    6. ',' → logprob: -10.001047134399414
    7. '),' → logprob: -12.626047134399414
    8. '   ' → logprob: -13.251047134399414
    9. ')):' → logprob: -14.001047134399414
    10. '):

' → logprob: -14.001047134399414

Token 100: ' Le' (ID: 2018)
  Prédit: ' int'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' int' → logprob: -0.029069053009152412
    2. ' Le' → logprob: -3.654068946838379
    3. ' le' → logprob: -7.029068946838379
    4. 'int' → logprob: -7.029068946838379
    5. ' La' → logprob: -7.779068946838379
    6. ' L' → logprob: -9.404068946838379
    7. ' Nombre' → logprob: -9.529068946838379
    8. ')' → logprob: -9.654068946838379
    9. 'Le' → logprob: -9.654068946838379
    10. ' la' → logprob: -9.654068946838379

Token 101: ' nombre' (ID: 9733)
  Prédit: ' nombre'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' nombre' → logprob: -0.022827953100204468
    2. ' maximum' → logprob: -3.8978278636932373
    3. ' max' → logprob: -7.272828102111816
    4. 'nombre' → logprob: -7.772828102111816
    5. ' nombres' → logprob: -7.772828102111816
    6. ')' → logprob: -8.897828102111816
    7. ' maximal' → logprob: -9.147828102111816
    8. ' )' → logprob: -9.647828102111816
    9. ' premier' → logprob: -9.897828102111816
    10. ' number' → logprob: -9.897828102111816

Token 102: ' maximal' (ID: 65414)
  Prédit: ' d'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' d' → logprob: -1.4814648628234863
    2. ')' → logprob: -1.9814648628234863
    3. ' de' → logprob: -2.1064648628234863
    4. ' )' → logprob: -2.1064648628234863
    5. ' maximum' → logprob: -2.4814648628234863
    6. ' total' → logprob: -2.4814648628234863
    7. '_total' → logprob: -2.4814648628234863
    8. ' maximal' → logprob: -2.9814648628234863
    9. '_max' → logprob: -3.7314648628234863
    10. '_' → logprob: -3.9814648628234863

Token 103: ' d' (ID: 272)
  Prédit: ' d'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' d' → logprob: -0.014775888994336128
    2. ' ' → logprob: -4.51477575302124
    3. ' de' → logprob: -6.01477575302124
    4. 'd' → logprob: -7.26477575302124
    5. 's' → logprob: -8.889776229858398
    6. ' )' → logprob: -9.514776229858398
    7. ' des' → logprob: -9.639776229858398
    8. ')' → logprob: -9.764776229858398
    9. '  ' → logprob: -9.764776229858398
    10. ' par' → logprob: -10.139776229858398

Token 104: ''' (ID: 6)
  Prédit: 'élé'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'élé' → logprob: -0.4750632643699646
    2. ' éléments' → logprob: -1.2250633239746094
    3. ''' → logprob: -2.6000633239746094
    4. ''é' → logprob: -5.350063323974609
    5. ' elements' → logprob: -6.475063323974609
    6. ' ' → logprob: -7.225063323974609
    7. '_' → logprob: -7.475063323974609
    8. ' é' → logprob: -8.22506332397461
    9. ' élément' → logprob: -8.35006332397461
    10. ' él' → logprob: -8.47506332397461

Token 105: 'élé' (ID: 15228)
  Prédit: 'élé'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'élé' → logprob: -0.021537119522690773
    2. ' éléments' → logprob: -3.8965370655059814
    3. ''' → logprob: -8.396536827087402
    4. 'é' → logprob: -8.396536827087402
    5. '_' → logprob: -8.521536827087402
    6. ' él' → logprob: -9.521536827087402
    7. 'él' → logprob: -9.896536827087402
    8. ' ' → logprob: -9.896536827087402
    9. ''é' → logprob: -10.521536827087402
    10. ' é' → logprob: -10.771536827087402

Token 106: 'ments' (ID: 1626)
  Prédit: 'ments'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'ments' → logprob: -4.930552313453518e-05
    2. 'ment' → logprob: -10.125049591064453
    3. 'm' → logprob: -12.625049591064453
    4. 'éments' → logprob: -13.375049591064453
    5. '```' → logprob: -13.750049591064453
    6. '   ' → logprob: -14.500049591064453
    7. 'MENTS' → logprob: -14.750049591064453
    8. 'ements' → logprob: -14.875049591064453
    9. 'mente' → logprob: -15.000049591064453
    10. '	' → logprob: -15.375049591064453

Token 107: ' pouvant' (ID: 104840)
  Prédit: ' à'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' à' → logprob: -0.649835467338562
    2. ' par' → logprob: -1.899835467338562
    3. ' que' → logprob: -2.0248355865478516
    4. ' ' → logprob: -2.6498355865478516
    5. ' )' → logprob: -3.2748355865478516
    6. ')' → logprob: -3.6498355865478516
    7. ' pouvant' → logprob: -4.024835586547852
    8. ' trait' → logprob: -4.899835586547852
    9. ',' → logprob: -5.274835586547852
    10. ' ,' → logprob: -5.524835586547852

Token 108: ' être' (ID: 9104)
  Prédit: 'être'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'être' → logprob: -0.3167831003665924
    2. ' être' → logprob: -1.31678307056427
    3. 'êtres' → logprob: -6.8167829513549805
    4. 'etre' → logprob: -7.3167829513549805
    5. ''être' → logprob: -7.5667829513549805
    6. 'êt' → logprob: -7.9417829513549805
    7. ' etre' → logprob: -8.06678295135498
    8. 'tre' → logprob: -9.31678295135498
    9. 'Ê' → logprob: -9.31678295135498
    10. '’être' → logprob: -9.31678295135498

Token 109: ' trait' (ID: 15458)
  Prédit: 'trait'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'trait' → logprob: -0.3527171313762665
    2. ' trait' → logprob: -1.2277171611785889
    3. 'transport' → logprob: -6.72771692276001
    4. 'pris' → logprob: -7.10271692276001
    5. 'process' → logprob: -7.22771692276001
    6. ' transport' → logprob: -7.72771692276001
    7. ' pris' → logprob: -7.72771692276001
    8. 'import' → logprob: -9.477717399597168
    9. 'tra' → logprob: -9.477717399597168
    10. ' traité' → logprob: -9.727717399597168

Token 110: 'és' (ID: 1756)
  Prédit: 'és'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'és' → logprob: -0.014283623546361923
    2. 's' → logprob: -4.639283657073975
    3. 'é' → logprob: -5.639283657073975
    4. ')' → logprob: -7.764283657073975
    5. 'es' → logprob: -8.389283180236816
    6. 'er' → logprob: -8.889283180236816
    7. ',' → logprob: -9.889283180236816
    8. '```' → logprob: -10.389283180236816
    9. '   ' → logprob: -11.014283180236816
    10. 'à' → logprob: -11.639283180236816

Token 111: ' lors' (ID: 15456)
  Prédit: ' simult'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' simult' → logprob: -1.4429781436920166
    2. ' à' → logprob: -1.5679781436920166
    3. ' par' → logprob: -1.6929781436920166
    4. ' ' → logprob: -1.8179781436920166
    5. ' en' → logprob: -1.8179781436920166
    6. ' lors' → logprob: -3.9429781436920166
    7. ',' → logprob: -4.3179779052734375
    8. ')' → logprob: -5.6929779052734375
    9. 'par' → logprob: -5.9429779052734375
    10. ' dans' → logprob: -6.3179779052734375

Token 112: ' du' (ID: 1462)
  Prédit: ' d'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' d' → logprob: -0.1006825789809227
    2. ' du' → logprob: -3.600682497024536
    3. 'd' → logprob: -4.100682735443115
    4. ' lors' → logprob: -4.100682735443115
    5. ' )' → logprob: -4.475682735443115
    6. ' le' → logprob: -4.850682735443115
    7. ' de' → logprob: -4.975682735443115
    8. ' ' → logprob: -6.100682735443115
    9. ' au' → logprob: -6.600682735443115
    10. ')' → logprob: -6.725682735443115

Token 113: ' premier' (ID: 15506)
  Prédit: ' premier'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' premier' → logprob: -0.13176430761814117
    2. 'prem' → logprob: -2.1317644119262695
    3. ' voyage' → logprob: -5.7567644119262695
    4. ' prochain' → logprob: -7.7567644119262695
    5. ' ' → logprob: -7.8817644119262695
    6. ' first' → logprob: -8.50676441192627
    7. 'voy' → logprob: -9.38176441192627
    8. ' passage' → logprob: -10.00676441192627
    9. ' même' → logprob: -10.00676441192627
    10. '```' → logprob: -10.19426441192627

Token 114: ' voyage' (ID: 35454)
  Prédit: ' voyage'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' voyage' → logprob: -0.0027425887528806925
    2. 'voy' → logprob: -6.877742767333984
    3. ' ' → logprob: -7.252742767333984
    4. '_' → logprob: -8.252742767333984
    5. ' )' → logprob: -8.752742767333984
    6. ' trip' → logprob: -9.127742767333984
    7. ' déplacement' → logprob: -9.127742767333984
    8. ')' → logprob: -9.502742767333984
    9. ' trajet' → logprob: -10.002742767333984
    10. ' passage' → logprob: -10.377742767333984

Token 115: ',
' (ID: 412)
  Prédit: ','
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ',' → logprob: -0.4412722587585449
    2. '):' → logprob: -1.191272258758545
    3. ')' → logprob: -3.191272258758545
    4. '):
' → logprob: -5.441272258758545
    5. '.' → logprob: -5.566272258758545
    6. '   ' → logprob: -6.691272258758545
    7. ':' → logprob: -7.191272258758545
    8. ',
' → logprob: -7.816272258758545
    9. ' ,' → logprob: -7.941272258758545
    10. ' ):' → logprob: -7.941272258758545

Token 116: '                ' (ID: 408)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.1648053675889969
    2. '       ' → logprob: -2.9148054122924805
    3. ')' → logprob: -3.5398054122924805
    4. ',' → logprob: -3.6648054122924805
    5. '):' → logprob: -4.1648054122924805
    6. ' )' → logprob: -4.7898054122924805
    7. ' ):' → logprob: -5.4148054122924805
    8. ' ' → logprob: -5.7898054122924805
    9. '):
' → logprob: -5.7898054122924805
    10. '    ' → logprob: -6.0398054122924805

Token 117: ' puis' (ID: 18766)
  Prédit: ' y'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' y' → logprob: -0.015789281576871872
    2. ' inclu' → logprob: -5.26578950881958
    3. ' et' → logprob: -6.01578950881958
    4. 'y' → logprob: -6.39078950881958
    5. ' puis' → logprob: -7.26578950881958
    6. ' including' → logprob: -7.39078950881958
    7. ',' → logprob: -7.64078950881958
    8. ' soit' → logprob: -7.76578950881958
    9. ' donc' → logprob: -7.76578950881958
    10. ' mais' → logprob: -7.89078950881958

Token 118: ' chaque' (ID: 21194)
  Prédit: ' K'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' K' → logprob: -0.2031143754720688
    2. ' au' → logprob: -2.3281142711639404
    3. ' (' → logprob: -3.9531142711639404
    4. ' un' → logprob: -4.2031145095825195
    5. ' le' → logprob: -4.5781145095825195
    6. ' jusqu' → logprob: -4.8281145095825195
    7. ' ' → logprob: -4.9531145095825195
    8. 'K' → logprob: -5.2031145095825195
    9. 'au' → logprob: -5.3281145095825195
    10. ' lors' → logprob: -5.4531145095825195

Token 119: ' voyage' (ID: 35454)
  Prédit: ' voyage'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' voyage' → logprob: -0.015068537555634975
    2. 'voy' → logprob: -4.390068531036377
    3. '_' → logprob: -7.015068531036377
    4. ' _' → logprob: -7.265068531036377
    5. ' ' → logprob: -7.390068531036377
    6. '_v' → logprob: -9.640069007873535
    7. ' voyages' → logprob: -10.265069007873535
    8. ' ' → logprob: -10.390069007873535
    9. ' viagem' → logprob: -10.515069007873535
    10. ' subsequent' → logprob: -10.640069007873535

Token 120: ' suivant' (ID: 68705)
  Prédit: ' suivant'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' suivant' → logprob: -0.5124034285545349
    2. ' peut' → logprob: -1.0124034881591797
    3. '   ' → logprob: -5.38740348815918
    4. ' subs' → logprob: -5.38740348815918
    5. ' suivants' → logprob: -5.63740348815918
    6. ' ' → logprob: -5.88740348815918
    7. ' subsequent' → logprob: -5.88740348815918
    8. ')' → logprob: -6.13740348815918
    9. ' suivante' → logprob: -6.13740348815918
    10. ' supplémentaire' → logprob: -6.26240348815918

Token 121: ' peut' (ID: 9216)
  Prédit: ' peut'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' peut' → logprob: -0.005820245016366243
    2. ')' → logprob: -5.880820274353027
    3. ' peux' → logprob: -7.005820274353027
    4. ' can' → logprob: -7.380820274353027
    5. ' traite' → logprob: -7.630820274353027
    6. 'pe' → logprob: -8.380820274353027
    7. ' ' → logprob: -8.380820274353027
    8. ' peuvent' → logprob: -9.005820274353027
    9. ' )' → logprob: -9.005820274353027
    10. ' pourra' → logprob: -10.505820274353027

Token 122: ' ajouter' (ID: 78457)
  Prédit: ' traiter'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' traiter' → logprob: -0.0035513662733137608
    2. 'trait' → logprob: -6.253551483154297
    3. ' trait' → logprob: -6.878551483154297
    4. ' tra' → logprob: -8.003551483154297
    5. 'tra' → logprob: -9.378551483154297
    6. ' traite' → logprob: -10.503551483154297
    7. ' process' → logprob: -11.003551483154297
    8. ' transporter' → logprob: -11.003551483154297
    9. ' ' → logprob: -11.128551483154297
    10. ' traitement' → logprob: -11.253551483154297

Token 123: ' jusqu' (ID: 21961)
  Prédit: ' jusqu'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' jusqu' → logprob: -0.25536277890205383
    2. ' au' → logprob: -2.8803627490997314
    3. ' ' → logprob: -3.0053627490997314
    4. ' K' → logprob: -3.0053627490997314
    5. ' up' → logprob: -3.6303627490997314
    6. ' un' → logprob: -3.7553627490997314
    7. 'jus' → logprob: -5.3803629875183105
    8. ' une' → logprob: -6.0053629875183105
    9. 'au' → logprob: -6.2553629875183105
    10. 'K' → logprob: -6.2553629875183105

Token 124: ''à' (ID: 33688)
  Prédit: ''à'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ''à' → logprob: -0.020310038700699806
    2. 'à' → logprob: -4.395309925079346
    3. ' à' → logprob: -5.520309925079346
    4. '=' → logprob: -5.895309925079346
    5. '’à' → logprob: -7.145309925079346
    6. '   ' → logprob: -9.145310401916504
    7. ''' → logprob: -9.895310401916504
    8. ''au' → logprob: -11.020310401916504
    9. '```' → logprob: -11.395310401916504
    10. 'a' → logprob: -11.770310401916504

Token 125: ' K' (ID: 658)
  Prédit: ' K'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' K' → logprob: -0.030474817380309105
    2. 'K' → logprob: -4.405474662780762
    3. ' (' → logprob: -4.530474662780762
    4. ' ' → logprob: -5.405474662780762
    5. '1' → logprob: -6.405474662780762
    6. '(' → logprob: -7.780474662780762
    7. '`' → logprob: -8.655474662780762
    8. '(K' → logprob: -8.905474662780762
    9. ' ' → logprob: -9.655474662780762
    10. ''' → logprob: -10.405474662780762

Token 126: '-' (ID: 12)
  Prédit: '-'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '-' → logprob: -0.31328052282333374
    2. ' -' → logprob: -1.3132805824279785
    3. ' ' → logprob: -12.18828010559082
    4. '<|end|>' → logprob: -12.18828010559082
    5. ' minus' → logprob: -13.87578010559082
    6. '1' → logprob: -13.93828010559082
    7. '```' → logprob: -13.93828010559082
    8. '   ' → logprob: -14.12578010559082
    9. 'minus' → logprob: -14.25078010559082
    10. ')' → logprob: -14.50078010559082

Token 127: '1' (ID: 16)
  Prédit: '1'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '1' → logprob: -0.016049383208155632
    2. ' ' → logprob: -4.141049385070801
    3. '2' → logprob: -11.8910493850708
    4. '-' → logprob: -12.1410493850708
    5. '<|end|>' → logprob: -13.8910493850708
    6. ' -' → logprob: -14.3910493850708
    7. '```' → logprob: -14.5160493850708
    8. ' ' → logprob: -15.1410493850708
    9. ')' → logprob: -16.828548431396484
    10. '0' → logprob: -16.891048431396484

Token 128: ' nouveaux' (ID: 43964)
  Prédit: ' éléments'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' éléments' → logprob: -0.054667286574840546
    2. 'élé' → logprob: -3.1796672344207764
    3. ')' → logprob: -5.6796674728393555
    4. ' elements' → logprob: -5.8046674728393555
    5. ' )' → logprob: -5.9296674728393555
    6. ' nouveaux' → logprob: -6.6796674728393555
    7. ' ' → logprob: -7.6796674728393555
    8. 'elements' → logprob: -8.179667472839355
    9. ' élément' → logprob: -9.179667472839355
    10. '```' → logprob: -9.554667472839355

Token 129: ' éléments' (ID: 57375)
  Prédit: ' éléments'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' éléments' → logprob: -0.16323693096637726
    2. 'élé' → logprob: -1.9132369756698608
    3. ' elements' → logprob: -6.28823709487915
    4. 'elements' → logprob: -8.038236618041992
    5. ')' → logprob: -8.413236618041992
    6. ' élément' → logprob: -8.413236618041992
    7. ' )' → logprob: -8.788236618041992
    8. ' espaces' → logprob: -9.288236618041992
    9. ' ' → logprob: -10.788236618041992
    10. ' él' → logprob: -11.288236618041992

Token 130: '.
' (ID: 558)
  Prédit: '.'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '.' → logprob: -1.1515717506408691
    2. ')' → logprob: -1.4015717506408691
    3. '   ' → logprob: -1.9015717506408691
    4. ',' → logprob: -2.026571750640869
    5. ' )' → logprob: -3.026571750640869
    6. ').' → logprob: -3.151571750640869
    7. '):
' → logprob: -3.901571750640869
    8. '):' → logprob: -4.276571750640869
    9. ' ,' → logprob: -4.776571750640869
    10. ' ).' → logprob: -5.526571750640869

Token 131: '       ' (ID: 309)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.15764160454273224
    2. ')' → logprob: -2.157641649246216
    3. ')
' → logprob: -4.407641410827637
    4. '"""
' → logprob: -5.657641410827637
    5. '"""' → logprob: -5.907641410827637
    6. '
' → logprob: -6.032641410827637
    7. '):
' → logprob: -6.032641410827637
    8. '\n' → logprob: -6.407641410827637
    9. ' """
' → logprob: -7.032641410827637
    10. ' )' → logprob: -7.157641410827637

Token 132: ' A' (ID: 355)
  Prédit: '"""
'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '"""
' → logprob: -0.5770768523216248
    2. '   ' → logprob: -1.2020769119262695
    3. 'Returns' → logprob: -2.3270769119262695
    4. '"""' → logprob: -4.3270769119262695
    5. ' """
' → logprob: -4.7020769119262695
    6. '
' → logprob: -4.8270769119262695
    7. 'A' (adapté à ' A') → logprob: -5.7020769119262695
    8. '```' → logprob: -5.8270769119262695
    9. ' Returns' → logprob: -6.8270769119262695
    10. 'returns' → logprob: -6.9520769119262695

Token 133: ' (' (ID: 350)
  Prédit: '):'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '):' → logprob: -0.010808689519762993
    2. ')' → logprob: -4.88580846786499
    3. '):
' → logprob: -6.76080846786499
    4. ',' → logprob: -6.76080846786499
    5. ':' → logprob: -7.26080846786499
    6. '<|end|>' → logprob: -10.135808944702148
    7. ' ):' → logprob: -10.385808944702148
    8. '):

' → logprob: -10.510808944702148
    9. '):
' → logprob: -10.635808944702148
    10. '[' → logprob: -11.510808944702148

Token 134: 'List' (ID: 950)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')' → logprob: -0.15060077607631683
    2. 'List' → logprob: -2.6506006717681885
    3. '):' → logprob: -3.4006006717681885
    4. 'list' → logprob: -3.5256006717681885
    5. '[int' → logprob: -5.900600910186768
    6. 'int' → logprob: -6.400600910186768
    7. '[List' → logprob: -7.525600910186768
    8. '):
' → logprob: -7.900600910186768
    9. '[' → logprob: -8.40060043334961
    10. '[]):' → logprob: -8.65060043334961

Token 135: '[int' (ID: 40124)
  Prédit: '[int'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '[int' → logprob: -0.00011892046313732862
    2. '<int' → logprob: -9.62511920928955
    3. ')' → logprob: -10.12511920928955
    4. '[' → logprob: -11.62511920928955
    5. '):' → logprob: -13.50011920928955
    6. 'int' → logprob: -13.75011920928955
    7. '[Int' → logprob: -14.87511920928955
    8. ']int' → logprob: -15.37511920928955
    9. ',' → logprob: -16.125118255615234
    10. ',int' → logprob: -16.250118255615234

Token 136: ']):' (ID: 60705)
  Prédit: '])'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '])' → logprob: -0.002824016148224473
    2. ']' → logprob: -6.252823829650879
    3. '])]' → logprob: -8.127823829650879
    4. ')' → logprob: -8.627823829650879
    5. ')])' → logprob: -8.877823829650879
    6. '],' → logprob: -9.252823829650879
    7. ']):' → logprob: -9.627823829650879
    8. ']),' → logprob: -10.502823829650879
    9. ' ])' → logprob: -10.627823829650879
    10. ']])' → logprob: -10.752823829650879

Token 137: ' La' (ID: 3038)
  Prédit: ' list'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' list' → logprob: -0.6666483283042908
    2. ' List' → logprob: -1.1666483879089355
    3. 'List' → logprob: -2.4166483879089355
    4. ' la' → logprob: -3.9166483879089355
    5. 'list' → logprob: -4.0416483879089355
    6. ')' → logprob: -4.0416483879089355
    7. ' ' → logprob: -4.5416483879089355
    8. ' A' → logprob: -5.4166483879089355
    9. '[]' → logprob: -5.5416483879089355
    10. '<|end|>' → logprob: -5.7916483879089355

Token 138: ' liste' (ID: 31719)
  Prédit: ' liste'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' liste' → logprob: -0.09687427431344986
    2. 'liste' → logprob: -3.596874237060547
    3. ' list' → logprob: -3.721874237060547
    4. ' A' → logprob: -4.221874237060547
    5. ' longueur' → logprob: -5.846874237060547
    6. 'A' → logprob: -6.096874237060547
    7. ' sorted' → logprob: -6.346874237060547
    8. ' Liste' → logprob: -6.471874237060547
    9. ' taille' → logprob: -6.971874237060547
    10. ' elements' → logprob: -6.971874237060547

Token 139: ' des' (ID: 731)
  Prédit: ' des'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' des' → logprob: -0.0564810074865818
    2. '<|end|>' → logprob: -3.181481122970581
    3. ' d' → logprob: -5.056480884552002
    4. '[int' → logprob: -5.806480884552002
    5. ')' → logprob: -5.931480884552002
    6. ' de' → logprob: -8.05648136138916
    7. 'des' → logprob: -8.30648136138916
    8. ' of' → logprob: -8.43148136138916
    9. ' ' → logprob: -9.05648136138916
    10. '_des' → logprob: -9.43148136138916

Token 140: ' éléments' (ID: 57375)
  Prédit: ' éléments'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' éléments' → logprob: -0.5867260098457336
    2. 'élé' → logprob: -0.8367260098457336
    3. ' indices' → logprob: -5.336726188659668
    4. ' elements' → logprob: -6.336726188659668
    5. 'indices' → logprob: -6.836726188659668
    6. 'positions' → logprob: -7.086726188659668
    7. 'elements' → logprob: -7.211726188659668
    8. ' positions' → logprob: -7.961726188659668
    9. 'é' → logprob: -8.961726188659668
    10. ' élément' → logprob: -9.086726188659668

Token 141: ' à' (ID: 1221)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')' → logprob: -0.29288700222969055
    2. ' à' → logprob: -2.542886972427368
    3. ' )' → logprob: -2.667886972427368
    4. ',' → logprob: -2.667886972427368
    5. ']' → logprob: -4.417887210845947
    6. '   ' → logprob: -4.917887210845947
    7. ' ' → logprob: -5.042887210845947
    8. ' ,' → logprob: -5.917887210845947
    9. ' ]' → logprob: -6.042887210845947
    10. '.' → logprob: -6.917887210845947

Token 142: ' traiter' (ID: 105852)
  Prédit: 'trait'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'trait' → logprob: -0.06617645919322968
    2. ' traiter' → logprob: -2.941176414489746
    3. 'tr' → logprob: -4.816176414489746
    4. 'tra' → logprob: -5.941176414489746
    5. 'process' → logprob: -8.316176414489746
    6. '```' → logprob: -9.066176414489746
    7. ' trait' → logprob: -10.566176414489746
    8. '_trait' → logprob: -10.566176414489746
    9. ' tra' → logprob: -11.066176414489746
    10. ' ' → logprob: -11.941176414489746

Token 143: '.

' (ID: 364)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ')' → logprob: -0.011618070304393768
    2. '   ' → logprob: -5.011618137359619
    3. '):' → logprob: -5.761618137359619
    4. ',' → logprob: -7.386618137359619
    5. '):
' → logprob: -8.011617660522461
    6. ' )' → logprob: -8.511617660522461
    7. '),' → logprob: -8.636617660522461
    8. ')
' → logprob: -8.886617660522461
    9. '.' → logprob: -9.511617660522461
    10. ']' → logprob: -9.511617660522461

Token 144: '   ' (ID: 271)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')' → logprob: -0.32683876156806946
    2. '   ' → logprob: -1.701838731765747
    3. '):' → logprob: -2.701838731765747
    4. '):
' → logprob: -4.201838970184326
    5. '"""' → logprob: -4.451838970184326
    6. '"""
' → logprob: -7.201838970184326
    7. ')
' → logprob: -7.326838970184326
    8. '```' → logprob: -7.826838970184326
    9. ' )' → logprob: -8.576838493347168
    10. ' """' → logprob: -8.701838493347168

Token 145: ' Returns' (ID: 9609)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.6557366847991943
    2. ')' → logprob: -1.4057366847991943
    3. '"""' → logprob: -1.5307366847991943
    4. '"""
' → logprob: -4.280736923217773
    5. '```' → logprob: -6.655736923217773
    6. ' """' → logprob: -6.780736923217773
    7. ')
' → logprob: -7.030736923217773
    8. '""' → logprob: -7.655736923217773
    9. '):' → logprob: -7.780736923217773
    10. ' """
' → logprob: -7.905736923217773

Token 146: ':
' (ID: 734)
  Prédit: ':'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ':' → logprob: -0.4473337233066559
    2. ' :' → logprob: -1.0723336935043335
    3. ' math' → logprob: -4.822333812713623
    4. ':int' → logprob: -5.947333812713623
    5. '<|end|>' → logprob: -6.322333812713623
    6. '  ' → logprob: -6.572333812713623
    7. '   ' → logprob: -6.822333812713623
    8. ' ' → logprob: -6.947333812713623
    9. ' int' → logprob: -7.572333812713623
    10. 'int' → logprob: -7.947333812713623

Token 147: '       ' (ID: 309)
  Prédit: ' int'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' int' → logprob: -0.02673552930355072
    2. 'int' → logprob: -4.026735305786133
    3. '   ' → logprob: -4.776735305786133
    4. '    ' → logprob: -9.401735305786133
    5. '       ' → logprob: -10.651735305786133
    6. ' math' → logprob: -12.526735305786133
    7. '(int' → logprob: -12.651735305786133
    8. '
' → logprob: -13.026735305786133
    9. ' ' → logprob: -13.526735305786133
    10. '  ' → logprob: -13.526735305786133

Token 148: ' int' (ID: 677)
  Prédit: 'int'
  Correct (stricte): False
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'int' (adapté à ' int') → logprob: -0.4741794764995575
    2. ' int' → logprob: -0.9741795063018799
    3. '   ' → logprob: -9.2241792678833
    4. '
' → logprob: -13.9741792678833
    5. ' 
' → logprob: -14.5991792678833
    6. ' math' → logprob: -14.8491792678833
    7. '(int' → logprob: -14.9741792678833
    8. '```' → logprob: -15.0991792678833
    9. '[int' → logprob: -15.5991792678833
    10. 'math' → logprob: -16.099180221557617

Token 149: ':' (ID: 25)
  Prédit: ':'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ':' → logprob: -0.15150214731693268
    2. ' :' → logprob: -2.2765021324157715
    3. '):' → logprob: -3.4015021324157715
    4. ' ):' → logprob: -6.5265021324157715
    5. ')' → logprob: -6.7765021324157715
    6. '<|end|>' → logprob: -6.9015021324157715
    7. '   ' → logprob: -8.02650260925293
    8. '    ' → logprob: -9.02650260925293
    9. ' )' → logprob: -9.52650260925293
    10. ',' → logprob: -9.65150260925293

Token 150: ' Le' (ID: 2018)
  Prédit: ' Le'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' Le' → logprob: -0.16865000128746033
    2. ' math' → logprob: -2.418649911880493
    3. ' le' → logprob: -3.043649911880493
    4. '   ' → logprob: -4.543650150299072
    5. 'Le' → logprob: -6.043650150299072
    6. ' nombre' → logprob: -6.168650150299072
    7. ' (' → logprob: -7.418650150299072
    8. ' minimum' → logprob: -7.418650150299072
    9. ' La' → logprob: -7.418650150299072
    10. ' the' → logprob: -8.043649673461914

Token 151: ' nombre' (ID: 9733)
  Prédit: ' nombre'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' nombre' → logprob: -0.0012535653077065945
    2. 'nombre' → logprob: -7.501253604888916
    3. ' minimum' → logprob: -7.876253604888916
    4. ' number' → logprob: -8.251253128051758
    5. ' nombres' → logprob: -10.501253128051758
    6. ' minimal' → logprob: -11.251253128051758
    7. ' space' → logprob: -12.251253128051758
    8. ' math' → logprob: -12.376253128051758
    9. ' maximum' → logprob: -12.501253128051758
    10. ' espace' → logprob: -13.751253128051758

Token 152: ' minimum' (ID: 11085)
  Prédit: '_'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_' → logprob: -0.4614020586013794
    2. ' minimal' → logprob: -1.4614020586013794
    3. ' minimum' → logprob: -2.21140193939209
    4. ' de' → logprob: -4.33640193939209
    5. ' ' → logprob: -5.58640193939209
    6. 'minimum' → logprob: -6.08640193939209
    7. ' d' → logprob: -6.58640193939209
    8. '_min' → logprob: -6.83640193939209
    9. ' _' → logprob: -6.96140193939209
    10. ' minimale' → logprob: -7.21140193939209

Token 153: ' de' (ID: 334)
  Prédit: ' de'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' de' → logprob: -0.39952149987220764
    2. ' ' → logprob: -1.6495214700698853
    3. '_' → logprob: -2.024521589279175
    4. ' d' → logprob: -6.149521350860596
    5. ' des' → logprob: -7.399521350860596
    6. ' _' → logprob: -7.399521350860596
    7. '  ' → logprob: -7.524521350860596
    8. '_de' → logprob: -7.649521350860596
    9. ' ' → logprob: -8.149521827697754
    10. '   ' → logprob: -9.274521827697754

Token 154: ' voyages' (ID: 113716)
  Prédit: ' voyages'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' voyages' → logprob: -0.010071839205920696
    2. 'voy' → logprob: -4.760071754455566
    3. ' trips' → logprob: -7.010071754455566
    4. '_' → logprob: -8.135071754455566
    5. ' déplacements' → logprob: -9.635071754455566
    6. ' viagens' → logprob: -10.385071754455566
    7. ' viajes' → logprob: -10.510071754455566
    8. ' voy' → logprob: -10.510071754455566
    9. ' voyage' → logprob: -11.010071754455566
    10. ' voyageurs' → logprob: -11.010071754455566

Token 155: ' nécessaires' (ID: 74402)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.14417076110839844
    2. ' nécessaires' → logprob: -2.7691707611083984
    3. ' nécessaire' → logprob: -3.5191707611083984
    4. '_' → logprob: -5.394170761108398
    5. '    
' → logprob: -5.644170761108398
    6. ' ' → logprob: -5.644170761108398
    7. '(
' → logprob: -5.769170761108398
    8. '_required' → logprob: -5.894170761108398
    9. '_needed' → logprob: -6.144170761108398
    10. ')' → logprob: -6.144170761108398

Token 156: ' pour' (ID: 1930)
  Prédit: ':'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ':' → logprob: -0.5635201334953308
    2. '   ' → logprob: -1.1885201930999756
    3. ':
' → logprob: -2.1885201930999756
    4. ')' → logprob: -5.4385199546813965
    5. '):' → logprob: -5.9385199546813965
    6. '.' → logprob: -6.0635199546813965
    7. '```' → logprob: -6.9385199546813965
    8. '):
' → logprob: -7.0635199546813965
    9. '\n' → logprob: -7.1885199546813965
    10. '
' → logprob: -7.4385199546813965

Token 157: ' traiter' (ID: 105852)
  Prédit: ' traiter'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' traiter' → logprob: -0.0049534933641552925
    2. 'trait' → logprob: -5.754953384399414
    3. ' terminer' → logprob: -7.629953384399414
    4. ' couvrir' → logprob: -7.629953384399414
    5. ' tra' → logprob: -8.379953384399414
    6. ' trait' → logprob: -8.504953384399414
    7. 'tra' → logprob: -9.504953384399414
    8. ' tout' → logprob: -10.004953384399414
    9. ' effectuer' → logprob: -10.004953384399414
    10. ' accompl' → logprob: -10.379953384399414

Token 158: ' tous' (ID: 10688)
  Prédit: ' tous'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' tous' → logprob: -0.020581595599651337
    2. ' tout' → logprob: -4.8955817222595215
    3. ' ' → logprob: -5.2705817222595215
    4. 't' → logprob: -6.5205817222595215
    5. ' l' → logprob: -6.5205817222595215
    6. ' all' → logprob: -6.6455817222595215
    7. ' ' → logprob: -6.8955817222595215
    8. ' toutes' → logprob: -7.1455817222595215
    9. ' toute' → logprob: -7.7705817222595215
    10. ' todos' → logprob: -8.145581245422363

Token 159: ' les' (ID: 1341)
  Prédit: ' les'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' les' → logprob: -0.001216305885463953
    2. 'les' → logprob: -6.876216411590576
    3. ' l' → logprob: -9.376215934753418
    4. ' ' → logprob: -10.501215934753418
    5. ' the' → logprob: -11.251215934753418
    6. ')' → logprob: -11.751215934753418
    7. 's' → logprob: -11.876215934753418
    8. ' la' → logprob: -12.001215934753418
    9. ' els' → logprob: -12.001215934753418
    10. 'l' → logprob: -12.126215934753418

Token 160: ' éléments' (ID: 57375)
  Prédit: ' éléments'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' éléments' → logprob: -0.6357244253158569
    2. 'élé' → logprob: -0.7607244253158569
    3. ' élément' → logprob: -6.7607245445251465
    4. ' ' → logprob: -7.0107245445251465
    5. ' elements' → logprob: -8.010724067687988
    6. ' é' → logprob: -8.385724067687988
    7. ' él' → logprob: -8.385724067687988
    8. 'é' → logprob: -9.635724067687988
    9. 'elements' → logprob: -9.760724067687988
    10. '_' → logprob: -10.010724067687988

Token 161: '.
' (ID: 558)
  Prédit: '.'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '.' → logprob: -0.12074809521436691
    2. ')' → logprob: -2.3707480430603027
    3. '   ' → logprob: -4.370748043060303
    4. '.
' → logprob: -5.745748043060303
    5. ').' → logprob: -6.370748043060303
    6. ',' → logprob: -7.120748043060303
    7. '."""' → logprob: -7.370748043060303
    8. 's' → logprob: -8.120748519897461
    9. '```' → logprob: -8.495748519897461
    10. '"""' → logprob: -8.870748519897461

Token 162: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.004813034553080797
    2. '"""' → logprob: -5.629813194274902
    3. '"""
' → logprob: -6.754813194274902
    4. '```' → logprob: -10.504813194274902
    5. ')' → logprob: -12.004813194274902
    6. ' """
' → logprob: -12.754813194274902
    7. ' """' → logprob: -12.879813194274902
    8. '    ' → logprob: -13.254813194274902
    9. '\n' → logprob: -13.254813194274902
    10. '""' → logprob: -13.754813194274902

Token 163: ' """
' (ID: 7037)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.09915821254253387
    2. '"""' → logprob: -2.84915828704834
    3. ')' → logprob: -3.47415828704834
    4. '"""
' (adapté à ' """
') → logprob: -5.72415828704834
    5. '```' → logprob: -6.22415828704834
    6. ')
' → logprob: -9.59915828704834
    7. ' """' → logprob: -10.09915828704834
    8. '""' → logprob: -10.22415828704834
    9. '    
' → logprob: -10.72415828704834
    10. '\n' → logprob: -10.72415828704834

Token 164: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.007344888988882303
    2. '    
' → logprob: -5.007344722747803
    3. '
' → logprob: -7.757344722747803
    4. ' 
' → logprob: -9.257345199584961
    5. ' if' → logprob: -10.257345199584961
    6. '```' → logprob: -10.882345199584961
    7. '   
' → logprob: -11.007345199584961
    8. 'if' → logprob: -12.132345199584961
    9. '     
' → logprob: -12.132345199584961
    10. '\n' → logprob: -12.132345199584961

Token 165: ' #' (ID: 1069)
  Prédit: 'if'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'if' → logprob: -0.1960623562335968
    2. 'remaining' → logprob: -2.4460623264312744
    3. ' if' → logprob: -3.4460623264312744
    4. '#' (adapté à ' #') → logprob: -4.0710625648498535
    5. 'processed' → logprob: -4.3210625648498535
    6. 'total' → logprob: -4.8210625648498535
    7. '   ' → logprob: -5.6960625648498535
    8. 'elements' → logprob: -5.9460625648498535
    9. 'treated' → logprob: -5.9460625648498535
    10. ' remaining' → logprob: -6.0710625648498535

Token 166: ' On' (ID: 2160)
  Prédit: 'if'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'if' → logprob: -0.26028528809547424
    2. ' if' → logprob: -1.5102852582931519
    3. 'import' → logprob: -5.760285377502441
    4. '   ' → logprob: -6.260285377502441
    5. 'processed' → logprob: -7.010285377502441
    6. 'return' → logprob: -7.760285377502441
    7. 'remaining' → logprob: -8.260285377502441
    8. ' processed' → logprob: -9.135285377502441
    9. 'result' → logprob: -9.260285377502441
    10. 'total' → logprob: -9.260285377502441

Token 167: ' calc' (ID: 25691)
  Prédit: 'if'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'if' → logprob: -0.28139519691467285
    2. ' if' → logprob: -1.9063951969146729
    3. '   ' → logprob: -2.406395196914673
    4. 'import' → logprob: -5.406394958496094
    5. 'return' → logprob: -8.281394958496094
    6. ' import' → logprob: -8.531394958496094
    7. ' return' → logprob: -8.531394958496094
    8. ' traite' → logprob: -9.406394958496094
    9. 'first' → logprob: -9.406394958496094
    10. 'importe' → logprob: -9.531394958496094

Token 168: 'ule' (ID: 1601)
  Prédit: 'ule'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'ule' → logprob: -0.013553926721215248
    2. 'ul' → logprob: -4.513554096221924
    3. 'uler' → logprob: -6.388554096221924
    4. 'ulate' → logprob: -8.138553619384766
    5. 'cule' → logprob: -8.513553619384766
    6. 'ulé' → logprob: -9.263553619384766
    7. 'ulte' → logprob: -9.638553619384766
    8. '   ' → logprob: -10.138553619384766
    9. 'u' → logprob: -10.638553619384766
    10. '#' → logprob: -10.888553619384766

Token 169: ' le' (ID: 505)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.31537237763404846
    2. ' le' → logprob: -2.0653724670410156
    3. ' trips' → logprob: -2.6903724670410156
    4. ' if' → logprob: -3.0653724670410156
    5. ' la' → logprob: -4.940372467041016
    6. ' les' → logprob: -5.315372467041016
    7. ' total' → logprob: -5.690372467041016
    8. ' initial' → logprob: -5.690372467041016
    9. 'le' → logprob: -6.315372467041016
    10. 'if' → logprob: -6.565372467041016

Token 170: ' nombre' (ID: 9733)
  Prédit: 'if'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'if' → logprob: -0.5231301784515381
    2. 'nombre' → logprob: -1.398130178451538
    3. 'remaining' → logprob: -3.148130178451538
    4. 'import' → logprob: -3.523130178451538
    5. ' if' → logprob: -3.773130178451538
    6. 'total' → logprob: -4.398130416870117
    7. 'reste' → logprob: -4.648130416870117
    8. ' nombre' → logprob: -4.648130416870117
    9. 'rest' → logprob: -4.898130416870117
    10. '#' → logprob: -5.398130416870117

Token 171: ' d' (ID: 272)
  Prédit: '_de'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '_de' → logprob: -0.5945426225662231
    2. '_total' → logprob: -1.3445426225662231
    3. '_tr' → logprob: -2.9695425033569336
    4. '_rest' → logprob: -3.2195425033569336
    5. '   ' → logprob: -3.4695425033569336
    6. '_initial' → logprob: -4.594542503356934
    7. '_d' → logprob: -4.594542503356934
    8. '_' → logprob: -4.719542503356934
    9. '_v' → logprob: -5.219542503356934
    10. '_max' → logprob: -5.594542503356934

Token 172: ''' (ID: 6)
  Prédit: '_'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '_' → logprob: -1.173455834388733
    2. 'élé' → logprob: -1.548455834388733
    3. 'elements' → logprob: -2.2984557151794434
    4. '_elements' → logprob: -2.4234557151794434
    5. 'voy' → logprob: -2.4234557151794434
    6. ' voyages' → logprob: -3.0484557151794434
    7. '_tr' → logprob: -3.7984557151794434
    8. '_v' → logprob: -3.7984557151794434
    9. ' elements' → logprob: -3.7984557151794434
    10. ' éléments' → logprob: -3.7984557151794434

Token 173: 'élé' (ID: 15228)
  Prédit: 'elements'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'elements' → logprob: -0.6622406840324402
    2. 'élé' → logprob: -1.162240743637085
    3. 'tr' → logprob: -2.662240743637085
    4. 'voy' → logprob: -2.662240743637085
    5. 'é' → logprob: -5.037240505218506
    6. ' éléments' → logprob: -5.412240505218506
    7. 'element' → logprob: -5.662240505218506
    8. ' elements' → logprob: -5.662240505218506
    9. ' voyages' → logprob: -6.162240505218506
    10. 'ele' → logprob: -6.412240505218506

Token 174: 'ments' (ID: 1626)
  Prédit: 'ments'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'ments' → logprob: -0.0003528622619342059
    2. 'ements' → logprob: -8.62535285949707
    3. 'éments' → logprob: -9.50035285949707
    4. 'm' → logprob: -10.37535285949707
    5. 'ts' → logprob: -10.62535285949707
    6. 'ents' → logprob: -11.50035285949707
    7. 'nts' → logprob: -12.37535285949707
    8. '```' → logprob: -12.50035285949707
    9. 'ment' → logprob: -12.75035285949707
    10. 's' → logprob: -13.00035285949707

Token 175: ' restant' (ID: 172358)
  Prédit: 'rest'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'rest' → logprob: -0.7227902412414551
    2. '_rest' → logprob: -0.9727902412414551
    3. '_remaining' → logprob: -2.722790241241455
    4. ' rest' → logprob: -3.597790241241455
    5. 'remaining' → logprob: -4.972790241241455
    6. '_total' → logprob: -5.222790241241455
    7. '_' → logprob: -5.472790241241455
    8. '_tr' → logprob: -5.472790241241455
    9. 'à' → logprob: -5.972790241241455
    10. 'total' → logprob: -6.097790241241455

Token 176: ' à' (ID: 1221)
  Prédit: ' ='
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' =' → logprob: -0.21407952904701233
    2. '_' → logprob: -2.7140796184539795
    3. '_rest' → logprob: -2.8390796184539795
    4. '_a' → logprob: -3.4640796184539795
    5. '=' → logprob: -4.2140793800354
    6. '_ap' → logprob: -4.4640793800354
    7. ' ' → logprob: -5.5890793800354
    8. '   ' → logprob: -6.9640793800354
    9. 'rest' → logprob: -6.9640793800354
    10. '_after' → logprob: -7.0890793800354

Token 177: ' traiter' (ID: 105852)
  Prédit: 'trait'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'trait' → logprob: -0.029040101915597916
    2. ' traiter' → logprob: -3.6540400981903076
    3. 'tra' → logprob: -6.279040336608887
    4. 'tr' → logprob: -7.154040336608887
    5. 'process' → logprob: -11.029040336608887
    6. '
' → logprob: -11.279040336608887
    7. '```' → logprob: -11.529040336608887
    8. ' tra' → logprob: -11.904040336608887
    9. ' trait' → logprob: -12.154040336608887
    10. 'faire' → logprob: -12.404040336608887

Token 178: ' après' (ID: 16460)
  Prédit: ' ='
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' =' → logprob: -0.09014701843261719
    2. '   ' → logprob: -2.840147018432617
    3. '=' → logprob: -4.340147018432617
    4. 'rest' → logprob: -4.840147018432617
    5. '_rest' → logprob: -6.340147018432617
    6. '_remaining' → logprob: -6.840147018432617
    7. 'reste' → logprob: -7.215147018432617
    8. ' rest' → logprob: -7.340147018432617
    9. 'remaining' → logprob: -7.340147018432617
    10. ',' → logprob: -7.590147018432617

Token 179: ' le' (ID: 505)
  Prédit: ' le'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' le' → logprob: -0.20271986722946167
    2. 'le' → logprob: -1.7027199268341064
    3. 'len' → logprob: -7.952719688415527
    4. 'prem' → logprob: -8.452719688415527
    5. ' la' → logprob: -8.577719688415527
    6. '1' → logprob: -9.202719688415527
    7. '```' → logprob: -9.327719688415527
    8. 'l' → logprob: -9.827719688415527
    9. 'la' → logprob: -10.077719688415527
    10. ' len' → logprob: -10.202719688415527

Token 180: ' premier' (ID: 15506)
  Prédit: 'prem'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'prem' → logprob: -0.4346180558204651
    2. ' premier' → logprob: -1.0596179962158203
    3. '1' → logprob: -5.68461799621582
    4. ' ' → logprob: -6.80961799621582
    5. 'first' → logprob: -8.30961799621582
    6. '   ' → logprob: -8.43461799621582
    7. ' first' → logprob: -9.05961799621582
    8. '```' → logprob: -9.24711799621582
    9. 'trait' → logprob: -9.37211799621582
    10. '0' → logprob: -10.12211799621582

Token 181: ' voyage' (ID: 35454)
  Prédit: 'voy'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'voy' → logprob: -0.6445130109786987
    2. ' voyage' → logprob: -0.7695130109786987
    3. '_' → logprob: -6.019513130187988
    4. 'trip' → logprob: -6.144513130187988
    5. ' ' → logprob: -6.394513130187988
    6. ' trip' → logprob: -6.644513130187988
    7. 'tour' → logprob: -7.144513130187988
    8. 'if' → logprob: -8.144513130187988
    9. ' trajet' → logprob: -8.144513130187988
    10. ' if' → logprob: -8.269513130187988

Token 182: ' (' (ID: 350)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.17092572152614594
    2. '    
' → logprob: -2.7959256172180176
    3. 'remaining' → logprob: -3.5459256172180176
    4. 'rest' → logprob: -3.7959256172180176
    5. '
' → logprob: -4.170925617218018
    6. ' =' → logprob: -4.670925617218018
    7. ' rest' → logprob: -5.920925617218018
    8. '   
' → logprob: -6.045925617218018
    9. ' remaining' → logprob: -6.170925617218018
    10. 'reste' → logprob: -6.295925617218018

Token 183: 'N' (ID: 45)
  Prédit: ' N'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' N' → logprob: -0.7620136737823486
    2. 'N' → logprob: -1.2620136737823486
    3. ')' → logprob: -2.3870136737823486
    4. '   ' → logprob: -2.5120136737823486
    5. ' rest' → logprob: -3.8870136737823486
    6. 'rest' → logprob: -4.2620134353637695
    7. ' )' → logprob: -4.7620134353637695
    8. ' K' → logprob: -4.7620134353637695
    9. 'K' → logprob: -5.7620134353637695
    10. ' ' → logprob: -5.8870134353637695

Token 184: '-' (ID: 12)
  Prédit: ' -'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' -' → logprob: -0.14468571543693542
    2. '-' → logprob: -2.019685745239258
    3. ')' → logprob: -6.269685745239258
    4. ' )' → logprob: -10.269685745239258
    5. ' ' → logprob: -10.644685745239258
    6. ' ' → logprob: -10.894685745239258
    7. '   ' → logprob: -11.894685745239258
    8. ',' → logprob: -12.269685745239258
    9. '>' → logprob: -12.707185745239258
    10. 'import' → logprob: -12.769685745239258

Token 185: '1' (ID: 16)
  Prédit: '1'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '1' → logprob: -0.0048835002817213535
    2. 'K' → logprob: -5.504883289337158
    3. ' ' → logprob: -7.754883289337158
    4. ' K' → logprob: -8.504883766174316
    5. 'min' → logprob: -9.629883766174316
    6. 'math' → logprob: -10.129883766174316
    7. ' math' → logprob: -11.004883766174316
    8. 'import' → logprob: -11.629883766174316
    9. ' min' → logprob: -12.004883766174316
    10. ')' → logprob: -12.192383766174316

Token 186: ')
' (ID: 446)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')' → logprob: -0.0041055926121771336
    2. ')
' → logprob: -6.129105567932129
    3. '   ' → logprob: -6.754105567932129
    4. ' )' → logprob: -8.254105567932129
    5. ' -' → logprob: -8.379105567932129
    6. '-' → logprob: -8.879105567932129
    7. ')
' → logprob: -10.254105567932129
    8. ' ' → logprob: -11.504105567932129
    9. '+' → logprob: -11.629105567932129
    10. ',' → logprob: -11.629105567932129

Token 187: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.0579385831952095
    2. '    
' → logprob: -3.057938575744629
    3. '   
' → logprob: -5.682938575744629
    4. '
' → logprob: -6.307938575744629
    5. ',' → logprob: -6.557938575744629
    6. '  
' → logprob: -7.182938575744629
    7. ' if' → logprob: -8.057938575744629
    8. '     
' → logprob: -8.432938575744629
    9. 'if' → logprob: -8.557938575744629
    10. ')' → logprob: -9.057938575744629

Token 188: ' #' (ID: 1069)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.5596774220466614
    2. ' if' → logprob: -1.5596773624420166
    3. 'if' → logprob: -1.9346773624420166
    4. 'remaining' → logprob: -3.1846773624420166
    5. ' trips' → logprob: -4.434677600860596
    6. ' remaining' → logprob: -4.934677600860596
    7. 'return' → logprob: -4.934677600860596
    8. 'rest' → logprob: -6.684677600860596
    9. ' return' → logprob: -6.809677600860596
    10. '    
' → logprob: -7.059677600860596

Token 189: ' Chaque' (ID: 94758)
  Prédit: 'if'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'if' → logprob: -0.9542673230171204
    2. ' if' → logprob: -0.9542673230171204
    3. '   ' → logprob: -2.2042672634124756
    4. 'remaining' → logprob: -2.7042672634124756
    5. ' remaining' → logprob: -3.2042672634124756
    6. ' trips' → logprob: -5.204267501831055
    7. 'rest' → logprob: -6.704267501831055
    8. ' rest' → logprob: -7.079267501831055
    9. 'tr' → logprob: -7.329267501831055
    10. 'import' → logprob: -7.704267501831055

Token 190: ' voyage' (ID: 35454)
  Prédit: ' voyage'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' voyage' → logprob: -0.7529082894325256
    2. 'voy' → logprob: -1.0029082298278809
    3. ' trip' → logprob: -3.127908229827881
    4. 'trip' → logprob: -3.252908229827881
    5. '_trip' → logprob: -3.502908229827881
    6. '_' → logprob: -4.377908229827881
    7. '_v' → logprob: -5.127908229827881
    8. '_tr' → logprob: -5.252908229827881
    9. 'travel' → logprob: -5.252908229827881
    10. ' _' → logprob: -5.877908229827881

Token 191: ' addition' (ID: 5856)
  Prédit: ' traite'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' traite' → logprob: -1.382061243057251
    2. ' peut' → logprob: -1.507061243057251
    3. ' suivant' → logprob: -2.382061243057251
    4. ' subsequent' → logprob: -3.007061243057251
    5. '   ' → logprob: -3.132061243057251
    6. 's' → logprob: -3.382061243057251
    7. ' supplémentaire' → logprob: -3.382061243057251
    8. ' ' → logprob: -4.007061004638672
    9. ' suivante' → logprob: -4.132061004638672
    10. ' permet' → logprob: -4.132061004638672

Token 192: 'nel' (ID: 10085)
  Prédit: 'nel'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'nel' → logprob: -0.05734127014875412
    2. 'el' → logprob: -3.6823413372039795
    3. 'al' → logprob: -4.4323410987854
    4. 'nelle' → logprob: -4.5573410987854
    5. 'ne' → logprob: -5.9323410987854
    6. 'nal' → logprob: -6.4323410987854
    7. 'nels' → logprob: -7.4323410987854
    8. 'naire' → logprob: -7.6823410987854
    9. 'n' → logprob: -8.057341575622559
    10. '_' → logprob: -8.307341575622559

Token 193: ' permet' (ID: 11798)
  Prédit: ' traite'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' traite' → logprob: -0.6480960249900818
    2. ' peut' → logprob: -1.0230960845947266
    3. ' nécessite' → logprob: -4.023096084594727
    4. ' permet' → logprob: -4.148096084594727
    5. '   ' → logprob: -4.523096084594727
    6. ' tra' → logprob: -4.523096084594727
    7. ',' → logprob: -5.023096084594727
    8. ' trait' → logprob: -5.398096084594727
    9. 'pe' → logprob: -5.398096084594727
    10. ' prend' → logprob: -5.523096084594727

Token 194: ' de' (ID: 334)
  Prédit: ' de'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' de' → logprob: -0.32003098726272583
    2. 'de' → logprob: -1.820030927658081
    3. 'trait' → logprob: -3.320030927658081
    4. ' d' → logprob: -3.820030927658081
    5. 'tra' → logprob: -3.820030927658081
    6. 'd' → logprob: -4.19503116607666
    7. '   ' → logprob: -5.32003116607666
    8. 't' → logprob: -5.44503116607666
    9. '	' → logprob: -6.32003116607666
    10. '	de' → logprob: -6.57003116607666

Token 195: ' traiter' (ID: 105852)
  Prédit: 'trait'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'trait' → logprob: -0.5317002534866333
    2. ' traiter' → logprob: -0.9067002534866333
    3. 'tra' → logprob: -5.406700134277344
    4. 'process' → logprob: -5.906700134277344
    5. ' tra' → logprob: -8.031700134277344
    6. 'tr' → logprob: -8.281700134277344
    7. 'prendre' → logprob: -8.906700134277344
    8. ' trait' → logprob: -9.031700134277344
    9. 'traj' → logprob: -9.156700134277344
    10. ' couvrir' → logprob: -9.906700134277344

Token 196: ' jusqu' (ID: 21961)
  Prédit: ' K'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' K' → logprob: -0.008609729818999767
    2. 'K' → logprob: -5.008609771728516
    3. ' math' → logprob: -7.508609771728516
    4. ' au' → logprob: -7.633609771728516
    5. ' une' → logprob: -8.758609771728516
    6. ' ' → logprob: -9.258609771728516
    7. ' jusqu' → logprob: -9.258609771728516
    8. 'au' → logprob: -9.383609771728516
    9. ' (' → logprob: -9.508609771728516
    10. ' max' → logprob: -9.883609771728516

Token 197: ''à' (ID: 33688)
  Prédit: ''à'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ''à' → logprob: -0.7116600275039673
    2. 'à' → logprob: -1.3366600275039673
    3. '=' → logprob: -1.5866600275039673
    4. '   ' → logprob: -3.5866599082946777
    5. ' à' → logprob: -4.586659908294678
    6. '’à' → logprob: -5.836659908294678
    7. 'au' → logprob: -8.086660385131836
    8. '  ' → logprob: -8.836660385131836
    9. '```' → logprob: -9.086660385131836
    10. '    ' → logprob: -9.336660385131836

Token 198: ' (' (ID: 350)
  Prédit: ' K'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' K' → logprob: -0.6673493385314941
    2. 'K' → logprob: -0.7923493385314941
    3. ' (' → logprob: -3.917349338531494
    4. '(K' → logprob: -4.292349338531494
    5. '(' → logprob: -7.667349338531494
    6. 'k' → logprob: -9.667348861694336
    7. '(k' → logprob: -11.667348861694336
    8. 'max' → logprob: -11.792348861694336
    9. ' ' → logprob: -11.917348861694336
    10. '   ' → logprob: -12.792348861694336

Token 199: 'K' (ID: 42)
  Prédit: 'K'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'K' → logprob: -0.03369526192545891
    2. ' K' → logprob: -3.4086952209472656
    3. ')' → logprob: -11.033695220947266
    4. 'k' → logprob: -11.158695220947266
    5. ' (' → logprob: -11.783695220947266
    6. '   ' → logprob: -12.283695220947266
    7. '(K' → logprob: -12.408695220947266
    8. '(' → logprob: -14.658695220947266
    9. ' ' → logprob: -14.783695220947266
    10. '    ' → logprob: -15.158695220947266

Token 200: '-' (ID: 12)
  Prédit: '-'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '-' → logprob: -0.2254207879304886
    2. ' -' → logprob: -1.6004208326339722
    3. ')' → logprob: -12.600420951843262
    4. ' ' → logprob: -13.475420951843262
    5. 'minus' → logprob: -14.600420951843262
    6. '   ' → logprob: -14.600420951843262
    7. ' ' → logprob: -14.912920951843262
    8. '```' → logprob: -15.037920951843262
    9. '1' → logprob: -15.287920951843262
    10. '<|end|>' → logprob: -15.475420951843262

Token 201: '1' (ID: 16)
  Prédit: '1'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '1' → logprob: -9.639096970204264e-05
    2. ' ' → logprob: -9.375096321105957
    3. ')' → logprob: -12.125096321105957
    4. '```' → logprob: -12.875096321105957
    5. '<|end|>' → logprob: -13.000096321105957
    6. '-' → logprob: -14.875096321105957
    7. '<|end|>' → logprob: -15.500096321105957
    8. '   ' → logprob: -16.125097274780273
    9. '
' → logprob: -16.687597274780273
    10. '۱' → logprob: -16.812597274780273

Token 202: ')' (ID: 8)
  Prédit: ')'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')' → logprob: -0.006397969089448452
    2. ' )' → logprob: -5.1313982009887695
    3. ' éléments' → logprob: -8.63139820098877
    4. ' elements' → logprob: -9.13139820098877
    5. 'elements' → logprob: -9.50639820098877
    6. '')' → logprob: -10.88139820098877
    7. ')
' → logprob: -11.13139820098877
    8. 'élé' → logprob: -12.25639820098877
    9. ')**' → logprob: -12.25639820098877
    10. ' ' → logprob: -12.25639820098877

Token 203: ' nouveaux' (ID: 43964)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ')' → logprob: -0.338367760181427
    2. ' éléments' → logprob: -1.9633677005767822
    3. ' )' → logprob: -3.3383677005767822
    4. ' elements' → logprob: -3.4633677005767822
    5. ' voyages' → logprob: -4.338367938995361
    6. ')
' → logprob: -4.338367938995361
    7. '   ' → logprob: -4.463367938995361
    8. 'elements' → logprob: -4.463367938995361
    9. ' trips' → logprob: -5.088367938995361
    10. 'élé' → logprob: -5.463367938995361

Token 204: ' éléments' (ID: 57375)
  Prédit: ' éléments'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' éléments' → logprob: -0.13259652256965637
    2. 'élé' → logprob: -2.132596492767334
    3. ' elements' → logprob: -5.632596492767334
    4. 'elements' → logprob: -6.632596492767334
    5. ' élément' → logprob: -7.882596492767334
    6. ' )' → logprob: -9.257596969604492
    7. ')' → logprob: -9.382596969604492
    8. ' ' → logprob: -10.007596969604492
    9. 's' → logprob: -11.007596969604492
    10. ' ' → logprob: -11.007596969604492

Token 205: ' non' (ID: 2893)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.0023254600819200277
    2. '    
' → logprob: -6.627325534820557
    3. '
' → logprob: -8.252325057983398
    4. 'return' → logprob: -8.502325057983398
    5. ' if' → logprob: -8.752325057983398
    6. 'if' → logprob: -9.377325057983398
    7. ',' → logprob: -9.502325057983398
    8. '   
' → logprob: -9.627325057983398
    9. ')' → logprob: -10.127325057983398
    10. '  
' → logprob: -10.752325057983398

Token 206: ' encore' (ID: 14043)
  Prédit: 'trait'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'trait' → logprob: -0.282207727432251
    2. ' trait' → logprob: -1.407207727432251
    3. 'tra' → logprob: -8.157207489013672
    4. 'tr' → logprob: -8.657207489013672
    5. ' traité' → logprob: -8.782207489013672
    6. '_trait' → logprob: -9.032207489013672
    7. 'processed' → logprob: -9.782207489013672
    8. 'traits' → logprob: -9.907207489013672
    9. '```' → logprob: -10.407207489013672
    10. 'pris' → logprob: -10.657207489013672

Token 207: ' trait' (ID: 15458)
  Prédit: 'trait'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'trait' → logprob: -0.28169625997543335
    2. ' trait' → logprob: -1.4066963195800781
    3. 'tra' → logprob: -8.531696319580078
    4. ' traité' → logprob: -8.781696319580078
    5. 'tr' → logprob: -9.531696319580078
    6. '_trait' → logprob: -10.281696319580078
    7. 'traits' → logprob: -10.781696319580078
    8. 't' → logprob: -11.156696319580078
    9. 'pris' → logprob: -11.281696319580078
    10. '```' → logprob: -12.156696319580078

Token 208: 'és' (ID: 1756)
  Prédit: 'és'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'és' → logprob: -0.005350686144083738
    2. 'es' → logprob: -6.130350589752197
    3. 'rés' → logprob: -6.130350589752197
    4. 'érés' → logprob: -7.755350589752197
    5. 's' → logprob: -7.880350589752197
    6. '   ' → logprob: -9.755351066589355
    7. 'ÉS' → logprob: -11.005351066589355
    8. 'És' → logprob: -11.130351066589355
    9. '```' → logprob: -11.255351066589355
    10. '
' → logprob: -11.630351066589355

Token 209: '
' (ID: 198)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.004940681625157595
    2. '    
' → logprob: -5.754940509796143
    3. '
' → logprob: -6.879940509796143
    4. 'return' → logprob: -8.6299409866333
    5. '   
' → logprob: -9.0049409866333
    6. 'if' → logprob: -9.3799409866333
    7. '  
' → logprob: -9.5049409866333
    8. ' if' → logprob: -9.5049409866333
    9. ')' → logprob: -9.8799409866333
    10. ',' → logprob: -10.1299409866333

Token 210: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.001360474620014429
    2. ' if' → logprob: -7.6263604164123535
    3. '    
' → logprob: -7.6263604164123535
    4. 'if' → logprob: -8.751360893249512
    5. 'return' → logprob: -9.376360893249512
    6. '
' → logprob: -9.876360893249512
    7. ' return' → logprob: -10.751360893249512
    8. 'remaining' → logprob: -10.876360893249512
    9. '   
' → logprob: -11.751360893249512
    10. ' remaining' → logprob: -11.876360893249512

Token 211: ' #' (ID: 1069)
  Prédit: 'if'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'if' → logprob: -0.9931347370147705
    2. ' if' → logprob: -0.9931347370147705
    3. '   ' → logprob: -1.8681347370147705
    4. 'remaining' → logprob: -3.3681347370147705
    5. 'return' → logprob: -3.6181347370147705
    6. ' remaining' → logprob: -3.7431347370147705
    7. ' return' → logprob: -4.618134498596191
    8. ' trips' → logprob: -4.868134498596191
    9. 'tr' → logprob: -7.243134498596191
    10. 'rest' → logprob: -8.118134498596191

Token 212: ' On' (ID: 2160)
  Prédit: 'if'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'if' → logprob: -0.730220377445221
    2. ' if' → logprob: -1.1052203178405762
    3. 'return' → logprob: -2.855220317840576
    4. 'tr' → logprob: -3.355220317840576
    5. 'remaining' → logprob: -3.480220317840576
    6. ' trips' → logprob: -3.730220317840576
    7. ' return' → logprob: -4.105220317840576
    8. ' remaining' → logprob: -4.230220317840576
    9. '   ' → logprob: -5.230220317840576
    10. 'additional' → logprob: -7.230220317840576

Token 213: ' utilise' (ID: 70283)
  Prédit: 'return'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'return' → logprob: -0.6346575617790222
    2. ' return' → logprob: -1.384657621383667
    3. '_' → logprob: -2.259657621383667
    4. '_return' → logprob: -3.509657621383667
    5. '_re' → logprob: -4.384657382965088
    6. '   ' → logprob: -4.884657382965088
    7. ' =' → logprob: -5.009657382965088
    8. '=' → logprob: -5.009657382965088
    9. 'if' → logprob: -5.384657382965088
    10. 're' → logprob: -5.509657382965088

Token 214: ' math' (ID: 13324)
  Prédit: ' math'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' math' → logprob: -0.0017502688569948077
    2. 'math' → logprob: -6.376750469207764
    3. '   ' → logprob: -10.626749992370605
    4. ' ' → logprob: -12.126749992370605
    5. ' ' → logprob: -12.376749992370605
    6. ' ceil' → logprob: -12.626749992370605
    7. ' la' → logprob: -13.001749992370605
    8. ' max' → logprob: -13.626749992370605
    9. ' Math' → logprob: -13.751749992370605
    10. '(math' → logprob: -13.876749992370605

Token 215: '.ceil' (ID: 60295)
  Prédit: '.ceil'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '.ceil' → logprob: -0.011056780815124512
    2. '.' → logprob: -4.511056900024414
    3. '.c' → logprob: -12.511056900024414
    4. '.ce' → logprob: -13.011056900024414
    5. '.sqrt' → logprob: -13.636056900024414
    6. '.floor' → logprob: -14.136056900024414
    7. 'ceil' → logprob: -14.511056900024414
    8. ' .' → logprob: -15.636056900024414
    9. 'import' → logprob: -15.886056900024414
    10. ' ceil' → logprob: -16.011056900024414

Token 216: ' pour' (ID: 1930)
  Prédit: '(('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '((' → logprob: -0.1551925092935562
    2. '(' → logprob: -2.2801926136016846
    3. '(N' → logprob: -3.5301926136016846
    4. '   ' → logprob: -4.6551923751831055
    5. '(
' → logprob: -6.6551923751831055
    6. '(math' → logprob: -6.7801923751831055
    7. ',' → logprob: -10.530192375183105
    8. '(((' → logprob: -10.530192375183105
    9. 'return' → logprob: -10.530192375183105
    10. '  ' → logprob: -11.155192375183105

Token 217: ' s' (ID: 265)
  Prédit: ' math'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' math' → logprob: -0.021049432456493378
    2. 'math' → logprob: -3.8960494995117188
    3. '(math' → logprob: -7.896049499511719
    4. ' div' → logprob: -9.646049499511719
    5. ' calcul' → logprob: -10.271049499511719
    6. 'div' → logprob: -10.771049499511719
    7. 'calcul' → logprob: -12.396049499511719
    8. ' (' → logprob: -12.521049499511719
    9. '   ' → logprob: -13.771049499511719
    10. ' calcular' → logprob: -14.396049499511719

Token 218: ''assurer' (ID: 193756)
  Prédit: ''assurer'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ''assurer' → logprob: -0.3186706602573395
    2. 'u' → logprob: -2.0686707496643066
    3. ''effect' → logprob: -2.8186707496643066
    4. 'qrt' → logprob: -4.318670749664307
    5. ''é' → logprob: -4.443670749664307
    6. 'avoir' → logprob: -5.068670749664307
    7. 'é' → logprob: -5.318670749664307
    8. 'e' → logprob: -5.318670749664307
    9. 'calcul' → logprob: -5.568670749664307
    10. 'cal' → logprob: -5.693670749664307

Token 219: ' d' (ID: 272)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(' → logprob: -0.8066060543060303
    2. ' (' → logprob: -1.4316060543060303
    3. ' de' → logprob: -2.0566060543060303
    4. '   ' → logprob: -2.1816060543060303
    5. '(math' → logprob: -2.9316060543060303
    6. ' math' → logprob: -4.431606292724609
    7. '(N' → logprob: -6.306606292724609
    8. ' d' → logprob: -6.556606292724609
    9. ' ' → logprob: -6.556606292724609
    10. '  ' → logprob: -6.681606292724609

Token 220: ''arr' (ID: 49695)
  Prédit: ''assurer'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ''assurer' → logprob: -0.6501532793045044
    2. 'e' → logprob: -1.7751532793045044
    3. ''obtenir' → logprob: -1.9001532793045044
    4. 'u' → logprob: -3.150153160095215
    5. ''avoir' → logprob: -3.400153160095215
    6. 'avoir' → logprob: -3.900153160095215
    7. ''effect' → logprob: -4.025153160095215
    8. ''arr' → logprob: -5.400153160095215
    9. ' math' → logprob: -5.525153160095215
    10. ''un' → logprob: -5.650153160095215

Token 221: 'ond' (ID: 1415)
  Prédit: 'ond'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'ond' → logprob: -0.009089223109185696
    2. 'onder' → logprob: -5.63408899307251
    3. 'iver' → logprob: -6.38408899307251
    4. 'ondi' → logprob: -6.38408899307251
    5. 'on' → logprob: -6.75908899307251
    6. 'ound' → logprob: -8.384089469909668
    7. 'onter' → logprob: -8.759089469909668
    8. 'ondissement' → logprob: -9.384089469909668
    9. '"' → logprob: -9.884089469909668
    10. 'o' → logprob: -10.384089469909668

Token 222: 'ir' (ID: 380)
  Prédit: 'ir'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'ir' → logprob: -0.3378630578517914
    2. 'ond' → logprob: -1.8378630876541138
    3. '(math' → logprob: -2.837862968444824
    4. 'up' → logprob: -3.712862968444824
    5. 'on' → logprob: -4.587862968444824
    6. 'er' → logprob: -4.587862968444824
    7. '(' → logprob: -4.712862968444824
    8. 'ont' → logprob: -5.587862968444824
    9. 'onner' → logprob: -5.587862968444824
    10. 'is' → logprob: -6.587862968444824

Token 223: ' vers' (ID: 3640)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '(' → logprob: -0.18240271508693695
    2. '   ' → logprob: -2.8074026107788086
    3. '((' → logprob: -3.3074026107788086
    4. '(len' → logprob: -3.9324026107788086
    5. '(N' → logprob: -4.057402610778809
    6. '(
' → logprob: -4.432402610778809
    7. ' le' → logprob: -5.182402610778809
    8. '(math' → logprob: -5.432402610778809
    9. ' (' → logprob: -6.182402610778809
    10. 'up' → logprob: -6.557402610778809

Token 224: ' le' (ID: 505)
  Prédit: 'le'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'le' → logprob: -0.0814942717552185
    2. 'l' → logprob: -3.0814943313598633
    3. '   ' → logprob: -4.456494331359863
    4. 'sup' → logprob: -5.331494331359863
    5. '```' → logprob: -5.581494331359863
    6. ' le' → logprob: -5.581494331359863
    7. '1' → logprob: -5.956494331359863
    8. '_le' → logprob: -6.831494331359863
    9. 'haut' → logprob: -7.581494331359863
    10. 'au' → logprob: -7.706494331359863

Token 225: ' haut' (ID: 28223)
  Prédit: 'haut'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'haut' → logprob: -0.008333359844982624
    2. ' haut' → logprob: -5.508333206176758
    3. 'ha' → logprob: -5.883333206176758
    4. '   ' → logprob: -7.133333206176758
    5. 'sup' → logprob: -8.758333206176758
    6. '```' → logprob: -8.883333206176758
    7. ' ' → logprob: -9.383333206176758
    8. '  ' → logprob: -9.883333206176758
    9. ' ' → logprob: -10.133333206176758
    10. '1' → logprob: -10.633333206176758

Token 226: ' si' (ID: 1784)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.002619297243654728
    2. '(' → logprob: -6.37761926651001
    3. '(N' → logprob: -7.62761926651001
    4. ',' → logprob: -9.252619743347168
    5. ')' → logprob: -9.252619743347168
    6. ':' → logprob: -9.752619743347168
    7. '(
' → logprob: -9.752619743347168
    8. 'return' → logprob: -10.627619743347168
    9. ' (' → logprob: -10.877619743347168
    10. '(n' → logprob: -11.002619743347168

Token 227: ' la' (ID: 557)
  Prédit: ' ('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' (' → logprob: -0.804020881652832
    2. '(N' → logprob: -0.804020881652832
    3. ' N' → logprob: -2.929020881652832
    4. ')' → logprob: -4.554020881652832
    5. ' la' → logprob: -4.929020881652832
    6. ' le' → logprob: -5.304020881652832
    7. ' ' → logprob: -5.679020881652832
    8. '   ' → logprob: -5.679020881652832
    9. '(' → logprob: -5.804020881652832
    10. 'N' → logprob: -6.054020881652832

Token 228: ' division' (ID: 21629)
  Prédit: ' division'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' division' → logprob: -0.38748762011528015
    2. 'division' → logprob: -1.2624876499176025
    3. 'div' → logprob: -3.6374876499176025
    4. ' quantité' → logprob: -6.137487411499023
    5. 'nombre' → logprob: -6.637487411499023
    6. ' ' → logprob: -6.637487411499023
    7. 'reste' → logprob: -6.762487411499023
    8. 'fraction' → logprob: -7.137487411499023
    9. 'rest' → logprob: -7.887487411499023
    10. 'portion' → logprob: -8.012487411499023

Token 229: ' n' (ID: 297)
  Prédit: ' >'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' >' → logprob: -1.5432103872299194
    2. '   ' → logprob: -2.043210506439209
    3. ' )' → logprob: -2.043210506439209
    4. ')' → logprob: -2.293210506439209
    5. ' n' → logprob: -2.418210506439209
    6. ' ' → logprob: -2.918210506439209
    7. ' nécessite' → logprob: -3.293210506439209
    8. ' necess' → logprob: -3.543210506439209
    9. ' est' → logprob: -3.668210506439209
    10. '>' → logprob: -4.043210506439209

Token 230: ''est' (ID: 6616)
  Prédit: ''est'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ''est' → logprob: -0.49081456661224365
    2. 'e' → logprob: -2.115814685821533
    3. 'pas' → logprob: -2.615814685821533
    4. 'est' → logprob: -2.865814685821533
    5. '%' → logprob: -3.740814685821533
    6. 'éc' → logprob: -3.865814685821533
    7. 'é' → logprob: -3.865814685821533
    8. 'es' → logprob: -3.990814685821533
    9. '   ' → logprob: -4.115814685821533
    10. ' pas' → logprob: -5.115814685821533

Token 231: ' pas' (ID: 2173)
  Prédit: 'pas'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'pas' → logprob: -0.11284637451171875
    2. ' pas' → logprob: -2.2378463745117188
    3. '_pas' → logprob: -11.112846374511719
    4. 'import' → logprob: -13.487846374511719
    5. ' jamais' → logprob: -13.612846374511719
    6. ' ' → logprob: -13.862846374511719
    7. 'im' → logprob: -14.487846374511719
    8. 'ent' → logprob: -14.487846374511719
    9. 'not' → logprob: -14.737846374511719
    10. 'Pas' → logprob: -14.737846374511719

Token 232: ' entière' (ID: 61583)
  Prédit: ' exacte'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' exacte' → logprob: -0.42086556553840637
    2. 'exact' → logprob: -1.670865535736084
    3. ' exact' → logprob: -2.545865535736084
    4. 'ent' → logprob: -3.545865535736084
    5. ' parfaite' → logprob: -3.795865535736084
    6. ' entière' → logprob: -3.920865535736084
    7. ' ent' → logprob: -6.420865535736084
    8. ' un' → logprob: -7.045865535736084
    9. ' exactement' → logprob: -7.170865535736084
    10. ' divisible' → logprob: -7.420865535736084

Token 233: '
' (ID: 198)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.0013905927771702409
    2. ')' → logprob: -7.62639045715332
    3. '    
' → logprob: -7.62639045715332
    4. 'return' → logprob: -9.12639045715332
    5. ' return' → logprob: -9.50139045715332
    6. ':' → logprob: -10.12639045715332
    7. ',' → logprob: -10.25139045715332
    8. '   
' → logprob: -10.50139045715332
    9. '  
' → logprob: -10.75139045715332
    10. 'result' → logprob: -11.12639045715332

Token 234: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.006462286226451397
    2. '    
' → logprob: -5.506462097167969
    3. '
' → logprob: -6.256462097167969
    4. '  
' → logprob: -9.506462097167969
    5. 'result' → logprob: -9.506462097167969
    6. ' return' → logprob: -9.881462097167969
    7. 'return' → logprob: -9.881462097167969
    8. '   
' → logprob: -10.131462097167969
    9. 'remaining' → logprob: -10.256462097167969
    10. ' if' → logprob: -10.631462097167969

Token 235: ' trips' (ID: 27647)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -1.3190536499023438
    2. ' return' → logprob: -1.6940536499023438
    3. ' if' → logprob: -1.8190536499023438
    4. ' remaining' → logprob: -1.9440536499023438
    5. 'return' → logprob: -2.0690536499023438
    6. 'remaining' → logprob: -2.6940536499023438
    7. 'if' → logprob: -3.1940536499023438
    8. ' trips' → logprob: -5.944053649902344
    9. ' remainder' → logprob: -6.444053649902344
    10. ' result' → logprob: -6.819053649902344

Token 236: ' =' (ID: 314)
  Prédit: ' ='
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' =' → logprob: -0.03369387984275818
    2. '=' → logprob: -3.408693790435791
    3. '   ' → logprob: -10.03369426727295
    4. '_' → logprob: -13.03369426727295
    5. ' ' → logprob: -15.03369426727295
    6. '_needed' → logprob: -15.03369426727295
    7. 's' → logprob: -15.28369426727295
    8. ' ' → logprob: -15.53369426727295
    9. '  ' → logprob: -15.65869426727295
    10. ' =
' → logprob: -15.78369426727295

Token 237: ' math' (ID: 13324)
  Prédit: '1'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '1' → logprob: -0.13875353336334229
    2. ' ' → logprob: -2.3887534141540527
    3. ' math' → logprob: -3.6387534141540527
    4. 'math' → logprob: -4.513753414154053
    5. '   ' → logprob: -7.513753414154053
    6. '  ' → logprob: -11.263753890991211
    7. '(math' → logprob: -12.263753890991211
    8. '    ' → logprob: -12.763753890991211
    9. 'import' → logprob: -13.138753890991211
    10. '     ' → logprob: -14.888753890991211

Token 238: '.ceil' (ID: 60295)
  Prédit: '.ceil'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '.ceil' → logprob: -0.011104179546236992
    2. '.' → logprob: -4.511104106903076
    3. ' .' → logprob: -10.011104583740234
    4. '.ce' → logprob: -11.886104583740234
    5. '.sqrt' → logprob: -13.386104583740234
    6. '.floor' → logprob: -13.511104583740234
    7. '.che' → logprob: -15.136104583740234
    8. '.c' → logprob: -15.511104583740234
    9. '.randint' → logprob: -15.761104583740234
    10. '.pi' → logprob: -15.886104583740234

Token 239: '((' (ID: 2054)
  Prédit: '(('
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '((' → logprob: -0.0009070566738955677
    2. '(' → logprob: -7.500906944274902
    3. '(N' → logprob: -8.125906944274902
    4. ' ((' → logprob: -10.500906944274902
    5. '(((' → logprob: -10.750906944274902
    6. '(
' → logprob: -11.875906944274902
    7. ' (' → logprob: -13.625906944274902
    8. '   ' → logprob: -15.125906944274902
    9. '((_' → logprob: -15.875906944274902
    10. ')((' → logprob: -16.12590789794922

Token 240: 'N' (ID: 45)
  Prédit: 'N'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'N' → logprob: -9.007317567011341e-05
    2. '   ' → logprob: -10.000089645385742
    3. '(N' → logprob: -10.125089645385742
    4. ' N' → logprob: -12.500089645385742
    5. '	N' → logprob: -15.000089645385742
    6. ' (' → logprob: -16.125089645385742
    7. 'max' → logprob: -16.250089645385742
    8. '(' → logprob: -16.875089645385742
    9. '
' → logprob: -16.875089645385742
    10. ')' → logprob: -17.250089645385742

Token 241: ' -' (ID: 533)
  Prédit: ' -'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' -' → logprob: -0.4287090599536896
    2. '-' → logprob: -1.0537090301513672
    3. ' ' → logprob: -13.053709030151367
    4. ')' → logprob: -13.303709030151367
    5. '1' → logprob: -13.428709030151367
    6. ' -
' → logprob: -14.678709030151367
    7. ' ' → logprob: -14.678709030151367
    8. '   ' → logprob: -14.803709030151367
    9. '
' → logprob: -15.116209030151367
    10. '<|end|>' → logprob: -15.303709030151367

Token 242: ' ' (ID: 220)
  Prédit: '1'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '1' → logprob: -0.011050650849938393
    2. ' ' → logprob: -4.511050701141357
    3. '   ' → logprob: -12.8860502243042
    4. '```' → logprob: -16.011051177978516
    5. ')' → logprob: -16.386051177978516
    6. '  ' → logprob: -16.511051177978516
    7. '	' → logprob: -17.073551177978516
    8. ' ' → logprob: -17.448551177978516
    9. '
' → logprob: -17.886051177978516
    10. '    ' → logprob: -18.386051177978516

Token 243: '1' (ID: 16)
  Prédit: '1'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '1' → logprob: -6.392202976712724e-06
    2. ' ' → logprob: -12.000006675720215
    3. '   ' → logprob: -16.2500057220459
    4. ')' → logprob: -17.0000057220459
    5. '```' → logprob: -17.0000057220459
    6. '
' → logprob: -17.7500057220459
    7. '<|end|>' → logprob: -18.1875057220459
    8. '  ' → logprob: -19.0625057220459
    9. '[' → logprob: -19.5625057220459
    10. '۱' → logprob: -19.8125057220459

Token 244: ')' (ID: 8)
  Prédit: ')'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')' → logprob: -0.00331590767018497
    2. ' )' → logprob: -6.1283159255981445
    3. ')/(' → logprob: -6.8783159255981445
    4. ')/' → logprob: -9.253315925598145
    5. ')
' → logprob: -13.003315925598145
    6. '   ' → logprob: -13.753315925598145
    7. ' /' → logprob: -15.128315925598145
    8. ' ' → logprob: -16.253314971923828
    9. '")' → logprob: -16.315814971923828
    10. ')

' → logprob: -16.315814971923828

Token 245: ' /' (ID: 820)
  Prédit: ' /'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' /' → logprob: -0.2580397427082062
    2. '/' → logprob: -1.8830397129058838
    3. ')' → logprob: -2.633039712905884
    4. '/(' → logprob: -6.258039951324463
    5. ')/(' → logprob: -7.258039951324463
    6. ' )' → logprob: -8.008039474487305
    7. ' /
' → logprob: -8.758039474487305
    8. '/
' → logprob: -9.008039474487305
    9. ')/' → logprob: -9.383039474487305
    10. ' /(' → logprob: -9.508039474487305

Token 246: ' (' (ID: 350)
  Prédit: ' ('
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' (' → logprob: -0.17985497415065765
    2. '(K' → logprob: -1.8048549890518188
    3. '(' → logprob: -9.304855346679688
    4. '   ' → logprob: -11.679855346679688
    5. '(k' → logprob: -12.179855346679688
    6. ' ' → logprob: -13.429855346679688
    7. ')' → logprob: -13.929855346679688
    8. '
' → logprob: -14.054855346679688
    9. '    ' → logprob: -14.929855346679688
    10. '  ' → logprob: -15.054855346679688

Token 247: 'K' (ID: 42)
  Prédit: 'K'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'K' → logprob: -0.00027337539358995855
    2. '(K' → logprob: -8.500273704528809
    3. ' K' → logprob: -9.625273704528809
    4. ' (' → logprob: -12.750273704528809
    5. '   ' → logprob: -14.125273704528809
    6. '(' → logprob: -16.000272750854492
    7. '	K' → logprob: -17.500272750854492
    8. ')' → logprob: -17.625272750854492
    9. ' ' → logprob: -18.750272750854492
    10. '[K' → logprob: -19.000272750854492

Token 248: ' -' (ID: 533)
  Prédit: ' -'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' -' → logprob: -0.34849902987480164
    2. '-' → logprob: -1.223499059677124
    3. ')' → logprob: -10.223499298095703
    4. '1' → logprob: -11.223499298095703
    5. '   ' → logprob: -13.723499298095703
    6. ' ' → logprob: -13.723499298095703
    7. '<|end|>' → logprob: -14.098499298095703
    8. '```' → logprob: -15.348499298095703
    9. ' -
' → logprob: -15.598499298095703
    10. 'minus' → logprob: -15.848499298095703

Token 249: ' ' (ID: 220)
  Prédit: '1'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '1' → logprob: -0.00017982252757064998
    2. ' ' → logprob: -8.6251802444458
    3. ')' → logprob: -16.125179290771484
    4. '<|end|>' → logprob: -16.375179290771484
    5. '۱' → logprob: -19.125179290771484
    6. '１' → logprob: -19.312679290771484
    7. '```' → logprob: -19.625179290771484
    8. '
' → logprob: -19.687679290771484
    9. '   ' → logprob: -20.000179290771484
    10. '  ' → logprob: -20.062679290771484

Token 250: '1' (ID: 16)
  Prédit: '1'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '1' → logprob: -1.5048530030981055e-06
    2. ' ' → logprob: -14.125001907348633
    3. ')' → logprob: -14.375001907348633
    4. '<|end|>' → logprob: -16.625001907348633
    5. '۱' → logprob: -18.125001907348633
    6. '```' → logprob: -18.750001907348633
    7. '১' → logprob: -19.000001907348633
    8. '１' → logprob: -19.000001907348633
    9. '१' → logprob: -19.437501907348633
    10. '<|end|>' → logprob: -19.937501907348633

Token 251: '))
' (ID: 2210)
  Prédit: '))'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '))' → logprob: -0.00016313401283696294
    2. ')' → logprob: -8.750163078308105
    3. '))
' → logprob: -12.875163078308105
    4. ' ))' → logprob: -13.625163078308105
    5. ')))' → logprob: -14.625163078308105
    6. '))+' → logprob: -16.125164031982422
    7. '))

' → logprob: -16.500164031982422
    8. '   ' → logprob: -16.750164031982422
    9. '))*' → logprob: -17.375164031982422
    10. '));' → logprob: -17.500164031982422

Token 252: '   ' (ID: 271)
  Prédit: ' +'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' +' → logprob: -0.5496038794517517
    2. '+' → logprob: -1.1746039390563965
    3. '   ' → logprob: -2.1746039390563965
    4. 'return' → logprob: -9.049603462219238
    5. '+
' → logprob: -10.799603462219238
    6. '
' → logprob: -10.924603462219238
    7. ' +
' → logprob: -11.049603462219238
    8. ')' → logprob: -11.299603462219238
    9. ' return' → logprob: -11.549603462219238
    10. '  ' → logprob: -11.674603462219238

Token 253: ' return' (ID: 622)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -1.0394611358642578
    2. 'return' (adapté à ' return') → logprob: -1.2894611358642578
    3. ' +' → logprob: -1.2894611358642578
    4. '+' → logprob: -2.664461135864258
    5. ' return' → logprob: -3.664461135864258
    6. '
' → logprob: -10.164461135864258
    7. '+
' → logprob: -10.289461135864258
    8. '  ' → logprob: -10.414461135864258
    9. ' +
' → logprob: -10.539461135864258
    10. '	return' → logprob: -10.664461135864258

Token 254: ' trips' (ID: 27647)
  Prédit: ' trips'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' trips' → logprob: -0.39208072423934937
    2. 'tr' → logprob: -1.1420807838439941
    3. '1' → logprob: -5.267080783843994
    4. ' ' → logprob: -10.767080307006836
    5. 'trip' → logprob: -11.392080307006836
    6. ' trip' → logprob: -13.267080307006836
    7. '(tr' → logprob: -13.517080307006836
    8. ' tr' → logprob: -13.892080307006836
    9. '	tr' → logprob: -15.517080307006836
    10. '2' → logprob: -15.767080307006836

Token 255: '

' (ID: 279)
  Prédit: '+'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '+' → logprob: -0.08591113984584808
    2. '<|end|>' → logprob: -2.5859110355377197
    3. ' +' → logprob: -5.210911273956299
    4. ')' → logprob: -7.335911273956299
    5. '*' → logprob: -7.835911273956299
    6. '<|end|>' → logprob: -8.33591079711914
    7. '```' → logprob: -9.58591079711914
    8. '(' → logprob: -9.58591079711914
    9. '[' → logprob: -11.21091079711914
    10. '+
' → logprob: -11.33591079711914

Token 256: 'if' (ID: 366)
  Prédit: '+'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '+' → logprob: -0.12779228389263153
    2. '<|end|>' → logprob: -2.6277923583984375
    3. '*' → logprob: -4.1277923583984375
    4. ')' → logprob: -4.3777923583984375
    5. ' +' → logprob: -4.3777923583984375
    6. '(' → logprob: -6.1277923583984375
    7. ' *' → logprob: -6.6277923583984375
    8. '```' → logprob: -6.8777923583984375
    9. '<|end|>' → logprob: -7.3777923583984375
    10. '#' → logprob: -8.752792358398438

Token 257: ' __' (ID: 2516)
  Prédit: ' __'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' __' → logprob: -0.05763726308941841
    2. ' ' → logprob: -3.8076372146606445
    3. ' ' → logprob: -4.0576372146606445
    4. '  ' → logprob: -5.1826372146606445
    5. ' _' → logprob: -5.5576372146606445
    6. '_' → logprob: -5.8076372146606445
    7. '__' → logprob: -6.3076372146606445
    8. ' space' → logprob: -6.8076372146606445
    9. 'space' → logprob: -8.307637214660645
    10. ' ‌' → logprob: -8.682637214660645

Token 258: 'name' (ID: 897)
  Prédit: '__'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '__' → logprob: -0.12936100363731384
    2. ' __' → logprob: -2.5043609142303467
    3. ' ==' → logprob: -3.2543609142303467
    4. 'name' → logprob: -7.754361152648926
    5. '==' → logprob: -8.254361152648926
    6. 'if' → logprob: -8.754361152648926
    7. ' if' → logprob: -10.129361152648926
    8. '.__' → logprob: -10.629361152648926
    9. '__
' → logprob: -11.254361152648926
    10. '__.' → logprob: -11.504361152648926

Token 259: '__' (ID: 771)
  Prédit: '__'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '__' → logprob: -3.070975071750581e-05
    2. '==' → logprob: -10.625030517578125
    3. '__.__' → logprob: -12.250030517578125
    4. ' ==' → logprob: -14.500030517578125
    5. '=="' → logprob: -14.625030517578125
    6. '__.' → logprob: -15.500030517578125
    7. '___' → logprob: -16.125030517578125
    8. '__["' → logprob: -16.125030517578125
    9. '__":
' → logprob: -16.500030517578125
    10. '____' → logprob: -16.625030517578125

Token 260: ' ==' (ID: 951)
  Prédit: '__'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '__' → logprob: -0.08671168982982635
    2. ' ==' → logprob: -2.7117116451263428
    3. '==' → logprob: -4.211711883544922
    4. '=="' → logprob: -6.336711883544922
    5. '__.__' → logprob: -11.461711883544922
    6. '___' → logprob: -11.586711883544922
    7. '=='' → logprob: -12.211711883544922
    8. ' =="' → logprob: -12.336711883544922
    9. '__["' → logprob: -12.961711883544922
    10. '__":
' → logprob: -13.211711883544922

Token 261: ' "__' (ID: 27367)
  Prédit: '"'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '"' → logprob: -0.011621949262917042
    2. ''' → logprob: -4.511621952056885
    3. ' "__' → logprob: -7.511621952056885
    4. '__' → logprob: -10.636621475219727
    5. ' '__' → logprob: -13.011621475219727
    6. ' "' → logprob: -15.011621475219727
    7. '"user' → logprob: -15.011621475219727
    8. '"name' → logprob: -16.136621475219727
    9. '("__' → logprob: -16.761621475219727
    10. '"_' → logprob: -17.511621475219727

Token 262: 'main' (ID: 7731)
  Prédit: 'main'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'main' → logprob: -3.547789674485102e-05
    2. 'name' → logprob: -10.250035285949707
    3. ' main' → logprob: -18.125036239624023
    4. 'ma' → logprob: -19.875036239624023
    5. '_main' → logprob: -20.750036239624023
    6. '__' → logprob: -21.125036239624023
    7. '(main' → logprob: -22.375036239624023
    8. 'm' → logprob: -23.000036239624023
    9. '-main' → logprob: -23.375036239624023
    10. 'file' → logprob: -23.375036239624023

Token 263: '__":
' (ID: 49892)
  Prédit: '__":
'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '__":
' → logprob: -0.25217515230178833
    2. '__' → logprob: -1.5021750926971436
    3. '__:' → logprob: -8.627175331115723
    4. '__':
' → logprob: -9.627175331115723
    5. '__["' → logprob: -14.627175331115723
    6. '__",' → logprob: -16.127174377441406
    7. '__.' → logprob: -16.377174377441406
    8. '__("' → logprob: -16.627174377441406
    9. '__
' → logprob: -16.877174377441406
    10. '___' → logprob: -17.127174377441406

Token 264: '   ' (ID: 271)
  Prédit: ':'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ':' → logprob: -0.47992682456970215
    2. '   ' → logprob: -0.9799268245697021
    3. ':
' → logprob: -5.729927062988281
    4. '    
' → logprob: -7.354927062988281
    5. '[' → logprob: -7.729927062988281
    6. 'import' → logprob: -8.354927062988281
    7. '(n' → logprob: -8.479927062988281
    8. '():' → logprob: -8.979927062988281
    9. '```' → logprob: -9.229927062988281
    10. ' :' → logprob: -9.604927062988281

Token 265: ' #' (ID: 1069)
  Prédit: ' N'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' N' → logprob: -0.5778644680976868
    2. ' import' → logprob: -1.327864408493042
    3. 'N' → logprob: -2.327864408493042
    4. 'import' → logprob: -2.827864408493042
    5. ' n' → logprob: -4.952864646911621
    6. '   ' → logprob: -5.452864646911621
    7. 'n' → logprob: -5.577864646911621
    8. ' input' → logprob: -6.827864646911621
    9. ' T' → logprob: -7.952864646911621
    10. 'T' → logprob: -8.577864646911621

Token 266: ' Lecture' (ID: 106534)
  Prédit: 'import'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'import' → logprob: -1.0421589612960815
    2. 'N' → logprob: -1.5421589612960815
    3. ' import' → logprob: -1.7921589612960815
    4. ' N' → logprob: -1.9171589612960815
    5. ' n' → logprob: -3.042159080505371
    6. 'n' → logprob: -3.167159080505371
    7. ' input' → logprob: -4.167159080505371
    8. 'input' → logprob: -5.042159080505371
    9. 't' → logprob: -6.167159080505371
    10. 'T' → logprob: -6.417159080505371

Token 267: ' des' (ID: 731)
  Prédit: '()'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '()' → logprob: -0.04753325134515762
    2. '   ' → logprob: -3.1725332736968994
    3. 'import' → logprob: -5.92253303527832
    4. ' des' → logprob: -7.54753303527832
    5. '(N' → logprob: -8.29753303527832
    6. '(' → logprob: -8.42253303527832
    7. 'des' → logprob: -9.29753303527832
    8. ' =' → logprob: -9.29753303527832
    9. 's' → logprob: -9.54753303527832
    10. 'de' → logprob: -10.04753303527832

Token 268: ' entr' (ID: 7072)
  Prédit: ' données'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' données' → logprob: -0.9121803045272827
    2. ' entr' → logprob: -1.0371803045272827
    3. ' inputs' → logprob: -2.0371804237365723
    4. 'import' → logprob: -3.1621804237365723
    5. 'entr' → logprob: -3.9121804237365723
    6. ' valeurs' → logprob: -4.537180423736572
    7. 'inputs' → logprob: -4.662180423736572
    8. ' input' → logprob: -4.912180423736572
    9. ' import' → logprob: -5.162180423736572
    10. 'don' → logprob: -5.787180423736572

Token 269: 'ées' (ID: 5161)
  Prédit: 'ées'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'ées' → logprob: -0.002912454307079315
    2. 'ees' → logprob: -6.377912521362305
    3. 'ée' → logprob: -6.752912521362305
    4. 'es' → logprob: -10.377912521362305
    5. 'é' → logprob: -12.627912521362305
    6. 'e' → logprob: -12.752912521362305
    7. 'ies' → logprob: -13.252912521362305
    8. 'er' → logprob: -14.127912521362305
    9. 'és' → logprob: -14.377912521362305
    10. 'ee' → logprob: -14.752912521362305

Token 270: ' utilisateur' (ID: 115595)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.03507246822118759
    2. ':' → logprob: -3.7850725650787354
    3. '    
' → logprob: -5.160072326660156
    4. ' =' → logprob: -7.035072326660156
    5. '(N' → logprob: -7.285072326660156
    6. 'n' → logprob: -7.285072326660156
    7. '  
' → logprob: -7.785072326660156
    8. '<|end|>' → logprob: -7.785072326660156
    9. ' N' → logprob: -8.035072326660156
    10. '```' → logprob: -8.160072326660156

Token 271: '
' (ID: 198)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.03115464560687542
    2. ':' → logprob: -3.9061546325683594
    3. '    
' → logprob: -5.531154632568359
    4. 'import' → logprob: -6.781154632568359
    5. '(N' → logprob: -7.031154632568359
    6. '<|end|>' → logprob: -7.406154632568359
    7. ' =' → logprob: -7.531154632568359
    8. '
' → logprob: -7.531154632568359
    9. 'n' → logprob: -7.531154632568359
    10. '```' → logprob: -8.03115463256836

Token 272: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.10471513867378235
    2. ':' → logprob: -2.47971510887146
    3. '    
' → logprob: -4.979715347290039
    4. 'n' → logprob: -5.979715347290039
    5. '```' → logprob: -6.854715347290039
    6. '  
' → logprob: -7.354715347290039
    7. '
' → logprob: -7.479715347290039
    8. 'import' → logprob: -7.854715347290039
    9. '(N' → logprob: -7.979715347290039
    10. ':
' → logprob: -7.979715347290039

Token 273: ' #' (ID: 1069)
  Prédit: ' N'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' N' → logprob: -0.39676186442375183
    2. 'N' → logprob: -1.6467618942260742
    3. ' n' → logprob: -2.271761894226074
    4. 'n' → logprob: -3.521761894226074
    5. '   ' → logprob: -6.146761894226074
    6. ' ' → logprob: -12.146761894226074
    7. ' import' → logprob: -13.271761894226074
    8. 'import' → logprob: -13.396761894226074
    9. '    
' → logprob: -13.521761894226074
    10. ' input' → logprob: -14.146761894226074

Token 274: ' N' (ID: 478)
  Prédit: 'N'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'N' → logprob: -0.20879729092121124
    2. ' N' → logprob: -1.7087973356246948
    3. 'n' → logprob: -5.333797454833984
    4. '   ' → logprob: -6.583797454833984
    5. ' n' → logprob: -6.958797454833984
    6. ' input' → logprob: -9.458797454833984
    7. 'input' → logprob: -10.083797454833984
    8. 'import' → logprob: -10.708797454833984
    9. ' inputs' → logprob: -10.708797454833984
    10. 'T' → logprob: -11.708797454833984

Token 275: ':' (ID: 25)
  Prédit: ','
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ',' → logprob: -0.027463214471936226
    2. ' =' → logprob: -3.77746319770813
    3. '=' → logprob: -5.652463436126709
    4. ' ,' → logprob: -8.15246295928955
    5. ',K' → logprob: -8.40246295928955
    6. '=int' → logprob: -8.77746295928955
    7. ',N' → logprob: -11.15246295928955
    8. '=input' → logprob: -12.52746295928955
    9. ',k' → logprob: -12.77746295928955
    10. '   ' → logprob: -12.77746295928955

Token 276: ' le' (ID: 505)
  Prédit: ' int'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' int' → logprob: -0.06339725106954575
    2. 'int' → logprob: -2.813397169113159
    3. '=int' → logprob: -6.938397407531738
    4. ' N' → logprob: -8.063397407531738
    5. ' n' → logprob: -9.813397407531738
    6. ' ' → logprob: -10.188397407531738
    7. ' =' → logprob: -10.438397407531738
    8. '=' → logprob: -12.188397407531738
    9. 'n' → logprob: -12.313397407531738
    10. 'N' → logprob: -12.438397407531738

Token 277: ' nombre' (ID: 9733)
  Prédit: ' nombre'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' nombre' → logprob: -0.01566958799958229
    2. 'nombre' → logprob: -4.765669822692871
    3. ' number' → logprob: -5.515669822692871
    4. ' int' → logprob: -6.015669822692871
    5. ' nombres' → logprob: -8.640669822692871
    6. '=int' → logprob: -9.140669822692871
    7. 'int' → logprob: -9.265669822692871
    8. 'number' → logprob: -9.890669822692871
    9. '_nombre' → logprob: -10.265669822692871
    10. ' Nombre' → logprob: -10.640669822692871

Token 278: ' total' (ID: 3609)
  Prédit: ','
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ',' → logprob: -0.4172690808773041
    2. ' =' → logprob: -1.5422691106796265
    3. ' d' → logprob: -3.542268991470337
    4. ' des' → logprob: -3.792268991470337
    5. ' de' → logprob: -4.417269229888916
    6. '_total' → logprob: -4.542269229888916
    7. '_des' → logprob: -4.667269229888916
    8. ' ,' → logprob: -4.917269229888916
    9. '_elements' → logprob: -5.042269229888916
    10. '_de' → logprob: -5.292269229888916

Token 279: ' d' (ID: 272)
  Prédit: ','
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ',' → logprob: -0.10695616900920868
    2. ' d' → logprob: -3.3569562435150146
    3. ' des' → logprob: -3.9819562435150146
    4. ' ,' → logprob: -3.9819562435150146
    5. ' =' → logprob: -4.1069560050964355
    6. '   ' → logprob: -5.2319560050964355
    7. 'd' → logprob: -5.8569560050964355
    8. ' de' → logprob: -6.7319560050964355
    9. 'des' → logprob: -6.8569560050964355
    10. ' ' → logprob: -6.9819560050964355

Token 280: ''' (ID: 6)
  Prédit: ' d'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' d' → logprob: -0.3396064043045044
    2. ' éléments' → logprob: -1.9646064043045044
    3. 'élé' → logprob: -2.464606285095215
    4. '_' → logprob: -3.589606285095215
    5. ' ' → logprob: -3.714606285095215
    6. '_elements' → logprob: -6.089606285095215
    7. ' de' → logprob: -6.339606285095215
    8. ' elements' → logprob: -6.589606285095215
    9. ' élément' → logprob: -6.964606285095215
    10. ' des' → logprob: -7.339606285095215

Token 281: 'élé' (ID: 15228)
  Prédit: 'élé'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'élé' → logprob: -0.0006167700630612671
    2. 'é' → logprob: -7.750616550445557
    3. 'él' → logprob: -10.000617027282715
    4. ''' → logprob: -10.000617027282715
    5. ' éléments' → logprob: -10.000617027282715
    6. 'elements' → logprob: -10.875617027282715
    7. '
' → logprob: -12.250617027282715
    8. 'obj' → logprob: -12.375617027282715
    9. '`' → logprob: -12.500617027282715
    10. '```' → logprob: -13.000617027282715

Token 282: 'ments' (ID: 1626)
  Prédit: 'ments'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'ments' → logprob: -0.0014029678422957659
    2. 'lé' → logprob: -7.251402854919434
    3. 'éments' → logprob: -7.626402854919434
    4. 'ements' → logprob: -9.501402854919434
    5. 'lements' → logprob: -9.751402854919434
    6. 'm' → logprob: -10.876402854919434
    7. '_' → logprob: -11.376402854919434
    8. 't' → logprob: -11.501402854919434
    9. 'ment' → logprob: -12.126402854919434
    10. 'fants' → logprob: -12.251402854919434

Token 283: ',' (ID: 11)
  Prédit: ','
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ',' → logprob: -0.3211992383003235
    2. ' =' → logprob: -1.6961991786956787
    3. '   ' → logprob: -2.5711991786956787
    4. '=' → logprob: -4.446199417114258
    5. ',
' → logprob: -6.446199417114258
    6. ' ,' → logprob: -6.696199417114258
    7. 'N' → logprob: -10.196199417114258
    8. ',K' → logprob: -10.196199417114258
    9. ' N' → logprob: -10.321199417114258
    10. ' ' → logprob: -10.571199417114258

Token 284: ' K' (ID: 658)
  Prédit: ' K'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' K' → logprob: -0.47897449135780334
    2. '   ' → logprob: -1.353974461555481
    3. 'K' → logprob: -2.1039745807647705
    4. '    ' → logprob: -8.728974342346191
    5. ' ' → logprob: -9.978974342346191
    6. '  ' → logprob: -9.978974342346191
    7. ',' → logprob: -10.478974342346191
    8. ',K' → logprob: -11.103974342346191
    9. ' N' → logprob: -11.228974342346191
    10. 'input' → logprob: -11.228974342346191

Token 285: ':' (ID: 25)
  Prédit: ','
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ',' → logprob: -0.22367271780967712
    2. ' =' → logprob: -1.7236727476119995
    3. '=' → logprob: -3.84867262840271
    4. '=int' → logprob: -7.848672866821289
    5. ' ,' → logprob: -9.098672866821289
    6. '=input' → logprob: -9.723672866821289
    7. ',K' → logprob: -10.223672866821289
    8. ' ' → logprob: -10.223672866821289
    9. '   ' → logprob: -10.723672866821289
    10. ',input' → logprob: -11.348672866821289

Token 286: ' la' (ID: 557)
  Prédit: ' int'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' int' → logprob: -0.12065723538398743
    2. 'int' → logprob: -2.620657205581665
    3. ' ' → logprob: -3.870657205581665
    4. ' input' → logprob: -4.495657444000244
    5. ' le' → logprob: -5.995657444000244
    6. ' la' → logprob: -6.120657444000244
    7. 'input' → logprob: -6.870657444000244
    8. ' len' → logprob: -7.120657444000244
    9. ' N' → logprob: -7.495657444000244
    10. '=int' → logprob: -7.745657444000244

Token 287: ' capacité' (ID: 62575)
  Prédit: 'max'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'max' → logprob: -1.3178093433380127
    2. ' nombre' → logprob: -1.5678093433380127
    3. 'nombre' → logprob: -1.6928093433380127
    4. ' maximum' → logprob: -1.6928093433380127
    5. ' max' → logprob: -2.6928093433380127
    6. 'maximum' → logprob: -3.3178093433380127
    7. ' maximal' → logprob: -3.9428093433380127
    8. 'prem' → logprob: -4.942809104919434
    9. ' number' → logprob: -5.567809104919434
    10. ' maximale' → logprob: -5.692809104919434

Token 288: ' du' (ID: 1462)
  Prédit: ','
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ',' → logprob: -0.7162612676620483
    2. ' maximale' → logprob: -1.7162612676620483
    3. ' de' → logprob: -2.216261386871338
    4. ' =' → logprob: -2.341261386871338
    5. ' d' → logprob: -3.091261386871338
    6. ' ,' → logprob: -3.216261386871338
    7. ' du' → logprob: -4.841261386871338
    8. 'max' → logprob: -4.966261386871338
    9. '=' → logprob: -5.216261386871338
    10. ' des' → logprob: -5.341261386871338

Token 289: ' premier' (ID: 15506)
  Prédit: ' premier'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' premier' → logprob: -0.2632598280906677
    2. ' voyage' → logprob: -2.2632598876953125
    3. 'prem' → logprob: -2.5132598876953125
    4. ' input' → logprob: -4.0132598876953125
    5. 'voy' → logprob: -5.1382598876953125
    6. ' transport' → logprob: -5.1382598876953125
    7. ' first' → logprob: -5.5132598876953125
    8. ' ' → logprob: -6.0132598876953125
    9. 'input' → logprob: -6.2632598876953125
    10. ' trip' → logprob: -6.7632598876953125

Token 290: ' voyage' (ID: 35454)
  Prédit: ' voyage'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' voyage' → logprob: -0.20189060270786285
    2. 'voy' → logprob: -1.7018905878067017
    3. ' ' → logprob: -8.95189094543457
    4. ' trip' → logprob: -9.57689094543457
    5. 'trip' → logprob: -9.57689094543457
    6. ' trajet' → logprob: -10.32689094543457
    7. ' voyages' → logprob: -10.70189094543457
    8. ' voy' → logprob: -11.07689094543457
    9. 'Voy' → logprob: -11.32689094543457
    10. 'vo' → logprob: -11.45189094543457

Token 291: '
' (ID: 198)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.524296760559082
    2. ',' → logprob: -0.899296760559082
    3. ' ,' → logprob: -7.899296760559082
    4. ' =' → logprob: -8.149296760559082
    5. '    
' → logprob: -8.649296760559082
    6. ',
' → logprob: -9.774296760559082
    7. 'N' → logprob: -9.899296760559082
    8. 'n' → logprob: -10.149296760559082
    9. '=' → logprob: -10.274296760559082
    10. ',N' → logprob: -10.274296760559082

Token 292: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.009586201049387455
    2. ',' → logprob: -4.884586334228516
    3. 'n' → logprob: -7.259586334228516
    4. 'N' → logprob: -7.759586334228516
    5. ' N' → logprob: -7.759586334228516
    6. '    
' → logprob: -8.384586334228516
    7. ' ,' → logprob: -9.884586334228516
    8. 'input' → logprob: -10.009586334228516
    9. 'import' → logprob: -11.509586334228516
    10. ',N' → logprob: -11.634586334228516

Token 293: ' N' (ID: 478)
  Prédit: 'N'
  Correct (stricte): False
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'N' (adapté à ' N') → logprob: -0.3494417071342468
    2. ' N' → logprob: -1.2244417667388916
    3. '   ' → logprob: -7.3494415283203125
    4. 'n' → logprob: -8.224441528320312
    5. ' n' → logprob: -10.224441528320312
    6. ' line' → logprob: -10.849441528320312
    7. 'line' → logprob: -11.849441528320312
    8. '    
' → logprob: -12.224441528320312
    9. 'input' → logprob: -12.724441528320312
    10. ' ' → logprob: -12.849441528320312

Token 294: ',' (ID: 11)
  Prédit: ','
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ',' → logprob: -0.0005872295005246997
    2. ',K' → logprob: -7.625587463378906
    3. '=' → logprob: -10.000587463378906
    4. ' ,' → logprob: -10.250587463378906
    5. ' =' → logprob: -11.125587463378906
    6. ',k' → logprob: -13.375587463378906
    7. ',
' → logprob: -14.500587463378906
    8. ')' → logprob: -15.000587463378906
    9. ',N' → logprob: -15.000587463378906
    10. ' K' → logprob: -15.375587463378906

Token 295: ' K' (ID: 658)
  Prédit: ' K'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' K' → logprob: -0.47417303919792175
    2. 'K' → logprob: -0.9741730690002441
    3. ' ' → logprob: -9.849172592163086
    4. '<|end|>' → logprob: -10.099172592163086
    5. '  ' → logprob: -13.724172592163086
    6. ' ' → logprob: -14.849172592163086
    7. ' 
' → logprob: -15.974172592163086
    8. '  
' → logprob: -16.099172592163086
    9. ',K' → logprob: -16.474172592163086
    10. ' ' → logprob: -16.474172592163086

Token 296: ' =' (ID: 314)
  Prédit: '='
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '=' → logprob: -0.5759481191635132
    2. ' =' → logprob: -0.8259481191635132
    3. '=input' → logprob: -12.200947761535645
    4. ',' → logprob: -12.950947761535645
    5. ')' → logprob: -14.325947761535645
    6. '=int' → logprob: -15.075947761535645
    7. ')=' → logprob: -16.45094871520996
    8. '<|end|>' → logprob: -16.45094871520996
    9. ' ' → logprob: -16.57594871520996
    10. '＝' → logprob: -17.45094871520996

Token 297: ' map' (ID: 4014)
  Prédit: ' map'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' map' → logprob: -0.06196846812963486
    2. 'map' → logprob: -2.8119685649871826
    3. '	map' → logprob: -15.186968803405762
    4. ' ' → logprob: -15.561968803405762
    5. ' ' → logprob: -15.561968803405762
    6. '[' → logprob: -16.811967849731445
    7. '(map' → logprob: -17.311967849731445
    8. ' list' → logprob: -17.436967849731445
    9. 'list' → logprob: -18.436967849731445
    10. 'input' → logprob: -18.436967849731445

Token 298: '(int' (ID: 2742)
  Prédit: '(int'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(int' → logprob: -0.0003550079127307981
    2. '(' → logprob: -8.000354766845703
    3. 'int' → logprob: -11.250354766845703
    4. '(input' → logprob: -12.000354766845703
    5. '(str' → logprob: -15.500354766845703
    6. '=int' → logprob: -17.000354766845703
    7. '<int' → logprob: -17.000354766845703
    8. '(
' → logprob: -17.125354766845703
    9. ' int' → logprob: -17.625354766845703
    10. '(list' → logprob: -18.000354766845703

Token 299: ',' (ID: 11)
  Prédit: 'input'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'input' → logprob: -0.10321281850337982
    2. '(input' → logprob: -2.353212833404541
    3. ',input' → logprob: -6.228212833404541
    4. ')' → logprob: -7.353212833404541
    5. ' input' → logprob: -8.353212356567383
    6. ',' → logprob: -9.603212356567383
    7. '(' → logprob: -10.103212356567383
    8. '=input' → logprob: -10.228212356567383
    9. '<input' → logprob: -12.728212356567383
    10. '[input' → logprob: -13.603212356567383

Token 300: ' input' (ID: 3422)
  Prédit: 'input'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'input' → logprob: -0.006715370807796717
    2. ' input' → logprob: -5.006715297698975
    3. ')' → logprob: -17.881715774536133
    4. '(input' → logprob: -18.006715774536133
    5. '=input' → logprob: -18.631715774536133
    6. ',input' → logprob: -19.006715774536133
    7. '	input' → logprob: -19.506715774536133
    8. ' ' → logprob: -19.631715774536133
    9. '<input' → logprob: -19.881715774536133
    10. '   ' → logprob: -20.256715774536133

Token 301: '().' (ID: 1454)
  Prédit: '().'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '().' → logprob: -0.0019458913011476398
    2. '()' → logprob: -6.251945972442627
    3. '())' → logprob: -11.376945495605469
    4. ')' → logprob: -13.001945495605469
    5. '(' → logprob: -13.251945495605469
    6. '()
' → logprob: -14.376945495605469
    7. ' ().' → logprob: -14.751945495605469
    8. '()).' → logprob: -15.626945495605469
    9. '()[' → logprob: -16.25194549560547
    10. '("").' → logprob: -16.37694549560547

Token 302: 'split' (ID: 13627)
  Prédit: 'split'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'split' → logprob: -0.0001589618914294988
    2. 'strip' → logprob: -8.75015926361084
    3. '().' → logprob: -15.62515926361084
    4. '(split' → logprob: -15.87515926361084
    5. ' split' → logprob: -16.000158309936523
    6. 'rstrip' → logprob: -16.375158309936523
    7. 'read' → logprob: -18.500158309936523
    8. 'spl' → logprob: -18.750158309936523
    9. '.split' → logprob: -18.875158309936523
    10. '_split' → logprob: -19.250158309936523

Token 303: '())
' (ID: 4574)
  Prédit: '())'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '())' → logprob: -0.003602094016969204
    2. ')' → logprob: -6.253602027893066
    3. '()' → logprob: -6.628602027893066
    4. '()))' → logprob: -8.128602027893066
    5. '('' → logprob: -10.628602027893066
    6. '(' → logprob: -10.878602027893066
    7. '))' → logprob: -11.628602027893066
    8. '(','' → logprob: -14.003602027893066
    9. '().' → logprob: -14.378602027893066
    10. '())
' → logprob: -14.753602027893066

Token 304: '   ' (ID: 271)
  Prédit: 'A'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'A' → logprob: -0.10435382276773453
    2. ' A' → logprob: -2.604353904724121
    3. '   ' → logprob: -3.854353904724121
    4. '<|end|>' → logprob: -6.479353904724121
    5. '
' → logprob: -7.604353904724121
    6. '    
' → logprob: -7.854353904724121
    7. 'elements' → logprob: -7.979353904724121
    8. 'tokens' → logprob: -8.979353904724121
    9. 'rest' → logprob: -8.979353904724121
    10. ' elements' → logprob: -9.104353904724121

Token 305: ' #' (ID: 1069)
  Prédit: 'A'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'A' → logprob: -0.0006644221721217036
    2. '_' → logprob: -7.875664234161377
    3. ' A' → logprob: -8.250664710998535
    4. '   ' → logprob: -11.000664710998535
    5. 'print' → logprob: -13.500664710998535
    6. '_A' → logprob: -14.000664710998535
    7. '    
' → logprob: -14.125664710998535
    8. '[' → logprob: -14.750664710998535
    9. 's' → logprob: -14.875664710998535
    10. '```' → logprob: -15.000664710998535

Token 306: ' Lecture' (ID: 106534)
  Prédit: 'A'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'A' → logprob: -0.0005549400229938328
    2. '_' → logprob: -7.625555038452148
    3. ' A' → logprob: -10.375555038452148
    4. '#' → logprob: -10.875555038452148
    5. 'input' → logprob: -11.875555038452148
    6. 'print' → logprob: -12.375555038452148
    7. 'elements' → logprob: -13.875555038452148
    8. '_A' → logprob: -14.250555038452148
    9. 'result' → logprob: -14.250555038452148
    10. 'data' → logprob: -14.500555038452148

Token 307: ' de' (ID: 334)
  Prédit: '()'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '()' → logprob: -0.05929379537701607
    2. 'A' → logprob: -3.559293746948242
    3. ' des' → logprob: -4.934293746948242
    4. '   ' → logprob: -4.934293746948242
    5. 's' → logprob: -5.434293746948242
    6. 'des' → logprob: -5.434293746948242
    7. '(' → logprob: -6.434293746948242
    8. '(A' → logprob: -6.684293746948242
    9. ' of' → logprob: -7.434293746948242
    10. ' de' → logprob: -7.434293746948242

Token 308: ' la' (ID: 557)
  Prédit: 'input'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'input' → logprob: -0.5052278637886047
    2. 'list' → logprob: -1.00522780418396
    3. 'A' → logprob: -3.50522780418396
    4. ' input' → logprob: -8.255228042602539
    5. ' A' → logprob: -8.505228042602539
    6. ' list' → logprob: -8.755228042602539
    7. 'liste' → logprob: -13.005228042602539
    8. '_' → logprob: -13.255228042602539
    9. 'a' → logprob: -13.755228042602539
    10. 'lst' → logprob: -14.005228042602539

Token 309: ' liste' (ID: 31719)
  Prédit: 'A'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'A' → logprob: -0.0036459225229918957
    2. ' A' → logprob: -5.878645896911621
    3. '_' → logprob: -7.628645896911621
    4. 'list' → logprob: -8.378645896911621
    5. 'elements' → logprob: -9.503645896911621
    6. 'input' → logprob: -11.378645896911621
    7. ' list' → logprob: -11.503645896911621
    8. 'lst' → logprob: -12.253645896911621
    9. 'array' → logprob: -12.378645896911621
    10. ' elements' → logprob: -12.503645896911621

Token 310: ' des' (ID: 731)
  Prédit: 'A'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'A' → logprob: -0.5762510895729065
    2. ' A' → logprob: -0.8262510895729065
    3. ' des' → logprob: -9.076251029968262
    4. '(A' → logprob: -9.326251029968262
    5. '   ' → logprob: -10.576251029968262
    6. '()' → logprob: -11.201251029968262
    7. ' =' → logprob: -11.826251029968262
    8. 'a' → logprob: -11.951251029968262
    9. 'elements' → logprob: -11.951251029968262
    10. ' ' → logprob: -12.076251029968262

Token 311: ' éléments' (ID: 57375)
  Prédit: 'A'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'A' → logprob: -0.21461839973926544
    2. ' A' → logprob: -1.839618444442749
    3. 'élé' → logprob: -4.21461820602417
    4. ' elements' → logprob: -4.71461820602417
    5. ' éléments' → logprob: -5.08961820602417
    6. 'elements' → logprob: -5.46461820602417
    7. 'ele' → logprob: -10.214618682861328
    8. 'arr' → logprob: -11.589618682861328
    9. 'elem' → logprob: -11.589618682861328
    10. 'element' → logprob: -11.839618682861328

Token 312: ' à' (ID: 1221)
  Prédit: 'A'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'A' → logprob: -0.07369697093963623
    2. ' A' → logprob: -3.073697090148926
    3. '   ' → logprob: -3.698697090148926
    4. ',' → logprob: -11.448697090148926
    5. '	A' → logprob: -12.073697090148926
    6. '    
' → logprob: -12.323697090148926
    7. ' ' → logprob: -12.323697090148926
    8. '  ' → logprob: -12.323697090148926
    9. ',A' → logprob: -13.073697090148926
    10. '=A' → logprob: -13.198697090148926

Token 313: ' traiter' (ID: 105852)
  Prédit: 'trait'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'trait' → logprob: -0.21637433767318726
    2. ' traiter' → logprob: -1.966374397277832
    3. 'tr' → logprob: -2.966374397277832
    4. '_trait' → logprob: -6.466374397277832
    5. 'tra' → logprob: -6.716374397277832
    6. 'process' → logprob: -8.466374397277832
    7. 'proces' → logprob: -10.091374397277832
    8. '_tr' → logprob: -10.841374397277832
    9. ' tra' → logprob: -11.466374397277832
    10. ' trait' → logprob: -11.591374397277832

Token 314: '
' (ID: 198)
  Prédit: 'A'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'A' → logprob: -0.08152779191732407
    2. ' A' → logprob: -2.5815277099609375
    3. '   ' → logprob: -5.9565277099609375
    4. '	A' → logprob: -11.581527709960938
    5. '
' → logprob: -11.706527709960938
    6. '    
' → logprob: -11.831527709960938
    7. ',' → logprob: -12.206527709960938
    8. ',A' → logprob: -12.206527709960938
    9. ' ' → logprob: -12.956527709960938
    10. '=A' → logprob: -13.706527709960938

Token 315: '   ' (ID: 271)
  Prédit: 'A'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'A' → logprob: -0.031225360929965973
    2. ' A' → logprob: -3.5312254428863525
    3. '   ' → logprob: -6.531225204467773
    4. '	A' → logprob: -11.531225204467773
    5. ',A' → logprob: -13.406225204467773
    6. 'a' → logprob: -13.781225204467773
    7. ' ' → logprob: -13.906225204467773
    8. '  ' → logprob: -14.156225204467773
    9. '    
' → logprob: -14.406225204467773
    10. ',' → logprob: -14.906225204467773

Token 316: ' A' (ID: 355)
  Prédit: 'A'
  Correct (stricte): False
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'A' (adapté à ' A') → logprob: -0.018152397125959396
    2. ' A' → logprob: -4.018152236938477
    3. '_' → logprob: -13.143152236938477
    4. '   ' → logprob: -14.893152236938477
    5. '_A' → logprob: -15.643152236938477
    6. '	A' → logprob: -17.018152236938477
    7. 'a' → logprob: -17.393152236938477
    8. ' ' → logprob: -17.518152236938477
    9. ' _' → logprob: -18.643152236938477
    10. 'arr' → logprob: -20.143152236938477

Token 317: ' =' (ID: 314)
  Prédit: '='
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '=' → logprob: -0.1602243334054947
    2. ' =' → logprob: -1.9102243185043335
    3. ')' → logprob: -16.53522491455078
    4. '=list' → logprob: -17.78522491455078
    5. '=input' → logprob: -17.91022491455078
    6. ' ' → logprob: -17.91022491455078
    7. '＝' → logprob: -18.03522491455078
    8. '_' → logprob: -18.28522491455078
    9. ',' → logprob: -18.66022491455078
    10. ' ' → logprob: -19.16022491455078

Token 318: ' list' (ID: 1562)
  Prédit: 'list'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'list' → logprob: -0.03804149478673935
    2. ' list' → logprob: -3.288041591644287
    3. '[list' → logprob: -18.788042068481445
    4. '=list' → logprob: -19.163042068481445
    5. '[' → logprob: -20.038042068481445
    6. 'List' → logprob: -20.163042068481445
    7. '	list' → logprob: -21.413042068481445
    8. 'map' → logprob: -22.288042068481445
    9. 'lis' → logprob: -22.288042068481445
    10. '[]' → logprob: -22.538042068481445

Token 319: '(map' (ID: 16946)
  Prédit: '(map'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(map' → logprob: -0.01835104450583458
    2. '(' → logprob: -4.018351078033447
    3. '(int' → logprob: -8.643350601196289
    4. '(input' → logprob: -10.893350601196289
    5. '()' → logprob: -13.018350601196289
    6. '(range' → logprob: -13.268350601196289
    7. 'map' → logprob: -14.268350601196289
    8. '(

' → logprob: -15.018350601196289
    9. '(
' → logprob: -15.643350601196289
    10. '(list' → logprob: -16.01835060119629

Token 320: '(int' (ID: 2742)
  Prédit: '(int'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(int' → logprob: -0.00030709904967807233
    2. '(' → logprob: -8.500307083129883
    3. 'int' → logprob: -9.250307083129883
    4. '<int' → logprob: -12.625307083129883
    5. '=int' → logprob: -13.125307083129883
    6. '[int' → logprob: -13.750307083129883
    7. ',int' → logprob: -14.875307083129883
    8. '(input' → logprob: -15.375307083129883
    9. ' int' → logprob: -15.500307083129883
    10. ']int' → logprob: -16.125307083129883

Token 321: ',' (ID: 11)
  Prédit: '(input'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(input' → logprob: -0.5556435585021973
    2. ',' → logprob: -1.4306435585021973
    3. ',input' → logprob: -1.6806435585021973
    4. '(' → logprob: -7.430643558502197
    5. 'input' → logprob: -8.305643081665039
    6. '=input' → logprob: -11.055643081665039
    7. ' ,' → logprob: -11.305643081665039
    8. ' (' → logprob: -11.805643081665039
    9. ' input' → logprob: -12.180643081665039
    10. '(),' → logprob: -12.805643081665039

Token 322: ' input' (ID: 3422)
  Prédit: 'input'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'input' → logprob: -0.00026181264547631145
    2. ' input' → logprob: -8.250262260437012
    3. '(input' → logprob: -14.625262260437012
    4. ',input' → logprob: -16.500261306762695
    5. '=input' → logprob: -19.625261306762695
    6. '<input' → logprob: -20.250261306762695
    7. '_input' → logprob: -20.250261306762695
    8. ',' → logprob: -20.750261306762695
    9. ')' → logprob: -20.875261306762695
    10. '	input' → logprob: -21.000261306762695

Token 323: '().' (ID: 1454)
  Prédit: '().'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '().' → logprob: -3.166338137816638e-05
    2. '()' → logprob: -10.375031471252441
    3. ' ().' → logprob: -15.500031471252441
    4. '(' → logprob: -15.750031471252441
    5. '()
' → logprob: -18.000032424926758
    6. '.split' → logprob: -18.750032424926758
    7. '()[' → logprob: -19.000032424926758
    8. '   ' → logprob: -19.125032424926758
    9. '.' → logprob: -19.125032424926758
    10. '()))' → logprob: -19.875032424926758

Token 324: 'split' (ID: 13627)
  Prédit: 'split'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'split' → logprob: -1.306760805164231e-05
    2. 'strip' → logprob: -11.25001335144043
    3. ' split' → logprob: -17.62501335144043
    4. 'rstrip' → logprob: -18.00001335144043
    5. '(split' → logprob: -18.62501335144043
    6. 'read' → logprob: -20.00001335144043
    7. '.split' → logprob: -20.62501335144043
    8. 'spl' → logprob: -21.00001335144043
    9. '_split' → logprob: -22.25001335144043
    10. 'str' → logprob: -22.25001335144043

Token 325: '()))
' (ID: 24521)
  Prédit: '()))'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '()))' → logprob: -0.5980167388916016
    2. '))' → logprob: -0.8480167388916016
    3. '()' → logprob: -3.8480167388916016
    4. '(' → logprob: -8.223016738891602
    5. '())' → logprob: -8.473016738891602
    6. ')' → logprob: -10.473016738891602
    7. '()))
' → logprob: -12.723016738891602
    8. '()));' → logprob: -13.348016738891602
    9. ' ))' → logprob: -13.973016738891602
    10. ')))' → logprob: -14.223016738891602

Token 326: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.5504230260848999
    2. 'print' → logprob: -0.9254230260848999
    3. '
' → logprob: -3.8004231452941895
    4. ' print' → logprob: -6.4254231452941895
    5. '    
' → logprob: -6.6754231452941895
    6. '  
' → logprob: -7.6754231452941895
    7. '<|end|>' → logprob: -7.6754231452941895
    8. ')' → logprob: -8.675422668457031
    9. '```' → logprob: -8.675422668457031
    10. '	print' → logprob: -9.300422668457031

Token 327: ' #' (ID: 1069)
  Prédit: 'print'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'print' → logprob: -0.0028456486761569977
    2. '   ' → logprob: -6.627845764160156
    3. 'result' → logprob: -6.752845764160156
    4. ' print' → logprob: -8.377845764160156
    5. 'total' → logprob: -9.877845764160156
    6. 'tr' → logprob: -10.627845764160156
    7. ' trips' → logprob: -11.252845764160156
    8. 'trip' → logprob: -11.627845764160156
    9. 'min' → logprob: -12.002845764160156
    10. '
' → logprob: -12.377845764160156

Token 328: ' App' (ID: 2583)
  Prédit: 'print'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'print' → logprob: -0.03088619001209736
    2. 'result' → logprob: -3.530886173248291
    3. 'tr' → logprob: -7.030886173248291
    4. ' print' → logprob: -8.90588665008545
    5. 'min' → logprob: -9.78088665008545
    6. 'minimum' → logprob: -10.78088665008545
    7. 'total' → logprob: -11.03088665008545
    8. ' result' → logprob: -11.78088665008545
    9. 'trip' → logprob: -12.40588665008545
    10. 'results' → logprob: -12.40588665008545

Token 329: 'el' (ID: 296)
  Prédit: 'el'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'el' → logprob: -0.02633606269955635
    2. 'eler' → logprob: -3.6513359546661377
    3. 'eller' → logprob: -11.026335716247559
    4. 'elle' → logprob: -11.651335716247559
    5. 'pel' → logprob: -12.776335716247559
    6. 'er' → logprob: -13.026335716247559
    7. 'elé' → logprob: -13.401335716247559
    8. 'els' → logprob: -13.776335716247559
    9. 'eleration' → logprob: -14.901335716247559
    10. 'ell' → logprob: -15.026335716247559

Token 330: ' de' (ID: 334)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.4151449501514435
    2. 'calculate' → logprob: -2.040144920349121
    3. ' calculate' → logprob: -2.290144920349121
    4. '(' → logprob: -2.290144920349121
    5. 'result' → logprob: -6.540144920349121
    6. ' de' → logprob: -6.790144920349121
    7. '(
' → logprob: -6.915144920349121
    8. 'print' → logprob: -7.415144920349121
    9. 'alculate' → logprob: -7.415144920349121
    10. ' to' → logprob: -8.165144920349121

Token 331: ' la' (ID: 557)
  Prédit: 'calculate'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'calculate' → logprob: -0.12694720923900604
    2. 'print' → logprob: -2.1269471645355225
    3. ' calculate' → logprob: -10.876947402954102
    4. ' print' → logprob: -16.2519474029541
    5. 'calcul' → logprob: -17.1269474029541
    6. 'compute' → logprob: -18.7519474029541
    7. 'Calculate' → logprob: -19.0019474029541
    8. 'alculate' → logprob: -19.0019474029541
    9. '.calculate' → logprob: -19.3769474029541
    10. 'calc' → logprob: -19.5019474029541

Token 332: ' fonction' (ID: 17610)
  Prédit: 'print'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'print' → logprob: -0.0011706985533237457
    2. 'calculate' → logprob: -6.751170635223389
    3. ' print' → logprob: -15.126171112060547
    4. 'result' → logprob: -15.251171112060547
    5. ' calculate' → logprob: -18.501171112060547
    6. '```' → logprob: -18.751171112060547
    7. 'prin' → logprob: -19.126171112060547
    8. 'pr' → logprob: -19.126171112060547
    9. 'r' → logprob: -20.126171112060547
    10. 'printf' → logprob: -20.626171112060547

Token 333: ' et' (ID: 859)
  Prédit: 'print'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'print' → logprob: -0.07011383026838303
    2. 'result' → logprob: -2.8201138973236084
    3. '   ' → logprob: -4.945113658905029
    4. ' print' → logprob: -7.320113658905029
    5. 'calculate' → logprob: -8.820114135742188
    6. ' result' → logprob: -9.195114135742188
    7. 'minimum' → logprob: -10.570114135742188
    8. 'trip' → logprob: -10.570114135742188
    9. 'min' → logprob: -11.695114135742188
    10. 'answer' → logprob: -12.070114135742188

Token 334: ' affich' (ID: 90179)
  Prédit: 'print'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'print' → logprob: -0.3868773579597473
    2. ' print' → logprob: -1.1368772983551025
    3. '   ' → logprob: -12.011877059936523
    4. '_print' → logprob: -16.761877059936523
    5. '```' → logprob: -17.011877059936523
    6. '	print' → logprob: -17.261877059936523
    7. '.print' → logprob: -17.386877059936523
    8. '(print' → logprob: -17.511877059936523
    9. 'pr' → logprob: -18.386877059936523
    10. '    ' → logprob: -18.386877059936523

Token 335: 'age' (ID: 477)
  Prédit: 'print'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'print' → logprob: -0.46190688014030457
    2. '(print' → logprob: -1.711906909942627
    3. 'age' → logprob: -2.211906909942627
    4. '(' → logprob: -2.836906909942627
    5. 'er' → logprob: -3.961906909942627
    6. '   ' → logprob: -7.461906909942627
    7. 'e' → logprob: -7.711906909942627
    8. '(e' → logprob: -8.211906433105469
    9. '(math' → logprob: -8.586906433105469
    10. 'ation' → logprob: -8.836906433105469

Token 336: ' du' (ID: 1462)
  Prédit: '(print'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '(print' → logprob: -0.9448639750480652
    2. '(' → logprob: -1.19486403465271
    3. 'print' → logprob: -1.44486403465271
    4. '   ' → logprob: -2.69486403465271
    5. '(c' → logprob: -5.444863796234131
    6. '(
' → logprob: -8.319864273071289
    7. '(calc' → logprob: -8.319864273071289
    8. ' print' → logprob: -9.319864273071289
    9. '(cal' → logprob: -9.694864273071289
    10. '()' → logprob: -9.694864273071289

Token 337: ' résultat' (ID: 62556)
  Prédit: 'calculate'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'calculate' → logprob: -0.12996110320091248
    2. 'result' → logprob: -2.1299610137939453
    3. 'print' → logprob: -6.504961013793945
    4. '(c' → logprob: -6.754961013793945
    5. '(' → logprob: -8.754961013793945
    6. ' calculate' → logprob: -8.879961013793945
    7. 'c' → logprob: -10.254961013793945
    8. ' result' → logprob: -12.004961013793945
    9. '(result' → logprob: -12.004961013793945
    10. 'resultado' → logprob: -12.004961013793945

Token 338: '
' (ID: 198)
  Prédit: 'print'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'print' → logprob: -0.09006618708372116
    2. '   ' → logprob: -2.4650661945343018
    3. ' print' → logprob: -7.340065956115723
    4. '(print' → logprob: -7.965065956115723
    5. ')' → logprob: -10.215065956115723
    6. '```' → logprob: -10.590065956115723
    7. 'result' → logprob: -10.965065956115723
    8. '    
' → logprob: -11.340065956115723
    9. '
' → logprob: -11.715065956115723
    10. '(' → logprob: -12.090065956115723

Token 339: '   ' (ID: 271)
  Prédit: 'print'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'print' → logprob: -0.031701166182756424
    2. ' print' → logprob: -3.90670108795166
    3. '   ' → logprob: -4.53170108795166
    4. 'result' → logprob: -8.15670108795166
    5. '```' → logprob: -10.90670108795166
    6. '    
' → logprob: -11.40670108795166
    7. ' result' → logprob: -12.03170108795166
    8. '
' → logprob: -12.28170108795166
    9. '	print' → logprob: -12.90670108795166
    10. '  
' → logprob: -13.28170108795166

Token 340: ' print' (ID: 2123)
  Prédit: 'print'
  Correct (stricte): False
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'print' (adapté à ' print') → logprob: -2.45848218582978e-06
    2. ' print' → logprob: -13.25000286102295
    3. 'result' → logprob: -14.25000286102295
    4. '
' → logprob: -18.875001907348633
    5. '```' → logprob: -19.625001907348633
    6. '   ' → logprob: -19.750001907348633
    7. 'pr' → logprob: -21.000001907348633
    8. 'min' → logprob: -21.500001907348633
    9. 'minimum' → logprob: -21.875001907348633
    10. 'prin' → logprob: -22.250001907348633

Token 341: '(c' (ID: 2410)
  Prédit: '(c'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(c' → logprob: -0.038055259734392166
    2. '(' → logprob: -3.288055181503296
    3. '(calc' → logprob: -11.663055419921875
    4. '(cal' → logprob: -12.663055419921875
    5. '(
' → logprob: -13.538055419921875
    6. '()' → logprob: -16.038055419921875
    7. 'calculate' → logprob: -16.413055419921875
    8. ' (' → logprob: -16.538055419921875
    9. '(

' → logprob: -16.538055419921875
    10. '(f' → logprob: -16.538055419921875

Token 342: 'alculate' (ID: 80190)
  Prédit: 'alculate'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'alculate' → logprob: -3.7697225252486533e-06
    2. 'calculate' → logprob: -12.875003814697266
    3. 'al' → logprob: -13.875003814697266
    4. 'alc' → logprob: -16.000003814697266
    5. 'aculate' → logprob: -17.875003814697266
    6. '[' → logprob: -19.250003814697266
    7. 'om' → logprob: -19.250003814697266
    8. ')' → logprob: -19.375003814697266
    9. 'alu' → logprob: -19.750003814697266
    10. 'orrect' → logprob: -20.000003814697266

Token 343: '_min' (ID: 15950)
  Prédit: '_min'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_min' → logprob: -1.0280383548888494e-06
    2. '_' → logprob: -14.125000953674316
    3. 'minimum' → logprob: -16.000001907348633
    4. '_max' → logprob: -17.000001907348633
    5. '_MIN' → logprob: -17.875001907348633
    6. ' minimum' → logprob: -17.875001907348633
    7. 'Minimum' → logprob: -18.375001907348633
    8. '_m' → logprob: -18.625001907348633
    9. '_Min' → logprob: -19.125001907348633
    10. '.minimum' → logprob: -20.375001907348633

Token 344: 'imum' (ID: 4556)
  Prédit: 'imum'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'imum' → logprob: -0.00023858259373810142
    2. 'um' → logprob: -9.250238418579102
    3. '_min' → logprob: -9.500238418579102
    4. '_' → logprob: -10.625238418579102
    5. 'minimum' → logprob: -10.875238418579102
    6. 'ium' → logprob: -11.625238418579102
    7. 'ute' → logprob: -12.875238418579102
    8. 'ution' → logprob: -13.125238418579102
    9. '_number' → logprob: -13.625238418579102
    10. ' minimum' → logprob: -13.750238418579102

Token 345: '_tr' (ID: 7410)
  Prédit: '_min'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_min' → logprob: -0.4821268916130066
    2. '_tr' → logprob: -0.9821268916130066
    3. '_' → logprob: -4.857126712799072
    4. '_trip' → logprob: -8.60712718963623
    5. '_max' → logprob: -10.85712718963623
    6. '_m' → logprob: -11.10712718963623
    7. ' _' → logprob: -12.10712718963623
    8. '_t' → logprob: -12.48212718963623
    9. 'tr' → logprob: -12.98212718963623
    10. '_trans' → logprob: -13.23212718963623

Token 346: 'ips' (ID: 3200)
  Prédit: 'ips'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'ips' → logprob: -3.404745439183898e-05
    2. 'ip' → logprob: -12.00003433227539
    3. 'ps' → logprob: -12.50003433227539
    4. 'i' → logprob: -12.75003433227539
    5. '```' → logprob: -13.00003433227539
    6. '[' → logprob: -13.37503433227539
    7. '(' → logprob: -13.37503433227539
    8. '``' → logprob: -13.93753433227539
    9. '_' → logprob: -13.93753433227539
    10. '#' → logprob: -14.06253433227539

Token 347: '(N' (ID: 10564)
  Prédit: '(N'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(N' → logprob: -0.006726026069372892
    2. '(' → logprob: -5.006725788116455
    3. ' (' → logprob: -12.006726264953613
    4. ')' → logprob: -12.631726264953613
    5. '(
' → logprob: -14.131726264953613
    6. ')(' → logprob: -15.256726264953613
    7. '((' → logprob: -16.631725311279297
    8. '(I' → logprob: -16.881725311279297
    9. '(A' → logprob: -17.131725311279297
    10. '(n' → logprob: -17.381725311279297

Token 348: ',' (ID: 11)
  Prédit: ','
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ',' → logprob: -1.0921942703134846e-05
    2. ',K' → logprob: -11.62501049041748
    3. ' ,' → logprob: -13.37501049041748
    4. ',N' → logprob: -15.37501049041748
    5. ',
' → logprob: -16.125011444091797
    6. '，' → logprob: -18.875011444091797
    7. ',

' → logprob: -19.125011444091797
    8. '‌,' → logprob: -19.375011444091797
    9. ')' → logprob: -19.625011444091797
    10. ',A' → logprob: -19.750011444091797

Token 349: ' K' (ID: 658)
  Prédit: 'K'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'K' → logprob: -0.011047935113310814
    2. ' K' → logprob: -4.511047840118408
    3. ')' → logprob: -16.63604736328125
    4. ' ' → logprob: -18.38604736328125
    5. '   ' → logprob: -19.01104736328125
    6. ' ' → logprob: -19.13604736328125
    7. '	K' → logprob: -19.13604736328125
    8. ',K' → logprob: -20.26104736328125
    9. '>K' → logprob: -21.01104736328125
    10. 'k' → logprob: -21.38604736328125

Token 350: ',' (ID: 11)
  Prédit: ','
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ',' → logprob: -1.3782830137643032e-05
    2. ')' → logprob: -11.75001335144043
    3. ' ,' → logprob: -12.75001335144043
    4. ',N' → logprob: -13.12501335144043
    5. ',A' → logprob: -14.87501335144043
    6. '))' → logprob: -15.50001335144043
    7. ',K' → logprob: -15.62501335144043
    8. ',
' → logprob: -15.87501335144043
    9. '   ' → logprob: -16.12501335144043
    10. '(N' → logprob: -17.25001335144043

Token 351: ' A' (ID: 355)
  Prédit: 'A'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'A' → logprob: -0.001170225441455841
    2. ' A' → logprob: -6.7511701583862305
    3. ')' → logprob: -19.626171112060547
    4. '   ' → logprob: -19.876171112060547
    5. '	A' → logprob: -19.876171112060547
    6. ' ' → logprob: -21.376171112060547
    7. '"A' → logprob: -22.001171112060547
    8. '  ' → logprob: -22.251171112060547
    9. '[A' → logprob: -22.251171112060547
    10. ',A' → logprob: -23.001171112060547

Token 352: '))' (ID: 915)
  Prédit: '))'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '))' → logprob: -0.005235648714005947
    2. ')' → logprob: -5.25523567199707
    3. ')))' → logprob: -13.38023567199707
    4. ' ))' → logprob: -16.13023567199707
    5. '()))' → logprob: -16.63023567199707
    6. '))
' → logprob: -17.25523567199707
    7. '),' → logprob: -17.50523567199707
    8. ' ' → logprob: -18.13023567199707
    9. '])' → logprob: -18.25523567199707
    10. '()' → logprob: -19.00523567199707


RÉSUMÉ:
--------------------------------------------------------------------------------
Total des tokens analysés: 350
Tokens correctement prédits (1ère position, stricte): 139
Tokens correctement prédits (1ère position, avec adaptation): 144
Tokens correctement prédits (top 10): 261
Précision stricte (1ère position): 39.71%
Précision adaptée (1ère position): 41.14%
Précision (top 10): 74.57%
================================================================================
