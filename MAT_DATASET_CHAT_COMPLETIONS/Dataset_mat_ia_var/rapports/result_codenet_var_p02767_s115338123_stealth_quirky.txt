================================================================================
ANALYSE DE PRÉDICTION TOKEN PAR TOKEN (BATCH API)
Date: 2025-06-04 19:25:04
Modèle de tokenisation: gpt-4o-mini
================================================================================

SCRIPT ANALYSÉ:
--------------------------------------------------------------------------------
def __n():
    return list(map(int, input().split()))

class calc: pass

def letsgo():
    with open(0):
        N=int(input())
        X=__n()
        setattr(calc,"avg",((sum(X)<<1)+N)//N>>1)
        calc.result=0
        [setattr(calc,"result",calc.result+(v-calc.avg)**2) for v in X] # just for side-effect
        print(calc.result)

if __name__=="__main__":
    letsgo()
--------------------------------------------------------------------------------

RÉSULTATS D'ANALYSE TOKEN PAR TOKEN:
--------------------------------------------------------------------------------
Token 0: 'def' (ID: 1314)
  → Token d'amorce (pas de prédiction)

Token 1: ' __' (ID: 2516)
  → Token d'amorce (pas de prédiction)

Token 2: 'n' (ID: 77)
  → Token d'amorce (pas de prédiction)

Token 3: '():
' (ID: 8595)
  Prédit: 'ew'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'ew' → logprob: -0.7203187346458435
    2. 'ext' → logprob: -1.5953187942504883
    3. 'e' → logprob: -1.9703187942504883
    4. '__' → logprob: -2.2203187942504883
    5. 'ame' → logprob: -3.4703187942504883
    6. '_' → logprob: -3.9703187942504883
    7. '_e' → logprob: -5.595318794250488
    8. '_ext' → logprob: -5.970318794250488
    9. 'eg' → logprob: -6.845318794250488
    10. 'i' → logprob: -7.095318794250488

Token 4: '   ' (ID: 271)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(' → logprob: -0.4970765709877014
    2. '_' → logprob: -1.2470765113830566
    3. ''' → logprob: -3.6220765113830566
    4. '   ' → logprob: -4.122076511383057
    5. ' ' → logprob: -4.122076511383057
    6. ':' → logprob: -4.497076511383057
    7. '\' → logprob: -5.122076511383057
    8. 'n' → logprob: -5.372076511383057
    9. '__' → logprob: -5.497076511383057
    10. ' (' → logprob: -5.872076511383057

Token 5: ' return' (ID: 622)
  Prédit: 'r'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'r' → logprob: -0.4402874708175659
    2. '_' → logprob: -2.0652875900268555
    3. 'n' → logprob: -2.1902875900268555
    4. 'p' → logprob: -3.5652875900268555
    5. 'a' → logprob: -3.9402875900268555
    6. '   ' → logprob: -4.4402875900268555
    7. 'return' (adapté à ' return') → logprob: -4.5652875900268555
    8. '(' → logprob: -4.5652875900268555
    9. 's' → logprob: -5.0652875900268555
    10. ' ' → logprob: -5.0652875900268555

Token 6: ' list' (ID: 1562)
  Prédit: ' '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' ' → logprob: -0.060200102627277374
    2. ' None' → logprob: -3.0602002143859863
    3. '  ' → logprob: -5.560200214385986
    4. ' True' → logprob: -6.060200214385986
    5. 'None' → logprob: -6.435200214385986
    6. ' []' → logprob: -6.685200214385986
    7. '<|end|>' → logprob: -7.185200214385986
    8. ''' → logprob: -8.185199737548828
    9. '_' → logprob: -8.935199737548828
    10. '"' → logprob: -8.935199737548828

Token 7: '(map' (ID: 16946)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '(' → logprob: -0.02039858140051365
    2. '.' → logprob: -4.0203986167907715
    3. '[' → logprob: -6.6453986167907715
    4. ')' → logprob: -8.770398139953613
    5. '(
' → logprob: -8.770398139953613
    6. '<|end|>' → logprob: -8.770398139953613
    7. '_' → logprob: -9.145398139953613
    8. '```' → logprob: -9.895398139953613
    9. 's' → logprob: -10.145398139953613
    10. '()' → logprob: -10.395398139953613

Token 8: '(int' (ID: 2742)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(' → logprob: -0.06276657432317734
    2. '(lambda' → logprob: -2.8127665519714355
    3. '(str' → logprob: -7.3127665519714355
    4. '(int' → logprob: -10.437767028808594
    5. '(
' → logprob: -10.687767028808594
    6. ')' → logprob: -10.812767028808594
    7. ' (' → logprob: -11.937767028808594
    8. '<|end|>' → logprob: -11.937767028808594
    9. '(eval' → logprob: -11.937767028808594
    10. '(list' → logprob: -12.187767028808594

Token 9: ',' (ID: 11)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(' → logprob: -0.44227245450019836
    2. '))' → logprob: -2.317272424697876
    3. ')' → logprob: -2.442272424697876
    4. ',' → logprob: -2.692272424697876
    5. '(input' → logprob: -4.067272663116455
    6. '<|end|>' → logprob: -4.192272663116455
    7. '(user' → logprob: -4.317272663116455
    8. '(token' → logprob: -5.067272663116455
    9. '```' → logprob: -5.067272663116455
    10. '(range' → logprob: -5.192272663116455

Token 10: ' input' (ID: 3422)
  Prédit: 'input'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'input' → logprob: -0.6989017724990845
    2. ' input' → logprob: -0.6989017724990845
    3. '(input' → logprob: -5.323901653289795
    4. ',input' → logprob: -8.823902130126953
    5. ' ' → logprob: -9.073902130126953
    6. ')' → logprob: -9.448902130126953
    7. ' '' → logprob: -9.823902130126953
    8. ' (' → logprob: -9.948902130126953
    9. '<input' → logprob: -10.073902130126953
    10. '=input' → logprob: -10.073902130126953

Token 11: '().' (ID: 1454)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '(' → logprob: -0.03931967541575432
    2. '()))' → logprob: -4.0393195152282715
    3. '(()' → logprob: -5.2893195152282715
    4. '()' → logprob: -5.5393195152282715
    5. '('' → logprob: -5.5393195152282715
    6. '(""))' → logprob: -5.9143195152282715
    7. '()));' → logprob: -7.1643195152282715
    8. '))' → logprob: -7.2893195152282715
    9. '("("' → logprob: -7.2893195152282715
    10. '())' → logprob: -7.4143195152282715

Token 12: 'split' (ID: 13627)
  Prédit: 'split'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'split' → logprob: -0.0011936791706830263
    2. 'strip' → logprob: -6.751193523406982
    3. ' split' → logprob: -11.25119400024414
    4. 'rstrip' → logprob: -11.50119400024414
    5. 'read' → logprob: -16.00119400024414
    6. ')' → logprob: -16.12619400024414
    7. 'spl' → logprob: -16.37619400024414
    8. '(split' → logprob: -16.75119400024414
    9. ' strip' → logprob: -17.75119400024414
    10. 's' → logprob: -18.12619400024414

Token 13: '()))

' (ID: 125972)
  Prédit: '()))'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '()))' → logprob: -0.5739976167678833
    2. '(' → logprob: -1.5739976167678833
    3. '())' → logprob: -1.9489976167678833
    4. '()' → logprob: -3.0739974975585938
    5. '())))' → logprob: -3.9489974975585938
    6. ')' → logprob: -4.698997497558594
    7. '))' → logprob: -5.073997497558594
    8. ')))' → logprob: -5.573997497558594
    9. '('' → logprob: -6.573997497558594
    10. '()));' → logprob: -8.448997497558594

Token 14: 'class' (ID: 1444)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '(' → logprob: -0.11601203680038452
    2. '(
' → logprob: -3.6160120964050293
    3. 'def' → logprob: -3.6160120964050293
    4. '()' → logprob: -3.7410120964050293
    5. '_' → logprob: -5.116012096405029
    6. ')' → logprob: -5.366012096405029
    7. '#' → logprob: -5.616012096405029
    8. 'x' → logprob: -5.991012096405029
    9. '[' → logprob: -6.241012096405029
    10. '\n' → logprob: -6.366012096405029

Token 15: ' calc' (ID: 25691)
  Prédit: ' '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' ' → logprob: -0.019124267622828484
    2. ' My' → logprob: -4.7691240310668945
    3. ' A' → logprob: -5.0191240310668945
    4. 'A' → logprob: -6.8941240310668945
    5. '_' → logprob: -7.7691240310668945
    6. ' Counter' → logprob: -8.394124031066895
    7. '  ' → logprob: -8.769124031066895
    8. ' Data' → logprob: -8.894124031066895
    9. ' Space' → logprob: -8.894124031066895
    10. ' User' → logprob: -9.019124031066895

Token 16: ':' (ID: 25)
  Prédit: ':'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ':' → logprob: -0.39824700355529785
    2. '.' → logprob: -1.1482470035552979
    3. '(' → logprob: -4.898246765136719
    4. '():' → logprob: -6.523246765136719
    5. '.:' → logprob: -7.148246765136719
    6. '_' → logprob: -8.273246765136719
    7. '(:' → logprob: -8.648246765136719
    8. '):' → logprob: -8.898246765136719
    9. '[' → logprob: -9.023246765136719
    10. '```' → logprob: -9.023246765136719

Token 17: ' pass' (ID: 1853)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.3209497332572937
    2. '    
' → logprob: -2.0709497928619385
    3. ' 
' → logprob: -2.4459497928619385
    4. '    ' → logprob: -3.9459497928619385
    5. '<|end|>' → logprob: -4.945949554443359
    6. ' def' → logprob: -5.320949554443359
    7. '     
' → logprob: -5.695949554443359
    8. 'def' → logprob: -5.820949554443359
    9. '```' → logprob: -5.945949554443359
    10. '	def' → logprob: -5.945949554443359

Token 18: '

' (ID: 279)
  Prédit: '.'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '.' → logprob: -0.07660466432571411
    2. ':' → logprob: -3.5766046047210693
    3. '<|end|>' → logprob: -3.9516046047210693
    4. '
' → logprob: -4.951604843139648
    5. '\' → logprob: -5.701604843139648
    6. ' ' → logprob: -5.826604843139648
    7. '.
' → logprob: -6.201604843139648
    8. '\n' → logprob: -6.326604843139648
    9. '' → logprob: -6.451604843139648
    10. 'def' → logprob: -6.451604843139648

Token 19: 'def' (ID: 1314)
  Prédit: '.'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '.' → logprob: -0.4767121970653534
    2. '
' → logprob: -1.7267122268676758
    3. ':' → logprob: -2.351712226867676
    4. 'def' → logprob: -3.351712226867676
    5. '(' → logprob: -4.351712226867676
    6. '_' → logprob: -4.476712226867676
    7. 'class' → logprob: -4.976712226867676
    8. '(
' → logprob: -5.101712226867676
    9. '\' → logprob: -5.226712226867676
    10. 'a' → logprob: -5.601712226867676

Token 20: ' lets' (ID: 19733)
  Prédit: ' main'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' main' → logprob: -0.8258227109909058
    2. '_' → logprob: -1.3258227109909058
    3. ' __' → logprob: -2.3258228302001953
    4. ' ' → logprob: -2.5758228302001953
    5. '__' → logprob: -3.5758228302001953
    6. ' _' → logprob: -3.5758228302001953
    7. ' calc' → logprob: -3.9508228302001953
    8. ' add' → logprob: -4.200822830200195
    9. ' space' → logprob: -4.575822830200195
    10. ' calculate' → logprob: -4.700822830200195

Token 21: 'go' (ID: 2319)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '(' → logprob: -0.4825192987918854
    2. '_' → logprob: -2.1075193881988525
    3. '():' → logprob: -2.4825193881988525
    4. '()' → logprob: -3.2325193881988525
    5. ' (' → logprob: -3.7325193881988525
    6. '_continue' → logprob: -3.7325193881988525
    7. '():
' → logprob: -4.232519149780273
    8. ' ()' → logprob: -4.732519149780273
    9. '_define' → logprob: -4.732519149780273
    10. '_compute' → logprob: -4.982519149780273

Token 22: '():
' (ID: 8595)
  Prédit: '():'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '():' → logprob: -0.02020314894616604
    2. '(' → logprob: -4.020203113555908
    3. ' ():' → logprob: -6.770203113555908
    4. ':' → logprob: -8.145203590393066
    5. '(:' → logprob: -8.395203590393066
    6. '_' → logprob: -8.520203590393066
    7. '()' → logprob: -9.520203590393066
    8. '_:' → logprob: -10.520203590393066
    9. ' (' → logprob: -10.645203590393066
    10. '(":' → logprob: -11.270203590393066

Token 23: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.3816258907318115
    2. ' ' → logprob: -1.3816258907318115
    3. '    ' → logprob: -3.1316258907318115
    4. ' n' → logprob: -4.506626129150391
    5. 'n' → logprob: -6.131626129150391
    6. ' c' → logprob: -6.256626129150391
    7. ' for' → logprob: -6.631626129150391
    8. '  ' → logprob: -7.506626129150391
    9. ' 
' → logprob: -7.756626129150391
    10. 'c' → logprob: -7.756626129150391

Token 24: ' with' (ID: 483)
  Prédit: 'n'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'n' → logprob: -0.8957969546318054
    2. 'x' → logprob: -1.2707970142364502
    3. 'a' → logprob: -1.7707970142364502
    4. 'i' → logprob: -4.020796775817871
    5. '   ' → logprob: -4.145796775817871
    6. 'for' → logprob: -4.145796775817871
    7. 'v' → logprob: -4.395796775817871
    8. ' for' → logprob: -4.520796775817871
    9. ' a' → logprob: -4.645796775817871
    10. 'c' → logprob: -4.645796775817871

Token 25: ' open' (ID: 2494)
  Prédit: ' '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' ' → logprob: -0.6939772963523865
    2. ' open' → logprob: -0.6939772963523865
    3. 'open' → logprob: -7.693977355957031
    4. ' input' → logprob: -8.318977355957031
    5. '_' → logprob: -10.693977355957031
    6. '  ' → logprob: -10.943977355957031
    7. ')' → logprob: -11.193977355957031
    8. '_open' → logprob: -11.193977355957031
    9. '	open' → logprob: -11.193977355957031
    10. '<|end|>' → logprob: -12.193977355957031

Token 26: '(' (ID: 7)
  Prédit: '('
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(' → logprob: -0.7016493678092957
    2. '('' → logprob: -0.7016493678092957
    3. '("' → logprob: -4.826649188995361
    4. ' (' → logprob: -8.07664966583252
    5. ' ('' → logprob: -9.82664966583252
    6. ' ' → logprob: -9.95164966583252
    7. ' ("' → logprob: -10.95164966583252
    8. '("""' → logprob: -12.20164966583252
    9. ''' → logprob: -12.32664966583252
    10. '("")' → logprob: -13.32664966583252

Token 27: '0' (ID: 15)
  Prédit: '''
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ''' → logprob: -0.2607014775276184
    2. '"' → logprob: -1.5107014179229736
    3. ' '' → logprob: -6.010701656341553
    4. '('' → logprob: -7.260701656341553
    5. '')' → logprob: -7.385701656341553
    6. ')' → logprob: -7.510701656341553
    7. ' "' → logprob: -8.135701179504395
    8. '(' → logprob: -8.135701179504395
    9. ''s' → logprob: -8.135701179504395
    10. ''a' → logprob: -8.260701179504395

Token 28: '):
' (ID: 1883)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ')' → logprob: -0.08909977227449417
    2. ',' → logprob: -2.464099884033203
    3. ' )' → logprob: -9.714099884033203
    4. ',)' → logprob: -10.339099884033203
    5. '')' → logprob: -10.964099884033203
    6. ' ,' → logprob: -11.214099884033203
    7. ','' → logprob: -11.964099884033203
    8. '))' → logprob: -12.214099884033203
    9. '```' → logprob: -12.214099884033203
    10. '),' → logprob: -12.339099884033203

Token 29: '       ' (ID: 309)
  Prédit: ' as'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' as' → logprob: -0.14487425982952118
    2. 'r' → logprob: -3.519874334335327
    3. '    ' → logprob: -3.644874334335327
    4. '.readline' → logprob: -3.894874334335327
    5. ' pass' → logprob: -4.519874095916748
    6. ' ' → logprob: -4.769874095916748
    7. ' readline' → logprob: -5.144874095916748
    8. ' r' → logprob: -5.644874095916748
    9. '       ' → logprob: -5.769874095916748
    10. '()' → logprob: -5.769874095916748

Token 30: ' N' (ID: 478)
  Prédit: ' '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' ' → logprob: -0.268157422542572
    2. ' for' → logprob: -2.518157482147217
    3. ' n' → logprob: -3.768157482147217
    4. '    ' → logprob: -3.893157482147217
    5. 'n' → logprob: -4.018157482147217
    6. '            ' → logprob: -4.268157482147217
    7. ' readline' → logprob: -4.393157482147217
    8. ' pass' → logprob: -4.518157482147217
    9. '        ' → logprob: -4.518157482147217
    10. 'for' → logprob: -4.643157482147217

Token 31: '=int' (ID: 37431)
  Prédit: ' ='
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' =' → logprob: -0.3010660409927368
    2. ',' → logprob: -1.9260660409927368
    3. '=' → logprob: -2.1760659217834473
    4. ' ,' → logprob: -7.676065921783447
    5. ')' → logprob: -8.926066398620605
    6. '=int' → logprob: -10.051066398620605
    7. '  ' → logprob: -10.926066398620605
    8. '   ' → logprob: -10.926066398620605
    9. ' ' → logprob: -11.051066398620605
    10. '.' → logprob: -11.426066398620605

Token 32: '(input' (ID: 10054)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(' → logprob: -0.6329609751701355
    2. '(input' → logprob: -0.7579609751701355
    3. '(open' → logprob: -9.00796127319336
    4. 'input' → logprob: -9.13296127319336
    5. '('' → logprob: -10.00796127319336
    6. '(N' → logprob: -11.25796127319336
    7. '()' → logprob: -11.63296127319336
    8. '(in' → logprob: -11.75796127319336
    9. '(
' → logprob: -11.88296127319336
    10. ' (' → logprob: -12.13296127319336

Token 33: '())
' (ID: 4574)
  Prédit: '())'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '())' → logprob: -0.05901874229311943
    2. '()' → logprob: -2.934018850326538
    3. ')' → logprob: -5.559018611907959
    4. '(' → logprob: -8.684019088745117
    5. ' ())' → logprob: -10.184019088745117
    6. '()))' → logprob: -10.934019088745117
    7. '())
' → logprob: -11.059019088745117
    8. '().' → logprob: -11.559019088745117
    9. '();)' → logprob: -12.559019088745117
    10. '());' → logprob: -12.684019088745117

Token 34: '       ' (ID: 309)
  Prédit: ''
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False

Token 35: ' X' (ID: 2127)
  Prédit: ' for'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' for' → logprob: -0.969285249710083
    2. 'for' → logprob: -1.719285249710083
    3. '<|end|>' → logprob: -2.219285249710083
    4. '       ' → logprob: -2.469285249710083
    5. ' ' → logprob: -2.844285249710083
    6. 's' → logprob: -3.344285249710083
    7. ' A' → logprob: -3.594285249710083
    8. 'A' → logprob: -4.094285011291504
    9. 'data' → logprob: -4.469285011291504
    10. '        ' → logprob: -4.594285011291504

Token 36: '=' (ID: 28)
  Prédit: '='
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '=' → logprob: -0.43092256784439087
    2. ' =' → logprob: -1.180922508239746
    3. ',' → logprob: -3.305922508239746
    4. '.' → logprob: -5.680922508239746
    5. '[' → logprob: -7.180922508239746
    6. '=input' → logprob: -7.430922508239746
    7. '=int' → logprob: -7.930922508239746
    8. ')' → logprob: -8.305922508239746
    9. ' ' → logprob: -8.805922508239746
    10. ' ,' → logprob: -9.055922508239746

Token 37: '__' (ID: 771)
  Prédit: '__'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '__' → logprob: -0.08053454756736755
    2. ' __' → logprob: -3.4555344581604004
    3. 'list' → logprob: -3.5805344581604004
    4. '[]' → logprob: -5.2055344581604
    5. '[n' → logprob: -5.8305344581604
    6. '[' → logprob: -6.0805344581604
    7. ' list' → logprob: -6.3305344581604
    8. 'n' → logprob: -6.5805344581604
    9. '[int' → logprob: -6.9555344581604
    10. '[N' → logprob: -6.9555344581604

Token 38: 'n' (ID: 77)
  Prédit: 'n'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'n' → logprob: -0.00026169343618676066
    2. '_n' → logprob: -8.250261306762695
    3. '_' → logprob: -15.250261306762695
    4. ' n' → logprob: -17.625261306762695
    5. '(n' → logprob: -17.625261306762695
    6. '__' → logprob: -18.625261306762695
    7. '	n' → logprob: -18.750261306762695
    8. '-n' → logprob: -19.125261306762695
    9. 'н' → logprob: -19.375261306762695
    10. '(' → logprob: -20.375261306762695

Token 39: '()
' (ID: 1234)
  Prédit: '()'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '()' → logprob: -7.584239938296378e-06
    2. '()
' → logprob: -12.375007629394531
    3. '()`' → logprob: -13.500007629394531
    4. '())' → logprob: -14.750007629394531
    5. '()]' → logprob: -15.125007629394531
    6. '()"' → logprob: -15.500007629394531
    7. '`()' → logprob: -15.625007629394531
    8. '()

' → logprob: -15.875007629394531
    9. ' ()' → logprob: -15.875007629394531
    10. '>()' → logprob: -16.37500762939453

Token 40: '       ' (ID: 309)
  Prédit: ''
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False

Token 41: ' setattr' (ID: 166554)
  Prédit: 'Y'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'Y' → logprob: -0.39470145106315613
    2. '       ' → logprob: -2.3947014808654785
    3. 'S' → logprob: -3.0197014808654785
    4. 'M' → logprob: -3.5197014808654785
    5. ' Y' → logprob: -3.6447014808654785
    6. 'for' → logprob: -3.7697014808654785
    7. 's' → logprob: -4.1447014808654785
    8. ' for' → logprob: -4.3947014808654785
    9. 'A' → logprob: -4.8947014808654785
    10. 'K' → logprob: -5.1447014808654785

Token 42: '(calc' (ID: 190074)
  Prédit: '(calc'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(calc' → logprob: -0.025491682812571526
    2. '(c' → logprob: -4.150491714477539
    3. '(' → logprob: -4.775491714477539
    4. '(cls' → logprob: -7.775491714477539
    5. '(cal' → logprob: -8.400491714477539
    6. '(eval' → logprob: -9.650491714477539
    7. '(C' → logprob: -9.775491714477539
    8. '(obj' → logprob: -10.025491714477539
    9. '('' → logprob: -10.775491714477539
    10. '(None' → logprob: -11.150491714477539

Token 43: ',"' (ID: 3532)
  Prédit: ','
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ',' → logprob: -0.001501175225712359
    2. ' ,' → logprob: -7.251501083374023
    3. ','' → logprob: -7.626501083374023
    4. '(),' → logprob: -9.376501083374023
    5. '(' → logprob: -10.001501083374023
    6. ',"' → logprob: -10.376501083374023
    7. '',' → logprob: -10.626501083374023
    8. ' ' → logprob: -10.751501083374023
    9. ' ,'' → logprob: -11.501501083374023
    10. '(),'' → logprob: -11.626501083374023

Token 44: 'avg' (ID: 27216)
  Prédit: '__'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '__' → logprob: -0.9715125560760498
    2. 'X' → logprob: -2.59651255607605
    3. 'ans' → logprob: -3.15901255607605
    4. 'N' → logprob: -3.59651255607605
    5. 'sum' → logprob: -3.59651255607605
    6. 'x' → logprob: -3.65901255607605
    7. 'a' → logprob: -4.034012794494629
    8. 'calc' → logprob: -4.159012794494629
    9. 'add' → logprob: -4.221512794494629
    10. ' __' → logprob: -4.284012794494629

Token 45: '",' (ID: 672)
  Prédit: '",'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '",' → logprob: -0.010219221003353596
    2. '",(' → logprob: -5.135219097137451
    3. '"' → logprob: -6.260219097137451
    4. '","' → logprob: -7.385219097137451
    5. '",'' → logprob: -7.760219097137451
    6. '_val' → logprob: -8.26021957397461
    7. '",[' → logprob: -8.76021957397461
    8. '_value' → logprob: -8.76021957397461
    9. '__",' → logprob: -9.26021957397461
    10. 'value' → logprob: -9.51021957397461

Token 46: '((' (ID: 2054)
  Prédit: 'lambda'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'lambda' → logprob: -0.05595451220870018
    2. ' lambda' → logprob: -3.4309544563293457
    3. '   ' → logprob: -5.180954456329346
    4. 'staticmethod' → logprob: -5.555954456329346
    5. 'property' → logprob: -5.805954456329346
    6. 'static' → logprob: -5.930954456329346
    7. 'sum' → logprob: -6.055954456329346
    8. 'classmethod' → logprob: -6.305954456329346
    9. '(lambda' → logprob: -6.805954456329346
    10. ' static' → logprob: -7.930954456329346

Token 47: 'sum' (ID: 12298)
  Prédit: 'sum'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'sum' → logprob: -0.032786495983600616
    2. ' sum' → logprob: -3.5327866077423096
    3. 'lambda' → logprob: -6.7827863693237305
    4. '   ' → logprob: -7.5327863693237305
    5. '(sum' → logprob: -7.7827863693237305
    6. ' ' → logprob: -8.53278636932373
    7. ' lambda' → logprob: -8.90778636932373
    8. ')' → logprob: -9.40778636932373
    9. 'max' → logprob: -9.53278636932373
    10. ''' → logprob: -9.90778636932373

Token 48: '(X' (ID: 17061)
  Prédit: '(X'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(X' → logprob: -0.00016837897419463843
    2. '(' → logprob: -9.125168800354004
    3. ' (' → logprob: -10.625168800354004
    4. ')(' → logprob: -11.125168800354004
    5. 'X' → logprob: -11.500168800354004
    6. ')' → logprob: -12.500168800354004
    7. '(x' → logprob: -13.875168800354004
    8. ' ' → logprob: -14.125168800354004
    9. '   ' → logprob: -14.250168800354004
    10. '(
' → logprob: -14.375168800354004

Token 49: ')<<' (ID: 92591)
  Prédit: ')/'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ')/' → logprob: -0.6272459626197815
    2. '/' → logprob: -1.3772459030151367
    3. ')' → logprob: -2.2522459030151367
    4. ' /' → logprob: -3.2522459030151367
    5. ' )' → logprob: -3.2522459030151367
    6. '/N' → logprob: -4.502245903015137
    7. ')/(' → logprob: -4.627245903015137
    8. '   ' → logprob: -6.252245903015137
    9. '/)' → logprob: -6.627245903015137
    10. '))' → logprob: -6.877245903015137

Token 50: '1' (ID: 16)
  Prédit: '1'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '1' → logprob: -0.0333617702126503
    2. ' ' → logprob: -4.408361911773682
    3. '2' → logprob: -5.783361911773682
    4. '3' → logprob: -5.783361911773682
    5. '8' → logprob: -6.033361911773682
    6. '4' → logprob: -6.033361911773682
    7. '5' → logprob: -6.283361911773682
    8. '16' → logprob: -6.783361911773682
    9. '10' → logprob: -6.908361911773682
    10. '32' → logprob: -6.908361911773682

Token 51: ')+' (ID: 16161)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ')' → logprob: -0.7865467667579651
    2. ')//' → logprob: -1.2865467071533203
    3. ' )' → logprob: -2.0365467071533203
    4. ')/' → logprob: -2.1615467071533203
    5. ')>>' → logprob: -4.03654670715332
    6. ')/(' → logprob: -6.16154670715332
    7. '//' → logprob: -6.78654670715332
    8. ')-' → logprob: -7.41154670715332
    9. ' //' → logprob: -7.91154670715332
    10. '))' → logprob: -9.53654670715332

Token 52: 'N' (ID: 45)
  Prédit: 'N'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'N' → logprob: -0.2607754170894623
    2. ' N' → logprob: -1.6357754468917847
    3. '1' → logprob: -4.135775566101074
    4. '(N' → logprob: -5.260775566101074
    5. 'len' → logprob: -5.635775566101074
    6. '(' → logprob: -5.885775566101074
    7. ' (' → logprob: -6.010775566101074
    8. ' ' → logprob: -6.135775566101074
    9. ' len' → logprob: -7.448275566101074
    10. '7' → logprob: -8.010775566101074

Token 53: ')//' (ID: 60375)
  Prédit: '-'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '-' → logprob: -0.4654223322868347
    2. ')' → logprob: -1.2154223918914795
    3. '))' → logprob: -3.4654223918914795
    4. ')//' → logprob: -4.4654221534729
    5. ' -' → logprob: -4.5904221534729
    6. ')>>' → logprob: -4.8404221534729
    7. '//' → logprob: -5.0904221534729
    8. ' )' → logprob: -5.8404221534729
    9. ')-' → logprob: -6.0904221534729
    10. '>>' → logprob: -7.2154221534729

Token 54: 'N' (ID: 45)
  Prédit: 'N'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'N' → logprob: -0.4921141564846039
    2. '(' → logprob: -0.9921141862869263
    3. '(N' → logprob: -4.617114067077637
    4. '2' → logprob: -5.367114067077637
    5. ' N' → logprob: -6.242114067077637
    6. ' (' → logprob: -6.742114067077637
    7. ' ' → logprob: -9.117114067077637
    8. '   ' → logprob: -10.992114067077637
    9. '_N' → logprob: -11.617114067077637
    10. '3' → logprob: -11.742114067077637

Token 55: '>>' (ID: 3920)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ')' → logprob: -0.013078935444355011
    2. ' )' → logprob: -4.6380791664123535
    3. '2' → logprob: -6.5130791664123535
    4. '))' → logprob: -6.7630791664123535
    5. ')))' → logprob: -9.013078689575195
    6. ')>>' → logprob: -9.263078689575195
    7. '//' → logprob: -9.888078689575195
    8. ')
' → logprob: -10.263078689575195
    9. ')`' → logprob: -10.388078689575195
    10. '   ' → logprob: -10.388078689575195

Token 56: '1' (ID: 16)
  Prédit: '1'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '1' → logprob: -0.0006302326801232994
    2. '2' → logprob: -7.3756303787231445
    3. '3' → logprob: -13.375630378723145
    4. ' ' → logprob: -13.750630378723145
    5. '0' → logprob: -15.125630378723145
    6. '```' → logprob: -15.500630378723145
    7. '   ' → logprob: -16.563129425048828
    8. '+' → logprob: -16.750629425048828
    9. '' → logprob: -16.813129425048828
    10. '' → logprob: -17.063129425048828

Token 57: ')
' (ID: 446)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')' → logprob: -0.002210085280239582
    2. ' )' → logprob: -6.6272101402282715
    3. '))' → logprob: -7.5022101402282715
    4. ')
' → logprob: -8.377209663391113
    5. ')))' → logprob: -10.002209663391113
    6. '       ' → logprob: -11.377209663391113
    7. ')`' → logprob: -11.752209663391113
    8. ')return' → logprob: -12.252209663391113
    9. '   ' → logprob: -12.627209663391113
    10. ')

' → logprob: -12.752209663391113

Token 58: '       ' (ID: 309)
  Prédit: ''
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False

Token 59: ' calc' (ID: 25691)
  Prédit: ''
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False

Token 60: '.result' (ID: 22965)
  Prédit: '.'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '.' → logprob: -0.000973517308011651
    2. '.avg' → logprob: -7.375973701477051
    3. '.
' → logprob: -9.25097370147705
    4. '.__' → logprob: -9.37597370147705
    5. '.<' → logprob: -9.62597370147705
    6. ' .' → logprob: -10.12597370147705
    7. '.average' → logprob: -11.12597370147705
    8. '.

' → logprob: -11.62597370147705
    9. '.X' → logprob: -11.75097370147705
    10. '_avg' → logprob: -12.75097370147705

Token 61: '=' (ID: 28)
  Prédit: '.'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '.' → logprob: -0.0006503634504042566
    2. '<|end|>' → logprob: -8.125650405883789
    3. '_' → logprob: -9.125650405883789
    4. ' .' → logprob: -9.250650405883789
    5. ' ' → logprob: -9.875650405883789
    6. '()' → logprob: -10.750650405883789
    7. '=' → logprob: -10.750650405883789
    8. '(' → logprob: -11.625650405883789
    9. ')' → logprob: -12.250650405883789
    10. '().' → logprob: -12.500650405883789

Token 62: '0' (ID: 15)
  Prédit: 'calc'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'calc' → logprob: -0.9402953386306763
    2. '[' → logprob: -2.0652952194213867
    3. '(calc' → logprob: -2.4402952194213867
    4. 'max' → logprob: -2.5652952194213867
    5. 'get' → logprob: -2.5652952194213867
    6. 'sum' → logprob: -2.6902952194213867
    7. '"' → logprob: -3.5652952194213867
    8. 'abs' → logprob: -3.5652952194213867
    9. 'list' → logprob: -3.9402952194213867
    10. 'sorted' → logprob: -4.440295219421387

Token 63: '
' (ID: 198)
  Prédit: ''
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False

Token 64: '       ' (ID: 309)
  Prédit: ''
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False

Token 65: ' [' (ID: 723)
  Prédit: 'for'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'for' → logprob: -0.8965775966644287
    2. ' for' → logprob: -1.0215775966644287
    3. '       ' → logprob: -1.5215775966644287
    4. '<|end|>' → logprob: -4.396577835083008
    5. '   ' → logprob: -7.646577835083008
    6. '	for' → logprob: -8.396577835083008
    7. '<|end|>' → logprob: -9.271577835083008
    8. 'X' → logprob: -9.896577835083008
    9. 's' → logprob: -10.084077835083008
    10. '[' (adapté à ' [') → logprob: -10.396577835083008

Token 66: 'set' (ID: 977)
  Prédit: 'calc'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'calc' → logprob: -0.7283251285552979
    2. 'set' → logprob: -1.6033251285552979
    3. 'for' → logprob: -2.478325128555298
    4. '(calc' → logprob: -3.103325128555298
    5. ' calc' → logprob: -3.228325128555298
    6. ' setattr' → logprob: -3.228325128555298
    7. '(set' → logprob: -3.603325128555298
    8. '   ' → logprob: -3.603325128555298
    9. 'exec' → logprob: -4.103324890136719
    10. '(' → logprob: -5.353324890136719

Token 67: 'attr' (ID: 6035)
  Prédit: 'attr'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'attr' → logprob: -2.339278580620885e-06
    2. 'calc' → logprob: -13.250001907348633
    3. '(calc' → logprob: -14.750001907348633
    4. 'attrs' → logprob: -16.500001907348633
    5. 'a' → logprob: -18.375001907348633
    6. '(attr' → logprob: -18.750001907348633
    7. '	attr' → logprob: -18.875001907348633
    8. 'item' → logprob: -19.625001907348633
    9. ' attr' → logprob: -19.625001907348633
    10. '```' → logprob: -19.750001907348633

Token 68: '(calc' (ID: 190074)
  Prédit: '(calc'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(calc' → logprob: -0.00018649426056072116
    2. '(' → logprob: -8.750186920166016
    3. '(cal' → logprob: -10.750186920166016
    4. ' (' → logprob: -12.250186920166016
    5. '(
' → logprob: -14.625186920166016
    6. 'calc' → logprob: -14.875186920166016
    7. '(eval' → logprob: -15.000186920166016
    8. '(c' → logprob: -15.750186920166016
    9. '.calc' → logprob: -16.125186920166016
    10. ' calc' → logprob: -16.125186920166016

Token 69: ',"' (ID: 3532)
  Prédit: ',"'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ',"' → logprob: -0.7866354584693909
    2. ',' → logprob: -0.9116354584693909
    3. '(calc' → logprob: -2.911635398864746
    4. '.calc' → logprob: -3.161635398864746
    5. ','' → logprob: -4.161635398864746
    6. ',result' → logprob: -4.661635398864746
    7. 'calc' → logprob: -5.036635398864746
    8. ',c' → logprob: -5.411635398864746
    9. '(' → logprob: -5.911635398864746
    10. '("' → logprob: -6.161635398864746

Token 70: 'result' (ID: 2521)
  Prédit: 'result'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'result' → logprob: -0.000104616025055293
    2. ' result' → logprob: -9.875104904174805
    3. 'res' → logprob: -10.500104904174805
    4. ' ' → logprob: -12.000104904174805
    5. '  ' → logprob: -12.875104904174805
    6. 'X' → logprob: -13.125104904174805
    7. '_result' → logprob: -13.125104904174805
    8. 'x' → logprob: -13.250104904174805
    9. '__' → logprob: -13.625104904174805
    10. ')' → logprob: -13.750104904174805

Token 71: '",' (ID: 672)
  Prédit: ','
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ',' → logprob: -0.025291552767157555
    2. ',get' → logprob: -4.275291442871094
    3. ',sum' → logprob: -6.025291442871094
    4. ',(' → logprob: -6.025291442871094
    5. ',set' → logprob: -6.400291442871094
    6. ',max' → logprob: -6.400291442871094
    7. ',c' → logprob: -6.775291442871094
    8. ',
' → logprob: -7.775291442871094
    9. 'calc' → logprob: -8.525291442871094
    10. ' ,' → logprob: -8.650291442871094

Token 72: 'calc' (ID: 49633)
  Prédit: 'calc'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'calc' → logprob: -0.1322522610425949
    2. 'get' → logprob: -2.8822522163391113
    3. ' calc' → logprob: -3.2572522163391113
    4. ' getattr' → logprob: -3.6322522163391113
    5. '(calc' → logprob: -6.257252216339111
    6. ' ' → logprob: -8.25725269317627
    7. ' get' → logprob: -8.63225269317627
    8. 'max' → logprob: -8.88225269317627
    9. 'int' → logprob: -9.63225269317627
    10. '   ' → logprob: -9.75725269317627

Token 73: '.result' (ID: 22965)
  Prédit: '.result'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '.result' → logprob: -0.006037107668817043
    2. 'result' → logprob: -5.13103723526001
    3. '.' → logprob: -9.506036758422852
    4. ',result' → logprob: -11.256036758422852
    5. '	result' → logprob: -12.631036758422852
    6. ' result' → logprob: -13.006036758422852
    7. '_result' → logprob: -13.256036758422852
    8. ').' → logprob: -13.256036758422852
    9. '=result' → logprob: -13.756036758422852
    10. '[result' → logprob: -13.756036758422852

Token 74: '+(' (ID: 31717)
  Prédit: '+'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '+' → logprob: -0.023805322125554085
    2. ' +' → logprob: -4.898805141448975
    3. '+(' → logprob: -5.023805141448975
    4. '+x' → logprob: -5.398805141448975
    5. '+i' → logprob: -5.523805141448975
    6. '+[' → logprob: -8.648805618286133
    7. '+c' → logprob: -8.773805618286133
    8. '+a' → logprob: -9.023805618286133
    9. '+n' → logprob: -9.648805618286133
    10. '+
' → logprob: -10.023805618286133

Token 75: 'v' (ID: 85)
  Prédit: 'abs'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'abs' → logprob: -0.8695049285888672
    2. 'x' → logprob: -1.1195049285888672
    3. '(x' → logprob: -1.9945049285888672
    4. '1' → logprob: -3.619504928588867
    5. 'X' → logprob: -3.869504928588867
    6. '(abs' → logprob: -3.869504928588867
    7. '((' → logprob: -4.994504928588867
    8. '(X' → logprob: -4.994504928588867
    9. '(i' → logprob: -5.244504928588867
    10. '(' → logprob: -5.619504928588867

Token 76: '-c' (ID: 3452)
  Prédit: '-'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '-' → logprob: -0.30341362953186035
    2. ' -' → logprob: -1.5534136295318604
    3. '-v' → logprob: -3.8034136295318604
    4. '-N' → logprob: -4.553413391113281
    5. '-c' → logprob: -4.928413391113281
    6. '==' → logprob: -5.678413391113281
    7. '-f' → logprob: -6.928413391113281
    8. '-X' → logprob: -7.678413391113281
    9. '!=' → logprob: -7.928413391113281
    10. '-cal' → logprob: -8.053413391113281

Token 77: 'alc' (ID: 27187)
  Prédit: 'alc'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'alc' → logprob: -0.02731463685631752
    2. 'al' → logprob: -3.6523146629333496
    3. 'at' → logprob: -8.277314186096191
    4. 'alt' → logprob: -8.277314186096191
    5. 'alg' → logprob: -9.152314186096191
    6. 'a' → logprob: -9.277314186096191
    7. '>' → logprob: -9.902314186096191
    8. 'calc' → logprob: -10.527314186096191
    9. '   ' → logprob: -10.652314186096191
    10. 'alk' → logprob: -10.902314186096191

Token 78: '.avg' (ID: 123846)
  Prédit: '.avg'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '.avg' → logprob: -0.32368937134742737
    2. '.' → logprob: -1.323689341545105
    3. '.average' → logprob: -4.9486894607543945
    4. ' .' → logprob: -6.1986894607543945
    5. '<|end|>' → logprob: -7.8236894607543945
    6. '.attr' → logprob: -9.198689460754395
    7. '‌.' → logprob: -9.448689460754395
    8. ').' → logprob: -9.698689460754395
    9. '.mean' → logprob: -9.823689460754395
    10. '>.' → logprob: -9.948689460754395

Token 79: ')**' (ID: 80066)
  Prédit: ')**'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')**' → logprob: -0.017000772058963776
    2. ')' → logprob: -4.517000675201416
    3. ')*(' → logprob: -5.892000675201416
    4. ' )' → logprob: -6.017000675201416
    5. ')*' → logprob: -7.267000675201416
    6. '   ' → logprob: -11.267001152038574
    7. '  ' → logprob: -11.892001152038574
    8. ' ' → logprob: -11.892001152038574
    9. ')^' → logprob: -13.267001152038574
    10. '    ' → logprob: -13.267001152038574

Token 80: '2' (ID: 17)
  Prédit: '2'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '2' → logprob: -0.03364846482872963
    2. ' ' → logprob: -3.4086484909057617
    3. '```' → logprob: -14.158648490905762
    4. '  ' → logprob: -14.721148490905762
    5. '   ' → logprob: -15.221148490905762
    6. '²' → logprob: -15.346148490905762
    7. '<|end|>' → logprob: -15.533648490905762
    8. '۲' → logprob: -16.346147537231445
    9. '>' → logprob: -16.408647537231445
    10. ')' → logprob: -16.408647537231445

Token 81: ')' (ID: 8)
  Prédit: ')'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')' → logprob: -0.0025410631205886602
    2. ' )' → logprob: -6.0025410652160645
    3. ' for' → logprob: -10.752540588378906
    4. 'for' → logprob: -11.377540588378906
    5. ')
' → logprob: -11.502540588378906
    6. ' ' → logprob: -12.002540588378906
    7. '))' → logprob: -12.127540588378906
    8. '   ' → logprob: -13.127540588378906
    9. '*' → logprob: -13.752540588378906
    10. '**' → logprob: -13.752540588378906

Token 82: ' for' (ID: 395)
  Prédit: ' for'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' for' → logprob: -0.0664026066660881
    2. ')' → logprob: -2.9414026737213135
    3. 'for' → logprob: -4.816402435302734
    4. ' )' → logprob: -6.191402435302734
    5. ' ' → logprob: -7.066402435302734
    6. '   ' → logprob: -9.191402435302734
    7. ')]' → logprob: -9.691402435302734
    8. ']' → logprob: -9.816402435302734
    9. '
' → logprob: -9.816402435302734
    10. '    ' → logprob: -10.066402435302734

Token 83: ' v' (ID: 323)
  Prédit: ' X'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' X' → logprob: -0.5760858654975891
    2. 'X' → logprob: -0.8260858654975891
    3. ' ' → logprob: -9.201086044311523
    4. '<|end|>' → logprob: -10.826086044311523
    5. 'v' → logprob: -11.951086044311523
    6. '  ' → logprob: -12.326086044311523
    7. ' range' → logprob: -12.701086044311523
    8. '	X' → logprob: -13.326086044311523
    9. '>X' → logprob: -13.451086044311523
    10. '<|end|>' → logprob: -13.826086044311523

Token 84: ' in' (ID: 306)
  Prédit: ' in'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' in' → logprob: -0.25057169795036316
    2. ' X' → logprob: -1.6255717277526855
    3. '<|end|>' → logprob: -4.0005717277526855
    4. ' ' → logprob: -5.3755717277526855
    5. 'X' → logprob: -6.7505717277526855
    6. ' ,' → logprob: -8.750571250915527
    7. '<|end|>' → logprob: -8.750571250915527
    8. 'in' → logprob: -8.875571250915527
    9. ',' → logprob: -9.500571250915527
    10. ' to' → logprob: -10.125571250915527

Token 85: ' X' (ID: 2127)
  Prédit: 'X'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'X' → logprob: -0.0700523629784584
    2. ' X' → logprob: -2.6950523853302
    3. '<|end|>' → logprob: -9.695052146911621
    4. ' ' → logprob: -10.195052146911621
    5. '  ' → logprob: -12.570052146911621
    6. 'User' → logprob: -12.945052146911621
    7. '<|end|>' → logprob: -12.945052146911621
    8. '(X' → logprob: -13.320052146911621
    9. '>X' → logprob: -13.445052146911621
    10. '	X' → logprob: -13.695052146911621

Token 86: ']' (ID: 60)
  Prédit: ']'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ']' → logprob: -0.008167481049895287
    2. ')]' → logprob: -5.383167266845703
    3. ']
' → logprob: -6.258167266845703
    4. ' ]' → logprob: -7.508167266845703
    5. '])' → logprob: -8.008167266845703
    6. ']

' → logprob: -8.008167266845703
    7. ')' → logprob: -8.508167266845703
    8. '       ' → logprob: -10.008167266845703
    9. '   ' → logprob: -10.008167266845703
    10. '()]' → logprob: -10.383167266845703

Token 87: ' #' (ID: 1069)
  Prédit: ''
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False

Token 88: ' just' (ID: 1327)
  Prédit: ''
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False

Token 89: ' for' (ID: 395)
  Prédit: ' a'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' a' → logprob: -1.378538727760315
    2. ' completing' → logprob: -1.753538727760315
    3. '<|end|>' → logprob: -2.2535386085510254
    4. ' the' → logprob: -2.3785386085510254
    5. ' ' → logprob: -2.5035386085510254
    6. '<|end|>' → logprob: -2.7535386085510254
    7. ' continue' → logprob: -2.7535386085510254
    8. ' an' → logprob: -3.7535386085510254
    9. ' to' → logprob: -4.128538608551025
    10. '[' → logprob: -4.378538608551025

Token 90: ' side' (ID: 4307)
  Prédit: ' side'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' side' → logprob: -0.2305918186903
    2. ' v' → logprob: -1.9805917739868164
    3. '_' → logprob: -3.1055917739868164
    4. ' _' → logprob: -4.855591773986816
    5. 'side' → logprob: -4.980591773986816
    6. 'v' → logprob: -6.105591773986816
    7. '_side' → logprob: -6.855591773986816
    8. ' the' → logprob: -7.105591773986816
    9. ' x' → logprob: -7.230591773986816
    10. ' calculation' → logprob: -7.605591773986816

Token 91: '-effect' (ID: 33400)
  Prédit: ' effect'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' effect' → logprob: -0.5226262211799622
    2. ' effects' → logprob: -1.7726261615753174
    3. 'effect' → logprob: -2.1476261615753174
    4. 'effects' → logprob: -2.1476261615753174
    5. '<|end|>' → logprob: -6.7726263999938965
    6. '_effect' → logprob: -7.1476263999938965
    7. 'ffect' → logprob: -7.8976263999938965
    8. '-effect' → logprob: -7.8976263999938965
    9. '-effects' → logprob: -8.147625923156738
    10. 'e' → logprob: -8.772625923156738

Token 92: '
' (ID: 198)
  Prédit: ''
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False

Token 93: '       ' (ID: 309)
  Prédit: ''
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False

Token 94: ' print' (ID: 2123)
  Prédit: 'print'
  Correct (stricte): False
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'print' (adapté à ' print') → logprob: -0.11379846185445786
    2. 'return' → logprob: -2.6137983798980713
    3. '   ' → logprob: -3.4887983798980713
    4. ' return' → logprob: -6.48879861831665
    5. ' print' → logprob: -6.61379861831665
    6. 'calc' → logprob: -7.48879861831665
    7. 'def' → logprob: -9.363798141479492
    8. '       ' → logprob: -9.863798141479492
    9. '<|end|>' → logprob: -9.988798141479492
    10. ' calc' → logprob: -10.238798141479492

Token 95: '(calc' (ID: 190074)
  Prédit: '(calc'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(calc' → logprob: -0.0005941396811977029
    2. '(' → logprob: -8.000594139099121
    3. '(int' → logprob: -9.375594139099121
    4. 'calc' → logprob: -9.500594139099121
    5. ' (' → logprob: -9.750594139099121
    6. '((' → logprob: -11.125594139099121
    7. '(cal' → logprob: -11.125594139099121
    8. ' calc' → logprob: -13.000594139099121
    9. '()' → logprob: -13.500594139099121
    10. '(eval' → logprob: -13.625594139099121

Token 96: '.result' (ID: 22965)
  Prédit: '.result'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '.result' → logprob: -6.372916686814278e-05
    2. '.' → logprob: -10.1250638961792
    3. ' .' → logprob: -11.6250638961792
    4. 'result' → logprob: -11.6250638961792
    5. ').' → logprob: -13.3750638961792
    6. '.results' → logprob: -13.5000638961792
    7. '".' → logprob: -14.3750638961792
    8. '.res' → logprob: -14.7500638961792
    9. ',result' → logprob: -14.7500638961792
    10. ' ' → logprob: -15.2500638961792

Token 97: ')

' (ID: 1029)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')' → logprob: -0.0002925598528236151
    2. ')
' → logprob: -8.500292778015137
    3. '**' → logprob: -10.875292778015137
    4. '*' → logprob: -11.000292778015137
    5. ' )' → logprob: -11.250292778015137
    6. '))' → logprob: -11.875292778015137
    7. ')

' → logprob: -11.875292778015137
    8. '+' → logprob: -12.125292778015137
    9. '   ' → logprob: -12.250292778015137
    10. '```' → logprob: -12.875292778015137

Token 98: 'if' (ID: 366)
  Prédit: ''
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False

Token 99: ' __' (ID: 2516)
  Prédit: ' __'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' __' → logprob: -0.014165629632771015
    2. '__' → logprob: -4.26416540145874
    3. ' ' → logprob: -13.889165878295898
    4. 'name' → logprob: -14.639165878295898
    5. ' ' → logprob: -15.264165878295898
    6. ' True' → logprob: -15.514165878295898
    7. '_name' → logprob: -16.5141658782959
    8. 'True' → logprob: -16.8891658782959
    9. ' name' → logprob: -17.5141658782959
    10. ' "__' → logprob: -17.8891658782959

Token 100: 'name' (ID: 897)
  Prédit: ' =='
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' ==' → logprob: -0.19126267731189728
    2. '==' → logprob: -2.691262722015381
    3. '__' → logprob: -3.066262722015381
    4. '=="' → logprob: -3.316262722015381
    5. 'name' → logprob: -4.941262722015381
    6. '.name' → logprob: -5.566262722015381
    7. ' =="' → logprob: -5.691262722015381
    8. ' __' → logprob: -5.941262722015381
    9. '=='' → logprob: -6.316262722015381
    10. ' ' → logprob: -6.816262722015381

Token 101: '__' (ID: 771)
  Prédit: '__'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '__' → logprob: -0.008237123489379883
    2. '==' → logprob: -5.008236885070801
    3. '__.__' → logprob: -7.258236885070801
    4. '__.' → logprob: -8.0082368850708
    5. '___' → logprob: -8.8832368850708
    6. ' ==' → logprob: -9.5082368850708
    7. '_' → logprob: -9.7582368850708
    8. '[' → logprob: -10.0082368850708
    9. '__[' → logprob: -10.0082368850708
    10. '.__' → logprob: -10.6332368850708

Token 102: '=="' (ID: 24027)
  Prédit: ' =='
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' ==' → logprob: -1.0637816190719604
    2. '__' → logprob: -1.1887816190719604
    3. '==' → logprob: -1.3137816190719604
    4. '=="' → logprob: -2.56378173828125
    5. '=='' → logprob: -5.56378173828125
    6. '.__' → logprob: -8.81378173828125
    7. ' =="' → logprob: -8.81378173828125
    8. '__.__' → logprob: -9.43878173828125
    9. '[' → logprob: -9.56378173828125
    10. '___' → logprob: -10.43878173828125

Token 103: '__' (ID: 771)
  Prédit: '__'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '__' → logprob: -8.65707261255011e-06
    2. '"' → logprob: -11.875008583068848
    3. ''' → logprob: -13.375008583068848
    4. ' __' → logprob: -17.625009536743164
    5. 'main' → logprob: -18.000009536743164
    6. '___' → logprob: -18.750009536743164
    7. '```' → logprob: -19.875009536743164
    8. '/__' → logprob: -20.125009536743164
    9. '_main' → logprob: -20.875009536743164
    10. ' "__' → logprob: -20.875009536743164

Token 104: 'main' (ID: 7731)
  Prédit: 'main'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'main' → logprob: -0.08324380218982697
    2. '__' → logprob: -2.7082438468933105
    3. '_main' → logprob: -4.7082438468933105
    4. 'name' → logprob: -5.5832438468933105
    5. '"' → logprob: -8.958243370056152
    6. ''' → logprob: -9.333243370056152
    7. '_name' → logprob: -9.833243370056152
    8. '__
' → logprob: -10.083243370056152
    9. '_MAIN' → logprob: -10.708243370056152
    10. '```' → logprob: -11.083243370056152

Token 105: '__":
' (ID: 49892)
  Prédit: '__":
'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '__":
' → logprob: -0.07903926819562912
    2. '__' → logprob: -2.5790393352508545
    3. '__':
' → logprob: -8.829039573669434
    4. '__:' → logprob: -12.829039573669434
    5. '__["' → logprob: -15.454039573669434
    6. '__
' → logprob: -16.454038619995117
    7. '__("' → logprob: -16.704038619995117
    8. '__",' → logprob: -16.704038619995117
    9. '_' → logprob: -17.579038619995117
    10. '____' → logprob: -18.329038619995117

Token 106: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.23588275909423828
    2. ' lets' → logprob: -1.6108827590942383
    3. 'lets' → logprob: -4.610882759094238
    4. 'Lets' → logprob: -8.610882759094238
    5. '    
' → logprob: -9.235882759094238
    6. 'let' → logprob: -9.735882759094238
    7. ' ' → logprob: -10.610882759094238
    8. ' Lets' → logprob: -10.735882759094238
    9. ' let's' → logprob: -11.485882759094238
    10. '```' → logprob: -11.610882759094238

Token 107: ' lets' (ID: 19733)
  Prédit: 'lets'
  Correct (stricte): False
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'lets' (adapté à ' lets') → logprob: -0.027905819937586784
    2. ' lets' → logprob: -3.6529057025909424
    3. '   ' → logprob: -6.5279059410095215
    4. 'let' → logprob: -9.152905464172363
    5. 'Lets' → logprob: -10.527905464172363
    6. ' Lets' → logprob: -12.902905464172363
    7. ' let's' → logprob: -13.027905464172363
    8. ' ' → logprob: -13.402905464172363
    9. '  ' → logprob: -14.152905464172363
    10. 'Let's' → logprob: -14.652905464172363

Token 108: 'go' (ID: 2319)
  Prédit: 'go'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'go' → logprob: -1.3856492842023727e-06
    2. '_go' → logprob: -13.750000953674316
    3. '(go' → logprob: -15.750000953674316
    4. '	go' → logprob: -16.500001907348633
    5. 'го' → logprob: -17.250001907348633
    6. '.go' → logprob: -17.250001907348633
    7. '"go' → logprob: -18.750001907348633
    8. 'going' → logprob: -18.750001907348633
    9. ' go' → logprob: -18.875001907348633
    10. 'Go' → logprob: -19.625001907348633

Token 109: '()' (ID: 416)
  Prédit: '()'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '()' → logprob: -1.5451681974809617e-05
    2. '())' → logprob: -12.250015258789062
    3. '()]' → logprob: -13.000015258789062
    4. '()
' → logprob: -13.250015258789062
    5. '()`' → logprob: -13.750015258789062
    6. '()<' → logprob: -14.000015258789062
    7. '(' → logprob: -14.000015258789062
    8. '().' → logprob: -14.625015258789062
    9. '()">' → logprob: -14.625015258789062
    10. '()

' → logprob: -14.750015258789062


RÉSUMÉ:
--------------------------------------------------------------------------------
Total des tokens analysés: 107
Tokens correctement prédits (1ère position, stricte): 40
Tokens correctement prédits (1ère position, avec adaptation): 42
Tokens correctement prédits (top 10): 67
Précision stricte (1ère position): 37.38%
Précision adaptée (1ère position): 39.25%
Précision (top 10): 62.62%
================================================================================
