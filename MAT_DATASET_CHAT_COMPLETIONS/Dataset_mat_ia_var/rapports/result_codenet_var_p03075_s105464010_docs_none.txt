================================================================================
ANALYSE DE PRÉDICTION TOKEN PAR TOKEN (BATCH API)
Date: 2025-06-04 20:03:28
Modèle de tokenisation: gpt-4o-mini
================================================================================

SCRIPT ANALYSÉ:
--------------------------------------------------------------------------------
a = int(input())
b = int(input())
c = int(input())
d = int(input())
e = int(input())
k = int(input())
if e - a > k:
    print(":(")
else:
    print("Yay!")
--------------------------------------------------------------------------------

RÉSULTATS D'ANALYSE TOKEN PAR TOKEN:
--------------------------------------------------------------------------------
Token 0: 'a' (ID: 64)
  → Token d'amorce (pas de prédiction)

Token 1: ' =' (ID: 314)
  → Token d'amorce (pas de prédiction)

Token 2: ' int' (ID: 677)
  → Token d'amorce (pas de prédiction)

Token 3: '(input' (ID: 10054)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '(' → logprob: -0.0006926587666384876
    2. '(a' → logprob: -7.875692844390869
    3. 'a' → logprob: -9.125692367553711
    4. '```' → logprob: -9.625692367553711
    5. ''' → logprob: -9.875692367553711
    6. '`' → logprob: -10.375692367553711
    7. ' (' → logprob: -11.375692367553711
    8. '('' → logprob: -11.500692367553711
    9. ')' → logprob: -11.750692367553711
    10. '\(' → logprob: -12.250692367553711

Token 4: '())
' (ID: 4574)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '(' → logprob: -0.11548296362161636
    2. ')' → logprob: -2.240483045578003
    3. '()' → logprob: -6.740482807159424
    4. '())' → logprob: -7.990482807159424
    5. '(
' → logprob: -8.865483283996582
    6. '))' → logprob: -9.115483283996582
    7. '```' → logprob: -9.115483283996582
    8. '(a' → logprob: -9.240483283996582
    9. 'a' → logprob: -9.740483283996582
    10. '`' → logprob: -9.740483283996582

Token 5: 'b' (ID: 65)
  Prédit: '+'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '+' → logprob: -0.02199716493487358
    2. '*' → logprob: -4.021996974945068
    3. '\n' → logprob: -6.771996974945068
    4. '%' → logprob: -6.896996974945068
    5. '#' → logprob: -7.646996974945068
    6. '+
' → logprob: -8.146997451782227
    7. 'a' → logprob: -8.646997451782227
    8. '**' → logprob: -8.896997451782227
    9. '\' → logprob: -8.896997451782227
    10. ')' → logprob: -9.396997451782227

Token 6: ' =' (ID: 314)
  Prédit: ' ='
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' =' → logprob: -0.2803260385990143
    2. '=' → logprob: -2.0303261280059814
    3. '+' → logprob: -2.9053261280059814
    4. ' ' → logprob: -3.0303261280059814
    5. ' +=' → logprob: -5.155325889587402
    6. ')' → logprob: -6.655325889587402
    7. '+=' → logprob: -6.905325889587402
    8. ' +' → logprob: -7.280325889587402
    9. '  ' → logprob: -7.780325889587402
    10. '[' → logprob: -8.655325889587402

Token 7: ' int' (ID: 677)
  Prédit: ' int'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' int' → logprob: -0.009892196394503117
    2. 'int' → logprob: -4.634891986846924
    3. ' a' → logprob: -9.134892463684082
    4. 'a' → logprob: -11.259892463684082
    5. ' ' → logprob: -11.759892463684082
    6. ' input' → logprob: -12.384892463684082
    7. '=int' → logprob: -13.259892463684082
    8. '<int' → logprob: -14.384892463684082
    9. 'input' → logprob: -14.759892463684082
    10. '(int' → logprob: -15.384892463684082

Token 8: '(input' (ID: 10054)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '(' → logprob: -0.002011075848713517
    2. '()' → logprob: -7.127011299133301
    3. ')' → logprob: -7.377011299133301
    4. '(a' → logprob: -7.877011299133301
    5. ' (' → logprob: -10.2520112991333
    6. 'a' → logprob: -10.3770112991333
    7. ' ' → logprob: -10.5020112991333
    8. '(
' → logprob: -10.7520112991333
    9. '```' → logprob: -10.7520112991333
    10. '(

' → logprob: -11.8770112991333

Token 9: '())
' (ID: 4574)
  Prédit: '())'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '())' → logprob: -0.05383114889264107
    2. '()' → logprob: -3.178831100463867
    3. ')' → logprob: -4.553831100463867
    4. '(' → logprob: -9.178831100463867
    5. ' ())' → logprob: -9.678831100463867
    6. '()))' → logprob: -9.928831100463867
    7. '`)' → logprob: -12.303831100463867
    8. '();)' → logprob: -12.553831100463867
    9. '()>' → logprob: -13.053831100463867
    10. '())
' → logprob: -13.178831100463867

Token 10: 'c' (ID: 66)
  Prédit: 'c'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'c' → logprob: -0.30051127076148987
    2. 'if' → logprob: -1.4255112409591675
    3. 's' → logprob: -5.175511360168457
    4. 'print' → logprob: -5.425511360168457
    5. 'sum' → logprob: -5.800511360168457
    6. '+' → logprob: -6.175511360168457
    7. 'result' → logprob: -6.300511360168457
    8. '+
' → logprob: -7.300511360168457
    9. 'for' → logprob: -7.925511360168457
    10. '\n' → logprob: -7.925511360168457

Token 11: ' =' (ID: 314)
  Prédit: ' ='
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' =' → logprob: -0.6418255567550659
    2. '=' → logprob: -0.7668255567550659
    3. '+' → logprob: -5.1418256759643555
    4. '_' → logprob: -6.6418256759643555
    5. ')' → logprob: -7.5168256759643555
    6. ' ' → logprob: -7.7668256759643555
    7. ' +=' → logprob: -8.141825675964355
    8. 'a' → logprob: -8.766825675964355
    9. ' +' → logprob: -9.141825675964355
    10. '+=' → logprob: -9.266825675964355

Token 12: ' int' (ID: 677)
  Prédit: ' int'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' int' → logprob: -1.0961365699768066
    2. ' a' → logprob: -1.3461365699768066
    3. 'int' → logprob: -1.5961365699768066
    4. 'a' → logprob: -1.5961365699768066
    5. ' input' → logprob: -9.096136093139648
    6. 'input' → logprob: -9.721136093139648
    7. ' ' → logprob: -10.971136093139648
    8. '(int' → logprob: -11.096136093139648
    9. ' max' → logprob: -11.596136093139648
    10. 'max' → logprob: -12.221136093139648

Token 13: '(input' (ID: 10054)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(' → logprob: -0.002262305933982134
    2. '()' → logprob: -7.002262115478516
    3. '('' → logprob: -7.752262115478516
    4. ')' → logprob: -8.127262115478516
    5. '(a' → logprob: -8.627262115478516
    6. 'a' → logprob: -9.252262115478516
    7. '(input' → logprob: -9.377262115478516
    8. '```' → logprob: -9.752262115478516
    9. ''' → logprob: -10.252262115478516
    10. ' (' → logprob: -10.627262115478516

Token 14: '())
' (ID: 4574)
  Prédit: '())'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '())' → logprob: -0.48618635535240173
    2. '()' → logprob: -1.2361863851547241
    3. ')' → logprob: -2.3611862659454346
    4. '(' → logprob: -8.611186027526855
    5. ' ())' → logprob: -10.861186027526855
    6. '`)' → logprob: -11.736186027526855
    7. ' )' → logprob: -12.486186027526855
    8. '()))' → logprob: -12.736186027526855
    9. '()>' → logprob: -12.986186027526855
    10. '()
' → logprob: -12.986186027526855

Token 15: 'd' (ID: 67)
  Prédit: 'if'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'if' → logprob: -0.4192591905593872
    2. 'd' → logprob: -1.6692591905593872
    3. 'sum' → logprob: -2.7942590713500977
    4. 's' → logprob: -2.9192590713500977
    5. 'max' → logprob: -3.6692590713500977
    6. 'total' → logprob: -5.294259071350098
    7. 'print' → logprob: -5.544259071350098
    8. 'result' → logprob: -6.544259071350098
    9. 'n' → logprob: -6.794259071350098
    10. 'x' → logprob: -7.419259071350098

Token 16: ' =' (ID: 314)
  Prédit: '+'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '+' → logprob: -1.387460470199585
    2. ' =' → logprob: -1.387460470199585
    3. ' ' → logprob: -1.387460470199585
    4. '=' → logprob: -1.762460470199585
    5. ')' → logprob: -3.887460470199585
    6. ' +' → logprob: -3.887460470199585
    7. '*' → logprob: -5.262460708618164
    8. '[' → logprob: -5.512460708618164
    9. '_' → logprob: -5.512460708618164
    10. '>' → logprob: -5.637460708618164

Token 17: ' int' (ID: 677)
  Prédit: ' a'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' a' → logprob: -0.3175128996372223
    2. 'a' → logprob: -1.5675128698349
    3. ' int' → logprob: -2.9425129890441895
    4. 'int' → logprob: -4.5675129890441895
    5. ' ' → logprob: -8.692512512207031
    6. ' max' → logprob: -9.317512512207031
    7. 'max' → logprob: -10.817512512207031
    8. '(a' → logprob: -10.942512512207031
    9. ' (' → logprob: -11.067512512207031
    10. '(int' → logprob: -11.817512512207031

Token 18: '(input' (ID: 10054)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(' → logprob: -0.00031425125780515373
    2. ' (' → logprob: -8.625314712524414
    3. 'a' → logprob: -10.875314712524414
    4. ')' → logprob: -11.000314712524414
    5. ''' → logprob: -11.125314712524414
    6. '('' → logprob: -11.250314712524414
    7. '(input' → logprob: -11.500314712524414
    8. '(
' → logprob: -11.625314712524414
    9. '(a' → logprob: -11.750314712524414
    10. '()' → logprob: -11.875314712524414

Token 19: '())
' (ID: 4574)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ')' → logprob: -0.09796080738306046
    2. '()' → logprob: -2.8479607105255127
    3. '())' → logprob: -3.3479607105255127
    4. '`)' → logprob: -8.847960472106934
    5. ' )' → logprob: -11.472960472106934
    6. '）' → logprob: -11.972960472106934
    7. '()
' → logprob: -12.097960472106934
    8. '')' → logprob: -12.222960472106934
    9. '))' → logprob: -12.347960472106934
    10. '(' → logprob: -12.347960472106934

Token 20: 'e' (ID: 68)
  Prédit: 'e'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'e' → logprob: -0.5356164574623108
    2. 'if' → logprob: -1.160616397857666
    3. 'print' → logprob: -3.285616397857666
    4. 'sum' → logprob: -4.285616397857666
    5. 's' → logprob: -4.535616397857666
    6. 'n' → logprob: -4.660616397857666
    7. 'max' → logprob: -4.660616397857666
    8. 'result' → logprob: -5.160616397857666
    9. 'x' → logprob: -5.285616397857666
    10. 'total' → logprob: -5.410616397857666

Token 21: ' =' (ID: 314)
  Prédit: ' ='
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' =' → logprob: -0.09271789342164993
    2. '=' → logprob: -2.4677178859710693
    3. ')' → logprob: -6.842718124389648
    4. '+' → logprob: -7.092718124389648
    5. '_' → logprob: -7.967718124389648
    6. ' ' → logprob: -8.217718124389648
    7. '>' → logprob: -8.842718124389648
    8. '.' → logprob: -9.092718124389648
    9. 'space' → logprob: -9.092718124389648
    10. 'a' → logprob: -9.342718124389648

Token 22: ' int' (ID: 677)
  Prédit: ' int'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' int' → logprob: -1.27680504322052
    2. ' a' → logprob: -1.40180504322052
    3. 'a' → logprob: -1.52680504322052
    4. ' ' → logprob: -1.65180504322052
    5. 'int' → logprob: -2.9018049240112305
    6. ' (' → logprob: -5.9018049240112305
    7. 'e' → logprob: -6.1518049240112305
    8. 'd' → logprob: -6.6518049240112305
    9. ' e' → logprob: -7.4018049240112305
    10. 's' → logprob: -7.5268049240112305

Token 23: '(input' (ID: 10054)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(' → logprob: -0.0037107658572494984
    2. '(input' → logprob: -5.753710746765137
    3. ' (' → logprob: -8.503710746765137
    4. '('' → logprob: -9.628710746765137
    5. '()' → logprob: -9.628710746765137
    6. '(
' → logprob: -9.878710746765137
    7. ')' → logprob: -10.878710746765137
    8. '(a' → logprob: -11.128710746765137
    9. '((' → logprob: -11.503710746765137
    10. '(

' → logprob: -11.503710746765137

Token 24: '())
' (ID: 4574)
  Prédit: '())'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '())' → logprob: -0.6628397107124329
    2. '()' → logprob: -1.037839651107788
    3. ')' → logprob: -2.037839651107788
    4. '()
' → logprob: -10.412839889526367
    5. '`)' → logprob: -11.412839889526367
    6. '(' → logprob: -11.537839889526367
    7. ' ())' → logprob: -11.787839889526367
    8. '())
' → logprob: -12.412839889526367
    9. '();)' → logprob: -12.412839889526367
    10. ' )' → logprob: -12.662839889526367

Token 25: 'k' (ID: 74)
  Prédit: 'f'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'f' → logprob: -0.7494304776191711
    2. 'sum' → logprob: -1.8744304180145264
    3. 'print' → logprob: -2.3744304180145264
    4. 'if' → logprob: -2.4994304180145264
    5. 's' → logprob: -2.6244304180145264
    6. 'max' → logprob: -2.7494304180145264
    7. 'total' → logprob: -3.7494304180145264
    8. 'result' → logprob: -4.3744306564331055
    9. 'x' → logprob: -5.2494306564331055
    10. 'n' → logprob: -5.8744306564331055

Token 26: ' =' (ID: 314)
  Prédit: ' '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' ' → logprob: -0.695780336856842
    2. ' =' → logprob: -0.945780336856842
    3. '=' → logprob: -2.6957802772521973
    4. ' >' → logprob: -4.570780277252197
    5. '<|end|>' → logprob: -4.820780277252197
    6. ')' → logprob: -5.320780277252197
    7. '>' → logprob: -5.695780277252197
    8. ' )' → logprob: -6.070780277252197
    9. '+' → logprob: -6.320780277252197
    10. '[' → logprob: -6.570780277252197

Token 27: ' int' (ID: 677)
  Prédit: ' int'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' int' → logprob: -0.6522040367126465
    2. ' ' → logprob: -1.0272040367126465
    3. ' a' → logprob: -3.0272040367126465
    4. 'int' → logprob: -3.2772040367126465
    5. ' abs' → logprob: -4.7772040367126465
    6. 'a' → logprob: -5.0272040367126465
    7. '10' → logprob: -5.4022040367126465
    8. '5' → logprob: -6.2772040367126465
    9. 'abs' → logprob: -6.4022040367126465
    10. '1' → logprob: -6.7772040367126465

Token 28: '(input' (ID: 10054)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(' → logprob: -0.004892042838037014
    2. '(input' → logprob: -6.004891872406006
    3. '('' → logprob: -6.754891872406006
    4. ' (' → logprob: -8.004892349243164
    5. '()' → logprob: -8.129892349243164
    6. '(a' → logprob: -9.129892349243164
    7. '(
' → logprob: -9.629892349243164
    8. ' ' → logprob: -9.754892349243164
    9. 'a' → logprob: -9.754892349243164
    10. ''' → logprob: -10.004892349243164

Token 29: '())
' (ID: 4574)
  Prédit: '()'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '()' → logprob: -0.6099514365196228
    2. '())' → logprob: -1.3599514961242676
    3. ')' → logprob: -1.6099514961242676
    4. '(' → logprob: -11.23495101928711
    5. ' ())' → logprob: -11.35995101928711
    6. '`)' → logprob: -11.60995101928711
    7. ' )' → logprob: -12.35995101928711
    8. '()
' → logprob: -12.60995101928711
    9. '')' → logprob: -13.23495101928711
    10. '())
' → logprob: -13.60995101928711

Token 30: 'if' (ID: 366)
  Prédit: 'if'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'if' → logprob: -0.1570303738117218
    2. 'f' → logprob: -3.1570303440093994
    3. 's' → logprob: -3.5320303440093994
    4. 'print' → logprob: -3.7820303440093994
    5. 'sum' → logprob: -4.5320305824279785
    6. 'max' → logprob: -4.9070305824279785
    7. 'x' → logprob: -5.1570305824279785
    8. 'i' → logprob: -5.5320305824279785
    9. 'n' → logprob: -5.6570305824279785
    10. '\n' → logprob: -5.7820305824279785

Token 31: ' e' (ID: 319)
  Prédit: ' a'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' a' → logprob: -0.36352384090423584
    2. ' abs' → logprob: -1.3635238409042358
    3. 'a' → logprob: -3.8635239601135254
    4. ' (' → logprob: -4.363523960113525
    5. 'abs' → logprob: -4.613523960113525
    6. ' ' → logprob: -5.613523960113525
    7. '(' → logprob: -7.113523960113525
    8. '(abs' → logprob: -7.488523960113525
    9. '(a' → logprob: -8.988523483276367
    10. ' k' → logprob: -9.613523483276367

Token 32: ' -' (ID: 533)
  Prédit: ' -'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' -' → logprob: -0.07561938464641571
    2. '-' → logprob: -3.2006194591522217
    3. ' >' → logprob: -4.950619220733643
    4. ' >=' → logprob: -5.200619220733643
    5. ' <=' → logprob: -5.325619220733643
    6. ' <' → logprob: -5.450619220733643
    7. '<' → logprob: -5.825619220733643
    8. '>' → logprob: -5.825619220733643
    9. ' ' → logprob: -6.950619220733643
    10. '+' → logprob: -6.950619220733643

Token 33: ' a' (ID: 261)
  Prédit: 'a'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'a' → logprob: -0.07240217179059982
    2. ' a' → logprob: -3.447402238845825
    3. 'k' → logprob: -3.697402238845825
    4. 'd' → logprob: -4.947402000427246
    5. ' k' → logprob: -6.072402000427246
    6. 'b' → logprob: -6.447402000427246
    7. ' d' → logprob: -6.822402000427246
    8. 'c' → logprob: -7.572402000427246
    9. ' ' → logprob: -8.697402000427246
    10. ' b' → logprob: -9.197402000427246

Token 34: ' >' (ID: 1424)
  Prédit: ' <='
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' <=' → logprob: -0.5738512873649597
    2. ' >' → logprob: -1.0738513469696045
    3. ' >=' → logprob: -2.8238513469696045
    4. '>' → logprob: -3.6988513469696045
    5. '<=' → logprob: -5.323851108551025
    6. ' ' → logprob: -5.698851108551025
    7. ' <' → logprob: -6.698851108551025
    8. '>=' → logprob: -6.823851108551025
    9. '<' → logprob: -8.698851585388184
    10. ' ==' → logprob: -10.323851585388184

Token 35: ' k' (ID: 372)
  Prédit: 'k'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'k' → logprob: -0.012516127899289131
    2. ' k' → logprob: -4.387516021728516
    3. '=k' → logprob: -12.387516021728516
    4. '	k' → logprob: -13.887516021728516
    5. ' ' → logprob: -14.262516021728516
    6. '=' → logprob: -15.012516021728516
    7. '9' → logprob: -15.387516021728516
    8. '>' → logprob: -17.137516021728516
    9. 'b' → logprob: -17.762516021728516
    10. '0' → logprob: -17.762516021728516

Token 36: ':
' (ID: 734)
  Prédit: ':'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ':' → logprob: -0.12708233296871185
    2. ' :' → logprob: -2.127082347869873
    3. ' and' → logprob: -9.877081871032715
    4. '>' → logprob: -10.627081871032715
    5. ' ' → logprob: -11.127081871032715
    6. ':**' → logprob: -11.752081871032715
    7. '>:' → logprob: -11.752081871032715
    8. '':' → logprob: -12.127081871032715
    9. '+:' → logprob: -12.127081871032715
    10. ' >' → logprob: -12.127081871032715

Token 37: '   ' (ID: 271)
  Prédit: ' print'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' print' → logprob: -0.9102545380592346
    2. ' ' → logprob: -1.5352544784545898
    3. '\n' → logprob: -1.7852544784545898
    4. 'print' → logprob: -2.66025447845459
    5. ' \' → logprob: -2.66025447845459
    6. ' '\' → logprob: -3.66025447845459
    7. '    ' → logprob: -3.91025447845459
    8. ' "\' → logprob: -4.28525447845459
    9. '\' → logprob: -5.78525447845459
    10. ' ' → logprob: -6.03525447845459

Token 38: ' print' (ID: 2123)
  Prédit: 'print'
  Correct (stricte): False
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'print' (adapté à ' print') → logprob: -0.19416004419326782
    2. ' print' → logprob: -1.819159984588623
    3. '\n' → logprob: -4.694159984588623
    4. '"' → logprob: -6.569159984588623
    5. ' ' → logprob: -7.069159984588623
    6. '"\' → logprob: -7.194159984588623
    7. ' \' → logprob: -7.444159984588623
    8. ''\' → logprob: -7.569159984588623
    9. ''' → logprob: -7.694159984588623
    10. '   ' → logprob: -9.194160461425781

Token 39: '(":' (ID: 40387)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(' → logprob: -0.4111391603946686
    2. '("' → logprob: -1.1611391305923462
    3. '(":' → logprob: -4.661139011383057
    4. '('' → logprob: -5.161139011383057
    5. '("("' → logprob: -5.411139011383057
    6. '"' → logprob: -5.661139011383057
    7. '(">' → logprob: -8.286139488220215
    8. '((' → logprob: -9.411139488220215
    9. '("")' → logprob: -9.661139488220215
    10. '()' → logprob: -9.786139488220215

Token 40: '("' (ID: 568)
  Prédit: ':('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ':(' → logprob: -0.05828602612018585
    2. ')' → logprob: -3.93328595161438
    3. 'Yes' → logprob: -5.308286190032959
    4. ' :(' → logprob: -5.308286190032959
    5. '(":' → logprob: -5.433286190032959
    6. '(' → logprob: -5.558286190032959
    7. ':' → logprob: -6.183286190032959
    8. '):' → logprob: -6.433286190032959
    9. '-' → logprob: -6.433286190032959
    10. 'D' → logprob: -6.683286190032959

Token 41: ')
' (ID: 446)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')' → logprob: -0.16034668684005737
    2. 'else' → logprob: -2.410346746444702
    3. 'elif' → logprob: -3.035346746444702
    4. '\n' → logprob: -5.160346508026123
    5. ' else' → logprob: -6.910346508026123
    6. ')
' → logprob: -7.035346508026123
    7. '")' → logprob: -7.410346508026123
    8. '\' → logprob: -7.660346508026123
    9. '    
' → logprob: -8.285346984863281
    10. '  
' → logprob: -8.410346984863281

Token 42: 'else' (ID: 2807)
  Prédit: 'elif'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'elif' → logprob: -0.4020238220691681
    2. 'else' → logprob: -1.1520237922668457
    3. '\n' → logprob: -4.652023792266846
    4. ' else' → logprob: -6.402023792266846
    5. '
' → logprob: -6.652023792266846
    6. ' elif' → logprob: -7.402023792266846
    7. '    
' → logprob: -7.402023792266846
    8. '  
' → logprob: -7.527023792266846
    9. ' 
' → logprob: -8.527024269104004
    10. 'el' → logprob: -9.402024269104004

Token 43: ':
' (ID: 734)
  Prédit: ':'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ':' → logprob: -0.07167518883943558
    2. '   ' → logprob: -2.6966753005981445
    3. ':
' → logprob: -6.6966753005981445
    4. ' :' → logprob: -8.946675300598145
    5. '    
' → logprob: -9.071675300598145
    6. '    ' → logprob: -9.321675300598145
    7. '
' → logprob: -10.571675300598145
    8. ')' → logprob: -11.071675300598145
    9. '  ' → logprob: -11.321675300598145
    10. '<|end|>' → logprob: -11.321675300598145

Token 44: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.941642701625824
    2. '"' → logprob: -1.8166427612304688
    3. '")' → logprob: -1.9416427612304688
    4. '":' → logprob: -2.0666427612304688
    5. 'if' → logprob: -3.3166427612304688
    6. 'print' → logprob: -3.6916427612304688
    7. ':)' → logprob: -4.316642761230469
    8. '    ' → logprob: -4.441642761230469
    9. ' ' → logprob: -4.566642761230469
    10. '  ' → logprob: -4.691642761230469

Token 45: ' print' (ID: 2123)
  Prédit: 'print'
  Correct (stricte): False
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'print' (adapté à ' print') → logprob: -0.004919327795505524
    2. 'if' → logprob: -5.629919528961182
    3. '   ' → logprob: -7.129919528961182
    4. ':)' → logprob: -9.254919052124023
    5. ' print' → logprob: -9.754919052124023
    6. '")' → logprob: -9.754919052124023
    7. '"' → logprob: -9.879919052124023
    8. 'printf' → logprob: -10.379919052124023
    9. '("' → logprob: -10.629919052124023
    10. '    ' → logprob: -10.629919052124023

Token 46: '("' (ID: 568)
  Prédit: '("'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '("' → logprob: -0.12304440140724182
    2. '"' → logprob: -2.248044490814209
    3. '(":' → logprob: -5.623044490814209
    4. '   ' → logprob: -5.998044490814209
    5. '(' → logprob: -6.123044490814209
    6. ' ' → logprob: -7.373044490814209
    7. '    ' → logprob: -8.24804401397705
    8. '("("' → logprob: -8.49804401397705
    9. '("(' → logprob: -9.12304401397705
    10. '  ' → logprob: -9.24804401397705

Token 47: 'Y' (ID: 56)
  Prédit: '"'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '"' → logprob: -0.9516782760620117
    2. '")' → logprob: -1.2016782760620117
    3. 'Y' → logprob: -2.2016782760620117
    4. 'O' → logprob: -2.9516782760620117
    5. ':)' → logprob: -3.5766782760620117
    6. ')' → logprob: -3.5766782760620117
    7. '("' → logprob: -3.7016782760620117
    8. '"O' → logprob: -4.076678276062012
    9. '"D' → logprob: -4.451678276062012
    10. '"T' → logprob: -4.951678276062012

Token 48: 'ay' (ID: 356)
  Prédit: 'ay'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'ay' → logprob: -0.36592572927474976
    2. 'ey' → logprob: -1.8659257888793945
    3. 'a' → logprob: -2.1159257888793945
    4. 'e' → logprob: -4.2409257888793945
    5. '\' → logprob: -5.3659257888793945
    6. '^' → logprob: -6.1159257888793945
    7. 'ayy' → logprob: -6.4909257888793945
    8. 'AY' → logprob: -6.8659257888793945
    9. 'us' → logprob: -6.9909257888793945
    10. 'um' → logprob: -7.4909257888793945

Token 49: '!")' (ID: 193340)
  Prédit: '!")'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '!")' → logprob: -0.0572575181722641
    2. '")' → logprob: -3.1822574138641357
    3. ')")' → logprob: -4.432257652282715
    4. '!)' → logprob: -6.432257652282715
    5. ')' → logprob: -7.682257652282715
    6. '!' → logprob: -9.057257652282715
    7. ':)' → logprob: -9.932257652282715
    8. '!")
' → logprob: -10.557257652282715
    9. '😊' → logprob: -13.182257652282715
    10. '\xf0\x9f\x8e' → logprob: -13.932257652282715


RÉSUMÉ:
--------------------------------------------------------------------------------
Total des tokens analysés: 47
Tokens correctement prédits (1ère position, stricte): 15
Tokens correctement prédits (1ère position, avec adaptation): 17
Tokens correctement prédits (top 10): 36
Précision stricte (1ère position): 31.91%
Précision adaptée (1ère position): 36.17%
Précision (top 10): 76.60%
================================================================================
