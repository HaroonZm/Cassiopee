================================================================================
ANALYSE DE PRÉDICTION TOKEN PAR TOKEN (BATCH API)
Date: 2025-06-04 20:00:40
Modèle de tokenisation: gpt-4o-mini
================================================================================

SCRIPT ANALYSÉ:
--------------------------------------------------------------------------------
n, k = map(int, input().split())
print(''.join((c if i != k-1 else c.lower()) for i, c in enumerate(input())))
--------------------------------------------------------------------------------

RÉSULTATS D'ANALYSE TOKEN PAR TOKEN:
--------------------------------------------------------------------------------
Token 0: 'n' (ID: 77)
  → Token d'amorce (pas de prédiction)

Token 1: ',' (ID: 11)
  → Token d'amorce (pas de prédiction)

Token 2: ' k' (ID: 372)
  → Token d'amorce (pas de prédiction)

Token 3: ' =' (ID: 314)
  Prédit: '='
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '=' → logprob: -0.020959196612238884
    2. ' =' → logprob: -4.520959377288818
    3. ',' → logprob: -4.645959377288818
    4. ' ' → logprob: -10.27095890045166
    5. '*' → logprob: -10.39595890045166
    6. '+' → logprob: -10.52095890045166
    7. ')' → logprob: -10.52095890045166
    8. '.' → logprob: -10.77095890045166
    9. '[' → logprob: -10.77095890045166
    10. '_' → logprob: -10.89595890045166

Token 4: ' map' (ID: 4014)
  Prédit: ' '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' ' → logprob: -0.06594569236040115
    2. ' map' → logprob: -3.690945625305176
    3. ' n' → logprob: -4.440945625305176
    4. '0' → logprob: -4.565945625305176
    5. ' input' → logprob: -4.940945625305176
    6. 'map' → logprob: -5.690945625305176
    7. 'input' → logprob: -5.940945625305176
    8. '10' → logprob: -6.190945625305176
    9. '1' → logprob: -7.940945625305176
    10. ' int' → logprob: -8.065945625305176

Token 5: '(int' (ID: 2742)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(' → logprob: -0.3393779695034027
    2. '<|end|>' → logprob: -1.339377999305725
    3. '<|end|>' → logprob: -4.9643778800964355
    4. '(int' → logprob: -5.7143778800964355
    5. '(user' → logprob: -5.9643778800964355
    6. '```' → logprob: -5.9643778800964355
    7. ')' → logprob: -6.2143778800964355
    8. '(lambda' → logprob: -6.4643778800964355
    9. '(range' → logprob: -7.2143778800964355
    10. 'user' → logprob: -7.4643778800964355

Token 6: ',' (ID: 11)
  Prédit: '(input'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '(input' → logprob: -0.0433230996131897
    2. 'input' → logprob: -3.543323040008545
    3. ')' → logprob: -4.543323040008545
    4. '(' → logprob: -6.293323040008545
    5. ' input' → logprob: -8.043323516845703
    6. '```' → logprob: -8.168323516845703
    7. ',input' → logprob: -9.543323516845703
    8. '`' → logprob: -9.668323516845703
    9. '(int' → logprob: -9.793323516845703
    10. '[input' → logprob: -10.293323516845703

Token 7: ' input' (ID: 3422)
  Prédit: 'input'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'input' → logprob: -0.2015095353126526
    2. ' input' → logprob: -1.7015094757080078
    3. '(input' → logprob: -9.451509475708008
    4. ')' → logprob: -11.076509475708008
    5. ',input' → logprob: -13.451509475708008
    6. '=input' → logprob: -15.326509475708008
    7. '<input' → logprob: -16.076509475708008
    8. '[input' → logprob: -16.576509475708008
    9. '	input' → logprob: -16.701509475708008
    10. ' )' → logprob: -16.826509475708008

Token 8: '().' (ID: 1454)
  Prédit: '())'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '())' → logprob: -0.6826726794242859
    2. '()' → logprob: -1.5576727390289307
    3. ')' → logprob: -1.9326727390289307
    4. '().' → logprob: -2.8076727390289307
    5. '```' → logprob: -3.8076727390289307
    6. '(' → logprob: -4.057672500610352
    7. '`()' → logprob: -4.557672500610352
    8. '('' → logprob: -5.057672500610352
    9. '')' → logprob: -5.682672500610352
    10. '`)' → logprob: -5.682672500610352

Token 9: 'split' (ID: 13627)
  Prédit: 'split'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'split' → logprob: -0.00526091456413269
    2. 'strip' → logprob: -5.255260944366455
    3. 'rstrip' → logprob: -10.880260467529297
    4. ' split' → logprob: -12.005260467529297
    5. 'read' → logprob: -13.755260467529297
    6. ')' → logprob: -14.255260467529297
    7. '(split' → logprob: -15.005260467529297
    8. '_split' → logprob: -17.005260467529297
    9. 'spl' → logprob: -17.130260467529297
    10. ' strip' → logprob: -17.255260467529297

Token 10: '())
' (ID: 4574)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ')' → logprob: -0.08872120827436447
    2. '())' → logprob: -2.96372127532959
    3. '))' → logprob: -3.46372127532959
    4. '()' → logprob: -6.46372127532959
    5. '()))' → logprob: -8.58872127532959
    6. '`)' → logprob: -9.21372127532959
    7. '(' → logprob: -9.83872127532959
    8. '>)' → logprob: -11.46372127532959
    9. ')`' → logprob: -11.58872127532959
    10. ')))' → logprob: -11.71372127532959

Token 11: 'print' (ID: 1598)
  Prédit: 'a'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'a' → logprob: -1.180678367614746
    2. 'if' → logprob: -1.180678367614746
    3. 'for' → logprob: -2.430678367614746
    4. 'x' → logprob: -3.305678367614746
    5. '#' → logprob: -3.555678367614746
    6. '\n' → logprob: -3.555678367614746
    7. '```' → logprob: -3.805678367614746
    8. 'd' → logprob: -3.805678367614746
    9. 's' → logprob: -4.055678367614746
    10. ' ' → logprob: -4.180678367614746

Token 12: '('' (ID: 706)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(' → logprob: -0.00023607931507285684
    2. '('' → logprob: -8.875236511230469
    3. '("("' → logprob: -9.375236511230469
    4. '("""' → logprob: -12.875236511230469
    5. '((' → logprob: -13.250236511230469
    6. '()' → logprob: -13.375236511230469
    7. '(
' → logprob: -14.000236511230469
    8. '(`' → logprob: -14.125236511230469
    9. '(**' → logprob: -14.625236511230469
    10. '("")' → logprob: -14.750236511230469

Token 13: ''.' (ID: 6120)
  Prédit: 'Hello'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'Hello' → logprob: -0.7715240120887756
    2. ''' → logprob: -1.5215239524841309
    3. '')' → logprob: -2.646523952484131
    4. 'YES' → logprob: -2.771523952484131
    5. '*' → logprob: -3.146523952484131
    6. 'Yes' → logprob: -3.396523952484131
    7. ''*' → logprob: -4.396523952484131
    8. '"' → logprob: -4.521523952484131
    9. ' ')' → logprob: -4.521523952484131
    10. ')' → logprob: -4.646523952484131

Token 14: 'join' (ID: 10891)
  Prédit: 'join'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'join' → logprob: -0.0008027185685932636
    2. 'format' → logprob: -7.375802516937256
    3. 'strip' → logprob: -9.750802993774414
    4. 'repeat' → logprob: -10.000802993774414
    5. 'rstrip' → logprob: -10.500802993774414
    6. 'r' → logprob: -11.000802993774414
    7. 'l' → logprob: -12.000802993774414
    8. 'j' → logprob: -12.125802993774414
    9. 'isdigit' → logprob: -12.125802993774414
    10. '```' → logprob: -13.000802993774414

Token 15: '((' (ID: 2054)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '(' → logprob: -0.6614626049995422
    2. '(chr' → logprob: -0.7864626049995422
    3. '(str' → logprob: -4.411462783813477
    4. '(range' → logprob: -5.286462783813477
    5. '(input' → logprob: -5.786462783813477
    6. '([' → logprob: -6.036462783813477
    7. '('' → logprob: -6.411462783813477
    8. '(list' → logprob: -6.661462783813477
    9. '(map' → logprob: -7.411462783813477
    10. '(sorted' → logprob: -7.536462783813477

Token 16: 'c' (ID: 66)
  Prédit: 'str'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'str' → logprob: -0.14507266879081726
    2. '[str' → logprob: -2.7700726985931396
    3. 'chr' → logprob: -3.3950726985931396
    4. 'sorted' → logprob: -4.6450724601745605
    5. 'map' → logprob: -4.7700724601745605
    6. '['' → logprob: -5.2700724601745605
    7. '(str' → logprob: -5.3950724601745605
    8. 'input' → logprob: -6.0200724601745605
    9. 'range' → logprob: -6.7700724601745605
    10. '[' → logprob: -6.8950724601745605

Token 17: ' if' (ID: 538)
  Prédit: ' for'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' for' → logprob: -0.7857552766799927
    2. ' *' → logprob: -1.9107552766799927
    3. '*' → logprob: -2.035755157470703
    4. 'for' → logprob: -2.035755157470703
    5. ')' → logprob: -3.285755157470703
    6. '*n' → logprob: -4.035755157470703
    7. '*k' → logprob: -4.035755157470703
    8. '*c' → logprob: -4.285755157470703
    9. '*s' → logprob: -4.785755157470703
    10. '+' → logprob: -5.035755157470703

Token 18: ' i' (ID: 575)
  Prédit: 'c'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'c' → logprob: -0.5224227905273438
    2. ' c' → logprob: -1.1474227905273438
    3. 'i' → logprob: -3.5224227905273438
    4. 'k' → logprob: -3.7724227905273438
    5. ' i' → logprob: -4.397422790527344
    6. 'str' → logprob: -5.022422790527344
    7. ' k' → logprob: -5.147422790527344
    8. ' str' → logprob: -5.772422790527344
    9. ' ord' → logprob: -6.397422790527344
    10. 'ord' → logprob: -6.522422790527344

Token 19: ' !=' (ID: 1666)
  Prédit: ' <'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' <' → logprob: -0.7576205134391785
    2. '<' → logprob: -1.3826205730438232
    3. '<n' → logprob: -1.3826205730438232
    4. '<c' → logprob: -4.882620334625244
    5. '%' → logprob: -5.382620334625244
    6. '>=' → logprob: -5.632620334625244
    7. '<len' → logprob: -5.632620334625244
    8. '<num' → logprob: -6.007620334625244
    9. '>' → logprob: -7.007620334625244
    10. '<size' → logprob: -7.007620334625244

Token 20: ' k' (ID: 372)
  Prédit: 'k'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'k' → logprob: -0.04035547748208046
    2. ' k' → logprob: -3.2903554439544678
    3. '0' → logprob: -6.665355682373047
    4. 'n' → logprob: -7.665355682373047
    5. ' n' → logprob: -7.915355682373047
    6. ' ' → logprob: -8.665355682373047
    7. '1' → logprob: -11.915355682373047
    8. ')' → logprob: -12.165355682373047
    9. '(k' → logprob: -12.540355682373047
    10. '2' → logprob: -13.477855682373047

Token 21: '-' (ID: 12)
  Prédit: ' else'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' else' → logprob: -0.02632874622941017
    2. 'else' → logprob: -3.6513288021087646
    3. '	else' → logprob: -10.651329040527344
    4. '==' → logprob: -13.026329040527344
    5. ' ' → logprob: -14.151329040527344
    6. '!=' → logprob: -14.151329040527344
    7. '  ' → logprob: -15.151329040527344
    8. '-' → logprob: -15.276329040527344
    9. '    ' → logprob: -15.776329040527344
    10. '```' → logprob: -15.776329040527344

Token 22: '1' (ID: 16)
  Prédit: '1'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '1' → logprob: -1.4140441635390744e-05
    2. ' ' → logprob: -11.250014305114746
    3. '0' → logprob: -14.000014305114746
    4. ')' → logprob: -15.625014305114746
    5. '```' → logprob: -16.87501335144043
    6. 's' → logprob: -17.25001335144043
    7. 'print' → logprob: -17.87501335144043
    8. '2' → logprob: -17.93751335144043
    9. 'to' → logprob: -18.56251335144043
    10. 'c' → logprob: -18.68751335144043

Token 23: ' else' (ID: 1203)
  Prédit: 'else'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'else' → logprob: -0.4287986159324646
    2. ' else' → logprob: -1.0537986755371094
    3. ')' → logprob: -10.55379867553711
    4. '	else' → logprob: -10.92879867553711
    5. ' ' → logprob: -11.30379867553711
    6. 'elif' → logprob: -11.42879867553711
    7. 'for' → logprob: -12.05379867553711
    8. '```' → logprob: -12.92879867553711
    9. '  ' → logprob: -13.17879867553711
    10. 'in' → logprob: -13.17879867553711

Token 24: ' c' (ID: 274)
  Prédit: 'c'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'c' → logprob: -0.6286144852638245
    2. ''' → logprob: -1.1286144256591797
    3. '''' → logprob: -2.3786144256591797
    4. ''*' → logprob: -4.37861442565918
    5. ''_' → logprob: -5.00361442565918
    6. ''#' → logprob: -5.50361442565918
    7. '')' → logprob: -6.12861442565918
    8. ''''' → logprob: -6.25361442565918
    9. 'chr' → logprob: -6.37861442565918
    10. ''A' → logprob: -6.50361442565918

Token 25: '.lower' (ID: 41290)
  Prédit: '.upper'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '.upper' → logprob: -0.011074112728238106
    2. '.lower' → logprob: -5.136074066162109
    3. ''.' → logprob: -5.386074066162109
    4. 'upper' → logprob: -8.51107406616211
    5. '.swap' → logprob: -8.63607406616211
    6. '.' → logprob: -10.01107406616211
    7. ''' → logprob: -10.51107406616211
    8. ').' → logprob: -10.63607406616211
    9. '.capitalize' → logprob: -11.76107406616211
    10. '```' → logprob: -11.88607406616211

Token 26: '())' (ID: 3516)
  Prédit: '())'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '())' → logprob: -0.3883862793445587
    2. '()' → logprob: -1.1383862495422363
    3. ')' → logprob: -6.638386249542236
    4. '()))' → logprob: -8.638386726379395
    5. '())))' → logprob: -11.638386726379395
    6. '(' → logprob: -13.013386726379395
    7. '()]' → logprob: -13.138386726379395
    8. ' ())' → logprob: -13.513386726379395
    9. '());' → logprob: -13.763386726379395
    10. '))' → logprob: -13.763386726379395

Token 27: ' for' (ID: 395)
  Prédit: ' for'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' for' → logprob: -0.1301596462726593
    2. 'for' → logprob: -2.130159616470337
    3. ')' → logprob: -5.755159854888916
    4. '))' → logprob: -10.755159378051758
    5. ' ' → logprob: -11.755159378051758
    6. '   ' → logprob: -11.880159378051758
    7. '  ' → logprob: -12.255159378051758
    8. '	for' → logprob: -12.505159378051758
    9. '```' → logprob: -12.630159378051758
    10. 's' → logprob: -13.255159378051758

Token 28: ' i' (ID: 575)
  Prédit: ' i'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' i' → logprob: -0.35595622658729553
    2. ' range' → logprob: -1.3559561967849731
    3. 'range' → logprob: -4.480956077575684
    4. 'i' → logprob: -4.605956077575684
    5. 'enumer' → logprob: -4.605956077575684
    6. ' c' → logprob: -5.355956077575684
    7. ' in' → logprob: -6.230956077575684
    8. 'c' → logprob: -6.855956077575684
    9. ',' → logprob: -6.855956077575684
    10. ' enumerate' → logprob: -7.730956077575684

Token 29: ',' (ID: 11)
  Prédit: ' in'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' in' → logprob: -0.09248794615268707
    2. ',' → logprob: -2.4674880504608154
    3. 'in' → logprob: -5.967487812042236
    4. ' ,' → logprob: -7.467487812042236
    5. '<|end|>' → logprob: -8.342488288879395
    6. ',c' → logprob: -9.217488288879395
    7. ',n' → logprob: -10.467488288879395
    8. ' ' → logprob: -11.842488288879395
    9. ')' → logprob: -12.092488288879395
    10. ',in' → logprob: -12.217488288879395

Token 30: ' c' (ID: 274)
  Prédit: 'c'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'c' → logprob: -0.25193455815315247
    2. ' c' → logprob: -1.50193452835083
    3. '<|end|>' → logprob: -12.251935005187988
    4. ' ' → logprob: -15.626935005187988
    5. '	c' → logprob: -15.626935005187988
    6. ')c' → logprob: -16.001934051513672
    7. '(c' → logprob: -16.001934051513672
    8. '```' → logprob: -17.126934051513672
    9. '_c' → logprob: -17.501934051513672
    10. '<c' → logprob: -17.876934051513672

Token 31: ' in' (ID: 306)
  Prédit: ' in'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' in' → logprob: -0.007642833050340414
    2. 'in' → logprob: -4.88264274597168
    3. '<|end|>' → logprob: -10.38264274597168
    4. 'enumer' → logprob: -13.50764274597168
    5. '<|end|>' → logprob: -13.63264274597168
    6. ')' → logprob: -13.88264274597168
    7. ' ' → logprob: -14.50764274597168
    8. 'n' → logprob: -14.50764274597168
    9. ',' → logprob: -14.75764274597168
    10. '```' → logprob: -15.38264274597168

Token 32: ' enumerate' (ID: 29671)
  Prédit: 'enumer'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'enumer' → logprob: -0.07889209687709808
    2. ' enumerate' → logprob: -2.5788919925689697
    3. 'en' → logprob: -14.20389175415039
    4. '(en' → logprob: -14.32889175415039
    5. 'enum' → logprob: -15.20389175415039
    6. '```' → logprob: -15.20389175415039
    7. '.enumer' → logprob: -15.82889175415039
    8. '<|end|>' → logprob: -16.20389175415039
    9. 'Enumer' → logprob: -16.32889175415039
    10. ' enumer' → logprob: -16.45389175415039

Token 33: '(input' (ID: 10054)
  Prédit: '(input'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(input' → logprob: -0.0803232416510582
    2. '(n' → logprob: -3.2053232192993164
    3. '(s' → logprob: -3.9553232192993164
    4. '(' → logprob: -4.455323219299316
    5. 'input' → logprob: -5.705323219299316
    6. '('' → logprob: -6.830323219299316
    7. '(str' → logprob: -8.080323219299316
    8. 's' → logprob: -8.455323219299316
    9. ')' → logprob: -8.580323219299316
    10. '("' → logprob: -8.830323219299316

Token 34: '())))' (ID: 168342)
  Prédit: '())'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '())' → logprob: -0.6356551647186279
    2. '())))' → logprob: -1.260655164718628
    3. '()' → logprob: -2.260655164718628
    4. '()))' → logprob: -2.510655164718628
    5. '().' → logprob: -7.260655403137207
    6. '()));' → logprob: -8.385655403137207
    7. ')))' → logprob: -8.760655403137207
    8. ')' → logprob: -9.260655403137207
    9. '())))
' → logprob: -9.635655403137207
    10. '()]' → logprob: -10.010655403137207


RÉSUMÉ:
--------------------------------------------------------------------------------
Total des tokens analysés: 32
Tokens correctement prédits (1ère position, stricte): 8
Tokens correctement prédits (1ère position, avec adaptation): 8
Tokens correctement prédits (top 10): 23
Précision stricte (1ère position): 25.00%
Précision adaptée (1ère position): 25.00%
Précision (top 10): 71.88%
================================================================================
