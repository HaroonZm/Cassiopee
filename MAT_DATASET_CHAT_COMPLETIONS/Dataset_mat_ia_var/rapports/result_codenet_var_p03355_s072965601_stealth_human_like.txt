================================================================================
ANALYSE DE PRÉDICTION TOKEN PAR TOKEN (BATCH API)
Date: 2025-06-04 20:19:20
Modèle de tokenisation: gpt-4o-mini
================================================================================

SCRIPT ANALYSÉ:
--------------------------------------------------------------------------------
# Quelques tests, tbh je ne suis pas sûr pourquoi il faut autant de sets, mais bon...  
str_input = input()
k = int(input())

# why the weird order of imports? idk, but just in case
import heapq

seen = set() # substrings qu'on a déjà vus
results = set()
n = len(str_input)
for start in range(n):
    for end in range(start+1, start+k+1): # j'ai dû regarder deux fois, mais bon
        substr = str_input[start:end]
        if substr in seen:
            # déjà vu !
            continue
        seen.add(substr)
        results.add(substr)
        if len(results) > k:
            # ça fait p-e un peu bourrin cette étape, non?
            results.remove(max(results))
# je trie parce qu'on me demande le Kème, j'espère que j'ai rien oublié
lst = list(results)
lst.sort()
# fingers crossed
print(lst[k-1])
--------------------------------------------------------------------------------

RÉSULTATS D'ANALYSE TOKEN PAR TOKEN:
--------------------------------------------------------------------------------
Token 0: '#' (ID: 2)
  → Token d'amorce (pas de prédiction)

Token 1: ' Quelques' (ID: 157752)
  → Token d'amorce (pas de prédiction)

Token 2: ' tests' (ID: 10742)
  → Token d'amorce (pas de prédiction)

Token 3: ',' (ID: 11)
  Prédit: '\n'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '\n' → logprob: -0.24204987287521362
    2. '
' → logprob: -2.6170499324798584
    3. '\' → logprob: -2.8670499324798584
    4. '#' → logprob: -2.9920499324798584
    5. '```' → logprob: -4.117049694061279
    6. '  
' → logprob: -5.242049694061279
    7. ':' → logprob: -5.492049694061279
    8. ' 
' → logprob: -6.117049694061279
    9. '' → logprob: -6.617049694061279
    10. '
' → logprob: -6.867049694061279

Token 4: ' t' (ID: 260)
  Prédit: '```'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '```' → logprob: -1.0924720764160156
    2. '\n' → logprob: -1.2174720764160156
    3. '\' → logprob: -2.3424720764160156
    4. 's' → logprob: -2.4674720764160156
    5. ' ' → logprob: -2.7174720764160156
    6. '#' → logprob: -3.9674720764160156
    7. ':' → logprob: -3.9674720764160156
    8. '.' → logprob: -4.092472076416016
    9. '  
' → logprob: -4.342472076416016
    10. ' 
' → logprob: -4.967472076416016

Token 5: 'bh' (ID: 22631)
  Prédit: 'r'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'r' → logprob: -0.8625325560569763
    2. 'e' → logprob: -1.487532615661621
    3. 'o' → logprob: -2.237532615661621
    4. 's' → logprob: -2.737532615661621
    5. 'a' → logprob: -3.112532615661621
    6. '#' → logprob: -3.362532615661621
    7. 'u' → logprob: -4.362532615661621
    8. '=' → logprob: -4.487532615661621
    9. '.' → logprob: -4.487532615661621
    10. ' ' → logprob: -4.612532615661621

Token 6: ' je' (ID: 1264)
  Prédit: '\n'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '\n' → logprob: -0.6250203847885132
    2. '#' → logprob: -1.1250203847885132
    3. '\' → logprob: -3.0000205039978027
    4. '```' → logprob: -3.5000205039978027
    5. '
' → logprob: -4.125020503997803
    6. ' ' → logprob: -4.250020503997803
    7. '  
' → logprob: -4.500020503997803
    8. ' 
' → logprob: -4.875020503997803
    9. ':' → logprob: -6.500020503997803
    10. '' → logprob: -6.750020503997803

Token 7: ' ne' (ID: 453)
  Prédit: ' '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' ' → logprob: -0.012328336015343666
    2. ' veux' → logprob: -6.137328147888184
    3. ' ```' → logprob: -6.262328147888184
    4. ' n' → logprob: -6.387328147888184
    5. 's' → logprob: -6.512328147888184
    6. ' vais' → logprob: -6.637328147888184
    7. '```' → logprob: -7.637328147888184
    8. ' pense' → logprob: -7.762328147888184
    9. '_' → logprob: -8.012328147888184
    10. ' suis' → logprob: -8.137328147888184

Token 8: ' suis' (ID: 15058)
  Prédit: 's'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 's' → logprob: -0.2547094225883484
    2. 'veux' → logprob: -2.754709482192993
    3. 'p' → logprob: -3.004709482192993
    4. 'vais' → logprob: -3.629709482192993
    5. ' suis' → logprob: -4.004709243774414
    6. ' pense' → logprob: -4.629709243774414
    7. ' peux' → logprob: -4.754709243774414
    8. 'pas' → logprob: -5.004709243774414
    9. 'f' → logprob: -5.129709243774414
    10. ' sais' → logprob: -5.129709243774414

Token 9: ' pas' (ID: 2173)
  Prédit: ' pas'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' pas' → logprob: -0.22961273789405823
    2. ' ' → logprob: -2.1046128273010254
    3. 'pas' → logprob: -2.6046128273010254
    4. 's' → logprob: -4.979612827301025
    5. '_' → logprob: -7.104612827301025
    6. '   ' → logprob: -7.979612827301025
    7. '  ' → logprob: -8.604612350463867
    8. 'p' → logprob: -8.729612350463867
    9. ' jamais' → logprob: -8.729612350463867
    10. ' sûr' → logprob: -9.104612350463867

Token 10: ' sûr' (ID: 46415)
  Prédit: ' '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' ' → logprob: -0.6743355989456177
    2. ' sûr' → logprob: -1.2993355989456177
    3. 's' → logprob: -2.049335479736328
    4. 'sur' → logprob: -3.174335479736328
    5. ' sur' → logprob: -4.424335479736328
    6. 'conv' → logprob: -4.674335479736328
    7. '  ' → logprob: -5.299335479736328
    8. '   ' → logprob: -5.549335479736328
    9. ' convain' → logprob: -5.799335479736328
    10. '#' → logprob: -5.924335479736328

Token 11: ' pourquoi' (ID: 39224)
  Prédit: ':'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ':' → logprob: -0.8038216829299927
    2. '#' → logprob: -1.1788216829299927
    3. ' ' → logprob: -2.678821563720703
    4. '```' → logprob: -3.178821563720703
    5. ',' → logprob: -3.303821563720703
    6. '.' → logprob: -3.428821563720703
    7. '\' → logprob: -3.928821563720703
    8. 's' → logprob: -4.428821563720703
    9. 'd' → logprob: -5.053821563720703
    10. ''' → logprob: -5.178821563720703

Token 12: ' il' (ID: 1793)
  Prédit: '#'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '#' → logprob: -0.6544094681739807
    2. ':' → logprob: -2.154409408569336
    3. '_' → logprob: -2.279409408569336
    4. '```' → logprob: -2.279409408569336
    5. ',' → logprob: -2.654409408569336
    6. '.' → logprob: -3.654409408569336
    7. '\' → logprob: -3.904409408569336
    8. '`' → logprob: -4.529409408569336
    9. ' ' → logprob: -4.654409408569336
    10. 's' → logprob: -5.029409408569336

Token 13: ' faut' (ID: 17821)
  Prédit: 's'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 's' → logprob: -0.14529506862163544
    2. ' n' → logprob: -3.0202951431274414
    3. ' ' → logprob: -3.1452951431274414
    4. 'n' → logprob: -4.395295143127441
    5. ' ' → logprob: -5.270295143127441
    6. ' y' → logprob: -5.395295143127441
    7. ' faut' → logprob: -5.520295143127441
    8. ' s' → logprob: -5.520295143127441
    9. '```' → logprob: -5.770295143127441
    10. '#' → logprob: -6.770295143127441

Token 14: ' autant' (ID: 46683)
  Prédit: '```'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '```' → logprob: -1.5675153732299805
    2. '#' → logprob: -1.9425153732299805
    3. 'les' → logprob: -2.1925153732299805
    4. 'faire' → logprob: -2.5675153732299805
    5. ' que' → logprob: -2.6925153732299805
    6. 's' → logprob: -2.6925153732299805
    7. ' ' → logprob: -3.4425153732299805
    8. 'que' → logprob: -3.4425153732299805
    9. ' les' → logprob: -3.5675153732299805
    10. 'import' → logprob: -3.5675153732299805

Token 15: ' de' (ID: 334)
  Prédit: ' de'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' de' → logprob: -0.4320531487464905
    2. 'de' → logprob: -1.9320530891418457
    3. 's' → logprob: -2.3070530891418457
    4. ' ' → logprob: -3.0570530891418457
    5. '_' → logprob: -4.307053089141846
    6. ' d' → logprob: -4.432053089141846
    7. '```' → logprob: -4.682053089141846
    8. 'd' → logprob: -4.807053089141846
    9. 'es' → logprob: -5.057053089141846
    10. '#' → logprob: -6.432053089141846

Token 16: ' sets' (ID: 11982)
  Prédit: '_'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '_' → logprob: -1.4470638036727905
    2. 'l' → logprob: -1.4470638036727905
    3. ' ' → logprob: -2.07206392288208
    4. 'es' → logprob: -2.69706392288208
    5. '#' → logprob: -2.82206392288208
    6. '\' → logprob: -2.94706392288208
    7. 'esp' → logprob: -3.32206392288208
    8. '\n' → logprob: -3.44706392288208
    9. '```' → logprob: -3.44706392288208
    10. 'd' → logprob: -3.69706392288208

Token 17: ',' (ID: 11)
  Prédit: '_'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_' → logprob: -0.52471524477005
    2. 's' → logprob: -1.1497151851654053
    3. '#' → logprob: -3.5247151851654053
    4. '.' → logprob: -4.274715423583984
    5. ' ' → logprob: -4.274715423583984
    6. '```' → logprob: -4.399715423583984
    7. ',' → logprob: -5.399715423583984
    8. '=' → logprob: -6.024715423583984
    9. ')' → logprob: -6.274715423583984
    10. '\' → logprob: -6.649715423583984

Token 18: ' mais' (ID: 2899)
  Prédit: ' mais'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' mais' → logprob: -0.635723352432251
    2. ' ' → logprob: -1.385723352432251
    3. 's' → logprob: -2.010723352432251
    4. ' but' → logprob: -3.885723352432251
    5. 'mais' → logprob: -3.885723352432251
    6. '```' → logprob: -4.885723114013672
    7. '#' → logprob: -5.385723114013672
    8. ' s' → logprob: -5.635723114013672
    9. ' je' → logprob: -5.760723114013672
    10. 'but' → logprob: -5.885723114013672

Token 19: ' bon' (ID: 4846)
  Prédit: ' c'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' c' → logprob: -0.7344704270362854
    2. '```' → logprob: -1.4844703674316406
    3. ' je' → logprob: -2.2344703674316406
    4. ' ça' → logprob: -2.4844703674316406
    5. ' j' → logprob: -4.234470367431641
    6. 'c' → logprob: -4.359470367431641
    7. 'cela' → logprob: -4.609470367431641
    8. ' les' → logprob: -4.859470367431641
    9. 'je' → logprob: -5.234470367431641
    10. ' ' → logprob: -5.234470367431641

Token 20: '...' (ID: 1008)
  Prédit: 's'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 's' → logprob: -0.9431303143501282
    2. '```' → logprob: -1.1931302547454834
    3. '.' → logprob: -2.5681302547454834
    4. ' ' → logprob: -2.6931302547454834
    5. '_' → logprob: -2.9431302547454834
    6. '#' → logprob: -3.4431302547454834
    7. '\' → logprob: -4.0681304931640625
    8. ':' → logprob: -4.6931304931640625
    9. '`' → logprob: -5.0681304931640625
    10. ',' → logprob: -5.0681304931640625

Token 21: '  
' (ID: 4066)
  Prédit: 's'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 's' → logprob: -0.9113515019416809
    2. ' ' → logprob: -0.9113515019416809
    3. '```' → logprob: -2.786351442337036
    4. '#' → logprob: -3.036351442337036
    5. '_' → logprob: -3.036351442337036
    6. '\' → logprob: -4.786351680755615
    7. '.' → logprob: -5.036351680755615
    8. ',' → logprob: -5.786351680755615
    9. '`' → logprob: -5.786351680755615
    10. 'a' → logprob: -6.411351680755615

Token 22: 'str' (ID: 689)
  Prédit: ' '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' ' → logprob: -1.1177349090576172
    2. '```' → logprob: -1.1177349090576172
    3. 's' → logprob: -1.4927349090576172
    4. '_' → logprob: -3.367734909057617
    5. ' ```' → logprob: -3.992734909057617
    6. '#' → logprob: -4.242734909057617
    7. '`' → logprob: -4.742734909057617
    8. '[' → logprob: -5.242734909057617
    9. ',' → logprob: -5.742734909057617
    10. 'set' → logprob: -5.867734909057617

Token 23: '_input' (ID: 12507)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '(' → logprob: -0.022374002262949944
    2. 's' → logprob: -4.522374153137207
    3. 'ing' → logprob: -5.522374153137207
    4. '_' → logprob: -5.522374153137207
    5. '(s' → logprob: -7.397374153137207
    6. 'a' → logprob: -8.022374153137207
    7. 'i' → logprob: -8.147374153137207
    8. '=' → logprob: -8.522374153137207
    9. '(
' → logprob: -8.647374153137207
    10. 'e' → logprob: -8.647374153137207

Token 24: ' =' (ID: 314)
  Prédit: ' ='
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' =' → logprob: -0.32420825958251953
    2. '=' → logprob: -2.3242082595825195
    3. '[' → logprob: -2.8242082595825195
    4. '_' → logprob: -2.9492082595825195
    5. '(' → logprob: -3.1992082595825195
    6. ')' → logprob: -4.4492082595825195
    7. 's' → logprob: -5.3242082595825195
    8. ',' → logprob: -5.9492082595825195
    9. '[:]' → logprob: -6.3242082595825195
    10. '.' → logprob: -6.4492082595825195

Token 25: ' input' (ID: 3422)
  Prédit: ' "'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' "' → logprob: -0.3401704728603363
    2. '"' → logprob: -1.5901705026626587
    3. ''' → logprob: -4.090170383453369
    4. ' ""' → logprob: -4.090170383453369
    5. ' '' → logprob: -4.340170383453369
    6. '""' → logprob: -5.090170383453369
    7. 'set' → logprob: -5.090170383453369
    8. ' ' → logprob: -5.215170383453369
    9. 'input' → logprob: -5.215170383453369
    10. '"""' → logprob: -5.465170383453369

Token 26: '()
' (ID: 1234)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '(' → logprob: -0.0005246769287623465
    2. '("("' → logprob: -8.125524520874023
    3. '('' → logprob: -9.125524520874023
    4. '("' → logprob: -10.375524520874023
    5. '()' → logprob: -10.625524520874023
    6. '(">' → logprob: -11.000524520874023
    7. '("")' → logprob: -11.250524520874023
    8. '(
' → logprob: -11.375524520874023
    9. '(`' → logprob: -12.375524520874023
    10. '("""' → logprob: -12.375524520874023

Token 27: 'k' (ID: 74)
  Prédit: 's'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 's' → logprob: -1.2227896451950073
    2. '.' → logprob: -1.3477896451950073
    3. '_' → logprob: -1.8477896451950073
    4. '=' → logprob: -2.972789764404297
    5. ' =' → logprob: -3.222789764404297
    6. ' ' → logprob: -3.222789764404297
    7. '_set' → logprob: -3.222789764404297
    8. 'if' → logprob: -3.847789764404297
    9. ')' → logprob: -4.347789764404297
    10. '.strip' → logprob: -4.472789764404297

Token 28: ' =' (ID: 314)
  Prédit: ' ='
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' =' → logprob: -0.08198454976081848
    2. '=' → logprob: -3.581984519958496
    3. '_' → logprob: -3.831984519958496
    4. 'ey' → logprob: -4.206984519958496
    5. 'e' → logprob: -5.331984519958496
    6. ' ' → logprob: -5.331984519958496
    7. 's' → logprob: -6.081984519958496
    8. 'eys' → logprob: -7.706984519958496
    9. 'ernel' → logprob: -7.706984519958496
    10. 'er' → logprob: -8.456984519958496

Token 29: ' int' (ID: 677)
  Prédit: ' int'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' int' → logprob: -0.18930646777153015
    2. 'int' → logprob: -2.0643064975738525
    3. ' ' → logprob: -3.3143064975738525
    4. '0' → logprob: -6.064306259155273
    5. ' len' → logprob: -6.314306259155273
    6. '10' → logprob: -6.939306259155273
    7. '5' → logprob: -7.189306259155273
    8. '3' → logprob: -7.189306259155273
    9. ' str' → logprob: -7.689306259155273
    10. 'str' → logprob: -7.814306259155273

Token 30: '(input' (ID: 10054)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(' → logprob: -0.020694518461823463
    2. '(str' → logprob: -3.8956944942474365
    3. '('' → logprob: -10.020694732666016
    4. '(k' → logprob: -10.270694732666016
    5. '(input' → logprob: -10.395694732666016
    6. ' (' → logprob: -10.895694732666016
    7. ' ' → logprob: -11.895694732666016
    8. '()' → logprob: -12.395694732666016
    9. '(
' → logprob: -12.895694732666016
    10. '(s' → logprob: -13.145694732666016

Token 31: '())

' (ID: 27654)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ')' → logprob: -0.00494969729334116
    2. '(' → logprob: -6.129949569702148
    3. '()' → logprob: -6.254949569702148
    4. '())' → logprob: -7.129949569702148
    5. '))' → logprob: -11.004949569702148
    6. ' )' → logprob: -11.754949569702148
    7. '`)' → logprob: -12.504949569702148
    8. '')' → logprob: -12.754949569702148
    9. ')`' → logprob: -13.129949569702148
    10. '(
' → logprob: -14.004949569702148

Token 32: '#' (ID: 2)
  Prédit: 's'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 's' → logprob: -0.20007243752479553
    2. 'a' → logprob: -3.4500725269317627
    3. '
' → logprob: -3.7000725269317627
    4. 'd' → logprob: -3.9500725269317627
    5. 'result' → logprob: -3.9500725269317627
    6. '[' → logprob: -4.325072288513184
    7. 'def' → logprob: -4.700072288513184
    8. ' ' → logprob: -5.075072288513184
    9. ')' → logprob: -5.075072288513184
    10. 'for' → logprob: -5.200072288513184

Token 33: ' why' (ID: 4436)
  Prédit: 's'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 's' → logprob: -0.300276517868042
    2. ' ' → logprob: -1.800276517868042
    3. ' s' → logprob: -3.425276517868042
    4. 'd' → logprob: -4.300276756286621
    5. 'def' → logprob: -4.550276756286621
    6. '_' → logprob: -4.925276756286621
    7. ' sets' → logprob: -5.425276756286621
    8. 'sets' → logprob: -5.800276756286621
    9. 'a' → logprob: -5.925276756286621
    10. 'result' → logprob: -6.675276756286621

Token 34: ' the' (ID: 290)
  Prédit: ' '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' ' → logprob: -0.8641285300254822
    2. 's' → logprob: -1.114128589630127
    3. '_' → logprob: -2.489128589630127
    4. '#' → logprob: -3.114128589630127
    5. ')' → logprob: -3.239128589630127
    6. 'a' → logprob: -4.614128589630127
    7. 'def' → logprob: -4.614128589630127
    8. 'for' → logprob: -4.614128589630127
    9. '```' → logprob: -4.739128589630127
    10. 'n' → logprob: -5.114128589630127

Token 35: ' weird' (ID: 28783)
  Prédit: 'len'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'len' → logprob: -0.9423472881317139
    2. ' k' → logprob: -2.317347288131714
    3. ' len' → logprob: -2.442347288131714
    4. ' ' → logprob: -2.442347288131714
    5. 's' → logprob: -2.817347288131714
    6. 'n' → logprob: -3.317347288131714
    7. 'r' → logprob: -3.567347288131714
    8. ' n' → logprob: -3.692347288131714
    9. 'str' → logprob: -3.817347288131714
    10. ' code' → logprob: -3.817347288131714

Token 36: ' order' (ID: 2569)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '(' → logprob: -0.4463881552219391
    2. '_' → logprob: -1.0713881254196167
    3. '[' → logprob: -5.821388244628906
    4. '_sets' → logprob: -6.071388244628906
    5. '_set' → logprob: -6.571388244628906
    6. '(
' → logprob: -6.946388244628906
    7. 's' → logprob: -7.071388244628906
    8. '_str' → logprob: -7.071388244628906
    9. '()' → logprob: -7.696388244628906
    10. ' _' → logprob: -7.821388244628906

Token 37: ' of' (ID: 328)
  Prédit: 's'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 's' → logprob: -0.5473843812942505
    2. ')' → logprob: -1.4223843812942505
    3. 'for' → logprob: -2.797384262084961
    4. 'sorted' → logprob: -3.047384262084961
    5. 'tokens' → logprob: -4.297384262084961
    6. 'str' → logprob: -4.547384262084961
    7. ',' → logprob: -5.422384262084961
    8. '#' → logprob: -5.422384262084961
    9. '[' → logprob: -5.422384262084961
    10. 'def' → logprob: -5.797384262084961

Token 38: ' imports' (ID: 32048)
  Prédit: 'indices'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'indices' → logprob: -1.090388298034668
    2. 'str' → logprob: -1.590388298034668
    3. 'sets' → logprob: -2.215388298034668
    4. 'the' → logprob: -2.590388298034668
    5. 'tokens' → logprob: -3.215388298034668
    6. 'for' → logprob: -3.215388298034668
    7. 'elements' → logprob: -3.465388298034668
    8. 'ranges' → logprob: -3.590388298034668
    9. 'characters' → logprob: -4.090388298034668
    10. 'k' → logprob: -4.215388298034668

Token 39: '?' (ID: 30)
  Prédit: '
'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '
' → logprob: -0.17762373387813568
    2. '```' → logprob: -2.427623748779297
    3. 'import' → logprob: -2.677623748779297
    4. '

' → logprob: -6.552623748779297
    5. 'from' → logprob: -6.677623748779297
    6. '\n' → logprob: -7.052623748779297
    7. ' 
' → logprob: -7.052623748779297
    8. '``' → logprob: -7.802623748779297
    9. '  
' → logprob: -7.927623748779297
    10. '?' → logprob: -9.177623748779297

Token 40: ' id' (ID: 1211)
  Prédit: '
'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '
' → logprob: -1.2460488080978394
    2. '```' → logprob: -1.2460488080978394
    3. 'from' → logprob: -1.3710488080978394
    4. 'import' → logprob: -1.9960488080978394
    5. '\n' → logprob: -3.871048927307129
    6. ' from' → logprob: -5.496048927307129
    7. ' 
' → logprob: -6.246048927307129
    8. '

' → logprob: -6.496048927307129
    9. '``' → logprob: -6.746048927307129
    10. '`' → logprob: -6.871048927307129

Token 41: 'k' (ID: 74)
  Prédit: 'e'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'e' → logprob: -0.4128878116607666
    2. 'f' → logprob: -1.6628878116607666
    3. 'é' → logprob: -2.9128878116607666
    4. 'ent' → logprob: -3.4128878116607666
    5. 'ex' → logprob: -3.4128878116607666
    6. 'éal' → logprob: -5.2878875732421875
    7. '=' → logprob: -5.4128875732421875
    8. 'import' → logprob: -5.6628875732421875
    9. 'le' → logprob: -5.6628875732421875
    10. 'ea' → logprob: -6.2878875732421875

Token 42: ',' (ID: 11)
  Prédit: 'import'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'import' → logprob: -0.6262550354003906
    2. '```' → logprob: -1.3762550354003906
    3. '
' → logprob: -2.0012550354003906
    4. 'from' → logprob: -2.8762550354003906
    5. ',' → logprob: -5.001255035400391
    6. '\n' → logprob: -6.001255035400391
    7. 'i' → logprob: -6.126255035400391
    8. '``' → logprob: -6.376255035400391
    9. 'a' → logprob: -6.876255035400391
    10. 'f' → logprob: -6.876255035400391

Token 43: ' but' (ID: 889)
  Prédit: '```'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '```' → logprob: -1.2341947555541992
    2. ' from' → logprob: -1.3591947555541992
    3. 'import' → logprob: -1.4841947555541992
    4. ' import' → logprob: -2.484194755554199
    5. 'from' → logprob: -2.484194755554199
    6. '
' → logprob: -3.484194755554199
    7. '``' → logprob: -4.484194755554199
    8. ' but' → logprob: -4.484194755554199
    9. ' 
' → logprob: -5.609194755554199
    10. ' ```' → logprob: -7.484194755554199

Token 44: ' just' (ID: 1327)
  Prédit: ' from'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' from' → logprob: -0.23112905025482178
    2. 'from' → logprob: -2.1061291694641113
    3. ' import' → logprob: -3.2311291694641113
    4. 'import' → logprob: -3.3561291694641113
    5. '```' → logprob: -5.731129169464111
    6. ' it' → logprob: -6.231129169464111
    7. ' collections' → logprob: -6.481129169464111
    8. ' fro' → logprob: -7.731129169464111
    9. ' set' → logprob: -7.856129169464111
    10. ' itertools' → logprob: -7.981129169464111

Token 45: ' in' (ID: 306)
  Prédit: ' from'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' from' → logprob: -0.6750338077545166
    2. ' import' → logprob: -1.3000338077545166
    3. 'import' → logprob: -2.0500338077545166
    4. 'from' → logprob: -3.0500338077545166
    5. ' a' → logprob: -4.8000335693359375
    6. ' f' → logprob: -5.1750335693359375
    7. ' try' → logprob: -5.3000335693359375
    8. '```' → logprob: -5.8000335693359375
    9. ' to' → logprob: -6.0500335693359375
    10. ' ' → logprob: -6.1750335693359375

Token 46: ' case' (ID: 1890)
  Prédit: 'case'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'case' → logprob: -0.05288249999284744
    2. 'collections' → logprob: -3.302882432937622
    3. 'random' → logprob: -5.677882671356201
    4. 'import' → logprob: -5.802882671356201
    5. ' case' → logprob: -5.802882671356201
    6. 'this' → logprob: -5.802882671356201
    7. 'set' → logprob: -7.302882671356201
    8. 'def' → logprob: -7.552882671356201
    9. 'the' → logprob: -8.552882194519043
    10. 'sets' → logprob: -8.802882194519043

Token 47: '
' (ID: 198)
  Prédit: '```'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '```' → logprob: -0.6511676907539368
    2. 'import' → logprob: -1.276167631149292
    3. '
' → logprob: -2.026167631149292
    4. 'from' → logprob: -3.401167631149292
    5. 'i' → logprob: -4.401167869567871
    6. '\n' → logprob: -5.151167869567871
    7. '``' → logprob: -6.026167869567871
    8. '_' → logprob: -6.026167869567871
    9. 'm' → logprob: -6.151167869567871
    10. ' 
' → logprob: -6.401167869567871

Token 48: 'import' (ID: 561)
  Prédit: 'from'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'from' → logprob: -0.6995901465415955
    2. 'import' → logprob: -1.0745902061462402
    3. '```' → logprob: -1.9495902061462402
    4. '
' → logprob: -4.82459020614624
    5. ' from' → logprob: -5.07459020614624
    6. '``' → logprob: -6.19959020614624
    7. 'a' → logprob: -7.57459020614624
    8. '`' → logprob: -7.69959020614624
    9. 'n' → logprob: -7.69959020614624
    10. 'i' → logprob: -8.074589729309082

Token 49: ' heap' (ID: 37237)
  Prédit: ' sys'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' sys' → logprob: -0.5500222444534302
    2. ' random' → logprob: -1.4250222444534302
    3. ' collections' → logprob: -2.5500221252441406
    4. ' math' → logprob: -2.6750221252441406
    5. ' itertools' → logprob: -3.8000221252441406
    6. ' numpy' → logprob: -4.800022125244141
    7. ' os' → logprob: -6.425022125244141
    8. ' string' → logprob: -7.050022125244141
    9. ' re' → logprob: -7.300022125244141
    10. 'sys' → logprob: -7.550022125244141

Token 50: 'q' (ID: 80)
  Prédit: 'q'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'q' → logprob: -2.3676733690081164e-05
    2. 'queue' → logprob: -11.12502384185791
    3. 'u' → logprob: -13.00002384185791
    4. 'lib' → logprob: -13.50002384185791
    5. 'ify' → logprob: -13.62502384185791
    6. '<|end|>' → logprob: -13.75002384185791
    7. 'que' → logprob: -14.75002384185791
    8. ' ' → logprob: -15.12502384185791
    9. 'dict' → logprob: -15.25002384185791
    10. 'ql' → logprob: -15.25002384185791

Token 51: '

' (ID: 279)
  Prédit: '
'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '
' → logprob: -0.40640079975128174
    2. '.' → logprob: -1.9064007997512817
    3. '<|end|>' → logprob: -2.406400680541992
    4. ',' → logprob: -3.906400680541992
    5. ' ' → logprob: -4.031400680541992
    6. '' → logprob: -4.281400680541992
    7. '

' → logprob: -4.406400680541992
    8. '\n' → logprob: -5.531400680541992
    9. '[' → logprob: -5.656400680541992
    10. '#' → logprob: -5.781400680541992

Token 52: 'seen' (ID: 34177)
  Prédit: '
'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '
' → logprob: -0.1025993674993515
    2. 'tokens' → logprob: -4.352599143981934
    3. 'def' → logprob: -4.477599143981934
    4. 's' → logprob: -4.602599143981934
    5. 'heap' → logprob: -4.852599143981934
    6. 'from' → logprob: -4.852599143981934
    7. ',' → logprob: -4.852599143981934
    8. 'result' → logprob: -4.977599143981934
    9. '' → logprob: -5.227599143981934
    10. '#' → logprob: -5.227599143981934

Token 53: ' =' (ID: 314)
  Prédit: ' ='
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' =' → logprob: -0.08364802598953247
    2. '=' → logprob: -2.8336479663848877
    3. '[' → logprob: -4.333648204803467
    4. ' ' → logprob: -5.333648204803467
    5. ',' → logprob: -7.208648204803467
    6. '.' → logprob: -7.458648204803467
    7. '_' → logprob: -7.458648204803467
    8. '.setdefault' → logprob: -7.708648204803467
    9. ')' → logprob: -8.333647727966309
    10. '=set' → logprob: -8.458647727966309

Token 54: ' set' (ID: 920)
  Prédit: ' set'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' set' → logprob: -0.3905582129955292
    2. 'set' → logprob: -1.1405582427978516
    3. ' {}' → logprob: -6.265558242797852
    4. '{}' → logprob: -6.640558242797852
    5. ' ' → logprob: -8.640558242797852
    6. '=set' → logprob: -9.140558242797852
    7. ' {' → logprob: -9.265558242797852
    8. '(set' → logprob: -10.265558242797852
    9. '{' → logprob: -10.640558242797852
    10. '	set' → logprob: -11.390558242797852

Token 55: '()' (ID: 416)
  Prédit: '()'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '()' → logprob: -0.003674536943435669
    2. '(' → logprob: -5.628674507141113
    3. ' ()' → logprob: -9.878674507141113
    4. '()
' → logprob: -11.378674507141113
    5. '([]' → logprob: -12.753674507141113
    6. '()

' → logprob: -13.003674507141113
    7. '(str' → logprob: -13.753674507141113
    8. '()]' → logprob: -13.878674507141113
    9. '(),' → logprob: -14.003674507141113
    10. '()\' → logprob: -14.253674507141113

Token 56: ' #' (ID: 1069)
  Prédit: ''
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False

Token 57: ' substr' (ID: 29234)
  Prédit: ' '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' ' → logprob: -0.060988832265138626
    2. ')' → logprob: -3.6859889030456543
    3. ' for' → logprob: -4.935988903045654
    4. 'for' → logprob: -5.435988903045654
    5. '  ' → logprob: -5.935988903045654
    6. ' (' → logprob: -6.060988903045654
    7. 'heap' → logprob: -6.435988903045654
    8. ',' → logprob: -6.810988903045654
    9. 's' → logprob: -7.060988903045654
    10. '(' → logprob: -7.060988903045654

Token 58: 'ings' (ID: 963)
  Prédit: 'ings'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'ings' → logprob: -0.06052397936582565
    2. 's' → logprob: -2.9355239868164062
    3. 'ing' → logprob: -5.435523986816406
    4. 'strings' → logprob: -7.560523986816406
    5. 'rings' → logprob: -8.060523986816406
    6. '```' → logprob: -8.435523986816406
    7. 'sets' → logprob: -9.060523986816406
    8. '_strings' → logprob: -10.685523986816406
    9. 'es' → logprob: -11.185523986816406
    10. 'str' → logprob: -11.310523986816406

Token 59: ' qu' (ID: 474)
  Prédit: '_'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '_' → logprob: -0.2635209858417511
    2. ' =' → logprob: -2.7635209560394287
    3. '.' → logprob: -2.8885209560394287
    4. ' ' → logprob: -3.3885209560394287
    5. ')' → logprob: -3.8885209560394287
    6. '<|end|>' → logprob: -4.138521194458008
    7. '=' → logprob: -4.388521194458008
    8. 's' → logprob: -4.513521194458008
    9. '(' → logprob: -4.763521194458008
    10. ',' → logprob: -5.263521194458008

Token 60: ''on' (ID: 25812)
  Prédit: 'e'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'e' → logprob: -0.5406180024147034
    2. 'i' → logprob: -1.0406179428100586
    3. ''on' → logprob: -2.7906179428100586
    4. ''i' → logprob: -7.040617942810059
    5. ''il' → logprob: -7.290617942810059
    6. '```' → logprob: -7.790617942810059
    7. ''e' → logprob: -8.290617942810059
    8. ''' → logprob: -8.540617942810059
    9. ''ont' → logprob: -8.915617942810059
    10. ''''' → logprob: -9.290617942810059

Token 61: ' a' (ID: 261)
  Prédit: ''ve'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ''ve' → logprob: -0.9216413497924805
    2. ' a' → logprob: -1.5466413497924805
    3. '<|end|>' → logprob: -1.7966413497924805
    4. 'a' → logprob: -2.0466413497924805
    5. 'ont' → logprob: -4.0466413497924805
    6. 'have' → logprob: -4.5466413497924805
    7. ' have' → logprob: -4.5466413497924805
    8. '_have' → logprob: -4.9216413497924805
    9. '_a' → logprob: -5.0466413497924805
    10. ''ai' → logprob: -5.1716413497924805

Token 62: ' déjà' (ID: 21229)
  Prédit: 'dé'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'dé' → logprob: -0.31364908814430237
    2. 'vu' → logprob: -2.4386491775512695
    3. ' déjà' → logprob: -3.3136491775512695
    4. ' vues' → logprob: -3.8136491775512695
    5. ' vus' → logprob: -4.1886491775512695
    6. '<|end|>' → logprob: -4.1886491775512695
    7. 'already' → logprob: -4.1886491775512695
    8. ' vu' → logprob: -4.3136491775512695
    9. 'seen' → logprob: -4.5636491775512695
    10. 'vist' → logprob: -4.5636491775512695

Token 63: ' vus' (ID: 148277)
  Prédit: ' vus'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' vus' → logprob: -0.8120760917663574
    2. 'vu' → logprob: -2.1870760917663574
    3. 'vist' → logprob: -2.3120760917663574
    4. 'vus' → logprob: -2.4370760917663574
    5. 'vue' → logprob: -3.0620760917663574
    6. '<|end|>' → logprob: -3.4370760917663574
    7. ' rencontr' → logprob: -3.5620760917663574
    8. 'v' → logprob: -3.5620760917663574
    9. 'seen' → logprob: -3.5620760917663574
    10. ' vues' → logprob: -3.8120760917663574

Token 64: '
' (ID: 198)
  Prédit: '.'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '.' → logprob: -0.7840451002120972
    2. 's' → logprob: -2.2840452194213867
    3. '
' → logprob: -2.4090452194213867
    4. 'result' → logprob: -2.9090452194213867
    5. '<|end|>' → logprob: -3.1590452194213867
    6. 'for' → logprob: -3.4090452194213867
    7. '#' → logprob: -3.4090452194213867
    8. ' ' → logprob: -3.7840452194213867
    9. '\n' → logprob: -4.284045219421387
    10. ',' → logprob: -4.409045219421387

Token 65: 'results' (ID: 16570)
  Prédit: 'result'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'result' → logprob: -0.3970283567905426
    2. '
' → logprob: -1.6470283269882202
    3. '<|end|>' → logprob: -3.6470284461975098
    4. 's' → logprob: -3.8970284461975098
    5. 'heap' → logprob: -4.14702844619751
    6. 'res' → logprob: -4.27202844619751
    7. 'for' → logprob: -5.02202844619751
    8. 'results' → logprob: -5.27202844619751
    9. 'substr' → logprob: -5.52202844619751
    10. ' substr' → logprob: -5.52202844619751

Token 66: ' =' (ID: 314)
  Prédit: ' ='
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' =' → logprob: -0.048601340502500534
    2. '=' → logprob: -3.0486013889312744
    3. ' ' → logprob: -12.048601150512695
    4. '_' → logprob: -12.673601150512695
    5. ',' → logprob: -13.173601150512695
    6. '.' → logprob: -13.423601150512695
    7. 's' → logprob: -15.173601150512695
    8. '=[]' → logprob: -15.298601150512695
    9. '=set' → logprob: -15.423601150512695
    10. ' =
' → logprob: -15.798601150512695

Token 67: ' set' (ID: 920)
  Prédit: '[]'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '[]' → logprob: -0.7533318400382996
    2. ' []' → logprob: -0.8783318400382996
    3. 'set' → logprob: -2.3783318996429443
    4. ' set' → logprob: -3.8783318996429443
    5. ' ' → logprob: -8.878332138061523
    6. '[' → logprob: -9.378332138061523
    7. 'heap' → logprob: -10.503332138061523
    8. '[]
' → logprob: -10.503332138061523
    9. '[]}' → logprob: -11.253332138061523
    10. '{}' → logprob: -11.378332138061523

Token 68: '()
' (ID: 1234)
  Prédit: '()'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '()' → logprob: -0.0008346432005055249
    2. '(' → logprob: -7.1258344650268555
    3. ' ()' → logprob: -11.500834465026855
    4. '()
' → logprob: -12.500834465026855
    5. '()]' → logprob: -12.500834465026855
    6. '([]' → logprob: -12.875834465026855
    7. '()<' → logprob: -13.375834465026855
    8. '()

' → logprob: -13.500834465026855
    9. '()`' → logprob: -13.500834465026855
    10. '()</' → logprob: -13.875834465026855

Token 69: 'n' (ID: 77)
  Prédit: 'for'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'for' → logprob: -0.3436339497566223
    2. '<|end|>' → logprob: -2.2186338901519775
    3. ' for' → logprob: -3.3436338901519775
    4. '
' → logprob: -3.5936338901519775
    5. ' 
' → logprob: -3.5936338901519775
    6. 'def' → logprob: -3.8436338901519775
    7. ' ' → logprob: -3.9686338901519775
    8. '.' → logprob: -4.718634128570557
    9. ')' → logprob: -5.218634128570557
    10. '#' → logprob: -5.218634128570557

Token 70: ' =' (ID: 314)
  Prédit: ' ='
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' =' → logprob: -0.04094414785504341
    2. '=' → logprob: -3.2909440994262695
    3. ' ' → logprob: -5.9159440994262695
    4. ',' → logprob: -9.79094409942627
    5. '=int' → logprob: -10.29094409942627
    6. '<|end|>' → logprob: -10.54094409942627
    7. ' =
' → logprob: -10.91594409942627
    8. '  ' → logprob: -10.91594409942627
    9. ')' → logprob: -11.29094409942627
    10. 'e' → logprob: -12.29094409942627

Token 71: ' len' (ID: 4631)
  Prédit: ' len'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' len' → logprob: -0.1602308303117752
    2. 'len' → logprob: -1.9102308750152588
    3. '(len' → logprob: -12.78523063659668
    4. ' ' → logprob: -13.28523063659668
    5. '=len' → logprob: -13.78523063659668
    6. '0' → logprob: -14.28523063659668
    7. '[len' → logprob: -15.53523063659668
    8. '<len' → logprob: -16.16023063659668
    9. '	len' → logprob: -16.66023063659668
    10. ' ' → logprob: -17.28523063659668

Token 72: '(str' (ID: 7946)
  Prédit: '(str'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(str' → logprob: -0.0024995561689138412
    2. '(' → logprob: -6.002499580383301
    3. '(s' → logprob: -11.3774995803833
    4. 'str' → logprob: -11.5024995803833
    5. ' (' → logprob: -13.3774995803833
    6. '(
' → logprob: -14.8774995803833
    7. '(string' → logprob: -15.7524995803833
    8. '(st' → logprob: -16.252498626708984
    9. 's' → logprob: -16.752498626708984
    10. '(substr' → logprob: -17.127498626708984

Token 73: '_input' (ID: 12507)
  Prédit: '_input'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_input' → logprob: -1.3663626305060461e-05
    2. '_' → logprob: -11.25001335144043
    3. ' _' → logprob: -15.62501335144043
    4. '_str' → logprob: -15.75001335144043
    5. '_in' → logprob: -16.25001335144043
    6. ')' → logprob: -16.50001335144043
    7. '_)' → logprob: -16.50001335144043
    8. '_put' → logprob: -17.50001335144043
    9. '_i' → logprob: -17.75001335144043
    10. '(_' → logprob: -17.87501335144043

Token 74: ')
' (ID: 446)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')' → logprob: -8.113290095934644e-05
    2. ' )' → logprob: -9.500081062316895
    3. ')
' → logprob: -12.875081062316895
    4. '[' → logprob: -14.750081062316895
    5. '))' → logprob: -14.875081062316895
    6. ' ' → logprob: -15.000081062316895
    7. '#' → logprob: -15.250081062316895
    8. ')#' → logprob: -15.250081062316895
    9. '`)' → logprob: -15.500081062316895
    10. '```' → logprob: -15.625081062316895

Token 75: 'for' (ID: 1938)
  Prédit: 'for'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'for' → logprob: -0.0728130117058754
    2. ' for' → logprob: -3.072813034057617
    3. ')' → logprob: -4.072813034057617
    4. ':' → logprob: -5.822813034057617
    5. '=' → logprob: -7.072813034057617
    6. ' ' → logprob: -7.197813034057617
    7. ',' → logprob: -7.447813034057617
    8. '#' → logprob: -7.697813034057617
    9. 'i' → logprob: -7.947813034057617
    10. 'def' → logprob: -8.822813034057617

Token 76: ' start' (ID: 1604)
  Prédit: ' i'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' i' → logprob: -0.005436639301478863
    2. ' ' → logprob: -5.880436420440674
    3. ' _' → logprob: -6.255436420440674
    4. 'i' → logprob: -7.755436420440674
    5. ' length' → logprob: -8.630436897277832
    6. '_' → logprob: -10.755436897277832
    7. ' l' → logprob: -10.755436897277832
    8. ' start' → logprob: -11.005436897277832
    9. ' L' → logprob: -11.505436897277832
    10. ' s' → logprob: -12.380436897277832

Token 77: ' in' (ID: 306)
  Prédit: ' in'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' in' → logprob: -0.10052970051765442
    2. 'in' → logprob: -2.350529670715332
    3. ' ' → logprob: -8.225529670715332
    4. ',' → logprob: -10.850529670715332
    5. 'range' → logprob: -11.725529670715332
    6. 'In' → logprob: -12.725529670715332
    7. '=' → logprob: -12.975529670715332
    8. 'n' → logprob: -13.225529670715332
    9. '```' → logprob: -13.350529670715332
    10. '1' → logprob: -13.350529670715332

Token 78: ' range' (ID: 3352)
  Prédit: ' range'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' range' → logprob: -0.3132624924182892
    2. 'range' → logprob: -1.3132624626159668
    3. '(range' → logprob: -14.938262939453125
    4. '	range' → logprob: -15.188262939453125
    5. ' ' → logprob: -15.813262939453125
    6. '0' → logprob: -17.188262939453125
    7. ')' → logprob: -17.813262939453125
    8. ' xrange' → logprob: -18.188262939453125
    9. '_range' → logprob: -19.313262939453125
    10. '```' → logprob: -19.563262939453125

Token 79: '(n' (ID: 2406)
  Prédit: '(n'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(n' → logprob: -0.0003812217037193477
    2. '(' → logprob: -7.875380992889404
    3. 'n' → logprob: -14.375381469726562
    4. ' (' → logprob: -15.250381469726562
    5. '(len' → logprob: -15.750381469726562
    6. '(k' → logprob: -16.000381469726562
    7. '(
' → logprob: -17.625381469726562
    8. ' n' → logprob: -18.125381469726562
    9. '((' → logprob: -18.250381469726562
    10. '(s' → logprob: -19.125381469726562

Token 80: '):
' (ID: 1883)
  Prédit: '):'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '):' → logprob: -0.003308062208816409
    2. ')' → logprob: -6.503308296203613
    3. ' ):' → logprob: -6.878308296203613
    4. '):
' → logprob: -7.628308296203613
    5. '-' → logprob: -8.503308296203613
    6. ' -' → logprob: -10.378308296203613
    7. ':' → logprob: -11.003308296203613
    8. ' ' → logprob: -11.253308296203613
    9. '-n' → logprob: -12.253308296203613
    10. '+' → logprob: -12.628308296203613

Token 81: '   ' (ID: 271)
  Prédit: ' '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' ' → logprob: -0.3104976713657379
    2. ' for' → logprob: -2.060497760772705
    3. '   ' → logprob: -2.685497760772705
    4. '<|end|>' → logprob: -3.060497760772705
    5. 'for' → logprob: -5.060497760772705
    6. '    ' → logprob: -5.060497760772705
    7. ' 
' → logprob: -5.435497760772705
    8. ':' → logprob: -6.185497760772705
    9. '  ' → logprob: -7.185497760772705
    10. '1' → logprob: -7.310497760772705

Token 82: ' for' (ID: 395)
  Prédit: ' for'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' for' → logprob: -0.38920608162879944
    2. 'for' (adapté à ' for') → logprob: -1.139206051826477
    3. '   ' → logprob: -6.1392059326171875
    4. ' end' → logprob: -9.014205932617188
    5. 'end' → logprob: -10.014205932617188
    6. ' length' → logprob: -13.014205932617188
    7. ' ' → logprob: -13.389205932617188
    8. ' substring' → logprob: -13.889205932617188
    9. '  ' → logprob: -14.389205932617188
    10. '	for' → logprob: -14.514205932617188

Token 83: ' end' (ID: 1268)
  Prédit: ' end'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' end' → logprob: -0.1530754715204239
    2. 'end' → logprob: -2.6530754566192627
    3. ' length' → logprob: -2.7780754566192627
    4. 'length' → logprob: -4.778075695037842
    5. ' ' → logprob: -7.528075695037842
    6. '   ' → logprob: -8.778075218200684
    7. ' size' → logprob: -9.903075218200684
    8. ' start' → logprob: -10.403075218200684
    9. ' range' → logprob: -10.528075218200684
    10. 'start' → logprob: -10.653075218200684

Token 84: ' in' (ID: 306)
  Prédit: ' in'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' in' → logprob: -0.0023423503153026104
    2. 'in' → logprob: -6.252342224121094
    3. '   ' → logprob: -8.627342224121094
    4. '    ' → logprob: -9.252342224121094
    5. ' ' → logprob: -9.752342224121094
    6. 'start' → logprob: -10.252342224121094
    7. ' start' → logprob: -10.752342224121094
    8. '=start' → logprob: -11.627342224121094
    9. '(start' → logprob: -12.752342224121094
    10. '  ' → logprob: -12.877342224121094

Token 85: ' range' (ID: 3352)
  Prédit: '(start'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(start' → logprob: -0.3661145865917206
    2. ' start' → logprob: -2.116114616394043
    3. ' range' → logprob: -2.241114616394043
    4. 'start' → logprob: -2.741114616394043
    5. 'range' → logprob: -4.241114616394043
    6. '[start' → logprob: -8.241114616394043
    7. '(range' → logprob: -8.491114616394043
    8. '   ' → logprob: -8.741114616394043
    9. ' (' → logprob: -9.241114616394043
    10. '(' → logprob: -9.991114616394043

Token 86: '(start' (ID: 20008)
  Prédit: '(start'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(start' → logprob: -0.00019507692195475101
    2. '(' → logprob: -8.625195503234863
    3. '(range' → logprob: -12.000195503234863
    4. '[start' → logprob: -12.625195503234863
    5. 'start' → logprob: -12.750195503234863
    6. ' (' → logprob: -13.625195503234863
    7. '(n' → logprob: -14.625195503234863
    8. ')' → logprob: -14.750195503234863
    9. '(s' → logprob: -15.750195503234863
    10. '=start' → logprob: -15.750195503234863

Token 87: '+' (ID: 10)
  Prédit: '+'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '+' → logprob: -0.10324915498495102
    2. ' +' → logprob: -2.3532490730285645
    3. ',' → logprob: -5.9782490730285645
    4. '   ' → logprob: -8.478249549865723
    5. ' ,' → logprob: -8.728249549865723
    6. '+k' → logprob: -9.728249549865723
    7. '+,' → logprob: -10.228249549865723
    8. '+n' → logprob: -11.103249549865723
    9. ',n' → logprob: -11.478249549865723
    10. ',start' → logprob: -12.353249549865723

Token 88: '1' (ID: 16)
  Prédit: '1'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '1' → logprob: -0.001968246651813388
    2. ' ' → logprob: -6.7519683837890625
    3. 'k' → logprob: -7.2519683837890625
    4. ' k' → logprob: -9.876968383789062
    5. '   ' → logprob: -10.626968383789062
    6. '2' → logprob: -11.501968383789062
    7. '  ' → logprob: -14.001968383789062
    8. ')' → logprob: -14.501968383789062
    9. '    ' → logprob: -15.189468383789062
    10. '```' → logprob: -15.564468383789062

Token 89: ',' (ID: 11)
  Prédit: ','
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ',' → logprob: -0.13907599449157715
    2. ',n' → logprob: -2.139075994491577
    3. ' ,' → logprob: -4.514076232910156
    4. ',k' → logprob: -7.139076232910156
    5. ',len' → logprob: -8.514076232910156
    6. ',end' → logprob: -10.764076232910156
    7. '   ' → logprob: -10.889076232910156
    8. ' ' → logprob: -11.014076232910156
    9. 'k' → logprob: -11.139076232910156
    10. ',length' → logprob: -12.139076232910156

Token 90: ' start' (ID: 1604)
  Prédit: 'n'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'n' → logprob: -0.4640822410583496
    2. ' n' → logprob: -1.4640822410583496
    3. ' min' → logprob: -2.4640822410583496
    4. 'min' → logprob: -2.9640822410583496
    5. '   ' → logprob: -6.46408224105835
    6. 'start' → logprob: -6.96408224105835
    7. ' ' → logprob: -8.089082717895508
    8. ' start' → logprob: -8.339082717895508
    9. '  ' → logprob: -8.964082717895508
    10. '    ' → logprob: -9.464082717895508

Token 91: '+k' (ID: 110434)
  Prédit: '+k'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '+k' → logprob: -0.6041427850723267
    2. '+' → logprob: -1.1041427850723267
    3. ' +' → logprob: -2.104142665863037
    4. ' ' → logprob: -12.354143142700195
    5. '+n' → logprob: -12.479143142700195
    6. '+
' → logprob: -14.479143142700195
    7. 'k' → logprob: -14.729143142700195
    8. '+p' → logprob: -14.854143142700195
    9. '+t' → logprob: -15.104143142700195
    10. '   ' → logprob: -15.104143142700195

Token 92: '+' (ID: 10)
  Prédit: '+'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '+' → logprob: -0.008790772408246994
    2. ' +' → logprob: -4.758790969848633
    3. '):' → logprob: -9.008790969848633
    4. ')' → logprob: -10.758790969848633
    5. '+k' → logprob: -11.633790969848633
    6. ' ' → logprob: -11.758790969848633
    7. '1' → logprob: -11.758790969848633
    8. ' ):' → logprob: -13.758790969848633
    9. '```' → logprob: -13.883790969848633
    10. '   ' → logprob: -13.883790969848633

Token 93: '1' (ID: 16)
  Prédit: '1'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '1' → logprob: -3.2855416066013277e-05
    2. ' ' → logprob: -10.375032424926758
    3. '2' → logprob: -13.750032424926758
    4. '   ' → logprob: -15.625032424926758
    5. '```' → logprob: -16.250032424926758
    6. ')' → logprob: -16.375032424926758
    7. '  ' → logprob: -16.625032424926758
    8. '    ' → logprob: -17.312532424926758
    9. '     ' → logprob: -18.375032424926758
    10. '۱' → logprob: -18.437532424926758

Token 94: '):' (ID: 3127)
  Prédit: '):'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '):' → logprob: -0.0020134560763835907
    2. ' ):' → logprob: -6.752013683319092
    3. ':' → logprob: -8.002013206481934
    4. ')' → logprob: -8.002013206481934
    5. '):
' → logprob: -8.752013206481934
    6. '+' → logprob: -12.627013206481934
    7. ' ' → logprob: -13.002013206481934
    8. ' )' → logprob: -13.252013206481934
    9. ' :' → logprob: -13.627013206481934
    10. ' if' → logprob: -13.627013206481934

Token 95: ' #' (ID: 1069)
  Prédit: ''
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False

Token 96: ' j' (ID: 441)
  Prédit: ' if'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' if' → logprob: -0.0653730109333992
    2. 'if' → logprob: -2.815372943878174
    3. '   ' → logprob: -6.440372943878174
    4. '       ' → logprob: -6.565372943878174
    5. ' ' → logprob: -8.065373420715332
    6. '    ' → logprob: -10.565373420715332
    7. '	if' → logprob: -10.815373420715332
    8. '  ' → logprob: -12.065373420715332
    9. '```' → logprob: -12.315373420715332
    10. 'end' → logprob: -12.815373420715332

Token 97: ''ai' (ID: 12480)
  Prédit: 'end'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'end' → logprob: -1.1391772031784058
    2. '<|end|>' → logprob: -1.7641772031784058
    3. '<=' → logprob: -2.3891773223876953
    4. '<' → logprob: -2.7641773223876953
    5. ' <=' → logprob: -3.1391773223876953
    6. 'n' → logprob: -3.1391773223876953
    7. 'avascript' → logprob: -3.3891773223876953
    8. ' ' → logprob: -3.7641773223876953
    9. 'upyter' → logprob: -3.8891773223876953
    10. '+' → logprob: -4.014177322387695

Token 98: ' dû' (ID: 70715)
  Prédit: ' end'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' end' → logprob: -0.9375214576721191
    2. ' if' → logprob: -1.6875214576721191
    3. 'end' → logprob: -1.8125214576721191
    4. ' n' → logprob: -1.9375214576721191
    5. ' ' → logprob: -2.937521457672119
    6. 'n' → logprob: -3.687521457672119
    7. 'if' → logprob: -4.187521457672119
    8. ' min' → logprob: -4.562521457672119
    9. '<|end|>' → logprob: -5.187521457672119
    10. 'min' → logprob: -6.437521457672119

Token 99: ' regarder' (ID: 73220)
  Prédit: ' if'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' if' → logprob: -0.1449953317642212
    2. 'if' → logprob: -2.2699952125549316
    3. ' ' → logprob: -4.644995212554932
    4. '   ' → logprob: -5.269995212554932
    5. ' min' → logprob: -5.519995212554932
    6. 'n' → logprob: -5.769995212554932
    7. '    ' → logprob: -6.144995212554932
    8. ' continue' → logprob: -6.269995212554932
    9. 'min' → logprob: -6.769995212554932
    10. '  ' → logprob: -6.894995212554932

Token 100: ' deux' (ID: 10301)
  Prédit: ' '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' ' → logprob: -0.5605176687240601
    2. ' if' → logprob: -1.43551766872406
    3. 'if' → logprob: -3.3105177879333496
    4. 'len' → logprob: -3.4355177879333496
    5. ')' → logprob: -3.6855177879333496
    6. ' n' → logprob: -3.8105177879333496
    7. '   ' → logprob: -4.81051778793335
    8. '<len' → logprob: -4.81051778793335
    9. '  ' → logprob: -4.93551778793335
    10. 'n' → logprob: -5.06051778793335

Token 101: ' fois' (ID: 14697)
  Prédit: ' if'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' if' → logprob: -1.0655486583709717
    2. '+' → logprob: -1.5655486583709717
    3. ' ' → logprob: -1.5655486583709717
    4. ')' → logprob: -3.1905486583709717
    5. 'range' → logprob: -3.1905486583709717
    6. ' +' → logprob: -3.4405486583709717
    7. ' range' → logprob: -4.065548896789551
    8. 'if' → logprob: -4.190548896789551
    9. '<|end|>' → logprob: -4.315548896789551
    10. '  ' → logprob: -4.440548896789551

Token 102: ',' (ID: 11)
  Prédit: ' if'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' if' → logprob: -0.11929120123386383
    2. 'if' → logprob: -2.869291305541992
    3. '   ' → logprob: -3.744291305541992
    4. ' n' → logprob: -4.494291305541992
    5. ' ' → logprob: -4.619291305541992
    6. '(n' → logprob: -5.744291305541992
    7. 'n' → logprob: -6.119291305541992
    8. '  ' → logprob: -6.119291305541992
    9. ':' → logprob: -6.744291305541992
    10. '<|end|>' → logprob: -7.119291305541992

Token 103: ' mais' (ID: 2899)
  Prédit: ' if'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' if' → logprob: -0.1710081249475479
    2. 'if' → logprob: -2.0460081100463867
    3. 'end' → logprob: -4.171008110046387
    4. ' end' → logprob: -4.671008110046387
    5. ')' → logprob: -7.171008110046387
    6. '<|end|>' → logprob: -7.296008110046387
    7. ' ' → logprob: -7.421008110046387
    8. '   ' → logprob: -8.171008110046387
    9. ':end' → logprob: -9.171008110046387
    10. ' n' → logprob: -9.296008110046387

Token 104: ' bon' (ID: 4846)
  Prédit: ' if'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' if' → logprob: -0.38965922594070435
    2. 'if' → logprob: -1.2646591663360596
    3. 'end' → logprob: -3.7646591663360596
    4. ' end' → logprob: -4.139659404754639
    5. ' ' → logprob: -7.514659404754639
    6. '   ' → logprob: -8.13965892791748
    7. '<|end|>' → logprob: -9.13965892791748
    8. ' 
' → logprob: -9.51465892791748
    9. '(end' → logprob: -9.76465892791748
    10. '    ' → logprob: -10.63965892791748

Token 105: '
' (ID: 198)
  Prédit: ' if'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' if' → logprob: -0.8781333565711975
    2. '   ' → logprob: -1.2531332969665527
    3. '<|end|>' → logprob: -1.7531332969665527
    4. ' ' → logprob: -2.6281332969665527
    5. ':' → logprob: -3.3781332969665527
    6. '       ' → logprob: -4.878133296966553
    7. 'if' → logprob: -5.753133296966553
    8. '<|end|>' → logprob: -5.878133296966553
    9. '  ' → logprob: -6.378133296966553
    10. ')' → logprob: -6.878133296966553

Token 106: '       ' (ID: 309)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.20383907854557037
    2. ' if' → logprob: -2.203839063644409
    3. '<|end|>' → logprob: -3.453839063644409
    4. ':' → logprob: -3.828839063644409
    5. ' ' → logprob: -4.453839302062988
    6. '       ' → logprob: -5.828839302062988
    7. '<|end|>' → logprob: -6.578839302062988
    8. '  ' → logprob: -6.828839302062988
    9. 'if' → logprob: -6.953839302062988
    10. '
' → logprob: -7.453839302062988

Token 107: ' substr' (ID: 29234)
  Prédit: ' if'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' if' → logprob: -0.0218847393989563
    2. 'if' → logprob: -4.896884918212891
    3. '           ' → logprob: -5.021884918212891
    4. '       ' → logprob: -5.896884918212891
    5. '   ' → logprob: -6.021884918212891
    6. ' ' → logprob: -6.146884918212891
    7. '<|end|>' → logprob: -9.27188491821289
    8. ' 
' → logprob: -10.27188491821289
    9. '            
' → logprob: -10.64688491821289
    10. '  ' → logprob: -11.14688491821289

Token 108: ' =' (ID: 314)
  Prédit: ' ='
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' =' → logprob: -0.07889407873153687
    2. '=' → logprob: -2.5788941383361816
    3. '=str' → logprob: -12.828893661499023
    4. 's' → logprob: -13.953893661499023
    5. ' ' → logprob: -14.703893661499023
    6. ' =
' → logprob: -15.078893661499023
    7. ' ' → logprob: -16.828893661499023
    8. '=

' → logprob: -17.578893661499023
    9. '＝' → logprob: -17.703893661499023
    10. ' str' → logprob: -17.703893661499023

Token 109: ' str' (ID: 989)
  Prédit: ' str'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' str' → logprob: -0.5759412050247192
    2. 'str' → logprob: -0.8259412050247192
    3. 's' → logprob: -14.57594108581543
    4. '	str' → logprob: -14.57594108581543
    5. '   ' → logprob: -15.57594108581543
    6. ' ' → logprob: -15.95094108581543
    7. '_str' → logprob: -15.95094108581543
    8. '(str' → logprob: -15.95094108581543
    9. '```' → logprob: -15.95094108581543
    10. '$str' → logprob: -17.45094108581543

Token 110: '_input' (ID: 12507)
  Prédit: '_input'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_input' → logprob: -1.0280383548888494e-06
    2. 'input' → logprob: -14.375000953674316
    3. 'Input' → logprob: -15.875000953674316
    4. '_INPUT' → logprob: -16.625001907348633
    5. 'substr' → logprob: -17.000001907348633
    6. '_inputs' → logprob: -17.000001907348633
    7. '_output' → logprob: -17.125001907348633
    8. '(input' → logprob: -17.750001907348633
    9. '_in' → logprob: -17.875001907348633
    10. '[start' → logprob: -17.875001907348633

Token 111: '[start' (ID: 62179)
  Prédit: '[start'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '[start' → logprob: -0.002585408743470907
    2. '[' → logprob: -6.002585411071777
    3. '[str' → logprob: -9.877585411071777
    4. ' [' → logprob: -9.877585411071777
    5. '[
' → logprob: -12.752585411071777
    6. '[s' → logprob: -14.377585411071777
    7. 'str' → logprob: -14.377585411071777
    8. ' ' → logprob: -14.627585411071777
    9. '[input' → logprob: -14.752585411071777
    10. 'start' → logprob: -14.877585411071777

Token 112: ':end' (ID: 63990)
  Prédit: ':end'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ':end' → logprob: -0.0004056474717799574
    2. ':' → logprob: -8.125405311584473
    3. ' :' → logprob: -9.125405311584473
    4. '[end' → logprob: -14.875405311584473
    5. 'end' → logprob: -16.00040626525879
    6. ',end' → logprob: -16.25040626525879
    7. ' ' → logprob: -16.37540626525879
    8. '   ' → logprob: -17.00040626525879
    9. '@end' → logprob: -17.75040626525879
    10. '[:' → logprob: -18.00040626525879

Token 113: ']
' (ID: 1592)
  Prédit: ']'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ']' → logprob: -0.11152033507823944
    2. ']
' → logprob: -2.486520290374756
    3. ')' → logprob: -3.986520290374756
    4. ')
' → logprob: -5.736520290374756
    5. '])' → logprob: -8.236520767211914
    6. ')]' → logprob: -9.611520767211914
    7. ']
' → logprob: -9.736520767211914
    8. '       ' → logprob: -9.736520767211914
    9. ' ]' → logprob: -10.236520767211914
    10. ']

' → logprob: -10.861520767211914

Token 114: '       ' (ID: 309)
  Prédit: ''
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False

Token 115: ' if' (ID: 538)
  Prédit: ' if'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' if' → logprob: -0.5304684042930603
    2. 'if' (adapté à ' if') → logprob: -0.9054684042930603
    3. '       ' → logprob: -5.030468463897705
    4. 'results' → logprob: -8.280467987060547
    5. '        
' → logprob: -8.405467987060547
    6. ' results' → logprob: -8.905467987060547
    7. '
' → logprob: -9.280467987060547
    8. '   ' → logprob: -10.780467987060547
    9. '```' → logprob: -11.155467987060547
    10. ' 
' → logprob: -11.530467987060547

Token 116: ' substr' (ID: 29234)
  Prédit: ' substr'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' substr' → logprob: -0.003712315345183015
    2. 'substr' → logprob: -5.878712177276611
    3. ' len' → logprob: -7.128712177276611
    4. '(substr' → logprob: -9.50371265411377
    5. ' ' → logprob: -11.12871265411377
    6. ' substring' → logprob: -11.75371265411377
    7. 'len' → logprob: -12.50371265411377
    8. ' not' → logprob: -13.25371265411377
    9. ' substrates' → logprob: -14.75371265411377
    10. ' str' → logprob: -14.87871265411377

Token 117: ' in' (ID: 306)
  Prédit: ' not'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' not' → logprob: -0.02092604897916317
    2. 'not' → logprob: -4.270925998687744
    3. ' in' → logprob: -5.020925998687744
    4. ' ' → logprob: -9.395926475524902
    5. ')' → logprob: -10.520926475524902
    6. 'in' → logprob: -11.020926475524902
    7. '	not' → logprob: -12.645926475524902
    8. ' no' → logprob: -12.770926475524902
    9. ' )' → logprob: -13.520926475524902
    10. ' and' → logprob: -13.645926475524902

Token 118: ' seen' (ID: 6177)
  Prédit: 'seen'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'seen' → logprob: -0.08900457620620728
    2. ' seen' → logprob: -2.4640045166015625
    3. 'results' → logprob: -10.339004516601562
    4. '
' → logprob: -11.339004516601562
    5. ' results' → logprob: -11.839004516601562
    6. '   ' → logprob: -12.339004516601562
    7. ' ' → logprob: -12.589004516601562
    8. '_seen' → logprob: -12.714004516601562
    9. 'se' → logprob: -14.714004516601562
    10. '
' → logprob: -14.839004516601562

Token 119: ':
' (ID: 734)
  Prédit: ':'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ':' → logprob: -0.014956753700971603
    2. ':
' → logprob: -4.264956951141357
    3. ' continue' → logprob: -8.1399564743042
    4. ' :' → logprob: -8.3899564743042
    5. 'continue' → logprob: -9.5149564743042
    6. ':return' → logprob: -9.8899564743042
    7. '           ' → logprob: -10.2649564743042
    8. '       ' → logprob: -10.7649564743042
    9. '	continue' → logprob: -10.8899564743042
    10. ' :
' → logprob: -10.8899564743042

Token 120: '           ' (ID: 352)
  Prédit: ' continue'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' continue' → logprob: -0.19258055090904236
    2. '           ' → logprob: -1.8175805807113647
    3. 'continue' → logprob: -4.567580699920654
    4. ' continues' → logprob: -6.817580699920654
    5. ' ' → logprob: -7.692580699920654
    6. ':' → logprob: -7.942580699920654
    7. ' continued' → logprob: -9.692580223083496
    8. '            
' → logprob: -9.817580223083496
    9. ' 
' → logprob: -9.942580223083496
    10. '	continue' → logprob: -10.067580223083496

Token 121: ' #' (ID: 1069)
  Prédit: ' continue'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' continue' → logprob: -0.041342854499816895
    2. 'continue' → logprob: -3.7913427352905273
    3. '           ' → logprob: -4.041342735290527
    4. '               ' → logprob: -8.166342735290527
    5. '_continue' → logprob: -11.041342735290527
    6. '	continue' → logprob: -11.166342735290527
    7. ' continu' → logprob: -11.541342735290527
    8. ' continues' → logprob: -11.791342735290527
    9. '   ' → logprob: -11.791342735290527
    10. '```' → logprob: -12.166342735290527

Token 122: ' déjà' (ID: 21229)
  Prédit: ' continue'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' continue' → logprob: -0.018252842128276825
    2. 'continue' → logprob: -4.018252849578857
    3. '           ' → logprob: -9.6432523727417
    4. ' continu' → logprob: -10.5182523727417
    5. '   ' → logprob: -12.8932523727417
    6. '               ' → logprob: -13.5182523727417
    7. ' pass' → logprob: -13.7682523727417
    8. '	continue' → logprob: -13.8932523727417
    9. ' continues' → logprob: -13.8932523727417
    10. '_continue' → logprob: -14.2682523727417

Token 123: ' vu' (ID: 12005)
  Prédit: 'continue'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'continue' → logprob: -0.694891095161438
    2. '           ' → logprob: -1.319891095161438
    3. ' continue' → logprob: -1.569891095161438
    4. '               ' → logprob: -3.6948909759521484
    5. '   ' → logprob: -7.694890975952148
    6. '	continue' → logprob: -9.319890975952148
    7. ' ' → logprob: -9.694890975952148
    8. '       ' → logprob: -10.069890975952148
    9. '_continue' → logprob: -10.069890975952148
    10. 'contin' → logprob: -10.569890975952148

Token 124: ' !
' (ID: 27498)
  Prédit: '           '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '           ' → logprob: -0.3995811343193054
    2. ' continue' → logprob: -1.2745811939239502
    3. 'continue' → logprob: -3.02458119392395
    4. '               ' → logprob: -7.274580955505371
    5. '_continue' → logprob: -9.149580955505371
    6. '	continue' → logprob: -9.274580955505371
    7. ' continu' → logprob: -9.649580955505371
    8. '       ' → logprob: -9.649580955505371
    9. ' continues' → logprob: -10.274580955505371
    10. '   ' → logprob: -10.399580955505371

Token 125: '           ' (ID: 352)
  Prédit: ' continue'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' continue' → logprob: -0.2872847020626068
    2. '           ' → logprob: -1.5372847318649292
    3. 'continue' → logprob: -3.4122846126556396
    4. '               ' → logprob: -6.412284851074219
    5. '   ' → logprob: -10.037284851074219
    6. '       ' → logprob: -10.787284851074219
    7. '	continue' → logprob: -11.162284851074219
    8. ' continu' → logprob: -11.287284851074219
    9. '_continue' → logprob: -11.412284851074219
    10. ' continues' → logprob: -12.162284851074219

Token 126: ' continue' (ID: 4901)
  Prédit: ' continue'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' continue' → logprob: -0.21643118560314178
    2. 'continue' (adapté à ' continue') → logprob: -1.7164311408996582
    3. '           ' → logprob: -4.216431140899658
    4. '               ' → logprob: -9.466431617736816
    5. '   ' → logprob: -10.716431617736816
    6. '	continue' → logprob: -11.091431617736816
    7. ' continu' → logprob: -11.216431617736816
    8. '       ' → logprob: -11.716431617736816
    9. '_continue' → logprob: -12.091431617736816
    10. '```' → logprob: -12.591431617736816

Token 127: '
' (ID: 198)
  Prédit: '       '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '       ' → logprob: -0.14573760330677032
    2. '
' → logprob: -2.270737648010254
    3. '        
' → logprob: -3.770737648010254
    4. '  
' → logprob: -5.895737648010254
    5. '<|end|>' → logprob: -6.020737648010254
    6. ' 
' → logprob: -6.270737648010254
    7. ' seen' → logprob: -7.895737648010254
    8. 'seen' → logprob: -8.020737648010254
    9. '    
' → logprob: -8.270737648010254
    10. 'else' → logprob: -8.270737648010254

Token 128: '       ' (ID: 309)
  Prédit: '
'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '
' → logprob: -0.2672848105430603
    2. '       ' → logprob: -2.017284870147705
    3. '        
' → logprob: -2.767284870147705
    4. ' 
' → logprob: -4.392284870147705
    5. 'seen' → logprob: -4.892284870147705
    6. '  
' → logprob: -5.017284870147705
    7. '
' → logprob: -5.767284870147705
    8. ' seen' → logprob: -6.017284870147705
    9. '            
' → logprob: -6.017284870147705
    10. '    
' → logprob: -6.267284870147705

Token 129: ' seen' (ID: 6177)
  Prédit: ' seen'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' seen' → logprob: -0.7201781272888184
    2. 'seen' (adapté à ' seen') → logprob: -0.9701781272888184
    3. '       ' → logprob: -2.4701781272888184
    4. '        
' → logprob: -3.7201781272888184
    5. '
' → logprob: -4.095178127288818
    6. ' 
' → logprob: -6.095178127288818
    7. '   ' → logprob: -6.220178127288818
    8. '    
' → logprob: -6.470178127288818
    9. '            
' → logprob: -7.095178127288818
    10. '  
' → logprob: -7.720178127288818

Token 130: '.add' (ID: 1950)
  Prédit: '.add'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '.add' → logprob: -0.06197138875722885
    2. '.' → logprob: -2.811971426010132
    3. ' .' → logprob: -13.436971664428711
    4. '.update' → logprob: -14.061971664428711
    5. '.setdefault' → logprob: -14.811971664428711
    6. '.Add' → logprob: -15.061971664428711
    7. 'add' → logprob: -15.311971664428711
    8. ' add' → logprob: -15.686971664428711
    9. '<|end|>' → logprob: -16.31197166442871
    10. '   ' → logprob: -16.56197166442871

Token 131: '(substr' (ID: 148090)
  Prédit: '(substr'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(substr' → logprob: -0.0001242772996192798
    2. '(' → logprob: -9.000123977661133
    3. 'substr' → logprob: -14.375123977661133
    4. ' (' → logprob: -16.000123977661133
    5. ' substr' → logprob: -16.125123977661133
    6. '(sub' → logprob: -16.875123977661133
    7. '(
' → logprob: -18.000123977661133
    8. '(str' → logprob: -18.500123977661133
    9. '(strip' → logprob: -19.500123977661133
    10. '(s' → logprob: -19.750123977661133

Token 132: ')
' (ID: 446)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')' → logprob: -0.0014163076411932707
    2. ')
' → logprob: -6.626416206359863
    3. '       ' → logprob: -10.001416206359863
    4. '<|end|>' → logprob: -10.501416206359863
    5. ' )' → logprob: -11.626416206359863
    6. '<|end|>' → logprob: -12.751416206359863
    7. ')

' → logprob: -13.876416206359863
    8. ')
' → logprob: -14.251416206359863
    9. '
' → logprob: -14.501416206359863
    10. '   ' → logprob: -14.626416206359863

Token 133: '       ' (ID: 309)
  Prédit: '       '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '       ' → logprob: -0.43518608808517456
    2. ' if' → logprob: -1.5601861476898193
    3. ' 
' → logprob: -3.3101861476898193
    4. '<|end|>' → logprob: -3.3101861476898193
    5. '        
' → logprob: -3.4351861476898193
    6. 'if' → logprob: -4.31018590927124
    7. '
' → logprob: -4.56018590927124
    8. '        ' → logprob: -5.68518590927124
    9. ' ' → logprob: -5.68518590927124
    10. '  
' → logprob: -5.81018590927124

Token 134: ' results' (ID: 4376)
  Prédit: 'if'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'if' → logprob: -0.24105563759803772
    2. 'heap' → logprob: -1.7410556077957153
    3. 'results' (adapté à ' results') → logprob: -3.366055727005005
    4. '       ' → logprob: -5.991055488586426
    5. ' if' → logprob: -7.866055488586426
    6. 'for' → logprob: -7.866055488586426
    7. ' heap' → logprob: -8.241055488586426
    8. '   ' → logprob: -8.241055488586426
    9. '#' → logprob: -8.616055488586426
    10. 'result' → logprob: -9.116055488586426

Token 135: '.add' (ID: 1950)
  Prédit: '.add'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '.add' → logprob: -0.0019351851660758257
    2. '.' → logprob: -6.251935005187988
    3. '.update' → logprob: -12.251935005187988
    4. '.setdefault' → logprob: -14.501935005187988
    5. ' .' → logprob: -14.626935005187988
    6. '.append' → logprob: -15.376935005187988
    7. '.=' → logprob: -16.001935958862305
    8. '.Add' → logprob: -16.001935958862305
    9. '.
' → logprob: -16.751935958862305
    10. '.he' → logprob: -16.751935958862305

Token 136: '(substr' (ID: 148090)
  Prédit: '(substr'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(substr' → logprob: -1.8550976164988242e-05
    2. '(' → logprob: -11.625018119812012
    3. 'substr' → logprob: -12.000018119812012
    4. ' (' → logprob: -13.250018119812012
    5. ' substr' → logprob: -14.250018119812012
    6. '((' → logprob: -14.375018119812012
    7. '(len' → logprob: -15.375018119812012
    8. '(sub' → logprob: -16.125019073486328
    9. '(str' → logprob: -16.625019073486328
    10. '(s' → logprob: -17.375019073486328

Token 137: ')
' (ID: 446)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')' → logprob: -5.12127808178775e-05
    2. ')
' → logprob: -10.500051498413086
    3. ' )' → logprob: -10.875051498413086
    4. '       ' → logprob: -13.125051498413086
    5. '   ' → logprob: -14.625051498413086
    6. '))' → logprob: -15.000051498413086
    7. '<|end|>' → logprob: -15.125051498413086
    8. ')return' → logprob: -15.250051498413086
    9. '}' → logprob: -15.875051498413086
    10. '`)' → logprob: -16.125051498413086

Token 138: '       ' (ID: 309)
  Prédit: ''
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False

Token 139: ' if' (ID: 538)
  Prédit: 'if'
  Correct (stricte): False
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'if' (adapté à ' if') → logprob: -0.09889541566371918
    2. ' if' → logprob: -2.973895311355591
    3. '       ' → logprob: -3.848895311355591
    4. 'print' → logprob: -4.84889554977417
    5. 'heap' → logprob: -4.97389554977417
    6. ')' → logprob: -6.22389554977417
    7. 'sorted' → logprob: -6.22389554977417
    8. '        ' → logprob: -7.22389554977417
    9. 'results' → logprob: -7.59889554977417
    10. '#' → logprob: -7.72389554977417

Token 140: ' len' (ID: 4631)
  Prédit: ' len'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' len' → logprob: -0.03812595456838608
    2. 'len' → logprob: -3.288125991821289
    3. ' substr' → logprob: -9.663125991821289
    4. 'substr' → logprob: -11.413125991821289
    5. '(len' → logprob: -11.663125991821289
    6. ' ' → logprob: -14.538125991821289
    7. ' end' → logprob: -15.538125991821289
    8. '   ' → logprob: -16.03812599182129
    9. '	len' → logprob: -16.28812599182129
    10. 'end' → logprob: -16.53812599182129

Token 141: '(results' (ID: 42655)
  Prédit: '(results'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(results' → logprob: -0.006730526220053434
    2. '(substr' → logprob: -5.006730556488037
    3. '(result' → logprob: -11.631730079650879
    4. 'results' → logprob: -13.131730079650879
    5. '(' → logprob: -13.256730079650879
    6. 'substr' → logprob: -14.131730079650879
    7. '(sub' → logprob: -14.506730079650879
    8. ' substr' → logprob: -15.381730079650879
    9. ' results' → logprob: -15.506730079650879
    10. '(res' → logprob: -15.756730079650879

Token 142: ')' (ID: 8)
  Prédit: ')'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')' → logprob: -0.17792679369449615
    2. '==' → logprob: -2.302926778793335
    3. ' ==' → logprob: -3.552926778793335
    4. '>=' → logprob: -4.177927017211914
    5. ')==' → logprob: -5.177927017211914
    6. ' >=' → logprob: -5.427927017211914
    7. ')>=' → logprob: -5.552927017211914
    8. '<' → logprob: -5.802927017211914
    9. '>' → logprob: -7.302927017211914
    10. ' )' → logprob: -8.052927017211914

Token 143: ' >' (ID: 1424)
  Prédit: '>'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '>' → logprob: -1.4093012809753418
    2. '==' → logprob: -1.4093012809753418
    3. '>=' → logprob: -1.4093012809753418
    4. ' ==' → logprob: -2.534301280975342
    5. '<' → logprob: -2.534301280975342
    6. ' >=' → logprob: -2.659301280975342
    7. ' >' → logprob: -3.659301280975342
    8. ' <' → logprob: -4.409301280975342
    9. ')' → logprob: -9.9093017578125
    10. '<size' → logprob: -10.0343017578125

Token 144: ' k' (ID: 372)
  Prédit: 'k'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'k' → logprob: -0.00118368084076792
    2. '100' → logprob: -7.00118350982666
    3. '10' → logprob: -9.25118350982666
    4. '1' → logprob: -9.62618350982666
    5. ' k' → logprob: -9.62618350982666
    6. '0' → logprob: -10.75118350982666
    7. '=k' → logprob: -11.87618350982666
    8. '5' → logprob: -12.25118350982666
    9. '=' → logprob: -12.62618350982666
    10. ' ' → logprob: -13.25118350982666

Token 145: ':
' (ID: 734)
  Prédit: ':'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ':' → logprob: -0.0205990020185709
    2. ':
' → logprob: -3.895598888397217
    3. ':
' → logprob: -11.145599365234375
    4. ':return' → logprob: -11.395599365234375
    5. ' :' → logprob: -12.020599365234375
    6. '       ' → logprob: -12.395599365234375
    7. ':

' → logprob: -12.520599365234375
    8. '   ' → logprob: -12.895599365234375
    9. '.' → logprob: -13.270599365234375
    10. '           ' → logprob: -13.270599365234375

Token 146: '           ' (ID: 352)
  Prédit: '           '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '           ' → logprob: -0.20476911962032318
    2. '   ' → logprob: -1.9547691345214844
    3. '       ' → logprob: -4.079769134521484
    4. ' break' → logprob: -4.579769134521484
    5. ' heap' → logprob: -4.829769134521484
    6. 'heap' → logprob: -5.079769134521484
    7. 'break' → logprob: -6.329769134521484
    8. '               ' → logprob: -9.204769134521484
    9. 'results' → logprob: -9.704769134521484
    10. '	break' → logprob: -10.329769134521484

Token 147: ' #' (ID: 1069)
  Prédit: 'break'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'break' → logprob: -0.13055256009101868
    2. 'results' → logprob: -2.3805525302886963
    3. ' break' → logprob: -4.255552768707275
    4. 'heap' → logprob: -4.255552768707275
    5. ' results' → logprob: -7.630552768707275
    6. '   ' → logprob: -7.630552768707275
    7. ' heap' → logprob: -8.630552291870117
    8. 'import' → logprob: -8.755552291870117
    9. '       ' → logprob: -8.755552291870117
    10. '           ' → logprob: -11.130552291870117

Token 148: ' ça' (ID: 13590)
  Prédit: 'results'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'results' → logprob: -0.6852623224258423
    2. 'break' → logprob: -0.8102623224258423
    3. 'heap' → logprob: -3.1852622032165527
    4. ' break' → logprob: -5.060262203216553
    5. ' results' → logprob: -6.685262203216553
    6. '   ' → logprob: -7.310262203216553
    7. 'import' → logprob: -7.560262203216553
    8. ' heap' → logprob: -7.685262203216553
    9. '#' → logprob: -8.060262680053711
    10. 'result' → logprob: -9.310262680053711

Token 149: ' fait' (ID: 7473)
  Prédit: 'break'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'break' → logprob: -0.17548321187496185
    2. ' break' → logprob: -2.425483226776123
    3. '           ' → logprob: -2.925483226776123
    4. 'pop' → logprob: -5.425483226776123
    5. '.pop' → logprob: -5.925483226776123
    6. '       ' → logprob: -6.050483226776123
    7. '   ' → logprob: -6.300483226776123
    8. '.remove' → logprob: -6.300483226776123
    9. 'heap' → logprob: -6.550483226776123
    10. '_break' → logprob: -6.675483226776123

Token 150: ' p' (ID: 275)
  Prédit: 'break'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'break' → logprob: -0.49046334624290466
    2. 'results' → logprob: -1.615463376045227
    3. ' break' → logprob: -1.740463376045227
    4. '   ' → logprob: -5.8654632568359375
    5. ' results' → logprob: -5.8654632568359375
    6. 'heap' → logprob: -6.3654632568359375
    7. 'len' → logprob: -6.4904632568359375
    8. '#' → logprob: -6.7404632568359375
    9. 'import' → logprob: -7.1154632568359375
    10. ' ' → logprob: -7.8654632568359375

Token 151: '-e' (ID: 7863)
  Prédit: 'r'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'r' → logprob: -0.034537237137556076
    2. 'ro' → logprob: -4.784537315368652
    3. 'lus' → logprob: -5.034537315368652
    4. 'e' → logprob: -5.284537315368652
    5. 'ré' → logprob: -6.284537315368652
    6. 'len' → logprob: -6.284537315368652
    7. 'rim' → logprob: -6.784537315368652
    8. 'break' → logprob: -7.284537315368652
    9. 'rés' → logprob: -7.409537315368652
    10. '#' → logprob: -7.659537315368652

Token 152: ' un' (ID: 537)
  Prédit: 'break'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'break' → logprob: -0.33673882484436035
    2. ' break' → logprob: -1.7117388248443604
    3. 'results' → logprob: -2.3367388248443604
    4. '#' → logprob: -6.336738586425781
    5. 'heap' → logprob: -6.336738586425781
    6. ' results' → logprob: -6.336738586425781
    7. 'pas' → logprob: -7.461738586425781
    8. 'plus' → logprob: -7.836738586425781
    9. 'import' → logprob: -8.336738586425781
    10. '   ' → logprob: -8.461738586425781

Token 153: ' peu' (ID: 9235)
  Prédit: 'break'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'break' → logprob: -0.3324353098869324
    2. 'heap' → logprob: -1.3324353694915771
    3. ' break' → logprob: -4.582435131072998
    4. '
' → logprob: -6.207435131072998
    5. 'diff' → logprob: -6.207435131072998
    6. ' heap' → logprob: -6.832435131072998
    7. 'return' → logprob: -7.207435131072998
    8. 'import' → logprob: -7.832435131072998
    9. 's' → logprob: -8.457435607910156
    10. 'sorted' → logprob: -8.457435607910156

Token 154: ' bour' (ID: 63393)
  Prédit: 'break'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'break' → logprob: -0.19228847324848175
    2. ' break' → logprob: -2.442288398742676
    3. '           ' → logprob: -3.067288398742676
    4. 'results' → logprob: -3.817288398742676
    5. '       ' → logprob: -4.442288398742676
    6. '   ' → logprob: -5.317288398742676
    7. ' results' → logprob: -7.317288398742676
    8. '               ' → logprob: -7.692288398742676
    9. 'heap' → logprob: -7.692288398742676
    10. ' ' → logprob: -8.817288398742676

Token 155: 'rin' (ID: 23910)
  Prédit: 'd'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'd' → logprob: -0.5224377512931824
    2. 'dy' → logprob: -2.397437810897827
    3. 'die' → logprob: -2.772437810897827
    4. 'ding' → logprob: -3.272437810897827
    5. 'rée' → logprob: -3.522437810897827
    6. 'y' → logprob: -3.772437810897827
    7. 'king' → logprob: -3.772437810897827
    8. 'der' → logprob: -4.022437572479248
    9. 'k' → logprob: -4.397437572479248
    10. 'r' → logprob: -4.647437572479248

Token 156: ' cette' (ID: 7696)
  Prédit: '           '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '           ' → logprob: -0.008528760634362698
    2. '       ' → logprob: -5.258528709411621
    3. 'heap' → logprob: -7.133528709411621
    4. '               ' → logprob: -7.258528709411621
    5. 'break' → logprob: -7.633528709411621
    6. '   ' → logprob: -7.758528709411621
    7. ' break' → logprob: -8.258528709411621
    8. ' heap' → logprob: -9.008528709411621
    9. 'results' → logprob: -9.258528709411621
    10. '            
' → logprob: -9.633528709411621

Token 157: ' étape' (ID: 83661)
  Prédit: 'break'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'break' → logprob: -0.5821934938430786
    2. ' break' → logprob: -1.0821934938430786
    3. '
' → logprob: -2.832193374633789
    4. 'heap' → logprob: -4.457193374633789
    5. ' heap' → logprob: -4.832193374633789
    6. '   ' → logprob: -5.207193374633789
    7. 'results' → logprob: -5.332193374633789
    8. ' results' → logprob: -6.332193374633789
    9. '       ' → logprob: -6.332193374633789
    10. 'k' → logprob: -6.457193374633789

Token 158: ',' (ID: 11)
  Prédit: '           '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '           ' → logprob: -0.10544350743293762
    2. '               ' → logprob: -3.6054434776306152
    3. '            
' → logprob: -3.9804434776306152
    4. '.' → logprob: -4.230443477630615
    5. '       ' → logprob: -4.730443477630615
    6. ',' → logprob: -4.855443477630615
    7. '
' → logprob: -5.355443477630615
    8. ':
' → logprob: -6.105443477630615
    9. 'heap' → logprob: -6.355443477630615
    10. '    
' → logprob: -6.480443477630615

Token 159: ' non' (ID: 2893)
  Prédit: ' break'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' break' → logprob: -1.1603825092315674
    2. '   ' → logprob: -1.2853825092315674
    3. '           ' → logprob: -1.6603825092315674
    4. '       ' → logprob: -1.9103825092315674
    5. 'break' → logprob: -2.7853825092315674
    6. 'results' → logprob: -5.410382270812988
    7. ' results' → logprob: -5.535382270812988
    8. '               ' → logprob: -7.160382270812988
    9. '    ' → logprob: -8.410382270812988
    10. '	break' → logprob: -8.535382270812988

Token 160: '?
' (ID: 3901)
  Prédit: '           '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '           ' → logprob: -0.007365609984844923
    2. '               ' → logprob: -5.757365703582764
    3. '       ' → logprob: -6.132365703582764
    4. '   ' → logprob: -7.507365703582764
    5. '            
' → logprob: -8.007365226745605
    6. ' break' → logprob: -8.257365226745605
    7. '            ' → logprob: -8.382365226745605
    8. '
' → logprob: -9.007365226745605
    9. ' but' → logprob: -9.257365226745605
    10. '    ' → logprob: -9.507365226745605

Token 161: '           ' (ID: 352)
  Prédit: '           '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '           ' → logprob: -0.024011807516217232
    2. '   ' → logprob: -4.024011611938477
    3. ' heap' → logprob: -5.774011611938477
    4. ' break' → logprob: -6.524011611938477
    5. '               ' → logprob: -7.649011611938477
    6. 'heap' → logprob: -8.149011611938477
    7. '       ' → logprob: -8.274011611938477
    8. ' results' → logprob: -9.524011611938477
    9. '```' → logprob: -10.024011611938477
    10. '            
' → logprob: -10.899011611938477

Token 162: ' results' (ID: 4376)
  Prédit: 'results'
  Correct (stricte): False
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'results' (adapté à ' results') → logprob: -0.13834910094738007
    2. 'break' → logprob: -2.2633490562438965
    3. 'heap' → logprob: -3.7633490562438965
    4. ' results' → logprob: -6.7633490562438965
    5. ' break' → logprob: -7.8883490562438965
    6. '   ' → logprob: -9.013349533081055
    7. 'import' → logprob: -9.013349533081055
    8. ' heap' → logprob: -9.513349533081055
    9. 'min' → logprob: -10.013349533081055
    10. 'seen' → logprob: -10.763349533081055

Token 163: '.remove' (ID: 7986)
  Prédit: '='
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '=' → logprob: -0.5875988602638245
    2. '.remove' → logprob: -0.9625988602638245
    3. ' =' → logprob: -2.9625988006591797
    4. '.pop' → logprob: -5.08759880065918
    5. '.dis' → logprob: -5.83759880065918
    6. '.' → logprob: -6.83759880065918
    7. 'remove' → logprob: -8.08759880065918
    8. '.=' → logprob: -8.83759880065918
    9. 'heap' → logprob: -10.58759880065918
    10. '-=' → logprob: -10.71259880065918

Token 164: '(max' (ID: 17178)
  Prédit: '(min'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(min' → logprob: -0.006336372345685959
    2. 'min' → logprob: -5.131336212158203
    3. '(max' → logprob: -9.006336212158203
    4. '(' → logprob: -9.256336212158203
    5. '(heap' → logprob: -9.256336212158203
    6. ' min' → logprob: -10.506336212158203
    7. 'heap' → logprob: -10.756336212158203
    8. '(sorted' → logprob: -10.756336212158203
    9. '(next' → logprob: -10.881336212158203
    10. '=min' → logprob: -13.756336212158203

Token 165: '(results' (ID: 42655)
  Prédit: '(results'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(results' → logprob: -9.686778503237292e-05
    2. 'results' → logprob: -9.250097274780273
    3. ')' → logprob: -15.125097274780273
    4. ' results' → logprob: -15.375097274780273
    5. '(' → logprob: -16.375097274780273
    6. '	results' → logprob: -17.000097274780273
    7. '(result' → logprob: -17.250097274780273
    8. ' (' → logprob: -18.375097274780273
    9. 'k' → logprob: -18.500097274780273
    10. '.results' → logprob: -18.625097274780273

Token 166: '))
' (ID: 2210)
  Prédit: '))'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '))' → logprob: -0.0006565583753399551
    2. ')' → logprob: -7.625656604766846
    3. '))
' → logprob: -9.250656127929688
    4. '()))' → logprob: -10.250656127929688
    5. ' ))' → logprob: -11.000656127929688
    6. ')))' → logprob: -11.000656127929688
    7. '       ' → logprob: -14.000656127929688
    8. '))

' → logprob: -14.250656127929688
    9. ')
' → logprob: -14.500656127929688
    10. '   ' → logprob: -15.000656127929688

Token 167: '#' (ID: 2)
  Prédit: 'print'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'print' → logprob: -0.0015303362160921097
    2. ')' → logprob: -7.626530170440674
    3. ' print' → logprob: -8.376530647277832
    4. 'for' → logprob: -8.751530647277832
    5. 'sorted' → logprob: -9.001530647277832
    6. 'results' → logprob: -9.376530647277832
    7. '       ' → logprob: -9.376530647277832
    8. '
' → logprob: -9.376530647277832
    9. '   ' → logprob: -9.626530647277832
    10. 'next' → logprob: -10.376530647277832

Token 168: ' je' (ID: 1264)
  Prédit: 'print'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'print' → logprob: -0.04098626226186752
    2. ')' → logprob: -3.2909862995147705
    3. '<|end|>' → logprob: -6.415986061096191
    4. '#' → logprob: -8.040986061096191
    5. ' print' → logprob: -8.540986061096191
    6. '.' → logprob: -9.290986061096191
    7. '   ' → logprob: -9.665986061096191
    8. ']' → logprob: -9.915986061096191
    9. ').' → logprob: -10.040986061096191
    10. '#print' → logprob: -10.040986061096191

Token 169: ' trie' (ID: 139428)
  Prédit: 'print'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'print' → logprob: -0.15356238186359406
    2. '#' → logprob: -2.528562307357788
    3. ' print' → logprob: -4.153562545776367
    4. 's' → logprob: -4.153562545776367
    5. ' #' → logprob: -4.778562545776367
    6. 'for' → logprob: -5.278562545776367
    7. 'results' → logprob: -5.903562545776367
    8. 'm' → logprob: -6.153562545776367
    9. ' =' → logprob: -6.653562545776367
    10. '
' → logprob: -7.153562545776367

Token 170: ' parce' (ID: 27146)
  Prédit: 'results'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'results' → logprob: -0.044858403503894806
    2. 'result' → logprob: -3.669858455657959
    3. 'sorted' → logprob: -4.169858455657959
    4. 'res' → logprob: -6.544858455657959
    5. ' results' → logprob: -7.294858455657959
    6. '
' → logprob: -7.669858455657959
    7. 'print' → logprob: -9.5448579788208
    8. 'output' → logprob: -9.6698579788208
    9. ' sorted' → logprob: -10.1698579788208
    10. 'for' → logprob: -10.4198579788208

Token 171: ' qu' (ID: 474)
  Prédit: 'results'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'results' → logprob: -0.12699750065803528
    2. ' results' → logprob: -2.876997470855713
    3. 'sorted' → logprob: -3.376997470855713
    4. '#' → logprob: -4.376997470855713
    5. ' sorted' → logprob: -4.501997470855713
    6. 'result' → logprob: -6.251997470855713
    7. ' résultats' → logprob: -7.376997470855713
    8. 'print' → logprob: -7.626997470855713
    9. 'final' → logprob: -8.126997947692871
    10. '_results' → logprob: -8.376997947692871

Token 172: ''on' (ID: 25812)
  Prédit: 'results'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'results' → logprob: -0.11585789173841476
    2. ' results' → logprob: -2.8658578395843506
    3. 'print' → logprob: -3.1158578395843506
    4. 'sorted' → logprob: -5.99085807800293
    5. '#' → logprob: -6.24085807800293
    6. ' sorted' → logprob: -6.99085807800293
    7. ' print' → logprob: -6.99085807800293
    8. 'result' → logprob: -7.11585807800293
    9. 'for' → logprob: -7.74085807800293
    10. ' résultats' → logprob: -8.74085807800293

Token 173: ' me' (ID: 668)
  Prédit: ' veux'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' veux' → logprob: -0.2927216589450836
    2. 'veux' → logprob: -2.042721748352051
    3. 've' → logprob: -3.167721748352051
    4. 'print' → logprob: -3.292721748352051
    5. ' veut' → logprob: -4.417721748352051
    6. 'vais' → logprob: -5.292721748352051
    7. 'want' → logprob: -5.292721748352051
    8. ' voulais' → logprob: -5.292721748352051
    9. '#' → logprob: -5.917721748352051
    10. ' want' → logprob: -6.292721748352051

Token 174: ' demande' (ID: 26737)
  Prédit: 'print'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'print' → logprob: -0.8246055841445923
    2. ' faut' → logprob: -1.4496055841445923
    3. 's' → logprob: -2.9496054649353027
    4. '#' → logprob: -3.3246054649353027
    5. ' manque' → logprob: -3.3246054649353027
    6. 'pl' → logprob: -3.5746054649353027
    7. 'man' → logprob: -3.6996054649353027
    8. 'l' → logprob: -3.9496054649353027
    9. 'r' → logprob: -4.074605464935303
    10. 'sort' → logprob: -4.199605464935303

Token 175: ' le' (ID: 505)
  Prédit: 'results'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'results' → logprob: -0.0840429961681366
    2. 'sorted' → logprob: -2.959043025970459
    3. 'result' → logprob: -3.959043025970459
    4. ' results' → logprob: -5.459043025970459
    5. 'print' → logprob: -5.834043025970459
    6. ' sorted' → logprob: -7.209043025970459
    7. 'for' → logprob: -7.209043025970459
    8. '(sorted' → logprob: -7.834043025970459
    9. '
' → logprob: -8.4590425491333
    10. 'res' → logprob: -9.0840425491333

Token 176: ' K' (ID: 658)
  Prédit: 'sorted'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'sorted' → logprob: -0.3217620849609375
    2. 'k' → logprob: -2.0717620849609375
    3. 'print' → logprob: -2.6967620849609375
    4. 'plus' → logprob: -3.4467620849609375
    5. ' sorted' → logprob: -4.3217620849609375
    6. 's' → logprob: -5.1967620849609375
    7. ' k' → logprob: -5.1967620849609375
    8. ' plus' → logprob: -5.4467620849609375
    9. ' résultat' → logprob: -5.5717620849609375
    10. 'result' → logprob: -5.6967620849609375

Token 177: 'ème' (ID: 9767)
  Prédit: '_sorted'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '_sorted' → logprob: -0.8698410391807556
    2. '_results' → logprob: -1.7448410987854004
    3. 'sorted' → logprob: -1.7448410987854004
    4. 'results' → logprob: -2.3698410987854004
    5. ' =' → logprob: -3.4948410987854004
    6. '_' → logprob: -3.6198410987854004
    7. '_s' → logprob: -4.4948410987854
    8. '_result' → logprob: -4.6198410987854
    9. 's' → logprob: -4.6198410987854
    10. 'result' → logprob: -4.8698410987854

Token 178: ',' (ID: 11)
  Prédit: 'results'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'results' → logprob: -0.5203993320465088
    2. 'result' → logprob: -1.0203993320465088
    3. 'print' → logprob: -3.520399332046509
    4. 'sorted' → logprob: -4.89539909362793
    5. 'answer' → logprob: -6.02039909362793
    6. '
' → logprob: -6.27039909362793
    7. ' results' → logprob: -6.77039909362793
    8. 'k' → logprob: -7.52039909362793
    9. ' result' → logprob: -7.64539909362793
    10. 'res' → logprob: -7.89539909362793

Token 179: ' j' (ID: 441)
  Prédit: 'results'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'results' → logprob: -0.025419168174266815
    2. 'result' → logprob: -4.400419235229492
    3. 'sorted' → logprob: -4.650419235229492
    4. ' results' → logprob: -5.900419235229492
    5. ' sorted' → logprob: -8.900419235229492
    6. '#' → logprob: -9.275419235229492
    7. 'print' → logprob: -9.275419235229492
    8. '
' → logprob: -9.775419235229492
    9. ')' → logprob: -10.025419235229492
    10. 'res' → logprob: -11.150419235229492

Token 180: ''espère' (ID: 116557)
  Prédit: '#'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '#' → logprob: -0.767037034034729
    2. 'e' → logprob: -1.142037034034729
    3. ''ai' → logprob: -2.2670369148254395
    4. 'results' → logprob: -3.6420369148254395
    5. ''' → logprob: -4.0170369148254395
    6. 'a' → logprob: -4.5170369148254395
    7. 'uste' → logprob: -4.7670369148254395
    8. ''espère' → logprob: -5.1420369148254395
    9. ''aime' → logprob: -5.5170369148254395
    10. '=' → logprob: -5.5170369148254395

Token 181: ' que' (ID: 661)
  Prédit: 'results'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'results' → logprob: -0.017829254269599915
    2. ' results' → logprob: -5.017829418182373
    3. 'result' → logprob: -5.267829418182373
    4. '
' → logprob: -5.642829418182373
    5. 'sorted' → logprob: -6.267829418182373
    6. '```' → logprob: -9.392828941345215
    7. '(results' → logprob: -9.767828941345215
    8. ' sorted' → logprob: -9.767828941345215
    9. 'answer' → logprob: -10.267828941345215
    10. 'print' → logprob: -10.267828941345215

Token 182: ' j' (ID: 441)
  Prédit: 'results'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'results' → logprob: -0.03384888917207718
    2. ' results' → logprob: -3.408849000930786
    3. 'sorted' → logprob: -9.658848762512207
    4. 'len' → logprob: -9.783848762512207
    5. '(results' → logprob: -10.533848762512207
    6. ' sorted' → logprob: -10.908848762512207
    7. 'print' → logprob: -11.158848762512207
    8. ' résultats' → logprob: -12.158848762512207
    9. '	results' → logprob: -12.283848762512207
    10. ' len' → logprob: -12.658848762512207

Token 183: ''ai' (ID: 12480)
  Prédit: ''ai'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ''ai' → logprob: -0.03596055507659912
    2. 'e' → logprob: -3.7859606742858887
    3. 'ai' → logprob: -4.910960674285889
    4. ''arrive' → logprob: -6.785960674285889
    5. ''aurais' → logprob: -7.535960674285889
    6. ''aime' → logprob: -7.660960674285889
    7. ' ai' → logprob: -8.03596019744873
    8. ''aur' → logprob: -8.16096019744873
    9. '’ai' → logprob: -8.28596019744873
    10. ''avais' → logprob: -8.28596019744873

Token 184: ' rien' (ID: 23082)
  Prédit: 'bien'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'bien' → logprob: -0.6354286670684814
    2. ' bien' → logprob: -1.0104286670684814
    3. 'correct' → logprob: -3.0104286670684814
    4. ' correct' → logprob: -4.010428428649902
    5. 'pas' → logprob: -4.135428428649902
    6. 'sur' → logprob: -5.385428428649902
    7. 'not' → logprob: -5.510428428649902
    8. ' pas' → logprob: -6.135428428649902
    9. 'right' → logprob: -6.510428428649902
    10. 'bon' → logprob: -6.760428428649902

Token 185: ' oublié' (ID: 151945)
  Prédit: '.sort'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '.sort' → logprob: -0.04519923776388168
    2. '#' → logprob: -3.670199155807495
    3. 'sorted' → logprob: -4.920199394226074
    4. '.split' → logprob: -5.795199394226074
    5. 'sort' → logprob: -6.295199394226074
    6. '.strip' → logprob: -6.420199394226074
    7. '_sorted' → logprob: -6.795199394226074
    8. 'import' → logprob: -7.045199394226074
    9. '.sorted' → logprob: -7.545199394226074
    10. 'print' → logprob: -8.045199394226074

Token 186: '
' (ID: 198)
  Prédit: 'results'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'results' → logprob: -0.18391774594783783
    2. '
' → logprob: -1.808917760848999
    3. 'print' → logprob: -6.05891752243042
    4. 'result' → logprob: -6.93391752243042
    5. 'sorted' → logprob: -7.93391752243042
    6. ' results' → logprob: -8.308917999267578
    7. '(results' → logprob: -9.433917999267578
    8. '  
' → logprob: -10.183917999267578
    9. '
' → logprob: -10.433917999267578
    10. '```' → logprob: -10.683917999267578

Token 187: 'lst' (ID: 65430)
  Prédit: 'results'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'results' → logprob: -0.05154997482895851
    2. 'sorted' → logprob: -3.9265499114990234
    3. 'result' → logprob: -4.051549911499023
    4. 'print' → logprob: -4.801549911499023
    5. ' results' → logprob: -5.676549911499023
    6. '
' → logprob: -7.676549911499023
    7. ' sorted' → logprob: -8.051549911499023
    8. 'res' → logprob: -8.426549911499023
    9. 'output' → logprob: -8.676549911499023
    10. 'answer' → logprob: -9.051549911499023

Token 188: ' =' (ID: 314)
  Prédit: ' ='
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' =' → logprob: -0.1041853055357933
    2. '=' → logprob: -2.3541853427886963
    3. '_results' → logprob: -5.729185104370117
    4. '(results' → logprob: -7.979185104370117
    5. '_' → logprob: -8.729185104370117
    6. 'results' → logprob: -8.854185104370117
    7. '(sorted' → logprob: -10.604185104370117
    8. '_sorted' → logprob: -11.104185104370117
    9. '_=' → logprob: -11.729185104370117
    10. 's' → logprob: -12.354185104370117

Token 189: ' list' (ID: 1562)
  Prédit: 'sorted'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'sorted' → logprob: -2.2246291337069124e-05
    2. ' sorted' → logprob: -10.750021934509277
    3. '(sorted' → logprob: -14.250021934509277
    4. 'list' → logprob: -16.250022888183594
    5. '.sorted' → logprob: -19.875022888183594
    6. '   ' → logprob: -20.125022888183594
    7. 'Sorted' → logprob: -20.625022888183594
    8. 'sort' → logprob: -21.625022888183594
    9. 's' → logprob: -22.000022888183594
    10. '_sorted' → logprob: -22.125022888183594

Token 190: '(results' (ID: 42655)
  Prédit: '(results'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(results' → logprob: -1.700132997939363e-05
    2. '(sorted' → logprob: -11.000017166137695
    3. 'results' → logprob: -15.375017166137695
    4. '(' → logprob: -17.625017166137695
    5. '(result' → logprob: -18.625017166137695
    6. ' (' → logprob: -19.250017166137695
    7. ' results' → logprob: -20.250017166137695
    8. '	results' → logprob: -20.250017166137695
    9. '(resources' → logprob: -20.625017166137695
    10. '(sort' → logprob: -20.625017166137695

Token 191: ')
' (ID: 446)
  Prédit: ')
'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')
' → logprob: -0.008654872886836529
    2. ')' → logprob: -4.758655071258545
    3. ')
' → logprob: -10.258654594421387
    4. '())
' → logprob: -13.008654594421387
    5. ' )
' → logprob: -13.008654594421387
    6. ')

' → logprob: -14.508654594421387
    7. '()
' → logprob: -15.633654594421387
    8. '))
' → logprob: -17.008655548095703
    9. '.sort' → logprob: -17.633655548095703
    10. '()' → logprob: -17.758655548095703

Token 192: 'lst' (ID: 65430)
  Prédit: 'lst'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'lst' → logprob: -0.00031699295504949987
    2. '.sort' → logprob: -8.375316619873047
    3. ' lst' → logprob: -10.250316619873047
    4. '(lst' → logprob: -11.000316619873047
    5. 'sort' → logprob: -11.500316619873047
    6. '
' → logprob: -11.625316619873047
    7. '_lst' → logprob: -12.000316619873047
    8. 'sorted' → logprob: -13.500316619873047
    9. '```' → logprob: -13.750316619873047
    10. '.lst' → logprob: -13.750316619873047

Token 193: '.sort' (ID: 19551)
  Prédit: '.sort'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '.sort' → logprob: -0.016113195568323135
    2. '.' → logprob: -4.14111328125
    3. 'sort' → logprob: -9.51611328125
    4. '.
' → logprob: -13.26611328125
    5. ').' → logprob: -14.01611328125
    6. '<|end|>' → logprob: -14.76611328125
    7. '().' → logprob: -15.01611328125
    8. '.Sort' → logprob: -15.14111328125
    9. '(sort' → logprob: -15.64111328125
    10. '.sorted' → logprob: -15.76611328125

Token 194: '()
' (ID: 1234)
  Prédit: '()
'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '()
' → logprob: -0.4905799627304077
    2. '()' → logprob: -1.2405799627304077
    3. 'print' → logprob: -2.6155800819396973
    4. '[' → logprob: -4.740580081939697
    5. '
' → logprob: -5.240580081939697
    6. '[
' → logprob: -5.490580081939697
    7. '(
' → logprob: -5.865580081939697
    8. '(' → logprob: -6.490580081939697
    9. '<|end|>' → logprob: -6.615580081939697
    10. '[]
' → logprob: -7.365580081939697

Token 195: '#' (ID: 2)
  Prédit: 'print'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'print' → logprob: -6.253713218029588e-05
    2. 'if' → logprob: -10.625062942504883
    3. ' print' → logprob: -11.250062942504883
    4. '#' → logprob: -11.625062942504883
    5. '```' → logprob: -12.125062942504883
    6. '#print' → logprob: -13.000062942504883
    7. '<|end|>' → logprob: -13.500062942504883
    8. 'pr' → logprob: -13.625062942504883
    9. 'return' → logprob: -13.750062942504883
    10. '
' → logprob: -13.750062942504883

Token 196: ' fingers' (ID: 32401)
  Prédit: 'print'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'print' → logprob: -0.0001431114797014743
    2. ' print' → logprob: -8.875143051147461
    3. 'if' → logprob: -13.500143051147461
    4. 'k' → logprob: -14.750143051147461
    5. 'for' → logprob: -15.125143051147461
    6. '#print' → logprob: -15.375143051147461
    7. 'pr' → logprob: -15.500143051147461
    8. 'prin' → logprob: -15.625143051147461
    9. '#' → logprob: -16.00014305114746
    10. 'result' → logprob: -16.00014305114746

Token 197: ' crossed' (ID: 47928)
  Prédit: 'print'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'print' → logprob: -0.0037522208876907825
    2. '_' → logprob: -6.5037522315979
    3. ' =' → logprob: -6.8787522315979
    4. '=' → logprob: -7.7537522315979
    5. 'output' → logprob: -8.878751754760742
    6. '_output' → logprob: -9.003751754760742
    7. '_print' → logprob: -9.003751754760742
    8. ' print' → logprob: -9.253751754760742
    9. '[' → logprob: -9.253751754760742
    10. 'for' → logprob: -10.003751754760742

Token 198: '
' (ID: 198)
  Prédit: 'print'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'print' → logprob: -0.0001899511698866263
    2. '
' → logprob: -9.250189781188965
    3. ' print' → logprob: -9.625189781188965
    4. '<|end|>' → logprob: -10.625189781188965
    5. '#print' → logprob: -13.875189781188965
    6. '#' → logprob: -14.250189781188965
    7. '  
' → logprob: -14.875189781188965
    8. '```' → logprob: -15.000189781188965
    9. '
' → logprob: -15.750189781188965
    10. ')
' → logprob: -15.750189781188965

Token 199: 'print' (ID: 1598)
  Prédit: 'print'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'print' → logprob: -8.061054359131958e-06
    2. '
' → logprob: -12.125007629394531
    3. ' print' → logprob: -13.000007629394531
    4. '```' → logprob: -15.250007629394531
    5. '#print' → logprob: -18.12500762939453
    6. '    
' → logprob: -18.25000762939453
    7. '<|end|>' → logprob: -18.37500762939453
    8. '
' → logprob: -19.12500762939453
    9. '#' → logprob: -19.12500762939453
    10. 'if' → logprob: -19.62500762939453

Token 200: '(lst' (ID: 95688)
  Prédit: '(lst'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(lst' → logprob: -0.0019633667543530464
    2. '(' → logprob: -6.251963138580322
    3. 'lst' → logprob: -10.87696361541748
    4. '(l' → logprob: -11.75196361541748
    5. '(ls' → logprob: -12.12696361541748
    6. ' lst' → logprob: -13.25196361541748
    7. ' (' → logprob: -15.25196361541748
    8. '('' → logprob: -16.126962661743164
    9. '(chr' → logprob: -16.501962661743164
    10. '(list' → logprob: -16.626962661743164

Token 201: '[k' (ID: 14298)
  Prédit: '[k'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '[k' → logprob: -7.076218025758862e-05
    2. '[' → logprob: -9.625070571899414
    3. ')[' → logprob: -13.125070571899414
    4. ')' → logprob: -14.125070571899414
    5. '[K' → logprob: -14.125070571899414
    6. '[key' → logprob: -14.500070571899414
    7. ' [' → logprob: -15.375070571899414
    8. '[
' → logprob: -16.125070571899414
    9. '[min' → logprob: -16.500070571899414
    10. '[index' → logprob: -16.625070571899414

Token 202: '-' (ID: 12)
  Prédit: '-'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '-' → logprob: -0.0005703099304810166
    2. ' -' → logprob: -7.875570297241211
    3. '])' → logprob: -8.625570297241211
    4. '-k' → logprob: -12.250570297241211
    5. ']' → logprob: -13.000570297241211
    6. '[k' → logprob: -13.250570297241211
    7. '[' → logprob: -14.250570297241211
    8. ']-' → logprob: -15.250570297241211
    9. '-
' → logprob: -15.250570297241211
    10. '][' → logprob: -16.00057029724121

Token 203: '1' (ID: 16)
  Prédit: '1'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '1' → logprob: -3.8889261304575484e-06
    2. '])' → logprob: -13.125003814697266
    3. ' ' → logprob: -13.375003814697266
    4. ')' → logprob: -15.875003814697266
    5. ']' → logprob: -16.500003814697266
    6. 'k' → logprob: -18.000003814697266
    7. '  ' → logprob: -19.500003814697266
    8. '2' → logprob: -20.375003814697266
    9. '0' → logprob: -20.625003814697266
    10. '```' → logprob: -20.875003814697266

Token 204: '])' (ID: 4636)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')' → logprob: -0.0620131678879261
    2. '])' → logprob: -2.8120131492614746
    3. ']' → logprob: -10.312013626098633
    4. '))' → logprob: -11.937013626098633
    5. ')]' → logprob: -13.062013626098633
    6. ' )' → logprob: -13.812013626098633
    7. '})' → logprob: -13.937013626098633
    8. ')])' → logprob: -14.312013626098633
    9. '）' → logprob: -14.562013626098633
    10. ''])' → logprob: -15.562013626098633


RÉSUMÉ:
--------------------------------------------------------------------------------
Total des tokens analysés: 202
Tokens correctement prédits (1ère position, stricte): 64
Tokens correctement prédits (1ère position, avec adaptation): 66
Tokens correctement prédits (top 10): 115
Précision stricte (1ère position): 31.68%
Précision adaptée (1ère position): 32.67%
Précision (top 10): 56.93%
================================================================================
