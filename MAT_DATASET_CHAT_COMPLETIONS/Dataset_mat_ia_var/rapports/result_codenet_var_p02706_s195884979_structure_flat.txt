================================================================================
ANALYSE DE PRÉDICTION TOKEN PAR TOKEN (BATCH API)
Date: 2025-06-04 19:17:24
Modèle de tokenisation: gpt-4o-mini
================================================================================

SCRIPT ANALYSÉ:
--------------------------------------------------------------------------------
N, M = map(int, input().split())
A = list(map(int, input().split()))
ans = N - sum(A)
if ans < 0:
    ans = -1
print(ans)
--------------------------------------------------------------------------------

RÉSULTATS D'ANALYSE TOKEN PAR TOKEN:
--------------------------------------------------------------------------------
Token 0: 'N' (ID: 45)
  → Token d'amorce (pas de prédiction)

Token 1: ',' (ID: 11)
  → Token d'amorce (pas de prédiction)

Token 2: ' M' (ID: 391)
  → Token d'amorce (pas de prédiction)

Token 3: ' =' (ID: 314)
  Prédit: '='
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '=' → logprob: -0.2909020483493805
    2. ',' → logprob: -1.540902018547058
    3. ' =' → logprob: -3.2909021377563477
    4. '```' → logprob: -8.415902137756348
    5. ';' → logprob: -8.790902137756348
    6. ')' → logprob: -8.790902137756348
    7. '.' → logprob: -9.290902137756348
    8. '[' → logprob: -9.790902137756348
    9. ' ,' → logprob: -9.790902137756348
    10. ''' → logprob: -10.040902137756348

Token 4: ' map' (ID: 4014)
  Prédit: ' map'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' map' → logprob: -0.25426819920539856
    2. 'map' → logprob: -2.379268169403076
    3. ' ' → logprob: -2.879268169403076
    4. ' input' → logprob: -3.379268169403076
    5. '10' → logprob: -3.879268169403076
    6. 'input' → logprob: -4.254268169403076
    7. '0' → logprob: -6.129268169403076
    8. ' int' → logprob: -6.504268169403076
    9. ' list' → logprob: -7.254268169403076
    10. 'int' → logprob: -7.379268169403076

Token 5: '(int' (ID: 2742)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(' → logprob: -0.006061517167836428
    2. '(int' → logprob: -6.256061553955078
    3. '(lambda' → logprob: -6.506061553955078
    4. '(str' → logprob: -6.881061553955078
    5. '<|end|>' → logprob: -7.881061553955078
    6. '(user' → logprob: -8.381061553955078
    7. '(input' → logprob: -8.506061553955078
    8. '```' → logprob: -9.006061553955078
    9. '(len' → logprob: -9.381061553955078
    10. ')' → logprob: -9.881061553955078

Token 6: ',' (ID: 11)
  Prédit: '(input'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '(input' → logprob: -0.5180054903030396
    2. '(' → logprob: -1.5180054903030396
    3. ')' → logprob: -1.7680054903030396
    4. '(user' → logprob: -5.01800537109375
    5. '```' → logprob: -6.26800537109375
    6. '(str' → logprob: -7.26800537109375
    7. ')(' → logprob: -7.26800537109375
    8. '(int' → logprob: -7.64300537109375
    9. '`)' → logprob: -7.76800537109375
    10. 'input' → logprob: -7.76800537109375

Token 7: ' input' (ID: 3422)
  Prédit: 'input'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'input' → logprob: -0.06198427081108093
    2. ' input' → logprob: -2.8119843006134033
    3. '(input' → logprob: -11.061984062194824
    4. ',input' → logprob: -14.561984062194824
    5. ')' → logprob: -15.311984062194824
    6. '=input' → logprob: -16.68698501586914
    7. '```' → logprob: -16.81198501586914
    8. '<input' → logprob: -17.31198501586914
    9. '	input' → logprob: -17.43698501586914
    10. '[input' → logprob: -17.68698501586914

Token 8: '().' (ID: 1454)
  Prédit: '())'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '())' → logprob: -0.41789960861206055
    2. '()' → logprob: -1.1678996086120605
    3. ')' → logprob: -4.7928996086120605
    4. '().' → logprob: -4.9178996086120605
    5. '(' → logprob: -5.2928996086120605
    6. '('' → logprob: -5.5428996086120605
    7. '());' → logprob: -6.6678996086120605
    8. '`()' → logprob: -7.0428996086120605
    9. '(""))' → logprob: -7.4178996086120605
    10. '()))' → logprob: -7.4178996086120605

Token 9: 'split' (ID: 13627)
  Prédit: 'split'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'split' → logprob: -0.0019795489497482777
    2. 'strip' → logprob: -6.251979351043701
    3. ')' → logprob: -10.75197982788086
    4. 'rstrip' → logprob: -11.12697982788086
    5. 'read' → logprob: -11.50197982788086
    6. ' split' → logprob: -12.50197982788086
    7. 'spl' → logprob: -14.87697982788086
    8. '(split' → logprob: -15.62697982788086
    9. 'startswith' → logprob: -15.75197982788086
    10. 'replace' → logprob: -16.00197982788086

Token 10: '())
' (ID: 4574)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ')' → logprob: -0.008848796598613262
    2. '())' → logprob: -5.008848667144775
    3. '))' → logprob: -6.383848667144775
    4. '()' → logprob: -8.383849143981934
    5. '`)' → logprob: -8.883849143981934
    6. '(' → logprob: -10.008849143981934
    7. '()))' → logprob: -12.133849143981934
    8. '')' → logprob: -12.383849143981934
    9. ')`' → logprob: -12.508849143981934
    10. '>)' → logprob: -13.008849143981934

Token 11: 'A' (ID: 32)
  Prédit: '\n'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '\n' → logprob: -0.9429158568382263
    2. 'a' → logprob: -1.817915916442871
    3. '#' → logprob: -2.067915916442871
    4. 'for' → logprob: -2.317915916442871
    5. '`' → logprob: -3.067915916442871
    6. '```' → logprob: -3.317915916442871
    7. ' ' → logprob: -3.817915916442871
    8. '\' → logprob: -3.817915916442871
    9. 'x' → logprob: -4.442915916442871
    10. ''' → logprob: -4.567915916442871

Token 12: ' =' (ID: 314)
  Prédit: '['
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '[' → logprob: -0.0027406851295381784
    2. '_' → logprob: -7.252740859985352
    3. '.' → logprob: -7.502740859985352
    4. '[A' → logprob: -7.752740859985352
    5. '[]' → logprob: -7.752740859985352
    6. '[i' → logprob: -8.627740859985352
    7. '[:]' → logprob: -9.627740859985352
    8. '=' → logprob: -9.752740859985352
    9. '\[' → logprob: -9.752740859985352
    10. 'A' → logprob: -9.877740859985352

Token 13: ' list' (ID: 1562)
  Prédit: ' list'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' list' → logprob: -0.44794660806655884
    2. 'list' → logprob: -1.072946548461914
    3. ' [' → logprob: -4.572946548461914
    4. '[' → logprob: -5.447946548461914
    5. ' []' → logprob: -5.947946548461914
    6. '[]' → logprob: -6.572946548461914
    7. '[list' → logprob: -8.322946548461914
    8. 'input' → logprob: -10.072946548461914
    9. 'map' → logprob: -10.322946548461914
    10. ' map' → logprob: -10.322946548461914

Token 14: '(map' (ID: 16946)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '(' → logprob: -0.00040576665196567774
    2. '(range' → logprob: -8.625405311584473
    3. '(
' → logprob: -9.875405311584473
    4. '(open' → logprob: -10.375405311584473
    5. '(input' → logprob: -11.250405311584473
    6. '(A' → logprob: -11.375405311584473
    7. '(

' → logprob: -11.375405311584473
    8. '("("' → logprob: -11.375405311584473
    9. '```' → logprob: -11.500405311584473
    10. '(`' → logprob: -12.125405311584473

Token 15: '(int' (ID: 2742)
  Prédit: '(int'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(int' → logprob: -0.18070687353610992
    2. '(' → logprob: -1.8057068586349487
    3. '(str' → logprob: -7.180706977844238
    4. '(input' → logprob: -9.180706977844238
    5. '(eval' → logprob: -11.305706977844238
    6. '(
' → logprob: -11.680706977844238
    7. '[int' → logprob: -11.805706977844238
    8. '<int' → logprob: -11.805706977844238
    9. '(float' → logprob: -11.805706977844238
    10. '(lambda' → logprob: -12.055706977844238

Token 16: ',' (ID: 11)
  Prédit: ','
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ',' → logprob: -0.710762083530426
    2. '(input' → logprob: -1.3357620239257812
    3. ',input' → logprob: -1.5857620239257812
    4. '(' → logprob: -3.2107620239257812
    5. ' ,' → logprob: -8.335762023925781
    6. '(int' → logprob: -9.460762023925781
    7. ',int' → logprob: -9.585762023925781
    8. '(),' → logprob: -9.710762023925781
    9. '```' → logprob: -9.960762023925781
    10. '=input' → logprob: -9.960762023925781

Token 17: ' input' (ID: 3422)
  Prédit: 'input'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'input' → logprob: -0.313264936208725
    2. ' input' → logprob: -1.3132649660110474
    3. '(input' → logprob: -13.438264846801758
    4. ',input' → logprob: -14.063264846801758
    5. '=input' → logprob: -15.063264846801758
    6. '	input' → logprob: -15.188264846801758
    7. '<input' → logprob: -15.688264846801758
    8. ')' → logprob: -16.688264846801758
    9. '_input' → logprob: -16.813264846801758
    10. ' ' → logprob: -17.313264846801758

Token 18: '().' (ID: 1454)
  Prédit: '().'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '().' → logprob: -0.443378210067749
    2. '()' → logprob: -1.318378210067749
    3. '())' → logprob: -3.443378210067749
    4. '()))' → logprob: -3.568378210067749
    5. '(' → logprob: -3.693378210067749
    6. '()));' → logprob: -7.068378448486328
    7. '(.' → logprob: -7.693378448486328
    8. '())))' → logprob: -7.818378448486328
    9. '()>' → logprob: -8.068378448486328
    10. '()).' → logprob: -8.068378448486328

Token 19: 'split' (ID: 13627)
  Prédit: 'split'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'split' → logprob: -2.1008713702030946e-06
    2. 'strip' → logprob: -13.250001907348633
    3. ' split' → logprob: -16.250001907348633
    4. 'rstrip' → logprob: -16.875001907348633
    5. 'spl' → logprob: -17.375001907348633
    6. '(split' → logprob: -18.125001907348633
    7. 'plit' → logprob: -20.000001907348633
    8. '.split' → logprob: -21.250001907348633
    9. ')' → logprob: -21.750001907348633
    10. '_split' → logprob: -21.875001907348633

Token 20: '()))
' (ID: 24521)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ')' → logprob: -0.6507777571678162
    2. '))' → logprob: -0.7757777571678162
    3. '(' → logprob: -4.525777816772461
    4. '()))' → logprob: -5.150777816772461
    5. '())' → logprob: -6.900777816772461
    6. ')))' → logprob: -8.525777816772461
    7. '()' → logprob: -8.775777816772461
    8. '),' → logprob: -12.150777816772461
    9. '(
' → logprob: -12.525777816772461
    10. ' ))' → logprob: -12.775777816772461

Token 21: 'ans' (ID: 616)
  Prédit: 'for'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'for' → logprob: -0.5416781902313232
    2. 's' → logprob: -1.9166781902313232
    3. 'c' → logprob: -2.0416781902313232
    4. 'd' → logprob: -3.9166781902313232
    5. 'C' → logprob: -4.041678428649902
    6. '#' → logprob: -4.041678428649902
    7. 'result' → logprob: -4.666678428649902
    8. 'a' → logprob: -4.666678428649902
    9. 'r' → logprob: -4.791678428649902
    10. 'S' → logprob: -4.791678428649902

Token 22: ' =' (ID: 314)
  Prédit: '_'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_' → logprob: -0.7849540114402771
    2. '=' → logprob: -1.0349540710449219
    3. ' =' → logprob: -1.7849540710449219
    4. '[' → logprob: -4.284954071044922
    5. '.' → logprob: -6.284954071044922
    6. ' ' → logprob: -6.659954071044922
    7. ' +=' → logprob: -6.909954071044922
    8. '[:]' → logprob: -7.409954071044922
    9. ')' → logprob: -7.534954071044922
    10. '_space' → logprob: -8.159954071044922

Token 23: ' N' (ID: 478)
  Prédit: ' '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' ' → logprob: -0.5437212586402893
    2. '0' → logprob: -0.9187212586402893
    3. ' []' → logprob: -4.5437211990356445
    4. '[' → logprob: -6.2937211990356445
    5. '[]' → logprob: -6.4187211990356445
    6. ' [' → logprob: -6.4187211990356445
    7. ' max' → logprob: -6.5437211990356445
    8. ' A' → logprob: -6.9187211990356445
    9. ' sum' → logprob: -7.4187211990356445
    10. 'sum' → logprob: -7.6687211990356445

Token 24: ' -' (ID: 533)
  Prédit: 'for'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'for' → logprob: -0.792999267578125
    2. ' ' → logprob: -1.167999267578125
    3. '*' → logprob: -2.667999267578125
    4. '-' → logprob: -3.167999267578125
    5. '\n' → logprob: -3.542999267578125
    6. ')' → logprob: -4.167999267578125
    7. '%' → logprob: -4.167999267578125
    8. ' for' → logprob: -4.542999267578125
    9. '\' → logprob: -4.542999267578125
    10. '_' → logprob: -4.917999267578125

Token 25: ' sum' (ID: 4215)
  Prédit: '1'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '1' → logprob: -0.34435391426086426
    2. 'sum' → logprob: -2.2193539142608643
    3. 'M' → logprob: -2.8443539142608643
    4. ' sum' → logprob: -3.3443539142608643
    5. ' ' → logprob: -3.5943539142608643
    6. ' M' → logprob: -3.9693539142608643
    7. 'A' → logprob: -4.344353675842285
    8. 'len' → logprob: -4.719353675842285
    9. 'max' → logprob: -4.844353675842285
    10. ' A' → logprob: -5.469353675842285

Token 26: '(A' (ID: 10706)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(' → logprob: -0.02371067740023136
    2. '(lambda' → logprob: -4.14871072769165
    3. '(A' → logprob: -5.39871072769165
    4. '((' → logprob: -6.64871072769165
    5. '(len' → logprob: -7.77371072769165
    6. '(a' → logprob: -7.89871072769165
    7. '(abs' → logprob: -8.023710250854492
    8. '(sum' → logprob: -8.648710250854492
    9. '([' → logprob: -8.898710250854492
    10. '(int' → logprob: -9.023710250854492

Token 27: ')
' (ID: 446)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ')' → logprob: -0.0008208265644498169
    2. '))' → logprob: -7.250820636749268
    3. '[' → logprob: -9.375821113586426
    4. ' )' → logprob: -11.500821113586426
    5. ')`' → logprob: -12.375821113586426
    6. ')))' → logprob: -12.625821113586426
    7. '(' → logprob: -12.750821113586426
    8. '`)' → logprob: -13.375821113586426
    9. '])' → logprob: -14.000821113586426
    10. ')**' → logprob: -14.625821113586426

Token 28: 'if' (ID: 366)
  Prédit: ''
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False

Token 29: ' ans' (ID: 3345)
  Prédit: ' ans'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' ans' → logprob: -0.004069613292813301
    2. ' ' → logprob: -6.004069805145264
    3. 'ans' → logprob: -6.879069805145264
    4. '(ans' → logprob: -8.254069328308105
    5. ' ' → logprob: -8.879069328308105
    6. ' A' → logprob: -9.379069328308105
    7. ' not' → logprob: -10.754069328308105
    8. '	ans' → logprob: -10.879069328308105
    9. ' N' → logprob: -11.129069328308105
    10. ' len' → logprob: -11.879069328308105

Token 30: ' <' (ID: 464)
  Prédit: ' >'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' >' → logprob: -0.0840442031621933
    2. '>' → logprob: -2.5840442180633545
    3. ' <=' → logprob: -5.709043979644775
    4. ' <' → logprob: -6.959043979644775
    5. ' ==' → logprob: -8.334044456481934
    6. ' ' → logprob: -8.709044456481934
    7. '<' → logprob: -8.959044456481934
    8. '<=' → logprob: -8.959044456481934
    9. ' >=' → logprob: -9.084044456481934
    10. '==' → logprob: -10.459044456481934

Token 31: ' ' (ID: 220)
  Prédit: '0'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '0' → logprob: -0.2816210687160492
    2. ' ' → logprob: -1.4066210985183716
    3. '1' → logprob: -8.281620979309082
    4. '=' → logprob: -8.531620979309082
    5. '2' → logprob: -12.656620979309082
    6. ' M' → logprob: -12.656620979309082
    7. '10' → logprob: -12.656620979309082
    8. '3' → logprob: -13.281620979309082
    9. ' =' → logprob: -13.656620979309082
    10. 'M' → logprob: -13.656620979309082

Token 32: '0' (ID: 15)
  Prédit: '0'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '0' → logprob: -0.0017424124525859952
    2. ' ' → logprob: -6.376742362976074
    3. '1' → logprob: -10.501742362976074
    4. 'M' → logprob: -12.376742362976074
    5. '=' → logprob: -12.376742362976074
    6. '2' → logprob: -13.251742362976074
    7. '-' → logprob: -13.876742362976074
    8. '3' → logprob: -14.501742362976074
    9. '  ' → logprob: -15.626742362976074
    10. '10' → logprob: -15.876742362976074

Token 33: ':
' (ID: 734)
  Prédit: ':'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ':' → logprob: -0.0007831838447600603
    2. ' :' → logprob: -7.2507829666137695
    3. ':
' → logprob: -10.00078296661377
    4. '):' → logprob: -10.87578296661377
    5. ' or' → logprob: -13.50078296661377
    6. '':' → logprob: -13.50078296661377
    7. ')' → logprob: -14.00078296661377
    8. '>:' → logprob: -14.00078296661377
    9. '":' → logprob: -14.25078296661377
    10. ' :
' → logprob: -14.75078296661377

Token 34: '   ' (ID: 271)
  Prédit: 'print'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'print' → logprob: -0.4388400614261627
    2. ' print' → logprob: -1.1888400316238403
    3. '    ' → logprob: -3.93884015083313
    4. ' ' → logprob: -4.688839912414551
    5. '\n' → logprob: -4.813839912414551
    6. ' \' → logprob: -5.313839912414551
    7. '   ' → logprob: -5.688839912414551
    8. '\' → logprob: -6.188839912414551
    9. '"' → logprob: -7.313839912414551
    10. ''' → logprob: -7.938839912414551

Token 35: ' ans' (ID: 3345)
  Prédit: ' print'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' print' → logprob: -0.2574937343597412
    2. 'print' → logprob: -1.5074937343597412
    3. ' ' → logprob: -6.00749397277832
    4. '0' → logprob: -6.13249397277832
    5. ' ans' → logprob: -7.88249397277832
    6. '   ' → logprob: -8.38249397277832
    7. '"' → logprob: -10.00749397277832
    8. ' prin' → logprob: -10.25749397277832
    9. '    ' → logprob: -10.50749397277832
    10. ' \' → logprob: -10.75749397277832

Token 36: ' =' (ID: 314)
  Prédit: '='
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '=' → logprob: -0.6956235766410828
    2. ' =' → logprob: -0.6956235766410828
    3. 'print' → logprob: -6.320623397827148
    4. '0' → logprob: -8.570623397827148
    5. ' print' → logprob: -8.570623397827148
    6. ' ' → logprob: -9.570623397827148
    7. '>' → logprob: -10.195623397827148
    8. '=-' → logprob: -10.695623397827148
    9. ':' → logprob: -10.945623397827148
    10. '   ' → logprob: -11.070623397827148

Token 37: ' -' (ID: 533)
  Prédit: '0'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '0' → logprob: -0.01419759076088667
    2. ' ' → logprob: -4.264197826385498
    3. '-' → logprob: -11.13919734954834
    4. ' -' → logprob: -11.26419734954834
    5. '`' → logprob: -13.32669734954834
    6. '"' → logprob: -13.70169734954834
    7. '   ' → logprob: -13.95169734954834
    8. '  ' → logprob: -14.63919734954834
    9. '1' → logprob: -15.20169734954834
    10. ''' → logprob: -15.38919734954834

Token 38: '1' (ID: 16)
  Prédit: 'ans'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'ans' → logprob: -0.038319967687129974
    2. '1' → logprob: -3.2883200645446777
    3. '(ans' → logprob: -9.16331958770752
    4. ' ans' → logprob: -9.53831958770752
    5. '-' → logprob: -9.66331958770752
    6. '	ans' → logprob: -10.91331958770752
    7. '=' → logprob: -11.78831958770752
    8. '_ans' → logprob: -12.41331958770752
    9. 'a' → logprob: -13.41331958770752
    10. 'Ans' → logprob: -14.03831958770752

Token 39: '
' (ID: 198)
  Prédit: 'print'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'print' → logprob: -0.040343910455703735
    2. 'else' → logprob: -3.290343999862671
    3. '\n' → logprob: -6.540343761444092
    4. '```' → logprob: -7.540343761444092
    5. '\' → logprob: -8.54034423828125
    6. ' else' → logprob: -10.16534423828125
    7. '
' → logprob: -10.16534423828125
    8. ' print' → logprob: -10.79034423828125
    9. '' → logprob: -12.04034423828125
    10. '\r' → logprob: -12.29034423828125

Token 40: 'print' (ID: 1598)
  Prédit: 'print'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'print' → logprob: -0.004098346922546625
    2. 'else' → logprob: -5.504098415374756
    3. '```' → logprob: -10.879097938537598
    4. ' print' → logprob: -14.629097938537598
    5. '\' → logprob: -15.629097938537598
    6. ' else' → logprob: -15.879097938537598
    7. 'pr' → logprob: -16.004098892211914
    8. '
' → logprob: -16.254098892211914
    9. '``' → logprob: -16.379098892211914
    10. '\n' → logprob: -17.504098892211914

Token 41: '(ans' (ID: 70054)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(' → logprob: -0.008627813309431076
    2. '(ans' → logprob: -4.758627891540527
    3. '("("' → logprob: -11.508627891540527
    4. '('' → logprob: -14.008627891540527
    5. '(`' → logprob: -14.758627891540527
    6. '()' → logprob: -14.883627891540527
    7. ' (' → logprob: -15.008627891540527
    8. '(a' → logprob: -15.133627891540527
    9. '((' → logprob: -15.383627891540527
    10. '(answer' → logprob: -16.13362693786621

Token 42: ')' (ID: 8)
  Prédit: ')'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')' → logprob: -3.128163257315464e-07
    2. ' )' → logprob: -16.375
    3. '))' → logprob: -16.875
    4. ')`' → logprob: -18.375
    5. '')' → logprob: -18.375
    6. '`)' → logprob: -19.125
    7. ')
' → logprob: -19.125
    8. '）' → logprob: -19.5
    9. '")' → logprob: -20.875
    10. '),' → logprob: -21.125


RÉSUMÉ:
--------------------------------------------------------------------------------
Total des tokens analysés: 40
Tokens correctement prédits (1ère position, stricte): 11
Tokens correctement prédits (1ère position, avec adaptation): 11
Tokens correctement prédits (top 10): 29
Précision stricte (1ère position): 27.50%
Précision adaptée (1ère position): 27.50%
Précision (top 10): 72.50%
================================================================================
