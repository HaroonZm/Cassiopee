================================================================================
ANALYSE DE PRÉDICTION TOKEN PAR TOKEN (BATCH API)
Date: 2025-06-04 20:15:19
Modèle de tokenisation: gpt-4o-mini
================================================================================

SCRIPT ANALYSÉ:
--------------------------------------------------------------------------------
def get_input():
    return int(input())

def initialize_val(n):
    return n

def initialize_sum():
    return 0

def is_non_zero(val):
    return val != 0

def get_last_digit(val):
    return val % 10

def remove_last_digit(val):
    return val // 10

def add_to_sum(s, digit):
    return s + digit

def update_val(val):
    return remove_last_digit(val)

def is_divisible_by_sum(n, s):
    return n % s == 0

def print_yes():
    print("Yes")

def print_no():
    print("No")

def main():
    n = get_input()
    val = initialize_val(n)
    s = initialize_sum()
    while is_non_zero(val):
        digit = get_last_digit(val)
        s = add_to_sum(s, digit)
        val = update_val(val)
    if is_divisible_by_sum(n, s):
        print_yes()
    else:
        print_no()

main()
--------------------------------------------------------------------------------

RÉSULTATS D'ANALYSE TOKEN PAR TOKEN:
--------------------------------------------------------------------------------
Token 0: 'def' (ID: 1314)
  → Token d'amorce (pas de prédiction)

Token 1: ' get' (ID: 717)
  → Token d'amorce (pas de prédiction)

Token 2: '_input' (ID: 12507)
  → Token d'amorce (pas de prédiction)

Token 3: '():
' (ID: 8595)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '(' → logprob: -0.002158825984224677
    2. '_' → logprob: -6.2521586418151855
    3. '():' → logprob: -9.252159118652344
    4. ' (' → logprob: -10.252159118652344
    5. '()' → logprob: -10.627159118652344
    6. '```' → logprob: -10.627159118652344
    7. '(_' → logprob: -11.502159118652344
    8. '(:' → logprob: -11.627159118652344
    9. '(_:' → logprob: -12.127159118652344
    10. ':' → logprob: -12.502159118652344

Token 4: '   ' (ID: 271)
  Prédit: '```'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '```' → logprob: -0.5172414183616638
    2. '\' → logprob: -1.3922414779663086
    3. '\n' → logprob: -3.3922414779663086
    4. '   ' → logprob: -3.5172414779663086
    5. '(' → logprob: -3.7672414779663086
    6. '    
' → logprob: -4.517241477966309
    7. ':' → logprob: -4.642241477966309
    8. ''' → logprob: -5.392241477966309
    9. '()' → logprob: -5.392241477966309
    10. ''\' → logprob: -5.517241477966309

Token 5: ' return' (ID: 622)
  Prédit: 'return'
  Correct (stricte): False
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'return' (adapté à ' return') → logprob: -0.359432190656662
    2. 'user' → logprob: -2.4844322204589844
    3. 'input' → logprob: -2.8594322204589844
    4. 'x' → logprob: -2.9844322204589844
    5. 'i' → logprob: -3.2344322204589844
    6. '   ' → logprob: -3.9844322204589844
    7. 'r' → logprob: -3.9844322204589844
    8. ' ' → logprob: -4.234432220458984
    9. 'u' → logprob: -5.359432220458984
    10. 'a' → logprob: -5.734432220458984

Token 6: ' int' (ID: 677)
  Prédit: ' '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' ' → logprob: -0.5008310079574585
    2. ' input' → logprob: -1.1258310079574585
    3. 'input' → logprob: -3.000831127166748
    4. '"' → logprob: -4.375831127166748
    5. ''' → logprob: -5.750831127166748
    6. ' "' → logprob: -6.375831127166748
    7. '  ' → logprob: -7.000831127166748
    8. ' '' → logprob: -7.750831127166748
    9. ' None' → logprob: -8.37583065032959
    10. '(input' → logprob: -8.62583065032959

Token 7: '(input' (ID: 10054)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '(' → logprob: -0.003079671412706375
    2. '('' → logprob: -6.253079891204834
    3. ''' → logprob: -7.378079891204834
    4. '("("' → logprob: -9.128079414367676
    5. '`' → logprob: -9.378079414367676
    6. ' (' → logprob: -9.628079414367676
    7. '```' → logprob: -9.753079414367676
    8. '"' → logprob: -9.878079414367676
    9. ' ' → logprob: -10.378079414367676
    10. '   ' → logprob: -10.628079414367676

Token 8: '())

' (ID: 27654)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '(' → logprob: -0.021168837323784828
    2. '())' → logprob: -4.5211687088012695
    3. '()' → logprob: -5.0211687088012695
    4. '('' → logprob: -6.7711687088012695
    5. ')' → logprob: -7.0211687088012695
    6. '()))' → logprob: -7.3961687088012695
    7. '(""))' → logprob: -8.02116870880127
    8. '("("' → logprob: -8.89616870880127
    9. '(()' → logprob: -9.39616870880127
    10. '(
' → logprob: -9.64616870880127

Token 9: 'def' (ID: 1314)
  Prédit: 'def'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'def' → logprob: -0.3975570499897003
    2. '```' → logprob: -2.647557020187378
    3. '\n' → logprob: -2.772557020187378
    4. '#' → logprob: -2.897557020187378
    5. '<|end|>' → logprob: -3.897557020187378
    6. '(' → logprob: -3.897557020187378
    7. '
' → logprob: -4.147557258605957
    8. '' → logprob: -4.772557258605957
    9. '()' → logprob: -4.897557258605957
    10. ')' → logprob: -5.022557258605957

Token 10: ' initialize' (ID: 18400)
  Prédit: ' get'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' get' → logprob: -0.7558502554893494
    2. ' calculate' → logprob: -0.7558502554893494
    3. ' compute' → logprob: -3.880850315093994
    4. ' add' → logprob: -4.255850315093994
    5. ' process' → logprob: -4.880850315093994
    6. ' space' → logprob: -5.130850315093994
    7. ' main' → logprob: -5.630850315093994
    8. ' factorial' → logprob: -6.380850315093994
    9. ' check' → logprob: -7.130850315093994
    10. ' sum' → logprob: -7.255850315093994

Token 11: '_val' (ID: 13694)
  Prédit: '_'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '_' → logprob: -0.4880906045436859
    2. '(' → logprob: -0.9880906343460083
    3. '()' → logprob: -5.738090515136719
    4. '_parameters' → logprob: -6.488090515136719
    5. '_data' → logprob: -6.613090515136719
    6. ' (' → logprob: -7.613090515136719
    7. '_user' → logprob: -7.613090515136719
    8. '_variables' → logprob: -7.613090515136719
    9. '_input' → logprob: -7.863090515136719
    10. '(_' → logprob: -7.988090515136719

Token 12: '(n' (ID: 2406)
  Prédit: 'ue'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'ue' → logprob: -0.7329813241958618
    2. 'ues' → logprob: -0.7329813241958618
    3. 's' → logprob: -3.4829812049865723
    4. 'u' → logprob: -5.482981204986572
    5. '(' → logprob: -6.482981204986572
    6. '()' → logprob: -7.107981204986572
    7. '_' → logprob: -7.232981204986572
    8. '(s' → logprob: -7.982981204986572
    9. 'uation' → logprob: -8.10798168182373
    10. 'uate' → logprob: -9.35798168182373

Token 13: '):
' (ID: 1883)
  Prédit: '):'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '):' → logprob: -0.3522079885005951
    2. ')' → logprob: -1.2272080183029175
    3. 'u' → logprob: -6.477208137512207
    4. '))' → logprob: -7.477208137512207
    5. ')):' → logprob: -7.602208137512207
    6. '):
' → logprob: -8.477208137512207
    7. '_' → logprob: -8.852208137512207
    8. '=' → logprob: -9.102208137512207
    9. ',' → logprob: -9.227208137512207
    10. ' ):' → logprob: -9.352208137512207

Token 14: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.07485149800777435
    2. '    ' → logprob: -2.8248515129089355
    3. '    
' → logprob: -5.1998515129089355
    4. '     
' → logprob: -6.6998515129089355
    5. ' ' → logprob: -7.0748515129089355
    6. ' return' → logprob: -7.4498515129089355
    7. '```' → logprob: -7.5748515129089355
    8. '0' → logprob: -7.6998515129089355
    9. ' 
' → logprob: -7.6998515129089355
    10. '[' → logprob: -7.8248515129089355

Token 15: ' return' (ID: 622)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.2771550714969635
    2. ' return' → logprob: -1.7771550416946411
    3. ' result' → logprob: -3.2771551609039307
    4. 'return' (adapté à ' return') → logprob: -3.7771551609039307
    5. 'result' → logprob: -4.902154922485352
    6. ' val' → logprob: -6.277154922485352
    7. ' ' → logprob: -7.277154922485352
    8. 'val' → logprob: -7.902154922485352
    9. ' value' → logprob: -8.027154922485352
    10. 'value' → logprob: -8.777154922485352

Token 16: ' n' (ID: 297)
  Prédit: ' ['
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' [' → logprob: -0.5038453936576843
    2. '[' → logprob: -1.378845453262329
    3. '0' → logprob: -2.503845453262329
    4. 'n' → logprob: -4.00384521484375
    5. '[n' → logprob: -4.12884521484375
    6. ' ' → logprob: -4.12884521484375
    7. ' n' → logprob: -5.00384521484375
    8. ' []' → logprob: -5.87884521484375
    9. '[]' → logprob: -6.25384521484375
    10. '1' → logprob: -9.75384521484375

Token 17: '

' (ID: 279)
  Prédit: ' *'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' *' → logprob: -0.6840684413909912
    2. '*' → logprob: -0.8090684413909912
    3. '+' → logprob: -3.309068441390991
    4. ' +' → logprob: -4.93406867980957
    5. '**' → logprob: -6.30906867980957
    6. '<|end|>' → logprob: -6.30906867980957
    7. 'def' → logprob: -6.80906867980957
    8. ' **' → logprob: -7.55906867980957
    9. ' ' → logprob: -7.68406867980957
    10. ')' → logprob: -8.93406867980957

Token 18: 'def' (ID: 1314)
  Prédit: '*'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '*' → logprob: -0.5420096516609192
    2. 'def' → logprob: -1.4170095920562744
    3. '+' → logprob: -3.0420095920562744
    4. '(' → logprob: -3.1670095920562744
    5. '_' → logprob: -3.1670095920562744
    6. '\' → logprob: -4.0420098304748535
    7. '<|end|>' → logprob: -5.4170098304748535
    8. ')' → logprob: -5.5420098304748535
    9. '```' → logprob: -5.5420098304748535
    10. '(n' → logprob: -5.9170098304748535

Token 19: ' initialize' (ID: 18400)
  Prédit: ' calculate'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' calculate' → logprob: -1.0724772214889526
    2. ' process' → logprob: -1.1974772214889526
    3. ' main' → logprob: -1.6974772214889526
    4. ' compute' → logprob: -2.072477340698242
    5. 'process' → logprob: -4.197477340698242
    6. 'calculate' → logprob: -4.447477340698242
    7. 'compute' → logprob: -4.947477340698242
    8. ' square' → logprob: -6.072477340698242
    9. ' multiply' → logprob: -6.197477340698242
    10. 'main' → logprob: -6.197477340698242

Token 20: '_sum' (ID: 29859)
  Prédit: '_val'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '_val' → logprob: -0.24801021814346313
    2. '_value' → logprob: -1.9980101585388184
    3. '_counter' → logprob: -3.7480101585388184
    4. '_values' → logprob: -3.9980101585388184
    5. '_array' → logprob: -4.498010158538818
    6. '_list' → logprob: -4.623010158538818
    7. '_' → logprob: -4.873010158538818
    8. '_vals' → logprob: -5.873010158538818
    9. '_var' → logprob: -6.373010158538818
    10. '_data' → logprob: -6.873010158538818

Token 21: '():
' (ID: 8595)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '(' → logprob: -0.5809769630432129
    2. '():' → logprob: -1.205976963043213
    3. '()' → logprob: -2.580976963043213
    4. '(n' → logprob: -2.955976963043213
    5. '_' → logprob: -4.830976963043213
    6. '(s' → logprob: -6.455976963043213
    7. '_sum' → logprob: -7.205976963043213
    8. '(_' → logprob: -7.330976963043213
    9. 's' → logprob: -8.080976486206055
    10. '(sum' → logprob: -8.205976486206055

Token 22: '   ' (ID: 271)
  Prédit: '0'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '0' → logprob: -0.03008299134671688
    2. '   ' → logprob: -3.530082941055298
    3. ' ' → logprob: -8.155082702636719
    4. 'return' → logprob: -10.155082702636719
    5. ' return' → logprob: -12.280082702636719
    6. '  ' → logprob: -13.780082702636719
    7. '    ' → logprob: -15.780082702636719
    8. '```' → logprob: -16.15508270263672
    9. '       ' → logprob: -16.40508270263672
    10. 'def' → logprob: -16.65508270263672

Token 23: ' return' (ID: 622)
  Prédit: '0'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '0' → logprob: -0.009630001150071621
    2. '   ' → logprob: -4.75963020324707
    3. 'return' (adapté à ' return') → logprob: -7.00963020324707
    4. ' ' → logprob: -9.38463020324707
    5. ' return' → logprob: -10.50963020324707
    6. '  ' → logprob: -15.00963020324707
    7. '```' → logprob: -16.50963020324707
    8. '       ' → logprob: -17.13463020324707
    9. '    ' → logprob: -17.38463020324707
    10. 'def' → logprob: -17.63463020324707

Token 24: ' ' (ID: 220)
  Prédit: '0'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '0' → logprob: -0.016034720465540886
    2. ' ' → logprob: -4.1410346031188965
    3. '   ' → logprob: -15.391035079956055
    4. ' ' → logprob: -15.641035079956055
    5. '  ' → logprob: -16.641035079956055
    6. '000' → logprob: -18.516035079956055
    7. '۰' → logprob: -18.516035079956055
    8. '00' → logprob: -18.516035079956055
    9. '```' → logprob: -18.766035079956055
    10. 'int' → logprob: -18.891035079956055

Token 25: '0' (ID: 15)
  Prédit: '0'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '0' → logprob: -2.935296834039036e-06
    2. ' ' → logprob: -12.75000286102295
    3. '00' → logprob: -18.062503814697266
    4. '000' → logprob: -18.062503814697266
    5. '۰' → logprob: -18.187503814697266
    6. '   ' → logprob: -18.875003814697266
    7. '０' → logprob: -19.625003814697266
    8. '012' → logprob: -20.125003814697266
    9. '(' → logprob: -20.187503814697266
    10. '[' → logprob: -20.187503814697266

Token 26: '

' (ID: 279)
  Prédit: '

'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '

' → logprob: -0.11962007731199265
    2. 'def' → logprob: -2.4946200847625732
    3. '
' → logprob: -4.369619846343994
    4. '\' → logprob: -4.494619846343994
    5. 'n' → logprob: -6.369619846343994
    6. '<|end|>' → logprob: -6.494619846343994
    7. '\n' → logprob: -6.744619846343994
    8. ' 

' → logprob: -7.494619846343994
    9. 'newline' → logprob: -7.744619846343994
    10. 'd' → logprob: -8.244620323181152

Token 27: 'def' (ID: 1314)
  Prédit: 'def'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'def' → logprob: -0.04780386760830879
    2. 'd' → logprob: -3.7978038787841797
    3. '

' → logprob: -3.9228038787841797
    4. '
' → logprob: -5.79780387878418
    5. '\' → logprob: -7.17280387878418
    6. 'de' → logprob: -8.79780387878418
    7. '<|end|>' → logprob: -8.79780387878418
    8. '```' → logprob: -9.04780387878418
    9. 'n' → logprob: -9.67280387878418
    10. ' def' → logprob: -10.17280387878418

Token 28: ' is' (ID: 382)
  Prédit: ' calculate'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' calculate' → logprob: -0.24018266797065735
    2. ' accumulate' → logprob: -2.115182638168335
    3. ' add' → logprob: -3.115182638168335
    4. ' compute' → logprob: -3.240182638168335
    5. ' main' → logprob: -5.490182876586914
    6. ' get' → logprob: -6.240182876586914
    7. 'calculate' → logprob: -6.490182876586914
    8. ' update' → logprob: -7.615182876586914
    9. ' sum' → logprob: -8.115182876586914
    10. ' process' → logprob: -8.240182876586914

Token 29: '_non' (ID: 52193)
  Prédit: '_'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '_' → logprob: -0.0330890528857708
    2. '_even' → logprob: -4.1580891609191895
    3. '_valid' → logprob: -4.7830891609191895
    4. '_prime' → logprob: -5.0330891609191895
    5. '_positive' → logprob: -7.1580891609191895
    6. '_pal' → logprob: -8.283088684082031
    7. ' _' → logprob: -8.283088684082031
    8. '_div' → logprob: -8.408088684082031
    9. '_space' → logprob: -9.033088684082031
    10. '_equal' → logprob: -9.533088684082031

Token 30: '_zero' (ID: 53468)
  Prédit: '_negative'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_negative' → logprob: -0.4715164601802826
    2. '_' → logprob: -1.221516489982605
    3. 'negative' → logprob: -3.2215163707733154
    4. '_empty' → logprob: -3.8465163707733154
    5. '_zero' → logprob: -4.7215166091918945
    6. 'e' → logprob: -5.3465166091918945
    7. 'zero' → logprob: -6.0965166091918945
    8. '_neg' → logprob: -6.3465166091918945
    9. 'empty' → logprob: -7.8465166091918945
    10. '_e' → logprob: -8.221516609191895

Token 31: '(val' (ID: 17391)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '(' → logprob: -0.020584052428603172
    2. '_' → logprob: -4.2705841064453125
    3. '(_' → logprob: -5.8955841064453125
    4. '(_)' → logprob: -6.1455841064453125
    5. '("("' → logprob: -8.270584106445312
    6. '(n' → logprob: -8.645584106445312
    7. '(a' → logprob: -8.645584106445312
    8. '_parent' → logprob: -9.020584106445312
    9. '_(' → logprob: -9.145584106445312
    10. '('_' → logprob: -9.395584106445312

Token 32: '):
' (ID: 1883)
  Prédit: '):'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '):' → logprob: -0.16112323105335236
    2. ')' → logprob: -1.911123275756836
    3. '_' → logprob: -7.536123275756836
    4. '():' → logprob: -8.536123275756836
    5. ' ):' → logprob: -10.536123275756836
    6. '):
' → logprob: -10.536123275756836
    7. '(' → logprob: -10.536123275756836
    8. '()' → logprob: -10.661123275756836
    9. '_)' → logprob: -11.661123275756836
    10. ')):' → logprob: -12.286123275756836

Token 33: '   ' (ID: 271)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(' → logprob: -0.1337132304906845
    2. '   ' → logprob: -2.5087132453918457
    3. ':' → logprob: -3.3837132453918457
    4. '):' → logprob: -5.133713245391846
    5. '(val' → logprob: -7.008713245391846
    6. ' :' → logprob: -7.383713245391846
    7. ')' → logprob: -7.508713245391846
    8. '():' → logprob: -7.508713245391846
    9. 'def' → logprob: -8.133712768554688
    10. ' (' → logprob: -8.258712768554688

Token 34: ' return' (ID: 622)
  Prédit: ' val'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' val' → logprob: -0.6994617581367493
    2. '   ' → logprob: -1.4494616985321045
    3. ' return' → logprob: -1.8244616985321045
    4. 'return' (adapté à ' return') → logprob: -2.9494616985321045
    5. 'val' → logprob: -2.9494616985321045
    6. '    ' → logprob: -7.199461936950684
    7. ' ' → logprob: -7.324461936950684
    8. '>' → logprob: -8.449461936950684
    9. '(' → logprob: -8.949461936950684
    10. '  ' → logprob: -9.199461936950684

Token 35: ' val' (ID: 1459)
  Prédit: ' val'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' val' → logprob: -2.141186450899113e-05
    2. 'val' → logprob: -10.875020980834961
    3. ' ' → logprob: -13.375020980834961
    4. '	val' → logprob: -14.750020980834961
    5. ' ' → logprob: -16.50002098083496
    6. ' v' → logprob: -16.62502098083496
    7. ' vall' → logprob: -16.62502098083496
    8. ' bool' → logprob: -17.12502098083496
    9. ' vale' → logprob: -17.12502098083496
    10. '[val' → logprob: -17.25002098083496

Token 36: ' !=' (ID: 1666)
  Prédit: ' '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' ' → logprob: -0.9130308032035828
    2. ' !=' → logprob: -1.0380308628082275
    3. '<|end|>' → logprob: -2.2880308628082275
    4. ' >' → logprob: -3.0380308628082275
    5. '>' → logprob: -3.4130308628082275
    6. '  ' → logprob: -3.9130308628082275
    7. ' and' → logprob: -4.663030624389648
    8. '   ' → logprob: -4.913030624389648
    9. '!=' → logprob: -5.538030624389648
    10. ':' → logprob: -5.663030624389648

Token 37: ' ' (ID: 220)
  Prédit: ' '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' ' → logprob: -0.3132619559764862
    2. '0' → logprob: -1.3132619857788086
    3. ' ' → logprob: -15.563261985778809
    4. '   ' → logprob: -17.063261032104492
    5. '  ' → logprob: -18.063261032104492
    6. '	' → logprob: -20.375761032104492
    7. '    ' → logprob: -20.375761032104492
    8. '۰' → logprob: -20.438261032104492
    9. ' ' → logprob: -20.688261032104492
    10. ' zero' → logprob: -21.063261032104492

Token 38: '0' (ID: 15)
  Prédit: '0'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '0' → logprob: -0.0001234428636962548
    2. ' ' → logprob: -9.000123023986816
    3. '۰' → logprob: -19.437623977661133
    4. ' ' → logprob: -19.812623977661133
    5. '   ' → logprob: -19.812623977661133
    6. '```' → logprob: -19.812623977661133
    7. 'zero' → logprob: -19.937623977661133
    8. '00' → logprob: -20.062623977661133
    9. '=' → logprob: -20.125123977661133
    10. '０' → logprob: -20.375123977661133

Token 39: '

' (ID: 279)
  Prédit: 'def'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'def' → logprob: -0.25976723432540894
    2. '

' → logprob: -2.1347672939300537
    3. '
' → logprob: -3.1347672939300537
    4. '<|end|>' → logprob: -3.2597672939300537
    5. '\' → logprob: -4.259767055511475
    6. '\n' → logprob: -5.259767055511475
    7. '```' → logprob: -5.384767055511475
    8. '<|end|>' → logprob: -7.009767055511475
    9. 'newline' → logprob: -7.259767055511475
    10. '_' → logprob: -7.259767055511475

Token 40: 'def' (ID: 1314)
  Prédit: 'def'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'def' → logprob: -0.012330456636846066
    2. 'd' → logprob: -4.762330532073975
    3. '\' → logprob: -5.762330532073975
    4. '```' → logprob: -8.512330055236816
    5. '

' → logprob: -9.262330055236816
    6. '
' → logprob: -9.262330055236816
    7. '\n' → logprob: -9.762330055236816
    8. '#' → logprob: -10.137330055236816
    9. '<|end|>' → logprob: -11.012330055236816
    10. 'de' → logprob: -11.762330055236816

Token 41: ' get' (ID: 717)
  Prédit: ' calculate'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' calculate' → logprob: -0.7089900970458984
    2. ' accumulate' → logprob: -2.2089900970458984
    3. ' add' → logprob: -2.4589900970458984
    4. ' main' → logprob: -2.5839900970458984
    5. ' is' → logprob: -2.7089900970458984
    6. ' get' → logprob: -2.7089900970458984
    7. ' process' → logprob: -3.5839900970458984
    8. ' compute' → logprob: -3.7089900970458984
    9. ' sum' → logprob: -3.7089900970458984
    10. ' check' → logprob: -5.208990097045898

Token 42: '_last' (ID: 26359)
  Prédit: '_input'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '_input' → logprob: -1.0892441272735596
    2. '_val' → logprob: -1.2142441272735596
    3. '_value' → logprob: -1.9642441272735596
    4. '_sum' → logprob: -2.2142441272735596
    5. '_next' → logprob: -2.7142441272735596
    6. '_' → logprob: -3.2142441272735596
    7. '_user' → logprob: -6.2142438888549805
    8. '_current' → logprob: -6.5892438888549805
    9. '_n' → logprob: -6.7142438888549805
    10. '_number' → logprob: -6.8392438888549805

Token 43: '_digit' (ID: 119592)
  Prédit: '_'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_' → logprob: -0.04011226445436478
    2. '_digit' → logprob: -3.290112257003784
    3. '_bit' → logprob: -8.290112495422363
    4. '_char' → logprob: -8.415112495422363
    5. '_index' → logprob: -8.665112495422363
    6. '_value' → logprob: -9.040112495422363
    7. '_token' → logprob: -9.165112495422363
    8. ' _' → logprob: -9.165112495422363
    9. '_digits' → logprob: -9.165112495422363
    10. '_val' → logprob: -9.415112495422363

Token 44: '(val' (ID: 17391)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(' → logprob: -0.00030388421146199107
    2. '(val' → logprob: -8.625304222106934
    3. ' (' → logprob: -9.750304222106934
    4. '(value' → logprob: -11.250304222106934
    5. '()' → logprob: -11.875304222106934
    6. '("("' → logprob: -12.125304222106934
    7. '(num' → logprob: -12.250304222106934
    8. '(n' → logprob: -12.250304222106934
    9. '(x' → logprob: -12.375304222106934
    10. '('' → logprob: -13.250304222106934

Token 45: '):
' (ID: 1883)
  Prédit: '):'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '):' → logprob: -0.5760185718536377
    2. ')' → logprob: -0.8260185718536377
    3. '):
' → logprob: -11.076018333435059
    4. ' )' → logprob: -11.076018333435059
    5. '():' → logprob: -11.326018333435059
    6. ' ):' → logprob: -11.576018333435059
    7. '[' → logprob: -11.826018333435059
    8. ':' → logprob: -12.701018333435059
    9. '())' → logprob: -13.201018333435059
    10. ')}' → logprob: -13.451018333435059

Token 46: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.3872469663619995
    2. 'val' → logprob: -1.7622469663619995
    3. ' val' → logprob: -2.012247085571289
    4. 'return' → logprob: -4.762247085571289
    5. ' return' → logprob: -5.262247085571289
    6. '(val' → logprob: -7.137247085571289
    7. '[val' → logprob: -8.137247085571289
    8. '.val' → logprob: -8.762247085571289
    9. '    
' → logprob: -8.762247085571289
    10. '<|end|>' → logprob: -9.387247085571289

Token 47: ' return' (ID: 622)
  Prédit: ' val'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' val' → logprob: -0.5447028875350952
    2. ' return' → logprob: -1.6697028875350952
    3. 'val' → logprob: -1.7947028875350952
    4. '   ' → logprob: -3.4197030067443848
    5. 'return' (adapté à ' return') → logprob: -3.4197030067443848
    6. '    ' → logprob: -11.169702529907227
    7. '```' → logprob: -11.544702529907227
    8. ' ' → logprob: -12.044702529907227
    9. '[val' → logprob: -12.044702529907227
    10. '	val' → logprob: -12.794702529907227

Token 48: ' val' (ID: 1459)
  Prédit: ' val'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' val' → logprob: -0.008616108447313309
    2. 'val' → logprob: -4.758615970611572
    3. ' ' → logprob: -14.75861644744873
    4. '	val' → logprob: -15.00861644744873
    5. '(val' → logprob: -15.38361644744873
    6. ' int' → logprob: -15.75861644744873
    7. '[val' → logprob: -15.75861644744873
    8. '.val' → logprob: -16.133615493774414
    9. ' ' → logprob: -17.008615493774414
    10. 'int' → logprob: -17.258615493774414

Token 49: ' %' (ID: 1851)
  Prédit: ' %'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' %' → logprob: -0.007749421056360006
    2. '%' → logprob: -4.882749557495117
    3. ' ' → logprob: -8.882749557495117
    4. ' ' → logprob: -12.507749557495117
    5. ' %
' → logprob: -14.382749557495117
    6. ' ‌' → logprob: -18.007749557495117
    7. '   ' → logprob: -18.007749557495117
    8. '1' → logprob: -18.257749557495117
    9. '  ' → logprob: -18.257749557495117
    10. ' %)' → logprob: -18.257749557495117

Token 50: ' ' (ID: 220)
  Prédit: '10'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '10' → logprob: -1.700132997939363e-05
    2. ' ' → logprob: -11.000017166137695
    3. '1' → logprob: -15.500017166137695
    4. '100' → logprob: -18.625017166137695
    5. '۱۰' → logprob: -18.875017166137695
    6. '   ' → logprob: -19.125017166137695
    7. '```' → logprob: -19.250017166137695
    8. '`' → logprob: -20.125017166137695
    9. 'd' → logprob: -20.125017166137695
    10. '9' → logprob: -20.375017166137695

Token 51: '10' (ID: 702)
  Prédit: '10'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '10' → logprob: -4.36574100604048e-06
    2. '1' → logprob: -12.375004768371582
    3. ' ' → logprob: -16.375003814697266
    4. '```' → logprob: -19.750003814697266
    5. '   ' → logprob: -20.375003814697266
    6. '۱۰' → logprob: -20.500003814697266
    7. '100' → logprob: -20.625003814697266
    8. '  ' → logprob: -21.500003814697266
    9. '１０' → logprob: -21.625003814697266
    10. '`' → logprob: -21.625003814697266

Token 52: '

' (ID: 279)
  Prédit: 'def'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'def' → logprob: -0.0038646818138659
    2. '\' → logprob: -6.753864765167236
    3. '<|end|>' → logprob: -7.003864765167236
    4. '```' → logprob: -7.253864765167236
    5. '
' → logprob: -7.878864765167236
    6. ' def' → logprob: -8.628864288330078
    7. '

' → logprob: -8.628864288330078
    8. '#' → logprob: -9.628864288330078
    9. '_' → logprob: -9.628864288330078
    10. '*' → logprob: -9.753864288330078

Token 53: 'def' (ID: 1314)
  Prédit: 'def'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'def' → logprob: -0.002195813925936818
    2. '_' → logprob: -6.752195835113525
    3. 'd' → logprob: -7.502195835113525
    4. '```' → logprob: -8.877195358276367
    5. '*' → logprob: -9.252195358276367
    6. '\' → logprob: -9.627195358276367
    7. '+' → logprob: -9.877195358276367
    8. '#' → logprob: -10.127195358276367
    9. ' def' → logprob: -11.377195358276367
    10. '

' → logprob: -11.877195358276367

Token 54: ' remove' (ID: 6234)
  Prédit: ' get'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' get' → logprob: -0.9424117207527161
    2. ' add' → logprob: -1.3174116611480713
    3. ' remove' → logprob: -2.8174116611480713
    4. ' process' → logprob: -3.0674116611480713
    5. ' multiply' → logprob: -3.1924116611480713
    6. ' calculate' → logprob: -3.4424116611480713
    7. ' is' → logprob: -3.6924116611480713
    8. ' initialize' → logprob: -3.8174116611480713
    9. ' def' → logprob: -3.9424116611480713
    10. ' main' → logprob: -4.44241189956665

Token 55: '_last' (ID: 26359)
  Prédit: '_last'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_last' → logprob: -0.2838398218154907
    2. '_' → logprob: -1.7838398218154907
    3. '_digit' → logprob: -2.908839702606201
    4. '_val' → logprob: -3.908839702606201
    5. ' _' → logprob: -6.158839702606201
    6. '_digits' → logprob: -7.283839702606201
    7. '_div' → logprob: -7.408839702606201
    8. '_one' → logprob: -8.78384017944336
    9. '_a' → logprob: -8.90884017944336
    10. '```' → logprob: -8.90884017944336

Token 56: '_digit' (ID: 119592)
  Prédit: '_digit'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_digit' → logprob: -0.11435204744338989
    2. '_' → logprob: -2.239351987838745
    3. '```' → logprob: -7.739352226257324
    4. '_div' → logprob: -8.364352226257324
    5. '_char' → logprob: -8.489352226257324
    6. '_val' → logprob: -8.739352226257324
    7. '_token' → logprob: -9.114352226257324
    8. ' _' → logprob: -9.489352226257324
    9. '_digits' → logprob: -9.739352226257324
    10. '_bit' → logprob: -9.864352226257324

Token 57: '(val' (ID: 17391)
  Prédit: '(val'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(val' → logprob: -0.11404100060462952
    2. '(' → logprob: -2.2390410900115967
    3. ' (' → logprob: -6.739040851593018
    4. '(var' → logprob: -11.489041328430176
    5. '(v' → logprob: -11.864041328430176
    6. '(n' → logprob: -12.739041328430176
    7. '(vals' → logprob: -12.989041328430176
    8. '(value' → logprob: -13.364041328430176
    9. '(def' → logprob: -13.614041328430176
    10. '(valor' → logprob: -13.739041328430176

Token 58: '):
' (ID: 1883)
  Prédit: '):'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '):' → logprob: -0.38700276613235474
    2. ')' → logprob: -1.13700270652771
    3. '):
' → logprob: -10.262002944946289
    4. ' ):' → logprob: -10.762002944946289
    5. '   ' → logprob: -10.887002944946289
    6. ' ' → logprob: -11.012002944946289
    7. ':' → logprob: -11.512002944946289
    8. '=' → logprob: -12.012002944946289
    9. ' )' → logprob: -12.137002944946289
    10. ')>>' → logprob: -13.012002944946289

Token 59: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.3558742105960846
    2. ' return' → logprob: -1.2308741807937622
    3. 'return' → logprob: -5.230874061584473
    4. ' val' → logprob: -6.230874061584473
    5. 'val' → logprob: -10.480874061584473
    6. ' ' → logprob: -10.855874061584473
    7. '    ' → logprob: -11.105874061584473
    8. ' //' → logprob: -11.980874061584473
    9. '	return' → logprob: -12.855874061584473
    10. '  ' → logprob: -13.105874061584473

Token 60: ' return' (ID: 622)
  Prédit: ' return'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' return' → logprob: -0.3909272849559784
    2. 'return' (adapté à ' return') → logprob: -1.1409273147583008
    3. '   ' → logprob: -5.640927314758301
    4. ' val' → logprob: -7.890927314758301
    5. 'val' → logprob: -9.0159273147583
    6. ' ' → logprob: -13.7659273147583
    7. '	return' → logprob: -14.0159273147583
    8. '    ' → logprob: -15.3909273147583
    9. 'eturn' → logprob: -15.5159273147583
    10. '```' → logprob: -15.5159273147583

Token 61: ' val' (ID: 1459)
  Prédit: ' val'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' val' → logprob: -0.06196970492601395
    2. 'val' → logprob: -2.811969757080078
    3. '	val' → logprob: -13.436969757080078
    4. '(val' → logprob: -15.311969757080078
    5. '[val' → logprob: -16.061969757080078
    6. '.val' → logprob: -16.311969757080078
    7. ' ' → logprob: -16.561969757080078
    8. '_val' → logprob: -16.811969757080078
    9. ' ' → logprob: -16.936969757080078
    10. 'v' → logprob: -17.686969757080078

Token 62: ' //' (ID: 602)
  Prédit: ' //'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' //' → logprob: -0.1002923920750618
    2. '//' → logprob: -2.350292444229126
    3. ' ' → logprob: -9.850292205810547
    4. ' ' → logprob: -10.850292205810547
    5. '#' → logprob: -12.475292205810547
    6. '10' → logprob: -12.600292205810547
    7. '   ' → logprob: -13.350292205810547
    8. '1' → logprob: -14.100292205810547
    9. '100' → logprob: -14.475292205810547
    10. '2' → logprob: -14.475292205810547

Token 63: ' ' (ID: 220)
  Prédit: '10'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '10' → logprob: -2.4391956685576588e-05
    2. ' ' → logprob: -10.625024795532227
    3. '1' → logprob: -16.875024795532227
    4. '   ' → logprob: -19.375024795532227
    5. '=' → logprob: -19.875024795532227
    6. '  ' → logprob: -20.125024795532227
    7. '```' → logprob: -20.125024795532227
    8. '۱۰' → logprob: -20.250024795532227
    9. '>' → logprob: -21.125024795532227
    10. '１０' → logprob: -21.125024795532227

Token 64: '10' (ID: 702)
  Prédit: '10'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '10' → logprob: 0.0
    2. ' ' → logprob: -17.375
    3. '1' → logprob: -18.125
    4. '۱۰' → logprob: -20.5
    5. '１０' → logprob: -21.125
    6. '```' → logprob: -21.375
    7. '१०' → logprob: -22.125
    8. '0' → logprob: -23.0
    9. '=' → logprob: -23.25
    10. '১০' → logprob: -23.75

Token 65: '

' (ID: 279)
  Prédit: 'def'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'def' → logprob: -0.13528487086296082
    2. '

' → logprob: -2.385284900665283
    3. '<|end|>' → logprob: -3.635284900665283
    4. '
' → logprob: -5.760284900665283
    5. '```' → logprob: -5.885284900665283
    6. '\n' → logprob: -7.135284900665283
    7. ' def' → logprob: -7.510284900665283
    8. '<|end|>' → logprob: -8.510284423828125
    9. '\' → logprob: -8.635284423828125
    10. ' 

' → logprob: -8.760284423828125

Token 66: 'def' (ID: 1314)
  Prédit: 'def'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'def' → logprob: -1.4855663721391466e-05
    2. 'for' → logprob: -12.000015258789062
    3. 'while' → logprob: -12.125015258789062
    4. 'n' → logprob: -13.125015258789062
    5. '```' → logprob: -14.375015258789062
    6. 'sum' → logprob: -15.750015258789062
    7. '\' → logprob: -15.875015258789062
    8. '#' → logprob: -16.250015258789062
    9. ' def' → logprob: -16.250015258789062
    10. 'd' → logprob: -16.500015258789062

Token 67: ' add' (ID: 1147)
  Prédit: ' sum'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' sum' → logprob: -0.7955663800239563
    2. ' main' → logprob: -1.0455663204193115
    3. ' calculate' → logprob: -2.5455663204193115
    4. 'sum' → logprob: -3.1705663204193115
    5. ' get' → logprob: -4.545566558837891
    6. ' add' → logprob: -4.545566558837891
    7. ' compute' → logprob: -4.795566558837891
    8. 'main' → logprob: -4.795566558837891
    9. 'calculate' → logprob: -4.795566558837891
    10. ' factorial' → logprob: -5.295566558837891

Token 68: '_to' (ID: 5089)
  Prédit: '_sum'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_sum' → logprob: -0.6255736351013184
    2. '_' → logprob: -0.8755736351013184
    3. '(' → logprob: -3.5005736351013184
    4. '(_' → logprob: -5.125573635101318
    5. '_to' → logprob: -5.125573635101318
    6. '(sum' → logprob: -6.000573635101318
    7. '_s' → logprob: -6.375573635101318
    8. '<|end|>' → logprob: -7.750573635101318
    9. ' _' → logprob: -8.125574111938477
    10. '(s' → logprob: -9.000574111938477

Token 69: '_sum' (ID: 29859)
  Prédit: '_sum'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_sum' → logprob: -0.005064402241259813
    2. '_' → logprob: -5.505064487457275
    3. 'sum' → logprob: -7.005064487457275
    4. '_s' → logprob: -10.255064010620117
    5. ' sum' → logprob: -11.130064010620117
    6. 's' → logprob: -11.255064010620117
    7. '(sum' → logprob: -11.380064010620117
    8. '_SUM' → logprob: -13.755064010620117
    9. '	sum' → logprob: -14.005064010620117
    10. '_total' → logprob: -14.630064010620117

Token 70: '(s' (ID: 1858)
  Prédit: '(sum'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(sum' → logprob: -0.32899338006973267
    2. '(' → logprob: -1.703993320465088
    3. '(s' → logprob: -2.328993320465088
    4. '(a' → logprob: -8.703993797302246
    5. ' (' → logprob: -8.953993797302246
    6. '(current' → logprob: -9.078993797302246
    7. '(ss' → logprob: -9.328993797302246
    8. '(value' → logprob: -9.578993797302246
    9. '(val' → logprob: -10.078993797302246
    10. '(_' → logprob: -10.078993797302246

Token 71: ',' (ID: 11)
  Prédit: ','
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ',' → logprob: -0.24271062016487122
    2. 'um' → logprob: -1.6177105903625488
    3. ',s' → logprob: -4.992710590362549
    4. ',sum' → logprob: -5.492710590362549
    5. ' ,' → logprob: -5.617710590362549
    6. ')' → logprob: -7.492710590362549
    7. ',)' → logprob: -7.617710590362549
    8. ',u' → logprob: -7.867710590362549
    9. 'u' → logprob: -8.367711067199707
    10. '(s' → logprob: -8.492711067199707

Token 72: ' digit' (ID: 19181)
  Prédit: 'd'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'd' → logprob: -0.8734855651855469
    2. ' val' → logprob: -1.4984855651855469
    3. ' d' → logprob: -1.8734855651855469
    4. 'digit' → logprob: -2.248485565185547
    5. ' digit' → logprob: -3.123485565185547
    6. 'val' → logprob: -3.373485565185547
    7. 'v' → logprob: -4.123485565185547
    8. ' v' → logprob: -5.873485565185547
    9. 'x' → logprob: -7.123485565185547
    10. 'value' → logprob: -7.748485565185547

Token 73: '):
' (ID: 1883)
  Prédit: '):'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '):' → logprob: -0.0015236717881634831
    2. ')' → logprob: -7.126523494720459
    3. '):
' → logprob: -7.876523494720459
    4. 's' → logprob: -8.251523971557617
    5. ':' → logprob: -10.126523971557617
    6. ' ):' → logprob: -11.376523971557617
    7. '(s' → logprob: -11.876523971557617
    8. ',' → logprob: -12.126523971557617
    9. '):
' → logprob: -12.876523971557617
    10. '=' → logprob: -13.126523971557617

Token 74: '   ' (ID: 271)
  Prédit: ' s'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' s' → logprob: -0.04875711351633072
    2. 's' → logprob: -3.0487570762634277
    3. '   ' → logprob: -9.298757553100586
    4. '(s' → logprob: -10.423757553100586
    5. '<|end|>' → logprob: -10.923757553100586
    6. '    ' → logprob: -12.173757553100586
    7. ' ' → logprob: -12.298757553100586
    8. ')' → logprob: -12.423757553100586
    9. ' 
' → logprob: -12.798757553100586
    10. '    
' → logprob: -12.923757553100586

Token 75: ' return' (ID: 622)
  Prédit: 's'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 's' → logprob: -0.7009955644607544
    2. ' s' → logprob: -0.7009955644607544
    3. ' return' → logprob: -5.575995445251465
    4. '   ' → logprob: -5.950995445251465
    5. 'return' (adapté à ' return') → logprob: -6.575995445251465
    6. '(s' → logprob: -10.825995445251465
    7. ' ' → logprob: -12.825995445251465
    8. '    ' → logprob: -13.200995445251465
    9. '    
' → logprob: -13.450995445251465
    10. '  ' → logprob: -13.575995445251465

Token 76: ' s' (ID: 265)
  Prédit: ' s'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' s' → logprob: -0.12692853808403015
    2. 's' → logprob: -2.1269285678863525
    3. '(s' → logprob: -15.626928329467773
    4. ' ' → logprob: -15.626928329467773
    5. ' ' → logprob: -16.876928329467773
    6. '(' → logprob: -17.876928329467773
    7. '	s' → logprob: -18.001928329467773
    8. ' (' → logprob: -18.001928329467773
    9. '_s' → logprob: -18.126928329467773
    10. '```' → logprob: -20.501928329467773

Token 77: ' +' (ID: 659)
  Prédit: ' +'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' +' → logprob: -0.12694616615772247
    2. '+' → logprob: -2.126946210861206
    3. '+d' → logprob: -11.001946449279785
    4. ' plus' → logprob: -14.626946449279785
    5. ' ' → logprob: -14.876946449279785
    6. ' ' → logprob: -15.126946449279785
    7. ' +
' → logprob: -15.876946449279785
    8. ' +=' → logprob: -16.75194549560547
    9. '＋' → logprob: -17.62694549560547
    10. '+s' → logprob: -18.12694549560547

Token 78: ' digit' (ID: 19181)
  Prédit: ' digit'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' digit' → logprob: -0.023248855024576187
    2. 'digit' → logprob: -3.7732489109039307
    3. ' ' → logprob: -13.523248672485352
    4. 'd' → logprob: -14.773248672485352
    5. ' d' → logprob: -14.898248672485352
    6. ' ' → logprob: -14.898248672485352
    7. '_digit' → logprob: -14.898248672485352
    8. '	d' → logprob: -15.023248672485352
    9. ' digits' → logprob: -15.898248672485352
    10. '-digit' → logprob: -16.52324867248535

Token 79: '

' (ID: 279)
  Prédit: 'def'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'def' → logprob: -0.5310141444206238
    2. '

' → logprob: -0.9060141444206238
    3. '
' → logprob: -5.6560139656066895
    4. '<|end|>' → logprob: -5.7810139656066895
    5. ' def' → logprob: -7.6560139656066895
    6. '\n' → logprob: -8.031014442443848
    7. '```' → logprob: -8.781014442443848
    8. '\' → logprob: -9.781014442443848
    9. '()

' → logprob: -10.031014442443848
    10. '<|end|>' → logprob: -10.156014442443848

Token 80: 'def' (ID: 1314)
  Prédit: 'def'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'def' → logprob: -4.668304245569743e-05
    2. 'for' → logprob: -11.125046730041504
    3. '```' → logprob: -11.500046730041504
    4. '\' → logprob: -11.625046730041504
    5. 'while' → logprob: -12.000046730041504
    6. 'n' → logprob: -13.250046730041504
    7. '
' → logprob: -13.875046730041504
    8. '\n' → logprob: -14.000046730041504
    9. '

' → logprob: -14.250046730041504
    10. ' def' → logprob: -14.250046730041504

Token 81: ' update' (ID: 4027)
  Prédit: ' main'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' main' → logprob: -0.004064863547682762
    2. ' process' → logprob: -6.379065036773682
    3. ' calculate' → logprob: -6.754065036773682
    4. 'main' → logprob: -7.254065036773682
    5. ' compute' → logprob: -8.254064559936523
    6. ' sum' → logprob: -9.129064559936523
    7. ' factorial' → logprob: -10.504064559936523
    8. ' get' → logprob: -11.004064559936523
    9. ' check' → logprob: -11.379064559936523
    10. 'process' → logprob: -11.379064559936523

Token 82: '_val' (ID: 13694)
  Prédit: '_val'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_val' → logprob: -0.03113638609647751
    2. '_' → logprob: -3.9061362743377686
    3. '_sum' → logprob: -5.406136512756348
    4. '_value' → logprob: -5.656136512756348
    5. '_vals' → logprob: -6.781136512756348
    6. '_values' → logprob: -7.156136512756348
    7. '_s' → logprob: -7.781136512756348
    8. '_(' → logprob: -9.781136512756348
    9. '_last' → logprob: -10.656136512756348
    10. '_input' → logprob: -10.656136512756348

Token 83: '(val' (ID: 17391)
  Prédit: '(val'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(val' → logprob: -0.16377657651901245
    2. '(' → logprob: -1.9137766361236572
    3. '(n' → logprob: -5.913776397705078
    4. ' (' → logprob: -8.038776397705078
    5. '(s' → logprob: -8.538776397705078
    6. '(value' → logprob: -9.038776397705078
    7. '(v' → logprob: -9.163776397705078
    8. '(current' → logprob: -11.538776397705078
    9. '(vals' → logprob: -11.538776397705078
    10. '(old' → logprob: -11.913776397705078

Token 84: '):
' (ID: 1883)
  Prédit: '):'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '):' → logprob: -0.004396767355501652
    2. ',' → logprob: -6.129396915435791
    3. '):
' → logprob: -6.754396915435791
    4. ')' → logprob: -7.004396915435791
    5. ' ):' → logprob: -9.504396438598633
    6. ',val' → logprob: -11.004396438598633
    7. '   ' → logprob: -11.629396438598633
    8. ' ' → logprob: -11.754396438598633
    9. '(' → logprob: -12.129396438598633
    10. '):
' → logprob: -12.254396438598633

Token 85: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.8987387418746948
    2. ' remove' → logprob: -1.1487387418746948
    3. 'remove' → logprob: -1.3987387418746948
    4. ' return' → logprob: -3.8987388610839844
    5. 'return' → logprob: -5.773738861083984
    6. ' val' → logprob: -6.023738861083984
    7. 'val' → logprob: -6.648738861083984
    8. '    ' → logprob: -7.273738861083984
    9. ' get' → logprob: -7.523738861083984
    10. ')' → logprob: -8.523738861083984

Token 86: ' return' (ID: 622)
  Prédit: 'remove'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'remove' → logprob: -0.09169156104326248
    2. 'return' (adapté à ' return') → logprob: -3.216691493988037
    3. ' remove' → logprob: -3.216691493988037
    4. ' return' → logprob: -5.216691493988037
    5. 'val' → logprob: -6.966691493988037
    6. '   ' → logprob: -7.216691493988037
    7. 'def' → logprob: -8.966691970825195
    8. ' val' → logprob: -9.091691970825195
    9. '	remove' → logprob: -10.716691970825195
    10. 'get' → logprob: -10.841691970825195

Token 87: ' remove' (ID: 6234)
  Prédit: 'remove'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'remove' → logprob: -0.6841150522232056
    2. ' remove' → logprob: -1.3091150522232056
    3. 'val' → logprob: -2.184114933013916
    4. ' val' → logprob: -2.184114933013916
    5. '0' → logprob: -10.059115409851074
    6. 'get' → logprob: -10.309115409851074
    7. '(remove' → logprob: -10.309115409851074
    8. '	remove' → logprob: -10.434115409851074
    9. ' ' → logprob: -10.684115409851074
    10. ' get' → logprob: -10.809115409851074

Token 88: '_last' (ID: 26359)
  Prédit: '_last'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_last' → logprob: -0.0001454955490771681
    2. '_' → logprob: -8.87514591217041
    3. ' _' → logprob: -13.25014591217041
    4. '_l' → logprob: -14.12514591217041
    5. '```' → logprob: -14.12514591217041
    6. '_first' → logprob: -14.50014591217041
    7. '_LAST' → logprob: -15.37514591217041
    8. '_Last' → logprob: -15.37514591217041
    9. '_final' → logprob: -15.87514591217041
    10. '_latest' → logprob: -16.000144958496094

Token 89: '_digit' (ID: 119592)
  Prédit: '_digit'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_digit' → logprob: -0.003700200468301773
    2. '_' → logprob: -5.628700256347656
    3. 'digit' → logprob: -10.503700256347656
    4. '_digits' → logprob: -10.878700256347656
    5. '_d' → logprob: -11.003700256347656
    6. '_token' → logprob: -11.378700256347656
    7. '```' → logprob: -11.628700256347656
    8. '_val' → logprob: -12.753700256347656
    9. ' _' → logprob: -12.753700256347656
    10. '__' → logprob: -13.503700256347656

Token 90: '(val' (ID: 17391)
  Prédit: '(val'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(val' → logprob: -0.0008364312816411257
    2. '(' → logprob: -7.125836372375488
    3. ' (' → logprob: -11.000836372375488
    4. '_val' → logprob: -11.375836372375488
    5. '(vals' → logprob: -13.875836372375488
    6. '(_' → logprob: -14.375836372375488
    7. 'val' → logprob: -14.500836372375488
    8. '_' → logprob: -14.875836372375488
    9. '(value' → logprob: -14.875836372375488
    10. '(valor' → logprob: -15.375836372375488

Token 91: ')

' (ID: 1029)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ')' → logprob: -1.7432603272027336e-06
    2. ' )' → logprob: -13.625001907348633
    3. ')
' → logprob: -15.750001907348633
    4. '))' → logprob: -15.750001907348633
    5. ')return' → logprob: -16.250001907348633
    6. '}' → logprob: -17.000001907348633
    7. '   ' → logprob: -17.375001907348633
    8. '())' → logprob: -17.375001907348633
    9. ')}' → logprob: -17.500001907348633
    10. ' ' → logprob: -17.875001907348633

Token 92: 'def' (ID: 1314)
  Prédit: 'def'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'def' → logprob: -9.186122770188376e-05
    2. '```' → logprob: -9.750091552734375
    3. 'while' → logprob: -11.125091552734375
    4. 'for' → logprob: -11.750091552734375
    5. '\' → logprob: -12.250091552734375
    6. 'if' → logprob: -12.500091552734375
    7. 'n' → logprob: -13.625091552734375
    8. ' def' → logprob: -15.500091552734375
    9. '#' → logprob: -15.875091552734375
    10. 'print' → logprob: -16.125091552734375

Token 93: ' is' (ID: 382)
  Prédit: ' main'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' main' → logprob: -0.3630175292491913
    2. ' def' → logprob: -2.1130175590515137
    3. ' get' → logprob: -2.3630175590515137
    4. 'def' → logprob: -2.9880175590515137
    5. 'main' → logprob: -4.113017559051514
    6. 'get' → logprob: -4.738017559051514
    7. ' process' → logprob: -5.738017559051514
    8. ' calculate' → logprob: -6.363017559051514
    9. ' sum' → logprob: -6.613017559051514
    10. ' initialize' → logprob: -6.613017559051514

Token 94: '_div' (ID: 36926)
  Prédit: '_non'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '_non' → logprob: -0.01087130792438984
    2. '_' → logprob: -4.760871410369873
    3. '_positive' → logprob: -7.635871410369873
    4. '_n' → logprob: -7.885871410369873
    5. '_valid' → logprob: -7.885871410369873
    6. ' non' → logprob: -8.135870933532715
    7. '_zero' → logprob: -8.385870933532715
    8. '_not' → logprob: -9.260870933532715
    9. '_sum' → logprob: -9.260870933532715
    10. '_even' → logprob: -10.135870933532715

Token 95: 'isible' (ID: 181386)
  Prédit: 'isible'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'isible' → logprob: -5.200166469876422e-06
    2. 'is' → logprob: -12.750004768371582
    3. 'isable' → logprob: -13.625004768371582
    4. '_is' → logprob: -15.000004768371582
    5. 'ISIBLE' → logprob: -15.375004768371582
    6. '_' → logprob: -15.500004768371582
    7. '_by' → logprob: -15.625004768371582
    8. '(is' → logprob: -16.7500057220459
    9. '```' → logprob: -17.3750057220459
    10. 'isor' → logprob: -18.2500057220459

Token 96: '_by' (ID: 8214)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(' → logprob: -0.03814086690545082
    2. '_by' → logprob: -3.6631407737731934
    3. '_' → logprob: -4.663140773773193
    4. '(val' → logprob: -6.788140773773193
    5. ' (' → logprob: -8.538141250610352
    6. '(n' → logprob: -8.538141250610352
    7. 'by' → logprob: -8.663141250610352
    8. '(div' → logprob: -9.038141250610352
    9. '(value' → logprob: -9.288141250610352
    10. '(x' → logprob: -9.913141250610352

Token 97: '_sum' (ID: 29859)
  Prédit: '3'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '3' → logprob: -0.29925310611724854
    2. '10' → logprob: -2.674252986907959
    3. '(' → logprob: -2.924252986907959
    4. ' ' → logprob: -3.299252986907959
    5. '5' → logprob: -3.799252986907959
    6. '9' → logprob: -3.799252986907959
    7. '7' → logprob: -4.049252986907959
    8. '(val' → logprob: -4.549252986907959
    9. '_' → logprob: -4.924252986907959
    10. '2' → logprob: -5.424252986907959

Token 98: '(n' (ID: 2406)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(' → logprob: -0.2824458181858063
    2. '(val' → logprob: -1.4074457883834839
    3. '(s' → logprob: -7.532445907592773
    4. '(value' → logprob: -8.032445907592773
    5. '(div' → logprob: -8.907445907592773
    6. '(sum' → logprob: -9.532445907592773
    7. '(num' → logprob: -10.157445907592773
    8. '(n' → logprob: -10.407445907592773
    9. '(def' → logprob: -10.782445907592773
    10. ' (' → logprob: -11.032445907592773

Token 99: ',' (ID: 11)
  Prédit: ','
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ',' → logprob: -0.008930793963372707
    2. ',n' → logprob: -5.383930683135986
    3. '(n' → logprob: -5.883930683135986
    4. ' ,' → logprob: -7.383930683135986
    5. '):' → logprob: -8.008931159973145
    6. ',s' → logprob: -8.383931159973145
    7. ')' → logprob: -8.633931159973145
    8. 's' → logprob: -9.633931159973145
    9. '(s' → logprob: -10.508931159973145
    10. ',sum' → logprob: -11.008931159973145

Token 100: ' s' (ID: 265)
  Prédit: ' s'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' s' → logprob: -0.5476487874984741
    2. 's' → logprob: -0.9226487874984741
    3. 'sum' → logprob: -4.172648906707764
    4. ' sum' → logprob: -4.797648906707764
    5. '   ' → logprob: -9.672648429870605
    6. 'n' → logprob: -10.047648429870605
    7. 'val' → logprob: -10.047648429870605
    8. ')' → logprob: -10.047648429870605
    9. 'get' → logprob: -10.172648429870605
    10. ' ' → logprob: -10.297648429870605

Token 101: '):
' (ID: 1883)
  Prédit: '):'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '):' → logprob: -0.033685352653265
    2. ')' → logprob: -3.4086854457855225
    3. ' ):' → logprob: -10.908685684204102
    4. ':' → logprob: -11.533685684204102
    5. '):
' → logprob: -11.783685684204102
    6. ',' → logprob: -13.408685684204102
    7. ' )' → logprob: -14.158685684204102
    8. '():' → logprob: -15.408685684204102
    9. ' ' → logprob: -15.783685684204102
    10. '(' → logprob: -15.783685684204102

Token 102: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.9007291197776794
    2. ' n' → logprob: -1.2757291793823242
    3. ' return' → logprob: -1.2757291793823242
    4. 'n' → logprob: -3.650729179382324
    5. ' s' → logprob: -5.400729179382324
    6. 'return' → logprob: -5.525729179382324
    7. ' (' → logprob: -8.150729179382324
    8. '(n' → logprob: -8.275729179382324
    9. 's' → logprob: -9.525729179382324
    10. '    ' → logprob: -9.775729179382324

Token 103: ' return' (ID: 622)
  Prédit: ' return'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' return' → logprob: -0.5736826658248901
    2. ' n' → logprob: -1.1986826658248901
    3. ' s' → logprob: -2.1986827850341797
    4. 'n' → logprob: -4.44868278503418
    5. 'return' (adapté à ' return') → logprob: -4.69868278503418
    6. 's' → logprob: -5.94868278503418
    7. '   ' → logprob: -7.94868278503418
    8. ' (' → logprob: -8.94868278503418
    9. '(s' → logprob: -9.94868278503418
    10. '(n' → logprob: -10.94868278503418

Token 104: ' n' (ID: 297)
  Prédit: ' n'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' n' → logprob: -0.04941926524043083
    2. 'n' → logprob: -3.0494191646575928
    3. ' s' → logprob: -7.299419403076172
    4. ' (' → logprob: -9.674419403076172
    5. 's' → logprob: -9.924419403076172
    6. '(n' → logprob: -10.174419403076172
    7. ' ' → logprob: -13.424419403076172
    8. '(s' → logprob: -13.674419403076172
    9. ' ' → logprob: -13.799419403076172
    10. '(' → logprob: -14.174419403076172

Token 105: ' %' (ID: 1851)
  Prédit: ' %'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' %' → logprob: -0.16025753319263458
    2. '%' → logprob: -1.9102575778961182
    3. '%s' → logprob: -11.035257339477539
    4. ' ' → logprob: -11.035257339477539
    5. ' ' → logprob: -13.785257339477539
    6. '%d' → logprob: -17.41025733947754
    7. '%i' → logprob: -17.41025733947754
    8. ' %
' → logprob: -17.78525733947754
    9. '%n' → logprob: -18.66025733947754
    10. '```' → logprob: -19.41025733947754

Token 106: ' s' (ID: 265)
  Prédit: 's'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 's' → logprob: -0.00861468818038702
    2. ' s' → logprob: -4.758614540100098
    3. ' ' → logprob: -15.883614540100098
    4. ' ' → logprob: -18.008615493774414
    5. '_s' → logprob: -18.258615493774414
    6. '	s' → logprob: -18.258615493774414
    7. '(s' → logprob: -20.383615493774414
    8. '  ' → logprob: -20.633615493774414
    9. '   ' → logprob: -20.883615493774414
    10. '>s' → logprob: -20.883615493774414

Token 107: ' ==' (ID: 951)
  Prédit: ' =='
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' ==' → logprob: -0.4741206467151642
    2. '==' → logprob: -0.9741206169128418
    3. '=' → logprob: -10.84912109375
    4. ' ' → logprob: -10.97412109375
    5. '0' → logprob: -12.22412109375
    6. '()==' → logprob: -14.34912109375
    7. ' ' → logprob: -14.72412109375
    8. '===' → logprob: -14.84912109375
    9. '==
' → logprob: -15.09912109375
    10. ' =' → logprob: -15.47412109375

Token 108: ' ' (ID: 220)
  Prédit: '0'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '0' → logprob: -5.157039049663581e-05
    2. ' ' → logprob: -9.875051498413086
    3. '   ' → logprob: -19.500051498413086
    4. '۰' → logprob: -21.250051498413086
    5. '00' → logprob: -21.875051498413086
    6. '  ' → logprob: -22.500051498413086
    7. '```' → logprob: -22.750051498413086
    8. ' ' → logprob: -23.375051498413086
    9. ' ' → logprob: -23.375051498413086
    10. '०' → logprob: -23.500051498413086

Token 109: '0' (ID: 15)
  Prédit: '0'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '0' → logprob: -2.5776860184123507e-06
    2. ' ' → logprob: -12.87500286102295
    3. '۰' → logprob: -21.750001907348633
    4. '00' → logprob: -22.500001907348633
    5. '   ' → logprob: -22.750001907348633
    6. '```' → logprob: -23.125001907348633
    7. '000' → logprob: -23.875001907348633
    8. 'o' → logprob: -24.375001907348633
    9. '०' → logprob: -24.375001907348633
    10. '０' → logprob: -24.625001907348633

Token 110: '

' (ID: 279)
  Prédit: ''
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False

Token 111: 'def' (ID: 1314)
  Prédit: 'def'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'def' → logprob: -0.04875427857041359
    2. '

' → logprob: -3.1737542152404785
    3. '
' → logprob: -5.4237542152404785
    4. 'n' → logprob: -7.5487542152404785
    5. '```' → logprob: -7.6737542152404785
    6. '<|end|>' → logprob: -9.298754692077637
    7. ' 

' → logprob: -9.548754692077637
    8. '\n' → logprob: -10.048754692077637
    9. '  

' → logprob: -10.798754692077637
    10. '



' → logprob: -11.048754692077637

Token 112: ' print' (ID: 2123)
  Prédit: 'main'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'main' → logprob: -0.20158573985099792
    2. ' main' → logprob: -1.7015857696533203
    3. 'process' → logprob: -8.95158576965332
    4. 'check' → logprob: -10.57658576965332
    5. ' process' → logprob: -12.07658576965332
    6. ' check' → logprob: -12.07658576965332
    7. 'calculate' → logprob: -12.95158576965332
    8. 'solve' → logprob: -14.70158576965332
    9. '	main' → logprob: -14.82658576965332
    10. 'def' → logprob: -14.95158576965332

Token 113: '_yes' (ID: 151898)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '(' → logprob: -0.7145814895629883
    2. '_result' → logprob: -0.7145814895629883
    3. 'result' → logprob: -4.839581489562988
    4. '()' → logprob: -5.589581489562988
    5. '_results' → logprob: -5.839581489562988
    6. '_' → logprob: -6.339581489562988
    7. '_output' → logprob: -6.589581489562988
    8. '(n' → logprob: -7.339581489562988
    9. '_div' → logprob: -7.464581489562988
    10. '("' → logprob: -7.714581489562988

Token 114: '():
' (ID: 8595)
  Prédit: '():'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '():' → logprob: -0.1281217485666275
    2. '()' → logprob: -2.128121852874756
    3. '():
' → logprob: -6.753121852874756
    4. '(' → logprob: -11.753121376037598
    5. ' ()' → logprob: -11.753121376037598
    6. '():

' → logprob: -12.878121376037598
    7. ' ():' → logprob: -13.003121376037598
    8. '("' → logprob: -13.628121376037598
    9. '()">' → logprob: -13.753121376037598
    10. '()`' → logprob: -14.253121376037598

Token 115: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -1.7432603272027336e-06
    2. ' print' → logprob: -13.500001907348633
    3. 'print' → logprob: -16.125001907348633
    4. '    
' → logprob: -16.750001907348633
    5. '   ' → logprob: -16.875001907348633
    6. '(' → logprob: -17.875001907348633
    7. '
' → logprob: -18.000001907348633
    8. '       ' → logprob: -18.000001907348633
    9. '	print' → logprob: -18.375001907348633
    10. '```' → logprob: -18.500001907348633

Token 116: ' print' (ID: 2123)
  Prédit: 'print'
  Correct (stricte): False
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'print' (adapté à ' print') → logprob: -0.002054500626400113
    2. '   ' → logprob: -6.502054691314697
    3. ' print' → logprob: -7.502054691314697
    4. '```' → logprob: -17.50205421447754
    5. '	print' → logprob: -18.50205421447754
    6. ' ' → logprob: -19.87705421447754
    7. 'pr' → logprob: -20.37705421447754
    8. '  ' → logprob: -21.37705421447754
    9. '`' → logprob: -21.75205421447754
    10. 'prin' → logprob: -21.87705421447754

Token 117: '("' (ID: 568)
  Prédit: '("'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '("' → logprob: -0.004282346460968256
    2. '(' → logprob: -5.504282474517822
    3. '('' → logprob: -8.504281997680664
    4. '("("' → logprob: -14.879281997680664
    5. '(True' → logprob: -15.254281997680664
    6. '(
' → logprob: -15.254281997680664
    7. '"' → logprob: -16.129281997680664
    8. '()' → logprob: -16.129281997680664
    9. ' ("' → logprob: -16.879281997680664
    10. '("'' → logprob: -17.254281997680664

Token 118: 'Yes' (ID: 13022)
  Prédit: 'YES'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'YES' → logprob: -0.22576452791690826
    2. 'Yes' → logprob: -1.600764513015747
    3. 'yes' → logprob: -8.100764274597168
    4. 'Y' → logprob: -10.850764274597168
    5. 'YE' → logprob: -12.225764274597168
    6. 'True' → logprob: -12.350764274597168
    7. 'Ye' → logprob: -12.600764274597168
    8. '"' → logprob: -12.725764274597168
    9. ' YES' → logprob: -13.350764274597168
    10. ' Yes' → logprob: -13.600764274597168

Token 119: '")

' (ID: 10822)
  Prédit: '")'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '")' → logprob: -3.4121114822482923e-06
    2. '")
' → logprob: -12.750003814697266
    3. '")

' → logprob: -15.125003814697266
    4. '"' → logprob: -16.625003814697266
    5. '!")' → logprob: -17.000003814697266
    6. ')")' → logprob: -17.125003814697266
    7. ')' → logprob: -18.125003814697266
    8. 'def' → logprob: -18.500003814697266
    9. ' ")' → logprob: -19.000003814697266
    10. '\")' → logprob: -19.500003814697266

Token 120: 'def' (ID: 1314)
  Prédit: 'def'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'def' → logprob: -0.0001278534036828205
    2. '
' → logprob: -9.000127792358398
    3. '

' → logprob: -12.500127792358398
    4. ' def' → logprob: -14.500127792358398
    5. '```' → logprob: -17.1251277923584
    6. 'd' → logprob: -18.3751277923584
    7. '\' → logprob: -18.5001277923584
    8. '	def' → logprob: -18.6251277923584
    9. 'ndef' → logprob: -18.6251277923584
    10. '(def' → logprob: -19.0001277923584

Token 121: ' print' (ID: 2123)
  Prédit: 'print'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'print' → logprob: -0.004352860152721405
    2. ' print' → logprob: -5.754353046417236
    3. 'def' → logprob: -6.754353046417236
    4. '_print' → logprob: -12.254352569580078
    5. ' def' → logprob: -12.504352569580078
    6. 'pr' → logprob: -15.629352569580078
    7. '.print' → logprob: -16.379352569580078
    8. 'Print' → logprob: -18.254352569580078
    9. '	print' → logprob: -18.629352569580078
    10. 'prin' → logprob: -18.629352569580078

Token 122: '_no' (ID: 13575)
  Prédit: '_no'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_no' → logprob: -0.00011129142512800172
    2. '_' → logprob: -10.00011157989502
    3. '_No' → logprob: -10.25011157989502
    4. '_NO' → logprob: -11.00011157989502
    5. '_n' → logprob: -12.25011157989502
    6. '("_' → logprob: -12.62511157989502
    7. 'No' → logprob: -12.62511157989502
    8. '_none' → logprob: -14.25011157989502
    9. '_not' → logprob: -14.62511157989502
    10. '("' → logprob: -14.87511157989502

Token 123: '():
' (ID: 8595)
  Prédit: '():'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '():' → logprob: -0.00023679454170633107
    2. '():
' → logprob: -8.500236511230469
    3. '()' → logprob: -10.375236511230469
    4. ' ():' → logprob: -13.125236511230469
    5. '():
' → logprob: -16.50023651123047
    6. ':' → logprob: -17.75023651123047
    7. '():

' → logprob: -17.87523651123047
    8. ' ()' → logprob: -19.12523651123047
    9. '(' → logprob: -19.25023651123047
    10. '()>' → logprob: -19.62523651123047

Token 124: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.006398799829185009
    2. 'print' → logprob: -5.256398677825928
    3. ' print' → logprob: -6.756398677825928
    4. '	print' → logprob: -14.256399154663086
    5. ' ' → logprob: -16.756399154663086
    6. '(print' → logprob: -16.881399154663086
    7. '       ' → logprob: -16.881399154663086
    8. '```' → logprob: -17.506399154663086
    9. '  ' → logprob: -17.756399154663086
    10. '   ' → logprob: -18.756399154663086

Token 125: ' print' (ID: 2123)
  Prédit: 'print'
  Correct (stricte): False
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'print' (adapté à ' print') → logprob: -0.00021140782337170094
    2. ' print' → logprob: -8.500211715698242
    3. '   ' → logprob: -11.750211715698242
    4. '	print' → logprob: -18.000211715698242
    5. 'pr' → logprob: -19.000211715698242
    6. '(print' → logprob: -20.250211715698242
    7. ' ' → logprob: -20.500211715698242
    8. 'prin' → logprob: -20.875211715698242
    9. '.print' → logprob: -21.125211715698242
    10. '```' → logprob: -21.375211715698242

Token 126: '("' (ID: 568)
  Prédit: '("'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '("' → logprob: -7.505351095460355e-05
    2. '(' → logprob: -9.750075340270996
    3. '_no' → logprob: -11.500075340270996
    4. '()' → logprob: -13.000075340270996
    5. '"No' → logprob: -13.250075340270996
    6. 'No' → logprob: -13.750075340270996
    7. '_No' → logprob: -14.500075340270996
    8. '(No' → logprob: -14.625075340270996
    9. '("")' → logprob: -15.625075340270996
    10. '('' → logprob: -15.625075340270996

Token 127: 'No' (ID: 3160)
  Prédit: 'No'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'No' → logprob: -2.15310683415737e-05
    2. '"No' → logprob: -10.750021934509277
    3. ' No' → logprob: -17.25002098083496
    4. 'NO' → logprob: -18.75002098083496
    5. '")' → logprob: -20.00002098083496
    6. '"' → logprob: -21.37502098083496
    7. '“No' → logprob: -21.75002098083496
    8. '_No' → logprob: -22.25002098083496
    9. 'N' → logprob: -22.37502098083496
    10. '>No' → logprob: -23.00002098083496

Token 128: '")

' (ID: 10822)
  Prédit: '")'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '")' → logprob: -4.215330409351736e-05
    2. '()' → logprob: -10.250041961669922
    3. ')' → logprob: -12.250041961669922
    4. '")
' → logprob: -13.875041961669922
    5. ')")' → logprob: -14.000041961669922
    6. '')' → logprob: -16.875041961669922
    7. '"' → logprob: -17.125041961669922
    8. '")

' → logprob: -17.375041961669922
    9. '())' → logprob: -17.625041961669922
    10. '}")' → logprob: -18.500041961669922

Token 129: 'def' (ID: 1314)
  Prédit: 'def'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'def' → logprob: -4.320199877838604e-07
    2. 'n' → logprob: -15.75
    3. 'if' → logprob: -16.0
    4. ' def' → logprob: -17.375
    5. 'ndef' → logprob: -18.25
    6. '```' → logprob: -18.75
    7. '#' → logprob: -18.875
    8. 'for' → logprob: -19.125
    9. '  
' → logprob: -19.875
    10. '    
' → logprob: -20.0

Token 130: ' main' (ID: 2758)
  Prédit: ' main'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' main' → logprob: -0.3152056932449341
    2. 'main' → logprob: -1.315205693244934
    3. 'def' → logprob: -6.3152055740356445
    4. ' def' → logprob: -9.065205574035645
    5. ' check' → logprob: -12.315205574035645
    6. '
' → logprob: -12.690205574035645
    7. '_main' → logprob: -12.815205574035645
    8. ' process' → logprob: -12.940205574035645
    9. 'process' → logprob: -13.190205574035645
    10. 'check' → logprob: -13.815205574035645

Token 131: '():
' (ID: 8595)
  Prédit: '():'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '():' → logprob: -2.0339031834737398e-05
    2. ' ():' → logprob: -11.000020027160645
    3. '():
' → logprob: -12.750020027160645
    4. '()' → logprob: -14.750020027160645
    5. '_' → logprob: -15.500020027160645
    6. '(' → logprob: -16.12502098083496
    7. '():
' → logprob: -18.25002098083496
    8. 'def' → logprob: -18.37502098083496
    9. '(":' → logprob: -19.37502098083496
    10. ':' → logprob: -19.37502098083496

Token 132: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.09102950990200043
    2. 'n' → logprob: -2.466029405593872
    3. ' n' → logprob: -6.216029644012451
    4. '
' → logprob: -9.841029167175293
    5. '(n' → logprob: -10.966029167175293
    6. '	n' → logprob: -11.591029167175293
    7. '    
' → logprob: -12.091029167175293
    8. ',n' → logprob: -13.341029167175293
    9. '```' → logprob: -13.466029167175293
    10. ')n' → logprob: -14.716029167175293

Token 133: ' n' (ID: 297)
  Prédit: 'n'
  Correct (stricte): False
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'n' (adapté à ' n') → logprob: -0.6981088519096375
    2. ' n' → logprob: -0.6981088519096375
    3. '   ' → logprob: -5.323108673095703
    4. '    
' → logprob: -10.573108673095703
    5. ' 
' → logprob: -10.948108673095703
    6. 'def' → logprob: -12.073108673095703
    7. '  ' → logprob: -12.573108673095703
    8. ' ' → logprob: -12.823108673095703
    9. '    ' → logprob: -13.198108673095703
    10. '   
' → logprob: -13.198108673095703

Token 134: ' =' (ID: 314)
  Prédit: ' ='
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' =' → logprob: -0.00593235157430172
    2. '=' → logprob: -5.130932331085205
    3. '   ' → logprob: -13.130932807922363
    4. ' ' → logprob: -14.005932807922363
    5. ' =
' → logprob: -14.630932807922363
    6. ',' → logprob: -15.505932807922363
    7. ' ' → logprob: -15.880932807922363
    8. ')' → logprob: -16.630931854248047
    9. '=int' → logprob: -17.255931854248047
    10. '    ' → logprob: -17.505931854248047

Token 135: ' get' (ID: 717)
  Prédit: ' get'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' get' → logprob: -0.16022484004497528
    2. 'get' → logprob: -1.9102247953414917
    3. '	get' → logprob: -15.160224914550781
    4. '(get' → logprob: -15.285224914550781
    5. '   ' → logprob: -16.91022491455078
    6. '=get' → logprob: -17.53522491455078
    7. '_get' → logprob: -17.78522491455078
    8. '    ' → logprob: -18.41022491455078
    9. '.get' → logprob: -18.53522491455078
    10. ')get' → logprob: -18.66022491455078

Token 136: '_input' (ID: 12507)
  Prédit: '_input'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_input' → logprob: -4.320199877838604e-07
    2. '_' → logprob: -14.875
    3. ' _' → logprob: -18.25
    4. '_val' → logprob: -18.375
    5. '_in' → logprob: -19.0
    6. '_value' → logprob: -19.25
    7. '_output' → logprob: -20.0
    8. '_inputs' → logprob: -20.25
    9. '_Input' → logprob: -20.375
    10. 'input' → logprob: -20.875

Token 137: '()
' (ID: 1234)
  Prédit: '()'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '()' → logprob: -1.282920129597187e-05
    2. '()
' → logprob: -11.375012397766113
    3. ' ()' → logprob: -15.375012397766113
    4. '()

' → logprob: -15.375012397766113
    5. '()`' → logprob: -15.625012397766113
    6. '()\' → logprob: -15.750012397766113
    7. '(),' → logprob: -16.75001335144043
    8. '_' → logprob: -17.12501335144043
    9. '();' → logprob: -17.25001335144043
    10. '(' → logprob: -17.37501335144043

Token 138: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.0356917567551136
    2. ' s' → logprob: -3.910691738128662
    3. 's' → logprob: -4.285691738128662
    4. ' val' → logprob: -7.410691738128662
    5. 'val' → logprob: -8.03569221496582
    6. '    
' → logprob: -8.91069221496582
    7. ' ' → logprob: -10.03569221496582
    8. '
' → logprob: -10.53569221496582
    9. '    ' → logprob: -10.53569221496582
    10. '  ' → logprob: -10.91069221496582

Token 139: ' val' (ID: 1459)
  Prédit: 'val'
  Correct (stricte): False
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'val' (adapté à ' val') → logprob: -0.39101964235305786
    2. 's' → logprob: -1.141019582748413
    3. '   ' → logprob: -6.141019821166992
    4. ' val' → logprob: -7.016019821166992
    5. 'sum' → logprob: -7.891019821166992
    6. ' s' → logprob: -8.016019821166992
    7. 'v' → logprob: -9.266019821166992
    8. 'original' → logprob: -9.266019821166992
    9. '    
' → logprob: -10.391019821166992
    10. 'total' → logprob: -10.516019821166992

Token 140: ' =' (ID: 314)
  Prédit: ' ='
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' =' → logprob: -0.0017027945723384619
    2. '=' → logprob: -6.376702785491943
    3. ',' → logprob: -15.251703262329102
    4. '   ' → logprob: -15.626703262329102
    5. ' ' → logprob: -15.751703262329102
    6. '=n' → logprob: -17.7517032623291
    7. ' =
' → logprob: -18.1267032623291
    8. ' ' → logprob: -18.3767032623291
    9. '_' → logprob: -18.5017032623291
    10. ' ,' → logprob: -18.8767032623291

Token 141: ' initialize' (ID: 18400)
  Prédit: 'initialize'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'initialize' → logprob: -0.5824504494667053
    2. ' initialize' → logprob: -1.7074503898620605
    3. 'n' → logprob: -1.8324503898620605
    4. ' n' → logprob: -2.3324503898620605
    5. '   ' → logprob: -5.8324503898620605
    6. '	initialize' → logprob: -10.207450866699219
    7. '    ' → logprob: -10.582450866699219
    8. 'initial' → logprob: -11.769950866699219
    9. ' ' → logprob: -11.832450866699219
    10. '  ' → logprob: -11.832450866699219

Token 142: '_val' (ID: 13694)
  Prédit: '_val'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_val' → logprob: -6.869017852295656e-06
    2. 'val' → logprob: -12.375006675720215
    3. '_' → logprob: -12.875006675720215
    4. '(val' → logprob: -17.62500762939453
    5. '_n' → logprob: -17.87500762939453
    6. '_VAL' → logprob: -18.25000762939453
    7. '_var' → logprob: -18.25000762939453
    8. 'Val' → logprob: -18.37500762939453
    9. 'n' → logprob: -18.87500762939453
    10. ' _' → logprob: -18.87500762939453

Token 143: '(n' (ID: 2406)
  Prédit: '(n'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(n' → logprob: -2.935296834039036e-06
    2. '(' → logprob: -12.75000286102295
    3. ' (' → logprob: -17.625003814697266
    4. 'n' → logprob: -19.125003814697266
    5. '(
' → logprob: -19.500003814697266
    6. '\(' → logprob: -20.875003814697266
    7. '(noun' → logprob: -21.500003814697266
    8. '(len' → logprob: -22.625003814697266
    9. '```' → logprob: -22.625003814697266
    10. '(s' → logprob: -23.000003814697266

Token 144: ')
' (ID: 446)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')' → logprob: -0.0015047440538182855
    2. ')
' → logprob: -6.501504898071289
    3. '   ' → logprob: -13.376504898071289
    4. ' )' → logprob: -15.126504898071289
    5. ')

' → logprob: -15.251504898071289
    6. ' ' → logprob: -16.00150489807129
    7. ')
' → logprob: -16.25150489807129
    8. ')n' → logprob: -17.37650489807129
    9. '<|end|>' → logprob: -17.50150489807129
    10. '),' → logprob: -18.00150489807129

Token 145: '   ' (ID: 271)
  Prédit: 's'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 's' → logprob: -0.19743339717388153
    2. '   ' → logprob: -1.822433352470398
    3. ' s' → logprob: -4.0724334716796875
    4. 'sum' → logprob: -7.8224334716796875
    5. 'total' → logprob: -10.572433471679688
    6. ' ' → logprob: -10.822433471679688
    7. '  ' → logprob: -10.947433471679688
    8. ' sum' → logprob: -11.197433471679688
    9. ' total' → logprob: -12.822433471679688
    10. '_sum' → logprob: -12.822433471679688

Token 146: ' s' (ID: 265)
  Prédit: 's'
  Correct (stricte): False
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 's' (adapté à ' s') → logprob: -0.00023286080977413803
    2. 'total' → logprob: -9.000232696533203
    3. 'sum' → logprob: -9.375232696533203
    4. ' s' → logprob: -11.125232696533203
    5. '_sum' → logprob: -12.750232696533203
    6. 'summ' → logprob: -12.750232696533203
    7. '_s' → logprob: -12.875232696533203
    8. 'current' → logprob: -14.625232696533203
    9. '   ' → logprob: -15.125232696533203
    10. 'result' → logprob: -15.375232696533203

Token 147: ' =' (ID: 314)
  Prédit: ' ='
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' =' → logprob: -0.029807081446051598
    2. '=' → logprob: -3.5298070907592773
    3. 'um' → logprob: -10.654807090759277
    4. '_' → logprob: -10.904807090759277
    5. ' ' → logprob: -11.404807090759277
    6. '   ' → logprob: -13.029807090759277
    7. ',' → logprob: -14.904807090759277
    8. 'u' → logprob: -15.529807090759277
    9. ' ' → logprob: -15.779807090759277
    10. '  ' → logprob: -16.15480613708496

Token 148: ' initialize' (ID: 18400)
  Prédit: 'initialize'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'initialize' → logprob: -0.025245055556297302
    2. '0' → logprob: -3.775244951248169
    3. ' initialize' → logprob: -6.275245189666748
    4. ' ' → logprob: -9.65024471282959
    5. '	initialize' → logprob: -10.65024471282959
    6. '   ' → logprob: -11.77524471282959
    7. 'itialize' → logprob: -11.77524471282959
    8. '  ' → logprob: -12.27524471282959
    9. '_initialize' → logprob: -13.27524471282959
    10. 'initial' → logprob: -13.90024471282959

Token 149: '_sum' (ID: 29859)
  Prédit: '_sum'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_sum' → logprob: -1.3856492842023727e-06
    2. 'sum' → logprob: -13.625000953674316
    3. '_' → logprob: -15.750000953674316
    4. '_val' → logprob: -17.000001907348633
    5. '_s' → logprob: -18.500001907348633
    6. ' sum' → logprob: -18.750001907348633
    7. '0' → logprob: -19.875001907348633
    8. '_zero' → logprob: -20.375001907348633
    9. '(sum' → logprob: -20.875001907348633
    10. '_add' → logprob: -21.250001907348633

Token 150: '()
' (ID: 1234)
  Prédit: '()'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '()' → logprob: -0.00037013579276390374
    2. '()
' → logprob: -8.000370025634766
    3. ' ()' → logprob: -10.750370025634766
    4. '(' → logprob: -11.875370025634766
    5. '()\' → logprob: -13.125370025634766
    6. '()

' → logprob: -13.875370025634766
    7. '()
' → logprob: -14.000370025634766
    8. '();' → logprob: -14.750370025634766
    9. '(),' → logprob: -14.750370025634766
    10. '(s' → logprob: -14.875370025634766

Token 151: '   ' (ID: 271)
  Prédit: '
'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '
' → logprob: -0.014869612641632557
    2. '   ' → logprob: -4.889869689941406
    3. '    
' → logprob: -5.639869689941406
    4. ' 
' → logprob: -7.014869689941406
    5. '  
' → logprob: -7.014869689941406
    6. ' while' → logprob: -7.514869689941406
    7. 'while' → logprob: -8.014869689941406
    8. '	while' → logprob: -8.389869689941406
    9. '\n' → logprob: -8.389869689941406
    10. '
' → logprob: -8.889869689941406

Token 152: ' while' (ID: 2049)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.649618923664093
    2. ' while' → logprob: -0.899618923664093
    3. 'while' (adapté à ' while') → logprob: -2.6496188640594482
    4. '	while' → logprob: -8.274619102478027
    5. '    
' → logprob: -9.399619102478027
    6. ' 
' → logprob: -12.899619102478027
    7. 'While' → logprob: -12.899619102478027
    8. '
' → logprob: -13.024619102478027
    9. '```' → logprob: -13.649619102478027
    10. '   ' → logprob: -14.024619102478027

Token 153: ' is' (ID: 382)
  Prédit: ' is'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' is' → logprob: -0.38699617981910706
    2. 'is' → logprob: -1.1369961500167847
    3. '(is' → logprob: -9.011996269226074
    4. '(' → logprob: -13.886996269226074
    5. ' ' → logprob: -14.261996269226074
    6. '   ' → logprob: -14.386996269226074
    7. '	is' → logprob: -14.636996269226074
    8. ' (' → logprob: -15.886996269226074
    9. 'True' → logprob: -16.136995315551758
    10. ')is' → logprob: -16.136995315551758

Token 154: '_non' (ID: 52193)
  Prédit: '_non'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_non' → logprob: -2.696889623621246e-06
    2. '_' → logprob: -13.50000286102295
    3. 'non' → logprob: -14.00000286102295
    4. '_n' → logprob: -15.37500286102295
    5. '_not' → logprob: -15.75000286102295
    6. '_no' → logprob: -18.000001907348633
    7. ' _' → logprob: -18.500001907348633
    8. '__' → logprob: -18.625001907348633
    9. '
' → logprob: -18.625001907348633
    10. '_
' → logprob: -18.750001907348633

Token 155: '_zero' (ID: 53468)
  Prédit: '_zero'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_zero' → logprob: -0.0003386806638445705
    2. '_' → logprob: -8.125338554382324
    3. 'zero' → logprob: -10.375338554382324
    4. '_z' → logprob: -12.250338554382324
    5. '_ZERO' → logprob: -12.875338554382324
    6. '0' → logprob: -13.000338554382324
    7. '_empty' → logprob: -14.750338554382324
    8. ' _' → logprob: -15.250338554382324
    9. 'z' → logprob: -15.375338554382324
    10. '-zero' → logprob: -15.500338554382324

Token 156: '(val' (ID: 17391)
  Prédit: '(val'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(val' → logprob: -0.002572090830653906
    2. '(' → logprob: -6.002572059631348
    3. ' (' → logprob: -9.252572059631348
    4. '(var' → logprob: -15.502572059631348
    5. ' ' → logprob: -16.127573013305664
    6. '(vals' → logprob: -16.377573013305664
    7. 'val' → logprob: -16.752573013305664
    8. '   ' → logprob: -17.377573013305664
    9. ',val' → logprob: -17.377573013305664
    10. '	val' → logprob: -17.752573013305664

Token 157: '):
' (ID: 1883)
  Prédit: '):'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '):' → logprob: -0.000696111936122179
    2. ' ):' → logprob: -7.500696182250977
    3. ')' → logprob: -9.750696182250977
    4. '():' → logprob: -9.875696182250977
    5. '):
' → logprob: -10.500696182250977
    6. ':' → logprob: -13.125696182250977
    7. '()' → logprob: -13.125696182250977
    8. '   ' → logprob: -13.750696182250977
    9. ' ' → logprob: -15.000696182250977
    10. ' ():' → logprob: -15.875696182250977

Token 158: '       ' (ID: 309)
  Prédit: '       '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '       ' → logprob: -0.00939797330647707
    2. '   ' → logprob: -5.009397983551025
    3. ':' → logprob: -7.384397983551025
    4. ' digit' → logprob: -7.384397983551025
    5. 'digit' → logprob: -8.009397506713867
    6. 'd' → logprob: -8.509397506713867
    7. '
' → logprob: -8.634397506713867
    8. '    
' → logprob: -9.259397506713867
    9. '        
' → logprob: -9.759397506713867
    10. ' d' → logprob: -10.009397506713867

Token 159: ' digit' (ID: 19181)
  Prédit: 'digit'
  Correct (stricte): False
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'digit' (adapté à ' digit') → logprob: -0.9752590656280518
    2. '   ' → logprob: -1.1002590656280518
    3. ' digit' → logprob: -1.4752590656280518
    4. '       ' → logprob: -3.1002590656280518
    5. 'd' → logprob: -4.350258827209473
    6. ' d' → logprob: -6.600258827209473
    7. ' last' → logprob: -7.100258827209473
    8. 'last' → logprob: -7.975258827209473
    9. '_digit' → logprob: -8.975258827209473
    10. '	d' → logprob: -9.100258827209473

Token 160: ' =' (ID: 314)
  Prédit: ' ='
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' =' → logprob: -0.016087394207715988
    2. '=' → logprob: -4.141087532043457
    3. '_' → logprob: -9.891087532043457
    4. ' ' → logprob: -13.641087532043457
    5. 's' → logprob: -15.016087532043457
    6. '=get' → logprob: -15.516087532043457
    7. '  ' → logprob: -15.766087532043457
    8. ')' → logprob: -15.891087532043457
    9. ' _' → logprob: -16.01608657836914
    10. ' ' → logprob: -16.01608657836914

Token 161: ' get' (ID: 717)
  Prédit: ' get'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' get' → logprob: -0.12692978978157043
    2. 'get' → logprob: -2.126929759979248
    3. '	get' → logprob: -13.876930236816406
    4. '_get' → logprob: -14.751930236816406
    5. '(get' → logprob: -15.876930236816406
    6. '   ' → logprob: -16.501930236816406
    7. '=get' → logprob: -16.501930236816406
    8. '.get' → logprob: -16.751930236816406
    9. '[get' → logprob: -16.751930236816406
    10. ' ' → logprob: -17.126930236816406

Token 162: '_last' (ID: 26359)
  Prédit: '_last'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_last' → logprob: -3.7697225252486533e-06
    2. '_' → logprob: -13.000003814697266
    3. 'last' → logprob: -13.875003814697266
    4. '_next' → logprob: -15.375003814697266
    5. '_first' → logprob: -16.375003814697266
    6. '_LAST' → logprob: -16.750003814697266
    7. ' last' → logprob: -17.000003814697266
    8. '_val' → logprob: -17.375003814697266
    9. ' _' → logprob: -17.625003814697266
    10. '_Last' → logprob: -18.000003814697266

Token 163: '_digit' (ID: 119592)
  Prédit: '_digit'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_digit' → logprob: -3.845798710244708e-05
    2. 'digit' → logprob: -10.375038146972656
    3. '_' → logprob: -12.250038146972656
    4. '_d' → logprob: -13.375038146972656
    5. 'Digit' → logprob: -15.500038146972656
    6. '(d' → logprob: -15.875038146972656
    7. ' digit' → logprob: -16.000038146972656
    8. '_token' → logprob: -16.500038146972656
    9. '_digits' → logprob: -16.750038146972656
    10. '-digit' → logprob: -16.750038146972656

Token 164: '(val' (ID: 17391)
  Prédit: '(val'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(val' → logprob: -0.029755808413028717
    2. '(' → logprob: -3.5297558307647705
    3. ' (' → logprob: -12.279755592346191
    4. '(
' → logprob: -15.404755592346191
    5. 'val' → logprob: -16.279756546020508
    6. '(valor' → logprob: -16.529756546020508
    7. '(vals' → logprob: -16.654756546020508
    8. '(

' → logprob: -16.779756546020508
    9. '(v' → logprob: -16.904756546020508
    10. ',val' → logprob: -17.279756546020508

Token 165: ')
' (ID: 446)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')' → logprob: -0.029796430841088295
    2. ')
' → logprob: -3.5297963619232178
    3. ')
' → logprob: -10.654796600341797
    4. '       ' → logprob: -11.029796600341797
    5. '   ' → logprob: -12.279796600341797
    6. ')

' → logprob: -14.654796600341797
    7. ' )' → logprob: -14.904796600341797
    8. ')d' → logprob: -15.404796600341797
    9. ' )
' → logprob: -16.029796600341797
    10. ' ' → logprob: -16.404796600341797

Token 166: '       ' (ID: 309)
  Prédit: '       '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '       ' → logprob: -0.06745833158493042
    2. '
' → logprob: -2.817458391189575
    3. '        
' → logprob: -5.942458152770996
    4. 's' → logprob: -6.692458152770996
    5. ' s' → logprob: -7.317458152770996
    6. ' 
' → logprob: -7.817458152770996
    7. '    
' → logprob: -8.942458152770996
    8. '  
' → logprob: -9.067458152770996
    9. '   ' → logprob: -9.192458152770996
    10. '<|end|>' → logprob: -9.817458152770996

Token 167: ' s' (ID: 265)
  Prédit: ' s'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' s' → logprob: -0.16121625900268555
    2. 's' (adapté à ' s') → logprob: -1.9112162590026855
    3. 'val' → logprob: -7.6612162590026855
    4. ' val' → logprob: -8.286216735839844
    5. '       ' → logprob: -8.786216735839844
    6. ' ' → logprob: -10.536216735839844
    7. ' add' → logprob: -11.036216735839844
    8. ' 
' → logprob: -11.286216735839844
    9. '        ' → logprob: -11.536216735839844
    10. '	s' → logprob: -11.536216735839844

Token 168: ' =' (ID: 314)
  Prédit: ' ='
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' =' → logprob: -0.06196802109479904
    2. '=' → logprob: -2.8119680881500244
    3. ' ' → logprob: -15.936967849731445
    4. ',' → logprob: -16.186967849731445
    5. '	' → logprob: -16.936967849731445
    6. ' +=' → logprob: -17.186967849731445
    7. '    ' → logprob: -17.436967849731445
    8. '   ' → logprob: -17.561967849731445
    9. ')' → logprob: -17.811967849731445
    10. ' ' → logprob: -18.436967849731445

Token 169: ' add' (ID: 1147)
  Prédit: ' add'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' add' → logprob: -0.04858794063329697
    2. 'add' → logprob: -3.0485880374908447
    3. '	add' → logprob: -15.048587799072266
    4. '_add' → logprob: -16.423587799072266
    5. '(add' → logprob: -17.298587799072266
    6. ')add' → logprob: -17.423587799072266
    7. ' ' → logprob: -18.173587799072266
    8. '.add' → logprob: -18.173587799072266
    9. '   ' → logprob: -18.298587799072266
    10. ' ' → logprob: -18.423587799072266

Token 170: '_to' (ID: 5089)
  Prédit: '_to'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_to' → logprob: -1.1472419600977446e-06
    2. '_' → logprob: -14.125000953674316
    3. '(s' → logprob: -16.500001907348633
    4. 'to' → logprob: -17.250001907348633
    5. '   ' → logprob: -17.875001907348633
    6. ')_' → logprob: -18.125001907348633
    7. ' _' → logprob: -18.250001907348633
    8. '```' → logprob: -18.250001907348633
    9. '_from' → logprob: -18.375001907348633
    10. '__' → logprob: -18.875001907348633

Token 171: '_sum' (ID: 29859)
  Prédit: 'sum'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'sum' → logprob: -0.20153261721134186
    2. '_sum' → logprob: -1.7015326023101807
    3. 'um' → logprob: -9.951532363891602
    4. ' sum' → logprob: -10.076532363891602
    5. 's' → logprob: -10.701532363891602
    6. '_' → logprob: -12.826532363891602
    7. '(sum' → logprob: -13.451532363891602
    8. '_s' → logprob: -13.951532363891602
    9. 'summ' → logprob: -14.201532363891602
    10. '	sum' → logprob: -15.326532363891602

Token 172: '(s' (ID: 1858)
  Prédit: '(s'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(s' → logprob: -0.0017108784522861242
    2. '(' → logprob: -6.376710891723633
    3. ' (' → logprob: -11.751710891723633
    4. '(
' → logprob: -14.126710891723633
    5. 's' → logprob: -17.376710891723633
    6. ' ' → logprob: -18.376710891723633
    7. '(

' → logprob: -19.876710891723633
    8. ')' → logprob: -20.001710891723633
    9. '```' → logprob: -21.126710891723633
    10. '(
' → logprob: -21.126710891723633

Token 173: ',' (ID: 11)
  Prédit: ','
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ',' → logprob: -0.00412446865811944
    2. ',d' → logprob: -5.504124641418457
    3. ' ,' → logprob: -10.004124641418457
    4. 'd' → logprob: -14.504124641418457
    5. 'digit' → logprob: -15.879124641418457
    6. '(d' → logprob: -16.87912368774414
    7. ' ' → logprob: -17.37912368774414
    8. '	d' → logprob: -17.50412368774414
    9. ',
' → logprob: -17.62912368774414
    10. ' d' → logprob: -18.37912368774414

Token 174: ' digit' (ID: 19181)
  Prédit: ' digit'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' digit' → logprob: -0.03804344683885574
    2. 'digit' → logprob: -3.28804349899292
    3. ')' → logprob: -14.663043022155762
    4. ' ' → logprob: -14.913043022155762
    5. '_digit' → logprob: -14.913043022155762
    6. 'igit' → logprob: -15.038043022155762
    7. ' ' → logprob: -15.413043022155762
    8. '-digit' → logprob: -15.663043022155762
    9. '	d' → logprob: -16.288043975830078
    10. ' d' → logprob: -16.413043975830078

Token 175: ')
' (ID: 446)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')' → logprob: -0.3873308002948761
    2. ')
' → logprob: -1.1373307704925537
    3. '       ' → logprob: -7.762331008911133
    4. '   ' → logprob: -11.012331008911133
    5. ')
' → logprob: -12.012331008911133
    6. '<|end|>' → logprob: -12.387331008911133
    7. ')

' → logprob: -13.137331008911133
    8. ' )' → logprob: -13.637331008911133
    9. ' )
' → logprob: -13.637331008911133
    10. '
' → logprob: -14.387331008911133

Token 176: '       ' (ID: 309)
  Prédit: '       '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '       ' → logprob: -0.0049009425565600395
    2. '   ' → logprob: -5.379900932312012
    3. 'val' → logprob: -8.379900932312012
    4. ' val' → logprob: -10.629900932312012
    5. '        
' → logprob: -11.629900932312012
    6. '
' → logprob: -11.879900932312012
    7. '    
' → logprob: -12.379900932312012
    8. '	' → logprob: -13.629900932312012
    9. '	val' → logprob: -13.629900932312012
    10. '```' → logprob: -13.754900932312012

Token 177: ' val' (ID: 1459)
  Prédit: 'val'
  Correct (stricte): False
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'val' (adapté à ' val') → logprob: -0.25399404764175415
    2. ' val' → logprob: -1.5039939880371094
    3. '       ' → logprob: -6.253993988037109
    4. '   ' → logprob: -9.12899398803711
    5. 'update' → logprob: -10.62899398803711
    6. ' update' → logprob: -12.62899398803711
    7. '	val' → logprob: -12.75399398803711
    8. '_val' → logprob: -14.87899398803711
    9. '        
' → logprob: -15.87899398803711
    10. '           ' → logprob: -16.00399398803711

Token 178: ' =' (ID: 314)
  Prédit: ' ='
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' =' → logprob: -0.12692810595035553
    2. '=' → logprob: -2.1269280910491943
    3. ' ' → logprob: -17.626928329467773
    4. '＝' → logprob: -18.251928329467773
    5. ' =)' → logprob: -18.376928329467773
    6. '=}' → logprob: -19.501928329467773
    7. ',' → logprob: -19.626928329467773
    8. ' =
' → logprob: -19.876928329467773
    9. ')' → logprob: -19.876928329467773
    10. ' ' → logprob: -20.626928329467773

Token 179: ' update' (ID: 4027)
  Prédit: ' update'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' update' → logprob: -0.5759606957435608
    2. 'update' → logprob: -0.8259606957435608
    3. 'remove' → logprob: -11.200961112976074
    4. ' remove' → logprob: -11.825961112976074
    5. '(update' → logprob: -15.700961112976074
    6. '	update' → logprob: -16.700960159301758
    7. '.update' → logprob: -17.075960159301758
    8. '   ' → logprob: -17.325960159301758
    9. ' ' → logprob: -18.075960159301758
    10. '_update' → logprob: -18.200960159301758

Token 180: '_val' (ID: 13694)
  Prédit: '_val'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_val' → logprob: -5.88418151892256e-05
    2. 'val' → logprob: -9.750059127807617
    3. '(val' → logprob: -15.125059127807617
    4. '_' → logprob: -15.125059127807617
    5. ' val' → logprob: -19.250059127807617
    6. '[val' → logprob: -19.375059127807617
    7. 'Val' → logprob: -20.000059127807617
    8. '_VAL' → logprob: -21.000059127807617
    9. '	val' → logprob: -21.375059127807617
    10. ',val' → logprob: -21.750059127807617

Token 181: '(val' (ID: 17391)
  Prédit: '(val'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(val' → logprob: -2.3795937522663735e-05
    2. 'val' → logprob: -10.75002384185791
    3. '(' → logprob: -13.12502384185791
    4. '[val' → logprob: -16.250022888183594
    5. ',val' → logprob: -16.500022888183594
    6. ' val' → logprob: -16.875022888183594
    7. ' (' → logprob: -17.125022888183594
    8. '(vals' → logprob: -17.500022888183594
    9. '(var' → logprob: -18.375022888183594
    10. '(
' → logprob: -18.875022888183594

Token 182: ')
' (ID: 446)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')' → logprob: -8.180258191714529e-06
    2. ')
' → logprob: -11.750008583068848
    3. ' )' → logprob: -15.750008583068848
    4. '   ' → logprob: -16.62500762939453
    5. ')

' → logprob: -17.50000762939453
    6. '))' → logprob: -17.50000762939453
    7. ')n' → logprob: -18.25000762939453
    8. ')return' → logprob: -18.75000762939453
    9. '())' → logprob: -19.00000762939453
    10. ')`' → logprob: -19.12500762939453

Token 183: '   ' (ID: 271)
  Prédit: '
'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '
' → logprob: -0.0027437699027359486
    2. '   ' → logprob: -6.377743721008301
    3. '    
' → logprob: -7.127743721008301
    4. '

' → logprob: -8.6277437210083
    5. '  
' → logprob: -11.0027437210083
    6. '
' → logprob: -11.2527437210083
    7. '
    
' → logprob: -11.5027437210083
    8. ' 
' → logprob: -11.6277437210083
    9. '```' → logprob: -12.2527437210083
    10. '   
' → logprob: -13.1277437210083

Token 184: ' if' (ID: 538)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.04793579503893852
    2. ' if' → logprob: -3.547935724258423
    3. '
' → logprob: -4.172935962677002
    4. 'if' (adapté à ' if') → logprob: -6.047935962677002
    5. '    
' → logprob: -8.547935485839844
    6. ' 
' → logprob: -10.172935485839844
    7. '```' → logprob: -12.047935485839844
    8. ' ' → logprob: -12.547935485839844
    9. '  
' → logprob: -12.797935485839844
    10. '

' → logprob: -13.172935485839844

Token 185: ' is' (ID: 382)
  Prédit: ' is'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' is' → logprob: -0.00598911615088582
    2. 'is' → logprob: -5.130989074707031
    3. ' s' → logprob: -10.005989074707031
    4. '(is' → logprob: -11.755989074707031
    5. 's' → logprob: -11.880989074707031
    6. ' not' → logprob: -15.505989074707031
    7. ' ' → logprob: -16.50598907470703
    8. 'n' → logprob: -16.50598907470703
    9. '_is' → logprob: -16.75598907470703
    10. ' n' → logprob: -16.75598907470703

Token 186: '_div' (ID: 36926)
  Prédit: '_div'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_div' → logprob: -1.0445127372804563e-05
    2. '_non' → logprob: -11.50001049041748
    3. 'div' → logprob: -16.375009536743164
    4. '_' → logprob: -16.625009536743164
    5. '<div' → logprob: -18.125009536743164
    6. '_def' → logprob: -18.250009536743164
    7. '_sub' → logprob: -18.500009536743164
    8. '_di' → logprob: -19.250009536743164
    9. '_dis' → logprob: -20.125009536743164
    10. '_DIV' → logprob: -21.375009536743164

Token 187: 'isible' (ID: 181386)
  Prédit: 'isible'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'isible' → logprob: -6.134509021649137e-05
    2. 'is' → logprob: -9.75006103515625
    3. 'ISIBLE' → logprob: -13.12506103515625
    4. 'isable' → logprob: -14.12506103515625
    5. 'sible' → logprob: -15.37506103515625
    6. '(is' → logprob: -16.50006103515625
    7. 'ible' → logprob: -18.00006103515625
    8. '_is' → logprob: -19.12506103515625
    9. 'visible' → logprob: -19.25006103515625
    10. ' is' → logprob: -19.25006103515625

Token 188: '_by' (ID: 8214)
  Prédit: '_by'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_by' → logprob: -9.088346359931165e-07
    2. '_b' → logprob: -14.625000953674316
    3. '_' → logprob: -14.875000953674316
    4. ' _' → logprob: -18.25
    5. 'by' → logprob: -18.625
    6. '_to' → logprob: -19.375
    7. 'y' → logprob: -19.625
    8. '_of' → logprob: -19.625
    9. ')_' → logprob: -19.875
    10. '_y' → logprob: -20.0

Token 189: '_sum' (ID: 29859)
  Prédit: '_sum'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_sum' → logprob: -4.763666947837919e-05
    2. 'sum' → logprob: -10.00004768371582
    3. '_s' → logprob: -13.37504768371582
    4. '_' → logprob: -15.12504768371582
    5. 's' → logprob: -15.25004768371582
    6. ' sum' → logprob: -16.37504768371582
    7. ' _' → logprob: -18.50004768371582
    8. 'n' → logprob: -18.75004768371582
    9. '(sum' → logprob: -18.75004768371582
    10. '
' → logprob: -19.12504768371582

Token 190: '(n' (ID: 2406)
  Prédit: '(n'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(n' → logprob: -5.848420551046729e-05
    2. ' (' → logprob: -10.0000581741333
    3. '(' → logprob: -11.2500581741333
    4. '(
' → logprob: -17.375059127807617
    5. ' ' → logprob: -18.875059127807617
    6. '   ' → logprob: -19.750059127807617
    7. '```' → logprob: -19.750059127807617
    8. ')' → logprob: -20.000059127807617
    9. '(s' → logprob: -20.625059127807617
    10. '(noun' → logprob: -20.875059127807617

Token 191: ',' (ID: 11)
  Prédit: ','
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ',' → logprob: -0.011284309439361095
    2. '(s' → logprob: -5.011284351348877
    3. '(n' → logprob: -5.886284351348877
    4. ',n' → logprob: -7.386284351348877
    5. ' ,' → logprob: -7.511284351348877
    6. ',s' → logprob: -7.761284351348877
    7. 's' → logprob: -9.136283874511719
    8. 'n' → logprob: -10.386283874511719
    9. '(' → logprob: -10.761283874511719
    10. ')' → logprob: -11.136283874511719

Token 192: ' s' (ID: 265)
  Prédit: 's'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 's' → logprob: -0.029750604182481766
    2. ' s' → logprob: -3.5297505855560303
    3. ')s' → logprob: -17.52975082397461
    4. ')' → logprob: -17.77975082397461
    5. '   ' → logprob: -17.90475082397461
    6. '	s' → logprob: -18.02975082397461
    7. '(s' → logprob: -18.40475082397461
    8. '_s' → logprob: -19.02975082397461
    9. ' ' → logprob: -19.40475082397461
    10. ' ' → logprob: -19.40475082397461

Token 193: '):
' (ID: 1883)
  Prédit: '):'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '):' → logprob: -0.009882047772407532
    2. '):
' → logprob: -4.634881973266602
    3. ':' → logprob: -9.259881973266602
    4. ')' → logprob: -10.759881973266602
    5. '():' → logprob: -11.759881973266602
    6. ' ):' → logprob: -14.134881973266602
    7. '   ' → logprob: -14.384881973266602
    8. '():
' → logprob: -15.009881973266602
    9. ':
' → logprob: -15.634881973266602
    10. '):
' → logprob: -16.2598819732666

Token 194: '       ' (ID: 309)
  Prédit: '       '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '       ' → logprob: -0.001101756701245904
    2. ' print' → logprob: -7.376101970672607
    3. 'print' → logprob: -7.751101970672607
    4. '   ' → logprob: -10.37610149383545
    5. '(print' → logprob: -12.12610149383545
    6. '        
' → logprob: -13.62610149383545
    7. '```' → logprob: -14.12610149383545
    8. ':' → logprob: -14.12610149383545
    9. '    ' → logprob: -14.25110149383545
    10. ',' → logprob: -14.25110149383545

Token 195: ' print' (ID: 2123)
  Prédit: ' print'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' print' → logprob: -0.3696955442428589
    2. '       ' → logprob: -1.8696955442428589
    3. 'print' (adapté à ' print') → logprob: -1.8696955442428589
    4. '   ' → logprob: -7.494695663452148
    5. '
' → logprob: -9.994695663452148
    6. '        
' → logprob: -10.369695663452148
    7. '	print' → logprob: -10.494695663452148
    8. ' 
' → logprob: -11.244695663452148
    9. '(print' → logprob: -11.369695663452148
    10. ' ' → logprob: -11.619695663452148

Token 196: '_yes' (ID: 151898)
  Prédit: '_yes'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_yes' → logprob: -6.869017852295656e-06
    2. '_' → logprob: -12.125006675720215
    3. '_no' → logprob: -13.625006675720215
    4. '("_' → logprob: -17.12500762939453
    5. '(' → logprob: -17.12500762939453
    6. 'Yes' → logprob: -17.37500762939453
    7. '_y' → logprob: -18.75000762939453
    8. '_you' → logprob: -19.00000762939453
    9. '(_' → logprob: -19.12500762939453
    10. 'yes' → logprob: -19.25000762939453

Token 197: '()
' (ID: 1234)
  Prédit: '()'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '()' → logprob: -0.10023266077041626
    2. '()
' → logprob: -2.3502326011657715
    3. '   ' → logprob: -10.97523307800293
    4. 'else' → logprob: -12.47523307800293
    5. '()

' → logprob: -12.85023307800293
    6. '(' → logprob: -13.72523307800293
    7. ' ()' → logprob: -14.47523307800293
    8. '()\' → logprob: -15.22523307800293
    9. '(
' → logprob: -16.35023307800293
    10. ' else' → logprob: -16.60023307800293

Token 198: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.008928901515901089
    2. 'else' → logprob: -4.8839287757873535
    3. ' else' → logprob: -6.6339287757873535
    4. ' ' → logprob: -13.008929252624512
    5. '	else' → logprob: -13.258929252624512
    6. '    
' → logprob: -13.883929252624512
    7. '
' → logprob: -14.008929252624512
    8. '```' → logprob: -15.133929252624512
    9. '  ' → logprob: -15.258929252624512
    10. '<|end|>' → logprob: -15.758929252624512

Token 199: ' else' (ID: 1203)
  Prédit: 'else'
  Correct (stricte): False
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'else' (adapté à ' else') → logprob: -0.10495827347040176
    2. '   ' → logprob: -2.3549582958221436
    3. ' else' → logprob: -5.3549580574035645
    4. ' ' → logprob: -11.229958534240723
    5. 'e' → logprob: -13.979958534240723
    6. '	else' → logprob: -14.104958534240723
    7. 'els' → logprob: -15.479958534240723
    8. '  ' → logprob: -15.854958534240723
    9. 'elser' → logprob: -15.854958534240723
    10. 'el' → logprob: -16.104957580566406

Token 200: ':
' (ID: 734)
  Prédit: ':'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ':' → logprob: -0.0006434533279389143
    2. ':
' → logprob: -7.375643253326416
    3. '():' → logprob: -11.750643730163574
    4. ' :' → logprob: -11.750643730163574
    5. '():
' → logprob: -15.125643730163574
    6. ' :
' → logprob: -15.250643730163574
    7. '(' → logprob: -15.625643730163574
    8. '   ' → logprob: -15.875643730163574
    9. ':

' → logprob: -16.750642776489258
    10. '{' → logprob: -17.000642776489258

Token 201: '       ' (ID: 309)
  Prédit: '       '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '       ' → logprob: -0.01999494433403015
    2. ' print' → logprob: -4.019994735717773
    3. 'print' → logprob: -6.769994735717773
    4. '   ' → logprob: -7.394994735717773
    5. '(print' → logprob: -10.394994735717773
    6. '
' → logprob: -10.894994735717773
    7. '        
' → logprob: -11.769994735717773
    8. '    
' → logprob: -11.894994735717773
    9. '    ' → logprob: -11.894994735717773
    10. '	print' → logprob: -13.019994735717773

Token 202: ' print' (ID: 2123)
  Prédit: 'print'
  Correct (stricte): False
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'print' (adapté à ' print') → logprob: -0.3132629096508026
    2. ' print' → logprob: -1.313262939453125
    3. '   ' → logprob: -14.063262939453125
    4. '       ' → logprob: -15.563262939453125
    5. '(print' → logprob: -15.563262939453125
    6. '	print' → logprob: -16.938262939453125
    7. '.print' → logprob: -17.063262939453125
    8. '_print' → logprob: -18.688262939453125
    9. ' ' → logprob: -19.313262939453125
    10. '
' → logprob: -19.438262939453125

Token 203: '_no' (ID: 13575)
  Prédit: '_no'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_no' → logprob: -4.320199877838604e-07
    2. '_n' → logprob: -15.625
    3. 'no' → logprob: -15.875
    4. '_' → logprob: -17.25
    5. 'No' → logprob: -19.0
    6. '_NO' → logprob: -19.75
    7. '_No' → logprob: -20.25
    8. '(_' → logprob: -21.0
    9. '(no' → logprob: -21.75
    10. '()' → logprob: -21.75

Token 204: '()

' (ID: 5874)
  Prédit: '()'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '()' → logprob: -0.2522110939025879
    2. '()
' → logprob: -1.502211093902588
    3. '()

' → logprob: -8.75221061706543
    4. '()\' → logprob: -9.62721061706543
    5. '(' → logprob: -10.25221061706543
    6. '(
' → logprob: -11.00221061706543
    7. '()`' → logprob: -13.62721061706543
    8. '()
' → logprob: -13.75221061706543
    9. '
' → logprob: -13.75221061706543
    10. '()


' → logprob: -14.25221061706543

Token 205: 'main' (ID: 7731)
  Prédit: 'if'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'if' → logprob: -0.2761370837688446
    2. '\n' → logprob: -1.901137113571167
    3. '
' → logprob: -2.526137113571167
    4. 'main' → logprob: -5.401136875152588
    5. '\' → logprob: -5.651136875152588
    6. '#' → logprob: -7.151136875152588
    7. ' if' → logprob: -7.526136875152588
    8. '_' → logprob: -7.651136875152588
    9. '(' → logprob: -7.901136875152588
    10. '(
' → logprob: -8.026137351989746

Token 206: '()' (ID: 416)
  Prédit: '()'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '()' → logprob: -0.018157554790377617
    2. '(' → logprob: -4.018157482147217
    3. '();' → logprob: -13.518157958984375
    4. '()
' → logprob: -13.768157958984375
    5. '()`' → logprob: -13.768157958984375
    6. '(
' → logprob: -14.018157958984375
    7. '#' → logprob: -14.518157958984375
    8. '()">' → logprob: -14.768157958984375
    9. ')' → logprob: -14.893157958984375
    10. ' ()' → logprob: -15.018157958984375


RÉSUMÉ:
--------------------------------------------------------------------------------
Total des tokens analysés: 204
Tokens correctement prédits (1ère position, stricte): 102
Tokens correctement prédits (1ère position, avec adaptation): 112
Tokens correctement prédits (top 10): 181
Précision stricte (1ère position): 50.00%
Précision adaptée (1ère position): 54.90%
Précision (top 10): 88.73%
================================================================================
