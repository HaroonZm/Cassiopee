================================================================================
ANALYSE DE PRÉDICTION TOKEN PAR TOKEN (BATCH API)
Date: 2025-06-04 19:35:40
Modèle de tokenisation: gpt-4o-mini
================================================================================

SCRIPT ANALYSÉ:
--------------------------------------------------------------------------------
def find_original_price(after_tax_price):
    """
    Trouve et retourne le prix avant taxe qui, après application d'une TVA de 8%, donne le prix arrondi (floor) égal à after_tax_price.

    Args:
        after_tax_price (int): Prix après application de la TVA (entrée utilisateur).

    Returns:
        int or None: Le prix original avant taxe si trouvé, sinon None.
    """
    import math

    # Parcours de tous les entiers possibles pour le prix initial (avant taxe)
    for i in range(1, 46298):
        # Calcul du prix après ajout de 8% de taxe, arrondi à l'entier inférieur
        if math.floor(i * 1.08) == after_tax_price:
            # Retourne le prix initial si la condition est satisfaite
            return i
    # Retourne None si aucun prix initial ne convient
    return None

def main():
    """
    Fonction principale qui gère l'entrée utilisateur, la recherche du prix initial et l'affichage du résultat.
    """
    # Lecture d'un entier depuis l'entrée standard (l'utilisateur doit entrer le prix après taxe)
    n = int(input())

    # Appel de la fonction pour trouver le prix original
    original_price = find_original_price(n)

    if original_price is not None:
        # Si un prix original (avant taxe) a été trouvé, l'afficher
        print(original_price)
    else:
        # Sinon, afficher ":(" pour indiquer qu'aucun prix ne convient
        print(":(")

if __name__ == "__main__":
    main()
--------------------------------------------------------------------------------

RÉSULTATS D'ANALYSE TOKEN PAR TOKEN:
--------------------------------------------------------------------------------
Token 0: 'def' (ID: 1314)
  → Token d'amorce (pas de prédiction)

Token 1: ' find' (ID: 1646)
  → Token d'amorce (pas de prédiction)

Token 2: '_original' (ID: 92075)
  → Token d'amorce (pas de prédiction)

Token 3: '_price' (ID: 18814)
  Prédit: '_'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '_' → logprob: -0.00520719401538372
    2. '(' → logprob: -5.630207061767578
    3. '_token' → logprob: -7.005207061767578
    4. '_name' → logprob: -8.130207061767578
    5. '_word' → logprob: -9.255207061767578
    6. '```' → logprob: -9.380207061767578
    7. '_user' → logprob: -10.380207061767578
    8. 's' → logprob: -10.755207061767578
    9. '(_' → logprob: -11.005207061767578
    10. '_space' → logprob: -11.255207061767578

Token 4: '(after' (ID: 178712)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '(' → logprob: -0.006349169183522463
    2. '_' → logprob: -5.381349086761475
    3. '```' → logprob: -7.381349086761475
    4. '(_:' → logprob: -8.256349563598633
    5. '():' → logprob: -8.381349563598633
    6. '(_' → logprob: -8.506349563598633
    7. '(:' → logprob: -9.256349563598633
    8. '_parent' → logprob: -10.006349563598633
    9. '_:' → logprob: -10.506349563598633
    10. '(parent' → logprob: -10.631349563598633

Token 5: '_tax' (ID: 61146)
  Prédit: '_'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '_' → logprob: -0.14788277447223663
    2. '_price' → logprob: -2.0228826999664307
    3. '_discount' → logprob: -5.77288293838501
    4. '_)' → logprob: -6.64788293838501
    5. ')' → logprob: -8.022882461547852
    6. ')_' → logprob: -9.147882461547852
    7. '_purchase' → logprob: -9.147882461547852
    8. '_p' → logprob: -9.647882461547852
    9. '_s' → logprob: -10.272882461547852
    10. '__' → logprob: -10.647882461547852

Token 6: '_price' (ID: 18814)
  Prédit: '):'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '):' → logprob: -0.36415544152259827
    2. '_price' → logprob: -1.2391554117202759
    3. ')' → logprob: -4.239155292510986
    4. '_' → logprob: -8.114155769348145
    5. '_amount' → logprob: -8.739155769348145
    6. '=' → logprob: -8.864155769348145
    7. ',' → logprob: -9.114155769348145
    8. 'price' → logprob: -9.364155769348145
    9. '):
' → logprob: -9.489155769348145
    10. '_prices' → logprob: -9.739155769348145

Token 7: '):
' (ID: 1883)
  Prédit: ','
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ',' → logprob: -0.2534879446029663
    2. '):' → logprob: -1.5034879446029663
    3. ')' → logprob: -7.003488063812256
    4. ':' → logprob: -7.878488063812256
    5. '=' → logprob: -9.753487586975098
    6. '**' → logprob: -10.378487586975098
    7. '):
' → logprob: -10.503487586975098
    8. '*' → logprob: -10.503487586975098
    9. '(' → logprob: -10.628487586975098
    10. 'def' → logprob: -11.378487586975098

Token 8: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.18765102326869965
    2. '```' → logprob: -2.4376509189605713
    3. ':' → logprob: -2.8126509189605713
    4. '    ' → logprob: -5.06265115737915
    5. '"' → logprob: -6.18765115737915
    6. '       ' → logprob: -6.43765115737915
    7. ''' → logprob: -6.43765115737915
    8. '\n' → logprob: -6.43765115737915
    9. ' ' → logprob: -6.56265115737915
    10. '\' → logprob: -6.56265115737915

Token 9: ' """
' (ID: 7037)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.49485307931900024
    2. '```' → logprob: -1.1198530197143555
    3. '`' → logprob: -3.3698530197143555
    4. '    ' → logprob: -5.2448530197143555
    5. ''' → logprob: -5.4948530197143555
    6. ' ' → logprob: -5.7448530197143555
    7. '``' → logprob: -5.8698530197143555
    8. '\' → logprob: -5.8698530197143555
    9. '"' → logprob: -6.3698530197143555
    10. ' return' → logprob: -6.4948530197143555

Token 10: '   ' (ID: 271)
  Prédit: '#'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '#' → logprob: -0.4962182343006134
    2. 'p' → logprob: -1.496218204498291
    3. 'r' → logprob: -2.871218204498291
    4. '   ' → logprob: -2.996218204498291
    5. 'return' → logprob: -3.996218204498291
    6. 't' → logprob: -4.746218204498291
    7. 'n' → logprob: -5.121218204498291
    8. ' #' → logprob: -5.621218204498291
    9. '"""' → logprob: -5.871218204498291
    10. ' ' → logprob: -6.121218204498291

Token 11: ' Trou' (ID: 58947)
  Prédit: '"""'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '"""' → logprob: -0.3374760150909424
    2. 'Calculate' → logprob: -1.9624760150909424
    3. '   ' → logprob: -3.4624760150909424
    4. 'The' → logprob: -4.212475776672363
    5. 'T' → logprob: -4.337475776672363
    6. '""' → logprob: -4.337475776672363
    7. ''''' → logprob: -4.462475776672363
    8. '#' → logprob: -5.087475776672363
    9. ' Calculate' → logprob: -5.087475776672363
    10. 'Returns' → logprob: -5.087475776672363

Token 12: 've' (ID: 737)
  Prédit: 'ble'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'ble' → logprob: -0.5056782364845276
    2. 'b' → logprob: -1.5056781768798828
    3. 'bles' → logprob: -1.7556781768798828
    4. 'bled' → logprob: -6.255678176879883
    5. 'bl' → logprob: -8.505678176879883
    6. '   ' → logprob: -9.880678176879883
    7. 'bling' → logprob: -11.005678176879883
    8. 'bly' → logprob: -11.630678176879883
    9. 'blem' → logprob: -11.755678176879883
    10. 'e' → logprob: -11.880678176879883

Token 13: ' et' (ID: 859)
  Prédit: ' l'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' l' → logprob: -0.677192211151123
    2. 's' → logprob: -1.427192211151123
    3. ' le' → logprob: -2.177192211151123
    4. 'l' → logprob: -2.427192211151123
    5. ' la' → logprob: -3.927192211151123
    6. ' ' → logprob: -4.802192211151123
    7. 'le' → logprob: -5.427192211151123
    8. '_' → logprob: -5.927192211151123
    9. ' the' → logprob: -6.177192211151123
    10. 'the' → logprob: -6.302192211151123

Token 14: ' retourne' (ID: 178818)
  Prédit: ' calc'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' calc' → logprob: -0.2965455651283264
    2. ' retourne' → logprob: -2.2965455055236816
    3. '   ' → logprob: -2.7965455055236816
    4. 'cal' → logprob: -3.7965455055236816
    5. ' calcul' → logprob: -4.546545505523682
    6. 'calc' → logprob: -4.921545505523682
    7. 'ret' → logprob: -4.921545505523682
    8. ' ren' → logprob: -5.296545505523682
    9. 'calcul' → logprob: -5.296545505523682
    10. 'return' → logprob: -5.296545505523682

Token 15: ' le' (ID: 505)
  Prédit: ' le'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' le' → logprob: -1.1299108266830444
    2. ' l' → logprob: -1.2549108266830444
    3. 'l' → logprob: -1.7549108266830444
    4. ' la' → logprob: -2.129910945892334
    5. 'le' → logprob: -2.754910945892334
    6. ' the' → logprob: -4.504910945892334
    7. '   ' → logprob: -5.129910945892334
    8. 's' → logprob: -5.129910945892334
    9. 'the' → logprob: -5.254910945892334
    10. '```' → logprob: -5.754910945892334

Token 16: ' prix' (ID: 18771)
  Prédit: ' prix'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' prix' → logprob: -0.07183196395635605
    2. ' original' → logprob: -3.1968319416046143
    3. 'prix' → logprob: -4.821832180023193
    4. ' montant' → logprob: -5.071832180023193
    5. '   ' → logprob: -5.321832180023193
    6. ' ' → logprob: -5.446832180023193
    7. ' price' → logprob: -6.696832180023193
    8. '  ' → logprob: -6.946832180023193
    9. ' coût' → logprob: -7.446832180023193
    10. ' espace' → logprob: -7.946832180023193

Token 17: ' avant' (ID: 13339)
  Prédit: ' original'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' original' → logprob: -0.7711911797523499
    2. ' d' → logprob: -1.146191120147705
    3. '_original' → logprob: -2.521191120147705
    4. 'original' → logprob: -2.896191120147705
    5. ' initial' → logprob: -3.271191120147705
    6. ' de' → logprob: -4.521191120147705
    7. 'd' → logprob: -4.521191120147705
    8. '_initial' → logprob: -4.896191120147705
    9. 'initial' → logprob: -5.271191120147705
    10. ' avant' → logprob: -5.646191120147705

Token 18: ' taxe' (ID: 174271)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.3517950475215912
    2. 'def' → logprob: -2.476794958114624
    3. ' la' → logprob: -2.601794958114624
    4. '```' → logprob: -2.726794958114624
    5. 'l' → logprob: -3.851794958114624
    6. 'tax' → logprob: -4.726795196533203
    7. '_' → logprob: -4.851795196533203
    8. ' l' → logprob: -4.851795196533203
    9. 'les' → logprob: -5.101795196533203
    10. 't' → logprob: -5.226795196533203

Token 19: ' qui' (ID: 2780)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.04854818433523178
    2. '
' → logprob: -4.673548221588135
    3. '\' → logprob: -4.923548221588135
    4. '\n' → logprob: -5.048548221588135
    5. '```' → logprob: -5.298548221588135
    6. 'def' → logprob: -6.173548221588135
    7. ',' → logprob: -6.173548221588135
    8. '(' → logprob: -6.423548221588135
    9. ' ' → logprob: -6.423548221588135
    10. '    
' → logprob: -6.423548221588135

Token 20: ',' (ID: 11)
  Prédit: ' correspond'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' correspond' → logprob: -0.7275307774543762
    2. ' a' → logprob: -0.9775307774543762
    3. ' est' → logprob: -2.3525307178497314
    4. ' incl' → logprob: -4.8525309562683105
    5. 's' → logprob: -5.2275309562683105
    6. ' permet' → logprob: -5.4775309562683105
    7. ',' → logprob: -6.1025309562683105
    8. ' ' → logprob: -6.2275309562683105
    9. '```' → logprob: -6.2275309562683105
    10. ' représente' → logprob: -6.4775309562683105

Token 21: ' après' (ID: 16460)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.8819276094436646
    2. ' multipl' → logprob: -1.7569276094436646
    3. 'ap' → logprob: -2.756927490234375
    4. '```' → logprob: -2.881927490234375
    5. ' multip' → logprob: -3.381927490234375
    6. ' correspond' → logprob: -3.631927490234375
    7. ' après' → logprob: -3.756927490234375
    8. ' lorsqu' → logprob: -3.756927490234375
    9. ' lorsque' → logprob: -4.256927490234375
    10. ' qui' → logprob: -4.381927490234375

Token 22: ' application' (ID: 5200)
  Prédit: ' application'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' application' → logprob: -0.5581204295158386
    2. ' l' → logprob: -2.3081204891204834
    3. ' la' → logprob: -2.5581204891204834
    4. ' ajout' → logprob: -3.1831204891204834
    5. '   ' → logprob: -3.3081204891204834
    6. 'application' → logprob: -3.3081204891204834
    7. 'aj' → logprob: -3.4331204891204834
    8. 'tax' → logprob: -3.5581204891204834
    9. ' taxe' → logprob: -3.5581204891204834
    10. ' avoir' → logprob: -5.183120250701904

Token 23: ' d' (ID: 272)
  Prédit: ' d'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' d' → logprob: -0.2684329152107239
    2. ' de' → logprob: -1.643432855606079
    3. '   ' → logprob: -3.643432855606079
    4. 'd' → logprob: -5.143433094024658
    5. ' du' → logprob: -5.393433094024658
    6. 'de' → logprob: -6.518433094024658
    7. 's' → logprob: -7.018433094024658
    8. ',' → logprob: -7.393433094024658
    9. 'e' → logprob: -7.393433094024658
    10. '```' → logprob: -7.518433094024658

Token 24: ''une' (ID: 13337)
  Prédit: ''une'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ''une' → logprob: -0.1541048288345337
    2. 'e' → logprob: -2.654104709625244
    3. ' la' → logprob: -3.529104709625244
    4. 'une' → logprob: -3.654104709625244
    5. 'a' → logprob: -5.279104709625244
    6. '’une' → logprob: -5.904104709625244
    7. ' une' → logprob: -6.029104709625244
    8. ''' → logprob: -6.279104709625244
    9. 'u' → logprob: -6.904104709625244
    10. 'la' → logprob: -7.029104709625244

Token 25: ' TVA' (ID: 165247)
  Prédit: ' taxe'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' taxe' → logprob: -0.13076470792293549
    2. '   ' → logprob: -3.1307647228240967
    3. ' remise' → logprob: -3.3807647228240967
    4. ' réduction' → logprob: -4.630764484405518
    5. ' tax' → logprob: -4.630764484405518
    6. ' ' → logprob: -5.130764484405518
    7. ' augmentation' → logprob: -5.380764484405518
    8. ' t' → logprob: -5.880764484405518
    9. 'tax' → logprob: -6.255764484405518
    10. ' certaine' → logprob: -6.630764484405518

Token 26: ' de' (ID: 334)
  Prédit: ' de'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' de' → logprob: -0.06546780467033386
    2. 'de' → logprob: -2.8154678344726562
    3. '   ' → logprob: -6.565467834472656
    4. '20' → logprob: -7.065467834472656
    5. ' à' → logprob: -7.565467834472656
    6. ',' → logprob: -8.065467834472656
    7. 'à' → logprob: -9.815467834472656
    8. ' ' → logprob: -10.065467834472656
    9. ' of' → logprob: -10.190467834472656
    10. '    ' → logprob: -10.690467834472656

Token 27: ' ' (ID: 220)
  Prédit: ' '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' ' → logprob: -0.1920205056667328
    2. '20' → logprob: -1.8170205354690552
    3. '5' → logprob: -5.442020416259766
    4. '10' → logprob: -5.567020416259766
    5. '0' → logprob: -6.192020416259766
    6. '7' → logprob: -7.067020416259766
    7. '15' → logprob: -8.442020416259766
    8. '2' → logprob: -8.817020416259766
    9. '18' → logprob: -8.817020416259766
    10. '6' → logprob: -9.192020416259766

Token 28: '8' (ID: 23)
  Prédit: '20'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '20' → logprob: -0.37445467710494995
    2. '0' → logprob: -1.2494547367095947
    3. ' ' → logprob: -3.8744547367095947
    4. '1' → logprob: -6.249454498291016
    5. '5' → logprob: -6.874454498291016
    6. '19' → logprob: -7.124454498291016
    7. '   ' → logprob: -7.874454498291016
    8. '10' → logprob: -8.249454498291016
    9. '15' → logprob: -9.249454498291016
    10. '18' → logprob: -9.749454498291016

Token 29: '%,' (ID: 14906)
  Prédit: '%'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '%' → logprob: -0.03516386076807976
    2. '%,' → logprob: -3.9101638793945312
    3. '.' → logprob: -5.160163879394531
    4. '5' → logprob: -5.785163879394531
    5. ',' → logprob: -6.535163879394531
    6. '0' → logprob: -6.785163879394531
    7. ' %' → logprob: -7.035163879394531
    8. '6' → logprob: -7.660163879394531
    9. '2' → logprob: -7.910163879394531
    10. '4' → logprob: -8.035163879394531

Token 30: ' donne' (ID: 30004)
  Prédit: ' correspond'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' correspond' → logprob: -0.24934449791908264
    2. ' corresponds' → logprob: -2.37434458732605
    3. ' est' → logprob: -3.24934458732605
    4. ' revient' → logprob: -4.124344348907471
    5. ' retourne' → logprob: -4.499344348907471
    6. ' vaut' → logprob: -4.499344348907471
    7. ',' → logprob: -4.874344348907471
    8. ' donne' → logprob: -4.999344348907471
    9. '   ' → logprob: -5.249344348907471
    10. ' ' → logprob: -5.374344348907471

Token 31: ' le' (ID: 505)
  Prédit: ' le'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' le' → logprob: -0.1531025916337967
    2. ' l' → logprob: -3.0281026363372803
    3. ' ' → logprob: -3.4031026363372803
    4. ' the' → logprob: -3.9031026363372803
    5. ' un' → logprob: -4.903102397918701
    6. ' exactement' → logprob: -5.153102397918701
    7. 'le' → logprob: -5.403102397918701
    8. 'the' → logprob: -5.653102397918701
    9. 'l' → logprob: -5.903102397918701
    10. ' after' → logprob: -6.028102397918701

Token 32: ' prix' (ID: 18771)
  Prédit: ' prix'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' prix' → logprob: -0.3368128836154938
    2. 'prix' → logprob: -1.5868128538131714
    3. ' after' → logprob: -3.586812973022461
    4. ' montant' → logprob: -4.586812973022461
    5. '   ' → logprob: -4.711812973022461
    6. ' même' → logprob: -4.836812973022461
    7. ' given' → logprob: -4.961812973022461
    8. ' ' → logprob: -5.961812973022461
    9. ' price' → logprob: -6.086812973022461
    10. '```' → logprob: -6.461812973022461

Token 33: ' arr' (ID: 1724)
  Prédit: ' initial'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' initial' → logprob: -0.8670451641082764
    2. ' avant' → logprob: -1.3670451641082764
    3. ' d' → logprob: -2.6170451641082764
    4. ' de' → logprob: -2.9920451641082764
    5. ' après' → logprob: -2.9920451641082764
    6. ' original' → logprob: -2.9920451641082764
    7. '_initial' → logprob: -3.4920451641082764
    8. '   ' → logprob: -3.6170451641082764
    9. ' ' → logprob: -5.2420454025268555
    10. '    ' → logprob: -5.3670454025268555

Token 34: 'ondi' (ID: 117409)
  Prédit: 'ondi'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'ondi' → logprob: -0.00474482262507081
    2. 'ond' → logprob: -5.379745006561279
    3. 'on' → logprob: -9.129744529724121
    4. 'ondissement' → logprob: -12.254744529724121
    5. 'ont' → logprob: -12.379744529724121
    6. 'o' → logprob: -13.379744529724121
    7. '**' → logprob: -14.504744529724121
    8. '\' → logprob: -14.754744529724121
    9. '"' → logprob: -15.004744529724121
    10. '</' → logprob: -15.254744529724121

Token 35: ' (' (ID: 350)
  Prédit: ' à'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' à' → logprob: -0.8037378787994385
    2. ' au' → logprob: -1.4287378787994385
    3. 'à' → logprob: -3.0537378787994385
    4. 'au' → logprob: -3.0537378787994385
    5. 'def' → logprob: -3.1787378787994385
    6. '```' → logprob: -3.4287378787994385
    7. ' ' → logprob: -3.6787378787994385
    8. ' de' → logprob: -3.8037378787994385
    9. '   ' → logprob: -3.9287378787994385
    10. ' original' → logprob: -4.678737640380859

Token 36: 'floor' (ID: 60568)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ')' → logprob: -0.430317759513855
    2. ' au' → logprob: -1.930317759513855
    3. ' à' → logprob: -2.1803178787231445
    4. 'au' → logprob: -3.0553178787231445
    5. 'à' → logprob: -3.9303178787231445
    6. ' )' → logprob: -4.6803178787231445
    7. ' ' → logprob: -5.0553178787231445
    8. ' après' → logprob: -6.8053178787231445
    9. '   ' → logprob: -7.3053178787231445
    10. ').' → logprob: -7.5553178787231445

Token 37: ')' (ID: 8)
  Prédit: ')'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')' → logprob: -0.08205000311136246
    2. 'd' → logprob: -3.457050085067749
    3. '(' → logprob: -3.707050085067749
    4. 'ed' → logprob: -5.33204984664917
    5. 'e' → logprob: -6.20704984664917
    6. ' )' → logprob: -6.58204984664917
    7. '):' → logprob: -6.70704984664917
    8. '()' → logprob: -6.95704984664917
    9. ' de' → logprob: -6.95704984664917
    10. '),' → logprob: -6.95704984664917

Token 38: ' égal' (ID: 15059)
  Prédit: ' de'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' de' → logprob: -0.6455658674240112
    2. ' du' → logprob: -1.2705658674240112
    3. ' au' → logprob: -2.395565986633301
    4. ' d' → logprob: -3.895565986633301
    5. ' original' → logprob: -3.895565986633301
    6. ' à' → logprob: -4.895565986633301
    7. 'du' → logprob: -5.145565986633301
    8. ' initial' → logprob: -5.145565986633301
    9. 'au' → logprob: -5.270565986633301
    10. ' après' → logprob: -5.770565986633301

Token 39: ' à' (ID: 1221)
  Prédit: ' à'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' à' → logprob: -0.5545051693916321
    2. ' ' → logprob: -1.1795051097869873
    3. 's' → logprob: -3.0545051097869873
    4. '  ' → logprob: -3.5545051097869873
    5. ' au' → logprob: -3.8045051097869873
    6. 'e' → logprob: -5.429505348205566
    7. ' a' → logprob: -5.929505348205566
    8. ''à' → logprob: -6.179505348205566
    9. ' to' → logprob: -6.679505348205566
    10. '(s' → logprob: -6.679505348205566

Token 40: ' after' (ID: 1934)
  Prédit: ' after'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' after' → logprob: -0.2825942039489746
    2. ' ' → logprob: -1.6575942039489746
    3. ' l' → logprob: -3.9075942039489746
    4. 'after' → logprob: -4.157594203948975
    5. ' après' → logprob: -5.657594203948975
    6. ' ' → logprob: -5.907594203948975
    7. ' le' → logprob: -6.032594203948975
    8. ' the' → logprob: -6.157594203948975
    9. ' a' → logprob: -6.157594203948975
    10. 'l' → logprob: -6.282594203948975

Token 41: '_tax' (ID: 61146)
  Prédit: '_'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_' → logprob: -0.02673448622226715
    2. '_tax' → logprob: -3.6517345905303955
    3. ' _' → logprob: -8.401734352111816
    4. '_t' → logprob: -8.776734352111816
    5. '_price' → logprob: -11.401734352111816
    6. '```' → logprob: -11.776734352111816
    7. '_

' → logprob: -12.401734352111816
    8. '_
' → logprob: -12.526734352111816
    9. '_T' → logprob: -12.526734352111816
    10. '_space' → logprob: -12.776734352111816

Token 42: '_price' (ID: 18814)
  Prédit: '_price'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_price' → logprob: -0.07027429342269897
    2. '_' → logprob: -2.6952743530273438
    3. '_p' → logprob: -9.320274353027344
    4. ' _' → logprob: -9.695274353027344
    5. '_prices' → logprob: -10.195274353027344
    6. '_:' → logprob: -10.945274353027344
    7. '_pr' → logprob: -11.070274353027344
    8. ':' → logprob: -11.195274353027344
    9. '_value' → logprob: -11.445274353027344
    10. '```' → logprob: -11.695274353027344

Token 43: '.

' (ID: 364)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.15761034190654755
    2. '\n' → logprob: -2.5326104164123535
    3. '
' → logprob: -4.2826104164123535
    4. '\' → logprob: -4.4076104164123535
    5. ')' → logprob: -4.9076104164123535
    6. '"""' → logprob: -4.9076104164123535
    7. '"""
' → logprob: -4.9076104164123535
    8. '```' → logprob: -5.0326104164123535
    9. ':' → logprob: -5.7826104164123535
    10. 'def' → logprob: -6.7826104164123535

Token 44: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.05712297558784485
    2. '"""' → logprob: -3.5571229457855225
    3. '
' → logprob: -5.057123184204102
    4. '"""
' → logprob: -5.307123184204102
    5. '\n' → logprob: -5.932123184204102
    6. ')' → logprob: -6.057123184204102
    7. '    
' → logprob: -6.307123184204102
    8. '"' → logprob: -6.307123184204102
    9. '```' → logprob: -6.307123184204102
    10. ' 
' → logprob: -6.932123184204102

Token 45: ' Args' (ID: 39185)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.0344490148127079
    2. '
' → logprob: -4.284449100494385
    3. '"""' → logprob: -4.409449100494385
    4. ' """' → logprob: -6.784449100494385
    5. '"""
' → logprob: -6.909449100494385
    6. '```' → logprob: -7.034449100494385
    7. '    
' → logprob: -7.159449100494385
    8. ' """
' → logprob: -7.159449100494385
    9. 'n' → logprob: -7.284449100494385
    10. '    ' → logprob: -7.534449100494385

Token 46: ':
' (ID: 734)
  Prédit: ':'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ':' → logprob: -0.11731015145778656
    2. ' :' → logprob: -2.617310047149658
    3. ',' → logprob: -3.992310047149658
    4. '):' → logprob: -4.992310047149658
    5. '   ' → logprob: -5.617310047149658
    6. '<|end|>' → logprob: -5.867310047149658
    7. ')' → logprob: -5.992310047149658
    8. '```' → logprob: -7.367310047149658
    9. 'def' → logprob: -7.367310047149658
    10. '<|end|>' → logprob: -7.492310047149658

Token 47: '       ' (ID: 309)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.1739986687898636
    2. ' prix' → logprob: -2.7989985942840576
    3. ' price' → logprob: -3.2989985942840576
    4. ' after' → logprob: -3.2989985942840576
    5. '```' → logprob: -4.798998832702637
    6. ')' → logprob: -5.173998832702637
    7. ' après' → logprob: -5.548998832702637
    8. 'prix' → logprob: -6.173998832702637
    9. ' before' → logprob: -6.798998832702637
    10. ' int' → logprob: -7.423998832702637

Token 48: ' after' (ID: 1934)
  Prédit: 'after'
  Correct (stricte): False
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'after' (adapté à ' after') → logprob: -0.1081901490688324
    2. ' after' → logprob: -2.4831900596618652
    3. '   ' → logprob: -4.733190059661865
    4. 'price' → logprob: -5.733190059661865
    5. 'before' → logprob: -5.858190059661865
    6. 'original' → logprob: -6.233190059661865
    7. ' original' → logprob: -7.608190059661865
    8. ' price' → logprob: -7.983190059661865
    9. 'prix' → logprob: -7.983190059661865
    10. ' before' → logprob: -8.608190536499023

Token 49: '_tax' (ID: 61146)
  Prédit: '_tax'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_tax' → logprob: -0.004585822578519583
    2. '_price' → logprob: -5.8795857429504395
    3. '_' → logprob: -6.3795857429504395
    4. '_t' → logprob: -10.629586219787598
    5. '_tar' → logprob: -10.754586219787598
    6. '_token' → logprob: -10.879586219787598
    7. '_prices' → logprob: -12.504586219787598
    8. '_s' → logprob: -13.504586219787598
    9. '_sales' → logprob: -13.504586219787598
    10. '_p' → logprob: -13.879586219787598

Token 50: '_price' (ID: 18814)
  Prédit: '_price'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_price' → logprob: -0.018235864117741585
    2. '_' → logprob: -4.018235683441162
    3. '_prices' → logprob: -9.89323616027832
    4. '_p' → logprob: -10.76823616027832
    5. ' _' → logprob: -12.39323616027832
    6. '_pr' → logprob: -13.14323616027832
    7. '_pro' → logprob: -13.51823616027832
    8. '_value' → logprob: -14.01823616027832
    9. '_s' → logprob: -14.01823616027832
    10. '_amount' → logprob: -14.76823616027832

Token 51: ' (' (ID: 350)
  Prédit: '):'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '):' → logprob: -0.08072689920663834
    2. ':' → logprob: -2.5807268619537354
    3. ' (' → logprob: -6.9557271003723145
    4. '):
' → logprob: -8.330726623535156
    5. '():' → logprob: -8.830726623535156
    6. ':int' → logprob: -8.955726623535156
    7. '(int' → logprob: -9.205726623535156
    8. ')' → logprob: -9.705726623535156
    9. '```' → logprob: -9.705726623535156
    10. '   ' → logprob: -9.955726623535156

Token 52: 'int' (ID: 491)
  Prédit: 'int'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'int' → logprob: -0.6788787245750427
    2. ' )' → logprob: -2.0538787841796875
    3. ' int' → logprob: -2.0538787841796875
    4. ')' → logprob: -2.1788787841796875
    5. 'float' → logprob: -2.6788787841796875
    6. ' float' → logprob: -2.9288787841796875
    7. ' ):' → logprob: -8.678878784179688
    8. ':int' → logprob: -8.678878784179688
    9. '   ' → logprob: -8.928878784179688
    10. '):' → logprob: -8.928878784179688

Token 53: '):' (ID: 3127)
  Prédit: '):'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '):' → logprob: -0.18002286553382874
    2. ')' → logprob: -1.8050228357315063
    3. '):
' → logprob: -8.430023193359375
    4. '):

' → logprob: -10.930023193359375
    5. ' ):' → logprob: -11.930023193359375
    6. ',' → logprob: -11.930023193359375
    7. '   ' → logprob: -12.305023193359375
    8. '<|end|>' → logprob: -12.305023193359375
    9. ':' → logprob: -12.430023193359375
    10. '),' → logprob: -12.680023193359375

Token 54: ' Prix' (ID: 49512)
  Prédit: ' Le'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' Le' → logprob: -0.3548564314842224
    2. ' le' → logprob: -1.7298564910888672
    3. '<|end|>' → logprob: -2.729856491088867
    4. ' ' → logprob: -4.229856491088867
    5. 'Le' → logprob: -4.479856491088867
    6. ' The' → logprob: -4.854856491088867
    7. ' the' → logprob: -5.479856491088867
    8. ' Prix' → logprob: -5.729856491088867
    9. ')' → logprob: -5.854856491088867
    10. ' l' → logprob: -6.104856491088867

Token 55: ' après' (ID: 16460)
  Prédit: ' avant'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' avant' → logprob: -0.7753826379776001
    2. ' après' → logprob: -1.4003826379776
    3. ' final' → logprob: -3.0253825187683105
    4. ' original' → logprob: -3.0253825187683105
    5. '_' → logprob: -3.6503825187683105
    6. '<|end|>' → logprob: -3.6503825187683105
    7. ' ' → logprob: -3.7753825187683105
    8. ' initial' → logprob: -3.9003825187683105
    9. ' ' → logprob: -4.0253825187683105
    10. ')' → logprob: -4.1503825187683105

Token 56: ' application' (ID: 5200)
  Prédit: ' taxe'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' taxe' → logprob: -0.9713066816329956
    2. ' tax' → logprob: -1.5963066816329956
    3. ' la' → logprob: -2.096306800842285
    4. 'tax' → logprob: -2.471306800842285
    5. ' taxes' → logprob: -2.471306800842285
    6. ' application' → logprob: -3.221306800842285
    7. '_tax' → logprob: -3.971306800842285
    8. '_' → logprob: -3.971306800842285
    9. ' l' → logprob: -4.721306800842285
    10. '_t' → logprob: -4.846306800842285

Token 57: ' de' (ID: 334)
  Prédit: ' de'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' de' → logprob: -0.24456462264060974
    2. '   ' → logprob: -1.6195646524429321
    3. ' d' → logprob: -4.369564533233643
    4. 'de' → logprob: -5.744564533233643
    5. 'd' → logprob: -6.119564533233643
    6. ' ' → logprob: -8.2445650100708
    7. ' of' → logprob: -8.6195650100708
    8. 'def' → logprob: -9.1195650100708
    9. '  ' → logprob: -9.3695650100708
    10. 's' → logprob: -9.4945650100708

Token 58: ' la' (ID: 557)
  Prédit: ' la'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' la' → logprob: -0.03134898096323013
    2. 'la' → logprob: -3.656348943710327
    3. ' taxe' → logprob: -6.781349182128906
    4. ' t' → logprob: -7.031349182128906
    5. 't' → logprob: -7.156349182128906
    6. ' l' → logprob: -7.406349182128906
    7. 'l' → logprob: -7.656349182128906
    8. 'tax' → logprob: -8.031349182128906
    9. ' ' → logprob: -8.156349182128906
    10. ' taxes' → logprob: -8.906349182128906

Token 59: ' TVA' (ID: 165247)
  Prédit: 'tax'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'tax' → logprob: -0.935438871383667
    2. ' taxe' → logprob: -0.935438871383667
    3. 't' → logprob: -2.185438871383667
    4. ' t' → logprob: -3.060438871383667
    5. ' TVA' → logprob: -3.310438871383667
    6. ' tax' → logprob: -4.810439109802246
    7. 'TV' → logprob: -5.685439109802246
    8. ' ' → logprob: -6.185439109802246
    9. '   ' → logprob: -6.560439109802246
    10. 'T' → logprob: -6.810439109802246

Token 60: ' (' (ID: 350)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.24441570043563843
    2. ')' → logprob: -2.244415760040283
    3. '):' → logprob: -2.619415760040283
    4. ').' → logprob: -4.244415760040283
    5. '):
' → logprob: -4.869415760040283
    6. 'def' → logprob: -5.744415760040283
    7. ' de' → logprob: -6.119415760040283
    8. '.' → logprob: -6.119415760040283
    9. '```' → logprob: -6.619415760040283
    10. '):

' → logprob: -7.244415760040283

Token 61: 'entrée' (ID: 68707)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ')' → logprob: -0.10671190172433853
    2. ' )' → logprob: -3.3567118644714355
    3. 't' → logprob: -3.8567118644714355
    4. ' la' → logprob: -4.4817118644714355
    5. 'tax' → logprob: -4.9817118644714355
    6. 'la' → logprob: -5.2317118644714355
    7. 'l' → logprob: -5.8567118644714355
    8. ' t' → logprob: -6.1067118644714355
    9. 'int' → logprob: -6.1067118644714355
    10. ')t' → logprob: -6.1067118644714355

Token 62: ' utilisateur' (ID: 115595)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ')' → logprob: -0.7117363810539246
    2. ').' → logprob: -0.7117363810539246
    3. '):
' → logprob: -5.21173620223999
    4. '):' → logprob: -5.21173620223999
    5. '   ' → logprob: -5.33673620223999
    6. ')
' → logprob: -7.46173620223999
    7. ' )' → logprob: -7.96173620223999
    8. ' ).' → logprob: -7.96173620223999
    9. ').
' → logprob: -8.336736679077148
    10. '),' → logprob: -8.461736679077148

Token 63: ').

' (ID: 3991)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ')' → logprob: -0.0014185652835294604
    2. ').' → logprob: -7.501418590545654
    3. '   ' → logprob: -7.751418590545654
    4. ')
' → logprob: -8.876418113708496
    5. '):' → logprob: -8.876418113708496
    6. '):
' → logprob: -9.501418113708496
    7. '```' → logprob: -10.751418113708496
    8. '"""' → logprob: -11.251418113708496
    9. ' )' → logprob: -11.626418113708496
    10. '),' → logprob: -12.001418113708496

Token 64: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.37852743268013
    2. '"""' → logprob: -1.8785274028778076
    3. ')' → logprob: -2.0035274028778076
    4. '"""
' → logprob: -4.753527641296387
    5. ' """' → logprob: -4.878527641296387
    6. '```' → logprob: -5.378527641296387
    7. ' """
' → logprob: -5.878527641296387
    8. '
' → logprob: -6.503527641296387
    9. ' 
' → logprob: -7.753527641296387
    10. ')
' → logprob: -7.878527641296387

Token 65: ' Returns' (ID: 9609)
  Prédit: '"""'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '"""' → logprob: -0.7403475046157837
    2. '   ' → logprob: -1.4903475046157837
    3. '"""
' → logprob: -1.6153475046157837
    4. ')' → logprob: -2.615347385406494
    5. '""' → logprob: -4.740347385406494
    6. ' """
' → logprob: -4.865347385406494
    7. '```' → logprob: -6.240347385406494
    8. ' """' → logprob: -6.365347385406494
    9. 'Returns' (adapté à ' Returns') → logprob: -6.615347385406494
    10. '
' → logprob: -6.615347385406494

Token 66: ':
' (ID: 734)
  Prédit: ':'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ':' → logprob: -1.0166847705841064
    2. ' int' → logprob: -1.1416847705841064
    3. ' :' → logprob: -1.5166847705841064
    4. ':int' → logprob: -3.1416847705841064
    5. '   ' → logprob: -4.266684532165527
    6. '<|end|>' → logprob: -4.516684532165527
    7. '(int' → logprob: -4.891684532165527
    8. '```' → logprob: -5.016684532165527
    9. 'int' → logprob: -5.141684532165527
    10. '[int' → logprob: -6.141684532165527

Token 67: '       ' (ID: 309)
  Prédit: ' int'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' int' → logprob: -0.05668986588716507
    2. 'int' → logprob: -2.931689977645874
    3. '   ' → logprob: -7.431689739227295
    4. '(int' → logprob: -8.181690216064453
    5. ' None' → logprob: -8.556690216064453
    6. '       ' → logprob: -8.681690216064453
    7. ' (' → logprob: -9.056690216064453
    8. '    ' → logprob: -9.306690216064453
    9. ' float' → logprob: -9.306690216064453
    10. ' ' → logprob: -9.681690216064453

Token 68: ' int' (ID: 677)
  Prédit: 'int'
  Correct (stricte): False
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'int' (adapté à ' int') → logprob: -0.08389008790254593
    2. ' int' → logprob: -2.583890199661255
    3. 'float' → logprob: -5.833889961242676
    4. ' float' → logprob: -6.833889961242676
    5. '   ' → logprob: -6.958889961242676
    6. '```' → logprob: -11.208889961242676
    7. '(int' → logprob: -12.458889961242676
    8. ':int' → logprob: -12.958889961242676
    9. 'Optional' → logprob: -13.833889961242676
    10. ' ' → logprob: -13.896389961242676

Token 69: ' or' (ID: 503)
  Prédit: ':'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ':' → logprob: -0.00047071068547666073
    2. ' :' → logprob: -8.125471115112305
    3. '   ' → logprob: -9.500471115112305
    4. '```' → logprob: -10.500471115112305
    5. '):' → logprob: -10.875471115112305
    6. ')' → logprob: -11.250471115112305
    7. ':return' → logprob: -12.250471115112305
    8. ' ' → logprob: -12.375471115112305
    9. ' or' → logprob: -12.500471115112305
    10. ',' → logprob: -12.625471115112305

Token 70: ' None' (ID: 4662)
  Prédit: ' None'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' None' → logprob: -0.588335394859314
    2. 'None' → logprob: -0.838335394859314
    3. '   ' → logprob: -4.4633355140686035
    4. 'float' → logprob: -7.7133355140686035
    5. ' float' → logprob: -8.338335037231445
    6. '  ' → logprob: -11.213335037231445
    7. '       ' → logprob: -11.338335037231445
    8. 'False' → logprob: -11.338335037231445
    9. ' False' → logprob: -11.463335037231445
    10. ' type' → logprob: -11.463335037231445

Token 71: ':' (ID: 25)
  Prédit: ':'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ':' → logprob: -0.019006958231329918
    2. '   ' → logprob: -4.144006729125977
    3. '):' → logprob: -6.269006729125977
    4. '```' → logprob: -7.394006729125977
    5. ' :' → logprob: -9.394006729125977
    6. ')' → logprob: -9.394006729125977
    7. '
' → logprob: -9.519006729125977
    8. '       ' → logprob: -9.894006729125977
    9. '):
' → logprob: -9.894006729125977
    10. ':
' → logprob: -10.394006729125977

Token 72: ' Le' (ID: 2018)
  Prédit: ' Le'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' Le' → logprob: -0.5157970190048218
    2. 'Le' → logprob: -1.6407970190048218
    3. '       ' → logprob: -2.3907971382141113
    4. '   ' → logprob: -2.7657971382141113
    5. 'int' → logprob: -4.265797138214111
    6. ' int' → logprob: -4.765797138214111
    7. ' L' → logprob: -4.765797138214111
    8. 'Prix' → logprob: -5.140797138214111
    9. ' Prix' → logprob: -5.265797138214111
    10. 'L' → logprob: -5.640797138214111

Token 73: ' prix' (ID: 18771)
  Prédit: ' prix'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' prix' → logprob: -0.06892816722393036
    2. 'prix' → logprob: -2.8189282417297363
    3. '   ' → logprob: -5.568928241729736
    4. ' original' → logprob: -7.068928241729736
    5. ' montant' → logprob: -7.443928241729736
    6. ' price' → logprob: -8.068927764892578
    7. ' ' → logprob: -8.068927764892578
    8. ' ' → logprob: -8.568927764892578
    9. '```' → logprob: -8.943927764892578
    10. 'pr' → logprob: -9.193927764892578

Token 74: ' original' (ID: 4756)
  Prédit: ' original'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' original' → logprob: -1.2686328887939453
    2. ' avant' → logprob: -1.2686328887939453
    3. '_original' → logprob: -1.7686328887939453
    4. '_before' → logprob: -2.6436328887939453
    5. 'avant' → logprob: -2.8936328887939453
    6. ' before' → logprob: -3.0186328887939453
    7. '_initial' → logprob: -3.8936328887939453
    8. 'original' → logprob: -3.8936328887939453
    9. '_' → logprob: -4.018632888793945
    10. ' d' → logprob: -5.143632888793945

Token 75: ' avant' (ID: 13339)
  Prédit: ' avant'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' avant' → logprob: -0.02759554423391819
    2. '   ' → logprob: -4.652595520019531
    3. 'avant' → logprob: -5.277595520019531
    4. ' before' → logprob: -6.152595520019531
    5. ' d' → logprob: -6.152595520019531
    6. ' original' → logprob: -6.277595520019531
    7. '_before' → logprob: -6.777595520019531
    8. ' ou' → logprob: -7.027595520019531
    9. '    ' → logprob: -7.152595520019531
    10. ' de' → logprob: -7.402595520019531

Token 76: ' taxe' (ID: 174271)
  Prédit: ' taxe'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' taxe' → logprob: -0.22057579457759857
    2. ' tax' → logprob: -2.5955758094787598
    3. 'tax' → logprob: -2.8455758094787598
    4. ' la' → logprob: -3.2205758094787598
    5. ' taxes' → logprob: -4.97057580947876
    6. '_' → logprob: -5.34557580947876
    7. ' ' → logprob: -5.84557580947876
    8. '   ' → logprob: -5.84557580947876
    9. '_tax' → logprob: -6.22057580947876
    10. '_t' → logprob: -6.47057580947876

Token 77: ' si' (ID: 1784)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.31426236033439636
    2. ' ou' → logprob: -1.5642623901367188
    3. '       ' → logprob: -4.064262390136719
    4. ' si' → logprob: -4.189262390136719
    5. ' if' → logprob: -5.314262390136719
    6. ' avant' → logprob: -5.314262390136719
    7. ' or' → logprob: -5.439262390136719
    8. ',' → logprob: -5.439262390136719
    9. '```' → logprob: -5.439262390136719
    10. ' qui' → logprob: -6.814262390136719

Token 78: ' trouvé' (ID: 60081)
  Prédit: ' calcul'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' calcul' → logprob: -0.33094343543052673
    2. ' after' → logprob: -2.0809433460235596
    3. ' possible' → logprob: -3.0809433460235596
    4. ' trouvé' → logprob: -3.3309433460235596
    5. ' None' → logprob: -3.5809433460235596
    6. ' trouv' → logprob: -5.205943584442139
    7. 'None' → logprob: -5.330943584442139
    8. ' après' → logprob: -5.580943584442139
    9. ' not' → logprob: -5.705943584442139
    10. ' find' → logprob: -5.705943584442139

Token 79: ',' (ID: 11)
  Prédit: ','
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ',' → logprob: -0.006778373382985592
    2. '   ' → logprob: -5.381778240203857
    3. ';' → logprob: -6.756778240203857
    4. ' sinon' → logprob: -7.881778240203857
    5. ' ,' → logprob: -8.381778717041016
    6. '```' → logprob: -8.631778717041016
    7. ' ou' → logprob: -9.006778717041016
    8. ' else' → logprob: -10.631778717041016
    9. ' or' → logprob: -11.131778717041016
    10. 'else' → logprob: -11.256778717041016

Token 80: ' sinon' (ID: 52915)
  Prédit: ' sinon'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' sinon' → logprob: -0.028666017577052116
    2. ' None' → logprob: -3.6536660194396973
    3. ' autrement' → logprob: -6.528666019439697
    4. ' else' → logprob: -8.028665542602539
    5. '   ' → logprob: -8.528665542602539
    6. 'None' → logprob: -9.028665542602539
    7. ' otherwise' → logprob: -9.653665542602539
    8. ' Sinon' → logprob: -9.778665542602539
    9. ' or' → logprob: -10.528665542602539
    10. ' ou' → logprob: -10.653665542602539

Token 81: ' None' (ID: 4662)
  Prédit: ' None'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' None' → logprob: -0.0791664868593216
    2. 'None' → logprob: -2.5791664123535156
    3. '   ' → logprob: -8.454166412353516
    4. 'auc' → logprob: -10.079166412353516
    5. ' Aucun' → logprob: -12.204166412353516
    6. ' aucun' → logprob: -12.329166412353516
    7. ' aucune' → logprob: -12.829166412353516
    8. '(None' → logprob: -13.329166412353516
    9. ' ' → logprob: -13.454166412353516
    10. '_None' → logprob: -13.454166412353516

Token 82: '.
' (ID: 558)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.24037832021713257
    2. '):' → logprob: -1.7403783798217773
    3. ')' → logprob: -3.4903783798217773
    4. '):
' → logprob: -5.365378379821777
    5. '```' → logprob: -6.990378379821777
    6. ':' → logprob: -7.240378379821777
    7. '
' → logprob: -7.365378379821777
    8. 'def' → logprob: -8.740378379821777
    9. '.' → logprob: -8.740378379821777
    10. ').' → logprob: -8.990378379821777

Token 83: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.23934677243232727
    2. '
' → logprob: -1.7393467426300049
    3. '    
' → logprob: -3.989346742630005
    4. '    ' → logprob: -4.489346981048584
    5. '     
' → logprob: -6.239346981048584
    6. '\n' → logprob: -7.239346981048584
    7. ' 
' → logprob: -7.364346981048584
    8. '\' → logprob: -7.489346981048584
    9. '   
' → logprob: -7.614346981048584
    10. '"' → logprob: -7.739346981048584

Token 84: ' """
' (ID: 7037)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.634868860244751
    2. '
' → logprob: -1.009868860244751
    3. '\n' → logprob: -2.509868860244751
    4. '```' → logprob: -4.759868621826172
    5. '    
' → logprob: -5.384868621826172
    6. ')' → logprob: -5.384868621826172
    7. '\' → logprob: -6.509868621826172
    8. '"""' → logprob: -6.884868621826172
    9. ':' → logprob: -7.009868621826172
    10. '  
' → logprob: -7.259868621826172

Token 85: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.013918785378336906
    2. ' for' → logprob: -4.888918876647949
    3. '
' → logprob: -5.388918876647949
    4. 'for' → logprob: -7.138918876647949
    5. ' indentation' → logprob: -8.26391887664795
    6. '    
' → logprob: -8.38891887664795
    7. '    ' → logprob: -9.01391887664795
    8. ' indent' → logprob: -9.38891887664795
    9. 'n' → logprob: -9.76391887664795
    10. ' 
' → logprob: -10.01391887664795

Token 86: ' import' (ID: 1588)
  Prédit: ' for'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' for' → logprob: -0.36541780829429626
    2. '   ' → logprob: -1.3654178380966187
    3. 'for' → logprob: -3.490417718887329
    4. '
' → logprob: -5.490417957305908
    5. ' original' → logprob: -5.615417957305908
    6. ' step' → logprob: -5.990417957305908
    7. ' indentation' → logprob: -6.740417957305908
    8. ' 
' → logprob: -6.740417957305908
    9. 'n' → logprob: -7.115417957305908
    10. ' max' → logprob: -7.115417957305908

Token 87: ' math' (ID: 13324)
  Prédit: ' math'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' math' → logprob: -0.00026181264547631145
    2. 'math' → logprob: -8.250262260437012
    3. '.math' → logprob: -15.625262260437012
    4. '(math' → logprob: -16.000261306762695
    5. ' floor' → logprob: -16.375261306762695
    6. '_math' → logprob: -16.500261306762695
    7. ' ' → logprob: -17.000261306762695
    8. ' numpy' → logprob: -17.625261306762695
    9. ' matem' → logprob: -18.125261306762695
    10. ' maths' → logprob: -18.250261306762695

Token 88: '

' (ID: 279)
  Prédit: '
'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '
' → logprob: -0.002011314034461975
    2. '   ' → logprob: -6.877011299133301
    3. 'n' → logprob: -8.0020112991333
    4. '    
' → logprob: -8.1270112991333
    5. '

' → logprob: -9.6270112991333
    6. '```' → logprob: -9.6270112991333
    7. ' for' → logprob: -9.7520112991333
    8. '\n' → logprob: -10.3770112991333
    9. ' 
' → logprob: -10.3770112991333
    10. '
' → logprob: -10.7520112991333

Token 89: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.06953418999910355
    2. '
' → logprob: -3.0695343017578125
    3. ' for' → logprob: -4.3195343017578125
    4. 'for' → logprob: -5.1945343017578125
    5. '    
' → logprob: -6.5695343017578125
    6. 'n' → logprob: -8.444534301757812
    7. '```' → logprob: -8.694534301757812
    8. '   
' → logprob: -11.444534301757812
    9. '  
' → logprob: -11.569534301757812
    10. ' 
' → logprob: -11.694534301757812

Token 90: ' #' (ID: 1069)
  Prédit: 'for'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'for' → logprob: -0.07375388592481613
    2. 'low' → logprob: -3.698753833770752
    3. 'original' → logprob: -4.323753833770752
    4. 'lower' → logprob: -4.948753833770752
    5. ' for' → logprob: -5.323753833770752
    6. 'max' → logprob: -5.698753833770752
    7. '#' (adapté à ' #') → logprob: -5.698753833770752
    8. 'price' → logprob: -5.823753833770752
    9. 'left' → logprob: -6.073753833770752
    10. 'def' → logprob: -6.323753833770752

Token 91: ' Parc' (ID: 68618)
  Prédit: 'for'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'for' → logprob: -0.6657177805900574
    2. ' for' → logprob: -0.7907177805900574
    3. ' original' → logprob: -3.915717840194702
    4. ' max' → logprob: -6.040717601776123
    5. 'original' → logprob: -6.165717601776123
    6. 'max' → logprob: -6.540717601776123
    7. '#' → logprob: -6.665717601776123
    8. 'def' → logprob: -7.415717601776123
    9. 'price' → logprob: -7.540717601776123
    10. '   ' → logprob: -7.790717601776123

Token 92: 'ours' (ID: 2327)
  Prédit: 'our'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'our' → logprob: -0.4870225787162781
    2. 'ours' → logprob: -1.9870226383209229
    3. 'ourt' → logprob: -1.9870226383209229
    4. 'oure' → logprob: -3.237022638320923
    5. 'e' → logprob: -3.862022638320923
    6. 'o' → logprob: -4.862022399902344
    7. '#' → logprob: -5.362022399902344
    8. '   ' → logprob: -5.487022399902344
    9. 'er' → logprob: -5.487022399902344
    10. '       ' → logprob: -5.987022399902344

Token 93: ' de' (ID: 334)
  Prédit: ' range'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' range' → logprob: -1.1901252269744873
    2. ' ' → logprob: -1.6901252269744873
    3. ' for' → logprob: -1.8151252269744873
    4. ' des' → logprob: -2.1901252269744873
    5. '   ' → logprob: -2.4401252269744873
    6. ' de' → logprob: -3.0651252269744873
    7. 'range' → logprob: -4.190125465393066
    8. ' i' → logprob: -4.315125465393066
    9. ' a' → logprob: -4.315125465393066
    10. ' d' → logprob: -4.565125465393066

Token 94: ' tous' (ID: 10688)
  Prédit: ' range'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' range' → logprob: -0.42451784014701843
    2. ' ' → logprob: -1.6745178699493408
    3. 'range' → logprob: -3.299517869949341
    4. ' la' → logprob: -3.424517869949341
    5. ' i' → logprob: -3.924517869949341
    6. ' a' → logprob: -3.924517869949341
    7. ' possible' → logprob: -4.549517631530762
    8. ' l' → logprob: -4.799517631530762
    9. ' after' → logprob: -5.299517631530762
    10. ' un' → logprob: -5.424517631530762

Token 95: ' les' (ID: 1341)
  Prédit: ' possible'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' possible' → logprob: -0.13463659584522247
    2. 'possible' → logprob: -2.884636640548706
    3. '_possible' → logprob: -3.259636640548706
    4. ' les' → logprob: -4.634636402130127
    5. ' possibles' → logprob: -4.759636402130127
    6. '   ' → logprob: -6.259636402130127
    7. ' le' → logprob: -6.634636402130127
    8. '(' → logprob: -6.634636402130127
    9. '_' → logprob: -7.009636402130127
    10. 'Possible' → logprob: -7.134636402130127

Token 96: ' ent' (ID: 1121)
  Prédit: 'prix'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'prix' → logprob: -0.6181337833404541
    2. ' prix' → logprob: -1.743133783340454
    3. 'possible' → logprob: -1.743133783340454
    4. ' possible' → logprob: -3.368133783340454
    5. 'original' → logprob: -3.743133783340454
    6. ' original' → logprob: -3.868133783340454
    7. 'prices' → logprob: -4.868133544921875
    8. 'price' → logprob: -4.993133544921875
    9. ' possibles' → logprob: -5.243133544921875
    10. 'poss' → logprob: -6.243133544921875

Token 97: 'iers' (ID: 11012)
  Prédit: 'iers'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'iers' → logprob: -0.03155414015054703
    2. 'i' → logprob: -3.5315542221069336
    3. 'ier' → logprob: -6.906554222106934
    4. '   ' → logprob: -7.781554222106934
    5. 'ières' → logprob: -9.156554222106934
    6. '
' → logprob: -10.531554222106934
    7. '```' → logprob: -10.531554222106934
    8. '  ' → logprob: -10.656554222106934
    9. '       ' → logprob: -10.656554222106934
    10. ' i' → logprob: -10.656554222106934

Token 98: ' possibles' (ID: 97753)
  Prédit: ' possibles'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' possibles' → logprob: -0.20412907004356384
    2. ' possible' → logprob: -2.0791289806365967
    3. '   ' → logprob: -3.5791289806365967
    4. 'possible' → logprob: -4.454129219055176
    5. ' entre' → logprob: -5.829129219055176
    6. ' de' → logprob: -5.954129219055176
    7. ' p' → logprob: -6.204129219055176
    8. '```' → logprob: -6.329129219055176
    9. '_possible' → logprob: -6.954129219055176
    10. ' a' → logprob: -7.204129219055176

Token 99: ' pour' (ID: 1930)
  Prédit: ' original'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' original' → logprob: -0.8388833999633789
    2. '   ' → logprob: -1.213883399963379
    3. ' for' → logprob: -1.963883399963379
    4. ' i' → logprob: -3.463883399963379
    5. ' de' → logprob: -3.963883399963379
    6. ' price' → logprob: -4.463883399963379
    7. ' possible' → logprob: -4.463883399963379
    8. ' range' → logprob: -4.588883399963379
    9. ' entre' → logprob: -5.213883399963379
    10. ',' → logprob: -5.713883399963379

Token 100: ' le' (ID: 505)
  Prédit: ' original'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' original' → logprob: -0.2028457075357437
    2. ' le' → logprob: -2.702845811843872
    3. 'original' → logprob: -2.827845811843872
    4. ' l' → logprob: -4.077845573425293
    5. ' price' → logprob: -5.202845573425293
    6. 'l' → logprob: -5.202845573425293
    7. ' prix' → logprob: -5.202845573425293
    8. 'prix' → logprob: -5.452845573425293
    9. ' p' → logprob: -5.827845573425293
    10. ' i' → logprob: -5.827845573425293

Token 101: ' prix' (ID: 18771)
  Prédit: 'prix'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'prix' → logprob: -1.2761253118515015
    2. ' original' → logprob: -1.4011253118515015
    3. ' prix' → logprob: -1.4011253118515015
    4. 'original' → logprob: -1.9011253118515015
    5. 'price' → logprob: -3.651125431060791
    6. ' price' → logprob: -3.901125431060791
    7. 'before' → logprob: -4.401125431060791
    8. ' before' → logprob: -5.276125431060791
    9. ' after' → logprob: -5.901125431060791
    10. 'after' → logprob: -6.151125431060791

Token 102: ' initial' (ID: 4871)
  Prédit: '_original'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '_original' → logprob: -0.44848746061325073
    2. '_' → logprob: -2.1984875202178955
    3. ' original' → logprob: -2.9484875202178955
    4. '_possible' → logprob: -2.9484875202178955
    5. '   ' → logprob: -3.6984875202178955
    6. ' d' → logprob: -3.9484875202178955
    7. 'original' → logprob: -4.073487281799316
    8. '_initial' → logprob: -4.198487281799316
    9. '_orig' → logprob: -4.448487281799316
    10. '_before' → logprob: -4.448487281799316

Token 103: ' (' (ID: 350)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.2719259560108185
    2. ' original' → logprob: -2.521925926208496
    3. ' for' → logprob: -3.396925926208496
    4. ',' → logprob: -3.396925926208496
    5. ' i' → logprob: -3.646925926208496
    6. ' de' → logprob: -4.396925926208496
    7. ' ' → logprob: -5.021925926208496
    8. ' ,' → logprob: -5.021925926208496
    9. '    ' → logprob: -5.396925926208496
    10. '  ' → logprob: -5.521925926208496

Token 104: 'avant' (ID: 63043)
  Prédit: '0'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '0' → logprob: -0.9746910333633423
    2. '   ' → logprob: -1.7246910333633423
    3. 'for' → logprob: -1.8496910333633423
    4. ' original' → logprob: -2.8496909141540527
    5. ' for' → logprob: -3.0996909141540527
    6. 'original' → logprob: -3.0996909141540527
    7. '1' → logprob: -3.5996909141540527
    8. 'price' → logprob: -3.8496909141540527
    9. 'after' → logprob: -4.099690914154053
    10. ' ' → logprob: -4.349690914154053

Token 105: ' taxe' (ID: 174271)
  Prédit: '_tax'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_tax' → logprob: -0.9645955562591553
    2. 'tax' → logprob: -1.3395955562591553
    3. ' taxe' → logprob: -1.3395955562591553
    4. '_' → logprob: -3.0895955562591553
    5. ' tax' → logprob: -4.089595794677734
    6. ')' → logprob: -4.464595794677734
    7. '_t' → logprob: -5.089595794677734
    8. ' ' → logprob: -5.464595794677734
    9. '   ' → logprob: -5.964595794677734
    10. ' )' → logprob: -6.714595794677734

Token 106: ')
' (ID: 446)
  Prédit: ','
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ',' → logprob: -0.7656443119049072
    2. '   ' → logprob: -1.1406443119049072
    3. ')' → logprob: -1.7656443119049072
    4. ' )' → logprob: -4.640644073486328
    5. ' ,' → logprob: -4.890644073486328
    6. '):' → logprob: -5.015644073486328
    7. '):
' → logprob: -5.390644073486328
    8. '0' → logprob: -5.640644073486328
    9. ' for' → logprob: -6.015644073486328
    10. ' range' → logprob: -6.640644073486328

Token 107: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.004881484899669886
    2. ' for' → logprob: -5.879881381988525
    3. ',' → logprob: -6.879881381988525
    4. 'for' → logprob: -8.004881858825684
    5. '    
' → logprob: -8.129881858825684
    6. '
' → logprob: -9.004881858825684
    7. '    ' → logprob: -9.379881858825684
    8. ':' → logprob: -9.879881858825684
    9. '  ' → logprob: -10.254881858825684
    10. ' ' → logprob: -11.129881858825684

Token 108: ' for' (ID: 395)
  Prédit: ' for'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' for' → logprob: -0.1760120838880539
    2. '   ' → logprob: -1.9260120391845703
    3. 'for' (adapté à ' for') → logprob: -4.17601203918457
    4. '
' → logprob: -8.67601203918457
    5. '    
' → logprob: -9.55101203918457
    6. ' 
' → logprob: -10.30101203918457
    7. ' range' → logprob: -12.30101203918457
    8. '    ' → logprob: -12.42601203918457
    9. ' possible' → logprob: -12.80101203918457
    10. ' ' → logprob: -12.92601203918457

Token 109: ' i' (ID: 575)
  Prédit: ' original'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' original' → logprob: -0.12132097780704498
    2. 'original' → logprob: -2.746320962905884
    3. ' price' → logprob: -3.371320962905884
    4. ' initial' → logprob: -4.996321201324463
    5. 'price' → logprob: -5.746321201324463
    6. ' prix' → logprob: -6.621321201324463
    7. ' possible' → logprob: -6.871321201324463
    8. 'initial' → logprob: -6.996321201324463
    9. ' i' → logprob: -7.371321201324463
    10. 'prix' → logprob: -7.496321201324463

Token 110: ' in' (ID: 306)
  Prédit: ' in'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' in' → logprob: -0.007057996466755867
    2. 'in' → logprob: -5.132058143615723
    3. ' ' → logprob: -6.882058143615723
    4. '   ' → logprob: -10.257058143615723
    5. '  ' → logprob: -10.757058143615723
    6. 'n' → logprob: -11.382058143615723
    7. ' i' → logprob: -12.007058143615723
    8. ',' → logprob: -12.257058143615723
    9. '    ' → logprob: -12.819558143615723
    10. ' n' → logprob: -12.944558143615723

Token 111: ' range' (ID: 3352)
  Prédit: ' range'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' range' → logprob: -9.710618905955926e-05
    2. 'range' → logprob: -9.250097274780273
    3. ' ' → logprob: -14.875097274780273
    4. '	range' → logprob: -15.000097274780273
    5. '(range' → logprob: -16.375097274780273
    6. ' rang' → logprob: -16.750097274780273
    7. ' ' → logprob: -17.875097274780273
    8. ' xrange' → logprob: -18.125097274780273
    9. ' math' → logprob: -18.250097274780273
    10. ' rango' → logprob: -18.250097274780273

Token 112: '(' (ID: 7)
  Prédit: '(after'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(after' → logprob: -0.043732937425374985
    2. '(' → logprob: -3.1687328815460205
    3. '(math' → logprob: -7.9187331199646
    4. '((' → logprob: -8.793732643127441
    5. '(int' → logprob: -9.168732643127441
    6. ' (' → logprob: -9.543732643127441
    7. ' after' → logprob: -10.793732643127441
    8. '(
' → logprob: -11.918732643127441
    9. 'after' → logprob: -12.668732643127441
    10. '(max' → logprob: -13.293732643127441

Token 113: '1' (ID: 16)
  Prédit: 'after'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'after' → logprob: -0.06407292932271957
    2. '(after' → logprob: -3.439072847366333
    3. ' after' → logprob: -4.814073085784912
    4. 'math' → logprob: -5.314073085784912
    5. '(' → logprob: -5.564073085784912
    6. '(math' → logprob: -5.939073085784912
    7. 'int' → logprob: -5.939073085784912
    8. '100' → logprob: -6.314073085784912
    9. '(int' → logprob: -6.689073085784912
    10. '10' → logprob: -6.939073085784912

Token 114: ',' (ID: 11)
  Prédit: ','
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ',' → logprob: -0.00043698702938854694
    2. ' ,' → logprob: -7.875436782836914
    3. ',
' → logprob: -10.375436782836914
    4. '   ' → logprob: -10.750436782836914
    5. ',int' → logprob: -13.625436782836914
    6. ' after' → logprob: -13.875436782836914
    7. 'after' → logprob: -14.625436782836914
    8. '    ' → logprob: -15.000436782836914
    9. ' ,
' → logprob: -15.500436782836914
    10. '0' → logprob: -15.875436782836914

Token 115: ' ' (ID: 220)
  Prédit: 'after'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'after' → logprob: -0.4782383441925049
    2. ' after' → logprob: -0.9782383441925049
    3. '   ' → logprob: -6.853238105773926
    4. '10' → logprob: -7.228238105773926
    5. '100' → logprob: -7.353238105773926
    6. '(after' → logprob: -7.478238105773926
    7. ' ' → logprob: -7.728238105773926
    8. ' math' → logprob: -8.603238105773926
    9. ' (' → logprob: -8.728238105773926
    10. ' int' → logprob: -9.478238105773926

Token 116: '462' (ID: 38302)
  Prédit: 'after'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'after' → logprob: -0.020874565467238426
    2. '(after' → logprob: -5.020874500274658
    3. '10' → logprob: -5.145874500274658
    4. '100' → logprob: -5.520874500274658
    5. '2' → logprob: -6.145874500274658
    6. 'math' → logprob: -7.270874500274658
    7. '(' → logprob: -7.645874500274658
    8. 'int' → logprob: -7.645874500274658
    9. ' after' → logprob: -8.395874977111816
    10. '200' → logprob: -9.770874977111816

Token 117: '98' (ID: 5080)
  Prédit: '5'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '5' → logprob: -0.8892632722854614
    2. '0' → logprob: -1.5142632722854614
    3. '1' → logprob: -2.014263153076172
    4. '6' → logprob: -2.639263153076172
    5. ')' → logprob: -3.389263153076172
    6. '50' → logprob: -3.514263153076172
    7. '):
' → logprob: -3.639263153076172
    8. '10' → logprob: -4.264263153076172
    9. '):' → logprob: -4.514263153076172
    10. '7' → logprob: -5.014263153076172

Token 118: '):
' (ID: 1883)
  Prédit: '):'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '):' → logprob: -0.021474236622452736
    2. '):
' → logprob: -4.646474361419678
    3. ')' → logprob: -5.271474361419678
    4. '+' → logprob: -6.021474361419678
    5. '0' → logprob: -6.771474361419678
    6. '7' → logprob: -7.271474361419678
    7. '5' → logprob: -7.646474361419678
    8. ' ):' → logprob: -7.896474361419678
    9. '6' → logprob: -8.27147388458252
    10. '1' → logprob: -8.39647388458252

Token 119: '       ' (ID: 309)
  Prédit: '       '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '       ' → logprob: -0.0005333751323632896
    2. ':' → logprob: -7.875533580780029
    3. '        
' → logprob: -9.500533103942871
    4. '   ' → logprob: -11.250533103942871
    5. ',' → logprob: -11.500533103942871
    6. '<|end|>' → logprob: -11.875533103942871
    7. '    ' → logprob: -12.125533103942871
    8. ' if' → logprob: -12.375533103942871
    9. '      ' → logprob: -12.500533103942871
    10. ' :' → logprob: -12.500533103942871

Token 120: ' #' (ID: 1069)
  Prédit: '       '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '       ' → logprob: -0.25518205761909485
    2. ' if' → logprob: -2.1301820278167725
    3. 'if' → logprob: -2.6301820278167725
    4. ' after' → logprob: -4.505182266235352
    5. 'price' → logprob: -5.505182266235352
    6. ' price' → logprob: -5.630182266235352
    7. 'tax' → logprob: -5.880182266235352
    8. '   ' → logprob: -6.005182266235352
    9. 'after' → logprob: -6.130182266235352
    10. ' original' → logprob: -6.130182266235352

Token 121: ' Calcul' (ID: 57243)
  Prédit: ' price'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' price' → logprob: -1.660421371459961
    2. ' tax' → logprob: -1.660421371459961
    3. ' if' → logprob: -2.035421371459961
    4. ' taxed' → logprob: -2.285421371459961
    5. ' calculated' → logprob: -2.410421371459961
    6. ' after' → logprob: -2.660421371459961
    7. ' original' → logprob: -2.785421371459961
    8. 'if' → logprob: -3.285421371459961
    9. 'tax' → logprob: -3.285421371459961
    10. 'price' → logprob: -3.910421371459961

Token 122: ' du' (ID: 1462)
  Prédit: ' de'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' de' → logprob: -0.7801809310913086
    2. ' du' → logprob: -1.5301809310913086
    3. '   ' → logprob: -2.0301809310913086
    4. '       ' → logprob: -3.1551809310913086
    5. ' after' → logprob: -3.1551809310913086
    6. ' le' → logprob: -3.4051809310913086
    7. ' (' → logprob: -4.405180931091309
    8. ' après' → logprob: -4.655180931091309
    9. ' prix' → logprob: -4.905180931091309
    10. ')' → logprob: -4.905180931091309

Token 123: ' prix' (ID: 18771)
  Prédit: ' prix'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' prix' → logprob: -0.7846226692199707
    2. ' price' → logprob: -1.2846226692199707
    3. 'price' → logprob: -2.4096226692199707
    4. 'prix' → logprob: -2.4096226692199707
    5. ' after' → logprob: -3.0346226692199707
    6. ' original' → logprob: -4.159622669219971
    7. 'after' → logprob: -5.034622669219971
    8. ' tax' → logprob: -5.159622669219971
    9. 'tax' → logprob: -5.534622669219971
    10. ' t' → logprob: -6.659622669219971

Token 124: ' après' (ID: 16460)
  Prédit: '_ap'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_ap' → logprob: -0.5824304819107056
    2. '_t' → logprob: -2.457430362701416
    3. 'ap' → logprob: -2.582430362701416
    4. '_initial' → logprob: -2.707430362701416
    5. ' TTC' → logprob: -3.207430362701416
    6. '_' → logprob: -3.457430362701416
    7. 'avec' → logprob: -3.582430362701416
    8. '_after' → logprob: -3.832430362701416
    9. 'initial' → logprob: -4.707430362701416
    10. ' après' → logprob: -4.957430362701416

Token 125: ' ajout' (ID: 64605)
  Prédit: 'tax'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'tax' → logprob: -0.5877078175544739
    2. ' tax' → logprob: -1.462707757949829
    3. ' taxe' → logprob: -2.087707757949829
    4. ' i' → logprob: -3.212707757949829
    5. '_tax' → logprob: -3.837707757949829
    6. ' math' → logprob: -4.962707996368408
    7. 'math' → logprob: -5.087707996368408
    8. 'i' → logprob: -5.587707996368408
    9. ' la' → logprob: -5.962707996368408
    10. ' int' → logprob: -6.462707996368408

Token 126: ' de' (ID: 334)
  Prédit: ' de'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' de' → logprob: -0.08793091028928757
    2. '       ' → logprob: -3.087930917739868
    3. '   ' → logprob: -3.337930917739868
    4. ' d' → logprob: -6.337930679321289
    5. 'de' → logprob: -7.712930679321289
    6. 'd' → logprob: -8.587930679321289
    7. '    ' → logprob: -9.587930679321289
    8. ' ' → logprob: -9.712930679321289
    9. 'def' → logprob: -9.712930679321289
    10. ' du' → logprob: -9.712930679321289

Token 127: ' ' (ID: 220)
  Prédit: ' math'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' math' → logprob: -0.6960055232048035
    2. ' i' → logprob: -1.6960055828094482
    3. 'math' → logprob: -2.3210055828094482
    4. ' la' → logprob: -2.3210055828094482
    5. ' int' → logprob: -2.8210055828094482
    6. 'i' → logprob: -3.9460055828094482
    7. 'tax' → logprob: -4.571005344390869
    8. ' taxe' → logprob: -4.821005344390869
    9. ' tax' → logprob: -4.946005344390869
    10. 'int' → logprob: -5.196005344390869

Token 128: '8' (ID: 23)
  Prédit: ' la'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' la' → logprob: -1.371493935585022
    2. 'tax' → logprob: -1.371493935585022
    3. 'la' → logprob: -1.746493935585022
    4. 't' → logprob: -2.4964938163757324
    5. 'i' → logprob: -2.6214938163757324
    6. ' t' → logprob: -3.1214938163757324
    7. ' i' → logprob: -3.6214938163757324
    8. ' taxe' → logprob: -3.7464938163757324
    9. 'l' → logprob: -3.9964938163757324
    10. '8' → logprob: -4.496493816375732

Token 129: '%' (ID: 4)
  Prédit: '%'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '%' → logprob: -0.02068144455552101
    2. '*' → logprob: -4.520681381225586
    3. ' %' → logprob: -5.645681381225586
    4. '.' → logprob: -6.020681381225586
    5. ' *' → logprob: -6.270681381225586
    6. '   ' → logprob: -7.520681381225586
    7. '%)' → logprob: -8.520681381225586
    8. ')' → logprob: -8.645681381225586
    9. ' ' → logprob: -8.895681381225586
    10. ',' → logprob: -9.145681381225586

Token 130: ' de' (ID: 334)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.09016597270965576
    2. '       ' → logprob: -3.2151660919189453
    3. ' de' → logprob: -3.8401660919189453
    4. ' (' → logprob: -5.465166091918945
    5. ' tax' → logprob: -5.590166091918945
    6. ',' → logprob: -5.715166091918945
    7. 'tax' → logprob: -6.215166091918945
    8. ' du' → logprob: -6.215166091918945
    9. ' taxe' → logprob: -6.465166091918945
    10. ' TTC' → logprob: -6.840166091918945

Token 131: ' taxe' (ID: 174271)
  Prédit: ' taxe'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' taxe' → logprob: -0.18758441507816315
    2. ' t' → logprob: -2.687584400177002
    3. ' i' → logprob: -3.312584400177002
    4. ' tax' → logprob: -3.687584400177002
    5. 'tax' → logprob: -3.937584400177002
    6. ' TVA' → logprob: -4.562584400177002
    7. ' taxes' → logprob: -5.187584400177002
    8. 't' → logprob: -5.687584400177002
    9. 'i' → logprob: -6.437584400177002
    10. ' ' → logprob: -7.562584400177002

Token 132: ',' (ID: 11)
  Prédit: '       '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '       ' → logprob: -0.024812906980514526
    2. ':' → logprob: -4.024812698364258
    3. ',' → logprob: -5.899812698364258
    4. '   ' → logprob: -6.899812698364258
    5. ' :' → logprob: -7.024812698364258
    6. ' =' → logprob: -7.774812698364258
    7. '        
' → logprob: -8.274812698364258
    8. ':
' → logprob: -8.399812698364258
    9. '):
' → logprob: -8.524812698364258
    10. ' if' → logprob: -9.149812698364258

Token 133: ' arr' (ID: 1724)
  Prédit: '       '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '       ' → logprob: -0.09175964444875717
    2. ' after' → logprob: -3.71675968170166
    3. ' prix' → logprob: -3.84175968170166
    4. ' tax' → logprob: -4.96675968170166
    5. ' t' → logprob: -5.09175968170166
    6. ' price' → logprob: -5.46675968170166
    7. ' puis' → logprob: -5.84175968170166
    8. ' avec' → logprob: -6.09175968170166
    9. ' if' → logprob: -6.21675968170166
    10. ' après' → logprob: -6.21675968170166

Token 134: 'ondi' (ID: 117409)
  Prédit: 'ondi'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'ondi' → logprob: -0.00026658078422769904
    2. 'ond' → logprob: -8.250267028808594
    3. 'on' → logprob: -12.250267028808594
    4. 'ondissement' → logprob: -15.000267028808594
    5. 'ound' → logprob: -16.625267028808594
    6. 'o' → logprob: -17.375267028808594
    7. 'onde' → logprob: -17.500267028808594
    8. 'i' → logprob: -18.125267028808594
    9. ' on' → logprob: -18.250267028808594
    10. 'onni' → logprob: -18.375267028808594

Token 135: ' à' (ID: 1221)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.920046865940094
    2. ' vers' → logprob: -1.2950468063354492
    3. 'down' → logprob: -2.295046806335449
    4. ' à' → logprob: -2.670046806335449
    5. ')' → logprob: -3.545046806335449
    6. ' =' → logprob: -4.045046806335449
    7. '(math' → logprob: -4.170046806335449
    8. ' down' → logprob: -4.295046806335449
    9. '=' → logprob: -4.420046806335449
    10. 'à' → logprob: -4.670046806335449

Token 136: ' l' (ID: 305)
  Prédit: 'l'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'l' → logprob: -0.42387038469314575
    2. 'math' → logprob: -1.548870325088501
    3. '1' → logprob: -3.423870325088501
    4. '0' → logprob: -3.548870325088501
    5. ' l' → logprob: -3.798870325088501
    6. ' ' → logprob: -3.923870325088501
    7. ' math' → logprob: -5.29887056350708
    8. 'down' → logprob: -5.54887056350708
    9. 'moins' → logprob: -5.54887056350708
    10. '```' → logprob: -6.17387056350708

Token 137: ''ent' (ID: 53422)
  Prédit: 'ent'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'ent' → logprob: -0.927080512046814
    2. 'inf' → logprob: -0.927080512046814
    3. 'e' → logprob: -1.927080512046814
    4. 'et' → logprob: -4.3020806312561035
    5. 'a' → logprob: -4.4270806312561035
    6. '
' → logprob: -4.9270806312561035
    7. ''ent' → logprob: -5.0520806312561035
    8. 'es' → logprob: -5.4270806312561035
    9. 'floor' → logprob: -5.5520806312561035
    10. ''in' → logprob: -6.3020806312561035

Token 138: 'ier' (ID: 905)
  Prédit: 'ier'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'ier' → logprob: -0.00209673005156219
    2. 'i' → logprob: -7.627096652984619
    3. 'et' → logprob: -8.002097129821777
    4. 'er' → logprob: -8.502097129821777
    5. 'ière' → logprob: -8.502097129821777
    6. 'e' → logprob: -8.502097129821777
    7. 'ié' → logprob: -8.502097129821777
    8. 't' → logprob: -9.627097129821777
    9. 'iert' → logprob: -9.752097129821777
    10. 'eil' → logprob: -10.002097129821777

Token 139: ' inférieur' (ID: 191498)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.9761621952056885
    2. ')' → logprob: -1.4761621952056885
    3. ' par' → logprob: -2.1011621952056885
    4. ' )' → logprob: -2.7261621952056885
    5. ' i' → logprob: -3.4761621952056885
    6. ' (' → logprob: -3.8511621952056885
    7. ' ' → logprob: -4.101161956787109
    8. ' via' → logprob: -4.601161956787109
    9. '(i' → logprob: -4.601161956787109
    10. 'down' → logprob: -4.726161956787109

Token 140: '
' (ID: 198)
  Prédit: '       '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '       ' → logprob: -0.08826513588428497
    2. ':' → logprob: -2.8382651805877686
    3. ',' → logprob: -4.3382649421691895
    4. ' :' → logprob: -4.9632649421691895
    5. '):' → logprob: -7.0882649421691895
    6. ':
' → logprob: -7.0882649421691895
    7. ' :
' → logprob: -7.0882649421691895
    8. '   ' → logprob: -7.4632649421691895
    9. '):
' → logprob: -7.5882649421691895
    10. ')' → logprob: -7.9632649421691895

Token 141: '       ' (ID: 309)
  Prédit: '       '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '       ' → logprob: -0.0013385741040110588
    2. ':' → logprob: -7.126338481903076
    3. ',' → logprob: -8.626338958740234
    4. ' if' → logprob: -8.626338958740234
    5. '   ' → logprob: -10.251338958740234
    6. ' after' → logprob: -10.751338958740234
    7. '        
' → logprob: -10.751338958740234
    8. ' :' → logprob: -11.376338958740234
    9. '           ' → logprob: -11.626338958740234
    10. ')' → logprob: -12.063838958740234

Token 142: ' if' (ID: 538)
  Prédit: ' after'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' after' → logprob: -0.6933243274688721
    2. ' price' → logprob: -1.693324327468872
    3. ' if' → logprob: -2.568324327468872
    4. ' taxed' → logprob: -3.068324327468872
    5. 'price' → logprob: -3.193324327468872
    6. '   ' → logprob: -3.318324327468872
    7. 'after' → logprob: -3.318324327468872
    8. ' tax' → logprob: -3.943324327468872
    9. 'if' (adapté à ' if') → logprob: -4.193324089050293
    10. 'tax' → logprob: -4.443324089050293

Token 143: ' math' (ID: 13324)
  Prédit: ' math'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' math' → logprob: -0.0064336336217820644
    2. 'math' → logprob: -5.131433486938477
    3. ' after' → logprob: -8.256433486938477
    4. '(math' → logprob: -8.881433486938477
    5. ' int' → logprob: -10.006433486938477
    6. ' i' → logprob: -10.381433486938477
    7. ' (' → logprob: -11.756433486938477
    8. ' ' → logprob: -12.006433486938477
    9. 'after' → logprob: -12.631433486938477
    10. ' ' → logprob: -13.131433486938477

Token 144: '.floor' (ID: 23934)
  Prédit: '.floor'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '.floor' → logprob: -0.029886214062571526
    2. '.' → logprob: -3.529886245727539
    3. ' .' → logprob: -9.654886245727539
    4. '.ceil' → logprob: -9.779886245727539
    5. '.f' → logprob: -11.779886245727539
    6. '.sqrt' → logprob: -13.404886245727539
    7. ' floor' → logprob: -13.404886245727539
    8. '.isnan' → logprob: -13.779886245727539
    9. 'floor' → logprob: -14.529886245727539
    10. '.
' → logprob: -14.654886245727539

Token 145: '(i' (ID: 3649)
  Prédit: '(i'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(i' → logprob: -0.0010762764140963554
    2. '((' → logprob: -7.1260762214660645
    3. '(' → logprob: -8.251076698303223
    4. ' (' → logprob: -11.626076698303223
    5. '   ' → logprob: -14.376076698303223
    6. '(I' → logprob: -14.626076698303223
    7. '(
' → logprob: -15.626076698303223
    8. '(s' → logprob: -16.126075744628906
    9. '(((' → logprob: -16.501075744628906
    10. ' i' → logprob: -16.626075744628906

Token 146: ' *' (ID: 425)
  Prédit: ' *'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' *' → logprob: -0.34849998354911804
    2. '*' → logprob: -1.2235000133514404
    3. '   ' → logprob: -10.34850025177002
    4. ' ' → logprob: -11.09850025177002
    5. '1' → logprob: -12.59850025177002
    6. '    ' → logprob: -14.47350025177002
    7. ' ' → logprob: -14.47350025177002
    8. '  ' → logprob: -14.59850025177002
    9. '**' → logprob: -14.72350025177002
    10. '```' → logprob: -14.72350025177002

Token 147: ' ' (ID: 220)
  Prédit: '1'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '1' → logprob: -0.02054842747747898
    2. ' ' → logprob: -3.8955483436584473
    3. '(' → logprob: -12.145548820495605
    4. ' (' → logprob: -14.395548820495605
    5. '   ' → logprob: -15.583048820495605
    6. '0' → logprob: -16.02054786682129
    7. '```' → logprob: -16.33304786682129
    8. '.' → logprob: -16.45804786682129
    9. '  ' → logprob: -16.95804786682129
    10. ')' → logprob: -17.45804786682129

Token 148: '1' (ID: 16)
  Prédit: '1'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '1' → logprob: -0.0009356398368254304
    2. ' ' → logprob: -7.0009355545043945
    3. '(' → logprob: -10.750935554504395
    4. '0' → logprob: -13.625935554504395
    5. ' (' → logprob: -14.500935554504395
    6. '   ' → logprob: -15.188435554504395
    7. '```' → logprob: -15.313435554504395
    8. '.' → logprob: -15.750935554504395
    9. '  ' → logprob: -16.25093650817871
    10. ')' → logprob: -17.06343650817871

Token 149: '.' (ID: 13)
  Prédit: '.'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '.' → logprob: -4.870950215263292e-05
    2. '0' → logprob: -10.125048637390137
    3. '1' → logprob: -12.000048637390137
    4. ',' → logprob: -14.500048637390137
    5. ' .' → logprob: -14.500048637390137
    6. '<|end|>' → logprob: -14.500048637390137
    7. ' ' → logprob: -15.875048637390137
    8. '04' → logprob: -16.000049591064453
    9. '08' → logprob: -17.000049591064453

Token 150: '08' (ID: 3062)
  Prédit: '08'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '08' → logprob: -1.771655115589965e-05
    2. '0' → logprob: -11.000018119812012
    3. '```' → logprob: -15.000018119812012
    4. '8' → logprob: -16.437517166137695
    5. '088' → logprob: -16.500017166137695
    6. '
' → logprob: -17.000017166137695
    7. '082' → logprob: -17.250017166137695
    8. 'os' → logprob: -17.375017166137695
    9. '07' → logprob: -17.500017166137695
    10. 'exp' → logprob: -17.562517166137695

Token 151: ')' (ID: 8)
  Prédit: ')'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')' → logprob: -0.00047845521476119757
    2. ' )' → logprob: -8.125478744506836
    3. ')==' → logprob: -8.625478744506836
    4. '==' → logprob: -14.000478744506836
    5. '))' → logprob: -14.750478744506836
    6. ')>=' → logprob: -15.125478744506836
    7. '')' → logprob: -15.250478744506836
    8. ')=' → logprob: -15.500478744506836
    9. '())' → logprob: -15.875478744506836
    10. '   ' → logprob: -15.875478744506836

Token 152: ' ==' (ID: 951)
  Prédit: ' =='
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' ==' → logprob: -0.14281240105628967
    2. '==' → logprob: -2.017812490463257
    3. ')' → logprob: -9.392812728881836
    4. ')==' → logprob: -10.267812728881836
    5. '=' → logprob: -11.142812728881836
    6. ']==' → logprob: -13.517812728881836
    7. ' ' → logprob: -14.142812728881836
    8. '()==' → logprob: -14.267812728881836
    9. ' ' → logprob: -14.392812728881836
    10. '==
' → logprob: -15.392812728881836

Token 153: ' after' (ID: 1934)
  Prédit: ' after'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' after' → logprob: -0.023245712742209435
    2. 'after' → logprob: -3.7732458114624023
    3. ' ' → logprob: -15.898245811462402
    4. ' après' → logprob: -16.273244857788086
    5. '(after' → logprob: -17.523244857788086
    6. '_after' → logprob: -17.898244857788086
    7. ' nach' → logprob: -18.023244857788086
    8. ' efter' → logprob: -18.148244857788086
    9. ' a' → logprob: -18.523244857788086
    10. ' etter' → logprob: -18.648244857788086

Token 154: '_tax' (ID: 61146)
  Prédit: '_tax'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_tax' → logprob: -0.0003466673369985074
    2. '_' → logprob: -8.000347137451172
    3. '_t' → logprob: -12.000347137451172
    4. ' _' → logprob: -13.125347137451172
    5. '_price' → logprob: -13.625347137451172
    6. ''_' → logprob: -14.500347137451172
    7. '_tar' → logprob: -15.500347137451172
    8. ')_' → logprob: -15.875347137451172
    9. '_token' → logprob: -16.500347137451172
    10. '"_' → logprob: -16.500347137451172

Token 155: '_price' (ID: 18814)
  Prédit: '_price'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_price' → logprob: -0.0002338144404347986
    2. '_' → logprob: -8.37523365020752
    3. ' _' → logprob: -13.75023365020752
    4. '_prices' → logprob: -14.25023365020752
    5. '_p' → logprob: -14.37523365020752
    6. '_code' → logprob: -14.75023365020752
    7. '_pr' → logprob: -16.125234603881836
    8. 'price' → logprob: -17.000234603881836
    9. '_
' → logprob: -17.375234603881836
    10. '_cost' → logprob: -17.625234603881836

Token 156: ':
' (ID: 734)
  Prédit: ':'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ':' → logprob: -0.006814239080995321
    2. ':
' → logprob: -5.006814002990723
    3. ':return' → logprob: -9.631814002990723
    4. '       ' → logprob: -10.381814002990723
    5. ':
' → logprob: -14.006814002990723
    6. ' :' → logprob: -14.381814002990723
    7. '):
' → logprob: -15.381814002990723
    8. ':

' → logprob: -15.756814002990723
    9. '):' → logprob: -15.756814002990723
    10. ',' → logprob: -15.881814002990723

Token 157: '           ' (ID: 352)
  Prédit: '           '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '           ' → logprob: -0.43271157145500183
    2. '       ' → logprob: -1.0577116012573242
    3. ' return' → logprob: -6.557711601257324
    4. '
' → logprob: -6.807711601257324
    5. 'return' → logprob: -7.057711601257324
    6. ':' → logprob: -8.682711601257324
    7. '	       ' → logprob: -8.932711601257324
    8. '        
' → logprob: -9.182711601257324
    9. ':return' → logprob: -9.932711601257324
    10. '<|end|>' → logprob: -10.182711601257324

Token 158: ' #' (ID: 1069)
  Prédit: '       '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '       ' → logprob: -0.5842487812042236
    2. 'return' → logprob: -0.8342487812042236
    3. ' return' → logprob: -4.8342485427856445
    4. '           ' → logprob: -8.084248542785645
    5. '   ' → logprob: -12.084248542785645
    6. '
' → logprob: -12.709248542785645
    7. '	return' → logprob: -12.709248542785645
    8. '               ' → logprob: -13.584248542785645
    9. '{return' → logprob: -15.334248542785645
    10. '      ' → logprob: -16.08424949645996

Token 159: ' Retour' (ID: 146830)
  Prédit: 'return'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'return' → logprob: -0.24175243079662323
    2. ' return' → logprob: -1.7417523860931396
    3. '       ' → logprob: -3.2417523860931396
    4. '           ' → logprob: -7.866752624511719
    5. '   ' → logprob: -9.991752624511719
    6. '	return' → logprob: -12.741752624511719
    7. '
' → logprob: -12.741752624511719
    8. 'ret' → logprob: -13.991752624511719
    9. '     ' → logprob: -14.491752624511719
    10. '      ' → logprob: -14.491752624511719

Token 160: 'ne' (ID: 611)
  Prédit: 'n'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'n' → logprob: -0.3288702964782715
    2. 'ner' → logprob: -1.7038702964782715
    3. 'ne' → logprob: -2.5788702964782715
    4. ' n' → logprob: -4.7038702964782715
    5. 'ns' → logprob: -5.3288702964782715
    6. ' i' → logprob: -5.9538702964782715
    7. 'neur' → logprob: -6.3288702964782715
    8. 'ni' → logprob: -7.4538702964782715
    9. 'nne' → logprob: -7.5788702964782715
    10. '   ' → logprob: -7.7038702964782715

Token 161: ' le' (ID: 505)
  Prédit: ' i'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' i' → logprob: -0.06197429448366165
    2. 'i' → logprob: -2.811974287033081
    3. '           ' → logprob: -12.43697452545166
    4. ' ' → logprob: -13.93697452545166
    5. '	i' → logprob: -14.06197452545166
    6. ' 
' → logprob: -15.06197452545166
    7. ' ' → logprob: -15.93697452545166
    8. '   ' → logprob: -16.061973571777344
    9. '               ' → logprob: -16.186973571777344
    10. '
' → logprob: -16.311973571777344

Token 162: ' prix' (ID: 18771)
  Prédit: 'i'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'i' → logprob: -0.16027753055095673
    2. ' i' → logprob: -1.9102774858474731
    3. '           ' → logprob: -10.535277366638184
    4. '   ' → logprob: -11.285277366638184
    5. ' ' → logprob: -12.285277366638184
    6. '    ' → logprob: -13.160277366638184
    7. '	i' → logprob: -13.285277366638184
    8. ' original' → logprob: -13.535277366638184
    9. '       ' → logprob: -14.160277366638184
    10. ' 
' → logprob: -14.160277366638184

Token 163: ' initial' (ID: 4871)
  Prédit: ' i'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' i' → logprob: -0.006125733256340027
    2. 'i' → logprob: -5.1311259269714355
    3. ' original' → logprob: -9.381125450134277
    4. '           ' → logprob: -10.756125450134277
    5. '    ' → logprob: -10.881125450134277
    6. ' ' → logprob: -11.131125450134277
    7. ' ' → logprob: -11.506125450134277
    8. ' avant' → logprob: -11.631125450134277
    9. ' initial' → logprob: -12.006125450134277
    10. '            ' → logprob: -12.006125450134277

Token 164: ' si' (ID: 1784)
  Prédit: '       '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '       ' → logprob: -0.24916349351406097
    2. '           ' → logprob: -1.7491635084152222
    3. ' i' → logprob: -3.9991633892059326
    4. '               ' → logprob: -5.374163627624512
    5. 'i' → logprob: -5.749163627624512
    6. '	       ' → logprob: -5.749163627624512
    7. '        
' → logprob: -6.249163627624512
    8. ',' → logprob: -6.499163627624512
    9. '(i' → logprob: -6.624163627624512
    10. ' 
' → logprob: -6.624163627624512

Token 165: ' la' (ID: 557)
  Prédit: ' i'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' i' → logprob: -0.011354905553162098
    2. 'i' → logprob: -4.761354923248291
    3. ' trouvé' → logprob: -6.011354923248291
    4. ' ' → logprob: -9.261354446411133
    5. ' True' → logprob: -9.886354446411133
    6. ' ' → logprob: -10.011354446411133
    7. ' found' → logprob: -10.386354446411133
    8. ' encontrado' → logprob: -10.761354446411133
    9. ' math' → logprob: -11.386354446411133
    10. 'True' → logprob: -12.011354446411133

Token 166: ' condition' (ID: 7060)
  Prédit: ' condition'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' condition' → logprob: -0.1925758421421051
    2. 'condition' → logprob: -2.3175759315490723
    3. ' valeur' → logprob: -3.4425759315490723
    4. '   ' → logprob: -5.067575931549072
    5. 'i' → logprob: -5.192575931549072
    6. 'fonction' → logprob: -5.567575931549072
    7. ' i' → logprob: -5.817575931549072
    8. '       ' → logprob: -5.817575931549072
    9. 'val' → logprob: -6.192575931549072
    10. ' fonction' → logprob: -6.567575931549072

Token 167: ' est' (ID: 893)
  Prédit: ' est'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' est' → logprob: -0.03899881988763809
    2. ' is' → logprob: -3.53899884223938
    3. 'est' → logprob: -5.163998603820801
    4. '           ' → logprob: -6.663998603820801
    5. ' ' → logprob: -7.163998603820801
    6. ' i' → logprob: -8.0389986038208
    7. '       ' → logprob: -8.1639986038208
    8. '   ' → logprob: -8.5389986038208
    9. ' True' → logprob: -8.9139986038208
    10. ' ' → logprob: -9.1639986038208

Token 168: ' satis' (ID: 56317)
  Prédit: 'v'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'v' → logprob: -0.7059205770492554
    2. 'True' → logprob: -1.3309205770492554
    3. ' True' → logprob: -1.9559205770492554
    4. ' rempl' → logprob: -3.205920696258545
    5. 'true' → logprob: -3.830920696258545
    6. '       ' → logprob: -4.330920696258545
    7. ' vraie' → logprob: -5.205920696258545
    8. '   ' → logprob: -5.330920696258545
    9. 's' → logprob: -5.580920696258545
    10. ' true' → logprob: -5.705920696258545

Token 169: 'faite' (ID: 69848)
  Prédit: 'faite'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'faite' → logprob: -0.0052492949180305
    2. 'f' → logprob: -5.880249500274658
    3. 'fait' → logprob: -6.130249500274658
    4. 'fa' → logprob: -8.8802490234375
    5. '   ' → logprob: -9.7552490234375
    6. 'ait' → logprob: -10.6302490234375
    7. 'faire' → logprob: -10.6302490234375
    8. 'face' → logprob: -11.7552490234375
    9. 'fi' → logprob: -12.6302490234375
    10. '       ' → logprob: -13.2552490234375

Token 170: '
' (ID: 198)
  Prédit: '           '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '           ' → logprob: -0.0024194144643843174
    2. '
' → logprob: -6.252419471740723
    3. '               ' → logprob: -8.127419471740723
    4. 'return' → logprob: -8.877419471740723
    5. ' return' → logprob: -10.752419471740723
    6. '       ' → logprob: -11.127419471740723
    7. '		' → logprob: -12.127419471740723
    8. '	       ' → logprob: -12.502419471740723
    9. ':
' → logprob: -12.752419471740723
    10. '            
' → logprob: -13.252419471740723

Token 171: '           ' (ID: 352)
  Prédit: '           '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '           ' → logprob: -0.00015252856246661395
    2. 'return' → logprob: -9.000152587890625
    3. ' return' → logprob: -10.875152587890625
    4. '               ' → logprob: -12.250152587890625
    5. '       ' → logprob: -12.750152587890625
    6. '	       ' → logprob: -13.750152587890625
    7. '		' → logprob: -14.625152587890625
    8. '
' → logprob: -14.625152587890625
    9. '          ' → logprob: -15.375152587890625
    10. '            
' → logprob: -16.375152587890625

Token 172: ' return' (ID: 622)
  Prédit: 'return'
  Correct (stricte): False
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'return' (adapté à ' return') → logprob: -0.08385194092988968
    2. ' return' → logprob: -2.8338520526885986
    3. '           ' → logprob: -3.8338520526885986
    4. '       ' → logprob: -11.08385181427002
    5. '	return' → logprob: -13.20885181427002
    6. '   ' → logprob: -13.83385181427002
    7. '{return' → logprob: -14.20885181427002
    8. '	       ' → logprob: -14.83385181427002
    9. '               ' → logprob: -15.20885181427002
    10. ':return' → logprob: -15.33385181427002

Token 173: ' i' (ID: 575)
  Prédit: 'i'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'i' → logprob: -0.20141372084617615
    2. ' i' → logprob: -1.7014137506484985
    3. '	i' → logprob: -14.701414108276367
    4. '
' → logprob: -18.701414108276367
    5. ' ' → logprob: -18.701414108276367
    6. ',i' → logprob: -19.076414108276367
    7. '   ' → logprob: -19.326414108276367
    8. ' 
' → logprob: -19.326414108276367
    9. '{i' → logprob: -19.701414108276367
    10. '_i' → logprob: -20.201414108276367

Token 174: '
' (ID: 198)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.2645743787288666
    2. '
' → logprob: -1.889574408531189
    3. '<|end|>' → logprob: -2.6395742893218994
    4. '    
' → logprob: -5.5145745277404785
    5. 'None' → logprob: -6.1395745277404785
    6. '\n' → logprob: -6.2645745277404785
    7. '<|end|>' → logprob: -7.8895745277404785
    8. '       ' → logprob: -7.8895745277404785
    9. 'return' → logprob: -8.63957405090332
    10. '        
' → logprob: -9.01457405090332

Token 175: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.0017591944197192788
    2. 'None' → logprob: -6.376759052276611
    3. '<|end|>' → logprob: -10.50175952911377
    4. 'return' → logprob: -11.00175952911377
    5. '       ' → logprob: -12.25175952911377
    6. ' None' → logprob: -12.50175952911377
    7. '    
' → logprob: -14.12675952911377
    8. '#' → logprob: -14.37675952911377
    9. '```' → logprob: -14.37675952911377
    10. ' return' → logprob: -14.50175952911377

Token 176: ' #' (ID: 1069)
  Prédit: 'None'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'None' → logprob: -0.6943480968475342
    2. '   ' → logprob: -0.9443480968475342
    3. 'return' → logprob: -2.194348096847534
    4. ' None' → logprob: -8.694348335266113
    5. '	return' → logprob: -10.319348335266113
    6. ' return' → logprob: -10.944348335266113
    7. '    
' → logprob: -11.694348335266113
    8. '```' → logprob: -13.194348335266113
    9. ' ' → logprob: -13.569348335266113
    10. '
' → logprob: -13.694348335266113

Token 177: ' Retour' (ID: 146830)
  Prédit: 'return'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'return' → logprob: -0.023282520473003387
    2. ' return' → logprob: -3.773282527923584
    3. 'Return' → logprob: -11.023282051086426
    4. '   ' → logprob: -11.273282051086426
    5. '#' → logprob: -12.398282051086426
    6. 'Retour' → logprob: -12.898282051086426
    7. 'ret' → logprob: -14.773282051086426
    8. 'None' → logprob: -14.898282051086426
    9. '	return' → logprob: -15.523282051086426
    10. ' ' → logprob: -16.398283004760742

Token 178: 'ne' (ID: 611)
  Prédit: 'ne'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'ne' → logprob: -0.3748515844345093
    2. 'n' → logprob: -1.4998515844345093
    3. 'None' → logprob: -2.874851703643799
    4. ' None' → logprob: -3.874851703643799
    5. 'ner' → logprob: -5.249851703643799
    6. 'ns' → logprob: -6.249851703643799
    7. 'nez' → logprob: -6.624851703643799
    8. '   ' → logprob: -6.999851703643799
    9. 'nne' → logprob: -7.249851703643799
    10. 'r' → logprob: -7.499851703643799

Token 179: ' None' (ID: 4662)
  Prédit: 'None'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'None' → logprob: -0.03804171830415726
    2. ' None' → logprob: -3.288041830062866
    3. '_None' → logprob: -15.413042068481445
    4. '(None' → logprob: -16.413042068481445
    5. '=None' → logprob: -17.913042068481445
    6. '   ' → logprob: -18.163042068481445
    7. '_none' → logprob: -18.538042068481445
    8. 'none' → logprob: -18.538042068481445
    9. ',None' → logprob: -19.038042068481445
    10. '.None' → logprob: -20.163042068481445

Token 180: ' si' (ID: 1784)
  Prédit: ''
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False

Token 181: ' aucun' (ID: 41678)
  Prédit: 'auc'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'auc' → logprob: -0.5472798943519592
    2. ' aucun' → logprob: -1.0472798347473145
    3. ' aucune' → logprob: -2.6722798347473145
    4. 'A' → logprob: -6.7972798347473145
    5. 'None' → logprob: -8.922280311584473
    6. ' no' → logprob: -9.672280311584473
    7. ' Aucun' → logprob: -9.922280311584473
    8. ' auc' → logprob: -9.922280311584473
    9. ' not' → logprob: -11.297280311584473
    10. ' pas' → logprob: -11.422280311584473

Token 182: ' prix' (ID: 18771)
  Prédit: 'prix'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'prix' → logprob: -0.4064679741859436
    2. ' prix' → logprob: -1.1564679145812988
    3. ' résultat' → logprob: -4.281467914581299
    4. 'i' → logprob: -6.906467914581299
    5. 'result' → logprob: -7.031467914581299
    6. 'original' → logprob: -7.531467914581299
    7. ' original' → logprob: -7.656467914581299
    8. 'rés' → logprob: -7.656467914581299
    9. 'price' → logprob: -7.906467914581299
    10. 'pr' → logprob: -7.906467914581299

Token 183: ' initial' (ID: 4871)
  Prédit: ' n'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' n' → logprob: -0.588299572467804
    2. 'n' → logprob: -1.7132995128631592
    3. ' initial' → logprob: -2.713299512863159
    4. ' original' → logprob: -2.963299512863159
    5. ' ne' → logprob: -3.338299512863159
    6. 'original' → logprob: -3.338299512863159
    7. 'initial' → logprob: -3.463299512863159
    8. ' trouvé' → logprob: -4.463299751281738
    9. ' avant' → logprob: -4.713299751281738
    10. 'avant' → logprob: -4.713299751281738

Token 184: ' ne' (ID: 453)
  Prédit: 'n'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'n' → logprob: -0.2799402177333832
    2. ' n' → logprob: -1.7799402475357056
    3. ' ne' → logprob: -3.404940128326416
    4. ' trouvé' → logprob: -3.779940128326416
    5. '   ' → logprob: -5.279940128326416
    6. 'cor' → logprob: -6.029940128326416
    7. 'compatible' → logprob: -6.404940128326416
    8. ' compatible' → logprob: -6.529940128326416
    9. '```' → logprob: -6.904940128326416
    10. ' valid' → logprob: -6.904940128326416

Token 185: ' convient' (ID: 85656)
  Prédit: ' correspond'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' correspond' → logprob: -1.5093380212783813
    2. ' a' → logprob: -1.6343380212783813
    3. ' est' → logprob: -1.6343380212783813
    4. 's' → logprob: -1.7593380212783813
    5. 'est' → logprob: -2.509337902069092
    6. ' satisfait' → logprob: -3.134337902069092
    7. 'a' → logprob: -3.634337902069092
    8. 'cor' → logprob: -4.009337902069092
    9. ' pas' → logprob: -4.509337902069092
    10. 'pas' → logprob: -5.009337902069092

Token 186: '
' (ID: 198)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.030088074505329132
    2. 'None' → logprob: -4.155087947845459
    3. ' None' → logprob: -4.655087947845459
    4. '<|end|>' → logprob: -6.655087947845459
    5. '
' → logprob: -6.780087947845459
    6. '(None' → logprob: -7.030087947845459
    7. ' return' → logprob: -7.530087947845459
    8. 'return' → logprob: -7.655087947845459
    9. '    
' → logprob: -10.030088424682617
    10. '  ' → logprob: -11.030088424682617

Token 187: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.006482542026787996
    2. 'None' → logprob: -6.0064826011657715
    3. '
' → logprob: -6.5064826011657715
    4. 'return' → logprob: -6.6314826011657715
    5. ' None' → logprob: -7.2564826011657715
    6. ' return' → logprob: -7.8814826011657715
    7. '(None' → logprob: -10.006482124328613
    8. '    
' → logprob: -10.381482124328613
    9. '	return' → logprob: -11.506482124328613
    10. '<|end|>' → logprob: -12.006482124328613

Token 188: ' return' (ID: 622)
  Prédit: 'return'
  Correct (stricte): False
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'return' (adapté à ' return') → logprob: -0.3170164227485657
    2. 'None' → logprob: -1.317016363143921
    3. ' return' → logprob: -6.0670166015625
    4. ' None' → logprob: -6.5670166015625
    5. '   ' → logprob: -10.6920166015625
    6. '	return' → logprob: -14.9420166015625
    7. '(None' → logprob: -15.8170166015625
    8. '```' → logprob: -15.8170166015625
    9. 'Return' → logprob: -16.1920166015625
    10. ' ' → logprob: -17.5670166015625

Token 189: ' None' (ID: 4662)
  Prédit: 'None'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'None' → logprob: -0.01814994215965271
    2. ' None' → logprob: -4.0181498527526855
    3. '_None' → logprob: -18.518150329589844
    4. '(None' → logprob: -21.393150329589844
    5. ',None' → logprob: -22.393150329589844
    6. '=None' → logprob: -22.518150329589844
    7. 'none' → logprob: -22.643150329589844
    8. '.None' → logprob: -23.643150329589844
    9. '_none' → logprob: -23.643150329589844
    10. ' ' → logprob: -24.393150329589844

Token 190: '

' (ID: 279)
  Prédit: ''
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False

Token 191: 'def' (ID: 1314)
  Prédit: '#'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '#' → logprob: -0.06850492209196091
    2. 'def' → logprob: -3.568504810333252
    3. '<|end|>' → logprob: -3.693504810333252
    4. '```' → logprob: -5.068504810333252
    5. '<|end|>' → logprob: -6.443504810333252
    6. '
' → logprob: -6.568504810333252
    7. '(' → logprob: -6.943504810333252
    8. '[' → logprob: -7.568504810333252
    9. ')' → logprob: -8.06850528717041
    10. 'i' → logprob: -8.56850528717041

Token 192: ' main' (ID: 2758)
  Prédit: ' calculate'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' calculate' → logprob: -0.14296865463256836
    2. ' find' → logprob: -2.2679686546325684
    3. ' main' → logprob: -4.517968654632568
    4. ' apply' → logprob: -4.642968654632568
    5. 'calculate' → logprob: -6.017968654632568
    6. ' compute' → logprob: -6.142968654632568
    7. ' calcul' → logprob: -6.392968654632568
    8. ' get' → logprob: -7.267968654632568
    9. ' check' → logprob: -7.892968654632568
    10. ' price' → logprob: -8.017969131469727

Token 193: '():
' (ID: 8595)
  Prédit: '():'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '():' → logprob: -0.00016992862219922245
    2. ' ():' → logprob: -9.50016975402832
    3. '(' → logprob: -10.00016975402832
    4. '():
' → logprob: -10.75016975402832
    5. '_' → logprob: -11.50016975402832
    6. '()' → logprob: -11.50016975402832
    7. '()>' → logprob: -12.75016975402832
    8. '(":' → logprob: -14.00016975402832
    9. '():
' → logprob: -14.00016975402832
    10. ':' → logprob: -14.25016975402832

Token 194: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.000540762091986835
    2. '
' → logprob: -8.250540733337402
    3. '    
' → logprob: -8.750540733337402
    4. ' after' → logprob: -9.625540733337402
    5. ' 
' → logprob: -11.000540733337402
    6. ' for' → logprob: -12.000540733337402
    7. 'n' → logprob: -12.125540733337402
    8. 'a' → logprob: -12.250540733337402
    9. '    ' → logprob: -12.375540733337402
    10. '```' → logprob: -12.375540733337402

Token 195: ' """
' (ID: 7037)
  Prédit: 'after'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'after' → logprob: -0.7030375599861145
    2. '   ' → logprob: -1.3280375003814697
    3. ' after' → logprob: -1.4530375003814697
    4. 'try' → logprob: -5.828037738800049
    5. ' try' → logprob: -6.203037738800049
    6. 'price' → logprob: -8.57803726196289
    7. 'ap' → logprob: -9.20303726196289
    8. ' prix' → logprob: -9.20303726196289
    9. ' après' → logprob: -9.32803726196289
    10. 'user' → logprob: -9.32803726196289

Token 196: '   ' (ID: 271)
  Prédit: ' after'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' after' → logprob: -0.3621378242969513
    2. 'after' → logprob: -1.362137794494629
    3. '   ' → logprob: -3.112137794494629
    4. ' price' → logprob: -6.612137794494629
    5. 'price' → logprob: -7.237137794494629
    6. ' try' → logprob: -8.112137794494629
    7. ' prix' → logprob: -8.612137794494629
    8. ' après' → logprob: -8.862137794494629
    9. 'try' → logprob: -9.112137794494629
    10. 'prix' → logprob: -9.237137794494629

Token 197: ' Fonction' (ID: 189149)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.20983220636844635
    2. ' after' → logprob: -2.084832191467285
    3. 'after' → logprob: -2.834832191467285
    4. ' prix' → logprob: -6.584832191467285
    5. ' user' → logprob: -7.334832191467285
    6. '#' → logprob: -7.334832191467285
    7. 'prix' → logprob: -7.334832191467285
    8. 'price' → logprob: -7.709832191467285
    9. 'user' → logprob: -7.709832191467285
    10. ' price' → logprob: -7.834832191467285

Token 198: ' principale' (ID: 68926)
  Prédit: ' principale'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' principale' → logprob: -0.26850593090057373
    2. ' main' → logprob: -2.0185060501098633
    3. '   ' → logprob: -2.7685060501098633
    4. ' principal' → logprob: -3.3935060501098633
    5. ' de' → logprob: -6.018506050109863
    6. ' test' → logprob: -7.018506050109863
    7. ' pour' → logprob: -7.518506050109863
    8. ' ' → logprob: -7.893506050109863
    9. ' principales' → logprob: -8.268506050109863
    10. ' d' → logprob: -8.268506050109863

Token 199: ' qui' (ID: 2780)
  Prédit: '():
'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '():
' → logprob: -0.6300486922264099
    2. '   ' → logprob: -1.1300487518310547
    3. '():' → logprob: -2.1300487518310547
    4. ':' → logprob: -3.8800487518310547
    5. 'def' → logprob: -6.255048751831055
    6. ':
' → logprob: -6.380048751831055
    7. '()' → logprob: -7.005048751831055
    8. '):
' → logprob: -8.505048751831055
    9. '
' → logprob: -10.255048751831055
    10. ' :' → logprob: -10.255048751831055

Token 200: ' g' (ID: 329)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -1.2190964221954346
    2. ' lit' → logprob: -1.5940964221954346
    3. ' demande' → logprob: -1.7190964221954346
    4. ' prend' → logprob: -2.0940964221954346
    5. ' récup' → logprob: -2.7190964221954346
    6. ':' → logprob: -2.9690964221954346
    7. ' permet' → logprob: -3.9690964221954346
    8. ':
' → logprob: -4.8440961837768555
    9. ' reçoit' → logprob: -4.9690961837768555
    10. ' g' → logprob: -4.9690961837768555

Token 201: 'ère' (ID: 4346)
  Prédit: 'ère'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'ère' → logprob: -0.00842533353716135
    2. 'ere' → logprob: -5.133425235748291
    3. 'ére' → logprob: -6.258425235748291
    4. 'e' → logprob: -9.38342571258545
    5. 'è' → logprob: -9.38342571258545
    6. 're' → logprob: -9.38342571258545
    7. '`' → logprob: -9.50842571258545
    8. 'er' → logprob: -9.63342571258545
    9. 'estion' → logprob: -9.75842571258545
    10. 'r' → logprob: -10.13342571258545

Token 202: ' l' (ID: 305)
  Prédit: ' l'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' l' → logprob: -0.07810355722904205
    2. '   ' → logprob: -3.203103542327881
    3. ' la' → logprob: -3.953103542327881
    4. 'l' → logprob: -4.453103542327881
    5. ' le' → logprob: -6.578103542327881
    6. '	l' → logprob: -6.953103542327881
    7. '    ' → logprob: -7.953103542327881
    8. ' les' → logprob: -8.328104019165039
    9. '_l' → logprob: -8.953104019165039
    10. ' ' → logprob: -9.453104019165039

Token 203: ''entrée' (ID: 115820)
  Prédit: ''entrée'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ''entrée' → logprob: -0.033289697021245956
    2. ''inter' → logprob: -4.533289909362793
    3. ''' → logprob: -5.033289909362793
    4. 'a' → logprob: -5.033289909362793
    5. ''ex' → logprob: -5.908289909362793
    6. 'entrée' → logprob: -6.158289909362793
    7. 'e' → logprob: -7.033289909362793
    8. 'interaction' → logprob: -7.408289909362793
    9. ''aff' → logprob: -7.658289909362793
    10. ' interaction' → logprob: -7.658289909362793

Token 204: ' utilisateur' (ID: 115595)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.591069757938385
    2. ' utilisateur' → logprob: -0.841069757938385
    3. ' et' → logprob: -5.21606969833374
    4. ' de' → logprob: -5.59106969833374
    5. 'util' → logprob: -6.34106969833374
    6. ',' → logprob: -6.59106969833374
    7. '_util' → logprob: -7.71606969833374
    8. 'de' → logprob: -8.091070175170898
    9. '()' → logprob: -8.216070175170898
    10. ' and' → logprob: -8.341070175170898

Token 205: ',' (ID: 11)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.007419321686029434
    2. ',' → logprob: -5.007419109344482
    3. ':' → logprob: -7.882419109344482
    4. '    
' → logprob: -9.38241958618164
    5. ' :' → logprob: -9.75741958618164
    6. ' ,' → logprob: -10.25741958618164
    7. ' et' → logprob: -10.38241958618164
    8. '   ' → logprob: -10.75741958618164
    9. ' and' → logprob: -11.13241958618164
    10. '():' → logprob: -11.38241958618164

Token 206: ' la' (ID: 557)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.09988579154014587
    2. ' la' → logprob: -3.0998857021331787
    3. ' le' → logprob: -3.2248857021331787
    4. ' l' → logprob: -5.474885940551758
    5. ' et' → logprob: -6.349885940551758
    6. '    ' → logprob: -6.349885940551758
    7. 'le' → logprob: -7.349885940551758
    8. '    
' → logprob: -7.724885940551758
    9. 'def' → logprob: -8.474885940551758
    10. ' output' → logprob: -9.099885940551758

Token 207: ' recherche' (ID: 24975)
  Prédit: 'after'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'after' → logprob: -0.0809422954916954
    2. 'ap' → logprob: -3.205942392349243
    3. ' after' → logprob: -3.580942392349243
    4. 'prix' → logprob: -5.205942153930664
    5. '#' → logprob: -6.955942153930664
    6. '   ' → logprob: -6.955942153930664
    7. 'price' → logprob: -7.705942153930664
    8. 'import' → logprob: -8.205942153930664
    9. ' après' → logprob: -8.205942153930664
    10. 'aff' → logprob: -8.330942153930664

Token 208: ' du' (ID: 1462)
  Prédit: ' du'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' du' → logprob: -0.44366005063056946
    2. '   ' → logprob: -1.818660020828247
    3. 'du' → logprob: -2.443660020828247
    4. ' de' → logprob: -2.693660020828247
    5. 'de' → logprob: -3.943660020828247
    6. ' et' → logprob: -4.193660259246826
    7. ',' → logprob: -5.568660259246826
    8. ' ' → logprob: -6.693660259246826
    9. 'et' → logprob: -7.068660259246826
    10. 'd' → logprob: -7.568660259246826

Token 209: ' prix' (ID: 18771)
  Prédit: ' prix'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' prix' → logprob: -0.7027041912078857
    2. 'prix' → logprob: -0.7027041912078857
    3. ' original' → logprob: -4.952704429626465
    4. 'original' → logprob: -6.577704429626465
    5. 'price' → logprob: -7.952704429626465
    6. ' price' → logprob: -8.452704429626465
    7. 'pr' → logprob: -8.452704429626465
    8. ' ' → logprob: -9.952704429626465
    9. 'Prix' → logprob: -10.327704429626465
    10. '```' → logprob: -10.577704429626465

Token 210: ' initial' (ID: 4871)
  Prédit: ' initial'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' initial' → logprob: -1.1104073524475098
    2. 'initial' → logprob: -1.3604073524475098
    3. ' original' → logprob: -2.1104073524475098
    4. '   ' → logprob: -2.4854073524475098
    5. 'original' → logprob: -2.4854073524475098
    6. '_initial' → logprob: -3.2354073524475098
    7. 'avant' → logprob: -3.7354073524475098
    8. ' avant' → logprob: -3.8604073524475098
    9. '_original' → logprob: -3.8604073524475098
    10. ' d' → logprob: -5.36040735244751

Token 211: ' et' (ID: 859)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.432451456785202
    2. ',' → logprob: -1.0574514865875244
    3. ' et' → logprob: -6.182451248168945
    4. ' après' → logprob: -6.932451248168945
    5. ' ,' → logprob: -8.432451248168945
    6. 'et' → logprob: -9.182451248168945
    7. ' avant' → logprob: -9.807451248168945
    8. ' and' → logprob: -9.807451248168945
    9. '    
' → logprob: -9.807451248168945
    10. ',
' → logprob: -10.057451248168945

Token 212: ' l' (ID: 305)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.15778495371341705
    2. 'l' → logprob: -2.032784938812256
    3. ' l' → logprob: -4.782784938812256
    4. 'aff' → logprob: -5.157784938812256
    5. '#' → logprob: -8.532785415649414
    6. 'son' → logprob: -9.157785415649414
    7. ' son' → logprob: -9.657785415649414
    8. ' affiche' → logprob: -9.782785415649414
    9. '   ' → logprob: -9.782785415649414
    10. '  ' → logprob: -9.907785415649414

Token 213: ''aff' (ID: 53397)
  Prédit: ''aff'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ''aff' → logprob: -0.2954873740673065
    2. '   ' → logprob: -1.420487403869629
    3. ''impression' → logprob: -5.170487403869629
    4. 'a' → logprob: -5.545487403869629
    5. 'aff' → logprob: -6.295487403869629
    6. 'e' → logprob: -7.045487403869629
    7. 'print' → logprob: -7.170487403869629
    8. ' affich' → logprob: -8.295487403869629
    9. '’aff' → logprob: -8.420487403869629
    10. ''' → logprob: -8.920487403869629

Token 214: 'ichage' (ID: 118475)
  Prédit: 'ichage'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'ichage' → logprob: -0.004429762717336416
    2. 'iche' → logprob: -5.504429817199707
    3. 'ich' → logprob: -8.129429817199707
    4. 'ic' → logprob: -10.379429817199707
    5. '   ' → logprob: -11.754429817199707
    6. '
' → logprob: -12.254429817199707
    7. 'ichier' → logprob: -12.879429817199707
    8. 'icher' → logprob: -12.879429817199707
    9. 'iché' → logprob: -13.879429817199707
    10. 'i' → logprob: -14.129429817199707

Token 215: ' du' (ID: 1462)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.16301068663597107
    2. ' du' → logprob: -2.413010597229004
    3. '()' → logprob: -4.163010597229004
    4. '.' → logprob: -4.288010597229004
    5. 'du' → logprob: -4.413010597229004
    6. '(' → logprob: -5.038010597229004
    7. ' des' → logprob: -5.288010597229004
    8. ' de' → logprob: -5.788010597229004
    9. ' ' → logprob: -5.913010597229004
    10. '(
' → logprob: -7.538010597229004

Token 216: ' résultat' (ID: 62556)
  Prédit: 'rés'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'rés' → logprob: -0.06004767864942551
    2. 'result' → logprob: -3.6850476264953613
    3. ' résultat' → logprob: -3.9350476264953613
    4. 'prix' → logprob: -4.310047626495361
    5. 'ré' → logprob: -9.68504810333252
    6. ' prix' → logprob: -10.18504810333252
    7. 'Rés' → logprob: -10.31004810333252
    8. '   ' → logprob: -10.93504810333252
    9. 'r' → logprob: -11.31004810333252
    10. 'rez' → logprob: -11.31004810333252

Token 217: '.
' (ID: 558)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.001043647644110024
    2. ':' → logprob: -8.001043319702148
    3. '
' → logprob: -8.751043319702148
    4. '):' → logprob: -8.751043319702148
    5. '):
' → logprob: -9.001043319702148
    6. ')' → logprob: -9.001043319702148
    7. '    
' → logprob: -9.751043319702148
    8. ',' → logprob: -10.626043319702148
    9. 'def' → logprob: -11.001043319702148
    10. ':
' → logprob: -11.501043319702148

Token 218: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -4.060365608893335e-05
    2. '    
' → logprob: -10.250041007995605
    3. '
' → logprob: -12.625041007995605
    4. ' after' → logprob: -14.750041007995605
    5. '       ' → logprob: -15.375041007995605
    6. '```' → logprob: -15.500041007995605
    7. 'after' → logprob: -15.500041007995605
    8. '    ' → logprob: -15.625041007995605
    9. 'user' → logprob: -15.750041007995605
    10. '   ' → logprob: -16.25004005432129

Token 219: ' """
' (ID: 7037)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.0004938178462907672
    2. '    
' → logprob: -8.250494003295898
    3. '
' → logprob: -8.750494003295898
    4. ' after' → logprob: -10.125494003295898
    5. 'after' → logprob: -11.375494003295898
    6. '```' → logprob: -11.875494003295898
    7. 'user' → logprob: -12.375494003295898
    8. '    ' → logprob: -13.125494003295898
    9. ' 
' → logprob: -13.500494003295898
    10. '   
' → logprob: -13.750494003295898

Token 220: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.010153976269066334
    2. 'after' → logprob: -4.885153770446777
    3. ' after' → logprob: -6.260153770446777
    4. 'price' → logprob: -7.635153770446777
    5. 'try' → logprob: -9.885153770446777
    6. ' price' → logprob: -10.135153770446777
    7. '    
' → logprob: -11.135153770446777
    8. ' prix' → logprob: -11.885153770446777
    9. 'prix' → logprob: -11.885153770446777
    10. ' try' → logprob: -12.010153770446777

Token 221: ' #' (ID: 1069)
  Prédit: 'after'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'after' → logprob: -0.07385077327489853
    2. '   ' → logprob: -3.3238508701324463
    3. ' after' → logprob: -3.6988508701324463
    4. 'try' → logprob: -4.823850631713867
    5. 'price' → logprob: -6.698850631713867
    6. ' try' → logprob: -7.323850631713867
    7. 'user' → logprob: -8.448850631713867
    8. ' price' → logprob: -9.823850631713867
    9. 'while' → logprob: -9.948850631713867
    10. 'prix' → logprob: -10.198850631713867

Token 222: ' Lecture' (ID: 106534)
  Prédit: 'after'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'after' → logprob: -0.09974101185798645
    2. 'try' → logprob: -2.724740982055664
    3. ' after' → logprob: -4.224740982055664
    4. 'price' → logprob: -4.849740982055664
    5. ' try' → logprob: -5.224740982055664
    6. 'user' → logprob: -7.724740982055664
    7. '   ' → logprob: -8.474740982055664
    8. ' price' → logprob: -8.474740982055664
    9. 'prix' → logprob: -8.724740982055664
    10. 'import' → logprob: -8.974740982055664

Token 223: ' d' (ID: 272)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.07560037076473236
    2. '(' → logprob: -3.5756003856658936
    3. ' de' → logprob: -4.8256001472473145
    4. ' after' → logprob: -4.8256001472473145
    5. ' =' → logprob: -5.2006001472473145
    6. '()' → logprob: -5.4506001472473145
    7. 'user' → logprob: -5.4506001472473145
    8. ' user' → logprob: -5.5756001472473145
    9. ' après' → logprob: -6.2006001472473145
    10. '_' → logprob: -6.8256001472473145

Token 224: ''un' (ID: 9788)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.2825552821159363
    2. 'e' → logprob: -2.907555341720581
    3. 'une' → logprob: -3.157555341720581
    4. ' input' → logprob: -3.282555341720581
    5. ' une' → logprob: -3.657555341720581
    6. ''une' → logprob: -4.032555103302002
    7. ' la' → logprob: -4.157555103302002
    8. ' e' → logprob: -4.282555103302002
    9. ' user' → logprob: -4.407555103302002
    10. ' ' → logprob: -5.157555103302002

Token 225: ' entier' (ID: 80473)
  Prédit: ' prix'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' prix' → logprob: -0.7414807677268982
    2. 'prix' → logprob: -0.9914807677268982
    3. 'price' → logprob: -3.491480827331543
    4. ' entier' → logprob: -3.616480827331543
    5. ' after' → logprob: -3.866480827331543
    6. ' price' → logprob: -3.866480827331543
    7. 'ent' → logprob: -3.991480827331543
    8. ' nombre' → logprob: -4.241480827331543
    9. 'int' → logprob: -5.116480827331543
    10. 'nombre' → logprob: -5.116480827331543

Token 226: ' depuis' (ID: 16277)
  Prédit: '()'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '()' → logprob: -0.14299406111240387
    2. '   ' → logprob: -2.2679941654205322
    3. 'user' → logprob: -4.642993927001953
    4. ' after' → logprob: -5.267993927001953
    5. ',' → logprob: -5.517993927001953
    6. ' =' → logprob: -6.017993927001953
    7. 'after' → logprob: -6.142993927001953
    8. ' après' → logprob: -6.392993927001953
    9. '(' → logprob: -6.767993927001953
    10. ' user' → logprob: -6.892993927001953

Token 227: ' l' (ID: 305)
  Prédit: ' input'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' input' → logprob: -0.07132870703935623
    2. 'input' → logprob: -3.321328639984131
    3. ' l' → logprob: -3.571328639984131
    4. 'l' → logprob: -5.696328639984131
    5. ' la' → logprob: -6.821328639984131
    6. 'la' → logprob: -9.821329116821289
    7. '   ' → logprob: -10.071329116821289
    8. '=input' → logprob: -11.071329116821289
    9. ' ' → logprob: -11.946329116821289
    10. '_input' → logprob: -11.946329116821289

Token 228: ''entrée' (ID: 115820)
  Prédit: ''entrée'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ''entrée' → logprob: -0.1484963297843933
    2. 'input' → logprob: -2.648496389389038
    3. 'entrée' → logprob: -3.398496389389038
    4. ''utilisateur' → logprob: -3.648496389389038
    5. ''' → logprob: -5.648496150970459
    6. '   ' → logprob: -6.773496150970459
    7. ' input' → logprob: -7.023496150970459
    8. 'a' → logprob: -7.148496150970459
    9. 'e' → logprob: -7.523496150970459
    10. ''ex' → logprob: -9.023496627807617

Token 229: ' standard' (ID: 7024)
  Prédit: '()'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '()' → logprob: -0.045267827808856964
    2. '   ' → logprob: -3.9202678203582764
    3. 'user' → logprob: -4.1702680587768555
    4. 'after' → logprob: -6.1702680587768555
    5. 'price' → logprob: -6.1702680587768555
    6. ' after' → logprob: -6.4202680587768555
    7. 'prix' → logprob: -7.2952680587768555
    8. '_price' → logprob: -7.4202680587768555
    9. ' utilisateur' → logprob: -7.9202680587768555
    10. ' user' → logprob: -8.295268058776855

Token 230: ' (' (ID: 350)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.1498778909444809
    2. ' after' → logprob: -2.0248777866363525
    3. 'after' → logprob: -5.024878025054932
    4. ' après' → logprob: -9.024877548217773
    5. ' price' → logprob: -9.149877548217773
    6. '    
' → logprob: -9.274877548217773
    7. ' input' → logprob: -10.024877548217773
    8. '
' → logprob: -10.274877548217773
    9. ' prix' → logprob: -10.274877548217773
    10. '(after' → logprob: -10.274877548217773

Token 231: 'l' (ID: 75)
  Prédit: 'after'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'after' → logprob: -0.6155058145523071
    2. ' after' → logprob: -0.9905058145523071
    3. '   ' → logprob: -3.2405056953430176
    4. 'input' → logprob: -4.365505695343018
    5. 'ap' → logprob: -4.740505695343018
    6. ' après' → logprob: -4.865505695343018
    7. ' input' → logprob: -4.990505695343018
    8. ')' → logprob: -5.740505695343018
    9. 'import' → logprob: -6.365505695343018
    10. 'user' → logprob: -6.490505695343018

Token 232: ''utilisateur' (ID: 140803)
  Prédit: 'after'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'after' → logprob: -1.1961696147918701
    2. ' after' → logprob: -1.3211696147918701
    3. '   ' → logprob: -1.4461696147918701
    4. ''utilisateur' → logprob: -1.9461696147918701
    5. 'input' → logprob: -4.321169853210449
    6. 'user' → logprob: -5.071169853210449
    7. ' input' → logprob: -5.321169853210449
    8. 'a' → logprob: -5.571169853210449
    9. '')' → logprob: -5.821169853210449
    10. 'e' → logprob: -5.946169853210449

Token 233: ' doit' (ID: 21822)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ')' → logprob: -0.03847380727529526
    2. ' )' → logprob: -3.9134738445281982
    3. '   ' → logprob: -4.163473606109619
    4. ')
' → logprob: -6.788473606109619
    5. '())' → logprob: -7.788473606109619
    6. '()' → logprob: -8.413474082946777
    7. ' )
' → logprob: -8.788474082946777
    8. ' ' → logprob: -8.913474082946777
    9. '):' → logprob: -10.663474082946777
    10. ' ' → logprob: -11.038474082946777

Token 234: ' entrer' (ID: 111917)
  Prédit: ' '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' ' → logprob: -1.1584124565124512
    2. '   ' → logprob: -1.2834124565124512
    3. ' input' → logprob: -1.9084124565124512
    4. ' saisir' → logprob: -2.533412456512451
    5. 's' → logprob: -2.783412456512451
    6. ' enter' → logprob: -3.533412456512451
    7. 'input' → logprob: -3.783412456512451
    8. ' entrer' → logprob: -4.533412456512451
    9. ' entr' → logprob: -4.908412456512451
    10. 'enter' → logprob: -4.908412456512451

Token 235: ' le' (ID: 505)
  Prédit: ' un'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' un' → logprob: -0.11250896006822586
    2. ' le' → logprob: -3.23750901222229
    3. ' une' → logprob: -3.98750901222229
    4. ')' → logprob: -4.362508773803711
    5. ' ' → logprob: -4.862508773803711
    6. ' l' → logprob: -5.237508773803711
    7. 'un' → logprob: -5.237508773803711
    8. ' )' → logprob: -5.362508773803711
    9. 'le' → logprob: -5.612508773803711
    10. 'l' → logprob: -6.112508773803711

Token 236: ' prix' (ID: 18771)
  Prédit: 'prix'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'prix' → logprob: -0.21742908656597137
    2. ' prix' → logprob: -1.9674290418624878
    3. ' after' → logprob: -3.5924291610717773
    4. 'price' → logprob: -4.967429161071777
    5. 'ap' → logprob: -4.967429161071777
    6. ' price' → logprob: -5.092429161071777
    7. 'after' → logprob: -5.217429161071777
    8. ' après' → logprob: -6.592429161071777
    9. ' montant' → logprob: -7.842429161071777
    10. ' nombre' → logprob: -9.092429161071777

Token 237: ' après' (ID: 16460)
  Prédit: ' après'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' après' → logprob: -0.6424639821052551
    2. ')' → logprob: -2.2674639225006104
    3. 'ap' → logprob: -2.3924639225006104
    4. '_' → logprob: -2.5174639225006104
    5. '_ap' → logprob: -2.5174639225006104
    6. ' )' → logprob: -3.3924639225006104
    7. ' after' → logprob: -3.5174639225006104
    8. ' apres' → logprob: -4.1424641609191895
    9. '_after' → logprob: -4.5174641609191895
    10. ' _' → logprob: -5.1424641609191895

Token 238: ' taxe' (ID: 174271)
  Prédit: '_'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_' → logprob: -0.8651936054229736
    2. 'tax' → logprob: -1.3651936054229736
    3. '_tax' → logprob: -1.6151936054229736
    4. '_t' → logprob: -3.1151936054229736
    5. ' taxe' → logprob: -3.6151936054229736
    6. 'la' → logprob: -4.1151933670043945
    7. ' la' → logprob: -4.2401933670043945
    8. ' tax' → logprob: -4.9901933670043945
    9. ' _' → logprob: -5.1151933670043945
    10. '_la' → logprob: -5.7401933670043945

Token 239: ')
' (ID: 446)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')' → logprob: -0.04244246706366539
    2. ')
' → logprob: -3.542442560195923
    3. '   ' → logprob: -4.417442321777344
    4. '):
' → logprob: -8.292442321777344
    5. ' )' → logprob: -9.167442321777344
    6. '):' → logprob: -9.417442321777344
    7. ')
' → logprob: -10.542442321777344
    8. ' )
' → logprob: -10.917442321777344
    9. '_price' → logprob: -11.417442321777344
    10. ' ' → logprob: -12.042442321777344

Token 240: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.05233610048890114
    2. ' after' → logprob: -3.0523362159729004
    3. ' price' → logprob: -6.3023362159729
    4. 'after' → logprob: -6.9273362159729
    5. '    
' → logprob: -7.8023362159729
    6. 'price' → logprob: -8.802335739135742
    7. ' prix' → logprob: -8.927335739135742
    8. ' user' → logprob: -9.802335739135742
    9. ' après' → logprob: -9.927335739135742
    10. ' input' → logprob: -10.427335739135742

Token 241: ' n' (ID: 297)
  Prédit: 'after'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'after' → logprob: -0.03212456405162811
    2. '   ' → logprob: -4.0321245193481445
    3. ' after' → logprob: -4.5321245193481445
    4. 'try' → logprob: -5.9071245193481445
    5. 'price' → logprob: -8.407124519348145
    6. ' try' → logprob: -9.282124519348145
    7. 'user' → logprob: -11.032124519348145
    8. ' price' → logprob: -11.532124519348145
    9. 'n' (adapté à ' n') → logprob: -11.782124519348145
    10. '```' → logprob: -12.157124519348145

Token 242: ' =' (ID: 314)
  Prédit: ' ='
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' =' → logprob: -0.01417714636772871
    2. '=' → logprob: -4.264177322387695
    3. '=int' → logprob: -11.764177322387695
    4. '=input' → logprob: -12.889177322387695
    5. '   ' → logprob: -13.389177322387695
    6. 'after' → logprob: -14.514177322387695
    7. ' ' → logprob: -14.639177322387695
    8. '_after' → logprob: -15.389177322387695
    9. ' ' → logprob: -15.514177322387695
    10. ' after' → logprob: -15.764177322387695

Token 243: ' int' (ID: 677)
  Prédit: 'int'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'int' → logprob: -0.2519293427467346
    2. ' int' → logprob: -1.5019292831420898
    3. '(int' → logprob: -16.626930236816406
    4. ' ' → logprob: -16.876930236816406
    5. '	int' → logprob: -16.876930236816406
    6. '=int' → logprob: -17.501930236816406
    7. '[int' → logprob: -17.876930236816406
    8. '   ' → logprob: -17.876930236816406
    9. 'input' → logprob: -18.126930236816406
    10. '<int' → logprob: -19.001930236816406

Token 244: '(input' (ID: 10054)
  Prédit: '(input'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(input' → logprob: -0.002478985348716378
    2. '(' → logprob: -6.002479076385498
    3. 'input' → logprob: -12.62747859954834
    4. '()' → logprob: -17.877479553222656
    5. ' input' → logprob: -18.502479553222656
    6. '(
' → logprob: -18.502479553222656
    7. '=input' → logprob: -18.877479553222656
    8. ' (' → logprob: -19.002479553222656
    9. '(in' → logprob: -20.127479553222656
    10. ',input' → logprob: -20.752479553222656

Token 245: '())

' (ID: 27654)
  Prédit: '())'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '())' → logprob: -0.009996181353926659
    2. '()' → logprob: -4.63499641418457
    3. '(' → logprob: -9.00999641418457
    4. '("' → logprob: -10.38499641418457
    5. '()))' → logprob: -10.38499641418457
    6. '().' → logprob: -10.50999641418457
    7. '())
' → logprob: -11.63499641418457
    8. ' ())' → logprob: -11.63499641418457
    9. '(""))' → logprob: -12.88499641418457
    10. '()>' → logprob: -13.38499641418457

Token 246: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.8869152069091797
    2. 'result' → logprob: -0.8869152069091797
    3. 'original' → logprob: -2.1369152069091797
    4. 'price' → logprob: -3.5119152069091797
    5. '
' → logprob: -4.38691520690918
    6. 'found' → logprob: -5.13691520690918
    7. '    
' → logprob: -6.01191520690918
    8. ' original' → logprob: -6.63691520690918
    9. ' result' → logprob: -7.01191520690918
    10. 'if' → logprob: -7.38691520690918

Token 247: ' #' (ID: 1069)
  Prédit: 'result'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'result' → logprob: -0.4524364769458771
    2. 'original' → logprob: -1.0774364471435547
    3. 'price' → logprob: -4.452436447143555
    4. 'res' → logprob: -5.327436447143555
    5. 'prix' → logprob: -5.827436447143555
    6. 'orig' → logprob: -6.452436447143555
    7. ' original' → logprob: -7.452436447143555
    8. 'origin' → logprob: -7.702436447143555
    9. ' result' → logprob: -7.952436447143555
    10. 'origine' → logprob: -7.952436447143555

Token 248: ' App' (ID: 2583)
  Prédit: 'result'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'result' → logprob: -0.7715001702308655
    2. 'original' → logprob: -0.7715001702308655
    3. 'price' → logprob: -3.0215001106262207
    4. 'prix' → logprob: -4.146500110626221
    5. 'orig' → logprob: -5.896500110626221
    6. ' original' → logprob: -6.021500110626221
    7. 'res' → logprob: -6.271500110626221
    8. 'origin' → logprob: -6.771500110626221
    9. ' result' → logprob: -7.396500110626221
    10. 'origine' → logprob: -7.521500110626221

Token 249: 'el' (ID: 296)
  Prédit: 'eler'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'eler' → logprob: -0.20967312157154083
    2. 'el' → logprob: -1.7096731662750244
    3. '   ' → logprob: -4.959672927856445
    4. 'ly' → logprob: -7.709672927856445
    5. 'l' → logprob: -8.459672927856445
    6. 'er' → logprob: -9.084672927856445
    7. 'elé' → logprob: -9.334672927856445
    8. 'le' → logprob: -9.834672927856445
    9. 'uyer' → logprob: -10.084672927856445
    10. 'els' → logprob: -10.084672927856445

Token 250: ' de' (ID: 334)
  Prédit: '_result'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_result' → logprob: -1.122504711151123
    2. ' find' → logprob: -1.497504711151123
    3. ' de' → logprob: -1.747504711151123
    4. '=find' → logprob: -2.247504711151123
    5. 'result' → logprob: -2.872504711151123
    6. '(find' → logprob: -2.997504711151123
    7. 'find' → logprob: -3.622504711151123
    8. ' du' → logprob: -4.747504711151123
    9. ' result' → logprob: -4.997504711151123
    10. ' =' → logprob: -5.247504711151123

Token 251: ' la' (ID: 557)
  Prédit: 'find'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'find' → logprob: -0.0021571607794612646
    2. 'print' → logprob: -6.752157211303711
    3. ' find' → logprob: -7.002157211303711
    4. 'result' → logprob: -9.502157211303711
    5. 'found' → logprob: -13.752157211303711
    6. '(find' → logprob: -14.377157211303711
    7. 'original' → logprob: -16.62715721130371
    8. ' print' → logprob: -16.62715721130371
    9. '=find' → logprob: -17.00215721130371
    10. '_find' → logprob: -17.62715721130371

Token 252: ' fonction' (ID: 17610)
  Prédit: 'find'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'find' → logprob: -0.16292835772037506
    2. 'result' → logprob: -2.287928342819214
    3. 'prix' → logprob: -3.912928342819214
    4. 'print' → logprob: -4.412928581237793
    5. 'original' → logprob: -4.912928581237793
    6. 'price' → logprob: -5.412928581237793
    7. ' find' → logprob: -5.662928581237793
    8. 'found' → logprob: -6.787928581237793
    9. ' original' → logprob: -9.162928581237793
    10. ' prix' → logprob: -10.162928581237793

Token 253: ' pour' (ID: 1930)
  Prédit: 'result'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'result' → logprob: -0.6435073614120483
    2. '   ' → logprob: -2.018507480621338
    3. 'original' → logprob: -2.393507480621338
    4. ' original' → logprob: -2.518507480621338
    5. 'find' → logprob: -2.643507480621338
    6. ' find' → logprob: -3.393507480621338
    7. 'prix' → logprob: -3.518507480621338
    8. ' result' → logprob: -3.768507480621338
    9. 'print' → logprob: -5.268507480621338
    10. 'price' → logprob: -5.643507480621338

Token 254: ' trouver' (ID: 23195)
  Prédit: 'find'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'find' → logprob: -0.07988068461418152
    2. 'print' → logprob: -3.579880714416504
    3. 'tr' → logprob: -3.704880714416504
    4. ' find' → logprob: -3.954880714416504
    5. ' trouver' → logprob: -5.454880714416504
    6. '   ' → logprob: -7.954880714416504
    7. 'chercher' → logprob: -8.454880714416504
    8. 'calcul' → logprob: -9.579880714416504
    9. 'retr' → logprob: -10.204880714416504
    10. ' print' → logprob: -10.329880714416504

Token 255: ' le' (ID: 505)
  Prédit: 'le'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'le' → logprob: -0.760129451751709
    2. ' le' → logprob: -1.260129451751709
    3. 'l' → logprob: -1.760129451751709
    4. ' l' → logprob: -3.385129451751709
    5. 'find' → logprob: -4.385129451751709
    6. 'n' → logprob: -4.635129451751709
    7. ' find' → logprob: -5.385129451751709
    8. '_le' → logprob: -5.510129451751709
    9. 'original' → logprob: -5.760129451751709
    10. '_original' → logprob: -5.885129451751709

Token 256: ' prix' (ID: 18771)
  Prédit: 'prix'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'prix' → logprob: -0.5668317675590515
    2. ' prix' → logprob: -0.9418317675590515
    3. ' original' → logprob: -3.5668318271636963
    4. 'original' → logprob: -4.316831588745117
    5. 'price' → logprob: -7.566831588745117
    6. 'pr' → logprob: -8.691831588745117
    7. ' price' → logprob: -8.941831588745117
    8. 'n' → logprob: -9.191831588745117
    9. '_original' → logprob: -9.191831588745117
    10. ' find' → logprob: -10.441831588745117

Token 257: ' original' (ID: 4756)
  Prédit: 'original'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'original' → logprob: -0.4953378140926361
    2. '_original' → logprob: -1.6203378438949585
    3. 'initial' → logprob: -2.245337724685669
    4. '   ' → logprob: -3.245337724685669
    5. ' original' → logprob: -3.745337724685669
    6. '_initial' → logprob: -3.995337724685669
    7. ' initial' → logprob: -6.370337963104248
    8. 'd' → logprob: -6.495337963104248
    9. 'avant' → logprob: -7.245337963104248
    10. 'origin' → logprob: -7.370337963104248

Token 258: '
' (ID: 198)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.02017558366060257
    2. 'original' → logprob: -4.270175457000732
    3. 'avant' → logprob: -6.145175457000732
    4. 'before' → logprob: -6.895175457000732
    5. 'initial' → logprob: -7.020175457000732
    6. ' original' → logprob: -7.395175457000732
    7. 'result' → logprob: -8.27017593383789
    8. '(original' → logprob: -8.39517593383789
    9. ' avant' → logprob: -8.52017593383789
    10. '_original' → logprob: -9.39517593383789

Token 259: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.02217021770775318
    2. 'original' → logprob: -4.397170066833496
    3. 'result' → logprob: -5.522170066833496
    4. ' original' → logprob: -6.022170066833496
    5. ' =' → logprob: -7.522170066833496
    6. ' result' → logprob: -7.647170066833496
    7. '=' → logprob: -7.647170066833496
    8. 'before' → logprob: -7.772170066833496
    9. 'initial' → logprob: -8.272170066833496
    10. 'n' → logprob: -8.897170066833496

Token 260: ' original' (ID: 4756)
  Prédit: 'original'
  Correct (stricte): False
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'original' (adapté à ' original') → logprob: -0.24261289834976196
    2. 'result' → logprob: -1.7426128387451172
    3. 'price' → logprob: -3.992612838745117
    4. 'prix' → logprob: -4.617612838745117
    5. ' original' → logprob: -5.117612838745117
    6. 'res' → logprob: -6.117612838745117
    7. 'origin' → logprob: -7.117612838745117
    8. 'orig' → logprob: -7.367612838745117
    9. 'origine' → logprob: -7.617612838745117
    10. ' result' → logprob: -7.867612838745117

Token 261: '_price' (ID: 18814)
  Prédit: '_price'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_price' → logprob: -0.003215022850781679
    2. '_' → logprob: -5.7532148361206055
    3. '_prices' → logprob: -10.753214836120605
    4. '_pr' → logprob: -11.503214836120605
    5. '_p' → logprob: -13.253214836120605
    6. '=_' → logprob: -13.378214836120605
    7. ' _' → logprob: -14.003214836120605
    8. ' =' → logprob: -15.128214836120605
    9. '_prec' → logprob: -15.253214836120605
    10. '=' → logprob: -15.503214836120605

Token 262: ' =' (ID: 314)
  Prédit: ' ='
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' =' → logprob: -0.048587825149297714
    2. '=' → logprob: -3.0485877990722656
    3. ')' → logprob: -15.923587799072266
    4. '=find' → logprob: -15.923587799072266
    5. '(' → logprob: -16.798587799072266
    6. ' ' → logprob: -16.923587799072266
    7. ' ' → logprob: -16.923587799072266
    8. 's' → logprob: -17.173587799072266
    9. ',' → logprob: -17.548587799072266
    10. '＝' → logprob: -18.048587799072266

Token 263: ' find' (ID: 1646)
  Prédit: 'find'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'find' → logprob: -0.023245712742209435
    2. ' find' → logprob: -3.7732458114624023
    3. '(find' → logprob: -15.648245811462402
    4. '	find' → logprob: -16.648244857788086
    5. '=find' → logprob: -17.398244857788086
    6. '   ' → logprob: -18.648244857788086
    7. '
' → logprob: -19.523244857788086
    8. ')find' → logprob: -19.648244857788086
    9. '.find' → logprob: -19.898244857788086
    10. 'f' → logprob: -21.148244857788086

Token 264: '_original' (ID: 92075)
  Prédit: '_original'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_original' → logprob: -1.0280383548888494e-06
    2. 'original' → logprob: -14.375000953674316
    3. '_orig' → logprob: -15.625000953674316
    4. '(original' → logprob: -16.000001907348633
    5. '_' → logprob: -17.125001907348633
    6. '_origin' → logprob: -17.125001907348633
    7. 'Original' → logprob: -17.625001907348633
    8. '_or' → logprob: -18.500001907348633
    9. '_actual' → logprob: -19.375001907348633
    10. ' original' → logprob: -19.750001907348633

Token 265: '_price' (ID: 18814)
  Prédit: '_price'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_price' → logprob: -1.580929347255733e-05
    2. '_' → logprob: -11.250016212463379
    3. '_prices' → logprob: -13.750016212463379
    4. '_pr' → logprob: -14.125016212463379
    5. ' _' → logprob: -14.750016212463379
    6. '_p' → logprob: -15.375016212463379
    7. 'price' → logprob: -16.750015258789062
    8. '_code' → logprob: -16.750015258789062
    9. '_cost' → logprob: -17.125015258789062
    10. '_score' → logprob: -18.125015258789062

Token 266: '(n' (ID: 2406)
  Prédit: '(n'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(n' → logprob: -0.000111768240458332
    2. '(' → logprob: -9.12511157989502
    3. '(after' → logprob: -12.87511157989502
    4. '(
' → logprob: -15.62511157989502
    5. 'n' → logprob: -17.250112533569336
    6. '(nd' → logprob: -19.250112533569336
    7. '(nt' → logprob: -19.250112533569336
    8. '(abs' → logprob: -19.375112533569336
    9. '(N' → logprob: -19.750112533569336
    10. '(no' → logprob: -20.125112533569336

Token 267: ')

' (ID: 1029)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')' → logprob: -0.0001375089050270617
    2. '   ' → logprob: -9.125137329101562
    3. ')
' → logprob: -10.625137329101562
    4. ')

' → logprob: -12.875137329101562
    5. ' )' → logprob: -13.500137329101562
    6. '())' → logprob: -16.625137329101562
    7. ')`' → logprob: -17.125137329101562
    8. '))' → logprob: -17.125137329101562
    9. ' ' → logprob: -17.500137329101562
    10. '()' → logprob: -17.625137329101562

Token 268: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.0005182435852475464
    2. 'if' → logprob: -8.250517845153809
    3. '
' → logprob: -8.750517845153809
    4. '    
' → logprob: -9.375517845153809
    5. '```' → logprob: -11.750517845153809
    6. ' if' → logprob: -12.875517845153809
    7. '<|end|>' → logprob: -13.000517845153809
    8. '  
' → logprob: -15.000517845153809
    9. '	if' → logprob: -16.000518798828125
    10. '       ' → logprob: -16.500518798828125

Token 269: ' if' (ID: 538)
  Prédit: 'if'
  Correct (stricte): False
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'if' (adapté à ' if') → logprob: -0.3871407210826874
    2. '   ' → logprob: -1.1371407508850098
    3. ' if' → logprob: -8.387140274047852
    4. '
' → logprob: -10.762140274047852
    5. '    
' → logprob: -11.262140274047852
    6. '	if' → logprob: -12.387140274047852
    7. '```' → logprob: -12.762140274047852
    8. 'print' → logprob: -14.762140274047852
    9. 'If' → logprob: -16.13714027404785
    10. '  
' → logprob: -17.13714027404785

Token 270: ' original' (ID: 4756)
  Prédit: ' original'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' original' → logprob: -0.005235291086137295
    2. 'original' → logprob: -5.255235195159912
    3. 'Original' → logprob: -14.00523567199707
    4. '(original' → logprob: -15.00523567199707
    5. ' originale' → logprob: -16.00523567199707
    6. '_original' → logprob: -16.13023567199707
    7. ' ' → logprob: -16.88023567199707
    8. ' ' → logprob: -17.25523567199707
    9. ' оригин' → logprob: -18.13023567199707
    10. '原' → logprob: -18.88023567199707

Token 271: '_price' (ID: 18814)
  Prédit: '_price'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_price' → logprob: -7.896309739408025e-07
    2. 'price' → logprob: -14.875000953674316
    3. '_' → logprob: -16.0
    4. '_pr' → logprob: -16.25
    5. '_prices' → logprob: -16.875
    6. 'e' → logprob: -17.625
    7. 'Price' → logprob: -18.875
    8. '_PRICE' → logprob: -19.0
    9. '_p' → logprob: -19.125
    10. '_password' → logprob: -19.5

Token 272: ' is' (ID: 382)
  Prédit: ' is'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' is' → logprob: -0.0007111206650733948
    2. 'is' → logprob: -7.250710964202881
    3. '	is' → logprob: -14.750711441040039
    4. ')' → logprob: -14.875711441040039
    5. ' ' → logprob: -15.375711441040039
    6. ':' → logprob: -16.00071144104004
    7. '==' → logprob: -16.37571144104004
    8. '=' → logprob: -17.62571144104004
    9. ' ==' → logprob: -17.87571144104004
    10. 's' → logprob: -18.12571144104004

Token 273: ' not' (ID: 625)
  Prédit: ' not'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' not' → logprob: -0.09857475757598877
    2. 'not' → logprob: -2.723574638366699
    3. ' None' → logprob: -3.848574638366699
    4. 'None' → logprob: -4.973574638366699
    5. ' ' → logprob: -13.4735746383667
    6. '	not' → logprob: -14.4735746383667
    7. 'Not' → logprob: -14.9735746383667
    8. '   ' → logprob: -15.0985746383667
    9. '=None' → logprob: -15.0985746383667
    10. '_None' → logprob: -15.3485746383667

Token 274: ' None' (ID: 4662)
  Prédit: 'None'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'None' → logprob: -0.00012451570364646614
    2. ' None' → logprob: -9.00012493133545
    3. '   ' → logprob: -14.37512493133545
    4. 'none' → logprob: -15.25012493133545
    5. '_None' → logprob: -15.87512493133545
    6. 'found' → logprob: -17.625123977661133
    7. '=None' → logprob: -17.750123977661133
    8. '       ' → logprob: -18.125123977661133
    9. '```' → logprob: -18.125123977661133
    10. '  ' → logprob: -18.250123977661133

Token 275: ':
' (ID: 734)
  Prédit: ':'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ':' → logprob: -0.005306808277964592
    2. ':
' → logprob: -5.255306720733643
    3. '       ' → logprob: -9.6303071975708
    4. '   ' → logprob: -12.2553071975708
    5. ' :' → logprob: -13.2553071975708
    6. ':
' → logprob: -15.6303071975708
    7. ':

' → logprob: -16.005306243896484
    8. ' :
' → logprob: -16.380306243896484
    9. '):
' → logprob: -16.755306243896484
    10. ',' → logprob: -16.755306243896484

Token 276: '       ' (ID: 309)
  Prédit: '       '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '       ' → logprob: -9.162282367469743e-05
    2. 'print' → logprob: -9.750091552734375
    3. ' print' → logprob: -10.500091552734375
    4. '   ' → logprob: -12.375091552734375
    5. '
' → logprob: -14.625091552734375
    6. '```' → logprob: -15.250091552734375
    7. '           ' → logprob: -15.500091552734375
    8. '        
' → logprob: -15.875091552734375
    9. '	   ' → logprob: -16.750091552734375
    10. '    
' → logprob: -17.250091552734375

Token 277: ' #' (ID: 1069)
  Prédit: '       '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '       ' → logprob: -0.012852766551077366
    2. 'print' → logprob: -4.512852668762207
    3. ' print' → logprob: -6.637852668762207
    4. '   ' → logprob: -7.637852668762207
    5. '
' → logprob: -12.137852668762207
    6. '    
' → logprob: -13.887852668762207
    7. '        
' → logprob: -14.012852668762207
    8. '	print' → logprob: -14.012852668762207
    9. '           ' → logprob: -14.512852668762207
    10. '      ' → logprob: -14.512852668762207

Token 278: ' Si' (ID: 7832)
  Prédit: 'print'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'print' → logprob: -0.02110067754983902
    2. ' print' → logprob: -4.0211005210876465
    3. '   ' → logprob: -6.5211005210876465
    4. '       ' → logprob: -6.5211005210876465
    5. '	print' → logprob: -13.521100997924805
    6. 'pr' → logprob: -15.271100997924805
    7. '    ' → logprob: -15.521100997924805
    8. '           ' → logprob: -15.771100997924805
    9. '  ' → logprob: -16.021100997924805
    10. 'Print' → logprob: -16.271100997924805

Token 279: ' un' (ID: 537)
  Prédit: ' original'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' original' → logprob: -0.03445534408092499
    2. 'original' → logprob: -3.4094552993774414
    3. ' n' → logprob: -8.159455299377441
    4. ' len' → logprob: -8.784455299377441
    5. ' la' → logprob: -9.034455299377441
    6. ' isinstance' → logprob: -9.534455299377441
    7. 'len' → logprob: -10.284455299377441
    8. ' le' → logprob: -10.534455299377441
    9. ' after' → logprob: -10.909455299377441
    10. 'n' → logprob: -11.034455299377441

Token 280: ' prix' (ID: 18771)
  Prédit: 'prix'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'prix' → logprob: -0.5386300683021545
    2. ' prix' → logprob: -1.5386300086975098
    3. 'print' → logprob: -2.2886300086975098
    4. ':' → logprob: -3.1636300086975098
    5. ' original' → logprob: -4.03863000869751
    6. 'price' → logprob: -4.66363000869751
    7. 'original' → logprob: -4.78863000869751
    8. ' print' → logprob: -5.03863000869751
    9. ' price' → logprob: -5.53863000869751
    10. '   ' → logprob: -6.16363000869751

Token 281: ' original' (ID: 4756)
  Prédit: ' original'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' original' → logprob: -0.4297156035900116
    2. 'original' → logprob: -1.179715633392334
    3. '_original' → logprob: -3.679715633392334
    4. '   ' → logprob: -5.679715633392334
    5. ' initial' → logprob: -5.679715633392334
    6. 'initial' → logprob: -5.804715633392334
    7. ' d' → logprob: -6.804715633392334
    8. ' est' → logprob: -6.929715633392334
    9. ' avant' → logprob: -7.304715633392334
    10. ' originale' → logprob: -7.679715633392334

Token 282: ' (' (ID: 350)
  Prédit: 'print'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'print' → logprob: -0.11185669898986816
    2. '   ' → logprob: -3.236856698989868
    3. ' print' → logprob: -3.486856698989868
    4. 'est' → logprob: -4.111856460571289
    5. ' est' → logprob: -4.361856460571289
    6. ' is' → logprob: -5.861856460571289
    7. '       ' → logprob: -6.361856460571289
    8. 'a' → logprob: -7.361856460571289
    9. ' a' → logprob: -7.486856460571289
    10. ' existe' → logprob: -9.236856460571289

Token 283: 'avant' (ID: 63043)
  Prédit: 'original'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'original' → logprob: -0.3232654631137848
    2. ' original' → logprob: -2.323265552520752
    3. ')' → logprob: -2.698265552520752
    4. ' trouvé' → logprob: -2.823265552520752
    5. 'found' → logprob: -3.948265552520752
    6. ' est' → logprob: -4.948265552520752
    7. 'est' → logprob: -5.573265552520752
    8. 'before' → logprob: -5.948265552520752
    9. ' avant' → logprob: -5.948265552520752
    10. '(original' → logprob: -6.073265552520752

Token 284: ' taxe' (ID: 174271)
  Prédit: 'tax'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'tax' → logprob: -0.040267884731292725
    2. ' taxe' → logprob: -3.4152679443359375
    3. '   ' → logprob: -5.7902679443359375
    4. ' tax' → logprob: -6.7902679443359375
    5. 't' → logprob: -7.4152679443359375
    6. '_tax' → logprob: -7.6652679443359375
    7. 'la' → logprob: -7.6652679443359375
    8. ' la' → logprob: -8.415267944335938
    9. '_t' → logprob: -9.040267944335938
    10. '```' → logprob: -9.415267944335938

Token 285: ')' (ID: 8)
  Prédit: ')'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')' → logprob: -0.14183323085308075
    2. ' a' → logprob: -2.5168333053588867
    3. ' est' → logprob: -3.2668333053588867
    4. '   ' → logprob: -5.641833305358887
    5. 'a' → logprob: -5.891833305358887
    6. ' existe' → logprob: -5.891833305358887
    7. 'est' → logprob: -6.016833305358887
    8. ' )' → logprob: -6.641833305358887
    9. 'ex' → logprob: -8.516833305358887
    10. ' is' → logprob: -10.266833305358887

Token 286: ' a' (ID: 261)
  Prédit: ':'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ':' → logprob: -0.5331498384475708
    2. 'print' → logprob: -1.5331498384475708
    3. '   ' → logprob: -3.0331497192382812
    4. ' is' → logprob: -3.4081497192382812
    5. ':
' → logprob: -3.4081497192382812
    6. ' print' → logprob: -4.033149719238281
    7. '       ' → logprob: -4.283149719238281
    8. ' est' → logprob: -4.533149719238281
    9. '           ' → logprob: -4.658149719238281
    10. '>' → logprob: -4.658149719238281

Token 287: ' été' (ID: 9799)
  Prédit: ' été'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' été' → logprob: -0.49092626571655273
    2. ' trouvé' → logprob: -2.1159262657165527
    3. 'print' → logprob: -2.2409262657165527
    4. '   ' → logprob: -3.1159262657165527
    5. ' been' → logprob: -3.4909262657165527
    6. 'été' → logprob: -3.9909262657165527
    7. 'found' → logprob: -3.9909262657165527
    8. '=' → logprob: -5.115926265716553
    9. ' print' → logprob: -5.490926265716553
    10. ' found' → logprob: -5.740926265716553

Token 288: ' trouvé' (ID: 60081)
  Prédit: 'tr'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'tr' → logprob: -0.04322252795100212
    2. ' trouvé' → logprob: -3.168222427368164
    3. ' trouv' → logprob: -9.043222427368164
    4. '   ' → logprob: -9.793222427368164
    5. 'found' → logprob: -11.043222427368164
    6. ' trou' → logprob: -11.918222427368164
    7. 'print' → logprob: -12.043222427368164
    8. '       ' → logprob: -12.418222427368164
    9. ' ' → logprob: -12.918222427368164
    10. 'retr' → logprob: -13.168222427368164

Token 289: ',' (ID: 11)
  Prédit: '       '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '       ' → logprob: -0.14813250303268433
    2. ':' → logprob: -2.773132562637329
    3. ',' → logprob: -2.898132562637329
    4. '           ' → logprob: -4.77313232421875
    5. ' print' → logprob: -5.27313232421875
    6. ':
' → logprob: -5.39813232421875
    7. 'print' → logprob: -6.39813232421875
    8. ' :' → logprob: -9.02313232421875
    9. '   ' → logprob: -9.27313232421875
    10. ' ,' → logprob: -10.27313232421875

Token 290: ' l' (ID: 305)
  Prédit: '       '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '       ' → logprob: -0.09404171258211136
    2. ' print' → logprob: -2.8440418243408203
    3. 'print' → logprob: -3.4690418243408203
    4. '   ' → logprob: -7.84404182434082
    5. '	print' → logprob: -11.59404182434082
    6. '           ' → logprob: -11.96904182434082
    7. '    ' → logprob: -12.96904182434082
    8. '
' → logprob: -13.21904182434082
    9. '      ' → logprob: -13.46904182434082
    10. '        
' → logprob: -13.84404182434082

Token 291: ''aff' (ID: 53397)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.670869767665863
    2. 'print' → logprob: -0.795869767665863
    3. ' print' → logprob: -3.545869827270508
    4. 'e' → logprob: -5.920869827270508
    5. '       ' → logprob: -5.920869827270508
    6. 'a' → logprob: -6.670869827270508
    7. '	print' → logprob: -8.045869827270508
    8. '#' → logprob: -8.295869827270508
    9. ''' → logprob: -8.295869827270508
    10. '`' → logprob: -8.920869827270508

Token 292: 'icher' (ID: 13617)
  Prédit: 'iche'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'iche' → logprob: -0.7496650815010071
    2. 'ich' → logprob: -1.2496650218963623
    3. 'icher' → logprob: -2.2496650218963623
    4. 'ic' → logprob: -2.6246650218963623
    5. 'ichage' → logprob: -2.9996650218963623
    6. 'iché' → logprob: -4.999665260314941
    7. '   ' → logprob: -5.249665260314941
    8. 'ichert' → logprob: -8.499665260314941
    9. '       ' → logprob: -8.624665260314941
    10. '#' → logprob: -8.624665260314941

Token 293: '
' (ID: 198)
  Prédit: '       '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '       ' → logprob: -0.0035930639132857323
    2. 'print' → logprob: -6.1285929679870605
    3. ' print' → logprob: -6.6285929679870605
    4. ',' → logprob: -10.628593444824219
    5. '           ' → logprob: -10.753593444824219
    6. ':' → logprob: -11.128593444824219
    7. '
' → logprob: -12.253593444824219
    8. '(' → logprob: -12.628593444824219
    9. '(print' → logprob: -12.628593444824219
    10. '.' → logprob: -12.878593444824219

Token 294: '       ' (ID: 309)
  Prédit: '       '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '       ' → logprob: -0.00047261794679798186
    2. ' print' → logprob: -7.875472545623779
    3. 'print' → logprob: -9.500473022460938
    4. ',' → logprob: -11.875473022460938
    5. '           ' → logprob: -12.375473022460938
    6. ':' → logprob: -13.375473022460938
    7. '   ' → logprob: -13.375473022460938
    8. '(' → logprob: -14.250473022460938
    9. '      ' → logprob: -14.750473022460938
    10. '	print' → logprob: -14.750473022460938

Token 295: ' print' (ID: 2123)
  Prédit: 'print'
  Correct (stricte): False
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'print' (adapté à ' print') → logprob: -0.23968911170959473
    2. '       ' → logprob: -2.2396891117095947
    3. ' print' → logprob: -2.2396891117095947
    4. '   ' → logprob: -8.864688873291016
    5. '	print' → logprob: -13.614688873291016
    6. '           ' → logprob: -14.364688873291016
    7. '```' → logprob: -14.489688873291016
    8. '    ' → logprob: -15.739688873291016
    9. '     ' → logprob: -15.989688873291016
    10. 'pr' → logprob: -16.364688873291016

Token 296: '(original' (ID: 73254)
  Prédit: '(original'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(original' → logprob: -3.6789137084269896e-05
    2. '(' → logprob: -10.25003719329834
    3. '(orig' → logprob: -13.87503719329834
    4. '(origin' → logprob: -15.62503719329834
    5. 'original' → logprob: -16.250036239624023
    6. '(f' → logprob: -16.875036239624023
    7. ' (' → logprob: -17.375036239624023
    8. '(or' → logprob: -18.750036239624023
    9. '(org' → logprob: -19.125036239624023
    10. '(
' → logprob: -19.375036239624023

Token 297: '_price' (ID: 18814)
  Prédit: '_price'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_price' → logprob: -5.5577775128767826e-06
    2. 'price' → logprob: -12.625005722045898
    3. '_' → logprob: -14.000005722045898
    4. '_pr' → logprob: -14.125005722045898
    5. ' price' → logprob: -15.750005722045898
    6. ')' → logprob: -16.2500057220459
    7. 'prix' → logprob: -16.6250057220459
    8. 'Price' → logprob: -16.8750057220459
    9. '_prices' → logprob: -16.8750057220459
    10. ' _' → logprob: -17.0000057220459

Token 298: ')
' (ID: 446)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')' → logprob: -0.16084739565849304
    2. ')
' → logprob: -1.9108474254608154
    3. '   ' → logprob: -7.410847187042236
    4. ')
' → logprob: -12.410847663879395
    5. ' )' → logprob: -12.535847663879395
    6. '())' → logprob: -12.660847663879395
    7. '()' → logprob: -12.785847663879395
    8. '())
' → logprob: -13.035847663879395
    9. '()
' → logprob: -14.035847663879395
    10. ' )
' → logprob: -14.035847663879395

Token 299: '   ' (ID: 271)
  Prédit: 'else'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'else' → logprob: -0.25274351239204407
    2. '   ' → logprob: -1.5027434825897217
    3. ' else' → logprob: -7.127743721008301
    4. 'elif' → logprob: -12.3777437210083
    5. '<|end|>' → logprob: -12.6277437210083
    6. '	else' → logprob: -13.0027437210083
    7. '```' → logprob: -14.3777437210083
    8. 'elser' → logprob: -15.0027437210083
    9. '    
' → logprob: -15.0027437210083
    10. '_else' → logprob: -15.3777437210083

Token 300: ' else' (ID: 1203)
  Prédit: 'else'
  Correct (stricte): False
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'else' (adapté à ' else') → logprob: -0.002671376569196582
    2. '   ' → logprob: -6.502671241760254
    3. ' else' → logprob: -6.752671241760254
    4. 'elif' → logprob: -15.252671241760254
    5. 'elser' → logprob: -15.502671241760254
    6. '	else' → logprob: -15.752671241760254
    7. '```' → logprob: -17.25267219543457
    8. ' ' → logprob: -17.37767219543457
    9. 'elses' → logprob: -18.00267219543457
    10. '_else' → logprob: -18.12767219543457

Token 301: ':
' (ID: 734)
  Prédit: ':'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ':' → logprob: -0.006728514563292265
    2. ':
' → logprob: -5.006728649139404
    3. '       ' → logprob: -11.756728172302246
    4. ' :' → logprob: -12.881728172302246
    5. '   ' → logprob: -13.131728172302246
    6. ':
' → logprob: -14.756728172302246
    7. ' :
' → logprob: -15.631728172302246
    8. ':

' → logprob: -15.756728172302246
    9. ',' → logprob: -17.631729125976562
    10. '.' → logprob: -18.256729125976562

Token 302: '       ' (ID: 309)
  Prédit: '       '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '       ' → logprob: -0.17402149736881256
    2. 'print' → logprob: -1.9240214824676514
    3. '   ' → logprob: -4.2990217208862305
    4. ' print' → logprob: -9.04902172088623
    5. '	print' → logprob: -13.67402172088623
    6. '```' → logprob: -14.04902172088623
    7. '           ' → logprob: -14.42402172088623
    8. '    ' → logprob: -15.67402172088623
    9. ' ' → logprob: -16.174020767211914
    10. '     ' → logprob: -16.424020767211914

Token 303: ' #' (ID: 1069)
  Prédit: 'print'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'print' → logprob: -0.006209616549313068
    2. '   ' → logprob: -5.506209850311279
    3. ' print' → logprob: -6.631209850311279
    4. '       ' → logprob: -7.131209850311279
    5. '	print' → logprob: -11.756209373474121
    6. '```' → logprob: -14.131209373474121
    7. '    
' → logprob: -15.006209373474121
    8. '.print' → logprob: -15.256209373474121
    9. '(print' → logprob: -15.506209373474121
    10. '    ' → logprob: -15.631209373474121

Token 304: ' Sinon' (ID: 154924)
  Prédit: 'print'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'print' → logprob: -0.0074343509040772915
    2. '   ' → logprob: -5.132434368133545
    3. ' print' → logprob: -6.507434368133545
    4. '       ' → logprob: -11.632433891296387
    5. '	print' → logprob: -13.382433891296387
    6. '    ' → logprob: -14.382433891296387
    7. '  ' → logprob: -15.007433891296387
    8. '#' → logprob: -15.132433891296387
    9. ' ' → logprob: -15.632433891296387
    10. 'pr' → logprob: -15.882433891296387

Token 305: ',' (ID: 11)
  Prédit: '       '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '       ' → logprob: -0.23209768533706665
    2. ':' → logprob: -1.8570976257324219
    3. ':
' → logprob: -3.732097625732422
    4. 'print' → logprob: -4.107097625732422
    5. '   ' → logprob: -4.732097625732422
    6. ' print' → logprob: -6.357097625732422
    7. '    ' → logprob: -11.482097625732422
    8. ',' → logprob: -11.982097625732422
    9. '      ' → logprob: -11.982097625732422
    10. '
' → logprob: -12.107097625732422

Token 306: ' afficher' (ID: 146524)
  Prédit: 'print'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'print' → logprob: -0.01878458634018898
    2. ' print' → logprob: -4.393784523010254
    3. '   ' → logprob: -5.393784523010254
    4. '       ' → logprob: -6.393784523010254
    5. '	print' → logprob: -10.268784523010254
    6. '#' → logprob: -14.018784523010254
    7. '    ' → logprob: -14.018784523010254
    8. 'pr' → logprob: -14.393784523010254
    9. '  ' → logprob: -15.268784523010254
    10. '.print' → logprob: -15.393784523010254

Token 307: ' ":' (ID: 27274)
  Prédit: '-'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '-' → logprob: -0.6699032187461853
    2. '("' → logprob: -1.16990327835083
    3. '(-' → logprob: -2.54490327835083
    4. '(' → logprob: -2.91990327835083
    5. '0' → logprob: -3.79490327835083
    6. '("?' → logprob: -4.29490327835083
    7. '"' → logprob: -6.04490327835083
    8. '("-' → logprob: -6.29490327835083
    9. 'None' → logprob: -6.41990327835083
    10. '"No' → logprob: -6.79490327835083

Token 308: '("' (ID: 568)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(' → logprob: -1.6577703952789307
    2. '-' → logprob: -1.7827703952789307
    3. 'NA' → logprob: -1.9077703952789307
    4. 'None' → logprob: -2.5327703952789307
    5. '0' → logprob: -2.6577703952789307
    6. '"' → logprob: -2.9077703952789307
    7. 'Not' → logprob: -3.4077703952789307
    8. ':(' → logprob: -3.5327703952789307
    9. '("' → logprob: -3.9077703952789307
    10. 'No' → logprob: -3.9077703952789307

Token 309: ' pour' (ID: 1930)
  Prédit: 'print'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'print' → logprob: -0.2426830232143402
    2. '       ' → logprob: -1.7426830530166626
    3. ' print' → logprob: -3.492682933807373
    4. '   ' → logprob: -4.617682933807373
    5. '	print' → logprob: -10.117683410644531
    6. '(print' → logprob: -10.492683410644531
    7. ':' → logprob: -11.242683410644531
    8. ' :' → logprob: -11.492683410644531
    9. '(' → logprob: -11.617683410644531
    10. '(":' → logprob: -11.742683410644531

Token 310: ' ind' (ID: 1383)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.8689000606536865
    2. 'ind' → logprob: -1.8689000606536865
    3. ')' → logprob: -2.7439000606536865
    4. 'l' → logprob: -2.8689000606536865
    5. ' la' → logprob: -2.8689000606536865
    6. ' l' → logprob: -3.6189000606536865
    7. '"' → logprob: -3.9939000606536865
    8. ':' → logprob: -4.118900299072266
    9. ' les' → logprob: -4.118900299072266
    10. ')
' → logprob: -4.368900299072266

Token 311: 'iquer' (ID: 63028)
  Prédit: 'is'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'is' → logprob: -0.13262838125228882
    2. 'iquer' → logprob: -2.2576284408569336
    3. 'es' → logprob: -4.882628440856934
    4. 'iqué' → logprob: -6.007628440856934
    5. 'er' → logprob: -6.632628440856934
    6. 'ex' → logprob: -6.632628440856934
    7. 'ique' → logprob: -6.757628440856934
    8. 'é' → logprob: -6.882628440856934
    9. 'icate' → logprob: -7.132628440856934
    10. 'éf' → logprob: -7.257628440856934

Token 312: ' qu' (ID: 474)
  Prédit: ' l'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' l' → logprob: -0.8506590723991394
    2. 'l' → logprob: -1.8506591320037842
    3. ' une' → logprob: -1.9756591320037842
    4. 'une' → logprob: -2.100659132003784
    5. ' un' → logprob: -2.850659132003784
    6. ' qu' → logprob: -3.725659132003784
    7. 'que' → logprob: -3.975659132003784
    8. 'un' → logprob: -4.225658893585205
    9. ' que' → logprob: -4.225658893585205
    10. ' la' → logprob: -5.225658893585205

Token 313: ''' (ID: 6)
  Prédit: 'e'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'e' → logprob: -1.1863257884979248
    2. ''il' → logprob: -1.5613257884979248
    3. 'une' → logprob: -2.186325788497925
    4. 'auc' → logprob: -2.686325788497925
    5. 'il' → logprob: -3.311325788497925
    6. 'er' → logprob: -3.311325788497925
    7. ''un' → logprob: -3.436325788497925
    8. ''' → logprob: -3.561325788497925
    9. ' il' → logprob: -3.686325788497925
    10. ' aucun' → logprob: -3.686325788497925

Token 314: 'auc' (ID: 11816)
  Prédit: 'auc'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'auc' → logprob: -0.39140650629997253
    2. 'il' → logprob: -1.516406536102295
    3. ' aucun' → logprob: -3.641406536102295
    4. ''' → logprob: -4.016406536102295
    5. ''il' → logprob: -4.016406536102295
    6. 'une' → logprob: -4.141406536102295
    7. ' il' → logprob: -5.016406536102295
    8. 'on' → logprob: -5.766406536102295
    9. 'e' → logprob: -6.016406536102295
    10. 'a' → logprob: -6.016406536102295

Token 315: 'un' (ID: 373)
  Prédit: 'un'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'un' → logprob: -0.5449447631835938
    2. 'e' → logprob: -1.9199447631835938
    3. 'ieux' → logprob: -2.9199447631835938
    4. 'une' → logprob: -3.4199447631835938
    5. 'é' → logprob: -3.5449447631835938
    6. 'ex' → logprob: -4.044944763183594
    7. 'ément' → logprob: -4.294944763183594
    8. 'uns' → logprob: -4.544944763183594
    9. 'u' → logprob: -5.044944763183594
    10. 'auc' → logprob: -5.044944763183594

Token 316: ' prix' (ID: 18771)
  Prédit: 'prix'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'prix' → logprob: -0.45145106315612793
    2. ' prix' → logprob: -1.201451063156128
    3. ' résultat' → logprob: -3.326451063156128
    4. ':' → logprob: -4.076451301574707
    5. ' :(' → logprob: -6.451451301574707
    6. 'result' → logprob: -6.576451301574707
    7. 'rés' → logprob: -6.826451301574707
    8. ' ' → logprob: -7.451451301574707
    9. 'price' → logprob: -7.451451301574707
    10. 'solution' → logprob: -7.451451301574707

Token 317: ' ne' (ID: 453)
  Prédit: ' original'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' original' → logprob: -1.033469557762146
    2. 'original' → logprob: -1.783469557762146
    3. ' initial' → logprob: -1.908469557762146
    4. ' n' → logprob: -2.2834696769714355
    5. ' d' → logprob: -2.5334696769714355
    6. 'initial' → logprob: -3.1584696769714355
    7. 'n' → logprob: -4.0334696769714355
    8. 'avant' → logprob: -4.1584696769714355
    9. ' avant' → logprob: -4.4084696769714355
    10. ' correct' → logprob: -4.5334696769714355

Token 318: ' convient' (ID: 85656)
  Prédit: 'n'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'n' → logprob: -0.8222728371620178
    2. 'cor' → logprob: -1.197272777557373
    3. 'a' → logprob: -2.447272777557373
    4. ' ne' → logprob: -3.447272777557373
    5. 'con' → logprob: -3.572272777557373
    6. 'ne' → logprob: -3.822272777557373
    7. ' n' → logprob: -3.947272777557373
    8. 'tr' → logprob: -4.072272777557373
    9. 'conv' → logprob: -4.322272777557373
    10. ' a' → logprob: -4.572272777557373

Token 319: '
' (ID: 198)
  Prédit: '       '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '       ' → logprob: -0.026170361787080765
    2. '   ' → logprob: -4.526170253753662
    3. 'print' → logprob: -4.776170253753662
    4. ' print' → logprob: -6.151170253753662
    5. ':' → logprob: -6.776170253753662
    6. '(":' → logprob: -6.776170253753662
    7. ' :' → logprob: -7.651170253753662
    8. '("\' → logprob: -8.65117073059082
    9. ' :(' → logprob: -8.90117073059082
    10. '":' → logprob: -9.02617073059082

Token 320: '       ' (ID: 309)
  Prédit: '       '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '       ' → logprob: -0.4710291028022766
    2. 'print' → logprob: -1.0960290431976318
    3. ' print' → logprob: -3.346029043197632
    4. '   ' → logprob: -5.096029281616211
    5. ' :' → logprob: -9.846029281616211
    6. ':' → logprob: -10.846029281616211
    7. '	print' → logprob: -11.721029281616211
    8. ' ' → logprob: -12.596029281616211
    9. '           ' → logprob: -12.596029281616211
    10. ' :(' → logprob: -12.846029281616211

Token 321: ' print' (ID: 2123)
  Prédit: 'print'
  Correct (stricte): False
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'print' (adapté à ' print') → logprob: -8.911954500945285e-05
    2. ' print' → logprob: -9.500088691711426
    3. '   ' → logprob: -11.875088691711426
    4. ':' → logprob: -12.000088691711426
    5. ':(' → logprob: -14.625088691711426
    6. '       ' → logprob: -14.875088691711426
    7. '":' → logprob: -15.750088691711426
    8. '	print' → logprob: -16.750089645385742
    9. '):' → logprob: -17.250089645385742
    10. '(":' → logprob: -17.625089645385742

Token 322: '(":' (ID: 40387)
  Prédit: '(":'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(":' → logprob: -0.024358928203582764
    2. '("' → logprob: -3.7743589878082275
    3. '(' → logprob: -6.899358749389648
    4. '":' → logprob: -10.399358749389648
    5. ' :(' → logprob: -10.649358749389648
    6. '("(' → logprob: -10.899358749389648
    7. '(:' → logprob: -11.274358749389648
    8. ' ":' → logprob: -12.274358749389648
    9. '("("' → logprob: -12.399358749389648
    10. '(':' → logprob: -12.649358749389648

Token 323: '("' (ID: 568)
  Prédit: '("'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '("' → logprob: -0.0011809427523985505
    2. '(' → logprob: -6.751181125640869
    3. ')")' → logprob: -12.376180648803711
    4. '(":' → logprob: -12.876180648803711
    5. '(("' → logprob: -13.501180648803711
    6. '()' → logprob: -14.376180648803711
    7. '(">' → logprob: -14.376180648803711
    8. '(";' → logprob: -14.876180648803711
    9. '("")' → logprob: -15.626180648803711
    10. '(:' → logprob: -15.751180648803711

Token 324: ')

' (ID: 1029)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')' → logprob: -0.0014591661747545004
    2. '
' → logprob: -7.001459121704102
    3. '<|end|>' → logprob: -7.751459121704102
    4. ')
' → logprob: -9.376459121704102
    5. 'if' → logprob: -11.876459121704102
    6. ')

' → logprob: -12.001459121704102
    7. '```' → logprob: -12.001459121704102
    8. ' )' → logprob: -12.251459121704102
    9. '")' → logprob: -12.626459121704102
    10. '')' → logprob: -14.126459121704102

Token 325: 'if' (ID: 366)
  Prédit: 'if'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'if' → logprob: -2.7968066206085496e-05
    2. '
' → logprob: -10.625027656555176
    3. ' if' → logprob: -13.500027656555176
    4. '```' → logprob: -13.750027656555176
    5. '\n' → logprob: -14.375027656555176
    6. 'main' → logprob: -15.250027656555176
    7. '<|end|>' → logprob: -15.750027656555176
    8. '    
' → logprob: -16.500028610229492
    9. '  
' → logprob: -17.125028610229492
    10. '#' → logprob: -17.250028610229492

Token 326: ' __' (ID: 2516)
  Prédit: ' __'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' __' → logprob: -0.25195762515068054
    2. '__' → logprob: -1.501957654953003
    3. '_name' → logprob: -11.126957893371582
    4. 'name' → logprob: -11.626957893371582
    5. '_' → logprob: -13.126957893371582
    6. ' ' → logprob: -13.251957893371582
    7. '___' → logprob: -14.001957893371582
    8. 'Name' → logprob: -15.876957893371582
    9. '/__' → logprob: -16.876956939697266
    10. ' ' → logprob: -17.626956939697266

Token 327: 'name' (ID: 897)
  Prédit: ' __'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' __' → logprob: -0.20858946442604065
    2. '__' → logprob: -1.7085894346237183
    3. ' ==' → logprob: -4.958589553833008
    4. '==' → logprob: -9.958589553833008
    5. '.__' → logprob: -10.583589553833008
    6. 'name' → logprob: -10.958589553833008
    7. ' "__' → logprob: -11.958589553833008
    8. ' _' → logprob: -12.458589553833008
    9. ' main' → logprob: -12.458589553833008
    10. ' ' → logprob: -12.958589553833008

Token 328: '__' (ID: 771)
  Prédit: '__'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '__' → logprob: -2.2200749754119897e-06
    2. '__.__' → logprob: -13.625001907348633
    3. '==' → logprob: -14.250001907348633
    4. ' ==' → logprob: -16.250001907348633
    5. '___' → logprob: -16.625001907348633
    6. '____' → logprob: -17.125001907348633
    7. '_' → logprob: -17.375001907348633
    8. '__["' → logprob: -17.500001907348633
    9. '=="' → logprob: -17.875001907348633
    10. '__.' → logprob: -17.875001907348633

Token 329: ' ==' (ID: 951)
  Prédit: '__'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '__' → logprob: -0.007481207139790058
    2. '==' → logprob: -5.507481098175049
    3. ' ==' → logprob: -5.757481098175049
    4. '=="' → logprob: -8.882481575012207
    5. '__.__' → logprob: -10.507481575012207
    6. '___' → logprob: -11.132481575012207
    7. '_' → logprob: -11.132481575012207
    8. '"' → logprob: -11.382481575012207
    9. '=='' → logprob: -11.507481575012207
    10. '____' → logprob: -12.632481575012207

Token 330: ' "__' (ID: 27367)
  Prédit: '"'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '"' → logprob: -0.008884711191058159
    2. ''' → logprob: -4.758884906768799
    3. ' "__' → logprob: -8.25888442993164
    4. '__' → logprob: -11.75888442993164
    5. ' '__' → logprob: -13.38388442993164
    6. '"user' → logprob: -13.75888442993164
    7. '"name' → logprob: -15.38388442993164
    8. '"class' → logprob: -16.38388442993164
    9. '("__' → logprob: -16.38388442993164
    10. '"default' → logprob: -16.88388442993164

Token 331: 'main' (ID: 7731)
  Prédit: 'main'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'main' → logprob: 0.0
    2. ' main' → logprob: -18.375
    3. '__' → logprob: -18.75
    4. 'name' → logprob: -19.0
    5. '_main' → logprob: -19.375
    6. 'ma' → logprob: -20.25
    7. 'built' → logprob: -21.625
    8. '	main' → logprob: -21.75
    9. '"' → logprob: -22.625
    10. '-main' → logprob: -23.125

Token 332: '__":
' (ID: 49892)
  Prédit: '__'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '__' → logprob: -0.6932175755500793
    2. '__":
' → logprob: -0.6932175755500793
    3. '__':
' → logprob: -10.193217277526855
    4. '_' → logprob: -10.443217277526855
    5. '__["' → logprob: -13.693217277526855
    6. '_"' → logprob: -13.818217277526855
    7. '"' → logprob: -14.818217277526855
    8. '__
' → logprob: -15.193217277526855
    9. '__.' → logprob: -15.568217277526855
    10. '___' → logprob: -15.693217277526855

Token 333: '   ' (ID: 271)
  Prédit: '__'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '__' → logprob: -0.2556489408016205
    2. 'main' → logprob: -1.5056489706039429
    3. '"' → logprob: -6.130649089813232
    4. ' main' → logprob: -6.755649089813232
    5. ''' → logprob: -9.130648612976074
    6. '_main' → logprob: -9.255648612976074
    7. '	main' → logprob: -9.880648612976074
    8. ' "__' → logprob: -9.880648612976074
    9. '___' → logprob: -11.005648612976074
    10. ' __' → logprob: -11.255648612976074

Token 334: ' main' (ID: 2758)
  Prédit: 'main'
  Correct (stricte): False
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'main' (adapté à ' main') → logprob: -1.2664456789934775e-06
    2. ' main' → logprob: -13.750000953674316
    3. '	main' → logprob: -16.250001907348633
    4. '   ' → logprob: -17.250001907348633
    5. '_main' → logprob: -20.750001907348633
    6. '    
' → logprob: -22.625001907348633
    7. '  ' → logprob: -22.875001907348633
    8. '.main' → logprob: -22.875001907348633
    9. '
' → logprob: -23.625001907348633
    10. 'Main' → logprob: -23.625001907348633

Token 335: '()' (ID: 416)
  Prédit: '()'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '()' → logprob: -0.26572102308273315
    2. '<|end|>' → logprob: -2.515721082687378
    3. ')' → logprob: -2.640721082687378
    4. '
' → logprob: -3.515721082687378
    5. '(' → logprob: -3.640721082687378
    6. '```' → logprob: -4.640720844268799
    7. '#' → logprob: -4.765720844268799
    8. '\n' → logprob: -5.765720844268799
    9. '\' → logprob: -7.015720844268799
    10. '(
' → logprob: -7.015720844268799


RÉSUMÉ:
--------------------------------------------------------------------------------
Total des tokens analysés: 333
Tokens correctement prédits (1ère position, stricte): 119
Tokens correctement prédits (1ère position, avec adaptation): 129
Tokens correctement prédits (top 10): 236
Précision stricte (1ère position): 35.74%
Précision adaptée (1ère position): 38.74%
Précision (top 10): 70.87%
================================================================================
