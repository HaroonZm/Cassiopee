================================================================================
ANALYSE DE PRÉDICTION TOKEN PAR TOKEN (BATCH API)
Date: 2025-06-04 20:13:09
Modèle de tokenisation: gpt-4o-mini
================================================================================

SCRIPT ANALYSÉ:
--------------------------------------------------------------------------------
import fractions

# Bon, on va traiter les cas. Le nom n'est pas si parlant...
def run(t, a, b, c, d):
    results = []
    for i in range(t):
        # Je préfère append, c'est plus simple ici !
        results.append(check(a[i], b[i], c[i], d[i]))
    return results

# Cette fonction fait la vérif principale, quel bazar...
def check(a, b, c, d):
    # On regarde les trucs évidents d'abord
    if a < b:
        return "No"
    if d < b:
        return "No"
    if c < b:
        g = fractions.gcd(b, d)  # J'espère que c'est pas deprecated...
        rem = a % b
        if g == 1:
            # hmmm, c'est ça la condition ?
            if b - 1 > c:
                return "No"
        elif g == b:
            if rem > c:
                return "No"
        else:
            if (b - g) > c:
                return "No"
    return "Yes"

# On prend les inputs, c'est pas très beau mais ça fait le job
def read_line():
    t = int(input())
    a = []
    b = []
    c = []
    d = []
    for j in range(t):
        vals = input().split()
        a.append(int(vals[0]))
        b.append(int(vals[1]))
        c.append(int(vals[2]))
        d.append(int(vals[3]))
    return t, a, b, c, d

# Je garde ce nom, on sait jamais
def main():
    t, a, b, c, d = read_line()
    out = run(t, a, b, c, d)
    for ans in out:
        print(ans)

if __name__ == "__main__":
    main()
--------------------------------------------------------------------------------

RÉSULTATS D'ANALYSE TOKEN PAR TOKEN:
--------------------------------------------------------------------------------
Token 0: 'import' (ID: 561)
  → Token d'amorce (pas de prédiction)

Token 1: ' fractions' (ID: 110523)
  → Token d'amorce (pas de prédiction)

Token 2: '

' (ID: 279)
  → Token d'amorce (pas de prédiction)

Token 3: '#' (ID: 2)
  Prédit: '.'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '.' → logprob: -5.6457742175552994e-05
    2. '.`' → logprob: -11.750056266784668
    3. 'import' → logprob: -12.000056266784668
    4. '.f' → logprob: -12.125056266784668
    5. '\' → logprob: -12.250056266784668
    6. '```' → logprob: -12.375056266784668
    7. '.F' → logprob: -12.500056266784668
    8. '\.' → logprob: -12.625056266784668
    9. '.
' → logprob: -13.000056266784668
    10. ',' → logprob: -13.125056266784668

Token 4: ' Bon' (ID: 12658)
  Prédit: ' is'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' is' → logprob: -1.7992913722991943
    2. ' `' → logprob: -2.2992913722991943
    3. ' fractions' → logprob: -2.4242913722991943
    4. ' ' → logprob: -2.7992913722991943
    5. 'Calculate' → logprob: -2.7992913722991943
    6. ' import' → logprob: -3.1742913722991943
    7. ' This' → logprob: -3.2992913722991943
    8. ' Calculate' → logprob: -3.6742913722991943
    9. 'import' → logprob: -3.6742913722991943
    10. 'is' → logprob: -3.9242913722991943

Token 5: ',' (ID: 11)
  Prédit: 'us'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'us' → logprob: -0.009804612956941128
    2. 'uses' → logprob: -5.259804725646973
    3. 'use' → logprob: -7.259804725646973
    4. 'def' → logprob: -7.259804725646973
    5. 'from' → logprob: -7.509804725646973
    6. 'app' → logprob: -7.509804725646973
    7. 'import' → logprob: -8.259804725646973
    8. '#' → logprob: -8.634804725646973
    9. 'u' → logprob: -8.634804725646973
    10. 'ap' → logprob: -8.634804725646973

Token 6: ' on' (ID: 402)
  Prédit: ' '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' ' → logprob: -0.056625884026288986
    2. '_' → logprob: -3.4316258430480957
    3. ' fractions' → logprob: -5.431625843048096
    4. '  ' → logprob: -6.181625843048096
    5. ',' → logprob: -6.306625843048096
    6. ''' → logprob: -6.931625843048096
    7. 'import' → logprob: -7.056625843048096
    8. ' _' → logprob: -7.056625843048096
    9. ')' → logprob: -7.181625843048096
    10. ' =' → logprob: -7.306625843048096

Token 7: ' va' (ID: 3423)
  Prédit: '_'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '_' → logprob: -0.04064144939184189
    2. 'e' → logprob: -3.9156415462493896
    3. ' a' → logprob: -4.9156413078308105
    4. ' peut' → logprob: -5.9156413078308105
    5. 'a' → logprob: -6.9156413078308105
    6. '_a' → logprob: -6.9156413078308105
    7. 's' → logprob: -7.4156413078308105
    8. '_s' → logprob: -7.5406413078308105
    9. ' veut' → logprob: -7.6656413078308105
    10. ' _' → logprob: -7.6656413078308105

Token 8: ' traiter' (ID: 105852)
  Prédit: ' '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' ' → logprob: -0.9614507555961609
    2. ' continuer' → logprob: -1.5864508152008057
    3. ' calcul' → logprob: -2.4614508152008057
    4. ' y' → logprob: -2.7114508152008057
    5. ' faire' → logprob: -2.9614508152008057
    6. ' test' → logprob: -3.5864508152008057
    7. ' essayer' → logprob: -3.7114508152008057
    8. ' utiliser' → logprob: -3.7114508152008057
    9. ' jouer' → logprob: -4.086450576782227
    10. ' créer' → logprob: -4.336450576782227

Token 9: ' les' (ID: 1341)
  Prédit: ' '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' ' → logprob: -0.010544853284955025
    2. '_' → logprob: -4.635544776916504
    3. ' le' → logprob: -9.760544776916504
    4. '(' → logprob: -9.885544776916504
    5. '  ' → logprob: -9.885544776916504
    6. '.' → logprob: -10.010544776916504
    7. 's' → logprob: -10.010544776916504
    8. '<|end|>' → logprob: -10.010544776916504
    9. ' de' → logprob: -10.135544776916504
    10. ' l' → logprob: -10.135544776916504

Token 10: ' cas' (ID: 2108)
  Prédit: ' fractions'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' fractions' → logprob: -0.6601013541221619
    2. ' nombres' → logprob: -0.9101013541221619
    3. ' ' → logprob: -3.0351014137268066
    4. ' ' → logprob: -5.035101413726807
    5. 'fra' → logprob: -5.035101413726807
    6. '   ' → logprob: -5.660101413726807
    7. ' rational' → logprob: -5.910101413726807
    8. ' données' → logprob: -6.472601413726807
    9. 'n' → logprob: -6.910101413726807
    10. '  ' → logprob: -7.035101413726807

Token 11: '.' (ID: 13)
  Prédit: 's'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 's' → logprob: -0.8724872469902039
    2. ' où' → logprob: -1.2474873065948486
    3. ' ' → logprob: -2.3724873065948486
    4. ':' → logprob: -2.9974873065948486
    5. 'où' → logprob: -2.9974873065948486
    6. ' where' → logprob: -3.3724873065948486
    7. ',' → logprob: -3.9974873065948486
    8. '.' → logprob: -4.8724870681762695
    9. '```' → logprob: -5.2474870681762695
    10. ' ```' → logprob: -5.3724870681762695

Token 12: ' Le' (ID: 2018)
  Prédit: '\n'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '\n' → logprob: -1.2908473014831543
    2. '\' → logprob: -1.6658473014831543
    3. ':' → logprob: -2.0408473014831543
    4. '#' → logprob: -2.2908473014831543
    5. '_' → logprob: -3.1658473014831543
    6. 'f' → logprob: -3.4158473014831543
    7. 'a' → logprob: -3.5408473014831543
    8. '(' → logprob: -3.5408473014831543
    9. '.' → logprob: -3.6658473014831543
    10. 's' → logprob: -4.165847301483154

Token 13: ' nom' (ID: 8080)
  Prédit: ' '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' ' → logprob: -0.5008147358894348
    2. ' ' → logprob: -1.37581467628479
    3. 's' → logprob: -3.37581467628479
    4. '_' → logprob: -4.375814914703369
    5. ' d' → logprob: -4.500814914703369
    6. ' s' → logprob: -4.500814914703369
    7. ' `' → logprob: -4.625814914703369
    8. ' plus' → logprob: -4.750814914703369
    9. ' premier' → logprob: -5.250814914703369
    10. 'd' → logprob: -5.625814914703369

Token 14: ' n' (ID: 297)
  Prédit: '_'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '_' → logprob: -0.10838088393211365
    2. ' =' → logprob: -3.4833807945251465
    3. '_de' → logprob: -4.2333807945251465
    4. ' ' → logprob: -4.3583807945251465
    5. ' de' → logprob: -4.6083807945251465
    6. '=' → logprob: -4.6083807945251465
    7. 's' → logprob: -4.7333807945251465
    8. '_d' → logprob: -5.3583807945251465
    9. ' d' → logprob: -5.7333807945251465
    10. ' _' → logprob: -6.4833807945251465

Token 15: ''est' (ID: 6616)
  Prédit: '''
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ''' → logprob: -0.11113595962524414
    2. 'e' → logprob: -2.611135959625244
    3. ''est' → logprob: -4.611135959625244
    4. ''a' → logprob: -4.861135959625244
    5. '')' → logprob: -5.861135959625244
    6. 'é' → logprob: -6.361135959625244
    7. '_' → logprob: -6.486135959625244
    8. ''espace' → logprob: -7.236135959625244
    9. '=' → logprob: -7.361135959625244
    10. ''é' → logprob: -7.486135959625244

Token 16: ' pas' (ID: 2173)
  Prédit: ' pas'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' pas' → logprob: -0.09054986387491226
    2. 'pas' → logprob: -2.465549945831299
    3. ' jamais' → logprob: -7.590549945831299
    4. ''' → logprob: -7.840549945831299
    5. 'import' → logprob: -8.71554946899414
    6. '_pas' → logprob: -9.46554946899414
    7. ' '' → logprob: -9.84054946899414
    8. ' probablement' → logprob: -9.96554946899414
    9. ' peut' → logprob: -10.09054946899414
    10. 's' → logprob: -10.34054946899414

Token 17: ' si' (ID: 1784)
  Prédit: ' valid'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' valid' → logprob: -1.5873500108718872
    2. ' toujours' → logprob: -1.9623500108718872
    3. ' complet' → logprob: -2.2123498916625977
    4. ' fraction' → logprob: -3.2123498916625977
    5. ' =' → logprob: -3.3373498916625977
    6. 'valid' → logprob: -3.3373498916625977
    7. '=' → logprob: -3.4623498916625977
    8. ' correct' → logprob: -3.7123498916625977
    9. ' fourni' → logprob: -3.7123498916625977
    10. ' valide' → logprob: -3.8373498916625977

Token 18: ' parlant' (ID: 178960)
  Prédit: ' long'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' long' → logprob: -0.6094244718551636
    2. 'long' → logprob: -0.8594244718551636
    3. ' simple' → logprob: -5.609424591064453
    4. ' important' → logprob: -5.734424591064453
    5. ' compliqué' → logprob: -6.359424591064453
    6. 'simple' → logprob: -6.484424591064453
    7. ' évident' → logprob: -6.484424591064453
    8. 'court' → logprob: -6.734424591064453
    9. 'fra' → logprob: -6.859424591064453
    10. 'grand' → logprob: -6.984424591064453

Token 19: '...
' (ID: 4908)
  Prédit: ','
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ',' → logprob: -0.8573352098464966
    2. '.' → logprob: -1.6073352098464966
    3. '#' → logprob: -2.107335090637207
    4. '_' → logprob: -2.357335090637207
    5. ' ' → logprob: -2.482335090637207
    6. ':' → logprob: -4.232335090637207
    7. '\' → logprob: -4.357335090637207
    8. 's' → logprob: -4.607335090637207
    9. '' → logprob: -5.607335090637207
    10. 'n' → logprob: -5.732335090637207

Token 20: 'def' (ID: 1314)
  Prédit: '_'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '_' → logprob: -0.34765657782554626
    2. '#' → logprob: -2.472656488418579
    3. ':' → logprob: -2.722656488418579
    4. '.' → logprob: -3.597656488418579
    5. ',' → logprob: -3.972656488418579
    6. 'f' → logprob: -4.347656726837158
    7. '=' → logprob: -4.472656726837158
    8. 'a' → logprob: -4.597656726837158
    9. 'd' → logprob: -4.597656726837158
    10. 'b' → logprob: -4.722656726837158

Token 21: ' run' (ID: 2461)
  Prédit: ' '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' ' → logprob: -0.13032133877277374
    2. ' fractions' → logprob: -3.7553212642669678
    3. ' fraction' → logprob: -3.8803212642669678
    4. ' add' → logprob: -4.255321502685547
    5. ' gcd' → logprob: -4.255321502685547
    6. ' calculate' → logprob: -4.505321502685547
    7. ' calcul' → logprob: -4.755321502685547
    8. ' factor' → logprob: -4.755321502685547
    9. ' ' → logprob: -5.880321502685547
    10. ' traiter' → logprob: -6.255321502685547

Token 22: '(t' (ID: 2025)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '(' → logprob: -0.35084232687950134
    2. '_' → logprob: -1.2258423566818237
    3. ' (' → logprob: -7.350842475891113
    4. '(_' → logprob: -7.850842475891113
    5. '_(' → logprob: -7.975842475891113
    6. '(_)' → logprob: -8.850842475891113
    7. '```' → logprob: -8.850842475891113
    8. '():' → logprob: -9.100842475891113
    9. '_:' → logprob: -9.225842475891113
    10. '()' → logprob: -9.850842475891113

Token 23: ',' (ID: 11)
  Prédit: 'ype'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'ype' → logprob: -0.48939940333366394
    2. 'ime' → logprob: -2.1143994331359863
    3. 'ask' → logprob: -2.6143994331359863
    4. 'oken' → logprob: -2.7393994331359863
    5. 'arget' → logprob: -3.7393994331359863
    6. 'ext' → logprob: -4.239399433135986
    7. 'est' → logprob: -4.239399433135986
    8. '):' → logprob: -4.489399433135986
    9. 'uple' → logprob: -4.739399433135986
    10. 'imes' → logprob: -4.864399433135986

Token 24: ' a' (ID: 261)
  Prédit: ' a'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' a' → logprob: -1.3602350950241089
    2. ' n' → logprob: -1.8602350950241089
    3. ' x' → logprob: -2.1102352142333984
    4. 'a' → logprob: -2.6102352142333984
    5. ' fractions' → logprob: -3.3602352142333984
    6. 'x' → logprob: -3.6102352142333984
    7. ' s' → logprob: -3.7977352142333984
    8. 'n' → logprob: -3.7977352142333984
    9. ' lst' → logprob: -4.110235214233398
    10. ' fraction' → logprob: -4.172735214233398

Token 25: ',' (ID: 11)
  Prédit: '):'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '):' → logprob: -0.03940780833363533
    2. 's' → logprob: -3.539407730102539
    3. ',' → logprob: -4.789407730102539
    4. 'r' → logprob: -7.789407730102539
    5. ':' → logprob: -8.914407730102539
    6. '):
' → logprob: -9.039407730102539
    7. 'rray' → logprob: -9.164407730102539
    8. 'rg' → logprob: -9.539407730102539
    9. ' ):' → logprob: -9.539407730102539
    10. ')' → logprob: -10.164407730102539

Token 26: ' b' (ID: 287)
  Prédit: 'b'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'b' → logprob: -0.4184988737106323
    2. ' b' → logprob: -1.2934988737106323
    3. 'n' → logprob: -3.793498992919922
    4. ' n' → logprob: -4.043498992919922
    5. 'd' → logprob: -6.043498992919922
    6. 'f' → logprob: -6.043498992919922
    7. 'x' → logprob: -6.355998992919922
    8. 'c' → logprob: -6.418498992919922
    9. 'r' → logprob: -6.605998992919922
    10. ' d' → logprob: -6.668498992919922

Token 27: ',' (ID: 11)
  Prédit: '):'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '):' → logprob: -0.014342374168336391
    2. ')' → logprob: -4.389342308044434
    3. ',' → logprob: -6.389342308044434
    4. ':' → logprob: -9.264342308044434
    5. ' ):' → logprob: -10.264342308044434
    6. '=' → logprob: -11.514342308044434
    7. '):
' → logprob: -13.639342308044434
    8. '   ' → logprob: -14.139342308044434
    9. '=None' → logprob: -14.201842308044434
    10. '_' → logprob: -14.201842308044434

Token 28: ' c' (ID: 274)
  Prédit: ' c'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' c' → logprob: -0.4713207483291626
    2. 'c' → logprob: -1.3463207483291626
    3. ' n' → logprob: -3.471320629119873
    4. ' op' → logprob: -4.346320629119873
    5. 'n' → logprob: -4.596320629119873
    6. ' d' → logprob: -5.283820629119873
    7. ' p' → logprob: -5.533820629119873
    8. ' f' → logprob: -5.533820629119873
    9. ' x' → logprob: -5.658820629119873
    10. ' ' → logprob: -5.971320629119873

Token 29: ',' (ID: 11)
  Prédit: '):'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '):' → logprob: -0.020624689757823944
    2. ')' → logprob: -4.02062463760376
    3. ',' → logprob: -6.02062463760376
    4. ':' → logprob: -11.270625114440918
    5. ' ):' → logprob: -11.645625114440918
    6. '):
' → logprob: -11.895625114440918
    7. '=' → logprob: -12.895625114440918
    8. '_' → logprob: -13.145625114440918
    9. 's' → logprob: -13.270625114440918
    10. '*' → logprob: -13.395625114440918

Token 30: ' d' (ID: 272)
  Prédit: ' d'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' d' → logprob: -0.4123311936855316
    2. 'd' → logprob: -1.412331223487854
    3. ' n' → logprob: -3.9123311042785645
    4. ' x' → logprob: -4.5373311042785645
    5. 'n' → logprob: -4.9748311042785645
    6. ' k' → logprob: -5.4748311042785645
    7. 'x' → logprob: -5.5373311042785645
    8. ' denom' → logprob: -5.5998311042785645
    9. ' p' → logprob: -5.9748311042785645
    10. ' s' → logprob: -6.0373311042785645

Token 31: '):
' (ID: 1883)
  Prédit: '):'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '):' → logprob: -0.023492608219385147
    2. ')' → logprob: -3.7734925746917725
    3. ',' → logprob: -8.523492813110352
    4. ' ):' → logprob: -10.523492813110352
    5. ':' → logprob: -11.148492813110352
    6. '):
' → logprob: -13.398492813110352
    7. '   ' → logprob: -13.398492813110352
    8. '=' → logprob: -14.273492813110352
    9. ''):' → logprob: -14.523492813110352
    10. '),' → logprob: -14.773492813110352

Token 32: '   ' (ID: 271)
  Prédit: ':'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ':' → logprob: -0.08104882389307022
    2. '   ' → logprob: -2.7060487270355225
    3. '):' → logprob: -5.831048965454102
    4. ' ' → logprob: -5.831048965454102
    5. ' :' → logprob: -6.456048965454102
    6. '    ' → logprob: -7.206048965454102
    7. ',' → logprob: -7.206048965454102
    8. ':
' → logprob: -7.581048965454102
    9. ' 
' → logprob: -8.081048965454102
    10. ')' → logprob: -8.331048965454102

Token 33: ' results' (ID: 4376)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.9397374987602234
    2. ' ' → logprob: -1.8147375583648682
    3. ' if' → logprob: -2.189737558364868
    4. ' 
' → logprob: -2.189737558364868
    5. ' return' → logprob: -3.439737558364868
    6. 'n' → logprob: -3.564737558364868
    7. '    ' → logprob: -3.689737558364868
    8. 'r' → logprob: -3.814737558364868
    9. '     
' → logprob: -4.439737319946289
    10. 'if' → logprob: -4.564737319946289

Token 34: ' =' (ID: 314)
  Prédit: ' ='
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' =' → logprob: -0.01187878753989935
    2. '=' → logprob: -4.511878967285156
    3. ' ' → logprob: -7.886878967285156
    4. '.' → logprob: -8.386878967285156
    5. '_' → logprob: -9.136878967285156
    6. ')' → logprob: -9.886878967285156
    7. ',' → logprob: -11.511878967285156
    8. 's' → logprob: -11.761878967285156
    9. '[' → logprob: -11.761878967285156
    10. '=[]' → logprob: -11.761878967285156

Token 35: ' []
' (ID: 8911)
  Prédit: ' []'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' []' → logprob: -0.0027781317476183176
    2. '[]' → logprob: -6.252778053283691
    3. ' fractions' → logprob: -7.502778053283691
    4. ' {}' → logprob: -8.752778053283691
    5. ' ' → logprob: -9.877778053283691
    6. ' set' → logprob: -10.502778053283691
    7. ' [' → logprob: -10.627778053283691
    8. ' []
' → logprob: -11.002778053283691
    9. ' []

' → logprob: -12.627778053283691
    10. 'fra' → logprob: -12.752778053283691

Token 36: '   ' (ID: 271)
  Prédit: '
'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '
' → logprob: -1.1152710914611816
    2. '   ' → logprob: -1.6152710914611816
    3. '    
' → logprob: -1.9902710914611816
    4. ' for' → logprob: -1.9902710914611816
    5. ' 
' → logprob: -2.3652710914611816
    6. '    ' → logprob: -3.6152710914611816
    7. ' ' → logprob: -4.240271091461182
    8. 'for' → logprob: -4.490271091461182
    9. '   
' → logprob: -4.490271091461182
    10. '\n' → logprob: -4.740271091461182

Token 37: ' for' (ID: 395)
  Prédit: ' for'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' for' → logprob: -0.3824891149997711
    2. 'for' (adapté à ' for') → logprob: -1.2574890851974487
    3. '   ' → logprob: -4.007489204406738
    4. ' 
' → logprob: -5.507489204406738
    5. '\n' → logprob: -5.632489204406738
    6. ' ' → logprob: -6.007489204406738
    7. '    
' → logprob: -6.007489204406738
    8. '    ' → logprob: -7.257489204406738
    9. '\' → logprob: -7.757489204406738
    10. '     
' → logprob: -7.757489204406738

Token 38: ' i' (ID: 575)
  Prédit: ' i'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' i' → logprob: -0.3452274799346924
    2. ' x' → logprob: -1.9702274799346924
    3. ' _' → logprob: -2.5952274799346924
    4. ' t' → logprob: -3.5952274799346924
    5. ' fraction' → logprob: -4.095227241516113
    6. ' ' → logprob: -5.220227241516113
    7. ' e' → logprob: -5.345227241516113
    8. ' n' → logprob: -5.470227241516113
    9. ' val' → logprob: -5.970227241516113
    10. ' value' → logprob: -5.970227241516113

Token 39: ' in' (ID: 306)
  Prédit: ' in'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' in' → logprob: -0.018727846443653107
    2. 'in' → logprob: -4.643727779388428
    3. ' ' → logprob: -5.268727779388428
    4. ',' → logprob: -6.018727779388428
    5. 'n' → logprob: -6.893727779388428
    6. '  ' → logprob: -9.643728256225586
    7. '_' → logprob: -9.893728256225586
    8. ' n' → logprob: -10.393728256225586
    9. '.' → logprob: -10.768728256225586
    10. '+' → logprob: -10.893728256225586

Token 40: ' range' (ID: 3352)
  Prédit: ' range'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' range' → logprob: -0.03318868577480316
    2. 'range' → logprob: -3.783188581466675
    3. ' t' → logprob: -5.158188819885254
    4. ' a' → logprob: -6.408188819885254
    5. ' ' → logprob: -6.408188819885254
    6. 't' → logprob: -8.408188819885254
    7. '  ' → logprob: -8.658188819885254
    8. ' ran' → logprob: -9.283188819885254
    9. ' b' → logprob: -9.658188819885254
    10. ' r' → logprob: -9.658188819885254

Token 41: '(t' (ID: 2025)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(' → logprob: -0.22590118646621704
    2. '(t' → logprob: -2.3509011268615723
    3. ' (' → logprob: -2.4759011268615723
    4. '(len' → logprob: -3.9759011268615723
    5. ' t' → logprob: -6.475901126861572
    6. '(n' → logprob: -6.975901126861572
    7. ' ' → logprob: -7.475901126861572
    8. ' len' → logprob: -7.600901126861572
    9. '(s' → logprob: -8.97590160369873
    10. '(a' → logprob: -9.10090160369873

Token 42: '):
' (ID: 1883)
  Prédit: '):'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '):' → logprob: -0.0035361594054847956
    2. ')' → logprob: -6.378536224365234
    3. ' ):' → logprob: -6.378536224365234
    4. ':' → logprob: -10.003536224365234
    5. '+' → logprob: -10.003536224365234
    6. ',' → logprob: -10.878536224365234
    7. '):
' → logprob: -11.628536224365234
    8. ' )' → logprob: -12.128536224365234
    9. '   ' → logprob: -12.378536224365234
    10. ' ' → logprob: -13.628536224365234

Token 43: '       ' (ID: 309)
  Prédit: '    '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '    ' → logprob: -0.8663599491119385
    2. '       ' → logprob: -1.2413599491119385
    3. '   ' → logprob: -1.7413599491119385
    4. ' ' → logprob: -2.8663599491119385
    5. ':' → logprob: -3.4913599491119385
    6. ')' → logprob: -5.366359710693359
    7. ' :' → logprob: -5.491359710693359
    8. ',' → logprob: -5.616359710693359
    9. '     
' → logprob: -5.866359710693359
    10. '(' → logprob: -6.116359710693359

Token 44: ' #' (ID: 1069)
  Prédit: ' x'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' x' → logprob: -0.5538108944892883
    2. ' n' → logprob: -2.0538108348846436
    3. 'x' → logprob: -2.4288108348846436
    4. 'n' → logprob: -2.5538108348846436
    5. ' a' → logprob: -3.5538108348846436
    6. '   ' → logprob: -3.5538108348846436
    7. ' if' → logprob: -4.178811073303223
    8. '       ' → logprob: -4.428811073303223
    9. ' line' → logprob: -4.928811073303223
    10. 'a' → logprob: -5.053811073303223

Token 45: ' Je' (ID: 4678)
  Prédit: ' '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' ' → logprob: -0.15569008886814117
    2. ' x' → logprob: -3.4056901931762695
    3. ' if' → logprob: -3.7806901931762695
    4. '    ' → logprob: -4.0306901931762695
    5. 'x' → logprob: -4.2806901931762695
    6. ' input' → logprob: -4.6556901931762695
    7. ' a' → logprob: -5.0306901931762695
    8. ' s' → logprob: -5.2806901931762695
    9. ' line' → logprob: -5.4056901931762695
    10. ' val' → logprob: -5.7806901931762695

Token 46: ' préfère' (ID: 141784)
  Prédit: ' n'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' n' → logprob: -1.0757644176483154
    2. 'f' → logprob: -1.9507644176483154
    3. 'n' → logprob: -1.9507644176483154
    4. ' m' → logprob: -2.0757644176483154
    5. ' suppose' → logprob: -3.5757644176483154
    6. ' f' → logprob: -3.7007644176483154
    7. '   ' → logprob: -3.7007644176483154
    8. ' veux' → logprob: -3.9507644176483154
    9. ' ' → logprob: -4.4507646560668945
    10. ' =' → logprob: -4.5757646560668945

Token 47: ' append' (ID: 17147)
  Prédit: ' utiliser'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' utiliser' → logprob: -1.5820237398147583
    2. ' ' → logprob: -1.9570237398147583
    3. ' continuer' → logprob: -2.2070236206054688
    4. ' comprendre' → logprob: -2.4570236206054688
    5. ' prendre' → logprob: -2.7070236206054688
    6. 'r' → logprob: -3.2070236206054688
    7. '    ' → logprob: -3.7070236206054688
    8. 's' → logprob: -3.9570236206054688
    9. ' fractions' → logprob: -3.9570236206054688
    10. 'rait' → logprob: -4.082023620605469

Token 48: ',' (ID: 11)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '(' → logprob: -0.17277996242046356
    2. '(results' → logprob: -2.1727800369262695
    3. 'results' → logprob: -4.0477800369262695
    4. ' results' → logprob: -5.1727800369262695
    5. 's' → logprob: -5.5477800369262695
    6. '(
' → logprob: -5.6727800369262695
    7. '(a' → logprob: -5.7977800369262695
    8. 'a' → logprob: -6.4227800369262695
    9. ')' → logprob: -6.4227800369262695
    10. ' (' → logprob: -6.9227800369262695

Token 49: ' c' (ID: 274)
  Prédit: ' not'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' not' → logprob: -0.7974226474761963
    2. ' ' → logprob: -1.2974226474761963
    3. ' but' → logprob: -2.1724226474761963
    4. ' a' → logprob: -3.4224226474761963
    5. 'not' → logprob: -4.172422409057617
    6. ' mais' → logprob: -4.797422409057617
    7. ' fractions' → logprob: -4.797422409057617
    8. 'a' → logprob: -5.047422409057617
    9. ' "' → logprob: -5.047422409057617
    10. ')' → logprob: -5.047422409057617

Token 50: ''est' (ID: 6616)
  Prédit: 'ar'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'ar' → logprob: -0.014698709361255169
    2. 'e' → logprob: -4.889698505401611
    3. 'a' → logprob: -6.264698505401611
    4. ''est' → logprob: -6.264698505401611
    5. 'est' → logprob: -7.264698505401611
    6. ''' → logprob: -7.889698505401611
    7. ' parce' → logprob: -7.889698505401611
    8. 'es' → logprob: -8.26469898223877
    9. ' car' → logprob: -8.63969898223877
    10. '`' → logprob: -8.76469898223877

Token 51: ' plus' (ID: 2932)
  Prédit: ' plus'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' plus' → logprob: -0.2039804458618164
    2. 'plus' → logprob: -1.9539804458618164
    3. ' mieux' → logprob: -4.203980445861816
    4. 'moins' → logprob: -4.953980445861816
    5. ' moins' → logprob: -5.328980445861816
    6. ' toujours' → logprob: -5.703980445861816
    7. ' souvent' → logprob: -5.703980445861816
    8. ' pas' → logprob: -7.203980445861816
    9. ' clearer' → logprob: -7.578980445861816
    10. ' more' → logprob: -7.578980445861816

Token 52: ' simple' (ID: 4705)
  Prédit: ' clair'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' clair' → logprob: -0.5601728558540344
    2. ' simple' → logprob: -1.5601727962493896
    3. ' explic' → logprob: -2.0601727962493896
    4. ' lis' → logprob: -4.185173034667969
    5. ' explicit' → logprob: -4.185173034667969
    6. ' sûr' → logprob: -4.685173034667969
    7. ' clear' → logprob: -4.685173034667969
    8. 'simple' → logprob: -4.935173034667969
    9. ' claire' → logprob: -5.185173034667969
    10. ' propre' → logprob: -5.435173034667969

Token 53: ' ici' (ID: 27994)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.7659097909927368
    2. '       ' → logprob: -1.5159097909927368
    3. ' ' → logprob: -2.5159096717834473
    4. ')' → logprob: -2.8909096717834473
    5. ',' → logprob: -2.8909096717834473
    6. '    ' → logprob: -3.0159096717834473
    7. '<|end|>' → logprob: -4.015909671783447
    8. '(' → logprob: -4.140909671783447
    9. '  ' → logprob: -5.015909671783447
    10. '.' → logprob: -5.390909671783447

Token 54: ' !
' (ID: 27498)
  Prédit: '       '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '       ' → logprob: -0.5124660730361938
    2. '   ' → logprob: -1.2624660730361938
    3. '    ' → logprob: -3.1374659538269043
    4. ',' → logprob: -3.8874659538269043
    5. ' ' → logprob: -4.387465953826904
    6. ')' → logprob: -4.512465953826904
    7. '.' → logprob: -4.637465953826904
    8. '<|end|>' → logprob: -5.012465953826904
    9. '        ' → logprob: -6.387465953826904
    10. '        
' → logprob: -6.762465953826904

Token 55: '       ' (ID: 309)
  Prédit: '       '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '       ' → logprob: -0.34027811884880066
    2. '    ' → logprob: -2.590278148651123
    3. ' ' → logprob: -2.965278148651123
    4. '   ' → logprob: -3.090278148651123
    5. 'results' → logprob: -3.340278148651123
    6. '        ' → logprob: -3.965278148651123
    7. '        
' → logprob: -3.965278148651123
    8. ')' → logprob: -4.965278148651123
    9. ' results' → logprob: -5.465278148651123
    10. ',' → logprob: -5.715278148651123

Token 56: ' results' (ID: 4376)
  Prédit: '       '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '       ' → logprob: -1.478312373161316
    2. ' if' → logprob: -1.728312373161316
    3. 'x' → logprob: -2.1033124923706055
    4. ' x' → logprob: -2.1033124923706055
    5. 'results' (adapté à ' results') → logprob: -2.9783124923706055
    6. 'if' → logprob: -3.2283124923706055
    7. ' results' → logprob: -3.3533124923706055
    8. 'result' → logprob: -3.4783124923706055
    9. ' a' → logprob: -3.6033124923706055
    10. '   ' → logprob: -3.6033124923706055

Token 57: '.append' (ID: 3709)
  Prédit: '.append'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '.append' → logprob: -0.008672484196722507
    2. '.' → logprob: -4.758672714233398
    3. '.extend' → logprob: -10.508672714233398
    4. '.app' → logprob: -11.008672714233398
    5. ' .' → logprob: -11.883672714233398
    6. '.ap' → logprob: -12.883672714233398
    7. '.add' → logprob: -13.383672714233398
    8. ').' → logprob: -13.508672714233398
    9. '.setdefault' → logprob: -14.758672714233398
    10. '.Append' → logprob: -15.883672714233398

Token 58: '(check' (ID: 40506)
  Prédit: '(f'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '(f' → logprob: -0.10120143741369247
    2. '(' → logprob: -2.3512015342712402
    3. '((' → logprob: -7.35120153427124
    4. '(a' → logprob: -9.101201057434082
    5. '(F' → logprob: -9.976201057434082
    6. '(b' → logprob: -10.226201057434082
    7. '(c' → logprob: -10.226201057434082
    8. '(max' → logprob: -10.601201057434082
    9. '(fr' → logprob: -10.976201057434082
    10. '(
' → logprob: -11.101201057434082

Token 59: '(a' (ID: 6271)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(' → logprob: -0.37436121702194214
    2. '(a' → logprob: -1.374361276626587
    3. '(f' → logprob: -2.999361276626587
    4. '(i' → logprob: -6.124361038208008
    5. '_fraction' → logprob: -6.499361038208008
    6. '((' → logprob: -6.624361038208008
    7. ')' → logprob: -6.874361038208008
    8. '(b' → logprob: -6.999361038208008
    9. '_f' → logprob: -7.624361038208008
    10. ' (' → logprob: -7.749361038208008

Token 60: '[i' (ID: 1768)
  Prédit: ','
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ',' → logprob: -0.21201546490192413
    2. '[i' → logprob: -1.7120155096054077
    3. '[' → logprob: -5.212015628814697
    4. ' ,' → logprob: -5.837015628814697
    5. ',b' → logprob: -7.462015628814697
    6. ' +' → logprob: -7.712015628814697
    7. ')' → logprob: -7.962015628814697
    8. ',i' → logprob: -8.212015151977539
    9. '+' → logprob: -8.837015151977539
    10. ' ' → logprob: -9.712015151977539

Token 61: '],' (ID: 2155)
  Prédit: '],'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '],' → logprob: -0.00901561975479126
    2. ']' → logprob: -4.8840155601501465
    3. ' ],' → logprob: -6.8840155601501465
    4. ',' → logprob: -8.759016036987305
    5. ']))' → logprob: -9.259016036987305
    6. '],
' → logprob: -10.259016036987305
    7. '])' → logprob: -11.009016036987305
    8. '),' → logprob: -11.259016036987305
    9. '],[' → logprob: -11.884016036987305
    10. ' ]' → logprob: -12.009016036987305

Token 62: ' b' (ID: 287)
  Prédit: ' b'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' b' → logprob: -0.20152521133422852
    2. 'b' → logprob: -1.7015252113342285
    3. ' ' → logprob: -9.32652473449707
    4. ' ' → logprob: -12.82652473449707
    5. '	b' → logprob: -13.07652473449707
    6. ')' → logprob: -13.07652473449707
    7. '<|end|>' → logprob: -13.32652473449707
    8. ')b' → logprob: -13.45152473449707
    9. ',' → logprob: -13.57652473449707
    10. 'c' → logprob: -13.63902473449707

Token 63: '[i' (ID: 1768)
  Prédit: ','
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ',' → logprob: -0.2337629348039627
    2. '[i' → logprob: -1.6087629795074463
    3. '),' → logprob: -5.983762741088867
    4. ')' → logprob: -6.233762741088867
    5. '))' → logprob: -6.233762741088867
    6. '[' → logprob: -7.358762741088867
    7. ' ,' → logprob: -7.483762741088867
    8. ')))' → logprob: -8.983762741088867
    9. ',i' → logprob: -9.358762741088867
    10. ']))' → logprob: -9.733762741088867

Token 64: '],' (ID: 2155)
  Prédit: ','
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ',' → logprob: -0.2390347272157669
    2. '),' → logprob: -2.114034652709961
    3. '],' → logprob: -2.614034652709961
    4. ' ,' → logprob: -5.114034652709961
    5. '))' → logprob: -5.364034652709961
    6. ')' → logprob: -5.489034652709961
    7. ']))' → logprob: -6.364034652709961
    8. ' ' → logprob: -7.989034652709961
    9. ']' → logprob: -8.114034652709961
    10. '])' → logprob: -8.364034652709961

Token 65: ' c' (ID: 274)
  Prédit: ' c'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' c' → logprob: -0.07010549306869507
    2. 'c' → logprob: -2.69510555267334
    3. ' ' → logprob: -9.07010555267334
    4. '  ' → logprob: -11.57010555267334
    5. '   ' → logprob: -11.88260555267334
    6. 'a' → logprob: -12.07010555267334
    7. ' a' → logprob: -12.13260555267334
    8. ')' → logprob: -12.19510555267334
    9. ')c' → logprob: -12.69510555267334
    10. ' d' → logprob: -12.75760555267334

Token 66: '[i' (ID: 1768)
  Prédit: '[i'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '[i' → logprob: -0.2027340531349182
    2. ',' → logprob: -1.7027339935302734
    3. '[' → logprob: -6.952733993530273
    4. ' ,' → logprob: -8.702733993530273
    5. ',i' → logprob: -9.577733993530273
    6. '),' → logprob: -10.202733993530273
    7. ')' → logprob: -10.202733993530273
    8. ' ' → logprob: -11.827733993530273
    9. ',[' → logprob: -11.952733993530273
    10. '   ' → logprob: -12.077733993530273

Token 67: '],' (ID: 2155)
  Prédit: ','
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ',' → logprob: -0.011606751941144466
    2. '],' → logprob: -5.136606693267822
    3. '),' → logprob: -5.511606693267822
    4. ' ,' → logprob: -7.261606693267822
    5. ')' → logprob: -7.511606693267822
    6. ' ' → logprob: -9.26160717010498
    7. '))' → logprob: -9.88660717010498
    8. '])' → logprob: -10.13660717010498
    9. ']))' → logprob: -10.26160717010498
    10. ']' → logprob: -10.26160717010498

Token 68: ' d' (ID: 272)
  Prédit: ' d'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' d' → logprob: -0.1128455176949501
    2. 'd' → logprob: -2.2378454208374023
    3. ')' → logprob: -11.987845420837402
    4. ')d' → logprob: -12.237845420837402
    5. ' ' → logprob: -12.487845420837402
    6. '  ' → logprob: -13.487845420837402
    7. '	d' → logprob: -13.612845420837402
    8. '   ' → logprob: -13.612845420837402
    9. ' ' → logprob: -14.112845420837402
    10. '_d' → logprob: -14.237845420837402

Token 69: '[i' (ID: 1768)
  Prédit: '[i'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '[i' → logprob: -0.019617091864347458
    2. ']))' → logprob: -4.269617080688477
    3. '))' → logprob: -5.769617080688477
    4. '[' → logprob: -7.144617080688477
    5. ')' → logprob: -7.519617080688477
    6. ')))' → logprob: -7.894617080688477
    7. '])' → logprob: -8.519617080688477
    8. ']' → logprob: -8.644617080688477
    9. ')])' → logprob: -9.144617080688477
    10. ')[' → logprob: -10.144617080688477

Token 70: ']))
' (ID: 24801)
  Prédit: '))'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '))' → logprob: -0.10079455375671387
    2. ')' → logprob: -2.350794553756714
    3. ')))' → logprob: -7.600794792175293
    4. ' ))' → logprob: -9.850794792175293
    5. '),' → logprob: -11.725794792175293
    6. ' )' → logprob: -11.850794792175293
    7. '))
' → logprob: -11.975794792175293
    8. ' ' → logprob: -12.600794792175293
    9. ']))' → logprob: -12.725794792175293
    10. '])' → logprob: -13.350794792175293

Token 71: '   ' (ID: 271)
  Prédit: '
'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '
' → logprob: -0.0215930063277483
    2. '   ' → logprob: -4.89659309387207
    3. 'return' → logprob: -6.02159309387207
    4. ' return' → logprob: -6.14659309387207
    5. ' 
' → logprob: -6.14659309387207
    6. ')' → logprob: -6.39659309387207
    7. '
' → logprob: -6.64659309387207
    8. ')
' → logprob: -6.64659309387207
    9. '    
' → logprob: -6.77159309387207
    10. '  
' → logprob: -7.27159309387207

Token 72: ' return' (ID: 622)
  Prédit: '
'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '
' → logprob: -1.0802137851715088
    2. ')' → logprob: -1.5802137851715088
    3. '   ' → logprob: -1.9552137851715088
    4. 'return' (adapté à ' return') → logprob: -1.9552137851715088
    5. ' return' → logprob: -2.580213785171509
    6. '\n' → logprob: -3.580213785171509
    7. '    
' → logprob: -4.20521354675293
    8. ' ' → logprob: -4.45521354675293
    9. '<|end|>' → logprob: -4.45521354675293
    10. ')
' → logprob: -4.83021354675293

Token 73: ' results' (ID: 4376)
  Prédit: ' results'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' results' → logprob: -0.47407835721969604
    2. 'results' → logprob: -0.974078357219696
    3. '(results' → logprob: -13.849078178405762
    4. '	results' → logprob: -14.974078178405762
    5. ' ' → logprob: -17.599079132080078
    6. '.results' → logprob: -18.099079132080078
    7. ' ' → logprob: -18.349079132080078
    8. '_results' → logprob: -18.474079132080078
    9. 'Results' → logprob: -19.599079132080078
    10. ' resultados' → logprob: -20.224079132080078

Token 74: '

' (ID: 279)
  Prédit: '
'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '
' → logprob: -0.32422885298728943
    2. 'def' → logprob: -1.8242288827896118
    3. '<|end|>' → logprob: -2.1992287635803223
    4. '

' → logprob: -5.824228763580322
    5. '<|end|>' → logprob: -7.949228763580322
    6. '\' → logprob: -7.949228763580322
    7. '```' → logprob: -8.44922924041748
    8. '  
' → logprob: -8.94922924041748
    9. ' def' → logprob: -8.94922924041748
    10. '[' → logprob: -9.07422924041748

Token 75: '#' (ID: 2)
  Prédit: '
'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '
' → logprob: -0.1093466505408287
    2. '

' → logprob: -2.734346628189087
    3. '<|end|>' → logprob: -3.734346628189087
    4. 'def' → logprob: -4.484346866607666
    5. '```' → logprob: -6.484346866607666
    6. '\' → logprob: -7.984346866607666
    7. '\n' → logprob: -8.359346389770508
    8. '[' → logprob: -8.359346389770508
    9. '  
' → logprob: -8.484346389770508
    10. ' 
' → logprob: -8.609346389770508

Token 76: ' Cette' (ID: 27383)
  Prédit: ' def'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' def' → logprob: -0.20311018824577332
    2. ' ' → logprob: -2.3281102180480957
    3. 'def' → logprob: -2.4531102180480957
    4. '<|end|>' → logprob: -9.078109741210938
    5. ' ```' → logprob: -10.078109741210938
    6. ' de' → logprob: -10.203109741210938
    7. ' 
' → logprob: -10.453109741210938
    8. ' ' → logprob: -10.828109741210938
    9. ' ​' → logprob: -11.703109741210938
    10. '```' → logprob: -11.828109741210938

Token 77: ' fonction' (ID: 17610)
  Prédit: 'def'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'def' → logprob: -0.5896434783935547
    2. ' def' → logprob: -0.8396434783935547
    3. ' check' → logprob: -4.589643478393555
    4. ' ' → logprob: -7.339643478393555
    5. ' is' → logprob: -7.339643478393555
    6. ' code' → logprob: -7.714643478393555
    7. ' déf' → logprob: -8.089643478393555
    8. ' est' → logprob: -9.089643478393555
    9. ' function' → logprob: -9.339643478393555
    10. ' a' → logprob: -9.339643478393555

Token 78: ' fait' (ID: 7473)
  Prédit: 'def'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'def' → logprob: -0.2133694291114807
    2. ' check' → logprob: -2.463369369506836
    3. ' def' → logprob: -3.463369369506836
    4. ')' → logprob: -3.713369369506836
    5. '<|end|>' → logprob: -4.213369369506836
    6. ':' → logprob: -4.963369369506836
    7. '_check' → logprob: -5.838369369506836
    8. 'check' → logprob: -5.963369369506836
    9. '(' → logprob: -6.088369369506836
    10. '(check' → logprob: -6.213369369506836

Token 79: ' la' (ID: 557)
  Prédit: ' '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' ' → logprob: -1.0673348903656006
    2. ' le' → logprob: -2.0673348903656006
    3. 'le' → logprob: -2.9423348903656006
    4. 'un' → logprob: -3.0673348903656006
    5. ' la' → logprob: -3.0673348903656006
    6. 'quoi' → logprob: -3.1923348903656006
    7. 'l' → logprob: -3.3173348903656006
    8. ' appel' → logprob: -3.3173348903656006
    9. ' un' → logprob: -3.5673348903656006
    10. 'la' → logprob: -3.6923348903656006

Token 80: ' vér' (ID: 42524)
  Prédit: 'v'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'v' → logprob: -1.0684763193130493
    2. 'suite' → logprob: -1.1934763193130493
    3. 'm' → logprob: -2.1934762001037598
    4. 'validation' → logprob: -3.5684762001037598
    5. ' vér' → logprob: -3.6934762001037598
    6. ' comparaison' → logprob: -3.6934762001037598
    7. 'check' → logprob: -3.8184762001037598
    8. ' même' → logprob: -3.9434762001037598
    9. 'verification' → logprob: -3.9434762001037598
    10. 'comparison' → logprob: -4.19347620010376

Token 81: 'if' (ID: 366)
  Prédit: 'ification'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'ification' → logprob: -0.22932909429073334
    2. 'ifi' → logprob: -1.9793291091918945
    3. 'if' → logprob: -3.1043291091918945
    4. 'i' → logprob: -4.4793291091918945
    5. 'ifie' → logprob: -4.6043291091918945
    6. 'ifié' → logprob: -8.979329109191895
    7. '#' → logprob: -9.104329109191895
    8. '   ' → logprob: -9.979329109191895
    9. '```' → logprob: -9.979329109191895
    10. 'ifica' → logprob: -10.729329109191895

Token 82: ' principale' (ID: 68926)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '(' → logprob: -0.7457853555679321
    2. 'def' → logprob: -1.2457853555679321
    3. 's' → logprob: -1.8707853555679321
    4. '_' → logprob: -3.1207852363586426
    5. ' ' → logprob: -4.995785236358643
    6. 'tion' → logprob: -5.120785236358643
    7. '(s' → logprob: -5.495785236358643
    8. '.' → logprob: -5.995785236358643
    9. '```' → logprob: -5.995785236358643
    10. ',' → logprob: -6.245785236358643

Token 83: ',' (ID: 11)
  Prédit: 'def'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'def' → logprob: -0.0013816634891554713
    2. ':def' → logprob: -7.626381874084473
    3. ' def' → logprob: -7.751381874084473
    4. ':' → logprob: -8.501381874084473
    5. '```' → logprob: -9.126381874084473
    6. '\' → logprob: -9.876381874084473
    7. '(def' → logprob: -10.876381874084473
    8. '<|end|>' → logprob: -11.001381874084473
    9. 'de' → logprob: -11.251381874084473
    10. 'ndef' → logprob: -11.751381874084473

Token 84: ' quel' (ID: 10613)
  Prédit: 'def'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'def' → logprob: -0.11335963010787964
    2. ' def' → logprob: -2.4883596897125244
    3. ' ' → logprob: -4.113359451293945
    4. ' mais' → logprob: -6.613359451293945
    5. ')' → logprob: -7.613359451293945
    6. ',' → logprob: -7.738359451293945
    7. '   ' → logprob: -7.863359451293945
    8. ' )' → logprob: -7.988359451293945
    9. ' déf' → logprob: -8.238359451293945
    10. ' et' → logprob: -8.363359451293945

Token 85: ' baz' (ID: 24208)
  Prédit: 'ques'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'ques' → logprob: -0.20096628367900848
    2. 'que' → logprob: -2.3259663581848145
    3. 's' → logprob: -3.8259663581848145
    4. ' que' → logprob: -4.8259663581848145
    5. ' ' → logprob: -5.0759663581848145
    6. 'qu' → logprob: -5.0759663581848145
    7. 'e' → logprob: -5.0759663581848145
    8. 'le' → logprob: -5.4509663581848145
    9. ''est' → logprob: -5.7009663581848145
    10. ''' → logprob: -5.8259663581848145

Token 86: 'ar' (ID: 277)
  Prédit: 'ar'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'ar' → logprob: -0.7573049068450928
    2. 'a' → logprob: -2.0073049068450928
    3. '```' → logprob: -2.1323049068450928
    4. '>' → logprob: -3.2573049068450928
    5. 'i' → logprob: -4.194805145263672
    6. 'ic' → logprob: -4.257305145263672
    7. '#' → logprob: -4.257305145263672
    8. 'u' → logprob: -4.632305145263672
    9. 'b' → logprob: -4.819805145263672
    10. '=' → logprob: -4.944805145263672

Token 87: '...
' (ID: 4908)
  Prédit: 'def'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'def' → logprob: -0.01571969874203205
    2. ' def' → logprob: -4.390719890594482
    3. '```' → logprob: -6.640719890594482
    4. ':def' → logprob: -7.265719890594482
    5. ':' → logprob: -8.140719413757324
    6. '(' → logprob: -8.640719413757324
    7. '(
' → logprob: -8.640719413757324
    8. '<|end|>' → logprob: -8.765719413757324
    9. '!' → logprob: -9.015719413757324
    10. '(def' → logprob: -9.015719413757324

Token 88: 'def' (ID: 1314)
  Prédit: 'def'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'def' → logprob: -0.00041982904076576233
    2. 'd' → logprob: -7.875419616699219
    3. ' def' → logprob: -10.625419616699219
    4. '
' → logprob: -12.125419616699219
    5. '```' → logprob: -12.625419616699219
    6. '\' → logprob: -12.875419616699219
    7. '(' → logprob: -13.750419616699219
    8. 'de' → logprob: -13.875419616699219
    9. ':def' → logprob: -14.250419616699219
    10. '(
' → logprob: -15.125419616699219

Token 89: ' check' (ID: 2371)
  Prédit: ' check'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' check' → logprob: -0.0005834150360897183
    2. 'check' → logprob: -7.875583648681641
    3. '_check' → logprob: -9.50058364868164
    4. ' ' → logprob: -10.00058364868164
    5. ' ' → logprob: -10.00058364868164
    6. '_' → logprob: -10.75058364868164
    7. '	check' → logprob: -11.62558364868164
    8. 'c' → logprob: -13.37558364868164
    9. '<|end|>' → logprob: -13.75058364868164
    10. '.check' → logprob: -14.12558364868164

Token 90: '(a' (ID: 6271)
  Prédit: '(a'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(a' → logprob: -0.009887714870274067
    2. '(' → logprob: -4.6348876953125
    3. ' (' → logprob: -9.0098876953125
    4. '(i' → logprob: -13.3848876953125
    5. '(x' → logprob: -13.3848876953125
    6. '(s' → logprob: -13.8848876953125
    7. '(ai' → logprob: -14.5098876953125
    8. '(
' → logprob: -14.6348876953125
    9. '(b' → logprob: -15.0098876953125
    10. '((' → logprob: -15.0098876953125

Token 91: ',' (ID: 11)
  Prédit: ','
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ',' → logprob: -0.0013155934866517782
    2. ' ,' → logprob: -7.126315593719482
    3. ',b' → logprob: -7.626315593719482
    4. ':' → logprob: -11.626315116882324
    5. 'b' → logprob: -12.626315116882324
    6. '):' → logprob: -13.126315116882324
    7. '_,' → logprob: -13.626315116882324
    8. ' ' → logprob: -13.626315116882324
    9. ',
' → logprob: -13.626315116882324
    10. ',a' → logprob: -14.001315116882324

Token 92: ' b' (ID: 287)
  Prédit: ' b'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' b' → logprob: -0.313617467880249
    2. 'b' → logprob: -1.313617467880249
    3. ' ' → logprob: -8.188617706298828
    4. ' c' → logprob: -11.376117706298828
    5. 'c' → logprob: -11.938617706298828
    6. '	b' → logprob: -12.188617706298828
    7. 'a' → logprob: -12.376117706298828
    8. ')' → logprob: -12.376117706298828
    9. ')b' → logprob: -12.563617706298828
    10. '  ' → logprob: -12.688617706298828

Token 93: ',' (ID: 11)
  Prédit: ','
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ',' → logprob: -0.000588417868129909
    2. '):' → logprob: -8.375588417053223
    3. ' ,' → logprob: -8.750588417053223
    4. ',
' → logprob: -9.125588417053223
    5. ')' → logprob: -10.125588417053223
    6. ',b' → logprob: -11.625588417053223
    7. '<|end|>' → logprob: -12.000588417053223
    8. ',c' → logprob: -12.125588417053223
    9. ',f' → logprob: -12.250588417053223
    10. ',

' → logprob: -12.250588417053223

Token 94: ' c' (ID: 274)
  Prédit: 'c'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'c' → logprob: -0.3132905662059784
    2. ' c' → logprob: -1.3132905960083008
    3. ' ' → logprob: -12.3132905960083
    4. ')c' → logprob: -12.4382905960083
    5. ')' → logprob: -12.6882905960083
    6. 'x' → logprob: -12.8132905960083
    7. 'p' → logprob: -12.9382905960083
    8. 'a' → logprob: -12.9382905960083
    9. '	c' → logprob: -13.6257905960083
    10. 'd' → logprob: -14.2507905960083

Token 95: ',' (ID: 11)
  Prédit: ','
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ',' → logprob: -2.2842308680992573e-05
    2. '):' → logprob: -11.125022888183594
    3. ' ,' → logprob: -12.125022888183594
    4. ',
' → logprob: -14.125022888183594
    5. ')' → logprob: -14.125022888183594
    6. ',b' → logprob: -14.250022888183594
    7. ',d' → logprob: -15.500022888183594
    8. '_,' → logprob: -17.250022888183594
    9. ',

' → logprob: -17.250022888183594
    10. ',c' → logprob: -17.500022888183594

Token 96: ' d' (ID: 272)
  Prédit: 'd'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'd' → logprob: -0.575944721698761
    2. ' d' → logprob: -0.825944721698761
    3. ')d' → logprob: -12.825944900512695
    4. ')' → logprob: -13.075944900512695
    5. ' ' → logprob: -14.950944900512695
    6. ',d' → logprob: -17.325944900512695
    7. '<|end|>' → logprob: -17.325944900512695
    8. ' )' → logprob: -17.450944900512695
    9. '   ' → logprob: -17.450944900512695
    10. '	d' → logprob: -17.575944900512695

Token 97: '):
' (ID: 1883)
  Prédit: '):'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '):' → logprob: -0.00015705463010817766
    2. ')' → logprob: -9.500157356262207
    3. ':' → logprob: -9.750157356262207
    4. '):
' → logprob: -10.750157356262207
    5. ' ):' → logprob: -13.250157356262207
    6. '   ' → logprob: -15.625157356262207
    7. '():' → logprob: -15.875157356262207
    8. ',' → logprob: -16.25015640258789
    9. '}:' → logprob: -16.37515640258789
    10. ']:' → logprob: -16.50015640258789

Token 98: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.16330426931381226
    2. ':' → logprob: -1.913304328918457
    3. ' :' → logprob: -7.038304328918457
    4. ' if' → logprob: -7.538304328918457
    5. '<|end|>' → logprob: -7.788304328918457
    6. ' ' → logprob: -8.288304328918457
    7. ':return' → logprob: -8.288304328918457
    8. ':
' → logprob: -8.788304328918457
    9. '    ' → logprob: -8.788304328918457
    10. ' return' → logprob: -9.538304328918457

Token 99: ' #' (ID: 1069)
  Prédit: ' if'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' if' → logprob: -0.570448100566864
    2. '   ' → logprob: -1.1954481601715088
    3. 'if' → logprob: -2.320448160171509
    4. ' #' → logprob: -5.82044792175293
    5. ' ab' → logprob: -5.82044792175293
    6. 'ab' → logprob: -5.94544792175293
    7. ' x' → logprob: -6.07044792175293
    8. 'f' → logprob: -6.57044792175293
    9. ' a' → logprob: -6.69544792175293
    10. 'frac' → logprob: -6.82044792175293

Token 100: ' On' (ID: 2160)
  Prédit: 'if'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'if' → logprob: -0.3201502561569214
    2. ' if' → logprob: -1.8201502561569214
    3. 'try' → logprob: -3.320150375366211
    4. ' try' → logprob: -3.945150375366211
    5. 'frac' → logprob: -4.445150375366211
    6. '#' → logprob: -4.570150375366211
    7. 'return' → logprob: -5.445150375366211
    8. 'diff' → logprob: -5.695150375366211
    9. ' diff' → logprob: -5.820150375366211
    10. 'x' → logprob: -6.195150375366211

Token 101: ' regarde' (ID: 115760)
  Prédit: ' try'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' try' → logprob: -0.8253729343414307
    2. ' if' → logprob: -0.9503729343414307
    3. ' =' → logprob: -3.5753729343414307
    4. 'if' → logprob: -3.7003729343414307
    5. ' #' → logprob: -3.7003729343414307
    6. ' a' → logprob: -3.8253729343414307
    7. ':' → logprob: -4.575372695922852
    8. ' ==' → logprob: -4.700372695922852
    9. ' return' → logprob: -4.825372695922852
    10. '_' → logprob: -5.075372695922852

Token 102: ' les' (ID: 1341)
  Prédit: ' if'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' if' → logprob: -0.04183365777134895
    2. ' ' → logprob: -4.041833877563477
    3. ' les' → logprob: -4.916833877563477
    4. '   ' → logprob: -5.166833877563477
    5. ' si' → logprob: -5.291833877563477
    6. 'if' → logprob: -6.416833877563477
    7. ' fractions' → logprob: -7.041833877563477
    8. '  ' → logprob: -7.166833877563477
    9. ' la' → logprob: -7.916833877563477
    10. ' whether' → logprob: -8.541833877563477

Token 103: ' trucs' (ID: 151878)
  Prédit: ' fractions'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' fractions' → logprob: -0.32898154854774475
    2. ' den' → logprob: -3.203981637954712
    3. ' num' → logprob: -3.203981637954712
    4. 'den' → logprob: -3.328981637954712
    5. ' denomin' → logprob: -3.828981637954712
    6. ' a' → logprob: -3.828981637954712
    7. ' denom' → logprob: -4.453981399536133
    8. ' diff' → logprob: -4.578981399536133
    9. ' p' → logprob: -4.703981399536133
    10. ' frac' → logprob: -4.828981399536133

Token 104: ' évid' (ID: 61391)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.0691293254494667
    2. ' if' → logprob: -2.944129228591919
    3. ':' → logprob: -5.194129467010498
    4. '    ' → logprob: -6.319129467010498
    5. ' :' → logprob: -6.569129467010498
    6. '  ' → logprob: -7.069129467010498
    7. ',' → logprob: -7.069129467010498
    8. ' =' → logprob: -7.194129467010498
    9. ' ' → logprob: -7.319129467010498
    10. 'if' → logprob: -7.319129467010498

Token 105: 'ents' (ID: 1094)
  Prédit: 'ents'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'ents' → logprob: -0.0010095883626490831
    2. 'entes' → logprob: -7.376009464263916
    3. 'ent' → logprob: -7.876009464263916
    4. 'emment' → logprob: -14.001009941101074
    5. 'ente' → logprob: -14.251009941101074
    6. '```' → logprob: -14.626009941101074
    7. 'ements' → logprob: -15.001009941101074
    8. 'e' → logprob: -15.376009941101074
    9. 'em' → logprob: -15.751009941101074
    10. ' ents' → logprob: -16.126008987426758

Token 106: ' d' (ID: 272)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.09898697584867477
    2. ':' → logprob: -3.098986864089966
    3. ' ' → logprob: -4.098987102508545
    4. ' if' → logprob: -4.598987102508545
    5. '    ' → logprob: -4.723987102508545
    6. ' :' → logprob: -5.348987102508545
    7. '  ' → logprob: -5.598987102508545
    8. '<|end|>' → logprob: -5.848987102508545
    9. ',' → logprob: -7.473987102508545
    10. '<|end|>' → logprob: -7.723987102508545

Token 107: ''abord' (ID: 89989)
  Prédit: 'e'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'e' → logprob: -0.11797691881656647
    2. ''abord' → logprob: -3.2429769039154053
    3. 'ans' → logprob: -3.6179769039154053
    4. 'u' → logprob: -4.617977142333984
    5. 'es' → logprob: -4.617977142333984
    6. ''' → logprob: -5.492977142333984
    7. 'é' → logprob: -5.867977142333984
    8. 'eux' → logprob: -5.992977142333984
    9. ''un' → logprob: -6.367977142333984
    10. 'ef' → logprob: -6.617977142333984

Token 108: '
' (ID: 198)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.018158255144953728
    2. ' if' → logprob: -4.518158435821533
    3. ':' → logprob: -6.393158435821533
    4. ' ' → logprob: -6.643158435821533
    5. '    
' → logprob: -7.143158435821533
    6. '<|end|>' → logprob: -7.393158435821533
    7. 'if' → logprob: -7.643158435821533
    8. '  ' → logprob: -7.893158435821533
    9. '    ' → logprob: -7.893158435821533
    10. '
' → logprob: -8.143157958984375

Token 109: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.010366476140916348
    2. ' if' → logprob: -5.010366439819336
    3. ':' → logprob: -6.135366439819336
    4. '<|end|>' → logprob: -7.510366439819336
    5. ' ' → logprob: -8.260366439819336
    6. 'if' → logprob: -8.510366439819336
    7. '    
' → logprob: -9.260366439819336
    8. '    ' → logprob: -9.260366439819336
    9. ' :' → logprob: -9.635366439819336
    10. '  ' → logprob: -9.760366439819336

Token 110: ' if' (ID: 538)
  Prédit: ' if'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' if' → logprob: -0.22026537358760834
    2. '   ' → logprob: -1.9702653884887695
    3. 'if' (adapté à ' if') → logprob: -2.8452653884887695
    4. '    ' → logprob: -9.72026538848877
    5. ' ' → logprob: -10.47026538848877
    6. '    
' → logprob: -10.59526538848877
    7. '  ' → logprob: -12.22026538848877
    8. ' 
' → logprob: -12.47026538848877
    9. ' a' → logprob: -12.72026538848877
    10. '     
' → logprob: -12.97026538848877

Token 111: ' a' (ID: 261)
  Prédit: ' a'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' a' → logprob: -0.043763626366853714
    2. ' b' → logprob: -3.5437636375427246
    3. 'a' → logprob: -4.793763637542725
    4. ' (' → logprob: -6.043763637542725
    5. ' fractions' → logprob: -6.668763637542725
    6. ' ' → logprob: -7.043763637542725
    7. ' c' → logprob: -8.043763160705566
    8. 'b' → logprob: -8.168763160705566
    9. ' not' → logprob: -9.043763160705566
    10. '(a' → logprob: -9.043763160705566

Token 112: ' <' (ID: 464)
  Prédit: ' =='
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' ==' → logprob: -0.47318005561828613
    2. ' *' → logprob: -1.3481800556182861
    3. '==' → logprob: -2.848180055618286
    4. '*' → logprob: -3.098180055618286
    5. ' +' → logprob: -5.223179817199707
    6. '+' → logprob: -5.598179817199707
    7. ' >' → logprob: -6.848179817199707
    8. ' <' → logprob: -7.223179817199707
    9. ' <=' → logprob: -7.223179817199707
    10. ' %' → logprob: -7.473179817199707

Token 113: ' b' (ID: 287)
  Prédit: ' c'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' c' → logprob: -1.1468570232391357
    2. ' b' → logprob: -1.3968570232391357
    3. '0' → logprob: -1.7718570232391357
    4. 'b' → logprob: -2.2718570232391357
    5. 'c' → logprob: -2.2718570232391357
    6. ' ' → logprob: -3.1468570232391357
    7. '=' → logprob: -4.521857261657715
    8. '1' → logprob: -5.646857261657715
    9. 'd' → logprob: -8.271857261657715
    10. '=c' → logprob: -8.271857261657715

Token 114: ':
' (ID: 734)
  Prédit: ' and'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' and' → logprob: -0.35389643907546997
    2. ':' → logprob: -1.3538963794708252
    3. ' or' → logprob: -3.978896379470825
    4. 'and' → logprob: -3.978896379470825
    5. '   ' → logprob: -7.103896617889404
    6. ' :' → logprob: -7.978896617889404
    7. ' *' → logprob: -8.603896141052246
    8. '+' → logprob: -8.728896141052246
    9. '*' → logprob: -8.853896141052246
    10. '.' → logprob: -8.978896141052246

Token 115: '       ' (ID: 309)
  Prédit: '       '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '       ' → logprob: -0.008053015917539597
    2. '<|end|>' → logprob: -6.133052825927734
    3. '   ' → logprob: -6.383052825927734
    4. ' and' → logprob: -7.008052825927734
    5. ':' → logprob: -7.133052825927734
    6. ' return' → logprob: -7.258052825927734
    7. '    ' → logprob: -7.508052825927734
    8. ' ' → logprob: -8.258052825927734
    9. ' or' → logprob: -8.633052825927734
    10. '.' → logprob: -9.008052825927734

Token 116: ' return' (ID: 622)
  Prédit: '       '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '       ' → logprob: -0.7455228567123413
    2. 'return' (adapté à ' return') → logprob: -1.1205228567123413
    3. ' return' → logprob: -1.6205228567123413
    4. '   ' → logprob: -7.370522975921631
    5. '           ' → logprob: -8.870522499084473
    6. ' if' → logprob: -8.870522499084473
    7. '        
' → logprob: -9.245522499084473
    8. '.' → logprob: -9.245522499084473
    9. '	return' → logprob: -9.370522499084473
    10. '    ' → logprob: -9.495522499084473

Token 117: ' "' (ID: 392)
  Prédit: 'False'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'False' → logprob: -0.7996533513069153
    2. 'True' → logprob: -0.9246533513069153
    3. '"' → logprob: -1.9246532917022705
    4. ''' → logprob: -5.79965353012085
    5. ' True' → logprob: -6.29965353012085
    6. ' False' → logprob: -6.54965353012085
    7. '-' → logprob: -7.67465353012085
    8. '1' → logprob: -8.674653053283691
    9. '0' → logprob: -8.799653053283691
    10. '">' → logprob: -8.924653053283691

Token 118: 'No' (ID: 3160)
  Prédit: 'False'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'False' → logprob: -1.0712270736694336
    2. 'im' → logprob: -2.1962270736694336
    3. 'Impossible' → logprob: -2.4462270736694336
    4. 'NO' → logprob: -2.6962270736694336
    5. 'True' → logprob: -3.1962270736694336
    6. 'false' → logprob: -3.3212270736694336
    7. 'YES' → logprob: -3.3212270736694336
    8. '">' → logprob: -3.5712270736694336
    9. 'No' → logprob: -3.5712270736694336
    10. 'IMP' → logprob: -3.5712270736694336

Token 119: '"
' (ID: 1092)
  Prédit: '"'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '"' → logprob: -0.07906945049762726
    2. ' "' → logprob: -2.5790693759918213
    3. '"
' → logprob: -10.954069137573242
    4. 'n' → logprob: -11.329069137573242
    5. ' problem' → logprob: -11.329069137573242
    6. 't' → logprob: -11.454069137573242
    7. 'e' → logprob: -11.579069137573242
    8. '\n' → logprob: -11.704069137573242
    9. ' "
' → logprob: -11.704069137573242
    10. ' match' → logprob: -11.954069137573242

Token 120: '   ' (ID: 271)
  Prédit: ''
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False

Token 121: ' if' (ID: 538)
  Prédit: ''
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False

Token 122: ' d' (ID: 272)
  Prédit: ' a'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' a' → logprob: -0.07268354296684265
    2. ' c' → logprob: -3.197683572769165
    3. 'a' → logprob: -4.197683334350586
    4. ' b' → logprob: -4.447683334350586
    5. ' fractions' → logprob: -6.822683334350586
    6. 'c' → logprob: -7.572683334350586
    7. ' ' → logprob: -7.822683334350586
    8. 'b' → logprob: -8.572683334350586
    9. ' (' → logprob: -9.197683334350586
    10. ' d' → logprob: -9.447683334350586

Token 123: ' <' (ID: 464)
  Prédit: ' <'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' <' → logprob: -0.6283388733863831
    2. ' >' → logprob: -0.8783388733863831
    3. '>' → logprob: -3.6283388137817383
    4. '<' → logprob: -4.878338813781738
    5. ' ==' → logprob: -5.128338813781738
    6. ' <=' → logprob: -5.378338813781738
    7. ' >=' → logprob: -5.628338813781738
    8. '==' → logprob: -6.253338813781738
    9. ' ' → logprob: -8.003338813781738
    10. '<=' → logprob: -8.628338813781738

Token 124: ' b' (ID: 287)
  Prédit: ' c'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' c' → logprob: -0.3668343722820282
    2. 'c' → logprob: -1.2418344020843506
    3. ' a' → logprob: -4.7418341636657715
    4. 'a' → logprob: -5.1168341636657715
    5. '0' → logprob: -6.7418341636657715
    6. ' b' → logprob: -6.9918341636657715
    7. ' ' → logprob: -7.1168341636657715
    8. 'b' → logprob: -8.11683464050293
    9. '1' → logprob: -8.86683464050293
    10. '	c' → logprob: -10.36683464050293

Token 125: ':
' (ID: 734)
  Prédit: ':'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ':' → logprob: -0.0033590320963412523
    2. ':
' → logprob: -5.753358840942383
    3. ' or' → logprob: -10.003358840942383
    4. ':return' → logprob: -10.378358840942383
    5. '+' → logprob: -10.503358840942383
    6. '   ' → logprob: -10.753358840942383
    7. ' :' → logprob: -11.003358840942383
    8. ' and' → logprob: -11.378358840942383
    9. '):' → logprob: -11.378358840942383
    10. '<|end|>' → logprob: -12.003358840942383

Token 126: '       ' (ID: 309)
  Prédit: ':'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ':' → logprob: -0.08862651884555817
    2. ':
' → logprob: -2.8386266231536865
    3. '   ' → logprob: -4.088626384735107
    4. '       ' → logprob: -5.338626384735107
    5. ':return' → logprob: -5.838626384735107
    6. ' or' → logprob: -7.588626384735107
    7. 'return' → logprob: -7.838626384735107
    8. ' return' → logprob: -8.463626861572266
    9. '+' → logprob: -8.588626861572266
    10. ' and' → logprob: -8.713626861572266

Token 127: ' return' (ID: 622)
  Prédit: 'return'
  Correct (stricte): False
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'return' (adapté à ' return') → logprob: -0.10081988573074341
    2. ' return' → logprob: -2.3508198261260986
    3. '   ' → logprob: -7.725820064544678
    4. '       ' → logprob: -9.35081958770752
    5. 'eturn' → logprob: -9.47581958770752
    6. '	return' → logprob: -12.72581958770752
    7. ' ' → logprob: -12.72581958770752
    8. ':return' → logprob: -14.22581958770752
    9. '  ' → logprob: -14.60081958770752
    10. '    ' → logprob: -15.35081958770752

Token 128: ' "' (ID: 392)
  Prédit: '"No'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '"No' → logprob: -0.16470861434936523
    2. '"' → logprob: -1.9147086143493652
    3. ' "' → logprob: -5.414708614349365
    4. ' ' → logprob: -11.914709091186523
    5. ''' → logprob: -12.039709091186523
    6. '	' → logprob: -12.914709091186523
    7. '   ' → logprob: -13.289709091186523
    8. 'No' → logprob: -13.664709091186523
    9. '"I' → logprob: -13.664709091186523
    10. ' ' → logprob: -14.164709091186523

Token 129: 'No' (ID: 3160)
  Prédit: '"No'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '"No' → logprob: -0.2345758080482483
    2. 'No' → logprob: -1.6095757484436035
    3. '"' → logprob: -4.8595757484436035
    4. 'Yes' → logprob: -6.7345757484436035
    5. ' No' → logprob: -9.234576225280762
    6. ''' → logprob: -10.109576225280762
    7. ' "' → logprob: -12.234576225280762
    8. '""' → logprob: -12.359576225280762
    9. '“No' → logprob: -12.484576225280762
    10. '"N' → logprob: -12.734576225280762

Token 130: '"
' (ID: 1092)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ')' → logprob: -0.21094198524951935
    2. '"' → logprob: -2.835942029953003
    3. '   ' → logprob: -2.835942029953003
    4. ')
' → logprob: -2.835942029953003
    5. '\n' → logprob: -4.710941791534424
    6. '")' → logprob: -5.710941791534424
    7. '```' → logprob: -7.460941791534424
    8. ')"' → logprob: -8.210942268371582
    9. '
' → logprob: -8.710942268371582
    10. '#' → logprob: -8.835942268371582

Token 131: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.12324371933937073
    2. '<|end|>' → logprob: -2.248243808746338
    3. '\n' → logprob: -5.873243808746338
    4. '    
' → logprob: -5.998243808746338
    5. ' if' → logprob: -6.498243808746338
    6. ' 
' → logprob: -7.123243808746338
    7. '  
' → logprob: -7.248243808746338
    8. '\' → logprob: -7.748243808746338
    9. '
' → logprob: -7.748243808746338
    10. ' ' → logprob: -8.74824333190918

Token 132: ' if' (ID: 538)
  Prédit: ' if'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' if' → logprob: -0.4345460534095764
    2. 'if' (adapté à ' if') → logprob: -1.5595459938049316
    3. ' 
' → logprob: -2.8095459938049316
    4. ' ' → logprob: -3.0595459938049316
    5. '<|end|>' → logprob: -4.684545993804932
    6. '   ' → logprob: -4.934545993804932
    7. '\n' → logprob: -5.559545993804932
    8. '
' → logprob: -5.934545993804932
    9. '    
' → logprob: -5.934545993804932
    10. '  
' → logprob: -6.684545993804932

Token 133: ' c' (ID: 274)
  Prédit: ' c'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' c' → logprob: -0.800750732421875
    2. ' a' → logprob: -0.925750732421875
    3. ' b' → logprob: -3.050750732421875
    4. ' fractions' → logprob: -3.175750732421875
    5. 'a' → logprob: -3.550750732421875
    6. 'c' → logprob: -4.175750732421875
    7. ' (' → logprob: -4.925750732421875
    8. ' d' → logprob: -5.550750732421875
    9. ' not' → logprob: -5.925750732421875
    10. '(a' → logprob: -6.175750732421875

Token 134: ' <' (ID: 464)
  Prédit: ' <'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' <' → logprob: -0.153567373752594
    2. ' >' → logprob: -2.028567314147949
    3. ' <=' → logprob: -5.653567314147949
    4. ' >=' → logprob: -6.153567314147949
    5. '<' → logprob: -6.278567314147949
    6. ' ==' → logprob: -6.653567314147949
    7. ' *' → logprob: -7.153567314147949
    8. '>' → logprob: -7.278567314147949
    9. '*' → logprob: -8.40356731414795
    10. ' ' → logprob: -9.02856731414795

Token 135: ' b' (ID: 287)
  Prédit: 'b'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'b' → logprob: -0.6870914697647095
    2. 'a' → logprob: -1.1870914697647095
    3. ' b' → logprob: -1.9370914697647095
    4. ' a' → logprob: -3.06209135055542
    5. 'd' → logprob: -7.56209135055542
    6. ' d' → logprob: -8.812091827392578
    7. '1' → logprob: -9.437091827392578
    8. '0' → logprob: -9.437091827392578
    9. ' ' → logprob: -9.687091827392578
    10. ' fractions' → logprob: -11.812091827392578

Token 136: ':
' (ID: 734)
  Prédit: ':'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ':' → logprob: -0.002336043631657958
    2. ':
' → logprob: -6.127336025238037
    3. ':return' → logprob: -10.002336502075195
    4. '   ' → logprob: -10.252336502075195
    5. '):' → logprob: -11.002336502075195
    6. ' :' → logprob: -11.252336502075195
    7. ' or' → logprob: -11.252336502075195
    8. '<|end|>' → logprob: -11.752336502075195
    9. '       ' → logprob: -12.252336502075195
    10. ' and' → logprob: -12.377336502075195

Token 137: '       ' (ID: 309)
  Prédit: 'return'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'return' → logprob: -0.418046236038208
    2. '       ' → logprob: -1.293046236038208
    3. '   ' → logprob: -3.043046236038208
    4. ' return' → logprob: -4.168045997619629
    5. ':return' → logprob: -6.293045997619629
    6. ':
' → logprob: -6.543045997619629
    7. '
' → logprob: -8.168045997619629
    8. ':' → logprob: -8.543045997619629
    9. '	return' → logprob: -9.293045997619629
    10. ' ' → logprob: -10.293045997619629

Token 138: ' g' (ID: 329)
  Prédit: 'return'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'return' → logprob: -0.0036106400657445192
    2. ' return' → logprob: -5.753610610961914
    3. '   ' → logprob: -7.878610610961914
    4. '       ' → logprob: -9.878610610961914
    5. '"' → logprob: -14.378610610961914
    6. '	return' → logprob: -14.378610610961914
    7. 'No' → logprob: -14.628610610961914
    8. 'eturn' → logprob: -15.003610610961914
    9. ' ' → logprob: -15.253610610961914
    10. 'Return' → logprob: -15.628610610961914

Token 139: ' =' (ID: 314)
  Prédit: 'return'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'return' → logprob: -0.0387575700879097
    2. 'eturn' → logprob: -4.163757801055908
    3. 'et' → logprob: -4.663757801055908
    4. ' return' → logprob: -5.163757801055908
    5. 'enerate' → logprob: -5.788757801055908
    6. 'iven' → logprob: -6.913757801055908
    7. ':return' → logprob: -7.163757801055908
    8. 'if' → logprob: -7.538757801055908
    9. 'eneral' → logprob: -7.788757801055908
    10. 'ive' → logprob: -8.53875732421875

Token 140: ' fractions' (ID: 110523)
  Prédit: 'fra'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'fra' → logprob: -0.39387914538383484
    2. ' fractions' → logprob: -1.1438791751861572
    3. 'c' → logprob: -6.518878936767578
    4. 'b' → logprob: -6.768878936767578
    5. 'fr' → logprob: -6.768878936767578
    6. '1' → logprob: -6.893878936767578
    7. 'a' → logprob: -7.268878936767578
    8. '0' → logprob: -8.018878936767578
    9. ' ' → logprob: -8.268878936767578
    10. ' c' → logprob: -8.768878936767578

Token 141: '.g' (ID: 1940)
  Prédit: '.F'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '.F' → logprob: -0.03417854383587837
    2. '.' → logprob: -3.4091784954071045
    3. '.f' → logprob: -8.409178733825684
    4. '.Future' → logprob: -9.034178733825684
    5. ' .' → logprob: -9.784178733825684
    6. '.g' → logprob: -11.159178733825684
    7. '.Counter' → logprob: -11.159178733825684
    8. '.Decimal' → logprob: -11.534178733825684
    9. '.Strict' → logprob: -11.659178733825684
    10. '.Fr' → logprob: -11.784178733825684

Token 142: 'cd' (ID: 8301)
  Prédit: 'cd'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'cd' → logprob: -0.0013948804698884487
    2. 'reat' → logprob: -6.876394748687744
    3. 'CD' → logprob: -8.001395225524902
    4. 'reater' → logprob: -12.126395225524902
    5. 'cdn' → logprob: -12.376395225524902
    6. 'roup' → logprob: -12.376395225524902
    7. 'mp' → logprob: -12.626395225524902
    8. '1' → logprob: -13.001395225524902
    9. 'def' → logprob: -13.751395225524902
    10. '```' → logprob: -13.876395225524902

Token 143: '(b' (ID: 3229)
  Prédit: '(c'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(c' → logprob: -0.0027903730515390635
    2. '(a' → logprob: -6.127790451049805
    3. '(g' → logprob: -8.377790451049805
    4. '(d' → logprob: -8.502790451049805
    5. '(' → logprob: -8.877790451049805
    6. '(b' → logprob: -10.877790451049805
    7. '<|end|>' → logprob: -12.002790451049805
    8. '(f' → logprob: -13.252790451049805
    9. '(s' → logprob: -13.752790451049805
    10. 'c' → logprob: -14.252790451049805

Token 144: ',' (ID: 11)
  Prédit: ','
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ',' → logprob: -0.03484155237674713
    2. '-' → logprob: -4.284841537475586
    3. ' -' → logprob: -4.659841537475586
    4. ' ,' → logprob: -5.159841537475586
    5. ',c' → logprob: -5.409841537475586
    6. ')' → logprob: -8.284841537475586
    7. ',a' → logprob: -8.784841537475586
    8. '*' → logprob: -9.534841537475586
    9. ',b' → logprob: -9.659841537475586
    10. ',g' → logprob: -10.159841537475586

Token 145: ' d' (ID: 272)
  Prédit: 'c'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'c' → logprob: -0.008879510685801506
    2. ' c' → logprob: -4.758879661560059
    3. 'a' → logprob: -8.633879661560059
    4. 'd' → logprob: -9.508879661560059
    5. 'b' → logprob: -12.133879661560059
    6. ' a' → logprob: -13.383879661560059
    7. ' d' → logprob: -13.383879661560059
    8. ' ' → logprob: -13.758879661560059
    9. '   ' → logprob: -13.758879661560059
    10. '  ' → logprob: -14.508879661560059

Token 146: ')' (ID: 8)
  Prédit: ')'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')' → logprob: -0.0003693013568408787
    2. ')
' → logprob: -8.12536907196045
    3. ' )' → logprob: -10.00036907196045
    4. '<|end|>' → logprob: -11.62536907196045
    5. ')#' → logprob: -13.00036907196045
    6. '   ' → logprob: -13.00036907196045
    7. ',' → logprob: -13.25036907196045
    8. ')

' → logprob: -13.25036907196045
    9. '))' → logprob: -13.50036907196045
    10. '#' → logprob: -13.75036907196045

Token 147: ' ' (ID: 220)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ')' → logprob: -0.39354953169822693
    2. '<|end|>' → logprob: -1.1435495615005493
    3. '()' → logprob: -6.39354944229126
    4. '(' → logprob: -6.39354944229126
    5. '<|end|>' → logprob: -6.76854944229126
    6. '#' → logprob: -7.76854944229126
    7. '-' → logprob: -7.89354944229126
    8. '.' → logprob: -8.018549919128418
    9. '   ' → logprob: -8.643549919128418
    10. ',' → logprob: -8.768549919128418

Token 148: ' #' (ID: 1069)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ')' → logprob: -0.05552664026618004
    2. '<|end|>' → logprob: -3.3055267333984375
    3. '()' → logprob: -4.3055267333984375
    4. '(' → logprob: -6.6805267333984375
    5. '   ' → logprob: -7.4305267333984375
    6. '<|end|>' → logprob: -7.9305267333984375
    7. '-' → logprob: -8.305526733398438
    8. ',' → logprob: -8.555526733398438
    9. '#' → logprob: -8.805526733398438
    10. '+' → logprob: -9.055526733398438

Token 149: ' J' (ID: 643)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ')' → logprob: -0.5113296508789062
    2. '()' → logprob: -1.2613296508789062
    3. '<|end|>' → logprob: -3.3863296508789062
    4. '(' → logprob: -3.5113296508789062
    5. '.' → logprob: -3.8863296508789062
    6. 'Attribute' → logprob: -4.136329650878906
    7. ' ' → logprob: -6.011329650878906
    8. '...' → logprob: -6.011329650878906
    9. 'Type' → logprob: -6.886329650878906
    10. 'g' → logprob: -7.011329650878906

Token 150: ''espère' (ID: 116557)
  Prédit: 'import'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'import' → logprob: -0.9757004380226135
    2. ''ai' → logprob: -1.6007003784179688
    3. 's' → logprob: -2.8507003784179688
    4. ''import' → logprob: -3.2257003784179688
    5. ''aime' → logprob: -3.2257003784179688
    6. 'g' → logprob: -3.7257003784179688
    7. '<|end|>' → logprob: -3.9757003784179688
    8. 'avascript' → logprob: -4.225700378417969
    9. ''espère' → logprob: -4.350700378417969
    10. '#' → logprob: -4.350700378417969

Token 151: ' que' (ID: 661)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ')' → logprob: -0.16080832481384277
    2. '()' → logprob: -3.2858083248138428
    3. '(' → logprob: -3.4108083248138428
    4. '#' → logprob: -3.9108083248138428
    5. '.' → logprob: -3.9108083248138428
    6. ',' → logprob: -4.785808563232422
    7. ' is' → logprob: -5.660808563232422
    8. 'import' → logprob: -5.910808563232422
    9. '<|end|>' → logprob: -5.910808563232422
    10. 'g' → logprob: -6.035808563232422

Token 152: ' c' (ID: 274)
  Prédit: 'fra'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'fra' → logprob: -0.7151972055435181
    2. 'False' → logprob: -2.0901970863342285
    3. 'not' → logprob: -2.2151970863342285
    4. ' fractions' → logprob: -2.3401970863342285
    5. ' not' → logprob: -2.5901970863342285
    6. ' hasattr' → logprob: -2.7151970863342285
    7. '!' → logprob: -4.3401970863342285
    8. ' False' → logprob: -4.5901970863342285
    9. 'g' → logprob: -4.9651970863342285
    10. 'import' → logprob: -6.2151970863342285

Token 153: ''est' (ID: 6616)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')' → logprob: -1.5936431884765625
    2. ' is' → logprob: -1.7186431884765625
    3. 'ol' → logprob: -1.7186431884765625
    4. 'orrect' → logprob: -2.5936431884765625
    5. 'ould' → logprob: -3.3436431884765625
    6. '<|end|>' → logprob: -3.4686431884765625
    7. ''est' → logprob: -3.7186431884765625
    8. 'g' → logprob: -3.8436431884765625
    9. 'om' → logprob: -3.8436431884765625
    10. 'import' → logprob: -3.9686431884765625

Token 154: ' pas' (ID: 2173)
  Prédit: 'deprecated'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'deprecated' → logprob: -0.427417516708374
    2. 'fra' → logprob: -1.927417516708374
    3. 'b' → logprob: -2.552417516708374
    4. ' deprecated' → logprob: -2.802417516708374
    5. ' fractions' → logprob: -3.427417516708374
    6. 'g' → logprob: -4.302417755126953
    7. 'd' → logprob: -6.177417755126953
    8. 'import' → logprob: -6.302417755126953
    9. 'de' → logprob: -6.427417755126953
    10. 'dep' → logprob: -6.802417755126953

Token 155: ' deprecated' (ID: 66913)
  Prédit: 'deprecated'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'deprecated' → logprob: -0.17520031332969666
    2. 'dé' → logprob: -2.4252002239227295
    3. ' ob' → logprob: -3.5502002239227295
    4. ' deprecated' → logprob: -4.050200462341309
    5. 'ob' → logprob: -4.550200462341309
    6. ' dé' → logprob: -4.925200462341309
    7. 'dep' → logprob: -6.050200462341309
    8. 'de' → logprob: -6.050200462341309
    9. 'd' → logprob: -6.675200462341309
    10. 'b' → logprob: -6.925200462341309

Token 156: '...
' (ID: 4908)
  Prédit: '()'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '()' → logprob: -0.7265145778656006
    2. '(' → logprob: -1.2265145778656006
    3. ')' → logprob: -1.6015145778656006
    4. '<|end|>' → logprob: -4.47651481628418
    5. ',' → logprob: -5.60151481628418
    6. '<|end|>' → logprob: -6.35151481628418
    7. '   ' → logprob: -6.72651481628418
    8. '(
' → logprob: -7.10151481628418
    9. ' ' → logprob: -7.72651481628418
    10. '())' → logprob: -7.97651481628418

Token 157: '       ' (ID: 309)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ')' → logprob: -0.23775961995124817
    2. '<|end|>' → logprob: -1.6127595901489258
    3. '<|end|>' → logprob: -5.487759590148926
    4. '+' → logprob: -6.362759590148926
    5. '.' → logprob: -6.487759590148926
    6. '(' → logprob: -7.237759590148926
    7. ',' → logprob: -7.237759590148926
    8. '#' → logprob: -7.362759590148926
    9. '()' → logprob: -7.612759590148926
    10. '
' → logprob: -7.737759590148926

Token 158: ' rem' (ID: 1662)
  Prédit: '       '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '       ' → logprob: -0.3045860826969147
    2. ')' → logprob: -1.8045860528945923
    3. '<|end|>' → logprob: -4.054585933685303
    4. 'Type' → logprob: -4.429585933685303
    5. ' ' → logprob: -4.679585933685303
    6. '+' → logprob: -5.179585933685303
    7. '^' → logprob: -5.304585933685303
    8. 'g' → logprob: -5.429585933685303
    9. ',' → logprob: -5.554585933685303
    10. ' Type' → logprob: -5.679585933685303

Token 159: ' =' (ID: 314)
  Prédit: 'a'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'a' → logprob: -0.014523091726005077
    2. ' =' → logprob: -5.389523029327393
    3. '_a' → logprob: -6.389523029327393
    4. 'ainer' → logprob: -6.639523029327393
    5. '(a' → logprob: -6.639523029327393
    6. 'ain' → logprob: -6.764523029327393
    7. '```' → logprob: -6.764523029327393
    8. '=' → logprob: -7.014523029327393
    9. 'aining' → logprob: -7.514523029327393
    10. '=a' → logprob: -7.889523029327393

Token 160: ' a' (ID: 261)
  Prédit: ' b'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' b' → logprob: -0.7737767100334167
    2. 'b' → logprob: -1.6487767696380615
    3. ' c' → logprob: -2.0237767696380615
    4. ' (' → logprob: -2.5237767696380615
    5. '(b' → logprob: -3.2737767696380615
    6. ' d' → logprob: -3.2737767696380615
    7. 'c' → logprob: -3.3987767696380615
    8. 'd' → logprob: -4.648776531219482
    9. '(c' → logprob: -4.898776531219482
    10. ' a' → logprob: -6.273776531219482

Token 161: ' %' (ID: 1851)
  Prédit: ' %'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' %' → logprob: -0.12997585535049438
    2. '%' → logprob: -2.1299757957458496
    3. '%b' → logprob: -5.87997579574585
    4. ' ' → logprob: -9.379976272583008
    5. '-' → logprob: -9.504976272583008
    6. ' -' → logprob: -10.004976272583008
    7. '%c' → logprob: -11.129976272583008
    8. '%d' → logprob: -12.004976272583008
    9. '%s' → logprob: -12.504976272583008
    10. '%e' → logprob: -12.629976272583008

Token 162: ' b' (ID: 287)
  Prédit: ' g'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' g' → logprob: -0.5457735657691956
    2. 'g' → logprob: -0.9207735657691956
    3. 'd' → logprob: -5.045773506164551
    4. ' d' → logprob: -5.045773506164551
    5. ' b' → logprob: -5.420773506164551
    6. 'b' → logprob: -5.545773506164551
    7. ' (' → logprob: -7.420773506164551
    8. ' ' → logprob: -8.92077350616455
    9. ' c' → logprob: -9.17077350616455
    10. '(' → logprob: -9.17077350616455

Token 163: '
' (ID: 198)
  Prédit: ''
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False

Token 164: '       ' (ID: 309)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')' → logprob: -0.5451470017433167
    2. '<|end|>' → logprob: -1.0451469421386719
    3. '       ' → logprob: -2.795146942138672
    4. ' ' → logprob: -6.295146942138672
    5. '<|end|>' → logprob: -6.795146942138672
    6. '   ' → logprob: -6.795146942138672
    7. ',' → logprob: -7.295146942138672
    8. '+' → logprob: -7.420146942138672
    9. 'g' → logprob: -8.545146942138672
    10. ')
' → logprob: -8.545146942138672

Token 165: ' if' (ID: 538)
  Prédit: 'if'
  Correct (stricte): False
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'if' (adapté à ' if') → logprob: -0.37351226806640625
    2. ' if' → logprob: -1.3735122680664062
    3. 'return' → logprob: -3.6235122680664062
    4. ' return' → logprob: -4.998512268066406
    5. 'r' → logprob: -5.498512268066406
    6. 'g' → logprob: -5.748512268066406
    7. 'q' → logprob: -6.123512268066406
    8. '       ' → logprob: -6.498512268066406
    9. 'rem' → logprob: -6.498512268066406
    10. 'd' → logprob: -6.748512268066406

Token 166: ' g' (ID: 329)
  Prédit: ' rem'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' rem' → logprob: -0.1408608853816986
    2. 'rem' → logprob: -2.8908607959747314
    3. ' c' → logprob: -3.7658607959747314
    4. '(rem' → logprob: -4.0158610343933105
    5. ' (' → logprob: -4.5158610343933105
    6. 'c' → logprob: -4.7658610343933105
    7. ' d' → logprob: -5.5158610343933105
    8. ' g' → logprob: -5.8908610343933105
    9. ' b' → logprob: -6.3908610343933105
    10. 'd' → logprob: -6.3908610343933105

Token 167: ' ==' (ID: 951)
  Prédit: ' =='
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' ==' → logprob: -0.4152228832244873
    2. ' >' → logprob: -1.5402228832244873
    3. '==' → logprob: -3.0402228832244873
    4. ' !=' → logprob: -3.0402228832244873
    5. ':' → logprob: -4.540223121643066
    6. '>' → logprob: -4.540223121643066
    7. '<|end|>' → logprob: -5.915223121643066
    8. '!=' → logprob: -6.915223121643066
    9. '<|end|>' → logprob: -7.040223121643066
    10. ' <=' → logprob: -7.165223121643066

Token 168: ' ' (ID: 220)
  Prédit: '0'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '0' → logprob: -0.04606430232524872
    2. ' ' → logprob: -3.4210643768310547
    3. '1' → logprob: -4.421064376831055
    4. 'rem' → logprob: -9.296064376831055
    5. 'b' → logprob: -9.421064376831055
    6. 'd' → logprob: -9.546064376831055
    7. ' b' → logprob: -10.296064376831055
    8. ' rem' → logprob: -10.921064376831055
    9. ' d' → logprob: -11.296064376831055
    10. '  ' → logprob: -13.671064376831055

Token 169: '1' (ID: 16)
  Prédit: '0'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '0' → logprob: -0.011995641514658928
    2. '1' → logprob: -4.761995792388916
    3. 'rem' → logprob: -6.386995792388916
    4. 'b' → logprob: -7.261995792388916
    5. 'd' → logprob: -7.636995792388916
    6. ' ' → logprob: -7.761995792388916
    7. 'c' → logprob: -11.261995315551758
    8. 'g' → logprob: -11.261995315551758
    9. '2' → logprob: -11.574495315551758
    10. '-' → logprob: -12.324495315551758

Token 170: ':
' (ID: 734)
  Prédit: ':'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ':' → logprob: -0.018444780260324478
    2. ' and' → logprob: -4.143445014953613
    3. ':
' → logprob: -7.018445014953613
    4. ':return' → logprob: -7.393445014953613
    5. ' or' → logprob: -7.643445014953613
    6. ' :' → logprob: -8.768445014953613
    7. '<|end|>' → logprob: -9.268445014953613
    8. 'and' → logprob: -9.393445014953613
    9. '):' → logprob: -10.518445014953613
    10. ',' → logprob: -10.893445014953613

Token 171: '           ' (ID: 352)
  Prédit: ':'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ':' → logprob: -0.23589858412742615
    2. '           ' → logprob: -1.8608986139297485
    3. '<|end|>' → logprob: -3.860898494720459
    4. ':return' → logprob: -4.485898494720459
    5. ' :' → logprob: -5.110898494720459
    6. '       ' → logprob: -5.610898494720459
    7. ' ' → logprob: -5.610898494720459
    8. ' return' → logprob: -5.985898494720459
    9. ':
' → logprob: -6.235898494720459
    10. ' and' → logprob: -7.235898494720459

Token 172: ' #' (ID: 1069)
  Prédit: 'return'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'return' → logprob: -0.16070479154586792
    2. ' return' → logprob: -2.0357048511505127
    3. 'if' → logprob: -4.660704612731934
    4. ' if' → logprob: -5.285704612731934
    5. '       ' → logprob: -6.160704612731934
    6. '           ' → logprob: -6.910704612731934
    7. ' ' → logprob: -9.660704612731934
    8. '   ' → logprob: -10.410704612731934
    9. '	return' → logprob: -10.785704612731934
    10. ':return' → logprob: -10.785704612731934

Token 173: ' h' (ID: 312)
  Prédit: 'return'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'return' → logprob: -0.4771798849105835
    2. ' return' → logprob: -0.9771798849105835
    3. ' if' → logprob: -7.227180004119873
    4. '       ' → logprob: -7.227180004119873
    5. 'if' → logprob: -7.352180004119873
    6. '#' → logprob: -7.977180004119873
    7. ' pass' → logprob: -8.727179527282715
    8. '           ' → logprob: -9.102179527282715
    9. ' #' → logprob: -9.602179527282715
    10. 'pass' → logprob: -9.852179527282715

Token 174: 'mmm' (ID: 66800)
  Prédit: ' ='
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' =' → logprob: -0.9008839726448059
    2. '       ' → logprob: -1.4008839130401611
    3. '           ' → logprob: -2.275883913040161
    4. '=' → logprob: -2.650883913040161
    5. 'return' → logprob: -3.400883913040161
    6. ')' → logprob: -3.650883913040161
    7. ':' → logprob: -3.900883913040161
    8. 'ere' → logprob: -4.02588415145874
    9. '#' → logprob: -4.27588415145874
    10. 'else' → logprob: -4.40088415145874

Token 175: ',' (ID: 11)
  Prédit: '           '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '           ' → logprob: -0.976080060005188
    2. ' return' → logprob: -0.976080060005188
    3. ':' → logprob: -2.3510799407958984
    4. 'return' → logprob: -2.7260799407958984
    5. '               ' → logprob: -3.2260799407958984
    6. '       ' → logprob: -4.351079940795898
    7. ':return' → logprob: -4.476079940795898
    8. '<|end|>' → logprob: -5.101079940795898
    9. ')' → logprob: -5.601079940795898
    10. ',' → logprob: -6.101079940795898

Token 176: ' c' (ID: 274)
  Prédit: ' return'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' return' → logprob: -0.4875672161579132
    2. 'return' → logprob: -0.9875671863555908
    3. ' if' → logprob: -5.11256742477417
    4. '       ' → logprob: -5.36256742477417
    5. '           ' → logprob: -6.48756742477417
    6. 'if' → logprob: -6.98756742477417
    7. ' ' → logprob: -8.987566947937012
    8. ' ' → logprob: -10.987566947937012
    9. '   ' → logprob: -10.987566947937012
    10. '	return' → logprob: -11.362566947937012

Token 177: ''est' (ID: 6616)
  Prédit: ''est'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ''est' → logprob: -0.14367640018463135
    2. 'est' → logprob: -4.018676280975342
    3. ' =' → logprob: -4.393676280975342
    4. '=' → logprob: -4.518676280975342
    5. 'ont' → logprob: -4.643676280975342
    6. ''' → logprob: -4.643676280975342
    7. ''s' → logprob: -4.893676280975342
    8. '#' → logprob: -5.018676280975342
    9. 'ertain' → logprob: -5.018676280975342
    10. 'ould' → logprob: -5.018676280975342

Token 178: ' ça' (ID: 13590)
  Prédit: '"'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '"' → logprob: -1.4895100593566895
    2. ' impossible' → logprob: -1.8645100593566895
    3. ' pas' → logprob: -2.8645100593566895
    4. 'b' → logprob: -2.8645100593566895
    5. ' True' → logprob: -2.9895100593566895
    6. ' not' → logprob: -2.9895100593566895
    7. ' return' → logprob: -3.1145100593566895
    8. 'pas' → logprob: -3.4895100593566895
    9. ' OK' → logprob: -3.8645100593566895
    10. 'rem' → logprob: -3.9895100593566895

Token 179: ' la' (ID: 557)
  Prédit: '           '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '           ' → logprob: -0.9790892601013184
    2. ' return' → logprob: -1.3540892601013184
    3. 'return' → logprob: -1.8540892601013184
    4. '       ' → logprob: -1.9790892601013184
    5. ')' → logprob: -3.7290892601013184
    6. '               ' → logprob: -4.229089260101318
    7. '   ' → logprob: -4.854089260101318
    8. ':' → logprob: -5.354089260101318
    9. '<|end|>' → logprob: -5.729089260101318
    10. ' ' → logprob: -5.854089260101318

Token 180: ' condition' (ID: 7060)
  Prédit: 'suite'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'suite' → logprob: -1.393046498298645
    2. 'fin' → logprob: -1.768046498298645
    3. ' logique' → logprob: -2.6430463790893555
    4. 'solution' → logprob: -2.8930463790893555
    5. 'fraction' → logprob: -3.2680463790893555
    6. 'b' → logprob: -3.2680463790893555
    7. 'rem' → logprob: -3.3930463790893555
    8. 'best' → logprob: -3.7680463790893555
    9. 'v' → logprob: -3.8930463790893555
    10. 'return' → logprob: -4.0180463790893555

Token 181: ' ?
' (ID: 19740)
  Prédit: '           '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '           ' → logprob: -0.1500847488641739
    2. '       ' → logprob: -2.5250847339630127
    3. 'return' → logprob: -4.150084972381592
    4. ' return' → logprob: -4.650084972381592
    5. '               ' → logprob: -4.650084972381592
    6. ':' → logprob: -4.775084972381592
    7. ' if' → logprob: -5.400084972381592
    8. '<|end|>' → logprob: -6.150084972381592
    9. '   ' → logprob: -6.525084972381592
    10. '?' → logprob: -6.525084972381592

Token 182: '           ' (ID: 352)
  Prédit: '           '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '           ' → logprob: -1.2288435697555542
    2. ':' → logprob: -1.6038435697555542
    3. '       ' → logprob: -2.1038436889648438
    4. ' ' → logprob: -2.1038436889648438
    5. '<|end|>' → logprob: -2.1038436889648438
    6. ' return' → logprob: -2.8538436889648438
    7. '               ' → logprob: -3.7288436889648438
    8. ':return' → logprob: -3.9788436889648438
    9. 'return' → logprob: -4.478843688964844
    10. '        ' → logprob: -5.228843688964844

Token 183: ' if' (ID: 538)
  Prédit: ' return'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' return' → logprob: -0.8133364319801331
    2. 'return' → logprob: -0.8133364319801331
    3. ' if' → logprob: -2.8133363723754883
    4. 'if' (adapté à ' if') → logprob: -2.9383363723754883
    5. '       ' → logprob: -9.063336372375488
    6. '           ' → logprob: -9.563336372375488
    7. ' ' → logprob: -10.688336372375488
    8. 'Yes' → logprob: -10.938336372375488
    9. 'If' → logprob: -11.188336372375488
    10. '   ' → logprob: -11.563336372375488

Token 184: ' b' (ID: 287)
  Prédit: ' rem'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' rem' → logprob: -0.1905497908592224
    2. ' c' → logprob: -2.440549850463867
    3. 'rem' → logprob: -3.315549850463867
    4. 'c' → logprob: -4.065549850463867
    5. ' (' → logprob: -4.815549850463867
    6. ' d' → logprob: -4.940549850463867
    7. ' a' → logprob: -5.065549850463867
    8. '(rem' → logprob: -5.440549850463867
    9. 'a' → logprob: -6.190549850463867
    10. 'd' → logprob: -6.565549850463867

Token 185: ' -' (ID: 533)
  Prédit: ' %'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' %' → logprob: -0.66351717710495
    2. ' <=' → logprob: -1.6635172367095947
    3. '%' → logprob: -2.0385172367095947
    4. '<=' → logprob: -2.5385172367095947
    5. ' >' → logprob: -3.9135172367095947
    6. '>' → logprob: -4.038516998291016
    7. ' ==' → logprob: -4.413516998291016
    8. '==' → logprob: -4.538516998291016
    9. '*' → logprob: -5.288516998291016
    10. ' *' → logprob: -5.288516998291016

Token 186: ' ' (ID: 220)
  Prédit: 'rem'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'rem' → logprob: -0.05145542323589325
    2. ' rem' → logprob: -3.676455497741699
    3. 'c' → logprob: -3.801455497741699
    4. 'd' → logprob: -6.426455497741699
    5. 'a' → logprob: -8.3014554977417
    6. 'g' → logprob: -8.4264554977417
    7. ' c' → logprob: -9.0514554977417
    8. '(rem' → logprob: -9.0514554977417
    9. '1' → logprob: -10.1764554977417
    10. 'reman' → logprob: -10.5514554977417

Token 187: '1' (ID: 16)
  Prédit: 'rem'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'rem' → logprob: -0.017590103670954704
    2. 'c' → logprob: -4.267590045928955
    3. 'd' → logprob: -6.267590045928955
    4. ' rem' → logprob: -7.642590045928955
    5. '1' → logprob: -8.017590522766113
    6. 'a' → logprob: -8.142590522766113
    7. 'g' → logprob: -8.142590522766113
    8. '(rem' → logprob: -9.392590522766113
    9. 'reman' → logprob: -12.142590522766113
    10. 're' → logprob: -12.205090522766113

Token 188: ' >' (ID: 1424)
  Prédit: ' <='
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' <=' → logprob: -0.1582901030778885
    2. '<=' → logprob: -2.533290147781372
    3. ' >=' → logprob: -3.783290147781372
    4. ' >' → logprob: -3.908290147781372
    5. '>' → logprob: -4.908289909362793
    6. ' ==' → logprob: -5.408289909362793
    7. '>=' → logprob: -5.533289909362793
    8. ' <' → logprob: -5.658289909362793
    9. '==' → logprob: -6.033289909362793
    10. ' ' → logprob: -6.658289909362793

Token 189: ' c' (ID: 274)
  Prédit: ' rem'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' rem' → logprob: -0.06050378084182739
    2. 'rem' → logprob: -3.0605037212371826
    3. ' a' → logprob: -5.435503959655762
    4. ' c' → logprob: -5.435503959655762
    5. ' d' → logprob: -6.935503959655762
    6. 'a' → logprob: -7.185503959655762
    7. 'c' → logprob: -7.935503959655762
    8. 'd' → logprob: -8.185503959655762
    9. ' ' → logprob: -8.560503959655762
    10. '(rem' → logprob: -8.560503959655762

Token 190: ':
' (ID: 734)
  Prédit: ':'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ':' → logprob: -0.10749750584363937
    2. ' and' → logprob: -3.107497453689575
    3. ' or' → logprob: -3.982497453689575
    4. '<|end|>' → logprob: -4.357497692108154
    5. '):' → logprob: -4.732497692108154
    6. ' :' → logprob: -5.107497692108154
    7. ' -' → logprob: -5.982497692108154
    8. ' ' → logprob: -6.107497692108154
    9. 'and' → logprob: -6.732497692108154
    10. ')' → logprob: -6.857497692108154

Token 191: '               ' (ID: 506)
  Prédit: ':'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ':' → logprob: -0.09478376805782318
    2. ':return' → logprob: -2.8447837829589844
    3. '<|end|>' → logprob: -4.719783782958984
    4. ':
' → logprob: -4.969783782958984
    5. ' :' → logprob: -5.094783782958984
    6. '       ' → logprob: -5.469783782958984
    7. ')' → logprob: -6.594783782958984
    8. ' return' → logprob: -6.594783782958984
    9. '           ' → logprob: -6.844783782958984
    10. ' :
' → logprob: -7.969783782958984

Token 192: ' return' (ID: 622)
  Prédit: 'return'
  Correct (stricte): False
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'return' (adapté à ' return') → logprob: -0.6020432114601135
    2. ' return' → logprob: -0.8520432114601135
    3. '           ' → logprob: -4.352043151855469
    4. '               ' → logprob: -4.727043151855469
    5. '                   ' → logprob: -5.977043151855469
    6. '	return' → logprob: -6.852043151855469
    7. '   ' → logprob: -9.102043151855469
    8. '       ' → logprob: -9.227043151855469
    9. ' ' → logprob: -9.352043151855469
    10. ':return' → logprob: -10.352043151855469

Token 193: ' "' (ID: 392)
  Prédit: ' "'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' "' → logprob: -0.2950727939605713
    2. '"' → logprob: -1.5450727939605713
    3. '"No' → logprob: -3.1700727939605713
    4. ''' → logprob: -9.420072555541992
    5. ' ' → logprob: -10.170072555541992
    6. 'No' → logprob: -10.420072555541992
    7. ' ' → logprob: -10.420072555541992
    8. ' '' → logprob: -11.795072555541992
    9. ' No' → logprob: -11.795072555541992
    10. ' ""' → logprob: -12.232572555541992

Token 194: 'No' (ID: 3160)
  Prédit: 'No'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'No' → logprob: -0.03957752510905266
    2. 'Yes' → logprob: -3.2895774841308594
    3. '"' → logprob: -7.289577484130859
    4. '"No' → logprob: -7.289577484130859
    5. ' No' → logprob: -9.03957748413086
    6. 'Oui' → logprob: -11.53957748413086
    7. ' Yes' → logprob: -12.10207748413086
    8. 'Impossible' → logprob: -12.72707748413086
    9. 'N' → logprob: -12.91457748413086
    10. 'NO' → logprob: -13.16457748413086

Token 195: '"
' (ID: 1092)
  Prédit: '"'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '"' → logprob: -0.0009817203972488642
    2. '"
' → logprob: -7.87598180770874
    3. ')' → logprob: -8.125981330871582
    4. ')"' → logprob: -9.125981330871582
    5. '```' → logprob: -9.875981330871582
    6. '<|end|>' → logprob: -10.000981330871582
    7. ' "' → logprob: -10.375981330871582
    8. '\n' → logprob: -11.000981330871582
    9. '   ' → logprob: -11.625981330871582
    10. '       ' → logprob: -11.875981330871582

Token 196: '       ' (ID: 309)
  Prédit: ''
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False

Token 197: ' elif' (ID: 9497)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ')' → logprob: -0.24799662828445435
    2. '<|end|>' → logprob: -1.8729965686798096
    3. ':' → logprob: -3.1229965686798096
    4. '+' → logprob: -5.622996807098389
    5. ':return' → logprob: -5.872996807098389
    6. ' else' → logprob: -6.122996807098389
    7. '   ' → logprob: -6.247996807098389
    8. 'else' → logprob: -6.622996807098389
    9. '<|end|>' → logprob: -6.747996807098389
    10. '       ' → logprob: -6.747996807098389

Token 198: ' g' (ID: 329)
  Prédit: ' g'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' g' → logprob: -0.5636171102523804
    2. ' b' → logprob: -1.6886171102523804
    3. ' d' → logprob: -2.56361722946167
    4. ' c' → logprob: -2.56361722946167
    5. 'g' → logprob: -3.56361722946167
    6. ' fractions' → logprob: -4.31361722946167
    7. 'b' → logprob: -4.56361722946167
    8. 'd' → logprob: -4.81361722946167
    9. ' True' → logprob: -4.81361722946167
    10. ' False' → logprob: -5.43861722946167

Token 199: ' ==' (ID: 951)
  Prédit: ' =='
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' ==' → logprob: -0.15703894197940826
    2. ' >' → logprob: -2.282038927078247
    3. '==' → logprob: -3.657038927078247
    4. ' !=' → logprob: -5.407039165496826
    5. ' <' → logprob: -5.532039165496826
    6. '>' → logprob: -5.657039165496826
    7. ':' → logprob: -6.157039165496826
    8. ' ' → logprob: -7.282039165496826
    9. ')' → logprob: -7.282039165496826
    10. ' not' → logprob: -7.657039165496826

Token 200: ' b' (ID: 287)
  Prédit: ' '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' ' → logprob: -1.0178213119506836
    2. ' d' → logprob: -1.3928213119506836
    3. 'd' → logprob: -2.1428213119506836
    4. ' b' → logprob: -2.1428213119506836
    5. 'b' → logprob: -2.7678213119506836
    6. '2' → logprob: -3.1428213119506836
    7. ' c' → logprob: -4.267821311950684
    8. '0' → logprob: -4.267821311950684
    9. 'c' → logprob: -4.892821311950684
    10. '1' → logprob: -4.892821311950684

Token 201: ':
' (ID: 734)
  Prédit: ':'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ':' → logprob: -0.00038693982060067356
    2. ':
' → logprob: -8.375387191772461
    3. ' :' → logprob: -9.250387191772461
    4. '):' → logprob: -9.875387191772461
    5. ')' → logprob: -12.750387191772461
    6. ' and' → logprob: -13.375387191772461
    7. ':return' → logprob: -13.500387191772461
    8. ',' → logprob: -13.875387191772461
    9. ' or' → logprob: -14.000387191772461
    10. ':

' → logprob: -15.125387191772461

Token 202: '           ' (ID: 352)
  Prédit: ':'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ':' → logprob: -0.11081185191869736
    2. ':
' → logprob: -2.735811948776245
    3. '       ' → logprob: -3.985811948776245
    4. '           ' → logprob: -4.360811710357666
    5. ':return' → logprob: -4.985811710357666
    6. ' :' → logprob: -7.860811710357666
    7. ' return' → logprob: -8.485812187194824
    8. 'return' → logprob: -8.610812187194824
    9. '<|end|>' → logprob: -8.610812187194824
    10. ' or' → logprob: -8.985812187194824

Token 203: ' if' (ID: 538)
  Prédit: 'return'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'return' → logprob: -0.06745442748069763
    2. ' return' → logprob: -3.3174543380737305
    3. '       ' → logprob: -3.6924543380737305
    4. 'if' (adapté à ' if') → logprob: -6.1924543380737305
    5. '           ' → logprob: -6.4424543380737305
    6. ' if' → logprob: -8.19245433807373
    7. '	return' → logprob: -9.81745433807373
    8. '   ' → logprob: -10.06745433807373
    9. ':return' → logprob: -10.94245433807373
    10. ' ' → logprob: -11.44245433807373

Token 204: ' rem' (ID: 1662)
  Prédit: ' c'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' c' → logprob: -0.8377392888069153
    2. ' a' → logprob: -1.8377392292022705
    3. ' d' → logprob: -2.2127392292022705
    4. 'c' → logprob: -2.3377392292022705
    5. ' rem' → logprob: -2.7127392292022705
    6. 'a' → logprob: -2.9627392292022705
    7. 'd' → logprob: -3.5877392292022705
    8. ' b' → logprob: -3.8377392292022705
    9. ' (' → logprob: -4.08773946762085
    10. 'rem' → logprob: -5.21273946762085

Token 205: ' >' (ID: 1424)
  Prédit: ' !='
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' !=' → logprob: -0.2688494622707367
    2. '!=' → logprob: -2.2688493728637695
    3. ' >' → logprob: -3.1438493728637695
    4. ' <' → logprob: -3.5188493728637695
    5. ' ==' → logprob: -3.6438493728637695
    6. '==' → logprob: -4.5188493728637695
    7. ' >=' → logprob: -5.0188493728637695
    8. '>' → logprob: -5.0188493728637695
    9. '<' → logprob: -5.7688493728637695
    10. ' ' → logprob: -5.8938493728637695

Token 206: ' c' (ID: 274)
  Prédit: ' c'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' c' → logprob: -0.6883509755134583
    2. 'c' → logprob: -1.0633509159088135
    3. '0' → logprob: -2.3133509159088135
    4. 'd' → logprob: -3.9383509159088135
    5. ' ' → logprob: -3.9383509159088135
    6. ' d' → logprob: -4.438351154327393
    7. 'a' → logprob: -7.188351154327393
    8. ' a' → logprob: -7.813351154327393
    9. '=' → logprob: -8.125850677490234
    10. 'b' → logprob: -8.563350677490234

Token 207: ':
' (ID: 734)
  Prédit: ':'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ':' → logprob: -0.024589840322732925
    2. ':
' → logprob: -3.774589776992798
    3. ':return' → logprob: -7.149590015411377
    4. '           ' → logprob: -7.899590015411377
    5. ' :' → logprob: -9.274589538574219
    6. '       ' → logprob: -10.024589538574219
    7. '               ' → logprob: -11.524589538574219
    8. ' or' → logprob: -11.649589538574219
    9. ' :
' → logprob: -11.774589538574219
    10. ':

' → logprob: -11.899589538574219

Token 208: '               ' (ID: 506)
  Prédit: '           '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '           ' → logprob: -0.37741172313690186
    2. '               ' → logprob: -1.7524117231369019
    3. ':' → logprob: -2.3774118423461914
    4. ':
' → logprob: -3.7524118423461914
    5. ':return' → logprob: -4.127411842346191
    6. '       ' → logprob: -5.252411842346191
    7. ' return' → logprob: -6.252411842346191
    8. 'return' → logprob: -7.002411842346191
    9. '   ' → logprob: -9.252411842346191
    10. ' or' → logprob: -9.502411842346191

Token 209: ' return' (ID: 622)
  Prédit: ' return'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' return' → logprob: -0.07928334176540375
    2. 'return' (adapté à ' return') → logprob: -2.5792832374572754
    3. '           ' → logprob: -8.579283714294434
    4. '               ' → logprob: -9.329283714294434
    5. ' ' → logprob: -9.454283714294434
    6. '	return' → logprob: -11.579283714294434
    7. ':return' → logprob: -12.079283714294434
    8. '       ' → logprob: -12.204283714294434
    9. '                   ' → logprob: -12.329283714294434
    10. '   ' → logprob: -12.454283714294434

Token 210: ' "' (ID: 392)
  Prédit: '"No'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '"No' → logprob: -0.367779403924942
    2. '"' → logprob: -1.4927793741226196
    3. ' "' → logprob: -2.492779493331909
    4. ' ' → logprob: -8.992779731750488
    5. ''' → logprob: -9.367779731750488
    6. '	' → logprob: -10.367779731750488
    7. 'No' → logprob: -10.867779731750488
    8. ' ' → logprob: -11.492779731750488
    9. ' No' → logprob: -11.617779731750488
    10. '  ' → logprob: -12.742779731750488

Token 211: 'No' (ID: 3160)
  Prédit: 'No'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'No' → logprob: -0.0008404768304899335
    2. '"No' → logprob: -7.625840663909912
    3. 'Yes' → logprob: -8.250840187072754
    4. '"' → logprob: -9.500840187072754
    5. ' No' → logprob: -11.250840187072754
    6. ''' → logprob: -13.250840187072754
    7. 'N' → logprob: -14.500840187072754
    8. '_No' → logprob: -15.750840187072754
    9. '.No' → logprob: -16.00084114074707
    10. 'NO' → logprob: -16.12584114074707

Token 212: '"
' (ID: 1092)
  Prédit: '"'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '"' → logprob: -0.05486716330051422
    2. '       ' → logprob: -3.5548672676086426
    3. '   ' → logprob: -4.054867267608643
    4. ')' → logprob: -5.429867267608643
    5. '"
' → logprob: -6.554867267608643
    6. ')"' → logprob: -7.679867267608643
    7. '```' → logprob: -7.929867267608643
    8. '           ' → logprob: -8.804866790771484
    9. '
' → logprob: -8.804866790771484
    10. '")' → logprob: -9.304866790771484

Token 213: '       ' (ID: 309)
  Prédit: ''
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False

Token 214: ' else' (ID: 1203)
  Prédit: 'else'
  Correct (stricte): False
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'else' (adapté à ' else') → logprob: -0.5778259038925171
    2. ' else' → logprob: -0.9528259038925171
    3. '   ' → logprob: -3.0778260231018066
    4. '	else' → logprob: -6.327826023101807
    5. ':' → logprob: -6.452826023101807
    6. 'return' → logprob: -7.077826023101807
    7. '       ' → logprob: -7.077826023101807
    8. ')' → logprob: -7.202826023101807
    9. ':return' → logprob: -7.702826023101807
    10. 'elif' → logprob: -8.452825546264648

Token 215: ':
' (ID: 734)
  Prédit: ':'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ':' → logprob: -0.0094316266477108
    2. ':
' → logprob: -5.759431838989258
    3. '       ' → logprob: -6.134431838989258
    4. ' :' → logprob: -6.384431838989258
    5. '           ' → logprob: -6.509431838989258
    6. ':return' → logprob: -7.884431838989258
    7. ' if' → logprob: -8.384431838989258
    8. '{' → logprob: -9.634431838989258
    9. ' :
' → logprob: -10.134431838989258
    10. '        ' → logprob: -10.259431838989258

Token 216: '           ' (ID: 352)
  Prédit: ' if'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' if' → logprob: -0.8074331283569336
    2. '       ' → logprob: -1.1824331283569336
    3. ' return' → logprob: -1.8074331283569336
    4. 'return' → logprob: -3.1824331283569336
    5. 'if' → logprob: -3.5574331283569336
    6. '           ' → logprob: -4.432433128356934
    7. ' #' → logprob: -8.307433128356934
    8. ' g' → logprob: -8.432433128356934
    9. '#' → logprob: -8.557433128356934
    10. 'g' → logprob: -8.557433128356934

Token 217: ' if' (ID: 538)
  Prédit: ' if'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' if' → logprob: -0.8029420971870422
    2. 'g' → logprob: -1.4279420375823975
    3. 'if' (adapté à ' if') → logprob: -2.1779420375823975
    4. ' g' → logprob: -2.5529420375823975
    5. ' return' → logprob: -2.9279420375823975
    6. 'return' → logprob: -4.052942276000977
    7. 'h' → logprob: -4.177942276000977
    8. ' pass' → logprob: -5.677942276000977
    9. ' h' → logprob: -5.802942276000977
    10. 'x' → logprob: -5.802942276000977

Token 218: ' (' (ID: 350)
  Prédit: ' rem'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' rem' → logprob: -0.29557767510414124
    2. 'rem' → logprob: -1.9205776453018188
    3. 'c' → logprob: -3.6705777645111084
    4. ' c' → logprob: -3.6705777645111084
    5. '(rem' → logprob: -4.295577526092529
    6. ' (' → logprob: -4.795577526092529
    7. ' b' → logprob: -4.920577526092529
    8. 'd' → logprob: -5.045577526092529
    9. 'b' → logprob: -5.045577526092529
    10. ' d' → logprob: -5.170577526092529

Token 219: 'b' (ID: 65)
  Prédit: 'rem'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'rem' → logprob: -0.6306527853012085
    2. 'c' → logprob: -1.5056527853012085
    3. ' rem' → logprob: -2.380652904510498
    4. '(rem' → logprob: -2.755652904510498
    5. 'b' → logprob: -3.255652904510498
    6. 'd' → logprob: -4.380652904510498
    7. '(c' → logprob: -4.505652904510498
    8. ' c' → logprob: -4.630652904510498
    9. 'a' → logprob: -4.880652904510498
    10. '(b' → logprob: -5.380652904510498

Token 220: ' -' (ID: 533)
  Prédit: ' -'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' -' → logprob: -0.17634113132953644
    2. '-' → logprob: -2.0513410568237305
    3. ' %' → logprob: -3.5513410568237305
    4. '%' → logprob: -5.9263410568237305
    5. ')' → logprob: -6.9263410568237305
    6. ' ' → logprob: -7.5513410568237305
    7. '>' → logprob: -10.05134105682373
    8. '*' → logprob: -10.05134105682373
    9. ' )' → logprob: -10.80134105682373
    10. ' *' → logprob: -10.92634105682373

Token 221: ' g' (ID: 329)
  Prédit: 'g'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'g' → logprob: -0.07410616427659988
    2. ' g' → logprob: -3.574106216430664
    3. '1' → logprob: -3.949106216430664
    4. 'rem' → logprob: -4.699106216430664
    5. 'c' → logprob: -5.074106216430664
    6. 'd' → logprob: -5.074106216430664
    7. ' rem' → logprob: -6.824106216430664
    8. ' ' → logprob: -7.574106216430664
    9. ' d' → logprob: -8.074106216430664
    10. ' c' → logprob: -8.199106216430664

Token 222: ')' (ID: 8)
  Prédit: ')'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')' → logprob: -0.007073147688060999
    2. ' )' → logprob: -5.382072925567627
    3. '>' → logprob: -6.257072925567627
    4. ' >' → logprob: -8.132073402404785
    5. ')>' → logprob: -8.632073402404785
    6. '-' → logprob: -10.757073402404785
    7. '+' → logprob: -11.632073402404785
    8. ' -' → logprob: -11.882073402404785
    9. ')!=' → logprob: -12.257073402404785
    10. '   ' → logprob: -12.632073402404785

Token 223: ' >' (ID: 1424)
  Prédit: ' >'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' >' → logprob: -0.57817542552948
    2. '>' → logprob: -0.82817542552948
    3. ')' → logprob: -6.8281755447387695
    4. '+' → logprob: -7.8281755447387695
    5. ' +' → logprob: -8.70317554473877
    6. '-' → logprob: -8.82817554473877
    7. ' <=' → logprob: -9.20317554473877
    8. ' -' → logprob: -9.20317554473877
    9. ')>' → logprob: -9.45317554473877
    10. ' ' → logprob: -9.95317554473877

Token 224: ' c' (ID: 274)
  Prédit: ' c'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' c' → logprob: -0.28120964765548706
    2. 'c' → logprob: -1.4062097072601318
    3. '(c' → logprob: -10.781209945678711
    4. ' ' → logprob: -11.156209945678711
    5. '	c' → logprob: -12.156209945678711
    6. ' ' → logprob: -12.156209945678711
    7. ' (' → logprob: -12.531209945678711
    8. '(' → logprob: -13.031209945678711
    9. ')c' → logprob: -13.281209945678711
    10. '0' → logprob: -13.843709945678711

Token 225: ':
' (ID: 734)
  Prédit: ':'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ':' → logprob: -0.007033262401819229
    2. ':
' → logprob: -5.757033348083496
    3. ' or' → logprob: -6.632033348083496
    4. ':return' → logprob: -6.632033348083496
    5. ' and' → logprob: -7.257033348083496
    6. '       ' → logprob: -8.632033348083496
    7. '):' → logprob: -8.882033348083496
    8. '           ' → logprob: -10.132033348083496
    9. 'and' → logprob: -10.257033348083496
    10. ')' → logprob: -10.382033348083496

Token 226: '               ' (ID: 506)
  Prédit: '               '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '               ' → logprob: -0.23271583020687103
    2. '           ' → logprob: -1.9827158451080322
    3. ':' → logprob: -3.6077158451080322
    4. ':return' → logprob: -4.107715606689453
    5. '       ' → logprob: -4.482715606689453
    6. ':
' → logprob: -4.857715606689453
    7. '<|end|>' → logprob: -5.232715606689453
    8. '):
' → logprob: -8.232715606689453
    9. ' return' → logprob: -8.357715606689453
    10. ')' → logprob: -8.607715606689453

Token 227: ' return' (ID: 622)
  Prédit: ' return'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' return' → logprob: -0.38972675800323486
    2. 'return' (adapté à ' return') → logprob: -1.1397267580032349
    3. ' No' → logprob: -6.389726638793945
    4. 'No' → logprob: -6.889726638793945
    5. '"' → logprob: -8.889726638793945
    6. ' ' → logprob: -12.264726638793945
    7. '"No' → logprob: -12.889726638793945
    8. ' 
' → logprob: -13.139726638793945
    9. ' "' → logprob: -13.389726638793945
    10. '	return' → logprob: -13.514726638793945

Token 228: ' "' (ID: 392)
  Prédit: '"No'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '"No' → logprob: -0.0025124046951532364
    2. '"' → logprob: -6.377512454986572
    3. ' "' → logprob: -7.127512454986572
    4. 'No' → logprob: -12.127511978149414
    5. ' No' → logprob: -14.377511978149414
    6. ''' → logprob: -14.877511978149414
    7. '	' → logprob: -15.002511978149414
    8. ' ' → logprob: -15.502511978149414
    9. '("' → logprob: -16.127511978149414
    10. '“No' → logprob: -16.377511978149414

Token 229: 'No' (ID: 3160)
  Prédit: 'No'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'No' → logprob: -6.153795766294934e-06
    2. '"No' → logprob: -12.500005722045898
    3. ' No' → logprob: -14.000005722045898
    4. '"' → logprob: -14.125005722045898
    5. 'Yes' → logprob: -14.250005722045898
    6. 'N' → logprob: -17.1250057220459
    7. '_No' → logprob: -18.8750057220459
    8. 'n' → logprob: -19.1250057220459
    9. '```' → logprob: -19.3750057220459
    10. 'Non' → logprob: -19.5000057220459

Token 230: '"
' (ID: 1092)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.19653315842151642
    2. ')' → logprob: -1.821533203125
    3. ')
' → logprob: -4.821533203125
    4. '       ' → logprob: -6.196533203125
    5. 'return' → logprob: -6.946533203125
    6. ':
' → logprob: -7.071533203125
    7. '
' → logprob: -7.196533203125
    8. '           ' → logprob: -7.321533203125
    9. '\n' → logprob: -7.571533203125
    10. ':return' → logprob: -7.571533203125

Token 231: '   ' (ID: 271)
  Prédit: ''
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False

Token 232: ' return' (ID: 622)
  Prédit: ':'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ':' → logprob: -0.9757890105247498
    2. '   ' → logprob: -1.1007890701293945
    3. ')' → logprob: -1.8507890701293945
    4. '<|end|>' → logprob: -2.7257890701293945
    5. ':return' → logprob: -3.2257890701293945
    6. '	return' → logprob: -5.1007890701293945
    7. ' return' → logprob: -5.6007890701293945
    8. ' :' → logprob: -5.6007890701293945
    9. ' ' → logprob: -5.8507890701293945
    10. 'return' (adapté à ' return') → logprob: -6.4757890701293945

Token 233: ' "' (ID: 392)
  Prédit: '"'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '"' → logprob: -0.015227288007736206
    2. ' "' → logprob: -4.890227317810059
    3. '"No' → logprob: -4.890227317810059
    4. ''' → logprob: -9.765227317810059
    5. 'Yes' → logprob: -12.515227317810059
    6. '"I' → logprob: -13.015227317810059
    7. '	' → logprob: -13.265227317810059
    8. ' ' → logprob: -13.515227317810059
    9. ' ' → logprob: -13.640227317810059
    10. '   ' → logprob: -14.015227317810059

Token 234: 'Yes' (ID: 13022)
  Prédit: 'Yes'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'Yes' → logprob: -8.792751032160595e-05
    2. '"' → logprob: -9.50008773803711
    3. 'Oui' → logprob: -11.37508773803711
    4. 'No' → logprob: -14.37508773803711
    5. 'Ye' → logprob: -15.12508773803711
    6. ''' → logprob: -15.37508773803711
    7. 'YES' → logprob: -15.75008773803711
    8. 'Ok' → logprob: -16.62508773803711
    9. ' Yes' → logprob: -16.87508773803711
    10. 'O' → logprob: -17.87508773803711

Token 235: '"

' (ID: 2678)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ')' → logprob: -0.020280256867408752
    2. '<|end|>' → logprob: -4.020280361175537
    3. '()' → logprob: -7.020280361175537
    4. '(' → logprob: -8.270279884338379
    5. '<|end|>' → logprob: -8.270279884338379
    6. '
' → logprob: -8.395279884338379
    7. '\n' → logprob: -9.520279884338379
    8. ')
' → logprob: -9.645279884338379
    9. '")' → logprob: -9.895279884338379
    10. '```' → logprob: -10.270279884338379

Token 236: '#' (ID: 2)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '(' → logprob: -0.8389508128166199
    2. '.' → logprob: -1.2139508724212646
    3. '.f' → logprob: -2.2139508724212646
    4. ')' → logprob: -2.7139508724212646
    5. ',' → logprob: -3.5889508724212646
    6. '()' → logprob: -4.0889506340026855
    7. '.g' → logprob: -4.8389506340026855
    8. '<|end|>' → logprob: -4.8389506340026855
    9. '(f' → logprob: -5.0889506340026855
    10. 'f' → logprob: -5.7139506340026855

Token 237: ' On' (ID: 2160)
  Prédit: '.'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '.' → logprob: -0.3407954275608063
    2. '.g' → logprob: -1.3407953977584839
    3. '.f' → logprob: -3.8407955169677734
    4. 'fra' → logprob: -7.090795516967773
    5. 'g' → logprob: -7.590795516967773
    6. 'import' → logprob: -7.840795516967773
    7. '.math' → logprob: -7.965795516967773
    8. ')' → logprob: -7.965795516967773
    9. '.sqrt' → logprob: -8.465795516967773
    10. '.​' → logprob: -8.465795516967773

Token 238: ' prend' (ID: 37463)
  Prédit: 'import'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'import' → logprob: -0.15289215743541718
    2. '#' → logprob: -2.4028921127319336
    3. 's' → logprob: -5.527892112731934
    4. ' import' → logprob: -5.777892112731934
    5. '.' → logprob: -5.902892112731934
    6. ')' → logprob: -5.902892112731934
    7. 'print' → logprob: -6.152892112731934
    8. 'n' → logprob: -6.465392112731934
    9. ' =' → logprob: -6.465392112731934
    10. ' for' → logprob: -6.465392112731934

Token 239: ' les' (ID: 1341)
  Prédit: 'import'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'import' → logprob: -0.5402995944023132
    2. 'from' → logprob: -1.790299654006958
    3. '<|end|>' → logprob: -2.165299654006958
    4. '.' → logprob: -3.165299654006958
    5. '#' → logprob: -4.290299415588379
    6. 's' → logprob: -4.665299415588379
    7. '(' → logprob: -5.040299415588379
    8. '_' → logprob: -5.165299415588379
    9. 'fra' → logprob: -5.165299415588379
    10. 'math' → logprob: -5.290299415588379

Token 240: ' inputs' (ID: 21963)
  Prédit: 'from'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'from' → logprob: -0.6834738254547119
    2. 'import' → logprob: -1.308473825454712
    3. '#' → logprob: -2.933473825454712
    4. 'math' → logprob: -3.183473825454712
    5. 'input' → logprob: -3.558473825454712
    6. 'fra' → logprob: -3.808473825454712
    7. ' from' → logprob: -4.808473587036133
    8. ' input' → logprob: -5.058473587036133
    9. ' math' → logprob: -5.308473587036133
    10. 'next' → logprob: -5.433473587036133

Token 241: ',' (ID: 11)
  Prédit: 't'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 't' → logprob: -0.0012436824617907405
    2. ' t' → logprob: -7.126243591308594
    3. 'n' → logprob: -7.876243591308594
    4. 'import' → logprob: -10.001243591308594
    5. 'for' → logprob: -12.501243591308594
    6. 'a' → logprob: -12.626243591308594
    7. 'T' → logprob: -13.001243591308594
    8. '#' → logprob: -13.501243591308594
    9. ',' → logprob: -14.626243591308594
    10. 'inputs' → logprob: -14.751243591308594

Token 242: ' c' (ID: 274)
  Prédit: 't'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 't' → logprob: -0.07160881906747818
    2. ' t' → logprob: -2.696608781814575
    3. 'n' → logprob: -6.696609020233154
    4. 'T' → logprob: -8.696608543395996
    5. 'import' → logprob: -8.946608543395996
    6. ' n' → logprob: -10.071608543395996
    7. ' T' → logprob: -10.321608543395996
    8. 'def' → logprob: -10.446608543395996
    9. ' import' → logprob: -11.571608543395996
    10. 'q' → logprob: -12.196608543395996

Token 243: ''est' (ID: 6616)
  Prédit: 'on'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'on' → logprob: -0.5363277792930603
    2. ' =' → logprob: -1.911327838897705
    3. 'omme' → logprob: -2.411327838897705
    4. 'ont' → logprob: -2.911327838897705
    5. '=' → logprob: -3.036327838897705
    6. 'om' → logprob: -3.911327838897705
    7. 'omp' → logprob: -4.661327838897705
    8. 't' → logprob: -4.786327838897705
    9. 'e' → logprob: -5.411327838897705
    10. 'omm' → logprob: -5.536327838897705

Token 244: ' pas' (ID: 2173)
  Prédit: 'int'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'int' → logprob: -0.22677376866340637
    2. 't' → logprob: -2.226773738861084
    3. ' int' → logprob: -2.601773738861084
    4. ' t' → logprob: -4.351773738861084
    5. 'n' → logprob: -6.226773738861084
    6. 'input' → logprob: -6.601773738861084
    7. ' une' → logprob: -7.476773738861084
    8. 'b' → logprob: -7.976773738861084
    9. ' input' → logprob: -7.976773738861084
    10. '```' → logprob: -8.226774215698242

Token 245: ' très' (ID: 9412)
  Prédit: 'compl'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'compl' → logprob: -1.8704293966293335
    2. 'tout' → logprob: -1.8704293966293335
    3. ' fini' → logprob: -2.370429515838623
    4. 'com' → logprob: -2.370429515838623
    5. ' complet' → logprob: -2.495429515838623
    6. 'simple' → logprob: -2.620429515838623
    7. 'la' → logprob: -2.745429515838623
    8. 'f' → logprob: -3.495429515838623
    9. 'import' → logprob: -3.620429515838623
    10. 'comme' → logprob: -3.745429515838623

Token 246: ' beau' (ID: 45518)
  Prédit: 'clear'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'clear' → logprob: -1.0020313262939453
    2. 'clair' → logprob: -1.6270313262939453
    3. 'python' → logprob: -2.1270313262939453
    4. 'py' → logprob: -2.8770313262939453
    5. 'import' → logprob: -3.2520313262939453
    6. '```' → logprob: -3.2520313262939453
    7. 'friendly' → logprob: -3.2520313262939453
    8. ' clair' → logprob: -4.002031326293945
    9. ' clear' → logprob: -4.127031326293945
    10. 'optim' → logprob: -4.127031326293945

Token 247: ' mais' (ID: 2899)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '(' → logprob: -0.7628503441810608
    2. 'import' → logprob: -1.137850284576416
    3. ',' → logprob: -2.512850284576416
    4. ')' → logprob: -2.637850284576416
    5. '<|end|>' → logprob: -4.137850284576416
    6. 'from' → logprob: -4.637850284576416
    7. '(
' → logprob: -5.012850284576416
    8. '()' → logprob: -5.262850284576416
    9. ' ' → logprob: -5.637850284576416
    10. 'def' → logprob: -6.012850284576416

Token 248: ' ça' (ID: 13590)
  Prédit: 't'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 't' → logprob: -0.06257433444261551
    2. ' t' → logprob: -2.9375743865966797
    3. 'n' → logprob: -5.56257438659668
    4. 'import' → logprob: -6.31257438659668
    5. 'for' → logprob: -6.68757438659668
    6. ' for' → logprob: -7.56257438659668
    7. 'inputs' → logprob: -9.81257438659668
    8. 'input' → logprob: -9.93757438659668
    9. ' input' → logprob: -10.81257438659668
    10. 'T' → logprob: -10.81257438659668

Token 249: ' fait' (ID: 7473)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ')' → logprob: -0.37244948744773865
    2. 'import' → logprob: -2.4974493980407715
    3. 'n' → logprob: -3.1224493980407715
    4. 'input' → logprob: -3.3724493980407715
    5. '<|end|>' → logprob: -3.3724493980407715
    6. '=' → logprob: -4.2474493980407715
    7. '#' → logprob: -4.2474493980407715
    8. ',' → logprob: -4.3724493980407715
    9. ' is' → logprob: -4.4974493980407715
    10. ' =' → logprob: -4.8724493980407715

Token 250: ' le' (ID: 505)
  Prédit: 'le'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'le' → logprob: -0.13868308067321777
    2. ' le' → logprob: -2.2636830806732178
    3. 'l' → logprob: -3.8886830806732178
    4. ' l' → logprob: -6.263683319091797
    5. 'la' → logprob: -6.388683319091797
    6. 'part' → logprob: -7.888683319091797
    7. 't' → logprob: -8.888683319091797
    8. 'bien' → logprob: -9.013683319091797
    9. 'tout' → logprob: -9.513683319091797
    10. ' la' → logprob: -9.638683319091797

Token 251: ' job' (ID: 3349)
  Prédit: 'job'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'job' → logprob: -0.000545526563655585
    2. 'trav' → logprob: -8.500545501708984
    3. 't' → logprob: -9.250545501708984
    4. ' job' → logprob: -9.250545501708984
    5. ' boulot' → logprob: -9.625545501708984
    6. 'tr' → logprob: -11.125545501708984
    7. 'jeu' → logprob: -11.125545501708984
    8. 'b' → logprob: -11.500545501708984
    9. '```' → logprob: -11.625545501708984
    10. 'm' → logprob: -11.875545501708984

Token 252: '
' (ID: 198)
  Prédit: 't'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 't' → logprob: -0.040857069194316864
    2. 'n' → logprob: -3.5408570766448975
    3. 'import' → logprob: -4.790856838226318
    4. 'a' → logprob: -6.790856838226318
    5. ' t' → logprob: -7.415856838226318
    6. 'input' → logprob: -7.790856838226318
    7. 'for' → logprob: -8.290857315063477
    8. '#' → logprob: -9.540857315063477
    9. 'inputs' → logprob: -10.040857315063477
    10. ' for' → logprob: -10.165857315063477

Token 253: 'def' (ID: 1314)
  Prédit: 't'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 't' → logprob: -0.7312882542610168
    2. 'n' → logprob: -1.231288194656372
    3. 'a' → logprob: -2.106288194656372
    4. 'import' → logprob: -3.231288194656372
    5. 'for' → logprob: -3.481288194656372
    6. 'input' → logprob: -4.106288433074951
    7. 'inputs' → logprob: -4.481288433074951
    8. ' t' → logprob: -5.981288433074951
    9. ' for' → logprob: -6.356288433074951
    10. '#' → logprob: -7.856288433074951

Token 254: ' read' (ID: 1729)
  Prédit: ' main'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' main' → logprob: -0.3869614899158478
    2. 'main' → logprob: -1.1369614601135254
    3. ' run' → logprob: -10.636961936950684
    4. 'solve' → logprob: -10.761961936950684
    5. 'input' → logprob: -10.886961936950684
    6. 'run' → logprob: -11.386961936950684
    7. ' input' → logprob: -12.011961936950684
    8. ' solve' → logprob: -12.261961936950684
    9. '	main' → logprob: -14.136961936950684
    10. 'read' → logprob: -14.261961936950684

Token 255: '_line' (ID: 14418)
  Prédit: '():'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '():' → logprob: -0.007481445092707872
    2. '()' → logprob: -5.757481575012207
    3. '():
' → logprob: -5.757481575012207
    4. '_input' → logprob: -7.882481575012207
    5. ' ():' → logprob: -8.132481575012207
    6. '_line' → logprob: -8.382481575012207
    7. ' ()' → logprob: -9.257481575012207
    8. '()>' → logprob: -10.382481575012207
    9. '_' → logprob: -10.507481575012207
    10. 'line' → logprob: -10.757481575012207

Token 256: '():
' (ID: 8595)
  Prédit: '():'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '():' → logprob: -0.005050641018897295
    2. '()' → logprob: -5.5050506591796875
    3. '():
' → logprob: -7.0050506591796875
    4. ' ():' → logprob: -10.755050659179688
    5. '(' → logprob: -11.630050659179688
    6. '()>' → logprob: -11.755050659179688
    7. 's' → logprob: -12.005050659179688
    8. '():

' → logprob: -12.005050659179688
    9. ' ()' → logprob: -12.630050659179688
    10. '()*' → logprob: -13.130050659179688

Token 257: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.9356452822685242
    2. ' return' → logprob: -0.9356452822685242
    3. 'return' → logprob: -1.560645341873169
    4. '()' → logprob: -5.56064510345459
    5. '	return' → logprob: -7.31064510345459
    6. '    
' → logprob: -8.56064510345459
    7. ' ' → logprob: -8.68564510345459
    8. '    ' → logprob: -9.56064510345459
    9. '()
' → logprob: -10.06064510345459
    10. '
' → logprob: -10.18564510345459

Token 258: ' t' (ID: 260)
  Prédit: 'return'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'return' → logprob: -0.003309723688289523
    2. ' return' → logprob: -5.753309726715088
    3. 'int' → logprob: -9.25330924987793
    4. 'input' → logprob: -11.12830924987793
    5. 'list' → logprob: -11.62830924987793
    6. '   ' → logprob: -11.87830924987793
    7. 'import' → logprob: -13.12830924987793
    8. 'x' → logprob: -14.25330924987793
    9. 'map' → logprob: -14.25330924987793
    10. '	return' → logprob: -14.50330924987793

Token 259: ' =' (ID: 314)
  Prédit: '='
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '=' → logprob: -0.4763543903827667
    2. ' =' → logprob: -0.9763543605804443
    3. ',' → logprob: -6.226354598999023
    4. '=input' → logprob: -8.726354598999023
    5. '=int' → logprob: -10.101354598999023
    6. ' ' → logprob: -10.226354598999023
    7. ')' → logprob: -11.601354598999023
    8. 'input' → logprob: -11.601354598999023
    9. '.' → logprob: -11.726354598999023
    10. '   ' → logprob: -12.226354598999023

Token 260: ' int' (ID: 677)
  Prédit: 'int'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'int' → logprob: -0.00861456897109747
    2. ' int' → logprob: -4.758614540100098
    3. '	int' → logprob: -16.758615493774414
    4. '[int' → logprob: -16.758615493774414
    5. '   ' → logprob: -18.133615493774414
    6. ' ' → logprob: -18.133615493774414
    7. '(int' → logprob: -18.383615493774414
    8. '  ' → logprob: -18.758615493774414
    9. '=int' → logprob: -18.758615493774414
    10. 'input' → logprob: -18.883615493774414

Token 261: '(input' (ID: 10054)
  Prédit: '(input'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(input' → logprob: -1.9862216504407115e-05
    2. '(' → logprob: -11.000020027160645
    3. 'input' → logprob: -13.000020027160645
    4. '()' → logprob: -14.000020027160645
    5. '=input' → logprob: -18.875019073486328
    6. ' input' → logprob: -19.000019073486328
    7. ' (' → logprob: -19.125019073486328
    8. '(
' → logprob: -19.750019073486328
    9. '(raw' → logprob: -19.750019073486328
    10. ',input' → logprob: -20.375019073486328

Token 262: '())
' (ID: 4574)
  Prédit: '())'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '())' → logprob: -0.002051170216873288
    2. '())
' → logprob: -6.75205135345459
    3. '()' → logprob: -7.37705135345459
    4. '().' → logprob: -8.37705135345459
    5. ')' → logprob: -11.37705135345459
    6. '(' → logprob: -12.25205135345459
    7. ' ())' → logprob: -12.62705135345459
    8. '())

' → logprob: -13.25205135345459
    9. '()
' → logprob: -13.50205135345459
    10. '())
' → logprob: -13.62705135345459

Token 263: '   ' (ID: 271)
  Prédit: 'a'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'a' → logprob: -0.040675435215234756
    2. '   ' → logprob: -3.290675401687622
    3. ' a' → logprob: -6.415675640106201
    4. '	a' → logprob: -7.415675640106201
    5. ',a' → logprob: -8.290675163269043
    6. '[a' → logprob: -10.415675163269043
    7. 'return' → logprob: -10.915675163269043
    8. '>a' → logprob: -11.165675163269043
    9. '<|end|>' → logprob: -11.790675163269043
    10. '_a' → logprob: -11.915675163269043

Token 264: ' a' (ID: 261)
  Prédit: 'a'
  Correct (stricte): False
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'a' (adapté à ' a') → logprob: -8.840432565193623e-05
    2. '   ' → logprob: -9.875088691711426
    3. ' a' → logprob: -10.375088691711426
    4. '    
' → logprob: -13.250088691711426
    5. 'A' → logprob: -13.625088691711426
    6. 'abc' → logprob: -14.375088691711426
    7. '	a' → logprob: -14.750088691711426
    8. '
' → logprob: -14.750088691711426
    9. '_a' → logprob: -15.125088691711426
    10. 'results' → logprob: -15.375088691711426

Token 265: ' =' (ID: 314)
  Prédit: ' ='
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' =' → logprob: -0.2408602088689804
    2. ',' → logprob: -2.2408602237701416
    3. '=' → logprob: -2.2408602237701416
    4. 's' → logprob: -7.2408599853515625
    5. ',b' → logprob: -7.9908599853515625
    6. '=[]' → logprob: -8.865859985351562
    7. ' ,' → logprob: -9.740859985351562
    8. '=[]
' → logprob: -10.740859985351562
    9. 'b' → logprob: -11.115859985351562
    10. ',a' → logprob: -12.740859985351562

Token 266: ' []
' (ID: 8911)
  Prédit: '[]'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '[]' → logprob: -0.06799284368753433
    2. 'list' → logprob: -2.942992925643921
    3. '[' → logprob: -4.567992687225342
    4. '[list' → logprob: -6.442992687225342
    5. ' []' → logprob: -7.942992687225342
    6. ' list' → logprob: -7.942992687225342
    7. '[input' → logprob: -8.6929931640625
    8. '[]
' → logprob: -9.8179931640625
    9. '[]}' → logprob: -10.5679931640625
    10. ' [' → logprob: -10.8179931640625

Token 267: '   ' (ID: 271)
  Prédit: 'b'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'b' → logprob: -0.0004950098809786141
    2. ' b' → logprob: -8.000494956970215
    3. 'for' → logprob: -9.375494956970215
    4. '   ' → logprob: -9.750494956970215
    5. ' for' → logprob: -11.250494956970215
    6. '	b' → logprob: -13.750494956970215
    7. ',b' → logprob: -13.875494956970215
    8. ',' → logprob: -14.625494956970215
    9. ' ' → logprob: -14.875494956970215
    10. 'a' → logprob: -15.375494956970215

Token 268: ' b' (ID: 287)
  Prédit: 'b'
  Correct (stricte): False
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'b' (adapté à ' b') → logprob: -0.0009452917147427797
    2. ' b' → logprob: -7.250945091247559
    3. 'for' → logprob: -8.500945091247559
    4. ' for' → logprob: -10.375945091247559
    5. '   ' → logprob: -14.375945091247559
    6. ' ' → logprob: -16.000946044921875
    7. '	b' → logprob: -16.625946044921875
    8. 'while' → logprob: -17.375946044921875
    9. 'a' → logprob: -17.875946044921875
    10. '  ' → logprob: -18.000946044921875

Token 269: ' =' (ID: 314)
  Prédit: '='
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '=' → logprob: -0.5761602520942688
    2. ' =' → logprob: -0.8261602520942688
    3. '=[]' → logprob: -9.076160430908203
    4. ',' → logprob: -9.826160430908203
    5. '.append' → logprob: -10.076160430908203
    6. '.' → logprob: -11.826160430908203
    7. '=[]
' → logprob: -13.826160430908203
    8. '.=' → logprob: -14.451160430908203
    9. ' ' → logprob: -15.201160430908203
    10. ')' → logprob: -15.701160430908203

Token 270: ' []
' (ID: 8911)
  Prédit: '[]'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '[]' → logprob: -0.001616034540347755
    2. ' []' → logprob: -6.50161600112915
    3. '[]
' → logprob: -9.126616477966309
    4. '=[]' → logprob: -13.501616477966309
    5. '[' → logprob: -13.751616477966309
    6. 'list' → logprob: -14.376616477966309
    7. '[int' → logprob: -14.751616477966309
    8. '[]

' → logprob: -14.876616477966309
    9. '[])' → logprob: -15.126616477966309
    10. ' []
' → logprob: -15.251616477966309

Token 271: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.20177477598190308
    2. 'c' → logprob: -1.8267748355865479
    3. '<|end|>' → logprob: -4.701774597167969
    4. ' c' → logprob: -5.201774597167969
    5. ' ' → logprob: -6.076774597167969
    6. 'for' → logprob: -6.701774597167969
    7. '	c' → logprob: -6.951774597167969
    8. '    
' → logprob: -7.576774597167969
    9. ',c' → logprob: -7.701774597167969
    10. '  ' → logprob: -7.951774597167969

Token 272: ' c' (ID: 274)
  Prédit: 'c'
  Correct (stricte): False
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'c' (adapté à ' c') → logprob: -0.011075297370553017
    2. ' c' → logprob: -4.511075496673584
    3. 'for' → logprob: -10.761075019836426
    4. '   ' → logprob: -12.511075019836426
    5. ' for' → logprob: -13.011075019836426
    6. ' ' → logprob: -15.511075019836426
    7. 'd' → logprob: -16.511075973510742
    8. '	c' → logprob: -16.761075973510742
    9. '  ' → logprob: -17.886075973510742
    10. '_c' → logprob: -18.761075973510742

Token 273: ' =' (ID: 314)
  Prédit: '='
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '=' → logprob: -0.5759552121162415
    2. ' =' → logprob: -0.8259552121162415
    3. '=[]' → logprob: -11.950955390930176
    4. '.append' → logprob: -12.700955390930176
    5. '.' → logprob: -13.325955390930176
    6. ' ' → logprob: -13.575955390930176
    7. '   ' → logprob: -14.200955390930176
    8. '  ' → logprob: -14.200955390930176
    9. '=[]
' → logprob: -14.700955390930176
    10. ')' → logprob: -14.700955390930176

Token 274: ' []
' (ID: 8911)
  Prédit: '[]'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '[]' → logprob: -0.0006121210753917694
    2. '[]
' → logprob: -7.500612258911133
    3. ' []' → logprob: -9.750612258911133
    4. '[]

' → logprob: -14.875612258911133
    5. '[int' → logprob: -15.625612258911133
    6. '[' → logprob: -15.625612258911133
    7. ' []
' → logprob: -16.625612258911133
    8. '[])' → logprob: -17.000612258911133
    9. '=[]' → logprob: -17.500612258911133
    10. '[]}' → logprob: -17.750612258911133

Token 275: '   ' (ID: 271)
  Prédit: 'd'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'd' → logprob: -0.13044962286949158
    2. '   ' → logprob: -2.1304495334625244
    3. ' d' → logprob: -5.7554497718811035
    4. ' ' → logprob: -8.255449295043945
    5. '	d' → logprob: -9.380449295043945
    6. '  ' → logprob: -12.630449295043945
    7. '_d' → logprob: -13.880449295043945
    8. ',d' → logprob: -14.630449295043945
    9. '    
' → logprob: -15.130449295043945
    10. 'import' → logprob: -15.505449295043945

Token 276: ' d' (ID: 272)
  Prédit: 'd'
  Correct (stricte): False
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'd' (adapté à ' d') → logprob: -0.003256973112002015
    2. ' d' → logprob: -5.753256797790527
    3. '   ' → logprob: -9.503256797790527
    4. '	d' → logprob: -12.503256797790527
    5. ' ' → logprob: -14.253256797790527
    6. 'for' → logprob: -15.003256797790527
    7. '_d' → logprob: -17.128257751464844
    8. '  ' → logprob: -17.628257751464844
    9. ' for' → logprob: -18.128257751464844
    10. '[d' → logprob: -19.378257751464844

Token 277: ' =' (ID: 314)
  Prédit: '='
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '=' → logprob: -0.3132867217063904
    2. ' =' → logprob: -1.3132867813110352
    3. '=[]' → logprob: -10.813286781311035
    4. '.append' → logprob: -12.938286781311035
    5. '.' → logprob: -13.938286781311035
    6. '=[]
' → logprob: -14.563286781311035
    7. '   ' → logprob: -15.438286781311035
    8. ')' → logprob: -15.563286781311035
    9. '[]' → logprob: -15.688286781311035
    10. ' ' → logprob: -16.18828582763672

Token 278: ' []
' (ID: 8911)
  Prédit: '[]'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '[]' → logprob: -6.480199954239652e-05
    2. ' []' → logprob: -10.250064849853516
    3. '[]
' → logprob: -10.500064849853516
    4. '[' → logprob: -14.625064849853516
    5. '[int' → logprob: -14.625064849853516
    6. '[])' → logprob: -15.000064849853516
    7. '[]

' → logprob: -15.625064849853516
    8. '[]}' → logprob: -16.000064849853516
    9. '=[]' → logprob: -16.125064849853516
    10. '[],' → logprob: -17.250064849853516

Token 279: '   ' (ID: 271)
  Prédit: 'for'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'for' → logprob: -0.45646700263023376
    2. ' for' → logprob: -1.5814670324325562
    3. '   ' → logprob: -1.8314670324325562
    4. '
' → logprob: -8.081466674804688
    5. '	for' → logprob: -8.331466674804688
    6. '<|end|>' → logprob: -10.206466674804688
    7. '    
' → logprob: -10.831466674804688
    8. '  
' → logprob: -11.956466674804688
    9. ' ' → logprob: -12.081466674804688
    10. ' 
' → logprob: -12.706466674804688

Token 280: ' for' (ID: 395)
  Prédit: 'for'
  Correct (stricte): False
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'for' (adapté à ' for') → logprob: -0.0020822163205593824
    2. '   ' → logprob: -6.752082347869873
    3. ' for' → logprob: -7.002082347869873
    4. '	for' → logprob: -13.377081871032715
    5. ' ' → logprob: -18.50208282470703
    6. '  ' → logprob: -19.37708282470703
    7. '```' → logprob: -19.75208282470703
    8. '
' → logprob: -21.75208282470703
    9. '    
' → logprob: -22.00208282470703
    10. 'while' → logprob: -22.75208282470703

Token 281: ' j' (ID: 441)
  Prédit: '_'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '_' → logprob: -0.00012880703434348106
    2. ' _' → logprob: -9.000128746032715
    3. '_i' → logprob: -12.250128746032715
    4. '_range' → logprob: -14.625128746032715
    5. '_in' → logprob: -16.50012969970703
    6. 'i' → logprob: -17.37512969970703
    7. ' i' → logprob: -17.62512969970703
    8. ' in' → logprob: -18.00012969970703
    9. 'range' → logprob: -18.87512969970703
    10. '_=' → logprob: -19.25012969970703

Token 282: ' in' (ID: 306)
  Prédit: ' in'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' in' → logprob: -0.16094382107257843
    2. 'in' → logprob: -1.910943865776062
    3. '_' → logprob: -7.410943984985352
    4. ' ' → logprob: -9.535943984985352
    5. 'range' → logprob: -10.660943984985352
    6. 'n' → logprob: -11.910943984985352
    7. 's' → logprob: -13.160943984985352
    8. ' _' → logprob: -13.285943984985352
    9. '  ' → logprob: -13.285943984985352
    10. '	in' → logprob: -13.410943984985352

Token 283: ' range' (ID: 3352)
  Prédit: 'range'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'range' → logprob: -0.005234594456851482
    2. ' range' → logprob: -5.255234718322754
    3. ' ' → logprob: -14.505234718322754
    4. '  ' → logprob: -16.005233764648438
    5. '   ' → logprob: -17.255233764648438
    6. '	range' → logprob: -17.255233764648438
    7. 'rang' → logprob: -17.380233764648438
    8. 'in' → logprob: -17.505233764648438
    9. '(range' → logprob: -17.880233764648438
    10. 'r' → logprob: -18.880233764648438

Token 284: '(t' (ID: 2025)
  Prédit: '(t'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(t' → logprob: -8.537868779967539e-06
    2. 't' → logprob: -11.875008583068848
    3. '(' → logprob: -13.750008583068848
    4. ' t' → logprob: -15.000008583068848
    5. '	t' → logprob: -17.50000762939453
    6. ' (' → logprob: -18.25000762939453
    7. '(int' → logprob: -20.87500762939453
    8. '   ' → logprob: -21.50000762939453
    9. ',t' → logprob: -21.75000762939453
    10. '((' → logprob: -22.50000762939453

Token 285: '):
' (ID: 1883)
  Prédit: '):'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '):' → logprob: -0.08911820501089096
    2. '):
' → logprob: -2.464118242263794
    3. '   ' → logprob: -9.339118003845215
    4. ':' → logprob: -10.464118003845215
    5. ' ):' → logprob: -10.464118003845215
    6. '):
' → logprob: -10.964118003845215
    7. ')' → logprob: -12.214118003845215
    8. '():' → logprob: -12.839118003845215
    9. ' ):
' → logprob: -12.964118003845215
    10. '():
' → logprob: -13.214118003845215

Token 286: '       ' (ID: 309)
  Prédit: '       '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '       ' → logprob: -0.002676368225365877
    2. '   ' → logprob: -6.627676486968994
    3. 'a' → logprob: -7.877676486968994
    4. 'x' → logprob: -8.752676010131836
    5. ' a' → logprob: -8.877676010131836
    6. 'input' → logprob: -9.002676010131836
    7. 'tokens' → logprob: -9.252676010131836
    8. '<|end|>' → logprob: -9.877676010131836
    9. 's' → logprob: -10.002676010131836
    10. '```' → logprob: -10.252676010131836

Token 287: ' vals' (ID: 58985)
  Prédit: 'x'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'x' → logprob: -0.36041390895843506
    2. ' x' → logprob: -1.235413908958435
    3. 'ai' → logprob: -5.985414028167725
    4. ' vals' → logprob: -5.985414028167725
    5. 'a' → logprob: -6.485414028167725
    6. ' ai' → logprob: -6.735414028167725
    7. 'aa' → logprob: -7.485414028167725
    8. 'vals' (adapté à ' vals') → logprob: -7.485414028167725
    9. 'l' → logprob: -8.235413551330566
    10. ' val' → logprob: -8.235413551330566

Token 288: ' =' (ID: 314)
  Prédit: '='
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '=' → logprob: -0.20142726600170135
    2. ' =' → logprob: -1.7014272212982178
    3. '.' → logprob: -11.951427459716797
    4. '.=' → logprob: -12.326427459716797
    5. '=input' → logprob: -13.826427459716797
    6. '_=' → logprob: -14.951427459716797
    7. ',' → logprob: -15.326427459716797
    8. ')' → logprob: -15.451427459716797
    9. '[' → logprob: -15.826427459716797
    10. '_' → logprob: -15.951427459716797

Token 289: ' input' (ID: 3422)
  Prédit: 'list'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'list' → logprob: -0.008219270966947079
    2. ' list' → logprob: -5.008219242095947
    3. 'input' → logprob: -6.508219242095947
    4. ' input' → logprob: -11.883219718933105
    5. '[' → logprob: -13.008219718933105
    6. '[list' → logprob: -14.008219718933105
    7. '[input' → logprob: -14.133219718933105
    8. 'tuple' → logprob: -14.383219718933105
    9. 'map' → logprob: -15.633219718933105
    10. ' [' → logprob: -16.38321876525879

Token 290: '().' (ID: 1454)
  Prédit: '().'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '().' → logprob: -0.0001239196863025427
    2. '()' → logprob: -9.000123977661133
    3. ' ().' → logprob: -14.750123977661133
    4. '(' → logprob: -16.500123977661133
    5. '()
' → logprob: -19.625123977661133
    6. '("").' → logprob: -20.000123977661133
    7. ' ()' → logprob: -20.500123977661133
    8. '();' → logprob: -20.750123977661133
    9. '.split' → logprob: -20.875123977661133
    10. '（）' → logprob: -21.000123977661133

Token 291: 'split' (ID: 13627)
  Prédit: 'split'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'split' → logprob: -0.018150296062231064
    2. 'strip' → logprob: -4.018150329589844
    3. 'rstrip' → logprob: -14.768150329589844
    4. ' split' → logprob: -18.268150329589844
    5. 'spl' → logprob: -18.643150329589844
    6. '(split' → logprob: -21.143150329589844
    7. '.split' → logprob: -22.018150329589844
    8. ' strip' → logprob: -22.268150329589844
    9. 's' → logprob: -22.268150329589844
    10. '_split' → logprob: -23.268150329589844

Token 292: '()
' (ID: 1234)
  Prédit: '()'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '()' → logprob: -0.0002523992152418941
    2. '(' → logprob: -8.375252723693848
    3. '())' → logprob: -11.750252723693848
    4. '('' → logprob: -12.250252723693848
    5. '()]' → logprob: -12.375252723693848
    6. '()
' → logprob: -13.250252723693848
    7. ')' → logprob: -14.375252723693848
    8. ' ()' → logprob: -15.125252723693848
    9. '()?>' → logprob: -15.250252723693848
    10. '('.')' → logprob: -15.375252723693848

Token 293: '       ' (ID: 309)
  Prédit: '       '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '       ' → logprob: -0.25998422503471375
    2. '<|end|>' → logprob: -1.5099842548370361
    3. '        
' → logprob: -6.259984016418457
    4. '   ' → logprob: -6.509984016418457
    5. ' ' → logprob: -6.634984016418457
    6. '<|end|>' → logprob: -6.884984016418457
    7. ')' → logprob: -7.509984016418457
    8. ',' → logprob: -8.009984016418457
    9. '[' → logprob: -8.509984016418457
    10. '      ' → logprob: -8.759984016418457

Token 294: ' a' (ID: 261)
  Prédit: 'a'
  Correct (stricte): False
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'a' (adapté à ' a') → logprob: -0.005962575785815716
    2. ' a' → logprob: -5.130962371826172
    3. '   ' → logprob: -10.380962371826172
    4. ' ' → logprob: -14.130962371826172
    5. '       ' → logprob: -14.380962371826172
    6. '	a' → logprob: -14.630962371826172
    7. '  ' → logprob: -15.005962371826172
    8. 'for' → logprob: -15.005962371826172
    9. '    ' → logprob: -15.755962371826172
    10. 'A' → logprob: -15.880962371826172

Token 295: '.append' (ID: 3709)
  Prédit: '.append'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '.append' → logprob: -0.02976194955408573
    2. '.' → logprob: -3.529762029647827
    3. '.app' → logprob: -12.154762268066406
    4. ' .' → logprob: -12.404762268066406
    5. '.ap' → logprob: -14.279762268066406
    6. 'append' → logprob: -14.279762268066406
    7. '.extend' → logprob: -14.904762268066406
    8. ',' → logprob: -15.029762268066406
    9. '.a' → logprob: -16.154762268066406
    10. '.Append' → logprob: -17.654762268066406

Token 296: '(int' (ID: 2742)
  Prédit: '(int'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(int' → logprob: -0.00407923199236393
    2. 'int' → logprob: -5.504079341888428
    3. '(' → logprob: -14.37907886505127
    4. ' int' → logprob: -16.379079818725586
    5. '[int' → logprob: -17.379079818725586
    6. '=int' → logprob: -17.879079818725586
    7. '(f' → logprob: -18.254079818725586
    8. '(in' → logprob: -18.879079818725586
    9. '(
' → logprob: -19.379079818725586
    10. '	int' → logprob: -19.629079818725586

Token 297: '(vals' (ID: 167053)
  Prédit: '(vals'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(vals' → logprob: -3.650518920039758e-06
    2. 'vals' → logprob: -12.625003814697266
    3. '(val' → logprob: -15.500003814697266
    4. ' vals' → logprob: -16.750003814697266
    5. '(' → logprob: -17.500003814697266
    6. 'Vals' → logprob: -19.875003814697266
    7. '(values' → logprob: -20.000003814697266
    8. ' (' → logprob: -20.000003814697266
    9. ')' → logprob: -20.250003814697266
    10. '_vals' → logprob: -21.500003814697266

Token 298: '[' (ID: 58)
  Prédit: '['
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '[' → logprob: -1.5690089639974758e-05
    2. '0' → logprob: -11.250015258789062
    3. '(' → logprob: -13.125015258789062
    4. ' [' → logprob: -14.375015258789062
    5. '   ' → logprob: -17.125015258789062
    6. ')' → logprob: -17.250015258789062
    7. '()[' → logprob: -18.375015258789062
    8. ' ' → logprob: -18.625015258789062
    9. '[j' → logprob: -19.000015258789062
    10. '[
' → logprob: -19.000015258789062

Token 299: '0' (ID: 15)
  Prédit: '0'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '0' → logprob: -4.127333340875339e-06
    2. ' ' → logprob: -12.750003814697266
    3. '1' → logprob: -14.375003814697266
    4. '[' → logprob: -14.875003814697266
    5. '   ' → logprob: -16.250003814697266
    6. 'j' → logprob: -17.750003814697266
    7. '2' → logprob: -17.875003814697266
    8. ')' → logprob: -18.750003814697266
    9. '    ' → logprob: -19.187503814697266
    10. '  ' → logprob: -19.437503814697266

Token 300: ']))
' (ID: 24801)
  Prédit: '))'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '))' → logprob: -0.00048262736527249217
    2. ']))' → logprob: -8.500482559204102
    3. ' ))' → logprob: -8.875482559204102
    4. ')' → logprob: -9.125482559204102
    5. ')))' → logprob: -11.000482559204102
    6. '])' → logprob: -11.500482559204102
    7. '))
' → logprob: -13.250482559204102
    8. ']' → logprob: -14.750482559204102
    9. '()))' → logprob: -15.125482559204102
    10. ' ' → logprob: -15.125482559204102

Token 301: '       ' (ID: 309)
  Prédit: '       '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '       ' → logprob: -0.0039847237057983875
    2. ')' → logprob: -6.2539849281311035
    3. 'b' → logprob: -7.2539849281311035
    4. '   ' → logprob: -7.5039849281311035
    5. '<|end|>' → logprob: -8.253984451293945
    6. ' ' → logprob: -9.253984451293945
    7. ',' → logprob: -9.378984451293945
    8. ' b' → logprob: -9.628984451293945
    9. 'a' → logprob: -10.003984451293945
    10. '	' → logprob: -10.503984451293945

Token 302: ' b' (ID: 287)
  Prédit: 'b'
  Correct (stricte): False
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'b' (adapté à ' b') → logprob: -0.04858805239200592
    2. ' b' → logprob: -3.0485880374908447
    3. '   ' → logprob: -15.048587799072266
    4. ' ' → logprob: -15.548587799072266
    5. '	b' → logprob: -15.798587799072266
    6. 'd' → logprob: -17.048587799072266
    7. ')b' → logprob: -18.048587799072266
    8. '       ' → logprob: -18.173587799072266
    9. '  ' → logprob: -19.048587799072266
    10. 'a' → logprob: -19.423587799072266

Token 303: '.append' (ID: 3709)
  Prédit: '.append'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '.append' → logprob: -0.0003878934367094189
    2. '.' → logprob: -8.000388145446777
    3. ' .' → logprob: -9.875388145446777
    4. 'append' → logprob: -14.875388145446777
    5. ').' → logprob: -15.625388145446777
    6. '(int' → logprob: -15.750388145446777
    7. '().' → logprob: -16.37538719177246
    8. '.Append' → logprob: -16.62538719177246
    9. '   ' → logprob: -17.00038719177246
    10. ')' → logprob: -17.00038719177246

Token 304: '(int' (ID: 2742)
  Prédit: '(int'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(int' → logprob: -8.180258191714529e-06
    2. 'int' → logprob: -11.750008583068848
    3. '(' → logprob: -16.25000762939453
    4. '[int' → logprob: -16.75000762939453
    5. ' (' → logprob: -16.87500762939453
    6. '=int' → logprob: -17.50000762939453
    7. '<int' → logprob: -18.50000762939453
    8. ' int' → logprob: -19.12500762939453
    9. '(in' → logprob: -19.50000762939453
    10. ',int' → logprob: -20.12500762939453

Token 305: '(vals' (ID: 167053)
  Prédit: '(vals'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(vals' → logprob: -0.014186889864504337
    2. 'vals' → logprob: -4.264186859130859
    3. ' vals' → logprob: -11.26418685913086
    4. 'int' → logprob: -11.76418685913086
    5. '(int' → logprob: -14.01418685913086
    6. ' (' → logprob: -14.13918685913086
    7. '[int' → logprob: -14.63918685913086
    8. '[' → logprob: -15.01418685913086
    9. ')' → logprob: -16.26418685913086
    10. '(' → logprob: -16.76418685913086

Token 306: '[' (ID: 58)
  Prédit: '['
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '[' → logprob: -0.0003179465711582452
    2. '1' → logprob: -8.125317573547363
    3. '(' → logprob: -10.750317573547363
    4. '```' → logprob: -16.25031852722168
    5. '0' → logprob: -16.37531852722168
    6. ' [' → logprob: -16.50031852722168
    7. '))' → logprob: -17.00031852722168
    8. '[
' → logprob: -17.37531852722168
    9. ')' → logprob: -17.87531852722168
    10. ' ' → logprob: -18.25031852722168

Token 307: '1' (ID: 16)
  Prédit: '1'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '1' → logprob: -0.014163863845169544
    2. '0' → logprob: -4.264163970947266
    3. ' ' → logprob: -15.264163970947266
    4. '[' → logprob: -16.389163970947266
    5. '```' → logprob: -17.514163970947266
    6. '-' → logprob: -18.014163970947266
    7. '
' → logprob: -18.139163970947266
    8. '   ' → logprob: -18.264163970947266
    9. ')' → logprob: -19.139163970947266
    10. '2' → logprob: -19.264163970947266

Token 308: ']))
' (ID: 24801)
  Prédit: '))'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '))' → logprob: -0.00046868418576195836
    2. '))
' → logprob: -7.750468730926514
    3. ')' → logprob: -10.625468254089355
    4. '       ' → logprob: -12.000468254089355
    5. ' ))' → logprob: -12.875468254089355
    6. '<|end|>' → logprob: -13.125468254089355
    7. '   ' → logprob: -13.750468254089355
    8. ''))' → logprob: -14.750468254089355
    9. ')))' → logprob: -15.000468254089355
    10. '))

' → logprob: -15.000468254089355

Token 309: '       ' (ID: 309)
  Prédit: '       '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '       ' → logprob: -0.00030936390976421535
    2. '<|end|>' → logprob: -8.500308990478516
    3. ')' → logprob: -9.625308990478516
    4. '   ' → logprob: -11.125308990478516
    5. 'c' → logprob: -11.625308990478516
    6. ' ' → logprob: -12.875308990478516
    7. ' c' → logprob: -13.125308990478516
    8. '      ' → logprob: -13.125308990478516
    9. '        
' → logprob: -13.250308990478516
    10. 'a' → logprob: -13.500308990478516

Token 310: ' c' (ID: 274)
  Prédit: 'c'
  Correct (stricte): False
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'c' (adapté à ' c') → logprob: -0.0009706564014777541
    2. ' c' → logprob: -7.375970840454102
    3. 'd' → logprob: -8.000970840454102
    4. '       ' → logprob: -12.500970840454102
    5. 'a' → logprob: -13.500970840454102
    6. '   ' → logprob: -13.500970840454102
    7. ' d' → logprob: -13.625970840454102
    8. 'int' → logprob: -14.125970840454102
    9. ')c' → logprob: -15.375970840454102
    10. ' ' → logprob: -15.625970840454102

Token 311: '.append' (ID: 3709)
  Prédit: '.append'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '.append' → logprob: -5.3954463510308415e-05
    2. '.' → logprob: -10.000054359436035
    3. ' .' → logprob: -11.750054359436035
    4. ').' → logprob: -14.750054359436035
    5. '.app' → logprob: -17.37505340576172
    6. '].' → logprob: -17.62505340576172
    7. 'append' → logprob: -17.87505340576172
    8. '   ' → logprob: -18.12505340576172
    9. '.extend' → logprob: -18.87505340576172
    10. '().' → logprob: -19.87505340576172

Token 312: '(int' (ID: 2742)
  Prédit: '(int'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(int' → logprob: -0.00043233807082287967
    2. 'int' → logprob: -7.75043249130249
    3. '[int' → logprob: -13.625432014465332
    4. '=int' → logprob: -15.375432014465332
    5. '<int' → logprob: -15.875432014465332
    6. ' int' → logprob: -16.50043296813965
    7. ' (' → logprob: -16.62543296813965
    8. '(' → logprob: -17.87543296813965
    9. ',int' → logprob: -18.12543296813965
    10. ':int' → logprob: -18.50043296813965

Token 313: '(vals' (ID: 167053)
  Prédit: '(vals'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(vals' → logprob: -0.001607939600944519
    2. 'vals' → logprob: -6.751607894897461
    3. 'int' → logprob: -7.751607894897461
    4. '(int' → logprob: -12.376607894897461
    5. ' vals' → logprob: -12.751607894897461
    6. '[int' → logprob: -15.376607894897461
    7. 'ints' → logprob: -15.876607894897461
    8. '_vals' → logprob: -17.62660789489746
    9. 'intval' → logprob: -18.62660789489746
    10. '(values' → logprob: -18.62660789489746

Token 314: '[' (ID: 58)
  Prédit: '['
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '[' → logprob: -8.41866585687967e-06
    2. '2' → logprob: -11.750008583068848
    3. '(' → logprob: -14.500008583068848
    4. ' [' → logprob: -18.75000762939453
    5. '0' → logprob: -19.00000762939453
    6. '```' → logprob: -19.12500762939453
    7. '[
' → logprob: -19.50000762939453
    8. '1' → logprob: -19.62500762939453
    9. 's' → logprob: -19.62500762939453
    10. ')' → logprob: -19.75000762939453

Token 315: '2' (ID: 17)
  Prédit: '2'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '2' → logprob: -5.200166469876422e-06
    2. '0' → logprob: -13.125004768371582
    3. ' ' → logprob: -13.500004768371582
    4. '1' → logprob: -13.875004768371582
    5. '   ' → logprob: -14.875004768371582
    6. '[' → logprob: -15.500004768371582
    7. '
' → logprob: -16.5000057220459
    8. '```' → logprob: -16.5000057220459
    9. '  ' → logprob: -16.8750057220459
    10. '3' → logprob: -17.1250057220459

Token 316: ']))
' (ID: 24801)
  Prédit: '])'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '])' → logprob: -0.4271508753299713
    2. '))' → logprob: -1.302150845527649
    3. ')' → logprob: -3.0521509647369385
    4. '])
' → logprob: -4.052150726318359
    5. '))
' → logprob: -4.677150726318359
    6. ')
' → logprob: -7.052150726318359
    7. '       ' → logprob: -7.677150726318359
    8. ')]' → logprob: -8.55215072631836
    9. ']))' → logprob: -9.42715072631836
    10. ')])' → logprob: -9.92715072631836

Token 317: '       ' (ID: 309)
  Prédit: '       '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '       ' → logprob: -0.0002755174064077437
    2. '   ' → logprob: -8.500275611877441
    3. 'd' → logprob: -9.625275611877441
    4. ' d' → logprob: -13.000275611877441
    5. ')' → logprob: -13.875275611877441
    6. '	d' → logprob: -14.125275611877441
    7. '        
' → logprob: -14.375275611877441
    8. '	' → logprob: -14.750275611877441
    9. '      ' → logprob: -15.375275611877441
    10. '     ' → logprob: -16.250274658203125

Token 318: ' d' (ID: 272)
  Prédit: 'd'
  Correct (stricte): False
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'd' (adapté à ' d') → logprob: -0.0005543439765460789
    2. ' d' → logprob: -7.50055456161499
    3. '   ' → logprob: -13.625554084777832
    4. '	d' → logprob: -15.875554084777832
    5. ' ' → logprob: -17.12555503845215
    6. '       ' → logprob: -17.50055503845215
    7. '  ' → logprob: -18.87555503845215
    8. '```' → logprob: -19.50055503845215
    9. '
' → logprob: -19.75055503845215
    10. 'b' → logprob: -20.12555503845215

Token 319: '.append' (ID: 3709)
  Prédit: '.append'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '.append' → logprob: -0.00014048899174667895
    2. '.' → logprob: -8.875140190124512
    3. '.app' → logprob: -15.250140190124512
    4. ' .' → logprob: -15.750140190124512
    5. '.extend' → logprob: -16.125141143798828
    6. ').' → logprob: -16.750141143798828
    7. '].' → logprob: -17.250141143798828
    8. '.ap' → logprob: -18.500141143798828
    9. '.Append' → logprob: -18.500141143798828
    10. 'append' → logprob: -18.625141143798828

Token 320: '(int' (ID: 2742)
  Prédit: '(int'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(int' → logprob: -0.00012356207298580557
    2. 'int' → logprob: -9.000123977661133
    3. '[int' → logprob: -16.375123977661133
    4. '(' → logprob: -16.625123977661133
    5. '=int' → logprob: -17.250123977661133
    6. ' int' → logprob: -17.875123977661133
    7. ' (' → logprob: -18.375123977661133
    8. '(in' → logprob: -18.500123977661133
    9. '<int' → logprob: -19.250123977661133
    10. '   ' → logprob: -19.750123977661133

Token 321: '(vals' (ID: 167053)
  Prédit: '(vals'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(vals' → logprob: -0.00598603580147028
    2. 'int' → logprob: -5.755986213684082
    3. '(int' → logprob: -6.005986213684082
    4. 'vals' → logprob: -8.380986213684082
    5. '[int' → logprob: -9.130986213684082
    6. ' vals' → logprob: -14.005986213684082
    7. ')' → logprob: -14.130986213684082
    8. 'ints' → logprob: -15.130986213684082
    9. ' int' → logprob: -15.505986213684082
    10. '<int' → logprob: -16.130985260009766

Token 322: '[' (ID: 58)
  Prédit: '['
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '[' → logprob: -0.00039504567394033074
    2. '3' → logprob: -7.875394821166992
    3. '[j' → logprob: -11.375394821166992
    4. '(' → logprob: -13.750394821166992
    5. ')' → logprob: -14.375394821166992
    6. ' [' → logprob: -14.625394821166992
    7. '][' → logprob: -15.375394821166992
    8. ')[' → logprob: -15.625394821166992
    9. '   ' → logprob: -15.625394821166992
    10. '0' → logprob: -15.875394821166992

Token 323: '3' (ID: 18)
  Prédit: '3'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '3' → logprob: -6.704273118884885e-07
    2. '[' → logprob: -14.500000953674316
    3. 'j' → logprob: -16.25
    4. ' ' → logprob: -17.375
    5. 'int' → logprob: -18.0
    6. '-' → logprob: -18.0
    7. '2' → logprob: -18.125
    8. '   ' → logprob: -18.25
    9. '[j' → logprob: -18.625
    10. '```' → logprob: -18.875

Token 324: ']))
' (ID: 24801)
  Prédit: '))'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '))' → logprob: -0.0034094166476279497
    2. ')' → logprob: -5.753409385681152
    3. '])' → logprob: -8.503409385681152
    4. '))
' → logprob: -10.628409385681152
    5. ']))' → logprob: -13.003409385681152
    6. ')))' → logprob: -13.753409385681152
    7. ' ))' → logprob: -14.628409385681152
    8. ')
' → logprob: -15.378409385681152
    9. '   ' → logprob: -15.753409385681152
    10. ')]' → logprob: -16.37841033935547

Token 325: '   ' (ID: 271)
  Prédit: ''
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False

Token 326: ' return' (ID: 622)
  Prédit: 'return'
  Correct (stricte): False
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'return' (adapté à ' return') → logprob: -0.2315358966588974
    2. '   ' → logprob: -1.8565359115600586
    3. ' return' → logprob: -3.4815359115600586
    4. '	return' → logprob: -4.106535911560059
    5. '<|end|>' → logprob: -5.856535911560059
    6. ':return' → logprob: -8.731535911560059
    7. ')return' → logprob: -9.481535911560059
    8. ' ' → logprob: -10.356535911560059
    9. ')' → logprob: -10.606535911560059
    10. '```' → logprob: -10.856535911560059

Token 327: ' t' (ID: 260)
  Prédit: 'a'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'a' → logprob: -9.865583706414327e-05
    2. ' a' → logprob: -9.75009822845459
    3. '(a' → logprob: -10.12509822845459
    4. ' (' → logprob: -16.125099182128906
    5. 't' → logprob: -16.250099182128906
    6. '(t' → logprob: -17.375099182128906
    7. '[a' → logprob: -17.375099182128906
    8. '	a' → logprob: -18.250099182128906
    9. ' ' → logprob: -18.500099182128906
    10. '   ' → logprob: -19.375099182128906

Token 328: ',' (ID: 11)
  Prédit: ','
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ',' → logprob: -0.018452389165759087
    2. ',a' → logprob: -4.018452167510986
    3. 'a' → logprob: -8.268452644348145
    4. ' ,' → logprob: -10.018452644348145
    5. ' a' → logprob: -14.518452644348145
    6. '   ' → logprob: -14.643452644348145
    7. ',
' → logprob: -15.268452644348145
    8. ',A' → logprob: -16.768451690673828
    9. ',b' → logprob: -17.768451690673828
    10. '(a' → logprob: -18.143451690673828

Token 329: ' a' (ID: 261)
  Prédit: 'a'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'a' → logprob: -0.004078401252627373
    2. ' a' → logprob: -5.504078388214111
    3. '	a' → logprob: -20.004077911376953
    4. '_a' → logprob: -21.004077911376953
    5. ' ' → logprob: -21.629077911376953
    6. '(a' → logprob: -21.879077911376953
    7. ',a' → logprob: -22.254077911376953
    8. '   ' → logprob: -22.504077911376953
    9. '[a' → logprob: -23.254077911376953
    10. ' ' → logprob: -23.629077911376953

Token 330: ',' (ID: 11)
  Prédit: ','
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ',' → logprob: -0.00026777281891554594
    2. ',b' → logprob: -8.37526798248291
    3. ' ,' → logprob: -10.25026798248291
    4. 'b' → logprob: -13.25026798248291
    5. ',
' → logprob: -18.000267028808594
    6. ' b' → logprob: -18.000267028808594
    7. ',a' → logprob: -18.125267028808594
    8. 'a' → logprob: -19.625267028808594
    9. ',d' → logprob: -20.125267028808594
    10. ',c' → logprob: -20.125267028808594

Token 331: ' b' (ID: 287)
  Prédit: 'b'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'b' → logprob: -0.03804149478673935
    2. ' b' → logprob: -3.288041591644287
    3. ' ' → logprob: -21.038042068481445
    4. '	b' → logprob: -21.163042068481445
    5. '   ' → logprob: -23.038042068481445
    6. '_b' → logprob: -24.413042068481445
    7. ',b' → logprob: -24.413042068481445
    8. '  ' → logprob: -24.663042068481445
    9. ' б' → logprob: -24.913042068481445
    10. ')b' → logprob: -25.663042068481445

Token 332: ',' (ID: 11)
  Prédit: ','
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ',' → logprob: -0.00015860427811276168
    2. ' ,' → logprob: -9.125158309936523
    3. ',c' → logprob: -10.750158309936523
    4. 'c' → logprob: -10.750158309936523
    5. 'd' → logprob: -12.750158309936523
    6. ',d' → logprob: -12.875158309936523
    7. '   ' → logprob: -13.875158309936523
    8. ' c' → logprob: -14.875158309936523
    9. ' d' → logprob: -16.875158309936523
    10. '  ' → logprob: -17.375158309936523

Token 333: ' c' (ID: 274)
  Prédit: 'd'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'd' → logprob: -0.08490770310163498
    2. 'c' → logprob: -2.8349077701568604
    3. ' d' → logprob: -3.8349077701568604
    4. ' c' → logprob: -6.834907531738281
    5. ' ' → logprob: -17.08490753173828
    6. '   ' → logprob: -18.20990753173828
    7. '	d' → logprob: -18.45990753173828
    8. '	c' → logprob: -18.83490753173828
    9. '  ' → logprob: -19.45990753173828
    10. '_d' → logprob: -21.70990753173828

Token 334: ',' (ID: 11)
  Prédit: ','
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ',' → logprob: -0.07497149705886841
    2. ',d' → logprob: -3.0749714374542236
    3. 'd' → logprob: -3.6999714374542236
    4. ' d' → logprob: -7.074971675872803
    5. '<|end|>' → logprob: -7.824971675872803
    6. ' ,' → logprob: -9.949971199035645
    7. '   ' → logprob: -12.324971199035645
    8. ')' → logprob: -12.574971199035645
    9. '[' → logprob: -13.324971199035645
    10. '```' → logprob: -13.324971199035645

Token 335: ' d' (ID: 272)
  Prédit: 'd'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'd' → logprob: -0.00033546582562848926
    2. ' d' → logprob: -8.000335693359375
    3. '	d' → logprob: -21.875335693359375
    4. '   ' → logprob: -22.750335693359375
    5. ' ' → logprob: -23.375335693359375
    6. '  ' → logprob: -24.375335693359375
    7. '_d' → logprob: -24.625335693359375
    8. ' ' → logprob: -25.875335693359375
    9. '[d' → logprob: -26.125335693359375
    10. '.d' → logprob: -26.125335693359375

Token 336: '

' (ID: 279)
  Prédit: ''
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False

Token 337: '#' (ID: 2)
  Prédit: 'import'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'import' → logprob: -0.8516645431518555
    2. '#' → logprob: -0.9766645431518555
    3. ')' → logprob: -2.9766645431518555
    4. 'try' → logprob: -2.9766645431518555
    5. 'fra' → logprob: -3.6016645431518555
    6. '<|end|>' → logprob: -3.6016645431518555
    7. ',' → logprob: -4.7266645431518555
    8. '.' → logprob: -4.9766645431518555
    9. ' fractions' → logprob: -5.7266645431518555
    10. 'if' → logprob: -5.8516645431518555

Token 338: ' Je' (ID: 4678)
  Prédit: 'fra'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'fra' → logprob: -0.7872509360313416
    2. 'import' → logprob: -0.9122509360313416
    3. '#' → logprob: -2.4122509956359863
    4. 'from' → logprob: -3.9122509956359863
    5. 'try' → logprob: -4.287250995635986
    6. '.f' → logprob: -5.162250995635986
    7. ' fractions' → logprob: -5.662250995635986
    8. '.' → logprob: -6.912250995635986
    9. 'f' → logprob: -6.912250995635986
    10. 'attributes' → logprob: -7.037250995635986

Token 339: ' garde' (ID: 65309)
  Prédit: 'if'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'if' → logprob: -0.6018070578575134
    2. ' if' → logprob: -1.9768071174621582
    3. ' pense' → logprob: -2.726807117462158
    4. ' vais' → logprob: -2.726807117462158
    5. '#' → logprob: -3.226807117462158
    6. 'import' → logprob: -4.101807117462158
    7. ' continue' → logprob: -4.351807117462158
    8. ' souhaite' → logprob: -4.476807117462158
    9. ' veux' → logprob: -4.476807117462158
    10. ' suis' → logprob: -4.476807117462158

Token 340: ' ce' (ID: 2357)
  Prédit: '#'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '#' → logprob: -0.6153629422187805
    2. 'import' → logprob: -0.9903629422187805
    3. '<|end|>' → logprob: -3.4903628826141357
    4. ':' → logprob: -4.740363121032715
    5. '...' → logprob: -4.990363121032715
    6. 'if' → logprob: -5.365363121032715
    7. ' la' → logprob: -5.490363121032715
    8. ' running' → logprob: -5.740363121032715
    9. 'for' → logprob: -5.740363121032715
    10. ' for' → logprob: -5.740363121032715

Token 341: ' nom' (ID: 8080)
  Prédit: 'if'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'if' → logprob: -0.07883305102586746
    2. ' if' → logprob: -2.7038331031799316
    3. ' code' → logprob: -5.328833103179932
    4. '#' → logprob: -6.578833103179932
    5. 'def' → logprob: -6.828833103179932
    6. 'code' → logprob: -7.203833103179932
    7. '_code' → logprob: -8.328832626342773
    8. 'import' → logprob: -8.953832626342773
    9. '```' → logprob: -9.328832626342773
    10. ' qui' → logprob: -9.828832626342773

Token 342: ',' (ID: 11)
  Prédit: 'def'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'def' → logprob: -0.30371537804603577
    2. 'if' → logprob: -1.5537153482437134
    3. '#' → logprob: -3.553715467453003
    4. 'for' → logprob: -4.678715229034424
    5. '<|end|>' → logprob: -4.803715229034424
    6. ' if' → logprob: -6.678715229034424
    7. '.' → logprob: -7.553715229034424
    8. 'print' → logprob: -7.803715229034424
    9. ':' → logprob: -7.928715229034424
    10. ' for' → logprob: -8.053715705871582

Token 343: ' on' (ID: 402)
  Prédit: 'if'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'if' → logprob: -0.011908468790352345
    2. '#' → logprob: -4.761908531188965
    3. ' if' → logprob: -6.011908531188965
    4. 'def' → logprob: -7.386908531188965
    5. 'c' → logprob: -9.261908531188965
    6. 't' → logprob: -10.886908531188965
    7. 'si' → logprob: -10.886908531188965
    8. 'run' → logprob: -11.261908531188965
    9. 'for' → logprob: -11.386908531188965
    10. ' #' → logprob: -11.386908531188965

Token 344: ' sait' (ID: 52101)
  Prédit: 'if'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'if' → logprob: -0.011094276793301105
    2. '#' → logprob: -6.011094093322754
    3. 'def' → logprob: -6.011094093322754
    4. 'continue' → logprob: -6.261094093322754
    5. 'pe' → logprob: -7.261094093322754
    6. 'n' → logprob: -7.886094093322754
    7. ' pourrait' → logprob: -8.011094093322754
    8. ' va' → logprob: -8.136094093322754
    9. ' continue' → logprob: -8.511094093322754
    10. ' peut' → logprob: -8.511094093322754

Token 345: ' jamais' (ID: 23077)
  Prédit: 'if'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'if' → logprob: -0.29491567611694336
    2. 'import' → logprob: -2.7949156761169434
    3. '#' → logprob: -3.0449156761169434
    4. ' pas' → logprob: -3.4199156761169434
    5. '__' → logprob: -3.9199156761169434
    6. 'def' → logprob: -3.9199156761169434
    7. ' if' → logprob: -4.044915676116943
    8. ' que' → logprob: -4.794915676116943
    9. ' juste' → logprob: -4.794915676116943
    10. 'pas' → logprob: -5.294915676116943

Token 346: '
' (ID: 198)
  Prédit: 'def'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'def' → logprob: -0.017731349915266037
    2. 'if' → logprob: -4.142731189727783
    3. '#' → logprob: -7.517731189727783
    4. '<|end|>' → logprob: -7.517731189727783
    5. 'result' → logprob: -8.017731666564941
    6. '
' → logprob: -9.017731666564941
    7. 'print' → logprob: -9.767731666564941
    8. ' if' → logprob: -10.892731666564941
    9. 'results' → logprob: -10.892731666564941
    10. ' def' → logprob: -10.892731666564941

Token 347: 'def' (ID: 1314)
  Prédit: 'if'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'if' → logprob: -0.07924952358007431
    2. 'def' → logprob: -2.579249620437622
    3. ' if' → logprob: -8.079249382019043
    4. 'print' → logprob: -10.454249382019043
    5. 'for' → logprob: -12.204249382019043
    6. 't' → logprob: -12.329249382019043
    7. 'run' → logprob: -12.454249382019043
    8. ' def' → logprob: -13.079249382019043
    9. '#' → logprob: -13.079249382019043
    10. 'import' → logprob: -13.704249382019043

Token 348: ' main' (ID: 2758)
  Prédit: 'main'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'main' → logprob: -0.0011834424221888185
    2. ' main' → logprob: -6.75118350982666
    3. '__' → logprob: -11.50118350982666
    4. '_main' → logprob: -13.25118350982666
    5. 'solve' → logprob: -14.62618350982666
    6. 'process' → logprob: -15.00118350982666
    7. 'run' → logprob: -15.37618350982666
    8. 'def' → logprob: -15.87618350982666
    9. 'solution' → logprob: -16.126182556152344
    10. 'if' → logprob: -16.501182556152344

Token 349: '():
' (ID: 8595)
  Prédit: '():'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '():' → logprob: -8.017927029868588e-05
    2. ' ():' → logprob: -9.500080108642578
    3. '():
' → logprob: -12.250080108642578
    4. '()' → logprob: -14.750080108642578
    5. '():
' → logprob: -17.750080108642578
    6. '(' → logprob: -17.750080108642578
    7. '():

' → logprob: -19.250080108642578
    8. ' ()' → logprob: -19.375080108642578
    9. ':' → logprob: -20.000080108642578
    10. '()>' → logprob: -20.750080108642578

Token 350: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.07890377938747406
    2. 't' → logprob: -2.5789036750793457
    3. ' t' → logprob: -11.453904151916504
    4. '	t' → logprob: -12.703904151916504
    5. '`t' → logprob: -15.203904151916504
    6. '   ' → logprob: -16.328903198242188
    7. '```' → logprob: -17.578903198242188
    8. '       ' → logprob: -17.953903198242188
    9. '_t' → logprob: -18.828903198242188
    10. '  ' → logprob: -18.953903198242188

Token 351: ' t' (ID: 260)
  Prédit: 't'
  Correct (stricte): False
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 't' (adapté à ' t') → logprob: -0.0026799410115927458
    2. '   ' → logprob: -6.002679824829102
    3. ' t' → logprob: -8.502679824829102
    4. '	t' → logprob: -14.002679824829102
    5. '`t' → logprob: -14.752679824829102
    6. '  ' → logprob: -17.3776798248291
    7. '    
' → logprob: -17.8776798248291
    8. 'import' → logprob: -17.8776798248291
    9. '```' → logprob: -18.0026798248291
    10. ' ' → logprob: -18.3776798248291

Token 352: ',' (ID: 11)
  Prédit: ','
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ',' → logprob: -0.00032485672272741795
    2. ' =' → logprob: -8.750325202941895
    3. ' ,' → logprob: -8.875325202941895
    4. '=' → logprob: -10.750325202941895
    5. ',t' → logprob: -12.625325202941895
    6. ',int' → logprob: -14.750325202941895
    7. ',input' → logprob: -14.875325202941895
    8. ',a' → logprob: -15.500325202941895
    9. '=int' → logprob: -16.250324249267578
    10. '_,' → logprob: -16.375324249267578

Token 353: ' a' (ID: 261)
  Prédit: 'a'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'a' → logprob: -0.6931508183479309
    2. ' a' → logprob: -0.6931508183479309
    3. ',a' → logprob: -13.068150520324707
    4. '	a' → logprob: -13.943150520324707
    5. '*a' → logprob: -16.068151473999023
    6. '_a' → logprob: -16.193151473999023
    7. ',' → logprob: -16.943151473999023
    8. ' ' → logprob: -16.943151473999023
    9. '   ' → logprob: -17.068151473999023
    10. '  ' → logprob: -17.443151473999023

Token 354: ',' (ID: 11)
  Prédit: ','
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ',' → logprob: -1.1875571544806007e-05
    2. ' ,' → logprob: -11.875011444091797
    3. ',b' → logprob: -12.250011444091797
    4. ',a' → logprob: -17.875011444091797
    5. 'b' → logprob: -19.125011444091797
    6. '_,' → logprob: -19.500011444091797
    7. '‌,' → logprob: -19.500011444091797
    8. '<|end|>' → logprob: -19.500011444091797
    9. ',
' → logprob: -19.750011444091797
    10. '=' → logprob: -20.625011444091797

Token 355: ' b' (ID: 287)
  Prédit: 'b'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'b' → logprob: -0.0380416102707386
    2. ' b' → logprob: -3.288041591644287
    3. ' ' → logprob: -16.538042068481445
    4. '<|end|>' → logprob: -19.538042068481445
    5. '  ' → logprob: -20.788042068481445
    6. ',b' → logprob: -21.038042068481445
    7. '	b' → logprob: -21.288042068481445
    8. '   ' → logprob: -21.538042068481445
    9. '    ' → logprob: -22.163042068481445
    10. '_b' → logprob: -22.538042068481445

Token 356: ',' (ID: 11)
  Prédit: ','
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ',' → logprob: -1.0564331205387134e-05
    2. ' ,' → logprob: -11.75001049041748
    3. ',c' → logprob: -13.12501049041748
    4. ',a' → logprob: -15.00001049041748
    5. ',b' → logprob: -16.250011444091797
    6. '   ' → logprob: -17.875011444091797
    7. '_,' → logprob: -18.125011444091797
    8. ',t' → logprob: -19.000011444091797
    9. '=' → logprob: -19.625011444091797
    10. 'c' → logprob: -19.750011444091797

Token 357: ' c' (ID: 274)
  Prédit: 'c'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'c' → logprob: -0.03804149478673935
    2. ' c' → logprob: -3.288041591644287
    3. ' ' → logprob: -17.538042068481445
    4. '	c' → logprob: -17.538042068481445
    5. '  ' → logprob: -18.538042068481445
    6. ',c' → logprob: -19.288042068481445
    7. '   ' → logprob: -19.788042068481445
    8. '_c' → logprob: -20.288042068481445
    9. '$c' → logprob: -21.788042068481445
    10. '<|end|>' → logprob: -22.163042068481445

Token 358: ',' (ID: 11)
  Prédit: ','
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ',' → logprob: -2.2200749754119897e-06
    2. ',d' → logprob: -13.375001907348633
    3. ' ,' → logprob: -14.500001907348633
    4. 'd' → logprob: -16.875001907348633
    5. '_,' → logprob: -17.125001907348633
    6. '‌,' → logprob: -20.375001907348633
    7. 'def' → logprob: -21.125001907348633
    8. '```' → logprob: -21.375001907348633
    9. 't' → logprob: -21.625001907348633
    10. ',b' → logprob: -21.750001907348633

Token 359: ' d' (ID: 272)
  Prédit: 'd'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'd' → logprob: -0.04858759790658951
    2. ' d' → logprob: -3.0485875606536865
    3. ' ' → logprob: -15.923587799072266
    4. '	d' → logprob: -17.048587799072266
    5. '  ' → logprob: -18.298587799072266
    6. '   ' → logprob: -18.423587799072266
    7. ',d' → logprob: -18.923587799072266
    8. '_d' → logprob: -19.673587799072266
    9. 'c' → logprob: -19.798587799072266
    10. ',' → logprob: -20.798587799072266

Token 360: ' =' (ID: 314)
  Prédit: '='
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '=' → logprob: -0.5759395360946655
    2. ' =' → logprob: -0.8259395360946655
    3. ')' → logprob: -17.075939178466797
    4. '   ' → logprob: -17.325939178466797
    5. ' ' → logprob: -18.075939178466797
    6. '＝' → logprob: -18.325939178466797
    7. '  ' → logprob: -19.200939178466797
    8. ',' → logprob: -19.200939178466797
    9. '	' → logprob: -19.825939178466797
    10. '=create' → logprob: -20.325939178466797

Token 361: ' read' (ID: 1729)
  Prédit: 'read'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'read' → logprob: -0.12692810595035553
    2. ' read' → logprob: -2.1269280910491943
    3. '	read' → logprob: -17.501928329467773
    4. '   ' → logprob: -20.376928329467773
    5. '(read' → logprob: -20.876928329467773
    6. '_read' → logprob: -22.001928329467773
    7. ' ' → logprob: -22.126928329467773
    8. '  ' → logprob: -22.376928329467773
    9. '.read' → logprob: -22.876928329467773
    10. 'Read' → logprob: -23.251928329467773

Token 362: '_line' (ID: 14418)
  Prédit: '_line'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_line' → logprob: -1.8624639324116288e-06
    2. '_' → logprob: -13.625001907348633
    3. '_l' → logprob: -15.000001907348633
    4. '_lines' → logprob: -16.000001907348633
    5. '_LINE' → logprob: -16.750001907348633
    6. 'line' → logprob: -16.875001907348633
    7. '_lin' → logprob: -18.250001907348633
    8. ' _' → logprob: -19.250001907348633
    9. '_t' → logprob: -19.500001907348633
    10. '_li' → logprob: -19.625001907348633

Token 363: '()
' (ID: 1234)
  Prédit: '()
'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '()
' → logprob: -0.576301097869873
    2. '()' → logprob: -0.826301097869873
    3. '   ' → logprob: -8.201301574707031
    4. '()
' → logprob: -9.951301574707031
    5. '
' → logprob: -10.451301574707031
    6. '()

' → logprob: -12.201301574707031
    7. '()\' → logprob: -13.451301574707031
    8. 'def' → logprob: -14.076301574707031
    9. '(' → logprob: -14.701301574707031
    10. '(
' → logprob: -15.076301574707031

Token 364: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.013859758153557777
    2. 'results' → logprob: -4.388859748840332
    3. ' results' → logprob: -6.888859748840332
    4. '    
' → logprob: -9.138859748840332
    5. '
' → logprob: -9.513859748840332
    6. 'result' → logprob: -10.138859748840332
    7. 'print' → logprob: -10.513859748840332
    8. '	results' → logprob: -10.513859748840332
    9. '```' → logprob: -11.388859748840332
    10. 'for' → logprob: -11.388859748840332

Token 365: ' out' (ID: 842)
  Prédit: 'results'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'results' → logprob: -0.2540992796421051
    2. ' results' → logprob: -1.5040992498397827
    3. '   ' → logprob: -6.879099369049072
    4. 'res' → logprob: -7.879099369049072
    5. 'result' → logprob: -7.879099369049072
    6. 'r' → logprob: -8.254098892211914
    7. ' r' → logprob: -10.004098892211914
    8. ' result' → logprob: -10.629098892211914
    9. ' res' → logprob: -10.754098892211914
    10. '	results' → logprob: -10.879098892211914

Token 366: ' =' (ID: 314)
  Prédit: 'puts'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'puts' → logprob: -0.003778577782213688
    2. 'put' → logprob: -5.753778457641602
    3. ' =' → logprob: -8.503778457641602
    4. '=' → logprob: -8.628778457641602
    5. 's' → logprob: -8.753778457641602
    6. 'pts' → logprob: -10.503778457641602
    7. '   ' → logprob: -10.878778457641602
    8. '_put' → logprob: -11.628778457641602
    9. 'pus' → logprob: -13.003778457641602
    10. 'comes' → logprob: -13.378778457641602

Token 367: ' run' (ID: 2461)
  Prédit: 'run'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'run' → logprob: -0.006715370807796717
    2. ' run' → logprob: -5.006715297698975
    3. '(run' → logprob: -17.006715774536133
    4. '	run' → logprob: -19.006715774536133
    5. '   ' → logprob: -20.381715774536133
    6. '.run' → logprob: -20.506715774536133
    7. ' ' → logprob: -21.506715774536133
    8. '_run' → logprob: -21.881715774536133
    9. 'Run' → logprob: -22.756715774536133
    10. ' ' → logprob: -22.756715774536133

Token 368: '(t' (ID: 2025)
  Prédit: '(t'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(t' → logprob: -0.00021486106561496854
    2. '(' → logprob: -8.875214576721191
    3. ' (' → logprob: -9.500214576721191
    4. ' ' → logprob: -17.500215530395508
    5. '(
' → logprob: -18.125215530395508
    6. '(T' → logprob: -18.500215530395508
    7. '   ' → logprob: -19.000215530395508
    8. '```' → logprob: -19.750215530395508
    9. '(test' → logprob: -20.000215530395508
    10. '((' → logprob: -20.000215530395508

Token 369: ',' (ID: 11)
  Prédit: ','
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ',' → logprob: -4.723352049040841e-06
    2. ' ,' → logprob: -12.375004768371582
    3. ',a' → logprob: -14.875004768371582
    4. ',t' → logprob: -16.875003814697266
    5. '(' → logprob: -18.375003814697266
    6. ',
' → logprob: -19.875003814697266
    7. ',(' → logprob: -20.875003814697266
    8. ',b' → logprob: -21.125003814697266
    9. 'a' → logprob: -21.250003814697266
    10. 't' → logprob: -21.625003814697266

Token 370: ' a' (ID: 261)
  Prédit: 'a'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'a' → logprob: -0.25192907452583313
    2. ' a' → logprob: -1.5019290447235107
    3. '	a' → logprob: -17.626928329467773
    4. ' ' → logprob: -18.876928329467773
    5. '_a' → logprob: -21.001928329467773
    6. ' ' → logprob: -21.001928329467773
    7. ' а' → logprob: -21.126928329467773
    8. ')a' → logprob: -21.751928329467773
    9. ',a' → logprob: -21.876928329467773
    10. '"a' → logprob: -22.001928329467773

Token 371: ',' (ID: 11)
  Prédit: ','
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ',' → logprob: -8.41866585687967e-06
    2. ' ,' → logprob: -11.750008583068848
    3. ',b' → logprob: -14.625008583068848
    4. ',a' → logprob: -17.62500762939453
    5. ',
' → logprob: -18.37500762939453
    6. '‌,' → logprob: -21.25000762939453
    7. ',c' → logprob: -21.37500762939453
    8. ')' → logprob: -21.75000762939453
    9. ' ' → logprob: -21.87500762939453
    10. ',y' → logprob: -22.12500762939453

Token 372: ' b' (ID: 287)
  Prédit: 'b'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'b' → logprob: -0.16022412478923798
    2. ' b' → logprob: -1.9102240800857544
    3. '	b' → logprob: -21.03522491455078
    4. ' ' → logprob: -21.41022491455078
    5. ')b' → logprob: -22.41022491455078
    6. ',b' → logprob: -22.53522491455078
    7. '_b' → logprob: -22.78522491455078
    8. ' б' → logprob: -24.03522491455078
    9. '   ' → logprob: -24.03522491455078
    10. ',' → logprob: -24.78522491455078

Token 373: ',' (ID: 11)
  Prédit: ','
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ',' → logprob: -3.054500666621607e-06
    2. ' ,' → logprob: -12.75000286102295
    3. ',c' → logprob: -15.87500286102295
    4. 'c' → logprob: -17.125003814697266
    5. ',
' → logprob: -18.750003814697266
    6. ')' → logprob: -20.375003814697266
    7. '),' → logprob: -20.375003814697266
    8. '‌,' → logprob: -20.375003814697266
    9. '_,' → logprob: -20.625003814697266
    10. '```' → logprob: -21.250003814697266

Token 374: ' c' (ID: 274)
  Prédit: 'c'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'c' → logprob: -0.01416350994259119
    2. ' c' → logprob: -4.264163494110107
    3. '	c' → logprob: -18.264163970947266
    4. ' ' → logprob: -20.639163970947266
    5. ')c' → logprob: -20.764163970947266
    6. ',c' → logprob: -21.514163970947266
    7. '   ' → logprob: -21.514163970947266
    8. '  ' → logprob: -22.014163970947266
    9. '_c' → logprob: -22.764163970947266
    10. '$c' → logprob: -23.514163970947266

Token 375: ',' (ID: 11)
  Prédit: ','
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ',' → logprob: -2.8325677703833207e-05
    2. ',d' → logprob: -10.625028610229492
    3. ' ,' → logprob: -12.625028610229492
    4. 'd' → logprob: -14.250028610229492
    5. ')' → logprob: -18.750028610229492
    6. ' d' → logprob: -19.375028610229492
    7. ',
' → logprob: -19.625028610229492
    8. '[' → logprob: -20.125028610229492
    9. '),' → logprob: -20.125028610229492
    10. '‌,' → logprob: -20.500028610229492

Token 376: ' d' (ID: 272)
  Prédit: 'd'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'd' → logprob: -0.0015023599844425917
    2. ' d' → logprob: -6.501502513885498
    3. '   ' → logprob: -21.001502990722656
    4. ' ' → logprob: -21.001502990722656
    5. '	d' → logprob: -21.376502990722656
    6. '  ' → logprob: -21.501502990722656
    7. ')d' → logprob: -23.001502990722656
    8. '_d' → logprob: -24.126502990722656
    9. ' ' → logprob: -24.376502990722656
    10. ')' → logprob: -25.126502990722656

Token 377: ')
' (ID: 446)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')' → logprob: -0.6931562423706055
    2. ')
' → logprob: -0.6931562423706055
    3. ')
' → logprob: -11.693156242370605
    4. '   ' → logprob: -14.943156242370605
    5. ')

' → logprob: -15.443156242370605
    6. ' )
' → logprob: -15.943156242370605
    7. ' )' → logprob: -17.068157196044922
    8. ')`
' → logprob: -17.193157196044922
    9. '),' → logprob: -19.068157196044922
    10. ')`' → logprob: -19.068157196044922

Token 378: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.011946285143494606
    2. 'for' → logprob: -4.636946201324463
    3. ' for' → logprob: -6.136946201324463
    4. '<|end|>' → logprob: -11.136946678161621
    5. '	for' → logprob: -12.136946678161621
    6. '    
' → logprob: -12.636946678161621
    7. '
' → logprob: -13.136946678161621
    8. 'print' → logprob: -14.761946678161621
    9. '```' → logprob: -15.261946678161621
    10. '[' → logprob: -15.886946678161621

Token 379: ' for' (ID: 395)
  Prédit: 'for'
  Correct (stricte): False
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'for' (adapté à ' for') → logprob: -0.004676830023527145
    2. '   ' → logprob: -5.754676818847656
    3. ' for' → logprob: -6.504676818847656
    4. '
' → logprob: -13.629676818847656
    5. '	for' → logprob: -15.129676818847656
    6. 'print' → logprob: -16.379676818847656
    7. '    
' → logprob: -17.754676818847656
    8. ' ' → logprob: -19.879676818847656
    9. '```' → logprob: -20.129676818847656
    10. '
' → logprob: -20.629676818847656

Token 380: ' ans' (ID: 3345)
  Prédit: 'o'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'o' → logprob: -0.5062671899795532
    2. 'line' → logprob: -1.8812671899795532
    3. 'res' → logprob: -2.6312670707702637
    4. ' line' → logprob: -2.7562670707702637
    5. 'result' → logprob: -3.2562670707702637
    6. 'ans' → logprob: -4.006267070770264
    7. ' res' → logprob: -4.131267070770264
    8. 'x' → logprob: -4.631267070770264
    9. ' o' → logprob: -5.381267070770264
    10. 'answer' → logprob: -5.506267070770264

Token 381: ' in' (ID: 306)
  Prédit: ' in'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' in' → logprob: -0.0007196996593847871
    2. 'in' → logprob: -7.3757195472717285
    3. ' ' → logprob: -9.500720024108887
    4. '  ' → logprob: -11.875720024108887
    5. '_' → logprob: -12.875720024108887
    6. ' i' → logprob: -13.500720024108887
    7. '   ' → logprob: -13.500720024108887
    8. 'ine' → logprob: -13.750720024108887
    9. 'e' → logprob: -14.000720024108887
    10. '	in' → logprob: -14.250720024108887

Token 382: ' out' (ID: 842)
  Prédit: 'out'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'out' → logprob: -0.03804149478673935
    2. ' out' → logprob: -3.288041591644287
    3. '(out' → logprob: -20.038042068481445
    4. '	out' → logprob: -20.788042068481445
    5. '_out' → logprob: -22.413042068481445
    6. ' ' → logprob: -24.038042068481445
    7. '.out' → logprob: -24.413042068481445
    8. '[out' → logprob: -24.913042068481445
    9. '*out' → logprob: -25.038042068481445
    10. '   ' → logprob: -25.038042068481445

Token 383: ':
' (ID: 734)
  Prédit: ':'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ':' → logprob: -0.002488737925887108
    2. ':
' → logprob: -6.002488613128662
    3. '   ' → logprob: -11.75248908996582
    4. ' :' → logprob: -12.87748908996582
    5. 'print' → logprob: -14.12748908996582
    6. '):' → logprob: -14.62748908996582
    7. '       ' → logprob: -15.12748908996582
    8. '.' → logprob: -15.12748908996582
    9. ',' → logprob: -15.25248908996582
    10. ':

' → logprob: -15.75248908996582

Token 384: '       ' (ID: 309)
  Prédit: '       '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '       ' → logprob: -0.005322346929460764
    2. ' print' → logprob: -5.880322456359863
    3. 'print' → logprob: -6.005322456359863
    4. '   ' → logprob: -10.005322456359863
    5. '        
' → logprob: -14.130322456359863
    6. '
' → logprob: -14.255322456359863
    7. '```' → logprob: -14.630322456359863
    8. '           ' → logprob: -14.880322456359863
    9. '	print' → logprob: -15.255322456359863
    10. '<|end|>' → logprob: -15.380322456359863

Token 385: ' print' (ID: 2123)
  Prédit: 'print'
  Correct (stricte): False
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'print' (adapté à ' print') → logprob: -0.01962936669588089
    2. ' print' → logprob: -4.01962947845459
    3. '   ' → logprob: -6.51962947845459
    4. '       ' → logprob: -12.51962947845459
    5. '	print' → logprob: -14.76962947845459
    6. '```' → logprob: -16.394628524780273
    7. '
' → logprob: -18.269628524780273
    8. '.print' → logprob: -19.144628524780273
    9. ' ' → logprob: -19.519628524780273
    10. '  ' → logprob: -19.644628524780273

Token 386: '(ans' (ID: 70054)
  Prédit: '(ans'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(ans' → logprob: -1.981667537620524e-06
    2. '(' → logprob: -13.250001907348633
    3. 'ans' → logprob: -16.375001907348633
    4. '(answer' → logprob: -17.500001907348633
    5. ' (' → logprob: -19.500001907348633
    6. '()' → logprob: -19.750001907348633
    7. '(an' → logprob: -20.500001907348633
    8. '(
' → logprob: -20.625001907348633
    9. '	ans' → logprob: -21.250001907348633
    10. '((' → logprob: -22.750001907348633

Token 387: ')

' (ID: 1029)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ')' → logprob: -1.9361264946837764e-07
    2. ')
' → logprob: -16.25
    3. ' )' → logprob: -16.75
    4. '())' → logprob: -17.25
    5. '()' → logprob: -17.375
    6. ')`' → logprob: -18.25
    7. '))' → logprob: -19.125
    8. '   ' → logprob: -20.0
    9. '')' → logprob: -20.0
    10. '),' → logprob: -20.375

Token 388: 'if' (ID: 366)
  Prédit: 'if'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'if' → logprob: -8.900034299585968e-05
    2. 'main' → logprob: -10.000088691711426
    3. '#' → logprob: -10.375088691711426
    4. ' if' → logprob: -11.375088691711426
    5. 'import' → logprob: -15.125088691711426
    6. '```' → logprob: -16.000089645385742
    7. '<|end|>' → logprob: -16.250089645385742
    8. '
' → logprob: -16.625089645385742
    9. '#if' → logprob: -17.000089645385742
    10. '(main' → logprob: -17.500089645385742

Token 389: ' __' (ID: 2516)
  Prédit: ' __'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' __' → logprob: -0.09080146998167038
    2. '__' → logprob: -2.465801477432251
    3. ' ' → logprob: -7.090801239013672
    4. '_' → logprob: -7.090801239013672
    5. ' ' → logprob: -9.090801239013672
    6. '  ' → logprob: -10.465801239013672
    7. '_name' → logprob: -11.215801239013672
    8. ' _' → logprob: -11.215801239013672
    9. ' ' → logprob: -11.715801239013672
    10. 'name' → logprob: -12.840801239013672

Token 390: 'name' (ID: 897)
  Prédit: '__'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '__' → logprob: -0.15864335000514984
    2. ' __' → logprob: -2.2836432456970215
    3. ' ==' → logprob: -3.1586432456970215
    4. '==' → logprob: -6.7836432456970215
    5. '.__' → logprob: -7.1586432456970215
    6. ' .' → logprob: -9.78364372253418
    7. '__.__' → logprob: -9.78364372253418
    8. '__.' → logprob: -10.28364372253418
    9. '=="' → logprob: -10.40864372253418
    10. ' =="' → logprob: -10.40864372253418

Token 391: '__' (ID: 771)
  Prédit: '__'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '__' → logprob: -1.0087516784551553e-05
    2. '==' → logprob: -12.25001049041748
    3. '__.__' → logprob: -12.25001049041748
    4. ' ==' → logprob: -15.87501049041748
    5. '___' → logprob: -15.87501049041748
    6. '__.' → logprob: -16.375009536743164
    7. '____' → logprob: -17.000009536743164
    8. '_' → logprob: -17.500009536743164
    9. '__('' → logprob: -17.500009536743164
    10. '=="' → logprob: -18.250009536743164

Token 392: ' ==' (ID: 951)
  Prédit: '__'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '__' → logprob: -0.28809303045272827
    2. '==' → logprob: -1.913093090057373
    3. ' ==' → logprob: -2.288093090057373
    4. '=="' → logprob: -6.788093090057373
    5. '=='' → logprob: -9.913092613220215
    6. '_' → logprob: -10.413092613220215
    7. '___' → logprob: -12.163092613220215
    8. '=' → logprob: -12.538092613220215
    9. '"' → logprob: -12.663092613220215
    10. '===' → logprob: -13.038092613220215

Token 393: ' "__' (ID: 27367)
  Prédit: '"'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '"' → logprob: -0.0032068234868347645
    2. ''' → logprob: -5.753206729888916
    3. ' "__' → logprob: -10.628207206726074
    4. '__' → logprob: -12.253207206726074
    5. ' '__' → logprob: -16.128206253051758
    6. '"name' → logprob: -17.378206253051758
    7. '"user' → logprob: -18.003206253051758
    8. '"_' → logprob: -18.628206253051758
    9. '("__' → logprob: -18.753206253051758
    10. '"class' → logprob: -19.378206253051758

Token 394: 'main' (ID: 7731)
  Prédit: 'main'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'main' → logprob: -0.12759672105312347
    2. '__' → logprob: -2.127596616744995
    3. 'name' → logprob: -7.752596855163574
    4. '"' → logprob: -8.377596855163574
    5. ''' → logprob: -12.627596855163574
    6. '_main' → logprob: -13.752596855163574
    7. '___' → logprob: -14.002596855163574
    8. 'built' → logprob: -14.252596855163574
    9. 'm' → logprob: -14.627596855163574
    10. 'python' → logprob: -14.877596855163574

Token 395: '__":
' (ID: 49892)
  Prédit: '__":
'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '__":
' → logprob: -0.061976756900548935
    2. '__' → logprob: -2.811976671218872
    3. '__':
' → logprob: -11.686976432800293
    4. '__["' → logprob: -15.186976432800293
    5. '__.' → logprob: -15.686976432800293
    6. '__:' → logprob: -15.686976432800293
    7. '_' → logprob: -16.18697738647461
    8. '__("' → logprob: -17.06197738647461
    9. '__.__' → logprob: -17.18697738647461
    10. '__",' → logprob: -17.31197738647461

Token 396: '   ' (ID: 271)
  Prédit: 'main'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'main' → logprob: -0.2703518569469452
    2. '__' → logprob: -2.0203518867492676
    3. ' main' → logprob: -2.2703518867492676
    4. ' __' → logprob: -7.895351886749268
    5. '"' → logprob: -8.02035140991211
    6. '   ' → logprob: -8.64535140991211
    7. ' "__' → logprob: -10.14535140991211
    8. '	main' → logprob: -10.14535140991211
    9. '_main' → logprob: -10.77035140991211
    10. ''' → logprob: -10.89535140991211

Token 397: ' main' (ID: 2758)
  Prédit: 'main'
  Correct (stricte): False
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'main' (adapté à ' main') → logprob: -1.8624639324116288e-06
    2. ' main' → logprob: -13.250001907348633
    3. '	main' → logprob: -20.875001907348633
    4. 'import' → logprob: -23.750001907348633
    5. '   ' → logprob: -23.875001907348633
    6. '.main' → logprob: -25.125001907348633
    7. '(main' → logprob: -25.500001907348633
    8. '_main' → logprob: -26.000001907348633
    9. ' ' → logprob: -27.000001907348633
    10. 'mai' → logprob: -27.500001907348633

Token 398: '()' (ID: 416)
  Prédit: '.'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '.' → logprob: -0.3829144537448883
    2. '<|end|>' → logprob: -1.757914423942566
    3. '.f' → logprob: -3.2579145431518555
    4. 's' → logprob: -3.5079145431518555
    5. ',' → logprob: -4.2579145431518555
    6. ')' → logprob: -4.5079145431518555
    7. '(' → logprob: -4.5079145431518555
    8. '.fr' → logprob: -4.7579145431518555
    9. 'import' → logprob: -5.1329145431518555
    10. '<|end|>' → logprob: -5.5079145431518555


RÉSUMÉ:
--------------------------------------------------------------------------------
Total des tokens analysés: 396
Tokens correctement prédits (1ère position, stricte): 120
Tokens correctement prédits (1ère position, avec adaptation): 138
Tokens correctement prédits (top 10): 277
Précision stricte (1ère position): 30.30%
Précision adaptée (1ère position): 34.85%
Précision (top 10): 69.95%
================================================================================
