================================================================================
ANALYSE DE PRÉDICTION TOKEN PAR TOKEN (BATCH API)
Date: 2025-06-04 19:18:14
Modèle de tokenisation: gpt-4o-mini
================================================================================

SCRIPT ANALYSÉ:
--------------------------------------------------------------------------------
from sys import exit

n = int(input())
digits = (n // d) % 10 for d in (1, 10, 100)
if any(d == 7 for d in digits):
    print("Yes")
    exit()
print("No")
--------------------------------------------------------------------------------

RÉSULTATS D'ANALYSE TOKEN PAR TOKEN:
--------------------------------------------------------------------------------
Token 0: 'from' (ID: 2845)
  → Token d'amorce (pas de prédiction)

Token 1: ' sys' (ID: 12228)
  → Token d'amorce (pas de prédiction)

Token 2: ' import' (ID: 1588)
  → Token d'amorce (pas de prédiction)

Token 3: ' exit' (ID: 10654)
  Prédit: 'argv'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'argv' → logprob: -0.05142802372574806
    2. ' argv' → logprob: -3.4264280796051025
    3. 'exit' → logprob: -4.176427841186523
    4. ' exit' → logprob: -6.801427841186523
    5. 'stdout' → logprob: -7.301427841186523
    6. 'stdin' → logprob: -8.426427841186523
    7. 'path' → logprob: -8.801427841186523
    8. 'import' → logprob: -10.176427841186523
    9. 'stderr' → logprob: -10.426427841186523
    10. 'version' → logprob: -10.676427841186523

Token 4: '

' (ID: 279)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '(' → logprob: -0.016675377264618874
    2. '.' → logprob: -4.8916754722595215
    3. '\' → logprob: -6.0166754722595215
    4. '\n' → logprob: -6.1416754722595215
    5. '(
' → logprob: -6.5166754722595215
    6. '
' → logprob: -7.6416754722595215
    7. ':' → logprob: -7.7666754722595215
    8. '\(' → logprob: -7.7666754722595215
    9. ',' → logprob: -7.8916754722595215
    10. '()' → logprob: -8.016674995422363

Token 5: 'n' (ID: 77)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '(' → logprob: -0.06154944375157356
    2. '\n' → logprob: -3.311549425125122
    3. '
' → logprob: -5.186549663543701
    4. '()' → logprob: -5.311549663543701
    5. '

' → logprob: -5.436549663543701
    6. '\' → logprob: -6.311549663543701
    7. 'newline' → logprob: -6.436549663543701
    8. '\(' → logprob: -6.936549663543701
    9. '<|end|>' → logprob: -7.186549663543701
    10. ',' → logprob: -7.436549663543701

Token 6: ' =' (ID: 314)
  Prédit: '='
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '=' → logprob: -0.21210148930549622
    2. 'u' → logprob: -2.462101459503174
    3. ' ' → logprob: -2.962101459503174
    4. ' =' → logprob: -4.087101459503174
    5. ',' → logprob: -4.962101459503174
    6. '_' → logprob: -5.087101459503174
    7. '.' → logprob: -5.087101459503174
    8. ')' → logprob: -5.712101459503174
    9. ':' → logprob: -5.712101459503174
    10. '(' → logprob: -6.462101459503174

Token 7: ' int' (ID: 677)
  Prédit: ' int'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' int' → logprob: -0.22527377307415009
    2. ' ' → logprob: -1.8502737283706665
    3. 'int' → logprob: -3.350273847579956
    4. '0' → logprob: -5.600273609161377
    5. ' input' → logprob: -5.725273609161377
    6. 'input' → logprob: -6.975273609161377
    7. '1' → logprob: -7.225273609161377
    8. '10' → logprob: -7.850273609161377
    9. '5' → logprob: -9.850274085998535
    10. '=int' → logprob: -10.100274085998535

Token 8: '(input' (ID: 10054)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '(' → logprob: -9.043078898685053e-05
    2. ' (' → logprob: -10.500090599060059
    3. '(n' → logprob: -10.500090599060059
    4. '('' → logprob: -11.625090599060059
    5. '(
' → logprob: -12.000090599060059
    6. '```' → logprob: -12.875090599060059
    7. ''' → logprob: -12.875090599060059
    8. '(`' → logprob: -13.125090599060059
    9. ')' → logprob: -13.250090599060059
    10. '()' → logprob: -13.375090599060059

Token 9: '())
' (ID: 4574)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ')' → logprob: -0.3966153860092163
    2. '(' → logprob: -1.1466153860092163
    3. '()' → logprob: -4.771615505218506
    4. '())' → logprob: -7.271615505218506
    5. '))' → logprob: -8.771615028381348
    6. '('' → logprob: -9.271615028381348
    7. '(
' → logprob: -9.521615028381348
    8. '')' → logprob: -10.021615028381348
    9. '`)' → logprob: -10.146615028381348
    10. '(

' → logprob: -10.646615028381348

Token 10: 'digits' (ID: 135574)
  Prédit: 'if'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'if' → logprob: -0.3819046914577484
    2. 'i' → logprob: -1.8819047212600708
    3. ' if' → logprob: -2.2569046020507812
    4. ' ' → logprob: -3.2569046020507812
    5. 'for' → logprob: -5.256904602050781
    6. ')' → logprob: -5.506904602050781
    7. '+' → logprob: -5.756904602050781
    8. ' 
' → logprob: -6.756904602050781
    9. 's' → logprob: -6.756904602050781
    10. ' for' → logprob: -7.006904602050781

Token 11: ' =' (ID: 314)
  Prédit: '['
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '[' → logprob: -0.179096519947052
    2. '_' → logprob: -2.3040964603424072
    3. 's' → logprob: -3.0540964603424072
    4. '(' → logprob: -5.304096698760986
    5. ')' → logprob: -5.679096698760986
    6. '.' → logprob: -6.054096698760986
    7. '=' → logprob: -6.054096698760986
    8. '_count' → logprob: -7.179096698760986
    9. '[]' → logprob: -7.429096698760986
    10. '_counts' → logprob: -7.679096698760986

Token 12: ' (' (ID: 350)
  Prédit: 'list'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'list' → logprob: -1.0070838928222656
    2. ' []' → logprob: -1.1320838928222656
    3. '[]' → logprob: -1.8820838928222656
    4. ' list' → logprob: -2.1320838928222656
    5. 'str' → logprob: -4.132083892822266
    6. 'input' → logprob: -4.632083892822266
    7. ' str' → logprob: -5.632083892822266
    8. '[' → logprob: -5.757083892822266
    9. ' ' → logprob: -5.882083892822266
    10. ' [' → logprob: -6.132083892822266

Token 13: 'n' (ID: 77)
  Prédit: 'str'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'str' → logprob: -0.6754139065742493
    2. 'input' → logprob: -1.5504138469696045
    3. ')' → logprob: -1.8004138469696045
    4. 'int' → logprob: -4.050414085388184
    5. '[int' → logprob: -4.175414085388184
    6. ' str' → logprob: -4.300414085388184
    7. ''' → logprob: -4.800414085388184
    8. '[i' → logprob: -4.925414085388184
    9. 'range' → logprob: -5.050414085388184
    10. 'n' → logprob: -5.050414085388184

Token 14: ' //' (ID: 602)
  Prédit: ' %'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' %' → logprob: -0.5422307848930359
    2. '%' → logprob: -1.2922308444976807
    3. ')' → logprob: -2.0422308444976807
    4. ' )' → logprob: -4.792230606079102
    5. ',)' → logprob: -6.167230606079102
    6. ' //' → logprob: -6.542230606079102
    7. ',' → logprob: -7.042230606079102
    8. '**' → logprob: -8.167230606079102
    9. ' %)' → logprob: -8.917230606079102
    10. ' ' → logprob: -8.917230606079102

Token 15: ' d' (ID: 272)
  Prédit: '10'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '10' → logprob: -0.06760251522064209
    2. ' ' → logprob: -2.8176026344299316
    3. '100' → logprob: -5.192602634429932
    4. '1' → logprob: -9.817602157592773
    5. ')' → logprob: -13.067602157592773
    6. '  ' → logprob: -13.942602157592773
    7. '2' → logprob: -14.317602157592773
    8. ' ' → logprob: -14.692602157592773
    9. '```' → logprob: -14.755102157592773
    10. '60' → logprob: -15.130102157592773

Token 16: ')' (ID: 8)
  Prédit: '1'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '1' → logprob: -1.0074944496154785
    2. '10' → logprob: -1.1324944496154785
    3. '2' → logprob: -1.8824944496154785
    4. ')' → logprob: -2.2574944496154785
    5. 'igits' → logprob: -4.0074944496154785
    6. 'igit' → logprob: -4.1324944496154785
    7. 'iv' → logprob: -5.2574944496154785
    8. 'i' → logprob: -5.2574944496154785
    9. '100' → logprob: -5.6324944496154785
    10. ' ' → logprob: -6.2574944496154785

Token 17: ' %' (ID: 1851)
  Prédit: '2'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '2' → logprob: -0.2394210696220398
    2. '1' → logprob: -2.6144211292266846
    3. ')' → logprob: -2.9894211292266846
    4. ' ' → logprob: -3.1144211292266846
    5. '10' → logprob: -3.6144211292266846
    6. ' )' → logprob: -4.7394208908081055
    7. '0' → logprob: -5.8644208908081055
    8. '9' → logprob: -6.2394208908081055
    9. '4' → logprob: -7.2394208908081055
    10. 'igits' → logprob: -7.3644208908081055

Token 18: ' ' (ID: 220)
  Prédit: '10'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '10' → logprob: -0.00044068231363780797
    2. '1' → logprob: -7.75044059753418
    3. '100' → logprob: -11.62544059753418
    4. ' ' → logprob: -14.00044059753418
    5. '```' → logprob: -16.50044059753418
    6. '0' → logprob: -18.00044059753418
    7. '9' → logprob: -18.62544059753418
    8. '101' → logprob: -18.75044059753418
    9. '(' → logprob: -18.75044059753418
    10. '`' → logprob: -19.12544059753418

Token 19: '10' (ID: 702)
  Prédit: '10'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '10' → logprob: -0.00021093101531732827
    2. '1' → logprob: -8.500210762023926
    3. '100' → logprob: -12.125210762023926
    4. ' ' → logprob: -13.250210762023926
    5. '```' → logprob: -16.000211715698242
    6. '9' → logprob: -18.250211715698242
    7. '0' → logprob: -18.375211715698242
    8. 'd' → logprob: -18.750211715698242
    9. '`' → logprob: -18.875211715698242
    10. '(' → logprob: -19.000211715698242

Token 20: ' for' (ID: 395)
  Prédit: '1'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '1' → logprob: -0.5228914618492126
    2. '2' → logprob: -1.3978915214538574
    3. 'd' → logprob: -2.6478915214538574
    4. ')' → logprob: -3.2728915214538574
    5. '10' → logprob: -3.8978915214538574
    6. '0' → logprob: -4.272891521453857
    7. ' ' → logprob: -4.772891521453857
    8. '4' → logprob: -5.522891521453857
    9. '9' → logprob: -6.022891521453857
    10. ' )' → logprob: -8.3978910446167

Token 21: ' d' (ID: 272)
  Prédit: ' d'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' d' → logprob: -0.2292345017194748
    2. 'd' → logprob: -1.6042344570159912
    3. ' ' → logprob: -5.60423469543457
    4. '_' → logprob: -9.35423469543457
    5. '  ' → logprob: -11.10423469543457
    6. '_d' → logprob: -11.35423469543457
    7. ' ' → logprob: -12.22923469543457
    8. ' _' → logprob: -12.85423469543457
    9. '	d' → logprob: -12.97923469543457
    10. ')' → logprob: -12.97923469543457

Token 22: ' in' (ID: 306)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(' → logprob: -0.009496456943452358
    2. '1' → logprob: -5.634496688842773
    3. 'in' → logprob: -6.884496688842773
    4. 'd' → logprob: -7.134496688842773
    5. ' (' → logprob: -7.384496688842773
    6. ' in' → logprob: -7.509496688842773
    7. '[' → logprob: -7.884496688842773
    8. '2' → logprob: -7.884496688842773
    9. ' ' → logprob: -7.884496688842773
    10. '10' → logprob: -8.009496688842773

Token 23: ' (' (ID: 350)
  Prédit: ' range'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' range' → logprob: -0.5220476984977722
    2. '[' → logprob: -1.272047758102417
    3. 'range' → logprob: -2.397047758102417
    4. ' ' → logprob: -4.647047519683838
    5. '(' → logprob: -4.772047519683838
    6. '10' → logprob: -5.147047519683838
    7. ' [' → logprob: -5.272047519683838
    8. ' (' → logprob: -5.522047519683838
    9. '(range' → logprob: -6.397047519683838
    10. '1' → logprob: -8.272047996520996

Token 24: '1' (ID: 16)
  Prédit: '10'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '10' → logprob: -0.012001062743365765
    2. '100' → logprob: -4.637001037597656
    3. '1' → logprob: -7.012001037597656
    4. '[' → logprob: -7.387001037597656
    5. '(' → logprob: -7.637001037597656
    6. ' ' → logprob: -8.512001037597656
    7. ')' → logprob: -11.512001037597656
    8. '```' → logprob: -11.762001037597656
    9. 'range' → logprob: -12.262001037597656
    10. '   ' → logprob: -12.762001037597656

Token 25: ',' (ID: 11)
  Prédit: '0'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '0' → logprob: -0.25319135189056396
    2. ',' → logprob: -1.503191351890564
    3. ' ,' → logprob: -7.2531914710998535
    4. '000' → logprob: -8.878190994262695
    5. ' ' → logprob: -9.003190994262695
    6. '00' → logprob: -9.253190994262695
    7. '10' → logprob: -9.753190994262695
    8. ',
' → logprob: -10.378190994262695
    9. ')' → logprob: -11.003190994262695
    10. '2' → logprob: -11.128190994262695

Token 26: ' ' (ID: 220)
  Prédit: '10'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '10' → logprob: -0.0036025596782565117
    2. ' ' → logprob: -5.628602504730225
    3. '1' → logprob: -13.878602981567383
    4. '100' → logprob: -14.003602981567383
    5. '```' → logprob: -14.628602981567383
    6. '  ' → logprob: -15.628602981567383
    7. '[' → logprob: -16.753602981567383
    8. ' [' → logprob: -17.253602981567383
    9. '   ' → logprob: -17.378602981567383
    10. '    ' → logprob: -18.378602981567383

Token 27: '10' (ID: 702)
  Prédit: '10'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '10' → logprob: -0.00011152983643114567
    2. ' ' → logprob: -9.12511157989502
    3. '100' → logprob: -13.75011157989502
    4. '1' → logprob: -14.50011157989502
    5. '```' → logprob: -15.12511157989502
    6. '  ' → logprob: -15.25011157989502
    7. '0' → logprob: -15.37511157989502
    8. '   ' → logprob: -15.87511157989502
    9. ')' → logprob: -17.312610626220703
    10. '۱۰' → logprob: -17.812610626220703

Token 28: ',' (ID: 11)
  Prédit: ','
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ',' → logprob: -0.02375689521431923
    2. ' ,' → logprob: -3.773756980895996
    3. ')' → logprob: -8.148756980895996
    4. '),' → logprob: -10.148756980895996
    5. '0' → logprob: -10.273756980895996
    6. ',
' → logprob: -10.273756980895996
    7. ',)' → logprob: -10.273756980895996
    8. ' ' → logprob: -11.523756980895996
    9. ',

' → logprob: -11.773756980895996
    10. '*' → logprob: -11.773756980895996

Token 29: ' ' (ID: 220)
  Prédit: '100'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '100' → logprob: -4.084206375409849e-05
    2. ' ' → logprob: -10.125041007995605
    3. '```' → logprob: -14.625041007995605
    4. '<|end|>' → logprob: -16.25004005432129
    5. '1' → logprob: -16.87504005432129
    6. '  ' → logprob: -17.00004005432129
    7. '10' → logprob: -17.00004005432129
    8. '0' → logprob: -17.62504005432129
    9. '１００' → logprob: -18.43754005432129
    10. ')' → logprob: -18.56254005432129

Token 30: '100' (ID: 1353)
  Prédit: '100'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '100' → logprob: -1.3856492842023727e-06
    2. ' ' → logprob: -13.875000953674316
    3. '```' → logprob: -15.500000953674316
    4. '10' → logprob: -16.750001907348633
    5. '1' → logprob: -17.375001907348633
    6. '  ' → logprob: -18.125001907348633
    7. '0' → logprob: -18.125001907348633
    8. '   ' → logprob: -19.625001907348633
    9. '１００' → logprob: -20.312501907348633
    10. '{' → logprob: -20.437501907348633

Token 31: ')
' (ID: 446)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')' → logprob: -2.057743949990254e-05
    2. ',' → logprob: -11.125020980834961
    3. '),' → logprob: -13.000020980834961
    4. ' )' → logprob: -13.750020980834961
    5. '))' → logprob: -14.500020980834961
    6. '```' → logprob: -14.875020980834961
    7. '(' → logprob: -15.125020980834961
    8. '   ' → logprob: -15.750020980834961
    9. ')))' → logprob: -16.25002098083496
    10. ')
' → logprob: -16.25002098083496

Token 32: 'if' (ID: 366)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '(' → logprob: -0.6411257982254028
    2. ')' → logprob: -0.7661257982254028
    3. '[' → logprob: -5.266125679016113
    4. ',' → logprob: -6.016125679016113
    5. ']' → logprob: -8.266125679016113
    6. '(
' → logprob: -8.266125679016113
    7. '#' → logprob: -9.516125679016113
    8. '()' → logprob: -9.766125679016113
    9. '```' → logprob: -9.766125679016113
    10. ' (' → logprob: -10.141125679016113

Token 33: ' any' (ID: 1062)
  Prédit: ' ('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' (' → logprob: -0.72059565782547
    2. '(' → logprob: -1.4705955982208252
    3. ' ' → logprob: -2.345595598220825
    4. '[' → logprob: -3.095595598220825
    5. ' not' → logprob: -3.345595598220825
    6. ' [' → logprob: -3.720595598220825
    7. ' n' → logprob: -3.720595598220825
    8. ' all' → logprob: -3.845595598220825
    9. ' isinstance' → logprob: -4.345595836639404
    10. 'n' → logprob: -4.845595836639404

Token 34: '(d' (ID: 2572)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '(' → logprob: -0.11148632317781448
    2. ' (' → logprob: -2.3614864349365234
    3. '[' → logprob: -4.611486434936523
    4. ' ' → logprob: -7.611486434936523
    5. ')' → logprob: -8.986486434936523
    6. ' [' → logprob: -9.236486434936523
    7. '```' → logprob: -9.736486434936523
    8. '[]' → logprob: -9.861486434936523
    9. 'space' → logprob: -9.861486434936523
    10. 'digit' → logprob: -10.111486434936523

Token 35: ' ==' (ID: 951)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ')' → logprob: -0.1543096899986267
    2. ' in' → logprob: -2.7793097496032715
    3. '>' → logprob: -3.6543097496032715
    4. ' not' → logprob: -4.1543097496032715
    5. 'in' → logprob: -4.5293097496032715
    6. '==' → logprob: -5.1543097496032715
    7. ' >' → logprob: -5.5293097496032715
    8. 'd' → logprob: -5.5293097496032715
    9. 'not' → logprob: -5.9043097496032715
    10. ' d' → logprob: -6.1543097496032715

Token 36: ' ' (ID: 220)
  Prédit: '0'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '0' → logprob: -0.3910798728466034
    2. ' ' → logprob: -1.1410799026489258
    3. '9' → logprob: -6.641079902648926
    4. ' d' → logprob: -6.891079902648926
    5. 'd' → logprob: -7.516079902648926
    6. 'digit' → logprob: -7.766079902648926
    7. ' digit' → logprob: -8.641079902648926
    8. '3' → logprob: -8.891079902648926
    9. '4' → logprob: -9.141079902648926
    10. '7' → logprob: -9.266079902648926

Token 37: '7' (ID: 22)
  Prédit: '0'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '0' → logprob: -0.08571070432662964
    2. ' ' → logprob: -2.8357107639312744
    3. '9' → logprob: -4.710710525512695
    4. '5' → logprob: -5.335710525512695
    5. '7' → logprob: -6.460710525512695
    6. '4' → logprob: -6.585710525512695
    7. 'digit' → logprob: -6.710710525512695
    8. '2' → logprob: -6.960710525512695
    9. 'd' → logprob: -6.960710525512695
    10. '1' → logprob: -7.085710525512695

Token 38: ' for' (ID: 395)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')' → logprob: -0.06452801078557968
    2. ' for' → logprob: -2.939527988433838
    3. 'for' → logprob: -5.189527988433838
    4. '):' → logprob: -5.564527988433838
    5. ' ' → logprob: -9.189528465270996
    6. '  ' → logprob: -10.439528465270996
    7. ' )' → logprob: -10.939528465270996
    8. ' ' → logprob: -11.314528465270996
    9. ':' → logprob: -12.064528465270996
    10. ' in' → logprob: -12.189528465270996

Token 39: ' d' (ID: 272)
  Prédit: ' d'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' d' → logprob: -0.2902680039405823
    2. 'd' → logprob: -2.0402679443359375
    3. ' digits' → logprob: -2.2902679443359375
    4. 'digits' → logprob: -4.1652679443359375
    5. ' ' → logprob: -6.0402679443359375
    6. ' digit' → logprob: -6.9152679443359375
    7. ')' → logprob: -7.4152679443359375
    8. 'digit' → logprob: -8.040267944335938
    9. ' )' → logprob: -8.165267944335938
    10. '_' → logprob: -8.665267944335938

Token 40: ' in' (ID: 306)
  Prédit: ' in'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' in' → logprob: -0.5649796724319458
    2. 'in' → logprob: -1.3149796724319458
    3. ')' → logprob: -1.8149796724319458
    4. ' )' → logprob: -9.064979553222656
    5. ' ' → logprob: -9.439979553222656
    6. 's' → logprob: -9.564979553222656
    7. 'd' → logprob: -12.314979553222656
    8. '):' → logprob: -12.439979553222656
    9. '),' → logprob: -12.439979553222656
    10. 'digits' → logprob: -12.439979553222656

Token 41: ' digits' (ID: 37806)
  Prédit: 'digits'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'digits' → logprob: -0.47418341040611267
    2. ' digits' → logprob: -0.9741834402084351
    3. ')' → logprob: -9.224183082580566
    4. ' )' → logprob: -12.474183082580566
    5. ' ' → logprob: -13.599183082580566
    6. 'd' → logprob: -14.224183082580566
    7. 'digit' → logprob: -14.349183082580566
    8. 'igits' → logprob: -14.599183082580566
    9. '_digits' → logprob: -15.099183082580566
    10. 'Digits' → logprob: -15.849183082580566

Token 42: '):
' (ID: 1883)
  Prédit: '):'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '):' → logprob: -0.005250710528343916
    2. ')' → logprob: -5.255250930786133
    3. ':' → logprob: -11.505250930786133
    4. ' ):' → logprob: -12.130250930786133
    5. '):
' → logprob: -13.880250930786133
    6. ')):' → logprob: -16.130250930786133
    7. ')：' → logprob: -16.130250930786133
    8. '():' → logprob: -17.005250930786133
    9. '),' → logprob: -17.130250930786133
    10. '）：' → logprob: -17.505250930786133

Token 43: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.08527743071317673
    2. '	exit' → logprob: -3.0852773189544678
    3. ' exit' → logprob: -3.7102773189544678
    4. 'exit' → logprob: -4.710277557373047
    5. '   ' → logprob: -6.335277557373047
    6. '```' → logprob: -8.460277557373047
    7. '_exit' → logprob: -9.210277557373047
    8. '(exit' → logprob: -9.210277557373047
    9. '   ' → logprob: -9.960277557373047
    10. '    
' → logprob: -10.085277557373047

Token 44: ' print' (ID: 2123)
  Prédit: ' exit'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' exit' → logprob: -0.20569217205047607
    2. '   ' → logprob: -2.0806922912597656
    3. 'exit' → logprob: -2.8306922912597656
    4. '	exit' → logprob: -6.455692291259766
    5. '   ' → logprob: -8.955692291259766
    6. '_exit' → logprob: -9.205692291259766
    7. '(exit' → logprob: -9.455692291259766
    8. '```' → logprob: -9.955692291259766
    9. 'Exit' → logprob: -10.455692291259766
    10. ' ' → logprob: -10.830692291259766

Token 45: '("' (ID: 568)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(' → logprob: -0.2906476557254791
    2. '("' → logprob: -1.4156476259231567
    3. '('' → logprob: -4.790647506713867
    4. '"' → logprob: -7.665647506713867
    5. '(":' → logprob: -8.040647506713867
    6. '()' → logprob: -8.790647506713867
    7. '(True' → logprob: -9.665647506713867
    8. ''' → logprob: -10.540647506713867
    9. '7' → logprob: -10.790647506713867
    10. '(-' → logprob: -10.915647506713867

Token 46: 'Yes' (ID: 13022)
  Prédit: 'l'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'l' → logprob: -1.4172019958496094
    2. 'Boom' → logprob: -1.6672019958496094
    3. 'Yes' → logprob: -2.4172019958496094
    4. 'BO' → logprob: -2.4172019958496094
    5. 'boom' → logprob: -2.5422019958496094
    6. 'yes' → logprob: -3.0422019958496094
    7. '7' → logprob: -3.1672019958496094
    8. 'Hello' → logprob: -3.4172019958496094
    9. 'Sorry' → logprob: -3.5422019958496094
    10. 'YES' → logprob: -3.6672019958496094

Token 47: '")
' (ID: 1896)
  Prédit: '")'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '")' → logprob: -0.001084971008822322
    2. '")
' → logprob: -7.001084804534912
    3. ')' → logprob: -8.87608528137207
    4. ')")' → logprob: -10.87608528137207
    5. '!")' → logprob: -11.50108528137207
    6. '")
' → logprob: -12.87608528137207
    7. '"' → logprob: -13.75108528137207
    8. '7' → logprob: -16.00108528137207
    9. ' ")' → logprob: -16.00108528137207
    10. '")

' → logprob: -16.12608528137207

Token 48: '   ' (ID: 271)
  Prédit: 'else'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'else' → logprob: -0.001504982472397387
    2. ')' → logprob: -7.376504898071289
    3. ' else' → logprob: -7.501504898071289
    4. 'exit' → logprob: -8.376504898071289
    5. '<|end|>' → logprob: -10.001504898071289
    6. '```' → logprob: -10.251504898071289
    7. '
' → logprob: -12.376504898071289
    8. '[]' → logprob: -13.751504898071289
    9. 'elif' → logprob: -13.751504898071289
    10. ' ' → logprob: -13.876504898071289

Token 49: ' exit' (ID: 10654)
  Prédit: 'else'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'else' → logprob: -0.01614134944975376
    2. 'exit' (adapté à ' exit') → logprob: -4.141141414642334
    3. ' else' → logprob: -10.141140937805176
    4. 'elif' → logprob: -10.266140937805176
    5. '   ' → logprob: -11.266140937805176
    6. ')' → logprob: -11.891140937805176
    7. '```' → logprob: -12.266140937805176
    8. '	exit' → logprob: -12.516140937805176
    9. ' exit' → logprob: -13.516140937805176
    10. '
' → logprob: -13.516140937805176

Token 50: '()
' (ID: 1234)
  Prédit: '()'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '()' → logprob: -0.00031508569372817874
    2. '(' → logprob: -8.125314712524414
    3. '()
' → logprob: -11.250314712524414
    4. ' ()' → logprob: -13.500314712524414
    5. '()

' → logprob: -13.500314712524414
    6. '()`' → logprob: -13.625314712524414
    7. '();' → logprob: -15.250314712524414
    8. '`()' → logprob: -15.250314712524414
    9. '())' → logprob: -15.375314712524414
    10. '()<' → logprob: -15.625314712524414

Token 51: 'print' (ID: 1598)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ')' → logprob: -0.04416951909661293
    2. ':' → logprob: -3.2941694259643555
    3. '(' → logprob: -6.0441694259643555
    4. '<|end|>' → logprob: -6.1691694259643555
    5. ']' → logprob: -7.9191694259643555
    6. '[' → logprob: -8.044169425964355
    7. '):' → logprob: -8.544169425964355
    8. '```' → logprob: -8.794169425964355
    9. '#' → logprob: -9.044169425964355
    10. ',' → logprob: -9.294169425964355

Token 52: '("' (ID: 568)
  Prédit: '()'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '()' → logprob: -0.48995861411094666
    2. '("' → logprob: -1.239958643913269
    3. '(' → logprob: -2.3649585247039795
    4. '("")' → logprob: -5.614958763122559
    5. '(False' → logprob: -8.864958763122559
    6. '('' → logprob: -9.364958763122559
    7. '("("' → logprob: -9.364958763122559
    8. '(True' → logprob: -11.114958763122559
    9. '(None' → logprob: -11.239958763122559
    10. '("""' → logprob: -12.989958763122559

Token 53: 'No' (ID: 3160)
  Prédit: 'No'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'No' → logprob: -1.306760805164231e-05
    2. '"No' → logprob: -11.37501335144043
    3. 'NO' → logprob: -14.62501335144043
    4. ' No' → logprob: -14.87501335144043
    5. 'Yes' → logprob: -15.12501335144043
    6. '"' → logprob: -15.25001335144043
    7. '")' → logprob: -15.87501335144043
    8. 'no' → logprob: -16.62501335144043
    9. '(No' → logprob: -18.12501335144043
    10. 'Sorry' → logprob: -18.25001335144043

Token 54: '")' (ID: 1405)
  Prédit: '")'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '")' → logprob: -0.1270064264535904
    2. ')' → logprob: -2.1270065307617188
    3. '```' → logprob: -10.377006530761719
    4. '`)' → logprob: -11.002006530761719
    5. '"' → logprob: -11.127006530761719
    6. ')")' → logprob: -11.627006530761719
    7. '')' → logprob: -12.252006530761719
    8. '")
' → logprob: -14.627006530761719
    9. '”)' → logprob: -14.627006530761719
    10. '»)' → logprob: -15.252006530761719


RÉSUMÉ:
--------------------------------------------------------------------------------
Total des tokens analysés: 52
Tokens correctement prédits (1ère position, stricte): 11
Tokens correctement prédits (1ère position, avec adaptation): 11
Tokens correctement prédits (top 10): 35
Précision stricte (1ère position): 21.15%
Précision adaptée (1ère position): 21.15%
Précision (top 10): 67.31%
================================================================================
