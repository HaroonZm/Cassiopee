================================================================================
ANALYSE DE PRÉDICTION TOKEN PAR TOKEN (BATCH API)
Date: 2025-06-04 20:01:23
Modèle de tokenisation: gpt-4o-mini
================================================================================

SCRIPT ANALYSÉ:
--------------------------------------------------------------------------------
n, k = [int(x) for x in input().split()]   # lecture des variables, j'aime bien les listes

# le calcul est simple mais bon, faisons comme ça
result = n-k+1
print(result) # affiche le résultat, j'espère que c'est correct
--------------------------------------------------------------------------------

RÉSULTATS D'ANALYSE TOKEN PAR TOKEN:
--------------------------------------------------------------------------------
Token 0: 'n' (ID: 77)
  → Token d'amorce (pas de prédiction)

Token 1: ',' (ID: 11)
  → Token d'amorce (pas de prédiction)

Token 2: ' k' (ID: 372)
  → Token d'amorce (pas de prédiction)

Token 3: ' =' (ID: 314)
  Prédit: '='
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '=' → logprob: -0.10184740275144577
    2. ' =' → logprob: -2.3518474102020264
    3. ',' → logprob: -6.476847171783447
    4. ' ' → logprob: -9.976847648620605
    5. '=
' → logprob: -11.601847648620605
    6. ')' → logprob: -11.851847648620605
    7. '_' → logprob: -12.226847648620605
    8. ' =
' → logprob: -12.351847648620605
    9. '```' → logprob: -12.351847648620605
    10. ''' → logprob: -12.476847648620605

Token 4: ' [' (ID: 723)
  Prédit: ' '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' ' → logprob: -0.08417297154664993
    2. '0' → logprob: -3.4591729640960693
    3. ' map' → logprob: -3.5841729640960693
    4. 'map' → logprob: -5.084173202514648
    5. 'input' → logprob: -5.209173202514648
    6. '10' → logprob: -5.459173202514648
    7. ' input' → logprob: -5.709173202514648
    8. ' int' → logprob: -6.834173202514648
    9. 'int' → logprob: -7.834173202514648
    10. ' n' → logprob: -7.959173202514648

Token 5: 'int' (ID: 491)
  Prédit: 'int'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'int' → logprob: -0.1313491016626358
    2. '0' → logprob: -2.1313490867614746
    3. 'i' → logprob: -5.506349086761475
    4. '1' → logprob: -9.131349563598633
    5. ']' → logprob: -9.506349563598633
    6. ']int' → logprob: -9.506349563598633
    7. ' int' → logprob: -10.256349563598633
    8. '```' → logprob: -10.881349563598633
    9. 'x' → logprob: -11.131349563598633
    10. 'n' → logprob: -12.506349563598633

Token 6: '(x' (ID: 4061)
  Prédit: '(x'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(x' → logprob: -0.5709108710289001
    2. '(i' → logprob: -1.320910930633545
    3. '(' → logprob: -1.820910930633545
    4. ']' → logprob: -6.195910930633545
    5. '(item' → logprob: -6.320910930633545
    6. '(s' → logprob: -7.195910930633545
    7. '(token' → logprob: -7.320910930633545
    8. '(c' → logprob: -8.320910453796387
    9. '(a' → logprob: -8.695910453796387
    10. '()]' → logprob: -9.070910453796387

Token 7: ')' (ID: 8)
  Prédit: ')'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')' → logprob: -0.0001375089050270617
    2. ')]' → logprob: -9.000137329101562
    3. '(x' → logprob: -11.750137329101562
    4. ']' → logprob: -13.750137329101562
    5. ')])' → logprob: -13.875137329101562
    6. ' )' → logprob: -14.125137329101562
    7. ')x' → logprob: -14.250137329101562
    8. '),' → logprob: -14.875137329101562
    9. ')...' → logprob: -14.875137329101562
    10. '(' → logprob: -15.250137329101562

Token 8: ' for' (ID: 395)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(' → logprob: -0.6026795506477356
    2. 'for' → logprob: -1.8526794910430908
    3. ' for' → logprob: -1.9776794910430908
    4. '(x' → logprob: -2.227679491043091
    5. ']' → logprob: -3.602679491043091
    6. ')' → logprob: -4.72767972946167
    7. '(i' → logprob: -5.47767972946167
    8. '(token' → logprob: -6.10267972946167
    9. '(line' → logprob: -6.22767972946167
    10. 'token' → logprob: -6.97767972946167

Token 9: ' x' (ID: 1215)
  Prédit: ' input'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' input' → logprob: -0.03810896724462509
    2. 'input' → logprob: -3.288109064102173
    3. ' in' → logprob: -10.163108825683594
    4. ' ' → logprob: -11.163108825683594
    5. ' x' → logprob: -12.538108825683594
    6. ' range' → logprob: -12.538108825683594
    7. '=input' → logprob: -13.413108825683594
    8. ' s' → logprob: -13.663108825683594
    9. ' raw' → logprob: -14.288108825683594
    10. '(input' → logprob: -14.538108825683594

Token 10: ' in' (ID: 306)
  Prédit: ' in'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' in' → logprob: -0.08494272828102112
    2. 'in' → logprob: -2.5849428176879883
    3. 'input' → logprob: -5.334942817687988
    4. ' input' → logprob: -7.709942817687988
    5. ' ' → logprob: -7.959942817687988
    6. '<|end|>' → logprob: -8.459942817687988
    7. '(input' → logprob: -10.209942817687988
    8. '=input' → logprob: -10.209942817687988
    9. '_input' → logprob: -11.084942817687988
    10. ' to' → logprob: -11.334942817687988

Token 11: ' input' (ID: 3422)
  Prédit: 'input'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'input' → logprob: -0.6931490898132324
    2. ' input' → logprob: -0.6931490898132324
    3. '(input' → logprob: -13.94314956665039
    4. ' ' → logprob: -14.31814956665039
    5. '=input' → logprob: -15.69314956665039
    6. 'range' → logprob: -16.44314956665039
    7. '<input' → logprob: -17.06814956665039
    8. '	input' → logprob: -17.19314956665039
    9. ' range' → logprob: -17.44314956665039
    10. 'raw' → logprob: -17.81814956665039

Token 12: '().' (ID: 1454)
  Prédit: '()]'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '()]' → logprob: -0.7140372395515442
    2. '(' → logprob: -1.0890371799468994
    3. '()' → logprob: -1.8390371799468994
    4. '().' → logprob: -4.3390374183654785
    5. ']()' → logprob: -7.3390374183654785
    6. '('' → logprob: -8.21403694152832
    7. ']' → logprob: -8.83903694152832
    8. '()].' → logprob: -8.83903694152832
    9. '`()' → logprob: -8.83903694152832
    10. '("")' → logprob: -9.83903694152832

Token 13: 'split' (ID: 13627)
  Prédit: 'split'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'split' → logprob: -0.00023321842309087515
    2. 'strip' → logprob: -8.50023365020752
    3. 'rstrip' → logprob: -10.50023365020752
    4. ' split' → logprob: -13.37523365020752
    5. 'spl' → logprob: -14.75023365020752
    6. '(split' → logprob: -15.75023365020752
    7. 'read' → logprob: -18.500232696533203
    8. 's' → logprob: -18.875232696533203
    9. 'plit' → logprob: -19.375232696533203
    10. 'replace' → logprob: -19.500232696533203

Token 14: '()]' (ID: 59063)
  Prédit: '()]'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '()]' → logprob: -0.0014508290914818645
    2. '(' → logprob: -6.876451015472412
    3. '()' → logprob: -8.126450538635254
    4. ']' → logprob: -9.126450538635254
    5. ')]' → logprob: -12.626450538635254
    6. '())' → logprob: -12.876450538635254
    7. ']()' → logprob: -12.876450538635254
    8. '()],' → logprob: -13.501450538635254
    9. '`]' → logprob: -13.876450538635254
    10. '()][' → logprob: -14.501450538635254

Token 15: '  ' (ID: 256)
  Prédit: 'a'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'a' → logprob: -1.6614594459533691
    2. 'if' → logprob: -1.6614594459533691
    3. 'n' → logprob: -1.7864594459533691
    4. ',' → logprob: -2.661459445953369
    5. 'for' → logprob: -2.911459445953369
    6. '\n' → logprob: -3.161459445953369
    7. '#' → logprob: -3.411459445953369
    8. ' ' → logprob: -3.536459445953369
    9. 'd' → logprob: -3.786459445953369
    10. 's' → logprob: -3.911459445953369

Token 16: ' #' (ID: 1069)
  Prédit: 'a'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'a' → logprob: -0.935090959072113
    2. 'if' → logprob: -1.6850910186767578
    3. 's' → logprob: -2.435091018676758
    4. 'n' → logprob: -2.560091018676758
    5. 'd' → logprob: -3.185091018676758
    6. 'i' → logprob: -3.310091018676758
    7. 'r' → logprob: -3.685091018676758
    8. 'for' → logprob: -3.810091018676758
    9. '
' → logprob: -4.185091018676758
    10. 'm' → logprob: -4.310091018676758

Token 17: ' lecture' (ID: 31993)
  Prédit: ' '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' ' → logprob: -0.07838961482048035
    2. 'n' → logprob: -3.5783896446228027
    3. ',' → logprob: -4.328389644622803
    4. ''' → logprob: -4.953389644622803
    5. 'a' → logprob: -5.578389644622803
    6. '#' → logprob: -5.703389644622803
    7. ')' → logprob: -6.078389644622803
    8. 'i' → logprob: -6.078389644622803
    9. ' n' → logprob: -6.203389644622803
    10. '(' → logprob: -6.203389644622803

Token 18: ' des' (ID: 731)
  Prédit: 'n'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'n' → logprob: -1.175032615661621
    2. '#' → logprob: -1.300032615661621
    3. '\' → logprob: -2.800032615661621
    4. ',' → logprob: -2.925032615661621
    5. ' ' → logprob: -3.175032615661621
    6. '\n' → logprob: -3.175032615661621
    7. ')' → logprob: -3.675032615661621
    8. 'if' → logprob: -4.050032615661621
    9. 'i' → logprob: -4.175032615661621
    10. '[' → logprob: -4.175032615661621

Token 19: ' variables' (ID: 13955)
  Prédit: ' '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' ' → logprob: -0.006796844303607941
    2. ' input' → logprob: -5.631796836853027
    3. ' data' → logprob: -7.631796836853027
    4. ' n' → logprob: -7.756796836853027
    5. 'input' → logprob: -8.256796836853027
    6. ' données' → logprob: -8.381796836853027
    7. ' integers' → logprob: -8.756796836853027
    8. ' code' → logprob: -8.756796836853027
    9. ' nombres' → logprob: -8.756796836853027
    10. 'n' → logprob: -9.006796836853027

Token 20: ',' (ID: 11)
  Prédit: '\n'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '\n' → logprob: -0.6968340873718262
    2. '
' → logprob: -0.8218340873718262
    3. 'n' → logprob: -4.196834087371826
    4. '\' → logprob: -4.321834087371826
    5. '' → logprob: -4.696834087371826
    6. ' ' → logprob: -5.696834087371826
    7. 'a' → logprob: -5.696834087371826
    8. '#' → logprob: -5.946834087371826
    9. ' 
' → logprob: -6.071834087371826
    10. ',' → logprob: -6.071834087371826

Token 21: ' j' (ID: 441)
  Prédit: ' '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' ' → logprob: -0.18645831942558289
    2. 'n' → logprob: -2.4364583492279053
    3. ' n' → logprob: -2.8114583492279053
    4. '\' → logprob: -5.686458110809326
    5. ' 
' → logprob: -5.686458110809326
    6. '<|end|>' → logprob: -5.811458110809326
    7. '\n' → logprob: -6.311458110809326
    8. ' \' → logprob: -6.311458110809326
    9. ''' → logprob: -6.561458110809326
    10. '  ' → logprob: -6.811458110809326

Token 22: ''aime' (ID: 57963)
  Prédit: 'uste'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'uste' → logprob: -0.4482819437980652
    2. 'e' → logprob: -1.69828200340271
    3. 'ust' → logprob: -2.07328200340271
    4. 'u' → logprob: -3.94828200340271
    5. 'us' → logprob: -5.198281764984131
    6. 'a' → logprob: -5.198281764984131
    7. ''' → logprob: -5.448281764984131
    8. ''ai' → logprob: -5.573281764984131
    9. ''espère' → logprob: -5.948281764984131
    10. '```' → logprob: -6.198281764984131

Token 23: ' bien' (ID: 5340)
  Prédit: ''
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False

Token 24: ' les' (ID: 1341)
  Prédit: ''
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False

Token 25: ' listes' (ID: 179198)
  Prédit: 'esp'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'esp' → logprob: -2.103837490081787
    2. 'n' → logprob: -2.228837490081787
    3. 'table' → logprob: -2.228837490081787
    4. 'list' → logprob: -2.228837490081787
    5. 'je' → logprob: -2.853837490081787
    6. 'f' → logprob: -3.353837490081787
    7. 'pro' → logprob: -3.478837490081787
    8. 'm' → logprob: -3.791337490081787
    9. '#' → logprob: -3.853837490081787
    10. 'ch' → logprob: -3.916337490081787

Token 26: '

' (ID: 279)
  Prédit: ''
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False

Token 27: '#' (ID: 2)
  Prédit: ''
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False

Token 28: ' le' (ID: 505)
  Prédit: ' for'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' for' → logprob: -0.6410102844238281
    2. 'for' → logprob: -1.1410102844238281
    3. ' result' → logprob: -3.141010284423828
    4. 'result' → logprob: -3.641010284423828
    5. 's' → logprob: -4.141010284423828
    6. ' while' → logprob: -4.641010284423828
    7. '#' → logprob: -4.891010284423828
    8. ' if' → logprob: -5.016010284423828
    9. 'def' → logprob: -5.516010284423828
    10. ' n' → logprob: -5.766010284423828

Token 29: ' calcul' (ID: 7559)
  Prédit: 'n'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'n' → logprob: -1.5133421421051025
    2. 's' → logprob: -1.7633421421051025
    3. 'a' → logprob: -2.6383421421051025
    4. '#' → logprob: -2.8883421421051025
    5. 'for' → logprob: -3.1383421421051025
    6. ' for' → logprob: -3.3883421421051025
    7. ' nombres' → logprob: -3.6383421421051025
    8. 'k' → logprob: -3.7633421421051025
    9. 't' → logprob: -3.7633421421051025
    10. ' code' → logprob: -4.013341903686523

Token 30: ' est' (ID: 893)
  Prédit: 's'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 's' → logprob: -0.3659443259239197
    2. 'result' → logprob: -1.8659443855285645
    3. 'm' → logprob: -2.4909443855285645
    4. ' result' → logprob: -4.4909443855285645
    5. 'res' → logprob: -4.7409443855285645
    6. ' s' → logprob: -5.1159443855285645
    7. 'n' → logprob: -5.3659443855285645
    8. 'sum' → logprob: -5.4909443855285645
    9. 'r' → logprob: -5.7409443855285645
    10. 'a' → logprob: -5.8659443855285645

Token 31: ' simple' (ID: 4705)
  Prédit: ' n'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' n' → logprob: -0.7752472162246704
    2. ' sum' → logprob: -1.0252472162246704
    3. ' ' → logprob: -2.900247097015381
    4. ' k' → logprob: -3.025247097015381
    5. 'sum' → logprob: -3.900247097015381
    6. 'n' → logprob: -4.025247097015381
    7. ' a' → logprob: -5.025247097015381
    8. ' somme' → logprob: -5.150247097015381
    9. ' simple' → logprob: -5.400247097015381
    10. ' factor' → logprob: -5.650247097015381

Token 32: ' mais' (ID: 2899)
  Prédit: 's'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 's' → logprob: -0.847078263759613
    2. 'result' → logprob: -1.4720783233642578
    3. 'n' → logprob: -2.597078323364258
    4. ' ' → logprob: -2.972078323364258
    5. 'sum' → logprob: -3.222078323364258
    6. ' result' → logprob: -3.472078323364258
    7. ':' → logprob: -3.597078323364258
    8. ' s' → logprob: -3.847078323364258
    9. ' n' → logprob: -4.597078323364258
    10. '\' → logprob: -4.597078323364258

Token 33: ' bon' (ID: 4846)
  Prédit: 'pas'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'pas' → logprob: -1.6400415897369385
    2. ' délic' → logprob: -1.7650415897369385
    3. ' compliqué' → logprob: -2.8900415897369385
    4. 'l' → logprob: -3.1400415897369385
    5. ' pas' → logprob: -3.1400415897369385
    6. 'il' → logprob: -3.6400415897369385
    7. 'tr' → logprob: -4.015041351318359
    8. 'import' → logprob: -4.015041351318359
    9. 's' → logprob: -4.015041351318359
    10. 'd' → logprob: -4.140041351318359

Token 34: ',' (ID: 11)
  Prédit: 'n'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'n' → logprob: -0.9297131299972534
    2. 'result' → logprob: -1.6797131299972534
    3. ':' → logprob: -2.054713249206543
    4. 's' → logprob: -2.304713249206543
    5. ' ' → logprob: -3.054713249206543
    6. ',' → logprob: -3.929713249206543
    7. 'total' → logprob: -4.429713249206543
    8. ' result' → logprob: -4.554713249206543
    9. ' :' → logprob: -4.554713249206543
    10. ' n' → logprob: -4.554713249206543

Token 35: ' faisons' (ID: 168808)
  Prédit: ' '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' ' → logprob: -0.2736629545688629
    2. ' n' → logprob: -2.14866304397583
    3. ' a' → logprob: -4.14866304397583
    4. ' i' → logprob: -4.27366304397583
    5. ' max' → logprob: -4.52366304397583
    6. ' k' → logprob: -4.64866304397583
    7. 'result' → logprob: -4.77366304397583
    8. ' for' → logprob: -4.77366304397583
    9. 'n' → logprob: -4.89866304397583
    10. ' result' → logprob: -4.89866304397583

Token 36: ' comme' (ID: 7971)
  Prédit: ' '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' ' → logprob: -0.17203651368618011
    2. ':' → logprob: -3.5470364093780518
    3. 's' → logprob: -3.9220364093780518
    4. 'n' → logprob: -4.047036647796631
    5. 'l' → logprob: -4.797036647796631
    6. 'un' → logprob: -4.797036647796631
    7. '_' → logprob: -4.922036647796631
    8. ' un' → logprob: -5.047036647796631
    9. '  ' → logprob: -5.172036647796631
    10. ',' → logprob: -5.297036647796631

Token 37: ' ça' (ID: 13590)
  Prédit: ' ça'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' ça' → logprob: -0.23363083600997925
    2. ' ceci' → logprob: -2.858630895614624
    3. ' on' → logprob: -3.358630895614624
    4. ' n' → logprob: -3.983630895614624
    5. ' la' → logprob: -4.358630657196045
    6. ' k' → logprob: -4.608630657196045
    7. ' cela' → logprob: -4.608630657196045
    8. ' ce' → logprob: -4.858630657196045
    9. 'n' → logprob: -5.233630657196045
    10. ' le' → logprob: -5.483630657196045

Token 38: '
' (ID: 198)
  Prédit: 'n'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'n' → logprob: -0.5675511956214905
    2. '
' → logprob: -1.6925511360168457
    3. 's' → logprob: -2.5675511360168457
    4. '\n' → logprob: -3.0675511360168457
    5. 'result' → logprob: -3.4425511360168457
    6. ' 
' → logprob: -3.4425511360168457
    7. 'a' → logprob: -4.067551136016846
    8. '  
' → logprob: -4.817551136016846
    9. ':' → logprob: -5.067551136016846
    10. '\' → logprob: -5.317551136016846

Token 39: 'result' (ID: 2521)
  Prédit: 's'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 's' → logprob: -1.033079743385315
    2. 'result' → logprob: -1.658079743385315
    3. 'n' → logprob: -1.908079743385315
    4. '
' → logprob: -2.2830796241760254
    5. ' 
' → logprob: -2.5330796241760254
    6. 'a' → logprob: -3.7830796241760254
    7. 'for' → logprob: -4.283079624176025
    8. ' ' → logprob: -4.783079624176025
    9. 'r' → logprob: -4.908079624176025
    10. 'm' → logprob: -5.033079624176025

Token 40: ' =' (ID: 314)
  Prédit: ' ='
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' =' → logprob: -0.06467686593532562
    2. '=' → logprob: -2.9396767616271973
    3. 's' → logprob: -4.814676761627197
    4. '_' → logprob: -6.689676761627197
    5. ' ' → logprob: -8.064677238464355
    6. 'space' → logprob: -10.564677238464355
    7. '  ' → logprob: -11.564677238464355
    8. ',' → logprob: -11.564677238464355
    9. '_space' → logprob: -12.439677238464355
    10. '_=' → logprob: -12.564677238464355

Token 41: ' n' (ID: 297)
  Prédit: '0'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '0' → logprob: -0.9591603875160217
    2. 'n' → logprob: -1.084160327911377
    3. ' n' → logprob: -1.834160327911377
    4. '1' → logprob: -2.959160327911377
    5. 'sum' → logprob: -3.834160327911377
    6. ' ' → logprob: -4.209160327911377
    7. '(n' → logprob: -4.584160327911377
    8. ' (' → logprob: -5.209160327911377
    9. 'k' → logprob: -5.459160327911377
    10. ' sum' → logprob: -5.959160327911377

Token 42: '-k' (ID: 10897)
  Prédit: ' **'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' **' → logprob: -0.9894580841064453
    2. '**' → logprob: -1.3644580841064453
    3. ' %' → logprob: -2.1144580841064453
    4. ' *' → logprob: -2.4894580841064453
    5. '%' → logprob: -2.7394580841064453
    6. ' +' → logprob: -3.3644580841064453
    7. '*' → logprob: -3.8644580841064453
    8. '+' → logprob: -4.239458084106445
    9. ' ' → logprob: -4.614458084106445
    10. ' //' → logprob: -4.739458084106445

Token 43: '+' (ID: 10)
  Prédit: ''
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False

Token 44: '1' (ID: 16)
  Prédit: '1'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '1' → logprob: -0.0030642226338386536
    2. 'k' → logprob: -6.503064155578613
    3. '2' → logprob: -7.253064155578613
    4. ' ' → logprob: -7.503064155578613
    5. 'n' → logprob: -9.253064155578613
    6. '(' → logprob: -9.503064155578613
    7. '0' → logprob: -10.003064155578613
    8. '(n' → logprob: -11.253064155578613
    9. ' k' → logprob: -11.503064155578613
    10. '3' → logprob: -11.628064155578613

Token 45: '
' (ID: 198)
  Prédit: ''
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False

Token 46: 'print' (ID: 1598)
  Prédit: 'print'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'print' → logprob: -0.13201598823070526
    2. '<|end|>' → logprob: -2.2570159435272217
    3. ')' → logprob: -5.132016181945801
    4. '#' → logprob: -5.507016181945801
    5. '
' → logprob: -6.007016181945801
    6. '*' → logprob: -6.132016181945801
    7. ' ' → logprob: -6.507016181945801
    8. ' print' → logprob: -7.007016181945801
    9. '```' → logprob: -8.0070161819458
    10. '\' → logprob: -8.2570161819458

Token 47: '(result' (ID: 8111)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(' → logprob: -0.023248042911291122
    2. '(result' → logprob: -3.7732479572296143
    3. ' (' → logprob: -14.148247718811035
    4. '(
' → logprob: -14.648247718811035
    5. '("("' → logprob: -15.273247718811035
    6. '((' → logprob: -15.398247718811035
    7. '()' → logprob: -15.398247718811035
    8. '('' → logprob: -15.523247718811035
    9. '(res' → logprob: -15.648247718811035
    10. '(

' → logprob: -15.773247718811035

Token 48: ')' (ID: 8)
  Prédit: ')'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')' → logprob: -8.77627644513268e-06
    2. ' )' → logprob: -12.000008583068848
    3. '))' → logprob: -13.250008583068848
    4. '`)' → logprob: -14.625008583068848
    5. ')`' → logprob: -15.750008583068848
    6. ')
' → logprob: -16.500009536743164
    7. '')' → logprob: -16.500009536743164
    8. '```' → logprob: -17.000009536743164
    9. '）' → logprob: -17.625009536743164
    10. ')}' → logprob: -18.500009536743164

Token 49: ' #' (ID: 1069)
  Prédit: ''
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False

Token 50: ' affiche' (ID: 127479)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ')' → logprob: -0.355690062046051
    2. '<|end|>' → logprob: -1.3556900024414062
    3. ' ' → logprob: -3.7306900024414062
    4. '\n' → logprob: -5.105690002441406
    5. '+' → logprob: -5.605690002441406
    6. '\' → logprob: -6.605690002441406
    7. '#' → logprob: -6.730690002441406
    8. '```' → logprob: -6.730690002441406
    9. '<|end|>' → logprob: -7.105690002441406
    10. ' )' → logprob: -7.230690002441406

Token 51: ' le' (ID: 505)
  Prédit: ' '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' ' → logprob: -0.3145085573196411
    2. '<|end|>' → logprob: -1.6895085573196411
    3. ' le' → logprob: -3.9395084381103516
    4. 's' → logprob: -3.9395084381103516
    5. ' la' → logprob: -4.439508438110352
    6. '  ' → logprob: -4.689508438110352
    7. ' l' → logprob: -4.939508438110352
    8. 'result' → logprob: -5.939508438110352
    9. '<|end|>' → logprob: -6.189508438110352
    10. 'l' → logprob: -6.189508438110352

Token 52: ' résultat' (ID: 62556)
  Prédit: ' résultat'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' résultat' → logprob: -0.48056042194366455
    2. ' nombre' → logprob: -1.1055604219436646
    3. 'nombre' → logprob: -3.730560302734375
    4. 'rés' → logprob: -5.105560302734375
    5. ' maximum' → logprob: -5.230560302734375
    6. ' ' → logprob: -5.605560302734375
    7. ' resultat' → logprob: -6.230560302734375
    8. 's' → logprob: -6.355560302734375
    9. 'r' → logprob: -6.355560302734375
    10. ' result' → logprob: -7.230560302734375

Token 53: ',' (ID: 11)
  Prédit: ''
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False

Token 54: ' j' (ID: 441)
  Prédit: ''
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False

Token 55: ''espère' (ID: 116557)
  Prédit: ''aime'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ''aime' → logprob: -0.06593319028615952
    2. 'a' → logprob: -3.8159332275390625
    3. 'e' → logprob: -4.3159332275390625
    4. ''a' → logprob: -4.5659332275390625
    5. ''adore' → logprob: -5.0659332275390625
    6. ''espère' → logprob: -5.8159332275390625
    7. '')' → logprob: -5.9409332275390625
    8. ''ai' → logprob: -6.3159332275390625
    9. ''' → logprob: -6.8159332275390625
    10. 'uste' → logprob: -7.3159332275390625

Token 56: ' que' (ID: 661)
  Prédit: ''
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False

Token 57: ' c' (ID: 274)
  Prédit: ' ça'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' ça' → logprob: -0.24529525637626648
    2. ' c' → logprob: -2.370295286178589
    3. ' ' → logprob: -3.620295286178589
    4. 'c' → logprob: -3.620295286178589
    5. ' tout' → logprob: -4.24529504776001
    6. ' cela' → logprob: -4.74529504776001
    7. ' ce' → logprob: -4.87029504776001
    8. '  ' → logprob: -5.12029504776001
    9. ' le' → logprob: -5.24529504776001
    10. ' la' → logprob: -5.62029504776001

Token 58: ''est' (ID: 6616)
  Prédit: 'e'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'e' → logprob: -1.2575329542160034
    2. 'a' → logprob: -1.3825329542160034
    3. ''est' → logprob: -1.6325329542160034
    4. ''' → logprob: -2.507533073425293
    5. ''a' → logprob: -2.882533073425293
    6. 'ça' → logprob: -2.882533073425293
    7. 'ela' → logprob: -3.757533073425293
    8. ''#' → logprob: -4.632533073425293
    9. ''s' → logprob: -5.257533073425293
    10. 'est' → logprob: -5.257533073425293

Token 59: ' correct' (ID: 6145)
  Prédit: ' correct'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' correct' → logprob: -0.22720792889595032
    2. 'correct' → logprob: -1.852207899093628
    3. ' ce' → logprob: -4.977208137512207
    4. ' bon' → logprob: -5.102208137512207
    5. ' ça' → logprob: -5.352208137512207
    6. 'bon' → logprob: -5.477208137512207
    7. 'exact' → logprob: -5.477208137512207
    8. ' ' → logprob: -6.102208137512207
    9. ' juste' → logprob: -6.102208137512207
    10. 'ce' → logprob: -6.477208137512207


RÉSUMÉ:
--------------------------------------------------------------------------------
Total des tokens analysés: 57
Tokens correctement prédits (1ère position, stricte): 13
Tokens correctement prédits (1ère position, avec adaptation): 13
Tokens correctement prédits (top 10): 29
Précision stricte (1ère position): 22.81%
Précision adaptée (1ère position): 22.81%
Précision (top 10): 50.88%
================================================================================
