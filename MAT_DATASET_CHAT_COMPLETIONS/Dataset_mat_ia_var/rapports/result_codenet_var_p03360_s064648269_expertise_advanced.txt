================================================================================
ANALYSE DE PRÉDICTION TOKEN PAR TOKEN (BATCH API)
Date: 2025-06-04 20:19:43
Modèle de tokenisation: gpt-4o-mini
================================================================================

SCRIPT ANALYSÉ:
--------------------------------------------------------------------------------
from operator import add
from functools import reduce

A, B, C = map(int, input().split())
K = int(input())

values = [A, B, C]
max_val = max(values)
result = reduce(add, values) + max_val * ((1 << K) - 1)
print(result)
--------------------------------------------------------------------------------

RÉSULTATS D'ANALYSE TOKEN PAR TOKEN:
--------------------------------------------------------------------------------
Token 0: 'from' (ID: 2845)
  → Token d'amorce (pas de prédiction)

Token 1: ' operator' (ID: 11019)
  → Token d'amorce (pas de prédiction)

Token 2: ' import' (ID: 1588)
  → Token d'amorce (pas de prédiction)

Token 3: ' add' (ID: 1147)
  Prédit: ' import'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' import' → logprob: -0.7355836629867554
    2. ' item' → logprob: -0.9855836629867554
    3. 'item' → logprob: -2.110583782196045
    4. 'import' → logprob: -4.110583782196045
    5. ' add' → logprob: -5.360583782196045
    6. 'add' → logprob: -6.360583782196045
    7. ' ' → logprob: -6.735583782196045
    8. 'attr' → logprob: -7.235583782196045
    9. ' attr' → logprob: -7.485583782196045
    10. 'getitem' → logprob: -7.985583782196045

Token 4: '
' (ID: 198)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '(' → logprob: -0.00034297199454158545
    2. ',' → logprob: -8.750343322753906
    3. ' (' → logprob: -10.000343322753906
    4. '\(' → logprob: -10.000343322753906
    5. '```' → logprob: -10.250343322753906
    6. 'import' → logprob: -11.250343322753906
    7. '.' → logprob: -11.625343322753906
    8. '(
' → logprob: -11.750343322753906
    9. 'a' → logprob: -12.375343322753906
    10. '(a' → logprob: -13.000343322753906

Token 5: 'from' (ID: 2845)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '(' → logprob: -0.0009148012613877654
    2. ',' → logprob: -8.000914573669434
    3. 'a' → logprob: -8.625914573669434
    4. '(
' → logprob: -8.875914573669434
    5. '\(' → logprob: -9.250914573669434
    6. '(a' → logprob: -10.375914573669434
    7. ' (' → logprob: -10.625914573669434
    8. '_' → logprob: -10.750914573669434
    9. '```' → logprob: -10.750914573669434
    10. '.' → logprob: -11.250914573669434

Token 6: ' functools' (ID: 142636)
  Prédit: ' functools'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' functools' → logprob: -0.1267189383506775
    2. ' operator' → logprob: -2.8767189979553223
    3. ' itertools' → logprob: -3.6267189979553223
    4. ' math' → logprob: -3.8767189979553223
    5. 'fun' → logprob: -4.876718997955322
    6. 'operator' → logprob: -5.751718997955322
    7. ' ' → logprob: -6.751718997955322
    8. '_' → logprob: -6.876718997955322
    9. 'math' → logprob: -7.626718997955322
    10. ' os' → logprob: -7.626718997955322

Token 7: ' import' (ID: 1588)
  Prédit: ' import'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' import' → logprob: -0.28455567359924316
    2. 'import' → logprob: -1.4095556735992432
    3. '.' → logprob: -6.659555435180664
    4. '_import' → logprob: -6.909555435180664
    5. '.import' → logprob: -7.534555435180664
    6. ' ' → logprob: -8.159555435180664
    7. '	import' → logprob: -9.284555435180664
    8. '_' → logprob: -9.659555435180664
    9. ' .' → logprob: -9.909555435180664
    10. '._' → logprob: -10.784555435180664

Token 8: ' reduce' (ID: 10389)
  Prédit: 'reduce'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'reduce' → logprob: -0.05301286652684212
    2. ' reduce' → logprob: -3.3030128479003906
    3. 'partial' → logprob: -4.428012847900391
    4. ' partial' → logprob: -5.928012847900391
    5. 'wrap' → logprob: -9.05301284790039
    6. 'redu' → logprob: -9.80301284790039
    7. ' wraps' → logprob: -10.80301284790039
    8. 'l' → logprob: -10.92801284790039
    9. '.reduce' → logprob: -11.67801284790039
    10. ' l' → logprob: -11.67801284790039

Token 9: '

' (ID: 279)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '(' → logprob: -0.004771753214299679
    2. '(
' → logprob: -5.879771709442139
    3. '(lambda' → logprob: -6.379771709442139
    4. ',' → logprob: -10.254772186279297
    5. '`' → logprob: -10.379772186279297
    6. '\n' → logprob: -10.379772186279297
    7. '\' → logprob: -10.629772186279297
    8. '(\' → logprob: -10.754772186279297
    9. '(

' → logprob: -10.879772186279297
    10. '```' → logprob: -11.004772186279297

Token 10: 'A' (ID: 32)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '(' → logprob: -0.013584381900727749
    2. '(lambda' → logprob: -4.513584613800049
    3. '(
' → logprob: -6.513584613800049
    4. 'lambda' → logprob: -8.13858413696289
    5. 'def' → logprob: -8.51358413696289
    6. 'sum' → logprob: -9.26358413696289
    7. 'print' → logprob: -9.26358413696289
    8. '(sum' → logprob: -9.38858413696289
    9. 'result' → logprob: -9.63858413696289
    10. '(max' → logprob: -10.76358413696289

Token 11: ',' (ID: 11)
  Prédit: ' ='
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' =' → logprob: -0.9310809969902039
    2. '[' → logprob: -1.9310810565948486
    3. 'dd' → logprob: -1.9310810565948486
    4. '=' → logprob: -2.5560810565948486
    5. ' ' → logprob: -2.9310810565948486
    6. '_' → logprob: -3.0560810565948486
    7. ',' → logprob: -3.3060810565948486
    8. '.' → logprob: -3.4310810565948486
    9. 'rray' → logprob: -4.1810808181762695
    10. 'd' → logprob: -5.1810808181762695

Token 12: ' B' (ID: 418)
  Prédit: ' B'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' B' → logprob: -0.47893068194389343
    2. 'B' → logprob: -0.9789307117462158
    3. ' ' → logprob: -6.228930473327637
    4. ' =' → logprob: -6.603930473327637
    5. '=' → logprob: -7.103930473327637
    6. ''' → logprob: -8.853930473327637
    7. '[' → logprob: -9.353930473327637
    8. 'b' → logprob: -9.728930473327637
    9. '*' → logprob: -9.978930473327637
    10. '"' → logprob: -10.353930473327637

Token 13: ',' (ID: 11)
  Prédit: ' ='
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' =' → logprob: -0.006883503869175911
    2. '=' → logprob: -5.00688362121582
    3. ',' → logprob: -9.75688362121582
    4. '_' → logprob: -10.13188362121582
    5. ' ' → logprob: -10.38188362121582
    6. ')' → logprob: -11.00688362121582
    7. '[' → logprob: -11.88188362121582
    8. ' ,' → logprob: -12.63188362121582
    9. ' =[' → logprob: -12.88188362121582
    10. '.' → logprob: -13.25688362121582

Token 14: ' C' (ID: 363)
  Prédit: ' C'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' C' → logprob: -0.14082154631614685
    2. ' ' → logprob: -2.5158214569091797
    3. 'C' → logprob: -3.2658214569091797
    4. ' =' → logprob: -4.64082145690918
    5. '=' → logprob: -6.51582145690918
    6. ',' → logprob: -7.39082145690918
    7. ' and' → logprob: -7.89082145690918
    8. '  ' → logprob: -9.89082145690918
    9. '*' → logprob: -10.26582145690918
    10. ' *' → logprob: -10.26582145690918

Token 15: ' =' (ID: 314)
  Prédit: ' ='
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' =' → logprob: -0.022666918113827705
    2. '=' → logprob: -3.8976669311523438
    3. ',' → logprob: -6.272666931152344
    4. ')' → logprob: -9.522666931152344
    5. '<|end|>' → logprob: -9.522666931152344
    6. ' ,' → logprob: -10.147666931152344
    7. '[' → logprob: -11.272666931152344
    8. '_' → logprob: -11.772666931152344
    9. ' ' → logprob: -12.147666931152344
    10. '  ' → logprob: -12.272666931152344

Token 16: ' map' (ID: 4014)
  Prédit: '1'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '1' → logprob: -0.789746880531311
    2. '0' → logprob: -1.039746880531311
    3. ' ' → logprob: -2.5397467613220215
    4. 'map' → logprob: -2.6647467613220215
    5. ' map' → logprob: -4.0397467613220215
    6. '[' → logprob: -4.5397467613220215
    7. '10' → logprob: -5.5397467613220215
    8. '5' → logprob: -6.1647467613220215
    9. '[]' → logprob: -6.2897467613220215
    10. ' [' → logprob: -6.6647467613220215

Token 17: '(int' (ID: 2742)
  Prédit: '(int'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(int' → logprob: -0.16819941997528076
    2. '(' → logprob: -1.9181994199752808
    3. '(lambda' → logprob: -5.41819953918457
    4. '(str' → logprob: -5.91819953918457
    5. 'int' → logprob: -7.54319953918457
    6. '<|end|>' → logprob: -9.16819953918457
    7. '(
' → logprob: -9.91819953918457
    8. '(input' → logprob: -10.41819953918457
    9. '(eval' → logprob: -10.91819953918457
    10. '(list' → logprob: -11.29319953918457

Token 18: ',' (ID: 11)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')' → logprob: -0.2828630208969116
    2. '(input' → logprob: -1.7828630208969116
    3. ',' → logprob: -3.407863140106201
    4. '(' → logprob: -3.407863140106201
    5. 'input' → logprob: -5.032863140106201
    6. ',input' → logprob: -6.657863140106201
    7. '<|end|>' → logprob: -6.907863140106201
    8. '```' → logprob: -7.157863140106201
    9. ')(' → logprob: -8.032862663269043
    10. '))' → logprob: -8.157862663269043

Token 19: ' input' (ID: 3422)
  Prédit: 'input'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'input' → logprob: -0.12711331248283386
    2. ' input' → logprob: -2.1271133422851562
    3. ')' → logprob: -8.877113342285156
    4. '(input' → logprob: -10.252113342285156
    5. '=input' → logprob: -12.752113342285156
    6. ' )' → logprob: -13.252113342285156
    7. ',input' → logprob: -13.252113342285156
    8. '	input' → logprob: -14.002113342285156
    9. ' ' → logprob: -14.002113342285156
    10. '))' → logprob: -14.877113342285156

Token 20: '().' (ID: 1454)
  Prédit: '()'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '()' → logprob: -0.2528281509876251
    2. '())' → logprob: -1.6278281211853027
    3. '(' → logprob: -4.002828121185303
    4. '().' → logprob: -5.502828121185303
    5. '());' → logprob: -6.627828121185303
    6. ')' → logprob: -7.127828121185303
    7. '(()' → logprob: -7.127828121185303
    8. '()))' → logprob: -8.002828598022461
    9. '(),' → logprob: -8.502828598022461
    10. '();)' → logprob: -8.627828598022461

Token 21: 'split' (ID: 13627)
  Prédit: 'split'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'split' → logprob: -0.00043734462815336883
    2. 'strip' → logprob: -7.750437259674072
    3. 'rstrip' → logprob: -12.75043773651123
    4. ' split' → logprob: -13.00043773651123
    5. ')' → logprob: -14.62543773651123
    6. 'spl' → logprob: -14.87543773651123
    7. '(split' → logprob: -15.00043773651123
    8. ' ' → logprob: -15.75043773651123
    9. 'read' → logprob: -16.125436782836914
    10. 's' → logprob: -17.125436782836914

Token 22: '())
' (ID: 4574)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ')' → logprob: -0.0596172958612442
    2. '))' → logprob: -2.934617280960083
    3. '())' → logprob: -5.434617519378662
    4. ')))' → logprob: -9.184617042541504
    5. '()))' → logprob: -9.559617042541504
    6. '()' → logprob: -9.809617042541504
    7. '),' → logprob: -9.934617042541504
    8. '(' → logprob: -10.684617042541504
    9. ')`' → logprob: -11.184617042541504
    10. '`)' → logprob: -11.434617042541504

Token 23: 'K' (ID: 42)
  Prédit: 'result'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'result' → logprob: -0.1863119900226593
    2. 'total' → logprob: -3.311311960220337
    3. 'sum' → logprob: -3.436311960220337
    4. 'res' → logprob: -3.686311960220337
    5. 's' → logprob: -3.936311960220337
    6. 'print' → logprob: -4.311312198638916
    7. 'answer' → logprob: -5.436312198638916
    8. 'D' → logprob: -5.561312198638916
    9. 'n' → logprob: -5.561312198638916
    10. 'numbers' → logprob: -5.936312198638916

Token 24: ' =' (ID: 314)
  Prédit: ' ='
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' =' → logprob: -0.05614250898361206
    2. ' -=' → logprob: -3.556142568588257
    3. '=' → logprob: -3.931142568588257
    4. ',' → logprob: -5.806142330169678
    5. ' +=' → logprob: -7.056142330169678
    6. ' >' → logprob: -7.556142330169678
    7. ' ' → logprob: -8.056142807006836
    8. ' *=' → logprob: -8.306142807006836
    9. '>' → logprob: -8.431142807006836
    10. ')' → logprob: -8.431142807006836

Token 25: ' int' (ID: 677)
  Prédit: 'int'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'int' → logprob: -0.10021539777517319
    2. ' int' → logprob: -2.350215435028076
    3. '[int' → logprob: -12.850214958190918
    4. ' ' → logprob: -13.600214958190918
    5. '=int' → logprob: -13.975214958190918
    6. '<int' → logprob: -13.975214958190918
    7. 'add' → logprob: -14.350214958190918
    8. '(int' → logprob: -14.600214958190918
    9. '3' → logprob: -14.725214958190918
    10. '0' → logprob: -14.850214958190918

Token 26: '(input' (ID: 10054)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(' → logprob: -0.2652270197868347
    2. '(input' → logprob: -1.5152270793914795
    3. '()' → logprob: -4.6402268409729
    4. '('' → logprob: -5.8902268409729
    5. 'input' → logprob: -7.7652268409729
    6. ' (' → logprob: -9.765227317810059
    7. '```' → logprob: -10.015227317810059
    8. '("' → logprob: -10.515227317810059
    9. ')' → logprob: -10.515227317810059
    10. '("")' → logprob: -10.765227317810059

Token 27: '())

' (ID: 27654)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ')' → logprob: -0.21463534235954285
    2. '())' → logprob: -1.7146353721618652
    3. '()' → logprob: -4.339635372161865
    4. '`)' → logprob: -10.464634895324707
    5. '))' → logprob: -10.839634895324707
    6. ' )' → logprob: -11.214634895324707
    7. '(' → logprob: -11.339634895324707
    8. ' ())' → logprob: -11.714634895324707
    9. ')`' → logprob: -13.214634895324707
    10. '().' → logprob: -13.589634895324707

Token 28: 'values' (ID: 7222)
  Prédit: 'lst'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'lst' → logprob: -1.484728455543518
    2. 'numbers' → logprob: -1.609728455543518
    3. 'nums' → logprob: -2.1097283363342285
    4. 'arr' → logprob: -2.2347283363342285
    5. 'values' → logprob: -2.6097283363342285
    6. 'data' → logprob: -2.9847283363342285
    7. 'if' → logprob: -3.2347283363342285
    8. 's' → logprob: -3.6097283363342285
    9. 'result' → logprob: -3.7347283363342285
    10. 'vals' → logprob: -3.9847283363342285

Token 29: ' =' (ID: 314)
  Prédit: ' ='
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' =' → logprob: -0.02048688381910324
    2. '=' → logprob: -4.020486831665039
    3. '[' → logprob: -6.270486831665039
    4. '.' → logprob: -8.645486831665039
    5. '[:]' → logprob: -9.520486831665039
    6. ' ' → logprob: -9.895486831665039
    7. '[]' → logprob: -9.895486831665039
    8. '=[]' → logprob: -11.395486831665039
    9. '_' → logprob: -11.395486831665039
    10. 's' → logprob: -11.520486831665039

Token 30: ' [' (ID: 723)
  Prédit: ' ['
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' [' → logprob: -0.35612407326698303
    2. '[A' → logprob: -1.4811240434646606
    3. '[' → logprob: -2.98112416267395
    4. '[a' → logprob: -4.231123924255371
    5. '[list' → logprob: -6.231123924255371
    6. ' sorted' → logprob: -7.356123924255371
    7. '[f' → logprob: -7.356123924255371
    8. 'sorted' → logprob: -7.481123924255371
    9. '[input' → logprob: -7.606123924255371
    10. '[int' → logprob: -7.981123924255371

Token 31: 'A' (ID: 32)
  Prédit: 'A'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'A' → logprob: -0.0011990397470071912
    2. ' A' → logprob: -7.001199245452881
    3. 'C' → logprob: -9.126198768615723
    4. 'B' → logprob: -9.876198768615723
    5. '(A' → logprob: -10.126198768615723
    6. '0' → logprob: -11.126198768615723
    7. ']' → logprob: -11.376198768615723
    8. '2' → logprob: -11.501198768615723
    9. '1' → logprob: -11.876198768615723
    10. '   ' → logprob: -12.376198768615723

Token 32: ',' (ID: 11)
  Prédit: ','
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ',' → logprob: -0.0005688794772140682
    2. ',B' → logprob: -7.875568866729736
    3. ' ,' → logprob: -8.625569343566895
    4. '*' → logprob: -12.375569343566895
    5. '+' → logprob: -13.875569343566895
    6. ' *' → logprob: -14.375569343566895
    7. '+B' → logprob: -14.500569343566895
    8. ',b' → logprob: -14.750569343566895
    9. ',K' → logprob: -15.125569343566895
    10. '**' → logprob: -15.375569343566895

Token 33: ' B' (ID: 418)
  Prédit: 'B'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'B' → logprob: -0.03804401680827141
    2. ' B' → logprob: -3.288043975830078
    3. '	B' → logprob: -13.663043975830078
    4. ' ' → logprob: -14.538043975830078
    5. 'b' → logprob: -15.288043975830078
    6. '>B' → logprob: -15.663043975830078
    7. '   ' → logprob: -16.163043975830078
    8. ',B' → logprob: -16.163043975830078
    9. ',' → logprob: -16.288043975830078
    10. '    ' → logprob: -16.538043975830078

Token 34: ',' (ID: 11)
  Prédit: ','
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ',' → logprob: -0.0006963504129089415
    2. ' ,' → logprob: -7.375696182250977
    3. ',C' → logprob: -9.625696182250977
    4. 'C' → logprob: -12.750696182250977
    5. ',
' → logprob: -14.750696182250977
    6. ' C' → logprob: -15.500696182250977
    7. '```' → logprob: -16.563196182250977
    8. ' ' → logprob: -16.875696182250977
    9. '<|end|>' → logprob: -16.875696182250977
    10. ']' → logprob: -17.188196182250977

Token 35: ' C' (ID: 363)
  Prédit: 'C'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'C' → logprob: -0.020551813766360283
    2. ' C' → logprob: -3.895551919937134
    3. ' ' → logprob: -12.895551681518555
    4. ' and' → logprob: -13.395551681518555
    5. 'and' → logprob: -13.520551681518555
    6. '<|end|>' → logprob: -13.645551681518555
    7. ',' → logprob: -14.145551681518555
    8. ')' → logprob: -14.895551681518555
    9. '*C' → logprob: -15.083051681518555
    10. '	C' → logprob: -15.520551681518555

Token 36: ']
' (ID: 1592)
  Prédit: ']'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ']' → logprob: -0.0016430460382252932
    2. ')' → logprob: -6.751643180847168
    3. ',' → logprob: -8.251643180847168
    4. ' ]' → logprob: -9.251643180847168
    5. '])' → logprob: -9.251643180847168
    6. ')]' → logprob: -11.251643180847168
    7. ']
' → logprob: -13.001643180847168
    8. '],' → logprob: -14.001643180847168
    9. '```' → logprob: -14.251643180847168
    10. '<|end|>' → logprob: -14.501643180847168

Token 37: 'max' (ID: 3228)
  Prédit: 'values'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'values' → logprob: -0.15253371000289917
    2. '.sort' → logprob: -2.527533769607544
    3. '.values' → logprob: -3.777533769607544
    4. 'sorted' → logprob: -4.027533531188965
    5. 'for' → logprob: -4.527533531188965
    6. '```' → logprob: -6.152533531188965
    7. 'if' → logprob: -6.277533531188965
    8. '.' → logprob: -6.402533531188965
    9. '<|end|>' → logprob: -7.527533531188965
    10. 'sort' → logprob: -7.777533531188965

Token 38: '_val' (ID: 13694)
  Prédit: '_'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_' → logprob: -0.619193971157074
    2. '_val' → logprob: -1.4941940307617188
    3. '_values' → logprob: -2.2441940307617188
    4. 'es' → logprob: -3.1191940307617188
    5. '_value' → logprob: -3.7441940307617188
    6. 's' → logprob: -4.244194030761719
    7. 'values' → logprob: -4.369194030761719
    8. '_vals' → logprob: -4.744194030761719
    9. '(' → logprob: -4.994194030761719
    10. '_idx' → logprob: -6.119194030761719

Token 39: ' =' (ID: 314)
  Prédit: '='
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '=' → logprob: -0.6045706868171692
    2. ' =' → logprob: -1.4795706272125244
    3. 's' → logprob: -1.6045706272125244
    4. '_' → logprob: -4.2295708656311035
    5. '_idx' → logprob: -4.9795708656311035
    6. '_index' → logprob: -6.4795708656311035
    7. '_s' → logprob: -8.354570388793945
    8. 'es' → logprob: -8.354570388793945
    9. '=s' → logprob: -8.604570388793945
    10. ' ' → logprob: -8.854570388793945

Token 40: ' max' (ID: 2999)
  Prédit: ' max'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' max' → logprob: -0.3905545771121979
    2. 'max' → logprob: -1.2655545473098755
    3. ' ' → logprob: -3.765554666519165
    4. '10' → logprob: -4.265554428100586
    5. '100' → logprob: -5.890554428100586
    6. '[max' → logprob: -7.265554428100586
    7. '(max' → logprob: -9.140554428100586
    8. '0' → logprob: -9.390554428100586
    9. '1' → logprob: -9.640554428100586
    10. ' [' → logprob: -10.015554428100586

Token 41: '(values' (ID: 40883)
  Prédit: '(values'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(values' → logprob: -0.016291363164782524
    2. '(' → logprob: -4.14129114151001
    3. '(max' → logprob: -9.141291618347168
    4. '_values' → logprob: -9.641291618347168
    5. 'values' → logprob: -9.766291618347168
    6. ' (' → logprob: -11.516291618347168
    7. '(vals' → logprob: -12.766291618347168
    8. '(
' → logprob: -13.016291618347168
    9. '(_' → logprob: -13.141291618347168
    10. '(value' → logprob: -13.516291618347168

Token 42: ')
' (ID: 446)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')' → logprob: -0.0018691407749429345
    2. ' )' → logprob: -6.751869201660156
    3. ')
' → logprob: -7.376869201660156
    4. ']' → logprob: -11.376869201660156
    5. ')

' → logprob: -11.501869201660156
    6. '))' → logprob: -11.626869201660156
    7. ')**' → logprob: -12.251869201660156
    8. ',' → logprob: -12.501869201660156
    9. '**' → logprob: -12.501869201660156
    10. ' )
' → logprob: -12.626869201660156

Token 43: 'result' (ID: 2521)
  Prédit: 'values'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'values' → logprob: -0.33742812275886536
    2. 'for' → logprob: -1.587428092956543
    3. 'if' → logprob: -2.712428092956543
    4. 'max' → logprob: -5.087428092956543
    5. ' for' → logprob: -6.087428092956543
    6. '```' → logprob: -6.212428092956543
    7. 'idx' → logprob: -6.962428092956543
    8. ' values' → logprob: -7.337428092956543
    9. 'index' → logprob: -7.587428092956543
    10. 'indices' → logprob: -7.712428092956543

Token 44: ' =' (ID: 314)
  Prédit: ' ='
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' =' → logprob: -0.016212785616517067
    2. '=' → logprob: -4.1412129402160645
    3. '_' → logprob: -9.141212463378906
    4. ' ' → logprob: -10.141212463378906
    5. ' +=' → logprob: -11.516212463378906
    6. ' *=' → logprob: -12.391212463378906
    7. ')' → logprob: -13.016212463378906
    8. '  ' → logprob: -13.266212463378906
    9. ' _' → logprob: -13.391212463378906
    10. 's' → logprob: -13.391212463378906

Token 45: ' reduce' (ID: 10389)
  Prédit: 'max'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'max' → logprob: -0.598449170589447
    2. ' max' → logprob: -0.848449170589447
    3. 'reduce' → logprob: -4.473449230194092
    4. 'result' → logprob: -4.973449230194092
    5. ' result' → logprob: -6.598449230194092
    6. ' reduce' → logprob: -6.598449230194092
    7. '(max' → logprob: -7.598449230194092
    8. '0' → logprob: -7.973449230194092
    9. 'sum' → logprob: -9.473448753356934
    10. ' ' → logprob: -9.723448753356934

Token 46: '(add' (ID: 40159)
  Prédit: '(add'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(add' → logprob: -0.15091153979301453
    2. '(' → logprob: -2.400911569595337
    3. '(lambda' → logprob: -3.025911569595337
    4. '(operator' → logprob: -7.025911331176758
    5. 'add' → logprob: -11.150911331176758
    6. ' (' → logprob: -11.775911331176758
    7. '(
' → logprob: -12.650911331176758
    8. ' add' → logprob: -12.900911331176758
    9. '((' → logprob: -13.025911331176758
    10. '(max' → logprob: -13.525911331176758

Token 47: ',' (ID: 11)
  Prédit: ','
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ',' → logprob: -0.0016387656796723604
    2. '(' → logprob: -7.501638889312744
    3. ' ,' → logprob: -7.876638889312744
    4. '(values' → logprob: -8.126638412475586
    5. ')' → logprob: -8.876638412475586
    6. '([' → logprob: -10.501638412475586
    7. ',[' → logprob: -10.626638412475586
    8. '(lambda' → logprob: -10.751638412475586
    9. '+,' → logprob: -10.876638412475586
    10. '),' → logprob: -11.001638412475586

Token 48: ' values' (ID: 4824)
  Prédit: '['
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '[' → logprob: -0.5388661623001099
    2. ' [' → logprob: -0.9138661623001099
    3. '[max' → logprob: -5.91386604309082
    4. 'values' → logprob: -6.03886604309082
    5. '(values' → logprob: -6.03886604309082
    6. ' values' → logprob: -6.16386604309082
    7. ')' → logprob: -6.53886604309082
    8. '[i' → logprob: -6.53886604309082
    9. '[value' → logprob: -7.03886604309082
    10. '[int' → logprob: -8.16386604309082

Token 49: ')' (ID: 8)
  Prédit: ')'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')' → logprob: -0.044297248125076294
    2. ' if' → logprob: -4.419297218322754
    3. 'if' → logprob: -4.544297218322754
    4. ' )' → logprob: -4.794297218322754
    5. '[:' → logprob: -5.669297218322754
    6. ')*' → logprob: -6.294297218322754
    7. ',' → logprob: -6.669297218322754
    8. '))' → logprob: -6.669297218322754
    9. '[' → logprob: -6.794297218322754
    10. '[::-' → logprob: -6.919297218322754

Token 50: ' +' (ID: 659)
  Prédit: '*'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '*' → logprob: -1.466812252998352
    2. '**' → logprob: -1.591812252998352
    3. '
' → logprob: -1.966812252998352
    4. ' if' → logprob: -2.7168121337890625
    5. ' +' → logprob: -3.0918121337890625
    6. ' *' → logprob: -3.0918121337890625
    7. '<|end|>' → logprob: -3.2168121337890625
    8. ' ' → logprob: -3.3418121337890625
    9. ' 
' → logprob: -3.4668121337890625
    10. '+' → logprob: -3.4668121337890625

Token 51: ' max' (ID: 2999)
  Prédit: 'K'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'K' → logprob: -0.44601762294769287
    2. ' K' → logprob: -1.9460176229476929
    3. 'max' → logprob: -2.5710177421569824
    4. ' max' → logprob: -3.0710177421569824
    5. '(' → logprob: -3.4460177421569824
    6. '(max' → logprob: -3.6960177421569824
    7. '10' → logprob: -4.321017742156982
    8. ' (' → logprob: -4.946017742156982
    9. '(K' → logprob: -5.071017742156982
    10. ' ' → logprob: -5.946017742156982

Token 52: '_val' (ID: 13694)
  Prédit: '_val'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_val' → logprob: -3.173704271830502e-06
    2. '```' → logprob: -13.87500286102295
    3. '_vals' → logprob: -14.75000286102295
    4. 'Val' → logprob: -14.75000286102295
    5. 'val' → logprob: -14.87500286102295
    6. '_VAL' → logprob: -15.50000286102295
    7. '_' → logprob: -15.75000286102295
    8. '_value' → logprob: -16.000003814697266
    9. '_token' → logprob: -16.000003814697266
    10. '(_' → logprob: -16.125003814697266

Token 53: ' *' (ID: 425)
  Prédit: ' *'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' *' → logprob: -0.014063009060919285
    2. '*' → logprob: -4.514062881469727
    3. ' **' → logprob: -6.014062881469727
    4. '**' → logprob: -7.764062881469727
    5. '*(' → logprob: -10.139062881469727
    6. '<|end|>' → logprob: -10.264062881469727
    7. ' *
' → logprob: -11.014062881469727
    8. ' ' → logprob: -11.139062881469727
    9. ')' → logprob: -11.764062881469727
    10. ' ***' → logprob: -12.139062881469727

Token 54: ' ((' (ID: 3536)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '(' → logprob: -0.16500845551490784
    2. 'K' → logprob: -2.165008544921875
    3. '2' → logprob: -4.040008544921875
    4. '(K' → logprob: -4.165008544921875
    5. ' (' → logprob: -6.290008544921875
    6. '10' → logprob: -6.665008544921875
    7. 'pow' → logprob: -7.790008544921875
    8. ' K' → logprob: -8.415008544921875
    9. '(max' → logprob: -8.665008544921875
    10. 'max' → logprob: -9.040008544921875

Token 55: '1' (ID: 16)
  Prédit: '2'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '2' → logprob: -0.005288311280310154
    2. '10' → logprob: -5.755288124084473
    3. 'K' → logprob: -6.880288124084473
    4. '(' → logprob: -6.880288124084473
    5. ' ' → logprob: -10.755288124084473
    6. '1' → logprob: -11.630288124084473
    7. 'k' → logprob: -12.005288124084473
    8. ')' → logprob: -12.130288124084473
    9. ' (' → logprob: -12.505288124084473
    10. 'pow' → logprob: -12.880288124084473

Token 56: ' <<' (ID: 2256)
  Prédit: '<<'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '<<' → logprob: -0.024753935635089874
    2. ' <<' → logprob: -3.774754047393799
    3. '**' → logprob: -6.649754047393799
    4. ' **' → logprob: -9.14975357055664
    5. '<' → logprob: -10.02475357055664
    6. '<<(' → logprob: -10.77475357055664
    7. '*' → logprob: -10.89975357055664
    8. '2' → logprob: -11.27475357055664
    9. '<<<' → logprob: -13.39975357055664
    10. ' ' → logprob: -13.52475357055664

Token 57: ' K' (ID: 658)
  Prédit: 'K'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'K' → logprob: -8.542423165636137e-05
    2. ' K' → logprob: -9.375085830688477
    3. '<|end|>' → logprob: -14.875085830688477
    4. '>K' → logprob: -16.375085830688477
    5. ')' → logprob: -16.750085830688477
    6. 'k' → logprob: -17.375085830688477
    7. '	K' → logprob: -17.500085830688477
    8. '(' → logprob: -17.625085830688477
    9. '(K' → logprob: -18.250085830688477
    10. '<|end|>' → logprob: -19.500085830688477

Token 58: ')' (ID: 8)
  Prédit: ')'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')' → logprob: -0.0023315283469855785
    2. ' )' → logprob: -6.127331733703613
    3. ' -' → logprob: -9.752331733703613
    4. ')-' → logprob: -9.877331733703613
    5. '))' → logprob: -11.252331733703613
    6. '-' → logprob: -11.502331733703613
    7. '`)' → logprob: -12.627331733703613
    8. '')' → logprob: -12.877331733703613
    9. '-)' → logprob: -13.502331733703613
    10. '")' → logprob: -14.002331733703613

Token 59: ' -' (ID: 533)
  Prédit: ' -'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' -' → logprob: -0.2146858274936676
    2. '-' → logprob: -1.7146857976913452
    3. ')' → logprob: -4.339685916900635
    4. ')-' → logprob: -9.589685440063477
    5. ' ' → logprob: -10.339685440063477
    6. ' )' → logprob: -10.839685440063477
    7. '-)' → logprob: -12.214685440063477
    8. '```' → logprob: -12.714685440063477
    9. ' ' → logprob: -12.839685440063477
    10. '   ' → logprob: -13.464685440063477

Token 60: ' ' (ID: 220)
  Prédit: '1'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '1' → logprob: -0.0004886920796707273
    2. ' ' → logprob: -7.625488758087158
    3. '<|end|>' → logprob: -14.62548828125
    4. ')' → logprob: -16.25048828125
    5. '0' → logprob: -16.62548828125
    6. '2' → logprob: -17.37548828125
    7. '<|end|>' → logprob: -17.87548828125
    8. '   ' → logprob: -18.37548828125
    9. '  ' → logprob: -18.68798828125
    10. '```' → logprob: -19.00048828125

Token 61: '1' (ID: 16)
  Prédit: '1'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '1' → logprob: -4.320199877838604e-07
    2. ' ' → logprob: -14.75
    3. '2' → logprob: -18.0
    4. '<|end|>' → logprob: -18.625
    5. '0' → logprob: -19.0
    6. '```' → logprob: -19.625
    7. ')' → logprob: -20.0
    8. '   ' → logprob: -20.5
    9. '۱' → logprob: -20.75
    10. '１' → logprob: -21.0625

Token 62: ')
' (ID: 446)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')' → logprob: -6.034592388459714e-06
    2. ' )' → logprob: -13.375005722045898
    3. ')
' → logprob: -13.500005722045898
    4. '))' → logprob: -13.750005722045898
    5. '**' → logprob: -14.375005722045898
    6. '*' → logprob: -14.500005722045898
    7. '}' → logprob: -15.750005722045898
    8. ')*' → logprob: -16.1250057220459
    9. ')**' → logprob: -16.1250057220459
    10. ')))' → logprob: -16.3750057220459

Token 63: 'print' (ID: 1598)
  Prédit: 'print'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'print' → logprob: -0.00028993739397265017
    2. ')' → logprob: -8.375289916992188
    3. ' print' → logprob: -10.125289916992188
    4. '<|end|>' → logprob: -11.375289916992188
    5. '```' → logprob: -13.375289916992188
    6. '.print' → logprob: -13.625289916992188
    7. '(print' → logprob: -14.000289916992188
    8. '*' → logprob: -14.125289916992188
    9. '
' → logprob: -14.375289916992188
    10. '#' → logprob: -14.375289916992188

Token 64: '(result' (ID: 8111)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(' → logprob: -0.07949001342058182
    2. '(result' → logprob: -2.5794899463653564
    3. '(max' → logprob: -7.8294901847839355
    4. '((' → logprob: -10.079489707946777
    5. ' (' → logprob: -10.204489707946777
    6. '('' → logprob: -10.579489707946777
    7. '()' → logprob: -10.704489707946777
    8. '("("' → logprob: -10.829489707946777
    9. '(values' → logprob: -10.954489707946777
    10. '(sum' → logprob: -11.579489707946777

Token 65: ')' (ID: 8)
  Prédit: ')'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')' → logprob: -8.2994620242971e-06
    2. '))' → logprob: -12.000008583068848
    3. ' )' → logprob: -13.250008583068848
    4. '`)' → logprob: -15.750008583068848
    5. ')`' → logprob: -16.37500762939453
    6. ')
' → logprob: -17.12500762939453
    7. ')))' → logprob: -18.00000762939453
    8. '）' → logprob: -18.12500762939453
    9. '})' → logprob: -18.50000762939453
    10. '')' → logprob: -18.50000762939453


RÉSUMÉ:
--------------------------------------------------------------------------------
Total des tokens analysés: 63
Tokens correctement prédits (1ère position, stricte): 26
Tokens correctement prédits (1ère position, avec adaptation): 26
Tokens correctement prédits (top 10): 53
Précision stricte (1ère position): 41.27%
Précision adaptée (1ère position): 41.27%
Précision (top 10): 84.13%
================================================================================
