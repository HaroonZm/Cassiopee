================================================================================
ANALYSE DE PRÉDICTION TOKEN PAR TOKEN (BATCH API)
Date: 2025-06-04 19:16:07
Modèle de tokenisation: gpt-4o-mini
================================================================================

SCRIPT ANALYSÉ:
--------------------------------------------------------------------------------
k = int(input())
a, b = map(int, input().split())
ans = 'NG'
if a <= (b // k) * k:
    ans = 'OK'
print(ans)
--------------------------------------------------------------------------------

RÉSULTATS D'ANALYSE TOKEN PAR TOKEN:
--------------------------------------------------------------------------------
Token 0: 'k' (ID: 74)
  → Token d'amorce (pas de prédiction)

Token 1: ' =' (ID: 314)
  → Token d'amorce (pas de prédiction)

Token 2: ' int' (ID: 677)
  → Token d'amorce (pas de prédiction)

Token 3: '(input' (ID: 10054)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '(' → logprob: -0.007746459450572729
    2. '(k' → logprob: -4.882746696472168
    3. 'k' → logprob: -10.007746696472168
    4. ''' → logprob: -10.757746696472168
    5. '```' → logprob: -10.882746696472168
    6. '('' → logprob: -11.257746696472168
    7. '("("' → logprob: -11.632746696472168
    8. ' (' → logprob: -11.882746696472168
    9. ')' → logprob: -12.257746696472168
    10. '(
' → logprob: -12.507746696472168

Token 4: '())
' (ID: 4574)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '(' → logprob: -0.0974525660276413
    2. ')' → logprob: -2.4724526405334473
    3. '()' → logprob: -5.222452640533447
    4. '(k' → logprob: -6.972452640533447
    5. '(
' → logprob: -7.097452640533447
    6. '())' → logprob: -8.097452163696289
    7. '('' → logprob: -8.222452163696289
    8. '```' → logprob: -8.847452163696289
    9. '(

' → logprob: -9.097452163696289
    10. ''' → logprob: -9.847452163696289

Token 5: 'a' (ID: 64)
  Prédit: '\n'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '\n' → logprob: -0.9455842971801758
    2. '+' → logprob: -1.0705842971801758
    3. '*' → logprob: -1.9455842971801758
    4. '%' → logprob: -3.070584297180176
    5. '\' → logprob: -3.820584297180176
    6. '#' → logprob: -4.195584297180176
    7. ' ' → logprob: -4.695584297180176
    8. ''' → logprob: -5.195584297180176
    9. ')' → logprob: -5.445584297180176
    10. '**' → logprob: -5.820584297180176

Token 6: ',' (ID: 11)
  Prédit: '['
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '[' → logprob: -0.018188927322626114
    2. '+' → logprob: -4.268188953399658
    3. '=' → logprob: -6.893188953399658
    4. ' =' → logprob: -7.268188953399658
    5. '[k' → logprob: -7.768188953399658
    6. '[a' → logprob: -7.768188953399658
    7. '_' → logprob: -8.3931884765625
    8. '.' → logprob: -8.7681884765625
    9. '\[' → logprob: -9.0181884765625
    10. 'a' → logprob: -9.0181884765625

Token 7: ' b' (ID: 287)
  Prédit: 'b'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'b' → logprob: -0.02980811893939972
    2. ' b' → logprob: -3.5298080444335938
    3. '_' → logprob: -10.654808044433594
    4. '=' → logprob: -10.904808044433594
    5. ' =' → logprob: -11.779808044433594
    6. ' ' → logprob: -12.529808044433594
    7. 'k' → logprob: -12.904808044433594
    8. ' k' → logprob: -14.529808044433594
    9. '_=' → logprob: -15.154808044433594
    10. '_b' → logprob: -15.279808044433594

Token 8: ' =' (ID: 314)
  Prédit: '='
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '=' → logprob: -0.5231496095657349
    2. ' =' → logprob: -0.8981496095657349
    3. ',' → logprob: -10.773149490356445
    4. ')' → logprob: -13.148149490356445
    5. '=input' → logprob: -13.398149490356445
    6. ' ' → logprob: -14.648149490356445
    7. '<|end|>' → logprob: -15.148149490356445
    8. 'input' → logprob: -16.023149490356445
    9. '=int' → logprob: -16.210649490356445
    10. '[' → logprob: -16.648149490356445

Token 9: ' map' (ID: 4014)
  Prédit: ' map'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' map' → logprob: -0.17224285006523132
    2. 'map' → logprob: -2.2972428798675537
    3. ' input' → logprob: -3.2972428798675537
    4. 'input' → logprob: -3.9222428798675537
    5. ' k' → logprob: -7.547242641448975
    6. 'k' → logprob: -8.922243118286133
    7. ' ' → logprob: -8.922243118286133
    8. '0' → logprob: -10.297243118286133
    9. 'int' → logprob: -10.922243118286133
    10. ' list' → logprob: -10.922243118286133

Token 10: '(int' (ID: 2742)
  Prédit: '(int'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(int' → logprob: -0.09771758317947388
    2. '(input' → logprob: -3.097717523574829
    3. '(' → logprob: -3.597717523574829
    4. '(str' → logprob: -4.597717761993408
    5. '(lambda' → logprob: -4.722717761993408
    6. '(eval' → logprob: -8.09771728515625
    7. 'int' → logprob: -8.34771728515625
    8. '(list' → logprob: -8.47271728515625
    9. '<int' → logprob: -8.59771728515625
    10. '[int' → logprob: -8.59771728515625

Token 11: ',' (ID: 11)
  Prédit: '(input'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(input' → logprob: -0.002236616564914584
    2. ')' → logprob: -6.752236843109131
    3. ',input' → logprob: -7.252236843109131
    4. 'input' → logprob: -8.752236366271973
    5. '(' → logprob: -9.127236366271973
    6. '=input' → logprob: -10.377236366271973
    7. ',' → logprob: -10.627236366271973
    8. ')(' → logprob: -11.752236366271973
    9. '[input' → logprob: -12.252236366271973
    10. ' (' → logprob: -12.377236366271973

Token 12: ' input' (ID: 3422)
  Prédit: 'input'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'input' → logprob: -0.062049806118011475
    2. ' input' → logprob: -2.8120498657226562
    3. ')' → logprob: -9.937049865722656
    4. '(input' → logprob: -10.437049865722656
    5. ',input' → logprob: -13.062049865722656
    6. '=input' → logprob: -13.437049865722656
    7. '	input' → logprob: -15.437049865722656
    8. '[input' → logprob: -15.437049865722656
    9. ' )' → logprob: -15.687049865722656
    10. ' ' → logprob: -15.937049865722656

Token 13: '().' (ID: 1454)
  Prédit: '())'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '())' → logprob: -0.23088568449020386
    2. '()' → logprob: -1.6058857440948486
    3. '().' → logprob: -5.4808855056762695
    4. ')' → logprob: -6.8558855056762695
    5. '(' → logprob: -9.73088550567627
    6. '());' → logprob: -9.85588550567627
    7. ' ())' → logprob: -10.85588550567627
    8. '();)' → logprob: -10.98088550567627
    9. '()>' → logprob: -11.10588550567627
    10. '(),' → logprob: -11.60588550567627

Token 14: 'split' (ID: 13627)
  Prédit: 'split'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'split' → logprob: -7.886803359724581e-05
    2. 'strip' → logprob: -9.500079154968262
    3. ' split' → logprob: -13.250079154968262
    4. ')' → logprob: -13.625079154968262
    5. 'rstrip' → logprob: -14.750079154968262
    6. '(split' → logprob: -15.000079154968262
    7. 'spl' → logprob: -16.125078201293945
    8. 's' → logprob: -16.250078201293945
    9. ')s' → logprob: -17.875078201293945
    10. 'sp' → logprob: -18.000078201293945

Token 15: '())
' (ID: 4574)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ')' → logprob: -0.19544240832328796
    2. '())' → logprob: -1.9454424381256104
    3. '))' → logprob: -3.6954424381256104
    4. '()' → logprob: -4.820442199707031
    5. '(' → logprob: -7.695442199707031
    6. '('' → logprob: -7.820442199707031
    7. '()))' → logprob: -7.820442199707031
    8. '`)' → logprob: -8.320442199707031
    9. '')' → logprob: -8.945442199707031
    10. ')")' → logprob: -11.195442199707031

Token 16: 'ans' (ID: 616)
  Prédit: 'c'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'c' → logprob: -0.6859291791915894
    2. 'if' → logprob: -0.8109291791915894
    3. '\n' → logprob: -4.185929298400879
    4. 'print' → logprob: -4.435929298400879
    5. 's' → logprob: -4.935929298400879
    6. 'i' → logprob: -6.060929298400879
    7. '\' → logprob: -6.310929298400879
    8. '+' → logprob: -6.435929298400879
    9. 'p' → logprob: -6.685929298400879
    10. 'n' → logprob: -6.685929298400879

Token 17: ' =' (ID: 314)
  Prédit: '='
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '=' → logprob: -0.5135859251022339
    2. ' =' → logprob: -1.0135859251022339
    3. '_' → logprob: -3.5135860443115234
    4. ' +=' → logprob: -5.263586044311523
    5. '+' → logprob: -6.138586044311523
    6. '+=' → logprob: -7.513586044311523
    7. ' ' → logprob: -7.888586044311523
    8. ')' → logprob: -8.013586044311523
    9. '[' → logprob: -9.763586044311523
    10. ',' → logprob: -10.013586044311523

Token 18: ' '' (ID: 461)
  Prédit: 'a'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'a' → logprob: -0.14978593587875366
    2. ' a' → logprob: -2.1497859954833984
    3. '0' → logprob: -4.274785995483398
    4. ' max' → logprob: -6.149785995483398
    5. 'k' → logprob: -6.649785995483398
    6. ' k' → logprob: -6.774785995483398
    7. ' ' → logprob: -6.774785995483398
    8. ''' → logprob: -7.274785995483398
    9. ' min' → logprob: -7.399785995483398
    10. 'max' → logprob: -7.524785995483398

Token 19: 'NG' (ID: 19236)
  Prédit: 'a'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'a' → logprob: -0.33903446793556213
    2. ''' → logprob: -2.7140345573425293
    3. '0' → logprob: -2.7140345573425293
    4. 'No' → logprob: -4.089034557342529
    5. 'YES' → logprob: -4.089034557342529
    6. 'Yes' → logprob: -4.339034557342529
    7. '-' → logprob: -4.464034557342529
    8. 'NO' → logprob: -4.589034557342529
    9. '')' → logprob: -4.839034557342529
    10. '"' → logprob: -4.839034557342529

Token 20: ''
' (ID: 2207)
  Prédit: '''
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ''' → logprob: -9.93710636976175e-05
    2. '')' → logprob: -9.500099182128906
    3. ''
' → logprob: -12.000099182128906
    4. ''''' → logprob: -12.250099182128906
    5. ')' → logprob: -12.500099182128906
    6. '#' → logprob: -13.125099182128906
    7. '"' → logprob: -13.250099182128906
    8. 'a' → logprob: -14.000099182128906
    9. ')'' → logprob: -14.375099182128906
    10. 'if' → logprob: -14.375099182128906

Token 21: 'if' (ID: 366)
  Prédit: 'if'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'if' → logprob: -0.15349529683589935
    2. '\n' → logprob: -2.6534953117370605
    3. '```' → logprob: -2.9034953117370605
    4. 'i' → logprob: -5.0284953117370605
    5. '\' → logprob: -5.1534953117370605
    6. ' if' → logprob: -6.5284953117370605
    7. '
' → logprob: -6.5284953117370605
    8. '``' → logprob: -7.4034953117370605
    9. '' → logprob: -7.7784953117370605
    10. '`
' → logprob: -8.903494834899902

Token 22: ' a' (ID: 261)
  Prédit: ' a'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' a' → logprob: -0.1473539173603058
    2. 'a' → logprob: -2.1473538875579834
    3. ' k' → logprob: -4.0223541259765625
    4. 'k' → logprob: -6.3973541259765625
    5. ' ' → logprob: -8.147354125976562
    6. ' b' → logprob: -8.522354125976562
    7. ' ' → logprob: -9.522354125976562
    8. 'b' → logprob: -10.272354125976562
    9. '(' → logprob: -11.272354125976562
    10. ' (' → logprob: -11.647354125976562

Token 23: ' <=' (ID: 5017)
  Prédit: ' >'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' >' → logprob: -0.5134109854698181
    2. '>' → logprob: -1.263411045074463
    3. ' <' → logprob: -3.263411045074463
    4. '<' → logprob: -3.388411045074463
    5. ' ==' → logprob: -4.263411045074463
    6. '==' → logprob: -4.388411045074463
    7. ' >=' → logprob: -4.763411045074463
    8. ' <=' → logprob: -5.638411045074463
    9. '>=' → logprob: -5.888411045074463
    10. '%' → logprob: -6.138411045074463

Token 24: ' (' (ID: 350)
  Prédit: 'k'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'k' → logprob: -0.277026504278183
    2. 'b' → logprob: -1.7770265340805054
    3. ' k' → logprob: -2.902026414871216
    4. ' b' → logprob: -4.027026653289795
    5. ' ' → logprob: -10.277026176452637
    6. '5' → logprob: -11.027026176452637
    7. '10' → logprob: -12.152026176452637
    8. '0' → logprob: -12.402026176452637
    9. '6' → logprob: -12.402026176452637
    10. '1' → logprob: -12.652026176452637

Token 25: 'b' (ID: 65)
  Prédit: 'k'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'k' → logprob: -0.04407929256558418
    2. ' k' → logprob: -3.169079303741455
    3. 'b' → logprob: -6.919079303741455
    4. ' b' → logprob: -9.419078826904297
    5. ')' → logprob: -12.044078826904297
    6. ' ' → logprob: -13.919078826904297
    7. '5' → logprob: -14.419078826904297
    8. '	k' → logprob: -15.294078826904297
    9. ' ' → logprob: -15.544078826904297
    10. '6' → logprob: -15.669078826904297

Token 26: ' //' (ID: 602)
  Prédit: '):'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '):' → logprob: -0.42608848214149475
    2. ' +' → logprob: -2.051088571548462
    3. '+' → logprob: -2.301088571548462
    4. ')' → logprob: -3.176088571548462
    5. ' ):' → logprob: -3.176088571548462
    6. '+k' → logprob: -4.801088333129883
    7. ' and' → logprob: -5.176088333129883
    8. '-k' → logprob: -5.426088333129883
    9. ' -' → logprob: -5.426088333129883
    10. '-' → logprob: -6.051088333129883

Token 27: ' k' (ID: 372)
  Prédit: 'k'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'k' → logprob: -0.006307119503617287
    2. ' k' → logprob: -5.631307125091553
    3. '2' → logprob: -6.131307125091553
    4. ')' → logprob: -9.256306648254395
    5. '100' → logprob: -9.381306648254395
    6. '10' → logprob: -9.506306648254395
    7. 'a' → logprob: -9.631306648254395
    8. ' ' → logprob: -9.756306648254395
    9. '3' → logprob: -9.756306648254395
    10. '4' → logprob: -11.256306648254395

Token 28: ')' (ID: 8)
  Prédit: '):'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '):' → logprob: -0.13414478302001953
    2. ')' → logprob: -2.1341447830200195
    3. ' ):' → logprob: -5.1341447830200195
    4. '+' → logprob: -7.1341447830200195
    5. ' )' → logprob: -8.38414478302002
    6. ')+' → logprob: -9.63414478302002
    7. ' +' → logprob: -10.13414478302002
    8. '*' → logprob: -10.25914478302002
    9. ':' → logprob: -10.38414478302002
    10. '):
' → logprob: -10.88414478302002

Token 29: ' *' (ID: 425)
  Prédit: ':'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ':' → logprob: -0.038356680423021317
    2. ' :' → logprob: -3.7883567810058594
    3. ' and' → logprob: -4.788356781005859
    4. '+' → logprob: -5.413356781005859
    5. '+:' → logprob: -7.788356781005859
    6. '*' → logprob: -7.788356781005859
    7. ' +' → logprob: -7.913356781005859
    8. ' *' → logprob: -8.03835678100586
    9. 'and' → logprob: -8.41335678100586
    10. ' ' → logprob: -9.53835678100586

Token 30: ' k' (ID: 372)
  Prédit: 'k'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'k' → logprob: -0.0005556552205234766
    2. ' k' → logprob: -7.500555515289307
    3. ' ' → logprob: -13.875555992126465
    4. '	k' → logprob: -14.500555992126465
    5. '(k' → logprob: -14.500555992126465
    6. '  ' → logprob: -15.750555992126465
    7. '*k' → logprob: -15.875555992126465
    8. '(' → logprob: -16.00055503845215
    9. 'к' → logprob: -16.87555503845215
    10. '1' → logprob: -17.25055503845215

Token 31: ':
' (ID: 734)
  Prédit: ':'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ':' → logprob: -0.0036659908946603537
    2. ' and' → logprob: -6.003665924072266
    3. ' :' → logprob: -7.003665924072266
    4. 'and' → logprob: -8.878665924072266
    5. ':
' → logprob: -9.378665924072266
    6. ' or' → logprob: -11.503665924072266
    7. ' ' → logprob: -11.628665924072266
    8. '):' → logprob: -12.003665924072266
    9. '+' → logprob: -12.253665924072266
    10. '+:' → logprob: -12.503665924072266

Token 32: '   ' (ID: 271)
  Prédit: '\n'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '\n' → logprob: -0.5712945461273193
    2. '   ' → logprob: -0.9462945461273193
    3. ' ' → logprob: -4.196294784545898
    4. '
' → logprob: -4.821294784545898
    5. ' ans' → logprob: -5.446294784545898
    6. ' 
' → logprob: -5.446294784545898
    7. ':' → logprob: -5.821294784545898
    8. '\' → logprob: -5.946294784545898
    9. '    
' → logprob: -6.196294784545898
    10. ':
' → logprob: -7.071294784545898

Token 33: ' ans' (ID: 3345)
  Prédit: ' ans'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' ans' → logprob: -0.36790305376052856
    2. 'ans' (adapté à ' ans') → logprob: -1.2429029941558838
    3. '   ' → logprob: -4.117903232574463
    4. '\n' → logprob: -6.117903232574463
    5. '	ans' → logprob: -8.117902755737305
    6. '(ans' → logprob: -8.742902755737305
    7. ' \' → logprob: -9.617902755737305
    8. '\' → logprob: -9.617902755737305
    9. ' a' → logprob: -10.492902755737305
    10. '    
' → logprob: -10.742902755737305

Token 34: ' =' (ID: 314)
  Prédit: ' ='
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' =' → logprob: -0.11283817142248154
    2. '=' → logprob: -2.2378382682800293
    3. ' +=' → logprob: -12.112837791442871
    4. '<|end|>' → logprob: -12.987837791442871
    5. ' ' → logprob: -13.112837791442871
    6. ' ='' → logprob: -13.237837791442871
    7. '='' → logprob: -14.362837791442871
    8. '+=' → logprob: -14.612837791442871
    9. ' ==' → logprob: -14.987837791442871
    10. '＝' → logprob: -15.112837791442871

Token 35: ' '' (ID: 461)
  Prédit: '''
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ''' → logprob: -0.05593658611178398
    2. ' '' → logprob: -3.305936574935913
    3. '"' → logprob: -4.180936813354492
    4. ' "' → logprob: -6.305936813354492
    5. ' ' → logprob: -7.805936813354492
    6. '`' → logprob: -9.930936813354492
    7. ''a' → logprob: -9.930936813354492
    8. ''O' → logprob: -10.430936813354492
    9. ''S' → logprob: -10.930936813354492
    10. ''A' → logprob: -11.305936813354492

Token 36: 'OK' (ID: 5175)
  Prédit: 'OK'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'OK' → logprob: -0.0026479519437998533
    2. 'NG' → logprob: -6.002647876739502
    3. ' OK' → logprob: -9.62764835357666
    4. ''' → logprob: -9.75264835357666
    5. 'Yes' → logprob: -11.00264835357666
    6. 'ok' → logprob: -11.50264835357666
    7. 'Ok' → logprob: -12.00264835357666
    8. '_OK' → logprob: -12.37764835357666
    9. ' ' → logprob: -13.25264835357666
    10. 'AG' → logprob: -13.37764835357666

Token 37: ''
' (ID: 2207)
  Prédit: '''
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ''' → logprob: -0.013510649092495441
    2. 'print' → logprob: -4.888510704040527
    3. ''
' → logprob: -5.263510704040527
    4. '
' → logprob: -8.013510704040527
    5. '"' → logprob: -9.638510704040527
    6. '')' → logprob: -9.888510704040527
    7. '```' → logprob: -10.013510704040527
    8. ')' → logprob: -10.138510704040527
    9. '''
' → logprob: -10.513510704040527
    10. ''''
' → logprob: -10.513510704040527

Token 38: 'print' (ID: 1598)
  Prédit: 'print'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'print' → logprob: -0.0014304745709523559
    2. '
' → logprob: -7.376430511474609
    3. '\n' → logprob: -7.751430511474609
    4. '<|end|>' → logprob: -8.50143051147461
    5. ' print' → logprob: -10.00143051147461
    6. ')' → logprob: -10.00143051147461
    7. '```' → logprob: -11.00143051147461
    8. '#' → logprob: -11.25143051147461
    9. 'p' → logprob: -11.50143051147461
    10. '\' → logprob: -11.50143051147461

Token 39: '(ans' (ID: 70054)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(' → logprob: -0.2537021040916443
    2. '(ans' → logprob: -1.503702163696289
    3. '('' → logprob: -6.378702163696289
    4. '("("' → logprob: -10.003702163696289
    5. '()' → logprob: -11.503702163696289
    6. '(a' → logprob: -11.628702163696289
    7. '(`' → logprob: -12.878702163696289
    8. ' (' → logprob: -13.503702163696289
    9. '(answer' → logprob: -13.753702163696289
    10. '((' → logprob: -14.003702163696289

Token 40: ')' (ID: 8)
  Prédit: ')'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')' → logprob: -1.0280383548888494e-06
    2. '))' → logprob: -14.375000953674316
    3. ' )' → logprob: -16.000001907348633
    4. ')`' → logprob: -16.000001907348633
    5. '')' → logprob: -16.250001907348633
    6. '`)' → logprob: -16.875001907348633
    7. ')
' → logprob: -18.500001907348633
    8. '）' → logprob: -19.125001907348633
    9. '")' → logprob: -20.125001907348633
    10. ')}' → logprob: -20.125001907348633


RÉSUMÉ:
--------------------------------------------------------------------------------
Total des tokens analysés: 38
Tokens correctement prédits (1ère position, stricte): 10
Tokens correctement prédits (1ère position, avec adaptation): 10
Tokens correctement prédits (top 10): 28
Précision stricte (1ère position): 26.32%
Précision adaptée (1ère position): 26.32%
Précision (top 10): 73.68%
================================================================================
