================================================================================
ANALYSE DE PRÉDICTION TOKEN PAR TOKEN (BATCH API)
Date: 2025-06-04 19:55:03
Modèle de tokenisation: gpt-4o-mini
================================================================================

SCRIPT ANALYSÉ:
--------------------------------------------------------------------------------
from sys import stdin as S
give = S.readline

N = int(give())
A = []
for _ in range(N):A.append([int(z) for z in give().split()])
A.sort(key=lambda k:k[1])

score = 0
def ohno():print('No');quit()
for item in A:
    score += item[0]
    if not score <= item[1]:ohno()
else:print('Yes')
--------------------------------------------------------------------------------

RÉSULTATS D'ANALYSE TOKEN PAR TOKEN:
--------------------------------------------------------------------------------
Token 0: 'from' (ID: 2845)
  → Token d'amorce (pas de prédiction)

Token 1: ' sys' (ID: 12228)
  → Token d'amorce (pas de prédiction)

Token 2: ' import' (ID: 1588)
  → Token d'amorce (pas de prédiction)

Token 3: ' stdin' (ID: 75143)
  Prédit: 'argv'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'argv' → logprob: -0.08520080149173737
    2. ' argv' → logprob: -2.710200786590576
    3. 'exit' → logprob: -4.585200786590576
    4. ' exit' → logprob: -5.835200786590576
    5. 'stdout' → logprob: -6.960200786590576
    6. 'path' → logprob: -7.710200786590576
    7. 'stdin' → logprob: -8.210201263427734
    8. 'version' → logprob: -9.085201263427734
    9. 'import' → logprob: -9.460201263427734
    10. ' path' → logprob: -10.085201263427734

Token 4: ' as' (ID: 472)
  Prédit: '.'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '.' → logprob: -0.004543930757790804
    2. '.readline' → logprob: -5.629543781280518
    3. '\n' → logprob: -8.004544258117676
    4. '.
' → logprob: -8.504544258117676
    5. '```' → logprob: -9.129544258117676
    6. 'import' → logprob: -9.504544258117676
    7. '.read' → logprob: -9.504544258117676
    8. '
' → logprob: -10.754544258117676
    9. 'newline' → logprob: -10.754544258117676
    10. 'print' → logprob: -10.754544258117676

Token 5: ' S' (ID: 336)
  Prédit: 'input'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'input' → logprob: -0.14563332498073578
    2. ' input' → logprob: -2.8956332206726074
    3. 'sys' → logprob: -3.2706332206726074
    4. 'stdin' → logprob: -3.8956332206726074
    5. 's' → logprob: -5.020633220672607
    6. 'in' → logprob: -5.395633220672607
    7. ' sys' → logprob: -5.520633220672607
    8. 'f' → logprob: -6.270633220672607
    9. 'inp' → logprob: -6.270633220672607
    10. 'r' → logprob: -7.520633220672607

Token 6: '
' (ID: 198)
  Prédit: '.'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '.' → logprob: -0.0021143355406820774
    2. ',' → logprob: -7.377114295959473
    3. 't' → logprob: -7.377114295959473
    4. ':' → logprob: -7.502114295959473
    5. 'T' → logprob: -9.627114295959473
    6. '.readline' → logprob: -9.877114295959473
    7. '.read' → logprob: -10.377114295959473
    8. 'u' → logprob: -10.502114295959473
    9. 'I' → logprob: -10.877114295959473
    10. '[' → logprob: -11.127114295959473

Token 7: 'give' (ID: 91615)
  Prédit: '.'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '.' → logprob: -0.003190309274941683
    2. '.readline' → logprob: -6.253190517425537
    3. '.read' → logprob: -8.003190040588379
    4. 'r' → logprob: -8.253190040588379
    5. ',' → logprob: -8.378190040588379
    6. 'read' → logprob: -9.378190040588379
    7. 'for' → logprob: -9.628190040588379
    8. '=' → logprob: -10.003190040588379
    9. ':' → logprob: -10.253190040588379
    10. '\n' → logprob: -10.878190040588379

Token 8: ' =' (ID: 314)
  Prédit: 'n'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'n' → logprob: -0.00701906019821763
    2. 'r' → logprob: -6.25701904296875
    3. ' ' → logprob: -7.00701904296875
    4. '_' → logprob: -7.13201904296875
    5. 'input' → logprob: -7.13201904296875
    6. ' n' → logprob: -7.50701904296875
    7. 'stdin' → logprob: -7.75701904296875
    8. '.' → logprob: -7.88201904296875
    9. 'm' → logprob: -8.00701904296875
    10. '=' → logprob: -8.50701904296875

Token 9: ' S' (ID: 336)
  Prédit: ' S'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' S' → logprob: -0.7035652995109558
    2. 'S' → logprob: -1.3285653591156006
    3. 'input' → logprob: -1.7035653591156006
    4. ' input' → logprob: -2.9535653591156006
    5. ' ' → logprob: -6.2035651206970215
    6. 'int' → logprob: -6.5785651206970215
    7. 'lambda' → logprob: -7.0785651206970215
    8. ' lambda' → logprob: -7.9535651206970215
    9. ' iter' → logprob: -8.57856559753418
    10. 'stdin' → logprob: -8.70356559753418

Token 10: '.readline' (ID: 74673)
  Prédit: '.'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '.' → logprob: -0.29075971245765686
    2. '.readline' → logprob: -1.5407596826553345
    3. '.read' → logprob: -3.290759801864624
    4. '.write' → logprob: -8.415760040283203
    5. '.readlines' → logprob: -8.665760040283203
    6. '.stdin' → logprob: -8.915760040283203
    7. 'read' → logprob: -9.040760040283203
    8. ' .' → logprob: -9.915760040283203
    9. '.next' → logprob: -10.665760040283203
    10. '<|end|>' → logprob: -11.040760040283203

Token 11: '

' (ID: 279)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '(' → logprob: -0.003993984777480364
    2. '()' → logprob: -6.003993988037109
    3. '(
' → logprob: -6.628993988037109
    4. '.' → logprob: -9.12899398803711
    5. '(

' → logprob: -10.62899398803711
    6. ' (' → logprob: -10.75399398803711
    7. ')' → logprob: -11.37899398803711
    8. ' ' → logprob: -11.62899398803711
    9. '()
' → logprob: -12.00399398803711
    10. '('' → logprob: -12.75399398803711

Token 12: 'N' (ID: 45)
  Prédit: '()'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '()' → logprob: -0.3146475553512573
    2. '(' → logprob: -1.3146475553512573
    3. '(
' → logprob: -7.564647674560547
    4. '()
' → logprob: -7.689647674560547
    5. '().' → logprob: -8.564647674560547
    6. ')' → logprob: -9.564647674560547
    7. '()

' → logprob: -10.064647674560547
    8. '#' → logprob: -11.314647674560547
    9. '(

' → logprob: -11.439647674560547
    10. ' ()' → logprob: -11.689647674560547

Token 13: ' =' (ID: 314)
  Prédit: ' ='
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' =' → logprob: -0.12274300307035446
    2. ' ' → logprob: -2.7477428913116455
    3. '=' → logprob: -2.9977428913116455
    4. ')' → logprob: -7.622743129730225
    5. ',' → logprob: -8.122742652893066
    6. '=int' → logprob: -8.622742652893066
    7. ' )' → logprob: -8.997742652893066
    8. '  ' → logprob: -9.497742652893066
    9. ' ,' → logprob: -9.497742652893066
    10. '.' → logprob: -9.747742652893066

Token 14: ' int' (ID: 677)
  Prédit: ' int'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' int' → logprob: -0.029800597578287125
    2. 'int' → logprob: -3.5298006534576416
    3. ' give' → logprob: -10.654800415039062
    4. ' ' → logprob: -10.779800415039062
    5. 'give' → logprob: -12.779800415039062
    6. '=int' → logprob: -13.029800415039062
    7. '<int' → logprob: -15.529800415039062
    8. '(int' → logprob: -16.029800415039062
    9. ' in' → logprob: -16.904800415039062
    10. '  ' → logprob: -17.029800415039062

Token 15: '(g' (ID: 7791)
  Prédit: '(g'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(g' → logprob: -0.20152735710144043
    2. '(' → logprob: -1.7015273571014404
    3. 'give' → logprob: -9.70152759552002
    4. '('' → logprob: -11.07652759552002
    5. '(S' → logprob: -11.57652759552002
    6. '(G' → logprob: -11.82652759552002
    7. '(input' → logprob: -12.07652759552002
    8. ' (' → logprob: -12.70152759552002
    9. ' give' → logprob: -13.32652759552002
    10. '()' → logprob: -13.32652759552002

Token 16: 'ive' (ID: 585)
  Prédit: 'ive'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'ive' → logprob: -4.4849443838757e-06
    2. 'give' → logprob: -12.500004768371582
    3. 'iven' → logprob: -15.500004768371582
    4. 'i' → logprob: -15.625004768371582
    5. ' ive' → logprob: -15.625004768371582
    6. 'iv' → logprob: -16.000003814697266
    7. 've' → logprob: -17.500003814697266
    8. 'ime' → logprob: -17.875003814697266
    9. '(' → logprob: -18.375003814697266
    10. 'rive' → logprob: -19.000003814697266

Token 17: '())
' (ID: 4574)
  Prédit: '())'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '())' → logprob: -0.12721198797225952
    2. '()' → logprob: -2.1272120475769043
    3. '().' → logprob: -8.752211570739746
    4. ')' → logprob: -10.002211570739746
    5. ' ())' → logprob: -10.627211570739746
    6. '(' → logprob: -11.127211570739746
    7. '())
' → logprob: -11.377211570739746
    8. '()))' → logprob: -11.377211570739746
    9. '()
' → logprob: -12.127211570739746
    10. '();)' → logprob: -12.377211570739746

Token 18: 'A' (ID: 32)
  Prédit: '\n'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '\n' → logprob: -0.38611575961112976
    2. '
' → logprob: -2.136115789413452
    3. ' ' → logprob: -2.636115789413452
    4. 'for' → logprob: -3.261115789413452
    5. ')' → logprob: -3.761115789413452
    6. '<|end|>' → logprob: -4.136115550994873
    7. '\' → logprob: -4.261115550994873
    8. ' 
' → logprob: -4.511115550994873
    9. '```' → logprob: -5.136115550994873
    10. ' for' → logprob: -5.261115550994873

Token 19: ' =' (ID: 314)
  Prédit: ' ='
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' =' → logprob: -0.46395307779312134
    2. '[' → logprob: -1.3389530181884766
    3. '=' → logprob: -2.9639530181884766
    4. '.' → logprob: -3.0889530181884766
    5. '.append' → logprob: -6.338953018188477
    6. '[:]' → logprob: -6.338953018188477
    7. '[]' → logprob: -6.463953018188477
    8. '[i' → logprob: -6.588953018188477
    9. '[A' → logprob: -6.713953018188477
    10. ' ' → logprob: -7.213953018188477

Token 20: ' []
' (ID: 8911)
  Prédit: ' list'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' list' → logprob: -0.589139997959137
    2. 'list' → logprob: -0.839139997959137
    3. '[' → logprob: -5.089139938354492
    4. ' [' → logprob: -5.714139938354492
    5. '[]' → logprob: -6.339139938354492
    6. ' []' → logprob: -7.089139938354492
    7. '[list' → logprob: -7.464139938354492
    8. '[int' → logprob: -8.839139938354492
    9. 'give' → logprob: -8.839139938354492
    10. ' give' → logprob: -9.839139938354492

Token 21: 'for' (ID: 1938)
  Prédit: 'for'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'for' → logprob: -0.0042976574040949345
    2. ' for' → logprob: -5.504297733306885
    3. '
' → logprob: -8.504297256469727
    4. ' 
' → logprob: -12.254297256469727
    5. '[' → logprob: -13.129297256469727
    6. '```' → logprob: -13.129297256469727
    7. '\n' → logprob: -13.754297256469727
    8. '[
' → logprob: -13.879297256469727
    9. '_' → logprob: -14.129297256469727
    10. '`' → logprob: -14.504297256469727

Token 22: ' _' (ID: 1175)
  Prédit: ' _'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' _' → logprob: -0.3311598002910614
    2. ' i' → logprob: -1.8311598300933838
    3. ' ' → logprob: -2.456159830093384
    4. '_' → logprob: -3.331159830093384
    5. 'i' → logprob: -9.081159591674805
    6. ' ' → logprob: -10.331159591674805
    7. ' ‌' → logprob: -11.581159591674805
    8. '_i' → logprob: -12.331159591674805
    9. '  ' → logprob: -13.331159591674805
    10. ' ▁' → logprob: -13.581159591674805

Token 23: ' in' (ID: 306)
  Prédit: ' in'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' in' → logprob: -0.04330791160464287
    2. 'in' → logprob: -3.1683080196380615
    3. ' ' → logprob: -8.29330825805664
    4. 'i' → logprob: -10.54330825805664
    5. ' i' → logprob: -12.29330825805664
    6. 'range' → logprob: -12.41830825805664
    7. 'n' → logprob: -12.54330825805664
    8. ' _' → logprob: -12.66830825805664
    9. 'import' → logprob: -12.79330825805664
    10. '_' → logprob: -13.54330825805664

Token 24: ' range' (ID: 3352)
  Prédit: 'range'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'range' → logprob: -0.0205561351031065
    2. ' range' → logprob: -3.8955562114715576
    3. 'A' → logprob: -12.270556449890137
    4. '(range' → logprob: -12.645556449890137
    5. '	range' → logprob: -13.270556449890137
    6. 'ran' → logprob: -13.770556449890137
    7. 'rang' → logprob: -14.020556449890137
    8. ' ' → logprob: -14.645556449890137
    9. ' xrange' → logprob: -15.145556449890137
    10. 'r' → logprob: -15.270556449890137

Token 25: '(N' (ID: 10564)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(' → logprob: -0.48249492049217224
    2. '(N' → logprob: -0.9824949502944946
    3. ' (' → logprob: -4.857494831085205
    4. ' N' → logprob: -7.607494831085205
    5. '(range' → logprob: -10.107495307922363
    6. 'N' → logprob: -10.732495307922363
    7. '(
' → logprob: -10.982495307922363
    8. '(n' → logprob: -11.482495307922363
    9. ' range' → logprob: -11.482495307922363
    10. '(int' → logprob: -12.107495307922363

Token 26: '):' (ID: 3127)
  Prédit: '):'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '):' → logprob: -0.014569957740604877
    2. '):
' → logprob: -4.5145697593688965
    3. ')' → logprob: -6.0145697593688965
    4. ' ):' → logprob: -7.1395697593688965
    5. ':' → logprob: -8.389570236206055
    6. '):
' → logprob: -10.764570236206055
    7. ' ):
' → logprob: -11.264570236206055
    8. ' )' → logprob: -11.514570236206055
    9. '+' → logprob: -13.264570236206055
    10. ' ' → logprob: -13.889570236206055

Token 27: 'A' (ID: 32)
  Prédit: ' A'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' A' → logprob: -0.008147019892930984
    2. 'A' → logprob: -5.008147239685059
    3. ' a' → logprob: -7.633147239685059
    4. ' 
' → logprob: -7.758147239685059
    5. ' ' → logprob: -7.883147239685059
    6. '   ' → logprob: -9.508147239685059
    7. 'a' → logprob: -10.883147239685059
    8. '    ' → logprob: -10.883147239685059
    9. ' s' → logprob: -12.008147239685059
    10. ' _' → logprob: -12.633147239685059

Token 28: '.append' (ID: 3709)
  Prédit: 'pp'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'pp' → logprob: -0.05002338066697121
    2. '.append' → logprob: -3.550023317337036
    3. '.pp' → logprob: -4.175023555755615
    4. '.p' → logprob: -5.800023555755615
    5. '.' → logprob: -6.675023555755615
    6. 'p' → logprob: -8.175023078918457
    7. ' .' → logprob: -9.675023078918457
    8. 'ppe' → logprob: -11.550023078918457
    9. '_pp' → logprob: -11.550023078918457
    10. ' p' → logprob: -11.800023078918457

Token 29: '([' (ID: 5194)
  Prédit: '(int'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '(int' → logprob: -0.007769051473587751
    2. '(' → logprob: -4.8827691078186035
    3. 'int' → logprob: -8.882768630981445
    4. ' (' → logprob: -11.507768630981445
    5. '(tuple' → logprob: -12.382768630981445
    6. ' int' → logprob: -12.757768630981445
    7. '()' → logprob: -13.507768630981445
    8. '(list' → logprob: -13.757768630981445
    9. ' ' → logprob: -14.257768630981445
    10. '(i' → logprob: -14.507768630981445

Token 30: 'int' (ID: 491)
  Prédit: 'int'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'int' → logprob: -0.10353551805019379
    2. '*' → logprob: -2.3535354137420654
    3. ' int' → logprob: -6.6035356521606445
    4. ']int' → logprob: -6.9785356521606445
    5. '0' → logprob: -7.9785356521606445
    6. ' *' → logprob: -9.103535652160645
    7. '[int' → logprob: -9.978535652160645
    8. '(int' → logprob: -9.978535652160645
    9. '*g' → logprob: -9.978535652160645
    10. '*[' → logprob: -10.228535652160645

Token 31: '(z' (ID: 27674)
  Prédit: '(g'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '(g' → logprob: -0.21715454757213593
    2. '(' → logprob: -2.2171545028686523
    3. '(x' → logprob: -2.4671545028686523
    4. '(i' → logprob: -7.217154502868652
    5. '(s' → logprob: -7.717154502868652
    6. '(
' → logprob: -9.717154502868652
    7. '(*' → logprob: -10.342154502868652
    8. '(a' → logprob: -10.467154502868652
    9. '('' → logprob: -11.092154502868652
    10. '()' → logprob: -11.217154502868652

Token 32: ')' (ID: 8)
  Prédit: ')'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')' → logprob: -0.006536554079502821
    2. '())' → logprob: -5.631536483764648
    3. '(x' → logprob: -6.381536483764648
    4. '(' → logprob: -8.131536483764648
    5. '()' → logprob: -8.381536483764648
    6. '(i' → logprob: -8.381536483764648
    7. ' )' → logprob: -8.756536483764648
    8. '')' → logprob: -9.256536483764648
    9. 'for' → logprob: -10.256536483764648
    10. ')])' → logprob: -10.506536483764648

Token 33: ' for' (ID: 395)
  Prédit: 'for'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'for' → logprob: -0.4864450991153717
    2. ')' → logprob: -1.7364450693130493
    3. ' for' → logprob: -2.361445188522339
    4. '()' → logprob: -2.611445188522339
    5. '(x' → logprob: -3.486445188522339
    6. '(' → logprob: -4.98644495010376
    7. '(i' → logprob: -7.36144495010376
    8. '(s' → logprob: -7.61144495010376
    9. ' ' → logprob: -7.98644495010376
    10. 'in' → logprob: -8.361445426940918

Token 34: ' z' (ID: 579)
  Prédit: ' give'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' give' → logprob: -0.03567830100655556
    2. 'give' → logprob: -3.4106783866882324
    3. ' z' → logprob: -6.285678386688232
    4. ' ' → logprob: -9.910677909851074
    5. ' in' → logprob: -10.410677909851074
    6. 'Give' → logprob: -11.035677909851074
    7. ' given' → logprob: -11.410677909851074
    8. ' g' → logprob: -11.785677909851074
    9. ' ' → logprob: -12.035677909851074
    10. '<|end|>' → logprob: -12.035677909851074

Token 35: ' in' (ID: 306)
  Prédit: ' in'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' in' → logprob: -0.01250847801566124
    2. 'in' → logprob: -4.512508392333984
    3. 'give' → logprob: -6.762508392333984
    4. ' give' → logprob: -8.137508392333984
    5. ' =' → logprob: -13.637508392333984
    6. ' ' → logprob: -13.762508392333984
    7. 'given' → logprob: -13.950008392333984
    8. ' to' → logprob: -13.950008392333984
    9. ' given' → logprob: -14.012508392333984
    10. 'Give' → logprob: -14.262508392333984

Token 36: ' give' (ID: 3644)
  Prédit: 'give'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'give' → logprob: -0.12696737051010132
    2. ' give' → logprob: -2.126967430114746
    3. ' ' → logprob: -11.876967430114746
    4. 'gave' → logprob: -12.251967430114746
    5. ')' → logprob: -12.564467430114746
    6. 'Give' → logprob: -12.626967430114746
    7. '(g' → logprob: -12.689467430114746
    8. 'giv' → logprob: -13.126967430114746
    9. 'g' → logprob: -13.314467430114746
    10. '-g' → logprob: -13.564467430114746

Token 37: '().' (ID: 1454)
  Prédit: '().'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '().' → logprob: -0.00012475410767365247
    2. '()' → logprob: -9.00012493133545
    3. '()]' → logprob: -14.12512493133545
    4. ' ().' → logprob: -15.12512493133545
    5. '())' → logprob: -15.25012493133545
    6. '()].' → logprob: -17.250123977661133
    7. '(' → logprob: -17.875123977661133
    8. '()[' → logprob: -18.250123977661133
    9. '()
' → logprob: -18.875123977661133
    10. '.strip' → logprob: -19.000123977661133

Token 38: 'split' (ID: 13627)
  Prédit: 'split'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'split' → logprob: -0.05913021042943001
    2. 'strip' → logprob: -3.0591301918029785
    3. 'rstrip' → logprob: -4.5591301918029785
    4. ' split' → logprob: -11.184130668640137
    5. ' strip' → logprob: -13.684130668640137
    6. 'rs' → logprob: -14.434130668640137
    7. '(split' → logprob: -14.434130668640137
    8. 'spl' → logprob: -16.05912971496582
    9. 'sp' → logprob: -17.43412971496582
    10. ' ' → logprob: -17.80912971496582

Token 39: '()])
' (ID: 141457)
  Prédit: '()'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '()' → logprob: -0.1313880980014801
    2. '()]' → logprob: -2.3813881874084473
    3. '())' → logprob: -3.5063881874084473
    4. ')])' → logprob: -7.756388187408447
    5. '(' → logprob: -8.881387710571289
    6. '()])
' → logprob: -10.131387710571289
    7. '])' → logprob: -10.131387710571289
    8. '()))' → logprob: -11.131387710571289
    9. '()],' → logprob: -11.756387710571289
    10. '()][' → logprob: -12.006387710571289

Token 40: 'A' (ID: 32)
  Prédit: 'for'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'for' → logprob: -1.048933982849121
    2. '
' → logprob: -1.673933982849121
    3. '\n' → logprob: -1.923933982849121
    4. '[' → logprob: -2.048933982849121
    5. ')' → logprob: -3.673933982849121
    6. '[
' → logprob: -4.173933982849121
    7. '#' → logprob: -4.423933982849121
    8. ' ' → logprob: -4.423933982849121
    9. 'r' → logprob: -4.548933982849121
    10. '(' → logprob: -4.673933982849121

Token 41: '.sort' (ID: 19551)
  Prédit: ''
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False

Token 42: '(key' (ID: 8932)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(' → logprob: -0.6346464157104492
    2. '()' → logprob: -0.7596464157104492
    3. '((' → logprob: -6.884646415710449
    4. '(()' → logprob: -7.384646415710449
    5. '(
' → logprob: -8.75964641571045
    6. '()
' → logprob: -10.00964641571045
    7. '(.' → logprob: -10.75964641571045
    8. '().' → logprob: -10.88464641571045
    9. '()(' → logprob: -11.00964641571045
    10. '(key' → logprob: -11.00964641571045

Token 43: '=lambda' (ID: 64865)
  Prédit: '=lambda'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '=lambda' → logprob: -0.006721655838191509
    2. '=' → logprob: -5.006721496582031
    3. '=len' → logprob: -12.631721496582031
    4. '=A' → logprob: -14.006721496582031
    5. '=int' → logprob: -14.506721496582031
    6. 'lambda' → logprob: -14.756721496582031
    7. '=str' → logprob: -15.256721496582031
    8. '=(' → logprob: -15.756721496582031
    9. '=list' → logprob: -15.756721496582031
    10. '=item' → logprob: -16.00672149658203

Token 44: ' k' (ID: 372)
  Prédit: ' x'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' x' → logprob: -0.038630951195955276
    2. 'x' → logprob: -3.288630962371826
    3. ' a' → logprob: -8.288630485534668
    4. ' z' → logprob: -8.413630485534668
    5. ' s' → logprob: -9.913630485534668
    6. 'a' → logprob: -10.913630485534668
    7. 's' → logprob: -11.913630485534668
    8. ' y' → logprob: -11.913630485534668
    9. ' lambda' → logprob: -12.038630485534668
    10. 'z' → logprob: -12.038630485534668

Token 45: ':k' (ID: 69335)
  Prédit: ':'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ':' → logprob: -0.07917992025613785
    2. ':k' → logprob: -2.5791800022125244
    3. ' :' → logprob: -8.454179763793945
    4. ':[' → logprob: -10.329179763793945
    5. '[' → logprob: -10.954179763793945
    6. ':
' → logprob: -11.454179763793945
    7. ':(' → logprob: -13.329179763793945
    8. 'k' → logprob: -13.329179763793945
    9. '[k' → logprob: -13.454179763793945
    10. ':[
' → logprob: -13.454179763793945

Token 46: '[' (ID: 58)
  Prédit: '['
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '[' → logprob: -0.0003688245196826756
    2. '[-' → logprob: -8.50036907196045
    3. ')' → logprob: -9.00036907196045
    4. '[:' → logprob: -11.37536907196045
    5. ':' → logprob: -11.62536907196045
    6. ' [' → logprob: -12.00036907196045
    7. '[::-' → logprob: -12.50036907196045
    8. ')[' → logprob: -13.25036907196045
    9. '[:]' → logprob: -13.25036907196045
    10. ':[' → logprob: -13.62536907196045

Token 47: '1' (ID: 16)
  Prédit: '0'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '0' → logprob: -0.07214145362377167
    2. '1' → logprob: -2.697141408920288
    3. '-' → logprob: -6.572141647338867
    4. '2' → logprob: -7.572141647338867
    5. ' ' → logprob: -8.322141647338867
    6. '[' → logprob: -11.634641647338867
    7. ':' → logprob: -11.947141647338867
    8. ' -' → logprob: -12.134641647338867
    9. '3' → logprob: -12.322141647338867
    10. '::-' → logprob: -12.447141647338867

Token 48: '])

' (ID: 21045)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ')' → logprob: -0.0032509120646864176
    2. ',' → logprob: -6.378251075744629
    3. '])' → logprob: -6.878251075744629
    4. ' )' → logprob: -8.253251075744629
    5. '))' → logprob: -9.878251075744629
    6. '),' → logprob: -10.003251075744629
    7. ')])' → logprob: -10.003251075744629
    8. '})' → logprob: -10.378251075744629
    9. '>)' → logprob: -11.253251075744629
    10. ',)' → logprob: -11.253251075744629

Token 49: 'score' (ID: 21200)
  Prédit: 'for'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'for' → logprob: -1.3990168571472168
    2. ')' → logprob: -1.7740168571472168
    3. '[' → logprob: -1.8990168571472168
    4. '#' → logprob: -2.024016857147217
    5. '
' → logprob: -2.399016857147217
    6. '<|end|>' → logprob: -2.524016857147217
    7. '\n' → logprob: -2.774016857147217
    8. 'print' → logprob: -3.774016857147217
    9. '```' → logprob: -5.024016857147217
    10. ' for' → logprob: -5.149016857147217

Token 50: ' =' (ID: 314)
  Prédit: '='
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '=' → logprob: -0.729871928691864
    2. ' =' → logprob: -1.2298719882965088
    3. 's' → logprob: -1.6048719882965088
    4. '<|end|>' → logprob: -4.47987174987793
    5. ' ' → logprob: -5.10487174987793
    6. '[' → logprob: -5.35487174987793
    7. ',' → logprob: -7.72987174987793
    8. '_' → logprob: -7.97987174987793
    9. '=[]' → logprob: -8.47987174987793
    10. ')' → logprob: -8.60487174987793

Token 51: ' ' (ID: 220)
  Prédit: '0'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '0' → logprob: -0.005010194145143032
    2. ' ' → logprob: -5.38001012802124
    3. '-' → logprob: -8.880010604858398
    4. 'A' → logprob: -9.005010604858398
    5. '1' → logprob: -9.380010604858398
    6. ' A' → logprob: -11.630010604858398
    7. '100' → logprob: -11.755010604858398
    8. '[]' → logprob: -11.880010604858398
    9. ' -' → logprob: -12.005010604858398
    10. '10' → logprob: -12.255010604858398

Token 52: '0' (ID: 15)
  Prédit: '0'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '0' → logprob: -0.00861468818038702
    2. 'A' → logprob: -5.008614540100098
    3. '-' → logprob: -6.758614540100098
    4. '[]' → logprob: -8.258614540100098
    5. '1' → logprob: -9.008614540100098
    6. '[' → logprob: -9.258614540100098
    7. '[A' → logprob: -10.008614540100098
    8. '-A' → logprob: -10.133614540100098
    9. ' ' → logprob: -10.133614540100098
    10. 'float' → logprob: -10.508614540100098

Token 53: '
' (ID: 198)
  Prédit: '
'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '
' → logprob: -1.0456596612930298
    2. ' 
' → logprob: -1.1706596612930298
    3. '<|end|>' → logprob: -1.5456596612930298
    4. ' ' → logprob: -2.4206595420837402
    5. ' for' → logprob: -4.17065954208374
    6. ',' → logprob: -5.29565954208374
    7. 'for' → logprob: -5.42065954208374
    8. '0' → logprob: -5.79565954208374
    9. ' ,' → logprob: -7.17065954208374
    10. '  
' → logprob: -7.17065954208374

Token 54: 'def' (ID: 1314)
  Prédit: 'last'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'last' → logprob: -0.8888193368911743
    2. 'current' → logprob: -1.6388193368911743
    3. 'prev' → logprob: -2.2638192176818848
    4. ' last' → logprob: -2.3888192176818848
    5. 'time' → logprob: -2.7638192176818848
    6. ' current' → logprob: -3.3888192176818848
    7. 'end' → logprob: -3.5138192176818848
    8. ' prev' → logprob: -3.8888192176818848
    9. 't' → logprob: -5.263819217681885
    10. ' t' → logprob: -5.513819217681885

Token 55: ' oh' (ID: 8718)
  Prédit: ' can'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' can' → logprob: -1.0616626739501953
    2. ' solve' → logprob: -1.1866626739501953
    3. ' check' → logprob: -2.3116626739501953
    4. ' dfs' → logprob: -2.5616626739501953
    5. ' main' → logprob: -3.1866626739501953
    6. ' solution' → logprob: -3.3116626739501953
    7. ' schedule' → logprob: -3.9366626739501953
    8. ' possible' → logprob: -4.561662673950195
    9. 'solve' → logprob: -5.061662673950195
    10. ' try' → logprob: -5.311662673950195

Token 56: 'no' (ID: 1750)
  Prédit: 'no'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'no' → logprob: -0.0650944784283638
    2. 'ay' → logprob: -3.565094470977783
    3. 'ara' → logprob: -4.815094470977783
    4. 'ashi' → logprob: -4.815094470977783
    5. 'ayo' → logprob: -5.440094470977783
    6. 'a' → logprob: -6.440094470977783
    7. '_' → logprob: -6.690094470977783
    8. 'ash' → logprob: -6.690094470977783
    9. '_no' → logprob: -6.815094470977783
    10. 'k' → logprob: -6.815094470977783

Token 57: '():' (ID: 9442)
  Prédit: '():'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '():' → logprob: -0.4512504041194916
    2. '(' → logprob: -2.2012503147125244
    3. '(s' → logprob: -2.9512503147125244
    4. '(score' → logprob: -3.0762503147125244
    5. '()' → logprob: -3.3262503147125244
    6. '(day' → logprob: -3.9512503147125244
    7. '(a' → logprob: -4.2012505531311035
    8. '(k' → logprob: -4.3262505531311035
    9. '(i' → logprob: -4.7012505531311035
    10. '(time' → logprob: -4.8262505531311035

Token 58: 'print' (ID: 1598)
  Prédit: ''
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False

Token 59: '('' (ID: 706)
  Prédit: '(score'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(score' → logprob: -0.5863472819328308
    2. '(' → logprob: -0.9613472819328308
    3. '()' → logprob: -3.8363473415374756
    4. '(-' → logprob: -3.9613473415374756
    5. '('' → logprob: -4.7113471031188965
    6. '("' → logprob: -4.7113471031188965
    7. 'score' → logprob: -6.9613471031188965
    8. '("")' → logprob: -7.8363471031188965
    9. '(len' → logprob: -8.211347579956055
    10. '((' → logprob: -8.586347579956055

Token 60: 'No' (ID: 3160)
  Prédit: 'No'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'No' → logprob: -0.7406163811683655
    2. '-' → logprob: -2.1156163215637207
    3. 'NO' → logprob: -2.1156163215637207
    4. '0' → logprob: -2.6156163215637207
    5. 'Fail' → logprob: -2.6156163215637207
    6. 'Impossible' → logprob: -3.7406163215637207
    7. 'fail' → logprob: -4.115616321563721
    8. '"' → logprob: -4.365616321563721
    9. 'NG' → logprob: -4.615616321563721
    10. 'no' → logprob: -4.990616321563721

Token 61: '');' (ID: 10477)
  Prédit: '')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '')' → logprob: -0.022638360038399696
    2. ')' → logprob: -4.647638320922852
    3. '\n' → logprob: -4.897638320922852
    4. '")' → logprob: -6.147638320922852
    5. '');' → logprob: -6.147638320922852
    6. ''' → logprob: -7.897638320922852
    7. 'pe' → logprob: -8.897638320922852
    8. '<|end|>' → logprob: -9.022638320922852
    9. '!' → logprob: -9.147638320922852
    10. '')
' → logprob: -10.147638320922852

Token 62: 'quit' (ID: 45414)
  Prédit: ' exit'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' exit' → logprob: -0.03496081754565239
    2. 'exit' → logprob: -3.4099607467651367
    3. 'import' → logprob: -7.784960746765137
    4. ' quit' → logprob: -7.784960746765137
    5. ' import' → logprob: -8.034960746765137
    6. '	exit' → logprob: -10.034960746765137
    7. 'quit' → logprob: -10.409960746765137
    8. ' 
' → logprob: -10.659960746765137
    9. '
' → logprob: -11.159960746765137
    10. ' return' → logprob: -11.284960746765137

Token 63: '()
' (ID: 1234)
  Prédit: '
'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '
' → logprob: -0.0011016374919563532
    2. '
' → logprob: -7.501101493835449
    3. ' 
' → logprob: -8.25110149383545
    4. '

' → logprob: -8.62610149383545
    5. '<|end|>' → logprob: -9.62610149383545
    6. '  
' → logprob: -11.12610149383545
    7. '\n' → logprob: -12.00110149383545
    8. '' → logprob: -12.00110149383545
    9. 'for' → logprob: -12.37610149383545
    10. ' for' → logprob: -12.50110149383545

Token 64: 'for' (ID: 1938)
  Prédit: 'last'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'last' → logprob: -1.2355068922042847
    2. 'current' → logprob: -1.6105068922042847
    3. 'time' → logprob: -1.8605068922042847
    4. 'prev' → logprob: -2.485507011413574
    5. 'for' → logprob: -2.735507011413574
    6. 'end' → logprob: -3.360507011413574
    7. 'available' → logprob: -3.860507011413574
    8. 'cur' → logprob: -3.860507011413574
    9. 'now' → logprob: -4.360507011413574
    10. 'start' → logprob: -4.360507011413574

Token 65: ' item' (ID: 2169)
  Prédit: ' i'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' i' → logprob: -0.2866838276386261
    2. 'i' → logprob: -1.9116837978363037
    3. ' a' → logprob: -3.2866837978363037
    4. 'a' → logprob: -3.5366837978363037
    5. ' x' → logprob: -4.536684036254883
    6. 'x' → logprob: -5.161684036254883
    7. ' task' → logprob: -6.724184036254883
    8. 'd' → logprob: -6.974184036254883
    9. ' interval' → logprob: -7.036684036254883
    10. 'l' → logprob: -7.411684036254883

Token 66: ' in' (ID: 306)
  Prédit: ' in'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' in' → logprob: -0.03375358134508133
    2. 'in' → logprob: -3.4087536334991455
    3. ' ' → logprob: -10.283753395080566
    4. ',' → logprob: -10.408753395080566
    5. 's' → logprob: -10.908753395080566
    6. '[' → logprob: -12.596253395080566
    7. '```' → logprob: -12.908753395080566
    8. '_in' → logprob: -13.283753395080566
    9. 'In' → logprob: -13.471253395080566
    10. '	in' → logprob: -13.721253395080566

Token 67: ' A' (ID: 355)
  Prédit: 'A'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'A' → logprob: -0.08895037323236465
    2. ' A' → logprob: -2.4639503955841064
    3. ' ' → logprob: -12.338950157165527
    4. '(A' → logprob: -13.338950157165527
    5. '	A' → logprob: -13.838950157165527
    6. 'range' → logprob: -13.963950157165527
    7. ' range' → logprob: -13.963950157165527
    8. '  ' → logprob: -14.588950157165527
    9. '   ' → logprob: -14.963950157165527
    10. '<|end|>' → logprob: -15.588950157165527

Token 68: ':
' (ID: 734)
  Prédit: ':'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ':' → logprob: -0.00283210352063179
    2. ':
' → logprob: -5.877831935882568
    3. '[' → logprob: -11.377832412719727
    4. ' :' → logprob: -11.752832412719727
    5. ',' → logprob: -13.127832412719727
    6. ':

' → logprob: -13.627832412719727
    7. '[:-' → logprob: -13.752832412719727
    8. '[:' → logprob: -14.252832412719727
    9. ' if' → logprob: -14.752832412719727
    10. ':**' → logprob: -14.877832412719727

Token 69: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.2822471857070923
    2. ' if' → logprob: -1.6572471857070923
    3. '<|end|>' → logprob: -3.4072470664978027
    4. ' score' → logprob: -4.032247066497803
    5. '<|end|>' → logprob: -7.032247066497803
    6. ' ' → logprob: -7.032247066497803
    7. '	score' → logprob: -7.157247066497803
    8. ',' → logprob: -7.907247066497803
    9. ' x' → logprob: -8.282247543334961
    10. '	if' → logprob: -8.657247543334961

Token 70: ' score' (ID: 8429)
  Prédit: 'if'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'if' → logprob: -0.777306318283081
    2. ' if' → logprob: -0.777306318283081
    3. 'score' (adapté à ' score') → logprob: -3.152306318283081
    4. ' score' → logprob: -4.40230655670166
    5. 'start' → logprob: -5.15230655670166
    6. '   ' → logprob: -5.52730655670166
    7. 't' → logprob: -5.65230655670166
    8. 's' → logprob: -6.27730655670166
    9. ' t' → logprob: -6.27730655670166
    10. ' start' → logprob: -6.40230655670166

Token 71: ' +=' (ID: 2757)
  Prédit: ' +='
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' +=' → logprob: -0.11743979156017303
    2. '+=' → logprob: -2.2424397468566895
    3. '+' → logprob: -6.6174397468566895
    4. ' =' → logprob: -6.9924397468566895
    5. ' +' → logprob: -7.4924397468566895
    6. '=' → logprob: -7.6174397468566895
    7. ' <=' → logprob: -8.242440223693848
    8. ' >=' → logprob: -8.367440223693848
    9. '>=' → logprob: -8.867440223693848
    10. ' -=' → logprob: -8.867440223693848

Token 72: ' item' (ID: 2169)
  Prédit: 'item'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'item' → logprob: -0.0004960790392942727
    2. ' item' → logprob: -7.625495910644531
    3. '1' → logprob: -12.000495910644531
    4. 'int' → logprob: -14.750495910644531
    5. 'score' → logprob: -14.875495910644531
    6. '	item' → logprob: -15.125495910644531
    7. ' ' → logprob: -15.375495910644531
    8. '(item' → logprob: -15.500495910644531
    9. '=item' → logprob: -16.12549591064453
    10. '   ' → logprob: -16.62549591064453

Token 73: '[' (ID: 58)
  Prédit: '['
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '[' → logprob: -1.259079363080673e-05
    2. '[-' → logprob: -12.500012397766113
    3. ' [' → logprob: -12.500012397766113
    4. '[
' → logprob: -13.875012397766113
    5. '0' → logprob: -14.125012397766113
    6. ''[' → logprob: -14.250012397766113
    7. '\[' → logprob: -14.500012397766113
    8. '```' → logprob: -14.875012397766113
    9. '][' → logprob: -15.312512397766113
    10. '`' → logprob: -15.500012397766113

Token 74: '0' (ID: 15)
  Prédit: '0'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '0' → logprob: -0.003040578216314316
    2. '1' → logprob: -6.128040790557861
    3. ' ' → logprob: -7.503040790557861
    4. '2' → logprob: -8.128040313720703
    5. '   ' → logprob: -13.503040313720703
    6. '3' → logprob: -13.690540313720703
    7. ']' → logprob: -13.753040313720703
    8. '[' → logprob: -14.503040313720703
    9. ')' → logprob: -14.878040313720703
    10. '  ' → logprob: -14.940540313720703

Token 75: ']
' (ID: 1592)
  Prédit: ')
'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ')
' → logprob: -0.6696574687957764
    2. ')' → logprob: -0.7946574687957764
    3. '<|end|>' → logprob: -4.4196577072143555
    4. '
' → logprob: -4.5446577072143555
    5. '>' → logprob: -5.5446577072143555
    6. ' )
' → logprob: -5.6696577072143555
    7. ')

' → logprob: -6.7946577072143555
    8. ' <=' → logprob: -7.1696577072143555
    9. ' )' → logprob: -7.2946577072143555
    10. '   ' → logprob: -7.5446577072143555

Token 76: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.42059874534606934
    2. ' if' → logprob: -1.2955987453460693
    3. '<|end|>' → logprob: -3.6705987453460693
    4. ' ' → logprob: -3.9205987453460693
    5. '
' → logprob: -5.670598983764648
    6. '>' → logprob: -5.795598983764648
    7. 'if' → logprob: -5.795598983764648
    8. ' 
' → logprob: -5.920598983764648
    9. '  ' → logprob: -6.045598983764648
    10. '    ' → logprob: -6.170598983764648

Token 77: ' if' (ID: 538)
  Prédit: 'if'
  Correct (stricte): False
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'if' (adapté à ' if') → logprob: -0.1696634143590927
    2. ' if' → logprob: -1.919663429260254
    3. '   ' → logprob: -4.669663429260254
    4. ' ' → logprob: -11.419663429260254
    5. 'If' → logprob: -12.794663429260254
    6. '  ' → logprob: -12.919663429260254
    7. '	if' → logprob: -14.294663429260254
    8. '```' → logprob: -14.419663429260254
    9. 'score' → logprob: -14.544663429260254
    10. '    ' → logprob: -15.294663429260254

Token 78: ' not' (ID: 625)
  Prédit: ' score'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' score' → logprob: -0.5761139988899231
    2. 'score' → logprob: -0.8261139988899231
    3. '	score' → logprob: -9.5761137008667
    4. '(score' → logprob: -10.3261137008667
    5. ' ' → logprob: -10.5761137008667
    6. '   ' → logprob: -10.9511137008667
    7. ' item' → logprob: -11.3261137008667
    8. 'item' → logprob: -11.9511137008667
    9. '  ' → logprob: -12.2011137008667
    10. ' ' → logprob: -13.8886137008667

Token 79: ' score' (ID: 8429)
  Prédit: ' score'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' score' → logprob: -0.04195917397737503
    2. '(score' → logprob: -3.541959285736084
    3. 'score' → logprob: -4.791959285736084
    4. ' (' → logprob: -5.791959285736084
    5. '(' → logprob: -7.666959285736084
    6. ' ' → logprob: -9.041958808898926
    7. ' item' → logprob: -9.166958808898926
    8. '	score' → logprob: -9.791958808898926
    9. '  ' → logprob: -11.291958808898926
    10. '0' → logprob: -11.791958808898926

Token 80: ' <=' (ID: 5017)
  Prédit: '<='
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '<=' → logprob: -0.14761210978031158
    2. ' <=' → logprob: -2.6476120948791504
    3. '>=' → logprob: -3.0226120948791504
    4. '<' → logprob: -4.52261209487915
    5. ' >=' → logprob: -5.39761209487915
    6. '>' → logprob: -6.52261209487915
    7. ' <' → logprob: -7.27261209487915
    8. ' >' → logprob: -8.772612571716309
    9. ' ' → logprob: -11.272612571716309
    10. '<int' → logprob: -12.147612571716309

Token 81: ' item' (ID: 2169)
  Prédit: 'item'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'item' → logprob: -0.01105300523340702
    2. ' item' → logprob: -4.511053085327148
    3. '	item' → logprob: -13.386053085327148
    4. '(item' → logprob: -13.886053085327148
    5. '=item' → logprob: -14.386053085327148
    6. ' ' → logprob: -14.511053085327148
    7. '  ' → logprob: -14.761053085327148
    8. '   ' → logprob: -14.761053085327148
    9. '[item' → logprob: -15.761053085327148
    10. 'score' → logprob: -15.761053085327148

Token 82: '[' (ID: 58)
  Prédit: '['
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '[' → logprob: -6.511406809295295e-06
    2. '1' → logprob: -12.500006675720215
    3. ' [' → logprob: -13.625006675720215
    4. '```' → logprob: -14.500006675720215
    5. '][' → logprob: -15.000006675720215
    6. '[
' → logprob: -15.375006675720215
    7. '   ' → logprob: -15.750006675720215
    8. ')[' → logprob: -16.8750057220459
    9. '[-' → logprob: -17.3750057220459
    10. '2' → logprob: -17.5000057220459

Token 83: '1' (ID: 16)
  Prédit: '1'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '1' → logprob: -6.945094355614856e-05
    2. ' ' → logprob: -9.875069618225098
    3. '[' → logprob: -11.625069618225098
    4. '2' → logprob: -12.125069618225098
    5. '0' → logprob: -13.750069618225098
    6. ']' → logprob: -14.125069618225098
    7. '   ' → logprob: -14.937569618225098
    8. '  ' → logprob: -15.312569618225098
    9. ')' → logprob: -15.875069618225098
    10. '```' → logprob: -15.875069618225098

Token 84: ']:' (ID: 12433)
  Prédit: '):'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '):' → logprob: -0.011479243636131287
    2. ':' → logprob: -4.636479377746582
    3. ')' → logprob: -6.386479377746582
    4. '):
' → logprob: -10.511479377746582
    5. ' ):' → logprob: -12.011479377746582
    6. ':
' → logprob: -13.511479377746582
    7. '   ' → logprob: -14.386479377746582
    8. ']:' → logprob: -14.636479377746582
    9. '():' → logprob: -14.886479377746582
    10. ':return' → logprob: -15.011479377746582

Token 85: 'oh' (ID: 2308)
  Prédit: ' oh'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' oh' → logprob: -0.6437132358551025
    2. 'oh' → logprob: -0.7687132358551025
    3. '    
' → logprob: -5.393712997436523
    4. '   ' → logprob: -6.143712997436523
    5. ' 
' → logprob: -6.393712997436523
    6. '    ' → logprob: -7.643712997436523
    7. ' pass' → logprob: -7.893712997436523
    8. '        
' → logprob: -8.018712997436523
    9. '       ' → logprob: -8.268712997436523
    10. ' continue' → logprob: -8.268712997436523

Token 86: 'no' (ID: 1750)
  Prédit: 'no'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'no' → logprob: -0.0017926320433616638
    2. 'n' → logprob: -6.3767924308776855
    3. 'o' → logprob: -9.751792907714844
    4. ' no' → logprob: -10.751792907714844
    5. '_no' → logprob: -12.876792907714844
    6. ' ' → logprob: -13.376792907714844
    7. '	no' → logprob: -13.876792907714844
    8. ' n' → logprob: -14.376792907714844
    9. 'now' → logprob: -14.626792907714844
    10. 'not' → logprob: -14.814292907714844

Token 87: '()
' (ID: 1234)
  Prédit: '()'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '()' → logprob: -0.00011474833445390686
    2. '`()' → logprob: -9.875114440917969
    3. '(' → logprob: -10.750114440917969
    4. '()`' → logprob: -10.875114440917969
    5. ']()' → logprob: -11.625114440917969
    6. '()
' → logprob: -12.250114440917969
    7. '()]' → logprob: -13.500114440917969
    8. ' ()' → logprob: -13.625114440917969
    9. '()(' → logprob: -13.750114440917969
    10. '|()
' → logprob: -13.750114440917969

Token 88: 'else' (ID: 2807)
  Prédit: 'print'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'print' → logprob: -0.0006454797694459558
    2. '<|end|>' → logprob: -8.250645637512207
    3. 'Yes' → logprob: -9.125645637512207
    4. 'No' → logprob: -9.625645637512207
    5. '```' → logprob: -10.000645637512207
    6. ' print' → logprob: -10.000645637512207
    7. 'else' → logprob: -10.500645637512207
    8. ')' → logprob: -11.000645637512207
    9. '  
' → logprob: -11.375645637512207
    10. '
' → logprob: -11.500645637512207

Token 89: ':' (ID: 25)
  Prédit: ':'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ':' → logprob: -0.018192904070019722
    2. ':
' → logprob: -4.018192768096924
    3. 'print' → logprob: -11.143193244934082
    4. ' print' → logprob: -11.393193244934082
    5. '   ' → logprob: -11.768193244934082
    6. ':

' → logprob: -12.643193244934082
    7. ':return' → logprob: -12.643193244934082
    8. ' :' → logprob: -13.768193244934082
    9. ':
' → logprob: -14.393193244934082
    10. ' :
' → logprob: -15.518193244934082

Token 90: 'print' (ID: 1598)
  Prédit: 'print'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'print' → logprob: -0.20168611407279968
    2. ' print' → logprob: -1.701686143875122
    3. '   ' → logprob: -8.576685905456543
    4. '	print' → logprob: -10.076685905456543
    5. '```' → logprob: -10.326685905456543
    6. '    
' → logprob: -12.951685905456543
    7. ' 
' → logprob: -13.451685905456543
    8. '``' → logprob: -13.451685905456543
    9. ' ' → logprob: -13.826685905456543
    10. '
' → logprob: -13.951685905456543

Token 91: '('' (ID: 706)
  Prédit: '(''
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '('' → logprob: -0.03171710669994354
    2. '(' → logprob: -3.53171706199646
    3. '("' → logprob: -6.406717300415039
    4. '(score' → logprob: -8.406717300415039
    5. '(True' → logprob: -10.031717300415039
    6. '()' → logprob: -10.531717300415039
    7. ''s' → logprob: -12.031717300415039
    8. ''' → logprob: -12.406717300415039
    9. ' ('' → logprob: -12.531717300415039
    10. 'score' → logprob: -13.281717300415039

Token 92: 'Yes' (ID: 13022)
  Prédit: 'Yes'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'Yes' → logprob: -7.703443770878948e-06
    2. ''' → logprob: -13.125007629394531
    3. 'YES' → logprob: -13.250007629394531
    4. 'Ok' → logprob: -14.000007629394531
    5. 'Ye' → logprob: -14.250007629394531
    6. ' Yes' → logprob: -14.250007629394531
    7. 'Good' → logprob: -14.500007629394531
    8. 'yes' → logprob: -14.625007629394531
    9. 'OK' → logprob: -15.750007629394531
    10. 'Yeah' → logprob: -16.25000762939453

Token 93: '')' (ID: 1542)
  Prédit: '')'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '')' → logprob: -0.00408647395670414
    2. ')' → logprob: -5.504086494445801
    3. '")' → logprob: -12.0040864944458
    4. '')
' → logprob: -13.6290864944458
    5. '()' → logprob: -14.5040864944458
    6. '`)' → logprob: -16.004085540771484
    7. '('' → logprob: -17.254085540771484
    8. '!' → logprob: -17.379085540771484
    9. '())' → logprob: -17.504085540771484
    10. ''' → logprob: -18.379085540771484


RÉSUMÉ:
--------------------------------------------------------------------------------
Total des tokens analysés: 91
Tokens correctement prédits (1ère position, stricte): 37
Tokens correctement prédits (1ère position, avec adaptation): 38
Tokens correctement prédits (top 10): 67
Précision stricte (1ère position): 40.66%
Précision adaptée (1ère position): 41.76%
Précision (top 10): 73.63%
================================================================================
