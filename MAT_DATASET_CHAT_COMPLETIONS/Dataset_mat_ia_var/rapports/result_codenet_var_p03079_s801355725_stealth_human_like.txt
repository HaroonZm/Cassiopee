================================================================================
ANALYSE DE PRÉDICTION TOKEN PAR TOKEN (BATCH API)
Date: 2025-06-04 20:03:59
Modèle de tokenisation: gpt-4o-mini
================================================================================

SCRIPT ANALYSÉ:
--------------------------------------------------------------------------------
# Bon alors, on va commencer ici
liste = []  # Je crois qu'il faut une liste pour stocker les entrées
liste = list(map(int, input().split()))  # On prend l'input, ok

# Je récupère les valeurs
x = liste[0]
y = liste[1]
z = liste[2]

# Je me demande si c'est vraiment utile, mais allons-y
if x == y and y == z:
    print("Yes")
else:
    print('No')  # On mettra No si jamais c'est différent
--------------------------------------------------------------------------------

RÉSULTATS D'ANALYSE TOKEN PAR TOKEN:
--------------------------------------------------------------------------------
Token 0: '#' (ID: 2)
  → Token d'amorce (pas de prédiction)

Token 1: ' Bon' (ID: 12658)
  → Token d'amorce (pas de prédiction)

Token 2: ' alors' (ID: 17971)
  → Token d'amorce (pas de prédiction)

Token 3: ',' (ID: 11)
  Prédit: ','
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ',' → logprob: -0.24023863673210144
    2. ' ' → logprob: -2.240238666534424
    3. '```' → logprob: -3.115238666534424
    4. ' ,' → logprob: -4.490238666534424
    5. '#' → logprob: -4.490238666534424
    6. '\n' → logprob: -4.740238666534424
    7. '!' → logprob: -4.990238666534424
    8. ':' → logprob: -5.240238666534424
    9. '
' → logprob: -5.615238666534424
    10. '<|end|>' → logprob: -6.240238666534424

Token 4: ' on' (ID: 402)
  Prédit: ' je'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' je' → logprob: -0.32924628257751465
    2. ' on' → logprob: -2.4542462825775146
    3. 'c' → logprob: -2.8292462825775146
    4. 'je' → logprob: -3.7042462825775146
    5. ' c' → logprob: -3.9542462825775146
    6. 'on' → logprob: -4.329246520996094
    7. ' que' → logprob: -4.579246520996094
    8. ' ' → logprob: -4.579246520996094
    9. ' continu' → logprob: -4.954246520996094
    10. ' voici' → logprob: -5.079246520996094

Token 5: ' va' (ID: 3423)
  Prédit: 'n'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'n' → logprob: -0.5866568088531494
    2. ' ' → logprob: -2.0866568088531494
    3. ' continue' → logprob: -3.2116568088531494
    4. '_' → logprob: -3.5866568088531494
    5. ' va' → logprob: -3.5866568088531494
    6. 'ne' → logprob: -3.7116568088531494
    7. 'continue' → logprob: -3.7116568088531494
    8. 's' → logprob: -3.8366568088531494
    9. 'v' → logprob: -4.08665657043457
    10. 'pe' → logprob: -4.21165657043457

Token 6: ' commencer' (ID: 66055)
  Prédit: 'faire'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'faire' → logprob: -0.7532650828361511
    2. 'contin' → logprob: -2.128265142440796
    3. 'voir' → logprob: -2.253265142440796
    4. 'comm' → logprob: -3.378265142440796
    5. ' essayer' → logprob: -3.503265142440796
    6. 'mettre' → logprob: -3.753265142440796
    7. ' commencer' → logprob: -3.753265142440796
    8. ' continuer' → logprob: -3.878265142440796
    9. ' faire' → logprob: -4.003264904022217
    10. 'ess' → logprob: -4.003264904022217

Token 7: ' ici' (ID: 27994)
  Prédit: '\n'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '\n' → logprob: -1.1132041215896606
    2. '#' → logprob: -1.2382041215896606
    3. ':' → logprob: -1.4882041215896606
    4. '\' → logprob: -3.113204002380371
    5. '```' → logprob: -3.238204002380371
    6. '`' → logprob: -3.613204002380371
    7. '!' → logprob: -3.988204002380371
    8. '.' → logprob: -4.863204002380371
    9. '
' → logprob: -5.988204002380371
    10. '?' → logprob: -6.113204002380371

Token 8: '
' (ID: 198)
  Prédit: ':'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ':' → logprob: -0.8559844493865967
    2. '#' → logprob: -1.3559844493865967
    3. '\n' → logprob: -1.8559844493865967
    4. '.' → logprob: -2.9809844493865967
    5. '```' → logprob: -3.2309844493865967
    6. '\' → logprob: -3.3559844493865967
    7. '!' → logprob: -5.105984687805176
    8. ',' → logprob: -5.105984687805176
    9. ':
' → logprob: -5.855984687805176
    10. '
' → logprob: -5.855984687805176

Token 9: 'liste' (ID: 69656)
  Prédit: ':'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ':' → logprob: -1.044092059135437
    2. '#' → logprob: -1.294092059135437
    3. '\n' → logprob: -1.794092059135437
    4. '\' → logprob: -2.1690921783447266
    5. '.' → logprob: -3.5440921783447266
    6. '```' → logprob: -3.7940921783447266
    7. '!' → logprob: -4.169092178344727
    8. '`' → logprob: -4.919092178344727
    9. 'print' → logprob: -5.794092178344727
    10. ',' → logprob: -6.294092178344727

Token 10: ' =' (ID: 314)
  Prédit: '.'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '.' → logprob: -0.44248270988464355
    2. '[' → logprob: -1.0674827098846436
    3. '_' → logprob: -4.817482948303223
    4. '(' → logprob: -6.192482948303223
    5. ' =' → logprob: -6.817482948303223
    6. '=' → logprob: -6.942482948303223
    7. 's' → logprob: -7.942482948303223
    8. ' ' → logprob: -7.942482948303223
    9. ')' → logprob: -8.317482948303223
    10. '['' → logprob: -8.567482948303223

Token 11: ' []' (ID: 6126)
  Prédit: ' []'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' []' → logprob: -0.11470223218202591
    2. ' [' → logprob: -2.4897022247314453
    3. '[]' → logprob: -3.8647022247314453
    4. '[' → logprob: -5.489702224731445
    5. ' ' → logprob: -8.739702224731445
    6. ' [
' → logprob: -9.864702224731445
    7. ' ["' → logprob: -9.989702224731445
    8. ' ['' → logprob: -10.364702224731445
    9. '["' → logprob: -11.239702224731445
    10. ' [

' → logprob: -11.739702224731445

Token 12: ' ' (ID: 220)
  Prédit: '.'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '.' → logprob: -0.04296916350722313
    2. '.append' → logprob: -3.542969226837158
    3. '[' → logprob: -4.667969226837158
    4. 'a' → logprob: -7.417969226837158
    5. '
' → logprob: -7.417969226837158
    6. '\' → logprob: -7.792969226837158
    7. '#' → logprob: -8.04296875
    8. '.
' → logprob: -8.04296875
    9. '[
' → logprob: -8.41796875
    10. '.insert' → logprob: -8.91796875

Token 13: ' #' (ID: 1069)
  Prédit: '.'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '.' → logprob: -0.058145441114902496
    2. '.append' → logprob: -3.433145523071289
    3. 'for' → logprob: -4.933145523071289
    4. '[' → logprob: -5.058145523071289
    5. '\' → logprob: -6.058145523071289
    6. '=' → logprob: -6.433145523071289
    7. '.for' → logprob: -6.683145523071289
    8. '#' → logprob: -6.933145523071289
    9. '[:]' → logprob: -7.058145523071289
    10. '(' → logprob: -7.808145523071289

Token 14: ' Je' (ID: 4678)
  Prédit: ' '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' ' → logprob: -0.05142247676849365
    2. ''' → logprob: -3.551422595977783
    3. '"' → logprob: -4.801422595977783
    4. ' "' → logprob: -5.551422595977783
    5. ' []' → logprob: -6.176422595977783
    6. ' '' → logprob: -6.426422595977783
    7. '#' → logprob: -7.051422595977783
    8. '[' → logprob: -7.051422595977783
    9. ' espace' → logprob: -7.926422595977783
    10. '[]' → logprob: -7.926422595977783

Token 15: ' crois' (ID: 65485)
  Prédit: ' vais'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' vais' → logprob: -0.7632533311843872
    2. ' ' → logprob: -1.0132533311843872
    3. ' veux' → logprob: -2.2632532119750977
    4. ' m' → logprob: -4.513253211975098
    5. 's' → logprob: -4.763253211975098
    6. ' pense' → logprob: -5.138253211975098
    7. ' n' → logprob: -5.388253211975098
    8. ' souhaite' → logprob: -5.388253211975098
    9. ' rempl' → logprob: -5.638253211975098
    10. 'n' → logprob: -5.888253211975098

Token 16: ' qu' (ID: 474)
  Prédit: '.'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '.' → logprob: -0.8258494734764099
    2. '(' → logprob: -0.9508494734764099
    3. '(
' → logprob: -2.8258495330810547
    4. '.append' → logprob: -3.3258495330810547
    5. '[' → logprob: -3.9508495330810547
    6. ' =' → logprob: -4.700849533081055
    7. ',' → logprob: -4.700849533081055
    8. 's' → logprob: -5.075849533081055
    9. ')' → logprob: -5.200849533081055
    10. '\' → logprob: -5.325849533081055

Token 17: ''il' (ID: 14683)
  Prédit: 'e'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'e' → logprob: -0.37277093529701233
    2. ''' → logprob: -1.49777090549469
    3. ''il' → logprob: -2.7477710247039795
    4. ''on' → logprob: -3.9977710247039795
    5. 'a' → logprob: -6.9977707862854
    6. 'il' → logprob: -7.7477707862854
    7. ''à' → logprob: -7.7477707862854
    8. 'que' → logprob: -7.8727707862854
    9. 'on' → logprob: -7.8727707862854
    10. ' ' → logprob: -7.9977707862854

Token 18: ' faut' (ID: 17821)
  Prédit: ' faut'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' faut' → logprob: -0.36643388867378235
    2. 'f' → logprob: -1.86643385887146
    3. ' manque' → logprob: -2.24143385887146
    4. ' faudrait' → logprob: -4.491434097290039
    5. ' n' → logprob: -4.616434097290039
    6. 's' → logprob: -5.366434097290039
    7. ' f' → logprob: -5.866434097290039
    8. ' faudra' → logprob: -5.866434097290039
    9. 'n' → logprob: -5.991434097290039
    10. ' vaut' → logprob: -6.116434097290039

Token 19: ' une' (ID: 2463)
  Prédit: 'aj'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'aj' → logprob: -0.5338484048843384
    2. ' ajouter' → logprob: -1.0338484048843384
    3. 'append' → logprob: -4.033848285675049
    4. 'faire' → logprob: -4.783848285675049
    5. 'mettre' → logprob: -4.908848285675049
    6. ' append' → logprob: -5.783848285675049
    7. ' raj' → logprob: -6.158848285675049
    8. ' y' → logprob: -6.283848285675049
    9. ' faire' → logprob: -6.408848285675049
    10. 'import' → logprob: -6.658848285675049

Token 20: ' liste' (ID: 31719)
  Prédit: ' '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' ' → logprob: -0.1303538829088211
    2. 'space' → logprob: -3.2553539276123047
    3. '_' → logprob: -4.255353927612305
    4. '[' → logprob: -5.130353927612305
    5. ',' → logprob: -5.130353927612305
    6. 's' → logprob: -5.255353927612305
    7. '.' → logprob: -5.505353927612305
    8. '#' → logprob: -5.880353927612305
    9. ' espace' → logprob: -5.880353927612305
    10. 'entrée' → logprob: -5.880353927612305

Token 21: ' pour' (ID: 1930)
  Prédit: '.'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '.' → logprob: -0.003460252657532692
    2. '[' → logprob: -7.00346040725708
    3. ',' → logprob: -7.50346040725708
    4. '#' → logprob: -8.253459930419922
    5. '.l' → logprob: -8.253459930419922
    6. '_' → logprob: -8.378459930419922
    7. 'for' → logprob: -8.378459930419922
    8. '.append' → logprob: -8.378459930419922
    9. 'l' → logprob: -8.878459930419922
    10. ' ' → logprob: -9.378459930419922

Token 22: ' stock' (ID: 6546)
  Prédit: ' stock'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' stock' → logprob: -0.4916272759437561
    2. 'stock' → logprob: -2.1166272163391113
    3. 'aj' → logprob: -2.2416272163391113
    4. 'st' → logprob: -2.3666272163391113
    5. 'contin' → logprob: -3.7416272163391113
    6. 'mettre' → logprob: -4.991627216339111
    7. 's' → logprob: -5.116627216339111
    8. 'comm' → logprob: -5.491627216339111
    9. ' ajouter' → logprob: -5.491627216339111
    10. 'r' → logprob: -5.866627216339111

Token 23: 'er' (ID: 259)
  Prédit: 'er'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'er' → logprob: -0.0004752367385663092
    2. 'e' → logprob: -7.7504754066467285
    3. '#' → logprob: -10.62547492980957
    4. 'é' → logprob: -11.50047492980957
    5. '```' → logprob: -13.37547492980957
    6. '-' → logprob: -14.12547492980957
    7. '_' → logprob: -14.37547492980957
    8. '[' → logprob: -14.37547492980957
    9. '   ' → logprob: -14.75047492980957
    10. 'r' → logprob: -14.75047492980957

Token 24: ' les' (ID: 1341)
  Prédit: ' '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' ' → logprob: -0.8011727333068848
    2. '_' → logprob: -1.3011727333068848
    3. '.' → logprob: -1.6761727333068848
    4. ',' → logprob: -3.5511727333068848
    5. 's' → logprob: -4.176172733306885
    6. '[' → logprob: -4.301172733306885
    7. 'for' → logprob: -5.426172733306885
    8. '<|end|>' → logprob: -5.426172733306885
    9. 'n' → logprob: -6.176172733306885
    10. 'a' → logprob: -6.176172733306885

Token 25: ' entr' (ID: 7072)
  Prédit: ' nombres'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' nombres' → logprob: -0.9871675968170166
    2. 'élé' → logprob: -1.2371675968170166
    3. 'val' → logprob: -2.4871675968170166
    4. ' éléments' → logprob: -2.7371675968170166
    5. ' valeurs' → logprob: -2.9871675968170166
    6. 'n' → logprob: -3.2371675968170166
    7. ' notes' → logprob: -3.9871675968170166
    8. 'nombre' → logprob: -4.7371673583984375
    9. 'é' → logprob: -4.7371673583984375
    10. 'ent' → logprob: -4.8621673583984375

Token 26: 'ées' (ID: 5161)
  Prédit: 'ées'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'ées' → logprob: -0.0861409455537796
    2. 'ée' → logprob: -2.5861408710479736
    3. 'é' → logprob: -4.961141109466553
    4. 'és' → logprob: -8.586140632629395
    5. 'e' → logprob: -11.711140632629395
    6. 'ees' → logprob: -11.711140632629395
    7. 'ies' → logprob: -11.836140632629395
    8. 'es' → logprob: -12.711140632629395
    9. 'ê' → logprob: -13.461140632629395
    10. 'ee' → logprob: -13.586140632629395

Token 27: '
' (ID: 198)
  Prédit: '
'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '
' → logprob: -0.5069239139556885
    2. 'for' → logprob: -1.0069239139556885
    3. ' for' → logprob: -4.881923675537109
    4. '\n' → logprob: -5.006923675537109
    5. ' ' → logprob: -5.631923675537109
    6. ',' → logprob: -6.381923675537109
    7. 'while' → logprob: -6.381923675537109
    8. ':' → logprob: -6.506923675537109
    9. '\' → logprob: -6.506923675537109
    10. ' 
' → logprob: -6.631923675537109

Token 28: 'liste' (ID: 69656)
  Prédit: 'for'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'for' → logprob: -0.02413015626370907
    2. 'n' → logprob: -4.274130344390869
    3. 'i' → logprob: -5.649130344390869
    4. 'while' → logprob: -6.649130344390869
    5. ':' → logprob: -6.774130344390869
    6. ',' → logprob: -7.274130344390869
    7. ' for' → logprob: -7.274130344390869
    8. '
' → logprob: -7.649130344390869
    9. '#' → logprob: -7.774130344390869
    10. 'a' → logprob: -8.024129867553711

Token 29: ' =' (ID: 314)
  Prédit: '.'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '.' → logprob: -0.6339673399925232
    2. '.append' → logprob: -0.7589673399925232
    3. '.insert' → logprob: -8.008967399597168
    4. '[' → logprob: -8.258967399597168
    5. ' =' → logprob: -8.883967399597168
    6. '[:]' → logprob: -8.883967399597168
    7. '.add' → logprob: -9.508967399597168
    8. 'append' → logprob: -10.008967399597168
    9. '.extend' → logprob: -10.008967399597168
    10. ' .' → logprob: -10.258967399597168

Token 30: ' list' (ID: 1562)
  Prédit: ' []'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' []' → logprob: -0.04313746467232704
    2. ' [' → logprob: -3.668137550354004
    3. ' input' → logprob: -4.918137550354004
    4. '[]' → logprob: -5.168137550354004
    5. 'input' → logprob: -6.918137550354004
    6. ' ' → logprob: -7.168137550354004
    7. ' ["' → logprob: -7.668137550354004
    8. ' list' → logprob: -7.793137550354004
    9. '[' → logprob: -8.543137550354004
    10. ' ['' → logprob: -8.918137550354004

Token 31: '(map' (ID: 16946)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '(' → logprob: -0.1161775141954422
    2. '()' → logprob: -2.241177558898926
    3. '(input' → logprob: -6.616177558898926
    4. '.append' → logprob: -7.241177558898926
    5. '.' → logprob: -8.241177558898926
    6. '(
' → logprob: -8.866177558898926
    7. '('' → logprob: -9.116177558898926
    8. '(range' → logprob: -9.116177558898926
    9. '([]' → logprob: -9.491177558898926
    10. '[' → logprob: -9.616177558898926

Token 32: '(int' (ID: 2742)
  Prédit: '(int'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(int' → logprob: -0.12399410456418991
    2. '(' → logprob: -2.7489941120147705
    3. '(str' → logprob: -3.4989941120147705
    4. '(input' → logprob: -3.8739941120147705
    5. '(lambda' → logprob: -6.623993873596191
    6. '(float' → logprob: -8.998993873596191
    7. '(
' → logprob: -9.873993873596191
    8. '(eval' → logprob: -9.998993873596191
    9. 'int' → logprob: -10.498993873596191
    10. ')' → logprob: -11.998993873596191

Token 33: ',' (ID: 11)
  Prédit: '(input'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(input' → logprob: -0.036532048135995865
    2. '(' → logprob: -3.911532163619995
    3. ',input' → logprob: -4.786531925201416
    4. ',' → logprob: -5.286531925201416
    5. 'input' → logprob: -6.411531925201416
    6. '))' → logprob: -8.036532402038574
    7. ')' → logprob: -8.536532402038574
    8. ' (' → logprob: -10.036532402038574
    9. '<|end|>' → logprob: -10.036532402038574
    10. ' ,' → logprob: -10.411532402038574

Token 34: ' input' (ID: 3422)
  Prédit: 'input'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'input' → logprob: -0.14307516813278198
    2. ' input' → logprob: -2.0180752277374268
    3. '(input' → logprob: -8.268074989318848
    4. ',input' → logprob: -9.893074989318848
    5. '=input' → logprob: -10.643074989318848
    6. ' ' → logprob: -10.643074989318848
    7. '	input' → logprob: -11.268074989318848
    8. '<input' → logprob: -11.768074989318848
    9. '[input' → logprob: -12.268074989318848
    10. ')' → logprob: -12.643074989318848

Token 35: '().' (ID: 1454)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '(' → logprob: -0.5156622529029846
    2. '()))' → logprob: -1.5156621932983398
    3. '(()' → logprob: -2.14066219329834
    4. '())' → logprob: -3.89066219329834
    5. '()' → logprob: -4.51566219329834
    6. '()));' → logprob: -4.76566219329834
    7. '(""))' → logprob: -5.01566219329834
    8. '('' → logprob: -5.26566219329834
    9. '("("' → logprob: -5.39066219329834
    10. '())))' → logprob: -6.01566219329834

Token 36: 'split' (ID: 13627)
  Prédit: 'split'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'split' → logprob: -0.0012188091641291976
    2. 'strip' → logprob: -6.751218795776367
    3. 'rstrip' → logprob: -10.126218795776367
    4. ' split' → logprob: -11.876218795776367
    5. 'spl' → logprob: -14.001218795776367
    6. '(split' → logprob: -14.876218795776367
    7. 'replace' → logprob: -15.876218795776367
    8. 's' → logprob: -16.126218795776367
    9. ')' → logprob: -16.501218795776367
    10. 'read' → logprob: -16.876218795776367

Token 37: '()))' (ID: 16829)
  Prédit: '())'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '())' → logprob: -0.6988927721977234
    2. '()))' → logprob: -1.3238928318023682
    3. '())))' → logprob: -1.8238928318023682
    4. '()' → logprob: -2.948892831802368
    5. '(' → logprob: -3.948892831802368
    6. '('' → logprob: -6.198892593383789
    7. ')))' → logprob: -7.323892593383789
    8. ')' → logprob: -8.198892593383789
    9. '())))
' → logprob: -8.448892593383789
    10. '()));' → logprob: -9.073892593383789

Token 38: ' ' (ID: 220)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ')' → logprob: -0.45708024501800537
    2. '(' → logprob: -1.5820802450180054
    3. '()' → logprob: -2.457080364227295
    4. '.' → logprob: -3.457080364227295
    5. '<|end|>' → logprob: -3.957080364227295
    6. '\' → logprob: -4.832080364227295
    7. '#' → logprob: -5.707080364227295
    8. '(
' → logprob: -5.832080364227295
    9. '[' → logprob: -5.832080364227295
    10. '\n' → logprob: -6.832080364227295

Token 39: ' #' (ID: 1069)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '(' → logprob: -0.7423774003982544
    2. ')' → logprob: -0.7423774003982544
    3. '()' → logprob: -3.492377281188965
    4. '.' → logprob: -4.492377281188965
    5. '[' → logprob: -6.242377281188965
    6. '#' → logprob: -7.117377281188965
    7. '(
' → logprob: -7.367377281188965
    8. '\' → logprob: -7.617377281188965
    9. '()
' → logprob: -7.742377281188965
    10. ' ' → logprob: -8.367377281188965

Token 40: ' On' (ID: 2160)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ')' → logprob: -0.011744953691959381
    2. '(' → logprob: -5.761744976043701
    3. '()' → logprob: -5.886744976043701
    4. ' )' → logprob: -6.011744976043701
    5. ' ' → logprob: -6.886744976043701
    6. '.' → logprob: -7.761744976043701
    7. '<|end|>' → logprob: -7.886744976043701
    8. '[' → logprob: -8.386744499206543
    9. '.split' → logprob: -8.386744499206543
    10. '())' → logprob: -9.136744499206543

Token 41: ' prend' (ID: 37463)
  Prédit: '.'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '.' → logprob: -0.29458221793174744
    2. ' .' → logprob: -2.1695821285247803
    3. ' ' → logprob: -2.2945821285247803
    4. '.append' → logprob: -4.544582366943359
    5. '.push' → logprob: -5.919582366943359
    6. '.setdefault' → logprob: -6.294582366943359
    7. '[' → logprob: -6.419582366943359
    8. '.ent' → logprob: -6.544582366943359
    9. '.add' → logprob: -6.669582366943359
    10. ' continue' → logprob: -6.669582366943359

Token 42: ' l' (ID: 305)
  Prédit: '()'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '()' → logprob: -0.026079071685671806
    2. '(' → logprob: -4.776079177856445
    3. ' ' → logprob: -5.401079177856445
    4. '<|end|>' → logprob: -5.526079177856445
    5. ' ()' → logprob: -6.401079177856445
    6. 'user' → logprob: -7.026079177856445
    7. ')' → logprob: -7.401079177856445
    8. ' )' → logprob: -7.526079177856445
    9. 's' → logprob: -7.526079177856445
    10. ' les' → logprob: -7.776079177856445

Token 43: ''' (ID: 6)
  Prédit: 'es'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'es' → logprob: -0.11238047480583191
    2. 'e' → logprob: -2.9873805046081543
    3. 's' → logprob: -4.112380504608154
    4. 'a' → logprob: -4.112380504608154
    5. ''entrée' → logprob: -5.237380504608154
    6. 'ent' → logprob: -5.487380504608154
    7. ''utilisateur' → logprob: -5.737380504608154
    8. ''ensemble' → logprob: -6.237380504608154
    9. ''ent' → logprob: -6.237380504608154
    10. '<|end|>' → logprob: -6.487380504608154

Token 44: 'input' (ID: 2586)
  Prédit: 'input'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'input' → logprob: -0.4644681513309479
    2. 'entrée' → logprob: -1.0894681215286255
    3. 'ent' → logprob: -3.839468240737915
    4. ''entrée' → logprob: -5.714468002319336
    5. 'a' → logprob: -6.339468002319336
    6. 'nombre' → logprob: -6.964468002319336
    7. ' input' → logprob: -7.089468002319336
    8. 'util' → logprob: -7.089468002319336
    9. 'entr' → logprob: -7.089468002319336
    10. 'user' → logprob: -7.464468002319336

Token 45: ',' (ID: 11)
  Prédit: '.'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '.' → logprob: -0.9190390110015869
    2. ' ' → logprob: -1.669039011001587
    3. '<|end|>' → logprob: -1.919039011001587
    4. '
' → logprob: -2.919039011001587
    5. ')' → logprob: -3.294039011001587
    6. '[' → logprob: -3.419039011001587
    7. '\' → logprob: -3.919039011001587
    8. '\n' → logprob: -4.169038772583008
    9. '```' → logprob: -4.294038772583008
    10. 'for' → logprob: -4.294038772583008

Token 46: ' ok' (ID: 4763)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ')' → logprob: -0.40038561820983887
    2. ' puis' → logprob: -3.150385618209839
    3. 'strip' → logprob: -3.400385618209839
    4. 'split' → logprob: -3.650385618209839
    5. ' )' → logprob: -3.900385618209839
    6. 'print' → logprob: -4.025385856628418
    7. '()' → logprob: -4.650385856628418
    8. 'parse' → logprob: -4.650385856628418
    9. ' parse' → logprob: -4.775385856628418
    10. ' mais' → logprob: -4.900385856628418

Token 47: '

' (ID: 279)
  Prédit: '.'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '.' → logprob: -0.6276537775993347
    2. ')' → logprob: -2.0026538372039795
    3. '<|end|>' → logprob: -2.1276538372039795
    4. ' ' → logprob: -2.6276538372039795
    5. '
' → logprob: -3.3776538372039795
    6. '[' → logprob: -3.7526538372039795
    7. '\' → logprob: -4.2526535987854
    8. '\n' → logprob: -4.2526535987854
    9. ' 
' → logprob: -4.6276535987854
    10. '(' → logprob: -4.7526535987854

Token 48: '#' (ID: 2)
  Prédit: '
'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '
' → logprob: -0.5907701253890991
    2. '.' → logprob: -1.7157701253890991
    3. '[' → logprob: -2.5907702445983887
    4. '<|end|>' → logprob: -3.2157702445983887
    5. '\n' → logprob: -3.3407702445983887
    6. '#' → logprob: -3.8407702445983887
    7. ' ' → logprob: -3.8407702445983887
    8. ' 
' → logprob: -4.090770244598389
    9. ')' → logprob: -4.715770244598389
    10. '\' → logprob: -4.965770244598389

Token 49: ' Je' (ID: 4678)
  Prédit: 'for'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'for' → logprob: -0.6984412670135498
    2. ' for' → logprob: -1.1984412670135498
    3. 'n' → logprob: -2.57344126701355
    4. ' if' → logprob: -3.32344126701355
    5. '#' → logprob: -3.57344126701355
    6. 'if' → logprob: -3.94844126701355
    7. ' n' → logprob: -5.198441505432129
    8. 'sum' → logprob: -5.198441505432129
    9. 'print' → logprob: -5.323441505432129
    10. 's' → logprob: -5.448441505432129

Token 50: ' récup' (ID: 62856)
  Prédit: ' veux'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' veux' → logprob: -1.6397850513458252
    2. ' for' → logprob: -2.139785051345825
    3. ' vais' → logprob: -2.389785051345825
    4. ' if' → logprob: -2.764785051345825
    5. ' n' → logprob: -2.889785051345825
    6. ' ' → logprob: -2.889785051345825
    7. ' .' → logprob: -3.139785051345825
    8. ' pense' → logprob: -3.264785051345825
    9. '.' → logprob: -3.264785051345825
    10. ' print' → logprob: -3.514785051345825

Token 51: 'ère' (ID: 4346)
  Prédit: 'ère'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'ère' → logprob: -0.014057140797376633
    2. 'érer' → logprob: -4.514057159423828
    3. 'è' → logprob: -6.264057159423828
    4. 'ére' → logprob: -7.389057159423828
    5. '\' → logprob: -8.889057159423828
    6. 'èr' → logprob: -9.014057159423828
    7. '#' → logprob: -10.014057159423828
    8. '`' → logprob: -10.389057159423828
    9. '[' → logprob: -10.639057159423828
    10. 'ération' → logprob: -10.889057159423828

Token 52: ' les' (ID: 1341)
  Prédit: ' la'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' la' → logprob: -0.7106502056121826
    2. ' les' → logprob: -1.0856502056121826
    3. 'les' → logprob: -2.9606502056121826
    4. ' ' → logprob: -3.2106502056121826
    5. ' l' → logprob: -3.7106502056121826
    6. ' le' → logprob: -4.210650444030762
    7. 'la' → logprob: -4.585650444030762
    8. 'l' → logprob: -5.085650444030762
    9. 's' → logprob: -5.710650444030762
    10. '(' → logprob: -5.960650444030762

Token 53: ' valeurs' (ID: 73668)
  Prédit: ' nombres'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' nombres' → logprob: -0.6907264590263367
    2. ' valeurs' → logprob: -1.8157265186309814
    3. ' éléments' → logprob: -2.1907265186309814
    4. 'élé' → logprob: -2.8157265186309814
    5. ' ' → logprob: -3.0657265186309814
    6. ' maximum' → logprob: -3.8157265186309814
    7. ' indices' → logprob: -4.190726280212402
    8. ' max' → logprob: -4.815726280212402
    9. 's' → logprob: -4.815726280212402
    10. ' données' → logprob: -5.065726280212402

Token 54: '
' (ID: 198)
  Prédit: 'max'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'max' → logprob: -0.2815089821815491
    2. 'for' → logprob: -2.6565089225769043
    3. 'total' → logprob: -3.0315089225769043
    4. 'min' → logprob: -3.2815089225769043
    5. ' max' → logprob: -4.156508922576904
    6. 's' → logprob: -4.406508922576904
    7. ' for' → logprob: -4.781508922576904
    8. ',' → logprob: -4.781508922576904
    9. 'val' → logprob: -5.031508922576904
    10. 'a' → logprob: -5.031508922576904

Token 55: 'x' (ID: 87)
  Prédit: 'for'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'for' → logprob: -0.31052231788635254
    2. 'a' → logprob: -2.1855223178863525
    3. 'val' → logprob: -2.6855223178863525
    4. 'total' → logprob: -3.5605223178863525
    5. 's' → logprob: -3.9355223178863525
    6. 'max' → logprob: -4.060522079467773
    7. 'x' → logprob: -4.935522079467773
    8. 'som' → logprob: -5.685522079467773
    9. 'sum' → logprob: -5.935522079467773
    10. 'n' → logprob: -6.060522079467773

Token 56: ' =' (ID: 314)
  Prédit: ' ='
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' =' → logprob: -0.08796758949756622
    2. ',' → logprob: -2.96296763420105
    3. '_' → logprob: -4.962967395782471
    4. '=' → logprob: -4.962967395782471
    5. 's' → logprob: -5.337967395782471
    6. '1' → logprob: -5.462967395782471
    7. '0' → logprob: -6.087967395782471
    8. ' ' → logprob: -6.837967395782471
    9. '[' → logprob: -6.837967395782471
    10. ',y' → logprob: -7.212967395782471

Token 57: ' liste' (ID: 31719)
  Prédit: ' liste'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' liste' → logprob: -0.04429485276341438
    2. ' int' → logprob: -3.669294834136963
    3. 'liste' → logprob: -4.294294834136963
    4. 'int' → logprob: -6.794294834136963
    5. ' len' → logprob: -6.919294834136963
    6. ' list' → logprob: -7.419294834136963
    7. ' ' → logprob: -7.544294834136963
    8. ' lst' → logprob: -7.544294834136963
    9. 'list' → logprob: -9.669295310974121
    10. ' input' → logprob: -9.794295310974121

Token 58: '[' (ID: 58)
  Prédit: '['
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '[' → logprob: -2.3438327843905427e-05
    2. '[-' → logprob: -11.62502384185791
    3. '.' → logprob: -12.75002384185791
    4. '0' → logprob: -12.87502384185791
    5. '.pop' → logprob: -12.87502384185791
    6. ' [' → logprob: -13.00002384185791
    7. '[
' → logprob: -13.12502384185791
    8. '[:]' → logprob: -14.37502384185791
    9. '[len' → logprob: -14.62502384185791
    10. '[int' → logprob: -14.87502384185791

Token 59: '0' (ID: 15)
  Prédit: '0'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '0' → logprob: -0.0002358409110456705
    2. ' ' → logprob: -8.500235557556152
    3. '1' → logprob: -11.000235557556152
    4. '-' → logprob: -11.125235557556152
    5. ' -' → logprob: -14.625235557556152
    6. '2' → logprob: -15.250235557556152
    7. ']' → logprob: -16.75023651123047
    8. ')' → logprob: -17.00023651123047
    9. '3' → logprob: -17.68773651123047
    10. '  ' → logprob: -17.81273651123047

Token 60: ']
' (ID: 1592)
  Prédit: ']'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ']' → logprob: -0.002806656062602997
    2. ' ]' → logprob: -5.877806663513184
    3. ']
' → logprob: -13.877806663513184
    4. '+' → logprob: -15.127806663513184
    5. ']

' → logprob: -15.377806663513184
    6. ')' → logprob: -15.377806663513184
    7. ')]' → logprob: -16.752805709838867
    8. '']' → logprob: -17.002805709838867
    9. '],' → logprob: -17.002805709838867
    10. ' ' → logprob: -17.627805709838867

Token 61: 'y' (ID: 88)
  Prédit: ''
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False

Token 62: ' =' (ID: 314)
  Prédit: ' ='
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' =' → logprob: -0.03965223208069801
    2. '=' → logprob: -3.2896523475646973
    3. ' ' → logprob: -6.664652347564697
    4. '[' → logprob: -8.289651870727539
    5. ']' → logprob: -10.539651870727539
    6. '<|end|>' → logprob: -10.789651870727539
    7. ')' → logprob: -11.289651870727539
    8. ' ]' → logprob: -12.164651870727539
    9. ',' → logprob: -12.789651870727539
    10. '  ' → logprob: -12.914651870727539

Token 63: ' liste' (ID: 31719)
  Prédit: ' liste'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' liste' → logprob: -0.08900555223226547
    2. 'liste' → logprob: -2.464005470275879
    3. ' lista' → logprob: -10.964005470275879
    4. ' ' → logprob: -11.589005470275879
    5. ' lst' → logprob: -11.714005470275879
    6. ' list' → logprob: -11.714005470275879
    7. ' listes' → logprob: -11.714005470275879
    8. 'list' → logprob: -12.464005470275879
    9. ' ' → logprob: -13.214005470275879
    10. ' lijst' → logprob: -13.339005470275879

Token 64: '[' (ID: 58)
  Prédit: '['
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '[' → logprob: -2.629921436891891e-05
    2. '1' → logprob: -10.62502670288086
    3. ' [' → logprob: -13.75002670288086
    4. '[
' → logprob: -15.00002670288086
    5. '```' → logprob: -16.12502670288086
    6. '[-' → logprob: -16.50002670288086
    7. 's' → logprob: -16.75002670288086
    8. '][' → logprob: -17.37502670288086
    9. ' ' → logprob: -17.50002670288086
    10. '2' → logprob: -17.93752670288086

Token 65: '1' (ID: 16)
  Prédit: '1'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '1' → logprob: -1.9743012671824545e-05
    2. ' ' → logprob: -11.375020027160645
    3. '0' → logprob: -12.500020027160645
    4. ']' → logprob: -13.125020027160645
    5. '])' → logprob: -13.375020027160645
    6. '2' → logprob: -15.375020027160645
    7. '-' → logprob: -16.375019073486328
    8. ')' → logprob: -16.625019073486328
    9. '```' → logprob: -16.625019073486328
    10. '   ' → logprob: -16.687519073486328

Token 66: ']
' (ID: 1592)
  Prédit: ']'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ']' → logprob: -1.735893965815194e-05
    2. ' ]' → logprob: -11.125017166137695
    3. ']
' → logprob: -13.500017166137695
    4. '']' → logprob: -14.625017166137695
    5. ')' → logprob: -15.625017166137695
    6. ']

' → logprob: -15.875017166137695
    7. 'x' → logprob: -16.500017166137695
    8. '<|end|>' → logprob: -16.750017166137695
    9. ']>' → logprob: -16.750017166137695
    10. '"]' → logprob: -17.000017166137695

Token 67: 'z' (ID: 89)
  Prédit: ''
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False

Token 68: ' =' (ID: 314)
  Prédit: ' ='
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' =' → logprob: -0.08918742835521698
    2. '=' → logprob: -2.4641873836517334
    3. ' ' → logprob: -8.589187622070312
    4. ']' → logprob: -10.839187622070312
    5. '[' → logprob: -10.839187622070312
    6. '<|end|>' → logprob: -11.839187622070312
    7. ')' → logprob: -12.589187622070312
    8. ' ]' → logprob: -13.464187622070312
    9. '<|end|>' → logprob: -13.464187622070312
    10. ' =
' → logprob: -13.839187622070312

Token 69: ' liste' (ID: 31719)
  Prédit: ' liste'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' liste' → logprob: -0.0207362063229084
    2. 'liste' → logprob: -3.8957362174987793
    3. ' list' → logprob: -9.895735740661621
    4. ' ' → logprob: -10.395735740661621
    5. ' ' → logprob: -10.520735740661621
    6. ' lst' → logprob: -10.520735740661621
    7. ' lista' → logprob: -10.770735740661621
    8. ' listes' → logprob: -11.020735740661621
    9. ' lijst' → logprob: -12.395735740661621
    10. ' l' → logprob: -12.520735740661621

Token 70: '[' (ID: 58)
  Prédit: '['
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '[' → logprob: -5.438573680294212e-06
    2. '2' → logprob: -12.500005722045898
    3. '[-' → logprob: -14.250005722045898
    4. ' [' → logprob: -14.750005722045898
    5. '[
' → logprob: -15.000005722045898
    6. '```' → logprob: -15.625005722045898
    7. '.' → logprob: -16.3750057220459
    8. '(' → logprob: -17.6250057220459
    9. 's' → logprob: -17.7500057220459
    10. '\[' → logprob: -17.8750057220459

Token 71: '2' (ID: 17)
  Prédit: '2'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '2' → logprob: -1.652451464906335e-05
    2. '0' → logprob: -11.375016212463379
    3. ']' → logprob: -12.750016212463379
    4. '])' → logprob: -14.000016212463379
    5. ' ' → logprob: -14.500016212463379
    6. ')' → logprob: -15.250016212463379
    7. '1' → logprob: -15.250016212463379
    8. '```' → logprob: -15.875016212463379
    9. '-' → logprob: -16.125017166137695
    10. '3' → logprob: -16.875017166137695

Token 72: ']

' (ID: 3144)
  Prédit: ']'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ']' → logprob: -0.4287850558757782
    2. ')' → logprob: -1.0537850856781006
    3. '])' → logprob: -10.30378532409668
    4. '}' → logprob: -10.92878532409668
    5. ')]' → logprob: -11.92878532409668
    6. '）' → logprob: -12.17878532409668
    7. '']' → logprob: -12.17878532409668
    8. ']
' → logprob: -12.30378532409668
    9. ')
' → logprob: -12.55378532409668
    10. ' ]' → logprob: -13.17878532409668

Token 73: '#' (ID: 2)
  Prédit: '#'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '#' → logprob: -0.9258447885513306
    2. 'if' → logprob: -0.9258447885513306
    3. '
' → logprob: -2.425844669342041
    4. '+' → logprob: -3.425844669342041
    5. '<|end|>' → logprob: -4.300844669342041
    6. '\n' → logprob: -4.800844669342041
    7. 'i' → logprob: -4.925844669342041
    8. ' 
' → logprob: -4.925844669342041
    9. 's' → logprob: -5.050844669342041
    10. ' if' → logprob: -5.175844669342041

Token 74: ' Je' (ID: 4678)
  Prédit: 'if'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'if' → logprob: -0.30666837096214294
    2. ' if' → logprob: -1.4316684007644653
    3. '#' → logprob: -4.181668281555176
    4. 'print' → logprob: -6.306668281555176
    5. ' ' → logprob: -6.431668281555176
    6. 'i' → logprob: -6.556668281555176
    7. 's' → logprob: -6.931668281555176
    8. 'a' → logprob: -7.306668281555176
    9. 'for' → logprob: -7.306668281555176
    10. 'x' → logprob: -7.806668281555176

Token 75: ' me' (ID: 668)
  Prédit: ' if'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' if' → logprob: -0.3302328884601593
    2. 'if' → logprob: -1.580232858657837
    3. ' =' → logprob: -3.080232858657837
    4. ' ' → logprob: -4.830233097076416
    5. '=' → logprob: -5.080233097076416
    6. 's' → logprob: -5.955233097076416
    7. '#' → logprob: -6.205233097076416
    8. ' #' → logprob: -6.705233097076416
    9. ' for' → logprob: -7.080233097076416
    10. '<|end|>' → logprob: -7.205233097076416

Token 76: ' demande' (ID: 26737)
  Prédit: '#'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '#' → logprob: -1.5659195184707642
    2. ' demande' → logprob: -1.5659195184707642
    3. 'place' → logprob: -1.6909195184707642
    4. 's' → logprob: -2.0659193992614746
    5. 'r' → logprob: -2.6909193992614746
    6. 'f' → logprob: -3.3159193992614746
    7. 'pose' → logprob: -3.6909193992614746
    8. 'm' → logprob: -4.190919399261475
    9. 'if' → logprob: -4.315919399261475
    10. 't' → logprob: -4.565919399261475

Token 77: ' si' (ID: 1784)
  Prédit: 'if'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'if' → logprob: -0.8498746156692505
    2. ' ' → logprob: -1.9748746156692505
    3. 's' → logprob: -2.224874496459961
    4. 'i' → logprob: -2.849874496459961
    5. ' if' → logprob: -2.849874496459961
    6. '<|end|>' → logprob: -2.974874496459961
    7. 'si' → logprob: -3.724874496459961
    8. ',' → logprob: -3.974874496459961
    9. 'comment' → logprob: -4.099874496459961
    10. ' combien' → logprob: -4.224874496459961

Token 78: ' c' (ID: 274)
  Prédit: ' x'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' x' → logprob: -0.5366284251213074
    2. 'x' → logprob: -0.9116284251213074
    3. ' (' → logprob: -4.536628246307373
    4. '(' → logprob: -6.411628246307373
    5. '(x' → logprob: -7.786628246307373
    6. ' ' → logprob: -8.036628723144531
    7. ' y' → logprob: -9.286628723144531
    8. 'z' → logprob: -9.661628723144531
    9. ' z' → logprob: -10.161628723144531
    10. '  ' → logprob: -10.411628723144531

Token 79: ''est' (ID: 6616)
  Prédit: ''est'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ''est' → logprob: -0.5595531463623047
    2. 'est' → logprob: -1.9345531463623047
    3. 'e' → logprob: -2.1845531463623047
    4. ''' → logprob: -3.5595531463623047
    5. ''''' → logprob: -3.9345531463623047
    6. '#' → logprob: -4.059553146362305
    7. 'r' → logprob: -4.059553146362305
    8. 'x' → logprob: -4.309553146362305
    9. ''s' → logprob: -4.809553146362305
    10. 'z' → logprob: -5.184553146362305

Token 80: ' vraiment' (ID: 26637)
  Prédit: 'possible'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'possible' → logprob: -0.9885914921760559
    2. 'le' → logprob: -2.113591432571411
    3. ' une' → logprob: -2.238591432571411
    4. ' possible' → logprob: -2.238591432571411
    5. ' un' → logprob: -2.988591432571411
    6. 'une' → logprob: -3.363591432571411
    7. ' le' → logprob: -4.11359167098999
    8. 'z' → logprob: -4.11359167098999
    9. ' bon' → logprob: -4.11359167098999
    10. ' divisible' → logprob: -4.36359167098999

Token 81: ' utile' (ID: 68237)
  Prédit: ' une'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' une' → logprob: -1.0353057384490967
    2. ' possible' → logprob: -1.4103057384490967
    3. 'possible' → logprob: -1.9103057384490967
    4. ' un' → logprob: -2.9103057384490967
    5. ' le' → logprob: -3.2853057384490967
    6. ' trip' → logprob: -3.7853057384490967
    7. 'le' → logprob: -3.7853057384490967
    8. 'une' → logprob: -4.160305976867676
    9. ' nécessaire' → logprob: -4.160305976867676
    10. ' utile' → logprob: -4.160305976867676

Token 82: ',' (ID: 11)
  Prédit: ','
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ',' → logprob: -0.7023526430130005
    2. ' ' → logprob: -1.3273526430130005
    3. '<|end|>' → logprob: -2.327352523803711
    4. 'if' → logprob: -3.452352523803711
    5. '.' → logprob: -3.827352523803711
    6. ',
' → logprob: -4.202352523803711
    7. '
' → logprob: -4.452352523803711
    8. ' ,' → logprob: -4.577352523803711
    9. '  
' → logprob: -4.702352523803711
    10. '#' → logprob: -4.702352523803711

Token 83: ' mais' (ID: 2899)
  Prédit: ' mais'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' mais' → logprob: -0.20761746168136597
    2. ' ' → logprob: -3.0826175212860107
    3. ' but' → logprob: -3.0826175212860107
    4. ' car' → logprob: -3.4576175212860107
    5. '<|end|>' → logprob: -4.582617282867432
    6. 'mais' → logprob: -5.082617282867432
    7. 'car' → logprob: -5.207617282867432
    8. ' je' → logprob: -5.457617282867432
    9. ' parce' → logprob: -5.582617282867432
    10. ' on' → logprob: -5.832617282867432

Token 84: ' allons' (ID: 97647)
  Prédit: ' if'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' if' → logprob: -0.7087630033493042
    2. 'if' → logprob: -1.3337630033493042
    3. ' on' → logprob: -2.8337631225585938
    4. ' peut' → logprob: -3.5837631225585938
    5. ' oui' → logprob: -3.9587631225585938
    6. ' x' → logprob: -4.333763122558594
    7. 'print' → logprob: -4.333763122558594
    8. ' si' → logprob: -4.333763122558594
    9. ' for' → logprob: -4.458763122558594
    10. ' a' → logprob: -4.583763122558594

Token 85: '-y' (ID: 18102)
  Prédit: ':'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ':' → logprob: -0.6309887170791626
    2. '-' → logprob: -2.005988597869873
    3. '#' → logprob: -2.130988597869873
    4. 'if' → logprob: -2.380988597869873
    5. 'y' → logprob: -3.130988597869873
    6. 'for' → logprob: -4.130988597869873
    7. '```' → logprob: -4.380988597869873
    8. '=' → logprob: -4.755988597869873
    9. '?' → logprob: -5.380988597869873
    10. '.' → logprob: -5.505988597869873

Token 86: '
' (ID: 198)
  Prédit: 'if'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'if' → logprob: -0.2944391667842865
    2. ' if' → logprob: -1.4194391965866089
    3. '
' → logprob: -5.169439315795898
    4. 'for' → logprob: -6.669439315795898
    5. ' for' → logprob: -6.794439315795898
    6. 'i' → logprob: -7.419439315795898
    7. ' 
' → logprob: -7.419439315795898
    8. ' ' → logprob: -7.794439315795898
    9. 'print' → logprob: -7.794439315795898
    10. ':' → logprob: -7.794439315795898

Token 87: 'if' (ID: 366)
  Prédit: 'if'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'if' → logprob: -0.03319364786148071
    2. ' if' → logprob: -3.908193588256836
    3. 'i' → logprob: -4.908193588256836
    4. '
' → logprob: -6.783193588256836
    5. 'for' → logprob: -6.908193588256836
    6. 'n' → logprob: -7.408193588256836
    7. 'a' → logprob: -7.658193588256836
    8. '#' → logprob: -8.158193588256836
    9. 'result' → logprob: -8.283193588256836
    10. 's' → logprob: -8.283193588256836

Token 88: ' x' (ID: 1215)
  Prédit: ' x'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' x' → logprob: -0.02786477841436863
    2. 'x' → logprob: -3.652864694595337
    3. ' (' → logprob: -7.152864933013916
    4. ' ' → logprob: -7.277864933013916
    5. ' ' → logprob: -9.527864456176758
    6. '(x' → logprob: -12.152864456176758
    7. '(' → logprob: -12.527864456176758
    8. '  ' → logprob: -12.902864456176758
    9. ' y' → logprob: -13.277864456176758
    10. '	x' → logprob: -14.152864456176758

Token 89: ' ==' (ID: 951)
  Prédit: ' >'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' >' → logprob: -0.08380469679832458
    2. '>' → logprob: -3.0838046073913574
    3. ' <' → logprob: -4.333804607391357
    4. ' ==' → logprob: -4.583804607391357
    5. '+' → logprob: -5.583804607391357
    6. '==' → logprob: -5.708804607391357
    7. '%' → logprob: -6.583804607391357
    8. '<' → logprob: -6.708804607391357
    9. ' +' → logprob: -7.458804607391357
    10. ' <=' → logprob: -7.833804607391357

Token 90: ' y' (ID: 342)
  Prédit: ' y'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' y' → logprob: -0.17394126951694489
    2. 'y' → logprob: -1.9239412546157837
    3. ' ' → logprob: -4.673941135406494
    4. '0' → logprob: -5.673941135406494
    5. '1' → logprob: -7.798941135406494
    6. ' z' → logprob: -8.673941612243652
    7. 'z' → logprob: -8.923941612243652
    8. '7' → logprob: -10.673941612243652
    9. '10' → logprob: -11.048941612243652
    10. '3' → logprob: -11.048941612243652

Token 91: ' and' (ID: 326)
  Prédit: ':'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ':' → logprob: -0.23026727139949799
    2. ' and' → logprob: -2.230267286300659
    3. '==' → logprob: -3.105267286300659
    4. ' ==' → logprob: -3.230267286300659
    5. ' :' → logprob: -4.98026704788208
    6. 'and' → logprob: -5.60526704788208
    7. '=' → logprob: -6.23026704788208
    8. ' or' → logprob: -7.23026704788208
    9. '>' → logprob: -8.230267524719238
    10. ')' → logprob: -9.730267524719238

Token 92: ' y' (ID: 342)
  Prédit: ' y'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' y' → logprob: -0.0109663475304842
    2. 'y' → logprob: -5.1359663009643555
    3. ' x' → logprob: -5.5109663009643555
    4. ' z' → logprob: -7.2609663009643555
    5. 'x' → logprob: -8.385966300964355
    6. ' ' → logprob: -10.510966300964355
    7. 'z' → logprob: -10.760966300964355
    8. '	y' → logprob: -13.135966300964355
    9. ' ' → logprob: -14.260966300964355
    10. '```' → logprob: -15.635966300964355

Token 93: ' ==' (ID: 951)
  Prédit: '=='
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '==' → logprob: -0.28132590651512146
    2. ' ==' → logprob: -1.4063259363174438
    3. '<|end|>' → logprob: -8.781326293945312
    4. '=' → logprob: -11.281326293945312
    5. '==
' → logprob: -12.156326293945312
    6. 'and' → logprob: -14.531326293945312
    7. '<|end|>' → logprob: -14.781326293945312
    8. ' ' → logprob: -14.781326293945312
    9. ']==' → logprob: -15.156326293945312
    10. '>' → logprob: -15.156326293945312

Token 94: ' z' (ID: 579)
  Prédit: 'z'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'z' → logprob: -0.08894394338130951
    2. ' z' → logprob: -2.4639439582824707
    3. 'x' → logprob: -13.213943481445312
    4. '	z' → logprob: -13.713943481445312
    5. ''z' → logprob: -14.838943481445312
    6. '_z' → logprob: -15.588943481445312
    7. ' ' → logprob: -15.588943481445312
    8. ' ' → logprob: -15.588943481445312
    9. '=z' → logprob: -15.713943481445312
    10. ' x' → logprob: -16.213943481445312

Token 95: ':
' (ID: 734)
  Prédit: ':'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ':' → logprob: -0.001407017232850194
    2. ' :' → logprob: -6.626407146453857
    3. ' and' → logprob: -9.6264066696167
    4. ':
' → logprob: -11.6264066696167
    5. 'and' → logprob: -12.2514066696167
    6. '):' → logprob: -15.1264066696167
    7. ':**' → logprob: -15.5014066696167
    8. ':

' → logprob: -15.8764066696167
    9. '>' → logprob: -16.001407623291016
    10. '=' → logprob: -16.126407623291016

Token 96: '   ' (ID: 271)
  Prédit: ':'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ':' → logprob: -0.014400421641767025
    2. ' :' → logprob: -4.389400482177734
    3. ' and' → logprob: -7.389400482177734
    4. ':
' → logprob: -7.514400482177734
    5. 'print' → logprob: -8.139400482177734
    6. ' print' → logprob: -8.139400482177734
    7. '   ' → logprob: -10.014400482177734
    8. '	print' → logprob: -10.514400482177734
    9. ' :
' → logprob: -10.514400482177734
    10. 'and' → logprob: -11.139400482177734

Token 97: ' print' (ID: 2123)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.6765451431274414
    2. ' print' → logprob: -1.1765451431274414
    3. 'print' (adapté à ' print') → logprob: -1.8015451431274414
    4. ':' → logprob: -4.551545143127441
    5. '
' → logprob: -6.176545143127441
    6. ':
' → logprob: -6.551545143127441
    7. '    ' → logprob: -6.801545143127441
    8. ' :' → logprob: -7.051545143127441
    9. '	print' → logprob: -7.551545143127441
    10. '\n' → logprob: -7.801545143127441

Token 98: '("' (ID: 568)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(' → logprob: -0.40897661447525024
    2. '("' → logprob: -1.1589765548706055
    3. '("("' → logprob: -3.9089765548706055
    4. '('' → logprob: -7.0339765548706055
    5. '(x' → logprob: -7.9089765548706055
    6. '(True' → logprob: -8.033976554870605
    7. '("="' → logprob: -9.658976554870605
    8. '("")' → logprob: -10.283976554870605
    9. '("(' → logprob: -10.908976554870605
    10. '"' → logprob: -11.033976554870605

Token 99: 'Yes' (ID: 13022)
  Prédit: 'E'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'E' → logprob: -0.9183893203735352
    2. 'B' → logprob: -2.168389320373535
    3. 'O' → logprob: -2.793389320373535
    4. 'É' → logprob: -2.793389320373535
    5. 'Oui' → logprob: -3.168389320373535
    6. 'égalité' → logprob: -3.793389320373535
    7. 'egal' → logprob: -3.918389320373535
    8. 'Yes' → logprob: -3.918389320373535
    9. 'oui' → logprob: -3.918389320373535
    10. 'Triangle' → logprob: -4.168389320373535

Token 100: '")
' (ID: 1896)
  Prédit: '")'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '")' → logprob: -0.0010869937250390649
    2. '!")' → logprob: -7.126087188720703
    3. '")
' → logprob: -8.751087188720703
    4. ',' → logprob: -9.876087188720703
    5. '"' → logprob: -10.626087188720703
    6. ' ")' → logprob: -10.751087188720703
    7. '!' → logprob: -10.876087188720703
    8. '")
' → logprob: -14.001087188720703
    9. 'else' → logprob: -14.001087188720703
    10. ' !' → logprob: -14.001087188720703

Token 101: 'else' (ID: 2807)
  Prédit: 'else'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'else' → logprob: -0.056200891733169556
    2. 'elif' → logprob: -3.0562009811401367
    3. ' else' → logprob: -4.931200981140137
    4. '<|end|>' → logprob: -8.181200981140137
    5. ' elif' → logprob: -9.806200981140137
    6. ')' → logprob: -12.181200981140137
    7. '<|end|>' → logprob: -12.431200981140137
    8. 'e' → logprob: -12.556200981140137
    9. '
' → logprob: -12.931200981140137
    10. 'elser' → logprob: -12.931200981140137

Token 102: ':
' (ID: 734)
  Prédit: ':'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ':' → logprob: -0.003337529255077243
    2. ':
' → logprob: -5.753337383270264
    3. ' :' → logprob: -9.253337860107422
    4. '   ' → logprob: -9.878337860107422
    5. ' :
' → logprob: -11.503337860107422
    6. '():' → logprob: -14.128337860107422
    7. 'print' → logprob: -15.003337860107422
    8. ':

' → logprob: -15.128337860107422
    9. '    ' → logprob: -15.503337860107422
    10. '(' → logprob: -15.628337860107422

Token 103: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -6.12258882028982e-05
    2. ' print' → logprob: -10.25006103515625
    3. 'print' → logprob: -10.75006103515625
    4. '"' → logprob: -14.00006103515625
    5. '    ' → logprob: -14.12506103515625
    6. '   ' → logprob: -14.12506103515625
    7. '    
' → logprob: -14.25006103515625
    8. '	print' → logprob: -15.00006103515625
    9. '       ' → logprob: -15.12506103515625
    10. '```' → logprob: -15.25006103515625

Token 104: ' print' (ID: 2123)
  Prédit: 'print'
  Correct (stricte): False
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'print' (adapté à ' print') → logprob: -0.42219915986061096
    2. ' print' → logprob: -1.1721991300582886
    3. '   ' → logprob: -3.422199249267578
    4. '"' → logprob: -6.422199249267578
    5. '    ' → logprob: -8.797199249267578
    6. ' ' → logprob: -8.797199249267578
    7. '    
' → logprob: -10.047199249267578
    8. '	print' → logprob: -10.797199249267578
    9. '  ' → logprob: -11.047199249267578
    10. ' "' → logprob: -11.047199249267578

Token 105: '('' (ID: 706)
  Prédit: '("'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '("' → logprob: -0.04882387816905975
    2. '(' → logprob: -3.048823833465576
    3. '("("' → logprob: -8.423824310302734
    4. '("")' → logprob: -11.423824310302734
    5. '("(' → logprob: -12.673824310302734
    6. '(""' → logprob: -13.923824310302734
    7. '('' → logprob: -14.298824310302734
    8. '(
' → logprob: -14.798824310302734
    9. '("""' → logprob: -14.923824310302734
    10. '()' → logprob: -15.548824310302734

Token 106: 'No' (ID: 3160)
  Prédit: 'No'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'No' → logprob: -0.04474145546555519
    2. '"No' → logprob: -3.16974139213562
    3. ''' → logprob: -6.794741630554199
    4. '"' → logprob: -7.419741630554199
    5. ' No' → logprob: -11.5447416305542
    6. '"N' → logprob: -12.9197416305542
    7. '“No' → logprob: -13.4197416305542
    8. 'NO' → logprob: -13.6697416305542
    9. 'Non' → logprob: -13.9197416305542
    10. 'N' → logprob: -14.1697416305542

Token 107: '')' (ID: 1542)
  Prédit: '")'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '")' → logprob: -0.014169861562550068
    2. '')' → logprob: -4.264169692993164
    3. ')' → logprob: -12.514169692993164
    4. '"' → logprob: -13.139169692993164
    5. '")
' → logprob: -15.139169692993164
    6. ')")' → logprob: -15.264169692993164
    7. ''' → logprob: -17.139169692993164
    8. '')"' → logprob: -17.264169692993164
    9. '!")' → logprob: -17.639169692993164
    10. ' ")' → logprob: -17.764169692993164

Token 108: ' ' (ID: 220)
  Prédit: ''
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False

Token 109: ' #' (ID: 1069)
  Prédit: ''
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False

Token 110: ' On' (ID: 2160)
  Prédit: ''
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False

Token 111: ' met' (ID: 1421)
  Prédit: '#'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '#' → logprob: -0.9970964789390564
    2. 'f' → logprob: -2.872096538543701
    3. '<|end|>' → logprob: -2.872096538543701
    4. ' pense' → logprob: -2.997096538543701
    5. 'a' → logprob: -3.122096538543701
    6. 'est' → logprob: -3.372096538543701
    7. ' continue' → logprob: -3.497096538543701
    8. 'n' → logprob: -3.622096538543701
    9. ' peut' → logprob: -3.872096538543701
    10. ' ' → logprob: -3.872096538543701

Token 112: 'tra' (ID: 1787)
  Prédit: ' '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' ' → logprob: -1.0197159051895142
    2. ' un' → logprob: -2.1447157859802246
    3. 'le' → logprob: -2.1447157859802246
    4. '<|end|>' → logprob: -2.1447157859802246
    5. 'fin' → logprob: -2.7697157859802246
    6. ' fin' → logprob: -3.7697157859802246
    7. '```' → logprob: -4.019715785980225
    8. ' une' → logprob: -4.144715785980225
    9. 'un' → logprob: -4.269715785980225
    10. ')' → logprob: -4.269715785980225

Token 113: ' No' (ID: 3004)
  Prédit: ''
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False

Token 114: ' si' (ID: 1784)
  Prédit: ''
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False

Token 115: ' jamais' (ID: 23077)
  Prédit: 'les'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'les' → logprob: -0.929067850112915
    2. ' ce' → logprob: -1.179067850112915
    3. 'pas' → logprob: -2.054067850112915
    4. ' les' → logprob: -2.429067850112915
    5. 'ce' → logprob: -3.554067850112915
    6. ' pas' → logprob: -3.929067850112915
    7. 'le' → logprob: -5.304067611694336
    8. 'r' → logprob: -5.679067611694336
    9. 'tout' → logprob: -5.804067611694336
    10. 'c' → logprob: -5.929067611694336

Token 116: ' c' (ID: 274)
  Prédit: ''
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False

Token 117: ''est' (ID: 6616)
  Prédit: ''est'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ''est' → logprob: -0.7343537211418152
    2. 'e' → logprob: -1.73435378074646
    3. 'a' → logprob: -1.98435378074646
    4. 'est' → logprob: -2.48435378074646
    5. ''' → logprob: -2.98435378074646
    6. 'es' → logprob: -3.48435378074646
    7. 'c' → logprob: -4.859353542327881
    8. ''était' → logprob: -4.859353542327881
    9. ''a' → logprob: -5.609353542327881
    10. 'ça' → logprob: -5.984353542327881

Token 118: ' différent' (ID: 114823)
  Prédit: 'pas'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'pas' → logprob: -0.4339425265789032
    2. 'different' → logprob: -2.0589425563812256
    3. ' différent' → logprob: -2.6839425563812256
    4. 'not' → logprob: -3.0589425563812256
    5. 'diff' → logprob: -3.1839425563812256
    6. ' pas' → logprob: -3.3089425563812256
    7. ' different' → logprob: -4.9339423179626465
    8. 'f' → logprob: -5.3089423179626465
    9. 'le' → logprob: -5.9339423179626465
    10. '```' → logprob: -5.9339423179626465


RÉSUMÉ:
--------------------------------------------------------------------------------
Total des tokens analysés: 116
Tokens correctement prédits (1ère position, stricte): 35
Tokens correctement prédits (1ère position, avec adaptation): 36
Tokens correctement prédits (top 10): 70
Précision stricte (1ère position): 30.17%
Précision adaptée (1ère position): 31.03%
Précision (top 10): 60.34%
================================================================================
