================================================================================
ANALYSE DE PRÉDICTION TOKEN PAR TOKEN (BATCH API)
Date: 2025-06-04 20:12:35
Modèle de tokenisation: gpt-4o-mini
================================================================================

SCRIPT ANALYSÉ:
--------------------------------------------------------------------------------
from functools import reduce

def get_vals():
    return [int(x) for x in input().split()]

arr = sorted(get_vals())

res = 0
for i,y in enumerate(arr[1:]):
    res += abs(y - arr[i])

print(res)
--------------------------------------------------------------------------------

RÉSULTATS D'ANALYSE TOKEN PAR TOKEN:
--------------------------------------------------------------------------------
Token 0: 'from' (ID: 2845)
  → Token d'amorce (pas de prédiction)

Token 1: ' functools' (ID: 142636)
  → Token d'amorce (pas de prédiction)

Token 2: ' import' (ID: 1588)
  → Token d'amorce (pas de prédiction)

Token 3: ' reduce' (ID: 10389)
  Prédit: 'partial'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'partial' → logprob: -0.612085223197937
    2. 'wrap' → logprob: -0.862085223197937
    3. 'reduce' → logprob: -3.4870853424072266
    4. 'l' → logprob: -6.112085342407227
    5. ' wraps' → logprob: -6.487085342407227
    6. 'cached' → logprob: -7.612085342407227
    7. 'cache' → logprob: -8.112085342407227
    8. 'cmp' → logprob: -9.237085342407227
    9. '```' → logprob: -9.237085342407227
    10. ' partial' → logprob: -9.612085342407227

Token 4: '

' (ID: 279)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '(' → logprob: -0.010288605466485023
    2. '(lambda' → logprob: -4.760288715362549
    3. ' (' → logprob: -7.385288715362549
    4. ',' → logprob: -7.885288715362549
    5. 'def' → logprob: -8.13528823852539
    6. '.' → logprob: -8.76028823852539
    7. '```' → logprob: -10.13528823852539
    8. '(
' → logprob: -10.51028823852539
    9. 'lambda' → logprob: -10.63528823852539
    10. 'a' → logprob: -10.76028823852539

Token 5: 'def' (ID: 1314)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(' → logprob: -0.016088567674160004
    2. '(lambda' → logprob: -4.391088485717773
    3. 'def' → logprob: -6.141088485717773
    4. ',' → logprob: -7.391088485717773
    5. '(
' → logprob: -8.391088485717773
    6. '.' → logprob: -9.016088485717773
    7. '\' → logprob: -9.266088485717773
    8. '```' → logprob: -9.641088485717773
    9. 'd' → logprob: -10.016088485717773
    10. '\(' → logprob: -10.391088485717773

Token 6: ' get' (ID: 717)
  Prédit: ' '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' ' → logprob: -0.6426565647125244
    2. ' reduce' → logprob: -0.8926565647125244
    3. ' factorial' → logprob: -3.7676565647125244
    4. ' calculate' → logprob: -4.767656326293945
    5. ' map' → logprob: -4.767656326293945
    6. ' sum' → logprob: -4.892656326293945
    7. ' add' → logprob: -5.142656326293945
    8. ' space' → logprob: -6.392656326293945
    9. ' process' → logprob: -6.892656326293945
    10. ' my' → logprob: -7.017656326293945

Token 7: '_vals' (ID: 71688)
  Prédit: '_'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '_' → logprob: -0.05935413017868996
    2. '_factor' → logprob: -3.809354066848755
    3. '_max' → logprob: -4.309354305267334
    4. '_sum' → logprob: -4.309354305267334
    5. ' _' → logprob: -5.559354305267334
    6. '_user' → logprob: -7.309354305267334
    7. '_total' → logprob: -7.559354305267334
    8. ' ' → logprob: -7.684354305267334
    9. '_s' → logprob: -8.309353828430176
    10. '_item' → logprob: -8.934353828430176

Token 8: '():
' (ID: 8595)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '(' → logprob: -0.026179762557148933
    2. '_' → logprob: -3.901179790496826
    3. '(a' → logprob: -7.276179790496826
    4. '```' → logprob: -7.526179790496826
    5. '_list' → logprob: -7.776179790496826
    6. '():' → logprob: -7.776179790496826
    7. '_values' → logprob: -8.276179313659668
    8. ' (' → logprob: -8.526179313659668
    9. '(_' → logprob: -8.776179313659668
    10. '(x' → logprob: -8.776179313659668

Token 9: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.06912487000226974
    2. '(' → logprob: -4.069124698638916
    3. '```' → logprob: -4.194124698638916
    4. ' return' → logprob: -4.444124698638916
    5. '():' → logprob: -5.819124698638916
    6. 'return' → logprob: -5.944124698638916
    7. '    ' → logprob: -6.069124698638916
    8. ' ' → logprob: -6.319124698638916
    9. ':' → logprob: -6.319124698638916
    10. '    
' → logprob: -6.444124698638916

Token 10: ' return' (ID: 622)
  Prédit: 'return'
  Correct (stricte): False
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'return' (adapté à ' return') → logprob: -0.5802739262580872
    2. ' return' → logprob: -1.3302738666534424
    3. '   ' → logprob: -1.9552738666534424
    4. '[' → logprob: -4.9552741050720215
    5. '```' → logprob: -5.0802741050720215
    6. 'r' → logprob: -5.7052741050720215
    7. '    ' → logprob: -5.9552741050720215
    8. 'yield' → logprob: -6.0802741050720215
    9. 'values' → logprob: -6.2052741050720215
    10. ' ' → logprob: -6.4552741050720215

Token 11: ' [' (ID: 723)
  Prédit: ' ['
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' [' → logprob: -0.7294946908950806
    2. ' []' → logprob: -0.9794946908950806
    3. '[' → logprob: -2.229494571685791
    4. '[]' → logprob: -3.479494571685791
    5. ' ' → logprob: -5.729494571685791
    6. ' None' → logprob: -9.35449504852295
    7. ' ['' → logprob: -9.35449504852295
    8. ' map' → logprob: -9.97949504852295
    9. ' [
' → logprob: -9.97949504852295
    10. 'range' → logprob: -10.10449504852295

Token 12: 'int' (ID: 491)
  Prédit: '1'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '1' → logprob: -0.00048048171447589993
    2. '   ' → logprob: -8.625480651855469
    3. ' ' → logprob: -8.875480651855469
    4. '42' → logprob: -9.375480651855469
    5. '10' → logprob: -10.500480651855469
    6. '0' → logprob: -10.750480651855469
    7. ']' → logprob: -11.250480651855469
    8. '4' → logprob: -12.625480651855469
    9. ')' → logprob: -13.000480651855469
    10. '3' → logprob: -13.125480651855469

Token 13: '(x' (ID: 4061)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(' → logprob: -0.4178745746612549
    2. '(input' → logprob: -1.2928745746612549
    3. '('' → logprob: -3.042874574661255
    4. '(x' → logprob: -4.167874336242676
    5. '("' → logprob: -6.417874336242676
    6. '(i' → logprob: -7.167874336242676
    7. '(s' → logprob: -7.167874336242676
    8. '(token' → logprob: -8.292874336242676
    9. 'input' → logprob: -8.792874336242676
    10. '(line' → logprob: -9.667874336242676

Token 14: ')' (ID: 8)
  Prédit: ')'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')' → logprob: -0.03859906271100044
    2. '(x' → logprob: -3.6635990142822266
    3. '(input' → logprob: -5.163599014282227
    4. ')]' → logprob: -5.288599014282227
    5. '(' → logprob: -7.663599014282227
    6. '())' → logprob: -8.663599014282227
    7. '(i' → logprob: -8.663599014282227
    8. 'input' → logprob: -9.038599014282227
    9. '(s' → logprob: -9.163599014282227
    10. ')])' → logprob: -9.288599014282227

Token 15: ' for' (ID: 395)
  Prédit: 'for'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'for' → logprob: -0.48558464646339417
    2. ' for' → logprob: -1.3605846166610718
    3. '(x' → logprob: -2.3605847358703613
    4. ')' → logprob: -3.4855847358703613
    5. 'x' → logprob: -6.110584735870361
    6. '(' → logprob: -8.860584259033203
    7. ')]' → logprob: -9.110584259033203
    8. ' x' → logprob: -9.360584259033203
    9. '```' → logprob: -9.735584259033203
    10. 'i' → logprob: -9.860584259033203

Token 16: ' x' (ID: 1215)
  Prédit: ' input'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' input' → logprob: -0.2425045669078827
    2. ' range' → logprob: -2.492504596710205
    3. ' x' → logprob: -2.742504596710205
    4. 'input' → logprob: -2.992504596710205
    5. 'range' → logprob: -5.117504596710205
    6. 'x' → logprob: -5.492504596710205
    7. ' ' → logprob: -5.742504596710205
    8. '<|end|>' → logprob: -6.742504596710205
    9. '<|end|>' → logprob: -6.867504596710205
    10. ' user' → logprob: -7.617504596710205

Token 17: ' in' (ID: 306)
  Prédit: ' in'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' in' → logprob: -0.020580314099788666
    2. 'in' → logprob: -3.895580291748047
    3. ' ' → logprob: -11.020580291748047
    4. 'import' → logprob: -11.145580291748047
    5. '<|end|>' → logprob: -13.770580291748047
    6. '<|end|>' → logprob: -14.270580291748047
    7. '	in' → logprob: -14.895580291748047
    8. 'inx' → logprob: -14.895580291748047
    9. '  ' → logprob: -14.958080291748047
    10. ')' → logprob: -14.958080291748047

Token 18: ' input' (ID: 3422)
  Prédit: 'input'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'input' → logprob: -0.07955045998096466
    2. ' input' → logprob: -2.5795505046844482
    3. 'range' → logprob: -7.579550266265869
    4. ' range' → logprob: -9.954550743103027
    5. ' ' → logprob: -10.579550743103027
    6. '(input' → logprob: -10.704550743103027
    7. 'get' → logprob: -11.454550743103027
    8. '```' → logprob: -11.579550743103027
    9. ')' → logprob: -11.954550743103027
    10. 'iter' → logprob: -12.704550743103027

Token 19: '().' (ID: 1454)
  Prédit: '()'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '()' → logprob: -0.5613546371459961
    2. '()]' → logprob: -0.9363546371459961
    3. '(' → logprob: -3.686354637145996
    4. '())' → logprob: -5.061354637145996
    5. '('' → logprob: -5.436354637145996
    6. '().' → logprob: -6.936354637145996
    7. '("' → logprob: -8.436354637145996
    8. '("")' → logprob: -8.561354637145996
    9. '("("' → logprob: -10.061354637145996
    10. '()][' → logprob: -10.061354637145996

Token 20: 'split' (ID: 13627)
  Prédit: 'split'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'split' → logprob: -0.002485884353518486
    2. 'strip' → logprob: -6.002485752105713
    3. 'rstrip' → logprob: -11.502486228942871
    4. ' split' → logprob: -15.877486228942871
    5. '(split' → logprob: -18.627485275268555
    6. 'spl' → logprob: -19.252485275268555
    7. 'read' → logprob: -19.752485275268555
    8. 'replace' → logprob: -20.877485275268555
    9. ' strip' → logprob: -21.002485275268555
    10. '.split' → logprob: -21.252485275268555

Token 21: '()' (ID: 416)
  Prédit: '()]'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '()]' → logprob: -0.1595931351184845
    2. '())' → logprob: -2.284593105316162
    3. '()' → logprob: -3.409593105316162
    4. '(' → logprob: -4.534593105316162
    5. '('' → logprob: -6.534593105316162
    6. ')]' → logprob: -8.03459358215332
    7. ']' → logprob: -10.28459358215332
    8. '')]' → logprob: -10.78459358215332
    9. '()))' → logprob: -11.53459358215332
    10. '()],' → logprob: -11.65959358215332

Token 22: ']

' (ID: 3144)
  Prédit: ']'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ']' → logprob: -0.1121126040816307
    2. ')]' → logprob: -2.362112522125244
    3. '])' → logprob: -4.612112522125244
    4. ')' → logprob: -6.737112522125244
    5. '])]' → logprob: -7.612112522125244
    6. ')])' → logprob: -8.737112998962402
    7. '()]' → logprob: -10.612112998962402
    8. '`]' → logprob: -11.362112998962402
    9. ' ]' → logprob: -11.862112998962402
    10. '   ' → logprob: -12.362112998962402

Token 23: 'arr' (ID: 1614)
  Prédit: 'def'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'def' → logprob: -0.371643602848053
    2. 'n' → logprob: -1.4966435432434082
    3. 'a' → logprob: -3.621643543243408
    4. 'result' → logprob: -3.746643543243408
    5. 'nums' → logprob: -4.496643543243408
    6. 'sum' → logprob: -5.371643543243408
    7. '\' → logprob: -5.621643543243408
    8. 'total' → logprob: -5.621643543243408
    9. 'x' → logprob: -5.996643543243408
    10. 'vals' → logprob: -6.246643543243408

Token 24: ' =' (ID: 314)
  Prédit: '['
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '[' → logprob: -0.01447585690766573
    2. '.' → logprob: -4.5144758224487305
    3. '=' → logprob: -6.7644758224487305
    4. '[:]' → logprob: -6.7644758224487305
    5. ' =' → logprob: -7.7644758224487305
    6. '[]' → logprob: -8.63947582244873
    7. ']' → logprob: -8.76447582244873
    8. ')' → logprob: -9.38947582244873
    9. '_' → logprob: -9.76447582244873
    10. '[
' → logprob: -10.38947582244873

Token 25: ' sorted' (ID: 20099)
  Prédit: ' get'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' get' → logprob: -0.3870867192745209
    2. 'get' → logprob: -1.1370867490768433
    3. '[get' → logprob: -8.637086868286133
    4. ' [' → logprob: -11.012086868286133
    5. ' []' → logprob: -11.762086868286133
    6. ' list' → logprob: -12.762086868286133
    7. '[' → logprob: -13.137086868286133
    8. 'reduce' → logprob: -13.262086868286133
    9. '[]' → logprob: -13.387086868286133
    10. 'list' → logprob: -13.512086868286133

Token 26: '(get' (ID: 7119)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(' → logprob: -0.44922691583633423
    2. '(arr' → logprob: -1.4492268562316895
    3. '(get' → logprob: -2.0742268562316895
    4. '(input' → logprob: -7.4492268562316895
    5. '((' → logprob: -8.574227333068848
    6. '(range' → logprob: -9.324227333068848
    7. '(int' → logprob: -9.449227333068848
    8. '(list' → logprob: -9.449227333068848
    9. '(read' → logprob: -9.574227333068848
    10. '(open' → logprob: -9.824227333068848

Token 27: '_vals' (ID: 71688)
  Prédit: '_vals'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_vals' → logprob: -4.274932143744081e-05
    2. '_val' → logprob: -10.625042915344238
    3. '(vals' → logprob: -11.250042915344238
    4. '_arr' → logprob: -13.375042915344238
    5. 'vals' → logprob: -14.375042915344238
    6. ' _' → logprob: -14.375042915344238
    7. '_' → logprob: -14.625042915344238
    8. '_v' → logprob: -14.875042915344238
    9. ')' → logprob: -14.875042915344238
    10. '_va' → logprob: -15.000042915344238

Token 28: '())

' (ID: 27654)
  Prédit: '())'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '())' → logprob: -0.005319497082382441
    2. '()' → logprob: -5.505319595336914
    3. '()))' → logprob: -6.880319595336914
    4. '(),' → logprob: -9.255319595336914
    5. ')' → logprob: -10.005319595336914
    6. ' ())' → logprob: -10.255319595336914
    7. '()]' → logprob: -10.880319595336914
    8. '()),' → logprob: -11.880319595336914
    9. '(' → logprob: -13.005319595336914
    10. '();)' → logprob: -13.255319595336914

Token 29: 'res' (ID: 430)
  Prédit: 'print'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'print' → logprob: -1.089367389678955
    2. 'result' → logprob: -1.339367389678955
    3. 'if' → logprob: -1.964367389678955
    4. 'res' → logprob: -2.839367389678955
    5. 'sum' → logprob: -3.589367389678955
    6. 'for' → logprob: -3.839367389678955
    7. 'reduce' → logprob: -3.839367389678955
    8. 'n' → logprob: -4.089367389678955
    9. 'def' → logprob: -4.339367389678955
    10. 'x' → logprob: -4.464367389678955

Token 30: ' =' (ID: 314)
  Prédit: ' ='
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' =' → logprob: -0.05569702386856079
    2. '=' → logprob: -3.430696964263916
    3. 'ult' → logprob: -4.680696964263916
    4. '[' → logprob: -4.805696964263916
    5. '_' → logprob: -6.305696964263916
    6. 'ault' → logprob: -7.430696964263916
    7. '(' → logprob: -7.430696964263916
    8. 'ults' → logprob: -7.680696964263916
    9. ' ' → logprob: -8.930697441101074
    10. '[]' → logprob: -9.305697441101074

Token 31: ' ' (ID: 220)
  Prédit: 'reduce'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'reduce' → logprob: -0.03600631281733513
    2. ' reduce' → logprob: -3.661006212234497
    3. 'arr' → logprob: -4.661006450653076
    4. 'list' → logprob: -10.161005973815918
    5. 'len' → logprob: -10.786005973815918
    6. ' arr' → logprob: -10.786005973815918
    7. '0' → logprob: -10.911005973815918
    8. '1' → logprob: -11.161005973815918
    9. '[]' → logprob: -11.161005973815918
    10. '[' → logprob: -11.286005973815918

Token 32: '0' (ID: 15)
  Prédit: 'reduce'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'reduce' → logprob: -0.0012299923691898584
    2. 'arr' → logprob: -6.876229763031006
    3. 'list' → logprob: -9.251230239868164
    4. ' reduce' → logprob: -10.001230239868164
    5. 'lambda' → logprob: -11.126230239868164
    6. 'max' → logprob: -11.376230239868164
    7. 'sum' → logprob: -11.626230239868164
    8. 'min' → logprob: -11.751230239868164
    9. 'len' → logprob: -11.876230239868164
    10. '[' → logprob: -13.626230239868164

Token 33: '
' (ID: 198)
  Prédit: 'for'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'for' → logprob: -0.07521167397499084
    2. ' for' → logprob: -3.200211763381958
    3. '
' → logprob: -3.575211763381958
    4. ' ' → logprob: -6.825211524963379
    5. ' 
' → logprob: -7.325211524963379
    6. '' → logprob: -7.575211524963379
    7. ',' → logprob: -8.450211524963379
    8. '+' → logprob: -8.575211524963379
    9. '
' → logprob: -8.700211524963379
    10. '<|end|>' → logprob: -8.825211524963379

Token 34: 'for' (ID: 1938)
  Prédit: 'for'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'for' → logprob: -0.12436778098344803
    2. ' for' → logprob: -2.2493677139282227
    3. ' ' → logprob: -5.749367713928223
    4. '*' → logprob: -6.124367713928223
    5. ',' → logprob: -6.499367713928223
    6. '+' → logprob: -6.874367713928223
    7. 'i' → logprob: -7.124367713928223
    8. 'f' → logprob: -7.374367713928223
    9. 'n' → logprob: -8.124367713928223
    10. ' 
' → logprob: -8.249367713928223

Token 35: ' i' (ID: 575)
  Prédit: ' i'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' i' → logprob: -1.022174596786499
    2. ' val' → logprob: -1.397174596786499
    3. ' x' → logprob: -1.522174596786499
    4. '_' → logprob: -2.897174596786499
    5. ' ' → logprob: -2.897174596786499
    6. ' num' → logprob: -3.522174596786499
    7. ' _' → logprob: -4.022174835205078
    8. 'x' → logprob: -5.022174835205078
    9. 'i' → logprob: -5.147174835205078
    10. ' v' → logprob: -7.022174835205078

Token 36: ',y' (ID: 16103)
  Prédit: ' in'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' in' → logprob: -0.0357949323952198
    2. 'in' → logprob: -3.410794973373413
    3. ' ' → logprob: -6.285794734954834
    4. '+' → logprob: -9.660795211791992
    5. '  ' → logprob: -9.785795211791992
    6. ',' → logprob: -10.160795211791992
    7. ' ,' → logprob: -10.535795211791992
    8. 'range' → logprob: -10.910795211791992
    9. ' <' → logprob: -11.035795211791992
    10. ' range' → logprob: -11.535795211791992

Token 37: ' in' (ID: 306)
  Prédit: ' in'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' in' → logprob: -0.07300230115652084
    2. 'in' → logprob: -2.823002338409424
    3. ',' → logprob: -4.573002338409424
    4. ',in' → logprob: -8.698001861572266
    5. 'ield' → logprob: -8.823001861572266
    6. ',y' → logprob: -9.698001861572266
    7. ' ' → logprob: -9.948001861572266
    8. 'ields' → logprob: -10.198001861572266
    9. '```' → logprob: -10.323001861572266
    10. ',n' → logprob: -10.573001861572266

Token 38: ' enumerate' (ID: 29671)
  Prédit: ' enumerate'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' enumerate' → logprob: -0.026709988713264465
    2. 'enumer' → logprob: -3.651710033416748
    3. ' arr' → logprob: -8.52670955657959
    4. 'arr' → logprob: -8.65170955657959
    5. '```' → logprob: -10.77670955657959
    6. ' ' → logprob: -12.40170955657959
    7. '(en' → logprob: -13.27670955657959
    8. ' enumer' → logprob: -13.40170955657959
    9. ' en' → logprob: -13.52670955657959
    10. ' range' → logprob: -13.65170955657959

Token 39: '(arr' (ID: 19646)
  Prédit: '(arr'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(arr' → logprob: -6.749814019713085e-06
    2. '(' → logprob: -12.375006675720215
    3. 'arr' → logprob: -13.375006675720215
    4. '(range' → logprob: -15.250006675720215
    5. '(sorted' → logprob: -15.500006675720215
    6. '(en' → logprob: -16.00000762939453
    7. '<arr' → logprob: -16.25000762939453
    8. '[arr' → logprob: -17.00000762939453
    9. '(array' → logprob: -17.12500762939453
    10. '	arr' → logprob: -17.25000762939453

Token 40: '[' (ID: 58)
  Prédit: '):'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '):' → logprob: -0.019949952140450478
    2. ',' → logprob: -4.269949913024902
    3. ':' → logprob: -5.394949913024902
    4. ')' → logprob: -7.644949913024902
    5. '[:-' → logprob: -8.769949913024902
    6. '[' → logprob: -9.019949913024902
    7. '[:' → logprob: -9.269949913024902
    8. '):
' → logprob: -9.269949913024902
    9. ',:' → logprob: -9.769949913024902
    10. ' ):' → logprob: -9.894949913024902

Token 41: '1' (ID: 16)
  Prédit: '1'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '1' → logprob: -0.06842799484729767
    2. ':' → logprob: -2.8184280395507812
    3. ':-' → logprob: -5.943428039550781
    4. ':],' → logprob: -6.193428039550781
    5. '+' → logprob: -7.943428039550781
    6. ' ' → logprob: -8.193428039550781
    7. ':]' → logprob: -8.443428039550781
    8. '::-' → logprob: -8.568428039550781
    9. '2' → logprob: -8.693428039550781
    10. ']):' → logprob: -8.818428039550781

Token 42: ':' (ID: 25)
  Prédit: ':],'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ':],' → logprob: -0.5233073830604553
    2. ':' → logprob: -0.8983073830604553
    3. ':]' → logprob: -8.773307800292969
    4. '],' → logprob: -11.148307800292969
    5. ']:' → logprob: -12.148307800292969
    6. ':-' → logprob: -12.398307800292969
    7. '-' → logprob: -14.273307800292969
    8. ':].' → logprob: -14.398307800292969
    9. ' :' → logprob: -14.523307800292969
    10. '::' → logprob: -14.648307800292969

Token 43: ']):
' (ID: 51989)
  Prédit: '],'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '],' → logprob: -0.43129870295524597
    2. ':],' → logprob: -1.0562987327575684
    3. ':' → logprob: -6.431298732757568
    4. ']):' → logprob: -7.806298732757568
    5. ' ],' → logprob: -8.18129825592041
    6. ']:' → logprob: -9.05629825592041
    7. ']' → logprob: -9.93129825592041
    8. ',' → logprob: -10.30629825592041
    9. ':]' → logprob: -10.55629825592041
    10. ' ' → logprob: -10.93129825592041

Token 44: '   ' (ID: 271)
  Prédit: ' res'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' res' → logprob: -0.7320266962051392
    2. '   ' → logprob: -1.1070266962051392
    3. ' ' → logprob: -2.7320265769958496
    4. '    ' → logprob: -2.8570265769958496
    5. ' if' → logprob: -4.60702657699585
    6. ' i' → logprob: -4.60702657699585
    7. '  ' → logprob: -4.98202657699585
    8. 'res' → logprob: -5.23202657699585
    9. '+' → logprob: -5.35702657699585
    10. '0' → logprob: -5.73202657699585

Token 45: ' res' (ID: 694)
  Prédit: ' res'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' res' → logprob: -0.0428658090531826
    2. 'res' (adapté à ' res') → logprob: -3.292865753173828
    3. ' ' → logprob: -6.292865753173828
    4. ' if' → logprob: -7.042865753173828
    5. '   ' → logprob: -7.167865753173828
    6. '    ' → logprob: -7.667865753173828
    7. ' for' → logprob: -8.042865753173828
    8. '0' → logprob: -9.917865753173828
    9. ' 
' → logprob: -10.042865753173828
    10. '  ' → logprob: -10.292865753173828

Token 46: ' +=' (ID: 2757)
  Prédit: ' +='
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' +=' → logprob: -0.3971714973449707
    2. '+=' → logprob: -1.1471714973449707
    3. '=' → logprob: -5.522171497344971
    4. ' =' → logprob: -6.022171497344971
    5. ' -=' → logprob: -6.272171497344971
    6. ' ^=' → logprob: -7.022171497344971
    7. '+' → logprob: -8.022171020507812
    8. '-=' → logprob: -8.772171020507812
    9. ' |=' → logprob: -8.897171020507812
    10. '^' → logprob: -9.022171020507812

Token 47: ' abs' (ID: 8443)
  Prédit: 'y'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'y' → logprob: -0.530782163143158
    2. 'arr' → logprob: -1.4057822227478027
    3. ' y' → logprob: -2.0307822227478027
    4. ' arr' → logprob: -3.7807822227478027
    5. 'abs' → logprob: -5.655782222747803
    6. '(arr' → logprob: -6.030782222747803
    7. 'i' → logprob: -6.280782222747803
    8. ' abs' → logprob: -6.655782222747803
    9. ' (' → logprob: -7.155782222747803
    10. '(y' → logprob: -7.530782222747803

Token 48: '(y' (ID: 14684)
  Prédit: '(y'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(y' → logprob: -0.15257740020751953
    2. '(arr' → logprob: -2.0275774002075195
    3. '(' → logprob: -4.6525774002075195
    4. 'y' → logprob: -9.02757740020752
    5. '(i' → logprob: -9.40257740020752
    6. 'arr' → logprob: -9.65257740020752
    7. '((' → logprob: -10.90257740020752
    8. '(x' → logprob: -11.27757740020752
    9. '(a' → logprob: -12.40257740020752
    10. ' y' → logprob: -12.65257740020752

Token 49: ' -' (ID: 533)
  Prédit: ' -'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' -' → logprob: -0.6707046627998352
    2. '-' → logprob: -0.7957046627998352
    3. '-arr' → logprob: -3.2957046031951904
    4. ')' → logprob: -8.92070484161377
    5. ' ' → logprob: -9.42070484161377
    6. 'arr' → logprob: -9.67070484161377
    7. '   ' → logprob: -10.29570484161377
    8. ' arr' → logprob: -11.42070484161377
    9. '-)' → logprob: -12.42070484161377
    10. '  ' → logprob: -12.92070484161377

Token 50: ' arr' (ID: 1724)
  Prédit: 'arr'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'arr' → logprob: -0.14349961280822754
    2. ' arr' → logprob: -2.0184996128082275
    3. '(arr' → logprob: -8.268499374389648
    4. '	arr' → logprob: -8.518499374389648
    5. '[arr' → logprob: -9.143499374389648
    6. '   ' → logprob: -9.768499374389648
    7. ' ' → logprob: -10.018499374389648
    8. '$arr' → logprob: -10.268499374389648
    9. ')' → logprob: -10.268499374389648
    10. '<arr' → logprob: -10.393499374389648

Token 51: '[i' (ID: 1768)
  Prédit: '[i'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '[i' → logprob: -0.04313894733786583
    2. '[' → logprob: -3.1681389808654785
    3. '[len' → logprob: -9.29313850402832
    4. '[-' → logprob: -11.16813850402832
    5. '[(' → logprob: -11.66813850402832
    6. '0' → logprob: -11.91813850402832
    7. '[arr' → logprob: -12.54313850402832
    8. '[int' → logprob: -13.29313850402832
    9. '[max' → logprob: -13.29313850402832
    10. ' [' → logprob: -13.41813850402832

Token 52: '])

' (ID: 21045)
  Prédit: '])'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '])' → logprob: -0.00023393364972434938
    2. '-' → logprob: -9.50023365020752
    3. '])
' → logprob: -10.12523365020752
    4. ')' → logprob: -10.12523365020752
    5. '0' → logprob: -10.87523365020752
    6. '1' → logprob: -11.50023365020752
    7. ' ])' → logprob: -11.62523365020752
    8. ''])' → logprob: -11.75023365020752
    9. ']' → logprob: -12.37523365020752
    10. ']))' → logprob: -12.75023365020752

Token 53: 'print' (ID: 1598)
  Prédit: 'print'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'print' → logprob: -0.9536227583885193
    2. '+' → logprob: -1.203622817993164
    3. ')' → logprob: -2.078622817993164
    4. '*' → logprob: -3.078622817993164
    5. '<|end|>' → logprob: -3.328622817993164
    6. '
' → logprob: -3.453622817993164
    7. '\n' → logprob: -3.953622817993164
    8. '#' → logprob: -3.953622817993164
    9. '%' → logprob: -4.328622817993164
    10. '\' → logprob: -5.203622817993164

Token 54: '(res' (ID: 8331)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(' → logprob: -0.12700685858726501
    2. '(res' → logprob: -2.127006769180298
    3. '('' → logprob: -10.502006530761719
    4. '("("' → logprob: -11.002006530761719
    5. '()' → logprob: -12.002006530761719
    6. '(len' → logprob: -12.502006530761719
    7. '(print' → logprob: -12.502006530761719
    8. '(`' → logprob: -12.502006530761719
    9. '((' → logprob: -12.752006530761719
    10. 'res' → logprob: -12.877006530761719

Token 55: ')' (ID: 8)
  Prédit: ')'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')' → logprob: -3.4121114822482923e-06
    2. '))' → logprob: -12.875003814697266
    3. ' )' → logprob: -14.250003814697266
    4. '`)' → logprob: -17.500003814697266
    5. ')
' → logprob: -17.750003814697266
    6. ')))' → logprob: -18.250003814697266
    7. ')`' → logprob: -18.500003814697266
    8. '')' → logprob: -18.625003814697266
    9. ')}' → logprob: -19.000003814697266
    10. '())' → logprob: -19.000003814697266


RÉSUMÉ:
--------------------------------------------------------------------------------
Total des tokens analysés: 53
Tokens correctement prédits (1ère position, stricte): 20
Tokens correctement prédits (1ère position, avec adaptation): 21
Tokens correctement prédits (top 10): 38
Précision stricte (1ère position): 37.74%
Précision adaptée (1ère position): 39.62%
Précision (top 10): 71.70%
================================================================================
