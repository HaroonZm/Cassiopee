================================================================================
ANALYSE DE PRÉDICTION TOKEN PAR TOKEN (BATCH API)
Date: 2025-06-04 19:34:14
Modèle de tokenisation: gpt-4o-mini
================================================================================

SCRIPT ANALYSÉ:
--------------------------------------------------------------------------------
import sys

def __main__():
    stuff = input().split()
    aaa, bbb = int(stuff[0]), int(stuff[1])
    cnt = 0
    go = True
    while go:
        cnt += 1
        candidate = aaa * cnt
        if not (candidate % bbb):
            print(candidate)
            sys.exit(111)
__main__()
--------------------------------------------------------------------------------

RÉSULTATS D'ANALYSE TOKEN PAR TOKEN:
--------------------------------------------------------------------------------
Token 0: 'import' (ID: 561)
  → Token d'amorce (pas de prédiction)

Token 1: ' sys' (ID: 12228)
  → Token d'amorce (pas de prédiction)

Token 2: '

' (ID: 279)
  → Token d'amorce (pas de prédiction)

Token 3: 'def' (ID: 1314)
  Prédit: '.'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '.' → logprob: -0.18650174140930176
    2. '\n' → logprob: -2.1865017414093018
    3. 'import' → logprob: -3.4365017414093018
    4. '<|end|>' → logprob: -4.936501502990723
    5. '' → logprob: -5.811501502990723
    6. 'newline' → logprob: -5.936501502990723
    7. '\' → logprob: -6.061501502990723
    8. 'print' → logprob: -6.436501502990723
    9. '[' → logprob: -6.561501502990723
    10. '<|end|>' → logprob: -6.811501502990723

Token 4: ' __' (ID: 2516)
  Prédit: ' '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' ' → logprob: -0.023278674110770226
    2. ' main' → logprob: -5.148278713226318
    3. ' process' → logprob: -5.898278713226318
    4. ' space' → logprob: -6.023278713226318
    5. ' sys' → logprob: -6.273278713226318
    6. ' ' → logprob: -6.273278713226318
    7. '  ' → logprob: -7.023278713226318
    8. ' a' → logprob: -7.398278713226318
    9. ' function' → logprob: -7.398278713226318
    10. ' def' → logprob: -7.523278713226318

Token 5: 'main' (ID: 7731)
  Prédit: 'init'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'init' → logprob: -0.09573716670274734
    2. 'main' → logprob: -2.5957372188568115
    3. 'exit' → logprob: -4.970736980438232
    4. 'import' → logprob: -5.470736980438232
    5. '_' → logprob: -5.595736980438232
    6. 'name' → logprob: -6.845736980438232
    7. 'version' → logprob: -8.47073745727539
    8. 'ini' → logprob: -8.84573745727539
    9. 'next' → logprob: -9.09573745727539
    10. 'def' → logprob: -10.34573745727539

Token 6: '__' (ID: 771)
  Prédit: '__'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '__' → logprob: -0.013051050715148449
    2. '__(' → logprob: -4.7630510330200195
    3. '__:' → logprob: -5.5130510330200195
    4. '__('' → logprob: -9.01305103302002
    5. '_' → logprob: -9.51305103302002
    6. '__((' → logprob: -10.01305103302002
    7. '__("' → logprob: -10.26305103302002
    8. '__(*' → logprob: -10.38805103302002
    9. '(__' → logprob: -10.88805103302002
    10. '__(
' → logprob: -10.88805103302002

Token 7: '():
' (ID: 8595)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '(' → logprob: -0.44886666536331177
    2. '():' → logprob: -1.198866605758667
    3. ':' → logprob: -3.198866605758667
    4. '.' → logprob: -4.948866844177246
    5. '__' → logprob: -5.198866844177246
    6. '(:' → logprob: -5.698866844177246
    7. '_' → logprob: -6.823866844177246
    8. '()' → logprob: -7.573866844177246
    9. '__:' → logprob: -7.698866844177246
    10. ' (' → logprob: -8.323866844177246

Token 8: '   ' (ID: 271)
  Prédit: '():'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '():' → logprob: -0.9093868732452393
    2. ':' → logprob: -1.4093868732452393
    3. '(' → logprob: -1.5343868732452393
    4. '   ' → logprob: -2.4093868732452393
    5. '()' → logprob: -3.9093868732452393
    6. '\' → logprob: -4.90938663482666
    7. '\n' → logprob: -5.40938663482666
    8. '    ' → logprob: -6.28438663482666
    9. '(
' → logprob: -6.28438663482666
    10. '    
' → logprob: -6.40938663482666

Token 9: ' stuff' (ID: 9350)
  Prédit: 'pass'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'pass' → logprob: -0.6914111375808716
    2. ' pass' → logprob: -1.6914111375808716
    3. '   ' → logprob: -1.8164111375808716
    4. ' ' → logprob: -2.816411018371582
    5. '    ' → logprob: -3.191411018371582
    6. '(' → logprob: -4.316411018371582
    7. 'print' → logprob: -4.941411018371582
    8. 'p' → logprob: -5.566411018371582
    9. 'r' → logprob: -5.566411018371582
    10. 'i' → logprob: -5.691411018371582

Token 10: ' =' (ID: 314)
  Prédit: '.'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '.' → logprob: -0.000897885300219059
    2. '=' → logprob: -8.375898361206055
    3. ':' → logprob: -8.500898361206055
    4. '[' → logprob: -8.875898361206055
    5. ')' → logprob: -9.250898361206055
    6. ' =' → logprob: -9.750898361206055
    7. '   ' → logprob: -10.125898361206055
    8. '(' → logprob: -10.250898361206055
    9. '()' → logprob: -11.375898361206055
    10. '.
' → logprob: -11.375898361206055

Token 11: ' input' (ID: 3422)
  Prédit: ' []'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' []' → logprob: -0.10866933315992355
    2. '[]' → logprob: -2.3586692810058594
    3. ' sys' → logprob: -5.983669281005859
    4. ' ' → logprob: -6.108669281005859
    5. ' [' → logprob: -7.233669281005859
    6. ' input' → logprob: -7.733669281005859
    7. ' "' → logprob: -7.858669281005859
    8. ' {}' → logprob: -7.858669281005859
    9. '   ' → logprob: -7.983669281005859
    10. '"' → logprob: -7.983669281005859

Token 12: '().' (ID: 1454)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '(' → logprob: -0.007689916528761387
    2. '('' → logprob: -5.007689952850342
    3. '("("' → logprob: -7.382689952850342
    4. ''' → logprob: -9.382689476013184
    5. '(
' → logprob: -10.257689476013184
    6. ' ' → logprob: -10.382689476013184
    7. '()' → logprob: -10.382689476013184
    8. '"' → logprob: -10.632689476013184
    9. '("' → logprob: -10.757689476013184
    10. ' (' → logprob: -10.882689476013184

Token 13: 'split' (ID: 13627)
  Prédit: 'strip'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'strip' → logprob: -0.07979483902454376
    2. 'split' → logprob: -2.5797948837280273
    3. 'rstrip' → logprob: -7.329794883728027
    4. 'lower' → logprob: -8.704794883728027
    5. 'read' → logprob: -10.329794883728027
    6. 'replace' → logprob: -10.579794883728027
    7. 'startswith' → logprob: -10.704794883728027
    8. 'append' → logprob: -14.329794883728027
    9. 'isdigit' → logprob: -14.704794883728027
    10. 'str' → logprob: -15.204794883728027

Token 14: '()
' (ID: 1234)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '(' → logprob: -0.11785740405321121
    2. '('' → logprob: -2.3678574562072754
    3. '("("' → logprob: -4.117857456207275
    4. '()' → logprob: -7.367857456207275
    5. '(`' → logprob: -8.992856979370117
    6. '(
' → logprob: -9.242856979370117
    7. '("' → logprob: -9.492856979370117
    8. ' (' → logprob: -10.117856979370117
    9. '`' → logprob: -10.117856979370117
    10. ''' → logprob: -10.117856979370117

Token 15: '   ' (ID: 271)
  Prédit: '['
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '[' → logprob: -1.0009896755218506
    2. '.' → logprob: -1.3759896755218506
    3. '   ' → logprob: -1.8759896755218506
    4. 'if' → logprob: -3.5009896755218506
    5. ')' → logprob: -3.6259896755218506
    6. '```' → logprob: -3.6259896755218506
    7. '\n' → logprob: -3.6259896755218506
    8. ':' → logprob: -3.8759896755218506
    9. '\' → logprob: -4.25098991394043
    10. '#' → logprob: -4.50098991394043

Token 16: ' aaa' (ID: 170080)
  Prédit: '['
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '[' → logprob: -1.010378122329712
    2. '   ' → logprob: -1.260378122329712
    3. 'for' → logprob: -1.760378122329712
    4. 'if' → logprob: -2.385378122329712
    5. '.' → logprob: -3.385378122329712
    6. 'i' → logprob: -4.510377883911133
    7. ')' → logprob: -5.260377883911133
    8. ' ' → logprob: -5.510377883911133
    9. ' for' → logprob: -5.635377883911133
    10. ' if' → logprob: -5.635377883911133

Token 17: ',' (ID: 11)
  Prédit: '.'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '.' → logprob: -0.5000519752502441
    2. '[' → logprob: -1.7500519752502441
    3. '.append' → logprob: -2.375051975250244
    4. ' =' → logprob: -2.750051975250244
    5. '=' → logprob: -3.125051975250244
    6. '[:]' → logprob: -5.250051975250244
    7. '_' → logprob: -5.375051975250244
    8. '(' → logprob: -6.375051975250244
    9. '.extend' → logprob: -6.625051975250244
    10. '+' → logprob: -7.125051975250244

Token 18: ' b' (ID: 287)
  Prédit: 'bbb'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'bbb' → logprob: -0.11447867751121521
    2. ' b' → logprob: -2.239478588104248
    3. ' ' → logprob: -6.989478588104248
    4. 'stuff' → logprob: -8.614479064941406
    5. 'b' → logprob: -9.239479064941406
    6. '  ' → logprob: -9.364479064941406
    7. ' =' → logprob: -9.864479064941406
    8. 'sss' → logprob: -9.989479064941406
    9. '_b' → logprob: -10.239479064941406
    10. 'bbbb' → logprob: -10.614479064941406

Token 19: 'bb' (ID: 10029)
  Prédit: 'bb'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'bb' → logprob: -0.5921936631202698
    2. 'b' → logprob: -1.092193603515625
    3. ',' → logprob: -2.717193603515625
    4. 'bbb' → logprob: -3.467193603515625
    5. ' =' → logprob: -4.717193603515625
    6. '  ' → logprob: -6.967193603515625
    7. ' ' → logprob: -7.092193603515625
    8. '_' → logprob: -7.467193603515625
    9. '_bb' → logprob: -7.967193603515625
    10. ' ,' → logprob: -7.967193603515625

Token 20: ' =' (ID: 314)
  Prédit: ' ='
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' =' → logprob: -0.02828124351799488
    2. '=' → logprob: -3.9032812118530273
    3. ',' → logprob: -4.903281211853027
    4. ' ,' → logprob: -8.528281211853027
    5. ' ' → logprob: -9.778281211853027
    6. '  ' → logprob: -10.903281211853027
    7. '   ' → logprob: -12.403281211853027
    8. ')' → logprob: -12.778281211853027
    9. ' =
' → logprob: -13.653281211853027
    10. '_' → logprob: -13.778281211853027

Token 21: ' int' (ID: 677)
  Prédit: 'stuff'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'stuff' → logprob: -0.7169347405433655
    2. ' stuff' → logprob: -1.4669346809387207
    3. ' map' → logprob: -1.7169346809387207
    4. 'int' → logprob: -3.3419346809387207
    5. 'map' → logprob: -3.3419346809387207
    6. ' int' → logprob: -3.5919346809387207
    7. ' ' → logprob: -6.216934680938721
    8. '  ' → logprob: -7.841934680938721
    9. '   ' → logprob: -8.216935157775879
    10. '[int' → logprob: -9.466935157775879

Token 22: '(st' (ID: 4065)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(' → logprob: -0.31334424018859863
    2. '(st' → logprob: -1.3133442401885986
    3. ' (' → logprob: -10.93834400177002
    4. '(s' → logprob: -11.06334400177002
    5. ' ' → logprob: -11.68834400177002
    6. '(`' → logprob: -11.68834400177002
    7. '('' → logprob: -11.93834400177002
    8. '(space' → logprob: -12.56334400177002
    9. '(

' → logprob: -12.56334400177002
    10. '(
' → logprob: -12.93834400177002

Token 23: 'uff' (ID: 1972)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(' → logprob: -0.29188644886016846
    2. 'uff' → logprob: -1.4168864488601685
    3. ')' → logprob: -5.416886329650879
    4. '(u' → logprob: -6.291886329650879
    5. '(ff' → logprob: -7.041886329650879
    6. '[' → logprob: -7.166886329650879
    7. 'u' → logprob: -7.541886329650879
    8. ' uff' → logprob: -8.541886329650879
    9. '())' → logprob: -8.666886329650879
    10. ' ' → logprob: -8.666886329650879

Token 24: '[' (ID: 58)
  Prédit: '['
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '[' → logprob: -1.9361264946837764e-07
    2. '0' → logprob: -15.625
    3. ' [' → logprob: -17.375
    4. ')' → logprob: -17.875
    5. '[
' → logprob: -18.25
    6. '\[' → logprob: -18.25
    7. '   ' → logprob: -18.375
    8. ' ' → logprob: -18.75
    9. '```' → logprob: -19.5
    10. '(' → logprob: -19.625

Token 25: '0' (ID: 15)
  Prédit: '0'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '0' → logprob: -5.264322317088954e-05
    2. ' ' → logprob: -9.875052452087402
    3. '1' → logprob: -14.000052452087402
    4. '[' → logprob: -15.750052452087402
    5. '   ' → logprob: -16.12505340576172
    6. '2' → logprob: -16.75005340576172
    7. '  ' → logprob: -17.12505340576172
    8. ')' → logprob: -18.25005340576172
    9. ']' → logprob: -18.50005340576172
    10. '])' → logprob: -18.62505340576172

Token 26: ']),' (ID: 19560)
  Prédit: '])'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '])' → logprob: -0.387707382440567
    2. ']),' → logprob: -1.1377073526382446
    3. ']' → logprob: -7.387707233428955
    4. ')' → logprob: -9.512707710266113
    5. ']),
' → logprob: -10.387707710266113
    6. '],' → logprob: -10.387707710266113
    7. ' ])' → logprob: -10.637707710266113
    8. ' ]' → logprob: -11.637707710266113
    9. '),' → logprob: -11.762707710266113
    10. ')]' → logprob: -11.887707710266113

Token 27: ' int' (ID: 677)
  Prédit: ' int'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' int' → logprob: -0.0110511165112257
    2. 'int' → logprob: -4.511051177978516
    3. ' ' → logprob: -13.761051177978516
    4. ' ' → logprob: -14.136051177978516
    5. '=int' → logprob: -15.011051177978516
    6. '(int' → logprob: -15.136051177978516
    7. '<int' → logprob: -15.386051177978516
    8. '[int' → logprob: -15.636051177978516
    9. '  ' → logprob: -15.886051177978516
    10. ',int' → logprob: -16.011051177978516

Token 28: '(st' (ID: 4065)
  Prédit: '(st'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(st' → logprob: -0.001041382784023881
    2. '(' → logprob: -6.876041412353516
    3. ' (' → logprob: -12.001041412353516
    4. ' ' → logprob: -14.626041412353516
    5. '(s' → logprob: -14.876041412353516
    6. '	st' → logprob: -15.001041412353516
    7. '(space' → logprob: -15.126041412353516
    8. 'stuff' → logprob: -15.376041412353516
    9. '```' → logprob: -15.501041412353516
    10. '(stor' → logprob: -15.626041412353516

Token 29: 'uff' (ID: 1972)
  Prédit: 'uff'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'uff' → logprob: -7.44574936106801e-05
    2. 'ff' → logprob: -9.62507438659668
    3. '[' → logprob: -12.25007438659668
    4. 'uf' → logprob: -13.50007438659668
    5. 'fff' → logprob: -14.37507438659668
    6. '(' → logprob: -15.00007438659668
    7. 'off' → logprob: -15.25007438659668
    8. 'f' → logprob: -15.37507438659668
    9. 'aff' → logprob: -15.62507438659668
    10. ' uff' → logprob: -15.75007438659668

Token 30: '[' (ID: 58)
  Prédit: '['
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '[' → logprob: -4.320199877838604e-07
    2. '1' → logprob: -16.125
    3. '```' → logprob: -17.0
    4. '[
' → logprob: -17.25
    5. ' [' → logprob: -17.5
    6. '\[' → logprob: -17.75
    7. '   ' → logprob: -18.25
    8. ')' → logprob: -18.75
    9. ']' → logprob: -19.125
    10. '])' → logprob: -19.125

Token 31: '1' (ID: 16)
  Prédit: '1'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '1' → logprob: -0.014174672774970531
    2. '0' → logprob: -4.264174461364746
    3. ' ' → logprob: -12.139174461364746
    4. '[' → logprob: -12.764174461364746
    5. '])' → logprob: -13.639174461364746
    6. '2' → logprob: -14.514174461364746
    7. '   ' → logprob: -14.764174461364746
    8. '```' → logprob: -14.764174461364746
    9. ']' → logprob: -15.264174461364746
    10. '-' → logprob: -17.014175415039062

Token 32: '])
' (ID: 5169)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ')' → logprob: -5.676981345459353e-06
    2. ']' → logprob: -12.875005722045898
    3. '])' → logprob: -13.875005722045898
    4. ')])' → logprob: -14.250005722045898
    5. ' )' → logprob: -15.125005722045898
    6. '))' → logprob: -15.125005722045898
    7. '）' → logprob: -15.500005722045898
    8. ')
' → logprob: -16.2500057220459
    9. '   ' → logprob: -16.3750057220459
    10. ')]' → logprob: -16.5000057220459

Token 33: '   ' (ID: 271)
  Prédit: ':'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ':' → logprob: -0.2622617185115814
    2. '\n' → logprob: -2.6372616291046143
    3. '
' → logprob: -2.7622616291046143
    4. '#' → logprob: -3.7622616291046143
    5. ' ' → logprob: -4.387261867523193
    6. '<|end|>' → logprob: -4.512261867523193
    7. ')' → logprob: -4.637261867523193
    8. '\' → logprob: -4.762261867523193
    9. '   ' → logprob: -5.012261867523193
    10. '-' → logprob: -5.262261867523193

Token 34: ' cnt' (ID: 27340)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.07449814677238464
    2. '\n' → logprob: -3.949498176574707
    3. '
' → logprob: -4.074498176574707
    4. ' ' → logprob: -4.949498176574707
    5. '    
' → logprob: -5.324498176574707
    6. '<|end|>' → logprob: -5.449498176574707
    7. 'if' → logprob: -5.824498176574707
    8. ':' → logprob: -6.074498176574707
    9. '  ' → logprob: -6.074498176574707
    10. ' if' → logprob: -6.324498176574707

Token 35: ' =' (ID: 314)
  Prédit: ' ='
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' =' → logprob: -0.15047740936279297
    2. '=' → logprob: -2.025477409362793
    3. '_' → logprob: -4.900477409362793
    4. '  ' → logprob: -8.650477409362793
    5. ' +=' → logprob: -9.650477409362793
    6. ',' → logprob: -10.775477409362793
    7. ' ' → logprob: -11.400477409362793
    8. '   ' → logprob: -11.775477409362793
    9. 'inue' → logprob: -12.025477409362793
    10. '(' → logprob: -12.275477409362793

Token 36: ' ' (ID: 220)
  Prédit: '0'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '0' → logprob: -0.6942798495292664
    2. ' ' → logprob: -0.6942798495292664
    3. ' aaa' → logprob: -6.944279670715332
    4. ' ' → logprob: -9.819279670715332
    5. 'aaa' → logprob: -10.694279670715332
    6. '  ' → logprob: -10.944279670715332
    7. '1' → logprob: -11.194279670715332
    8. 'a' → logprob: -11.819279670715332
    9. 'space' → logprob: -12.194279670715332
    10. ' `' → logprob: -12.319279670715332

Token 37: '0' (ID: 15)
  Prédit: '0'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '0' → logprob: -0.02301204763352871
    2. 'aaa' → logprob: -3.898012161254883
    3. ' ' → logprob: -6.273012161254883
    4. 'bbb' → logprob: -8.648012161254883
    5. ' aaa' → logprob: -8.898012161254883
    6. '1' → logprob: -9.773012161254883
    7. '   ' → logprob: -10.023012161254883
    8. 'abs' → logprob: -10.398012161254883
    9. 'max' → logprob: -10.648012161254883
    10. '(' → logprob: -11.023012161254883

Token 38: '
' (ID: 198)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -1.1018776893615723
    2. ' ' → logprob: -1.9768776893615723
    3. ' for' → logprob: -1.9768776893615723
    4. 'for' → logprob: -2.3518776893615723
    5. '<|end|>' → logprob: -2.4768776893615723
    6. '\n' → logprob: -2.6018776893615723
    7. ' 
' → logprob: -3.6018776893615723
    8. '
' → logprob: -3.7268776893615723
    9. ':' → logprob: -4.101877689361572
    10. '\' → logprob: -4.226877689361572

Token 39: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.7182109951972961
    2. '\n' → logprob: -1.4682109355926514
    3. '<|end|>' → logprob: -1.9682109355926514
    4. '
' → logprob: -3.2182109355926514
    5. ' for' → logprob: -3.7182109355926514
    6. ' ' → logprob: -3.7182109355926514
    7. ' 
' → logprob: -4.0932111740112305
    8. 'for' → logprob: -4.8432111740112305
    9. ':' → logprob: -5.0932111740112305
    10. '\' → logprob: -5.4682111740112305

Token 40: ' go' (ID: 810)
  Prédit: 'for'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'for' → logprob: -0.09441199153661728
    2. '   ' → logprob: -2.969412088394165
    3. ' for' → logprob: -3.469412088394165
    4. '<|end|>' → logprob: -5.219411849975586
    5. ' ' → logprob: -7.344411849975586
    6. '
' → logprob: -7.844411849975586
    7. '```' → logprob: -8.719411849975586
    8. 'if' → logprob: -8.844411849975586
    9. '    
' → logprob: -9.344411849975586
    10. 'while' → logprob: -9.469411849975586

Token 41: ' =' (ID: 314)
  Prédit: 'od'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'od' → logprob: -0.6675426363945007
    2. '=' → logprob: -1.4175426959991455
    3. 'd' → logprob: -2.0425426959991455
    4. '_' → logprob: -3.0425426959991455
    5. ' =' → logprob: -4.167542457580566
    6. ' ' → logprob: -4.417542457580566
    7. 'r' → logprob: -5.042542457580566
    8. ':' → logprob: -5.167542457580566
    9. 'ing' → logprob: -5.167542457580566
    10. '(' → logprob: -5.417542457580566

Token 42: ' True' (ID: 6432)
  Prédit: ' True'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' True' → logprob: -0.2103831171989441
    2. 'True' → logprob: -1.8353831768035889
    3. ' aaa' → logprob: -4.71038293838501
    4. 'aaa' → logprob: -4.96038293838501
    5. ' ' → logprob: -5.58538293838501
    6. '1' → logprob: -5.96038293838501
    7. ' False' → logprob: -5.96038293838501
    8. '0' → logprob: -6.33538293838501
    9. 'False' → logprob: -6.33538293838501
    10. 'bbb' → logprob: -7.58538293838501

Token 43: '
' (ID: 198)
  Prédit: '
'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '
' → logprob: -0.7633033394813538
    2. '   ' → logprob: -0.7633033394813538
    3. '    
' → logprob: -4.263303279876709
    4. '<|end|>' → logprob: -4.388303279876709
    5. ' while' → logprob: -4.638303279876709
    6. '\n' → logprob: -4.638303279876709
    7. ' 
' → logprob: -4.888303279876709
    8. 'while' → logprob: -5.763303279876709
    9. '  
' → logprob: -5.888303279876709
    10. ' ' → logprob: -6.263303279876709

Token 44: '   ' (ID: 271)
  Prédit: ':'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ':' → logprob: -1.1397956609725952
    2. '
' → logprob: -1.2647956609725952
    3. '   ' → logprob: -1.7647956609725952
    4. ' ' → logprob: -2.0147957801818848
    5. '\n' → logprob: -3.6397957801818848
    6. ' 
' → logprob: -4.264795780181885
    7. '<|end|>' → logprob: -4.389795780181885
    8. '' → logprob: -4.889795780181885
    9. '    
' → logprob: -5.014795780181885
    10. ',' → logprob: -5.389795780181885

Token 45: ' while' (ID: 2049)
  Prédit: ' while'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' while' → logprob: -0.6323896050453186
    2. '   ' → logprob: -1.2573895454406738
    3. 'while' (adapté à ' while') → logprob: -2.007389545440674
    4. ' 
' → logprob: -4.507389545440674
    5. '
' → logprob: -4.882389545440674
    6. '\n' → logprob: -4.882389545440674
    7. '    
' → logprob: -5.132389545440674
    8. '	while' → logprob: -5.257389545440674
    9. ' ' → logprob: -5.757389545440674
    10. 'w' → logprob: -6.257389545440674

Token 46: ' go' (ID: 810)
  Prédit: ' go'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' go' → logprob: -0.005661886651068926
    2. 'go' → logprob: -5.755661964416504
    3. ' cnt' → logprob: -6.255661964416504
    4. 'cnt' → logprob: -9.005661964416504
    5. '(go' → logprob: -9.130661964416504
    6. ' ' → logprob: -9.255661964416504
    7. ' b' → logprob: -9.505661964416504
    8. ' aaa' → logprob: -9.630661964416504
    9. ' not' → logprob: -10.630661964416504
    10. ' True' → logprob: -11.130661964416504

Token 47: ':
' (ID: 734)
  Prédit: ':'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ':' → logprob: -4.179569077678025e-05
    2. ' and' → logprob: -11.000041961669922
    3. ':**' → logprob: -11.750041961669922
    4. ' :' → logprob: -11.875041961669922
    5. 'and' → logprob: -12.500041961669922
    6. ':
' → logprob: -13.250041961669922
    7. '):' → logprob: -13.500041961669922
    8. '():' → logprob: -13.625041961669922
    9. '>:' → logprob: -14.750041961669922
    10. '=' → logprob: -14.875041961669922

Token 48: '       ' (ID: 309)
  Prédit: ' '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' ' → logprob: -1.0865012407302856
    2. '    ' → logprob: -1.0865012407302856
    3. ' 
' → logprob: -1.9615012407302856
    4. '   ' → logprob: -2.961501121520996
    5. '       ' → logprob: -2.961501121520996
    6. '     
' → logprob: -3.336501121520996
    7. '<|end|>' → logprob: -4.461501121520996
    8. '    
' → logprob: -4.836501121520996
    9. ':' → logprob: -5.211501121520996
    10. '  ' → logprob: -5.961501121520996

Token 49: ' cnt' (ID: 27340)
  Prédit: ' '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' ' → logprob: -0.12591370940208435
    2. ' 
' → logprob: -2.875913619995117
    3. '    ' → logprob: -3.250913619995117
    4. '   ' → logprob: -4.750913619995117
    5. '     
' → logprob: -6.000913619995117
    6. 'a' → logprob: -6.250913619995117
    7. 'i' → logprob: -6.625913619995117
    8. '  ' → logprob: -6.875913619995117
    9. 'n' → logprob: -7.000913619995117
    10. 'if' → logprob: -7.250913619995117

Token 50: ' +=' (ID: 2757)
  Prédit: ' +='
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' +=' → logprob: -0.26898136734962463
    2. '+' → logprob: -1.5189813375473022
    3. '+=' → logprob: -4.393981456756592
    4. ' +' → logprob: -6.018981456756592
    5. ' ' → logprob: -6.268981456756592
    6. '<|end|>' → logprob: -9.518980979919434
    7. '=' → logprob: -10.143980979919434
    8. ' =' → logprob: -10.143980979919434
    9. ' <' → logprob: -11.393980979919434
    10. '++' → logprob: -11.518980979919434

Token 51: ' ' (ID: 220)
  Prédit: ' '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' ' → logprob: -0.23060449957847595
    2. '1' → logprob: -1.6056045293807983
    3. ' aaa' → logprob: -6.105604648590088
    4. ' b' → logprob: -6.355604648590088
    5. 'aaa' → logprob: -7.105604648590088
    6. 'bbb' → logprob: -8.48060417175293
    7. '  ' → logprob: -10.85560417175293
    8. 'int' → logprob: -11.10560417175293
    9. ' int' → logprob: -11.16810417175293
    10. '2' → logprob: -11.16810417175293

Token 52: '1' (ID: 16)
  Prédit: '1'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '1' → logprob: -0.03590327873826027
    2. 'aaa' → logprob: -3.535903215408325
    3. ' ' → logprob: -5.660903453826904
    4. 'bbb' → logprob: -6.160903453826904
    5. ' aaa' → logprob: -9.035902976989746
    6. '2' → logprob: -9.410902976989746
    7. 'abs' → logprob: -10.035902976989746
    8. '(' → logprob: -10.160902976989746
    9. 'min' → logprob: -10.160902976989746
    10. 'max' → logprob: -10.535902976989746

Token 53: '
' (ID: 198)
  Prédit: ' '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' ' → logprob: -1.4759232997894287
    2. ' if' → logprob: -1.6009232997894287
    3. '<|end|>' → logprob: -1.6009232997894287
    4. ' 
' → logprob: -1.7259232997894287
    5. '
' → logprob: -2.9759232997894287
    6. 'if' → logprob: -3.1009232997894287
    7. '   ' → logprob: -3.4759232997894287
    8. '    
' → logprob: -4.600923538208008
    9. '  
' → logprob: -4.600923538208008
    10. '   
' → logprob: -4.725923538208008

Token 54: '       ' (ID: 309)
  Prédit: ' if'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' if' → logprob: -0.573290228843689
    2. ' 
' → logprob: -1.448290228843689
    3. '<|end|>' → logprob: -2.6982903480529785
    4. 'if' → logprob: -2.9482903480529785
    5. '   ' → logprob: -3.4482903480529785
    6. ' ' → logprob: -3.8232903480529785
    7. '    ' → logprob: -4.8232903480529785
    8. '    
' → logprob: -5.0732903480529785
    9. '       ' → logprob: -5.5732903480529785
    10. '  
' → logprob: -6.0732903480529785

Token 55: ' candidate' (ID: 17098)
  Prédit: 'if'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'if' → logprob: -0.6153758764266968
    2. ' if' → logprob: -1.1153758764266968
    3. 'aaa' → logprob: -2.6153759956359863
    4. ' aaa' → logprob: -3.3653759956359863
    5. '   ' → logprob: -3.8653759956359863
    6. 'bbb' → logprob: -7.490375995635986
    7. ' ' → logprob: -7.990375995635986
    8. '    ' → logprob: -8.115375518798828
    9. ' a' → logprob: -8.240375518798828
    10. 'a' → logprob: -8.240375518798828

Token 56: ' =' (ID: 314)
  Prédit: ' ='
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' =' → logprob: -0.008697419427335262
    2. '_' → logprob: -5.633697509765625
    3. '=' → logprob: -6.008697509765625
    4. 's' → logprob: -7.133697509765625
    5. ' ' → logprob: -7.383697509765625
    6. '1' → logprob: -7.633697509765625
    7. ',' → logprob: -8.133697509765625
    8. ' +=' → logprob: -9.008697509765625
    9. '_a' → logprob: -9.633697509765625
    10. ' _' → logprob: -10.133697509765625

Token 57: ' aaa' (ID: 170080)
  Prédit: ' aaa'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' aaa' → logprob: -0.1344071328639984
    2. 'aaa' → logprob: -2.7594070434570312
    3. ' b' → logprob: -3.0094070434570312
    4. ' cnt' → logprob: -5.634407043457031
    5. 'bbb' → logprob: -5.884407043457031
    6. ' min' → logprob: -6.384407043457031
    7. ' (' → logprob: -6.759407043457031
    8. ' max' → logprob: -6.884407043457031
    9. ' ' → logprob: -7.134407043457031
    10. ' int' → logprob: -8.009407043457031

Token 58: ' *' (ID: 425)
  Prédit: ' *'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' *' → logprob: -0.5868062376976013
    2. ' +' → logprob: -1.711806297302246
    3. '*' → logprob: -2.211806297302246
    4. '+' → logprob: -2.211806297302246
    5. ' %' → logprob: -3.586806297302246
    6. '%' → logprob: -4.586806297302246
    7. ' //' → logprob: -6.336806297302246
    8. ' **' → logprob: -6.711806297302246
    9. '<|end|>' → logprob: -6.836806297302246
    10. '-' → logprob: -7.336806297302246

Token 59: ' cnt' (ID: 27340)
  Prédit: 'bbb'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'bbb' → logprob: -0.3934066891670227
    2. '2' → logprob: -2.018406629562378
    3. 'cnt' → logprob: -2.268406629562378
    4. ' cnt' → logprob: -3.143406629562378
    5. ' b' → logprob: -3.393406629562378
    6. ' ' → logprob: -5.018406867980957
    7. '3' → logprob: -6.643406867980957
    8. 'ccc' → logprob: -7.018406867980957
    9. '10' → logprob: -7.018406867980957
    10. 'aaa' → logprob: -7.643406867980957

Token 60: '
' (ID: 198)
  Prédit: ''
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False

Token 61: '       ' (ID: 309)
  Prédit: ''
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False

Token 62: ' if' (ID: 538)
  Prédit: ' if'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' if' → logprob: -0.07003835588693619
    2. 'if' (adapté à ' if') → logprob: -2.695038318634033
    3. '%' → logprob: -10.445038795471191
    4. '       ' → logprob: -10.820038795471191
    5. '
' → logprob: -11.195038795471191
    6. ' 
' → logprob: -11.695038795471191
    7. ' ' → logprob: -12.195038795471191
    8. '+' → logprob: -12.320038795471191
    9. ' %' → logprob: -12.320038795471191
    10. '<|end|>' → logprob: -13.070038795471191

Token 63: ' not' (ID: 625)
  Prédit: ' candidate'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' candidate' → logprob: -0.005295307841151953
    2. 'candidate' → logprob: -5.255295276641846
    3. ' ' → logprob: -9.880295753479004
    4. ' b' → logprob: -12.380295753479004
    5. '(candidate' → logprob: -12.755295753479004
    6. '  ' → logprob: -14.005295753479004
    7. ' candidat' → logprob: -14.255295753479004
    8. '_candidate' → logprob: -14.755295753479004
    9. ' ' → logprob: -15.130295753479004
    10. '   ' → logprob: -15.380295753479004

Token 64: ' (' (ID: 350)
  Prédit: ' candidate'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' candidate' → logprob: -0.22419270873069763
    2. ' (' → logprob: -2.5991926193237305
    3. '(candidate' → logprob: -2.7241926193237305
    4. 'candidate' → logprob: -3.0991926193237305
    5. ' b' → logprob: -4.4741926193237305
    6. '(b' → logprob: -6.2241926193237305
    7. '(' → logprob: -6.9741926193237305
    8. ' ' → logprob: -6.9741926193237305
    9. ' any' → logprob: -9.22419261932373
    10. '  ' → logprob: -9.72419261932373

Token 65: 'candidate' (ID: 97486)
  Prédit: ' candidate'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' candidate' → logprob: -0.04530508443713188
    2. 'candidate' → logprob: -3.170305013656616
    3. '(candidate' → logprob: -7.045305252075195
    4. ' b' → logprob: -7.420305252075195
    5. 'bbb' → logprob: -7.670305252075195
    6. ')' → logprob: -9.545305252075195
    7. ' (' → logprob: -9.545305252075195
    8. ' ' → logprob: -9.920305252075195
    9. ' aaa' → logprob: -10.295305252075195
    10. ' )' → logprob: -10.670305252075195

Token 66: ' %' (ID: 1851)
  Prédit: ' %'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' %' → logprob: -0.5351371765136719
    2. ' <=' → logprob: -1.5351371765136719
    3. '%' → logprob: -1.7851371765136719
    4. ' <' → logprob: -3.910137176513672
    5. '<=' → logprob: -4.910137176513672
    6. '<' → logprob: -6.160137176513672
    7. ' ' → logprob: -6.785137176513672
    8. ' >=' → logprob: -8.660137176513672
    9. ' >' → logprob: -9.660137176513672
    10. ')' → logprob: -9.660137176513672

Token 67: ' b' (ID: 287)
  Prédit: ' b'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' b' → logprob: -0.026493964716792107
    2. 'bbb' → logprob: -3.651494026184082
    3. ' ' → logprob: -9.026494026184082
    4. ')' → logprob: -10.651494026184082
    5. 'bbbb' → logprob: -11.901494026184082
    6. '  ' → logprob: -12.151494026184082
    7. '```' → logprob: -12.276494026184082
    8. 'bb' → logprob: -12.526494026184082
    9. '=' → logprob: -12.838994026184082
    10. '3' → logprob: -12.963994026184082

Token 68: 'bb' (ID: 10029)
  Prédit: 'bb'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'bb' → logprob: -2.2200749754119897e-06
    2. 'b' → logprob: -13.625001907348633
    3. 'BB' → logprob: -14.000001907348633
    4. 'bbb' → logprob: -16.000001907348633
    5. '_bb' → logprob: -17.375001907348633
    6. ' bb' → logprob: -19.000001907348633
    7. '```' → logprob: -20.000001907348633
    8. ')' → logprob: -20.375001907348633
    9. 'bbs' → logprob: -20.625001907348633
    10. 'mb' → logprob: -20.750001907348633

Token 69: '):
' (ID: 1883)
  Prédit: '):'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '):' → logprob: -0.01880037784576416
    2. ' ):' → logprob: -4.143800258636475
    3. ')' → logprob: -6.268800258636475
    4. ' ==' → logprob: -8.268800735473633
    5. ' !=' → logprob: -8.518800735473633
    6. '==' → logprob: -8.768800735473633
    7. '):
' → logprob: -8.893800735473633
    8. '!=' → logprob: -9.893800735473633
    9. ':' → logprob: -10.893800735473633
    10. ' and' → logprob: -11.143800735473633

Token 70: '           ' (ID: 352)
  Prédit: '           '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '           ' → logprob: -0.4308408200740814
    2. ':' → logprob: -1.3058408498764038
    3. ':
' → logprob: -2.5558407306671143
    4. ' :' → logprob: -7.930840969085693
    5. ' and' → logprob: -8.430840492248535
    6. ' go' → logprob: -8.430840492248535
    7. '       ' → logprob: -8.930840492248535
    8. ' :
' → logprob: -9.180840492248535
    9. '          ' → logprob: -9.430840492248535
    10. ':
' → logprob: -9.805840492248535

Token 71: ' print' (ID: 2123)
  Prédit: '           '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '           ' → logprob: -0.6234541535377502
    2. 'print' (adapté à ' print') → logprob: -1.6234540939331055
    3. ' go' → logprob: -1.9984540939331055
    4. 'go' → logprob: -2.7484540939331055
    5. ' print' → logprob: -2.9984540939331055
    6. '       ' → logprob: -4.4984540939331055
    7. ' break' → logprob: -5.7484540939331055
    8. 'break' → logprob: -6.4984540939331055
    9. '               ' → logprob: -7.6234540939331055
    10. '   ' → logprob: -7.9984540939331055

Token 72: '(candidate' (ID: 145201)
  Prédit: '(candidate'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(candidate' → logprob: -0.028404293581843376
    2. '(cnt' → logprob: -3.7784042358398438
    3. '(' → logprob: -5.278404235839844
    4. 'candidate' → logprob: -10.153404235839844
    5. '(counter' → logprob: -13.403404235839844
    6. '(count' → logprob: -13.903404235839844
    7. '(f' → logprob: -14.153404235839844
    8. ' (' → logprob: -14.153404235839844
    9. 'cnt' → logprob: -14.528404235839844
    10. ' candidate' → logprob: -14.653404235839844

Token 73: ')
' (ID: 446)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')' → logprob: -0.11626676470041275
    2. ')
' → logprob: -2.2412667274475098
    3. '           ' → logprob: -5.74126672744751
    4. '               ' → logprob: -8.741267204284668
    5. ')
' → logprob: -10.241267204284668
    6. ',' → logprob: -11.616267204284668
    7. ')

' → logprob: -12.491267204284668
    8. ' )' → logprob: -12.491267204284668
    9. ')return' → logprob: -12.741267204284668
    10. '       ' → logprob: -13.366267204284668

Token 74: '           ' (ID: 352)
  Prédit: '           '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '           ' → logprob: -0.00011629798245849088
    2. '<|end|>' → logprob: -9.750116348266602
    3. '            
' → logprob: -11.125116348266602
    4. '       ' → logprob: -11.250116348266602
    5. ',' → logprob: -12.375116348266602
    6. '   ' → logprob: -12.500116348266602
    7. '            ' → logprob: -12.500116348266602
    8. '          ' → logprob: -12.625116348266602
    9. '               ' → logprob: -12.750116348266602
    10. '
' → logprob: -12.875116348266602

Token 75: ' sys' (ID: 12228)
  Prédit: '           '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '           ' → logprob: -0.4490458369255066
    2. 'go' → logprob: -1.8240458965301514
    3. ' go' → logprob: -2.4490458965301514
    4. 'break' → logprob: -2.5740458965301514
    5. ' break' → logprob: -3.4490458965301514
    6. '       ' → logprob: -5.699045658111572
    7. 'return' → logprob: -6.199045658111572
    8. '	go' → logprob: -8.69904613494873
    9. '   ' → logprob: -9.07404613494873
    10. ' return' → logprob: -9.69904613494873

Token 76: '.exit' (ID: 27076)
  Prédit: '.'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '.' → logprob: -0.5234113335609436
    2. '.exit' → logprob: -0.8984113335609436
    3. '.stdout' → logprob: -9.273411750793457
    4. '.ex' → logprob: -9.648411750793457
    5. '.quit' → logprob: -9.648411750793457
    6. ' .' → logprob: -11.148411750793457
    7. '.EXIT' → logprob: -11.898411750793457
    8. '.setdefault' → logprob: -11.898411750793457
    9. '.e' → logprob: -12.523411750793457
    10. '.stderr' → logprob: -12.773411750793457

Token 77: '(' (ID: 7)
  Prédit: '('
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(' → logprob: -0.6932564377784729
    2. '()' → logprob: -0.6932564377784729
    3. '(
' → logprob: -9.943256378173828
    4. '()
' → logprob: -11.193256378173828
    5. '(

' → logprob: -11.443256378173828
    6. '()`' → logprob: -11.568256378173828
    7. ' ()' → logprob: -12.193256378173828
    8. '().' → logprob: -12.568256378173828
    9. '()

' → logprob: -12.693256378173828
    10. '(`' → logprob: -13.193256378173828

Token 78: '111' (ID: 8780)
  Prédit: '0'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '0' → logprob: -0.00038348292582668364
    2. ')' → logprob: -7.875383377075195
    3. '(' → logprob: -13.000383377075195
    4. ' ' → logprob: -14.250383377075195
    5. '()' → logprob: -15.125383377075195
    6. '1' → logprob: -16.000383377075195
    7. ' )' → logprob: -17.000383377075195
    8. '())' → logprob: -17.125383377075195
    9. '   ' → logprob: -18.000383377075195
    10. '))' → logprob: -18.750383377075195

Token 79: ')
' (ID: 446)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')' → logprob: -1.5928495486150496e-05
    2. '))' → logprob: -11.500016212463379
    3. ')
' → logprob: -13.125016212463379
    4. '()' → logprob: -13.875016212463379
    5. '0' → logprob: -14.500016212463379
    6. ')`' → logprob: -14.875016212463379
    7. '`)' → logprob: -15.250016212463379
    8. '   ' → logprob: -15.500016212463379
    9. ' )' → logprob: -15.500016212463379
    10. '41' → logprob: -15.500016212463379

Token 80: '__' (ID: 771)
  Prédit: ''
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False

Token 81: 'main' (ID: 7731)
  Prédit: 'main'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'main' → logprob: -0.5327662229537964
    2. 'name' → logprob: -0.9077662229537964
    3. 'if' → logprob: -5.407766342163086
    4. 'na' → logprob: -5.907766342163086
    5. 'n' → logprob: -6.657766342163086
    6. 'nam' → logprob: -7.907766342163086
    7. '_' → logprob: -8.532766342163086
    8. 'm' → logprob: -8.657766342163086
    9. 'ma' → logprob: -8.657766342163086
    10. '_main' → logprob: -9.532766342163086

Token 82: '__' (ID: 771)
  Prédit: '__'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '__' → logprob: -0.005510026589035988
    2. '__.__' → logprob: -5.380509853363037
    3. '()' → logprob: -8.255510330200195
    4. '__()
' → logprob: -8.380510330200195
    5. '__('' → logprob: -8.755510330200195
    6. '__()

' → logprob: -9.255510330200195
    7. '__.' → logprob: -9.755510330200195
    8. '_' → logprob: -10.755510330200195
    9. '__("' → logprob: -11.255510330200195
    10. '__((' → logprob: -11.630510330200195

Token 83: '()' (ID: 416)
  Prédit: '()'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '()' → logprob: -0.026478176936507225
    2. '(' → logprob: -3.6514782905578613
    3. '()
' → logprob: -9.151477813720703
    4. '(
' → logprob: -10.776477813720703
    5. '```' → logprob: -11.276477813720703
    6. '()`' → logprob: -11.401477813720703
    7. '()

' → logprob: -11.901477813720703
    8. '`()' → logprob: -12.651477813720703
    9. '();' → logprob: -13.026477813720703
    10. '().' → logprob: -13.276477813720703


RÉSUMÉ:
--------------------------------------------------------------------------------
Total des tokens analysés: 81
Tokens correctement prédits (1ère position, stricte): 34
Tokens correctement prédits (1ère position, avec adaptation): 34
Tokens correctement prédits (top 10): 62
Précision stricte (1ère position): 41.98%
Précision adaptée (1ère position): 41.98%
Précision (top 10): 76.54%
================================================================================
