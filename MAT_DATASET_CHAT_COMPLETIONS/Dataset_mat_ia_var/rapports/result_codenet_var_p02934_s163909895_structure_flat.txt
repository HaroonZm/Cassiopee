================================================================================
ANALYSE DE PRÉDICTION TOKEN PAR TOKEN (BATCH API)
Date: 2025-06-04 19:47:47
Modèle de tokenisation: gpt-4o-mini
================================================================================

SCRIPT ANALYSÉ:
--------------------------------------------------------------------------------
n = int(input())
line = list(map(int, input().split()))

total = 0
i = 0
while i < n:
    total += 1 / line[i]
    i += 1

result = 1 / total
print(result)
--------------------------------------------------------------------------------

RÉSULTATS D'ANALYSE TOKEN PAR TOKEN:
--------------------------------------------------------------------------------
Token 0: 'n' (ID: 77)
  → Token d'amorce (pas de prédiction)

Token 1: ' =' (ID: 314)
  → Token d'amorce (pas de prédiction)

Token 2: ' int' (ID: 677)
  → Token d'amorce (pas de prédiction)

Token 3: '(input' (ID: 10054)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '(' → logprob: -0.00010807292710524052
    2. '(n' → logprob: -10.250107765197754
    3. ''' → logprob: -10.625107765197754
    4. '('' → logprob: -11.375107765197754
    5. '```' → logprob: -11.625107765197754
    6. '(
' → logprob: -12.000107765197754
    7. '("("' → logprob: -12.375107765197754
    8. '()' → logprob: -12.375107765197754
    9. '`' → logprob: -12.500107765197754
    10. ')' → logprob: -13.125107765197754

Token 4: '())
' (ID: 4574)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '(' → logprob: -0.0733630508184433
    2. ')' → logprob: -2.8233630657196045
    3. '()' → logprob: -4.698362827301025
    4. '())' → logprob: -6.948362827301025
    5. '```' → logprob: -8.198363304138184
    6. '(
' → logprob: -8.448363304138184
    7. '('' → logprob: -8.948363304138184
    8. '(()' → logprob: -9.073363304138184
    9. '`' → logprob: -9.198363304138184
    10. '("("' → logprob: -9.698363304138184

Token 5: 'line' (ID: 1137)
  Prédit: 'i'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'i' → logprob: -1.0521364212036133
    2. 'for' → logprob: -1.3021364212036133
    3. 'if' → logprob: -1.4271364212036133
    4. 's' → logprob: -3.1771364212036133
    5. 'f' → logprob: -4.177136421203613
    6. 'x' → logprob: -4.177136421203613
    7. 'a' → logprob: -4.552136421203613
    8. ')' → logprob: -4.677136421203613
    9. ' ' → logprob: -4.677136421203613
    10. '*' → logprob: -4.927136421203613

Token 6: ' =' (ID: 314)
  Prédit: 's'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 's' → logprob: -0.560080885887146
    2. ' =' → logprob: -1.185080885887146
    3. '=' → logprob: -2.1850810050964355
    4. '_' → logprob: -4.6850810050964355
    5. '.' → logprob: -7.8100810050964355
    6. ' ' → logprob: -8.435080528259277
    7. '_s' → logprob: -9.060080528259277
    8. '.strip' → logprob: -9.185080528259277
    9. ')' → logprob: -9.435080528259277
    10. 'a' → logprob: -9.560080528259277

Token 7: ' list' (ID: 1562)
  Prédit: 'input'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'input' → logprob: -0.4311541020870209
    2. ' input' → logprob: -1.1811541318893433
    3. '""' → logprob: -4.056154251098633
    4. '"' → logprob: -4.556154251098633
    5. ''' → logprob: -5.056154251098633
    6. '''' → logprob: -5.556154251098633
    7. '[]' → logprob: -6.181154251098633
    8. ' []' → logprob: -7.056154251098633
    9. ''s' → logprob: -7.181154251098633
    10. ' ""' → logprob: -8.181154251098633

Token 8: '(map' (ID: 16946)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(' → logprob: -0.005608303938060999
    2. '(range' → logprob: -5.505608081817627
    3. '(line' → logprob: -7.255608081817627
    4. '(input' → logprob: -8.255608558654785
    5. '(map' → logprob: -8.880608558654785
    6. '()' → logprob: -9.130608558654785
    7. '("("' → logprob: -9.630608558654785
    8. '(
' → logprob: -10.255608558654785
    9. '(open' → logprob: -10.630608558654785
    10. '('' → logprob: -10.630608558654785

Token 9: '(int' (ID: 2742)
  Prédit: '(int'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(int' → logprob: -0.006801575422286987
    2. '(' → logprob: -5.131801605224609
    3. '(str' → logprob: -8.25680160522461
    4. 'int' → logprob: -8.38180160522461
    5. '(input' → logprob: -9.13180160522461
    6. '<int' → logprob: -9.25680160522461
    7. '(lambda' → logprob: -9.38180160522461
    8. '=int' → logprob: -10.25680160522461
    9. ')' → logprob: -10.88180160522461
    10. '[int' → logprob: -11.25680160522461

Token 10: ',' (ID: 11)
  Prédit: '(input'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(input' → logprob: -0.22314287722110748
    2. '(' → logprob: -1.7231428623199463
    3. '))' → logprob: -4.348143100738525
    4. ')' → logprob: -5.598143100738525
    5. '(line' → logprob: -6.598143100738525
    6. '()))' → logprob: -7.973143100738525
    7. '(range' → logprob: -8.098142623901367
    8. '(
' → logprob: -8.098142623901367
    9. ',' → logprob: -8.223142623901367
    10. ',input' → logprob: -8.473142623901367

Token 11: ' input' (ID: 3422)
  Prédit: 'input'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'input' → logprob: -0.023256074637174606
    2. ' input' → logprob: -3.7732560634613037
    3. '(input' → logprob: -11.523256301879883
    4. ',input' → logprob: -15.023256301879883
    5. ')' → logprob: -15.398256301879883
    6. '	input' → logprob: -16.523256301879883
    7. 'str' → logprob: -16.898256301879883
    8. '=input' → logprob: -17.148256301879883
    9. 'list' → logprob: -17.523256301879883
    10. '[input' → logprob: -17.773256301879883

Token 12: '().' (ID: 1454)
  Prédit: '()))'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '()))' → logprob: -0.38796281814575195
    2. '()' → logprob: -1.637962818145752
    3. '())' → logprob: -2.137962818145752
    4. '().' → logprob: -5.012962818145752
    5. '()));' → logprob: -6.762962818145752
    6. '(' → logprob: -7.887962818145752
    7. ')' → logprob: -8.262962341308594
    8. '))' → logprob: -8.637962341308594
    9. '()>' → logprob: -8.762962341308594
    10. '())))' → logprob: -8.887962341308594

Token 13: 'split' (ID: 13627)
  Prédit: 'split'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'split' → logprob: -0.002499205991625786
    2. 'strip' → logprob: -6.002499103546143
    3. 'rstrip' → logprob: -10.7524995803833
    4. '(split' → logprob: -13.7524995803833
    5. ' split' → logprob: -13.8774995803833
    6. ')' → logprob: -16.252498626708984
    7. 'spl' → logprob: -17.002498626708984
    8. 's' → logprob: -17.877498626708984
    9. 'replace' → logprob: -18.627498626708984
    10. ' strip' → logprob: -18.752498626708984

Token 14: '()))

' (ID: 125972)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ')' → logprob: -0.9704865217208862
    2. '))' → logprob: -0.9704865217208862
    3. '()))' → logprob: -2.095486640930176
    4. '(' → logprob: -2.720486640930176
    5. '())' → logprob: -3.095486640930176
    6. '()' → logprob: -5.845486640930176
    7. '('' → logprob: -5.845486640930176
    8. ')))' → logprob: -6.720486640930176
    9. '(','' → logprob: -8.345486640930176
    10. ''))' → logprob: -8.595486640930176

Token 15: 'total' (ID: 9577)
  Prédit: 's'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 's' → logprob: -0.6694682836532593
    2. 'c' → logprob: -2.044468402862549
    3. 'for' → logprob: -2.419468402862549
    4. 'sum' → logprob: -2.544468402862549
    5. 'max' → logprob: -2.794468402862549
    6. 'count' → logprob: -3.169468402862549
    7. 'result' → logprob: -3.669468402862549
    8. 'm' → logprob: -4.544468402862549
    9. 'total' → logprob: -4.669468402862549
    10. 'a' → logprob: -5.169468402862549

Token 16: ' =' (ID: 314)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '(' → logprob: -0.01834050565958023
    2. '_' → logprob: -4.143340587615967
    3. ')' → logprob: -7.393340587615967
    4. '_sum' → logprob: -7.893340587615967
    5. '+' → logprob: -8.143340110778809
    6. '()' → logprob: -8.643340110778809
    7. '[' → logprob: -8.768340110778809
    8. '_count' → logprob: -9.393340110778809
    9. '_total' → logprob: -9.518340110778809
    10. '_space' → logprob: -9.518340110778809

Token 17: ' ' (ID: 220)
  Prédit: ' sum'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' sum' → logprob: -0.22509409487247467
    2. '0' → logprob: -2.2250940799713135
    3. 'sum' → logprob: -2.6000940799713135
    4. ' ' → logprob: -4.100094318389893
    5. ' line' → logprob: -6.100094318389893
    6. 'line' → logprob: -8.225093841552734
    7. ' max' → logprob: -9.850093841552734
    8. '(sum' → logprob: -10.100093841552734
    9. ' len' → logprob: -10.975093841552734
    10. '1' → logprob: -11.475093841552734

Token 18: '0' (ID: 15)
  Prédit: 'sum'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'sum' → logprob: -0.06450554728507996
    2. '0' → logprob: -2.8145055770874023
    3. 'line' → logprob: -6.064505577087402
    4. ' sum' → logprob: -8.939505577087402
    5. 'max' → logprob: -9.814505577087402
    6. 'len' → logprob: -11.689505577087402
    7. ' ' → logprob: -11.939505577087402
    8. '(sum' → logprob: -12.314505577087402
    9. '1' → logprob: -12.939505577087402
    10. ' line' → logprob: -14.439505577087402

Token 19: '
' (ID: 198)
  Prédit: 'for'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'for' → logprob: -0.00011880126112373546
    2. ' for' → logprob: -9.75011920928955
    3. '
' → logprob: -10.12511920928955
    4. '```' → logprob: -11.50011920928955
    5. '\n' → logprob: -12.00011920928955
    6. 'i' → logprob: -13.12511920928955
    7. '' → logprob: -14.62511920928955
    8. '`' → logprob: -14.62511920928955
    9. 'n' → logprob: -15.12511920928955
    10. 'f' → logprob: -15.37511920928955

Token 20: 'i' (ID: 72)
  Prédit: 'for'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'for' → logprob: -1.5690089639974758e-05
    2. '```' → logprob: -11.250015258789062
    3. ' for' → logprob: -13.375015258789062
    4. '
' → logprob: -14.375015258789062
    5. '`' → logprob: -15.750015258789062
    6. '\n' → logprob: -16.000015258789062
    7. '``' → logprob: -16.250015258789062
    8. 'i' → logprob: -16.750015258789062
    9. 'For' → logprob: -17.000015258789062
    10. '	for' → logprob: -17.250015258789062

Token 21: ' =' (ID: 314)
  Prédit: '+'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '+' → logprob: -0.5400442481040955
    2. ' +=' → logprob: -1.9150443077087402
    3. ' ' → logprob: -2.1650443077087402
    4. ' =' → logprob: -2.6650443077087402
    5. '=' → logprob: -2.6650443077087402
    6. 'n' → logprob: -5.16504430770874
    7. ' +' → logprob: -5.54004430770874
    8. '+=' → logprob: -6.04004430770874
    9. ' <' → logprob: -7.29004430770874
    10. '[' → logprob: -7.41504430770874

Token 22: ' ' (ID: 220)
  Prédit: '0'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '0' → logprob: -0.14440913498401642
    2. ' ' → logprob: -2.0194091796875
    3. '1' → logprob: -6.3944091796875
    4. '2' → logprob: -10.3944091796875
    5. 'n' → logprob: -11.7694091796875
    6. ' n' → logprob: -12.0194091796875
    7. '+' → logprob: -12.6444091796875
    8. ' i' → logprob: -13.3319091796875
    9. 'i' → logprob: -13.6444091796875
    10. '3' → logprob: -13.8319091796875

Token 23: '0' (ID: 15)
  Prédit: '0'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '0' → logprob: -0.012615593150258064
    2. ' ' → logprob: -4.51261568069458
    3. '1' → logprob: -6.51261568069458
    4. 'n' → logprob: -10.137615203857422
    5. '2' → logprob: -10.637615203857422
    6. ' n' → logprob: -12.387615203857422
    7. '+' → logprob: -13.012615203857422
    8. '-' → logprob: -13.200115203857422
    9. '3' → logprob: -13.450115203857422
    10. 'i' → logprob: -13.825115203857422

Token 24: '
' (ID: 198)
  Prédit: 'while'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'while' → logprob: -0.10932250320911407
    2. ' while' → logprob: -2.4843225479125977
    3. ' ' → logprob: -5.359322547912598
    4. '\n' → logprob: -5.734322547912598
    5. '
' → logprob: -6.109322547912598
    6. '```' → logprob: -6.234322547912598
    7. '\' → logprob: -6.359322547912598
    8. ':' → logprob: -6.859322547912598
    9. '<|end|>' → logprob: -7.109322547912598
    10. '+' → logprob: -7.359322547912598

Token 25: 'while' (ID: 7032)
  Prédit: 'while'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'while' → logprob: -0.21619190275669098
    2. ' while' → logprob: -2.0911920070648193
    3. ' ' → logprob: -3.5911920070648193
    4. '+' → logprob: -3.7161920070648193
    5. '<|end|>' → logprob: -5.46619176864624
    6. ')' → logprob: -5.96619176864624
    7. '
' → logprob: -6.21619176864624
    8. ':' → logprob: -6.46619176864624
    9. '\n' → logprob: -6.46619176864624
    10. '```' → logprob: -6.59119176864624

Token 26: ' i' (ID: 575)
  Prédit: ' i'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' i' → logprob: -0.009973756037652493
    2. 'i' → logprob: -4.634973526000977
    3. ' ' → logprob: -8.634973526000977
    4. ' ' → logprob: -10.634973526000977
    5. '(i' → logprob: -12.759973526000977
    6. ' (' → logprob: -12.884973526000977
    7. ' n' → logprob: -12.884973526000977
    8. '	i' → logprob: -13.509973526000977
    9. '<|end|>' → logprob: -13.634973526000977
    10. ' True' → logprob: -13.884973526000977

Token 27: ' <' (ID: 464)
  Prédit: ' <'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' <' → logprob: -0.040566470474004745
    2. '<' → logprob: -3.2905664443969727
    3. ' <=' → logprob: -6.040566444396973
    4. '<=' → logprob: -9.540566444396973
    5. ' ' → logprob: -9.915566444396973
    6. '<len' → logprob: -11.915566444396973
    7. ' <
' → logprob: -12.540566444396973
    8. '<n' → logprob: -12.540566444396973
    9. '+' → logprob: -13.540566444396973
    10. '<size' → logprob: -13.665566444396973

Token 28: ' n' (ID: 297)
  Prédit: ' n'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' n' → logprob: -0.16062408685684204
    2. 'n' → logprob: -1.9106240272521973
    3. ' len' → logprob: -8.660624504089355
    4. ' ' → logprob: -9.035624504089355
    5. 'len' → logprob: -9.160624504089355
    6. '	n' → logprob: -14.535624504089355
    7. ' ' → logprob: -14.660624504089355
    8. '  ' → logprob: -14.910624504089355
    9. '(n' → logprob: -15.660624504089355
    10. '   ' → logprob: -16.28562355041504

Token 29: ':
' (ID: 734)
  Prédit: ':'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ':' → logprob: -0.0018387987511232495
    2. ' :' → logprob: -6.376838684082031
    3. ':
' → logprob: -9.751838684082031
    4. '+:' → logprob: -9.876838684082031
    5. ':**' → logprob: -11.626838684082031
    6. '+' → logprob: -12.126838684082031
    7. ' ' → logprob: -12.376838684082031
    8. ' and' → logprob: -12.751838684082031
    9. ' :
' → logprob: -13.626838684082031
    10. '   ' → logprob: -13.751838684082031

Token 30: '   ' (ID: 271)
  Prédit: ' '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' ' → logprob: -0.3706689178943634
    2. '   ' → logprob: -1.495668888092041
    3. ' total' → logprob: -3.495668888092041
    4. ' if' → logprob: -4.120668888092041
    5. 'total' → logprob: -4.620668888092041
    6. ' 
' → logprob: -4.745668888092041
    7. '    ' → logprob: -5.370668888092041
    8. '   
' → logprob: -5.620668888092041
    9. '    
' → logprob: -5.745668888092041
    10. '     
' → logprob: -6.245668888092041

Token 31: ' total' (ID: 3609)
  Prédit: 'total'
  Correct (stricte): False
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'total' (adapté à ' total') → logprob: -0.5665600299835205
    2. 'if' → logprob: -0.9415600299835205
    3. '   ' → logprob: -3.9415600299835205
    4. ' if' → logprob: -4.316559791564941
    5. ' total' → logprob: -4.941559791564941
    6. 'line' → logprob: -6.316559791564941
    7. ' ' → logprob: -8.691559791564941
    8. ' line' → logprob: -9.316559791564941
    9. 'i' → logprob: -9.316559791564941
    10. 'for' → logprob: -9.941559791564941

Token 32: ' +=' (ID: 2757)
  Prédit: ' +='
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' +=' → logprob: -0.0036604066845029593
    2. '+=' → logprob: -5.628660202026367
    3. '+' → logprob: -10.003660202026367
    4. ' +' → logprob: -11.878660202026367
    5. ' =' → logprob: -12.878660202026367
    6. ' ' → logprob: -13.003660202026367
    7. '=' → logprob: -14.253660202026367
    8. '   ' → logprob: -14.503660202026367
    9. ' -=' → logprob: -14.878660202026367
    10. '    ' → logprob: -15.003660202026367

Token 33: ' ' (ID: 220)
  Prédit: ' line'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' line' → logprob: -0.5231955647468567
    2. 'line' → logprob: -0.8981955647468567
    3. ' ' → logprob: -9.898195266723633
    4. '[line' → logprob: -12.398195266723633
    5. '   ' → logprob: -12.773195266723633
    6. '	line' → logprob: -12.773195266723633
    7. ' i' → logprob: -12.898195266723633
    8. '(line' → logprob: -12.898195266723633
    9. '1' → logprob: -13.898195266723633
    10. '=line' → logprob: -14.273195266723633

Token 34: '1' (ID: 16)
  Prédit: 'line'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'line' → logprob: -0.0008074867073446512
    2. ' line' → logprob: -7.125807285308838
    3. '[line' → logprob: -14.625807762145996
    4. '(line' → logprob: -14.750807762145996
    5. '   ' → logprob: -14.875807762145996
    6. '	line' → logprob: -15.000807762145996
    7. ' ' → logprob: -15.125807762145996
    8. 'list' → logprob: -15.750807762145996
    9. '1' → logprob: -15.750807762145996
    10. 'i' → logprob: -15.750807762145996

Token 35: ' /' (ID: 820)
  Prédit: '
'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '
' → logprob: -1.1532365083694458
    2. ' ' → logprob: -1.2782365083694458
    3. '+' → logprob: -2.4032363891601562
    4. '0' → logprob: -2.4032363891601562
    5. 'line' → logprob: -3.0282363891601562
    6. ' line' → logprob: -3.1532363891601562
    7. ' if' → logprob: -4.028236389160156
    8. ' +' → logprob: -4.028236389160156
    9. '<|end|>' → logprob: -4.028236389160156
    10. '*' → logprob: -4.153236389160156

Token 36: ' line' (ID: 2543)
  Prédit: 'line'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'line' → logprob: -0.0012385640293359756
    2. '(line' → logprob: -6.7512383460998535
    3. ' line' → logprob: -9.876238822937012
    4. '2' → logprob: -12.001238822937012
    5. '(' → logprob: -12.126238822937012
    6. '[line' → logprob: -13.876238822937012
    7. 'float' → logprob: -14.376238822937012
    8. 'max' → logprob: -14.626238822937012
    9. ' (' → logprob: -14.626238822937012
    10. 'int' → logprob: -15.001238822937012

Token 37: '[i' (ID: 1768)
  Prédit: '[i'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '[i' → logprob: -0.16030353307724
    2. '[' → logprob: -1.9103035926818848
    3. ' [' → logprob: -11.160303115844727
    4. '```' → logprob: -11.285303115844727
    5. '[s' → logprob: -11.535303115844727
    6. '[j' → logprob: -11.910303115844727
    7. '[
' → logprob: -12.035303115844727
    8. '\[' → logprob: -12.535303115844727
    9. '[I' → logprob: -12.660303115844727
    10. '[n' → logprob: -12.910303115844727

Token 38: ']
' (ID: 1592)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ')' → logprob: -0.0025194191839545965
    2. ']' → logprob: -6.377519607543945
    3. '[i' → logprob: -8.002519607543945
    4. ')
' → logprob: -8.377519607543945
    5. '])' → logprob: -9.377519607543945
    6. '[' → logprob: -9.627519607543945
    7. ' )' → logprob: -10.127519607543945
    8. '+' → logprob: -10.627519607543945
    9. '*' → logprob: -12.127519607543945
    10. ')i' → logprob: -12.377519607543945

Token 39: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.6275586485862732
    2. 'i' → logprob: -1.252558708190918
    3. ' i' → logprob: -1.877558708190918
    4. '    
' → logprob: -4.752558708190918
    5. '
' → logprob: -5.127558708190918
    6. '\n' → logprob: -6.127558708190918
    7. '+' → logprob: -6.252558708190918
    8. ' ' → logprob: -6.627558708190918
    9. '  ' → logprob: -6.752558708190918
    10. ')' → logprob: -7.002558708190918

Token 40: ' i' (ID: 575)
  Prédit: ' i'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' i' → logprob: -0.7213245034217834
    2. 'i' (adapté à ' i') → logprob: -0.8463245034217834
    3. '   ' → logprob: -2.4713244438171387
    4. '  ' → logprob: -9.096324920654297
    5. ' ' → logprob: -9.221324920654297
    6. '	i' → logprob: -9.346324920654297
    7. ')' → logprob: -9.971324920654297
    8. '    ' → logprob: -10.471324920654297
    9. '    
' → logprob: -10.721324920654297
    10. '+' → logprob: -11.721324920654297

Token 41: ' +=' (ID: 2757)
  Prédit: '+'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '+' → logprob: -0.38778001070022583
    2. '+=' → logprob: -1.262779951095581
    3. ' +=' → logprob: -3.262779951095581
    4. '++' → logprob: -9.01278018951416
    5. ' +' → logprob: -9.63778018951416
    6. '+++' → logprob: -10.26278018951416
    7. '=' → logprob: -10.38778018951416
    8. '<|end|>' → logprob: -10.76278018951416
    9. '+='' → logprob: -11.88778018951416
    10. '+="' → logprob: -12.51278018951416

Token 42: ' ' (ID: 220)
  Prédit: '1'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '1' → logprob: -7.941850526549388e-06
    2. ' ' → logprob: -11.750007629394531
    3. '```' → logprob: -18.75000762939453
    4. '+' → logprob: -18.87500762939453
    5. '   ' → logprob: -19.00000762939453
    6. '2' → logprob: -19.75000762939453
    7. '0' → logprob: -20.12500762939453
    8. '<|end|>' → logprob: -20.75000762939453
    9. '１' → logprob: -21.62500762939453
    10. '4' → logprob: -21.75000762939453

Token 43: '1' (ID: 16)
  Prédit: '1'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '1' → logprob: -2.816093228830141e-06
    2. ' ' → logprob: -12.87500286102295
    3. '```' → logprob: -16.125001907348633
    4. '2' → logprob: -17.000001907348633
    5. '+' → logprob: -18.062501907348633
    6. '   ' → logprob: -18.187501907348633
    7. '0' → logprob: -18.687501907348633
    8. '<|end|>' → logprob: -19.062501907348633
    9. '3' → logprob: -19.375001907348633
    10. '１' → logprob: -19.687501907348633

Token 44: '

' (ID: 279)
  Prédit: 'print'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'print' → logprob: -0.5657069087028503
    2. '
' → logprob: -1.0657069683074951
    3. 'result' → logprob: -3.315706968307495
    4. ')' → logprob: -4.315706729888916
    5. '/' → logprob: -4.940706729888916
    6. 'h' → logprob: -5.065706729888916
    7. 'n' → logprob: -5.190706729888916
    8. '\n' → logprob: -5.940706729888916
    9. '#' → logprob: -6.315706729888916
    10. ')
' → logprob: -6.815706729888916

Token 45: 'result' (ID: 2521)
  Prédit: 'print'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'print' → logprob: -0.563615083694458
    2. 'result' → logprob: -0.938615083694458
    3. 'h' → logprob: -4.188614845275879
    4. 'harm' → logprob: -4.813614845275879
    5. 'average' → logprob: -4.813614845275879
    6. 'res' → logprob: -5.938614845275879
    7. 'answer' → logprob: -5.938614845275879
    8. 'avg' → logprob: -7.313614845275879
    9. 'total' → logprob: -7.563614845275879
    10. 'ans' → logprob: -7.813614845275879

Token 46: ' =' (ID: 314)
  Prédit: ' ='
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' =' → logprob: -0.011061973869800568
    2. '=' → logprob: -4.511062145233154
    3. 's' → logprob: -11.261061668395996
    4. ')' → logprob: -14.886061668395996
    5. '_' → logprob: -15.511061668395996
    6. ' ' → logprob: -15.886061668395996
    7. ' =
' → logprob: -16.386062622070312
    8. '.' → logprob: -16.511062622070312
    9. ' +=' → logprob: -16.636062622070312
    10. '```' → logprob: -16.636062622070312

Token 47: ' ' (ID: 220)
  Prédit: '1'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '1' → logprob: -0.04864652454853058
    2. ' ' → logprob: -3.0486464500427246
    3. 'total' → logprob: -10.548646926879883
    4. 'int' → logprob: -11.048646926879883
    5. 'round' → logprob: -11.673646926879883
    6. '(' → logprob: -13.298646926879883
    7. 'len' → logprob: -13.298646926879883
    8. ' total' → logprob: -13.673646926879883
    9. '100' → logprob: -14.048646926879883
    10. 'n' → logprob: -14.798646926879883

Token 48: '1' (ID: 16)
  Prédit: '1'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '1' → logprob: -0.005423958413302898
    2. 'total' → logprob: -5.5054240226745605
    3. 'n' → logprob: -7.0054240226745605
    4. 'len' → logprob: -7.8804240226745605
    5. ' ' → logprob: -10.380423545837402
    6. 'round' → logprob: -11.130423545837402
    7. '(' → logprob: -12.505423545837402
    8. '100' → logprob: -13.130423545837402
    9. '```' → logprob: -13.630423545837402
    10. ' total' → logprob: -14.005423545837402

Token 49: ' /' (ID: 820)
  Prédit: '/'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '/' → logprob: -0.005246918182820082
    2. ' /' → logprob: -5.255247116088867
    3. '/
' → logprob: -11.755247116088867
    4. 'total' → logprob: -13.880247116088867
    5. '/(' → logprob: -13.880247116088867
    6. ' /
' → logprob: -14.380247116088867
    7. ' ' → logprob: -14.630247116088867
    8. '/
/' → logprob: -14.880247116088867
    9. '/result' → logprob: -14.880247116088867
    10. '<|end|>' → logprob: -14.880247116088867

Token 50: ' total' (ID: 3609)
  Prédit: 'total'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'total' → logprob: -6.2729995988775045e-06
    2. ' total' → logprob: -12.000006675720215
    3. 'tot' → logprob: -19.7500057220459
    4. '(total' → logprob: -20.1250057220459
    5. 'result' → logprob: -21.1250057220459
    6. '   ' → logprob: -21.8750057220459
    7. 't' → logprob: -22.0000057220459
    8. '_total' → logprob: -22.1250057220459
    9. '	total' → logprob: -22.1250057220459
    10. 'to' → logprob: -22.3750057220459

Token 51: '
' (ID: 198)
  Prédit: 'print'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'print' → logprob: -0.0029229221399873495
    2. '<|end|>' → logprob: -6.502923011779785
    3. '
' → logprob: -6.752923011779785
    4. ' print' → logprob: -8.877923011779785
    5. ')' → logprob: -9.627923011779785
    6. '\n' → logprob: -10.752923011779785
    7. '```' → logprob: -12.002923011779785
    8. '#print' → logprob: -12.377923011779785
    9. '<|end|>' → logprob: -12.877923011779785
    10. '#' → logprob: -13.002923011779785

Token 52: 'print' (ID: 1598)
  Prédit: 'print'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'print' → logprob: -1.1517960956552997e-05
    2. '<|end|>' → logprob: -12.125011444091797
    3. ' print' → logprob: -12.375011444091797
    4. '```' → logprob: -13.375011444091797
    5. '
' → logprob: -15.625011444091797
    6. '#print' → logprob: -16.750011444091797
    7. '\' → logprob: -17.500011444091797
    8. ')' → logprob: -17.750011444091797
    9. 'for' → logprob: -18.125011444091797
    10. '.print' → logprob: -18.375011444091797

Token 53: '(result' (ID: 8111)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(' → logprob: -0.3868781626224518
    2. '(result' → logprob: -1.1368781328201294
    3. 'result' → logprob: -13.38687801361084
    4. '()' → logprob: -14.01187801361084
    5. '(res' → logprob: -14.13687801361084
    6. '(
' → logprob: -14.13687801361084
    7. '('' → logprob: -14.26187801361084
    8. '("("' → logprob: -14.51187801361084
    9. ' (' → logprob: -14.63687801361084
    10. '((' → logprob: -15.13687801361084

Token 54: ')' (ID: 8)
  Prédit: ')'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')' → logprob: -2.696889623621246e-06
    2. ' )' → logprob: -13.62500286102295
    3. '))' → logprob: -13.75000286102295
    4. ')`' → logprob: -15.25000286102295
    5. ')
' → logprob: -15.75000286102295
    6. ')}' → logprob: -17.125001907348633
    7. ')#' → logprob: -18.750001907348633
    8. '`)' → logprob: -18.750001907348633
    9. ')**' → logprob: -18.875001907348633
    10. '}' → logprob: -19.000001907348633


RÉSUMÉ:
--------------------------------------------------------------------------------
Total des tokens analysés: 52
Tokens correctement prédits (1ère position, stricte): 16
Tokens correctement prédits (1ère position, avec adaptation): 17
Tokens correctement prédits (top 10): 43
Précision stricte (1ère position): 30.77%
Précision adaptée (1ère position): 32.69%
Précision (top 10): 82.69%
================================================================================
