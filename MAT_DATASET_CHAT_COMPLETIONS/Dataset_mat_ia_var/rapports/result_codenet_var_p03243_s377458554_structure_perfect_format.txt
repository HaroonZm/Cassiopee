================================================================================
ANALYSE DE PRÉDICTION TOKEN PAR TOKEN (BATCH API)
Date: 2025-06-04 20:07:11
Modèle de tokenisation: gpt-4o-mini
================================================================================

SCRIPT ANALYSÉ:
--------------------------------------------------------------------------------
n = int(input())
a = 111 * (((n - 1) // 111) + 1)
print(a)
--------------------------------------------------------------------------------

RÉSULTATS D'ANALYSE TOKEN PAR TOKEN:
--------------------------------------------------------------------------------
Token 0: 'n' (ID: 77)
  → Token d'amorce (pas de prédiction)

Token 1: ' =' (ID: 314)
  → Token d'amorce (pas de prédiction)

Token 2: ' int' (ID: 677)
  → Token d'amorce (pas de prédiction)

Token 3: '(input' (ID: 10054)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '(' → logprob: -0.0004278083215467632
    2. ''' → logprob: -8.625428199768066
    3. '('' → logprob: -9.375428199768066
    4. '(n' → logprob: -9.875428199768066
    5. '```' → logprob: -10.375428199768066
    6. '`' → logprob: -10.750428199768066
    7. '("("' → logprob: -11.125428199768066
    8. '(
' → logprob: -11.125428199768066
    9. ')' → logprob: -11.750428199768066
    10. '()' → logprob: -12.250428199768066

Token 4: '())
' (ID: 4574)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '(' → logprob: -0.11869344860315323
    2. ')' → logprob: -2.2436933517456055
    3. '()' → logprob: -5.3686933517456055
    4. '())' → logprob: -7.4936933517456055
    5. '(
' → logprob: -8.243693351745605
    6. '```' → logprob: -9.993693351745605
    7. '(

' → logprob: -10.368693351745605
    8. '('' → logprob: -10.493693351745605
    9. ''' → logprob: -10.618693351745605
    10. '(n' → logprob: -10.868693351745605

Token 5: 'a' (ID: 64)
  Prédit: 'i'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'i' → logprob: -0.8081278204917908
    2. 'if' → logprob: -1.4331278800964355
    3. 'for' → logprob: -1.9331278800964355
    4. 's' → logprob: -2.3081278800964355
    5. 'f' → logprob: -4.0581278800964355
    6. 'x' → logprob: -4.4331278800964355
    7. 'a' → logprob: -5.0581278800964355
    8. ' ' → logprob: -5.3081278800964355
    9. '\n' → logprob: -5.6831278800964355
    10. '`' → logprob: -5.6831278800964355

Token 6: ' =' (ID: 314)
  Prédit: '['
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '[' → logprob: -0.0034722555428743362
    2. '[a' → logprob: -6.503472328186035
    3. 'a' → logprob: -7.628472328186035
    4. '[i' → logprob: -7.878472328186035
    5. '+' → logprob: -8.253472328186035
    6. '[n' → logprob: -8.378472328186035
    7. '[:]' → logprob: -9.378472328186035
    8. '.' → logprob: -9.503472328186035
    9. '\[' → logprob: -9.503472328186035
    10. '=' → logprob: -9.628472328186035

Token 7: ' ' (ID: 220)
  Prédit: ' []'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' []' → logprob: -0.4218459725379944
    2. '[]' → logprob: -1.5468459129333496
    3. ' [' → logprob: -2.4218459129333496
    4. '[int' → logprob: -4.54684591293335
    5. '[' → logprob: -4.67184591293335
    6. 'list' → logprob: -5.29684591293335
    7. ' list' → logprob: -5.29684591293335
    8. '0' → logprob: -5.54684591293335
    9. '[input' → logprob: -5.92184591293335
    10. 'input' → logprob: -6.79684591293335

Token 8: '111' (ID: 8780)
  Prédit: '[]'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '[]' → logprob: -0.41591882705688477
    2. 'input' → logprob: -2.0409188270568848
    3. 'list' → logprob: -2.0409188270568848
    4. 'int' → logprob: -3.2909188270568848
    5. '[int' → logprob: -3.9159188270568848
    6. 'n' → logprob: -4.790918827056885
    7. '0' → logprob: -5.040918827056885
    8. '[input' → logprob: -5.290918827056885
    9. '[' → logprob: -6.165918827056885
    10. '1' → logprob: -7.915918827056885

Token 9: ' *' (ID: 425)
  Prédit: '*'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '*' → logprob: -0.695393443107605
    2. '+' → logprob: -0.695393443107605
    3. ' +' → logprob: -7.4453935623168945
    4. '**' → logprob: -8.070393562316895
    5. '```' → logprob: -8.070393562316895
    6. '0' → logprob: -8.695393562316895
    7. '\' → logprob: -9.195393562316895
    8. 'a' → logprob: -9.195393562316895
    9. '*a' → logprob: -9.195393562316895
    10. '%' → logprob: -9.320393562316895

Token 10: ' (((' (ID: 25584)
  Prédit: 'n'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'n' → logprob: -0.011056780815124512
    2. ' n' → logprob: -4.511056900024414
    3. 'a' → logprob: -12.011056900024414
    4. '(n' → logprob: -13.761056900024414
    5. '(' → logprob: -14.011056900024414
    6. ' ' → logprob: -14.261056900024414
    7. 'i' → logprob: -15.136056900024414
    8. ' (' → logprob: -17.011056900024414
    9. '1' → logprob: -17.386056900024414
    10. '9' → logprob: -17.761056900024414

Token 11: 'n' (ID: 77)
  Prédit: 'n'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'n' → logprob: -0.18180307745933533
    2. '10' → logprob: -1.8068031072616577
    3. '(' → logprob: -7.306803226470947
    4. '9' → logprob: -7.681803226470947
    5. '(n' → logprob: -8.181802749633789
    6. '2' → logprob: -8.681802749633789
    7. '1' → logprob: -8.806802749633789
    8. 'a' → logprob: -9.306802749633789
    9. '100' → logprob: -9.806802749633789
    10. '3' → logprob: -9.931802749633789

Token 12: ' -' (ID: 533)
  Prédit: '+'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '+' → logprob: -0.044618114829063416
    2. '-' → logprob: -3.7946181297302246
    3. ' +' → logprob: -4.544618129730225
    4. ')' → logprob: -5.419618129730225
    5. '*' → logprob: -5.669618129730225
    6. '))' → logprob: -6.794618129730225
    7. ' -' → logprob: -8.169617652893066
    8. '*(' → logprob: -8.419617652893066
    9. '0' → logprob: -8.669617652893066
    10. '1' → logprob: -8.919617652893066

Token 13: ' ' (ID: 220)
  Prédit: '1'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '1' → logprob: -0.10166846215724945
    2. ' ' → logprob: -2.351668357849121
    3. '10' → logprob: -7.726668357849121
    4. '3' → logprob: -8.101668357849121
    5. '9' → logprob: -8.101668357849121
    6. '2' → logprob: -8.726668357849121
    7. 'n' → logprob: -10.226668357849121
    8. '4' → logprob: -10.226668357849121
    9. ' n' → logprob: -10.476668357849121
    10. '100' → logprob: -10.476668357849121

Token 14: '1' (ID: 16)
  Prédit: '1'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '1' → logprob: -0.0006475062109529972
    2. ' ' → logprob: -7.62564754486084
    3. '9' → logprob: -9.75064754486084
    4. '2' → logprob: -10.00064754486084
    5. '3' → logprob: -10.75064754486084
    6. '10' → logprob: -12.25064754486084
    7. '4' → logprob: -12.87564754486084
    8. '99' → logprob: -12.87564754486084
    9. '  ' → logprob: -13.00064754486084
    10. '7' → logprob: -13.12564754486084

Token 15: ')' (ID: 8)
  Prédit: ')'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')' → logprob: -0.022841239348053932
    2. '//' → logprob: -5.022841453552246
    3. ')//' → logprob: -5.147841453552246
    4. ' //' → logprob: -5.397841453552246
    5. ' )' → logprob: -5.522841453552246
    6. '+' → logprob: -7.147841453552246
    7. '))' → logprob: -8.147841453552246
    8. ')+' → logprob: -8.272841453552246
    9. ' +' → logprob: -8.522841453552246
    10. '```' → logprob: -10.397841453552246

Token 16: ' //' (ID: 602)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')' → logprob: -0.7559628486633301
    2. '//' → logprob: -0.8809628486633301
    3. ' //' → logprob: -2.50596284866333
    4. ')//' → logprob: -4.38096284866333
    5. '+' → logprob: -4.63096284866333
    6. '%' → logprob: -5.25596284866333
    7. ' )' → logprob: -5.75596284866333
    8. ' +' → logprob: -6.63096284866333
    9. ' %' → logprob: -7.50596284866333
    10. '*' → logprob: -7.50596284866333

Token 17: ' ' (ID: 220)
  Prédit: '9'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '9' → logprob: -0.7146111130714417
    2. '10' → logprob: -1.2146110534667969
    3. '3' → logprob: -1.5896110534667969
    4. ' ' → logprob: -4.964611053466797
    5. '100' → logprob: -6.839611053466797
    6. '2' → logprob: -6.964611053466797
    7. '111' → logprob: -8.339611053466797
    8. '1' → logprob: -8.714611053466797
    9. '999' → logprob: -9.839611053466797
    10. '333' → logprob: -10.089611053466797

Token 18: '111' (ID: 8780)
  Prédit: '10'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '10' → logprob: -0.4870598316192627
    2. '9' → logprob: -1.1120598316192627
    3. '3' → logprob: -2.9870598316192627
    4. '100' → logprob: -5.612059593200684
    5. '2' → logprob: -6.487059593200684
    6. '111' → logprob: -7.987059593200684
    7. '1' → logprob: -8.237059593200684
    8. ' ' → logprob: -8.737059593200684
    9. '11' → logprob: -8.987059593200684
    10. '``' → logprob: -10.112059593200684

Token 19: ')' (ID: 8)
  Prédit: ')'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')' → logprob: -0.5113680362701416
    2. '+' → logprob: -1.0113680362701416
    3. ')+' → logprob: -3.8863680362701416
    4. ' +' → logprob: -4.1363677978515625
    5. ' )' → logprob: -9.761367797851562
    6. '+)' → logprob: -10.261367797851562
    7. '1' → logprob: -12.511367797851562
    8. ' ' → logprob: -13.386367797851562
    9. '`)' → logprob: -13.636367797851562
    10. ')+(' → logprob: -14.511367797851562

Token 20: ' +' (ID: 659)
  Prédit: '+'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '+' → logprob: -0.004151410888880491
    2. ' +' → logprob: -6.004151344299316
    3. ')+' → logprob: -7.004151344299316
    4. ')' → logprob: -7.379151344299316
    5. '+)' → logprob: -8.879151344299316
    6. '+
' → logprob: -13.879151344299316
    7. '+a' → logprob: -14.754151344299316
    8. ' )' → logprob: -15.754151344299316
    9. ')+(' → logprob: -15.879151344299316
    10. ''+' → logprob: -15.879151344299316

Token 21: ' ' (ID: 220)
  Prédit: '1'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '1' → logprob: -0.0010328111238777637
    2. ' ' → logprob: -6.876032829284668
    3. '   ' → logprob: -17.12603187561035
    4. ' ' → logprob: -17.62603187561035
    5. '```' → logprob: -18.25103187561035
    6. '2' → logprob: -18.87603187561035
    7. ')' → logprob: -19.37603187561035
    8. '  ' → logprob: -19.50103187561035
    9. '１' → logprob: -20.31353187561035
    10. '`' → logprob: -20.31353187561035

Token 22: '1' (ID: 16)
  Prédit: '1'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '1' → logprob: -1.318681188422488e-05
    2. ' ' → logprob: -11.25001335144043
    3. '   ' → logprob: -16.00001335144043
    4. '2' → logprob: -17.87501335144043
    5. ')' → logprob: -18.25001335144043
    6. '```' → logprob: -18.50001335144043
    7. '  ' → logprob: -19.12501335144043
    8. '`' → logprob: -19.31251335144043
    9. '    ' → logprob: -20.25001335144043
    10. '１' → logprob: -20.43751335144043

Token 23: ')
' (ID: 446)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')' → logprob: -4.723352049040841e-06
    2. '))' → logprob: -13.375004768371582
    3. '*' → logprob: -14.250004768371582
    4. '`)' → logprob: -14.500004768371582
    5. ')`' → logprob: -14.625004768371582
    6. '```' → logprob: -14.750004768371582
    7. '')' → logprob: -15.500004768371582
    8. ' )' → logprob: -15.750004768371582
    9. '*)' → logprob: -16.000003814697266
    10. ')
' → logprob: -16.000003814697266

Token 24: 'print' (ID: 1598)
  Prédit: ''
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False

Token 25: '(a' (ID: 6271)
  Prédit: '(a'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(a' → logprob: -0.5759890079498291
    2. '(' → logprob: -0.8259890079498291
    3. '((' → logprob: -10.82598876953125
    4. '('' → logprob: -11.45098876953125
    5. '("("' → logprob: -11.57598876953125
    6. '(f' → logprob: -12.07598876953125
    7. '(n' → logprob: -13.70098876953125
    8. '()' → logprob: -13.82598876953125
    9. 'a' → logprob: -15.20098876953125
    10. '(max' → logprob: -15.45098876953125

Token 26: ')' (ID: 8)
  Prédit: ')'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')' → logprob: -5.264322317088954e-05
    2. '))' → logprob: -9.875052452087402
    3. '')' → logprob: -14.375052452087402
    4. '`)' → logprob: -14.875052452087402
    5. ' )' → logprob: -16.00005340576172
    6. ')))' → logprob: -16.75005340576172
    7. ')a' → logprob: -17.00005340576172
    8. 'a' → logprob: -17.62505340576172
    9. '")' → logprob: -17.75005340576172
    10. ')`' → logprob: -17.87505340576172


RÉSUMÉ:
--------------------------------------------------------------------------------
Total des tokens analysés: 24
Tokens correctement prédits (1ère position, stricte): 7
Tokens correctement prédits (1ère position, avec adaptation): 7
Tokens correctement prédits (top 10): 16
Précision stricte (1ère position): 29.17%
Précision adaptée (1ère position): 29.17%
Précision (top 10): 66.67%
================================================================================
