================================================================================
ANALYSE DE PRÉDICTION TOKEN PAR TOKEN (BATCH API)
Date: 2025-06-04 19:44:34
Modèle de tokenisation: gpt-4o-mini
================================================================================

SCRIPT ANALYSÉ:
--------------------------------------------------------------------------------
N, K, Q = map(int, input().split())
A = []
for _ in range(Q):
    A.append(int(input()))
P = []
for _ in range(N):
    P.append(K)
for i in range(Q):
    P[A[i] - 1] += 1
for i in range(N):
    if P[i] - Q > 0:
        print("Yes")
    else:
        print("No")
--------------------------------------------------------------------------------

RÉSULTATS D'ANALYSE TOKEN PAR TOKEN:
--------------------------------------------------------------------------------
Token 0: 'N' (ID: 45)
  → Token d'amorce (pas de prédiction)

Token 1: ',' (ID: 11)
  → Token d'amorce (pas de prédiction)

Token 2: ' K' (ID: 658)
  → Token d'amorce (pas de prédiction)

Token 3: ',' (ID: 11)
  Prédit: '='
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '=' → logprob: -0.04897349700331688
    2. ' =' → logprob: -3.173973560333252
    3. ',' → logprob: -5.173973560333252
    4. ')' → logprob: -9.048973083496094
    5. '.' → logprob: -9.798973083496094
    6. ';' → logprob: -10.548973083496094
    7. '+' → logprob: -10.798973083496094
    8. '```' → logprob: -11.173973083496094
    9. '=int' → logprob: -11.298973083496094
    10. '#' → logprob: -11.548973083496094

Token 4: ' Q' (ID: 1486)
  Prédit: '='
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '=' → logprob: -0.02820451930165291
    2. ' =' → logprob: -3.6532044410705566
    3. ',' → logprob: -6.278204441070557
    4. ')' → logprob: -11.278204917907715
    5. '.' → logprob: -12.778204917907715
    6. ';' → logprob: -13.028204917907715
    7. '=int' → logprob: -13.528204917907715
    8. '=
' → logprob: -13.778204917907715
    9. '=input' → logprob: -13.778204917907715
    10. '_' → logprob: -13.903204917907715

Token 5: ' =' (ID: 314)
  Prédit: '='
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '=' → logprob: -0.04308277741074562
    2. ' =' → logprob: -3.2930827140808105
    3. ',' → logprob: -5.5430827140808105
    4. ';' → logprob: -7.9180827140808105
    5. '.' → logprob: -8.043083190917969
    6. '[' → logprob: -8.793083190917969
    7. ')' → logprob: -9.543083190917969
    8. ' ' → logprob: -9.543083190917969
    9. '```' → logprob: -10.168083190917969
    10. ''' → logprob: -10.418083190917969

Token 6: ' map' (ID: 4014)
  Prédit: ' map'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' map' → logprob: -0.1305568516254425
    2. 'map' → logprob: -2.13055682182312
    3. ' list' → logprob: -6.255557060241699
    4. ' input' → logprob: -6.630557060241699
    5. 'input' → logprob: -8.5055570602417
    6. 'list' → logprob: -8.7555570602417
    7. ' ' → logprob: -11.6305570602417
    8. ' int' → logprob: -12.6305570602417
    9. ' [' → logprob: -12.7555570602417
    10. '0' → logprob: -12.8805570602417

Token 7: '(int' (ID: 2742)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(' → logprob: -0.3900398910045624
    2. '(int' → logprob: -1.7650399208068848
    3. '(lambda' → logprob: -2.7650399208068848
    4. '<|end|>' → logprob: -3.1400399208068848
    5. '(str' → logprob: -3.2650399208068848
    6. '```' → logprob: -5.640039920806885
    7. '<|end|>' → logprob: -7.515039920806885
    8. '(user' → logprob: -7.765039920806885
    9. '()' → logprob: -7.765039920806885
    10. '(input' → logprob: -7.890039920806885

Token 8: ',' (ID: 11)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ')' → logprob: -0.3628898859024048
    2. '(input' → logprob: -1.3628898859024048
    3. '(' → logprob: -3.4878897666931152
    4. '```' → logprob: -5.487889766693115
    5. '`)' → logprob: -5.612889766693115
    6. '(int' → logprob: -5.737889766693115
    7. 'input' → logprob: -6.237889766693115
    8. '`' → logprob: -6.737889766693115
    9. ')(' → logprob: -6.987889766693115
    10. '(str' → logprob: -6.987889766693115

Token 9: ' input' (ID: 3422)
  Prédit: 'input'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'input' → logprob: -0.6932156085968018
    2. ' input' → logprob: -0.6932156085968018
    3. ')' → logprob: -10.193215370178223
    4. '(input' → logprob: -10.443215370178223
    5. ' )' → logprob: -13.568215370178223
    6. ',input' → logprob: -15.443215370178223
    7. '=input' → logprob: -15.818215370178223
    8. '<input' → logprob: -17.69321632385254
    9. ' (' → logprob: -18.06821632385254
    10. '```' → logprob: -18.06821632385254

Token 10: '().' (ID: 1454)
  Prédit: '())'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '())' → logprob: -0.3438306748867035
    2. '()' → logprob: -1.3438307046890259
    3. ')' → logprob: -3.8438305854797363
    4. '().' → logprob: -4.843830585479736
    5. '());' → logprob: -8.593831062316895
    6. '(' → logprob: -8.718831062316895
    7. '('' → logprob: -8.843831062316895
    8. ' ())' → logprob: -9.718831062316895
    9. '();)' → logprob: -9.968831062316895
    10. '`()' → logprob: -10.218831062316895

Token 11: 'split' (ID: 13627)
  Prédit: 'split'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'split' → logprob: -0.0005597044946625829
    2. 'strip' → logprob: -7.5005598068237305
    3. ' split' → logprob: -12.75055980682373
    4. 'rstrip' → logprob: -13.00055980682373
    5. ')' → logprob: -14.00055980682373
    6. '(split' → logprob: -14.75055980682373
    7. 'read' → logprob: -15.37555980682373
    8. 'spl' → logprob: -17.375558853149414
    9. '```' → logprob: -18.375558853149414
    10. 'replace' → logprob: -19.375558853149414

Token 12: '())
' (ID: 4574)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ')' → logprob: -0.044729143381118774
    2. '())' → logprob: -3.544729232788086
    3. '))' → logprob: -4.419729232788086
    4. '('' → logprob: -6.919729232788086
    5. '()' → logprob: -7.294729232788086
    6. '(' → logprob: -7.419729232788086
    7. '()))' → logprob: -8.169729232788086
    8. '`)' → logprob: -9.044729232788086
    9. '```' → logprob: -10.419729232788086
    10. '),' → logprob: -10.794729232788086

Token 13: 'A' (ID: 32)
  Prédit: 'a'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'a' → logprob: -0.8377613425254822
    2. '\n' → logprob: -0.9627613425254822
    3. 'for' → logprob: -2.962761402130127
    4. '
' → logprob: -3.462761402130127
    5. 's' → logprob: -4.087761402130127
    6. 'arr' → logprob: -4.212761402130127
    7. '\' → logprob: -4.337761402130127
    8. 'n' → logprob: -4.962761402130127
    9. '' → logprob: -5.087761402130127
    10. 'x' → logprob: -5.337761402130127

Token 14: ' =' (ID: 314)
  Prédit: '['
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '[' → logprob: -0.0036948511842638254
    2. '[A' → logprob: -6.253695011138916
    3. '=' → logprob: -7.503695011138916
    4. '[]' → logprob: -7.753695011138916
    5. '.' → logprob: -8.503694534301758
    6. '[:]' → logprob: -8.878694534301758
    7. '\[' → logprob: -9.378694534301758
    8. ' =' → logprob: -9.753694534301758
    9. '[K' → logprob: -10.003694534301758
    10. '[i' → logprob: -10.128694534301758

Token 15: ' []
' (ID: 8911)
  Prédit: ' list'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' list' → logprob: -0.31456348299980164
    2. 'list' → logprob: -1.314563512802124
    3. ' [' → logprob: -7.314563274383545
    4. ' []' → logprob: -8.189563751220703
    5. '[' → logprob: -8.564563751220703
    6. '[]' → logprob: -9.314563751220703
    7. '[list' → logprob: -9.814563751220703
    8. 'input' → logprob: -11.814563751220703
    9. ' input' → logprob: -12.564563751220703
    10. ' ' → logprob: -13.064563751220703

Token 16: 'for' (ID: 1938)
  Prédit: 'for'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'for' → logprob: -0.0009045533952303231
    2. ' for' → logprob: -7.750904560089111
    3. '[' → logprob: -8.625904083251953
    4. '```' → logprob: -8.750904083251953
    5. '_' → logprob: -10.750904083251953
    6. '`' → logprob: -10.750904083251953
    7. 'A' → logprob: -10.750904083251953
    8. '.' → logprob: -11.000904083251953
    9. '``' → logprob: -11.625904083251953
    10. '[i' → logprob: -11.750904083251953

Token 17: ' _' (ID: 1175)
  Prédit: ' i'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' i' → logprob: -0.15883180499076843
    2. ' ' → logprob: -2.408831834793091
    3. '_' → logprob: -3.158831834793091
    4. ' _' → logprob: -4.533831596374512
    5. 'i' → logprob: -5.658831596374512
    6. ' ' → logprob: -9.158831596374512
    7. '  ' → logprob: -10.283831596374512
    8. ' I' → logprob: -10.658831596374512
    9. ' ‌' → logprob: -10.658831596374512
    10. ' range' → logprob: -10.783831596374512

Token 18: ' in' (ID: 306)
  Prédit: ' in'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' in' → logprob: -0.024066390469670296
    2. 'in' → logprob: -3.77406644821167
    3. ' ' → logprob: -7.64906644821167
    4. 'import' → logprob: -9.399065971374512
    5. 'range' → logprob: -9.649065971374512
    6. 'i' → logprob: -9.899065971374512
    7. '  ' → logprob: -10.524065971374512
    8. 'n' → logprob: -10.899065971374512
    9. 'A' → logprob: -10.899065971374512
    10. '```' → logprob: -11.899065971374512

Token 19: ' range' (ID: 3352)
  Prédit: 'range'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'range' → logprob: -0.006716913543641567
    2. ' range' → logprob: -5.006716728210449
    3. 'A' → logprob: -15.25671672821045
    4. '	range' → logprob: -15.25671672821045
    5. ' ' → logprob: -15.75671672821045
    6. '(range' → logprob: -15.88171672821045
    7. 'ran' → logprob: -15.88171672821045
    8. 'input' → logprob: -16.131717681884766
    9. 'rang' → logprob: -16.131717681884766
    10. ')' → logprob: -16.631717681884766

Token 20: '(Q' (ID: 14437)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '(' → logprob: -0.014487490057945251
    2. ' (' → logprob: -4.514487266540527
    3. '(N' → logprob: -5.764487266540527
    4. '(range' → logprob: -9.139487266540527
    5. '(int' → logprob: -9.264487266540527
    6. '(n' → logprob: -10.139487266540527
    7. '(
' → logprob: -11.139487266540527
    8. ' range' → logprob: -11.264487266540527
    9. '(len' → logprob: -11.889487266540527
    10. '(K' → logprob: -12.264487266540527

Token 21: '):
' (ID: 1883)
  Prédit: '):'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '):' → logprob: -0.0015149809187278152
    2. ')' → logprob: -6.626514911651611
    3. '):
' → logprob: -9.25151538848877
    4. ' ):' → logprob: -9.87651538848877
    5. ':' → logprob: -10.25151538848877
    6. '+' → logprob: -13.25151538848877
    7. ',' → logprob: -13.87651538848877
    8. '):
' → logprob: -14.00151538848877
    9. ' )' → logprob: -14.62651538848877
    10. '```' → logprob: -14.87651538848877

Token 22: '   ' (ID: 271)
  Prédit: ' query'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' query' → logprob: -0.7729417681694031
    2. '   ' → logprob: -1.5229418277740479
    3. ' x' → logprob: -2.022941827774048
    4. ' n' → logprob: -3.522941827774048
    5. 'query' → logprob: -4.147941589355469
    6. 'x' → logprob: -4.272941589355469
    7. '```' → logprob: -4.397941589355469
    8. ' ' → logprob: -4.397941589355469
    9. ' input' → logprob: -4.522941589355469
    10. ' A' → logprob: -4.522941589355469

Token 23: ' A' (ID: 355)
  Prédit: 'x'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'x' → logprob: -0.7117237448692322
    2. 'a' → logprob: -2.211723804473877
    3. 'q' → logprob: -2.461723804473877
    4. 'query' → logprob: -2.461723804473877
    5. 'A' (adapté à ' A') → logprob: -2.586723804473877
    6. 'l' → logprob: -3.336723804473877
    7. ' query' → logprob: -3.961723804473877
    8. ' x' → logprob: -3.961723804473877
    9. 'i' → logprob: -4.586723804473877
    10. 'k' → logprob: -4.711723804473877

Token 24: '.append' (ID: 3709)
  Prédit: '.append'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '.append' → logprob: -0.10027740150690079
    2. '.' → logprob: -2.3502774238586426
    3. 'append' → logprob: -10.725276947021484
    4. '.ap' → logprob: -11.225276947021484
    5. '.app' → logprob: -11.350276947021484
    6. '.extend' → logprob: -12.225276947021484
    7. '.insert' → logprob: -12.600276947021484
    8. ' .' → logprob: -12.850276947021484
    9. '.a' → logprob: -13.225276947021484
    10. '.p' → logprob: -13.475276947021484

Token 25: '(int' (ID: 2742)
  Prédit: '(int'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(int' → logprob: -0.3528052568435669
    2. '(list' → logprob: -1.352805256843567
    3. '(' → logprob: -3.3528051376342773
    4. '(input' → logprob: -5.852805137634277
    5. '(tuple' → logprob: -7.602805137634277
    6. 'list' → logprob: -8.727805137634277
    7. 'int' → logprob: -9.477805137634277
    8. '(map' → logprob: -10.102805137634277
    9. '(eval' → logprob: -10.727805137634277
    10. '(
' → logprob: -10.852805137634277

Token 26: '(input' (ID: 10054)
  Prédit: '(input'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(input' → logprob: -0.38709136843681335
    2. '(' → logprob: -1.1370913982391357
    3. '()' → logprob: -8.762091636657715
    4. ')' → logprob: -10.637091636657715
    5. '(
' → logprob: -11.512091636657715
    6. '(

' → logprob: -11.762091636657715
    7. 'input' → logprob: -11.887091636657715
    8. '())' → logprob: -11.887091636657715
    9. ' (' → logprob: -13.512091636657715
    10. '(in' → logprob: -13.887091636657715

Token 27: '()))
' (ID: 24521)
  Prédit: '())'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '())' → logprob: -0.3178841471672058
    2. '()))' → logprob: -1.3178842067718506
    3. '()' → logprob: -5.4428839683532715
    4. '(' → logprob: -8.81788444519043
    5. '())))' → logprob: -9.56788444519043
    6. ')' → logprob: -10.44288444519043
    7. '().' → logprob: -11.19288444519043
    8. '))' → logprob: -12.19288444519043
    9. ' ())' → logprob: -12.56788444519043
    10. '())
' → logprob: -12.94288444519043

Token 28: 'P' (ID: 47)
  Prédit: '
'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '
' → logprob: -1.023234248161316
    2. 'for' → logprob: -1.148234248161316
    3. '\n' → logprob: -2.7732343673706055
    4. '#' → logprob: -2.8982343673706055
    5. '```' → logprob: -3.7732343673706055
    6. 'result' → logprob: -4.0232343673706055
    7. 's' → logprob: -4.0232343673706055
    8. '[' → logprob: -4.0232343673706055
    9. ')' → logprob: -4.2732343673706055
    10. 'Q' → logprob: -4.2732343673706055

Token 29: ' =' (ID: 314)
  Prédit: ' ='
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' =' → logprob: -1.3168270587921143
    2. 'refix' → logprob: -1.6918270587921143
    3. '_' → logprob: -1.9418270587921143
    4. 'r' → logprob: -2.3168270587921143
    5. '=' → logprob: -2.6918270587921143
    6. 'REFIX' → logprob: -3.1918270587921143
    7. 'R' → logprob: -3.3168270587921143
    8. '[' → logprob: -3.4418270587921143
    9. 'erm' → logprob: -3.8168270587921143
    10. '_r' → logprob: -4.441826820373535

Token 30: ' []
' (ID: 8911)
  Prédit: '['
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '[' → logprob: -1.0679649114608765
    2. '[]' → logprob: -1.3179649114608765
    3. 'list' → logprob: -1.8179649114608765
    4. ' [' → logprob: -2.317965030670166
    5. ' list' → logprob: -3.317965030670166
    6. ' []' → logprob: -3.317965030670166
    7. '[N' → logprob: -4.317965030670166
    8. '[int' → logprob: -4.567965030670166
    9. '[K' → logprob: -4.942965030670166
    10. '[len' → logprob: -5.567965030670166

Token 31: 'for' (ID: 1938)
  Prédit: 'for'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'for' → logprob: -0.01679987646639347
    2. ' for' → logprob: -4.3917999267578125
    3. '[' → logprob: -5.6417999267578125
    4. '[]' → logprob: -8.391799926757812
    5. ' =' → logprob: -9.516799926757812
    6. '=' → logprob: -9.516799926757812
    7. '_' → logprob: -9.641799926757812
    8. ' ' → logprob: -9.766799926757812
    9. 'range' → logprob: -10.641799926757812
    10. 'f' → logprob: -10.766799926757812

Token 32: ' _' (ID: 1175)
  Prédit: ' i'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' i' → logprob: -0.09195320308208466
    2. ' _' → logprob: -2.5919532775878906
    3. '_' → logprob: -4.716953277587891
    4. ' ' → logprob: -5.591953277587891
    5. 'i' → logprob: -8.34195327758789
    6. ' range' → logprob: -10.34195327758789
    7. ' K' → logprob: -11.96695327758789
    8. '_i' → logprob: -12.21695327758789
    9. ' ' → logprob: -12.59195327758789
    10. ' x' → logprob: -12.71695327758789

Token 33: ' in' (ID: 306)
  Prédit: 'in'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'in' → logprob: -0.31533241271972656
    2. ' in' → logprob: -1.3153324127197266
    3. ' ' → logprob: -6.315332412719727
    4. '  ' → logprob: -9.565332412719727
    5. 'range' → logprob: -9.690332412719727
    6. ' _' → logprob: -10.815332412719727
    7. '_' → logprob: -10.940332412719727
    8. '```' → logprob: -11.377832412719727
    9. 'n' → logprob: -11.815332412719727
    10. '	in' → logprob: -11.940332412719727

Token 34: ' range' (ID: 3352)
  Prédit: 'range'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'range' → logprob: -0.3868991434574127
    2. ' range' → logprob: -1.1368991136550903
    3. '(range' → logprob: -12.2618989944458
    4. ' ' → logprob: -12.5118989944458
    5. 'ran' → logprob: -12.5118989944458
    6. 'rang' → logprob: -12.6368989944458
    7. '	range' → logprob: -12.6368989944458
    8. ' ran' → logprob: -13.1368989944458
    9. '<|end|>' → logprob: -14.0118989944458
    10. 'r' → logprob: -14.1368989944458

Token 35: '(N' (ID: 10564)
  Prédit: '(K'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(K' → logprob: -0.04264548048377037
    2. '(N' → logprob: -3.6676454544067383
    3. '(' → logprob: -4.167645454406738
    4. '(Q' → logprob: -8.042645454406738
    5. ' (' → logprob: -8.417645454406738
    6. 'K' → logprob: -9.167645454406738
    7. ' K' → logprob: -10.167645454406738
    8. '(
' → logprob: -11.667645454406738
    9. '(M' → logprob: -12.167645454406738
    10. '(k' → logprob: -12.167645454406738

Token 36: '):
' (ID: 1883)
  Prédit: '):'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '):' → logprob: -0.14342287182807922
    2. ')' → logprob: -2.018422842025757
    3. ' )' → logprob: -8.393423080444336
    4. ' ):' → logprob: -8.768423080444336
    5. ',' → logprob: -8.893423080444336
    6. '):
' → logprob: -9.018423080444336
    7. ':' → logprob: -10.143423080444336
    8. '+' → logprob: -10.643423080444336
    9. '-' → logprob: -11.518423080444336
    10. '   ' → logprob: -11.768423080444336

Token 37: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.3692654073238373
    2. ' P' → logprob: -1.7442654371261597
    3. ' ' → logprob: -2.36926531791687
    4. 'P' → logprob: -4.494265556335449
    5. '0' → logprob: -4.744265556335449
    6. '<|end|>' → logprob: -4.869265556335449
    7. '    ' → logprob: -5.744265556335449
    8. '_' → logprob: -5.994265556335449
    9. ' ' → logprob: -6.619265556335449
    10. '  ' → logprob: -6.744265556335449

Token 38: ' P' (ID: 398)
  Prédit: 'P'
  Correct (stricte): False
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'P' (adapté à ' P') → logprob: -0.5782150030136108
    2. '0' → logprob: -1.0782150030136108
    3. ' P' → logprob: -2.4532151222229004
    4. ' ' → logprob: -5.0782151222229
    5. '1' → logprob: -6.2032151222229
    6. 'p' → logprob: -6.8282151222229
    7. 'K' → logprob: -6.9532151222229
    8. '_' → logprob: -7.3282151222229
    9. '[]' → logprob: -7.5782151222229
    10. 'int' → logprob: -8.078214645385742

Token 39: '.append' (ID: 3709)
  Prédit: '.append'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '.append' → logprob: -0.18001092970371246
    2. '.' → logprob: -1.8050109148025513
    3. ' .' → logprob: -8.930010795593262
    4. 'append' → logprob: -9.680010795593262
    5. '.app' → logprob: -11.180010795593262
    6. ' =' → logprob: -11.555010795593262
    7. '.ap' → logprob: -11.680010795593262
    8. ' +=' → logprob: -12.305010795593262
    9. ' ' → logprob: -12.430010795593262
    10. ',' → logprob: -12.430010795593262

Token 40: '(K' (ID: 28797)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(' → logprob: -0.43089011311531067
    2. '(int' → logprob: -1.0558900833129883
    3. '(N' → logprob: -7.305890083312988
    4. '(K' → logprob: -7.680890083312988
    5. '(-' → logprob: -8.805890083312988
    6. '((' → logprob: -8.805890083312988
    7. ' (' → logprob: -8.930890083312988
    8. '0' → logprob: -9.305890083312988
    9. '([' → logprob: -9.305890083312988
    10. '(i' → logprob: -9.305890083312988

Token 41: ')
' (ID: 446)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ')' → logprob: -0.15830139815807343
    2. ' )' → logprob: -2.65830135345459
    3. ' >' → logprob: -3.40830135345459
    4. '>' → logprob: -3.53330135345459
    5. ' -' → logprob: -5.28330135345459
    6. '-' → logprob: -5.28330135345459
    7. '+' → logprob: -6.90830135345459
    8. '))' → logprob: -7.65830135345459
    9. ' >=' → logprob: -7.78330135345459
    10. ' ' → logprob: -7.90830135345459

Token 42: 'for' (ID: 1938)
  Prédit: 'for'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'for' → logprob: -0.17073941230773926
    2. '-' → logprob: -3.1707394123077393
    3. '<|end|>' → logprob: -3.5457394123077393
    4. '
' → logprob: -3.9207394123077393
    5. ' ' → logprob: -4.17073917388916
    6. ' 
' → logprob: -4.67073917388916
    7. '+' → logprob: -4.67073917388916
    8. ' for' → logprob: -5.17073917388916
    9. 'if' → logprob: -5.29573917388916
    10. '#' → logprob: -5.54573917388916

Token 43: ' i' (ID: 575)
  Prédit: ' i'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' i' → logprob: -0.5251330137252808
    2. ' _' → logprob: -1.0251330137252808
    3. ' ' → logprob: -3.2751331329345703
    4. '_' → logprob: -4.52513313293457
    5. ' range' → logprob: -7.77513313293457
    6. 'i' → logprob: -8.40013313293457
    7. ' a' → logprob: -9.15013313293457
    8. ' ' → logprob: -9.40013313293457
    9. ' p' → logprob: -9.77513313293457
    10. ' n' → logprob: -10.15013313293457

Token 44: ' in' (ID: 306)
  Prédit: ' in'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' in' → logprob: -0.18203730881214142
    2. 'n' → logprob: -2.057037353515625
    3. ' n' → logprob: -3.682037353515625
    4. 'in' → logprob: -4.807037353515625
    5. ' ' → logprob: -5.307037353515625
    6. '  ' → logprob: -9.807037353515625
    7. '_' → logprob: -10.057037353515625
    8. '=' → logprob: -10.432037353515625
    9. ',' → logprob: -10.557037353515625
    10. '<n' → logprob: -10.682037353515625

Token 45: ' range' (ID: 3352)
  Prédit: ' range'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' range' → logprob: -0.03516431525349617
    2. 'range' → logprob: -3.5351643562316895
    3. ' A' → logprob: -5.2851643562316895
    4. 'A' → logprob: -8.410163879394531
    5. ' ' → logprob: -10.160163879394531
    6. ' Q' → logprob: -10.160163879394531
    7. 'Q' → logprob: -11.410163879394531
    8. ' ran' → logprob: -12.660163879394531
    9. 'Range' → logprob: -12.910163879394531
    10. '	range' → logprob: -13.347663879394531

Token 46: '(Q' (ID: 14437)
  Prédit: '(Q'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(Q' → logprob: -0.003254715586081147
    2. '(' → logprob: -5.7532548904418945
    3. '(len' → logprob: -9.753254890441895
    4. ' (' → logprob: -11.628254890441895
    5. ' Q' → logprob: -12.753254890441895
    6. 'Q' → logprob: -13.003254890441895
    7. '(N' → logprob: -13.378254890441895
    8. ' ' → logprob: -14.128254890441895
    9. '(A' → logprob: -15.128254890441895
    10. '(q' → logprob: -15.128254890441895

Token 47: '):
' (ID: 1883)
  Prédit: '):'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '):' → logprob: -0.0006721630343236029
    2. ' ):' → logprob: -7.625672340393066
    3. ')' → logprob: -9.125672340393066
    4. ':' → logprob: -9.750672340393066
    5. ',' → logprob: -11.375672340393066
    6. '):
' → logprob: -13.250672340393066
    7. '+' → logprob: -13.500672340393066
    8. ' :' → logprob: -14.250672340393066
    9. ' )' → logprob: -14.750672340393066
    10. ' ' → logprob: -15.375672340393066

Token 48: '   ' (ID: 271)
  Prédit: 'P'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'P' → logprob: -1.247336745262146
    2. 'A' → logprob: -1.497336745262146
    3. ' A' → logprob: -1.622336745262146
    4. ' P' → logprob: -1.747336745262146
    5. 'x' → logprob: -2.9973368644714355
    6. 'if' → logprob: -4.1223368644714355
    7. 'p' → logprob: -4.4973368644714355
    8. 'a' → logprob: -4.6223368644714355
    9. ' if' → logprob: -4.7473368644714355
    10. ' x' → logprob: -5.8723368644714355

Token 49: ' P' (ID: 398)
  Prédit: 'x'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'x' → logprob: -0.7638729214668274
    2. 'P' (adapté à ' P') → logprob: -1.3888728618621826
    3. 'A' → logprob: -2.2638728618621826
    4. ' P' → logprob: -2.7638728618621826
    5. ' x' → logprob: -3.2638728618621826
    6. ' A' → logprob: -3.7638728618621826
    7. 'p' → logprob: -4.138873100280762
    8. 'if' → logprob: -4.513873100280762
    9. 'a' → logprob: -5.013873100280762
    10. 'X' → logprob: -5.388873100280762

Token 50: '[A' (ID: 58391)
  Prédit: '[A'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '[A' → logprob: -0.03238588199019432
    2. '[' → logprob: -4.15738582611084
    3. '[P' → logprob: -4.15738582611084
    4. 'A' → logprob: -8.28238582611084
    5. '[
' → logprob: -9.15738582611084
    6. '```' → logprob: -9.90738582611084
    7. '[int' → logprob: -10.40738582611084
    8. '[...]' → logprob: -10.53238582611084
    9. '[i' → logprob: -10.90738582611084
    10. '[a' → logprob: -11.03238582611084

Token 51: '[i' (ID: 1768)
  Prédit: '[i'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '[i' → logprob: -1.9361264946837764e-07
    2. '[' → logprob: -16.0
    3. '[I' → logprob: -17.0
    4. '-' → logprob: -17.5
    5. '[
' → logprob: -18.0
    6. 'i' → logprob: -18.0
    7. '[A' → logprob: -18.25
    8. '```' → logprob: -18.5
    9. '[-' → logprob: -19.125
    10. '[a' → logprob: -20.375

Token 52: ']' (ID: 60)
  Prédit: ']'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ']' → logprob: -0.3830351233482361
    2. ']-' → logprob: -1.2580351829528809
    3. '-' → logprob: -3.883035182952881
    4. '[i' → logprob: -4.633035182952881
    5. ' -' → logprob: -6.008035182952881
    6. '[' → logprob: -7.633035182952881
    7. '[-' → logprob: -8.633034706115723
    8. ']]' → logprob: -8.633034706115723
    9. '1' → logprob: -9.008034706115723
    10. '   ' → logprob: -10.383034706115723

Token 53: ' -' (ID: 533)
  Prédit: '-'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '-' → logprob: -0.050749633461236954
    2. ']' → logprob: -3.3007495403289795
    3. ']-' → logprob: -4.425749778747559
    4. ' -' → logprob: -8.050749778747559
    5. '1' → logprob: -8.925749778747559
    6. '[i' → logprob: -10.050749778747559
    7. '-=' → logprob: -10.175749778747559
    8. '[' → logprob: -10.800749778747559
    9. '"-' → logprob: -11.175749778747559
    10. '[-' → logprob: -11.175749778747559

Token 54: ' ' (ID: 220)
  Prédit: '1'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '1' → logprob: -0.00026526954025030136
    2. ' ' → logprob: -8.250265121459961
    3. '<|end|>' → logprob: -13.750265121459961
    4. '=' → logprob: -14.812765121459961
    5. ']' → logprob: -14.812765121459961
    6. '>' → logprob: -14.875265121459961
    7. ')' → logprob: -14.875265121459961
    8. '```' → logprob: -15.062765121459961
    9. '`' → logprob: -15.750265121459961
    10. '   ' → logprob: -15.875265121459961

Token 55: '1' (ID: 16)
  Prédit: '1'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '1' → logprob: -5.5577775128767826e-06
    2. ' ' → logprob: -12.375005722045898
    3. '<|end|>' → logprob: -14.250005722045898
    4. '   ' → logprob: -16.2500057220459
    5. '2' → logprob: -16.4375057220459
    6. '```' → logprob: -17.1250057220459
    7. '`' → logprob: -17.5000057220459
    8. '...' → logprob: -17.6875057220459
    9. '0' → logprob: -17.9375057220459
    10. '<|end|>' → logprob: -18.0625057220459

Token 56: ']' (ID: 60)
  Prédit: ']'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ']' → logprob: -0.001476771547459066
    2. ']-' → logprob: -7.126476764678955
    3. ']+=' → logprob: -7.626476764678955
    4. '-' → logprob: -9.376477241516113
    5. ' ]' → logprob: -9.876477241516113
    6. ' -=' → logprob: -11.251477241516113
    7. ']=' → logprob: -11.376477241516113
    8. '-=' → logprob: -12.001477241516113
    9. ']+' → logprob: -12.376477241516113
    10. ')' → logprob: -12.501477241516113

Token 57: ' +=' (ID: 2757)
  Prédit: ' +='
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' +=' → logprob: -0.9837355017662048
    2. ' -=' → logprob: -0.9837355017662048
    3. ' =' → logprob: -2.1087355613708496
    4. '+=' → logprob: -2.7337355613708496
    5. '=' → logprob: -3.1087355613708496
    6. '-=' → logprob: -4.10873556137085
    7. '>' → logprob: -6.10873556137085
    8. '-' → logprob: -7.60873556137085
    9. ' ' → logprob: -7.73373556137085
    10. ' >' → logprob: -8.108735084533691

Token 58: ' ' (ID: 220)
  Prédit: '1'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '1' → logprob: -0.00015872348740231246
    2. ' ' → logprob: -8.750158309936523
    3. '   ' → logprob: -16.750158309936523
    4. '-' → logprob: -17.000158309936523
    5. '10' → logprob: -17.375158309936523
    6. '  ' → logprob: -18.375158309936523
    7. '+' → logprob: -18.750158309936523
    8. '100' → logprob: -18.875158309936523
    9. '１' → logprob: -18.875158309936523
    10. '2' → logprob: -19.625158309936523

Token 59: '1' (ID: 16)
  Prédit: '1'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '1' → logprob: -2.176947600673884e-05
    2. ' ' → logprob: -10.750021934509277
    3. '-' → logprob: -15.750021934509277
    4. '   ' → logprob: -16.75002098083496
    5. '10' → logprob: -18.12502098083496
    6. '  ' → logprob: -18.25002098083496
    7. '```' → logprob: -18.25002098083496
    8. '100' → logprob: -18.50002098083496
    9. '+' → logprob: -18.87502098083496
    10. '１' → logprob: -19.00002098083496

Token 60: '
' (ID: 198)
  Prédit: 'for'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'for' → logprob: -0.12238327413797379
    2. '
' → logprob: -2.7473833560943604
    3. '<|end|>' → logprob: -3.7473833560943604
    4. ' for' → logprob: -4.122383117675781
    5. 'print' → logprob: -4.997383117675781
    6. '```' → logprob: -6.372383117675781
    7. ' ' → logprob: -6.872383117675781
    8. 'if' → logprob: -7.872383117675781
    9. ' 
' → logprob: -8.122383117675781
    10. 'result' → logprob: -9.247383117675781

Token 61: 'for' (ID: 1938)
  Prédit: 'for'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'for' → logprob: -0.1829245686531067
    2. 'print' → logprob: -1.807924509048462
    3. ' for' → logprob: -5.807924747467041
    4. '
' → logprob: -10.057924270629883
    5. '```' → logprob: -10.432924270629883
    6. 'max' → logprob: -10.557924270629883
    7. 'result' → logprob: -10.932924270629883
    8. ' print' → logprob: -10.932924270629883
    9. ' ' → logprob: -12.057924270629883
    10. 'p' → logprob: -12.307924270629883

Token 62: ' i' (ID: 575)
  Prédit: ' i'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' i' → logprob: -0.18144458532333374
    2. ' p' → logprob: -2.3064446449279785
    3. 'i' → logprob: -3.0564446449279785
    4. 'p' → logprob: -4.6814446449279785
    5. ' j' → logprob: -4.9314446449279785
    6. ' x' → logprob: -7.3064446449279785
    7. 'j' → logprob: -7.5564446449279785
    8. ' ' → logprob: -7.5564446449279785
    9. ' v' → logprob: -7.6814446449279785
    10. ' P' → logprob: -9.18144416809082

Token 63: ' in' (ID: 306)
  Prédit: ' in'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' in' → logprob: -0.060272712260484695
    2. ' ' → logprob: -3.435272693634033
    3. 'in' → logprob: -3.685272693634033
    4. 'range' → logprob: -7.435272693634033
    5. ' range' → logprob: -7.685272693634033
    6. '  ' → logprob: -9.560273170471191
    7. ' N' → logprob: -10.560273170471191
    8. ',' → logprob: -11.310273170471191
    9. '_' → logprob: -12.310273170471191
    10. ' ,' → logprob: -12.685273170471191

Token 64: ' range' (ID: 3352)
  Prédit: ' range'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' range' → logprob: -0.0700264647603035
    2. 'range' → logprob: -2.695026397705078
    3. ' ' → logprob: -10.195026397705078
    4. ' ran' → logprob: -10.570026397705078
    5. ' rang' → logprob: -11.695026397705078
    6. ' P' → logprob: -12.320026397705078
    7. 'r' → logprob: -13.195026397705078
    8. ' r' → logprob: -13.320026397705078
    9. '  ' → logprob: -13.445026397705078
    10. 'ran' → logprob: -13.445026397705078

Token 65: '(N' (ID: 10564)
  Prédit: '(N'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(N' → logprob: -0.5483347177505493
    2. '(' → logprob: -1.2983347177505493
    3. ' range' → logprob: -2.0483345985412598
    4. ' (' → logprob: -4.17333459854126
    5. '(range' → logprob: -6.17333459854126
    6. 'range' → logprob: -6.67333459854126
    7. ' ' → logprob: -7.17333459854126
    8. ' N' → logprob: -7.67333459854126
    9. '(n' → logprob: -9.548335075378418
    10. 'Range' → logprob: -10.548335075378418

Token 66: '):
' (ID: 1883)
  Prédit: '):'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '):' → logprob: -0.4323465824127197
    2. '):
' → logprob: -1.0573465824127197
    3. ')' → logprob: -5.932346343994141
    4. ':' → logprob: -7.682346343994141
    5. '):
' → logprob: -8.05734634399414
    6. ' ):
' → logprob: -9.68234634399414
    7. ' ):' → logprob: -9.93234634399414
    8. ':
' → logprob: -10.05734634399414
    9. ',' → logprob: -11.30734634399414
    10. '-' → logprob: -11.55734634399414

Token 67: '   ' (ID: 271)
  Prédit: ' print'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' print' → logprob: -0.22852550446987152
    2. ' if' → logprob: -2.353525400161743
    3. '   ' → logprob: -2.728525400161743
    4. 'print' → logprob: -3.478525400161743
    5. 'if' → logprob: -4.353525638580322
    6. ' ' → logprob: -9.978525161743164
    7. '	print' → logprob: -10.353525161743164
    8. ' 
' → logprob: -10.853525161743164
    9. '#' → logprob: -10.978525161743164
    10. '    
' → logprob: -11.478525161743164

Token 68: ' if' (ID: 538)
  Prédit: 'print'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'print' → logprob: -0.20445017516613007
    2. 'if' (adapté à ' if') → logprob: -2.2044501304626465
    3. ' print' → logprob: -2.9544501304626465
    4. ' if' → logprob: -3.8294501304626465
    5. '   ' → logprob: -7.3294501304626465
    6. ' ' → logprob: -10.454450607299805
    7. 'pr' → logprob: -10.454450607299805
    8. 'prin' → logprob: -11.829450607299805
    9. ' prin' → logprob: -11.829450607299805
    10. 'p' → logprob: -11.954450607299805

Token 69: ' P' (ID: 398)
  Prédit: 'P'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'P' → logprob: -0.5761932134628296
    2. ' P' → logprob: -0.8261932134628296
    3. '   ' → logprob: -8.576192855834961
    4. ' ' → logprob: -10.451192855834961
    5. '	P' → logprob: -11.576192855834961
    6. '(P' → logprob: -12.326192855834961
    7. 'K' → logprob: -12.451192855834961
    8. ' K' → logprob: -12.701192855834961
    9. '(' → logprob: -12.701192855834961
    10. ' ' → logprob: -13.201192855834961

Token 70: '[i' (ID: 1768)
  Prédit: '[i'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '[i' → logprob: -0.003668959951028228
    2. '>' → logprob: -5.878668785095215
    3. '>=' → logprob: -7.753668785095215
    4. ' >' → logprob: -8.878668785095215
    5. 'i' → logprob: -9.253668785095215
    6. '[' → logprob: -9.378668785095215
    7. '<=' → logprob: -9.628668785095215
    8. ' >=' → logprob: -11.128668785095215
    9. ' ' → logprob: -12.003668785095215
    10. ' <=' → logprob: -12.628668785095215

Token 71: ']' (ID: 60)
  Prédit: '>'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '>' → logprob: -0.5928494930267334
    2. ' >' → logprob: -0.8428494930267334
    3. '>=' → logprob: -5.2178497314453125
    4. ' >=' → logprob: -5.7178497314453125
    5. '>K' → logprob: -5.8428497314453125
    6. ' ' → logprob: -6.2178497314453125
    7. ' <=' → logprob: -6.7178497314453125
    8. '<=' → logprob: -6.8428497314453125
    9. '">' → logprob: -9.280349731445312
    10. ')' → logprob: -9.280349731445312

Token 72: ' -' (ID: 533)
  Prédit: '>'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '>' → logprob: -0.08714696019887924
    2. ' >' → logprob: -2.7121469974517822
    3. '>=' → logprob: -4.837146759033203
    4. '>K' → logprob: -4.837146759033203
    5. '<=' → logprob: -7.962146759033203
    6. ' >=' → logprob: -8.087146759033203
    7. '>N' → logprob: -8.462146759033203
    8. ' ' → logprob: -9.712146759033203
    9. '>C' → logprob: -9.712146759033203
    10. '>P' → logprob: -9.962146759033203

Token 73: ' Q' (ID: 1486)
  Prédit: 'Q'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'Q' → logprob: -0.8806869983673096
    2. 'K' → logprob: -1.2556869983673096
    3. ' K' → logprob: -1.6306869983673096
    4. ' Q' → logprob: -2.3806869983673096
    5. '>=' → logprob: -4.8806867599487305
    6. ' >=' → logprob: -7.1306867599487305
    7. '>K' → logprob: -7.3806867599487305
    8. '>' → logprob: -7.5056867599487305
    9. '0' → logprob: -7.5056867599487305
    10. '1' → logprob: -7.5056867599487305

Token 74: ' >' (ID: 1424)
  Prédit: '>='
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '>=' → logprob: -0.054484542459249496
    2. ' >=' → logprob: -3.5544846057891846
    3. '/' → logprob: -4.3044843673706055
    4. '>' → logprob: -4.9294843673706055
    5. '/K' → logprob: -6.0544843673706055
    6. '//' → logprob: -7.4294843673706055
    7. ' >' → logprob: -8.554484367370605
    8. '/k' → logprob: -8.929484367370605
    9. '+' → logprob: -9.679484367370605
    10. '≥' → logprob: -9.804484367370605

Token 75: ' ' (ID: 220)
  Prédit: '='
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '=' → logprob: -0.03187437355518341
    2. '0' → logprob: -3.531874418258667
    3. ' ' → logprob: -6.281874179840088
    4. ' =' → logprob: -8.531874656677246
    5. '>=' → logprob: -11.031874656677246
    6. '=-' → logprob: -12.156874656677246
    7. '-' → logprob: -12.531874656677246
    8. ' -' → logprob: -12.531874656677246
    9. '==' → logprob: -12.656874656677246
    10. '=(' → logprob: -12.781874656677246

Token 76: '0' (ID: 15)
  Prédit: '0'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '0' → logprob: -0.0062720514833927155
    2. ' ' → logprob: -5.131271839141846
    3. '=' → logprob: -8.006272315979004
    4. '  ' → logprob: -12.631272315979004
    5. '-' → logprob: -13.006272315979004
    6. '   ' → logprob: -13.756272315979004
    7. '<|end|>' → logprob: -14.381272315979004
    8. '>=' → logprob: -14.506272315979004
    9. ' =' → logprob: -14.881272315979004
    10. '>' → logprob: -15.381272315979004

Token 77: ':
' (ID: 734)
  Prédit: ':'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ':' → logprob: -0.0004693994123954326
    2. ' :' → logprob: -8.250469207763672
    3. ':
' → logprob: -8.500469207763672
    4. 'print' → logprob: -13.875469207763672
    5. '   ' → logprob: -14.125469207763672
    6. ' :
' → logprob: -14.375469207763672
    7. ' and' → logprob: -14.500469207763672
    8. ' print' → logprob: -14.875469207763672
    9. ':#' → logprob: -15.250469207763672
    10. ':`' → logprob: -15.250469207763672

Token 78: '       ' (ID: 309)
  Prédit: '       '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '       ' → logprob: -0.30646002292633057
    2. '   ' → logprob: -2.056459903717041
    3. ' print' → logprob: -2.306459903717041
    4. 'print' → logprob: -3.681459903717041
    5. '    ' → logprob: -4.806459903717041
    6. ' ' → logprob: -6.806459903717041
    7. '     ' → logprob: -8.0564603805542
    8. '	print' → logprob: -8.4314603805542
    9. ' ' → logprob: -8.8064603805542
    10. '0' → logprob: -8.8064603805542

Token 79: ' print' (ID: 2123)
  Prédit: 'print'
  Correct (stricte): False
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'print' (adapté à ' print') → logprob: -0.5238111615180969
    2. ' print' → logprob: -0.8988111615180969
    3. '   ' → logprob: -7.523811340332031
    4. ' ' → logprob: -10.523811340332031
    5. ' prin' → logprob: -10.648811340332031
    6. '       ' → logprob: -11.273811340332031
    7. 'pr' → logprob: -11.273811340332031
    8. '    ' → logprob: -11.398811340332031
    9. '	print' → logprob: -11.398811340332031
    10. ''' → logprob: -11.398811340332031

Token 80: '("' (ID: 568)
  Prédit: '"'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '"' → logprob: -0.07041952013969421
    2. '("' → logprob: -3.4454195499420166
    3. 'Yes' → logprob: -4.6954193115234375
    4. '('' → logprob: -5.0704193115234375
    5. ''' → logprob: -5.1954193115234375
    6. ' "' → logprob: -5.5704193115234375
    7. '(' → logprob: -5.8204193115234375
    8. '"W' → logprob: -6.5704193115234375
    9. '(i' → logprob: -7.3204193115234375
    10. 'YES' → logprob: -7.4454193115234375

Token 81: 'Yes' (ID: 13022)
  Prédit: 'Yes'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'Yes' → logprob: -0.004075789824128151
    2. '"' → logprob: -6.00407600402832
    3. 'YES' → logprob: -7.25407600402832
    4. 'No' → logprob: -7.62907600402832
    5. ' Yes' → logprob: -8.62907600402832
    6. 'o' → logprob: -9.62907600402832
    7. 'A' → logprob: -10.25407600402832
    8. '"A' → logprob: -11.00407600402832
    9. 'a' → logprob: -11.25407600402832
    10. '"No' → logprob: -11.25407600402832

Token 82: '")
' (ID: 1896)
  Prédit: '")'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '")' → logprob: -0.03099113143980503
    2. '")
' → logprob: -3.5309910774230957
    3. ')' → logprob: -6.905991077423096
    4. ')
' → logprob: -8.905991554260254
    5. 'else' → logprob: -10.030991554260254
    6. '")
' → logprob: -10.280991554260254
    7. '"' → logprob: -11.655991554260254
    8. '");' → logprob: -12.530991554260254
    9. '")

' → logprob: -12.655991554260254
    10. ')")' → logprob: -13.280991554260254

Token 83: '   ' (ID: 271)
  Prédit: 'else'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'else' → logprob: -0.12996791303157806
    2. '   ' → logprob: -2.6299679279327393
    3. ' else' → logprob: -3.0049679279327393
    4. ' ' → logprob: -9.00496768951416
    5. '	else' → logprob: -9.37996768951416
    6. '```' → logprob: -10.62996768951416
    7. '<|end|>' → logprob: -12.12996768951416
    8. 'Else' → logprob: -12.37996768951416
    9. '  ' → logprob: -12.50496768951416
    10. '
' → logprob: -12.50496768951416

Token 84: ' else' (ID: 1203)
  Prédit: 'else'
  Correct (stricte): False
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'else' (adapté à ' else') → logprob: -0.034875284880399704
    2. '   ' → logprob: -3.6598753929138184
    3. ' else' → logprob: -4.784875392913818
    4. '	else' → logprob: -8.78487491607666
    5. ' ' → logprob: -10.78487491607666
    6. '  ' → logprob: -12.40987491607666
    7. '<|end|>' → logprob: -12.78487491607666
    8. '```' → logprob: -13.28487491607666
    9. '       ' → logprob: -15.78487491607666
    10. ')' → logprob: -16.534875869750977

Token 85: ':
' (ID: 734)
  Prédit: '       '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '       ' → logprob: -0.024254553020000458
    2. ':' → logprob: -4.149254322052002
    3. '   ' → logprob: -5.274254322052002
    4. ':
' → logprob: -6.024254322052002
    5. '    ' → logprob: -9.14925479888916
    6. '     ' → logprob: -9.27425479888916
    7. '
' → logprob: -9.39925479888916
    8. '      ' → logprob: -9.52425479888916
    9. '<|end|>' → logprob: -9.64925479888916
    10. '(' → logprob: -10.02425479888916

Token 86: '       ' (ID: 309)
  Prédit: '       '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '       ' → logprob: -0.22350190579891205
    2. 'print' → logprob: -2.4735019207000732
    3. '   ' → logprob: -2.7235019207000732
    4. ' print' → logprob: -3.0985019207000732
    5. '    ' → logprob: -6.223501682281494
    6. '"' → logprob: -6.348501682281494
    7. '     ' → logprob: -7.723501682281494
    8. ' ' → logprob: -8.223502159118652
    9. '```' → logprob: -8.973502159118652
    10. '	print' → logprob: -9.098502159118652

Token 87: ' print' (ID: 2123)
  Prédit: 'print'
  Correct (stricte): False
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'print' (adapté à ' print') → logprob: -0.08051937073469162
    2. ' print' → logprob: -3.080519437789917
    3. '       ' → logprob: -3.580519437789917
    4. '   ' → logprob: -5.705519199371338
    5. '	print' → logprob: -9.205519676208496
    6. ' ' → logprob: -9.580519676208496
    7. '     ' → logprob: -10.705519676208496
    8. '    ' → logprob: -11.205519676208496
    9. '  ' → logprob: -11.330519676208496
    10. '"' → logprob: -11.830519676208496

Token 88: '("' (ID: 568)
  Prédit: '("'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '("' → logprob: -0.07924071699380875
    2. '(' → logprob: -2.5792407989501953
    3. '("("' → logprob: -8.204240798950195
    4. '("")' → logprob: -9.704240798950195
    5. '("""' → logprob: -12.454240798950195
    6. '()' → logprob: -12.454240798950195
    7. '("(' → logprob: -12.579240798950195
    8. '('' → logprob: -12.704240798950195
    9. '(""' → logprob: -13.954240798950195
    10. '(
' → logprob: -15.079240798950195

Token 89: 'No' (ID: 3160)
  Prédit: 'No'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'No' → logprob: -0.00015943869948387146
    2. '"No' → logprob: -8.75015926361084
    3. ' No' → logprob: -14.12515926361084
    4. '"' → logprob: -15.75015926361084
    5. '_No' → logprob: -18.000160217285156
    6. '")' → logprob: -18.000160217285156
    7. '   ' → logprob: -18.125160217285156
    8. 'NO' → logprob: -18.250160217285156
    9. '“No' → logprob: -18.375160217285156
    10. 'N' → logprob: -18.375160217285156

Token 90: '")' (ID: 1405)
  Prédit: '")'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '")' → logprob: -0.04895113781094551
    2. ')' → logprob: -3.0489511489868164
    3. ')")' → logprob: -7.923951148986816
    4. '`)' → logprob: -14.298951148986816
    5. '")
' → logprob: -14.798951148986816
    6. '```' → logprob: -15.298951148986816
    7. '}")' → logprob: -15.673951148986816
    8. '')' → logprob: -16.2989501953125
    9. ')
' → logprob: -16.6739501953125
    10. '"' → logprob: -17.0489501953125


RÉSUMÉ:
--------------------------------------------------------------------------------
Total des tokens analysés: 88
Tokens correctement prédits (1ère position, stricte): 36
Tokens correctement prédits (1ère position, avec adaptation): 40
Tokens correctement prédits (top 10): 75
Précision stricte (1ère position): 40.91%
Précision adaptée (1ère position): 45.45%
Précision (top 10): 85.23%
================================================================================
