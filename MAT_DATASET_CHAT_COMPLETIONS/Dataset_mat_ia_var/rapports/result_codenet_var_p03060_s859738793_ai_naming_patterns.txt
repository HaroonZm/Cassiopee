================================================================================
ANALYSE DE PRÉDICTION TOKEN PAR TOKEN (BATCH API)
Date: 2025-06-04 20:01:56
Modèle de tokenisation: gpt-4o-mini
================================================================================

SCRIPT ANALYSÉ:
--------------------------------------------------------------------------------
input_length = int(input())
input_values = list(map(int, input().split()))
input_costs = list(map(int, input().split()))
result_sum = 0
for index in range(input_length):
    if input_values[index] > input_costs[index]:
        result_sum += input_values[index] - input_costs[index]
print(result_sum)
--------------------------------------------------------------------------------

RÉSULTATS D'ANALYSE TOKEN PAR TOKEN:
--------------------------------------------------------------------------------
Token 0: 'input' (ID: 2586)
  → Token d'amorce (pas de prédiction)

Token 1: '_length' (ID: 11514)
  → Token d'amorce (pas de prédiction)

Token 2: ' =' (ID: 314)
  → Token d'amorce (pas de prédiction)

Token 3: ' int' (ID: 677)
  Prédit: ' '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' ' → logprob: -0.14844834804534912
    2. '0' → logprob: -2.3984484672546387
    3. '32' → logprob: -3.1484484672546387
    4. ' len' → logprob: -6.023448467254639
    5. '20' → logprob: -7.523448467254639
    6. '10' → logprob: -8.14844799041748
    7. '16' → logprob: -9.02344799041748
    8. 'input' → logprob: -9.14844799041748
    9. 'len' → logprob: -9.14844799041748
    10. ' input' → logprob: -9.27344799041748

Token 4: '(input' (ID: 10054)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(' → logprob: -0.004122450016438961
    2. '```' → logprob: -6.504122257232666
    3. ''' → logprob: -6.629122257232666
    4. '`' → logprob: -8.254122734069824
    5. '(input' → logprob: -8.379122734069824
    6. '('' → logprob: -8.379122734069824
    7. '_' → logprob: -9.379122734069824
    8. '("("' → logprob: -9.504122734069824
    9. '"' → logprob: -9.754122734069824
    10. ')' → logprob: -9.879122734069824

Token 5: '())
' (ID: 4574)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '(' → logprob: -0.025791693478822708
    2. ')' → logprob: -3.900791645050049
    3. '()' → logprob: -5.650791645050049
    4. '())' → logprob: -7.025791645050049
    5. '('' → logprob: -8.650792121887207
    6. '(
' → logprob: -9.275792121887207
    7. '("("' → logprob: -9.525792121887207
    8. '(()' → logprob: -9.775792121887207
    9. '```' → logprob: -9.775792121887207
    10. '<|end|>' → logprob: -10.025792121887207

Token 6: 'input' (ID: 2586)
  Prédit: 'if'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'if' → logprob: -0.3424232006072998
    2. 'for' → logprob: -2.3424232006073
    3. ' if' → logprob: -3.4674232006073
    4. 'i' → logprob: -3.9674232006073
    5. '\n' → logprob: -3.9674232006073
    6. '`' → logprob: -4.217423439025879
    7. '*' → logprob: -4.467423439025879
    8. '#' → logprob: -4.467423439025879
    9. '\' → logprob: -4.592423439025879
    10. '_' → logprob: -4.842423439025879

Token 7: '_values' (ID: 20393)
  Prédit: '_length'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '_length' → logprob: -0.2797367572784424
    2. '_' → logprob: -1.7797367572784424
    3. '(' → logprob: -3.1547367572784424
    4. '()' → logprob: -4.029736518859863
    5. ''' → logprob: -5.404736518859863
    6. '[' → logprob: -6.154736518859863
    7. '```' → logprob: -6.404736518859863
    8. '('' → logprob: -7.029736518859863
    9. '"' → logprob: -7.154736518859863
    10. '_size' → logprob: -7.529736518859863

Token 8: ' =' (ID: 314)
  Prédit: '['
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '[' → logprob: -0.054307177662849426
    2. '.' → logprob: -3.304307222366333
    3. '[]' → logprob: -4.804306983947754
    4. '[input' → logprob: -5.929306983947754
    5. '```' → logprob: -6.554306983947754
    6. '[:]' → logprob: -7.179306983947754
    7. ')' → logprob: -7.554306983947754
    8. '.append' → logprob: -7.679306983947754
    9. '()' → logprob: -8.679306983947754
    10. '=' → logprob: -8.679306983947754

Token 9: ' list' (ID: 1562)
  Prédit: 'list'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'list' → logprob: -1.4789111614227295
    2. '[input' → logprob: -1.6039111614227295
    3. ' list' → logprob: -1.7289111614227295
    4. 'input' → logprob: -1.8539111614227295
    5. '[' → logprob: -2.7289111614227295
    6. ' [' → logprob: -2.9789111614227295
    7. ' []' → logprob: -3.1039111614227295
    8. '[]' → logprob: -3.2289111614227295
    9. ' input' → logprob: -3.4789111614227295
    10. '[list' → logprob: -5.853911399841309

Token 10: '(map' (ID: 16946)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '(' → logprob: -0.0011286636581644416
    2. '(range' → logprob: -7.626128673553467
    3. '(input' → logprob: -8.376128196716309
    4. '[' → logprob: -9.876128196716309
    5. '[(' → logprob: -9.876128196716309
    6. '```' → logprob: -9.876128196716309
    7. '(values' → logprob: -10.251128196716309
    8. '_values' → logprob: -11.001128196716309
    9. ' (' → logprob: -11.126128196716309
    10. '(user' → logprob: -11.376128196716309

Token 11: '(int' (ID: 2742)
  Prédit: '(int'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(int' → logprob: -0.08293486386537552
    2. '(' → logprob: -2.707934856414795
    3. '(input' → logprob: -5.457934856414795
    4. '(lambda' → logprob: -5.457934856414795
    5. '(str' → logprob: -5.832934856414795
    6. ')' → logprob: -7.707934856414795
    7. 'int' → logprob: -7.957934856414795
    8. '(
' → logprob: -8.707935333251953
    9. '<int' → logprob: -9.332935333251953
    10. '(eval' → logprob: -9.582935333251953

Token 12: ',' (ID: 11)
  Prédit: '(input'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(input' → logprob: -0.005832218565046787
    2. '(' → logprob: -5.255832195281982
    3. ',input' → logprob: -8.63083267211914
    4. '))' → logprob: -8.88083267211914
    5. 'input' → logprob: -9.00583267211914
    6. ')' → logprob: -9.38083267211914
    7. '=input' → logprob: -11.38083267211914
    8. ',' → logprob: -11.75583267211914
    9. ' (' → logprob: -11.75583267211914
    10. '(eval' → logprob: -11.75583267211914

Token 13: ' input' (ID: 3422)
  Prédit: ' input'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' input' → logprob: -0.3132658004760742
    2. 'input' → logprob: -1.3132658004760742
    3. '(input' → logprob: -12.563265800476074
    4. ',input' → logprob: -15.188265800476074
    5. '	input' → logprob: -16.18826675415039
    6. '<input' → logprob: -16.31326675415039
    7. ' ' → logprob: -17.06326675415039
    8. '=input' → logprob: -17.18826675415039
    9. '[input' → logprob: -18.18826675415039
    10. '_input' → logprob: -18.43826675415039

Token 14: '().' (ID: 1454)
  Prédit: '()'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '()' → logprob: -0.8956952691078186
    2. '().' → logprob: -0.8956952691078186
    3. '()))' → logprob: -1.8956952095031738
    4. '())' → logprob: -4.395695209503174
    5. '(' → logprob: -4.770695209503174
    6. '(input' → logprob: -5.145695209503174
    7. '())))' → logprob: -5.520695209503174
    8. '()));' → logprob: -6.645695209503174
    9. '))' → logprob: -7.895695209503174
    10. ')' → logprob: -8.770695686340332

Token 15: 'split' (ID: 13627)
  Prédit: 'split'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'split' → logprob: -0.0004353181866463274
    2. 'strip' → logprob: -7.7504353523254395
    3. ' split' → logprob: -13.125434875488281
    4. 'rstrip' → logprob: -13.125434875488281
    5. '(split' → logprob: -14.750434875488281
    6. 'spl' → logprob: -15.750434875488281
    7. ')' → logprob: -17.50043487548828
    8. 'read' → logprob: -17.87543487548828
    9. 's' → logprob: -18.62543487548828
    10. ' strip' → logprob: -19.00043487548828

Token 16: '()))
' (ID: 24521)
  Prédit: '()))'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '()))' → logprob: -0.16517159342765808
    2. '())' → logprob: -2.4151716232299805
    3. '))' → logprob: -3.0401716232299805
    4. '()' → logprob: -5.1651716232299805
    5. ')' → logprob: -5.4151716232299805
    6. '(' → logprob: -5.4151716232299805
    7. '('' → logprob: -8.41517162322998
    8. '())))' → logprob: -9.29017162322998
    9. '()))
' → logprob: -10.29017162322998
    10. ')))' → logprob: -10.41517162322998

Token 17: 'input' (ID: 2586)
  Prédit: '\n'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '\n' → logprob: -0.982246994972229
    2. 'if' → logprob: -1.857246994972229
    3. 'for' → logprob: -1.982246994972229
    4. ')' → logprob: -2.6072468757629395
    5. '\' → logprob: -3.1072468757629395
    6. '[' → logprob: -3.6072468757629395
    7. '.' → logprob: -3.6072468757629395
    8. '#' → logprob: -3.6072468757629395
    9. 'output' → logprob: -3.8572468757629395
    10. 'print' → logprob: -4.4822468757629395

Token 18: '_cost' (ID: 36820)
  Prédit: '_values'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '_values' → logprob: -0.008352394215762615
    2. '_length' → logprob: -5.258352279663086
    3. '_' → logprob: -5.883352279663086
    4. '_lengths' → logprob: -8.258352279663086
    5. '(' → logprob: -11.383352279663086
    6. '_vals' → logprob: -11.633352279663086
    7. '_value' → logprob: -11.758352279663086
    8. '()' → logprob: -12.258352279663086
    9. ')' → logprob: -12.383352279663086
    10. ' _' → logprob: -12.508352279663086

Token 19: 's' (ID: 82)
  Prédit: 's'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 's' → logprob: -0.3717125952243805
    2. '_' → logprob: -2.1217126846313477
    3. '[' → logprob: -2.2467126846313477
    4. '_s' → logprob: -2.7467126846313477
    5. ')' → logprob: -4.371712684631348
    6. '_values' → logprob: -6.121712684631348
    7. '[s' → logprob: -6.621712684631348
    8. '_per' → logprob: -7.121712684631348
    9. '_cost' → logprob: -7.246712684631348
    10. '[_' → logprob: -7.496712684631348

Token 20: ' =' (ID: 314)
  Prédit: ' ='
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' =' → logprob: -0.016545003280043602
    2. '=' → logprob: -4.141544818878174
    3. ')' → logprob: -8.141545295715332
    4. '[' → logprob: -9.141545295715332
    5. '_' → logprob: -9.266545295715332
    6. '[:]' → logprob: -13.141545295715332
    7. '_space' → logprob: -13.391545295715332
    8. '.' → logprob: -13.516545295715332
    9. ' )' → logprob: -13.516545295715332
    10. ' =[' → logprob: -13.516545295715332

Token 21: ' list' (ID: 1562)
  Prédit: 'list'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'list' → logprob: -0.575946569442749
    2. ' list' → logprob: -0.825946569442749
    3. '(list' → logprob: -11.950946807861328
    4. 'map' → logprob: -15.075946807861328
    5. ' map' → logprob: -16.575946807861328
    6. 'int' → logprob: -16.825946807861328
    7. 'List' → logprob: -16.950946807861328
    8. '[' → logprob: -16.950946807861328
    9. '	list' → logprob: -17.575946807861328
    10. '=list' → logprob: -17.700946807861328

Token 22: '(map' (ID: 16946)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(' → logprob: -0.1499875783920288
    2. '(map' → logprob: -2.1499876976013184
    3. '(int' → logprob: -4.024987697601318
    4. '((' → logprob: -6.524987697601318
    5. '(list' → logprob: -6.774987697601318
    6. '(lambda' → logprob: -7.899987697601318
    7. '(range' → logprob: -8.02498722076416
    8. '(input' → logprob: -8.77498722076416
    9. '(len' → logprob: -8.89998722076416
    10. '(

' → logprob: -8.89998722076416

Token 23: '(int' (ID: 2742)
  Prédit: '(int'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(int' → logprob: -0.012898662127554417
    2. '(' → logprob: -4.3878984451293945
    3. '<int' → logprob: -9.387898445129395
    4. ')' → logprob: -9.512898445129395
    5. '=int' → logprob: -9.762898445129395
    6. 'int' → logprob: -9.762898445129395
    7. ' (' → logprob: -10.762898445129395
    8. '```' → logprob: -10.762898445129395
    9. '[int' → logprob: -11.137898445129395
    10. ')(' → logprob: -11.137898445129395

Token 24: ',' (ID: 11)
  Prédit: ','
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ',' → logprob: -0.8297324180603027
    2. ',input' → logprob: -0.8297324180603027
    3. '(input' → logprob: -2.0797324180603027
    4. '(' → logprob: -7.079732418060303
    5. ',int' → logprob: -7.454732418060303
    6. 'input' → logprob: -7.579732418060303
    7. '(int' → logprob: -8.079732894897461
    8. ' ,' → logprob: -8.704732894897461
    9. '```' → logprob: -9.579732894897461
    10. '=input' → logprob: -9.954732894897461

Token 25: ' input' (ID: 3422)
  Prédit: 'input'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'input' → logprob: -0.38691508769989014
    2. ' input' → logprob: -1.1369150876998901
    3. '(input' → logprob: -10.13691520690918
    4. 'int' → logprob: -12.88691520690918
    5. ',input' → logprob: -14.26191520690918
    6. '=input' → logprob: -14.38691520690918
    7. '<input' → logprob: -15.13691520690918
    8. '	input' → logprob: -16.01191520690918
    9. '[input' → logprob: -16.26191520690918
    10. ' ' → logprob: -17.13691520690918

Token 26: '().' (ID: 1454)
  Prédit: '().'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '().' → logprob: -3.833878508885391e-05
    2. '()' → logprob: -10.250038146972656
    3. '.' → logprob: -13.500038146972656
    4. '()))' → logprob: -14.375038146972656
    5. '(' → logprob: -15.000038146972656
    6. '())' → logprob: -15.875038146972656
    7. '(.' → logprob: -15.875038146972656
    8. ' ().' → logprob: -15.875038146972656
    9. '()));' → logprob: -16.500038146972656
    10. ' .' → logprob: -17.375038146972656

Token 27: 'split' (ID: 13627)
  Prédit: 'split'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'split' → logprob: -3.4121114822482923e-06
    2. ')' → logprob: -12.750003814697266
    3. ' split' → logprob: -15.500003814697266
    4. 'strip' → logprob: -15.625003814697266
    5. '(split' → logprob: -16.625003814697266
    6. '))' → logprob: -16.750003814697266
    7. 'spl' → logprob: -17.875003814697266
    8. 'input' → logprob: -18.250003814697266
    9. 'rstrip' → logprob: -18.250003814697266
    10. '```' → logprob: -18.750003814697266

Token 28: '()))
' (ID: 24521)
  Prédit: '()))'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '()))' → logprob: -0.2256295382976532
    2. '())' → logprob: -1.7256295680999756
    3. '()' → logprob: -4.1006293296813965
    4. '))' → logprob: -5.3506293296813965
    5. ')' → logprob: -5.9756293296813965
    6. '()))
' → logprob: -10.600629806518555
    7. '(' → logprob: -10.975629806518555
    8. '()));' → logprob: -11.350629806518555
    9. '()))

' → logprob: -12.600629806518555
    10. '()),' → logprob: -12.725629806518555

Token 29: 'result' (ID: 2521)
  Prédit: 'for'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'for' → logprob: -1.1957814693450928
    2. 'result' → logprob: -1.3207814693450928
    3. 'total' → logprob: -1.8207814693450928
    4. 'n' → logprob: -2.8207814693450928
    5. ')' → logprob: -3.0707814693450928
    6. 'c' → logprob: -3.4457814693450928
    7. 's' → logprob: -3.5707814693450928
    8. '#' → logprob: -4.195781707763672
    9. 'output' → logprob: -4.320781707763672
    10. 'max' → logprob: -4.445781707763672

Token 30: '_sum' (ID: 29859)
  Prédit: '_'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '_' → logprob: -0.7877658009529114
    2. ' =' → logprob: -0.7877658009529114
    3. '=' → logprob: -2.5377657413482666
    4. '(' → logprob: -5.037765979766846
    5. 's' → logprob: -6.787765979766846
    6. ')' → logprob: -6.787765979766846
    7. '[' → logprob: -7.287765979766846
    8. ' ' → logprob: -7.412765979766846
    9. '_space' → logprob: -7.662765979766846
    10. '.' → logprob: -8.162765502929688

Token 31: ' =' (ID: 314)
  Prédit: ' ='
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' =' → logprob: -0.757524311542511
    2. '_' → logprob: -1.2575242519378662
    3. '(' → logprob: -1.7575242519378662
    4. '=' → logprob: -2.632524251937866
    5. 's' → logprob: -7.382524490356445
    6. ')' → logprob: -7.632524490356445
    7. '_space' → logprob: -7.632524490356445
    8. ' ' → logprob: -8.632524490356445
    9. ' +=' → logprob: -9.132524490356445
    10. '()' → logprob: -9.132524490356445

Token 32: ' ' (ID: 220)
  Prédit: '0'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '0' → logprob: -0.4340168833732605
    2. ' ' → logprob: -1.0590169429779053
    3. ' max' → logprob: -5.684016704559326
    4. ' sum' → logprob: -6.684016704559326
    5. 'sum' → logprob: -8.059017181396484
    6. 'max' → logprob: -8.434017181396484
    7. ' input' → logprob: -9.934017181396484
    8. ' ' → logprob: -10.559017181396484
    9. 'input' → logprob: -11.059017181396484
    10. ' []' → logprob: -12.684017181396484

Token 33: '0' (ID: 15)
  Prédit: '0'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '0' → logprob: -0.0005620885640382767
    2. 'sum' → logprob: -7.6255621910095215
    3. 'max' → logprob: -9.750561714172363
    4. ' ' → logprob: -11.375561714172363
    5. 'input' → logprob: -12.750561714172363
    6. 'min' → logprob: -14.750561714172363
    7. 'result' → logprob: -15.375561714172363
    8. '(sum' → logprob: -15.750561714172363
    9. ' sum' → logprob: -16.12556266784668
    10. '(' → logprob: -16.12556266784668

Token 34: '
' (ID: 198)
  Prédit: 'for'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'for' → logprob: -0.006284371484071016
    2. '
' → logprob: -5.381284236907959
    3. ' for' → logprob: -6.631284236907959
    4. '\n' → logprob: -8.256284713745117
    5. '' → logprob: -10.631284713745117
    6. 'n' → logprob: -11.131284713745117
    7. 'f' → logprob: -11.506284713745117
    8. 'i' → logprob: -12.131284713745117
    9. '<|end|>' → logprob: -12.256284713745117
    10. '#' → logprob: -12.381284713745117

Token 35: 'for' (ID: 1938)
  Prédit: 'for'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'for' → logprob: -0.0006072447285987437
    2. 'f' → logprob: -7.750607013702393
    3. 'n' → logprob: -9.75060749053955
    4. '\n' → logprob: -10.25060749053955
    5. 'i' → logprob: -10.50060749053955
    6. ' for' → logprob: -10.75060749053955
    7. '```' → logprob: -11.37560749053955
    8. '
' → logprob: -11.87560749053955
    9. '\' → logprob: -12.62560749053955
    10. 'fo' → logprob: -12.75060749053955

Token 36: ' index' (ID: 3472)
  Prédit: ' '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' ' → logprob: -0.39075836539268494
    2. ' i' → logprob: -1.1407583951950073
    3. ' _' → logprob: -5.765758514404297
    4. '  ' → logprob: -8.015758514404297
    5. '_' → logprob: -8.515758514404297
    6. 'i' → logprob: -9.765758514404297
    7. ' value' → logprob: -10.140758514404297
    8. ' item' → logprob: -10.140758514404297
    9. ' input' → logprob: -10.640758514404297
    10. ' ‌' → logprob: -10.640758514404297

Token 37: ' in' (ID: 306)
  Prédit: ' in'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' in' → logprob: -0.06574524194002151
    2. 'in' → logprob: -3.3157453536987305
    3. ' ' → logprob: -3.6907453536987305
    4. '_' → logprob: -7.3157453536987305
    5. '<|end|>' → logprob: -7.6907453536987305
    6. ')' → logprob: -8.06574535369873
    7. '[' → logprob: -8.31574535369873
    8. '  ' → logprob: -8.81574535369873
    9. '   ' → logprob: -9.19074535369873
    10. ' )' → logprob: -9.69074535369873

Token 38: ' range' (ID: 3352)
  Prédit: ' range'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' range' → logprob: -0.0031838975846767426
    2. 'range' → logprob: -5.753183841705322
    3. '(range' → logprob: -12.50318431854248
    4. '	range' → logprob: -13.50318431854248
    5. ' input' → logprob: -14.00318431854248
    6. '_range' → logprob: -16.128183364868164
    7. ' xrange' → logprob: -16.503183364868164
    8. 'input' → logprob: -17.878183364868164
    9. ' ' → logprob: -18.378183364868164
    10. '.range' → logprob: -18.628183364868164

Token 39: '(input' (ID: 10054)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(' → logprob: -0.16118574142456055
    2. '(input' → logprob: -1.9111857414245605
    3. '(len' → logprob: -7.0361857414245605
    4. ' (' → logprob: -9.536186218261719
    5. '(length' → logprob: -12.786186218261719
    6. '(
' → logprob: -13.286186218261719
    7. 'input' → logprob: -13.411186218261719
    8. '(in' → logprob: -14.036186218261719
    9. '(

' → logprob: -14.036186218261719
    10. ' input' → logprob: -14.661186218261719

Token 40: '_length' (ID: 11514)
  Prédit: '_length'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_length' → logprob: -0.00016349162615370005
    2. '_l' → logprob: -8.750163078308105
    3. '_' → logprob: -12.625163078308105
    4. '_len' → logprob: -13.875163078308105
    5. '_lengths' → logprob: -14.875163078308105
    6. '_le' → logprob: -15.875163078308105
    7. ' _' → logprob: -16.375164031982422
    8. ')' → logprob: -17.000164031982422
    9. '_)' → logprob: -17.375164031982422
    10. 'length' → logprob: -17.625164031982422

Token 41: '):
' (ID: 1883)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')' → logprob: -0.52609783411026
    2. '):' → logprob: -0.90109783411026
    3. ' )' → logprob: -6.901097774505615
    4. ' ):' → logprob: -6.901097774505615
    5. '+' → logprob: -7.276097774505615
    6. ':' → logprob: -8.526098251342773
    7. ' +' → logprob: -11.151098251342773
    8. '):
' → logprob: -11.151098251342773
    9. ' ' → logprob: -11.151098251342773
    10. '   ' → logprob: -12.151098251342773

Token 42: '   ' (ID: 271)
  Prédit: ' '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' ' → logprob: -0.8219092488288879
    2. '   ' → logprob: -0.9469092488288879
    3. ' if' → logprob: -2.946909189224243
    4. '    ' → logprob: -3.321909189224243
    5. 'result' → logprob: -3.321909189224243
    6. '<|end|>' → logprob: -4.321909427642822
    7. ':' → logprob: -4.696909427642822
    8. ' result' → logprob: -4.821909427642822
    9. '```' → logprob: -5.946909427642822
    10. 'if' → logprob: -5.946909427642822

Token 43: ' if' (ID: 538)
  Prédit: ' result'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' result' → logprob: -0.7712188363075256
    2. 'result' → logprob: -0.7712188363075256
    3. ' if' → logprob: -2.646218776702881
    4. 'if' (adapté à ' if') → logprob: -5.646218776702881
    5. '   ' → logprob: -8.021219253540039
    6. ' ' → logprob: -8.646219253540039
    7. '    ' → logprob: -9.771219253540039
    8. '(result' → logprob: -10.646219253540039
    9. '_result' → logprob: -11.271219253540039
    10. '[result' → logprob: -11.646219253540039

Token 44: ' input' (ID: 3422)
  Prédit: ' input'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' input' → logprob: -0.046558134257793427
    2. 'input' → logprob: -3.171558141708374
    3. ' ' → logprob: -5.671557903289795
    4. ' result' → logprob: -10.171558380126953
    5. ' (' → logprob: -10.546558380126953
    6. '(input' → logprob: -10.671558380126953
    7. 'result' → logprob: -11.921558380126953
    8. ' ' → logprob: -13.046558380126953
    9. '_input' → logprob: -13.046558380126953
    10. '[input' → logprob: -13.046558380126953

Token 45: '_values' (ID: 20393)
  Prédit: '_values'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_values' → logprob: -9.949026571121067e-05
    2. '_' → logprob: -9.625099182128906
    3. '_cost' → logprob: -10.625099182128906
    4. '_value' → logprob: -12.000099182128906
    5. '_length' → logprob: -13.000099182128906
    6. '_lengths' → logprob: -15.750099182128906
    7. 'values' → logprob: -16.125099182128906
    8. '_vals' → logprob: -16.125099182128906
    9. '[_' → logprob: -16.875099182128906
    10. ' _' → logprob: -17.000099182128906

Token 46: '[index' (ID: 11815)
  Prédit: '[index'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '[index' → logprob: -0.3903641998767853
    2. '[' → logprob: -1.140364170074463
    3. '>' → logprob: -6.140364170074463
    4. ' [' → logprob: -7.265364170074463
    5. ' >' → logprob: -7.515364170074463
    6. '```' → logprob: -10.765364646911621
    7. '[input' → logprob: -10.890364646911621
    8. '   ' → logprob: -11.890364646911621
    9. '>[' → logprob: -12.265364646911621
    10. '[token' → logprob: -12.515364646911621

Token 47: ']' (ID: 60)
  Prédit: ' >'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' >' → logprob: -0.4362909197807312
    2. '>' → logprob: -1.061290979385376
    3. ')' → logprob: -5.311290740966797
    4. ' >=' → logprob: -7.186290740966797
    5. ' <' → logprob: -7.686290740966797
    6. ' )' → logprob: -7.936290740966797
    7. ' ==' → logprob: -8.061290740966797
    8. ' ' → logprob: -8.686290740966797
    9. ' !=' → logprob: -8.811290740966797
    10. '==' → logprob: -9.186290740966797

Token 48: ' >' (ID: 1424)
  Prédit: ' >'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' >' → logprob: -0.16555249691009521
    2. '>' → logprob: -1.9155524969100952
    3. ' >=' → logprob: -6.540552616119385
    4. ' ' → logprob: -6.790552616119385
    5. ' <' → logprob: -7.165552616119385
    6. ' ==' → logprob: -7.665552616119385
    7. '%' → logprob: -7.790552616119385
    8. ' <=' → logprob: -8.040552139282227
    9. ' %' → logprob: -8.165552139282227
    10. '==' → logprob: -8.790552139282227

Token 49: ' input' (ID: 3422)
  Prédit: ' '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' ' → logprob: -0.6606859564781189
    2. '0' → logprob: -1.6606860160827637
    3. ' input' → logprob: -1.6606860160827637
    4. 'input' → logprob: -2.2856860160827637
    5. '=' → logprob: -7.410686016082764
    6. '=input' → logprob: -8.160685539245605
    7. '10' → logprob: -8.535685539245605
    8. '1' → logprob: -8.535685539245605
    9. '100' → logprob: -9.410685539245605
    10. '5' → logprob: -9.598185539245605

Token 50: '_cost' (ID: 36820)
  Prédit: '_cost'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_cost' → logprob: -0.059587765485048294
    2. '_values' → logprob: -3.0595877170562744
    3. '_length' → logprob: -4.6845879554748535
    4. '_lengths' → logprob: -6.8095879554748535
    5. '_' → logprob: -7.6845879554748535
    6. '_threshold' → logprob: -10.684587478637695
    7. '_sum' → logprob: -10.684587478637695
    8. 's' → logprob: -11.309587478637695
    9. 'cost' → logprob: -11.559587478637695
    10. '__' → logprob: -12.059587478637695

Token 51: 's' (ID: 82)
  Prédit: 's'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 's' → logprob: -3.7697225252486533e-06
    2. '_s' → logprob: -13.000003814697266
    3. '[s' → logprob: -14.625003814697266
    4. '[index' → logprob: -15.125003814697266
    5. '_cost' → logprob: -15.250003814697266
    6. '[' → logprob: -16.000003814697266
    7. 'cost' → logprob: -16.250003814697266
    8. 'с' → logprob: -16.500003814697266
    9. ' s' → logprob: -16.750003814697266
    10. 'sts' → logprob: -17.000003814697266

Token 52: '[index' (ID: 11815)
  Prédit: '[index'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '[index' → logprob: -0.001055676257237792
    2. '[' → logprob: -6.876055717468262
    3. '[in' → logprob: -12.001055717468262
    4. ' [' → logprob: -12.126055717468262
    5. '[input' → logprob: -12.876055717468262
    6. '```' → logprob: -12.876055717468262
    7. 'index' → logprob: -13.626055717468262
    8. '\[' → logprob: -14.001055717468262
    9. '[ind' → logprob: -14.126055717468262
    10. ':' → logprob: -14.251055717468262

Token 53: ']:
' (ID: 22152)
  Prédit: '):'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '):' → logprob: -0.022607596591114998
    2. ' ):' → logprob: -4.022607803344727
    3. ')' → logprob: -5.522607803344727
    4. ' )' → logprob: -8.397607803344727
    5. ':' → logprob: -8.772607803344727
    6. ' and' → logprob: -10.647607803344727
    7. '):
' → logprob: -11.272607803344727
    8. '   ' → logprob: -12.022607803344727
    9. 'and' → logprob: -12.272607803344727
    10. '+' → logprob: -12.397607803344727

Token 54: '       ' (ID: 309)
  Prédit: ':'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ':' → logprob: -0.13190077245235443
    2. '       ' → logprob: -2.2569007873535156
    3. ' :' → logprob: -4.381900787353516
    4. '    ' → logprob: -6.006900787353516
    5. '   ' → logprob: -6.631900787353516
    6. ':
' → logprob: -7.006900787353516
    7. '\n' → logprob: -8.131900787353516
    8. ' ' → logprob: -8.256900787353516
    9. ' and' → logprob: -8.506900787353516
    10. ' :
' → logprob: -8.506900787353516

Token 55: ' result' (ID: 1534)
  Prédit: 'result'
  Correct (stricte): False
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'result' (adapté à ' result') → logprob: -0.6121106743812561
    2. ' result' → logprob: -1.1121106147766113
    3. 'input' → logprob: -3.2371106147766113
    4. ' input' → logprob: -3.3621106147766113
    5. '       ' → logprob: -3.7371106147766113
    6. '           ' → logprob: -4.862110614776611
    7. ' ' → logprob: -5.362110614776611
    8. '\n' → logprob: -5.487110614776611
    9. '0' → logprob: -5.862110614776611
    10. '   ' → logprob: -6.237110614776611

Token 56: '_sum' (ID: 29859)
  Prédit: '_sum'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_sum' → logprob: -0.00041267683263868093
    2. '_' → logprob: -7.875412464141846
    3. '_s' → logprob: -11.125412940979004
    4. ' +=' → logprob: -12.875412940979004
    5. '_cost' → logprob: -13.000412940979004
    6. '_add' → logprob: -13.000412940979004
    7. ' _' → logprob: -13.000412940979004
    8. ')_' → logprob: -13.875412940979004
    9. '_SUM' → logprob: -14.500412940979004
    10. '+=' → logprob: -14.625412940979004

Token 57: ' +=' (ID: 2757)
  Prédit: ' +='
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' +=' → logprob: -0.020606473088264465
    2. '+=' → logprob: -3.895606517791748
    3. '+' → logprob: -9.89560604095459
    4. ' -=' → logprob: -12.39560604095459
    5. ' +' → logprob: -12.52060604095459
    6. '+='' → logprob: -13.39560604095459
    7. ' =' → logprob: -13.89560604095459
    8. '<|end|>' → logprob: -14.02060604095459
    9. ']+=' → logprob: -14.39560604095459
    10. '+="' → logprob: -14.64560604095459

Token 58: ' input' (ID: 3422)
  Prédit: 'input'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'input' → logprob: -0.06201227381825447
    2. ' input' → logprob: -2.812012195587158
    3. '(input' → logprob: -11.062012672424316
    4. '1' → logprob: -11.437012672424316
    5. '   ' → logprob: -12.187012672424316
    6. '0' → logprob: -12.812012672424316
    7. 'int' → logprob: -13.312012672424316
    8. '10' → logprob: -13.562012672424316
    9. ' ' → logprob: -13.937012672424316
    10. ' (' → logprob: -14.062012672424316

Token 59: '_values' (ID: 20393)
  Prédit: '_values'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_values' → logprob: -0.0040818434208631516
    2. '_cost' → logprob: -5.504081726074219
    3. '_' → logprob: -13.629081726074219
    4. '_value' → logprob: -13.879081726074219
    5. ' _' → logprob: -15.254081726074219
    6. '_vals' → logprob: -15.379081726074219
    7. '```' → logprob: -15.879081726074219
    8. 'values' → logprob: -16.62908172607422
    9. ''_' → logprob: -16.62908172607422
    10. '_tokens' → logprob: -16.87908172607422

Token 60: '[index' (ID: 11815)
  Prédit: '[index'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '[index' → logprob: -0.002438432304188609
    2. '[' → logprob: -6.252438545227051
    3. '_values' → logprob: -8.37743854522705
    4. '[_' → logprob: -8.87743854522705
    5. '```' → logprob: -9.62743854522705
    6. '_cost' → logprob: -10.75243854522705
    7. '_' → logprob: -11.25243854522705
    8. '_value' → logprob: -11.37743854522705
    9. ' [' → logprob: -12.00243854522705
    10. '_index' → logprob: -12.75243854522705

Token 61: ']' (ID: 60)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')' → logprob: -0.03811802715063095
    2. ']' → logprob: -4.1631178855896
    3. ' )' → logprob: -4.9131178855896
    4. '<|end|>' → logprob: -5.1631178855896
    5. ' -' → logprob: -5.4131178855896
    6. '-' → logprob: -6.2881178855896
    7. '   ' → logprob: -6.7881178855896
    8. ' ]' → logprob: -7.4131178855896
    9. ' ' → logprob: -8.413118362426758
    10. '}' → logprob: -8.913118362426758

Token 62: ' -' (ID: 533)
  Prédit: 'else'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'else' → logprob: -0.6482509970664978
    2. ' else' → logprob: -0.7732509970664978
    3. '   ' → logprob: -5.773251056671143
    4. '-' → logprob: -5.898251056671143
    5. '<|end|>' → logprob: -5.898251056671143
    6. ' ' → logprob: -6.273251056671143
    7. '+' → logprob: -6.898251056671143
    8. '```' → logprob: -7.148251056671143
    9. '
' → logprob: -7.523251056671143
    10. 'elif' → logprob: -7.648251056671143

Token 63: ' input' (ID: 3422)
  Prédit: 'input'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'input' → logprob: -0.28116366267204285
    2. ' input' → logprob: -1.4061636924743652
    3. '=input' → logprob: -13.031163215637207
    4. '_input' → logprob: -13.031163215637207
    5. '<|end|>' → logprob: -13.031163215637207
    6. ' ' → logprob: -13.281163215637207
    7. '1' → logprob: -13.656163215637207
    8. '	input' → logprob: -13.781163215637207
    9. '<input' → logprob: -14.031163215637207
    10. '(input' → logprob: -14.656163215637207

Token 64: '_cost' (ID: 36820)
  Prédit: '_cost'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_cost' → logprob: -1.9027791495318525e-05
    2. '_values' → logprob: -11.375019073486328
    3. 'cost' → logprob: -12.000019073486328
    4. '_' → logprob: -14.000019073486328
    5. '_COST' → logprob: -15.500019073486328
    6. '_lengths' → logprob: -17.125019073486328
    7. 'Costs' → logprob: -17.250019073486328
    8. '_length' → logprob: -17.500019073486328
    9. '_value' → logprob: -17.625019073486328
    10. ' _' → logprob: -17.875019073486328

Token 65: 's' (ID: 82)
  Prédit: 's'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 's' → logprob: -3.03521392197581e-05
    2. '_s' → logprob: -11.125030517578125
    3. '[s' → logprob: -11.375030517578125
    4. ' s' → logprob: -12.750030517578125
    5. '[' → logprob: -15.000030517578125
    6. '`s' → logprob: -16.000030517578125
    7. '_cost' → logprob: -16.000030517578125
    8. '	s' → logprob: -16.875030517578125
    9. '```' → logprob: -16.875030517578125
    10. 'sts' → logprob: -17.000030517578125

Token 66: '[index' (ID: 11815)
  Prédit: '[index'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '[index' → logprob: -0.0032648153137415648
    2. '[' → logprob: -5.753264904022217
    3. ' [' → logprob: -10.003264427185059
    4. '[in' → logprob: -11.378264427185059
    5. '```' → logprob: -11.503264427185059
    6. '[input' → logprob: -12.128264427185059
    7. '[ind' → logprob: -12.628264427185059
    8. 'index' → logprob: -12.753264427185059
    9. '[
' → logprob: -13.128264427185059
    10. ' ' → logprob: -14.128264427185059

Token 67: ']
' (ID: 1592)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ')' → logprob: -0.013040339574217796
    2. ']' → logprob: -4.388040542602539
    3. '])' → logprob: -7.763040542602539
    4. '<|end|>' → logprob: -10.263040542602539
    5. '}' → logprob: -10.888040542602539
    6. ' )' → logprob: -11.138040542602539
    7. ')
' → logprob: -11.513040542602539
    8. '）' → logprob: -11.888040542602539
    9. '   ' → logprob: -12.638040542602539
    10. ')])' → logprob: -13.013040542602539

Token 68: 'print' (ID: 1598)
  Prédit: 'print'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'print' → logprob: -0.03493882715702057
    2. 'else' → logprob: -4.284938812255859
    3. '\n' → logprob: -4.659938812255859
    4. '
' → logprob: -5.784938812255859
    5. '```' → logprob: -5.784938812255859
    6. '<|end|>' → logprob: -6.284938812255859
    7. ' else' → logprob: -7.034938812255859
    8. 'newline' → logprob: -7.534938812255859
    9. '#' → logprob: -8.03493881225586
    10. 'return' → logprob: -8.40993881225586

Token 69: '(result' (ID: 8111)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(' → logprob: -0.004328164737671614
    2. '(result' → logprob: -5.62932825088501
    3. '('' → logprob: -7.62932825088501
    4. '()' → logprob: -8.879327774047852
    5. '("("' → logprob: -9.254327774047852
    6. 'result' → logprob: -13.629327774047852
    7. '(`' → logprob: -13.879327774047852
    8. ' (' → logprob: -13.879327774047852
    9. '(
' → logprob: -14.129327774047852
    10. '((' → logprob: -14.629327774047852

Token 70: '_sum' (ID: 29859)
  Prédit: '_sum'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_sum' → logprob: -0.0003389190824236721
    2. '_s' → logprob: -8.250338554382324
    3. ')_' → logprob: -10.375338554382324
    4. '_' → logprob: -10.500338554382324
    5. '_)' → logprob: -11.750338554382324
    6. '__' → logprob: -12.625338554382324
    7. ' _' → logprob: -12.625338554382324
    8. ')' → logprob: -13.000338554382324
    9. '_result' → logprob: -14.625338554382324
    10. '_S' → logprob: -15.250338554382324

Token 71: ')' (ID: 8)
  Prédit: ')'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')' → logprob: -2.935296834039036e-06
    2. '))' → logprob: -12.87500286102295
    3. ' )' → logprob: -15.25000286102295
    4. '`)' → logprob: -16.875003814697266
    5. '')' → logprob: -17.125003814697266
    6. ')`' → logprob: -17.375003814697266
    7. '()' → logprob: -18.375003814697266
    8. '）' → logprob: -18.750003814697266
    9. '())' → logprob: -19.000003814697266
    10. ')
' → logprob: -19.125003814697266


RÉSUMÉ:
--------------------------------------------------------------------------------
Total des tokens analysés: 69
Tokens correctement prédits (1ère position, stricte): 32
Tokens correctement prédits (1ère position, avec adaptation): 33
Tokens correctement prédits (top 10): 55
Précision stricte (1ère position): 46.38%
Précision adaptée (1ère position): 47.83%
Précision (top 10): 79.71%
================================================================================
