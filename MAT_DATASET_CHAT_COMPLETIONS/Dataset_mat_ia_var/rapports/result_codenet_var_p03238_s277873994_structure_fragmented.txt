================================================================================
ANALYSE DE PRÉDICTION TOKEN PAR TOKEN (BATCH API)
Date: 2025-06-04 20:06:40
Modèle de tokenisation: gpt-4o-mini
================================================================================

SCRIPT ANALYSÉ:
--------------------------------------------------------------------------------
def get_input():
    return input()

def parse_int(value):
    return int(value)

def read_int_from_input():
    return parse_int(get_input())

def is_one(n):
    return n == 1

def is_two(n):
    return n == 2

def print_hello_world():
    print("Hello World")

def add(a, b):
    return a + b

def print_sum(a, b):
    result = add(a, b)
    print(result)

def handle_case_one():
    print_hello_world()

def handle_case_two():
    a = read_int_from_input()
    b = read_int_from_input()
    print_sum(a, b)

def main():
    n = read_int_from_input()
    if is_one(n):
        handle_case_one()
    elif is_two(n):
        handle_case_two()

main()
--------------------------------------------------------------------------------

RÉSULTATS D'ANALYSE TOKEN PAR TOKEN:
--------------------------------------------------------------------------------
Token 0: 'def' (ID: 1314)
  → Token d'amorce (pas de prédiction)

Token 1: ' get' (ID: 717)
  → Token d'amorce (pas de prédiction)

Token 2: '_input' (ID: 12507)
  → Token d'amorce (pas de prédiction)

Token 3: '():
' (ID: 8595)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '(' → logprob: -0.002158825984224677
    2. '_' → logprob: -6.2521586418151855
    3. '():' → logprob: -9.252159118652344
    4. ' (' → logprob: -10.252159118652344
    5. '()' → logprob: -10.627159118652344
    6. '```' → logprob: -10.627159118652344
    7. '(_' → logprob: -11.502159118652344
    8. '(:' → logprob: -11.627159118652344
    9. '(_:' → logprob: -12.127159118652344
    10. ':' → logprob: -12.502159118652344

Token 4: '   ' (ID: 271)
  Prédit: '```'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '```' → logprob: -0.4682254493236542
    2. '\' → logprob: -1.4682254791259766
    3. '\n' → logprob: -3.4682254791259766
    4. '   ' → logprob: -3.5932254791259766
    5. '(' → logprob: -3.8432254791259766
    6. '    
' → logprob: -4.593225479125977
    7. ':' → logprob: -4.718225479125977
    8. ''' → logprob: -5.468225479125977
    9. '()' → logprob: -5.468225479125977
    10. ''\' → logprob: -5.593225479125977

Token 5: ' return' (ID: 622)
  Prédit: 'return'
  Correct (stricte): False
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'return' (adapté à ' return') → logprob: -0.3594469130039215
    2. 'user' → logprob: -2.4844470024108887
    3. 'input' → logprob: -2.8594470024108887
    4. 'x' → logprob: -2.9844470024108887
    5. 'i' → logprob: -3.2344470024108887
    6. '   ' → logprob: -3.9844470024108887
    7. 'r' → logprob: -3.9844470024108887
    8. ' ' → logprob: -4.234447002410889
    9. 'u' → logprob: -5.359447002410889
    10. 'a' → logprob: -5.734447002410889

Token 6: ' input' (ID: 3422)
  Prédit: ' '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' ' → logprob: -0.5513375401496887
    2. ' input' → logprob: -1.051337480545044
    3. 'input' → logprob: -2.926337480545044
    4. '"' → logprob: -4.301337718963623
    5. ''' → logprob: -5.801337718963623
    6. ' "' → logprob: -6.426337718963623
    7. '  ' → logprob: -6.926337718963623
    8. ' '' → logprob: -7.676337718963623
    9. ' None' → logprob: -8.301337242126465
    10. '(input' → logprob: -8.551337242126465

Token 7: '()

' (ID: 5874)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '(' → logprob: -0.0077651506289839745
    2. '('' → logprob: -5.382765293121338
    3. ''' → logprob: -6.507765293121338
    4. '("("' → logprob: -7.132765293121338
    5. '()' → logprob: -7.882765293121338
    6. '"' → logprob: -8.13276481628418
    7. '```' → logprob: -10.13276481628418
    8. '(
' → logprob: -10.38276481628418
    9. '`' → logprob: -11.13276481628418
    10. '("")' → logprob: -11.25776481628418

Token 8: 'def' (ID: 1314)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(' → logprob: -0.5307904481887817
    2. '\n' → logprob: -2.155790328979492
    3. 'def' → logprob: -2.905790328979492
    4. '()' → logprob: -3.155790328979492
    5. '```' → logprob: -3.405790328979492
    6. '#' → logprob: -3.780790328979492
    7. '
' → logprob: -3.905790328979492
    8. '(
' → logprob: -3.905790328979492
    9. '.' → logprob: -3.905790328979492
    10. '\' → logprob: -4.280790328979492

Token 9: ' parse' (ID: 8420)
  Prédit: ' get'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' get' → logprob: -0.19965864717960358
    2. ' calculate' → logprob: -2.1996586322784424
    3. ' process' → logprob: -4.0746588706970215
    4. ' add' → logprob: -4.4496588706970215
    5. ' user' → logprob: -4.6996588706970215
    6. ' ' → logprob: -4.8246588706970215
    7. ' space' → logprob: -5.0746588706970215
    8. ' read' → logprob: -6.0746588706970215
    9. ' compute' → logprob: -6.1996588706970215
    10. ' my' → logprob: -6.1996588706970215

Token 10: '_int' (ID: 12285)
  Prédit: '_'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '_' → logprob: -0.3267502188682556
    2. '(' → logprob: -1.3267502784729004
    3. '_input' → logprob: -4.4517502784729
    4. '_line' → logprob: -7.8267502784729
    5. '_token' → logprob: -8.451749801635742
    6. '(_)' → logprob: -8.576749801635742
    7. '(_' → logprob: -8.826749801635742
    8. '_user' → logprob: -9.201749801635742
    9. '_text' → logprob: -9.826749801635742
    10. '_(' → logprob: -9.826749801635742

Token 11: '(value' (ID: 6333)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '(' → logprob: -0.0014654617989435792
    2. '_' → logprob: -7.376465320587158
    3. '("("' → logprob: -7.626465320587158
    4. ' (' → logprob: -9.251465797424316
    5. ' ' → logprob: -10.126465797424316
    6. '   ' → logprob: -10.251465797424316
    7. '```' → logprob: -10.626465797424316
    8. 's' → logprob: -10.751465797424316
    9. '()' → logprob: -11.126465797424316
    10. '('' → logprob: -11.126465797424316

Token 12: '):
' (ID: 1883)
  Prédit: '):'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '):' → logprob: -0.005345940124243498
    2. ')' → logprob: -5.505345821380615
    3. '):
' → logprob: -7.005345821380615
    4. ' ):' → logprob: -8.505346298217773
    5. ':' → logprob: -9.630346298217773
    6. '   ' → logprob: -10.380346298217773
    7. '=' → logprob: -10.880346298217773
    8. ',' → logprob: -11.005346298217773
    9. '):

' → logprob: -12.505346298217773
    10. ' ' → logprob: -12.505346298217773

Token 13: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.0092075876891613
    2. 'int' → logprob: -5.634207725524902
    3. ' int' → logprob: -5.634207725524902
    4. '(int' → logprob: -6.384207725524902
    5. ' return' → logprob: -8.634207725524902
    6. '(' → logprob: -9.884207725524902
    7. '[int' → logprob: -10.759207725524902
    8. ' (' → logprob: -10.884207725524902
    9. '    ' → logprob: -11.134207725524902
    10. 'return' → logprob: -11.759207725524902

Token 14: ' return' (ID: 622)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.08904066681861877
    2. ' try' → logprob: -2.589040756225586
    3. ' return' → logprob: -5.214040756225586
    4. 'try' → logprob: -5.839040756225586
    5. ' int' → logprob: -7.339040756225586
    6. '    ' → logprob: -7.714040756225586
    7. 'int' → logprob: -7.839040756225586
    8. 'return' (adapté à ' return') → logprob: -8.589040756225586
    9. '```' → logprob: -10.589040756225586
    10. '    
' → logprob: -12.214040756225586

Token 15: ' int' (ID: 677)
  Prédit: ' int'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' int' → logprob: -0.0008191577508114278
    2. 'int' → logprob: -7.125819206237793
    3. ' ' → logprob: -12.000819206237793
    4. '   ' → logprob: -12.375819206237793
    5. '(int' → logprob: -12.875819206237793
    6. '```' → logprob: -14.875819206237793
    7. '<int' → logprob: -15.125819206237793
    8. '=int' → logprob: -15.250819206237793
    9. '  ' → logprob: -15.375819206237793
    10. '[int' → logprob: -15.625819206237793

Token 16: '(value' (ID: 6333)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(' → logprob: -0.2014317512512207
    2. '(value' → logprob: -1.7014317512512207
    3. ' (' → logprob: -11.701431274414062
    4. '('' → logprob: -13.201431274414062
    5. '(user' → logprob: -13.326431274414062
    6. '("("' → logprob: -13.451431274414062
    7. '(`' → logprob: -14.201431274414062
    8. '```' → logprob: -14.576431274414062
    9. 'value' → logprob: -14.826431274414062
    10. ' ' → logprob: -14.826431274414062

Token 17: ')

' (ID: 1029)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ')' → logprob: -4.320199877838604e-07
    2. '))' → logprob: -15.5
    3. ' )' → logprob: -16.25
    4. ')))' → logprob: -16.875
    5. ')
' → logprob: -17.25
    6. '())' → logprob: -17.375
    7. ')return' → logprob: -19.125
    8. '()' → logprob: -19.125
    9. '}' → logprob: -19.25
    10. '`)' → logprob: -19.375

Token 18: 'def' (ID: 1314)
  Prédit: 'def'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'def' → logprob: -0.34334757924079895
    2. 'd' → logprob: -2.4683475494384766
    3. '#' → logprob: -2.8433475494384766
    4. '

' → logprob: -2.9683475494384766
    5. '
' → logprob: -3.3433475494384766
    6. '\' → logprob: -3.4683475494384766
    7. '\n' → logprob: -4.343347549438477
    8. '```' → logprob: -5.593347549438477
    9. '<|end|>' → logprob: -5.968347549438477
    10. 'n' → logprob: -6.093347549438477

Token 19: ' read' (ID: 1729)
  Prédit: ' calculate'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' calculate' → logprob: -0.563147783279419
    2. ' add' → logprob: -1.813147783279419
    3. ' main' → logprob: -2.438147783279419
    4. ' multiply' → logprob: -2.813147783279419
    5. ' get' → logprob: -3.688147783279419
    6. ' process' → logprob: -3.688147783279419
    7. ' compute' → logprob: -3.938147783279419
    8. ' sum' → logprob: -4.56314754486084
    9. ' factorial' → logprob: -4.68814754486084
    10. ' square' → logprob: -4.68814754486084

Token 20: '_int' (ID: 12285)
  Prédit: '_'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '_' → logprob: -0.39258983731269836
    2. '_line' → logprob: -1.892589807510376
    3. '_input' → logprob: -2.142589807510376
    4. '()' → logprob: -3.517589807510376
    5. '(' → logprob: -3.767589807510376
    6. ')' → logprob: -6.892590045928955
    7. 'line' → logprob: -7.017590045928955
    8. '_lines' → logprob: -7.517590045928955
    9. '_data' → logprob: -8.142589569091797
    10. ' _' → logprob: -9.017589569091797

Token 21: '_from' (ID: 12526)
  Prédit: '()'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '()' → logprob: -0.0019788339268416166
    2. '_line' → logprob: -7.001978874206543
    3. 's' → logprob: -7.751978874206543
    4. '_input' → logprob: -8.501978874206543
    5. '():' → logprob: -9.251978874206543
    6. ' ()' → logprob: -9.376978874206543
    7. '(' → logprob: -10.501978874206543
    8. '_list' → logprob: -10.876978874206543
    9. ']()' → logprob: -10.876978874206543
    10. '_lines' → logprob: -11.001978874206543

Token 22: '_input' (ID: 12507)
  Prédit: '_input'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_input' → logprob: -0.004390594083815813
    2. '_' → logprob: -6.254390716552734
    3. '_user' → logprob: -6.379390716552734
    4. '_st' → logprob: -7.629390716552734
    5. '_file' → logprob: -8.879390716552734
    6. 'input' → logprob: -9.879390716552734
    7. '_line' → logprob: -11.004390716552734
    8. '()' → logprob: -11.129390716552734
    9. ' input' → logprob: -11.254390716552734
    10. '_keyboard' → logprob: -11.629390716552734

Token 23: '():
' (ID: 8595)
  Prédit: '()'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '()' → logprob: -0.06571364402770996
    2. '(' → logprob: -2.94071364402771
    3. '():' → logprob: -4.815713882446289
    4. '_' → logprob: -6.440713882446289
    5. '`()' → logprob: -8.440713882446289
    6. '_line' → logprob: -8.690713882446289
    7. ' ()' → logprob: -9.315713882446289
    8. '("("' → logprob: -9.440713882446289
    9. '();' → logprob: -9.815713882446289
    10. '()">' → logprob: -9.815713882446289

Token 24: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.0005394508480094373
    2. ' return' → logprob: -8.000539779663086
    3. 'return' → logprob: -8.875539779663086
    4. 'input' → logprob: -10.875539779663086
    5. 'value' → logprob: -11.000539779663086
    6. '    
' → logprob: -11.250539779663086
    7. ' input' → logprob: -12.625539779663086
    8. ' value' → logprob: -12.875539779663086
    9. ' ' → logprob: -13.125539779663086
    10. '  ' → logprob: -13.250539779663086

Token 25: ' return' (ID: 622)
  Prédit: 'value'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'value' → logprob: -0.7532345652580261
    2. '   ' → logprob: -1.503234624862671
    3. ' value' → logprob: -2.378234624862671
    4. 'line' → logprob: -2.503234624862671
    5. ' line' → logprob: -3.128234624862671
    6. 'input' → logprob: -3.253234624862671
    7. 'return' (adapté à ' return') → logprob: -4.253234386444092
    8. 'user' → logprob: -4.753234386444092
    9. 'val' → logprob: -5.378234386444092
    10. ' input' → logprob: -5.378234386444092

Token 26: ' parse' (ID: 8420)
  Prédit: ' parse'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' parse' → logprob: -0.6277678608894348
    2. ' get' → logprob: -0.8777678608894348
    3. ' int' → logprob: -3.00276780128479
    4. 'parse' → logprob: -7.377768039703369
    5. ' input' → logprob: -9.252767562866211
    6. 'get' → logprob: -9.377767562866211
    7. ' ' → logprob: -10.627767562866211
    8. 'int' → logprob: -10.877767562866211
    9. '(parse' → logprob: -13.127767562866211
    10. '  ' → logprob: -13.502767562866211

Token 27: '_int' (ID: 12285)
  Prédit: '_int'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_int' → logprob: -0.003727518254891038
    2. '_' → logprob: -5.628727436065674
    3. '_in' → logprob: -10.128727912902832
    4. ' _' → logprob: -10.878727912902832
    5. '_t' → logprob: -11.003727912902832
    6. '_uint' → logprob: -11.128727912902832
    7. 'int' → logprob: -12.128727912902832
    8. '_i' → logprob: -12.378727912902832
    9. '_val' → logprob: -12.503727912902832
    10. '_integer' → logprob: -12.503727912902832

Token 28: '(get' (ID: 7119)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(' → logprob: -0.010500259697437286
    2. '(input' → logprob: -5.010500431060791
    3. '(get' → logprob: -5.635500431060791
    4. '("("' → logprob: -9.635499954223633
    5. '(read' → logprob: -10.260499954223633
    6. '('' → logprob: -11.385499954223633
    7. '(return' → logprob: -11.385499954223633
    8. '(()' → logprob: -11.510499954223633
    9. ' (' → logprob: -11.635499954223633
    10. '()' → logprob: -11.635499954223633

Token 29: '_input' (ID: 12507)
  Prédit: '_input'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_input' → logprob: -3.292907877039397e-06
    2. '_' → logprob: -12.87500286102295
    3. ' _' → logprob: -14.87500286102295
    4. '_in' → logprob: -15.87500286102295
    5. ')_' → logprob: -17.250003814697266
    6. '_output' → logprob: -17.625003814697266
    7. '_put' → logprob: -17.750003814697266
    8. '__' → logprob: -18.000003814697266
    9. '_Input' → logprob: -18.125003814697266
    10. '_inputs' → logprob: -18.250003814697266

Token 30: '())

' (ID: 27654)
  Prédit: '())'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '())' → logprob: -0.0009068182553164661
    2. '()' → logprob: -7.375906944274902
    3. '()))' → logprob: -8.250906944274902
    4. ')' → logprob: -11.500906944274902
    5. ' ())' → logprob: -12.125906944274902
    6. '())
' → logprob: -13.250906944274902
    7. '(' → logprob: -13.750906944274902
    8. '())

' → logprob: -15.875906944274902
    9. '())))' → logprob: -16.375905990600586
    10. '();)' → logprob: -16.375905990600586

Token 31: 'def' (ID: 1314)
  Prédit: 'def'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'def' → logprob: -0.2022881656885147
    2. '#' → logprob: -2.2022881507873535
    3. '
' → logprob: -3.5772881507873535
    4. '<|end|>' → logprob: -4.3272881507873535
    5. 'd' → logprob: -4.5772881507873535
    6. '

' → logprob: -5.5772881507873535
    7. '\n' → logprob: -5.8272881507873535
    8. '\' → logprob: -5.9522881507873535
    9. '.' → logprob: -6.0772881507873535
    10. '(' → logprob: -6.2022881507873535

Token 32: ' is' (ID: 382)
  Prédit: ' main'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' main' → logprob: -0.16481132805347443
    2. ' calculate' → logprob: -2.164811372756958
    3. ' compute' → logprob: -4.414811134338379
    4. ' process' → logprob: -5.539811134338379
    5. ' multiply' → logprob: -5.664811134338379
    6. ' write' → logprob: -5.914811134338379
    7. ' read' → logprob: -6.164811134338379
    8. ' add' → logprob: -6.164811134338379
    9. ' print' → logprob: -6.289811134338379
    10. ' solve' → logprob: -6.414811134338379

Token 33: '_one' (ID: 26979)
  Prédit: '_even'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '_even' → logprob: -0.968077540397644
    2. '_prime' → logprob: -1.218077540397644
    3. '_' → logprob: -1.343077540397644
    4. '_pal' → logprob: -3.7180776596069336
    5. '_positive' → logprob: -3.8430776596069336
    6. '_valid' → logprob: -4.843077659606934
    7. ' _' → logprob: -6.093077659606934
    8. '_integer' → logprob: -6.343077659606934
    9. '_empty' → logprob: -6.343077659606934
    10. '_digit' → logprob: -7.093077659606934

Token 34: '(n' (ID: 2406)
  Prédit: '_'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '_' → logprob: -0.11762697249650955
    2. '(' → logprob: -2.492626905441284
    3. '_equal' → logprob: -4.367627143859863
    4. '_(' → logprob: -4.492627143859863
    5. '_equals' → logprob: -7.367627143859863
    6. '_one' → logprob: -8.117627143859863
    7. '```' → logprob: -8.117627143859863
    8. '(_)' → logprob: -8.367627143859863
    9. '_more' → logprob: -8.367627143859863
    10. 'equal' → logprob: -8.367627143859863

Token 35: '):
' (ID: 1883)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ')' → logprob: -0.030258800834417343
    2. '=' → logprob: -4.155258655548096
    3. '):' → logprob: -5.405258655548096
    4. 'q' → logprob: -6.030258655548096
    5. '==' → logprob: -6.280258655548096
    6. 'u' → logprob: -7.030258655548096
    7. 'qual' → logprob: -7.280258655548096
    8. 'x' → logprob: -7.405258655548096
    9. 'quals' → logprob: -7.530258655548096
    10. 'umber' → logprob: -7.780258655548096

Token 36: '   ' (ID: 271)
  Prédit: '(n'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(n' → logprob: -0.08016537129878998
    2. '(' → logprob: -2.705165386199951
    3. ' n' → logprob: -5.205165386199951
    4. 'n' → logprob: -5.580165386199951
    5. ' (' → logprob: -7.205165386199951
    6. '   ' → logprob: -9.205164909362793
    7. ' ==' → logprob: -11.080164909362793
    8. ':' → logprob: -11.580164909362793
    9. '(
' → logprob: -11.830164909362793
    10. '==' → logprob: -12.080164909362793

Token 37: ' return' (ID: 622)
  Prédit: ' n'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' n' → logprob: -0.25556492805480957
    2. 'n' → logprob: -1.5055649280548096
    3. ' return' → logprob: -6.1305646896362305
    4. '   ' → logprob: -7.0055646896362305
    5. 'return' (adapté à ' return') → logprob: -7.8805646896362305
    6. '(n' → logprob: -9.00556468963623
    7. ' (' → logprob: -11.13056468963623
    8. '(' → logprob: -11.25556468963623
    9. ' ' → logprob: -12.13056468963623
    10. '    ' → logprob: -12.13056468963623

Token 38: ' n' (ID: 297)
  Prédit: ' n'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' n' → logprob: -0.026332227513194084
    2. 'n' → logprob: -3.651332139968872
    3. ' ' → logprob: -10.651331901550293
    4. ' ' → logprob: -12.526331901550293
    5. '1' → logprob: -13.276331901550293
    6. ' (' → logprob: -14.276331901550293
    7. '(' → logprob: -14.276331901550293
    8. '(n' → logprob: -14.651331901550293
    9. ' True' → logprob: -14.651331901550293
    10. '_n' → logprob: -15.401331901550293

Token 39: ' ==' (ID: 951)
  Prédit: ' =='
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' ==' → logprob: -0.12748244404792786
    2. '==' → logprob: -2.1274824142456055
    3. '=' → logprob: -7.7524824142456055
    4. ' ' → logprob: -9.252482414245605
    5. '1' → logprob: -11.877482414245605
    6. ')' → logprob: -12.377482414245605
    7. ' =' → logprob: -12.502482414245605
    8. '===' → logprob: -12.502482414245605
    9. '.' → logprob: -13.002482414245605
    10. ' ' → logprob: -13.627482414245605

Token 40: ' ' (ID: 220)
  Prédit: ' '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' ' → logprob: -0.2519332468509674
    2. '1' → logprob: -1.501933217048645
    3. ' ' → logprob: -12.751933097839355
    4. ' one' → logprob: -14.126933097839355
    5. 'One' → logprob: -15.626933097839355
    6. ' One' → logprob: -16.126934051513672
    7. '   ' → logprob: -16.626934051513672
    8. '_one' → logprob: -17.001934051513672
    9. '0' → logprob: -17.126934051513672
    10. 'one' → logprob: -17.376934051513672

Token 41: '1' (ID: 16)
  Prédit: '1'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '1' → logprob: -7.941850526549388e-06
    2. ' ' → logprob: -11.750007629394531
    3. '   ' → logprob: -18.75000762939453
    4. '```' → logprob: -20.00000762939453
    5. '0' → logprob: -20.12500762939453
    6. '`' → logprob: -21.25000762939453
    7. '  ' → logprob: -21.50000762939453
    8. 'One' → logprob: -22.25000762939453
    9. 'one' → logprob: -22.25000762939453
    10. '１' → logprob: -22.50000762939453

Token 42: '

' (ID: 279)
  Prédit: '

'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '

' → logprob: -1.1587244272232056
    2. ':' → logprob: -1.5337244272232056
    3. 'def' → logprob: -1.6587244272232056
    4. '
' → logprob: -1.9087244272232056
    5. '\n' → logprob: -2.783724308013916
    6. '<|end|>' → logprob: -3.408724308013916
    7. '\' → logprob: -4.408724308013916
    8. '```' → logprob: -4.783724308013916
    9. ':def' → logprob: -5.408724308013916
    10. '.' → logprob: -5.908724308013916

Token 43: 'def' (ID: 1314)
  Prédit: 'def'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'def' → logprob: -0.18171876668930054
    2. 'd' → logprob: -2.0567188262939453
    3. '\' → logprob: -3.6817188262939453
    4. '
' → logprob: -5.306718826293945
    5. '

' → logprob: -5.806718826293945
    6. '#' → logprob: -6.181718826293945
    7. '\n' → logprob: -6.431718826293945
    8. '```' → logprob: -7.806718826293945
    9. 'n' → logprob: -8.431718826293945
    10. '<|end|>' → logprob: -8.431718826293945

Token 44: ' is' (ID: 382)
  Prédit: ' is'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' is' → logprob: -0.0008837147615849972
    2. 'is' → logprob: -7.50088357925415
    3. ' main' → logprob: -8.375884056091309
    4. ' factorial' → logprob: -10.125884056091309
    5. ' def' → logprob: -10.750884056091309
    6. 'def' → logprob: -11.625884056091309
    7. '_is' → logprob: -12.250884056091309
    8. 'main' → logprob: -12.500884056091309
    9. ' check' → logprob: -12.750884056091309
    10. ' get' → logprob: -12.875884056091309

Token 45: '_two' (ID: 54305)
  Prédit: '_zero'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_zero' → logprob: -0.10580495744943619
    2. '_' → logprob: -3.230804920196533
    3. '_two' → logprob: -3.730804920196533
    4. '_even' → logprob: -3.730804920196533
    5. ' _' → logprob: -5.355804920196533
    6. '_one' → logprob: -5.730804920196533
    7. '_n' → logprob: -6.855804920196533
    8. ' zero' → logprob: -7.105804920196533
    9. '_three' → logprob: -7.605804920196533
    10. '_positive' → logprob: -7.730804920196533

Token 46: '(n' (ID: 2406)
  Prédit: '(n'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(n' → logprob: -0.009043737314641476
    2. '(' → logprob: -4.7590436935424805
    3. ' (' → logprob: -7.7590436935424805
    4. '(s' → logprob: -13.88404369354248
    5. ' ' → logprob: -14.13404369354248
    6. 's' → logprob: -15.38404369354248
    7. '  ' → logprob: -16.009044647216797
    8. '   ' → logprob: -17.259044647216797
    9. '_' → logprob: -17.384044647216797
    10. '(
' → logprob: -17.634044647216797

Token 47: '):
' (ID: 1883)
  Prédit: '):'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '):' → logprob: -0.018959706649184227
    2. ')' → logprob: -4.0189595222473145
    3. '):
' → logprob: -7.1439595222473145
    4. ':' → logprob: -12.018959999084473
    5. '(n' → logprob: -12.393959999084473
    6. '):

' → logprob: -13.018959999084473
    7. ' ):' → logprob: -13.143959999084473
    8. ')n' → logprob: -14.018959999084473
    9. '):
' → logprob: -14.143959999084473
    10. '=' → logprob: -14.143959999084473

Token 48: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.2843724489212036
    2. ' return' → logprob: -1.9093724489212036
    3. ' n' → logprob: -2.534372329711914
    4. 'n' → logprob: -4.034372329711914
    5. 'return' → logprob: -6.159372329711914
    6. '    ' → logprob: -9.284372329711914
    7. ' ' → logprob: -9.409372329711914
    8. '(n' → logprob: -11.534372329711914
    9. ' =' → logprob: -11.534372329711914
    10. '  ' → logprob: -11.784372329711914

Token 49: ' return' (ID: 622)
  Prédit: ' return'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' return' → logprob: -0.12788063287734985
    2. ' n' → logprob: -2.877880573272705
    3. 'return' (adapté à ' return') → logprob: -2.877880573272705
    4. 'n' → logprob: -5.002880573272705
    5. '   ' → logprob: -7.127880573272705
    6. ' ' → logprob: -12.127881050109863
    7. 'eturn' → logprob: -13.877881050109863
    8. ' ' → logprob: -13.877881050109863
    9. '	return' → logprob: -14.127881050109863
    10. ' =' → logprob: -14.127881050109863

Token 50: ' n' (ID: 297)
  Prédit: ' n'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' n' → logprob: -0.003617885522544384
    2. 'n' → logprob: -5.628617763519287
    3. ' ' → logprob: -11.753618240356445
    4. '2' → logprob: -11.753618240356445
    5. '(n' → logprob: -14.253618240356445
    6. ' ' → logprob: -14.378618240356445
    7. ' (' → logprob: -14.878618240356445
    8. ' two' → logprob: -15.753618240356445
    9. '	n' → logprob: -16.003618240356445
    10. '(' → logprob: -16.128618240356445

Token 51: ' ==' (ID: 951)
  Prédit: ' =='
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' ==' → logprob: -0.0023460383526980877
    2. '==' → logprob: -6.377346038818359
    3. ' ' → logprob: -7.377346038818359
    4. ' =' → logprob: -11.62734603881836
    5. '=' → logprob: -12.50234603881836
    6. ' ' → logprob: -13.12734603881836
    7. '2' → logprob: -13.37734603881836
    8. ' !=' → logprob: -14.25234603881836
    9. ' ===' → logprob: -15.12734603881836
    10. ' %' → logprob: -15.25234603881836

Token 52: ' ' (ID: 220)
  Prédit: ' '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' ' → logprob: -0.16022524237632751
    2. '2' → logprob: -1.91022527217865
    3. ' ' → logprob: -14.410224914550781
    4. '   ' → logprob: -15.410224914550781
    5. '1' → logprob: -16.53522491455078
    6. '```' → logprob: -16.59772491455078
    7. '  ' → logprob: -16.91022491455078
    8. ' two' → logprob: -17.16022491455078
    9. '0' → logprob: -17.78522491455078
    10. ' Two' → logprob: -17.97272491455078

Token 53: '2' (ID: 17)
  Prédit: '2'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '2' → logprob: -5.1928003813372925e-05
    2. ' ' → logprob: -9.875051498413086
    3. '   ' → logprob: -15.375051498413086
    4. '```' → logprob: -16.625051498413086
    5. '1' → logprob: -17.375051498413086
    6. '  ' → logprob: -18.000051498413086
    7. '`' → logprob: -18.375051498413086
    8. '۲' → logprob: -18.625051498413086
    9. '２' → logprob: -18.812551498413086
    10. '3' → logprob: -19.187551498413086

Token 54: '

' (ID: 279)
  Prédit: 'def'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'def' → logprob: -0.09296253323554993
    2. '

' → logprob: -3.3429625034332275
    3. '
' → logprob: -3.9679625034332275
    4. '<|end|>' → logprob: -3.9679625034332275
    5. '\' → logprob: -4.717962741851807
    6. '```' → logprob: -5.717962741851807
    7. '\n' → logprob: -5.967962741851807
    8. '#' → logprob: -8.842962265014648
    9. ' def' → logprob: -9.217962265014648
    10. 'newline' → logprob: -9.342962265014648

Token 55: 'def' (ID: 1314)
  Prédit: 'def'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'def' → logprob: -0.0011350970016792417
    2. '
' → logprob: -7.251134872436523
    3. '

' → logprob: -8.376134872436523
    4. '<|end|>' → logprob: -9.376134872436523
    5. '```' → logprob: -9.501134872436523
    6. '\' → logprob: -10.876134872436523
    7. '#' → logprob: -12.626134872436523
    8. 'ndef' → logprob: -13.001134872436523
    9. '<|end|>' → logprob: -13.501134872436523
    10. ' def' → logprob: -13.501134872436523

Token 56: ' print' (ID: 2123)
  Prédit: ' is'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' is' → logprob: -0.0002075933152809739
    2. ' get' → logprob: -9.875207901000977
    3. ' def' → logprob: -10.000207901000977
    4. 'is' → logprob: -10.500207901000977
    5. ' _' → logprob: -11.375207901000977
    6. ' add' → logprob: -11.875207901000977
    7. '_' → logprob: -11.875207901000977
    8. ' three' → logprob: -12.000207901000977
    9. ' space' → logprob: -12.125207901000977
    10. ' n' → logprob: -12.125207901000977

Token 57: '_' (ID: 62)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(' → logprob: -0.0006367852329276502
    2. '()' → logprob: -8.25063705444336
    3. '_' → logprob: -9.50063705444336
    4. '("")' → logprob: -9.75063705444336
    5. '('' → logprob: -10.00063705444336
    6. 's' → logprob: -10.12563705444336
    7. '("' → logprob: -10.12563705444336
    8. '("("' → logprob: -10.12563705444336
    9. '("""' → logprob: -11.50063705444336
    10. ' (' → logprob: -11.62563705444336

Token 58: 'hello' (ID: 24912)
  Prédit: 'result'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'result' → logprob: -0.30473944544792175
    2. '("' → logprob: -2.304739475250244
    3. 'one' → logprob: -2.554739475250244
    4. '(' → logprob: -3.804739475250244
    5. 'value' → logprob: -4.179739475250244
    6. '"' → logprob: -4.929739475250244
    7. 'ln' → logprob: -5.304739475250244
    8. 'sum' → logprob: -5.304739475250244
    9. 'two' → logprob: -5.804739475250244
    10. 'is' → logprob: -5.929739475250244

Token 59: '_world' (ID: 76816)
  Prédit: '()'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '()' → logprob: -0.00266852299682796
    2. '(' → logprob: -6.002668380737305
    3. '_' → logprob: -9.127668380737305
    4. '_world' → logprob: -10.377668380737305
    5. ' ()' → logprob: -10.627668380737305
    6. '()`' → logprob: -12.377668380737305
    7. '()
' → logprob: -12.752668380737305
    8. '```' → logprob: -12.877668380737305
    9. '()<' → logprob: -13.002668380737305
    10. '("")' → logprob: -13.377668380737305

Token 60: '():
' (ID: 8595)
  Prédit: '()'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '()' → logprob: -0.04864833876490593
    2. '(' → logprob: -3.0486483573913574
    3. ' ()' → logprob: -11.1736478805542
    4. '_' → logprob: -11.2986478805542
    5. '("' → logprob: -12.2986478805542
    6. '`()' → logprob: -12.6736478805542
    7. '('' → logprob: -12.9236478805542
    8. '()`' → logprob: -13.0486478805542
    9. '```' → logprob: -13.0486478805542
    10. '()
' → logprob: -13.0486478805542

Token 61: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.021268034353852272
    2. ' print' → logprob: -4.521267890930176
    3. 'print' → logprob: -4.771267890930176
    4. '(' → logprob: -7.021267890930176
    5. '()' → logprob: -7.271267890930176
    6. '('' → logprob: -10.396267890930176
    7. '(
' → logprob: -10.771267890930176
    8. '(print' → logprob: -11.021267890930176
    9. '("' → logprob: -11.396267890930176
    10. '	print' → logprob: -11.771267890930176

Token 62: ' print' (ID: 2123)
  Prédit: 'print'
  Correct (stricte): False
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'print' (adapté à ' print') → logprob: -0.0009151478880085051
    2. ' print' → logprob: -7.250915050506592
    3. '   ' → logprob: -8.50091552734375
    4. '```' → logprob: -13.25091552734375
    5. '	print' → logprob: -17.75091552734375
    6. 'pr' → logprob: -18.00091552734375
    7. ' ' → logprob: -18.12591552734375
    8. '  ' → logprob: -19.00091552734375
    9. '``' → logprob: -19.12591552734375
    10. '`' → logprob: -19.25091552734375

Token 63: '("' (ID: 568)
  Prédit: '("'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '("' → logprob: -0.016666119918227196
    2. '(' → logprob: -4.266665935516357
    3. '('' → logprob: -6.016665935516357
    4. '("("' → logprob: -10.516666412353516
    5. '()' → logprob: -11.391666412353516
    6. '("")' → logprob: -11.766666412353516
    7. ' ("' → logprob: -11.891666412353516
    8. '   ' → logprob: -12.766666412353516
    9. ' ' → logprob: -13.016666412353516
    10. '("""' → logprob: -13.641666412353516

Token 64: 'Hello' (ID: 13225)
  Prédit: 'Hello'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'Hello' → logprob: -6.704273118884885e-07
    2. 'hello' → logprob: -14.250000953674316
    3. ' Hello' → logprob: -17.625
    4. '>Hello' → logprob: -19.375
    5. 'Hell' → logprob: -20.25
    6. 'HEL' → logprob: -21.625
    7. 'Hallo' → logprob: -21.75
    8. '"' → logprob: -22.125
    9. 'Hola' → logprob: -22.625
    10. 'H' → logprob: -22.875

Token 65: ' World' (ID: 5922)
  Prédit: ' World'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' World' → logprob: -0.012663504108786583
    2. ',' → logprob: -4.6376633644104
    3. 'World' → logprob: -5.8876633644104
    4. ' world' → logprob: -9.012663841247559
    5. '_world' → logprob: -12.762663841247559
    6. ' ' → logprob: -12.887663841247559
    7. ' ,' → logprob: -14.387663841247559
    8. '   ' → logprob: -14.637663841247559
    9. '(World' → logprob: -15.262663841247559
    10. 'world' → logprob: -15.637663841247559

Token 66: '")

' (ID: 10822)
  Prédit: '")'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '")' → logprob: -0.005236956290900707
    2. '!")' → logprob: -5.255237102508545
    3. '()' → logprob: -13.255236625671387
    4. ')")' → logprob: -14.505236625671387
    5. '")
' → logprob: -15.255236625671387
    6. '"' → logprob: -15.255236625671387
    7. ')' → logprob: -15.880236625671387
    8. '\")' → logprob: -16.130237579345703
    9. '!' → logprob: -17.380237579345703
    10. '!)' → logprob: -17.630237579345703

Token 67: 'def' (ID: 1314)
  Prédit: 'def'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'def' → logprob: -0.12911513447761536
    2. 'if' → logprob: -2.129115104675293
    3. 'n' → logprob: -6.754115104675293
    4. 'for' → logprob: -8.004115104675293
    5. '```' → logprob: -8.629115104675293
    6. 'ndef' → logprob: -8.754115104675293
    7. '\n' → logprob: -9.379115104675293
    8. '\' → logprob: -9.754115104675293
    9. '
' → logprob: -10.254115104675293
    10. '    
' → logprob: -10.754115104675293

Token 68: ' add' (ID: 1147)
  Prédit: ' main'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' main' → logprob: -0.002703112317249179
    2. ' run' → logprob: -7.1277031898498535
    3. ' check' → logprob: -7.3777031898498535
    4. 'main' → logprob: -7.3777031898498535
    5. ' is' → logprob: -8.252702713012695
    6. ' print' → logprob: -8.502702713012695
    7. ' process' → logprob: -9.752702713012695
    8. '_main' → logprob: -10.377702713012695
    9. ' test' → logprob: -10.752702713012695
    10. ' solve' → logprob: -11.627702713012695

Token 69: '(a' (ID: 6271)
  Prédit: '(a'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(a' → logprob: -0.11095546185970306
    2. '(' → logprob: -2.3609554767608643
    3. '_' → logprob: -5.110955238342285
    4. '_numbers' → logprob: -5.985955238342285
    5. '_two' → logprob: -7.235955238342285
    6. '(x' → logprob: -7.610955238342285
    7. ' (' → logprob: -7.860955238342285
    8. '(n' → logprob: -8.485955238342285
    9. '_one' → logprob: -9.735955238342285
    10. '(_' → logprob: -10.610955238342285

Token 70: ',' (ID: 11)
  Prédit: ','
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ',' → logprob: -0.0007667447789572179
    2. ' ,' → logprob: -7.250766754150391
    3. ',a' → logprob: -10.12576675415039
    4. ',b' → logprob: -11.12576675415039
    5. ')' → logprob: -14.00076675415039
    6. ',)' → logprob: -15.25076675415039
    7. '_,' → logprob: -15.87576675415039
    8. '<|end|>' → logprob: -16.00076675415039
    9. ' a' → logprob: -16.12576675415039
    10. ',
' → logprob: -16.12576675415039

Token 71: ' b' (ID: 287)
  Prédit: ' b'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' b' → logprob: -0.02975071594119072
    2. 'b' → logprob: -3.5297508239746094
    3. ' ' → logprob: -16.40475082397461
    4. ')b' → logprob: -16.65475082397461
    5. ')' → logprob: -16.90475082397461
    6. '	b' → logprob: -17.40475082397461
    7. ',b' → logprob: -17.65475082397461
    8. ' б' → logprob: -18.02975082397461
    9. ' ' → logprob: -18.15475082397461
    10. ' )' → logprob: -18.27975082397461

Token 72: '):
' (ID: 1883)
  Prédit: '):'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '):' → logprob: -0.001200231839902699
    2. ')' → logprob: -6.751200199127197
    3. '):
' → logprob: -10.501200675964355
    4. ':' → logprob: -13.251200675964355
    5. ' ):' → logprob: -15.251200675964355
    6. ',' → logprob: -15.626200675964355
    7. '   ' → logprob: -15.876200675964355
    8. '):
' → logprob: -17.12619972229004
    9. '**' → logprob: -17.50119972229004
    10. '):

' → logprob: -17.50119972229004

Token 73: '   ' (ID: 271)
  Prédit: ' a'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' a' → logprob: -0.25215357542037964
    2. 'a' → logprob: -1.5021536350250244
    3. '   ' → logprob: -8.627153396606445
    4. '    ' → logprob: -11.252153396606445
    5. ' ' → logprob: -11.752153396606445
    6. ')' → logprob: -11.752153396606445
    7. '(a' → logprob: -12.127153396606445
    8. '	a' → logprob: -12.377153396606445
    9. ' return' → logprob: -13.127153396606445
    10. '<|end|>' → logprob: -13.252153396606445

Token 74: ' return' (ID: 622)
  Prédit: ' a'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' a' → logprob: -0.10181081295013428
    2. 'a' → logprob: -2.351810932159424
    3. ' return' → logprob: -6.601810932159424
    4. 'return' (adapté à ' return') → logprob: -8.476810455322266
    5. '   ' → logprob: -10.351810455322266
    6. '    ' → logprob: -13.226810455322266
    7. ' ' → logprob: -13.351810455322266
    8. ')' → logprob: -14.226810455322266
    9. '	a' → logprob: -14.601810455322266
    10. 'eturn' → logprob: -16.226810455322266

Token 75: ' a' (ID: 261)
  Prédit: ' a'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' a' → logprob: -0.014163628220558167
    2. 'a' → logprob: -4.264163494110107
    3. ' ' → logprob: -16.389163970947266
    4. '	a' → logprob: -17.889163970947266
    5. ' ' → logprob: -18.514163970947266
    6. '_a' → logprob: -19.139163970947266
    7. '(a' → logprob: -20.264163970947266
    8. ' а' → logprob: -20.514163970947266
    9. ' an' → logprob: -21.514163970947266
    10. ' `' → logprob: -21.889163970947266

Token 76: ' +' (ID: 659)
  Prédit: ' +'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' +' → logprob: -0.011093919165432453
    2. '+' → logprob: -4.511094093322754
    3. ' ' → logprob: -10.011094093322754
    4. ' +
' → logprob: -14.511094093322754
    5. '+b' → logprob: -15.261094093322754
    6. ' ' → logprob: -15.386094093322754
    7. ' plus' → logprob: -16.511093139648438
    8. ' ,' → logprob: -17.261093139648438
    9. ' *' → logprob: -17.511093139648438
    10. '_' → logprob: -17.511093139648438

Token 77: ' b' (ID: 287)
  Prédit: 'b'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'b' → logprob: -0.16022422909736633
    2. ' b' → logprob: -1.910224199295044
    3. ' ' → logprob: -17.03522491455078
    4. '	b' → logprob: -17.41022491455078
    5. '<|end|>' → logprob: -18.03522491455078
    6. ')b' → logprob: -18.41022491455078
    7. ' б' → logprob: -18.53522491455078
    8. '    ' → logprob: -20.03522491455078
    9. '_b' → logprob: -20.16022491455078
    10. '   ' → logprob: -20.53522491455078

Token 78: '

' (ID: 279)
  Prédit: 'def'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'def' → logprob: -0.20367436110973358
    2. '<|end|>' → logprob: -2.45367431640625
    3. '
' → logprob: -2.95367431640625
    4. '

' → logprob: -3.57867431640625
    5. '()' → logprob: -5.32867431640625
    6. '(' → logprob: -5.70367431640625
    7. '<|end|>' → logprob: -6.20367431640625
    8. '\' → logprob: -6.32867431640625
    9. '```' → logprob: -6.45367431640625
    10. ' def' → logprob: -6.95367431640625

Token 79: 'def' (ID: 1314)
  Prédit: 'def'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'def' → logprob: -0.038574058562517166
    2. 'd' → logprob: -4.16357421875
    3. '
' → logprob: -4.41357421875
    4. '\' → logprob: -5.03857421875
    5. '

' → logprob: -6.66357421875
    6. '#' → logprob: -7.28857421875
    7. '<|end|>' → logprob: -7.78857421875
    8. '```' → logprob: -8.03857421875
    9. 'a' → logprob: -8.28857421875
    10. '\n' → logprob: -8.41357421875

Token 80: ' print' (ID: 2123)
  Prédit: ' multiply'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' multiply' → logprob: -0.7295802235603333
    2. ' subtract' → logprob: -0.7295802235603333
    3. 'subtract' → logprob: -3.7295801639556885
    4. ' sub' → logprob: -5.354580402374268
    5. 'multiply' → logprob: -5.729580402374268
    6. ' main' → logprob: -6.229580402374268
    7. ' add' → logprob: -7.604580402374268
    8. 'sub' → logprob: -8.60457992553711
    9. ' is' → logprob: -8.60457992553711
    10. ' factorial' → logprob: -8.72957992553711

Token 81: '_sum' (ID: 29859)
  Prédit: '_'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '_' → logprob: -0.008941546082496643
    2. '(' → logprob: -5.383941650390625
    3. '("_' → logprob: -5.758941650390625
    4. '("' → logprob: -7.508941650390625
    5. '_("' → logprob: -8.008941650390625
    6. '_(' → logprob: -9.133941650390625
    7. '("("' → logprob: -9.883941650390625
    8. '('_' → logprob: -10.883941650390625
    9. '(_' → logprob: -10.883941650390625
    10. '__' → logprob: -11.258941650390625

Token 82: '(a' (ID: 6271)
  Prédit: '(a'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(a' → logprob: -0.31775957345962524
    2. '(' → logprob: -1.3177595138549805
    3. '()' → logprob: -5.4427595138549805
    4. ' (' → logprob: -9.31775951385498
    5. '((' → logprob: -10.81775951385498
    6. '(add' → logprob: -11.94275951385498
    7. '()(' → logprob: -12.19275951385498
    8. '(def' → logprob: -12.31775951385498
    9. '(print' → logprob: -12.56775951385498
    10. '("("' → logprob: -12.81775951385498

Token 83: ',' (ID: 11)
  Prédit: ','
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ',' → logprob: -0.0004375830467324704
    2. ',b' → logprob: -8.37543773651123
    3. ' ,' → logprob: -8.50043773651123
    4. ',a' → logprob: -13.00043773651123
    5. ')' → logprob: -13.87543773651123
    6. ' ' → logprob: -15.75043773651123
    7. 'b' → logprob: -16.875436782836914
    8. ',
' → logprob: -17.125436782836914
    9. 'a' → logprob: -17.500436782836914
    10. ' b' → logprob: -17.625436782836914

Token 84: ' b' (ID: 287)
  Prédit: ' b'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' b' → logprob: -0.3868717551231384
    2. 'b' → logprob: -1.1368718147277832
    3. ' ' → logprob: -14.886871337890625
    4. ')b' → logprob: -15.636871337890625
    5. ' б' → logprob: -16.386871337890625
    6. ',b' → logprob: -17.011871337890625
    7. ' ' → logprob: -17.136871337890625
    8. ')' → logprob: -17.261871337890625
    9. '<|end|>' → logprob: -17.761871337890625
    10. '	b' → logprob: -17.886871337890625

Token 85: '):
' (ID: 1883)
  Prédit: '):'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '):' → logprob: -0.0004336493439041078
    2. ')' → logprob: -7.750433444976807
    3. '():' → logprob: -13.750433921813965
    4. ':' → logprob: -14.000433921813965
    5. '):
' → logprob: -14.750433921813965
    6. ' ):' → logprob: -14.875433921813965
    7. '   ' → logprob: -16.00043296813965
    8. ')：' → logprob: -17.12543296813965
    9. ''):' → logprob: -17.75043296813965
    10. '）：' → logprob: -18.00043296813965

Token 86: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.00012118533049942926
    2. ' print' → logprob: -9.375121116638184
    3. 'print' → logprob: -10.250121116638184
    4. '   ' → logprob: -15.375121116638184
    5. '```' → logprob: -16.1251220703125
    6. ')' → logprob: -16.2501220703125
    7. '    
' → logprob: -16.2501220703125
    8. '  ' → logprob: -16.3751220703125
    9. '	print' → logprob: -16.3751220703125
    10. ' ' → logprob: -16.7501220703125

Token 87: ' result' (ID: 1534)
  Prédit: ' print'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' print' → logprob: -0.1328481137752533
    2. '   ' → logprob: -2.132848024368286
    3. 'print' → logprob: -5.132848262786865
    4. '	print' → logprob: -13.882847785949707
    5. '```' → logprob: -14.882847785949707
    6. '   ' → logprob: -15.007847785949707
    7. '.print' → logprob: -15.257847785949707
    8. ' p' → logprob: -15.757847785949707
    9. ' prin' → logprob: -15.882847785949707
    10. ' ' → logprob: -15.882847785949707

Token 88: ' =' (ID: 314)
  Prédit: ' ='
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' =' → logprob: -0.013434324413537979
    2. '=' → logprob: -4.638434410095215
    3. ' ' → logprob: -6.013434410095215
    4. '.' → logprob: -8.388434410095215
    5. ' ==' → logprob: -8.388434410095215
    6. ' +=' → logprob: -8.638434410095215
    7. ')' → logprob: -8.763434410095215
    8. ' )' → logprob: -9.763434410095215
    9. ' .=' → logprob: -10.013434410095215
    10. '<|end|>' → logprob: -10.013434410095215

Token 89: ' add' (ID: 1147)
  Prédit: ' add'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' add' → logprob: -0.019362814724445343
    2. ' a' → logprob: -4.519362926483154
    3. 'add' → logprob: -5.019362926483154
    4. 'a' → logprob: -6.394362926483154
    5. ' ' → logprob: -15.144362449645996
    6. '	add' → logprob: -15.144362449645996
    7. '(add' → logprob: -16.394363403320312
    8. ' an' → logprob: -17.019363403320312
    9. '   ' → logprob: -17.269363403320312
    10. ')add' → logprob: -17.394363403320312

Token 90: '(a' (ID: 6271)
  Prédit: '(a'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(a' → logprob: -0.20141752064228058
    2. '(' → logprob: -1.7014175653457642
    3. '(
' → logprob: -12.576417922973633
    4. ' (' → logprob: -14.701417922973633
    5. '(

' → logprob: -15.451417922973633
    6. '()' → logprob: -16.826417922973633
    7. 'a' → logprob: -17.201417922973633
    8. '(ai' → logprob: -18.076417922973633
    9. '(b' → logprob: -18.326417922973633
    10. '('' → logprob: -18.326417922973633

Token 91: ',' (ID: 11)
  Prédit: ','
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ',' → logprob: -6.027225754223764e-05
    2. ' ,' → logprob: -10.000060081481934
    3. ',b' → logprob: -11.125060081481934
    4. 'b' → logprob: -17.75006103515625
    5. ',
' → logprob: -17.75006103515625
    6. ' ' → logprob: -17.87506103515625
    7. ')' → logprob: -19.00006103515625
    8. '‌,' → logprob: -19.25006103515625
    9. '，' → logprob: -19.50006103515625
    10. ',

' → logprob: -21.00006103515625

Token 92: ' b' (ID: 287)
  Prédit: ' b'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' b' → logprob: -0.04859611392021179
    2. 'b' → logprob: -3.048596143722534
    3. ' ' → logprob: -12.048596382141113
    4. ')b' → logprob: -13.548596382141113
    5. ')' → logprob: -14.423596382141113
    6. ' )' → logprob: -14.798596382141113
    7. ' ' → logprob: -14.798596382141113
    8. '<|end|>' → logprob: -16.048595428466797
    9. ' б' → logprob: -16.798595428466797
    10. '	b' → logprob: -17.173595428466797

Token 93: ')
' (ID: 446)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')' → logprob: -0.02325025200843811
    2. ')
' → logprob: -3.7732503414154053
    3. ')
' → logprob: -12.398250579833984
    4. ')

' → logprob: -14.648250579833984
    5. ' )' → logprob: -16.398250579833984
    6. '   ' → logprob: -17.273250579833984
    7. ' ' → logprob: -17.523250579833984
    8. '),' → logprob: -17.648250579833984
    9. ')return' → logprob: -17.773250579833984
    10. ' )
' → logprob: -18.273250579833984

Token 94: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.005793932359665632
    2. '
' → logprob: -6.005794048309326
    3. 'print' → logprob: -6.005794048309326
    4. ' print' → logprob: -7.630794048309326
    5. '    
' → logprob: -8.005793571472168
    6. '	print' → logprob: -11.380793571472168
    7. '```' → logprob: -12.380793571472168
    8. '\n' → logprob: -12.505793571472168
    9. ' 
' → logprob: -12.630793571472168
    10. '  
' → logprob: -13.255793571472168

Token 95: ' print' (ID: 2123)
  Prédit: ' print'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' print' → logprob: -0.19272921979427338
    2. 'print' (adapté à ' print') → logprob: -1.9427292346954346
    3. '   ' → logprob: -3.4427292346954346
    4. '	print' → logprob: -13.442728996276855
    5. '    
' → logprob: -13.567728996276855
    6. '
' → logprob: -14.317728996276855
    7. '.print' → logprob: -14.817728996276855
    8. ' 
' → logprob: -14.942728996276855
    9. '```' → logprob: -15.067728996276855
    10. '   ' → logprob: -15.567728996276855

Token 96: '(result' (ID: 8111)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(' → logprob: -0.38709893822669983
    2. '(result' → logprob: -1.1370989084243774
    3. '("("' → logprob: -8.512099266052246
    4. '(f' → logprob: -11.012099266052246
    5. '('' → logprob: -12.512099266052246
    6. '("' → logprob: -12.887099266052246
    7. '(res' → logprob: -14.012099266052246
    8. ' (' → logprob: -14.137099266052246
    9. '()' → logprob: -14.387099266052246
    10. '(results' → logprob: -14.512099266052246

Token 97: ')

' (ID: 1029)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')' → logprob: -6.704273118884885e-07
    2. ')
' → logprob: -14.375000953674316
    3. ' )' → logprob: -17.125
    4. '))' → logprob: -18.25
    5. '')' → logprob: -19.0
    6. '   ' → logprob: -19.375
    7. ')

' → logprob: -20.0
    8. ')`' → logprob: -20.125
    9. '")' → logprob: -20.25
    10. '),' → logprob: -20.5

Token 98: 'def' (ID: 1314)
  Prédit: 'def'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'def' → logprob: -0.6589142680168152
    2. 'd' → logprob: -0.7839142680168152
    3. '
' → logprob: -4.158914089202881
    4. '\' → logprob: -5.033914089202881
    5. '#' → logprob: -6.533914089202881
    6. '

' → logprob: -6.908914089202881
    7. '\n' → logprob: -8.283914566040039
    8. '' → logprob: -8.283914566040039
    9. 'n' → logprob: -8.408914566040039
    10. 'a' → logprob: -8.658914566040039

Token 99: ' handle' (ID: 5318)
  Prédit: ' multiply'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' multiply' → logprob: -0.7233539819717407
    2. ' main' → logprob: -0.8483539819717407
    3. ' subtract' → logprob: -3.473353862762451
    4. ' print' → logprob: -3.598353862762451
    5. 'multiply' → logprob: -4.973353862762451
    6. ' is' → logprob: -5.098353862762451
    7. ' factorial' → logprob: -5.973353862762451
    8. ' check' → logprob: -5.973353862762451
    9. 'subtract' → logprob: -5.973353862762451
    10. ' calculate' → logprob: -6.348353862762451

Token 100: '_case' (ID: 43667)
  Prédit: '_input'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_input' → logprob: -0.023580169305205345
    2. '_' → logprob: -4.273580074310303
    3. '_sum' → logprob: -5.398580074310303
    4. '_number' → logprob: -6.148580074310303
    5. '_user' → logprob: -7.523580074310303
    6. '_two' → logprob: -7.523580074310303
    7. '_one' → logprob: -7.773580074310303
    8. '_command' → logprob: -8.148580551147461
    9. '_value' → logprob: -8.398580551147461
    10. '_case' → logprob: -8.898580551147461

Token 101: '_one' (ID: 26979)
  Prédit: '(n'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '(n' → logprob: -0.03754284232854843
    2. '(' → logprob: -3.6625428199768066
    3. ' (' → logprob: -4.912542819976807
    4. '_' → logprob: -6.287542819976807
    5. '():' → logprob: -7.037542819976807
    6. '(a' → logprob: -8.162543296813965
    7. '(_' → logprob: -8.912543296813965
    8. '(s' → logprob: -9.162543296813965
    9. '_(' → logprob: -9.162543296813965
    10. '1' → logprob: -9.412543296813965

Token 102: '():
' (ID: 8595)
  Prédit: '():'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '():' → logprob: -0.0035463781096041203
    2. '(' → logprob: -6.753546237945557
    3. '(n' → logprob: -7.003546237945557
    4. '()' → logprob: -7.003546237945557
    5. ' ():' → logprob: -7.753546237945557
    6. '():
' → logprob: -9.378546714782715
    7. '()(' → logprob: -10.628546714782715
    8. ' ()' → logprob: -11.753546714782715
    9. ' (' → logprob: -12.128546714782715
    10. '(a' → logprob: -13.378546714782715

Token 103: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.0297680776566267
    2. 'print' → logprob: -3.5297679901123047
    3. ' print' → logprob: -11.029767990112305
    4. '```' → logprob: -14.029767990112305
    5. '	print' → logprob: -15.404767990112305
    6. '    
' → logprob: -15.904767990112305
    7. '   ' → logprob: -16.279767990112305
    8. '       ' → logprob: -16.404767990112305
    9. '
' → logprob: -17.154767990112305
    10. 'def' → logprob: -17.279767990112305

Token 104: ' print' (ID: 2123)
  Prédit: 'print'
  Correct (stricte): False
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'print' (adapté à ' print') → logprob: -0.0015170073602348566
    2. '   ' → logprob: -6.501516819000244
    3. ' print' → logprob: -11.251517295837402
    4. '
' → logprob: -14.501517295837402
    5. 'def' → logprob: -15.376517295837402
    6. '    
' → logprob: -15.751517295837402
    7. '	print' → logprob: -15.876517295837402
    8. '```' → logprob: -15.876517295837402
    9. 'pass' → logprob: -16.251516342163086
    10. ' ' → logprob: -16.376516342163086

Token 105: '_' (ID: 62)
  Prédit: '_'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_' → logprob: -0.023475484922528267
    2. '("' → logprob: -3.773475408554077
    3. '("_' → logprob: -8.773475646972656
    4. '_("' → logprob: -9.773475646972656
    5. 'Hello' → logprob: -11.148475646972656
    6. '(' → logprob: -14.023475646972656
    7. '_"' → logprob: -14.148475646972656
    8. '(_' → logprob: -14.648475646972656
    9. ' Hello' → logprob: -15.273475646972656
    10. ' ("' → logprob: -15.273475646972656

Token 106: 'hello' (ID: 24912)
  Prédit: '"'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '"' → logprob: -0.25637897849082947
    2. 'Hello' → logprob: -2.1313788890838623
    3. 'hello' → logprob: -2.2563788890838623
    4. '("' → logprob: -6.381379127502441
    5. '_' → logprob: -7.381379127502441
    6. '1' → logprob: -8.256379127502441
    7. 'one' → logprob: -9.631379127502441
    8. 'world' → logprob: -11.006379127502441
    9. ''' → logprob: -11.256379127502441
    10. ' "' → logprob: -11.256379127502441

Token 107: '_world' (ID: 76816)
  Prédit: '_world'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_world' → logprob: -3.531315314830863e-06
    2. '_' → logprob: -13.125003814697266
    3. 'world' → logprob: -13.875003814697266
    4. '_space' → logprob: -15.000003814697266
    5. '_WORLD' → logprob: -16.625003814697266
    6. '_word' → logprob: -17.000003814697266
    7. 'World' → logprob: -17.500003814697266
    8. 'oworld' → logprob: -18.250003814697266
    9. ' _' → logprob: -18.625003814697266
    10. ' World' → logprob: -19.250003814697266

Token 108: '()

' (ID: 5874)
  Prédit: '()'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '()' → logprob: -0.0002128382766386494
    2. '()
' → logprob: -8.625212669372559
    3. '()

' → logprob: -10.375212669372559
    4. '()`' → logprob: -14.125212669372559
    5. '(' → logprob: -15.000212669372559
    6. ' ()' → logprob: -15.000212669372559
    7. '();' → logprob: -15.750212669372559
    8. '()"' → logprob: -16.125213623046875
    9. '()


' → logprob: -16.500213623046875
    10. '()\' → logprob: -16.625213623046875

Token 109: 'def' (ID: 1314)
  Prédit: 'def'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'def' → logprob: -0.00020592445798683912
    2. '
' → logprob: -8.500205993652344
    3. '<|end|>' → logprob: -13.375205993652344
    4. '```' → logprob: -14.875205993652344
    5. '    
' → logprob: -15.625205993652344
    6. '

' → logprob: -15.625205993652344
    7. ' def' → logprob: -16.000205993652344
    8. '  
' → logprob: -16.375205993652344
    9. '\' → logprob: -17.375205993652344
    10. 'ndef' → logprob: -18.000205993652344

Token 110: ' handle' (ID: 5318)
  Prédit: 'handle'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'handle' → logprob: -0.25217127799987793
    2. ' handle' → logprob: -1.502171277999878
    3. 'def' → logprob: -8.877171516418457
    4. 'andle' → logprob: -9.877171516418457
    5. '_handle' → logprob: -10.127171516418457
    6. '(handle' → logprob: -12.877171516418457
    7. '.handle' → logprob: -13.002171516418457
    8. ' def' → logprob: -13.127171516418457
    9. '	handle' → logprob: -13.127171516418457
    10. ' ' → logprob: -14.127171516418457

Token 111: '_case' (ID: 43667)
  Prédit: '_case'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_case' → logprob: -6.32523515378125e-05
    2. '_two' → logprob: -9.750062942504883
    3. '_' → logprob: -12.375062942504883
    4. '_one' → logprob: -15.000062942504883
    5. ' _' → logprob: -16.250062942504883
    6. 'case' → logprob: -16.500062942504883
    7. '__' → logprob: -17.250062942504883
    8. '_cases' → logprob: -17.375062942504883
    9. '_code' → logprob: -17.500062942504883
    10. '_c' → logprob: -17.750062942504883

Token 112: '_two' (ID: 54305)
  Prédit: '_two'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_two' → logprob: -0.006727095227688551
    2. '_one' → logprob: -5.00672721862793
    3. '_' → logprob: -11.88172721862793
    4. '_three' → logprob: -12.38172721862793
    5. '_a' → logprob: -16.25672721862793
    6. '_t' → logprob: -16.25672721862793
    7. '_tw' → logprob: -16.38172721862793
    8. 'two' → logprob: -16.50672721862793
    9. '__' → logprob: -17.50672721862793
    10. '_TWO' → logprob: -17.88172721862793

Token 113: '():
' (ID: 8595)
  Prédit: '():'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '():' → logprob: -4.008129963040119e-06
    2. ' ():' → logprob: -12.500003814697266
    3. '():
' → logprob: -15.500003814697266
    4. '()' → logprob: -16.375003814697266
    5. '():
' → logprob: -21.000003814697266
    6. ':' → logprob: -22.500003814697266
    7. '().' → logprob: -22.625003814697266
    8. '():

' → logprob: -22.875003814697266
    9. '()>' → logprob: -23.000003814697266
    10. ' ()' → logprob: -23.125003814697266

Token 114: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.04895941540598869
    2. 'print' → logprob: -3.048959493637085
    3. ' print' → logprob: -7.923959255218506
    4. '       ' → logprob: -12.798959732055664
    5. ' ' → logprob: -13.173959732055664
    6. '	print' → logprob: -13.423959732055664
    7. '  ' → logprob: -13.548959732055664
    8. 'pass' → logprob: -14.173959732055664
    9. 'def' → logprob: -14.673959732055664
    10. '   ' → logprob: -15.048959732055664

Token 115: ' a' (ID: 261)
  Prédit: 'print'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'print' → logprob: -0.012195856310427189
    2. '   ' → logprob: -4.637196063995361
    3. ' print' → logprob: -6.637196063995361
    4. 'a' (adapté à ' a') → logprob: -7.637196063995361
    5. 'n' → logprob: -8.387195587158203
    6. 'result' → logprob: -8.762195587158203
    7. 'value' → logprob: -8.887195587158203
    8. 'sum' → logprob: -10.762195587158203
    9. 'x' → logprob: -11.387195587158203
    10. ' n' → logprob: -11.512195587158203

Token 116: ' =' (ID: 314)
  Prédit: ','
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ',' → logprob: -0.2724544405937195
    2. ' =' → logprob: -1.7724545001983643
    3. ' ,' → logprob: -2.7724545001983643
    4. '=' → logprob: -5.147454261779785
    5. ' ' → logprob: -8.647454261779785
    6. ',b' → logprob: -10.522454261779785
    7. '  ' → logprob: -11.397454261779785
    8. '   ' → logprob: -11.772454261779785
    9. 'def' → logprob: -12.397454261779785
    10. ' +' → logprob: -12.647454261779785

Token 117: ' read' (ID: 1729)
  Prédit: 'read'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'read' → logprob: -0.19058850407600403
    2. ' read' → logprob: -2.3155884742736816
    3. ' ' → logprob: -3.9405884742736816
    4. '3' → logprob: -3.9405884742736816
    5. '1' → logprob: -4.190588474273682
    6. '5' → logprob: -4.315588474273682
    7. '2' → logprob: -5.190588474273682
    8. '10' → logprob: -6.940588474273682
    9. '4' → logprob: -8.31558895111084
    10. '0' → logprob: -9.19058895111084

Token 118: '_int' (ID: 12285)
  Prédit: '_int'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_int' → logprob: -8.061054359131958e-06
    2. '_' → logprob: -12.750007629394531
    3. '_input' → logprob: -12.750007629394531
    4. '```' → logprob: -14.750007629394531
    5. '_sum' → logprob: -14.875007629394531
    6. 'int' → logprob: -15.125007629394531
    7. '_uint' → logprob: -15.125007629394531
    8. '_in' → logprob: -15.250007629394531
    9. '_from' → logprob: -15.750007629394531
    10. '_float' → logprob: -16.62500762939453

Token 119: '_from' (ID: 12526)
  Prédit: '_from'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_from' → logprob: -0.002727836836129427
    2. '()' → logprob: -6.00272798538208
    3. 'from' → logprob: -8.502727508544922
    4. '_' → logprob: -10.252727508544922
    5. '()
' → logprob: -11.377727508544922
    6. 'From' → logprob: -14.252727508544922
    7. '_input' → logprob: -14.752727508544922
    8. '_FROM' → logprob: -15.252727508544922
    9. ' _' → logprob: -15.502727508544922
    10. '```' → logprob: -15.627727508544922

Token 120: '_input' (ID: 12507)
  Prédit: '_input'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_input' → logprob: -0.0004898841143585742
    2. 'input' → logprob: -7.625489711761475
    3. '_' → logprob: -14.000490188598633
    4. '(input' → logprob: -14.375490188598633
    5. ' input' → logprob: -15.875490188598633
    6. 'Input' → logprob: -16.625490188598633
    7. 'put' → logprob: -16.750490188598633
    8. '()' → logprob: -17.125490188598633
    9. '```' → logprob: -17.875490188598633
    10. '(' → logprob: -18.125490188598633

Token 121: '()
' (ID: 1234)
  Prédit: '()'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '()' → logprob: -0.25195372104644775
    2. '()
' → logprob: -1.5019537210464478
    3. '()
' → logprob: -10.751954078674316
    4. '()

' → logprob: -13.001954078674316
    5. '()\' → logprob: -15.126954078674316
    6. '(
' → logprob: -15.376954078674316
    7. '(' → logprob: -15.751954078674316
    8. '())' → logprob: -16.501953125
    9. ' ()' → logprob: -16.751953125
    10. ')' → logprob: -16.876953125

Token 122: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.04319557920098305
    2. 'b' → logprob: -3.1681954860687256
    3. '	b' → logprob: -8.668195724487305
    4. ' b' → logprob: -10.918195724487305
    5. '       ' → logprob: -12.918195724487305
    6. 'print' → logprob: -14.043195724487305
    7. '
' → logprob: -14.418195724487305
    8. ' ' → logprob: -14.418195724487305
    9. ',b' → logprob: -14.793195724487305
    10. '    ' → logprob: -15.418195724487305

Token 123: ' b' (ID: 287)
  Prédit: 'b'
  Correct (stricte): False
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'b' (adapté à ' b') → logprob: -0.01641637645661831
    2. '   ' → logprob: -4.141416549682617
    3. ' b' → logprob: -7.891416549682617
    4. ' ' → logprob: -12.641416549682617
    5. '  ' → logprob: -12.891416549682617
    6. '	b' → logprob: -13.266416549682617
    7. '    ' → logprob: -15.641416549682617
    8. 'print' → logprob: -15.766416549682617
    9. '       ' → logprob: -16.891416549682617
    10. '    
' → logprob: -17.141416549682617

Token 124: ' =' (ID: 314)
  Prédit: ' ='
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' =' → logprob: -0.07888989895582199
    2. '=' → logprob: -2.578889846801758
    3. '   ' → logprob: -16.328889846801758
    4. ')' → logprob: -18.078889846801758
    5. '  ' → logprob: -18.328889846801758
    6. ' ' → logprob: -18.453889846801758
    7. '_' → logprob: -19.203889846801758
    8. '＝' → logprob: -19.828889846801758
    9. 'a' → logprob: -20.203889846801758
    10. '.' → logprob: -20.203889846801758

Token 125: ' read' (ID: 1729)
  Prédit: ' read'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' read' → logprob: -0.20141646265983582
    2. 'read' → logprob: -1.7014164924621582
    3. '	read' → logprob: -13.326416015625
    4. ' ' → logprob: -14.201416015625
    5. ' add' → logprob: -15.201416015625
    6. '  ' → logprob: -15.826416015625
    7. '   ' → logprob: -15.951416015625
    8. 'a' → logprob: -16.576416015625
    9. '(read' → logprob: -16.951416015625
    10. 'add' → logprob: -17.201416015625

Token 126: '_int' (ID: 12285)
  Prédit: '_int'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_int' → logprob: -7.822646693966817e-06
    2. '_input' → logprob: -12.500007629394531
    3. '_' → logprob: -13.375007629394531
    4. '_from' → logprob: -13.375007629394531
    5. 'int' → logprob: -14.750007629394531
    6. '_in' → logprob: -15.375007629394531
    7. ' _' → logprob: -15.625007629394531
    8. '_float' → logprob: -16.87500762939453
    9. '```' → logprob: -17.12500762939453
    10. '_val' → logprob: -17.75000762939453

Token 127: '_from' (ID: 12526)
  Prédit: '_from'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_from' → logprob: -1.6240566083070007e-06
    2. 'from' → logprob: -13.375001907348633
    3. '_FROM' → logprob: -18.000001907348633
    4. 'From' → logprob: -18.625001907348633
    5. '_input' → logprob: -19.875001907348633
    6. '_to' → logprob: -21.125001907348633
    7. '_for' → logprob: -21.125001907348633
    8. '_f' → logprob: -21.250001907348633
    9. '_From' → logprob: -21.750001907348633
    10. '```' → logprob: -21.875001907348633

Token 128: '_input' (ID: 12507)
  Prédit: '_input'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_input' → logprob: -0.004079589620232582
    2. 'input' → logprob: -5.504079818725586
    3. '_' → logprob: -14.754079818725586
    4. ' input' → logprob: -15.504079818725586
    5. 'Input' → logprob: -16.254079818725586
    6. 'read' → logprob: -16.379079818725586
    7. 'put' → logprob: -16.629079818725586
    8. 'int' → logprob: -16.879079818725586
    9. '_INPUT' → logprob: -17.004079818725586
    10. '_in' → logprob: -17.379079818725586

Token 129: '()
' (ID: 1234)
  Prédit: '()'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '()' → logprob: -0.0007110013975761831
    2. '()
' → logprob: -7.250710964202881
    3. '()

' → logprob: -14.625711441040039
    4. '(' → logprob: -16.00071144104004
    5. '()`' → logprob: -16.00071144104004
    6. '()]' → logprob: -16.37571144104004
    7. '()
' → logprob: -16.50071144104004
    8. ' ()' → logprob: -16.50071144104004
    9. '())' → logprob: -17.12571144104004
    10. '()"' → logprob: -17.75071144104004

Token 130: '   ' (ID: 271)
  Prédit: '
'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '
' → logprob: -0.3516215682029724
    2. '   ' → logprob: -1.2266216278076172
    3. 'print' → logprob: -6.351621627807617
    4. '    
' → logprob: -7.101621627807617
    5. '
' → logprob: -8.351621627807617
    6. '  
' → logprob: -8.726621627807617
    7. '```' → logprob: -9.976621627807617
    8. '\n' → logprob: -10.351621627807617
    9. '	print' → logprob: -10.976621627807617
    10. ' 
' → logprob: -11.101621627807617

Token 131: ' print' (ID: 2123)
  Prédit: 'print'
  Correct (stricte): False
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'print' (adapté à ' print') → logprob: -4.2987729102605954e-05
    2. '   ' → logprob: -10.500042915344238
    3. ' print' → logprob: -11.375042915344238
    4. '
' → logprob: -12.750042915344238
    5. '    
' → logprob: -15.125042915344238
    6. 'c' → logprob: -15.500042915344238
    7. 'result' → logprob: -15.750042915344238
    8. ' ' → logprob: -16.125043869018555
    9. '  ' → logprob: -16.250043869018555
    10. '	print' → logprob: -16.250043869018555

Token 132: '_sum' (ID: 29859)
  Prédit: '_sum'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_sum' → logprob: -1.9361264946837764e-07
    2. '_' → logprob: -16.25
    3. '_add' → logprob: -19.75
    4. 'sum' → logprob: -19.875
    5. '(a' → logprob: -20.75
    6. '("_' → logprob: -21.75
    7. '(sum' → logprob: -21.75
    8. '_SUM' → logprob: -22.0
    9. '_s' → logprob: -22.25
    10. '(' → logprob: -22.5

Token 133: '(a' (ID: 6271)
  Prédit: '(a'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(a' → logprob: -6.682846287731081e-05
    2. '(' → logprob: -9.625066757202148
    3. '(
' → logprob: -14.875066757202148
    4. ' (' → logprob: -15.000066757202148
    5. '(b' → logprob: -17.00006675720215
    6. '```' → logprob: -19.50006675720215
    7. 'a' → logprob: -19.62506675720215
    8. '((' → logprob: -20.25006675720215
    9. '(ab' → logprob: -20.75006675720215
    10. ' ' → logprob: -20.87506675720215

Token 134: ',' (ID: 11)
  Prédit: ','
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ',' → logprob: -0.0012988077942281961
    2. ',b' → logprob: -6.876298904418945
    3. ' ,' → logprob: -8.251298904418945
    4. 'b' → logprob: -12.376298904418945
    5. ',
' → logprob: -14.751298904418945
    6. ' b' → logprob: -15.751298904418945
    7. ' ' → logprob: -16.501298904418945
    8. ')' → logprob: -16.751298904418945
    9. '   ' → logprob: -17.126298904418945
    10. '```' → logprob: -18.126298904418945

Token 135: ' b' (ID: 287)
  Prédit: ' b'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' b' → logprob: -0.5759419798851013
    2. 'b' → logprob: -0.8259419798851013
    3. ')b' → logprob: -13.700942039489746
    4. ')' → logprob: -14.075942039489746
    5. ' ' → logprob: -15.075942039489746
    6. '    ' → logprob: -15.700942039489746
    7. '	b' → logprob: -16.45094108581543
    8. ' )' → logprob: -16.57594108581543
    9. ' ' → logprob: -17.07594108581543
    10. ' 
' → logprob: -17.20094108581543

Token 136: ')

' (ID: 1029)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')' → logprob: -6.034592388459714e-06
    2. ')
' → logprob: -12.750005722045898
    3. '()' → logprob: -13.000005722045898
    4. '())' → logprob: -14.375005722045898
    5. ' )' → logprob: -16.0000057220459
    6. ')

' → logprob: -16.5000057220459
    7. '   ' → logprob: -18.6250057220459
    8. '))' → logprob: -19.0000057220459
    9. ')#' → logprob: -19.8750057220459
    10. '),' → logprob: -20.0000057220459

Token 137: 'def' (ID: 1314)
  Prédit: 'def'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'def' → logprob: -5.013994814362377e-05
    2. 'switch' → logprob: -10.37505054473877
    3. 'case' → logprob: -12.12505054473877
    4. 'options' → logprob: -13.00005054473877
    5. 'n' → logprob: -13.25005054473877
    6. '```' → logprob: -13.37505054473877
    7. 'cases' → logprob: -13.50005054473877
    8. 'while' → logprob: -13.75005054473877
    9. 'if' → logprob: -13.87505054473877
    10. 'functions' → logprob: -14.25005054473877

Token 138: ' main' (ID: 2758)
  Prédit: ' main'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' main' → logprob: -0.10453058779239655
    2. ' handle' → logprob: -2.3545305728912354
    3. 'handle' → logprob: -6.2295308113098145
    4. 'main' → logprob: -6.3545308113098145
    5. ' run' → logprob: -8.604530334472656
    6. ' process' → logprob: -8.854530334472656
    7. ' dispatch' → logprob: -9.479530334472656
    8. '_handle' → logprob: -9.979530334472656
    9. ' def' → logprob: -10.354530334472656
    10. 'def' → logprob: -10.729530334472656

Token 139: '():
' (ID: 8595)
  Prédit: '():'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '():' → logprob: -3.893480243277736e-05
    2. ' ():' → logprob: -10.625039100646973
    3. '():
' → logprob: -11.375039100646973
    4. '()' → logprob: -12.750039100646973
    5. '_' → logprob: -16.500038146972656
    6. '(' → logprob: -16.625038146972656
    7. '():
' → logprob: -16.875038146972656
    8. '()>' → logprob: -18.750038146972656
    9. '():

' → logprob: -19.125038146972656
    10. ':' → logprob: -20.125038146972656

Token 140: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.046479739248752594
    2. 'n' → logprob: -3.6714797019958496
    3. ' n' → logprob: -3.9214797019958496
    4. '
' → logprob: -9.921480178833008
    5. '    
' → logprob: -10.046480178833008
    6. '	n' → logprob: -10.546480178833008
    7. 'input' → logprob: -11.421480178833008
    8. ' input' → logprob: -11.921480178833008
    9. '```' → logprob: -12.546480178833008
    10. ' while' → logprob: -12.546480178833008

Token 141: ' n' (ID: 297)
  Prédit: 'n'
  Correct (stricte): False
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'n' (adapté à ' n') → logprob: -0.28326675295829773
    2. 'choice' → logprob: -1.5332667827606201
    3. ' choice' → logprob: -4.033266544342041
    4. ' n' → logprob: -4.908266544342041
    5. 'option' → logprob: -5.783266544342041
    6. 'value' → logprob: -6.908266544342041
    7. 'case' → logprob: -7.033266544342041
    8. '   ' → logprob: -7.658266544342041
    9. ' option' → logprob: -8.9082670211792
    10. 'command' → logprob: -10.4082670211792

Token 142: ' =' (ID: 314)
  Prédit: ' ='
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' =' → logprob: -0.012512121349573135
    2. '=' → logprob: -4.38751220703125
    3. ' ' → logprob: -14.01251220703125
    4. '_' → logprob: -14.26251220703125
    5. ' =
' → logprob: -15.01251220703125
    6. '  ' → logprob: -15.26251220703125
    7. '   ' → logprob: -15.51251220703125
    8. ')' → logprob: -16.26251220703125
    9. '=int' → logprob: -16.38751220703125
    10. '=input' → logprob: -17.13751220703125

Token 143: ' read' (ID: 1729)
  Prédit: 'read'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'read' → logprob: -0.6334306597709656
    2. ' read' → logprob: -0.7584306597709656
    3. 'parse' → logprob: -7.758430480957031
    4. ' parse' → logprob: -8.133430480957031
    5. ' get' → logprob: -10.508430480957031
    6. ' int' → logprob: -10.633430480957031
    7. 'get' → logprob: -10.758430480957031
    8. 'int' → logprob: -11.008430480957031
    9. ' ' → logprob: -11.883430480957031
    10. '   ' → logprob: -12.008430480957031

Token 144: '_int' (ID: 12285)
  Prédit: '_int'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_int' → logprob: -0.0002581209992058575
    2. '_input' → logprob: -8.375258445739746
    3. '_' → logprob: -11.500258445739746
    4. '_in' → logprob: -11.625258445739746
    5. 'int' → logprob: -12.500258445739746
    6. '_from' → logprob: -13.625258445739746
    7. '_str' → logprob: -13.750258445739746
    8. '_float' → logprob: -15.250258445739746
    9. '_line' → logprob: -15.375258445739746
    10. '_string' → logprob: -15.625258445739746

Token 145: '_from' (ID: 12526)
  Prédit: '_from'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_from' → logprob: -1.9361264946837764e-07
    2. 'from' → logprob: -15.625
    3. '_FROM' → logprob: -19.125
    4. '_' → logprob: -19.625
    5. '_for' → logprob: -19.75
    6. '_to' → logprob: -19.75
    7. '```' → logprob: -20.125
    8. '_or' → logprob: -21.0
    9. '()' → logprob: -21.0
    10. 'From' → logprob: -21.25

Token 146: '_input' (ID: 12507)
  Prédit: 'input'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'input' → logprob: -0.10309206694364548
    2. '_input' → logprob: -2.3530919551849365
    3. 'put' → logprob: -5.853092193603516
    4. 'Input' → logprob: -11.853092193603516
    5. ' input' → logprob: -13.353092193603516
    6. 'n' → logprob: -14.978092193603516
    7. '(input' → logprob: -15.103092193603516
    8. 'get' → logprob: -15.728092193603516
    9. 'import' → logprob: -15.978092193603516
    10. 'puts' → logprob: -16.103092193603516

Token 147: '()
' (ID: 1234)
  Prédit: '()'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '()' → logprob: -0.03806593269109726
    2. '()
' → logprob: -3.2880659103393555
    3. '   ' → logprob: -11.038065910339355
    4. '()

' → logprob: -11.913065910339355
    5. '()
' → logprob: -14.413065910339355
    6. '()\' → logprob: -14.788065910339355
    7. '(' → logprob: -15.038065910339355
    8. 'def' → logprob: -15.788065910339355
    9. '()`' → logprob: -16.538066864013672
    10. ' ()' → logprob: -16.538066864013672

Token 148: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.0016498296754434705
    2. 'if' → logprob: -6.501649856567383
    3. ' if' → logprob: -9.126649856567383
    4. '    
' → logprob: -10.251649856567383
    5. '
' → logprob: -12.876649856567383
    6. '	if' → logprob: -14.626649856567383
    7. '```' → logprob: -15.751649856567383
    8. '  ' → logprob: -16.251649856567383
    9. '   
' → logprob: -16.501649856567383
    10. '    ' → logprob: -16.876649856567383

Token 149: ' if' (ID: 538)
  Prédit: 'if'
  Correct (stricte): False
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'if' (adapté à ' if') → logprob: -0.0019324433524161577
    2. ' if' → logprob: -6.501932621002197
    3. '   ' → logprob: -7.751932621002197
    4. '
' → logprob: -16.37693214416504
    5. '	if' → logprob: -17.87693214416504
    6. '    
' → logprob: -17.87693214416504
    7. ' ' → logprob: -18.00193214416504
    8. '  ' → logprob: -18.87693214416504
    9. '```' → logprob: -19.25193214416504
    10. 'If' → logprob: -19.62693214416504

Token 150: ' is' (ID: 382)
  Prédit: ' is'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' is' → logprob: -0.00016039233014453202
    2. 'is' → logprob: -8.750160217285156
    3. 'n' → logprob: -14.375160217285156
    4. ' ' → logprob: -14.500160217285156
    5. ' ' → logprob: -14.875160217285156
    6. '_' → logprob: -15.375160217285156
    7. '	is' → logprob: -16.250160217285156
    8. '(is' → logprob: -16.750160217285156
    9. ' n' → logprob: -17.000160217285156
    10. 's' → logprob: -17.750160217285156

Token 151: '_one' (ID: 26979)
  Prédit: '_one'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_one' → logprob: -1.9361264946837764e-07
    2. '_two' → logprob: -16.125
    3. '_ONE' → logprob: -17.75
    4. '_' → logprob: -18.25
    5. 'one' → logprob: -18.875
    6. '_once' → logprob: -19.875
    7. '(one' → logprob: -20.0
    8. 'One' → logprob: -20.0
    9. '(_' → logprob: -21.0
    10. '_on' → logprob: -21.25

Token 152: '(n' (ID: 2406)
  Prédit: '(n'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(n' → logprob: -3.464347173576243e-05
    2. '(' → logprob: -10.37503433227539
    3. ' (' → logprob: -12.62503433227539
    4. '(s' → logprob: -20.00003433227539
    5. '(num' → logprob: -20.62503433227539
    6. '(number' → logprob: -21.00003433227539
    7. ' ' → logprob: -21.00003433227539
    8. '

' → logprob: -21.00003433227539
    9. '(
' → logprob: -21.25003433227539
    10. '(

' → logprob: -21.62503433227539

Token 153: '):
' (ID: 1883)
  Prédit: '):'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '):' → logprob: -0.002591946395114064
    2. '):
' → logprob: -6.002592086791992
    3. ')' → logprob: -9.252592086791992
    4. ' ):' → logprob: -11.502592086791992
    5. '():' → logprob: -11.877592086791992
    6. ':' → logprob: -13.127592086791992
    7. '   ' → logprob: -14.502592086791992
    8. '):

' → logprob: -15.252592086791992
    9. '):
' → logprob: -15.252592086791992
    10. '():
' → logprob: -16.127592086791992

Token 154: '       ' (ID: 309)
  Prédit: '       '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '       ' → logprob: -0.021559055894613266
    2. ':' → logprob: -4.021559238433838
    3. ':
' → logprob: -6.646559238433838
    4. '():' → logprob: -7.271559238433838
    5. '()' → logprob: -7.896559238433838
    6. '
' → logprob: -8.02155876159668
    7. '():
' → logprob: -8.02155876159668
    8. '   ' → logprob: -8.77155876159668
    9. '        
' → logprob: -9.77155876159668
    10. '```' → logprob: -10.77155876159668

Token 155: ' handle' (ID: 5318)
  Prédit: 'handle'
  Correct (stricte): False
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'handle' (adapté à ' handle') → logprob: -0.09827063977718353
    2. ' handle' → logprob: -2.5982706546783447
    3. '       ' → logprob: -3.9732706546783447
    4. '   ' → logprob: -8.348270416259766
    5. '	handle' → logprob: -9.473270416259766
    6. '_handle' → logprob: -10.098270416259766
    7. '(handle' → logprob: -11.223270416259766
    8. '.handle' → logprob: -12.098270416259766
    9. '           ' → logprob: -12.348270416259766
    10. ' ' → logprob: -13.098270416259766

Token 156: '_case' (ID: 43667)
  Prédit: '_case'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_case' → logprob: -4.320199877838604e-07
    2. '_' → logprob: -15.375
    3. '_one' → logprob: -17.125
    4. '_c' → logprob: -17.25
    5. ' _' → logprob: -17.875
    6. '_code' → logprob: -18.75
    7. '```' → logprob: -19.25
    8. '"_' → logprob: -19.375
    9. '_cases' → logprob: -20.0
    10. '_ca' → logprob: -20.875

Token 157: '_one' (ID: 26979)
  Prédit: '_one'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_one' → logprob: -6.704273118884885e-07
    2. '_two' → logprob: -14.750000953674316
    3. '_on' → logprob: -15.375000953674316
    4. '_o' → logprob: -17.75
    5. '_' → logprob: -18.0
    6. '_once' → logprob: -18.25
    7. '_ONE' → logprob: -20.125
    8. 'one' → logprob: -20.5
    9. '```' → logprob: -21.5
    10. '\' → logprob: -21.875

Token 158: '()
' (ID: 1234)
  Prédit: '()'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '()' → logprob: -0.6931489109992981
    2. '()
' → logprob: -0.6931489109992981
    3. '()

' → logprob: -13.568148612976074
    4. '()
' → logprob: -15.568148612976074
    5. '(' → logprob: -16.31814956665039
    6. '   ' → logprob: -16.69314956665039
    7. ' ()' → logprob: -16.81814956665039
    8. '()`' → logprob: -17.06814956665039
    9. '(
' → logprob: -17.69314956665039
    10. ' ()
' → logprob: -17.94314956665039

Token 159: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.0010710387723520398
    2. 'elif' → logprob: -7.126070976257324
    3. ' elif' → logprob: -8.376070976257324
    4. '    
' → logprob: -10.626070976257324
    5. ' else' → logprob: -12.501070976257324
    6. '	elif' → logprob: -12.626070976257324
    7. '
' → logprob: -13.001070976257324
    8. 'else' → logprob: -13.376070976257324
    9. '```' → logprob: -14.376070976257324
    10. '<|end|>' → logprob: -15.251070976257324

Token 160: ' elif' (ID: 9497)
  Prédit: 'elif'
  Correct (stricte): False
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'elif' (adapté à ' elif') → logprob: -0.6099280118942261
    2. '   ' → logprob: -1.359928011894226
    3. ' elif' → logprob: -1.609928011894226
    4. 'el' → logprob: -11.484928131103516
    5. ' else' → logprob: -11.984928131103516
    6. '	elif' → logprob: -12.484928131103516
    7. 'else' → logprob: -12.734928131103516
    8. '    
' → logprob: -12.734928131103516
    9. ' ' → logprob: -14.359928131103516
    10. ' eli' → logprob: -14.734928131103516

Token 161: ' is' (ID: 382)
  Prédit: ' is'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' is' → logprob: -5.872261317563243e-05
    2. 'is' → logprob: -9.750059127807617
    3. ' ' → logprob: -15.625059127807617
    4. 'space' → logprob: -16.375059127807617
    5. ' ' → logprob: -16.750059127807617
    6. '(is' → logprob: -17.500059127807617
    7. ' space' → logprob: -18.500059127807617
    8. '	is' → logprob: -18.625059127807617
    9. '_' → logprob: -19.375059127807617
    10. 's' → logprob: -20.125059127807617

Token 162: '_two' (ID: 54305)
  Prédit: '_two'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_two' → logprob: -2.935296834039036e-06
    2. 'two' → logprob: -13.62500286102295
    3. '_tw' → logprob: -14.37500286102295
    4. '(_' → logprob: -15.00000286102295
    5. 'Two' → logprob: -16.125003814697266
    6. '_' → logprob: -16.250003814697266
    7. '_TWO' → logprob: -16.625003814697266
    8. '_t' → logprob: -16.625003814697266
    9. '(' → logprob: -16.875003814697266
    10. '(n' → logprob: -17.000003814697266

Token 163: '(n' (ID: 2406)
  Prédit: '(n'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(n' → logprob: -1.0280383548888494e-06
    2. '(' → logprob: -14.000000953674316
    3. ' (' → logprob: -15.875000953674316
    4. '(s' → logprob: -21.500001907348633
    5. '```' → logprob: -21.500001907348633
    6. '(N' → logprob: -21.625001907348633
    7. ' ' → logprob: -21.875001907348633
    8. ')(' → logprob: -22.000001907348633
    9. '﻿' → logprob: -22.500001907348633
    10. '(
' → logprob: -22.500001907348633

Token 164: '):
' (ID: 1883)
  Prédit: '(n'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(n' → logprob: -4.000763510703109e-05
    2. ')(' → logprob: -10.750040054321289
    3. ')' → logprob: -11.375040054321289
    4. '(' → logprob: -13.625040054321289
    5. '):' → logprob: -13.625040054321289
    6. ')n' → logprob: -13.625040054321289
    7. '):
' → logprob: -13.875040054321289
    8. 'n' → logprob: -14.375040054321289
    9. ' (' → logprob: -14.500040054321289
    10. ',' → logprob: -14.875040054321289

Token 165: '       ' (ID: 309)
  Prédit: '       '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '       ' → logprob: -0.7014304399490356
    2. '(n' → logprob: -0.7014304399490356
    3. 'handle' → logprob: -5.326430320739746
    4. '(handle' → logprob: -5.826430320739746
    5. 'n' → logprob: -8.701430320739746
    6. ' handle' → logprob: -9.326430320739746
    7. '   ' → logprob: -9.826430320739746
    8. ' (' → logprob: -10.451430320739746
    9. '(' → logprob: -10.701430320739746
    10. ' n' → logprob: -10.701430320739746

Token 166: ' handle' (ID: 5318)
  Prédit: 'handle'
  Correct (stricte): False
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'handle' (adapté à ' handle') → logprob: -0.0070147947408258915
    2. ' handle' → logprob: -5.007014751434326
    3. '(handle' → logprob: -8.757015228271484
    4. '       ' → logprob: -8.882015228271484
    5. '	handle' → logprob: -13.132015228271484
    6. '   ' → logprob: -14.882015228271484
    7. '_handle' → logprob: -15.132015228271484
    8. '.handle' → logprob: -15.257015228271484
    9. '           ' → logprob: -16.257015228271484
    10. 'handler' → logprob: -16.382015228271484

Token 167: '_case' (ID: 43667)
  Prédit: '_case'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_case' → logprob: -1.6240566083070007e-06
    2. 'case' → logprob: -13.375001907348633
    3. '_code' → logprob: -17.875001907348633
    4. '_handle' → logprob: -18.000001907348633
    5. '_' → logprob: -18.625001907348633
    6. '```' → logprob: -18.875001907348633
    7. '"_' → logprob: -18.875001907348633
    8. 'Case' → logprob: -19.875001907348633
    9. '_c' → logprob: -20.250001907348633
    10. '_call' → logprob: -20.375001907348633

Token 168: '_two' (ID: 54305)
  Prédit: '_two'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_two' → logprob: -0.0013309523928910494
    2. 'two' → logprob: -6.626330852508545
    3. '_tw' → logprob: -13.126331329345703
    4. 'wo' → logprob: -13.626331329345703
    5. '_TWO' → logprob: -15.126331329345703
    6. 't' → logprob: -15.376331329345703
    7. 'Two' → logprob: -15.376331329345703
    8. 'o' → logprob: -15.501331329345703
    9. '(two' → logprob: -15.626331329345703
    10. '   ' → logprob: -15.751331329345703

Token 169: '()

' (ID: 5874)
  Prédit: '()'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '()' → logprob: -0.011067868210375309
    2. '()
' → logprob: -4.511067867279053
    3. '   ' → logprob: -12.136068344116211
    4. '():' → logprob: -12.761068344116211
    5. '()

' → logprob: -13.011068344116211
    6. '():
' → logprob: -13.011068344116211
    7. '(' → logprob: -13.386068344116211
    8. 'else' → logprob: -14.261068344116211
    9. '<|end|>' → logprob: -14.261068344116211
    10. ' ()' → logprob: -14.386068344116211

Token 170: 'main' (ID: 7731)
  Prédit: 'if'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'if' → logprob: -0.3050057590007782
    2. '<|end|>' → logprob: -1.5550057888031006
    3. 'else' → logprob: -3.9300057888031006
    4. '```' → logprob: -4.1800055503845215
    5. '   ' → logprob: -4.8050055503845215
    6. '#' → logprob: -5.0550055503845215
    7. 'elif' → logprob: -7.3050055503845215
    8. '\n' → logprob: -8.05500602722168
    9. '<|end|>' → logprob: -8.18000602722168
    10. '...' → logprob: -8.68000602722168

Token 171: '()' (ID: 416)
  Prédit: '()'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '()' → logprob: -2.7133641196996905e-05
    2. '(' → logprob: -10.75002670288086
    3. '()
' → logprob: -12.75002670288086
    4. '()`' → logprob: -14.12502670288086
    5. ' ()' → logprob: -14.37502670288086
    6. '();' → logprob: -14.87502670288086
    7. '()"' → logprob: -15.12502670288086
    8. '()

' → logprob: -15.62502670288086
    9. '()">' → logprob: -15.75002670288086
    10. '().' → logprob: -16.37502670288086


RÉSUMÉ:
--------------------------------------------------------------------------------
Total des tokens analysés: 169
Tokens correctement prédits (1ère position, stricte): 88
Tokens correctement prédits (1ère position, avec adaptation): 98
Tokens correctement prédits (top 10): 144
Précision stricte (1ère position): 52.07%
Précision adaptée (1ère position): 57.99%
Précision (top 10): 85.21%
================================================================================
