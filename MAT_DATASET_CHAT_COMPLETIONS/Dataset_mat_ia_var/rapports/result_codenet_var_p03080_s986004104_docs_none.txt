================================================================================
ANALYSE DE PRÉDICTION TOKEN PAR TOKEN (BATCH API)
Date: 2025-06-04 20:04:22
Modèle de tokenisation: gpt-4o-mini
================================================================================

SCRIPT ANALYSÉ:
--------------------------------------------------------------------------------
N=int(input())
s=input()
num=0
for i in range(N):
    if s[i]=="R":
        num+=1
if num>N-num:
    print("Yes")
else:
    print("No")
--------------------------------------------------------------------------------

RÉSULTATS D'ANALYSE TOKEN PAR TOKEN:
--------------------------------------------------------------------------------
Token 0: 'N' (ID: 45)
  → Token d'amorce (pas de prédiction)

Token 1: '=int' (ID: 37431)
  → Token d'amorce (pas de prédiction)

Token 2: '(input' (ID: 10054)
  → Token d'amorce (pas de prédiction)

Token 3: '())
' (ID: 4574)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '(' → logprob: -0.4663958251476288
    2. ')' → logprob: -1.0913958549499512
    3. '()' → logprob: -3.841395854949951
    4. '())' → logprob: -4.466395854949951
    5. '(
' → logprob: -7.341395854949951
    6. '```' → logprob: -7.591395854949951
    7. '')' → logprob: -7.841395854949951
    8. '")' → logprob: -7.841395854949951
    9. '`)' → logprob: -7.966395854949951
    10. '<|end|>' → logprob: -8.466395378112793

Token 4: 's' (ID: 82)
  Prédit: '*'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '*' → logprob: -0.47340065240859985
    2. 'for' → logprob: -2.098400592803955
    3. '#' → logprob: -2.973400592803955
    4. '\n' → logprob: -3.223400592803955
    5. ')' → logprob: -3.473400592803955
    6. 's' → logprob: -3.598400592803955
    7. '+' → logprob: -3.973400592803955
    8. 'if' → logprob: -4.223400592803955
    9. '\' → logprob: -4.348400592803955
    10. 'a' → logprob: -4.848400592803955

Token 5: '=input' (ID: 87911)
  Prédit: '.'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '.' → logprob: -1.1321828365325928
    2. 't' → logprob: -1.5071828365325928
    3. 'u' → logprob: -1.7571828365325928
    4. '[' → logprob: -2.1321828365325928
    5. 'um' → logprob: -2.6321828365325928
    6. 'tr' → logprob: -3.5071828365325928
    7. '=' → logprob: -3.7571828365325928
    8. ' =' → logprob: -4.007183074951172
    9. '(' → logprob: -6.007183074951172
    10. '[t' → logprob: -6.007183074951172

Token 6: '()
' (ID: 1234)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '(' → logprob: -0.013798626139760017
    2. '()' → logprob: -4.513798713684082
    3. ''' → logprob: -7.138798713684082
    4. ')' → logprob: -7.263798713684082
    5. '('' → logprob: -7.263798713684082
    6. '"' → logprob: -8.638798713684082
    7. '(
' → logprob: -9.138798713684082
    8. '(

' → logprob: -9.763798713684082
    9. '("("' → logprob: -9.888798713684082
    10. ' (' → logprob: -10.763798713684082

Token 7: 'num' (ID: 4571)
  Prédit: 'if'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'if' → logprob: -0.8555675148963928
    2. 'for' → logprob: -1.355567455291748
    3. 'i' → logprob: -2.230567455291748
    4. 'f' → logprob: -2.980567455291748
    5. 'count' → logprob: -2.980567455291748
    6. 'c' → logprob: -3.230567455291748
    7. 'a' → logprob: -4.230567455291748
    8. 'd' → logprob: -4.605567455291748
    9. 'r' → logprob: -4.980567455291748
    10. 't' → logprob: -5.230567455291748

Token 8: '=' (ID: 28)
  Prédit: 's'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 's' → logprob: -0.1644451916217804
    2. '_' → logprob: -2.039445161819458
    3. '[' → logprob: -4.539445400238037
    4. 'ber' → logprob: -5.914445400238037
    5. '=' → logprob: -6.039445400238037
    6. '_chars' → logprob: -6.664445400238037
    7. ' =' → logprob: -6.914445400238037
    8. '1' → logprob: -7.039445400238037
    9. 'r' → logprob: -8.039444923400879
    10. '_s' → logprob: -8.164444923400879

Token 9: '0' (ID: 15)
  Prédit: '0'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '0' → logprob: -0.0007211300544440746
    2. 'len' → logprob: -8.125720977783203
    3. 'int' → logprob: -8.875720977783203
    4. 's' → logprob: -9.000720977783203
    5. '[]' → logprob: -9.125720977783203
    6. '[' → logprob: -11.500720977783203
    7. '[int' → logprob: -11.500720977783203
    8. 'list' → logprob: -11.875720977783203
    9. '""' → logprob: -12.250720977783203
    10. '1' → logprob: -12.375720977783203

Token 10: '
' (ID: 198)
  Prédit: 'for'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'for' → logprob: -0.010307136923074722
    2. ' for' → logprob: -5.135307312011719
    3. 'f' → logprob: -5.635307312011719
    4. 'i' → logprob: -7.260307312011719
    5. '=' → logprob: -11.010307312011719
    6. ' ' → logprob: -11.135307312011719
    7. '+' → logprob: -11.760307312011719
    8. 'r' → logprob: -11.760307312011719
    9. '
' → logprob: -11.885307312011719
    10. '```' → logprob: -11.885307312011719

Token 11: 'for' (ID: 1938)
  Prédit: 'for'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'for' → logprob: -0.012623126618564129
    2. ' for' → logprob: -4.637623310089111
    3. 'f' → logprob: -6.637623310089111
    4. 'i' → logprob: -7.387623310089111
    5. '```' → logprob: -8.137622833251953
    6. '=' → logprob: -8.762622833251953
    7. '
' → logprob: -9.012622833251953
    8. ' ' → logprob: -9.012622833251953
    9. ':' → logprob: -10.387622833251953
    10. 'r' → logprob: -10.387622833251953

Token 12: ' i' (ID: 575)
  Prédit: ' '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' ' → logprob: -0.006233075633645058
    2. '  ' → logprob: -5.256233215332031
    3. ' i' → logprob: -7.131233215332031
    4. 'i' → logprob: -8.881233215332031
    5. '_' → logprob: -10.631233215332031
    6. ' _' → logprob: -11.381233215332031
    7. ' ‌' → logprob: -11.381233215332031
    8. ' )' → logprob: -13.256233215332031
    9. ' ' → logprob: -13.631233215332031
    10. ' ▁' → logprob: -13.756233215332031

Token 13: ' in' (ID: 306)
  Prédit: ' in'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' in' → logprob: -0.07291608303785324
    2. 'in' → logprob: -2.697916030883789
    3. ' ' → logprob: -6.072916030883789
    4. '  ' → logprob: -8.322916030883789
    5. '[' → logprob: -8.947916030883789
    6. '+' → logprob: -9.822916030883789
    7. '<' → logprob: -10.447916030883789
    8. ')' → logprob: -10.947916030883789
    9. '<|end|>' → logprob: -10.947916030883789
    10. 's' → logprob: -11.072916030883789

Token 14: ' range' (ID: 3352)
  Prédit: ' range'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' range' → logprob: -0.28122979402542114
    2. 'range' → logprob: -1.4062297344207764
    3. 's' → logprob: -9.906229972839355
    4. ' s' → logprob: -11.031229972839355
    5. ' ' → logprob: -12.656229972839355
    6. '	range' → logprob: -12.906229972839355
    7. '(range' → logprob: -13.031229972839355
    8. ' xrange' → logprob: -13.531229972839355
    9. ')' → logprob: -13.656229972839355
    10. '_range' → logprob: -14.906229972839355

Token 15: '(N' (ID: 10564)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(' → logprob: -0.000996963819488883
    2. '(N' → logprob: -7.125997066497803
    3. ' (' → logprob: -9.750996589660645
    4. '(len' → logprob: -9.750996589660645
    5. '(n' → logprob: -10.000996589660645
    6. '(s' → logprob: -11.875996589660645
    7. '(num' → logprob: -11.875996589660645
    8. '(i' → logprob: -12.375996589660645
    9. '(
' → logprob: -12.750996589660645
    10. '1' → logprob: -12.875996589660645

Token 16: '):
' (ID: 1883)
  Prédit: '):'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '):' → logprob: -0.006645033601671457
    2. ')' → logprob: -5.131645202636719
    3. '+' → logprob: -8.131645202636719
    4. '[' → logprob: -8.631645202636719
    5. '[i' → logprob: -9.256645202636719
    6. ':' → logprob: -9.756645202636719
    7. '):
' → logprob: -10.381645202636719
    8. ' ):' → logprob: -10.631645202636719
    9. '-' → logprob: -11.881645202636719
    10. '){' → logprob: -12.631645202636719

Token 17: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.31839269399642944
    2. ' ' → logprob: -1.4433927536010742
    3. ' if' → logprob: -4.068392753601074
    4. '    ' → logprob: -4.568392753601074
    5. ' 
' → logprob: -6.443392753601074
    6. '<|end|>' → logprob: -6.443392753601074
    7. '    
' → logprob: -6.693392753601074
    8. '```' → logprob: -6.943392753601074
    9. '[' → logprob: -7.318392753601074
    10. '  ' → logprob: -7.443392753601074

Token 18: ' if' (ID: 538)
  Prédit: ' if'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' if' → logprob: -0.16837351024150848
    2. 'if' (adapté à ' if') → logprob: -2.1683735847473145
    3. '   ' → logprob: -3.6683735847473145
    4. ' ' → logprob: -4.5433735847473145
    5. 's' → logprob: -6.5433735847473145
    6. '    ' → logprob: -7.7933735847473145
    7. 'i' → logprob: -7.7933735847473145
    8. 'num' → logprob: -7.7933735847473145
    9. ' num' → logprob: -8.043373107910156
    10. '```' → logprob: -8.168373107910156

Token 19: ' s' (ID: 265)
  Prédit: ' s'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' s' → logprob: -0.003236417192965746
    2. 's' → logprob: -5.878236293792725
    3. ' ' → logprob: -7.753236293792725
    4. '(s' → logprob: -14.753236770629883
    5. ' ' → logprob: -15.503236770629883
    6. ' (' → logprob: -15.628236770629883
    7. ' i' → logprob: -16.003236770629883
    8. ' num' → logprob: -16.003236770629883
    9. '  ' → logprob: -16.128236770629883
    10. ')' → logprob: -16.128236770629883

Token 20: '[i' (ID: 1768)
  Prédit: '[i'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '[i' → logprob: -0.01816035620868206
    2. '[' → logprob: -4.018160343170166
    3. '[I' → logprob: -12.268160820007324
    4. ' [' → logprob: -12.893160820007324
    5. '[a' → logprob: -14.893160820007324
    6. '[int' → logprob: -14.893160820007324
    7. '\[' → logprob: -15.018160820007324
    8. '[j' → logprob: -15.018160820007324
    9. '[num' → logprob: -15.393160820007324
    10. '[
' → logprob: -15.768160820007324

Token 21: ']=="' (ID: 164578)
  Prédit: '=='
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '==' → logprob: -0.08930769562721252
    2. ']' → logprob: -3.7143077850341797
    3. '=' → logprob: -3.8393077850341797
    4. ']==' → logprob: -4.33930778503418
    5. ' ==' → logprob: -4.96430778503418
    6. '=='' → logprob: -5.08930778503418
    7. ''' → logprob: -5.83930778503418
    8. '[' → logprob: -5.96430778503418
    9. ')' → logprob: -6.08930778503418
    10. ']=='' → logprob: -6.58930778503418

Token 22: 'R' (ID: 49)
  Prédit: '1'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '1' → logprob: -1.0025572776794434
    2. '(":' → logprob: -2.0025572776794434
    3. '0' → logprob: -2.1275572776794434
    4. 'A' → logprob: -2.3775572776794434
    5. 'a' → logprob: -3.0025572776794434
    6. 'o' → logprob: -3.2525572776794434
    7. '(':' → logprob: -3.2525572776794434
    8. 'I' → logprob: -3.8775572776794434
    9. '#' → logprob: -4.002557277679443
    10. '("' → logprob: -4.002557277679443

Token 23: '":
' (ID: 9213)
  Prédit: '":'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '":' → logprob: -0.031207449734210968
    2. '"' → logprob: -3.53120756149292
    3. ' ":' → logprob: -7.28120756149292
    4. ':' → logprob: -7.78120756149292
    5. ' "' → logprob: -9.531207084655762
    6. '">' → logprob: -9.781207084655762
    7. '"):' → logprob: -10.156207084655762
    8. 'R' → logprob: -10.406207084655762
    9. ''' → logprob: -10.906207084655762
    10. '):' → logprob: -10.906207084655762

Token 24: '       ' (ID: 309)
  Prédit: 'num'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'num' → logprob: -0.7947410941123962
    2. '       ' → logprob: -1.294741153717041
    3. ' num' → logprob: -1.419741153717041
    4. '   ' → logprob: -3.794741153717041
    5. ' ' → logprob: -5.169741153717041
    6. '    ' → logprob: -6.669741153717041
    7. '0' → logprob: -7.044741153717041
    8. '	num' → logprob: -7.669741153717041
    9. '<|end|>' → logprob: -8.544740676879883
    10. ' ' → logprob: -8.669740676879883

Token 25: ' num' (ID: 2269)
  Prédit: 'num'
  Correct (stricte): False
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'num' (adapté à ' num') → logprob: -0.021165110170841217
    2. ' num' → logprob: -3.896165132522583
    3. '   ' → logprob: -7.646164894104004
    4. ' ' → logprob: -10.021164894104004
    5. '	num' → logprob: -10.146164894104004
    6. '       ' → logprob: -10.771164894104004
    7. '0' → logprob: -10.896164894104004
    8. '  ' → logprob: -12.021164894104004
    9. '1' → logprob: -12.771164894104004
    10. 'n' → logprob: -13.021164894104004

Token 26: '+=' (ID: 18287)
  Prédit: '+='
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '+=' → logprob: -0.01040730345994234
    2. ' +=' → logprob: -4.635407447814941
    3. '=' → logprob: -7.885407447814941
    4. '+' → logprob: -8.260407447814941
    5. ']+=' → logprob: -11.885407447814941
    6. '+='' → logprob: -12.385407447814941
    7. '+="' → logprob: -13.135407447814941
    8. ' =' → logprob: -13.760407447814941
    9. '+=(' → logprob: -13.760407447814941
    10. '-=' → logprob: -14.760407447814941

Token 27: '1' (ID: 16)
  Prédit: '1'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '1' → logprob: -5.943783253314905e-05
    2. ' ' → logprob: -10.625059127807617
    3. '2' → logprob: -11.125059127807617
    4. '3' → logprob: -12.000059127807617
    5. '0' → logprob: -12.750059127807617
    6. 'int' → logprob: -13.250059127807617
    7. '10' → logprob: -13.625059127807617
    8. '5' → logprob: -13.750059127807617
    9. 'R' → logprob: -14.000059127807617
    10. 'i' → logprob: -14.000059127807617

Token 28: '
' (ID: 198)
  Prédit: ' else'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' else' → logprob: -0.8381821513175964
    2. '<|end|>' → logprob: -1.3381822109222412
    3. 'else' → logprob: -1.5881822109222412
    4. '
' → logprob: -3.588182210922241
    5. ' ' → logprob: -3.838182210922241
    6. 'elif' → logprob: -4.338181972503662
    7. '   ' → logprob: -4.463181972503662
    8. ' elif' → logprob: -4.713181972503662
    9. '```' → logprob: -5.713181972503662
    10. '<|end|>' → logprob: -5.963181972503662

Token 29: 'if' (ID: 366)
  Prédit: 'else'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'else' → logprob: -0.7974239587783813
    2. ' else' → logprob: -1.0474239587783813
    3. '   ' → logprob: -2.047423839569092
    4. 'elif' → logprob: -3.297423839569092
    5. ' elif' → logprob: -4.547423839569092
    6. '<|end|>' → logprob: -4.797423839569092
    7. ' ' → logprob: -5.172423839569092
    8. '```' → logprob: -5.672423839569092
    9. '	else' → logprob: -6.922423839569092
    10. '       ' → logprob: -7.547423839569092

Token 30: ' num' (ID: 2269)
  Prédit: ' num'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' num' → logprob: -0.009755381383001804
    2. 'num' → logprob: -4.884755611419678
    3. ' ' → logprob: -6.634755611419678
    4. ' s' → logprob: -7.259755611419678
    5. 's' → logprob: -9.75975513458252
    6. ' ' → logprob: -10.38475513458252
    7. '<num' → logprob: -11.88475513458252
    8. '(num' → logprob: -12.00975513458252
    9. ' not' → logprob: -12.13475513458252
    10. ' len' → logprob: -12.88475513458252

Token 31: '>N' (ID: 114149)
  Prédit: '>'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '>' → logprob: -0.45815426111221313
    2. ' >' → logprob: -1.0831542015075684
    3. '==' → logprob: -4.708154201507568
    4. '>=' → logprob: -5.208154201507568
    5. ' >=' → logprob: -6.208154201507568
    6. '">' → logprob: -6.333154201507568
    7. '>N' → logprob: -6.458154201507568
    8. '<' → logprob: -6.583154201507568
    9. ' ==' → logprob: -6.583154201507568
    10. '<=' → logprob: -6.583154201507568

Token 32: '-num' (ID: 53277)
  Prédit: '/'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '/' → logprob: -0.3298916518688202
    2. '//' → logprob: -1.3298916816711426
    3. ' //' → logprob: -4.454891681671143
    4. ' /' → logprob: -5.454891681671143
    5. ' ' → logprob: -8.329891204833984
    6. ' num' → logprob: -9.704891204833984
    7. 'num' → logprob: -10.204891204833984
    8. ':' → logprob: -10.204891204833984
    9. '///' → logprob: -10.329891204833984
    10. '2' → logprob: -10.579891204833984

Token 33: ':
' (ID: 734)
  Prédit: ':'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ':' → logprob: -3.214019307051785e-05
    2. ':
' → logprob: -11.125032424926758
    3. ' :' → logprob: -12.125032424926758
    4. ':return' → logprob: -12.250032424926758
    5. '):' → logprob: -12.625032424926758
    6. ' and' → logprob: -14.000032424926758
    7. ':**' → logprob: -14.000032424926758
    8. '+:' → logprob: -15.125032424926758
    9. ')' → logprob: -15.250032424926758
    10. '<|end|>' → logprob: -15.250032424926758

Token 34: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.6177478432655334
    2. ' print' → logprob: -0.9927478432655334
    3. 'print' → logprob: -2.6177477836608887
    4. '       ' → logprob: -4.117747783660889
    5. '```' → logprob: -7.867747783660889
    6. ' ' → logprob: -8.367748260498047
    7. '	print' → logprob: -8.867748260498047
    8. '    ' → logprob: -8.867748260498047
    9. '`' → logprob: -10.492748260498047
    10. '           ' → logprob: -10.992748260498047

Token 35: ' print' (ID: 2123)
  Prédit: ' print'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' print' → logprob: -0.43016502261161804
    2. 'print' (adapté à ' print') → logprob: -1.0551650524139404
    3. '   ' → logprob: -6.555164813995361
    4. 'pr' → logprob: -11.18016529083252
    5. ' prin' → logprob: -11.93016529083252
    6. '```' → logprob: -12.30516529083252
    7. ' ' → logprob: -12.80516529083252
    8. '	print' → logprob: -12.93016529083252
    9. '    ' → logprob: -13.05516529083252
    10. 'prit' → logprob: -13.43016529083252

Token 36: '("' (ID: 568)
  Prédit: '("'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '("' → logprob: -0.10075736790895462
    2. '(' → logprob: -2.350757360458374
    3. '('' → logprob: -7.725757598876953
    4. '(R' → logprob: -9.850757598876953
    5. '(s' → logprob: -10.725757598876953
    6. '()' → logprob: -11.600757598876953
    7. '"' → logprob: -11.600757598876953
    8. '(i' → logprob: -11.850757598876953
    9. '(True' → logprob: -13.225757598876953
    10. 's' → logprob: -13.475757598876953

Token 37: 'Yes' (ID: 13022)
  Prédit: 'Yes'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'Yes' → logprob: -0.7393620610237122
    2. 'R' → logprob: -0.8643620610237122
    3. '"' → logprob: -2.4893620014190674
    4. 'YES' → logprob: -4.7393622398376465
    5. 'No' → logprob: -5.9893622398376465
    6. 'RS' → logprob: -6.7393622398376465
    7. 'W' → logprob: -7.3643622398376465
    8. '_R' → logprob: -7.6143622398376465
    9. 'I' → logprob: -7.9893622398376465
    10. 'A' → logprob: -8.114361763000488

Token 38: '")
' (ID: 1896)
  Prédit: '")'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '")' → logprob: -0.007060127332806587
    2. '")
' → logprob: -5.2570600509643555
    3. ')' → logprob: -6.3820600509643555
    4. '")
' → logprob: -9.382060050964355
    5. ')")' → logprob: -10.382060050964355
    6. ')
' → logprob: -12.007060050964355
    7. '!")' → logprob: -12.757060050964355
    8. 'else' → logprob: -12.757060050964355
    9. '"' → logprob: -13.382060050964355
    10. '")

' → logprob: -13.757060050964355

Token 39: 'else' (ID: 2807)
  Prédit: 'else'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'else' → logprob: -0.0013269031187519431
    2. ' else' → logprob: -6.626327037811279
    3. 'elif' → logprob: -14.876326560974121
    4. '<|end|>' → logprob: -15.376326560974121
    5. '	else' → logprob: -15.626326560974121
    6. '_else' → logprob: -16.126327514648438
    7. 'elser' → logprob: -16.751327514648438
    8. '#else' → logprob: -17.251327514648438
    9. '```' → logprob: -17.376327514648438
    10. 'Else' → logprob: -17.751327514648438

Token 40: ':
' (ID: 734)
  Prédit: ':'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ':' → logprob: -0.005470201838761568
    2. ':
' → logprob: -5.255470275878906
    3. '   ' → logprob: -8.380470275878906
    4. ' :' → logprob: -13.380470275878906
    5. ' :
' → logprob: -14.005470275878906
    6. '    ' → logprob: -14.255470275878906
    7. 'print' → logprob: -14.505470275878906
    8. '       ' → logprob: -14.630470275878906
    9. ' print' → logprob: -14.880470275878906
    10. '```' → logprob: -15.005470275878906

Token 41: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.0007195804500952363
    2. 'print' → logprob: -7.8757195472717285
    3. ' print' → logprob: -8.125720024108887
    4. '```' → logprob: -10.750720024108887
    5. '       ' → logprob: -11.250720024108887
    6. '    ' → logprob: -12.500720024108887
    7. '   ' → logprob: -12.875720024108887
    8. '	print' → logprob: -13.875720024108887
    9. '``' → logprob: -14.125720024108887
    10. '`' → logprob: -15.625720024108887

Token 42: ' print' (ID: 2123)
  Prédit: 'print'
  Correct (stricte): False
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'print' (adapté à ' print') → logprob: -0.21632768213748932
    2. ' print' → logprob: -1.7163276672363281
    3. '   ' → logprob: -4.216327667236328
    4. '```' → logprob: -10.841327667236328
    5. '    ' → logprob: -11.091327667236328
    6. '	print' → logprob: -11.966327667236328
    7. ' ' → logprob: -12.341327667236328
    8. '       ' → logprob: -13.591327667236328
    9. '``' → logprob: -13.716327667236328
    10. '.print' → logprob: -13.841327667236328

Token 43: '("' (ID: 568)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(' → logprob: -0.3138815760612488
    2. '("' → logprob: -1.3138816356658936
    3. '("")' → logprob: -8.188881874084473
    4. '()' → logprob: -8.563881874084473
    5. '("("' → logprob: -9.313881874084473
    6. '(""' → logprob: -10.438881874084473
    7. '('' → logprob: -11.313881874084473
    8. '(False' → logprob: -12.438881874084473
    9. '("""' → logprob: -12.438881874084473
    10. '(None' → logprob: -13.188881874084473

Token 44: 'No' (ID: 3160)
  Prédit: 'No'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'No' → logprob: -0.03806467354297638
    2. '"No' → logprob: -3.28806471824646
    3. '"' → logprob: -10.788064956665039
    4. '")' → logprob: -13.913064956665039
    5. '"N' → logprob: -14.538064956665039
    6. ' No' → logprob: -14.538064956665039
    7. '_No' → logprob: -15.913064956665039
    8. 'NO' → logprob: -15.913064956665039
    9. '“No' → logprob: -16.03806495666504
    10. 'N' → logprob: -16.16306495666504

Token 45: '")' (ID: 1405)
  Prédit: '")'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '")' → logprob: -0.0007171963807195425
    2. ')' → logprob: -7.2507171630859375
    3. ')")' → logprob: -11.875717163085938
    4. '")
' → logprob: -15.500717163085938
    5. '}")' → logprob: -17.000717163085938
    6. '`)' → logprob: -17.250717163085938
    7. '')' → logprob: -17.375717163085938
    8. '”)' → logprob: -17.875717163085938
    9. '```' → logprob: -17.875717163085938
    10. '"' → logprob: -18.250717163085938


RÉSUMÉ:
--------------------------------------------------------------------------------
Total des tokens analysés: 43
Tokens correctement prédits (1ère position, stricte): 19
Tokens correctement prédits (1ère position, avec adaptation): 21
Tokens correctement prédits (top 10): 34
Précision stricte (1ère position): 44.19%
Précision adaptée (1ère position): 48.84%
Précision (top 10): 79.07%
================================================================================
