================================================================================
ANALYSE DE PRÉDICTION TOKEN PAR TOKEN (BATCH API)
Date: 2025-06-04 19:54:54
Modèle de tokenisation: gpt-4o-mini
================================================================================

SCRIPT ANALYSÉ:
--------------------------------------------------------------------------------
from itertools import accumulate, chain
from operator import itemgetter
from functools import reduce, partial

def main():
    n = int(input())
    grab = lambda: list(map(int, input().split()))
    seq = list(map(grab, range(n)))
    seq = sorted(seq, key=itemgetter(1))
    s = list(accumulate(map(itemgetter(0), seq)))
    verdict = all(map(lambda xy: xy[0] <= xy[1], zip(s, map(itemgetter(1), seq))))
    print(next(chain(('No',),('Yes',))) if not verdict else next(chain(('Yes',),)))
main()
--------------------------------------------------------------------------------

RÉSULTATS D'ANALYSE TOKEN PAR TOKEN:
--------------------------------------------------------------------------------
Token 0: 'from' (ID: 2845)
  → Token d'amorce (pas de prédiction)

Token 1: ' itertools' (ID: 103178)
  → Token d'amorce (pas de prédiction)

Token 2: ' import' (ID: 1588)
  → Token d'amorce (pas de prédiction)

Token 3: ' accumulate' (ID: 74226)
  Prédit: 'com'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'com' → logprob: -0.7455320358276367
    2. 'product' → logprob: -1.6205320358276367
    3. 'count' → logprob: -2.2455320358276367
    4. 'per' → logprob: -2.3705320358276367
    5. 'group' → logprob: -2.8705320358276367
    6. 'cycle' → logprob: -3.1205320358276367
    7. 'chain' → logprob: -4.745532035827637
    8. ' product' → logprob: -5.370532035827637
    9. ' permutations' → logprob: -5.620532035827637
    10. ' cycle' → logprob: -5.745532035827637

Token 4: ',' (ID: 11)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(' → logprob: -0.00016706773021724075
    2. '(
' → logprob: -9.250166893005371
    3. '.' → logprob: -10.375166893005371
    4. ',' → logprob: -11.125166893005371
    5. '\(' → logprob: -11.750166893005371
    6. '()' → logprob: -12.375166893005371
    7. ' (' → logprob: -12.625166893005371
    8. '```' → logprob: -13.500166893005371
    9. '(

' → logprob: -13.625166893005371
    10. '('' → logprob: -14.000166893005371

Token 5: ' chain' (ID: 13464)
  Prédit: 'chain'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'chain' → logprob: -0.8176425099372864
    2. ' chain' → logprob: -0.9426425099372864
    3. 'group' → logprob: -2.6926424503326416
    4. 'com' → logprob: -3.0676424503326416
    5. ' group' → logprob: -3.0676424503326416
    6. 'product' → logprob: -6.192642688751221
    7. 'compress' → logprob: -6.692642688751221
    8. ' product' → logprob: -6.942642688751221
    9. ' combinations' → logprob: -7.192642688751221
    10. '```' → logprob: -7.817642688751221

Token 6: '
' (ID: 198)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '(' → logprob: -0.1196502149105072
    2. '.' → logprob: -2.24465012550354
    3. '(
' → logprob: -5.494650363922119
    4. ',' → logprob: -6.119650363922119
    5. '\' → logprob: -8.994649887084961
    6. '\(' → logprob: -9.369649887084961
    7. 'import' → logprob: -9.619649887084961
    8. '\n' → logprob: -9.994649887084961
    9. '```' → logprob: -10.369649887084961
    10. '(

' → logprob: -10.369649887084961

Token 7: 'from' (ID: 2845)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '(' → logprob: -0.020641859620809555
    2. '(
' → logprob: -4.395641803741455
    3. '.' → logprob: -5.270641803741455
    4. ',' → logprob: -6.520641803741455
    5. '```' → logprob: -7.645641803741455
    6. '\' → logprob: -8.395642280578613
    7. '\(' → logprob: -8.520642280578613
    8. '[' → logprob: -9.020642280578613
    9. 'import' → logprob: -9.145642280578613
    10. '`' → logprob: -9.645642280578613

Token 8: ' operator' (ID: 11019)
  Prédit: 'operator'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'operator' → logprob: -1.204874038696289
    2. 'collections' → logprob: -1.204874038696289
    3. ' operator' → logprob: -1.329874038696289
    4. ' functools' → logprob: -3.204874038696289
    5. 'fun' → logprob: -3.579874038696289
    6. 'math' → logprob: -3.579874038696289
    7. ' collections' → logprob: -3.579874038696289
    8. ' math' → logprob: -4.954874038696289
    9. 'heap' → logprob: -6.454874038696289
    10. 'sys' → logprob: -7.329874038696289

Token 9: ' import' (ID: 1588)
  Prédit: ' import'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' import' → logprob: -0.03526915982365608
    2. 'import' → logprob: -3.410269260406494
    3. ' ' → logprob: -6.660269260406494
    4. '.' → logprob: -8.160268783569336
    5. '<|end|>' → logprob: -10.535268783569336
    6. ' .' → logprob: -11.660268783569336
    7. '	import' → logprob: -12.035268783569336
    8. '_import' → logprob: -12.660268783569336
    9. ' as' → logprob: -13.160268783569336
    10. ',' → logprob: -13.535268783569336

Token 10: ' item' (ID: 2169)
  Prédit: ' add'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' add' → logprob: -0.32455551624298096
    2. 'add' → logprob: -1.324555516242981
    3. ' ' → logprob: -5.699555397033691
    4. ' import' → logprob: -6.199555397033691
    5. ' item' → logprob: -6.574555397033691
    6. 'import' → logprob: -6.824555397033691
    7. 'item' → logprob: -7.074555397033691
    8. ' ad' → logprob: -7.949555397033691
    9. '	add' → logprob: -7.949555397033691
    10. 'mul' → logprob: -8.074555397033691

Token 11: 'getter' (ID: 132812)
  Prédit: 'getter'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'getter' → logprob: -0.0023089346941560507
    2. 'get' → logprob: -6.1273088455200195
    3. 'getitem' → logprob: -9.37730884552002
    4. 'gett' → logprob: -10.62730884552002
    5. 'g' → logprob: -11.37730884552002
    6. 'gte' → logprob: -14.12730884552002
    7. 'item' → logprob: -14.75230884552002
    8. 'got' → logprob: -14.75230884552002
    9. '_get' → logprob: -15.00230884552002
    10. 'ge' → logprob: -15.25230884552002

Token 12: '
' (ID: 198)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(' → logprob: -0.4474545121192932
    2. ',' → logprob: -1.9474544525146484
    3. '(
' → logprob: -1.9474544525146484
    4. '\' → logprob: -3.6974544525146484
    5. '\n' → logprob: -3.8224544525146484
    6. ',
' → logprob: -4.572454452514648
    7. '.' → logprob: -5.447454452514648
    8. '```' → logprob: -5.572454452514648
    9. '`' → logprob: -6.072454452514648
    10. '
' → logprob: -6.322454452514648

Token 13: 'from' (ID: 2845)
  Prédit: ','
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ',' → logprob: -1.5492945909500122
    2. '
' → logprob: -1.9242945909500122
    3. ',
' → logprob: -2.0492944717407227
    4. '

' → logprob: -2.5492944717407227
    5. '\' → logprob: -2.6742944717407227
    6. '\n' → logprob: -2.6742944717407227
    7. '```' → logprob: -2.7992944717407227
    8. ',

' → logprob: -2.9242944717407227
    9. '(' → logprob: -3.1742944717407227
    10. '(
' → logprob: -3.4242944717407227

Token 14: ' functools' (ID: 142636)
  Prédit: ' functools'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' functools' → logprob: -0.3117651045322418
    2. ' collections' → logprob: -1.4367650747299194
    3. ' math' → logprob: -4.436765193939209
    4. 'collections' → logprob: -4.686765193939209
    5. ' heap' → logprob: -5.186765193939209
    6. 'fun' → logprob: -6.811765193939209
    7. ' typing' → logprob: -7.811765193939209
    8. ' operator' → logprob: -7.936765193939209
    9. ' os' → logprob: -8.06176471710205
    10. ' itertools' → logprob: -8.06176471710205

Token 15: ' import' (ID: 1588)
  Prédit: ' import'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' import' → logprob: -0.4296192526817322
    2. 'import' → logprob: -1.054619312286377
    3. '_import' → logprob: -7.429619312286377
    4. '.' → logprob: -9.179618835449219
    5. '	import' → logprob: -9.429618835449219
    6. '_' → logprob: -9.679618835449219
    7. ' ' → logprob: -10.304618835449219
    8. '.import' → logprob: -11.179618835449219
    9. ' _' → logprob: -11.679618835449219
    10. ' ' → logprob: -12.054618835449219

Token 16: ' reduce' (ID: 10389)
  Prédit: 'reduce'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'reduce' → logprob: -0.6042974591255188
    2. 'partial' → logprob: -1.229297399520874
    3. ' partial' → logprob: -2.479297399520874
    4. ' reduce' → logprob: -2.604297399520874
    5. 'l' → logprob: -6.229297637939453
    6. ' l' → logprob: -7.479297637939453
    7. 'wrap' → logprob: -8.229297637939453
    8. 'cmp' → logprob: -9.229297637939453
    9. ' wraps' → logprob: -9.229297637939453
    10. 'cache' → logprob: -9.854297637939453

Token 17: ',' (ID: 11)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(' → logprob: -1.1180074214935303
    2. '\' → logprob: -1.4930074214935303
    3. ',' → logprob: -2.3680074214935303
    4. '(
' → logprob: -2.4930074214935303
    5. 'def' → logprob: -2.4930074214935303
    6. 'import' → logprob: -2.6180074214935303
    7. '
' → logprob: -3.6180074214935303
    8. '```' → logprob: -3.8680074214935303
    9. ' 

' → logprob: -4.118007659912109
    10. '\n' → logprob: -4.243007659912109

Token 18: ' partial' (ID: 13664)
  Prédit: ' partial'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' partial' → logprob: -0.6347243785858154
    2. 'partial' → logprob: -0.7597243785858154
    3. 'cmp' → logprob: -7.6347246170043945
    4. 'l' → logprob: -8.009724617004395
    5. ' l' → logprob: -8.009724617004395
    6. 'wrap' → logprob: -8.134724617004395
    7. ' cmp' → logprob: -8.134724617004395
    8. ' wraps' → logprob: -8.259724617004395
    9. '```' → logprob: -10.884724617004395
    10. '.partial' → logprob: -10.884724617004395

Token 19: '

' (ID: 279)
  Prédit: ','
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ',' → logprob: -0.9786571264266968
    2. '\' → logprob: -1.8536571264266968
    3. 'def' → logprob: -2.2286572456359863
    4. 'import' → logprob: -2.3536572456359863
    5. '
' → logprob: -2.9786572456359863
    6. '(' → logprob: -2.9786572456359863
    7. '(
' → logprob: -3.6036572456359863
    8. ',
' → logprob: -3.7286572456359863
    9. '```' → logprob: -3.8536572456359863
    10. '\n' → logprob: -3.9786572456359863

Token 20: 'def' (ID: 1314)
  Prédit: 'def'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'def' → logprob: -0.6602765917778015
    2. '\' → logprob: -1.9102766513824463
    3. '(' → logprob: -2.4102766513824463
    4. ',' → logprob: -2.6602766513824463
    5. 'd' → logprob: -3.1602766513824463
    6. '#' → logprob: -3.5352766513824463
    7. '```' → logprob: -3.6602766513824463
    8. '(
' → logprob: -3.7852766513824463
    9. '`' → logprob: -4.535276412963867
    10. ',
' → logprob: -4.660276412963867

Token 21: ' main' (ID: 2758)
  Prédit: ' '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' ' → logprob: -0.2596210241317749
    2. '_' → logprob: -2.7596211433410645
    3. ' process' → logprob: -3.0096211433410645
    4. ' calculate' → logprob: -4.3846211433410645
    5. ' factorial' → logprob: -4.5096211433410645
    6. ' space' → logprob: -4.7596211433410645
    7. ' add' → logprob: -4.8846211433410645
    8. ' my' → logprob: -5.1346211433410645
    9. ' compute' → logprob: -5.2596211433410645
    10. ' _' → logprob: -5.2596211433410645

Token 22: '():
' (ID: 8595)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '(' → logprob: -0.002773609245195985
    2. '():' → logprob: -6.127773761749268
    3. ':' → logprob: -8.75277328491211
    4. '_' → logprob: -9.00277328491211
    5. ' (' → logprob: -9.37777328491211
    6. '(:' → logprob: -9.87777328491211
    7. '```' → logprob: -10.12777328491211
    8. '(
' → logprob: -10.62777328491211
    9. '("("' → logprob: -11.25277328491211
    10. '<|end|>' → logprob: -11.37777328491211

Token 23: '   ' (ID: 271)
  Prédit: ' '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' ' → logprob: -0.6078341007232666
    2. '    ' → logprob: -1.1078341007232666
    3. '   ' → logprob: -2.2328341007232666
    4. ' pass' → logprob: -6.1078338623046875
    5. ' )' → logprob: -6.1078338623046875
    6. 'n' → logprob: -6.2328338623046875
    7. '  ' → logprob: -6.4828338623046875
    8. ' 
' → logprob: -6.6078338623046875
    9. '    
' → logprob: -6.6078338623046875
    10. '     
' → logprob: -6.7328338623046875

Token 24: ' n' (ID: 297)
  Prédit: 'data'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'data' → logprob: -0.7142072916030884
    2. ' data' → logprob: -0.8392072916030884
    3. ' items' → logprob: -4.589207172393799
    4. '   ' → logprob: -4.589207172393799
    5. 'result' → logprob: -4.964207172393799
    6. ' result' → logprob: -5.214207172393799
    7. 'items' → logprob: -5.339207172393799
    8. 'n' (adapté à ' n') → logprob: -5.589207172393799
    9. ' pass' → logprob: -5.839207172393799
    10. ' lines' → logprob: -5.964207172393799

Token 25: ' =' (ID: 314)
  Prédit: ' ='
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' =' → logprob: -0.05736715719103813
    2. ' ' → logprob: -3.3073670864105225
    3. '=' → logprob: -4.057367324829102
    4. '  ' → logprob: -7.307367324829102
    5. '_' → logprob: -7.807367324829102
    6. ',' → logprob: -8.682367324829102
    7. '_space' → logprob: -8.807367324829102
    8. ' ,' → logprob: -8.932367324829102
    9. 'space' → logprob: -10.182367324829102
    10. ' _' → logprob: -10.182367324829102

Token 26: ' int' (ID: 677)
  Prédit: ' int'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' int' → logprob: -0.1729920506477356
    2. ' ' → logprob: -1.9229919910430908
    3. 'int' → logprob: -4.54799222946167
    4. '10' → logprob: -6.42299222946167
    5. '20' → logprob: -8.672991752624512
    6. '5' → logprob: -9.422991752624512
    7. ' map' → logprob: -10.172991752624512
    8. ' input' → logprob: -10.297991752624512
    9. '100' → logprob: -10.922991752624512
    10. '40' → logprob: -11.047991752624512

Token 27: '(input' (ID: 10054)
  Prédit: '(input'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(input' → logprob: -0.3874537944793701
    2. '(' → logprob: -1.1374537944793701
    3. 'input' → logprob: -7.637454032897949
    4. '('' → logprob: -9.76245403289795
    5. ' (' → logprob: -11.51245403289795
    6. ' input' → logprob: -11.76245403289795
    7. '()' → logprob: -11.76245403289795
    8. '(
' → logprob: -12.13745403289795
    9. '("' → logprob: -12.63745403289795
    10. '(

' → logprob: -13.88745403289795

Token 28: '())
' (ID: 4574)
  Prédit: '()'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '()' → logprob: -0.3423539400100708
    2. '(' → logprob: -1.3423539400100708
    3. '())' → logprob: -3.7173538208007812
    4. ')' → logprob: -6.092353820800781
    5. '('' → logprob: -6.592353820800781
    6. '("("' → logprob: -8.967353820800781
    7. '(
' → logprob: -9.342353820800781
    8. '()))' → logprob: -9.342353820800781
    9. '(()' → logprob: -9.592353820800781
    10. '("' → logprob: -9.842353820800781

Token 29: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.19085919857025146
    2. '    
' → logprob: -2.315859317779541
    3. '\n' → logprob: -4.440859317779541
    4. 'data' → logprob: -4.690859317779541
    5. '\' → logprob: -4.815859317779541
    6. '```' → logprob: -4.940859317779541
    7. '
' → logprob: -5.190859317779541
    8. ' ' → logprob: -5.690859317779541
    9. '   
' → logprob: -5.690859317779541
    10. 'result' → logprob: -5.690859317779541

Token 30: ' grab' (ID: 18013)
  Prédit: ' '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' ' → logprob: -0.8328067660331726
    2. 'data' → logprob: -1.3328068256378174
    3. ')' → logprob: -2.9578068256378174
    4. 'a' → logprob: -3.2078068256378174
    5. 'items' → logprob: -3.5828068256378174
    6. ' data' → logprob: -3.8328068256378174
    7. ' 
' → logprob: -4.332806587219238
    8. 's' → logprob: -4.332806587219238
    9. 'lst' → logprob: -4.457806587219238
    10. ' items' → logprob: -4.582806587219238

Token 31: ' =' (ID: 314)
  Prédit: 's'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 's' → logprob: -0.8698196411132812
    2. 'bed' → logprob: -1.2448196411132812
    3. ' =' → logprob: -1.6198196411132812
    4. '=' → logprob: -3.8698196411132812
    5. 'ber' → logprob: -4.244819641113281
    6. '_' → logprob: -4.244819641113281
    7. 'bers' → logprob: -4.369819641113281
    8. '_count' → logprob: -4.619819641113281
    9. '_counts' → logprob: -5.494819641113281
    10. '_data' → logprob: -5.744819641113281

Token 32: ' lambda' (ID: 27871)
  Prédit: 'partial'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'partial' → logprob: -0.2603561580181122
    2. ' partial' → logprob: -2.0103561878204346
    3. 'chain' → logprob: -3.6353561878204346
    4. 'item' → logprob: -4.0103559494018555
    5. 'list' → logprob: -4.0103559494018555
    6. ' list' → logprob: -4.2603559494018555
    7. ' chain' → logprob: -4.7603559494018555
    8. '(part' → logprob: -5.5103559494018555
    9. ' item' → logprob: -5.7603559494018555
    10. 'lambda' → logprob: -7.3853559494018555

Token 33: ':' (ID: 25)
  Prédit: ' x'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' x' → logprob: -0.10885560512542725
    2. 'x' → logprob: -2.358855724334717
    3. ' lst' → logprob: -5.608855724334717
    4. ' a' → logprob: -5.983855724334717
    5. 'a' → logprob: -7.733855724334717
    6. ' row' → logprob: -7.983855724334717
    7. ' s' → logprob: -8.233855247497559
    8. ' items' → logprob: -8.358855247497559
    9. 'lst' → logprob: -8.358855247497559
    10. ' arr' → logprob: -9.358855247497559

Token 34: ' list' (ID: 1562)
  Prédit: ' list'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' list' → logprob: -0.5433446168899536
    2. ' map' → logprob: -1.5433446168899536
    3. 'list' → logprob: -2.168344497680664
    4. ' input' → logprob: -3.293344497680664
    5. 'map' → logprob: -3.543344497680664
    6. 'input' → logprob: -4.293344497680664
    7. ' tuple' → logprob: -4.668344497680664
    8. 'tuple' → logprob: -7.293344497680664
    9. ' [' → logprob: -7.918344497680664
    10. '[' → logprob: -8.168344497680664

Token 35: '(map' (ID: 16946)
  Prédit: '(map'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(map' → logprob: -9.901345038088039e-05
    2. '(' → logprob: -9.250099182128906
    3. '(int' → logprob: -13.375099182128906
    4. 'map' → logprob: -14.375099182128906
    5. '(chain' → logprob: -15.875099182128906
    6. '(range' → logprob: -16.250099182128906
    7. '()' → logprob: -16.500099182128906
    8. '(filter' → logprob: -16.500099182128906
    9. '(input' → logprob: -16.875099182128906
    10. '	map' → logprob: -17.125099182128906

Token 36: '(int' (ID: 2742)
  Prédit: '(int'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(int' → logprob: -0.00033546582562848926
    2. '(' → logprob: -8.375335693359375
    3. 'int' → logprob: -9.500335693359375
    4. '<|end|>' → logprob: -11.625335693359375
    5. '(str' → logprob: -12.500335693359375
    6. '<int' → logprob: -12.625335693359375
    7. ' int' → logprob: -13.000335693359375
    8. '=int' → logprob: -13.125335693359375
    9. ',int' → logprob: -13.125335693359375
    10. '[int' → logprob: -13.125335693359375

Token 37: ',' (ID: 11)
  Prédit: ',input'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ',input' → logprob: -0.4514029026031494
    2. ',' → logprob: -1.2014029026031494
    3. '(input' → logprob: -2.9514029026031494
    4. 'input' → logprob: -4.70140266418457
    5. '(' → logprob: -7.20140266418457
    6. ' ,' → logprob: -8.32640266418457
    7. ' input' → logprob: -9.45140266418457
    8. ' (' → logprob: -11.07640266418457
    9. '=input' → logprob: -11.70140266418457
    10. '   ' → logprob: -11.82640266418457

Token 38: ' input' (ID: 3422)
  Prédit: 'input'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'input' → logprob: -0.31328150629997253
    2. ' input' → logprob: -1.313281536102295
    3. '	input' → logprob: -12.313281059265137
    4. ',input' → logprob: -12.688281059265137
    5. ' ' → logprob: -12.813281059265137
    6. '   ' → logprob: -12.938281059265137
    7. '(input' → logprob: -13.188281059265137
    8. '=input' → logprob: -13.188281059265137
    9. ')' → logprob: -13.313281059265137
    10. '<input' → logprob: -14.188281059265137

Token 39: '().' (ID: 1454)
  Prédit: '().'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '().' → logprob: -7.3458322731312364e-06
    2. '()' → logprob: -12.000007629394531
    3. '()))' → logprob: -15.000007629394531
    4. ' ().' → logprob: -15.000007629394531
    5. ')' → logprob: -15.750007629394531
    6. '))' → logprob: -16.12500762939453
    7. '())))' → logprob: -16.87500762939453
    8. '.split' → logprob: -17.25000762939453
    9. '())' → logprob: -17.62500762939453
    10. 'split' → logprob: -17.62500762939453

Token 40: 'split' (ID: 13627)
  Prédit: 'split'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'split' → logprob: -0.000763883872423321
    2. 'strip' → logprob: -7.250763893127441
    3. ' split' → logprob: -10.250763893127441
    4. 'read' → logprob: -11.250763893127441
    5. 'rstrip' → logprob: -12.500763893127441
    6. 'spl' → logprob: -13.625763893127441
    7. ' ' → logprob: -15.375763893127441
    8. '(split' → logprob: -15.375763893127441
    9. ')' → logprob: -16.750762939453125
    10. ' strip' → logprob: -16.875762939453125

Token 41: '()))
' (ID: 24521)
  Prédit: '()))'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '()))' → logprob: -0.20881839096546173
    2. '))' → logprob: -2.0838184356689453
    3. '()' → logprob: -3.3338184356689453
    4. '())' → logprob: -4.208818435668945
    5. ')))' → logprob: -5.333818435668945
    6. '(' → logprob: -5.708818435668945
    7. '())))' → logprob: -5.708818435668945
    8. ')' → logprob: -6.333818435668945
    9. '()))
' → logprob: -8.708818435668945
    10. ''))' → logprob: -11.083818435668945

Token 42: '   ' (ID: 271)
  Prédit: ''
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False

Token 43: ' seq' (ID: 26775)
  Prédit: '
'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '
' → logprob: -0.5095494389533997
    2. 'n' → logprob: -1.7595493793487549
    3. '   ' → logprob: -3.009549379348755
    4. '    
' → logprob: -3.134549379348755
    5. '<|end|>' → logprob: -3.259549379348755
    6. 'data' → logprob: -3.759549379348755
    7. 'tokens' → logprob: -4.384549617767334
    8. ' ' → logprob: -5.134549617767334
    9. 'newline' → logprob: -5.134549617767334
    10. ' 
' → logprob: -5.384549617767334

Token 44: ' =' (ID: 314)
  Prédit: '='
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '=' → logprob: -0.4424405097961426
    2. ' =' → logprob: -1.4424405097961426
    3. 'u' → logprob: -2.1924405097961426
    4. 's' → logprob: -4.942440509796143
    5. '_' → logprob: -6.317440509796143
    6. '1' → logprob: -8.442440032958984
    7. 'uer' → logprob: -10.192440032958984
    8. 'ue' → logprob: -10.192440032958984
    9. 'ence' → logprob: -10.192440032958984
    10. 'uel' → logprob: -10.442440032958984

Token 45: ' list' (ID: 1562)
  Prédit: ' grab'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' grab' → logprob: -0.47478461265563965
    2. 'grab' → logprob: -0.9747846126556396
    3. ' [' → logprob: -8.099784851074219
    4. ' list' → logprob: -8.724784851074219
    5. ' ' → logprob: -9.474784851074219
    6. '[' → logprob: -9.599784851074219
    7. '[]' → logprob: -10.849784851074219
    8. ' []' → logprob: -11.224784851074219
    9. 'list' → logprob: -11.349784851074219
    10. 'gr' → logprob: -11.349784851074219

Token 46: '(map' (ID: 16946)
  Prédit: '(chain'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(chain' → logprob: -0.03195912018418312
    2. '(acc' → logprob: -4.156959056854248
    3. '(' → logprob: -4.531959056854248
    4. '(gr' → logprob: -5.906959056854248
    5. '(map' → logprob: -6.406959056854248
    6. '(range' → logprob: -7.656959056854248
    7. '()' → logprob: -10.281959533691406
    8. '(part' → logprob: -10.281959533691406
    9. '(ch' → logprob: -10.531959533691406
    10. '(t' → logprob: -10.531959533691406

Token 47: '(gr' (ID: 64506)
  Prédit: '(int'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(int' → logprob: -0.005055621732026339
    2. '(gr' → logprob: -5.8800554275512695
    3. '(' → logprob: -6.7550554275512695
    4. '(item' → logprob: -7.6300554275512695
    5. '(lambda' → logprob: -7.8800554275512695
    6. '(input' → logprob: -9.38005542755127
    7. '(str' → logprob: -9.75505542755127
    8. ')' → logprob: -10.50505542755127
    9. '(part' → logprob: -10.88005542755127
    10. '(eval' → logprob: -11.75505542755127

Token 48: 'ab' (ID: 378)
  Prédit: 'ab'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'ab' → logprob: -0.0212346650660038
    2. 'abber' → logprob: -4.271234512329102
    3. 'ap' → logprob: -5.646234512329102
    4. 'b' → logprob: -6.896234512329102
    5. 'q' → logprob: -7.021234512329102
    6. '(ab' → logprob: -7.771234512329102
    7. 'abs' → logprob: -9.146234512329102
    8. 'ad' → logprob: -9.396234512329102
    9. 'n' → logprob: -10.021234512329102
    10. 'p' → logprob: -10.021234512329102

Token 49: ',' (ID: 11)
  Prédit: ','
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ',' → logprob: -0.5345067381858826
    2. '(),' → logprob: -0.9095067381858826
    3. '()' → logprob: -5.534506797790527
    4. '()))' → logprob: -5.784506797790527
    5. ',int' → logprob: -6.284506797790527
    6. ' ,' → logprob: -7.034506797790527
    7. ',input' → logprob: -8.159506797790527
    8. '())))' → logprob: -8.159506797790527
    9. '))' → logprob: -8.534506797790527
    10. ')))' → logprob: -8.784506797790527

Token 50: ' range' (ID: 3352)
  Prédit: 'range'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'range' → logprob: -0.012456088326871395
    2. '[' → logprob: -5.137455940246582
    3. ' range' → logprob: -5.262455940246582
    4. '(range' → logprob: -7.137455940246582
    5. '   ' → logprob: -8.512455940246582
    6. 'repeat' → logprob: -9.012455940246582
    7. ' ' → logprob: -9.387455940246582
    8. ' [' → logprob: -10.137455940246582
    9. 'chain' → logprob: -10.887455940246582
    10. '	range' → logprob: -11.012455940246582

Token 51: '(n' (ID: 2406)
  Prédit: '(n'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(n' → logprob: -0.00015872348740231246
    2. '(' → logprob: -8.750158309936523
    3. 'n' → logprob: -16.125158309936523
    4. '(
' → logprob: -16.875158309936523
    5. '((' → logprob: -19.000158309936523
    6. ' (' → logprob: -19.625158309936523
    7. '   ' → logprob: -19.625158309936523
    8. ' n' → logprob: -19.875158309936523
    9. ')n' → logprob: -19.875158309936523
    10. '(N' → logprob: -20.125158309936523

Token 52: ')))
' (ID: 12562)
  Prédit: ')))'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')))' → logprob: -0.04349077120423317
    2. ')' → logprob: -3.1684908866882324
    3. '))' → logprob: -7.918490886688232
    4. '))))' → logprob: -9.793490409851074
    5. ')))
' → logprob: -10.418490409851074
    6. '())))' → logprob: -10.793490409851074
    7. ' ' → logprob: -11.793490409851074
    8. ')));' → logprob: -12.668490409851074
    9. ')))

' → logprob: -13.168490409851074
    10. ')
' → logprob: -13.293490409851074

Token 53: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.2960077226161957
    2. ')' → logprob: -2.2960076332092285
    3. '()' → logprob: -2.9210076332092285
    4. ':' → logprob: -3.5460076332092285
    5. '(' → logprob: -3.7960076332092285
    6. '[' → logprob: -4.2960076332092285
    7. '
' → logprob: -4.6710076332092285
    8. ' ' → logprob: -4.9210076332092285
    9. '    
' → logprob: -5.4210076332092285
    10. '[]' → logprob: -5.6710076332092285

Token 54: ' seq' (ID: 26775)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.6157978177070618
    2. ' prefix' → logprob: -2.490797758102417
    3. 's' → logprob: -2.865797758102417
    4. 'prefix' → logprob: -3.115797758102417
    5. ')' → logprob: -3.615797758102417
    6. ' s' → logprob: -4.115797996520996
    7. 'result' → logprob: -4.240797996520996
    8. ' max' → logprob: -4.240797996520996
    9. '    
' → logprob: -4.490797996520996
    10. 'max' → logprob: -4.615797996520996

Token 55: ' =' (ID: 314)
  Prédit: ''
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False

Token 56: ' sorted' (ID: 20099)
  Prédit: ' list'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' list' → logprob: -0.4184964597225189
    2. 'list' → logprob: -1.2934964895248413
    3. ' chain' → logprob: -4.168496608734131
    4. 'sorted' → logprob: -4.293496608734131
    5. '[' → logprob: -4.668496608734131
    6. ' sorted' → logprob: -4.668496608734131
    7. 'chain' → logprob: -4.793496608734131
    8. ' [' → logprob: -5.168496608734131
    9. '[list' → logprob: -5.918496608734131
    10. ' tuple' → logprob: -7.293496608734131

Token 57: '(seq' (ID: 78669)
  Prédit: '(seq'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(seq' → logprob: -0.03893965482711792
    2. '(' → logprob: -3.2889397144317627
    3. '(lambda' → logprob: -7.163939476013184
    4. '(chain' → logprob: -9.663939476013184
    5. '(
' → logprob: -10.663939476013184
    6. '(sequence' → logprob: -11.413939476013184
    7. '(se' → logprob: -11.538939476013184
    8. '(key' → logprob: -12.038939476013184
    9. ' (' → logprob: -12.288939476013184
    10. '((' → logprob: -13.038939476013184

Token 58: ',' (ID: 11)
  Prédit: ','
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ',' → logprob: -0.22893445193767548
    2. ',key' → logprob: -1.603934407234192
    3. ')' → logprob: -6.103934288024902
    4. 'key' → logprob: -7.353934288024902
    5. '(),' → logprob: -8.103934288024902
    6. ' ,' → logprob: -8.478934288024902
    7. '(key' → logprob: -9.353934288024902
    8. ' key' → logprob: -11.228934288024902
    9. '   ' → logprob: -12.728934288024902
    10. '_key' → logprob: -12.853934288024902

Token 59: ' key' (ID: 2140)
  Prédit: 'key'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'key' → logprob: -0.6936787366867065
    2. ' key' → logprob: -0.6936787366867065
    3. 'reverse' → logprob: -8.568678855895996
    4. 'item' → logprob: -9.068678855895996
    5. '   ' → logprob: -9.568678855895996
    6. ' reverse' → logprob: -10.068678855895996
    7. '	key' → logprob: -10.568678855895996
    8. ',key' → logprob: -10.943678855895996
    9. 'lambda' → logprob: -11.068678855895996
    10. ' item' → logprob: -11.568678855895996

Token 60: '=item' (ID: 76091)
  Prédit: '=item'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '=item' → logprob: -0.0013557136990129948
    2. '=' → logprob: -6.7513556480407715
    3. '=lambda' → logprob: -9.25135612487793
    4. 'item' → logprob: -9.37635612487793
    5. '=len' → logprob: -13.25135612487793
    6. ')=' → logprob: -14.50135612487793
    7. 'getitem' → logprob: -14.75135612487793
    8. ')item' → logprob: -15.25135612487793
    9. '=index' → logprob: -15.37635612487793
    10. 'operator' → logprob: -15.37635612487793

Token 61: 'getter' (ID: 132812)
  Prédit: 'getter'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'getter' → logprob: -1.2471589798224159e-05
    2. 'get' → logprob: -11.625012397766113
    3. 'getitem' → logprob: -13.250012397766113
    4. 'g' → logprob: -15.000012397766113
    5. '@Getter' → logprob: -15.250012397766113
    6. '_get' → logprob: -15.250012397766113
    7. 'Getter' → logprob: -15.625012397766113
    8. ' getter' → logprob: -16.00001335144043
    9. 'gifter' → logprob: -16.00001335144043
    10. 'giver' → logprob: -16.37501335144043

Token 62: '(' (ID: 7)
  Prédit: '('
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(' → logprob: -0.0646243467926979
    2. '(-' → logprob: -3.064624309539795
    3. '0' → logprob: -4.314624309539795
    4. '1' → logprob: -6.064624309539795
    5. '2' → logprob: -9.314624786376953
    6. ' (' → logprob: -10.314624786376953
    7. '-' → logprob: -10.814624786376953
    8. '3' → logprob: -11.189624786376953
    9. '```' → logprob: -11.439624786376953
    10. '(
' → logprob: -11.814624786376953

Token 63: '1' (ID: 16)
  Prédit: '0'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '0' → logprob: -0.06530053913593292
    2. '1' → logprob: -2.815300464630127
    3. '-' → logprob: -6.315300464630127
    4. '2' → logprob: -6.565300464630127
    5. ' ' → logprob: -9.690300941467285
    6. '3' → logprob: -10.690300941467285
    7. ' -' → logprob: -11.815300941467285
    8. '[' → logprob: -12.315300941467285
    9. '(' → logprob: -12.690300941467285
    10. '   ' → logprob: -13.002800941467285

Token 64: '))
' (ID: 2210)
  Prédit: '))'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '))' → logprob: -0.0015240294160321355
    2. ')' → logprob: -6.876523971557617
    3. ',' → logprob: -8.501523971557617
    4. '),' → logprob: -8.626523971557617
    5. ')))' → logprob: -9.626523971557617
    6. ' ))' → logprob: -10.251523971557617
    7. '))
' → logprob: -12.751523971557617
    8. ')),' → logprob: -14.251523971557617
    9. '()))' → logprob: -14.626523971557617
    10. '));' → logprob: -14.876523971557617

Token 65: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.047690898180007935
    2. ')' → logprob: -3.9226908683776855
    3. '    
' → logprob: -4.2976908683776855
    4. '[' → logprob: -6.0476908683776855
    5. '
' → logprob: -6.1726908683776855
    6. ',' → logprob: -6.5476908683776855
    7. '<|end|>' → logprob: -6.6726908683776855
    8. ':' → logprob: -7.0476908683776855
    9. '[:]' → logprob: -7.4226908683776855
    10. 'for' → logprob: -7.6726908683776855

Token 66: ' s' (ID: 265)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ')' → logprob: -1.2218817472457886
    2. '   ' → logprob: -1.3468817472457886
    3. 'for' → logprob: -2.346881866455078
    4. ',' → logprob: -2.721881866455078
    5. ' ' → logprob: -2.721881866455078
    6. ':' → logprob: -2.971881866455078
    7. '
' → logprob: -3.346881866455078
    8. '(' → logprob: -3.346881866455078
    9. '[' → logprob: -4.221881866455078
    10. '.' → logprob: -4.221881866455078

Token 67: ' =' (ID: 314)
  Prédit: 'eq'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'eq' → logprob: -0.04120009392499924
    2. 'um' → logprob: -3.7912001609802246
    3. 'e' → logprob: -4.791200160980225
    4. 'ums' → logprob: -5.041200160980225
    5. '=' → logprob: -6.666200160980225
    6. ' =' → logprob: -7.291200160980225
    7. 'equ' → logprob: -8.291199684143066
    8. 'q' → logprob: -8.416199684143066
    9. '_eq' → logprob: -8.541199684143066
    10. 't' → logprob: -9.166199684143066

Token 68: ' list' (ID: 1562)
  Prédit: '0'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '0' → logprob: -0.09716356545686722
    2. 'sum' → logprob: -3.597163677215576
    3. '[]' → logprob: -4.097163677215576
    4. 'reduce' → logprob: -4.597163677215576
    5. ' ' → logprob: -4.722163677215576
    6. 'list' → logprob: -5.222163677215576
    7. '[' → logprob: -5.222163677215576
    8. 'acc' → logprob: -5.472163677215576
    9. ' []' → logprob: -5.597163677215576
    10. 'set' → logprob: -5.972163677215576

Token 69: '(acc' (ID: 82668)
  Prédit: '(acc'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(acc' → logprob: -0.04977388679981232
    2. '(chain' → logprob: -3.049773931503296
    3. '(ac' → logprob: -7.174773693084717
    4. '(' → logprob: -7.924773693084717
    5. 'acc' → logprob: -10.549774169921875
    6. '(part' → logprob: -12.174774169921875
    7. '(it' → logprob: -12.174774169921875
    8. '(map' → logprob: -12.299774169921875
    9. '(range' → logprob: -12.674774169921875
    10. '()' → logprob: -13.049774169921875

Token 70: 'umulate' (ID: 134636)
  Prédit: 'umulate'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'umulate' → logprob: -0.00017922651022672653
    2. 'um' → logprob: -8.750179290771484
    3. 'umu' → logprob: -11.750179290771484
    4. 'om' → logprob: -11.750179290771484
    5. 'umul' → logprob: -12.875179290771484
    6. 'ulate' → logprob: -14.000179290771484
    7. 'ulum' → logprob: -14.875179290771484
    8. 'umulative' → logprob: -15.125179290771484
    9. 'umulator' → logprob: -15.375179290771484
    10. 'umal' → logprob: -15.750179290771484

Token 71: '(map' (ID: 16946)
  Prédit: '(seq'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '(seq' → logprob: -0.08131898194551468
    2. '(chain' → logprob: -3.0813190937042236
    3. '(lambda' → logprob: -3.8313190937042236
    4. '(' → logprob: -4.7063188552856445
    5. '(sequence' → logprob: -7.4563188552856445
    6. '(s' → logprob: -8.206318855285645
    7. '(item' → logprob: -8.706318855285645
    8. '(se' → logprob: -9.081318855285645
    9. '([' → logprob: -9.581318855285645
    10. '(ch' → logprob: -10.206318855285645

Token 72: '(item' (ID: 10016)
  Prédit: '(item'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(item' → logprob: -0.29691681265830994
    2. '(lambda' → logprob: -1.4219168424606323
    3. 'item' → logprob: -4.671916961669922
    4. '(operator' → logprob: -5.921916961669922
    5. 'lambda' → logprob: -6.421916961669922
    6. ')item' → logprob: -7.421916961669922
    7. ')(' → logprob: -7.796916961669922
    8. ')' → logprob: -8.421916961669922
    9. '(part' → logprob: -8.671916961669922
    10. '(' → logprob: -8.921916961669922

Token 73: 'getter' (ID: 132812)
  Prédit: 'getter'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'getter' → logprob: -0.00012558852904476225
    2. 'get' → logprob: -9.000125885009766
    3. 'getitem' → logprob: -14.250125885009766
    4. 'setter' → logprob: -14.500125885009766
    5. '(get' → logprob: -15.000125885009766
    6. '_get' → logprob: -15.375125885009766
    7. 'gett' → logprob: -16.000125885009766
    8. 'Getter' → logprob: -16.500125885009766
    9. ' getter' → logprob: -16.625125885009766
    10. 'operator' → logprob: -16.750125885009766

Token 74: '(' (ID: 7)
  Prédit: '('
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(' → logprob: -9.93710636976175e-05
    2. '1' → logprob: -9.375099182128906
    3. ',' → logprob: -11.875099182128906
    4. ' (' → logprob: -12.625099182128906
    5. '(-' → logprob: -13.875099182128906
    6. ')' → logprob: -14.000099182128906
    7. ')(' → logprob: -14.250099182128906
    8. '((' → logprob: -14.625099182128906
    9. '```' → logprob: -15.125099182128906
    10. '0' → logprob: -15.250099182128906

Token 75: '0' (ID: 15)
  Prédit: '1'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '1' → logprob: -0.281755268573761
    2. '0' → logprob: -1.4067552089691162
    3. '2' → logprob: -8.156755447387695
    4. ' ' → logprob: -8.281755447387695
    5. '-' → logprob: -10.719255447387695
    6. '   ' → logprob: -10.719255447387695
    7. '  ' → logprob: -12.031755447387695
    8. '3' → logprob: -13.156755447387695
    9. '```' → logprob: -13.219255447387695
    10. ' -' → logprob: -13.594255447387695

Token 76: '),' (ID: 936)
  Prédit: '),'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '),' → logprob: -0.043417491018772125
    2. ',' → logprob: -3.168417453765869
    3. ')' → logprob: -8.668417930603027
    4. '   ' → logprob: -9.043417930603027
    5. ' ),' → logprob: -10.168417930603027
    6. ',),' → logprob: -10.793417930603027
    7. '```' → logprob: -11.418417930603027
    8. ' ,' → logprob: -11.418417930603027
    9. ''),' → logprob: -12.043417930603027
    10. ')),' → logprob: -12.293417930603027

Token 77: ' seq' (ID: 26775)
  Prédit: 'seq'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'seq' → logprob: -0.47438883781433105
    2. ' seq' → logprob: -0.974388837814331
    3. '(seq' → logprob: -8.09938907623291
    4. ' ' → logprob: -13.09938907623291
    5. ' sequence' → logprob: -13.22438907623291
    6. 'sequence' → logprob: -14.09938907623291
    7. '_seq' → logprob: -14.34938907623291
    8. ')' → logprob: -14.34938907623291
    9. '   ' → logprob: -14.47438907623291
    10. 'se' → logprob: -14.59938907623291

Token 78: ')))
' (ID: 12562)
  Prédit: ')))'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')))' → logprob: -0.12821456789970398
    2. '),' → logprob: -2.3782145977020264
    3. '))' → logprob: -3.6282145977020264
    4. ',' → logprob: -7.878214359283447
    5. ')' → logprob: -8.503214836120605
    6. ')))
' → logprob: -9.003214836120605
    7. ')),' → logprob: -9.628214836120605
    8. '))))' → logprob: -9.753214836120605
    9. ' ' → logprob: -9.878214836120605
    10. ' ))' → logprob: -10.378214836120605

Token 79: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.2870614230632782
    2. ' ' → logprob: -2.4120614528656006
    3. '+' → logprob: -3.0370614528656006
    4. '<|end|>' → logprob: -3.1620614528656006
    5. ')' → logprob: -3.5370614528656006
    6. '    
' → logprob: -4.4120612144470215
    7. '[' → logprob: -4.6620612144470215
    8. '    ' → logprob: -5.6620612144470215
    9. ' 
' → logprob: -5.7870612144470215
    10. ',' → logprob: -5.9120612144470215

Token 80: ' verdict' (ID: 75722)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.014417113736271858
    2. ' for' → logprob: -5.3894171714782715
    3. 'for' → logprob: -6.6394171714782715
    4. '    
' → logprob: -6.8894171714782715
    5. ')' → logprob: -7.1394171714782715
    6. '<|end|>' → logprob: -7.1394171714782715
    7. 'idx' → logprob: -7.3894171714782715
    8. ' i' → logprob: -7.5144171714782715
    9. 'i' → logprob: -7.6394171714782715
    10. ' ' → logprob: -7.7644171714782715

Token 81: ' =' (ID: 314)
  Prédit: ' ='
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' =' → logprob: -0.004085997585207224
    2. '=' → logprob: -5.629086017608643
    3. ' ' → logprob: -8.004085540771484
    4. 's' → logprob: -9.254085540771484
    5. '_' → logprob: -11.504085540771484
    6. ':' → logprob: -11.629085540771484
    7. '  ' → logprob: -12.129085540771484
    8. 'es' → logprob: -12.129085540771484
    9. '(' → logprob: -12.254085540771484
    10. ' =
' → logprob: -12.379085540771484

Token 82: ' all' (ID: 722)
  Prédit: ' all'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' all' → logprob: -1.3038151264190674
    2. '"' → logprob: -2.0538151264190674
    3. ' False' → logprob: -2.3038151264190674
    4. ''' → logprob: -2.5538151264190674
    5. ' '' → logprob: -2.6788151264190674
    6. ' True' → logprob: -2.8038151264190674
    7. ' max' → logprob: -2.9288151264190674
    8. 'all' → logprob: -3.3038151264190674
    9. 'False' → logprob: -3.3038151264190674
    10. ' "' → logprob: -3.5538151264190674

Token 83: '(map' (ID: 16946)
  Prédit: '(lambda'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(lambda' → logprob: -0.9011070728302002
    2. '((' → logprob: -1.1511070728302002
    3. '(' → logprob: -1.7761070728302002
    4. '(s' → logprob: -3.2761070728302
    5. '(x' → logprob: -3.2761070728302
    6. '(map' → logprob: -4.151106834411621
    7. '(i' → logprob: -5.276106834411621
    8. '([' → logprob: -5.651106834411621
    9. '(item' → logprob: -6.776106834411621
    10. '(a' → logprob: -7.276106834411621

Token 84: '(lambda' (ID: 43341)
  Prédit: '(lambda'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(lambda' → logprob: -0.004302884452044964
    2. '(' → logprob: -5.504302978515625
    3. '(part' → logprob: -10.129302978515625
    4. '(operator' → logprob: -10.129302978515625
    5. '(bool' → logprob: -10.504302978515625
    6. 'lambda' → logprob: -10.504302978515625
    7. '(int' → logprob: -10.629302978515625
    8. ' (' → logprob: -10.629302978515625
    9. '(None' → logprob: -11.004302978515625
    10. '((' → logprob: -11.754302978515625

Token 85: ' xy' (ID: 53634)
  Prédit: ' x'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' x' → logprob: -0.6504386067390442
    2. ' lambda' → logprob: -1.0254385471343994
    3. ' s' → logprob: -3.9004385471343994
    4. 'lambda' → logprob: -3.9004385471343994
    5. '(lambda' → logprob: -4.1504387855529785
    6. 's' → logprob: -4.6504387855529785
    7. ' i' → logprob: -4.6504387855529785
    8. ',' → logprob: -4.7754387855529785
    9. 'x' → logprob: -4.9004387855529785
    10. '   ' → logprob: -5.7754387855529785

Token 86: ':' (ID: 25)
  Prédit: ':'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ':' → logprob: -0.0037402219604700804
    2. ' :' → logprob: -5.753740310668945
    3. '=lambda' → logprob: -9.003740310668945
    4. 's' → logprob: -9.128740310668945
    5. ':
' → logprob: -9.503740310668945
    6. ',' → logprob: -9.878740310668945
    7. 'lambda' → logprob: -10.628740310668945
    8. '(lambda' → logprob: -10.753740310668945
    9. '   ' → logprob: -10.878740310668945
    10. ':x' → logprob: -11.003740310668945

Token 87: ' xy' (ID: 53634)
  Prédit: ' xy'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' xy' → logprob: -0.054126959294080734
    2. 'xy' → logprob: -3.1791269779205322
    3. ' x' → logprob: -5.179126739501953
    4. ' s' → logprob: -6.804126739501953
    5. 'x' → logprob: -6.929126739501953
    6. '(x' → logprob: -7.054126739501953
    7. 's' → logprob: -7.429126739501953
    8. '   ' → logprob: -7.554126739501953
    9. ' y' → logprob: -7.929126739501953
    10. ' (' → logprob: -8.054126739501953

Token 88: '[' (ID: 58)
  Prédit: '['
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '[' → logprob: -0.04070267826318741
    2. ':' → logprob: -3.2907025814056396
    3. 'x' → logprob: -7.665702819824219
    4. '   ' → logprob: -7.790702819824219
    5. 'lambda' → logprob: -8.540702819824219
    6. 's' → logprob: -8.665702819824219
    7. '0' → logprob: -8.790702819824219
    8. ' ' → logprob: -9.165702819824219
    9. '[]' → logprob: -9.415702819824219
    10. '  ' → logprob: -9.540702819824219

Token 89: '0' (ID: 15)
  Prédit: '0'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '0' → logprob: -0.5310372114181519
    2. '1' → logprob: -0.9060372114181519
    3. '[' → logprob: -5.281037330627441
    4. ' ' → logprob: -6.031037330627441
    5. '(' → logprob: -10.093537330627441
    6. '-' → logprob: -10.093537330627441
    7. '   ' → logprob: -10.156037330627441
    8. ':' → logprob: -10.343537330627441
    9. 'lambda' → logprob: -10.343537330627441
    10. ',' → logprob: -10.656037330627441

Token 90: ']' (ID: 60)
  Prédit: ' <='
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' <=' → logprob: -0.6654231548309326
    2. ' >=' → logprob: -1.4154231548309326
    3. '<=' → logprob: -1.9154231548309326
    4. '>=' → logprob: -2.6654231548309326
    5. '[' → logprob: -4.040423393249512
    6. ' <' → logprob: -6.040423393249512
    7. '<' → logprob: -6.165423393249512
    8. '>' → logprob: -7.040423393249512
    9. ' >' → logprob: -7.415423393249512
    10. ')' → logprob: -7.665423393249512

Token 91: ' <=' (ID: 5017)
  Prédit: ' <='
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' <=' → logprob: -0.6738101840019226
    2. '<=' → logprob: -0.9238101840019226
    3. '>=' → logprob: -3.2988102436065674
    4. ' >=' → logprob: -3.4238102436065674
    5. '[' → logprob: -3.9238102436065674
    6. ')' → logprob: -6.673810005187988
    7. '<' → logprob: -7.798810005187988
    8. ' <' → logprob: -7.923810005187988
    9. ' ' → logprob: -8.048810005187988
    10. ')<=' → logprob: -8.673810005187988

Token 92: ' xy' (ID: 53634)
  Prédit: 'xy'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'xy' → logprob: -0.02643115073442459
    2. ' xy' → logprob: -3.651431083679199
    3. ' ' → logprob: -10.0264310836792
    4. '   ' → logprob: -10.9014310836792
    5. 'x' → logprob: -10.9014310836792
    6. '  ' → logprob: -11.5264310836792
    7. '(x' → logprob: -11.7764310836792
    8. '
' → logprob: -12.0264310836792
    9. '_xy' → logprob: -12.4014310836792
    10. 's' → logprob: -12.9014310836792

Token 93: '[' (ID: 58)
  Prédit: '['
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '[' → logprob: -0.0041230423375964165
    2. '1' → logprob: -5.504123210906982
    3. '][' → logprob: -11.379122734069824
    4. ' [' → logprob: -12.254122734069824
    5. '0' → logprob: -12.379122734069824
    6. ')[' → logprob: -12.629122734069824
    7. ')' → logprob: -12.754122734069824
    8. '2' → logprob: -13.629122734069824
    9. '```' → logprob: -13.691622734069824
    10. 's' → logprob: -13.754122734069824

Token 94: '1' (ID: 16)
  Prédit: '1'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '1' → logprob: -0.0003254527400713414
    2. '0' → logprob: -8.875325202941895
    3. '[' → logprob: -9.250325202941895
    4. ' ' → logprob: -9.750325202941895
    5. '   ' → logprob: -12.687825202941895
    6. '-' → logprob: -12.687825202941895
    7. '```' → logprob: -12.812825202941895
    8. ')' → logprob: -13.125325202941895
    9. '
' → logprob: -13.250325202941895
    10. ']' → logprob: -13.375325202941895

Token 95: '],' (ID: 2155)
  Prédit: ','
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ',' → logprob: -0.028076909482479095
    2. ' ,' → logprob: -4.528077125549316
    3. ',s' → logprob: -5.528077125549316
    4. ' +' → logprob: -6.028077125549316
    5. '   ' → logprob: -6.278077125549316
    6. ' and' → logprob: -6.403077125549316
    7. '+' → logprob: -6.653077125549316
    8. '(s' → logprob: -6.778077125549316
    9. ',y' → logprob: -6.903077125549316
    10. ' -' → logprob: -7.028077125549316

Token 96: ' zip' (ID: 16216)
  Prédit: 'zip'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'zip' → logprob: -0.4813288152217865
    2. ' zip' → logprob: -0.9813288450241089
    3. '   ' → logprob: -5.606328964233398
    4. '(zip' → logprob: -5.856328964233398
    5. 'chain' → logprob: -8.106328964233398
    6. 'enumer' → logprob: -8.731328964233398
    7. ' enumerate' → logprob: -9.231328964233398
    8. ' ' → logprob: -10.481328964233398
    9. ' chain' → logprob: -10.981328964233398
    10. '.zip' → logprob: -11.106328964233398

Token 97: '(s' (ID: 1858)
  Prédit: '(s'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(s' → logprob: -0.000282431225059554
    2. '(' → logprob: -8.375282287597656
    3. ' (' → logprob: -10.500282287597656
    4. '(seq' → logprob: -11.750282287597656
    5. 's' → logprob: -12.125282287597656
    6. '   ' → logprob: -12.375282287597656
    7. '(chain' → logprob: -13.125282287597656
    8. ')(' → logprob: -13.500282287597656
    9. '(
' → logprob: -14.250282287597656
    10. ')' → logprob: -14.375282287597656

Token 98: ',' (ID: 11)
  Prédit: ','
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ',' → logprob: -0.01936947926878929
    2. ',s' → logprob: -4.269369602203369
    3. ',[' → logprob: -5.769369602203369
    4. 's' → logprob: -7.519369602203369
    5. ' ,' → logprob: -7.644369602203369
    6. ',(' → logprob: -7.769369602203369
    7. 'seq' → logprob: -8.644369125366211
    8. 'range' → logprob: -9.894369125366211
    9. ',n' → logprob: -10.019369125366211
    10. '[' → logprob: -10.144369125366211

Token 99: ' map' (ID: 4014)
  Prédit: 'map'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'map' → logprob: -0.010325299575924873
    2. ' map' → logprob: -5.5103254318237305
    3. 'chain' → logprob: -6.3853254318237305
    4. 'range' → logprob: -6.6353254318237305
    5. '(map' → logprob: -6.7603254318237305
    6. '   ' → logprob: -6.8853254318237305
    7. 'list' → logprob: -7.8853254318237305
    8. '  ' → logprob: -9.13532543182373
    9. ' ' → logprob: -9.63532543182373
    10. 'imap' → logprob: -9.63532543182373

Token 100: '(item' (ID: 10016)
  Prédit: '(item'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(item' → logprob: -0.02337929606437683
    2. 'item' → logprob: -3.773379325866699
    3. ' item' → logprob: -10.6483793258667
    4. '(lambda' → logprob: -10.7733793258667
    5. '(map' → logprob: -11.1483793258667
    6. '(chain' → logprob: -11.1483793258667
    7. '   ' → logprob: -11.2733793258667
    8. '(' → logprob: -11.5233793258667
    9. '(range' → logprob: -11.7733793258667
    10. 'chain' → logprob: -11.8983793258667

Token 101: 'getter' (ID: 132812)
  Prédit: 'getter'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'getter' → logprob: -3.5358694731257856e-05
    2. 'getitem' → logprob: -10.625035285949707
    3. 'get' → logprob: -11.500035285949707
    4. 'grab' → logprob: -15.500035285949707
    5. 'setter' → logprob: -15.875035285949707
    6. 'gett' → logprob: -16.125036239624023
    7. ' getter' → logprob: -16.500036239624023
    8. 'g' → logprob: -16.750036239624023
    9. '(get' → logprob: -16.750036239624023
    10. 'got' → logprob: -16.875036239624023

Token 102: '(' (ID: 7)
  Prédit: '('
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(' → logprob: -0.0076592774130403996
    2. '1' → logprob: -4.882659435272217
    3. '   ' → logprob: -10.757658958435059
    4. ',' → logprob: -11.757658958435059
    5. '('' → logprob: -11.882658958435059
    6. ' (' → logprob: -12.007658958435059
    7. ')' → logprob: -13.507658958435059
    8. '    ' → logprob: -13.757658958435059
    9. '```' → logprob: -13.882658958435059
    10. ' ' → logprob: -14.257658958435059

Token 103: '1' (ID: 16)
  Prédit: '1'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '1' → logprob: -2.9160102712921798e-05
    2. ' ' → logprob: -11.375029563903809
    3. '   ' → logprob: -11.500029563903809
    4. '0' → logprob: -13.125029563903809
    5. '(' → logprob: -13.875029563903809
    6. '  ' → logprob: -14.250029563903809
    7. '
' → logprob: -14.625029563903809
    8. '```' → logprob: -14.625029563903809
    9. '    ' → logprob: -14.812529563903809
    10. '       ' → logprob: -15.000029563903809

Token 104: '),' (ID: 936)
  Prédit: ','
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ',' → logprob: -0.010279876179993153
    2. '),' → logprob: -5.510279655456543
    3. ')(' → logprob: -5.635279655456543
    4. '(seq' → logprob: -6.385279655456543
    5. '(),' → logprob: -8.010279655456543
    6. ')' → logprob: -8.635279655456543
    7. ' ,' → logprob: -9.010279655456543
    8. ')))' → logprob: -9.135279655456543
    9. '   ' → logprob: -9.635279655456543
    10. '))))' → logprob: -10.635279655456543

Token 105: ' seq' (ID: 26775)
  Prédit: 'seq'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'seq' → logprob: -0.010492943227291107
    2. ' seq' → logprob: -4.63549280166626
    3. '(seq' → logprob: -7.26049280166626
    4. '   ' → logprob: -10.510493278503418
    5. ' ' → logprob: -13.135493278503418
    6. '  ' → logprob: -14.010493278503418
    7. 'sequence' → logprob: -14.010493278503418
    8. 'se' → logprob: -14.135493278503418
    9. 's' → logprob: -14.510493278503418
    10. 'sorted' → logprob: -15.385493278503418

Token 106: '))))
' (ID: 55084)
  Prédit: '))))'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '))))' → logprob: -0.3559838533401489
    2. ')))' → logprob: -1.230983853340149
    3. ')' → logprob: -5.480983734130859
    4. '))' → logprob: -6.105983734130859
    5. '))))
' → logprob: -7.355983734130859
    6. ' ' → logprob: -8.98098373413086
    7. ')))
' → logprob: -9.23098373413086
    8. '))))

' → logprob: -9.85598373413086
    9. ' ))' → logprob: -9.98098373413086
    10. '   ' → logprob: -10.10598373413086

Token 107: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.0024649559054523706
    2. ')' → logprob: -6.252464771270752
    3. '    
' → logprob: -7.877464771270752
    4. '<|end|>' → logprob: -9.62746524810791
    5. '
' → logprob: -10.87746524810791
    6. 'if' → logprob: -11.50246524810791
    7. '(' → logprob: -11.62746524810791
    8. 'return' → logprob: -12.25246524810791
    9. '       ' → logprob: -12.37746524810791
    10. ':' → logprob: -12.37746524810791

Token 108: ' print' (ID: 2123)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.007566753309220076
    2. 'if' → logprob: -5.632566928863525
    3. ')' → logprob: -5.882566928863525
    4. ' if' → logprob: -7.507566928863525
    5. 'print' (adapté à ' print') → logprob: -8.382566452026367
    6. 'return' → logprob: -8.882566452026367
    7. '    
' → logprob: -9.382566452026367
    8. '
' → logprob: -9.507566452026367
    9. '<|end|>' → logprob: -10.632566452026367
    10. ')
' → logprob: -11.882566452026367

Token 109: '(next' (ID: 28757)
  Prédit: '(ver'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '(ver' → logprob: -0.6351892352104187
    2. '("' → logprob: -0.8851892352104187
    3. '('' → logprob: -2.8851892948150635
    4. '(' → logprob: -6.510189056396484
    5. '(("' → logprob: -9.135189056396484
    6. '(('' → logprob: -10.385189056396484
    7. '(int' → logprob: -11.135189056396484
    8. '(""' → logprob: -11.760189056396484
    9. '()' → logprob: -11.760189056396484
    10. '((' → logprob: -11.885189056396484

Token 110: '(chain' (ID: 124348)
  Prédit: '(iter'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '(iter' → logprob: -0.05659254640340805
    2. '(ver' → logprob: -3.3065924644470215
    3. '(' → logprob: -4.9315924644470215
    4. '(x' → logprob: -5.0565924644470215
    5. '(filter' → logprob: -6.9315924644470215
    6. '(v' → logprob: -7.5565924644470215
    7. '(i' → logprob: -7.6815924644470215
    8. '(gr' → logprob: -7.9315924644470215
    9. '((' → logprob: -8.05659294128418
    10. '(range' → logprob: -8.18159294128418

Token 111: '(('' (ID: 122195)
  Prédit: '(s'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '(s' → logprob: -0.7173235416412354
    2. '(iter' → logprob: -1.0923235416412354
    3. '(range' → logprob: -2.7173235416412354
    4. '((' → logprob: -2.7173235416412354
    5. '([' → logprob: -3.8423235416412354
    6. '(seq' → logprob: -4.717323303222656
    7. '(map' → logprob: -5.342323303222656
    8. '(' → logprob: -5.592323303222656
    9. '(re' → logprob: -6.842323303222656
    10. '(([' → logprob: -6.842323303222656

Token 112: 'No' (ID: 3160)
  Prédit: 'OK'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'OK' → logprob: -1.147765040397644
    2. 'AC' → logprob: -1.522765040397644
    3. 'NO' → logprob: -1.897765040397644
    4. 'No' → logprob: -3.1477651596069336
    5. 'YES' → logprob: -3.3977651596069336
    6. 'Accepted' → logprob: -4.022765159606934
    7. 'ok' → logprob: -4.210265159606934
    8. 'Yes' → logprob: -4.460265159606934
    9. 'Wrong' → logprob: -4.585265159606934
    10. 'Ok' → logprob: -4.772765159606934

Token 113: '',' (ID: 787)
  Prédit: '','
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '',' → logprob: -0.03382942080497742
    2. '','' → logprob: -3.4088294506073
    3. ''),' → logprob: -9.533829689025879
    4. '(',' → logprob: -10.158829689025879
    5. ' ',' → logprob: -10.158829689025879
    6. 'Yes' → logprob: -11.533829689025879
    7. ''' → logprob: -12.033829689025879
    8. '',
' → logprob: -12.283829689025879
    9. '(','' → logprob: -12.908829689025879
    10. '',(' → logprob: -13.408829689025879

Token 114: '),' (ID: 936)
  Prédit: '''
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ''' → logprob: -0.6351809501647949
    2. ' '' → logprob: -0.7601809501647949
    3. ' ('' → logprob: -6.760180950164795
    4. '('' → logprob: -7.510180950164795
    5. '   ' → logprob: -7.885180950164795
    6. ' ' → logprob: -8.510181427001953
    7. ' ' → logprob: -9.510181427001953
    8. '       ' → logprob: -10.385181427001953
    9. '    ' → logprob: -10.510181427001953
    10. ' 
' → logprob: -10.510181427001953

Token 115: '('' (ID: 706)
  Prédit: '(''
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '('' → logprob: -0.001118903630413115
    2. '['' → logprob: -7.001119136810303
    3. '   ' → logprob: -9.376118659973145
    4. ' ('' → logprob: -10.751118659973145
    5. ''' → logprob: -10.876118659973145
    6. 'iter' → logprob: -11.251118659973145
    7. '(('' → logprob: -11.626118659973145
    8. '(' → logprob: -11.876118659973145
    9. 'filter' → logprob: -12.001118659973145
    10. '(['' → logprob: -12.126118659973145

Token 116: 'Yes' (ID: 13022)
  Prédit: 'Yes'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'Yes' → logprob: -0.0021857109386473894
    2. ' Yes' → logprob: -6.502185821533203
    3. 'No' → logprob: -8.752185821533203
    4. 'Ye' → logprob: -8.752185821533203
    5. 'Ok' → logprob: -9.127185821533203
    6. 'OK' → logprob: -10.127185821533203
    7. 'Okay' → logprob: -10.252185821533203
    8. ' ' → logprob: -10.752185821533203
    9. ''' → logprob: -11.127185821533203
    10. 'YES' → logprob: -11.252185821533203

Token 117: '',' (ID: 787)
  Prédit: '','
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '',' → logprob: -0.02184847556054592
    2. ''),' → logprob: -4.396848678588867
    3. '','' → logprob: -5.271848678588867
    4. '),' → logprob: -6.521848678588867
    5. '')))' → logprob: -6.521848678588867
    6. ''))' → logprob: -7.146848678588867
    7. ',' → logprob: -8.771848678588867
    8. ','' → logprob: -10.021848678588867
    9. '(',' → logprob: -10.021848678588867
    10. ''),'' → logprob: -10.146848678588867

Token 118: ')))' (ID: 15975)
  Prédit: ')))'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')))' → logprob: -0.1425504982471466
    2. '))))' → logprob: -2.142550468444824
    3. '))' → logprob: -4.392550468444824
    4. '),' → logprob: -6.517550468444824
    5. ')' → logprob: -7.267550468444824
    6. '())))' → logprob: -8.392550468444824
    7. '))))
' → logprob: -8.767550468444824
    8. ' ' → logprob: -9.142550468444824
    9. ',' → logprob: -9.517550468444824
    10. ')))
' → logprob: -9.642550468444824

Token 119: ' if' (ID: 538)
  Prédit: ' if'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' if' → logprob: -0.7939121127128601
    2. ',' → logprob: -1.1689121723175049
    3. 'if' → logprob: -1.9189121723175049
    4. '(' → logprob: -2.668912172317505
    5. ')' → logprob: -5.168911933898926
    6. '(','' → logprob: -5.168911933898926
    7. '()' → logprob: -6.043911933898926
    8. ',(' → logprob: -6.168911933898926
    9. '(if' → logprob: -7.168911933898926
    10. '(ver' → logprob: -7.293911933898926

Token 120: ' not' (ID: 625)
  Prédit: 'ver'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'ver' → logprob: -0.08570391684770584
    2. ' verdict' → logprob: -2.5857038497924805
    3. '   ' → logprob: -5.8357038497924805
    4. 'not' → logprob: -6.2107038497924805
    5. '(ver' → logprob: -7.5857038497924805
    6. '  ' → logprob: -7.8357038497924805
    7. 'verd' → logprob: -7.9607038497924805
    8. ' not' → logprob: -8.46070384979248
    9. ' ' → logprob: -8.71070384979248
    10. ' ver' → logprob: -9.21070384979248

Token 121: ' verdict' (ID: 75722)
  Prédit: 'ver'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'ver' → logprob: -0.062453173100948334
    2. ' verdict' → logprob: -2.812453269958496
    3. 'verd' → logprob: -8.312453269958496
    4. '(ver' → logprob: -8.687453269958496
    5. '   ' → logprob: -10.562453269958496
    6. ' ver' → logprob: -10.812453269958496
    7. '  ' → logprob: -12.187453269958496
    8. ' ' → logprob: -12.437453269958496
    9. 'verb' → logprob: -12.437453269958496
    10. ' verd' → logprob: -12.812453269958496

Token 122: ' else' (ID: 1203)
  Prédit: ' else'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' else' → logprob: -0.08538775891065598
    2. ')' → logprob: -3.085387706756592
    3. 'else' → logprob: -3.335387706756592
    4. ',' → logprob: -8.21038818359375
    5. ' )' → logprob: -8.58538818359375
    6. '   ' → logprob: -10.21038818359375
    7. '    ' → logprob: -11.46038818359375
    8. ' ' → logprob: -12.21038818359375
    9. '))' → logprob: -12.58538818359375
    10. '	else' → logprob: -12.71038818359375

Token 123: ' next' (ID: 2613)
  Prédit: '''
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ''' → logprob: -0.09311950206756592
    2. ' '' → logprob: -2.5931196212768555
    3. '('' → logprob: -4.9681196212768555
    4. '"' → logprob: -5.7181196212768555
    5. ' next' → logprob: -6.4681196212768555
    6. 'next' → logprob: -6.8431196212768555
    7. 'Yes' → logprob: -7.7181196212768555
    8. ' Yes' → logprob: -8.468119621276855
    9. '   ' → logprob: -8.718119621276855
    10. ' ' → logprob: -9.093119621276855

Token 124: '(chain' (ID: 124348)
  Prédit: '(chain'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(chain' → logprob: -0.3729788362979889
    2. '(('' → logprob: -1.2479788064956665
    3. '(' → logprob: -4.247978687286377
    4. '('' → logprob: -4.747978687286377
    5. '((' → logprob: -7.122978687286377
    6. '(("' → logprob: -8.747979164123535
    7. ' (' → logprob: -9.247979164123535
    8. 'chain' → logprob: -9.622979164123535
    9. '(['' → logprob: -10.372979164123535
    10. '(space' → logprob: -10.997979164123535

Token 125: '(('' (ID: 122195)
  Prédit: '((''
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(('' → logprob: -0.0055869752541184425
    2. ' (' → logprob: -5.255587100982666
    3. ' ('' → logprob: -8.255586624145508
    4. '('' → logprob: -9.755586624145508
    5. '((' → logprob: -11.130586624145508
    6. '(' → logprob: -11.755586624145508
    7. '=('' → logprob: -12.380586624145508
    8. ' ' → logprob: -12.505586624145508
    9. '(['' → logprob: -12.630586624145508
    10. '   ' → logprob: -14.505586624145508

Token 126: 'Yes' (ID: 13022)
  Prédit: 'Yes'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'Yes' → logprob: -0.0003839597338810563
    2. ''' → logprob: -8.875384330749512
    3. '('' → logprob: -9.000384330749512
    4. 'No' → logprob: -9.875384330749512
    5. 'Ye' → logprob: -10.250384330749512
    6. ' Yes' → logprob: -10.625384330749512
    7. 'Y' → logprob: -12.500384330749512
    8. '(' → logprob: -13.625384330749512
    9. 'YES' → logprob: -14.250384330749512
    10. '','' → logprob: -14.250384330749512

Token 127: '',' (ID: 787)
  Prédit: '','
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '',' → logprob: -0.003252342576161027
    2. '','' → logprob: -5.7532525062561035
    3. ',' → logprob: -10.253252029418945
    4. '(',' → logprob: -10.628252029418945
    5. '(','' → logprob: -11.753252029418945
    6. ','' → logprob: -12.878252029418945
    7. '',(' → logprob: -13.878252029418945
    8. '')))' → logprob: -14.003252029418945
    9. ' ',' → logprob: -14.253252029418945
    10. ',),' → logprob: -14.253252029418945

Token 128: '),' (ID: 936)
  Prédit: '),'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '),' → logprob: -0.08145856112241745
    2. ',),' → logprob: -3.456458568572998
    3. '),'' → logprob: -4.081458568572998
    4. '('' → logprob: -4.206458568572998
    5. ')))' → logprob: -5.456458568572998
    6. ',' → logprob: -5.581458568572998
    7. ''),' → logprob: -6.456458568572998
    8. '','' → logprob: -6.581458568572998
    9. '(','' → logprob: -6.831458568572998
    10. '),(' → logprob: -6.956458568572998

Token 129: ')))
' (ID: 12562)
  Prédit: '(''
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '('' → logprob: -5.061676347395405e-05
    2. ' ('' → logprob: -10.12505054473877
    3. '(('' → logprob: -11.50005054473877
    4. '=('' → logprob: -16.000051498413086
    5. '(No' → logprob: -16.500051498413086
    6. '(' → logprob: -16.625051498413086
    7. '   ' → logprob: -17.000051498413086
    8. ''' → logprob: -17.375051498413086
    9. '('',' → logprob: -18.125051498413086
    10. '  ' → logprob: -18.750051498413086

Token 130: 'main' (ID: 7731)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ')' → logprob: -0.524638831615448
    2. '<|end|>' → logprob: -0.899638831615448
    3. '()' → logprob: -7.149638652801514
    4. '<|end|>' → logprob: -8.399639129638672
    5. '```' → logprob: -9.149639129638672
    6. '())' → logprob: -9.274639129638672
    7. '#' → logprob: -9.524639129638672
    8. '
' → logprob: -10.024639129638672
    9. '(' → logprob: -10.149639129638672
    10. ' ' → logprob: -10.399639129638672

Token 131: '()' (ID: 416)
  Prédit: '()'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '()' → logprob: -0.023385819047689438
    2. '(' → logprob: -3.773385763168335
    3. '())' → logprob: -10.023386001586914
    4. '()">' → logprob: -10.773386001586914
    5. '()>' → logprob: -11.273386001586914
    6. '();' → logprob: -11.523386001586914
    7. '(
' → logprob: -11.648386001586914
    8. '<|end|>' → logprob: -11.898386001586914
    9. '()<' → logprob: -12.023386001586914
    10. '().' → logprob: -12.273386001586914


RÉSUMÉ:
--------------------------------------------------------------------------------
Total des tokens analysés: 129
Tokens correctement prédits (1ère position, stricte): 62
Tokens correctement prédits (1ère position, avec adaptation): 62
Tokens correctement prédits (top 10): 101
Précision stricte (1ère position): 48.06%
Précision adaptée (1ère position): 48.06%
Précision (top 10): 78.29%
================================================================================
