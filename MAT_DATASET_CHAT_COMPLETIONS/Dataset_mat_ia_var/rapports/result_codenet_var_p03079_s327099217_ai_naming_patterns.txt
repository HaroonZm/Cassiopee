================================================================================
ANALYSE DE PRÉDICTION TOKEN PAR TOKEN (BATCH API)
Date: 2025-06-04 20:03:53
Modèle de tokenisation: gpt-4o-mini
================================================================================

SCRIPT ANALYSÉ:
--------------------------------------------------------------------------------
values_list = list(map(int, input().split()))
if values_list[0] == values_list[1] == values_list[2]:
    print("Yes")
else:
    print("No")
--------------------------------------------------------------------------------

RÉSULTATS D'ANALYSE TOKEN PAR TOKEN:
--------------------------------------------------------------------------------
Token 0: 'values' (ID: 7222)
  → Token d'amorce (pas de prédiction)

Token 1: '_list' (ID: 4162)
  → Token d'amorce (pas de prédiction)

Token 2: ' =' (ID: 314)
  → Token d'amorce (pas de prédiction)

Token 3: ' list' (ID: 1562)
  Prédit: '['
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '[' → logprob: -0.7066100239753723
    2. ' [' → logprob: -1.3316099643707275
    3. ' []' → logprob: -1.4566099643707275
    4. '[]' → logprob: -4.831610202789307
    5. ' ' → logprob: -6.456610202789307
    6. ' [
' → logprob: -11.206609725952148
    7. '[:]' → logprob: -11.581609725952148
    8. ' [

' → logprob: -11.956609725952148
    9. ' [[]' → logprob: -12.081609725952148
    10. '  ' → logprob: -12.456609725952148

Token 4: '(map' (ID: 16946)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '(' → logprob: -0.008790414780378342
    2. '[' → logprob: -5.383790493011475
    3. '(values' → logprob: -6.508790493011475
    4. '```' → logprob: -6.883790493011475
    5. '.' → logprob: -7.633790493011475
    6. '_values' → logprob: -7.883790493011475
    7. '.values' → logprob: -7.883790493011475
    8. ')' → logprob: -9.383790016174316
    9. '[(' → logprob: -9.633790016174316
    10. '(
' → logprob: -10.008790016174316

Token 5: '(int' (ID: 2742)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(' → logprob: -0.22837486863136292
    2. '(lambda' → logprob: -1.6033748388290405
    3. '(str' → logprob: -6.72837495803833
    4. '(int' → logprob: -7.47837495803833
    5. '(eval' → logprob: -8.228374481201172
    6. ')' → logprob: -8.353374481201172
    7. '(values' → logprob: -8.478374481201172
    8. '(()' → logprob: -9.728374481201172
    9. '(`' → logprob: -9.853374481201172
    10. '(
' → logprob: -10.103374481201172

Token 6: ',' (ID: 11)
  Prédit: '(values'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '(values' → logprob: -0.08766765147447586
    2. '(' → logprob: -2.58766770362854
    3. '))' → logprob: -5.337667465209961
    4. ')' → logprob: -6.087667465209961
    5. '(user' → logprob: -7.712667465209961
    6. '(input' → logprob: -8.712667465209961
    7. '(value' → logprob: -8.837667465209961
    8. 'values' → logprob: -9.087667465209961
    9. '(range' → logprob: -9.212667465209961
    10. '(token' → logprob: -9.837667465209961

Token 7: ' input' (ID: 3422)
  Prédit: 'input'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'input' → logprob: -0.12512332201004028
    2. 'values' → logprob: -2.2501232624053955
    3. ' input' → logprob: -4.625123500823975
    4. ' values' → logprob: -6.875123500823975
    5. 'user' → logprob: -7.750123500823975
    6. ')' → logprob: -8.375123023986816
    7. '(input' → logprob: -9.000123023986816
    8. 'numbers' → logprob: -9.000123023986816
    9. '(values' → logprob: -9.000123023986816
    10. 'iter' → logprob: -9.625123023986816

Token 8: '().' (ID: 1454)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '(' → logprob: -0.030227111652493477
    2. '('' → logprob: -5.030227184295654
    3. '()))' → logprob: -5.030227184295654
    4. '(""))' → logprob: -6.155227184295654
    5. '(()' → logprob: -6.155227184295654
    6. ')' → logprob: -6.280227184295654
    7. '))' → logprob: -6.655227184295654
    8. '())' → logprob: -6.780227184295654
    9. '()' → logprob: -6.905227184295654
    10. '(token' → logprob: -7.030227184295654

Token 9: 'split' (ID: 13627)
  Prédit: 'split'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'split' → logprob: -0.0019833561964333057
    2. 'strip' → logprob: -6.251983165740967
    3. ' split' → logprob: -10.251983642578125
    4. 'rstrip' → logprob: -10.876983642578125
    5. 'replace' → logprob: -15.501983642578125
    6. '(split' → logprob: -16.001983642578125
    7. 'spl' → logprob: -16.251983642578125
    8. ' strip' → logprob: -16.251983642578125
    9. ')' → logprob: -17.501983642578125
    10. 's' → logprob: -17.876983642578125

Token 10: '()))
' (ID: 24521)
  Prédit: '()))'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '()))' → logprob: -0.5311871767044067
    2. '())' → logprob: -1.5311871767044067
    3. ')' → logprob: -2.781187057495117
    4. '())))' → logprob: -3.031187057495117
    5. ')))' → logprob: -3.531187057495117
    6. '()' → logprob: -3.781187057495117
    7. '))' → logprob: -3.781187057495117
    8. '(' → logprob: -4.656187057495117
    9. '```' → logprob: -7.906187057495117
    10. '()));' → logprob: -8.656187057495117

Token 11: 'if' (ID: 366)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ')' → logprob: -0.9275587797164917
    2. '.' → logprob: -1.1775587797164917
    3. '[' → logprob: -1.3025587797164917
    4. '```' → logprob: -5.302558898925781
    5. '+' → logprob: -5.677558898925781
    6. '#' → logprob: -5.802558898925781
    7. 'print' → logprob: -6.302558898925781
    8. '(' → logprob: -6.302558898925781
    9. '[
' → logprob: -6.802558898925781
    10. '\n' → logprob: -7.052558898925781

Token 12: ' values' (ID: 4824)
  Prédit: ' values'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' values' → logprob: -0.0037973460275679827
    2. ' len' → logprob: -6.12879753112793
    3. 'values' → logprob: -7.00379753112793
    4. ' not' → logprob: -7.37879753112793
    5. ' ' → logprob: -10.25379753112793
    6. '	values' → logprob: -11.50379753112793
    7. 'len' → logprob: -11.62879753112793
    8. ' value' → logprob: -11.75379753112793
    9. '_values' → logprob: -12.37879753112793
    10. ' ' → logprob: -12.37879753112793

Token 13: '_list' (ID: 4162)
  Prédit: '['
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '[' → logprob: -0.15448957681655884
    2. '_list' → logprob: -2.279489517211914
    3. '_' → logprob: -3.904489517211914
    4. '_values' → logprob: -5.154489517211914
    5. '[]' → logprob: -5.404489517211914
    6. '()' → logprob: -6.279489517211914
    7. '[:]' → logprob: -6.904489517211914
    8. ' ==' → logprob: -7.154489517211914
    9. ' ' → logprob: -7.279489517211914
    10. '.' → logprob: -7.404489517211914

Token 14: '[' (ID: 58)
  Prédit: '['
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '[' → logprob: -0.008634308353066444
    2. ':' → logprob: -5.258634090423584
    3. '.' → logprob: -6.883634090423584
    4. '[:]' → logprob: -7.633634090423584
    5. '```' → logprob: -7.758634090423584
    6. ' and' → logprob: -8.008634567260742
    7. '>' → logprob: -8.258634567260742
    8. '[]' → logprob: -8.633634567260742
    9. ' ==' → logprob: -8.883634567260742
    10. '[-' → logprob: -9.508634567260742

Token 15: '0' (ID: 15)
  Prédit: '0'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '0' → logprob: -0.0004923873930238187
    2. ' ' → logprob: -7.625492572784424
    3. ')' → logprob: -12.875492095947266
    4. '1' → logprob: -13.375492095947266
    5. ']' → logprob: -16.875492095947266
    6. '[' → logprob: -17.000492095947266
    7. '2' → logprob: -17.125492095947266
    8. '-' → logprob: -17.625492095947266
    9. ' ==' → logprob: -17.687992095947266
    10. '   ' → logprob: -17.812992095947266

Token 16: ']' (ID: 60)
  Prédit: ' >'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' >' → logprob: -0.10122740268707275
    2. ' ==' → logprob: -2.851227283477783
    3. ' <' → logprob: -4.851227283477783
    4. ' )' → logprob: -4.851227283477783
    5. ' >=' → logprob: -4.976227283477783
    6. ')' → logprob: -5.351227283477783
    7. '>' → logprob: -5.351227283477783
    8. ' <=' → logprob: -5.851227283477783
    9. ' ' → logprob: -6.226227283477783
    10. '==' → logprob: -6.976227283477783

Token 17: ' ==' (ID: 951)
  Prédit: ' >'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' >' → logprob: -0.11101584136486053
    2. ' ==' → logprob: -2.361015796661377
    3. ' <' → logprob: -5.486015796661377
    4. '>' → logprob: -5.861015796661377
    5. ' !=' → logprob: -6.861015796661377
    6. ' >=' → logprob: -6.861015796661377
    7. ' <=' → logprob: -7.611015796661377
    8. ' ' → logprob: -7.736015796661377
    9. '==' → logprob: -8.111016273498535
    10. ' %' → logprob: -8.861016273498535

Token 18: ' values' (ID: 4824)
  Prédit: '0'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '0' → logprob: -0.6863427758216858
    2. ' ' → logprob: -1.061342716217041
    3. '1' → logprob: -2.061342716217041
    4. 'values' → logprob: -4.561342716217041
    5. ''' → logprob: -5.311342716217041
    6. ' values' → logprob: -6.061342716217041
    7. '10' → logprob: -6.311342716217041
    8. '5' → logprob: -6.686342716217041
    9. ' '' → logprob: -7.436342716217041
    10. '2' → logprob: -7.561342716217041

Token 19: '_list' (ID: 4162)
  Prédit: '_list'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_list' → logprob: -8.160971628967673e-05
    2. '[_' → logprob: -10.125082015991211
    3. '[' → logprob: -10.750082015991211
    4. '_' → logprob: -11.375082015991211
    5. 'List' → logprob: -13.750082015991211
    6. '```' → logprob: -13.875082015991211
    7. '[i' → logprob: -14.125082015991211
    8. '_[' → logprob: -14.250082015991211
    9. ''_' → logprob: -14.375082015991211
    10. '_values' → logprob: -14.625082015991211

Token 20: '[' (ID: 58)
  Prédit: '['
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '[' → logprob: -6.921253225300461e-05
    2. '```' → logprob: -10.375069618225098
    3. ' [' → logprob: -11.250069618225098
    4. '[-' → logprob: -11.250069618225098
    5. ''[' → logprob: -12.500069618225098
    6. '1' → logprob: -12.875069618225098
    7. '\[' → logprob: -13.375069618225098
    8. '``' → logprob: -14.625069618225098
    9. '][' → logprob: -14.875069618225098
    10. '__[' → logprob: -15.000069618225098

Token 21: '1' (ID: 16)
  Prédit: '1'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '1' → logprob: -0.08680251985788345
    2. '0' → logprob: -2.9618024826049805
    3. ' ' → logprob: -3.4618024826049805
    4. '-' → logprob: -10.71180248260498
    5. '2' → logprob: -11.58680248260498
    6. '   ' → logprob: -12.71180248260498
    7. ' -' → logprob: -12.96180248260498
    8. '  ' → logprob: -13.39930248260498
    9. ']' → logprob: -13.71180248260498
    10. '```' → logprob: -14.02430248260498

Token 22: ']' (ID: 60)
  Prédit: '):'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '):' → logprob: -0.056842587888240814
    2. ')' → logprob: -2.931842565536499
    3. ' ):' → logprob: -6.681842803955078
    4. ':' → logprob: -7.556842803955078
    5. ' )' → logprob: -9.681842803955078
    6. ' and' → logprob: -10.681842803955078
    7. '):
' → logprob: -10.931842803955078
    8. '==' → logprob: -11.056842803955078
    9. ']:' → logprob: -11.556842803955078
    10. ',' → logprob: -11.681842803955078

Token 23: ' ==' (ID: 951)
  Prédit: ':'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ':' → logprob: -3.023293538717553e-05
    2. ' :' → logprob: -11.125030517578125
    3. ':**' → logprob: -12.125030517578125
    4. ' and' → logprob: -12.625030517578125
    5. ':
' → logprob: -13.000030517578125
    6. '):' → logprob: -13.625030517578125
    7. '>:' → logprob: -13.875030517578125
    8. '':' → logprob: -14.875030517578125
    9. '>' → logprob: -15.000030517578125
    10. 'and' → logprob: -15.125030517578125

Token 24: ' values' (ID: 4824)
  Prédit: ' values'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' values' → logprob: -0.12724168598651886
    2. 'values' → logprob: -2.127241611480713
    3. '0' → logprob: -8.627242088317871
    4. ' ' → logprob: -9.377242088317871
    5. '1' → logprob: -11.752242088317871
    6. ' True' → logprob: -11.877242088317871
    7. '	values' → logprob: -11.877242088317871
    8. '(values' → logprob: -12.127242088317871
    9. '3' → logprob: -12.627242088317871
    10. '_values' → logprob: -12.877242088317871

Token 25: '_list' (ID: 4162)
  Prédit: '_list'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_list' → logprob: -9.088346359931165e-07
    2. '_' → logprob: -15.375000953674316
    3. 'ist' → logprob: -15.625000953674316
    4. 'List' → logprob: -16.0
    5. '[' → logprob: -16.125
    6. '_lists' → logprob: -16.75
    7. '_l' → logprob: -17.375
    8. 'list' → logprob: -18.0
    9. '```' → logprob: -18.0
    10. '_List' → logprob: -18.0

Token 26: '[' (ID: 58)
  Prédit: '['
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '[' → logprob: -3.9650025428272784e-05
    2. '```' → logprob: -10.750040054321289
    3. ''[' → logprob: -12.250040054321289
    4. '[-' → logprob: -12.500040054321289
    5. '__[' → logprob: -13.125040054321289
    6. '\[' → logprob: -13.375040054321289
    7. ' [' → logprob: -14.125040054321289
    8. '"[' → logprob: -14.250040054321289
    9. '2' → logprob: -14.500040054321289
    10. '>[' → logprob: -14.625040054321289

Token 27: '2' (ID: 17)
  Prédit: '2'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '2' → logprob: -0.0014163076411932707
    2. '0' → logprob: -6.626416206359863
    3. '1' → logprob: -10.251416206359863
    4. '-' → logprob: -10.751416206359863
    5. ' ' → logprob: -10.751416206359863
    6. '3' → logprob: -12.438916206359863
    7. '   ' → logprob: -13.126416206359863
    8. '```' → logprob: -13.188916206359863
    9. ']' → logprob: -13.813916206359863
    10. '  ' → logprob: -14.126416206359863

Token 28: ']:
' (ID: 22152)
  Prédit: '):'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '):' → logprob: -0.03520321846008301
    2. ')' → logprob: -3.785203218460083
    3. ' ):' → logprob: -4.535202980041504
    4. ':' → logprob: -7.035202980041504
    5. ' )' → logprob: -8.410202980041504
    6. '):
' → logprob: -11.660202980041504
    7. ' :' → logprob: -12.035202980041504
    8. ' ' → logprob: -12.160202980041504
    9. ']:' → logprob: -12.160202980041504
    10. '>' → logprob: -12.410202980041504

Token 29: '   ' (ID: 271)
  Prédit: ':'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ':' → logprob: -0.09197723865509033
    2. ':
' → logprob: -2.466977119445801
    3. '   ' → logprob: -6.341977119445801
    4. ' print' → logprob: -7.466977119445801
    5. 'print' → logprob: -7.591977119445801
    6. ' :
' → logprob: -9.5919771194458
    7. ' :' → logprob: -9.8419771194458
    8. ':
' → logprob: -11.4669771194458
    9. ',' → logprob: -11.8419771194458
    10. '	print' → logprob: -11.8419771194458

Token 30: ' print' (ID: 2123)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.23398257791996002
    2. ' print' → logprob: -1.8589825630187988
    3. 'print' (adapté à ' print') → logprob: -2.983982563018799
    4. '       ' → logprob: -6.858982563018799
    5. '\n' → logprob: -7.733982563018799
    6. '    ' → logprob: -7.983982563018799
    7. '\' → logprob: -9.358983039855957
    8. '    
' → logprob: -9.608983039855957
    9. ' pass' → logprob: -9.858983039855957
    10. ' ' → logprob: -10.733983039855957

Token 31: '("' (ID: 568)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(' → logprob: -0.04954962432384491
    2. '("' → logprob: -3.7995495796203613
    3. '("("' → logprob: -4.424549579620361
    4. '(values' → logprob: -4.674549579620361
    5. '('' → logprob: -5.549549579620361
    6. '(True' → logprob: -7.549549579620361
    7. '()' → logprob: -9.79955005645752
    8. '("")' → logprob: -9.79955005645752
    9. '("(' → logprob: -10.54955005645752
    10. '(False' → logprob: -10.92455005645752

Token 32: 'Yes' (ID: 13022)
  Prédit: 'Yes'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'Yes' → logprob: -0.9744023084640503
    2. 'YES' → logprob: -1.4744023084640503
    3. 'Equal' → logprob: -1.5994023084640503
    4. 'Three' → logprob: -2.72440242767334
    5. 'Draw' → logprob: -3.59940242767334
    6. '3' → logprob: -3.97440242767334
    7. 'E' → logprob: -3.97440242767334
    8. 'All' → logprob: -4.84940242767334
    9. 'True' → logprob: -4.84940242767334
    10. 'Equ' → logprob: -4.97440242767334

Token 33: '")
' (ID: 1896)
  Prédit: '")'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '")' → logprob: -0.0003930192324332893
    2. ')")' → logprob: -8.50039291381836
    3. ')' → logprob: -8.62539291381836
    4. '")
' → logprob: -12.12539291381836
    5. '!")' → logprob: -12.62539291381836
    6. '\")' → logprob: -15.12539291381836
    7. '”)' → logprob: -15.12539291381836
    8. '}")' → logprob: -15.75039291381836
    9. '"))' → logprob: -15.87539291381836
    10. '")
' → logprob: -16.00039291381836

Token 34: 'else' (ID: 2807)
  Prédit: 'else'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'else' → logprob: -0.04758723825216293
    2. 'elif' → logprob: -3.2975871562957764
    3. ' else' → logprob: -4.6725873947143555
    4. ' elif' → logprob: -9.297587394714355
    5. '<|end|>' → logprob: -10.172587394714355
    6. '```' → logprob: -11.797587394714355
    7. ')' → logprob: -12.797587394714355
    8. '_else' → logprob: -12.797587394714355
    9. 'el' → logprob: -13.422587394714355
    10. 'e' → logprob: -14.047587394714355

Token 35: ':
' (ID: 734)
  Prédit: ':'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ':' → logprob: -4.191489642835222e-05
    2. ':
' → logprob: -10.125041961669922
    3. ' :' → logprob: -13.875041961669922
    4. '   ' → logprob: -14.250041961669922
    5. '):' → logprob: -16.500041961669922
    6. ':

' → logprob: -17.375041961669922
    7. ':return' → logprob: -17.625041961669922
    8. '():' → logprob: -17.750041961669922
    9. ':def' → logprob: -17.875041961669922
    10. ':
' → logprob: -18.250041961669922

Token 36: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.0012505853082984686
    2. ' print' → logprob: -6.876250743865967
    3. '    ' → logprob: -9.001250267028809
    4. 'print' → logprob: -10.376250267028809
    5. ' False' → logprob: -11.001250267028809
    6. ' True' → logprob: -11.126250267028809
    7. ' ' → logprob: -12.251250267028809
    8. '    
' → logprob: -12.251250267028809
    9. '<|end|>' → logprob: -12.751250267028809
    10. ' if' → logprob: -13.001250267028809

Token 37: ' print' (ID: 2123)
  Prédit: 'print'
  Correct (stricte): False
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'print' (adapté à ' print') → logprob: -0.448727548122406
    2. ' print' → logprob: -1.1987276077270508
    3. '   ' → logprob: -2.823727607727051
    4. '    ' → logprob: -7.823727607727051
    5. '"' → logprob: -9.07372760772705
    6. ' False' → logprob: -11.07372760772705
    7. ' ' → logprob: -11.32372760772705
    8. '\n' → logprob: -11.57372760772705
    9. 'False' → logprob: -11.82372760772705
    10. '```' → logprob: -11.94872760772705

Token 38: '("' (ID: 568)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(' → logprob: -0.08464211225509644
    2. '("' → logprob: -2.709642171859741
    3. '("("' → logprob: -4.334641933441162
    4. '("")' → logprob: -6.709641933441162
    5. '(False' → logprob: -9.33464241027832
    6. '()' → logprob: -9.45964241027832
    7. '("(' → logprob: -10.08464241027832
    8. '('' → logprob: -10.58464241027832
    9. '("""' → logprob: -11.45964241027832
    10. '(">' → logprob: -11.83464241027832

Token 39: 'No' (ID: 3160)
  Prédit: 'No'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'No' → logprob: -0.029791690409183502
    2. '"No' → logprob: -3.5297915935516357
    3. '"' → logprob: -10.279791831970215
    4. ' No' → logprob: -12.404791831970215
    5. 'NO' → logprob: -14.279791831970215
    6. '“No' → logprob: -14.404791831970215
    7. '"N' → logprob: -14.404791831970215
    8. '")' → logprob: -15.279791831970215
    9. '   ' → logprob: -15.404791831970215
    10. ''' → logprob: -15.904791831970215

Token 40: '")' (ID: 1405)
  Prédit: '")'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '")' → logprob: -0.00017755765293259174
    2. ')' → logprob: -8.750177383422852
    3. ')")' → logprob: -10.875177383422852
    4. '")
' → logprob: -16.12517738342285
    5. '}")' → logprob: -17.62517738342285
    6. '"' → logprob: -18.00017738342285
    7. '”)' → logprob: -18.25017738342285
    8. '"))' → logprob: -18.25017738342285
    9. '```' → logprob: -18.50017738342285
    10. '!")' → logprob: -18.50017738342285


RÉSUMÉ:
--------------------------------------------------------------------------------
Total des tokens analysés: 38
Tokens correctement prédits (1ère position, stricte): 16
Tokens correctement prédits (1ère position, avec adaptation): 17
Tokens correctement prédits (top 10): 28
Précision stricte (1ère position): 42.11%
Précision adaptée (1ère position): 44.74%
Précision (top 10): 73.68%
================================================================================
