================================================================================
ANALYSE DE PRÉDICTION TOKEN PAR TOKEN (BATCH API)
Date: 2025-06-04 20:11:29
Modèle de tokenisation: gpt-4o-mini
================================================================================

SCRIPT ANALYSÉ:
--------------------------------------------------------------------------------
from functools import reduce
import operator

n, k = map(int, input().split())

res = (lambda x: reduce(operator.xor, [0, int(bool(x % k))]))
print(res(n))
--------------------------------------------------------------------------------

RÉSULTATS D'ANALYSE TOKEN PAR TOKEN:
--------------------------------------------------------------------------------
Token 0: 'from' (ID: 2845)
  → Token d'amorce (pas de prédiction)

Token 1: ' functools' (ID: 142636)
  → Token d'amorce (pas de prédiction)

Token 2: ' import' (ID: 1588)
  → Token d'amorce (pas de prédiction)

Token 3: ' reduce' (ID: 10389)
  Prédit: 'partial'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'partial' → logprob: -0.612085223197937
    2. 'wrap' → logprob: -0.862085223197937
    3. 'reduce' → logprob: -3.4870853424072266
    4. 'l' → logprob: -6.112085342407227
    5. ' wraps' → logprob: -6.487085342407227
    6. 'cached' → logprob: -7.612085342407227
    7. 'cache' → logprob: -8.112085342407227
    8. 'cmp' → logprob: -9.237085342407227
    9. '```' → logprob: -9.237085342407227
    10. ' partial' → logprob: -9.612085342407227

Token 4: '
' (ID: 198)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '(' → logprob: -0.010317044332623482
    2. '(lambda' → logprob: -4.760316848754883
    3. ' (' → logprob: -7.385316848754883
    4. ',' → logprob: -7.885316848754883
    5. 'def' → logprob: -8.135316848754883
    6. '.' → logprob: -8.635316848754883
    7. '```' → logprob: -10.135316848754883
    8. '(
' → logprob: -10.385316848754883
    9. 'lambda' → logprob: -10.635316848754883
    10. ' ' → logprob: -10.760316848754883

Token 5: 'import' (ID: 561)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '(' → logprob: -0.014403714798390865
    2. '(
' → logprob: -5.139403820037842
    3. '(lambda' → logprob: -5.389403820037842
    4. 'def' → logprob: -6.639403820037842
    5. ',' → logprob: -7.139403820037842
    6. '\' → logprob: -8.139403343200684
    7. ' ' → logprob: -8.264403343200684
    8. ' (' → logprob: -8.389403343200684
    9. '
' → logprob: -9.139403343200684
    10. '' → logprob: -9.139403343200684

Token 6: ' operator' (ID: 11019)
  Prédit: ' os'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' os' → logprob: -0.6588930487632751
    2. ' math' → logprob: -1.15889310836792
    3. ' operator' → logprob: -1.90889310836792
    4. ' itertools' → logprob: -4.40889310836792
    5. ' sys' → logprob: -5.53389310836792
    6. ' functools' → logprob: -6.53389310836792
    7. ' collections' → logprob: -6.65889310836792
    8. 'operator' → logprob: -7.28389310836792
    9. 'math' → logprob: -8.158892631530762
    10. ' re' → logprob: -8.408892631530762

Token 7: '

' (ID: 279)
  Prédit: '.'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '.' → logprob: -0.2529485821723938
    2. '(' → logprob: -1.502948522567749
    3. ',' → logprob: -8.127948760986328
    4. '(
' → logprob: -8.252948760986328
    5. '\' → logprob: -9.877948760986328
    6. '```' → logprob: -9.877948760986328
    7. ' (' → logprob: -10.002948760986328
    8. '#' → logprob: -10.127948760986328
    9. ''' → logprob: -10.252948760986328
    10. '(

' → logprob: -10.752948760986328

Token 8: 'n' (ID: 77)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '(' → logprob: -0.19281435012817383
    2. '.' → logprob: -1.9428143501281738
    3. '=' → logprob: -4.192814350128174
    4. ',' → logprob: -5.192814350128174
    5. '*' → logprob: -5.442814350128174
    6. '_' → logprob: -6.192814350128174
    7. '#' → logprob: -6.442814350128174
    8. 'def' → logprob: -6.442814350128174
    9. ')' → logprob: -7.567814350128174
    10. '+' → logprob: -7.567814350128174

Token 9: ',' (ID: 11)
  Prédit: '='
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '=' → logprob: -1.5422523021697998
    2. ' ' → logprob: -1.5422523021697998
    3. '_' → logprob: -2.0422523021698
    4. '.' → logprob: -2.0422523021698
    5. ' =' → logprob: -2.2922523021698
    6. 'umber' → logprob: -2.7922523021698
    7. 'u' → logprob: -3.2922523021698
    8. 'um' → logprob: -3.6672523021698
    9. 'a' → logprob: -3.7922523021698
    10. ',' → logprob: -4.292252540588379

Token 10: ' k' (ID: 372)
  Prédit: 'm'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'm' → logprob: -1.493830680847168
    2. ' ' → logprob: -1.493830680847168
    3. ' k' → logprob: -1.618830680847168
    4. ' m' → logprob: -1.743830680847168
    5. 'k' → logprob: -2.368830680847168
    6. ''' → logprob: -3.118830680847168
    7. '"' → logprob: -4.368830680847168
    8. ''s' → logprob: -5.368830680847168
    9. ' '' → logprob: -5.618830680847168
    10. ' =' → logprob: -5.743830680847168

Token 11: ' =' (ID: 314)
  Prédit: ' ='
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' =' → logprob: -0.004633757285773754
    2. '=' → logprob: -5.379633903503418
    3. ',' → logprob: -12.129633903503418
    4. ' ' → logprob: -12.504633903503418
    5. ')' → logprob: -13.004633903503418
    6. ' =
' → logprob: -14.004633903503418
    7. '<|end|>' → logprob: -14.629633903503418
    8. ' ,' → logprob: -15.504633903503418
    9. ' =)' → logprob: -16.2546329498291
    10. ' =
' → logprob: -16.3796329498291

Token 12: ' map' (ID: 4014)
  Prédit: ' map'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' map' → logprob: -0.14662767946720123
    2. 'map' → logprob: -2.14662766456604
    3. ' ' → logprob: -4.146627902984619
    4. '0' → logprob: -6.396627902984619
    5. ' int' → logprob: -7.521627902984619
    6. 'int' → logprob: -7.896627902984619
    7. 'input' → logprob: -8.021627426147461
    8. ' input' → logprob: -8.146627426147461
    9. '5' → logprob: -8.271627426147461
    10. '10' → logprob: -8.646627426147461

Token 13: '(int' (ID: 2742)
  Prédit: '(int'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(int' → logprob: -0.49199244379997253
    2. '(' → logprob: -0.9919924736022949
    3. '(lambda' → logprob: -4.616992473602295
    4. '(str' → logprob: -5.491992473602295
    5. '<|end|>' → logprob: -6.366992473602295
    6. 'int' → logprob: -7.116992473602295
    7. '[int' → logprob: -7.991992473602295
    8. '(input' → logprob: -8.741991996765137
    9. '<int' → logprob: -9.116991996765137
    10. ' (' → logprob: -9.741991996765137

Token 14: ',' (ID: 11)
  Prédit: '(input'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(input' → logprob: -0.6863203048706055
    2. 'input' → logprob: -1.0613203048706055
    3. ')' → logprob: -2.5613203048706055
    4. '(' → logprob: -2.8113203048706055
    5. ' input' → logprob: -5.6863203048706055
    6. ',' → logprob: -5.8113203048706055
    7. ',input' → logprob: -5.9363203048706055
    8. '(int' → logprob: -6.6863203048706055
    9. '```' → logprob: -7.4363203048706055
    10. '(str' → logprob: -7.6863203048706055

Token 15: ' input' (ID: 3422)
  Prédit: 'input'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'input' → logprob: -0.029762184247374535
    2. ' input' → logprob: -3.5297622680664062
    3. '(input' → logprob: -11.779762268066406
    4. ')' → logprob: -12.654762268066406
    5. ',input' → logprob: -14.779762268066406
    6. '```' → logprob: -15.654762268066406
    7. '=input' → logprob: -15.779762268066406
    8. ' ' → logprob: -16.029762268066406
    9. '	input' → logprob: -16.654762268066406
    10. '[input' → logprob: -17.529762268066406

Token 16: '().' (ID: 1454)
  Prédit: '()'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '()' → logprob: -0.6949520707130432
    2. '())' → logprob: -1.4449520111083984
    3. '(' → logprob: -2.1949520111083984
    4. '().' → logprob: -2.5699520111083984
    5. '('' → logprob: -3.0699520111083984
    6. ')' → logprob: -3.8199520111083984
    7. '(""))' → logprob: -6.569952011108398
    8. '());' → logprob: -6.944952011108398
    9. '(lambda' → logprob: -6.944952011108398
    10. '("")' → logprob: -7.194952011108398

Token 17: 'split' (ID: 13627)
  Prédit: 'split'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'split' → logprob: -0.0003382038848940283
    2. 'strip' → logprob: -8.000338554382324
    3. 'rstrip' → logprob: -13.375338554382324
    4. ' split' → logprob: -14.000338554382324
    5. '(split' → logprob: -15.750338554382324
    6. 'spl' → logprob: -16.375337600708008
    7. 'read' → logprob: -16.625337600708008
    8. ')' → logprob: -17.500337600708008
    9. 'startswith' → logprob: -18.750337600708008
    10. '```' → logprob: -19.500337600708008

Token 18: '())

' (ID: 27654)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ')' → logprob: -0.06443412601947784
    2. '))' → logprob: -2.939434051513672
    3. '())' → logprob: -4.689434051513672
    4. '()' → logprob: -8.439434051513672
    5. '()))' → logprob: -9.564434051513672
    6. '),' → logprob: -11.939434051513672
    7. '(' → logprob: -12.189434051513672
    8. ')))' → logprob: -12.689434051513672
    9. '('' → logprob: -13.064434051513672
    10. '`)' → logprob: -13.189434051513672

Token 19: 'res' (ID: 430)
  Prédit: 'result'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'result' → logprob: -0.23004679381847382
    2. 'factor' → logprob: -2.4800467491149902
    3. ' result' → logprob: -3.8550467491149902
    4. 'comb' → logprob: -4.23004674911499
    5. 'fact' → logprob: -4.23004674911499
    6. 'res' → logprob: -4.60504674911499
    7. 'com' → logprob: -4.85504674911499
    8. 'count' → logprob: -4.85504674911499
    9. 'arr' → logprob: -5.23004674911499
    10. 'def' → logprob: -5.23004674911499

Token 20: ' =' (ID: 314)
  Prédit: ' ='
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' =' → logprob: -0.1009606271982193
    2. '=' → logprob: -2.3509607315063477
    3. '_' → logprob: -8.225960731506348
    4. 'ult' → logprob: -8.475960731506348
    5. ' ' → logprob: -8.850960731506348
    6. 'ul' → logprob: -10.600960731506348
    7. 'u' → logprob: -10.975960731506348
    8. 'ults' → logprob: -10.975960731506348
    9. 'ultat' → logprob: -11.100960731506348
    10. 'ault' → logprob: -11.475960731506348

Token 21: ' (' (ID: 350)
  Prédit: ' reduce'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' reduce' → logprob: -0.7015462517738342
    2. 'reduce' → logprob: -0.7015462517738342
    3. '1' → logprob: -5.9515461921691895
    4. ' list' → logprob: -6.0765461921691895
    5. 'operator' → logprob: -6.7015461921691895
    6. ' operator' → logprob: -7.7015461921691895
    7. ' ' → logprob: -7.7015461921691895
    8. ' n' → logprob: -8.326546669006348
    9. 'pow' → logprob: -8.451546669006348
    10. ' pow' → logprob: -9.076546669006348

Token 22: 'lambda' (ID: 35280)
  Prédit: 'operator'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'operator' → logprob: -0.24889279901981354
    2. 'reduce' → logprob: -1.6238927841186523
    3. '(operator' → logprob: -4.748892784118652
    4. ' operator' → logprob: -5.248892784118652
    5. 'lambda' → logprob: -5.748892784118652
    6. ' reduce' → logprob: -5.998892784118652
    7. ')' → logprob: -6.498892784118652
    8. 'factor' → logprob: -7.623892784118652
    9. 'pow' → logprob: -8.498892784118652
    10. 'range' → logprob: -8.498892784118652

Token 23: ' x' (ID: 1215)
  Prédit: ' x'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' x' → logprob: -0.4888542890548706
    2. 'x' → logprob: -1.3638542890548706
    3. ' i' → logprob: -2.98885440826416
    4. ' n' → logprob: -3.73885440826416
    5. 'i' → logprob: -4.11385440826416
    6. 'n' → logprob: -4.86385440826416
    7. 'a' → logprob: -4.86385440826416
    8. ' lambda' → logprob: -4.98885440826416
    9. 'lambda' → logprob: -4.98885440826416
    10. ' a' → logprob: -5.48885440826416

Token 24: ':' (ID: 25)
  Prédit: ':'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ':' → logprob: -0.030244113877415657
    2. ',' → logprob: -3.6552441120147705
    3. ' :' → logprob: -5.65524435043335
    4. ':x' → logprob: -9.280243873596191
    5. '=' → logprob: -9.530243873596191
    6. 's' → logprob: -10.530243873596191
    7. ' ,' → logprob: -10.780243873596191
    8. 'x' → logprob: -10.905243873596191
    9. ',x' → logprob: -11.280243873596191
    10. ':n' → logprob: -11.405243873596191

Token 25: ' reduce' (ID: 10389)
  Prédit: 'reduce'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'reduce' → logprob: -0.40657031536102295
    2. ' reduce' → logprob: -1.156570315361023
    3. 'x' → logprob: -4.9065704345703125
    4. ' x' → logprob: -5.4065704345703125
    5. '1' → logprob: -6.2815704345703125
    6. 'operator' → logprob: -6.4065704345703125
    7. '0' → logprob: -6.5315704345703125
    8. ' operator' → logprob: -7.2815704345703125
    9. ' ' → logprob: -7.4065704345703125
    10. ' n' → logprob: -8.531570434570312

Token 26: '(operator' (ID: 145734)
  Prédit: '(operator'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(operator' → logprob: -0.007921740412712097
    2. '(' → logprob: -5.0079216957092285
    3. '(lambda' → logprob: -6.7579216957092285
    4. 'operator' → logprob: -10.257922172546387
    5. '	operator' → logprob: -12.382922172546387
    6. ' operator' → logprob: -13.007922172546387
    7. '(
' → logprob: -14.007922172546387
    8. ')' → logprob: -14.132922172546387
    9. ' (' → logprob: -14.632922172546387
    10. '(op' → logprob: -15.132922172546387

Token 27: '.x' (ID: 3700)
  Prédit: '.mul'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '.mul' → logprob: -0.00018375257786829025
    2. '.' → logprob: -9.125184059143066
    3. '.add' → logprob: -10.625184059143066
    4. '.im' → logprob: -10.875184059143066
    5. '.matmul' → logprob: -11.125184059143066
    6. '.pow' → logprob: -11.500184059143066
    7. '.multiply' → logprob: -13.250184059143066
    8. '.__' → logprob: -14.000184059143066
    9. 'mul' → logprob: -14.125184059143066
    10. '.mult' → logprob: -14.500184059143066

Token 28: 'or' (ID: 267)
  Prédit: 'or'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'or' → logprob: -0.01269164215773344
    2. 'mul' → logprob: -4.387691497802734
    3. 'pow' → logprob: -9.262691497802734
    4. 'xor' → logprob: -9.887691497802734
    5. 'and' → logprob: -11.762691497802734
    6. '**' → logprob: -12.262691497802734
    7. '(or' → logprob: -12.762691497802734
    8. 'rm' → logprob: -12.762691497802734
    9. '_mul' → logprob: -12.887691497802734
    10. 'orr' → logprob: -13.262691497802734

Token 29: ',' (ID: 11)
  Prédit: ','
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ',' → logprob: -0.0005830573500134051
    2. ',x' → logprob: -7.500583171844482
    3. ' ,' → logprob: -10.750582695007324
    4. '(' → logprob: -13.000582695007324
    5. ',int' → logprob: -13.000582695007324
    6. ',n' → logprob: -13.500582695007324
    7. '(x' → logprob: -14.000582695007324
    8. ',k' → logprob: -14.750582695007324
    9. ',(' → logprob: -15.375582695007324
    10. 'x' → logprob: -15.750582695007324

Token 30: ' [' (ID: 723)
  Prédit: ' range'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' range' → logprob: -1.0072486400604248
    2. 'range' → logprob: -1.0072486400604248
    3. 'x' → logprob: -1.5072486400604248
    4. ' x' → logprob: -3.382248640060425
    5. '(range' → logprob: -5.007248878479004
    6. '[x' → logprob: -5.632248878479004
    7. '[' → logprob: -6.257248878479004
    8. ')' → logprob: -6.882248878479004
    9. ' [' → logprob: -8.007248878479004
    10. '(x' → logprob: -8.882248878479004

Token 31: '0' (ID: 15)
  Prédit: 'range'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'range' → logprob: -0.21930553019046783
    2. 'x' → logprob: -2.2193055152893066
    3. ' range' → logprob: -2.5943055152893066
    4. 'i' → logprob: -4.719305515289307
    5. ' x' → logprob: -6.594305515289307
    6. ' i' → logprob: -6.969305515289307
    7. 'map' → logprob: -7.094305515289307
    8. 'int' → logprob: -7.719305515289307
    9. '(range' → logprob: -7.844305515289307
    10. ' map' → logprob: -8.844305992126465

Token 32: ',' (ID: 11)
  Prédit: ','
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ',' → logprob: -0.2557276487350464
    2. ']+' → logprob: -2.130727767944336
    3. ']' → logprob: -2.255727767944336
    4. ',x' → logprob: -7.380727767944336
    5. ' ]' → logprob: -7.755727767944336
    6. ' ,' → logprob: -8.255727767944336
    7. ',...' → logprob: -9.005727767944336
    8. ',*' → logprob: -9.255727767944336
    9. '+' → logprob: -9.630727767944336
    10. ']+=' → logprob: -9.630727767944336

Token 33: ' int' (ID: 677)
  Prédit: 'x'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'x' → logprob: -0.443189799785614
    2. '*x' → logprob: -1.4431898593902588
    3. ' x' → logprob: -2.443189859390259
    4. '*' → logprob: -4.19318962097168
    5. ' *' → logprob: -4.19318962097168
    6. ']' → logprob: -6.56818962097168
    7. '*n' → logprob: -6.94318962097168
    8. '*k' → logprob: -7.56818962097168
    9. '*(' → logprob: -8.06818962097168
    10. ']+' → logprob: -8.31818962097168

Token 34: '(bool' (ID: 22323)
  Prédit: '(x'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '(x' → logprob: -0.22100986540317535
    2. '(i' → logprob: -1.7210098505020142
    3. '(' → logprob: -4.096009731292725
    4. ']' → logprob: -7.346009731292725
    5. '(n' → logprob: -7.471009731292725
    6. '(a' → logprob: -7.721009731292725
    7. 'x' → logprob: -8.596010208129883
    8. '](' → logprob: -8.596010208129883
    9. '(s' → logprob: -9.096010208129883
    10. '(num' → logprob: -9.471010208129883

Token 35: '(x' (ID: 4061)
  Prédit: '(x'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(x' → logprob: -0.08843045681715012
    2. '(i' → logprob: -2.588430404663086
    3. '(' → logprob: -5.213430404663086
    4. '(n' → logprob: -6.463430404663086
    5. 'x' → logprob: -7.088430404663086
    6. '((' → logprob: -7.213430404663086
    7. '(a' → logprob: -7.713430404663086
    8. '(j' → logprob: -8.963430404663086
    9. '(k' → logprob: -9.088430404663086
    10. '(y' → logprob: -10.213430404663086

Token 36: ' %' (ID: 1851)
  Prédit: ' &'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' &' → logprob: -0.37444818019866943
    2. '&' → logprob: -1.2494481801986694
    3. '))' → logprob: -4.499448299407959
    4. '>>' → logprob: -5.249448299407959
    5. '&(' → logprob: -6.249448299407959
    6. ')),' → logprob: -6.374448299407959
    7. '&i' → logprob: -6.749448299407959
    8. ')' → logprob: -6.999448299407959
    9. '&a' → logprob: -7.249448299407959
    10. ')))' → logprob: -7.374448299407959

Token 37: ' k' (ID: 372)
  Prédit: 'k'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'k' → logprob: -0.17918144166469574
    2. '2' → logprob: -2.5541813373565674
    3. 'i' → logprob: -3.4291813373565674
    4. '(' → logprob: -3.8041813373565674
    5. '(k' → logprob: -4.5541815757751465
    6. '1' → logprob: -4.9291815757751465
    7. '(i' → logprob: -5.1791815757751465
    8. '(n' → logprob: -6.1791815757751465
    9. 'n' → logprob: -6.4291815757751465
    10. ' ' → logprob: -6.6791815757751465

Token 38: '))' (ID: 915)
  Prédit: '))'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '))' → logprob: -0.028515763580799103
    2. ')),' → logprob: -4.028515815734863
    3. ')' → logprob: -5.653515815734863
    4. ' ))' → logprob: -6.028515815734863
    5. ' ' → logprob: -6.278515815734863
    6. ')))' → logprob: -6.778515815734863
    7. '),' → logprob: -7.903515815734863
    8. '))))' → logprob: -8.528515815734863
    9. '**' → logprob: -8.903515815734863
    10. ' )' → logprob: -9.153515815734863

Token 39: ']))
' (ID: 24801)
  Prédit: ','
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ',' → logprob: -0.8859132528305054
    2. 'for' → logprob: -2.010913372039795
    3. ' for' → logprob: -2.135913372039795
    4. ']))' → logprob: -2.135913372039795
    5. ']' → logprob: -2.510913372039795
    6. '])' → logprob: -3.760913372039795
    7. '],' → logprob: -3.760913372039795
    8. ')' → logprob: -4.010913372039795
    9. ')]' → logprob: -4.385913372039795
    10. '),' → logprob: -4.635913372039795

Token 40: 'print' (ID: 1598)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '(' → logprob: -0.13580693304538727
    2. '(x' → logprob: -3.0108070373535156
    3. ')' → logprob: -3.3858070373535156
    4. '(n' → logprob: -3.6358070373535156
    5. ')(' → logprob: -4.385807037353516
    6. ',' → logprob: -6.135807037353516
    7. '(k' → logprob: -7.260807037353516
    8. '(
' → logprob: -7.260807037353516
    9. ' ' → logprob: -8.760807037353516
    10. ')(
' → logprob: -8.760807037353516

Token 41: '(res' (ID: 8331)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(' → logprob: -0.6932624578475952
    2. '(res' → logprob: -0.6932624578475952
    3. '(x' → logprob: -9.943262100219727
    4. ' (' → logprob: -11.818262100219727
    5. '(
' → logprob: -11.818262100219727
    6. '(n' → logprob: -12.193262100219727
    7. '((' → logprob: -12.193262100219727
    8. '("("' → logprob: -12.318262100219727
    9. '(re' → logprob: -12.568262100219727
    10. '()' → logprob: -12.693262100219727

Token 42: '(n' (ID: 2406)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(' → logprob: -0.11219487339258194
    2. '(x' → logprob: -2.487194776535034
    3. '(n' → logprob: -4.237195014953613
    4. ')' → logprob: -4.862195014953613
    5. '))' → logprob: -8.237195014953613
    6. '(k' → logprob: -8.362195014953613
    7. '(
' → logprob: -9.362195014953613
    8. '((' → logprob: -10.362195014953613
    9. '()' → logprob: -10.487195014953613
    10. '(a' → logprob: -11.237195014953613

Token 43: '))' (ID: 915)
  Prédit: '))'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '))' → logprob: -0.0420415997505188
    2. ')' → logprob: -3.417041540145874
    3. ')))' → logprob: -4.792041778564453
    4. ' ))' → logprob: -10.667041778564453
    5. '))
' → logprob: -11.167041778564453
    6. ' ' → logprob: -11.667041778564453
    7. '),' → logprob: -12.167041778564453
    8. ' )' → logprob: -12.417041778564453
    9. '))))' → logprob: -12.792041778564453
    10. ')n' → logprob: -13.542041778564453


RÉSUMÉ:
--------------------------------------------------------------------------------
Total des tokens analysés: 41
Tokens correctement prédits (1ère position, stricte): 14
Tokens correctement prédits (1ère position, avec adaptation): 14
Tokens correctement prédits (top 10): 26
Précision stricte (1ère position): 34.15%
Précision adaptée (1ère position): 34.15%
Précision (top 10): 63.41%
================================================================================
