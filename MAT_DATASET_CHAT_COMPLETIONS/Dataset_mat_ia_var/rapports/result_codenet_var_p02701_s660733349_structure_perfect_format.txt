================================================================================
ANALYSE DE PRÉDICTION TOKEN PAR TOKEN (BATCH API)
Date: 2025-06-04 19:16:59
Modèle de tokenisation: gpt-4o-mini
================================================================================

SCRIPT ANALYSÉ:
--------------------------------------------------------------------------------
n = int(input())
l = []
for i in range(n):
    x = input()
    l.append(x)
l2 = list(set(l))
print(len(l2))
--------------------------------------------------------------------------------

RÉSULTATS D'ANALYSE TOKEN PAR TOKEN:
--------------------------------------------------------------------------------
Token 0: 'n' (ID: 77)
  → Token d'amorce (pas de prédiction)

Token 1: ' =' (ID: 314)
  → Token d'amorce (pas de prédiction)

Token 2: ' int' (ID: 677)
  → Token d'amorce (pas de prédiction)

Token 3: '(input' (ID: 10054)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '(' → logprob: -0.00028266964363865554
    2. ''' → logprob: -9.000282287597656
    3. '(n' → logprob: -10.375282287597656
    4. '('' → logprob: -10.500282287597656
    5. '```' → logprob: -10.500282287597656
    6. '()' → logprob: -10.750282287597656
    7. '("("' → logprob: -11.500282287597656
    8. '(
' → logprob: -11.500282287597656
    9. '`' → logprob: -11.625282287597656
    10. ')' → logprob: -11.750282287597656

Token 4: '())
' (ID: 4574)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '(' → logprob: -0.13287097215652466
    2. ')' → logprob: -2.13287091255188
    3. '()' → logprob: -5.382871150970459
    4. '())' → logprob: -7.382871150970459
    5. '(
' → logprob: -8.1328706741333
    6. '```' → logprob: -9.8828706741333
    7. '(

' → logprob: -10.2578706741333
    8. '('' → logprob: -10.3828706741333
    9. ''' → logprob: -10.6328706741333
    10. '(n' → logprob: -10.7578706741333

Token 5: 'l' (ID: 75)
  Prédit: 'i'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'i' → logprob: -0.7043631672859192
    2. 'if' → logprob: -1.4543631076812744
    3. 'for' → logprob: -2.3293631076812744
    4. 's' → logprob: -2.4543631076812744
    5. 'f' → logprob: -4.3293633460998535
    6. ' ' → logprob: -4.4543633460998535
    7. 'x' → logprob: -4.8293633460998535
    8. ')' → logprob: -4.9543633460998535
    9. 'a' → logprob: -4.9543633460998535
    10. ''' → logprob: -5.0793633460998535

Token 6: ' =' (ID: 314)
  Prédit: '['
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '[' → logprob: -0.1109929010272026
    2. '.' → logprob: -3.735992908477783
    3. 'ist' → logprob: -3.735992908477783
    4. 'i' → logprob: -4.235992908477783
    5. 's' → logprob: -4.360992908477783
    6. '=' → logprob: -4.610992908477783
    7. 'e' → logprob: -5.360992908477783
    8. ' =' → logprob: -5.610992908477783
    9. '[:]' → logprob: -5.860992908477783
    10. '[i' → logprob: -6.110992908477783

Token 7: ' []
' (ID: 8911)
  Prédit: '[]'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '[]' → logprob: -0.32259905338287354
    2. ' []' → logprob: -1.3225990533828735
    3. 'list' → logprob: -5.197598934173584
    4. '[input' → logprob: -6.572598934173584
    5. ' list' → logprob: -7.447598934173584
    6. '[int' → logprob: -7.572598934173584
    7. '[' → logprob: -7.822598934173584
    8. ' [' → logprob: -7.947598934173584
    9. 'input' → logprob: -8.072599411010742
    10. '[list' → logprob: -9.322599411010742

Token 8: 'for' (ID: 1938)
  Prédit: 'for'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'for' → logprob: -0.001960512949153781
    2. ' for' → logprob: -6.251960277557373
    3. 'f' → logprob: -10.876960754394531
    4. '```' → logprob: -12.751960754394531
    5. '
' → logprob: -12.876960754394531
    6. 'i' → logprob: -13.001960754394531
    7. ' 
' → logprob: -13.376960754394531
    8. ' ' → logprob: -13.876960754394531
    9. '' → logprob: -14.126960754394531
    10. 'n' → logprob: -14.751960754394531

Token 9: ' i' (ID: 575)
  Prédit: ' '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' ' → logprob: -0.0404641292989254
    2. ' i' → logprob: -3.415464162826538
    3. '  ' → logprob: -5.040463924407959
    4. 'i' → logprob: -8.540464401245117
    5. ' ‌' → logprob: -10.040464401245117
    6. ' n' → logprob: -10.165464401245117
    7. '_' → logprob: -11.665464401245117
    8. ' )' → logprob: -12.415464401245117
    9. ' ' → logprob: -12.415464401245117
    10. ' space' → logprob: -12.540464401245117

Token 10: ' in' (ID: 306)
  Prédit: ' in'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' in' → logprob: -0.09883958846330643
    2. 'in' → logprob: -2.723839521408081
    3. ' ' → logprob: -4.09883975982666
    4. 'n' → logprob: -4.59883975982666
    5. ' n' → logprob: -6.59883975982666
    6. '  ' → logprob: -8.22383975982666
    7. 'space' → logprob: -9.84883975982666
    8. '_' → logprob: -10.84883975982666
    9. '	in' → logprob: -10.97383975982666
    10. ' i' → logprob: -10.97383975982666

Token 11: ' range' (ID: 3352)
  Prédit: ' range'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' range' → logprob: -0.04860644042491913
    2. 'range' → logprob: -3.0486063957214355
    3. ' ' → logprob: -11.048606872558594
    4. '	range' → logprob: -13.673606872558594
    5. '```' → logprob: -14.048606872558594
    6. ')' → logprob: -15.423606872558594
    7. ' in' → logprob: -15.423606872558594
    8. '(range' → logprob: -15.923606872558594
    9. ' xrange' → logprob: -15.923606872558594
    10. '_range' → logprob: -16.298606872558594

Token 12: '(n' (ID: 2406)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(' → logprob: -0.0043779052793979645
    2. '(n' → logprob: -5.504377841949463
    3. ' (' → logprob: -8.129378318786621
    4. '(len' → logprob: -13.879378318786621
    5. '(
' → logprob: -14.004378318786621
    6. '(range' → logprob: -14.004378318786621
    7. '(space' → logprob: -14.504378318786621
    8. '(i' → logprob: -14.754378318786621
    9. ' ' → logprob: -15.254378318786621
    10. '(

' → logprob: -16.004377365112305

Token 13: '):
' (ID: 1883)
  Prédit: '):'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '):' → logprob: -0.07917695492506027
    2. ')' → logprob: -2.579176902770996
    3. '+' → logprob: -8.829176902770996
    4. ':' → logprob: -9.204176902770996
    5. ' ):' → logprob: -11.079176902770996
    6. '):
' → logprob: -11.079176902770996
    7. ' )' → logprob: -13.204176902770996
    8. ' ' → logprob: -14.454176902770996
    9. ',' → logprob: -14.579176902770996
    10. ''):' → logprob: -14.829176902770996

Token 14: '   ' (ID: 271)
  Prédit: ' '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' ' → logprob: -0.6538625955581665
    2. '    ' → logprob: -1.6538625955581665
    3. ' l' → logprob: -1.7788625955581665
    4. '   ' → logprob: -2.278862476348877
    5. '     
' → logprob: -5.528862476348877
    6. 'l' → logprob: -5.653862476348877
    7. ' ```' → logprob: -6.403862476348877
    8. '```' → logprob: -6.403862476348877
    9. '    
' → logprob: -6.653862476348877
    10. ' 
' → logprob: -6.778862476348877

Token 15: ' x' (ID: 1215)
  Prédit: ' l'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' l' → logprob: -0.004414570517838001
    2. 'l' → logprob: -6.0044145584106445
    3. ' line' → logprob: -7.6294145584106445
    4. ' ' → logprob: -7.6294145584106445
    5. '    ' → logprob: -8.504414558410645
    6. ' s' → logprob: -8.504414558410645
    7. 's' → logprob: -9.254414558410645
    8. '   ' → logprob: -9.879414558410645
    9. ' input' → logprob: -10.004414558410645
    10. ' ```' → logprob: -10.004414558410645

Token 16: ' =' (ID: 314)
  Prédit: ' ='
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' =' → logprob: -0.008735946379601955
    2. '=' → logprob: -4.7587361335754395
    3. ' ' → logprob: -9.883735656738281
    4. '.append' → logprob: -11.008735656738281
    5. '.' → logprob: -11.133735656738281
    6. ')' → logprob: -11.383735656738281
    7. '_' → logprob: -12.008735656738281
    8. '=input' → logprob: -12.008735656738281
    9. ',' → logprob: -12.133735656738281
    10. 's' → logprob: -13.383735656738281

Token 17: ' input' (ID: 3422)
  Prédit: ' int'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' int' → logprob: -0.5759779214859009
    2. 'int' → logprob: -0.8259779214859009
    3. '=int' → logprob: -11.45097827911377
    4. ' input' → logprob: -11.70097827911377
    5. '   ' → logprob: -12.45097827911377
    6. 'input' → logprob: -12.57597827911377
    7. '(int' → logprob: -12.95097827911377
    8. '<int' → logprob: -13.07597827911377
    9. ' ' → logprob: -13.32597827911377
    10. '	int' → logprob: -13.70097827911377

Token 18: '()
' (ID: 1234)
  Prédit: '()'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '()' → logprob: -0.025664713233709335
    2. '(' → logprob: -3.775664806365967
    3. '('' → logprob: -6.275664806365967
    4. '().' → logprob: -8.775664329528809
    5. '("("' → logprob: -9.275664329528809
    6. '("' → logprob: -9.400664329528809
    7. '())' → logprob: -10.150664329528809
    8. '("")' → logprob: -10.150664329528809
    9. ')' → logprob: -10.150664329528809
    10. '"' → logprob: -10.900664329528809

Token 19: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.003568231128156185
    2. '<|end|>' → logprob: -6.128568172454834
    3. 'l' → logprob: -7.253568172454834
    4. '
' → logprob: -8.128568649291992
    5. ' l' → logprob: -9.253568649291992
    6. '    
' → logprob: -9.628568649291992
    7. ')' → logprob: -9.878568649291992
    8. '<|end|>' → logprob: -10.003568649291992
    9. '	l' → logprob: -10.878568649291992
    10. '```' → logprob: -11.128568649291992

Token 20: ' l' (ID: 305)
  Prédit: 'l'
  Correct (stricte): False
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'l' (adapté à ' l') → logprob: -0.39407601952552795
    2. '   ' → logprob: -1.1440759897232056
    3. ' l' → logprob: -5.019075870513916
    4. '<|end|>' → logprob: -8.519076347351074
    5. ' ' → logprob: -9.519076347351074
    6. '_l' → logprob: -9.894076347351074
    7. '    
' → logprob: -10.269076347351074
    8. '	l' → logprob: -10.519076347351074
    9. '    ' → logprob: -10.519076347351074
    10. ' if' → logprob: -10.644076347351074

Token 21: '.append' (ID: 3709)
  Prédit: '.'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '.' → logprob: -0.2519437372684479
    2. '.append' → logprob: -1.5019437074661255
    3. ' .' → logprob: -12.126943588256836
    4. '.app' → logprob: -13.001943588256836
    5. '.ap' → logprob: -13.501943588256836
    6. 'append' → logprob: -13.501943588256836
    7. '.extend' → logprob: -14.126943588256836
    8. '​.' → logprob: -14.126943588256836
    9. '‌.' → logprob: -14.626943588256836
    10. '.Append' → logprob: -14.876943588256836

Token 22: '(x' (ID: 4061)
  Prédit: '(x'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(x' → logprob: -0.023254098370671272
    2. '(' → logprob: -3.773254156112671
    3. '((' → logprob: -12.27325439453125
    4. '(
' → logprob: -13.64825439453125
    5. '('' → logprob: -14.52325439453125
    6. ' (' → logprob: -14.77325439453125
    7. '(i' → logprob: -15.02325439453125
    8. '("("' → logprob: -15.39825439453125
    9. '(str' → logprob: -15.52325439453125
    10. 'x' → logprob: -15.77325439453125

Token 23: ')
' (ID: 446)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')' → logprob: -1.5094070477061905e-05
    2. '))' → logprob: -11.750015258789062
    3. '`)' → logprob: -12.750015258789062
    4. ' )' → logprob: -13.500015258789062
    5. '')' → logprob: -13.750015258789062
    6. '())' → logprob: -14.500015258789062
    7. '()' → logprob: -14.500015258789062
    8. '   ' → logprob: -15.375015258789062
    9. '")' → logprob: -15.500015258789062
    10. ')
' → logprob: -15.625015258789062

Token 24: 'l' (ID: 75)
  Prédit: '.'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '.' → logprob: -0.5579010844230652
    2. '[' → logprob: -1.43290114402771
    3. 'print' → logprob: -3.05790114402771
    4. 'for' → logprob: -3.18290114402771
    5. '.sort' → logprob: -3.80790114402771
    6. '#' → logprob: -4.307900905609131
    7. ')' → logprob: -4.432900905609131
    8. 's' → logprob: -4.557900905609131
    9. 'n' → logprob: -5.182900905609131
    10. '\n' → logprob: -5.557900905609131

Token 25: '2' (ID: 17)
  Prédit: '['
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '[' → logprob: -0.9214601516723633
    2. '<|end|>' → logprob: -1.0464601516723633
    3. '.' → logprob: -1.5464601516723633
    4. '```' → logprob: -4.546460151672363
    5. '[n' → logprob: -5.296460151672363
    6. '\[' → logprob: -5.671460151672363
    7. '
' → logprob: -5.796460151672363
    8. '<|end|>' → logprob: -5.796460151672363
    9. '[
' → logprob: -6.171460151672363
    10. '[:]' → logprob: -6.546460151672363

Token 26: ' =' (ID: 314)
  Prédit: '.'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '.' → logprob: -0.011877376586198807
    2. '.append' → logprob: -4.886877536773682
    3. ' =' → logprob: -6.636877536773682
    4. '.extend' → logprob: -6.636877536773682
    5. '=' → logprob: -8.011877059936523
    6. '.sort' → logprob: -8.136877059936523
    7. '[' → logprob: -8.511877059936523
    8. '[:]' → logprob: -8.511877059936523
    9. ' .' → logprob: -9.011877059936523
    10. '.insert' → logprob: -9.636877059936523

Token 27: ' list' (ID: 1562)
  Prédit: ' l'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' l' → logprob: -0.9382368326187134
    2. ' []' → logprob: -1.4382368326187134
    3. 'l' → logprob: -1.6882368326187134
    4. '[]' → logprob: -3.063236713409424
    5. ' [' → logprob: -3.313236713409424
    6. ' sorted' → logprob: -3.313236713409424
    7. 'list' → logprob: -3.938236713409424
    8. 'sorted' → logprob: -4.063236713409424
    9. ' list' → logprob: -4.188236713409424
    10. '[l' → logprob: -4.688236713409424

Token 28: '(set' (ID: 25904)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '(' → logprob: -0.07972043007612228
    2. '(l' → logprob: -2.5797204971313477
    3. '(range' → logprob: -7.704720497131348
    4. '(
' → logprob: -9.454720497131348
    5. '(s' → logprob: -9.579720497131348
    6. '(ll' → logprob: -10.329720497131348
    7. 's' → logprob: -10.704720497131348
    8. '((' → logprob: -10.954720497131348
    9. '(list' → logprob: -10.954720497131348
    10. '(map' → logprob: -11.204720497131348

Token 29: '(l' (ID: 4179)
  Prédit: '(l'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(l' → logprob: -3.643152740551159e-05
    2. '(' → logprob: -10.250036239624023
    3. ' (' → logprob: -14.125036239624023
    4. '(s' → logprob: -16.750036239624023
    5. '(n' → logprob: -16.875036239624023
    6. '(ll' → logprob: -17.250036239624023
    7. '(L' → logprob: -17.500036239624023
    8. ')' → logprob: -18.125036239624023
    9. '(
' → logprob: -18.250036239624023
    10. '(li' → logprob: -18.875036239624023

Token 30: '))
' (ID: 2210)
  Prédit: '))'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '))' → logprob: -0.10042630881071091
    2. ')' → logprob: -2.350426197052002
    3. '()))' → logprob: -8.85042667388916
    4. '())' → logprob: -9.85042667388916
    5. '()' → logprob: -11.10042667388916
    6. '))
' → logprob: -12.47542667388916
    7. ' ))' → logprob: -13.60042667388916
    8. '(' → logprob: -13.60042667388916
    9. '])' → logprob: -14.60042667388916
    10. ')
' → logprob: -14.72542667388916

Token 31: 'print' (ID: 1598)
  Prédit: 'l'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'l' → logprob: -0.06924067437648773
    2. ')' → logprob: -2.9442405700683594
    3. 'print' → logprob: -5.069240570068359
    4. 'for' → logprob: -5.444240570068359
    5. '(' → logprob: -6.569240570068359
    6. '```' → logprob: -7.069240570068359
    7. '.' → logprob: -7.694240570068359
    8. '.sort' → logprob: -8.19424057006836
    9. '()' → logprob: -8.56924057006836
    10. ' l' → logprob: -9.31924057006836

Token 32: '(len' (ID: 14990)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(' → logprob: -0.014815817587077618
    2. '(l' → logprob: -4.264815807342529
    3. '(len' → logprob: -7.389815807342529
    4. '('' → logprob: -10.639816284179688
    5. '("("' → logprob: -12.514816284179688
    6. '(
' → logprob: -12.889816284179688
    7. '()' → logprob: -13.264816284179688
    8. '((' → logprob: -14.514816284179688
    9. '(sorted' → logprob: -14.889816284179688
    10. 'l' → logprob: -15.389816284179688

Token 33: '(l' (ID: 4179)
  Prédit: '(l'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(l' → logprob: -0.02975395694375038
    2. '(' → logprob: -3.5297539234161377
    3. '(
' → logprob: -13.904753684997559
    4. 'l' → logprob: -14.529753684997559
    5. ')' → logprob: -14.529753684997559
    6. '(ll' → logprob: -14.779753684997559
    7. '(

' → logprob: -14.904753684997559
    8. '()' → logprob: -15.904753684997559
    9. '(s' → logprob: -16.029754638671875
    10. '(len' → logprob: -16.279754638671875

Token 34: '2' (ID: 17)
  Prédit: '))'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '))' → logprob: -0.062004320323467255
    2. ')' → logprob: -2.812004327774048
    3. 'l' → logprob: -11.312004089355469
    4. '))
' → logprob: -11.937004089355469
    5. '(l' → logprob: -12.812004089355469
    6. ')))' → logprob: -12.937004089355469
    7. '(' → logprob: -13.062004089355469
    8. '-l' → logprob: -13.562004089355469
    9. 's' → logprob: -13.812004089355469
    10. '[' → logprob: -14.062004089355469

Token 35: '))' (ID: 915)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')' → logprob: -0.16022513806819916
    2. '))' → logprob: -1.9102251529693604
    3. ')))' → logprob: -14.410224914550781
    4. ' )' → logprob: -16.78522491455078
    5. '')' → logprob: -16.78522491455078
    6. '())' → logprob: -16.91022491455078
    7. '),' → logprob: -17.03522491455078
    8. '(' → logprob: -17.16022491455078
    9. ')
' → logprob: -17.28522491455078
    10. '()' → logprob: -17.41022491455078


RÉSUMÉ:
--------------------------------------------------------------------------------
Total des tokens analysés: 33
Tokens correctement prédits (1ère position, stricte): 8
Tokens correctement prédits (1ère position, avec adaptation): 9
Tokens correctement prédits (top 10): 23
Précision stricte (1ère position): 24.24%
Précision adaptée (1ère position): 27.27%
Précision (top 10): 69.70%
================================================================================
