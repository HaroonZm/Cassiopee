================================================================================
ANALYSE DE PRÉDICTION TOKEN PAR TOKEN (BATCH API)
Date: 2025-06-04 19:59:11
Modèle de tokenisation: gpt-4o-mini
================================================================================

SCRIPT ANALYSÉ:
--------------------------------------------------------------------------------
from sys import stdin

def main():
    A, P = map(int, stdin.readline().split())
    print((P + 3 * A) >> 1)

if __name__ == "__main__":
    main()
--------------------------------------------------------------------------------

RÉSULTATS D'ANALYSE TOKEN PAR TOKEN:
--------------------------------------------------------------------------------
Token 0: 'from' (ID: 2845)
  → Token d'amorce (pas de prédiction)

Token 1: ' sys' (ID: 12228)
  → Token d'amorce (pas de prédiction)

Token 2: ' import' (ID: 1588)
  → Token d'amorce (pas de prédiction)

Token 3: ' stdin' (ID: 75143)
  Prédit: 'argv'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'argv' → logprob: -0.050773657858371735
    2. ' argv' → logprob: -3.5507736206054688
    3. 'exit' → logprob: -4.300773620605469
    4. ' exit' → logprob: -6.050773620605469
    5. 'stdout' → logprob: -6.050773620605469
    6. 'path' → logprob: -6.675773620605469
    7. 'stdin' → logprob: -7.425773620605469
    8. 'import' → logprob: -8.425773620605469
    9. 'version' → logprob: -8.550773620605469
    10. 'stderr' → logprob: -9.425773620605469

Token 4: '

' (ID: 279)
  Prédit: '.'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '.' → logprob: -0.009244076907634735
    2. '.readline' → logprob: -4.759243965148926
    3. '.read' → logprob: -8.509243965148926
    4. '\n' → logprob: -9.259243965148926
    5. '
' → logprob: -9.509243965148926
    6. '.
' → logprob: -9.759243965148926
    7. ',' → logprob: -9.884243965148926
    8. 'import' → logprob: -10.134243965148926
    9. '```' → logprob: -10.384243965148926
    10. '.write' → logprob: -11.134243965148926

Token 5: 'def' (ID: 1314)
  Prédit: '.'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '.' → logprob: -0.2673061788082123
    2. '.readline' → logprob: -1.7673062086105347
    3. 'for' → logprob: -3.767306089401245
    4. '\n' → logprob: -4.642306327819824
    5. '.read' → logprob: -4.767306327819824
    6. 'import' → logprob: -4.892306327819824
    7. 'print' → logprob: -4.892306327819824
    8. 'read' → logprob: -6.267306327819824
    9. ',' → logprob: -7.017306327819824
    10. '' → logprob: -7.017306327819824

Token 6: ' main' (ID: 2758)
  Prédit: ' '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' ' → logprob: -0.0812530517578125
    2. ' read' → logprob: -2.7062530517578125
    3. ' process' → logprob: -5.4562530517578125
    4. '_read' → logprob: -6.5812530517578125
    5. ' readline' → logprob: -6.9562530517578125
    6. ' ' → logprob: -7.0812530517578125
    7. ' space' → logprob: -7.0812530517578125
    8. ' parse' → logprob: -7.3312530517578125
    9. 'read' → logprob: -8.081253051757812
    10. ' main' → logprob: -8.331253051757812

Token 7: '():
' (ID: 8595)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '(' → logprob: -0.11979860067367554
    2. '():' → logprob: -2.3697986602783203
    3. ':' → logprob: -4.24479866027832
    4. '(:' → logprob: -5.36979866027832
    5. '```' → logprob: -9.61979866027832
    6. '):' → logprob: -9.74479866027832
    7. '(":' → logprob: -9.74479866027832
    8. ' (' → logprob: -9.86979866027832
    9. '(
' → logprob: -10.36979866027832
    10. ' ():' → logprob: -10.49479866027832

Token 8: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.02700521983206272
    2. '    ' → logprob: -4.652005195617676
    3. '    
' → logprob: -4.777005195617676
    4. '\' → logprob: -5.652005195617676
    5. ' ' → logprob: -6.402005195617676
    6. '\n' → logprob: -7.402005195617676
    7. '(stdin' → logprob: -7.402005195617676
    8. 'print' → logprob: -7.527005195617676
    9. ' print' → logprob: -8.777005195617676
    10. 'stdin' → logprob: -8.777005195617676

Token 9: ' A' (ID: 355)
  Prédit: 'for'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'for' → logprob: -0.7085322141647339
    2. '   ' → logprob: -1.8335322141647339
    3. 'data' → logprob: -1.9585322141647339
    4. ' for' → logprob: -2.5835323333740234
    5. 'line' → logprob: -3.8335323333740234
    6. 'n' → logprob: -3.9585323333740234
    7. ' ' → logprob: -4.083532333374023
    8. ' data' → logprob: -4.208532333374023
    9. 'i' → logprob: -4.583532333374023
    10. 'x' → logprob: -4.583532333374023

Token 10: ',' (ID: 11)
  Prédit: ' ='
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' =' → logprob: -0.604731023311615
    2. '[' → logprob: -1.3547310829162598
    3. '=' → logprob: -2.3547310829162598
    4. '.' → logprob: -3.1047310829162598
    5. ',' → logprob: -3.4797310829162598
    6. '.append' → logprob: -4.85473108291626
    7. ' ' → logprob: -5.60473108291626
    8. '[i' → logprob: -5.85473108291626
    9. '   ' → logprob: -6.22973108291626
    10. '  ' → logprob: -6.85473108291626

Token 11: ' P' (ID: 398)
  Prédit: ' B'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' B' → logprob: -0.526800811290741
    2. 'B' → logprob: -0.901800811290741
    3. ' ' → logprob: -5.651800632476807
    4. 'space' → logprob: -10.276801109313965
    5. '<|end|>' → logprob: -10.276801109313965
    6. 'b' → logprob: -10.651801109313965
    7. '  ' → logprob: -11.651801109313965
    8. 'input' → logprob: -11.776801109313965
    9. ' =' → logprob: -11.901801109313965
    10. '_' → logprob: -12.026801109313965

Token 12: ' =' (ID: 314)
  Prédit: '='
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '=' → logprob: -0.6931518912315369
    2. ' =' → logprob: -0.6931518912315369
    3. ' ' → logprob: -12.943151473999023
    4. ',' → logprob: -14.068151473999023
    5. ')' → logprob: -14.193151473999023
    6. '=input' → logprob: -15.443151473999023
    7. '=int' → logprob: -15.818151473999023
    8. '_' → logprob: -16.193151473999023
    9. ' =
' → logprob: -16.693151473999023
    10. ' =
' → logprob: -17.130651473999023

Token 13: ' map' (ID: 4014)
  Prédit: ' map'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' map' → logprob: -0.0015554478159174323
    2. 'map' → logprob: -6.501555442810059
    3. ' list' → logprob: -10.126555442810059
    4. ' [' → logprob: -12.126555442810059
    5. ' ' → logprob: -12.501555442810059
    6. '[' → logprob: -13.126555442810059
    7. ' stdin' → logprob: -14.376555442810059
    8. '	map' → logprob: -15.126555442810059
    9. '(map' → logprob: -15.251555442810059
    10. '   ' → logprob: -15.376555442810059

Token 14: '(int' (ID: 2742)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(' → logprob: -0.723602294921875
    2. '(lambda' → logprob: -1.223602294921875
    3. '(int' → logprob: -1.723602294921875
    4. '(str' → logprob: -3.223602294921875
    5. '<|end|>' → logprob: -6.223602294921875
    6. '()' → logprob: -8.973602294921875
    7. '(
' → logprob: -9.473602294921875
    8. '(stdin' → logprob: -9.973602294921875
    9. '(eval' → logprob: -10.348602294921875
    10. ' (' → logprob: -10.598602294921875

Token 15: ',' (ID: 11)
  Prédit: ','
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ',' → logprob: -0.14651134610176086
    2. '(stdin' → logprob: -2.1465113162994385
    3. '(' → logprob: -4.646511554718018
    4. ',input' → logprob: -4.896511554718018
    5. '(input' → logprob: -6.646511554718018
    6. ' ,' → logprob: -7.521511554718018
    7. ')' → logprob: -8.77151107788086
    8. 'input' → logprob: -9.39651107788086
    9. ',std' → logprob: -9.39651107788086
    10. 'stdin' → logprob: -9.77151107788086

Token 16: ' stdin' (ID: 75143)
  Prédit: ' stdin'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' stdin' → logprob: -0.2527705729007721
    2. 'stdin' → logprob: -1.5027705430984497
    3. '(stdin' → logprob: -7.25277042388916
    4. ')' → logprob: -9.75277042388916
    5. '.stdin' → logprob: -9.87777042388916
    6. 'input' → logprob: -11.37777042388916
    7. ' input' → logprob: -11.62777042388916
    8. ' readline' → logprob: -13.50277042388916
    9. ' )' → logprob: -13.87777042388916
    10. 'st' → logprob: -15.50277042388916

Token 17: '.readline' (ID: 74673)
  Prédit: '.readline'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '.readline' → logprob: -4.310693111619912e-05
    2. '.read' → logprob: -10.500042915344238
    3. '.' → logprob: -11.250042915344238
    4. '.readlines' → logprob: -13.250042915344238
    5. '().' → logprob: -14.625042915344238
    6. ').' → logprob: -15.500042915344238
    7. ')' → logprob: -16.750043869018555
    8. ' .' → logprob: -16.875043869018555
    9. '.)' → logprob: -17.125043869018555
    10. '.write' → logprob: -17.375043869018555

Token 18: '().' (ID: 1454)
  Prédit: '().'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '().' → logprob: -0.004937597084790468
    2. '())' → logprob: -5.379937648773193
    3. '()' → logprob: -8.129937171936035
    4. ')' → logprob: -11.129937171936035
    5. '()))' → logprob: -11.879937171936035
    6. '()[' → logprob: -15.504937171936035
    7. ' ().' → logprob: -15.754937171936035
    8. ' ())' → logprob: -15.879937171936035
    9. '(' → logprob: -16.12993812561035
    10. '.readline' → logprob: -16.25493812561035

Token 19: 'split' (ID: 13627)
  Prédit: 'strip'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'strip' → logprob: -0.5912085771560669
    2. 'split' → logprob: -0.8412085771560669
    3. 'rstrip' → logprob: -4.341208457946777
    4. ')' → logprob: -6.466208457946777
    5. 'read' → logprob: -7.591208457946777
    6. '())' → logprob: -10.091208457946777
    7. '()' → logprob: -10.966208457946777
    8. '().' → logprob: -12.091208457946777
    9. ' split' → logprob: -13.466208457946777
    10. ' strip' → logprob: -13.466208457946777

Token 20: '())
' (ID: 4574)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ')' → logprob: -0.16106943786144257
    2. '))' → logprob: -1.911069393157959
    3. '())' → logprob: -7.286069393157959
    4. '()' → logprob: -9.411069869995117
    5. '()))' → logprob: -9.911069869995117
    6. ')))' → logprob: -10.786069869995117
    7. ')
' → logprob: -13.036069869995117
    8. '(' → logprob: -13.161069869995117
    9. '),' → logprob: -14.161069869995117
    10. '))
' → logprob: -14.411069869995117

Token 21: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.006759186275303364
    2. ')' → logprob: -5.506759166717529
    3. ' ' → logprob: -7.631759166717529
    4. '    ' → logprob: -7.631759166717529
    5. '    
' → logprob: -7.756759166717529
    6. 'a' → logprob: -7.881759166717529
    7. '  ' → logprob: -8.756759643554688
    8. ',' → logprob: -9.256759643554688
    9. ' 
' → logprob: -9.506759643554688
    10. '\n' → logprob: -9.631759643554688

Token 22: ' print' (ID: 2123)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.7846522331237793
    2. ')' → logprob: -1.4096522331237793
    3. 'a' → logprob: -2.5346522331237793
    4. ' ' → logprob: -3.4096522331237793
    5. '    ' → logprob: -3.6596522331237793
    6. ' a' → logprob: -3.9096522331237793
    7. '_' → logprob: -4.409652233123779
    8. 'A' → logprob: -4.409652233123779
    9. 'n' → logprob: -4.534652233123779
    10. 's' → logprob: -4.659652233123779

Token 23: '((' (ID: 2054)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(' → logprob: -0.057737309485673904
    2. '((' → logprob: -2.932737350463867
    3. '(A' → logprob: -5.932737350463867
    4. '(((' → logprob: -9.557737350463867
    5. '(sum' → logprob: -10.682737350463867
    6. '(int' → logprob: -10.807737350463867
    7. '(f' → logprob: -10.932737350463867
    8. '('' → logprob: -11.307737350463867
    9. '(a' → logprob: -11.557737350463867
    10. '(
' → logprob: -11.682737350463867

Token 24: 'P' (ID: 47)
  Prédit: '(A'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '(A' → logprob: -1.0076032876968384
    2. ' (' → logprob: -1.2576032876968384
    3. '(' → logprob: -1.8826032876968384
    4. 'A' → logprob: -2.132603168487549
    5. '3' → logprob: -2.882603168487549
    6. ' A' → logprob: -4.257603168487549
    7. '((' → logprob: -5.257603168487549
    8. ' ' → logprob: -6.257603168487549
    9. ' ((' → logprob: -7.007603168487549
    10. '4' → logprob: -7.132603168487549

Token 25: ' +' (ID: 659)
  Prédit: ' +'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' +' → logprob: -0.603277862071991
    2. '+' → logprob: -0.853277862071991
    3. '//' → logprob: -4.228277683258057
    4. '*' → logprob: -4.728277683258057
    5. ' //' → logprob: -5.978277683258057
    6. ' *' → logprob: -7.603277683258057
    7. ')' → logprob: -7.728277683258057
    8. ' ' → logprob: -11.103278160095215
    9. ' )' → logprob: -11.228278160095215
    10. ')//' → logprob: -11.353278160095215

Token 26: ' ' (ID: 220)
  Prédit: ' A'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' A' → logprob: -0.33219948410987854
    2. 'A' → logprob: -1.4571994543075562
    3. ' ' → logprob: -3.4571995735168457
    4. '3' → logprob: -5.457199573516846
    5. ' (' → logprob: -5.582199573516846
    6. '(A' → logprob: -5.832199573516846
    7. '4' → logprob: -6.332199573516846
    8. '5' → logprob: -6.707199573516846
    9. '2' → logprob: -6.707199573516846
    10. '10' → logprob: -7.082199573516846

Token 27: '3' (ID: 18)
  Prédit: '3'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '3' → logprob: -0.35552889108657837
    2. 'A' → logprob: -1.2305288314819336
    3. '(A' → logprob: -5.480528831481934
    4. '(' → logprob: -6.980528831481934
    5. '6' → logprob: -7.605528831481934
    6. ' ' → logprob: -7.855528831481934
    7. ' A' → logprob: -7.980528831481934
    8. '9' → logprob: -8.605528831481934
    9. '5' → logprob: -8.980528831481934
    10. '10' → logprob: -9.105528831481934

Token 28: ' *' (ID: 425)
  Prédit: '*'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '*' → logprob: -0.2953881323337555
    2. ' *' → logprob: -1.545388102531433
    3. '*A' → logprob: -3.1703882217407227
    4. ')' → logprob: -7.670388221740723
    5. ')*' → logprob: -10.920388221740723
    6. ' ' → logprob: -11.045388221740723
    7. '*(' → logprob: -11.295388221740723
    8. ' )' → logprob: -12.170388221740723
    9. '*)' → logprob: -12.420388221740723
    10. '0' → logprob: -12.420388221740723

Token 29: ' A' (ID: 355)
  Prédit: 'A'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'A' → logprob: -0.3484831154346466
    2. ' A' → logprob: -1.2234830856323242
    3. ' ' → logprob: -11.473483085632324
    4. ' (' → logprob: -11.723483085632324
    5. '(' → logprob: -11.848483085632324
    6. '(A' → logprob: -12.348483085632324
    7. '4' → logprob: -13.098483085632324
    8. '*A' → logprob: -13.598483085632324
    9. '	A' → logprob: -13.723483085632324
    10. ')' → logprob: -14.098483085632324

Token 30: ')' (ID: 8)
  Prédit: ')'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')' → logprob: -0.010394318960607052
    2. ')//' → logprob: -4.635394096374512
    3. ' )' → logprob: -7.385394096374512
    4. '))' → logprob: -11.135394096374512
    5. '//' → logprob: -12.885394096374512
    6. ')
' → logprob: -15.885394096374512
    7. ' //' → logprob: -15.885394096374512
    8. ')>>' → logprob: -16.135395050048828
    9. ')#' → logprob: -16.260395050048828
    10. '）' → logprob: -16.385395050048828

Token 31: ' >>' (ID: 6832)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ')' → logprob: -0.017262792214751244
    2. '//' → logprob: -4.892262935638428
    3. '))' → logprob: -5.267262935638428
    4. ')//' → logprob: -6.142262935638428
    5. ' //' → logprob: -6.767262935638428
    6. ' )' → logprob: -7.267262935638428
    7. ')))' → logprob: -8.64226245880127
    8. '%' → logprob: -9.14226245880127
    9. '   ' → logprob: -9.26726245880127
    10. ')%' → logprob: -10.89226245880127

Token 32: ' ' (ID: 220)
  Prédit: '1'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '1' → logprob: -0.0018561731558293104
    2. '2' → logprob: -6.376856327056885
    3. '3' → logprob: -8.876855850219727
    4. '0' → logprob: -12.626855850219727
    5. '4' → logprob: -12.876855850219727
    6. ' ' → logprob: -12.876855850219727
    7. '=' → logprob: -13.126855850219727
    8. '```' → logprob: -13.751855850219727
    9. '5' → logprob: -14.251855850219727
    10. '	' → logprob: -14.626855850219727

Token 33: '1' (ID: 16)
  Prédit: '1'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '1' → logprob: -0.03827076032757759
    2. '2' → logprob: -3.2882707118988037
    3. '3' → logprob: -8.413270950317383
    4. '=' → logprob: -13.288270950317383
    5. '	' → logprob: -13.663270950317383
    6. '```' → logprob: -14.288270950317383
    7. '0' → logprob: -14.350770950317383
    8. '4' → logprob: -14.350770950317383
    9. ' ' → logprob: -15.100770950317383
    10. '   ' → logprob: -15.225770950317383

Token 34: ')

' (ID: 1029)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ')' → logprob: -4.787507714354433e-05
    2. '))' → logprob: -10.00004768371582
    3. ' )' → logprob: -13.75004768371582
    4. ')))' → logprob: -14.50004768371582
    5. ')
' → logprob: -15.12504768371582
    6. '')' → logprob: -15.25004768371582
    7. '`)' → logprob: -15.50004768371582
    8. ')`' → logprob: -17.00004768371582
    9. '）' → logprob: -17.62504768371582
    10. '")' → logprob: -17.87504768371582

Token 35: 'if' (ID: 366)
  Prédit: '
'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '
' → logprob: -0.838600754737854
    2. '<|end|>' → logprob: -0.838600754737854
    3. '\n' → logprob: -2.0886006355285645
    4. '```' → logprob: -5.3386006355285645
    5. '\' → logprob: -6.3386006355285645
    6. '#' → logprob: -6.8386006355285645
    7. '<|end|>' → logprob: -7.0886006355285645
    8. ' ' → logprob: -7.4636006355285645
    9. 'newline' → logprob: -8.088601112365723
    10. '  
' → logprob: -8.213601112365723

Token 36: ' __' (ID: 2516)
  Prédit: ' __'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' __' → logprob: -0.0010505540994927287
    2. '__' → logprob: -6.8760504722595215
    3. ' ' → logprob: -11.12605094909668
    4. ' ' → logprob: -13.25105094909668
    5. '_' → logprob: -13.75105094909668
    6. ' _' → logprob: -15.37605094909668
    7. ' True' → logprob: -16.75105094909668
    8. ' name' → logprob: -17.37605094909668
    9. '  ' → logprob: -18.00105094909668
    10. ' ___' → logprob: -18.25105094909668

Token 37: 'name' (ID: 897)
  Prédit: '__'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '__' → logprob: -0.012074673548340797
    2. ' ==' → logprob: -4.8870744705200195
    3. '==' → logprob: -6.0120744705200195
    4. ' __' → logprob: -6.8870744705200195
    5. '.' → logprob: -7.5120744705200195
    6. '__.__' → logprob: -9.13707447052002
    7. '_' → logprob: -9.26207447052002
    8. '.__' → logprob: -9.38707447052002
    9. ' .' → logprob: -9.63707447052002
    10. '[' → logprob: -10.01207447052002

Token 38: '__' (ID: 771)
  Prédit: '__'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '__' → logprob: -1.3544423381972592e-05
    2. '_' → logprob: -12.12501335144043
    3. '==' → logprob: -12.62501335144043
    4. '___' → logprob: -13.12501335144043
    5. '__.' → logprob: -14.12501335144043
    6. '__.__' → logprob: -15.00001335144043
    7. '__["' → logprob: -15.25001335144043
    8. '____' → logprob: -15.50001335144043
    9. ' ==' → logprob: -16.12501335144043
    10. '__('' → logprob: -16.12501335144043

Token 39: ' ==' (ID: 951)
  Prédit: ' =='
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' ==' → logprob: -0.29438403248786926
    2. '__' → logprob: -1.4193840026855469
    3. '==' → logprob: -4.419384002685547
    4. '=="' → logprob: -7.169384002685547
    5. ' =="' → logprob: -9.294384002685547
    6. '_' → logprob: -9.794384002685547
    7. '=='' → logprob: -9.919384002685547
    8. '"' → logprob: -10.294384002685547
    9. '__.__' → logprob: -10.794384002685547
    10. '___' → logprob: -11.044384002685547

Token 40: ' "__' (ID: 27367)
  Prédit: '"'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '"' → logprob: -0.1602708250284195
    2. ''' → logprob: -1.9102708101272583
    3. '__' → logprob: -10.535270690917969
    4. ' "__' → logprob: -11.410270690917969
    5. ' "' → logprob: -12.035270690917969
    6. ' '__' → logprob: -14.035270690917969
    7. '"user' → logprob: -14.160270690917969
    8. ' '' → logprob: -15.035270690917969
    9. '"name' → logprob: -15.035270690917969
    10. '`' → logprob: -15.535270690917969

Token 41: 'main' (ID: 7731)
  Prédit: 'main'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'main' → logprob: -4.060365608893335e-05
    2. '__' → logprob: -10.875041007995605
    3. 'name' → logprob: -11.500041007995605
    4. 'built' → logprob: -12.625041007995605
    5. ' main' → logprob: -13.250041007995605
    6. '_main' → logprob: -13.375041007995605
    7. 'ma' → logprob: -13.500041007995605
    8. 'py' → logprob: -13.875041007995605
    9. 'm' → logprob: -14.125041007995605
    10. 'python' → logprob: -14.875041007995605

Token 42: '__":
' (ID: 49892)
  Prédit: '__'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '__' → logprob: -0.25196558237075806
    2. '__":
' → logprob: -1.5019655227661133
    3. '_' → logprob: -11.001965522766113
    4. '"' → logprob: -11.626965522766113
    5. '__':
' → logprob: -12.751965522766113
    6. '_"' → logprob: -13.126965522766113
    7. '__.' → logprob: -13.251965522766113
    8. '__["' → logprob: -13.376965522766113
    9. '__:' → logprob: -14.126965522766113
    10. '__("' → logprob: -14.126965522766113

Token 43: '   ' (ID: 271)
  Prédit: ' main'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' main' → logprob: -0.06353239715099335
    2. '   ' → logprob: -3.3135323524475098
    3. '	main' → logprob: -3.8135323524475098
    4. 'main' → logprob: -5.93853235244751
    5. '_main' → logprob: -8.563532829284668
    6. ' ' → logprob: -8.938532829284668
    7. '   ' → logprob: -9.188532829284668
    8. '_MAIN' → logprob: -11.938532829284668
    9. '(main' → logprob: -12.188532829284668
    10. ' ' → logprob: -12.438532829284668

Token 44: ' main' (ID: 2758)
  Prédit: ' main'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' main' → logprob: -0.6931677460670471
    2. 'main' (adapté à ' main') → logprob: -0.6931677460670471
    3. '	main' → logprob: -10.818167686462402
    4. '   ' → logprob: -14.693167686462402
    5. '_main' → logprob: -17.69316864013672
    6. ' ' → logprob: -18.06816864013672
    7. '(main' → logprob: -18.19316864013672
    8. 'maine' → logprob: -18.19316864013672
    9. ' ' → logprob: -18.44316864013672
    10. '.main' → logprob: -18.56816864013672

Token 45: '()' (ID: 416)
  Prédit: '()'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '()' → logprob: -9.567575034452602e-05
    2. '(' → logprob: -9.75009536743164
    3. '`()' → logprob: -11.00009536743164
    4. ']()' → logprob: -11.75009536743164
    5. '()
' → logprob: -12.37509536743164
    6. '()`' → logprob: -13.25009536743164
    7. '```' → logprob: -13.25009536743164
    8. ' ()' → logprob: -13.50009536743164
    9. '()\' → logprob: -14.62509536743164
    10. '()

' → logprob: -14.75009536743164


RÉSUMÉ:
--------------------------------------------------------------------------------
Total des tokens analysés: 43
Tokens correctement prédits (1ère position, stricte): 17
Tokens correctement prédits (1ère position, avec adaptation): 17
Tokens correctement prédits (top 10): 30
Précision stricte (1ère position): 39.53%
Précision adaptée (1ère position): 39.53%
Précision (top 10): 69.77%
================================================================================
