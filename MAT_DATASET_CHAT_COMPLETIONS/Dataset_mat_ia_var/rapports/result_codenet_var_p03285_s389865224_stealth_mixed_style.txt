================================================================================
ANALYSE DE PRÉDICTION TOKEN PAR TOKEN (BATCH API)
Date: 2025-06-04 20:11:38
Modèle de tokenisation: gpt-4o-mini
================================================================================

SCRIPT ANALYSÉ:
--------------------------------------------------------------------------------
from collections import deque
import heapq

N = int(input())
pile = [4, 7]
heapq.heapify(pile)
vu = set(pile)

def traiter(n):
    if n > N:
        print('No')
        return True
    if n == N:
        print('Yes')
        return True
    return False

while True:
    x = heapq.heappop(pile)
    if traiter(x):
        break
    for d in (4, 7):
        nxt = x + d
        if nxt not in vu:
            pile.append(nxt) if isinstance(pile, list) else heapq.heappush(pile, nxt)
            heapq.heapify(pile)
            vu.add(nxt)
--------------------------------------------------------------------------------

RÉSULTATS D'ANALYSE TOKEN PAR TOKEN:
--------------------------------------------------------------------------------
Token 0: 'from' (ID: 2845)
  → Token d'amorce (pas de prédiction)

Token 1: ' collections' (ID: 22690)
  → Token d'amorce (pas de prédiction)

Token 2: ' import' (ID: 1588)
  → Token d'amorce (pas de prédiction)

Token 3: ' deque' (ID: 90347)
  Prédit: 'deque'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'deque' → logprob: -1.0460870265960693
    2. 'default' → logprob: -1.1710870265960693
    3. 'abc' → logprob: -1.7960870265960693
    4. 'Counter' → logprob: -2.4210870265960693
    5. ' defaultdict' → logprob: -2.6710870265960693
    6. 'named' → logprob: -5.421087265014648
    7. ' Counter' → logprob: -5.546087265014648
    8. ' abc' → logprob: -6.046087265014648
    9. ' deque' → logprob: -6.421087265014648
    10. '```' → logprob: -6.796087265014648

Token 4: '
' (ID: 198)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '(' → logprob: -0.014323927462100983
    2. '.' → logprob: -5.014323711395264
    3. '\(' → logprob: -5.764323711395264
    4. '```' → logprob: -6.889323711395264
    5. '\' → logprob: -7.014323711395264
    6. '\n' → logprob: -7.264323711395264
    7. '[' → logprob: -8.014324188232422
    8. '(
' → logprob: -8.264324188232422
    9. 'import' → logprob: -8.389324188232422
    10. 'newline' → logprob: -8.389324188232422

Token 5: 'import' (ID: 561)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '(' → logprob: -0.536668598651886
    2. 'd' → logprob: -1.5366685390472412
    3. 'a' → logprob: -2.661668539047241
    4. '\n' → logprob: -3.536668539047241
    5. '\' → logprob: -3.786668539047241
    6. '[' → logprob: -4.53666877746582
    7. 'newline' → logprob: -4.78666877746582
    8. '
' → logprob: -4.78666877746582
    9. ',' → logprob: -5.16166877746582
    10. '.' → logprob: -5.41166877746582

Token 6: ' heap' (ID: 37237)
  Prédit: ' sys'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' sys' → logprob: -0.15303589403629303
    2. ' os' → logprob: -2.153035879135132
    3. ' collections' → logprob: -3.778035879135132
    4. ' itertools' → logprob: -6.778036117553711
    5. ' re' → logprob: -7.153036117553711
    6. ' ' → logprob: -8.028036117553711
    7. ' queue' → logprob: -8.528036117553711
    8. ' math' → logprob: -8.903036117553711
    9. ' heap' → logprob: -9.403036117553711
    10. ' threading' → logprob: -10.153036117553711

Token 7: 'q' (ID: 80)
  Prédit: 'q'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'q' → logprob: -0.00014692598779220134
    2. '.' → logprob: -9.375146865844727
    3. '_' → logprob: -9.875146865844727
    4. 'queue' → logprob: -12.500146865844727
    5. '=' → logprob: -13.375146865844727
    6. ')' → logprob: -13.500146865844727
    7. '#' → logprob: -14.125146865844727
    8. ',' → logprob: -14.875146865844727
    9. ' queue' → logprob: -15.000146865844727
    10. '

' → logprob: -15.000146865844727

Token 8: '

' (ID: 279)
  Prédit: '.'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '.' → logprob: -0.6938290596008301
    2. '(' → logprob: -1.56882905960083
    3. '
' → logprob: -2.44382905960083
    4. '\' → logprob: -2.69382905960083
    5. 'd' → logprob: -3.31882905960083
    6. '\n' → logprob: -3.56882905960083
    7. ',' → logprob: -4.31882905960083
    8. '' → logprob: -4.44382905960083
    9. 'def' → logprob: -4.69382905960083
    10. '#' → logprob: -4.69382905960083

Token 9: 'N' (ID: 45)
  Prédit: 'def'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'def' → logprob: -0.6739611625671387
    2. 'd' → logprob: -1.4239611625671387
    3. '`' → logprob: -2.7989611625671387
    4. 'class' → logprob: -3.0489611625671387
    5. 'q' → logprob: -3.1739611625671387
    6. '#' → logprob: -3.2989611625671387
    7. 'deque' → logprob: -4.298961162567139
    8. '.' → logprob: -4.798961162567139
    9. '```' → logprob: -4.923961162567139
    10. 'n' → logprob: -5.298961162567139

Token 10: ' =' (ID: 314)
  Prédit: ' ='
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' =' → logprob: -0.11786895245313644
    2. '=' → logprob: -2.8678689002990723
    3. ' ' → logprob: -2.9928689002990723
    4. ',' → logprob: -5.617868900299072
    5. ' ,' → logprob: -8.74286937713623
    6. '.' → logprob: -9.36786937713623
    7. '  ' → logprob: -9.49286937713623
    8. ')' → logprob: -9.61786937713623
    9. '<|end|>' → logprob: -9.86786937713623
    10. ' )' → logprob: -10.86786937713623

Token 11: ' int' (ID: 677)
  Prédit: ' int'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' int' → logprob: -0.2640991508960724
    2. ' ' → logprob: -1.63909912109375
    3. 'int' → logprob: -3.38909912109375
    4. '10' → logprob: -5.63909912109375
    5. '0' → logprob: -7.88909912109375
    6. '5' → logprob: -9.01409912109375
    7. '20' → logprob: -9.76409912109375
    8. '=int' → logprob: -10.63909912109375
    9. '[int' → logprob: -10.76409912109375
    10. '<int' → logprob: -11.38909912109375

Token 12: '(input' (ID: 10054)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(' → logprob: -0.0014930804027244449
    2. '('' → logprob: -6.876492977142334
    3. '(input' → logprob: -8.001493453979492
    4. '()' → logprob: -9.876493453979492
    5. '(N' → logprob: -10.626493453979492
    6. '("' → logprob: -11.126493453979492
    7. ' (' → logprob: -11.376493453979492
    8. '(`' → logprob: -11.751493453979492
    9. '(
' → logprob: -12.376493453979492
    10. '("("' → logprob: -12.376493453979492

Token 13: '())
' (ID: 4574)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ')' → logprob: -0.428066611289978
    2. '()' → logprob: -1.303066611289978
    3. '())' → logprob: -2.8030667304992676
    4. '(' → logprob: -4.178066730499268
    5. '))' → logprob: -7.803066730499268
    6. '`)' → logprob: -9.55306625366211
    7. '')' → logprob: -10.42806625366211
    8. '(
' → logprob: -11.05306625366211
    9. '(

' → logprob: -11.67806625366211
    10. '")' → logprob: -11.92806625366211

Token 14: 'pile' (ID: 112229)
  Prédit: 'data'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'data' → logprob: -0.6808139085769653
    2. 'arr' → logprob: -1.8058139085769653
    3. 'd' → logprob: -2.930813789367676
    4. 'items' → logprob: -3.180813789367676
    5. 'queue' → logprob: -3.430813789367676
    6. 'graph' → logprob: -3.555813789367676
    7. 'array' → logprob: -3.680813789367676
    8. 'lst' → logprob: -3.930813789367676
    9. 'a' → logprob: -4.430813789367676
    10. 'numbers' → logprob: -4.555813789367676

Token 15: ' =' (ID: 314)
  Prédit: 's'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 's' → logprob: -0.0017850141739472747
    2. ' =' → logprob: -6.376784801483154
    3. '=' → logprob: -10.001785278320312
    4. '_s' → logprob: -11.001785278320312
    5. '_' → logprob: -11.751785278320312
    6. '[s' → logprob: -13.001785278320312
    7. '=[]' → logprob: -13.251785278320312
    8. '[]' → logprob: -13.626785278320312
    9. ' s' → logprob: -13.626785278320312
    10. '[' → logprob: -14.001785278320312

Token 16: ' [' (ID: 723)
  Prédit: ' deque'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' deque' → logprob: -0.47806838154792786
    2. 'deque' → logprob: -0.9780683517456055
    3. ' []' → logprob: -5.6030683517456055
    4. '[]' → logprob: -8.853068351745605
    5. ' ' → logprob: -9.478068351745605
    6. ' [' → logprob: -10.978068351745605
    7. ' deck' → logprob: -11.603068351745605
    8. ' list' → logprob: -11.978068351745605
    9. ' de' → logprob: -11.978068351745605
    10. '   ' → logprob: -12.103068351745605

Token 17: '4' (ID: 19)
  Prédit: '0'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '0' → logprob: -0.5772818922996521
    2. ']' → logprob: -1.8272819519042969
    3. 'int' → logprob: -1.9522819519042969
    4. '[]' → logprob: -2.202281951904297
    5. 'list' → logprob: -4.327281951904297
    6. '(int' → logprob: -5.952281951904297
    7. '()]' → logprob: -5.952281951904297
    8. ']int' → logprob: -5.952281951904297
    9. '[int' → logprob: -6.202281951904297
    10. 'deque' → logprob: -6.827281951904297

Token 18: ',' (ID: 11)
  Prédit: ','
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ',' → logprob: -0.5179747343063354
    2. ']' → logprob: -1.1429747343063354
    3. '0' → logprob: -3.142974853515625
    4. '5' → logprob: -3.892974853515625
    5. '7' → logprob: -4.767974853515625
    6. ' ]' → logprob: -5.017974853515625
    7. '2' → logprob: -6.392974853515625
    8. '3' → logprob: -6.517974853515625
    9. '6' → logprob: -6.767974853515625
    10. ')' → logprob: -7.267974853515625

Token 19: ' ' (ID: 220)
  Prédit: ' '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' ' → logprob: -0.1323634833097458
    2. '3' → logprob: -3.3823635578155518
    3. '2' → logprob: -4.007363319396973
    4. '1' → logprob: -4.007363319396973
    5. '7' → logprob: -4.382363319396973
    6. '6' → logprob: -4.507363319396973
    7. '5' → logprob: -4.632363319396973
    8. '8' → logprob: -4.882363319396973
    9. '9' → logprob: -5.007363319396973
    10. '4' → logprob: -5.882363319396973

Token 20: '7' (ID: 22)
  Prédit: ' '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' ' → logprob: -0.9446871876716614
    2. '3' → logprob: -1.0696871280670166
    3. '5' → logprob: -2.8196871280670166
    4. '2' → logprob: -3.1946871280670166
    5. '7' → logprob: -3.1946871280670166
    6. '1' → logprob: -3.3196871280670166
    7. '6' → logprob: -3.4446871280670166
    8. '8' → logprob: -3.8196871280670166
    9. '9' → logprob: -4.194687366485596
    10. '4' → logprob: -4.569687366485596

Token 21: ']
' (ID: 1592)
  Prédit: ','
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ',' → logprob: -0.05164869502186775
    2. ']' → logprob: -3.0516486167907715
    3. ')' → logprob: -6.8016486167907715
    4. '7' → logprob: -7.3016486167907715
    5. '4' → logprob: -7.4266486167907715
    6. '3' → logprob: -9.05164909362793
    7. '5' → logprob: -9.17664909362793
    8. '6' → logprob: -9.17664909362793
    9. '9' → logprob: -9.30164909362793
    10. '0' → logprob: -10.05164909362793

Token 22: 'heap' (ID: 38535)
  Prédit: 'for'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'for' → logprob: -1.090308666229248
    2. 'while' → logprob: -1.590308666229248
    3. ' ' → logprob: -2.090308666229248
    4. ',' → logprob: -2.465308666229248
    5. ' for' → logprob: -2.965308666229248
    6. '
' → logprob: -2.965308666229248
    7. '.' → logprob: -3.340308666229248
    8. ' while' → logprob: -3.340308666229248
    9. ' 
' → logprob: -4.590308666229248
    10. '#' → logprob: -4.590308666229248

Token 23: 'q' (ID: 80)
  Prédit: 'q'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'q' → logprob: -0.06222042813897133
    2. '.' → logprob: -2.812220335006714
    3. '.q' → logprob: -8.562220573425293
    4. '.push' → logprob: -11.312220573425293
    5. '.he' → logprob: -11.312220573425293
    6. '.queue' → logprob: -11.812220573425293
    7. '.heap' → logprob: -11.937220573425293
    8. ' .' → logprob: -12.187220573425293
    9. '[' → logprob: -12.437220573425293
    10. 'ify' → logprob: -13.187220573425293

Token 24: '.heap' (ID: 177287)
  Prédit: '.'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '.' → logprob: -0.006588539574295282
    2. '.he' → logprob: -5.131588459014893
    3. '.heap' → logprob: -7.506588459014893
    4. '.put' → logprob: -11.00658893585205
    5. '.q' → logprob: -11.13158893585205
    6. '.push' → logprob: -11.13158893585205
    7. '.`' → logprob: -12.00658893585205
    8. '.append' → logprob: -12.13158893585205
    9. '.n' → logprob: -12.13158893585205
    10. '.dot' → logprob: -12.75658893585205

Token 25: 'ify' (ID: 1985)
  Prédit: 'push'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'push' → logprob: -0.498524010181427
    2. 'ify' → logprob: -0.998524010181427
    3. 'ush' → logprob: -4.373524188995361
    4. 'p' → logprob: -5.373524188995361
    5. '```' → logprob: -6.123524188995361
    6. 'replace' → logprob: -6.498524188995361
    7. 'app' → logprob: -6.498524188995361
    8. '_push' → logprob: -7.748524188995361
    9. 'pp' → logprob: -8.123523712158203
    10. 'q' → logprob: -8.498523712158203

Token 26: '(p' (ID: 2407)
  Prédit: '(p'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(p' → logprob: -0.009995358064770699
    2. '(' → logprob: -4.634995460510254
    3. '(heap' → logprob: -8.384995460510254
    4. ')' → logprob: -12.009995460510254
    5. '((' → logprob: -14.134995460510254
    6. ' (' → logprob: -14.759995460510254
    7. '(n' → logprob: -14.884995460510254
    8. '()' → logprob: -15.009995460510254
    9. '(pl' → logprob: -15.134995460510254
    10. '(h' → logprob: -15.259995460510254

Token 27: 'ile' (ID: 554)
  Prédit: 'ile'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'ile' → logprob: -0.0001495484757469967
    2. 'il' → logprob: -9.500149726867676
    3. 'i' → logprob: -10.500149726867676
    4. 'le' → logprob: -10.875149726867676
    5. ')' → logprob: -11.750149726867676
    6. 'pile' → logprob: -12.750149726867676
    7. 'l' → logprob: -13.250149726867676
    8. '   ' → logprob: -13.750149726867676
    9. '[' → logprob: -13.875149726867676
    10. ' ile' → logprob: -14.125149726867676

Token 28: ')
' (ID: 446)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')' → logprob: -1.981667537620524e-06
    2. ')
' → logprob: -13.750001907348633
    3. '))' → logprob: -14.375001907348633
    4. ' )' → logprob: -16.000001907348633
    5. ')`' → logprob: -17.250001907348633
    6. ')p' → logprob: -17.375001907348633
    7. ')#' → logprob: -17.375001907348633
    8. '#' → logprob: -17.750001907348633
    9. ')

' → logprob: -17.875001907348633
    10. '),' → logprob: -17.875001907348633

Token 29: 'vu' (ID: 18925)
  Prédit: '
'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '
' → logprob: -0.16856054961681366
    2. 'while' → logprob: -2.79356050491333
    3. 'for' → logprob: -2.91856050491333
    4. ',' → logprob: -4.79356050491333
    5. ' 
' → logprob: -4.91856050491333
    6. ' for' → logprob: -5.66856050491333
    7. ' while' → logprob: -5.66856050491333
    8. '
' → logprob: -5.91856050491333
    9. 'heap' → logprob: -6.29356050491333
    10. '#' → logprob: -6.54356050491333

Token 30: ' =' (ID: 314)
  Prédit: 'm'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'm' → logprob: -0.06054181233048439
    2. '[m' → logprob: -3.935541868209839
    3. '[' → logprob: -4.18554162979126
    4. 'mb' → logprob: -4.93554162979126
    5. 'd' → logprob: -6.31054162979126
    6. '[]' → logprob: -6.43554162979126
    7. 'visited' → logprob: -6.68554162979126
    8. 'st' → logprob: -6.81054162979126
    9. 't' → logprob: -6.93554162979126
    10. '[v' → logprob: -7.18554162979126

Token 31: ' set' (ID: 920)
  Prédit: ' set'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' set' → logprob: -0.2530248463153839
    2. 'set' → logprob: -1.5030248165130615
    3. '{}' → logprob: -7.503025054931641
    4. ' ' → logprob: -8.00302505493164
    5. ' {}' → logprob: -8.87802505493164
    6. '{' → logprob: -10.25302505493164
    7. ' {' → logprob: -11.25302505493164
    8. ' []' → logprob: -11.87802505493164
    9. '[]' → logprob: -12.25302505493164
    10. '(set' → logprob: -12.62802505493164

Token 32: '(p' (ID: 2407)
  Prédit: '()'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '()' → logprob: -0.031993184238672256
    2. '(' → logprob: -3.7819931507110596
    3. '(p' → logprob: -5.031993389129639
    4. '([]' → logprob: -6.531993389129639
    5. '([' → logprob: -8.15699291229248
    6. '({' → logprob: -8.65699291229248
    7. '((' → logprob: -9.53199291229248
    8. '()]' → logprob: -10.53199291229248
    9. '(v' → logprob: -11.03199291229248
    10. '(range' → logprob: -11.03199291229248

Token 33: 'ile' (ID: 554)
  Prédit: 'ile'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'ile' → logprob: -0.0003956416912842542
    2. '(p' → logprob: -9.250395774841309
    3. 'pile' → logprob: -9.250395774841309
    4. ')' → logprob: -9.750395774841309
    5. '(' → logprob: -10.250395774841309
    6. 'il' → logprob: -10.375395774841309
    7. '(v' → logprob: -11.000395774841309
    8. 'v' → logprob: -11.625395774841309
    9. '[' → logprob: -11.750395774841309
    10. '{' → logprob: -11.875395774841309

Token 34: ')

' (ID: 1029)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')' → logprob: -3.4121114822482923e-06
    2. ')
' → logprob: -13.375003814697266
    3. '))' → logprob: -14.375003814697266
    4. ' )' → logprob: -15.500003814697266
    5. '`)' → logprob: -15.750003814697266
    6. '}' → logprob: -16.250003814697266
    7. '<|end|>' → logprob: -16.375003814697266
    8. '),' → logprob: -16.500003814697266
    9. ')`' → logprob: -16.625003814697266
    10. ')

' → logprob: -16.750003814697266

Token 35: 'def' (ID: 1314)
  Prédit: 'for'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'for' → logprob: -0.027202345430850983
    2. ' for' → logprob: -3.7772023677825928
    3. 'while' → logprob: -5.652202129364014
    4. ' while' → logprob: -8.402202606201172
    5. '
' → logprob: -9.027202606201172
    6. ')' → logprob: -10.527202606201172
    7. ' ' → logprob: -10.777202606201172
    8. '\n' → logprob: -11.527202606201172
    9. ' 
' → logprob: -11.652202606201172
    10. '```' → logprob: -12.152202606201172

Token 36: ' traiter' (ID: 105852)
  Prédit: ' bfs'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' bfs' → logprob: -0.20768682658672333
    2. ' generate' → logprob: -2.3326869010925293
    3. ' add' → logprob: -3.3326869010925293
    4. ' solve' → logprob: -4.582686901092529
    5. ' dfs' → logprob: -4.582686901092529
    6. ' can' → logprob: -4.957686901092529
    7. ' ' → logprob: -4.957686901092529
    8. ' main' → logprob: -5.457686901092529
    9. ' is' → logprob: -5.707686901092529
    10. ' find' → logprob: -5.832686901092529

Token 37: '(n' (ID: 2406)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '(' → logprob: -0.35037511587142944
    2. '_' → logprob: -1.3503751754760742
    3. '_(' → logprob: -3.975375175476074
    4. '_p' → logprob: -5.100375175476074
    5. '_trait' → logprob: -5.225375175476074
    6. '(_' → logprob: -5.725375175476074
    7. '(p' → logprob: -6.850375175476074
    8. '(_)' → logprob: -7.225375175476074
    9. '_tr' → logprob: -8.350375175476074
    10. '('_' → logprob: -8.725375175476074

Token 38: '):
' (ID: 1883)
  Prédit: '):'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '):' → logprob: -0.05668052285909653
    2. ')' → logprob: -2.93168044090271
    3. 'u' → logprob: -7.056680679321289
    4. 'um' → logprob: -8.181680679321289
    5. 'e' → logprob: -8.806680679321289
    6. 'umer' → logprob: -8.931680679321289
    7. ',' → logprob: -9.556680679321289
    8. '):
' → logprob: -9.681680679321289
    9. 'umber' → logprob: -9.931680679321289
    10. '_' → logprob: -10.931680679321289

Token 39: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.7076220512390137
    2. ':' → logprob: -0.9576220512390137
    3. ')' → logprob: -2.8326220512390137
    4. '):' → logprob: -3.4576220512390137
    5. ' ' → logprob: -4.957622051239014
    6. ' :' → logprob: -5.207622051239014
    7. '(' → logprob: -5.457622051239014
    8. ' 
' → logprob: -5.707622051239014
    9. '<|end|>' → logprob: -6.082622051239014
    10. ' if' → logprob: -6.207622051239014

Token 40: ' if' (ID: 538)
  Prédit: ' if'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' if' → logprob: -0.7114787101745605
    2. ' while' → logprob: -1.0864787101745605
    3. 'if' (adapté à ' if') → logprob: -2.2114787101745605
    4. 'while' → logprob: -3.3364787101745605
    5. ' for' → logprob: -4.5864787101745605
    6. '   ' → logprob: -5.0864787101745605
    7. 'for' → logprob: -5.4614787101745605
    8. 'heap' → logprob: -5.9614787101745605
    9. ' heap' → logprob: -6.0864787101745605
    10. 'q' → logprob: -8.086479187011719

Token 41: ' n' (ID: 297)
  Prédit: ' n'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' n' → logprob: -0.25228244066238403
    2. 'n' → logprob: -1.5022823810577393
    3. ' ' → logprob: -8.37728214263916
    4. ' not' → logprob: -10.50228214263916
    5. ' len' → logprob: -11.00228214263916
    6. '   ' → logprob: -11.25228214263916
    7. '4' → logprob: -11.62728214263916
    8. 'len' → logprob: -11.75228214263916
    9. ' abs' → logprob: -11.75228214263916
    10. '(n' → logprob: -11.87728214263916

Token 42: ' >' (ID: 1424)
  Prédit: ' <'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' <' → logprob: -1.4654035568237305
    2. ' >' → logprob: -1.8404035568237305
    3. ' <=' → logprob: -2.0904035568237305
    4. '*' → logprob: -2.4654035568237305
    5. ' ==' → logprob: -2.5904035568237305
    6. '>' → logprob: -2.7154035568237305
    7. ' in' → logprob: -2.9654035568237305
    8. '==' → logprob: -3.0904035568237305
    9. ' *' → logprob: -3.4654035568237305
    10. '<' → logprob: -3.7154035568237305

Token 43: ' N' (ID: 478)
  Prédit: '10'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '10' → logprob: -0.9485609531402588
    2. '100' → logprob: -0.9485609531402588
    3. 'N' → logprob: -1.6985609531402588
    4. '1' → logprob: -3.448560953140259
    5. ' ' → logprob: -5.94856071472168
    6. '200' → logprob: -6.32356071472168
    7. '20' → logprob: -7.07356071472168
    8. '999' → logprob: -7.19856071472168
    9. '500' → logprob: -7.32356071472168
    10. '2' → logprob: -7.32356071472168

Token 44: ':
' (ID: 734)
  Prédit: ':'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ':' → logprob: -0.023246407508850098
    2. ':return' → logprob: -4.0232462882995605
    3. ' :' → logprob: -6.2732462882995605
    4. ' or' → logprob: -6.6482462882995605
    5. ':
' → logprob: -7.0232462882995605
    6. '   ' → logprob: -7.1482462882995605
    7. ' return' → logprob: -9.523246765136719
    8. '       ' → logprob: -9.773246765136719
    9. ' and' → logprob: -10.523246765136719
    10. ' ' → logprob: -11.023246765136719

Token 45: '       ' (ID: 309)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.30205219984054565
    2. ' return' → logprob: -1.5520522594451904
    3. '       ' → logprob: -3.6770522594451904
    4. '	return' → logprob: -4.177052021026611
    5. ':return' → logprob: -5.802052021026611
    6. 'return' → logprob: -6.052052021026611
    7. '<|end|>' → logprob: -7.177052021026611
    8. '    ' → logprob: -7.927052021026611
    9. '   ' → logprob: -8.05205249786377
    10. ' ' → logprob: -8.17705249786377

Token 46: ' print' (ID: 2123)
  Prédit: ' return'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' return' → logprob: -0.4032132029533386
    2. 'return' → logprob: -1.6532132625579834
    3. '       ' → logprob: -2.2782132625579834
    4. '   ' → logprob: -3.2782132625579834
    5. '	return' → logprob: -8.528213500976562
    6. ':return' → logprob: -10.778213500976562
    7. ' ' → logprob: -12.028213500976562
    8. '   ' → logprob: -13.028213500976562
    9. '{return' → logprob: -13.653213500976562
    10. '```' → logprob: -14.028213500976562

Token 47: '('' (ID: 706)
  Prédit: '(n'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(n' → logprob: -0.15862807631492615
    2. '(' → logprob: -2.033627986907959
    3. '()' → logprob: -4.533627986907959
    4. '("' → logprob: -5.908627986907959
    5. '('' → logprob: -6.408627986907959
    6. '("("' → logprob: -8.158628463745117
    7. '(N' → logprob: -9.033628463745117
    8. '("")' → logprob: -9.408628463745117
    9. '(-' → logprob: -10.158628463745117
    10. '(
' → logprob: -10.783628463745117

Token 48: 'No' (ID: 3160)
  Prédit: '-'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '-' → logprob: -1.3623672723770142
    2. 'n' → logprob: -1.6123672723770142
    3. 'KO' → logprob: -2.6123671531677246
    4. 'NO' → logprob: -2.8623671531677246
    5. 'Impossible' → logprob: -3.2373671531677246
    6. 'WIN' → logprob: -3.2373671531677246
    7. 'None' → logprob: -3.7373671531677246
    8. 'Too' → logprob: -4.112367153167725
    9. 'OK' → logprob: -4.112367153167725
    10. 'N' → logprob: -4.237367153167725

Token 49: '')
' (ID: 2515)
  Prédit: '')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '')' → logprob: -0.5432444214820862
    2. ')' → logprob: -0.9182444214820862
    3. 'pe' → logprob: -4.918244361877441
    4. 't' → logprob: -5.293244361877441
    5. '\n' → logprob: -6.293244361877441
    6. 'n' → logprob: -6.293244361877441
    7. '")' → logprob: -6.543244361877441
    8. ' ')' → logprob: -7.668244361877441
    9. ' )' → logprob: -8.043244361877441
    10. '')
' → logprob: -8.168244361877441

Token 50: '       ' (ID: 309)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.2050621211528778
    2. '       ' → logprob: -2.4550621509552
    3. '<|end|>' → logprob: -3.5800621509552
    4. ' return' → logprob: -3.9550621509552
    5. ' ' → logprob: -4.080061912536621
    6. '	return' → logprob: -4.330061912536621
    7. '    ' → logprob: -5.080061912536621
    8. ':return' → logprob: -5.955061912536621
    9. ')' → logprob: -6.205061912536621
    10. '    
' → logprob: -6.330061912536621

Token 51: ' return' (ID: 622)
  Prédit: '       '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '       ' → logprob: -0.032887786626815796
    2. ' return' → logprob: -3.6578876972198486
    3. 'return' (adapté à ' return') → logprob: -5.157887935638428
    4. '   ' → logprob: -8.03288745880127
    5. '	return' → logprob: -8.15788745880127
    6. ')' → logprob: -9.53288745880127
    7. ' ' → logprob: -9.90788745880127
    8. '	' → logprob: -11.03288745880127
    9. ':return' → logprob: -11.53288745880127
    10. ')return' → logprob: -11.78288745880127

Token 52: ' True' (ID: 6432)
  Prédit: '
'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '
' → logprob: -0.9423234462738037
    2. '\n' → logprob: -1.4423234462738037
    3. ' 
' → logprob: -1.4423234462738037
    4. 'n' → logprob: -3.3173234462738037
    5. '   ' → logprob: -3.3173234462738037
    6. '    
' → logprob: -3.5673234462738037
    7. '<|end|>' → logprob: -4.567323684692383
    8. '  
' → logprob: -4.942323684692383
    9. ' ' → logprob: -4.942323684692383
    10. ')' → logprob: -6.317323684692383

Token 53: '
' (ID: 198)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.7668793201446533
    2. '<|end|>' → logprob: -1.0168793201446533
    3. '\n' → logprob: -3.0168793201446533
    4. '
' → logprob: -3.5168793201446533
    5. ' ' → logprob: -3.5168793201446533
    6. '    
' → logprob: -4.141879081726074
    7. ' 
' → logprob: -4.141879081726074
    8. ')' → logprob: -4.641879081726074
    9. '  ' → logprob: -5.016879081726074
    10. '  
' → logprob: -5.516879081726074

Token 54: '   ' (ID: 271)
  Prédit: ''
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False

Token 55: ' if' (ID: 538)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.46383997797966003
    2. ' if' → logprob: -2.2138400077819824
    3. ' 
' → logprob: -2.8388400077819824
    4. '    
' → logprob: -3.0888400077819824
    5. '<|end|>' → logprob: -3.0888400077819824
    6. 'if' (adapté à ' if') → logprob: -3.2138400077819824
    7. '
' → logprob: -3.5888400077819824
    8. ' ' → logprob: -3.9638400077819824
    9. '  
' → logprob: -4.588840007781982
    10. '   
' → logprob: -5.088840007781982

Token 56: ' n' (ID: 297)
  Prédit: ' n'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' n' → logprob: -0.17987698316574097
    2. 'n' → logprob: -1.8048770427703857
    3. 'N' → logprob: -10.054877281188965
    4. ' ' → logprob: -10.554877281188965
    5. ' N' → logprob: -10.679877281188965
    6. ' ' → logprob: -10.804877281188965
    7. '	n' → logprob: -11.929877281188965
    8. ' not' → logprob: -12.742377281188965
    9. '0' → logprob: -13.117377281188965
    10. '(n' → logprob: -13.992377281188965

Token 57: ' ==' (ID: 951)
  Prédit: ' in'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' in' → logprob: -0.047599177807569504
    2. ' ==' → logprob: -3.4225990772247314
    3. 'in' → logprob: -5.0475993156433105
    4. '==' → logprob: -5.5475993156433105
    5. ' ' → logprob: -5.6725993156433105
    6. ' not' → logprob: -9.672598838806152
    7. ' ' → logprob: -12.422598838806152
    8. 'not' → logprob: -12.860098838806152
    9. '%' → logprob: -12.922598838806152
    10. '  ' → logprob: -13.110098838806152

Token 58: ' N' (ID: 478)
  Prédit: 'N'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'N' → logprob: -0.005959375761449337
    2. ' N' → logprob: -5.130959510803223
    3. '0' → logprob: -11.130959510803223
    4. ' ' → logprob: -11.380959510803223
    5. '4' → logprob: -13.130959510803223
    6. '   ' → logprob: -13.880959510803223
    7. '1' → logprob: -15.005959510803223
    8. '<|end|>' → logprob: -15.005959510803223
    9. 'n' → logprob: -15.380959510803223
    10. '7' → logprob: -15.505959510803223

Token 59: ':
' (ID: 734)
  Prédit: ':'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ':' → logprob: -0.005984139163047075
    2. ':
' → logprob: -5.130984306335449
    3. '):' → logprob: -10.13098430633545
    4. ' :' → logprob: -12.25598430633545
    5. '   ' → logprob: -12.38098430633545
    6. '):
' → logprob: -12.88098430633545
    7. ' or' → logprob: -13.75598430633545
    8. ')' → logprob: -14.50598430633545
    9. ':
' → logprob: -14.63098430633545
    10. '.' → logprob: -14.75598430633545

Token 60: '       ' (ID: 309)
  Prédit: '       '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '       ' → logprob: -0.0050443559885025024
    2. ' print' → logprob: -6.005044460296631
    3. 'print' → logprob: -6.130044460296631
    4. '   ' → logprob: -8.255043983459473
    5. '<|end|>' → logprob: -9.505043983459473
    6. ' ' → logprob: -10.880043983459473
    7. '	print' → logprob: -11.755043983459473
    8. '        
' → logprob: -12.505043983459473
    9. '      ' → logprob: -12.630043983459473
    10. '<|end|>' → logprob: -12.755043983459473

Token 61: ' print' (ID: 2123)
  Prédit: 'print'
  Correct (stricte): False
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'print' (adapté à ' print') → logprob: -0.04915691167116165
    2. ' print' → logprob: -3.049156904220581
    3. '       ' → logprob: -8.04915714263916
    4. '   ' → logprob: -8.42415714263916
    5. '	print' → logprob: -11.17415714263916
    6. ' ' → logprob: -11.92415714263916
    7. '```' → logprob: -12.67415714263916
    8. '  ' → logprob: -13.04915714263916
    9. 'return' → logprob: -14.04915714263916
    10. '    ' → logprob: -14.17415714263916

Token 62: '('' (ID: 706)
  Prédit: '(''
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '('' → logprob: -0.008620958775281906
    2. '(' → logprob: -4.758620738983154
    3. '("' → logprob: -12.008621215820312
    4. '(
' → logprob: -17.133621215820312
    5. '(('' → logprob: -17.258621215820312
    6. '('(' → logprob: -17.258621215820312
    7. '(True' → logprob: -17.383621215820312
    8. ' ('' → logprob: -17.508621215820312
    9. '(\'' → logprob: -17.758621215820312
    10. ''' → logprob: -18.133621215820312

Token 63: 'Yes' (ID: 13022)
  Prédit: 'Yes'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'Yes' → logprob: -0.00026896485360339284
    2. ''' → logprob: -8.875268936157227
    3. 'Oui' → logprob: -9.000268936157227
    4. 'YES' → logprob: -12.750268936157227
    5. 'Ye' → logprob: -13.125268936157227
    6. 'Ok' → logprob: -15.500268936157227
    7. ' Yes' → logprob: -15.625268936157227
    8. 'Y' → logprob: -16.125268936157227
    9. 'Yeah' → logprob: -16.625268936157227
    10. '"' → logprob: -16.625268936157227

Token 64: '')
' (ID: 2515)
  Prédit: '')
'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '')
' → logprob: -0.5790342688560486
    2. '')' → logprob: -0.8290342688560486
    3. ')' → logprob: -6.579034328460693
    4. '')
' → logprob: -6.829034328460693
    5. ')
' → logprob: -7.829034328460693
    6. ')')
' → logprob: -9.329033851623535
    7. '   ' → logprob: -9.579033851623535
    8. '       ' → logprob: -10.579033851623535
    9. ''' → logprob: -11.579033851623535
    10. '")
' → logprob: -12.204033851623535

Token 65: '       ' (ID: 309)
  Prédit: '       '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '       ' → logprob: -0.0042951651848852634
    2. '<|end|>' → logprob: -5.504295349121094
    3. '<|end|>' → logprob: -9.629295349121094
    4. '   ' → logprob: -9.754295349121094
    5. ',' → logprob: -10.754295349121094
    6. ' return' → logprob: -10.754295349121094
    7. '	' → logprob: -11.629295349121094
    8. '	return' → logprob: -11.754295349121094
    9. '
' → logprob: -12.129295349121094
    10. ')' → logprob: -12.254295349121094

Token 66: ' return' (ID: 622)
  Prédit: '       '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '       ' → logprob: -0.007690747268497944
    2. 'return' (adapté à ' return') → logprob: -5.507690906524658
    3. '
' → logprob: -6.257690906524658
    4. ' return' → logprob: -6.757690906524658
    5. '	return' → logprob: -9.0076904296875
    6. ')' → logprob: -9.1326904296875
    7. '   ' → logprob: -10.0076904296875
    8. ':return' → logprob: -10.2576904296875
    9. '```' → logprob: -10.2576904296875
    10. ')
' → logprob: -10.8826904296875

Token 67: ' True' (ID: 6432)
  Prédit: ' True'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' True' → logprob: -0.04119059816002846
    2. 'True' → logprob: -3.2911906242370605
    3. ' False' → logprob: -5.9161906242370605
    4. 'False' → logprob: -8.291190147399902
    5. '
' → logprob: -9.291190147399902
    6. ' None' → logprob: -9.666190147399902
    7. ' ' → logprob: -11.041190147399902
    8. '(True' → logprob: -11.166190147399902
    9. 'None' → logprob: -12.541190147399902
    10. ' 
' → logprob: -12.791190147399902

Token 68: '
' (ID: 198)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.04665280133485794
    2. '    
' → logprob: -3.2966527938842773
    3. '
' → logprob: -5.296652793884277
    4. '<|end|>' → logprob: -6.171652793884277
    5. ' 
' → logprob: -7.921652793884277
    6. '\n' → logprob: -8.046652793884277
    7. '   
' → logprob: -8.171652793884277
    8. '  
' → logprob: -8.546652793884277
    9. '```' → logprob: -9.921652793884277
    10. '<|end|>' → logprob: -10.171652793884277

Token 69: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.6491431593894958
    2. '    
' → logprob: -1.2741432189941406
    3. ' 
' → logprob: -2.2741432189941406
    4. '
' → logprob: -3.0241432189941406
    5. '   
' → logprob: -3.6491432189941406
    6. '  
' → logprob: -4.274143218994141
    7. '\n' → logprob: -6.024143218994141
    8. '<|end|>' → logprob: -6.524143218994141
    9. '     
' → logprob: -7.774143218994141
    10. '  ' → logprob: -8.02414321899414

Token 70: ' return' (ID: 622)
  Prédit: 'for'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'for' → logprob: -0.29350557923316956
    2. ' for' → logprob: -2.2935056686401367
    3. 'if' → logprob: -2.5435056686401367
    4. '   ' → logprob: -3.0435056686401367
    5. '    
' → logprob: -4.293505668640137
    6. ' if' → logprob: -5.293505668640137
    7. 'heap' → logprob: -6.043505668640137
    8. 'n' → logprob: -7.293505668640137
    9. 'while' → logprob: -7.293505668640137
    10. ' 
' → logprob: -7.543505668640137

Token 71: ' False' (ID: 7983)
  Prédit: 'False'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'False' → logprob: -0.005234952084720135
    2. ' False' → logprob: -5.255234718322754
    3. 'True' → logprob: -14.255234718322754
    4. 'None' → logprob: -14.630234718322754
    5. '(False' → logprob: -16.75523567199707
    6. '[]' → logprob: -17.75523567199707
    7. '0' → logprob: -18.75523567199707
    8. ' True' → logprob: -18.88023567199707
    9. ' None' → logprob: -19.38023567199707
    10. '   ' → logprob: -19.63023567199707

Token 72: '

' (ID: 279)
  Prédit: ''
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False

Token 73: 'while' (ID: 7032)
  Prédit: 'while'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'while' → logprob: -0.00601316848769784
    2. ' while' → logprob: -5.1310133934021
    3. 'for' → logprob: -10.131012916564941
    4. '```' → logprob: -10.631012916564941
    5. '
' → logprob: -12.006012916564941
    6. 'While' → logprob: -12.756012916564941
    7. 'wh' → logprob: -13.256012916564941
    8. 'def' → logprob: -13.506012916564941
    9. ' 
' → logprob: -14.006012916564941
    10. 'w' → logprob: -14.131012916564941

Token 74: ' True' (ID: 6432)
  Prédit: 'pile'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'pile' → logprob: -0.0037062542978674173
    2. ' pile' → logprob: -5.628706455230713
    3. 'len' → logprob: -9.253705978393555
    4. 'pil' → logprob: -12.253705978393555
    5. ' len' → logprob: -13.253705978393555
    6. 'not' → logprob: -14.503705978393555
    7. '```' → logprob: -14.628705978393555
    8. '   ' → logprob: -14.878705978393555
    9. ' ' → logprob: -15.128705978393555
    10. 'p' → logprob: -15.128705978393555

Token 75: ':
' (ID: 734)
  Prédit: ':'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ':' → logprob: -0.0004305500478949398
    2. '   ' → logprob: -8.6254301071167
    3. ' :' → logprob: -9.0004301071167
    4. '):' → logprob: -10.1254301071167
    5. '<|end|>' → logprob: -10.8754301071167
    6. ':
' → logprob: -11.0004301071167
    7. '():' → logprob: -11.1254301071167
    8. ',' → logprob: -11.6254301071167
    9. ':**' → logprob: -11.8754301071167
    10. '```' → logprob: -12.1254301071167

Token 76: '   ' (ID: 271)
  Prédit: 'n'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'n' → logprob: -0.3593028783798218
    2. '   ' → logprob: -1.7343028783798218
    3. ' n' → logprob: -2.6093029975891113
    4. '```' → logprob: -3.9843029975891113
    5. ' current' → logprob: -5.359302997589111
    6. 'current' → logprob: -5.359302997589111
    7. 'x' → logprob: -5.609302997589111
    8. 'q' → logprob: -6.109302997589111
    9. 'p' → logprob: -6.234302997589111
    10. '    
' → logprob: -6.234302997589111

Token 77: ' x' (ID: 1215)
  Prédit: 'n'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'n' → logprob: -1.1507213115692139
    2. 'cur' → logprob: -1.4007213115692139
    3. 'x' (adapté à ' x') → logprob: -1.5257213115692139
    4. 'current' → logprob: -2.900721311569214
    5. 'v' → logprob: -3.025721311569214
    6. 'p' → logprob: -4.150721549987793
    7. 'curr' → logprob: -4.275721549987793
    8. ' current' → logprob: -4.400721549987793
    9. 'm' → logprob: -4.525721549987793
    10. ' n' → logprob: -4.650721549987793

Token 78: ' =' (ID: 314)
  Prédit: ' ='
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' =' → logprob: -0.0889425128698349
    2. '=' → logprob: -2.463942527770996
    3. ' ' → logprob: -13.713942527770996
    4. ',' → logprob: -13.838942527770996
    5. 's' → logprob: -14.713942527770996
    6. '＝' → logprob: -16.33894157409668
    7. ' =
' → logprob: -16.96394157409668
    8. '   ' → logprob: -17.08894157409668
    9. ')' → logprob: -17.15144157409668
    10. 'x' → logprob: -17.52644157409668

Token 79: ' heap' (ID: 37237)
  Prédit: 'heap'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'heap' → logprob: -0.001505578518845141
    2. ' heap' → logprob: -6.501505374908447
    3. 'pile' → logprob: -13.876505851745605
    4. '(heap' → logprob: -14.251505851745605
    5. '   ' → logprob: -14.376505851745605
    6. '.heap' → logprob: -14.501505851745605
    7. 'he' → logprob: -15.251505851745605
    8. '_heap' → logprob: -16.37650489807129
    9. '  ' → logprob: -16.87650489807129
    10. ' ' → logprob: -17.50150489807129

Token 80: 'q' (ID: 80)
  Prédit: 'q'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'q' → logprob: -3.5716304410016164e-05
    2. 'p' → logprob: -10.250035285949707
    3. '```' → logprob: -16.250036239624023
    4. 'x' → logprob: -16.375036239624023
    5. 'h' → logprob: -16.875036239624023
    6. 'pop' → logprob: -17.125036239624023
    7. 's' → logprob: -17.625036239624023
    8. '.pop' → logprob: -17.875036239624023
    9. 'k' → logprob: -18.250036239624023
    10. 'u' → logprob: -18.375036239624023

Token 81: '.he' (ID: 67786)
  Prédit: '.he'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '.he' → logprob: -1.664371848164592e-05
    2. '.heap' → logprob: -11.250016212463379
    3. '.' → logprob: -12.625016212463379
    4. 'he' → logprob: -16.000017166137695
    5. '.h' → logprob: -17.500017166137695
    6. '```' → logprob: -18.000017166137695
    7. ' .' → logprob: -18.125017166137695
    8. '.pop' → logprob: -18.375017166137695
    9. ' he' → logprob: -19.000017166137695
    10. '_he' → logprob: -19.250017166137695

Token 82: 'app' (ID: 903)
  Prédit: 'app'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'app' → logprob: -3.047134305234067e-05
    2. 'pp' → logprob: -10.625030517578125
    3. 'ap' → logprob: -12.125030517578125
    4. 'a' → logprob: -15.250030517578125
    5. '```' → logprob: -16.000030517578125
    6. 'pop' → logprob: -16.625030517578125
    7. 'qp' → logprob: -17.250030517578125
    8. 'q' → logprob: -17.250030517578125
    9. 'appen' → logprob: -17.625030517578125
    10. 'p' → logprob: -17.625030517578125

Token 83: 'op' (ID: 467)
  Prédit: 'op'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'op' → logprob: -0.006082495208829641
    2. 'pop' → logprob: -5.756082534790039
    3. 'ush' → logprob: -6.506082534790039
    4. 'p' → logprob: -7.756082534790039
    5. 'app' → logprob: -7.756082534790039
    6. 'ap' → logprob: -8.131082534790039
    7. 'pp' → logprob: -8.381082534790039
    8. '```' → logprob: -12.381082534790039
    9. 'o' → logprob: -12.506082534790039
    10. 'opf' → logprob: -12.881082534790039

Token 84: '(p' (ID: 2407)
  Prédit: '(p'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(p' → logprob: -7.226628895296017e-06
    2. '(' → logprob: -11.875007629394531
    3. '(heap' → logprob: -15.750007629394531
    4. 'pile' → logprob: -17.12500762939453
    5. '(pool' → logprob: -18.87500762939453
    6. '(n' → logprob: -19.75000762939453
    7. '(pr' → logprob: -19.75000762939453
    8. ' (' → logprob: -19.87500762939453
    9. '(py' → logprob: -20.00000762939453
    10. '(pipe' → logprob: -20.00000762939453

Token 85: 'ile' (ID: 554)
  Prédit: 'ile'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'ile' → logprob: -0.0026647194754332304
    2. 'il' → logprob: -6.252664566040039
    3. 'le' → logprob: -7.252664566040039
    4. 'pile' → logprob: -11.502664566040039
    5. ')' → logprob: -12.127664566040039
    6. 'l' → logprob: -13.377664566040039
    7. 'e' → logprob: -13.752664566040039
    8. 'el' → logprob: -13.752664566040039
    9. 'lie' → logprob: -14.127664566040039
    10. '```' → logprob: -14.252664566040039

Token 86: ')
' (ID: 446)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')' → logprob: -0.0015368813183158636
    2. ')
' → logprob: -6.501536846160889
    3. ' )' → logprob: -10.751537322998047
    4. ')
' → logprob: -12.251537322998047
    5. ')+' → logprob: -12.626537322998047
    6. '   ' → logprob: -13.126537322998047
    7. ')

' → logprob: -13.751537322998047
    8. '))' → logprob: -14.751537322998047
    9. '+' → logprob: -15.001537322998047
    10. '`)' → logprob: -15.251537322998047

Token 87: '   ' (ID: 271)
  Prédit: 'if'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'if' → logprob: -0.6558958888053894
    2. '   ' → logprob: -1.1558959484100342
    3. ' if' → logprob: -1.9058959484100342
    4. '    
' → logprob: -5.030895709991455
    5. '<|end|>' → logprob: -5.405895709991455
    6. '```' → logprob: -6.530895709991455
    7. ' ' → logprob: -7.030895709991455
    8. ' for' → logprob: -7.155895709991455
    9. '
' → logprob: -7.155895709991455
    10. 'for' → logprob: -7.280895709991455

Token 88: ' if' (ID: 538)
  Prédit: 'if'
  Correct (stricte): False
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'if' (adapté à ' if') → logprob: -0.0010264969896525145
    2. '   ' → logprob: -7.376026630401611
    3. ' if' → logprob: -7.876026630401611
    4. '```' → logprob: -12.001026153564453
    5. '    
' → logprob: -12.126026153564453
    6. '
' → logprob: -13.126026153564453
    7. '	if' → logprob: -13.251026153564453
    8. 'for' → logprob: -13.501026153564453
    9. ' ' → logprob: -14.126026153564453
    10. '  
' → logprob: -14.501026153564453

Token 89: ' traiter' (ID: 105852)
  Prédit: ' traiter'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' traiter' → logprob: -0.03392437472939491
    2. 'trait' → logprob: -3.4089243412017822
    3. '   ' → logprob: -9.033924102783203
    4. ' ' → logprob: -9.408924102783203
    5. '  ' → logprob: -10.908924102783203
    6. 'tr' → logprob: -11.283924102783203
    7. 'not' → logprob: -11.533924102783203
    8. ' ' → logprob: -12.033924102783203
    9. ' traite' → logprob: -12.033924102783203
    10. ' trai' → logprob: -12.658924102783203

Token 90: '(x' (ID: 4061)
  Prédit: '(x'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(x' → logprob: -0.0008062947308644652
    2. '(' → logprob: -7.1258063316345215
    3. ' (' → logprob: -13.625805854797363
    4. '(
' → logprob: -15.625805854797363
    5. '(n' → logprob: -15.875805854797363
    6. ')' → logprob: -16.12580680847168
    7. '(s' → logprob: -17.00080680847168
    8. ')(' → logprob: -17.12580680847168
    9. '(

' → logprob: -17.25080680847168
    10. '(X' → logprob: -17.75080680847168

Token 91: '):
' (ID: 1883)
  Prédit: '):'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '):' → logprob: -0.004474508576095104
    2. ' ):' → logprob: -6.254474639892578
    3. ')' → logprob: -6.504474639892578
    4. '):
' → logprob: -6.879474639892578
    5. ' ' → logprob: -12.379474639892578
    6. ':' → logprob: -13.129474639892578
    7. '+' → logprob: -13.254474639892578
    8. ' )' → logprob: -13.379474639892578
    9. ''):' → logprob: -13.504474639892578
    10. '):
' → logprob: -13.629474639892578

Token 92: '       ' (ID: 309)
  Prédit: '       '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '       ' → logprob: -0.004718364682048559
    2. '   ' → logprob: -5.37971830368042
    3. ' break' → logprob: -9.754718780517578
    4. '	break' → logprob: -11.129718780517578
    5. '    ' → logprob: -12.004718780517578
    6. ' ' → logprob: -12.254718780517578
    7. '      ' → logprob: -12.879718780517578
    8. '     ' → logprob: -12.879718780517578
    9. 'break' → logprob: -13.004718780517578
    10. '	   ' → logprob: -13.504718780517578

Token 93: ' break' (ID: 2338)
  Prédit: '       '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '       ' → logprob: -0.006657346151769161
    2. ' break' → logprob: -5.506657123565674
    3. 'break' (adapté à ' break') → logprob: -6.006657123565674
    4. '	break' → logprob: -9.506657600402832
    5. '   ' → logprob: -10.756657600402832
    6. '           ' → logprob: -11.256657600402832
    7. '        
' → logprob: -13.756657600402832
    8. '```' → logprob: -13.881657600402832
    9. ' ' → logprob: -14.256657600402832
    10. '
' → logprob: -14.506657600402832

Token 94: '
' (ID: 198)
  Prédit: 'for'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'for' → logprob: -0.6695511341094971
    2. '   ' → logprob: -0.7945511341094971
    3. ' for' → logprob: -3.544551134109497
    4. '    
' → logprob: -5.419550895690918
    5. 'if' → logprob: -6.419550895690918
    6. '```' → logprob: -7.419550895690918
    7. '
' → logprob: -8.419550895690918
    8. '	for' → logprob: -10.044550895690918
    9. '  
' → logprob: -10.044550895690918
    10. 'a' → logprob: -10.169550895690918

Token 95: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.40326228737831116
    2. 'for' → logprob: -1.1532622575759888
    3. ' for' → logprob: -4.278262138366699
    4. '    
' → logprob: -6.403262138366699
    5. '```' → logprob: -8.2782621383667
    6. 'if' → logprob: -8.4032621383667
    7. '
' → logprob: -10.0282621383667
    8. '  
' → logprob: -10.0282621383667
    9. '        
' → logprob: -10.2782621383667
    10. ' ' → logprob: -10.5282621383667

Token 96: ' for' (ID: 395)
  Prédit: 'for'
  Correct (stricte): False
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'for' (adapté à ' for') → logprob: -0.0031907858792692423
    2. '   ' → logprob: -6.253190994262695
    3. ' for' → logprob: -7.503190994262695
    4. 'if' → logprob: -7.628190994262695
    5. 'a' → logprob: -8.628190994262695
    6. '```' → logprob: -11.253190994262695
    7. '    
' → logprob: -11.503190994262695
    8. 'u' → logprob: -12.003190994262695
    9. 'q' → logprob: -12.253190994262695
    10. 't' → logprob: -13.753190994262695

Token 97: ' d' (ID: 272)
  Prédit: ' y'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' y' → logprob: -1.2506834268569946
    2. 'y' → logprob: -1.3756834268569946
    3. 'd' → logprob: -2.125683307647705
    4. ' d' → logprob: -3.000683307647705
    5. 'i' → logprob: -3.000683307647705
    6. ' nxt' → logprob: -3.000683307647705
    7. 'nx' → logprob: -3.500683307647705
    8. ' nx' → logprob: -3.750683307647705
    9. ' i' → logprob: -3.875683307647705
    10. 'v' → logprob: -4.250683307647705

Token 98: ' in' (ID: 306)
  Prédit: ' in'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' in' → logprob: -0.11333035677671432
    2. 'in' → logprob: -2.238330364227295
    3. 'd' → logprob: -7.863330364227295
    4. 's' → logprob: -10.363329887390137
    5. ' ' → logprob: -10.613329887390137
    6. 'e' → logprob: -11.363329887390137
    7. '	in' → logprob: -12.113329887390137
    8. 'ine' → logprob: -12.238329887390137
    9. 'i' → logprob: -12.238329887390137
    10. 'x' → logprob: -12.863329887390137

Token 99: ' (' (ID: 350)
  Prédit: '['
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '[' → logprob: -0.020630644634366035
    2. ' [' → logprob: -4.520630836486816
    3. '(' → logprob: -4.770630836486816
    4. ' (' → logprob: -7.020630836486816
    5. '[-' → logprob: -9.770630836486816
    6. ' ' → logprob: -10.270630836486816
    7. 'pile' → logprob: -10.770630836486816
    8. ' pile' → logprob: -11.145630836486816
    9. '[p' → logprob: -11.520630836486816
    10. '([' → logprob: -11.770630836486816

Token 100: '4' (ID: 19)
  Prédit: '4'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '4' → logprob: -0.003956224769353867
    2. ' ' → logprob: -6.003956317901611
    3. '3' → logprob: -6.878956317901611
    4. '1' → logprob: -8.753955841064453
    5. '+' → logprob: -9.128955841064453
    6. '-' → logprob: -10.253955841064453
    7. '2' → logprob: -10.628955841064453
    8. ',' → logprob: -10.878955841064453
    9. '   ' → logprob: -11.378955841064453
    10. 'x' → logprob: -11.691455841064453

Token 101: ',' (ID: 11)
  Prédit: ','
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ',' → logprob: -0.009833889082074165
    2. ' ,' → logprob: -4.634833812713623
    3. '7' → logprob: -9.509834289550781
    4. ',
' → logprob: -12.884834289550781
    5. '4' → logprob: -15.009834289550781
    6. ',+' → logprob: -15.134834289550781
    7. ' ' → logprob: -15.759834289550781
    8. ' ,
' → logprob: -16.50983428955078
    9. ',d' → logprob: -16.75983428955078
    10. ',n' → logprob: -16.88483428955078

Token 102: ' ' (ID: 220)
  Prédit: '7'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '7' → logprob: -0.005241821985691786
    2. ' ' → logprob: -5.255241870880127
    3. '   ' → logprob: -12.255241394042969
    4. ')' → logprob: -13.630241394042969
    5. ' ' → logprob: -14.880241394042969
    6. '    ' → logprob: -14.880241394042969
    7. ',' → logprob: -14.880241394042969
    8. '  ' → logprob: -15.255241394042969
    9. ' 
' → logprob: -16.00524139404297
    10. '```' → logprob: -16.13024139404297

Token 103: '7' (ID: 22)
  Prédit: '7'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '7' → logprob: -7.941850526549388e-06
    2. ' ' → logprob: -11.875007629394531
    3. '   ' → logprob: -15.000007629394531
    4. ',' → logprob: -15.000007629394531
    5. ')' → logprob: -15.875007629394531
    6. '
' → logprob: -17.81250762939453
    7. '  ' → logprob: -17.87500762939453
    8. '3' → logprob: -17.93750762939453
    9. '    ' → logprob: -18.18750762939453
    10. '۷' → logprob: -18.43750762939453

Token 104: '):
' (ID: 1883)
  Prédit: '):'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '):' → logprob: -0.20147590339183807
    2. '):
' → logprob: -1.7014758586883545
    3. ' ):' → logprob: -10.701476097106934
    4. '):
' → logprob: -10.951476097106934
    5. '   ' → logprob: -11.451476097106934
    6. ' ):
' → logprob: -12.076476097106934
    7. ')' → logprob: -12.451476097106934
    8. ',' → logprob: -14.201476097106934
    9. '):

' → logprob: -14.826476097106934
    10. ' ' → logprob: -15.451476097106934

Token 105: '       ' (ID: 309)
  Prédit: '       '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '       ' → logprob: -0.003812068607658148
    2. ':' → logprob: -6.253811836242676
    3. ' new' → logprob: -6.628811836242676
    4. ':
' → logprob: -9.003811836242676
    5. ',' → logprob: -9.128811836242676
    6. 'new' → logprob: -9.628811836242676
    7. '    ' → logprob: -10.128811836242676
    8. '   ' → logprob: -10.253811836242676
    9. ' heap' → logprob: -10.628811836242676
    10. '      ' → logprob: -10.753811836242676

Token 106: ' nxt' (ID: 160200)
  Prédit: 'nx'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'nx' → logprob: -0.3544155955314636
    2. 'y' → logprob: -1.8544156551361084
    3. '   ' → logprob: -2.7294156551361084
    4. 'new' → logprob: -3.4794156551361084
    5. 'nv' → logprob: -4.354415416717529
    6. ' nx' → logprob: -4.729415416717529
    7. 'heap' → logprob: -4.979415416717529
    8. 'n' → logprob: -5.729415416717529
    9. 'next' → logprob: -5.729415416717529
    10. ' y' → logprob: -5.854415416717529

Token 107: ' =' (ID: 314)
  Prédit: ' ='
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' =' → logprob: -0.16022604703903198
    2. '=' → logprob: -1.9102261066436768
    3. ' ' → logprob: -13.660225868225098
    4. '=n' → logprob: -15.285225868225098
    5. '=x' → logprob: -15.785225868225098
    6. '＝' → logprob: -16.285226821899414
    7. '   ' → logprob: -16.535226821899414
    8. 'x' → logprob: -16.910226821899414
    9. '	' → logprob: -17.035226821899414
    10. ' ' → logprob: -17.410226821899414

Token 108: ' x' (ID: 1215)
  Prédit: 'x'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'x' → logprob: -0.20141343772411346
    2. ' x' → logprob: -1.7014133930206299
    3. '	x' → logprob: -17.076414108276367
    4. ' ' → logprob: -17.826414108276367
    5. '(x' → logprob: -18.701414108276367
    6. '   ' → logprob: -18.826414108276367
    7. ')x' → logprob: -19.326414108276367
    8. ' ' → logprob: -19.576414108276367
    9. '%x' → logprob: -19.701414108276367
    10. '"x' → logprob: -19.826414108276367

Token 109: ' +' (ID: 659)
  Prédit: '+'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '+' → logprob: -0.16040833294391632
    2. ' +' → logprob: -1.9104083776474
    3. '+d' → logprob: -8.660408020019531
    4. '+x' → logprob: -11.660408020019531
    5. '＋' → logprob: -14.410408020019531
    6. '+n' → logprob: -14.785408020019531
    7. ' ' → logprob: -15.660408020019531
    8. ' plus' → logprob: -15.785408020019531
    9. '+
' → logprob: -15.785408020019531
    10. '+k' → logprob: -15.910408020019531

Token 110: ' d' (ID: 272)
  Prédit: 'd'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'd' → logprob: -0.005233882926404476
    2. ' d' → logprob: -5.2552337646484375
    3. '   ' → logprob: -16.380233764648438
    4. '       ' → logprob: -17.505233764648438
    5. ' ' → logprob: -19.005233764648438
    6. '	d' → logprob: -19.755233764648438
    7. '4' → logprob: -19.880233764648438
    8. '    ' → logprob: -20.130233764648438
    9. '  ' → logprob: -20.755233764648438
    10. '     ' → logprob: -21.755233764648438

Token 111: '
' (ID: 198)
  Prédit: '
'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '
' → logprob: -0.01185157522559166
    2. '       ' → logprob: -4.761851787567139
    3. '
' → logprob: -6.261851787567139
    4. '<|end|>' → logprob: -7.136851787567139
    5. ' 
' → logprob: -8.51185131072998
    6. '        
' → logprob: -8.88685131072998
    7. '  
' → logprob: -9.26185131072998
    8. ' ' → logprob: -10.51185131072998
    9. '   ' → logprob: -10.76185131072998
    10. '<|end|>' → logprob: -11.51185131072998

Token 112: '       ' (ID: 309)
  Prédit: '       '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '       ' → logprob: -0.07352088391780853
    2. '
' → logprob: -2.6985208988189697
    3. '<|end|>' → logprob: -6.323520660400391
    4. ' ' → logprob: -7.573520660400391
    5. '   ' → logprob: -7.698520660400391
    6. ' if' → logprob: -8.44852066040039
    7. '        
' → logprob: -8.57352066040039
    8. '
' → logprob: -8.69852066040039
    9. ' 
' → logprob: -10.07352066040039
    10. '<|end|>' → logprob: -10.19852066040039

Token 113: ' if' (ID: 538)
  Prédit: ' if'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' if' → logprob: -0.47932466864585876
    2. '       ' → logprob: -1.2293246984481812
    3. 'if' (adapté à ' if') → logprob: -2.4793245792388916
    4. '
' → logprob: -5.854324817657471
    5. '   ' → logprob: -7.104324817657471
    6. '        
' → logprob: -7.979324817657471
    7. ' ' → logprob: -8.229324340820312
    8. '        ' → logprob: -9.479324340820312
    9. ' 
' → logprob: -10.229324340820312
    10. '    ' → logprob: -10.854324340820312

Token 114: ' nxt' (ID: 160200)
  Prédit: ' nxt'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' nxt' → logprob: -0.018192552030086517
    2. 'n' → logprob: -4.018192768096924
    3. 'x' → logprob: -10.768192291259766
    4. '(n' → logprob: -12.018192291259766
    5. ' not' → logprob: -12.268192291259766
    6. 'nx' → logprob: -13.018192291259766
    7. ' nex' → logprob: -13.018192291259766
    8. 'n't' → logprob: -13.518192291259766
    9. ' ' → logprob: -13.893192291259766
    10. ' n' → logprob: -14.143192291259766

Token 115: ' not' (ID: 625)
  Prédit: ' not'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' not' → logprob: -0.0017902553081512451
    2. 'not' → logprob: -6.3767900466918945
    3. ' <=' → logprob: -9.501790046691895
    4. '<=' → logprob: -11.251790046691895
    5. ')' → logprob: -16.00179100036621
    6. '<|end|>' → logprob: -16.50179100036621
    7. '	not' → logprob: -16.62679100036621
    8. '_not' → logprob: -17.75179100036621
    9. 'Not' → logprob: -17.87679100036621
    10. ':not' → logprob: -18.00179100036621

Token 116: ' in' (ID: 306)
  Prédit: ' in'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' in' → logprob: -0.5231821537017822
    2. 'in' → logprob: -0.8981821537017822
    3. 'vu' → logprob: -10.273181915283203
    4. ' vu' → logprob: -12.148181915283203
    5. ' ' → logprob: -12.273181915283203
    6. '<|end|>' → logprob: -12.523181915283203
    7. '   ' → logprob: -13.523181915283203
    8. '
' → logprob: -13.523181915283203
    9. '  ' → logprob: -13.648181915283203
    10. ')' → logprob: -14.273181915283203

Token 117: ' vu' (ID: 12005)
  Prédit: 'vu'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'vu' → logprob: -0.01606721803545952
    2. ' vu' → logprob: -4.141067028045654
    3. '   ' → logprob: -11.266067504882812
    4. ' ' → logprob: -11.891067504882812
    5. 'vue' → logprob: -12.141067504882812
    6. 'uv' → logprob: -13.266067504882812
    7. 'v' → logprob: -14.016067504882812
    8. '  ' → logprob: -14.391067504882812
    9. 'uvu' → logprob: -14.516067504882812
    10. 'vus' → logprob: -14.766067504882812

Token 118: ':
' (ID: 734)
  Prédit: ':'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ':' → logprob: -0.1280740350484848
    2. ':
' → logprob: -2.1280739307403564
    3. ' and' → logprob: -7.0030741691589355
    4. '):' → logprob: -9.753073692321777
    5. '       ' → logprob: -9.878073692321777
    6. '):
' → logprob: -9.878073692321777
    7. ':
' → logprob: -10.503073692321777
    8. '           ' → logprob: -10.878073692321777
    9. 'and' → logprob: -11.503073692321777
    10. ':

' → logprob: -12.128073692321777

Token 119: '           ' (ID: 352)
  Prédit: '           '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '           ' → logprob: -0.00015467056073248386
    2. ' heap' → logprob: -9.625154495239258
    3. 'heap' → logprob: -10.000154495239258
    4. '          ' → logprob: -10.875154495239258
    5. '```' → logprob: -11.625154495239258
    6. '	       ' → logprob: -12.500154495239258
    7. '               ' → logprob: -13.625154495239258
    8. 'vu' → logprob: -13.875154495239258
    9. '            
' → logprob: -14.000154495239258
    10. 'vq' → logprob: -14.000154495239258

Token 120: ' pile' (ID: 39732)
  Prédit: ' heap'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' heap' → logprob: -0.9362608790397644
    2. '           ' → logprob: -1.9362609386444092
    3. 'heap' → logprob: -1.9362609386444092
    4. ' vu' → logprob: -2.061260938644409
    5. 'vu' → logprob: -2.186260938644409
    6. '               ' → logprob: -2.561260938644409
    7. '   ' → logprob: -7.99876070022583
    8. '            ' → logprob: -8.123761177062988
    9. '```' → logprob: -8.123761177062988
    10. 'vue' → logprob: -9.061261177062988

Token 121: '.append' (ID: 3709)
  Prédit: '.append'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '.append' → logprob: -0.015009133145213127
    2. 'q' → logprob: -5.265008926391602
    3. ',' → logprob: -6.390008926391602
    4. '.' → logprob: -6.515008926391602
    5. '<|end|>' → logprob: -6.640008926391602
    6. 'append' → logprob: -6.765008926391602
    7. '.he' → logprob: -7.140008926391602
    8. ')' → logprob: -7.265008926391602
    9. ').' → logprob: -7.765008926391602
    10. '.heap' → logprob: -7.765008926391602

Token 122: '(n' (ID: 2406)
  Prédit: '(n'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(n' → logprob: -0.006064478773623705
    2. '(' → logprob: -5.381064414978027
    3. '(heap' → logprob: -7.506064414978027
    4. '((' → logprob: -7.631064414978027
    5. 'n' → logprob: -8.756064414978027
    6. 'heap' → logprob: -9.756064414978027
    7. '(
' → logprob: -10.131064414978027
    8. '(next' → logprob: -10.256064414978027
    9. ')' → logprob: -10.756064414978027
    10. '(x' → logprob: -11.006064414978027

Token 123: 'xt' (ID: 711)
  Prédit: 'xt'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'xt' → logprob: -0.0001238004770129919
    2. 'ext' → logprob: -9.125123977661133
    3. 'x' → logprob: -12.625123977661133
    4. ')' → logprob: -13.000123977661133
    5. 't' → logprob: -13.000123977661133
    6. '   ' → logprob: -13.250123977661133
    7. ' nxt' → logprob: -14.625123977661133
    8. '-' → logprob: -14.750123977661133
    9. '[' → logprob: -14.750123977661133
    10. 'o' → logprob: -15.000123977661133

Token 124: ')' (ID: 8)
  Prédit: ')
'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')
' → logprob: -0.012597481720149517
    2. ')' → logprob: -4.387597560882568
    3. '           ' → logprob: -10.13759708404541
    4. ')
' → logprob: -10.13759708404541
    5. 'heap' → logprob: -12.76259708404541
    6. '
' → logprob: -13.01259708404541
    7. ' )
' → logprob: -14.13759708404541
    8. ',' → logprob: -14.26259708404541
    9. ')

' → logprob: -14.76259708404541
    10. '               ' → logprob: -15.13759708404541

Token 125: ' if' (ID: 538)
  Prédit: '
'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '
' → logprob: -1.1050901412963867
    2. '<|end|>' → logprob: -1.2300901412963867
    3. 'heap' → logprob: -1.4800901412963867
    4. ')' → logprob: -2.3550901412963867
    5. '(heap' → logprob: -4.355090141296387
    6. ')
' → logprob: -4.355090141296387
    7. '.heap' → logprob: -4.730090141296387
    8. '<|end|>' → logprob: -5.605090141296387
    9. '_heap' → logprob: -5.980090141296387
    10. ' heap' → logprob: -6.105090141296387

Token 126: ' isinstance' (ID: 25889)
  Prédit: 'False'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'False' → logprob: -0.13851340115070343
    2. ' False' → logprob: -2.6385133266448975
    3. 'n' → logprob: -3.3885133266448975
    4. 'not' → logprob: -5.013513565063477
    5. '(False' → logprob: -5.263513565063477
    6. '0' → logprob: -5.513513565063477
    7. 'heap' → logprob: -6.763513565063477
    8. 'x' → logprob: -6.763513565063477
    9. 'len' → logprob: -6.888513565063477
    10. 'pile' → logprob: -7.263513565063477

Token 127: '(p' (ID: 2407)
  Prédit: '(p'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(p' → logprob: -0.008463275618851185
    2. '(n' → logprob: -5.258463382720947
    3. '(x' → logprob: -6.133463382720947
    4. '(' → logprob: -8.133462905883789
    5. 'x' → logprob: -8.508462905883789
    6. 'pile' → logprob: -8.633462905883789
    7. '(heap' → logprob: -8.758462905883789
    8. ' pile' → logprob: -9.383462905883789
    9. 'p' → logprob: -9.883462905883789
    10. 'n' → logprob: -10.258462905883789

Token 128: 'ile' (ID: 554)
  Prédit: 'ile'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'ile' → logprob: -9.849109119386412e-06
    2. 'pile' → logprob: -13.375009536743164
    3. 'il' → logprob: -13.750009536743164
    4. ',' → logprob: -14.000009536743164
    5. ')' → logprob: -14.125009536743164
    6. 'le' → logprob: -14.750009536743164
    7. '   ' → logprob: -14.875009536743164
    8. 'lie' → logprob: -15.125009536743164
    9. '
' → logprob: -15.187509536743164
    10. ' ile' → logprob: -15.375009536743164

Token 129: ',' (ID: 11)
  Prédit: ','
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ',' → logprob: -0.44263961911201477
    2. ',list' → logprob: -1.0676395893096924
    3. ',de' → logprob: -4.6926398277282715
    4. ',set' → logprob: -5.9426398277282715
    5. 'list' → logprob: -6.8176398277282715
    6. 'deque' → logprob: -7.5676398277282715
    7. 's' → logprob: -8.817639350891113
    8. ',int' → logprob: -9.942639350891113
    9. ' ,' → logprob: -10.817639350891113
    10. 'set' → logprob: -10.817639350891113

Token 130: ' list' (ID: 1562)
  Prédit: 'list'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'list' → logprob: -0.5765994191169739
    2. 'deque' → logprob: -0.8265994191169739
    3. ' deque' → logprob: -8.45159912109375
    4. ' list' → logprob: -8.82659912109375
    5. 'heap' → logprob: -9.45159912109375
    6. 'collections' → logprob: -9.95159912109375
    7. 'set' → logprob: -10.20159912109375
    8. '```' → logprob: -10.57659912109375
    9. 'de' → logprob: -10.70159912109375
    10. 'dict' → logprob: -10.82659912109375

Token 131: ')' (ID: 8)
  Prédit: ' else'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' else' → logprob: -0.0299393143504858
    2. 'else' → logprob: -3.5299394130706787
    3. ')' → logprob: -10.029939651489258
    4. ' ' → logprob: -10.154939651489258
    5. '        ' → logprob: -11.154939651489258
    6. '           ' → logprob: -11.404939651489258
    7. ' heap' → logprob: -11.404939651489258
    8. 'heap' → logprob: -11.404939651489258
    9. ' is' → logprob: -11.654939651489258
    10. '==' → logprob: -11.779939651489258

Token 132: ' else' (ID: 1203)
  Prédit: ' else'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' else' → logprob: -0.28289690613746643
    2. 'else' → logprob: -1.407896876335144
    3. 'heap' → logprob: -6.657896995544434
    4. '           ' → logprob: -9.407896995544434
    5. ' heap' → logprob: -9.532896995544434
    6. '(heap' → logprob: -9.907896995544434
    7. ' and' → logprob: -9.907896995544434
    8. 'continue' → logprob: -10.657896995544434
    9. 'and' → logprob: -11.032896995544434
    10. ':' → logprob: -11.032896995544434

Token 133: ' heap' (ID: 37237)
  Prédit: 'heap'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'heap' → logprob: -0.03034241870045662
    2. ' heap' → logprob: -4.1553425788879395
    3. 'pile' → logprob: -4.4053425788879395
    4. '   ' → logprob: -6.6553425788879395
    5. ' pile' → logprob: -8.405342102050781
    6. 'None' → logprob: -9.030342102050781
    7. ' None' → logprob: -9.530342102050781
    8. '(heap' → logprob: -9.780342102050781
    9. ' ' → logprob: -10.155342102050781
    10. '  ' → logprob: -10.342842102050781

Token 134: 'q' (ID: 80)
  Prédit: 'q'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'q' → logprob: -1.0921942703134846e-05
    2. 'p' → logprob: -11.87501049041748
    3. 'push' → logprob: -12.62501049041748
    4. 'app' → logprob: -15.00001049041748
    5. 'he' → logprob: -17.125011444091797
    6. 'heap' → logprob: -17.250011444091797
    7. 'op' → logprob: -17.375011444091797
    8. 'queue' → logprob: -17.500011444091797
    9. 'x' → logprob: -17.500011444091797
    10. 'h' → logprob: -17.625011444091797

Token 135: '.he' (ID: 67786)
  Prédit: '.he'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '.he' → logprob: -0.014217570424079895
    2. 'he' → logprob: -4.264217376708984
    3. '.heap' → logprob: -10.514217376708984
    4. 'heap' → logprob: -10.764217376708984
    5. ' he' → logprob: -12.889217376708984
    6. '_he' → logprob: -13.889217376708984
    7. '.' → logprob: -14.139217376708984
    8. 'push' → logprob: -14.264217376708984
    9. '```' → logprob: -15.264217376708984
    10. '(heap' → logprob: -15.514217376708984

Token 136: 'app' (ID: 903)
  Prédit: 'app'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'app' → logprob: -0.02639702521264553
    2. 'ap' → logprob: -3.6513969898223877
    3. 'a' → logprob: -9.651396751403809
    4. 'aq' → logprob: -11.776396751403809
    5. 'ап' → logprob: -11.776396751403809
    6. 'qp' → logprob: -12.401396751403809
    7. 'q' → logprob: -13.026396751403809
    8. '[' → logprob: -13.276396751403809
    9. '```' → logprob: -13.401396751403809
    10. '   ' → logprob: -14.276396751403809

Token 137: 'ush' (ID: 1776)
  Prédit: 'ush'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'ush' → logprob: -0.10036884248256683
    2. 'op' → logprob: -2.3503687381744385
    3. 'p' → logprob: -10.10036849975586
    4. 'e' → logprob: -11.22536849975586
    5. 'q' → logprob: -11.35036849975586
    6. 'ap' → logprob: -11.60036849975586
    7. 'push' → logprob: -11.60036849975586
    8. '```' → logprob: -11.60036849975586
    9. 'uf' → logprob: -11.85036849975586
    10. 'sh' → logprob: -11.97536849975586

Token 138: '(p' (ID: 2407)
  Prédit: '(p'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(p' → logprob: -2.45848218582978e-06
    2. '(' → logprob: -13.00000286102295
    3. '(heap' → logprob: -16.000001907348633
    4. '(n' → logprob: -17.500001907348633
    5. 'p' → logprob: -17.750001907348633
    6. '(h' → logprob: -19.000001907348633
    7. ',p' → logprob: -20.000001907348633
    8. 'pile' → logprob: -20.125001907348633
    9. '(
' → logprob: -20.250001907348633
    10. '(s' → logprob: -20.250001907348633

Token 139: 'ile' (ID: 554)
  Prédit: 'ile'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'ile' → logprob: -0.0001514557225164026
    2. 'pile' → logprob: -8.875151634216309
    3. 'il' → logprob: -11.625151634216309
    4. 'le' → logprob: -14.750151634216309
    5. 'lie' → logprob: -14.750151634216309
    6. ' pile' → logprob: -15.500151634216309
    7. 'ule' → logprob: -15.625151634216309
    8. ')' → logprob: -15.750151634216309
    9. '(' → logprob: -15.875151634216309
    10. ')
' → logprob: -16.375150680541992

Token 140: ',' (ID: 11)
  Prédit: ','
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ',' → logprob: -0.3886769711971283
    2. ',n' → logprob: -1.1386770009994507
    3. '(n' → logprob: -6.63867712020874
    4. ' ,' → logprob: -7.88867712020874
    5. ',p' → logprob: -9.138676643371582
    6. ',x' → logprob: -12.013676643371582
    7. 'n' → logprob: -12.888676643371582
    8. ',d' → logprob: -14.138676643371582
    9. ' nxt' → logprob: -14.388676643371582
    10. ',k' → logprob: -14.888676643371582

Token 141: ' nxt' (ID: 160200)
  Prédit: 'n'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'n' → logprob: -0.029848605394363403
    2. ' nxt' → logprob: -3.529848575592041
    3. '   ' → logprob: -10.7798490524292
    4. ' ' → logprob: -11.0298490524292
    5. ' n' → logprob: -11.4048490524292
    6. '(n' → logprob: -11.6548490524292
    7. '	n' → logprob: -11.9048490524292
    8. ')' → logprob: -12.1548490524292
    9. 'nx' → logprob: -12.4048490524292
    10. '  ' → logprob: -12.4048490524292

Token 142: ')
' (ID: 446)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')' → logprob: -7.982165698194876e-05
    2. ')
' → logprob: -9.500080108642578
    3. ' )' → logprob: -12.750080108642578
    4. '<|end|>' → logprob: -14.375080108642578
    5. '           ' → logprob: -14.875080108642578
    6. '   ' → logprob: -15.500080108642578
    7. ')n' → logprob: -15.625080108642578
    8. '       ' → logprob: -15.875080108642578
    9. ')#' → logprob: -16.000080108642578
    10. ')

' → logprob: -16.250080108642578

Token 143: '           ' (ID: 352)
  Prédit: '           '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '           ' → logprob: -0.0017056517535820603
    2. ',' → logprob: -8.00170612335205
    3. '
' → logprob: -8.12670612335205
    4. '   ' → logprob: -8.25170612335205
    5. '               ' → logprob: -8.25170612335205
    6. '            
' → logprob: -9.25170612335205
    7. '       ' → logprob: -9.62670612335205
    8. ')' → logprob: -9.87670612335205
    9. ' heap' → logprob: -9.87670612335205
    10. 'heap' → logprob: -9.87670612335205

Token 144: ' heap' (ID: 37237)
  Prédit: 'vu'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'vu' → logprob: -0.0009043150348588824
    2. '           ' → logprob: -7.250904083251953
    3. ' vu' → logprob: -8.875904083251953
    4. '   ' → logprob: -10.000904083251953
    5. 'vue' → logprob: -12.500904083251953
    6. '       ' → logprob: -13.250904083251953
    7. '               ' → logprob: -13.625904083251953
    8. '  ' → logprob: -14.500904083251953
    9. '
' → logprob: -14.750904083251953
    10. ' ' → logprob: -15.250904083251953

Token 145: 'q' (ID: 80)
  Prédit: 'q'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'q' → logprob: -1.2664456789934775e-06
    2. 'p' → logprob: -14.250000953674316
    3. 'x' → logprob: -16.250001907348633
    4. '<|end|>' → logprob: -16.500001907348633
    5. '[' → logprob: -16.625001907348633
    6. '.heap' → logprob: -16.875001907348633
    7. '.q' → logprob: -17.000001907348633
    8. '.' → logprob: -17.750001907348633
    9. '```' → logprob: -18.125001907348633
    10. 'queue' → logprob: -18.250001907348633

Token 146: '.heap' (ID: 177287)
  Prédit: '.he'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '.he' → logprob: -0.008997661992907524
    2. '.heap' → logprob: -4.758997440338135
    3. '.' → logprob: -7.883997440338135
    4. '.push' → logprob: -13.133997917175293
    5. '.h' → logprob: -14.508997917175293
    6. '.hu' → logprob: -14.883997917175293
    7. '​.' → logprob: -15.383997917175293
    8. '.nl' → logprob: -15.383997917175293
    9. '<|end|>' → logprob: -15.383997917175293
    10. '.​' → logprob: -15.508997917175293

Token 147: 'ify' (ID: 1985)
  Prédit: 'ush'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'ush' → logprob: -0.04987778142094612
    2. 'push' → logprob: -3.049877882003784
    3. 'ify' → logprob: -6.799877643585205
    4. '_push' → logprob: -9.924878120422363
    5. 'u' → logprob: -10.174878120422363
    6. '```' → logprob: -10.799878120422363
    7. 'app' → logprob: -11.174878120422363
    8. 'pp' → logprob: -11.174878120422363
    9. 'p' → logprob: -11.424878120422363
    10. 'if' → logprob: -12.049878120422363

Token 148: '(p' (ID: 2407)
  Prédit: '(p'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(p' → logprob: -1.981667537620524e-06
    2. '(' → logprob: -13.625001907348633
    3. '(n' → logprob: -14.500001907348633
    4. '()' → logprob: -16.250001907348633
    5. '((' → logprob: -16.750001907348633
    6. 'p' → logprob: -16.875001907348633
    7. ' (' → logprob: -17.875001907348633
    8. 'pile' → logprob: -18.375001907348633
    9. '(heap' → logprob: -18.500001907348633
    10. '(x' → logprob: -19.250001907348633

Token 149: 'ile' (ID: 554)
  Prédit: 'ile'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'ile' → logprob: -0.000520981615409255
    2. 'pile' → logprob: -7.625521183013916
    3. 'il' → logprob: -11.250520706176758
    4. 'le' → logprob: -12.125520706176758
    5. ')' → logprob: -12.375520706176758
    6. ' pile' → logprob: -13.500520706176758
    7. '(' → logprob: -13.750520706176758
    8. 'lie' → logprob: -13.750520706176758
    9. ')
' → logprob: -14.625520706176758
    10. '
' → logprob: -14.750520706176758

Token 150: ')
' (ID: 446)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')' → logprob: -0.00018113377154804766
    2. ')
' → logprob: -8.750181198120117
    3. '           ' → logprob: -11.125181198120117
    4. '       ' → logprob: -12.625181198120117
    5. '   ' → logprob: -13.875181198120117
    6. ' )' → logprob: -14.250181198120117
    7. ')n' → logprob: -14.375181198120117
    8. '               ' → logprob: -14.750181198120117
    9. '<|end|>' → logprob: -15.000181198120117
    10. ')

' → logprob: -15.250181198120117

Token 151: '           ' (ID: 352)
  Prédit: '           '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '           ' → logprob: -0.00280784466303885
    2. '<|end|>' → logprob: -7.0028076171875
    3. 'vu' → logprob: -7.0028076171875
    4. '               ' → logprob: -7.5028076171875
    5. '            ' → logprob: -9.5028076171875
    6. '       ' → logprob: -9.6278076171875
    7. '            
' → logprob: -10.1278076171875
    8. ')' → logprob: -10.5028076171875
    9. '<|end|>' → logprob: -10.5028076171875
    10. '   ' → logprob: -10.6278076171875

Token 152: ' vu' (ID: 12005)
  Prédit: 'vu'
  Correct (stricte): False
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'vu' (adapté à ' vu') → logprob: -0.014572659507393837
    2. '           ' → logprob: -4.389572620391846
    3. ' vu' → logprob: -6.639572620391846
    4. '   ' → logprob: -7.389572620391846
    5. '       ' → logprob: -9.764573097229004
    6. 'vue' → logprob: -10.764573097229004
    7. '               ' → logprob: -11.264573097229004
    8. '  ' → logprob: -11.389573097229004
    9. ' ' → logprob: -12.389573097229004
    10. '
' → logprob: -12.389573097229004

Token 153: '.add' (ID: 1950)
  Prédit: '.add'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '.add' → logprob: -3.054500666621607e-06
    2. '.' → logprob: -12.87500286102295
    3. 'add' → logprob: -15.50000286102295
    4. '.update' → logprob: -16.500003814697266
    5. ' .' → logprob: -17.250003814697266
    6. ')add' → logprob: -19.625003814697266
    7. '```' → logprob: -19.625003814697266
    8. '.Add' → logprob: -19.750003814697266
    9. '.setdefault' → logprob: -19.750003814697266
    10. ' add' → logprob: -20.375003814697266

Token 154: '(n' (ID: 2406)
  Prédit: '(n'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(n' → logprob: -1.306760805164231e-05
    2. '(' → logprob: -11.25001335144043
    3. '(nx' → logprob: -19.25001335144043
    4. '(next' → logprob: -19.50001335144043
    5. ' (' → logprob: -19.62501335144043
    6. '(
' → logprob: -20.37501335144043
    7. '((' → logprob: -20.37501335144043
    8. '(x' → logprob: -20.75001335144043
    9. 'n' → logprob: -22.25001335144043
    10. '(N' → logprob: -22.62501335144043

Token 155: 'xt' (ID: 711)
  Prédit: 'xt'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'xt' → logprob: -0.0029428747948259115
    2. 'x' → logprob: -6.12794303894043
    3. 't' → logprob: -7.25294303894043
    4. '(t' → logprob: -11.25294303894043
    5. ')' → logprob: -12.12794303894043
    6. '```' → logprob: -12.12794303894043
    7. '(' → logprob: -12.25294303894043
    8. 'w' → logprob: -12.37794303894043
    9. 'j' → logprob: -13.25294303894043
    10. '[' → logprob: -13.50294303894043

Token 156: ')' (ID: 8)
  Prédit: ')'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')' → logprob: -4.36574100604048e-06
    2. ')
' → logprob: -12.625004768371582
    3. ' )' → logprob: -14.625004768371582
    4. '))' → logprob: -16.375003814697266
    5. '')' → logprob: -16.625003814697266
    6. ')n' → logprob: -16.625003814697266
    7. ')return' → logprob: -16.750003814697266
    8. ')}' → logprob: -17.000003814697266
    9. '())' → logprob: -17.250003814697266
    10. '   ' → logprob: -17.375003814697266


RÉSUMÉ:
--------------------------------------------------------------------------------
Total des tokens analysés: 154
Tokens correctement prédits (1ère position, stricte): 69
Tokens correctement prédits (1ère position, avec adaptation): 73
Tokens correctement prédits (top 10): 127
Précision stricte (1ère position): 44.81%
Précision adaptée (1ère position): 47.40%
Précision (top 10): 82.47%
================================================================================
