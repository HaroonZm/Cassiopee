================================================================================
ANALYSE DE PRÉDICTION TOKEN PAR TOKEN (BATCH API)
Date: 2025-06-04 20:00:52
Modèle de tokenisation: gpt-4o-mini
================================================================================

SCRIPT ANALYSÉ:
--------------------------------------------------------------------------------
from math import log2, ceil

def calculate_score(n: int, k: int) -> float:
    if n <= k:
        lis = [0.0] * n
        score = 0.0
        iterable = range(1, n + 1)
    else:
        lis = [0.0] * (k - 1)
        score = (n - k + 1) / n
        iterable = range(1, k)

    inv_n = 1.0 / n
    pow_half = lambda x: 2.0 ** (-ceil(log2(k / x)))
    lis_gen = (inv_n * pow_half(i) for i in iterable)
    return sum(lis_gen) + score

if __name__ == "__main__":
    n, k = map(int, input().split())
    print(calculate_score(n, k))
--------------------------------------------------------------------------------

RÉSULTATS D'ANALYSE TOKEN PAR TOKEN:
--------------------------------------------------------------------------------
Token 0: 'from' (ID: 2845)
  → Token d'amorce (pas de prédiction)

Token 1: ' math' (ID: 13324)
  → Token d'amorce (pas de prédiction)

Token 2: ' import' (ID: 1588)
  → Token d'amorce (pas de prédiction)

Token 3: ' log' (ID: 2142)
  Prédit: 'sqrt'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'sqrt' → logprob: -0.1960834264755249
    2. ' sqrt' → logprob: -1.946083426475525
    3. 'pow' → logprob: -4.1960835456848145
    4. 'pi' → logprob: -5.1960835456848145
    5. ' pi' → logprob: -5.3210835456848145
    6. 'sin' → logprob: -5.4460835456848145
    7. 'import' → logprob: -6.5710835456848145
    8. 'ceil' → logprob: -6.6960835456848145
    9. 'log' → logprob: -7.6960835456848145
    10. '```' → logprob: -7.9460835456848145

Token 4: '2' (ID: 17)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '(' → logprob: -0.00016301481809932739
    2. ',' → logprob: -9.750163078308105
    3. '\(' → logprob: -10.250163078308105
    4. '```' → logprob: -10.875163078308105
    5. ' (' → logprob: -11.125163078308105
    6. '10' → logprob: -12.125163078308105
    7. '"' → logprob: -12.375163078308105
    8. '(
' → logprob: -12.375163078308105
    9. '1' → logprob: -12.500163078308105
    10. '_' → logprob: -12.625163078308105

Token 5: ',' (ID: 11)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(' → logprob: -0.0006064103217795491
    2. '(
' → logprob: -8.375606536865234
    3. '\(' → logprob: -9.000606536865234
    4. ',' → logprob: -9.250606536865234
    5. '\n' → logprob: -9.750606536865234
    6. ' (' → logprob: -10.000606536865234
    7. '```' → logprob: -11.500606536865234
    8. '#' → logprob: -12.000606536865234
    9. 'a' → logprob: -12.500606536865234
    10. ''' → logprob: -12.625606536865234

Token 6: ' ceil' (ID: 35964)
  Prédit: 'ceil'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'ceil' → logprob: -0.5183092951774597
    2. 'log' → logprob: -1.0183093547821045
    3. ' ceil' → logprob: -4.018309116363525
    4. ' log' → logprob: -4.143309116363525
    5. 'sqrt' → logprob: -5.018309116363525
    6. 'pow' → logprob: -7.518309116363525
    7. ' factorial' → logprob: -7.643309116363525
    8. '```' → logprob: -7.893309116363525
    9. '1' → logprob: -8.518309593200684
    10. 'floor' → logprob: -8.518309593200684

Token 7: '

' (ID: 279)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '(' → logprob: -0.001626025652512908
    2. 'def' → logprob: -7.251626014709473
    3. '(
' → logprob: -8.001626014709473
    4. '\(' → logprob: -8.001626014709473
    5. ',' → logprob: -8.876626014709473
    6. '```' → logprob: -10.376626014709473
    7. '#' → logprob: -11.376626014709473
    8. '`' → logprob: -11.501626014709473
    9. '\' → logprob: -11.626626014709473
    10. '_' → logprob: -11.751626014709473

Token 8: 'def' (ID: 1314)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(' → logprob: -0.0012332071783021092
    2. '(
' → logprob: -6.876233100891113
    3. '\(' → logprob: -9.126233100891113
    4. ',' → logprob: -10.501233100891113
    5. '#' → logprob: -10.876233100891113
    6. 'def' → logprob: -11.251233100891113
    7. '\' → logprob: -12.126233100891113
    8. '```' → logprob: -12.376233100891113
    9. '(

' → logprob: -12.751233100891113
    10. '\n' → logprob: -13.001233100891113

Token 9: ' calculate' (ID: 17950)
  Prédit: ' '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' ' → logprob: -0.03654997795820236
    2. ' space' → logprob: -4.411550045013428
    3. ' calculate' → logprob: -4.786550045013428
    4. ' compute' → logprob: -5.536550045013428
    5. ' factorial' → logprob: -5.536550045013428
    6. ' factor' → logprob: -6.911550045013428
    7. '_' → logprob: -6.911550045013428
    8. ' ceil' → logprob: -7.036550045013428
    9. ' max' → logprob: -7.161550045013428
    10. ' my' → logprob: -7.286550045013428

Token 10: '_score' (ID: 22555)
  Prédit: '_'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '_' → logprob: -1.1385905742645264
    2. '_factor' → logprob: -1.3885905742645264
    3. '_size' → logprob: -2.2635905742645264
    4. '(' → logprob: -2.8885905742645264
    5. '_complex' → logprob: -3.1385905742645264
    6. '_entropy' → logprob: -3.2635905742645264
    7. '_space' → logprob: -3.8885905742645264
    8. '_bits' → logprob: -4.0135908126831055
    9. '_depth' → logprob: -4.0135908126831055
    10. '_length' → logprob: -4.0135908126831055

Token 11: '(n' (ID: 2406)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '(' → logprob: -0.00042662365012802184
    2. '():' → logprob: -9.000426292419434
    3. '(user' → logprob: -10.000426292419434
    4. '(score' → logprob: -10.125426292419434
    5. '(
' → logprob: -11.125426292419434
    6. '(value' → logprob: -11.125426292419434
    7. '_' → logprob: -11.125426292419434
    8. 'def' → logprob: -11.500426292419434
    9. '(params' → logprob: -11.500426292419434
    10. ':' → logprob: -11.500426292419434

Token 12: ':' (ID: 25)
  Prédit: '):'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '):' → logprob: -0.07546043395996094
    2. ',' → logprob: -2.700460433959961
    3. ')' → logprob: -5.450460433959961
    4. ':' → logprob: -7.200460433959961
    5. '):
' → logprob: -8.825460433959961
    6. 's' → logprob: -8.950460433959961
    7. '_' → logprob: -9.700460433959961
    8. '=' → logprob: -10.575460433959961
    9. '[' → logprob: -11.575460433959961
    10. '*' → logprob: -11.825460433959961

Token 13: ' int' (ID: 677)
  Prédit: ' int'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' int' → logprob: -0.3855985999107361
    2. 'int' → logprob: -1.2605986595153809
    3. ' n' → logprob: -4.010598659515381
    4. 'n' → logprob: -4.510598659515381
    5. ')' → logprob: -5.135598659515381
    6. ' )' → logprob: -6.760598659515381
    7. ' ' → logprob: -8.635598182678223
    8. ':int' → logprob: -10.510598182678223
    9. ' str' → logprob: -10.635598182678223
    10. ',' → logprob: -11.010598182678223

Token 14: ',' (ID: 11)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')' → logprob: -0.09922784566879272
    2. '):' → logprob: -2.4742279052734375
    3. ',' → logprob: -4.5992279052734375
    4. ')->' → logprob: -9.599227905273438
    5. '   ' → logprob: -10.474227905273438
    6. '):
' → logprob: -11.099227905273438
    7. ':' → logprob: -11.099227905273438
    8. ')>' → logprob: -11.724227905273438
    9. ' )' → logprob: -11.724227905273438
    10. '),' → logprob: -12.724227905273438

Token 15: ' k' (ID: 372)
  Prédit: ' m'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' m' → logprob: -0.7297913432121277
    2. ' k' → logprob: -1.1047914028167725
    3. ' x' → logprob: -2.1047914028167725
    4. 'k' → logprob: -4.854791164398193
    5. ' s' → logprob: -5.104791164398193
    6. 'm' → logprob: -5.229791164398193
    7. ' scores' → logprob: -5.479791164398193
    8. ' t' → logprob: -5.854791164398193
    9. ' score' → logprob: -5.854791164398193
    10. ' depth' → logprob: -5.854791164398193

Token 16: ':' (ID: 25)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')' → logprob: -0.7316884398460388
    2. ':' → logprob: -0.8566884398460388
    3. '):' → logprob: -2.4816884994506836
    4. ',' → logprob: -4.731688499450684
    5. '=' → logprob: -6.356688499450684
    6. ':int' → logprob: -10.231688499450684
    7. '**' → logprob: -10.731688499450684
    8. '*' → logprob: -11.106688499450684
    9. '):
' → logprob: -11.106688499450684
    10. '>' → logprob: -11.231688499450684

Token 17: ' int' (ID: 677)
  Prédit: 'int'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'int' → logprob: -0.3869326412677765
    2. ' int' → logprob: -1.136932611465454
    3. ')' → logprob: -10.636932373046875
    4. '[int' → logprob: -11.511932373046875
    5. ' float' → logprob: -11.761932373046875
    6. 'float' → logprob: -11.886932373046875
    7. ' ' → logprob: -12.261932373046875
    8. '=int' → logprob: -13.136932373046875
    9. ' str' → logprob: -13.636932373046875
    10. '(int' → logprob: -13.636932373046875

Token 18: ')' (ID: 8)
  Prédit: ')'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')' → logprob: -0.048899706453084946
    2. '):' → logprob: -3.0488996505737305
    3. ',' → logprob: -8.42389965057373
    4. ')->' → logprob: -9.79889965057373
    5. ':' → logprob: -11.17389965057373
    6. '):
' → logprob: -12.04889965057373
    7. '   ' → logprob: -12.92389965057373
    8. '`)' → logprob: -13.04889965057373
    9. '*' → logprob: -13.17389965057373
    10. '')' → logprob: -13.79889965057373

Token 19: ' ->' (ID: 2747)
  Prédit: ':'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ':' → logprob: -0.00017112065688706934
    2. '):' → logprob: -9.500170707702637
    3. ':return' → logprob: -10.125170707702637
    4. '():' → logprob: -10.625170707702637
    5. ':**' → logprob: -11.500170707702637
    6. ' :' → logprob: -12.750170707702637
    7. ')' → logprob: -13.125170707702637
    8. ':def' → logprob: -13.250170707702637
    9. '[:]' → logprob: -13.250170707702637
    10. '':' → logprob: -13.375170707702637

Token 20: ' float' (ID: 4428)
  Prédit: ' int'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' int' → logprob: -0.1155388206243515
    2. 'int' → logprob: -2.2405388355255127
    3. ' float' → logprob: -5.990538597106934
    4. 'float' → logprob: -8.615538597106934
    5. ' None' → logprob: -10.990538597106934
    6. ' str' → logprob: -11.990538597106934
    7. ' ' → logprob: -13.365538597106934
    8. '   ' → logprob: -13.740538597106934
    9. 'None' → logprob: -14.115538597106934
    10. '[int' → logprob: -14.740538597106934

Token 21: ':
' (ID: 734)
  Prédit: ':'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ':' → logprob: -3.3451433409936726e-05
    2. ':return' → logprob: -11.375033378601074
    3. '():' → logprob: -12.000033378601074
    4. ':**' → logprob: -12.250033378601074
    5. '):' → logprob: -12.250033378601074
    6. ':
' → logprob: -13.625033378601074
    7. '   ' → logprob: -13.875033378601074
    8. '':' → logprob: -13.875033378601074
    9. '*:' → logprob: -14.750033378601074
    10. '`:' → logprob: -14.875033378601074

Token 22: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.08265712112188339
    2. ':' → logprob: -2.5826570987701416
    3. ' ' → logprob: -6.832657337188721
    4. '    
' → logprob: -7.332657337188721
    5. ':
' → logprob: -7.332657337188721
    6. '```' → logprob: -8.332656860351562
    7. '    ' → logprob: -9.082656860351562
    8. '  ' → logprob: -9.457656860351562
    9. ' return' → logprob: -9.457656860351562
    10. '  
' → logprob: -9.582656860351562

Token 23: ' if' (ID: 538)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.6416148543357849
    2. ' if' → logprob: -2.1416149139404297
    3. ' return' → logprob: -2.5166149139404297
    4. ' max' → logprob: -2.8916149139404297
    5. 'return' → logprob: -2.8916149139404297
    6. ' 
' → logprob: -3.0166149139404297
    7. '    
' → logprob: -3.5166149139404297
    8. 'if' (adapté à ' if') → logprob: -4.64161491394043
    9. 'max' → logprob: -4.76661491394043
    10. 'result' → logprob: -4.89161491394043

Token 24: ' n' (ID: 297)
  Prédit: ' k'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' k' → logprob: -0.5773002505302429
    2. ' n' → logprob: -0.8273002505302429
    3. 'k' → logprob: -7.077300071716309
    4. 'n' → logprob: -8.077300071716309
    5. ' ' → logprob: -8.952300071716309
    6. ' not' → logprob: -9.577300071716309
    7. ' ' → logprob: -13.077300071716309
    8. '   ' → logprob: -13.827300071716309
    9. ' (' → logprob: -14.202300071716309
    10. '  ' → logprob: -14.327300071716309

Token 25: ' <=' (ID: 5017)
  Prédit: ' <'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' <' → logprob: -1.0415719747543335
    2. ' ==' → logprob: -1.2915719747543335
    3. ' <=' → logprob: -1.7915719747543335
    4. ' >' → logprob: -2.666572093963623
    5. '==' → logprob: -2.666572093963623
    6. ' >=' → logprob: -3.916572093963623
    7. ' ' → logprob: -4.166572093963623
    8. '<' → logprob: -4.666572093963623
    9. '>' → logprob: -4.666572093963623
    10. '<=' → logprob: -4.666572093963623

Token 26: ' k' (ID: 372)
  Prédit: '0'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '0' → logprob: -0.24446408450603485
    2. ' ' → logprob: -2.369464159011841
    3. '1' → logprob: -2.494464159011841
    4. 'k' → logprob: -3.244464159011841
    5. ' k' → logprob: -6.369463920593262
    6. '2' → logprob: -9.619463920593262
    7. '   ' → logprob: -11.119463920593262
    8. '10' → logprob: -12.494463920593262
    9. '  ' → logprob: -12.994463920593262
    10. '3' → logprob: -12.994463920593262

Token 27: ':
' (ID: 734)
  Prédit: ':'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ':' → logprob: -0.0021670327987521887
    2. ':return' → logprob: -6.502167224884033
    3. ':
' → logprob: -7.752167224884033
    4. ' :' → logprob: -9.127166748046875
    5. '   ' → logprob: -9.377166748046875
    6. ' or' → logprob: -11.252166748046875
    7. ' return' → logprob: -11.502166748046875
    8. '+' → logprob: -12.752166748046875
    9. '       ' → logprob: -13.002166748046875
    10. '    ' → logprob: -13.377166748046875

Token 28: '       ' (ID: 309)
  Prédit: ':'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ':' → logprob: -0.17887425422668457
    2. '       ' → logprob: -2.4288742542266846
    3. '   ' → logprob: -3.1788742542266846
    4. ':
' → logprob: -4.1788740158081055
    5. ':return' → logprob: -4.4288740158081055
    6. ' return' → logprob: -5.9288740158081055
    7. '0' → logprob: -6.1788740158081055
    8. 'return' → logprob: -7.6788740158081055
    9. '    ' → logprob: -8.178874015808105
    10. ' :' → logprob: -8.553874015808105

Token 29: ' lis' (ID: 20784)
  Prédit: ' return'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' return' → logprob: -0.11746024340391159
    2. 'return' → logprob: -2.617460250854492
    3. '   ' → logprob: -3.367460250854492
    4. ':return' → logprob: -6.617460250854492
    5. '0' → logprob: -6.992460250854492
    6. ' ' → logprob: -7.992460250854492
    7. '       ' → logprob: -7.992460250854492
    8. ':' → logprob: -8.867460250854492
    9. '1' → logprob: -9.367460250854492
    10. '	return' → logprob: -10.117460250854492

Token 30: ' =' (ID: 314)
  Prédit: 't'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 't' → logprob: -0.00010676169040380046
    2. ' =' → logprob: -10.500106811523438
    3. '   ' → logprob: -10.875106811523438
    4. ':' → logprob: -11.500106811523438
    5. '=' → logprob: -11.750106811523438
    6. '_t' → logprob: -12.000106811523438
    7. 'tener' → logprob: -12.625106811523438
    8. '       ' → logprob: -13.000106811523438
    9. '(t' → logprob: -13.000106811523438
    10. '[t' → logprob: -13.000106811523438

Token 31: ' [' (ID: 723)
  Prédit: ' list'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' list' → logprob: -0.6059310436248779
    2. ' n' → logprob: -1.605931043624878
    3. ' [' → logprob: -1.730931043624878
    4. 'list' → logprob: -3.730931043624878
    5. '[' → logprob: -4.480931282043457
    6. '[n' → logprob: -4.480931282043457
    7. 'n' → logprob: -4.730931282043457
    8. ' range' → logprob: -4.855931282043457
    9. ' sorted' → logprob: -5.355931282043457
    10. ' []' → logprob: -5.855931282043457

Token 32: '0' (ID: 15)
  Prédit: '0'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '0' → logprob: -0.7216113209724426
    2. '1' → logprob: -1.2216112613677979
    3. 'i' → logprob: -2.096611261367798
    4. 'n' → logprob: -3.221611261367798
    5. ' n' → logprob: -4.596611499786377
    6. 'k' → logprob: -4.721611499786377
    7. ' i' → logprob: -4.846611499786377
    8. 'x' → logprob: -4.846611499786377
    9. ' ' → logprob: -5.096611499786377
    10. '   ' → logprob: -5.721611499786377

Token 33: '.' (ID: 13)
  Prédit: ']'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ']' → logprob: -0.010784282349050045
    2. ' for' → logprob: -5.135784149169922
    3. ']*' → logprob: -6.010784149169922
    4. ',' → logprob: -6.885784149169922
    5. ' ]' → logprob: -7.510784149169922
    6. '   ' → logprob: -7.760784149169922
    7. ']*(' → logprob: -8.510784149169922
    8. 'for' → logprob: -9.885784149169922
    9. '.' → logprob: -10.135784149169922
    10. ']+' → logprob: -10.385784149169922

Token 34: '0' (ID: 15)
  Prédit: '0'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '0' → logprob: -0.06342913955450058
    2. '5' → logprob: -3.063429117202759
    3. ']' → logprob: -5.188429355621338
    4. '1' → logprob: -5.438429355621338
    5. ',' → logprob: -5.938429355621338
    6. ' for' → logprob: -7.563429355621338
    7. '       ' → logprob: -7.938429355621338
    8. '   ' → logprob: -8.43842887878418
    9. '2' → logprob: -8.81342887878418
    10. ']*' → logprob: -9.18842887878418

Token 35: ']' (ID: 60)
  Prédit: ']'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ']' → logprob: -0.0330163910984993
    2. ',' → logprob: -4.283016204833984
    3. ' for' → logprob: -4.658016204833984
    4. ' ]' → logprob: -5.158016204833984
    5. ']*' → logprob: -5.783016204833984
    6. '   ' → logprob: -8.658016204833984
    7. 'for' → logprob: -9.908016204833984
    8. ']+' → logprob: -10.283016204833984
    9. ']*(' → logprob: -10.283016204833984
    10. ')' → logprob: -10.908016204833984

Token 36: ' *' (ID: 425)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -1.2596999406814575
    2. ' for' → logprob: -1.2596999406814575
    3. ',' → logprob: -1.3846999406814575
    4. ']' → logprob: -2.884699821472168
    5. '       ' → logprob: -3.509699821472168
    6. ' +' → logprob: -4.134699821472168
    7. ' ]' → logprob: -4.134699821472168
    8. 'for' → logprob: -4.384699821472168
    9. ' ' → logprob: -4.509699821472168
    10. ' *' → logprob: -4.509699821472168

Token 37: ' n' (ID: 297)
  Prédit: '(n'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(n' → logprob: -1.2209373712539673
    2. '(k' → logprob: -1.2209373712539673
    3. 'k' → logprob: -1.4709373712539673
    4. 'n' → logprob: -1.9709373712539673
    5. '(' → logprob: -3.7209372520446777
    6. ' (' → logprob: -4.470937252044678
    7. ' n' → logprob: -5.970937252044678
    8. ' k' → logprob: -5.970937252044678
    9. ' ' → logprob: -8.720937728881836
    10. '((' → logprob: -10.470937728881836

Token 38: '
' (ID: 198)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -1.6326924562454224
    2. '
' → logprob: -1.7576924562454224
    3. '    
' → logprob: -1.7576924562454224
    4. '<|end|>' → logprob: -1.8826924562454224
    5. '       ' → logprob: -2.757692337036133
    6. ' 
' → logprob: -2.882692337036133
    7. '\n' → logprob: -3.007692337036133
    8. ' ' → logprob: -3.382692337036133
    9. ')' → logprob: -4.007692337036133
    10. '  
' → logprob: -4.507692337036133

Token 39: '       ' (ID: 309)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -1.058416485786438
    2. '\n' → logprob: -1.558416485786438
    3. '    
' → logprob: -1.808416485786438
    4. '<|end|>' → logprob: -2.5584163665771484
    5. '
' → logprob: -2.8084163665771484
    6. ' 
' → logprob: -3.0584163665771484
    7. '       ' → logprob: -4.058416366577148
    8. '  
' → logprob: -4.308416366577148
    9. '   
' → logprob: -4.683416366577148
    10. '```' → logprob: -4.683416366577148

Token 40: ' score' (ID: 8429)
  Prédit: '       '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '       ' → logprob: -0.5942971110343933
    2. '   ' → logprob: -1.844297170639038
    3. ' ' → logprob: -2.094297170639038
    4. ' for' → logprob: -2.719297170639038
    5. 'for' → logprob: -3.094297170639038
    6. 'return' → logprob: -4.219296932220459
    7. ' return' → logprob: -5.094296932220459
    8. '
' → logprob: -5.469296932220459
    9. ' 
' → logprob: -5.594296932220459
    10. '    ' → logprob: -5.719296932220459

Token 41: ' =' (ID: 314)
  Prédit: 's'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 's' → logprob: -0.45104947686195374
    2. ' =' → logprob: -1.0760494470596313
    3. '=' → logprob: -4.076049327850342
    4. '[:]' → logprob: -6.326049327850342
    5. '[' → logprob: -6.451049327850342
    6. ' ' → logprob: -7.201049327850342
    7. '[s' → logprob: -8.5760498046875
    8. ' +=' → logprob: -9.2010498046875
    9. '   ' → logprob: -9.2010498046875
    10. ' s' → logprob: -9.3260498046875

Token 42: ' ' (ID: 220)
  Prédit: '0'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '0' → logprob: -0.5423715114593506
    2. ' ' → logprob: -1.0423715114593506
    3. '1' → logprob: -3.4173715114593506
    4. ' n' → logprob: -4.41737174987793
    5. ' k' → logprob: -4.91737174987793
    6. ' sum' → logprob: -5.04237174987793
    7. 'k' → logprob: -6.16737174987793
    8. 'sum' → logprob: -6.66737174987793
    9. 'n' → logprob: -6.79237174987793
    10. ' max' → logprob: -7.79237174987793

Token 43: '0' (ID: 15)
  Prédit: '0'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '0' → logprob: -0.2615368664264679
    2. '1' → logprob: -1.8865368366241455
    3. 'sum' → logprob: -3.2615368366241455
    4. 'k' → logprob: -4.261537075042725
    5. 'n' → logprob: -4.511537075042725
    6. ' ' → logprob: -5.511537075042725
    7. ' sum' → logprob: -5.761537075042725
    8. 'float' → logprob: -6.511537075042725
    9. ' n' → logprob: -6.761537075042725
    10. '(' → logprob: -6.886537075042725

Token 44: '.' (ID: 13)
  Prédit: '.'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '.' → logprob: -0.48270291090011597
    2. '<|end|>' → logprob: -1.1077029705047607
    3. '<|end|>' → logprob: -3.3577029705047607
    4. '
' → logprob: -4.857702732086182
    5. 'for' → logprob: -6.482702732086182
    6. ' ' → logprob: -6.607702732086182
    7. ' for' → logprob: -6.607702732086182
    8. '   ' → logprob: -7.107702732086182
    9. ')' → logprob: -7.107702732086182
    10. ' 
' → logprob: -7.607702732086182

Token 45: '0' (ID: 15)
  Prédit: '0'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '0' → logprob: -0.0019355426775291562
    2. '5' → logprob: -6.2519354820251465
    3. '1' → logprob: -13.001935958862305
    4. '6' → logprob: -13.751935958862305
    5. '```' → logprob: -13.876935958862305
    6. ' ' → logprob: -14.001935958862305
    7. '   ' → logprob: -15.126935958862305
    8. '       ' → logprob: -15.251935958862305
    9. '    ' → logprob: -15.626935958862305
    10. '9' → logprob: -15.751935958862305

Token 46: '
' (ID: 198)
  Prédit: '
'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '
' → logprob: -0.21644751727581024
    2. '       ' → logprob: -2.091447591781616
    3. '\n' → logprob: -3.216447591781616
    4. '<|end|>' → logprob: -4.216447353363037
    5. '   ' → logprob: -4.466447353363037
    6. '    
' → logprob: -6.466447353363037
    7. '        
' → logprob: -7.341447353363037
    8. ' for' → logprob: -7.591447353363037
    9. ' 
' → logprob: -7.966447353363037
    10. '  
' → logprob: -8.091447830200195

Token 47: '       ' (ID: 309)
  Prédit: '       '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '       ' → logprob: -0.44171932339668274
    2. '
' → logprob: -1.3167192935943604
    3. '   ' → logprob: -2.9417192935943604
    4. '\n' → logprob: -3.8167192935943604
    5. '<|end|>' → logprob: -5.1917195320129395
    6. ' for' → logprob: -5.6917195320129395
    7. '    
' → logprob: -7.3167195320129395
    8. ' 
' → logprob: -7.3167195320129395
    9. '' → logprob: -7.3167195320129395
    10. '```' → logprob: -7.5667195320129395

Token 48: ' iterable' (ID: 113880)
  Prédit: 'for'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'for' → logprob: -0.48976802825927734
    2. ' for' → logprob: -0.9897680282592773
    3. '       ' → logprob: -4.489768028259277
    4. '   ' → logprob: -5.614768028259277
    5. '\n' → logprob: -8.739768028259277
    6. '```' → logprob: -8.739768028259277
    7. ' ' → logprob: -9.489768028259277
    8. '
' → logprob: -10.114768028259277
    9. 'n' → logprob: -10.489768028259277
    10. '	for' → logprob: -10.489768028259277

Token 49: ' =' (ID: 314)
  Prédit: ' ='
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' =' → logprob: -0.03402036055922508
    2. '=' → logprob: -3.40902042388916
    3. 'for' → logprob: -8.78402042388916
    4. ':' → logprob: -9.03402042388916
    5. ' for' → logprob: -10.65902042388916
    6. 's' → logprob: -10.78402042388916
    7. ',' → logprob: -10.78402042388916
    8. ' ' → logprob: -10.90902042388916
    9. ')' → logprob: -13.28402042388916
    10. '_' → logprob: -13.28402042388916

Token 50: ' range' (ID: 3352)
  Prédit: 'range'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'range' → logprob: -0.6337563395500183
    2. ' range' → logprob: -0.7587563395500183
    3. '(range' → logprob: -8.258756637573242
    4. '[' → logprob: -9.008756637573242
    5. ' n' → logprob: -9.133756637573242
    6. ' k' → logprob: -9.258756637573242
    7. ' list' → logprob: -9.383756637573242
    8. 'k' → logprob: -9.508756637573242
    9. 'list' → logprob: -9.571256637573242
    10. ' [' → logprob: -9.758756637573242

Token 51: '(' (ID: 7)
  Prédit: '(n'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(n' → logprob: -0.8271731734275818
    2. '(k' → logprob: -0.8271731734275818
    3. '(' → logprob: -2.0771732330322266
    4. '(i' → logprob: -9.827173233032227
    5. '(l' → logprob: -10.577173233032227
    6. '(s' → logprob: -10.952173233032227
    7. '(len' → logprob: -10.952173233032227
    8. '(
' → logprob: -11.202173233032227
    9. '(

' → logprob: -12.327173233032227
    10. '(j' → logprob: -12.952173233032227

Token 52: '1' (ID: 16)
  Prédit: 'k'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'k' → logprob: -0.4801996052265167
    2. 'n' → logprob: -0.9801995754241943
    3. '1' → logprob: -6.105199813842773
    4. '(n' → logprob: -6.230199813842773
    5. '(k' → logprob: -6.980199813842773
    6. ' n' → logprob: -7.980199813842773
    7. '(' → logprob: -8.230199813842773
    8. ' k' → logprob: -8.730199813842773
    9. '0' → logprob: -9.355199813842773
    10. '   ' → logprob: -9.855199813842773

Token 53: ',' (ID: 11)
  Prédit: ','
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ',' → logprob: -0.002243154216557741
    2. ',n' → logprob: -6.7522430419921875
    3. ' ,' → logprob: -7.2522430419921875
    4. ',k' → logprob: -8.127243041992188
    5. '(n' → logprob: -10.377243041992188
    6. '(k' → logprob: -12.252243041992188
    7. ' ' → logprob: -12.252243041992188
    8. '1' → logprob: -12.252243041992188
    9. 'k' → logprob: -12.377243041992188
    10. '   ' → logprob: -12.377243041992188

Token 54: ' n' (ID: 297)
  Prédit: 'k'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'k' → logprob: -0.588769793510437
    2. 'n' → logprob: -0.838769793510437
    3. ' n' → logprob: -4.713769912719727
    4. ' k' → logprob: -5.588769912719727
    5. ' ' → logprob: -11.963769912719727
    6. 'len' → logprob: -12.088769912719727
    7. '   ' → logprob: -12.213769912719727
    8. '	n' → logprob: -12.213769912719727
    9. 'nk' → logprob: -12.713769912719727
    10. '1' → logprob: -13.463769912719727

Token 55: ' +' (ID: 659)
  Prédit: '+'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '+' → logprob: -0.16210365295410156
    2. ' +' → logprob: -1.9121036529541016
    3. ')' → logprob: -6.787103652954102
    4. ' -' → logprob: -8.162103652954102
    5. '-' → logprob: -8.287103652954102
    6. '+k' → logprob: -9.787103652954102
    7. ' )' → logprob: -10.412103652954102
    8. '   ' → logprob: -10.662103652954102
    9. '),' → logprob: -10.912103652954102
    10. '))' → logprob: -11.162103652954102

Token 56: ' ' (ID: 220)
  Prédit: '1'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '1' → logprob: -0.001175820711068809
    2. ' ' → logprob: -6.751175880432129
    3. '2' → logprob: -13.251175880432129
    4. ' k' → logprob: -13.751175880432129
    5. '   ' → logprob: -13.876175880432129
    6. ')' → logprob: -14.126175880432129
    7. 'k' → logprob: -15.001175880432129
    8. '  ' → logprob: -16.376174926757812
    9. '(' → logprob: -16.626174926757812
    10. ',' → logprob: -16.751174926757812

Token 57: '1' (ID: 16)
  Prédit: '1'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '1' → logprob: -0.00014418430509977043
    2. ' ' → logprob: -8.875144004821777
    3. '2' → logprob: -13.000144004821777
    4. ')' → logprob: -14.375144004821777
    5. '   ' → logprob: -14.750144004821777
    6. 'k' → logprob: -15.500144004821777
    7. '```' → logprob: -16.250144958496094
    8. ' k' → logprob: -16.312644958496094
    9. '(' → logprob: -16.375144958496094
    10. '  ' → logprob: -16.562644958496094

Token 58: ')
' (ID: 446)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')' → logprob: -0.00012987985974177718
    2. ')
' → logprob: -9.500129699707031
    3. ' )' → logprob: -10.250129699707031
    4. ',' → logprob: -12.000129699707031
    5. '   ' → logprob: -12.500129699707031
    6. '))' → logprob: -13.000129699707031
    7. '       ' → logprob: -13.500129699707031
    8. ' ' → logprob: -13.750129699707031
    9. '):' → logprob: -13.875129699707031
    10. '),' → logprob: -14.375129699707031

Token 59: '   ' (ID: 271)
  Prédit: '       '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '       ' → logprob: -0.39778587222099304
    2. ':' → logprob: -1.7727859020233154
    3. '
' → logprob: -2.3977859020233154
    4. ':
' → logprob: -4.397785663604736
    5. '<|end|>' → logprob: -4.522785663604736
    6. ',' → logprob: -4.772785663604736
    7. '   ' → logprob: -5.022785663604736
    8. ')' → logprob: -5.022785663604736
    9. ' for' → logprob: -5.272785663604736
    10. '        
' → logprob: -6.272785663604736

Token 60: ' else' (ID: 1203)
  Prédit: 'else'
  Correct (stricte): False
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'else' (adapté à ' else') → logprob: -0.3585178554058075
    2. ' else' → logprob: -2.23351788520813
    3. '   ' → logprob: -2.48351788520813
    4. ':' → logprob: -3.23351788520813
    5. '
' → logprob: -3.85851788520813
    6. '<|end|>' → logprob: -3.98351788520813
    7. 'elif' → logprob: -5.233517646789551
    8. ')' → logprob: -5.483517646789551
    9. '    
' → logprob: -5.608517646789551
    10. '```' → logprob: -5.733517646789551

Token 61: ':
' (ID: 734)
  Prédit: ':'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ':' → logprob: -0.02656535618007183
    2. ':
' → logprob: -3.6515653133392334
    3. '       ' → logprob: -8.401565551757812
    4. ',' → logprob: -11.151565551757812
    5. '   ' → logprob: -11.901565551757812
    6. ':
' → logprob: -12.651565551757812
    7. ' :' → logprob: -12.651565551757812
    8. '{' → logprob: -12.901565551757812
    9. ':

' → logprob: -12.901565551757812
    10. '```' → logprob: -13.151565551757812

Token 62: '       ' (ID: 309)
  Prédit: '       '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '       ' → logprob: -0.007358497940003872
    2. '```' → logprob: -5.882358551025391
    3. ' iterable' → logprob: -6.132358551025391
    4. '   ' → logprob: -7.382358551025391
    5. ' score' → logprob: -8.00735855102539
    6. 'iter' → logprob: -8.38235855102539
    7. ' lis' → logprob: -8.50735855102539
    8. 'score' → logprob: -8.88235855102539
    9. ' ' → logprob: -8.88235855102539
    10. '    ' → logprob: -9.69485855102539

Token 63: ' lis' (ID: 20784)
  Prédit: ' iterable'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' iterable' → logprob: -0.6944447755813599
    2. 'iter' → logprob: -1.4444447755813599
    3. ' lis' → logprob: -2.8194446563720703
    4. 'score' → logprob: -3.0694446563720703
    5. 'lis' (adapté à ' lis') → logprob: -3.3194446563720703
    6. ' score' → logprob: -3.5694446563720703
    7. '   ' → logprob: -3.6944446563720703
    8. '       ' → logprob: -3.9444446563720703
    9. 'import' → logprob: -4.19444465637207
    10. ' iter' → logprob: -4.94444465637207

Token 64: ' =' (ID: 314)
  Prédit: ' ='
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' =' → logprob: -0.01417080033570528
    2. '=' → logprob: -4.2641706466674805
    3. ' ' → logprob: -12.63917064666748
    4. ':' → logprob: -13.76417064666748
    5. '[' → logprob: -14.38917064666748
    6. '   ' → logprob: -14.88917064666748
    7. ' =[' → logprob: -15.01417064666748
    8. ')' → logprob: -15.13917064666748
    9. 's' → logprob: -15.38917064666748
    10. '```' → logprob: -15.51417064666748

Token 65: ' [' (ID: 723)
  Prédit: '['
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '[' → logprob: -0.4315130412578583
    2. ' [' → logprob: -1.0565130710601807
    3. '[k' → logprob: -6.556512832641602
    4. '[n' → logprob: -6.931512832641602
    5. '[-' → logprob: -8.931512832641602
    6. '[]' → logprob: -10.056512832641602
    7. '[(' → logprob: -10.431512832641602
    8. ' ' → logprob: -10.681512832641602
    9. ' [-' → logprob: -10.806512832641602
    10. '   ' → logprob: -10.931512832641602

Token 66: '0' (ID: 15)
  Prédit: '0'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '0' → logprob: -0.07826859503984451
    2. '1' → logprob: -3.578268527984619
    3. 'k' → logprob: -3.953268527984619
    4. '(' → logprob: -5.078268527984619
    5. ' ' → logprob: -5.203268527984619
    6. 'float' → logprob: -5.203268527984619
    7. '(k' → logprob: -6.328268527984619
    8. ' (' → logprob: -6.453268527984619
    9. '[' → logprob: -6.953268527984619
    10. ' k' → logprob: -7.078268527984619

Token 67: '.' (ID: 13)
  Prédit: '.'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '.' → logprob: -0.0003688245196826756
    2. ']' → logprob: -8.00036907196045
    3. '.]' → logprob: -11.37536907196045
    4. ']*' → logprob: -12.12536907196045
    5. ',' → logprob: -12.50036907196045
    6. ')' → logprob: -12.50036907196045
    7. ' ]' → logprob: -13.12536907196045
    8. '   ' → logprob: -13.75036907196045
    9. '])' → logprob: -14.00036907196045
    10. ' ' → logprob: -14.12536907196045

Token 68: '0' (ID: 15)
  Prédit: '0'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '0' → logprob: -0.0008935939986258745
    2. '5' → logprob: -7.125893592834473
    3. 'float' → logprob: -11.250893592834473
    4. '.' → logprob: -11.500893592834473
    5. ']' → logprob: -11.625893592834473
    6. '```' → logprob: -11.688393592834473
    7. 'for' → logprob: -11.813393592834473
    8. '25' → logprob: -12.375893592834473
    9. ')' → logprob: -12.375893592834473
    10. ' ' → logprob: -12.500893592834473

Token 69: ']' (ID: 60)
  Prédit: ']'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ']' → logprob: -0.0021030367352068424
    2. ']*' → logprob: -6.377102851867676
    3. ' ]' → logprob: -8.377102851867676
    4. ',' → logprob: -9.752102851867676
    5. ' for' → logprob: -10.002102851867676
    6. ')' → logprob: -10.752102851867676
    7. '   ' → logprob: -11.002102851867676
    8. 'for' → logprob: -12.002102851867676
    9. ']*(' → logprob: -12.252102851867676
    10. '*' → logprob: -12.502102851867676

Token 70: ' *' (ID: 425)
  Prédit: ' *'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' *' → logprob: -0.12838411331176758
    2. '*' → logprob: -2.1283841133117676
    3. '*n' → logprob: -7.878384113311768
    4. '   ' → logprob: -8.25338363647461
    5. '+' → logprob: -8.37838363647461
    6. ' ' → logprob: -8.75338363647461
    7. '*k' → logprob: -9.50338363647461
    8. ' +' → logprob: -9.62838363647461
    9. '       ' → logprob: -10.25338363647461
    10. ',' → logprob: -10.37838363647461

Token 71: ' (' (ID: 350)
  Prédit: 'k'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'k' → logprob: -0.00550718791782856
    2. '(k' → logprob: -5.880506992340088
    3. 'n' → logprob: -6.505506992340088
    4. '(n' → logprob: -7.755506992340088
    5. '(' → logprob: -7.880506992340088
    6. ' k' → logprob: -8.380507469177246
    7. ' (' → logprob: -10.130507469177246
    8. '   ' → logprob: -10.130507469177246
    9. ' ' → logprob: -10.505507469177246
    10. '((' → logprob: -11.693007469177246

Token 72: 'k' (ID: 74)
  Prédit: 'k'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'k' → logprob: -0.0018965097842738032
    2. 'n' → logprob: -6.501896381378174
    3. ' k' → logprob: -8.126896858215332
    4. '   ' → logprob: -10.751896858215332
    5. '(' → logprob: -11.001896858215332
    6. '(k' → logprob: -11.126896858215332
    7. ' ' → logprob: -11.751896858215332
    8. ' n' → logprob: -11.751896858215332
    9. '2' → logprob: -12.001896858215332
    10. '(n' → logprob: -12.251896858215332

Token 73: ' -' (ID: 533)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ')' → logprob: -0.47979843616485596
    2. '+' → logprob: -1.229798436164856
    3. ' +' → logprob: -2.4797983169555664
    4. ' )' → logprob: -5.729798316955566
    5. ')
' → logprob: -7.354798316955566
    6. '   ' → logprob: -7.854798316955566
    7. '-' → logprob: -8.979798316955566
    8. '+)' → logprob: -9.354798316955566
    9. '+n' → logprob: -9.479798316955566
    10. '*' → logprob: -9.604798316955566

Token 74: ' ' (ID: 220)
  Prédit: '1'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '1' → logprob: -0.0019009130774065852
    2. ' ' → logprob: -6.376901149749756
    3. '0' → logprob: -9.751900672912598
    4. 'n' → logprob: -10.001900672912598
    5. '2' → logprob: -10.876900672912598
    6. '-' → logprob: -11.001900672912598
    7. '   ' → logprob: -11.501900672912598
    8. '(' → logprob: -11.626900672912598
    9. ' n' → logprob: -11.626900672912598
    10. '(n' → logprob: -11.751900672912598

Token 75: '1' (ID: 16)
  Prédit: '1'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '1' → logprob: -5.145118848304264e-05
    2. '2' → logprob: -11.000051498413086
    3. ' ' → logprob: -11.250051498413086
    4. '0' → logprob: -12.312551498413086
    5. '-' → logprob: -12.625051498413086
    6. 'n' → logprob: -13.062551498413086
    7. '(' → logprob: -13.437551498413086
    8. '   ' → logprob: -13.562551498413086
    9. 'k' → logprob: -13.750051498413086
    10. '```' → logprob: -14.062551498413086

Token 76: ')
' (ID: 446)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')' → logprob: -0.0025139504577964544
    2. ' )' → logprob: -7.002513885498047
    3. ')
' → logprob: -7.377513885498047
    4. '+' → logprob: -7.377513885498047
    5. ' +' → logprob: -8.752513885498047
    6. '   ' → logprob: -9.627513885498047
    7. '))' → logprob: -10.877513885498047
    8. '       ' → logprob: -11.002513885498047
    9. '),' → logprob: -11.252513885498047
    10. ')+' → logprob: -11.252513885498047

Token 77: '       ' (ID: 309)
  Prédit: ''
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False

Token 78: ' score' (ID: 8429)
  Prédit: 'iter'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'iter' → logprob: -0.3735703229904175
    2. 'score' (adapté à ' score') → logprob: -1.7485703229904175
    3. ' iterable' → logprob: -2.373570442199707
    4. '       ' → logprob: -4.498570442199707
    5. ' score' → logprob: -4.623570442199707
    6. ' for' → logprob: -5.686070442199707
    7. 'for' → logprob: -5.811070442199707
    8. ' iter' → logprob: -6.186070442199707
    9. '   ' → logprob: -6.248570442199707
    10. 'n' → logprob: -6.623570442199707

Token 79: ' =' (ID: 314)
  Prédit: ' ='
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' =' → logprob: -0.007619637995958328
    2. '=' → logprob: -4.882619857788086
    3. ' ' → logprob: -12.007619857788086
    4. ' +=' → logprob: -12.382619857788086
    5. ',' → logprob: -13.632619857788086
    6. ')' → logprob: -14.132619857788086
    7. 's' → logprob: -14.757619857788086
    8. ' is' → logprob: -16.007619857788086
    9. ' =
' → logprob: -16.507619857788086
    10. '```' → logprob: -16.632619857788086

Token 80: ' (' (ID: 350)
  Prédit: '0'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '0' → logprob: -0.25030645728111267
    2. ' ' → logprob: -2.8753063678741455
    3. 'log' → logprob: -3.2503063678741455
    4. 'k' → logprob: -3.8753063678741455
    5. '1' → logprob: -4.125306606292725
    6. ' log' → logprob: -4.250306606292725
    7. ' float' → logprob: -4.500306606292725
    8. 'float' → logprob: -4.625306606292725
    9. ' (' → logprob: -4.875306606292725
    10. '(' → logprob: -5.000306606292725

Token 81: 'n' (ID: 77)
  Prédit: 'k'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'k' → logprob: -0.9381217360496521
    2. 'n' → logprob: -1.5631217956542969
    3. '1' → logprob: -1.8131217956542969
    4. 'log' → logprob: -1.8131217956542969
    5. '2' → logprob: -4.063121795654297
    6. '(k' → logprob: -4.438121795654297
    7. ' n' → logprob: -5.188121795654297
    8. '(n' → logprob: -5.188121795654297
    9. 'ceil' → logprob: -5.188121795654297
    10. ')' → logprob: -5.688121795654297

Token 82: ' -' (ID: 533)
  Prédit: '-'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '-' → logprob: -0.668928325176239
    2. ' -' → logprob: -0.793928325176239
    3. ')' → logprob: -4.793928146362305
    4. ' ' → logprob: -5.543928146362305
    5. ' /' → logprob: -5.543928146362305
    6. '-k' → logprob: -5.668928146362305
    7. '+' → logprob: -5.668928146362305
    8. '/' → logprob: -5.793928146362305
    9. '*' → logprob: -6.168928146362305
    10. ' +' → logprob: -6.293928146362305

Token 83: ' k' (ID: 372)
  Prédit: 'k'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'k' → logprob: -0.11818665266036987
    2. ' k' → logprob: -2.3681867122650146
    3. ' (' → logprob: -4.6181864738464355
    4. '(k' → logprob: -4.8681864738464355
    5. '(' → logprob: -8.743186950683594
    6. '	k' → logprob: -10.618186950683594
    7. ' ' → logprob: -10.743186950683594
    8. '1' → logprob: -10.868186950683594
    9. ')' → logprob: -11.868186950683594
    10. '   ' → logprob: -12.930686950683594

Token 84: ' +' (ID: 659)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')' → logprob: -0.5038610100746155
    2. '+' → logprob: -1.6288609504699707
    3. ' +' → logprob: -1.6288609504699707
    4. ' )' → logprob: -6.253860950469971
    5. '-' → logprob: -7.253860950469971
    6. ' -' → logprob: -8.003861427307129
    7. '   ' → logprob: -9.378861427307129
    8. ' ' → logprob: -9.503861427307129
    9. ')*' → logprob: -9.503861427307129
    10. ')/' → logprob: -9.753861427307129

Token 85: ' ' (ID: 220)
  Prédit: '1'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '1' → logprob: -0.0020135752856731415
    2. ' ' → logprob: -6.502013683319092
    3. '2' → logprob: -7.877013683319092
    4. ')' → logprob: -9.377013206481934
    5. '0' → logprob: -10.814513206481934
    6. 'k' → logprob: -13.002013206481934
    7. '3' → logprob: -13.252013206481934
    8. '...' → logprob: -13.252013206481934
    9. '   ' → logprob: -13.252013206481934
    10. '```' → logprob: -13.502013206481934

Token 86: '1' (ID: 16)
  Prédit: '1'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '1' → logprob: -0.0005785312969237566
    2. ' ' → logprob: -7.8755784034729
    3. '2' → logprob: -8.750578880310059
    4. ')' → logprob: -11.000578880310059
    5. '0' → logprob: -11.125578880310059
    6. '```' → logprob: -13.563078880310059
    7. '3' → logprob: -14.313078880310059
    8. '   ' → logprob: -14.438078880310059
    9. '...' → logprob: -15.000578880310059
    10. 'k' → logprob: -15.000578880310059

Token 87: ')' (ID: 8)
  Prédit: ')'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')' → logprob: -0.001696484163403511
    2. ' )' → logprob: -6.501696586608887
    3. ')*' → logprob: -9.126696586608887
    4. '-' → logprob: -10.876696586608887
    5. ')/' → logprob: -11.126696586608887
    6. ' -' → logprob: -11.751696586608887
    7. '+' → logprob: -12.251696586608887
    8. ' ' → logprob: -12.251696586608887
    9. '   ' → logprob: -12.376696586608887
    10. '*' → logprob: -12.626696586608887

Token 88: ' /' (ID: 820)
  Prédit: ' *'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' *' → logprob: -0.09275437891483307
    2. '*' → logprob: -3.217754364013672
    3. ' /' → logprob: -3.842754364013672
    4. ' ' → logprob: -4.967754364013672
    5. ' +' → logprob: -5.092754364013672
    6. '
' → logprob: -5.842754364013672
    7. '       ' → logprob: -6.217754364013672
    8. '        ' → logprob: -6.342754364013672
    9. ' *
' → logprob: -6.842754364013672
    10. '+' → logprob: -7.092754364013672

Token 89: ' n' (ID: 297)
  Prédit: 'k'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'k' → logprob: -1.2755968570709229
    2. 'n' → logprob: -1.2755968570709229
    3. ' n' → logprob: -1.2755968570709229
    4. ' k' → logprob: -2.775596857070923
    5. '(' → logprob: -3.775596857070923
    6. '(n' → logprob: -3.775596857070923
    7. ' (' → logprob: -4.275596618652344
    8. '2' → logprob: -4.275596618652344
    9. 'log' → logprob: -4.775596618652344
    10. ' ' → logprob: -5.025596618652344

Token 90: '
' (ID: 198)
  Prédit: '
'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '
' → logprob: -1.2352739572525024
    2. '   ' → logprob: -1.9852739572525024
    3. '<|end|>' → logprob: -2.110273838043213
    4. ' for' → logprob: -2.235273838043213
    5. '+' → logprob: -2.735273838043213
    6. ' ' → logprob: -2.860273838043213
    7. '    
' → logprob: -3.110273838043213
    8. '       ' → logprob: -3.235273838043213
    9. ' +' → logprob: -3.735273838043213
    10. 'for' → logprob: -3.860273838043213

Token 91: '       ' (ID: 309)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.807910144329071
    2. ' for' → logprob: -1.5579102039337158
    3. '
' → logprob: -1.8079102039337158
    4. 'for' → logprob: -2.557910203933716
    5. '<|end|>' → logprob: -3.307910203933716
    6. '    
' → logprob: -4.057909965515137
    7. '       ' → logprob: -4.057909965515137
    8. ' ' → logprob: -5.057909965515137
    9. '    ' → logprob: -5.682909965515137
    10. '```' → logprob: -5.932909965515137

Token 92: ' iterable' (ID: 113880)
  Prédit: 'iter'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'iter' → logprob: -0.025473326444625854
    2. ' iterable' → logprob: -4.275473117828369
    3. '       ' → logprob: -5.150473117828369
    4. 'for' → logprob: -6.025473117828369
    5. '   ' → logprob: -6.775473117828369
    6. ' for' → logprob: -6.900473117828369
    7. ' iter' → logprob: -7.775473117828369
    8. '```' → logprob: -9.650473594665527
    9. 'range' → logprob: -9.900473594665527
    10. 'inter' → logprob: -9.900473594665527

Token 93: ' =' (ID: 314)
  Prédit: ' ='
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' =' → logprob: -0.160235196352005
    2. '=' → logprob: -1.9102351665496826
    3. ':' → logprob: -11.535235404968262
    4. ' ' → logprob: -14.535235404968262
    5. '=

' → logprob: -15.410235404968262
    6. 's' → logprob: -16.160234451293945
    7. 'range' → logprob: -16.285234451293945
    8. '＝' → logprob: -16.410234451293945
    9. ' =
' → logprob: -16.785234451293945
    10. '<|end|>' → logprob: -17.222734451293945

Token 94: ' range' (ID: 3352)
  Prédit: 'range'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'range' → logprob: -0.2521503269672394
    2. ' range' → logprob: -1.502150297164917
    3. '(range' → logprob: -9.377150535583496
    4. ' ' → logprob: -10.502150535583496
    5. '	range' → logprob: -10.752150535583496
    6. '[' → logprob: -10.939650535583496
    7. 're' → logprob: -11.377150535583496
    8. ' [' → logprob: -11.689650535583496
    9. '   ' → logprob: -12.064650535583496
    10. 'list' → logprob: -12.189650535583496

Token 95: '(' (ID: 7)
  Prédit: '('
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(' → logprob: -0.07899763435125351
    2. '(k' → logprob: -2.5789976119995117
    3. '1' → logprob: -9.703997611999512
    4. '(n' → logprob: -10.328997611999512
    5. 'k' → logprob: -12.703997611999512
    6. '((' → logprob: -12.828997611999512
    7. ' (' → logprob: -13.203997611999512
    8. '(
' → logprob: -13.203997611999512
    9. '(l' → logprob: -14.328997611999512
    10. '```' → logprob: -14.453997611999512

Token 96: '1' (ID: 16)
  Prédit: '1'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '1' → logprob: -0.045074932277202606
    2. 'k' → logprob: -3.170074939727783
    3. '(' → logprob: -7.170074939727783
    4. '2' → logprob: -7.670074939727783
    5. '(k' → logprob: -8.170074462890625
    6. 'n' → logprob: -8.420074462890625
    7. ' ' → logprob: -8.670074462890625
    8. ' k' → logprob: -9.545074462890625
    9. '(n' → logprob: -10.545074462890625
    10. '   ' → logprob: -10.795074462890625

Token 97: ',' (ID: 11)
  Prédit: ','
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ',' → logprob: -0.003479382023215294
    2. ' ,' → logprob: -6.253479480743408
    3. ',k' → logprob: -6.503479480743408
    4. ',n' → logprob: -10.37847900390625
    5. 'k' → logprob: -11.62847900390625
    6. ' k' → logprob: -13.00347900390625
    7. ',
' → logprob: -13.75347900390625
    8. '   ' → logprob: -13.87847900390625
    9. ',len' → logprob: -13.87847900390625
    10. ' ' → logprob: -14.00347900390625

Token 98: ' k' (ID: 372)
  Prédit: 'k'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'k' → logprob: -0.06993954628705978
    2. ' k' → logprob: -2.694939613342285
    3. '{k' → logprob: -13.819939613342285
    4. '	k' → logprob: -14.569939613342285
    5. '(k' → logprob: -14.944939613342285
    6. ',k' → logprob: -15.069939613342285
    7. ' ' → logprob: -15.444939613342285
    8. ' (' → logprob: -15.569939613342285
    9. ')' → logprob: -15.819939613342285
    10. 'n' → logprob: -16.06993865966797

Token 99: ')

' (ID: 1029)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ')' → logprob: -0.021533619612455368
    2. ' )' → logprob: -4.146533489227295
    3. '+' → logprob: -6.021533489227295
    4. '-' → logprob: -7.021533489227295
    5. ' +' → logprob: -7.021533489227295
    6. ' -' → logprob: -8.021533966064453
    7. '`)' → logprob: -8.646533966064453
    8. ')
' → logprob: -8.771533966064453
    9. '   ' → logprob: -8.896533966064453
    10. '       ' → logprob: -9.271533966064453

Token 100: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.5540449023246765
    2. ' for' → logprob: -1.4290449619293213
    3. ':' → logprob: -1.8040449619293213
    4. 'for' → logprob: -4.679044723510742
    5. '```' → logprob: -5.554044723510742
    6. '
' → logprob: -6.054044723510742
    7. '<|end|>' → logprob: -6.179044723510742
    8. ':
' → logprob: -6.804044723510742
    9. '  
' → logprob: -7.054044723510742
    10. '    
' → logprob: -7.554044723510742

Token 101: ' inv' (ID: 1827)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.33618175983428955
    2. ' for' → logprob: -1.3361817598342896
    3. 'for' → logprob: -3.836181640625
    4. '    
' → logprob: -7.836181640625
    5. '
' → logprob: -8.711181640625
    6. ' ' → logprob: -8.961181640625
    7. '```' → logprob: -8.961181640625
    8. '<|end|>' → logprob: -9.461181640625
    9. '	for' → logprob: -9.586181640625
    10. '  
' → logprob: -10.586181640625

Token 102: '_n' (ID: 2170)
  Prédit: '_prob'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '_prob' → logprob: -1.3207098245620728
    2. 'erse' → logprob: -1.8207098245620728
    3. 'ert' → logprob: -2.320709705352783
    4. 'ers' → logprob: -2.320709705352783
    5. '_count' → logprob: -2.695709705352783
    6. '=' → logprob: -2.695709705352783
    7. ' =' → logprob: -2.820709705352783
    8. '_probs' → logprob: -3.445709705352783
    9. 'er' → logprob: -3.695709705352783
    10. '_len' → logprob: -4.195709705352783

Token 103: ' =' (ID: 314)
  Prédit: ' ='
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' =' → logprob: -0.05666925758123398
    2. '=' → logprob: -2.931669235229492
    3. 'al' → logprob: -7.556669235229492
    4. '_' → logprob: -7.681669235229492
    5. ' ' → logprob: -7.931669235229492
    6. '   ' → logprob: -8.556669235229492
    7. '_inv' → logprob: -9.931669235229492
    8. 'ert' → logprob: -10.181669235229492
    9. 'erse' → logprob: -10.431669235229492
    10. 'ol' → logprob: -10.806669235229492

Token 104: ' ' (ID: 220)
  Prédit: '1'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '1' → logprob: -0.026375075802206993
    2. ' ' → logprob: -3.6513750553131104
    3. '   ' → logprob: -9.901374816894531
    4. 'n' → logprob: -11.651374816894531
    5. ' n' → logprob: -12.276374816894531
    6. 'float' → logprob: -12.651374816894531
    7. '  ' → logprob: -13.276374816894531
    8. ' float' → logprob: -13.776374816894531
    9. ' /' → logprob: -14.526374816894531
    10. '/n' → logprob: -14.651374816894531

Token 105: '1' (ID: 16)
  Prédit: '1'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '1' → logprob: -0.0021288490388542414
    2. ' ' → logprob: -6.252129077911377
    3. 'n' → logprob: -8.877128601074219
    4. 'float' → logprob: -10.627128601074219
    5. '   ' → logprob: -11.377128601074219
    6. ' n' → logprob: -12.002128601074219
    7. '(' → logprob: -12.002128601074219
    8. 'k' → logprob: -12.752128601074219
    9. '/n' → logprob: -13.502128601074219
    10. '(n' → logprob: -13.752128601074219

Token 106: '.' (ID: 13)
  Prédit: '/'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '/' → logprob: -0.10070348531007767
    2. ' /' → logprob: -2.475703477859497
    3. '.' → logprob: -4.600703716278076
    4. '/n' → logprob: -6.600703716278076
    5. '   ' → logprob: -8.725703239440918
    6. ' ' → logprob: -10.350703239440918
    7. 'n' → logprob: -10.350703239440918
    8. '[' → logprob: -11.225703239440918
    9. '(n' → logprob: -11.975703239440918
    10. '0' → logprob: -12.100703239440918

Token 107: '0' (ID: 15)
  Prédit: '0'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '0' → logprob: -1.580929347255733e-05
    2. '-' → logprob: -11.875016212463379
    3. 'n' → logprob: -12.625016212463379
    4. '5' → logprob: -13.375016212463379
    5. '```' → logprob: -13.625016212463379
    6. '   ' → logprob: -14.750016212463379
    7. '6' → logprob: -15.375016212463379
    8. '+' → logprob: -15.375016212463379
    9. '1' → logprob: -15.500016212463379
    10. '
' → logprob: -15.625016212463379

Token 108: ' /' (ID: 820)
  Prédit: '/'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '/' → logprob: -0.005944563075900078
    2. ' /' → logprob: -5.130944728851318
    3. '/n' → logprob: -11.63094425201416
    4. '   ' → logprob: -12.63094425201416
    5. 'n' → logprob: -13.50594425201416
    6. '/
' → logprob: -13.88094425201416
    7. ' ' → logprob: -15.13094425201416
    8. '/k' → logprob: -15.38094425201416
    9. '*' → logprob: -15.63094425201416
    10. '/
' → logprob: -16.130945205688477

Token 109: ' n' (ID: 297)
  Prédit: 'n'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'n' → logprob: -0.0002342912630410865
    2. ' n' → logprob: -8.375234603881836
    3. 'log' → logprob: -14.125234603881836
    4. '   ' → logprob: -14.125234603881836
    5. '(' → logprob: -14.375234603881836
    6. 'float' → logprob: -14.375234603881836
    7. '(n' → logprob: -14.875234603881836
    8. 'ceil' → logprob: -15.125234603881836
    9. ' ' → logprob: -16.000234603881836
    10. '  ' → logprob: -16.000234603881836

Token 110: '
' (ID: 198)
  Prédit: ' for'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' for' → logprob: -0.5592538714408875
    2. '
' → logprob: -1.4342539310455322
    3. '   ' → logprob: -2.3092539310455322
    4. 'for' → logprob: -2.9342539310455322
    5. '<|end|>' → logprob: -3.8092539310455322
    6. '    
' → logprob: -5.059253692626953
    7. '<|end|>' → logprob: -6.309253692626953
    8. '  
' → logprob: -6.309253692626953
    9. ',' → logprob: -6.559253692626953
    10. ':' → logprob: -6.809253692626953

Token 111: '   ' (ID: 271)
  Prédit: ' for'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' for' → logprob: -0.5681772232055664
    2. '   ' → logprob: -0.9431772232055664
    3. 'for' → logprob: -3.3181772232055664
    4. '<|end|>' → logprob: -5.193177223205566
    5. '```' → logprob: -6.568177223205566
    6. '    
' → logprob: -7.568177223205566
    7. '	for' → logprob: -9.193177223205566
    8. '<|end|>' → logprob: -9.693177223205566
    9. '  ' → logprob: -9.943177223205566
    10. ' ' → logprob: -10.068177223205566

Token 112: ' pow' (ID: 9779)
  Prédit: 'for'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'for' → logprob: -0.5644978284835815
    2. '   ' → logprob: -1.1894978284835815
    3. ' for' → logprob: -2.064497947692871
    4. '    
' → logprob: -10.064497947692871
    5. '```' → logprob: -10.064497947692871
    6. ' ' → logprob: -12.439497947692871
    7. '	for' → logprob: -12.814497947692871
    8. '  ' → logprob: -13.439497947692871
    9. '``' → logprob: -13.564497947692871
    10. '
' → logprob: -13.564497947692871

Token 113: '_half' (ID: 105284)
  Prédit: 'er'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'er' → logprob: -0.18273034691810608
    2. '2' → logprob: -2.3077304363250732
    3. '(' → logprob: -3.6827304363250732
    4. '_' → logprob: -4.682730197906494
    5. '_n' → logprob: -4.682730197906494
    6. 'ers' → logprob: -4.682730197906494
    7. 'erv' → logprob: -5.432730197906494
    8. 's' → logprob: -6.432730197906494
    9. '_list' → logprob: -6.432730197906494
    10. '_inv' → logprob: -7.307730197906494

Token 114: ' =' (ID: 314)
  Prédit: ' ='
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' =' → logprob: -0.09325829148292542
    2. '=' → logprob: -2.5932583808898926
    3. '_' → logprob: -4.718258380889893
    4. 'er' → logprob: -6.218258380889893
    5. '_val' → logprob: -7.093258380889893
    6. '2' → logprob: -7.343258380889893
    7. '_pow' → logprob: -8.093257904052734
    8. '_n' → logprob: -8.218257904052734
    9. 'pow' → logprob: -8.468257904052734
    10. '_half' → logprob: -8.968257904052734

Token 115: ' lambda' (ID: 27871)
  Prédit: '0'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '0' → logprob: -0.039956845343112946
    2. ' ' → logprob: -3.91495680809021
    3. '2' → logprob: -5.414957046508789
    4. 'pow' → logprob: -5.539957046508789
    5. '1' → logprob: -5.664957046508789
    6. '(' → logprob: -6.164957046508789
    7. '   ' → logprob: -6.414957046508789
    8. '[' → logprob: -6.789957046508789
    9. 'lambda' → logprob: -6.914957046508789
    10. ' lambda' → logprob: -7.789957046508789

Token 116: ' x' (ID: 1215)
  Prédit: 'x'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'x' → logprob: -0.19458620250225067
    2. ' x' → logprob: -1.944586157798767
    3. 'k' → logprob: -4.069586277008057
    4. ' k' → logprob: -5.444586277008057
    5. 'i' → logprob: -5.569586277008057
    6. 'p' → logprob: -6.319586277008057
    7. ' i' → logprob: -6.569586277008057
    8. 'n' → logprob: -6.819586277008057
    9. 'b' → logprob: -6.944586277008057
    10. ' n' → logprob: -7.694586277008057

Token 117: ':' (ID: 25)
  Prédit: ':'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ':' → logprob: -0.00026300468016415834
    2. ' :' → logprob: -8.250263214111328
    3. '=' → logprob: -14.250263214111328
    4. ',' → logprob: -14.250263214111328
    5. '1' → logprob: -16.500263214111328
    6. ':
' → logprob: -16.625263214111328
    7. '   ' → logprob: -17.125263214111328
    8. '0' → logprob: -17.375263214111328
    9. '  ' → logprob: -17.750263214111328
    10. '2' → logprob: -17.750263214111328

Token 118: ' ' (ID: 220)
  Prédit: '0'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '0' → logprob: -0.462651789188385
    2. ' ' → logprob: -1.0876517295837402
    3. '2' → logprob: -3.5876517295837402
    4. '(' → logprob: -5.83765172958374
    5. ' (' → logprob: -6.21265172958374
    6. '1' → logprob: -7.83765172958374
    7. 'pow' → logprob: -8.337652206420898
    8. ' pow' → logprob: -9.337652206420898
    9. '   ' → logprob: -10.087652206420898
    10. '.' → logprob: -11.712652206420898

Token 119: '2' (ID: 17)
  Prédit: '0'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '0' → logprob: -0.004429289605468512
    2. '(' → logprob: -6.379429340362549
    3. ' ' → logprob: -6.629429340362549
    4. '2' → logprob: -6.879429340362549
    5. 'pow' → logprob: -8.37942886352539
    6. '1' → logprob: -9.62942886352539
    7. '   ' → logprob: -10.12942886352539
    8. ' (' → logprob: -10.62942886352539
    9. 'return' → logprob: -12.50442886352539
    10. ' pow' → logprob: -13.37942886352539

Token 120: '.' (ID: 13)
  Prédit: '**'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '**' → logprob: -0.016060762107372284
    2. ' **' → logprob: -4.141060829162598
    3. '-' → logprob: -10.891060829162598
    4. '*' → logprob: -13.891060829162598
    5. '   ' → logprob: -13.891060829162598
    6. ' -' → logprob: -14.141060829162598
    7. '.' → logprob: -14.141060829162598
    8. ')**' → logprob: -14.266060829162598
    9. '**
' → logprob: -14.641060829162598
    10. '^' → logprob: -14.766060829162598

Token 121: '0' (ID: 15)
  Prédit: '-x'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '-x' → logprob: -0.6800724864006042
    2. '**' → logprob: -0.8050724864006042
    3. '(-' → logprob: -4.18007230758667
    4. '(' → logprob: -4.18007230758667
    5. '-p' → logprob: -5.05507230758667
    6. '0' → logprob: -6.18007230758667
    7. 'x' → logprob: -6.43007230758667
    8. '-' → logprob: -6.68007230758667
    9. 'float' → logprob: -6.68007230758667
    10. '-f' → logprob: -6.80507230758667

Token 122: ' **' (ID: 6240)
  Prédit: '**'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '**' → logprob: -0.011048762127757072
    2. ' **' → logprob: -4.511048793792725
    3. '-' → logprob: -15.011048316955566
    4. '*' → logprob: -15.136048316955566
    5. '   ' → logprob: -15.636048316955566
    6. ')**' → logprob: -17.136049270629883
    7. '***' → logprob: -17.511049270629883
    8. '**
' → logprob: -17.761049270629883
    9. '*-' → logprob: -17.761049270629883
    10. ' ' → logprob: -17.886049270629883

Token 123: ' (-' (ID: 21382)
  Prédit: '(-'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(-' → logprob: -0.023209134116768837
    2. '-x' → logprob: -3.8982090950012207
    3. ' (-' → logprob: -6.273209095001221
    4. ' -' → logprob: -8.023209571838379
    5. '-' → logprob: -8.523209571838379
    6. '(' → logprob: -9.023209571838379
    7. '-(' → logprob: -10.023209571838379
    8. '(x' → logprob: -10.398209571838379
    9. '(-(' → logprob: -10.898209571838379
    10. 'x' → logprob: -11.523209571838379

Token 124: 'ceil' (ID: 43552)
  Prédit: 'x'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'x' → logprob: -0.0011967786122113466
    2. ' x' → logprob: -6.75119686126709
    3. '(x' → logprob: -11.00119686126709
    4. '(' → logprob: -11.62619686126709
    5. ' (' → logprob: -13.87619686126709
    6. 'ceil' → logprob: -17.126195907592773
    7. '((' → logprob: -17.251195907592773
    8. ' ' → logprob: -17.751195907592773
    9. ')' → logprob: -17.876195907592773
    10. '   ' → logprob: -18.126195907592773

Token 125: '(log' (ID: 25116)
  Prédit: '(x'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(x' → logprob: -0.0032702835742384195
    2. '(' → logprob: -6.628270149230957
    3. '((' → logprob: -6.628270149230957
    4. '(log' → logprob: -7.878270149230957
    5. ' (' → logprob: -9.003270149230957
    6. 'x' → logprob: -9.753270149230957
    7. '(abs' → logprob: -10.378270149230957
    8. '(
' → logprob: -12.378270149230957
    9. ')' → logprob: -12.503270149230957
    10. '(n' → logprob: -12.628270149230957

Token 126: '2' (ID: 17)
  Prédit: '2'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '2' → logprob: -3.292907877039397e-06
    2. ' ' → logprob: -13.50000286102295
    3. '₂' → logprob: -13.87500286102295
    4. '_' → logprob: -15.00000286102295
    5. '[' → logprob: -16.250003814697266
    6. '(' → logprob: -16.250003814697266
    7. '۲' → logprob: -16.250003814697266
    8. '(x' → logprob: -16.937503814697266
    9. '   ' → logprob: -17.125003814697266
    10. ' (' → logprob: -17.437503814697266

Token 127: '(k' (ID: 12125)
  Prédit: '(x'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(x' → logprob: -0.0009817203972488642
    2. '(' → logprob: -7.62598180770874
    3. '(n' → logprob: -8.625981330871582
    4. '(abs' → logprob: -8.875981330871582
    5. 'x' → logprob: -9.500981330871582
    6. ' (' → logprob: -9.750981330871582
    7. '((' → logprob: -10.750981330871582
    8. '(k' → logprob: -11.625981330871582
    9. ')(' → logprob: -13.000981330871582
    10. ')' → logprob: -13.000981330871582

Token 128: ' /' (ID: 820)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')' → logprob: -0.3291935920715332
    2. '))' → logprob: -1.9541935920715332
    3. ' -' → logprob: -3.579193592071533
    4. ')))' → logprob: -3.704193592071533
    5. ' +' → logprob: -4.204193592071533
    6. '+' → logprob: -4.204193592071533
    7. ' /' → logprob: -4.579193592071533
    8. '-' → logprob: -4.704193592071533
    9. '(x' → logprob: -4.954193592071533
    10. '   ' → logprob: -5.079193592071533

Token 129: ' x' (ID: 1215)
  Prédit: 'x'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'x' → logprob: -0.029778379946947098
    2. ' x' → logprob: -3.654778480529785
    3. 'n' → logprob: -6.654778480529785
    4. '(x' → logprob: -7.029778480529785
    5. '(' → logprob: -7.404778480529785
    6. ' (' → logprob: -8.904778480529785
    7. 'inv' → logprob: -9.029778480529785
    8. ' n' → logprob: -9.154778480529785
    9. 'max' → logprob: -9.654778480529785
    10. 'k' → logprob: -9.779778480529785

Token 130: ')))
' (ID: 12562)
  Prédit: ')))'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')))' → logprob: -0.013091648928821087
    2. '))' → logprob: -4.763091564178467
    3. '))))' → logprob: -5.888091564178467
    4. ')' → logprob: -7.013091564178467
    5. ' ' → logprob: -8.013092041015625
    6. '   ' → logprob: -8.388092041015625
    7. ')))
' → logprob: -9.388092041015625
    8. ' if' → logprob: -9.888092041015625
    9. '       ' → logprob: -11.013092041015625
    10. 'if' → logprob: -11.513092041015625

Token 131: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.025997769087553024
    2. ' for' → logprob: -4.400997638702393
    3. ')' → logprob: -5.525997638702393
    4. '
' → logprob: -5.900997638702393
    5. 'for' → logprob: -6.150997638702393
    6. '<|end|>' → logprob: -6.400997638702393
    7. '    
' → logprob: -6.525997638702393
    8. ',' → logprob: -7.525997638702393
    9. ' ' → logprob: -8.77599811553955
    10. '  ' → logprob: -9.27599811553955

Token 132: ' lis' (ID: 20784)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.042451389133930206
    2. ' for' → logprob: -3.4174513816833496
    3. 'for' → logprob: -4.79245138168335
    4. '    
' → logprob: -7.91745138168335
    5. '
' → logprob: -10.292451858520508
    6. '	for' → logprob: -10.417451858520508
    7. ')' → logprob: -11.042451858520508
    8. '  
' → logprob: -12.417451858520508
    9. '```' → logprob: -12.542451858520508
    10. ' ' → logprob: -12.667451858520508

Token 133: '_gen' (ID: 37563)
  Prédit: '[:]'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '[:]' → logprob: -0.5525599122047424
    2. '[' → logprob: -1.3025598526000977
    3. '.append' → logprob: -2.6775598526000977
    4. ' =' → logprob: -2.8025598526000977
    5. '.extend' → logprob: -4.552559852600098
    6. '=' → logprob: -5.427559852600098
    7. '.' → logprob: -5.927559852600098
    8. '[-' → logprob: -6.052559852600098
    9. '[:' → logprob: -7.677559852600098
    10. ' +=' → logprob: -7.802559852600098

Token 134: ' =' (ID: 314)
  Prédit: '='
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '=' → logprob: -0.5839662551879883
    2. ' =' → logprob: -0.8339662551879883
    3. 'er' → logprob: -4.958966255187988
    4. '=lambda' → logprob: -7.458966255187988
    5. 'ERATOR' → logprob: -8.833966255187988
    6. '=(' → logprob: -9.583966255187988
    7. '   ' → logprob: -10.708966255187988
    8. 'eral' → logprob: -10.833966255187988
    9. '(' → logprob: -11.083966255187988
    10. '(iter' → logprob: -11.208966255187988

Token 135: ' (' (ID: 350)
  Prédit: '(map'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '(map' → logprob: -0.35462459921836853
    2. '(pow' → logprob: -1.729624629020691
    3. '(iter' → logprob: -2.9796245098114014
    4. '(filter' → logprob: -3.6046245098114014
    5. '(p' → logprob: -4.2296247482299805
    6. '(' → logprob: -4.7296247482299805
    7. '(list' → logprob: -5.3546247482299805
    8. '(inv' → logprob: -5.3546247482299805
    9. '(x' → logprob: -5.8546247482299805
    10. '(i' → logprob: -6.3546247482299805

Token 136: 'inv' (ID: 31086)
  Prédit: 'pow'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'pow' → logprob: -0.07886147499084473
    2. 'x' → logprob: -3.5788614749908447
    3. 'inv' → logprob: -4.203861236572266
    4. 'i' → logprob: -4.953861236572266
    5. '(i' → logprob: -5.453861236572266
    6. '(' → logprob: -5.453861236572266
    7. '(pow' → logprob: -5.578861236572266
    8. '1' → logprob: -5.703861236572266
    9. '(x' → logprob: -5.953861236572266
    10. 'k' → logprob: -6.703861236572266

Token 137: '_n' (ID: 2170)
  Prédit: '_n'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_n' → logprob: -4.008129963040119e-06
    2. '_' → logprob: -13.000003814697266
    3. ' _' → logprob: -14.250003814697266
    4. ')' → logprob: -15.250003814697266
    5. '_k' → logprob: -15.750003814697266
    6. '_x' → logprob: -15.875003814697266
    7. '_i' → logprob: -16.375003814697266
    8. 'n' → logprob: -16.875003814697266
    9. ')_' → logprob: -17.125003814697266
    10. '_m' → logprob: -17.250003814697266

Token 138: ' *' (ID: 425)
  Prédit: '*'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '*' → logprob: -0.6706686615943909
    2. ' *' → logprob: -0.7956686615943909
    3. ' for' → logprob: -4.045668601989746
    4. '/' → logprob: -4.920668601989746
    5. ' /' → logprob: -5.045668601989746
    6. 'for' → logprob: -5.170668601989746
    7. ')' → logprob: -8.795668601989746
    8. ' ' → logprob: -9.170668601989746
    9. '*i' → logprob: -10.545668601989746
    10. '**' → logprob: -10.670668601989746

Token 139: ' pow' (ID: 9779)
  Prédit: 'pow'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'pow' → logprob: -0.09918218106031418
    2. ' pow' → logprob: -2.47418212890625
    3. '(pow' → logprob: -5.84918212890625
    4. '(' → logprob: -5.84918212890625
    5. ' (' → logprob: -6.47418212890625
    6. '(i' → logprob: -8.09918212890625
    7. ' x' → logprob: -8.22418212890625
    8. 'x' → logprob: -8.34918212890625
    9. '(x' → logprob: -8.47418212890625
    10. ')' → logprob: -8.47418212890625

Token 140: '_half' (ID: 105284)
  Prédit: '_half'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_half' → logprob: -3.128163257315464e-07
    2. '_hal' → logprob: -15.5
    3. '_HALF' → logprob: -17.375
    4. 'half' → logprob: -17.375
    5. '_' → logprob: -17.75
    6. ')_' → logprob: -18.75
    7. '(' → logprob: -18.875
    8. ')' → logprob: -20.125
    9. ' half' → logprob: -20.25
    10. '(_' → logprob: -20.625

Token 141: '(i' (ID: 3649)
  Prédit: '(x'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(x' → logprob: -0.43031829595565796
    2. '(i' → logprob: -1.0553183555603027
    3. '(' → logprob: -8.305317878723145
    4. '(j' → logprob: -8.430317878723145
    5. '(value' → logprob: -8.680317878723145
    6. '(item' → logprob: -8.805317878723145
    7. '(l' → logprob: -8.930317878723145
    8. '(k' → logprob: -9.180317878723145
    9. '(val' → logprob: -9.180317878723145
    10. '(n' → logprob: -9.680317878723145

Token 142: ')' (ID: 8)
  Prédit: ')'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')' → logprob: -0.0006822916911914945
    2. '))' → logprob: -7.750682353973389
    3. ' )' → logprob: -8.87568187713623
    4. 'for' → logprob: -10.25068187713623
    5. ' for' → logprob: -11.00068187713623
    6. ')
' → logprob: -11.75068187713623
    7. '*' → logprob: -11.75068187713623
    8. ' ' → logprob: -12.00068187713623
    9. '   ' → logprob: -12.00068187713623
    10. '**' → logprob: -12.50068187713623

Token 143: ' for' (ID: 395)
  Prédit: ' for'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' for' → logprob: -0.5759824514389038
    2. 'for' → logprob: -0.8259824514389038
    3. '   ' → logprob: -11.325982093811035
    4. ')' → logprob: -11.325982093811035
    5. ' ' → logprob: -12.075982093811035
    6. '    ' → logprob: -12.575982093811035
    7. '       ' → logprob: -12.700982093811035
    8. '	for' → logprob: -13.825982093811035
    9. '  ' → logprob: -13.950982093811035
    10. '        ' → logprob: -13.950982093811035

Token 144: ' i' (ID: 575)
  Prédit: ' i'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' i' → logprob: -0.3871491849422455
    2. 'i' → logprob: -1.1371492147445679
    3. ' ' → logprob: -8.7621488571167
    4. ' ' → logprob: -9.8871488571167
    5. '	i' → logprob: -10.7621488571167
    6. ' in' → logprob: -11.7621488571167
    7. ')' → logprob: -11.8871488571167
    8. '  ' → logprob: -12.0121488571167
    9. ',' → logprob: -12.0121488571167
    10. '   ' → logprob: -12.2621488571167

Token 145: ' in' (ID: 306)
  Prédit: ' in'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' in' → logprob: -0.038112759590148926
    2. 'in' → logprob: -3.2881126403808594
    3. ')' → logprob: -9.78811264038086
    4. ' ' → logprob: -11.91311264038086
    5. ' )' → logprob: -13.28811264038086
    6. '<|end|>' → logprob: -13.28811264038086
    7. '	in' → logprob: -13.78811264038086
    8. ' ' → logprob: -13.78811264038086
    9. '<|end|>' → logprob: -14.41311264038086
    10. 'n' → logprob: -14.78811264038086

Token 146: ' iterable' (ID: 113880)
  Prédit: ' iterable'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' iterable' → logprob: -0.6330071091651917
    2. 'iter' → logprob: -0.7580071091651917
    3. '(iter' → logprob: -8.133007049560547
    4. ' range' → logprob: -10.383007049560547
    5. ' iter' → logprob: -10.633007049560547
    6. 'range' → logprob: -10.758007049560547
    7. ' ' → logprob: -11.758007049560547
    8. 'enumer' → logprob: -12.008007049560547
    9. ' itertools' → logprob: -12.383007049560547
    10. 'Iterable' → logprob: -12.633007049560547

Token 147: ')
' (ID: 446)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')' → logprob: -1.0087516784551553e-05
    2. '   ' → logprob: -12.25001049041748
    3. ' )' → logprob: -12.62501049041748
    4. ')
' → logprob: -13.87501049041748
    5. '))' → logprob: -14.62501049041748
    6. ',' → logprob: -16.750009536743164
    7. '),' → logprob: -16.875009536743164
    8. ' ' → logprob: -16.875009536743164
    9. ')))' → logprob: -17.000009536743164
    10. ',)' → logprob: -17.000009536743164

Token 148: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.06474056094884872
    2. ' for' → logprob: -2.9397406578063965
    3. 'for' → logprob: -4.8147406578063965
    4. '<|end|>' → logprob: -6.8147406578063965
    5. '    
' → logprob: -8.189740180969238
    6. ')' → logprob: -8.814740180969238
    7. '
' → logprob: -9.939740180969238
    8. '	for' → logprob: -10.439740180969238
    9. ',' → logprob: -10.564740180969238
    10. ' ' → logprob: -11.064740180969238

Token 149: ' return' (ID: 622)
  Prédit: 'for'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'for' → logprob: -0.16205954551696777
    2. ' for' → logprob: -2.2870595455169678
    3. '   ' → logprob: -3.0370595455169678
    4. '    
' → logprob: -10.537059783935547
    5. ')' → logprob: -10.912059783935547
    6. '	for' → logprob: -11.787059783935547
    7. ' ' → logprob: -12.662059783935547
    8. ',' → logprob: -13.412059783935547
    9. '```' → logprob: -13.537059783935547
    10. '<|end|>' → logprob: -13.537059783935547

Token 150: ' sum' (ID: 4215)
  Prédit: 'score'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'score' → logprob: -0.598124623298645
    2. ' score' → logprob: -0.848124623298645
    3. ' sum' → logprob: -4.4731245040893555
    4. 'sum' → logprob: -4.9731245040893555
    5. ' max' → logprob: -5.8481245040893555
    6. 'max' → logprob: -7.5981245040893555
    7. ' ' → logprob: -9.598124504089355
    8. '(score' → logprob: -9.598124504089355
    9. '   ' → logprob: -11.098124504089355
    10. '	score' → logprob: -11.348124504089355

Token 151: '(l' (ID: 4179)
  Prédit: '(l'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(l' → logprob: -0.0012091610115021467
    2. '(x' → logprob: -7.501209259033203
    3. '(i' → logprob: -8.376209259033203
    4. '((' → logprob: -8.501209259033203
    5. '(' → logprob: -9.376209259033203
    6. '(list' → logprob: -10.251209259033203
    7. '(score' → logprob: -10.376209259033203
    8. '(next' → logprob: -10.751209259033203
    9. '(lst' → logprob: -11.126209259033203
    10. '([' → logprob: -11.751209259033203

Token 152: 'is' (ID: 276)
  Prédit: 'is'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'is' → logprob: -1.4140441635390744e-05
    2. '(is' → logprob: -12.875014305114746
    3. 'ist' → logprob: -13.125014305114746
    4. '[' → logprob: -13.125014305114746
    5. 's' → logprob: -13.500014305114746
    6. '[i' → logprob: -13.750014305114746
    7. 'ambda' → logprob: -14.125014305114746
    8. '(' → logprob: -14.500014305114746
    9. '(i' → logprob: -14.500014305114746
    10. '(x' → logprob: -15.125014305114746

Token 153: '_gen' (ID: 37563)
  Prédit: '_gen'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_gen' → logprob: -5.085517113911919e-05
    2. 'gen' → logprob: -10.75005054473877
    3. ')' → logprob: -11.00005054473877
    4. '))' → logprob: -12.25005054473877
    5. ')+' → logprob: -13.37505054473877
    6. '[i' → logprob: -13.75005054473877
    7. '_generator' → logprob: -14.37505054473877
    8. 'Gen' → logprob: -14.50005054473877
    9. '+' → logprob: -14.62505054473877
    10. 's' → logprob: -14.87505054473877

Token 154: ')' (ID: 8)
  Prédit: ')'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')' → logprob: -2.47495681833243e-05
    2. ' )' → logprob: -11.250024795532227
    3. '+' → logprob: -12.125024795532227
    4. '))' → logprob: -13.250024795532227
    5. ')+' → logprob: -13.625024795532227
    6. ' +' → logprob: -13.750024795532227
    7. ')*' → logprob: -14.500024795532227
    8. ' ' → logprob: -15.250024795532227
    9. '   ' → logprob: -15.375024795532227
    10. ')`' → logprob: -15.500024795532227

Token 155: ' +' (ID: 659)
  Prédit: ''
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False

Token 156: ' score' (ID: 8429)
  Prédit: 'score'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'score' → logprob: -0.006717505399137735
    2. ' score' → logprob: -5.006717681884766
    3. '   ' → logprob: -13.881717681884766
    4. '(score' → logprob: -14.631717681884766
    5. '	score' → logprob: -14.881717681884766
    6. ' ' → logprob: -16.006717681884766
    7. 'scores' → logprob: -16.506717681884766
    8. '0' → logprob: -17.631717681884766
    9. '
' → logprob: -17.756717681884766
    10. 'sum' → logprob: -18.006717681884766

Token 157: '

' (ID: 279)
  Prédit: ''
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False

Token 158: 'if' (ID: 366)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ')' → logprob: -0.24453632533550262
    2. '<|end|>' → logprob: -1.869536280632019
    3. '(' → logprob: -3.3695363998413086
    4. '[' → logprob: -4.369536399841309
    5. '+' → logprob: -5.494536399841309
    6. '#' → logprob: -5.619536399841309
    7. '
' → logprob: -6.119536399841309
    8. '\n' → logprob: -7.119536399841309
    9. '```' → logprob: -7.119536399841309
    10. ' ' → logprob: -7.119536399841309

Token 159: ' __' (ID: 2516)
  Prédit: ' __'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' __' → logprob: -0.001510335598140955
    2. '__' → logprob: -6.501510143280029
    3. ' ' → logprob: -12.376510620117188
    4. ' ' → logprob: -12.751510620117188
    5. 'name' → logprob: -15.001510620117188
    6. '_name' → logprob: -15.251510620117188
    7. ' True' → logprob: -16.126510620117188
    8. '  ' → logprob: -16.376510620117188
    9. ' name' → logprob: -16.376510620117188
    10. ' _' → logprob: -17.876510620117188

Token 160: 'name' (ID: 897)
  Prédit: '__'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '__' → logprob: -0.016110381111502647
    2. ' ==' → logprob: -5.141110420227051
    3. 'name' → logprob: -5.141110420227051
    4. '==' → logprob: -6.266110420227051
    5. ' __' → logprob: -6.516110420227051
    6. 'if' → logprob: -7.641110420227051
    7. '(name' → logprob: -9.14111042022705
    8. '_name' → logprob: -9.26611042022705
    9. '```' → logprob: -10.39111042022705
    10. '(__' → logprob: -10.64111042022705

Token 161: '__' (ID: 771)
  Prédit: '__'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '__' → logprob: -4.320199877838604e-07
    2. '==' → logprob: -16.25
    3. '__.__' → logprob: -16.375
    4. '___' → logprob: -17.375
    5. '____' → logprob: -17.5
    6. '_' → logprob: -17.75
    7. '__

' → logprob: -18.0
    8. ' ==' → logprob: -19.0
    9. '__('' → logprob: -19.0
    10. 'name' → logprob: -19.125

Token 162: ' ==' (ID: 951)
  Prédit: '__'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '__' → logprob: -0.25383996963500977
    2. '==' → logprob: -2.1288399696350098
    3. ' ==' → logprob: -2.2538399696350098
    4. '=="' → logprob: -8.753839492797852
    5. '_' → logprob: -11.003839492797852
    6. '__.__' → logprob: -11.628839492797852
    7. '=' → logprob: -12.003839492797852
    8. ' ' → logprob: -12.378839492797852
    9. '___' → logprob: -12.503839492797852
    10. '===' → logprob: -13.003839492797852

Token 163: ' "__' (ID: 27367)
  Prédit: '"'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '"' → logprob: -0.011082365177571774
    2. ''' → logprob: -4.511082172393799
    3. ' "__' → logprob: -10.386082649230957
    4. ' "' → logprob: -12.761082649230957
    5. '__' → logprob: -14.261082649230957
    6. ' '__' → logprob: -16.51108169555664
    7. '"user' → logprob: -17.13608169555664
    8. '"name' → logprob: -17.26108169555664
    9. '"_' → logprob: -18.01108169555664
    10. ' ' → logprob: -18.13608169555664

Token 164: 'main' (ID: 7731)
  Prédit: 'main'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'main' → logprob: -3.190178904333152e-05
    2. 'name' → logprob: -10.375031471252441
    3. '_main' → logprob: -15.000031471252441
    4. ' main' → logprob: -15.500031471252441
    5. '__' → logprob: -15.750031471252441
    6. 'ma' → logprob: -17.875032424926758
    7. 'built' → logprob: -18.750032424926758
    8. '_MAIN' → logprob: -19.125032424926758
    9. '-main' → logprob: -19.750032424926758
    10. 'print' → logprob: -19.875032424926758

Token 165: '__":
' (ID: 49892)
  Prédit: '__":
'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '__":
' → logprob: -0.20149314403533936
    2. '__' → logprob: -1.7014931440353394
    3. '__':
' → logprob: -9.826493263244629
    4. '__:' → logprob: -10.576493263244629
    5. '__("' → logprob: -15.576493263244629
    6. '__["' → logprob: -16.201492309570312
    7. '__.__' → logprob: -17.326492309570312
    8. '__",' → logprob: -17.576492309570312
    9. '__
' → logprob: -17.701492309570312
    10. '__.' → logprob: -17.701492309570312

Token 166: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.022102119401097298
    2. ' n' → logprob: -4.022102355957031
    3. '(n' → logprob: -6.147102355957031
    4. ' print' → logprob: -7.897102355957031
    5. 'n' → logprob: -8.147102355957031
    6. '    
' → logprob: -8.272102355957031
    7. ' for' → logprob: -8.647102355957031
    8. ' test' → logprob: -8.772102355957031
    9. ' input' → logprob: -8.772102355957031
    10. ':' → logprob: -9.772102355957031

Token 167: ' n' (ID: 297)
  Prédit: 'print'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'print' → logprob: -0.44687619805336
    2. 'n' (adapté à ' n') → logprob: -1.5718761682510376
    3. ' print' → logprob: -2.571876287460327
    4. ' n' → logprob: -2.696876287460327
    5. 'result' → logprob: -5.321876049041748
    6. 'import' → logprob: -6.196876049041748
    7. ' result' → logprob: -6.821876049041748
    8. ' for' → logprob: -8.196876525878906
    9. ' import' → logprob: -8.571876525878906
    10. 'for' → logprob: -8.821876525878906

Token 168: ',' (ID: 11)
  Prédit: ' ='
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' =' → logprob: -0.49948710203170776
    2. ',' → logprob: -1.1244871616363525
    3. '=' → logprob: -2.7494871616363525
    4. ' ,' → logprob: -6.249486923217773
    5. '   ' → logprob: -7.124486923217773
    6. '<|end|>' → logprob: -7.749486923217773
    7. ' ' → logprob: -7.874486923217773
    8. ')' → logprob: -7.999486923217773
    9. '  ' → logprob: -8.749486923217773
    10. '=int' → logprob: -9.749486923217773

Token 169: ' k' (ID: 372)
  Prédit: ' k'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' k' → logprob: -0.47412213683128357
    2. 'k' → logprob: -0.974122166633606
    3. ' ' → logprob: -10.724122047424316
    4. '=' → logprob: -11.349122047424316
    5. ' =' → logprob: -11.849122047424316
    6. '=k' → logprob: -13.599122047424316
    7. '  ' → logprob: -14.599122047424316
    8. ' 
' → logprob: -14.974122047424316
    9. '<|end|>' → logprob: -14.974122047424316
    10. '   ' → logprob: -15.099122047424316

Token 170: ' =' (ID: 314)
  Prédit: '='
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '=' → logprob: -0.25193870067596436
    2. ' =' → logprob: -1.5019387006759644
    3. ',' → logprob: -11.876938819885254
    4. '=input' → logprob: -13.251938819885254
    5. '=int' → logprob: -15.001938819885254
    6. ')' → logprob: -15.126938819885254
    7. ' ' → logprob: -16.876937866210938
    8. '<|end|>' → logprob: -17.001937866210938
    9. '=

' → logprob: -17.001937866210938
    10. '=
' → logprob: -17.376937866210938

Token 171: ' map' (ID: 4014)
  Prédit: 'map'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'map' → logprob: -0.7585882544517517
    2. '10' → logprob: -1.0085883140563965
    3. ' map' → logprob: -2.2585883140563965
    4. ' ' → logprob: -3.5085883140563965
    5. '5' → logprob: -4.5085883140563965
    6. '20' → logprob: -4.7585883140563965
    7. '100' → logprob: -5.0085883140563965
    8. '50' → logprob: -6.5085883140563965
    9. '15' → logprob: -6.6335883140563965
    10. '25' → logprob: -7.1335883140563965

Token 172: '(int' (ID: 2742)
  Prédit: '(int'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(int' → logprob: -0.0005974736995995045
    2. 'int' → logprob: -7.6255974769592285
    3. '(' → logprob: -9.62559700012207
    4. '(input' → logprob: -10.12559700012207
    5. 'input' → logprob: -13.25059700012207
    6. '<int' → logprob: -14.00059700012207
    7. '[int' → logprob: -14.87559700012207
    8. '(str' → logprob: -15.75059700012207
    9. '=int' → logprob: -16.25059700012207
    10. '(
' → logprob: -16.62559700012207

Token 173: ',' (ID: 11)
  Prédit: 'input'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'input' → logprob: -0.3889831006526947
    2. '(input' → logprob: -1.138983130455017
    3. ',input' → logprob: -7.013983249664307
    4. ')' → logprob: -7.638983249664307
    5. ' input' → logprob: -8.013982772827148
    6. '(' → logprob: -8.013982772827148
    7. ',' → logprob: -10.263982772827148
    8. '=input' → logprob: -11.263982772827148
    9. '```' → logprob: -11.638982772827148
    10. '   ' → logprob: -12.388982772827148

Token 174: ' input' (ID: 3422)
  Prédit: 'input'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'input' → logprob: -0.004078401252627373
    2. ' input' → logprob: -5.504078388214111
    3. '=input' → logprob: -18.629077911376953
    4. '(input' → logprob: -19.379077911376953
    5. ')' → logprob: -19.879077911376953
    6. ',input' → logprob: -19.879077911376953
    7. ' ' → logprob: -20.379077911376953
    8. '<input' → logprob: -20.504077911376953
    9. '   ' → logprob: -20.629077911376953
    10. '	input' → logprob: -21.004077911376953

Token 175: '().' (ID: 1454)
  Prédit: '().'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '().' → logprob: -0.0011785586830228567
    2. '()' → logprob: -6.751178741455078
    3. ' ().' → logprob: -13.001178741455078
    4. '("' → logprob: -13.251178741455078
    5. '(' → logprob: -13.501178741455078
    6. '("").' → logprob: -13.751178741455078
    7. '())' → logprob: -14.376178741455078
    8. '('' → logprob: -15.126178741455078
    9. '()`' → logprob: -15.876178741455078
    10. ' ()' → logprob: -16.126178741455078

Token 176: 'split' (ID: 13627)
  Prédit: 'split'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'split' → logprob: -0.0019291093340143561
    2. 'strip' → logprob: -6.25192928314209
    3. ' split' → logprob: -15.37692928314209
    4. 'rstrip' → logprob: -15.37692928314209
    5. '(split' → logprob: -17.376928329467773
    6. ')' → logprob: -18.876928329467773
    7. 'read' → logprob: -18.876928329467773
    8. 's' → logprob: -19.376928329467773
    9. 'spl' → logprob: -19.626928329467773
    10. '```' → logprob: -19.626928329467773

Token 177: '())
' (ID: 4574)
  Prédit: '())'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '())' → logprob: -0.004506662487983704
    2. '()))' → logprob: -6.004506587982178
    3. '()' → logprob: -6.504506587982178
    4. ')' → logprob: -7.629506587982178
    5. '))' → logprob: -10.254507064819336
    6. '())
' → logprob: -12.379507064819336
    7. '(' → logprob: -12.629507064819336
    8. '('' → logprob: -13.504507064819336
    9. ' ())' → logprob: -14.254507064819336
    10. '().' → logprob: -14.879507064819336

Token 178: '   ' (ID: 271)
  Prédit: 'print'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'print' → logprob: -0.002891894429922104
    2. '   ' → logprob: -5.877892017364502
    3. ' print' → logprob: -9.627891540527344
    4. '	print' → logprob: -11.877891540527344
    5. '```' → logprob: -12.627891540527344
    6. '    
' → logprob: -12.877891540527344
    7. '<|end|>' → logprob: -12.877891540527344
    8. ')' → logprob: -13.002891540527344
    9. '
' → logprob: -13.377891540527344
    10. '(print' → logprob: -14.877891540527344

Token 179: ' print' (ID: 2123)
  Prédit: 'print'
  Correct (stricte): False
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'print' (adapté à ' print') → logprob: -1.9504606825648807e-05
    2. 'result' → logprob: -11.125019073486328
    3. ' print' → logprob: -12.875019073486328
    4. 'score' → logprob: -13.125019073486328
    5. '   ' → logprob: -17.250019073486328
    6. 'pr' → logprob: -18.500019073486328
    7. '    
' → logprob: -18.875019073486328
    8. '<|end|>' → logprob: -19.375019073486328
    9. '```' → logprob: -20.125019073486328
    10. 'prin' → logprob: -20.375019073486328

Token 180: '(c' (ID: 2410)
  Prédit: '(c'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(c' → logprob: -0.0007232757634483278
    2. '(' → logprob: -7.250723361968994
    3. '(round' → logprob: -11.875722885131836
    4. '(calc' → logprob: -12.750722885131836
    5. '(f' → logprob: -13.125722885131836
    6. '(cal' → logprob: -14.000722885131836
    7. '(
' → logprob: -15.125722885131836
    8. '()' → logprob: -16.125722885131836
    9. '(generate' → logprob: -16.875722885131836
    10. 'calculate' → logprob: -17.125722885131836

Token 181: 'alculate' (ID: 80190)
  Prédit: 'alculate'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'alculate' → logprob: -2.1888679839321412e-05
    2. 'alc' → logprob: -11.125021934509277
    3. 'al' → logprob: -12.125021934509277
    4. 'calculate' → logprob: -14.125021934509277
    5. '_' → logprob: -15.000021934509277
    6. 'aculate' → logprob: -15.375021934509277
    7. ')' → logprob: -16.37502098083496
    8. 'ulate' → logprob: -16.50002098083496
    9. 'alu' → logprob: -16.75002098083496
    10. '_al' → logprob: -17.00002098083496

Token 182: '_score' (ID: 22555)
  Prédit: '_score'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_score' → logprob: -6.704273118884885e-07
    2. '_scores' → logprob: -15.000000953674316
    3. '_' → logprob: -16.25
    4. '_s' → logprob: -16.375
    5. '_sc' → logprob: -16.5
    6. ' _' → logprob: -17.25
    7. 'score' → logprob: -18.125
    8. '_SCORE' → logprob: -18.25
    9. ')' → logprob: -18.5
    10. '_scale' → logprob: -19.25

Token 183: '(n' (ID: 2406)
  Prédit: '(n'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(n' → logprob: -0.0006086751818656921
    2. '(' → logprob: -7.625608444213867
    3. ' (' → logprob: -9.125608444213867
    4. ')' → logprob: -11.875608444213867
    5. '(
' → logprob: -12.750608444213867
    6. ')(' → logprob: -13.250608444213867
    7. '(k' → logprob: -16.750608444213867
    8. '(

' → logprob: -17.000608444213867
    9. ' ' → logprob: -17.250608444213867
    10. '((' → logprob: -17.500608444213867

Token 184: ',' (ID: 11)
  Prédit: ','
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ',' → logprob: -0.00018220659694634378
    2. ',k' → logprob: -9.125182151794434
    3. ' ,' → logprob: -9.625182151794434
    4. ',n' → logprob: -12.000182151794434
    5. ',
' → logprob: -14.250182151794434
    6. '   ' → logprob: -15.750182151794434
    7. ')' → logprob: -17.00018310546875
    8. ',m' → logprob: -17.62518310546875
    9. ',int' → logprob: -18.37518310546875
    10. ' ' → logprob: -18.50018310546875

Token 185: ' k' (ID: 372)
  Prédit: 'k'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'k' → logprob: -0.008614926598966122
    2. ' k' → logprob: -4.758615016937256
    3. '   ' → logprob: -15.508614540100098
    4. ' ' → logprob: -16.008615493774414
    5. '  ' → logprob: -17.383615493774414
    6. ')' → logprob: -17.758615493774414
    7. '
' → logprob: -18.758615493774414
    8. '	k' → logprob: -18.758615493774414
    9. '    ' → logprob: -18.883615493774414
    10. ' ' → logprob: -19.508615493774414

Token 186: '))' (ID: 915)
  Prédit: '))'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '))' → logprob: -0.029756275936961174
    2. ')' → logprob: -3.5297563076019287
    3. ')))' → logprob: -12.779756546020508
    4. '()))' → logprob: -13.654756546020508
    5. '))
' → logprob: -13.779756546020508
    6. '())' → logprob: -15.154756546020508
    7. ' ))' → logprob: -16.029756546020508
    8. '()' → logprob: -16.154756546020508
    9. '(' → logprob: -16.154756546020508
    10. ')
' → logprob: -17.404756546020508


RÉSUMÉ:
--------------------------------------------------------------------------------
Total des tokens analysés: 184
Tokens correctement prédits (1ère position, stricte): 66
Tokens correctement prédits (1ère position, avec adaptation): 68
Tokens correctement prédits (top 10): 161
Précision stricte (1ère position): 35.87%
Précision adaptée (1ère position): 36.96%
Précision (top 10): 87.50%
================================================================================
