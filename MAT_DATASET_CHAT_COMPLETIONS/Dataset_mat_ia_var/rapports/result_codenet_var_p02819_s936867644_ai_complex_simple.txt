================================================================================
ANALYSE DE PRÉDICTION TOKEN PAR TOKEN (BATCH API)
Date: 2025-06-04 19:33:24
Modèle de tokenisation: gpt-4o-mini
================================================================================

SCRIPT ANALYSÉ:
--------------------------------------------------------------------------------
from functools import reduce
from itertools import count, islice, chain

def P(n):
    # Typage et bornes avec des expressions ésotériques
    if not isinstance(n,int): (_ for _ in ()).throw(TypeError)
    if n<1: (_ for _ in ()).throw(ValueError)
    if n==1: return -1
    if n%2==0 and n!=2: return 2
    # Déterminer le diviseur avec reduce et une comprehension
    f=lambda x: next(chain((d for d in islice(count(3,2),int(n**0.5//1)-1) if n%d==0),[0]))
    return f(n)
import math
# Lire l'entrée d'une façon un peu détournée
a = int(''.join([c for c in input() if c.isdigit() or (c=='-' and not c.isdigit())]))
# Chercher le prochain nombre premier avec une boucle subtile
for b in count(a):
    if P(b)==0:
        print(b)
        break
--------------------------------------------------------------------------------

RÉSULTATS D'ANALYSE TOKEN PAR TOKEN:
--------------------------------------------------------------------------------
Token 0: 'from' (ID: 2845)
  → Token d'amorce (pas de prédiction)

Token 1: ' functools' (ID: 142636)
  → Token d'amorce (pas de prédiction)

Token 2: ' import' (ID: 1588)
  → Token d'amorce (pas de prédiction)

Token 3: ' reduce' (ID: 10389)
  Prédit: 'wrap'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'wrap' → logprob: -0.3026095926761627
    2. 'partial' → logprob: -1.8026095628738403
    3. 'reduce' → logprob: -2.55260968208313
    4. 'l' → logprob: -4.677609443664551
    5. ' wraps' → logprob: -4.802609443664551
    6. 'cached' → logprob: -8.05260944366455
    7. 'cache' → logprob: -8.55260944366455
    8. 'cmp' → logprob: -9.05260944366455
    9. ' partial' → logprob: -9.42760944366455
    10. ' l' → logprob: -9.80260944366455

Token 4: '
' (ID: 198)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '(' → logprob: -0.020487118512392044
    2. '(lambda' → logprob: -4.645487308502197
    3. '.' → logprob: -5.270487308502197
    4. ',' → logprob: -5.895487308502197
    5. '\' → logprob: -7.145487308502197
    6. ' (' → logprob: -7.520487308502197
    7. '```' → logprob: -8.020486831665039
    8. 'def' → logprob: -8.645486831665039
    9. '`' → logprob: -8.895486831665039
    10. 'lambda' → logprob: -8.895486831665039

Token 5: 'from' (ID: 2845)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '(' → logprob: -0.02829861268401146
    2. 'def' → logprob: -4.653298377990723
    3. ' ' → logprob: -4.778298377990723
    4. '\' → logprob: -5.153298377990723
    5. '(
' → logprob: -7.153298377990723
    6. ',' → logprob: -7.403298377990723
    7. '```' → logprob: -7.528298377990723
    8. ' (' → logprob: -8.153298377990723
    9. 'r' → logprob: -8.653298377990723
    10. 'd' → logprob: -8.778298377990723

Token 6: ' itertools' (ID: 103178)
  Prédit: ' math'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' math' → logprob: -1.05692720413208
    2. ' operator' → logprob: -1.18192720413208
    3. ' itertools' → logprob: -1.55692720413208
    4. ' collections' → logprob: -2.05692720413208
    5. ' os' → logprob: -5.68192720413208
    6. 'operator' → logprob: -6.18192720413208
    7. 'math' → logprob: -7.80692720413208
    8. ' ' → logprob: -7.93192720413208
    9. 'collections' → logprob: -8.306926727294922
    10. ' sys' → logprob: -8.431926727294922

Token 7: ' import' (ID: 1588)
  Prédit: ' import'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' import' → logprob: -0.019087785854935646
    2. 'import' → logprob: -4.019087791442871
    3. '.' → logprob: -7.394087791442871
    4. ' ' → logprob: -8.644087791442871
    5. ' .' → logprob: -9.519087791442871
    6. '.import' → logprob: -10.019087791442871
    7. '	import' → logprob: -11.269087791442871
    8. '_import' → logprob: -12.144087791442871
    9. '<|end|>' → logprob: -13.519087791442871
    10. '.groupby' → logprob: -13.769087791442871

Token 8: ' count' (ID: 3605)
  Prédit: ' group'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' group' → logprob: -0.7541866302490234
    2. 'group' → logprob: -2.5041866302490234
    3. 'acc' → logprob: -2.5041866302490234
    4. ' cycle' → logprob: -2.6291866302490234
    5. ' accumulate' → logprob: -2.6291866302490234
    6. 'count' → logprob: -2.8791866302490234
    7. 'import' → logprob: -3.3791866302490234
    8. ' chain' → logprob: -3.7541866302490234
    9. 'cycle' → logprob: -3.8791866302490234
    10. 'com' → logprob: -3.8791866302490234

Token 9: ',' (ID: 11)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(' → logprob: -0.0382971428334713
    2. '\' → logprob: -3.788297176361084
    3. '(
' → logprob: -5.288297176361084
    4. '\n' → logprob: -5.663297176361084
    5. ',' → logprob: -6.413297176361084
    6. '\(' → logprob: -6.538297176361084
    7. '.' → logprob: -7.038297176361084
    8. 'for' → logprob: -7.163297176361084
    9. '```' → logprob: -7.788297176361084
    10. 'def' → logprob: -7.913297176361084

Token 10: ' is' (ID: 382)
  Prédit: ' cycle'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' cycle' → logprob: -0.6424342393875122
    2. 'cycle' → logprob: -1.1424342393875122
    3. 'take' → logprob: -2.6424341201782227
    4. ' take' → logprob: -3.6424341201782227
    5. 'acc' → logprob: -4.017434120178223
    6. ' is' → logprob: -4.767434120178223
    7. ' accumulate' → logprob: -4.767434120178223
    8. 'chain' → logprob: -5.142434120178223
    9. ' chain' → logprob: -5.517434120178223
    10. ' drop' → logprob: -6.017434120178223

Token 11: 'lice' (ID: 7321)
  Prédit: 'lice'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'lice' → logprob: -2.2723104848410003e-05
    2. 'lic' → logprob: -11.000022888183594
    3. 'l' → logprob: -12.625022888183594
    4. 'liced' → logprob: -14.500022888183594
    5. 'li' → logprob: -15.000022888183594
    6. 'lices' → logprob: -15.000022888183594
    7. '```' → logprob: -15.250022888183594
    8. '
' → logprob: -15.625022888183594
    9. '_' → logprob: -15.875022888183594
    10. '

' → logprob: -16.250022888183594

Token 12: ',' (ID: 11)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(' → logprob: -0.0253952294588089
    2. '(
' → logprob: -3.775395154953003
    3. ',' → logprob: -7.150395393371582
    4. 'def' → logprob: -7.275395393371582
    5. '\' → logprob: -8.275395393371582
    6. '(

' → logprob: -9.400395393371582
    7. '\(' → logprob: -9.650395393371582
    8. '\n' → logprob: -10.150395393371582
    9. '.' → logprob: -10.525395393371582
    10. '```' → logprob: -10.775395393371582

Token 13: ' chain' (ID: 13464)
  Prédit: 'cycle'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'cycle' → logprob: -0.7599352598190308
    2. 'take' → logprob: -1.5099352598190308
    3. ' cycle' → logprob: -1.6349352598190308
    4. 'chain' → logprob: -3.6349353790283203
    5. ' take' → logprob: -3.7599353790283203
    6. 'acc' → logprob: -3.7599353790283203
    7. 'group' → logprob: -4.63493537902832
    8. 'filter' → logprob: -4.88493537902832
    9. ' chain' → logprob: -5.00993537902832
    10. ' accumulate' → logprob: -5.50993537902832

Token 14: '

' (ID: 279)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '(' → logprob: -0.3874748647212982
    2. '(
' → logprob: -1.7624748945236206
    3. 'def' → logprob: -2.762474775314331
    4. '\' → logprob: -3.637474775314331
    5. '\n' → logprob: -3.637474775314331
    6. ',' → logprob: -4.26247501373291
    7. '(

' → logprob: -5.01247501373291
    8. '```' → logprob: -5.76247501373291
    9. '
' → logprob: -6.51247501373291
    10. ',
' → logprob: -6.76247501373291

Token 15: 'def' (ID: 1314)
  Prédit: 'def'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'def' → logprob: -0.19854198396205902
    2. 'd' → logprob: -2.5735418796539307
    3. '(' → logprob: -2.6985418796539307
    4. '\' → logprob: -4.32354211807251
    5. '(
' → logprob: -5.07354211807251
    6. '#' → logprob: -5.69854211807251
    7. ',' → logprob: -5.82354211807251
    8. '```' → logprob: -6.19854211807251
    9. '.' → logprob: -6.32354211807251
    10. '`' → logprob: -6.44854211807251

Token 16: ' P' (ID: 398)
  Prédit: ' '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' ' → logprob: -0.27829882502555847
    2. ' fibonacci' → logprob: -2.403298854827881
    3. ' factorial' → logprob: -2.403298854827881
    4. ' f' → logprob: -4.653298854827881
    5. ' prime' → logprob: -4.653298854827881
    6. ' factor' → logprob: -4.653298854827881
    7. ' space' → logprob: -5.153298854827881
    8. ' generate' → logprob: -5.653298854827881
    9. ' fib' → logprob: -5.903298854827881
    10. ' cumulative' → logprob: -6.653298854827881

Token 17: '(n' (ID: 2406)
  Prédit: 'r'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'r' → logprob: -0.041221026331186295
    2. '(' → logprob: -4.6662211418151855
    3. 'i' → logprob: -4.7912211418151855
    4. 'er' → logprob: -5.0412211418151855
    5. '_r' → logprob: -5.9162211418151855
    6. '(r' → logprob: -6.0412211418151855
    7. '_' → logprob: -6.1662211418151855
    8. 'e' → logprob: -6.5412211418151855
    9. 'y' → logprob: -6.6662211418151855
    10. 'a' → logprob: -6.6662211418151855

Token 18: '):
' (ID: 1883)
  Prédit: '):'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '):' → logprob: -0.09177475422620773
    2. ')' → logprob: -2.4667747020721436
    3. ',' → logprob: -6.716774940490723
    4. '):
' → logprob: -7.091774940490723
    5. '=' → logprob: -7.716774940490723
    6. ')=' → logprob: -10.341774940490723
    7. ')n' → logprob: -10.341774940490723
    8. ' ):' → logprob: -10.466774940490723
    9. '+' → logprob: -10.591774940490723
    10. '(n' → logprob: -10.591774940490723

Token 19: '   ' (ID: 271)
  Prédit: ' return'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' return' → logprob: -0.6148884296417236
    2. ' ' → logprob: -1.3648884296417236
    3. '    ' → logprob: -2.7398884296417236
    4. '   ' → logprob: -2.8648884296417236
    5. ' :' → logprob: -3.3648884296417236
    6. ':' → logprob: -4.2398881912231445
    7. 'return' → logprob: -4.6148881912231445
    8. ' if' → logprob: -5.2398881912231445
    9. '0' → logprob: -5.6148881912231445
    10. '1' → logprob: -5.9898881912231445

Token 20: ' #' (ID: 1069)
  Prédit: ' return'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' return' → logprob: -1.1259185075759888
    2. '0' → logprob: -1.8759185075759888
    3. ' ' → logprob: -2.000918388366699
    4. '1' → logprob: -2.250918388366699
    5. ' reduce' → logprob: -2.625918388366699
    6. 'return' → logprob: -2.875918388366699
    7. ' n' → logprob: -3.000918388366699
    8. '   ' → logprob: -4.000918388366699
    9. 'reduce' → logprob: -4.000918388366699
    10. ' (' → logprob: -4.125918388366699

Token 21: ' Typ' (ID: 23862)
  Prédit: ' return'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' return' → logprob: -0.293075293302536
    2. ' if' → logprob: -1.9180753231048584
    3. ' ' → logprob: -3.2930753231048584
    4. 'return' → logprob: -3.4180753231048584
    5. '   ' → logprob: -4.918075084686279
    6. ' yield' → logprob: -5.043075084686279
    7. 'if' → logprob: -5.418075084686279
    8. ' for' → logprob: -6.043075084686279
    9. ' result' → logprob: -6.418075084686279
    10. ' n' → logprob: -6.543075084686279

Token 22: 'age' (ID: 477)
  Prédit: 'e'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'e' → logprob: -0.07274428755044937
    2. 'ing' → logprob: -3.072744369506836
    3. 'ed' → logprob: -4.822744369506836
    4. 'ical' → logprob: -4.947744369506836
    5. 'edef' → logprob: -5.947744369506836
    6. 'es' → logprob: -6.572744369506836
    7. 'ef' → logprob: -7.322744369506836
    8. ' e' → logprob: -7.447744369506836
    9. 'ic' → logprob: -7.447744369506836
    10. 'def' → logprob: -7.697744369506836

Token 23: ' et' (ID: 859)
  Prédit: ' :'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' :' → logprob: -0.158532053232193
    2. ':' → logprob: -2.03353214263916
    3. ' ' → logprob: -5.15853214263916
    4. '   ' → logprob: -5.90853214263916
    5. ' ->' → logprob: -6.15853214263916
    6. ')' → logprob: -6.53353214263916
    7. '(' → logprob: -6.78353214263916
    8. ' (' → logprob: -7.15853214263916
    9. ' :
' → logprob: -7.53353214263916
    10. ' ):' → logprob: -8.28353214263916

Token 24: ' born' (ID: 12275)
  Prédit: ' annotation'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' annotation' → logprob: -1.4738987684249878
    2. ' validation' → logprob: -1.7238987684249878
    3. ' documentation' → logprob: -2.4738988876342773
    4. ' annotations' → logprob: -2.5988988876342773
    5. ' retour' → logprob: -2.5988988876342773
    6. ' return' → logprob: -2.7238988876342773
    7. 'annotation' → logprob: -2.9738988876342773
    8. 'annotations' → logprob: -3.3488988876342773
    9. ' doc' → logprob: -3.7238988876342773
    10. 'return' → logprob: -3.9738988876342773

Token 25: 'es' (ID: 268)
  Prédit: 'e'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'e' → logprob: -0.5468261241912842
    2. 'es' → logprob: -0.9218261241912842
    3. 'age' → logprob: -3.796826124191284
    4. 'ed' → logprob: -7.421826362609863
    5. 'é' → logprob: -8.546826362609863
    6. 'ages' → logprob: -9.921826362609863
    7. 'ée' → logprob: -10.171826362609863
    8. 'ing' → logprob: -10.546826362609863
    9. 'er' → logprob: -10.921826362609863
    10. 'és' → logprob: -11.546826362609863

Token 26: ' avec' (ID: 3937)
  Prédit: ' :'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' :' → logprob: -0.34995532035827637
    2. ':' → logprob: -1.3499553203582764
    3. '   ' → logprob: -3.7249553203582764
    4. ' ' → logprob: -4.8499555587768555
    5. '  ' → logprob: -6.9749555587768555
    6. '    ' → logprob: -7.2249555587768555
    7. ' :
' → logprob: -7.3499555587768555
    8. '```' → logprob: -7.5999555587768555
    9. ' =' → logprob: -8.224955558776855
    10. ',' → logprob: -8.974955558776855

Token 27: ' des' (ID: 731)
  Prédit: ' assert'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' assert' → logprob: -0.7318767309188843
    2. 'assert' → logprob: -1.3568767309188843
    3. ' int' → logprob: -2.981876850128174
    4. ' n' → logprob: -3.606876850128174
    5. 'int' → logprob: -3.606876850128174
    6. ' assertion' → logprob: -4.231876850128174
    7. ' P' → logprob: -4.231876850128174
    8. ' des' → logprob: -4.356876850128174
    9. 'if' → logprob: -4.481876850128174
    10. ' un' → logprob: -4.606876850128174

Token 28: ' expressions' (ID: 43578)
  Prédit: 'assert'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'assert' → logprob: -0.023195041343569756
    2. '```' → logprob: -5.023195266723633
    3. ' assert' → logprob: -6.398195266723633
    4. 'n' → logprob: -6.773195266723633
    5. 'annotations' → logprob: -7.023195266723633
    6. '"""' → logprob: -7.023195266723633
    7. 'ent' → logprob: -7.148195266723633
    8. '`' → logprob: -7.148195266723633
    9. ' commentaires' → logprob: -7.398195266723633
    10. 'flo' → logprob: -7.398195266723633

Token 29: ' és' (ID: 9483)
  Prédit: ' bool'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' bool' → logprob: -1.058504581451416
    2. 'bool' → logprob: -2.558504581451416
    3. ' log' → logprob: -2.683504581451416
    4. ' return' → logprob: -2.808504581451416
    5. ' lambda' → logprob: -3.058504581451416
    6. 'log' → logprob: -3.058504581451416
    7. 'return' → logprob: -3.183504581451416
    8. ' bo' → logprob: -3.308504581451416
    9. ' de' → logprob: -3.433504581451416
    10. ' réguli' → logprob: -3.558504581451416

Token 30: 'ot' (ID: 346)
  Prédit: 'ot'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'ot' → logprob: -0.5798093676567078
    2. 'p' → logprob: -1.7048094272613525
    3. 'per' → logprob: -1.7048094272613525
    4. 'cap' → logprob: -3.9548094272613525
    5. 'cal' → logprob: -4.579809188842773
    6. 't' → logprob: -4.829809188842773
    7. 's' → logprob: -5.204809188842773
    8. 'pi' → logprob: -5.204809188842773
    9. 'oter' → logprob: -5.579809188842773
    10. 'par' → logprob: -5.829809188842773

Token 31: 'ériques' (ID: 102562)
  Prédit: 'otiques'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'otiques' → logprob: -0.6682246327400208
    2. 'ot' → logprob: -1.293224573135376
    3. '```' → logprob: -2.543224573135376
    4. 't' → logprob: -2.668224573135376
    5. 'tr' → logprob: -3.543224573135376
    6. 'o' → logprob: -4.043224811553955
    7. 'étiques' → logprob: -5.543224811553955
    8. '``' → logprob: -5.918224811553955
    9. 'qu' → logprob: -5.918224811553955
    10. 'q' → logprob: -6.168224811553955

Token 32: '
' (ID: 198)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.4949396848678589
    2. ':' → logprob: -1.1199396848678589
    3. ' :' → logprob: -3.2449398040771484
    4. ' ' → logprob: -4.994939804077148
    5. ',' → logprob: -5.244939804077148
    6. '(n' → logprob: -6.369939804077148
    7. '    ' → logprob: -6.494939804077148
    8. '  ' → logprob: -6.869939804077148
    9. ' return' → logprob: -6.869939804077148
    10. '):' → logprob: -7.369939804077148

Token 33: '   ' (ID: 271)
  Prédit: ':'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ':' → logprob: -0.28974056243896484
    2. '   ' → logprob: -1.9147405624389648
    3. ' :' → logprob: -2.914740562438965
    4. ' ' → logprob: -3.414740562438965
    5. ',' → logprob: -4.914740562438965
    6. ':
' → logprob: -6.789740562438965
    7. '  ' → logprob: -6.914740562438965
    8. '...' → logprob: -7.039740562438965
    9. '[' → logprob: -7.164740562438965
    10. ')' → logprob: -7.289740562438965

Token 34: ' if' (ID: 538)
  Prédit: ' return'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' return' → logprob: -0.9870783686637878
    2. '   ' → logprob: -1.1120784282684326
    3. ' ' → logprob: -2.1120784282684326
    4. 'return' → logprob: -2.8620784282684326
    5. '    ' → logprob: -3.1120784282684326
    6. ' if' → logprob: -4.1120781898498535
    7. '```' → logprob: -4.7370781898498535
    8. ' 
' → logprob: -4.8620781898498535
    9. ')' → logprob: -5.4870781898498535
    10. ' for' → logprob: -5.9870781898498535

Token 35: ' not' (ID: 625)
  Prédit: ' n'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' n' → logprob: -0.05927514657378197
    2. 'n' → logprob: -3.3092751502990723
    3. ' not' → logprob: -4.309275150299072
    4. ' isinstance' → logprob: -5.059275150299072
    5. ' ' → logprob: -7.434275150299072
    6. 'not' → logprob: -7.934275150299072
    7. ' ' → logprob: -9.309274673461914
    8. ' (' → logprob: -9.309274673461914
    9. ' type' → logprob: -10.309274673461914
    10. '0' → logprob: -11.059274673461914

Token 36: ' isinstance' (ID: 25889)
  Prédit: ' isinstance'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' isinstance' → logprob: -0.23204192519187927
    2. ' (' → logprob: -1.7320419549942017
    3. '(' → logprob: -3.857041835784912
    4. '(is' → logprob: -6.232041835784912
    5. 'is' → logprob: -6.482041835784912
    6. ' n' → logprob: -6.607041835784912
    7. ' ' → logprob: -6.732041835784912
    8. '0' → logprob: -6.857041835784912
    9. '(n' → logprob: -7.107041835784912
    10. ' all' → logprob: -7.732041835784912

Token 37: '(n' (ID: 2406)
  Prédit: '(n'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(n' → logprob: -0.000595447258092463
    2. '(' → logprob: -7.500595569610596
    3. ' n' → logprob: -10.250595092773438
    4. ' (' → logprob: -12.625595092773438
    5. '<|end|>' → logprob: -13.250595092773438
    6. '(
' → logprob: -13.875595092773438
    7. 'n' → logprob: -14.125595092773438
    8. '<|end|>' → logprob: -16.000595092773438
    9. ')n' → logprob: -16.250595092773438
    10. '	n' → logprob: -17.250595092773438

Token 38: ',int' (ID: 20909)
  Prédit: ','
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ',' → logprob: -0.003571445820853114
    2. ' ,' → logprob: -5.878571510314941
    3. '(' → logprob: -7.878571510314941
    4. ',int' → logprob: -8.128571510314941
    5. '(int' → logprob: -9.503571510314941
    6. '(n' → logprob: -12.128571510314941
    7. 'int' → logprob: -12.628571510314941
    8. ',n' → logprob: -12.628571510314941
    9. ' (' → logprob: -13.378571510314941
    10. ' ' → logprob: -13.628571510314941

Token 39: '):' (ID: 3127)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')' → logprob: -0.0008946668240241706
    2. ' )' → logprob: -7.125894546508789
    3. '):' → logprob: -9.375894546508789
    4. ' or' → logprob: -13.375894546508789
    5. 'or' → logprob: -13.625894546508789
    6. ' ):' → logprob: -14.125894546508789
    7. '):
' → logprob: -14.250894546508789
    8. ' ' → logprob: -14.875894546508789
    9. '),' → logprob: -15.000894546508789
    10. ')
' → logprob: -16.12589454650879

Token 40: ' (_' (ID: 11350)
  Prédit: ' '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' ' → logprob: -0.7524175643920898
    2. '    ' → logprob: -1.5024175643920898
    3. ' 
' → logprob: -1.8774175643920898
    4. '       ' → logprob: -2.37741756439209
    5. '   ' → logprob: -4.12741756439209
    6. ' ' → logprob: -4.12741756439209
    7. '     
' → logprob: -5.50241756439209
    8. ' return' → logprob: -5.87741756439209
    9. ' raise' → logprob: -6.00241756439209
    10. ':' → logprob: -6.62741756439209

Token 41: ' for' (ID: 395)
  Prédit: 'raise'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'raise' → logprob: -1.364503026008606
    2. ')' → logprob: -1.489503026008606
    3. 'n' → logprob: -2.2395029067993164
    4. 'for' → logprob: -2.2395029067993164
    5. ' for' → logprob: -2.8645029067993164
    6. 'is' → logprob: -3.1145029067993164
    7. 'P' → logprob: -3.6145029067993164
    8. 'assert' → logprob: -3.7395029067993164
    9. ':=' → logprob: -3.8645029067993164
    10. ';' → logprob: -4.489502906799316

Token 42: ' _' (ID: 1175)
  Prédit: '_'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_' → logprob: -0.014550687745213509
    2. ' _' → logprob: -4.264550685882568
    3. '()' → logprob: -8.514551162719727
    4. '_x' → logprob: -10.139551162719727
    5. ' ()' → logprob: -10.139551162719727
    6. ' in' → logprob: -11.139551162719727
    7. 'x' → logprob: -11.514551162719727
    8. '_in' → logprob: -11.764551162719727
    9. '_n' → logprob: -11.764551162719727
    10. ' ' → logprob: -12.014551162719727

Token 43: ' in' (ID: 306)
  Prédit: 'in'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'in' → logprob: -0.4791017472743988
    2. ' in' → logprob: -0.9791017770767212
    3. '_' → logprob: -6.354101657867432
    4. ' ' → logprob: -6.479101657867432
    5. ')' → logprob: -7.604101657867432
    6. ' _' → logprob: -7.729101657867432
    7. ' ()' → logprob: -8.22910213470459
    8. '  ' → logprob: -8.72910213470459
    9. '()' → logprob: -9.22910213470459
    10. '_in' → logprob: -9.35410213470459

Token 44: ' ()' (ID: 2869)
  Prédit: '()'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '()' → logprob: -0.9974390268325806
    2. ' ()' → logprob: -1.4974390268325806
    3. 'range' → logprob: -1.9974390268325806
    4. '[]' → logprob: -2.497438907623291
    5. '())' → logprob: -2.747438907623291
    6. '[' → logprob: -3.247438907623291
    7. '(' → logprob: -3.747438907623291
    8. ' range' → logprob: -4.122438907623291
    9. ' ())' → logprob: -4.122438907623291
    10. '[])' → logprob: -4.997438907623291

Token 45: ').' (ID: 741)
  Prédit: ').'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ').' → logprob: -0.02809824049472809
    2. ').__' → logprob: -3.9030983448028564
    3. ' ).' → logprob: -5.028098106384277
    4. ')' → logprob: -7.278098106384277
    5. ');' → logprob: -8.903098106384277
    6. '   ' → logprob: -10.028098106384277
    7. '    ' → logprob: -11.278098106384277
    8. ')._' → logprob: -11.403098106384277
    9. '),' → logprob: -11.528098106384277
    10. 'yield' → logprob: -11.653098106384277

Token 46: 'throw' (ID: 12818)
  Prédit: 'throw'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'throw' → logprob: -3.392824874026701e-05
    2. ' throw' → logprob: -10.62503433227539
    3. 'raise' → logprob: -12.87503433227539
    4. '.throw' → logprob: -13.37503433227539
    5. ' ' → logprob: -13.62503433227539
    6. 'throws' → logprob: -13.75003433227539
    7. 'Throw' → logprob: -14.50003433227539
    8. '_throw' → logprob: -14.62503433227539
    9. '   ' → logprob: -14.75003433227539
    10. '    ' → logprob: -14.87503433227539

Token 47: '(Type' (ID: 45249)
  Prédit: '(Type'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(Type' → logprob: -0.25801458954811096
    2. 'Type' → logprob: -1.5080145597457886
    3. ' Type' → logprob: -5.633014678955078
    4. '(' → logprob: -6.883014678955078
    5. 'Value' → logprob: -7.508014678955078
    6. '(Value' → logprob: -7.508014678955078
    7. '	Type' → logprob: -9.258014678955078
    8. '<Type' → logprob: -9.508014678955078
    9. ' ' → logprob: -10.133014678955078
    10. '```' → logprob: -10.258014678955078

Token 48: 'Error' (ID: 2255)
  Prédit: 'Error'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'Error' → logprob: -5.512236498361744e-07
    2. 'E' → logprob: -15.500000953674316
    3. 'Erro' → logprob: -15.625000953674316
    4. 'Er' → logprob: -16.0
    5. '	Error' → logprob: -18.0
    6. 'rror' → logprob: -18.125
    7. 'Err' → logprob: -18.125
    8. 'Erreur' → logprob: -18.75
    9. '   ' → logprob: -19.5
    10. ' Error' → logprob: -19.625

Token 49: ')
' (ID: 446)
  Prédit: '(''
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '('' → logprob: -0.28734785318374634
    2. '("' → logprob: -1.6623477935791016
    3. '(' → logprob: -2.9123477935791016
    4. '(f' → logprob: -5.412347793579102
    5. '("'' → logprob: -7.162347793579102
    6. '(
' → logprob: -8.912347793579102
    7. ' ' → logprob: -9.537347793579102
    8. ')' → logprob: -10.412347793579102
    9. '(""))' → logprob: -10.412347793579102
    10. '(n' → logprob: -10.787347793579102

Token 50: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.47314244508743286
    2. '(' → logprob: -1.098142385482788
    3. '()' → logprob: -4.473142623901367
    4. '('' → logprob: -4.848142623901367
    5. ' ' → logprob: -5.223142623901367
    6. '(n' → logprob: -5.348142623901367
    7. '(
' → logprob: -5.848142623901367
    8. '    ' → logprob: -5.973142623901367
    9. ':' → logprob: -6.098142623901367
    10. '       ' → logprob: -6.098142623901367

Token 51: ' if' (ID: 538)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.2719287574291229
    2. '(' → logprob: -2.0219287872314453
    3. ' if' → logprob: -3.1469287872314453
    4. '(n' → logprob: -3.1469287872314453
    5. '(
' → logprob: -5.896928787231445
    6. '()' → logprob: -6.021928787231445
    7. 'if' (adapté à ' if') → logprob: -6.271928787231445
    8. ' ' → logprob: -6.271928787231445
    9. '    ' → logprob: -6.396928787231445
    10. '
' → logprob: -6.521928787231445

Token 52: ' n' (ID: 297)
  Prédit: ' n'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' n' → logprob: -0.02841484360396862
    2. 'n' → logprob: -4.153414726257324
    3. ' not' → logprob: -4.528414726257324
    4. ' ' → logprob: -6.903414726257324
    5. 'not' → logprob: -8.903414726257324
    6. ' (' → logprob: -9.403414726257324
    7. '(n' → logprob: -9.403414726257324
    8. '0' → logprob: -9.653414726257324
    9. ' isinstance' → logprob: -10.090914726257324
    10. '(' → logprob: -11.028414726257324

Token 53: '<' (ID: 27)
  Prédit: ' <'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' <' → logprob: -0.3410002887248993
    2. '<' → logprob: -1.3410003185272217
    3. ' <=' → logprob: -3.9660003185272217
    4. '<=' → logprob: -4.966000080108643
    5. ' ' → logprob: -7.091000080108643
    6. ' >' → logprob: -8.7160005569458
    7. ' >=' → logprob: -9.3410005569458
    8. '>' → logprob: -9.4660005569458
    9. '<int' → logprob: -9.9660005569458
    10. '>=' → logprob: -10.0910005569458

Token 54: '1' (ID: 16)
  Prédit: '0'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '0' → logprob: -0.32267287373542786
    2. '1' → logprob: -1.4476728439331055
    3. '2' → logprob: -3.8226728439331055
    4. ' ' → logprob: -4.1976728439331055
    5. '3' → logprob: -6.1976728439331055
    6. '-' → logprob: -7.8226728439331055
    7. '=' → logprob: -7.8226728439331055
    8. '4' → logprob: -7.9476728439331055
    9. '5' → logprob: -8.760172843933105
    10. '6' → logprob: -9.822672843933105

Token 55: ':' (ID: 25)
  Prédit: ':'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ':' → logprob: -0.2125551551580429
    2. ' or' → logprob: -1.712555170059204
    3. ' :' → logprob: -4.587554931640625
    4. ':return' → logprob: -7.962554931640625
    5. 'or' → logprob: -8.212554931640625
    6. ' ' → logprob: -8.962554931640625
    7. ':
' → logprob: -9.712554931640625
    8. '   ' → logprob: -10.462554931640625
    9. '    ' → logprob: -11.212554931640625
    10. ' and' → logprob: -11.587554931640625

Token 56: ' (_' (ID: 11350)
  Prédit: ' (_'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' (_' → logprob: -0.10263530164957047
    2. '   ' → logprob: -2.727635383605957
    3. '    ' → logprob: -4.477635383605957
    4. '(_' → logprob: -4.477635383605957
    5. ' ' → logprob: -5.977635383605957
    6. ' return' → logprob: -6.227635383605957
    7. ' Value' → logprob: -6.852635383605957
    8. '  ' → logprob: -7.227635383605957
    9. '0' → logprob: -7.602635383605957
    10. 'Value' → logprob: -7.602635383605957

Token 57: ' for' (ID: 395)
  Prédit: ' for'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' for' → logprob: -0.001033999491482973
    2. 'for' → logprob: -6.876033782958984
    3. ' ' → logprob: -13.876033782958984
    4. '	for' → logprob: -16.001033782958984
    5. '<|end|>' → logprob: -17.001033782958984
    6. ' in' → logprob: -17.938533782958984
    7. ')' → logprob: -18.126033782958984
    8. ' für' → logprob: -18.126033782958984
    9. ' для' → logprob: -18.251033782958984
    10. '.' → logprob: -18.813533782958984

Token 58: ' _' (ID: 1175)
  Prédit: '_'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_' → logprob: -0.5231646299362183
    2. ' _' → logprob: -0.8981646299362183
    3. ' ()' → logprob: -11.023164749145508
    4. ' ' → logprob: -12.273164749145508
    5. ')' → logprob: -12.398164749145508
    6. ' in' → logprob: -12.398164749145508
    7. ' )' → logprob: -13.023164749145508
    8. '()' → logprob: -13.148164749145508
    9. ' _)' → logprob: -13.273164749145508
    10. '<|end|>' → logprob: -13.648164749145508

Token 59: ' in' (ID: 306)
  Prédit: '()'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '()' → logprob: -0.015040711499750614
    2. ' ()' → logprob: -4.265040874481201
    3. ' in' → logprob: -7.390040874481201
    4. '())' → logprob: -9.265040397644043
    5. ')' → logprob: -9.515040397644043
    6. '_' → logprob: -10.390040397644043
    7. '()>' → logprob: -11.640040397644043
    8. 'in' → logprob: -12.015040397644043
    9. '()

' → logprob: -12.140040397644043
    10. ' ' → logprob: -12.140040397644043

Token 60: ' ()' (ID: 2869)
  Prédit: '()'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '()' → logprob: -0.03553242236375809
    2. ' ()' → logprob: -3.4105324745178223
    3. '())' → logprob: -6.785532474517822
    4. 'range' → logprob: -8.035531997680664
    5. ' ())' → logprob: -8.285531997680664
    6. '()).' → logprob: -10.285531997680664
    7. '(' → logprob: -10.285531997680664
    8. ')' → logprob: -10.910531997680664
    9. '().' → logprob: -11.035531997680664
    10. ' ' → logprob: -11.160531997680664

Token 61: ').' (ID: 741)
  Prédit: ').'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ').' → logprob: -1.981667537620524e-06
    2. ')' → logprob: -13.500001907348633
    3. '.' → logprob: -15.625001907348633
    4. ' ).' → logprob: -15.750001907348633
    5. '   ' → logprob: -16.125001907348633
    6. ' ' → logprob: -17.000001907348633
    7. ')._' → logprob: -17.000001907348633
    8. '()).' → logprob: -17.625001907348633
    9. 'throw' → logprob: -17.875001907348633
    10. '       ' → logprob: -18.250001907348633

Token 62: 'throw' (ID: 12818)
  Prédit: 'throw'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'throw' → logprob: -1.9361264946837764e-07
    2. '.throw' → logprob: -16.25
    3. ' throw' → logprob: -18.0
    4. 'throws' → logprob: -19.75
    5. 'break' → logprob: -19.75
    6. '_throw' → logprob: -19.75
    7. ' ' → logprob: -20.0
    8. '	throw' → logprob: -20.875
    9. 'return' → logprob: -21.5
    10. 'Throw' → logprob: -21.75

Token 63: '(Value' (ID: 56232)
  Prédit: '(Value'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(Value' → logprob: -3.750436007976532e-05
    2. '(Index' → logprob: -10.50003719329834
    3. '(' → logprob: -11.62503719329834
    4. '<Value' → logprob: -14.62503719329834
    5. '(value' → logprob: -15.87503719329834
    6. '```' → logprob: -16.375038146972656
    7. 'Value' → logprob: -16.500038146972656
    8. '(Runtime' → logprob: -16.750038146972656
    9. '(Type' → logprob: -17.500038146972656
    10. '	Value' → logprob: -17.500038146972656

Token 64: 'Error' (ID: 2255)
  Prédit: 'Error'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'Error' → logprob: -7.896309739408025e-07
    2. 'rror' → logprob: -14.125000953674316
    3. 'error' → logprob: -18.25
    4. ' Error' → logprob: -18.5
    5. '```' → logprob: -18.625
    6. 'Er' → logprob: -18.75
    7. 'E' → logprob: -19.25
    8. '_error' → logprob: -19.875
    9. 'ERROR' → logprob: -19.875
    10. 'Erro' → logprob: -20.125

Token 65: ')
' (ID: 446)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')' → logprob: -0.026364512741565704
    2. ')
' → logprob: -3.77636456489563
    3. '('' → logprob: -6.901364326477051
    4. '("' → logprob: -7.026364326477051
    5. '(' → logprob: -8.02636432647705
    6. '())' → logprob: -8.40136432647705
    7. '()' → logprob: -8.52636432647705
    8. '   ' → logprob: -9.02636432647705
    9. ')\' → logprob: -9.77636432647705
    10. '(n' → logprob: -9.90136432647705

Token 66: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.13819853961467743
    2. '
' → logprob: -2.2631986141204834
    3. '    
' → logprob: -4.263198375701904
    4. ')' → logprob: -6.138198375701904
    5. ' 
' → logprob: -6.388198375701904
    6. ' return' → logprob: -6.513198375701904
    7. '  
' → logprob: -7.138198375701904
    8. '   
' → logprob: -7.388198375701904
    9. ':' → logprob: -7.513198375701904
    10. 'return' → logprob: -7.638198375701904

Token 67: ' if' (ID: 538)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.20352022349834442
    2. 'return' → logprob: -2.8285202980041504
    3. ' return' → logprob: -3.0785202980041504
    4. 'def' → logprob: -4.20352029800415
    5. ')' → logprob: -4.57852029800415
    6. ':' → logprob: -4.70352029800415
    7. 'result' → logprob: -5.07852029800415
    8. '    
' → logprob: -5.20352029800415
    9. 's' → logprob: -5.70352029800415
    10. ' for' → logprob: -5.82852029800415

Token 68: ' n' (ID: 297)
  Prédit: ' n'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' n' → logprob: -0.05363073572516441
    2. 'n' → logprob: -3.178630828857422
    3. ' not' → logprob: -5.178630828857422
    4. ' isinstance' → logprob: -5.803630828857422
    5. ' ' → logprob: -7.428630828857422
    6. 'not' → logprob: -8.741130828857422
    7. ' type' → logprob: -8.803630828857422
    8. ' any' → logprob: -9.178630828857422
    9. ' len' → logprob: -9.178630828857422
    10. ' hasattr' → logprob: -9.491130828857422

Token 69: '==' (ID: 560)
  Prédit: '>'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '>' → logprob: -0.2190837860107422
    2. '==' → logprob: -2.219083786010742
    3. ' >' → logprob: -3.219083786010742
    4. '<' → logprob: -3.719083786010742
    5. ' ==' → logprob: -4.344083786010742
    6. '%' → logprob: -5.469083786010742
    7. '<=' → logprob: -6.594083786010742
    8. ' <' → logprob: -6.844083786010742
    9. '>=' → logprob: -7.094083786010742
    10. ' in' → logprob: -7.719083786010742

Token 70: '1' (ID: 16)
  Prédit: '1'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '1' → logprob: -0.47525331377983093
    2. ' ' → logprob: -0.9752533435821533
    3. '0' → logprob: -7.100253105163574
    4. '2' → logprob: -8.350253105163574
    5. '3' → logprob: -10.537753105163574
    6. '  ' → logprob: -11.225253105163574
    7. '4' → logprob: -11.287753105163574
    8. '5' → logprob: -12.100253105163574
    9. '(' → logprob: -12.287753105163574
    10. '7' → logprob: -12.475253105163574

Token 71: ':' (ID: 25)
  Prédit: ':'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ':' → logprob: -0.004382893908768892
    2. ':return' → logprob: -6.129383087158203
    3. ' :' → logprob: -6.254383087158203
    4. ':
' → logprob: -8.254383087158203
    5. '):' → logprob: -12.504383087158203
    6. ')' → logprob: -12.754383087158203
    7. ' :
' → logprob: -13.129383087158203
    8. ':def' → logprob: -13.879383087158203
    9. ' return' → logprob: -14.629383087158203
    10. 'return' → logprob: -14.879383087158203

Token 72: ' return' (ID: 622)
  Prédit: '1'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '1' → logprob: -0.9124988913536072
    2. ' ' → logprob: -1.037498950958252
    3. '0' → logprob: -2.537498950958252
    4. ' return' → logprob: -2.662498950958252
    5. 'return' → logprob: -3.037498950958252
    6. '2' → logprob: -3.912498950958252
    7. '3' → logprob: -5.662498950958252
    8. '    ' → logprob: -5.662498950958252
    9. 'yield' → logprob: -5.787498950958252
    10. '6' → logprob: -5.787498950958252

Token 73: ' -' (ID: 533)
  Prédit: '1'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '1' → logprob: -0.4370217025279999
    2. '0' → logprob: -1.8120217323303223
    3. ' ' → logprob: -2.1870217323303223
    4. '[' → logprob: -3.5620217323303223
    5. '{' → logprob: -4.562021732330322
    6. '[]' → logprob: -4.687021732330322
    7. '2' → logprob: -5.062021732330322
    8. '()' → logprob: -5.562021732330322
    9. ' [' → logprob: -5.687021732330322
    10. '(' → logprob: -5.687021732330322

Token 74: '1' (ID: 16)
  Prédit: '1'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '1' → logprob: -0.020641040056943893
    2. '2' → logprob: -4.145640850067139
    3. '3' → logprob: -6.520640850067139
    4. '0' → logprob: -6.895640850067139
    5. '4' → logprob: -7.020640850067139
    6. '5' → logprob: -8.270641326904297
    7. 'n' → logprob: -8.520641326904297
    8. '8' → logprob: -8.958141326904297
    9. '6' → logprob: -9.270641326904297
    10. ' ' → logprob: -9.583141326904297

Token 75: '
' (ID: 198)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.15894845128059387
    2. '    
' → logprob: -2.9089484214782715
    3. '
' → logprob: -4.0339484214782715
    4. '   
' → logprob: -4.7839484214782715
    5. '  
' → logprob: -4.7839484214782715
    6. ',' → logprob: -5.0339484214782715
    7. ' 
' → logprob: -5.1589484214782715
    8. ')' → logprob: -5.2839484214782715
    9. '\n' → logprob: -5.2839484214782715
    10. ' ' → logprob: -5.4089484214782715

Token 76: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.2205042541027069
    2. '    
' → logprob: -2.8455042839050293
    3. 'def' → logprob: -3.9705042839050293
    4. 'n' → logprob: -4.345504283905029
    5. ' ' → logprob: -4.470504283905029
    6. ' 
' → logprob: -4.720504283905029
    7. '    ' → logprob: -4.845504283905029
    8. '   
' → logprob: -4.970504283905029
    9. 'if' → logprob: -5.220504283905029
    10. ' if' → logprob: -5.220504283905029

Token 77: ' if' (ID: 538)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.7997041344642639
    2. ' if' → logprob: -1.6747040748596191
    3. 'def' → logprob: -2.924704074859619
    4. ' n' → logprob: -3.049704074859619
    5. 'if' (adapté à ' if') → logprob: -3.299704074859619
    6. 'n' → logprob: -3.424704074859619
    7. ' for' → logprob: -3.424704074859619
    8. ' elif' → logprob: -4.049704074859619
    9. ' ' → logprob: -4.174704074859619
    10. ' return' → logprob: -4.674704074859619

Token 78: ' n' (ID: 297)
  Prédit: ' n'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' n' → logprob: -0.0105833038687706
    2. 'n' → logprob: -4.635583400726318
    3. ' isinstance' → logprob: -8.13558292388916
    4. ' ' → logprob: -8.38558292388916
    5. ' not' → logprob: -9.13558292388916
    6. '(n' → logprob: -9.88558292388916
    7. ' (' → logprob: -10.26058292388916
    8. '2' → logprob: -11.26058292388916
    9. ' all' → logprob: -11.76058292388916
    10. ' P' → logprob: -11.94808292388916

Token 79: '%' (ID: 4)
  Prédit: '=='
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '==' → logprob: -0.18131154775619507
    2. ' ==' → logprob: -2.43131160736084
    3. '%' → logprob: -2.80631160736084
    4. ' %' → logprob: -4.93131160736084
    5. '2' → logprob: -5.43131160736084
    6. '>' → logprob: -5.80631160736084
    7. ' ' → logprob: -6.68131160736084
    8. '<' → logprob: -7.55631160736084
    9. ' >' → logprob: -7.68131160736084
    10. ' <' → logprob: -9.05631160736084

Token 80: '2' (ID: 17)
  Prédit: '2'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '2' → logprob: -0.011042286641895771
    2. ' ' → logprob: -5.26104211807251
    3. '3' → logprob: -5.51104211807251
    4. '4' → logprob: -7.01104211807251
    5. '1' → logprob: -8.511042594909668
    6. '5' → logprob: -8.511042594909668
    7. '6' → logprob: -9.011042594909668
    8. '8' → logprob: -9.886042594909668
    9. '10' → logprob: -9.886042594909668
    10. '7' → logprob: -10.136042594909668

Token 81: '==' (ID: 560)
  Prédit: '=='
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '==' → logprob: -0.3739755153656006
    2. ' ==' → logprob: -1.2489755153656006
    3. '0' → logprob: -4.12397575378418
    4. ':' → logprob: -5.37397575378418
    5. ' ' → logprob: -6.12397575378418
    6. '1' → logprob: -6.99897575378418
    7. ' :' → logprob: -7.49897575378418
    8. ' !=' → logprob: -8.37397575378418
    9. '!=' → logprob: -8.37397575378418
    10. '=' → logprob: -9.24897575378418

Token 82: '0' (ID: 15)
  Prédit: '0'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '0' → logprob: -0.05237806588411331
    2. ' ' → logprob: -3.1773781776428223
    3. '1' → logprob: -4.677378177642822
    4. '2' → logprob: -10.552377700805664
    5. ':' → logprob: -13.802377700805664
    6. '```' → logprob: -14.927377700805664
    7. '  ' → logprob: -15.052377700805664
    8. '=' → logprob: -15.302377700805664
    9. '   ' → logprob: -15.427377700805664
    10. ')' → logprob: -15.489877700805664

Token 83: ' and' (ID: 326)
  Prédit: ':'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ':' → logprob: -0.05589093267917633
    2. ' :' → logprob: -2.9308910369873047
    3. ':return' → logprob: -7.055891036987305
    4. ':
' → logprob: -10.555891036987305
    5. ' ' → logprob: -10.555891036987305
    6. ' return' → logprob: -10.805891036987305
    7. ' and' → logprob: -10.805891036987305
    8. '   ' → logprob: -11.805891036987305
    9. ')' → logprob: -11.805891036987305
    10. '):' → logprob: -12.055891036987305

Token 84: ' n' (ID: 297)
  Prédit: ' n'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' n' → logprob: -0.19049213826656342
    2. 'n' → logprob: -2.1904921531677246
    3. ' all' → logprob: -3.8154921531677246
    4. ' P' → logprob: -4.190492153167725
    5. ' (' → logprob: -4.565492153167725
    6. 'P' → logprob: -6.065492153167725
    7. ' ' → logprob: -6.065492153167725
    8. '(n' → logprob: -6.565492153167725
    9. 'all' → logprob: -6.815492153167725
    10. '(' → logprob: -7.065492153167725

Token 85: '!=' (ID: 11408)
  Prédit: '=='
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '==' → logprob: -0.11345209926366806
    2. ' ==' → logprob: -2.738452196121216
    3. '>' → logprob: -4.363451957702637
    4. '!=' → logprob: -4.488451957702637
    5. '<' → logprob: -5.238451957702637
    6. ' !=' → logprob: -5.738451957702637
    7. '//' → logprob: -5.738451957702637
    8. ' >' → logprob: -6.738451957702637
    9. '>=' → logprob: -7.238451957702637
    10. '%' → logprob: -7.363451957702637

Token 86: '2' (ID: 17)
  Prédit: '2'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '2' → logprob: -0.16100074350833893
    2. ' ' → logprob: -1.9110007286071777
    3. '1' → logprob: -8.036001205444336
    4. '4' → logprob: -8.661001205444336
    5. '0' → logprob: -9.036001205444336
    6. '  ' → logprob: -10.411001205444336
    7. '10' → logprob: -11.348501205444336
    8. '8' → logprob: -11.473501205444336
    9. '   ' → logprob: -11.473501205444336
    10. '42' → logprob: -11.848501205444336

Token 87: ':' (ID: 25)
  Prédit: ':'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ':' → logprob: -0.010814349167048931
    2. ':return' → logprob: -4.760814189910889
    3. ' :' → logprob: -6.260814189910889
    4. ' and' → logprob: -9.135814666748047
    5. ':
' → logprob: -9.635814666748047
    6. '   ' → logprob: -10.510814666748047
    7. ' return' → logprob: -10.760814666748047
    8. 'return' → logprob: -11.010814666748047
    9. ' or' → logprob: -11.510814666748047
    10. ' ' → logprob: -11.635814666748047

Token 88: ' return' (ID: 622)
  Prédit: ' return'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' return' → logprob: -0.044983990490436554
    2. 'return' → logprob: -3.6699841022491455
    3. ' ' → logprob: -5.169983863830566
    4. '0' → logprob: -5.544983863830566
    5. '   ' → logprob: -5.544983863830566
    6. '    ' → logprob: -7.044983863830566
    7. ' n' → logprob: -7.169983863830566
    8. ' raise' → logprob: -7.419983863830566
    9. '       ' → logprob: -8.169983863830566
    10. ' (' → logprob: -8.357483863830566

Token 89: ' ' (ID: 220)
  Prédit: '0'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '0' → logprob: -0.4996792674064636
    2. ' ' → logprob: -1.6246793270111084
    3. '1' → logprob: -2.3746793270111084
    4. 'P' → logprob: -3.3746793270111084
    5. '-' → logprob: -3.9996793270111084
    6. ' P' → logprob: -4.124679088592529
    7. 'None' → logprob: -4.624679088592529
    8. 'n' → logprob: -5.249679088592529
    9. ' None' → logprob: -5.374679088592529
    10. '2' → logprob: -5.374679088592529

Token 90: '2' (ID: 17)
  Prédit: '0'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '0' → logprob: -0.5610342621803284
    2. '1' → logprob: -1.8110342025756836
    3. 'P' → logprob: -1.9360342025756836
    4. '-' → logprob: -2.8110342025756836
    5. '2' → logprob: -4.436034202575684
    6. 'n' → logprob: -4.436034202575684
    7. ' ' → logprob: -4.561034202575684
    8. '(n' → logprob: -5.686034202575684
    9. 'None' → logprob: -5.686034202575684
    10. ' P' → logprob: -5.811034202575684

Token 91: '
' (ID: 198)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.059060998260974884
    2. '    
' → logprob: -4.184061050415039
    3. ')' → logprob: -5.184061050415039
    4. ' ' → logprob: -5.434061050415039
    5. 'def' → logprob: -5.559061050415039
    6. ' if' → logprob: -5.559061050415039
    7. 'if' → logprob: -5.559061050415039
    8. '2' → logprob: -6.059061050415039
    9. 'return' → logprob: -6.434061050415039
    10. '
' → logprob: -6.559061050415039

Token 92: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.049762774258852005
    2. 'if' → logprob: -4.299762725830078
    3. 'return' → logprob: -4.299762725830078
    4. ')' → logprob: -4.924762725830078
    5. ' if' → logprob: -5.549762725830078
    6. ' return' → logprob: -6.049762725830078
    7. 'def' → logprob: -6.299762725830078
    8. ' ' → logprob: -6.549762725830078
    9. '  ' → logprob: -7.174762725830078
    10. 's' → logprob: -7.299762725830078

Token 93: ' #' (ID: 1069)
  Prédit: ' for'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' for' → logprob: -0.9805499911308289
    2. 'if' → logprob: -1.6055500507354736
    3. 'for' → logprob: -1.8555500507354736
    4. ' if' → logprob: -2.3555500507354736
    5. 'def' → logprob: -2.8555500507354736
    6. '   ' → logprob: -3.7305500507354736
    7. 'return' → logprob: -4.2305498123168945
    8. ')' → logprob: -4.7305498123168945
    9. ' return' → logprob: -4.8555498123168945
    10. 'n' → logprob: -4.8555498123168945

Token 94: ' Dé' (ID: 27247)
  Prédit: 'for'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'for' → logprob: -0.877360999584198
    2. ' for' → logprob: -1.8773610591888428
    3. 'def' → logprob: -2.5023610591888428
    4. 'return' → logprob: -2.8773610591888428
    5. 'i' → logprob: -3.0023610591888428
    6. 'p' → logprob: -3.1273610591888428
    7. 'if' → logprob: -3.6273610591888428
    8. ' return' → logprob: -4.002360820770264
    9. '   ' → logprob: -4.502360820770264
    10. 'r' → logprob: -4.627360820770264

Token 95: 'termin' (ID: 26821)
  Prédit: 'f'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'f' → logprob: -0.0328977070748806
    2. 'fin' → logprob: -3.782897710800171
    3. 'def' → logprob: -5.907897472381592
    4. 'r' → logprob: -6.782897472381592
    5. '   ' → logprob: -6.782897472381592
    6. 'termination' → logprob: -7.157897472381592
    7. 'fl' → logprob: -7.407897472381592
    8. 'duction' → logprob: -7.657897472381592
    9. 'veloppement' → logprob: -8.15789794921875
    10. 'termin' → logprob: -8.28289794921875

Token 96: 'er' (ID: 259)
  Prédit: 'er'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'er' → logprob: -0.05706386640667915
    2. 'e' → logprob: -3.6820638179779053
    3. 'ation' → logprob: -4.182064056396484
    4. 'ist' → logprob: -5.682064056396484
    5. 'ing' → logprob: -5.807064056396484
    6. 'ant' → logprob: -5.807064056396484
    7. 'iste' → logprob: -6.557064056396484
    8. 'istic' → logprob: -6.807064056396484
    9. 'é' → logprob: -7.682064056396484
    10. '```' → logprob: -7.807064056396484

Token 97: ' le' (ID: 505)
  Prédit: ' p'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' p' → logprob: -1.0408192873001099
    2. ' if' → logprob: -1.0408192873001099
    3. ' next' → logprob: -2.6658191680908203
    4. 'p' → logprob: -2.7908191680908203
    5. 'if' → logprob: -3.5408191680908203
    6. ' the' → logprob: -4.29081916809082
    7. ' prime' → logprob: -4.41581916809082
    8. ' def' → logprob: -4.66581916809082
    9. ' i' → logprob: -4.66581916809082
    10. ' max' → logprob: -4.91581916809082

Token 98: ' div' (ID: 4223)
  Prédit: ' next'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' next' → logprob: -1.8035435676574707
    2. ' smallest' → logprob: -1.9285435676574707
    3. 'plus' → logprob: -2.0535435676574707
    4. ' plus' → logprob: -2.1785435676574707
    5. 'next' → logprob: -2.1785435676574707
    6. ' prochain' → logprob: -3.0535435676574707
    7. 'p' → logprob: -3.4285435676574707
    8. 'div' → logprob: -3.5535435676574707
    9. 'if' → logprob: -3.8035435676574707
    10. 'i' → logprob: -4.178543567657471

Token 99: 'iseur' (ID: 108637)
  Prédit: 'iseur'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'iseur' → logprob: -0.01007726788520813
    2. 'ise' → logprob: -4.635077476501465
    3. '```' → logprob: -9.385077476501465
    4. 'isateur' → logprob: -9.635077476501465
    5. 'iser' → logprob: -10.260077476501465
    6. 'isseur' → logprob: -10.760077476501465
    7. 'isor' → logprob: -11.260077476501465
    8. 'enseur' → logprob: -11.385077476501465
    9. 'is' → logprob: -11.635077476501465
    10. '   ' → logprob: -11.885077476501465

Token 100: ' avec' (ID: 3937)
  Prédit: ' for'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' for' → logprob: -0.3045341968536377
    2. 'for' → logprob: -1.5545341968536377
    3. ' i' → logprob: -4.554533958435059
    4. 'd' → logprob: -4.929533958435059
    5. 'i' → logprob: -4.929533958435059
    6. ' minimal' → logprob: -5.554533958435059
    7. ' smallest' → logprob: -5.679533958435059
    8. 'def' → logprob: -5.804533958435059
    9. 'min' → logprob: -5.804533958435059
    10. '   ' → logprob: -5.804533958435059

Token 101: ' reduce' (ID: 10389)
  Prédit: 'next'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'next' → logprob: -0.383027583360672
    2. ' next' → logprob: -2.0080275535583496
    3. 'reduce' → logprob: -2.6330275535583496
    4. 'min' → logprob: -2.7580275535583496
    5. 'is' → logprob: -3.3830275535583496
    6. ' min' → logprob: -5.50802755355835
    7. 'def' → logprob: -5.63302755355835
    8. ' is' → logprob: -6.50802755355835
    9. ' reduce' → logprob: -6.50802755355835
    10. 'lambda' → logprob: -6.63302755355835

Token 102: ' et' (ID: 859)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '(' → logprob: -0.21629475057125092
    2. '(lambda' → logprob: -1.716294765472412
    3. '(
' → logprob: -5.466294765472412
    4. '(range' → logprob: -5.716294765472412
    5. 'lambda' → logprob: -5.841294765472412
    6. '(chain' → logprob: -7.216294765472412
    7. '   ' → logprob: -7.591294765472412
    8. 'range' → logprob: -7.841294765472412
    9. '(None' → logprob: -7.841294765472412
    10. 'def' → logprob: -8.216294288635254

Token 103: ' une' (ID: 2463)
  Prédit: 'is'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'is' → logprob: -0.5163102149963379
    2. ' is' → logprob: -1.516310214996338
    3. 'chain' → logprob: -2.391310214996338
    4. 'filter' → logprob: -3.266310214996338
    5. ' chain' → logprob: -3.516310214996338
    6. ' filter' → logprob: -4.766310214996338
    7. 'lambda' → logprob: -5.016310214996338
    8. ' lambda' → logprob: -5.766310214996338
    9. 'next' → logprob: -6.016310214996338
    10. ' next' → logprob: -6.141310214996338

Token 104: ' comprehension' (ID: 91423)
  Prédit: 'filter'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'filter' → logprob: -1.1974912881851196
    2. 'is' → logprob: -1.3224912881851196
    3. 'chain' → logprob: -1.5724912881851196
    4. 'lambda' → logprob: -2.69749116897583
    5. 'next' → logprob: -3.19749116897583
    6. 'min' → logprob: -3.82249116897583
    7. ' is' → logprob: -3.94749116897583
    8. ' chain' → logprob: -4.32249116897583
    9. '(lambda' → logprob: -4.32249116897583
    10. '(
' → logprob: -4.57249116897583

Token 105: '
' (ID: 198)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '(' → logprob: -0.23908202350139618
    2. '   ' → logprob: -3.114082098007202
    3. 'return' → logprob: -3.489082098007202
    4. ')' → logprob: -3.989082098007202
    5. '(
' → logprob: -3.989082098007202
    6. '(lambda' → logprob: -4.239081859588623
    7. ',' → logprob: -4.364081859588623
    8. '(range' → logprob: -4.489081859588623
    9. ' (' → logprob: -4.614081859588623
    10. '[' → logprob: -4.739081859588623

Token 106: '   ' (ID: 271)
  Prédit: 'return'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'return' → logprob: -0.26039594411849976
    2. '(min' → logprob: -2.8853960037231445
    3. '(' → logprob: -3.1353960037231445
    4. 'min' → logprob: -3.6353960037231445
    5. ' return' → logprob: -3.7603960037231445
    6. '   ' → logprob: -4.3853960037231445
    7. ')' → logprob: -4.5103960037231445
    8. '[' → logprob: -4.5103960037231445
    9. 'd' → logprob: -4.8853960037231445
    10. 'for' → logprob: -5.1353960037231445

Token 107: ' f' (ID: 285)
  Prédit: 'return'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'return' → logprob: -0.16855059564113617
    2. ' return' → logprob: -2.168550491333008
    3. 'min' → logprob: -4.168550491333008
    4. 'div' → logprob: -5.043550491333008
    5. 'd' → logprob: -6.043550491333008
    6. ' min' → logprob: -6.043550491333008
    7. 'reduce' → logprob: -6.293550491333008
    8. 'next' → logprob: -6.668550491333008
    9. '   ' → logprob: -6.793550491333008
    10. 'from' → logprob: -7.043550491333008

Token 108: '=lambda' (ID: 64865)
  Prédit: ' ='
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' =' → logprob: -0.252319872379303
    2. '=' → logprob: -2.502319812774658
    3. 'actors' → logprob: -2.877319812774658
    4. 'or' → logprob: -3.002319812774658
    5. 'actor' → logprob: -3.627319812774658
    6. 'act' → logprob: -6.877319812774658
    7. ' ' → logprob: -7.252319812774658
    8. 'orm' → logprob: -7.252319812774658
    9. '_' → logprob: -7.377319812774658
    10. 'ac' → logprob: -7.377319812774658

Token 109: ' x' (ID: 1215)
  Prédit: 'x'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'x' → logprob: -0.24728044867515564
    2. ' x' → logprob: -2.2472803592681885
    3. 'i' → logprob: -2.7472803592681885
    4. 'k' → logprob: -3.8722803592681885
    5. ' i' → logprob: -4.622280597686768
    6. 'n' → logprob: -5.247280597686768
    7. 'lambda' → logprob: -5.247280597686768
    8. 'a' → logprob: -6.247280597686768
    9. ' k' → logprob: -6.497280597686768
    10. ' lambda' → logprob: -6.497280597686768

Token 110: ':' (ID: 25)
  Prédit: ',y'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ',y' → logprob: -0.7679867744445801
    2. ',' → logprob: -0.8929867744445801
    3. ',x' → logprob: -2.76798677444458
    4. ':' → logprob: -4.01798677444458
    5. ',f' → logprob: -4.14298677444458
    6. ',n' → logprob: -4.26798677444458
    7. ':x' → logprob: -5.39298677444458
    8. ',i' → logprob: -6.14298677444458
    9. ',r' → logprob: -6.14298677444458
    10. ',a' → logprob: -6.51798677444458

Token 111: ' next' (ID: 2613)
  Prédit: 'x'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'x' → logprob: -0.15475665032863617
    2. ' x' → logprob: -2.654756546020508
    3. '(x' → logprob: -3.904756546020508
    4. 'min' → logprob: -4.779756546020508
    5. 'reduce' → logprob: -5.029756546020508
    6. 'next' → logprob: -5.154756546020508
    7. 'n' → logprob: -5.279756546020508
    8. 'None' → logprob: -5.529756546020508
    9. ' (' → logprob: -5.779756546020508
    10. '(n' → logprob: -6.029756546020508

Token 112: '(chain' (ID: 124348)
  Prédit: '(i'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '(i' → logprob: -0.6266525983810425
    2. '((' → logprob: -1.1266525983810425
    3. '(x' → logprob: -2.376652717590332
    4. '(k' → logprob: -3.626652717590332
    5. '(is' → logprob: -4.626652717590332
    6. '(y' → logprob: -5.501652717590332
    7. '(iter' → logprob: -6.126652717590332
    8. '(' → logprob: -6.251652717590332
    9. '(filter' → logprob: -6.251652717590332
    10. '(_' → logprob: -7.751652717590332

Token 113: '((' (ID: 2054)
  Prédit: '(('
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '((' → logprob: -0.5322904586791992
    2. '(is' → logprob: -0.9072904586791992
    3. '(filter' → logprob: -5.532290458679199
    4. '(' → logprob: -6.532290458679199
    5. '(x' → logprob: -6.532290458679199
    6. '(i' → logprob: -6.657290458679199
    7. '(((' → logprob: -8.4072904586792
    8. '(iter' → logprob: -8.4072904586792
    9. '(
' → logprob: -8.9072904586792
    10. '((_' → logprob: -9.0322904586792

Token 114: 'd' (ID: 67)
  Prédit: '(i'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '(i' → logprob: -0.11244993656873703
    2. 'i' → logprob: -3.612449884414673
    3. '(filter' → logprob: -4.237450122833252
    4. '(is' → logprob: -4.362450122833252
    5. '(x' → logprob: -4.612450122833252
    6. '(k' → logprob: -5.237450122833252
    7. '(s' → logprob: -5.362450122833252
    8. '(' → logprob: -5.362450122833252
    9. '(y' → logprob: -5.487450122833252
    10. 'is' → logprob: -5.737450122833252

Token 115: ' for' (ID: 395)
  Prédit: ' for'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' for' → logprob: -0.5397421717643738
    2. 'for' → logprob: -0.9147421717643738
    3. '(d' → logprob: -5.1647419929504395
    4. 'd' → logprob: -5.4147419929504395
    5. ' ' → logprob: -6.5397419929504395
    6. '(' → logprob: -6.7897419929504395
    7. '(range' → logprob: -7.4147419929504395
    8. '(f' → logprob: -7.5397419929504395
    9. '   ' → logprob: -8.289742469787598
    10. ' (' → logprob: -8.414742469787598

Token 116: ' d' (ID: 272)
  Prédit: 'd'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'd' → logprob: -1.084474802017212
    2. ' d' → logprob: -1.209474802017212
    3. ' range' → logprob: -2.084474802017212
    4. '(d' → logprob: -2.209474802017212
    5. ' in' → logprob: -3.084474802017212
    6. '(range' → logprob: -3.584474802017212
    7. 'range' → logprob: -3.584474802017212
    8. ' (' → logprob: -3.959474802017212
    9. '(' → logprob: -5.209474563598633
    10. 'in' → logprob: -7.459474563598633

Token 117: ' in' (ID: 306)
  Prédit: ' in'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' in' → logprob: -0.2040410041809082
    2. 'in' → logprob: -1.7040410041809082
    3. 'x' → logprob: -6.704041004180908
    4. ' ' → logprob: -7.954041004180908
    5. 'range' → logprob: -7.954041004180908
    6. 'd' → logprob: -8.20404052734375
    7. ' x' → logprob: -9.07904052734375
    8. ' d' → logprob: -9.45404052734375
    9. ' range' → logprob: -9.57904052734375
    10. ' xrange' → logprob: -10.95404052734375

Token 118: ' is' (ID: 382)
  Prédit: 'range'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'range' → logprob: -0.021723663434386253
    2. ' range' → logprob: -3.896723747253418
    3. '(range' → logprob: -7.521723747253418
    4. '[' → logprob: -8.646723747253418
    5. 'is' → logprob: -8.646723747253418
    6. 'count' → logprob: -8.771723747253418
    7. '	range' → logprob: -10.271723747253418
    8. '(' → logprob: -11.021723747253418
    9. ' ' → logprob: -11.146723747253418
    10. '   ' → logprob: -11.271723747253418

Token 119: 'lice' (ID: 7321)
  Prédit: 'lice'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'lice' → logprob: -1.3856492842023727e-06
    2. 'lace' → logprob: -14.625000953674316
    3. '```' → logprob: -15.375000953674316
    4. 'lic' → logprob: -16.250001907348633
    5. 'slice' → logprob: -16.625001907348633
    6. 'lices' → logprob: -16.750001907348633
    7. 'ince' → logprob: -17.125001907348633
    8. '(' → logprob: -17.125001907348633
    9. '``' → logprob: -17.250001907348633
    10. 'range' → logprob: -17.375001907348633

Token 120: '(count' (ID: 25892)
  Prédit: '(count'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(count' → logprob: -0.005229967646300793
    2. 'count' → logprob: -5.755229949951172
    3. '(lambda' → logprob: -6.880229949951172
    4. '(' → logprob: -7.005229949951172
    5. '(
' → logprob: -10.380229949951172
    6. '(range' → logprob: -11.880229949951172
    7. ' (' → logprob: -11.880229949951172
    8. '```' → logprob: -11.880229949951172
    9. '(filter' → logprob: -12.005229949951172
    10. ' count' → logprob: -12.005229949951172

Token 121: '(' (ID: 7)
  Prédit: '('
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(' → logprob: -5.145118848304264e-05
    2. ',' → logprob: -10.875051498413086
    3. '(n' → logprob: -11.250051498413086
    4. '((' → logprob: -12.125051498413086
    5. ' (' → logprob: -12.375051498413086
    6. '1' → logprob: -13.250051498413086
    7. '(-' → logprob: -13.750051498413086
    8. ' ' → logprob: -14.000051498413086
    9. '(x' → logprob: -14.000051498413086
    10. '(),' → logprob: -14.125051498413086

Token 122: '3' (ID: 18)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(' → logprob: -0.017677241936326027
    2. '2' → logprob: -4.642677307128906
    3. '1' → logprob: -5.142677307128906
    4. ',' → logprob: -7.392677307128906
    5. ' ' → logprob: -8.017677307128906
    6. '3' → logprob: -8.892677307128906
    7. '(n' → logprob: -8.892677307128906
    8. 'from' → logprob: -9.267677307128906
    9. ' (' → logprob: -9.642677307128906
    10. '   ' → logprob: -9.892677307128906

Token 123: ',' (ID: 11)
  Prédit: ','
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ',' → logprob: -0.12362946569919586
    2. '),' → logprob: -2.373629570007324
    3. ',n' → logprob: -4.373629570007324
    4. ' ,' → logprob: -5.498629570007324
    5. ',),' → logprob: -6.123629570007324
    6. '(),' → logprob: -6.748629570007324
    7. ',None' → logprob: -7.123629570007324
    8. ' ),' → logprob: -7.623629570007324
    9. '```' → logprob: -7.998629570007324
    10. '(n' → logprob: -8.373629570007324

Token 124: '2' (ID: 17)
  Prédit: '2'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '2' → logprob: -0.0001137947037932463
    2. ' ' → logprob: -9.125113487243652
    3. '```' → logprob: -13.750113487243652
    4. '),' → logprob: -14.000113487243652
    5. '   ' → logprob: -14.250113487243652
    6. ')' → logprob: -14.500113487243652
    7. 'def' → logprob: -15.125113487243652
    8. '4' → logprob: -15.500113487243652
    9. ',' → logprob: -15.625113487243652
    10. ')),' → logprob: -15.750113487243652

Token 125: '),' (ID: 936)
  Prédit: '),'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '),' → logprob: -0.00288772932253778
    2. ' ),' → logprob: -6.127887725830078
    3. ')' → logprob: -8.002887725830078
    4. '),(' → logprob: -9.252887725830078
    5. ',' → logprob: -9.752887725830078
    6. '1' → logprob: -10.252887725830078
    7. ')),' → logprob: -10.877887725830078
    8. ' ' → logprob: -11.002887725830078
    9. '   ' → logprob: -11.002887725830078
    10. ',),' → logprob: -11.002887725830078

Token 126: 'int' (ID: 491)
  Prédit: 'x'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'x' → logprob: -0.5562584400177002
    2. '(x' → logprob: -1.8062584400177002
    3. '(n' → logprob: -2.4312584400177
    4. ' (' → logprob: -2.8062584400177
    5. ' x' → logprob: -3.1812584400177
    6. '(' → logprob: -3.9312584400177
    7. '((' → logprob: -4.181258201599121
    8. '(lambda' → logprob: -4.306258201599121
    9. 'lambda' → logprob: -4.931258201599121
    10. '(len' → logprob: -5.931258201599121

Token 127: '(n' (ID: 2406)
  Prédit: '(('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '((' → logprob: -0.2067858874797821
    2. '(n' → logprob: -1.9567859172821045
    3. '(x' → logprob: -3.4567859172821045
    4. '(' → logprob: -4.956785678863525
    5. '(((' → logprob: -5.456785678863525
    6. '(pow' → logprob: -7.081785678863525
    7. '(s' → logprob: -8.206786155700684
    8. '(len' → logprob: -8.206786155700684
    9. '```' → logprob: -8.831786155700684
    10. '(int' → logprob: -8.956786155700684

Token 128: '**' (ID: 410)
  Prédit: '**'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '**' → logprob: -0.683999240398407
    2. '(' → logprob: -1.0589993000030518
    3. '(n' → logprob: -2.0589993000030518
    4. '(x' → logprob: -4.058999061584473
    5. '((' → logprob: -6.558999061584473
    6. '0' → logprob: -6.683999061584473
    7. '(s' → logprob: -8.933999061584473
    8. '(**' → logprob: -9.058999061584473
    9. ' (' → logprob: -9.183999061584473
    10. ')**' → logprob: -9.183999061584473

Token 129: '0' (ID: 15)
  Prédit: '0'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '0' → logprob: -0.016232486814260483
    2. '.' → logprob: -4.141232490539551
    3. '(' → logprob: -8.64123249053955
    4. '(.' → logprob: -11.26623249053955
    5. ' ' → logprob: -12.01623249053955
    6. '   ' → logprob: -14.51623249053955
    7. ' .' → logprob: -14.64123249053955
    8. '{' → logprob: -14.64123249053955
    9. '-' → logprob: -15.26623249053955
    10. '```' → logprob: -15.26623249053955

Token 130: '.' (ID: 13)
  Prédit: '.'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '.' → logprob: -7.111979357432574e-05
    2. '5' → logprob: -10.12507152557373
    3. '0' → logprob: -10.75007152557373
    4. '```' → logprob: -12.87507152557373
    5. '1' → logprob: -13.12507152557373
    6. ')' → logprob: -14.00007152557373
    7. '-' → logprob: -14.37507152557373
    8. '6' → logprob: -14.50007152557373
    9. '2' → logprob: -14.50007152557373
    10. '3' → logprob: -14.75007152557373

Token 131: '5' (ID: 20)
  Prédit: '5'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '5' → logprob: -8.304016228066757e-05
    2. '```' → logprob: -10.500082969665527
    3. '25' → logprob: -10.750082969665527
    4. '4' → logprob: -11.875082969665527
    5. '2' → logprob: -12.625082969665527
    6. '3' → logprob: -13.000082969665527
    7. '.' → logprob: -13.000082969665527
    8. '0' → logprob: -13.562582969665527
    9. '``' → logprob: -13.625082969665527
    10. '   ' → logprob: -13.625082969665527

Token 132: '//' (ID: 393)
  Prédit: ')+'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ')+' → logprob: -0.5993308424949646
    2. '0' → logprob: -1.7243309020996094
    3. '),' → logprob: -2.8493309020996094
    4. '(' → logprob: -2.9743309020996094
    5. '(n' → logprob: -3.0993309020996094
    6. ')' → logprob: -3.7243309020996094
    7. '))' → logprob: -3.9743309020996094
    8. '+' → logprob: -4.349330902099609
    9. ' ' → logprob: -4.599330902099609
    10. '))+' → logprob: -4.599330902099609

Token 133: '1' (ID: 16)
  Prédit: '1'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '1' → logprob: -0.680840253829956
    2. '2' → logprob: -1.305840253829956
    3. '0' → logprob: -1.555840253829956
    4. '.' → logprob: -4.805840492248535
    5. ' ' → logprob: -6.930840492248535
    6. 'd' → logprob: -7.055840492248535
    7. ')' → logprob: -7.430840492248535
    8. '3' → logprob: -7.680840492248535
    9. '(' → logprob: -8.430840492248535
    10. 'x' → logprob: -9.055840492248535

Token 134: ')-' (ID: 14080)
  Prédit: ')+'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ')+' → logprob: -0.30987676978111267
    2. '+' → logprob: -1.559876799583435
    3. '),' → logprob: -3.1848766803741455
    4. ')),' → logprob: -5.809876918792725
    5. '(n' → logprob: -6.184876918792725
    6. ')' → logprob: -6.309876918792725
    7. ' +' → logprob: -6.434876918792725
    8. '+n' → logprob: -6.559876918792725
    9. '0' → logprob: -6.934876918792725
    10. ' ' → logprob: -7.309876918792725

Token 135: '1' (ID: 16)
  Prédit: '1'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '1' → logprob: -0.431549072265625
    2. '0' → logprob: -1.056549072265625
    3. ' ' → logprob: -6.056549072265625
    4. '2' → logprob: -8.056549072265625
    5. '-' → logprob: -9.056549072265625
    6. '+' → logprob: -10.931549072265625
    7. '```' → logprob: -11.556549072265625
    8. '3' → logprob: -11.681549072265625
    9. '   ' → logprob: -12.056549072265625
    10. '  ' → logprob: -12.431549072265625

Token 136: ')' (ID: 8)
  Prédit: ')'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')' → logprob: -0.055735353380441666
    2. '),' → logprob: -3.1807353496551514
    3. '))' → logprob: -6.0557355880737305
    4. ',' → logprob: -6.0557355880737305
    5. ')))' → logprob: -6.1807355880737305
    6. ',n' → logprob: -6.5557355880737305
    7. ')),' → logprob: -6.9307355880737305
    8. 'if' → logprob: -7.5557355880737305
    9. ' if' → logprob: -7.8057355880737305
    10. ')+' → logprob: -7.9307355880737305

Token 137: ' if' (ID: 538)
  Prédit: ' if'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' if' → logprob: -0.058232832700014114
    2. 'if' → logprob: -2.9332327842712402
    3. ',' → logprob: -5.93323278427124
    4. '),' → logprob: -8.683233261108398
    5. ')' → logprob: -8.808233261108398
    6. ')))' → logprob: -9.433233261108398
    7. ' ,' → logprob: -9.558233261108398
    8. '))' → logprob: -9.558233261108398
    9. ')),' → logprob: -10.308233261108398
    10. ' ' → logprob: -10.683233261108398

Token 138: ' n' (ID: 297)
  Prédit: ' n'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' n' → logprob: -0.2586042284965515
    2. 'n' → logprob: -1.5086042881011963
    3. ' x' → logprob: -6.383604049682617
    4. 'd' → logprob: -6.383604049682617
    5. ' d' → logprob: -6.508604049682617
    6. '(n' → logprob: -7.133604049682617
    7. 'x' → logprob: -7.508604049682617
    8. ' ' → logprob: -9.383604049682617
    9. ' not' → logprob: -9.383604049682617
    10. ' (' → logprob: -9.571104049682617

Token 139: '%d' (ID: 34150)
  Prédit: '%d'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '%d' → logprob: -0.04888949170708656
    2. ' %' → logprob: -3.298889398574829
    3. '%' → logprob: -4.548889636993408
    4. '%x' → logprob: -9.29888916015625
    5. '%e' → logprob: -10.04888916015625
    6. '%
' → logprob: -10.54888916015625
    7. '%i' → logprob: -10.79888916015625
    8. '%D' → logprob: -11.29888916015625
    9. ' %
' → logprob: -12.42388916015625
    10. '%c' → logprob: -12.79888916015625

Token 140: '==' (ID: 560)
  Prédit: '=='
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '==' → logprob: -0.10093627125024796
    2. ' ==' → logprob: -2.3509361743927
    3. '0' → logprob: -8.725935935974121
    4. ')' → logprob: -8.850935935974121
    5. ' ' → logprob: -8.975935935974121
    6. ')==' → logprob: -8.975935935974121
    7. 'd' → logprob: -9.725935935974121
    8. '),' → logprob: -10.350935935974121
    9. '===' → logprob: -11.475935935974121
    10. ' d' → logprob: -11.725935935974121

Token 141: '0' (ID: 15)
  Prédit: '0'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '0' → logprob: -0.10094209760427475
    2. ' ' → logprob: -2.8509421348571777
    3. 'd' → logprob: -4.225942134857178
    4. 'x' → logprob: -4.225942134857178
    5. ' d' → logprob: -5.350942134857178
    6. ' x' → logprob: -5.475942134857178
    7. '   ' → logprob: -11.41344165802002
    8. '  ' → logprob: -11.78844165802002
    9. '    ' → logprob: -11.97594165802002
    10. 'None' → logprob: -12.53844165802002

Token 142: '),' (ID: 936)
  Prédit: '),'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '),' → logprob: -0.6691742539405823
    2. ',' → logprob: -2.1691741943359375
    3. ' else' → logprob: -2.1691741943359375
    4. ')),' → logprob: -2.1691741943359375
    5. '))' → logprob: -3.0441741943359375
    6. ',d' → logprob: -3.4191741943359375
    7. ')))' → logprob: -3.9191741943359375
    8. ' ),' → logprob: -4.2941741943359375
    9. ' ,' → logprob: -5.2941741943359375
    10. 'else' → logprob: -5.2941741943359375

Token 143: '[' (ID: 58)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(' → logprob: -0.910045862197876
    2. '(n' → logprob: -1.160045862197876
    3. '[' → logprob: -1.910045862197876
    4. '[n' → logprob: -2.910045862197876
    5. '(iter' → logprob: -3.660045862197876
    6. '(range' → logprob: -3.910045862197876
    7. '(d' → logprob: -4.660045623779297
    8. '[d' → logprob: -5.410045623779297
    9. '[]' → logprob: -5.535045623779297
    10. '()))' → logprob: -5.785045623779297

Token 144: '0' (ID: 15)
  Prédit: 'n'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'n' → logprob: -0.005608661565929651
    2. 'None' → logprob: -5.630608558654785
    3. ' n' → logprob: -7.255608558654785
    4. '1' → logprob: -7.880608558654785
    5. '-' → logprob: -8.380608558654785
    6. '2' → logprob: -8.880608558654785
    7. '(n' → logprob: -9.255608558654785
    8. '0' → logprob: -9.255608558654785
    9. '3' → logprob: -9.505608558654785
    10. '[n' → logprob: -9.880608558654785

Token 145: ']))
' (ID: 24801)
  Prédit: ']))'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ']))' → logprob: -0.032125603407621384
    2. '])))' → logprob: -3.78212571144104
    3. ']' → logprob: -5.782125473022461
    4. '])' → logprob: -6.032125473022461
    5. ']))
' → logprob: -6.907125473022461
    6. '))' → logprob: -8.032125473022461
    7. '],' → logprob: -8.032125473022461
    8. '(' → logprob: -8.157125473022461
    9. ')))' → logprob: -8.532125473022461
    10. ',' → logprob: -8.782125473022461

Token 146: '   ' (ID: 271)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')' → logprob: -0.8174400925636292
    2. '
' → logprob: -1.8174400329589844
    3. '   ' → logprob: -1.9424400329589844
    4. ' if' → logprob: -2.9424400329589844
    5. 'return' → logprob: -3.3174400329589844
    6. ',' → logprob: -3.6924400329589844
    7. '(' → logprob: -3.8174400329589844
    8. '(n' → logprob: -3.8174400329589844
    9. ' return' → logprob: -4.192440032958984
    10. ' ' → logprob: -4.192440032958984

Token 147: ' return' (ID: 622)
  Prédit: 'return'
  Correct (stricte): False
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'return' (adapté à ' return') → logprob: -1.4162625074386597
    2. '   ' → logprob: -1.5412625074386597
    3. ' if' → logprob: -2.416262626647949
    4. ' return' → logprob: -2.541262626647949
    5. '(n' → logprob: -2.666262626647949
    6. ')' → logprob: -2.791262626647949
    7. 'if' → logprob: -2.916262626647949
    8. '
' → logprob: -3.041262626647949
    9. ' ' → logprob: -3.291262626647949
    10. '(' → logprob: -3.541262626647949

Token 148: ' f' (ID: 285)
  Prédit: 'f'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'f' → logprob: -0.15526436269283295
    2. '-' → logprob: -2.030264377593994
    3. 'n' → logprob: -5.655264377593994
    4. ' f' → logprob: -5.905264377593994
    5. '1' → logprob: -6.030264377593994
    6. '(-' → logprob: -7.155264377593994
    7. '-f' → logprob: -7.280264377593994
    8. '2' → logprob: -7.780264377593994
    9. '(n' → logprob: -7.780264377593994
    10. '0' → logprob: -7.905264377593994

Token 149: '(n' (ID: 2406)
  Prédit: '(n'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(n' → logprob: -0.007770717144012451
    2. '(' → logprob: -4.882770538330078
    3. '()' → logprob: -9.757770538330078
    4. ')(' → logprob: -11.507770538330078
    5. '(f' → logprob: -11.507770538330078
    6. '()(' → logprob: -11.507770538330078
    7. '(P' → logprob: -11.632770538330078
    8. '((' → logprob: -11.757770538330078
    9. '(int' → logprob: -12.007770538330078
    10. '(
' → logprob: -12.007770538330078

Token 150: ')
' (ID: 446)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')' → logprob: -0.0003314129135105759
    2. ' )' → logprob: -8.37533187866211
    3. '))' → logprob: -10.00033187866211
    4. ')n' → logprob: -10.87533187866211
    5. ')*' → logprob: -11.75033187866211
    6. ')
' → logprob: -11.87533187866211
    7. ')+' → logprob: -12.62533187866211
    8. ')))' → logprob: -12.62533187866211
    9. ')#' → logprob: -13.00033187866211
    10. '*' → logprob: -13.00033187866211

Token 151: 'import' (ID: 561)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ')' → logprob: -0.1641407310962677
    2. '(' → logprob: -2.2891407012939453
    3. '<|end|>' → logprob: -3.1641407012939453
    4. ':' → logprob: -5.789140701293945
    5. ' ' → logprob: -6.289140701293945
    6. ',' → logprob: -7.289140701293945
    7. '(n' → logprob: -7.289140701293945
    8. '(
' → logprob: -8.539140701293945
    9. '#' → logprob: -8.914140701293945
    10. ' (' → logprob: -8.914140701293945

Token 152: ' math' (ID: 13324)
  Prédit: 'math'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'math' → logprob: -0.02575371228158474
    2. 'sys' → logprob: -4.400753498077393
    3. ' math' → logprob: -5.275753498077393
    4. 'operator' → logprob: -5.400753498077393
    5. 're' → logprob: -6.775753498077393
    6. 'fun' → logprob: -6.900753498077393
    7. 'random' → logprob: -7.650753498077393
    8. 'os' → logprob: -8.52575397491455
    9. 'collections' → logprob: -8.90075397491455
    10. 'numpy' → logprob: -9.15075397491455

Token 153: '
' (ID: 198)
  Prédit: 'def'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'def' → logprob: -0.06601153314113617
    2. '<|end|>' → logprob: -3.316011428833008
    3. ')' → logprob: -3.941011428833008
    4. '#' → logprob: -6.566011428833008
    5. '*' → logprob: -6.816011428833008
    6. ' def' → logprob: -7.066011428833008
    7. '
' → logprob: -7.066011428833008
    8. '(' → logprob: -7.691011428833008
    9. ' ' → logprob: -7.816011428833008
    10. '[' → logprob: -8.191011428833008

Token 154: '#' (ID: 2)
  Prédit: 'def'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'def' → logprob: -0.4497385621070862
    2. '<|end|>' → logprob: -1.1997385025024414
    3. ')' → logprob: -3.1997385025024414
    4. ' def' → logprob: -4.949738502502441
    5. ' ' → logprob: -5.824738502502441
    6. '
' → logprob: -5.824738502502441
    7. '<|end|>' → logprob: -6.574738502502441
    8. '*' → logprob: -6.949738502502441
    9. ',' → logprob: -7.324738502502441
    10. '(' → logprob: -7.574738502502441

Token 155: ' Lire' (ID: 57624)
  Prédit: 'def'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'def' → logprob: -0.047172386199235916
    2. 'print' → logprob: -4.047172546386719
    3. '#' → logprob: -5.172172546386719
    4. 'for' → logprob: -5.922172546386719
    5. 'math' → logprob: -5.922172546386719
    6. 'n' → logprob: -6.047172546386719
    7. '<|end|>' → logprob: -6.172172546386719
    8. 'P' → logprob: -6.172172546386719
    9. ' def' → logprob: -6.297172546386719
    10. ')' → logprob: -7.047172546386719

Token 156: ' l' (ID: 305)
  Prédit: 'def'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'def' → logprob: -1.4591429233551025
    2. '(' → logprob: -1.7091429233551025
    3. '()' → logprob: -1.7091429233551025
    4. 'n' → logprob: -1.9591429233551025
    5. 'import' → logprob: -3.0841429233551025
    6. '(n' → logprob: -3.2091429233551025
    7. '...' → logprob: -3.5841429233551025
    8. 'the' → logprob: -3.7091429233551025
    9. 'for' → logprob: -4.584142684936523
    10. 's' → logprob: -4.584142684936523

Token 157: ''entrée' (ID: 115820)
  Prédit: 'n'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'n' → logprob: -0.5112554430961609
    2. 'def' → logprob: -1.3862555027008057
    3. 'import' → logprob: -2.8862555027008057
    4. 'a' → logprob: -4.386255264282227
    5. ' n' → logprob: -4.761255264282227
    6. '```' → logprob: -5.011255264282227
    7. 'input' → logprob: -5.261255264282227
    8. ' ' → logprob: -5.511255264282227
    9. 's' → logprob: -5.511255264282227
    10. 'from' → logprob: -5.636255264282227

Token 158: ' d' (ID: 272)
  Prédit: 'n'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'n' → logprob: -0.003569065360352397
    2. 'x' → logprob: -6.62856912612915
    3. '(n' → logprob: -7.00356912612915
    4. 'value' → logprob: -8.003568649291992
    5. '
' → logprob: -8.128568649291992
    6. '()' → logprob: -8.878568649291992
    7. 'for' → logprob: -9.503568649291992
    8. 'import' → logprob: -9.628568649291992
    9. '(
' → logprob: -9.753568649291992
    10. '()
' → logprob: -9.878568649291992

Token 159: ''une' (ID: 13337)
  Prédit: 'e'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'e' → logprob: -0.38326501846313477
    2. 'n' → logprob: -2.0082650184631348
    3. ''utilisateur' → logprob: -3.6332650184631348
    4. 'a' → logprob: -3.7582650184631348
    5. ''un' → logprob: -4.008265018463135
    6. '```' → logprob: -4.133265018463135
    7. 'code' → logprob: -4.383265018463135
    8. ''entrée' → logprob: -4.383265018463135
    9. '`' → logprob: -4.633265018463135
    10. 'ef' → logprob: -5.008265018463135

Token 160: ' façon' (ID: 33381)
  Prédit: 'ligne'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'ligne' → logprob: -0.7886509299278259
    2. 'entrée' → logprob: -1.7886509895324707
    3. 'nombre' → logprob: -2.4136509895324707
    4. 'variable' → logprob: -2.7886509895324707
    5. 'fonction' → logprob: -2.9136509895324707
    6. ' ligne' → logprob: -3.4136509895324707
    7. 'number' → logprob: -4.038650989532471
    8. 'code' → logprob: -4.413650989532471
    9. 'import' → logprob: -4.538650989532471
    10. 'val' → logprob: -4.913650989532471

Token 161: ' un' (ID: 537)
  Prédit: 'n'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'n' → logprob: -0.2698376774787903
    2. 'for' → logprob: -3.3948376178741455
    3. 'python' → logprob: -4.144837856292725
    4. 'plus' → logprob: -4.144837856292725
    5. 'def' → logprob: -4.269837856292725
    6. 'interactive' → logprob: -4.269837856292725
    7. 'int' → logprob: -4.519837856292725
    8. 'import' → logprob: -4.644837856292725
    9. 'user' → logprob: -4.644837856292725
    10. 'input' → logprob: -4.769837856292725

Token 162: ' peu' (ID: 9235)
  Prédit: 'ique'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'ique' → logprob: -0.26315152645111084
    2. 'icode' → logprob: -2.0131516456604004
    3. 'iquement' → logprob: -4.3881516456604
    4. 'def' → logprob: -4.8881516456604
    5. 'python' → logprob: -4.8881516456604
    6. 'code' → logprob: -5.0131516456604
    7. 'input' → logprob: -5.2631516456604
    8. '```' → logprob: -5.5131516456604
    9. 'ligne' → logprob: -5.5131516456604
    10. 'line' → logprob: -6.0131516456604

Token 163: ' dét' (ID: 31931)
  Prédit: 'diff'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'diff' → logprob: -1.3136061429977417
    2. 'ob' → logprob: -1.4386061429977417
    3. 'py' → logprob: -1.6886061429977417
    4. 'python' → logprob: -2.3136062622070312
    5. 'fonction' → logprob: -2.5636062622070312
    6. 'per' → logprob: -4.188606262207031
    7. 'import' → logprob: -4.313606262207031
    8. 'Python' → logprob: -4.438606262207031
    9. 'original' → logprob: -4.813606262207031
    10. 'crypt' → logprob: -4.938606262207031

Token 164: 'ourn' (ID: 4727)
  Prédit: 'erm'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'erm' → logprob: -1.1294069290161133
    2. 'er' → logprob: -1.3794069290161133
    3. 'ermin' → logprob: -2.1294069290161133
    4. 'endue' → logprob: -2.5044069290161133
    5. 'ected' → logprob: -2.6294069290161133
    6. 'ail' → logprob: -3.1294069290161133
    7. 'err' → logprob: -4.129406929016113
    8. 'u' → logprob: -4.379406929016113
    9. 'ailed' → logprob: -4.379406929016113
    10. 'é' → logprob: -4.504406929016113

Token 165: 'ée' (ID: 2894)
  Prédit: 'n'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'n' → logprob: -0.07764645665884018
    2. '()' → logprob: -3.827646493911743
    3. '
' → logprob: -4.077646255493164
    4. '(n' → logprob: -4.702646255493164
    5. '(
' → logprob: -5.577646255493164
    6. 'def' → logprob: -5.702646255493164
    7. '(' → logprob: -5.702646255493164
    8. '()
' → logprob: -5.702646255493164
    9. 's' → logprob: -5.702646255493164
    10. 'value' → logprob: -6.702646255493164

Token 166: '
' (ID: 198)
  Prédit: 'n'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'n' → logprob: -0.2394270896911621
    2. '(' → logprob: -2.114427089691162
    3. '(
' → logprob: -3.864427089691162
    4. 'x' → logprob: -4.364427089691162
    5. 'for' → logprob: -4.489427089691162
    6. '(n' → logprob: -4.489427089691162
    7. '()' → logprob: -4.614427089691162
    8. 'v' → logprob: -4.989427089691162
    9. '```' → logprob: -5.739427089691162
    10. 'input' → logprob: -6.114427089691162

Token 167: 'a' (ID: 64)
  Prédit: 'n'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'n' → logprob: -0.17912521958351135
    2. 'exec' → logprob: -2.4291253089904785
    3. 'for' → logprob: -3.0541253089904785
    4. 'def' → logprob: -4.3041253089904785
    5. 'try' → logprob: -5.9291253089904785
    6. 'x' → logprob: -6.1791253089904785
    7. '_' → logprob: -6.5541253089904785
    8. 'import' → logprob: -6.8041253089904785
    9. 'v' → logprob: -6.9291253089904785
    10. 'data' → logprob: -7.1791253089904785

Token 168: ' =' (ID: 314)
  Prédit: '='
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '=' → logprob: -0.19844266772270203
    2. ' =' → logprob: -1.9484426975250244
    3. ',' → logprob: -3.8234426975250244
    4. ',b' → logprob: -4.698442459106445
    5. '=input' → logprob: -5.823442459106445
    6. '=int' → logprob: -6.948442459106445
    7. 's' → logprob: -7.573442459106445
    8. 'b' → logprob: -7.698442459106445
    9. 'r' → logprob: -7.823442459106445
    10. '=b' → logprob: -8.573442459106445

Token 169: ' int' (ID: 677)
  Prédit: 'int'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'int' → logprob: -0.12263481318950653
    2. ' int' → logprob: -3.4976348876953125
    3. 'next' → logprob: -3.4976348876953125
    4. 'math' → logprob: -3.4976348876953125
    5. 'list' → logprob: -4.8726348876953125
    6. '(int' → logprob: -5.7476348876953125
    7. 'reduce' → logprob: -5.8726348876953125
    8. '[int' → logprob: -6.2476348876953125
    9. ' next' → logprob: -6.3726348876953125
    10. 'sum' → logprob: -6.6226348876953125

Token 170: '('' (ID: 706)
  Prédit: '(input'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(input' → logprob: -0.00269145960919559
    2. '(' → logprob: -6.752691268920898
    3. '(next' → logprob: -7.627691268920898
    4. '('' → logprob: -8.252691268920898
    5. '(open' → logprob: -8.377691268920898
    6. '((' → logprob: -8.502691268920898
    7. '(__' → logprob: -8.877691268920898
    8. '(list' → logprob: -9.877691268920898
    9. '(math' → logprob: -10.127691268920898
    10. '(eval' → logprob: -10.377691268920898

Token 171: ''.' (ID: 6120)
  Prédit: 'input'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'input' → logprob: -0.3319183588027954
    2. ''.' → logprob: -1.3319183588027954
    3. '__' → logprob: -5.331918239593506
    4. '''.' → logprob: -5.456918239593506
    5. ''' → logprob: -5.831918239593506
    6. '(input' → logprob: -5.956918239593506
    7. '0' → logprob: -6.831918239593506
    8. '"' → logprob: -7.956918239593506
    9. ' input' → logprob: -8.081918716430664
    10. '".' → logprob: -8.581918716430664

Token 172: 'join' (ID: 10891)
  Prédit: '__'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '__' → logprob: -0.4376542866230011
    2. 'input' → logprob: -1.0626542568206787
    3. 'open' → logprob: -5.187654495239258
    4. 'join' → logprob: -6.187654495239258
    5. 'strip' → logprob: -7.687654495239258
    6. '_input' → logprob: -8.312654495239258
    7. 'stdin' → logprob: -8.937654495239258
    8. '___' → logprob: -9.937654495239258
    9. 'Input' → logprob: -9.937654495239258
    10. '(input' → logprob: -9.937654495239258

Token 173: '([' (ID: 5194)
  Prédit: '(filter'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '(filter' → logprob: -0.5328777432441711
    2. '(chain' → logprob: -2.4078776836395264
    3. '(is' → logprob: -2.5328776836395264
    4. '(chr' → logprob: -2.6578776836395264
    5. 'filter' → logprob: -2.9078776836395264
    6. '(i' → logprob: -3.4078776836395264
    7. 'chain' → logprob: -3.7828776836395264
    8. '(input' → logprob: -4.2828779220581055
    9. '(c' → logprob: -4.6578779220581055
    10. '(map' → logprob: -4.7828779220581055

Token 174: 'c' (ID: 66)
  Prédit: 'c'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'c' → logprob: -0.7616674304008484
    2. 'chr' → logprob: -1.0116674900054932
    3. 'input' → logprob: -2.636667490005493
    4. 'i' → logprob: -3.011667490005493
    5. 'next' → logprob: -4.261667251586914
    6. 'x' → logprob: -4.511667251586914
    7. 'filter' → logprob: -5.011667251586914
    8. '_' → logprob: -5.386667251586914
    9. '(chr' → logprob: -5.886667251586914
    10. ' input' → logprob: -6.386667251586914

Token 175: ' for' (ID: 395)
  Prédit: 'for'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'for' → logprob: -0.35229530930519104
    2. ' for' → logprob: -1.2272952795028687
    3. 'input' → logprob: -6.977295398712158
    4. '(chr' → logprob: -6.977295398712158
    5. 'chr' → logprob: -7.852295398712158
    6. '(i' → logprob: -8.102294921875
    7. ' ' → logprob: -8.227294921875
    8. '(input' → logprob: -8.477294921875
    9. '(' → logprob: -8.977294921875
    10. '   ' → logprob: -9.477294921875

Token 176: ' c' (ID: 274)
  Prédit: 'input'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'input' → logprob: -0.7080795764923096
    2. ' input' → logprob: -0.7080795764923096
    3. 'c' → logprob: -5.3330793380737305
    4. 'open' → logprob: -5.8330793380737305
    5. ' open' → logprob: -6.0830793380737305
    6. ' c' → logprob: -6.4580793380737305
    7. '__' → logprob: -6.7080793380737305
    8. ' __' → logprob: -8.08307933807373
    9. '_' → logprob: -8.20807933807373
    10. '(input' → logprob: -8.20807933807373

Token 177: ' in' (ID: 306)
  Prédit: 'input'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'input' → logprob: -0.5403683185577393
    2. ' in' → logprob: -1.1653683185577393
    3. ' input' → logprob: -2.4153683185577393
    4. 'in' → logprob: -4.16536808013916
    5. '=input' → logprob: -7.66536808013916
    6. 'import' → logprob: -9.16536808013916
    7. '(input' → logprob: -9.66536808013916
    8. ' ' → logprob: -10.54036808013916
    9. ',input' → logprob: -10.91536808013916
    10. '_' → logprob: -11.29036808013916

Token 178: ' input' (ID: 3422)
  Prédit: 'input'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'input' → logprob: -0.15333424508571625
    2. ' input' → logprob: -2.028334140777588
    3. 'open' → logprob: -5.153334140777588
    4. 'str' → logprob: -6.903334140777588
    5. '__' → logprob: -6.903334140777588
    6. ' open' → logprob: -7.028334140777588
    7. '(input' → logprob: -8.153334617614746
    8. 'list' → logprob: -8.153334617614746
    9. 'filter' → logprob: -8.653334617614746
    10. ' str' → logprob: -8.778334617614746

Token 179: '()' (ID: 416)
  Prédit: '()'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '()' → logprob: -0.003502191975712776
    2. '().' → logprob: -6.003502368927002
    3. '()]' → logprob: -7.003502368927002
    4. '())' → logprob: -10.253501892089844
    5. '()][' → logprob: -10.503501892089844
    6. '()[' → logprob: -11.128501892089844
    7. '(' → logprob: -11.753501892089844
    8. ' ()' → logprob: -12.128501892089844
    9. '()"' → logprob: -12.878501892089844
    10. '("")' → logprob: -13.003501892089844

Token 180: ' if' (ID: 538)
  Prédit: ' if'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' if' → logprob: -0.04730110242962837
    2. 'if' → logprob: -3.2973010540008545
    3. '.strip' → logprob: -4.797301292419434
    4. '().' → logprob: -7.797301292419434
    5. '()' → logprob: -8.047301292419434
    6. ']))' → logprob: -8.672301292419434
    7. '.split' → logprob: -10.922301292419434
    8. ' ' → logprob: -11.172301292419434
    9. '])' → logprob: -11.672301292419434
    10. '.rstrip' → logprob: -12.047301292419434

Token 181: ' c' (ID: 274)
  Prédit: 'c'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'c' → logprob: -0.17976662516593933
    2. ' c' → logprob: -1.8047666549682617
    3. ''' → logprob: -11.554766654968262
    4. ' ' → logprob: -11.679766654968262
    5. '	c' → logprob: -14.054766654968262
    6. '(c' → logprob: -14.304766654968262
    7. '   ' → logprob: -14.804766654968262
    8. ')c' → logprob: -14.804766654968262
    9. '  ' → logprob: -15.054766654968262
    10. ' '' → logprob: -15.179766654968262

Token 182: '.is' (ID: 3109)
  Prédit: '.is'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '.is' → logprob: -0.07530257105827332
    2. ' in' → logprob: -3.4503026008605957
    3. 'isdigit' → logprob: -3.8253026008605957
    4. '.' → logprob: -4.075302600860596
    5. '>' → logprob: -6.825302600860596
    6. 'in' → logprob: -7.825302600860596
    7. 'is' → logprob: -8.450302124023438
    8. ' .' → logprob: -8.950302124023438
    9. '>=' → logprob: -9.700302124023438
    10. '>.' → logprob: -10.450302124023438

Token 183: 'digit' (ID: 78327)
  Prédit: 'digit'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'digit' → logprob: -0.0009178895270451903
    2. 'decimal' → logprob: -7.000917911529541
    3. 'numeric' → logprob: -12.000917434692383
    4. ' digit' → logprob: -16.375917434692383
    5. '_digit' → logprob: -16.500917434692383
    6. 'al' → logprob: -16.875917434692383
    7. 'd' → logprob: -16.875917434692383
    8. 'digits' → logprob: -17.125917434692383
    9. 'digital' → logprob: -18.250917434692383
    10. 'dig' → logprob: -18.500917434692383

Token 184: '()' (ID: 416)
  Prédit: '()'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '()' → logprob: -0.021576320752501488
    2. '()]' → logprob: -3.896576404571533
    3. ']))' → logprob: -6.896576404571533
    4. '()))' → logprob: -11.646575927734375
    5. ']' → logprob: -13.146575927734375
    6. '(' → logprob: -13.146575927734375
    7. '"]))' → logprob: -13.396575927734375
    8. '']))' → logprob: -13.396575927734375
    9. '())))' → logprob: -13.646575927734375
    10. '()],' → logprob: -13.771575927734375

Token 185: ' or' (ID: 503)
  Prédit: ']))'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ']))' → logprob: -0.00023166877508629113
    2. ']))
' → logprob: -8.500231742858887
    3. ']' → logprob: -11.250231742858887
    4. '])' → logprob: -11.875231742858887
    5. ' ]' → logprob: -12.750231742858887
    6. '])))' → logprob: -12.875231742858887
    7. ']))

' → logprob: -13.500231742858887
    8. '']))' → logprob: -14.875231742858887
    9. ']))
' → logprob: -15.125231742858887
    10. '))' → logprob: -15.500231742858887

Token 186: ' (' (ID: 350)
  Prédit: ' c'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' c' → logprob: -0.4972776472568512
    2. 'c' → logprob: -0.9972776174545288
    3. '(c' → logprob: -4.122277736663818
    4. ' (' → logprob: -5.997277736663818
    5. ''' → logprob: -6.747277736663818
    6. ' ' → logprob: -7.122277736663818
    7. ''-' → logprob: -7.122277736663818
    8. '(' → logprob: -8.24727725982666
    9. '-' → logprob: -8.43477725982666
    10. '  ' → logprob: -8.55977725982666

Token 187: 'c' (ID: 66)
  Prédit: 'c'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'c' → logprob: -0.09059984982013702
    2. ' c' → logprob: -2.465599775314331
    3. ' ' → logprob: -7.59060001373291
    4. '(c' → logprob: -7.71560001373291
    5. '  ' → logprob: -8.84060001373291
    6. ' (' → logprob: -9.21560001373291
    7. '   ' → logprob: -9.34060001373291
    8. '-' → logprob: -9.46560001373291
    9. '
' → logprob: -9.59060001373291
    10. ')c' → logprob: -10.34060001373291

Token 188: '=='' (ID: 20651)
  Prédit: '=='
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '==' → logprob: -0.13993029296398163
    2. '=='' → logprob: -2.139930248260498
    3. ' in' → logprob: -4.639930248260498
    4. ' ==' → logprob: -6.639930248260498
    5. 'c' → logprob: -7.264930248260498
    6. '.' → logprob: -8.389930725097656
    7. 'in' → logprob: -8.389930725097656
    8. '==-' → logprob: -8.639930725097656
    9. ' c' → logprob: -9.264930725097656
    10. '=="' → logprob: -9.639930725097656

Token 189: '-'' (ID: 52594)
  Prédit: '-'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '-' → logprob: -0.013830372132360935
    2. '+' → logprob: -5.013830184936523
    3. '.' → logprob: -6.763830184936523
    4. ''-' → logprob: -6.763830184936523
    5. '_' → logprob: -6.888830184936523
    6. ''' → logprob: -7.263830184936523
    7. ',' → logprob: -7.513830184936523
    8. '-'' → logprob: -8.013830184936523
    9. 'x' → logprob: -8.388830184936523
    10. '+')' → logprob: -8.513830184936523

Token 190: ' and' (ID: 326)
  Prédit: ')]'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')]' → logprob: -0.3504379391670227
    2. ')])' → logprob: -1.350437879562378
    3. ')' → logprob: -3.600437879562378
    4. ' and' → logprob: -4.725438117980957
    5. ' )' → logprob: -8.975438117980957
    6. 'and' → logprob: -9.600438117980957
    7. ')],' → logprob: -9.975438117980957
    8. '])' → logprob: -10.725438117980957
    9. ')][' → logprob: -10.850438117980957
    10. 'if' → logprob: -12.100438117980957

Token 191: ' not' (ID: 625)
  Prédit: 'len'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'len' → logprob: -0.452413946390152
    2. ' len' → logprob: -1.7024139165878296
    3. 'c' → logprob: -2.827414035797119
    4. ' c' → logprob: -2.952414035797119
    5. ' not' → logprob: -3.452414035797119
    6. '_.' → logprob: -4.702414035797119
    7. 'not' → logprob: -4.952414035797119
    8. 'a' → logprob: -5.077414035797119
    9. ' input' → logprob: -5.327414035797119
    10. 'input' → logprob: -5.327414035797119

Token 192: ' c' (ID: 274)
  Prédit: 'a'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'a' → logprob: -1.1951756477355957
    2. '_.' → logprob: -1.5701756477355957
    3. '_' → logprob: -2.4451756477355957
    4. ' c' → logprob: -2.9451756477355957
    5. 'c' → logprob: -3.1951756477355957
    6. ' a' → logprob: -3.1951756477355957
    7. ' any' → logprob: -3.4451756477355957
    8. '_)' → logprob: -3.5701756477355957
    9. 'any' → logprob: -3.9451756477355957
    10. ' _' → logprob: -4.195175647735596

Token 193: '.is' (ID: 3109)
  Prédit: '['
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '[' → logprob: -1.765165090560913
    2. 'a' → logprob: -1.890165090560913
    3. '[-' → logprob: -2.015165090560913
    4. 'len' → logprob: -2.515165090560913
    5. '[len' → logprob: -2.515165090560913
    6. 'input' → logprob: -2.640165090560913
    7. '['' → logprob: -2.765165090560913
    8. ')' → logprob: -3.765165090560913
    9. 'any' → logprob: -3.890165090560913
    10. '[a' → logprob: -4.515165328979492

Token 194: 'digit' (ID: 78327)
  Prédit: 'digit'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'digit' → logprob: -0.036801304668188095
    2. 'alpha' → logprob: -3.661801338195801
    3. 'al' → logprob: -5.286801338195801
    4. 'lice' → logprob: -7.161801338195801
    5. 'n' → logprob: -7.286801338195801
    6. 'numeric' → logprob: -7.536801338195801
    7. ')' → logprob: -7.536801338195801
    8. 'd' → logprob: -7.786801338195801
    9. 'None' → logprob: -8.0368013381958
    10. ' None' → logprob: -8.4118013381958

Token 195: '())' (ID: 3516)
  Prédit: '())'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '())' → logprob: -0.6615769267082214
    2. '()' → logprob: -1.7865769863128662
    3. '(len' → logprob: -2.661576986312866
    4. '(' → logprob: -3.036576986312866
    5. '(a' → logprob: -3.286576986312866
    6. '(c' → logprob: -3.536576986312866
    7. '()))' → logprob: -3.661576986312866
    8. 'a' → logprob: -3.911576986312866
    9. '((' → logprob: -4.036576747894287
    10. ')]' → logprob: -4.286576747894287

Token 196: ']))
' (ID: 24801)
  Prédit: ']))'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ']))' → logprob: -0.0003992104611825198
    2. ']))
' → logprob: -8.375399589538574
    3. '])))' → logprob: -9.500399589538574
    4. ']' → logprob: -10.375399589538574
    5. ' ]' → logprob: -10.375399589538574
    6. ']))

' → logprob: -11.750399589538574
    7. 'else' → logprob: -12.000399589538574
    8. '])' → logprob: -12.250399589538574
    9. '']))' → logprob: -12.625399589538574
    10. ')]' → logprob: -12.750399589538574

Token 197: '#' (ID: 2)
  Prédit: 'print'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'print' → logprob: -1.1562174558639526
    2. 'if' → logprob: -1.5312174558639526
    3. 'result' → logprob: -2.156217575073242
    4. '#' → logprob: -2.406217575073242
    5. '<|end|>' → logprob: -2.531217575073242
    6. 'n' → logprob: -2.656217575073242
    7. 'p' → logprob: -3.656217575073242
    8. '
' → logprob: -4.156217575073242
    9. ')' → logprob: -4.531217575073242
    10. 'r' → logprob: -4.656217575073242

Token 198: ' Cher' (ID: 48756)
  Prédit: 'print'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'print' → logprob: -0.027656422927975655
    2. 'r' → logprob: -3.902656316757202
    3. 'result' → logprob: -6.027656555175781
    4. 'p' → logprob: -6.152656555175781
    5. 'res' → logprob: -7.152656555175781
    6. 'b' → logprob: -7.527656555175781
    7. 'for' → logprob: -8.027656555175781
    8. 'if' → logprob: -8.152656555175781
    9. 'v' → logprob: -9.152656555175781
    10. 'try' → logprob: -9.402656555175781

Token 199: 'cher' (ID: 6665)
  Prédit: 'cker'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'cker' → logprob: -0.9645947217941284
    2. 'ker' → logprob: -1.5895947217941284
    3. '   ' → logprob: -2.714594841003418
    4. 'er' → logprob: -2.839594841003418
    5. 'if' → logprob: -2.839594841003418
    6. 'r' → logprob: -2.964594841003418
    7. 'cher' → logprob: -3.089594841003418
    8. 'ck' → logprob: -3.089594841003418
    9. 'min' → logprob: -3.089594841003418
    10. 'print' → logprob: -4.089594841003418

Token 200: ' le' (ID: 505)
  Prédit: 'print'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'print' → logprob: -0.2518692910671234
    2. 'p' → logprob: -1.7518693208694458
    3. 'result' → logprob: -4.501869201660156
    4. ' p' → logprob: -4.626869201660156
    5. 'res' → logprob: -5.126869201660156
    6. 'factor' → logprob: -5.251869201660156
    7. ' print' → logprob: -5.376869201660156
    8. 'P' → logprob: -5.626869201660156
    9. 'prime' → logprob: -5.876869201660156
    10. 'div' → logprob: -6.626869201660156

Token 201: ' prochain' (ID: 52413)
  Prédit: 'p'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'p' → logprob: -0.6829072833061218
    2. 'print' → logprob: -2.0579073429107666
    3. 'result' → logprob: -2.1829073429107666
    4. 'div' → logprob: -2.8079073429107666
    5. 'P' → logprob: -2.9329073429107666
    6. 'res' → logprob: -3.0579073429107666
    7. 'fact' → logprob: -3.0579073429107666
    8. 'plus' → logprob: -4.0579071044921875
    9. 'r' → logprob: -4.5579071044921875
    10. 'prem' → logprob: -5.4329071044921875

Token 202: ' nombre' (ID: 9733)
  Prédit: 'prime'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'prime' → logprob: -0.321683794260025
    2. 'p' → logprob: -2.571683883666992
    3. 'div' → logprob: -2.571683883666992
    4. '_prime' → logprob: -3.196683883666992
    5. 'factor' → logprob: -3.946683883666992
    6. ' prime' → logprob: -4.196683883666992
    7. 'n' → logprob: -4.696683883666992
    8. 'P' → logprob: -5.196683883666992
    9. '_' → logprob: -5.321683883666992
    10. ' p' → logprob: -6.071683883666992

Token 203: ' premier' (ID: 15506)
  Prédit: '='
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '=' → logprob: -0.5337059497833252
    2. 'p' → logprob: -1.6587059497833252
    3. ' =' → logprob: -2.408705949783325
    4. 'n' → logprob: -3.533705949783325
    5. ',' → logprob: -3.783705949783325
    6. ' p' → logprob: -4.033705711364746
    7. 't' → logprob: -4.158705711364746
    8. 'x' → logprob: -4.533705711364746
    9. '_p' → logprob: -5.158705711364746
    10. '_' → logprob: -5.283705711364746

Token 204: ' avec' (ID: 3937)
  Prédit: 'p'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'p' → logprob: -0.9331000447273254
    2. 'for' → logprob: -1.5580999851226807
    3. 'n' → logprob: -2.0580999851226807
    4. 'while' → logprob: -2.4330999851226807
    5. ' for' → logprob: -3.1830999851226807
    6. 'i' → logprob: -3.1830999851226807
    7. 'def' → logprob: -3.3080999851226807
    8. '
' → logprob: -3.5580999851226807
    9. ' while' → logprob: -4.68310022354126
    10. ',' → logprob: -5.55810022354126

Token 205: ' une' (ID: 2463)
  Prédit: 'P'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'P' → logprob: -0.39951127767562866
    2. 'a' → logprob: -2.2745113372802734
    3. 'lambda' → logprob: -2.5245113372802734
    4. ' P' → logprob: -3.3995113372802734
    5. 'n' → logprob: -3.5245113372802734
    6. '(lambda' → logprob: -3.7745113372802734
    7. 'def' → logprob: -4.274511337280273
    8. ' lambda' → logprob: -4.399511337280273
    9. ' a' → logprob: -4.899511337280273
    10. 'next' → logprob: -5.024511337280273

Token 206: ' boucle' (ID: 174211)
  Prédit: 'def'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'def' → logprob: -0.5065084099769592
    2. 'while' → logprob: -1.0065083503723145
    3. 'lambda' → logprob: -3.7565083503723145
    4. 'n' → logprob: -6.0065083503723145
    5. 'for' → logprob: -6.3815083503723145
    6. 'i' → logprob: -7.0065083503723145
    7. ' while' → logprob: -7.1315083503723145
    8. ' def' → logprob: -7.8815083503723145
    9. 'P' → logprob: -8.256508827209473
    10. 'count' → logprob: -8.256508827209473

Token 207: ' subt' (ID: 25091)
  Prédit: 'i'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'i' → logprob: -0.9774655699729919
    2. 'n' → logprob: -0.9774655699729919
    3. 'while' → logprob: -1.7274656295776367
    4. '
' → logprob: -3.6024656295776367
    5. 'm' → logprob: -4.852465629577637
    6. 'x' → logprob: -4.977465629577637
    7. 'p' → logprob: -4.977465629577637
    8. 'def' → logprob: -4.977465629577637
    9. 'k' → logprob: -5.477465629577637
    10. 'for' → logprob: -5.727465629577637

Token 208: 'ile' (ID: 554)
  Prédit: 'ile'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'ile' → logprob: -0.6404358148574829
    2. 'le' → logprob: -0.7654358148574829
    3. 'tle' → logprob: -5.515435695648193
    4. 'e' → logprob: -5.890435695648193
    5. 'ale' → logprob: -7.890435695648193
    6. 'er' → logprob: -8.765436172485352
    7. 'ple' → logprob: -9.140436172485352
    8. 'itle' → logprob: -9.640436172485352
    9. 'tile' → logprob: -10.265436172485352
    10. 'ime' → logprob: -10.390436172485352

Token 209: '
' (ID: 198)
  Prédit: 'n'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'n' → logprob: -0.48576873540878296
    2. 'while' → logprob: -1.2357687950134277
    3. 'i' → logprob: -2.6107687950134277
    4. '
' → logprob: -4.485768795013428
    5. 'for' → logprob: -5.610768795013428
    6. ' while' → logprob: -5.860768795013428
    7. '```' → logprob: -7.235768795013428
    8. 'p' → logprob: -7.360768795013428
    9. 'x' → logprob: -7.985768795013428
    10. 'k' → logprob: -8.11076831817627

Token 210: 'for' (ID: 1938)
  Prédit: 'while'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'while' → logprob: -0.2568605840206146
    2. 'i' → logprob: -2.1318604946136475
    3. 'def' → logprob: -3.2568604946136475
    4. 'p' → logprob: -3.3818604946136475
    5. 'n' → logprob: -4.506860733032227
    6. 'm' → logprob: -4.631860733032227
    7. 'for' → logprob: -5.256860733032227
    8. 'x' → logprob: -5.381860733032227
    9. 'k' → logprob: -6.256860733032227
    10. 'result' → logprob: -7.756860733032227

Token 211: ' b' (ID: 287)
  Prédit: ' i'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' i' → logprob: -0.518112063407898
    2. ' x' → logprob: -1.143112063407898
    3. ' m' → logprob: -2.8931121826171875
    4. ' k' → logprob: -3.7681121826171875
    5. ' n' → logprob: -6.1431121826171875
    6. 'x' → logprob: -6.5181121826171875
    7. ' candidate' → logprob: -6.8931121826171875
    8. 'i' → logprob: -7.3931121826171875
    9. ' p' → logprob: -7.5181121826171875
    10. 'm' → logprob: -8.018112182617188

Token 212: ' in' (ID: 306)
  Prédit: ' in'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' in' → logprob: -0.006748527754098177
    2. 'in' → logprob: -5.006748676300049
    3. ' ' → logprob: -11.00674819946289
    4. ',' → logprob: -12.63174819946289
    5. 'b' → logprob: -13.00674819946289
    6. '	in' → logprob: -13.38174819946289
    7. 'a' → logprob: -14.06924819946289
    8. ')' → logprob: -14.25674819946289
    9. 'not' → logprob: -14.31924819946289
    10. '_' → logprob: -14.50674819946289

Token 213: ' count' (ID: 3605)
  Prédit: 'count'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'count' → logprob: -0.2023816704750061
    2. ' count' → logprob: -2.0773816108703613
    3. 'is' → logprob: -3.7023816108703613
    4. ' is' → logprob: -4.077381610870361
    5. 'range' → logprob: -4.702381610870361
    6. ' range' → logprob: -5.327381610870361
    7. 'chain' → logprob: -6.702381610870361
    8. 'P' → logprob: -7.577381610870361
    9. ' chain' → logprob: -8.70238208770752
    10. '(count' → logprob: -9.07738208770752

Token 214: '(a' (ID: 6271)
  Prédit: '(a'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(a' → logprob: -0.0005805541295558214
    2. '(' → logprob: -7.625580787658691
    3. '(max' → logprob: -10.125580787658691
    4. '(P' → logprob: -10.125580787658691
    5. 'a' → logprob: -12.250580787658691
    6. '(n' → logprob: -12.375580787658691
    7. ' (' → logprob: -14.000580787658691
    8. '(p' → logprob: -14.500580787658691
    9. '(b' → logprob: -15.250580787658691
    10. '((' → logprob: -15.375580787658691

Token 215: '):
' (ID: 1883)
  Prédit: '+'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '+' → logprob: -0.15347249805927277
    2. '):' → logprob: -2.278472423553467
    3. ' +' → logprob: -3.403472423553467
    4. ' ):' → logprob: -5.903472423553467
    5. ' if' → logprob: -6.028472423553467
    6. '):
' → logprob: -7.278472423553467
    7. '+a' → logprob: -8.278472900390625
    8. ',' → logprob: -8.653472900390625
    9. ')' → logprob: -9.278472900390625
    10. 'if' → logprob: -9.653472900390625

Token 216: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.12203555554151535
    2. ' if' → logprob: -2.247035503387451
    3. ':' → logprob: -4.872035503387451
    4. 'if' → logprob: -7.622035503387451
    5. ' :' → logprob: -7.872035503387451
    6. ' ' → logprob: -8.12203598022461
    7. '    
' → logprob: -9.37203598022461
    8. '   ' → logprob: -9.99703598022461
    9. '):' → logprob: -10.12203598022461
    10. ' 
' → logprob: -10.37203598022461

Token 217: ' if' (ID: 538)
  Prédit: ' if'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' if' → logprob: -0.4413764476776123
    2. '   ' → logprob: -1.0663764476776123
    3. 'if' (adapté à ' if') → logprob: -4.691376686096191
    4. ' p' → logprob: -6.191376686096191
    5. ' r' → logprob: -8.191376686096191
    6. ' ' → logprob: -8.191376686096191
    7. '   ' → logprob: -8.816376686096191
    8. ' c' → logprob: -9.066376686096191
    9. ' try' → logprob: -9.191376686096191
    10. 'p' → logprob: -9.816376686096191

Token 218: ' P' (ID: 398)
  Prédit: 'P'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'P' → logprob: -0.07994198799133301
    2. ' P' → logprob: -2.704941987991333
    3. 'b' → logprob: -5.079941749572754
    4. ' all' → logprob: -6.204941749572754
    5. 'all' → logprob: -7.454941749572754
    6. ' b' → logprob: -7.829941749572754
    7. ' ' → logprob: -8.079941749572754
    8. 'abs' → logprob: -8.954941749572754
    9. '   ' → logprob: -9.079941749572754
    10. '	P' → logprob: -10.204941749572754

Token 219: '(b' (ID: 3229)
  Prédit: '(b'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(b' → logprob: -3.190178904333152e-05
    2. 'b' → logprob: -11.125031471252441
    3. ' (' → logprob: -11.625031471252441
    4. '(' → logprob: -12.125031471252441
    5. ')' → logprob: -14.000031471252441
    6. '(
' → logprob: -14.250031471252441
    7. ')b' → logprob: -14.875031471252441
    8. ')(' → logprob: -15.375031471252441
    9. '   ' → logprob: -15.875031471252441
    10. '(abs' → logprob: -16.000032424926758

Token 220: ')==' (ID: 35269)
  Prédit: ')=='
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')==' → logprob: -0.526939332485199
    2. ')' → logprob: -0.901939332485199
    3. '==' → logprob: -5.901939392089844
    4. ')<' → logprob: -7.651939392089844
    5. '==-' → logprob: -8.526939392089844
    6. ']==' → logprob: -9.151939392089844
    7. ' )' → logprob: -9.151939392089844
    8. ' ==' → logprob: -9.901939392089844
    9. ')<=' → logprob: -10.401939392089844
    10. '```' → logprob: -10.776939392089844

Token 221: '0' (ID: 15)
  Prédit: '0'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '0' → logprob: -0.10242582112550735
    2. '-' → logprob: -2.3524258136749268
    3. ' ' → logprob: -6.352426052093506
    4. ' -' → logprob: -7.852426052093506
    5. '2' → logprob: -9.602425575256348
    6. '1' → logprob: -12.102425575256348
    7. '  ' → logprob: -12.227425575256348
    8. '   ' → logprob: -12.602425575256348
    9. '```' → logprob: -13.789925575256348
    10. ' ' → logprob: -14.664925575256348

Token 222: ':
' (ID: 734)
  Prédit: ':'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ':' → logprob: -0.1816745400428772
    2. ':
' → logprob: -1.8066744804382324
    3. ' :' → logprob: -7.056674480438232
    4. ' :
' → logprob: -7.806674480438232
    5. ':return' → logprob: -7.931674480438232
    6. ' or' → logprob: -9.18167495727539
    7. ' and' → logprob: -9.30667495727539
    8. '   ' → logprob: -9.55667495727539
    9. ':
' → logprob: -10.68167495727539
    10. '):
' → logprob: -12.43167495727539

Token 223: '       ' (ID: 309)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.14654800295829773
    2. '       ' → logprob: -2.64654803276062
    3. ' print' → logprob: -3.02154803276062
    4. 'print' → logprob: -4.146547794342041
    5. ' break' → logprob: -7.271547794342041
    6. 'break' → logprob: -9.5215482711792
    7. ' ' → logprob: -10.8965482711792
    8. ':' → logprob: -11.3965482711792
    9. '    ' → logprob: -11.5215482711792
    10. '```' → logprob: -11.5215482711792

Token 224: ' print' (ID: 2123)
  Prédit: 'print'
  Correct (stricte): False
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'print' (adapté à ' print') → logprob: -0.0014017868088558316
    2. '   ' → logprob: -7.001401901245117
    3. ' print' → logprob: -7.751401901245117
    4. 'break' → logprob: -9.751401901245117
    5. ' break' → logprob: -14.501401901245117
    6. '	print' → logprob: -14.876401901245117
    7. '       ' → logprob: -15.126401901245117
    8. '```' → logprob: -15.126401901245117
    9. ' ' → logprob: -15.876401901245117
    10. '    
' → logprob: -16.376401901245117

Token 225: '(b' (ID: 3229)
  Prédit: '(b'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(b' → logprob: -0.023247575387358665
    2. 'b' → logprob: -3.773247480392456
    3. '(' → logprob: -13.148247718811035
    4. ' b' → logprob: -16.39824676513672
    5. '	b' → logprob: -17.02324676513672
    6. ')b' → logprob: -18.02324676513672
    7. ' (' → logprob: -19.02324676513672
    8. ',b' → logprob: -19.39824676513672
    9. '=b' → logprob: -19.52324676513672
    10. '>b' → logprob: -20.02324676513672

Token 226: ')
' (ID: 446)
  Prédit: ')
'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')
' → logprob: -0.014222857542335987
    2. ')' → logprob: -4.264222621917725
    3. ')
' → logprob: -10.139223098754883
    4. '   ' → logprob: -11.264223098754883
    5. ' )
' → logprob: -12.139223098754883
    6. '       ' → logprob: -14.014223098754883
    7. ' ' → logprob: -15.639223098754883
    8. ')`
' → logprob: -15.889223098754883
    9. ' )' → logprob: -16.014223098754883
    10. ')

' → logprob: -16.139223098754883

Token 227: '       ' (ID: 309)
  Prédit: ''
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False

Token 228: ' break' (ID: 2338)
  Prédit: 'break'
  Correct (stricte): False
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'break' (adapté à ' break') → logprob: -0.20480340719223022
    2. ' break' → logprob: -1.704803466796875
    3. '	break' → logprob: -5.829803466796875
    4. '   ' → logprob: -7.829803466796875
    5. '
' → logprob: -10.579803466796875
    6. '       ' → logprob: -11.329803466796875
    7. '_break' → logprob: -12.829803466796875
    8. '```' → logprob: -13.079803466796875
    9. 'BREAK' → logprob: -13.579803466796875
    10. 'Break' → logprob: -13.954803466796875


RÉSUMÉ:
--------------------------------------------------------------------------------
Total des tokens analysés: 226
Tokens correctement prédits (1ère position, stricte): 78
Tokens correctement prédits (1ère position, avec adaptation): 81
Tokens correctement prédits (top 10): 158
Précision stricte (1ère position): 34.51%
Précision adaptée (1ère position): 35.84%
Précision (top 10): 69.91%
================================================================================
