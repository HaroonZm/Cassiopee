================================================================================
ANALYSE DE PRÉDICTION TOKEN PAR TOKEN (BATCH API)
Date: 2025-06-04 19:23:46
Modèle de tokenisation: gpt-4o-mini
================================================================================

SCRIPT ANALYSÉ:
--------------------------------------------------------------------------------
N = int(input())

if N % 2 == 0:
    print(N // 2)
else:
    print(N // 2 + 1)
--------------------------------------------------------------------------------

RÉSULTATS D'ANALYSE TOKEN PAR TOKEN:
--------------------------------------------------------------------------------
Token 0: 'N' (ID: 45)
  → Token d'amorce (pas de prédiction)

Token 1: ' =' (ID: 314)
  → Token d'amorce (pas de prédiction)

Token 2: ' int' (ID: 677)
  → Token d'amorce (pas de prédiction)

Token 3: '(input' (ID: 10054)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '(' → logprob: -0.00036394817288964987
    2. ''' → logprob: -9.000364303588867
    3. '(N' → logprob: -9.000364303588867
    4. '`' → logprob: -10.375364303588867
    5. '```' → logprob: -10.500364303588867
    6. '(
' → logprob: -10.875364303588867
    7. '('' → logprob: -11.500364303588867
    8. '("("' → logprob: -12.000364303588867
    9. '\(' → logprob: -12.250364303588867
    10. '"' → logprob: -12.875364303588867

Token 4: '())

' (ID: 27654)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '(' → logprob: -0.2372170090675354
    2. ')' → logprob: -1.7372169494628906
    3. '()' → logprob: -3.4872169494628906
    4. '())' → logprob: -5.737216949462891
    5. '```' → logprob: -7.987216949462891
    6. '(
' → logprob: -8.23721694946289
    7. '`' → logprob: -9.61221694946289
    8. '(()' → logprob: -9.61221694946289
    9. '("("' → logprob: -9.61221694946289
    10. '")' → logprob: -9.73721694946289

Token 5: 'if' (ID: 366)
  Prédit: 'for'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'for' → logprob: -0.2190706729888916
    2. 'if' → logprob: -1.8440706729888916
    3. 'result' → logprob: -4.0940704345703125
    4. 's' → logprob: -5.0940704345703125
    5. 'total' → logprob: -5.3440704345703125
    6. 'sum' → logprob: -6.4690704345703125
    7. 'count' → logprob: -6.7190704345703125
    8. 'factor' → logprob: -6.7190704345703125
    9. 'print' → logprob: -6.8440704345703125
    10. 'x' → logprob: -6.9690704345703125

Token 6: ' N' (ID: 478)
  Prédit: ' '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' ' → logprob: -0.2522113025188446
    2. ' N' → logprob: -1.502211332321167
    3. '  ' → logprob: -8.752211570739746
    4. 'N' → logprob: -9.252211570739746
    5. ' not' → logprob: -11.752211570739746
    6. ' ' → logprob: -12.377211570739746
    7. ''' → logprob: -12.502211570739746
    8. ' "' → logprob: -13.377211570739746
    9. ' '' → logprob: -13.377211570739746
    10. ' )' → logprob: -13.502211570739746

Token 7: ' %' (ID: 1851)
  Prédit: ' >'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' >' → logprob: -0.06858262419700623
    2. ' ' → logprob: -3.693582534790039
    3. ' <' → logprob: -4.193582534790039
    4. '>' → logprob: -4.943582534790039
    5. ' ==' → logprob: -4.943582534790039
    6. ' %' → logprob: -5.068582534790039
    7. ' >=' → logprob: -5.693582534790039
    8. ' <=' → logprob: -6.818582534790039
    9. '%' → logprob: -7.818582534790039
    10. '  ' → logprob: -8.318582534790039

Token 8: ' ' (ID: 220)
  Prédit: ' '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' ' → logprob: -0.22549928724765778
    2. '2' → logprob: -1.6004992723464966
    3. '4' → logprob: -10.600499153137207
    4. '3' → logprob: -10.600499153137207
    5. '```' → logprob: -11.350499153137207
    6. '32' → logprob: -11.850499153137207
    7. '=' → logprob: -12.475499153137207
    8. '1' → logprob: -12.725499153137207
    9. ' ```' → logprob: -12.975499153137207
    10. '==' → logprob: -13.475499153137207

Token 9: '2' (ID: 17)
  Prédit: '2'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '2' → logprob: -0.0011309286346659064
    2. '3' → logprob: -6.876131057739258
    3. '5' → logprob: -10.626131057739258
    4. ' ' → logprob: -10.626131057739258
    5. '4' → logprob: -10.751131057739258
    6. '10' → logprob: -11.001131057739258
    7. '7' → logprob: -12.126131057739258
    8. '1' → logprob: -12.751131057739258
    9. '```' → logprob: -13.626131057739258
    10. '6' → logprob: -14.501131057739258

Token 10: ' ==' (ID: 951)
  Prédit: ' =='
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' ==' → logprob: -0.0270400270819664
    2. '==' → logprob: -4.277040004730225
    3. ' !=' → logprob: -4.402040004730225
    4. ' ' → logprob: -7.902040004730225
    5. '!=' → logprob: -9.402040481567383
    6. ' =' → logprob: -10.527040481567383
    7. ')' → logprob: -10.902040481567383
    8. ':' → logprob: -11.152040481567383
    9. '=' → logprob: -11.527040481567383
    10. '```' → logprob: -12.277040481567383

Token 11: ' ' (ID: 220)
  Prédit: ' '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' ' → logprob: -0.020542940124869347
    2. '0' → logprob: -3.895542860031128
    3. '1' → logprob: -13.895543098449707
    4. ' ' → logprob: -16.39554214477539
    5. '```' → logprob: -17.14554214477539
    6. ')' → logprob: -18.39554214477539
    7. '2' → logprob: -19.02054214477539
    8. ''' → logprob: -19.27054214477539
    9. '=' → logprob: -19.27054214477539
    10. '  ' → logprob: -19.27054214477539

Token 12: '0' (ID: 15)
  Prédit: '0'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '0' → logprob: -0.00985005497932434
    2. ' ' → logprob: -4.634850025177002
    3. '1' → logprob: -9.38485050201416
    4. '2' → logprob: -11.50985050201416
    5. '```' → logprob: -17.259849548339844
    6. '4' → logprob: -18.759849548339844
    7. '  ' → logprob: -19.384849548339844
    8. '3' → logprob: -19.634849548339844
    9. ''' → logprob: -19.634849548339844
    10. ' ' → logprob: -19.884849548339844

Token 13: ':
' (ID: 734)
  Prédit: ':'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ':' → logprob: -2.935296834039036e-06
    2. ' :' → logprob: -13.62500286102295
    3. ':**' → logprob: -14.00000286102295
    4. '):' → logprob: -15.50000286102295
    5. ':
' → logprob: -15.62500286102295
    6. '':' → logprob: -16.000003814697266
    7. '>:' → logprob: -16.125003814697266
    8. '':'' → logprob: -16.250003814697266
    9. ':return' → logprob: -17.875003814697266
    10. '：' → logprob: -18.000003814697266

Token 14: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.024600882083177567
    2. ' print' → logprob: -4.274600982666016
    3. 'print' → logprob: -5.274600982666016
    4. '\n' → logprob: -6.149600982666016
    5. '    
' → logprob: -6.524600982666016
    6. '\' → logprob: -7.649600982666016
    7. '    ' → logprob: -7.774600982666016
    8. ''' → logprob: -8.399600982666016
    9. ' ' → logprob: -9.149600982666016
    10. '```' → logprob: -9.149600982666016

Token 15: ' print' (ID: 2123)
  Prédit: ' print'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' print' → logprob: -0.033259257674217224
    2. 'print' (adapté à ' print') → logprob: -3.783259153366089
    3. '   ' → logprob: -4.658259391784668
    4. ''' → logprob: -8.783259391784668
    5. '```' → logprob: -9.908259391784668
    6. '`' → logprob: -10.033259391784668
    7. '\' → logprob: -10.158259391784668
    8. '    ' → logprob: -10.283259391784668
    9. '    
' → logprob: -10.283259391784668
    10. '\n' → logprob: -10.408259391784668

Token 16: '(N' (ID: 10564)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '(' → logprob: -0.0022586178965866566
    2. '('' → logprob: -7.002258777618408
    3. '("' → logprob: -7.252258777618408
    4. '("("' → logprob: -7.377258777618408
    5. '("")' → logprob: -12.12725830078125
    6. '()' → logprob: -13.25225830078125
    7. '"' → logprob: -13.62725830078125
    8. ''' → logprob: -14.00225830078125
    9. '(""' → logprob: -14.12725830078125
    10. '(
' → logprob: -14.50225830078125

Token 17: ' //' (ID: 602)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ')' → logprob: -2.4272752852994017e-05
    2. '*' → logprob: -11.37502384185791
    3. '))' → logprob: -12.50002384185791
    4. '+' → logprob: -12.75002384185791
    5. ' )' → logprob: -13.12502384185791
    6. ')
' → logprob: -14.12502384185791
    7. '')' → logprob: -14.12502384185791
    8. '**' → logprob: -14.12502384185791
    9. ')`' → logprob: -14.87502384185791
    10. ' ' → logprob: -15.12502384185791

Token 18: ' ' (ID: 220)
  Prédit: '2'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '2' → logprob: -0.014164221473038197
    2. ' ' → logprob: -4.264164447784424
    3. ')' → logprob: -15.014163970947266
    4. ' ' → logprob: -16.014163970947266
    5. '```' → logprob: -16.514163970947266
    6. '3' → logprob: -16.639163970947266
    7. '4' → logprob: -16.764163970947266
    8. '1' → logprob: -16.889163970947266
    9. '２' → logprob: -17.889163970947266
    10. '۲' → logprob: -18.139163970947266

Token 19: '2' (ID: 17)
  Prédit: '2'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '2' → logprob: -6.64708495605737e-05
    2. ' ' → logprob: -9.625066757202148
    3. '```' → logprob: -16.00006675720215
    4. ')' → logprob: -16.12506675720215
    5. '   ' → logprob: -16.37506675720215
    6. '  ' → logprob: -17.12506675720215
    7. '２' → logprob: -17.68756675720215
    8. '3' → logprob: -17.87506675720215
    9. '۲' → logprob: -17.87506675720215
    10. '4' → logprob: -18.00006675720215

Token 20: ')
' (ID: 446)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')' → logprob: -2.2842308680992573e-05
    2. ')
' → logprob: -11.125022888183594
    3. '*' → logprob: -12.375022888183594
    4. ' )' → logprob: -13.125022888183594
    5. '')' → logprob: -14.750022888183594
    6. '`)' → logprob: -14.875022888183594
    7. '))' → logprob: -15.250022888183594
    8. '   ' → logprob: -15.625022888183594
    9. '```' → logprob: -16.125022888183594
    10. '")' → logprob: -16.375022888183594

Token 21: 'else' (ID: 2807)
  Prédit: 'else'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'else' → logprob: -0.0016314979875460267
    2. ' else' → logprob: -6.626631259918213
    3. 'elif' → logprob: -9.126631736755371
    4. '```' → logprob: -9.126631736755371
    5. '*' → logprob: -10.626631736755371
    6. ')' → logprob: -10.751631736755371
    7. '<|end|>' → logprob: -11.751631736755371
    8. '    
' → logprob: -12.001631736755371
    9. '_else' → logprob: -12.251631736755371
    10. '  
' → logprob: -12.376631736755371

Token 22: ':
' (ID: 734)
  Prédit: ':'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ':' → logprob: -7.827200897736475e-05
    2. ':
' → logprob: -9.500078201293945
    3. ' :' → logprob: -13.125078201293945
    4. '   ' → logprob: -13.625078201293945
    5. ':
' → logprob: -17.625078201293945
    6. '):' → logprob: -17.625078201293945
    7. '```' → logprob: -17.625078201293945
    8. ':**' → logprob: -17.875078201293945
    9. ':

' → logprob: -18.125078201293945
    10. '：' → logprob: -18.250078201293945

Token 23: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.0039626359939575195
    2. '    ' → logprob: -6.378962516784668
    3. '1' → logprob: -7.253962516784668
    4. '(' → logprob: -7.378962516784668
    5. '(N' → logprob: -8.503962516784668
    6. ' ' → logprob: -8.628962516784668
    7. '    
' → logprob: -8.878962516784668
    8. '```' → logprob: -9.753962516784668
    9. '0' → logprob: -10.128962516784668
    10. '\' → logprob: -10.253962516784668

Token 24: ' print' (ID: 2123)
  Prédit: 'print'
  Correct (stricte): False
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'print' (adapté à ' print') → logprob: -0.3511213958263397
    2. 'N' → logprob: -1.476121425628662
    3. '1' → logprob: -3.726121425628662
    4. '0' → logprob: -3.851121425628662
    5. '(' → logprob: -4.976121425628662
    6. '(N' → logprob: -4.976121425628662
    7. '   ' → logprob: -5.726121425628662
    8. '3' → logprob: -6.601121425628662
    9. ' N' → logprob: -6.851121425628662
    10. ' print' → logprob: -7.101121425628662

Token 25: '(N' (ID: 10564)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(' → logprob: -0.16070570051670074
    2. '(N' → logprob: -1.9107056856155396
    3. '((' → logprob: -7.78570556640625
    4. '('' → logprob: -10.41070556640625
    5. '()' → logprob: -10.78570556640625
    6. '("' → logprob: -12.28570556640625
    7. '(n' → logprob: -12.66070556640625
    8. '(-' → logprob: -14.03570556640625
    9. '(int' → logprob: -14.28570556640625
    10. '(f' → logprob: -14.41070556640625

Token 26: ' //' (ID: 602)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')' → logprob: -0.09128643572330475
    2. ' //' → logprob: -3.3412864208221436
    3. '//' → logprob: -4.216286659240723
    4. ' )' → logprob: -4.341286659240723
    5. '))' → logprob: -4.591286659240723
    6. '-' → logprob: -5.841286659240723
    7. '+' → logprob: -5.966286659240723
    8. '*' → logprob: -5.966286659240723
    9. ' ' → logprob: -6.216286659240723
    10. ' *' → logprob: -6.466286659240723

Token 27: ' ' (ID: 220)
  Prédit: '2'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '2' → logprob: -0.01603507250547409
    2. ' ' → logprob: -4.141035079956055
    3. '1' → logprob: -14.766035079956055
    4. '  ' → logprob: -15.766035079956055
    5. '3' → logprob: -16.016035079956055
    6. '   ' → logprob: -16.141035079956055
    7. '```' → logprob: -16.641035079956055
    8. ')' → logprob: -18.016035079956055
    9. '۲' → logprob: -18.203535079956055
    10. '２' → logprob: -18.391035079956055

Token 28: '2' (ID: 17)
  Prédit: '2'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '2' → logprob: -1.8624639324116288e-06
    2. ' ' → logprob: -13.375001907348633
    3. '1' → logprob: -15.250001907348633
    4. '3' → logprob: -18.125001907348633
    5. ')' → logprob: -18.500001907348633
    6. '```' → logprob: -18.500001907348633
    7. '-' → logprob: -18.750001907348633
    8. '  ' → logprob: -19.375001907348633
    9. '۲' → logprob: -19.375001907348633
    10. '２' → logprob: -19.750001907348633

Token 29: ' +' (ID: 659)
  Prédit: '+'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '+' → logprob: -0.5628978610038757
    2. ')' → logprob: -0.9378978610038757
    3. ' +' → logprob: -3.3128979206085205
    4. '-' → logprob: -6.437897682189941
    5. ' )' → logprob: -7.812897682189941
    6. ' -' → logprob: -8.437897682189941
    7. '+)' → logprob: -9.062897682189941
    8. '))' → logprob: -9.437897682189941
    9. '   ' → logprob: -9.437897682189941
    10. ')+' → logprob: -9.937897682189941

Token 30: ' ' (ID: 220)
  Prédit: '1'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '1' → logprob: -0.0031803252641111612
    2. ' ' → logprob: -5.753180503845215
    3. '(' → logprob: -13.878180503845215
    4. '2' → logprob: -14.628180503845215
    5. ')' → logprob: -14.753180503845215
    6. ' )' → logprob: -15.503180503845215
    7. ' N' → logprob: -15.503180503845215
    8. ' (' → logprob: -15.628180503845215
    9. 'N' → logprob: -16.0031795501709
    10. '  ' → logprob: -16.2531795501709

Token 31: '1' (ID: 16)
  Prédit: '1'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '1' → logprob: -1.7954958821064793e-05
    2. ' ' → logprob: -11.250018119812012
    3. 'N' → logprob: -13.125018119812012
    4. '(' → logprob: -13.125018119812012
    5. '2' → logprob: -14.250018119812012
    6. '(N' → logprob: -16.000017166137695
    7. ')' → logprob: -16.625017166137695
    8. '0' → logprob: -17.250017166137695
    9. ' N' → logprob: -17.750017166137695
    10. '+' → logprob: -18.000017166137695

Token 32: ')' (ID: 8)
  Prédit: ')'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')' → logprob: -2.1008713702030946e-06
    2. ')
' → logprob: -13.250001907348633
    3. ' )' → logprob: -16.000001907348633
    4. '))' → logprob: -17.375001907348633
    5. '')' → logprob: -17.375001907348633
    6. ')`' → logprob: -17.500001907348633
    7. '`)' → logprob: -17.500001907348633
    8. '```' → logprob: -17.625001907348633
    9. ')

' → logprob: -19.875001907348633
    10. ')
' → logprob: -20.000001907348633


RÉSUMÉ:
--------------------------------------------------------------------------------
Total des tokens analysés: 30
Tokens correctement prédits (1ère position, stricte): 13
Tokens correctement prédits (1ère position, avec adaptation): 14
Tokens correctement prédits (top 10): 26
Précision stricte (1ère position): 43.33%
Précision adaptée (1ère position): 46.67%
Précision (top 10): 86.67%
================================================================================
