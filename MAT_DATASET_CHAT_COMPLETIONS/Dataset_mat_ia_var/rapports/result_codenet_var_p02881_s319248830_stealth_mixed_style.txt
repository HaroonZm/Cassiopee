================================================================================
ANALYSE DE PRÉDICTION TOKEN PAR TOKEN (BATCH API)
Date: 2025-06-04 19:40:59
Modèle de tokenisation: gpt-4o-mini
================================================================================

SCRIPT ANALYSÉ:
--------------------------------------------------------------------------------
from math import sqrt

def checkPrime(num):
    if num == 1: return False
    idx = 2
    while idx <= int(sqrt(num)):
        if num % idx == 0:
            return False
        idx += 1
    return True

number = eval(input())

if checkPrime(number): print(number-1); quit()

result = number
for d in range(2, 1+int(sqrt(number))):
    if not number%d:
        t1 = number//d if hasattr(number, '__floordiv__') else number/d
        t2 = d
        r = [result, t1+t2]
        result = sorted(r)[0]
else:
    pass

output = result-2
print(int(output))
--------------------------------------------------------------------------------

RÉSULTATS D'ANALYSE TOKEN PAR TOKEN:
--------------------------------------------------------------------------------
Token 0: 'from' (ID: 2845)
  → Token d'amorce (pas de prédiction)

Token 1: ' math' (ID: 13324)
  → Token d'amorce (pas de prédiction)

Token 2: ' import' (ID: 1588)
  → Token d'amorce (pas de prédiction)

Token 3: ' sqrt' (ID: 44237)
  Prédit: 'sqrt'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'sqrt' → logprob: -0.19606393575668335
    2. ' sqrt' → logprob: -1.9460639953613281
    3. 'pow' → logprob: -4.196063995361328
    4. 'pi' → logprob: -5.196063995361328
    5. ' pi' → logprob: -5.321063995361328
    6. 'sin' → logprob: -5.446063995361328
    7. 'import' → logprob: -6.571063995361328
    8. 'ceil' → logprob: -6.696063995361328
    9. 'log' → logprob: -7.696063995361328
    10. '```' → logprob: -7.946063995361328

Token 4: '

' (ID: 279)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '(' → logprob: -0.001433216268196702
    2. '\(' → logprob: -7.626433372497559
    3. '(
' → logprob: -7.876433372497559
    4. '\n' → logprob: -7.876433372497559
    5. ',' → logprob: -9.876433372497559
    6. '\' → logprob: -10.126433372497559
    7. '```' → logprob: -10.501433372497559
    8. 'a' → logprob: -11.126433372497559
    9. '`' → logprob: -12.126433372497559
    10. ' (' → logprob: -12.376433372497559

Token 5: 'def' (ID: 1314)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(' → logprob: -0.018159886822104454
    2. '(
' → logprob: -4.268159866333008
    3. '\(' → logprob: -6.393159866333008
    4. '```' → logprob: -6.893159866333008
    5. '\n' → logprob: -7.768159866333008
    6. '`' → logprob: -8.018159866333008
    7. '\' → logprob: -8.643159866333008
    8. '
' → logprob: -9.643159866333008
    9. 'def' → logprob: -9.768159866333008
    10. ',' → logprob: -10.393159866333008

Token 6: ' check' (ID: 2371)
  Prédit: ' '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' ' → logprob: -0.001952541060745716
    2. ' calculate' → logprob: -6.876952648162842
    3. ' sqrt' → logprob: -7.751952648162842
    4. ' space' → logprob: -8.376952171325684
    5. ' compute' → logprob: -9.501952171325684
    6. ' square' → logprob: -10.126952171325684
    7. ' area' → logprob: -10.626952171325684
    8. ' ```' → logprob: -10.751952171325684
    9. ' factor' → logprob: -10.876952171325684
    10. ' my' → logprob: -11.126952171325684

Token 7: 'Prime' (ID: 43017)
  Prédit: '_'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '_' → logprob: -0.018778614699840546
    2. '(' → logprob: -5.0187788009643555
    3. '_parent' → logprob: -5.6437788009643555
    4. '_space' → logprob: -5.8937788009643555
    5. '_s' → logprob: -6.6437788009643555
    6. '_div' → logprob: -7.1437788009643555
    7. '_prime' → logprob: -7.1437788009643555
    8. '_factor' → logprob: -7.8937788009643555
    9. '_square' → logprob: -8.393778800964355
    10. '_pal' → logprob: -8.518778800964355

Token 8: '(num' (ID: 15828)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '(' → logprob: -0.00035333906998857856
    2. ' (' → logprob: -9.000353813171387
    3. '```' → logprob: -10.000353813171387
    4. 's' → logprob: -10.375353813171387
    5. '(x' → logprob: -10.625353813171387
    6. '("("' → logprob: -10.750353813171387
    7. '(n' → logprob: -10.875353813171387
    8. '(token' → logprob: -11.125353813171387
    9. '('' → logprob: -11.375353813171387
    10. '(:' → logprob: -11.625353813171387

Token 9: '):
' (ID: 1883)
  Prédit: '):'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '):' → logprob: -0.3875390291213989
    2. ')' → logprob: -1.137539029121399
    3. '(' → logprob: -7.637538909912109
    4. ':' → logprob: -9.13753890991211
    5. '):
' → logprob: -11.13753890991211
    6. ' ):' → logprob: -11.26253890991211
    7. ')：' → logprob: -11.63753890991211
    8. '():' → logprob: -11.76253890991211
    9. 's' → logprob: -12.13753890991211
    10. ',' → logprob: -12.76253890991211

Token 10: '   ' (ID: 271)
  Prédit: ':'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ':' → logprob: -0.2473001778125763
    2. '(' → logprob: -2.622300148010254
    3. '   ' → logprob: -2.747300148010254
    4. '():' → logprob: -2.747300148010254
    5. ':
' → logprob: -5.247300148010254
    6. '(
' → logprob: -5.997300148010254
    7. '):' → logprob: -5.997300148010254
    8. '```' → logprob: -5.997300148010254
    9. '():
' → logprob: -6.747300148010254
    10. ' :' → logprob: -6.747300148010254

Token 11: ' if' (ID: 538)
  Prédit: ' if'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' if' → logprob: -0.23433469235897064
    2. '   ' → logprob: -2.234334707260132
    3. ' 
' → logprob: -3.359334707260132
    4. ' ' → logprob: -3.359334707260132
    5. 'if' (adapté à ' if') → logprob: -4.359334468841553
    6. ' for' → logprob: -4.609334468841553
    7. '```' → logprob: -5.984334468841553
    8. '    ' → logprob: -6.984334468841553
    9. ' :' → logprob: -7.109334468841553
    10. '     
' → logprob: -7.109334468841553

Token 12: ' num' (ID: 2269)
  Prédit: ' num'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' num' → logprob: -0.0021882106084376574
    2. 'num' → logprob: -6.127188205718994
    3. '	num' → logprob: -13.502188682556152
    4. ' ' → logprob: -14.002188682556152
    5. '(num' → logprob: -14.627188682556152
    6. '   ' → logprob: -16.252187728881836
    7. ' n' → logprob: -16.252187728881836
    8. 'n' → logprob: -16.502187728881836
    9. '<num' → logprob: -16.502187728881836
    10. ' ' → logprob: -17.002187728881836

Token 13: ' ==' (ID: 951)
  Prédit: ' <'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' <' → logprob: -0.1997765749692917
    2. ' <=' → logprob: -2.3247766494750977
    3. ' ' → logprob: -2.5747766494750977
    4. ' %' → logprob: -5.324776649475098
    5. '<' → logprob: -6.949776649475098
    6. ' ==' → logprob: -7.199776649475098
    7. '<=' → logprob: -8.324776649475098
    8. '%' → logprob: -8.449776649475098
    9. '==' → logprob: -10.449776649475098
    10. '   ' → logprob: -10.699776649475098

Token 14: ' ' (ID: 220)
  Prédit: ' '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' ' → logprob: -0.007650283630937338
    2. '2' → logprob: -5.007650375366211
    3. '1' → logprob: -7.257650375366211
    4. '0' → logprob: -8.382650375366211
    5. '   ' → logprob: -14.757650375366211
    6. '```' → logprob: -15.632650375366211
    7. '  ' → logprob: -16.25765037536621
    8. '	' → logprob: -16.63265037536621
    9. '<' → logprob: -16.63265037536621
    10. '    ' → logprob: -16.88265037536621

Token 15: '1' (ID: 16)
  Prédit: '2'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '2' → logprob: -0.05574606731534004
    2. '0' → logprob: -3.555746078491211
    3. ' ' → logprob: -3.805746078491211
    4. '1' → logprob: -5.680746078491211
    5. '<' → logprob: -13.180746078491211
    6. '   ' → logprob: -13.430746078491211
    7. '```' → logprob: -13.555746078491211
    8. '[' → logprob: -14.993246078491211
    9. '  ' → logprob: -15.368246078491211
    10. '"' → logprob: -15.430746078491211

Token 16: ':' (ID: 25)
  Prédit: ':'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ':' → logprob: -0.003678455948829651
    2. ' :' → logprob: -5.753678321838379
    3. ':return' → logprob: -7.878678321838379
    4. ':
' → logprob: -9.378678321838379
    5. '():' → logprob: -11.378678321838379
    6. ' :
' → logprob: -11.503678321838379
    7. '):' → logprob: -12.378678321838379
    8. '   ' → logprob: -12.378678321838379
    9. ' or' → logprob: -12.628678321838379
    10. '    ' → logprob: -13.503678321838379

Token 17: ' return' (ID: 622)
  Prédit: ' return'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' return' → logprob: -0.7979260683059692
    2. '   ' → logprob: -1.2979260683059692
    3. '    ' → logprob: -1.5479260683059692
    4. '       ' → logprob: -3.7979259490966797
    5. 'return' → logprob: -3.7979259490966797
    6. '
' → logprob: -4.79792594909668
    7. ' 
' → logprob: -6.04792594909668
    8. ':return' → logprob: -6.04792594909668
    9. '\n' → logprob: -6.17292594909668
    10. '```' → logprob: -6.79792594909668

Token 18: ' False' (ID: 7983)
  Prédit: ' False'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' False' → logprob: -0.03894975036382675
    2. 'False' → logprob: -3.413949728012085
    3. ' True' → logprob: -5.538949966430664
    4. ' ' → logprob: -6.663949966430664
    5. 'True' → logprob: -9.413949966430664
    6. ' false' → logprob: -15.163949966430664
    7. '(False' → logprob: -15.163949966430664
    8. ' None' → logprob: -15.413949966430664
    9. '  ' → logprob: -15.538949966430664
    10. ' 

' → logprob: -15.913949966430664

Token 19: '
' (ID: 198)
  Prédit: '
'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '
' → logprob: -0.5748577117919922
    2. '\n' → logprob: -1.0748577117919922
    3. '   ' → logprob: -3.324857711791992
    4. '  
' → logprob: -3.824857711791992
    5. '    
' → logprob: -4.199857711791992
    6. '   
' → logprob: -5.074857711791992
    7. '\' → logprob: -5.324857711791992
    8. '
' → logprob: -5.699857711791992
    9. ' 
' → logprob: -6.074857711791992
    10. '' → logprob: -6.324857711791992

Token 20: '   ' (ID: 271)
  Prédit: '\n'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '\n' → logprob: -1.0528675317764282
    2. '  
' → logprob: -1.6778675317764282
    3. '
' → logprob: -2.1778674125671387
    4. '\' → logprob: -2.5528674125671387
    5. '    
' → logprob: -2.6778674125671387
    6. '```' → logprob: -2.6778674125671387
    7. '   ' → logprob: -2.9278674125671387
    8. '   
' → logprob: -4.302867412567139
    9. '\r' → logprob: -4.427867412567139
    10. '<|end|>' → logprob: -4.802867412567139

Token 21: ' idx' (ID: 14016)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.6465688943862915
    2. '
' → logprob: -1.2715688943862915
    3. '\n' → logprob: -2.521568775177002
    4. '    
' → logprob: -3.021568775177002
    5. ' for' → logprob: -3.521568775177002
    6. '  
' → logprob: -4.521568775177002
    7. 'for' → logprob: -5.271568775177002
    8. ' 
' → logprob: -5.396568775177002
    9. '   
' → logprob: -5.396568775177002
    10. '\' → logprob: -5.521568775177002

Token 22: ' =' (ID: 314)
  Prédit: ' in'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' in' → logprob: -0.18287493288516998
    2. '=' → logprob: -3.057874917984009
    3. ' ' → logprob: -3.057874917984009
    4. ' <=' → logprob: -3.807874917984009
    5. ' >' → logprob: -4.432875156402588
    6. ' ==' → logprob: -4.557875156402588
    7. '==' → logprob: -5.057875156402588
    8. ' =' → logprob: -5.182875156402588
    9. '>' → logprob: -5.557875156402588
    10. '   ' → logprob: -5.557875156402588

Token 23: ' ' (ID: 220)
  Prédit: ' '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' ' → logprob: -0.17977510392665863
    2. '2' → logprob: -1.8047751188278198
    3. '1' → logprob: -12.05477523803711
    4. '0' → logprob: -12.05477523803711
    5. '   ' → logprob: -12.61727523803711
    6. ' ' → logprob: -12.80477523803711
    7. ' int' → logprob: -13.05477523803711
    8. ' sqrt' → logprob: -13.11727523803711
    9. '```' → logprob: -13.42977523803711
    10. '    ' → logprob: -13.61727523803711

Token 24: '2' (ID: 17)
  Prédit: '2'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '2' → logprob: -0.03819870203733444
    2. ' ' → logprob: -3.288198709487915
    3. '0' → logprob: -9.163198471069336
    4. '1' → logprob: -10.538198471069336
    5. '   ' → logprob: -11.163198471069336
    6. '  ' → logprob: -12.975698471069336
    7. 'sqrt' → logprob: -13.288198471069336
    8. 'int' → logprob: -13.413198471069336
    9. '    ' → logprob: -13.600698471069336
    10. ' int' → logprob: -14.225698471069336

Token 25: '
' (ID: 198)
  Prédit: ''
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False

Token 26: '   ' (ID: 271)
  Prédit: ' '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' ' → logprob: -1.1516273021697998
    2. ':' → logprob: -1.5266273021697998
    3. ' while' → logprob: -1.6516273021697998
    4. ',' → logprob: -2.2766273021698
    5. '  ' → logprob: -3.2766273021698
    6. '   ' → logprob: -3.4016273021698
    7. ' ,' → logprob: -3.7766273021698
    8. 'while' → logprob: -4.526627540588379
    9. '```' → logprob: -4.651627540588379
    10. '**' → logprob: -4.776627540588379

Token 27: ' while' (ID: 2049)
  Prédit: ' while'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' while' → logprob: -0.7418490052223206
    2. ' ' → logprob: -0.9918490052223206
    3. ':' → logprob: -2.866848945617676
    4. 'while' (adapté à ' while') → logprob: -3.116848945617676
    5. '<|end|>' → logprob: -3.616848945617676
    6. '  ' → logprob: -5.116848945617676
    7. '   ' → logprob: -5.116848945617676
    8. '    ' → logprob: -5.991848945617676
    9. ',' → logprob: -6.366848945617676
    10. ' :' → logprob: -6.741848945617676

Token 28: ' idx' (ID: 14016)
  Prédit: ' idx'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' idx' → logprob: -0.0003066222125198692
    2. 'idx' → logprob: -8.125307083129883
    3. '(idx' → logprob: -11.625307083129883
    4. '	idx' → logprob: -14.125307083129883
    5. ' (' → logprob: -14.875307083129883
    6. ' sqrt' → logprob: -15.125307083129883
    7. ' ' → logprob: -16.125307083129883
    8. ' ' → logprob: -16.500307083129883
    9. '_idx' → logprob: -17.000307083129883
    10. '[idx' → logprob: -17.625307083129883

Token 29: ' <=' (ID: 5017)
  Prédit: ' <='
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' <=' → logprob: -0.06646306812763214
    2. ' *' → logprob: -2.941462993621826
    3. '<=' → logprob: -4.816462993621826
    4. '*' → logprob: -5.691462993621826
    5. ' ' → logprob: -10.441463470458984
    6. ' idx' → logprob: -12.816463470458984
    7. '**' → logprob: -13.066463470458984
    8. '[idx' → logprob: -13.066463470458984
    9. '*i' → logprob: -13.566463470458984
    10. ' **' → logprob: -13.691463470458984

Token 30: ' int' (ID: 677)
  Prédit: ' sqrt'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' sqrt' → logprob: -0.5892292261123657
    2. 'sqrt' → logprob: -1.2142292261123657
    3. ' int' → logprob: -2.339229106903076
    4. 'int' → logprob: -2.964229106903076
    5. 's' → logprob: -8.464229583740234
    6. ' ' → logprob: -10.214229583740234
    7. '   ' → logprob: -11.089229583740234
    8. '	s' → logprob: -11.464229583740234
    9. ' ' → logprob: -11.714229583740234
    10. '```' → logprob: -12.214229583740234

Token 31: '(s' (ID: 1858)
  Prédit: '(s'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(s' → logprob: -0.05179620534181595
    2. '(' → logprob: -3.0517961978912354
    3. 'sqrt' → logprob: -6.0517964363098145
    4. '(num' → logprob: -7.4267964363098145
    5. ' (' → logprob: -8.801795959472656
    6. 's' → logprob: -10.301795959472656
    7. ' sqrt' → logprob: -10.676795959472656
    8. '(square' → logprob: -11.426795959472656
    9. '.sqrt' → logprob: -11.676795959472656
    10. 'num' → logprob: -12.051795959472656

Token 32: 'qrt' (ID: 17629)
  Prédit: 'qrt'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'qrt' → logprob: -1.1875571544806007e-05
    2. 'q' → logprob: -12.000011444091797
    3. 'sqrt' → logprob: -12.750011444091797
    4. 'qr' → logprob: -13.500011444091797
    5. 'qt' → logprob: -13.625011444091797
    6. 'qart' → logprob: -16.375011444091797
    7. 'ql' → logprob: -17.625011444091797
    8. 'rt' → logprob: -18.000011444091797
    9. '.sqrt' → logprob: -18.250011444091797
    10. 'qu' → logprob: -18.750011444091797

Token 33: '(num' (ID: 15828)
  Prédit: '(num'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(num' → logprob: -0.006723771803081036
    2. '(' → logprob: -5.006723880767822
    3. ' (' → logprob: -12.256723403930664
    4. '(
' → logprob: -12.881723403930664
    5. 'num' → logprob: -14.256723403930664
    6. '(n' → logprob: -16.131723403930664
    7. ' num' → logprob: -16.256723403930664
    8. '(

' → logprob: -16.381723403930664
    9. '<num' → logprob: -17.131723403930664
    10. ')' → logprob: -17.381723403930664

Token 34: ')):
' (ID: 22530)
  Prédit: '))'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '))' → logprob: -0.2334326207637787
    2. ')' → logprob: -1.983432650566101
    3. '(' → logprob: -3.1084325313568115
    4. '()))' → logprob: -4.483432769775391
    5. '))+' → logprob: -4.483432769775391
    6. '(num' → logprob: -6.608432769775391
    7. ')):' → logprob: -7.608432769775391
    8. '())' → logprob: -8.23343276977539
    9. ' ' → logprob: -8.23343276977539
    10. ')+' → logprob: -8.35843276977539

Token 35: '       ' (ID: 309)
  Prédit: ':'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ':' → logprob: -0.07623293995857239
    2. '       ' → logprob: -3.20123291015625
    3. '   ' → logprob: -4.70123291015625
    4. ':
' → logprob: -4.70123291015625
    5. '):' → logprob: -5.45123291015625
    6. ' :' → logprob: -5.45123291015625
    7. ' and' → logprob: -6.07623291015625
    8. '<|end|>' → logprob: -6.45123291015625
    9. '    ' → logprob: -7.95123291015625
    10. '<|end|>' → logprob: -8.20123291015625

Token 36: ' if' (ID: 538)
  Prédit: ''
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False

Token 37: ' num' (ID: 2269)
  Prédit: ' num'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' num' → logprob: -0.00249289907515049
    2. 'num' → logprob: -6.002492904663086
    3. '(num' → logprob: -11.627492904663086
    4. ' ' → logprob: -12.377492904663086
    5. '	num' → logprob: -13.252492904663086
    6. '<num' → logprob: -14.377492904663086
    7. ' (' → logprob: -14.502492904663086
    8. ' ' → logprob: -15.002492904663086
    9. ')' → logprob: -16.127492904663086
    10. '$num' → logprob: -16.127492904663086

Token 38: ' %' (ID: 1851)
  Prédit: ' %'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' %' → logprob: -0.002828530967235565
    2. '%' → logprob: -5.877828598022461
    3. ' ' → logprob: -10.752828598022461
    4. ' ' → logprob: -13.002828598022461
    5. '%i' → logprob: -17.12782859802246
    6. '   ' → logprob: -18.25282859802246
    7. ' %
' → logprob: -18.62782859802246
    8. '%x' → logprob: -18.87782859802246
    9. '%s' → logprob: -19.00282859802246
    10. '```' → logprob: -19.12782859802246

Token 39: ' idx' (ID: 14016)
  Prédit: ' idx'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' idx' → logprob: -0.5763158798217773
    2. 'idx' → logprob: -0.8263158798217773
    3. '	idx' → logprob: -8.576315879821777
    4. ' ' → logprob: -8.701315879821777
    5. '2' → logprob: -11.451315879821777
    6. '[idx' → logprob: -12.451315879821777
    7. '(idx' → logprob: -13.076315879821777
    8. ' ' → logprob: -13.201315879821777
    9. '<|end|>' → logprob: -14.076315879821777
    10. '.idx' → logprob: -14.576315879821777

Token 40: ' ==' (ID: 951)
  Prédit: ' =='
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' ==' → logprob: -0.038102537393569946
    2. '==' → logprob: -3.288102626800537
    3. ' ' → logprob: -10.663102149963379
    4. ')' → logprob: -11.038102149963379
    5. ')==' → logprob: -11.538102149963379
    6. '=' → logprob: -12.038102149963379
    7. ' ' → logprob: -13.163102149963379
    8. ' =' → logprob: -14.413102149963379
    9. ']==' → logprob: -14.413102149963379
    10. '===' → logprob: -14.413102149963379

Token 41: ' ' (ID: 220)
  Prédit: ' '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' ' → logprob: -0.1269284337759018
    2. '0' → logprob: -2.1269283294677734
    3. ' ' → logprob: -15.501928329467773
    4. '  ' → logprob: -16.751928329467773
    5. '<|end|>' → logprob: -17.126928329467773
    6. '```' → logprob: -17.876928329467773
    7. '   ' → logprob: -18.876928329467773
    8. '	' → logprob: -19.126928329467773
    9. '۰' → logprob: -19.251928329467773
    10. ')' → logprob: -19.689428329467773

Token 42: '0' (ID: 15)
  Prédit: '0'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '0' → logprob: -0.0009114635176956654
    2. ' ' → logprob: -7.000911235809326
    3. '۰' → logprob: -17.625911712646484
    4. '<|end|>' → logprob: -17.875911712646484
    5. '  ' → logprob: -18.375911712646484
    6. '   ' → logprob: -18.875911712646484
    7. '```' → logprob: -19.000911712646484
    8. '٠' → logprob: -19.813411712646484
    9. ')' → logprob: -19.813411712646484
    10. ' ' → logprob: -19.938411712646484

Token 43: ':
' (ID: 734)
  Prédit: ':'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ':' → logprob: -0.0016104355454444885
    2. ':return' → logprob: -6.626610279083252
    3. ':
' → logprob: -8.75161075592041
    4. '):' → logprob: -9.75161075592041
    5. ' :' → logprob: -10.00161075592041
    6. '       ' → logprob: -11.62661075592041
    7. '           ' → logprob: -12.37661075592041
    8. ' or' → logprob: -12.75161075592041
    9. ')' → logprob: -13.25161075592041
    10. ' return' → logprob: -13.50161075592041

Token 44: '           ' (ID: 352)
  Prédit: '           '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '           ' → logprob: -0.9540554881095886
    2. ' return' → logprob: -1.0790555477142334
    3. '       ' → logprob: -1.4540555477142334
    4. 'return' → logprob: -4.079055309295654
    5. ' ' → logprob: -4.579055309295654
    6. ' ' → logprob: -5.079055309295654
    7. '        ' → logprob: -5.704055309295654
    8. ':return' → logprob: -6.954055309295654
    9. ' 
' → logprob: -7.079055309295654
    10. '   ' → logprob: -7.079055309295654

Token 45: ' return' (ID: 622)
  Prédit: ' return'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' return' → logprob: -0.5798103213310242
    2. 'return' (adapté à ' return') → logprob: -0.8298103213310242
    3. '               ' → logprob: -5.57981014251709
    4. ' ' → logprob: -10.57981014251709
    5. '	return' → logprob: -10.70481014251709
    6. '           ' → logprob: -11.07981014251709
    7. '   ' → logprob: -11.32981014251709
    8. '       ' → logprob: -11.57981014251709
    9. ':return' → logprob: -12.82981014251709
    10. '```' → logprob: -13.82981014251709

Token 46: ' False' (ID: 7983)
  Prédit: 'False'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'False' → logprob: -0.06196768581867218
    2. ' False' → logprob: -2.811967611312866
    3. 'True' → logprob: -16.811967849731445
    4. ' True' → logprob: -18.811967849731445
    5. '(False' → logprob: -19.811967849731445
    6. ' ' → logprob: -21.561967849731445
    7. ' ' → logprob: -21.686967849731445
    8. '_false' → logprob: -22.061967849731445
    9. '=False' → logprob: -22.311967849731445
    10. '.False' → logprob: -22.936967849731445

Token 47: '
' (ID: 198)
  Prédit: '
'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '
' → logprob: -0.44559991359710693
    2. '       ' → logprob: -1.070599913597107
    3. '        
' → logprob: -4.8206000328063965
    4. '\n' → logprob: -5.0706000328063965
    5. '    
' → logprob: -7.6956000328063965
    6. '<|end|>' → logprob: -7.9456000328063965
    7. ' 
' → logprob: -8.320599555969238
    8. '  
' → logprob: -8.445599555969238
    9. '```' → logprob: -8.570599555969238
    10. '   ' → logprob: -8.570599555969238

Token 48: '       ' (ID: 309)
  Prédit: '       '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '       ' → logprob: -0.21008440852165222
    2. '
' → logprob: -1.7100844383239746
    3. '        
' → logprob: -4.960084438323975
    4. '    
' → logprob: -7.710084438323975
    5. '   ' → logprob: -7.960084438323975
    6. '\n' → logprob: -8.335083961486816
    7. '<|end|>' → logprob: -9.210083961486816
    8. '            
' → logprob: -9.460083961486816
    9. '```' → logprob: -9.460083961486816
    10. '  
' → logprob: -9.585083961486816

Token 49: ' idx' (ID: 14016)
  Prédit: '       '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '       ' → logprob: -0.06962291896343231
    2. '
' → logprob: -3.0696229934692383
    3. 'idx' (adapté à ' idx') → logprob: -4.944622993469238
    4. '   ' → logprob: -5.444622993469238
    5. '        
' → logprob: -5.569622993469238
    6. ' idx' → logprob: -5.944622993469238
    7. '    
' → logprob: -7.194622993469238
    8. '\n' → logprob: -7.444622993469238
    9. ' 
' → logprob: -7.694622993469238
    10. '	idx' → logprob: -8.194622993469238

Token 50: ' +=' (ID: 2757)
  Prédit: ' +='
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' +=' → logprob: -0.162943035364151
    2. '+=' → logprob: -1.9129430055618286
    3. '+' → logprob: -5.912942886352539
    4. '++' → logprob: -12.287942886352539
    5. ' +' → logprob: -12.787942886352539
    6. ' ' → logprob: -14.037942886352539
    7. '=' → logprob: -14.162942886352539
    8. '+="' → logprob: -14.287942886352539
    9. '+='' → logprob: -15.037942886352539
    10. '<|end|>' → logprob: -15.037942886352539

Token 51: ' ' (ID: 220)
  Prédit: '1'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '1' → logprob: -0.001170225441455841
    2. ' ' → logprob: -6.7511701583862305
    3. '   ' → logprob: -18.626171112060547
    4. ' ' → logprob: -18.876171112060547
    5. '```' → logprob: -19.251171112060547
    6. '  ' → logprob: -19.626171112060547
    7. '１' → logprob: -19.751171112060547
    8. '    ' → logprob: -20.001171112060547
    9. '<|end|>' → logprob: -20.126171112060547
    10. '2' → logprob: -20.251171112060547

Token 52: '1' (ID: 16)
  Prédit: '1'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '1' → logprob: -9.627176768844947e-05
    2. ' ' → logprob: -9.250096321105957
    3. '2' → logprob: -17.31259536743164
    4. '```' → logprob: -17.50009536743164
    5. '  ' → logprob: -17.81259536743164
    6. '   ' → logprob: -18.25009536743164
    7. '１' → logprob: -19.12509536743164
    8. '۱' → logprob: -19.43759536743164
    9. '+' → logprob: -20.06259536743164
    10. '१' → logprob: -20.06259536743164

Token 53: '
' (ID: 198)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -1.0853158235549927
    2. 'return' → logprob: -1.0853158235549927
    3. '
' → logprob: -1.2103158235549927
    4. '  
' → logprob: -4.460315704345703
    5. '    
' → logprob: -4.585315704345703
    6. ' return' → logprob: -6.210315704345703
    7. ' 
' → logprob: -6.835315704345703
    8. '```' → logprob: -7.335315704345703
    9. '   
' → logprob: -7.835315704345703
    10. ' ' → logprob: -9.085315704345703

Token 54: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.045863814651966095
    2. '
' → logprob: -3.5458638668060303
    3. 'return' → logprob: -4.420863628387451
    4. '    
' → logprob: -6.420863628387451
    5. ' return' → logprob: -7.045863628387451
    6. ' 
' → logprob: -7.045863628387451
    7. '  
' → logprob: -7.795863628387451
    8. '```' → logprob: -9.17086410522461
    9. '   
' → logprob: -10.54586410522461
    10. ' ' → logprob: -10.54586410522461

Token 55: ' return' (ID: 622)
  Prédit: 'return'
  Correct (stricte): False
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'return' (adapté à ' return') → logprob: -0.2022949904203415
    2. '   ' → logprob: -1.702294945716858
    3. ' return' → logprob: -7.202294826507568
    4. '```' → logprob: -9.702295303344727
    5. '    
' → logprob: -10.577295303344727
    6. ' ' → logprob: -10.952295303344727
    7. ':return' → logprob: -11.202295303344727
    8. '
' → logprob: -12.452295303344727
    9. '	return' → logprob: -12.452295303344727
    10. '  ' → logprob: -12.702295303344727

Token 56: ' True' (ID: 6432)
  Prédit: 'True'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'True' → logprob: -0.029750604182481766
    2. ' True' → logprob: -3.5297505855560303
    3. 'Tr' → logprob: -16.40475082397461
    4. '(True' → logprob: -17.27975082397461
    5. ' Tru' → logprob: -18.02975082397461
    6. ' ' → logprob: -19.02975082397461
    7. 'False' → logprob: -19.27975082397461
    8. ' ' → logprob: -19.52975082397461
    9. '   ' → logprob: -19.52975082397461
    10. '=True' → logprob: -19.77975082397461

Token 57: '

' (ID: 279)
  Prédit: ''
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False

Token 58: 'number' (ID: 8096)
  Prédit: '#'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '#' → logprob: -1.0008901357650757
    2. '<|end|>' → logprob: -1.5008901357650757
    3. 'n' → logprob: -2.1258902549743652
    4. ' ' → logprob: -2.2508902549743652
    5. 'def' → logprob: -3.3758902549743652
    6. '```' → logprob: -3.7508902549743652
    7. '.' → logprob: -4.000890254974365
    8. '
' → logprob: -4.375890254974365
    9. '\' → logprob: -4.500890254974365
    10. '(' → logprob: -4.500890254974365

Token 59: ' =' (ID: 314)
  Prédit: ' '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' ' → logprob: -0.6801558136940002
    2. ')' → logprob: -1.6801557540893555
    3. '<|end|>' → logprob: -2.0551557540893555
    4. 's' → logprob: -2.8051557540893555
    5. ' =' → logprob: -3.4301557540893555
    6. '(' → logprob: -3.4301557540893555
    7. ' ==' → logprob: -4.3051557540893555
    8. ' )' → logprob: -4.5551557540893555
    9. '  ' → logprob: -5.0551557540893555
    10. '>' → logprob: -5.5551557540893555

Token 60: ' eval' (ID: 29383)
  Prédit: ' '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' ' → logprob: -0.14041906595230103
    2. ' int' → logprob: -2.8904190063476562
    3. '17' → logprob: -3.5154190063476562
    4. 'int' → logprob: -4.265419006347656
    5. '10' → logprob: -5.015419006347656
    6. '20' → logprob: -5.015419006347656
    7. '25' → logprob: -5.015419006347656
    8. '29' → logprob: -5.640419006347656
    9. '100' → logprob: -5.765419006347656
    10. '19' → logprob: -6.515419006347656

Token 61: '(input' (ID: 10054)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(' → logprob: -0.0012899977155029774
    2. '('' → logprob: -7.3762898445129395
    3. '(input' → logprob: -7.8762898445129395
    4. '("("' → logprob: -8.251290321350098
    5. ' (' → logprob: -11.626290321350098
    6. '(open' → logprob: -13.126290321350098
    7. '(eval' → logprob: -13.126290321350098
    8. '(s' → logprob: -13.376290321350098
    9. '()' → logprob: -13.501290321350098
    10. '(
' → logprob: -14.251290321350098

Token 62: '())

' (ID: 27654)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '(' → logprob: -1.1298071146011353
    2. '('' → logprob: -1.1298071146011353
    3. '()' → logprob: -1.6298071146011353
    4. '("("' → logprob: -1.8798071146011353
    5. '())' → logprob: -5.629806995391846
    6. '("' → logprob: -7.129806995391846
    7. ')' → logprob: -7.629806995391846
    8. '("")' → logprob: -9.254807472229004
    9. '(""))' → logprob: -9.629807472229004
    10. '(()' → logprob: -10.004807472229004

Token 63: 'if' (ID: 366)
  Prédit: 'if'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'if' → logprob: -0.31354594230651855
    2. 'print' → logprob: -1.3135459423065186
    3. 'for' → logprob: -8.563546180725098
    4. ' if' → logprob: -9.813546180725098
    5. 'result' → logprob: -10.813546180725098
    6. '```' → logprob: -11.563546180725098
    7. 'while' → logprob: -12.563546180725098
    8. 'output' → logprob: -13.563546180725098
    9. ' print' → logprob: -14.063546180725098
    10. 'check' → logprob: -14.563546180725098

Token 64: ' check' (ID: 2371)
  Prédit: ' check'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' check' → logprob: -0.008120656944811344
    2. ' number' → logprob: -4.883120536804199
    3. 'check' → logprob: -7.758120536804199
    4. ' ' → logprob: -9.7581205368042
    5. 'number' → logprob: -11.0081205368042
    6. ' ' → logprob: -11.5081205368042
    7. '(check' → logprob: -13.6331205368042
    8. ' not' → logprob: -14.2581205368042
    9. ' space' → logprob: -15.1331205368042
    10. '	check' → logprob: -16.133121490478516

Token 65: 'Prime' (ID: 43017)
  Prédit: 'Prime'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'Prime' → logprob: -5.512236498361744e-07
    2. 'Pr' → logprob: -15.750000953674316
    3. '_prime' → logprob: -16.375
    4. 'prime' → logprob: -16.75
    5. 'Prima' → logprob: -16.75
    6. 'Pri' → logprob: -16.875
    7. 'Prim' → logprob: -16.875
    8. ' Prime' → logprob: -17.0
    9. 'P' → logprob: -17.375
    10. 'Primer' → logprob: -19.5

Token 66: '(number' (ID: 32955)
  Prédit: '(number'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(number' → logprob: -0.0007135047344490886
    2. '(' → logprob: -7.250713348388672
    3. ' (' → logprob: -13.125713348388672
    4. '(num' → logprob: -13.500713348388672
    5. '(Number' → logprob: -16.125713348388672
    6. '(numero' → logprob: -16.125713348388672
    7. '((' → logprob: -16.875713348388672
    8. '(n' → logprob: -17.750713348388672
    9. 'number' → logprob: -18.375713348388672
    10. '(
' → logprob: -18.500713348388672

Token 67: '):' (ID: 3127)
  Prédit: '):'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '):' → logprob: -7.684157026233152e-05
    2. ')' → logprob: -10.125077247619629
    3. ' ):' → logprob: -10.375077247619629
    4. ':' → logprob: -12.250077247619629
    5. '):
' → logprob: -14.750077247619629
    6. '():' → logprob: -15.375077247619629
    7. ')==' → logprob: -17.375076293945312
    8. '==' → logprob: -18.000076293945312
    9. ')：' → logprob: -18.250076293945312
    10. '}:' → logprob: -18.625076293945312

Token 68: ' print' (ID: 2123)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.0551423504948616
    2. ' print' → logprob: -2.930142402648926
    3. '	print' → logprob: -8.930142402648926
    4. 'print' → logprob: -9.055142402648926
    5. '   ' → logprob: -12.180142402648926
    6. '
' → logprob: -13.555142402648926
    7. '    
' → logprob: -13.805142402648926
    8. '```' → logprob: -14.305142402648926
    9. '\n' → logprob: -14.430142402648926
    10. '       ' → logprob: -14.680142402648926

Token 69: '(number' (ID: 32955)
  Prédit: '("'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '("' → logprob: -0.3931537866592407
    2. '(' → logprob: -1.1431537866592407
    3. '("("' → logprob: -5.518153667449951
    4. '('' → logprob: -6.393153667449951
    5. '(f' → logprob: -8.26815414428711
    6. '("")' → logprob: -9.26815414428711
    7. '(True' → logprob: -9.26815414428711
    8. '("(' → logprob: -10.01815414428711
    9. ' ("' → logprob: -10.51815414428711
    10. '()' → logprob: -10.51815414428711

Token 70: '-' (ID: 12)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ')' → logprob: -0.0001968649885384366
    2. ' )' → logprob: -8.62519645690918
    3. ',' → logprob: -11.50019645690918
    4. '))' → logprob: -13.50019645690918
    5. '")' → logprob: -13.62519645690918
    6. '()' → logprob: -13.87519645690918
    7. '())' → logprob: -14.00019645690918
    8. ')
' → logprob: -14.37519645690918
    9. ')`' → logprob: -14.62519645690918
    10. '),' → logprob: -15.25019645690918

Token 71: '1' (ID: 16)
  Prédit: '1'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '1' → logprob: -0.0041540260426700115
    2. '2' → logprob: -5.504154205322266
    3. ' ' → logprob: -9.754154205322266
    4. '0' → logprob: -11.754154205322266
    5. '3' → logprob: -12.129154205322266
    6. '<|end|>' → logprob: -14.754154205322266
    7. '4' → logprob: -14.941654205322266
    8. '   ' → logprob: -15.129154205322266
    9. '23' → logprob: -15.129154205322266
    10. '5' → logprob: -15.379154205322266

Token 72: ');' (ID: 2245)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ')' → logprob: -0.00015407454338856041
    2. ' )' → logprob: -9.000154495239258
    3. ')
' → logprob: -10.625154495239258
    4. '')' → logprob: -13.500154495239258
    5. 'else' → logprob: -13.750154495239258
    6. '))' → logprob: -14.000154495239258
    7. ' else' → logprob: -14.500154495239258
    8. ')#' → logprob: -14.875154495239258
    9. ')

' → logprob: -15.000154495239258
    10. '+' → logprob: -15.375154495239258

Token 73: ' quit' (ID: 27737)
  Prédit: ' else'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' else' → logprob: -0.5785697102546692
    2. 'else' → logprob: -0.8285697102546692
    3. 'print' → logprob: -6.5785698890686035
    4. '<|end|>' → logprob: -7.5785698890686035
    5. ' ' → logprob: -8.328569412231445
    6. ' print' → logprob: -8.828569412231445
    7. 'elif' → logprob: -9.078569412231445
    8. ' elif' → logprob: -9.328569412231445
    9. '
' → logprob: -9.953569412231445
    10. ')' → logprob: -11.203569412231445

Token 74: '()

' (ID: 5874)
  Prédit: '
'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '
' → logprob: -0.08099451661109924
    2. 'else' → logprob: -2.9559946060180664
    3. '<|end|>' → logprob: -4.830994606018066
    4. 'print' → logprob: -4.955994606018066
    5. 'elif' → logprob: -6.205994606018066
    6. 'number' → logprob: -6.205994606018066
    7. '
' → logprob: -6.330994606018066
    8. 'if' → logprob: -6.705994606018066
    9. '  
' → logprob: -7.330994606018066
    10. ' else' → logprob: -7.330994606018066

Token 75: 'result' (ID: 2521)
  Prédit: 'else'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'else' → logprob: -1.0723061561584473
    2. 'print' → logprob: -1.1973061561584473
    3. 'number' → logprob: -2.3223061561584473
    4. 'if' → logprob: -2.3223061561584473
    5. 'for' → logprob: -2.5723061561584473
    6. 'while' → logprob: -2.9473061561584473
    7. 'elif' → logprob: -3.9473061561584473
    8. 'n' → logprob: -5.947306156158447
    9. '
' → logprob: -6.072306156158447
    10. 'idx' → logprob: -6.822306156158447

Token 76: ' =' (ID: 314)
  Prédit: ' ='
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' =' → logprob: -0.012784150429069996
    2. '=' → logprob: -4.387784004211426
    3. 's' → logprob: -8.637784004211426
    4. '_' → logprob: -9.512784004211426
    5. ' +=' → logprob: -12.262784004211426
    6. ' ' → logprob: -12.387784004211426
    7. ',' → logprob: -12.887784004211426
    8. '1' → logprob: -13.762784004211426
    9. ':' → logprob: -13.887784004211426
    10. ' ' → logprob: -14.012784004211426

Token 77: ' number' (ID: 2086)
  Prédit: 'number'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'number' → logprob: -0.12987419962882996
    2. '1' → logprob: -3.0048742294311523
    3. '0' → logprob: -3.2548742294311523
    4. '[]' → logprob: -4.129874229431152
    5. '2' → logprob: -4.629874229431152
    6. '[number' → logprob: -6.004874229431152
    7. '[' → logprob: -6.379874229431152
    8. 'float' → logprob: -6.504874229431152
    9. '(number' → logprob: -8.004874229431152
    10. ' number' → logprob: -8.004874229431152

Token 78: '
' (ID: 198)
  Prédit: '+'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '+' → logprob: -0.06236615031957626
    2. '-' → logprob: -3.062366247177124
    3. ' +' → logprob: -4.437366008758545
    4. ' -' → logprob: -6.437366008758545
    5. ' ' → logprob: -9.437366485595703
    6. '+=' → logprob: -9.812366485595703
    7. ' +=' → logprob: -10.687366485595703
    8. '1' → logprob: -11.187366485595703
    9. '<|end|>' → logprob: -11.187366485595703
    10. '```' → logprob: -11.437366485595703

Token 79: 'for' (ID: 1938)
  Prédit: '-'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '-' → logprob: -0.30697816610336304
    2. '+' → logprob: -1.4319782257080078
    3. ' -' → logprob: -3.806978225708008
    4. ' +' → logprob: -6.056978225708008
    5. 'while' → logprob: -8.681978225708008
    6. '+=' → logprob: -8.681978225708008
    7. ' while' → logprob: -8.806978225708008
    8. ' -=' → logprob: -9.931978225708008
    9. '1' → logprob: -10.056978225708008
    10. ' +=' → logprob: -10.056978225708008

Token 80: ' d' (ID: 272)
  Prédit: ' i'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' i' → logprob: -0.009806263260543346
    2. ' _' → logprob: -5.259806156158447
    3. ' num' → logprob: -6.384806156158447
    4. '_' → logprob: -7.509806156158447
    5. 'i' → logprob: -7.509806156158447
    6. ' idx' → logprob: -8.259806632995605
    7. ' range' → logprob: -8.259806632995605
    8. ' candidate' → logprob: -8.384806632995605
    9. ' x' → logprob: -8.509806632995605
    10. ' n' → logprob: -8.634806632995605

Token 81: ' in' (ID: 306)
  Prédit: ' in'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' in' → logprob: -0.0015734256012365222
    2. 'in' → logprob: -7.00157356262207
    3. 'ef' → logprob: -7.75157356262207
    4. ' ' → logprob: -8.75157356262207
    5. 'd' → logprob: -11.50157356262207
    6. 'f' → logprob: -11.87657356262207
    7. 'e' → logprob: -11.87657356262207
    8. 'ivid' → logprob: -12.00157356262207
    9. 'efa' → logprob: -12.50157356262207
    10. '  ' → logprob: -12.75157356262207

Token 82: ' range' (ID: 3352)
  Prédit: ' range'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' range' → logprob: -0.023299867287278175
    2. 'range' → logprob: -3.7732999324798584
    3. '(range' → logprob: -10.898300170898438
    4. ' ' → logprob: -11.523300170898438
    5. '	range' → logprob: -11.648300170898438
    6. '[' → logprob: -12.148300170898438
    7. ' xrange' → logprob: -12.773300170898438
    8. '   ' → logprob: -13.523300170898438
    9. 'rang' → logprob: -13.960800170898438
    10. ' ' → logprob: -14.023300170898438

Token 83: '(' (ID: 7)
  Prédit: '('
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(' → logprob: -8.828512363834307e-05
    2. ' (' → logprob: -9.875088691711426
    3. '(result' → logprob: -10.875088691711426
    4. '(number' → logprob: -11.500088691711426
    5. '(-' → logprob: -12.875088691711426
    6. '((' → logprob: -13.125088691711426
    7. ' ' → logprob: -13.500088691711426
    8. '2' → logprob: -14.750088691711426
    9. 'result' → logprob: -15.750088691711426
    10. '(int' → logprob: -15.750088691711426

Token 84: '2' (ID: 17)
  Prédit: '2'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '2' → logprob: -0.013878691010177135
    2. '1' → logprob: -5.01387882232666
    3. 'number' → logprob: -5.38887882232666
    4. ' ' → logprob: -6.88887882232666
    5. 'result' → logprob: -6.88887882232666
    6. 'int' → logprob: -8.13887882232666
    7. '(' → logprob: -9.63887882232666
    8. ')' → logprob: -10.38887882232666
    9. '3' → logprob: -10.38887882232666
    10. ' number' → logprob: -10.51387882232666

Token 85: ',' (ID: 11)
  Prédit: ','
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ',' → logprob: -0.01834332011640072
    2. ' ,' → logprob: -4.018343448638916
    3. ',result' → logprob: -8.768342971801758
    4. ',int' → logprob: -10.518342971801758
    5. ',num' → logprob: -12.268342971801758
    6. ',n' → logprob: -13.143342971801758
    7. ',d' → logprob: -13.518342971801758
    8. ' ' → logprob: -14.518342971801758
    9. 'number' → logprob: -14.643342971801758
    10. ',(' → logprob: -14.768342971801758

Token 86: ' ' (ID: 220)
  Prédit: 'int'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'int' → logprob: -0.7502464652061462
    2. 'number' → logprob: -0.8752464652061462
    3. 'result' → logprob: -2.750246524810791
    4. ' int' → logprob: -3.625246524810791
    5. ' number' → logprob: -4.000246524810791
    6. ' result' → logprob: -6.375246524810791
    7. ' ' → logprob: -9.250246047973633
    8. '(int' → logprob: -9.250246047973633
    9. '(number' → logprob: -10.000246047973633
    10. '   ' → logprob: -10.500246047973633

Token 87: '1' (ID: 16)
  Prédit: 'number'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'number' → logprob: -0.46759986877441406
    2. 'int' → logprob: -1.092599868774414
    3. 'result' → logprob: -3.342599868774414
    4. ' number' → logprob: -7.092599868774414
    5. ' int' → logprob: -7.092599868774414
    6. '(' → logprob: -8.342599868774414
    7. '(number' → logprob: -8.967599868774414
    8. '100' → logprob: -9.092599868774414
    9. 'sqrt' → logprob: -9.092599868774414
    10. '(int' → logprob: -9.217599868774414

Token 88: '+' (ID: 10)
  Prédit: ','
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ',' → logprob: -0.019792422652244568
    2. ' ,' → logprob: -4.769792556762695
    3. ' +' → logprob: -5.269792556762695
    4. '+' → logprob: -5.394792556762695
    5. ',int' → logprob: -7.019792556762695
    6. '0' → logprob: -7.769792556762695
    7. 'number' → logprob: -10.394792556762695
    8. 'int' → logprob: -10.769792556762695
    9. '1' → logprob: -11.394792556762695
    10. '00' → logprob: -11.519792556762695

Token 89: 'int' (ID: 491)
  Prédit: 'int'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'int' → logprob: -0.7461131811141968
    2. 'number' → logprob: -0.7461131811141968
    3. 'result' → logprob: -3.2461133003234863
    4. ' int' → logprob: -4.996113300323486
    5. ' number' → logprob: -5.371113300323486
    6. 'sqrt' → logprob: -7.496113300323486
    7. ' result' → logprob: -8.496112823486328
    8. '(int' → logprob: -9.246112823486328
    9. '(' → logprob: -9.621112823486328
    10. ' ' → logprob: -9.871112823486328

Token 90: '(s' (ID: 1858)
  Prédit: '(s'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(s' → logprob: -0.018364621326327324
    2. '(' → logprob: -4.018364429473877
    3. ' (' → logprob: -8.893364906311035
    4. 'sqrt' → logprob: -9.768364906311035
    5. '((' → logprob: -12.518364906311035
    6. 's' → logprob: -12.518364906311035
    7. '(number' → logprob: -12.643364906311035
    8. '(
' → logprob: -12.768364906311035
    9. ' sqrt' → logprob: -13.393364906311035
    10. '(square' → logprob: -13.768364906311035

Token 91: 'qrt' (ID: 17629)
  Prédit: 'qrt'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'qrt' → logprob: -5.438573680294212e-06
    2. 'sqrt' → logprob: -12.250005722045898
    3. 'q' → logprob: -14.500005722045898
    4. 'rt' → logprob: -16.7500057220459
    5. 'qt' → logprob: -17.5000057220459
    6. 'qr' → logprob: -17.7500057220459
    7. 'r' → logprob: -17.7500057220459
    8. '```' → logprob: -18.1250057220459
    9. 'qart' → logprob: -18.6250057220459
    10. '.sqrt' → logprob: -18.7500057220459

Token 92: '(number' (ID: 32955)
  Prédit: '(number'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(number' → logprob: -0.003306277794763446
    2. '(' → logprob: -5.7533063888549805
    3. '(num' → logprob: -9.25330638885498
    4. '(result' → logprob: -11.25330638885498
    5. ' (' → logprob: -12.00330638885498
    6. '(n' → logprob: -12.25330638885498
    7. 'number' → logprob: -12.62830638885498
    8. '(
' → logprob: -13.37830638885498
    9. ')' → logprob: -13.87830638885498
    10. ' number' → logprob: -14.12830638885498

Token 93: '))' (ID: 915)
  Prédit: '))'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '))' → logprob: -0.011147208511829376
    2. ')):' → logprob: -5.2611470222473145
    3. '()))' → logprob: -5.7611470222473145
    4. ')' → logprob: -6.7611470222473145
    5. '(' → logprob: -7.2611470222473145
    6. ' ))' → logprob: -8.636147499084473
    7. ')))' → logprob: -8.761147499084473
    8. '))+' → logprob: -8.886147499084473
    9. ')));' → logprob: -9.136147499084473
    10. '))))' → logprob: -9.886147499084473

Token 94: '):
' (ID: 1883)
  Prédit: '):'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '):' → logprob: -0.16105970740318298
    2. '):
' → logprob: -1.9110597372055054
    3. '+' → logprob: -7.661059856414795
    4. '):
' → logprob: -8.411059379577637
    5. ':' → logprob: -9.911059379577637
    6. ')' → logprob: -10.411059379577637
    7. '):

' → logprob: -11.036059379577637
    8. '():' → logprob: -11.411059379577637
    9. ' ):' → logprob: -11.411059379577637
    10. '():
' → logprob: -11.786059379577637

Token 95: '   ' (ID: 271)
  Prédit: ':'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ':' → logprob: -0.2738783657550812
    2. '   ' → logprob: -1.7738783359527588
    3. ':
' → logprob: -3.273878335952759
    4. ' if' → logprob: -3.648878335952759
    5. ' ' → logprob: -5.648878574371338
    6. 'if' → logprob: -7.148878574371338
    7. '  ' → logprob: -8.27387809753418
    8. ',' → logprob: -8.39887809753418
    9. '<|end|>' → logprob: -8.52387809753418
    10. '	if' → logprob: -9.02387809753418

Token 96: ' if' (ID: 538)
  Prédit: ' if'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' if' → logprob: -0.1536450833082199
    2. ' ' → logprob: -2.1536450386047363
    3. '       ' → logprob: -5.028645038604736
    4. '    ' → logprob: -5.153645038604736
    5. 'if' (adapté à ' if') → logprob: -5.403645038604736
    6. '   ' → logprob: -5.653645038604736
    7. ' while' → logprob: -5.778645038604736
    8. '	if' → logprob: -7.153645038604736
    9. ' ' → logprob: -7.778645038604736
    10. ' 
' → logprob: -7.778645038604736

Token 97: ' not' (ID: 625)
  Prédit: ' number'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' number' → logprob: -0.1723550260066986
    2. ' result' → logprob: -2.7973549365997314
    3. 'number' → logprob: -2.7973549365997314
    4. ' check' → logprob: -3.6723549365997314
    5. 'result' → logprob: -4.6723551750183105
    6. 'check' → logprob: -7.0473551750183105
    7. ' ' → logprob: -8.047354698181152
    8. ' not' → logprob: -8.172354698181152
    9. ' d' → logprob: -9.797354698181152
    10. 'd' → logprob: -10.297354698181152

Token 98: ' number' (ID: 2086)
  Prédit: 'check'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'check' → logprob: -0.6789690256118774
    2. ' check' → logprob: -0.8039690256118774
    3. 'number' → logprob: -3.678968906402588
    4. ' number' → logprob: -4.428968906402588
    5. '(check' → logprob: -5.803968906402588
    6. 'result' → logprob: -6.053968906402588
    7. ' result' → logprob: -7.053968906402588
    8. '(number' → logprob: -7.678968906402588
    9. ' (' → logprob: -7.803968906402588
    10. ' d' → logprob: -7.803968906402588

Token 99: '%d' (ID: 34150)
  Prédit: ' %'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' %' → logprob: -0.5234192609786987
    2. '%' → logprob: -0.8984192609786987
    3. ' ' → logprob: -8.273419380187988
    4. '%d' → logprob: -10.523419380187988
    5. ' ' → logprob: -11.898419380187988
    6. '%i' → logprob: -13.523419380187988
    7. '%x' → logprob: -13.898419380187988
    8. '%s' → logprob: -14.273419380187988
    9. '<|end|>' → logprob: -14.273419380187988
    10. '%e' → logprob: -14.398419380187988

Token 100: ':
' (ID: 734)
  Prédit: ':'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ':' → logprob: -0.49903371930122375
    2. '==' → logprob: -0.9990336894989014
    3. ' ==' → logprob: -4.1240339279174805
    4. '=' → logprob: -6.1240339279174805
    5. '<|end|>' → logprob: -6.2490339279174805
    6. ' and' → logprob: -6.3740339279174805
    7. ' :' → logprob: -7.1240339279174805
    8. '0' → logprob: -7.4990339279174805
    9. '<|end|>' → logprob: -8.24903392791748
    10. 'and' → logprob: -8.24903392791748

Token 101: '       ' (ID: 309)
  Prédit: ' and'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' and' → logprob: -0.6251951456069946
    2. '       ' → logprob: -1.6251951456069946
    3. '   ' → logprob: -2.000195026397705
    4. ':' → logprob: -3.250195026397705
    5. ' result' → logprob: -3.250195026397705
    6. 'result' → logprob: -3.375195026397705
    7. 'and' → logprob: -5.000195026397705
    8. ':
' → logprob: -5.250195026397705
    9. ' if' → logprob: -5.500195026397705
    10. 'if' → logprob: -6.875195026397705

Token 102: ' t' (ID: 260)
  Prédit: 'if'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'if' → logprob: -0.40188005566596985
    2. 'result' → logprob: -1.5268800258636475
    3. 'while' → logprob: -2.5268800258636475
    4. 'other' → logprob: -5.276880264282227
    5. '           ' → logprob: -5.651880264282227
    6. '       ' → logprob: -5.776880264282227
    7. 'q' → logprob: -6.151880264282227
    8. ' if' → logprob: -6.276880264282227
    9. 'res' → logprob: -6.526880264282227
    10. 'a' → logprob: -6.526880264282227

Token 103: '1' (ID: 16)
  Prédit: ' ='
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' =' → logprob: -0.7646796107292175
    2. 'emp' → logprob: -0.7646796107292175
    3. 'mp' → logprob: -3.6396796703338623
    4. '=' → logprob: -4.014679431915283
    5. 'est' → logprob: -5.139679431915283
    6. 'r' → logprob: -5.389679431915283
    7. '=result' → logprob: -5.764679431915283
    8. 'arget' → logprob: -6.014679431915283
    9. 'em' → logprob: -6.514679431915283
    10. 'result' → logprob: -6.639679431915283

Token 104: ' =' (ID: 314)
  Prédit: ' ='
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' =' → logprob: -0.04511173069477081
    2. '=' → logprob: -3.170111656188965
    3. '=result' → logprob: -6.795111656188965
    4. ',' → logprob: -7.420111656188965
    5. 'emp' → logprob: -8.545111656188965
    6. 'mp' → logprob: -10.170111656188965
    7. ',result' → logprob: -10.170111656188965
    8. 'result' → logprob: -10.170111656188965
    9. ' ' → logprob: -10.420111656188965
    10. '=num' → logprob: -11.670111656188965

Token 105: ' number' (ID: 2086)
  Prédit: 'number'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'number' → logprob: -0.6080695986747742
    2. 'd' → logprob: -0.8580695986747742
    3. 'check' → logprob: -4.23306941986084
    4. 'result' → logprob: -4.60806941986084
    5. ' number' → logprob: -5.48306941986084
    6. ' d' → logprob: -6.48306941986084
    7. ' check' → logprob: -7.98306941986084
    8. 'int' → logprob: -8.23306941986084
    9. 'max' → logprob: -8.98306941986084
    10. 'num' → logprob: -9.23306941986084

Token 106: '//' (ID: 393)
  Prédit: '//'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '//' → logprob: -0.40642186999320984
    2. ' //' → logprob: -1.4064218997955322
    3. '-' → logprob: -3.4064218997955322
    4. 'd' → logprob: -3.7814218997955322
    5. ' -' → logprob: -4.906421661376953
    6. '-d' → logprob: -5.031421661376953
    7. '
' → logprob: -5.156421661376953
    8. ' ' → logprob: -5.406421661376953
    9. '#' → logprob: -6.656421661376953
    10. '/d' → logprob: -6.781421661376953

Token 107: 'd' (ID: 67)
  Prédit: 'd'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'd' → logprob: -1.981667537620524e-06
    2. ' d' → logprob: -13.250001907348633
    3. ' ' → logprob: -17.250001907348633
    4. '2' → logprob: -17.375001907348633
    5. '   ' → logprob: -18.500001907348633
    6. '  ' → logprob: -18.875001907348633
    7. 'idx' → logprob: -19.000001907348633
    8. '	d' → logprob: -20.000001907348633
    9. '       ' → logprob: -20.375001907348633
    10. 'div' → logprob: -20.375001907348633

Token 108: ' if' (ID: 538)
  Prédit: '       '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '       ' → logprob: -0.8824446201324463
    2. 't' → logprob: -1.5074446201324463
    3. '
' → logprob: -2.1324446201324463
    4. '-' → logprob: -2.3824446201324463
    5. ' if' → logprob: -2.8824446201324463
    6. 'if' → logprob: -3.0074446201324463
    7. ' -' → logprob: -4.132444381713867
    8. '        
' → logprob: -4.382444381713867
    9. ' t' → logprob: -5.007444381713867
    10. 'while' → logprob: -5.632444381713867

Token 109: ' hasattr' (ID: 75562)
  Prédit: 'd'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'd' → logprob: -0.7408645153045654
    2. 'check' → logprob: -1.1158645153045654
    3. ' check' → logprob: -2.4908645153045654
    4. 'number' → logprob: -2.7408645153045654
    5. ' d' → logprob: -3.6158645153045654
    6. ' number' → logprob: -4.7408647537231445
    7. '(check' → logprob: -5.2408647537231445
    8. 'not' → logprob: -6.4908647537231445
    9. '(number' → logprob: -6.7408647537231445
    10. ' (' → logprob: -6.8658647537231445

Token 110: '(number' (ID: 32955)
  Prédit: '(number'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(number' → logprob: -0.3169524371623993
    2. '(d' → logprob: -2.1919524669647217
    3. '(' → logprob: -2.6919524669647217
    4. '(result' → logprob: -3.0669524669647217
    5. '(t' → logprob: -4.066952228546143
    6. '(object' → logprob: -4.691952228546143
    7. '(int' → logprob: -5.191952228546143
    8. '(check' → logprob: -5.316952228546143
    9. '(div' → logprob: -5.816952228546143
    10. '(float' → logprob: -6.691952228546143

Token 111: ',' (ID: 11)
  Prédit: ','
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ',' → logprob: -0.06871628761291504
    2. ' ,' → logprob: -3.818716287612915
    3. ''' → logprob: -4.443716049194336
    4. ','' → logprob: -4.568716049194336
    5. ' '' → logprob: -5.943716049194336
    6. ' and' → logprob: -6.318716049194336
    7. ' ' → logprob: -6.443716049194336
    8. ''s' → logprob: -6.443716049194336
    9. 'and' → logprob: -6.693716049194336
    10. '"' → logprob: -6.693716049194336

Token 112: ' '__' (ID: 28278)
  Prédit: '''
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ''' → logprob: -0.18285804986953735
    2. '"' → logprob: -2.3078579902648926
    3. ''d' → logprob: -2.8078579902648926
    4. ''t' → logprob: -5.932857990264893
    5. ''s' → logprob: -7.307857990264893
    6. ''int' → logprob: -7.432857990264893
    7. ''f' → logprob: -7.682857990264893
    8. ''re' → logprob: -7.682857990264893
    9. ''m' → logprob: -8.05785846710205
    10. ''value' → logprob: -8.43285846710205

Token 113: 'flo' (ID: 174761)
  Prédit: 'flo'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'flo' → logprob: -0.03791248798370361
    2. 'tr' → logprob: -3.412912368774414
    3. 'int' → logprob: -5.912912368774414
    4. 'index' → logprob: -7.787912368774414
    5. 'mod' → logprob: -7.787912368774414
    6. 'f' → logprob: -8.537912368774414
    7. 'float' → logprob: -8.787912368774414
    8. 'floor' → logprob: -9.162912368774414
    9. 'div' → logprob: -9.412912368774414
    10. 'pow' → logprob: -10.037912368774414

Token 114: 'ord' (ID: 604)
  Prédit: 'ord'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'ord' → logprob: -0.3878985047340393
    2. 'or' → logprob: -1.1378984451293945
    3. 'r' → logprob: -7.1378984451293945
    4. 'orm' → logprob: -8.762898445129395
    5. 'ur' → logprob: -10.262898445129395
    6. 'at' → logprob: -10.762898445129395
    7. 'oor' → logprob: -12.387898445129395
    8. 'ors' → logprob: -12.512898445129395
    9. 'ar' → logprob: -12.887898445129395
    10. 'orld' → logprob: -13.262898445129395

Token 115: 'iv' (ID: 349)
  Prédit: 'iv'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'iv' → logprob: -7.183501293184236e-05
    2. '__' → logprob: -10.50007152557373
    3. 'div' → logprob: -11.00007152557373
    4. 'v' → logprob: -11.87507152557373
    5. '_div' → logprob: -12.00007152557373
    6. 'vision' → logprob: -12.50007152557373
    7. 'Div' → logprob: -13.50007152557373
    8. 'ivid' → logprob: -13.87507152557373
    9. 'r' → logprob: -13.87507152557373
    10. '
' → logprob: -14.25007152557373

Token 116: '__' (ID: 771)
  Prédit: '__'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '__' → logprob: -2.1008713702030946e-06
    2. '')' → logprob: -13.750001907348633
    3. '_' → logprob: -15.250001907348633
    4. '__('' → logprob: -15.250001907348633
    5. '___' → logprob: -15.375001907348633
    6. '__)' → logprob: -16.500001907348633
    7. '__':
' → logprob: -16.875001907348633
    8. '__
' → logprob: -17.125001907348633
    9. '__(' → logprob: -17.625001907348633
    10. '__("' → logprob: -18.625001907348633

Token 117: '')' (ID: 1542)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')' → logprob: -0.11097487807273865
    2. '')' → logprob: -2.3609747886657715
    3. 'else' → logprob: -5.1109747886657715
    4. ' else' → logprob: -6.2359747886657715
    5. ' )' → logprob: -6.6109747886657715
    6. ' ' → logprob: -8.11097526550293
    7. '__' → logprob: -8.36097526550293
    8. 'and' → logprob: -8.61097526550293
    9. '()' → logprob: -9.23597526550293
    10. '__)' → logprob: -9.36097526550293

Token 118: ' else' (ID: 1203)
  Prédit: ' else'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' else' → logprob: -0.4797495901584625
    2. 'else' → logprob: -0.9797495603561401
    3. '()' → logprob: -5.35474967956543
    4. '       ' → logprob: -7.97974967956543
    5. 'and' → logprob: -9.10474967956543
    6. ' and' → logprob: -9.10474967956543
    7. ' ' → logprob: -9.35474967956543
    8. '        ' → logprob: -9.47974967956543
    9. '           ' → logprob: -9.97974967956543
    10. '         ' → logprob: -10.97974967956543

Token 119: ' number' (ID: 2086)
  Prédit: 'number'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'number' → logprob: -0.06129990145564079
    2. 'int' → logprob: -3.0612998008728027
    3. ' number' → logprob: -4.686299800872803
    4. 'div' → logprob: -6.686299800872803
    5. '(number' → logprob: -7.061299800872803
    6. ' int' → logprob: -7.811299800872803
    7. 'd' → logprob: -8.186300277709961
    8. 'float' → logprob: -8.311300277709961
    9. '(int' → logprob: -9.186300277709961
    10. 'None' → logprob: -10.311300277709961

Token 120: '/d' (ID: 6662)
  Prédit: '/d'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '/d' → logprob: -0.20580987632274628
    2. '/' → logprob: -2.3308098316192627
    3. '//' → logprob: -2.8308098316192627
    4. ' /' → logprob: -3.7058098316192627
    5. ' //' → logprob: -5.955810070037842
    6. 'd' → logprob: -7.580810070037842
    7. '/div' → logprob: -7.955810070037842
    8. '/t' → logprob: -8.830809593200684
    9. '#' → logprob: -8.893309593200684
    10. ' ' → logprob: -8.955809593200684

Token 121: '
' (ID: 198)
  Prédit: '
'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '
' → logprob: -0.7061277031898499
    2. '       ' → logprob: -0.8311277031898499
    3. 't' → logprob: -3.456127643585205
    4. '        
' → logprob: -4.206127643585205
    5. '
' → logprob: -4.956127643585205
    6. ' t' → logprob: -5.581127643585205
    7. 'else' → logprob: -6.206127643585205
    8. ' 
' → logprob: -6.456127643585205
    9. '<|end|>' → logprob: -6.831127643585205
    10. '1' → logprob: -7.206127643585205

Token 122: '       ' (ID: 309)
  Prédit: '       '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '       ' → logprob: -0.008575568906962872
    2. 't' → logprob: -5.383575439453125
    3. '<|end|>' → logprob: -6.383575439453125
    4. '        
' → logprob: -7.008575439453125
    5. 'if' → logprob: -7.883575439453125
    6. ' t' → logprob: -7.883575439453125
    7. ' if' → logprob: -8.883575439453125
    8. '
' → logprob: -9.383575439453125
    9. ',' → logprob: -10.008575439453125
    10. '<|end|>' → logprob: -10.133575439453125

Token 123: ' t' (ID: 260)
  Prédit: 'if'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'if' → logprob: -0.5203893780708313
    2. 't' (adapté à ' t') → logprob: -1.2703893184661865
    3. '       ' → logprob: -2.7703893184661865
    4. ' if' → logprob: -2.8953893184661865
    5. ' t' → logprob: -5.645389556884766
    6. 'result' → logprob: -6.270389556884766
    7. 'while' → logprob: -8.145389556884766
    8. 'for' → logprob: -8.520389556884766
    9. '        
' → logprob: -8.520389556884766
    10. '
' → logprob: -8.645389556884766

Token 124: '2' (ID: 17)
  Prédit: '2'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '2' → logprob: -0.02438264898955822
    2. '1' → logprob: -3.7743825912475586
    3. '0' → logprob: -7.899382591247559
    4. 'result' → logprob: -8.274382591247559
    5. '=' → logprob: -8.524382591247559
    6. '_' → logprob: -9.399382591247559
    7. ' =' → logprob: -9.899382591247559
    8. 't' → logprob: -10.399382591247559
    9. 'f' → logprob: -10.524382591247559
    10. '_result' → logprob: -10.649382591247559

Token 125: ' =' (ID: 314)
  Prédit: ' ='
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' =' → logprob: -0.12695015966892242
    2. '=' → logprob: -2.126950263977051
    3. ' ' → logprob: -11.00195026397705
    4. ' ' → logprob: -12.75195026397705
    5. ' =
' → logprob: -14.75195026397705
    6. 's' → logprob: -15.12695026397705
    7. '	' → logprob: -15.25195026397705
    8. ',' → logprob: -15.25195026397705
    9. ')' → logprob: -15.87695026397705
    10. '=

' → logprob: -15.87695026397705

Token 126: ' d' (ID: 272)
  Prédit: 'd'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'd' → logprob: -0.08213170617818832
    2. 'number' → logprob: -3.0821316242218018
    3. ' d' → logprob: -3.5821316242218018
    4. ' number' → logprob: -5.957131862640381
    5. 'result' → logprob: -6.707131862640381
    6. 'check' → logprob: -7.707131862640381
    7. '        ' → logprob: -8.082131385803223
    8. ' check' → logprob: -9.332131385803223
    9. '       ' → logprob: -9.332131385803223
    10. ' ' → logprob: -9.332131385803223

Token 127: '
' (ID: 198)
  Prédit: ''
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False

Token 128: '       ' (ID: 309)
  Prédit: '
'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '
' → logprob: -0.7320269346237183
    2. '       ' → logprob: -0.7320269346237183
    3. '        
' → logprob: -3.732027053833008
    4. ' if' → logprob: -5.107027053833008
    5. 'if' → logprob: -5.982027053833008
    6. ' 
' → logprob: -6.107027053833008
    7. '<|end|>' → logprob: -6.857027053833008
    8. '  
' → logprob: -7.857027053833008
    9. '    
' → logprob: -7.982027053833008
    10. '   ' → logprob: -8.107027053833008

Token 129: ' r' (ID: 428)
  Prédit: 'if'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'if' → logprob: -0.04346703737974167
    2. 'while' → logprob: -3.9184670448303223
    3. 'result' → logprob: -4.543467044830322
    4. ' if' → logprob: -4.918467044830322
    5. 'for' → logprob: -6.418467044830322
    6. 'count' → logprob: -7.543467044830322
    7. '       ' → logprob: -7.793467044830322
    8. '
' → logprob: -7.918467044830322
    9. '        
' → logprob: -8.043466567993164
    10. 'break' → logprob: -8.168466567993164

Token 130: ' =' (ID: 314)
  Prédit: 'es'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'es' → logprob: -0.03429834917187691
    2. '1' → logprob: -3.5342984199523926
    3. ' =' → logprob: -6.034298419952393
    4. '=' → logprob: -7.284298419952393
    5. 'e' → logprob: -7.659298419952393
    6. 's' → logprob: -8.409297943115234
    7. 'result' → logprob: -9.409297943115234
    8. '2' → logprob: -9.409297943115234
    9. 'esu' → logprob: -9.409297943115234
    10. ' es' → logprob: -10.034297943115234

Token 131: ' [' (ID: 723)
  Prédit: 'result'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'result' → logprob: -0.9257993102073669
    2. 't' → logprob: -1.4257993698120117
    3. 'max' → logprob: -2.4257993698120117
    4. 'check' → logprob: -3.3007993698120117
    5. 'min' → logprob: -3.3007993698120117
    6. ' result' → logprob: -3.3007993698120117
    7. 'number' → logprob: -3.4257993698120117
    8. ' max' → logprob: -3.5507993698120117
    9. ' t' → logprob: -3.8007993698120117
    10. ' check' → logprob: -4.175799369812012

Token 132: 'result' (ID: 2521)
  Prédit: 't'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 't' → logprob: -0.21271100640296936
    2. 'check' → logprob: -2.8377110958099365
    3. 'result' → logprob: -2.9627110958099365
    4. 'x' → logprob: -3.7127110958099365
    5. 'int' → logprob: -4.462710857391357
    6. ']' → logprob: -4.962710857391357
    7. ' t' → logprob: -4.962710857391357
    8. '           ' → logprob: -5.212710857391357
    9. 'number' → logprob: -5.337710857391357
    10. '0' → logprob: -5.462710857391357

Token 133: ',' (ID: 11)
  Prédit: ','
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ',' → logprob: -0.41875678300857544
    2. ']' → logprob: -1.1687567234039307
    3. '-' → logprob: -4.04375696182251
    4. ' -' → logprob: -5.54375696182251
    5. ',
' → logprob: -5.91875696182251
    6. ' ,' → logprob: -6.29375696182251
    7. ' for' → logprob: -7.16875696182251
    8. 't' → logprob: -7.54375696182251
    9. ']
' → logprob: -7.54375696182251
    10. ',t' → logprob: -7.54375696182251

Token 134: ' t' (ID: 260)
  Prédit: ' result'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' result' → logprob: -1.0096800327301025
    2. ' t' → logprob: -1.1346800327301025
    3. 'result' → logprob: -1.8846800327301025
    4. 't' → logprob: -2.2596800327301025
    5. ' number' → logprob: -3.6346800327301025
    6. 'number' → logprob: -5.009679794311523
    7. 'r' → logprob: -5.009679794311523
    8. ' ' → logprob: -5.384679794311523
    9. ' check' → logprob: -5.634679794311523
    10. ' r' → logprob: -5.759679794311523

Token 135: '1' (ID: 16)
  Prédit: '1'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '1' → logprob: -0.00038384052459150553
    2. '2' → logprob: -8.500383377075195
    3. '-' → logprob: -9.000383377075195
    4. ' -' → logprob: -11.125383377075195
    5. '//' → logprob: -11.125383377075195
    6. '```' → logprob: -12.312883377075195
    7. 't' → logprob: -13.250383377075195
    8. ' //' → logprob: -13.500383377075195
    9. 'result' → logprob: -13.500383377075195
    10. 'r' → logprob: -13.687883377075195

Token 136: '+t' (ID: 146668)
  Prédit: ','
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ',' → logprob: -0.03573087602853775
    2. '-' → logprob: -3.6607308387756348
    3. ',t' → logprob: -5.160730838775635
    4. ' ,' → logprob: -6.910730838775635
    5. '+' → logprob: -7.285730838775635
    6. ' -' → logprob: -7.285730838775635
    7. ']' → logprob: -7.910730838775635
    8. '+t' → logprob: -8.410731315612793
    9. ',
' → logprob: -8.910731315612793
    10. ',r' → logprob: -9.035731315612793

Token 137: '2' (ID: 17)
  Prédit: '2'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '2' → logprob: -2.045823566731997e-05
    2. '-' → logprob: -12.375020027160645
    3. 'r' → logprob: -12.500020027160645
    4. '```' → logprob: -12.750020027160645
    5. '1' → logprob: -13.625020027160645
    6. 'result' → logprob: -13.750020027160645
    7. '_' → logprob: -13.875020027160645
    8. '_result' → logprob: -14.125020027160645
    9. '₂' → logprob: -14.250020027160645
    10. '   ' → logprob: -14.562520027160645

Token 138: ']
' (ID: 1592)
  Prédit: ']'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ']' → logprob: -0.40036389231681824
    2. '-' → logprob: -1.2753639221191406
    3. ' -' → logprob: -3.9003639221191406
    4. ']
' → logprob: -4.025363922119141
    5. ' ]' → logprob: -5.525363922119141
    6. ',' → logprob: -5.650363922119141
    7. '-n' → logprob: -6.525363922119141
    8. '-min' → logprob: -6.650363922119141
    9. ']

' → logprob: -7.400363922119141
    10. ' ]
' → logprob: -8.15036392211914

Token 139: '       ' (ID: 309)
  Prédit: '
'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '
' → logprob: -0.3878193497657776
    2. 'result' → logprob: -1.3878192901611328
    3. '[' → logprob: -3.637819290161133
    4. '.sort' → logprob: -4.012819290161133
    5. 'min' → logprob: -4.387819290161133
    6. '[result' → logprob: -5.012819290161133
    7. '[min' → logprob: -6.512819290161133
    8. '.min' → logprob: -6.637819290161133
    9. ')' → logprob: -7.137819290161133
    10. ')
' → logprob: -7.387819290161133

Token 140: ' result' (ID: 1534)
  Prédit: 'result'
  Correct (stricte): False
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'result' (adapté à ' result') → logprob: -0.07402347773313522
    2. 'min' → logprob: -3.324023485183716
    3. 'r' → logprob: -3.699023485183716
    4. ']' → logprob: -5.949023246765137
    5. '[result' → logprob: -6.324023246765137
    6. '       ' → logprob: -6.949023246765137
    7. '        
' → logprob: -6.949023246765137
    8. ' result' → logprob: -7.074023246765137
    9. '.min' → logprob: -7.574023246765137
    10. '.' → logprob: -7.824023246765137

Token 141: ' =' (ID: 314)
  Prédit: ' ='
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' =' → logprob: -0.0619891993701458
    2. '=' → logprob: -2.8119893074035645
    3. '=min' → logprob: -10.811988830566406
    4. '.=' → logprob: -14.436988830566406
    5. ' ' → logprob: -14.936988830566406
    6. 'min' → logprob: -16.061988830566406
    7. ' =)' → logprob: -16.686988830566406
    8. ',' → logprob: -16.686988830566406
    9. ' .=' → logprob: -16.936988830566406
    10. ' -=' → logprob: -17.186988830566406

Token 142: ' sorted' (ID: 20099)
  Prédit: 'min'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'min' → logprob: -0.5759668946266174
    2. ' min' → logprob: -0.8259668946266174
    3. 'r' → logprob: -12.200966835021973
    4. 'max' → logprob: -12.200966835021973
    5. ' ' → logprob: -12.700966835021973
    6. '(min' → logprob: -12.700966835021973
    7. '	min' → logprob: -12.825966835021973
    8. ' max' → logprob: -13.075966835021973
    9. ' r' → logprob: -13.325966835021973
    10. '[min' → logprob: -13.825966835021973

Token 143: '(r' (ID: 4729)
  Prédit: '(r'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(r' → logprob: -2.8087270038668066e-05
    2. '(' → logprob: -10.500027656555176
    3. '((' → logprob: -15.625027656555176
    4. '(lambda' → logprob: -16.375028610229492
    5. '(re' → logprob: -17.000028610229492
    6. 'r' → logprob: -17.125028610229492
    7. '(
' → logprob: -17.250028610229492
    8. '<|end|>' → logprob: -17.250028610229492
    9. '(range' → logprob: -17.750028610229492
    10. '([' → logprob: -17.875028610229492

Token 144: ')[' (ID: 13637)
  Prédit: ')['
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')[' → logprob: -0.016644900664687157
    2. '())[' → logprob: -4.2666449546813965
    3. '()[' → logprob: -6.7666449546813965
    4. ' )[' → logprob: -7.6416449546813965
    5. '[' → logprob: -7.7666449546813965
    6. '   ' → logprob: -8.391644477844238
    7. ',' → logprob: -9.516644477844238
    8. '()' → logprob: -10.016644477844238
    9. ',key' → logprob: -10.891644477844238
    10. '```' → logprob: -11.141644477844238

Token 145: '0' (ID: 15)
  Prédit: '0'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '0' → logprob: -1.700132997939363e-05
    2. ' ' → logprob: -11.750017166137695
    3. '1' → logprob: -12.250017166137695
    4. '   ' → logprob: -13.375017166137695
    5. '
' → logprob: -14.375017166137695
    6. '[' → logprob: -14.687517166137695
    7. ':' → logprob: -15.000017166137695
    8. '-' → logprob: -15.062517166137695
    9. '...' → logprob: -15.562517166137695
    10. '```' → logprob: -15.562517166137695

Token 146: ']
' (ID: 1592)
  Prédit: ']'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ']' → logprob: -0.43581512570381165
    2. '<|end|>' → logprob: -1.0608150959014893
    3. ')' → logprob: -5.685815334320068
    4. '<|end|>' → logprob: -6.310815334320068
    5. ' ]' → logprob: -7.560815334320068
    6. ')]' → logprob: -7.810815334320068
    7. '}' → logprob: -8.18581485748291
    8. '])' → logprob: -8.56081485748291
    9. ']
' → logprob: -9.68581485748291
    10. '```' → logprob: -9.68581485748291

Token 147: 'else' (ID: 2807)
  Prédit: 'print'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'print' → logprob: -0.028209609910845757
    2. '
' → logprob: -4.153209686279297
    3. ' print' → logprob: -4.528209686279297
    4. ' 
' → logprob: -7.903209686279297
    5. '<|end|>' → logprob: -8.403209686279297
    6. '+' → logprob: -8.528209686279297
    7. ')' → logprob: -8.778209686279297
    8. 'result' → logprob: -9.403209686279297
    9. '    
' → logprob: -9.903209686279297
    10. '

' → logprob: -9.903209686279297

Token 148: ':
' (ID: 734)
  Prédit: ':'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ':' → logprob: -0.6824618577957153
    2. '   ' → logprob: -0.8074618577957153
    3. ':
' → logprob: -3.182461738586426
    4. 'print' → logprob: -5.432461738586426
    5. ' print' → logprob: -7.057461738586426
    6. ' if' → logprob: -7.307461738586426
    7. '    
' → logprob: -7.932461738586426
    8. 'result' → logprob: -8.682461738586426
    9. '
' → logprob: -8.807461738586426
    10. 'if' → logprob: -9.057461738586426

Token 149: '   ' (ID: 271)
  Prédit: 'print'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'print' → logprob: -0.007925410754978657
    2. '   ' → logprob: -5.132925510406494
    3. ' print' → logprob: -6.257925510406494
    4. '```' → logprob: -9.632925033569336
    5. 'if' → logprob: -12.507925033569336
    6. '	print' → logprob: -12.632925033569336
    7. '    
' → logprob: -13.632925033569336
    8. '
' → logprob: -13.757925033569336
    9. ' ' → logprob: -14.007925033569336
    10. ' if' → logprob: -14.132925033569336

Token 150: ' pass' (ID: 1853)
  Prédit: 'print'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'print' → logprob: -0.001890210434794426
    2. ' print' → logprob: -6.376890182495117
    3. '   ' → logprob: -8.751890182495117
    4. 'pass' (adapté à ' pass') → logprob: -11.251890182495117
    5. '```' → logprob: -11.876890182495117
    6. 'result' → logprob: -12.376890182495117
    7. 'if' → logprob: -13.001890182495117
    8. 'for' → logprob: -14.501890182495117
    9. '
' → logprob: -14.626890182495117
    10. ' ' → logprob: -14.626890182495117

Token 151: '

' (ID: 279)
  Prédit: 'print'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'print' → logprob: -0.002031657611951232
    2. '
' → logprob: -6.3770318031311035
    3. ' print' → logprob: -8.752031326293945
    4. '```' → logprob: -9.002031326293945
    5. 'result' → logprob: -11.627031326293945
    6. '    
' → logprob: -11.877031326293945
    7. '\n' → logprob: -12.127031326293945
    8. '   ' → logprob: -12.377031326293945
    9. 'if' → logprob: -12.377031326293945
    10. '

' → logprob: -13.002031326293945

Token 152: 'output' (ID: 6130)
  Prédit: 'print'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'print' → logprob: -0.009363018907606602
    2. '
' → logprob: -4.884363174438477
    3. ' print' → logprob: -6.509363174438477
    4. ')' → logprob: -8.634363174438477
    5. '```' → logprob: -10.884363174438477
    6. ')
' → logprob: -11.384363174438477
    7. '-print' → logprob: -11.634363174438477
    8. '\n' → logprob: -11.634363174438477
    9. '(print' → logprob: -11.884363174438477
    10. ' 
' → logprob: -12.134363174438477

Token 153: ' =' (ID: 314)
  Prédit: '(result'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(result' → logprob: -0.387281596660614
    2. '(' → logprob: -1.2622816562652588
    3. '=' → logprob: -3.762281656265259
    4. ' =' → logprob: -4.63728141784668
    5. '=result' → logprob: -5.63728141784668
    6. 'result' → logprob: -7.13728141784668
    7. ' (' → logprob: -7.76228141784668
    8. '()' → logprob: -9.51228141784668
    9. '_' → logprob: -9.63728141784668
    10. ' ' → logprob: -9.76228141784668

Token 154: ' result' (ID: 1534)
  Prédit: 'result'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'result' → logprob: -0.3531179428100586
    2. ' result' → logprob: -1.2281179428100586
    3. 'str' → logprob: -5.978117942810059
    4. ' str' → logprob: -6.353117942810059
    5. 'number' → logprob: -9.103117942810059
    6. ' f' → logprob: -9.478117942810059
    7. '"' → logprob: -9.978117942810059
    8. ' number' → logprob: -10.478117942810059
    9. 'f' → logprob: -10.728117942810059
    10. '(result' → logprob: -10.978117942810059

Token 155: '-' (ID: 12)
  Prédit: ''
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False

Token 156: '2' (ID: 17)
  Prédit: '1'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '1' → logprob: -0.009779699146747589
    2. '2' → logprob: -4.634779930114746
    3. ' ' → logprob: -11.384779930114746
    4. 'number' → logprob: -11.759779930114746
    5. '```' → logprob: -13.884779930114746
    6. '3' → logprob: -14.134779930114746
    7. 'result' → logprob: -14.697279930114746
    8. '<|end|>' → logprob: -14.759779930114746
    9. '0' → logprob: -14.822279930114746
    10. '-' → logprob: -15.259779930114746

Token 157: '
' (ID: 198)
  Prédit: ''
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False

Token 158: 'print' (ID: 1598)
  Prédit: 'print'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'print' → logprob: -0.012578285299241543
    2. '<|end|>' → logprob: -4.51257848739624
    3. '
' → logprob: -6.63757848739624
    4. ' print' → logprob: -8.762578010559082
    5. '```' → logprob: -10.762578010559082
    6. ')' → logprob: -11.387578010559082
    7. 'if' → logprob: -11.512578010559082
    8. '#' → logprob: -12.387578010559082
    9. '<|end|>' → logprob: -12.512578010559082
    10. 'output' → logprob: -13.262578010559082

Token 159: '(int' (ID: 2742)
  Prédit: '(output'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '(output' → logprob: -0.014361179433763027
    2. '(' → logprob: -4.264361381530762
    3. 'output' → logprob: -8.889361381530762
    4. '()' → logprob: -10.139361381530762
    5. '('' → logprob: -11.264361381530762
    6. ' (' → logprob: -12.389361381530762
    7. ' output' → logprob: -14.014361381530762
    8. '("' → logprob: -14.139361381530762
    9. '(result' → logprob: -14.264361381530762
    10. '(f' → logprob: -14.639361381530762

Token 160: '(output' (ID: 22485)
  Prédit: '(output'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(output' → logprob: -4.68022444692906e-05
    2. '(' → logprob: -10.000046730041504
    3. 'output' → logprob: -14.375046730041504
    4. ' (' → logprob: -14.375046730041504
    5. ')' → logprob: -15.750046730041504
    6. '(
' → logprob: -18.00004768371582
    7. '((' → logprob: -18.62504768371582
    8. '(outputs' → logprob: -18.62504768371582
    9. '(abs' → logprob: -18.87504768371582
    10. ' output' → logprob: -19.00004768371582

Token 161: '))' (ID: 915)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')' → logprob: -6.511406809295295e-06
    2. '))' → logprob: -12.250006675720215
    3. ' )' → logprob: -13.625006675720215
    4. ')`' → logprob: -15.500006675720215
    5. '())' → logprob: -16.7500057220459
    6. ')))' → logprob: -17.0000057220459
    7. ')
' → logprob: -17.0000057220459
    8. '`)' → logprob: -17.6250057220459
    9. ')}' → logprob: -17.8750057220459
    10. '()' → logprob: -17.8750057220459


RÉSUMÉ:
--------------------------------------------------------------------------------
Total des tokens analysés: 159
Tokens correctement prédits (1ère position, stricte): 70
Tokens correctement prédits (1ère position, avec adaptation): 72
Tokens correctement prédits (top 10): 122
Précision stricte (1ère position): 44.03%
Précision adaptée (1ère position): 45.28%
Précision (top 10): 76.73%
================================================================================
