================================================================================
ANALYSE DE PRÉDICTION TOKEN PAR TOKEN (BATCH API)
Date: 2025-06-04 20:09:11
Modèle de tokenisation: gpt-4o-mini
================================================================================

SCRIPT ANALYSÉ:
--------------------------------------------------------------------------------
K = int(input())
if K % 2 == 0:
    res = (K * K) // 4
    print(res)
else:
    res = (K * K - 1) // 4
    print(res)
--------------------------------------------------------------------------------

RÉSULTATS D'ANALYSE TOKEN PAR TOKEN:
--------------------------------------------------------------------------------
Token 0: 'K' (ID: 42)
  → Token d'amorce (pas de prédiction)

Token 1: ' =' (ID: 314)
  → Token d'amorce (pas de prédiction)

Token 2: ' int' (ID: 677)
  → Token d'amorce (pas de prédiction)

Token 3: '(input' (ID: 10054)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '(' → logprob: -0.001030903891660273
    2. ''' → logprob: -7.751030921936035
    3. 'K' → logprob: -8.251030921936035
    4. '(K' → logprob: -8.876030921936035
    5. '('' → logprob: -9.001030921936035
    6. '("("' → logprob: -11.251030921936035
    7. '"' → logprob: -11.501030921936035
    8. '```' → logprob: -11.501030921936035
    9. '`' → logprob: -11.626030921936035
    10. '(
' → logprob: -11.751030921936035

Token 4: '())
' (ID: 4574)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '(' → logprob: -0.04538436979055405
    2. ')' → logprob: -3.795384407043457
    3. '()' → logprob: -3.920384407043457
    4. '())' → logprob: -6.920384407043457
    5. '(
' → logprob: -8.295384407043457
    6. '```' → logprob: -8.795384407043457
    7. '("("' → logprob: -9.295384407043457
    8. '('' → logprob: -9.295384407043457
    9. '(()' → logprob: -9.670384407043457
    10. '(

' → logprob: -9.795384407043457

Token 5: 'if' (ID: 366)
  Prédit: '*'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '*' → logprob: -1.173787236213684
    2. '\n' → logprob: -1.548787236213684
    3. 'for' → logprob: -2.4237871170043945
    4. '#' → logprob: -2.6737871170043945
    5. ''' → logprob: -3.0487871170043945
    6. '`' → logprob: -3.0487871170043945
    7. '\' → logprob: -3.1737871170043945
    8. '+' → logprob: -3.5487871170043945
    9. 'if' → logprob: -3.6737871170043945
    10. ')' → logprob: -3.7987871170043945

Token 6: ' K' (ID: 658)
  Prédit: ' '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' ' → logprob: -0.6932953596115112
    2. ' K' → logprob: -0.6932953596115112
    3. 'K' → logprob: -9.3182954788208
    4. ' not' → logprob: -10.8182954788208
    5. '  ' → logprob: -10.9432954788208
    6. ' ' → logprob: -11.0682954788208
    7. ' a' → logprob: -13.8182954788208
    8. ' (' → logprob: -14.0682954788208
    9. ' )' → logprob: -14.8182954788208
    10. '_' → logprob: -14.9432954788208

Token 7: ' %' (ID: 1851)
  Prédit: ' >'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' >' → logprob: -0.1801675260066986
    2. ' >=' → logprob: -2.8051674365997314
    3. ' <' → logprob: -3.0551674365997314
    4. ' ' → logprob: -3.5551674365997314
    5. '>' → logprob: -4.1801676750183105
    6. ' ==' → logprob: -5.5551676750183105
    7. ' %' → logprob: -5.6801676750183105
    8. ' <=' → logprob: -5.9301676750183105
    9. '<' → logprob: -6.4301676750183105
    10. '>=' → logprob: -7.9301676750183105

Token 8: ' ' (ID: 220)
  Prédit: ' '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' ' → logprob: -0.10042426735162735
    2. '2' → logprob: -2.350424289703369
    3. '3' → logprob: -9.350423812866211
    4. '4' → logprob: -9.850423812866211
    5. '32' → logprob: -10.475423812866211
    6. '1' → logprob: -11.225423812866211
    7. '10' → logprob: -11.475423812866211
    8. '```' → logprob: -12.475423812866211
    9. '6' → logprob: -12.725423812866211
    10. '5' → logprob: -12.850423812866211

Token 9: '2' (ID: 17)
  Prédit: '2'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '2' → logprob: -0.03484143689274788
    2. '3' → logprob: -3.659841537475586
    3. '10' → logprob: -5.534841537475586
    4. '5' → logprob: -6.284841537475586
    5. '4' → logprob: -6.659841537475586
    6. '7' → logprob: -7.284841537475586
    7. '6' → logprob: -8.659841537475586
    8. '100' → logprob: -9.034841537475586
    9. '8' → logprob: -9.534841537475586
    10. '1' → logprob: -9.784841537475586

Token 10: ' ==' (ID: 951)
  Prédit: ' =='
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' ==' → logprob: -0.11546596139669418
    2. '==' → logprob: -2.6154658794403076
    3. ' !=' → logprob: -3.4904658794403076
    4. '=' → logprob: -5.990466117858887
    5. '!=' → logprob: -6.240466117858887
    6. ' =' → logprob: -7.490466117858887
    7. ':' → logprob: -8.740466117858887
    8. ' ' → logprob: -8.865466117858887
    9. ')' → logprob: -9.990466117858887
    10. '!' → logprob: -10.365466117858887

Token 11: ' ' (ID: 220)
  Prédit: ' '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' ' → logprob: -0.1426941603422165
    2. '0' → logprob: -2.0176942348480225
    3. '1' → logprob: -10.892694473266602
    4. '2' → logprob: -15.517694473266602
    5. ' ' → logprob: -16.2676944732666
    6. ')' → logprob: -17.0176944732666
    7. '  ' → logprob: -17.6426944732666
    8. ''' → logprob: -17.6426944732666
    9. '```' → logprob: -17.6426944732666
    10. ' ==' → logprob: -17.7676944732666

Token 12: '0' (ID: 15)
  Prédit: '0'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '0' → logprob: -0.011075765825808048
    2. ' ' → logprob: -4.511075973510742
    3. '1' → logprob: -10.511075973510742
    4. '2' → logprob: -14.261075973510742
    5. '```' → logprob: -18.261075973510742
    6. '==' → logprob: -19.011075973510742
    7. '4' → logprob: -19.261075973510742
    8. ')' → logprob: -19.261075973510742
    9. '   ' → logprob: -19.323575973510742
    10. '3' → logprob: -19.323575973510742

Token 13: ':
' (ID: 734)
  Prédit: ':'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ':' → logprob: -1.676292231422849e-05
    2. ' :' → logprob: -11.750017166137695
    3. ':**' → logprob: -12.875017166137695
    4. '':' → logprob: -13.375017166137695
    5. '):' → logprob: -13.375017166137695
    6. '':'' → logprob: -13.750017166137695
    7. ':
' → logprob: -14.125017166137695
    8. '>:' → logprob: -14.375017166137695
    9. '():' → logprob: -16.000017166137695
    10. '":' → logprob: -16.125017166137695

Token 14: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.08992432802915573
    2. ' print' → logprob: -2.8399243354797363
    3. 'print' → logprob: -3.9649243354797363
    4. '\n' → logprob: -5.964924335479736
    5. '\' → logprob: -6.339924335479736
    6. '    ' → logprob: -6.714924335479736
    7. '    
' → logprob: -6.964924335479736
    8. ''' → logprob: -7.339924335479736
    9. ' ' → logprob: -7.964924335479736
    10. '"' → logprob: -8.089923858642578

Token 15: ' res' (ID: 694)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.5013996362686157
    2. ' print' → logprob: -1.0013996362686157
    3. 'print' → logprob: -3.626399517059326
    4. ' ' → logprob: -9.001399993896484
    5. '    ' → logprob: -9.626399993896484
    6. '       ' → logprob: -10.126399993896484
    7. '```' → logprob: -10.751399993896484
    8. '`' → logprob: -11.376399993896484
    9. ' pass' → logprob: -11.501399993896484
    10. '    
' → logprob: -11.751399993896484

Token 16: ' =' (ID: 314)
  Prédit: ' ='
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' =' → logprob: -0.3830122947692871
    2. 'ult' → logprob: -1.383012294769287
    3. '=' → logprob: -3.008012294769287
    4. 's' → logprob: -5.008012294769287
    5. 'ults' → logprob: -5.383012294769287
    6. ' ' → logprob: -5.633012294769287
    7. ' +=' → logprob: -6.883012294769287
    8. 'u' → logprob: -7.758012294769287
    9. ' s' → logprob: -7.758012294769287
    10. 't' → logprob: -8.008012771606445

Token 17: ' (' (ID: 350)
  Prédit: ' K'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' K' → logprob: -0.18006914854049683
    2. '"' → logprob: -2.4300692081451416
    3. 'K' → logprob: -3.4300692081451416
    4. ' "' → logprob: -3.6800692081451416
    5. ''' → logprob: -5.4300689697265625
    6. '"K' → logprob: -5.4300689697265625
    7. '0' → logprob: -5.5550689697265625
    8. ' ' → logprob: -5.6800689697265625
    9. ' '' → logprob: -6.4300689697265625
    10. '1' → logprob: -7.9300689697265625

Token 18: 'K' (ID: 42)
  Prédit: 'K'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'K' → logprob: -0.05592622235417366
    2. ' K' → logprob: -2.9309263229370117
    3. '   ' → logprob: -7.930926322937012
    4. '(K' → logprob: -8.555926322937012
    5. '2' → logprob: -8.930926322937012
    6. ' (' → logprob: -9.305926322937012
    7. ')' → logprob: -9.555926322937012
    8. ' ' → logprob: -9.680926322937012
    9. '(' → logprob: -9.930926322937012
    10. '1' → logprob: -11.180926322937012

Token 19: ' *' (ID: 425)
  Prédit: ' //'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' //' → logprob: -0.11607912182807922
    2. '//' → logprob: -3.116079092025757
    3. ' +' → logprob: -3.241079092025757
    4. '+' → logprob: -4.241079330444336
    5. ' ' → logprob: -5.116079330444336
    6. ')' → logprob: -5.866079330444336
    7. ' *' → logprob: -7.116079330444336
    8. ' )' → logprob: -7.241079330444336
    9. '   ' → logprob: -7.741079330444336
    10. '*' → logprob: -7.866079330444336

Token 20: ' K' (ID: 658)
  Prédit: 'K'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'K' → logprob: -0.7172776460647583
    2. ' K' → logprob: -1.3422776460647583
    3. '(K' → logprob: -2.5922775268554688
    4. '2' → logprob: -2.8422775268554688
    5. ' (' → logprob: -2.9672775268554688
    6. '3' → logprob: -3.2172775268554688
    7. ' ' → logprob: -4.217277526855469
    8. '4' → logprob: -5.342277526855469
    9. '5' → logprob: -6.092277526855469
    10. '1' → logprob: -6.842277526855469

Token 21: ')' (ID: 8)
  Prédit: ')'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')' → logprob: -0.003921787720173597
    2. ')//' → logprob: -6.378921985626221
    3. ' )' → logprob: -6.878921985626221
    4. ' +' → logprob: -7.628921985626221
    5. '+' → logprob: -8.253921508789062
    6. ' //' → logprob: -8.878921508789062
    7. '//' → logprob: -9.003921508789062
    8. '   ' → logprob: -9.628921508789062
    9. ')+' → logprob: -10.628921508789062
    10. ' ' → logprob: -10.753921508789062

Token 22: ' //' (ID: 602)
  Prédit: 'else'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'else' → logprob: -0.7457066178321838
    2. ' else' → logprob: -1.370706558227539
    3. '+' → logprob: -2.120706558227539
    4. ')' → logprob: -3.370706558227539
    5. '*' → logprob: -3.620706558227539
    6. '**' → logprob: -3.745706558227539
    7. '
' → logprob: -4.120706558227539
    8. '   ' → logprob: -4.495706558227539
    9. '%' → logprob: -4.620706558227539
    10. '+
' → logprob: -5.120706558227539

Token 23: ' ' (ID: 220)
  Prédit: '2'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '2' → logprob: -0.20295381546020508
    2. '4' → logprob: -1.702953815460205
    3. ' ' → logprob: -6.577953815460205
    4. '1' → logprob: -9.702953338623047
    5. '8' → logprob: -9.827953338623047
    6. '3' → logprob: -10.702953338623047
    7. '16' → logprob: -12.327953338623047
    8. '   ' → logprob: -13.452953338623047
    9. '  ' → logprob: -13.952953338623047
    10. '6' → logprob: -14.077953338623047

Token 24: '4' (ID: 19)
  Prédit: '2'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '2' → logprob: -0.029818186536431313
    2. '4' → logprob: -3.529818296432495
    3. ' ' → logprob: -9.904818534851074
    4. '8' → logprob: -11.654818534851074
    5. '1' → logprob: -12.654818534851074
    6. '3' → logprob: -12.779818534851074
    7. '   ' → logprob: -13.779818534851074
    8. '(' → logprob: -14.904818534851074
    9. '  ' → logprob: -14.904818534851074
    10. '16' → logprob: -14.904818534851074

Token 25: '
' (ID: 198)
  Prédit: 'else'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'else' → logprob: -0.040730491280555725
    2. '\n' → logprob: -3.9157304763793945
    3. ' else' → logprob: -4.6657304763793945
    4. '
' → logprob: -4.9157304763793945
    5. '    
' → logprob: -7.1657304763793945
    6. '\' → logprob: -7.4157304763793945
    7. '   ' → logprob: -8.040730476379395
    8. '<|end|>' → logprob: -8.040730476379395
    9. '```' → logprob: -8.165730476379395
    10. '  
' → logprob: -8.540730476379395

Token 26: '   ' (ID: 271)
  Prédit: 'else'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'else' → logprob: -0.020878534764051437
    2. '\n' → logprob: -4.645878314971924
    3. ' else' → logprob: -5.270878314971924
    4. '
' → logprob: -6.270878314971924
    5. '    
' → logprob: -7.270878314971924
    6. '   ' → logprob: -7.520878314971924
    7. 'elif' → logprob: -7.520878314971924
    8. '<|end|>' → logprob: -7.770878314971924
    9. ')' → logprob: -8.020878791809082
    10. '\' → logprob: -8.145878791809082

Token 27: ' print' (ID: 2123)
  Prédit: 'else'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'else' → logprob: -0.13507045805454254
    2. 'print' (adapté à ' print') → logprob: -2.760070562362671
    3. '\n' → logprob: -3.260070562362671
    4. '   ' → logprob: -4.135070323944092
    5. ' else' → logprob: -5.760070323944092
    6. 'elif' → logprob: -6.135070323944092
    7. '\' → logprob: -6.635070323944092
    8. ')' → logprob: -7.385070323944092
    9. '    
' → logprob: -7.760070323944092
    10. ' ' → logprob: -8.13507080078125

Token 28: '(res' (ID: 8331)
  Prédit: '(res'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(res' → logprob: -0.16025236248970032
    2. '(' → logprob: -1.910252332687378
    3. '((' → logprob: -11.910252571105957
    4. ' (' → logprob: -12.035252571105957
    5. '()' → logprob: -12.035252571105957
    6. 'res' → logprob: -12.285252571105957
    7. '('' → logprob: -13.035252571105957
    8. '("' → logprob: -14.285252571105957
    9. '(
' → logprob: -14.785252571105957
    10. '("("' → logprob: -14.785252571105957

Token 29: ')
' (ID: 446)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')' → logprob: -7.896309739408025e-07
    2. ')
' → logprob: -15.000000953674316
    3. '))' → logprob: -15.875000953674316
    4. ' )' → logprob: -15.875000953674316
    5. '')' → logprob: -17.0
    6. '`)' → logprob: -17.0
    7. ')`' → logprob: -17.25
    8. '```' → logprob: -17.875
    9. '）' → logprob: -18.0
    10. '}' → logprob: -18.125

Token 30: 'else' (ID: 2807)
  Prédit: 'else'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'else' → logprob: -0.0045743114314973354
    2. 'elif' → logprob: -6.254574298858643
    3. ' else' → logprob: -6.754574298858643
    4. '```' → logprob: -7.379574298858643
    5. '<|end|>' → logprob: -8.0045747756958
    6. 'e' → logprob: -8.0045747756958
    7. ')' → logprob: -9.1295747756958
    8. '#' → logprob: -11.2545747756958
    9. '#else' → logprob: -12.0045747756958
    10. '<|end|>' → logprob: -12.1295747756958

Token 31: ':
' (ID: 734)
  Prédit: ':'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ':' → logprob: -5.872261317563243e-05
    2. ':
' → logprob: -9.875059127807617
    3. '   ' → logprob: -12.375059127807617
    4. ' :' → logprob: -12.875059127807617
    5. '):' → logprob: -15.625059127807617
    6. ':**' → logprob: -16.750059127807617
    7. ',' → logprob: -17.375059127807617
    8. ':

' → logprob: -17.750059127807617
    9. '```' → logprob: -17.750059127807617
    10. ':
' → logprob: -17.750059127807617

Token 32: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.008065194822847843
    2. '    ' → logprob: -4.883065223693848
    3. '(' → logprob: -9.508065223693848
    4. ' (' → logprob: -9.508065223693848
    5. '```' → logprob: -9.508065223693848
    6. '     
' → logprob: -10.008065223693848
    7. '    
' → logprob: -10.383065223693848
    8. '0' → logprob: -10.758065223693848
    9. 'print' → logprob: -11.258065223693848
    10. ' ' → logprob: -11.258065223693848

Token 33: ' res' (ID: 694)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.7452986240386963
    2. ' res' → logprob: -1.4952986240386963
    3. 'res' (adapté à ' res') → logprob: -1.7452986240386963
    4. 'print' → logprob: -2.6202986240386963
    5. ' print' → logprob: -3.1202986240386963
    6. ' (' → logprob: -5.495298385620117
    7. '(res' → logprob: -6.745298385620117
    8. '(' → logprob: -6.745298385620117
    9. '((' → logprob: -7.370298385620117
    10. '0' → logprob: -7.370298385620117

Token 34: ' =' (ID: 314)
  Prédit: ' ='
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' =' → logprob: -0.00132976402528584
    2. '=' → logprob: -6.6263298988342285
    3. ' ' → logprob: -12.87632942199707
    4. ')' → logprob: -14.37632942199707
    5. ' =(' → logprob: -15.00132942199707
    6. '   ' → logprob: -16.25132942199707
    7. 's' → logprob: -16.50132942199707
    8. ',' → logprob: -17.00132942199707
    9. ' =
' → logprob: -17.00132942199707
    10. '  ' → logprob: -17.50132942199707

Token 35: ' (' (ID: 350)
  Prédit: ' ('
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' (' → logprob: -0.14203618466854095
    2. '(K' → logprob: -2.517036199569702
    3. ' ((' → logprob: -3.392036199569702
    4. '((' → logprob: -4.767035961151123
    5. ' K' → logprob: -4.892035961151123
    6. 'K' → logprob: -6.642035961151123
    7. '(' → logprob: -7.892035961151123
    8. ' ' → logprob: -8.892036437988281
    9. '   ' → logprob: -8.892036437988281
    10. '(((' → logprob: -10.142036437988281

Token 36: 'K' (ID: 42)
  Prédit: '(K'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(K' → logprob: -0.17965775728225708
    2. 'K' → logprob: -2.1796576976776123
    3. ' (' → logprob: -3.6796576976776123
    4. '((' → logprob: -3.9296576976776123
    5. ' K' → logprob: -5.429657936096191
    6. '(' → logprob: -7.054657936096191
    7. ' ((' → logprob: -7.179657936096191
    8. '   ' → logprob: -8.429657936096191
    9. ' ' → logprob: -9.304657936096191
    10. '(((' → logprob: -10.054657936096191

Token 37: ' *' (ID: 425)
  Prédit: ' *'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' *' → logprob: -0.6355694532394409
    2. '*' → logprob: -0.7605694532394409
    3. '+' → logprob: -6.7605695724487305
    4. '**' → logprob: -7.5105695724487305
    5. '-' → logprob: -8.01056957244873
    6. ' ' → logprob: -8.13556957244873
    7. ' +' → logprob: -8.26056957244873
    8. '//' → logprob: -8.88556957244873
    9. ' //' → logprob: -9.01056957244873
    10. ' -' → logprob: -10.26056957244873

Token 38: ' K' (ID: 658)
  Prédit: '(K'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(K' → logprob: -0.3342449367046356
    2. 'K' → logprob: -1.334244966506958
    3. ' (' → logprob: -4.584244728088379
    4. '((' → logprob: -5.584244728088379
    5. '3' → logprob: -6.084244728088379
    6. '2' → logprob: -6.334244728088379
    7. ' K' → logprob: -6.709244728088379
    8. '(' → logprob: -7.334244728088379
    9. '1' → logprob: -7.834244728088379
    10. ' ' → logprob: -8.709244728088379

Token 39: ' -' (ID: 533)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')' → logprob: -0.02070537768304348
    2. '+' → logprob: -5.270705223083496
    3. ' +' → logprob: -5.395705223083496
    4. ' )' → logprob: -5.645705223083496
    5. '-' → logprob: -5.895705223083496
    6. ' -' → logprob: -6.020705223083496
    7. ' //' → logprob: -7.020705223083496
    8. '   ' → logprob: -7.645705223083496
    9. '//' → logprob: -7.645705223083496
    10. ')//' → logprob: -9.020705223083496

Token 40: ' ' (ID: 220)
  Prédit: '1'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '1' → logprob: -0.014165864326059818
    2. ' ' → logprob: -4.264165878295898
    3. '  ' → logprob: -13.889165878295898
    4. '   ' → logprob: -14.389165878295898
    5. ')' → logprob: -15.014165878295898
    6. '4' → logprob: -16.5141658782959
    7. ' ' → logprob: -16.6391658782959
    8. '2' → logprob: -16.7016658782959
    9. '```' → logprob: -16.9516658782959
    10. ' K' → logprob: -17.2641658782959

Token 41: '1' (ID: 16)
  Prédit: '1'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '1' → logprob: -0.00023405285901390016
    2. ' ' → logprob: -8.37523365020752
    3. '  ' → logprob: -13.62523365020752
    4. '   ' → logprob: -13.87523365020752
    5. '```' → logprob: -15.43773365020752
    6. '4' → logprob: -15.75023365020752
    7. '2' → logprob: -15.87523365020752
    8. ')' → logprob: -16.375234603881836
    9. ' ' → logprob: -16.562734603881836
    10. '-' → logprob: -16.687734603881836

Token 42: ')' (ID: 8)
  Prédit: ')'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')' → logprob: -0.0015650922432541847
    2. ' )' → logprob: -6.501564979553223
    3. ')//' → logprob: -9.876564979553223
    4. '   ' → logprob: -11.751564979553223
    5. ' ' → logprob: -14.001564979553223
    6. '//' → logprob: -14.251564979553223
    7. '）' → logprob: -14.626564979553223
    8. ')
' → logprob: -15.001564979553223
    9. ')/' → logprob: -15.501564979553223
    10. '```' → logprob: -15.501564979553223

Token 43: ' //' (ID: 602)
  Prédit: ' //'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' //' → logprob: -0.02993989735841751
    2. ')' → logprob: -4.029940128326416
    3. '//' → logprob: -4.654940128326416
    4. '   ' → logprob: -6.654940128326416
    5. ')//' → logprob: -8.029939651489258
    6. ' ' → logprob: -8.154939651489258
    7. ' )' → logprob: -9.029939651489258
    8. '```' → logprob: -9.529939651489258
    9. '  ' → logprob: -10.904939651489258
    10. '
' → logprob: -10.904939651489258

Token 44: ' ' (ID: 220)
  Prédit: '4'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '4' → logprob: -1.3856492842023727e-06
    2. '2' → logprob: -14.250000953674316
    3. ' ' → logprob: -14.250000953674316
    4. '8' → logprob: -18.750001907348633
    5. '1' → logprob: -20.125001907348633
    6. '   ' → logprob: -20.875001907348633
    7. '۴' → logprob: -21.250001907348633
    8. '<|end|>' → logprob: -21.500001907348633
    9. '٤' → logprob: -21.625001907348633
    10. '```' → logprob: -21.875001907348633

Token 45: '4' (ID: 19)
  Prédit: '4'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '4' → logprob: -1.9027791495318525e-05
    2. '2' → logprob: -10.875019073486328
    3. ' ' → logprob: -17.125019073486328
    4. '1' → logprob: -18.750019073486328
    5. '```' → logprob: -20.750019073486328
    6. '۴' → logprob: -20.875019073486328
    7. '٤' → logprob: -21.250019073486328
    8. '４' → logprob: -21.875019073486328
    9. '४' → logprob: -22.000019073486328
    10. '8' → logprob: -22.125019073486328

Token 46: '
' (ID: 198)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.1653633713722229
    2. '\n' → logprob: -2.540363311767578
    3. '
' → logprob: -2.790363311767578
    4. '```' → logprob: -5.165363311767578
    5. '\' → logprob: -5.665363311767578
    6. 'print' → logprob: -6.290363311767578
    7. '    
' → logprob: -7.665363311767578
    8. '``' → logprob: -8.415363311767578
    9. '  
' → logprob: -9.540363311767578
    10. ')' → logprob: -9.665363311767578

Token 47: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.31009307503700256
    2. '\n' → logprob: -1.5600930452346802
    3. '
' → logprob: -3.1850931644439697
    4. '```' → logprob: -4.810092926025391
    5. '    
' → logprob: -5.935092926025391
    6. '\' → logprob: -6.310092926025391
    7. '  
' → logprob: -7.435092926025391
    8. '``' → logprob: -7.560092926025391
    9. 'print' → logprob: -7.810092926025391
    10. '\r' → logprob: -8.93509292602539

Token 48: ' print' (ID: 2123)
  Prédit: 'print'
  Correct (stricte): False
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'print' (adapté à ' print') → logprob: -0.2522428035736084
    2. '   ' → logprob: -1.5022428035736084
    3. ' print' → logprob: -8.502243041992188
    4. '```' → logprob: -9.252243041992188
    5. '	print' → logprob: -12.252243041992188
    6. '       ' → logprob: -13.127243041992188
    7. '``' → logprob: -13.377243041992188
    8. '\n' → logprob: -13.377243041992188
    9. '    
' → logprob: -13.502243041992188
    10. '\' → logprob: -14.002243041992188

Token 49: '(res' (ID: 8331)
  Prédit: '(res'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(res' → logprob: -0.25193122029304504
    2. '(' → logprob: -1.5019311904907227
    3. ' (' → logprob: -14.001931190490723
    4. '(
' → logprob: -15.251931190490723
    5. 'res' → logprob: -15.376931190490723
    6. '(re' → logprob: -15.751931190490723
    7. '()' → logprob: -16.00193214416504
    8. '(

' → logprob: -16.37693214416504
    9. ')' → logprob: -17.00193214416504
    10. '(rest' → logprob: -17.00193214416504

Token 50: ')' (ID: 8)
  Prédit: ')'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')' → logprob: -3.128163257315464e-07
    2. ')
' → logprob: -15.25
    3. ' )' → logprob: -17.625
    4. '))' → logprob: -18.0
    5. '}' → logprob: -18.375
    6. ')`' → logprob: -18.375
    7. '')' → logprob: -18.5
    8. '`)' → logprob: -19.25
    9. '```' → logprob: -19.75
    10. '   ' → logprob: -19.875


RÉSUMÉ:
--------------------------------------------------------------------------------
Total des tokens analysés: 48
Tokens correctement prédits (1ère position, stricte): 22
Tokens correctement prédits (1ère position, avec adaptation): 23
Tokens correctement prédits (top 10): 43
Précision stricte (1ère position): 45.83%
Précision adaptée (1ère position): 47.92%
Précision (top 10): 89.58%
================================================================================
