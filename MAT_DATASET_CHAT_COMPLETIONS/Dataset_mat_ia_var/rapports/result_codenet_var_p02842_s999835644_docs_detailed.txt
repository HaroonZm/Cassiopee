================================================================================
ANALYSE DE PRÉDICTION TOKEN PAR TOKEN (BATCH API)
Date: 2025-06-04 19:35:42
Modèle de tokenisation: gpt-4o-mini
================================================================================

SCRIPT ANALYSÉ:
--------------------------------------------------------------------------------
def find_original_price_with_tax(n):
    """
    Cherche le nombre entier x tel que l'arrondi inférieur de x * 1.08 soit égal à n.
    
    Plus précisément, pour une taxe de 8% (équivalent à multiplier par 108 puis division entière par 100),
    cette fonction trouve le prix d'origine x si possible, sinon indique l'absence d'une telle valeur.
    
    Args:
        n (int): Le prix final après taxe (entier).
    
    Returns:
        int or str: Le prix initial x si trouvé, sinon ':('.
    """
    # Boucle sur toutes les valeurs possibles de x de 0 jusqu'à n inclus.
    for x in range(n + 1):
        # Vérifie si la partie entière de x multiplié par 108/100 donne n
        # Cela simule l'application de la taxe de 8% et son arrondi vers le bas.
        if x * 108 // 100 == n:
            # Si c'est le cas, retourne x comme prix initial.
            return x
    # Si aucune valeur de x ne satisfait la condition, retourne ':('.
    return ':('

def main():
    """
    Point d'entrée principal du programme.
    Lit une entrée utilisateur, cherche le prix initial avant taxe, puis affiche le résultat.
    """
    # Lecture de l'entrée utilisateur représentant le prix après taxe
    n = int(input())
    # Calcul du prix initial à partir du prix après taxe
    result = find_original_price_with_tax(n)
    # Affichage du résultat (prix initial ou ':(' si introuvable)
    print(result)

if __name__ == "__main__":
    main()
--------------------------------------------------------------------------------

RÉSULTATS D'ANALYSE TOKEN PAR TOKEN:
--------------------------------------------------------------------------------
Token 0: 'def' (ID: 1314)
  → Token d'amorce (pas de prédiction)

Token 1: ' find' (ID: 1646)
  → Token d'amorce (pas de prédiction)

Token 2: '_original' (ID: 92075)
  → Token d'amorce (pas de prédiction)

Token 3: '_price' (ID: 18814)
  Prédit: '_'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '_' → logprob: -0.01359743345528841
    2. '(' → logprob: -4.38859748840332
    3. '_token' → logprob: -8.13859748840332
    4. '```' → logprob: -8.38859748840332
    5. '(_' → logprob: -9.01359748840332
    6. '_name' → logprob: -9.88859748840332
    7. '_original' → logprob: -9.88859748840332
    8. 'def' → logprob: -10.51359748840332
    9. 's' → logprob: -10.76359748840332
    10. '_space' → logprob: -10.88859748840332

Token 4: '_with' (ID: 14161)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '(' → logprob: -0.006349169183522463
    2. '_' → logprob: -5.381349086761475
    3. '```' → logprob: -7.381349086761475
    4. '(_:' → logprob: -8.256349563598633
    5. '():' → logprob: -8.381349563598633
    6. '(_' → logprob: -8.506349563598633
    7. '(:' → logprob: -9.256349563598633
    8. '_parent' → logprob: -10.006349563598633
    9. '_:' → logprob: -10.506349563598633
    10. '(parent' → logprob: -10.631349563598633

Token 5: '_tax' (ID: 61146)
  Prédit: '_discount'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_discount' → logprob: -0.1733919382095337
    2. '_tax' → logprob: -1.9233919382095337
    3. 'discount' → logprob: -5.673391819000244
    4. 'out' → logprob: -5.923391819000244
    5. '_v' → logprob: -6.673391819000244
    6. 'tax' → logprob: -7.048391819000244
    7. 'in' → logprob: -7.298391819000244
    8. '```' → logprob: -7.673391819000244
    9. '_d' → logprob: -7.798391819000244
    10. '_margin' → logprob: -7.923391819000244

Token 6: '(n' (ID: 2406)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '(' → logprob: -0.003923568408936262
    2. '_' → logprob: -5.878923416137695
    3. '():' → logprob: -8.503923416137695
    4. '(:' → logprob: -8.753923416137695
    5. '(_:' → logprob: -8.753923416137695
    6. '_parent' → logprob: -8.878923416137695
    7. 's' → logprob: -9.003923416137695
    8. '(_' → logprob: -9.503923416137695
    9. ':' → logprob: -10.003923416137695
    10. '(def' → logprob: -10.253923416137695

Token 7: '):
' (ID: 1883)
  Prédit: '):'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '):' → logprob: -0.29665377736091614
    2. 'a' → logprob: -2.5466537475585938
    3. 'umber' → logprob: -2.6716537475585938
    4. 'ame' → logprob: -3.0466537475585938
    5. 'u' → logprob: -3.7966537475585938
    6. ')' → logprob: -4.796653747558594
    7. ',' → logprob: -4.796653747558594
    8. 'o' → logprob: -4.796653747558594
    9. 'um' → logprob: -5.296653747558594
    10. '_' → logprob: -5.921653747558594

Token 8: '   ' (ID: 271)
  Prédit: ':'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ':' → logprob: -0.10878246277570724
    2. '   ' → logprob: -2.6087825298309326
    3. '```' → logprob: -3.6087825298309326
    4. '    ' → logprob: -8.233782768249512
    5. ':
' → logprob: -8.233782768249512
    6. ':return' → logprob: -8.358782768249512
    7. ' :' → logprob: -8.858782768249512
    8. ''' → logprob: -8.858782768249512
    9. '_' → logprob: -8.983782768249512
    10. '``' → logprob: -8.983782768249512

Token 9: ' """
' (ID: 7037)
  Prédit: '```'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '```' → logprob: -0.6860604286193848
    2. '   ' → logprob: -0.8110604286193848
    3. '`' → logprob: -4.186060428619385
    4. ''' → logprob: -4.686060428619385
    5. ' ' → logprob: -5.311060428619385
    6. '    ' → logprob: -5.686060428619385
    7. '``' → logprob: -5.811060428619385
    8. '       ' → logprob: -6.186060428619385
    9. '_' → logprob: -6.186060428619385
    10. '"' → logprob: -6.186060428619385

Token 10: '   ' (ID: 271)
  Prédit: 'r'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'r' → logprob: -1.0143316984176636
    2. 'i' → logprob: -1.6393316984176636
    3. 'p' → logprob: -1.6393316984176636
    4. '"""' → logprob: -2.639331817626953
    5. '   ' → logprob: -2.889331817626953
    6. 'T' → logprob: -3.764331817626953
    7. '#' → logprob: -4.014331817626953
    8. 'return' → logprob: -4.389331817626953
    9. 't' → logprob: -4.389331817626953
    10. ''''' → logprob: -4.889331817626953

Token 11: ' Cher' (ID: 48756)
  Prédit: '"""'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '"""' → logprob: -0.1696675419807434
    2. 'Calculate' → logprob: -2.4196674823760986
    3. 'Calcul' → logprob: -4.294667720794678
    4. 'T' → logprob: -4.794667720794678
    5. '"""
' → logprob: -4.794667720794678
    6. '   ' → logprob: -4.794667720794678
    7. '""' → logprob: -4.794667720794678
    8. ''''' → logprob: -5.294667720794678
    9. 'Returns' → logprob: -5.294667720794678
    10. ' """' → logprob: -5.794667720794678

Token 12: 'che' (ID: 926)
  Prédit: 'e'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'e' → logprob: -0.2762382924556732
    2. 't' → logprob: -1.6512383222579956
    3. '   ' → logprob: -4.026238441467285
    4. 'r' → logprob: -4.776238441467285
    5. 'ished' → logprob: -4.901238441467285
    6. 'k' → logprob: -5.651238441467285
    7. '```' → logprob: -5.651238441467285
    8. 'y' → logprob: -6.526238441467285
    9. 'eturn' → logprob: -6.526238441467285
    10. 'i' → logprob: -7.276238441467285

Token 13: ' le' (ID: 505)
  Prédit: 's'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 's' → logprob: -1.2789596319198608
    2. '_' → logprob: -1.4039596319198608
    3. ' ' → logprob: -1.4039596319198608
    4. ' le' → logprob: -3.0289597511291504
    5. '   ' → logprob: -3.5289597511291504
    6. 'l' → logprob: -3.9039597511291504
    7. '  ' → logprob: -4.02895975112915
    8. ' l' → logprob: -4.15395975112915
    9. ' la' → logprob: -4.15395975112915
    10. ''' → logprob: -4.65395975112915

Token 14: ' nombre' (ID: 9733)
  Prédit: ' prix'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' prix' → logprob: -0.06518249213695526
    2. ' ' → logprob: -3.3151824474334717
    3. 'prix' → logprob: -4.065182685852051
    4. '   ' → logprob: -5.940182685852051
    5. ' ' → logprob: -6.565182685852051
    6. '  ' → logprob: -6.565182685852051
    7. ' coût' → logprob: -6.815182685852051
    8. ' montant' → logprob: -6.940182685852051
    9. ' price' → logprob: -7.190182685852051
    10. ' meilleur' → logprob: -7.565182685852051

Token 15: ' entier' (ID: 80473)
  Prédit: ' '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' ' → logprob: -0.3971259295940399
    2. 's' → logprob: -1.7721259593963623
    3. '  ' → logprob: -3.5221259593963623
    4. ' d' → logprob: -3.6471259593963623
    5. ' original' → logprob: -3.8971259593963623
    6. '_' → logprob: -4.397125720977783
    7. ' de' → logprob: -4.647125720977783
    8. ' initial' → logprob: -4.897125720977783
    9. ' total' → logprob: -5.022125720977783
    10. '   ' → logprob: -5.147125720977783

Token 16: ' x' (ID: 1215)
  Prédit: ' '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' ' → logprob: -0.16774329543113708
    2. '_' → logprob: -3.16774320602417
    3. 's' → logprob: -3.16774320602417
    4. '  ' → logprob: -4.91774320602417
    5. ' de' → logprob: -5.16774320602417
    6. '   ' → logprob: -5.29274320602417
    7. ' total' → logprob: -5.41774320602417
    8. ' complet' → logprob: -5.54274320602417
    9. ' d' → logprob: -5.79274320602417
    10. ' space' → logprob: -5.91774320602417

Token 17: ' tel' (ID: 10716)
  Prédit: ' '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' ' → logprob: -1.1378930807113647
    2. ' tel' → logprob: -1.8878930807113647
    3. ',' → logprob: -2.2628931999206543
    4. '```' → logprob: -2.5128931999206543
    5. '   ' → logprob: -3.1378931999206543
    6. 's' → logprob: -3.2628931999206543
    7. ' ,' → logprob: -3.2628931999206543
    8. '_' → logprob: -3.2628931999206543
    9. ' qui' → logprob: -3.6378931999206543
    10. ' such' → logprob: -3.7628931999206543

Token 18: ' que' (ID: 661)
  Prédit: ' que'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' que' → logprob: -0.616653323173523
    2. 'que' → logprob: -0.866653323173523
    3. '   ' → logprob: -3.8666534423828125
    4. 'qu' → logprob: -5.2416534423828125
    5. ' qu' → logprob: -5.2416534423828125
    6. 'u' → logprob: -5.3666534423828125
    7. ' ' → logprob: -6.9916534423828125
    8. ' that' → logprob: -7.4916534423828125
    9. '```' → logprob: -7.8666534423828125
    10. 'x' → logprob: -8.241653442382812

Token 19: ' l' (ID: 305)
  Prédit: ' x'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' x' → logprob: -0.3716020882129669
    2. 'x' → logprob: -1.9966020584106445
    3. '   ' → logprob: -2.1216020584106445
    4. ' le' → logprob: -4.3716020584106445
    5. ' (' → logprob: -4.6216020584106445
    6. ' prix' → logprob: -4.7466020584106445
    7. '(x' → logprob: -4.8716020584106445
    8. 'prix' → logprob: -5.1216020584106445
    9. 'n' → logprob: -6.1216020584106445
    10. ' la' → logprob: -6.6216020584106445

Token 20: ''arr' (ID: 49695)
  Prédit: 'e'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'e' → logprob: -0.6875702738761902
    2. 'a' → logprob: -1.187570333480835
    3. 'x' → logprob: -2.937570333480835
    4. 'ax' → logprob: -3.687570333480835
    5. 'original' → logprob: -3.937570333480835
    6. ' original' → logprob: -4.437570095062256
    7. ''achat' → logprob: -4.687570095062256
    8. ' prix' → logprob: -4.812570095062256
    9. ''on' → logprob: -5.187570095062256
    10. ' a' → logprob: -5.437570095062256

Token 21: 'ondi' (ID: 117409)
  Prédit: 'ondi'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'ondi' → logprob: -0.37780290842056274
    2. 'ivée' → logprob: -2.002802848815918
    3. 'ond' → logprob: -2.502802848815918
    4. 'iv' → logprob: -3.752802848815918
    5. 'ive' → logprob: -3.752802848815918
    6. 'êt' → logprob: -3.877802848815918
    7. 'ivé' → logprob: -4.252802848815918
    8. 'ête' → logprob: -5.752802848815918
    9. 'ondissement' → logprob: -5.752802848815918
    10. 'x' → logprob: -6.502802848815918

Token 22: ' inférieur' (ID: 191498)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '(' → logprob: -0.5039457082748413
    2. '(x' → logprob: -1.0039457082748413
    3. ' (' → logprob: -4.128945827484131
    4. ' x' → logprob: -5.628945827484131
    5. '(n' → logprob: -6.753945827484131
    6. ' du' → logprob: -6.753945827484131
    7. 'x' → logprob: -6.753945827484131
    8. ' de' → logprob: -6.753945827484131
    9. ' ' → logprob: -7.253945827484131
    10. '(abs' → logprob: -7.378945827484131

Token 23: ' de' (ID: 334)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(' → logprob: -0.7611557841300964
    2. '(x' → logprob: -1.0111558437347412
    3. 'e' → logprob: -2.511155843734741
    4. ' (' → logprob: -3.511155843734741
    5. ' du' → logprob: -4.511155605316162
    6. '(e' → logprob: -4.511155605316162
    7. ' de' → logprob: -4.886155605316162
    8. ' x' → logprob: -4.886155605316162
    9. 'x' → logprob: -5.261155605316162
    10. ' ' → logprob: -5.761155605316162

Token 24: ' x' (ID: 1215)
  Prédit: ' x'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' x' → logprob: -0.40504154562950134
    2. ' (' → logprob: -1.9050415754318237
    3. 'x' → logprob: -2.030041456222534
    4. '(x' → logprob: -3.530041456222534
    5. ' n' → logprob: -5.030041694641113
    6. ' ((' → logprob: -5.280041694641113
    7. '((' → logprob: -5.780041694641113
    8. ' ' → logprob: -6.155041694641113
    9. '(' → logprob: -6.155041694641113
    10. 'n' → logprob: -6.530041694641113

Token 25: ' *' (ID: 425)
  Prédit: ' /'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' /' → logprob: -0.7203627824783325
    2. ' *' → logprob: -0.8453627824783325
    3. '*' → logprob: -3.220362663269043
    4. '/' → logprob: -3.470362663269043
    5. ' multip' → logprob: -5.220362663269043
    6. 'div' → logprob: -6.720362663269043
    7. 'multip' → logprob: -6.720362663269043
    8. '<|end|>' → logprob: -7.595362663269043
    9. ')' → logprob: -7.720362663269043
    10. '/div' → logprob: -7.845362663269043

Token 26: ' ' (ID: 220)
  Prédit: ' ('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' (' → logprob: -0.20853887498378754
    2. '(' → logprob: -1.8335388898849487
    3. '<|end|>' → logprob: -4.208539009094238
    4. '(n' → logprob: -5.458539009094238
    5. 'n' → logprob: -5.458539009094238
    6. '<|end|>' → logprob: -6.333539009094238
    7. '1' → logprob: -7.208539009094238
    8. ' n' → logprob: -7.208539009094238
    9. ' ' → logprob: -7.583539009094238
    10. 'tax' → logprob: -8.083539009094238

Token 27: '1' (ID: 16)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(' → logprob: -0.0331711620092392
    2. ' (' → logprob: -3.7831711769104004
    3. '1' → logprob: -5.2831711769104
    4. 'n' → logprob: -6.2831711769104
    5. 'tax' → logprob: -6.7831711769104
    6. '(n' → logprob: -7.0331711769104
    7. ' ' → logprob: -8.533170700073242
    8. '100' → logprob: -8.533170700073242
    9. '0' → logprob: -8.658170700073242
    10. ' tax' → logprob: -9.283170700073242

Token 28: '.' (ID: 13)
  Prédit: '.'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '.' → logprob: -0.0039018383249640465
    2. '1' → logprob: -6.503901958465576
    3. '0' → logprob: -6.628901958465576
    4. ',' → logprob: -7.003901958465576
    5. '2' → logprob: -9.753901481628418
    6. ' .' → logprob: -10.378901481628418
    7. '4' → logprob: -11.253901481628418
    8. '+' → logprob: -11.378901481628418
    9. '23' → logprob: -11.378901481628418
    10. '5' → logprob: -11.503901481628418

Token 29: '08' (ID: 3062)
  Prédit: '2'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '2' → logprob: -0.17337210476398468
    2. '1' → logprob: -3.0483720302581787
    3. '20' → logprob: -3.4233720302581787
    4. '05' → logprob: -3.6733720302581787
    5. '15' → logprob: -4.173372268676758
    6. '0' → logprob: -4.798372268676758
    7. '10' → logprob: -5.048372268676758
    8. '07' → logprob: -5.548372268676758
    9. '12' → logprob: -5.923372268676758
    10. '075' → logprob: -5.923372268676758

Token 30: ' soit' (ID: 17293)
  Prédit: ' =='
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' ==' → logprob: -0.6028873920440674
    2. ')' → logprob: -1.4778873920440674
    3. '==' → logprob: -2.1028873920440674
    4. ' est' → logprob: -3.2278873920440674
    5. ' soit' → logprob: -3.8528873920440674
    6. '```' → logprob: -4.352887153625488
    7. ')==' → logprob: -5.227887153625488
    8. ',' → logprob: -5.852887153625488
    9. ' )' → logprob: -5.852887153625488
    10. '}' → logprob: -5.977887153625488

Token 31: ' égal' (ID: 15059)
  Prédit: ' égal'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' égal' → logprob: -0.8592656254768372
    2. 'n' → logprob: -1.1092655658721924
    3. ' n' → logprob: -1.6092655658721924
    4. ' ég' → logprob: -3.8592655658721924
    5. ' equal' → logprob: -4.8592658042907715
    6. ' exactement' → logprob: -5.3592658042907715
    7. 'égal' → logprob: -5.6092658042907715
    8. ' ' → logprob: -5.7342658042907715
    9. '```' → logprob: -6.3592658042907715
    10. ' exactly' → logprob: -7.1092658042907715

Token 32: ' à' (ID: 1221)
  Prédit: ' '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' ' → logprob: -0.7632612586021423
    2. ' à' → logprob: -0.7632612586021423
    3. ' a' → logprob: -3.263261318206787
    4. 'n' → logprob: -4.763261318206787
    5. ' n' → logprob: -5.513261318206787
    6. '  ' → logprob: -5.513261318206787
    7. ' to' → logprob: -5.638261318206787
    8. ' au' → logprob: -5.763261318206787
    9. 's' → logprob: -5.888261318206787
    10. 'à' → logprob: -6.888261318206787

Token 33: ' n' (ID: 297)
  Prédit: 'n'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'n' → logprob: -0.5765678286552429
    2. ' n' → logprob: -0.8265678286552429
    3. ' ' → logprob: -7.576567649841309
    4. ' ' → logprob: -9.701567649841309
    5. '	n' → logprob: -10.826567649841309
    6. '\n' → logprob: -11.826567649841309
    7. ' `' → logprob: -12.451567649841309
    8. '<|end|>' → logprob: -12.576567649841309
    9. '```' → logprob: -12.826567649841309
    10. '_n' → logprob: -13.326567649841309

Token 34: '.
' (ID: 558)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.12338165938854218
    2. '\n' → logprob: -2.8733816146850586
    3. '```' → logprob: -4.498381614685059
    4. '\' → logprob: -4.748381614685059
    5. ')' → logprob: -4.873381614685059
    6. '"""' → logprob: -5.123381614685059
    7. '.' → logprob: -5.623381614685059
    8. '    ' → logprob: -5.748381614685059
    9. ' ' → logprob: -5.998381614685059
    10. '"""
' → logprob: -6.123381614685059

Token 35: '    
' (ID: 1944)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.1428571343421936
    2. '"""' → logprob: -2.517857074737549
    3. '"""
' → logprob: -3.517857074737549
    4. '"' → logprob: -4.892857074737549
    5. '\n' → logprob: -5.767857074737549
    6. '```' → logprob: -5.892857074737549
    7. ' """
' → logprob: -6.142857074737549
    8. ')' → logprob: -6.392857074737549
    9. '""' → logprob: -6.517857074737549
    10. '
' → logprob: -7.142857074737549

Token 36: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.058011360466480255
    2. '    ' → logprob: -3.808011293411255
    3. '"""' → logprob: -4.308011531829834
    4. ' """
' → logprob: -5.433011531829834
    5. ' """' → logprob: -6.058011531829834
    6. ' 
' → logprob: -6.183011531829834
    7. '
' → logprob: -6.308011531829834
    8. '"' → logprob: -6.308011531829834
    9. '```' → logprob: -6.433011531829834
    10. '"""
' → logprob: -6.808011531829834

Token 37: ' Plus' (ID: 11899)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.08048472553491592
    2. ' """' → logprob: -3.830484628677368
    3. '    ' → logprob: -4.580484867095947
    4. ' """
' → logprob: -4.830484867095947
    5. ' for' → logprob: -4.955484867095947
    6. ' 
' → logprob: -5.580484867095947
    7. ' ' → logprob: -5.580484867095947
    8. '"""' → logprob: -5.580484867095947
    9. '
' → logprob: -5.955484867095947
    10. 'n' → logprob: -6.205484867095947

Token 38: ' précisément' (ID: 139179)
  Prédit: ' précisément'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' précisément' → logprob: -0.6433600187301636
    2. 'ieurs' → logprob: -0.8933600187301636
    3. 'pr' → logprob: -3.893360137939453
    4. ' exactement' → logprob: -4.518360137939453
    5. '```' → logprob: -4.518360137939453
    6. ' d' → logprob: -5.018360137939453
    7. ' de' → logprob: -5.643360137939453
    8. 'd' → logprob: -5.768360137939453
    9. ' simplement' → logprob: -6.643360137939453
    10. '   ' → logprob: -7.393360137939453

Token 39: ',' (ID: 11)
  Prédit: ','
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ',' → logprob: -0.04312947392463684
    2. ' ,' → logprob: -3.5431294441223145
    3. '   ' → logprob: -5.0431294441223145
    4. '```' → logprob: -6.1681294441223145
    5. ':' → logprob: -6.4181294441223145
    6. ' :' → logprob: -7.4181294441223145
    7. ' for' → logprob: -7.6681294441223145
    8. '  ' → logprob: -8.543129920959473
    9. '<|end|>' → logprob: -8.543129920959473
    10. 'def' → logprob: -8.543129920959473

Token 40: ' pour' (ID: 1930)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.5714359283447266
    2. ' on' → logprob: -1.1964359283447266
    3. ' for' → logprob: -3.9464359283447266
    4. ' la' → logprob: -4.196435928344727
    5. ' retourne' → logprob: -4.196435928344727
    6. 'on' → logprob: -4.446435928344727
    7. 'def' → logprob: -4.571435928344727
    8. ' pour' → logprob: -4.571435928344727
    9. ' cherche' → logprob: -5.446435928344727
    10. ' le' → logprob: -5.446435928344727

Token 41: ' une' (ID: 2463)
  Prédit: ' x'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' x' → logprob: -0.3147587776184082
    2. 'x' → logprob: -1.3147587776184082
    3. ' i' → logprob: -7.939758777618408
    4. ' tout' → logprob: -8.06475830078125
    5. 'tout' → logprob: -8.43975830078125
    6. ' chaque' → logprob: -9.06475830078125
    7. ' trouver' → logprob: -9.31475830078125
    8. 'i' → logprob: -9.56475830078125
    9. ' n' → logprob: -10.06475830078125
    10. ' ' → logprob: -10.43975830078125

Token 42: ' taxe' (ID: 174271)
  Prédit: ' valeur'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' valeur' → logprob: -0.4646042585372925
    2. ' taxe' → logprob: -2.964604377746582
    3. ' ' → logprob: -3.339604377746582
    4. 'tax' → logprob: -3.589604377746582
    5. 'prix' → logprob: -3.714604377746582
    6. ' given' → logprob: -3.839604377746582
    7. 'x' → logprob: -4.089604377746582
    8. ' x' → logprob: -4.214604377746582
    9. 'val' → logprob: -4.214604377746582
    10. ' donnée' → logprob: -4.339604377746582

Token 43: ' de' (ID: 334)
  Prédit: ' de'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' de' → logprob: -0.23408851027488708
    2. ' ' → logprob: -2.23408842086792
    3. ' d' → logprob: -3.10908842086792
    4. ' donnée' → logprob: -4.35908842086792
    5. ' space' → logprob: -4.85908842086792
    6. ' sur' → logprob: -5.48408842086792
    7. 'd' → logprob: -5.85908842086792
    8. ' t' → logprob: -6.10908842086792
    9. 'de' → logprob: -6.23408842086792
    10. ' espace' → logprob: -6.35908842086792

Token 44: ' ' (ID: 220)
  Prédit: ' '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' ' → logprob: -0.1502702236175537
    2. '8' → logprob: -2.4002702236175537
    3. '1' → logprob: -3.5252702236175537
    4. '10' → logprob: -4.025270462036133
    5. '0' → logprob: -7.400270462036133
    6. ' t' → logprob: -8.025270462036133
    7. ' taxe' → logprob: -8.650270462036133
    8. ' la' → logprob: -9.650270462036133
    9. 'tax' → logprob: -9.900270462036133
    10. 't' → logprob: -10.150270462036133

Token 45: '8' (ID: 23)
  Prédit: '8'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '8' → logprob: -0.022506307810544968
    2. ' ' → logprob: -3.8975062370300293
    3. '0' → logprob: -6.772506237030029
    4. '1' → logprob: -7.147506237030029
    5. '10' → logprob: -11.897506713867188
    6. '7' → logprob: -12.147506713867188
    7. '108' → logprob: -12.272506713867188
    8. '4' → logprob: -13.022506713867188
    9. '3' → logprob: -13.147506713867188
    10. '2' → logprob: -13.522506713867188

Token 46: '%' (ID: 4)
  Prédit: '%'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '%' → logprob: -0.04929060861468315
    2. ' %' → logprob: -3.174290657043457
    3. ' ' → logprob: -6.424290657043457
    4. '0' → logprob: -6.924290657043457
    5. '2' → logprob: -7.674290657043457
    6. '5' → logprob: -7.799290657043457
    7. '1' → logprob: -7.924290657043457
    8. '3' → logprob: -8.174290657043457
    9. '6' → logprob: -8.174290657043457
    10. 'def' → logprob: -8.299290657043457

Token 47: ' (' (ID: 350)
  Prédit: ','
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ',' → logprob: -0.026769639924168587
    2. ' ,' → logprob: -3.7767696380615234
    3. ':' → logprob: -6.776769638061523
    4. '.' → logprob: -7.151769638061523
    5. '   ' → logprob: -7.901769638061523
    6. ',
' → logprob: -8.026769638061523
    7. ' ' → logprob: -8.151769638061523
    8. ' (' → logprob: -8.526769638061523
    9. '```' → logprob: -8.651769638061523
    10. ' :' → logprob: -10.026769638061523

Token 48: 'équ' (ID: 99214)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ')' → logprob: -0.35543423891067505
    2. '),' → logprob: -2.2304341793060303
    3. ' )' → logprob: -3.2304341793060303
    4. 'x' → logprob: -3.7304341793060303
    5. ' x' → logprob: -3.7304341793060303
    6. ' ),' → logprob: -3.7304341793060303
    7. '):
' → logprob: -3.9804341793060303
    8. ' ' → logprob: -4.105434417724609
    9. 'def' → logprob: -4.980434417724609
    10. ' la' → logprob: -5.480434417724609

Token 49: 'ivalent' (ID: 19253)
  Prédit: 'iv'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'iv' → logprob: -0.3093354105949402
    2. 'ivalent' → logprob: -1.434335470199585
    3. 'ival' → logprob: -3.684335470199585
    4. 'al' → logprob: -6.559335231781006
    5. 'i' → logprob: -8.184335708618164
    6. 'ivant' → logprob: -8.809335708618164
    7. 'iva' → logprob: -9.059335708618164
    8. 'a' → logprob: -9.184335708618164
    9. '```' → logprob: -9.559335708618164
    10. 'ale' → logprob: -9.684335708618164

Token 50: ' à' (ID: 1221)
  Prédit: ' à'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' à' → logprob: -0.030767787247896194
    2. 'à' → logprob: -4.780767917633057
    3. ' to' → logprob: -5.030767917633057
    4. '```' → logprob: -5.405767917633057
    5. ')' → logprob: -5.780767917633057
    6. ' ' → logprob: -6.530767917633057
    7. ' au' → logprob: -6.530767917633057
    8. ' a' → logprob: -6.655767917633057
    9. ''à' → logprob: -7.155767917633057
    10. 'def' → logprob: -8.030767440795898

Token 51: ' multiplier' (ID: 61814)
  Prédit: ' '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' ' → logprob: -1.1236239671707153
    2. ' une' → logprob: -1.1236239671707153
    3. ' un' → logprob: -2.248623847961426
    4. ' la' → logprob: -2.498623847961426
    5. ' "' → logprob: -3.248623847961426
    6. '"' → logprob: -3.498623847961426
    7. ' n' → logprob: -4.123623847961426
    8. ' def' → logprob: -4.248623847961426
    9. '1' → logprob: -4.373623847961426
    10. ' x' → logprob: -4.373623847961426

Token 52: ' par' (ID: 686)
  Prédit: ' par'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' par' → logprob: -0.31845080852508545
    2. ' x' → logprob: -1.5684508085250854
    3. 'x' → logprob: -3.818450927734375
    4. 'par' → logprob: -3.818450927734375
    5. ')' → logprob: -5.068450927734375
    6. ' le' → logprob: -5.193450927734375
    7. ' ' → logprob: -6.443450927734375
    8. ' la' → logprob: -6.943450927734375
    9. ' n' → logprob: -7.068450927734375
    10. '```' → logprob: -7.193450927734375

Token 53: ' ' (ID: 220)
  Prédit: ' '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' ' → logprob: -0.42942482233047485
    2. '1' → logprob: -1.05442476272583
    3. ' x' → logprob: -8.429425239562988
    4. ' `' → logprob: -9.304425239562988
    5. ' ' → logprob: -9.304425239562988
    6. '0' → logprob: -9.554425239562988
    7. '```' → logprob: -9.679425239562988
    8. 'x' → logprob: -10.179425239562988
    9. '`' → logprob: -10.304425239562988
    10. '10' → logprob: -10.304425239562988

Token 54: '108' (ID: 11003)
  Prédit: '1'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '1' → logprob: -0.3485749065876007
    2. ' ' → logprob: -1.2235748767852783
    3. '`' → logprob: -10.2235746383667
    4. '```' → logprob: -11.0360746383667
    5. '"' → logprob: -11.5360746383667
    6. ' "' → logprob: -11.9735746383667
    7. ' ' → logprob: -12.0360746383667
    8. '   ' → logprob: -12.0985746383667
    9. ' `' → logprob: -12.0985746383667
    10. ' x' → logprob: -12.1610746383667

Token 55: ' puis' (ID: 18766)
  Prédit: '/'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '/' → logprob: -0.4765457808971405
    2. ' /' → logprob: -1.351545810699463
    3. '),' → logprob: -3.226545810699463
    4. ')' → logprob: -3.476545810699463
    5. ' ),' → logprob: -4.351545810699463
    6. '0' → logprob: -4.851545810699463
    7. ' )' → logprob: -5.101545810699463
    8. '%),' → logprob: -5.351545810699463
    9. '100' → logprob: -5.476545810699463
    10. '%' → logprob: -5.851545810699463

Token 56: ' division' (ID: 21629)
  Prédit: ' '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' ' → logprob: -0.6148754954338074
    2. '100' → logprob: -1.4898755550384521
    3. '10' → logprob: -1.9898755550384521
    4. ' /' → logprob: -3.989875555038452
    5. '/' → logprob: -4.489875316619873
    6. 'div' → logprob: -4.614875316619873
    7. ' div' → logprob: -4.614875316619873
    8. '0' → logprob: -5.114875316619873
    9. ' divis' → logprob: -5.239875316619873
    10. '```' → logprob: -5.364875316619873

Token 57: ' entière' (ID: 61583)
  Prédit: ' par'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' par' → logprob: -0.41309288144111633
    2. ' entière' → logprob: -1.788092851638794
    3. 'par' → logprob: -2.288092851638794
    4. 'ent' → logprob: -3.788092851638794
    5. ' ent' → logprob: -3.913092851638794
    6. '   ' → logprob: -5.038093090057373
    7. '_ent' → logprob: -5.788093090057373
    8. ' ' → logprob: -6.163093090057373
    9. ' entier' → logprob: -6.163093090057373
    10. ')' → logprob: -6.288093090057373

Token 58: ' par' (ID: 686)
  Prédit: ' par'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' par' → logprob: -0.324741005897522
    2. ')' → logprob: -2.6997408866882324
    3. 'par' → logprob: -2.6997408866882324
    4. '),' → logprob: -2.6997408866882324
    5. ' ' → logprob: -4.074740886688232
    6. ' ),' → logprob: -4.199740886688232
    7. ' )' → logprob: -4.449740886688232
    8. '```' → logprob: -4.574740886688232
    9. '):' → logprob: -5.824740886688232
    10. ' by' → logprob: -6.074740886688232

Token 59: ' ' (ID: 220)
  Prédit: ' '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' ' → logprob: -0.6334118843078613
    2. '100' → logprob: -0.7584118843078613
    3. '10' → logprob: -7.383411884307861
    4. '1' → logprob: -8.758411407470703
    5. '9' → logprob: -11.008411407470703
    6. '  ' → logprob: -12.383411407470703
    7. '```' → logprob: -12.758411407470703
    8. '   ' → logprob: -13.695911407470703
    9. '12' → logprob: -13.820911407470703
    10. '99' → logprob: -13.883411407470703

Token 60: '100' (ID: 1353)
  Prédit: '100'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '100' → logprob: -0.0009711332386359572
    2. ' ' → logprob: -7.00097131729126
    3. '1' → logprob: -9.875970840454102
    4. '10' → logprob: -12.250970840454102
    5. '```' → logprob: -13.250970840454102
    6. '   ' → logprob: -14.750970840454102
    7. '  ' → logprob: -15.250970840454102
    8. '0' → logprob: -15.500970840454102
    9. '125' → logprob: -15.938470840454102
    10. ')' → logprob: -16.6259708404541

Token 61: '),
' (ID: 2313)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ')' → logprob: -0.953321635723114
    2. '):' → logprob: -0.953321635723114
    3. '):
' → logprob: -2.203321695327759
    4. '   ' → logprob: -2.328321695327759
    5. '),' → logprob: -4.70332145690918
    6. 'def' → logprob: -5.95332145690918
    7. ' )' → logprob: -6.32832145690918
    8. ')
' → logprob: -6.82832145690918
    9. ' ):' → logprob: -6.82832145690918
    10. ' ):
' → logprob: -6.82832145690918

Token 62: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.13269445300102234
    2. ' ' → logprob: -3.0076944828033447
    3. '    ' → logprob: -3.5076944828033447
    4. ' 
' → logprob: -4.382694244384766
    5. ':' → logprob: -4.757694244384766
    6. ' :' → logprob: -5.257694244384766
    7. '  ' → logprob: -6.507694244384766
    8. ' """
' → logprob: -6.507694244384766
    9. ')' → logprob: -6.757694244384766
    10. ',' → logprob: -6.882694244384766

Token 63: ' cette' (ID: 7696)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.22330522537231445
    2. '    ' → logprob: -3.0983052253723145
    3. ' """
' → logprob: -3.4733052253723145
    4. ')' → logprob: -3.5983052253723145
    5. ' )' → logprob: -3.7233052253723145
    6. ' for' → logprob: -3.9733052253723145
    7. ' ' → logprob: -4.3483052253723145
    8. ' return' → logprob: -4.9733052253723145
    9. ' """' → logprob: -5.5983052253723145
    10. ' 
' → logprob: -5.7233052253723145

Token 64: ' fonction' (ID: 17610)
  Prédit: ' fonction'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' fonction' → logprob: -1.2256803512573242
    2. 'def' → logprob: -1.6006803512573242
    3. 'fonction' → logprob: -1.9756803512573242
    4. '
' → logprob: -2.350680351257324
    5. ' function' → logprob: -3.100680351257324
    6. ' recherche' → logprob: -3.225680351257324
    7. ' def' → logprob: -3.600680351257324
    8. 'n' → logprob: -3.975680351257324
    9. 's' → logprob: -4.100680351257324
    10. ' ' → logprob: -4.350680351257324

Token 65: ' trouve' (ID: 30913)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.019157949835062027
    2. ' return' → logprob: -5.644157886505127
    3. ' for' → logprob: -5.769157886505127
    4. ' retourne' → logprob: -5.894157886505127
    5. ':' → logprob: -6.144157886505127
    6. ':
' → logprob: -6.519157886505127
    7. ' trouve' → logprob: -7.394157886505127
    8. 'def' → logprob: -7.519157886505127
    9. ' cherche' → logprob: -7.519157886505127
    10. ' :
' → logprob: -7.644157886505127

Token 66: ' le' (ID: 505)
  Prédit: ' l'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' l' → logprob: -0.8228268027305603
    2. ' le' → logprob: -1.322826862335205
    3. ' x' → logprob: -1.697826862335205
    4. ' un' → logprob: -2.822826862335205
    5. ' ' → logprob: -4.072826862335205
    6. ' la' → logprob: -4.322826862335205
    7. 'x' → logprob: -4.822826862335205
    8. 'l' → logprob: -5.322826862335205
    9. 's' → logprob: -6.197826862335205
    10. '```' → logprob: -6.822826862335205

Token 67: ' prix' (ID: 18771)
  Prédit: ' x'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' x' → logprob: -1.0838472843170166
    2. ' plus' → logprob: -1.2088472843170166
    3. ' original' → logprob: -1.7088472843170166
    4. ' premier' → logprob: -2.5838472843170166
    5. ' entier' → logprob: -3.8338472843170166
    6. 'x' → logprob: -3.9588472843170166
    7. ' nombre' → logprob: -4.3338470458984375
    8. ' prix' → logprob: -4.7088470458984375
    9. '```' → logprob: -5.0838470458984375
    10. 's' → logprob: -5.4588470458984375

Token 68: ' d' (ID: 272)
  Prédit: ' d'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' d' → logprob: -0.17921321094036102
    2. ' original' → logprob: -2.429213285446167
    3. '_original' → logprob: -3.679213285446167
    4. '_' → logprob: -4.429213047027588
    5. ' initial' → logprob: -4.679213047027588
    6. ' de' → logprob: -4.679213047027588
    7. 'd' → logprob: -5.054213047027588
    8. ' ' → logprob: -5.554213047027588
    9. '_initial' → logprob: -5.679213047027588
    10. '   ' → logprob: -6.804213047027588

Token 69: ''origine' (ID: 89355)
  Prédit: ''origine'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ''origine' → logprob: -0.2456786334514618
    2. ''' → logprob: -2.995678663253784
    3. 'e' → logprob: -2.995678663253784
    4. ''achat' → logprob: -3.370678663253784
    5. '_' → logprob: -3.620678663253784
    6. 'origine' → logprob: -3.745678663253784
    7. ' ' → logprob: -5.370678424835205
    8. '   ' → logprob: -5.495678424835205
    9. ' origine' → logprob: -5.495678424835205
    10. ' e' → logprob: -5.495678424835205

Token 70: ' x' (ID: 1215)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.09519690275192261
    2. '```' → logprob: -3.4701969623565674
    3. ' x' → logprob: -4.470196723937988
    4. 'def' → logprob: -4.970196723937988
    5. ' original' → logprob: -5.220196723937988
    6. ' initial' → logprob: -5.220196723937988
    7. ' en' → logprob: -5.220196723937988
    8. ' d' → logprob: -5.345196723937988
    9. ' de' → logprob: -5.470196723937988
    10. ' def' → logprob: -6.595196723937988

Token 71: ' si' (ID: 1784)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.3585662841796875
    2. ':' → logprob: -1.6085662841796875
    3. ',' → logprob: -3.3585662841796875
    4. '.' → logprob: -3.7335662841796875
    5. ' ' → logprob: -4.7335662841796875
    6. ')' → logprob: -4.7335662841796875
    7. ':
' → logprob: -5.4835662841796875
    8. '```' → logprob: -5.7335662841796875
    9. ' :' → logprob: -5.9835662841796875
    10. ' (' → logprob: -6.6085662841796875

Token 72: ' possible' (ID: 4149)
  Prédit: ' n'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' n' → logprob: -0.21305467188358307
    2. 'n' → logprob: -2.338054656982422
    3. ' on' → logprob: -3.588054656982422
    4. ' la' → logprob: -4.213054656982422
    5. ' x' → logprob: -4.338054656982422
    6. '```' → logprob: -4.963054656982422
    7. 'on' → logprob: -5.213054656982422
    8. 'arr' → logprob: -5.338054656982422
    9. ' le' → logprob: -5.838054656982422
    10. 'x' → logprob: -5.963054656982422

Token 73: ',' (ID: 11)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.28493237495422363
    2. ',' → logprob: -2.2849323749542236
    3. '.' → logprob: -2.7849323749542236
    4. ':' → logprob: -3.1599323749542236
    5. '```' → logprob: -4.9099321365356445
    6. ' ' → logprob: -5.4099321365356445
    7. 'def' → logprob: -5.5349321365356445
    8. '    ' → logprob: -5.6599321365356445
    9. ' :' → logprob: -5.9099321365356445
    10. '
' → logprob: -6.1599321365356445

Token 74: ' sinon' (ID: 52915)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.06379090249538422
    2. '```' → logprob: -3.688790798187256
    3. ' sinon' → logprob: -4.563790798187256
    4. ' et' → logprob: -5.438790798187256
    5. ' en' → logprob: -5.688790798187256
    6. ' ' → logprob: -5.813790798187256
    7. '    ' → logprob: -6.063790798187256
    8. ' 
' → logprob: -6.563790798187256
    9. 'def' → logprob: -6.938790798187256
    10. ',' → logprob: -6.938790798187256

Token 75: ' indique' (ID: 97324)
  Prédit: ' None'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' None' → logprob: -0.9603105783462524
    2. '   ' → logprob: -1.5853105783462524
    3. ' retourne' → logprob: -1.7103105783462524
    4. 'None' → logprob: -2.585310459136963
    5. '    ' → logprob: -2.710310459136963
    6. ' return' → logprob: -3.335310459136963
    7. ' ' → logprob: -3.835310459136963
    8. ' raise' → logprob: -4.960310459136963
    9. ' ' → logprob: -4.960310459136963
    10. ' retourner' → logprob: -5.710310459136963

Token 76: ' l' (ID: 305)
  Prédit: ' None'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' None' → logprob: -0.40118372440338135
    2. 'None' → logprob: -2.276183605194092
    3. ' ' → logprob: -2.526183605194092
    4. ' "' → logprob: -2.651183605194092
    5. '"' → logprob: -3.401183605194092
    6. '   ' → logprob: -4.276183605194092
    7. ' '' → logprob: -4.901183605194092
    8. ' -' → logprob: -5.276183605194092
    9. ' que' → logprob: -5.401183605194092
    10. '-' → logprob: -5.776183605194092

Token 77: ''' (ID: 6)
  Prédit: '''
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ''' → logprob: -0.7278279662132263
    2. 'e' → logprob: -0.8528279662132263
    3. 'a' → logprob: -2.977828025817871
    4. ''é' → logprob: -3.977828025817871
    5. 'None' → logprob: -5.352828025817871
    6. ''espace' → logprob: -5.602828025817871
    7. ''a' → logprob: -5.977828025817871
    8. ''er' → logprob: -6.227828025817871
    9. ''e' → logprob: -7.352828025817871
    10. '"' → logprob: -7.352828025817871

Token 78: 'absence' (ID: 99054)
  Prédit: '''
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ''' → logprob: -0.5786452889442444
    2. '"' → logprob: -1.9536452293395996
    3. 'i' → logprob: -2.3286452293395996
    4. ''i' → logprob: -2.3286452293395996
    5. ''im' → logprob: -3.4536452293395996
    6. 'None' → logprob: -4.0786452293396
    7. 'I' → logprob: -4.7036452293396
    8. 'im' → logprob: -4.8286452293396
    9. ''n' → logprob: -5.0786452293396
    10. 'n' → logprob: -5.2036452293396

Token 79: ' d' (ID: 272)
  Prédit: ' de'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' de' → logprob: -0.15665343403816223
    2. ' d' → logprob: -2.03165340423584
    3. ' ' → logprob: -4.65665340423584
    4. 'def' → logprob: -6.15665340423584
    5. 'de' → logprob: -7.53165340423584
    6. 'd' → logprob: -8.03165340423584
    7. '```' → logprob: -8.53165340423584
    8. '  ' → logprob: -8.65665340423584
    9. ' return' → logprob: -9.28165340423584
    10. ' def' → logprob: -9.28165340423584

Token 80: ''une' (ID: 13337)
  Prédit: 'e'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'e' → logprob: -0.13759784400463104
    2. ''' → logprob: -2.1375977993011475
    3. 'u' → logprob: -5.762598037719727
    4. ''un' → logprob: -6.762598037719727
    5. ' ' → logprob: -6.887598037719727
    6. ' e' → logprob: -7.137598037719727
    7. ''ex' → logprob: -7.137598037719727
    8. ''e' → logprob: -7.262598037719727
    9. ''une' → logprob: -7.762598037719727
    10. ''espace' → logprob: -7.762598037719727

Token 81: ' telle' (ID: 70904)
  Prédit: ' solution'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' solution' → logprob: -0.2633136808872223
    2. ' ' → logprob: -2.1383137702941895
    3. 'solution' → logprob: -3.1383137702941895
    4. 's' → logprob: -4.5133137702941895
    5. ')' → logprob: -4.6383137702941895
    6. '_solution' → logprob: -4.7633137702941895
    7. '_' → logprob: -5.0133137702941895
    8. '"' → logprob: -5.6383137702941895
    9. '```' → logprob: -5.6383137702941895
    10. '\n' → logprob: -6.1383137702941895

Token 82: ' valeur' (ID: 41664)
  Prédit: ' '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' ' → logprob: -0.2570951282978058
    2. ' solution' → logprob: -2.0070950984954834
    3. ' valeur' → logprob: -2.5070950984954834
    4. 'solution' → logprob: -5.5070953369140625
    5. '   ' → logprob: -7.2570953369140625
    6. ' x' → logprob: -7.3820953369140625
    7. '_' → logprob: -7.6320953369140625
    8. ' prix' → logprob: -7.7570953369140625
    9. 's' → logprob: -7.8820953369140625
    10. ' 
' → logprob: -8.007095336914062

Token 83: '.
' (ID: 558)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.12617823481559753
    2. ':' → logprob: -2.50117826461792
    3. '```' → logprob: -4.12617826461792
    4. ':
' → logprob: -4.50117826461792
    5. '
' → logprob: -5.50117826461792
    6. '"' → logprob: -6.87617826461792
    7. '"""
' → logprob: -7.62617826461792
    8. '\n' → logprob: -8.126177787780762
    9. 'def' → logprob: -8.251177787780762
    10. '``' → logprob: -8.251177787780762

Token 84: '    
' (ID: 1944)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.0028679966926574707
    2. '```' → logprob: -6.502868175506592
    3. '    ' → logprob: -7.627868175506592
    4. '"""' → logprob: -8.127867698669434
    5. '
' → logprob: -8.877867698669434
    6. ')' → logprob: -9.252867698669434
    7. '`' → logprob: -9.627867698669434
    8. '"' → logprob: -9.627867698669434
    9. '    
' → logprob: -10.127867698669434
    10. '"""
' → logprob: -10.252867698669434

Token 85: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.007216845639050007
    2. '    ' → logprob: -5.382216930389404
    3. '"""' → logprob: -6.507216930389404
    4. '```' → logprob: -7.382216930389404
    5. ')' → logprob: -8.382216453552246
    6. '"""
' → logprob: -10.007216453552246
    7. '       ' → logprob: -10.132216453552246
    8. '"' → logprob: -10.257216453552246
    9. ' """' → logprob: -10.507216453552246
    10. ' ' → logprob: -10.882216453552246

Token 86: ' Args' (ID: 39185)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.02413330227136612
    2. 'for' → logprob: -4.524133205413818
    3. ' for' → logprob: -4.774133205413818
    4. '```' → logprob: -6.149133205413818
    5. '    ' → logprob: -6.899133205413818
    6. '"""' → logprob: -7.774133205413818
    7. 'def' → logprob: -9.024133682250977
    8. '
' → logprob: -9.149133682250977
    9. 'n' → logprob: -9.524133682250977
    10. '"""
' → logprob: -9.774133682250977

Token 87: ':
' (ID: 734)
  Prédit: ':'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ':' → logprob: -0.49430912733078003
    2. ' :' → logprob: -1.4943091869354248
    3. '   ' → logprob: -1.8693091869354248
    4. ',' → logprob: -5.869308948516846
    5. '):' → logprob: -5.994308948516846
    6. ' ' → logprob: -6.744308948516846
    7. ')' → logprob: -7.119308948516846
    8. 'def' → logprob: -7.369308948516846
    9. '[' → logprob: -7.494308948516846
    10. ' ):' → logprob: -7.494308948516846

Token 88: '       ' (ID: 309)
  Prédit: 'n'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'n' → logprob: -0.8541120886802673
    2. '   ' → logprob: -1.229112148284912
    3. '    ' → logprob: -1.479112148284912
    4. ' n' → logprob: -2.979112148284912
    5. ' price' → logprob: -7.479112148284912
    6. ' ' → logprob: -7.729112148284912
    7. 'x' → logprob: -8.104111671447754
    8. '     
' → logprob: -8.104111671447754
    9. '```' → logprob: -8.604111671447754
    10. '  ' → logprob: -8.604111671447754

Token 89: ' n' (ID: 297)
  Prédit: 'n'
  Correct (stricte): False
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'n' (adapté à ' n') → logprob: -0.232138991355896
    2. ' n' → logprob: -1.607138991355896
    3. '   ' → logprob: -5.1071391105651855
    4. 'self' → logprob: -7.7321391105651855
    5. ' self' → logprob: -8.732138633728027
    6. '	n' → logprob: -11.107138633728027
    7. 'x' → logprob: -11.982138633728027
    8. 'int' → logprob: -12.482138633728027
    9. '    ' → logprob: -12.857138633728027
    10. '    
' → logprob: -12.982138633728027

Token 90: ' (' (ID: 350)
  Prédit: ':'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ':' → logprob: -0.5587096214294434
    2. ':int' → logprob: -1.5587096214294434
    3. '(int' → logprob: -2.5587096214294434
    4. '):' → logprob: -3.3087096214294434
    5. ' :' → logprob: -3.5587096214294434
    6. ' (' → logprob: -3.5587096214294434
    7. ' int' → logprob: -4.058709621429443
    8. 'int' → logprob: -4.558709621429443
    9. ' ):' → logprob: -5.183709621429443
    10. ')' → logprob: -5.683709621429443

Token 91: 'int' (ID: 491)
  Prédit: 'int'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'int' → logprob: -0.004462162498384714
    2. ' int' → logprob: -5.504462242126465
    3. ')' → logprob: -8.004462242126465
    4. '   ' → logprob: -11.254462242126465
    5. ' )' → logprob: -11.254462242126465
    6. '):' → logprob: -11.754462242126465
    7. '```' → logprob: -12.129462242126465
    8. '[int' → logprob: -13.129462242126465
    9. '  ' → logprob: -13.879462242126465
    10. ':int' → logprob: -14.129462242126465

Token 92: '):' (ID: 3127)
  Prédit: '):'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '):' → logprob: -0.28134047985076904
    2. ')' → logprob: -1.406340479850769
    3. '):
' → logprob: -9.156340599060059
    4. ' ):' → logprob: -10.156340599060059
    5. '   ' → logprob: -11.406340599060059
    6. ',' → logprob: -11.531340599060059
    7. ' )' → logprob: -11.781340599060059
    8. 'int' → logprob: -12.531340599060059
    9. ':' → logprob: -13.031340599060059
    10. '),' → logprob: -13.031340599060059

Token 93: ' Le' (ID: 2018)
  Prédit: ' Le'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' Le' → logprob: -0.41069409251213074
    2. ' le' → logprob: -2.035694122314453
    3. ' Prix' → logprob: -2.785694122314453
    4. 'Le' → logprob: -3.160694122314453
    5. ' int' → logprob: -3.535694122314453
    6. '   ' → logprob: -3.785694122314453
    7. 'Prix' → logprob: -4.410694122314453
    8. ' prix' → logprob: -4.535694122314453
    9. ' #' → logprob: -4.785694122314453
    10. ' original' → logprob: -5.535694122314453

Token 94: ' prix' (ID: 18771)
  Prédit: ' prix'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' prix' → logprob: -0.03809542581439018
    2. ' montant' → logprob: -3.663095474243164
    3. 'prix' → logprob: -5.038095474243164
    4. ' price' → logprob: -5.788095474243164
    5. ' nombre' → logprob: -7.538095474243164
    6. ' ' → logprob: -7.913095474243164
    7. ' original' → logprob: -8.288095474243164
    8. '  ' → logprob: -8.788095474243164
    9. ' space' → logprob: -9.163095474243164
    10. ' résultat' → logprob: -9.163095474243164

Token 95: ' final' (ID: 1721)
  Prédit: '_'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '_' → logprob: -0.10823079943656921
    2. ' d' → logprob: -2.8582308292388916
    3. '_original' → logprob: -3.6082308292388916
    4. ' _' → logprob: -5.7332305908203125
    5. '_d' → logprob: -5.7332305908203125
    6. 'd' → logprob: -6.1082305908203125
    7. '_initial' → logprob: -6.3582305908203125
    8. ' ' → logprob: -6.4832305908203125
    9. ' original' → logprob: -6.9832305908203125
    10. ')' → logprob: -7.1082305908203125

Token 96: ' après' (ID: 16460)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')' → logprob: -0.7238886952400208
    2. ' )' → logprob: -0.7238886952400208
    3. ' d' → logprob: -4.348888874053955
    4. '   ' → logprob: -5.848888874053955
    5. ' après' → logprob: -5.973888874053955
    6. ' de' → logprob: -6.098888874053955
    7. ' avec' → logprob: -6.223888874053955
    8. ',' → logprob: -6.723888874053955
    9. ' initial' → logprob: -6.973888874053955
    10. ' original' → logprob: -7.098888874053955

Token 97: ' taxe' (ID: 174271)
  Prédit: 'tax'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'tax' → logprob: -0.8258589506149292
    2. ' tax' → logprob: -1.7008589506149292
    3. ' taxe' → logprob: -1.8258589506149292
    4. ' taxes' → logprob: -2.4508590698242188
    5. ' la' → logprob: -2.9508590698242188
    6. ' application' → logprob: -3.5758590698242188
    7. ' l' → logprob: -4.075859069824219
    8. ' arr' → logprob: -4.825859069824219
    9. 'arr' → logprob: -4.825859069824219
    10. ' taxation' → logprob: -5.200859069824219

Token 98: ' (' (ID: 350)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.11868095397949219
    2. ')' → logprob: -2.618680953979492
    3. '):' → logprob: -3.493680953979492
    4. '```' → logprob: -5.743680953979492
    5. '):
' → logprob: -5.868680953979492
    6. ',' → logprob: -7.618680953979492
    7. '  ' → logprob: -7.743680953979492
    8. '"""' → logprob: -8.118680953979492
    9. 'def' → logprob: -8.368680953979492
    10. ' ' → logprob: -8.868680953979492

Token 99: 'ent' (ID: 299)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ')' → logprob: -0.0801311507821083
    2. ' )' → logprob: -3.2051310539245605
    3. 'int' → logprob: -5.2051310539245605
    4. ' prix' → logprob: -5.2051310539245605
    5. 'prix' → logprob: -5.5801310539245605
    6. '   ' → logprob: -5.9551310539245605
    7. ' int' → logprob: -5.9551310539245605
    8. '")' → logprob: -6.3301310539245605
    9. 'tax' → logprob: -6.5801310539245605
    10. '):' → logprob: -6.7051310539245605

Token 100: 'ier' (ID: 905)
  Prédit: 'ier'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'ier' → logprob: -0.19993901252746582
    2. '   ' → logprob: -2.449939012527466
    3. ')' → logprob: -3.449939012527466
    4. 'ière' → logprob: -3.449939012527466
    5. 'i' → logprob: -3.699939012527466
    6. 'ié' → logprob: -6.574938774108887
    7. 'e' → logprob: -6.949938774108887
    8. 'a' → logprob: -7.074938774108887
    9. 'r' → logprob: -7.324938774108887
    10. ' ' → logprob: -7.824938774108887

Token 101: ').
' (ID: 6294)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ')' → logprob: -0.010484571568667889
    2. '   ' → logprob: -5.01048469543457
    3. ')
' → logprob: -6.88548469543457
    4. '):' → logprob: -7.13548469543457
    5. '):
' → logprob: -7.13548469543457
    6. ' )' → logprob: -7.26048469543457
    7. ').' → logprob: -9.01048469543457
    8. '```' → logprob: -9.63548469543457
    9. ',' → logprob: -10.01048469543457
    10. '),' → logprob: -10.63548469543457

Token 102: '    
' (ID: 1944)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.008748006075620651
    2. ')' → logprob: -5.1337480545043945
    3. '```' → logprob: -7.3837480545043945
    4. '    ' → logprob: -7.6337480545043945
    5. ' 
' → logprob: -7.8837480545043945
    6. '    
' → logprob: -8.008748054504395
    7. '"""' → logprob: -8.008748054504395
    8. ':' → logprob: -8.883748054504395
    9. ' ' → logprob: -9.633748054504395
    10. 'def' → logprob: -10.008748054504395

Token 103: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.000890259922016412
    2. '"""' → logprob: -8.000890731811523
    3. 'Returns' → logprob: -8.500890731811523
    4. ')' → logprob: -9.125890731811523
    5. ' """' → logprob: -9.625890731811523
    6. ' """
' → logprob: -10.250890731811523
    7. '
' → logprob: -10.500890731811523
    8. '```' → logprob: -10.625890731811523
    9. 'def' → logprob: -10.750890731811523
    10. ' Returns' → logprob: -11.250890731811523

Token 104: ' Returns' (ID: 9609)
  Prédit: 'Returns'
  Correct (stricte): False
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'Returns' (adapté à ' Returns') → logprob: -0.0006874137907288969
    2. '   ' → logprob: -8.125687599182129
    3. ' Returns' → logprob: -8.500687599182129
    4. 'returns' → logprob: -8.875687599182129
    5. 'Retour' → logprob: -11.000687599182129
    6. 'Return' → logprob: -11.500687599182129
    7. '"""
' → logprob: -11.750687599182129
    8. 'return' → logprob: -12.375687599182129
    9. '"""' → logprob: -12.875687599182129
    10. '
' → logprob: -12.875687599182129

Token 105: ':
' (ID: 734)
  Prédit: ' int'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' int' → logprob: -0.8151291012763977
    2. ':' → logprob: -1.315129041671753
    3. '   ' → logprob: -1.940129041671753
    4. 'int' → logprob: -2.690129041671753
    5. ':
' → logprob: -3.565129041671753
    6. ' :' → logprob: -4.065129280090332
    7. '    ' → logprob: -4.190129280090332
    8. '```' → logprob: -5.440129280090332
    9. ' None' → logprob: -5.690129280090332
    10. '[int' → logprob: -5.940129280090332

Token 106: '       ' (ID: 309)
  Prédit: ' int'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' int' → logprob: -0.39634618163108826
    2. '   ' → logprob: -1.2713462114334106
    3. ' None' → logprob: -4.146346092224121
    4. '    ' → logprob: -4.396346092224121
    5. 'int' → logprob: -4.896346092224121
    6. ' Optional' → logprob: -5.021346092224121
    7. '       ' → logprob: -5.646346092224121
    8. ' tuple' → logprob: -8.646346092224121
    9. '```' → logprob: -8.771346092224121
    10. ' Union' → logprob: -9.021346092224121

Token 107: ' int' (ID: 677)
  Prédit: 'int'
  Correct (stricte): False
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'int' (adapté à ' int') → logprob: -0.008358660154044628
    2. ' int' → logprob: -5.008358478546143
    3. '   ' → logprob: -7.258358478546143
    4. 'Optional' → logprob: -7.258358478546143
    5. 'Union' → logprob: -9.0083589553833
    6. ' Optional' → logprob: -10.3833589553833
    7. 'list' → logprob: -10.5083589553833
    8. '[int' → logprob: -11.5083589553833
    9. '```' → logprob: -11.5083589553833
    10. '       ' → logprob: -12.0083589553833

Token 108: ' or' (ID: 503)
  Prédit: ':'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ':' → logprob: -0.44620025157928467
    2. ' or' → logprob: -1.0712002515792847
    3. 'or' → logprob: -4.821200370788574
    4. ' ou' → logprob: -5.071200370788574
    5. '|' → logprob: -6.321200370788574
    6. ' |' → logprob: -8.071200370788574
    7. 'None' → logprob: -8.321200370788574
    8. '```' → logprob: -8.696200370788574
    9. 'ou' → logprob: -9.071200370788574
    10. '   ' → logprob: -9.446200370788574

Token 109: ' str' (ID: 989)
  Prédit: 'None'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'None' → logprob: -0.050602883100509644
    2. ' None' → logprob: -3.175602912902832
    3. 'str' → logprob: -5.550602912902832
    4. '   ' → logprob: -5.675602912902832
    5. ' str' → logprob: -8.300602912902832
    6. 'float' → logprob: -13.050602912902832
    7. ' ' → logprob: -13.175602912902832
    8. '  ' → logprob: -13.175602912902832
    9. 'none' → logprob: -13.675602912902832
    10. '_None' → logprob: -13.675602912902832

Token 110: ':' (ID: 25)
  Prédit: ':'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ':' → logprob: -0.004960732068866491
    2. ':
' → logprob: -5.379960536956787
    3. '   ' → logprob: -8.254961013793945
    4. ' :' → logprob: -10.379961013793945
    5. '```' → logprob: -10.504961013793945
    6. '       ' → logprob: -12.629961013793945
    7. '":' → logprob: -13.004961013793945
    8. '    ' → logprob: -13.004961013793945
    9. '"""
' → logprob: -13.004961013793945
    10. ':return' → logprob: -13.129961013793945

Token 111: ' Le' (ID: 2018)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.45649027824401855
    2. ' Le' → logprob: -1.7064902782440186
    3. '"' → logprob: -3.3314902782440186
    4. '       ' → logprob: -3.5814902782440186
    5. 'Le' → logprob: -3.5814902782440186
    6. ' La' → logprob: -3.7064902782440186
    7. ' L' → logprob: -4.706490516662598
    8. ' The' → logprob: -4.831490516662598
    9. 'La' → logprob: -4.831490516662598
    10. ' x' → logprob: -4.956490516662598

Token 112: ' prix' (ID: 18771)
  Prédit: 'prix'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'prix' → logprob: -0.12631651759147644
    2. ' prix' → logprob: -2.376316547393799
    3. 'plus' → logprob: -5.126316547393799
    4. '   ' → logprob: -5.126316547393799
    5. 'prem' → logprob: -5.751316547393799
    6. 'nombre' → logprob: -5.876316547393799
    7. ' plus' → logprob: -6.001316547393799
    8. ' original' → logprob: -6.376316547393799
    9. ' nombre' → logprob: -6.876316547393799
    10. 'original' → logprob: -7.126316547393799

Token 113: ' initial' (ID: 4871)
  Prédit: ' d'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' d' → logprob: -0.18106034398078918
    2. '_' → logprob: -2.681060314178467
    3. '_original' → logprob: -2.681060314178467
    4. 'd' → logprob: -4.431060314178467
    5. ' original' → logprob: -5.306060314178467
    6. '_d' → logprob: -5.556060314178467
    7. ' de' → logprob: -5.806060314178467
    8. 'original' → logprob: -6.181060314178467
    9. '   ' → logprob: -6.931060314178467
    10. '_initial' → logprob: -7.806060314178467

Token 114: ' x' (ID: 1215)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.5439239144325256
    2. ' d' → logprob: -1.7939238548278809
    3. ' de' → logprob: -2.543923854827881
    4. ' original' → logprob: -2.668923854827881
    5. ' None' → logprob: -4.293923854827881
    6. '<|end|>' → logprob: -4.293923854827881
    7. 'None' → logprob: -4.418923854827881
    8. ' or' → logprob: -4.543923854827881
    9. '    
' → logprob: -4.918923854827881
    10. ' ou' → logprob: -5.168923854827881

Token 115: ' si' (ID: 1784)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.4671458899974823
    2. ' ou' → logprob: -1.0921459197998047
    3. ' or' → logprob: -4.592145919799805
    4. ' possible' → logprob: -4.717145919799805
    5. '       ' → logprob: -5.217145919799805
    6. ' ' → logprob: -5.842145919799805
    7. 'ou' → logprob: -6.217145919799805
    8. ' si' → logprob: -6.342145919799805
    9. ' if' → logprob: -7.092145919799805
    10. '_possible' → logprob: -7.092145919799805

Token 116: ' trouvé' (ID: 60081)
  Prédit: ' il'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' il' → logprob: -1.3368871212005615
    2. ' exist' → logprob: -1.9618871212005615
    3. 'ex' → logprob: -2.3368871212005615
    4. ' trouvé' → logprob: -2.3368871212005615
    5. ' int' → logprob: -2.5868871212005615
    6. ' une' → logprob: -2.8368871212005615
    7. ' exists' → logprob: -2.9618871212005615
    8. 'int' → logprob: -3.0868871212005615
    9. ' existe' → logprob: -3.2118871212005615
    10. ' possible' → logprob: -3.5868871212005615

Token 117: ',' (ID: 11)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.4499175548553467
    2. ',' → logprob: -1.4499175548553467
    3. ' ou' → logprob: -2.1999175548553467
    4. ' or' → logprob: -4.699917793273926
    5. 'ou' → logprob: -5.824917793273926
    6. '    
' → logprob: -6.574917793273926
    7. ' sinon' → logprob: -6.574917793273926
    8. '```' → logprob: -7.199917793273926
    9. '
' → logprob: -8.324917793273926
    10. ' ,' → logprob: -8.574917793273926

Token 118: ' sinon' (ID: 52915)
  Prédit: ' sinon'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' sinon' → logprob: -0.2755124568939209
    2. '"' → logprob: -1.650512456893921
    3. ' ou' → logprob: -4.1505126953125
    4. '   ' → logprob: -4.5255126953125
    5. ' "' → logprob: -5.2755126953125
    6. 'ou' → logprob: -5.5255126953125
    7. ' else' → logprob: -6.2755126953125
    8. ' or' → logprob: -6.4005126953125
    9. ' autrement' → logprob: -6.5255126953125
    10. 'sin' → logprob: -6.5255126953125

Token 119: ' ':' (ID: 30751)
  Prédit: '"'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '"' → logprob: -0.21890604496002197
    2. ' "' → logprob: -1.718906044960022
    3. '   ' → logprob: -5.093905925750732
    4. ''' → logprob: -5.468905925750732
    5. '"A' → logprob: -5.718905925750732
    6. '"No' → logprob: -6.343905925750732
    7. ' '' → logprob: -6.843905925750732
    8. 'None' → logprob: -8.96890640258789
    9. ''A' → logprob: -9.21890640258789
    10. ' None' → logprob: -9.21890640258789

Token 120: '('' (ID: 706)
  Prédit: '''
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ''' → logprob: -0.9495498538017273
    2. '"' → logprob: -1.949549913406372
    3. ' "' → logprob: -2.449549913406372
    4. ' '' → logprob: -2.699549913406372
    5. 'not' → logprob: -3.324549913406372
    6. 'None' → logprob: -3.699549913406372
    7. 'none' → logprob: -3.824549913406372
    8. ')' → logprob: -3.824549913406372
    9. ' None' → logprob: -4.074549674987793
    10. ''A' → logprob: -4.199549674987793

Token 121: '.
' (ID: 558)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.05217600613832474
    2. '
' → logprob: -3.302175998687744
    3. '    
' → logprob: -5.302175998687744
    4. ':' → logprob: -5.427175998687744
    5. ' for' → logprob: -5.927175998687744
    6. 'def' → logprob: -7.427175998687744
    7. 'for' → logprob: -7.927175998687744
    8. ':
' → logprob: -8.427176475524902
    9. '  
' → logprob: -8.552176475524902
    10. '   
' → logprob: -8.927176475524902

Token 122: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.005986154545098543
    2. '
' → logprob: -6.005986213684082
    3. ' for' → logprob: -6.130986213684082
    4. 'for' → logprob: -7.630986213684082
    5. '    
' → logprob: -7.755986213684082
    6. 'def' → logprob: -8.755986213684082
    7. '```' → logprob: -9.130986213684082
    8. '    ' → logprob: -9.255986213684082
    9. '  
' → logprob: -11.755986213684082
    10. '   
' → logprob: -11.755986213684082

Token 123: ' """
' (ID: 7037)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.150147944688797
    2. ' for' → logprob: -2.2751479148864746
    3. 'for' → logprob: -3.6501479148864746
    4. '
' → logprob: -4.650147914886475
    5. '    
' → logprob: -7.775147914886475
    6. '    ' → logprob: -8.400148391723633
    7. ')' → logprob: -9.275148391723633
    8. ' 
' → logprob: -9.775148391723633
    9. 'def' → logprob: -10.275148391723633
    10. '```' → logprob: -10.275148391723633

Token 124: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.26010748744010925
    2. ' for' → logprob: -1.5101075172424316
    3. 'for' → logprob: -5.135107517242432
    4. '
' → logprob: -6.385107517242432
    5. 'def' → logprob: -8.385107040405273
    6. '    
' → logprob: -9.135107040405273
    7. '    ' → logprob: -9.510107040405273
    8. ' 
' → logprob: -10.760107040405273
    9. ' def' → logprob: -10.885107040405273
    10. ' indentation' → logprob: -10.885107040405273

Token 125: ' #' (ID: 1069)
  Prédit: 'for'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'for' → logprob: -0.005005682818591595
    2. ' for' → logprob: -5.630005836486816
    3. 'lower' → logprob: -7.880005836486816
    4. '   ' → logprob: -8.505005836486816
    5. 'min' → logprob: -8.505005836486816
    6. 'from' → logprob: -8.755005836486816
    7. 'low' → logprob: -8.880005836486816
    8. 'start' → logprob: -9.255005836486816
    9. 'import' → logprob: -9.505005836486816
    10. 'possible' → logprob: -10.005005836486816

Token 126: ' Bou' (ID: 33816)
  Prédit: ' for'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' for' → logprob: -0.1301351636648178
    2. 'for' → logprob: -2.1301350593566895
    3. '   ' → logprob: -7.0051350593566895
    4. ' range' → logprob: -7.3801350593566895
    5. ' ' → logprob: -7.8801350593566895
    6. ' ' → logprob: -8.505135536193848
    7. ' space' → logprob: -8.630135536193848
    8. ' possible' → logprob: -9.255135536193848
    9. 'range' → logprob: -9.380135536193848
    10. 'space' → logprob: -9.755135536193848

Token 127: 'cle' (ID: 3170)
  Prédit: 'cle'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'cle' → logprob: -0.06662356108427048
    2. '   ' → logprob: -3.0666234493255615
    3. 'c' → logprob: -4.191623687744141
    4. 'cler' → logprob: -6.316623687744141
    5. 'n' → logprob: -8.31662368774414
    6. '       ' → logprob: -8.94162368774414
    7. '  ' → logprob: -9.19162368774414
    8. 'r' → logprob: -9.31662368774414
    9. 'cles' → logprob: -9.81662368774414
    10. '```' → logprob: -9.81662368774414

Token 128: ' sur' (ID: 1512)
  Prédit: ' for'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' for' → logprob: -0.02022780105471611
    2. 'for' → logprob: -4.020227909088135
    3. '   ' → logprob: -6.645227909088135
    4. ' i' → logprob: -7.645227909088135
    5. ' x' → logprob: -9.020227432250977
    6. ' ' → logprob: -9.645227432250977
    7. ' ' → logprob: -10.270227432250977
    8. ' range' → logprob: -11.145227432250977
    9. 'x' → logprob: -11.770227432250977
    10. ' from' → logprob: -11.895227432250977

Token 129: ' toutes' (ID: 17502)
  Prédit: 'x'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'x' → logprob: -0.44028240442276
    2. ' x' → logprob: -1.0652823448181152
    3. ' range' → logprob: -5.940282344818115
    4. 'possible' → logprob: -6.190282344818115
    5. 'range' → logprob: -6.190282344818115
    6. ' possible' → logprob: -6.315282344818115
    7. ' i' → logprob: -6.940282344818115
    8. 'i' → logprob: -7.190282344818115
    9. 'max' → logprob: -8.065282821655273
    10. ' max' → logprob: -9.065282821655273

Token 130: ' les' (ID: 1341)
  Prédit: ' x'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' x' → logprob: -0.09688358008861542
    2. 'x' → logprob: -2.971883535385132
    3. ' possible' → logprob: -3.596883535385132
    4. ' range' → logprob: -5.096883773803711
    5. ' for' → logprob: -6.221883773803711
    6. '   ' → logprob: -6.221883773803711
    7. 'possible' → logprob: -6.346883773803711
    8. 'range' → logprob: -7.221883773803711
    9. ' i' → logprob: -7.846883773803711
    10. ' xrange' → logprob: -8.721883773803711

Token 131: ' valeurs' (ID: 73668)
  Prédit: 'x'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'x' → logprob: -0.2079610824584961
    2. ' x' → logprob: -2.457961082458496
    3. ' possible' → logprob: -3.082961082458496
    4. 'possible' → logprob: -3.332961082458496
    5. 'poss' → logprob: -4.582961082458496
    6. ' possibles' → logprob: -4.957961082458496
    7. ' poss' → logprob: -7.207961082458496
    8. '   ' → logprob: -7.582961082458496
    9. 'val' → logprob: -7.957961082458496
    10. 'p' → logprob: -8.207961082458496

Token 132: ' possibles' (ID: 97753)
  Prédit: ' x'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' x' → logprob: -0.9941704869270325
    2. ' for' → logprob: -1.1191704273223877
    3. 'x' → logprob: -1.8691704273223877
    4. '   ' → logprob: -2.2441704273223877
    5. 'for' → logprob: -3.3691704273223877
    6. ' possible' → logprob: -5.494170665740967
    7. ' i' → logprob: -6.994170665740967
    8. ' range' → logprob: -7.119170665740967
    9. ' de' → logprob: -7.494170665740967
    10. 'possible' → logprob: -7.494170665740967

Token 133: ' de' (ID: 334)
  Prédit: 'for'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'for' → logprob: -0.5945420265197754
    2. ' for' → logprob: -0.8445420265197754
    3. 'x' → logprob: -4.719542026519775
    4. '   ' → logprob: -4.844542026519775
    5. ' x' → logprob: -6.469542026519775
    6. ' i' → logprob: -11.094541549682617
    7. ' ' → logprob: -11.219541549682617
    8. 'i' → logprob: -11.344541549682617
    9. ' ' → logprob: -11.719541549682617
    10. ' range' → logprob: -11.844541549682617

Token 134: ' x' (ID: 1215)
  Prédit: 'x'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'x' → logprob: -0.07720007747411728
    2. ' x' → logprob: -2.827200174331665
    3. 'n' → logprob: -4.577199935913086
    4. ' n' → logprob: -5.952199935913086
    5. 'range' → logprob: -6.827199935913086
    6. ' range' → logprob: -7.827199935913086
    7. 'i' → logprob: -8.202199935913086
    8. 'possible' → logprob: -8.702199935913086
    9. ' i' → logprob: -9.702199935913086
    10. ' possible' → logprob: -10.202199935913086

Token 135: ' de' (ID: 334)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.49877211451530457
    2. ' for' → logprob: -0.998772144317627
    3. 'for' → logprob: -4.248772144317627
    4. ' range' → logprob: -5.498772144317627
    5. ' x' → logprob: -6.123772144317627
    6. ' in' → logprob: -6.873772144317627
    7. ':' → logprob: -7.248772144317627
    8. 'range' → logprob: -7.873772144317627
    9. 'x' → logprob: -7.998772144317627
    10. ' ' → logprob: -8.123771667480469

Token 136: ' ' (ID: 220)
  Prédit: 'n'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'n' → logprob: -1.547886610031128
    2. '(n' → logprob: -1.797886610031128
    3. '1' → logprob: -2.172886610031128
    4. '(max' → logprob: -2.172886610031128
    5. 'max' → logprob: -2.422886610031128
    6. ' (' → logprob: -2.422886610031128
    7. ' n' → logprob: -2.547886610031128
    8. '0' → logprob: -2.672886610031128
    9. ' max' → logprob: -3.422886610031128
    10. ' ' → logprob: -4.172886848449707

Token 137: '0' (ID: 15)
  Prédit: 'n'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'n' → logprob: -0.2999066114425659
    2. '0' → logprob: -1.924906611442566
    3. '1' → logprob: -3.4249067306518555
    4. '(n' → logprob: -3.4249067306518555
    5. ' n' → logprob: -3.7999067306518555
    6. 'max' → logprob: -4.7999067306518555
    7. ' (' → logprob: -4.9249067306518555
    8. '(max' → logprob: -5.6749067306518555
    9. ' ' → logprob: -5.9249067306518555
    10. '100' → logprob: -5.9249067306518555

Token 138: ' jusqu' (ID: 21961)
  Prédit: ' à'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' à' → logprob: -0.08758728951215744
    2. 'à' → logprob: -2.587587356567383
    3. ' a' → logprob: -5.337587356567383
    4. '   ' → logprob: -6.962587356567383
    5. 'a' → logprob: -7.212587356567383
    6. ' ' → logprob: -7.212587356567383
    7. ' jusqu' → logprob: -7.587587356567383
    8. ',' → logprob: -8.212587356567383
    9. 'au' → logprob: -8.587587356567383
    10. ' au' → logprob: -9.337587356567383

Token 139: ''à' (ID: 33688)
  Prédit: ' à'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' à' → logprob: -0.16444367170333862
    2. ' a' → logprob: -3.5394437313079834
    3. ''à' → logprob: -3.5394437313079834
    4. 'n' → logprob: -3.7894437313079834
    5. 'à' → logprob: -4.164443492889404
    6. '’à' → logprob: -4.414443492889404
    7. 'a' → logprob: -4.539443492889404
    8. '   ' → logprob: -4.789443492889404
    9. ' au' → logprob: -4.789443492889404
    10. ' n' → logprob: -5.414443492889404

Token 140: ' n' (ID: 297)
  Prédit: 'n'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'n' → logprob: -0.028905542567372322
    2. ' n' → logprob: -3.6539056301116943
    3. '(n' → logprob: -6.903905391693115
    4. '100' → logprob: -7.153905391693115
    5. ' (' → logprob: -7.528905391693115
    6. '(' → logprob: -9.653905868530273
    7. '10' → logprob: -9.653905868530273
    8. '   ' → logprob: -9.778905868530273
    9. ' ' → logprob: -10.153905868530273
    10. '105' → logprob: -12.153905868530273

Token 141: ' inclus' (ID: 11891)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.04424091801047325
    2. ' for' → logprob: -3.419240951538086
    3. '
' → logprob: -5.169240951538086
    4. 'for' → logprob: -6.294240951538086
    5. ':' → logprob: -6.794240951538086
    6. '    
' → logprob: -7.044240951538086
    7. ' 
' → logprob: -8.419240951538086
    8. '  
' → logprob: -8.419240951538086
    9. ':
' → logprob: -9.419240951538086
    10. 'def' → logprob: -9.544240951538086

Token 142: '.
' (ID: 558)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.05220451205968857
    2. ' for' → logprob: -3.1772046089172363
    3. 'for' → logprob: -5.177204608917236
    4. '
' → logprob: -5.802204608917236
    5. '    
' → logprob: -8.302204132080078
    6. 'def' → logprob: -9.302204132080078
    7. '	for' → logprob: -10.302204132080078
    8. ':' → logprob: -10.552204132080078
    9. ' 
' → logprob: -10.677204132080078
    10. '  
' → logprob: -10.927204132080078

Token 143: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.3315015435218811
    2. ' for' → logprob: -1.3315014839172363
    3. '
' → logprob: -4.706501483917236
    4. 'for' → logprob: -4.831501483917236
    5. ' 
' → logprob: -7.581501483917236
    6. '    
' → logprob: -7.831501483917236
    7. '```' → logprob: -9.706501960754395
    8. '  
' → logprob: -10.706501960754395
    9. '	for' → logprob: -11.456501960754395
    10. 'def' → logprob: -11.456501960754395

Token 144: ' for' (ID: 395)
  Prédit: ' for'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' for' → logprob: -0.2071877121925354
    2. 'for' (adapté à ' for') → logprob: -1.9571876525878906
    3. '   ' → logprob: -3.0821876525878906
    4. 'def' → logprob: -11.70718765258789
    5. '
' → logprob: -12.58218765258789
    6. '	for' → logprob: -13.08218765258789
    7. '    
' → logprob: -13.70718765258789
    8. ' def' → logprob: -14.08218765258789
    9. ' 
' → logprob: -14.20718765258789
    10. '```' → logprob: -14.20718765258789

Token 145: ' x' (ID: 1215)
  Prédit: ' x'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' x' → logprob: -0.016039647161960602
    2. 'x' → logprob: -4.141039848327637
    3. ' i' → logprob: -12.766039848327637
    4. '	x' → logprob: -13.891039848327637
    5. ' ' → logprob: -14.016039848327637
    6. ' original' → logprob: -15.141039848327637
    7. ' ' → logprob: -16.14103889465332
    8. 'i' → logprob: -16.14103889465332
    9. ' price' → logprob: -16.14103889465332
    10. 'original' → logprob: -16.76603889465332

Token 146: ' in' (ID: 306)
  Prédit: ' in'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' in' → logprob: -0.0076637668535113335
    2. 'in' → logprob: -4.882663726806641
    3. ' ' → logprob: -9.88266372680664
    4. '0' → logprob: -14.38266372680664
    5. '_in' → logprob: -14.50766372680664
    6. '	in' → logprob: -14.63266372680664
    7. ')' → logprob: -14.82016372680664
    8. 'range' → logprob: -14.82016372680664
    9. 'inthe' → logprob: -14.82016372680664
    10. ',' → logprob: -15.07016372680664

Token 147: ' range' (ID: 3352)
  Prédit: ' range'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' range' → logprob: -0.26119017601013184
    2. ' n' → logprob: -1.6361901760101318
    3. 'range' → logprob: -3.511190176010132
    4. 'n' → logprob: -5.261190414428711
    5. '(range' → logprob: -10.636190414428711
    6. '	n' → logprob: -11.386190414428711
    7. '(n' → logprob: -11.386190414428711
    8. ' ' → logprob: -11.511190414428711
    9. '	range' → logprob: -11.511190414428711
    10. ' xrange' → logprob: -12.136190414428711

Token 148: '(n' (ID: 2406)
  Prédit: '(n'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(n' → logprob: -0.00371160008944571
    2. '(' → logprob: -5.628711700439453
    3. ' (' → logprob: -9.128711700439453
    4. '(
' → logprob: -13.378711700439453
    5. ' n' → logprob: -14.253711700439453
    6. 'n' → logprob: -14.503711700439453
    7. '((' → logprob: -16.128711700439453
    8. ')' → logprob: -16.753711700439453
    9. '0' → logprob: -17.753711700439453
    10. '(x' → logprob: -18.003711700439453

Token 149: ' +' (ID: 659)
  Prédit: ' +'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' +' → logprob: -0.22550663352012634
    2. '+' → logprob: -1.6005066633224487
    3. ' ' → logprob: -9.725506782531738
    4. ' //' → logprob: -11.600506782531738
    5. '   ' → logprob: -11.975506782531738
    6. ' )' → logprob: -12.475506782531738
    7. ')' → logprob: -12.600506782531738
    8. '//' → logprob: -13.350506782531738
    9. '    ' → logprob: -13.475506782531738
    10. ' +
' → logprob: -13.475506782531738

Token 150: ' ' (ID: 220)
  Prédit: '1'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '1' → logprob: -0.004622018430382013
    2. ' ' → logprob: -5.379621982574463
    3. '   ' → logprob: -13.379622459411621
    4. '  ' → logprob: -16.504621505737305
    5. ')' → logprob: -16.629621505737305
    6. '```' → logprob: -17.692121505737305
    7. '
' → logprob: -18.004621505737305
    8. '100' → logprob: -18.254621505737305
    9. ' ' → logprob: -18.504621505737305
    10. '

' → logprob: -18.567121505737305

Token 151: '1' (ID: 16)
  Prédit: '1'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '1' → logprob: -0.00014072739577386528
    2. ' ' → logprob: -8.875141143798828
    3. '   ' → logprob: -14.250141143798828
    4. '  ' → logprob: -16.312641143798828
    5. ')' → logprob: -17.125141143798828
    6. '```' → logprob: -17.125141143798828
    7. '100' → logprob: -17.687641143798828
    8. '    ' → logprob: -17.937641143798828
    9. '

' → logprob: -18.250141143798828
    10. '
' → logprob: -18.500141143798828

Token 152: '):
' (ID: 1883)
  Prédit: '):'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '):' → logprob: -0.0006266565760597587
    2. '):
' → logprob: -8.125626564025879
    3. ' ):' → logprob: -8.250626564025879
    4. ':' → logprob: -10.125626564025879
    5. ')' → logprob: -10.875626564025879
    6. '   ' → logprob: -11.750626564025879
    7. '):
' → logprob: -14.250626564025879
    8. ' :' → logprob: -14.750626564025879
    9. '():' → logprob: -15.000626564025879
    10. ' ' → logprob: -15.250626564025879

Token 153: '       ' (ID: 309)
  Prédit: '       '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '       ' → logprob: -0.07708021998405457
    2. '<|end|>' → logprob: -2.702080249786377
    3. '   ' → logprob: -5.452080249786377
    4. ' if' → logprob: -7.077080249786377
    5. '<|end|>' → logprob: -7.452080249786377
    6. '        
' → logprob: -7.827080249786377
    7. ':' → logprob: -7.952080249786377
    8. ' ' → logprob: -8.827079772949219
    9. 'if' → logprob: -9.202079772949219
    10. '
' → logprob: -9.952079772949219

Token 154: ' #' (ID: 1069)
  Prédit: 'if'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'if' → logprob: -0.31320714950561523
    2. ' if' → logprob: -1.4382071495056152
    3. '       ' → logprob: -3.5632071495056152
    4. 'tax' → logprob: -6.813207149505615
    5. '   ' → logprob: -8.313207626342773
    6. 'total' → logprob: -8.438207626342773
    7. ' tax' → logprob: -8.563207626342773
    8. 'result' → logprob: -9.063207626342773
    9. 'temp' → logprob: -9.063207626342773
    10. 'final' → logprob: -9.188207626342773

Token 155: ' Vér' (ID: 159169)
  Prédit: ' if'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' if' → logprob: -0.5987514853477478
    2. 'if' → logprob: -0.8487514853477478
    3. 'tax' → logprob: -5.098751544952393
    4. ' tax' → logprob: -5.473751544952393
    5. ' taxed' → logprob: -6.473751544952393
    6. ' calculated' → logprob: -6.598751544952393
    7. '   ' → logprob: -7.223751544952393
    8. 'price' → logprob: -7.223751544952393
    9. 'result' → logprob: -7.223751544952393
    10. 'prix' → logprob: -7.223751544952393

Token 156: 'ifie' (ID: 46409)
  Prédit: 'ifie'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'ifie' → logprob: -0.0011159272398799658
    2. 'if' → logprob: -6.876115798950195
    3. 'ifi' → logprob: -10.251115798950195
    4. 'ifiez' → logprob: -10.501115798950195
    5. 'ifier' → logprob: -11.126115798950195
    6. 'ification' → logprob: -13.251115798950195
    7. 'ifié' → logprob: -13.501115798950195
    8. 'ife' → logprob: -14.001115798950195
    9. 'i' → logprob: -14.126115798950195
    10. 'ifiant' → logprob: -15.626115798950195

Token 157: ' si' (ID: 1784)
  Prédit: ' if'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' if' → logprob: -0.08677048981189728
    2. 'if' → logprob: -3.086770534515381
    3. ' si' → logprob: -3.586770534515381
    4. '   ' → logprob: -5.336770534515381
    5. 'si' → logprob: -5.961770534515381
    6. '       ' → logprob: -7.086770534515381
    7. ' ' → logprob: -7.211770534515381
    8. '    ' → logprob: -7.711770534515381
    9. '  ' → logprob: -9.711770057678223
    10. 'int' → logprob: -10.086770057678223

Token 158: ' la' (ID: 557)
  Prédit: ' ('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' (' → logprob: -0.30044981837272644
    2. '(x' → logprob: -2.175449848175049
    3. ' x' → logprob: -2.800449848175049
    4. 'x' → logprob: -2.925449848175049
    5. '(' → logprob: -4.550449848175049
    6. '(n' → logprob: -5.425449848175049
    7. ' int' → logprob: -5.425449848175049
    8. 'int' → logprob: -5.550449848175049
    9. ' n' → logprob: -5.800449848175049
    10. '(int' → logprob: -6.050449848175049

Token 159: ' partie' (ID: 22139)
  Prédit: ' x'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' x' → logprob: -0.5236802101135254
    2. ' (' → logprob: -1.3986802101135254
    3. 'x' → logprob: -2.2736802101135254
    4. '(x' → logprob: -3.3986802101135254
    5. '(' → logprob: -4.148680210113525
    6. ' ' → logprob: -5.898680210113525
    7. ' n' → logprob: -6.273680210113525
    8. ' int' → logprob: -6.773680210113525
    9. 'int' → logprob: -7.398680210113525
    10. 'n' → logprob: -7.398680210113525

Token 160: ' entière' (ID: 61583)
  Prédit: ' entière'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' entière' → logprob: -0.5857744216918945
    2. 'ent' → logprob: -1.7107744216918945
    3. 'int' → logprob: -2.0857744216918945
    4. 'inf' → logprob: -2.3357744216918945
    5. ' inf' → logprob: -4.9607744216918945
    6. 'enti' → logprob: -4.9607744216918945
    7. 'infer' → logprob: -5.4607744216918945
    8. '(x' → logprob: -5.5857744216918945
    9. ' ' → logprob: -5.7107744216918945
    10. 'floor' → logprob: -5.9607744216918945

Token 161: ' de' (ID: 334)
  Prédit: '(x'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(x' → logprob: -0.9436497688293457
    2. ' de' → logprob: -1.4436497688293457
    3. ' (' → logprob: -1.5686497688293457
    4. 'int' → logprob: -3.0686497688293457
    5. 'de' → logprob: -3.3186497688293457
    6. ' int' → logprob: -3.6936497688293457
    7. 'x' → logprob: -3.8186497688293457
    8. '(' → logprob: -4.318649768829346
    9. '(int' → logprob: -4.568649768829346
    10. ' x' → logprob: -5.818649768829346

Token 162: ' x' (ID: 1215)
  Prédit: ' ('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' (' → logprob: -0.6491086483001709
    2. '(x' → logprob: -0.8991086483001709
    3. 'x' → logprob: -3.149108648300171
    4. ' x' → logprob: -4.14910888671875
    5. '(' → logprob: -5.39910888671875
    6. '(int' → logprob: -5.52410888671875
    7. 'int' → logprob: -6.39910888671875
    8. ' int' → logprob: -7.02410888671875
    9. '((' → logprob: -7.77410888671875
    10. ' ' → logprob: -8.27410888671875

Token 163: ' multip' (ID: 17524)
  Prédit: ' *'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' *' → logprob: -0.2811974883079529
    2. '*' → logprob: -1.4061975479125977
    3. ' ' → logprob: -10.656197547912598
    4. '   ' → logprob: -11.781197547912598
    5. ' ' → logprob: -12.281197547912598
    6. '108' → logprob: -12.531197547912598
    7. '```' → logprob: -12.906197547912598
    8. '  ' → logprob: -13.406197547912598
    9. '*(' → logprob: -14.281197547912598
    10. '**' → logprob: -14.281197547912598

Token 164: 'lié' (ID: 102412)
  Prédit: '*'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '*' → logprob: -0.6378331184387207
    2. 'lié' → logprob: -1.2628331184387207
    3. ' par' → logprob: -2.3878331184387207
    4. 'par' → logprob: -3.0128331184387207
    5. 'li' → logprob: -4.137833118438721
    6. '   ' → logprob: -5.137833118438721
    7. 'lée' → logprob: -5.137833118438721
    8. 'iqué' → logprob: -5.387833118438721
    9. 'lé' → logprob: -5.887833118438721
    10. ' *' → logprob: -6.262833118438721

Token 165: ' par' (ID: 686)
  Prédit: '108'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '108' → logprob: -0.6498786807060242
    2. ' par' → logprob: -0.8998786807060242
    3. '1' → logprob: -3.274878740310669
    4. 'par' → logprob: -3.649878740310669
    5. '<|end|>' → logprob: -5.89987850189209
    6. ' ' → logprob: -6.77487850189209
    7. 'by' → logprob: -7.27487850189209
    8. ' by' → logprob: -7.39987850189209
    9. ' à' → logprob: -7.52487850189209
    10. '   ' → logprob: -8.02487850189209

Token 166: ' ' (ID: 220)
  Prédit: '108'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '108' → logprob: -0.47960638999938965
    2. '1' → logprob: -0.9796063899993896
    3. ' ' → logprob: -5.229606628417969
    4. '(' → logprob: -9.729606628417969
    5. '```' → logprob: -10.667106628417969
    6. '   ' → logprob: -11.542106628417969
    7. '.' → logprob: -11.604606628417969
    8. ' (' → logprob: -11.917106628417969
    9. '110' → logprob: -12.104606628417969
    10. '109' → logprob: -12.229606628417969

Token 167: '108' (ID: 11003)
  Prédit: '108'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '108' → logprob: -0.1812157928943634
    2. '1' → logprob: -1.806215763092041
    3. ' ' → logprob: -6.556215763092041
    4. '(' → logprob: -11.9312162399292
    5. '```' → logprob: -12.1187162399292
    6. '.' → logprob: -12.2437162399292
    7. '   ' → logprob: -12.3062162399292
    8. '110' → logprob: -12.6812162399292
    9. '109' → logprob: -12.9312162399292
    10. 'int' → logprob: -13.3687162399292

Token 168: '/' (ID: 14)
  Prédit: ' //'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' //' → logprob: -1.502292275428772
    2. ')' → logprob: -1.627292275428772
    3. 'div' → logprob: -1.752292275428772
    4. '//' → logprob: -2.0022921562194824
    5. ' est' → logprob: -2.3772921562194824
    6. '   ' → logprob: -2.3772921562194824
    7. ' ' → logprob: -3.6272921562194824
    8. 'est' → logprob: -4.502292156219482
    9. '100' → logprob: -5.127292156219482
    10. ' )' → logprob: -5.377292156219482

Token 169: '100' (ID: 1353)
  Prédit: '100'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '100' → logprob: -1.0564331205387134e-05
    2. ' ' → logprob: -11.50001049041748
    3. '```' → logprob: -15.62501049041748
    4. '   ' → logprob: -17.000011444091797
    5. '1' → logprob: -17.500011444091797
    6. '10' → logprob: -17.625011444091797
    7. '
' → logprob: -17.750011444091797
    8. '  ' → logprob: -17.750011444091797
    9. '

' → logprob: -18.250011444091797
    10. '0' → logprob: -18.500011444091797

Token 170: ' donne' (ID: 30004)
  Prédit: ' =='
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' ==' → logprob: -0.06759126484394073
    2. '   ' → logprob: -3.6925911903381348
    3. ' est' → logprob: -4.067591190338135
    4. '==' → logprob: -4.692591190338135
    5. ')' → logprob: -5.442591190338135
    6. '       ' → logprob: -6.192591190338135
    7. ' ' → logprob: -6.317591190338135
    8. ' equals' → logprob: -6.942591190338135
    9. 'est' → logprob: -7.067591190338135
    10. '```' → logprob: -7.567591190338135

Token 171: ' n' (ID: 297)
  Prédit: 'n'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'n' → logprob: -0.320047527551651
    2. ' n' → logprob: -1.3200474977493286
    3. ' exactly' → logprob: -5.945047378540039
    4. ' exactement' → logprob: -6.195047378540039
    5. 'exact' → logprob: -6.445047378540039
    6. ' ' → logprob: -7.695047378540039
    7. 'le' → logprob: -11.320047378540039
    8. ' le' → logprob: -11.570047378540039
    9. '   ' → logprob: -11.945047378540039
    10. '  ' → logprob: -12.195047378540039

Token 172: '
' (ID: 198)
  Prédit: '       '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '       ' → logprob: -0.010721297934651375
    2. ':' → logprob: -4.760721206665039
    3. ',' → logprob: -7.135721206665039
    4. ' and' → logprob: -7.885721206665039
    5. '.' → logprob: -8.135721206665039
    6. ' if' → logprob: -8.760721206665039
    7. '   ' → logprob: -8.885721206665039
    8. '           ' → logprob: -9.885721206665039
    9. '<|end|>' → logprob: -9.885721206665039
    10. ' :' → logprob: -10.135721206665039

Token 173: '       ' (ID: 309)
  Prédit: '       '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '       ' → logprob: -0.02308741770684719
    2. ':' → logprob: -3.898087501525879
    3. ' if' → logprob: -7.148087501525879
    4. ' and' → logprob: -7.523087501525879
    5. '   ' → logprob: -8.273087501525879
    6. '           ' → logprob: -8.398087501525879
    7. ',' → logprob: -8.648087501525879
    8. ' :' → logprob: -9.273087501525879
    9. '=' → logprob: -9.773087501525879
    10. ' or' → logprob: -9.898087501525879

Token 174: ' #' (ID: 1069)
  Prédit: '       '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '       ' → logprob: -0.6814530491828918
    2. ' if' → logprob: -0.8064530491828918
    3. 'if' → logprob: -3.056452989578247
    4. '   ' → logprob: -8.681452751159668
    5. '           ' → logprob: -8.681452751159668
    6. ' ' → logprob: -10.306452751159668
    7. '        
' → logprob: -10.431452751159668
    8. '        ' → logprob: -10.806452751159668
    9. '    ' → logprob: -10.806452751159668
    10. 'int' → logprob: -10.931452751159668

Token 175: ' Cela' (ID: 44403)
  Prédit: ' if'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' if' → logprob: -0.2301262617111206
    2. 'if' → logprob: -1.7301262617111206
    3. '       ' → logprob: -3.60512638092041
    4. '   ' → logprob: -7.48012638092041
    5. ' tax' → logprob: -9.23012638092041
    6. ' ' → logprob: -9.73012638092041
    7. '           ' → logprob: -9.98012638092041
    8. '    ' → logprob: -9.98012638092041
    9. '
' → logprob: -10.10512638092041
    10. '        ' → logprob: -10.35512638092041

Token 176: ' sim' (ID: 1845)
  Prédit: ' revient'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' revient' → logprob: -0.6638442873954773
    2. ' ==' → logprob: -2.163844347000122
    3. ' signifie' → logprob: -2.288844347000122
    4. ':' → logprob: -2.663844347000122
    5. '       ' → logprob: -2.788844347000122
    6. ' équ' → logprob: -2.913844347000122
    7. '==' → logprob: -4.538844108581543
    8. ' correspond' → logprob: -4.913844108581543
    9. ' corresponds' → logprob: -4.913844108581543
    10. ' if' → logprob: -4.913844108581543

Token 177: 'ule' (ID: 1601)
  Prédit: 'ple'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'ple' → logprob: -0.28957614302635193
    2. 'ule' → logprob: -1.4145761728286743
    3. 'pl' → logprob: -6.664576053619385
    4. 'ply' → logprob: -6.789576053619385
    5. 'plement' → logprob: -7.164576053619385
    6. 'e' → logprob: -7.539576053619385
    7. 'm' → logprob: -7.789576053619385
    8. 'p' → logprob: -8.414576530456543
    9. '```' → logprob: -8.477076530456543
    10. '=' → logprob: -8.477076530456543

Token 178: ' l' (ID: 305)
  Prédit: ' l'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' l' → logprob: -0.5709421038627625
    2. ' la' → logprob: -1.6959421634674072
    3. ' le' → logprob: -2.1959421634674072
    4. ' x' → logprob: -3.3209421634674072
    5. ' ' → logprob: -3.8209421634674072
    6. 'l' → logprob: -3.8209421634674072
    7. 'x' → logprob: -4.195941925048828
    8. 'le' → logprob: -4.570941925048828
    9. 'int' → logprob: -4.820941925048828
    10. '   ' → logprob: -5.070941925048828

Token 179: ''application' (ID: 112920)
  Prédit: 'arr'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'arr' → logprob: -0.4592668414115906
    2. 'e' → logprob: -2.0842669010162354
    3. ' arr' → logprob: -2.3342669010162354
    4. ''arr' → logprob: -2.4592669010162354
    5. 'a' → logprob: -3.2092669010162354
    6. ''effet' → logprob: -4.709266662597656
    7. ''' → logprob: -5.959266662597656
    8. 'es' → logprob: -6.584266662597656
    9. ''ent' → logprob: -6.959266662597656
    10. ' a' → logprob: -7.084266662597656

Token 180: ' de' (ID: 334)
  Prédit: ' de'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' de' → logprob: -0.0718253031373024
    2. ' du' → logprob: -3.1968252658843994
    3. '   ' → logprob: -4.1968255043029785
    4. ' of' → logprob: -5.6968255043029785
    5. 'de' → logprob: -5.8218255043029785
    6. ' d' → logprob: -5.8218255043029785
    7. ' ' → logprob: -6.6968255043029785
    8. 'd' → logprob: -6.6968255043029785
    9. '<|end|>' → logprob: -7.6968255043029785
    10. '    ' → logprob: -7.6968255043029785

Token 181: ' la' (ID: 557)
  Prédit: ' ('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' (' → logprob: -0.7855002284049988
    2. 'x' → logprob: -1.9105002880096436
    3. 'tax' → logprob: -2.1605002880096436
    4. ' la' → logprob: -2.6605002880096436
    5. '108' → logprob: -2.6605002880096436
    6. ' x' → logprob: -3.7855002880096436
    7. ' ' → logprob: -4.1605000495910645
    8. 'int' → logprob: -4.1605000495910645
    9. '(' → logprob: -4.1605000495910645
    10. ' tax' → logprob: -4.2855000495910645

Token 182: ' taxe' (ID: 174271)
  Prédit: 'tax'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'tax' → logprob: -0.17776185274124146
    2. '108' → logprob: -2.9277617931365967
    3. ' taxe' → logprob: -2.9277617931365967
    4. ' tax' → logprob: -3.0527617931365967
    5. ' ' → logprob: -6.427762031555176
    6. 'int' → logprob: -6.677762031555176
    7. 't' → logprob: -6.927762031555176
    8. ' (' → logprob: -7.427762031555176
    9. 'x' → logprob: -7.427762031555176
    10. 'floor' → logprob: -7.802762031555176

Token 183: ' de' (ID: 334)
  Prédit: '       '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '       ' → logprob: -0.3285483121871948
    2. '   ' → logprob: -1.5785483121871948
    3. ' ' → logprob: -3.7035484313964844
    4. ' (' → logprob: -4.078548431396484
    5. '.' → logprob: -5.078548431396484
    6. ' if' → logprob: -5.203548431396484
    7. ' *' → logprob: -5.203548431396484
    8. '    ' → logprob: -5.828548431396484
    9. '*' → logprob: -6.453548431396484
    10. ',' → logprob: -6.453548431396484

Token 184: ' ' (ID: 220)
  Prédit: ' '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' ' → logprob: -0.5030578970909119
    2. '108' → logprob: -1.6280579566955566
    3. '1' → logprob: -1.8780579566955566
    4. '8' → logprob: -3.8780579566955566
    5. 'tax' → logprob: -4.128057956695557
    6. ' la' → logprob: -5.503057956695557
    7. '0' → logprob: -6.628057956695557
    8. ' tax' → logprob: -7.378057956695557
    9. ' taxe' → logprob: -7.878057956695557
    10. '100' → logprob: -8.378057479858398

Token 185: '8' (ID: 23)
  Prédit: '8'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '8' → logprob: -0.3505430817604065
    2. '108' → logprob: -1.8505430221557617
    3. ' ' → logprob: -2.3505430221557617
    4. '1' → logprob: -3.2255430221557617
    5. '100' → logprob: -6.725543022155762
    6. 'tax' → logprob: -7.225543022155762
    7. 'x' → logprob: -8.600543022155762
    8. '0' → logprob: -8.600543022155762
    9. ' la' → logprob: -8.725543022155762
    10. 'la' → logprob: -8.725543022155762

Token 186: '%' (ID: 4)
  Prédit: '%'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '%' → logprob: -0.10106956958770752
    2. '%
' → logprob: -3.101069450378418
    3. ' %' → logprob: -3.601069450378418
    4. '%)' → logprob: -5.351069450378418
    5. '%.' → logprob: -5.476069450378418
    6. '*' → logprob: -5.851069450378418
    7. ' %
' → logprob: -6.601069450378418
    8. '
' → logprob: -6.976069450378418
    9. '%d' → logprob: -7.351069450378418
    10. '%)
' → logprob: -7.351069450378418

Token 187: ' et' (ID: 859)
  Prédit: '       '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '       ' → logprob: -0.0026975206565111876
    2. ' if' → logprob: -6.377697467803955
    3. ',' → logprob: -8.127697944641113
    4. ':' → logprob: -8.502697944641113
    5. '   ' → logprob: -9.252697944641113
    6. '.' → logprob: -9.752697944641113
    7. '           ' → logprob: -9.752697944641113
    8. '<|end|>' → logprob: -9.877697944641113
    9. '        
' → logprob: -10.127697944641113
    10. ' :' → logprob: -10.502697944641113

Token 188: ' son' (ID: 2391)
  Prédit: ' if'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' if' → logprob: -0.8265136480331421
    2. 'if' → logprob: -1.201513648033142
    3. ' le' → logprob: -3.2015137672424316
    4. 'le' → logprob: -3.2015137672424316
    5. ' la' → logprob: -3.2015137672424316
    6. ' l' → logprob: -3.8265137672424316
    7. ' vér' → logprob: -3.9515137672424316
    8. 'int' → logprob: -4.576513767242432
    9. ' vérifier' → logprob: -4.701513767242432
    10. ' math' → logprob: -4.701513767242432

Token 189: ' arr' (ID: 1724)
  Prédit: ' arr'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' arr' → logprob: -0.09362766146659851
    2. 'arr' → logprob: -2.468627691268921
    3. ' application' → logprob: -6.343627452850342
    4. ' calcul' → logprob: -6.718627452850342
    5. ' effet' → logprob: -7.718627452850342
    6. ' retour' → logprob: -8.0936279296875
    7. ' résultat' → logprob: -8.7186279296875
    8. ' arrondissement' → logprob: -9.0936279296875
    9. ' trunc' → logprob: -9.2186279296875
    10. 'tr' → logprob: -10.2186279296875

Token 190: 'ondi' (ID: 117409)
  Prédit: 'ondi'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'ondi' → logprob: -0.0031888822559267282
    2. 'ond' → logprob: -5.7531890869140625
    3. 'ondissement' → logprob: -11.753189086914062
    4. 'on' → logprob: -12.753189086914062
    5. 'ondo' → logprob: -15.378189086914062
    6. 'ont' → logprob: -15.628189086914062
    7. 'onde' → logprob: -17.253189086914062
    8. 'ound' → logprob: -17.878189086914062
    9. 'онд' → logprob: -18.503189086914062
    10. '```' → logprob: -19.128189086914062

Token 191: ' vers' (ID: 3640)
  Prédit: ' inférieur'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' inférieur' → logprob: -0.42160773277282715
    2. '   ' → logprob: -2.296607732772827
    3. '       ' → logprob: -2.421607732772827
    4. ' inf' → logprob: -2.796607732772827
    5. 'infer' → logprob: -4.171607971191406
    6. 'inf' → logprob: -4.171607971191406
    7. ' if' → logprob: -4.421607971191406
    8. ' (' → logprob: -4.796607971191406
    9. '.' → logprob: -4.921607971191406
    10. '           ' → logprob: -5.296607971191406

Token 192: ' le' (ID: 505)
  Prédit: 'le'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'le' → logprob: -0.7095772624015808
    2. 'bas' → logprob: -0.7095772624015808
    3. '0' → logprob: -4.5845770835876465
    4. '```' → logprob: -6.7095770835876465
    5. '-' → logprob: -7.5845770835876465
    6. 'l' → logprob: -7.7095770835876465
    7. 'moins' → logprob: -7.9595770835876465
    8. ' le' → logprob: -7.9595770835876465
    9. '1' → logprob: -8.334577560424805
    10. '           ' → logprob: -8.459577560424805

Token 193: ' bas' (ID: 3222)
  Prédit: 'bas'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'bas' → logprob: -0.0013001153711229563
    2. 'b' → logprob: -6.75130033493042
    3. '0' → logprob: -10.001299858093262
    4. ' bas' → logprob: -10.376299858093262
    5. ' ' → logprob: -10.876299858093262
    6. '```' → logprob: -11.626299858093262
    7. 'inf' → logprob: -12.751299858093262
    8. '54' → logprob: -13.126299858093262
    9. '1' → logprob: -13.251299858093262
    10. '100' → logprob: -13.376299858093262

Token 194: '.
' (ID: 558)
  Prédit: '       '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '       ' → logprob: -0.0035982904955744743
    2. ':' → logprob: -6.253598213195801
    3. ' if' → logprob: -6.878598213195801
    4. ',' → logprob: -8.5035982131958
    5. '           ' → logprob: -9.2535982131958
    6. '.' → logprob: -9.7535982131958
    7. '<|end|>' → logprob: -9.8785982131958
    8. '   ' → logprob: -10.0035982131958
    9. ' :' → logprob: -10.0035982131958
    10. '        
' → logprob: -10.2535982131958

Token 195: '       ' (ID: 309)
  Prédit: '       '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '       ' → logprob: -0.000513952283654362
    2. ' if' → logprob: -8.625514030456543
    3. '   ' → logprob: -9.000514030456543
    4. '<|end|>' → logprob: -9.000514030456543
    5. 'if' → logprob: -10.750514030456543
    6. '<|end|>' → logprob: -11.375514030456543
    7. '        
' → logprob: -11.625514030456543
    8. ' ' → logprob: -11.625514030456543
    9. '           ' → logprob: -11.625514030456543
    10. ',' → logprob: -12.250514030456543

Token 196: ' if' (ID: 538)
  Prédit: 'if'
  Correct (stricte): False
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'if' (adapté à ' if') → logprob: -0.1465776562690735
    2. ' if' → logprob: -2.0215775966644287
    3. '       ' → logprob: -5.771577835083008
    4. '   ' → logprob: -7.646577835083008
    5. 'tax' → logprob: -9.146577835083008
    6. ' tax' → logprob: -10.771577835083008
    7. 'result' → logprob: -10.896577835083008
    8. 'scaled' → logprob: -10.896577835083008
    9. 'total' → logprob: -11.271577835083008
    10. 'product' → logprob: -11.396577835083008

Token 197: ' x' (ID: 1215)
  Prédit: ' ('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' (' → logprob: -0.4129701256752014
    2. ' x' → logprob: -1.2879700660705566
    3. 'x' → logprob: -3.6629700660705566
    4. '(x' → logprob: -3.7879700660705566
    5. '(' → logprob: -4.537970066070557
    6. ' ' → logprob: -5.787970066070557
    7. ' n' → logprob: -9.287970542907715
    8. '   ' → logprob: -9.412970542907715
    9. '(n' → logprob: -9.537970542907715
    10. '((' → logprob: -10.037970542907715

Token 198: ' *' (ID: 425)
  Prédit: ' *'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' *' → logprob: -0.02351938746869564
    2. '*' → logprob: -3.773519277572632
    3. ' ' → logprob: -8.523519515991211
    4. ' ' → logprob: -10.398519515991211
    5. '   ' → logprob: -10.398519515991211
    6. '  ' → logprob: -12.273519515991211
    7. '    ' → logprob: -12.273519515991211
    8. '108' → logprob: -13.898519515991211
    9. '	' → logprob: -14.586019515991211
    10. '**' → logprob: -14.586019515991211

Token 199: ' ' (ID: 220)
  Prédit: '108'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '108' → logprob: -0.026302501559257507
    2. ' ' → logprob: -3.6513025760650635
    3. '<|end|>' → logprob: -14.151302337646484
    4. '  ' → logprob: -14.963802337646484
    5. '   ' → logprob: -15.213802337646484
    6. '```' → logprob: -15.526302337646484
    7. '109' → logprob: -15.588802337646484
    8. '    ' → logprob: -16.276302337646484
    9. '
' → logprob: -17.026302337646484
    10. ' 
' → logprob: -17.088802337646484

Token 200: '108' (ID: 11003)
  Prédit: '108'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '108' → logprob: -4.4849443838757e-06
    2. ' ' → logprob: -12.375004768371582
    3. '```' → logprob: -16.625003814697266
    4. '`' → logprob: -18.375003814697266
    5. '   ' → logprob: -18.437503814697266
    6. '  ' → logprob: -19.125003814697266
    7. '
' → logprob: -19.250003814697266
    8. 'int' → logprob: -19.750003814697266
    9. '1' → logprob: -19.875003814697266
    10. '

' → logprob: -20.062503814697266

Token 201: ' //' (ID: 602)
  Prédit: '//'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '//' → logprob: -0.2519356608390808
    2. ' //' → logprob: -1.5019357204437256
    3. ')' → logprob: -13.126935958862305
    4. ' ' → logprob: -13.501935958862305
    5. '#' → logprob: -13.876935958862305
    6. '   ' → logprob: -13.876935958862305
    7. '100' → logprob: -14.376935958862305
    8. '/' → logprob: -16.001935958862305
    9. '```' → logprob: -16.001935958862305
    10. ')//' → logprob: -16.126935958862305

Token 202: ' ' (ID: 220)
  Prédit: '100'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '100' → logprob: -2.5776860184123507e-06
    2. ' ' → logprob: -13.00000286102295
    3. '   ' → logprob: -15.37500286102295
    4. '```' → logprob: -17.125001907348633
    5. '       ' → logprob: -18.625001907348633
    6. '  ' → logprob: -19.250001907348633
    7. '
' → logprob: -20.000001907348633
    8. '１００' → logprob: -20.125001907348633
    9. '    ' → logprob: -20.625001907348633
    10. '>' → logprob: -20.750001907348633

Token 203: '100' (ID: 1353)
  Prédit: '100'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '100' → logprob: -6.704273118884885e-07
    2. ' ' → logprob: -14.375000953674316
    3. '   ' → logprob: -18.125
    4. '```' → logprob: -19.375
    5. '１００' → logprob: -20.0
    6. '  ' → logprob: -20.625
    7. '
' → logprob: -20.75
    8. '10' → logprob: -21.375
    9. '       ' → logprob: -21.75
    10. '=' → logprob: -21.875

Token 204: ' ==' (ID: 951)
  Prédit: ' =='
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' ==' → logprob: -0.14269839227199554
    2. '==' → logprob: -2.017698287963867
    3. '=' → logprob: -11.642698287963867
    4. ' ' → logprob: -12.392698287963867
    5. ')==' → logprob: -12.642698287963867
    6. ')' → logprob: -13.017698287963867
    7. '   ' → logprob: -13.392698287963867
    8. ']==' → logprob: -14.017698287963867
    9. ' ' → logprob: -14.642698287963867
    10. '    ' → logprob: -15.017698287963867

Token 205: ' n' (ID: 297)
  Prédit: ' n'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' n' → logprob: -0.10020741820335388
    2. 'n' → logprob: -2.3502073287963867
    3. ' ' → logprob: -14.350207328796387
    4. '	n' → logprob: -15.600207328796387
    5. ' ' → logprob: -19.100208282470703
    6. '_n' → logprob: -19.225208282470703
    7. '   ' → logprob: -19.475208282470703
    8. '(n' → logprob: -19.600208282470703
    9. '[n' → logprob: -19.600208282470703
    10. ')n' → logprob: -19.725208282470703

Token 206: ':
' (ID: 734)
  Prédit: ':'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ':' → logprob: -0.0008260641479864717
    2. '):' → logprob: -7.250825881958008
    3. ':
' → logprob: -9.500825881958008
    4. ' :' → logprob: -10.625825881958008
    5. ':return' → logprob: -11.625825881958008
    6. '       ' → logprob: -12.875825881958008
    7. ':**' → logprob: -13.125825881958008
    8. ')' → logprob: -13.625825881958008
    9. '):
' → logprob: -14.000825881958008
    10. '<|end|>' → logprob: -14.125825881958008

Token 207: '           ' (ID: 352)
  Prédit: '       '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '       ' → logprob: -0.31358322501182556
    2. '           ' → logprob: -1.313583254814148
    3. 'return' → logprob: -8.688583374023438
    4. ' return' → logprob: -9.188583374023438
    5. '	       ' → logprob: -10.938583374023438
    6. '        
' → logprob: -11.563583374023438
    7. '
' → logprob: -11.563583374023438
    8. '   ' → logprob: -12.688583374023438
    9. '<|end|>' → logprob: -12.938583374023438
    10. '```' → logprob: -13.813583374023438

Token 208: ' #' (ID: 1069)
  Prédit: '       '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '       ' → logprob: -0.6596230268478394
    2. '           ' → logprob: -0.9096230268478394
    3. 'return' → logprob: -2.909623146057129
    4. ' return' → logprob: -3.659623146057129
    5. '   ' → logprob: -10.784623146057129
    6. '               ' → logprob: -11.534623146057129
    7. '	return' → logprob: -13.284623146057129
    8. '	       ' → logprob: -13.284623146057129
    9. '		' → logprob: -13.909623146057129
    10. '
' → logprob: -14.159623146057129

Token 209: ' Si' (ID: 7832)
  Prédit: 'return'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'return' → logprob: -0.17171034216880798
    2. '           ' → logprob: -2.171710252761841
    3. ' return' → logprob: -3.171710252761841
    4. '       ' → logprob: -6.29671049118042
    5. '   ' → logprob: -11.296710014343262
    6. '               ' → logprob: -13.546710014343262
    7. '          ' → logprob: -13.921710014343262
    8. '	return' → logprob: -13.921710014343262
    9. '        ' → logprob: -14.046710014343262
    10. '```' → logprob: -14.296710014343262

Token 210: ' c' (ID: 274)
  Prédit: ' x'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' x' → logprob: -0.4428253769874573
    2. '           ' → logprob: -1.3178253173828125
    3. 'x' → logprob: -3.5678253173828125
    4. '            ' → logprob: -4.1928253173828125
    5. ' return' → logprob: -4.3178253173828125
    6. ' ' → logprob: -4.4428253173828125
    7. '        ' → logprob: -5.4428253173828125
    8. '       ' → logprob: -5.5678253173828125
    9. 'return' → logprob: -5.5678253173828125
    10. ' ' → logprob: -5.6928253173828125

Token 211: ''est' (ID: 6616)
  Prédit: '           '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '           ' → logprob: -0.10617733746767044
    2. ' return' → logprob: -3.35617733001709
    3. 'return' → logprob: -4.10617733001709
    4. '       ' → logprob: -4.10617733001709
    5. ' retourne' → logprob: -4.85617733001709
    6. '          ' → logprob: -5.35617733001709
    7. 'eturn' → logprob: -5.35617733001709
    8. 'x' → logprob: -5.48117733001709
    9. ' x' → logprob: -5.98117733001709
    10. ''est' → logprob: -6.73117733001709

Token 212: ' le' (ID: 505)
  Prédit: ' x'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' x' → logprob: -0.2938293516635895
    2. '           ' → logprob: -1.793829321861267
    3. '               ' → logprob: -3.4188294410705566
    4. 'x' → logprob: -4.168829441070557
    5. ' ' → logprob: -4.293829441070557
    6. ' return' → logprob: -4.918829441070557
    7. ' le' → logprob: -5.418829441070557
    8. ' ' → logprob: -5.668829441070557
    9. '            ' → logprob: -5.793829441070557
    10. '   ' → logprob: -6.293829441070557

Token 213: ' cas' (ID: 2108)
  Prédit: 'x'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'x' → logprob: -0.13665984570980072
    2. 'prem' → logprob: -2.636659860610962
    3. ' x' → logprob: -3.636659860610962
    4. ' premier' → logprob: -4.761659622192383
    5. 'return' → logprob: -5.136659622192383
    6. '   ' → logprob: -5.136659622192383
    7. ' ' → logprob: -7.011659622192383
    8. 'val' → logprob: -7.136659622192383
    9. ' return' → logprob: -7.136659622192383
    10. 'v' → logprob: -7.261659622192383

Token 214: ',' (ID: 11)
  Prédit: '           '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '           ' → logprob: -0.000725656165741384
    2. '       ' → logprob: -7.875725746154785
    3. '               ' → logprob: -8.875725746154785
    4. ' return' → logprob: -9.000725746154785
    5. 'return' → logprob: -9.875725746154785
    6. '
' → logprob: -11.000725746154785
    7. '	       ' → logprob: -11.500725746154785
    8. '		' → logprob: -13.375725746154785
    9. '          ' → logprob: -14.000725746154785
    10. ':return' → logprob: -14.875725746154785

Token 215: ' retourne' (ID: 178818)
  Prédit: '           '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '           ' → logprob: -0.28372713923454285
    2. ' return' → logprob: -1.9087271690368652
    3. 'return' → logprob: -2.4087271690368652
    4. '       ' → logprob: -4.783727169036865
    5. '	       ' → logprob: -8.283726692199707
    6. '               ' → logprob: -8.908726692199707
    7. '	return' → logprob: -10.283726692199707
    8. '   ' → logprob: -11.783726692199707
    9. ' ' → logprob: -11.783726692199707
    10. ':return' → logprob: -11.908726692199707

Token 216: ' x' (ID: 1215)
  Prédit: ' x'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' x' → logprob: -0.021046752110123634
    2. 'x' → logprob: -3.8960466384887695
    3. ' ' → logprob: -7.7710466384887695
    4. ' ' → logprob: -10.64604663848877
    5. '           ' → logprob: -10.77104663848877
    6. '	x' → logprob: -11.77104663848877
    7. '            ' → logprob: -12.02104663848877
    8. ' le' → logprob: -12.02104663848877
    9. '               ' → logprob: -12.02104663848877
    10. ' l' → logprob: -12.64604663848877

Token 217: ' comme' (ID: 7971)
  Prédit: '           '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '           ' → logprob: -0.003645449411123991
    2. '       ' → logprob: -6.378645420074463
    3. '<|end|>' → logprob: -6.503645420074463
    4. '               ' → logprob: -8.878645896911621
    5. '		' → logprob: -9.378645896911621
    6. 'return' → logprob: -9.628645896911621
    7. '	       ' → logprob: -9.878645896911621
    8. '
' → logprob: -10.128645896911621
    9. '          ' → logprob: -11.503645896911621
    10. '   ' → logprob: -11.503645896911621

Token 218: ' prix' (ID: 18771)
  Prédit: ' x'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' x' → logprob: -0.9204688668251038
    2. '           ' → logprob: -1.545468807220459
    3. ' solution' → logprob: -2.045468807220459
    4. ' original' → logprob: -2.545468807220459
    5. ' la' → logprob: -2.670468807220459
    6. 'x' → logprob: -3.545468807220459
    7. ' le' → logprob: -4.170468807220459
    8. '   ' → logprob: -4.295468807220459
    9. ' valeur' → logprob: -4.795468807220459
    10. ' ' → logprob: -5.045468807220459

Token 219: ' initial' (ID: 4871)
  Prédit: '       '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '       ' → logprob: -0.4114578664302826
    2. '           ' → logprob: -1.661457896232605
    3. '   ' → logprob: -2.4114577770233154
    4. ' original' → logprob: -3.6614577770233154
    5. 'original' → logprob: -4.5364580154418945
    6. ' originale' → logprob: -5.6614580154418945
    7. '_original' → logprob: -5.6614580154418945
    8. '<|end|>' → logprob: -6.0364580154418945
    9. 'd' → logprob: -6.4114580154418945
    10. ' d' → logprob: -6.5364580154418945

Token 220: '.
' (ID: 558)
  Prédit: '           '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '           ' → logprob: -0.0001314295077463612
    2. '       ' → logprob: -9.625131607055664
    3. '		' → logprob: -11.000131607055664
    4. '
' → logprob: -11.125131607055664
    5. 'return' → logprob: -11.375131607055664
    6. '               ' → logprob: -11.500131607055664
    7. '	       ' → logprob: -12.375131607055664
    8. '          ' → logprob: -12.875131607055664
    9. ' return' → logprob: -13.375131607055664
    10. '<|end|>' → logprob: -13.500131607055664

Token 221: '           ' (ID: 352)
  Prédit: '           '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '           ' → logprob: -0.00020544764993246645
    2. 'return' → logprob: -8.750205039978027
    3. ' return' → logprob: -10.250205039978027
    4. '               ' → logprob: -11.875205039978027
    5. '       ' → logprob: -12.750205039978027
    6. '		' → logprob: -14.500205039978027
    7. '	       ' → logprob: -14.500205039978027
    8. '          ' → logprob: -15.125205039978027
    9. '        ' → logprob: -16.750205993652344
    10. '                       ' → logprob: -17.000205993652344

Token 222: ' return' (ID: 622)
  Prédit: 'return'
  Correct (stricte): False
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'return' (adapté à ' return') → logprob: -0.06589134782552719
    2. '           ' → logprob: -3.0658912658691406
    3. ' return' → logprob: -4.065891265869141
    4. '               ' → logprob: -12.56589126586914
    5. '       ' → logprob: -13.44089126586914
    6. '   ' → logprob: -14.31589126586914
    7. '	return' → logprob: -14.31589126586914
    8. '{return' → logprob: -14.56589126586914
    9. ':return' → logprob: -15.69089126586914
    10. '		' → logprob: -15.69089126586914

Token 223: ' x' (ID: 1215)
  Prédit: ' x'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' x' → logprob: -0.1002068892121315
    2. 'x' → logprob: -2.3502068519592285
    3. '	x' → logprob: -16.47520637512207
    4. ' ' → logprob: -16.72520637512207
    5. ' ' → logprob: -21.97520637512207
    6. '"x' → logprob: -22.10020637512207
    7. ',x' → logprob: -22.35020637512207
    8. '_x' → logprob: -22.35020637512207
    9. ')x' → logprob: -22.47520637512207
    10. '{x' → logprob: -22.47520637512207

Token 224: '
' (ID: 198)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.0041011967696249485
    2. 'return' → logprob: -5.504101276397705
    3. ' return' → logprob: -11.254100799560547
    4. ':return' → logprob: -12.254100799560547
    5. '       ' → logprob: -12.754100799560547
    6. '  ' → logprob: -14.629100799560547
    7. '    ' → logprob: -15.254100799560547
    8. ':' → logprob: -15.254100799560547
    9. '   ' → logprob: -15.254100799560547
    10. '```' → logprob: -15.379100799560547

Token 225: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.0031857939902693033
    2. 'return' → logprob: -5.753185749053955
    3. ' return' → logprob: -12.128186225891113
    4. ':return' → logprob: -13.753186225891113
    5. '       ' → logprob: -14.253186225891113
    6. '```' → logprob: -15.128186225891113
    7. '	return' → logprob: -15.628186225891113
    8. '  ' → logprob: -15.628186225891113
    9. '
' → logprob: -15.878186225891113
    10. '   ' → logprob: -15.878186225891113

Token 226: ' #' (ID: 1069)
  Prédit: 'return'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'return' → logprob: -0.035346608608961105
    2. '   ' → logprob: -3.410346508026123
    3. ':return' → logprob: -6.660346508026123
    4. '":' → logprob: -8.785346984863281
    5. ' return' → logprob: -8.910346984863281
    6. '':' → logprob: -9.285346984863281
    7. '	return' → logprob: -11.160346984863281
    8. ':' → logprob: -12.160346984863281
    9. '"' → logprob: -12.660346984863281
    10. '    
' → logprob: -12.910346984863281

Token 227: ' Si' (ID: 7832)
  Prédit: 'return'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'return' → logprob: -0.012885245494544506
    2. ' return' → logprob: -4.387885093688965
    3. '   ' → logprob: -8.012885093688965
    4. ':return' → logprob: -10.137885093688965
    5. ' ' → logprob: -13.887885093688965
    6. '    ' → logprob: -14.137885093688965
    7. '	return' → logprob: -14.637885093688965
    8. 'Return' → logprob: -14.637885093688965
    9. ':' → logprob: -14.637885093688965
    10. 'ret' → logprob: -14.887885093688965

Token 228: ' aucune' (ID: 51173)
  Prédit: 'auc'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'auc' → logprob: -0.6461858749389648
    2. ' aucune' → logprob: -1.6461858749389648
    3. ' aucun' → logprob: -2.271185874938965
    4. ' not' → logprob: -2.396185874938965
    5. '   ' → logprob: -3.521185874938965
    6. 'not' → logprob: -4.271185874938965
    7. ' n' → logprob: -4.771185874938965
    8. ':' → logprob: -4.771185874938965
    9. ' no' → logprob: -5.146185874938965
    10. ' :' → logprob: -5.646185874938965

Token 229: ' valeur' (ID: 41664)
  Prédit: ' valeur'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' valeur' → logprob: -0.4906400442123413
    2. 'val' → logprob: -1.2406400442123413
    3. ' solution' → logprob: -2.490640163421631
    4. 'solution' → logprob: -4.365640163421631
    5. ' val' → logprob: -6.865640163421631
    6. ' ' → logprob: -7.365640163421631
    7. 'value' → logprob: -7.490640163421631
    8. 'x' → logprob: -8.740639686584473
    9. ' correspond' → logprob: -9.115639686584473
    10. 'cor' → logprob: -9.115639686584473

Token 230: ' de' (ID: 334)
  Prédit: 'n'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'n' → logprob: -0.9748752117156982
    2. '   ' → logprob: -1.3498752117156982
    3. ' n' → logprob: -1.5998752117156982
    4. ' ne' → logprob: -2.7248752117156982
    5. ' trouv' → logprob: -3.0998752117156982
    6. 'ne' → logprob: -3.9748752117156982
    7. ' possible' → logprob: -4.474875450134277
    8. 'possible' → logprob: -4.599875450134277
    9. '       ' → logprob: -5.849875450134277
    10. 'tr' → logprob: -6.974875450134277

Token 231: ' x' (ID: 1215)
  Prédit: 'x'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'x' → logprob: -0.5760640501976013
    2. ' x' → logprob: -0.8260640501976013
    3. ' ' → logprob: -9.951064109802246
    4. 'n' → logprob: -10.951064109802246
    5. ' retour' → logprob: -10.951064109802246
    6. ' n' → logprob: -11.201064109802246
    7. ' return' → logprob: -12.326064109802246
    8. 'range' → logprob: -12.451064109802246
    9. ' la' → logprob: -12.826064109802246
    10. 'return' → logprob: -13.076064109802246

Token 232: ' ne' (ID: 453)
  Prédit: 'n'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'n' → logprob: -1.0554962158203125
    2. 'ne' → logprob: -1.1804962158203125
    3. ' ne' → logprob: -1.1804962158203125
    4. '   ' → logprob: -3.9304962158203125
    5. ' n' → logprob: -4.4304962158203125
    6. 'cor' → logprob: -5.3054962158203125
    7. '```' → logprob: -8.180496215820312
    8. ' correspond' → logprob: -8.930496215820312
    9. '#' → logprob: -8.930496215820312
    10. 'valid' → logprob: -9.305496215820312

Token 233: ' satisfait' (ID: 174890)
  Prédit: 'cor'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'cor' → logprob: -1.1005195379257202
    2. ' ne' → logprob: -1.6005195379257202
    3. ' correspond' → logprob: -1.9755195379257202
    4. 'con' → logprob: -2.7255196571350098
    5. 'n' → logprob: -2.8505196571350098
    6. 'don' → logprob: -2.8505196571350098
    7. ' satisfait' → logprob: -3.3505196571350098
    8. 'ne' → logprob: -3.7255196571350098
    9. 's' → logprob: -3.7255196571350098
    10. ' donne' → logprob: -4.10051965713501

Token 234: ' la' (ID: 557)
  Prédit: ' la'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' la' → logprob: -0.38100525736808777
    2. ' le' → logprob: -1.8810052871704102
    3. '   ' → logprob: -2.63100528717041
    4. ' n' → logprob: -3.63100528717041
    5. ' the' → logprob: -4.25600528717041
    6. ' l' → logprob: -4.50600528717041
    7. ' ' → logprob: -4.63100528717041
    8. 'n' → logprob: -5.13100528717041
    9. 'le' → logprob: -5.25600528717041
    10. '    ' → logprob: -5.75600528717041

Token 235: ' condition' (ID: 7060)
  Prédit: 'condition'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'condition' → logprob: -0.0007694864762015641
    2. 'cond' → logprob: -7.87576961517334
    3. ' condition' → logprob: -7.87576961517334
    4. 'fonction' → logprob: -11.75076961517334
    5. 'return' → logprob: -14.50076961517334
    6. ' ' → logprob: -15.62576961517334
    7. 'conditions' → logprob: -15.87576961517334
    8. '条件' → logprob: -15.87576961517334
    9. '_condition' → logprob: -16.375768661499023
    10. '
' → logprob: -16.375768661499023

Token 236: ',' (ID: 11)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.07773435860872269
    2. 'return' → logprob: -3.2027344703674316
    3. ' return' → logprob: -3.4527344703674316
    4. ',' → logprob: -6.202734470367432
    5. ':return' → logprob: -8.452733993530273
    6. '	return' → logprob: -9.827733993530273
    7. '       ' → logprob: -9.952733993530273
    8. '    
' → logprob: -10.327733993530273
    9. '  ' → logprob: -10.577733993530273
    10. ':' → logprob: -10.577733993530273

Token 237: ' retourne' (ID: 178818)
  Prédit: ' return'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' return' → logprob: -0.5647284984588623
    2. 'return' → logprob: -1.3147284984588623
    3. '   ' → logprob: -1.8147284984588623
    4. '	return' → logprob: -10.314728736877441
    5. '    ' → logprob: -11.689728736877441
    6. '  ' → logprob: -12.189728736877441
    7. '       ' → logprob: -12.439728736877441
    8. ' ' → logprob: -12.689728736877441
    9. '   ' → logprob: -14.189728736877441
    10. ':return' → logprob: -14.314728736877441

Token 238: ' ':' (ID: 30751)
  Prédit: '''
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ''' → logprob: -0.9538573026657104
    2. ' '' → logprob: -1.2038573026657104
    3. '"' → logprob: -1.4538573026657104
    4. ' "' → logprob: -3.453857421875
    5. ' ':' → logprob: -3.828857421875
    6. '':' → logprob: -3.953857421875
    7. '":' → logprob: -4.953857421875
    8. ' ":' → logprob: -7.203857421875
    9. ' ' → logprob: -8.328857421875
    10. '   ' → logprob: -8.703857421875

Token 239: '('' (ID: 706)
  Prédit: '(''
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '('' → logprob: -0.005472567398101091
    2. '(' → logprob: -5.755472660064697
    3. '(':' → logprob: -6.630472660064697
    4. '('(' → logprob: -8.005472183227539
    5. '(:' → logprob: -8.130472183227539
    6. '(('' → logprob: -8.880472183227539
    7. '(';' → logprob: -9.130472183227539
    8. '(',' → logprob: -11.005472183227539
    9. '((' → logprob: -11.005472183227539
    10. ''(' → logprob: -11.380472183227539

Token 240: '.
' (ID: 558)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.004372559487819672
    2. ' return' → logprob: -5.879372596740723
    3. 'return' → logprob: -6.754372596740723
    4. '
' → logprob: -8.379372596740723
    5. '    
' → logprob: -9.879372596740723
    6. '	return' → logprob: -10.379372596740723
    7. ':return' → logprob: -10.379372596740723
    8. '  ' → logprob: -11.379372596740723
    9. '<|end|>' → logprob: -11.379372596740723
    10. '    ' → logprob: -11.629372596740723

Token 241: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.001660781679674983
    2. ' return' → logprob: -6.8766608238220215
    3. 'return' → logprob: -7.3766608238220215
    4. '	return' → logprob: -13.626660346984863
    5. '```' → logprob: -14.876660346984863
    6. '       ' → logprob: -15.501660346984863
    7. '    
' → logprob: -15.876660346984863
    8. '   ' → logprob: -16.12666130065918
    9. '    ' → logprob: -16.37666130065918
    10. '
' → logprob: -17.00166130065918

Token 242: ' return' (ID: 622)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.7081640958786011
    2. 'return' (adapté à ' return') → logprob: -0.7081640958786011
    3. ' return' → logprob: -4.208164215087891
    4. ':return' → logprob: -10.95816421508789
    5. '	return' → logprob: -11.70816421508789
    6. ' ' → logprob: -13.08316421508789
    7. '  ' → logprob: -13.45816421508789
    8. '       ' → logprob: -13.95816421508789
    9. '```' → logprob: -14.83316421508789
    10. '    ' → logprob: -15.20816421508789

Token 243: ' ':' (ID: 30751)
  Prédit: '':'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '':' → logprob: -0.40842723846435547
    2. ' ':' → logprob: -2.0334272384643555
    3. '":' → logprob: -2.1584272384643555
    4. ''' → logprob: -3.1584272384643555
    5. '"' → logprob: -3.2834272384643555
    6. ' '' → logprob: -5.1584272384643555
    7. ' ":' → logprob: -6.1584272384643555
    8. ' "' → logprob: -6.9084272384643555
    9. '':[' → logprob: -10.408427238464355
    10. '':'' → logprob: -11.783427238464355

Token 244: '('' (ID: 706)
  Prédit: '(''
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '('' → logprob: -0.00036834771162830293
    2. '(' → logprob: -8.000368118286133
    3. '(':' → logprob: -11.375368118286133
    4. '(';' → logprob: -11.500368118286133
    5. '('(' → logprob: -12.500368118286133
    6. '(('' → logprob: -13.125368118286133
    7. '(\'' → logprob: -13.500368118286133
    8. '(:' → logprob: -14.250368118286133
    9. '('?' → logprob: -14.250368118286133
    10. '(',' → logprob: -14.250368118286133

Token 245: '

' (ID: 279)
  Prédit: ''
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False

Token 246: 'def' (ID: 1314)
  Prédit: '#'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '#' → logprob: -0.061386894434690475
    2. '<|end|>' → logprob: -4.061387062072754
    3. '```' → logprob: -4.061387062072754
    4. '
' → logprob: -4.436387062072754
    5. 'n' → logprob: -5.686387062072754
    6. 'def' → logprob: -5.811387062072754
    7. '[' → logprob: -6.436387062072754
    8. '\n' → logprob: -6.436387062072754
    9. 'a' → logprob: -7.186387062072754
    10. 'x' → logprob: -7.936387062072754

Token 247: ' main' (ID: 2758)
  Prédit: ' find'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' find' → logprob: -0.18883737921714783
    2. ' calculate' → logprob: -1.8138374090194702
    3. ' apply' → logprob: -6.06383752822876
    4. ' main' → logprob: -6.68883752822876
    5. ' compute' → logprob: -6.93883752822876
    6. ' original' → logprob: -7.18883752822876
    7. ' check' → logprob: -7.43883752822876
    8. ' reverse' → logprob: -7.56383752822876
    9. ' test' → logprob: -7.68883752822876
    10. ' calcul' → logprob: -8.188837051391602

Token 248: '():
' (ID: 8595)
  Prédit: '():'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '():' → logprob: -0.001912457519210875
    2. '_' → logprob: -6.626912593841553
    3. ' ():' → logprob: -7.876912593841553
    4. '(' → logprob: -9.376912117004395
    5. '():
' → logprob: -9.876912117004395
    6. '_:' → logprob: -10.626912117004395
    7. '()' → logprob: -10.751912117004395
    8. '()>' → logprob: -11.626912117004395
    9. ':' → logprob: -12.751912117004395
    10. ' (' → logprob: -12.876912117004395

Token 249: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.007422048598527908
    2. 'n' → logprob: -5.257421970367432
    3. ' n' → logprob: -6.257421970367432
    4. ' for' → logprob: -9.38242244720459
    5. '    
' → logprob: -10.13242244720459
    6. '    ' → logprob: -10.25742244720459
    7. '(n' → logprob: -10.25742244720459
    8. '```' → logprob: -11.50742244720459
    9. ' def' → logprob: -11.75742244720459
    10. ' input' → logprob: -12.25742244720459

Token 250: ' """
' (ID: 7037)
  Prédit: ' n'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' n' → logprob: -0.04923431575298309
    2. 'n' → logprob: -3.049234390258789
    3. '   ' → logprob: -8.049234390258789
    4. ' import' → logprob: -8.674234390258789
    5. ' value' → logprob: -10.049234390258789
    6. ' for' → logprob: -10.799234390258789
    7. ' user' → logprob: -11.674234390258789
    8. ' number' → logprob: -11.799234390258789
    9. ' try' → logprob: -11.799234390258789
    10. ' price' → logprob: -11.799234390258789

Token 251: '   ' (ID: 271)
  Prédit: 'n'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'n' → logprob: -0.03887946158647537
    2. '   ' → logprob: -3.53887939453125
    3. ' n' → logprob: -5.28887939453125
    4. 'price' → logprob: -6.66387939453125
    5. 'number' → logprob: -7.41387939453125
    6. 'prix' → logprob: -7.53887939453125
    7. 'try' → logprob: -8.41387939453125
    8. '#' → logprob: -8.41387939453125
    9. 'for' → logprob: -8.53887939453125
    10. ' for' → logprob: -9.16387939453125

Token 252: ' Point' (ID: 9971)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.03588958829641342
    2. '#' → logprob: -5.160889625549316
    3. 'def' → logprob: -5.410889625549316
    4. 'Tests' → logprob: -6.035889625549316
    5. 'Test' → logprob: -6.285889625549316
    6. 'print' → logprob: -6.410889625549316
    7. ' test' → logprob: -6.410889625549316
    8. ' for' → logprob: -6.535889625549316
    9. 'for' → logprob: -6.660889625549316
    10. '
' → logprob: -6.660889625549316

Token 253: ' d' (ID: 272)
  Prédit: ' d'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' d' → logprob: -0.06075092777609825
    2. ' de' → logprob: -2.935750961303711
    3. '   ' → logprob: -5.810750961303711
    4. 'd' → logprob: -6.310750961303711
    5. ' ' → logprob: -7.685750961303711
    6. '_' → logprob: -8.685750961303711
    7. 'de' → logprob: -9.060750961303711
    8. '  ' → logprob: -9.060750961303711
    9. 'def' → logprob: -10.060750961303711
    10. '_d' → logprob: -10.685750961303711

Token 254: ''entrée' (ID: 115820)
  Prédit: 'entrée'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'entrée' → logprob: -0.1273345798254013
    2. ''entrée' → logprob: -2.1273345947265625
    3. 'entr' → logprob: -8.127334594726562
    4. '_' → logprob: -10.127334594726562
    5. 'ent' → logprob: -10.377334594726562
    6. '’entrée' → logprob: -11.127334594726562
    7. 'entry' → logprob: -12.002334594726562
    8. 'entrant' → logprob: -12.002334594726562
    9. ''ent' → logprob: -12.127334594726562
    10. ' entrée' → logprob: -13.002334594726562

Token 255: ' principal' (ID: 10589)
  Prédit: ' de'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' de' → logprob: -0.5866400599479675
    2. '   ' → logprob: -1.2116401195526123
    3. ':' → logprob: -2.7116401195526123
    4. ' :' → logprob: -3.8366401195526123
    5. ' du' → logprob: -4.336639881134033
    6. ' d' → logprob: -5.086639881134033
    7. ' des' → logprob: -5.336639881134033
    8. 'def' → logprob: -5.336639881134033
    9. '    ' → logprob: -5.586639881134033
    10. 'de' → logprob: -5.711639881134033

Token 256: ' du' (ID: 1462)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.6184049844741821
    2. ':' → logprob: -1.6184049844741821
    3. 'def' → logprob: -1.6184049844741821
    4. ' :' → logprob: -3.7434048652648926
    5. ':
' → logprob: -4.868404865264893
    6. '():' → logprob: -4.868404865264893
    7. ' def' → logprob: -5.118404865264893
    8. '():
' → logprob: -5.243404865264893
    9. ' :
' → logprob: -5.493404865264893
    10. ' de' → logprob: -6.368404865264893

Token 257: ' programme' (ID: 18190)
  Prédit: 'programme'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'programme' → logprob: -0.010260174050927162
    2. 'program' → logprob: -5.010260105133057
    3. ' programme' → logprob: -5.760260105133057
    4. 'script' → logprob: -8.010260581970215
    5. 'code' → logprob: -10.635260581970215
    6. 'programma' → logprob: -11.510260581970215
    7. ' script' → logprob: -11.635260581970215
    8. ' program' → logprob: -12.260260581970215
    9. 'programm' → logprob: -12.635260581970215
    10. 'prog' → logprob: -13.010260581970215

Token 258: '.
' (ID: 558)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.029146626591682434
    2. ':' → logprob: -3.904146671295166
    3. 'def' → logprob: -5.529146671295166
    4. '
' → logprob: -6.029146671295166
    5. '    
' → logprob: -6.904146671295166
    6. ':
' → logprob: -7.904146671295166
    7. ' :' → logprob: -8.029146194458008
    8. ')' → logprob: -8.904146194458008
    9. '```' → logprob: -9.529146194458008
    10. '):' → logprob: -9.654146194458008

Token 259: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.0011075903894379735
    2. '    
' → logprob: -7.626107692718506
    3. '
' → logprob: -8.251107215881348
    4. ')' → logprob: -9.001107215881348
    5. '    ' → logprob: -9.626107215881348
    6. '```' → logprob: -10.251107215881348
    7. ' ' → logprob: -10.626107215881348
    8. '  ' → logprob: -10.626107215881348
    9. '  
' → logprob: -10.876107215881348
    10. 'n' → logprob: -11.001107215881348

Token 260: ' Lit' (ID: 45595)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.02309616096317768
    2. 'n' → logprob: -4.148096084594727
    3. ' n' → logprob: -5.148096084594727
    4. '```' → logprob: -7.773096084594727
    5. '
' → logprob: -8.148096084594727
    6. ' for' → logprob: -8.898096084594727
    7. 'user' → logprob: -9.273096084594727
    8. '    
' → logprob: -9.398096084594727
    9. 'def' → logprob: -10.148096084594727
    10. ' user' → logprob: -10.273096084594727

Token 261: ' une' (ID: 2463)
  Prédit: '()'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '()' → logprob: -0.3366778790950775
    2. '   ' → logprob: -1.3366779088974
    3. ' ' → logprob: -5.2116780281066895
    4. ' l' → logprob: -5.3366780281066895
    5. ' la' → logprob: -5.8366780281066895
    6. ' une' → logprob: -6.0866780281066895
    7. ' le' → logprob: -6.3366780281066895
    8. ' un' → logprob: -6.4616780281066895
    9. '    ' → logprob: -6.5866780281066895
    10. ' input' → logprob: -7.5866780281066895

Token 262: ' entrée' (ID: 95590)
  Prédit: ' valeur'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' valeur' → logprob: -0.28346967697143555
    2. 'int' → logprob: -2.4084696769714355
    3. ' ligne' → logprob: -3.2834696769714355
    4. 'val' → logprob: -3.4084696769714355
    5. 'n' → logprob: -3.7834696769714355
    6. ' ' → logprob: -4.2834696769714355
    7. 'entrée' → logprob: -4.4084696769714355
    8. '   ' → logprob: -4.7834696769714355
    9. 'l' → logprob: -5.9084696769714355
    10. 'ligne' → logprob: -6.0334696769714355

Token 263: ' utilisateur' (ID: 115595)
  Prédit: '()'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '()' → logprob: -0.0035588506143540144
    2. ' ()' → logprob: -6.12855863571167
    3. '   ' → logprob: -7.62855863571167
    4. ':' → logprob: -9.003559112548828
    5. '_' → logprob: -9.128559112548828
    6. '()
' → logprob: -9.378559112548828
    7. 'n' → logprob: -9.628559112548828
    8. ',' → logprob: -9.628559112548828
    9. ' =' → logprob: -9.878559112548828
    10. '().' → logprob: -10.003559112548828

Token 264: ',' (ID: 11)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.07561883330345154
    2. '()' → logprob: -3.5756187438964844
    3. ',' → logprob: -4.075618743896484
    4. ':' → logprob: -4.700618743896484
    5. '.' → logprob: -4.700618743896484
    6. '():' → logprob: -5.950618743896484
    7. ' :' → logprob: -6.450618743896484
    8. 'n' → logprob: -6.825618743896484
    9. ' ' → logprob: -7.325618743896484
    10. ' ,' → logprob: -7.575618743896484

Token 265: ' cherche' (ID: 52345)
  Prédit: ' n'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' n' → logprob: -0.1920546591281891
    2. '   ' → logprob: -2.0670547485351562
    3. 'n' → logprob: -3.0670547485351562
    4. '    ' → logprob: -7.692054748535156
    5. '    
' → logprob: -8.692054748535156
    6. ' price' → logprob: -8.692054748535156
    7. ' prix' → logprob: -8.942054748535156
    8. ' try' → logprob: -9.067054748535156
    9. ' 
' → logprob: -9.942054748535156
    10. ' ' → logprob: -10.067054748535156

Token 266: ' le' (ID: 505)
  Prédit: ' le'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' le' → logprob: -0.058251164853572845
    2. ' l' → logprob: -3.308251142501831
    3. 'le' → logprob: -4.68325138092041
    4. ' la' → logprob: -5.30825138092041
    5. ' un' → logprob: -6.30825138092041
    6. 'l' → logprob: -6.93325138092041
    7. '   ' → logprob: -7.30825138092041
    8. '_' → logprob: -7.43325138092041
    9. ' ' → logprob: -7.55825138092041
    10. '_le' → logprob: -8.18325138092041

Token 267: ' prix' (ID: 18771)
  Prédit: 'prix'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'prix' → logprob: -0.044894516468048096
    2. ' prix' → logprob: -3.1698944568634033
    3. 'original' → logprob: -7.169894695281982
    4. 'nombre' → logprob: -8.419894218444824
    5. 'price' → logprob: -8.419894218444824
    6. ' original' → logprob: -8.669894218444824
    7. 'x' → logprob: -9.419894218444824
    8. 'n' → logprob: -9.544894218444824
    9. 'pr' → logprob: -9.794894218444824
    10. ' montant' → logprob: -10.419894218444824

Token 268: ' initial' (ID: 4871)
  Prédit: ' d'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' d' → logprob: -1.6294782161712646
    2. ' initial' → logprob: -1.6294782161712646
    3. '_initial' → logprob: -1.7544782161712646
    4. '_' → logprob: -2.3794782161712646
    5. ' original' → logprob: -2.3794782161712646
    6. 'initial' → logprob: -2.5044782161712646
    7. '_original' → logprob: -2.5044782161712646
    8. 'original' → logprob: -3.3794782161712646
    9. 'd' → logprob: -3.6294782161712646
    10. '   ' → logprob: -5.004478454589844

Token 269: ' avant' (ID: 13339)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.5540933012962341
    2. ',' → logprob: -0.9290933012962341
    3. ' avec' → logprob: -4.679093360900879
    4. ' final' → logprob: -5.679093360900879
    5. ' initial' → logprob: -5.804093360900879
    6. 'def' → logprob: -5.804093360900879
    7. 'final' → logprob: -5.804093360900879
    8. ' with' → logprob: -6.804093360900879
    9. ' ,' → logprob: -7.054093360900879
    10. '    
' → logprob: -7.179093360900879

Token 270: ' taxe' (ID: 174271)
  Prédit: 'tax'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'tax' → logprob: -0.11552564799785614
    2. ' taxe' → logprob: -3.240525722503662
    3. '   ' → logprob: -3.365525722503662
    4. ' tax' → logprob: -4.365525722503662
    5. ' la' → logprob: -4.490525722503662
    6. 'la' → logprob: -5.365525722503662
    7. ' ' → logprob: -6.115525722503662
    8. ' taxes' → logprob: -6.240525722503662
    9. ' taxation' → logprob: -8.115525245666504
    10. 't' → logprob: -8.240525245666504

Token 271: ',' (ID: 11)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.38799259066581726
    2. ',' → logprob: -1.1379926204681396
    3. ' et' → logprob: -7.8879923820495605
    4. '.' → logprob: -8.387992858886719
    5. 'n' → logprob: -8.762992858886719
    6. ' ,' → logprob: -9.012992858886719
    7. 'def' → logprob: -10.012992858886719
    8. ',
' → logprob: -10.387992858886719
    9. ' n' → logprob: -10.762992858886719
    10. 'et' → logprob: -10.762992858886719

Token 272: ' puis' (ID: 18766)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.04424353688955307
    2. ' et' → logprob: -3.919243574142456
    3. ' puis' → logprob: -3.919243574142456
    4. 'et' → logprob: -5.919243335723877
    5. ' and' → logprob: -7.419243335723877
    6. '    ' → logprob: -9.669243812561035
    7. 'p' → logprob: -9.794243812561035
    8. 'and' → logprob: -9.919243812561035
    9. ',' → logprob: -11.044243812561035
    10. '  ' → logprob: -11.169243812561035

Token 273: ' affiche' (ID: 127479)
  Prédit: ' l'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' l' → logprob: -0.2113993614912033
    2. '   ' → logprob: -2.3363993167877197
    3. ' affiche' → logprob: -2.7113993167877197
    4. ' print' → logprob: -4.711399555206299
    5. 'print' → logprob: -5.086399555206299
    6. 'aff' → logprob: -5.836399555206299
    7. 'l' → logprob: -5.836399555206299
    8. ' le' → logprob: -6.336399555206299
    9. ' imprime' → logprob: -6.586399555206299
    10. '```' → logprob: -6.836399555206299

Token 274: ' le' (ID: 505)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(' → logprob: -0.056280676275491714
    2. '()' → logprob: -3.6812806129455566
    3. ' le' → logprob: -4.556280612945557
    4. '   ' → logprob: -5.306280612945557
    5. '(
' → logprob: -5.931280612945557
    6. '(n' → logprob: -5.931280612945557
    7. 'le' → logprob: -6.306280612945557
    8. ' la' → logprob: -6.306280612945557
    9. '(le' → logprob: -7.056280612945557
    10. ')' → logprob: -7.181280612945557

Token 275: ' résultat' (ID: 62556)
  Prédit: ' résultat'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' résultat' → logprob: -0.053251590579748154
    2. 'result' → logprob: -3.8032515048980713
    3. 'rés' → logprob: -4.17825174331665
    4. ' prix' → logprob: -5.42825174331665
    5. 'prix' → logprob: -5.42825174331665
    6. ' resultat' → logprob: -6.05325174331665
    7. ' result' → logprob: -6.17825174331665
    8. '   ' → logprob: -7.67825174331665
    9. '_' → logprob: -8.928251266479492
    10. 'r' → logprob: -9.303251266479492

Token 276: '.
' (ID: 558)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.0051973480731248856
    2. '.' → logprob: -5.380197525024414
    3. ')' → logprob: -7.630197525024414
    4. '    
' → logprob: -10.755197525024414
    5. '<|end|>' → logprob: -11.005197525024414
    6. ':' → logprob: -11.255197525024414
    7. 'def' → logprob: -11.380197525024414
    8. '):' → logprob: -12.380197525024414
    9. ').' → logprob: -12.380197525024414
    10. '```' → logprob: -12.505197525024414

Token 277: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.000635235570371151
    2. '    
' → logprob: -7.625635147094727
    3. '
' → logprob: -9.250635147094727
    4. '```' → logprob: -10.875635147094727
    5. ')' → logprob: -11.625635147094727
    6. '  
' → logprob: -12.125635147094727
    7. '    ' → logprob: -12.500635147094727
    8. ' ' → logprob: -13.125635147094727
    9. ' 
' → logprob: -13.250635147094727
    10. 'input' → logprob: -13.375635147094727

Token 278: ' """
' (ID: 7037)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.07186047732830048
    2. 'n' → logprob: -2.6968605518341064
    3. ' n' → logprob: -6.446860313415527
    4. 'input' → logprob: -9.571860313415527
    5. '    
' → logprob: -9.571860313415527
    6. '```' → logprob: -9.571860313415527
    7. '
' → logprob: -9.696860313415527
    8. ' input' → logprob: -11.696860313415527
    9. 'price' → logprob: -11.821860313415527
    10. 'try' → logprob: -11.821860313415527

Token 279: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.06342488527297974
    2. 'n' → logprob: -3.313424825668335
    3. ' n' → logprob: -3.688424825668335
    4. '	n' → logprob: -10.438425064086914
    5. ' input' → logprob: -11.563425064086914
    6. 'input' → logprob: -12.188425064086914
    7. 'try' → logprob: -13.313425064086914
    8. ' try' → logprob: -13.563425064086914
    9. '   ' → logprob: -13.563425064086914
    10. 'import' → logprob: -13.813425064086914

Token 280: ' #' (ID: 1069)
  Prédit: 'n'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'n' → logprob: -0.02673112228512764
    2. ' n' → logprob: -3.776731014251709
    3. '   ' → logprob: -5.901731014251709
    4. 'try' → logprob: -7.776731014251709
    5. 'price' → logprob: -8.401731491088867
    6. ' price' → logprob: -10.776731491088867
    7. ' try' → logprob: -10.776731491088867
    8. 'import' → logprob: -11.276731491088867
    9. 'prix' → logprob: -11.651731491088867
    10. 'value' → logprob: -12.026731491088867

Token 281: ' Lecture' (ID: 106534)
  Prédit: 'n'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'n' → logprob: -0.012403221800923347
    2. 'price' → logprob: -5.0124030113220215
    3. 'try' → logprob: -5.8874030113220215
    4. ' n' → logprob: -6.1374030113220215
    5. 'import' → logprob: -8.13740348815918
    6. 'prix' → logprob: -9.38740348815918
    7. 'input' → logprob: -9.63740348815918
    8. ' price' → logprob: -10.01240348815918
    9. 'value' → logprob: -10.26240348815918
    10. '   ' → logprob: -10.38740348815918

Token 282: ' de' (ID: 334)
  Prédit: '()'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '()' → logprob: -0.7991946339607239
    2. '   ' → logprob: -1.174194574356079
    3. '(' → logprob: -1.549194574356079
    4. '(n' → logprob: -4.424194812774658
    5. 'user' → logprob: -5.299194812774658
    6. ' =' → logprob: -5.799194812774658
    7. 'n' → logprob: -6.549194812774658
    8. ' (' → logprob: -7.174194812774658
    9. 'input' → logprob: -7.174194812774658
    10. '    ' → logprob: -7.299194812774658

Token 283: ' l' (ID: 305)
  Prédit: ' n'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' n' → logprob: -0.4343055486679077
    2. 'n' → logprob: -1.0593055486679077
    3. ' la' → logprob: -6.434305667877197
    4. ' ' → logprob: -6.934305667877197
    5. ' l' → logprob: -7.559305667877197
    6. ' input' → logprob: -7.559305667877197
    7. '   ' → logprob: -7.684305667877197
    8. 'l' → logprob: -8.184305191040039
    9. ' user' → logprob: -8.434305191040039
    10. 'input' → logprob: -8.809305191040039

Token 284: ''entrée' (ID: 115820)
  Prédit: 'entrée'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'entrée' → logprob: -0.30926671624183655
    2. 'input' → logprob: -1.5592666864395142
    3. ''entrée' → logprob: -3.9342668056488037
    4. 'ent' → logprob: -4.309266567230225
    5. 'a' → logprob: -4.934266567230225
    6. ' input' → logprob: -5.309266567230225
    7. 'int' → logprob: -5.434266567230225
    8. 'e' → logprob: -6.059266567230225
    9. '   ' → logprob: -6.309266567230225
    10. 'n' → logprob: -7.059266567230225

Token 285: ' utilisateur' (ID: 115595)
  Prédit: 'n'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'n' → logprob: -0.29699477553367615
    2. ' n' → logprob: -1.4219948053359985
    3. '   ' → logprob: -4.171994686126709
    4. ' ' → logprob: -9.796995162963867
    5. '	n' → logprob: -10.046995162963867
    6. ' price' → logprob: -10.171995162963867
    7. 'user' → logprob: -10.671995162963867
    8. ' =' → logprob: -10.796995162963867
    9. 'value' → logprob: -11.046995162963867
    10. ' user' → logprob: -11.171995162963867

Token 286: ' représentant' (ID: 136122)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.46588146686553955
    2. 'n' → logprob: -1.4658814668655396
    3. ' n' → logprob: -1.9658814668655396
    4. '    
' → logprob: -7.84088134765625
    5. '	n' → logprob: -7.84088134765625
    6. '
' → logprob: -8.21588134765625
    7. ' =' → logprob: -9.46588134765625
    8. ' 
' → logprob: -10.09088134765625
    9. ' input' → logprob: -10.34088134765625
    10. 'input' → logprob: -10.46588134765625

Token 287: ' le' (ID: 505)
  Prédit: ' n'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' n' → logprob: -0.38856321573257446
    2. ' le' → logprob: -1.8885631561279297
    3. 'n' → logprob: -2.2635631561279297
    4. ' un' → logprob: -3.0135631561279297
    5. '   ' → logprob: -4.76356315612793
    6. ' la' → logprob: -5.63856315612793
    7. ' l' → logprob: -6.38856315612793
    8. ' ' → logprob: -6.88856315612793
    9. 'int' → logprob: -7.26356315612793
    10. 'le' → logprob: -8.01356315612793

Token 288: ' prix' (ID: 18771)
  Prédit: 'prix'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'prix' → logprob: -0.02632259577512741
    2. ' prix' → logprob: -3.776322603225708
    3. 'nombre' → logprob: -6.526322364807129
    4. 'n' → logprob: -7.151322364807129
    5. 'mont' → logprob: -7.776322364807129
    6. ' montant' → logprob: -8.276322364807129
    7. 'price' → logprob: -9.776322364807129
    8. ' nombre' → logprob: -10.651322364807129
    9. ' n' → logprob: -11.401322364807129
    10. '   ' → logprob: -11.651322364807129

Token 289: ' après' (ID: 16460)
  Prédit: ' final'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' final' → logprob: -0.5801093578338623
    2. 'final' → logprob: -0.9551093578338623
    3. '_final' → logprob: -3.2051093578338623
    4. '   ' → logprob: -5.080109596252441
    5. '_' → logprob: -6.205109596252441
    6. ' =' → logprob: -6.705109596252441
    7. ' n' → logprob: -6.955109596252441
    8. 'n' → logprob: -7.205109596252441
    9. 'f' → logprob: -7.705109596252441
    10. ' avec' → logprob: -8.080109596252441

Token 290: ' taxe' (ID: 174271)
  Prédit: 'tax'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'tax' → logprob: -0.19307905435562134
    2. ' taxe' → logprob: -1.8180789947509766
    3. ' la' → logprob: -5.318078994750977
    4. 'la' → logprob: -5.818078994750977
    5. ' tax' → logprob: -5.943078994750977
    6. ' taxes' → logprob: -7.068078994750977
    7. ' ' → logprob: -7.693078994750977
    8. 't' → logprob: -8.193078994750977
    9. '   ' → logprob: -8.318078994750977
    10. '_' → logprob: -9.068078994750977

Token 291: '
' (ID: 198)
  Prédit: 'n'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'n' → logprob: -0.12513047456741333
    2. '   ' → logprob: -2.3751304149627686
    3. ' n' → logprob: -3.7501304149627686
    4. ' =' → logprob: -7.625130653381348
    5. ',' → logprob: -7.750130653381348
    6. '=' → logprob: -10.250130653381348
    7. 'price' → logprob: -10.375130653381348
    8. '
' → logprob: -10.750130653381348
    9. ' price' → logprob: -10.750130653381348
    10. '	n' → logprob: -11.250130653381348

Token 292: '   ' (ID: 271)
  Prédit: 'n'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'n' → logprob: -0.5660333037376404
    2. '   ' → logprob: -0.9410333037376404
    3. ' n' → logprob: -3.191033363342285
    4. ',' → logprob: -8.691033363342285
    5. ' =' → logprob: -8.941033363342285
    6. '	n' → logprob: -9.441033363342285
    7. ' price' → logprob: -9.441033363342285
    8. ' input' → logprob: -9.816033363342285
    9. '    
' → logprob: -9.941033363342285
    10. '=' → logprob: -10.691033363342285

Token 293: ' n' (ID: 297)
  Prédit: 'n'
  Correct (stricte): False
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'n' (adapté à ' n') → logprob: -0.11035343259572983
    2. ' n' → logprob: -2.360353469848633
    3. '   ' → logprob: -4.610353469848633
    4. 'final' → logprob: -10.360353469848633
    5. 'price' → logprob: -10.610353469848633
    6. '	n' → logprob: -10.860353469848633
    7. ' ' → logprob: -10.985353469848633
    8. ' price' → logprob: -11.485353469848633
    9. ' final' → logprob: -11.485353469848633
    10. 'try' → logprob: -11.485353469848633

Token 294: ' =' (ID: 314)
  Prédit: ' ='
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' =' → logprob: -0.10021896660327911
    2. '=' → logprob: -2.3502190113067627
    3. '=int' → logprob: -11.600218772888184
    4. '=input' → logprob: -13.100218772888184
    5. ' ' → logprob: -14.225218772888184
    6. ')' → logprob: -15.725218772888184
    7. ',' → logprob: -16.1002197265625
    8. '   ' → logprob: -16.8502197265625
    9. '	' → logprob: -16.9752197265625
    10. '.' → logprob: -16.9752197265625

Token 295: ' int' (ID: 677)
  Prédit: 'int'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'int' → logprob: -0.06196768581867218
    2. ' int' → logprob: -2.811967611312866
    3. '=int' → logprob: -17.936967849731445
    4. '	int' → logprob: -18.686967849731445
    5. '[int' → logprob: -18.686967849731445
    6. '   ' → logprob: -18.936967849731445
    7. '(int' → logprob: -18.936967849731445
    8. ' ' → logprob: -19.186967849731445
    9. '<int' → logprob: -19.936967849731445
    10. 'input' → logprob: -20.561967849731445

Token 296: '(input' (ID: 10054)
  Prédit: '(input'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(input' → logprob: -0.0005631613312289119
    2. '(' → logprob: -7.500563144683838
    3. 'input' → logprob: -11.500563621520996
    4. ' input' → logprob: -17.87556266784668
    5. '=input' → logprob: -18.00056266784668
    6. ' (' → logprob: -18.37556266784668
    7. '	input' → logprob: -20.00056266784668
    8. '<input' → logprob: -20.25056266784668
    9. ',input' → logprob: -20.37556266784668
    10. '()' → logprob: -20.50056266784668

Token 297: '())
' (ID: 4574)
  Prédit: '()'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '()' → logprob: -0.38934242725372314
    2. '())' → logprob: -1.1393424272537231
    3. '(' → logprob: -6.139342308044434
    4. ' ())' → logprob: -9.764342308044434
    5. '('' → logprob: -9.889342308044434
    6. '()>' → logprob: -10.139342308044434
    7. '();)' → logprob: -10.889342308044434
    8. ')' → logprob: -10.889342308044434
    9. '("("' → logprob: -11.014342308044434
    10. '().' → logprob: -11.389342308044434

Token 298: '   ' (ID: 271)
  Prédit: 'result'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'result' → logprob: -0.6132364273071289
    2. '   ' → logprob: -0.8632364273071289
    3. '
' → logprob: -4.238236427307129
    4. ' result' → logprob: -4.488236427307129
    5. '    
' → logprob: -4.988236427307129
    6. '<|end|>' → logprob: -6.488236427307129
    7. 'x' → logprob: -7.363236427307129
    8. '	result' → logprob: -7.863236427307129
    9. '  
' → logprob: -7.863236427307129
    10. 'n' → logprob: -8.363236427307129

Token 299: ' #' (ID: 1069)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.1076124757528305
    2. 'result' → logprob: -2.357612371444702
    3. ' result' → logprob: -4.982612609863281
    4. '    
' → logprob: -8.357612609863281
    5. 'original' → logprob: -8.982612609863281
    6. ' original' → logprob: -10.232612609863281
    7. 'price' → logprob: -10.607612609863281
    8. '
' → logprob: -10.732612609863281
    9. '	result' → logprob: -11.107612609863281
    10. 'res' → logprob: -11.232612609863281

Token 300: ' Calcul' (ID: 57243)
  Prédit: 'result'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'result' → logprob: -0.026374032720923424
    2. ' result' → logprob: -5.026373863220215
    3. 'original' → logprob: -5.026373863220215
    4. 'res' → logprob: -5.526373863220215
    5. 'print' → logprob: -5.526373863220215
    6. 'x' → logprob: -6.026373863220215
    7. 'prix' → logprob: -6.651373863220215
    8. 'price' → logprob: -7.776373863220215
    9. ' original' → logprob: -8.026373863220215
    10. ' res' → logprob: -8.651373863220215

Token 301: ' du' (ID: 1462)
  Prédit: '_result'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_result' → logprob: -0.265183687210083
    2. 'result' → logprob: -2.140183687210083
    3. ' =' → logprob: -2.765183687210083
    4. '   ' → logprob: -3.640183687210083
    5. '_' → logprob: -4.390183448791504
    6. '_original' → logprob: -5.140183448791504
    7. '=' → logprob: -6.015183448791504
    8. ' result' → logprob: -6.015183448791504
    9. 'original' → logprob: -7.515183448791504
    10. ' du' → logprob: -7.890183448791504

Token 302: ' prix' (ID: 18771)
  Prédit: 'result'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'result' → logprob: -0.007247264496982098
    2. 'prix' → logprob: -6.132247447967529
    3. 'original' → logprob: -6.257247447967529
    4. 'find' → logprob: -6.382247447967529
    5. 'print' → logprob: -7.757247447967529
    6. ' result' → logprob: -8.007246971130371
    7. 'res' → logprob: -8.132246971130371
    8. 'price' → logprob: -8.757246971130371
    9. 'x' → logprob: -9.382246971130371
    10. ' find' → logprob: -9.882246971130371

Token 303: ' initial' (ID: 4871)
  Prédit: '_initial'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_initial' → logprob: -0.47560587525367737
    2. 'initial' → logprob: -1.350605845451355
    3. '_' → logprob: -3.2256059646606445
    4. '_original' → logprob: -3.4756059646606445
    5. 'original' → logprob: -3.8506059646606445
    6. ' initial' → logprob: -4.2256059646606445
    7. ' d' → logprob: -5.6006059646606445
    8. ' original' → logprob: -5.7256059646606445
    9. 'd' → logprob: -6.1006059646606445
    10. '   ' → logprob: -6.6006059646606445

Token 304: ' à' (ID: 1221)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.9993996024131775
    2. ' x' → logprob: -1.3743996620178223
    3. ' result' → logprob: -1.6243996620178223
    4. 'result' → logprob: -2.1243996620178223
    5. 'x' → logprob: -3.3743996620178223
    6. ' original' → logprob: -3.9993996620178223
    7. ' initial' → logprob: -5.624399662017822
    8. 'original' → logprob: -6.624399662017822
    9. ' price' → logprob: -6.999399662017822
    10. 'initial' → logprob: -7.499399662017822

Token 305: ' partir' (ID: 12100)
  Prédit: 'tr'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'tr' → logprob: -0.4547393023967743
    2. 'find' → logprob: -1.0797393321990967
    3. ' trouver' → logprob: -4.954739093780518
    4. ' partir' → logprob: -4.954739093780518
    5. 'part' → logprob: -5.579739093780518
    6. ' find' → logprob: -6.579739093780518
    7. 'with' → logprob: -6.704739093780518
    8. 'n' → logprob: -7.079739093780518
    9. 'chercher' → logprob: -7.079739093780518
    10. 'aff' → logprob: -7.454739093780518

Token 306: ' du' (ID: 1462)
  Prédit: 'n'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'n' → logprob: -0.7372576594352722
    2. ' n' → logprob: -1.362257719039917
    3. ' de' → logprob: -1.737257719039917
    4. '(n' → logprob: -3.237257719039917
    5. ' du' → logprob: -3.612257719039917
    6. 'de' → logprob: -4.487257480621338
    7. '   ' → logprob: -4.987257480621338
    8. 'du' → logprob: -5.737257480621338
    9. ' avec' → logprob: -7.987257480621338
    10. ')' → logprob: -8.612257957458496

Token 307: ' prix' (ID: 18771)
  Prédit: 'n'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'n' → logprob: -0.007365609984844923
    2. ' n' → logprob: -5.257365703582764
    3. 'prix' → logprob: -6.507365703582764
    4. ' prix' → logprob: -7.507365703582764
    5. ' code' → logprob: -10.382365226745605
    6. 'result' → logprob: -11.007365226745605
    7. ' find' → logprob: -11.257365226745605
    8. 'find' → logprob: -11.757365226745605
    9. 'code' → logprob: -12.757365226745605
    10. ' résultat' → logprob: -13.007365226745605

Token 308: ' après' (ID: 16460)
  Prédit: 'ap'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'ap' → logprob: -0.5753991007804871
    2. '   ' → logprob: -2.075399160385132
    3. 'n' → logprob: -2.200399160385132
    4. ' après' → logprob: -2.325399160385132
    5. 'final' → logprob: -3.325399160385132
    6. ' final' → logprob: -4.325398921966553
    7. ' n' → logprob: -4.450398921966553
    8. ' apres' → logprob: -4.450398921966553
    9. 'avec' → logprob: -5.075398921966553
    10. '_ap' → logprob: -5.325398921966553

Token 309: ' taxe' (ID: 174271)
  Prédit: 'tax'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'tax' → logprob: -0.08385512232780457
    2. ' taxe' → logprob: -2.708855152130127
    3. ' tax' → logprob: -4.708855152130127
    4. ' n' → logprob: -6.083855152130127
    5. 'n' → logprob: -6.708855152130127
    6. ' taxes' → logprob: -8.458854675292969
    7. '   ' → logprob: -8.583854675292969
    8. ' la' → logprob: -8.708854675292969
    9. ' ' → logprob: -8.708854675292969
    10. '_tax' → logprob: -8.833854675292969

Token 310: '
' (ID: 198)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.2662680447101593
    2. 'result' → logprob: -1.641268014907837
    3. ' result' → logprob: -3.266268014907837
    4. 'x' → logprob: -7.516268253326416
    5. ' x' → logprob: -7.641268253326416
    6. 'price' → logprob: -8.766267776489258
    7. 'original' → logprob: -8.891267776489258
    8. 'print' → logprob: -9.266267776489258
    9. ' original' → logprob: -9.266267776489258
    10. 'res' → logprob: -9.641267776489258

Token 311: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.15892180800437927
    2. 'result' → logprob: -2.408921718597412
    3. ' result' → logprob: -2.908921718597412
    4. ' original' → logprob: -7.033921718597412
    5. 'original' → logprob: -7.658921718597412
    6. ' x' → logprob: -7.908921718597412
    7. 'x' → logprob: -7.908921718597412
    8. 'print' → logprob: -9.40892219543457
    9. 'price' → logprob: -9.40892219543457
    10. ' price' → logprob: -9.53392219543457

Token 312: ' result' (ID: 1534)
  Prédit: 'result'
  Correct (stricte): False
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'result' (adapté à ' result') → logprob: -0.09821833670139313
    2. 'print' → logprob: -2.8482184410095215
    3. 'x' → logprob: -4.0982184410095215
    4. 'original' → logprob: -4.5982184410095215
    5. ' result' → logprob: -5.2232184410095215
    6. ' print' → logprob: -6.8482184410095215
    7. 'res' → logprob: -6.8482184410095215
    8. 'price' → logprob: -7.0982184410095215
    9. ' original' → logprob: -8.473217964172363
    10. ' x' → logprob: -8.973217964172363

Token 313: ' =' (ID: 314)
  Prédit: ' ='
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' =' → logprob: -0.061969365924596786
    2. '=' → logprob: -2.81196928024292
    3. '=find' → logprob: -13.561969757080078
    4. '_' → logprob: -15.311969757080078
    5. '_=' → logprob: -15.936969757080078
    6. 's' → logprob: -17.311969757080078
    7. '＝' → logprob: -17.311969757080078
    8. ')' → logprob: -18.061969757080078
    9. ' ' → logprob: -18.686969757080078
    10. ',' → logprob: -18.936969757080078

Token 314: ' find' (ID: 1646)
  Prédit: 'find'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'find' → logprob: -0.01416350994259119
    2. ' find' → logprob: -4.264163494110107
    3. '(find' → logprob: -16.764163970947266
    4. '	find' → logprob: -18.264163970947266
    5. '=find' → logprob: -19.639163970947266
    6. '.find' → logprob: -21.014163970947266
    7. ')find' → logprob: -21.514163970947266
    8. '   ' → logprob: -21.639163970947266
    9. '_find' → logprob: -22.264163970947266
    10. '
' → logprob: -22.639163970947266

Token 315: '_original' (ID: 92075)
  Prédit: '_original'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_original' → logprob: -2.2200749754119897e-06
    2. '_' → logprob: -13.500001907348633
    3. 'original' → logprob: -15.375001907348633
    4. '_orig' → logprob: -15.750001907348633
    5. '_initial' → logprob: -15.875001907348633
    6. 'Original' → logprob: -16.375001907348633
    7. '_origin' → logprob: -16.375001907348633
    8. '(original' → logprob: -18.250001907348633
    9. '_previous' → logprob: -18.375001907348633
    10. ' _' → logprob: -18.375001907348633

Token 316: '_price' (ID: 18814)
  Prédit: '_price'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_price' → logprob: -0.0002624086628202349
    2. '_' → logprob: -8.375262260437012
    3. '_prices' → logprob: -10.625262260437012
    4. ' _' → logprob: -12.750262260437012
    5. '_p' → logprob: -13.625262260437012
    6. '_pr' → logprob: -14.625262260437012
    7. '_code' → logprob: -14.750262260437012
    8. '_cost' → logprob: -14.875262260437012
    9. 'price' → logprob: -15.125262260437012
    10. '_PRICE' → logprob: -15.750262260437012

Token 317: '_with' (ID: 14161)
  Prédit: '_with'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_with' → logprob: -5.512236498361744e-07
    2. 'with' → logprob: -15.500000953674316
    3. '_' → logprob: -16.0
    4. '_price' → logprob: -16.5
    5. '_WITH' → logprob: -17.75
    6. '_w' → logprob: -18.375
    7. ' _' → logprob: -19.75
    8. '_without' → logprob: -20.0
    9. '_to' → logprob: -20.125
    10. '_from' → logprob: -20.125

Token 318: '_tax' (ID: 61146)
  Prédit: '_tax'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_tax' → logprob: -2.522638169466518e-05
    2. 'tax' → logprob: -10.625024795532227
    3. '_' → logprob: -15.250024795532227
    4. ' _' → logprob: -15.875024795532227
    5. ' tax' → logprob: -16.125024795532227
    6. '_price' → logprob: -16.500024795532227
    7. '_tar' → logprob: -17.250024795532227
    8. '```' → logprob: -17.500024795532227
    9. '_t' → logprob: -17.625024795532227
    10. 'out' → logprob: -17.875024795532227

Token 319: '(n' (ID: 2406)
  Prédit: '(n'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(n' → logprob: -0.0004450892156455666
    2. '_with' → logprob: -8.750445365905762
    3. '(result' → logprob: -8.875445365905762
    4. '(' → logprob: -8.875445365905762
    5. ' (' → logprob: -13.000445365905762
    6. 'with' → logprob: -13.125445365905762
    7. 'result' → logprob: -13.250445365905762
    8. 'With' → logprob: -15.250445365905762
    9. '_' → logprob: -15.875445365905762
    10. '_result' → logprob: -16.500444412231445

Token 320: ')
' (ID: 446)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')' → logprob: -0.0008702484192326665
    2. '(n' → logprob: -7.125870227813721
    3. '   ' → logprob: -10.500870704650879
    4. '(' → logprob: -10.875870704650879
    5. ')
' → logprob: -11.000870704650879
    6. ' )' → logprob: -13.375870704650879
    7. ')n' → logprob: -15.250870704650879
    8. '))' → logprob: -15.750870704650879
    9. ' ' → logprob: -16.250869750976562
    10. ')
' → logprob: -16.375869750976562

Token 321: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.0009275413467548788
    2. 'print' → logprob: -7.000927448272705
    3. '
' → logprob: -11.750927925109863
    4. '    
' → logprob: -12.500927925109863
    5. '```' → logprob: -12.500927925109863
    6. ' print' → logprob: -14.375927925109863
    7. '	print' → logprob: -17.250926971435547
    8. '
' → logprob: -17.500926971435547
    9. '   ' → logprob: -18.375926971435547
    10. '       ' → logprob: -18.375926971435547

Token 322: ' #' (ID: 1069)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.029985586181282997
    2. 'print' → logprob: -3.5299856662750244
    3. ' print' → logprob: -8.529985427856445
    4. '
' → logprob: -10.279985427856445
    5. '    
' → logprob: -13.029985427856445
    6. '```' → logprob: -14.154985427856445
    7. '	print' → logprob: -14.529985427856445
    8. '       ' → logprob: -17.529985427856445
    9. '
' → logprob: -17.904985427856445
    10. '    ' → logprob: -18.404985427856445

Token 323: ' Aff' (ID: 13741)
  Prédit: 'print'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'print' → logprob: -0.00012356207298580557
    2. ' print' → logprob: -9.000123977661133
    3. '   ' → logprob: -15.750123977661133
    4. '```' → logprob: -21.375123977661133
    5. 'if' → logprob: -21.625123977661133
    6. '	print' → logprob: -22.875123977661133
    7. '#print' → logprob: -23.000123977661133
    8. '
' → logprob: -23.375123977661133
    9. 'printf' → logprob: -24.250123977661133
    10. 'for' → logprob: -24.375123977661133

Token 324: 'ichage' (ID: 118475)
  Prédit: 'iche'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'iche' → logprob: -0.3962884247303009
    2. 'ich' → logprob: -1.3962883949279785
    3. 'icher' → logprob: -2.6462883949279785
    4. 'ichage' → logprob: -5.0212883949279785
    5. 'print' → logprob: -6.3962883949279785
    6. '   ' → logprob: -8.146288871765137
    7. 'ic' → logprob: -8.896288871765137
    8. ' print' → logprob: -10.271288871765137
    9. '```' → logprob: -11.646288871765137
    10. 'iches' → logprob: -11.896288871765137

Token 325: ' du' (ID: 1462)
  Prédit: '(result'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '(result' → logprob: -0.029764730483293533
    2. '(' → logprob: -3.5297646522521973
    3. '   ' → logprob: -12.279765129089355
    4. '(f' → logprob: -13.154765129089355
    5. 'result' → logprob: -13.529765129089355
    6. '(
' → logprob: -13.529765129089355
    7. '(results' → logprob: -13.529765129089355
    8. ' (' → logprob: -13.529765129089355
    9. '(resultado' → logprob: -14.279765129089355
    10. '(output' → logprob: -15.154765129089355

Token 326: ' résultat' (ID: 62556)
  Prédit: 'result'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'result' → logprob: -0.00016110755677800626
    2. ' result' → logprob: -8.750161170959473
    3. '(result' → logprob: -12.875161170959473
    4. 'res' → logprob: -19.000160217285156
    5. 'results' → logprob: -19.500160217285156
    6. '   ' → logprob: -20.000160217285156
    7. ' resultat' → logprob: -20.250160217285156
    8. '	result' → logprob: -21.250160217285156
    9. ' résultat' → logprob: -21.375160217285156
    10. 'resultado' → logprob: -21.375160217285156

Token 327: ' (' (ID: 350)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.027027150616049767
    2. '(' → logprob: -4.277027130126953
    3. '(result' → logprob: -4.402027130126953
    4. '()' → logprob: -8.402027130126953
    5. '
' → logprob: -9.527027130126953
    6. '(print' → logprob: -9.777027130126953
    7. '(
' → logprob: -10.027027130126953
    8. '()
' → logprob: -10.277027130126953
    9. 'print' → logprob: -10.277027130126953
    10. '    
' → logprob: -11.027027130126953

Token 328: 'prix' (ID: 152711)
  Prédit: 'result'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'result' → logprob: -8.923874702304602e-05
    2. ' result' → logprob: -9.875089645385742
    3. ')' → logprob: -11.125089645385742
    4. 'str' → logprob: -11.625089645385742
    5. '(result' → logprob: -11.750089645385742
    6. '   ' → logprob: -12.125089645385742
    7. '""' → logprob: -15.500089645385742
    8. '"' → logprob: -16.125089645385742
    9. 'f' → logprob: -16.375089645385742
    10. 'print' → logprob: -16.500089645385742

Token 329: ' initial' (ID: 4871)
  Prédit: ' initial'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' initial' → logprob: -0.4085550308227539
    2. 'initial' → logprob: -1.158555030822754
    3. '_initial' → logprob: -4.533555030822754
    4. ' original' → logprob: -5.533555030822754
    5. '   ' → logprob: -6.158555030822754
    6. ' d' → logprob: -6.408555030822754
    7. 'original' → logprob: -6.783555030822754
    8. '(initial' → logprob: -7.408555030822754
    9. ')' → logprob: -8.033555030822754
    10. '_' → logprob: -8.658555030822754

Token 330: ' ou' (ID: 2031)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')' → logprob: -0.02362079918384552
    2. '(result' → logprob: -3.898620843887329
    3. '   ' → logprob: -6.77362060546875
    4. ',' → logprob: -7.39862060546875
    5. ')
' → logprob: -7.77362060546875
    6. ' )' → logprob: -8.02362060546875
    7. ' ou' → logprob: -8.52362060546875
    8. ' or' → logprob: -8.77362060546875
    9. 'result' → logprob: -9.52362060546875
    10. '()' → logprob: -9.77362060546875

Token 331: ' ':' (ID: 30751)
  Prédit: 'result'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'result' → logprob: -0.4303329586982727
    2. ' result' → logprob: -1.055332899093628
    3. ''' → logprob: -7.430333137512207
    4. '   ' → logprob: -7.805333137512207
    5. '':' → logprob: -8.930333137512207
    6. ')' → logprob: -9.305333137512207
    7. '"' → logprob: -9.430333137512207
    8. ' ' → logprob: -9.430333137512207
    9. ' resultat' → logprob: -9.680333137512207
    10. '":' → logprob: -10.305333137512207

Token 332: '('' (ID: 706)
  Prédit: '(''
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '('' → logprob: -0.012972922995686531
    2. '(' → logprob: -4.637972831726074
    3. '(('' → logprob: -6.387972831726074
    4. '(':' → logprob: -7.512972831726074
    5. '(:' → logprob: -7.887972831726074
    6. '((' → logprob: -9.262972831726074
    7. ''(' → logprob: -9.262972831726074
    8. '('(' → logprob: -9.262972831726074
    9. '(';' → logprob: -9.512972831726074
    10. '()' → logprob: -10.012972831726074

Token 333: ' si' (ID: 1784)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ')' → logprob: -0.040854550898075104
    2. '   ' → logprob: -3.6658544540405273
    3. ')
' → logprob: -4.290854454040527
    4. '(result' → logprob: -7.790854454040527
    5. ',' → logprob: -8.290854454040527
    6. ' )' → logprob: -10.665854454040527
    7. '(' → logprob: -10.915854454040527
    8. '()' → logprob: -11.165854454040527
    9. ',result' → logprob: -11.290854454040527
    10. 'result' → logprob: -12.040854454040527

Token 334: ' intr' (ID: 12676)
  Prédit: 'result'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'result' → logprob: -0.4549388587474823
    2. ' result' → logprob: -1.2049388885498047
    3. ' intr' → logprob: -2.9549388885498047
    4. 'not' → logprob: -5.204938888549805
    5. ' not' → logprob: -5.454938888549805
    6. 'intr' → logprob: -6.454938888549805
    7. ' impossible' → logprob: -7.454938888549805
    8. ' résultat' → logprob: -7.954938888549805
    9. ' aucune' → logprob: -8.454938888549805
    10. ' trouvé' → logprob: -8.579938888549805

Token 335: 'ouv' (ID: 14851)
  Prédit: 'ouv'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'ouv' → logprob: -0.0013696423266083002
    2. 'ouvé' → logprob: -7.001369476318359
    3. 'ou' → logprob: -8.00136947631836
    4. 'ouve' → logprob: -9.25136947631836
    5. 'o' → logprob: -11.50136947631836
    6. 'ouver' → logprob: -12.12636947631836
    7. 'ov' → logprob: -12.25136947631836
    8. 'ouvr' → logprob: -13.00136947631836
    9. 'oué' → logprob: -13.37636947631836
    10. 'ouble' → logprob: -14.00136947631836

Token 336: 'able' (ID: 562)
  Prédit: 'able'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'able' → logprob: -1.6166903151315637e-05
    2. 'alable' → logprob: -12.125016212463379
    3. 'iable' → logprob: -12.500016212463379
    4. 'al' → logprob: -13.250016212463379
    5. 'ale' → logprob: -13.625016212463379
    6. 'é' → logprob: -13.875016212463379
    7. 'ab' → logprob: -13.875016212463379
    8. 'isible' → logprob: -14.500016212463379
    9. ' able' → logprob: -14.750016212463379
    10. 'a' → logprob: -15.750016212463379

Token 337: ')
' (ID: 446)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')' → logprob: -0.0038152725901454687
    2. ')
' → logprob: -5.628815174102783
    3. '   ' → logprob: -8.503815650939941
    4. '")' → logprob: -13.128815650939941
    5. '())' → logprob: -13.378815650939941
    6. ' )' → logprob: -13.378815650939941
    7. '()' → logprob: -13.378815650939941
    8. ')
' → logprob: -13.878815650939941
    9. ')`
' → logprob: -14.003815650939941
    10. '(result' → logprob: -14.378815650939941

Token 338: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.005325904581695795
    2. 'print' → logprob: -5.255325794219971
    3. ' print' → logprob: -9.380326271057129
    4. '
' → logprob: -12.130326271057129
    5. '    
' → logprob: -13.505326271057129
    6. '```' → logprob: -14.005326271057129
    7. '	print' → logprob: -16.880325317382812
    8. '   ' → logprob: -17.880325317382812
    9. '       ' → logprob: -18.380325317382812
    10. '(print' → logprob: -18.380325317382812

Token 339: ' print' (ID: 2123)
  Prédit: 'print'
  Correct (stricte): False
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'print' (adapté à ' print') → logprob: -1.3425219549390022e-05
    2. ' print' → logprob: -11.25001335144043
    3. '   ' → logprob: -15.00001335144043
    4. '```' → logprob: -18.25001335144043
    5. '	print' → logprob: -23.00001335144043
    6. '
' → logprob: -24.37501335144043
    7. '`' → logprob: -24.62501335144043
    8. '(print' → logprob: -24.75001335144043
    9. '``' → logprob: -24.87501335144043
    10. 'Print' → logprob: -25.00001335144043

Token 340: '(result' (ID: 8111)
  Prédit: '(result'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(result' → logprob: -0.003178544342517853
    2. '(' → logprob: -5.753178596496582
    3. 'result' → logprob: -14.503178596496582
    4. '(results' → logprob: -16.128177642822266
    5. '(res' → logprob: -16.253177642822266
    6. '()' → logprob: -16.378177642822266
    7. ' (' → logprob: -17.628177642822266
    8. '(resultado' → logprob: -18.503177642822266
    9. '(
' → logprob: -18.753177642822266
    10. '(f' → logprob: -18.753177642822266

Token 341: ')

' (ID: 1029)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ')' → logprob: -1.9361264946837764e-07
    2. ' )' → logprob: -16.25
    3. ')`' → logprob: -17.75
    4. '))' → logprob: -18.25
    5. '()' → logprob: -18.375
    6. '())' → logprob: -18.625
    7. '`)' → logprob: -19.25
    8. ')
' → logprob: -20.0
    9. '')' → logprob: -20.125
    10. '(' → logprob: -20.875

Token 342: 'if' (ID: 366)
  Prédit: 'if'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'if' → logprob: -6.153795766294934e-06
    2. ' if' → logprob: -12.250005722045898
    3. 'main' → logprob: -13.875005722045898
    4. '
' → logprob: -15.500005722045898
    5. '```' → logprob: -15.750005722045898
    6. '#' → logprob: -16.5000057220459
    7. '<|end|>' → logprob: -17.8750057220459
    8. 'If' → logprob: -19.0000057220459
    9. '\n' → logprob: -19.5000057220459
    10. '    
' → logprob: -20.0000057220459

Token 343: ' __' (ID: 2516)
  Prédit: ' __'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' __' → logprob: -0.502348005771637
    2. '__' → logprob: -1.3773479461669922
    3. ' ' → logprob: -2.127347946166992
    4. '_' → logprob: -4.127347946166992
    5. ' ' → logprob: -6.127347946166992
    6. ' ' → logprob: -6.752347946166992
    7. '﻿' → logprob: -7.377347946166992
    8. '​' → logprob: -7.752347946166992
    9. '<|end|>' → logprob: -7.877347946166992
    10. 'space' → logprob: -7.877347946166992

Token 344: 'name' (ID: 897)
  Prédit: ' =='
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' ==' → logprob: -0.5258041024208069
    2. '__' → logprob: -1.025804042816162
    3. '==' → logprob: -3.400804042816162
    4. ' __' → logprob: -4.275804042816162
    5. 'name' → logprob: -6.150804042816162
    6. '=="' → logprob: -7.900804042816162
    7. '=='' → logprob: -9.15080451965332
    8. '_' → logprob: -9.15080451965332
    9. '[' → logprob: -9.27580451965332
    10. ' =="' → logprob: -9.52580451965332

Token 345: '__' (ID: 771)
  Prédit: '__'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '__' → logprob: -3.9292415749514475e-05
    2. '__.__' → logprob: -10.250039100646973
    3. '==' → logprob: -13.125039100646973
    4. '__.' → logprob: -14.250039100646973
    5. '___' → logprob: -15.000039100646973
    6. '__('' → logprob: -15.375039100646973
    7. '=="' → logprob: -15.500039100646973
    8. '__["' → logprob: -15.750039100646973
    9. '____' → logprob: -16.00004005432129
    10. '__("' → logprob: -16.62504005432129

Token 346: ' ==' (ID: 951)
  Prédit: '__'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '__' → logprob: -0.013186234049499035
    2. '==' → logprob: -4.513186454772949
    3. ' ==' → logprob: -6.513186454772949
    4. '=="' → logprob: -7.388186454772949
    5. '=='' → logprob: -11.13818645477295
    6. '___' → logprob: -12.38818645477295
    7. '__.__' → logprob: -13.01318645477295
    8. '_' → logprob: -13.13818645477295
    9. '"' → logprob: -13.13818645477295
    10. '===' → logprob: -13.26318645477295

Token 347: ' "__' (ID: 27367)
  Prédit: '"'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '"' → logprob: -0.03819951415061951
    2. ''' → logprob: -3.2881994247436523
    3. ' "__' → logprob: -8.788199424743652
    4. '__' → logprob: -12.663199424743652
    5. ' '__' → logprob: -13.038199424743652
    6. '"_' → logprob: -17.16320037841797
    7. '"user' → logprob: -17.28820037841797
    8. '("__' → logprob: -17.28820037841797
    9. ''"' → logprob: -17.53820037841797
    10. '"name' → logprob: -17.78820037841797

Token 348: 'main' (ID: 7731)
  Prédit: 'main'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'main' → logprob: -3.128163257315464e-07
    2. '__' → logprob: -15.75
    3. 'name' → logprob: -16.375
    4. ' main' → logprob: -16.875
    5. '_main' → logprob: -18.5
    6. '"' → logprob: -20.75
    7. 'ma' → logprob: -20.875
    8. '	main' → logprob: -20.875
    9. 'built' → logprob: -22.0
    10. '-main' → logprob: -22.0

Token 349: '__":
' (ID: 49892)
  Prédit: '__":
'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '__":
' → logprob: -0.3133294880390167
    2. '__' → logprob: -1.3133294582366943
    3. '__':
' → logprob: -9.688329696655273
    4. '__["' → logprob: -12.563329696655273
    5. '__("' → logprob: -14.438329696655273
    6. '__:' → logprob: -14.938329696655273
    7. '__",' → logprob: -15.063329696655273
    8. '"' → logprob: -15.438329696655273
    9. '__.__' → logprob: -15.438329696655273
    10. '__
' → logprob: -15.688329696655273

Token 350: '   ' (ID: 271)
  Prédit: 'main'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'main' → logprob: -0.011849339120090008
    2. '__' → logprob: -4.511849403381348
    3. '"' → logprob: -7.636849403381348
    4. ' main' → logprob: -8.136849403381348
    5. ''' → logprob: -11.261849403381348
    6. '_main' → logprob: -12.261849403381348
    7. '	main' → logprob: -12.511849403381348
    8. '   ' → logprob: -12.886849403381348
    9. ' "__' → logprob: -13.761849403381348
    10. '___' → logprob: -14.886849403381348

Token 351: ' main' (ID: 2758)
  Prédit: 'main'
  Correct (stricte): False
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'main' (adapté à ' main') → logprob: -0.06199289485812187
    2. ' main' → logprob: -2.811992883682251
    3. '	main' → logprob: -10.936992645263672
    4. '   ' → logprob: -11.811992645263672
    5. '_main' → logprob: -16.436992645263672
    6. '(main' → logprob: -17.686992645263672
    7. ' ' → logprob: -18.436992645263672
    8. '.main' → logprob: -18.811992645263672
    9. ' ' → logprob: -20.061992645263672
    10. 'Main' → logprob: -20.436992645263672

Token 352: '()' (ID: 416)
  Prédit: ''
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False


RÉSUMÉ:
--------------------------------------------------------------------------------
Total des tokens analysés: 350
Tokens correctement prédits (1ère position, stricte): 99
Tokens correctement prédits (1ère position, avec adaptation): 108
Tokens correctement prédits (top 10): 227
Précision stricte (1ère position): 28.29%
Précision adaptée (1ère position): 30.86%
Précision (top 10): 64.86%
================================================================================
