================================================================================
ANALYSE DE PRÉDICTION TOKEN PAR TOKEN (BATCH API)
Date: 2025-06-04 19:31:32
Modèle de tokenisation: gpt-4o-mini
================================================================================

SCRIPT ANALYSÉ:
--------------------------------------------------------------------------------
a, b = input().split()
a = int(a)
b = int(b)
if 500 * a >= b:
    print("Yes")
else:
    print("No")
--------------------------------------------------------------------------------

RÉSULTATS D'ANALYSE TOKEN PAR TOKEN:
--------------------------------------------------------------------------------
Token 0: 'a' (ID: 64)
  → Token d'amorce (pas de prédiction)

Token 1: ',' (ID: 11)
  → Token d'amorce (pas de prédiction)

Token 2: ' b' (ID: 287)
  → Token d'amorce (pas de prédiction)

Token 3: ' =' (ID: 314)
  Prédit: '='
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '=' → logprob: -0.04346052557229996
    2. '+' → logprob: -3.2934606075286865
    3. ' =' → logprob: -5.668460369110107
    4. ',' → logprob: -6.543460369110107
    5. '+=' → logprob: -9.043460845947266
    6. '```' → logprob: -9.668460845947266
    7. ' ' → logprob: -10.043460845947266
    8. '.' → logprob: -10.168460845947266
    9. '_' → logprob: -10.293460845947266
    10. '*' → logprob: -10.293460845947266

Token 4: ' input' (ID: 3422)
  Prédit: ' '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' ' → logprob: -0.651124894618988
    2. '0' → logprob: -1.1511249542236328
    3. '1' → logprob: -1.9011249542236328
    4. '10' → logprob: -4.776124954223633
    5. '5' → logprob: -6.026124954223633
    6. '42' → logprob: -7.776124954223633
    7. '3' → logprob: -8.151124954223633
    8. '2' → logprob: -8.526124954223633
    9. ' b' → logprob: -8.526124954223633
    10. '[' → logprob: -8.776124954223633

Token 5: '().' (ID: 1454)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(' → logprob: -0.020072180777788162
    2. '.' → logprob: -4.520071983337402
    3. '()' → logprob: -4.895071983337402
    4. '(
' → logprob: -7.270071983337402
    5. '().' → logprob: -8.520071983337402
    6. '(.)' → logprob: -8.520071983337402
    7. '('.')' → logprob: -9.520071983337402
    8. ',' → logprob: -9.520071983337402
    9. ''' → logprob: -10.020071983337402
    10. '(

' → logprob: -10.270071983337402

Token 6: 'split' (ID: 13627)
  Prédit: '.split'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '.split' → logprob: -0.007576577831059694
    2. '().' → logprob: -5.7575764656066895
    3. 'split' → logprob: -6.1325764656066895
    4. '.strip' → logprob: -6.3825764656066895
    5. '.' → logprob: -8.257576942443848
    6. '()' → logprob: -8.632576942443848
    7. ',' → logprob: -10.007576942443848
    8. '[' → logprob: -11.132576942443848
    9. 'strip' → logprob: -12.257576942443848
    10. ' split' → logprob: -12.257576942443848

Token 7: '()
' (ID: 1234)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '(' → logprob: -0.2814731001853943
    2. '()' → logprob: -1.406473159790039
    3. '(
' → logprob: -9.281473159790039
    4. '('' → logprob: -9.531473159790039
    5. '(

' → logprob: -10.406473159790039
    6. '```' → logprob: -10.656473159790039
    7. '`()' → logprob: -10.781473159790039
    8. '(`' → logprob: -11.406473159790039
    9. '`' → logprob: -11.531473159790039
    10. '()`' → logprob: -11.781473159790039

Token 8: 'a' (ID: 64)
  Prédit: 'a'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'a' → logprob: -0.1482604593038559
    2. '=' → logprob: -2.2732603549957275
    3. '```' → logprob: -5.023260593414307
    4. ',' → logprob: -5.148260593414307
    5. '[' → logprob: -5.523260593414307
    6. '#' → logprob: -5.648260593414307
    7. '.' → logprob: -5.648260593414307
    8. '\n' → logprob: -6.148260593414307
    9. ' =' → logprob: -6.273260593414307
    10. '+' → logprob: -6.523260593414307

Token 9: ' =' (ID: 314)
  Prédit: '+'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '+' → logprob: -0.1851750612258911
    2. '[' → logprob: -2.0601749420166016
    3. '.' → logprob: -3.5601749420166016
    4. ' ' → logprob: -5.310174942016602
    5. '*' → logprob: -6.060174942016602
    6. '<|end|>' → logprob: -6.435174942016602
    7. '=' → logprob: -6.685174942016602
    8. ' +' → logprob: -7.310174942016602
    9. 'a' → logprob: -7.685174942016602
    10. '```' → logprob: -8.310174942016602

Token 10: ' int' (ID: 677)
  Prédit: 'int'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'int' → logprob: -0.036329396069049835
    2. 'a' → logprob: -3.536329507827759
    3. ' int' → logprob: -5.41132926940918
    4. 'float' → logprob: -6.91132926940918
    5. 'input' → logprob: -7.41132926940918
    6. ' a' → logprob: -8.66132926940918
    7. '0' → logprob: -8.78632926940918
    8. 'b' → logprob: -9.53632926940918
    9. '[int' → logprob: -10.66132926940918
    10. ' float' → logprob: -11.66132926940918

Token 11: '(a' (ID: 6271)
  Prédit: '(a'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(a' → logprob: -0.2813708186149597
    2. '(' → logprob: -1.4063708782196045
    3. '('' → logprob: -9.406371116638184
    4. 'a' → logprob: -9.656371116638184
    5. '("("' → logprob: -10.781371116638184
    6. '()' → logprob: -11.531371116638184
    7. '```' → logprob: -11.531371116638184
    8. '((' → logprob: -11.906371116638184
    9. '`' → logprob: -12.406371116638184
    10. '(`' → logprob: -12.406371116638184

Token 12: ')
' (ID: 446)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')' → logprob: -0.00036037206882610917
    2. '+' → logprob: -8.000360488891602
    3. ' )' → logprob: -11.500360488891602
    4. ')
' → logprob: -12.500360488891602
    5. '+)' → logprob: -12.500360488891602
    6. '`)' → logprob: -13.750360488891602
    7. ')a' → logprob: -13.750360488891602
    8. 'a' → logprob: -14.125360488891602
    9. '')' → logprob: -14.125360488891602
    10. ' +' → logprob: -14.375360488891602

Token 13: 'b' (ID: 65)
  Prédit: 'b'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'b' → logprob: -0.05544431135058403
    2. ' b' → logprob: -3.9304442405700684
    3. ' ' → logprob: -4.305444240570068
    4. ' 
' → logprob: -4.930444240570068
    5. '+' → logprob: -5.180444240570068
    6. '  
' → logprob: -6.055444240570068
    7. '<|end|>' → logprob: -6.055444240570068
    8. '```' → logprob: -6.805444240570068
    9. '`' → logprob: -7.680444240570068
    10. ',' → logprob: -8.180444717407227

Token 14: ' =' (ID: 314)
  Prédit: '+'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '+' → logprob: -0.8000409603118896
    2. ' =' → logprob: -1.8000409603118896
    3. '=' → logprob: -1.9250409603118896
    4. ' ' → logprob: -2.3000409603118896
    5. ' +' → logprob: -2.6750409603118896
    6. '<|end|>' → logprob: -3.5500409603118896
    7. ')' → logprob: -4.050041198730469
    8. '*' → logprob: -4.675041198730469
    9. ' +=' → logprob: -5.425041198730469
    10. '_' → logprob: -6.175041198730469

Token 15: ' int' (ID: 677)
  Prédit: 'int'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'int' → logprob: -0.018150877207517624
    2. ' int' → logprob: -4.018150806427002
    3. '(int' → logprob: -15.01815128326416
    4. '=int' → logprob: -15.76815128326416
    5. ' ' → logprob: -16.143150329589844
    6. '<int' → logprob: -16.143150329589844
    7. 'a' → logprob: -16.518150329589844
    8. '[int' → logprob: -16.518150329589844
    9. '0' → logprob: -16.768150329589844
    10. 'b' → logprob: -16.768150329589844

Token 16: '(b' (ID: 3229)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(' → logprob: -0.1459607630968094
    2. '(b' → logprob: -2.020960807800293
    3. '(a' → logprob: -5.770960807800293
    4. ' (' → logprob: -10.145960807800293
    5. '```' → logprob: -10.395960807800293
    6. ' ' → logprob: -11.145960807800293
    7. ')' → logprob: -11.270960807800293
    8. 'b' → logprob: -11.395960807800293
    9. '()' → logprob: -11.770960807800293
    10. '("("' → logprob: -12.145960807800293

Token 17: ')
' (ID: 446)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')' → logprob: -1.3856492842023727e-06
    2. '')' → logprob: -15.000000953674316
    3. ')
' → logprob: -15.000000953674316
    4. ' )' → logprob: -15.625000953674316
    5. '`)' → logprob: -15.750000953674316
    6. '```' → logprob: -16.250001907348633
    7. '))' → logprob: -16.750001907348633
    8. '+' → logprob: -17.000001907348633
    9. '*' → logprob: -17.500001907348633
    10. '[' → logprob: -17.625001907348633

Token 18: 'if' (ID: 366)
  Prédit: '+'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '+' → logprob: -0.1421968936920166
    2. 'if' → logprob: -2.7671968936920166
    3. 'c' → logprob: -3.2671968936920166
    4. 'print' → logprob: -4.8921966552734375
    5. 'i' → logprob: -5.1421966552734375
    6. '+
' → logprob: -5.3921966552734375
    7. '#' → logprob: -6.0171966552734375
    8. 's' → logprob: -6.0171966552734375
    9. '*' → logprob: -6.5171966552734375
    10. 'a' → logprob: -7.1421966552734375

Token 19: ' ' (ID: 220)
  Prédit: ' a'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' a' → logprob: -0.014212394133210182
    2. 'a' → logprob: -4.264212608337402
    3. ' ' → logprob: -10.139212608337402
    4. ' ' → logprob: -12.639212608337402
    5. ' b' → logprob: -12.764212608337402
    6. '_a' → logprob: -13.639212608337402
    7. '	a' → logprob: -14.139212608337402
    8. 'b' → logprob: -14.764212608337402
    9. ' (' → logprob: -14.889212608337402
    10. '  ' → logprob: -15.514212608337402

Token 20: '500' (ID: 3234)
  Prédit: 'a'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'a' → logprob: -0.02975071594119072
    2. ' a' → logprob: -3.5297508239746094
    3. ' ' → logprob: -16.15475082397461
    4. '	a' → logprob: -16.77975082397461
    5. 'b' → logprob: -17.02975082397461
    6. '_a' → logprob: -17.15475082397461
    7. '(a' → logprob: -17.27975082397461
    8. ' b' → logprob: -18.77975082397461
    9. '(' → logprob: -19.40475082397461
    10. ' ' → logprob: -19.52975082397461

Token 21: ' *' (ID: 425)
  Prédit: ' >'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' >' → logprob: -1.2448718547821045
    2. ' <=' → logprob: -1.3698718547821045
    3. ' <' → logprob: -1.4948718547821045
    4. ' >=' → logprob: -1.9948718547821045
    5. '>' → logprob: -3.1198718547821045
    6. '<' → logprob: -4.119872093200684
    7. '>=' → logprob: -4.494872093200684
    8. '<=' → logprob: -4.619872093200684
    9. '0' → logprob: -4.994872093200684
    10. ' ' → logprob: -5.619872093200684

Token 22: ' a' (ID: 261)
  Prédit: 'a'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'a' → logprob: -0.10225827246904373
    2. ' a' → logprob: -2.3522582054138184
    3. 'b' → logprob: -6.852258205413818
    4. ' b' → logprob: -8.227258682250977
    5. '>' → logprob: -8.477258682250977
    6. '<' → logprob: -9.102258682250977
    7. '<=' → logprob: -9.477258682250977
    8. '>=' → logprob: -9.727258682250977
    9. ' ' → logprob: -9.852258682250977
    10. ' <=' → logprob: -9.852258682250977

Token 23: ' >=' (ID: 5064)
  Prédit: ' >'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' >' → logprob: -0.49045905470848083
    2. ' <' → logprob: -2.1154589653015137
    3. ' <=' → logprob: -2.2404589653015137
    4. '>' → logprob: -2.7404589653015137
    5. ' >=' → logprob: -2.8654589653015137
    6. '<' → logprob: -3.6154589653015137
    7. '>=' → logprob: -4.990458965301514
    8. '<=' → logprob: -5.365458965301514
    9. ' ' → logprob: -7.490458965301514
    10. ' ==' → logprob: -8.990459442138672

Token 24: ' b' (ID: 287)
  Prédit: '100'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '100' → logprob: -1.4220035076141357
    2. '300' → logprob: -1.4220035076141357
    3. '500' → logprob: -1.9220035076141357
    4. '200' → logprob: -2.0470035076141357
    5. 'b' → logprob: -2.5470035076141357
    6. '250' → logprob: -2.6720035076141357
    7. '700' → logprob: -3.6720035076141357
    8. ' ' → logprob: -4.047003746032715
    9. '150' → logprob: -4.172003746032715
    10. '400' → logprob: -4.672003746032715

Token 25: ':
' (ID: 734)
  Prédit: ':'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ':' → logprob: -0.007611601613461971
    2. ' :' → logprob: -4.8826117515563965
    3. ' and' → logprob: -12.757611274719238
    4. ':
' → logprob: -14.007611274719238
    5. ':**' → logprob: -14.132611274719238
    6. '.' → logprob: -15.507611274719238
    7. '):' → logprob: -15.507611274719238
    8. 'and' → logprob: -16.007612228393555
    9. ':return' → logprob: -16.007612228393555
    10. '>:' → logprob: -16.257612228393555

Token 26: '   ' (ID: 271)
  Prédit: 'print'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'print' → logprob: -0.8944573998451233
    2. '\n' → logprob: -1.0194573402404785
    3. ' print' → logprob: -1.5194573402404785
    4. ''\' → logprob: -6.0194573402404785
    5. '\' → logprob: -6.2694573402404785
    6. '    ' → logprob: -6.3944573402404785
    7. '   ' → logprob: -6.3944573402404785
    8. ' \' → logprob: -6.7694573402404785
    9. ''' → logprob: -7.1444573402404785
    10. '"\' → logprob: -7.3944573402404785

Token 27: ' print' (ID: 2123)
  Prédit: 'print'
  Correct (stricte): False
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'print' (adapté à ' print') → logprob: -0.38747209310531616
    2. ' print' → logprob: -1.137472152709961
    3. '   ' → logprob: -7.762472152709961
    4. ' ' → logprob: -9.637472152709961
    5. '    ' → logprob: -10.137472152709961
    6. '"' → logprob: -11.012472152709961
    7. 'pr' → logprob: -11.262472152709961
    8. ''' → logprob: -12.262472152709961
    9. ' pass' → logprob: -12.324972152709961
    10. '	print' → logprob: -12.887472152709961

Token 28: '("' (ID: 568)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(' → logprob: -0.3898862898349762
    2. '("' → logprob: -1.1398862600326538
    3. '('' → logprob: -6.014886379241943
    4. '"' → logprob: -8.389885902404785
    5. '(a' → logprob: -9.014885902404785
    6. '("("' → logprob: -9.139885902404785
    7. '()' → logprob: -10.514885902404785
    8. '("")' → logprob: -10.764885902404785
    9. '(":' → logprob: -11.389885902404785
    10. '((' → logprob: -11.639885902404785

Token 29: 'Yes' (ID: 13022)
  Prédit: 'Yes'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'Yes' → logprob: -1.4720566272735596
    2. 'Hello' → logprob: -2.2220566272735596
    3. '8' → logprob: -3.2220566272735596
    4. '200' → logprob: -3.3470566272735596
    5. 'Win' → logprob: -3.3470566272735596
    6. 'Not' → logprob: -3.5970566272735596
    7. 'Lucky' → logprob: -3.5970566272735596
    8. 'No' → logprob: -3.7220566272735596
    9. '*' → logprob: -3.8470566272735596
    10. 'P' → logprob: -3.9095566272735596

Token 30: '")
' (ID: 1896)
  Prédit: '")'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '")' → logprob: -0.0003160393098369241
    2. ')' → logprob: -8.12531566619873
    3. ')")' → logprob: -11.00031566619873
    4. '")
' → logprob: -13.25031566619873
    5. '!")' → logprob: -14.12531566619873
    6. '"' → logprob: -14.25031566619873
    7. '\")' → logprob: -17.000316619873047
    8. '")

' → logprob: -17.625316619873047
    9. '”)' → logprob: -17.625316619873047
    10. '')' → logprob: -18.000316619873047

Token 31: 'else' (ID: 2807)
  Prédit: 'else'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'else' → logprob: -0.0017037445213645697
    2. ' else' → logprob: -6.37670373916626
    3. 'elif' → logprob: -13.751704216003418
    4. '```' → logprob: -16.1267032623291
    5. '<|end|>' → logprob: -16.3767032623291
    6. 'e' → logprob: -16.7517032623291
    7. '   ' → logprob: -16.8767032623291
    8. '_else' → logprob: -16.8767032623291
    9. '	else' → logprob: -17.0017032623291
    10. ')' → logprob: -17.2517032623291

Token 32: ':
' (ID: 734)
  Prédit: ':'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ':' → logprob: -6.146429223008454e-05
    2. ':
' → logprob: -9.75006103515625
    3. ' :' → logprob: -13.12506103515625
    4. '   ' → logprob: -13.75006103515625
    5. '):' → logprob: -17.50006103515625
    6. ':

' → logprob: -17.62506103515625
    7. ':
' → logprob: -17.87506103515625
    8. ':return' → logprob: -18.62506103515625
    9. ':def' → logprob: -18.62506103515625
    10. '```' → logprob: -18.87506103515625

Token 33: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.026988275349140167
    2. 'print' → logprob: -4.526988506317139
    3. '\n' → logprob: -5.026988506317139
    4. '    ' → logprob: -5.026988506317139
    5. ' print' → logprob: -6.276988506317139
    6. '    
' → logprob: -8.40198802947998
    7. '
' → logprob: -8.77698802947998
    8. '\' → logprob: -9.27698802947998
    9. '```' → logprob: -9.27698802947998
    10. ' 
' → logprob: -10.02698802947998

Token 34: ' print' (ID: 2123)
  Prédit: ' print'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' print' → logprob: -0.31355997920036316
    2. 'print' (adapté à ' print') → logprob: -1.3135600090026855
    3. '   ' → logprob: -8.688559532165527
    4. '\n' → logprob: -9.313559532165527
    5. '    ' → logprob: -11.063559532165527
    6. ' \' → logprob: -11.938559532165527
    7. ' ' → logprob: -12.313559532165527
    8. ' 
' → logprob: -12.813559532165527
    9. '.print' → logprob: -12.938559532165527
    10. '	print' → logprob: -13.063559532165527

Token 35: '("' (ID: 568)
  Prédit: '("'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '("' → logprob: -0.12693998217582703
    2. '(' → logprob: -2.1269400119781494
    3. '()' → logprob: -12.50193977355957
    4. '("("' → logprob: -12.75193977355957
    5. '("")' → logprob: -12.87693977355957
    6. '('' → logprob: -13.25193977355957
    7. '(""' → logprob: -15.25193977355957
    8. '("""' → logprob: -15.75193977355957
    9. '(
' → logprob: -16.50193977355957
    10. '"' → logprob: -16.50193977355957

Token 36: 'No' (ID: 3160)
  Prédit: 'No'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'No' → logprob: -0.029757659882307053
    2. '"No' → logprob: -3.5297577381134033
    3. '"' → logprob: -12.154757499694824
    4. ' No' → logprob: -13.529757499694824
    5. '")' → logprob: -15.904757499694824
    6. '(No' → logprob: -16.02975845336914
    7. '“No' → logprob: -16.15475845336914
    8. 'N' → logprob: -16.52975845336914
    9. '"N' → logprob: -16.65475845336914
    10. 'Yes' → logprob: -17.27975845336914

Token 37: '")' (ID: 1405)
  Prédit: '")'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '")' → logprob: -4.179569077678025e-05
    2. ')' → logprob: -10.250041961669922
    3. ')")' → logprob: -12.000041961669922
    4. '}")' → logprob: -16.500041961669922
    5. '")
' → logprob: -16.750041961669922
    6. '"' → logprob: -17.750041961669922
    7. '\")' → logprob: -18.500041961669922
    8. '')' → logprob: -18.750041961669922
    9. '”)' → logprob: -19.125041961669922
    10. ' ")' → logprob: -19.625041961669922


RÉSUMÉ:
--------------------------------------------------------------------------------
Total des tokens analysés: 35
Tokens correctement prédits (1ère position, stricte): 10
Tokens correctement prédits (1ère position, avec adaptation): 11
Tokens correctement prédits (top 10): 29
Précision stricte (1ère position): 28.57%
Précision adaptée (1ère position): 31.43%
Précision (top 10): 82.86%
================================================================================
