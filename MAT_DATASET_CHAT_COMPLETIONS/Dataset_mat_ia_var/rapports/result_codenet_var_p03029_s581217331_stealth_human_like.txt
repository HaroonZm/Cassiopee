================================================================================
ANALYSE DE PRÉDICTION TOKEN PAR TOKEN (BATCH API)
Date: 2025-06-04 19:59:21
Modèle de tokenisation: gpt-4o-mini
================================================================================

SCRIPT ANALYSÉ:
--------------------------------------------------------------------------------
import sys

# hmm, on va lire les trucs comme ça, ça passe
ligne = sys.stdin.readline()
A, P = map(int, ligne.strip().split())

# je pense que c'est ça la formule ?
total = (A*3 + P)//2

print(total)  # on affiche, normalement c'est bon
--------------------------------------------------------------------------------

RÉSULTATS D'ANALYSE TOKEN PAR TOKEN:
--------------------------------------------------------------------------------
Token 0: 'import' (ID: 561)
  → Token d'amorce (pas de prédiction)

Token 1: ' sys' (ID: 12228)
  → Token d'amorce (pas de prédiction)

Token 2: '

' (ID: 279)
  → Token d'amorce (pas de prédiction)

Token 3: '#' (ID: 2)
  Prédit: '.'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '.' → logprob: -0.0531209371984005
    2. '\n' → logprob: -3.6781208515167236
    3. 'import' → logprob: -4.303121089935303
    4. '\' → logprob: -4.803121089935303
    5. '[' → logprob: -6.928121089935303
    6. '' → logprob: -7.303121089935303
    7. '```' → logprob: -7.553121089935303
    8. 'newline' → logprob: -7.553121089935303
    9. '#' → logprob: -7.928121089935303
    10. '<|end|>' → logprob: -8.053120613098145

Token 4: ' hmm' (ID: 186402)
  Prédit: ' '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' ' → logprob: -0.013906668871641159
    2. ' def' → logprob: -5.888906478881836
    3. ' This' → logprob: -6.388906478881836
    4. ' #' → logprob: -6.763906478881836
    5. 'def' → logprob: -6.888906478881836
    6. ' -*-' → logprob: -7.138906478881836
    7. ' The' → logprob: -7.263906478881836
    8. ' import' → logprob: -7.388906478881836
    9. ' ```' → logprob: -7.388906478881836
    10. ' argparse' → logprob: -7.638906478881836

Token 5: ',' (ID: 11)
  Prédit: '.'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '.' → logprob: -0.0033707963302731514
    2. '=' → logprob: -6.503370761871338
    3. ',' → logprob: -8.003371238708496
    4. '#' → logprob: -8.003371238708496
    5. ':' → logprob: -8.503371238708496
    6. '_' → logprob: -8.503371238708496
    7. '.
' → logprob: -8.878371238708496
    8. '\' → logprob: -9.003371238708496
    9. 'import' → logprob: -9.128371238708496
    10. '[' → logprob: -9.128371238708496

Token 6: ' on' (ID: 402)
  Prédit: ' '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' ' → logprob: -0.0010996110504493117
    2. ' I' → logprob: -8.626099586486816
    3. '  ' → logprob: -8.751099586486816
    4. ' i' → logprob: -9.001099586486816
    5. ' import' → logprob: -9.126099586486816
    6. 'import' → logprob: -9.126099586486816
    7. ' ,' → logprob: -9.876099586486816
    8. ',' → logprob: -9.876099586486816
    9. ' I'm' → logprob: -10.001099586486816
    10. ' this' → logprob: -10.376099586486816

Token 7: ' va' (ID: 3423)
  Prédit: 'e'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'e' → logprob: -0.14924176037311554
    2. '.' → logprob: -3.0242416858673096
    3. '_' → logprob: -3.2742416858673096
    4. 'ly' → logprob: -4.024241924285889
    5. 'import' → logprob: -4.399241924285889
    6. ' e' → logprob: -5.774241924285889
    7. ' ' → logprob: -6.274241924285889
    8. 'eline' → logprob: -6.274241924285889
    9. '-' → logprob: -6.399241924285889
    10. ' .' → logprob: -6.774241924285889

Token 8: ' lire' (ID: 46082)
  Prédit: ' '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' ' → logprob: -1.1730729341506958
    2. ' continuer' → logprob: -1.6730729341506958
    3. '```' → logprob: -2.1730728149414062
    4. ' essayer' → logprob: -2.2980728149414062
    5. ' faire' → logprob: -3.0480728149414062
    6. '_' → logprob: -3.4230728149414062
    7. ' space' → logprob: -3.7980728149414062
    8. ' test' → logprob: -3.9230728149414062
    9. 's' → logprob: -3.9230728149414062
    10. 'contin' → logprob: -4.423072814941406

Token 9: ' les' (ID: 1341)
  Prédit: ' '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' ' → logprob: -0.09958648681640625
    2. '_' → logprob: -2.4745864868164062
    3. 'le' → logprob: -6.099586486816406
    4. 'l' → logprob: -6.349586486816406
    5. ':' → logprob: -6.474586486816406
    6. ',' → logprob: -7.224586486816406
    7. '.' → logprob: -7.349586486816406
    8. ' le' → logprob: -7.849586486816406
    9. 'import' → logprob: -7.974586486816406
    10. ' la' → logprob: -8.099586486816406

Token 10: ' trucs' (ID: 151878)
  Prédit: 'f'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'f' → logprob: -0.26216936111450195
    2. ' fichiers' → logprob: -3.137169361114502
    3. 'l' → logprob: -3.387169361114502
    4. 'd' → logprob: -3.387169361114502
    5. ' arguments' → logprob: -3.887169361114502
    6. ' données' → logprob: -4.387169361114502
    7. ' f' → logprob: -4.762169361114502
    8. 'arguments' → logprob: -4.762169361114502
    9. ' input' → logprob: -4.887169361114502
    10. 'data' → logprob: -4.887169361114502

Token 11: ' comme' (ID: 7971)
  Prédit: '#'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '#' → logprob: -1.4844021797180176
    2. '\' → logprob: -1.4844021797180176
    3. 'f' → logprob: -1.6094021797180176
    4. '_' → logprob: -2.3594021797180176
    5. 'import' → logprob: -2.3594021797180176
    6. '\n' → logprob: -3.1094021797180176
    7. ',' → logprob: -3.2344021797180176
    8. '.' → logprob: -3.7344021797180176
    9. '=' → logprob: -4.609402179718018
    10. '```' → logprob: -5.609402179718018

Token 12: ' ça' (ID: 13590)
  Prédit: 'ça'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'ça' → logprob: -0.972797155380249
    2. 'stdin' → logprob: -1.347797155380249
    3. ' ça' → logprob: -1.972797155380249
    4. ' stdin' → logprob: -2.597797155380249
    5. 'une' → logprob: -3.597797155380249
    6. 'sys' → logprob: -3.722797155380249
    7. '```' → logprob: -3.972797155380249
    8. 'd' → logprob: -4.722797393798828
    9. 'input' → logprob: -4.972797393798828
    10. ' sys' → logprob: -4.972797393798828

Token 13: ',' (ID: 11)
  Prédit: '\'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '\' → logprob: -0.3915046751499176
    2. ' ' → logprob: -2.5165047645568848
    3. '.' → logprob: -2.8915047645568848
    4. '\n' → logprob: -3.0165047645568848
    5. ',' → logprob: -3.1415047645568848
    6. 'import' → logprob: -3.5165047645568848
    7. '#' → logprob: -4.016504764556885
    8. '_' → logprob: -4.641504764556885
    9. ':' → logprob: -5.141504764556885
    10. '```' → logprob: -5.516504764556885

Token 14: ' ça' (ID: 13590)
  Prédit: ' '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' ' → logprob: -0.1399964988231659
    2. ',' → logprob: -3.7649965286254883
    3. '\' → logprob: -3.8899965286254883
    4. ':' → logprob: -3.8899965286254883
    5. 'import' → logprob: -4.764996528625488
    6. ' :' → logprob: -5.264996528625488
    7. '\n' → logprob: -5.389996528625488
    8. ' ,' → logprob: -5.639996528625488
    9. ' sys' → logprob: -5.639996528625488
    10. '.' → logprob: -5.764996528625488

Token 15: ' passe' (ID: 22210)
  Prédit: ' va'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' va' → logprob: -1.5048284530639648
    2. ' ' → logprob: -1.6298284530639648
    3. '.' → logprob: -2.379828453063965
    4. ' n' → logprob: -3.004828453063965
    5. ' a' → logprob: -3.254828453063965
    6. ' =' → logprob: -3.379828453063965
    7. 'n' → logprob: -3.379828453063965
    8. ':' → logprob: -3.379828453063965
    9. ' semble' → logprob: -3.379828453063965
    10. 'semble' → logprob: -3.879828453063965

Token 16: '
' (ID: 198)
  Prédit: '\'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '\' → logprob: -0.48911622166633606
    2. '.' → logprob: -2.3641161918640137
    3. '_' → logprob: -2.9891161918640137
    4. '\n' → logprob: -2.9891161918640137
    5. ':' → logprob: -3.1141161918640137
    6. ' ' → logprob: -3.2391161918640137
    7. ',' → logprob: -3.4891161918640137
    8. '#' → logprob: -3.8641161918640137
    9. 'import' → logprob: -4.364116191864014
    10. '?' → logprob: -4.364116191864014

Token 17: 'ligne' (ID: 94660)
  Prédit: '\'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '\' → logprob: -1.576823353767395
    2. '.' → logprob: -1.826823353767395
    3. 'import' → logprob: -1.826823353767395
    4. ':' → logprob: -2.2018232345581055
    5. ',' → logprob: -2.5768232345581055
    6. '_' → logprob: -2.8268232345581055
    7. '\n' → logprob: -2.8268232345581055
    8. '#' → logprob: -3.3268232345581055
    9. ' ' → logprob: -3.7018232345581055
    10. '?' → logprob: -3.9518232345581055

Token 18: ' =' (ID: 314)
  Prédit: ' ='
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' =' → logprob: -0.6244293451309204
    2. 's' → logprob: -0.8744293451309204
    3. '[' → logprob: -3.874429225921631
    4. '_' → logprob: -4.249429225921631
    5. '=' → logprob: -5.374429225921631
    6. ' ' → logprob: -5.749429225921631
    7. '.' → logprob: -6.249429225921631
    8. '[:]' → logprob: -7.249429225921631
    9. '_s' → logprob: -7.499429225921631
    10. ',' → logprob: -7.874429225921631

Token 19: ' sys' (ID: 12228)
  Prédit: ' sys'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' sys' → logprob: -0.5734196305274963
    2. ' input' → logprob: -1.0734195709228516
    3. 'input' → logprob: -2.5734195709228516
    4. 'sys' → logprob: -4.073419570922852
    5. ' ' → logprob: -7.198419570922852
    6. ' f' → logprob: -9.073419570922852
    7. ' "' → logprob: -10.073419570922852
    8. ' []' → logprob: -10.135919570922852
    9. '=sys' → logprob: -10.135919570922852
    10. 's' → logprob: -10.323419570922852

Token 20: '.stdin' (ID: 93480)
  Prédit: '.'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '.' → logprob: -0.47978678345680237
    2. '.stdin' → logprob: -0.97978675365448
    3. '.readline' → logprob: -6.1047868728637695
    4. '.argv' → logprob: -6.2297868728637695
    5. '.stdout' → logprob: -7.1047868728637695
    6. ' .' → logprob: -8.10478687286377
    7. '.input' → logprob: -8.47978687286377
    8. '.std' → logprob: -9.60478687286377
    9. '.import' → logprob: -10.10478687286377
    10. '.path' → logprob: -11.47978687286377

Token 21: '.readline' (ID: 74673)
  Prédit: '.readline'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '.readline' → logprob: -0.062136296182870865
    2. '.' → logprob: -2.81213641166687
    3. '.read' → logprob: -9.18713665008545
    4. '.readlines' → logprob: -9.68713665008545
    5. ' .' → logprob: -13.43713665008545
    6. ' readline' → logprob: -13.43713665008545
    7. 'read' → logprob: -15.31213665008545
    8. '.Read' → logprob: -15.43713665008545
    9. '```' → logprob: -15.43713665008545
    10. '.write' → logprob: -15.81213665008545

Token 22: '()
' (ID: 1234)
  Prédit: '()'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '()' → logprob: -0.007117421831935644
    2. '(' → logprob: -5.00711727142334
    3. '()
' → logprob: -8.00711727142334
    4. ' ()' → logprob: -10.75711727142334
    5. '().' → logprob: -11.38211727142334
    6. '(
' → logprob: -11.38211727142334
    7. '()

' → logprob: -11.88211727142334
    8. ')' → logprob: -12.88211727142334
    9. '())' → logprob: -12.88211727142334
    10. '()`' → logprob: -12.88211727142334

Token 23: 'A' (ID: 32)
  Prédit: '.strip'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '.strip' → logprob: -0.1508878618478775
    2. 'while' → logprob: -2.775887966156006
    3. '.rstrip' → logprob: -3.025887966156006
    4. '.' → logprob: -4.650887966156006
    5. '.split' → logprob: -5.400887966156006
    6. ' while' → logprob: -5.525887966156006
    7. 'if' → logprob: -5.525887966156006
    8. ' if' → logprob: -6.400887966156006
    9. '[:-' → logprob: -6.525887966156006
    10. '().' → logprob: -7.275887966156006

Token 24: ',' (ID: 11)
  Prédit: ' ='
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' =' → logprob: -0.6903860569000244
    2. 'rray' → logprob: -2.0653860569000244
    3. 'rg' → logprob: -2.3153860569000244
    4. '=' → logprob: -2.8153860569000244
    5. '[' → logprob: -3.0653860569000244
    6. '.' → logprob: -3.0653860569000244
    7. '.append' → logprob: -3.3153860569000244
    8. 'r' → logprob: -4.565385818481445
    9. '.rstrip' → logprob: -5.065385818481445
    10. 'pp' → logprob: -5.440385818481445

Token 25: ' P' (ID: 398)
  Prédit: ' B'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' B' → logprob: -0.6833651065826416
    2. ' ' → logprob: -1.0583651065826416
    3. 'B' → logprob: -2.0583651065826416
    4. ' ligne' → logprob: -4.5583648681640625
    5. 'ligne' → logprob: -5.4333648681640625
    6. '  ' → logprob: -6.5583648681640625
    7. 'l' → logprob: -7.0583648681640625
    8. ' line' → logprob: -7.6833648681640625
    9. ')' → logprob: -7.6833648681640625
    10. ' =' → logprob: -7.9333648681640625

Token 26: ' =' (ID: 314)
  Prédit: ' ='
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' =' → logprob: -0.47440284490585327
    2. '=' → logprob: -0.9744028449058533
    3. ' ' → logprob: -9.34940242767334
    4. ')' → logprob: -9.84940242767334
    5. ',' → logprob: -10.22440242767334
    6. 'A' → logprob: -10.59940242767334
    7. 's' → logprob: -11.22440242767334
    8. '1' → logprob: -11.34940242767334
    9. 'u' → logprob: -11.34940242767334
    10. '=int' → logprob: -11.72440242767334

Token 27: ' map' (ID: 4014)
  Prédit: ' map'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' map' → logprob: -0.07979847490787506
    2. 'map' → logprob: -2.579798460006714
    3. 'ligne' → logprob: -7.954798698425293
    4. ' ligne' → logprob: -8.329798698425293
    5. ' [' → logprob: -8.579798698425293
    6. '[' → logprob: -9.454798698425293
    7. ' ' → logprob: -10.454798698425293
    8. ' line' → logprob: -12.204798698425293
    9. ' tuple' → logprob: -12.704798698425293
    10. 'line' → logprob: -13.079798698425293

Token 28: '(int' (ID: 2742)
  Prédit: '(int'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(int' → logprob: -0.019009536132216454
    2. '(' → logprob: -4.019009590148926
    3. '(str' → logprob: -7.644009590148926
    4. '(lambda' → logprob: -7.894009590148926
    5. '(eval' → logprob: -13.519009590148926
    6. '(list' → logprob: -13.519009590148926
    7. '(float' → logprob: -14.144009590148926
    8. '<int' → logprob: -14.144009590148926
    9. '[int' → logprob: -14.644009590148926
    10. '(tuple' → logprob: -14.769009590148926

Token 29: ',' (ID: 11)
  Prédit: '(l'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(l' → logprob: -0.06402362138032913
    2. ',' → logprob: -3.439023733139038
    3. '(' → logprob: -3.564023733139038
    4. ',l' → logprob: -6.689023494720459
    5. ')' → logprob: -9.189023971557617
    6. '(line' → logprob: -9.689023971557617
    7. ' ,' → logprob: -9.814023971557617
    8. '(s' → logprob: -10.564023971557617
    9. '(),' → logprob: -10.814023971557617
    10. 'ligne' → logprob: -11.314023971557617

Token 30: ' ligne' (ID: 19583)
  Prédit: 'ligne'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'ligne' → logprob: -0.25209808349609375
    2. ' ligne' → logprob: -1.5020980834960938
    3. ')' → logprob: -9.877098083496094
    4. ' lign' → logprob: -9.877098083496094
    5. ' Ligne' → logprob: -10.877098083496094
    6. ' ' → logprob: -11.377098083496094
    7. 'l' → logprob: -11.377098083496094
    8. 'line' → logprob: -11.877098083496094
    9. ' line' → logprob: -12.752098083496094
    10. ' lignes' → logprob: -12.877098083496094

Token 31: '.strip' (ID: 40613)
  Prédit: '().'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '().' → logprob: -0.008547906763851643
    2. '.split' → logprob: -5.633547782897949
    3. '.strip' → logprob: -6.133547782897949
    4. '.' → logprob: -6.383547782897949
    5. ')' → logprob: -7.508547782897949
    6. '()' → logprob: -7.883547782897949
    7. '.readline' → logprob: -9.75854778289795
    8. '.rstrip' → logprob: -10.25854778289795
    9. '())' → logprob: -10.38354778289795
    10. ' .' → logprob: -10.88354778289795

Token 32: '().' (ID: 1454)
  Prédit: '().'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '().' → logprob: -2.248469718324486e-05
    2. '()' → logprob: -10.750022888183594
    3. '('' → logprob: -14.500022888183594
    4. ' ().' → logprob: -15.250022888183594
    5. '()
' → logprob: -16.250022888183594
    6. '(' → logprob: -16.500022888183594
    7. '('').' → logprob: -18.750022888183594
    8. '().'' → logprob: -19.000022888183594
    9. '()

' → logprob: -19.125022888183594
    10. '()?.' → logprob: -20.125022888183594

Token 33: 'split' (ID: 13627)
  Prédit: 'split'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'split' → logprob: -3.650518920039758e-06
    2. '(split' → logprob: -13.000003814697266
    3. ' split' → logprob: -14.125003814697266
    4. 'spl' → logprob: -15.000003814697266
    5. ')' → logprob: -16.000003814697266
    6. '.split' → logprob: -16.375003814697266
    7. 'rstrip' → logprob: -16.375003814697266
    8. 'strip' → logprob: -17.000003814697266
    9. '```' → logprob: -18.125003814697266
    10. ' ' → logprob: -18.125003814697266

Token 34: '())

' (ID: 27654)
  Prédit: '())'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '())' → logprob: -0.26404109597206116
    2. '('' → logprob: -1.5140410661697388
    3. '()' → logprob: -4.514040946960449
    4. '(' → logprob: -8.01404094696045
    5. '()))' → logprob: -8.26404094696045
    6. '("' → logprob: -8.38904094696045
    7. '(','' → logprob: -8.38904094696045
    8. ')' → logprob: -11.51404094696045
    9. '("("' → logprob: -12.01404094696045
    10. '())
' → logprob: -12.01404094696045

Token 35: '#' (ID: 2)
  Prédit: ' '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' ' → logprob: -0.06469406932592392
    2. ' 
' → logprob: -4.314693927764893
    3. ')' → logprob: -4.689693927764893
    4. ',' → logprob: -5.189693927764893
    5. 'a' → logprob: -5.189693927764893
    6. 's' → logprob: -5.439693927764893
    7. 'A' → logprob: -5.439693927764893
    8. '<|end|>' → logprob: -5.564693927764893
    9. '#' → logprob: -5.939693927764893
    10. '\n' → logprob: -6.064693927764893

Token 36: ' je' (ID: 1264)
  Prédit: ' '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' ' → logprob: -0.030821343883872032
    2. 's' → logprob: -4.655821323394775
    3. ' total' → logprob: -5.405821323394775
    4. 'total' → logprob: -5.405821323394775
    5. 'r' → logprob: -6.280821323394775
    6. ' #' → logprob: -6.530821323394775
    7. 'result' → logprob: -7.405821323394775
    8. '#' → logprob: -7.530821323394775
    9. ' if' → logprob: -7.718321323394775
    10. 'def' → logprob: -7.780821323394775

Token 37: ' pense' (ID: 29077)
  Prédit: ' vais'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' vais' → logprob: -1.048155426979065
    2. ' pense' → logprob: -2.1731553077697754
    3. 's' → logprob: -2.4231553077697754
    4. ' veux' → logprob: -2.5481553077697754
    5. ' m' → logprob: -3.0481553077697754
    6. ' ' → logprob: -3.1731553077697754
    7. ' suis' → logprob: -3.2981553077697754
    8. ' continue' → logprob: -3.6731553077697754
    9. ' suppose' → logprob: -3.7981553077697754
    10. ' =' → logprob: -3.9231553077697754

Token 38: ' que' (ID: 661)
  Prédit: ' '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' ' → logprob: -0.1688091903924942
    2. '#' → logprob: -2.918809175491333
    3. '<|end|>' → logprob: -3.168809175491333
    4. '(' → logprob: -4.043809413909912
    5. ',' → logprob: -4.668809413909912
    6. 'A' → logprob: -5.043809413909912
    7. '```' → logprob: -5.418809413909912
    8. '...' → logprob: -5.793809413909912
    9. 'a' → logprob: -5.918809413909912
    10. 's' → logprob: -6.043809413909912

Token 39: ' c' (ID: 274)
  Prédit: ' le'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' le' → logprob: -1.805512547492981
    2. ' la' → logprob: -1.805512547492981
    3. ' ' → logprob: -1.930512547492981
    4. ' je' → logprob: -2.4305124282836914
    5. 'le' → logprob: -2.8055124282836914
    6. ' A' → logprob: -3.5555124282836914
    7. ' ce' → logprob: -3.5555124282836914
    8. ' for' → logprob: -3.6805124282836914
    9. ' pas' → logprob: -3.6805124282836914
    10. 'je' → logprob: -3.8055124282836914

Token 40: ''est' (ID: 6616)
  Prédit: '''
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ''' → logprob: -1.1012850999832153
    2. ' que' → logprob: -1.3512850999832153
    3. 'que' → logprob: -2.726284980773926
    4. ' faut' → logprob: -2.976284980773926
    5. 's' → logprob: -3.226284980773926
    6. ' faudra' → logprob: -3.226284980773926
    7. 'a' → logprob: -3.351284980773926
    8. 'f' → logprob: -3.601284980773926
    9. ' faudrait' → logprob: -3.851284980773926
    10. 'e' → logprob: -3.976284980773926

Token 41: ' ça' (ID: 13590)
  Prédit: 'tout'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'tout' → logprob: -0.6444929242134094
    2. ' tout' → logprob: -3.0194928646087646
    3. 'bien' → logprob: -3.1444928646087646
    4. ' une' → logprob: -3.5194928646087646
    5. 'part' → logprob: -3.6444928646087646
    6. '```' → logprob: -3.6444928646087646
    7. 'ça' → logprob: -3.6444928646087646
    8. 'bon' → logprob: -3.7694928646087646
    9. ' ça' → logprob: -3.8944928646087646
    10. 'f' → logprob: -4.019493103027344

Token 42: ' la' (ID: 557)
  Prédit: ' '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' ' → logprob: -0.11093603819608688
    2. ',' → logprob: -3.235935926437378
    3. 's' → logprob: -4.110936164855957
    4. '.' → logprob: -4.735936164855957
    5. ':' → logprob: -4.860936164855957
    6. '
' → logprob: -5.485936164855957
    7. '#' → logprob: -5.485936164855957
    8. ' ,' → logprob: -5.610936164855957
    9. ')' → logprob: -6.110936164855957
    10. 'a' → logprob: -6.235936164855957

Token 43: ' formule' (ID: 84316)
  Prédit: 'suite'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'suite' → logprob: -1.1902408599853516
    2. ' suite' → logprob: -1.4402408599853516
    3. ' bonne' → logprob: -1.5652408599853516
    4. ' boucle' → logprob: -2.6902408599853516
    5. ' prochaine' → logprob: -2.9402408599853516
    6. ' logique' → logprob: -3.1902408599853516
    7. ' formule' → logprob: -3.1902408599853516
    8. 's' → logprob: -4.315240859985352
    9. ' solution' → logprob: -4.940240859985352
    10. 'solution' → logprob: -5.565240859985352

Token 44: ' ?
' (ID: 19740)
  Prédit: ' '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' ' → logprob: -0.07359254360198975
    2. ' (' → logprob: -3.3235926628112793
    3. '  
' → logprob: -5.448592662811279
    4. 's' → logprob: -5.698592662811279
    5. '(' → logprob: -5.948592662811279
    6. ' 
' → logprob: -6.073592662811279
    7. 'A' → logprob: -6.073592662811279
    8. '<|end|>' → logprob: -6.073592662811279
    9. ' ,' → logprob: -6.323592662811279
    10. '  ' → logprob: -6.448592662811279

Token 45: 'total' (ID: 9577)
  Prédit: 'result'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'result' → logprob: -0.7842087745666504
    2. 'total' → logprob: -1.5342087745666504
    3. '(' → logprob: -2.2842087745666504
    4. 'print' → logprob: -2.9092087745666504
    5. ' ' → logprob: -3.5342087745666504
    6. 's' → logprob: -3.6592087745666504
    7. 'new' → logprob: -3.7842087745666504
    8. 'A' → logprob: -4.03420877456665
    9. 'n' → logprob: -4.15920877456665
    10. 'N' → logprob: -4.65920877456665

Token 46: ' =' (ID: 314)
  Prédit: ' ='
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' =' → logprob: -0.02412852831184864
    2. '_' → logprob: -4.024128437042236
    3. '=' → logprob: -5.274128437042236
    4. ' ' → logprob: -7.774128437042236
    5. 'A' → logprob: -9.149128913879395
    6. ' _' → logprob: -9.774128913879395
    7. 's' → logprob: -10.274128913879395
    8. '_a' → logprob: -10.899128913879395
    9. '  ' → logprob: -11.149128913879395
    10. '_p' → logprob: -11.149128913879395

Token 47: ' (' (ID: 350)
  Prédit: 'A'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'A' → logprob: -0.25831037759780884
    2. ' A' → logprob: -1.633310317993164
    3. ' (' → logprob: -4.633310317993164
    4. '(A' → logprob: -4.633310317993164
    5. '3' → logprob: -4.883310317993164
    6. '(' → logprob: -5.633310317993164
    7. ' ' → logprob: -7.133310317993164
    8. '2' → logprob: -8.508310317993164
    9. 'int' → logprob: -8.883310317993164
    10. '((' → logprob: -9.008310317993164

Token 48: 'A' (ID: 32)
  Prédit: 'A'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'A' → logprob: -0.005081006791442633
    2. '3' → logprob: -5.8800811767578125
    3. '(A' → logprob: -6.6300811767578125
    4. ' A' → logprob: -7.5050811767578125
    5. '(' → logprob: -8.880081176757812
    6. '2' → logprob: -9.380081176757812
    7. ' (' → logprob: -9.505081176757812
    8. '4' → logprob: -10.380081176757812
    9. ' ' → logprob: -10.880081176757812
    10. '1' → logprob: -11.130081176757812

Token 49: '*' (ID: 9)
  Prédit: ' *'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' *' → logprob: -0.42917874455451965
    2. '*' → logprob: -1.0541787147521973
    3. ' ' → logprob: -7.929178714752197
    4. ' +' → logprob: -9.804179191589355
    5. ' ' → logprob: -10.679179191589355
    6. '+' → logprob: -10.679179191589355
    7. ')' → logprob: -12.304179191589355
    8. '1' → logprob: -13.054179191589355
    9. '4' → logprob: -13.429179191589355
    10. '  ' → logprob: -13.991679191589355

Token 50: '3' (ID: 18)
  Prédit: '3'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '3' → logprob: -0.0004384174826554954
    2. ' ' → logprob: -8.125438690185547
    3. '9' → logprob: -9.875438690185547
    4. '10' → logprob: -10.000438690185547
    5. '   ' → logprob: -11.250438690185547
    6. 'P' → logprob: -11.750438690185547
    7. '  ' → logprob: -11.875438690185547
    8. ' ' → logprob: -12.875438690185547
    9. '1' → logprob: -13.375438690185547
    10. '4' → logprob: -13.562938690185547

Token 51: ' +' (ID: 659)
  Prédit: ' +'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' +' → logprob: -0.4317973256111145
    2. '+' → logprob: -1.6817972660064697
    3. ')' → logprob: -1.9317972660064697
    4. ')+' → logprob: -4.181797504425049
    5. ' )' → logprob: -5.556797504425049
    6. ')+(' → logprob: -7.681797504425049
    7. '+)' → logprob: -9.93179702758789
    8. ' ' → logprob: -10.05679702758789
    9. ' ' → logprob: -11.43179702758789
    10. '+A' → logprob: -11.68179702758789

Token 52: ' P' (ID: 398)
  Prédit: 'P'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'P' → logprob: -0.033848199993371964
    2. ' P' → logprob: -3.408848285675049
    3. ' ' → logprob: -9.03384780883789
    4. '2' → logprob: -10.78384780883789
    5. ' (' → logprob: -11.28384780883789
    6. '  ' → logprob: -11.28384780883789
    7. '(P' → logprob: -11.28384780883789
    8. '5' → logprob: -12.72134780883789
    9. '   ' → logprob: -12.90884780883789
    10. ')' → logprob: -13.09634780883789

Token 53: ')//' (ID: 60375)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')' → logprob: -0.03603518009185791
    2. ')//' → logprob: -3.4110350608825684
    3. ' )' → logprob: -6.161035060882568
    4. ')/' → logprob: -8.911035537719727
    5. '*' → logprob: -9.286035537719727
    6. '//' → logprob: -11.161035537719727
    7. ')#' → logprob: -11.786035537719727
    8. ')*' → logprob: -11.911035537719727
    9. '2' → logprob: -12.786035537719727
    10. '))' → logprob: -13.036035537719727

Token 54: '2' (ID: 17)
  Prédit: '2'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '2' → logprob: -0.013976969756186008
    2. '19' → logprob: -4.38897705078125
    3. ' ' → logprob: -7.13897705078125
    4. '1' → logprob: -7.76397705078125
    5. '3' → logprob: -9.63897705078125
    6. '(' → logprob: -9.88897705078125
    7. '  ' → logprob: -10.01397705078125
    8. '4' → logprob: -10.13897705078125
    9. '	' → logprob: -10.88897705078125
    10. '   ' → logprob: -11.13897705078125

Token 55: '

' (ID: 279)
  Prédit: 'print'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'print' → logprob: -0.609122097492218
    2. '<|end|>' → logprob: -0.984122097492218
    3. ' ' → logprob: -3.2341220378875732
    4. '
' → logprob: -4.484122276306152
    5. ' 
' → logprob: -4.484122276306152
    6. ')' → logprob: -4.984122276306152
    7. ' print' → logprob: -5.609122276306152
    8. '\n' → logprob: -6.109122276306152
    9. '<|end|>' → logprob: -6.359122276306152
    10. '  
' → logprob: -6.359122276306152

Token 56: 'print' (ID: 1598)
  Prédit: 'print'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'print' → logprob: -0.05757121369242668
    2. '<|end|>' → logprob: -3.3075711727142334
    3. '
' → logprob: -4.9325714111328125
    4. ')' → logprob: -5.5575714111328125
    5. '\n' → logprob: -5.6825714111328125
    6. ' print' → logprob: -6.1825714111328125
    7. '#' → logprob: -7.0575714111328125
    8. '```' → logprob: -7.3075714111328125
    9. ' ' → logprob: -7.5575714111328125
    10. '  
' → logprob: -8.557571411132812

Token 57: '(total' (ID: 39744)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(' → logprob: -0.1269530951976776
    2. '(total' → logprob: -2.126953125
    3. 'total' → logprob: -11.001953125
    4. ' (' → logprob: -13.126953125
    5. '('' → logprob: -13.376953125
    6. '(t' → logprob: -13.376953125
    7. '(`' → logprob: -14.001953125
    8. '((' → logprob: -14.251953125
    9. '(
' → logprob: -14.626953125
    10. '("("' → logprob: -14.751953125

Token 58: ')' (ID: 8)
  Prédit: ')'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')' → logprob: -1.8624639324116288e-06
    2. ' )' → logprob: -13.375001907348633
    3. ')
' → logprob: -15.750001907348633
    4. '))' → logprob: -16.375001907348633
    5. ')`' → logprob: -17.375001907348633
    6. '}' → logprob: -17.625001907348633
    7. '```' → logprob: -18.250001907348633
    8. '`)' → logprob: -18.375001907348633
    9. '）' → logprob: -18.875001907348633
    10. ')#' → logprob: -19.000001907348633

Token 59: ' ' (ID: 220)
  Prédit: '\n'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '\n' → logprob: -0.4107693135738373
    2. '<|end|>' → logprob: -1.1607693433761597
    3. '```' → logprob: -4.660769462585449
    4. ')' → logprob: -5.535769462585449
    5. '\' → logprob: -5.535769462585449
    6. '
' → logprob: -5.660769462585449
    7. '<|end|>' → logprob: -6.785769462585449
    8. ' ' → logprob: -7.785769462585449
    9. '#' → logprob: -7.910769462585449
    10. 'newline' → logprob: -8.03576946258545

Token 60: ' #' (ID: 1069)
  Prédit: '\n'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '\n' → logprob: -0.6203658580780029
    2. '<|end|>' → logprob: -0.8703658580780029
    3. ')' → logprob: -3.745365858078003
    4. '#' → logprob: -5.120366096496582
    5. '```' → logprob: -5.370366096496582
    6. '\' → logprob: -5.745366096496582
    7. ' ' → logprob: -6.370366096496582
    8. '
' → logprob: -6.620366096496582
    9. '<|end|>' → logprob: -6.870366096496582
    10. '%' → logprob: -6.995366096496582

Token 61: ' on' (ID: 402)
  Prédit: ''
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False

Token 62: ' affiche' (ID: 127479)
  Prédit: ' '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' ' → logprob: -0.7153103351593018
    2. '<|end|>' → logprob: -1.9653103351593018
    3. ' n' → logprob: -2.9653103351593018
    4. 'n' → logprob: -2.9653103351593018
    5. ' pense' → logprob: -3.0903103351593018
    6. ' a' → logprob: -3.0903103351593018
    7. '<|end|>' → logprob: -3.7153103351593018
    8. ''' → logprob: -3.9653103351593018
    9. ')' → logprob: -4.215310096740723
    10. 'a' → logprob: -4.590310096740723

Token 63: ',' (ID: 11)
  Prédit: '\n'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '\n' → logprob: -0.5431219935417175
    2. '<|end|>' → logprob: -0.9181219935417175
    3. '
' → logprob: -4.418121814727783
    4. '```' → logprob: -5.668121814727783
    5. ')' → logprob: -6.543121814727783
    6. '<|end|>' → logprob: -6.918121814727783
    7. '\' → logprob: -7.168121814727783
    8. ' ' → logprob: -7.918121814727783
    9. 'newline' → logprob: -8.293122291564941
    10. '  
' → logprob: -9.418122291564941

Token 64: ' normalement' (ID: 164432)
  Prédit: ' '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' ' → logprob: -0.585870087146759
    2. ')' → logprob: -1.0858700275421143
    3. ''' → logprob: -3.3358700275421143
    4. ' )' → logprob: -3.9608700275421143
    5. '"' → logprob: -4.585870265960693
    6. '<|end|>' → logprob: -4.960870265960693
    7. 'total' → logprob: -5.085870265960693
    8. ' end' → logprob: -5.335870265960693
    9. 'end' → logprob: -5.585870265960693
    10. '\n' → logprob: -5.835870265960693

Token 65: ' c' (ID: 274)
  Prédit: ''
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False

Token 66: ''est' (ID: 6616)
  Prédit: ''est'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ''est' → logprob: -0.8424716591835022
    2. ''' → logprob: -0.9674716591835022
    3. 'a' → logprob: -2.8424715995788574
    4. 'e' → logprob: -3.2174715995788574
    5. 'est' → logprob: -3.2174715995788574
    6. ''a' → logprob: -3.5924715995788574
    7. ''e' → logprob: -5.342471599578857
    8. ''''' → logprob: -5.467471599578857
    9. '```' → logprob: -5.717471599578857
    10. ''t' → logprob: -6.342471599578857

Token 67: ' bon' (ID: 4846)
  Prédit: 'le'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'le' → logprob: -0.9261191487312317
    2. 'tout' → logprob: -1.051119089126587
    3. 'correct' → logprob: -2.176119089126587
    4. 'la' → logprob: -3.051119089126587
    5. 'ok' → logprob: -4.301119327545166
    6. 'bien' → logprob: -4.426119327545166
    7. 'ça' → logprob: -4.551119327545166
    8. 'total' → logprob: -4.676119327545166
    9. ' le' → logprob: -4.801119327545166
    10. 'bon' → logprob: -4.926119327545166


RÉSUMÉ:
--------------------------------------------------------------------------------
Total des tokens analysés: 65
Tokens correctement prédits (1ère position, stricte): 16
Tokens correctement prédits (1ère position, avec adaptation): 16
Tokens correctement prédits (top 10): 36
Précision stricte (1ère position): 24.62%
Précision adaptée (1ère position): 24.62%
Précision (top 10): 55.38%
================================================================================
