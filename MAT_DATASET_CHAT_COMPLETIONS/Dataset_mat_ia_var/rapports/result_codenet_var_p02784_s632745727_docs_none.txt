================================================================================
ANALYSE DE PRÉDICTION TOKEN PAR TOKEN (BATCH API)
Date: 2025-06-04 19:28:12
Modèle de tokenisation: gpt-4o-mini
================================================================================

SCRIPT ANALYSÉ:
--------------------------------------------------------------------------------
H, N = map(int, input().split())
A = list(map(int, input().split()))
K = sum(A)
if K >= H:
    print("Yes")
else:
    print("No")
--------------------------------------------------------------------------------

RÉSULTATS D'ANALYSE TOKEN PAR TOKEN:
--------------------------------------------------------------------------------
Token 0: 'H' (ID: 39)
  → Token d'amorce (pas de prédiction)

Token 1: ',' (ID: 11)
  → Token d'amorce (pas de prédiction)

Token 2: ' N' (ID: 478)
  → Token d'amorce (pas de prédiction)

Token 3: ' =' (ID: 314)
  Prédit: ','
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ',' → logprob: -0.9730088710784912
    2. '=' → logprob: -1.0980088710784912
    3. ' =' → logprob: -1.7230088710784912
    4. 'e' → logprob: -2.973008871078491
    5. ')' → logprob: -3.348008871078491
    6. '(' → logprob: -4.97300910949707
    7. '[' → logprob: -6.09800910949707
    8. '.' → logprob: -6.34800910949707
    9. 'i' → logprob: -6.59800910949707
    10. 'H' → logprob: -6.72300910949707

Token 4: ' map' (ID: 4014)
  Prédit: ' map'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' map' → logprob: -0.672433614730835
    2. 'map' → logprob: -0.797433614730835
    3. ' ' → logprob: -3.547433614730835
    4. '2' → logprob: -6.047433853149414
    5. '5' → logprob: -6.047433853149414
    6. '10' → logprob: -6.297433853149414
    7. '3' → logprob: -7.797433853149414
    8. 'input' → logprob: -7.797433853149414
    9. '4' → logprob: -7.922433853149414
    10. '1' → logprob: -8.547433853149414

Token 5: '(int' (ID: 2742)
  Prédit: ''
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False

Token 6: ',' (ID: 11)
  Prédit: '(input'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(input' → logprob: -0.7165191173553467
    2. ')' → logprob: -1.0915191173553467
    3. '(' → logprob: -2.8415191173553467
    4. '(str' → logprob: -3.2165191173553467
    5. '```' → logprob: -3.4665191173553467
    6. '(int' → logprob: -3.8415191173553467
    7. '`)' → logprob: -4.966519355773926
    8. 'input' → logprob: -5.966519355773926
    9. ',' → logprob: -5.966519355773926
    10. '`' → logprob: -6.091519355773926

Token 7: ' input' (ID: 3422)
  Prédit: 'input'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'input' → logprob: -0.6931586861610413
    2. ' input' → logprob: -0.6931586861610413
    3. '(input' → logprob: -12.068159103393555
    4. ')' → logprob: -12.318159103393555
    5. ',input' → logprob: -14.318159103393555
    6. '<input' → logprob: -14.818159103393555
    7. '	input' → logprob: -15.818159103393555
    8. '=input' → logprob: -16.068159103393555
    9. ' ' → logprob: -17.193159103393555
    10. '[input' → logprob: -17.943159103393555

Token 8: '().' (ID: 1454)
  Prédit: '()'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '()' → logprob: -0.31711816787719727
    2. '())' → logprob: -1.4421181678771973
    3. '().' → logprob: -4.442118167877197
    4. '(' → logprob: -4.817118167877197
    5. ')' → logprob: -4.942118167877197
    6. '('' → logprob: -5.317118167877197
    7. '();)' → logprob: -7.817118167877197
    8. '());' → logprob: -7.942118167877197
    9. '`()' → logprob: -8.067117691040039
    10. '()>' → logprob: -8.192117691040039

Token 9: 'split' (ID: 13627)
  Prédit: 'split'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'split' → logprob: -0.003256854135543108
    2. 'strip' → logprob: -5.753256797790527
    3. 'read' → logprob: -9.753256797790527
    4. 'rstrip' → logprob: -11.253256797790527
    5. ' split' → logprob: -12.253256797790527
    6. ')' → logprob: -12.878256797790527
    7. '(split' → logprob: -15.128256797790527
    8. 'replace' → logprob: -16.003257751464844
    9. 'spl' → logprob: -16.503257751464844
    10. 'decode' → logprob: -16.503257751464844

Token 10: '())
' (ID: 4574)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ')' → logprob: -0.035007327795028687
    2. '))' → logprob: -3.9100072383880615
    3. '())' → logprob: -4.285007476806641
    4. '()' → logprob: -8.16000747680664
    5. '`)' → logprob: -8.91000747680664
    6. '(' → logprob: -9.53500747680664
    7. '()))' → logprob: -10.16000747680664
    8. '')' → logprob: -11.28500747680664
    9. ')`' → logprob: -11.66000747680664
    10. '('' → logprob: -11.91000747680664

Token 11: 'A' (ID: 32)
  Prédit: 'for'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'for' → logprob: -0.5853891968727112
    2. 'a' → logprob: -1.7103891372680664
    3. '`' → logprob: -3.4603891372680664
    4. '```' → logprob: -3.4603891372680664
    5. ')' → logprob: -3.5853891372680664
    6. '\n' → logprob: -3.5853891372680664
    7. '#' → logprob: -3.8353891372680664
    8. '[' → logprob: -4.085389137268066
    9. 'x' → logprob: -4.085389137268066
    10. ',' → logprob: -4.710389137268066

Token 12: ' =' (ID: 314)
  Prédit: '['
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '[' → logprob: -0.008837212808430195
    2. '.' → logprob: -6.2588372230529785
    3. '[A' → logprob: -6.5088372230529785
    4. '[]' → logprob: -7.0088372230529785
    5. '[:]' → logprob: -7.0088372230529785
    6. '=' → logprob: -7.5088372230529785
    7. ' =' → logprob: -7.5088372230529785
    8. '[i' → logprob: -7.7588372230529785
    9. '_' → logprob: -8.00883674621582
    10. ',' → logprob: -8.13383674621582

Token 13: ' list' (ID: 1562)
  Prédit: 'list'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'list' → logprob: -1.1865243911743164
    2. '[]' → logprob: -1.3115243911743164
    3. '[' → logprob: -2.0615243911743164
    4. ' [' → logprob: -2.1865243911743164
    5. ' list' → logprob: -2.6865243911743164
    6. '[list' → logprob: -2.8115243911743164
    7. ' []' → logprob: -2.9365243911743164
    8. '[int' → logprob: -6.061524391174316
    9. '[input' → logprob: -6.561524391174316
    10. '[A' → logprob: -8.436524391174316

Token 14: '(map' (ID: 16946)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '(' → logprob: -9.066919301403686e-05
    2. '(range' → logprob: -9.750090599060059
    3. '(
' → logprob: -12.125090599060059
    4. ' (' → logprob: -12.125090599060059
    5. '(

' → logprob: -12.625090599060059
    6. '("("' → logprob: -12.750090599060059
    7. '(A' → logprob: -13.125090599060059
    8. '(a' → logprob: -13.500090599060059
    9. '```' → logprob: -13.500090599060059
    10. '(int' → logprob: -13.625090599060059

Token 15: '(int' (ID: 2742)
  Prédit: '(int'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(int' → logprob: -0.08024314790964127
    2. '(' → logprob: -2.5802431106567383
    3. '(str' → logprob: -6.705243110656738
    4. '(input' → logprob: -9.580243110656738
    5. '(float' → logprob: -11.830243110656738
    6. 'int' → logprob: -12.205243110656738
    7. '(lambda' → logprob: -12.205243110656738
    8. '```' → logprob: -12.205243110656738
    9. '(eval' → logprob: -12.330243110656738
    10. '(
' → logprob: -12.580243110656738

Token 16: ',' (ID: 11)
  Prédit: '(input'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(input' → logprob: -0.08810371160507202
    2. ',' → logprob: -2.963103771209717
    3. ',input' → logprob: -3.963103771209717
    4. '(' → logprob: -4.338103771209717
    5. ')' → logprob: -8.463103294372559
    6. '=input' → logprob: -9.463103294372559
    7. '),' → logprob: -9.463103294372559
    8. '(int' → logprob: -9.838103294372559
    9. 'input' → logprob: -10.213103294372559
    10. '```' → logprob: -10.713103294372559

Token 17: ' input' (ID: 3422)
  Prédit: 'input'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'input' → logprob: -0.3132671117782593
    2. ' input' → logprob: -1.3132671117782593
    3. '(input' → logprob: -12.81326675415039
    4. ',input' → logprob: -13.31326675415039
    5. '	input' → logprob: -15.18826675415039
    6. '=input' → logprob: -15.18826675415039
    7. ')' → logprob: -15.81326675415039
    8. ' ' → logprob: -15.93826675415039
    9. '<input' → logprob: -16.43826675415039
    10. ',' → logprob: -17.56326675415039

Token 18: '().' (ID: 1454)
  Prédit: '().'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '().' → logprob: -0.010820011608302593
    2. '()' → logprob: -4.760819911956787
    3. '(' → logprob: -6.760819911956787
    4. '()))' → logprob: -7.760819911956787
    5. '())' → logprob: -8.135820388793945
    6. '(.' → logprob: -8.385820388793945
    7. '()(' → logprob: -11.010820388793945
    8. '(),' → logprob: -11.385820388793945
    9. ' ().' → logprob: -11.510820388793945
    10. '().__' → logprob: -11.760820388793945

Token 19: 'split' (ID: 13627)
  Prédit: 'split'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'split' → logprob: -7.584239938296378e-06
    2. 'strip' → logprob: -11.875007629394531
    3. ' split' → logprob: -15.125007629394531
    4. '(split' → logprob: -15.750007629394531
    5. 'rstrip' → logprob: -15.875007629394531
    6. 'spl' → logprob: -16.75000762939453
    7. ')' → logprob: -19.25000762939453
    8. 's' → logprob: -20.87500762939453
    9. '.split' → logprob: -21.12500762939453
    10. 'plit' → logprob: -21.50000762939453

Token 20: '()))
' (ID: 24521)
  Prédit: '))'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '))' → logprob: -0.1385338455438614
    2. '()))' → logprob: -2.7635338306427
    3. ')' → logprob: -2.8885338306427
    4. '(' → logprob: -4.763534069061279
    5. '())' → logprob: -6.763534069061279
    6. '()' → logprob: -7.013534069061279
    7. ')))' → logprob: -10.638533592224121
    8. ' ))' → logprob: -12.388533592224121
    9. '),' → logprob: -13.138533592224121
    10. ''))' → logprob: -13.138533592224121

Token 21: 'K' (ID: 42)
  Prédit: 'for'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'for' → logprob: -0.47540995478630066
    2. 's' → logprob: -1.975409984588623
    3. 'c' → logprob: -2.850409984588623
    4. 'dp' → logprob: -3.975409984588623
    5. 'x' → logprob: -4.225409984588623
    6. '[' → logprob: -4.225409984588623
    7. 'a' → logprob: -4.475409984588623
    8. 'd' → logprob: -4.475409984588623
    9. 'result' → logprob: -4.600409984588623
    10. 'count' → logprob: -4.600409984588623

Token 22: ' =' (ID: 314)
  Prédit: ' ='
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' =' → logprob: -0.28187164664268494
    2. '=' → logprob: -1.4068716764450073
    3. ')' → logprob: -8.531871795654297
    4. '_' → logprob: -8.781871795654297
    5. ',' → logprob: -8.906871795654297
    6. '.' → logprob: -9.031871795654297
    7. ' ' → logprob: -10.031871795654297
    8. '=int' → logprob: -10.906871795654297
    9. '[' → logprob: -11.406871795654297
    10. '>' → logprob: -11.656871795654297

Token 23: ' sum' (ID: 4215)
  Prédit: ' A'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' A' → logprob: -1.1192457675933838
    2. ' int' → logprob: -1.2442457675933838
    3. 'int' → logprob: -1.7442457675933838
    4. ' H' → logprob: -2.494245767593384
    5. 'A' → logprob: -2.869245767593384
    6. ' ' → logprob: -3.619245767593384
    7. 'H' → logprob: -3.994245767593384
    8. '0' → logprob: -4.119245529174805
    9. '10' → logprob: -5.869245529174805
    10. ' max' → logprob: -6.369245529174805

Token 24: '(A' (ID: 10706)
  Prédit: '(A'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(A' → logprob: -0.28176480531692505
    2. '(' → logprob: -1.4067647457122803
    3. '(a' → logprob: -8.28176498413086
    4. '((' → logprob: -9.15676498413086
    5. '(sum' → logprob: -9.90676498413086
    6. '(max' → logprob: -10.40676498413086
    7. '(H' → logprob: -10.53176498413086
    8. '(+' → logprob: -11.03176498413086
    9. '(lambda' → logprob: -11.15676498413086
    10. ')' → logprob: -11.28176498413086

Token 25: ')
' (ID: 446)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ')' → logprob: -0.002385399304330349
    2. '))' → logprob: -6.12738561630249
    3. '[' → logprob: -9.127385139465332
    4. '(' → logprob: -10.127385139465332
    5. ' )' → logprob: -11.127385139465332
    6. '[:' → logprob: -11.752385139465332
    7. ')>' → logprob: -12.127385139465332
    8. ')`' → logprob: -12.252385139465332
    9. ')))' → logprob: -12.502385139465332
    10. ')-' → logprob: -13.252385139465332

Token 26: 'if' (ID: 366)
  Prédit: 'if'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'if' → logprob: -0.44487622380256653
    2. '%' → logprob: -1.9448761940002441
    3. ' if' → logprob: -2.694876194000244
    4. '
' → logprob: -3.694876194000244
    5. ')' → logprob: -4.069876194000244
    6. '>' → logprob: -4.319876194000244
    7. 'print' → logprob: -4.319876194000244
    8. '\n' → logprob: -4.319876194000244
    9. '*' → logprob: -4.444876194000244
    10. '-' → logprob: -4.569876194000244

Token 27: ' K' (ID: 658)
  Prédit: ' K'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' K' → logprob: -0.013005747459828854
    2. 'K' → logprob: -5.01300573348999
    3. ' ' → logprob: -5.38800573348999
    4. ' H' → logprob: -6.51300573348999
    5. ' A' → logprob: -9.263006210327148
    6. ' ' → logprob: -9.638006210327148
    7. 'H' → logprob: -10.513006210327148
    8. 'A' → logprob: -11.513006210327148
    9. ' N' → logprob: -11.763006210327148
    10. '  ' → logprob: -13.138006210327148

Token 28: ' >=' (ID: 5064)
  Prédit: ' >'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' >' → logprob: -0.8699336051940918
    2. ' <' → logprob: -1.3699336051940918
    3. ' <=' → logprob: -1.8699336051940918
    4. '>' → logprob: -2.744933605194092
    5. '<' → logprob: -3.119933605194092
    6. ' >=' → logprob: -3.244933605194092
    7. ' ==' → logprob: -4.619933605194092
    8. '<=' → logprob: -5.119933605194092
    9. ' ' → logprob: -5.744933605194092
    10. '>=' → logprob: -5.994933605194092

Token 29: ' H' (ID: 487)
  Prédit: 'H'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'H' → logprob: -0.11452768743038177
    2. ' H' → logprob: -2.239527702331543
    3. 'N' → logprob: -6.864527702331543
    4. ' ' → logprob: -8.614527702331543
    5. ' N' → logprob: -8.864527702331543
    6. '10' → logprob: -8.989527702331543
    7. '100' → logprob: -9.364527702331543
    8. '0' → logprob: -9.864527702331543
    9. '1' → logprob: -10.989527702331543
    10. '50' → logprob: -11.114527702331543

Token 30: ':
' (ID: 734)
  Prédit: ':'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ':' → logprob: -0.0028657352086156607
    2. ' :' → logprob: -5.877865791320801
    3. ':
' → logprob: -10.0028657913208
    4. '):' → logprob: -12.3778657913208
    5. ' and' → logprob: -13.2528657913208
    6. '+:' → logprob: -13.2528657913208
    7. ' :
' → logprob: -13.3778657913208
    8. '':' → logprob: -13.5028657913208
    9. '.' → logprob: -14.3778657913208
    10. '":' → logprob: -14.6278657913208

Token 31: '   ' (ID: 271)
  Prédit: ' print'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' print' → logprob: -0.8972578048706055
    2. 'print' → logprob: -1.3972578048706055
    3. '   ' → logprob: -1.5222578048706055
    4. '\n' → logprob: -2.3972578048706055
    5. ':' → logprob: -4.6472578048706055
    6. '    ' → logprob: -5.1472578048706055
    7. ' \' → logprob: -5.7722578048706055
    8. '\' → logprob: -6.0222578048706055
    9. ''\' → logprob: -6.1472578048706055
    10. ' ' → logprob: -6.3972578048706055

Token 32: ' print' (ID: 2123)
  Prédit: 'print'
  Correct (stricte): False
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'print' (adapté à ' print') → logprob: -0.5242636799812317
    2. ' print' → logprob: -0.8992636799812317
    3. '"' → logprob: -8.274263381958008
    4. 'pr' → logprob: -8.774263381958008
    5. '   ' → logprob: -8.899263381958008
    6. ' ' → logprob: -9.149263381958008
    7. ''' → logprob: -9.149263381958008
    8. '\n' → logprob: -9.524263381958008
    9. ' \' → logprob: -9.899263381958008
    10. '    ' → logprob: -10.024263381958008

Token 33: '("' (ID: 568)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(' → logprob: -0.31843048334121704
    2. '("' → logprob: -1.3184304237365723
    3. '('' → logprob: -5.568430423736572
    4. '()' → logprob: -8.06843090057373
    5. '(K' → logprob: -8.06843090057373
    6. '("("' → logprob: -8.19343090057373
    7. '(H' → logprob: -8.56843090057373
    8. '(A' → logprob: -9.19343090057373
    9. '"' → logprob: -10.19343090057373
    10. '("")' → logprob: -10.56843090057373

Token 34: 'Yes' (ID: 13022)
  Prédit: 'Yes'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'Yes' → logprob: -0.02356642484664917
    2. 'YES' → logprob: -3.898566484451294
    3. '0' → logprob: -6.273566246032715
    4. '"' → logprob: -7.023566246032715
    5. '1' → logprob: -9.523566246032715
    6. 'yes' → logprob: -9.898566246032715
    7. 'Y' → logprob: -10.398566246032715
    8. 'Happy' → logprob: -10.648566246032715
    9. ' Yes' → logprob: -11.398566246032715
    10. ':' → logprob: -11.648566246032715

Token 35: '")
' (ID: 1896)
  Prédit: '")'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '")' → logprob: -0.06275101751089096
    2. ')' → logprob: -2.812751054763794
    3. ')")' → logprob: -7.312750816345215
    4. '")
' → logprob: -9.187750816345215
    5. ')
' → logprob: -12.187750816345215
    6. '!")' → logprob: -12.312750816345215
    7. '"' → logprob: -13.937750816345215
    8. ')")
' → logprob: -14.437750816345215
    9. 'else' → logprob: -14.437750816345215
    10. '()' → logprob: -14.562750816345215

Token 36: 'else' (ID: 2807)
  Prédit: 'else'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'else' → logprob: -0.01112292055040598
    2. ' else' → logprob: -4.511122703552246
    3. 'elif' → logprob: -10.011122703552246
    4. '<|end|>' → logprob: -11.011122703552246
    5. '```' → logprob: -12.136122703552246
    6. ')' → logprob: -13.011122703552246
    7. '
' → logprob: -13.761122703552246
    8. '_else' → logprob: -14.136122703552246
    9. '#else' → logprob: -14.511122703552246
    10. 'e' → logprob: -14.636122703552246

Token 37: ':
' (ID: 734)
  Prédit: ':'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ':' → logprob: -0.0017224266193807125
    2. ':
' → logprob: -6.37672233581543
    3. '   ' → logprob: -10.87672233581543
    4. ' :' → logprob: -14.00172233581543
    5. ' :
' → logprob: -16.25172233581543
    6. ':
' → logprob: -16.37672233581543
    7. '):' → logprob: -16.37672233581543
    8. ':

' → logprob: -16.87672233581543
    9. ')' → logprob: -16.87672233581543
    10. ',' → logprob: -17.00172233581543

Token 38: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.0033532092347741127
    2. 'print' → logprob: -5.753353118896484
    3. '\n' → logprob: -9.378353118896484
    4. ' print' → logprob: -9.878353118896484
    5. '  ' → logprob: -11.378353118896484
    6. ' ' → logprob: -11.503353118896484
    7. '"' → logprob: -11.878353118896484
    8. '    ' → logprob: -12.628353118896484
    9. '    
' → logprob: -13.378353118896484
    10. '       ' → logprob: -13.378353118896484

Token 39: ' print' (ID: 2123)
  Prédit: 'print'
  Correct (stricte): False
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'print' (adapté à ' print') → logprob: -0.012616416439414024
    2. '   ' → logprob: -5.0126166343688965
    3. ' print' → logprob: -5.1376166343688965
    4. ' ' → logprob: -12.387616157531738
    5. '  ' → logprob: -13.012616157531738
    6. '    ' → logprob: -13.012616157531738
    7. '.print' → logprob: -14.137616157531738
    8. '	print' → logprob: -14.137616157531738
    9. '"' → logprob: -14.387616157531738
    10. '(print' → logprob: -14.387616157531738

Token 40: '("' (ID: 568)
  Prédit: '("'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '("' → logprob: -0.5760298371315002
    2. '(' → logprob: -0.8260298371315002
    3. '("")' → logprob: -10.201029777526855
    4. '("("' → logprob: -10.701029777526855
    5. '()' → logprob: -11.326029777526855
    6. '('' → logprob: -11.826029777526855
    7. '(""' → logprob: -12.451029777526855
    8. '("""' → logprob: -12.701029777526855
    9. '(
' → logprob: -13.701029777526855
    10. '(False' → logprob: -14.576029777526855

Token 41: 'No' (ID: 3160)
  Prédit: 'No'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'No' → logprob: -0.16032373905181885
    2. '"No' → logprob: -1.9103237390518188
    3. '"' → logprob: -9.285324096679688
    4. ' No' → logprob: -13.035324096679688
    5. '“No' → logprob: -13.535324096679688
    6. '")' → logprob: -13.660324096679688
    7. '"N' → logprob: -14.035324096679688
    8. '(No' → logprob: -15.160324096679688
    9. 'N' → logprob: -15.410324096679688
    10. 'NO' → logprob: -16.035324096679688

Token 42: '")' (ID: 1405)
  Prédit: '")'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '")' → logprob: -4.167648876318708e-05
    2. ')' → logprob: -10.250041961669922
    3. ')")' → logprob: -12.000041961669922
    4. '")
' → logprob: -16.500041961669922
    5. '"' → logprob: -17.500041961669922
    6. '}")' → logprob: -18.375041961669922
    7. '!")' → logprob: -19.000041961669922
    8. '')' → logprob: -19.375041961669922
    9. '”)' → logprob: -19.625041961669922
    10. ')"' → logprob: -19.750041961669922


RÉSUMÉ:
--------------------------------------------------------------------------------
Total des tokens analysés: 40
Tokens correctement prédits (1ère position, stricte): 15
Tokens correctement prédits (1ère position, avec adaptation): 17
Tokens correctement prédits (top 10): 32
Précision stricte (1ère position): 37.50%
Précision adaptée (1ère position): 42.50%
Précision (top 10): 80.00%
================================================================================
