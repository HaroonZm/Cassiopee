================================================================================
ANALYSE DE PRÉDICTION TOKEN PAR TOKEN (BATCH API)
Date: 2025-06-04 19:16:56
Modèle de tokenisation: gpt-4o-mini
================================================================================

SCRIPT ANALYSÉ:
--------------------------------------------------------------------------------
N = int(input())
L = [str(input()) for i in range(N)]
L_removed = set(L)
print(len(L_removed))
--------------------------------------------------------------------------------

RÉSULTATS D'ANALYSE TOKEN PAR TOKEN:
--------------------------------------------------------------------------------
Token 0: 'N' (ID: 45)
  → Token d'amorce (pas de prédiction)

Token 1: ' =' (ID: 314)
  → Token d'amorce (pas de prédiction)

Token 2: ' int' (ID: 677)
  → Token d'amorce (pas de prédiction)

Token 3: '(input' (ID: 10054)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '(' → logprob: -0.0003839597338810563
    2. ''' → logprob: -8.875384330749512
    3. '(N' → logprob: -9.000384330749512
    4. '`' → logprob: -10.250384330749512
    5. '```' → logprob: -10.500384330749512
    6. '(
' → logprob: -10.875384330749512
    7. '('' → logprob: -11.500384330749512
    8. '("("' → logprob: -12.000384330749512
    9. '\(' → logprob: -12.375384330749512
    10. '"' → logprob: -12.875384330749512

Token 4: '())
' (ID: 4574)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '(' → logprob: -0.4827296733856201
    2. ')' → logprob: -0.9827296733856201
    3. '()' → logprob: -5.107729911804199
    4. '())' → logprob: -6.732729911804199
    5. '(
' → logprob: -7.732729911804199
    6. '```' → logprob: -8.7327299118042
    7. '))' → logprob: -9.1077299118042
    8. '")' → logprob: -9.3577299118042
    9. '')' → logprob: -9.4827299118042
    10. '(

' → logprob: -9.9827299118042

Token 5: 'L' (ID: 43)
  Prédit: 'for'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'for' → logprob: -0.6051552891731262
    2. 'if' → logprob: -1.3551552295684814
    3. '\n' → logprob: -2.8551552295684814
    4. 'i' → logprob: -3.7301552295684814
    5. 's' → logprob: -3.8551552295684814
    6. '```' → logprob: -4.2301554679870605
    7. '`' → logprob: -4.3551554679870605
    8. 'x' → logprob: -4.7301554679870605
    9. 'a' → logprob: -4.7301554679870605
    10. '\' → logprob: -4.8551554679870605

Token 6: ' =' (ID: 314)
  Prédit: ' ='
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' =' → logprob: -0.7436674237251282
    2. '.' → logprob: -1.1186673641204834
    3. '=' → logprob: -2.1186673641204834
    4. 'ist' → logprob: -3.2436673641204834
    5. '[' → logprob: -3.8686673641204834
    6. '.append' → logprob: -4.9936676025390625
    7. 'i' → logprob: -5.9936676025390625
    8. '=[]' → logprob: -6.7436676025390625
    9. '[i' → logprob: -6.8686676025390625
    10. 'st' → logprob: -7.1186676025390625

Token 7: ' [' (ID: 723)
  Prédit: '[]'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '[]' → logprob: -0.5330010056495667
    2. 'list' → logprob: -2.033000946044922
    3. ' []' → logprob: -2.283000946044922
    4. '[int' → logprob: -2.533000946044922
    5. '[input' → logprob: -3.408000946044922
    6. '[' → logprob: -3.533000946044922
    7. ' list' → logprob: -3.908000946044922
    8. ' [' → logprob: -4.283000946044922
    9. '[list' → logprob: -6.283000946044922
    10. 'input' → logprob: -7.033000946044922

Token 8: 'str' (ID: 689)
  Prédit: 'int'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'int' → logprob: -0.03373225778341293
    2. 'i' → logprob: -3.6587321758270264
    3. '0' → logprob: -5.5337324142456055
    4. ')' → logprob: -6.5337324142456055
    5. ']' → logprob: -6.6587324142456055
    6. ']int' → logprob: -7.9087324142456055
    7. 'input' → logprob: -9.033732414245605
    8. ' int' → logprob: -9.158732414245605
    9. '(int' → logprob: -9.658732414245605
    10. ' i' → logprob: -11.158732414245605

Token 9: '(input' (ID: 10054)
  Prédit: '(i'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(i' → logprob: -0.24555163085460663
    2. '(input' → logprob: -1.745551586151123
    3. '(x' → logprob: -3.620551586151123
    4. '(N' → logprob: -4.620551586151123
    5. '(' → logprob: -5.120551586151123
    6. '(int' → logprob: -8.620552062988281
    7. '(n' → logprob: -8.620552062988281
    8. '(a' → logprob: -9.495552062988281
    9. '(_)' → logprob: -10.120552062988281
    10. '(eval' → logprob: -10.620552062988281

Token 10: '())' (ID: 3516)
  Prédit: '())'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '())' → logprob: -0.0001234428636962548
    2. '()))' → logprob: -10.000123023986816
    3. '()]' → logprob: -10.250123023986816
    4. '()' → logprob: -10.250123023986816
    5. '()),' → logprob: -13.375123023986816
    6. '()).' → logprob: -13.500123023986816
    7. '())
' → logprob: -14.125123023986816
    8. ')' → logprob: -14.125123023986816
    9. ' ())' → logprob: -14.125123023986816
    10. ')]' → logprob: -14.375123023986816

Token 11: ' for' (ID: 395)
  Prédit: '()]'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '()]' → logprob: -0.07896667718887329
    2. '())' → logprob: -3.4539666175842285
    3. ')]' → logprob: -3.7039666175842285
    4. '()' → logprob: -4.9539666175842285
    5. ']' → logprob: -5.0789666175842285
    6. ')' → logprob: -5.0789666175842285
    7. '`]' → logprob: -9.828967094421387
    8. '(' → logprob: -10.828967094421387
    9. ']()' → logprob: -11.203967094421387
    10. '"]' → logprob: -11.453967094421387

Token 12: ' i' (ID: 575)
  Prédit: ' range'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' range' → logprob: -0.00021569548698607832
    2. 'range' → logprob: -9.250215530395508
    3. '_' → logprob: -9.375215530395508
    4. ' ' → logprob: -11.500215530395508
    5. ' i' → logprob: -11.625215530395508
    6. '	range' → logprob: -12.000215530395508
    7. '_range' → logprob: -12.625215530395508
    8. '(range' → logprob: -12.625215530395508
    9. ' xrange' → logprob: -13.375215530395508
    10. ' _' → logprob: -14.125215530395508

Token 13: ' in' (ID: 306)
  Prédit: ' in'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' in' → logprob: -0.08899235725402832
    2. 'in' → logprob: -2.4639923572540283
    3. ' ' → logprob: -10.83899211883545
    4. 'n' → logprob: -11.21399211883545
    5. 'range' → logprob: -11.96399211883545
    6. '	in' → logprob: -12.21399211883545
    7. '  ' → logprob: -14.08899211883545
    8. '+' → logprob: -14.33899211883545
    9. ')' → logprob: -14.40149211883545
    10. '<|end|>' → logprob: -14.46399211883545

Token 14: ' range' (ID: 3352)
  Prédit: ' range'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' range' → logprob: -0.029753033071756363
    2. 'range' → logprob: -3.5297529697418213
    3. '	range' → logprob: -13.404752731323242
    4. ' ' → logprob: -15.154752731323242
    5. '(range' → logprob: -15.529752731323242
    6. '_range' → logprob: -15.529752731323242
    7. 'Range' → logprob: -15.654752731323242
    8. ' xrange' → logprob: -16.029752731323242
    9. ' ran' → logprob: -17.279752731323242
    10. ' rango' → logprob: -18.029752731323242

Token 15: '(N' (ID: 10564)
  Prédit: '(N'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(N' → logprob: -0.20143672823905945
    2. '(' → logprob: -1.7014367580413818
    3. '(
' → logprob: -11.451436996459961
    4. '(n' → logprob: -11.701436996459961
    5. '(len' → logprob: -13.076436996459961
    6. ' (' → logprob: -14.076436996459961
    7. '(

' → logprob: -14.326436996459961
    8. '(`' → logprob: -15.701436996459961
    9. '(\' → logprob: -15.826436996459961
    10. '()' → logprob: -15.951436996459961

Token 16: ')]
' (ID: 11587)
  Prédit: ')]'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')]' → logprob: -0.0002800471556838602
    2. ')' → logprob: -8.375280380249023
    3. ']' → logprob: -10.250280380249023
    4. ' )' → logprob: -12.500280380249023
    5. '')]' → logprob: -12.500280380249023
    6. ')])' → logprob: -12.750280380249023
    7. '])]' → logprob: -13.500280380249023
    8. ')]
' → logprob: -14.125280380249023
    9. '))' → logprob: -14.875280380249023
    10. '）' → logprob: -15.000280380249023

Token 17: 'L' (ID: 43)
  Prédit: 'L'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'L' → logprob: -1.2836459875106812
    2. 'for' → logprob: -1.2836459875106812
    3. 'c' → logprob: -1.7836459875106812
    4. 's' → logprob: -2.9086461067199707
    5. 'M' → logprob: -3.1586461067199707
    6. 'C' → logprob: -3.2836461067199707
    7. 'max' → logprob: -3.9086461067199707
    8. 'count' → logprob: -4.033646106719971
    9. 'd' → logprob: -4.533646106719971
    10. 'print' → logprob: -4.658646106719971

Token 18: '_removed' (ID: 173812)
  Prédit: '['
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '[' → logprob: -0.09024602919816971
    2. '<|end|>' → logprob: -2.9652459621429443
    3. '.' → logprob: -3.5902459621429443
    4. '```' → logprob: -5.840246200561523
    5. '\[' → logprob: -7.090246200561523
    6. '#' → logprob: -7.090246200561523
    7. '<|end|>' → logprob: -7.215246200561523
    8. '[
' → logprob: -8.215246200561523
    9. '[:]' → logprob: -8.340246200561523
    10. '\' → logprob: -8.590246200561523

Token 19: ' =' (ID: 314)
  Prédit: '.'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '.' → logprob: -0.31331390142440796
    2. '_' → logprob: -1.8133139610290527
    3. '[' → logprob: -3.4383139610290527
    4. '=' → logprob: -4.438313961029053
    5. ' =' → logprob: -4.438313961029053
    6. 's' → logprob: -5.188313961029053
    7. '.setdefault' → logprob: -5.188313961029053
    8. '._' → logprob: -5.563313961029053
    9. '[:]' → logprob: -5.563313961029053
    10. '.remove' → logprob: -5.563313961029053

Token 20: ' set' (ID: 920)
  Prédit: '[]'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '[]' → logprob: -0.13666535913944244
    2. ' []' → logprob: -2.2616653442382812
    3. 'set' → logprob: -4.261665344238281
    4. 'L' → logprob: -6.011665344238281
    5. '[' → logprob: -6.136665344238281
    6. '[L' → logprob: -6.636665344238281
    7. 'list' → logprob: -6.761665344238281
    8. ' [' → logprob: -7.261665344238281
    9. ' L' → logprob: -8.011665344238281
    10. ' set' → logprob: -8.011665344238281

Token 21: '(L' (ID: 11075)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(' → logprob: -0.12721134722232819
    2. '()' → logprob: -2.127211332321167
    3. '(L' → logprob: -10.002211570739746
    4. '([]' → logprob: -10.502211570739746
    5. '(()' → logprob: -10.502211570739746
    6. '([' → logprob: -10.627211570739746
    7. '((' → logprob: -10.627211570739746
    8. '('' → logprob: -10.752211570739746
    9. '(
' → logprob: -10.752211570739746
    10. '(

' → logprob: -11.627211570739746

Token 22: ')
' (ID: 446)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')' → logprob: -6.349075556499884e-05
    2. '))' → logprob: -9.8750638961792
    3. ' )' → logprob: -11.8750638961792
    4. ')])' → logprob: -14.1250638961792
    5. ')))' → logprob: -14.2500638961792
    6. ')
' → logprob: -14.2500638961792
    7. '])' → logprob: -14.7500638961792
    8. ')]' → logprob: -14.7500638961792
    9. ')`' → logprob: -15.1250638961792
    10. '())' → logprob: -15.2500638961792

Token 23: 'print' (ID: 1598)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')' → logprob: -0.8805245757102966
    2. 'for' → logprob: -0.8805245757102966
    3. 'L' → logprob: -3.1305246353149414
    4. 'print' → logprob: -3.2555246353149414
    5. '<|end|>' → logprob: -3.2555246353149414
    6. ' for' → logprob: -5.005524635314941
    7. '(' → logprob: -5.255524635314941
    8. '()' → logprob: -5.505524635314941
    9. '#' → logprob: -5.630524635314941
    10. 'if' → logprob: -6.130524635314941

Token 24: '(len' (ID: 14990)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(' → logprob: -0.014865390956401825
    2. '(len' → logprob: -4.264865398406982
    3. '('' → logprob: -7.389865398406982
    4. '("("' → logprob: -10.514864921569824
    5. '()' → logprob: -10.889864921569824
    6. '(L' → logprob: -11.389864921569824
    7. '(sum' → logprob: -11.889864921569824
    8. '(max' → logprob: -12.014864921569824
    9. '(sorted' → logprob: -13.014864921569824
    10. '((' → logprob: -13.139864921569824

Token 25: '(L' (ID: 11075)
  Prédit: '(L'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(L' → logprob: -0.06197384372353554
    2. '(' → logprob: -2.811973810195923
    3. '(N' → logprob: -13.436973571777344
    4. ')' → logprob: -13.436973571777344
    5. '(
' → logprob: -13.686973571777344
    6. '(

' → logprob: -13.811973571777344
    7. '(S' → logprob: -15.186973571777344
    8. ' (' → logprob: -15.936973571777344
    9. '(_' → logprob: -16.061973571777344
    10. 'L' → logprob: -16.186973571777344

Token 26: '_removed' (ID: 173812)
  Prédit: '))'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '))' → logprob: -0.040206391364336014
    2. ')' → logprob: -3.2902064323425293
    3. '_removed' → logprob: -6.415206432342529
    4. '-' → logprob: -8.790205955505371
    5. ')))' → logprob: -8.915205955505371
    6. ')-' → logprob: -9.540205955505371
    7. ' ))' → logprob: -9.915205955505371
    8. '_' → logprob: -10.415205955505371
    9. '_remove' → logprob: -11.290205955505371
    10. '))-' → logprob: -11.540205955505371

Token 27: '))' (ID: 915)
  Prédit: '))'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '))' → logprob: -0.2014191895723343
    2. ')' → logprob: -1.7014192342758179
    3. ')))' → logprob: -12.95141887664795
    4. '))
' → logprob: -13.82641887664795
    5. ')
' → logprob: -14.07641887664795
    6. ' ))' → logprob: -14.57641887664795
    7. ' )' → logprob: -15.20141887664795
    8. '])' → logprob: -15.70141887664795
    9. '()' → logprob: -16.076419830322266
    10. '(' → logprob: -16.326419830322266


RÉSUMÉ:
--------------------------------------------------------------------------------
Total des tokens analysés: 25
Tokens correctement prédits (1ère position, stricte): 8
Tokens correctement prédits (1ère position, avec adaptation): 8
Tokens correctement prédits (top 10): 19
Précision stricte (1ère position): 32.00%
Précision adaptée (1ère position): 32.00%
Précision (top 10): 76.00%
================================================================================
