================================================================================
ANALYSE DE PRÉDICTION TOKEN PAR TOKEN (BATCH API)
Date: 2025-06-04 19:35:06
Modèle de tokenisation: gpt-4o-mini
================================================================================

SCRIPT ANALYSÉ:
--------------------------------------------------------------------------------
# ok, on lit l'entrée utilisateur
ch = input()
total = 0

# je pense qu'on peut faire ça comme ça ?
for idx in range(int(len(ch)/2)):
    if ch[idx] != ch[len(ch)-1-idx]:
        total = total + 1   # incrémentation (ça marche ?)
# le résultat c'est ce qu'on voulait
print(total)
--------------------------------------------------------------------------------

RÉSULTATS D'ANALYSE TOKEN PAR TOKEN:
--------------------------------------------------------------------------------
Token 0: '#' (ID: 2)
  → Token d'amorce (pas de prédiction)

Token 1: ' ok' (ID: 4763)
  → Token d'amorce (pas de prédiction)

Token 2: ',' (ID: 11)
  → Token d'amorce (pas de prédiction)

Token 3: ' on' (ID: 402)
  Prédit: ' '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' ' → logprob: -0.5612654685974121
    2. '```' → logprob: -1.811265468597412
    3. '\n' → logprob: -2.186265468597412
    4. ' let's' → logprob: -2.686265468597412
    5. ',' → logprob: -4.186265468597412
    6. ' ```' → logprob: -4.311265468597412
    7. '`' → logprob: -4.436265468597412
    8. ' #' → logprob: -4.686265468597412
    9. '#' → logprob: -4.936265468597412
    10. ' \' → logprob: -5.186265468597412

Token 4: ' lit' (ID: 11980)
  Prédit: 'e'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'e' → logprob: -0.06275998055934906
    2. '_' → logprob: -3.1877598762512207
    3. 'ly' → logprob: -4.812759876251221
    4. 'ce' → logprob: -6.437759876251221
    5. '_continue' → logprob: -6.562759876251221
    6. ' e' → logprob: -6.812759876251221
    7. ' =' → logprob: -7.687759876251221
    8. '#' → logprob: -7.812759876251221
    9. '_next' → logprob: -7.812759876251221
    10. '_success' → logprob: -7.812759876251221

Token 5: ' l' (ID: 305)
  Prédit: '_'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '_' → logprob: -1.3299232721328735
    2. ''' → logprob: -1.9549232721328735
    3. ',' → logprob: -1.9549232721328735
    4. '```' → logprob: -2.204923152923584
    5. 'e' → logprob: -2.579923152923584
    6. ':' → logprob: -2.829923152923584
    7. '.' → logprob: -3.204923152923584
    8. '#' → logprob: -3.454923152923584
    9. '!' → logprob: -3.704923152923584
    10. '=' → logprob: -3.829923152923584

Token 6: ''entrée' (ID: 115820)
  Prédit: 'e'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'e' → logprob: -0.6441246867179871
    2. 'a' → logprob: -1.2691247463226318
    3. 'i' → logprob: -2.269124746322632
    4. '```' → logprob: -4.144124507904053
    5. 'ignes' → logprob: -4.269124507904053
    6. '#' → logprob: -5.144124507904053
    7. ''' → logprob: -5.144124507904053
    8. 'igne' → logprob: -5.394124507904053
    9. '_' → logprob: -5.519124507904053
    10. '`' → logprob: -5.831624507904053

Token 7: ' utilisateur' (ID: 115595)
  Prédit: ':'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ':' → logprob: -1.2787028551101685
    2. '.' → logprob: -1.5287028551101685
    3. '=' → logprob: -2.278702735900879
    4. ',' → logprob: -2.403702735900879
    5. '#' → logprob: -2.653702735900879
    6. 's' → logprob: -2.903702735900879
    7. '_' → logprob: -2.903702735900879
    8. ' =' → logprob: -3.403702735900879
    9. 'e' → logprob: -3.903702735900879
    10. '`' → logprob: -4.028702735900879

Token 8: '
' (ID: 198)
  Prédit: 'user'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'user' → logprob: -0.2999095320701599
    2. '=' → logprob: -2.7999095916748047
    3. 'input' → logprob: -3.0499095916748047
    4. '_' → logprob: -3.0499095916748047
    5. ' =' → logprob: -3.2999095916748047
    6. '#' → logprob: -3.7999095916748047
    7. 's' → logprob: -4.299909591674805
    8. 'u' → logprob: -5.174909591674805
    9. '```' → logprob: -5.674909591674805
    10. '`' → logprob: -5.799909591674805

Token 9: 'ch' (ID: 332)
  Prédit: 'user'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'user' → logprob: -0.7024703621864319
    2. '_' → logprob: -1.452470302581787
    3. ' =' → logprob: -1.827470302581787
    4. '=' → logprob: -3.077470302581787
    5. '`' → logprob: -4.577470302581787
    6. '.' → logprob: -4.827470302581787
    7. ',' → logprob: -4.952470302581787
    8. 's' → logprob: -4.952470302581787
    9. 'input' → logprob: -4.952470302581787
    10. '```' → logprob: -5.452470302581787

Token 10: ' =' (ID: 314)
  Prédit: 'o'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'o' → logprob: -0.4151778817176819
    2. ' =' → logprob: -2.040177822113037
    3. 'e' → logprob: -2.415177822113037
    4. '=' → logprob: -2.665177822113037
    5. 'a' → logprob: -3.540177822113037
    6. ' ' → logprob: -5.040177822113037
    7. '   ' → logprob: -5.790177822113037
    8. 'm' → logprob: -6.415177822113037
    9. 'ar' → logprob: -6.540177822113037
    10. 'r' → logprob: -6.790177822113037

Token 11: ' input' (ID: 3422)
  Prédit: ' input'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' input' → logprob: -0.31346595287323
    2. 'input' → logprob: -1.31346595287323
    3. ' ' → logprob: -8.68846607208252
    4. ' ' → logprob: -11.43846607208252
    5. '=input' → logprob: -12.31346607208252
    6. '	input' → logprob: -12.43846607208252
    7. '   ' → logprob: -13.06346607208252
    8. '  ' → logprob: -13.43846607208252
    9. '<input' → logprob: -13.43846607208252
    10. 'ch' → logprob: -13.68846607208252

Token 12: '()
' (ID: 1234)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '(' → logprob: -0.0005916363443247974
    2. '('' → logprob: -7.87559175491333
    3. '("("' → logprob: -8.625591278076172
    4. '()' → logprob: -10.750591278076172
    5. ' (' → logprob: -12.625591278076172
    6. '(
' → logprob: -13.000591278076172
    7. ' ' → logprob: -14.000591278076172
    8. '(`' → logprob: -14.125591278076172
    9. '(

' → logprob: -14.250591278076172
    10. '("")' → logprob: -14.375591278076172

Token 13: 'total' (ID: 9577)
  Prédit: '.'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '.' → logprob: -0.21623896062374115
    2. ' ' → logprob: -2.7162389755249023
    3. '+' → logprob: -3.4662389755249023
    4. '#' → logprob: -3.5912389755249023
    5. '[' → logprob: -4.341238975524902
    6. '=' → logprob: -4.341238975524902
    7. '.strip' → logprob: -4.466238975524902
    8. 'if' → logprob: -5.341238975524902
    9. '
' → logprob: -5.591238975524902
    10. ')' → logprob: -5.716238975524902

Token 14: ' =' (ID: 314)
  Prédit: ' +='
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' +=' → logprob: -0.09529758989810944
    2. ' =' → logprob: -2.9702975749969482
    3. '+' → logprob: -4.220297813415527
    4. '_' → logprob: -4.845297813415527
    5. ' +' → logprob: -4.970297813415527
    6. '=' → logprob: -5.345297813415527
    7. ' ' → logprob: -5.970297813415527
    8. '+=' → logprob: -5.970297813415527
    9. 's' → logprob: -10.220297813415527
    10. 'space' → logprob: -10.470297813415527

Token 15: ' ' (ID: 220)
  Prédit: '0'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '0' → logprob: -0.1890639364719391
    2. ' ' → logprob: -1.8140639066696167
    3. ' int' → logprob: -5.689064025878906
    4. 'int' → logprob: -5.814064025878906
    5. ' ch' → logprob: -6.439064025878906
    6. 'ch' → logprob: -6.689064025878906
    7. '"' → logprob: -11.064064025878906
    8. 'len' → logprob: -11.939064025878906
    9. ' len' → logprob: -12.064064025878906
    10. '+' → logprob: -12.189064025878906

Token 16: '0' (ID: 15)
  Prédit: '0'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '0' → logprob: -0.033023424446582794
    2. 'int' → logprob: -3.6580233573913574
    3. 'ch' → logprob: -5.158023357391357
    4. ' ' → logprob: -7.408023357391357
    5. '""' → logprob: -9.408023834228516
    6. 'total' → logprob: -9.783023834228516
    7. 'len' → logprob: -9.908023834228516
    8. 'ord' → logprob: -10.158023834228516
    9. ' int' → logprob: -10.408023834228516
    10. '''' → logprob: -10.658023834228516

Token 17: '

' (ID: 279)
  Prédit: '+'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '+' → logprob: -0.6129094958305359
    2. ' ' → logprob: -1.2379095554351807
    3. ' 
' → logprob: -2.3629095554351807
    4. '
' → logprob: -3.3629095554351807
    5. '+
' → logprob: -4.862909317016602
    6. '<|end|>' → logprob: -4.862909317016602
    7. 'if' → logprob: -5.237909317016602
    8. 'for' → logprob: -5.362909317016602
    9. ' if' → logprob: -5.862909317016602
    10. ' for' → logprob: -6.237909317016602

Token 18: '#' (ID: 2)
  Prédit: '+'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '+' → logprob: -0.057178255170583725
    2. ' ' → logprob: -3.182178258895874
    3. '=' → logprob: -5.557178020477295
    4. 'for' → logprob: -6.057178020477295
    5. '<|end|>' → logprob: -6.182178020477295
    6. 'if' → logprob: -7.057178020477295
    7. '.' → logprob: -7.182178020477295
    8. ':' → logprob: -7.682178020477295
    9. '
' → logprob: -7.932178020477295
    10. ' for' → logprob: -7.932178020477295

Token 19: ' je' (ID: 1264)
  Prédit: 'for'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'for' → logprob: -0.3444003760814667
    2. ' for' → logprob: -1.344400405883789
    3. 'if' → logprob: -4.219400405883789
    4. ' ' → logprob: -5.094400405883789
    5. ' if' → logprob: -5.219400405883789
    6. 'while' → logprob: -6.219400405883789
    7. ' while' → logprob: -6.344400405883789
    8. 'ch' → logprob: -8.469400405883789
    9. '#' → logprob: -9.344400405883789
    10. '+' → logprob: -9.469400405883789

Token 20: ' pense' (ID: 29077)
  Prédit: 'f'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'f' → logprob: -0.24897904694080353
    2. ' ' → logprob: -2.123979091644287
    3. ' f' → logprob: -2.373979091644287
    4. 'n' → logprob: -5.623979091644287
    5. ' n' → logprob: -6.748979091644287
    6. 's' → logprob: -7.498979091644287
    7. ' +=' → logprob: -8.248978614807129
    8. ' =' → logprob: -8.373978614807129
    9. '_' → logprob: -8.498978614807129
    10. 'nt' → logprob: -8.498978614807129

Token 21: ' qu' (ID: 474)
  Prédit: ' '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' ' → logprob: -0.026789259165525436
    2. ' =' → logprob: -5.27678918838501
    3. 'ch' → logprob: -5.77678918838501
    4. '=' → logprob: -6.15178918838501
    5. 's' → logprob: -6.65178918838501
    6. ' à' → logprob: -6.65178918838501
    7. '(' → logprob: -6.90178918838501
    8. ' que' → logprob: -6.90178918838501
    9. ' to' → logprob: -7.15178918838501
    10. '  ' → logprob: -7.15178918838501

Token 22: ''on' (ID: 25812)
  Prédit: '''
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ''' → logprob: -0.5088273882865906
    2. 'e' → logprob: -1.8838274478912354
    3. ' ' → logprob: -1.8838274478912354
    4. ' que' → logprob: -3.7588274478912354
    5. ''il' → logprob: -4.008827209472656
    6. ' a' → logprob: -4.383827209472656
    7. 'a' → logprob: -4.883827209472656
    8. '`' → logprob: -5.633827209472656
    9. 'que' → logprob: -5.758827209472656
    10. '  ' → logprob: -6.258827209472656

Token 23: ' peut' (ID: 9216)
  Prédit: ' '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' ' → logprob: -0.006984964478760958
    2. ' a' → logprob: -6.631985187530518
    3. ' peux' → logprob: -6.756985187530518
    4. ' =' → logprob: -7.006985187530518
    5. ' veux' → logprob: -7.881985187530518
    6. '  ' → logprob: -7.881985187530518
    7. ' continue' → logprob: -8.13198471069336
    8. ' vais' → logprob: -8.38198471069336
    9. 's' → logprob: -8.50698471069336
    10. ''' → logprob: -8.50698471069336

Token 24: ' faire' (ID: 8119)
  Prédit: ' continuer'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' continuer' → logprob: -1.2231391668319702
    2. 'for' → logprob: -1.5981391668319702
    3. 'contin' → logprob: -2.2231392860412598
    4. 'faire' → logprob: -2.2231392860412598
    5. ' faire' → logprob: -2.8481392860412598
    6. ' for' → logprob: -2.8481392860412598
    7. ' utiliser' → logprob: -3.0981392860412598
    8. ' ajouter' → logprob: -3.5981392860412598
    9. 'while' → logprob: -4.47313928604126
    10. 'util' → logprob: -4.72313928604126

Token 25: ' ça' (ID: 13590)
  Prédit: ' mieux'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' mieux' → logprob: -0.8914812207221985
    2. 'for' → logprob: -2.2664811611175537
    3. ' total' → logprob: -2.3914811611175537
    4. ' ' → logprob: -2.3914811611175537
    5. 'total' → logprob: -3.1414811611175537
    6. 'while' → logprob: -3.6414811611175537
    7. ' une' → logprob: -3.6414811611175537
    8. ' for' → logprob: -3.6414811611175537
    9. 'plus' → logprob: -3.6414811611175537
    10. ' un' → logprob: -3.8914811611175537

Token 26: ' comme' (ID: 7971)
  Prédit: 'while'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'while' → logprob: -0.6800711154937744
    2. ' while' → logprob: -0.9300711154937744
    3. ' tant' → logprob: -2.9300711154937744
    4. ' ' → logprob: -4.430070877075195
    5. ' en' → logprob: -4.805070877075195
    6. ' for' → logprob: -5.180070877075195
    7. 'for' → logprob: -5.180070877075195
    8. 'tant' → logprob: -5.680070877075195
    9. ':' → logprob: -6.180070877075195
    10. 'en' → logprob: -6.680070877075195

Token 27: ' ça' (ID: 13590)
  Prédit: 'ça'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'ça' → logprob: -0.6055731773376465
    2. ' ça' → logprob: -1.3555731773376465
    3. ' ceci' → logprob: -2.6055731773376465
    4. 'ç' → logprob: -3.7305731773376465
    5. 'cela' → logprob: -3.9805731773376465
    6. 'ca' → logprob: -4.1055731773376465
    7. 'ci' → logprob: -4.3555731773376465
    8. 'suite' → logprob: -4.4805731773376465
    9. ' suit' → logprob: -5.2305731773376465
    10. 'une' → logprob: -5.2305731773376465

Token 28: ' ?
' (ID: 19740)
  Prédit: ':'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ':' → logprob: -0.6943304538726807
    2. 'while' → logprob: -0.9443304538726807
    3. ' while' → logprob: -2.9443304538726807
    4. 'for' → logprob: -3.8193304538726807
    5. '
' → logprob: -4.444330215454102
    6. ':
' → logprob: -4.694330215454102
    7. ' ' → logprob: -5.694330215454102
    8. ',' → logprob: -6.194330215454102
    9. ' :' → logprob: -6.569330215454102
    10. '  
' → logprob: -6.694330215454102

Token 29: 'for' (ID: 1938)
  Prédit: 'while'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'while' → logprob: -0.0406021848320961
    2. ' while' → logprob: -3.665602207183838
    3. 'for' → logprob: -5.290602207183838
    4. '
' → logprob: -5.415602207183838
    5. ':' → logprob: -5.665602207183838
    6. '```' → logprob: -7.415602207183838
    7. 'wh' → logprob: -8.79060173034668
    8. 'if' → logprob: -9.54060173034668
    9. ' 
' → logprob: -9.66560173034668
    10. '+' → logprob: -10.04060173034668

Token 30: ' idx' (ID: 14016)
  Prédit: ' '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' ' → logprob: -0.1446782946586609
    2. ' ch' → logprob: -2.3946783542633057
    3. ' i' → logprob: -3.5196783542633057
    4. ' c' → logprob: -4.644678115844727
    5. ' char' → logprob: -6.644678115844727
    6. ' _' → logprob: -6.769678115844727
    7. '  ' → logprob: -7.894678115844727
    8. 'ch' → logprob: -8.019678115844727
    9. ' token' → logprob: -8.019678115844727
    10. '_' → logprob: -8.394678115844727

Token 31: ' in' (ID: 306)
  Prédit: ' in'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' in' → logprob: -0.09116587787866592
    2. ',' → logprob: -2.966165781021118
    3. 'in' → logprob: -3.716165781021118
    4. ' ' → logprob: -4.716166019439697
    5. ' ,' → logprob: -6.091166019439697
    6. ',in' → logprob: -11.216165542602539
    7. '```' → logprob: -11.216165542602539
    8. ' i' → logprob: -11.903665542602539
    9. '  ' → logprob: -11.966165542602539
    10. ',ch' → logprob: -12.028665542602539

Token 32: ' range' (ID: 3352)
  Prédit: ' ch'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' ch' → logprob: -0.25464871525764465
    2. ' range' → logprob: -1.5046486854553223
    3. 'ch' → logprob: -6.504648685455322
    4. 'range' → logprob: -6.879648685455322
    5. ' ' → logprob: -9.00464916229248
    6. '	ch' → logprob: -10.75464916229248
    7. '	range' → logprob: -11.94214916229248
    8. '  ' → logprob: -12.00464916229248
    9. '[ch' → logprob: -12.19214916229248
    10. ' in' → logprob: -12.44214916229248

Token 33: '(int' (ID: 2742)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(' → logprob: -0.3881179988384247
    2. '(len' → logprob: -1.138118028640747
    3. '(ch' → logprob: -6.763117790222168
    4. ' (' → logprob: -9.638117790222168
    5. '(s' → logprob: -12.388117790222168
    6. '(ord' → logprob: -12.388117790222168
    7. '(n' → logprob: -12.513117790222168
    8. '(int' → logprob: -12.513117790222168
    9. '(length' → logprob: -12.513117790222168
    10. '((' → logprob: -14.013117790222168

Token 34: '(len' (ID: 14990)
  Prédit: '(ch'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(ch' → logprob: -0.0015249757561832666
    2. '(' → logprob: -6.501524925231934
    3. ' (' → logprob: -11.626524925231934
    4. 'ch' → logprob: -12.751524925231934
    5. ' ' → logprob: -13.251524925231934
    6. '(s' → logprob: -13.501524925231934
    7. '(len' → logprob: -13.751524925231934
    8. '(chr' → logprob: -13.876524925231934
    9. '[ch' → logprob: -14.001524925231934
    10. '(CH' → logprob: -14.376524925231934

Token 35: '(ch' (ID: 15574)
  Prédit: '(ch'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(ch' → logprob: -0.00015908108616713434
    2. '(' → logprob: -9.00015926361084
    3. 'ch' → logprob: -10.62515926361084
    4. ' (' → logprob: -11.62515926361084
    5. ' ch' → logprob: -14.12515926361084
    6. '	ch' → logprob: -15.00015926361084
    7. '[ch' → logprob: -15.12515926361084
    8. '(s' → logprob: -15.25015926361084
    9. '(
' → logprob: -16.000158309936523
    10. ')' → logprob: -16.250158309936523

Token 36: ')/' (ID: 11876)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')' → logprob: -0.8478430509567261
    2. '))' → logprob: -1.347843050956726
    3. ')):' → logprob: -1.347843050956726
    4. '()))' → logprob: -4.097843170166016
    5. ' ))' → logprob: -4.472843170166016
    6. ')))' → logprob: -4.847843170166016
    7. ' ' → logprob: -4.972843170166016
    8. ')/' → logprob: -6.347843170166016
    9. '()' → logprob: -6.472843170166016
    10. '/' → logprob: -6.597843170166016

Token 37: '2' (ID: 17)
  Prédit: '2'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '2' → logprob: -0.013373860158026218
    2. ' ' → logprob: -4.388373851776123
    3. '3' → logprob: -7.513373851776123
    4. '1' → logprob: -8.513374328613281
    5. '4' → logprob: -9.388374328613281
    6. '5' → logprob: -11.388374328613281
    7. '6' → logprob: -12.013374328613281
    8. '10' → logprob: -12.638374328613281
    9. ')' → logprob: -13.013374328613281
    10. '7' → logprob: -13.450874328613281

Token 38: ')):
' (ID: 22530)
  Prédit: ')):'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')):' → logprob: -0.3189074397087097
    2. ')' → logprob: -1.5689074993133545
    3. '))' → logprob: -3.0689074993133545
    4. '):' → logprob: -4.193907260894775
    5. ' ))' → logprob: -6.818907260894775
    6. ')+' → logprob: -7.693907260894775
    7. ' ' → logprob: -7.943907260894775
    8. ')):
' → logprob: -8.068907737731934
    9. '+' → logprob: -8.193907737731934
    10. ' +' → logprob: -8.568907737731934

Token 39: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.6704883575439453
    2. ' ' → logprob: -1.0454883575439453
    3. '    ' → logprob: -2.9204883575439453
    4. ':' → logprob: -4.045488357543945
    5. '<|end|>' → logprob: -4.295488357543945
    6. ' total' → logprob: -4.545488357543945
    7. '    
' → logprob: -4.670488357543945
    8. ' 
' → logprob: -5.045488357543945
    9. 'total' → logprob: -5.045488357543945
    10. ' :' → logprob: -5.295488357543945

Token 40: ' if' (ID: 538)
  Prédit: ' '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' ' → logprob: -0.3873843848705292
    2. ' total' → logprob: -2.0123844146728516
    3. 'total' → logprob: -2.1373844146728516
    4. '    ' → logprob: -3.5123844146728516
    5. ' if' → logprob: -4.262384414672852
    6. ' 
' → logprob: -4.762384414672852
    7. '   ' → logprob: -5.012384414672852
    8. '     
' → logprob: -6.012384414672852
    9. '    
' → logprob: -6.387384414672852
    10. '  ' → logprob: -6.387384414672852

Token 41: ' ch' (ID: 549)
  Prédit: ' ch'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' ch' → logprob: -0.007675244938582182
    2. 'ch' → logprob: -4.8826751708984375
    3. ' ' → logprob: -10.882675170898438
    4. ' int' → logprob: -10.882675170898438
    5. ' ord' → logprob: -12.007675170898438
    6. '(ch' → logprob: -12.132675170898438
    7. ' idx' → logprob: -12.382675170898438
    8. '   ' → logprob: -12.882675170898438
    9. '	ch' → logprob: -13.132675170898438
    10. ' not' → logprob: -13.257675170898438

Token 42: '[idx' (ID: 25582)
  Prédit: '[idx'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '[idx' → logprob: -0.282268762588501
    2. '[' → logprob: -1.407268762588501
    3. ' [' → logprob: -7.157268524169922
    4. '[i' → logprob: -9.532268524169922
    5. '[int' → logprob: -10.032268524169922
    6. '[ch' → logprob: -10.032268524169922
    7. ' ' → logprob: -10.157268524169922
    8. ' ==' → logprob: -10.907268524169922
    9. '[len' → logprob: -10.907268524169922
    10. '==' → logprob: -11.032268524169922

Token 43: ']' (ID: 60)
  Prédit: ']'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ']' → logprob: -0.044445376843214035
    2. ']==' → logprob: -3.544445276260376
    3. ' ]' → logprob: -4.294445514678955
    4. ']!=' → logprob: -8.044445037841797
    5. '==' → logprob: -8.294445037841797
    6. ' ==' → logprob: -9.044445037841797
    7. ' ' → logprob: -10.044445037841797
    8. ')' → logprob: -10.544445037841797
    9. '+' → logprob: -10.794445037841797
    10. ' :]' → logprob: -10.919445037841797

Token 44: ' !=' (ID: 1666)
  Prédit: ' =='
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' ==' → logprob: -0.5297172665596008
    2. '==' → logprob: -0.9047172665596008
    3. '+' → logprob: -6.404717445373535
    4. ' !=' → logprob: -6.654717445373535
    5. '=' → logprob: -6.904717445373535
    6. '!=' → logprob: -6.904717445373535
    7. ' ' → logprob: -7.529717445373535
    8. '*' → logprob: -8.279717445373535
    9. '%' → logprob: -8.779717445373535
    10. '>' → logprob: -9.029717445373535

Token 45: ' ch' (ID: 549)
  Prédit: ' ch'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' ch' → logprob: -0.6346203684806824
    2. 'ch' → logprob: -0.7596203684806824
    3. ''' → logprob: -7.009620189666748
    4. ' ' → logprob: -7.384620189666748
    5. ''ch' → logprob: -8.134620666503906
    6. ' '' → logprob: -9.509620666503906
    7. '	ch' → logprob: -10.259620666503906
    8. '[ch' → logprob: -10.947120666503906
    9. '"' → logprob: -11.947120666503906
    10. '<|end|>' → logprob: -11.947120666503906

Token 46: '[len' (ID: 57582)
  Prédit: '[len'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '[len' → logprob: -0.14400170743465424
    2. '[' → logprob: -2.8940017223358154
    3. '[-' → logprob: -3.0190017223358154
    4. '][' → logprob: -4.519001483917236
    5. ']' → logprob: -4.894001483917236
    6. ' ' → logprob: -6.394001483917236
    7. '][-' → logprob: -6.394001483917236
    8. 'len' → logprob: -6.519001483917236
    9. '   ' → logprob: -6.644001483917236
    10. '[::-' → logprob: -6.894001483917236

Token 47: '(ch' (ID: 15574)
  Prédit: '(ch'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(ch' → logprob: -0.004559003747999668
    2. '-' → logprob: -5.87955904006958
    3. '(' → logprob: -6.62955904006958
    4. ' -' → logprob: -8.504558563232422
    5. '-ch' → logprob: -9.129558563232422
    6. 'ch' → logprob: -9.629558563232422
    7. ' ch' → logprob: -11.879558563232422
    8. '[ch' → logprob: -11.879558563232422
    9. '	ch' → logprob: -12.004558563232422
    10. '()-' → logprob: -12.129558563232422

Token 48: ')-' (ID: 14080)
  Prédit: '-'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '-' → logprob: -0.38671743869781494
    2. ' -' → logprob: -1.761717438697815
    3. ')' → logprob: -2.1367173194885254
    4. ')-' → logprob: -3.5117173194885254
    5. ']' → logprob: -8.386717796325684
    6. ']-' → logprob: -8.761717796325684
    7. ' ' → logprob: -8.761717796325684
    8. ' )' → logprob: -8.886717796325684
    9. ')-(' → logprob: -9.386717796325684
    10. '1' → logprob: -9.761717796325684

Token 49: '1' (ID: 16)
  Prédit: '1'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '1' → logprob: -0.14462310075759888
    2. 'idx' → logprob: -2.019623041152954
    3. ' idx' → logprob: -6.894623279571533
    4. ' ' → logprob: -7.394623279571533
    5. '(idx' → logprob: -8.394622802734375
    6. '(' → logprob: -10.394622802734375
    7. '	idx' → logprob: -11.019622802734375
    8. '-' → logprob: -11.394622802734375
    9. '[idx' → logprob: -11.519622802734375
    10. '   ' → logprob: -12.019622802734375

Token 50: '-' (ID: 12)
  Prédit: ' -'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' -' → logprob: -0.20142436027526855
    2. '-' → logprob: -1.7014243602752686
    3. ' idx' → logprob: -12.326424598693848
    4. ' ' → logprob: -12.701424598693848
    5. '[idx' → logprob: -13.576424598693848
    6. '	idx' → logprob: -14.451424598693848
    7. 'idx' → logprob: -14.576424598693848
    8. '-index' → logprob: -15.451424598693848
    9. '‌' → logprob: -15.451424598693848
    10. '   ' → logprob: -15.826424598693848

Token 51: 'idx' (ID: 13196)
  Prédit: 'idx'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'idx' → logprob: -0.0010435284348204732
    2. ' idx' → logprob: -6.876043319702148
    3. '	idx' → logprob: -12.001043319702148
    4. '[idx' → logprob: -13.376043319702148
    5. '(idx' → logprob: -13.626043319702148
    6. ' ' → logprob: -13.876043319702148
    7. '_idx' → logprob: -15.626043319702148
    8. '  ' → logprob: -15.626043319702148
    9. 'id' → logprob: -15.876043319702148
    10. ']' → logprob: -16.00104331970215

Token 52: ']:
' (ID: 22152)
  Prédit: '):'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '):' → logprob: -0.4888146221637726
    2. ']:' → logprob: -1.2388145923614502
    3. ':' → logprob: -2.36381459236145
    4. ']' → logprob: -6.863814830780029
    5. ']):' → logprob: -6.988814830780029
    6. ')' → logprob: -8.113814353942871
    7. ' ):' → logprob: -8.613814353942871
    8. '):
' → logprob: -9.488814353942871
    9. ' :' → logprob: -9.988814353942871
    10. '}:' → logprob: -10.238814353942871

Token 53: '       ' (ID: 309)
  Prédit: '       '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '       ' → logprob: -0.07505730539560318
    2. ':' → logprob: -2.8250572681427
    3. '   ' → logprob: -5.075057506561279
    4. '    ' → logprob: -6.075057506561279
    5. ':
' → logprob: -6.825057506561279
    6. ' :' → logprob: -6.825057506561279
    7. '+' → logprob: -7.075057506561279
    8. 'total' → logprob: -8.200057029724121
    9. ' total' → logprob: -8.825057029724121
    10. '      ' → logprob: -8.825057029724121

Token 54: ' total' (ID: 3609)
  Prédit: 'total'
  Correct (stricte): False
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'total' (adapté à ' total') → logprob: -0.5860492587089539
    2. ' total' → logprob: -1.8360493183135986
    3. '       ' → logprob: -2.2110493183135986
    4. '   ' → logprob: -2.4610493183135986
    5. 'break' → logprob: -3.0860493183135986
    6. ' break' → logprob: -3.5860493183135986
    7. '           ' → logprob: -4.7110490798950195
    8. ' ' → logprob: -5.7110490798950195
    9. '    ' → logprob: -6.7110490798950195
    10. '```' → logprob: -8.08604907989502

Token 55: ' =' (ID: 314)
  Prédit: ' +='
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' +=' → logprob: -0.16075757145881653
    2. '+=' → logprob: -1.9107575416564941
    3. '+' → logprob: -7.660757541656494
    4. ' =' → logprob: -10.410758018493652
    5. '=' → logprob: -10.535758018493652
    6. ' +' → logprob: -13.285758018493652
    7. ' ' → logprob: -13.660758018493652
    8. '   ' → logprob: -14.410758018493652
    9. '    ' → logprob: -14.660758018493652
    10. '+='' → logprob: -14.660758018493652

Token 56: ' total' (ID: 3609)
  Prédit: 'total'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'total' → logprob: -0.812870442867279
    2. '1' → logprob: -1.3128705024719238
    3. ' total' → logprob: -1.4378705024719238
    4. ' ' → logprob: -3.062870502471924
    5. '+' → logprob: -5.937870502471924
    6. '0' → logprob: -9.062870025634766
    7. '	total' → logprob: -9.500370025634766
    8. '-' → logprob: -9.562870025634766
    9. 't' → logprob: -10.000370025634766
    10. '10' → logprob: -10.625370025634766

Token 57: ' +' (ID: 659)
  Prédit: '+'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '+' → logprob: -0.054903723299503326
    2. ' +' → logprob: -2.929903745651245
    3. '1' → logprob: -11.554903984069824
    4. ' plus' → logprob: -12.179903984069824
    5. '+=' → logprob: -13.054903984069824
    6. ' ' → logprob: -13.179903984069824
    7. 'plus' → logprob: -14.179903984069824
    8. ' +=' → logprob: -14.429903984069824
    9. '2' → logprob: -15.554903984069824
    10. '+
' → logprob: -15.679903984069824

Token 58: ' ' (ID: 220)
  Prédit: '1'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '1' → logprob: -0.0010444821091368794
    2. ' ' → logprob: -6.876044273376465
    3. 'ch' → logprob: -12.501044273376465
    4. '   ' → logprob: -13.126044273376465
    5. 'int' → logprob: -13.688544273376465
    6. '2' → logprob: -13.688544273376465
    7. '  ' → logprob: -13.876044273376465
    8. '-' → logprob: -14.251044273376465
    9. '0' → logprob: -14.751044273376465
    10. '10' → logprob: -15.813544273376465

Token 59: '1' (ID: 16)
  Prédit: '1'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '1' → logprob: -0.0001029471677611582
    2. ' ' → logprob: -9.250102996826172
    3. 'ch' → logprob: -13.375102996826172
    4. '   ' → logprob: -13.750102996826172
    5. '0' → logprob: -14.000102996826172
    6. '2' → logprob: -14.125102996826172
    7. '-' → logprob: -14.187602996826172
    8. '  ' → logprob: -14.437602996826172
    9. 'int' → logprob: -15.562602996826172
    10. '100' → logprob: -15.812602996826172

Token 60: '  ' (ID: 256)
  Prédit: '
'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '
' → logprob: -0.04852479696273804
    2. '<|end|>' → logprob: -3.173524856567383
    3. '\n' → logprob: -6.173524856567383
    4. '#' → logprob: -7.673524856567383
    5. '  
' → logprob: -7.798524856567383
    6. 'print' → logprob: -7.798524856567383
    7. ')' → logprob: -7.798524856567383
    8. ' ' → logprob: -8.048524856567383
    9. '?' → logprob: -8.173524856567383
    10. '```' → logprob: -8.423524856567383

Token 61: ' #' (ID: 1069)
  Prédit: '
'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '
' → logprob: -0.07333490997552872
    2. '<|end|>' → logprob: -2.6983349323272705
    3. '\n' → logprob: -7.073334693908691
    4. '#' (adapté à ' #') → logprob: -7.198334693908691
    5. 'print' → logprob: -7.573334693908691
    6. ')' → logprob: -8.198334693908691
    7. '```' → logprob: -8.323334693908691
    8. '
' → logprob: -8.323334693908691
    9. '<|end|>' → logprob: -8.948334693908691
    10. ' ' → logprob: -9.198334693908691

Token 62: ' incr' (ID: 52395)
  Prédit: ''
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False

Token 63: 'ément' (ID: 17645)
  Prédit: 'ément'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'ément' → logprob: -0.1437709778547287
    2. 'é' → logprob: -2.018770933151245
    3. 'ement' → logprob: -7.143771171569824
    4. 'éments' → logprob: -8.393771171569824
    5. 'ém' → logprob: -9.768771171569824
    6. 'éer' → logprob: -12.393771171569824
    7. 'éter' → logprob: -12.518771171569824
    8. 'è' → logprob: -12.893771171569824
    9. 'em' → logprob: -13.018771171569824
    10. 'ép' → logprob: -13.768771171569824

Token 64: 'ation' (ID: 387)
  Prédit: ''
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False

Token 65: ' (' (ID: 350)
  Prédit: ''
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False

Token 66: 'ça' (ID: 4041)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ')' → logprob: -0.04955529421567917
    2. ' )' → logprob: -3.0495553016662598
    3. ' ' → logprob: -7.54955530166626
    4. '<|end|>' → logprob: -9.424554824829102
    5. 'total' → logprob: -9.549554824829102
    6. ' total' → logprob: -9.924554824829102
    7. ' ' → logprob: -10.299554824829102
    8. ' du' → logprob: -10.674554824829102
    9. '`)' → logprob: -10.674554824829102
    10. ')
' → logprob: -10.924554824829102

Token 67: ' marche' (ID: 58191)
  Prédit: ' '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' ' → logprob: -1.467958688735962
    2. ' veut' → logprob: -1.467958688735962
    3. ')' → logprob: -1.592958688735962
    4. ' )' → logprob: -2.467958688735962
    5. ' continue' → logprob: -2.842958688735962
    6. ' ne' → logprob: -3.342958688735962
    7. ' ' → logprob: -3.717958688735962
    8. ' fait' → logprob: -3.842958688735962
    9. ' n' → logprob: -4.217958450317383
    10. ' semble' → logprob: -4.342958450317383

Token 68: ' ?' (ID: 1423)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ')' → logprob: -0.002361021237447858
    2. '<|end|>' → logprob: -6.627360820770264
    3. ')
' → logprob: -7.252360820770264
    4. ' )' → logprob: -8.752361297607422
    5. '
' → logprob: -10.127361297607422
    6. '\n' → logprob: -10.502361297607422
    7. '<|end|>' → logprob: -11.002361297607422
    8. ' ' → logprob: -11.377361297607422
    9. ')

' → logprob: -11.502361297607422
    10. '#' → logprob: -11.627361297607422

Token 69: ')
' (ID: 446)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')' → logprob: -0.0014380889479070902
    2. ')
' → logprob: -6.751438140869141
    3. '<|end|>' → logprob: -9.00143814086914
    4. ' )' → logprob: -9.87643814086914
    5. '
' → logprob: -11.00143814086914
    6. '?)' → logprob: -11.12643814086914
    7. ')

' → logprob: -11.12643814086914
    8. '?' → logprob: -11.37643814086914
    9. '#' → logprob: -12.25143814086914
    10. '```' → logprob: -12.50143814086914

Token 70: '#' (ID: 2)
  Prédit: ''
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False

Token 71: ' le' (ID: 505)
  Prédit: ''
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False

Token 72: ' résultat' (ID: 62556)
  Prédit: 'print'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'print' → logprob: -0.5956344604492188
    2. ' print' → logprob: -1.3456344604492188
    3. 'if' → logprob: -2.3456344604492188
    4. ' if' → logprob: -2.8456344604492188
    5. '#' → logprob: -4.220634460449219
    6. 'r' → logprob: -5.595634460449219
    7. 's' → logprob: -5.720634460449219
    8. ' total' → logprob: -5.970634460449219
    9. ' else' → logprob: -6.470634460449219
    10. ' #' → logprob: -6.595634460449219

Token 73: ' c' (ID: 274)
  Prédit: 'print'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'print' → logprob: -0.011434932239353657
    2. '
' → logprob: -4.761435031890869
    3. ' print' → logprob: -6.136435031890869
    4. '<|end|>' → logprob: -7.886435031890869
    5. '  
' → logprob: -9.636434555053711
    6. 'if' → logprob: -10.386434555053711
    7. ')' → logprob: -10.511434555053711
    8. ' 
' → logprob: -10.511434555053711
    9. '```' → logprob: -10.761434555053711
    10. '\n' → logprob: -10.761434555053711

Token 74: ''est' (ID: 6616)
  Prédit: 'print'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'print' → logprob: -0.7525597810745239
    2. 'st' → logprob: -1.502559781074524
    3. 'est' → logprob: -1.502559781074524
    4. ''est' → logprob: -3.7525596618652344
    5. 's' → logprob: -4.002559661865234
    6. '#' → logprob: -4.377559661865234
    7. 'n' → logprob: -4.627559661865234
    8. ' print' → logprob: -5.252559661865234
    9. '#print' → logprob: -6.502559661865234
    10. 't' → logprob: -6.877559661865234

Token 75: ' ce' (ID: 2357)
  Prédit: ' total'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' total' → logprob: -0.6940691471099854
    2. 'total' → logprob: -0.6940691471099854
    3. ' ' → logprob: -8.694068908691406
    4. ' ' → logprob: -8.819068908691406
    5. '(total' → logprob: -9.194068908691406
    6. '"' → logprob: -9.194068908691406
    7. 'print' → logprob: -9.194068908691406
    8. ' 
' → logprob: -9.944068908691406
    9. ''' → logprob: -10.069068908691406
    10. '	total' → logprob: -10.069068908691406

Token 76: ' qu' (ID: 474)
  Prédit: ' total'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' total' → logprob: -0.8990854024887085
    2. 'total' → logprob: -1.1490854024887085
    3. ' que' → logprob: -2.399085521697998
    4. 'l' → logprob: -3.274085521697998
    5. ' qu' → logprob: -3.524085521697998
    6. ' ' → logprob: -3.899085521697998
    7. 't' → logprob: -4.024085521697998
    8. 'u' → logprob: -4.274085521697998
    9. 'que' → logprob: -4.774085521697998
    10. 's' → logprob: -4.899085521697998

Token 77: ''on' (ID: 25812)
  Prédit: ' qu'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' qu' → logprob: -1.1810195446014404
    2. 'u' → logprob: -1.3060195446014404
    3. '#' → logprob: -2.3060195446014404
    4. ''' → logprob: -2.5560195446014404
    5. 'qu' → logprob: -2.6810195446014404
    6. ' que' → logprob: -2.9310195446014404
    7. 'e' → logprob: -3.6810195446014404
    8. 'que' → logprob: -3.8060195446014404
    9. ' ' → logprob: -4.1810197830200195
    10. ' #' → logprob: -4.3060197830200195

Token 78: ' voulait' (ID: 117903)
  Prédit: ' faut'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' faut' → logprob: -0.5572758913040161
    2. 'f' → logprob: -1.3072758913040161
    3. 'print' → logprob: -2.6822757720947266
    4. ' faudra' → logprob: -3.8072757720947266
    5. ' faudrait' → logprob: -4.432275772094727
    6. ' print' → logprob: -4.932275772094727
    7. ' reste' → logprob: -5.057275772094727
    8. ' veut' → logprob: -5.182275772094727
    9. 'reste' → logprob: -5.432275772094727
    10. '#' → logprob: -5.682275772094727

Token 79: '
' (ID: 198)
  Prédit: 'print'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'print' → logprob: -0.0009328982559964061
    2. ' print' → logprob: -7.875932693481445
    3. '
' → logprob: -8.250932693481445
    4. ')' → logprob: -9.250932693481445
    5. '<|end|>' → logprob: -9.625932693481445
    6. '(print' → logprob: -10.375932693481445
    7. '```' → logprob: -10.625932693481445
    8. '\n' → logprob: -10.875932693481445
    9. '#print' → logprob: -11.750932693481445
    10. '#' → logprob: -11.875932693481445

Token 80: 'print' (ID: 1598)
  Prédit: 'print'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'print' → logprob: -0.00019424250058364123
    2. ')' → logprob: -9.000194549560547
    3. ' print' → logprob: -10.000194549560547
    4. '```' → logprob: -12.375194549560547
    5. '<|end|>' → logprob: -13.000194549560547
    6. 'pr' → logprob: -13.000194549560547
    7. '(print' → logprob: -13.125194549560547
    8. 'p' → logprob: -13.125194549560547
    9. 'return' → logprob: -13.125194549560547
    10. 'prin' → logprob: -13.125194549560547

Token 81: '(total' (ID: 39744)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(' → logprob: -0.00864376686513424
    2. '(total' → logprob: -4.758643627166748
    3. 'total' → logprob: -11.883644104003906
    4. '(t' → logprob: -12.258644104003906
    5. '(
' → logprob: -12.383644104003906
    6. '('' → logprob: -12.758644104003906
    7. '(ch' → logprob: -12.883644104003906
    8. '()' → logprob: -13.008644104003906
    9. '("("' → logprob: -13.258644104003906
    10. '(

' → logprob: -14.008644104003906

Token 82: ')' (ID: 8)
  Prédit: ')'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')' → logprob: -1.2664456789934775e-06
    2. '))' → logprob: -14.375000953674316
    3. ' )' → logprob: -14.375000953674316
    4. ')`' → logprob: -17.375001907348633
    5. ')
' → logprob: -17.875001907348633
    6. ')}' → logprob: -18.000001907348633
    7. '')' → logprob: -18.875001907348633
    8. ')**' → logprob: -19.000001907348633
    9. ')#' → logprob: -19.250001907348633
    10. ')))' → logprob: -19.500001907348633


RÉSUMÉ:
--------------------------------------------------------------------------------
Total des tokens analysés: 80
Tokens correctement prédits (1ère position, stricte): 19
Tokens correctement prédits (1ère position, avec adaptation): 20
Tokens correctement prédits (top 10): 45
Précision stricte (1ère position): 23.75%
Précision adaptée (1ère position): 25.00%
Précision (top 10): 56.25%
================================================================================
