================================================================================
ANALYSE DE PRÉDICTION TOKEN PAR TOKEN (BATCH API)
Date: 2025-06-04 19:21:47
Modèle de tokenisation: gpt-4o-mini
================================================================================

SCRIPT ANALYSÉ:
--------------------------------------------------------------------------------
import sys
import math
import random
from collections import defaultdict, deque
from bisect import bisect_left, bisect_right
from heapq import heappush, heappop

# hum, j'augmente la récursion mais j'suis pas sûr que c'est utile ici
sys.setrecursionlimit(101000)
input = sys.stdin.readline

MOD = 10 ** 9 + 7
INF = float('inf')  # bon, on pourrait faire 1e10 aussi

sqrt = math.sqrt

# Fonctions pour extraire rapidement des entrées, je me rappelle jamais de toutes...
def LI(): return [int(x) for x in input().split()]
def LF(): return [float(x) for x in input().split()]
def LI_(): return [int(x)-1 for x in input().split()]
def II(): return int(input())
def IF(): return float(input())
def LS(): return [list(x) for x in input().split()]
def S(): return list(input().rstrip())
def IR(n): return [II() for _ in range(n)]
def LIR(n): return [LI() for _ in range(n)]
def FR(n): return [IF() for _ in range(n)]
def LFR(n): return [LF() for _ in range(n)]
def LIR_(n): return [LI_() for _ in range(n)]
def SR(n): return [S() for _ in range(n)]
def LSR(n): return [LS() for _ in range(n)]


def solve():
    n = II()
    a = list(map(lambda x: int(x)-1, S()))  # On enlève 1 à chaque chiffre, pas sûr si c'est utile...
    answer = 1
    if not 1 in a:  # si aucun 1 dedans, je double la réponse ?
        answer = answer * 2
        for j in range(n):
            a[j] //= 2

    res = 0
    # Un bout avec Lucas, je comprends pas tous les bits mais bon ça marche
    for i in range(n):
        # Pour chaque bit où c'est actif ?
        if (n-1) & i == i:
            # xor sur le plus faible bit
            res ^= (a[i] & 1)

    print(res * answer)
    return

if __name__ == "__main__":
    solve()  # Let's go!
--------------------------------------------------------------------------------

RÉSULTATS D'ANALYSE TOKEN PAR TOKEN:
--------------------------------------------------------------------------------
Token 0: 'import' (ID: 561)
  → Token d'amorce (pas de prédiction)

Token 1: ' sys' (ID: 12228)
  → Token d'amorce (pas de prédiction)

Token 2: '
' (ID: 198)
  → Token d'amorce (pas de prédiction)

Token 3: 'import' (ID: 561)
  Prédit: '\n'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '\n' → logprob: -0.3199642300605774
    2. '.' → logprob: -1.6949641704559326
    3. '<|end|>' → logprob: -2.9449641704559326
    4. '\' → logprob: -4.444964408874512
    5. 'newline' → logprob: -5.069964408874512
    6. 'import' → logprob: -5.069964408874512
    7. '' → logprob: -5.819964408874512
    8. '<|end|>' → logprob: -5.944964408874512
    9. '\r' → logprob: -6.069964408874512
    10. '
' → logprob: -6.319964408874512

Token 4: ' math' (ID: 13324)
  Prédit: ' os'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' os' → logprob: -0.0004311460361350328
    2. 'os' → logprob: -7.750431060791016
    3. ' re' → logprob: -15.875431060791016
    4. '"os' → logprob: -16.250431060791016
    5. '_os' → logprob: -16.250431060791016
    6. ' math' → logprob: -16.500431060791016
    7. ' json' → logprob: -17.000431060791016
    8. '	os' → logprob: -17.625431060791016
    9. ' argparse' → logprob: -18.750431060791016
    10. ' o' → logprob: -19.000431060791016

Token 5: '
' (ID: 198)
  Prédit: '.'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '.' → logprob: -0.04749391973018646
    2. '\n' → logprob: -4.172493934631348
    3. '\' → logprob: -4.547493934631348
    4. 'import' → logprob: -4.672493934631348
    5. '
' → logprob: -5.672493934631348
    6. '```' → logprob: -6.297493934631348
    7. '

' → logprob: -6.672493934631348
    8. ',' → logprob: -6.922493934631348
    9. '<|end|>' → logprob: -6.922493934631348
    10. '.
' → logprob: -7.547493934631348

Token 6: 'import' (ID: 561)
  Prédit: '.'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '.' → logprob: -0.6819151639938354
    2. 'import' → logprob: -2.181915283203125
    3. '\n' → logprob: -2.306915283203125
    4. '
' → logprob: -2.556915283203125
    5. '<|end|>' → logprob: -2.556915283203125
    6. '```' → logprob: -3.431915283203125
    7. '

' → logprob: -3.681915283203125
    8. '\' → logprob: -3.806915283203125
    9. ',' → logprob: -4.181915283203125
    10. '<|end|>' → logprob: -4.806915283203125

Token 7: ' random' (ID: 7526)
  Prédit: 'os'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'os' → logprob: -0.26512405276298523
    2. ' os' → logprob: -1.5151240825653076
    3. 'random' → logprob: -4.7651238441467285
    4. ' random' → logprob: -5.7651238441467285
    5. 're' → logprob: -8.265124320983887
    6. ' numpy' → logprob: -8.265124320983887
    7. 'numpy' → logprob: -8.640124320983887
    8. ' re' → logprob: -8.640124320983887
    9. 'collections' → logprob: -9.140124320983887
    10. 'time' → logprob: -9.515124320983887

Token 8: '
' (ID: 198)
  Prédit: 'import'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'import' → logprob: -1.2342878580093384
    2. '.' → logprob: -1.6092878580093384
    3. '\n' → logprob: -1.9842878580093384
    4. '<|end|>' → logprob: -2.234287738800049
    5. '
' → logprob: -2.359287738800049
    6. '```' → logprob: -2.484287738800049
    7. '

' → logprob: -3.484287738800049
    8. '\' → logprob: -3.609287738800049
    9. ',' → logprob: -4.609287738800049
    10. '<|end|>' → logprob: -4.609287738800049

Token 9: 'from' (ID: 2845)
  Prédit: 'import'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'import' → logprob: -0.7044833898544312
    2. '\n' → logprob: -1.4544833898544312
    3. '```' → logprob: -2.0794835090637207
    4. '
' → logprob: -2.9544835090637207
    5. '\' → logprob: -3.2044835090637207
    6. '

' → logprob: -3.8294835090637207
    7. '<|end|>' → logprob: -4.704483509063721
    8. ',' → logprob: -5.329483509063721
    9. 'def' → logprob: -5.454483509063721
    10. '.' → logprob: -5.579483509063721

Token 10: ' collections' (ID: 22690)
  Prédit: ' collections'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' collections' → logprob: -0.3304117023944855
    2. 'collections' → logprob: -1.955411672592163
    3. ' datetime' → logprob: -2.955411672592163
    4. ' os' → logprob: -3.955411672592163
    5. ' numpy' → logprob: -3.955411672592163
    6. ' itertools' → logprob: -4.080411911010742
    7. ' typing' → logprob: -4.830411911010742
    8. 'datetime' → logprob: -4.955411911010742
    9. 'os' → logprob: -5.330411911010742
    10. 'numpy' → logprob: -5.955411911010742

Token 11: ' import' (ID: 1588)
  Prédit: ' import'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' import' → logprob: -0.3133932948112488
    2. 'import' → logprob: -1.3133933544158936
    3. '.' → logprob: -10.188393592834473
    4. '```' → logprob: -10.313393592834473
    5. '<|end|>' → logprob: -11.188393592834473
    6. ' defaultdict' → logprob: -11.688393592834473
    7. '	import' → logprob: -11.938393592834473
    8. ' ```' → logprob: -11.938393592834473
    9. ' ' → logprob: -12.688393592834473
    10. ' ' → logprob: -12.813393592834473

Token 12: ' defaultdict' (ID: 107098)
  Prédit: ' defaultdict'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' defaultdict' → logprob: -0.34223678708076477
    2. ' deque' → logprob: -1.4672367572784424
    3. ' abc' → logprob: -3.2172367572784424
    4. 'deque' → logprob: -4.2172369956970215
    5. ' Counter' → logprob: -5.8422369956970215
    6. 'abc' → logprob: -7.3422369956970215
    7. ' named' → logprob: -7.5922369956970215
    8. ' import' → logprob: -8.967236518859863
    9. 'Counter' → logprob: -9.592236518859863
    10. ' Ordered' → logprob: -9.592236518859863

Token 13: ',' (ID: 11)
  Prédit: 'import'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'import' → logprob: -0.832204282283783
    2. '

' → logprob: -1.2072043418884277
    3. '
' → logprob: -1.5822043418884277
    4. '\n' → logprob: -3.3322043418884277
    5. ',' → logprob: -4.457204341888428
    6. '```' → logprob: -5.582204341888428
    7. ' 

' → logprob: -5.832204341888428
    8. '\' → logprob: -6.707204341888428
    9. '' → logprob: -6.832204341888428
    10. '<|end|>' → logprob: -7.207204341888428

Token 14: ' deque' (ID: 90347)
  Prédit: 'deque'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'deque' → logprob: -0.6576852798461914
    2. ' deque' → logprob: -1.0326852798461914
    3. 'Counter' → logprob: -2.4076852798461914
    4. ' Counter' → logprob: -3.4076852798461914
    5. 'Ordered' → logprob: -6.782685279846191
    6. 'named' → logprob: -7.282685279846191
    7. ' named' → logprob: -7.782685279846191
    8. ' Ordered' → logprob: -7.907685279846191
    9. 'Deque' → logprob: -9.032685279846191
    10. 'de' → logprob: -10.907685279846191

Token 15: '
' (ID: 198)
  Prédit: '
'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '
' → logprob: -0.9907222390174866
    2. '

' → logprob: -1.2407221794128418
    3. 'import' → logprob: -1.9907221794128418
    4. '\n' → logprob: -2.240722179412842
    5. '```' → logprob: -2.990722179412842
    6. '\' → logprob: -4.365722179412842
    7. '' → logprob: -4.615722179412842
    8. ',' → logprob: -5.490722179412842
    9. ' 

' → logprob: -5.615722179412842
    10. '
' → logprob: -5.865722179412842

Token 16: 'from' (ID: 2845)
  Prédit: '#'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '#' → logprob: -0.7661408185958862
    2. '
' → logprob: -1.7661408185958862
    3. 'import' → logprob: -1.8911408185958862
    4. '\n' → logprob: -2.516140937805176
    5. '```' → logprob: -3.266140937805176
    6. '

' → logprob: -3.891140937805176
    7. '' → logprob: -4.141140937805176
    8. '\' → logprob: -4.141140937805176
    9. 'def' → logprob: -4.391140937805176
    10. ',' → logprob: -5.016140937805176

Token 17: ' bis' (ID: 7204)
  Prédit: ' heap'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' heap' → logprob: -0.6343522071838379
    2. 'heap' → logprob: -1.134352207183838
    3. ' itertools' → logprob: -2.134352207183838
    4. ' queue' → logprob: -4.634352207183838
    5. ' typing' → logprob: -4.759352207183838
    6. 'queue' → logprob: -5.509352207183838
    7. 'typing' → logprob: -5.634352207183838
    8. ' threading' → logprob: -6.134352207183838
    9. 'it' → logprob: -7.009352207183838
    10. ' functools' → logprob: -8.38435173034668

Token 18: 'ect' (ID: 534)
  Prédit: 'ect'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'ect' → logprob: -6.153795766294934e-06
    2. 'ected' → logprob: -13.000005722045898
    3. 'e' → logprob: -13.625005722045898
    4. 'ector' → logprob: -14.000005722045898
    5. 't' → logprob: -14.500005722045898
    6. 'ectl' → logprob: -15.000005722045898
    7. 'ec' → logprob: -15.250005722045898
    8. '```' → logprob: -15.250005722045898
    9. 'import' → logprob: -16.2500057220459
    10. 'ecta' → logprob: -16.3750057220459

Token 19: ' import' (ID: 1588)
  Prédit: ' import'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' import' → logprob: -0.02988586015999317
    2. 'import' → logprob: -3.529885768890381
    3. '_import' → logprob: -9.779886245727539
    4. ' ' → logprob: -10.154886245727539
    5. '	import' → logprob: -10.654886245727539
    6. '_' → logprob: -12.279886245727539
    7. ' ' → logprob: -13.029886245727539
    8. '.' → logprob: -13.654886245727539
    9. ' importar' → logprob: -13.654886245727539
    10. '<|end|>' → logprob: -13.654886245727539

Token 20: ' bis' (ID: 7204)
  Prédit: ' bis'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' bis' → logprob: -0.052595701068639755
    2. ' ins' → logprob: -3.552595615386963
    3. 'bis' → logprob: -4.177595615386963
    4. 'ins' → logprob: -4.927595615386963
    5. '_ins' → logprob: -12.927596092224121
    6. '```' → logprob: -12.927596092224121
    7. '.ins' → logprob: -14.052596092224121
    8. ' ' → logprob: -14.677596092224121
    9. ' b' → logprob: -15.552596092224121
    10. ''ins' → logprob: -16.052595138549805

Token 21: 'ect' (ID: 534)
  Prédit: 'ect'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'ect' → logprob: -0.00019185843120794743
    2. 'e' → logprob: -8.625191688537598
    3. '```' → logprob: -12.750191688537598
    4. 'ectl' → logprob: -13.500191688537598
    5. '
' → logprob: -14.250191688537598
    6. 'ected' → logprob: -14.375191688537598
    7. 'ec' → logprob: -14.375191688537598
    8. '`' → logprob: -14.500191688537598
    9. '

' → logprob: -14.750191688537598
    10. 'sect' → logprob: -14.750191688537598

Token 22: '_left' (ID: 22189)
  Prédit: '_left'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_left' → logprob: -0.6529586911201477
    2. '_right' → logprob: -1.027958631515503
    3. '_' → logprob: -2.152958631515503
    4. '<|end|>' → logprob: -6.902958869934082
    5. 'import' → logprob: -7.527958869934082
    6. '.ins' → logprob: -7.902958869934082
    7. ' ' → logprob: -7.902958869934082
    8. '_ins' → logprob: -7.902958869934082
    9. 'Right' → logprob: -7.902958869934082
    10. 'ing' → logprob: -7.902958869934082

Token 23: ',' (ID: 11)
  Prédit: '

'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '

' → logprob: -0.3399227261543274
    2. '
' → logprob: -1.8399226665496826
    3. 'import' → logprob: -2.2149226665496826
    4. ',' → logprob: -4.839922904968262
    5. ' 

' → logprob: -5.214922904968262
    6. '\n' → logprob: -5.964922904968262
    7. '```' → logprob: -7.089922904968262
    8. '' → logprob: -7.214922904968262
    9. '  

' → logprob: -7.839922904968262
    10. '


' → logprob: -7.839922904968262

Token 24: ' bis' (ID: 7204)
  Prédit: ' bis'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' bis' → logprob: -0.20754782855510712
    2. 'bis' → logprob: -1.7075477838516235
    3. 'ins' → logprob: -5.457547664642334
    4. ' ins' → logprob: -6.332547664642334
    5. '```' → logprob: -10.207548141479492
    6. 'import' → logprob: -11.332548141479492
    7. 'b' → logprob: -11.332548141479492
    8. ' ' → logprob: -13.582548141479492
    9. '	b' → logprob: -13.832548141479492
    10. 'he' → logprob: -14.020048141479492

Token 25: 'ect' (ID: 534)
  Prédit: 'ect'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'ect' → logprob: -0.2071775496006012
    2. 'sect' → logprob: -1.8321775197982788
    3. 'ct' → logprob: -3.8321776390075684
    4. 's' → logprob: -5.707177639007568
    5. '```' → logprob: -6.582177639007568
    6. 'n' → logprob: -9.08217716217041
    7. 'ec' → logprob: -9.08217716217041
    8. 'e' → logprob: -9.20717716217041
    9. 'se' → logprob: -9.95717716217041
    10. 'с' → logprob: -10.58217716217041

Token 26: '_right' (ID: 24402)
  Prédit: '_right'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_right' → logprob: -0.019909992814064026
    2. 'right' → logprob: -4.269909858703613
    3. 'ight' → logprob: -5.894909858703613
    4. '<|end|>' → logprob: -6.019909858703613
    5. 'Right' → logprob: -9.519909858703613
    6. ')' → logprob: -9.519909858703613
    7. '_' → logprob: -9.769909858703613
    8. '_RIGHT' → logprob: -9.769909858703613
    9. '```' → logprob: -9.894909858703613
    10. 'ght' → logprob: -10.144909858703613

Token 27: '
' (ID: 198)
  Prédit: '
'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '
' → logprob: -0.944088339805603
    2. '\n' → logprob: -1.194088339805603
    3. '```' → logprob: -1.819088339805603
    4. '

' → logprob: -2.6940884590148926
    5. '<|end|>' → logprob: -3.4440884590148926
    6. 'import' → logprob: -3.9440884590148926
    7. '' → logprob: -4.694088459014893
    8. '#' → logprob: -5.319088459014893
    9. '\' → logprob: -5.319088459014893
    10. '`' → logprob: -6.319088459014893

Token 28: 'from' (ID: 2845)
  Prédit: '

'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '

' → logprob: -0.06904010474681854
    2. 'import' → logprob: -3.694040060043335
    3. '
' → logprob: -3.819040060043335
    4. '```' → logprob: -4.069040298461914
    5. '\n' → logprob: -6.944040298461914
    6. '<|end|>' → logprob: -7.819040298461914
    7. '``' → logprob: -7.944040298461914
    8. ' 

' → logprob: -8.194040298461914
    9. ',' → logprob: -8.944040298461914
    10. '\' → logprob: -8.944040298461914

Token 29: ' heap' (ID: 37237)
  Prédit: ' heap'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' heap' → logprob: -0.5061420798301697
    2. ' itertools' → logprob: -1.5061421394348145
    3. 'heap' → logprob: -1.7561421394348145
    4. ' functools' → logprob: -6.8811421394348145
    5. ' typing' → logprob: -7.6311421394348145
    6. 'it' → logprob: -7.8811421394348145
    7. 'typing' → logprob: -8.381141662597656
    8. '_heap' → logprob: -8.381141662597656
    9. 'operator' → logprob: -9.131141662597656
    10. ' operator' → logprob: -9.506141662597656

Token 30: 'q' (ID: 80)
  Prédit: 'q'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'q' → logprob: -5.512236498361744e-07
    2. 'queue' → logprob: -14.875000953674316
    3. 'import' → logprob: -16.5
    4. ' queue' → logprob: -18.625
    5. 'que' → logprob: -20.375
    6. 's' → logprob: -20.375
    7. '```' → logprob: -20.375
    8. 'i' → logprob: -20.875
    9. '_queue' → logprob: -20.875
    10. 'ify' → logprob: -21.0

Token 31: ' import' (ID: 1588)
  Prédit: ' import'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' import' → logprob: -0.010126353241503239
    2. 'import' → logprob: -4.63512659072876
    3. ' ' → logprob: -8.010126113891602
    4. '<|end|>' → logprob: -10.635126113891602
    5. '	import' → logprob: -12.385126113891602
    6. '_import' → logprob: -12.635126113891602
    7. ' ```' → logprob: -13.635126113891602
    8. ' ' → logprob: -14.010126113891602
    9. ' ​' → logprob: -14.260126113891602
    10. ' ‌' → logprob: -14.760126113891602

Token 32: ' he' (ID: 501)
  Prédit: ' he'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' he' → logprob: -0.16485390067100525
    2. 'he' → logprob: -1.9148539304733276
    3. 'heap' → logprob: -5.789854049682617
    4. ' heap' → logprob: -6.664854049682617
    5. ' ' → logprob: -8.789854049682617
    6. '```' → logprob: -9.539854049682617
    7. ' n' → logprob: -10.539854049682617
    8. '.he' → logprob: -11.789854049682617
    9. ' hea' → logprob: -12.414854049682617
    10. 'h' → logprob: -12.414854049682617

Token 33: 'app' (ID: 903)
  Prédit: 'app'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'app' → logprob: -0.12696558237075806
    2. 'ap' → logprob: -2.1269655227661133
    3. 'a' → logprob: -10.251965522766113
    4. 'ап' → logprob: -14.126965522766113
    5. 'aq' → logprob: -14.376965522766113
    6. '```' → logprob: -15.376965522766113
    7. '[' → logprob: -16.00196647644043
    8. 'apl' → logprob: -16.12696647644043
    9. 'q' → logprob: -16.37696647644043
    10. '   ' → logprob: -17.00196647644043

Token 34: 'ush' (ID: 1776)
  Prédit: 'ush'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'ush' → logprob: -0.10020806640386581
    2. 'op' → logprob: -2.350208044052124
    3. 'o' → logprob: -14.475208282470703
    4. 'us' → logprob: -15.475208282470703
    5. '```' → logprob: -15.850208282470703
    6. 'osh' → logprob: -15.975208282470703
    7. 'opleft' → logprob: -15.975208282470703
    8. '   ' → logprob: -16.475208282470703
    9. '

' → logprob: -16.725208282470703
    10. '[' → logprob: -16.975208282470703

Token 35: ',' (ID: 11)
  Prédit: ','
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ',' → logprob: -0.012525895610451698
    2. '<|end|>' → logprob: -5.387526035308838
    3. 'he' → logprob: -5.637526035308838
    4. ' ' → logprob: -6.262526035308838
    5. ' he' → logprob: -6.762526035308838
    6. ' ,' → logprob: -6.887526035308838
    7. 'import' → logprob: -9.13752555847168
    8. '(' → logprob: -10.88752555847168
    9. '<|end|>' → logprob: -10.88752555847168
    10. ' and' → logprob: -11.13752555847168

Token 36: ' he' (ID: 501)
  Prédit: ' he'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' he' → logprob: -0.08913467079401016
    2. 'he' → logprob: -2.464134693145752
    3. 'heap' → logprob: -8.839134216308594
    4. ' heap' → logprob: -10.089134216308594
    5. ' ' → logprob: -12.464134216308594
    6. '```' → logprob: -13.464134216308594
    7. '.he' → logprob: -13.714134216308594
    8. ' heaps' → logprob: -14.839134216308594
    9. '_he' → logprob: -15.089134216308594
    10. 'hep' → logprob: -15.464134216308594

Token 37: 'app' (ID: 903)
  Prédit: 'app'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'app' → logprob: -0.0031806828919798136
    2. 'ap' → logprob: -5.753180503845215
    3. 'a' → logprob: -12.753180503845215
    4. 'pp' → logprob: -17.87818145751953
    5. 'appen' → logprob: -17.87818145751953
    6. 'q' → logprob: -18.50318145751953
    7. '	app' → logprob: -19.25318145751953
    8. ' app' → logprob: -19.50318145751953
    9. 'op' → logprob: -19.62818145751953
    10. '_app' → logprob: -19.75318145751953

Token 38: 'op' (ID: 467)
  Prédit: 'op'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'op' → logprob: -0.023252815008163452
    2. 'ush' → logprob: -3.7732527256011963
    3. 'o' → logprob: -11.898252487182617
    4. '   ' → logprob: -16.148252487182617
    5. '```' → logprob: -16.148252487182617
    6. 'opleft' → logprob: -16.648252487182617
    7. 'оп' → logprob: -17.023252487182617
    8. 'opp' → logprob: -17.148252487182617
    9. 'us' → logprob: -17.523252487182617
    10. 'p' → logprob: -17.648252487182617

Token 39: '

' (ID: 279)
  Prédit: '
'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '
' → logprob: -0.663357675075531
    2. '

' → logprob: -0.788357675075531
    3. '\n' → logprob: -4.413357734680176
    4. '' → logprob: -5.413357734680176
    5. '```' → logprob: -5.663357734680176
    6. '\' → logprob: -5.913357734680176
    7. 'import' → logprob: -6.413357734680176
    8. '#' → logprob: -6.538357734680176
    9. 'def' → logprob: -6.788357734680176
    10. '
' → logprob: -7.163357734680176

Token 40: '#' (ID: 2)
  Prédit: 'd'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'd' → logprob: -0.022249838337302208
    2. '
' → logprob: -4.272249698638916
    3. '#' → logprob: -6.147249698638916
    4. 'def' → logprob: -6.147249698638916
    5. '\' → logprob: -6.522249698638916
    6. '' → logprob: -6.647249698638916
    7. '```' → logprob: -8.022250175476074
    8. 'n' → logprob: -8.772250175476074
    9. '

' → logprob: -8.897250175476074
    10. '\n' → logprob: -8.897250175476074

Token 41: ' hum' (ID: 3402)
  Prédit: ' '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' ' → logprob: -0.001908289035782218
    2. 'd' → logprob: -6.501908302307129
    3. ' d' → logprob: -8.126908302307129
    4. 'def' → logprob: -10.126908302307129
    5. ' def' → logprob: -10.876908302307129
    6. ' class' → logprob: -11.626908302307129
    7. ' #' → logprob: -11.751908302307129
    8. ' ﻿' → logprob: -11.876908302307129
    9. ' de' → logprob: -12.376908302307129
    10. '  ' → logprob: -12.626908302307129

Token 42: ',' (ID: 11)
  Prédit: 'an'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'an' → logprob: -0.010178636759519577
    2. 'ble' → logprob: -5.260178565979004
    3. 'a' → logprob: -6.010178565979004
    4. '#' → logprob: -6.885178565979004
    5. 'b' → logprob: -7.010178565979004
    6. 'ans' → logprob: -7.885178565979004
    7. 'ane' → logprob: -9.635178565979004
    8. 'anity' → logprob: -10.885178565979004
    9. 'p' → logprob: -11.510178565979004
    10. ' an' → logprob: -11.635178565979004

Token 43: ' j' (ID: 441)
  Prédit: ' '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' ' → logprob: -0.0003688245196826756
    2. ' #' → logprob: -9.50036907196045
    3. '#' → logprob: -9.87536907196045
    4. ' ,' → logprob: -10.25036907196045
    5. 'def' → logprob: -10.37536907196045
    6. ' def' → logprob: -10.37536907196045
    7. ' a' → logprob: -10.62536907196045
    8. ',' → logprob: -10.75036907196045
    9. ' 
' → logprob: -10.87536907196045
    10. '  ' → logprob: -11.62536907196045

Token 44: ''' (ID: 6)
  Prédit: 'a'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'a' → logprob: -0.7049578428268433
    2. 'u' → logprob: -0.9549578428268433
    3. 'e' → logprob: -2.454957962036133
    4. 'o' → logprob: -4.454957962036133
    5. 'i' → logprob: -5.204957962036133
    6. '#' → logprob: -5.454957962036133
    7. 'm' → logprob: -5.579957962036133
    8. 'um' → logprob: -5.954957962036133
    9. '   ' → logprob: -7.517457962036133
    10. ' ' → logprob: -7.579957962036133

Token 45: 'aug' (ID: 13610)
  Prédit: 'e'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'e' → logprob: -0.028186548501253128
    2. 'a' → logprob: -4.403186321258545
    3. 'ai' → logprob: -4.903186321258545
    4. ''ai' → logprob: -5.528186321258545
    5. ''' → logprob: -6.028186321258545
    6. 'i' → logprob: -7.903186321258545
    7. ''aime' → logprob: -8.153186798095703
    8. ''espère' → logprob: -8.528186798095703
    9. '```' → logprob: -9.403186798095703
    10. ''a' → logprob: -9.528186798095703

Token 46: 'mente' (ID: 4186)
  Prédit: 'mente'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'mente' → logprob: -0.022847764194011688
    2. 'men' → logprob: -5.397847652435303
    3. 'ment' → logprob: -5.522847652435303
    4. 'oute' → logprob: -5.522847652435303
    5. '#' → logprob: -6.022847652435303
    6. 'mentation' → logprob: -6.647847652435303
    7. 'uste' → logprob: -7.022847652435303
    8. 'm' → logprob: -7.272847652435303
    9. '\' → logprob: -7.772847652435303
    10. '`' → logprob: -7.897847652435303

Token 47: ' la' (ID: 557)
  Prédit: ' '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' ' → logprob: -0.009489375166594982
    2. '_' → logprob: -5.0094895362854
    3. '<|end|>' → logprob: -7.1344895362854
    4. '  ' → logprob: -7.2594895362854
    5. ' ' → logprob: -8.384489059448242
    6. ' l' → logprob: -8.509489059448242
    7. 'l' → logprob: -8.884489059448242
    8. 'space' → logprob: -9.134489059448242
    9. ' la' → logprob: -9.259489059448242
    10. '.' → logprob: -9.634489059448242

Token 48: ' réc' (ID: 36254)
  Prédit: ' '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' ' → logprob: -1.0756605863571167
    2. 'tail' → logprob: -2.3256607055664062
    3. ' vitesse' → logprob: -2.8256607055664062
    4. ' taille' → logprob: -2.8881607055664062
    5. '  ' → logprob: -3.1381607055664062
    6. ' fréquence' → logprob: -3.1381607055664062
    7. 'v' → logprob: -3.3881607055664062
    8. 't' → logprob: -3.9506607055664062
    9. 'prob' → logprob: -4.575660705566406
    10. 's' → logprob: -4.700660705566406

Token 49: 'ursion' (ID: 41658)
  Prédit: 'ursion'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'ursion' → logprob: -0.28056126832962036
    2. 'urs' → logprob: -2.1555612087249756
    3. 'u' → logprob: -2.6555612087249756
    4. 'ur' → logprob: -2.9055612087249756
    5. 'ursive' → logprob: -6.030561447143555
    6. 'urrence' → logprob: -7.530561447143555
    7. 'urrent' → logprob: -7.655561447143555
    8. 'urse' → logprob: -8.780561447143555
    9. 'rs' → logprob: -10.030561447143555
    10. 's' → logprob: -10.155561447143555

Token 50: ' mais' (ID: 2899)
  Prédit: 'import'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'import' → logprob: -0.3742983341217041
    2. '_' → logprob: -2.124298334121704
    3. 'sys' → logprob: -2.874298334121704
    4. '.' → logprob: -3.124298334121704
    5. ''s' → logprob: -3.499298334121704
    6. '`' → logprob: -4.249298095703125
    7. '```' → logprob: -4.874298095703125
    8. 's' → logprob: -4.999298095703125
    9. ' import' → logprob: -5.749298095703125
    10. ',' → logprob: -5.749298095703125

Token 51: ' j' (ID: 441)
  Prédit: ' sys'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' sys' → logprob: -0.23305292427539825
    2. 'sys' → logprob: -1.7330529689788818
    3. ' ' → logprob: -4.358052730560303
    4. '.' → logprob: -5.108052730560303
    5. ',' → logprob: -5.233052730560303
    6. '(sys' → logprob: -6.608052730560303
    7. 'import' → logprob: -7.108052730560303
    8. '!' → logprob: -7.483052730560303
    9. '```' → logprob: -7.483052730560303
    10. '_sys' → logprob: -7.733052730560303

Token 52: ''s' (ID: 885)
  Prédit: '''
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ''' → logprob: -0.03970390558242798
    2. 'e' → logprob: -3.914703845977783
    3. ''ai' → logprob: -4.414703845977783
    4. 'a' → logprob: -7.039703845977783
    5. ''espère' → logprob: -7.039703845977783
    6. ''a' → logprob: -7.414703845977783
    7. ''esp' → logprob: -7.414703845977783
    8. ''aime' → logprob: -7.664703845977783
    9. ''espace' → logprob: -7.664703845977783
    10. ''util' → logprob: -7.914703845977783

Token 53: 'uis' (ID: 4560)
  Prédit: 'e'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'e' → logprob: -0.13577070832252502
    2. ''ai' → logprob: -3.760770797729492
    3. ''' → logprob: -3.885770797729492
    4. ''aime' → logprob: -4.135770797729492
    5. ''use' → logprob: -4.885770797729492
    6. ''espère' → logprob: -4.885770797729492
    7. ''aj' → logprob: -5.010770797729492
    8. ''util' → logprob: -5.010770797729492
    9. 'ute' → logprob: -5.635770797729492
    10. 'uste' → logprob: -5.635770797729492

Token 54: ' pas' (ID: 2173)
  Prédit: ' sys'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' sys' → logprob: -0.12930820882320404
    2. 'sys' → logprob: -3.0043082237243652
    3. ' ' → logprob: -3.1293082237243652
    4. '.' → logprob: -4.504308223724365
    5. 'import' → logprob: -4.629308223724365
    6. '  ' → logprob: -6.379308223724365
    7. '=sys' → logprob: -6.504308223724365
    8. ' import' → logprob: -7.129308223724365
    9. ' ' → logprob: -8.129307746887207
    10. ' recursion' → logprob: -8.254307746887207

Token 55: ' sûr' (ID: 46415)
  Prédit: ' sûr'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' sûr' → logprob: -0.1006559357047081
    2. ' ' → logprob: -3.100656032562256
    3. ' sure' → logprob: -3.975656032562256
    4. ' sur' → logprob: -4.725656032562256
    5. ' certain' → logprob: -5.225656032562256
    6. 's' → logprob: -5.600656032562256
    7. 'sur' → logprob: -6.100656032562256
    8. ' safe' → logprob: -6.225656032562256
    9. ' sûre' → logprob: -6.475656032562256
    10. '_' → logprob: -6.850656032562256

Token 56: ' que' (ID: 661)
  Prédit: '_'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '_' → logprob: -0.03589510917663574
    2. ' ' → logprob: -4.160895347595215
    3. ' de' → logprob: -4.910895347595215
    4. ',' → logprob: -5.410895347595215
    5. '\' → logprob: -6.535895347595215
    6. ' _' → logprob: -6.535895347595215
    7. '.' → logprob: -7.160895347595215
    8. 'de' → logprob: -7.160895347595215
    9. '(' → logprob: -7.410895347595215
    10. ':' → logprob: -7.660895347595215

Token 57: ' c' (ID: 274)
  Prédit: ' ça'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' ça' → logprob: -0.6301335692405701
    2. ' ce' → logprob: -1.6301336288452148
    3. 'cela' → logprob: -1.7551336288452148
    4. 'ça' → logprob: -3.255133628845215
    5. 'ce' → logprob: -4.130133628845215
    6. ' this' → logprob: -4.255133628845215
    7. ' cela' → logprob: -4.380133628845215
    8. 'c' → logprob: -5.630133628845215
    9. ' ' → logprob: -6.005133628845215
    10. 'le' → logprob: -6.255133628845215

Token 58: ''est' (ID: 6616)
  Prédit: '''
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ''' → logprob: -0.2248680293560028
    2. 'e' → logprob: -1.7248680591583252
    3. 'a' → logprob: -4.349867820739746
    4. ''a' → logprob: -5.224867820739746
    5. ''e' → logprob: -6.224867820739746
    6. ' '' → logprob: -6.974867820739746
    7. ''
' → logprob: -8.474867820739746
    8. 'ette' → logprob: -8.474867820739746
    9. ''#' → logprob: -8.474867820739746
    10. ''s' → logprob: -8.599867820739746

Token 59: ' utile' (ID: 68237)
  Prédit: ' suff'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' suff' → logprob: -0.8499135971069336
    2. ' utile' → logprob: -0.8499135971069336
    3. ' ' → logprob: -3.7249135971069336
    4. ' la' → logprob: -3.8499135971069336
    5. ' necess' → logprob: -4.599913597106934
    6. ' une' → logprob: -4.599913597106934
    7. ' enough' → logprob: -4.849913597106934
    8. '_' → logprob: -4.974913597106934
    9. ' valid' → logprob: -4.974913597106934
    10. ' nécessaire' → logprob: -5.224913597106934

Token 60: ' ici' (ID: 27994)
  Prédit: 'sys'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'sys' → logprob: -0.34431910514831543
    2. '.' → logprob: -2.0943191051483154
    3. '' → logprob: -2.7193191051483154
    4. ' sys' → logprob: -3.3443191051483154
    5. 'import' → logprob: -3.7193191051483154
    6. ',' → logprob: -4.4693193435668945
    7. ' ' → logprob: -4.8443193435668945
    8. ':' → logprob: -5.7193193435668945
    9. '
' → logprob: -5.7193193435668945
    10. '\' → logprob: -5.7193193435668945

Token 61: '
' (ID: 198)
  Prédit: '
'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '
' → logprob: -0.7784247994422913
    2. 'sys' → logprob: -1.4034247398376465
    3. 'import' → logprob: -1.5284247398376465
    4. '' → logprob: -3.1534247398376465
    5. '\' → logprob: -4.0284247398376465
    6. '\n' → logprob: -4.5284247398376465
    7. '(sys' → logprob: -6.6534247398376465
    8. ' sys' → logprob: -6.7784247398376465
    9. '  
' → logprob: -7.0284247398376465
    10. '
' → logprob: -7.4034247398376465

Token 62: 'sys' (ID: 17324)
  Prédit: 'sys'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'sys' → logprob: -0.05533513054251671
    2. ' sys' → logprob: -3.05533504486084
    3. '(sys' → logprob: -6.05533504486084
    4. 'import' → logprob: -6.18033504486084
    5. '' → logprob: -7.68033504486084
    6. '=sys' → logprob: -7.80533504486084
    7. '
' → logprob: -7.93033504486084
    8. '.' → logprob: -8.30533504486084
    9. '_sys' → logprob: -8.55533504486084
    10. ',' → logprob: -8.93033504486084

Token 63: '.set' (ID: 1230)
  Prédit: '.'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '.' → logprob: -0.3241620659828186
    2. '.set' → logprob: -1.3241620063781738
    3. '.setdefault' → logprob: -4.574162006378174
    4. ' .' → logprob: -8.199162483215332
    5. '.exit' → logprob: -9.824162483215332
    6. '.argv' → logprob: -9.824162483215332
    7. '.stdin' → logprob: -10.199162483215332
    8. '.stdout' → logprob: -10.574162483215332
    9. '.stderr' → logprob: -10.949162483215332
    10. '.stack' → logprob: -11.199162483215332

Token 64: 'rec' (ID: 9285)
  Prédit: 'rec'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'rec' → logprob: -0.018626747652888298
    2. 'ursion' → logprob: -4.018626689910889
    3. 'limit' → logprob: -8.643627166748047
    4. '_rec' → logprob: -9.143627166748047
    5. ' recursion' → logprob: -9.768627166748047
    6. '_' → logprob: -10.268627166748047
    7. 'ault' → logprob: -10.893627166748047
    8. 'ult' → logprob: -11.018627166748047
    9. 'ection' → logprob: -11.518627166748047
    10. 'ur' → logprob: -11.768627166748047

Token 65: 'ursion' (ID: 41658)
  Prédit: 'ursion'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'ursion' → logprob: -1.771655115589965e-05
    2. 'ur' → logprob: -11.250018119812012
    3. 'urs' → logprob: -12.625018119812012
    4. 'ursive' → logprob: -14.250018119812012
    5. 'usion' → logprob: -15.500018119812012
    6. 'ursor' → logprob: -15.625018119812012
    7. 'limit' → logprob: -15.875018119812012
    8. 'urf' → logprob: -16.375017166137695
    9. 'urst' → logprob: -16.875017166137695
    10. 'urse' → logprob: -17.750017166137695

Token 66: 'limit' (ID: 19698)
  Prédit: 'limit'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'limit' → logprob: -0.0014126161113381386
    2. '_limit' → logprob: -6.751412391662598
    3. 'lim' → logprob: -8.876412391662598
    4. 'al' → logprob: -9.501412391662598
    5. 'depth' → logprob: -10.876412391662598
    6. '_' → logprob: -12.751412391662598
    7. 'ault' → logprob: -13.376412391662598
    8. ' limit' → logprob: -14.001412391662598
    9. '_depth' → logprob: -14.126412391662598
    10. 'Limit' → logprob: -15.001412391662598

Token 67: '(' (ID: 7)
  Prédit: '('
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(' → logprob: -8.895480277715251e-06
    2. '(
' → logprob: -12.375008583068848
    3. ' (' → logprob: -13.125008583068848
    4. '(

' → logprob: -13.750008583068848
    5. '((' → logprob: -13.875008583068848
    6. '()' → logprob: -15.875008583068848
    7. '("("' → logprob: -16.125009536743164
    8. '(()' → logprob: -16.500009536743164
    9. '```' → logprob: -16.500009536743164
    10. '(.' → logprob: -17.625009536743164

Token 68: '101' (ID: 7959)
  Prédit: '10'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '10' → logprob: -0.10039795935153961
    2. '100' → logprob: -2.350398063659668
    3. '300' → logprob: -9.225398063659668
    4. '200' → logprob: -10.100398063659668
    5. '500' → logprob: -10.350398063659668
    6. ' ' → logprob: -11.725398063659668
    7. '400' → logprob: -11.975398063659668
    8. '1' → logprob: -13.225398063659668
    9. '250' → logprob: -13.225398063659668
    10. '150' → logprob: -14.475398063659668

Token 69: '000' (ID: 1302)
  Prédit: '00'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '00' → logprob: -0.12179738283157349
    2. '0' → logprob: -2.3717973232269287
    3. '000' → logprob: -3.8717973232269287
    4. '100' → logprob: -8.996797561645508
    5. '50' → logprob: -9.371797561645508
    6. '5' → logprob: -9.621797561645508
    7. '010' → logprob: -9.746797561645508
    8. '30' → logprob: -9.996797561645508
    9. '10' → logprob: -10.121797561645508
    10. '1' → logprob: -10.621797561645508

Token 70: ')
' (ID: 446)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')' → logprob: -0.0001295222609769553
    2. '0' → logprob: -9.250129699707031
    3. ' )' → logprob: -10.625129699707031
    4. '1' → logprob: -12.875129699707031
    5. '5' → logprob: -14.250129699707031
    6. '')' → logprob: -14.250129699707031
    7. '9' → logprob: -14.250129699707031
    8. '6' → logprob: -14.250129699707031
    9. '))' → logprob: -14.375129699707031
    10. ')
' → logprob: -14.500129699707031

Token 71: 'input' (ID: 2586)
  Prédit: '

'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '

' → logprob: -0.050795529037714005
    2. '
' → logprob: -3.050795555114746
    3. '
' → logprob: -6.675795555114746
    4. '


' → logprob: -8.175795555114746
    5. '

' → logprob: -8.175795555114746
    6. '\n' → logprob: -8.550795555114746
    7. '' → logprob: -9.800795555114746
    8. '

' → logprob: -10.300795555114746
    9. '
 
' → logprob: -10.675795555114746
    10. '0' → logprob: -10.800795555114746

Token 72: ' =' (ID: 314)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(' → logprob: -0.2717576324939728
    2. '()' → logprob: -1.5217576026916504
    3. '=' → logprob: -5.27175760269165
    4. ' =' → logprob: -5.39675760269165
    5. '<|end|>' → logprob: -6.02175760269165
    6. '.' → logprob: -6.27175760269165
    7. '```' → logprob: -6.27175760269165
    8. ' ' → logprob: -7.14675760269165
    9. ')' → logprob: -7.27175760269165
    10. '<|end|>' → logprob: -8.271758079528809

Token 73: ' sys' (ID: 12228)
  Prédit: 'sys'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'sys' → logprob: -0.7169935703277588
    2. ' sys' → logprob: -1.2169935703277588
    3. 'input' → logprob: -1.5919935703277588
    4. ' input' → logprob: -4.46699333190918
    5. 'raw' → logprob: -8.59199333190918
    6. 'lambda' → logprob: -8.84199333190918
    7. 'open' → logprob: -9.46699333190918
    8. '=sys' → logprob: -9.46699333190918
    9. 'int' → logprob: -9.59199333190918
    10. ' raw' → logprob: -10.34199333190918

Token 74: '.stdin' (ID: 93480)
  Prédit: '.stdin'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '.stdin' → logprob: -0.020815720781683922
    2. '.' → logprob: -4.770815849304199
    3. '.readline' → logprob: -4.770815849304199
    4. '.input' → logprob: -5.895815849304199
    5. '.stdout' → logprob: -7.270815849304199
    6. ' .' → logprob: -9.3958158493042
    7. '.read' → logprob: -10.2708158493042
    8. '.argv' → logprob: -11.0208158493042
    9. '.stderr' → logprob: -11.0208158493042
    10. '.std' → logprob: -11.5208158493042

Token 75: '.readline' (ID: 74673)
  Prédit: '.readline'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '.readline' → logprob: -0.02295832708477974
    2. 'read' → logprob: -4.272958278656006
    3. 'buffer' → logprob: -4.772958278656006
    4. '.read' → logprob: -8.522958755493164
    5. '.buffer' → logprob: -9.897958755493164
    6. '.' → logprob: -11.022958755493164
    7. ' readline' → logprob: -11.022958755493164
    8. 'reader' → logprob: -12.397958755493164
    9. '-buffer' → logprob: -13.022958755493164
    10. '.readlines' → logprob: -13.147958755493164

Token 76: '

' (ID: 279)
  Prédit: '
'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '
' → logprob: -0.12095990031957626
    2. '()' → logprob: -2.870959997177124
    3. '()

' → logprob: -3.870959997177124
    4. '

' → logprob: -4.370959758758545
    5. '()
' → logprob: -4.620959758758545
    6. '(' → logprob: -4.745959758758545
    7. '(
' → logprob: -6.370959758758545
    8. '
' → logprob: -7.120959758758545
    9. '\n' → logprob: -7.245959758758545
    10. '' → logprob: -7.870959758758545

Token 77: 'MOD' (ID: 52135)
  Prédit: 'def'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'def' → logprob: -0.450624942779541
    2. 'n' → logprob: -1.200624942779541
    3. '

' → logprob: -3.450624942779541
    4. '
' → logprob: -4.200624942779541
    5. '\' → logprob: -5.200624942779541
    6. 'class' → logprob: -5.575624942779541
    7. 'T' → logprob: -6.450624942779541
    8. 't' → logprob: -6.450624942779541
    9. '\n' → logprob: -7.075624942779541
    10. 'd' → logprob: -7.700624942779541

Token 78: ' =' (ID: 314)
  Prédit: ' ='
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' =' → logprob: -0.23479026556015015
    2. '=' → logprob: -1.609790325164795
    3. ' ' → logprob: -4.734790325164795
    4. '_' → logprob: -8.234789848327637
    5. ')' → logprob: -9.484789848327637
    6. ',' → logprob: -10.109789848327637
    7. '<|end|>' → logprob: -10.109789848327637
    8. ' =)' → logprob: -10.359789848327637
    9. ' )' → logprob: -10.609789848327637
    10. ' =
' → logprob: -10.984789848327637

Token 79: ' ' (ID: 220)
  Prédit: '10'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '10' → logprob: -0.03812549263238907
    2. ' ' → logprob: -3.538125514984131
    3. '100' → logprob: -4.788125514984131
    4. '998' → logprob: -11.788125038146973
    5. '1' → logprob: -12.413125038146973
    6. 'int' → logprob: -15.413125038146973
    7. ' int' → logprob: -16.91312599182129
    8. '999' → logprob: -17.03812599182129
    9. '(' → logprob: -17.16312599182129
    10. ' (' → logprob: -17.53812599182129

Token 80: '10' (ID: 702)
  Prédit: '10'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '10' → logprob: -0.06634292006492615
    2. '100' → logprob: -2.816342830657959
    3. '998' → logprob: -5.441342830657959
    4. '1' → logprob: -10.691343307495117
    5. ' ' → logprob: -12.441343307495117
    6. 'int' → logprob: -12.816343307495117
    7. '123' → logprob: -13.816343307495117
    8. '999' → logprob: -14.066343307495117
    9. '987' → logprob: -15.316343307495117
    10. '2' → logprob: -16.066343307495117

Token 81: ' **' (ID: 6240)
  Prédit: '9'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '9' → logprob: -0.0035288019571453333
    2. '**' → logprob: -5.753528594970703
    3. '09' → logprob: -8.128528594970703
    4. ' ' → logprob: -10.378528594970703
    5. '7' → logprob: -11.003528594970703
    6. '07' → logprob: -12.753528594970703
    7. '0' → logprob: -13.253528594970703
    8. '```' → logprob: -13.253528594970703
    9. '8' → logprob: -14.753528594970703
    10. '*' → logprob: -15.503528594970703

Token 82: ' ' (ID: 220)
  Prédit: '9'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '9' → logprob: 0.0
    2. '09' → logprob: -18.25
    3. '```' → logprob: -21.0
    4. '+' → logprob: -21.25
    5. ' ' → logprob: -21.5
    6. '18' → logprob: -23.0
    7. '10' → logprob: -23.125
    8. '4' → logprob: -23.625
    9. '**' → logprob: -24.0
    10. '7' → logprob: -24.25

Token 83: '9' (ID: 24)
  Prédit: '9'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '9' → logprob: 0.0
    2. '09' → logprob: -18.875
    3. '```' → logprob: -20.125
    4. ' ' → logprob: -21.375
    5. '18' → logprob: -23.0
    6. '8' → logprob: -23.125
    7. '10' → logprob: -23.75
    8. '
' → logprob: -24.125
    9. '4' → logprob: -24.125
    10. '+' → logprob: -24.25

Token 84: ' +' (ID: 659)
  Prédit: '+'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '+' → logprob: -0.014165983535349369
    2. ' +' → logprob: -4.264165878295898
    3. '7' → logprob: -13.639165878295898
    4. ' ' → logprob: -14.889165878295898
    5. '+
' → logprob: -15.264165878295898
    6. ' plus' → logprob: -15.639165878295898
    7. '20' → logprob: -16.1391658782959
    8. ' +
' → logprob: -16.2641658782959
    9. ' ' → logprob: -16.6391658782959
    10. '＋' → logprob: -17.0141658782959

Token 85: ' ' (ID: 220)
  Prédit: '7'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '7' → logprob: -3.128163257315464e-07
    2. ' ' → logprob: -15.75
    3. '+' → logprob: -16.375
    4. '9' → logprob: -19.5
    5. '```' → logprob: -20.25
    6. '07' → logprob: -20.375
    7. '   ' → logprob: -21.25
    8. '  ' → logprob: -21.875
    9. ' ' → logprob: -21.875
    10. '17' → logprob: -22.25

Token 86: '7' (ID: 22)
  Prédit: '7'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '7' → logprob: 0.0
    2. ' ' → logprob: -18.25
    3. '+' → logprob: -19.25
    4. '9' → logprob: -21.125
    5. '07' → logprob: -21.625
    6. '```' → logprob: -21.875
    7. '   ' → logprob: -22.625
    8. '17' → logprob: -23.5
    9. '  ' → logprob: -23.875
    10. '７' → logprob: -24.25

Token 87: '
' (ID: 198)
  Prédit: '
'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '
' → logprob: -0.13831399381160736
    2. '<|end|>' → logprob: -3.0133140087127686
    3. '

' → logprob: -3.2633140087127686
    4. '' → logprob: -4.2633137702941895
    5. ' 
' → logprob: -5.0133137702941895
    6. '\n' → logprob: -5.0133137702941895
    7. ' 

' → logprob: -5.5133137702941895
    8. '
' → logprob: -5.7633137702941895
    9. '<|end|>' → logprob: -5.7633137702941895
    10. '```' → logprob: -7.0133137702941895

Token 88: 'INF' (ID: 64358)
  Prédit: '
'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '
' → logprob: -0.3778686821460724
    2. '

' → logprob: -1.37786865234375
    3. 'def' → logprob: -3.00286865234375
    4. '
' → logprob: -5.00286865234375
    5. '\n' → logprob: -6.37786865234375
    6. '#' → logprob: -6.62786865234375
    7. 'class' → logprob: -6.87786865234375
    8. '\' → logprob: -7.00286865234375
    9. '' → logprob: -7.37786865234375
    10. 'n' → logprob: -8.62786865234375

Token 89: ' =' (ID: 314)
  Prédit: ' ='
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' =' → logprob: -0.012584768235683441
    2. '=' → logprob: -4.387584686279297
    3. ',' → logprob: -10.012584686279297
    4. ' ' → logprob: -11.387584686279297
    5. '_' → logprob: -12.012584686279297
    6. ')' → logprob: -12.262584686279297
    7. ' =
' → logprob: -13.637584686279297
    8. '<|end|>' → logprob: -13.637584686279297
    9. ' ' → logprob: -13.887584686279297
    10. ' ,' → logprob: -13.887584686279297

Token 90: ' float' (ID: 4428)
  Prédit: ' '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' ' → logprob: -0.23928427696228027
    2. ' float' → logprob: -2.1142842769622803
    3. '10' → logprob: -2.8642842769622803
    4. 'float' → logprob: -3.3642842769622803
    5. ' int' → logprob: -8.23928451538086
    6. 'int' → logprob: -9.11428451538086
    7. '1' → logprob: -9.73928451538086
    8. ' math' → logprob: -10.73928451538086
    9. 'math' → logprob: -11.86428451538086
    10. '100' → logprob: -11.86428451538086

Token 91: '('' (ID: 706)
  Prédit: '(''
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '('' → logprob: -4.191489642835222e-05
    2. '(' → logprob: -10.375041961669922
    3. ''' → logprob: -12.125041961669922
    4. '("' → logprob: -12.500041961669922
    5. '32' → logprob: -14.500041961669922
    6. ' ('' → logprob: -15.125041961669922
    7. ''in' → logprob: -16.000041961669922
    8. '"' → logprob: -16.000041961669922
    9. '64' → logprob: -16.125041961669922
    10. '

' → logprob: -17.000041961669922

Token 92: 'inf' (ID: 22226)
  Prédit: ''in'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ''in' → logprob: -0.08743241429328918
    2. ''' → logprob: -2.587432384490967
    3. ''i' → logprob: -6.337432384490967
    4. ''int' → logprob: -6.962432384490967
    5. ''e' → logprob: -7.462432384490967
    6. ''a' → logprob: -7.587432384490967
    7. ''ex' → logprob: -7.587432384490967
    8. ''ins' → logprob: -7.837432384490967
    9. ''o' → logprob: -7.837432384490967
    10. 'inf' → logprob: -7.962432384490967

Token 93: '')' (ID: 1542)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')' → logprob: -6.611323624383658e-05
    2. '')' → logprob: -9.875065803527832
    3. ' )' → logprob: -11.250065803527832
    4. ')
' → logprob: -13.875065803527832
    5. '))' → logprob: -16.37506675720215
    6. '),' → logprob: -16.75006675720215
    7. ')

' → logprob: -17.00006675720215
    8. ')'' → logprob: -17.00006675720215
    9. ')
' → logprob: -17.00006675720215
    10. '()' → logprob: -17.12506675720215

Token 94: ' ' (ID: 220)
  Prédit: '
'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '
' → logprob: -0.14655324816703796
    2. '

' → logprob: -2.0215532779693604
    3. '
' → logprob: -6.396553039550781
    4. 'def' → logprob: -6.771553039550781
    5. 'class' → logprob: -8.021553039550781
    6. '\n' → logprob: -8.396553039550781
    7. '#' → logprob: -8.771553039550781
    8. 'n' → logprob: -8.896553039550781
    9. '' → logprob: -9.646553039550781
    10. '


' → logprob: -10.146553039550781

Token 95: ' #' (ID: 1069)
  Prédit: '
'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '
' → logprob: -0.2577746510505676
    2. '

' → logprob: -1.5077745914459229
    3. '
' → logprob: -6.257774829864502
    4. '#' → logprob: -6.632774829864502
    5. 'def' → logprob: -7.007774829864502
    6. '' → logprob: -7.382774829864502
    7. '\n' → logprob: -8.007774353027344
    8. '<|end|>' → logprob: -8.507774353027344
    9. 'class' → logprob: -8.757774353027344
    10. 'n' → logprob: -9.257774353027344

Token 96: ' bon' (ID: 4846)
  Prédit: ''
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False

Token 97: ',' (ID: 11)
  Prédit: '

'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '

' → logprob: -0.2576043903827667
    2. '
' → logprob: -1.5076043605804443
    3. '


' → logprob: -6.007604598999023
    4. '
' → logprob: -7.257604598999023
    5. 'def' → logprob: -7.757604598999023
    6. '

' → logprob: -7.757604598999023
    7. '#' → logprob: -8.132604598999023
    8. '' → logprob: -8.132604598999023
    9. '



' → logprob: -8.757604598999023
    10. 'class' → logprob: -8.757604598999023

Token 98: ' on' (ID: 402)
  Prédit: '#'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '#' → logprob: -0.9837096333503723
    2. ' on' → logprob: -1.7337095737457275
    3. '100' → logprob: -1.9837095737457275
    4. ' c' → logprob: -2.8587095737457275
    5. 'on' → logprob: -3.1087095737457275
    6. 'int' → logprob: -3.9837095737457275
    7. 'c' → logprob: -4.108709812164307
    8. 'n' → logprob: -4.483709812164307
    9. 'for' → logprob: -4.483709812164307
    10. 'je' → logprob: -4.608709812164307

Token 99: ' pourrait' (ID: 39622)
  Prédit: ' n'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' n' → logprob: -1.3464210033416748
    2. ' peut' → logprob: -1.4714210033416748
    3. ' va' → logprob: -1.9714210033416748
    4. ' a' → logprob: -2.096421003341675
    5. ' continue' → logprob: -2.471421003341675
    6. 'a' → logprob: -3.346421003341675
    7. ' ne' → logprob: -4.221421241760254
    8. 'n' → logprob: -4.596421241760254
    9. 'n't' → logprob: -4.721421241760254
    10. 'ne' → logprob: -4.846421241760254

Token 100: ' faire' (ID: 8119)
  Prédit: 'a'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'a' → logprob: -0.8696444034576416
    2. ' continuer' → logprob: -1.6196444034576416
    3. 'contin' → logprob: -2.3696444034576416
    4. ' utiliser' → logprob: -2.6196444034576416
    5. ' aussi' → logprob: -3.4946444034576416
    6. ' remplacer' → logprob: -3.6196444034576416
    7. 'mettre' → logprob: -3.8696444034576416
    8. ' peut' → logprob: -3.9946444034576416
    9. 'faire' → logprob: -4.2446441650390625
    10. 'pe' → logprob: -4.6196441650390625

Token 101: ' ' (ID: 220)
  Prédit: 'int'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'int' → logprob: -0.7331028580665588
    2. ' ' → logprob: -1.233102798461914
    3. ' un' → logprob: -2.483102798461914
    4. '100' → logprob: -3.233102798461914
    5. ' une' → logprob: -3.483102798461914
    6. ' int' → logprob: -4.233102798461914
    7. '1' → logprob: -4.733102798461914
    8. ' mieux' → logprob: -5.358102798461914
    9. '<|end|>' → logprob: -5.483102798461914
    10. '#' → logprob: -6.233102798461914

Token 102: '1' (ID: 16)
  Prédit: 'int'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'int' → logprob: -0.4015371799468994
    2. 'float' → logprob: -2.2765371799468994
    3. 'math' → logprob: -2.4015371799468994
    4. '100' → logprob: -3.4015371799468994
    5. ' ' → logprob: -4.15153694152832
    6. 'import' → logprob: -4.90153694152832
    7. '```' → logprob: -5.02653694152832
    8. '1' → logprob: -5.15153694152832
    9. 'le' → logprob: -5.52653694152832
    10. ' mieux' → logprob: -5.65153694152832

Token 103: 'e' (ID: 68)
  Prédit: '0'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '0' → logprob: -0.24294589459896088
    2. '<<' → logprob: -2.117945909500122
    3. 'e' → logprob: -3.492945909500122
    4. '000' → logprob: -3.492945909500122
    5. ' <<' → logprob: -3.492945909500122
    6. '00' → logprob: -6.492945671081543
    7. '_' → logprob: -6.867945671081543
    8. '1' → logprob: -8.367945671081543
    9. '10' → logprob: -8.367945671081543
    10. '```' → logprob: -8.742945671081543

Token 104: '10' (ID: 702)
  Prédit: '18'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '18' → logprob: -0.12060323357582092
    2. '9' → logprob: -3.245603322982788
    3. '15' → logprob: -3.620603322982788
    4. '12' → logprob: -4.370603084564209
    5. '10' → logprob: -4.370603084564209
    6. '+' → logprob: -5.120603084564209
    7. '309' → logprob: -5.370603084564209
    8. '16' → logprob: -5.495603084564209
    9. '100' → logprob: -5.870603084564209
    10. '308' → logprob: -6.245603084564209

Token 105: ' aussi' (ID: 9894)
  Prédit: '
'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '
' → logprob: -0.6515384912490845
    2. '

' → logprob: -0.7765384912490845
    3. '
' → logprob: -5.026538372039795
    4. 'def' → logprob: -5.026538372039795
    5. '#' → logprob: -6.026538372039795
    6. '


' → logprob: -6.901538372039795
    7. 'class' → logprob: -7.401538372039795
    8. '\n' → logprob: -7.526538372039795
    9. 'n' → logprob: -7.901538372039795
    10. '' → logprob: -8.651538848876953

Token 106: '

' (ID: 279)
  Prédit: '

'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '

' → logprob: -0.38849586248397827
    2. '
' → logprob: -1.138495922088623
    3. '
' → logprob: -7.263495922088623
    4. '


' → logprob: -8.013495445251465
    5. '\n' → logprob: -8.388495445251465
    6. 'def' → logprob: -8.388495445251465
    7. '#' → logprob: -10.138495445251465
    8. '



' → logprob: -11.138495445251465
    9. '' → logprob: -11.513495445251465
    10. '
 
' → logprob: -11.513495445251465

Token 107: 'sqrt' (ID: 64991)
  Prédit: 'def'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'def' → logprob: -0.11844801902770996
    2. '
' → logprob: -2.74344801902771
    3. 'class' → logprob: -3.86844801902771
    4. 'n' → logprob: -4.118448257446289
    5. '

' → logprob: -4.743448257446289
    6. '\' → logprob: -7.368448257446289
    7. '\n' → logprob: -8.493448257446289
    8. '
' → logprob: -8.493448257446289
    9. '#' → logprob: -8.743448257446289
    10. 'd' → logprob: -9.743448257446289

Token 108: ' =' (ID: 314)
  Prédit: '_'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '_' → logprob: -0.31402134895324707
    2. '(' → logprob: -1.439021348953247
    3. 'r' → logprob: -3.689021348953247
    4. 't' → logprob: -6.689021110534668
    5. 'm' → logprob: -6.814021110534668
    6. '(math' → logprob: -7.064021110534668
    7. '_math' → logprob: -7.564021110534668
    8. '_root' → logprob: -8.189021110534668
    9. '_s' → logprob: -8.189021110534668
    10. '(_)' → logprob: -8.439021110534668

Token 109: ' math' (ID: 13324)
  Prédit: 'math'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'math' → logprob: -0.0019770495127886534
    2. ' math' → logprob: -6.25197696685791
    3. 'int' → logprob: -10.12697696685791
    4. '(math' → logprob: -11.87697696685791
    5. 'lambda' → logprob: -13.87697696685791
    6. 'cmath' → logprob: -14.75197696685791
    7. 'Math' → logprob: -16.626977920532227
    8. 'sqrt' → logprob: -17.001977920532227
    9. '/math' → logprob: -17.126977920532227
    10. '_math' → logprob: -17.626977920532227

Token 110: '.sqrt' (ID: 38011)
  Prédit: '.sqrt'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '.sqrt' → logprob: -0.010123764164745808
    2. '.' → logprob: -4.6351237297058105
    3. '.s' → logprob: -8.135124206542969
    4. '.Sqrt' → logprob: -10.135124206542969
    5. '.ceil' → logprob: -11.260124206542969
    6. '.square' → logprob: -12.385124206542969
    7. 'sqrt' → logprob: -12.635124206542969
    8. ' .' → logprob: -12.760124206542969
    9. '.floor' → logprob: -12.760124206542969
    10. '.pow' → logprob: -12.760124206542969

Token 111: '

' (ID: 279)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '(' → logprob: -0.27257198095321655
    2. 'def' → logprob: -1.5225720405578613
    3. '(
' → logprob: -4.522572040557861
    4. '
' → logprob: -5.897572040557861
    5. '(s' → logprob: -6.897572040557861
    6. '#' → logprob: -7.022572040557861
    7. ')' → logprob: -7.022572040557861
    8. ',' → logprob: -7.147572040557861
    9. ' def' → logprob: -7.522572040557861
    10. '(n' → logprob: -8.147571563720703

Token 112: '#' (ID: 2)
  Prédit: 'def'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'def' → logprob: -0.0014563052682206035
    2. 'class' → logprob: -6.876456260681152
    3. 'n' → logprob: -8.126456260681152
    4. 'd' → logprob: -9.876456260681152
    5. '\' → logprob: -10.501456260681152
    6. '#' → logprob: -10.876456260681152
    7. '
' → logprob: -12.376456260681152
    8. ' def' → logprob: -12.376456260681152
    9. 'a' → logprob: -12.751456260681152
    10. 'de' → logprob: -12.751456260681152

Token 113: ' Fon' (ID: 83815)
  Prédit: 'def'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'def' → logprob: -0.020786171779036522
    2. 'class' → logprob: -3.8957862854003906
    3. '#' → logprob: -9.52078628540039
    4. 'de' → logprob: -10.02078628540039
    5. ' def' → logprob: -10.02078628540039
    6. 'from' → logprob: -10.52078628540039
    7. ' class' → logprob: -11.02078628540039
    8. 'n' → logprob: -11.27078628540039
    9. 'd' → logprob: -11.39578628540039
    10. 'input' → logprob: -13.39578628540039

Token 114: 'ctions' (ID: 2620)
  Prédit: 'ction'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'ction' → logprob: -0.09643270075321198
    2. 'def' → logprob: -2.721432685852051
    3. 'ct' → logprob: -4.221432685852051
    4. 'ctions' → logprob: -5.221432685852051
    5. 'd' → logprob: -6.221432685852051
    6. '#' → logprob: -6.596432685852051
    7. 'c' → logprob: -6.596432685852051
    8. 't' → logprob: -6.846432685852051
    9. '```' → logprob: -9.34643268585205
    10. 'dateur' → logprob: -9.59643268585205

Token 115: ' pour' (ID: 1930)
  Prédit: 'def'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'def' → logprob: -0.04999956488609314
    2. 'de' → logprob: -3.549999475479126
    3. ' de' → logprob: -4.049999713897705
    4. ' def' → logprob: -6.549999713897705
    5. ':' → logprob: -8.299999237060547
    6. '_de' → logprob: -8.424999237060547
    7. '(' → logprob: -8.799999237060547
    8. '=' → logprob: -9.299999237060547
    9. ')' → logprob: -9.549999237060547
    10. ' ' → logprob: -9.674999237060547

Token 116: ' extra' (ID: 5018)
  Prédit: ' la'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' la' → logprob: -0.36577293276786804
    2. ' le' → logprob: -1.9907729625701904
    3. ' gérer' → logprob: -2.3657729625701904
    4. ' les' → logprob: -3.8657729625701904
    5. ' calcul' → logprob: -3.9907729625701904
    6. ' l' → logprob: -4.490772724151611
    7. 'la' → logprob: -5.365772724151611
    8. ' factor' → logprob: -5.490772724151611
    9. 'calcul' → logprob: -5.740772724151611
    10. 'l' → logprob: -6.365772724151611

Token 117: 'ire' (ID: 594)
  Prédit: 'ire'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'ire' → logprob: -0.21153974533081055
    2. 'ires' → logprob: -2.8365397453308105
    3. 'r' → logprob: -2.9615397453308105
    4. 'ctions' → logprob: -3.4615397453308105
    5. 're' → logprob: -3.7115397453308105
    6. 'ct' → logprob: -4.8365397453308105
    7. 'rc' → logprob: -5.7115397453308105
    8. 'def' → logprob: -5.8365397453308105
    9. 'res' → logprob: -6.3365397453308105
    10. 'rie' → logprob: -6.7115397453308105

Token 118: ' rapidement' (ID: 43157)
  Prédit: 'def'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'def' → logprob: -0.4406287372112274
    2. '<|end|>' → logprob: -2.31562876701355
    3. 'tokens' → logprob: -2.94062876701355
    4. 'des' → logprob: -3.19062876701355
    5. ' des' → logprob: -3.31562876701355
    6. ' les' → logprob: -3.31562876701355
    7. 'les' → logprob: -3.56562876701355
    8. '_tokens' → logprob: -4.690628528594971
    9. ' le' → logprob: -4.940628528594971
    10. 'le' → logprob: -5.065628528594971

Token 119: ' des' (ID: 731)
  Prédit: 'def'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'def' → logprob: -0.0460161529481411
    2. ' def' → logprob: -4.171016216278076
    3. ' les' → logprob: -4.921016216278076
    4. ' des' → logprob: -4.921016216278076
    5. ' la' → logprob: -5.796016216278076
    6. 'des' → logprob: -6.046016216278076
    7. 'les' → logprob: -6.296016216278076
    8. ' le' → logprob: -6.421016216278076
    9. ' ' → logprob: -7.171016216278076
    10. 'tokens' → logprob: -7.171016216278076

Token 120: ' entr' (ID: 7072)
  Prédit: ' nombres'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' nombres' → logprob: -0.6313297748565674
    2. 'ent' → logprob: -1.8813297748565674
    3. ' tokens' → logprob: -3.0063297748565674
    4. ' ent' → logprob: -3.1313297748565674
    5. 'tokens' → logprob: -3.5063297748565674
    6. ' valeurs' → logprob: -3.5063297748565674
    7. ' données' → logprob: -4.131329536437988
    8. ' éléments' → logprob: -4.256329536437988
    9. 'arguments' → logprob: -4.256329536437988
    10. 'int' → logprob: -4.381329536437988

Token 121: 'ées' (ID: 5161)
  Prédit: 'êtes'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'êtes' → logprob: -0.41694748401641846
    2. 'ées' → logprob: -1.4169474840164185
    3. 'etes' → logprob: -3.041947364807129
    4. 'r' → logprob: -3.666947364807129
    5. 'tes' → logprob: -3.916947364807129
    6. 'êts' → logprob: -6.416947364807129
    7. 't' → logprob: -6.916947364807129
    8. 'ête' → logprob: -7.166947364807129
    9. 'êt' → logprob: -7.416947364807129
    10. 'et' → logprob: -8.041947364807129

Token 122: ',' (ID: 11)
  Prédit: 'def'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'def' → logprob: -0.04547526314854622
    2. ':' → logprob: -3.9204752445220947
    3. ' def' → logprob: -4.795475482940674
    4. 's' → logprob: -5.420475482940674
    5. '(
' → logprob: -5.420475482940674
    6. '(' → logprob: -5.670475482940674
    7. '
' → logprob: -6.670475482940674
    8. 'de' → logprob: -7.795475482940674
    9. ':def' → logprob: -7.795475482940674
    10. '\n' → logprob: -7.920475482940674

Token 123: ' je' (ID: 1264)
  Prédit: 'def'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'def' → logprob: -0.001435708487406373
    2. ' def' → logprob: -7.00143575668335
    3. 'n' → logprob: -9.251435279846191
    4. '#' → logprob: -9.626435279846191
    5. 'int' → logprob: -9.626435279846191
    6. 't' → logprob: -10.001435279846191
    7. 'range' → logprob: -10.751435279846191
    8. 's' → logprob: -10.876435279846191
    9. ' en' → logprob: -11.626435279846191
    10. '
' → logprob: -11.626435279846191

Token 124: ' me' (ID: 668)
  Prédit: 'def'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'def' → logprob: -0.1689871996641159
    2. ' vais' → logprob: -3.418987274169922
    3. 'n' → logprob: -3.668987274169922
    4. ' continue' → logprob: -4.043987274169922
    5. 'ndef' → logprob: -4.168987274169922
    6. ' def' → logprob: -4.668987274169922
    7. 'continue' → logprob: -4.668987274169922
    8. ' pense' → logprob: -4.793987274169922
    9. ' défin' → logprob: -5.418987274169922
    10. 'm' → logprob: -5.793987274169922

Token 125: ' rappelle' (ID: 106210)
  Prédit: 'f'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'f' → logprob: -0.6493070721626282
    2. 'perm' → logprob: -1.3993070125579834
    3. 's' → logprob: -1.7743070125579834
    4. 'r' → logprob: -4.7743072509765625
    5. 'place' → logprob: -4.8993072509765625
    6. 'sers' → logprob: -5.2743072509765625
    7. '#' → logprob: -5.3993072509765625
    8. 'fait' → logprob: -5.5243072509765625
    9. '```' → logprob: -5.5243072509765625
    10. 'm' → logprob: -5.7743072509765625

Token 126: ' jamais' (ID: 23077)
  Prédit: 'def'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'def' → logprob: -0.009592699818313122
    2. ' def' → logprob: -5.259592533111572
    3. 'de' → logprob: -6.384592533111572
    4. 'd' → logprob: -6.759592533111572
    5. ' ' → logprob: -8.00959300994873
    6. '
' → logprob: -8.25959300994873
    7. 's' → logprob: -8.63459300994873
    8. 'des' → logprob: -9.25959300994873
    9. ' des' → logprob: -9.50959300994873
    10. ' de' → logprob: -9.50959300994873

Token 127: ' de' (ID: 334)
  Prédit: 'def'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'def' → logprob: -0.008959149941802025
    2. ' def' → logprob: -4.7589592933654785
    3. 'de' → logprob: -8.88395881652832
    4. '
' → logprob: -9.63395881652832
    5. '(
' → logprob: -9.63395881652832
    6. 'd' → logprob: -10.25895881652832
    7. ' de' → logprob: -11.63395881652832
    8. 's' → logprob: -11.88395881652832
    9. '(' → logprob: -12.25895881652832
    10. ' d' → logprob: -13.25895881652832

Token 128: ' toutes' (ID: 17502)
  Prédit: 'l'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'l' → logprob: -0.34891045093536377
    2. 'la' → logprob: -1.4739104509353638
    3. ' la' → logprob: -3.598910331726074
    4. 'def' → logprob: -4.348910331726074
    5. 'range' → logprob: -5.098910331726074
    6. 'le' → logprob: -5.848910331726074
    7. 'int' → logprob: -5.973910331726074
    8. '...' → logprob: -6.098910331726074
    9. ' l' → logprob: -6.348910331726074
    10. 'the' → logprob: -6.973910331726074

Token 129: '...
' (ID: 4908)
  Prédit: 'def'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'def' → logprob: -0.001098895794712007
    2. ' def' → logprob: -7.376099109649658
    3. '
' → logprob: -8.3760986328125
    4. '(
' → logprob: -8.7510986328125
    5. 'de' → logprob: -10.2510986328125
    6. '\' → logprob: -11.1260986328125
    7. ':' → logprob: -12.1260986328125
    8. '(' → logprob: -12.2510986328125
    9. '#' → logprob: -12.5010986328125
    10. 'd' → logprob: -12.5010986328125

Token 130: 'def' (ID: 1314)
  Prédit: 'def'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'def' → logprob: -0.0003782416461035609
    2. '
' → logprob: -8.125378608703613
    3. ' def' → logprob: -10.000378608703613
    4. 'de' → logprob: -11.000378608703613
    5. ' 
' → logprob: -11.625378608703613
    6. 'd' → logprob: -11.875378608703613
    7. '\' → logprob: -13.625378608703613
    8. 'ndef' → logprob: -14.000378608703613
    9. '  
' → logprob: -14.750378608703613
    10. '

' → logprob: -15.250378608703613

Token 131: ' LI' (ID: 14875)
  Prédit: ' read'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' read' → logprob: -0.7489557862281799
    2. ' input' → logprob: -0.8739557862281799
    3. 'I' → logprob: -3.748955726623535
    4. ' ri' → logprob: -3.873955726623535
    5. ' inp' → logprob: -4.248955726623535
    6. 'input' → logprob: -4.373955726623535
    7. ' readline' → logprob: -5.123955726623535
    8. 'int' → logprob: -5.373955726623535
    9. ' get' → logprob: -5.373955726623535
    10. ' int' → logprob: -5.498955726623535

Token 132: '():' (ID: 9442)
  Prédit: 'ST'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'ST' → logprob: -0.26160576939582825
    2. 'st' → logprob: -1.8866057395935059
    3. '():' → logprob: -2.886605739593506
    4. 'ne' → logprob: -5.011605739593506
    5. 'St' → logprob: -5.261605739593506
    6. 'T' → logprob: -5.636605739593506
    7. 'S' → logprob: -6.136605739593506
    8. 'N' → logprob: -6.386605739593506
    9. 'NE' → logprob: -6.761605739593506
    10. '()' → logprob: -7.636605739593506

Token 133: ' return' (ID: 622)
  Prédit: ' list'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' list' → logprob: -0.021900134161114693
    2. ' return' → logprob: -4.146900177001953
    3. 'list' → logprob: -5.396900177001953
    4. ' map' → logprob: -7.521900177001953
    5. 'return' → logprob: -7.521900177001953
    6. ' ' → logprob: -8.646900177001953
    7. '   ' → logprob: -10.521900177001953
    8. 'map' → logprob: -11.521900177001953
    9. ' [' → logprob: -11.646900177001953
    10. 'eturn' → logprob: -12.396900177001953

Token 134: ' [' (ID: 723)
  Prédit: 'list'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'list' → logprob: -0.002511212369427085
    2. ' list' → logprob: -6.002511024475098
    3. 'map' → logprob: -10.252511024475098
    4. '	list' → logprob: -16.127511978149414
    5. '[list' → logprob: -16.377511978149414
    6. ' map' → logprob: -17.877511978149414
    7. '=list' → logprob: -17.877511978149414
    8. '[' → logprob: -18.377511978149414
    9. 'lst' → logprob: -18.377511978149414
    10. 'liste' → logprob: -18.377511978149414

Token 135: 'int' (ID: 491)
  Prédit: 'int'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'int' → logprob: -3.7697225252486533e-06
    2. ' int' → logprob: -12.625003814697266
    3. 'i' → logprob: -15.500003814697266
    4. 'in' → logprob: -16.125003814697266
    5. '*' → logprob: -16.625003814697266
    6. '
' → logprob: -16.750003814697266
    7. '	int' → logprob: -17.500003814697266
    8. ']int' → logprob: -17.500003814697266
    9. ' ' → logprob: -18.250003814697266
    10. '(int' → logprob: -19.000003814697266

Token 136: '(x' (ID: 4061)
  Prédit: '(x'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(x' → logprob: -0.005243598949164152
    2. '(i' → logprob: -5.25524377822876
    3. '(' → logprob: -13.005243301391602
    4. '(s' → logprob: -13.255243301391602
    5. '(a' → logprob: -13.380243301391602
    6. '(e' → logprob: -13.630243301391602
    7. '(w' → logprob: -14.130243301391602
    8. '(k' → logprob: -14.755243301391602
    9. '(ii' → logprob: -14.755243301391602
    10. '(_' → logprob: -15.380243301391602

Token 137: ')' (ID: 8)
  Prédit: ')'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')' → logprob: -0.015094500966370106
    2. ' for' → logprob: -4.39009428024292
    3. '()' → logprob: -6.64009428024292
    4. 'for' → logprob: -6.89009428024292
    5. '(x' → logprob: -9.015094757080078
    6. ' )' → logprob: -9.140094757080078
    7. ' in' → logprob: -11.890094757080078
    8. 'in' → logprob: -12.390094757080078
    9. ' x' → logprob: -12.640094757080078
    10. '())' → logprob: -12.765094757080078

Token 138: ' for' (ID: 395)
  Prédit: 'for'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'for' → logprob: -0.3869185447692871
    2. ' for' → logprob: -1.136918544769287
    3. ')' → logprob: -10.261919021606445
    4. '()' → logprob: -11.761919021606445
    5. ' ' → logprob: -13.511919021606445
    6. '	for' → logprob: -14.136919021606445
    7. ']' → logprob: -14.261919021606445
    8. ' in' → logprob: -14.761919021606445
    9. ' sys' → logprob: -15.136919021606445
    10. 'in' → logprob: -15.261919021606445

Token 139: ' x' (ID: 1215)
  Prédit: ' input'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' input' → logprob: -0.007932980544865131
    2. 'input' → logprob: -5.257933139801025
    3. ' sys' → logprob: -6.507933139801025
    4. ' ' → logprob: -7.007933139801025
    5. ' x' → logprob: -8.632932662963867
    6. ' in' → logprob: -9.632932662963867
    7. '<|end|>' → logprob: -11.257932662963867
    8. '=input' → logprob: -11.382932662963867
    9. '	input' → logprob: -12.132932662963867
    10. 'sys' → logprob: -12.382932662963867

Token 140: ' in' (ID: 306)
  Prédit: ' in'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' in' → logprob: -0.8255693316459656
    2. 'input' → logprob: -0.9505693316459656
    3. '.' → logprob: -2.8255693912506104
    4. 'in' → logprob: -3.2005693912506104
    5. ' input' → logprob: -3.3255693912506104
    6. ' ' → logprob: -4.700569152832031
    7. '(input' → logprob: -4.950569152832031
    8. ' sys' → logprob: -5.200569152832031
    9. '=input' → logprob: -5.200569152832031
    10. '=sys' → logprob: -5.575569152832031

Token 141: ' input' (ID: 3422)
  Prédit: 'input'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'input' → logprob: -0.02326015569269657
    2. ' input' → logprob: -3.7732601165771484
    3. 'sys' → logprob: -11.273260116577148
    4. ' sys' → logprob: -13.648260116577148
    5. ' ' → logprob: -15.773260116577148
    6. '	input' → logprob: -15.898260116577148
    7. '<input' → logprob: -16.14826011657715
    8. '(input' → logprob: -16.39826011657715
    9. '=input' → logprob: -16.52326011657715
    10. 'in' → logprob: -17.02326011657715

Token 142: '().' (ID: 1454)
  Prédit: '().'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '().' → logprob: -0.000987200066447258
    2. '()' → logprob: -7.0009870529174805
    3. '()]' → logprob: -9.50098705291748
    4. ' ().' → logprob: -14.62598705291748
    5. '()].' → logprob: -16.000988006591797
    6. '()
' → logprob: -16.250988006591797
    7. '(' → logprob: -16.375988006591797
    8. '().__' → logprob: -16.625988006591797
    9. '()[' → logprob: -16.875988006591797
    10. ' ()' → logprob: -16.875988006591797

Token 143: 'split' (ID: 13627)
  Prédit: 'split'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'split' → logprob: -0.4854186773300171
    2. 'strip' → logprob: -0.9854186773300171
    3. 'rstrip' → logprob: -4.485418796539307
    4. ' split' → logprob: -12.735418319702148
    5. ' strip' → logprob: -12.985418319702148
    6. 'spl' → logprob: -16.61041831970215
    7. 'read' → logprob: -16.73541831970215
    8. '(split' → logprob: -17.48541831970215
    9. '().' → logprob: -17.98541831970215
    10. 'rs' → logprob: -18.73541831970215

Token 144: '()]
' (ID: 67155)
  Prédit: '()]'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '()]' → logprob: -6.432518421206623e-05
    2. '()' → logprob: -9.7500638961792
    3. '(' → logprob: -12.1250638961792
    4. '()]
' → logprob: -14.8750638961792
    5. ']' → logprob: -16.625064849853516
    6. ' ()' → logprob: -16.875064849853516
    7. '()],' → logprob: -17.750064849853516
    8. '())' → logprob: -17.875064849853516
    9. '()][' → logprob: -17.875064849853516
    10. '()].' → logprob: -18.250064849853516

Token 145: 'def' (ID: 1314)
  Prédit: '
'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '
' → logprob: -0.5237962007522583
    2. 'def' → logprob: -0.8987962007522583
    3. ' 
' → logprob: -8.648796081542969
    4. '()' → logprob: -9.273796081542969
    5. '<|end|>' → logprob: -9.273796081542969
    6. '  
' → logprob: -9.398796081542969
    7. '
' → logprob: -10.023796081542969
    8. ' def' → logprob: -10.023796081542969
    9. '

' → logprob: -10.523796081542969
    10. ')' → logprob: -10.898796081542969

Token 146: ' LF' (ID: 107653)
  Prédit: 'I'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'I' → logprob: -0.057398226112127304
    2. ' I' → logprob: -2.9323983192443848
    3. 'II' → logprob: -6.557398319244385
    4. 'int' → logprob: -8.182397842407227
    5. 'LS' → logprob: -8.432397842407227
    6. ' II' → logprob: -8.682397842407227
    7. 'INT' → logprob: -9.307397842407227
    8. 'L' → logprob: -9.557397842407227
    9. 'LI' → logprob: -9.682397842407227
    10. ' ' → logprob: -10.557397842407227

Token 147: '():' (ID: 9442)
  Prédit: '():'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '():' → logprob: -2.963691804325208e-05
    2. '()' → logprob: -10.750029563903809
    3. ' ():' → logprob: -12.000029563903809
    4. '():
' → logprob: -13.250029563903809
    5. '(' → logprob: -17.250030517578125
    6. ' ()' → logprob: -17.375030517578125
    7. '().' → logprob: -17.750030517578125
    8. 'def' → logprob: -18.000030517578125
    9. '():

' → logprob: -18.375030517578125
    10. ':' → logprob: -18.375030517578125

Token 148: ' return' (ID: 622)
  Prédit: '['
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '[' → logprob: -0.26798364520072937
    2. ' [' → logprob: -1.5179836750030518
    3. '[int' → logprob: -5.017983436584473
    4. 'return' → logprob: -5.392983436584473
    5. ' return' → logprob: -5.642983436584473
    6. '[x' → logprob: -7.142983436584473
    7. ' ' → logprob: -8.892983436584473
    8. '   ' → logprob: -10.017983436584473
    9. '[list' → logprob: -10.017983436584473
    10. 'list' → logprob: -10.267983436584473

Token 149: ' [' (ID: 723)
  Prédit: '['
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '[' → logprob: -0.07228684425354004
    2. '[list' → logprob: -3.07228684425354
    3. ' [' → logprob: -3.82228684425354
    4. 'list' → logprob: -7.322286605834961
    5. '[int' → logprob: -8.072286605834961
    6. '[x' → logprob: -8.697286605834961
    7. '[List' → logprob: -8.822286605834961
    8. '[input' → logprob: -9.322286605834961
    9. '[f' → logprob: -9.822286605834961
    10. '[type' → logprob: -10.697286605834961

Token 150: 'float' (ID: 7829)
  Prédit: 'float'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'float' → logprob: -7.941850526549388e-06
    2. ' float' → logprob: -11.750007629394531
    3. 'flo' → logprob: -19.37500762939453
    4. '```' → logprob: -19.62500762939453
    5. '(float' → logprob: -19.87500762939453
    6. '	float' → logprob: -20.37500762939453
    7. ' ' → logprob: -20.87500762939453
    8. 'int' → logprob: -21.12500762939453
    9. '
' → logprob: -21.37500762939453
    10. '=float' → logprob: -21.37500762939453

Token 151: '(x' (ID: 4061)
  Prédit: '(x'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(x' → logprob: -6.153795766294934e-06
    2. '(' → logprob: -12.375005722045898
    3. ' (' → logprob: -13.250005722045898
    4. '(float' → logprob: -16.7500057220459
    5. 'x' → logprob: -17.8750057220459
    6. '<|end|>' → logprob: -18.0000057220459
    7. ' ' → logprob: -18.6250057220459
    8. '(f' → logprob: -19.3750057220459
    9. '](' → logprob: -19.5000057220459
    10. '(s' → logprob: -19.5000057220459

Token 152: ')' (ID: 8)
  Prédit: '(x'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(x' → logprob: -0.005835418589413166
    2. '()' → logprob: -5.25583553314209
    3. ')' → logprob: -7.63083553314209
    4. '(' → logprob: -9.63083553314209
    5. 'for' → logprob: -10.75583553314209
    6. ' (' → logprob: -11.13083553314209
    7. ' ()' → logprob: -12.50583553314209
    8. ' for' → logprob: -12.63083553314209
    9. ']' → logprob: -13.25583553314209
    10. '(float' → logprob: -13.88083553314209

Token 153: ' for' (ID: 395)
  Prédit: '(x'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(x' → logprob: -0.0590038076043129
    2. ' for' → logprob: -3.4340038299560547
    3. 'for' → logprob: -4.059003829956055
    4. '()' → logprob: -5.434003829956055
    5. '(' → logprob: -5.934003829956055
    6. ' (' → logprob: -7.684003829956055
    7. ')' → logprob: -8.684003829956055
    8. ']' → logprob: -10.059003829956055
    9. '(input' → logprob: -10.184003829956055
    10. ' ' → logprob: -10.684003829956055

Token 154: ' x' (ID: 1215)
  Prédit: ' input'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' input' → logprob: -0.18209463357925415
    2. 'input' → logprob: -1.8070945739746094
    3. ' x' → logprob: -6.682094573974609
    4. '(input' → logprob: -7.307094573974609
    5. 'x' → logprob: -8.30709457397461
    6. ' ' → logprob: -8.93209457397461
    7. '<|end|>' → logprob: -11.30709457397461
    8. '=input' → logprob: -11.43209457397461
    9. 's' → logprob: -12.30709457397461
    10. '(x' → logprob: -12.30709457397461

Token 155: ' in' (ID: 306)
  Prédit: ' in'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' in' → logprob: -0.0033399024978280067
    2. 'in' → logprob: -5.878339767456055
    3. '(input' → logprob: -8.128339767456055
    4. ' ' → logprob: -9.753339767456055
    5. 'input' → logprob: -9.878339767456055
    6. '(x' → logprob: -10.128339767456055
    7. ' input' → logprob: -10.378339767456055
    8. '(' → logprob: -10.503339767456055
    9. '=input' → logprob: -11.753339767456055
    10. ')' → logprob: -12.253339767456055

Token 156: ' input' (ID: 3422)
  Prédit: 'input'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'input' → logprob: -0.16023123264312744
    2. ' input' → logprob: -1.9102312326431274
    3. '(input' → logprob: -11.910231590270996
    4. ' ' → logprob: -16.16023063659668
    5. 'output' → logprob: -16.66023063659668
    6. '	input' → logprob: -17.28523063659668
    7. 'in' → logprob: -17.41023063659668
    8. 'import' → logprob: -17.53523063659668
    9. 'x' → logprob: -17.91023063659668
    10. '
' → logprob: -18.03523063659668

Token 157: '().' (ID: 1454)
  Prédit: '().'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '().' → logprob: -7.941850526549388e-06
    2. '()' → logprob: -11.750007629394531
    3. ' ().' → logprob: -17.12500762939453
    4. '()].' → logprob: -19.25000762939453
    5. '()]' → logprob: -19.62500762939453
    6. '(' → logprob: -20.00000762939453
    7. '().'' → logprob: -20.75000762939453
    8. '()).' → logprob: -20.75000762939453
    9. '()[' → logprob: -21.37500762939453
    10. '().__' → logprob: -21.50000762939453

Token 158: 'split' (ID: 13627)
  Prédit: 'split'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'split' → logprob: -4.084206375409849e-05
    2. 'strip' → logprob: -10.625041007995605
    3. ' split' → logprob: -11.375041007995605
    4. '().' → logprob: -12.750041007995605
    5. '.split' → logprob: -13.375041007995605
    6. '(split' → logprob: -15.125041007995605
    7. 'rstrip' → logprob: -16.00004005432129
    8. '()' → logprob: -16.12504005432129
    9. 'plit' → logprob: -16.75004005432129
    10. 'spl' → logprob: -17.62504005432129

Token 159: '()]
' (ID: 67155)
  Prédit: '()]'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '()]' → logprob: -2.5107177862082608e-05
    2. '()' → logprob: -10.750024795532227
    3. ']' → logprob: -13.125024795532227
    4. '()]
' → logprob: -14.000024795532227
    5. '(' → logprob: -14.875024795532227
    6. ']()' → logprob: -15.625024795532227
    7. ' ()' → logprob: -15.875024795532227
    8. '()][' → logprob: -18.625024795532227
    9. '())' → logprob: -18.750024795532227
    10. '()].' → logprob: -18.875024795532227

Token 160: 'def' (ID: 1314)
  Prédit: 'def'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'def' → logprob: -0.00018006093159783632
    2. '
' → logprob: -8.6251802444458
    3. '\' → logprob: -16.000179290771484
    4. ' def' → logprob: -16.250179290771484
    5. ' 
' → logprob: -16.750179290771484
    6. '    
' → logprob: -17.250179290771484
    7. 'de' → logprob: -17.250179290771484
    8. '  
' → logprob: -17.375179290771484
    9. '#' → logprob: -17.500179290771484
    10. '

' → logprob: -17.750179290771484

Token 161: ' LI' (ID: 14875)
  Prédit: 'LS'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'LS' → logprob: -0.6671452522277832
    2. 'I' → logprob: -0.7921452522277832
    3. 'L' → logprob: -4.417145252227783
    4. 'LI' → logprob: -4.667145252227783
    5. 'S' → logprob: -4.792145252227783
    6. 'II' → logprob: -6.542145252227783
    7. 'int' → logprob: -7.667145252227783
    8. 'LL' → logprob: -7.792145252227783
    9. 'INT' → logprob: -7.792145252227783
    10. 'IS' → logprob: -8.167144775390625

Token 162: '_' (ID: 62)
  Prédit: '():'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '():' → logprob: -0.03791340813040733
    2. '()' → logprob: -3.6629133224487305
    3. 'S' → logprob: -5.2879133224487305
    4. 'n' → logprob: -6.0379133224487305
    5. '_list' → logprob: -7.6629133224487305
    6. 'ST' → logprob: -7.6629133224487305
    7. 'T' → logprob: -7.6629133224487305
    8. '_line' → logprob: -8.03791332244873
    9. '_' → logprob: -8.16291332244873
    10. '():
' → logprob: -8.28791332244873

Token 163: '():' (ID: 9442)
  Prédit: '0'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '0' → logprob: -0.5474305748939514
    2. '_' → logprob: -1.9224305152893066
    3. 'n' → logprob: -1.9224305152893066
    4. 'ST' → logprob: -3.1724305152893066
    5. '()' → logprob: -3.9224305152893066
    6. 'STR' → logprob: -4.172430515289307
    7. 'S' → logprob: -5.297430515289307
    8. 'MAP' → logprob: -5.297430515289307
    9. 'map' → logprob: -5.297430515289307
    10. 'SR' → logprob: -5.422430515289307

Token 164: ' return' (ID: 622)
  Prédit: 'lambda'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'lambda' → logprob: -1.0439424514770508
    2. '[int' → logprob: -1.2939424514770508
    3. ' lambda' → logprob: -1.5439424514770508
    4. ' return' → logprob: -3.168942451477051
    5. 'return' → logprob: -3.543942451477051
    6. '[' → logprob: -3.543942451477051
    7. '()[' → logprob: -4.293942451477051
    8. '(lambda' → logprob: -4.418942451477051
    9. ' [' → logprob: -4.668942451477051
    10. '[x' → logprob: -5.043942451477051

Token 165: ' [' (ID: 723)
  Prédit: '[int'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '[int' → logprob: -0.0004284043679945171
    2. ' [' → logprob: -8.125428199768066
    3. '[list' → logprob: -10.000428199768066
    4. '[x' → logprob: -10.625428199768066
    5. '[len' → logprob: -10.875428199768066
    6. '[' → logprob: -10.875428199768066
    7. '[i' → logprob: -11.375428199768066
    8. '[Int' → logprob: -13.250428199768066
    9. '[input' → logprob: -13.250428199768066
    10. '[l' → logprob: -13.375428199768066

Token 166: 'int' (ID: 491)
  Prédit: 'int'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'int' → logprob: -5.512236498361744e-07
    2. '(int' → logprob: -15.625000953674316
    3. '[int' → logprob: -15.875000953674316
    4. ' int' → logprob: -16.25
    5. 'x' → logprob: -17.625
    6. 'a' → logprob: -18.25
    7. '	int' → logprob: -19.125
    8. '```' → logprob: -19.625
    9. '<int' → logprob: -19.75
    10. ' ' → logprob: -20.375

Token 167: '(x' (ID: 4061)
  Prédit: '(x'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(x' → logprob: 0.0
    2. 'x' → logprob: -18.0
    3. '(' → logprob: -19.25
    4. '(a' → logprob: -20.625
    5. ' (' → logprob: -21.0
    6. '(input' → logprob: -22.375
    7. '(i' → logprob: -22.375
    8. '(t' → logprob: -23.0
    9. '(X' → logprob: -23.125
    10. '(s' → logprob: -23.25

Token 168: ')-' (ID: 14080)
  Prédit: '(x'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '(x' → logprob: -0.00023441045777872205
    2. '()-' → logprob: -9.375234603881836
    3. '(a' → logprob: -10.000234603881836
    4. '-' → logprob: -10.375234603881836
    5. '(input' → logprob: -10.750234603881836
    6. '(y' → logprob: -11.625234603881836
    7. '(xx' → logprob: -11.875234603881836
    8. 'a' → logprob: -12.125234603881836
    9. '(i' → logprob: -12.250234603881836
    10. '1' → logprob: -12.500234603881836

Token 169: '1' (ID: 16)
  Prédit: '1'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '1' → logprob: -0.00861468818038702
    2. ' ' → logprob: -4.758614540100098
    3. ' for' → logprob: -16.133615493774414
    4. '  ' → logprob: -17.758615493774414
    5. ')' → logprob: -17.758615493774414
    6. 'int' → logprob: -18.008615493774414
    7. 'for' → logprob: -18.508615493774414
    8. ' )' → logprob: -19.383615493774414
    9. ' ' → logprob: -19.508615493774414
    10. '
' → logprob: -19.758615493774414

Token 170: ' for' (ID: 395)
  Prédit: ' for'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' for' → logprob: -0.1820392906665802
    2. '()' → logprob: -2.057039260864258
    3. 'for' → logprob: -3.307039260864258
    4. '(x' → logprob: -6.682039260864258
    5. ')' → logprob: -7.307039260864258
    6. ' ' → logprob: -10.682039260864258
    7. '	for' → logprob: -11.307039260864258
    8. ' x' → logprob: -12.307039260864258
    9. ' ()' → logprob: -12.307039260864258
    10. ']' → logprob: -13.307039260864258

Token 171: ' x' (ID: 1215)
  Prédit: 'x'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'x' → logprob: -0.07889000326395035
    2. ' x' → logprob: -2.578890085220337
    3. '(x' → logprob: -16.703889846801758
    4. ' ' → logprob: -16.703889846801758
    5. 'token' → logprob: -17.328889846801758
    6. '
' → logprob: -18.578889846801758
    7. '	x' → logprob: -18.703889846801758
    8. 's' → logprob: -19.078889846801758
    9. 'int' → logprob: -19.328889846801758
    10. ' in' → logprob: -20.078889846801758

Token 172: ' in' (ID: 306)
  Prédit: ' in'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' in' → logprob: -0.19606325030326843
    2. ' x' → logprob: -2.821063280105591
    3. 'x' → logprob: -2.946063280105591
    4. 'in' → logprob: -2.946063280105591
    5. '(x' → logprob: -4.321063041687012
    6. ' ' → logprob: -9.946063041687012
    7. ')' → logprob: -10.196063041687012
    8. ']' → logprob: -12.321063041687012
    9. '()' → logprob: -12.321063041687012
    10. '<|end|>' → logprob: -12.821063041687012

Token 173: ' input' (ID: 3422)
  Prédit: 'input'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'input' → logprob: -0.0380416102707386
    2. ' input' → logprob: -3.288041591644287
    3. 'x' → logprob: -16.663042068481445
    4. '(input' → logprob: -19.413042068481445
    5. ' x' → logprob: -19.913042068481445
    6. 'output' → logprob: -20.413042068481445
    7. '	input' → logprob: -20.663042068481445
    8. ' ' → logprob: -20.663042068481445
    9. 'in' → logprob: -20.913042068481445
    10. '_input' → logprob: -20.913042068481445

Token 174: '().' (ID: 1454)
  Prédit: '().'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '().' → logprob: -2.696889623621246e-06
    2. '()' → logprob: -12.87500286102295
    3. ' ().' → logprob: -16.500001907348633
    4. '(' → logprob: -18.375001907348633
    5. '()].' → logprob: -19.750001907348633
    6. '().__' → logprob: -20.000001907348633
    7. '.' → logprob: -21.250001907348633
    8. '()]' → logprob: -21.500001907348633
    9. '().'' → logprob: -21.750001907348633
    10. '()[' → logprob: -21.875001907348633

Token 175: 'split' (ID: 13627)
  Prédit: 'split'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'split' → logprob: -5.200166469876422e-06
    2. ' split' → logprob: -12.500004768371582
    3. 'strip' → logprob: -13.625004768371582
    4. '().' → logprob: -16.1250057220459
    5. '.split' → logprob: -16.5000057220459
    6. '()' → logprob: -17.6250057220459
    7. '(split' → logprob: -17.8750057220459
    8. ')' → logprob: -19.3750057220459
    9. 'spl' → logprob: -19.6250057220459
    10. 'rstrip' → logprob: -20.1250057220459

Token 176: '()]
' (ID: 67155)
  Prédit: '()]'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '()]' → logprob: -8.566264295950532e-05
    2. '()' → logprob: -9.500085830688477
    3. ']' → logprob: -11.500085830688477
    4. ']()' → logprob: -14.875085830688477
    5. '(' → logprob: -15.625085830688477
    6. '()]
' → logprob: -16.000085830688477
    7. ' ()' → logprob: -18.125085830688477
    8. '())' → logprob: -18.250085830688477
    9. '()][' → logprob: -18.625085830688477
    10. ')]' → logprob: -18.875085830688477

Token 177: 'def' (ID: 1314)
  Prédit: 'def'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'def' → logprob: -0.00038777425652369857
    2. '
' → logprob: -8.125388145446777
    3. '\' → logprob: -10.375388145446777
    4. ')' → logprob: -11.000388145446777
    5. '#' → logprob: -11.125388145446777
    6. '' → logprob: -12.375388145446777
    7. '()' → logprob: -12.625388145446777
    8. ' 
' → logprob: -13.000388145446777
    9. '```' → logprob: -13.000388145446777
    10. '    
' → logprob: -13.625388145446777

Token 178: ' II' (ID: 9839)
  Prédit: 'I'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'I' → logprob: -0.5819720029830933
    2. 'LS' → logprob: -0.9569720029830933
    3. 'S' → logprob: -3.831972122192383
    4. 'L' → logprob: -4.331972122192383
    5. 'II' → logprob: -4.706972122192383
    6. 'INT' → logprob: -4.956972122192383
    7. 'int' → logprob: -6.456972122192383
    8. 'IN' → logprob: -7.081972122192383
    9. 'LI' → logprob: -7.331972122192383
    10. 'IS' → logprob: -7.456972122192383

Token 179: '():' (ID: 9442)
  Prédit: '():'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '():' → logprob: -0.04860054701566696
    2. '()' → logprob: -3.048600435256958
    3. '():
' → logprob: -12.173600196838379
    4. ' ()' → logprob: -12.298600196838379
    5. ' ():' → logprob: -13.173600196838379
    6. '().' → logprob: -14.673600196838379
    7. '()`' → logprob: -15.173600196838379
    8. '(' → logprob: -15.298600196838379
    9. '()>' → logprob: -15.923600196838379
    10. '()]' → logprob: -16.048601150512695

Token 180: ' return' (ID: 622)
  Prédit: 'int'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'int' → logprob: -0.25194409489631653
    2. ' int' → logprob: -1.5019440650939941
    3. ' ' → logprob: -11.251944541931152
    4. ' return' → logprob: -14.126944541931152
    5. '(int' → logprob: -14.251944541931152
    6. '=int' → logprob: -15.251944541931152
    7. 'return' → logprob: -15.751944541931152
    8. ' ' → logprob: -16.251943588256836
    9. '	int' → logprob: -16.376943588256836
    10. ' 
' → logprob: -17.126943588256836

Token 181: ' int' (ID: 677)
  Prédit: 'int'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'int' → logprob: -0.0001584850688232109
    2. ' int' → logprob: -8.750158309936523
    3. '(int' → logprob: -18.000158309936523
    4. '[int' → logprob: -21.000158309936523
    5. '=int' → logprob: -21.000158309936523
    6. 'in' → logprob: -21.250158309936523
    7. '	int' → logprob: -21.375158309936523
    8. '<int' → logprob: -21.625158309936523
    9. ' ' → logprob: -21.625158309936523
    10. 'ints' → logprob: -22.500158309936523

Token 182: '(input' (ID: 10054)
  Prédit: '(input'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(input' → logprob: -0.00036049127811565995
    2. '(' → logprob: -8.000360488891602
    3. 'input' → logprob: -10.625360488891602
    4. '(
' → logprob: -15.000360488891602
    5. ' (' → logprob: -15.250360488891602
    6. ' input' → logprob: -16.5003604888916
    7. '(sys' → logprob: -17.6253604888916
    8. '(

' → logprob: -18.1253604888916
    9. '=input' → logprob: -18.2503604888916
    10. '(int' → logprob: -18.2503604888916

Token 183: '())
' (ID: 4574)
  Prédit: '())'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '())' → logprob: -0.006147650070488453
    2. '().' → logprob: -5.256147861480713
    3. '()' → logprob: -7.006147861480713
    4. ' ())' → logprob: -12.506147384643555
    5. '(' → logprob: -13.506147384643555
    6. '())
' → logprob: -14.131147384643555
    7. '()
' → logprob: -14.506147384643555
    8. '();)' → logprob: -15.506147384643555
    9. ')' → logprob: -15.756147384643555
    10. '()]' → logprob: -15.756147384643555

Token 184: 'def' (ID: 1314)
  Prédit: 'def'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'def' → logprob: -0.000396826391806826
    2. '
' → logprob: -8.375396728515625
    3. '

' → logprob: -10.625396728515625
    4. '#' → logprob: -10.750396728515625
    5. '<|end|>' → logprob: -10.750396728515625
    6. '  
' → logprob: -11.125396728515625
    7. 'D' → logprob: -11.125396728515625
    8. '\' → logprob: -11.250396728515625
    9. '    
' → logprob: -11.875396728515625
    10. ' def' → logprob: -11.875396728515625

Token 185: ' IF' (ID: 20505)
  Prédit: 'S'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'S' → logprob: -0.36088094115257263
    2. 'LS' → logprob: -1.360880970954895
    3. 'SI' → logprob: -3.1108808517456055
    4. 'IS' → logprob: -7.2358808517456055
    5. 'I' → logprob: -7.6108808517456055
    6. 'SS' → logprob: -8.235880851745605
    7. 'MI' → logprob: -9.235880851745605
    8. 's' → logprob: -9.360880851745605
    9. 'LL' → logprob: -9.360880851745605
    10. ' S' → logprob: -9.610880851745605

Token 186: '():' (ID: 9442)
  Prédit: '():'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '():' → logprob: -0.023298002779483795
    2. '()' → logprob: -3.7732980251312256
    3. ' ()' → logprob: -10.148298263549805
    4. ' ():' → logprob: -11.898298263549805
    5. '().' → logprob: -13.023298263549805
    6. '()>' → logprob: -13.398298263549805
    7. '();' → logprob: -14.148298263549805
    8. '():
' → logprob: -14.148298263549805
    9. '()*' → logprob: -15.273298263549805
    10. '(' → logprob: -15.398298263549805

Token 187: ' return' (ID: 622)
  Prédit: 'float'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'float' → logprob: -0.0007318547577597201
    2. ' float' → logprob: -7.250731945037842
    3. 'int' → logprob: -10.750731468200684
    4. '(float' → logprob: -15.375731468200684
    5. 'loat' → logprob: -16.250732421875
    6. '=float' → logprob: -16.625732421875
    7. '	float' → logprob: -17.875732421875
    8. 'flo' → logprob: -18.375732421875
    9. 'f' → logprob: -20.125732421875
    10. ',float' → logprob: -20.375732421875

Token 188: ' float' (ID: 4428)
  Prédit: 'float'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'float' → logprob: -1.306760805164231e-05
    2. ' float' → logprob: -11.25001335144043
    3. 'int' → logprob: -17.25001335144043
    4. '	float' → logprob: -19.62501335144043
    5. '(float' → logprob: -20.12501335144043
    6. '=float' → logprob: -20.87501335144043
    7. 'flo' → logprob: -20.87501335144043
    8. 'fl' → logprob: -21.25001335144043
    9. 'input' → logprob: -22.12501335144043
    10. 'f' → logprob: -22.50001335144043

Token 189: '(input' (ID: 10054)
  Prédit: '(input'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(input' → logprob: -0.06509637087583542
    2. '()' → logprob: -2.815096378326416
    3. '(' → logprob: -5.815096378326416
    4. ' (' → logprob: -9.315095901489258
    5. 'input' → logprob: -10.690095901489258
    6. ' ()' → logprob: -11.690095901489258
    7. '()(' → logprob: -12.315095901489258
    8. '().' → logprob: -12.440095901489258
    9. '(x' → logprob: -12.440095901489258
    10. '();' → logprob: -13.440095901489258

Token 190: '())
' (ID: 4574)
  Prédit: '())'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '())' → logprob: -0.0033576088026165962
    2. '()' → logprob: -6.003357410430908
    3. ')' → logprob: -7.128357410430908
    4. '()]' → logprob: -9.753357887268066
    5. ' ())' → logprob: -11.003357887268066
    6. '(' → logprob: -13.378357887268066
    7. '())
' → logprob: -13.753357887268066
    8. '()
' → logprob: -14.628357887268066
    9. '();)' → logprob: -14.628357887268066
    10. '().' → logprob: -14.878357887268066

Token 191: 'def' (ID: 1314)
  Prédit: 'def'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'def' → logprob: -0.2596469521522522
    2. '
' → logprob: -1.5096468925476074
    3. 'class' → logprob: -5.634646892547607
    4. '<|end|>' → logprob: -6.509646892547607
    5. '#' → logprob: -6.759646892547607
    6. '

' → logprob: -7.134646892547607
    7. '\' → logprob: -9.009647369384766
    8. '' → logprob: -9.134647369384766
    9. '  
' → logprob: -9.384647369384766
    10. ' 
' → logprob: -9.384647369384766

Token 192: ' LS' (ID: 60790)
  Prédit: 'S'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'S' → logprob: -0.09020201861858368
    2. 'LS' → logprob: -3.0902020931243896
    3. 'IS' → logprob: -3.7152020931243896
    4. 'I' → logprob: -5.2152018547058105
    5. 'SI' → logprob: -5.3402018547058105
    6. 's' → logprob: -5.5902018547058105
    7. 'input' → logprob: -6.5902018547058105
    8. 'SS' → logprob: -7.8402018547058105
    9. 'print' → logprob: -8.840202331542969
    10. 'ST' → logprob: -8.965202331542969

Token 193: '():' (ID: 9442)
  Prédit: '():'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '():' → logprob: -0.061993010342121124
    2. '()' → logprob: -2.81199312210083
    3. ' ()' → logprob: -11.311992645263672
    4. ' ():' → logprob: -12.311992645263672
    5. '().' → logprob: -12.686992645263672
    6. '()>' → logprob: -12.936992645263672
    7. '():
' → logprob: -14.061992645263672
    8. '()[' → logprob: -14.311992645263672
    9. '()]' → logprob: -14.811992645263672
    10. '();' → logprob: -15.311992645263672

Token 194: ' return' (ID: 622)
  Prédit: 'return'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'return' → logprob: -0.5813746452331543
    2. 'input' → logprob: -0.8313746452331543
    3. ' return' → logprob: -6.081374645233154
    4. 'list' → logprob: -6.206374645233154
    5. ' input' → logprob: -7.081374645233154
    6. '(input' → logprob: -8.956375122070312
    7. 'def' → logprob: -9.081375122070312
    8. '[input' → logprob: -11.581375122070312
    9. 'sys' → logprob: -11.581375122070312
    10. 'str' → logprob: -12.581375122070312

Token 195: ' [' (ID: 723)
  Prédit: 'input'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'input' → logprob: -0.0006942047039046884
    2. 'list' → logprob: -7.500694274902344
    3. '[input' → logprob: -9.000694274902344
    4. ' input' → logprob: -11.000694274902344
    5. 'sys' → logprob: -14.125694274902344
    6. '(input' → logprob: -14.875694274902344
    7. '=input' → logprob: -17.000694274902344
    8. ' list' → logprob: -18.000694274902344
    9. '<input' → logprob: -19.125694274902344
    10. 'inp' → logprob: -19.250694274902344

Token 196: 'list' (ID: 2641)
  Prédit: 'x'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'x' → logprob: -0.005252256989479065
    2. 's' → logprob: -5.505252361297607
    3. 'input' → logprob: -6.755252361297607
    4. 'w' → logprob: -12.50525188446045
    5. ' x' → logprob: -13.50525188446045
    6. 'l' → logprob: -13.88025188446045
    7. 'list' → logprob: -14.13025188446045
    8. 'sys' → logprob: -14.50525188446045
    9. 'word' → logprob: -14.75525188446045
    10. 'xx' → logprob: -16.130252838134766

Token 197: '(x' (ID: 4061)
  Prédit: '(input'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(input' → logprob: -0.006738223135471344
    2. '(map' → logprob: -5.006738185882568
    3. '(' → logprob: -11.631738662719727
    4. 'input' → logprob: -12.256738662719727
    5. '(str' → logprob: -12.381738662719727
    6. '(x' → logprob: -12.381738662719727
    7. 'map' → logprob: -14.631738662719727
    8. '(s' → logprob: -15.381738662719727
    9. '(sys' → logprob: -16.131738662719727
    10. '=input' → logprob: -16.881738662719727

Token 198: ')' (ID: 8)
  Prédit: '(input'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '(input' → logprob: -0.0012340416433289647
    2. 'input' → logprob: -6.87623405456543
    3. '(map' → logprob: -9.37623405456543
    4. '(' → logprob: -10.25123405456543
    5. '(strip' → logprob: -10.62623405456543
    6. '=input' → logprob: -11.00123405456543
    7. '()' → logprob: -11.37623405456543
    8. '(str' → logprob: -12.00123405456543
    9. 'for' → logprob: -12.25123405456543
    10. '()]' → logprob: -12.37623405456543

Token 199: ' for' (ID: 395)
  Prédit: '(input'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(input' → logprob: -0.017430908977985382
    2. 'for' → logprob: -4.767430782318115
    3. 'input' → logprob: -4.767430782318115
    4. '()' → logprob: -9.267431259155273
    5. ' for' → logprob: -9.392431259155273
    6. '(' → logprob: -9.767431259155273
    7. '=input' → logprob: -11.642431259155273
    8. '(strip' → logprob: -11.892431259155273
    9. '(str' → logprob: -12.142431259155273
    10. ']' → logprob: -12.642431259155273

Token 200: ' x' (ID: 1215)
  Prédit: 'input'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'input' → logprob: -0.002481842413544655
    2. ' input' → logprob: -6.002481937408447
    3. '(input' → logprob: -12.002481460571289
    4. 'x' → logprob: -18.00248146057129
    5. 'in' → logprob: -18.50248146057129
    6. '=input' → logprob: -18.87748146057129
    7. '	input' → logprob: -19.37748146057129
    8. ' ' → logprob: -19.50248146057129
    9. '<input' → logprob: -20.12748146057129
    10. '
' → logprob: -20.12748146057129

Token 201: ' in' (ID: 306)
  Prédit: '(input'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(input' → logprob: -0.4117736518383026
    2. 'input' → logprob: -1.161773681640625
    3. '(' → logprob: -4.536773681640625
    4. ' input' → logprob: -4.661773681640625
    5. ' in' → logprob: -5.786773681640625
    6. 'in' → logprob: -7.036773681640625
    7. '=input' → logprob: -8.036773681640625
    8. ' (' → logprob: -9.286773681640625
    9. ',input' → logprob: -10.036773681640625
    10. '()' → logprob: -11.786773681640625

Token 202: ' input' (ID: 3422)
  Prédit: 'input'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'input' → logprob: -0.0031794982496649027
    2. ' input' → logprob: -5.753179550170898
    3. '(input' → logprob: -13.503179550170898
    4. 'sys' → logprob: -15.003179550170898
    5. ' ' → logprob: -15.878179550170898
    6. 'list' → logprob: -17.0031795501709
    7. 'map' → logprob: -17.5031795501709
    8. 'str' → logprob: -17.6281795501709
    9. ' sys' → logprob: -18.5031795501709
    10. '	input' → logprob: -18.5031795501709

Token 203: '().' (ID: 1454)
  Prédit: '().'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '().' → logprob: -0.0003622793301474303
    2. '()' → logprob: -8.500362396240234
    3. '()]' → logprob: -8.750362396240234
    4. '()].' → logprob: -15.375362396240234
    5. ' ().' → logprob: -16.875362396240234
    6. '()][' → logprob: -16.875362396240234
    7. '().__' → logprob: -17.125362396240234
    8. '())' → logprob: -17.750362396240234
    9. '()
' → logprob: -17.875362396240234
    10. '.strip' → logprob: -18.000362396240234

Token 204: 'split' (ID: 13627)
  Prédit: 'strip'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'strip' → logprob: -0.000523842521943152
    2. 'rstrip' → logprob: -7.750524044036865
    3. '().' → logprob: -9.500523567199707
    4. 'split' → logprob: -11.125523567199707
    5. ' strip' → logprob: -12.875523567199707
    6. 'str' → logprob: -14.375523567199707
    7. '.strip' → logprob: -15.375523567199707
    8. '()' → logprob: -15.500523567199707
    9. '(strip' → logprob: -17.250524520874023
    10. 'read' → logprob: -18.750524520874023

Token 205: '()]
' (ID: 67155)
  Prédit: '()]'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '()]' → logprob: -7.684157026233152e-05
    2. '()' → logprob: -9.500077247619629
    3. '()]
' → logprob: -13.875077247619629
    4. '(' → logprob: -14.500077247619629
    5. '()[' → logprob: -15.750077247619629
    6. '('' → logprob: -16.250076293945312
    7. ' ()' → logprob: -16.500076293945312
    8. '().' → logprob: -16.750076293945312
    9. '())' → logprob: -16.875076293945312
    10. '()][' → logprob: -17.000076293945312

Token 206: 'def' (ID: 1314)
  Prédit: 'def'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'def' → logprob: -0.004207563120871782
    2. 'D' → logprob: -5.629207611083984
    3. '<|end|>' → logprob: -8.754207611083984
    4. '
' → logprob: -9.129207611083984
    5. '()' → logprob: -9.379207611083984
    6. '[]' → logprob: -10.129207611083984
    7. '#' → logprob: -10.379207611083984
    8. ')' → logprob: -10.504207611083984
    9. ']' → logprob: -10.879207611083984
    10. 'A' → logprob: -11.254207611083984

Token 207: ' S' (ID: 336)
  Prédit: 'S'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'S' → logprob: -0.028966575860977173
    2. 'L' → logprob: -3.6539666652679443
    3. 'SS' → logprob: -6.528966426849365
    4. 's' → logprob: -7.903966426849365
    5. ' S' → logprob: -8.403966903686523
    6. 'I' → logprob: -8.403966903686523
    7. 'l' → logprob: -8.653966903686523
    8. 'LI' → logprob: -9.778966903686523
    9. 'LL' → logprob: -10.153966903686523
    10. 'LS' → logprob: -10.278966903686523

Token 208: '():' (ID: 9442)
  Prédit: '()'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '()' → logprob: -0.8811373114585876
    2. 'tring' → logprob: -1.0061373710632324
    3. '():' → logprob: -2.2561373710632324
    4. 'tr' → logprob: -2.5061373710632324
    5. '=' → logprob: -4.381137371063232
    6. 'TR' → logprob: -4.381137371063232
    7. ' =' → logprob: -5.381137371063232
    8. 'tri' → logprob: -6.756137371063232
    9. 't' → logprob: -6.881137371063232
    10. 'trim' → logprob: -7.131137371063232

Token 209: ' return' (ID: 622)
  Prédit: 'input'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'input' → logprob: -0.0031890016980469227
    2. ' input' → logprob: -5.7531890869140625
    3. 'return' → logprob: -11.503189086914062
    4. 'str' → logprob: -14.503189086914062
    5. '(input' → logprob: -14.753189086914062
    6. '=input' → logprob: -15.753189086914062
    7. 'strip' → logprob: -16.003189086914062
    8. 'inp' → logprob: -17.378189086914062
    9. '	input' → logprob: -18.003189086914062
    10. ' return' → logprob: -18.253189086914062

Token 210: ' list' (ID: 1562)
  Prédit: 'input'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'input' → logprob: -4.842555426876061e-06
    2. ' input' → logprob: -12.250004768371582
    3. 'str' → logprob: -19.1250057220459
    4. '(input' → logprob: -20.1250057220459
    5. 'list' → logprob: -21.6250057220459
    6. 'sys' → logprob: -22.2500057220459
    7. 'inp' → logprob: -22.3750057220459
    8. 'strip' → logprob: -22.6250057220459
    9. '	input' → logprob: -22.7500057220459
    10. '=input' → logprob: -22.8750057220459

Token 211: '(input' (ID: 10054)
  Prédit: '(input'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(input' → logprob: -0.002172862645238638
    2. '(str' → logprob: -6.627172946929932
    3. '(' → logprob: -7.377172946929932
    4. '()' → logprob: -9.002172470092773
    5. '(strip' → logprob: -10.127172470092773
    6. 'input' → logprob: -10.627172470092773
    7. '(map' → logprob: -11.127172470092773
    8. '(sys' → logprob: -11.377172470092773
    9. '(inp' → logprob: -13.627172470092773
    10. '(int' → logprob: -13.877172470092773

Token 212: '().' (ID: 1454)
  Prédit: '().'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '().' → logprob: -0.00010533124441280961
    2. '()' → logprob: -9.250104904174805
    3. '())' → logprob: -11.625104904174805
    4. '()[' → logprob: -16.625104904174805
    5. ' ().' → logprob: -17.125104904174805
    6. '.strip' → logprob: -19.000104904174805
    7. '().__' → logprob: -19.125104904174805
    8. '()]' → logprob: -19.250104904174805
    9. '();)' → logprob: -19.375104904174805
    10. ')' → logprob: -19.875104904174805

Token 213: 'rstrip' (ID: 180429)
  Prédit: 'strip'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'strip' → logprob: -0.005233882926404476
    2. 'rstrip' → logprob: -5.2552337646484375
    3. ' strip' → logprob: -16.255233764648438
    4. 'read' → logprob: -17.380233764648438
    5. 'split' → logprob: -18.380233764648438
    6. '(strip' → logprob: -19.380233764648438
    7. 'replace' → logprob: -19.505233764648438
    8. 'str' → logprob: -19.505233764648438
    9. '_strip' → logprob: -19.630233764648438
    10. '-strip' → logprob: -19.755233764648438

Token 214: '())
' (ID: 4574)
  Prédit: '())'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '())' → logprob: -0.001213806332089007
    2. '()' → logprob: -7.126214027404785
    3. ')' → logprob: -9.126214027404785
    4. '())
' → logprob: -9.251214027404785
    5. '('\' → logprob: -9.501214027404785
    6. '()\' → logprob: -9.501214027404785
    7. '()]' → logprob: -10.626214027404785
    8. '(' → logprob: -11.501214027404785
    9. ' ())' → logprob: -12.001214027404785
    10. '().' → logprob: -12.126214027404785

Token 215: 'def' (ID: 1314)
  Prédit: 'def'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'def' → logprob: -0.01729021780192852
    2. '\' → logprob: -5.017290115356445
    3. '
' → logprob: -5.642290115356445
    4. '#' → logprob: -6.517290115356445
    5. ')' → logprob: -6.517290115356445
    6. '<|end|>' → logprob: -6.517290115356445
    7. '\n' → logprob: -7.517290115356445
    8. '()' → logprob: -7.517290115356445
    9. '[]' → logprob: -8.017290115356445
    10. 'd' → logprob: -8.517290115356445

Token 216: ' IR' (ID: 23712)
  Prédit: 'input'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'input' → logprob: -0.6033244132995605
    2. 'I' → logprob: -1.8533244132995605
    3. ' input' → logprob: -2.2283244132995605
    4. 'ST' → logprob: -2.7283244132995605
    5. 's' → logprob: -3.1033244132995605
    6. 'str' → logprob: -4.3533244132995605
    7. 'print' → logprob: -4.4783244132995605
    8. 'S' → logprob: -4.8533244132995605
    9. 'T' → logprob: -4.9783244132995605
    10. 'SS' → logprob: -5.2283244132995605

Token 217: '(n' (ID: 2406)
  Prédit: '()'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '()' → logprob: -0.0025125236716121435
    2. '():' → logprob: -6.502512454986572
    3. 'ange' → logprob: -7.502512454986572
    4. '())' → logprob: -9.00251293182373
    5. 'ANGE' → logprob: -9.12751293182373
    6. '()]' → logprob: -9.25251293182373
    7. '():
' → logprob: -10.25251293182373
    8. ' ()' → logprob: -10.87751293182373
    9. 'E' → logprob: -11.50251293182373
    10. '()}' → logprob: -11.87751293182373

Token 218: '):' (ID: 3127)
  Prédit: '):'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '):' → logprob: -0.2124851793050766
    2. '()' → logprob: -1.7124851942062378
    3. '():' → logprob: -4.587485313415527
    4. '()):
' → logprob: -7.712485313415527
    5. ')' → logprob: -8.212485313415527
    6. '):
' → logprob: -9.587485313415527
    7. ' ):' → logprob: -11.712485313415527
    8. '(n' → logprob: -11.712485313415527
    9. '[]):' → logprob: -12.087485313415527
    10. '():
' → logprob: -12.212485313415527

Token 219: ' return' (ID: 622)
  Prédit: ' return'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' return' → logprob: -0.009307271800935268
    2. 'return' → logprob: -4.759307384490967
    3. ' [' → logprob: -7.884307384490967
    4. '	return' → logprob: -8.759306907653809
    5. '   ' → logprob: -9.634306907653809
    6. ' ' → logprob: -10.009306907653809
    7. '[' → logprob: -10.509306907653809
    8. '    ' → logprob: -12.509306907653809
    9. ' for' → logprob: -12.634306907653809
    10. ' ' → logprob: -12.634306907653809

Token 220: ' [' (ID: 723)
  Prédit: '[int'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '[int' → logprob: -0.014472098089754581
    2. '[' → logprob: -4.264472007751465
    3. '[r' → logprob: -9.264472007751465
    4. '[i' → logprob: -9.639472007751465
    5. '[Int' → logprob: -9.639472007751465
    6. '[str' → logprob: -10.389472007751465
    7. '[random' → logprob: -11.014472007751465
    8. ' [' → logprob: -11.139472007751465
    9. '[l' → logprob: -12.639472007751465
    10. '[n' → logprob: -13.264472007751465

Token 221: 'II' (ID: 6013)
  Prédit: 'int'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'int' → logprob: -0.6931803226470947
    2. 'II' → logprob: -0.6931803226470947
    3. 'LI' → logprob: -11.568180084228516
    4. ' int' → logprob: -12.193180084228516
    5. ' II' → logprob: -12.193180084228516
    6. 'I' → logprob: -12.318180084228516
    7. 'INT' → logprob: -12.818180084228516
    8. '[int' → logprob: -12.943180084228516
    9. 'input' → logprob: -13.193180084228516
    10. '[' → logprob: -13.693180084228516

Token 222: '()' (ID: 416)
  Prédit: '()'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '()' → logprob: -1.5048530030981055e-06
    2. ' ()' → logprob: -13.875001907348633
    3. '()]' → logprob: -15.125001907348633
    4. '()
' → logprob: -16.250001907348633
    5. '(' → logprob: -16.500001907348633
    6. '（）' → logprob: -20.000001907348633
    7. 'for' → logprob: -21.250001907348633
    8. '()+' → logprob: -21.625001907348633
    9. '()
' → logprob: -22.000001907348633
    10. ']()' → logprob: -22.125001907348633

Token 223: ' for' (ID: 395)
  Prédit: '()'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '()' → logprob: -2.6776029699249193e-05
    2. 'for' → logprob: -11.12502670288086
    3. ' for' → logprob: -12.00002670288086
    4. ' ()' → logprob: -12.37502670288086
    5. '(' → logprob: -13.87502670288086
    6. '()
' → logprob: -15.25002670288086
    7. '()]' → logprob: -15.37502670288086
    8. ')' → logprob: -16.25002670288086
    9. ']' → logprob: -17.62502670288086
    10. '	for' → logprob: -18.25002670288086

Token 224: ' _' (ID: 1175)
  Prédit: '_'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_' → logprob: -3.023293538717553e-05
    2. ' _' → logprob: -10.625030517578125
    3. '_i' → logprob: -12.125030517578125
    4. 'i' → logprob: -15.750030517578125
    5. ' ' → logprob: -16.375030517578125
    6. '_range' → logprob: -16.750030517578125
    7. ' in' → logprob: -16.750030517578125
    8. ' i' → logprob: -17.750030517578125
    9. '_in' → logprob: -18.375030517578125
    10. '_
' → logprob: -19.000030517578125

Token 225: ' in' (ID: 306)
  Prédit: ' in'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' in' → logprob: -0.2060990035533905
    2. 'in' → logprob: -1.706099033355713
    3. 'range' → logprob: -5.456099033355713
    4. 'n' → logprob: -8.706098556518555
    5. 'i' → logprob: -9.456098556518555
    6. ' ' → logprob: -9.831098556518555
    7. ' range' → logprob: -9.956098556518555
    8. '_' → logprob: -10.331098556518555
    9. '(' → logprob: -12.081098556518555
    10. '  ' → logprob: -12.956098556518555

Token 226: ' range' (ID: 3352)
  Prédit: 'range'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'range' → logprob: -0.00671584764495492
    2. ' range' → logprob: -5.006715774536133
    3. '	range' → logprob: -15.006715774536133
    4. '(range' → logprob: -15.631715774536133
    5. 'rang' → logprob: -17.881715774536133
    6. ' ' → logprob: -18.881715774536133
    7. 'ra' → logprob: -19.256715774536133
    8. '_range' → logprob: -19.381715774536133
    9. '  ' → logprob: -19.506715774536133
    10. '_' → logprob: -19.881715774536133

Token 227: '(n' (ID: 2406)
  Prédit: '(n'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(n' → logprob: -4.36574100604048e-06
    2. '(' → logprob: -12.375004768371582
    3. 'n' → logprob: -17.750003814697266
    4. ' (' → logprob: -18.375003814697266
    5. '(
' → logprob: -19.375003814697266
    6. '	n' → logprob: -19.375003814697266
    7. ' n' → logprob: -19.625003814697266
    8. '((' → logprob: -20.625003814697266
    9. '	' → logprob: -22.375003814697266
    10. '(nd' → logprob: -23.625003814697266

Token 228: ')]
' (ID: 11587)
  Prédit: ')]'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')]' → logprob: -2.057743949990254e-05
    2. ']' → logprob: -11.250020980834961
    3. ')]
' → logprob: -12.875020980834961
    4. '()]' → logprob: -13.000020980834961
    5. ')' → logprob: -13.750020980834961
    6. '(' → logprob: -14.125020980834961
    7. '()' → logprob: -14.750020980834961
    8. ' )' → logprob: -16.37502098083496
    9. '')]' → logprob: -16.62502098083496
    10. '(n' → logprob: -17.00002098083496

Token 229: 'def' (ID: 1314)
  Prédit: 'def'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'def' → logprob: -0.00032390307751484215
    2. '<|end|>' → logprob: -8.750324249267578
    3. 'IR' → logprob: -10.125324249267578
    4. 'DR' → logprob: -10.500324249267578
    5. 'LR' → logprob: -10.875324249267578
    6. ' def' → logprob: -11.500324249267578
    7. '
' → logprob: -11.625324249267578
    8. 'range' → logprob: -11.625324249267578
    9. 'D' → logprob: -12.000324249267578
    10. '#' → logprob: -12.000324249267578

Token 230: ' L' (ID: 451)
  Prédit: 'L'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'L' → logprob: -0.12358594685792923
    2. 'LS' → logprob: -2.8735859394073486
    3. ' L' → logprob: -3.6235859394073486
    4. 'LR' → logprob: -3.7485859394073486
    5. 'SR' → logprob: -5.998586177825928
    6. 'LI' → logprob: -6.373586177825928
    7. 'ER' → logprob: -6.748586177825928
    8. 'I' → logprob: -7.248586177825928
    9. 'IR' → logprob: -7.498586177825928
    10. '(L' → logprob: -7.498586177825928

Token 231: 'IR' (ID: 4368)
  Prédit: 'I'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'I' → logprob: -0.024199865758419037
    2. 'IR' → logprob: -4.149199962615967
    3. 'R' → logprob: -5.024199962615967
    4. 'S' → logprob: -7.149199962615967
    5. ' =' → logprob: -9.274199485778809
    6. 'D' → logprob: -9.274199485778809
    7. 'IST' → logprob: -9.649199485778809
    8. '()' → logprob: -9.649199485778809
    9. '=[]' → logprob: -9.774199485778809
    10. '(n' → logprob: -9.899199485778809

Token 232: '(n' (ID: 2406)
  Prédit: '(n'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(n' → logprob: -0.0005944972508586943
    2. '(' → logprob: -7.500594615936279
    3. ' (' → logprob: -10.625594139099121
    4. '(int' → logprob: -11.375594139099121
    5. '(N' → logprob: -13.250594139099121
    6. '(range' → logprob: -14.000594139099121
    7. 'ange' → logprob: -14.625594139099121
    8. '()(' → logprob: -14.625594139099121
    9. '(i' → logprob: -15.250594139099121
    10. '()' → logprob: -15.250594139099121

Token 233: '):' (ID: 3127)
  Prédit: '):'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '):' → logprob: -0.0019945392850786448
    2. ')' → logprob: -6.376994609832764
    3. '(n' → logprob: -8.501994132995605
    4. ' ):' → logprob: -10.126994132995605
    5. '():' → logprob: -10.501994132995605
    6. ']:' → logprob: -11.876994132995605
    7. '):
' → logprob: -12.126994132995605
    8. '()' → logprob: -12.251994132995605
    9. ' ' → logprob: -14.251994132995605
    10. ']' → logprob: -14.376994132995605

Token 234: ' return' (ID: 622)
  Prédit: '[int'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '[int' → logprob: -1.165238857269287
    2. ' return' → logprob: -1.290238857269287
    3. 'return' → logprob: -1.665238857269287
    4. ' [' → logprob: -1.915238857269287
    5. '[' → logprob: -2.665238857269287
    6. '[]' → logprob: -5.415238857269287
    7. '[i' → logprob: -7.290238857269287
    8. '[x' → logprob: -8.415239334106445
    9. '   ' → logprob: -8.540239334106445
    10. '[a' → logprob: -8.790239334106445

Token 235: ' [' (ID: 723)
  Prédit: '[int'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '[int' → logprob: -0.20591147243976593
    2. '[' → logprob: -1.7059115171432495
    3. ' [' → logprob: -5.455911636352539
    4. '[List' → logprob: -9.455911636352539
    5. '[Int' → logprob: -9.580911636352539
    6. '[list' → logprob: -10.830911636352539
    7. '[input' → logprob: -11.080911636352539
    8. '[ind' → logprob: -11.580911636352539
    9. '[i' → logprob: -11.955911636352539
    10. '[np' → logprob: -12.705911636352539

Token 236: 'LI' (ID: 14313)
  Prédit: 'LI'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'LI' → logprob: -1.6047699318733066e-05
    2. '[' → logprob: -11.250016212463379
    3. '[int' → logprob: -13.625016212463379
    4. 'list' → logprob: -13.750016212463379
    5. ' LI' → logprob: -15.125016212463379
    6. 'int' → logprob: -15.125016212463379
    7. 'tuple' → logprob: -16.375015258789062
    8. 'li' → logprob: -17.250015258789062
    9. '[L' → logprob: -18.000015258789062
    10. ' [' → logprob: -18.250015258789062

Token 237: '()' (ID: 416)
  Prédit: '()'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '()' → logprob: -0.00526316836476326
    2. '(n' → logprob: -5.255263328552246
    3. '()]' → logprob: -11.005263328552246
    4. ' ()' → logprob: -12.005263328552246
    5. '().' → logprob: -13.130263328552246
    6. '(' → logprob: -13.380263328552246
    7. '()
' → logprob: -13.505263328552246
    8. '()(' → logprob: -14.630263328552246
    9. '()[' → logprob: -15.130263328552246
    10. '()-' → logprob: -15.755263328552246

Token 238: ' for' (ID: 395)
  Prédit: '(n'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(n' → logprob: -0.006400223355740309
    2. '()' → logprob: -5.256400108337402
    3. 'for' → logprob: -6.881400108337402
    4. ' for' → logprob: -9.256400108337402
    5. '(' → logprob: -10.256400108337402
    6. '(i' → logprob: -12.256400108337402
    7. ' (' → logprob: -13.506400108337402
    8. '(for' → logprob: -14.381400108337402
    9. ' ()' → logprob: -14.756400108337402
    10. '()]' → logprob: -15.006400108337402

Token 239: ' _' (ID: 1175)
  Prédit: '_'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_' → logprob: -7.576873758807778e-05
    2. ' range' → logprob: -10.125075340270996
    3. ' _' → logprob: -11.125075340270996
    4. '_range' → logprob: -11.375075340270996
    5. 'range' → logprob: -11.625075340270996
    6. ' in' → logprob: -15.125075340270996
    7. 'n' → logprob: -16.000076293945312
    8. '_
' → logprob: -17.875076293945312
    9. 'in' → logprob: -18.375076293945312
    10. '_in' → logprob: -18.500076293945312

Token 240: ' in' (ID: 306)
  Prédit: 'range'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'range' → logprob: -0.006816839333623648
    2. ' range' → logprob: -5.006816864013672
    3. ' in' → logprob: -10.381816864013672
    4. '(range' → logprob: -10.631816864013672
    5. 'n' → logprob: -10.756816864013672
    6. 'in' → logprob: -11.381816864013672
    7. '(n' → logprob: -11.506816864013672
    8. '_' → logprob: -13.256816864013672
    9. '_range' → logprob: -13.381816864013672
    10. ' n' → logprob: -15.756816864013672

Token 241: ' range' (ID: 3352)
  Prédit: 'range'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'range' → logprob: -0.0011728443205356598
    2. ' range' → logprob: -6.75117301940918
    3. '(range' → logprob: -13.00117301940918
    4. 'n' → logprob: -15.25117301940918
    5. '(n' → logprob: -15.62617301940918
    6. '_range' → logprob: -17.25117301940918
    7. '	range' → logprob: -18.75117301940918
    8. '_' → logprob: -20.87617301940918
    9. 'rang' → logprob: -20.87617301940918
    10. ' xrange' → logprob: -21.62617301940918

Token 242: '(n' (ID: 2406)
  Prédit: '(n'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(n' → logprob: -0.0009125363430939615
    2. 'n' → logprob: -7.000912666320801
    3. '(' → logprob: -13.8759126663208
    4. ' n' → logprob: -16.375911712646484
    5. ' (' → logprob: -17.250911712646484
    6. '	n' → logprob: -19.875911712646484
    7. ')n' → logprob: -20.750911712646484
    8. '_n' → logprob: -20.875911712646484
    9. ',n' → logprob: -21.875911712646484
    10. '(
' → logprob: -22.000911712646484

Token 243: ')]
' (ID: 11587)
  Prédit: '(n'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(n' → logprob: -0.07388220727443695
    2. ')]' → logprob: -2.8238821029663086
    3. 'n' → logprob: -4.448882102966309
    4. '(' → logprob: -9.073882102966309
    5. ')' → logprob: -10.823882102966309
    6. ' n' → logprob: -11.198882102966309
    7. ']' → logprob: -14.073882102966309
    8. ',n' → logprob: -14.323882102966309
    9. ')n' → logprob: -14.323882102966309
    10. ')]
' → logprob: -15.323882102966309

Token 244: 'def' (ID: 1314)
  Prédit: 'def'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'def' → logprob: -0.002276104176416993
    2. 'IR' → logprob: -6.2522759437561035
    3. '#' → logprob: -9.002276420593262
    4. 'L' → logprob: -10.002276420593262
    5. '<|end|>' → logprob: -10.627276420593262
    6. 'from' → logprob: -10.752276420593262
    7. '[]' → logprob: -11.002276420593262
    8. ']' → logprob: -11.252276420593262
    9. 'n' → logprob: -11.627276420593262
    10. 'LS' → logprob: -11.752276420593262

Token 245: ' FR' (ID: 24595)
  Prédit: 'L'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'L' → logprob: -0.015365583822131157
    2. 'LS' → logprob: -4.3903656005859375
    3. 'IR' → logprob: -7.0153656005859375
    4. ' L' → logprob: -7.2653656005859375
    5. 'LR' → logprob: -7.6403656005859375
    6. 'LF' → logprob: -8.265365600585938
    7. 'LI' → logprob: -9.140365600585938
    8. 'S' → logprob: -9.265365600585938
    9. 'DR' → logprob: -9.390365600585938
    10. 'LL' → logprob: -9.640365600585938

Token 246: '(n' (ID: 2406)
  Prédit: '(n'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(n' → logprob: -3.054500666621607e-06
    2. '(' → logprob: -13.00000286102295
    3. 'R' → logprob: -15.75000286102295
    4. 'def' → logprob: -16.125003814697266
    5. '(N' → logprob: -16.500003814697266
    6. '<|end|>' → logprob: -16.625003814697266
    7. ' (' → logprob: -16.875003814697266
    8. '<|end|>' → logprob: -17.250003814697266
    9. '(nn' → logprob: -18.125003814697266
    10. '```' → logprob: -18.250003814697266

Token 247: '):' (ID: 3127)
  Prédit: '(n'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(n' → logprob: -0.0009232500451616943
    2. '):' → logprob: -7.000923156738281
    3. ')' → logprob: -12.250923156738281
    4. 'n' → logprob: -13.375923156738281
    5. ')(' → logprob: -13.500923156738281
    6. ' (' → logprob: -13.625923156738281
    7. 'def' → logprob: -14.000923156738281
    8. ')n' → logprob: -14.375923156738281
    9. ' ):' → logprob: -15.125923156738281
    10. '[n' → logprob: -15.250923156738281

Token 248: ' return' (ID: 622)
  Prédit: ' return'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' return' → logprob: -0.3138224482536316
    2. 'return' → logprob: -1.3138225078582764
    3. '[' → logprob: -8.063822746276855
    4. ' [' → logprob: -9.063822746276855
    5. '   ' → logprob: -9.688822746276855
    6. '	return' → logprob: -10.813822746276855
    7. ' ' → logprob: -11.188822746276855
    8. '
' → logprob: -11.438822746276855
    9. 'def' → logprob: -11.813822746276855
    10. ' ' → logprob: -12.688822746276855

Token 249: ' [' (ID: 723)
  Prédit: '['
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '[' → logprob: -6.511406809295295e-06
    2. ' [' → logprob: -12.000006675720215
    3. ' ' → logprob: -16.1250057220459
    4. '[List' → logprob: -16.6250057220459
    5. '([' → logprob: -17.0000057220459
    6. '[L' → logprob: -17.2500057220459
    7. '[F' → logprob: -17.7500057220459
    8. '{' → logprob: -17.8750057220459
    9. '	' → logprob: -17.8750057220459
    10. '   ' → logprob: -17.8750057220459

Token 250: 'IF' (ID: 4648)
  Prédit: 'IF'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'IF' → logprob: -0.018177801743149757
    2. 'LF' → logprob: -4.0181779861450195
    3. 'FF' → logprob: -10.76817798614502
    4. 'float' → logprob: -12.39317798614502
    5. ' IF' → logprob: -13.39317798614502
    6. 'F' → logprob: -15.14317798614502
    7. 'DF' → logprob: -15.26817798614502
    8. 'FL' → logprob: -16.143177032470703
    9. '(IF' → logprob: -16.143177032470703
    10. 'lf' → logprob: -16.393177032470703

Token 251: '()' (ID: 416)
  Prédit: '()'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '()' → logprob: -3.128163257315464e-07
    2. ' ()' → logprob: -16.125
    3. '()
' → logprob: -17.0
    4. '(' → logprob: -17.875
    5. '()]' → logprob: -18.125
    6. ')' → logprob: -20.25
    7. 'for' → logprob: -21.5
    8. '(n' → logprob: -21.75
    9. '()
' → logprob: -22.25
    10. '().' → logprob: -22.25

Token 252: ' for' (ID: 395)
  Prédit: '()'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '()' → logprob: -0.005687495693564415
    2. 'for' → logprob: -5.255687713623047
    3. ' for' → logprob: -7.755687713623047
    4. ' ()' → logprob: -11.005687713623047
    5. ')' → logprob: -12.255687713623047
    6. '(' → logprob: -12.755687713623047
    7. '()
' → logprob: -14.755687713623047
    8. '()]' → logprob: -15.755687713623047
    9. '	for' → logprob: -15.880687713623047
    10. '(n' → logprob: -15.880687713623047

Token 253: ' _' (ID: 1175)
  Prédit: '_'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_' → logprob: -2.2246291337069124e-05
    2. ' _' → logprob: -11.125021934509277
    3. '_range' → logprob: -12.000021934509277
    4. ' range' → logprob: -14.000021934509277
    5. ' in' → logprob: -15.250021934509277
    6. 'range' → logprob: -16.125022888183594
    7. '_in' → logprob: -19.250022888183594
    8. '_=' → logprob: -19.750022888183594
    9. '_n' → logprob: -20.500022888183594
    10. 'n' → logprob: -20.750022888183594

Token 254: ' in' (ID: 306)
  Prédit: 'range'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'range' → logprob: -0.0009219424682669342
    2. ' range' → logprob: -7.000921726226807
    3. '(range' → logprob: -11.625922203063965
    4. '_range' → logprob: -14.000922203063965
    5. '(n' → logprob: -14.875922203063965
    6. 'n' → logprob: -15.375922203063965
    7. ' in' → logprob: -16.25092124938965
    8. '	range' → logprob: -16.50092124938965
    9. 'in' → logprob: -17.12592124938965
    10. '_' → logprob: -19.12592124938965

Token 255: ' range' (ID: 3352)
  Prédit: 'range'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'range' → logprob: -0.0031803252641111612
    2. ' range' → logprob: -5.753180503845215
    3. '_range' → logprob: -13.003180503845215
    4. '(range' → logprob: -15.128180503845215
    5. '_' → logprob: -16.1281795501709
    6. '	range' → logprob: -17.7531795501709
    7. 'n' → logprob: -20.8781795501709
    8. 'rang' → logprob: -21.2531795501709
    9. ' xrange' → logprob: -21.7531795501709
    10. '(n' → logprob: -21.8781795501709

Token 256: '(n' (ID: 2406)
  Prédit: '(n'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(n' → logprob: -0.000158842682139948
    2. 'n' → logprob: -8.75015926361084
    3. '(' → logprob: -15.00015926361084
    4. ' (' → logprob: -19.000158309936523
    5. ' n' → logprob: -19.375158309936523
    6. ')' → logprob: -21.375158309936523
    7. ']' → logprob: -21.750158309936523
    8. '	n' → logprob: -21.750158309936523
    9. 's' → logprob: -21.875158309936523
    10. '   ' → logprob: -22.375158309936523

Token 257: ')]
' (ID: 11587)
  Prédit: ')]'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')]' → logprob: -0.20780952274799347
    2. '(n' → logprob: -1.707809567451477
    3. '()]' → logprob: -5.7078094482421875
    4. ']' → logprob: -6.2078094482421875
    5. 'n' → logprob: -7.4578094482421875
    6. '(' → logprob: -8.457809448242188
    7. '()' → logprob: -8.582809448242188
    8. ')' → logprob: -9.957809448242188
    9. ')]
' → logprob: -12.332809448242188
    10. '])' → logprob: -12.582809448242188

Token 258: 'def' (ID: 1314)
  Prédit: 'def'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'def' → logprob: -0.0006439301068894565
    2. '#' → logprob: -7.625643730163574
    3. '
' → logprob: -10.500643730163574
    4. '<|end|>' → logprob: -11.000643730163574
    5. ')' → logprob: -11.125643730163574
    6. 'd' → logprob: -11.250643730163574
    7. '\' → logprob: -11.375643730163574
    8. 'n' → logprob: -12.000643730163574
    9. 'from' → logprob: -12.125643730163574
    10. 'class' → logprob: -12.250643730163574

Token 259: ' L' (ID: 451)
  Prédit: 'LS'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'LS' → logprob: -0.28633418679237366
    2. 'L' → logprob: -2.036334276199341
    3. 'IR' → logprob: -2.286334276199341
    4. 'LR' → logprob: -5.036334037780762
    5. 'S' → logprob: -5.411334037780762
    6. 'SR' → logprob: -5.661334037780762
    7. 'RS' → logprob: -7.036334037780762
    8. 'DR' → logprob: -8.036334037780762
    9. 'range' → logprob: -8.286334037780762
    10. 'I' → logprob: -8.536334037780762

Token 260: 'FR' (ID: 15357)
  Prédit: 'IR'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'IR' → logprob: -0.007307495456188917
    2. 'I' → logprob: -5.382307529449463
    3. 'R' → logprob: -6.007307529449463
    4. 'F' → logprob: -9.132307052612305
    5. 'S' → logprob: -10.007307052612305
    6. 'FR' → logprob: -10.882307052612305
    7. '(IR' → logprob: -11.382307052612305
    8. ' IR' → logprob: -11.507307052612305
    9. '(' → logprob: -12.132307052612305
    10. 'IS' → logprob: -12.382307052612305

Token 261: '(n' (ID: 2406)
  Prédit: '(n'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(n' → logprob: -0.00033677343162707984
    2. '(' → logprob: -8.000336647033691
    3. ' (' → logprob: -13.625336647033691
    4. '(
' → logprob: -15.875336647033691
    5. 'n' → logprob: -17.375337600708008
    6. '(N' → logprob: -19.250337600708008
    7. 'def' → logprob: -19.500337600708008
    8. '()' → logprob: -20.000337600708008
    9. '```' → logprob: -20.250337600708008
    10. ':' → logprob: -20.500337600708008

Token 262: '):' (ID: 3127)
  Prédit: '):'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '):' → logprob: -0.0014776058960705996
    2. ']:' → logprob: -7.1264777183532715
    3. ')' → logprob: -7.7514777183532715
    4. '(n' → logprob: -8.876477241516113
    5. ' ):' → logprob: -9.501477241516113
    6. '():' → logprob: -11.376477241516113
    7. ')]' → logprob: -12.001477241516113
    8. '):
' → logprob: -12.376477241516113
    9. ']' → logprob: -12.876477241516113
    10. ']):' → logprob: -13.751477241516113

Token 263: ' return' (ID: 622)
  Prédit: ' return'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' return' → logprob: -0.5760359764099121
    2. 'return' → logprob: -0.8260359764099121
    3. '[' → logprob: -10.32603645324707
    4. 'def' → logprob: -10.45103645324707
    5. ' [' → logprob: -11.57603645324707
    6. '(return' → logprob: -11.57603645324707
    7. ' def' → logprob: -12.45103645324707
    8. '=' → logprob: -12.70103645324707
    9. ' =' → logprob: -12.95103645324707
    10. '[L' → logprob: -13.32603645324707

Token 264: ' [' (ID: 723)
  Prédit: '['
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '[' → logprob: -0.0001278534036828205
    2. ' [' → logprob: -9.250127792358398
    3. '[L' → logprob: -10.375127792358398
    4. '[[' → logprob: -14.875127792358398
    5. '([' → logprob: -15.750127792358398
    6. '[List' → logprob: -17.8751277923584
    7. '   ' → logprob: -18.2501277923584
    8. '[F' → logprob: -18.6251277923584
    9. ' ' → logprob: -18.8751277923584
    10. '(L' → logprob: -19.7501277923584

Token 265: 'LF' (ID: 38933)
  Prédit: 'LF'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'LF' → logprob: -5.085517113911919e-05
    2. '[' → logprob: -10.50005054473877
    3. 'IF' → logprob: -10.75005054473877
    4. ' LF' → logprob: -13.37505054473877
    5. '
' → logprob: -17.125051498413086
    6. '(L' → logprob: -17.250051498413086
    7. 'FF' → logprob: -17.250051498413086
    8. 'F' → logprob: -17.375051498413086
    9. '(F' → logprob: -17.375051498413086
    10. '[F' → logprob: -17.500051498413086

Token 266: '()' (ID: 416)
  Prédit: '(n'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(n' → logprob: -0.0036682484205812216
    2. '()' → logprob: -5.628668308258057
    3. '(' → logprob: -10.003667831420898
    4. '()]' → logprob: -11.253667831420898
    5. ' (' → logprob: -11.753667831420898
    6. 'n' → logprob: -14.378667831420898
    7. '()(' → logprob: -14.378667831420898
    8. ']' → logprob: -15.378667831420898
    9. '](' → logprob: -15.378667831420898
    10. ' ()' → logprob: -15.628667831420898

Token 267: ' for' (ID: 395)
  Prédit: '(n'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(n' → logprob: -0.0008614383405074477
    2. '()' → logprob: -7.250861644744873
    3. 'for' → logprob: -8.875861167907715
    4. ' for' → logprob: -12.125861167907715
    5. '(' → logprob: -12.750861167907715
    6. 'n' → logprob: -12.750861167907715
    7. '()]' → logprob: -15.500861167907715
    8. ' (' → logprob: -15.625861167907715
    9. ')' → logprob: -15.875861167907715
    10. '(int' → logprob: -16.62586212158203

Token 268: ' _' (ID: 1175)
  Prédit: '_'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_' → logprob: -0.02100134640932083
    2. 'range' → logprob: -4.77100133895874
    3. '_range' → logprob: -4.89600133895874
    4. ' _' → logprob: -5.64600133895874
    5. ' range' → logprob: -6.77100133895874
    6. ' in' → logprob: -9.771001815795898
    7. 'n' → logprob: -9.771001815795898
    8. '(range' → logprob: -10.396001815795898
    9. '_n' → logprob: -12.771001815795898
    10. ' n' → logprob: -12.771001815795898

Token 269: ' in' (ID: 306)
  Prédit: '(n'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(n' → logprob: -0.5294557809829712
    2. 'range' → logprob: -0.9044557809829712
    3. 'n' → logprob: -5.529455661773682
    4. ' range' → logprob: -6.279455661773682
    5. '(range' → logprob: -8.40445613861084
    6. 'int' → logprob: -9.40445613861084
    7. ' in' → logprob: -10.02945613861084
    8. ')' → logprob: -10.40445613861084
    9. '(' → logprob: -10.40445613861084
    10. 'in' → logprob: -10.90445613861084

Token 270: ' range' (ID: 3352)
  Prédit: 'range'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'range' → logprob: -0.010490231215953827
    2. '(n' → logprob: -5.260490417480469
    3. ' range' → logprob: -5.385490417480469
    4. 'n' → logprob: -7.635490417480469
    5. '_range' → logprob: -9.135490417480469
    6. '(range' → logprob: -9.635490417480469
    7. '_n' → logprob: -13.635490417480469
    8. ' n' → logprob: -13.760490417480469
    9. '[n' → logprob: -14.010490417480469
    10. '
' → logprob: -15.510490417480469

Token 271: '(n' (ID: 2406)
  Prédit: '(n'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(n' → logprob: -0.00033546582562848926
    2. 'n' → logprob: -8.000335693359375
    3. ' n' → logprob: -17.250335693359375
    4. '(' → logprob: -18.500335693359375
    5. ' (' → logprob: -19.625335693359375
    6. '	n' → logprob: -20.250335693359375
    7. 'def' → logprob: -20.250335693359375
    8. 'int' → logprob: -21.125335693359375
    9. '[n' → logprob: -21.625335693359375
    10. ')' → logprob: -21.875335693359375

Token 272: ')]
' (ID: 11587)
  Prédit: ')]'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')]' → logprob: -0.016968069598078728
    2. '(n' → logprob: -4.266968250274658
    3. ')' → logprob: -6.141968250274658
    4. ']' → logprob: -7.641968250274658
    5. '()]' → logprob: -9.1419677734375
    6. 'n' → logprob: -10.5169677734375
    7. '()' → logprob: -11.3919677734375
    8. '(' → logprob: -11.7669677734375
    9. ')])' → logprob: -12.8919677734375
    10. ')]
' → logprob: -12.8919677734375

Token 273: 'def' (ID: 1314)
  Prédit: 'def'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'def' → logprob: -0.0007160080131143332
    2. '#' → logprob: -7.500716209411621
    3. 'n' → logprob: -9.250716209411621
    4. '\' → logprob: -10.375716209411621
    5. '(n' → logprob: -12.000716209411621
    6. 'class' → logprob: -12.125716209411621
    7. ' ' → logprob: -13.000716209411621
    8. 'ndef' → logprob: -13.000716209411621
    9. '.' → logprob: -13.375716209411621
    10. '\n' → logprob: -13.500716209411621

Token 274: ' L' (ID: 451)
  Prédit: 'IR'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'IR' → logprob: -1.6276267766952515
    2. 'S' → logprob: -1.7526267766952515
    3. 'SR' → logprob: -1.8776267766952515
    4. 'RS' → logprob: -2.002626895904541
    5. 'LS' → logprob: -2.627626895904541
    6. 'I' → logprob: -3.002626895904541
    7. 'print' → logprob: -3.002626895904541
    8. 'D' → logprob: -3.252626895904541
    9. 'DR' → logprob: -3.502626895904541
    10. 'range' → logprob: -4.502626895904541

Token 275: 'IR' (ID: 4368)
  Prédit: 'I'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'I' → logprob: -0.45010507106781006
    2. 'IR' → logprob: -1.07510507106781
    3. 'S' → logprob: -4.3251051902771
    4. 'IS' → logprob: -5.3251051902771
    5. 'R' → logprob: -6.9501051902771
    6. 'FR' → logprob: -8.200104713439941
    7. 'ISR' → logprob: -8.575104713439941
    8. 'IF' → logprob: -8.700104713439941
    9. 'SR' → logprob: -9.075104713439941
    10. 'D' → logprob: -9.200104713439941

Token 276: '_(' (ID: 18811)
  Prédit: '_('
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_(' → logprob: -0.15700848400592804
    2. '_' → logprob: -2.157008409500122
    3. '(n' → logprob: -3.532008409500122
    4. '(' → logprob: -8.157008171081543
    5. '()' → logprob: -11.032008171081543
    6. '```' → logprob: -11.032008171081543
    7. '(_' → logprob: -11.157008171081543
    8. '_^(' → logprob: -11.282008171081543
    9. ' _(' → logprob: -12.282008171081543
    10. '(int' → logprob: -12.407008171081543

Token 277: 'n' (ID: 77)
  Prédit: '(n'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(n' → logprob: -5.080963092041202e-06
    2. '(' → logprob: -12.500004768371582
    3. 'n' → logprob: -14.125004768371582
    4. ' (' → logprob: -14.500004768371582
    5. ' n' → logprob: -17.8750057220459
    6. '(
' → logprob: -19.1250057220459
    7. 'def' → logprob: -19.7500057220459
    8. ')' → logprob: -20.3750057220459
    9. ')n' → logprob: -20.5000057220459
    10. '(N' → logprob: -20.8750057220459

Token 278: '):' (ID: 3127)
  Prédit: '(n'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(n' → logprob: -0.0017167085316032171
    2. '):' → logprob: -6.376716613769531
    3. ')' → logprob: -12.126716613769531
    4. 'n' → logprob: -12.376716613769531
    5. ' (' → logprob: -13.001716613769531
    6. '(' → logprob: -13.376716613769531
    7. ' ):' → logprob: -14.751716613769531
    8. ')(' → logprob: -15.001716613769531
    9. 'def' → logprob: -15.751716613769531
    10. ']:' → logprob: -17.00171661376953

Token 279: ' return' (ID: 622)
  Prédit: ' return'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' return' → logprob: -0.6486313343048096
    2. 'return' → logprob: -0.7736313343048096
    3. '[n' → logprob: -4.8986310958862305
    4. '[' → logprob: -5.5236310958862305
    5. ' [' → logprob: -5.7736310958862305
    6. 'def' → logprob: -7.8986310958862305
    7. '([' → logprob: -8.64863109588623
    8. '[int' → logprob: -9.02363109588623
    9. '   ' → logprob: -9.27363109588623
    10. '{return' → logprob: -9.39863109588623

Token 280: ' [' (ID: 723)
  Prédit: '['
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '[' → logprob: -0.00023107275774236768
    2. '[[' → logprob: -8.75023078918457
    3. '[int' → logprob: -10.37523078918457
    4. '[L' → logprob: -10.75023078918457
    5. ' [' → logprob: -11.12523078918457
    6. '([' → logprob: -12.62523078918457
    7. '[Int' → logprob: -13.75023078918457
    8. '[List' → logprob: -14.87523078918457
    9. '[list' → logprob: -16.00023078918457
    10. '[np' → logprob: -16.37523078918457

Token 281: 'LI' (ID: 14313)
  Prédit: 'LI'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'LI' → logprob: -0.00036299455678090453
    2. '[' → logprob: -8.00036334991455
    3. '[int' → logprob: -10.62536334991455
    4. ' LI' → logprob: -12.87536334991455
    5. 'int' → logprob: -14.62536334991455
    6. '(int' → logprob: -16.750362396240234
    7. '[I' → logprob: -17.000362396240234
    8. ' [' → logprob: -18.000362396240234
    9. 'li' → logprob: -18.000362396240234
    10. '[L' → logprob: -18.500362396240234

Token 282: '_' (ID: 62)
  Prédit: '_('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_(' → logprob: -0.018459878861904144
    2. '_' → logprob: -4.018459796905518
    3. '(n' → logprob: -8.268460273742676
    4. '()(' → logprob: -10.268460273742676
    5. '()' → logprob: -11.518460273742676
    6. ' _(' → logprob: -12.143460273742676
    7. ' (' → logprob: -13.268460273742676
    8. '_^(' → logprob: -14.143460273742676
    9. '_("' → logprob: -14.393460273742676
    10. '(' → logprob: -15.643460273742676

Token 283: '()' (ID: 416)
  Prédit: '(n'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(n' → logprob: -0.576566755771637
    2. '()' → logprob: -0.826566755771637
    3. '(' → logprob: -7.701566696166992
    4. '()(' → logprob: -9.326566696166992
    5. '()]' → logprob: -9.826566696166992
    6. ' (' → logprob: -11.326566696166992
    7. ' ()' → logprob: -11.951566696166992
    8. '()
' → logprob: -12.201566696166992
    9. '()[' → logprob: -12.951566696166992
    10. '(
' → logprob: -14.201566696166992

Token 284: ' for' (ID: 395)
  Prédit: '(n'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(n' → logprob: -0.00030948311905376613
    2. ' for' → logprob: -8.875309944152832
    3. 'for' → logprob: -9.250309944152832
    4. '(' → logprob: -9.875309944152832
    5. ' (' → logprob: -10.875309944152832
    6. '(i' → logprob: -13.750309944152832
    7. '()' → logprob: -13.875309944152832
    8. ')' → logprob: -14.875309944152832
    9. ']' → logprob: -15.125309944152832
    10. '(for' → logprob: -15.750309944152832

Token 285: ' _' (ID: 1175)
  Prédit: '_'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_' → logprob: -0.0010899738408625126
    2. '_range' → logprob: -7.876090049743652
    3. ' range' → logprob: -8.001090049743652
    4. ' _' → logprob: -8.626090049743652
    5. 'range' → logprob: -8.876090049743652
    6. 'n' → logprob: -10.251090049743652
    7. ' in' → logprob: -11.376090049743652
    8. ' n' → logprob: -11.876090049743652
    9. '_n' → logprob: -15.001090049743652
    10. 'x' → logprob: -15.001090049743652

Token 286: ' in' (ID: 306)
  Prédit: 'range'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'range' → logprob: -0.021338293328881264
    2. ' range' → logprob: -4.27133846282959
    3. '(range' → logprob: -5.52133846282959
    4. '(n' → logprob: -5.77133846282959
    5. 'n' → logprob: -10.89633846282959
    6. '(' → logprob: -12.27133846282959
    7. ' (' → logprob: -12.39633846282959
    8. '_range' → logprob: -12.52133846282959
    9. '	range' → logprob: -14.52133846282959
    10. ' n' → logprob: -15.02133846282959

Token 287: ' range' (ID: 3352)
  Prédit: 'range'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'range' → logprob: -0.0005564896273426712
    2. ' range' → logprob: -7.500556468963623
    3. '(range' → logprob: -12.625556945800781
    4. '_range' → logprob: -17.25055694580078
    5. '	range' → logprob: -17.62555694580078
    6. 'n' → logprob: -18.37555694580078
    7. '(n' → logprob: -19.62555694580078
    8. 'rang' → logprob: -20.87555694580078
    9. '.range' → logprob: -21.12555694580078
    10. ' xrange' → logprob: -21.25055694580078

Token 288: '(n' (ID: 2406)
  Prédit: '(n'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(n' → logprob: -0.00018208740220870823
    2. 'n' → logprob: -8.625182151794434
    3. '(' → logprob: -13.250182151794434
    4. ' (' → logprob: -14.250182151794434
    5. ' n' → logprob: -18.375181198120117
    6. ')' → logprob: -18.625181198120117
    7. '(
' → logprob: -20.500181198120117
    8. ']' → logprob: -20.500181198120117
    9. 'range' → logprob: -20.500181198120117
    10. ')n' → logprob: -20.500181198120117

Token 289: ')]
' (ID: 11587)
  Prédit: ')]'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ')]' → logprob: -0.05712669715285301
    2. '(n' → logprob: -2.932126760482788
    3. ')' → logprob: -6.307126522064209
    4. ']' → logprob: -8.807126998901367
    5. '()]' → logprob: -9.182126998901367
    6. 'n' → logprob: -9.557126998901367
    7. '()' → logprob: -10.182126998901367
    8. 'def' → logprob: -10.682126998901367
    9. '(' → logprob: -11.057126998901367
    10. '):' → logprob: -12.807126998901367

Token 290: 'def' (ID: 1314)
  Prédit: 'def'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'def' → logprob: -0.0001720742875477299
    2. '#' → logprob: -9.375171661376953
    3. 'n' → logprob: -10.000171661376953
    4. 'class' → logprob: -11.875171661376953
    5. '
' → logprob: -12.125171661376953
    6. 'from' → logprob: -12.125171661376953
    7. '```' → logprob: -12.875171661376953
    8. 'd' → logprob: -12.875171661376953
    9. 'import' → logprob: -13.250171661376953
    10. '\' → logprob: -13.625171661376953

Token 291: ' SR' (ID: 30704)
  Prédit: 'IR'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'IR' → logprob: -0.23079237341880798
    2. 'LS' → logprob: -1.9807924032211304
    3. 'S' → logprob: -4.10579252243042
    4. 'def' → logprob: -4.35579252243042
    5. 'SR' → logprob: -4.48079252243042
    6. 'DR' → logprob: -4.60579252243042
    7. 'LR' → logprob: -4.98079252243042
    8. ' IR' → logprob: -5.85579252243042
    9. 'IS' → logprob: -6.35579252243042
    10. 'L' → logprob: -6.73079252243042

Token 292: '(n' (ID: 2406)
  Prédit: '(n'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(n' → logprob: -0.0001446611131541431
    2. '()' → logprob: -9.125144958496094
    3. '(' → logprob: -10.875144958496094
    4. '()(' → logprob: -11.250144958496094
    5. '():' → logprob: -12.875144958496094
    6. 'def' → logprob: -14.500144958496094
    7. ' (' → logprob: -15.125144958496094
    8. 'n' → logprob: -15.625144958496094
    9. '(N' → logprob: -16.250144958496094
    10. '```' → logprob: -17.125144958496094

Token 293: '):' (ID: 3127)
  Prédit: '):'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '):' → logprob: -0.0005520791164599359
    2. '(n' → logprob: -8.1255521774292
    3. ')' → logprob: -8.5005521774292
    4. '):
' → logprob: -10.8755521774292
    5. ']:' → logprob: -11.3755521774292
    6. ')]' → logprob: -11.6255521774292
    7. ' ):' → logprob: -11.7505521774292
    8. 'n' → logprob: -13.5005521774292
    9. 'def' → logprob: -13.6255521774292
    10. ']):' → logprob: -14.2505521774292

Token 294: ' return' (ID: 622)
  Prédit: ' return'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' return' → logprob: -0.6416193246841431
    2. 'return' → logprob: -0.7666193246841431
    3. '[s' → logprob: -6.0166192054748535
    4. '[' → logprob: -6.1416192054748535
    5. 'def' → logprob: -6.6416192054748535
    6. '[S' → logprob: -6.6416192054748535
    7. ' [' → logprob: -6.8916192054748535
    8. '   ' → logprob: -8.141619682312012
    9. '[]' → logprob: -8.766619682312012
    10. ' def' → logprob: -9.641619682312012

Token 295: ' [' (ID: 723)
  Prédit: '[S'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '[S' → logprob: -0.00019412329129409045
    2. '[list' → logprob: -9.125194549560547
    3. '[s' → logprob: -10.250194549560547
    4. '[' → logprob: -10.500194549560547
    5. ' [' → logprob: -11.625194549560547
    6. '[List' → logprob: -12.250194549560547
    7. 'S' → logprob: -12.750194549560547
    8. 'list' → logprob: -13.125194549560547
    9. '[l' → logprob: -14.500194549560547
    10. '[str' → logprob: -14.750194549560547

Token 296: 'S' (ID: 50)
  Prédit: 'S'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'S' → logprob: -1.6286106983898208e-05
    2. 'list' → logprob: -11.125016212463379
    3. ' S' → logprob: -13.500016212463379
    4. '
' → logprob: -17.625017166137695
    5. '	S' → logprob: -19.000017166137695
    6. '   ' → logprob: -19.500017166137695
    7. 's' → logprob: -20.000017166137695
    8. '(S' → logprob: -20.250017166137695
    9. '```' → logprob: -20.250017166137695
    10. 'input' → logprob: -20.750017166137695

Token 297: '()' (ID: 416)
  Prédit: '()'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '()' → logprob: -2.1008713702030946e-06
    2. '(n' → logprob: -13.750001907348633
    3. ' ()' → logprob: -14.750001907348633
    4. '()]' → logprob: -15.000001907348633
    5. '()
' → logprob: -15.500001907348633
    6. 'for' → logprob: -17.125001907348633
    7. '(' → logprob: -17.500001907348633
    8. '()[' → logprob: -18.500001907348633
    9. '().' → logprob: -18.875001907348633
    10. '()(' → logprob: -19.625001907348633

Token 298: ' for' (ID: 395)
  Prédit: '(n'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(n' → logprob: -0.002679463941603899
    2. 'for' → logprob: -6.002679347991943
    3. '()' → logprob: -8.877679824829102
    4. '(' → logprob: -10.002679824829102
    5. ' for' → logprob: -11.002679824829102
    6. ' (' → logprob: -13.252679824829102
    7. '(for' → logprob: -15.127679824829102
    8. '(i' → logprob: -15.377679824829102
    9. 'n' → logprob: -16.1276798248291
    10. '(N' → logprob: -16.7526798248291

Token 299: ' _' (ID: 1175)
  Prédit: '_'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_' → logprob: -0.0010039894841611385
    2. ' _' → logprob: -7.501004219055176
    3. ' range' → logprob: -7.751004219055176
    4. '_range' → logprob: -11.126004219055176
    5. 'range' → logprob: -12.126004219055176
    6. ' in' → logprob: -15.376004219055176
    7. '(range' → logprob: -16.37600326538086
    8. ' ' → logprob: -17.12600326538086
    9. '(' → logprob: -17.75100326538086
    10. '_
' → logprob: -18.62600326538086

Token 300: ' in' (ID: 306)
  Prédit: 'range'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'range' → logprob: -0.0026999011170119047
    2. ' range' → logprob: -6.002699851989746
    3. '(range' → logprob: -8.752699851989746
    4. ' in' → logprob: -10.377699851989746
    5. 'in' → logprob: -10.752699851989746
    6. '_' → logprob: -11.627699851989746
    7. '_range' → logprob: -12.502699851989746
    8. '(n' → logprob: -14.502699851989746
    9. '	range' → logprob: -15.252699851989746
    10. 'n' → logprob: -15.627699851989746

Token 301: ' range' (ID: 3352)
  Prédit: 'range'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'range' → logprob: -0.0004315036640036851
    2. ' range' → logprob: -7.750431537628174
    3. '(range' → logprob: -14.000431060791016
    4. '_range' → logprob: -17.125431060791016
    5. '	range' → logprob: -17.875431060791016
    6. '_' → logprob: -20.500431060791016
    7. 'n' → logprob: -20.625431060791016
    8. '(n' → logprob: -21.375431060791016
    9. '.range' → logprob: -21.875431060791016
    10. '
' → logprob: -22.125431060791016

Token 302: '(n' (ID: 2406)
  Prédit: '(n'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(n' → logprob: -6.511406809295295e-06
    2. 'n' → logprob: -12.000006675720215
    3. '(' → logprob: -15.125006675720215
    4. ' (' → logprob: -18.6250057220459
    5. ' n' → logprob: -21.0000057220459
    6. '(
' → logprob: -22.2500057220459
    7. '((' → logprob: -24.3750057220459
    8. '	n' → logprob: -24.3750057220459
    9. '_n' → logprob: -24.5000057220459
    10. '<n' → logprob: -24.5000057220459

Token 303: ')]
' (ID: 11587)
  Prédit: ')]'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')]' → logprob: -4.203409844194539e-05
    2. '(n' → logprob: -10.750041961669922
    3. ')' → logprob: -11.750041961669922
    4. ']' → logprob: -12.125041961669922
    5. '()]' → logprob: -13.000041961669922
    6. ')]
' → logprob: -13.375041961669922
    7. '()' → logprob: -13.875041961669922
    8. 'n' → logprob: -14.750041961669922
    9. '):' → logprob: -15.000041961669922
    10. '(' → logprob: -15.375041961669922

Token 304: 'def' (ID: 1314)
  Prédit: 'def'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'def' → logprob: -0.21638356149196625
    2. 'n' → logprob: -1.7163835763931274
    3. '
' → logprob: -4.841383457183838
    4. '#' → logprob: -5.591383457183838
    5. '(n' → logprob: -6.341383457183838
    6. 't' → logprob: -7.591383457183838
    7. 'for' → logprob: -8.341383934020996
    8. 'd' → logprob: -8.466383934020996
    9. 'N' → logprob: -8.591383934020996
    10. 'a' → logprob: -10.216383934020996

Token 305: ' L' (ID: 451)
  Prédit: 'DR'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'DR' → logprob: -0.9666993021965027
    2. 'D' → logprob: -1.9666993618011475
    3. 'LS' → logprob: -2.0916993618011475
    4. 'I' → logprob: -2.7166993618011475
    5. 'main' → logprob: -3.3416993618011475
    6. 'SR' → logprob: -3.7166993618011475
    7. 'P' → logprob: -3.9666993618011475
    8. 'G' → logprob: -3.9666993618011475
    9. 'LR' → logprob: -4.091699123382568
    10. 'input' → logprob: -4.091699123382568

Token 306: 'SR' (ID: 22892)
  Prédit: 'IR'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'IR' → logprob: -0.2782423198223114
    2. 'R' → logprob: -1.6532423496246338
    3. 'SR' → logprob: -3.028242349624634
    4. 'FR' → logprob: -6.278242111206055
    5. 'S' → logprob: -7.028242111206055
    6. 'I' → logprob: -9.528242111206055
    7. 'F' → logprob: -9.653242111206055
    8. 'def' → logprob: -10.903242111206055
    9. 'RS' → logprob: -10.903242111206055
    10. '(IR' → logprob: -10.903242111206055

Token 307: '(n' (ID: 2406)
  Prédit: '(n'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(n' → logprob: -2.463036435074173e-05
    2. '(' → logprob: -11.625024795532227
    3. ' (' → logprob: -11.625024795532227
    4. 'def' → logprob: -12.000024795532227
    5. ' def' → logprob: -15.750024795532227
    6. '(N' → logprob: -15.875024795532227
    7. '_(' → logprob: -16.375024795532227
    8. '```' → logprob: -17.125024795532227
    9. '()(' → logprob: -17.750024795532227
    10. '#' → logprob: -17.875024795532227

Token 308: '):' (ID: 3127)
  Prédit: '):'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '):' → logprob: -0.0012376103550195694
    2. '():' → logprob: -7.376237392425537
    3. '(n' → logprob: -8.376237869262695
    4. '()' → logprob: -8.751237869262695
    5. ')' → logprob: -9.251237869262695
    6. ']:' → logprob: -10.126237869262695
    7. ' ):' → logprob: -10.126237869262695
    8. '):
' → logprob: -10.751237869262695
    9. 'def' → logprob: -11.501237869262695
    10. ']):' → logprob: -12.251237869262695

Token 309: ' return' (ID: 622)
  Prédit: ' ['
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' [' → logprob: -0.8842897415161133
    2. ' return' → logprob: -1.3842897415161133
    3. '[' → logprob: -1.8842897415161133
    4. 'return' → logprob: -1.8842897415161133
    5. '[list' → logprob: -4.134289741516113
    6. '[List' → logprob: -5.134289741516113
    7. 'def' → logprob: -5.509289741516113
    8. '[L' → logprob: -6.259289741516113
    9. '[n' → logprob: -6.509289741516113
    10. ' def' → logprob: -7.634289741516113

Token 310: ' [' (ID: 723)
  Prédit: '['
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '[' → logprob: -0.0022849070373922586
    2. '[list' → logprob: -6.252285003662109
    3. '[List' → logprob: -8.50228500366211
    4. '[L' → logprob: -9.50228500366211
    5. '[S' → logprob: -9.50228500366211
    6. '[len' → logprob: -13.87728500366211
    7. '[line' → logprob: -14.00228500366211
    8. '[int' → logprob: -15.00228500366211
    9. '([' → logprob: -15.00228500366211
    10. ' [' → logprob: -15.25228500366211

Token 311: 'LS' (ID: 10172)
  Prédit: 'LS'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'LS' → logprob: -0.3968672752380371
    2. '[' → logprob: -1.271867275238037
    3. '[S' → logprob: -3.271867275238037
    4. '[list' → logprob: -5.396867275238037
    5. 'list' → logprob: -5.896867275238037
    6. 'S' → logprob: -6.771867275238037
    7. 'SR' → logprob: -8.396867752075195
    8. '[L' → logprob: -8.521867752075195
    9. ' [' → logprob: -8.646867752075195
    10. '[List' → logprob: -9.396867752075195

Token 312: '()' (ID: 416)
  Prédit: '(n'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(n' → logprob: -0.12736722826957703
    2. '()' → logprob: -2.1273672580718994
    3. '()]' → logprob: -7.75236701965332
    4. '()(' → logprob: -12.62736701965332
    5. '(' → logprob: -12.87736701965332
    6. ' (' → logprob: -14.12736701965332
    7. ' ()' → logprob: -14.25236701965332
    8. '().' → logprob: -15.00236701965332
    9. ']()' → logprob: -15.12736701965332
    10. '())' → logprob: -15.12736701965332

Token 313: ' for' (ID: 395)
  Prédit: '(n'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(n' → logprob: -9.372294698550832e-06
    2. ' (' → logprob: -11.625009536743164
    3. '(' → logprob: -15.375009536743164
    4. ']' → logprob: -16.625009536743164
    5. 'n' → logprob: -17.000009536743164
    6. '](' → logprob: -17.750009536743164
    7. ')' → logprob: -18.250009536743164
    8. '()' → logprob: -18.750009536743164
    9. 'for' → logprob: -19.000009536743164
    10. ' for' → logprob: -19.375009536743164

Token 314: ' _' (ID: 1175)
  Prédit: 'n'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'n' → logprob: -0.2834051251411438
    2. '(n' → logprob: -1.533405065536499
    3. ' n' → logprob: -3.533405065536499
    4. 'int' → logprob: -6.658405303955078
    5. 'range' → logprob: -8.033405303955078
    6. '_n' → logprob: -9.783405303955078
    7. '_' → logprob: -9.783405303955078
    8. '(int' → logprob: -10.783405303955078
    9. ' range' → logprob: -11.158405303955078
    10. '(range' → logprob: -11.783405303955078

Token 315: ' in' (ID: 306)
  Prédit: 'range'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'range' → logprob: -0.16316737234592438
    2. '(n' → logprob: -1.9131673574447632
    3. 'n' → logprob: -6.663167476654053
    4. '(range' → logprob: -6.663167476654053
    5. ' range' → logprob: -7.913167476654053
    6. '(' → logprob: -11.788166999816895
    7. 'in' → logprob: -12.413166999816895
    8. 'int' → logprob: -13.288166999816895
    9. '	range' → logprob: -14.038166999816895
    10. '(int' → logprob: -14.288166999816895

Token 316: ' range' (ID: 3352)
  Prédit: 'range'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'range' → logprob: -0.0015268829884007573
    2. ' range' → logprob: -6.501526832580566
    3. '(range' → logprob: -10.751526832580566
    4. '(n' → logprob: -12.751526832580566
    5. '_range' → logprob: -15.751526832580566
    6. 'n' → logprob: -16.501527786254883
    7. '	range' → logprob: -17.376527786254883
    8. 'rang' → logprob: -19.001527786254883
    9. '[n' → logprob: -19.126527786254883
    10. '(' → logprob: -19.251527786254883

Token 317: '(n' (ID: 2406)
  Prédit: '(n'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(n' → logprob: -0.000556012790184468
    2. 'n' → logprob: -7.500555992126465
    3. 'range' → logprob: -12.750555992126465
    4. ' n' → logprob: -17.62555694580078
    5. '(range' → logprob: -18.37555694580078
    6. '(' → logprob: -18.75055694580078
    7. ' (' → logprob: -18.87555694580078
    8. ' range' → logprob: -19.75055694580078
    9. 'def' → logprob: -20.00055694580078
    10. 'int' → logprob: -20.25055694580078

Token 318: ')]' (ID: 15710)
  Prédit: ')]'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')]' → logprob: -0.002076505683362484
    2. '(n' → logprob: -7.127076625823975
    3. '()]' → logprob: -7.627076625823975
    4. ')' → logprob: -7.752076625823975
    5. ']' → logprob: -8.127076148986816
    6. ')]
' → logprob: -11.002076148986816
    7. '())' → logprob: -11.127076148986816
    8. '()' → logprob: -11.252076148986816
    9. '')]' → logprob: -12.377076148986816
    10. '])]' → logprob: -13.377076148986816

Token 319: '


' (ID: 2499)
  Prédit: 'def'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'def' → logprob: -0.0599704347550869
    2. '
' → logprob: -2.9349703788757324
    3. '

' → logprob: -5.559970378875732
    4. '
' → logprob: -7.684970378875732
    5. 'n' → logprob: -8.18497085571289
    6. '#' → logprob: -9.05997085571289
    7. '' → logprob: -9.68497085571289
    8. '  
' → logprob: -9.68497085571289
    9. '\' → logprob: -9.93497085571289
    10. '(n' → logprob: -10.30997085571289

Token 320: 'def' (ID: 1314)
  Prédit: 'def'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'def' → logprob: -0.3097715377807617
    2. 'class' → logprob: -1.6847715377807617
    3. 'n' → logprob: -2.5597715377807617
    4. 'N' → logprob: -6.184771537780762
    5. '#' → logprob: -6.934771537780762
    6. 'd' → logprob: -8.559771537780762
    7. 'from' → logprob: -8.934771537780762
    8. 'a' → logprob: -9.059771537780762
    9. 't' → logprob: -10.684771537780762
    10. 'dp' → logprob: -10.934771537780762

Token 321: ' solve' (ID: 17722)
  Prédit: ' main'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' main' → logprob: -0.07056128233671188
    2. ' solve' → logprob: -2.945561170578003
    3. 'main' → logprob: -5.445561408996582
    4. 'solve' → logprob: -5.445561408996582
    5. ' factorial' → logprob: -6.195561408996582
    6. ' dfs' → logprob: -6.695561408996582
    7. ' factor' → logprob: -6.695561408996582
    8. 'factor' → logprob: -7.570561408996582
    9. ' bfs' → logprob: -7.945561408996582
    10. '_factor' → logprob: -8.195561408996582

Token 322: '():
' (ID: 8595)
  Prédit: '():'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '():' → logprob: -0.0001242772996192798
    2. ' ():' → logprob: -9.000123977661133
    3. '():
' → logprob: -14.500123977661133
    4. '()' → logprob: -14.875123977661133
    5. '(' → logprob: -19.750123977661133
    6. '().' → logprob: -20.500123977661133
    7. ' ()' → logprob: -20.500123977661133
    8. '()>' → logprob: -21.000123977661133
    9. '(":' → logprob: -21.375123977661133
    10. '():
' → logprob: -21.750123977661133

Token 323: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.13818858563899994
    2. '(' → logprob: -2.638188600540161
    3. ':' → logprob: -3.763188600540161
    4. '(n' → logprob: -4.388188362121582
    5. 'n' → logprob: -5.263188362121582
    6. '():' → logprob: -5.263188362121582
    7. '()' → logprob: -5.888188362121582
    8. '	n' → logprob: -6.513188362121582
    9. '    ' → logprob: -6.888188362121582
    10. '\t' → logprob: -7.138188362121582

Token 324: ' n' (ID: 297)
  Prédit: 'n'
  Correct (stricte): False
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'n' (adapté à ' n') → logprob: -0.016675731167197227
    2. ' n' → logprob: -4.14167594909668
    3. 'N' → logprob: -8.39167594909668
    4. 't' → logprob: -8.64167594909668
    5. '   ' → logprob: -9.01667594909668
    6. 'a' → logprob: -10.39167594909668
    7. 'pass' → logprob: -11.01667594909668
    8. ' pass' → logprob: -11.14167594909668
    9. 'h' → logprob: -11.76667594909668
    10. 'r' → logprob: -11.76667594909668

Token 325: ' =' (ID: 314)
  Prédit: '='
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '=' → logprob: -0.5802642107009888
    2. ' =' → logprob: -0.8302642107009888
    3. ',' → logprob: -5.455264091491699
    4. '=int' → logprob: -10.4552640914917
    5. ' ' → logprob: -11.8302640914917
    6. ' ,' → logprob: -12.8302640914917
    7. '   ' → logprob: -14.3302640914917
    8. ' =
' → logprob: -14.5802640914917
    9. ')' → logprob: -15.0802640914917
    10. '=input' → logprob: -15.2052640914917

Token 326: ' II' (ID: 9839)
  Prédit: 'II'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'II' → logprob: -0.01932494342327118
    2. 'int' → logprob: -4.019324779510498
    3. ' II' → logprob: -6.769324779510498
    4. ' int' → logprob: -10.644325256347656
    5. 'INT' → logprob: -14.144325256347656
    6. 'I' → logprob: -14.269325256347656
    7. 'III' → logprob: -15.644325256347656
    8. ' ' → logprob: -15.894325256347656
    9. '10' → logprob: -16.144325256347656
    10. 'IR' → logprob: -16.269325256347656

Token 327: '()
' (ID: 1234)
  Prédit: '()'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '()' → logprob: -4.723352049040841e-06
    2. '()
' → logprob: -12.875004768371582
    3. ' ()' → logprob: -13.625004768371582
    4. ')' → logprob: -14.375004768371582
    5. '   ' → logprob: -15.250004768371582
    6. '(' → logprob: -16.500003814697266
    7. '())' → logprob: -17.000003814697266
    8. '(),' → logprob: -17.250003814697266
    9. '()>' → logprob: -18.500003814697266
    10. '();' → logprob: -18.625003814697266

Token 328: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.20577329397201538
    2. '    
' → logprob: -3.08077335357666
    3. ' ' → logprob: -3.08077335357666
    4. ' 
' → logprob: -3.45577335357666
    5. '
' → logprob: -3.83077335357666
    6. '<|end|>' → logprob: -4.45577335357666
    7. 'a' → logprob: -4.58077335357666
    8. '    ' → logprob: -5.45577335357666
    9. '  
' → logprob: -6.45577335357666
    10. 'n' → logprob: -6.58077335357666

Token 329: ' a' (ID: 261)
  Prédit: 'a'
  Correct (stricte): False
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'a' (adapté à ' a') → logprob: -0.23218993842601776
    2. 'arr' → logprob: -1.6071898937225342
    3. 'A' → logprob: -5.732190132141113
    4. 'lst' → logprob: -6.857190132141113
    5. 'edges' → logprob: -7.607190132141113
    6. 'data' → logprob: -7.982190132141113
    7. 'dp' → logprob: -8.107190132141113
    8. 'd' → logprob: -8.607190132141113
    9. 's' → logprob: -8.857190132141113
    10. 'res' → logprob: -9.357190132141113

Token 330: ' =' (ID: 314)
  Prédit: ' ='
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' =' → logprob: -0.31338265538215637
    2. '=' → logprob: -1.313382625579834
    3. 'rr' → logprob: -9.313383102416992
    4. 'r' → logprob: -11.438383102416992
    5. ',' → logprob: -11.938383102416992
    6. ' ' → logprob: -12.063383102416992
    7. 'rray' → logprob: -12.688383102416992
    8. 's' → logprob: -13.813383102416992
    9. 'b' → logprob: -14.063383102416992
    10. ' =[' → logprob: -14.688383102416992

Token 331: ' list' (ID: 1562)
  Prédit: 'LI'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'LI' → logprob: -0.0008814498432911932
    2. 'L' → logprob: -7.250881671905518
    3. ' LI' → logprob: -8.75088119506836
    4. 'LS' → logprob: -11.75088119506836
    5. 'LR' → logprob: -13.25088119506836
    6. '[' → logprob: -13.37588119506836
    7. 'Li' → logprob: -14.25088119506836
    8. ' L' → logprob: -14.37588119506836
    9. '[L' → logprob: -15.75088119506836
    10. '[]' → logprob: -15.87588119506836

Token 332: '(map' (ID: 16946)
  Prédit: '(map'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(map' → logprob: -0.10061228275299072
    2. '(range' → logprob: -2.475612163543701
    3. '(' → logprob: -4.600612163543701
    4. '()' → logprob: -7.225612163543701
    5. '(input' → logprob: -7.975612163543701
    6. '(L' → logprob: -8.10061264038086
    7. '(a' → logprob: -9.85061264038086
    8. '(sorted' → logprob: -10.10061264038086
    9. '(int' → logprob: -10.85061264038086
    10. 'map' → logprob: -11.22561264038086

Token 333: '(lambda' (ID: 43341)
  Prédit: '(int'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '(int' → logprob: -4.167648876318708e-05
    2. ',int' → logprob: -10.625041961669922
    3. 'int' → logprob: -12.000041961669922
    4. '(' → logprob: -12.375041961669922
    5. '<int' → logprob: -12.750041961669922
    6. ']int' → logprob: -13.500041961669922
    7. '[int' → logprob: -14.000041961669922
    8. ')' → logprob: -14.125041961669922
    9. ':int' → logprob: -15.500041961669922
    10. '=int' → logprob: -15.625041961669922

Token 334: ' x' (ID: 1215)
  Prédit: 'x'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'x' → logprob: -0.3134538531303406
    2. ' x' → logprob: -1.3134539127349854
    3. 'int' → logprob: -8.938453674316406
    4. 'lambda' → logprob: -10.813453674316406
    5. '_' → logprob: -11.563453674316406
    6. ':int' → logprob: -12.313453674316406
    7. ' int' → logprob: -12.563453674316406
    8. 'a' → logprob: -12.688453674316406
    9. 'k' → logprob: -12.938453674316406
    10. 'y' → logprob: -12.938453674316406

Token 335: ':' (ID: 25)
  Prédit: ':'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ':' → logprob: -0.09594892710447311
    2. ':int' → logprob: -2.4709489345550537
    3. ' :' → logprob: -4.970948696136475
    4. ':x' → logprob: -10.470949172973633
    5. 'int' → logprob: -11.970949172973633
    6. ' x' → logprob: -12.845949172973633
    7. ':
' → logprob: -13.220949172973633
    8. ':Int' → logprob: -13.345949172973633
    9. ':list' → logprob: -13.845949172973633
    10. ' int' → logprob: -13.845949172973633

Token 336: ' int' (ID: 677)
  Prédit: 'int'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'int' → logprob: -0.44300219416618347
    2. 'x' → logprob: -1.0680022239685059
    3. '(int' → logprob: -4.943002223968506
    4. '(x' → logprob: -5.693002223968506
    5. ' x' → logprob: -7.068002223968506
    6. ' int' → logprob: -7.193002223968506
    7. 'max' → logprob: -7.568002223968506
    8. 'pow' → logprob: -7.693002223968506
    9. 'abs' → logprob: -8.318001747131348
    10. 'a' → logprob: -8.443001747131348

Token 337: '(x' (ID: 4061)
  Prédit: '(x'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(x' → logprob: -0.0008000997477211058
    2. '(' → logprob: -8.000800132751465
    3. 'x' → logprob: -8.250800132751465
    4. ',' → logprob: -8.875800132751465
    5. '(input' → logprob: -11.250800132751465
    6. ':' → logprob: -11.250800132751465
    7. '(
' → logprob: -12.125800132751465
    8. ' x' → logprob: -12.500800132751465
    9. '(pow' → logprob: -12.500800132751465
    10. '((' → logprob: -12.750800132751465

Token 338: ')-' (ID: 14080)
  Prédit: ','
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ',' → logprob: -1.3230705261230469
    2. ')' → logprob: -1.5730705261230469
    3. '),' → logprob: -1.5730705261230469
    4. '-' → logprob: -1.9480705261230469
    5. '*' → logprob: -3.198070526123047
    6. '**' → logprob: -3.573070526123047
    7. ')-' → logprob: -4.198070526123047
    8. '+' → logprob: -4.323070526123047
    9. '(x' → logprob: -4.323070526123047
    10. '*x' → logprob: -4.448070526123047

Token 339: '1' (ID: 16)
  Prédit: '1'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '1' → logprob: -0.004261581227183342
    2. ' ' → logprob: -5.504261493682861
    3. 'x' → logprob: -8.75426197052002
    4. ' x' → logprob: -10.87926197052002
    5. '0' → logprob: -13.00426197052002
    6. '2' → logprob: -13.75426197052002
    7. 'a' → logprob: -14.75426197052002
    8. '(x' → logprob: -14.94176197052002
    9. 'input' → logprob: -14.94176197052002
    10. '   ' → logprob: -15.31676197052002

Token 340: ',' (ID: 11)
  Prédit: ','
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ',' → logprob: -0.02096620388329029
    2. ',a' → logprob: -3.8959662914276123
    3. ',input' → logprob: -8.395966529846191
    4. ',x' → logprob: -9.020966529846191
    5. 'a' → logprob: -10.895966529846191
    6. ' ,' → logprob: -11.145966529846191
    7. ',b' → logprob: -11.770966529846191
    8. ',n' → logprob: -11.770966529846191
    9. ',list' → logprob: -12.395966529846191
    10. ',int' → logprob: -12.395966529846191

Token 341: ' S' (ID: 336)
  Prédit: 'input'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'input' → logprob: -0.001217974815517664
    2. ' input' → logprob: -6.876217842102051
    3. 'S' → logprob: -8.62621784210205
    4. 'range' → logprob: -12.75121784210205
    5. ' S' → logprob: -12.87621784210205
    6. '(input' → logprob: -15.75121784210205
    7. ' ' → logprob: -16.376218795776367
    8. 's' → logprob: -17.376218795776367
    9. 'LS' → logprob: -17.376218795776367
    10. 'LI' → logprob: -17.376218795776367

Token 342: '()))' (ID: 16829)
  Prédit: '()))'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '()))' → logprob: -0.1808750033378601
    2. '()' → logprob: -1.8058750629425049
    3. '()))
' → logprob: -8.430874824523926
    4. '))' → logprob: -8.555874824523926
    5. '().' → logprob: -8.555874824523926
    6. '()[' → logprob: -8.805874824523926
    7. '())' → logprob: -9.055874824523926
    8. '()));' → logprob: -9.430874824523926
    9. '())))' → logprob: -9.930874824523926
    10. '(),' → logprob: -10.430874824523926

Token 343: ' ' (ID: 220)
  Prédit: '
'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '
' → logprob: -0.3634282946586609
    2. '<|end|>' → logprob: -1.4884283542633057
    3. '   ' → logprob: -2.7384283542633057
    4. ' ' → logprob: -5.738428115844727
    5. ')' → logprob: -5.738428115844727
    6. '    
' → logprob: -5.988428115844727
    7. ' 
' → logprob: -6.613428115844727
    8. '  
' → logprob: -6.988428115844727
    9. '<|end|>' → logprob: -7.613428115844727
    10. '  ' → logprob: -7.863428115844727

Token 344: ' #' (ID: 1069)
  Prédit: '
'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '
' → logprob: -0.05696071684360504
    2. '   ' → logprob: -3.6819608211517334
    3. '<|end|>' → logprob: -3.8069608211517334
    4. ' 
' → logprob: -6.306960582733154
    5. '  
' → logprob: -6.806960582733154
    6. ')' → logprob: -7.181960582733154
    7. '    
' → logprob: -7.306960582733154
    8. '\n' → logprob: -7.431960582733154
    9. ' ' → logprob: -7.556960582733154
    10. '   
' → logprob: -7.681960582733154

Token 345: ' On' (ID: 2160)
  Prédit: ' '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' ' → logprob: -0.19062750041484833
    2. '
' → logprob: -2.3156275749206543
    3. ' 
' → logprob: -3.3156275749206543
    4. ')' → logprob: -4.565627574920654
    5. '   ' → logprob: -5.190627574920654
    6. '<|end|>' → logprob: -5.190627574920654
    7. 'a' → logprob: -5.440627574920654
    8. ' for' → logprob: -6.565627574920654
    9. '#' → logprob: -6.815627574920654
    10. '[' → logprob: -6.815627574920654

Token 346: ' enl' (ID: 116494)
  Prédit: ''
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False

Token 347: 'ève' (ID: 41151)
  Prédit: 'a'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'a' → logprob: -0.3023519814014435
    2. '(a' → logprob: -2.302351951599121
    3. 'umer' → logprob: -3.677351951599121
    4. 'range' → logprob: -3.927351951599121
    5. 'e' → logprob: -4.177351951599121
    6. '()' → logprob: -4.177351951599121
    7. '[a' → logprob: -4.177351951599121
    8. ' a' → logprob: -4.177351951599121
    9. 'def' → logprob: -5.177351951599121
    10. 't' → logprob: -5.177351951599121

Token 348: ' ' (ID: 220)
  Prédit: '1'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '1' → logprob: -0.7998944520950317
    2. '(' → logprob: -1.0498944520950317
    3. '()' → logprob: -1.6748944520950317
    4. ' ' → logprob: -4.924894332885742
    5. '<|end|>' → logprob: -6.049894332885742
    6. 'a' → logprob: -6.174894332885742
    7. '(
' → logprob: -8.424894332885742
    8. ' a' → logprob: -8.799894332885742
    9. '()
' → logprob: -8.799894332885742
    10. ' (' → logprob: -9.049894332885742

Token 349: '1' (ID: 16)
  Prédit: '1'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '1' → logprob: -0.003181159496307373
    2. ' ' → logprob: -5.753180980682373
    3. '<|end|>' → logprob: -13.378181457519531
    4. 'a' → logprob: -14.128181457519531
    5. ' a' → logprob: -15.503181457519531
    6. '+' → logprob: -15.503181457519531
    7. '   ' → logprob: -16.00318145751953
    8. ' one' → logprob: -16.37818145751953
    9. '0' → logprob: -16.75318145751953
    10. '  ' → logprob: -16.75318145751953

Token 350: ' à' (ID: 1221)
  Prédit: '
'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '
' → logprob: -1.074695110321045
    2. ')' → logprob: -1.199695110321045
    3. '<|end|>' → logprob: -1.824695110321045
    4. '   ' → logprob: -2.199695110321045
    5. ' ' → logprob: -3.949695110321045
    6. '[' → logprob: -4.949695110321045
    7. ',' → logprob: -5.074695110321045
    8. '    
' → logprob: -5.199695110321045
    9. '  
' → logprob: -5.449695110321045
    10. '<|end|>' → logprob: -5.574695110321045

Token 351: ' chaque' (ID: 21194)
  Prédit: 'each'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'each' → logprob: -0.24826979637145996
    2. ' each' → logprob: -2.24826979637146
    3. ' chaque' → logprob: -2.24826979637146
    4. 'x' → logprob: -6.248270034790039
    5. 't' → logprob: -6.498270034790039
    6. '<|end|>' → logprob: -6.623270034790039
    7. 'ch' → logprob: -6.748270034790039
    8. 'cha' → logprob: -7.123270034790039
    9. ' chacune' → logprob: -7.498270034790039
    10. 'every' → logprob: -7.998270034790039

Token 352: ' chiffre' (ID: 107420)
  Prédit: 'x'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'x' → logprob: -0.3044266104698181
    2. '(x' → logprob: -2.554426670074463
    3. 'token' → logprob: -2.679426670074463
    4. 'element' → logprob: -2.929426670074463
    5. 'a' → logprob: -3.554426670074463
    6. ')' → logprob: -4.304426670074463
    7. '(' → logprob: -5.054426670074463
    8. 'élé' → logprob: -5.929426670074463
    9. ' x' → logprob: -6.054426670074463
    10. 'elem' → logprob: -6.304426670074463

Token 353: ',' (ID: 11)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.5851738452911377
    2. '
' → logprob: -0.9601738452911377
    3. '<|end|>' → logprob: -3.5851738452911377
    4. '    
' → logprob: -4.210173606872559
    5. '  
' → logprob: -5.835173606872559
    6. ' 
' → logprob: -5.835173606872559
    7. ')' → logprob: -6.210173606872559
    8. ',' → logprob: -6.710173606872559
    9. ' ' → logprob: -6.835173606872559
    10. '[' → logprob: -7.085173606872559

Token 354: ' pas' (ID: 2173)
  Prédit: ' 
'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' 
' → logprob: -0.8729055523872375
    2. ' ' → logprob: -1.2479054927825928
    3. '   ' → logprob: -1.6229054927825928
    4. '    
' → logprob: -3.3729054927825928
    5. '  
' → logprob: -4.247905731201172
    6. '
' → logprob: -4.247905731201172
    7. ')' → logprob: -4.622905731201172
    8. '   
' → logprob: -4.622905731201172
    9. 'n' → logprob: -5.622905731201172
    10. '  ' → logprob: -5.747905731201172

Token 355: ' sûr' (ID: 46415)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ')' → logprob: -1.3047436475753784
    2. '   ' → logprob: -1.6797436475753784
    3. ' sure' → logprob: -1.8047436475753784
    4. 'just' → logprob: -2.804743766784668
    5. '(' → logprob: -3.179743766784668
    6. ' ' → logprob: -3.679743766784668
    7. '()' → logprob: -3.804743766784668
    8. ' just' → logprob: -3.804743766784668
    9. '[]' → logprob: -4.179743766784668
    10. '#' → logprob: -4.179743766784668

Token 356: ' si' (ID: 1784)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.33484378457069397
    2. ')' → logprob: -1.9598437547683716
    3. ',' → logprob: -3.459843873977661
    4. ' ' → logprob: -3.584843873977661
    5. ' de' → logprob: -3.709843873977661
    6. '    
' → logprob: -3.834843873977661
    7. ' )' → logprob: -4.834843635559082
    8. '  ' → logprob: -4.834843635559082
    9. ' d' → logprob: -5.334843635559082
    10. '    ' → logprob: -5.584843635559082

Token 357: ' c' (ID: 274)
  Prédit: ' c'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' c' → logprob: -0.184501051902771
    2. 'c' → logprob: -3.1845011711120605
    3. ' a' → logprob: -3.5595011711120605
    4. 'a' → logprob: -4.3095011711120605
    5. ' la' → logprob: -4.5595011711120605
    6. 'cela' → logprob: -4.5595011711120605
    7. ' il' → logprob: -4.8095011711120605
    8. ' ' → logprob: -4.9345011711120605
    9. ' ça' → logprob: -5.1845011711120605
    10. ')' → logprob: -5.1845011711120605

Token 358: ''est' (ID: 6616)
  Prédit: ''est'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ''est' → logprob: -0.25648975372314453
    2. 'a' → logprob: -2.1314897537231445
    3. ''' → logprob: -2.7564897537231445
    4. ''a' → logprob: -4.1314897537231445
    5. 'e' → logprob: -4.6314897537231445
    6. 'est' → logprob: -4.7564897537231445
    7. ''#' → logprob: -5.2564897537231445
    8. ''s' → logprob: -7.1314897537231445
    9. '')' → logprob: -7.3814897537231445
    10. '#' → logprob: -7.7564897537231445

Token 359: ' utile' (ID: 68237)
  Prédit: ' nécessaire'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' nécessaire' → logprob: -0.5096413493156433
    2. ' necessary' → logprob: -1.884641408920288
    3. ' utile' → logprob: -2.384641408920288
    4. ' correct' → logprob: -3.009641408920288
    5. ' just' → logprob: -3.509641408920288
    6. ' needed' → logprob: -3.884641408920288
    7. ' necess' → logprob: -5.009641170501709
    8. ' valid' → logprob: -5.009641170501709
    9. 'necessary' → logprob: -5.009641170501709
    10. ' useful' → logprob: -5.759641170501709

Token 360: '...
' (ID: 4908)
  Prédit: '
'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '
' → logprob: -0.5533490180969238
    2. ')' → logprob: -1.0533490180969238
    3. '   ' → logprob: -4.053349018096924
    4. '<|end|>' → logprob: -4.178349018096924
    5. ',' → logprob: -4.678349018096924
    6. ' ' → logprob: -4.678349018096924
    7. ' 
' → logprob: -5.553349018096924
    8. ':' → logprob: -5.553349018096924
    9. '\n' → logprob: -5.678349018096924
    10. '  
' → logprob: -5.678349018096924

Token 361: '   ' (ID: 271)
  Prédit: '
'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '
' → logprob: -0.15280263125896454
    2. '   ' → logprob: -2.5278027057647705
    3. ' 
' → logprob: -3.7778027057647705
    4. '<|end|>' → logprob: -3.7778027057647705
    5. '  
' → logprob: -5.402802467346191
    6. '    
' → logprob: -5.527802467346191
    7. '\n' → logprob: -6.027802467346191
    8. ' ' → logprob: -6.277802467346191
    9. ')' → logprob: -7.027802467346191
    10. '   
' → logprob: -7.402802467346191

Token 362: ' answer' (ID: 6052)
  Prédit: 'dp'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'dp' → logprob: -0.7281845808029175
    2. 'd' → logprob: -2.103184700012207
    3. ' dp' → logprob: -2.728184700012207
    4. 'c' → logprob: -2.853184700012207
    5. 'count' → logprob: -2.853184700012207
    6. 'counts' → logprob: -3.728184700012207
    7. 'freq' → logprob: -3.853184700012207
    8. 'pos' → logprob: -4.103184700012207
    9. 'm' → logprob: -4.103184700012207
    10. '   ' → logprob: -4.603184700012207

Token 363: ' =' (ID: 314)
  Prédit: ' ='
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' =' → logprob: -0.25211724638938904
    2. '=' → logprob: -1.5021172761917114
    3. ' ' → logprob: -9.002117156982422
    4. ',' → logprob: -10.877117156982422
    5. '_' → logprob: -11.002117156982422
    6. ')' → logprob: -12.377117156982422
    7. '=[]' → logprob: -12.377117156982422
    8. '[' → logprob: -12.502117156982422
    9. '[:]' → logprob: -12.877117156982422
    10. '  ' → logprob: -12.877117156982422

Token 364: ' ' (ID: 220)
  Prédit: '0'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '0' → logprob: -0.03807627409696579
    2. ' ' → logprob: -3.538076162338257
    3. '[' → logprob: -5.038076400756836
    4. '[]' → logprob: -6.913076400756836
    5. ' [' → logprob: -7.288076400756836
    6. ' []' → logprob: -10.413076400756836
    7. '[-' → logprob: -11.288076400756836
    8. 'INF' → logprob: -11.413076400756836
    9. '1' → logprob: -11.538076400756836
    10. '-' → logprob: -11.788076400756836

Token 365: '1' (ID: 16)
  Prédit: '0'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '0' → logprob: -0.057261791080236435
    2. '[' → logprob: -2.9322617053985596
    3. '[]' → logprob: -7.057261943817139
    4. 'default' → logprob: -8.30726146697998
    5. 'a' → logprob: -8.43226146697998
    6. '[n' → logprob: -8.43226146697998
    7. '[-' → logprob: -8.55726146697998
    8. '[a' → logprob: -8.68226146697998
    9. 'INF' → logprob: -9.43226146697998
    10. ' ' → logprob: -9.68226146697998

Token 366: '
' (ID: 198)
  Prédit: '
'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '
' → logprob: -0.027955543249845505
    2. ' 
' → logprob: -4.902955532073975
    3. ' ' → logprob: -5.527955532073975
    4. '<|end|>' → logprob: -5.652955532073975
    5. '    
' → logprob: -5.777955532073975
    6. '  
' → logprob: -5.902955532073975
    7. '\n' → logprob: -6.402955532073975
    8. ' for' → logprob: -7.152955532073975
    9. 'for' → logprob: -7.152955532073975
    10. '   ' → logprob: -7.277955532073975

Token 367: '   ' (ID: 271)
  Prédit: '
'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '
' → logprob: -0.13952194154262543
    2. ' 
' → logprob: -3.389521837234497
    3. ' ' → logprob: -3.514521837234497
    4. '<|end|>' → logprob: -3.639521837234497
    5. '    
' → logprob: -4.389522075653076
    6. '   ' → logprob: -4.764522075653076
    7. '  
' → logprob: -5.639522075653076
    8. ',' → logprob: -5.889522075653076
    9. '\n' → logprob: -6.264522075653076
    10. '   
' → logprob: -6.389522075653076

Token 368: ' if' (ID: 538)
  Prédit: 'for'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'for' → logprob: -0.05441872403025627
    2. 'i' → logprob: -3.5544188022613525
    3. ' for' → logprob: -3.9294188022613525
    4. 'p' → logprob: -7.304418563842773
    5. ' i' → logprob: -7.429418563842773
    6. 'current' → logprob: -7.804418563842773
    7. '   ' → logprob: -7.929418563842773
    8. 'd' → logprob: -7.929418563842773
    9. 'cur' → logprob: -8.179418563842773
    10. 'a' → logprob: -8.304418563842773

Token 369: ' not' (ID: 625)
  Prédit: ' n'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' n' → logprob: -0.026883035898208618
    2. ' a' → logprob: -4.026883125305176
    3. 'n' → logprob: -4.901883125305176
    4. 'a' → logprob: -7.401883125305176
    5. ' ' → logprob: -8.401883125305176
    6. ' len' → logprob: -8.776883125305176
    7. ' all' → logprob: -9.026883125305176
    8. ' any' → logprob: -9.401883125305176
    9. ' not' → logprob: -10.526883125305176
    10. ' ' → logprob: -12.339383125305176

Token 370: ' ' (ID: 220)
  Prédit: 'a'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'a' → logprob: -0.3431840240955353
    2. ' a' → logprob: -1.468183994293213
    3. ' n' → logprob: -3.468183994293213
    4. 'n' → logprob: -3.843183994293213
    5. ' any' → logprob: -5.843183994293213
    6. ' all' → logprob: -6.468183994293213
    7. 'all' → logprob: -6.968183994293213
    8. 'any' → logprob: -7.593183994293213
    9. ' len' → logprob: -8.218184471130371
    10. 'len' → logprob: -8.343184471130371

Token 371: '1' (ID: 16)
  Prédit: 'a'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'a' → logprob: -0.0628899559378624
    2. 'n' → logprob: -3.43789005279541
    3. ' a' → logprob: -3.81289005279541
    4. ' n' → logprob: -5.18789005279541
    5. 'all' → logprob: -8.06289005279541
    6. 'len' → logprob: -8.68789005279541
    7. 'any' → logprob: -8.93789005279541
    8. ' any' → logprob: -9.06289005279541
    9. 'answer' → logprob: -9.56289005279541
    10. ' all' → logprob: -9.68789005279541

Token 372: ' in' (ID: 306)
  Prédit: ' in'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' in' → logprob: -0.07662376016378403
    2. 'in' → logprob: -2.9516236782073975
    3. ' a' → logprob: -5.076623916625977
    4. ':' → logprob: -5.451623916625977
    5. 'e' → logprob: -5.576623916625977
    6. 'a' → logprob: -5.951623916625977
    7. ' ' → logprob: -6.326623916625977
    8. ' n' → logprob: -7.701623916625977
    9. '<n' → logprob: -7.951623916625977
    10. ' <' → logprob: -8.201623916625977

Token 373: ' a' (ID: 261)
  Prédit: 'a'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'a' → logprob: -0.006716436706483364
    2. ' a' → logprob: -5.006716251373291
    3. '[a' → logprob: -14.75671672821045
    4. '(a' → logprob: -15.25671672821045
    5. '	a' → logprob: -15.88171672821045
    6. 'answer' → logprob: -16.006715774536133
    7. ')a' → logprob: -16.006715774536133
    8. ')' → logprob: -17.131715774536133
    9. '[' → logprob: -17.381715774536133
    10. ' ' → logprob: -17.631715774536133

Token 374: ':' (ID: 25)
  Prédit: ':'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ':' → logprob: -0.0013288103509694338
    2. ':
' → logprob: -6.876328945159912
    3. ' :' → logprob: -8.626328468322754
    4. '):' → logprob: -9.126328468322754
    5. ' and' → logprob: -13.751328468322754
    6. ')' → logprob: -13.876328468322754
    7. ' :
' → logprob: -14.001328468322754
    8. '[' → logprob: -14.126328468322754
    9. ':return' → logprob: -14.126328468322754
    10. '):
' → logprob: -14.751328468322754

Token 375: ' ' (ID: 220)
  Prédit: '       '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '       ' → logprob: -0.24522387981414795
    2. ' 
' → logprob: -2.8702239990234375
    3. '\n' → logprob: -3.1202239990234375
    4. '
' → logprob: -3.7452239990234375
    5. '   ' → logprob: -3.9952239990234375
    6. '    ' → logprob: -4.1202239990234375
    7. '    
' → logprob: -4.2452239990234375
    8. '        
' → logprob: -4.3702239990234375
    9. ' ' → logprob: -4.4952239990234375
    10. ':' → logprob: -5.1202239990234375

Token 376: ' #' (ID: 1069)
  Prédit: '       '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '       ' → logprob: -0.2854417562484741
    2. '
' → logprob: -1.7854417562484741
    3. '   ' → logprob: -2.9104418754577637
    4. ' return' → logprob: -5.035441875457764
    5. 'return' → logprob: -5.410441875457764
    6. '    
' → logprob: -5.785441875457764
    7. ' 
' → logprob: -5.785441875457764
    8. '        
' → logprob: -5.910441875457764
    9. '    ' → logprob: -6.285441875457764
    10. ' answer' → logprob: -6.660441875457764

Token 377: ' si' (ID: 1784)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.31541067361831665
    2. '    ' → logprob: -2.440410614013672
    3. ' return' → logprob: -2.440410614013672
    4. '       ' → logprob: -3.315410614013672
    5. ' answer' → logprob: -3.690410614013672
    6. 'return' → logprob: -4.690410614013672
    7. '    
' → logprob: -4.690410614013672
    8. 'answer' → logprob: -5.440410614013672
    9. '#' → logprob: -6.690410614013672
    10. '        
' → logprob: -6.690410614013672

Token 378: ' aucun' (ID: 41678)
  Prédit: ' a'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' a' → logprob: -0.6178841590881348
    2. ' ' → logprob: -1.1178841590881348
    3. ' not' → logprob: -3.6178841590881348
    4. '1' → logprob: -3.9928841590881348
    5. ' answer' → logprob: -3.9928841590881348
    6. 'a' → logprob: -4.242884159088135
    7. ' n' → logprob: -4.492884159088135
    8. ' len' → logprob: -4.742884159088135
    9. '0' → logprob: -4.742884159088135
    10. ' True' → logprob: -4.867884159088135

Token 379: ' ' (ID: 220)
  Prédit: '1'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '1' → logprob: -0.852605402469635
    2. ' ' → logprob: -1.4776053428649902
    3. '(' → logprob: -1.7276053428649902
    4. 'a' → logprob: -2.9776053428649902
    5. ' a' → logprob: -2.9776053428649902
    6. '0' → logprob: -3.2276053428649902
    7. ' (' → logprob: -4.47760534286499
    8. '(a' → logprob: -4.72760534286499
    9. '2' → logprob: -5.97760534286499
    10. ' element' → logprob: -7.10260534286499

Token 380: '1' (ID: 16)
  Prédit: '1'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '1' → logprob: -0.13917775452136993
    2. 'a' → logprob: -2.2641777992248535
    3. ' ' → logprob: -4.2641777992248535
    4. ' a' → logprob: -4.8891777992248535
    5. '(' → logprob: -6.2641777992248535
    6. '2' → logprob: -6.7641777992248535
    7. 'x' → logprob: -7.7641777992248535
    8. '   ' → logprob: -8.389177322387695
    9. ' x' → logprob: -9.514177322387695
    10. 'element' → logprob: -9.639177322387695

Token 381: ' dedans' (ID: 183499)
  Prédit: ':'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ':' → logprob: -0.007076105568557978
    2. ':
' → logprob: -5.882076263427734
    3. '   ' → logprob: -6.257076263427734
    4. ',' → logprob: -6.632076263427734
    5. ' :' → logprob: -7.132076263427734
    6. ':return' → logprob: -9.507076263427734
    7. '):' → logprob: -9.882076263427734
    8. ' in' → logprob: -10.632076263427734
    9. ')' → logprob: -11.632076263427734
    10. ' :
' → logprob: -11.757076263427734

Token 382: ',' (ID: 11)
  Prédit: ':'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ':' → logprob: -0.0007921205251477659
    2. ':
' → logprob: -7.625792026519775
    3. ',' → logprob: -8.375792503356934
    4. '   ' → logprob: -10.625792503356934
    5. ' :' → logprob: -11.000792503356934
    6. ':return' → logprob: -11.000792503356934
    7. '):' → logprob: -11.500792503356934
    8. '       ' → logprob: -13.250792503356934
    9. '.' → logprob: -13.500792503356934
    10. ')' → logprob: -14.000792503356934

Token 383: ' je' (ID: 1264)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.13305997848510742
    2. ' return' → logprob: -2.8830599784851074
    3. ' answer' → logprob: -3.2580599784851074
    4. '       ' → logprob: -4.133059978485107
    5. '    ' → logprob: -4.633059978485107
    6. 'return' → logprob: -6.758059978485107
    7. 'answer' → logprob: -7.383059978485107
    8. '    
' → logprob: -7.383059978485107
    9. '
' → logprob: -8.383060455322266
    10. ' pass' → logprob: -8.383060455322266

Token 384: ' double' (ID: 3503)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.37765011191368103
    2. ' continue' → logprob: -1.7526501417160034
    3. 'continue' → logprob: -2.252650022506714
    4. '    ' → logprob: -4.252650260925293
    5. ':' → logprob: -5.127650260925293
    6. ' return' → logprob: -5.877650260925293
    7. '       ' → logprob: -6.377650260925293
    8. '    
' → logprob: -6.502650260925293
    9. ':
' → logprob: -6.877650260925293
    10. 'return' → logprob: -6.877650260925293

Token 385: ' la' (ID: 557)
  Prédit: 'answer'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'answer' → logprob: -0.16895842552185059
    2. ' answer' → logprob: -2.0439584255218506
    3. '   ' → logprob: -4.29395866394043
    4. '*' → logprob: -5.66895866394043
    5. '
' → logprob: -6.16895866394043
    6. '    
' → logprob: -6.29395866394043
    7. '	answer' → logprob: -6.54395866394043
    8. ':
' → logprob: -7.16895866394043
    9. '=' → logprob: -7.54395866394043
    10. '(answer' → logprob: -7.54395866394043

Token 386: ' réponse' (ID: 50332)
  Prédit: 'answer'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'answer' → logprob: -0.029788212850689888
    2. ' answer' → logprob: -3.5297882556915283
    3. '_answer' → logprob: -10.90478801727295
    4. '	answer' → logprob: -11.90478801727295
    5. 'ans' → logprob: -12.27978801727295
    6. ' ' → logprob: -12.90478801727295
    7. 'a' → logprob: -14.02978801727295
    8. '(answer' → logprob: -14.27978801727295
    9. ' 
' → logprob: -14.52978801727295
    10. '_' → logprob: -14.52978801727295

Token 387: ' ?
' (ID: 19740)
  Prédit: ':'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ':' → logprob: -0.6153192520141602
    2. '   ' → logprob: -0.9903192520141602
    3. '       ' → logprob: -3.24031925201416
    4. ':
' → logprob: -3.86531925201416
    5. '
' → logprob: -4.24031925201416
    6. ',' → logprob: -4.86531925201416
    7. '    
' → logprob: -6.11531925201416
    8. 'answer' → logprob: -7.36531925201416
    9. '=' → logprob: -7.99031925201416
    10. ' answer' → logprob: -8.36531925201416

Token 388: '       ' (ID: 309)
  Prédit: '       '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '       ' → logprob: -0.11635442078113556
    2. '   ' → logprob: -3.241354465484619
    3. ':' → logprob: -3.616354465484619
    4. ':
' → logprob: -3.616354465484619
    5. ' answer' → logprob: -5.616354465484619
    6. ',' → logprob: -5.741354465484619
    7. '        
' → logprob: -5.991354465484619
    8. '    
' → logprob: -6.241354465484619
    9. 'answer' → logprob: -6.741354465484619
    10. '
' → logprob: -7.366354465484619

Token 389: ' answer' (ID: 6052)
  Prédit: 'answer'
  Correct (stricte): False
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'answer' (adapté à ' answer') → logprob: -0.47803792357444763
    2. ' answer' → logprob: -0.97803795337677
    3. '   ' → logprob: -5.6030378341674805
    4. '	answer' → logprob: -8.60303783416748
    5. '
' → logprob: -9.97803783416748
    6. '    
' → logprob: -11.10303783416748
    7. ' 
' → logprob: -12.10303783416748
    8. '       ' → logprob: -12.22803783416748
    9. '    ' → logprob: -12.35303783416748
    10. ' ' → logprob: -14.10303783416748

Token 390: ' =' (ID: 314)
  Prédit: '*='
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '*=' → logprob: -0.2706319987773895
    2. ' *=' → logprob: -1.770632028579712
    3. '=' → logprob: -2.770632028579712
    4. '*' → logprob: -5.645631790161133
    5. ' =' → logprob: -8.020631790161133
    6. '+=' → logprob: -8.645631790161133
    7. ' <<=' → logprob: -8.770631790161133
    8. ' ' → logprob: -11.020631790161133
    9. ' +=' → logprob: -11.395631790161133
    10. ' ' → logprob: -11.645631790161133

Token 391: ' answer' (ID: 6052)
  Prédit: '2'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '2' → logprob: -0.00894225388765335
    2. ' ' → logprob: -4.758942127227783
    3. '   ' → logprob: -8.883942604064941
    4. 'answer' → logprob: -8.883942604064941
    5. ' answer' → logprob: -10.383942604064941
    6. '    ' → logprob: -12.383942604064941
    7. '(' → logprob: -12.758942604064941
    8. '1' → logprob: -12.758942604064941
    9. ' (' → logprob: -13.008942604064941
    10. '(answer' → logprob: -13.258942604064941

Token 392: ' *' (ID: 425)
  Prédit: '*'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '*' → logprob: -0.012883718125522137
    2. ' *' → logprob: -4.38788366317749
    3. '0' → logprob: -8.762884140014648
    4. '2' → logprob: -9.512884140014648
    5. ' ' → logprob: -9.512884140014648
    6. '**' → logprob: -10.262884140014648
    7. '*
' → logprob: -11.512884140014648
    8. '<<' → logprob: -11.512884140014648
    9. ' ' → logprob: -12.762884140014648
    10. '1' → logprob: -13.387884140014648

Token 393: ' ' (ID: 220)
  Prédit: '2'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '2' → logprob: -0.0004925066023133695
    2. ' ' → logprob: -7.625492572784424
    3. '
' → logprob: -13.000492095947266
    4. '3' → logprob: -14.500492095947266
    5. '1' → logprob: -14.875492095947266
    6. '(' → logprob: -15.000492095947266
    7. 'pow' → logprob: -15.125492095947266
    8. '4' → logprob: -15.250492095947266
    9. '   ' → logprob: -15.875492095947266
    10. '  ' → logprob: -16.375492095947266

Token 394: '2' (ID: 17)
  Prédit: '2'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '2' → logprob: -0.00010080150241265073
    2. ' ' → logprob: -9.250101089477539
    3. '(' → logprob: -13.750101089477539
    4. 'pow' → logprob: -13.750101089477539
    5. '1' → logprob: -14.375101089477539
    6. '3' → logprob: -14.500101089477539
    7. '   ' → logprob: -14.875101089477539
    8. '4' → logprob: -15.250101089477539
    9. '
' → logprob: -15.250101089477539
    10. 'len' → logprob: -15.875101089477539

Token 395: '
' (ID: 198)
  Prédit: ''
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False

Token 396: '       ' (ID: 309)
  Prédit: '
'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '
' → logprob: -0.93785560131073
    2. '<|end|>' → logprob: -1.18785560131073
    3. '\n' → logprob: -1.81285560131073
    4. ':' → logprob: -2.6878557205200195
    5. ')' → logprob: -3.6878557205200195
    6. '   ' → logprob: -4.1878557205200195
    7. ' ' → logprob: -4.8128557205200195
    8. ' 
' → logprob: -5.1878557205200195
    9. '\' → logprob: -5.1878557205200195
    10. '  
' → logprob: -6.0628557205200195

Token 397: ' for' (ID: 395)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.5006170868873596
    2. ' ' → logprob: -1.8756170272827148
    3. '<|end|>' → logprob: -2.375617027282715
    4. '
' → logprob: -2.500617027282715
    5. 'return' → logprob: -4.000617027282715
    6. '    
' → logprob: -4.875617027282715
    7. ' 
' → logprob: -4.875617027282715
    8. ' return' → logprob: -5.250617027282715
    9. ')' → logprob: -5.375617027282715
    10. '  ' → logprob: -5.625617027282715

Token 398: ' j' (ID: 441)
  Prédit: 'i'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'i' → logprob: -0.200270414352417
    2. ' i' → logprob: -1.825270414352417
    3. 'x' → logprob: -4.200270652770996
    4. '_' → logprob: -6.200270652770996
    5. ' x' → logprob: -6.325270652770996
    6. ' _' → logprob: -7.950270652770996
    7. '_i' → logprob: -8.200270652770996
    8. 'ai' → logprob: -8.325270652770996
    9. 'v' → logprob: -8.575270652770996
    10. ' v' → logprob: -9.950270652770996

Token 399: ' in' (ID: 306)
  Prédit: ' in'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' in' → logprob: -0.023081012070178986
    2. 'in' → logprob: -3.898081064224243
    3. ' ' → logprob: -6.023080825805664
    4. '_' → logprob: -11.023080825805664
    5. ',' → logprob: -11.148080825805664
    6. ' ' → logprob: -11.398080825805664
    7. ' i' → logprob: -11.523080825805664
    8. ' j' → logprob: -11.773080825805664
    9. 'n' → logprob: -11.898080825805664
    10. '   ' → logprob: -12.023080825805664

Token 400: ' range' (ID: 3352)
  Prédit: 'range'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'range' → logprob: -0.031461380422115326
    2. 'a' → logprob: -3.906461477279663
    3. ' range' → logprob: -4.531461238861084
    4. ' a' → logprob: -9.781461715698242
    5. '[' → logprob: -11.781461715698242
    6. '   ' → logprob: -12.156461715698242
    7. ' ' → logprob: -12.281461715698242
    8. 're' → logprob: -12.906461715698242
    9. '[a' → logprob: -13.031461715698242
    10. '	range' → logprob: -13.031461715698242

Token 401: '(n' (ID: 2406)
  Prédit: '(n'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(n' → logprob: -0.024052660912275314
    2. '(' → logprob: -4.024052619934082
    3. '(len' → logprob: -5.149052619934082
    4. '(a' → logprob: -9.899052619934082
    5. 'n' → logprob: -10.649052619934082
    6. 'len' → logprob: -13.649052619934082
    7. ' (' → logprob: -14.024052619934082
    8. '(m' → logprob: -14.149052619934082
    9. '(i' → logprob: -14.149052619934082
    10. '(j' → logprob: -14.149052619934082

Token 402: '):
' (ID: 1883)
  Prédit: '):'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '):' → logprob: -0.4900977909564972
    2. '):
' → logprob: -0.9900977611541748
    3. '-' → logprob: -4.240097999572754
    4. ' -' → logprob: -7.615097999572754
    5. '   ' → logprob: -7.990097999572754
    6. ' ):' → logprob: -8.365097999572754
    7. ')' → logprob: -8.865097999572754
    8. '):
' → logprob: -9.115097999572754
    9. ' ):
' → logprob: -9.740097999572754
    10. '       ' → logprob: -9.990097999572754

Token 403: '           ' (ID: 352)
  Prédit: '           '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '           ' → logprob: -0.44608715176582336
    2. ' if' → logprob: -1.946087121963501
    3. '       ' → logprob: -2.696087121963501
    4. '<|end|>' → logprob: -2.696087121963501
    5. ' ' → logprob: -3.446087121963501
    6. 'if' → logprob: -3.821087121963501
    7. '   ' → logprob: -5.19608736038208
    8. '<|end|>' → logprob: -5.69608736038208
    9. ':' → logprob: -5.94608736038208
    10. '        ' → logprob: -6.19608736038208

Token 404: ' a' (ID: 261)
  Prédit: 'if'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'if' → logprob: -0.515437126159668
    2. ' if' → logprob: -1.015437126159668
    3. '       ' → logprob: -3.265437126159668
    4. '   ' → logprob: -6.390437126159668
    5. '           ' → logprob: -8.515437126159668
    6. '    ' → logprob: -9.015437126159668
    7. 'answer' → logprob: -9.140437126159668
    8. '	if' → logprob: -10.140437126159668
    9. ' ' → logprob: -10.140437126159668
    10. ' answer' → logprob: -10.640437126159668

Token 405: '[j' (ID: 7895)
  Prédit: '[j'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '[j' → logprob: -0.03399696573615074
    2. '[' → logprob: -4.033997058868408
    3. '[a' → logprob: -4.283997058868408
    4. 'a' → logprob: -6.908997058868408
    5. ' [' → logprob: -7.783997058868408
    6. 'if' → logprob: -9.53399658203125
    7. ' =' → logprob: -9.90899658203125
    8. 'j' → logprob: -10.28399658203125
    9. '[i' → logprob: -10.40899658203125
    10. ' a' → logprob: -10.40899658203125

Token 406: ']' (ID: 60)
  Prédit: ']'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ']' → logprob: -0.013065880164504051
    2. ']==' → logprob: -5.013065814971924
    3. ' ]' → logprob: -5.388065814971924
    4. ']+=' → logprob: -6.638065814971924
    5. ']!=' → logprob: -8.638066291809082
    6. ')' → logprob: -8.888066291809082
    7. ']=' → logprob: -10.263066291809082
    8. '])' → logprob: -10.513066291809082
    9. ']+' → logprob: -11.013066291809082
    10. '==' → logprob: -11.138066291809082

Token 407: ' //' (ID: 602)
  Prédit: '='
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '=' → logprob: -0.9803999066352844
    2. '+=' → logprob: -1.1053998470306396
    3. ' +=' → logprob: -1.6053998470306396
    4. ' =' → logprob: -2.9803998470306396
    5. ' ^=' → logprob: -3.4803998470306396
    6. '==' → logprob: -5.355400085449219
    7. ' ' → logprob: -6.730400085449219
    8. ' ==' → logprob: -7.230400085449219
    9. ' |=' → logprob: -7.230400085449219
    10. '*=' → logprob: -7.355400085449219

Token 408: '=' (ID: 28)
  Prédit: '='
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '=' → logprob: -8.41866585687967e-06
    2. '2' → logprob: -12.500008583068848
    3. '=
' → logprob: -12.625008583068848
    4. '=a' → logprob: -15.500008583068848
    5. '1' → logprob: -15.875008583068848
    6. '/=' → logprob: -15.875008583068848
    7. '=

' → logprob: -16.00000762939453
    8. ' ' → logprob: -16.25000762939453
    9. '+=' → logprob: -16.50000762939453
    10. '=_' → logprob: -16.62500762939453

Token 409: ' ' (ID: 220)
  Prédit: '2'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '2' → logprob: -0.0013501148205250502
    2. ' ' → logprob: -7.751349925994873
    3. '10' → logprob: -7.751349925994873
    4. '3' → logprob: -7.876349925994873
    5. '4' → logprob: -10.126350402832031
    6. '6' → logprob: -11.001350402832031
    7. '5' → logprob: -11.126350402832031
    8. '1' → logprob: -11.251350402832031
    9. '7' → logprob: -12.126350402832031
    10. '9' → logprob: -12.626350402832031

Token 410: '2' (ID: 17)
  Prédit: '2'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '2' → logprob: -0.0019313741941004992
    2. '10' → logprob: -7.001931190490723
    3. '3' → logprob: -7.251931190490723
    4. '4' → logprob: -9.126931190490723
    5. ' ' → logprob: -10.001931190490723
    6. '6' → logprob: -10.001931190490723
    7. '5' → logprob: -10.251931190490723
    8. '7' → logprob: -10.751931190490723
    9. '1' → logprob: -11.251931190490723
    10. '9' → logprob: -11.626931190490723

Token 411: '

' (ID: 279)
  Prédit: ''
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False

Token 412: '   ' (ID: 271)
  Prédit: ''
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False

Token 413: ' res' (ID: 694)
  Prédit: ' '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' ' → logprob: -0.06862369179725647
    2. ' 
' → logprob: -3.1936237812042236
    3. '\n' → logprob: -5.4436235427856445
    4. '<|end|>' → logprob: -5.4436235427856445
    5. '   ' → logprob: -5.5686235427856445
    6. '\' → logprob: -6.0686235427856445
    7. '#' → logprob: -6.1936235427856445
    8. ')' → logprob: -6.4436235427856445
    9. '[' → logprob: -6.6936235427856445
    10. ' \' → logprob: -6.9436235427856445

Token 414: ' =' (ID: 314)
  Prédit: ' ='
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' =' → logprob: -0.296609103679657
    2. '=' → logprob: -1.7966091632843018
    3. 'ult' → logprob: -2.4216091632843018
    4. 'u' → logprob: -7.046608924865723
    5. 'ults' → logprob: -7.546608924865723
    6. 'ultat' → logprob: -7.796608924865723
    7. 'ulta' → logprob: -10.296608924865723
    8. 'ault' → logprob: -10.546608924865723
    9. ' ' → logprob: -10.671608924865723
    10. 'ULT' → logprob: -10.671608924865723

Token 415: ' ' (ID: 220)
  Prédit: '0'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '0' → logprob: -0.21264459192752838
    2. '[' → logprob: -2.587644577026367
    3. '1' → logprob: -2.837644577026367
    4. '[]' → logprob: -3.337644577026367
    5. ' ' → logprob: -5.087644577026367
    6. 'default' → logprob: -5.337644577026367
    7. 'a' → logprob: -5.462644577026367
    8. 'answer' → logprob: -6.462644577026367
    9. '[a' → logprob: -6.962644577026367
    10. ' [' → logprob: -6.962644577026367

Token 416: '0' (ID: 15)
  Prédit: '0'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '0' → logprob: -0.4005115330219269
    2. '[' → logprob: -1.5255115032196045
    3. '1' → logprob: -3.4005115032196045
    4. '[]' → logprob: -3.4005115032196045
    5. 'default' → logprob: -3.5255115032196045
    6. 'a' → logprob: -4.900511741638184
    7. '[a' → logprob: -5.775511741638184
    8. 'answer' → logprob: -6.150511741638184
    9. '[n' → logprob: -6.775511741638184
    10. '{}' → logprob: -7.775511741638184

Token 417: '
' (ID: 198)
  Prédit: ''
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False

Token 418: '   ' (ID: 271)
  Prédit: '
'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '
' → logprob: -0.58247971534729
    2. ' for' → logprob: -2.08247971534729
    3. '<|end|>' → logprob: -2.33247971534729
    4. 'for' → logprob: -2.45747971534729
    5. '   ' → logprob: -2.95747971534729
    6. '[' → logprob: -3.33247971534729
    7. ' ' → logprob: -4.332479476928711
    8. ' 
' → logprob: -4.957479476928711
    9. ')' → logprob: -5.707479476928711
    10. '    
' → logprob: -6.332479476928711

Token 419: ' #' (ID: 1069)
  Prédit: ' for'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' for' → logprob: -0.7144224047660828
    2. 'for' → logprob: -0.7144224047660828
    3. ' i' → logprob: -4.464422225952148
    4. 'i' → logprob: -5.464422225952148
    5. '_' → logprob: -6.339422225952148
    6. ' ' → logprob: -6.589422225952148
    7. '0' → logprob: -7.214422225952148
    8. 'a' → logprob: -8.464422225952148
    9. ' a' → logprob: -8.964422225952148
    10. 'range' → logprob: -8.964422225952148

Token 420: ' Un' (ID: 1367)
  Prédit: ' for'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' for' → logprob: -0.6441711187362671
    2. 'for' → logprob: -0.7691711187362671
    3. ')' → logprob: -6.019171237945557
    4. 'i' → logprob: -6.394171237945557
    5. ' ' → logprob: -6.519171237945557
    6. ' i' → logprob: -6.644171237945557
    7. '<|end|>' → logprob: -6.894171237945557
    8. 'range' → logprob: -7.519171237945557
    9. 'j' → logprob: -8.019170761108398
    10. 'a' → logprob: -8.019170761108398

Token 421: ' bout' (ID: 19714)
  Prédit: 'for'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'for' → logprob: -0.3773159384727478
    2. ' for' → logprob: -1.7523159980773926
    3. ')' → logprob: -3.0023159980773926
    4. '#' → logprob: -4.002315998077393
    5. ' =' → logprob: -4.377315998077393
    6. ' #' → logprob: -4.502315998077393
    7. '=' → logprob: -4.627315998077393
    8. '   ' → logprob: -4.877315998077393
    9. ' ' → logprob: -5.252315998077393
    10. ']' → logprob: -5.877315998077393

Token 422: ' avec' (ID: 3937)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.6054328083992004
    2. ' for' → logprob: -1.1054327487945557
    3. ' de' → logprob: -3.3554327487945557
    4. 'for' → logprob: -3.7304327487945557
    5. ' ' → logprob: -3.8554327487945557
    6. '    ' → logprob: -4.730432987213135
    7. '...' → logprob: -4.855432987213135
    8. '#' → logprob: -5.230432987213135
    9. '
' → logprob: -5.605432987213135
    10. ' #' → logprob: -5.730432987213135

Token 423: ' Lucas' (ID: 47331)
  Prédit: 'for'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'for' → logprob: -1.0493295192718506
    2. 'range' → logprob: -1.4243295192718506
    3. 'a' → logprob: -2.1743295192718506
    4. ' for' → logprob: -2.2993295192718506
    5. ' range' → logprob: -2.6743295192718506
    6. ' a' → logprob: -2.9243295192718506
    7. 'n' → logprob: -4.04932975769043
    8. ' n' → logprob: -4.17432975769043
    9. 'res' → logprob: -4.54932975769043
    10. ' res' → logprob: -4.79932975769043

Token 424: ',' (ID: 11)
  Prédit: ' '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' ' → logprob: -0.8872106671333313
    2. '<|end|>' → logprob: -1.0122106075286865
    3. 'for' → logprob: -2.3872106075286865
    4. ' for' → logprob: -2.7622106075286865
    5. '   ' → logprob: -4.512210845947266
    6. '#' → logprob: -4.512210845947266
    7. ',' → logprob: -4.887210845947266
    8. '<|end|>' → logprob: -5.012210845947266
    9. 'def' → logprob: -5.262210845947266
    10. '  ' → logprob: -5.387210845947266

Token 425: ' je' (ID: 1264)
  Prédit: ' for'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' for' → logprob: -0.2989678382873535
    2. 'for' → logprob: -2.0489678382873535
    3. ' ' → logprob: -2.9239678382873535
    4. ' i' → logprob: -2.9239678382873535
    5. ' 
' → logprob: -5.5489678382873535
    6. '#' → logprob: -5.6739678382873535
    7. 'i' → logprob: -5.6739678382873535
    8. ' while' → logprob: -6.1739678382873535
    9. ' #' → logprob: -6.6739678382873535
    10. ' n' → logprob: -7.0489678382873535

Token 426: ' comprends' (ID: 145804)
  Prédit: ' continue'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' continue' → logprob: -0.9302507042884827
    2. 'continue' → logprob: -1.805250644683838
    3. ' pense' → logprob: -1.930250644683838
    4. 'for' → logprob: -2.680250644683838
    5. ' vais' → logprob: -2.930250644683838
    6. 'n' → logprob: -3.680250644683838
    7. 's' → logprob: -3.680250644683838
    8. ' for' → logprob: -3.805250644683838
    9. ' suppose' → logprob: -3.805250644683838
    10. '#' → logprob: -3.930250644683838

Token 427: ' pas' (ID: 2173)
  Prédit: ' rien'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' rien' → logprob: -1.6120003461837769
    2. ' ' → logprob: -1.7370003461837769
    3. '   ' → logprob: -1.7370003461837769
    4. '    ' → logprob: -1.8620003461837769
    5. ' pas' → logprob: -2.4870004653930664
    6. ' que' → logprob: -2.9870004653930664
    7. 'pas' → logprob: -3.6120004653930664
    8. ' for' → logprob: -4.237000465393066
    9. 'for' → logprob: -4.487000465393066
    10. '...' → logprob: -4.487000465393066

Token 428: ' tous' (ID: 10688)
  Prédit: ' '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' ' → logprob: -0.301697701215744
    2. '<|end|>' → logprob: -1.5516977310180664
    3. '...' → logprob: -4.051697731018066
    4. ',' → logprob: -4.926697731018066
    5. '<|end|>' → logprob: -5.301697731018066
    6. ' for' → logprob: -5.426697731018066
    7. '
' → logprob: -6.051697731018066
    8. ' 
' → logprob: -6.051697731018066
    9. ' ,' → logprob: -6.426697731018066
    10. '  ' → logprob: -6.676697731018066

Token 429: ' les' (ID: 1341)
  Prédit: ':'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ':' → logprob: -1.3283476829528809
    2. 'tokens' → logprob: -1.9533476829528809
    3. '...' → logprob: -2.953347682952881
    4. ' la' → logprob: -3.078347682952881
    5. '#' → logprob: -3.078347682952881
    6. ' for' → logprob: -3.203347682952881
    7. ' tokens' → logprob: -3.328347682952881
    8. ' the' → logprob: -3.328347682952881
    9. 'a' → logprob: -3.453347682952881
    10. 'for' → logprob: -3.453347682952881

Token 430: ' bits' (ID: 18189)
  Prédit: '#'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '#' → logprob: -0.775692343711853
    2. ' commentaires' → logprob: -1.525692343711853
    3. 'tokens' → logprob: -2.9006924629211426
    4. 'comment' → logprob: -3.0256924629211426
    5. ' détails' → logprob: -3.0256924629211426
    6. 'comments' → logprob: -3.4006924629211426
    7. '_' → logprob: -3.9006924629211426
    8. 'a' → logprob: -4.025692462921143
    9. 'indices' → logprob: -4.025692462921143
    10. ' comments' → logprob: -4.400692462921143

Token 431: ' mais' (ID: 2899)
  Prédit: ' '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' ' → logprob: -0.41292935609817505
    2. '   ' → logprob: -1.6629292964935303
    3. '...' → logprob: -3.6629292964935303
    4. ',' → logprob: -3.6629292964935303
    5. '<|end|>' → logprob: -3.6629292964935303
    6. ':' → logprob: -4.662929534912109
    7. '  ' → logprob: -4.912929534912109
    8. '.' → logprob: -5.037929534912109
    9. '  
' → logprob: -5.037929534912109
    10. ' 
' → logprob: -5.162929534912109

Token 432: ' bon' (ID: 4846)
  Prédit: '#'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '#' → logprob: -0.5970396995544434
    2. ' for' → logprob: -1.2220396995544434
    3. 'for' → logprob: -2.2220396995544434
    4. ' #' → logprob: -4.222039699554443
    5. '   ' → logprob: -4.597039699554443
    6. 'return' → logprob: -4.972039699554443
    7. 'pass' → logprob: -5.222039699554443
    8. ' return' → logprob: -5.472039699554443
    9. '...' → logprob: -6.347039699554443
    10. ' res' → logprob: -7.597039699554443

Token 433: ' ça' (ID: 13590)
  Prédit: ''
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False

Token 434: ' marche' (ID: 58191)
  Prédit: ' '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' ' → logprob: -0.04497259482741356
    2. '<|end|>' → logprob: -3.6699726581573486
    3. '
' → logprob: -5.7949724197387695
    4. ' 
' → logprob: -6.0449724197387695
    5. '   ' → logprob: -6.1699724197387695
    6. '  ' → logprob: -6.2949724197387695
    7. ':' → logprob: -6.5449724197387695
    8. ' continue' → logprob: -6.9199724197387695
    9. '    ' → logprob: -7.0449724197387695
    10. ' continues' → logprob: -7.4199724197387695

Token 435: '
' (ID: 198)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -1.0378724336624146
    2. '<|end|>' → logprob: -1.1628724336624146
    3. ' ' → logprob: -1.9128724336624146
    4. '
' → logprob: -3.287872314453125
    5. ':' → logprob: -3.412872314453125
    6. '...' → logprob: -3.662872314453125
    7. ',' → logprob: -3.912872314453125
    8. ' for' → logprob: -4.287872314453125
    9. ' 
' → logprob: -4.537872314453125
    10. '  
' → logprob: -5.037872314453125

Token 436: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.4251111149787903
    2. ' ' → logprob: -1.3001110553741455
    3. ' for' → logprob: -3.6751110553741455
    4. ' 
' → logprob: -4.175111293792725
    5. '<|end|>' → logprob: -4.925111293792725
    6. '    ' → logprob: -5.300111293792725
    7. ' ' → logprob: -5.925111293792725
    8. ',' → logprob: -5.925111293792725
    9. '[' → logprob: -6.175111293792725
    10. ' i' → logprob: -6.425111293792725

Token 437: ' for' (ID: 395)
  Prédit: ' for'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' for' → logprob: -0.26416292786598206
    2. ' i' → logprob: -2.139163017272949
    3. 'for' (adapté à ' for') → logprob: -2.889163017272949
    4. ' ' → logprob: -3.639163017272949
    5. 'i' → logprob: -4.889163017272949
    6. '   ' → logprob: -5.014163017272949
    7. ' 
' → logprob: -5.139163017272949
    8. '
' → logprob: -6.389163017272949
    9. ' n' → logprob: -6.764163017272949
    10. 'n' → logprob: -6.764163017272949

Token 438: ' i' (ID: 575)
  Prédit: ' i'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' i' → logprob: -0.14963917434215546
    2. 'i' → logprob: -2.774639129638672
    3. ' j' → logprob: -3.149639129638672
    4. ' x' → logprob: -4.149639129638672
    5. 'j' → logprob: -5.024639129638672
    6. 'x' → logprob: -6.149639129638672
    7. ' _' → logprob: -6.274639129638672
    8. ' k' → logprob: -6.524639129638672
    9. '_' → logprob: -6.899639129638672
    10. ' bit' → logprob: -7.149639129638672

Token 439: ' in' (ID: 306)
  Prédit: ' in'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' in' → logprob: -0.03406507149338722
    2. 'in' → logprob: -3.409065008163452
    3. ' ' → logprob: -8.034065246582031
    4. ',' → logprob: -10.909065246582031
    5. 'range' → logprob: -10.909065246582031
    6. 'n' → logprob: -11.159065246582031
    7. '_' → logprob: -11.284065246582031
    8. '  ' → logprob: -12.159065246582031
    9. ' i' → logprob: -12.409065246582031
    10. ')' → logprob: -12.409065246582031

Token 440: ' range' (ID: 3352)
  Prédit: 'range'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'range' → logprob: -0.3486625850200653
    2. ' range' → logprob: -1.2236626148223877
    3. 'a' → logprob: -9.223662376403809
    4. ' ' → logprob: -9.723662376403809
    5. ' a' → logprob: -10.723662376403809
    6. '   ' → logprob: -11.973662376403809
    7. ')' → logprob: -12.098662376403809
    8. 'n' → logprob: -12.223662376403809
    9. '  ' → logprob: -12.598662376403809
    10. '
' → logprob: -12.973662376403809

Token 441: '(n' (ID: 2406)
  Prédit: '(n'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(n' → logprob: -0.0033646197989583015
    2. '(' → logprob: -5.753364562988281
    3. 'n' → logprob: -8.753364562988281
    4. '(len' → logprob: -11.003364562988281
    5. '(res' → logprob: -13.128364562988281
    6. ' n' → logprob: -13.128364562988281
    7. '1' → logprob: -13.503364562988281
    8. '(s' → logprob: -13.628364562988281
    9. ' (' → logprob: -13.878364562988281
    10. '(a' → logprob: -13.878364562988281

Token 442: '):
' (ID: 1883)
  Prédit: '):'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '):' → logprob: -0.022627292200922966
    2. '):
' → logprob: -3.897627353668213
    3. ' ):' → logprob: -6.522627353668213
    4. '+' → logprob: -8.272626876831055
    5. '   ' → logprob: -9.022626876831055
    6. '-' → logprob: -9.022626876831055
    7. ')' → logprob: -9.522626876831055
    8. ' -' → logprob: -11.772626876831055
    9. '):
' → logprob: -12.022626876831055
    10. ' ):
' → logprob: -12.022626876831055

Token 443: '       ' (ID: 309)
  Prédit: '       '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '       ' → logprob: -0.042044561356306076
    2. ' ' → logprob: -3.9170446395874023
    3. '    ' → logprob: -4.792044639587402
    4. '   ' → logprob: -5.542044639587402
    5. ',' → logprob: -5.917044639587402
    6. '        
' → logprob: -6.542044639587402
    7. '        ' → logprob: -6.667044639587402
    8. ' 
' → logprob: -7.292044639587402
    9. '<|end|>' → logprob: -8.167044639587402
    10. '     ' → logprob: -8.292044639587402

Token 444: ' #' (ID: 1069)
  Prédit: ' res'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' res' → logprob: -0.8165206909179688
    2. 'res' → logprob: -1.8165206909179688
    3. '       ' → logprob: -2.4415206909179688
    4. '   ' → logprob: -2.4415206909179688
    5. ' if' → logprob: -2.5665206909179688
    6. ' for' → logprob: -2.8165206909179688
    7. 'if' → logprob: -3.1915206909179688
    8. 'for' → logprob: -3.4415206909179688
    9. 'a' → logprob: -5.441520690917969
    10. ' a' → logprob: -5.566520690917969

Token 445: ' Pour' (ID: 13931)
  Prédit: ' res'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' res' → logprob: -1.0968903303146362
    2. 'if' → logprob: -1.3468903303146362
    3. ' if' → logprob: -1.9718903303146362
    4. 'res' → logprob: -2.096890449523926
    5. 'for' → logprob: -2.971890449523926
    6. ' for' → logprob: -3.721890449523926
    7. '   ' → logprob: -3.971890449523926
    8. ' val' → logprob: -4.721890449523926
    9. 'val' → logprob: -5.096890449523926
    10. ' pass' → logprob: -5.221890449523926

Token 446: ' chaque' (ID: 21194)
  Prédit: 'j'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'j' → logprob: -0.331428200006485
    2. ' j' → logprob: -1.3314281702041626
    3. 'a' → logprob: -4.956428050994873
    4. 'i' → logprob: -5.081428050994873
    5. ' i' → logprob: -6.456428050994873
    6. ' a' → logprob: -6.831428050994873
    7. ' res' → logprob: -7.581428050994873
    8. 'res' → logprob: -8.706428527832031
    9. 'x' → logprob: -8.831428527832031
    10. ' ' → logprob: -8.831428527832031

Token 447: ' bit' (ID: 3546)
  Prédit: ' j'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' j' → logprob: -0.3157656788825989
    2. 'j' → logprob: -1.315765619277954
    3. 'a' → logprob: -7.440765857696533
    4. 'bit' → logprob: -8.065765380859375
    5. ' a' → logprob: -8.440765380859375
    6. 'k' → logprob: -8.565765380859375
    7. ' bit' → logprob: -8.940765380859375
    8. ' k' → logprob: -9.315765380859375
    9. 'd' → logprob: -9.440765380859375
    10. 'val' → logprob: -9.440765380859375

Token 448: ' où' (ID: 15113)
  Prédit: ':'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ':' → logprob: -0.8441767692565918
    2. '           ' → logprob: -1.7191767692565918
    3. '       ' → logprob: -2.219176769256592
    4. ' for' → logprob: -2.344176769256592
    5. ' if' → logprob: -2.969176769256592
    6. ' :' → logprob: -3.844176769256592
    7. ',' → logprob: -4.219176769256592
    8. ' <<=' → logprob: -4.219176769256592
    9. 'for' → logprob: -4.469176769256592
    10. '=' → logprob: -4.594176769256592

Token 449: ' c' (ID: 274)
  Prédit: ' a'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' a' → logprob: -0.3848207890987396
    2. 'a' → logprob: -1.384820818901062
    3. ' (' → logprob: -3.5098206996917725
    4. ' i' → logprob: -4.509820938110352
    5. '(' → logprob: -5.259820938110352
    6. ' ' → logprob: -5.384820938110352
    7. ' if' → logprob: -5.634820938110352
    8. ' answer' → logprob: -5.759820938110352
    9. 'if' → logprob: -6.384820938110352
    10. 'i' → logprob: -6.509820938110352

Token 450: ''est' (ID: 6616)
  Prédit: ' a'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' a' → logprob: -0.2055814266204834
    2. 'a' → logprob: -1.8305814266204834
    3. '   ' → logprob: -4.9555816650390625
    4. ' ' → logprob: -5.0805816650390625
    5. 'ont' → logprob: -5.5805816650390625
    6. ' in' → logprob: -6.5805816650390625
    7. 'on' → logprob: -6.5805816650390625
    8. '       ' → logprob: -7.0805816650390625
    9. 'e' → logprob: -7.7055816650390625
    10. '  ' → logprob: -8.205581665039062

Token 451: ' actif' (ID: 128435)
  Prédit: '1'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '1' → logprob: -0.5668795704841614
    2. 'a' → logprob: -1.8168795108795166
    3. ' a' → logprob: -2.1918795108795166
    4. ' ' → logprob: -2.3168795108795166
    5. ' set' → logprob: -3.4418795108795166
    6. '   ' → logprob: -4.441879749298096
    7. '(' → logprob: -5.566879749298096
    8. 'set' → logprob: -5.816879749298096
    9. '0' → logprob: -6.441879749298096
    10. ' (' → logprob: -6.816879749298096

Token 452: ' ?
' (ID: 19740)
  Prédit: ' if'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' if' → logprob: -0.8782660365104675
    2. '       ' → logprob: -1.0032660961151123
    3. ':' → logprob: -2.2532660961151123
    4. 'if' → logprob: -2.5032660961151123
    5. '   ' → logprob: -4.003265857696533
    6. ':
' → logprob: -4.878265857696533
    7. '           ' → logprob: -6.753265857696533
    8. ',' → logprob: -7.003265857696533
    9. ' :' → logprob: -7.253265857696533
    10. ' for' → logprob: -7.503265857696533

Token 453: '       ' (ID: 309)
  Prédit: '       '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '       ' → logprob: -0.17907389998435974
    2. ' if' → logprob: -1.9290739297866821
    3. '   ' → logprob: -4.679073810577393
    4. 'if' → logprob: -5.429073810577393
    5. ' for' → logprob: -6.054073810577393
    6. '<|end|>' → logprob: -7.429073810577393
    7. ',' → logprob: -8.30407428741455
    8. '    ' → logprob: -8.30407428741455
    9. 'token' → logprob: -8.80407428741455
    10. ' res' → logprob: -8.92907428741455

Token 454: ' if' (ID: 538)
  Prédit: 'if'
  Correct (stricte): False
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'if' (adapté à ' if') → logprob: -0.732676088809967
    2. ' if' → logprob: -1.1076760292053223
    3. 'for' → logprob: -2.9826760292053223
    4. ' res' → logprob: -3.2326760292053223
    5. '       ' → logprob: -3.4826760292053223
    6. ' for' → logprob: -3.7326760292053223
    7. '   ' → logprob: -4.357676029205322
    8. 'res' → logprob: -4.857676029205322
    9. ' bit' → logprob: -4.857676029205322
    10. 'bit' → logprob: -4.982676029205322

Token 455: ' (' (ID: 350)
  Prédit: ' a'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' a' → logprob: -0.6377127170562744
    2. 'a' → logprob: -1.6377127170562744
    3. ' (' → logprob: -1.6377127170562744
    4. '(a' → logprob: -2.5127127170562744
    5. '(' → logprob: -7.137712478637695
    6. '((' → logprob: -8.137712478637695
    7. ' ' → logprob: -8.887712478637695
    8. ' ((' → logprob: -9.137712478637695
    9. ' not' → logprob: -9.637712478637695
    10. ' answer' → logprob: -9.762712478637695

Token 456: 'n' (ID: 77)
  Prédit: 'a'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'a' → logprob: -0.0350610725581646
    2. '(a' → logprob: -3.5350611209869385
    3. ' a' → logprob: -5.660060882568359
    4. ' (' → logprob: -7.660060882568359
    5. 'answer' → logprob: -7.785060882568359
    6. '1' → logprob: -7.785060882568359
    7. '(' → logprob: -8.03506088256836
    8. '((' → logprob: -9.41006088256836
    9. '(answer' → logprob: -10.03506088256836
    10. '   ' → logprob: -10.91006088256836

Token 457: '-' (ID: 12)
  Prédit: ' >>'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' >>' → logprob: -0.6854699850082397
    2. '>>' → logprob: -1.5604699850082397
    3. 'a' → logprob: -2.0604701042175293
    4. ')' → logprob: -3.0604701042175293
    5. '   ' → logprob: -3.1854701042175293
    6. ' &' → logprob: -3.9354701042175293
    7. ' a' → logprob: -4.560470104217529
    8. ' ' → logprob: -4.685470104217529
    9. '[i' → logprob: -4.935470104217529
    10. '%' → logprob: -6.060470104217529

Token 458: '1' (ID: 16)
  Prédit: 'i'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'i' → logprob: -0.24748337268829346
    2. '1' → logprob: -1.7474833726882935
    3. 'a' → logprob: -3.497483253479004
    4. ' i' → logprob: -4.497483253479004
    5. ')' → logprob: -6.622483253479004
    6. ' ' → logprob: -7.122483253479004
    7. ' a' → logprob: -7.122483253479004
    8. '   ' → logprob: -7.997483253479004
    9. '[i' → logprob: -9.872483253479004
    10. ')i' → logprob: -10.497483253479004

Token 459: ')' (ID: 8)
  Prédit: ')'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')' → logprob: -0.2806018888950348
    2. '>>' → logprob: -1.6556018590927124
    3. '-' → logprob: -4.155601978302002
    4. ' >>' → logprob: -4.405601978302002
    5. ' -' → logprob: -4.405601978302002
    6. ')>>' → logprob: -5.155601978302002
    7. ' )' → logprob: -6.280601978302002
    8. ')&' → logprob: -6.405601978302002
    9. '   ' → logprob: -6.780601978302002
    10. ' &' → logprob: -6.905601978302002

Token 460: ' &' (ID: 827)
  Prédit: ' &'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' &' → logprob: -0.8270420432090759
    2. '>>' → logprob: -1.3270421028137207
    3. '&' → logprob: -1.4520421028137207
    4. ' >>' → logprob: -3.0770421028137207
    5. ')' → logprob: -5.827042102813721
    6. ' ' → logprob: -5.952042102813721
    7. '==' → logprob: -6.452042102813721
    8. '-' → logprob: -6.452042102813721
    9. '   ' → logprob: -6.577042102813721
    10. ' -' → logprob: -6.827042102813721

Token 461: ' i' (ID: 575)
  Prédit: ' ('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' (' → logprob: -0.3304601013660431
    2. '(' → logprob: -1.4554600715637207
    3. 'a' → logprob: -3.7054600715637207
    4. ' a' → logprob: -3.9554600715637207
    5. 'i' → logprob: -6.330460071563721
    6. ' i' → logprob: -6.830460071563721
    7. '(i' → logprob: -7.330460071563721
    8. '1' → logprob: -7.580460071563721
    9. ' ' → logprob: -8.955460548400879
    10. '(a' → logprob: -8.955460548400879

Token 462: ' ==' (ID: 951)
  Prédit: ':'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ':' → logprob: -0.20339153707027435
    2. ' ==' → logprob: -2.2033915519714355
    3. '==' → logprob: -3.2033915519714355
    4. ' !=' → logprob: -4.4533915519714355
    5. '):' → logprob: -5.0783915519714355
    6. ':
' → logprob: -5.4533915519714355
    7. '!=' → logprob: -5.8283915519714355
    8. ')' → logprob: -6.2033915519714355
    9. ' :' → logprob: -6.4533915519714355
    10. ')==' → logprob: -6.5783915519714355

Token 463: ' i' (ID: 575)
  Prédit: 'i'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'i' → logprob: -0.5871405005455017
    2. ' i' → logprob: -1.0871405601501465
    3. '0' → logprob: -2.7121405601501465
    4. ' ' → logprob: -3.2121405601501465
    5. ' (' → logprob: -9.837140083312988
    6. '(i' → logprob: -9.962140083312988
    7. 'n' → logprob: -10.087140083312988
    8. '	i' → logprob: -10.712140083312988
    9. '   ' → logprob: -11.087140083312988
    10. '>' → logprob: -11.587140083312988

Token 464: ':
' (ID: 734)
  Prédit: ':'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ':' → logprob: -0.07066236436367035
    2. ':
' → logprob: -2.695662260055542
    3. '       ' → logprob: -8.070662498474121
    4. ' and' → logprob: -8.445662498474121
    5. '):' → logprob: -9.695662498474121
    6. '           ' → logprob: -10.445662498474121
    7. '<|end|>' → logprob: -10.570662498474121
    8. '):
' → logprob: -10.695662498474121
    9. ' :' → logprob: -10.820662498474121
    10. '<|end|>' → logprob: -11.570662498474121

Token 465: '           ' (ID: 352)
  Prédit: '       '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '       ' → logprob: -0.11849790066480637
    2. '           ' → logprob: -2.493497848510742
    3. ':
' → logprob: -4.368497848510742
    4. ':' → logprob: -5.118497848510742
    5. ',' → logprob: -5.868497848510742
    6. '
' → logprob: -5.993497848510742
    7. ' :' → logprob: -6.993497848510742
    8. '        
' → logprob: -7.368497848510742
    9. '   ' → logprob: -7.743497848510742
    10. ' :
' → logprob: -7.993497848510742

Token 466: ' #' (ID: 1069)
  Prédit: '       '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '       ' → logprob: -0.6124358177185059
    2. '           ' → logprob: -1.6124358177185059
    3. ' res' → logprob: -1.7374358177185059
    4. '               ' → logprob: -3.112435817718506
    5. 'res' → logprob: -4.237435817718506
    6. '
' → logprob: -4.737435817718506
    7. '   ' → logprob: -4.987435817718506
    8. ' ' → logprob: -6.612435817718506
    9. '0' → logprob: -7.487435817718506
    10. '	       ' → logprob: -7.487435817718506

Token 467: ' xor' (ID: 106402)
  Prédit: ' res'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' res' → logprob: -0.18723729252815247
    2. 'res' → logprob: -1.93723726272583
    3. '           ' → logprob: -4.68723726272583
    4. '       ' → logprob: -5.18723726272583
    5. ' if' → logprob: -5.31223726272583
    6. ' for' → logprob: -6.56223726272583
    7. 'if' → logprob: -6.81223726272583
    8. '   ' → logprob: -6.93723726272583
    9. 'for' → logprob: -7.43723726272583
    10. 'count' → logprob: -7.68723726272583

Token 468: ' sur' (ID: 1512)
  Prédit: ' ^='
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' ^=' → logprob: -0.4972880482673645
    2. ' res' → logprob: -1.7472879886627197
    3. 'res' → logprob: -2.3722879886627197
    4. ' =' → logprob: -3.2472879886627197
    5. ' answer' → logprob: -4.372288227081299
    6. 'answer' → logprob: -4.497288227081299
    7. '           ' → logprob: -4.497288227081299
    8. '=' → logprob: -4.747288227081299
    9. ' ^' → logprob: -4.872288227081299
    10. '   ' → logprob: -4.872288227081299

Token 469: ' le' (ID: 505)
  Prédit: 'a'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'a' → logprob: -0.3097083270549774
    2. ' a' → logprob: -2.4347083568573
    3. 'res' → logprob: -2.9347083568573
    4. 'range' → logprob: -3.3097083568573
    5. '   ' → logprob: -3.6847083568573
    6. 'i' → logprob: -4.059708118438721
    7. ' range' → logprob: -4.559708118438721
    8. ' res' → logprob: -4.684708118438721
    9. ' i' → logprob: -4.809708118438721
    10. 'answer' → logprob: -4.934708118438721

Token 470: ' plus' (ID: 2932)
  Prédit: 'a'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'a' → logprob: -0.3076077103614807
    2. 'range' → logprob: -2.182607650756836
    3. ' a' → logprob: -2.682607650756836
    4. ' range' → logprob: -3.307607650756836
    5. 'i' → logprob: -3.932607650756836
    6. 'n' → logprob: -4.932607650756836
    7. 'res' → logprob: -5.182607650756836
    8. ' i' → logprob: -6.057607650756836
    9. 'j' → logprob: -6.182607650756836
    10. '0' → logprob: -6.182607650756836

Token 471: ' faible' (ID: 75786)
  Prédit: 'long'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'long' → logprob: -0.4696442484855652
    2. 'grand' → logprob: -2.71964430809021
    3. 'i' → logprob: -2.84464430809021
    4. 'a' → logprob: -2.84464430809021
    5. 'large' → logprob: -2.96964430809021
    6. '=' → logprob: -3.46964430809021
    7. 'plus' → logprob: -4.094644069671631
    8. '1' → logprob: -4.219644069671631
    9. ' long' → logprob: -4.469644069671631
    10. 'n' → logprob: -4.844644069671631

Token 472: ' bit' (ID: 3546)
  Prédit: 'a'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'a' → logprob: -1.9250253438949585
    2. 'bit' → logprob: -2.050025463104248
    3. 'res' → logprob: -2.175025463104248
    4. '1' → logprob: -2.175025463104248
    5. ' bit' → logprob: -2.425025463104248
    6. ' res' → logprob: -2.425025463104248
    7. ' ' → logprob: -3.425025463104248
    8. ' ^' → logprob: -3.425025463104248
    9. ' a' → logprob: -3.550025463104248
    10. '   ' → logprob: -3.550025463104248

Token 473: '
' (ID: 198)
  Prédit: ' ^'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' ^' → logprob: -1.460748553276062
    2. '           ' → logprob: -1.585748553276062
    3. ':' → logprob: -2.0857486724853516
    4. '^' → logprob: -2.2107486724853516
    5. ' ^=' → logprob: -2.2107486724853516
    6. '       ' → logprob: -2.9607486724853516
    7. ':
' → logprob: -3.4607486724853516
    8. '               ' → logprob: -3.5857486724853516
    9. ' =' → logprob: -4.335748672485352
    10. '=' → logprob: -4.585748672485352

Token 474: '           ' (ID: 352)
  Prédit: '           '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '           ' → logprob: -0.6081873774528503
    2. '               ' → logprob: -1.6081874370574951
    3. ':' → logprob: -2.483187437057495
    4. '<|end|>' → logprob: -3.483187437057495
    5. ' ^' → logprob: -3.608187437057495
    6. ',' → logprob: -3.983187437057495
    7. '^' → logprob: -4.108187198638916
    8. '       ' → logprob: -4.108187198638916
    9. ' :' → logprob: -4.983187198638916
    10. ' ' → logprob: -5.233187198638916

Token 475: ' res' (ID: 694)
  Prédit: ' res'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' res' → logprob: -0.08734524250030518
    2. 'res' (adapté à ' res') → logprob: -3.4623451232910156
    3. '           ' → logprob: -3.5873451232910156
    4. ' answer' → logprob: -4.587345123291016
    5. '       ' → logprob: -5.587345123291016
    6. '               ' → logprob: -5.962345123291016
    7. ' x' → logprob: -6.087345123291016
    8. 'answer' → logprob: -6.337345123291016
    9. '   ' → logprob: -7.337345123291016
    10. ' ^' → logprob: -7.837345123291016

Token 476: ' ^=' (ID: 79665)
  Prédit: ' ^='
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' ^=' → logprob: -0.14899303019046783
    2. '^' → logprob: -2.0239930152893066
    3. '=' → logprob: -5.273993015289307
    4. '+=' → logprob: -7.148993015289307
    5. ' =' → logprob: -9.023993492126465
    6. ' ^' → logprob: -9.148993492126465
    7. ' ' → logprob: -9.523993492126465
    8. ' +=' → logprob: -10.148993492126465
    9. ' |=' → logprob: -11.148993492126465
    10. '|' → logprob: -11.648993492126465

Token 477: ' (' (ID: 350)
  Prédit: 'a'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'a' → logprob: -0.0463838055729866
    2. ' a' → logprob: -3.796383857727051
    3. 'i' → logprob: -4.921383857727051
    4. '(a' → logprob: -5.296383857727051
    5. ' (' → logprob: -5.796383857727051
    6. '(i' → logprob: -5.796383857727051
    7. '1' → logprob: -6.421383857727051
    8. '(' → logprob: -7.046383857727051
    9. ' i' → logprob: -7.421383857727051
    10. '((' → logprob: -7.671383857727051

Token 478: 'a' (ID: 64)
  Prédit: 'a'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'a' → logprob: -0.03834991157054901
    2. '1' → logprob: -3.7883498668670654
    3. 'i' → logprob: -4.9133501052856445
    4. '(' → logprob: -5.7883501052856445
    5. '(a' → logprob: -6.4133501052856445
    6. '(i' → logprob: -6.7883501052856445
    7. 'n' → logprob: -7.9133501052856445
    8. '((' → logprob: -8.038350105285645
    9. ' a' → logprob: -8.038350105285645
    10. 'answer' → logprob: -8.538350105285645

Token 479: '[i' (ID: 1768)
  Prédit: '[i'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '[i' → logprob: -0.000871082826051861
    2. '[' → logprob: -7.375871181488037
    3. 'i' → logprob: -9.375870704650879
    4. ' i' → logprob: -10.125870704650879
    5. ')' → logprob: -10.250870704650879
    6. '[j' → logprob: -10.500870704650879
    7. '[
' → logprob: -10.625870704650879
    8. ' [' → logprob: -11.625870704650879
    9. ')i' → logprob: -12.375870704650879
    10. '[a' → logprob: -12.500870704650879

Token 480: ']' (ID: 60)
  Prédit: ']'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ']' → logprob: -0.022319331765174866
    2. '])' → logprob: -3.8973193168640137
    3. '[' → logprob: -7.522319316864014
    4. ' ]' → logprob: -8.022319793701172
    5. ']<<' → logprob: -8.772319793701172
    6. ']&' → logprob: -8.897319793701172
    7. '][' → logprob: -9.147319793701172
    8. ']^' → logprob: -9.272319793701172
    9. '[i' → logprob: -9.522319793701172
    10. ']
' → logprob: -10.147319793701172

Token 481: ' &' (ID: 827)
  Prédit: ' &'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' &' → logprob: -0.8888375759124756
    2. '&' → logprob: -1.3888375759124756
    3. ')' → logprob: -1.8888375759124756
    4. '>>' → logprob: -2.2638375759124756
    5. ']' → logprob: -3.6388375759124756
    6. ' >>' → logprob: -4.138837814331055
    7. '[' → logprob: -4.263837814331055
    8. ' ' → logprob: -4.638837814331055
    9. '])' → logprob: -5.263837814331055
    10. '<<' → logprob: -6.263837814331055

Token 482: ' ' (ID: 220)
  Prédit: ' ('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' (' → logprob: -1.2380739450454712
    2. 'i' → logprob: -2.3630738258361816
    3. '(i' → logprob: -2.3630738258361816
    4. ' i' → logprob: -2.6130738258361816
    5. '1' → logprob: -2.7380738258361816
    6. '(n' → logprob: -2.9880738258361816
    7. '(' → logprob: -3.2380738258361816
    8. '(-' → logprob: -3.3630738258361816
    9. ' -' → logprob: -3.3630738258361816
    10. '-i' → logprob: -3.3630738258361816

Token 483: '1' (ID: 16)
  Prédit: 'i'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'i' → logprob: -0.8233277201652527
    2. '(i' → logprob: -2.0733277797698975
    3. '(n' → logprob: -2.4483277797698975
    4. ' (' → logprob: -2.8233277797698975
    5. '((' → logprob: -3.1983277797698975
    6. '(-' → logprob: -3.3233277797698975
    7. '(' → logprob: -3.4483277797698975
    8. '1' → logprob: -3.4483277797698975
    9. ' i' → logprob: -3.4483277797698975
    10. '-n' → logprob: -3.4483277797698975

Token 484: ')

' (ID: 1029)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ')' → logprob: -0.0018814003560692072
    2. ')
' → logprob: -6.3768815994262695
    3. ' )' → logprob: -9.00188159942627
    4. ')<<' → logprob: -11.25188159942627
    5. '       ' → logprob: -11.87688159942627
    6. '<|end|>' → logprob: -12.00188159942627
    7. ')>>' → logprob: -12.12688159942627
    8. '))' → logprob: -12.50188159942627
    9. '           ' → logprob: -13.00188159942627
    10. '   ' → logprob: -13.25188159942627

Token 485: '   ' (ID: 271)
  Prédit: ''
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False

Token 486: ' print' (ID: 2123)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.7229155898094177
    2. '<|end|>' → logprob: -1.9729156494140625
    3. '
' → logprob: -2.2229156494140625
    4. ' ' → logprob: -2.3479156494140625
    5. '\n' → logprob: -2.3479156494140625
    6. ')' → logprob: -3.9729156494140625
    7. ' 
' → logprob: -4.0979156494140625
    8. '\' → logprob: -4.2229156494140625
    9. '    
' → logprob: -5.2229156494140625
    10. '  ' → logprob: -5.3479156494140625

Token 487: '(res' (ID: 8331)
  Prédit: '(res'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(res' → logprob: -0.006596597842872143
    2. '(answer' → logprob: -5.506596565246582
    3. '(' → logprob: -6.006596565246582
    4. '(ans' → logprob: -10.756596565246582
    5. '()' → logprob: -11.631596565246582
    6. 'res' → logprob: -11.881596565246582
    7. '(result' → logprob: -12.006596565246582
    8. ' (' → logprob: -12.381596565246582
    9. '('' → logprob: -13.381596565246582
    10. '((' → logprob: -13.631596565246582

Token 488: ' *' (ID: 425)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ')' → logprob: -3.03521392197581e-05
    2. ' )' → logprob: -11.250030517578125
    3. '()' → logprob: -11.500030517578125
    4. ')
' → logprob: -13.000030517578125
    5. '())' → logprob: -13.375030517578125
    6. '+' → logprob: -13.750030517578125
    7. '))' → logprob: -14.000030517578125
    8. '**' → logprob: -14.750030517578125
    9. ')`' → logprob: -15.125030517578125
    10. '*' → logprob: -15.375030517578125

Token 489: ' answer' (ID: 6052)
  Prédit: 'answer'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'answer' → logprob: -0.26572924852371216
    2. ' answer' → logprob: -1.5157291889190674
    3. '2' → logprob: -4.6407294273376465
    4. ' ' → logprob: -6.0157294273376465
    5. '(answer' → logprob: -6.7657294273376465
    6. '	answer' → logprob: -8.765728950500488
    7. ' (' → logprob: -9.265728950500488
    8. 'a' → logprob: -10.140728950500488
    9. 'ans' → logprob: -10.640728950500488
    10. '1' → logprob: -10.640728950500488

Token 490: ')
' (ID: 446)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')' → logprob: -0.0009030037908814847
    2. '()' → logprob: -7.875903129577637
    3. '())' → logprob: -8.000903129577637
    4. ' )' → logprob: -9.125903129577637
    5. ')
' → logprob: -10.000903129577637
    6. '*' → logprob: -11.750903129577637
    7. '```' → logprob: -11.750903129577637
    8. '**' → logprob: -12.625903129577637
    9. '+' → logprob: -12.750903129577637
    10. '
' → logprob: -13.250903129577637

Token 491: '   ' (ID: 271)
  Prédit: ''
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False

Token 492: ' return' (ID: 622)
  Prédit: ''
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False

Token 493: '

' (ID: 279)
  Prédit: ''
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False

Token 494: 'if' (ID: 366)
  Prédit: ''
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False

Token 495: ' __' (ID: 2516)
  Prédit: ' __'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' __' → logprob: -0.006740357726812363
    2. '__' → logprob: -5.006740570068359
    3. '_' → logprob: -11.00674057006836
    4. ' ' → logprob: -12.75674057006836
    5. '_name' → logprob: -13.25674057006836
    6. ' ' → logprob: -13.75674057006836
    7. ' _' → logprob: -14.00674057006836
    8. 'name' → logprob: -14.25674057006836
    9. '___' → logprob: -14.63174057006836
    10. '  ' → logprob: -15.00674057006836

Token 496: 'name' (ID: 897)
  Prédit: '__'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '__' → logprob: -0.2589700222015381
    2. ' __' → logprob: -1.633970022201538
    3. ' ==' → logprob: -3.508970022201538
    4. '_' → logprob: -6.008970260620117
    5. '==' → logprob: -8.008970260620117
    6. '___' → logprob: -9.758970260620117
    7. 'name' → logprob: -10.008970260620117
    8. ' _' → logprob: -10.508970260620117
    9. ' ' → logprob: -10.758970260620117
    10. '____' → logprob: -10.758970260620117

Token 497: '__' (ID: 771)
  Prédit: '__'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '__' → logprob: -8.256334695033729e-05
    2. '==' → logprob: -9.750082969665527
    3. ' ==' → logprob: -11.750082969665527
    4. '__.__' → logprob: -11.875082969665527
    5. '_' → logprob: -12.000082969665527
    6. '__
' → logprob: -14.000082969665527
    7. '=="' → logprob: -14.375082969665527
    8. ' __' → logprob: -14.625082969665527
    9. '___' → logprob: -14.875082969665527
    10. '____' → logprob: -15.250082969665527

Token 498: ' ==' (ID: 951)
  Prédit: ' =='
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' ==' → logprob: -0.2646617591381073
    2. '__' → logprob: -1.5146617889404297
    3. '==' → logprob: -4.38966178894043
    4. '_' → logprob: -9.26466178894043
    5. '=="' → logprob: -9.26466178894043
    6. ' __' → logprob: -11.26466178894043
    7. '=='' → logprob: -11.51466178894043
    8. ' =="' → logprob: -12.01466178894043
    9. '=' → logprob: -12.51466178894043
    10. ' ' → logprob: -12.51466178894043

Token 499: ' "__' (ID: 27367)
  Prédit: '"'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '"' → logprob: -0.1602841466665268
    2. ''' → logprob: -1.910284161567688
    3. ' "__' → logprob: -10.160284042358398
    4. '__' → logprob: -10.910284042358398
    5. ' '__' → logprob: -12.910284042358398
    6. '"user' → logprob: -16.2852840423584
    7. ''"' → logprob: -16.5352840423584
    8. '"'' → logprob: -16.6602840423584
    9. '"name' → logprob: -16.7852840423584
    10. '   ' → logprob: -17.0352840423584

Token 500: 'main' (ID: 7731)
  Prédit: 'main'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'main' → logprob: -6.64708495605737e-05
    2. 'name' → logprob: -9.875066757202148
    3. ''' → logprob: -11.500066757202148
    4. '"' → logprob: -12.500066757202148
    5. '__' → logprob: -14.375066757202148
    6. ' main' → logprob: -14.750066757202148
    7. '_main' → logprob: -16.00006675720215
    8. ''name' → logprob: -16.25006675720215
    9. ''m' → logprob: -18.12506675720215
    10. '	main' → logprob: -18.50006675720215

Token 501: '__":
' (ID: 49892)
  Prédit: '__":
'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '__":
' → logprob: -0.12750102579593658
    2. '__' → logprob: -2.1275010108947754
    3. '__':
' → logprob: -7.502501010894775
    4. '__:' → logprob: -11.002501487731934
    5. '():
' → logprob: -12.627501487731934
    6. '__()
' → logprob: -14.877501487731934
    7. '__
' → logprob: -15.002501487731934
    8. '__["' → logprob: -15.252501487731934
    9. '__("' → logprob: -16.752500534057617
    10. '()' → logprob: -16.752500534057617

Token 502: '   ' (ID: 271)
  Prédit: 'solve'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'solve' → logprob: -0.39451858401298523
    2. '   ' → logprob: -1.1445186138153076
    3. ' solve' → logprob: -4.8945183753967285
    4. '.solve' → logprob: -9.644518852233887
    5. '  ' → logprob: -10.644518852233887
    6. '	s' → logprob: -10.769518852233887
    7. ' ' → logprob: -11.269518852233887
    8. '    
' → logprob: -13.144518852233887
    9. '   ' → logprob: -13.644518852233887
    10. '<|end|>' → logprob: -13.644518852233887

Token 503: ' solve' (ID: 17722)
  Prédit: 'solve'
  Correct (stricte): False
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'solve' (adapté à ' solve') → logprob: -7.896309739408025e-07
    2. ' solve' → logprob: -14.250000953674316
    3. '   ' → logprob: -16.125
    4. 'resolve' → logprob: -18.25
    5. '.solve' → logprob: -20.375
    6. 'save' → logprob: -20.625
    7. '    
' → logprob: -20.75
    8. '  ' → logprob: -22.375
    9. '```' → logprob: -23.875
    10. 'try' → logprob: -24.25

Token 504: '()' (ID: 416)
  Prédit: ''
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False

Token 505: ' ' (ID: 220)
  Prédit: ''
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False

Token 506: ' #' (ID: 1069)
  Prédit: ''
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False

Token 507: ' Let's' (ID: 41021)
  Prédit: ''
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False

Token 508: ' go' (ID: 810)
  Prédit: ''
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False

Token 509: '!' (ID: 0)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ')' → logprob: -0.6485365033149719
    2. '<|end|>' → logprob: -0.7735365033149719
    3. '#' → logprob: -4.648536682128906
    4. '
' → logprob: -6.273536682128906
    5. '<|end|>' → logprob: -6.273536682128906
    6. '```' → logprob: -6.648536682128906
    7. '[' → logprob: -7.648536682128906
    8. ' ' → logprob: -9.148536682128906
    9. ']' → logprob: -9.648536682128906
    10. '}' → logprob: -9.648536682128906


RÉSUMÉ:
--------------------------------------------------------------------------------
Total des tokens analysés: 507
Tokens correctement prédits (1ère position, stricte): 170
Tokens correctement prédits (1ère position, avec adaptation): 175
Tokens correctement prédits (top 10): 353
Précision stricte (1ère position): 33.53%
Précision adaptée (1ère position): 34.52%
Précision (top 10): 69.63%
================================================================================
