================================================================================
ANALYSE DE PRÉDICTION TOKEN PAR TOKEN (BATCH API)
Date: 2025-06-04 20:02:40
Modèle de tokenisation: gpt-4o-mini
================================================================================

SCRIPT ANALYSÉ:
--------------------------------------------------------------------------------
def get_input():
    return input()

def split_input(user_input):
    return user_input.split()

def map_to_int(str_values):
    return map(int, str_values)

def unpack_values(mapped_values):
    values = list(mapped_values)
    return values[0], values[1], values[2]

def is_middle(a, b, c):
    return (a < c < b) or (a > c > b)

def get_yes_no(condition):
    if condition:
        return "Yes"
    else:
        return "No"

def print_result(result):
    print(result)

def main():
    user_input = get_input()
    str_values = split_input(user_input)
    mapped_values = map_to_int(str_values)
    A, B, C = unpack_values(mapped_values)
    condition = is_middle(A, B, C)
    result = get_yes_no(condition)
    print_result(result)

main()
--------------------------------------------------------------------------------

RÉSULTATS D'ANALYSE TOKEN PAR TOKEN:
--------------------------------------------------------------------------------
Token 0: 'def' (ID: 1314)
  → Token d'amorce (pas de prédiction)

Token 1: ' get' (ID: 717)
  → Token d'amorce (pas de prédiction)

Token 2: '_input' (ID: 12507)
  → Token d'amorce (pas de prédiction)

Token 3: '():
' (ID: 8595)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '(' → logprob: -0.002811059355735779
    2. '_' → logprob: -6.002810955047607
    3. '():' → logprob: -8.752811431884766
    4. '()' → logprob: -10.127811431884766
    5. '(:' → logprob: -10.377811431884766
    6. ' (' → logprob: -10.752811431884766
    7. '```' → logprob: -11.002811431884766
    8. '(_:' → logprob: -11.502811431884766
    9. '(_' → logprob: -12.002811431884766
    10. '("("' → logprob: -12.002811431884766

Token 4: '   ' (ID: 271)
  Prédit: '```'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '```' → logprob: -0.09458769857883453
    2. '\' → logprob: -3.844587802886963
    3. '   ' → logprob: -4.094587802886963
    4. '(' → logprob: -4.469587802886963
    5. '\n' → logprob: -4.594587802886963
    6. '    
' → logprob: -4.969587802886963
    7. '``' → logprob: -5.844587802886963
    8. ':' → logprob: -5.969587802886963
    9. '`' → logprob: -6.094587802886963
    10. '()' → logprob: -6.219587802886963

Token 5: ' return' (ID: 622)
  Prédit: 'return'
  Correct (stricte): False
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'return' (adapté à ' return') → logprob: -0.31658631563186646
    2. 'input' → logprob: -1.9415862560272217
    3. 'user' → logprob: -2.4415862560272217
    4. 'x' → logprob: -4.441586494445801
    5. '   ' → logprob: -4.941586494445801
    6. ' ' → logprob: -5.191586494445801
    7. 'i' → logprob: -5.191586494445801
    8. ' return' → logprob: -6.316586494445801
    9. '```' → logprob: -6.566586494445801
    10. 'text' → logprob: -6.691586494445801

Token 6: ' input' (ID: 3422)
  Prédit: ' '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' ' → logprob: -0.5513375401496887
    2. ' input' → logprob: -1.051337480545044
    3. 'input' → logprob: -2.926337480545044
    4. '"' → logprob: -4.301337718963623
    5. ''' → logprob: -5.801337718963623
    6. ' "' → logprob: -6.426337718963623
    7. '  ' → logprob: -6.926337718963623
    8. ' '' → logprob: -7.676337718963623
    9. ' None' → logprob: -8.301337242126465
    10. '(input' → logprob: -8.551337242126465

Token 7: '()

' (ID: 5874)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '(' → logprob: -0.001750030554831028
    2. '()' → logprob: -6.5017499923706055
    3. '('' → logprob: -9.126749992370605
    4. ' (' → logprob: -10.376749992370605
    5. '(
' → logprob: -10.626749992370605
    6. '("("' → logprob: -10.626749992370605
    7. ''' → logprob: -11.376749992370605
    8. '.' → logprob: -11.626749992370605
    9. '```' → logprob: -12.001749992370605
    10. '"' → logprob: -12.251749992370605

Token 8: 'def' (ID: 1314)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(' → logprob: -1.0850069522857666
    2. 'def' → logprob: -1.4600069522857666
    3. '```' → logprob: -2.4600069522857666
    4. ':' → logprob: -2.5850069522857666
    5. '\n' → logprob: -2.8350069522857666
    6. '.' → logprob: -3.3350069522857666
    7. '(
' → logprob: -3.4600069522857666
    8. '\' → logprob: -3.4600069522857666
    9. ')' → logprob: -3.8350069522857666
    10. '()' → logprob: -3.8350069522857666

Token 9: ' split' (ID: 12648)
  Prédit: ' get'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' get' → logprob: -0.7357314825057983
    2. ' calculate' → logprob: -1.1107314825057983
    3. ' process' → logprob: -2.985731601715088
    4. ' user' → logprob: -3.235731601715088
    5. ' main' → logprob: -4.110731601715088
    6. ' print' → logprob: -4.110731601715088
    7. ' add' → logprob: -4.360731601715088
    8. ' space' → logprob: -4.985731601715088
    9. '_' → logprob: -4.985731601715088
    10. ' check' → logprob: -5.235731601715088

Token 10: '_input' (ID: 12507)
  Prédit: '_'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_' → logprob: -0.26699623465538025
    2. '(' → logprob: -1.5169962644577026
    3. '_text' → logprob: -5.141996383666992
    4. '_line' → logprob: -6.391996383666992
    5. '_string' → logprob: -6.391996383666992
    6. '_words' → logprob: -6.516996383666992
    7. '('_' → logprob: -7.141996383666992
    8. '_word' → logprob: -7.391996383666992
    9. '_s' → logprob: -8.016996383666992
    10. '_input' → logprob: -8.266996383666992

Token 11: '(user' (ID: 7195)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '(' → logprob: -0.003857912728562951
    2. '_' → logprob: -6.2538580894470215
    3. '('_' → logprob: -7.3788580894470215
    4. '("("' → logprob: -7.5038580894470215
    5. '('' → logprob: -8.128857612609863
    6. '("_' → logprob: -9.878857612609863
    7. '(_)' → logprob: -10.128857612609863
    8. '```' → logprob: -10.253857612609863
    9. '_text' → logprob: -10.378857612609863
    10. '()' → logprob: -10.503857612609863

Token 12: '_input' (ID: 12507)
  Prédit: '):'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '):' → logprob: -0.6853345036506653
    2. ')' → logprob: -1.0603344440460205
    3. '_' → logprob: -2.6853344440460205
    4. '_input' → logprob: -2.9353344440460205
    5. ')_' → logprob: -3.8103344440460205
    6. '_text' → logprob: -6.5603346824646
    7. '_string' → logprob: -6.8103346824646
    8. '):
' → logprob: -7.0603346824646
    9. ' )' → logprob: -7.5603346824646
    10. ' ):' → logprob: -7.9353346824646

Token 13: '):
' (ID: 1883)
  Prédit: '):'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '):' → logprob: -0.01274636760354042
    2. ',' → logprob: -4.637746334075928
    3. ')' → logprob: -6.012746334075928
    4. ' ):' → logprob: -8.887746810913086
    5. ':' → logprob: -9.012746810913086
    6. '):
' → logprob: -9.012746810913086
    7. '(' → logprob: -10.262746810913086
    8. 's' → logprob: -10.887746810913086
    9. ')):' → logprob: -11.012746810913086
    10. '(user' → logprob: -11.137746810913086

Token 14: '   ' (ID: 271)
  Prédit: ' user'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' user' → logprob: -0.3151969611644745
    2. 'user' → logprob: -1.8151969909667969
    3. '   ' → logprob: -2.315196990966797
    4. ' return' → logprob: -5.065196990966797
    5. '(user' → logprob: -6.315196990966797
    6. 'return' → logprob: -7.565196990966797
    7. '	user' → logprob: -10.440196990966797
    8. '_user' → logprob: -10.440196990966797
    9. '_' → logprob: -11.065196990966797
    10. '(' → logprob: -11.315196990966797

Token 15: ' return' (ID: 622)
  Prédit: ' user'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' user' → logprob: -0.030334316194057465
    2. 'user' → logprob: -3.530334234237671
    3. ' return' → logprob: -7.78033447265625
    4. '   ' → logprob: -9.03033447265625
    5. 'return' (adapté à ' return') → logprob: -10.40533447265625
    6. '(user' → logprob: -12.65533447265625
    7. '[user' → logprob: -13.03033447265625
    8. ' ' → logprob: -13.15533447265625
    9. '	user' → logprob: -13.78033447265625
    10. ' split' → logprob: -13.78033447265625

Token 16: ' user' (ID: 1825)
  Prédit: ' user'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' user' → logprob: -0.20141655206680298
    2. 'user' → logprob: -1.7014164924621582
    3. '(user' → logprob: -13.701416969299316
    4. '[user' → logprob: -14.201416969299316
    5. '	user' → logprob: -14.826416969299316
    6. '.user' → logprob: -15.201416969299316
    7. '"user' → logprob: -15.201416969299316
    8. ''user' → logprob: -15.576416969299316
    9. ' ' → logprob: -15.701416969299316
    10. '=user' → logprob: -15.951416969299316

Token 17: '_input' (ID: 12507)
  Prédit: '_input'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_input' → logprob: -0.13132725656032562
    2. '_' → logprob: -2.6313271522521973
    3. '_put' → logprob: -3.6313271522521973
    4. '._' → logprob: -4.506327152252197
    5. '_p' → logprob: -5.256327152252197
    6. 'put' → logprob: -5.381327152252197
    7. '.' → logprob: -7.006327152252197
    8. '_user' → logprob: -7.131327152252197
    9. '```' → logprob: -7.756327152252197
    10. ' _' → logprob: -8.506327629089355

Token 18: '.split' (ID: 10347)
  Prédit: '.'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '.' → logprob: -0.3136345446109772
    2. '.split' → logprob: -1.3136345148086548
    3. '.strip' → logprob: -8.063634872436523
    4. ' .' → logprob: -10.063634872436523
    5. '.s' → logprob: -12.188634872436523
    6. 'split' → logprob: -12.438634872436523
    7. '().' → logprob: -12.688634872436523
    8. '.replace' → logprob: -14.438634872436523
    9. '.lower' → logprob: -14.563634872436523
    10. '.Split' → logprob: -14.938634872436523

Token 19: '()

' (ID: 5874)
  Prédit: '(''
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '('' → logprob: -0.2968747317790985
    2. '(' → logprob: -1.421874761581421
    3. '("("' → logprob: -4.171874523162842
    4. '()' → logprob: -9.546875
    5. ''' → logprob: -9.921875
    6. '(`' → logprob: -10.921875
    7. '('.')' → logprob: -11.546875
    8. '(('' → logprob: -12.421875
    9. '(\'' → logprob: -12.546875
    10. '((' → logprob: -12.921875

Token 20: 'def' (ID: 1314)
  Prédit: 'def'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'def' → logprob: -0.06226332113146782
    2. 'd' → logprob: -2.812263250350952
    3. 'de' → logprob: -8.812263488769531
    4. '```' → logprob: -9.812263488769531
    5. '\' → logprob: -10.187263488769531
    6. '#' → logprob: -10.187263488769531
    7. '<|end|>' → logprob: -12.562263488769531
    8. '

' → logprob: -13.562263488769531
    9. '
' → logprob: -13.812263488769531
    10. '(' → logprob: -13.937263488769531

Token 21: ' map' (ID: 4014)
  Prédit: ' main'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' main' → logprob: -0.37025195360183716
    2. ' process' → logprob: -1.9952518939971924
    3. ' join' → logprob: -2.8702518939971924
    4. 'process' → logprob: -3.1202518939971924
    5. 'main' → logprob: -3.1202518939971924
    6. 'join' → logprob: -4.7452521324157715
    7. ' get' → logprob: -5.7452521324157715
    8. ' calculate' → logprob: -5.9952521324157715
    9. 'calculate' → logprob: -6.2452521324157715
    10. ' is' → logprob: -6.6202521324157715

Token 22: '_to' (ID: 5089)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '(' → logprob: -0.010818715207278728
    2. '(lambda' → logprob: -5.3858184814453125
    3. '_' → logprob: -5.6358184814453125
    4. '_input' → logprob: -6.5108184814453125
    5. '(int' → logprob: -8.135818481445312
    6. '_user' → logprob: -8.510818481445312
    7. '("("' → logprob: -9.635818481445312
    8. '()' → logprob: -10.135818481445312
    9. '_inputs' → logprob: -10.260818481445312
    10. '_lambda' → logprob: -10.260818481445312

Token 23: '_int' (ID: 12285)
  Prédit: '_int'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_int' → logprob: -0.1977776736021042
    2. 'int' → logprob: -2.44777774810791
    3. ' int' → logprob: -2.44777774810791
    4. '_list' → logprob: -5.57277774810791
    5. '(int' → logprob: -7.07277774810791
    6. '_' → logprob: -7.57277774810791
    7. '_str' → logprob: -8.32277774810791
    8. '_type' → logprob: -8.32277774810791
    9. ' str' → logprob: -9.32277774810791
    10. '_input' → logprob: -9.44777774810791

Token 24: '(str' (ID: 7946)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '(' → logprob: -0.0018117944709956646
    2. ' (' → logprob: -7.626811981201172
    3. '(user' → logprob: -7.751811981201172
    4. 's' → logprob: -8.251811981201172
    5. '_' → logprob: -8.501811981201172
    6. '()' → logprob: -9.251811981201172
    7. '("("' → logprob: -9.251811981201172
    8. '(s' → logprob: -10.251811981201172
    9. '   ' → logprob: -10.251811981201172
    10. '(token' → logprob: -11.126811981201172

Token 25: '_values' (ID: 20393)
  Prédit: 's'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 's' → logprob: -0.23209011554718018
    2. 'ings' → logprob: -1.6070901155471802
    3. 'ing' → logprob: -5.357089996337891
    4. '_list' → logprob: -7.357089996337891
    5. ')' → logprob: -7.482089996337891
    6. ')s' → logprob: -8.23208999633789
    7. '_s' → logprob: -9.23208999633789
    8. '_' → logprob: -9.73208999633789
    9. '_values' → logprob: -9.85708999633789
    10. '_elements' → logprob: -10.23208999633789

Token 26: '):
' (ID: 1883)
  Prédit: '):'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '):' → logprob: -0.00270073558203876
    2. ')' → logprob: -6.1277008056640625
    3. ' ):' → logprob: -8.377700805664062
    4. '):
' → logprob: -8.877700805664062
    5. ',' → logprob: -9.002700805664062
    6. ' )' → logprob: -12.502700805664062
    7. '=' → logprob: -12.627700805664062
    8. '   ' → logprob: -12.752700805664062
    9. '):

' → logprob: -12.877700805664062
    10. '(' → logprob: -13.502700805664062

Token 27: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.020376387983560562
    2. ' return' → logprob: -4.270376205444336
    3. 'return' → logprob: -5.645376205444336
    4. '[' → logprob: -6.395376205444336
    5. '[int' → logprob: -7.270376205444336
    6. ' list' → logprob: -10.020376205444336
    7. '    ' → logprob: -10.270376205444336
    8. ' map' → logprob: -10.270376205444336
    9. '	return' → logprob: -10.520376205444336
    10. ' [' → logprob: -10.645376205444336

Token 28: ' return' (ID: 622)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.7887661457061768
    2. ' return' → logprob: -0.9137661457061768
    3. 'return' (adapté à ' return') → logprob: -2.0387661457061768
    4. ' list' → logprob: -4.538765907287598
    5. ' map' → logprob: -6.788765907287598
    6. 'list' → logprob: -7.038765907287598
    7. '[' → logprob: -7.288765907287598
    8. '[int' → logprob: -7.788765907287598
    9. ' [' → logprob: -7.913765907287598
    10. 'map' → logprob: -9.413765907287598

Token 29: ' map' (ID: 4014)
  Prédit: ' list'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' list' → logprob: -0.0013330980436876416
    2. ' [' → logprob: -7.501333236694336
    3. 'list' → logprob: -7.876333236694336
    4. ' map' → logprob: -7.876333236694336
    5. '[list' → logprob: -11.376333236694336
    6. '[' → logprob: -12.251333236694336
    7. '   ' → logprob: -13.001333236694336
    8. 'map' → logprob: -14.376333236694336
    9. ' ' → logprob: -14.376333236694336
    10. '[int' → logprob: -15.126333236694336

Token 30: '(int' (ID: 2742)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(' → logprob: -0.33818289637565613
    2. '(int' → logprob: -1.3381829261779785
    3. '(lambda' → logprob: -3.7131829261779785
    4. '(str' → logprob: -8.71318244934082
    5. '(
' → logprob: -10.71318244934082
    6. '(list' → logprob: -11.96318244934082
    7. '<int' → logprob: -12.33818244934082
    8. 'int' → logprob: -12.71318244934082
    9. ' (' → logprob: -12.71318244934082
    10. '(

' → logprob: -12.83818244934082

Token 31: ',' (ID: 11)
  Prédit: ','
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ',' → logprob: -0.0025011058896780014
    2. ')' → logprob: -6.752501010894775
    3. ',str' → logprob: -7.002501010894775
    4. '(' → logprob: -8.377501487731934
    5. '(str' → logprob: -8.877501487731934
    6. ' ,' → logprob: -10.127501487731934
    7. '   ' → logprob: -13.002501487731934
    8. 's' → logprob: -13.002501487731934
    9. ',)' → logprob: -13.627501487731934
    10. ' (' → logprob: -14.127501487731934

Token 32: ' str' (ID: 989)
  Prédit: 'str'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'str' → logprob: -0.048589982092380524
    2. ' str' → logprob: -3.0485899448394775
    3. ')' → logprob: -13.423589706420898
    4. '	str' → logprob: -14.423589706420898
    5. '(str' → logprob: -15.298589706420898
    6. '   ' → logprob: -15.923589706420898
    7. 's' → logprob: -16.6735897064209
    8. '_str' → logprob: -16.6735897064209
    9. 'stri' → logprob: -17.1735897064209
    10. ' ' → logprob: -17.5485897064209

Token 33: '_values' (ID: 20393)
  Prédit: '_values'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_values' → logprob: -1.2664456789934775e-06
    2. ')_' → logprob: -14.250000953674316
    3. '_' → logprob: -15.375000953674316
    4. 'values' → logprob: -15.750000953674316
    5. '_value' → logprob: -16.625001907348633
    6. '_VALUES' → logprob: -17.375001907348633
    7. '_val' → logprob: -17.750001907348633
    8. '_vals' → logprob: -18.000001907348633
    9. ')' → logprob: -18.250001907348633
    10. ' _' → logprob: -18.375001907348633

Token 34: ')

' (ID: 1029)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')' → logprob: -1.0280383548888494e-06
    2. '))' → logprob: -15.000000953674316
    3. ')
' → logprob: -15.125000953674316
    4. ' )' → logprob: -15.250000953674316
    5. ')`' → logprob: -16.625001907348633
    6. ')

' → logprob: -17.250001907348633
    7. ')))' → logprob: -18.250001907348633
    8. '   ' → logprob: -18.250001907348633
    9. '`)' → logprob: -18.750001907348633
    10. ')return' → logprob: -18.750001907348633

Token 35: 'def' (ID: 1314)
  Prédit: 'def'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'def' → logprob: -0.00010485442908247933
    2. '```' → logprob: -9.875104904174805
    3. '\' → logprob: -10.750104904174805
    4. '
' → logprob: -11.000104904174805
    5. ' def' → logprob: -12.375104904174805
    6. '

' → logprob: -12.750104904174805
    7. '<|end|>' → logprob: -13.250104904174805
    8. '``' → logprob: -13.750104904174805
    9. '<|end|>' → logprob: -14.000104904174805
    10. '\n' → logprob: -14.000104904174805

Token 36: ' unpack' (ID: 61704)
  Prédit: ' main'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' main' → logprob: -0.18312221765518188
    2. 'main' → logprob: -2.183122158050537
    3. ' sum' → logprob: -3.683122158050537
    4. 'sum' → logprob: -4.183122158050537
    5. ' process' → logprob: -4.933122158050537
    6. 'process' → logprob: -5.683122158050537
    7. 'calculate' → logprob: -6.433122158050537
    8. ' calculate' → logprob: -7.183122158050537
    9. 'reduce' → logprob: -7.808122158050537
    10. 'filter' → logprob: -8.683122634887695

Token 37: '_values' (ID: 20393)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(' → logprob: -0.18411926925182343
    2. '_' → logprob: -2.18411922454834
    3. '()' → logprob: -4.18411922454834
    4. '_values' → logprob: -4.43411922454834
    5. '(user' → logprob: -4.80911922454834
    6. '_user' → logprob: -5.55911922454834
    7. '(_' → logprob: -6.18411922454834
    8. '('' → logprob: -6.43411922454834
    9. '(values' → logprob: -6.55911922454834
    10. '("("' → logprob: -6.80911922454834

Token 38: '(mapped' (ID: 122858)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '(' → logprob: -0.1096443235874176
    2. '():' → logprob: -2.3596444129943848
    3. '(user' → logprob: -5.109644412994385
    4. '(*' → logprob: -6.734644412994385
    5. '()' → logprob: -7.609644412994385
    6. '("("' → logprob: -7.609644412994385
    7. '(values' → logprob: -8.484643936157227
    8. '('' → logprob: -8.859643936157227
    9. '(()' → logprob: -9.234643936157227
    10. '()(' → logprob: -9.484643936157227

Token 39: '_values' (ID: 20393)
  Prédit: '(mapped'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(mapped' → logprob: -0.44996803998947144
    2. ')' → logprob: -1.0749680995941162
    3. '_values' → logprob: -4.699967861175537
    4. '(' → logprob: -5.199967861175537
    5. 'mapped' → logprob: -6.324967861175537
    6. '):' → logprob: -6.574967861175537
    7. '_' → logprob: -7.324967861175537
    8. ')_' → logprob: -7.824967861175537
    9. '(values' → logprob: -7.949967861175537
    10. ' mapped' → logprob: -7.949967861175537

Token 40: '):
' (ID: 1883)
  Prédit: '):'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '):' → logprob: -0.003620981238782406
    2. ')' → logprob: -6.1286211013793945
    3. ',' → logprob: -6.6286211013793945
    4. ' ):' → logprob: -9.628621101379395
    5. '):
' → logprob: -10.878621101379395
    6. '   ' → logprob: -11.753621101379395
    7. '*' → logprob: -11.878621101379395
    8. '(' → logprob: -12.628621101379395
    9. ',*' → logprob: -13.628621101379395
    10. ':' → logprob: -13.753621101379395

Token 41: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.09463866800069809
    2. 'return' → logprob: -2.7196385860443115
    3. 'a' → logprob: -3.8446385860443115
    4. ' return' → logprob: -6.594638824462891
    5. ' a' → logprob: -7.344638824462891
    6. 'values' → logprob: -7.594638824462891
    7. ' ' → logprob: -8.84463882446289
    8. 'x' → logprob: -8.96963882446289
    9. '  ' → logprob: -9.59463882446289
    10. 'value' → logprob: -10.71963882446289

Token 42: ' values' (ID: 4824)
  Prédit: 'return'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'return' → logprob: -0.048417698591947556
    2. '   ' → logprob: -3.548417806625366
    3. 'a' → logprob: -4.798417568206787
    4. 'values' (adapté à ' values') → logprob: -5.298417568206787
    5. ' return' → logprob: -5.423417568206787
    6. 'list' → logprob: -8.173418045043945
    7. 'x' → logprob: -8.673418045043945
    8. 'for' → logprob: -9.548418045043945
    9. 'value' → logprob: -9.673418045043945
    10. ' a' → logprob: -9.923418045043945

Token 43: ' =' (ID: 314)
  Prédit: ' ='
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' =' → logprob: -0.1027754619717598
    2. '=' → logprob: -2.3527755737304688
    3. ',' → logprob: -5.977775573730469
    4. '[:]' → logprob: -11.102775573730469
    5. '   ' → logprob: -12.227775573730469
    6. '[' → logprob: -12.852775573730469
    7. ' ,' → logprob: -13.102775573730469
    8. '.' → logprob: -13.227775573730469
    9. ' ' → logprob: -13.852775573730469
    10. '=[]' → logprob: -14.852775573730469

Token 44: ' list' (ID: 1562)
  Prédit: 'list'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'list' → logprob: -0.201535165309906
    2. ' list' → logprob: -1.7015352249145508
    3. ' tuple' → logprob: -9.95153522491455
    4. 'tuple' → logprob: -10.45153522491455
    5. '[]' → logprob: -10.57653522491455
    6. ' []' → logprob: -11.95153522491455
    7. '[list' → logprob: -12.20153522491455
    8. ' ' → logprob: -13.32653522491455
    9. '	list' → logprob: -13.45153522491455
    10. 'next' → logprob: -13.57653522491455

Token 45: '(mapped' (ID: 122858)
  Prédit: '(mapped'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(mapped' → logprob: -0.018154622986912727
    2. '(' → logprob: -4.018154621124268
    3. 'mapped' → logprob: -12.768155097961426
    4. '(map' → logprob: -13.893155097961426
    5. '(mapping' → logprob: -14.518155097961426
    6. ' mapped' → logprob: -15.268155097961426
    7. '(parsed' → logprob: -16.39315414428711
    8. '(
' → logprob: -16.64315414428711
    9. '(

' → logprob: -17.89315414428711
    10. '(decoded' → logprob: -18.01815414428711

Token 46: '_values' (ID: 20393)
  Prédit: '_values'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_values' → logprob: -1.6286106983898208e-05
    2. '_' → logprob: -11.625016212463379
    3. 'ed' → logprob: -12.000016212463379
    4. '_value' → logprob: -14.750016212463379
    5. '_VALUES' → logprob: -15.250016212463379
    6. '_m' → logprob: -15.500016212463379
    7. '(values' → logprob: -15.625016212463379
    8. ')_' → logprob: -16.000017166137695
    9. 'values' → logprob: -17.500017166137695
    10. '_v' → logprob: -17.625017166137695

Token 47: ')
' (ID: 446)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')' → logprob: -0.0003981376066803932
    2. ')
' → logprob: -8.000397682189941
    3. '()' → logprob: -10.750397682189941
    4. '())' → logprob: -10.875397682189941
    5. '   ' → logprob: -11.125397682189941
    6. ' )' → logprob: -12.625397682189941
    7. ' ' → logprob: -14.000397682189941
    8. ')

' → logprob: -14.000397682189941
    9. ')`' → logprob: -14.250397682189941
    10. '(' → logprob: -14.875397682189941

Token 48: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.005892176181077957
    2. '    
' → logprob: -5.880892276763916
    3. ' return' → logprob: -6.880892276763916
    4. '<|end|>' → logprob: -7.505892276763916
    5. 'return' → logprob: -7.755892276763916
    6. ' ' → logprob: -8.380891799926758
    7. '
' → logprob: -8.630891799926758
    8. ',' → logprob: -9.005891799926758
    9. '	return' → logprob: -9.005891799926758
    10. '[' → logprob: -9.005891799926758

Token 49: ' return' (ID: 622)
  Prédit: ' return'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' return' → logprob: -0.17270442843437195
    2. '   ' → logprob: -1.9227044582366943
    3. 'return' (adapté à ' return') → logprob: -4.422704219818115
    4. ' if' → logprob: -8.422704696655273
    5. ' values' → logprob: -10.047704696655273
    6. ' a' → logprob: -10.297704696655273
    7. ' ' → logprob: -10.422704696655273
    8. ' x' → logprob: -11.547704696655273
    9. '    ' → logprob: -11.797704696655273
    10. '	return' → logprob: -11.922704696655273

Token 50: ' values' (ID: 4824)
  Prédit: ' values'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' values' → logprob: -0.048670824617147446
    2. 'values' → logprob: -3.048670768737793
    3. ' tuple' → logprob: -9.673670768737793
    4. '(values' → logprob: -11.673670768737793
    5. '	values' → logprob: -12.298670768737793
    6. 'tuple' → logprob: -12.798670768737793
    7. ' ' → logprob: -12.923670768737793
    8. '*' → logprob: -14.173670768737793
    9. ' ' → logprob: -14.923670768737793
    10. '_values' → logprob: -15.298670768737793

Token 51: '[' (ID: 58)
  Prédit: 'def'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'def' → logprob: -0.0641712099313736
    2. '<|end|>' → logprob: -3.314171314239502
    3. '[' → logprob: -4.064171314239502
    4. '
' → logprob: -5.689171314239502
    5. '```' → logprob: -6.689171314239502
    6. '#' → logprob: -7.564171314239502
    7. '[
' → logprob: -7.564171314239502
    8. '

' → logprob: -7.689171314239502
    9. '<|end|>' → logprob: -7.814171314239502
    10. '\' → logprob: -8.064170837402344

Token 52: '0' (ID: 15)
  Prédit: '0'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '0' → logprob: -0.0028381571173667908
    2. ':' → logprob: -6.502838134765625
    3. ':]' → logprob: -6.877838134765625
    4. ' ' → logprob: -8.877838134765625
    5. ']' → logprob: -9.502838134765625
    6. '-' → logprob: -9.627838134765625
    7. ' :]' → logprob: -11.752838134765625
    8. ')' → logprob: -12.377838134765625
    9. ' :' → logprob: -12.502838134765625
    10. '::' → logprob: -12.877838134765625

Token 53: '],' (ID: 2155)
  Prédit: '],'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '],' → logprob: -0.20516808331012726
    2. ']' → logprob: -1.7051681280136108
    3. ',' → logprob: -6.8301682472229
    4. ' ],' → logprob: -6.8301682472229
    5. ':]' → logprob: -7.7051682472229
    6. ' ]' → logprob: -7.9551682472229
    7. ':],' → logprob: -7.9551682472229
    8. ':' → logprob: -8.455167770385742
    9. '],
' → logprob: -8.705167770385742
    10. ' :]' → logprob: -10.830167770385742

Token 54: ' values' (ID: 4824)
  Prédit: ' values'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' values' → logprob: -0.0019331586081534624
    2. 'values' → logprob: -6.2519330978393555
    3. ' ' → logprob: -12.876933097839355
    4. '	values' → logprob: -14.251933097839355
    5. '(values' → logprob: -14.501933097839355
    6. ' ' → logprob: -14.751933097839355
    7. '_values' → logprob: -16.251934051513672
    8. '.values' → logprob: -16.376934051513672
    9. ' *' → logprob: -16.876934051513672
    10. ' valores' → logprob: -16.876934051513672

Token 55: '[' (ID: 58)
  Prédit: '['
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '[' → logprob: -0.0005614925175905228
    2. '.' → logprob: -8.500561714172363
    3. '[]' → logprob: -9.000561714172363
    4. '1' → logprob: -9.500561714172363
    5. '<|end|>' → logprob: -10.125561714172363
    6. '[-' → logprob: -10.375561714172363
    7. '```' → logprob: -10.875561714172363
    8. '[:]' → logprob: -11.000561714172363
    9. '0' → logprob: -11.125561714172363
    10. ' [' → logprob: -12.125561714172363

Token 56: '1' (ID: 16)
  Prédit: '1'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '1' → logprob: -0.006050024647265673
    2. '0' → logprob: -5.756050109863281
    3. ']' → logprob: -5.881050109863281
    4. '-' → logprob: -10.506050109863281
    5. '])' → logprob: -10.756050109863281
    6. ':]' → logprob: -11.006050109863281
    7. ':' → logprob: -12.756050109863281
    8. ' ' → logprob: -12.756050109863281
    9. ')' → logprob: -13.131050109863281
    10. '2' → logprob: -13.381050109863281

Token 57: '],' (ID: 2155)
  Prédit: ']'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ']' → logprob: -0.024051493033766747
    2. ')' → logprob: -3.7740514278411865
    3. '}' → logprob: -7.649051666259766
    4. ')]' → logprob: -9.149051666259766
    5. '],' → logprob: -9.774051666259766
    6. '])' → logprob: -9.774051666259766
    7. ' ]' → logprob: -10.149051666259766
    8. '<|end|>' → logprob: -10.524051666259766
    9. ']}' → logprob: -11.524051666259766
    10. ',' → logprob: -12.024051666259766

Token 58: ' values' (ID: 4824)
  Prédit: ' values'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' values' → logprob: -0.0052354102954268456
    2. 'values' → logprob: -5.255235195159912
    3. '	values' → logprob: -13.88023567199707
    4. '(values' → logprob: -15.63023567199707
    5. '_values' → logprob: -15.75523567199707
    6. ' valores' → logprob: -16.25523567199707
    7. ' ' → logprob: -16.63023567199707
    8. '.values' → logprob: -16.88023567199707
    9. ',' → logprob: -17.13023567199707
    10. ' and' → logprob: -17.38023567199707

Token 59: '[' (ID: 58)
  Prédit: '['
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '[' → logprob: -0.2143963724374771
    2. 'def' → logprob: -1.839396357536316
    3. ',' → logprob: -4.4643964767456055
    4. '<|end|>' → logprob: -5.2143964767456055
    5. '#' → logprob: -5.5893964767456055
    6. ')' → logprob: -6.2143964767456055
    7. '[]' → logprob: -6.2143964767456055
    8. '```' → logprob: -6.9643964767456055
    9. 's' → logprob: -7.2143964767456055
    10. '0' → logprob: -7.2143964767456055

Token 60: '2' (ID: 17)
  Prédit: '2'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '2' → logprob: -9.968312951968983e-06
    2. '0' → logprob: -11.750009536743164
    3. '-' → logprob: -14.500009536743164
    4. '])' → logprob: -14.500009536743164
    5. '1' → logprob: -14.625009536743164
    6. ']' → logprob: -14.875009536743164
    7. ' ' → logprob: -16.000009536743164
    8. '```' → logprob: -17.000009536743164
    9. ':' → logprob: -17.125009536743164
    10. ')' → logprob: -18.125009536743164

Token 61: ']

' (ID: 3144)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ')' → logprob: -2.45848218582978e-06
    2. '}' → logprob: -13.37500286102295
    3. ')
' → logprob: -15.12500286102295
    4. ']' → logprob: -15.25000286102295
    5. ' )' → logprob: -16.250001907348633
    6. '),' → logprob: -16.750001907348633
    7. ')return' → logprob: -17.125001907348633
    8. '）' → logprob: -17.125001907348633
    9. '   ' → logprob: -17.500001907348633
    10. ')}' → logprob: -18.125001907348633

Token 62: 'def' (ID: 1314)
  Prédit: 'def'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'def' → logprob: -0.00017517358355689794
    2. 'a' → logprob: -9.375175476074219
    3. '#' → logprob: -10.375175476074219
    4. '```' → logprob: -10.875175476074219
    5. '\' → logprob: -11.500175476074219
    6. 'print' → logprob: -11.625175476074219
    7. 'n' → logprob: -12.375175476074219
    8. 'if' → logprob: -12.375175476074219
    9. 'x' → logprob: -13.000175476074219
    10. 'for' → logprob: -13.250175476074219

Token 63: ' is' (ID: 382)
  Prédit: ' calculate'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' calculate' → logprob: -0.2521311640739441
    2. ' main' → logprob: -1.6271312236785889
    3. ' compute' → logprob: -4.50213098526001
    4. 'calculate' → logprob: -5.00213098526001
    5. ' solve' → logprob: -5.37713098526001
    6. ' find' → logprob: -6.00213098526001
    7. ' sum' → logprob: -8.127131462097168
    8. 'main' → logprob: -8.502131462097168
    9. ' process' → logprob: -8.627131462097168
    10. 'solve' → logprob: -9.002131462097168

Token 64: '_middle' (ID: 155207)
  Prédit: '_valid'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '_valid' → logprob: -1.390434980392456
    2. '_triangle' → logprob: -1.515434980392456
    3. '_div' → logprob: -1.890434980392456
    4. '_' → logprob: -1.890434980392456
    5. '_prime' → logprob: -3.015434980392456
    6. '_trip' → logprob: -3.015434980392456
    7. '_between' → logprob: -3.640434980392456
    8. '_tri' → logprob: -3.890434980392456
    9. '_possible' → logprob: -3.890434980392456
    10. '_le' → logprob: -4.140435218811035

Token 65: '(a' (ID: 6271)
  Prédit: '_element'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '_element' → logprob: -0.5881368517875671
    2. '_between' → logprob: -1.588136911392212
    3. '_value' → logprob: -2.713136911392212
    4. '_sorted' → logprob: -2.838136911392212
    5. '_' → logprob: -3.338136911392212
    6. '_in' → logprob: -3.963136911392212
    7. '_point' → logprob: -5.088136672973633
    8. '_g' → logprob: -5.213136672973633
    9. '_sm' → logprob: -5.338136672973633
    10. '_valid' → logprob: -5.463136672973633

Token 66: ',' (ID: 11)
  Prédit: ' <'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' <' → logprob: -0.6343469619750977
    2. ' <=' → logprob: -1.5093469619750977
    3. ',' → logprob: -2.0093469619750977
    4. '<' → logprob: -2.7593469619750977
    5. '<=' → logprob: -3.7593469619750977
    6. ' ,' → logprob: -3.7593469619750977
    7. ',b' → logprob: -6.509346961975098
    8. ' >' → logprob: -6.884346961975098
    9. '_' → logprob: -7.384346961975098
    10. ' >=' → logprob: -7.634346961975098

Token 67: ' b' (ID: 287)
  Prédit: 'b'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'b' → logprob: -0.029817834496498108
    2. ' b' → logprob: -3.529817819595337
    3. 'm' → logprob: -9.904817581176758
    4. ' ' → logprob: -11.904817581176758
    5. ' m' → logprob: -12.404817581176758
    6. '	b' → logprob: -13.404817581176758
    7. 'middle' → logprob: -13.404817581176758
    8. '   ' → logprob: -13.904817581176758
    9. 'mid' → logprob: -14.404817581176758
    10. 'c' → logprob: -14.654817581176758

Token 68: ',' (ID: 11)
  Prédit: ','
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ',' → logprob: -0.003167145187035203
    2. ' ,' → logprob: -6.253167152404785
    3. ',c' → logprob: -6.753167152404785
    4. ')' → logprob: -10.878167152404785
    5. 'c' → logprob: -11.003167152404785
    6. ',b' → logprob: -11.878167152404785
    7. ',a' → logprob: -12.503167152404785
    8. '):' → logprob: -12.878167152404785
    9. '_,' → logprob: -13.128167152404785
    10. ' c' → logprob: -13.253167152404785

Token 69: ' c' (ID: 274)
  Prédit: ' c'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' c' → logprob: -0.47408154606819153
    2. 'c' → logprob: -0.9740815162658691
    3. ' ' → logprob: -12.849081993103027
    4. ')c' → logprob: -14.349081993103027
    5. ')' → logprob: -14.849081993103027
    6. '	c' → logprob: -15.099081993103027
    7. ',c' → logprob: -15.349081993103027
    8. '<|end|>' → logprob: -16.22408103942871
    9. '   ' → logprob: -16.72408103942871
    10. '  ' → logprob: -16.84908103942871

Token 70: '):
' (ID: 1883)
  Prédit: '):'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '):' → logprob: -0.0025100242346525192
    2. ')' → logprob: -6.002510070800781
    3. ' ):' → logprob: -11.752510070800781
    4. ':' → logprob: -11.877510070800781
    5. '):
' → logprob: -12.252510070800781
    6. ',' → logprob: -12.377510070800781
    7. '_' → logprob: -12.627510070800781
    8. '=' → logprob: -12.877510070800781
    9. 'a' → logprob: -13.627510070800781
    10. '_middle' → logprob: -14.002510070800781

Token 71: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.39395344257354736
    2. ' return' → logprob: -1.1439534425735474
    3. 'return' → logprob: -5.643953323364258
    4. ' (' → logprob: -6.018953323364258
    5. '    ' → logprob: -7.768953323364258
    6. ' a' → logprob: -8.518953323364258
    7. ' ' → logprob: -8.893953323364258
    8. '	return' → logprob: -9.268953323364258
    9. '(' → logprob: -9.768953323364258
    10. 'a' → logprob: -10.643953323364258

Token 72: ' return' (ID: 622)
  Prédit: '(a'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(a' → logprob: -0.32903552055358887
    2. ' (' → logprob: -1.9540355205535889
    3. 'a' → logprob: -2.704035520553589
    4. '(b' → logprob: -3.329035520553589
    5. 'return' (adapté à ' return') → logprob: -4.454035758972168
    6. ' a' → logprob: -4.579035758972168
    7. ' return' → logprob: -5.329035758972168
    8. 'b' → logprob: -5.454035758972168
    9. '   ' → logprob: -6.329035758972168
    10. ' b' → logprob: -6.579035758972168

Token 73: ' (' (ID: 350)
  Prédit: 'a'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'a' → logprob: -0.7111064195632935
    2. '(a' → logprob: -1.4611064195632935
    3. ' (' → logprob: -1.9611064195632935
    4. ' a' → logprob: -2.711106300354004
    5. 'b' → logprob: -3.211106300354004
    6. ' b' → logprob: -4.211106300354004
    7. '(b' → logprob: -4.336106300354004
    8. '(' → logprob: -7.961106300354004
    9. 'min' → logprob: -8.211106300354004
    10. '(min' → logprob: -8.586106300354004

Token 74: 'a' (ID: 64)
  Prédit: 'a'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'a' → logprob: -0.02291371300816536
    2. 'b' → logprob: -4.647913932800293
    3. '(a' → logprob: -4.772913932800293
    4. ' a' → logprob: -5.772913932800293
    5. ' (' → logprob: -7.022913932800293
    6. '(b' → logprob: -8.272913932800293
    7. '   ' → logprob: -8.772913932800293
    8. ' b' → logprob: -9.022913932800293
    9. 'min' → logprob: -10.522913932800293
    10. ' ' → logprob: -11.022913932800293

Token 75: ' <' (ID: 464)
  Prédit: ' <'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' <' → logprob: -0.602639377117157
    2. ' <=' → logprob: -1.4776394367218018
    3. '<' → logprob: -1.7276394367218018
    4. '<=' → logprob: -3.1026394367218018
    5. ' >' → logprob: -6.852639198303223
    6. ' >=' → logprob: -8.102639198303223
    7. '>' → logprob: -8.602639198303223
    8. '>=' → logprob: -8.852639198303223
    9. ' ==' → logprob: -10.102639198303223
    10. '==' → logprob: -10.227639198303223

Token 76: ' c' (ID: 274)
  Prédit: 'b'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'b' → logprob: -0.0705723762512207
    2. ' b' → logprob: -2.6955723762512207
    3. 'c' → logprob: -7.695572376251221
    4. ' c' → logprob: -8.820571899414062
    5. '=' → logprob: -10.820571899414062
    6. ' ' → logprob: -12.070571899414062
    7. '=b' → logprob: -12.695571899414062
    8. '	b' → logprob: -13.195571899414062
    9. '>b' → logprob: -13.945571899414062
    10. '>' → logprob: -14.695571899414062

Token 77: ' <' (ID: 464)
  Prédit: ' and'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' and' → logprob: -0.13367798924446106
    2. '<' → logprob: -2.7586779594421387
    3. 'and' → logprob: -3.1336779594421387
    4. ' <' → logprob: -4.133677959442139
    5. ')' → logprob: -6.383677959442139
    6. '<=' → logprob: -8.133678436279297
    7. ' <=' → logprob: -9.008678436279297
    8. '>' → logprob: -10.508678436279297
    9. ' ' → logprob: -11.133678436279297
    10. ' )' → logprob: -11.383678436279297

Token 78: ' b' (ID: 287)
  Prédit: 'b'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'b' → logprob: -0.01815052703022957
    2. ' b' → logprob: -4.018150329589844
    3. ' ' → logprob: -14.518150329589844
    4. ')b' → logprob: -16.393150329589844
    5. '>b' → logprob: -17.268150329589844
    6. ')' → logprob: -17.268150329589844
    7. '<|end|>' → logprob: -18.018150329589844
    8. '	b' → logprob: -18.143150329589844
    9. '   ' → logprob: -19.268150329589844
    10. '(b' → logprob: -20.393150329589844

Token 79: ')' (ID: 8)
  Prédit: ')'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')' → logprob: -0.02571408636868
    2. ' or' → logprob: -3.775714159011841
    3. ' )' → logprob: -6.150713920593262
    4. 'or' → logprob: -8.025713920593262
    5. ' ' → logprob: -12.650713920593262
    6. '   ' → logprob: -13.650713920593262
    7. ' and' → logprob: -14.275713920593262
    8. '    ' → logprob: -14.900713920593262
    9. ')
' → logprob: -15.650713920593262
    10. '	or' → logprob: -15.650713920593262

Token 80: ' or' (ID: 503)
  Prédit: ' or'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' or' → logprob: -0.030467307195067406
    2. 'or' → logprob: -3.5304672718048096
    3. '<|end|>' → logprob: -7.280467510223389
    4. ' ' → logprob: -11.28046703338623
    5. '	or' → logprob: -11.65546703338623
    6. ' and' → logprob: -13.28046703338623
    7. '<|end|>' → logprob: -13.53046703338623
    8. '
' → logprob: -14.15546703338623
    9. 'and' → logprob: -14.65546703338623
    10. ' o' → logprob: -14.90546703338623

Token 81: ' (' (ID: 350)
  Prédit: ' ('
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' (' → logprob: -0.00573964836075902
    2. '(' → logprob: -5.755739688873291
    3. '(b' → logprob: -6.130739688873291
    4. '(a' → logprob: -8.130739212036133
    5. '(c' → logprob: -9.380739212036133
    6. '   ' → logprob: -13.255739212036133
    7. '<|end|>' → logprob: -14.505739212036133
    8. ' ' → logprob: -14.630739212036133
    9. '(True' → logprob: -14.880739212036133
    10. '    ' → logprob: -14.880739212036133

Token 82: 'a' (ID: 64)
  Prédit: 'b'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'b' → logprob: -0.4840511083602905
    2. ' b' → logprob: -0.9840511083602905
    3. 'a' → logprob: -4.98405122756958
    4. ' a' → logprob: -6.23405122756958
    5. '(b' → logprob: -7.35905122756958
    6. ' (' → logprob: -7.98405122756958
    7. 'c' → logprob: -10.109050750732422
    8. ' c' → logprob: -10.109050750732422
    9. ' ' → logprob: -10.984050750732422
    10. '(' → logprob: -11.484050750732422

Token 83: ' >' (ID: 1424)
  Prédit: ' >'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' >' → logprob: -0.006739881355315447
    2. '>' → logprob: -5.006740093231201
    3. ' ' → logprob: -11.256739616394043
    4. ' <' → logprob: -11.506739616394043
    5. ')' → logprob: -14.506739616394043
    6. '>b' → logprob: -15.756739616394043
    7. 'b' → logprob: -16.00674057006836
    8. '<|end|>' → logprob: -16.13174057006836
    9. 'c' → logprob: -16.50674057006836
    10. ' b' → logprob: -16.50674057006836

Token 84: ' c' (ID: 274)
  Prédit: ' c'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' c' → logprob: -0.016270019114017487
    2. 'c' → logprob: -4.141270160675049
    3. ' b' → logprob: -8.89126968383789
    4. 'b' → logprob: -10.01626968383789
    5. '<|end|>' → logprob: -10.39126968383789
    6. ' ' → logprob: -10.76626968383789
    7. '	c' → logprob: -14.51626968383789
    8. '>' → logprob: -15.14126968383789
    9. ')c' → logprob: -15.14126968383789
    10. ' ' → logprob: -15.39126968383789

Token 85: ' >' (ID: 1424)
  Prédit: ' >'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' >' → logprob: -0.01110075879842043
    2. '>' → logprob: -4.511100769042969
    3. ' ' → logprob: -10.761100769042969
    4. ' and' → logprob: -11.261100769042969
    5. ')' → logprob: -12.011100769042969
    6. ' <' → logprob: -12.386100769042969
    7. '>b' → logprob: -12.636100769042969
    8. '<|end|>' → logprob: -13.261100769042969
    9. 'and' → logprob: -13.886100769042969
    10. ' b' → logprob: -14.261100769042969

Token 86: ' b' (ID: 287)
  Prédit: 'b'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'b' → logprob: -0.5759432911872864
    2. ' b' → logprob: -0.8259432911872864
    3. ' ' → logprob: -13.325942993164062
    4. ')b' → logprob: -13.950942993164062
    5. '<|end|>' → logprob: -14.200942993164062
    6. '	b' → logprob: -14.700942993164062
    7. ')' → logprob: -16.075942993164062
    8. ' б' → logprob: -16.325942993164062
    9. '>b' → logprob: -17.450942993164062
    10. '   ' → logprob: -17.825942993164062

Token 87: ')

' (ID: 1029)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')' → logprob: -7.896309739408025e-07
    2. ' )' → logprob: -14.875000953674316
    3. '))' → logprob: -15.875000953674316
    4. ')
' → logprob: -16.0
    5. ')return' → logprob: -17.375
    6. '<|end|>' → logprob: -18.125
    7. ')}' → logprob: -18.625
    8. ')#' → logprob: -19.0
    9. ')

' → logprob: -19.25
    10. '}' → logprob: -19.25

Token 88: 'def' (ID: 1314)
  Prédit: 'def'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'def' → logprob: -0.13965226709842682
    2. 'a' → logprob: -2.3896522521972656
    3. 'print' → logprob: -4.139652252197266
    4. 'for' → logprob: -4.639652252197266
    5. '#' → logprob: -5.014652252197266
    6. 'n' → logprob: -6.139652252197266
    7. 'if' → logprob: -6.264652252197266
    8. 'user' → logprob: -7.139652252197266
    9. '```' → logprob: -7.514652252197266
    10. '<|end|>' → logprob: -8.389652252197266

Token 89: ' get' (ID: 717)
  Prédit: ' main'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' main' → logprob: -0.07808106392621994
    2. ' middle' → logprob: -2.9530811309814453
    3. ' check' → logprob: -4.828081130981445
    4. ' is' → logprob: -5.328081130981445
    5. ' find' → logprob: -5.453081130981445
    6. 'main' → logprob: -5.578081130981445
    7. ' test' → logprob: -7.703081130981445
    8. ' get' → logprob: -8.078081130981445
    9. 'middle' → logprob: -8.328081130981445
    10. ' max' → logprob: -8.953081130981445

Token 90: '_yes' (ID: 151898)
  Prédit: '_middle'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '_middle' → logprob: -0.16531051695346832
    2. '_input' → logprob: -2.1653106212615967
    3. '_' → logprob: -4.040310382843018
    4. '_user' → logprob: -4.790310382843018
    5. '_m' → logprob: -5.415310382843018
    6. '_max' → logprob: -5.665310382843018
    7. '_values' → logprob: -7.915310382843018
    8. '_output' → logprob: -8.040310859680176
    9. '_average' → logprob: -8.290310859680176
    10. '_value' → logprob: -8.290310859680176

Token 91: '_no' (ID: 13575)
  Prédit: '_no'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_no' → logprob: -0.32066449522972107
    2. '_or' → logprob: -1.3206645250320435
    3. '_' → logprob: -5.945664405822754
    4. 'orno' → logprob: -6.570664405822754
    5. '_response' → logprob: -7.070664405822754
    6. '_answer' → logprob: -7.070664405822754
    7. '_input' → logprob: -7.320664405822754
    8. 'no' → logprob: -8.195664405822754
    9. '()' → logprob: -8.195664405822754
    10. '_value' → logprob: -8.820664405822754

Token 92: '(condition' (ID: 90332)
  Prédit: '_response'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '_response' → logprob: -0.40933117270469666
    2. '_input' → logprob: -1.284331202507019
    3. '_answer' → logprob: -3.6593310832977295
    4. '()' → logprob: -3.9093310832977295
    5. '(' → logprob: -5.409331321716309
    6. '_prompt' → logprob: -6.034331321716309
    7. '_' → logprob: -6.159331321716309
    8. '(prompt' → logprob: -7.034331321716309
    9. '_value' → logprob: -7.534331321716309
    10. '():' → logprob: -7.784331321716309

Token 93: '):
' (ID: 1883)
  Prédit: '):'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '):' → logprob: -0.0010407903464511037
    2. '):
' → logprob: -7.001040935516357
    3. ')' → logprob: -9.3760404586792
    4. ':' → logprob: -10.5010404586792
    5. ' ):' → logprob: -11.7510404586792
    6. '   ' → logprob: -12.1260404586792
    7. '():' → logprob: -13.5010404586792
    8. '=' → logprob: -14.5010404586792
    9. ' ' → logprob: -14.7510404586792
    10. '):
' → logprob: -15.2510404586792

Token 94: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.0022821726743131876
    2. ' return' → logprob: -6.25228214263916
    3. ' if' → logprob: -8.12728214263916
    4. 'return' → logprob: -10.62728214263916
    5. '	return' → logprob: -12.12728214263916
    6. '<|end|>' → logprob: -12.25228214263916
    7. 'if' → logprob: -12.50228214263916
    8. ' ' → logprob: -12.50228214263916
    9. '    
' → logprob: -12.50228214263916
    10. '  ' → logprob: -13.00228214263916

Token 95: ' if' (ID: 538)
  Prédit: ' return'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' return' → logprob: -0.6436175107955933
    2. '"' → logprob: -1.8936175107955933
    3. ' "' → logprob: -2.143617630004883
    4. '   ' → logprob: -2.518617630004883
    5. 'return' → logprob: -2.893617630004883
    6. ' '' → logprob: -3.268617630004883
    7. ''' → logprob: -3.768617630004883
    8. ' if' → logprob: -4.768617630004883
    9. 'if' (adapté à ' if') → logprob: -6.893617630004883
    10. ' ' → logprob: -9.268617630004883

Token 96: ' condition' (ID: 7060)
  Prédit: ' condition'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' condition' → logprob: -9.889424836728722e-05
    2. 'condition' → logprob: -9.250099182128906
    3. ' not' → logprob: -13.125099182128906
    4. '(condition' → logprob: -14.375099182128906
    5. ' ' → logprob: -16.500099182128906
    6. '_condition' → logprob: -17.625099182128906
    7. '.condition' → logprob: -17.625099182128906
    8. ' ' → logprob: -17.875099182128906
    9. ' condicion' → logprob: -18.125099182128906
    10. '    ' → logprob: -18.375099182128906

Token 97: ':
' (ID: 734)
  Prédit: ':'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ':' → logprob: -0.20180125534534454
    2. ':
' → logprob: -1.7018013000488281
    3. '   ' → logprob: -8.826801300048828
    4. '):
' → logprob: -9.576801300048828
    5. ' :' → logprob: -10.076801300048828
    6. '():
' → logprob: -10.201801300048828
    7. ':return' → logprob: -10.701801300048828
    8. '==' → logprob: -11.076801300048828
    9. ' :
' → logprob: -11.076801300048828
    10. ' ==' → logprob: -11.576801300048828

Token 98: '       ' (ID: 309)
  Prédit: '       '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '       ' → logprob: -0.0020835241302847862
    2. ' return' → logprob: -6.7520833015441895
    3. '   ' → logprob: -8.252083778381348
    4. 'return' → logprob: -8.377083778381348
    5. '<|end|>' → logprob: -8.877083778381348
    6. '
' → logprob: -9.127083778381348
    7. ':' → logprob: -9.627083778381348
    8. ':
' → logprob: -10.377083778381348
    9. '	return' → logprob: -10.877083778381348
    10. '<|end|>' → logprob: -11.377083778381348

Token 99: ' return' (ID: 622)
  Prédit: ' return'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' return' → logprob: -0.09062271565198898
    2. 'return' (adapté à ' return') → logprob: -2.590622663497925
    3. '       ' → logprob: -4.465622901916504
    4. '   ' → logprob: -8.965622901916504
    5. '	return' → logprob: -10.840622901916504
    6. ' print' → logprob: -11.215622901916504
    7. 'print' → logprob: -12.715622901916504
    8. ' ' → logprob: -13.465622901916504
    9. '           ' → logprob: -14.215622901916504
    10. '
' → logprob: -15.590622901916504

Token 100: ' "' (ID: 392)
  Prédit: '"'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '"' → logprob: -0.7664694786071777
    2. ' "' → logprob: -0.8914694786071777
    3. ''' → logprob: -2.3914694786071777
    4. ' '' → logprob: -3.3914694786071777
    5. '   ' → logprob: -9.766469955444336
    6. ' ' → logprob: -11.141469955444336
    7. '"I' → logprob: -11.891469955444336
    8. '"No' → logprob: -12.016469955444336
    9. 'Yes' → logprob: -12.141469955444336
    10. ' True' → logprob: -12.391469955444336

Token 101: 'Yes' (ID: 13022)
  Prédit: 'Yes'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'Yes' → logprob: -0.4590643048286438
    2. 'YES' → logprob: -1.084064245223999
    3. 'yes' → logprob: -3.584064245223999
    4. ' Yes' → logprob: -7.334064483642578
    5. ' yes' → logprob: -7.709064483642578
    6. 'Y' → logprob: -7.959064483642578
    7. 'Да' → logprob: -8.209064483642578
    8. ' YES' → logprob: -9.084064483642578
    9. '"' → logprob: -9.584064483642578
    10. 'да' → logprob: -9.709064483642578

Token 102: '"
' (ID: 1092)
  Prédit: '"'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '"' → logprob: -0.012532255612313747
    2. '"
' → logprob: -4.3875322341918945
    3. '\n' → logprob: -11.387532234191895
    4. '"
' → logprob: -12.262532234191895
    5. '"

' → logprob: -12.887532234191895
    6. '   ' → logprob: -14.012532234191895
    7. '"\' → logprob: -14.387532234191895
    8. 'else' → logprob: -14.387532234191895
    9. '```' → logprob: -14.387532234191895
    10. ' "' → logprob: -15.512532234191895

Token 103: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.0002003218833124265
    2. ' else' → logprob: -8.625200271606445
    3. 'else' → logprob: -10.875200271606445
    4. '	else' → logprob: -14.250200271606445
    5. '    
' → logprob: -15.000200271606445
    6. '
' → logprob: -15.375200271606445
    7. '<|end|>' → logprob: -16.125200271606445
    8. '```' → logprob: -16.625200271606445
    9. 'def' → logprob: -16.750200271606445
    10. '    ' → logprob: -17.125200271606445

Token 104: ' else' (ID: 1203)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.009645473212003708
    2. ' else' → logprob: -4.759645462036133
    3. 'else' (adapté à ' else') → logprob: -6.884645462036133
    4. '	else' → logprob: -12.884645462036133
    5. 'def' → logprob: -13.759645462036133
    6. 'return' → logprob: -13.759645462036133
    7. ' return' → logprob: -14.009645462036133
    8. ' ' → logprob: -14.759645462036133
    9. '       ' → logprob: -15.134645462036133
    10. '  ' → logprob: -15.384645462036133

Token 105: ':
' (ID: 734)
  Prédit: ':'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ':' → logprob: -0.06546847522258759
    2. '       ' → logprob: -3.8154685497283936
    3. '   ' → logprob: -3.9404685497283936
    4. ':
' → logprob: -3.9404685497283936
    5. ' return' → logprob: -7.8154683113098145
    6. '"' → logprob: -7.8154683113098145
    7. ':return' → logprob: -7.8154683113098145
    8. ' :' → logprob: -7.9404683113098145
    9. '    ' → logprob: -8.190468788146973
    10. '<|end|>' → logprob: -8.565468788146973

Token 106: '       ' (ID: 309)
  Prédit: '"'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '"' → logprob: -0.18733921647071838
    2. ' "' → logprob: -1.812339186668396
    3. '   ' → logprob: -5.6873393058776855
    4. ' return' → logprob: -5.9373393058776855
    5. 'return' → logprob: -7.1873393058776855
    6. '       ' → logprob: -7.3123393058776855
    7. '    ' → logprob: -9.562338829040527
    8. ' ' → logprob: -10.812338829040527
    9. ''' → logprob: -11.812338829040527
    10. '        ' → logprob: -12.312338829040527

Token 107: ' return' (ID: 622)
  Prédit: '"'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '"' → logprob: -0.2204750031232834
    2. ' "' → logprob: -1.7204749584197998
    3. '"No' → logprob: -3.9704749584198
    4. '   ' → logprob: -11.720475196838379
    5. ' ' → logprob: -12.470475196838379
    6. ' No' → logprob: -13.095475196838379
    7. ' return' → logprob: -13.970475196838379
    8. ''' → logprob: -14.345475196838379
    9. 'No' → logprob: -14.595475196838379
    10. 'return' (adapté à ' return') → logprob: -14.845475196838379

Token 108: ' "' (ID: 392)
  Prédit: '"'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '"' → logprob: -0.010109013877809048
    2. ' "' → logprob: -4.760108947753906
    3. '"No' → logprob: -6.510108947753906
    4. ' No' → logprob: -12.510108947753906
    5. ' ' → logprob: -14.135108947753906
    6. ''' → logprob: -14.885108947753906
    7. '   ' → logprob: -15.760108947753906
    8. ' ' → logprob: -16.510108947753906
    9. 'No' → logprob: -16.510108947753906
    10. '""' → logprob: -16.760108947753906

Token 109: 'No' (ID: 3160)
  Prédit: 'No'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'No' → logprob: -0.001503790495917201
    2. '"No' → logprob: -6.501503944396973
    3. ' No' → logprob: -13.501503944396973
    4. '"' → logprob: -17.126502990722656
    5. '“No' → logprob: -19.501502990722656
    6. '   ' → logprob: -20.376502990722656
    7. 'NO' → logprob: -20.376502990722656
    8. '_No' → logprob: -20.876502990722656
    9. '>No' → logprob: -21.501502990722656
    10. ''' → logprob: -21.501502990722656

Token 110: '"

' (ID: 2678)
  Prédit: '"'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '"' → logprob: -2.696889623621246e-06
    2. '")' → logprob: -13.87500286102295
    3. '```' → logprob: -14.12500286102295
    4. '"
' → logprob: -14.62500286102295
    5. ' "' → logprob: -15.87500286102295
    6. '"""' → logprob: -16.250001907348633
    7. '"}' → logprob: -16.500001907348633
    8. ')"' → logprob: -17.000001907348633
    9. '"user' → logprob: -17.000001907348633
    10. '"value' → logprob: -17.250001907348633

Token 111: 'def' (ID: 1314)
  Prédit: 'def'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'def' → logprob: -0.0024620986077934504
    2. 'a' → logprob: -6.127461910247803
    3. 'print' → logprob: -8.627462387084961
    4. 'if' → logprob: -10.002462387084961
    5. 'user' → logprob: -10.377462387084961
    6. 'n' → logprob: -11.627462387084961
    7. '```' → logprob: -12.502462387084961
    8. 'x' → logprob: -12.752462387084961
    9. 'for' → logprob: -13.127462387084961
    10. 'input' → logprob: -13.752462387084961

Token 112: ' print' (ID: 2123)
  Prédit: 'main'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'main' → logprob: -0.48392871022224426
    2. ' main' → logprob: -0.9839286804199219
    3. 'check' → logprob: -5.858928680419922
    4. 'middle' → logprob: -6.108928680419922
    5. 'is' → logprob: -6.608928680419922
    6. ' middle' → logprob: -6.858928680419922
    7. ' check' → logprob: -7.608928680419922
    8. 'solve' → logprob: -7.608928680419922
    9. ' is' → logprob: -7.733928680419922
    10. 'can' → logprob: -7.858928680419922

Token 113: '_result' (ID: 11623)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(' → logprob: -0.011575517244637012
    2. '(get' → logprob: -4.886575698852539
    3. '_' → logprob: -6.386575698852539
    4. ' (' → logprob: -7.011575698852539
    5. '("' → logprob: -7.261575698852539
    6. '("")' → logprob: -8.761575698852539
    7. '('' → logprob: -9.011575698852539
    8. '()' → logprob: -9.886575698852539
    9. '_result' → logprob: -9.886575698852539
    10. '("("' → logprob: -10.261575698852539

Token 114: '(result' (ID: 8111)
  Prédit: '(result'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(result' → logprob: -0.08946608752012253
    2. '(condition' → logprob: -2.589466094970703
    3. '(' → logprob: -4.589466094970703
    4. '(value' → logprob: -8.589466094970703
    5. '(output' → logprob: -9.089466094970703
    6. '():' → logprob: -11.714466094970703
    7. '(message' → logprob: -11.714466094970703
    8. '(answer' → logprob: -11.839466094970703
    9. ' (' → logprob: -11.839466094970703
    10. '(s' → logprob: -11.964466094970703

Token 115: '):
' (ID: 1883)
  Prédit: '):'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '):' → logprob: -0.02328193560242653
    2. ')' → logprob: -4.273282051086426
    3. '(result' → logprob: -5.023282051086426
    4. '):
' → logprob: -6.023282051086426
    5. '   ' → logprob: -10.023282051086426
    6. '(' → logprob: -11.398282051086426
    7. 'result' → logprob: -12.273282051086426
    8. '):
' → logprob: -12.648282051086426
    9. ' ):' → logprob: -13.398282051086426
    10. ' ' → logprob: -13.523282051086426

Token 116: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.003974274266511202
    2. ' print' → logprob: -6.003974437713623
    3. 'print' → logprob: -6.503974437713623
    4. '   ' → logprob: -17.87897491455078
    5. '```' → logprob: -18.50397491455078
    6. '	print' → logprob: -18.87897491455078
    7. '(print' → logprob: -19.62897491455078
    8. '       ' → logprob: -19.75397491455078
    9. 'def' → logprob: -20.75397491455078
    10. '    
' → logprob: -21.00397491455078

Token 117: ' print' (ID: 2123)
  Prédit: 'print'
  Correct (stricte): False
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'print' (adapté à ' print') → logprob: -0.005493664648383856
    2. ' print' → logprob: -5.255493640899658
    3. '   ' → logprob: -8.255494117736816
    4. '```' → logprob: -19.5054931640625
    5. '	print' → logprob: -19.6304931640625
    6. '(print' → logprob: -21.7554931640625
    7. 'for' → logprob: -22.5054931640625
    8. ' ' → logprob: -22.7554931640625
    9. '  ' → logprob: -23.1304931640625
    10. '.print' → logprob: -23.6304931640625

Token 118: '(result' (ID: 8111)
  Prédit: '(result'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(result' → logprob: -0.023263530805706978
    2. '(' → logprob: -3.773263454437256
    3. 'result' → logprob: -11.023263931274414
    4. '()' → logprob: -14.148263931274414
    5. '(f' → logprob: -14.898263931274414
    6. ' (' → logprob: -15.773263931274414
    7. '(results' → logprob: -16.148263931274414
    8. '('' → logprob: -16.398263931274414
    9. '(
' → logprob: -16.648263931274414
    10. '(res' → logprob: -16.898263931274414

Token 119: ')

' (ID: 1029)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ')' → logprob: -3.128163257315464e-07
    2. ')
' → logprob: -16.375
    3. ' )' → logprob: -16.375
    4. ')`' → logprob: -18.375
    5. '()' → logprob: -19.5
    6. '))' → logprob: -19.875
    7. '')' → logprob: -20.125
    8. '")' → logprob: -20.5
    9. '())' → logprob: -20.625
    10. '),' → logprob: -20.75

Token 120: 'def' (ID: 1314)
  Prédit: 'def'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'def' → logprob: -0.015005377121269703
    2. 'user' → logprob: -4.390005588531494
    3. 'a' → logprob: -6.640005588531494
    4. 'if' → logprob: -6.765005588531494
    5. 'n' → logprob: -11.265005111694336
    6. 'input' → logprob: -11.765005111694336
    7. 'data' → logprob: -13.640005111694336
    8. 'x' → logprob: -13.765005111694336
    9. 'print' → logprob: -13.765005111694336
    10. 'for' → logprob: -13.890005111694336

Token 121: ' main' (ID: 2758)
  Prédit: ' main'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' main' → logprob: -0.07921990752220154
    2. 'main' → logprob: -2.5792198181152344
    3. ' middle' → logprob: -8.954219818115234
    4. ' solve' → logprob: -9.954219818115234
    5. ' process' → logprob: -10.704219818115234
    6. 'solve' → logprob: -10.704219818115234
    7. ' is' → logprob: -10.954219818115234
    8. 'middle' → logprob: -11.079219818115234
    9. ' run' → logprob: -11.204219818115234
    10. ' check' → logprob: -11.454219818115234

Token 122: '():
' (ID: 8595)
  Prédit: '():'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '():' → logprob: -1.747814349073451e-05
    2. ' ():' → logprob: -11.375017166137695
    3. '():
' → logprob: -12.500017166137695
    4. '()' → logprob: -13.500017166137695
    5. '(' → logprob: -14.625017166137695
    6. '_' → logprob: -15.750017166137695
    7. '()>' → logprob: -16.625017166137695
    8. '():
' → logprob: -16.750017166137695
    9. ':' → logprob: -17.625017166137695
    10. '(":' → logprob: -18.750017166137695

Token 123: '   ' (ID: 271)
  Prédit: ' user'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' user' → logprob: -0.6660225987434387
    2. '   ' → logprob: -0.7910225987434387
    3. 'user' → logprob: -3.416022539138794
    4. 'a' → logprob: -11.291022300720215
    5. '	user' → logprob: -12.666022300720215
    6. ' a' → logprob: -12.791022300720215
    7. '   ' → logprob: -13.291022300720215
    8. ' input' → logprob: -13.541022300720215
    9. '    
' → logprob: -13.541022300720215
    10. 'input' → logprob: -13.666022300720215

Token 124: ' user' (ID: 1825)
  Prédit: 'user'
  Correct (stricte): False
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'user' (adapté à ' user') → logprob: -0.14289310574531555
    2. ' user' → logprob: -2.017893075942993
    3. '   ' → logprob: -8.517892837524414
    4. 'raw' → logprob: -12.142892837524414
    5. '	user' → logprob: -12.642892837524414
    6. ' raw' → logprob: -12.892892837524414
    7. 'input' → logprob: -13.392892837524414
    8. 'a' → logprob: -13.642892837524414
    9. '    
' → logprob: -13.892892837524414
    10. 'values' → logprob: -14.642892837524414

Token 125: '_input' (ID: 12507)
  Prédit: '_input'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_input' → logprob: -0.0024909991770982742
    2. '_' → logprob: -6.002490997314453
    3. '_user' → logprob: -11.252490997314453
    4. '_in' → logprob: -13.877490997314453
    5. '_inputs' → logprob: -15.127490997314453
    6. '_output' → logprob: -15.502490997314453
    7. ' _' → logprob: -15.627490997314453
    8. '_value' → logprob: -15.877490997314453
    9. '_Input' → logprob: -16.127490997314453
    10. 'input' → logprob: -16.252490997314453

Token 126: ' =' (ID: 314)
  Prédit: ' ='
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' =' → logprob: -0.10021281987428665
    2. '=' → logprob: -2.350212812423706
    3. '_' → logprob: -12.475213050842285
    4. '()' → logprob: -13.350213050842285
    5. '   ' → logprob: -15.725213050842285
    6. '(' → logprob: -15.850213050842285
    7. ')' → logprob: -16.22521209716797
    8. ' ' → logprob: -16.60021209716797
    9. 's' → logprob: -16.72521209716797
    10. ' ' → logprob: -16.85021209716797

Token 127: ' get' (ID: 717)
  Prédit: 'get'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'get' → logprob: -0.1602245420217514
    2. ' get' → logprob: -1.9102245569229126
    3. '	get' → logprob: -14.910224914550781
    4. '(get' → logprob: -16.28522491455078
    5. ' ' → logprob: -17.28522491455078
    6. '=get' → logprob: -17.66022491455078
    7. 'input' → logprob: -17.78522491455078
    8. '_get' → logprob: -18.41022491455078
    9. ' input' → logprob: -19.16022491455078
    10. '[get' → logprob: -19.78522491455078

Token 128: '_input' (ID: 12507)
  Prédit: '_input'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_input' → logprob: -6.392202976712724e-06
    2. '_' → logprob: -12.125006675720215
    3. '_user' → logprob: -14.625006675720215
    4. '_output' → logprob: -15.250006675720215
    5. ' _' → logprob: -16.5000057220459
    6. '_in' → logprob: -17.6250057220459
    7. '_line' → logprob: -17.7500057220459
    8. '_Input' → logprob: -18.2500057220459
    9. 'input' → logprob: -18.3750057220459
    10. '_inputs' → logprob: -18.8750057220459

Token 129: '()
' (ID: 1234)
  Prédit: '()'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '()' → logprob: -2.47495681833243e-05
    2. '()
' → logprob: -10.625024795532227
    3. '()

' → logprob: -15.125024795532227
    4. '()`' → logprob: -17.375024795532227
    5. ' ()' → logprob: -18.000024795532227
    6. '()"' → logprob: -18.000024795532227
    7. '())' → logprob: -18.250024795532227
    8. '().' → logprob: -18.250024795532227
    9. '():' → logprob: -18.875024795532227
    10. '()
' → logprob: -19.000024795532227

Token 130: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.06615034490823746
    2. ' values' → logprob: -3.316150426864624
    3. 'values' → logprob: -4.316150188446045
    4. ' splitted' → logprob: -4.816150188446045
    5. ' parts' → logprob: -6.191150188446045
    6. 'tokens' → logprob: -6.566150188446045
    7. ' tokens' → logprob: -6.816150188446045
    8. ' split' → logprob: -7.441150188446045
    9. 'split' → logprob: -8.191150665283203
    10. ' words' → logprob: -8.691150665283203

Token 131: ' str' (ID: 989)
  Prédit: 'values'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'values' → logprob: -0.6042107939720154
    2. 'split' → logprob: -1.3542108535766602
    3. 'str' (adapté à ' str') → logprob: -1.8542108535766602
    4. ' splitted' → logprob: -4.22921085357666
    5. 'spl' → logprob: -4.97921085357666
    6. ' values' → logprob: -5.10421085357666
    7. '   ' → logprob: -5.85421085357666
    8. ' split' → logprob: -6.10421085357666
    9. 'words' → logprob: -6.22921085357666
    10. 'tokens' → logprob: -6.22921085357666

Token 132: '_values' (ID: 20393)
  Prédit: '_values'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_values' → logprob: -0.0002263046189909801
    2. '_input' → logprob: -8.625226020812988
    3. '_' → logprob: -10.750226020812988
    4. 'values' → logprob: -11.125226020812988
    5. '_vals' → logprob: -12.500226020812988
    6. '_value' → logprob: -12.750226020812988
    7. '_user' → logprob: -14.125226020812988
    8. '_tokens' → logprob: -14.375226020812988
    9. '_val' → logprob: -14.500226020812988
    10. 'ing' → logprob: -14.625226020812988

Token 133: ' =' (ID: 314)
  Prédit: ' ='
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' =' → logprob: -0.023245712742209435
    2. '=' → logprob: -3.7732458114624023
    3. ')' → logprob: -15.898245811462402
    4. '   ' → logprob: -16.773244857788086
    5. ',' → logprob: -16.898244857788086
    6. ' ' → logprob: -17.148244857788086
    7. 's' → logprob: -18.023244857788086
    8. '  ' → logprob: -18.523244857788086
    9. ' ' → logprob: -18.773244857788086
    10. ' =)' → logprob: -19.523244857788086

Token 134: ' split' (ID: 12648)
  Prédit: 'split'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'split' → logprob: -0.3868725001811981
    2. ' split' → logprob: -1.1368725299835205
    3. '(split' → logprob: -13.761872291564941
    4. '   ' → logprob: -15.136872291564941
    5. ' ' → logprob: -16.261873245239258
    6. '.split' → logprob: -17.011873245239258
    7. 'spl' → logprob: -17.761873245239258
    8. '_split' → logprob: -18.011873245239258
    9. ' ' → logprob: -18.511873245239258
    10. '    ' → logprob: -19.011873245239258

Token 135: '_input' (ID: 12507)
  Prédit: '_input'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_input' → logprob: -1.7120533811976202e-05
    2. '_user' → logprob: -11.000017166137695
    3. '_' → logprob: -15.875017166137695
    4. 'input' → logprob: -16.750017166137695
    5. '_output' → logprob: -17.750017166137695
    6. '(user' → logprob: -18.125017166137695
    7. '(input' → logprob: -18.375017166137695
    8. 'user' → logprob: -18.500017166137695
    9. '_inputs' → logprob: -18.500017166137695
    10. '_in' → logprob: -19.375017166137695

Token 136: '(user' (ID: 7195)
  Prédit: '(user'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(user' → logprob: -2.45848218582978e-06
    2. '(' → logprob: -13.00000286102295
    3. 'user' → logprob: -16.375001907348633
    4. ' (' → logprob: -18.500001907348633
    5. '(
' → logprob: -20.500001907348633
    6. '(u' → logprob: -20.500001907348633
    7. ',user' → logprob: -20.625001907348633
    8. '(users' → logprob: -20.625001907348633
    9. '=user' → logprob: -20.625001907348633
    10. ' user' → logprob: -20.875001907348633

Token 137: '_input' (ID: 12507)
  Prédit: '_input'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_input' → logprob: -0.0001347672223346308
    2. '(user' → logprob: -9.625134468078613
    3. 'input' → logprob: -9.875134468078613
    4. '_user' → logprob: -11.750134468078613
    5. ')' → logprob: -13.125134468078613
    6. 'user' → logprob: -13.125134468078613
    7. '(input' → logprob: -13.250134468078613
    8. '```' → logprob: -13.625134468078613
    9. 'Input' → logprob: -14.125134468078613
    10. '_values' → logprob: -14.875134468078613

Token 138: ')
' (ID: 446)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')' → logprob: -0.002903897315263748
    2. '   ' → logprob: -6.252903938293457
    3. ')
' → logprob: -7.002903938293457
    4. '(user' → logprob: -10.002903938293457
    5. 'user' → logprob: -11.502903938293457
    6. ' ' → logprob: -12.752903938293457
    7. '[user' → logprob: -13.252903938293457
    8. ' )' → logprob: -14.002903938293457
    9. ',' → logprob: -14.002903938293457
    10. '(' → logprob: -14.377903938293457

Token 139: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.19161498546600342
    2. 'mapped' → logprob: -1.9416149854660034
    3. ' mapped' → logprob: -3.566615104675293
    4. 'int' → logprob: -6.191615104675293
    5. 'ints' → logprob: -8.066615104675293
    6. ' int' → logprob: -9.566615104675293
    7. '(mapped' → logprob: -9.941615104675293
    8. '    
' → logprob: -9.941615104675293
    9. 'values' → logprob: -10.441615104675293
    10. 'm' → logprob: -11.191615104675293

Token 140: ' mapped' (ID: 47205)
  Prédit: 'mapped'
  Correct (stricte): False
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'mapped' (adapté à ' mapped') → logprob: -0.03403902426362038
    2. 'int' → logprob: -3.65903902053833
    3. 'ints' → logprob: -5.40903902053833
    4. ' mapped' → logprob: -6.28403902053833
    5. '   ' → logprob: -6.78403902053833
    6. 'values' → logprob: -9.409039497375488
    7. ' int' → logprob: -10.284039497375488
    8. 'numbers' → logprob: -10.784039497375488
    9. 'map' → logprob: -10.909039497375488
    10. 'm' → logprob: -11.034039497375488

Token 141: '_values' (ID: 20393)
  Prédit: '_values'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_values' → logprob: -0.0016942229121923447
    2. '_to' → logprob: -6.501694202423096
    3. '_' → logprob: -8.876694679260254
    4. '=_' → logprob: -10.376694679260254
    5. 'values' → logprob: -12.126694679260254
    6. '=' → logprob: -12.126694679260254
    7. ' =' → logprob: -12.501694679260254
    8. '_vals' → logprob: -13.001694679260254
    9. '_value' → logprob: -13.751694679260254
    10. '_m' → logprob: -14.376694679260254

Token 142: ' =' (ID: 314)
  Prédit: '='
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '=' → logprob: -0.1269298940896988
    2. ' =' → logprob: -2.126929998397827
    3. ')' → logprob: -14.126930236816406
    4. '_' → logprob: -14.626930236816406
    5. '(' → logprob: -15.001930236816406
    6. '_to' → logprob: -16.126930236816406
    7. 's' → logprob: -17.001930236816406
    8. 'to' → logprob: -17.001930236816406
    9. '=m' → logprob: -17.251930236816406
    10. '=_' → logprob: -17.376930236816406

Token 143: ' map' (ID: 4014)
  Prédit: 'map'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'map' → logprob: -0.6931492686271667
    2. ' map' → logprob: -0.6931492686271667
    3. ' ' → logprob: -14.19314956665039
    4. 'list' → logprob: -15.19314956665039
    5. '	map' → logprob: -15.31814956665039
    6. ' list' → logprob: -15.44314956665039
    7. '   ' → logprob: -15.56814956665039
    8. '(map' → logprob: -15.56814956665039
    9. 'm' → logprob: -16.31814956665039
    10. ' ' → logprob: -16.69314956665039

Token 144: '_to' (ID: 5089)
  Prédit: '_to'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_to' → logprob: 0.0
    2. 'to' → logprob: -17.375
    3. '_' → logprob: -18.75
    4. 'int' → logprob: -19.75
    5. 'To' → logprob: -20.125
    6. ' to' → logprob: -21.125
    7. '_TO' → logprob: -21.5
    8. ' _' → logprob: -21.625
    9. '_m' → logprob: -21.875
    10. ')_' → logprob: -22.0

Token 145: '_int' (ID: 12285)
  Prédit: '_int'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_int' → logprob: -0.2519332468509674
    2. 'int' → logprob: -1.501933217048645
    3. ' int' → logprob: -12.751933097839355
    4. 'Int' → logprob: -14.501933097839355
    5. '<int' → logprob: -15.376933097839355
    6. 'ints' → logprob: -15.501933097839355
    7. '_in' → logprob: -16.126934051513672
    8. '
' → logprob: -16.751934051513672
    9. '[int' → logprob: -16.751934051513672
    10. '_' → logprob: -17.001934051513672

Token 146: '(str' (ID: 7946)
  Prédit: '(str'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(str' → logprob: -1.5048530030981055e-06
    2. '(' → logprob: -13.500001907348633
    3. 'str' → logprob: -18.625001907348633
    4. ' (' → logprob: -18.625001907348633
    5. '[str' → logprob: -20.375001907348633
    6. '=str' → logprob: -20.875001907348633
    7. ',str' → logprob: -21.375001907348633
    8. '(s' → logprob: -21.875001907348633
    9. '(st' → logprob: -22.000001907348633
    10. '(string' → logprob: -22.000001907348633

Token 147: '_values' (ID: 20393)
  Prédit: '_values'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_values' → logprob: -0.005238140933215618
    2. 'values' → logprob: -5.255238056182861
    3. '(values' → logprob: -12.75523853302002
    4. 'mapped' → logprob: -15.13023853302002
    5. 'Values' → logprob: -15.38023853302002
    6. 's' → logprob: -15.38023853302002
    7. '(mapped' → logprob: -15.63023853302002
    8. '_VALUES' → logprob: -15.75523853302002
    9. ' values' → logprob: -15.88023853302002
    10. '_' → logprob: -16.255237579345703

Token 148: ')
' (ID: 446)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')' → logprob: -0.04876517504453659
    2. ')
' → logprob: -3.048765182495117
    3. '   ' → logprob: -8.673765182495117
    4. ')
' → logprob: -12.423765182495117
    5. ')

' → logprob: -13.923765182495117
    6. ' ' → logprob: -14.173765182495117
    7. ' )' → logprob: -14.423765182495117
    8. ' )
' → logprob: -15.048765182495117
    9. '()' → logprob: -16.548765182495117
    10. '  ' → logprob: -16.548765182495117

Token 149: '   ' (ID: 271)
  Prédit: 'a'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'a' → logprob: -0.057304900139570236
    2. '   ' → logprob: -3.057304859161377
    3. ' a' → logprob: -4.807304859161377
    4. '    
' → logprob: -7.932304859161377
    5. 'values' → logprob: -9.807305335998535
    6. '	a' → logprob: -10.557305335998535
    7. '(a' → logprob: -11.057305335998535
    8. '<|end|>' → logprob: -12.057305335998535
    9. '[a' → logprob: -12.432305335998535
    10. 'first' → logprob: -12.432305335998535

Token 150: ' A' (ID: 355)
  Prédit: 'a'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'a' → logprob: -7.421908958349377e-05
    2. 'values' → logprob: -10.50007438659668
    3. ' a' → logprob: -10.87507438659668
    4. 'x' → logprob: -11.25007438659668
    5. '   ' → logprob: -11.50007438659668
    6. '    
' → logprob: -13.37507438659668
    7. '(a' → logprob: -14.75007438659668
    8. 'A' (adapté à ' A') → logprob: -15.00007438659668
    9. 'first' → logprob: -15.00007438659668
    10. '	a' → logprob: -15.37507438659668

Token 151: ',' (ID: 11)
  Prédit: ','
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ',' → logprob: -0.00014191943046171218
    2. ',B' → logprob: -9.125142097473145
    3. ' ,' → logprob: -10.375142097473145
    4. '1' → logprob: -13.875142097473145
    5. 'a' → logprob: -15.125142097473145
    6. 'B' → logprob: -15.375142097473145
    7. ' B' → logprob: -16.250141143798828
    8. ',b' → logprob: -17.000141143798828
    9. ',C' → logprob: -17.125141143798828
    10. '_,' → logprob: -17.625141143798828

Token 152: ' B' (ID: 418)
  Prédit: 'B'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'B' → logprob: -0.005234832875430584
    2. ' B' → logprob: -5.255234718322754
    3. 'b' → logprob: -15.130234718322754
    4. 'C' → logprob: -15.505234718322754
    5. ' ' → logprob: -15.505234718322754
    6. '   ' → logprob: -16.25523567199707
    7. ' ' → logprob: -16.50523567199707
    8. '  ' → logprob: -17.00523567199707
    9. 'M' → logprob: -17.25523567199707
    10. '<|end|>' → logprob: -17.50523567199707

Token 153: ',' (ID: 11)
  Prédit: ','
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ',' → logprob: -0.00011164903844473884
    2. ' ,' → logprob: -9.62511157989502
    3. ',C' → logprob: -10.75011157989502
    4. ' =' → logprob: -10.75011157989502
    5. '=' → logprob: -13.25011157989502
    6. 'C' → logprob: -14.25011157989502
    7. ',c' → logprob: -16.125112533569336
    8. ' C' → logprob: -16.625112533569336
    9. '<|end|>' → logprob: -17.125112533569336
    10. '_,' → logprob: -18.000112533569336

Token 154: ' C' (ID: 363)
  Prédit: 'C'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'C' → logprob: -0.009781114757061005
    2. ' C' → logprob: -4.6347808837890625
    3. ' ' → logprob: -10.884780883789062
    4. 'c' → logprob: -13.259780883789062
    5. '  ' → logprob: -13.509780883789062
    6. '   ' → logprob: -13.884780883789062
    7. '<|end|>' → logprob: -14.509780883789062
    8. 'and' → logprob: -14.634780883789062
    9. '	C' → logprob: -15.259780883789062
    10. ' and' → logprob: -15.634780883789062

Token 155: ' =' (ID: 314)
  Prédit: ' ='
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' =' → logprob: -0.018150178715586662
    2. '=' → logprob: -4.018150329589844
    3. ',' → logprob: -15.643150329589844
    4. ')' → logprob: -17.393150329589844
    5. ' ' → logprob: -17.893150329589844
    6. '  ' → logprob: -18.643150329589844
    7. '<|end|>' → logprob: -18.893150329589844
    8. ' =)' → logprob: -19.018150329589844
    9. '＝' → logprob: -19.393150329589844
    10. '   ' → logprob: -19.393150329589844

Token 156: ' unpack' (ID: 61704)
  Prédit: ' unpack'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' unpack' → logprob: -0.011234324425458908
    2. 'un' → logprob: -4.511234283447266
    3. ' un' → logprob: -9.511234283447266
    4. '_unpack' → logprob: -9.511234283447266
    5. '.unpack' → logprob: -10.511234283447266
    6. '	un' → logprob: -12.636234283447266
    7. ' ' → logprob: -13.636234283447266
    8. ' ' → logprob: -13.761234283447266
    9. ' 
' → logprob: -13.886234283447266
    10. '(un' → logprob: -14.136234283447266

Token 157: '_values' (ID: 20393)
  Prédit: '_values'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_values' → logprob: -6.392202976712724e-06
    2. 'values' → logprob: -12.000006675720215
    3. 'ed' → logprob: -16.5000057220459
    4. '_VALUES' → logprob: -17.0000057220459
    5. '(values' → logprob: -17.2500057220459
    6. '_' → logprob: -17.2500057220459
    7. '_value' → logprob: -17.8750057220459
    8. 'Values' → logprob: -18.0000057220459
    9. '_m' → logprob: -18.2500057220459
    10. '_vals' → logprob: -19.5000057220459

Token 158: '(mapped' (ID: 122858)
  Prédit: '(mapped'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(mapped' → logprob: -1.3306015716807451e-05
    2. '(' → logprob: -11.25001335144043
    3. '(mapping' → logprob: -15.62501335144043
    4. 'mapped' → logprob: -16.75001335144043
    5. '(map' → logprob: -18.00001335144043
    6. '(
' → logprob: -19.62501335144043
    7. '(filtered' → logprob: -19.75001335144043
    8. ' mapped' → logprob: -19.75001335144043
    9. '(parsed' → logprob: -20.37501335144043
    10. '(mask' → logprob: -21.00001335144043

Token 159: '_values' (ID: 20393)
  Prédit: '_values'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_values' → logprob: -3.650518920039758e-06
    2. 'values' → logprob: -13.125003814697266
    3. 'ed' → logprob: -14.000003814697266
    4. '_' → logprob: -15.000003814697266
    5. '(values' → logprob: -16.250003814697266
    6. 'Values' → logprob: -16.250003814697266
    7. '_m' → logprob: -17.000003814697266
    8. '_value' → logprob: -17.000003814697266
    9. '_VALUES' → logprob: -17.000003814697266
    10. ' values' → logprob: -17.125003814697266

Token 160: ')
' (ID: 446)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')' → logprob: -7.660315895918757e-05
    2. ')
' → logprob: -9.500076293945312
    3. '   ' → logprob: -13.500076293945312
    4. ' )' → logprob: -15.875076293945312
    5. ')

' → logprob: -16.250076293945312
    6. '<|end|>' → logprob: -17.625076293945312
    7. '),' → logprob: -18.250076293945312
    8. ')#' → logprob: -18.250076293945312
    9. '()' → logprob: -18.500076293945312
    10. ')
' → logprob: -18.625076293945312

Token 161: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.04770180955529213
    2. 'result' → logprob: -3.422701835632324
    3. ' result' → logprob: -4.297701835632324
    4. '    
' → logprob: -8.547701835632324
    5. 'print' → logprob: -9.422701835632324
    6. '
' → logprob: -10.422701835632324
    7. ' print' → logprob: -10.797701835632324
    8. '```' → logprob: -11.047701835632324
    9. '	result' → logprob: -12.172701835632324
    10. '   ' → logprob: -13.172701835632324

Token 162: ' condition' (ID: 7060)
  Prédit: 'result'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'result' → logprob: -0.1543635129928589
    2. '   ' → logprob: -2.2793636322021484
    3. ' result' → logprob: -3.6543636322021484
    4. 'print' → logprob: -4.279363632202148
    5. '
' → logprob: -8.029363632202148
    6. '    
' → logprob: -8.279363632202148
    7. ' print' → logprob: -8.279363632202148
    8. 'answer' → logprob: -9.654363632202148
    9. '```' → logprob: -11.279363632202148
    10. '	result' → logprob: -11.404363632202148

Token 163: ' =' (ID: 314)
  Prédit: ' ='
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' =' → logprob: -0.016208212822675705
    2. '=' → logprob: -4.141208171844482
    3. '_' → logprob: -8.76620864868164
    4. '_result' → logprob: -11.01620864868164
    5. 'result' → logprob: -14.26620864868164
    6. 's' → logprob: -14.89120864868164
    7. '   ' → logprob: -16.01620864868164
    8. ')' → logprob: -16.26620864868164
    9. '_=' → logprob: -16.26620864868164
    10. ' ' → logprob: -16.51620864868164

Token 164: ' is' (ID: 382)
  Prédit: 'is'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'is' → logprob: -0.6931527256965637
    2. ' is' → logprob: -0.6931527256965637
    3. '(is' → logprob: -12.56815242767334
    4. '   ' → logprob: -13.69315242767334
    5. ' (' → logprob: -14.81815242767334
    6. ' ' → logprob: -15.06815242767334
    7. '(' → logprob: -16.068153381347656
    8. '	is' → logprob: -16.443153381347656
    9. ' ' → logprob: -17.318153381347656
    10. '  ' → logprob: -18.068153381347656

Token 165: '_middle' (ID: 155207)
  Prédit: '_middle'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_middle' → logprob: -0.0004901225329376757
    2. 'middle' → logprob: -7.625490188598633
    3. '_' → logprob: -13.625490188598633
    4. '_mid' → logprob: -14.375490188598633
    5. '_m' → logprob: -15.625490188598633
    6. 'm' → logprob: -16.625490188598633
    7. '_medium' → logprob: -16.625490188598633
    8. '```' → logprob: -17.750490188598633
    9. 'a' → logprob: -17.875490188598633
    10. 'Middle' → logprob: -18.125490188598633

Token 166: '(A' (ID: 10706)
  Prédit: '(A'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(A' → logprob: -8.542423165636137e-05
    2. '(' → logprob: -10.125085830688477
    3. '(C' → logprob: -10.500085830688477
    4. '(B' → logprob: -11.125085830688477
    5. ' (' → logprob: -13.250085830688477
    6. '(
' → logprob: -14.250085830688477
    7. '((' → logprob: -15.625085830688477
    8. '(a' → logprob: -15.625085830688477
    9. 'A' → logprob: -16.000085830688477
    10. 'C' → logprob: -17.125085830688477

Token 167: ',' (ID: 11)
  Prédit: ','
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ',' → logprob: -0.00012809180771000683
    2. ' ,' → logprob: -9.375127792358398
    3. ',B' → logprob: -10.125127792358398
    4. '(' → logprob: -13.625127792358398
    5. ',C' → logprob: -14.250127792358398
    6. ',A' → logprob: -15.125127792358398
    7. ',
' → logprob: -15.125127792358398
    8. '(B' → logprob: -15.500127792358398
    9. ',b' → logprob: -16.0001277923584
    10. 'C' → logprob: -16.2501277923584

Token 168: ' B' (ID: 418)
  Prédit: 'B'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'B' → logprob: -0.005864801350980997
    2. 'C' → logprob: -5.25586462020874
    3. ' B' → logprob: -7.38086462020874
    4. ' C' → logprob: -12.255865097045898
    5. 'b' → logprob: -14.130865097045898
    6. ' ' → logprob: -14.505865097045898
    7. '	B' → logprob: -14.755865097045898
    8. '   ' → logprob: -15.193365097045898
    9. 'c' → logprob: -15.443365097045898
    10. '(B' → logprob: -15.693365097045898

Token 169: ',' (ID: 11)
  Prédit: ','
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ',' → logprob: -0.0009427884360775352
    2. ' ,' → logprob: -7.125942707061768
    3. 'C' → logprob: -9.625943183898926
    4. ',C' → logprob: -9.625943183898926
    5. ' C' → logprob: -12.250943183898926
    6. ',
' → logprob: -14.875943183898926
    7. ')' → logprob: -15.250943183898926
    8. ',c' → logprob: -15.375943183898926
    9. ' ' → logprob: -16.00094223022461
    10. '   ' → logprob: -16.37594223022461

Token 170: ' C' (ID: 363)
  Prédit: 'C'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'C' → logprob: -0.0010330495424568653
    2. ' C' → logprob: -6.876032829284668
    3. ')' → logprob: -15.626032829284668
    4. ' ' → logprob: -16.001033782958984
    5. '	C' → logprob: -17.251033782958984
    6. '   ' → logprob: -17.626033782958984
    7. 'c' → logprob: -18.001033782958984
    8. '  ' → logprob: -18.126033782958984
    9. '(C' → logprob: -18.376033782958984
    10. '<|end|>' → logprob: -18.376033782958984

Token 171: ')
' (ID: 446)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')' → logprob: -0.00018363336857873946
    2. ')
' → logprob: -8.625184059143066
    3. ' )' → logprob: -13.000184059143066
    4. ')

' → logprob: -13.875184059143066
    5. ')
' → logprob: -15.250184059143066
    6. '))' → logprob: -15.250184059143066
    7. '   ' → logprob: -15.625184059143066
    8. ' ' → logprob: -16.62518310546875
    9. ')`' → logprob: -17.75018310546875
    10. ')c' → logprob: -18.00018310546875

Token 172: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.010399039834737778
    2. 'result' → logprob: -4.885398864746094
    3. ' result' → logprob: -5.885398864746094
    4. '    
' → logprob: -12.635398864746094
    5. '
' → logprob: -12.635398864746094
    6. '	result' → logprob: -14.010398864746094
    7. 'print' → logprob: -14.135398864746094
    8. '```' → logprob: -14.760398864746094
    9. '   ' → logprob: -15.010398864746094
    10. ' print' → logprob: -16.510398864746094

Token 173: ' result' (ID: 1534)
  Prédit: 'result'
  Correct (stricte): False
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'result' (adapté à ' result') → logprob: -0.10562188178300858
    2. ' result' → logprob: -2.355621814727783
    3. '   ' → logprob: -5.230621814727783
    4. 'print' → logprob: -10.230622291564941
    5. '
' → logprob: -12.480622291564941
    6. 'answer' → logprob: -13.105622291564941
    7. ' print' → logprob: -13.230622291564941
    8. '	result' → logprob: -13.480622291564941
    9. 'output' → logprob: -13.855622291564941
    10. ' ' → logprob: -13.980622291564941

Token 174: ' =' (ID: 314)
  Prédit: ' ='
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' =' → logprob: -0.029751643538475037
    2. '=' → logprob: -3.5297515392303467
    3. '_' → logprob: -14.029751777648926
    4. '_=' → logprob: -16.15475082397461
    5. ' ' → logprob: -16.65475082397461
    6. ' =
' → logprob: -16.90475082397461
    7. ')' → logprob: -17.52975082397461
    8. ' =)' → logprob: -17.77975082397461
    9. ' ' → logprob: -17.90475082397461
    10. '  ' → logprob: -18.27975082397461

Token 175: ' get' (ID: 717)
  Prédit: 'get'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'get' → logprob: -0.4740770161151886
    2. ' get' → logprob: -0.9740769863128662
    3. '(get' → logprob: -17.974077224731445
    4. '	get' → logprob: -18.474077224731445
    5. '=get' → logprob: -19.599077224731445
    6. '_get' → logprob: -19.724077224731445
    7. '.get' → logprob: -19.849077224731445
    8. '   ' → logprob: -19.849077224731445
    9. '[get' → logprob: -20.974077224731445
    10. ' ' → logprob: -21.599077224731445

Token 176: '_yes' (ID: 151898)
  Prédit: '_yes'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_yes' → logprob: -7.226628895296017e-06
    2. '_' → logprob: -12.250007629394531
    3. '_you' → logprob: -13.375007629394531
    4. '_no' → logprob: -14.875007629394531
    5. 'yes' → logprob: -14.875007629394531
    6. '```' → logprob: -16.87500762939453
    7. ' _' → logprob: -17.25000762939453
    8. 'Yes' → logprob: -17.25000762939453
    9. '_result' → logprob: -17.37500762939453
    10. '_y' → logprob: -18.12500762939453

Token 177: '_no' (ID: 13575)
  Prédit: '_no'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_no' → logprob: -3.128163257315464e-07
    2. '_No' → logprob: -16.125
    3. '_n' → logprob: -16.625
    4. 'No' → logprob: -17.375
    5. '_or' → logprob: -17.5
    6. '_NO' → logprob: -17.5
    7. '_o' → logprob: -17.75
    8. '(_' → logprob: -17.875
    9. 'no' → logprob: -18.25
    10. 's' → logprob: -19.125

Token 178: '(condition' (ID: 90332)
  Prédit: '(condition'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(condition' → logprob: -1.700132997939363e-05
    2. '(' → logprob: -11.000017166137695
    3. ' (' → logprob: -15.500017166137695
    4. 'condition' → logprob: -17.500017166137695
    5. ' condition' → logprob: -19.250017166137695
    6. '((' → logprob: -19.625017166137695
    7. '(cond' → logprob: -19.750017166137695
    8. '(
' → logprob: -19.875017166137695
    9. '()' → logprob: -20.125017166137695
    10. ' ' → logprob: -20.375017166137695

Token 179: ')
' (ID: 446)
  Prédit: ')
'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')
' → logprob: -0.3132742643356323
    2. ')' → logprob: -1.3132742643356323
    3. '   ' → logprob: -12.063274383544922
    4. ')
' → logprob: -12.063274383544922
    5. ')

' → logprob: -14.313274383544922
    6. ' )
' → logprob: -15.188274383544922
    7. ' ' → logprob: -17.063274383544922
    8. ' )' → logprob: -17.813274383544922
    9. ')`
' → logprob: -17.813274383544922
    10. 'result' → logprob: -18.938274383544922

Token 180: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.02437904290854931
    2. '
' → logprob: -3.774379014968872
    3. 'print' → logprob: -7.149379253387451
    4. '    
' → logprob: -8.149378776550293
    5. '	print' → logprob: -11.274378776550293
    6. '```' → logprob: -11.524378776550293
    7. '
' → logprob: -11.649378776550293
    8. ' print' → logprob: -12.274378776550293
    9. '' → logprob: -12.774378776550293
    10. '  
' → logprob: -12.899378776550293

Token 181: ' print' (ID: 2123)
  Prédit: 'print'
  Correct (stricte): False
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'print' (adapté à ' print') → logprob: -0.005647782236337662
    2. '   ' → logprob: -5.755647659301758
    3. ' print' → logprob: -6.005647659301758
    4. '	print' → logprob: -13.755647659301758
    5. '(print' → logprob: -14.380647659301758
    6. '
' → logprob: -15.005647659301758
    7. '_print' → logprob: -16.005647659301758
    8. '.print' → logprob: -16.755647659301758
    9. '```' → logprob: -17.005647659301758
    10. '  ' → logprob: -17.630647659301758

Token 182: '_result' (ID: 11623)
  Prédit: '_result'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_result' → logprob: -5.200166469876422e-06
    2. '_' → logprob: -12.750004768371582
    3. '(' → logprob: -14.250004768371582
    4. '(_' → logprob: -14.375004768371582
    5. '(result' → logprob: -14.375004768371582
    6. '_results' → logprob: -16.1250057220459
    7. ' _' → logprob: -16.6250057220459
    8. '_RESULT' → logprob: -16.8750057220459
    9. '_(' → logprob: -16.8750057220459
    10. '```' → logprob: -16.8750057220459

Token 183: '(result' (ID: 8111)
  Prédit: '(result'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(result' → logprob: -0.0009125363430939615
    2. '(' → logprob: -7.000912666320801
    3. ' (' → logprob: -14.2509126663208
    4. '(results' → logprob: -15.3759126663208
    5. '(resultado' → logprob: -17.000911712646484
    6. '(Result' → logprob: -17.125911712646484
    7. '(res' → logprob: -17.250911712646484
    8. 'result' → logprob: -17.625911712646484
    9. '(
' → logprob: -17.875911712646484
    10. '=result' → logprob: -18.125911712646484

Token 184: ')

' (ID: 1029)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')' → logprob: -3.531315314830863e-06
    2. ')
' → logprob: -13.250003814697266
    3. '()' → logprob: -13.625003814697266
    4. '())' → logprob: -14.750003814697266
    5. ' )' → logprob: -15.875003814697266
    6. '(' → logprob: -17.375003814697266
    7. ')

' → logprob: -17.625003814697266
    8. ')`' → logprob: -19.000003814697266
    9. '))' → logprob: -19.250003814697266
    10. '`)' → logprob: -19.875003814697266

Token 185: 'main' (ID: 7731)
  Prédit: 'if'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'if' → logprob: -0.004386082757264376
    2. '
' → logprob: -5.754385948181152
    3. 'main' → logprob: -6.754385948181152
    4. '\n' → logprob: -10.504385948181152
    5. ' if' → logprob: -12.504385948181152
    6. '\' → logprob: -12.754385948181152
    7. '  
' → logprob: -13.129385948181152
    8. '    
' → logprob: -13.629385948181152
    9. '```' → logprob: -13.629385948181152
    10. '(main' → logprob: -13.879385948181152

Token 186: '()' (ID: 416)
  Prédit: '()'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '()' → logprob: -0.012536612339317799
    2. '(' → logprob: -4.387536525726318
    3. '()
' → logprob: -10.887537002563477
    4. '(
' → logprob: -12.762537002563477
    5. '()`' → logprob: -14.012537002563477
    6. '();' → logprob: -14.137537002563477
    7. '()

' → logprob: -14.137537002563477
    8. '#' → logprob: -14.262537002563477
    9. ' ()' → logprob: -14.637537002563477
    10. '```' → logprob: -14.637537002563477


RÉSUMÉ:
--------------------------------------------------------------------------------
Total des tokens analysés: 184
Tokens correctement prédits (1ère position, stricte): 88
Tokens correctement prédits (1ère position, avec adaptation): 94
Tokens correctement prédits (top 10): 164
Précision stricte (1ère position): 47.83%
Précision adaptée (1ère position): 51.09%
Précision (top 10): 89.13%
================================================================================
