================================================================================
ANALYSE DE PRÉDICTION TOKEN PAR TOKEN (BATCH API)
Date: 2025-06-04 19:43:43
Modèle de tokenisation: gpt-4o-mini
================================================================================

SCRIPT ANALYSÉ:
--------------------------------------------------------------------------------
n = int(input())
# On récupère la liste, je suppose qu'elle fait la bonne taille
lst = list(map(int, input().split()))
lst2 = []
for _ in range(n):
    lst2.append(0) # initialisation manuelle, je préfère voir ce qui se passe

for idx in range(n):
    v = lst[idx]
    # on place la valeur dans la nouvelle liste, j'espère que l'index existe
    lst2[v-1] = idx+1

# Affichage – j'utilise une boucle classique, c'est plus flexible
for j in range(n):
    if j < n-1:
        print(lst2[j], end=" ")
    else:
        print(lst2[j]) # et voilà, on finit par un print normal
--------------------------------------------------------------------------------

RÉSULTATS D'ANALYSE TOKEN PAR TOKEN:
--------------------------------------------------------------------------------
Token 0: 'n' (ID: 77)
  → Token d'amorce (pas de prédiction)

Token 1: ' =' (ID: 314)
  → Token d'amorce (pas de prédiction)

Token 2: ' int' (ID: 677)
  → Token d'amorce (pas de prédiction)

Token 3: '(input' (ID: 10054)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '(' → logprob: -0.00010807292710524052
    2. '(n' → logprob: -10.250107765197754
    3. ''' → logprob: -10.625107765197754
    4. '('' → logprob: -11.375107765197754
    5. '```' → logprob: -11.625107765197754
    6. '(
' → logprob: -12.000107765197754
    7. '("("' → logprob: -12.375107765197754
    8. '()' → logprob: -12.375107765197754
    9. '`' → logprob: -12.500107765197754
    10. ')' → logprob: -13.125107765197754

Token 4: '())
' (ID: 4574)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '(' → logprob: -0.03871168941259384
    2. ')' → logprob: -3.5387117862701416
    3. '()' → logprob: -4.9137115478515625
    4. '())' → logprob: -7.1637115478515625
    5. '(
' → logprob: -8.663711547851562
    6. '```' → logprob: -9.163711547851562
    7. '(()' → logprob: -9.413711547851562
    8. '("("' → logprob: -9.663711547851562
    9. '('' → logprob: -9.913711547851562
    10. '`' → logprob: -10.163711547851562

Token 5: '#' (ID: 2)
  Prédit: 'i'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'i' → logprob: -1.0521364212036133
    2. 'for' → logprob: -1.3021364212036133
    3. 'if' → logprob: -1.4271364212036133
    4. 's' → logprob: -3.1771364212036133
    5. 'f' → logprob: -4.177136421203613
    6. 'x' → logprob: -4.177136421203613
    7. 'a' → logprob: -4.552136421203613
    8. ')' → logprob: -4.677136421203613
    9. ' ' → logprob: -4.677136421203613
    10. '*' → logprob: -4.927136421203613

Token 6: ' On' (ID: 2160)
  Prédit: 's'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 's' → logprob: -0.2511606216430664
    2. ' result' → logprob: -2.8761606216430664
    3. 'result' → logprob: -3.3761606216430664
    4. ' s' → logprob: -3.5011606216430664
    5. ' for' → logprob: -3.6261606216430664
    6. 'for' → logprob: -4.001160621643066
    7. 'factor' → logprob: -4.751160621643066
    8. 'sum' → logprob: -4.876160621643066
    9. ' f' → logprob: -5.001160621643066
    10. ' factorial' → logprob: -5.251160621643066

Token 7: ' récup' (ID: 62856)
  Prédit: 'e'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'e' → logprob: -0.001473675831221044
    2. 'ly' → logprob: -8.001473426818848
    3. 'the' → logprob: -8.001473426818848
    4. 'es' → logprob: -8.126473426818848
    5. 'ext' → logprob: -9.376473426818848
    6. '=' → logprob: -9.376473426818848
    7. 't' → logprob: -9.751473426818848
    8. ' e' → logprob: -10.001473426818848
    9. '(e' → logprob: -10.126473426818848
    10. '_e' → logprob: -10.126473426818848

Token 8: 'ère' (ID: 4346)
  Prédit: 'ère'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'ère' → logprob: -0.0008949052426032722
    2. 'ére' → logprob: -7.750895023345947
    3. '\' → logprob: -8.750894546508789
    4. 'è' → logprob: -9.375894546508789
    5. '#' → logprob: -9.500894546508789
    6. '`' → logprob: -10.625894546508789
    7. '```' → logprob: -11.000894546508789
    8. 'èr' → logprob: -11.250894546508789
    9. 'érer' → logprob: -11.875894546508789
    10. '_' → logprob: -11.875894546508789

Token 9: ' la' (ID: 557)
  Prédit: ' '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' ' → logprob: -0.03777199238538742
    2. ' l' → logprob: -3.9127719402313232
    3. 'l' → logprob: -4.662772178649902
    4. ' la' → logprob: -5.662772178649902
    5. '_' → logprob: -6.287772178649902
    6. ' ' → logprob: -6.787772178649902
    7. '  ' → logprob: -8.162772178649902
    8. 's' → logprob: -8.662772178649902
    9. ' une' → logprob: -9.162772178649902
    10. 'n' → logprob: -9.412772178649902

Token 10: ' liste' (ID: 31719)
  Prédit: ' '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' ' → logprob: -1.9399374723434448
    2. 's' → logprob: -2.1899375915527344
    3. 'ligne' → logprob: -2.1899375915527344
    4. ' ligne' → logprob: -2.3149375915527344
    5. ' chaîne' → logprob: -2.3149375915527344
    6. 'chaine' → logprob: -2.5649375915527344
    7. 'l' → logprob: -3.0649375915527344
    8. ' valeur' → logprob: -3.0649375915527344
    9. 'entrée' → logprob: -3.1899375915527344
    10. 'val' → logprob: -3.3149375915527344

Token 11: ',' (ID: 11)
  Prédit: 'l'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'l' → logprob: -0.1423475444316864
    2. '_l' → logprob: -3.142347574234009
    3. 'lst' → logprob: -3.517347574234009
    4. 's' → logprob: -4.01734733581543
    5. 'liste' → logprob: -4.51734733581543
    6. 'data' → logprob: -5.26734733581543
    7. '_' → logprob: -5.39234733581543
    8. 'n' → logprob: -6.01734733581543
    9. 'L' → logprob: -6.26734733581543
    10. 'li' → logprob: -6.39234733581543

Token 12: ' je' (ID: 1264)
  Prédit: ' lst'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' lst' → logprob: -0.2994202971458435
    2. ' la' → logprob: -1.9244203567504883
    3. 'lst' → logprob: -3.4244203567504883
    4. ' l' → logprob: -3.5494203567504883
    5. 'l' → logprob: -4.299420356750488
    6. ' liste' → logprob: -5.174420356750488
    7. 'liste' → logprob: -5.424420356750488
    8. ' data' → logprob: -5.549420356750488
    9. 's' → logprob: -5.799420356750488
    10. ' L' → logprob: -5.799420356750488

Token 13: ' suppose' (ID: 35968)
  Prédit: 'n'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'n' → logprob: -0.5480875372886658
    2. 's' → logprob: -2.2980875968933105
    3. 'nt' → logprob: -2.7980875968933105
    4. '_' → logprob: -3.0480875968933105
    5. 'l' → logprob: -3.1730875968933105
    6. 'la' → logprob: -4.0480875968933105
    7. 'e' → logprob: -4.1730875968933105
    8. 'ns' → logprob: -4.5480875968933105
    9. ' n' → logprob: -4.5480875968933105
    10. 'continue' → logprob: -4.6730875968933105

Token 14: ' qu' (ID: 474)
  Prédit: ' lst'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' lst' → logprob: -1.097133994102478
    2. 'lst' → logprob: -1.222133994102478
    3. 'liste' → logprob: -2.5971341133117676
    4. 's' → logprob: -2.9721341133117676
    5. 'l' → logprob: -3.0971341133117676
    6. 'ma' → logprob: -3.4721341133117676
    7. ' ma' → logprob: -3.5971341133117676
    8. 'numbers' → logprob: -3.5971341133117676
    9. 'data' → logprob: -4.097134113311768
    10. ' l' → logprob: -4.222134113311768

Token 15: ''elle' (ID: 36421)
  Prédit: 'e'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'e' → logprob: -0.4571940004825592
    2. ''' → logprob: -1.2071939706802368
    3. ''elle' → logprob: -3.3321940898895264
    4. 'u' → logprob: -4.082193851470947
    5. ''e' → logprob: -5.207193851470947
    6. 'ue' → logprob: -5.707193851470947
    7. ''u' → logprob: -5.957193851470947
    8. ''on' → logprob: -7.082193851470947
    9. ''il' → logprob: -7.207193851470947
    10. ''a' → logprob: -7.332193851470947

Token 16: ' fait' (ID: 7473)
  Prédit: 's'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 's' → logprob: -0.5631105303764343
    2. '_' → logprob: -1.813110589981079
    3. ' ' → logprob: -2.563110589981079
    4. ' n' → logprob: -3.188110589981079
    5. ' =' → logprob: -4.0631103515625
    6. '[' → logprob: -4.1881103515625
    7. ' est' → logprob: -4.3131103515625
    8. ' s' → logprob: -4.3131103515625
    9. ' a' → logprob: -4.5631103515625
    10. 'n' → logprob: -4.6881103515625

Token 17: ' la' (ID: 557)
  Prédit: 's'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 's' → logprob: -1.699968934059143
    2. ' ' → logprob: -2.0749688148498535
    3. ' la' → logprob: -2.1999688148498535
    4. ' n' → logprob: -2.3249688148498535
    5. 'len' → logprob: -2.9499688148498535
    6. ':' → logprob: -3.1999688148498535
    7. '```' → logprob: -3.3249688148498535
    8. ' len' → logprob: -3.5749688148498535
    9. 'space' → logprob: -3.5749688148498535
    10. ' l' → logprob: -3.6999688148498535

Token 18: ' bonne' (ID: 24450)
  Prédit: 'm'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'm' → logprob: -0.1452890783548355
    2. ' même' → logprob: -2.270289182662964
    3. 'tail' → logprob: -4.145288944244385
    4. 'suite' → logprob: -5.145288944244385
    5. ' suite' → logprob: -6.145288944244385
    6. ' m' → logprob: -6.145288944244385
    7. 'mé' → logprob: -6.520288944244385
    8. 'n' → logprob: -7.270288944244385
    9. 's' → logprob: -7.645288944244385
    10. 'ligne' → logprob: -7.770288944244385

Token 19: ' taille' (ID: 41644)
  Prédit: 'tail'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'tail' → logprob: -0.21467909216880798
    2. ' taille' → logprob: -2.589679002761841
    3. 'range' → logprob: -3.089679002761841
    4. 's' → logprob: -3.714679002761841
    5. 'n' → logprob: -4.96467924118042
    6. 'liste' → logprob: -5.21467924118042
    7. 't' → logprob: -5.46467924118042
    8. 'entrée' → logprob: -5.58967924118042
    9. ' range' → logprob: -5.96467924118042
    10. '[' → logprob: -6.08967924118042

Token 20: '
' (ID: 198)
  Prédit: 'l'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'l' → logprob: -0.9184286594390869
    2. 'lst' → logprob: -1.418428659439087
    3. 'liste' → logprob: -1.918428659439087
    4. 'a' → logprob: -3.043428659439087
    5. ' lst' → logprob: -3.543428659439087
    6. 'list' → logprob: -3.793428659439087
    7. ' l' → logprob: -4.043428421020508
    8. 's' → logprob: -4.043428421020508
    9. 'n' → logprob: -4.293428421020508
    10. 'data' → logprob: -4.918428421020508

Token 21: 'lst' (ID: 65430)
  Prédit: 'a'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'a' → logprob: -0.9831382632255554
    2. 'l' → logprob: -1.3581383228302002
    3. 's' → logprob: -2.6081383228302
    4. ' lst' → logprob: -2.6081383228302
    5. 'lst' → logprob: -2.7331383228302
    6. ' l' → logprob: -3.7331383228302
    7. 'numbers' → logprob: -3.8581383228302
    8. ' a' → logprob: -4.358138084411621
    9. 'liste' → logprob: -4.358138084411621
    10. 'arr' → logprob: -4.608138084411621

Token 22: ' =' (ID: 314)
  Prédit: '['
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '[' → logprob: -0.23076777160167694
    2. '=' → logprob: -2.4807677268981934
    3. '.' → logprob: -2.7307677268981934
    4. ' =' → logprob: -2.9807677268981934
    5. '[:]' → logprob: -5.855767726898193
    6. 's' → logprob: -6.605767726898193
    7. '_' → logprob: -7.230767726898193
    8. '.append' → logprob: -7.730767726898193
    9. ')' → logprob: -8.230768203735352
    10. ',' → logprob: -8.605768203735352

Token 23: ' list' (ID: 1562)
  Prédit: 'list'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'list' → logprob: -0.1051936149597168
    2. ' list' → logprob: -2.355193614959717
    3. '[list' → logprob: -6.105193614959717
    4. '[' → logprob: -6.480193614959717
    5. ' [' → logprob: -7.730193614959717
    6. 'input' → logprob: -7.980193614959717
    7. '[input' → logprob: -8.105194091796875
    8. '[int' → logprob: -10.105194091796875
    9. 'lst' → logprob: -10.480194091796875
    10. ' input' → logprob: -10.730194091796875

Token 24: '(map' (ID: 16946)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(' → logprob: -0.007032319903373718
    2. '(input' → logprob: -5.00703239440918
    3. '(int' → logprob: -8.25703239440918
    4. '()' → logprob: -10.88203239440918
    5. '(eval' → logprob: -11.50703239440918
    6. '(s' → logprob: -11.63203239440918
    7. '(map' → logprob: -12.38203239440918
    8. '(range' → logprob: -12.63203239440918
    9. '(

' → logprob: -12.88203239440918
    10. '(
' → logprob: -12.88203239440918

Token 25: '(int' (ID: 2742)
  Prédit: '(int'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(int' → logprob: -0.023543136194348335
    2. '(' → logprob: -3.773543119430542
    3. 'int' → logprob: -9.273543357849121
    4. '(input' → logprob: -9.273543357849121
    5. '(str' → logprob: -9.398543357849121
    6. '(
' → logprob: -11.898543357849121
    7. '<int' → logprob: -12.148543357849121
    8. '(lambda' → logprob: -12.523543357849121
    9. '=int' → logprob: -12.523543357849121
    10. ' (' → logprob: -13.398543357849121

Token 26: ',' (ID: 11)
  Prédit: '(input'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(input' → logprob: -0.006314820144325495
    2. ',input' → logprob: -5.381314754486084
    3. '(' → logprob: -6.881314754486084
    4. 'input' → logprob: -7.631314754486084
    5. ',' → logprob: -8.881315231323242
    6. '=input' → logprob: -10.881315231323242
    7. ')' → logprob: -11.756315231323242
    8. ' input' → logprob: -12.131315231323242
    9. '))' → logprob: -12.631315231323242
    10. '(
' → logprob: -13.381315231323242

Token 27: ' input' (ID: 3422)
  Prédit: 'input'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'input' → logprob: -0.10021260380744934
    2. ' input' → logprob: -2.350212574005127
    3. '(input' → logprob: -12.350213050842285
    4. ',input' → logprob: -14.100213050842285
    5. '	input' → logprob: -14.850213050842285
    6. ' ' → logprob: -15.725213050842285
    7. '=input' → logprob: -15.850213050842285
    8. ')' → logprob: -16.10021209716797
    9. '<input' → logprob: -17.47521209716797
    10. '_input' → logprob: -18.22521209716797

Token 28: '().' (ID: 1454)
  Prédit: '()'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '()' → logprob: -0.08360504359006882
    2. '(' → logprob: -3.4586050510406494
    3. '()))' → logprob: -3.7086050510406494
    4. '())' → logprob: -3.9586050510406494
    5. '().' → logprob: -6.33360481262207
    6. '()>' → logprob: -6.83360481262207
    7. '()));' → logprob: -6.95860481262207
    8. '())))' → logprob: -8.08360481262207
    9. '(()' → logprob: -8.33360481262207
    10. ')' → logprob: -9.08360481262207

Token 29: 'split' (ID: 13627)
  Prédit: 'split'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'split' → logprob: -0.000561373308300972
    2. 'strip' → logprob: -7.500561237335205
    3. 'rstrip' → logprob: -11.875561714172363
    4. ' split' → logprob: -14.000561714172363
    5. '(split' → logprob: -14.625561714172363
    6. ')' → logprob: -17.000560760498047
    7. 'spl' → logprob: -17.000560760498047
    8. 's' → logprob: -18.000560760498047
    9. 'read' → logprob: -19.125560760498047
    10. 'replace' → logprob: -19.625560760498047

Token 30: '()))
' (ID: 24521)
  Prédit: '())'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '())' → logprob: -1.2076592445373535
    2. '()))' → logprob: -1.2076592445373535
    3. ')' → logprob: -1.7076592445373535
    4. '(' → logprob: -2.2076592445373535
    5. '))' → logprob: -2.5826592445373535
    6. '()' → logprob: -3.5826592445373535
    7. ')))' → logprob: -5.3326592445373535
    8. '())))' → logprob: -6.2076592445373535
    9. '('' → logprob: -7.8326592445373535
    10. '(
' → logprob: -9.707658767700195

Token 31: 'lst' (ID: 65430)
  Prédit: 'for'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'for' → logprob: -0.8011467456817627
    2. '#' → logprob: -1.5511467456817627
    3. 's' → logprob: -1.6761467456817627
    4. ')' → logprob: -3.8011467456817627
    5. '.' → logprob: -4.176146507263184
    6. 'r' → logprob: -4.301146507263184
    7. 'c' → logprob: -4.301146507263184
    8. 'f' → logprob: -4.301146507263184
    9. '
' → logprob: -4.926146507263184
    10. 'i' → logprob: -5.051146507263184

Token 32: '2' (ID: 17)
  Prédit: '['
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '[' → logprob: -0.07986164838075638
    2. '<|end|>' → logprob: -2.704861640930176
    3. '.' → logprob: -5.704861640930176
    4. '```' → logprob: -6.079861640930176
    5. '\[' → logprob: -6.704861640930176
    6. '<|end|>' → logprob: -7.329861640930176
    7. '[n' → logprob: -7.954861640930176
    8. ')' → logprob: -7.954861640930176
    9. '[:]' → logprob: -8.454861640930176
    10. '[]' → logprob: -8.579861640930176

Token 33: ' =' (ID: 314)
  Prédit: '.'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '.' → logprob: -0.4599251449108124
    2. '[' → logprob: -2.0849251747131348
    3. '.append' → logprob: -2.2099251747131348
    4. '=' → logprob: -2.4599251747131348
    5. ' =' → logprob: -3.9599251747131348
    6. '[:]' → logprob: -4.709925174713135
    7. '.extend' → logprob: -5.209925174713135
    8. '(' → logprob: -6.084925174713135
    9. '_' → logprob: -6.209925174713135
    10. '.insert' → logprob: -6.334925174713135

Token 34: ' []
' (ID: 8911)
  Prédit: '[]'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '[]' → logprob: -0.16482923924922943
    2. 'lst' → logprob: -2.5398292541503906
    3. ' []' → logprob: -3.6648292541503906
    4. '[' → logprob: -3.7898292541503906
    5. 'list' → logprob: -4.664829254150391
    6. 'sorted' → logprob: -4.789829254150391
    7. ' [' → logprob: -5.664829254150391
    8. ' lst' → logprob: -6.414829254150391
    9. ' sorted' → logprob: -7.664829254150391
    10. '[list' → logprob: -7.914829254150391

Token 35: 'for' (ID: 1938)
  Prédit: 'for'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'for' → logprob: -0.057386405766010284
    2. 'f' → logprob: -2.9323863983154297
    3. ' for' → logprob: -6.43238639831543
    4. 'i' → logprob: -7.80738639831543
    5. 'F' → logprob: -9.68238639831543
    6. '
' → logprob: -9.68238639831543
    7. 'n' → logprob: -9.80738639831543
    8. ')' → logprob: -10.18238639831543
    9. '[' → logprob: -10.30738639831543
    10. '=' → logprob: -10.30738639831543

Token 36: ' _' (ID: 1175)
  Prédit: ' i'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' i' → logprob: -0.05509035661816597
    2. ' ' → logprob: -3.0550904273986816
    3. 'i' → logprob: -5.680090427398682
    4. ' _' → logprob: -6.555090427398682
    5. '_' → logprob: -6.805090427398682
    6. ' x' → logprob: -8.055089950561523
    7. ' n' → logprob: -9.555089950561523
    8. '  ' → logprob: -9.930089950561523
    9. ' e' → logprob: -10.180089950561523
    10. ' ' → logprob: -10.680089950561523

Token 37: ' in' (ID: 306)
  Prédit: ' in'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' in' → logprob: -0.012830639258027077
    2. 'in' → logprob: -4.38783073425293
    3. ' ' → logprob: -8.38783073425293
    4. '_' → logprob: -10.38783073425293
    5. '  ' → logprob: -11.13783073425293
    6. 'n' → logprob: -11.26283073425293
    7. ' _' → logprob: -11.38783073425293
    8. 'range' → logprob: -11.63783073425293
    9. ' i' → logprob: -12.13783073425293
    10. ' ' → logprob: -13.88783073425293

Token 38: ' range' (ID: 3352)
  Prédit: 'range'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'range' → logprob: -0.011087555438280106
    2. ' range' → logprob: -4.511087417602539
    3. 'lst' → logprob: -10.261087417602539
    4. 'rang' → logprob: -13.761087417602539
    5. 'ran' → logprob: -14.136087417602539
    6. ' lst' → logprob: -14.386087417602539
    7. '(range' → logprob: -14.511087417602539
    8. '	range' → logprob: -14.636087417602539
    9. '```' → logprob: -15.011087417602539
    10. 'n' → logprob: -15.386087417602539

Token 39: '(n' (ID: 2406)
  Prédit: '(n'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(n' → logprob: -0.0019355426775291562
    2. '(' → logprob: -6.2519354820251465
    3. ' (' → logprob: -12.126935958862305
    4. 'n' → logprob: -14.126935958862305
    5. ' n' → logprob: -14.876935958862305
    6. '(s' → logprob: -16.126935958862305
    7. '(len' → logprob: -16.376935958862305
    8. '(
' → logprob: -17.126935958862305
    9. '()' → logprob: -17.251935958862305
    10. '(range' → logprob: -17.376935958862305

Token 40: '):
' (ID: 1883)
  Prédit: '):'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '):' → logprob: -0.022531600669026375
    2. ' ):' → logprob: -4.147531509399414
    3. ')' → logprob: -5.147531509399414
    4. ':' → logprob: -8.272531509399414
    5. ' )' → logprob: -8.897531509399414
    6. '+' → logprob: -8.897531509399414
    7. '):
' → logprob: -9.522531509399414
    8. ' :' → logprob: -10.397531509399414
    9. '-' → logprob: -11.522531509399414
    10. '*' → logprob: -12.522531509399414

Token 41: '   ' (ID: 271)
  Prédit: ' lst'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' lst' → logprob: -0.17102929949760437
    2. '   ' → logprob: -2.0460293292999268
    3. 'lst' → logprob: -3.9210293292999268
    4. ' ' → logprob: -5.921029090881348
    5. '    
' → logprob: -6.171029090881348
    6. '    ' → logprob: -6.671029090881348
    7. ' 
' → logprob: -6.796029090881348
    8. '```' → logprob: -8.796029090881348
    9. '     
' → logprob: -9.046029090881348
    10. ' ```' → logprob: -9.796029090881348

Token 42: ' lst' (ID: 33384)
  Prédit: 'lst'
  Correct (stricte): False
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'lst' (adapté à ' lst') → logprob: -0.13569119572639465
    2. ' lst' → logprob: -2.2606911659240723
    3. 'x' → logprob: -4.635691165924072
    4. 'i' → logprob: -6.135691165924072
    5. '   ' → logprob: -6.135691165924072
    6. 'val' → logprob: -6.635691165924072
    7. 'a' → logprob: -7.260691165924072
    8. ' ' → logprob: -7.260691165924072
    9. '0' → logprob: -7.260691165924072
    10. 'v' → logprob: -7.385691165924072

Token 43: '2' (ID: 17)
  Prédit: '2'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '2' → logprob: -0.009274906478822231
    2. '.append' → logprob: -4.759274959564209
    3. '[' → logprob: -8.00927448272705
    4. '.' → logprob: -8.63427448272705
    5. '.pop' → logprob: -10.00927448272705
    6. '.extend' → logprob: -10.25927448272705
    7. '[i' → logprob: -11.13427448272705
    8. '_' → logprob: -11.50927448272705
    9. '[-' → logprob: -11.88427448272705
    10. '.insert' → logprob: -12.00927448272705

Token 44: '.append' (ID: 3709)
  Prédit: '.append'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '.append' → logprob: -0.02358505316078663
    2. '.' → logprob: -3.773585081100464
    3. '.extend' → logprob: -8.023585319519043
    4. '.push' → logprob: -12.773585319519043
    5. 'append' → logprob: -12.898585319519043
    6. '.add' → logprob: -13.398585319519043
    7. '.insert' → logprob: -14.023585319519043
    8. '.app' → logprob: -14.273585319519043
    9. ' +=' → logprob: -14.273585319519043
    10. '.pop' → logprob: -14.523585319519043

Token 45: '(' (ID: 7)
  Prédit: '(lst'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(lst' → logprob: -0.3693479895591736
    2. '(' → logprob: -1.2443480491638184
    3. '(int' → logprob: -4.119348049163818
    4. 'lst' → logprob: -5.869348049163818
    5. '((' → logprob: -7.494348049163818
    6. '(
' → logprob: -8.99434757232666
    7. '(max' → logprob: -9.11934757232666
    8. '(list' → logprob: -9.24434757232666
    9. '(ls' → logprob: -9.36934757232666
    10. '0' → logprob: -9.86934757232666

Token 46: '0' (ID: 15)
  Prédit: 'int'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'int' → logprob: -0.4571569263935089
    2. 'lst' → logprob: -1.3321568965911865
    3. '0' → logprob: -2.4571568965911865
    4. ' int' → logprob: -5.082157135009766
    5. ' lst' → logprob: -5.832157135009766
    6. '[int' → logprob: -6.207157135009766
    7. 'list' → logprob: -6.707157135009766
    8. '(int' → logprob: -6.707157135009766
    9. '[]' → logprob: -6.832157135009766
    10. '[])' → logprob: -7.957157135009766

Token 47: ')' (ID: 8)
  Prédit: ')'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')' → logprob: -0.00015562419139314443
    2. ' )' → logprob: -9.375155448913574
    3. '))' → logprob: -9.875155448913574
    4. ')
' → logprob: -11.000155448913574
    5. ')))' → logprob: -14.750155448913574
    6. ']' → logprob: -14.875155448913574
    7. '+' → logprob: -15.250155448913574
    8. '`)' → logprob: -15.250155448913574
    9. '])' → logprob: -15.500155448913574
    10. '')' → logprob: -15.625155448913574

Token 48: ' #' (ID: 1069)
  Prédit: '
'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '
' → logprob: -1.1639630794525146
    2. '<|end|>' → logprob: -1.1639630794525146
    3. ' ' → logprob: -1.6639630794525146
    4. '[' → logprob: -3.0389630794525146
    5. 'for' → logprob: -3.6639630794525146
    6. '\n' → logprob: -3.9139630794525146
    7. ')' → logprob: -3.9139630794525146
    8. ' 
' → logprob: -3.9139630794525146
    9. 'n' → logprob: -4.413963317871094
    10. '#' → logprob: -5.288963317871094

Token 49: ' initial' (ID: 4871)
  Prédit: ' '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' ' → logprob: -0.308513879776001
    2. '<|end|>' → logprob: -1.433513879776001
    3. '\n' → logprob: -4.933513641357422
    4. ')' → logprob: -5.058513641357422
    5. '<|end|>' → logprob: -6.183513641357422
    6. '0' → logprob: -6.183513641357422
    7. '
' → logprob: -6.433513641357422
    8. ' 
' → logprob: -6.558513641357422
    9. '\' → logprob: -6.558513641357422
    10. '[' → logprob: -6.808513641357422

Token 50: 'isation' (ID: 6993)
  Prédit: ' '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' ' → logprob: -0.9550033211708069
    2. 'ize' → logprob: -1.330003261566162
    3. 'ization' → logprob: -1.955003261566162
    4. 'ized' → logprob: -2.580003261566162
    5. 'i' → logprob: -3.205003261566162
    6. 'e' → logprob: -3.455003261566162
    7. '_' → logprob: -4.080003261566162
    8. 'iz' → logprob: -4.830003261566162
    9. 'izing' → logprob: -4.955003261566162
    10. 'iser' → logprob: -5.455003261566162

Token 51: ' man' (ID: 873)
  Prédit: ''
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False

Token 52: 'uelle' (ID: 18079)
  Prédit: 't'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 't' → logprob: -0.1650519222021103
    2. 'uelle' → logprob: -2.0400519371032715
    3. 'uellement' → logprob: -4.1650519371032715
    4. 'agée' → logprob: -6.0400519371032715
    5. 'u' → logprob: -7.2900519371032715
    6. 'ière' → logprob: -7.6650519371032715
    7. 'ts' → logprob: -7.7900519371032715
    8. 'uée' → logprob: -7.9150519371032715
    9. 's' → logprob: -8.415051460266113
    10. 'nelle' → logprob: -8.415051460266113

Token 53: ',' (ID: 11)
  Prédit: 'for'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'for' → logprob: -1.2368465662002563
    2. '<|end|>' → logprob: -1.2368465662002563
    3. ' ' → logprob: -1.8618465662002563
    4. ' for' → logprob: -2.111846446990967
    5. '
' → logprob: -2.611846446990967
    6. ' 
' → logprob: -3.361846446990967
    7. '\n' → logprob: -4.486846446990967
    8. 'n' → logprob: -5.361846446990967
    9. '  
' → logprob: -5.736846446990967
    10. '[' → logprob: -5.736846446990967

Token 54: ' je' (ID: 1264)
  Prédit: ' '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' ' → logprob: -0.008251667954027653
    2. '<|end|>' → logprob: -5.133251667022705
    3. ' )' → logprob: -7.133251667022705
    4. ')' → logprob: -7.883251667022705
    5. '  ' → logprob: -8.133252143859863
    6. ''' → logprob: -8.383252143859863
    7. '<|end|>' → logprob: -8.758252143859863
    8. '0' → logprob: -8.883252143859863
    9. ' 
' → logprob: -9.758252143859863
    10. ' ,' → logprob: -10.133252143859863

Token 55: ' préfère' (ID: 141784)
  Prédit: ' préfère'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' préfère' → logprob: -0.22095662355422974
    2. 'f' → logprob: -3.220956563949585
    3. ' veux' → logprob: -3.595956563949585
    4. ' peux' → logprob: -3.720956563949585
    5. ' préf' → logprob: -4.595956802368164
    6. 'pré' → logprob: -4.970956802368164
    7. 'for' → logprob: -5.095956802368164
    8. 's' → logprob: -5.095956802368164
    9. ' continue' → logprob: -5.095956802368164
    10. ' pense' → logprob: -5.220956802368164

Token 56: ' voir' (ID: 20611)
  Prédit: ''
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False

Token 57: ' ce' (ID: 2357)
  Prédit: ''
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False

Token 58: ' qui' (ID: 2780)
  Prédit: '_'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '_' → logprob: -0.28374114632606506
    2. 's' → logprob: -2.7837412357330322
    3. 'ci' → logprob: -3.0337412357330322
    4. ' que' → logprob: -3.2837412357330322
    5. 'que' → logprob: -3.4087412357330322
    6. 'code' → logprob: -4.408740997314453
    7. 'n' → logprob: -4.908740997314453
    8. ' code' → logprob: -4.908740997314453
    9. '0' → logprob: -5.283740997314453
    10. 'qui' → logprob: -5.408740997314453

Token 59: ' se' (ID: 458)
  Prédit: ' se'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' se' → logprob: -0.5026387572288513
    2. 'se' → logprob: -1.002638816833496
    3. ' ' → logprob: -4.252638816833496
    4. 's' → logprob: -5.252638816833496
    5. ' happens' → logprob: -6.252638816833496
    6. ' happen' → logprob: -6.877638816833496
    7. ''arrive' → logprob: -7.002638816833496
    8. ' va' → logprob: -7.127638816833496
    9. 'arr' → logprob: -7.252638816833496
    10. ' arrive' → logprob: -8.002638816833496

Token 60: ' passe' (ID: 22210)
  Prédit: ' passe'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' passe' → logprob: -0.01945144310593605
    2. 'pass' → logprob: -5.01945161819458
    3. 'p' → logprob: -5.26945161819458
    4. 'f' → logprob: -6.26945161819458
    5. 'se' → logprob: -6.76945161819458
    6. ' fait' → logprob: -7.26945161819458
    7. ' ' → logprob: -7.26945161819458
    8. ' se' → logprob: -7.64445161819458
    9. '_' → logprob: -7.89445161819458
    10. ' pass' → logprob: -7.89445161819458

Token 61: '

' (ID: 279)
  Prédit: ' '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' ' → logprob: -1.1252177953720093
    2. 'for' → logprob: -1.1252177953720093
    3. '\n' → logprob: -2.250217914581299
    4. ' 
' → logprob: -2.375217914581299
    5. ' for' → logprob: -3.000217914581299
    6. '\' → logprob: -3.875217914581299
    7. '<|end|>' → logprob: -4.000217914581299
    8. '  
' → logprob: -4.500217914581299
    9. 'n' → logprob: -4.875217914581299
    10. '[' → logprob: -5.000217914581299

Token 62: 'for' (ID: 1938)
  Prédit: 'for'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'for' → logprob: -0.318361759185791
    2. ' for' → logprob: -1.568361759185791
    3. '
' → logprob: -2.818361759185791
    4. '\n' → logprob: -5.943361759185791
    5. ' 
' → logprob: -7.318361759185791
    6. 'n' → logprob: -8.193361282348633
    7. ' ' → logprob: -8.318361282348633
    8. '  
' → logprob: -8.568361282348633
    9. '0' → logprob: -9.193361282348633
    10. '```' → logprob: -9.693361282348633

Token 63: ' idx' (ID: 14016)
  Prédit: ' i'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' i' → logprob: -0.11146233230829239
    2. ' ' → logprob: -2.486462354660034
    3. ' _' → logprob: -3.861462354660034
    4. '_' → logprob: -7.111462116241455
    5. 'i' → logprob: -8.111462593078613
    6. '  ' → logprob: -9.861462593078613
    7. ' ' → logprob: -10.611462593078613
    8. ' lst' → logprob: -10.986462593078613
    9. ' ‌' → logprob: -12.111462593078613
    10. ' n' → logprob: -12.361462593078613

Token 64: ' in' (ID: 306)
  Prédit: ' in'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' in' → logprob: -0.03136042132973671
    2. 'in' → logprob: -3.531360387802124
    3. ' ' → logprob: -6.531360626220703
    4. ',' → logprob: -9.156360626220703
    5. '_' → logprob: -11.656360626220703
    6. ' ,' → logprob: -11.781360626220703
    7. '  ' → logprob: -12.156360626220703
    8. 's' → logprob: -12.406360626220703
    9. '+' → logprob: -12.906360626220703
    10. ' ' → logprob: -13.156360626220703

Token 65: ' range' (ID: 3352)
  Prédit: ' range'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' range' → logprob: -0.3132769465446472
    2. 'range' → logprob: -1.313277006149292
    3. '	range' → logprob: -11.938277244567871
    4. '(range' → logprob: -13.063277244567871
    5. ' ' → logprob: -13.313277244567871
    6. 'lst' → logprob: -13.813277244567871
    7. ' lst' → logprob: -14.313277244567871
    8. 'rang' → logprob: -14.438277244567871
    9. ' xrange' → logprob: -14.438277244567871
    10. '```' → logprob: -15.188277244567871

Token 66: '(n' (ID: 2406)
  Prédit: '(n'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(n' → logprob: -0.25238367915153503
    2. '(' → logprob: -1.5023837089538574
    3. '(len' → logprob: -8.1273832321167
    4. ' (' → logprob: -8.7523832321167
    5. ' n' → logprob: -15.0023832321167
    6. '(s' → logprob: -15.1273832321167
    7. '(
' → logprob: -16.002384185791016
    8. '()' → logprob: -16.502384185791016
    9. '(

' → logprob: -16.877384185791016
    10. '(length' → logprob: -17.252384185791016

Token 67: '):
' (ID: 1883)
  Prédit: '):'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '):' → logprob: -0.003553385380655527
    2. ')' → logprob: -6.12855339050293
    3. ' ):' → logprob: -6.62855339050293
    4. '):
' → logprob: -11.00355339050293
    5. ':' → logprob: -11.00355339050293
    6. ' )' → logprob: -12.12855339050293
    7. '+' → logprob: -12.62855339050293
    8. '   ' → logprob: -13.87855339050293
    9. ' ' → logprob: -14.75355339050293
    10. ']:' → logprob: -15.25355339050293

Token 68: '   ' (ID: 271)
  Prédit: ' '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' ' → logprob: -0.16954931616783142
    2. ' lst' → logprob: -2.7945492267608643
    3. '   ' → logprob: -2.9195492267608643
    4. '    ' → logprob: -3.5445492267608643
    5. ' if' → logprob: -5.294549465179443
    6. '<|end|>' → logprob: -6.294549465179443
    7. 'lst' → logprob: -6.544549465179443
    8. ' :' → logprob: -7.669549465179443
    9. '     
' → logprob: -7.794549465179443
    10. ':' → logprob: -7.794549465179443

Token 69: ' v' (ID: 323)
  Prédit: ' if'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' if' → logprob: -0.5073692202568054
    2. ' lst' → logprob: -1.5073692798614502
    3. 'lst' → logprob: -2.88236927986145
    4. 'if' → logprob: -3.00736927986145
    5. ' for' → logprob: -3.00736927986145
    6. '   ' → logprob: -4.882369041442871
    7. 'for' → logprob: -5.007369041442871
    8. ' ' → logprob: -5.382369041442871
    9. ' i' → logprob: -7.882369041442871
    10. '  ' → logprob: -8.007369041442871

Token 70: ' =' (ID: 314)
  Prédit: 'al'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'al' → logprob: -1.1489404439926147
    2. 'a' → logprob: -1.2739404439926147
    3. ' =' → logprob: -1.3989404439926147
    4. '=' → logprob: -1.8989404439926147
    5. 'alue' → logprob: -5.773940563201904
    6. '   ' → logprob: -7.648940563201904
    7. ' ' → logprob: -7.773940563201904
    8. 'ale' → logprob: -8.148940086364746
    9. ',' → logprob: -8.273940086364746
    10. '_' → logprob: -8.273940086364746

Token 71: ' lst' (ID: 33384)
  Prédit: ' lst'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' lst' → logprob: -0.47432705760002136
    2. 'lst' → logprob: -0.9743270874023438
    3. '   ' → logprob: -10.099327087402344
    4. '0' → logprob: -10.599327087402344
    5. '(lst' → logprob: -10.724327087402344
    6. ' n' → logprob: -10.974327087402344
    7. ' ' → logprob: -10.974327087402344
    8. 'n' → logprob: -11.099327087402344
    9. ' idx' → logprob: -11.349327087402344
    10. 'idx' → logprob: -11.349327087402344

Token 72: '[idx' (ID: 25582)
  Prédit: '[idx'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '[idx' → logprob: -0.013184230774641037
    2. '2' → logprob: -4.638184070587158
    3. '[' → logprob: -5.763184070587158
    4. ' [' → logprob: -8.763184547424316
    5. '[val' → logprob: -10.388184547424316
    6. '[index' → logprob: -11.013184547424316
    7. '[i' → logprob: -11.513184547424316
    8. '[v' → logprob: -11.763184547424316
    9. '```' → logprob: -11.763184547424316
    10. '[ind' → logprob: -11.888184547424316

Token 73: ']
' (ID: 1592)
  Prédit: ']'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ']' → logprob: -0.05667635425925255
    2. '])' → logprob: -3.9316763877868652
    3. ']
' → logprob: -3.9316763877868652
    4. ')' → logprob: -4.681676387786865
    5. ']+' → logprob: -5.556676387786865
    6. ')
' → logprob: -6.681676387786865
    7. '])
' → logprob: -7.431676387786865
    8. '+' → logprob: -8.306675910949707
    9. ']*' → logprob: -8.681675910949707
    10. '-' → logprob: -8.681675910949707

Token 74: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.6839281320571899
    2. ' if' → logprob: -1.30892813205719
    3. '    
' → logprob: -2.8089280128479004
    4. ' ' → logprob: -3.0589280128479004
    5. 'if' → logprob: -3.3089280128479004
    6. ' 
' → logprob: -3.6839280128479004
    7. '   
' → logprob: -4.1839280128479
    8. '  
' → logprob: -4.1839280128479
    9. '<|end|>' → logprob: -4.9339280128479
    10. '
' → logprob: -5.4339280128479

Token 75: ' #' (ID: 1069)
  Prédit: 'if'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'if' → logprob: -0.4181228280067444
    2. 'lst' → logprob: -1.2931227684020996
    3. 'for' → logprob: -3.1681227684020996
    4. ' if' → logprob: -3.9181227684020996
    5. ' for' → logprob: -6.1681227684021
    6. ' lst' → logprob: -6.6681227684021
    7. '   ' → logprob: -6.9181227684021
    8. ' ' → logprob: -8.418123245239258
    9. 'count' → logprob: -8.543123245239258
    10. 'idx' → logprob: -8.668123245239258

Token 76: ' on' (ID: 402)
  Prédit: ' if'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' if' → logprob: -0.6677349805831909
    2. 'if' → logprob: -0.9177349805831909
    3. 'lst' → logprob: -3.2927350997924805
    4. ' lst' → logprob: -3.6677350997924805
    5. ' for' → logprob: -4.4177350997924805
    6. 'for' → logprob: -4.4177350997924805
    7. ' ' → logprob: -8.54273509979248
    8. ' while' → logprob: -9.04273509979248
    9. 'while' → logprob: -9.48023509979248
    10. '   ' → logprob: -9.91773509979248

Token 77: ' place' (ID: 2475)
  Prédit: 'if'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'if' → logprob: -0.8975356817245483
    2. ' if' → logprob: -0.8975356817245483
    3. 'for' → logprob: -2.397535800933838
    4. ' for' → logprob: -2.897535800933838
    5. '2' → logprob: -3.647535800933838
    6. ' ' → logprob: -5.772535800933838
    7. 's' → logprob: -6.147535800933838
    8. ' =' → logprob: -6.272535800933838
    9. 't' → logprob: -7.147535800933838
    10. '#' → logprob: -7.397535800933838

Token 78: ' la' (ID: 557)
  Prédit: 'v'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'v' → logprob: -0.49212712049484253
    2. ' v' → logprob: -1.7421271800994873
    3. ' lst' → logprob: -2.3671271800994873
    4. 'lst' → logprob: -2.4921271800994873
    5. ' ' → logprob: -4.492126941680908
    6. ' dans' → logprob: -4.617126941680908
    7. ' at' → logprob: -6.367126941680908
    8. ' la' → logprob: -6.492126941680908
    9. 's' → logprob: -6.492126941680908
    10. ' au' → logprob: -6.742126941680908

Token 79: ' valeur' (ID: 41664)
  Prédit: 'val'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'val' → logprob: -0.015745626762509346
    2. ' valeur' → logprob: -4.890745639801025
    3. 'value' → logprob: -5.765745639801025
    4. 'v' → logprob: -5.890745639801025
    5. 'lst' → logprob: -7.390745639801025
    6. ' val' → logprob: -8.015745162963867
    7. 'bonne' → logprob: -8.390745162963867
    8. ' value' → logprob: -8.890745162963867
    9. ' ' → logprob: -9.015745162963867
    10. 'élé' → logprob: -9.265745162963867

Token 80: ' dans' (ID: 2671)
  Prédit: ' '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' ' → logprob: -0.9420444965362549
    2. ' lst' → logprob: -1.5670444965362549
    3. 'lst' → logprob: -1.8170444965362549
    4. ' at' → logprob: -2.442044496536255
    5. ' dans' → logprob: -2.817044496536255
    6. ' à' → logprob: -3.567044496536255
    7. ' au' → logprob: -4.692044258117676
    8. ' in' → logprob: -4.692044258117676
    9. 's' → logprob: -4.817044258117676
    10. '<|end|>' → logprob: -5.067044258117676

Token 81: ' la' (ID: 557)
  Prédit: ' lst'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' lst' → logprob: -0.039772868156433105
    2. 'lst' → logprob: -3.9147729873657227
    3. ' la' → logprob: -4.289772987365723
    4. ' ' → logprob: -5.664772987365723
    5. ' l' → logprob: -7.039772987365723
    6. '(lst' → logprob: -8.789772987365723
    7. ' sa' → logprob: -8.914772987365723
    8. ')' → logprob: -9.164772987365723
    9. 'l' → logprob: -9.289772987365723
    10. '_lst' → logprob: -9.539772987365723

Token 82: ' nouvelle' (ID: 24562)
  Prédit: ' bonne'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' bonne' → logprob: -0.8462051153182983
    2. 'lst' → logprob: -0.8462051153182983
    3. ' lst' → logprob: -2.096205234527588
    4. ' position' → logprob: -5.596205234527588
    5. 'bonne' → logprob: -5.846205234527588
    6. 'position' → logprob: -5.971205234527588
    7. ' good' → logprob: -5.971205234527588
    8. ' correct' → logprob: -7.096205234527588
    9. ' case' → logprob: -7.096205234527588
    10. ' ' → logprob: -7.221205234527588

Token 83: ' liste' (ID: 31719)
  Prédit: 'lst'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'lst' → logprob: -0.6339085102081299
    2. ' ' → logprob: -1.3839085102081299
    3. ' lst' → logprob: -1.7589085102081299
    4. '_' → logprob: -3.88390851020813
    5. '_lst' → logprob: -5.133908271789551
    6. 'liste' → logprob: -5.383908271789551
    7. ' liste' → logprob: -5.383908271789551
    8. '[' → logprob: -5.758908271789551
    9. ' list' → logprob: -6.383908271789551
    10. 'list' → logprob: -7.258908271789551

Token 84: ',' (ID: 11)
  Prédit: '['
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '[' → logprob: -0.11523035168647766
    2. ' ' → logprob: -2.9902303218841553
    3. 'lst' → logprob: -4.240230560302734
    4. '   ' → logprob: -4.490230560302734
    5. ' lst' → logprob: -4.615230560302734
    6. '[
' → logprob: -5.240230560302734
    7. ',' → logprob: -5.740230560302734
    8. ' 
' → logprob: -6.240230560302734
    9. '  
' → logprob: -6.490230560302734
    10. '   
' → logprob: -6.740230560302734

Token 85: ' j' (ID: 441)
  Prédit: ' lst'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' lst' → logprob: -0.6530089974403381
    2. ' ' → logprob: -1.1530089378356934
    3. 'lst' → logprob: -2.0280089378356934
    4. '    ' → logprob: -5.278008937835693
    5. 'space' → logprob: -5.528008937835693
    6. ' )' → logprob: -5.903008937835693
    7. ')' → logprob: -6.028008937835693
    8. ' v' → logprob: -6.278008937835693
    9. '   ' → logprob: -6.278008937835693
    10. ' espace' → logprob: -6.403008937835693

Token 86: ''espère' (ID: 116557)
  Prédit: 'e'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'e' → logprob: -0.06444988399744034
    2. 'uste' → logprob: -3.1894497871398926
    3. 'ust' → logprob: -4.439449787139893
    4. ''' → logprob: -5.689449787139893
    5. 'u' → logprob: -6.689449787139893
    6. 'i' → logprob: -6.814449787139893
    7. '')' → logprob: -7.064449787139893
    8. 'a' → logprob: -7.439449787139893
    9. ''espère' → logprob: -7.564449787139893
    10. '```' → logprob: -8.18945026397705

Token 87: ' que' (ID: 661)
  Prédit: '['
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '[' → logprob: -0.02984953112900257
    2. ' ' → logprob: -4.654849529266357
    3. '[
' → logprob: -4.654849529266357
    4. 'lst' → logprob: -5.779849529266357
    5. ']' → logprob: -6.654849529266357
    6. ')' → logprob: -6.904849529266357
    7. '```' → logprob: -7.654849529266357
    8. ',' → logprob: -7.779849529266357
    9. ' lst' → logprob: -7.779849529266357
    10. '  
' → logprob: -8.029850006103516

Token 88: ' l' (ID: 305)
  Prédit: ' lst'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' lst' → logprob: -0.09506671875715256
    2. 'lst' → logprob: -2.845066785812378
    3. ' idx' → logprob: -3.720066785812378
    4. ' v' → logprob: -5.345066547393799
    5. ' not' → logprob: -7.345066547393799
    6. ' n' → logprob: -7.595066547393799
    7. ' ' → logprob: -7.845066547393799
    8. ' ' → logprob: -8.220067024230957
    9. 'idx' → logprob: -8.220067024230957
    10. 'v' → logprob: -8.345067024230957

Token 89: ''' (ID: 6)
  Prédit: 'a'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'a' → logprob: -0.053686659783124924
    2. 'e' → logprob: -3.3036866188049316
    3. ''' → logprob: -4.803686618804932
    4. ''on' → logprob: -6.678686618804932
    5. 'lst' → logprob: -6.928686618804932
    6. ' lst' → logprob: -7.678686618804932
    7. ' '' → logprob: -7.678686618804932
    8. ' a' → logprob: -7.928686618804932
    9. ''espace' → logprob: -8.05368709564209
    10. '')' → logprob: -8.05368709564209

Token 90: 'index' (ID: 2257)
  Prédit: 'indice'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'indice' → logprob: -0.43975770473480225
    2. 'index' → logprob: -1.4397577047348022
    3. ''' → logprob: -3.814757823944092
    4. 'idx' → logprob: -4.064757823944092
    5. 'indent' → logprob: -4.439757823944092
    6. ''ind' → logprob: -4.439757823944092
    7. 'a' → logprob: -4.439757823944092
    8. 'ind' → logprob: -4.814757823944092
    9. 'ordre' → logprob: -5.814757823944092
    10. ' indice' → logprob: -6.064757823944092

Token 91: ' existe' (ID: 19498)
  Prédit: 'v'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'v' → logprob: -0.4953829050064087
    2. ' v' → logprob: -1.1203829050064087
    3. ')' → logprob: -3.745382785797119
    4. ' ' → logprob: -4.370382785797119
    5. 's' → logprob: -4.745382785797119
    6. 'lst' → logprob: -5.495382785797119
    7. '<|end|>' → logprob: -5.620382785797119
    8. ' est' → logprob: -6.495382785797119
    9. ' lst' → logprob: -6.620382785797119
    10. ' )' → logprob: -6.745382785797119

Token 92: '
' (ID: 198)
  Prédit: '['
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '[' → logprob: -0.39532649517059326
    2. ' ' → logprob: -1.3953264951705933
    3. 'lst' → logprob: -4.020326614379883
    4. ',' → logprob: -5.020326614379883
    5. '   ' → logprob: -5.145326614379883
    6. ' 
' → logprob: -5.270326614379883
    7. '  
' → logprob: -5.395326614379883
    8. ']' → logprob: -5.645326614379883
    9. 'v' → logprob: -5.645326614379883
    10. '   
' → logprob: -5.770326614379883

Token 93: '   ' (ID: 271)
  Prédit: 'lst'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'lst' → logprob: -0.6176442503929138
    2. ' lst' → logprob: -1.6176443099975586
    3. '[' → logprob: -2.1176443099975586
    4. '   ' → logprob: -3.2426443099975586
    5. ' ' → logprob: -3.8676443099975586
    6. ' 
' → logprob: -4.367644309997559
    7. ' =' → logprob: -4.492644309997559
    8. '[
' → logprob: -4.742644309997559
    9. ']' → logprob: -4.992644309997559
    10. '```' → logprob: -4.992644309997559

Token 94: ' lst' (ID: 33384)
  Prédit: 'lst'
  Correct (stricte): False
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'lst' (adapté à ' lst') → logprob: -0.34897562861442566
    2. ' lst' → logprob: -1.223975658416748
    3. '   ' → logprob: -8.34897518157959
    4. '_lst' → logprob: -9.34897518157959
    5. ' ' → logprob: -10.72397518157959
    6. ')' → logprob: -10.72397518157959
    7. '```' → logprob: -10.72397518157959
    8. 'idx' → logprob: -10.97397518157959
    9. '    ' → logprob: -10.97397518157959
    10. '[' → logprob: -11.34897518157959

Token 95: '2' (ID: 17)
  Prédit: '2'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '2' → logprob: -2.816093228830141e-06
    2. '[' → logprob: -14.12500286102295
    3. '```' → logprob: -14.37500286102295
    4. ' ' → logprob: -15.37500286102295
    5. '۲' → logprob: -15.56250286102295
    6. '٢' → logprob: -16.125001907348633
    7. '22' → logprob: -16.375001907348633
    8. 's' → logprob: -16.625001907348633
    9. '২' → logprob: -16.625001907348633
    10. '<|end|>' → logprob: -16.687501907348633

Token 96: '[v' (ID: 36561)
  Prédit: '[v'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '[v' → logprob: -0.07895521819591522
    2. '[' → logprob: -2.5789551734924316
    3. '[l' → logprob: -9.95395565032959
    4. '[val' → logprob: -11.95395565032959
    5. '[idx' → logprob: -13.20395565032959
    6. '[n' → logprob: -13.45395565032959
    7. '[
' → logprob: -13.45395565032959
    8. '[s' → logprob: -13.95395565032959
    9. ' [' → logprob: -13.95395565032959
    10. '```' → logprob: -14.07895565032959

Token 97: '-' (ID: 12)
  Prédit: ']'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ']' → logprob: -0.0010007746750488877
    2. ' ]' → logprob: -7.501000881195068
    3. ']=' → logprob: -7.876000881195068
    4. '])' → logprob: -11.00100040435791
    5. ']+=' → logprob: -11.00100040435791
    6. ')]' → logprob: -11.50100040435791
    7. '-' → logprob: -11.87600040435791
    8. ')' → logprob: -12.25100040435791
    9. '`]' → logprob: -12.87600040435791
    10. '[' → logprob: -13.00100040435791

Token 98: '1' (ID: 16)
  Prédit: '1'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '1' → logprob: -1.8074162653647363e-05
    2. ' ' → logprob: -11.125018119812012
    3. '<|end|>' → logprob: -12.875018119812012
    4. '`' → logprob: -15.875018119812012
    5. '```' → logprob: -16.062517166137695
    6. ']' → logprob: -16.375017166137695
    7. '>' → logprob: -16.375017166137695
    8. ')' → logprob: -16.937517166137695
    9. '   ' → logprob: -16.937517166137695
    10. '...' → logprob: -17.250017166137695

Token 99: ']' (ID: 60)
  Prédit: ']'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ']' → logprob: -0.0007681751740165055
    2. ']=' → logprob: -7.625768184661865
    3. ' ]' → logprob: -8.375767707824707
    4. '=' → logprob: -10.125767707824707
    5. ')' → logprob: -11.875767707824707
    6. ' =' → logprob: -13.125767707824707
    7. ']+=' → logprob: -14.750767707824707
    8. ' ' → logprob: -16.000768661499023
    9. '']' → logprob: -16.250768661499023
    10. '`]' → logprob: -17.250768661499023

Token 100: ' =' (ID: 314)
  Prédit: ' ='
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' =' → logprob: -0.3132668435573578
    2. '=' → logprob: -1.3132668733596802
    3. ' +=' → logprob: -13.43826675415039
    4. ' ' → logprob: -13.43826675415039
    5. ' =
' → logprob: -14.68826675415039
    6. ')' → logprob: -14.93826675415039
    7. ' ' → logprob: -15.68826675415039
    8. '=int' → logprob: -15.81326675415039
    9. '   ' → logprob: -15.93826675415039
    10. '+=' → logprob: -16.06326675415039

Token 101: ' idx' (ID: 14016)
  Prédit: 'idx'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'idx' → logprob: -0.009891253896057606
    2. ' idx' → logprob: -4.759891033172607
    3. 'v' → logprob: -7.134891033172607
    4. 'lst' → logprob: -7.884891033172607
    5. ' v' → logprob: -10.384891510009766
    6. '(idx' → logprob: -10.634891510009766
    7. 'val' → logprob: -11.259891510009766
    8. ' lst' → logprob: -11.634891510009766
    9. '	idx' → logprob: -12.134891510009766
    10. 'str' → logprob: -12.134891510009766

Token 102: '+' (ID: 10)
  Prédit: 'print'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'print' → logprob: -0.20633460581302643
    2. '<|end|>' → logprob: -1.9563345909118652
    3. '
' → logprob: -3.4563345909118652
    4. 'for' → logprob: -5.581334590911865
    5. '```' → logprob: -5.831334590911865
    6. '#' → logprob: -6.331334590911865
    7. ')' → logprob: -6.331334590911865
    8. '\n' → logprob: -6.581334590911865
    9. '[' → logprob: -7.956334590911865
    10. ' for' → logprob: -8.206335067749023

Token 103: '1' (ID: 16)
  Prédit: '1'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '1' → logprob: -3.607391408877447e-05
    2. ' ' → logprob: -10.250036239624023
    3. '2' → logprob: -15.875036239624023
    4. '`' → logprob: -16.000036239624023
    5. '```' → logprob: -16.125036239624023
    6. '0' → logprob: -16.250036239624023
    7. '<|end|>' → logprob: -16.875036239624023
    8. 's' → logprob: -17.187536239624023
    9. 'space' → logprob: -18.062536239624023
    10. ')' → logprob: -18.250036239624023

Token 104: '

' (ID: 279)
  Prédit: 'print'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'print' → logprob: -0.0016387656796723604
    2. '<|end|>' → logprob: -7.251638889312744
    3. 'for' → logprob: -7.626638889312744
    4. '
' → logprob: -7.876638889312744
    5. '```' → logprob: -10.251638412475586
    6. '#' → logprob: -11.626638412475586
    7. ' print' → logprob: -12.251638412475586
    8. '#print' → logprob: -12.626638412475586
    9. ' for' → logprob: -12.751638412475586
    10. ')' → logprob: -12.876638412475586

Token 105: '#' (ID: 2)
  Prédit: 'print'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'print' → logprob: -0.0010593677870929241
    2. 'for' → logprob: -6.876059532165527
    3. '<|end|>' → logprob: -11.251059532165527
    4. '
' → logprob: -12.001059532165527
    5. '```' → logprob: -12.876059532165527
    6. ' for' → logprob: -13.501059532165527
    7. ' print' → logprob: -13.751059532165527
    8. '#print' → logprob: -13.751059532165527
    9. '#' → logprob: -14.001059532165527
    10. ')' → logprob: -15.376059532165527

Token 106: ' Aff' (ID: 13741)
  Prédit: 'print'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'print' → logprob: -0.014803254045546055
    2. 'for' → logprob: -4.264803409576416
    3. ' print' → logprob: -7.764803409576416
    4. ' for' → logprob: -8.514802932739258
    5. 'lst' → logprob: -11.514802932739258
    6. '#' → logprob: -13.014802932739258
    7. 'pr' → logprob: -14.389802932739258
    8. 'prin' → logprob: -14.514802932739258
    9. '#print' → logprob: -15.014802932739258
    10. '
' → logprob: -15.139802932739258

Token 107: 'ichage' (ID: 118475)
  Prédit: 'icher'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'icher' → logprob: -0.08583466708660126
    2. 'ichage' → logprob: -3.0858347415924072
    3. 'iche' → logprob: -3.3358347415924072
    4. 'ich' → logprob: -7.085834503173828
    5. '#' → logprob: -9.585834503173828
    6. 'ic' → logprob: -11.085834503173828
    7. 'ichier' → logprob: -11.335834503173828
    8. 'ichert' → logprob: -11.585834503173828
    9. '(' → logprob: -11.835834503173828
    10. 'cher' → logprob: -11.960834503173828

Token 108: ' –' (ID: 1127)
  Prédit: 'print'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'print' → logprob: -0.16026069223880768
    2. 'for' → logprob: -1.9102606773376465
    3. ' for' → logprob: -10.410261154174805
    4. ' print' → logprob: -12.410261154174805
    5. '
' → logprob: -13.535261154174805
    6. '```' → logprob: -14.285261154174805
    7. 'lst' → logprob: -15.285261154174805
    8. ')' → logprob: -17.910261154174805
    9. ' 
' → logprob: -18.535261154174805
    10. '(print' → logprob: -18.660261154174805

Token 109: ' ' (ID: 5310)
  Prédit: 'print'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'print' → logprob: -0.5497006177902222
    2. 'for' → logprob: -1.0497006177902222
    3. ' for' → logprob: -2.7997007369995117
    4. ' print' → logprob: -4.424700736999512
    5. '```' → logprob: -10.799700736999512
    6. '
' → logprob: -13.174700736999512
    7. ''' → logprob: -13.424700736999512
    8. ' 
' → logprob: -14.049700736999512
    9. '`' → logprob: -14.299700736999512
    10. 'lst' → logprob: -14.424700736999512

Token 110: 'j' (ID: 73)
  Prédit: 'print'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'print' → logprob: -0.12919005751609802
    2. 'for' → logprob: -2.129189968109131
    3. ' for' → logprob: -6.504189968109131
    4. ' print' → logprob: -7.254189968109131
    5. '```' → logprob: -10.254190444946289
    6. ''' → logprob: -11.129190444946289
    7. '"' → logprob: -13.379190444946289
    8. '
' → logprob: -13.754190444946289
    9. 'lst' → logprob: -14.879190444946289
    10. '`' → logprob: -14.879190444946289

Token 111: ''util' (ID: 37761)
  Prédit: 'for'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'for' → logprob: -0.05446670576930046
    2. 'print' → logprob: -3.304466724395752
    3. 'e' → logprob: -4.304466724395752
    4. ' for' → logprob: -7.304466724395752
    5. 'oin' → logprob: -7.304466724395752
    6. '```' → logprob: -7.304466724395752
    7. 'ust' → logprob: -8.679466247558594
    8. '   ' → logprob: -9.429466247558594
    9. 'uste' → logprob: -9.554466247558594
    10. 'o' → logprob: -9.554466247558594

Token 112: 'ise' (ID: 1096)
  Prédit: 'se'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'se' → logprob: -0.0732956975698471
    2. 's' → logprob: -2.8232955932617188
    3. 'ser' → logprob: -4.573295593261719
    4. 'sé' → logprob: -8.198295593261719
    5. 'sement' → logprob: -9.073295593261719
    6. 'sage' → logprob: -9.198295593261719
    7. '```' → logprob: -9.448295593261719
    8. 'ses' → logprob: -9.698295593261719
    9. '#' → logprob: -10.073295593261719
    10. 'sers' → logprob: -10.448295593261719

Token 113: ' une' (ID: 2463)
  Prédit: 'print'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'print' → logprob: -0.030290264636278152
    2. '"' → logprob: -4.530290126800537
    3. ' print' → logprob: -4.780290126800537
    4. ''' → logprob: -4.780290126800537
    5. '```' → logprob: -7.030290126800537
    6. 'for' → logprob: -8.155290603637695
    7. '`' → logprob: -8.530290603637695
    8. 'lst' → logprob: -8.780290603637695
    9. ' ' → logprob: -9.155290603637695
    10. ' la' → logprob: -9.405290603637695

Token 114: ' boucle' (ID: 174211)
  Prédit: 'for'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'for' → logprob: -0.9843857288360596
    2. 'bou' → logprob: -1.2343857288360596
    3. ' boucle' → logprob: -2.4843857288360596
    4. ' for' → logprob: -2.9843857288360596
    5. 'print' → logprob: -2.9843857288360596
    6. '"' → logprob: -3.3593857288360596
    7. ' "' → logprob: -3.3593857288360596
    8. ' ' → logprob: -4.3593854904174805
    9. ' '' → logprob: -4.4843854904174805
    10. ' espace' → logprob: -4.7343854904174805

Token 115: ' classique' (ID: 76895)
  Prédit: 'for'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'for' → logprob: -0.007431984879076481
    2. ' for' → logprob: -5.007431983947754
    3. '
' → logprob: -7.257431983947754
    4. 'print' → logprob: -12.382431983947754
    5. '<|end|>' → logprob: -12.507431983947754
    6. '```' → logprob: -13.632431983947754
    7. '\n' → logprob: -13.757431983947754
    8. 'n' → logprob: -15.007431983947754
    9. ' 
' → logprob: -15.257431983947754
    10. '
' → logprob: -15.632431983947754

Token 116: ',' (ID: 11)
  Prédit: 'for'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'for' → logprob: -7.255023956531659e-05
    2. ' for' → logprob: -10.125072479248047
    3. '
' → logprob: -10.500072479248047
    4. 'print' → logprob: -12.250072479248047
    5. '```' → logprob: -16.875072479248047
    6. '<|end|>' → logprob: -18.375072479248047
    7. '\n' → logprob: -18.500072479248047
    8. '
' → logprob: -18.625072479248047
    9. ' 
' → logprob: -19.250072479248047
    10. '  
' → logprob: -20.125072479248047

Token 117: ' c' (ID: 274)
  Prédit: 'for'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'for' → logprob: -0.0005532711511477828
    2. ' for' → logprob: -7.500553131103516
    3. 'print' → logprob: -15.500553131103516
    4. '
' → logprob: -16.875553131103516
    5. '```' → logprob: -17.500553131103516
    6. '#' → logprob: -18.375553131103516
    7. 'i' → logprob: -18.625553131103516
    8. 'pour' → logprob: -18.750553131103516
    9. ' 
' → logprob: -18.875553131103516
    10. ' ' → logprob: -19.875553131103516

Token 118: ''est' (ID: 6616)
  Prédit: 'for'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'for' → logprob: -0.0011187844211235642
    2. ' for' → logprob: -7.1261186599731445
    3. '#' → logprob: -8.876118659973145
    4. 'range' → logprob: -10.501118659973145
    5. '```' → logprob: -10.501118659973145
    6. 'or' → logprob: -10.626118659973145
    7. 'ar' → logprob: -10.751118659973145
    8. 'r' → logprob: -11.001118659973145
    9. 'on' → logprob: -11.126118659973145
    10. '`' → logprob: -11.376118659973145

Token 119: ' plus' (ID: 2932)
  Prédit: 'plus'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'plus' → logprob: -0.15831199288368225
    2. 'n' → logprob: -2.7833120822906494
    3. 'moins' → logprob: -3.9083120822906494
    4. ' plus' → logprob: -3.9083120822906494
    5. 'bien' → logprob: -4.53331184387207
    6. 'une' → logprob: -5.78331184387207
    7. '```' → logprob: -5.90831184387207
    8. ' mieux' → logprob: -6.03331184387207
    9. 'lst' → logprob: -6.03331184387207
    10. 'tout' → logprob: -6.03331184387207

Token 120: ' flexible' (ID: 20185)
  Prédit: 'clair'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'clair' → logprob: -0.8103802800178528
    2. 'simple' → logprob: -1.560380220413208
    3. 'fac' → logprob: -2.435380220413208
    4. ' clair' → logprob: -2.810380220413208
    5. 'lis' → logprob: -3.060380220413208
    6. 'pro' → logprob: -3.060380220413208
    7. 'cl' → logprob: -3.685380220413208
    8. ' simple' → logprob: -3.935380220413208
    9. 'rob' → logprob: -4.185380458831787
    10. 'python' → logprob: -5.060380458831787

Token 121: '
' (ID: 198)
  Prédit: 'for'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'for' → logprob: -0.06056201085448265
    2. '
' → logprob: -3.0605618953704834
    3. ' for' → logprob: -4.4355621337890625
    4. '<|end|>' → logprob: -11.060562133789062
    5. '\n' → logprob: -11.185562133789062
    6. 'print' → logprob: -11.935562133789062
    7. ' 
' → logprob: -12.310562133789062
    8. '

' → logprob: -12.435562133789062
    9. '```' → logprob: -12.435562133789062
    10. '
' → logprob: -12.810562133789062

Token 122: 'for' (ID: 1938)
  Prédit: 'for'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'for' → logprob: -2.1888679839321412e-05
    2. 'print' → logprob: -11.500021934509277
    3. '
' → logprob: -12.000021934509277
    4. ' for' → logprob: -12.125021934509277
    5. '```' → logprob: -17.87502098083496
    6. '\n' → logprob: -18.75002098083496
    7. '    
' → logprob: -20.75002098083496
    8. ' 
' → logprob: -20.87502098083496
    9. '  
' → logprob: -20.87502098083496
    10. '
' → logprob: -21.00002098083496

Token 123: ' j' (ID: 441)
  Prédit: 'i'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'i' → logprob: -1.0064129829406738
    2. ' i' → logprob: -1.0064129829406738
    3. ' idx' → logprob: -1.6314129829406738
    4. 'idx' → logprob: -2.756412982940674
    5. ' val' → logprob: -5.381412982940674
    6. 'val' → logprob: -6.131412982940674
    7. '_' → logprob: -7.506412982940674
    8. 'x' → logprob: -7.756412982940674
    9. 'v' → logprob: -7.881412982940674
    10. ' v' → logprob: -7.881412982940674

Token 124: ' in' (ID: 306)
  Prédit: ' in'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' in' → logprob: -0.02148030512034893
    2. 'n' → logprob: -4.396480083465576
    3. 'in' → logprob: -4.771480083465576
    4. ' ' → logprob: -7.896480083465576
    5. ' n' → logprob: -10.896480560302734
    6. '_' → logprob: -11.271480560302734
    7. ' ' → logprob: -11.271480560302734
    8. 'range' → logprob: -11.646480560302734
    9. 'dx' → logprob: -12.021480560302734
    10. 'nt' → logprob: -12.146480560302734

Token 125: ' range' (ID: 3352)
  Prédit: 'range'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'range' → logprob: -0.17978844046592712
    2. ' range' → logprob: -1.8047884702682495
    3. 'lst' → logprob: -10.804788589477539
    4. ' lst' → logprob: -11.804788589477539
    5. ' ' → logprob: -12.179788589477539
    6. 'ange' → logprob: -12.304788589477539
    7. 'rang' → logprob: -13.679788589477539
    8. '  ' → logprob: -13.679788589477539
    9. '(range' → logprob: -13.929788589477539
    10. '   ' → logprob: -14.179788589477539

Token 126: '(n' (ID: 2406)
  Prédit: '(n'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(n' → logprob: -0.0011891605099663138
    2. '(' → logprob: -7.126189231872559
    3. '(len' → logprob: -7.876189231872559
    4. 'n' → logprob: -12.501189231872559
    5. ' (' → logprob: -13.876189231872559
    6. ' n' → logprob: -15.751189231872559
    7. '(
' → logprob: -16.251188278198242
    8. 'len' → logprob: -18.126188278198242
    9. '(m' → logprob: -18.501188278198242
    10. '((' → logprob: -18.876188278198242

Token 127: '):
' (ID: 1883)
  Prédit: '):'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '):' → logprob: -0.0006925394991412759
    2. '):
' → logprob: -7.375692367553711
    3. ')' → logprob: -10.000692367553711
    4. ' ):' → logprob: -10.875692367553711
    5. '):
' → logprob: -14.375692367553711
    6. ':' → logprob: -14.500692367553711
    7. '+' → logprob: -14.875692367553711
    8. '}:' → logprob: -16.25069236755371
    9. '):

' → logprob: -17.12569236755371
    10. '   ' → logprob: -17.25069236755371

Token 128: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.10099930316209793
    2. ' print' → logprob: -2.975999355316162
    3. 'print' → logprob: -3.100999355316162
    4. '	print' → logprob: -9.850998878479004
    5. '    
' → logprob: -12.975998878479004
    6. ' ' → logprob: -12.975998878479004
    7. '   ' → logprob: -12.975998878479004
    8. '  ' → logprob: -13.600998878479004
    9. '    ' → logprob: -13.725998878479004
    10. '.print' → logprob: -14.225998878479004

Token 129: ' if' (ID: 538)
  Prédit: 'print'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'print' → logprob: -0.018177567049860954
    2. ' print' → logprob: -4.018177509307861
    3. '   ' → logprob: -10.51817798614502
    4. '	print' → logprob: -14.89317798614502
    5. '```' → logprob: -16.018177032470703
    6. '.print' → logprob: -16.768177032470703
    7. '    
' → logprob: -17.768177032470703
    8. ' ' → logprob: -18.018177032470703
    9. '#print' → logprob: -18.268177032470703
    10. 'printf' → logprob: -18.268177032470703

Token 130: ' j' (ID: 441)
  Prédit: ' lst'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' lst' → logprob: -0.02673054300248623
    2. 'lst' → logprob: -3.776730537414551
    3. ' j' → logprob: -5.776730537414551
    4. 'j' → logprob: -8.02673053741455
    5. '(lst' → logprob: -10.65173053741455
    6. ' ls' → logprob: -11.40173053741455
    7. ' ' → logprob: -12.02673053741455
    8. '   ' → logprob: -12.90173053741455
    9. '_lst' → logprob: -12.90173053741455
    10. ' len' → logprob: -14.15173053741455

Token 131: ' <' (ID: 464)
  Prédit: ' >'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' >' → logprob: -1.303289532661438
    2. '>' → logprob: -1.428289532661438
    3. '==' → logprob: -1.803289532661438
    4. '!=' → logprob: -2.0532894134521484
    5. ' !=' → logprob: -2.3032894134521484
    6. ' ==' → logprob: -2.8032894134521484
    7. ' <' → logprob: -4.053289413452148
    8. '<' → logprob: -4.303289413452148
    9. '<n' → logprob: -6.678289413452148
    10. ' ' → logprob: -6.928289413452148

Token 132: ' n' (ID: 297)
  Prédit: ' n'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' n' → logprob: -0.47408467531204224
    2. 'n' → logprob: -0.9740846753120422
    3. ' ' → logprob: -12.349084854125977
    4. '   ' → logprob: -13.474084854125977
    5. '	n' → logprob: -14.224084854125977
    6. '  ' → logprob: -15.099084854125977
    7. '(n' → logprob: -15.099084854125977
    8. ' len' → logprob: -15.599084854125977
    9. 'len' → logprob: -15.724084854125977
    10. '<n' → logprob: -16.474084854125977

Token 133: '-' (ID: 12)
  Prédit: '-'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '-' → logprob: -0.003601140109822154
    2. ' -' → logprob: -5.62860107421875
    3. ' ' → logprob: -14.62860107421875
    4. '–' → logprob: -15.62860107421875
    5. '1' → logprob: -15.75360107421875
    6. ':' → logprob: -16.00360107421875
    7. '−' → logprob: -17.50360107421875
    8. '   ' → logprob: -17.62860107421875
    9. ')' → logprob: -18.00360107421875
    10. ' ' → logprob: -18.12860107421875

Token 134: '1' (ID: 16)
  Prédit: '1'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '1' → logprob: -0.00023286080977413803
    2. ' ' → logprob: -8.375232696533203
    3. '-' → logprob: -13.750232696533203
    4. '   ' → logprob: -15.000232696533203
    5. '
' → logprob: -15.625232696533203
    6. '```' → logprob: -15.875232696533203
    7. ',' → logprob: -16.250232696533203
    8. '  ' → logprob: -16.250232696533203
    9. ')' → logprob: -16.375232696533203
    10. ':' → logprob: -16.375232696533203

Token 135: ':
' (ID: 734)
  Prédit: ':'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ':' → logprob: -0.03465445339679718
    2. 'print' → logprob: -3.909654378890991
    3. ':
' → logprob: -4.78465461730957
    4. '   ' → logprob: -5.65965461730957
    5. ' print' → logprob: -6.78465461730957
    6. ',' → logprob: -7.53465461730957
    7. ')' → logprob: -8.03465461730957
    8. '    ' → logprob: -10.65965461730957
    9. ' :' → logprob: -10.65965461730957
    10. '       ' → logprob: -10.78465461730957

Token 136: '       ' (ID: 309)
  Prédit: 'print'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'print' → logprob: -0.41363415122032166
    2. ' print' → logprob: -1.663634181022644
    3. '   ' → logprob: -1.913634181022644
    4. '       ' → logprob: -6.413634300231934
    5. '	print' → logprob: -9.538634300231934
    6. '    ' → logprob: -10.288634300231934
    7. '  ' → logprob: -12.038634300231934
    8. '.print' → logprob: -12.538634300231934
    9. ' ' → logprob: -12.913634300231934
    10. ':' → logprob: -13.163634300231934

Token 137: ' print' (ID: 2123)
  Prédit: 'print'
  Correct (stricte): False
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'print' (adapté à ' print') → logprob: -0.004103335086256266
    2. ' print' → logprob: -5.504103183746338
    3. '   ' → logprob: -10.629103660583496
    4. '       ' → logprob: -15.254103660583496
    5. '	print' → logprob: -15.254103660583496
    6. '.print' → logprob: -16.75410270690918
    7. '    ' → logprob: -16.87910270690918
    8. '    
' → logprob: -17.62910270690918
    9. '
' → logprob: -18.12910270690918
    10. '(print' → logprob: -18.62910270690918

Token 138: '(lst' (ID: 95688)
  Prédit: '(lst'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(lst' → logprob: -3.2378600735682994e-05
    2. '(' → logprob: -10.375032424926758
    3. '(ls' → logprob: -14.000032424926758
    4. '(str' → logprob: -16.000032424926758
    5. 'lst' → logprob: -16.125032424926758
    6. ' (' → logprob: -17.250032424926758
    7. '(f' → logprob: -17.375032424926758
    8. '(
' → logprob: -18.000032424926758
    9. '(lhs' → logprob: -18.000032424926758
    10. '((' → logprob: -18.125032424926758

Token 139: '2' (ID: 17)
  Prédit: '2'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '2' → logprob: -6.146429223008454e-05
    2. '[j' → logprob: -10.75006103515625
    3. ']' → logprob: -11.75006103515625
    4. '```' → logprob: -11.75006103515625
    5. '[' → logprob: -12.37506103515625
    6. ')' → logprob: -12.62506103515625
    7. ''' → logprob: -13.12506103515625
    8. ' ' → logprob: -13.37506103515625
    9. '`' → logprob: -13.37506103515625
    10. 'j' → logprob: -13.43756103515625

Token 140: '[j' (ID: 7895)
  Prédit: '[j'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '[j' → logprob: -2.696889623621246e-06
    2. '[' → logprob: -12.87500286102295
    3. 'j' → logprob: -17.375001907348633
    4. '[i' → logprob: -17.750001907348633
    5. ' [' → logprob: -17.875001907348633
    6. '[
' → logprob: -18.625001907348633
    7. '```' → logprob: -18.750001907348633
    8. '[n' → logprob: -18.875001907348633
    9. ',j' → logprob: -19.625001907348633
    10. '[f' → logprob: -19.750001907348633

Token 141: '],' (ID: 2155)
  Prédit: ','
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ',' → logprob: -0.009843680076301098
    2. ',end' → logprob: -4.634843826293945
    3. ' ,' → logprob: -9.634843826293945
    4. 'end' → logprob: -11.009843826293945
    5. ',en' → logprob: -13.009843826293945
    6. ',",' → logprob: -14.134843826293945
    7. '   ' → logprob: -14.259843826293945
    8. ',j' → logprob: -14.509843826293945
    9. ',n' → logprob: -15.384843826293945
    10. ',v' → logprob: -15.509843826293945

Token 142: ' end' (ID: 1268)
  Prédit: 'end'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'end' → logprob: -0.01219185534864664
    2. ' end' → logprob: -4.5121917724609375
    3. ',end' → logprob: -7.7621917724609375
    4. ''end' → logprob: -8.012191772460938
    5. '"' → logprob: -8.137191772460938
    6. ''' → logprob: -9.762191772460938
    7. ',' → logprob: -10.762191772460938
    8. '(end' → logprob: -12.012191772460938
    9. '	end' → logprob: -13.262191772460938
    10. ')' → logprob: -13.387191772460938

Token 143: '="' (ID: 580)
  Prédit: '=''
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '='' → logprob: -0.030945133417844772
    2. '="' → logprob: -3.530945062637329
    3. '=' → logprob: -7.030945301055908
    4. ''' → logprob: -8.65594482421875
    5. '"' → logprob: -9.53094482421875
    6. '=',' → logprob: -9.90594482421875
    7. '=",' → logprob: -11.28094482421875
    8. ' ='' → logprob: -16.03094482421875
    9. ')' → logprob: -16.28094482421875
    10. '=

' → logprob: -16.28094482421875

Token 144: ' ")
' (ID: 31232)
  Prédit: ' )'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' )' → logprob: -0.4100460410118103
    2. ' ' → logprob: -1.410046100616455
    3. ' ")' → logprob: -3.035046100616455
    4. ' "' → logprob: -3.785046100616455
    5. '"' → logprob: -4.035046100616455
    6. ')' → logprob: -6.660046100616455
    7. ' ,' → logprob: -7.410046100616455
    8. ''' → logprob: -7.535046100616455
    9. ',' → logprob: -7.910046100616455
    10. ' ' → logprob: -7.910046100616455

Token 145: '   ' (ID: 271)
  Prédit: 'else'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'else' → logprob: -0.00263915304094553
    2. '   ' → logprob: -6.252639293670654
    3. ' else' → logprob: -7.252639293670654
    4. 'print' → logprob: -14.127638816833496
    5. '	else' → logprob: -14.127638816833496
    6. '```' → logprob: -15.627638816833496
    7. '       ' → logprob: -16.377639770507812
    8. 'elif' → logprob: -16.377639770507812
    9. '#else' → logprob: -16.877639770507812
    10. ')' → logprob: -17.127639770507812

Token 146: ' else' (ID: 1203)
  Prédit: 'else'
  Correct (stricte): False
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'else' (adapté à ' else') → logprob: -0.00012987985974177718
    2. ' else' → logprob: -9.000129699707031
    3. '   ' → logprob: -12.000129699707031
    4. 'print' → logprob: -15.125129699707031
    5. '	else' → logprob: -16.62512969970703
    6. '```' → logprob: -18.25012969970703
    7. '
' → logprob: -18.37512969970703
    8. 'elif' → logprob: -18.87512969970703
    9. '#else' → logprob: -19.87512969970703
    10. '       ' → logprob: -20.25012969970703

Token 147: ':
' (ID: 734)
  Prédit: ':'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ':' → logprob: -0.03830506280064583
    2. ':
' → logprob: -3.2883050441741943
    3. '       ' → logprob: -8.413305282592773
    4. '   ' → logprob: -10.913305282592773
    5. 'print' → logprob: -11.288305282592773
    6. '):' → logprob: -12.163305282592773
    7. '):
' → logprob: -13.288305282592773
    8. ' :' → logprob: -13.288305282592773
    9. ' :
' → logprob: -14.288305282592773
    10. ')' → logprob: -14.788305282592773

Token 148: '       ' (ID: 309)
  Prédit: 'print'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'print' → logprob: -1.0087516784551553e-05
    2. ' print' → logprob: -11.62501049041748
    3. '       ' → logprob: -14.12501049041748
    4. '   ' → logprob: -14.87501049041748
    5. '	print' → logprob: -18.500009536743164
    6. '```' → logprob: -18.875009536743164
    7. '.print' → logprob: -20.750009536743164
    8. '     ' → logprob: -21.000009536743164
    9. '(print' → logprob: -21.000009536743164
    10. '#print' → logprob: -21.500009536743164

Token 149: ' print' (ID: 2123)
  Prédit: 'print'
  Correct (stricte): False
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'print' (adapté à ' print') → logprob: -1.8624639324116288e-06
    2. ' print' → logprob: -13.250001907348633
    3. '   ' → logprob: -19.125001907348633
    4. '  ' → logprob: -22.500001907348633
    5. '	print' → logprob: -23.000001907348633
    6. '```' → logprob: -23.375001907348633
    7. '
' → logprob: -23.625001907348633
    8. ' ' → logprob: -24.000001907348633
    9. 'printf' → logprob: -24.250001907348633
    10. '       ' → logprob: -24.750001907348633

Token 150: '(lst' (ID: 95688)
  Prédit: '(lst'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(lst' → logprob: -1.3425219549390022e-05
    2. '(' → logprob: -11.50001335144043
    3. '(ls' → logprob: -12.75001335144043
    4. 'lst' → logprob: -14.87501335144043
    5. '()' → logprob: -17.00001335144043
    6. '(l' → logprob: -18.75001335144043
    7. '(lhs' → logprob: -18.75001335144043
    8. '(ll' → logprob: -18.87501335144043
    9. '(
' → logprob: -19.00001335144043
    10. '(lp' → logprob: -19.62501335144043

Token 151: '2' (ID: 17)
  Prédit: '2'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '2' → logprob: -3.128163257315464e-07
    2. '[' → logprob: -16.375
    3. '[j' → logprob: -16.5
    4. '２' → logprob: -19.75
    5. '_' → logprob: -20.25
    6. ')' → logprob: -20.25
    7. '[i' → logprob: -20.5625
    8. '۲' → logprob: -20.5625
    9. ' ' → logprob: -21.0625
    10. '-' → logprob: -21.1875

Token 152: '[j' (ID: 7895)
  Prédit: '[j'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '[j' → logprob: -4.961759259458631e-06
    2. '[' → logprob: -12.750004768371582
    3. '[n' → logprob: -13.750004768371582
    4. ')' → logprob: -15.000004768371582
    5. ')[' → logprob: -15.500004768371582
    6. '```' → logprob: -16.1250057220459
    7. ']' → logprob: -16.3750057220459
    8. ' [' → logprob: -16.6250057220459
    9. '][' → logprob: -17.2500057220459
    10. '[js' → logprob: -17.6250057220459

Token 153: '])' (ID: 4636)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')' → logprob: -1.5690089639974758e-05
    2. '))' → logprob: -11.375015258789062
    3. '")' → logprob: -13.750015258789062
    4. ')")' → logprob: -14.250015258789062
    5. '])' → logprob: -14.500015258789062
    6. ')
' → logprob: -14.500015258789062
    7. '`)' → logprob: -14.750015258789062
    8. '')' → logprob: -15.250015258789062
    9. ')`' → logprob: -15.375015258789062
    10. '})' → logprob: -15.500015258789062

Token 154: ' #' (ID: 1069)
  Prédit: ''
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False

Token 155: ' et' (ID: 859)
  Prédit: ''
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False

Token 156: ' voilà' (ID: 77612)
  Prédit: 'ici'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'ici' → logprob: -1.5289465188980103
    2. 'sans' → logprob: -1.5289465188980103
    3. 'fin' → logprob: -1.9039465188980103
    4. ' here' → logprob: -3.1539463996887207
    5. '\n' → logprob: -3.4039463996887207
    6. 'l' → logprob: -3.4039463996887207
    7. ' ici' → logprob: -3.6539463996887207
    8. 'la' → logprob: -3.6539463996887207
    9. 'un' → logprob: -3.7789463996887207
    10. ' sans' → logprob: -3.7789463996887207

Token 157: ',' (ID: 11)
  Prédit: ''
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False

Token 158: ' on' (ID: 402)
  Prédit: ''
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False

Token 159: ' finit' (ID: 154258)
  Prédit: 'a'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'a' → logprob: -0.06407102942466736
    2. '#' → logprob: -4.064071178436279
    3. 'est' → logprob: -4.314071178436279
    4. ' a' → logprob: -4.564071178436279
    5. 'n' → logprob: -4.939071178436279
    6. '<|end|>' → logprob: -5.689071178436279
    7. 'fin' → logprob: -6.689071178436279
    8. 'termin' → logprob: -6.939071178436279
    9. ']' → logprob: -7.189071178436279
    10. 'pe' → logprob: -7.439071178436279

Token 160: ' par' (ID: 686)
  Prédit: ''
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False

Token 161: ' un' (ID: 537)
  Prédit: 'une'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'une' → logprob: -0.840204119682312
    2. 'un' → logprob: -1.840204119682312
    3. 'print' → logprob: -2.0902042388916016
    4. '\n' → logprob: -2.3402042388916016
    5. ' une' → logprob: -2.7152042388916016
    6. '"\' → logprob: -3.3402042388916016
    7. ' un' → logprob: -3.5902042388916016
    8. '\' → logprob: -3.5902042388916016
    9. 'endl' → logprob: -4.965204238891602
    10. '```' → logprob: -5.090204238891602

Token 162: ' print' (ID: 2123)
  Prédit: '\n'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '\n' → logprob: -0.31763872504234314
    2. 's' → logprob: -2.817638635635376
    3. 'return' → logprob: -2.942638635635376
    4. ' \' → logprob: -3.192638635635376
    5. '\' → logprob: -3.317638635635376
    6. '"\' → logprob: -3.317638635635376
    7. ' saut' → logprob: -4.567638874053955
    8. 'ret' → logprob: -4.942638874053955
    9. 'endl' → logprob: -5.067638874053955
    10. 'newline' → logprob: -5.192638874053955

Token 163: ' normal' (ID: 6078)
  Prédit: ''
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False


RÉSUMÉ:
--------------------------------------------------------------------------------
Total des tokens analysés: 161
Tokens correctement prédits (1ère position, stricte): 38
Tokens correctement prédits (1ère position, avec adaptation): 43
Tokens correctement prédits (top 10): 96
Précision stricte (1ère position): 23.60%
Précision adaptée (1ère position): 26.71%
Précision (top 10): 59.63%
================================================================================
