================================================================================
ANALYSE DE PRÉDICTION TOKEN PAR TOKEN (BATCH API)
Date: 2025-06-04 20:02:55
Modèle de tokenisation: gpt-4o-mini
================================================================================

SCRIPT ANALYSÉ:
--------------------------------------------------------------------------------
N = int(input())
S = input()
K = int(input())
point = S[K - 1]
print(''.join(c if c == point else '*' for c in S))
--------------------------------------------------------------------------------

RÉSULTATS D'ANALYSE TOKEN PAR TOKEN:
--------------------------------------------------------------------------------
Token 0: 'N' (ID: 45)
  → Token d'amorce (pas de prédiction)

Token 1: ' =' (ID: 314)
  → Token d'amorce (pas de prédiction)

Token 2: ' int' (ID: 677)
  → Token d'amorce (pas de prédiction)

Token 3: '(input' (ID: 10054)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '(' → logprob: -0.0001967457792488858
    2. '```' → logprob: -9.50019645690918
    3. '(N' → logprob: -10.37519645690918
    4. '`' → logprob: -10.87519645690918
    5. '(
' → logprob: -11.00019645690918
    6. ')' → logprob: -11.62519645690918
    7. '("("' → logprob: -11.62519645690918
    8. ''' → logprob: -11.62519645690918
    9. '()' → logprob: -11.87519645690918
    10. '('' → logprob: -12.25019645690918

Token 4: '())
' (ID: 4574)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '(' → logprob: -0.23659978806972504
    2. ')' → logprob: -1.6115998029708862
    3. '()' → logprob: -4.861599922180176
    4. '())' → logprob: -6.236599922180176
    5. '('' → logprob: -8.111599922180176
    6. '(
' → logprob: -8.611599922180176
    7. '```' → logprob: -8.986599922180176
    8. '("("' → logprob: -9.486599922180176
    9. '`' → logprob: -9.736599922180176
    10. '))' → logprob: -9.736599922180176

Token 5: 'S' (ID: 50)
  Prédit: 'if'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'if' → logprob: -1.8320107460021973
    2. 'for' → logprob: -1.8320107460021973
    3. 'a' → logprob: -2.0820107460021973
    4. 's' → logprob: -2.2070107460021973
    5. '*' → logprob: -2.5820107460021973
    6. ''' → logprob: -2.8320107460021973
    7. '#' → logprob: -3.2070107460021973
    8. ')' → logprob: -3.2070107460021973
    9. 'i' → logprob: -3.3320107460021973
    10. 'x' → logprob: -3.3320107460021973

Token 6: ' =' (ID: 314)
  Prédit: '.'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '.' → logprob: -0.11139343678951263
    2. '=' → logprob: -2.861393451690674
    3. '[' → logprob: -3.236393451690674
    4. ' =' → logprob: -4.861393451690674
    5. ')' → logprob: -8.236392974853516
    6. '_' → logprob: -8.486392974853516
    7. 'u' → logprob: -9.861392974853516
    8. '.=' → logprob: -9.861392974853516
    9. '[:]' → logprob: -9.986392974853516
    10. ':' → logprob: -9.986392974853516

Token 7: ' input' (ID: 3422)
  Prédit: 'input'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'input' → logprob: -0.14295831322669983
    2. ' input' → logprob: -2.017958402633667
    3. '""' → logprob: -9.267958641052246
    4. ' ' → logprob: -9.892958641052246
    5. '"' → logprob: -10.267958641052246
    6. '=input' → logprob: -11.392958641052246
    7. '''' → logprob: -11.517958641052246
    8. ''' → logprob: -11.642958641052246
    9. '[input' → logprob: -11.642958641052246
    10. '(input' → logprob: -11.642958641052246

Token 8: '()
' (ID: 1234)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '(' → logprob: -0.00340228620916605
    2. '()' → logprob: -6.378402233123779
    3. '('' → logprob: -7.753402233123779
    4. ''' → logprob: -7.878402233123779
    5. ')' → logprob: -8.253402709960938
    6. '"' → logprob: -8.878402709960938
    7. '```' → logprob: -9.378402709960938
    8. '(
' → logprob: -9.628402709960938
    9. '("("' → logprob: -9.628402709960938
    10. '`' → logprob: -9.878402709960938

Token 9: 'K' (ID: 42)
  Prédit: 'for'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'for' → logprob: -0.5592791438102722
    2. 'if' → logprob: -1.309279203414917
    3. 'count' → logprob: -2.809279203414917
    4. 'i' → logprob: -3.309279203414917
    5. 'f' → logprob: -3.934279203414917
    6. 'result' → logprob: -4.309278964996338
    7. 'c' → logprob: -5.059278964996338
    8. 'sum' → logprob: -5.434278964996338
    9. 'd' → logprob: -5.934278964996338
    10. 's' → logprob: -6.059278964996338

Token 10: ' =' (ID: 314)
  Prédit: ' ='
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' =' → logprob: -0.07717832922935486
    2. '=' → logprob: -2.7021782398223877
    3. ' ' → logprob: -5.202178478240967
    4. '[' → logprob: -7.077178478240967
    5. ',' → logprob: -7.202178478240967
    6. ' ,' → logprob: -10.202178001403809
    7. '_' → logprob: -10.702178001403809
    8. '.' → logprob: -10.952178001403809
    9. ' =
' → logprob: -11.952178001403809
    10. '  ' → logprob: -12.077178001403809

Token 11: ' int' (ID: 677)
  Prédit: ' int'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' int' → logprob: -0.20157490670681
    2. 'int' → logprob: -1.7015749216079712
    3. ' ' → logprob: -9.95157527923584
    4. ' N' → logprob: -9.95157527923584
    5. '[int' → logprob: -10.70157527923584
    6. '=int' → logprob: -10.95157527923584
    7. '<int' → logprob: -11.57657527923584
    8. '0' → logprob: -12.57657527923584
    9. '(int' → logprob: -12.95157527923584
    10. 'N' → logprob: -12.95157527923584

Token 12: '(input' (ID: 10054)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(' → logprob: -0.20159801840782166
    2. '()' → logprob: -1.826598048210144
    3. '('' → logprob: -4.076598167419434
    4. '(input' → logprob: -6.451598167419434
    5. ' (' → logprob: -7.701598167419434
    6. ' ()' → logprob: -7.826598167419434
    7. '(K' → logprob: -8.326598167419434
    8. '```' → logprob: -8.326598167419434
    9. ' ' → logprob: -8.451598167419434
    10. ''' → logprob: -8.451598167419434

Token 13: '())
' (ID: 4574)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ')' → logprob: -0.060494355857372284
    2. '()' → logprob: -3.3104944229125977
    3. '())' → logprob: -3.8104944229125977
    4. '`)' → logprob: -10.060494422912598
    5. ' )' → logprob: -11.935494422912598
    6. '(' → logprob: -12.935494422912598
    7. '))' → logprob: -12.935494422912598
    8. '```' → logprob: -13.185494422912598
    9. '）' → logprob: -13.435494422912598
    10. '")' → logprob: -13.435494422912598

Token 14: 'point' (ID: 4859)
  Prédit: 'result'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'result' → logprob: -0.1891515702009201
    2. 'for' → logprob: -2.5641515254974365
    3. 'print' → logprob: -3.0641515254974365
    4. 'output' → logprob: -4.314151763916016
    5. 's' → logprob: -4.814151763916016
    6. 't' → logprob: -5.064151763916016
    7. 'res' → logprob: -5.189151763916016
    8. '```' → logprob: -5.314151763916016
    9. 'S' → logprob: -6.189151763916016
    10. 'T' → logprob: -6.564151763916016

Token 15: ' =' (ID: 314)
  Prédit: 's'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 's' → logprob: -0.09363351762294769
    2. '=' → logprob: -2.8436334133148193
    3. '_' → logprob: -4.343633651733398
    4. '.' → logprob: -4.343633651733398
    5. ' =' → logprob: -5.593633651733398
    6. '(' → logprob: -7.593633651733398
    7. ')' → logprob: -8.343633651733398
    8. 'S' → logprob: -8.593633651733398
    9. '_s' → logprob: -8.593633651733398
    10. '[' → logprob: -9.093633651733398

Token 16: ' S' (ID: 336)
  Prédit: '0'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '0' → logprob: -0.1818908303976059
    2. '[]' → logprob: -2.3068907260894775
    3. ' ' → logprob: -3.6818907260894775
    4. '{}' → logprob: -4.431890964508057
    5. 'S' → logprob: -4.806890964508057
    6. ' []' → logprob: -4.931890964508057
    7. 'K' → logprob: -5.306890964508057
    8. '[' → logprob: -5.431890964508057
    9. 'ord' → logprob: -6.431890964508057
    10. '(' → logprob: -7.556890964508057

Token 17: '[K' (ID: 137571)
  Prédit: '['
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '[' → logprob: -0.25163185596466064
    2. '.' → logprob: -1.8766318559646606
    3. '[:]' → logprob: -2.751631736755371
    4. '[K' → logprob: -5.626631736755371
    5. '.replace' → logprob: -7.376631736755371
    6. '[int' → logprob: -7.876631736755371
    7. '[N' → logprob: -9.001631736755371
    8. '[:' → logprob: -9.251631736755371
    9. '[::-' → logprob: -9.251631736755371
    10. '[len' → logprob: -9.751631736755371

Token 18: ' -' (ID: 533)
  Prédit: '-'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '-' → logprob: -0.0016197188524529338
    2. ' -' → logprob: -7.126619815826416
    3. '1' → logprob: -7.751619815826416
    4. ')' → logprob: -8.251619338989258
    5. '-)' → logprob: -9.251619338989258
    6. ']' → logprob: -11.751619338989258
    7. '2' → logprob: -12.001619338989258
    8. '4' → logprob: -12.751619338989258
    9. '])' → logprob: -13.126619338989258
    10. '0' → logprob: -13.501619338989258

Token 19: ' ' (ID: 220)
  Prédit: '1'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '1' → logprob: -0.00012415809032972902
    2. ' ' → logprob: -9.000123977661133
    3. '１' → logprob: -15.250123977661133
    4. '<|end|>' → logprob: -15.625123977661133
    5. ')' → logprob: -16.875123977661133
    6. '>' → logprob: -17.250123977661133
    7. '```' → logprob: -17.375123977661133
    8. '<|end|>' → logprob: -17.437623977661133
    9. '...' → logprob: -17.500123977661133
    10. '۱' → logprob: -17.500123977661133

Token 20: '1' (ID: 16)
  Prédit: '1'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '1' → logprob: -1.981667537620524e-06
    2. ' ' → logprob: -13.500001907348633
    3. '１' → logprob: -15.250001907348633
    4. '۱' → logprob: -16.250001907348633
    5. '2' → logprob: -16.812501907348633
    6. '```' → logprob: -16.812501907348633
    7. '১' → logprob: -17.187501907348633
    8. '१' → logprob: -17.437501907348633
    9. ')' → logprob: -18.437501907348633
    10. '0' → logprob: -19.000001907348633

Token 21: ']
' (ID: 1592)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ')' → logprob: -0.43474721908569336
    2. ']' → logprob: -1.0597472190856934
    3. '']' → logprob: -5.809747219085693
    4. '')' → logprob: -6.559747219085693
    5. '])' → logprob: -6.684747219085693
    6. ')]' → logprob: -9.059747695922852
    7. '[' → logprob: -9.434747695922852
    8. ')])' → logprob: -10.309747695922852
    9. '）' → logprob: -11.184747695922852
    10. ''])' → logprob: -11.309747695922852

Token 22: 'print' (ID: 1598)
  Prédit: 'for'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'for' → logprob: -0.6299580335617065
    2. '
' → logprob: -1.0049580335617065
    3. 'result' → logprob: -3.004958152770996
    4. '\n' → logprob: -3.754958152770996
    5. 'print' → logprob: -4.504958152770996
    6. ' for' → logprob: -5.379958152770996
    7. '
' → logprob: -5.629958152770996
    8. '```' → logprob: -5.629958152770996
    9. 'output' → logprob: -6.629958152770996
    10. '' → logprob: -7.004958152770996

Token 23: '('' (ID: 706)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(' → logprob: -0.0004894073354080319
    2. '(S' → logprob: -8.625489234924316
    3. '('' → logprob: -9.000489234924316
    4. '(point' → logprob: -9.500489234924316
    5. '("("' → logprob: -9.625489234924316
    6. '((' → logprob: -10.500489234924316
    7. '(Point' → logprob: -12.625489234924316
    8. '(.' → logprob: -12.625489234924316
    9. '(`' → logprob: -12.750489234924316
    10. '(p' → logprob: -13.375489234924316

Token 24: ''.' (ID: 6120)
  Prédit: 'point'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'point' → logprob: -0.44138872623443604
    2. 'S' → logprob: -2.3163886070251465
    3. '*' → logprob: -2.5663886070251465
    4. ''.' → logprob: -2.8163886070251465
    5. ''' → logprob: -3.0663886070251465
    6. ')' → logprob: -3.1913886070251465
    7. '')' → logprob: -4.3163886070251465
    8. '''.' → logprob: -4.9413886070251465
    9. '(point' → logprob: -5.6913886070251465
    10. '*)' → logprob: -6.4413886070251465

Token 25: 'join' (ID: 10891)
  Prédit: 'replace'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'replace' → logprob: -0.04859134554862976
    2. 'join' → logprob: -3.048591375350952
    3. 'rep' → logprob: -13.173591613769531
    4. 're' → logprob: -13.923591613769531
    5. 'r' → logprob: -14.298591613769531
    6. ' replace' → logprob: -16.29859161376953
    7. 'l' → logprob: -16.42359161376953
    8. 'rstrip' → logprob: -16.67359161376953
    9. 'repr' → logprob: -16.67359161376953
    10. 'lower' → logprob: -17.04859161376953

Token 26: '(c' (ID: 2410)
  Prédit: '(['
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '([' → logprob: -0.3895163834095001
    2. '(' → logprob: -2.2645163536071777
    3. '(c' → logprob: -2.3895163536071777
    4. '(['' → logprob: -2.6395163536071777
    5. '('' → logprob: -3.5145163536071777
    6. '[' → logprob: -4.264516353607178
    7. '(chr' → logprob: -5.514516353607178
    8. '['' → logprob: -6.514516353607178
    9. '([
' → logprob: -6.764516353607178
    10. '(ch' → logprob: -6.764516353607178

Token 27: ' if' (ID: 538)
  Prédit: ' if'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' if' → logprob: -0.43881407380104065
    2. 'if' → logprob: -1.6888140439987183
    3. '.lower' → logprob: -2.063814163208008
    4. '.replace' → logprob: -3.438814163208008
    5. ')' → logprob: -5.563814163208008
    6. '.upper' → logprob: -5.938814163208008
    7. 's' → logprob: -6.813814163208008
    8. '.' → logprob: -6.813814163208008
    9. 'point' → logprob: -7.438814163208008
    10. '.point' → logprob: -8.063814163208008

Token 28: ' c' (ID: 274)
  Prédit: ' c'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' c' → logprob: -0.20142142474651337
    2. 'c' → logprob: -1.7014213800430298
    3. '==' → logprob: -12.826421737670898
    4. ' ' → logprob: -13.826421737670898
    5. ' ==' → logprob: -13.951421737670898
    6. ' ' → logprob: -13.951421737670898
    7. '	c' → logprob: -14.576421737670898
    8. 'point' → logprob: -14.826421737670898
    9. '  ' → logprob: -14.951421737670898
    10. '<c' → logprob: -15.076421737670898

Token 29: ' ==' (ID: 951)
  Prédit: '=='
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '==' → logprob: -0.20217949151992798
    2. ' ==' → logprob: -2.077179431915283
    3. '!=' → logprob: -3.077179431915283
    4. ' !=' → logprob: -4.452179431915283
    5. ' ' → logprob: -11.577179908752441
    6. '=' → logprob: -11.702179908752441
    7. ' ' → logprob: -13.077179908752441
    8. '==(' → logprob: -14.202179908752441
    9. '```' → logprob: -14.327179908752441
    10. ')' → logprob: -14.327179908752441

Token 30: ' point' (ID: 2438)
  Prédit: 'point'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'point' → logprob: -0.004623087588697672
    2. ' point' → logprob: -5.379622936248779
    3. ' ' → logprob: -13.504623413085938
    4. '	point' → logprob: -14.379623413085938
    5. '(point' → logprob: -15.129623413085938
    6. 'p' → logprob: -15.879623413085938
    7. '-point' → logprob: -16.129623413085938
    8. '  ' → logprob: -16.754623413085938
    9. ' ' → logprob: -17.004623413085938
    10. 'c' → logprob: -17.004623413085938

Token 31: ' else' (ID: 1203)
  Prédit: 'else'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'else' → logprob: -0.17978763580322266
    2. ' else' → logprob: -1.8047876358032227
    3. '	else' → logprob: -10.179787635803223
    4. ' or' → logprob: -13.679787635803223
    5. ' ' → logprob: -13.929787635803223
    6. '```' → logprob: -14.679787635803223
    7. ')' → logprob: -15.054787635803223
    8. 'or' → logprob: -15.179787635803223
    9. 'elses' → logprob: -15.179787635803223
    10. '<|end|>' → logprob: -15.304787635803223

Token 32: ' '*'' (ID: 89603)
  Prédit: ''*'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ''*' → logprob: -0.00020818933262489736
    2. ' '*'' → logprob: -9.250207901000977
    3. '*' → logprob: -10.000207901000977
    4. ''' → logprob: -10.625207901000977
    5. '"*' → logprob: -10.625207901000977
    6. ' ' → logprob: -12.125207901000977
    7. ' '*' → logprob: -12.625207901000977
    8. '  ' → logprob: -13.250207901000977
    9. ''#' → logprob: -13.750207901000977
    10. ''a' → logprob: -14.000207901000977

Token 33: ' for' (ID: 395)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')' → logprob: -0.02289612591266632
    2. ' for' → logprob: -4.2728962898254395
    3. 'for' → logprob: -5.0228962898254395
    4. '))' → logprob: -6.2728962898254395
    5. ')c' → logprob: -9.522895812988281
    6. ' ' → logprob: -9.647895812988281
    7. '')' → logprob: -10.772895812988281
    8. '}' → logprob: -11.522895812988281
    9. '   ' → logprob: -11.647895812988281
    10. ' c' → logprob: -11.647895812988281

Token 34: ' c' (ID: 274)
  Prédit: ' c'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' c' → logprob: -0.3868866562843323
    2. 'c' → logprob: -1.1368865966796875
    3. ' ' → logprob: -11.511886596679688
    4. 'S' → logprob: -13.011886596679688
    5. ' S' → logprob: -13.136886596679688
    6. '	c' → logprob: -14.386886596679688
    7. ')c' → logprob: -15.386886596679688
    8. '  ' → logprob: -15.761886596679688
    9. ' s' → logprob: -16.136886596679688
    10. ' ' → logprob: -16.261886596679688

Token 35: ' in' (ID: 306)
  Prédit: ' in'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' in' → logprob: -0.006789501290768385
    2. 'in' → logprob: -5.006789684295654
    3. ' ' → logprob: -10.006789207458496
    4. ')' → logprob: -11.131789207458496
    5. 'c' → logprob: -12.381789207458496
    6. ' )' → logprob: -12.631789207458496
    7. ' c' → logprob: -13.506789207458496
    8. '  ' → logprob: -13.506789207458496
    9. 's' → logprob: -13.881789207458496
    10. '<|end|>' → logprob: -14.006789207458496

Token 36: ' S' (ID: 336)
  Prédit: 'S'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'S' → logprob: -0.06197183206677437
    2. ' S' → logprob: -2.81197190284729
    3. ' ' → logprob: -12.561971664428711
    4. ')' → logprob: -15.436971664428711
    5. '<S' → logprob: -16.18697166442871
    6. '  ' → logprob: -16.93697166442871
    7. '	S' → logprob: -16.93697166442871
    8. '   ' → logprob: -17.18697166442871
    9. '_S' → logprob: -17.31197166442871
    10. 'Ｓ' → logprob: -17.43697166442871

Token 37: '))' (ID: 915)
  Prédit: '))'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '))' → logprob: -0.006719640456140041
    2. ')' → logprob: -5.006719589233398
    3. ')))' → logprob: -13.006719589233398
    4. ''))' → logprob: -13.756719589233398
    5. '))
' → logprob: -14.631719589233398
    6. '),' → logprob: -15.631719589233398
    7. ' ))' → logprob: -15.631719589233398
    8. '])' → logprob: -17.3817195892334
    9. '"))' → logprob: -17.5067195892334
    10. ').' → logprob: -17.5067195892334


RÉSUMÉ:
--------------------------------------------------------------------------------
Total des tokens analysés: 35
Tokens correctement prédits (1ère position, stricte): 8
Tokens correctement prédits (1ère position, avec adaptation): 8
Tokens correctement prédits (top 10): 26
Précision stricte (1ère position): 22.86%
Précision adaptée (1ère position): 22.86%
Précision (top 10): 74.29%
================================================================================
