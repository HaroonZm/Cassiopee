================================================================================
ANALYSE DE PRÉDICTION TOKEN PAR TOKEN (BATCH API)
Date: 2025-06-04 19:15:43
Modèle de tokenisation: gpt-4o-mini
================================================================================

SCRIPT ANALYSÉ:
--------------------------------------------------------------------------------
n, k = map(int, input().split())

A = [-1] * n

for i in range(k):
    d = int(input())
    a = list(map(int, input().split()))
    for j in range(d):
        x = a[j] - 1
        if A[x] == -1:
            A[x] = 1

ans = 0

for i in range(n):
    if A[i] == -1:
        ans += 1

print(ans)
--------------------------------------------------------------------------------

RÉSULTATS D'ANALYSE TOKEN PAR TOKEN:
--------------------------------------------------------------------------------
Token 0: 'n' (ID: 77)
  → Token d'amorce (pas de prédiction)

Token 1: ',' (ID: 11)
  → Token d'amorce (pas de prédiction)

Token 2: ' k' (ID: 372)
  → Token d'amorce (pas de prédiction)

Token 3: ' =' (ID: 314)
  Prédit: '='
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '=' → logprob: -0.04179752618074417
    2. ' =' → logprob: -3.291797637939453
    3. ',' → logprob: -5.666797637939453
    4. ' ' → logprob: -8.791797637939453
    5. ')' → logprob: -10.166797637939453
    6. '+' → logprob: -11.166797637939453
    7. '=
' → logprob: -11.416797637939453
    8. '```' → logprob: -11.416797637939453
    9. ''' → logprob: -11.666797637939453
    10. '=

' → logprob: -11.666797637939453

Token 4: ' map' (ID: 4014)
  Prédit: ' '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' ' → logprob: -0.08417297154664993
    2. '0' → logprob: -3.4591729640960693
    3. ' map' → logprob: -3.5841729640960693
    4. 'map' → logprob: -5.084173202514648
    5. 'input' → logprob: -5.209173202514648
    6. '10' → logprob: -5.459173202514648
    7. ' input' → logprob: -5.709173202514648
    8. ' int' → logprob: -6.834173202514648
    9. 'int' → logprob: -7.834173202514648
    10. ' n' → logprob: -7.959173202514648

Token 5: '(int' (ID: 2742)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(' → logprob: -0.0960182324051857
    2. '<|end|>' → logprob: -2.4710183143615723
    3. '```' → logprob: -6.096018314361572
    4. '<|end|>' → logprob: -6.346018314361572
    5. '(lambda' → logprob: -7.596018314361572
    6. ')' → logprob: -7.596018314361572
    7. '(user' → logprob: -7.846018314361572
    8. '(int' → logprob: -8.471017837524414
    9. 'user' → logprob: -8.846017837524414
    10. '[' → logprob: -9.221017837524414

Token 6: ',' (ID: 11)
  Prédit: '(input'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '(input' → logprob: -0.8224045634269714
    2. ')' → logprob: -1.1974046230316162
    3. '(' → logprob: -1.4474046230316162
    4. '(user' → logprob: -5.197404384613037
    5. '(n' → logprob: -5.572404384613037
    6. '```' → logprob: -5.822404384613037
    7. '`)' → logprob: -6.322404384613037
    8. '<|end|>' → logprob: -6.697404384613037
    9. '(str' → logprob: -7.072404384613037
    10. '(int' → logprob: -7.197404384613037

Token 7: ' input' (ID: 3422)
  Prédit: 'input'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'input' → logprob: -0.31330612301826477
    2. ' input' → logprob: -1.3133060932159424
    3. '(input' → logprob: -10.063305854797363
    4. ')' → logprob: -13.938305854797363
    5. ',input' → logprob: -14.313305854797363
    6. '=input' → logprob: -16.06330680847168
    7. '[input' → logprob: -17.06330680847168
    8. '<input' → logprob: -17.18830680847168
    9. '```' → logprob: -17.31330680847168
    10. '	input' → logprob: -17.43830680847168

Token 8: '().' (ID: 1454)
  Prédit: '())'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '())' → logprob: -0.6826705932617188
    2. '()' → logprob: -1.5576705932617188
    3. ')' → logprob: -1.9326705932617188
    4. '().' → logprob: -2.8076705932617188
    5. '```' → logprob: -3.8076705932617188
    6. '(' → logprob: -4.057670593261719
    7. '`()' → logprob: -4.557670593261719
    8. '('' → logprob: -5.057670593261719
    9. '')' → logprob: -5.682670593261719
    10. '`)' → logprob: -5.682670593261719

Token 9: 'split' (ID: 13627)
  Prédit: 'split'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'split' → logprob: -0.000565541791729629
    2. 'strip' → logprob: -7.500565528869629
    3. 'rstrip' → logprob: -11.875565528869629
    4. ' split' → logprob: -12.625565528869629
    5. 'read' → logprob: -13.875565528869629
    6. ')' → logprob: -13.875565528869629
    7. '(split' → logprob: -15.625565528869629
    8. 'spl' → logprob: -15.625565528869629
    9. 'startswith' → logprob: -17.500566482543945
    10. 's' → logprob: -17.750566482543945

Token 10: '())

' (ID: 27654)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ')' → logprob: -0.10510820895433426
    2. '))' → logprob: -2.4801082611083984
    3. '())' → logprob: -4.230108261108398
    4. '()))' → logprob: -7.605108261108398
    5. '()' → logprob: -7.855108261108398
    6. '('' → logprob: -8.105108261108398
    7. '(' → logprob: -8.480108261108398
    8. '`)' → logprob: -10.730108261108398
    9. ')))' → logprob: -11.355108261108398
    10. ')`' → logprob: -11.730108261108398

Token 11: 'A' (ID: 32)
  Prédit: 'if'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'if' → logprob: -0.8671724200248718
    2. 'a' → logprob: -0.9921724200248718
    3. 'for' → logprob: -1.9921724796295166
    4. 'd' → logprob: -3.9921724796295166
    5. 'x' → logprob: -4.1171722412109375
    6. 's' → logprob: -4.4921722412109375
    7. 'n' → logprob: -5.1171722412109375
    8. 'i' → logprob: -5.3671722412109375
    9. '#' → logprob: -6.4921722412109375
    10. 'result' → logprob: -6.6171722412109375

Token 12: ' =' (ID: 314)
  Prédit: 'rr'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'rr' → logprob: -0.2500384747982025
    2. 'ns' → logprob: -2.7500383853912354
    3. 'r' → logprob: -3.0000383853912354
    4. 'rray' → logprob: -3.2500383853912354
    5. '=' → logprob: -3.3750383853912354
    6. ' =' → logprob: -4.7500386238098145
    7. 'bs' → logprob: -4.8750386238098145
    8. '[' → logprob: -5.1250386238098145
    9. 's' → logprob: -5.8750386238098145
    10. 'pp' → logprob: -6.6250386238098145

Token 13: ' [-' (ID: 20191)
  Prédit: 'list'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'list' → logprob: -0.5397765040397644
    2. ' list' → logprob: -1.0397765636444092
    3. '[]' → logprob: -4.16477632522583
    4. ' [' → logprob: -4.16477632522583
    5. ' []' → logprob: -4.41477632522583
    6. '[list' → logprob: -4.53977632522583
    7. '[' → logprob: -4.78977632522583
    8. '[int' → logprob: -6.91477632522583
    9. '[input' → logprob: -7.91477632522583
    10. 'input' → logprob: -10.914776802062988

Token 14: '1' (ID: 16)
  Prédit: '1'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '1' → logprob: -0.007555390242487192
    2. 'int' → logprob: -5.5075554847717285
    3. 'i' → logprob: -6.7575554847717285
    4. 'n' → logprob: -7.2575554847717285
    5. 'k' → logprob: -7.6325554847717285
    6. '(' → logprob: -8.25755500793457
    7. '-' → logprob: -8.50755500793457
    8. 'x' → logprob: -9.38255500793457
    9. '10' → logprob: -9.38255500793457
    10. '100' → logprob: -9.75755500793457

Token 15: ']' (ID: 60)
  Prédit: ']'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ']' → logprob: -0.28819751739501953
    2. ',' → logprob: -1.4131975173950195
    3. ' for' → logprob: -6.0381975173950195
    4. ' ]' → logprob: -6.1631975173950195
    5. ')' → logprob: -6.7881975173950195
    6. ']*' → logprob: -7.5381975173950195
    7. ' ,' → logprob: -7.9131975173950195
    8. ')]' → logprob: -9.03819751739502
    9. 'for' → logprob: -9.16319751739502
    10. ']*(' → logprob: -9.66319751739502

Token 16: ' *' (ID: 425)
  Prédit: '0'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '0' → logprob: -0.41860437393188477
    2. ' *' → logprob: -1.7936043739318848
    3. '*' → logprob: -2.2936043739318848
    4. ',' → logprob: -3.0436043739318848
    5. ')' → logprob: -5.043604373931885
    6. ' ' → logprob: -5.293604373931885
    7. '[' → logprob: -6.168604373931885
    8. ']' → logprob: -6.168604373931885
    9. '1' → logprob: -6.418604373931885
    10. '000' → logprob: -6.543604373931885

Token 17: ' n' (ID: 297)
  Prédit: '(n'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(n' → logprob: -0.7372317314147949
    2. 'n' → logprob: -1.487231731414795
    3. '(k' → logprob: -1.737231731414795
    4. ' (' → logprob: -2.987231731414795
    5. '(' → logprob: -3.112231731414795
    6. 'k' → logprob: -3.987231731414795
    7. ' n' → logprob: -5.237231731414795
    8. ' k' → logprob: -7.987231731414795
    9. '100' → logprob: -8.362232208251953
    10. ' ' → logprob: -9.612232208251953

Token 18: '

' (ID: 279)
  Prédit: 'for'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'for' → logprob: -0.03755742311477661
    2. '
' → logprob: -3.912557363510132
    3. '
' → logprob: -5.412557601928711
    4. 'k' → logprob: -5.537557601928711
    5. ' for' → logprob: -5.662557601928711
    6. '' → logprob: -6.537557601928711
    7. '\n' → logprob: -7.162557601928711
    8. 'i' → logprob: -7.787557601928711
    9. 's' → logprob: -8.037557601928711
    10. '\' → logprob: -8.412557601928711

Token 19: 'for' (ID: 1938)
  Prédit: 'for'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'for' → logprob: -0.21334287524223328
    2. 'i' → logprob: -3.2133429050445557
    3. ' 
' → logprob: -3.2133429050445557
    4. '
' → logprob: -3.2133429050445557
    5. ' for' → logprob: -3.4633429050445557
    6. 'a' → logprob: -4.463342666625977
    7. 'k' → logprob: -4.588342666625977
    8. 'x' → logprob: -5.838342666625977
    9. '```' → logprob: -5.963342666625977
    10. 'n' → logprob: -6.588342666625977

Token 20: ' i' (ID: 575)
  Prédit: ' i'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' i' → logprob: -0.3942960500717163
    2. ' ' → logprob: -1.1442960500717163
    3. 'i' → logprob: -5.519296169281006
    4. '_' → logprob: -6.269296169281006
    5. ' _' → logprob: -6.769296169281006
    6. '  ' → logprob: -8.519295692443848
    7. ' ‌' → logprob: -9.019295692443848
    8. ' ' → logprob: -11.644295692443848
    9. ')' → logprob: -12.519295692443848
    10. ' )' → logprob: -13.269295692443848

Token 21: ' in' (ID: 306)
  Prédit: ' in'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' in' → logprob: -0.012333869934082031
    2. 'in' → logprob: -4.512333869934082
    3. ' ' → logprob: -6.887333869934082
    4. 'n' → logprob: -8.762333869934082
    5. '  ' → logprob: -9.637333869934082
    6. ' n' → logprob: -10.637333869934082
    7. ',' → logprob: -12.262333869934082
    8. '	in' → logprob: -12.762333869934082
    9. '+' → logprob: -13.262333869934082
    10. 'range' → logprob: -13.387333869934082

Token 22: ' range' (ID: 3352)
  Prédit: ' range'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' range' → logprob: -0.10021109133958817
    2. 'range' → logprob: -2.3502111434936523
    3. '	range' → logprob: -12.975211143493652
    4. ' ' → logprob: -14.225211143493652
    5. '(range' → logprob: -14.850211143493652
    6. ' xrange' → logprob: -14.850211143493652
    7. '_range' → logprob: -15.725211143493652
    8. 'Range' → logprob: -15.975211143493652
    9. '.range' → logprob: -16.100210189819336
    10. ')' → logprob: -16.225210189819336

Token 23: '(k' (ID: 12125)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(' → logprob: -0.01145154982805252
    2. '(n' → logprob: -4.636451721191406
    3. ' (' → logprob: -6.636451721191406
    4. '(k' → logprob: -7.886451721191406
    5. '(i' → logprob: -12.636451721191406
    6. '(
' → logprob: -14.261451721191406
    7. '(range' → logprob: -14.261451721191406
    8. ' ' → logprob: -14.386451721191406
    9. '(s' → logprob: -15.136451721191406
    10. '(space' → logprob: -15.386451721191406

Token 24: '):
' (ID: 1883)
  Prédit: '):'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '):' → logprob: -0.027322525158524513
    2. ')' → logprob: -3.77732253074646
    3. ':' → logprob: -5.777322292327881
    4. '+' → logprob: -7.277322292327881
    5. '):
' → logprob: -8.777322769165039
    6. ' ):' → logprob: -9.402322769165039
    7. ' )' → logprob: -12.152322769165039
    8. ' ' → logprob: -12.152322769165039
    9. ',' → logprob: -12.402322769165039
    10. '**' → logprob: -12.527322769165039

Token 25: '   ' (ID: 271)
  Prédit: ' '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' ' → logprob: -0.7630295753479004
    2. ' A' → logprob: -1.0130295753479004
    3. ' input' → logprob: -2.7630295753479004
    4. ' 
' → logprob: -3.7630295753479004
    5. '   ' → logprob: -4.0130295753479
    6. ' n' → logprob: -4.1380295753479
    7. ' a' → logprob: -4.8880295753479
    8. 'input' → logprob: -4.8880295753479
    9. 'A' → logprob: -5.1380295753479
    10. '```' → logprob: -5.5130295753479

Token 26: ' d' (ID: 272)
  Prédit: ' A'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' A' → logprob: -0.2249128520488739
    2. 'A' → logprob: -1.9749128818511963
    3. ' a' → logprob: -3.5999128818511963
    4. 'a' → logprob: -4.349912643432617
    5. ' x' → logprob: -5.099912643432617
    6. '   ' → logprob: -5.099912643432617
    7. 'x' → logprob: -5.474912643432617
    8. ' ' → logprob: -6.099912643432617
    9. ' input' → logprob: -7.724912643432617
    10. 'input' → logprob: -7.974912643432617

Token 27: ' =' (ID: 314)
  Prédit: ' ='
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' =' → logprob: -0.3981625735759735
    2. ' ' → logprob: -1.898162603378296
    3. 'ata' → logprob: -2.773162603378296
    4. ',' → logprob: -2.898162603378296
    5. '=' → logprob: -3.648162603378296
    6. 'a' → logprob: -3.773162603378296
    7. 'e' → logprob: -6.148162364959717
    8. ',a' → logprob: -6.273162364959717
    9. ' a' → logprob: -6.648162364959717
    10. '   ' → logprob: -6.648162364959717

Token 28: ' int' (ID: 677)
  Prédit: ' int'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' int' → logprob: -0.28130340576171875
    2. 'int' → logprob: -1.4063034057617188
    3. ' ' → logprob: -10.406303405761719
    4. '[int' → logprob: -10.406303405761719
    5. '=int' → logprob: -10.406303405761719
    6. ' input' → logprob: -11.031303405761719
    7. '(int' → logprob: -11.281303405761719
    8. '<int' → logprob: -11.531303405761719
    9. 'input' → logprob: -11.906303405761719
    10. '   ' → logprob: -12.656303405761719

Token 29: '(input' (ID: 10054)
  Prédit: '(input'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(input' → logprob: -0.0009152670972980559
    2. '(' → logprob: -7.000915050506592
    3. 'input' → logprob: -12.62591552734375
    4. ' (' → logprob: -15.50091552734375
    5. '(in' → logprob: -16.50091552734375
    6. ' input' → logprob: -16.62591552734375
    7. '(inp' → logprob: -17.12591552734375
    8. '=input' → logprob: -17.25091552734375
    9. ',input' → logprob: -17.37591552734375
    10. '(
' → logprob: -18.00091552734375

Token 30: '())
' (ID: 4574)
  Prédit: '())'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '())' → logprob: -0.0059916055761277676
    2. '()' → logprob: -5.130991458892822
    3. ')' → logprob: -10.13099193572998
    4. '())
' → logprob: -11.13099193572998
    5. '().' → logprob: -13.13099193572998
    6. '())

' → logprob: -13.63099193572998
    7. '()))' → logprob: -13.75599193572998
    8. '(' → logprob: -13.75599193572998
    9. ' ())' → logprob: -13.88099193572998
    10. '();)' → logprob: -14.25599193572998

Token 31: '   ' (ID: 271)
  Prédit: ''
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False

Token 32: ' a' (ID: 261)
  Prédit: ' A'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' A' → logprob: -0.4980114996433258
    2. ' ' → logprob: -2.248011589050293
    3. 'A' → logprob: -2.998011589050293
    4. ' idx' → logprob: -3.123011589050293
    5. ' for' → logprob: -3.248011589050293
    6. ' if' → logprob: -3.248011589050293
    7. 'idx' → logprob: -3.998011589050293
    8. ' ind' → logprob: -4.123011589050293
    9. '<|end|>' → logprob: -4.498011589050293
    10. '   ' → logprob: -4.498011589050293

Token 33: ' =' (ID: 314)
  Prédit: '['
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '[' → logprob: -0.8517107367515564
    2. '[i' → logprob: -1.4767107963562012
    3. ' =' → logprob: -1.8517107963562012
    4. '[d' → logprob: -2.101710796356201
    5. '[A' → logprob: -3.726710796356201
    6. '=' → logprob: -4.226710796356201
    7. '[a' → logprob: -5.101710796356201
    8. '[:' → logprob: -5.226710796356201
    9. ' ' → logprob: -5.601710796356201
    10. '[:]' → logprob: -6.226710796356201

Token 34: ' list' (ID: 1562)
  Prédit: 'list'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'list' → logprob: -0.330526739358902
    2. ' list' → logprob: -1.3305267095565796
    3. 'map' → logprob: -5.955526828765869
    4. 'int' → logprob: -5.955526828765869
    5. ' d' → logprob: -6.080526828765869
    6. 'd' → logprob: -6.330526828765869
    7. '[int' → logprob: -6.455526828765869
    8. 'input' → logprob: -6.580526828765869
    9. '[' → logprob: -7.205526828765869
    10. '[]' → logprob: -7.330526828765869

Token 35: '(map' (ID: 16946)
  Prédit: '(map'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(map' → logprob: -0.006073960568755865
    2. '(' → logprob: -5.131073951721191
    3. '(int' → logprob: -9.506073951721191
    4. '(input' → logprob: -10.256073951721191
    5. '(range' → logprob: -10.881073951721191
    6. '()' → logprob: -11.381073951721191
    7. '(eval' → logprob: -13.631073951721191
    8. ' (' → logprob: -14.131073951721191
    9. '(filter' → logprob: -14.256073951721191
    10. 'map' → logprob: -14.381073951721191

Token 36: '(int' (ID: 2742)
  Prédit: '(int'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(int' → logprob: -0.0004788128426298499
    2. '(' → logprob: -7.750478744506836
    3. '<int' → logprob: -11.500478744506836
    4. '[int' → logprob: -11.625478744506836
    5. '(lambda' → logprob: -11.750478744506836
    6. '(str' → logprob: -12.000478744506836
    7. 'int' → logprob: -12.375478744506836
    8. '```' → logprob: -12.500478744506836
    9. '=int' → logprob: -13.125478744506836
    10. ' (' → logprob: -13.875478744506836

Token 37: ',' (ID: 11)
  Prédit: ','
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ',' → logprob: -0.25467199087142944
    2. ',input' → logprob: -1.5046720504760742
    3. '(input' → logprob: -6.129672050476074
    4. 'input' → logprob: -8.129672050476074
    5. '(' → logprob: -8.379672050476074
    6. ',int' → logprob: -10.754672050476074
    7. ' ,' → logprob: -12.254672050476074
    8. ' input' → logprob: -12.754672050476074
    9. '```' → logprob: -12.879672050476074
    10. ')' → logprob: -13.129672050476074

Token 38: ' input' (ID: 3422)
  Prédit: 'input'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'input' → logprob: -0.023247575387358665
    2. ' input' → logprob: -3.773247480392456
    3. '(input' → logprob: -13.898247718811035
    4. ' ' → logprob: -15.023247718811035
    5. ',input' → logprob: -15.148247718811035
    6. '=input' → logprob: -15.648247718811035
    7. '	input' → logprob: -16.02324676513672
    8. 'lambda' → logprob: -16.52324676513672
    9. ')' → logprob: -16.64824676513672
    10. '<input' → logprob: -16.77324676513672

Token 39: '().' (ID: 1454)
  Prédit: '().'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '().' → logprob: -5.013994814362377e-05
    2. '(.' → logprob: -10.87505054473877
    3. '.' → logprob: -11.50005054473877
    4. ' .' → logprob: -12.00005054473877
    5. '(' → logprob: -12.37505054473877
    6. '()' → logprob: -12.62505054473877
    7. ',' → logprob: -12.87505054473877
    8. ' ().' → logprob: -13.00005054473877
    9. ').' → logprob: -14.50005054473877
    10. '   ' → logprob: -14.50005054473877

Token 40: 'split' (ID: 13627)
  Prédit: 'split'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'split' → logprob: -1.771655115589965e-05
    2. 'strip' → logprob: -11.000018119812012
    3. '(split' → logprob: -14.875018119812012
    4. 'rstrip' → logprob: -15.000018119812012
    5. ' split' → logprob: -15.250018119812012
    6. 'spl' → logprob: -17.500017166137695
    7. 's' → logprob: -18.625017166137695
    8. ')' → logprob: -18.750017166137695
    9. '```' → logprob: -20.000017166137695
    10. 'read' → logprob: -20.250017166137695

Token 41: '()))
' (ID: 24521)
  Prédit: '))'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '))' → logprob: -0.3776457905769348
    2. '()))' → logprob: -1.87764573097229
    3. ')' → logprob: -2.12764573097229
    4. '(' → logprob: -3.75264573097229
    5. '())' → logprob: -4.127645969390869
    6. '()' → logprob: -6.877645969390869
    7. '('' → logprob: -6.877645969390869
    8. ')))' → logprob: -8.627645492553711
    9. '(','' → logprob: -9.002645492553711
    10. '   ' → logprob: -9.252645492553711

Token 42: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.18929778039455414
    2. ' ' → logprob: -2.939297676086426
    3. ' for' → logprob: -3.064297676086426
    4. '<|end|>' → logprob: -3.064297676086426
    5. 'for' → logprob: -5.439297676086426
    6. '
' → logprob: -5.814297676086426
    7. '```' → logprob: -5.939297676086426
    8. '    
' → logprob: -6.064297676086426
    9. ' 
' → logprob: -6.064297676086426
    10. '[' → logprob: -6.314297676086426

Token 43: ' for' (ID: 395)
  Prédit: ' for'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' for' → logprob: -0.7552586197853088
    2. 'for' (adapté à ' for') → logprob: -0.8802586197853088
    3. '   ' → logprob: -2.255258560180664
    4. 'a' → logprob: -6.130258560180664
    5. ')' → logprob: -6.255258560180664
    6. ':' → logprob: -6.505258560180664
    7. ' ' → logprob: -6.755258560180664
    8. '[' → logprob: -6.880258560180664
    9. 'if' → logprob: -7.130258560180664
    10. ' if' → logprob: -7.505258560180664

Token 44: ' j' (ID: 441)
  Prédit: ' x'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' x' → logprob: -0.40597623586654663
    2. ' j' → logprob: -1.6559762954711914
    3. 'x' → logprob: -2.7809762954711914
    4. 'j' → logprob: -3.6559762954711914
    5. ' a' → logprob: -3.6559762954711914
    6. ' ' → logprob: -4.530976295471191
    7. ' v' → logprob: -4.780976295471191
    8. 'a' → logprob: -5.405976295471191
    9. ' ai' → logprob: -6.155976295471191
    10. 'v' → logprob: -7.030976295471191

Token 45: ' in' (ID: 306)
  Prédit: ' in'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' in' → logprob: -0.05510309338569641
    2. 'in' → logprob: -2.930103063583374
    3. ' ' → logprob: -8.680103302001953
    4. '	in' → logprob: -11.305103302001953
    5. ')' → logprob: -11.430103302001953
    6. '  ' → logprob: -11.555103302001953
    7. 'n' → logprob: -11.805103302001953
    8. 'In' → logprob: -13.305103302001953
    9. 's' → logprob: -13.555103302001953
    10. '<|end|>' → logprob: -14.055103302001953

Token 46: ' range' (ID: 3352)
  Prédit: 'a'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'a' → logprob: -0.2933332920074463
    2. 'range' → logprob: -2.1683332920074463
    3. ' a' → logprob: -2.5433332920074463
    4. ' range' → logprob: -2.7933332920074463
    5. ' ' → logprob: -11.168333053588867
    6. ')' → logprob: -12.668333053588867
    7. '(a' → logprob: -12.793333053588867
    8. '   ' → logprob: -12.918333053588867
    9. ')a' → logprob: -12.918333053588867
    10. '(range' → logprob: -13.168333053588867

Token 47: '(d' (ID: 2572)
  Prédit: '(d'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(d' → logprob: -0.01352393627166748
    2. '(len' → logprob: -4.513524055480957
    3. '(' → logprob: -6.013524055480957
    4. '(k' → logprob: -11.513524055480957
    5. ' (' → logprob: -12.138524055480957
    6. 'd' → logprob: -12.138524055480957
    7. '(n' → logprob: -13.263524055480957
    8. 'len' → logprob: -13.763524055480957
    9. '(s' → logprob: -14.263524055480957
    10. ' d' → logprob: -14.263524055480957

Token 48: '):
' (ID: 1883)
  Prédit: '):'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '):' → logprob: -0.0005760280764661729
    2. ')' → logprob: -7.875576019287109
    3. ':' → logprob: -9.25057601928711
    4. ' ):' → logprob: -9.87557601928711
    5. '):
' → logprob: -10.00057601928711
    6. '   ' → logprob: -14.12557601928711
    7. '}:' → logprob: -15.12557601928711
    8. ',' → logprob: -15.12557601928711
    9. ']:' → logprob: -15.25057601928711
    10. ' )' → logprob: -15.37557601928711

Token 49: '       ' (ID: 309)
  Prédit: '       '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '       ' → logprob: -0.8309200406074524
    2. ' ' → logprob: -1.7059199810028076
    3. '    ' → logprob: -2.0809199810028076
    4. '   ' → logprob: -2.3309199810028076
    5. ':' → logprob: -2.7059199810028076
    6. ' a' → logprob: -3.2059199810028076
    7. ' A' → logprob: -3.9559199810028076
    8. '<|end|>' → logprob: -4.580920219421387
    9. 'a' → logprob: -5.455920219421387
    10. ' 
' → logprob: -5.705920219421387

Token 50: ' x' (ID: 1215)
  Prédit: ' A'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' A' → logprob: -0.8082149624824524
    2. 'A' → logprob: -1.0582149028778076
    3. 'a' → logprob: -2.3082149028778076
    4. ' a' → logprob: -2.9332149028778076
    5. '   ' → logprob: -3.1832149028778076
    6. ' ' → logprob: -5.183215141296387
    7. ' if' → logprob: -5.933215141296387
    8. 'if' → logprob: -6.183215141296387
    9. 'x' (adapté à ' x') → logprob: -7.433215141296387
    10. '-' → logprob: -7.558215141296387

Token 51: ' =' (ID: 314)
  Prédit: ' ='
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' =' → logprob: -0.013871398754417896
    2. '=' → logprob: -4.388871192932129
    3. ',' → logprob: -6.638871192932129
    4. '-' → logprob: -10.888871192932129
    5. ' ' → logprob: -11.763871192932129
    6. ')' → logprob: -12.388871192932129
    7. ' ,' → logprob: -12.638871192932129
    8. ',a' → logprob: -13.013871192932129
    9. '=int' → logprob: -13.013871192932129
    10. '   ' → logprob: -13.263871192932129

Token 52: ' a' (ID: 261)
  Prédit: 'a'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'a' → logprob: -0.011050059460103512
    2. ' a' → logprob: -4.511050224304199
    3. '   ' → logprob: -13.2610502243042
    4. '	a' → logprob: -15.2610502243042
    5. ' ' → logprob: -16.011049270629883
    6. 'int' → logprob: -16.511049270629883
    7. '(a' → logprob: -16.886049270629883
    8. '0' → logprob: -17.136049270629883
    9. '    ' → logprob: -17.761049270629883
    10. '_a' → logprob: -17.761049270629883

Token 53: '[j' (ID: 7895)
  Prédit: '[j'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '[j' → logprob: -5.037835580878891e-05
    2. 'j' → logprob: -10.12505054473877
    3. '[' → logprob: -11.87505054473877
    4. '```' → logprob: -13.75005054473877
    5. ' [' → logprob: -14.37505054473877
    6. '[i' → logprob: -14.87505054473877
    7. '1' → logprob: -15.75005054473877
    8. '-' → logprob: -15.87505054473877
    9. '[a' → logprob: -16.000049591064453
    10. '[
' → logprob: -16.000049591064453

Token 54: ']' (ID: 60)
  Prédit: '-'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '-' → logprob: -0.09118491411209106
    2. ' -' → logprob: -2.4661848545074463
    3. ')' → logprob: -6.341185092926025
    4. ']' → logprob: -8.216184616088867
    5. ']-' → logprob: -10.091184616088867
    6. ')-' → logprob: -10.091184616088867
    7. ' )' → logprob: -10.216184616088867
    8. '[' → logprob: -10.466184616088867
    9. ' ' → logprob: -10.466184616088867
    10. '-)' → logprob: -11.591184616088867

Token 55: ' -' (ID: 533)
  Prédit: '-'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '-' → logprob: -0.24485273659229279
    2. ' -' → logprob: -1.7448527812957764
    3. '<|end|>' → logprob: -3.9948527812957764
    4. ' ' → logprob: -4.619852542877197
    5. '
' → logprob: -5.119852542877197
    6. '[' → logprob: -6.244852542877197
    7. '   ' → logprob: -6.869852542877197
    8. '%' → logprob: -6.869852542877197
    9. ' 
' → logprob: -7.119852542877197
    10. 'if' → logprob: -8.119853019714355

Token 56: ' ' (ID: 220)
  Prédit: '1'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '1' → logprob: -0.0008046258008107543
    2. ' ' → logprob: -7.125804424285889
    3. '<|end|>' → logprob: -16.375804901123047
    4. '2' → logprob: -17.125804901123047
    5. '   ' → logprob: -17.250804901123047
    6. '１' → logprob: -18.313304901123047
    7. '  ' → logprob: -18.438304901123047
    8. ' ' → logprob: -18.625804901123047
    9. '-' → logprob: -18.750804901123047
    10. '>' → logprob: -19.313304901123047

Token 57: '1' (ID: 16)
  Prédit: '1'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '1' → logprob: -1.1517960956552997e-05
    2. ' ' → logprob: -11.375011444091797
    3. '2' → logprob: -16.875011444091797
    4. '0' → logprob: -17.562511444091797
    5. '   ' → logprob: -18.125011444091797
    6. 'x' → logprob: -18.125011444091797
    7. 'j' → logprob: -18.187511444091797
    8. 'a' → logprob: -18.312511444091797
    9. '１' → logprob: -18.312511444091797
    10. 'i' → logprob: -18.812511444091797

Token 58: '
' (ID: 198)
  Prédit: '
'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '
' → logprob: -0.47220030426979065
    2. '<|end|>' → logprob: -1.3472002744674683
    3. ' if' → logprob: -3.097200393676758
    4. ' A' → logprob: -4.222200393676758
    5. 'A' → logprob: -4.222200393676758
    6. 'if' → logprob: -4.722200393676758
    7. '   ' → logprob: -4.847200393676758
    8. '    
' → logprob: -5.347200393676758
    9. '<|end|>' → logprob: -5.847200393676758
    10. ')' → logprob: -5.847200393676758

Token 59: '       ' (ID: 309)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '   ' → logprob: -1.1610076427459717
    2. '<|end|>' → logprob: -1.6610076427459717
    3. '
' → logprob: -2.0360076427459717
    4. '```' → logprob: -2.2860076427459717
    5. 'A' → logprob: -2.5360076427459717
    6. '    
' → logprob: -2.9110076427459717
    7. ' if' → logprob: -3.2860076427459717
    8. ' A' → logprob: -4.411007881164551
    9. '``' → logprob: -4.411007881164551
    10. ' ' → logprob: -4.536007881164551

Token 60: ' if' (ID: 538)
  Prédit: 'A'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'A' → logprob: -0.2450135052204132
    2. 'if' (adapté à ' if') → logprob: -1.6200134754180908
    3. ' if' → logprob: -4.37001371383667
    4. ' A' → logprob: -5.62001371383667
    5. '   ' → logprob: -5.99501371383667
    6. '       ' → logprob: -8.120013236999512
    7. '```' → logprob: -8.870013236999512
    8. ' ' → logprob: -9.620013236999512
    9. '`' → logprob: -11.120013236999512
    10. ')' → logprob: -11.370013236999512

Token 61: ' A' (ID: 355)
  Prédit: 'A'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'A' → logprob: -0.47432053089141846
    2. ' A' → logprob: -0.9743205308914185
    3. ' ' → logprob: -8.474320411682129
    4. '   ' → logprob: -11.724320411682129
    5. 'n' → logprob: -12.224320411682129
    6. 'x' → logprob: -12.224320411682129
    7. '	A' → logprob: -12.224320411682129
    8. ' n' → logprob: -12.849320411682129
    9. '0' → logprob: -13.224320411682129
    10. ' x' → logprob: -13.724320411682129

Token 62: '[x' (ID: 17295)
  Prédit: '[x'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '[x' → logprob: -2.2723104848410003e-05
    2. '[' → logprob: -10.750022888183594
    3. 'x' → logprob: -14.000022888183594
    4. '[
' → logprob: -16.375022888183594
    5. ' [' → logprob: -16.500022888183594
    6. '[j' → logprob: -16.625022888183594
    7. '<x' → logprob: -16.750022888183594
    8. '\[' → logprob: -16.750022888183594
    9. '[i' → logprob: -17.250022888183594
    10. '[n' → logprob: -17.625022888183594

Token 63: ']' (ID: 60)
  Prédit: '=='
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '==' → logprob: -0.033440280705690384
    2. ' ==' → logprob: -3.908440351486206
    3. ')' → logprob: -5.283440113067627
    4. '!=' → logprob: -5.783440113067627
    5. '==-' → logprob: -5.783440113067627
    6. ']==' → logprob: -7.533440113067627
    7. ']' → logprob: -7.533440113067627
    8. '=' → logprob: -8.408440589904785
    9. '<' → logprob: -8.908440589904785
    10. ')==' → logprob: -10.033440589904785

Token 64: ' ==' (ID: 951)
  Prédit: '=='
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '==' → logprob: -0.23137624561786652
    2. ' ==' → logprob: -1.60637629032135
    3. '!=' → logprob: -5.9813761711120605
    4. '==-' → logprob: -5.9813761711120605
    5. '<' → logprob: -7.9813761711120605
    6. ' !=' → logprob: -8.106376647949219
    7. '=' → logprob: -9.731376647949219
    8. ']==' → logprob: -9.981376647949219
    9. ' ' → logprob: -10.231376647949219
    10. ')' → logprob: -10.231376647949219

Token 65: ' -' (ID: 533)
  Prédit: '-'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '-' → logprob: -0.0017055326607078314
    2. ' -' → logprob: -6.376705646514893
    3. ' ' → logprob: -12.876705169677734
    4. '0' → logprob: -15.376705169677734
    5. '   ' → logprob: -15.626705169677734
    6. '  ' → logprob: -16.501705169677734
    7. '-n' → logprob: -16.501705169677734
    8. '1' → logprob: -16.814205169677734
    9. '‌' → logprob: -17.001705169677734
    10. '−' → logprob: -17.439205169677734

Token 66: '1' (ID: 16)
  Prédit: '1'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '1' → logprob: -1.0325924449716695e-05
    2. '2' → logprob: -12.25001049041748
    3. ' ' → logprob: -12.25001049041748
    4. ')' → logprob: -16.187509536743164
    5. '  ' → logprob: -16.500009536743164
    6. '">' → logprob: -16.812509536743164
    7. '```' → logprob: -16.937509536743164
    8. 'k' → logprob: -17.000009536743164
    9. '   ' → logprob: -17.187509536743164
    10. 'n' → logprob: -17.562509536743164

Token 67: ':
' (ID: 734)
  Prédit: ':'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ':' → logprob: -0.057725828140974045
    2. ' or' → logprob: -2.9327259063720703
    3. ' :' → logprob: -5.93272590637207
    4. 'or' → logprob: -9.30772590637207
    5. '):' → logprob: -10.43272590637207
    6. ' ' → logprob: -10.93272590637207
    7. '=' → logprob: -11.18272590637207
    8. ':
' → logprob: -11.55772590637207
    9. ' and' → logprob: -11.55772590637207
    10. ')' → logprob: -12.18272590637207

Token 68: '           ' (ID: 352)
  Prédit: ':'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ':' → logprob: -0.21607694029808044
    2. '       ' → logprob: -2.3410768508911133
    3. ' or' → logprob: -2.4660768508911133
    4. '   ' → logprob: -5.841076850891113
    5. ' :' → logprob: -6.091076850891113
    6. '           ' → logprob: -6.091076850891113
    7. '):' → logprob: -6.591076850891113
    8. '<|end|>' → logprob: -7.091076850891113
    9. ':
' → logprob: -7.341076850891113
    10. ' A' → logprob: -7.716076850891113

Token 69: ' A' (ID: 355)
  Prédit: 'A'
  Correct (stricte): False
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'A' (adapté à ' A') → logprob: -0.30026620626449585
    2. 'i' → logprob: -2.0502662658691406
    3. '0' → logprob: -2.5502662658691406
    4. '           ' → logprob: -4.050266265869141
    5. ' A' → logprob: -4.050266265869141
    6. ' i' → logprob: -5.175266265869141
    7. '   ' → logprob: -5.300266265869141
    8. 'k' → logprob: -6.300266265869141
    9. ' ' → logprob: -6.550266265869141
    10. '               ' → logprob: -6.550266265869141

Token 70: '[x' (ID: 17295)
  Prédit: '[x'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '[x' → logprob: -0.0021971215028315783
    2. '[' → logprob: -6.127197265625
    3. '[i' → logprob: -12.627197265625
    4. '[j' → logprob: -13.252197265625
    5. 'x' → logprob: -13.252197265625
    6. '[
' → logprob: -14.002197265625
    7. ' [' → logprob: -14.252197265625
    8. '[s' → logprob: -14.377197265625
    9. '=' → logprob: -14.502197265625
    10. '<|end|>' → logprob: -15.252197265625

Token 71: ']' (ID: 60)
  Prédit: ']'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ']' → logprob: -0.2196505069732666
    2. '=' → logprob: -1.9696505069732666
    3. ' =' → logprob: -3.5946505069732666
    4. ')' → logprob: -3.7196505069732666
    5. ']=' → logprob: -5.2196502685546875
    6. ' ]' → logprob: -8.344650268554688
    7. ')=' → logprob: -8.594650268554688
    8. '<|end|>' → logprob: -9.969650268554688
    9. ' ' → logprob: -10.344650268554688
    10. ' )' → logprob: -10.844650268554688

Token 72: ' =' (ID: 314)
  Prédit: ' ='
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' =' → logprob: -0.2014213353395462
    2. '=' → logprob: -1.7014213800430298
    3. ' ' → logprob: -11.951421737670898
    4. '<|end|>' → logprob: -15.451421737670898
    5. ')' → logprob: -15.701421737670898
    6. '=i' → logprob: -15.888921737670898
    7. '=int' → logprob: -16.3264217376709
    8. '＝' → logprob: -16.5139217376709
    9. '=j' → logprob: -16.5139217376709
    10. ',' → logprob: -16.5764217376709

Token 73: ' ' (ID: 220)
  Prédit: 'i'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'i' → logprob: -0.000591278774663806
    2. ' i' → logprob: -7.750591278076172
    3. '0' → logprob: -9.625591278076172
    4. 'k' → logprob: -10.000591278076172
    5. '   ' → logprob: -11.125591278076172
    6. 'j' → logprob: -11.750591278076172
    7. 'n' → logprob: -11.875591278076172
    8. '1' → logprob: -12.250591278076172
    9. ' ' → logprob: -12.375591278076172
    10. 'd' → logprob: -12.500591278076172

Token 74: '1' (ID: 16)
  Prédit: 'i'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'i' → logprob: -0.00032843282679095864
    2. '0' → logprob: -8.875328063964844
    3. 'k' → logprob: -9.875328063964844
    4. ' i' → logprob: -9.875328063964844
    5. 'd' → logprob: -10.375328063964844
    6. 'j' → logprob: -10.875328063964844
    7. 'n' → logprob: -11.500328063964844
    8. '1' → logprob: -11.625328063964844
    9. '   ' → logprob: -12.750328063964844
    10. ' ' → logprob: -13.250328063964844

Token 75: '

' (ID: 279)
  Prédit: ' else'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' else' → logprob: -0.8234148621559143
    2. 'else' → logprob: -1.1984148025512695
    3. '       ' → logprob: -1.6984148025512695
    4. ' ' → logprob: -3.5734148025512695
    5. '<|end|>' → logprob: -3.8234148025512695
    6. ' elif' → logprob: -4.6984148025512695
    7. 'elif' → logprob: -4.8234148025512695
    8. '   ' → logprob: -5.4484148025512695
    9. '
' → logprob: -6.8234148025512695
    10. '        ' → logprob: -7.1984148025512695

Token 76: 'ans' (ID: 616)
  Prédit: 'else'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'else' → logprob: -0.6409851312637329
    2. ' else' → logprob: -0.8909851312637329
    3. '       ' → logprob: -3.6409850120544434
    4. '   ' → logprob: -4.015985012054443
    5. 'elif' → logprob: -5.015985012054443
    6. ' ' → logprob: -5.515985012054443
    7. ' elif' → logprob: -5.640985012054443
    8. '<|end|>' → logprob: -5.765985012054443
    9. '-' → logprob: -8.515985488891602
    10. '    ' → logprob: -8.765985488891602

Token 77: ' =' (ID: 314)
  Prédit: ' ='
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' =' → logprob: -0.06123105064034462
    2. '=' → logprob: -3.9362311363220215
    3. '.append' → logprob: -4.0612311363220215
    4. '.' → logprob: -4.1862311363220215
    5. '[:]' → logprob: -6.8112311363220215
    6. ')' → logprob: -7.3112311363220215
    7. ' ' → logprob: -7.3112311363220215
    8. ' +=' → logprob: -7.5612311363220215
    9. '<|end|>' → logprob: -7.5612311363220215
    10. ',' → logprob: -7.6862311363220215

Token 78: ' ' (ID: 220)
  Prédit: ' sum'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' sum' → logprob: -1.4055109024047852
    2. ' A' → logprob: -1.5305109024047852
    3. 'sum' → logprob: -1.9055109024047852
    4. '"' → logprob: -2.280510902404785
    5. ''' → logprob: -2.280510902404785
    6. 'A' → logprob: -2.405510902404785
    7. ' n' → logprob: -3.405510902404785
    8. ' max' → logprob: -4.780510902404785
    9. 'n' → logprob: -4.905510902404785
    10. ' len' → logprob: -5.030510902404785

Token 79: '0' (ID: 15)
  Prédit: 'A'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'A' → logprob: -0.12959140539169312
    2. 'sum' → logprob: -2.629591464996338
    3. 'n' → logprob: -3.254591464996338
    4. 'str' → logprob: -6.129591464996338
    5. 'len' → logprob: -6.379591464996338
    6. 'k' → logprob: -6.379591464996338
    7. ' A' → logprob: -7.129591464996338
    8. 'ans' → logprob: -7.504591464996338
    9. '-' → logprob: -7.504591464996338
    10. '0' → logprob: -7.629591464996338

Token 80: '

' (ID: 279)
  Prédit: '
'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '
' → logprob: -0.42698147892951965
    2. 'for' → logprob: -1.3019814491271973
    3. '\n' → logprob: -3.1769814491271973
    4. '<|end|>' → logprob: -4.051981449127197
    5. ' for' → logprob: -4.301981449127197
    6. ' 
' → logprob: -7.301981449127197
    7. '+' → logprob: -7.426981449127197
    8. '```' → logprob: -7.801981449127197
    9. '   ' → logprob: -8.426981925964355
    10. '' → logprob: -8.926981925964355

Token 81: 'for' (ID: 1938)
  Prédit: 'for'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'for' → logprob: -0.000781634240411222
    2. 'print' → logprob: -7.375781536102295
    3. ' for' → logprob: -9.125782012939453
    4. '```' → logprob: -10.375782012939453
    5. '
' → logprob: -11.500782012939453
    6. 'ans' → logprob: -12.875782012939453
    7. '   ' → logprob: -14.500782012939453
    8. 'else' → logprob: -14.625782012939453
    9. 'A' → logprob: -15.000782012939453
    10. '0' → logprob: -15.500782012939453

Token 82: ' i' (ID: 575)
  Prédit: ' i'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' i' → logprob: -0.14475977420806885
    2. 'i' → logprob: -2.0197596549987793
    3. ' x' → logprob: -7.394759654998779
    4. '_' → logprob: -8.519760131835938
    5. ' a' → logprob: -8.644760131835938
    6. ' A' → logprob: -8.769760131835938
    7. 'x' → logprob: -8.769760131835938
    8. 'a' → logprob: -8.894760131835938
    9. ' v' → logprob: -9.019760131835938
    10. 'A' → logprob: -9.019760131835938

Token 83: ' in' (ID: 306)
  Prédit: ' in'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' in' → logprob: -0.009944960474967957
    2. 'in' → logprob: -4.634944915771484
    3. ' ' → logprob: -9.009944915771484
    4. 'range' → logprob: -9.884944915771484
    5. ' range' → logprob: -11.134944915771484
    6. '  ' → logprob: -14.884944915771484
    7. 'n' → logprob: -15.509944915771484
    8. ',' → logprob: -16.259944915771484
    9. '```' → logprob: -16.634944915771484
    10. 'A' → logprob: -16.634944915771484

Token 84: ' range' (ID: 3352)
  Prédit: ' range'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' range' → logprob: -0.06257332861423492
    2. 'range' → logprob: -2.8125734329223633
    3. ' A' → logprob: -7.937573432922363
    4. 'A' → logprob: -8.312573432922363
    5. ' ' → logprob: -13.937573432922363
    6. '(range' → logprob: -14.437573432922363
    7. '   ' → logprob: -15.187573432922363
    8. '	range' → logprob: -15.562573432922363
    9. '  ' → logprob: -15.687573432922363
    10. 'r' → logprob: -15.937573432922363

Token 85: '(n' (ID: 2406)
  Prédit: '(n'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(n' → logprob: -0.0009187239338643849
    2. '(' → logprob: -7.125918865203857
    3. '(len' → logprob: -9.3759183883667
    4. '(range' → logprob: -10.7509183883667
    5. 'n' → logprob: -12.3759183883667
    6. 'range' → logprob: -13.3759183883667
    7. ' range' → logprob: -13.8759183883667
    8. '(A' → logprob: -14.8759183883667
    9. ' (' → logprob: -15.0009183883667
    10. '(
' → logprob: -15.6259183883667

Token 86: '):
' (ID: 1883)
  Prédit: '):
'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '):
' → logprob: -0.28176209330558777
    2. '):' → logprob: -1.4067621231079102
    3. '):
' → logprob: -8.28176212310791
    4. ':' → logprob: -8.90676212310791
    5. ' ):
' → logprob: -9.40676212310791
    6. ':
' → logprob: -10.03176212310791
    7. ')' → logprob: -10.40676212310791
    8. '):

' → logprob: -10.65676212310791
    9. ' ):' → logprob: -10.90676212310791
    10. '+' → logprob: -11.65676212310791

Token 87: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.038712382316589355
    2. ' if' → logprob: -3.663712501525879
    3. ' ' → logprob: -5.413712501525879
    4. '<|end|>' → logprob: -6.163712501525879
    5. '```' → logprob: -6.413712501525879
    6. ':' → logprob: -6.413712501525879
    7. 'if' → logprob: -6.788712501525879
    8. '    
' → logprob: -8.288712501525879
    9. ' 
' → logprob: -8.413712501525879
    10. ':
' → logprob: -8.538712501525879

Token 88: ' if' (ID: 538)
  Prédit: 'if'
  Correct (stricte): False
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'if' (adapté à ' if') → logprob: -0.16390854120254517
    2. ' if' → logprob: -2.4139084815979004
    3. '   ' → logprob: -2.7889084815979004
    4. ' ' → logprob: -9.663908958435059
    5. '```' → logprob: -9.913908958435059
    6. '	if' → logprob: -10.163908958435059
    7. 'ans' → logprob: -10.913908958435059
    8. '       ' → logprob: -11.038908958435059
    9. '
' → logprob: -11.538908958435059
    10. '<|end|>' → logprob: -11.663908958435059

Token 89: ' A' (ID: 355)
  Prédit: ' A'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' A' → logprob: -0.089200958609581
    2. 'A' → logprob: -2.464200973510742
    3. '   ' → logprob: -8.714200973510742
    4. ' ' → logprob: -9.339200973510742
    5. '  ' → logprob: -12.589200973510742
    6. '	A' → logprob: -12.589200973510742
    7. ' ' → logprob: -13.589200973510742
    8. '    ' → logprob: -14.464200973510742
    9. '(A' → logprob: -15.714200973510742
    10. ' not' → logprob: -16.026700973510742

Token 90: '[i' (ID: 1768)
  Prédit: '[i'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '[i' → logprob: -6.630610641877865e-06
    2. '[' → logprob: -12.375006675720215
    3. 'i' → logprob: -14.375006675720215
    4. '[
' → logprob: -14.750006675720215
    5. '[A' → logprob: -14.875006675720215
    6. '```' → logprob: -15.250006675720215
    7. '[I' → logprob: -15.375006675720215
    8. ' [' → logprob: -15.875006675720215
    9. '[a' → logprob: -16.3750057220459
    10. '[x' → logprob: -16.5000057220459

Token 91: ']' (ID: 60)
  Prédit: '=='
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '==' → logprob: -0.07964920997619629
    2. ' ==' → logprob: -2.8296492099761963
    3. ')' → logprob: -4.829648971557617
    4. '!=' → logprob: -5.204648971557617
    5. '==-' → logprob: -5.954648971557617
    6. ' !=' → logprob: -7.079648971557617
    7. ']==' → logprob: -8.829648971557617
    8. ' ' → logprob: -9.079648971557617
    9. ')==' → logprob: -9.204648971557617
    10. ']' → logprob: -9.204648971557617

Token 92: ' ==' (ID: 951)
  Prédit: '=='
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '==' → logprob: -0.038793113082647324
    2. ' ==' → logprob: -4.038793087005615
    3. '!=' → logprob: -4.288793087005615
    4. '==-' → logprob: -5.163793087005615
    5. ' !=' → logprob: -7.913793087005615
    6. '<' → logprob: -7.913793087005615
    7. '<=' → logprob: -9.163793563842773
    8. ' ' → logprob: -9.788793563842773
    9. '!=-' → logprob: -9.913793563842773
    10. '==
' → logprob: -11.538793563842773

Token 93: ' -' (ID: 533)
  Prédit: '-'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '-' → logprob: -0.08034820854663849
    2. '1' → logprob: -2.830348253250122
    3. '0' → logprob: -4.705348014831543
    4. ' ' → logprob: -5.080348014831543
    5. ' -' → logprob: -5.830348014831543
    6. '   ' → logprob: -12.892848014831543
    7. '2' → logprob: -12.955348014831543
    8. '  ' → logprob: -13.580348014831543
    9. '```' → logprob: -14.205348014831543
    10. '10' → logprob: -14.455348014831543

Token 94: '1' (ID: 16)
  Prédit: '1'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '1' → logprob: -0.00018768629524856806
    2. '-' → logprob: -8.625187873840332
    3. ' -' → logprob: -13.062687873840332
    4. ' ' → logprob: -13.312687873840332
    5. '```' → logprob: -14.250187873840332
    6. '2' → logprob: -14.687687873840332
    7. ''s' → logprob: -15.500187873840332
    8. '">' → logprob: -15.562687873840332
    9. '0' → logprob: -15.562687873840332
    10. '(-' → logprob: -15.937687873840332

Token 95: ':
' (ID: 734)
  Prédit: ':
'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ':
' → logprob: -0.4740954041481018
    2. ':' → logprob: -0.9740954041481018
    3. ' :
' → logprob: -11.724095344543457
    4. '):
' → logprob: -12.099095344543457
    5. ':
' → logprob: -13.099095344543457
    6. ':

' → logprob: -13.474095344543457
    7. ' :' → logprob: -14.724095344543457
    8. '):' → logprob: -15.849095344543457
    9. ')' → logprob: -15.849095344543457
    10. ' and' → logprob: -16.099096298217773

Token 96: '       ' (ID: 309)
  Prédit: '       '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '       ' → logprob: -0.23618410527706146
    2. '   ' → logprob: -1.6111841201782227
    3. 'ans' → logprob: -4.986184120178223
    4. ':
' → logprob: -6.861184120178223
    5. ' ans' → logprob: -7.111184120178223
    6. '
' → logprob: -7.736184120178223
    7. '1' → logprob: -7.736184120178223
    8. '```' → logprob: -7.986184120178223
    9. ':' → logprob: -8.486184120178223
    10. '    
' → logprob: -8.986184120178223

Token 97: ' ans' (ID: 3345)
  Prédit: 'ans'
  Correct (stricte): False
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'ans' (adapté à ' ans') → logprob: -0.015599177218973637
    2. ' ans' → logprob: -4.640599250793457
    3. '   ' → logprob: -5.640599250793457
    4. '
' → logprob: -6.515599250793457
    5. '       ' → logprob: -8.265599250793457
    6. '```' → logprob: -8.390599250793457
    7. '	ans' → logprob: -8.640599250793457
    8. '0' → logprob: -10.515599250793457
    9. '           ' → logprob: -10.640599250793457
    10. 'answer' → logprob: -10.765599250793457

Token 98: ' +=' (ID: 2757)
  Prédit: ' +='
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' +=' → logprob: -0.693751871585846
    2. '+=' → logprob: -0.693751871585846
    3. '=' → logprob: -7.568751811981201
    4. '+' → logprob: -9.94375228881836
    5. ' =' → logprob: -10.19375228881836
    6. '+=(' → logprob: -14.31875228881836
    7. ']+=' → logprob: -14.56875228881836
    8. ' -=' → logprob: -14.94375228881836
    9. '1' → logprob: -14.94375228881836
    10. '+="' → logprob: -15.44375228881836

Token 99: ' ' (ID: 220)
  Prédit: '1'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '1' → logprob: -0.0003196154139004648
    2. '2' → logprob: -8.750319480895996
    3. ' ' → logprob: -8.875319480895996
    4. '0' → logprob: -11.250319480895996
    5. '100' → logprob: -12.875319480895996
    6. '999' → logprob: -14.000319480895996
    7. 'n' → logprob: -14.000319480895996
    8. '
' → logprob: -14.125319480895996
    9. 'count' → logprob: -14.750319480895996
    10. 'k' → logprob: -14.750319480895996

Token 100: '1' (ID: 16)
  Prédit: '1'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '1' → logprob: -1.771655115589965e-05
    2. ' ' → logprob: -11.625018119812012
    3. '2' → logprob: -12.375018119812012
    4. '0' → logprob: -12.500018119812012
    5. '100' → logprob: -14.750018119812012
    6. '999' → logprob: -16.125017166137695
    7. '
' → logprob: -16.625017166137695
    8. 'k' → logprob: -16.625017166137695
    9. 'count' → logprob: -16.875017166137695
    10. 'n' → logprob: -17.000017166137695

Token 101: '

' (ID: 279)
  Prédit: 'print'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'print' → logprob: -0.005250472575426102
    2. '
' → logprob: -5.255250453948975
    3. ' print' → logprob: -11.880250930786133
    4. '
' → logprob: -12.505250930786133
    5. '```' → logprob: -13.130250930786133
    6. '

' → logprob: -13.630250930786133
    7. '  
' → logprob: -14.005250930786133
    8. ' 
' → logprob: -14.380250930786133
    9. ')
' → logprob: -14.630250930786133
    10. '\n' → logprob: -15.130250930786133

Token 102: 'print' (ID: 1598)
  Prédit: 'print'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'print' → logprob: -8.180258191714529e-06
    2. '
' → logprob: -11.750008583068848
    3. '```' → logprob: -15.875008583068848
    4. ' print' → logprob: -16.37500762939453
    5. 'pr' → logprob: -19.00000762939453
    6. '#print' → logprob: -19.50000762939453
    7. '
' → logprob: -19.62500762939453
    8. '\n' → logprob: -19.75000762939453
    9. '(print' → logprob: -20.25000762939453
    10. '``' → logprob: -20.37500762939453

Token 103: '(ans' (ID: 70054)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(' → logprob: -0.10053768754005432
    2. '(ans' → logprob: -2.3505377769470215
    3. '()' → logprob: -8.100537300109863
    4. '(len' → logprob: -11.850537300109863
    5. '("("' → logprob: -11.975537300109863
    6. '('' → logprob: -12.475537300109863
    7. '(
' → logprob: -13.350537300109863
    8. '(`' → logprob: -13.600537300109863
    9. ' (' → logprob: -13.725537300109863
    10. '((' → logprob: -13.850537300109863

Token 104: ')' (ID: 8)
  Prédit: ')'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')' → logprob: -1.5048530030981055e-06
    2. ' )' → logprob: -14.500001907348633
    3. '))' → logprob: -14.750001907348633
    4. ')`' → logprob: -14.750001907348633
    5. '()' → logprob: -16.250001907348633
    6. '())' → logprob: -16.625001907348633
    7. '`)' → logprob: -17.125001907348633
    8. ')}' → logprob: -18.000001907348633
    9. '(' → logprob: -18.000001907348633
    10. ')
' → logprob: -18.625001907348633


RÉSUMÉ:
--------------------------------------------------------------------------------
Total des tokens analysés: 102
Tokens correctement prédits (1ère position, stricte): 46
Tokens correctement prédits (1ère position, avec adaptation): 49
Tokens correctement prédits (top 10): 88
Précision stricte (1ère position): 45.10%
Précision adaptée (1ère position): 48.04%
Précision (top 10): 86.27%
================================================================================
