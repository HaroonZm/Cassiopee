================================================================================
ANALYSE DE PRÉDICTION TOKEN PAR TOKEN (BATCH API)
Date: 2025-06-04 19:43:36
Modèle de tokenisation: gpt-4o-mini
================================================================================

SCRIPT ANALYSÉ:
--------------------------------------------------------------------------------
N, K = map(int, input().split())
h = list(map(int, input().split()))

cnt = 0
for i in range(N):
    if h[i] >= K:
        cnt += 1

print(cnt)
--------------------------------------------------------------------------------

RÉSULTATS D'ANALYSE TOKEN PAR TOKEN:
--------------------------------------------------------------------------------
Token 0: 'N' (ID: 45)
  → Token d'amorce (pas de prédiction)

Token 1: ',' (ID: 11)
  → Token d'amorce (pas de prédiction)

Token 2: ' K' (ID: 658)
  → Token d'amorce (pas de prédiction)

Token 3: ' =' (ID: 314)
  Prédit: '='
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '=' → logprob: -0.02342972159385681
    2. ' =' → logprob: -4.148429870605469
    3. ',' → logprob: -5.023429870605469
    4. '.' → logprob: -8.398429870605469
    5. '+' → logprob: -9.023429870605469
    6. ')' → logprob: -9.273429870605469
    7. '[' → logprob: -9.398429870605469
    8. '#' → logprob: -10.148429870605469
    9. '```' → logprob: -10.398429870605469
    10. ''' → logprob: -10.398429870605469

Token 4: ' map' (ID: 4014)
  Prédit: ' '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' ' → logprob: -0.6507391333580017
    2. ' map' → logprob: -1.1507391929626465
    3. 'map' → logprob: -2.5257391929626465
    4. '10' → logprob: -2.7757391929626465
    5. 'input' → logprob: -5.5257391929626465
    6. '0' → logprob: -5.5257391929626465
    7. ' input' → logprob: -5.7757391929626465
    8. '20' → logprob: -6.6507391929626465
    9. ' int' → logprob: -6.6507391929626465
    10. 'int' → logprob: -6.6507391929626465

Token 5: '(int' (ID: 2742)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(' → logprob: -0.691144585609436
    2. '<|end|>' → logprob: -0.816144585609436
    3. '```' → logprob: -4.0661444664001465
    4. '<|end|>' → logprob: -4.4411444664001465
    5. '(lambda' → logprob: -4.8161444664001465
    6. ')' → logprob: -5.3161444664001465
    7. '(int' → logprob: -6.1911444664001465
    8. '(user' → logprob: -6.6911444664001465
    9. '(range' → logprob: -7.3786444664001465
    10. '(token' → logprob: -7.4411444664001465

Token 6: ',' (ID: 11)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ')' → logprob: -0.318373441696167
    2. '(input' → logprob: -1.443373441696167
    3. '(' → logprob: -3.943373441696167
    4. '```' → logprob: -5.193373680114746
    5. '`)' → logprob: -5.318373680114746
    6. 'input' → logprob: -6.318373680114746
    7. '`' → logprob: -6.568373680114746
    8. '(user' → logprob: -6.568373680114746
    9. ')(' → logprob: -7.568373680114746
    10. '(int' → logprob: -8.693373680114746

Token 7: ' input' (ID: 3422)
  Prédit: 'input'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'input' → logprob: -0.023349830880761147
    2. ' input' → logprob: -3.7733497619628906
    3. '(input' → logprob: -9.27334976196289
    4. ')' → logprob: -11.64834976196289
    5. ',input' → logprob: -13.89834976196289
    6. '[input' → logprob: -15.64834976196289
    7. '```' → logprob: -15.89834976196289
    8. '<input' → logprob: -16.02334976196289
    9. '=input' → logprob: -16.14834976196289
    10. 'user' → logprob: -16.39834976196289

Token 8: '().' (ID: 1454)
  Prédit: '())'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '())' → logprob: -0.645222008228302
    2. '()' → logprob: -1.0202219486236572
    3. ')' → logprob: -3.3952219486236572
    4. '(' → logprob: -3.6452219486236572
    5. '(""))' → logprob: -3.8952219486236572
    6. '('' → logprob: -4.520222187042236
    7. '("")' → logprob: -5.395222187042236
    8. '());' → logprob: -6.020222187042236
    9. '();)' → logprob: -6.020222187042236
    10. '().' → logprob: -6.270222187042236

Token 9: 'split' (ID: 13627)
  Prédit: 'split'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'split' → logprob: -0.0007239909609779716
    2. 'strip' → logprob: -7.250723838806152
    3. 'rstrip' → logprob: -11.750723838806152
    4. ' split' → logprob: -12.750723838806152
    5. ')' → logprob: -13.000723838806152
    6. 'read' → logprob: -14.250723838806152
    7. 'spl' → logprob: -15.250723838806152
    8. '(split' → logprob: -16.00072479248047
    9. 'startswith' → logprob: -16.25072479248047
    10. 'replace' → logprob: -17.50072479248047

Token 10: '())
' (ID: 4574)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ')' → logprob: -0.03583139553666115
    2. '))' → logprob: -3.7858314514160156
    3. '())' → logprob: -4.410831451416016
    4. '()' → logprob: -8.660831451416016
    5. '()))' → logprob: -9.785831451416016
    6. '(' → logprob: -9.910831451416016
    7. '`)' → logprob: -10.160831451416016
    8. ')`' → logprob: -11.660831451416016
    9. '>)' → logprob: -11.910831451416016
    10. ')))' → logprob: -12.285831451416016

Token 11: 'h' (ID: 71)
  Prédit: 'a'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'a' → logprob: -0.40327686071395874
    2. 'x' → logprob: -2.5282769203186035
    3. '\n' → logprob: -3.2782769203186035
    4. '`' → logprob: -3.6532769203186035
    5. 's' → logprob: -3.6532769203186035
    6. '#' → logprob: -3.6532769203186035
    7. 'for' → logprob: -3.7782769203186035
    8. 'n' → logprob: -3.7782769203186035
    9. 'if' → logprob: -4.5282769203186035
    10. '```' → logprob: -4.5282769203186035

Token 12: ' =' (ID: 314)
  Prédit: '['
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '[' → logprob: -0.040783364325761795
    2. 'e' → logprob: -3.790783405303955
    3. '[i' → logprob: -4.415783405303955
    4. '_' → logprob: -6.665783405303955
    5. '[]' → logprob: -6.790783405303955
    6. '[e' → logprob: -7.040783405303955
    7. ' =' → logprob: -7.290783405303955
    8. 's' → logprob: -8.040782928466797
    9. '=' → logprob: -8.540782928466797
    10. 'ights' → logprob: -8.790782928466797

Token 13: ' list' (ID: 1562)
  Prédit: 'list'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'list' → logprob: -0.5111168622970581
    2. ' list' → logprob: -1.011116862297058
    3. ' [' → logprob: -3.8861169815063477
    4. '[' → logprob: -4.386116981506348
    5. '[int' → logprob: -6.636116981506348
    6. '[list' → logprob: -6.636116981506348
    7. '[]' → logprob: -7.636116981506348
    8. ' []' → logprob: -8.386116981506348
    9. 'map' → logprob: -10.886116981506348
    10. '[input' → logprob: -11.761116981506348

Token 14: '(map' (ID: 16946)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(' → logprob: -0.0001835141738411039
    2. '(h' → logprob: -9.37518310546875
    3. '(range' → logprob: -10.37518310546875
    4. '()' → logprob: -11.37518310546875
    5. '(open' → logprob: -12.25018310546875
    6. '(

' → logprob: -12.25018310546875
    7. '(
' → logprob: -12.37518310546875
    8. '(map' → logprob: -12.37518310546875
    9. '(|' → logprob: -12.87518310546875
    10. ' (' → logprob: -12.87518310546875

Token 15: '(int' (ID: 2742)
  Prédit: '(int'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(int' → logprob: -0.009788085706532001
    2. '(' → logprob: -4.6347880363464355
    3. '(str' → logprob: -11.884788513183594
    4. '<int' → logprob: -12.009788513183594
    5. 'int' → logprob: -12.259788513183594
    6. '(input' → logprob: -12.634788513183594
    7. '(
' → logprob: -13.009788513183594
    8. '[int' → logprob: -13.009788513183594
    9. '=int' → logprob: -13.134788513183594
    10. '(in' → logprob: -13.384788513183594

Token 16: ',' (ID: 11)
  Prédit: '(input'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(input' → logprob: -0.3259148895740509
    2. ',' → logprob: -1.9509148597717285
    3. '(' → logprob: -2.2009148597717285
    4. ',input' → logprob: -3.7009148597717285
    5. '),' → logprob: -8.825915336608887
    6. '(),' → logprob: -8.825915336608887
    7. ')' → logprob: -9.575915336608887
    8. '(int' → logprob: -9.950915336608887
    9. '(x' → logprob: -10.575915336608887
    10. ' ,' → logprob: -10.700915336608887

Token 17: ' input' (ID: 3422)
  Prédit: 'input'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'input' → logprob: -0.06196959316730499
    2. ' input' → logprob: -2.811969518661499
    3. '(input' → logprob: -13.311969757080078
    4. ',input' → logprob: -15.561969757080078
    5. '=input' → logprob: -17.186969757080078
    6. '<input' → logprob: -17.186969757080078
    7. '	input' → logprob: -17.311969757080078
    8. ')' → logprob: -17.311969757080078
    9. '_input' → logprob: -18.561969757080078
    10. '[input' → logprob: -18.561969757080078

Token 18: '().' (ID: 1454)
  Prédit: '().'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '().' → logprob: -0.0002075933152809739
    2. '()' → logprob: -8.625207901000977
    3. '()))' → logprob: -11.000207901000977
    4. '())' → logprob: -12.000207901000977
    5. ' ().' → logprob: -13.250207901000977
    6. '(' → logprob: -13.500207901000977
    7. '(.' → logprob: -14.500207901000977
    8. '().__' → logprob: -15.000207901000977
    9. '()));' → logprob: -15.875207901000977
    10. '()>' → logprob: -16.250207901000977

Token 19: 'split' (ID: 13627)
  Prédit: 'split'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'split' → logprob: -2.45848218582978e-06
    2. 'strip' → logprob: -13.75000286102295
    3. '(split' → logprob: -14.12500286102295
    4. ' split' → logprob: -14.62500286102295
    5. 'spl' → logprob: -16.500001907348633
    6. 'rstrip' → logprob: -17.375001907348633
    7. ')' → logprob: -18.125001907348633
    8. 'read' → logprob: -18.375001907348633
    9. 'plit' → logprob: -18.875001907348633
    10. '.split' → logprob: -19.375001907348633

Token 20: '()))

' (ID: 125972)
  Prédit: '()))'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '()))' → logprob: -0.720689594745636
    2. '))' → logprob: -1.4706895351409912
    3. '())' → logprob: -1.9706895351409912
    4. ')' → logprob: -1.9706895351409912
    5. '()' → logprob: -5.72068977355957
    6. '(' → logprob: -6.34568977355957
    7. ')))' → logprob: -11.34568977355957
    8. '())))' → logprob: -11.97068977355957
    9. '()))
' → logprob: -12.09568977355957
    10. ''))' → logprob: -12.22068977355957

Token 21: 'cnt' (ID: 33160)
  Prédit: 'dp'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'dp' → logprob: -0.9965251088142395
    2. 'for' → logprob: -1.1215250492095947
    3. 'count' → logprob: -2.3715250492095947
    4. 'max' → logprob: -2.7465250492095947
    5. 'result' → logprob: -3.3715250492095947
    6. 'h' → logprob: -3.4965250492095947
    7. 'ans' → logprob: -3.9965250492095947
    8. 'd' → logprob: -3.9965250492095947
    9. 'if' → logprob: -4.871525287628174
    10. 's' → logprob: -4.871525287628174

Token 22: ' =' (ID: 314)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(' → logprob: -0.6583476662635803
    2. '_' → logprob: -1.0333476066589355
    3. '[' → logprob: -2.1583476066589355
    4. '=' → logprob: -4.6583476066589355
    5. 's' → logprob: -7.5333476066589355
    6. ')' → logprob: -8.283348083496094
    7. ' (' → logprob: -8.783348083496094
    8. ' =' → logprob: -9.033348083496094
    9. ' ' → logprob: -9.033348083496094
    10. '+' → logprob: -10.533348083496094

Token 23: ' ' (ID: 220)
  Prédit: '0'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '0' → logprob: -0.14317259192466736
    2. ' ' → logprob: -2.0181725025177
    3. '1' → logprob: -7.643172740936279
    4. ' h' → logprob: -12.018172264099121
    5. 'h' → logprob: -12.643172264099121
    6. 'len' → logprob: -13.768172264099121
    7. ' len' → logprob: -13.768172264099121
    8. 'sum' → logprob: -14.143172264099121
    9. ' sum' → logprob: -14.393172264099121
    10. ')' → logprob: -14.393172264099121

Token 24: '0' (ID: 15)
  Prédit: '0'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '0' → logprob: -0.02336951531469822
    2. '1' → logprob: -3.773369550704956
    3. 'N' → logprob: -10.398369789123535
    4. 'h' → logprob: -10.523369789123535
    5. '{}' → logprob: -10.898369789123535
    6. 'K' → logprob: -11.023369789123535
    7. '{' → logprob: -11.273369789123535
    8. 'sum' → logprob: -11.898369789123535
    9. ' ' → logprob: -12.398369789123535
    10. 'len' → logprob: -13.023369789123535

Token 25: '
' (ID: 198)
  Prédit: 'for'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'for' → logprob: -0.046918198466300964
    2. ' for' → logprob: -3.6719181537628174
    3. '\n' → logprob: -4.1719183921813965
    4. '
' → logprob: -5.4219183921813965
    5. '' → logprob: -8.546917915344238
    6. '\' → logprob: -8.671917915344238
    7. '```' → logprob: -10.171917915344238
    8. ' ' → logprob: -10.296917915344238
    9. '=' → logprob: -10.671917915344238
    10. '<|end|>' → logprob: -10.921917915344238

Token 26: 'for' (ID: 1938)
  Prédit: 'for'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'for' → logprob: -0.003018587827682495
    2. ' for' → logprob: -6.628018379211426
    3. '\n' → logprob: -7.003018379211426
    4. '
' → logprob: -7.628018379211426
    5. 'f' → logprob: -9.003018379211426
    6. '' → logprob: -9.378018379211426
    7. '```' → logprob: -10.503018379211426
    8. 'i' → logprob: -10.628018379211426
    9. '\' → logprob: -11.503018379211426
    10. 'n' → logprob: -12.128018379211426

Token 27: ' i' (ID: 575)
  Prédit: ' i'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' i' → logprob: -0.04757382720708847
    2. ' h' → logprob: -3.1725738048553467
    3. ' ' → logprob: -6.172574043273926
    4. ' _' → logprob: -6.672574043273926
    5. '_' → logprob: -7.172574043273926
    6. 'i' → logprob: -8.047574043273926
    7. ' x' → logprob: -9.547574043273926
    8. 'h' → logprob: -10.422574043273926
    9. ' ' → logprob: -12.547574043273926
    10. '	i' → logprob: -12.547574043273926

Token 28: ' in' (ID: 306)
  Prédit: ' in'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' in' → logprob: -0.04900834336876869
    2. 'in' → logprob: -3.049008369445801
    3. ' ' → logprob: -8.1740083694458
    4. '+' → logprob: -9.5490083694458
    5. '  ' → logprob: -10.4240083694458
    6. ')' → logprob: -11.9240083694458
    7. ',' → logprob: -12.2990083694458
    8. ' i' → logprob: -12.2990083694458
    9. 'range' → logprob: -12.7990083694458
    10. '```' → logprob: -13.0490083694458

Token 29: ' range' (ID: 3352)
  Prédit: 'range'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'range' → logprob: -0.31327590346336365
    2. ' range' → logprob: -1.313275933265686
    3. ' ' → logprob: -12.188276290893555
    4. ')' → logprob: -12.938276290893555
    5. '	range' → logprob: -13.063276290893555
    6. ' h' → logprob: -13.688276290893555
    7. '(range' → logprob: -13.688276290893555
    8. 'h' → logprob: -14.438276290893555
    9. 'r' → logprob: -14.688276290893555
    10. '   ' → logprob: -15.188276290893555

Token 30: '(N' (ID: 10564)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(' → logprob: -0.16042286157608032
    2. '(N' → logprob: -1.9104228019714355
    3. '(len' → logprob: -8.910423278808594
    4. '(n' → logprob: -10.285423278808594
    5. '(K' → logprob: -11.410423278808594
    6. ' (' → logprob: -11.535423278808594
    7. '(
' → logprob: -13.410423278808594
    8. '((' → logprob: -13.660423278808594
    9. '(`' → logprob: -13.660423278808594
    10. '(range' → logprob: -13.660423278808594

Token 31: '):
' (ID: 1883)
  Prédit: '):'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '):' → logprob: -0.1699964702129364
    2. '-' → logprob: -2.169996500015259
    3. ' ):' → logprob: -3.419996500015259
    4. ' -' → logprob: -5.04499626159668
    5. ')' → logprob: -5.91999626159668
    6. ' ' → logprob: -8.91999626159668
    7. ' )' → logprob: -9.79499626159668
    8. '):
' → logprob: -10.04499626159668
    9. ':' → logprob: -10.16999626159668
    10. '+' → logprob: -11.54499626159668

Token 32: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.11502839624881744
    2. ' ' → logprob: -2.7400283813476562
    3. ' for' → logprob: -3.7400283813476562
    4. ':' → logprob: -5.115028381347656
    5. 'for' → logprob: -5.365028381347656
    6. ' if' → logprob: -5.615028381347656
    7. '  ' → logprob: -6.615028381347656
    8. '<|end|>' → logprob: -6.740028381347656
    9. '    ' → logprob: -7.115028381347656
    10. 'if' → logprob: -7.115028381347656

Token 33: ' if' (ID: 538)
  Prédit: ' for'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' for' → logprob: -0.2505922019481659
    2. '   ' → logprob: -2.0005922317504883
    3. 'for' → logprob: -3.1255922317504883
    4. ' if' → logprob: -3.3755922317504883
    5. ' ' → logprob: -6.125592231750488
    6. 'if' (adapté à ' if') → logprob: -6.250592231750488
    7. '    ' → logprob: -6.500592231750488
    8. ' i' → logprob: -7.250592231750488
    9. '<|end|>' → logprob: -7.250592231750488
    10. ' h' → logprob: -7.875592231750488

Token 34: ' h' (ID: 312)
  Prédit: ' h'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' h' → logprob: -0.04862596467137337
    2. 'h' → logprob: -3.048625946044922
    3. ' i' → logprob: -10.798625946044922
    4. ' ' → logprob: -11.798625946044922
    5. ')' → logprob: -12.423625946044922
    6. ' abs' → logprob: -13.173625946044922
    7. 'i' → logprob: -13.798625946044922
    8. ' K' → logprob: -13.798625946044922
    9. ' ' → logprob: -13.923625946044922
    10. 'abs' → logprob: -15.048625946044922

Token 35: '[i' (ID: 1768)
  Prédit: '[i'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '[i' → logprob: -0.01612774096429348
    2. '[' → logprob: -4.141127586364746
    3. ' [' → logprob: -9.391127586364746
    4. '>' → logprob: -13.141127586364746
    5. '[j' → logprob: -13.516127586364746
    6. ' ' → logprob: -14.016127586364746
    7. '[h' → logprob: -14.641127586364746
    8. '>=' → logprob: -14.766127586364746
    9. '[e' → logprob: -14.766127586364746
    10. '[I' → logprob: -14.891127586364746

Token 36: ']' (ID: 60)
  Prédit: '>'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '>' → logprob: -0.3634147047996521
    2. '>=' → logprob: -2.238414764404297
    3. ' >=' → logprob: -2.363414764404297
    4. ' >' → logprob: -2.988414764404297
    5. '<' → logprob: -4.113414764404297
    6. ']' → logprob: -4.613414764404297
    7. ' <' → logprob: -4.988414764404297
    8. ' <=' → logprob: -4.988414764404297
    9. '<=' → logprob: -5.488414764404297
    10. ' ' → logprob: -5.738414764404297

Token 37: ' >=' (ID: 5064)
  Prédit: '>='
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '>=' → logprob: -0.3568546175956726
    2. ' >=' → logprob: -1.3568546772003174
    3. '>' → logprob: -3.8568546772003174
    4. '<' → logprob: -4.606854438781738
    5. '<=' → logprob: -5.356854438781738
    6. ' >' → logprob: -6.231854438781738
    7. ' <=' → logprob: -6.231854438781738
    8. ' <' → logprob: -6.606854438781738
    9. '%' → logprob: -7.356854438781738
    10. ' ' → logprob: -7.856854438781738

Token 38: ' K' (ID: 658)
  Prédit: 'K'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'K' → logprob: -0.011078352108597755
    2. ' K' → logprob: -4.511078357696533
    3. ' ' → logprob: -11.011077880859375
    4. 'h' → logprob: -12.011077880859375
    5. 'k' → logprob: -13.011077880859375
    6. '   ' → logprob: -13.261077880859375
    7. '  ' → logprob: -14.011077880859375
    8. '	K' → logprob: -14.511077880859375
    9. '100' → logprob: -14.886077880859375
    10. '2' → logprob: -15.386077880859375

Token 39: ':
' (ID: 734)
  Prédit: ':'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ':' → logprob: -0.00023572170175611973
    2. ':
' → logprob: -9.000235557556152
    3. ' :' → logprob: -9.250235557556152
    4. '       ' → logprob: -12.375235557556152
    5. '   ' → logprob: -12.750235557556152
    6. '+:' → logprob: -12.750235557556152
    7. '):' → logprob: -13.000235557556152
    8. '+' → logprob: -13.625235557556152
    9. '    ' → logprob: -14.375235557556152
    10. '-' → logprob: -15.000235557556152

Token 40: '       ' (ID: 309)
  Prédit: '       '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '       ' → logprob: -0.003331233514472842
    2. '   ' → logprob: -6.253331184387207
    3. 'cnt' → logprob: -7.628331184387207
    4. '\n' → logprob: -7.753331184387207
    5. ' cnt' → logprob: -9.253331184387207
    6. '    ' → logprob: -10.003331184387207
    7. '     ' → logprob: -10.003331184387207
    8. '	   ' → logprob: -10.253331184387207
    9. '           ' → logprob: -10.253331184387207
    10. '        
' → logprob: -10.378331184387207

Token 41: ' cnt' (ID: 27340)
  Prédit: 'cnt'
  Correct (stricte): False
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'cnt' (adapté à ' cnt') → logprob: -0.04204513505101204
    2. '       ' → logprob: -4.0420451164245605
    3. ' cnt' → logprob: -4.0420451164245605
    4. '   ' → logprob: -5.2920451164245605
    5. '	cnt' → logprob: -7.6670451164245605
    6. ' ' → logprob: -9.167045593261719
    7. 'count' → logprob: -9.167045593261719
    8. '[cnt' → logprob: -9.792045593261719
    9. '(cnt' → logprob: -10.042045593261719
    10. '1' → logprob: -10.167045593261719

Token 42: ' +=' (ID: 2757)
  Prédit: '+='
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '+=' → logprob: -0.011212636716663837
    2. ' +=' → logprob: -4.5112128257751465
    3. '+' → logprob: -8.761212348937988
    4. '=' → logprob: -11.886212348937988
    5. ']+=' → logprob: -14.386212348937988
    6. '++' → logprob: -15.636212348937988
    7. '   ' → logprob: -15.761212348937988
    8. '+="' → logprob: -16.136213302612305
    9. '+='' → logprob: -16.136213302612305
    10. '+=(' → logprob: -17.386213302612305

Token 43: ' ' (ID: 220)
  Prédit: '1'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '1' → logprob: -0.0004306692280806601
    2. ' ' → logprob: -7.750430583953857
    3. '   ' → logprob: -17.250431060791016
    4. '  ' → logprob: -19.125431060791016
    5. 'h' → logprob: -19.250431060791016
    6. '2' → logprob: -19.375431060791016
    7. '0' → logprob: -19.375431060791016
    8. '１' → logprob: -19.562931060791016
    9. '100' → logprob: -19.812931060791016
    10. '+' → logprob: -19.875431060791016

Token 44: '1' (ID: 16)
  Prédit: '1'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '1' → logprob: -3.547789674485102e-05
    2. ' ' → logprob: -10.250035285949707
    3. '0' → logprob: -17.250036239624023
    4. 'i' → logprob: -18.250036239624023
    5. '100' → logprob: -18.375036239624023
    6. '   ' → logprob: -18.625036239624023
    7. '１' → logprob: -19.125036239624023
    8. 'h' → logprob: -19.125036239624023
    9. '2' → logprob: -19.187536239624023
    10. 'cnt' → logprob: -19.312536239624023

Token 45: '

' (ID: 279)
  Prédit: 'print'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'print' → logprob: -0.00016325322212651372
    2. '
' → logprob: -9.375163078308105
    3. '<|end|>' → logprob: -10.000163078308105
    4. ' print' → logprob: -11.000163078308105
    5. ')' → logprob: -11.750163078308105
    6. '```' → logprob: -12.750163078308105
    7. '\n' → logprob: -13.625163078308105
    8. '#' → logprob: -13.750163078308105
    9. '#print' → logprob: -14.000163078308105
    10. '(print' → logprob: -14.250163078308105

Token 46: 'print' (ID: 1598)
  Prédit: 'print'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'print' → logprob: -1.1472419600977446e-06
    2. ' print' → logprob: -13.750000953674316
    3. 'pr' → logprob: -18.375001907348633
    4. 'prin' → logprob: -19.250001907348633
    5. '(print' → logprob: -19.750001907348633
    6. '-print' → logprob: -20.000001907348633
    7. '#print' → logprob: -20.000001907348633
    8. 'prit' → logprob: -20.125001907348633
    9. ')' → logprob: -20.250001907348633
    10. '.print' → logprob: -20.500001907348633

Token 47: '(cnt' (ID: 102125)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(' → logprob: -0.38694000244140625
    2. '(cnt' → logprob: -1.1369400024414062
    3. '()' → logprob: -10.011940002441406
    4. '(count' → logprob: -11.636940002441406
    5. '(len' → logprob: -12.136940002441406
    6. '(C' → logprob: -12.761940002441406
    7. '((' → logprob: -13.136940002441406
    8. '(max' → logprob: -14.136940002441406
    9. '(sum' → logprob: -14.136940002441406
    10. '(c' → logprob: -14.636940002441406

Token 48: ')' (ID: 8)
  Prédit: ')'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')' → logprob: -1.9361264946837764e-07
    2. ' )' → logprob: -15.875
    3. '))' → logprob: -17.625
    4. ')`' → logprob: -18.0
    5. ')
' → logprob: -18.5
    6. '`)' → logprob: -19.875
    7. '）' → logprob: -19.875
    8. '')' → logprob: -21.0
    9. '),' → logprob: -21.125
    10. '}' → logprob: -21.125


RÉSUMÉ:
--------------------------------------------------------------------------------
Total des tokens analysés: 46
Tokens correctement prédits (1ère position, stricte): 15
Tokens correctement prédits (1ère position, avec adaptation): 16
Tokens correctement prédits (top 10): 40
Précision stricte (1ère position): 32.61%
Précision adaptée (1ère position): 34.78%
Précision (top 10): 86.96%
================================================================================
