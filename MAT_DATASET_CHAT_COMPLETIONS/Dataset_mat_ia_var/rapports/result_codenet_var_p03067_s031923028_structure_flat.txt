================================================================================
ANALYSE DE PRÉDICTION TOKEN PAR TOKEN (BATCH API)
Date: 2025-06-04 20:02:39
Modèle de tokenisation: gpt-4o-mini
================================================================================

SCRIPT ANALYSÉ:
--------------------------------------------------------------------------------
A, B, C = map(int, input().split())
if (A < C and C < B) or (A > C and C > B):
    print("Yes")
else:
    print("No")
--------------------------------------------------------------------------------

RÉSULTATS D'ANALYSE TOKEN PAR TOKEN:
--------------------------------------------------------------------------------
Token 0: 'A' (ID: 32)
  → Token d'amorce (pas de prédiction)

Token 1: ',' (ID: 11)
  → Token d'amorce (pas de prédiction)

Token 2: ' B' (ID: 418)
  → Token d'amorce (pas de prédiction)

Token 3: ',' (ID: 11)
  Prédit: '='
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '=' → logprob: -0.5223684310913086
    2. '+' → logprob: -2.0223684310913086
    3. ';' → logprob: -2.5223684310913086
    4. ',' → logprob: -3.0223684310913086
    5. ')' → logprob: -3.3973684310913086
    6. '.' → logprob: -3.3973684310913086
    7. 'C' → logprob: -3.7723684310913086
    8. '<|end|>' → logprob: -4.022368431091309
    9. '[' → logprob: -4.147368431091309
    10. ':' → logprob: -4.772368431091309

Token 4: ' C' (ID: 363)
  Prédit: ','
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ',' → logprob: -0.7975139021873474
    2. '=' → logprob: -0.9225139021873474
    3. 'C' → logprob: -2.297513961791992
    4. '.' → logprob: -3.922513961791992
    5. ' =' → logprob: -4.297513961791992
    6. ')' → logprob: -5.297513961791992
    7. ' ' → logprob: -5.422513961791992
    8. '<|end|>' → logprob: -5.922513961791992
    9. ',C' → logprob: -6.047513961791992
    10. ';' → logprob: -6.922513961791992

Token 5: ' =' (ID: 314)
  Prédit: ';'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ';' → logprob: -1.3654423952102661
    2. ')' → logprob: -1.7404423952102661
    3. ',' → logprob: -1.7404423952102661
    4. '=' → logprob: -1.8654423952102661
    5. 'D' → logprob: -2.3654422760009766
    6. '<|end|>' → logprob: -3.4904422760009766
    7. '```' → logprob: -3.4904422760009766
    8. '(' → logprob: -3.7404422760009766
    9. ':' → logprob: -3.9904422760009766
    10. '[' → logprob: -4.115442276000977

Token 6: ' map' (ID: 4014)
  Prédit: ' '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' ' → logprob: -0.5477664470672607
    2. '0' → logprob: -1.9227664470672607
    3. '1' → logprob: -2.5477664470672607
    4. ' [' → logprob: -2.6727664470672607
    5. '[' → logprob: -3.5477664470672607
    6. ' []' → logprob: -3.7977664470672607
    7. '[]' → logprob: -3.9227664470672607
    8. ' map' → logprob: -4.42276668548584
    9. '10' → logprob: -4.79776668548584
    10. 'map' → logprob: -5.17276668548584

Token 7: '(int' (ID: 2742)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(' → logprob: -0.10052108019590378
    2. '<|end|>' → logprob: -2.9755210876464844
    3. '(lambda' → logprob: -3.3505210876464844
    4. '```' → logprob: -5.725521087646484
    5. ')' → logprob: -6.100521087646484
    6. '(int' → logprob: -6.850521087646484
    7. '<|end|>' → logprob: -7.600521087646484
    8. '(user' → logprob: -8.100521087646484
    9. '(token' → logprob: -8.225521087646484
    10. '`' → logprob: -8.850521087646484

Token 8: ',' (ID: 11)
  Prédit: '(input'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '(input' → logprob: -0.6190829277038574
    2. ')' → logprob: -1.1190829277038574
    3. '(' → logprob: -2.7440829277038574
    4. '<|end|>' → logprob: -3.3690829277038574
    5. '(user' → logprob: -3.8690829277038574
    6. '<|end|>' → logprob: -5.869082927703857
    7. '```' → logprob: -6.994082927703857
    8. ')(' → logprob: -7.119082927703857
    9. '(raw' → logprob: -7.244082927703857
    10. '(token' → logprob: -7.244082927703857

Token 9: ' input' (ID: 3422)
  Prédit: 'input'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'input' → logprob: -0.011114555411040783
    2. ' input' → logprob: -4.511114597320557
    3. '(input' → logprob: -9.636114120483398
    4. ')' → logprob: -14.386114120483398
    5. '=input' → logprob: -15.511114120483398
    6. ',input' → logprob: -15.761114120483398
    7. '	input' → logprob: -16.2611141204834
    8. '<input' → logprob: -16.2611141204834
    9. ' ' → logprob: -16.5111141204834
    10. '```' → logprob: -16.6361141204834

Token 10: '().' (ID: 1454)
  Prédit: '())'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '())' → logprob: -1.0488154888153076
    2. ')' → logprob: -1.1738154888153076
    3. '(' → logprob: -1.6738154888153076
    4. '()' → logprob: -2.4238154888153076
    5. '('' → logprob: -4.173815727233887
    6. '(()' → logprob: -4.673815727233887
    7. '(""))' → logprob: -4.673815727233887
    8. '`()' → logprob: -5.298815727233887
    9. '(token' → logprob: -5.798815727233887
    10. '();)' → logprob: -6.048815727233887

Token 11: 'split' (ID: 13627)
  Prédit: 'split'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'split' → logprob: -0.00021509946964215487
    2. 'strip' → logprob: -8.500215530395508
    3. ' split' → logprob: -11.875215530395508
    4. 'rstrip' → logprob: -12.750215530395508
    5. 'read' → logprob: -14.375215530395508
    6. ')' → logprob: -14.500215530395508
    7. '(split' → logprob: -15.375215530395508
    8. 'spl' → logprob: -15.875215530395508
    9. 'startswith' → logprob: -16.875215530395508
    10. 'replace' → logprob: -17.250215530395508

Token 12: '())
' (ID: 4574)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ')' → logprob: -0.2617453336715698
    2. '())' → logprob: -1.5117453336715698
    3. '))' → logprob: -4.886745452880859
    4. '()' → logprob: -6.511745452880859
    5. '`)' → logprob: -8.13674545288086
    6. '()))' → logprob: -8.26174545288086
    7. '(' → logprob: -9.38674545288086
    8. ')`' → logprob: -10.88674545288086
    9. '```' → logprob: -11.13674545288086
    10. ')))' → logprob: -11.63674545288086

Token 13: 'if' (ID: 366)
  Prédit: 'if'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'if' → logprob: -0.5769983530044556
    2. 'i' → logprob: -1.3269983530044556
    3. '+' → logprob: -2.326998233795166
    4. '#' → logprob: -3.076998233795166
    5. '*' → logprob: -4.826998233795166
    6. 'd' → logprob: -4.951998233795166
    7. ' if' → logprob: -5.576998233795166
    8. '+
' → logprob: -6.326998233795166
    9. '\n' → logprob: -6.826998233795166
    10. 'x' → logprob: -6.826998233795166

Token 14: ' (' (ID: 350)
  Prédit: ' A'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' A' → logprob: -0.009371397085487843
    2. 'A' → logprob: -4.759371280670166
    3. ' ' → logprob: -7.259371280670166
    4. ' ' → logprob: -10.509371757507324
    5. ' B' → logprob: -11.259371757507324
    6. ' (' → logprob: -12.884371757507324
    7. ' not' → logprob: -13.009371757507324
    8. '  ' → logprob: -13.384371757507324
    9. '(A' → logprob: -13.384371757507324
    10. ' C' → logprob: -13.634371757507324

Token 15: 'A' (ID: 32)
  Prédit: 'A'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'A' → logprob: -0.1432609260082245
    2. ' A' → logprob: -2.018260955810547
    3. 'B' → logprob: -8.643260955810547
    4. '(A' → logprob: -9.018260955810547
    5. ' (' → logprob: -9.393260955810547
    6. ')' → logprob: -9.893260955810547
    7. ' B' → logprob: -9.893260955810547
    8. 'C' → logprob: -10.393260955810547
    9. ' ' → logprob: -11.018260955810547
    10. '(' → logprob: -11.143260955810547

Token 16: ' <' (ID: 464)
  Prédit: ' >'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' >' → logprob: -0.28594958782196045
    2. '+' → logprob: -2.91094970703125
    3. ' >=' → logprob: -3.28594970703125
    4. ' ==' → logprob: -3.41094970703125
    5. ' <' → logprob: -3.53594970703125
    6. ' +' → logprob: -3.91094970703125
    7. ' <=' → logprob: -3.91094970703125
    8. '>' → logprob: -3.91094970703125
    9. ' ' → logprob: -4.78594970703125
    10. '%' → logprob: -5.16094970703125

Token 17: ' C' (ID: 363)
  Prédit: ' B'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' B' → logprob: -0.6366115212440491
    2. 'B' → logprob: -0.7616115212440491
    3. '=' → logprob: -6.011611461639404
    4. ' ' → logprob: -7.011611461639404
    5. '0' → logprob: -8.136611938476562
    6. ')' → logprob: -8.886611938476562
    7. '=B' → logprob: -9.636611938476562
    8. ' =' → logprob: -10.261611938476562
    9. '3' → logprob: -10.886611938476562
    10. '10' → logprob: -11.011611938476562

Token 18: ' and' (ID: 326)
  Prédit: ' and'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' and' → logprob: -0.1716987043619156
    2. ')' → logprob: -2.171698808670044
    3. '):' → logprob: -3.546698808670044
    4. 'and' → logprob: -4.546698570251465
    5. ' )' → logprob: -5.921698570251465
    6. ' ):' → logprob: -6.796698570251465
    7. '>' → logprob: -7.921698570251465
    8. ' or' → logprob: -9.796698570251465
    9. ' ' → logprob: -10.421698570251465
    10. ' >' → logprob: -10.796698570251465

Token 19: ' C' (ID: 363)
  Prédit: ' B'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' B' → logprob: -0.02002614736557007
    2. ' A' → logprob: -4.645026206970215
    3. 'B' → logprob: -4.770026206970215
    4. ' C' → logprob: -7.645026206970215
    5. ' ' → logprob: -8.020026206970215
    6. ')' → logprob: -8.020026206970215
    7. ' (' → logprob: -8.395026206970215
    8. 'A' → logprob: -8.395026206970215
    9. ' )' → logprob: -10.270026206970215
    10. '  ' → logprob: -10.957526206970215

Token 20: ' <' (ID: 464)
  Prédit: ' >'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' >' → logprob: -0.41181471943855286
    2. '>' → logprob: -1.5368146896362305
    3. ' <' → logprob: -2.5368146896362305
    4. '<' → logprob: -3.9118146896362305
    5. ')' → logprob: -4.2868146896362305
    6. ' <=' → logprob: -5.4118146896362305
    7. '):' → logprob: -6.7868146896362305
    8. ' and' → logprob: -7.1618146896362305
    9. ' )' → logprob: -7.4118146896362305
    10. '<=' → logprob: -7.5368146896362305

Token 21: ' B' (ID: 418)
  Prédit: 'B'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'B' → logprob: -0.08895953744649887
    2. ' B' → logprob: -2.4639594554901123
    3. ' ' → logprob: -11.213959693908691
    4. ')' → logprob: -13.213959693908691
    5. '>B' → logprob: -13.338959693908691
    6. '  ' → logprob: -14.838959693908691
    7. '100' → logprob: -14.963959693908691
    8. '_B' → logprob: -15.338959693908691
    9. '   ' → logprob: -15.338959693908691
    10. '	B' → logprob: -15.401459693908691

Token 22: ')' (ID: 8)
  Prédit: ')'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')' → logprob: -0.08901853114366531
    2. '):' → logprob: -2.4640185832977295
    3. ':' → logprob: -9.964018821716309
    4. ' and' → logprob: -11.214018821716309
    5. ' )' → logprob: -11.464018821716309
    6. ' ):' → logprob: -12.839018821716309
    7. 'and' → logprob: -13.089018821716309
    8. '):
' → logprob: -13.964018821716309
    9. ' or' → logprob: -14.839018821716309
    10. ':)' → logprob: -14.839018821716309

Token 23: ' or' (ID: 503)
  Prédit: ':'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ':' → logprob: -0.000786398712079972
    2. ' :' → logprob: -7.500786304473877
    3. ' and' → logprob: -8.750786781311035
    4. '):' → logprob: -10.125786781311035
    5. ' or' → logprob: -11.125786781311035
    6. 'and' → logprob: -12.125786781311035
    7. ':**' → logprob: -12.250786781311035
    8. ':
' → logprob: -12.375786781311035
    9. ')' → logprob: -13.375786781311035
    10. 'or' → logprob: -14.125786781311035

Token 24: ' (' (ID: 350)
  Prédit: ' ('
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' (' → logprob: -0.011331452056765556
    2. '(' → logprob: -5.261331558227539
    3. '(B' → logprob: -5.511331558227539
    4. '(A' → logprob: -6.261331558227539
    5. '(C' → logprob: -9.636331558227539
    6. ' A' → logprob: -11.011331558227539
    7. ' ' → logprob: -11.386331558227539
    8. 'A' → logprob: -11.886331558227539
    9. '<|end|>' → logprob: -12.011331558227539
    10. ' ' → logprob: -12.386331558227539

Token 25: 'A' (ID: 32)
  Prédit: ' B'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' B' → logprob: -0.44327953457832336
    2. ' A' → logprob: -1.818279504776001
    3. 'B' → logprob: -2.193279504776001
    4. 'A' → logprob: -2.818279504776001
    5. ' C' → logprob: -3.943279504776001
    6. 'C' → logprob: -5.31827974319458
    7. ' ' → logprob: -8.818279266357422
    8. ' (' → logprob: -11.193279266357422
    9. ')' → logprob: -11.505779266357422
    10. '  ' → logprob: -11.505779266357422

Token 26: ' >' (ID: 1424)
  Prédit: ' >'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' >' → logprob: -0.07337800413370132
    2. ' <' → logprob: -2.948378086090088
    3. '>' → logprob: -4.073378086090088
    4. '<' → logprob: -6.948378086090088
    5. ' ==' → logprob: -8.94837760925293
    6. ')' → logprob: -9.57337760925293
    7. '==' → logprob: -9.94837760925293
    8. ' ' → logprob: -9.94837760925293
    9. ' <=' → logprob: -10.57337760925293
    10. ' )' → logprob: -11.82337760925293

Token 27: ' C' (ID: 363)
  Prédit: ' C'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' C' → logprob: -0.23589329421520233
    2. 'C' → logprob: -1.6108932495117188
    3. ' B' → logprob: -4.985893249511719
    4. 'B' → logprob: -5.860893249511719
    5. '<|end|>' → logprob: -7.610893249511719
    6. ' ' → logprob: -8.485893249511719
    7. '>C' → logprob: -10.860893249511719
    8. ')' → logprob: -12.235893249511719
    9. '  ' → logprob: -13.048393249511719
    10. 'c' → logprob: -13.110893249511719

Token 28: ' and' (ID: 326)
  Prédit: ' and'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' and' → logprob: -0.006802287418395281
    2. 'and' → logprob: -5.006802082061768
    3. ')' → logprob: -9.881802558898926
    4. ' >' → logprob: -11.131802558898926
    5. '>' → logprob: -11.381802558898926
    6. ' ' → logprob: -12.131802558898926
    7. ' )' → logprob: -13.881802558898926
    8. '```' → logprob: -14.256802558898926
    9. '<|end|>' → logprob: -14.381802558898926
    10. '),' → logprob: -14.381802558898926

Token 29: ' C' (ID: 363)
  Prédit: ' B'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' B' → logprob: -0.004172421991825104
    2. 'B' → logprob: -5.504172325134277
    3. ' ' → logprob: -9.879172325134277
    4. ' C' → logprob: -10.504172325134277
    5. ')' → logprob: -11.504172325134277
    6. '<|end|>' → logprob: -13.629172325134277
    7. '	B' → logprob: -14.379172325134277
    8. '>B' → logprob: -14.379172325134277
    9. '  ' → logprob: -14.379172325134277
    10. ' ' → logprob: -14.504172325134277

Token 30: ' >' (ID: 1424)
  Prédit: ' >'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' >' → logprob: -0.0069012632593512535
    2. '>' → logprob: -5.006901264190674
    3. ' <' → logprob: -9.131900787353516
    4. ' ' → logprob: -10.381900787353516
    5. ' and' → logprob: -10.381900787353516
    6. ')' → logprob: -12.131900787353516
    7. 'and' → logprob: -12.756900787353516
    8. '<' → logprob: -12.881900787353516
    9. '>B' → logprob: -13.131900787353516
    10. ' ' → logprob: -14.256900787353516

Token 31: ' B' (ID: 418)
  Prédit: 'B'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'B' → logprob: -0.6931549310684204
    2. ' B' → logprob: -0.6931549310684204
    3. ' ' → logprob: -12.568155288696289
    4. '<|end|>' → logprob: -13.318155288696289
    5. ')' → logprob: -13.568155288696289
    6. '>B' → logprob: -14.568155288696289
    7. '	B' → logprob: -14.693155288696289
    8. 'A' → logprob: -15.943155288696289
    9. '  ' → logprob: -16.31815528869629
    10. ' A' → logprob: -16.94315528869629

Token 32: '):
' (ID: 1883)
  Prédit: '):'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '):' → logprob: -0.0023769615218043327
    2. ')' → logprob: -6.127377033233643
    3. ':' → logprob: -9.002376556396484
    4. ' ):' → logprob: -9.627376556396484
    5. '):
' → logprob: -13.377376556396484
    6. ')):' → logprob: -15.877376556396484
    7. '():' → logprob: -16.002376556396484
    8. ''):' → logprob: -16.002376556396484
    9. ' )' → logprob: -16.127376556396484
    10. '):

' → logprob: -16.252376556396484

Token 33: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.48554113507270813
    2. ' print' → logprob: -1.2355411052703857
    3. 'print' → logprob: -2.9855411052703857
    4. ':' → logprob: -3.9855411052703857
    5. ' ' → logprob: -4.610541343688965
    6. '    ' → logprob: -5.235541343688965
    7. ' :' → logprob: -6.735541343688965
    8. ')' → logprob: -6.860541343688965
    9. ' ' → logprob: -6.860541343688965
    10. '    
' → logprob: -6.985541343688965

Token 34: ' print' (ID: 2123)
  Prédit: ' print'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' print' → logprob: -0.19415277242660522
    2. 'print' (adapté à ' print') → logprob: -1.81915283203125
    3. '   ' → logprob: -4.31915283203125
    4. ' pass' → logprob: -7.19415283203125
    5. 'pass' → logprob: -9.69415283203125
    6. '```' → logprob: -9.94415283203125
    7. '    ' → logprob: -10.31915283203125
    8. ' continue' → logprob: -10.69415283203125
    9. ' ' → logprob: -10.81915283203125
    10. ' C' → logprob: -11.69415283203125

Token 35: '("' (ID: 568)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(' → logprob: -0.03306621313095093
    2. '(C' → logprob: -4.283066272735596
    3. '("("' → logprob: -4.783066272735596
    4. '('' → logprob: -4.908066272735596
    5. '("' → logprob: -6.033066272735596
    6. '(A' → logprob: -8.658065795898438
    7. '(True' → logprob: -8.908065795898438
    8. '()' → logprob: -9.658065795898438
    9. '(f' → logprob: -9.783065795898438
    10. '((' → logprob: -10.408065795898438

Token 36: 'Yes' (ID: 13022)
  Prédit: 'Yes'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'Yes' → logprob: -0.008029954507946968
    2. 'YES' → logprob: -5.383029937744141
    3. 'Inside' → logprob: -6.883029937744141
    4. ' Yes' → logprob: -8.00802993774414
    5. 'True' → logprob: -8.38302993774414
    6. 'in' → logprob: -8.50802993774414
    7. 'yes' → logprob: -8.50802993774414
    8. 'C' → logprob: -8.63302993774414
    9. 'inside' → logprob: -8.63302993774414
    10. 'No' → logprob: -8.75802993774414

Token 37: '")
' (ID: 1896)
  Prédit: '")'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '")' → logprob: -0.00018565983918961138
    2. ')' → logprob: -8.7501859664917
    3. ')")' → logprob: -10.6251859664917
    4. '")
' → logprob: -13.0001859664917
    5. '!")' → logprob: -15.1251859664917
    6. '"' → logprob: -15.6251859664917
    7. '')' → logprob: -17.000185012817383
    8. '")
' → logprob: -17.000185012817383
    9. '”)' → logprob: -17.375185012817383
    10. ' ")' → logprob: -17.750185012817383

Token 38: 'else' (ID: 2807)
  Prédit: 'else'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'else' → logprob: -0.0059008304961025715
    2. ' else' → logprob: -5.255900859832764
    3. 'elif' → logprob: -7.380900859832764
    4. '<|end|>' → logprob: -10.880900382995605
    5. '```' → logprob: -11.630900382995605
    6. 'e' → logprob: -12.005900382995605
    7. ')' → logprob: -12.880900382995605
    8. 'el' → logprob: -13.630900382995605
    9. ' elif' → logprob: -13.755900382995605
    10. '_else' → logprob: -14.130900382995605

Token 39: ':
' (ID: 734)
  Prédit: ':'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ':' → logprob: -0.00016551809676457196
    2. ':
' → logprob: -8.750165939331055
    3. '):' → logprob: -12.000165939331055
    4. '   ' → logprob: -15.000165939331055
    5. ' :' → logprob: -16.125165939331055
    6. '():' → logprob: -16.375165939331055
    7. '):
' → logprob: -16.750165939331055
    8. ':return' → logprob: -16.750165939331055
    9. '```' → logprob: -16.875165939331055
    10. '<|end|>' → logprob: -16.875165939331055

Token 40: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.008808969520032406
    2. ' print' → logprob: -5.1338090896606445
    3. '"' → logprob: -6.6338090896606445
    4. 'print' → logprob: -7.0088090896606445
    5. '    ' → logprob: -7.8838090896606445
    6. '```' → logprob: -9.633809089660645
    7. '<|end|>' → logprob: -9.758809089660645
    8. '    
' → logprob: -9.883809089660645
    9. '       ' → logprob: -10.883809089660645
    10. ' "' → logprob: -11.008809089660645

Token 41: ' print' (ID: 2123)
  Prédit: ' print'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' print' → logprob: -0.5011317133903503
    2. 'print' (adapté à ' print') → logprob: -1.0011317729949951
    3. '   ' → logprob: -3.626131772994995
    4. '```' → logprob: -9.751132011413574
    5. '	print' → logprob: -12.376132011413574
    6. '    ' → logprob: -12.501132011413574
    7. ' ' → logprob: -13.001132011413574
    8. '"' → logprob: -13.501132011413574
    9. '.print' → logprob: -14.126132011413574
    10. '``' → logprob: -14.251132011413574

Token 42: '("' (ID: 568)
  Prédit: '("'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '("' → logprob: -0.5865485072135925
    2. '(' → logprob: -0.8365485072135925
    3. '("("' → logprob: -4.586548328399658
    4. '("")' → logprob: -8.336548805236816
    5. '("(' → logprob: -9.586548805236816
    6. '("""' → logprob: -10.961548805236816
    7. '('' → logprob: -11.086548805236816
    8. '()' → logprob: -11.836548805236816
    9. '(""' → logprob: -12.211548805236816
    10. '(
' → logprob: -12.961548805236816

Token 43: 'No' (ID: 3160)
  Prédit: 'No'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'No' → logprob: -0.0052373106591403484
    2. '"No' → logprob: -5.255237102508545
    3. '"' → logprob: -13.130237579345703
    4. ' No' → logprob: -13.505237579345703
    5. '")' → logprob: -16.130237579345703
    6. '"N' → logprob: -17.130237579345703
    7. 'N' → logprob: -17.380237579345703
    8. 'NO' → logprob: -17.380237579345703
    9. '“No' → logprob: -17.755237579345703
    10. '_No' → logprob: -18.755237579345703

Token 44: '")' (ID: 1405)
  Prédit: '")'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '")' → logprob: -7.803360495017841e-05
    2. ')' → logprob: -9.500078201293945
    3. ')")' → logprob: -12.750078201293945
    4. '")
' → logprob: -16.000078201293945
    5. '```' → logprob: -17.000078201293945
    6. '"' → logprob: -17.750078201293945
    7. '”)' → logprob: -18.500078201293945
    8. '`)' → logprob: -18.500078201293945
    9. '}")' → logprob: -18.625078201293945
    10. '\")' → logprob: -18.625078201293945


RÉSUMÉ:
--------------------------------------------------------------------------------
Total des tokens analysés: 42
Tokens correctement prédits (1ère position, stricte): 19
Tokens correctement prédits (1ère position, avec adaptation): 19
Tokens correctement prédits (top 10): 36
Précision stricte (1ère position): 45.24%
Précision adaptée (1ère position): 45.24%
Précision (top 10): 85.71%
================================================================================
