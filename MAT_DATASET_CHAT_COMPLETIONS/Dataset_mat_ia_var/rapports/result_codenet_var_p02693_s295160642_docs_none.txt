================================================================================
ANALYSE DE PRÉDICTION TOKEN PAR TOKEN (BATCH API)
Date: 2025-06-04 19:16:06
Modèle de tokenisation: gpt-4o-mini
================================================================================

SCRIPT ANALYSÉ:
--------------------------------------------------------------------------------
K = int(input())
A, B = map(int, input().split())

for i in range(A, B + 1):
    if i % K == 0:
        print("OK")
        break
else:
    print("NG")
--------------------------------------------------------------------------------

RÉSULTATS D'ANALYSE TOKEN PAR TOKEN:
--------------------------------------------------------------------------------
Token 0: 'K' (ID: 42)
  → Token d'amorce (pas de prédiction)

Token 1: ' =' (ID: 314)
  → Token d'amorce (pas de prédiction)

Token 2: ' int' (ID: 677)
  → Token d'amorce (pas de prédiction)

Token 3: '(input' (ID: 10054)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '(' → logprob: -0.0029761565383523703
    2. 'K' → logprob: -6.877975940704346
    3. ''' → logprob: -7.002975940704346
    4. '(K' → logprob: -7.627975940704346
    5. '('' → logprob: -8.377976417541504
    6. '```' → logprob: -9.002976417541504
    7. '("("' → logprob: -9.877976417541504
    8. '`' → logprob: -10.002976417541504
    9. '"' → logprob: -10.752976417541504
    10. '()' → logprob: -11.627976417541504

Token 4: '())
' (ID: 4574)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '(' → logprob: -0.18854200839996338
    2. ')' → logprob: -1.8135420083999634
    3. '()' → logprob: -5.313541889190674
    4. '())' → logprob: -6.313541889190674
    5. '(
' → logprob: -7.563541889190674
    6. '```' → logprob: -8.313542366027832
    7. '")' → logprob: -8.938542366027832
    8. '("("' → logprob: -8.938542366027832
    9. '(()' → logprob: -9.313542366027832
    10. '**' → logprob: -9.313542366027832

Token 5: 'A' (ID: 32)
  Prédit: 'for'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'for' → logprob: -0.7581657767295837
    2. 'if' → logprob: -1.1331658363342285
    3. '\n' → logprob: -2.7581658363342285
    4. 'i' → logprob: -4.0081658363342285
    5. '*' → logprob: -4.1331658363342285
    6. '[' → logprob: -4.2581658363342285
    7. 's' → logprob: -4.2581658363342285
    8. ')' → logprob: -4.6331658363342285
    9. '\' → logprob: -4.7581658363342285
    10. '`' → logprob: -4.7581658363342285

Token 6: ',' (ID: 11)
  Prédit: '['
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '[' → logprob: -0.044571250677108765
    2. '+' → logprob: -3.1695711612701416
    3. '*' → logprob: -8.419570922851562
    4. '%' → logprob: -8.419570922851562
    5. ' +' → logprob: -8.419570922851562
    6. ' ' → logprob: -8.669570922851562
    7. '[K' → logprob: -9.294570922851562
    8. '_' → logprob: -9.419570922851562
    9. '[A' → logprob: -9.794570922851562
    10. '.' → logprob: -9.794570922851562

Token 7: ' B' (ID: 418)
  Prédit: 'B'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'B' → logprob: -0.030554132536053658
    2. ' B' → logprob: -3.5305540561676025
    3. ' ' → logprob: -7.780554294586182
    4. 'K' → logprob: -8.280553817749023
    5. ',' → logprob: -11.030553817749023
    6. 'Q' → logprob: -11.155553817749023
    7. 'M' → logprob: -11.155553817749023
    8. 'b' → logprob: -11.280553817749023
    9. ' =' → logprob: -11.405553817749023
    10. '*' → logprob: -11.530553817749023

Token 8: ' =' (ID: 314)
  Prédit: '='
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '=' → logprob: -0.5894083976745605
    2. ' =' → logprob: -0.8394083976745605
    3. ',' → logprob: -4.3394083976745605
    4. '[' → logprob: -8.464408874511719
    5. ' ' → logprob: -9.839408874511719
    6. ' ,' → logprob: -10.339408874511719
    7. ')' → logprob: -11.339408874511719
    8. '=

' → logprob: -12.089408874511719
    9. '=input' → logprob: -12.714408874511719
    10. '```' → logprob: -12.839408874511719

Token 9: ' map' (ID: 4014)
  Prédit: ' map'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' map' → logprob: -0.3644489347934723
    2. 'map' → logprob: -1.23944890499115
    3. 'input' → logprob: -4.7394490242004395
    4. ' input' → logprob: -4.9894490242004395
    5. ' list' → logprob: -9.114448547363281
    6. ' K' → logprob: -9.364448547363281
    7. 'list' → logprob: -9.614448547363281
    8. ' ' → logprob: -10.489448547363281
    9. ' [' → logprob: -11.864448547363281
    10. 'K' → logprob: -11.989448547363281

Token 10: '(int' (ID: 2742)
  Prédit: '(int'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(int' → logprob: -0.06714370101690292
    2. '(input' → logprob: -2.817143678665161
    3. '(' → logprob: -5.44214391708374
    4. '(str' → logprob: -7.69214391708374
    5. '(list' → logprob: -8.692143440246582
    6. '(lambda' → logprob: -8.817143440246582
    7. '(eval' → logprob: -10.567143440246582
    8. 'int' → logprob: -11.817143440246582
    9. '<int' → logprob: -12.067143440246582
    10. '(map' → logprob: -12.817143440246582

Token 11: ',' (ID: 11)
  Prédit: '(input'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(input' → logprob: -0.32434678077697754
    2. ',input' → logprob: -1.3243467807769775
    3. ',' → logprob: -4.699346542358398
    4. 'input' → logprob: -6.574346542358398
    5. ')' → logprob: -8.074346542358398
    6. '(' → logprob: -9.074346542358398
    7. '=input' → logprob: -10.324346542358398
    8. ' input' → logprob: -10.949346542358398
    9. '[input' → logprob: -11.199346542358398
    10. '`,' → logprob: -11.324346542358398

Token 12: ' input' (ID: 3422)
  Prédit: 'input'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'input' → logprob: -0.2519398331642151
    2. ' input' → logprob: -1.5019397735595703
    3. ')' → logprob: -11.87693977355957
    4. '(input' → logprob: -13.50193977355957
    5. ',input' → logprob: -13.50193977355957
    6. '=input' → logprob: -14.75193977355957
    7. ' ' → logprob: -15.12693977355957
    8. '	input' → logprob: -15.87693977355957
    9. ' )' → logprob: -16.12693977355957
    10. '[input' → logprob: -16.50193977355957

Token 13: '().' (ID: 1454)
  Prédit: '())'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '())' → logprob: -0.11399377137422562
    2. '().' → logprob: -2.8639938831329346
    3. '()' → logprob: -2.9889938831329346
    4. ')' → logprob: -8.363993644714355
    5. '()))' → logprob: -10.488993644714355
    6. '());' → logprob: -10.488993644714355
    7. ' ())' → logprob: -11.238993644714355
    8. '(),' → logprob: -11.363993644714355
    9. '()>' → logprob: -11.613993644714355
    10. '()`' → logprob: -11.863993644714355

Token 14: 'split' (ID: 13627)
  Prédit: 'split'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'split' → logprob: -3.690834273584187e-05
    2. 'strip' → logprob: -10.25003719329834
    3. ' split' → logprob: -14.25003719329834
    4. 'rstrip' → logprob: -14.62503719329834
    5. ')' → logprob: -15.00003719329834
    6. '(split' → logprob: -16.125036239624023
    7. 'spl' → logprob: -17.250036239624023
    8. 'read' → logprob: -18.625036239624023
    9. '_split' → logprob: -19.250036239624023
    10. 'plit' → logprob: -19.625036239624023

Token 15: '())

' (ID: 27654)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ')' → logprob: -0.2854461967945099
    2. '())' → logprob: -1.5354461669921875
    3. '))' → logprob: -3.9104461669921875
    4. '()' → logprob: -4.4104461669921875
    5. '()))' → logprob: -7.5354461669921875
    6. '`)' → logprob: -9.160446166992188
    7. '(' → logprob: -9.785446166992188
    8. '('' → logprob: -10.285446166992188
    9. '')' → logprob: -11.035446166992188
    10. ')`' → logprob: -11.535446166992188

Token 16: 'for' (ID: 1938)
  Prédit: 'if'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'if' → logprob: -0.0020729443058371544
    2. ' if' → logprob: -6.877072811126709
    3. 'i' → logprob: -8.502073287963867
    4. '```' → logprob: -8.627073287963867
    5. '``' → logprob: -9.127073287963867
    6. 'while' → logprob: -9.252073287963867
    7. 'print' → logprob: -9.252073287963867
    8. 'C' → logprob: -10.002073287963867
    9. 'for' → logprob: -10.002073287963867
    10. 'x' → logprob: -10.002073287963867

Token 17: ' i' (ID: 575)
  Prédit: ' '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' ' → logprob: -0.0460674948990345
    2. ' i' → logprob: -3.296067476272583
    3. '_' → logprob: -5.671067714691162
    4. ' _' → logprob: -5.671067714691162
    5. '  ' → logprob: -6.921067714691162
    6. ' ‌' → logprob: -9.921067237854004
    7. 'i' → logprob: -10.421067237854004
    8. ' ' → logprob: -11.546067237854004
    9. ' ▁' → logprob: -12.046067237854004
    10. ' ```' → logprob: -12.421067237854004

Token 18: ' in' (ID: 306)
  Prédit: ' in'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' in' → logprob: -0.3995116055011749
    2. 'in' → logprob: -1.1495115756988525
    3. ' ' → logprob: -4.524511814117432
    4. '  ' → logprob: -7.524511814117432
    5. 'range' → logprob: -7.899511814117432
    6. 'n' → logprob: -8.274511337280273
    7. '_' → logprob: -8.899511337280273
    8. 'space' → logprob: -9.274511337280273
    9. ' n' → logprob: -9.524511337280273
    10. ' i' → logprob: -9.899511337280273

Token 19: ' range' (ID: 3352)
  Prédit: ' range'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' range' → logprob: -0.1270122081041336
    2. 'range' → logprob: -2.127012252807617
    3. ' ' → logprob: -9.752012252807617
    4. '	range' → logprob: -11.752012252807617
    5. '  ' → logprob: -12.377012252807617
    6. '(range' → logprob: -13.002012252807617
    7. 'r' → logprob: -13.252012252807617
    8. 'rang' → logprob: -13.502012252807617
    9. ' ran' → logprob: -13.627012252807617
    10. '.range' → logprob: -13.877012252807617

Token 20: '(A' (ID: 10706)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(' → logprob: -0.1604413390159607
    2. '(K' → logprob: -1.9104413986206055
    3. '(i' → logprob: -9.035441398620605
    4. '(A' → logprob: -9.785441398620605
    5. '(len' → logprob: -11.660441398620605
    6. '((' → logprob: -11.910441398620605
    7. '(k' → logprob: -12.160441398620605
    8. '(`' → logprob: -12.660441398620605
    9. '(range' → logprob: -12.785441398620605
    10. '(
' → logprob: -12.910441398620605

Token 21: ',' (ID: 11)
  Prédit: ','
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ',' → logprob: -0.0011425995035097003
    2. ' ,' → logprob: -6.876142501831055
    3. ',K' → logprob: -9.876142501831055
    4. '+' → logprob: -10.376142501831055
    5. '):' → logprob: -11.876142501831055
    6. ')' → logprob: -12.251142501831055
    7. ' +' → logprob: -12.626142501831055
    8. ',B' → logprob: -12.876142501831055
    9. '*' → logprob: -13.001142501831055
    10. '+,' → logprob: -13.876142501831055

Token 22: ' B' (ID: 418)
  Prédit: 'B'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'B' → logprob: -0.16023559868335724
    2. ' B' → logprob: -1.9102356433868408
    3. 'K' → logprob: -12.160235404968262
    4. ')' → logprob: -13.660235404968262
    5. '	B' → logprob: -13.660235404968262
    6. ' ' → logprob: -13.785235404968262
    7. '>B' → logprob: -14.410235404968262
    8. '(B' → logprob: -14.410235404968262
    9. ' K' → logprob: -14.410235404968262
    10. ',' → logprob: -14.785235404968262

Token 23: ' +' (ID: 659)
  Prédit: '+'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '+' → logprob: -0.043292269110679626
    2. ' +' → logprob: -3.168292284011841
    3. '):' → logprob: -8.793292045593262
    4. ',' → logprob: -8.918292045593262
    5. ' ,' → logprob: -13.543292045593262
    6. '+,' → logprob: -13.543292045593262
    7. ')' → logprob: -13.793292045593262
    8. '):
' → logprob: -13.793292045593262
    9. '+k' → logprob: -14.168292045593262
    10. ' ' → logprob: -14.668292045593262

Token 24: ' ' (ID: 220)
  Prédit: '1'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '1' → logprob: -0.005245022010058165
    2. ' ' → logprob: -5.255245208740234
    3. ')' → logprob: -12.380245208740234
    4. ' K' → logprob: -12.505245208740234
    5. '```' → logprob: -13.505245208740234
    6. ',' → logprob: -14.755245208740234
    7. '   ' → logprob: -14.880245208740234
    8. 'K' → logprob: -15.442745208740234
    9. '<|end|>' → logprob: -15.567745208740234
    10. 'int' → logprob: -16.380245208740234

Token 25: '1' (ID: 16)
  Prédit: '1'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '1' → logprob: -0.0032059962395578623
    2. ' ' → logprob: -5.7532057762146
    3. ')' → logprob: -11.128206253051758
    4. ' K' → logprob: -11.753206253051758
    5. 'K' → logprob: -13.003206253051758
    6. '   ' → logprob: -13.878206253051758
    7. '  ' → logprob: -15.190706253051758
    8. ' )' → logprob: -15.440706253051758
    9. '```' → logprob: -15.440706253051758
    10. '<|end|>' → logprob: -15.440706253051758

Token 26: '):
' (ID: 1883)
  Prédit: '):'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '):' → logprob: -0.002872273325920105
    2. ')' → logprob: -6.502872467041016
    3. ':' → logprob: -7.252872467041016
    4. ' ):' → logprob: -7.627872467041016
    5. '):
' → logprob: -9.127872467041016
    6. ',' → logprob: -10.002872467041016
    7. '+' → logprob: -11.502872467041016
    8. ' :' → logprob: -13.127872467041016
    9. '+:' → logprob: -14.002872467041016
    10. ' )' → logprob: -14.252872467041016

Token 27: '   ' (ID: 271)
  Prédit: ' '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' ' → logprob: -0.47442081570625305
    2. '<|end|>' → logprob: -2.0994207859039307
    3. '   ' → logprob: -2.2244207859039307
    4. ' if' → logprob: -2.5994207859039307
    5. ' i' → logprob: -3.4744207859039307
    6. 'if' → logprob: -3.9744207859039307
    7. ' 
' → logprob: -5.59942102432251
    8. ''' → logprob: -5.84942102432251
    9. '```' → logprob: -6.22442102432251
    10. '    
' → logprob: -6.34942102432251

Token 28: ' if' (ID: 538)
  Prédit: 'if'
  Correct (stricte): False
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'if' (adapté à ' if') → logprob: -0.5503121018409729
    2. ' if' → logprob: -1.8003120422363281
    3. 'print' → logprob: -2.050312042236328
    4. '   ' → logprob: -2.925312042236328
    5. ''' → logprob: -3.550312042236328
    6. '```' → logprob: -4.925312042236328
    7. '"' → logprob: -5.175312042236328
    8. 'for' → logprob: -5.300312042236328
    9. 'i' → logprob: -5.425312042236328
    10. '`' → logprob: -5.425312042236328

Token 29: ' i' (ID: 575)
  Prédit: ' i'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' i' → logprob: -0.09732452034950256
    2. 'i' → logprob: -2.4723246097564697
    3. ' K' → logprob: -4.847324371337891
    4. 'K' → logprob: -8.34732437133789
    5. '(i' → logprob: -9.09732437133789
    6. ' ' → logprob: -9.47232437133789
    7. '   ' → logprob: -11.34732437133789
    8. ' (' → logprob: -11.47232437133789
    9. '	i' → logprob: -11.59732437133789
    10. ''' → logprob: -11.72232437133789

Token 30: ' %' (ID: 1851)
  Prédit: ' %'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' %' → logprob: -0.10056442767381668
    2. '%' → logprob: -2.350564479827881
    3. ' ==' → logprob: -8.600564002990723
    4. '**' → logprob: -10.100564002990723
    5. ' ' → logprob: -10.475564002990723
    6. '==' → logprob: -10.725564002990723
    7. '%i' → logprob: -11.100564002990723
    8. '*' → logprob: -11.475564002990723
    9. ' **' → logprob: -11.850564002990723
    10. '   ' → logprob: -11.975564002990723

Token 31: ' K' (ID: 658)
  Prédit: 'K'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'K' → logprob: -0.20174962282180786
    2. ' K' → logprob: -1.701749563217163
    3. ' ' → logprob: -8.451749801635742
    4. '10' → logprob: -10.201749801635742
    5. '3' → logprob: -10.576749801635742
    6. '2' → logprob: -10.826749801635742
    7. '	K' → logprob: -11.826749801635742
    8. '1' → logprob: -12.326749801635742
    9. '4' → logprob: -12.326749801635742
    10. '9' → logprob: -12.576749801635742

Token 32: ' ==' (ID: 951)
  Prédit: '=='
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '==' → logprob: -0.25208938121795654
    2. ' ==' → logprob: -1.5020893812179565
    3. '=' → logprob: -9.752089500427246
    4. '!=' → logprob: -10.127089500427246
    5. ' !=' → logprob: -10.502089500427246
    6. ' ' → logprob: -11.627089500427246
    7. ':' → logprob: -12.127089500427246
    8. '0' → logprob: -12.127089500427246
    9. '===' → logprob: -12.502089500427246
    10. '==
' → logprob: -13.252089500427246

Token 33: ' ' (ID: 220)
  Prédit: '0'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '0' → logprob: -0.004621187690645456
    2. ' ' → logprob: -5.3796210289001465
    3. '   ' → logprob: -15.504621505737305
    4. '```' → logprob: -15.754621505737305
    5. '  ' → logprob: -16.004621505737305
    6. '<|end|>' → logprob: -16.129621505737305
    7. '==' → logprob: -16.254621505737305
    8. '1' → logprob: -16.754621505737305
    9. '=' → logprob: -16.817121505737305
    10. '۰' → logprob: -17.192121505737305

Token 34: '0' (ID: 15)
  Prédit: '0'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '0' → logprob: -0.0007107630372047424
    2. ' ' → logprob: -7.250710964202881
    3. '```' → logprob: -15.125710487365723
    4. '1' → logprob: -16.25071144104004
    5. '  ' → logprob: -16.68821144104004
    6. '<|end|>' → logprob: -16.81321144104004
    7. '=' → logprob: -17.18821144104004
    8. '०' → logprob: -17.37571144104004
    9. '۰' → logprob: -17.50071144104004
    10. '０' → logprob: -17.50071144104004

Token 35: ':
' (ID: 734)
  Prédit: ':'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ':' → logprob: -6.027225754223764e-05
    2. ':
' → logprob: -9.750060081481934
    3. '):' → logprob: -13.875060081481934
    4. ':**' → logprob: -14.500060081481934
    5. ':return' → logprob: -15.875060081481934
    6. ' :' → logprob: -16.25006103515625
    7. '   ' → logprob: -16.75006103515625
    8. ':

' → logprob: -17.37506103515625
    9. ',' → logprob: -17.37506103515625
    10. '>:' → logprob: -17.50006103515625

Token 36: '       ' (ID: 309)
  Prédit: '       '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '       ' → logprob: -0.006852954160422087
    2. 'print' → logprob: -5.631853103637695
    3. ' print' → logprob: -6.131853103637695
    4. '   ' → logprob: -7.131853103637695
    5. '    ' → logprob: -9.256853103637695
    6. '\n' → logprob: -10.631853103637695
    7. '    ' → logprob: -11.006853103637695
    8. '           ' → logprob: -11.131853103637695
    9. '      ' → logprob: -11.131853103637695
    10. '     ' → logprob: -11.131853103637695

Token 37: ' print' (ID: 2123)
  Prédit: 'print'
  Correct (stricte): False
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'print' (adapté à ' print') → logprob: -0.1440465897321701
    2. ' print' → logprob: -2.1440465450286865
    3. '   ' → logprob: -4.269046783447266
    4. '       ' → logprob: -6.394046783447266
    5. '    ' → logprob: -7.644046783447266
    6. 'pr' → logprob: -8.144046783447266
    7. 'p' → logprob: -9.019046783447266
    8. 'break' → logprob: -9.144046783447266
    9. ' break' → logprob: -9.269046783447266
    10. 'prin' → logprob: -9.769046783447266

Token 38: '("' (ID: 568)
  Prédit: '(i'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(i' → logprob: -0.0024783893022686243
    2. '(' → logprob: -6.00247859954834
    3. '()' → logprob: -13.12747859954834
    4. 'i' → logprob: -14.87747859954834
    5. '('' → logprob: -15.62747859954834
    6. '("' → logprob: -16.877477645874023
    7. '((' → logprob: -16.877477645874023
    8. '(
' → logprob: -18.127477645874023
    9. '(int' → logprob: -18.627477645874023
    10. '(f' → logprob: -18.877477645874023

Token 39: 'OK' (ID: 5175)
  Prédit: 'i'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'i' → logprob: -0.0005039428360760212
    2. '   ' → logprob: -8.250503540039062
    3. ' i' → logprob: -9.000503540039062
    4. '(i' → logprob: -9.500503540039062
    5. '*' → logprob: -11.750503540039062
    6. '*i' → logprob: -11.875503540039062
    7. ' ' → logprob: -12.125503540039062
    8. '[i' → logprob: -12.125503540039062
    9. ')' → logprob: -12.875503540039062
    10. '{i' → logprob: -13.000503540039062

Token 40: '")
' (ID: 1896)
  Prédit: '")'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '")' → logprob: -0.0033809030428528786
    2. ')' → logprob: -5.87838077545166
    3. ')")' → logprob: -7.50338077545166
    4. '!")' → logprob: -11.25338077545166
    5. '")
' → logprob: -12.37838077545166
    6. '",' → logprob: -13.12838077545166
    7. '”)' → logprob: -14.12838077545166
    8. '"' → logprob: -14.12838077545166
    9. '}")' → logprob: -14.25338077545166
    10. 'i' → logprob: -14.37838077545166

Token 41: '       ' (ID: 309)
  Prédit: ''
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False

Token 42: ' break' (ID: 2338)
  Prédit: '       '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '       ' → logprob: -0.01339845173060894
    2. 'break' (adapté à ' break') → logprob: -4.51339864730835
    3. ' break' → logprob: -7.13839864730835
    4. '   ' → logprob: -7.26339864730835
    5. '```' → logprob: -8.513398170471191
    6. 'else' → logprob: -8.888398170471191
    7. '           ' → logprob: -9.138398170471191
    8. '        ' → logprob: -9.263398170471191
    9. '      ' → logprob: -9.763398170471191
    10. '<|end|>' → logprob: -9.888398170471191

Token 43: '
' (ID: 198)
  Prédit: 'else'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'else' → logprob: -0.0022401853930205107
    2. ' else' → logprob: -6.127240180969238
    3. '   ' → logprob: -10.877240180969238
    4. '```' → logprob: -11.502240180969238
    5. '#else' → logprob: -11.627240180969238
    6. ' ' → logprob: -12.877240180969238
    7. 'Else' → logprob: -13.127240180969238
    8. '	else' → logprob: -13.252240180969238
    9. '_else' → logprob: -13.377240180969238
    10. 'continue' → logprob: -13.752240180969238

Token 44: 'else' (ID: 2807)
  Prédit: 'else'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'else' → logprob: -0.002583266468718648
    2. ' else' → logprob: -6.0025835037231445
    3. '```' → logprob: -9.627583503723145
    4. '#else' → logprob: -11.877583503723145
    5. '<|end|>' → logprob: -12.627583503723145
    6. '   ' → logprob: -12.627583503723145
    7. 'e' → logprob: -12.752583503723145
    8. 'Else' → logprob: -12.752583503723145
    9. ' ' → logprob: -12.752583503723145
    10. '_else' → logprob: -13.002583503723145

Token 45: ':
' (ID: 734)
  Prédit: ':'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ':' → logprob: -0.0006638261256739497
    2. ':
' → logprob: -7.750663757324219
    3. ' :' → logprob: -8.375663757324219
    4. ' :
' → logprob: -13.750663757324219
    5. '   ' → logprob: -13.875663757324219
    6. ':

' → logprob: -16.12566375732422
    7. '：' → logprob: -16.25066375732422
    8. '<|end|>' → logprob: -16.25066375732422
    9. ' ' → logprob: -16.37566375732422
    10. ':return' → logprob: -16.50066375732422

Token 46: '   ' (ID: 271)
  Prédit: 'print'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'print' → logprob: -0.0009651767322793603
    2. '   ' → logprob: -7.000965118408203
    3. ' print' → logprob: -10.500965118408203
    4. '       ' → logprob: -10.625965118408203
    5. '	print' → logprob: -13.625965118408203
    6. '```' → logprob: -14.875965118408203
    7. ' ' → logprob: -16.375965118408203
    8. '  ' → logprob: -16.875965118408203
    9. 'Print' → logprob: -17.000965118408203
    10. '"' → logprob: -17.250965118408203

Token 47: ' print' (ID: 2123)
  Prédit: 'print'
  Correct (stricte): False
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'print' (adapté à ' print') → logprob: -3.726595241460018e-05
    2. '   ' → logprob: -10.75003719329834
    3. ' print' → logprob: -11.12503719329834
    4. '       ' → logprob: -14.50003719329834
    5. 'pass' → logprob: -15.25003719329834
    6. 'pr' → logprob: -16.375038146972656
    7. '	print' → logprob: -16.875038146972656
    8. '```' → logprob: -17.000038146972656
    9. ' ' → logprob: -17.125038146972656
    10. 'prit' → logprob: -17.875038146972656

Token 48: '("' (ID: 568)
  Prédit: '("'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '("' → logprob: -0.1184319406747818
    2. '(' → logprob: -2.24343204498291
    3. '()' → logprob: -6.11843204498291
    4. '("")' → logprob: -6.11843204498291
    5. '(-' → logprob: -6.86843204498291
    6. '(None' → logprob: -9.74343204498291
    7. '(False' → logprob: -10.36843204498291
    8. '('' → logprob: -10.86843204498291
    9. '("("' → logprob: -11.24343204498291
    10. '("-' → logprob: -11.61843204498291

Token 49: 'NG' (ID: 19236)
  Prédit: 'NG'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'NG' → logprob: -0.00011224505578866228
    2. '-' → logprob: -10.750112533569336
    3. '"' → logprob: -10.875112533569336
    4. 'Impossible' → logprob: -11.375112533569336
    5. 'ng' → logprob: -11.500112533569336
    6. 'OK' → logprob: -12.125112533569336
    7. 'None' → logprob: -12.250112533569336
    8. '")

' → logprob: -12.375112533569336
    9. 'IMP' → logprob: -12.500112533569336
    10. ' NG' → logprob: -12.625112533569336

Token 50: '")' (ID: 1405)
  Prédit: '")'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '")' → logprob: -6.392202976712724e-06
    2. ')' → logprob: -12.125006675720215
    3. ')")' → logprob: -14.125006675720215
    4. '")
' → logprob: -16.1250057220459
    5. '"' → logprob: -16.8750057220459
    6. '')' → logprob: -18.1250057220459
    7. '");' → logprob: -19.7500057220459
    8. '}")' → logprob: -19.7500057220459
    9. '\")' → logprob: -19.8750057220459
    10. '”)' → logprob: -20.1250057220459


RÉSUMÉ:
--------------------------------------------------------------------------------
Total des tokens analysés: 48
Tokens correctement prédits (1ère position, stricte): 15
Tokens correctement prédits (1ère position, avec adaptation): 18
Tokens correctement prédits (top 10): 40
Précision stricte (1ère position): 31.25%
Précision adaptée (1ère position): 37.50%
Précision (top 10): 83.33%
================================================================================
