================================================================================
ANALYSE DE PRÉDICTION TOKEN PAR TOKEN (BATCH API)
Date: 2025-06-04 19:19:00
Modèle de tokenisation: gpt-4o-mini
================================================================================

SCRIPT ANALYSÉ:
--------------------------------------------------------------------------------
from functools import reduce

def main():
    a = [int(x) for x in input().split()]
    def get_index(idx):
        return a[idx]
    print(get_index(2), *list(map(lambda i: a[i], [0,1])))

if __name__ == '__main__': main()
--------------------------------------------------------------------------------

RÉSULTATS D'ANALYSE TOKEN PAR TOKEN:
--------------------------------------------------------------------------------
Token 0: 'from' (ID: 2845)
  → Token d'amorce (pas de prédiction)

Token 1: ' functools' (ID: 142636)
  → Token d'amorce (pas de prédiction)

Token 2: ' import' (ID: 1588)
  → Token d'amorce (pas de prédiction)

Token 3: ' reduce' (ID: 10389)
  Prédit: 'wrap'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'wrap' → logprob: -0.534712553024292
    2. 'partial' → logprob: -1.034712553024292
    3. 'reduce' → logprob: -3.034712553024292
    4. ' wraps' → logprob: -5.284712791442871
    5. 'l' → logprob: -5.659712791442871
    6. 'cached' → logprob: -6.909712791442871
    7. 'cache' → logprob: -7.659712791442871
    8. ' partial' → logprob: -8.534712791442871
    9. 'cmp' → logprob: -8.659712791442871
    10. '```' → logprob: -8.784712791442871

Token 4: '

' (ID: 279)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '(' → logprob: -0.0199317317456007
    2. '.' → logprob: -4.519931793212891
    3. '(lambda' → logprob: -5.019931793212891
    4. ' (' → logprob: -7.019931793212891
    5. ',' → logprob: -7.769931793212891
    6. '```' → logprob: -8.01993179321289
    7. '\' → logprob: -9.01993179321289
    8. ''' → logprob: -9.64493179321289
    9. '(
' → logprob: -9.89493179321289
    10. '`' → logprob: -10.01993179321289

Token 5: 'def' (ID: 1314)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(' → logprob: -0.014034456573426723
    2. '(lambda' → logprob: -4.889034271240234
    3. '\' → logprob: -6.514034271240234
    4. ',' → logprob: -6.514034271240234
    5. 'def' → logprob: -6.639034271240234
    6. '.' → logprob: -7.014034271240234
    7. '```' → logprob: -7.389034271240234
    8. '\(' → logprob: -8.889034271240234
    9. '(
' → logprob: -9.139034271240234
    10. '\n' → logprob: -9.514034271240234

Token 6: ' main' (ID: 2758)
  Prédit: ' reduce'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' reduce' → logprob: -0.2741330564022064
    2. ' factorial' → logprob: -2.0241329669952393
    3. ' ' → logprob: -2.8991329669952393
    4. ' calculate' → logprob: -4.024133205413818
    5. ' map' → logprob: -4.274133205413818
    6. ' sum' → logprob: -5.024133205413818
    7. ' add' → logprob: -6.149133205413818
    8. ' reducer' → logprob: -6.524133205413818
    9. ' my' → logprob: -6.774133205413818
    10. ' apply' → logprob: -6.774133205413818

Token 7: '():
' (ID: 8595)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '(' → logprob: -0.007801453582942486
    2. ':' → logprob: -5.632801532745361
    3. '():' → logprob: -6.007801532745361
    4. '(:' → logprob: -7.632801532745361
    5. '```' → logprob: -7.632801532745361
    6. '(
' → logprob: -8.132801055908203
    7. ' (' → logprob: -8.757801055908203
    8. '):' → logprob: -10.007801055908203
    9. '.' → logprob: -10.757801055908203
    10. '(":' → logprob: -10.882801055908203

Token 8: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.07452205568552017
    2. '    ' → logprob: -3.199522018432617
    3. ' ' → logprob: -3.824522018432617
    4. 'a' → logprob: -6.574522018432617
    5. '    
' → logprob: -6.699522018432617
    6. 'result' → logprob: -6.824522018432617
    7. '(' → logprob: -6.949522018432617
    8. '[' → logprob: -7.449522018432617
    9. ' return' → logprob: -7.574522018432617
    10. 'r' → logprob: -7.824522018432617

Token 9: ' a' (ID: 261)
  Prédit: 'result'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'result' → logprob: -0.2195335477590561
    2. 'total' → logprob: -2.5945334434509277
    3. 'numbers' → logprob: -3.3445334434509277
    4. ' result' → logprob: -3.9695334434509277
    5. 'return' → logprob: -4.219533443450928
    6. 'n' → logprob: -4.594533443450928
    7. '   ' → logprob: -4.594533443450928
    8. 'data' → logprob: -4.719533443450928
    9. ' total' → logprob: -4.969533443450928
    10. ' numbers' → logprob: -5.594533443450928

Token 10: ' =' (ID: 314)
  Prédit: ' ='
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' =' → logprob: -0.5560786724090576
    2. ' ' → logprob: -1.0560786724090576
    3. '=' → logprob: -3.6810786724090576
    4. ',' → logprob: -4.056078910827637
    5. '.' → logprob: -4.806078910827637
    6. '[' → logprob: -4.806078910827637
    7. '  ' → logprob: -5.431078910827637
    8. '   ' → logprob: -5.556078910827637
    9. '_' → logprob: -5.806078910827637
    10. 'r' → logprob: -5.931078910827637

Token 11: ' [' (ID: 723)
  Prédit: ' ['
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' [' → logprob: -0.1651204377412796
    2. '[' → logprob: -1.9151204824447632
    3. ' ' → logprob: -5.915120601654053
    4. ' []' → logprob: -7.290120601654053
    5. '1' → logprob: -7.790120601654053
    6. '0' → logprob: -8.415120124816895
    7. '[int' → logprob: -8.540120124816895
    8. ' range' → logprob: -9.040120124816895
    9. '[]' → logprob: -9.040120124816895
    10. '10' → logprob: -9.540120124816895

Token 12: 'int' (ID: 491)
  Prédit: '1'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '1' → logprob: -2.3080716346157715e-05
    2. ' ' → logprob: -11.750022888183594
    3. '   ' → logprob: -12.250022888183594
    4. '0' → logprob: -12.625022888183594
    5. '2' → logprob: -12.875022888183594
    6. '3' → logprob: -13.500022888183594
    7. '5' → logprob: -13.875022888183594
    8. ']' → logprob: -14.500022888183594
    9. '4' → logprob: -14.750022888183594
    10. 'i' → logprob: -14.875022888183594

Token 13: '(x' (ID: 4061)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(' → logprob: -0.4936339557170868
    2. '(x' → logprob: -0.9936339855194092
    3. '(i' → logprob: -4.74363374710083
    4. '(s' → logprob: -5.86863374710083
    5. '(input' → logprob: -5.86863374710083
    6. '(token' → logprob: -6.36863374710083
    7. '('' → logprob: -6.49363374710083
    8. '(line' → logprob: -7.86863374710083
    9. ' (' → logprob: -8.118634223937988
    10. '(item' → logprob: -8.243634223937988

Token 14: ')' (ID: 8)
  Prédit: ')'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')' → logprob: -0.0008488174062222242
    2. ')]' → logprob: -7.625848770141602
    3. '(' → logprob: -9.125848770141602
    4. ' )' → logprob: -9.875848770141602
    5. '(x' → logprob: -10.000848770141602
    6. 'for' → logprob: -10.250848770141602
    7. '())' → logprob: -10.500848770141602
    8. ')])' → logprob: -10.750848770141602
    9. ' for' → logprob: -11.250848770141602
    10. '')' → logprob: -11.375848770141602

Token 15: ' for' (ID: 395)
  Prédit: ' for'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' for' → logprob: -0.9327221512794495
    2. 'for' → logprob: -0.9327221512794495
    3. ')' → logprob: -1.5577220916748047
    4. ']' → logprob: -7.307722091674805
    5. '(x' → logprob: -7.432722091674805
    6. '(' → logprob: -8.057722091674805
    7. ')]' → logprob: -8.057722091674805
    8. ' )' → logprob: -8.307722091674805
    9. '   ' → logprob: -9.557722091674805
    10. ',' → logprob: -9.557722091674805

Token 16: ' x' (ID: 1215)
  Prédit: ' input'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' input' → logprob: -0.02524099126458168
    2. 'input' → logprob: -3.900240898132324
    3. ' range' → logprob: -5.525240898132324
    4. ' ' → logprob: -8.900240898132324
    5. 'range' → logprob: -9.025240898132324
    6. ' x' → logprob: -9.150240898132324
    7. ' user' → logprob: -9.150240898132324
    8. ' a' → logprob: -9.400240898132324
    9. '<|end|>' → logprob: -10.400240898132324
    10. ' raw' → logprob: -10.525240898132324

Token 17: ' in' (ID: 306)
  Prédit: ' in'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' in' → logprob: -0.08898374438285828
    2. 'in' → logprob: -2.4639837741851807
    3. ' ' → logprob: -11.338983535766602
    4. 'import' → logprob: -11.838983535766602
    5. '	in' → logprob: -12.338983535766602
    6. 'n' → logprob: -12.713983535766602
    7. 'i' → logprob: -13.526483535766602
    8. '  ' → logprob: -13.526483535766602
    9. ')' → logprob: -13.588983535766602
    10. 'inx' → logprob: -13.901483535766602

Token 18: ' input' (ID: 3422)
  Prédit: 'input'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'input' → logprob: -0.062237448990345
    2. ' input' → logprob: -2.812237501144409
    3. 'range' → logprob: -8.312237739562988
    4. ' range' → logprob: -11.187237739562988
    5. '(input' → logprob: -12.062237739562988
    6. '```' → logprob: -13.812237739562988
    7. ' ' → logprob: -14.062237739562988
    8. 'raw' → logprob: -14.562237739562988
    9. '=input' → logprob: -14.937237739562988
    10. '	input' → logprob: -15.062237739562988

Token 19: '().' (ID: 1454)
  Prédit: '()]'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '()]' → logprob: -0.028637295588850975
    2. '()' → logprob: -3.903637409210205
    3. '())' → logprob: -5.028637409210205
    4. '(' → logprob: -7.403637409210205
    5. ']' → logprob: -7.778637409210205
    6. '('' → logprob: -8.653636932373047
    7. ')]' → logprob: -8.653636932373047
    8. '()][' → logprob: -10.653636932373047
    9. ']()' → logprob: -10.903636932373047
    10. '().' → logprob: -11.153636932373047

Token 20: 'split' (ID: 13627)
  Prédit: 'split'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'split' → logprob: -0.0015261677326634526
    2. 'strip' → logprob: -6.501526355743408
    3. 'rstrip' → logprob: -10.75152587890625
    4. ' split' → logprob: -13.00152587890625
    5. 'spl' → logprob: -16.75152587890625
    6. '(split' → logprob: -17.37652587890625
    7. ' strip' → logprob: -18.50152587890625
    8. 'replace' → logprob: -19.62652587890625
    9. ' ' → logprob: -20.50152587890625
    10. ')' → logprob: -20.62652587890625

Token 21: '()]
' (ID: 67155)
  Prédit: '())'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '())' → logprob: -0.3160097301006317
    2. '()]' → logprob: -1.566009759902954
    3. ')]' → logprob: -3.191009759902954
    4. '()' → logprob: -4.441009521484375
    5. '(' → logprob: -5.441009521484375
    6. ')' → logprob: -5.816009521484375
    7. '('' → logprob: -6.691009521484375
    8. ']' → logprob: -8.191009521484375
    9. '')]' → logprob: -8.816009521484375
    10. ')])' → logprob: -10.191009521484375

Token 22: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.1225559264421463
    2. ' ' → logprob: -2.74755597114563
    3. '    
' → logprob: -4.622555732727051
    4. '+' → logprob: -4.997555732727051
    5. 'r' → logprob: -5.497555732727051
    6. ' if' → logprob: -5.497555732727051
    7. '[' → logprob: -5.497555732727051
    8. '
' → logprob: -5.747555732727051
    9. ' 
' → logprob: -5.747555732727051
    10. 'result' → logprob: -6.122555732727051

Token 23: ' def' (ID: 1056)
  Prédit: 'result'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'result' → logprob: -0.8156791925430298
    2. ' result' → logprob: -1.6906791925430298
    3. 's' → logprob: -2.3156790733337402
    4. ' s' → logprob: -2.9406790733337402
    5. 'sum' → logprob: -3.0656790733337402
    6. '   ' → logprob: -3.5656790733337402
    7. ' total' → logprob: -3.5656790733337402
    8. 'total' → logprob: -3.5656790733337402
    9. ' r' → logprob: -3.9406790733337402
    10. 'r' → logprob: -4.44067907333374

Token 24: ' get' (ID: 717)
  Prédit: ' reduce'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' reduce' → logprob: -1.4195414781570435
    2. ' reducer' → logprob: -1.4195414781570435
    3. ' add' → logprob: -2.044541358947754
    4. ' multiply' → logprob: -2.419541358947754
    5. ' ' → logprob: -2.419541358947754
    6. ' factorial' → logprob: -2.544541358947754
    7. ' sum' → logprob: -3.044541358947754
    8. ' f' → logprob: -4.169541358947754
    9. ' accumulate' → logprob: -4.544541358947754
    10. ' square' → logprob: -4.919541358947754

Token 25: '_index' (ID: 7748)
  Prédit: '_max'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '_max' → logprob: -0.695557177066803
    2. '_sum' → logprob: -1.6955571174621582
    3. '_' → logprob: -1.8205571174621582
    4. '_min' → logprob: -3.195557117462158
    5. '_product' → logprob: -3.820557117462158
    6. '_g' → logprob: -4.320557117462158
    7. '_unique' → logprob: -4.695557117462158
    8. '_factor' → logprob: -4.820557117462158
    9. '_div' → logprob: -5.195557117462158
    10. ' _' → logprob: -5.195557117462158

Token 26: '(idx' (ID: 42793)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '(' → logprob: -0.011465342715382576
    2. '(x' → logprob: -5.511465549468994
    3. '(a' → logprob: -6.011465549468994
    4. '_' → logprob: -7.136465549468994
    5. '(token' → logprob: -7.386465549468994
    6. '(_' → logprob: -7.511465549468994
    7. '(s' → logprob: -7.636465549468994
    8. ' (' → logprob: -7.886465549468994
    9. '(i' → logprob: -7.886465549468994
    10. '(word' → logprob: -8.636465072631836

Token 27: '):
' (ID: 1883)
  Prédit: '):'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '):' → logprob: -0.023885751143097878
    2. ')' → logprob: -3.898885726928711
    3. ',' → logprob: -6.023885726928711
    4. ' ):' → logprob: -7.523885726928711
    5. 's' → logprob: -8.773885726928711
    6. ':' → logprob: -9.773885726928711
    7. '+' → logprob: -10.648885726928711
    8. ' ,' → logprob: -10.773885726928711
    9. ' ' → logprob: -11.148885726928711
    10. ' )' → logprob: -11.398885726928711

Token 28: '       ' (ID: 309)
  Prédit: '       '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '       ' → logprob: -0.6951549053192139
    2. ':' → logprob: -0.9451549053192139
    3. '   ' → logprob: -2.820154905319214
    4. '(' → logprob: -4.070155143737793
    5. '    ' → logprob: -4.570155143737793
    6. '):' → logprob: -5.070155143737793
    7. ')' → logprob: -5.195155143737793
    8. '[' → logprob: -5.570155143737793
    9. ']' → logprob: -5.945155143737793
    10. ',' → logprob: -6.195155143737793

Token 29: ' return' (ID: 622)
  Prédit: ' return'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' return' → logprob: -0.47476285696029663
    2. '       ' → logprob: -1.2247629165649414
    3. 'return' (adapté à ' return') → logprob: -3.4747629165649414
    4. '    ' → logprob: -3.9747629165649414
    5. '   ' → logprob: -3.9747629165649414
    6. ' if' → logprob: -4.849762916564941
    7. '        ' → logprob: -5.724762916564941
    8. ' ' → logprob: -6.349762916564941
    9. '           ' → logprob: -6.349762916564941
    10. ':return' → logprob: -8.849762916564941

Token 30: ' a' (ID: 261)
  Prédit: ' a'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' a' → logprob: -0.0892929807305336
    2. 'a' → logprob: -2.4642930030822754
    3. ' reduce' → logprob: -9.214292526245117
    4. '   ' → logprob: -9.464292526245117
    5. ' lambda' → logprob: -10.464292526245117
    6. ' len' → logprob: -10.714292526245117
    7. ' ' → logprob: -10.714292526245117
    8. ' idx' → logprob: -10.964292526245117
    9. 'reduce' → logprob: -11.589292526245117
    10. '    ' → logprob: -11.714292526245117

Token 31: '[idx' (ID: 25582)
  Prédit: '[idx'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '[idx' → logprob: -0.05505254864692688
    2. '[' → logprob: -2.9300525188446045
    3. '[
' → logprob: -10.555052757263184
    4. ' ' → logprob: -10.805052757263184
    5. 'idx' → logprob: -10.930052757263184
    6. '[int' → logprob: -11.430052757263184
    7. ' [' → logprob: -11.555052757263184
    8. '[]' → logprob: -11.680052757263184
    9. '```' → logprob: -11.680052757263184
    10. '   ' → logprob: -11.805052757263184

Token 32: ']
' (ID: 1592)
  Prédit: ']'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ']' → logprob: -0.0007146967691369355
    2. ')]' → logprob: -8.000714302062988
    3. ')' → logprob: -8.375714302062988
    4. '])' → logprob: -9.000714302062988
    5. ' ]' → logprob: -10.750714302062988
    6. '])]' → logprob: -13.750714302062988
    7. '`]' → logprob: -14.500714302062988
    8. ']
' → logprob: -14.625714302062988
    9. ')])' → logprob: -14.750714302062988
    10. '']' → logprob: -15.000714302062988

Token 33: '   ' (ID: 271)
  Prédit: ''
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False

Token 34: ' print' (ID: 2123)
  Prédit: ''
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False

Token 35: '(get' (ID: 7119)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(' → logprob: -0.01292773149907589
    2. '(re' → logprob: -4.387927532196045
    3. '(sum' → logprob: -9.137928009033203
    4. '(max' → logprob: -9.137928009033203
    5. '(get' → logprob: -9.637928009033203
    6. '(len' → logprob: -10.387928009033203
    7. '('' → logprob: -10.887928009033203
    8. '("("' → logprob: -11.262928009033203
    9. '(a' → logprob: -11.387928009033203
    10. '(list' → logprob: -11.512928009033203

Token 36: '_index' (ID: 7748)
  Prédit: '_index'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_index' → logprob: -0.00040123690268956125
    2. '_i' → logprob: -8.375401496887207
    3. '_' → logprob: -9.000401496887207
    4. ' _' → logprob: -11.000401496887207
    5. ')_' → logprob: -11.625401496887207
    6. '_in' → logprob: -11.875401496887207
    7. '_ind' → logprob: -12.375401496887207
    8. '_line' → logprob: -13.000401496887207
    9. ')' → logprob: -13.500401496887207
    10. '_)' → logprob: -13.625401496887207

Token 37: '(' (ID: 7)
  Prédit: '('
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(' → logprob: -0.027819795534014702
    2. '(len' → logprob: -4.402819633483887
    3. '(a' → logprob: -5.152819633483887
    4. ')' → logprob: -5.402819633483887
    5. '())' → logprob: -5.652819633483887
    6. '()' → logprob: -7.277819633483887
    7. '(-' → logprob: -8.527819633483887
    8. '(
' → logprob: -9.027819633483887
    9. '(

' → logprob: -10.027819633483887
    10. '('' → logprob: -10.277819633483887

Token 38: '2' (ID: 17)
  Prédit: '0'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '0' → logprob: -0.0007474447484128177
    2. 'len' → logprob: -8.375747680664062
    3. ' ' → logprob: -8.500747680664062
    4. '-' → logprob: -9.125747680664062
    5. 'a' → logprob: -9.625747680664062
    6. ')' → logprob: -9.750747680664062
    7. '1' → logprob: -10.750747680664062
    8. 'int' → logprob: -11.000747680664062
    9. '2' → logprob: -11.625747680664062
    10. ' len' → logprob: -11.875747680664062

Token 39: '),' (ID: 936)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')' → logprob: -0.023248620331287384
    2. '))' → logprob: -3.7732486724853516
    3. ')))' → logprob: -12.773248672485352
    4. ' )' → logprob: -16.02324867248535
    5. ')
' → logprob: -17.14824867248535
    6. '')' → logprob: -17.39824867248535
    7. '])' → logprob: -17.52324867248535
    8. '),' → logprob: -17.89824867248535
    9. '})' → logprob: -18.52324867248535
    10. ')}' → logprob: -18.52324867248535

Token 40: ' *' (ID: 425)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ')' → logprob: -0.5816195607185364
    2. ' )' → logprob: -1.5816195011138916
    3. 'get' → logprob: -2.2066195011138916
    4. 'a' → logprob: -2.9566195011138916
    5. ' get' → logprob: -3.3316195011138916
    6. '")' → logprob: -4.831619739532471
    7. 'len' → logprob: -4.956619739532471
    8. ' a' → logprob: -5.456619739532471
    9. ' ' → logprob: -5.831619739532471
    10. '')' → logprob: -6.081619739532471

Token 41: 'list' (ID: 2641)
  Prédit: 'a'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'a' → logprob: -0.18622492253780365
    2. ' a' → logprob: -1.8112249374389648
    3. '[a' → logprob: -5.686224937438965
    4. '(a' → logprob: -6.686224937438965
    5. '[' → logprob: -7.686224937438965
    6. 'range' → logprob: -8.311224937438965
    7. ' [' → logprob: -8.311224937438965
    8. ')' → logprob: -8.811224937438965
    9. ' range' → logprob: -8.936224937438965
    10. ' map' → logprob: -8.936224937438965

Token 42: '(map' (ID: 16946)
  Prédit: '(map'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(map' → logprob: -0.4502401649951935
    2. '(' → logprob: -1.450240135192871
    3. '(a' → logprob: -2.200240135192871
    4. '(range' → logprob: -4.200240135192871
    5. '(filter' → logprob: -6.325240135192871
    6. '(re' → logprob: -8.325240135192871
    7. ')' → logprob: -10.325240135192871
    8. '(get' → logprob: -10.325240135192871
    9. '(s' → logprob: -10.700240135192871
    10. 'a' → logprob: -10.825240135192871

Token 43: '(lambda' (ID: 43341)
  Prédit: '(get'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(get' → logprob: -0.24715448915958405
    2. '(' → logprob: -1.8721544742584229
    3. '(lambda' → logprob: -2.997154474258423
    4. '(int' → logprob: -4.372154712677002
    5. '(re' → logprob: -6.372154712677002
    6. ' (' → logprob: -8.247154235839844
    7. '(str' → logprob: -8.497154235839844
    8. '(print' → logprob: -8.622154235839844
    9. '(abs' → logprob: -9.122154235839844
    10. '(eval' → logprob: -10.872154235839844

Token 44: ' i' (ID: 575)
  Prédit: ' x'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' x' → logprob: -1.216107964515686
    2. '(lambda' → logprob: -1.341107964515686
    3. ' (' → logprob: -1.716107964515686
    4. ' get' → logprob: -2.5911078453063965
    5. 'x' → logprob: -3.2161078453063965
    6. '(' → logprob: -3.2161078453063965
    7. ' a' → logprob: -3.3411078453063965
    8. ' lambda' → logprob: -3.4661078453063965
    9. '(get' → logprob: -4.8411078453063965
    10. '(int' → logprob: -5.0911078453063965

Token 45: ':' (ID: 25)
  Prédit: ':'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ':' → logprob: -0.706525981426239
    2. ' :' → logprob: -0.706525981426239
    3. ' i' → logprob: -5.331525802612305
    4. ',' → logprob: -6.081525802612305
    5. ':i' → logprob: -6.206525802612305
    6. ' a' → logprob: -6.581525802612305
    7. ',i' → logprob: -7.331525802612305
    8. ' ,' → logprob: -7.456525802612305
    9. ' get' → logprob: -7.956525802612305
    10. ':get' → logprob: -7.956525802612305

Token 46: ' a' (ID: 261)
  Prédit: ' get'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' get' → logprob: -0.29999759793281555
    2. 'get' → logprob: -1.4249975681304932
    3. 'a' → logprob: -5.174997806549072
    4. ' a' → logprob: -5.299997806549072
    5. ' i' → logprob: -5.924997806549072
    6. ' reduce' → logprob: -5.924997806549072
    7. 'reduce' → logprob: -6.299997806549072
    8. 'i' → logprob: -7.424997806549072
    9. ' ' → logprob: -10.174997329711914
    10. ' geti' → logprob: -10.424997329711914

Token 47: '[i' (ID: 1768)
  Prédit: '[i'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '[i' → logprob: -0.08995223045349121
    2. '[' → logprob: -3.089952230453491
    3. '[get' → logprob: -3.714952230453491
    4. '[idx' → logprob: -5.71495246887207
    5. '[index' → logprob: -5.83995246887207
    6. '.index' → logprob: -5.83995246887207
    7. '+' → logprob: -6.46495246887207
    8. '[a' → logprob: -6.58995246887207
    9. ' [' → logprob: -7.33995246887207
    10. ' +' → logprob: -7.71495246887207

Token 48: '],' (ID: 2155)
  Prédit: '+'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '+' → logprob: -0.8953832387924194
    2. '),' → logprob: -1.2703832387924194
    3. '],' → logprob: -1.5203832387924194
    4. ' +' → logprob: -3.020383358001709
    5. ',' → logprob: -4.145383358001709
    6. '-' → logprob: -4.770383358001709
    7. ' ' → logprob: -5.645383358001709
    8. ' ,' → logprob: -5.770383358001709
    9. '**' → logprob: -5.770383358001709
    10. '*' → logprob: -6.145383358001709

Token 49: ' [' (ID: 723)
  Prédit: ' range'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' range' → logprob: -0.3134574294090271
    2. 'range' → logprob: -1.3134574890136719
    3. ' a' → logprob: -9.438457489013672
    4. '[' → logprob: -10.313457489013672
    5. 'a' → logprob: -10.313457489013672
    6. ' [' → logprob: -10.688457489013672
    7. ' ' → logprob: -11.688457489013672
    8. '   ' → logprob: -11.938457489013672
    9. '(range' → logprob: -12.563457489013672
    10. '  ' → logprob: -12.813457489013672

Token 50: '0' (ID: 15)
  Prédit: '0'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '0' → logprob: -0.008936699479818344
    2. '1' → logprob: -4.758936882019043
    3. ' ' → logprob: -9.258936882019043
    4. 'i' → logprob: -9.633936882019043
    5. '3' → logprob: -9.883936882019043
    6. '   ' → logprob: -10.258936882019043
    7. '2' → logprob: -10.383936882019043
    8. 'x' → logprob: -10.758936882019043
    9. '*' → logprob: -12.133936882019043
    10. 'int' → logprob: -12.758936882019043

Token 51: ',' (ID: 11)
  Prédit: ','
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ',' → logprob: -0.0017809720011427999
    2. ' ,' → logprob: -6.376780986785889
    3. ' ' → logprob: -10.50178050994873
    4. '1' → logprob: -10.75178050994873
    5. ',
' → logprob: -11.12678050994873
    6. '+' → logprob: -12.50178050994873
    7. ',

' → logprob: -12.62678050994873
    8. '2' → logprob: -12.87678050994873
    9. '3' → logprob: -14.00178050994873
    10. '-' → logprob: -14.00178050994873

Token 52: '1' (ID: 16)
  Prédit: ' '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' ' → logprob: -0.42878445982933044
    2. '1' → logprob: -1.0537844896316528
    3. '3' → logprob: -9.803784370422363
    4. '4' → logprob: -11.303784370422363
    5. '  ' → logprob: -12.053784370422363
    6. '2' → logprob: -12.178784370422363
    7. ' ' → logprob: -13.803784370422363
    8. '   ' → logprob: -14.053784370422363
    9. '5' → logprob: -14.178784370422363
    10. ' -' → logprob: -14.303784370422363

Token 53: ']))' (ID: 20259)
  Prédit: ','
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ',' → logprob: -0.22679533064365387
    2. '])))' → logprob: -1.8517953157424927
    3. ']))' → logprob: -3.2267954349517822
    4. ' ,' → logprob: -5.851795196533203
    5. ' ]' → logprob: -6.726795196533203
    6. ']' → logprob: -6.851795196533203
    7. '])))
' → logprob: -8.351795196533203
    8. '3' → logprob: -8.351795196533203
    9. '   ' → logprob: -8.726795196533203
    10. '])),' → logprob: -8.726795196533203

Token 54: ')

' (ID: 1029)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ')' → logprob: -0.0013325021136552095
    2. '))' → logprob: -6.6263322830200195
    3. ')))' → logprob: -12.25133228302002
    4. ' )' → logprob: -14.12633228302002
    5. '`)' → logprob: -14.50133228302002
    6. ')
' → logprob: -15.50133228302002
    7. '   ' → logprob: -15.75133228302002
    8. ')`' → logprob: -16.251333236694336
    9. ')])' → logprob: -17.251333236694336
    10. '),' → logprob: -17.376333236694336

Token 55: 'if' (ID: 366)
  Prédit: ''
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False

Token 56: ' __' (ID: 2516)
  Prédit: ' __'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' __' → logprob: -0.0013335748808458447
    2. '__' → logprob: -6.626333713531494
    3. ' ' → logprob: -12.001333236694336
    4. ' _' → logprob: -14.376333236694336
    5. ' ' → logprob: -14.626333236694336
    6. '_' → logprob: -14.626333236694336
    7. '_name' → logprob: -17.376333236694336
    8. ' ___' → logprob: -17.376333236694336
    9. ' main' → logprob: -17.876333236694336
    10. ' name' → logprob: -18.501333236694336

Token 57: 'name' (ID: 897)
  Prédit: '__'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '__' → logprob: -0.001222370658069849
    2. '__.__' → logprob: -7.251222133636475
    3. '__.' → logprob: -8.626222610473633
    4. '_' → logprob: -8.876222610473633
    5. '.' → logprob: -9.626222610473633
    6. '==' → logprob: -9.876222610473633
    7. '.__' → logprob: -10.251222610473633
    8. ' ==' → logprob: -11.001222610473633
    9. ' __' → logprob: -11.251222610473633
    10. '___' → logprob: -12.626222610473633

Token 58: '__' (ID: 771)
  Prédit: '__'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '__' → logprob: -2.339278580620885e-06
    2. '__.__' → logprob: -13.250001907348633
    3. '_' → logprob: -15.750001907348633
    4. '___' → logprob: -16.125001907348633
    5. '__.' → logprob: -16.125001907348633
    6. '____' → logprob: -16.250001907348633
    7. '__
' → logprob: -16.875001907348633
    8. '__

' → logprob: -17.750001907348633
    9. '==' → logprob: -18.000001907348633
    10. ' __' → logprob: -18.375001907348633

Token 59: ' ==' (ID: 951)
  Prédit: '__'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '__' → logprob: -0.0011266445508226752
    2. '==' → logprob: -7.501126766204834
    3. ' ==' → logprob: -7.751126766204834
    4. '__.__' → logprob: -9.126126289367676
    5. '_' → logprob: -11.126126289367676
    6. '.__' → logprob: -11.751126289367676
    7. '.' → logprob: -12.751126289367676
    8. '___' → logprob: -12.876126289367676
    9. '=="' → logprob: -13.126126289367676
    10. '__.' → logprob: -13.376126289367676

Token 60: ' '__' (ID: 28278)
  Prédit: '"'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '"' → logprob: -0.25199633836746216
    2. ''' → logprob: -1.5019962787628174
    3. ' "__' → logprob: -10.001996040344238
    4. '__' → logprob: -11.251996040344238
    5. ' "' → logprob: -12.251996040344238
    6. ' '__' → logprob: -12.876996040344238
    7. '"user' → logprob: -14.501996040344238
    8. ' '' → logprob: -15.376996040344238
    9. '"name' → logprob: -15.501996040344238
    10. '`' → logprob: -15.876996040344238

Token 61: 'main' (ID: 7731)
  Prédit: 'main'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'main' → logprob: -0.0009124171338044107
    2. 'name' → logprob: -7.000912189483643
    3. 'built' → logprob: -14.7509126663208
    4. 'm' → logprob: -15.1259126663208
    5. 'ma' → logprob: -15.5009126663208
    6. '_main' → logprob: -17.125911712646484
    7. 'code' → logprob: -18.125911712646484
    8. ' main' → logprob: -18.625911712646484
    9. 'maine' → logprob: -19.125911712646484
    10. 'file' → logprob: -19.250911712646484

Token 62: '__' (ID: 771)
  Prédit: '__'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '__' → logprob: -0.004777922760695219
    2. '__':
' → logprob: -5.504777908325195
    3. '_' → logprob: -7.379777908325195
    4. '__:' → logprob: -9.629777908325195
    5. '__.' → logprob: -12.504777908325195
    6. '()' → logprob: -12.754777908325195
    7. '__('' → logprob: -13.629777908325195
    8. '___' → logprob: -14.754777908325195
    9. '__":
' → logprob: -15.004777908325195
    10. '():' → logprob: -15.004777908325195

Token 63: '':' (ID: 2337)
  Prédit: ':'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ':' → logprob: -0.012931842356920242
    2. '():' → logprob: -4.387931823730469
    3. '':' → logprob: -8.762931823730469
    4. '__:' → logprob: -9.387931823730469
    5. '):' → logprob: -9.637931823730469
    6. ':
' → logprob: -10.387931823730469
    7. ':**' → logprob: -10.512931823730469
    8. '():
' → logprob: -11.012931823730469
    9. ' :' → logprob: -11.637931823730469
    10. '>:' → logprob: -11.887931823730469

Token 64: ' main' (ID: 2758)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.7609553337097168
    2. ' main' → logprob: -0.7609553337097168
    3. '	main' → logprob: -3.385955333709717
    4. '    
' → logprob: -4.260955333709717
    5. '
' → logprob: -4.635955333709717
    6. 'main' → logprob: -5.885955333709717
    7. ' 
' → logprob: -6.260955333709717
    8. '<|end|>' → logprob: -6.260955333709717
    9. '  
' → logprob: -7.760955333709717
    10. '```' → logprob: -8.635955810546875

Token 65: '()' (ID: 416)
  Prédit: '()'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '()' → logprob: -2.7252845029579476e-05
    2. '(' → logprob: -11.000027656555176
    3. '()
' → logprob: -12.000027656555176
    4. '()`' → logprob: -13.125027656555176
    5. '`()' → logprob: -14.375027656555176
    6. '()

' → logprob: -14.875027656555176
    7. ' ()' → logprob: -15.250027656555176
    8. '()]' → logprob: -15.250027656555176
    9. '()\' → logprob: -15.250027656555176
    10. '```' → logprob: -16.12502670288086


RÉSUMÉ:
--------------------------------------------------------------------------------
Total des tokens analysés: 63
Tokens correctement prédits (1ère position, stricte): 24
Tokens correctement prédits (1ère position, avec adaptation): 24
Tokens correctement prédits (top 10): 43
Précision stricte (1ère position): 38.10%
Précision adaptée (1ère position): 38.10%
Précision (top 10): 68.25%
================================================================================
