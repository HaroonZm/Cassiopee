================================================================================
ANALYSE DE PRÉDICTION TOKEN PAR TOKEN (BATCH API)
Date: 2025-06-04 19:58:38
Modèle de tokenisation: gpt-4o-mini
================================================================================

SCRIPT ANALYSÉ:
--------------------------------------------------------------------------------
# J'espère que ça marche
def main():
    s = input() # demande à l'utilisateur une chaîne, je suppose ?
    # on regarde combien y a de x... bon je fais comme ça
    nb_x = s.count("x") 
    # si le nombre d'x est p'tit
    if nb_x < 8:
        print("YES")
    else:  # sinon eh ben non quoi
        print("NO")

# Le classique
if __name__ == "__main__":
    main()
--------------------------------------------------------------------------------

RÉSULTATS D'ANALYSE TOKEN PAR TOKEN:
--------------------------------------------------------------------------------
Token 0: '#' (ID: 2)
  → Token d'amorce (pas de prédiction)

Token 1: ' J' (ID: 643)
  → Token d'amorce (pas de prédiction)

Token 2: ''espère' (ID: 116557)
  → Token d'amorce (pas de prédiction)

Token 3: ' que' (ID: 661)
  Prédit: ' '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' ' → logprob: -0.5097541809082031
    2. ',' → logprob: -1.3847541809082031
    3. '!' → logprob: -3.009754180908203
    4. '_' → logprob: -3.634754180908203
    5. '```' → logprob: -3.634754180908203
    6. ' que' → logprob: -4.509754180908203
    7. ''' → logprob: -4.759754180908203
    8. '#' → logprob: -4.884754180908203
    9. '.' → logprob: -5.259754180908203
    10. 'que' → logprob: -5.634754180908203

Token 4: ' ça' (ID: 13590)
  Prédit: ' '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' ' → logprob: -1.2065668106079102
    2. '_' → logprob: -1.3315668106079102
    3. ' que' → logprob: -1.4565668106079102
    4. ' tu' → logprob: -2.20656681060791
    5. ' vous' → logprob: -3.58156681060791
    6. 'vous' → logprob: -4.08156681060791
    7. ' ce' → logprob: -4.70656681060791
    8. '```' → logprob: -4.83156681060791
    9. ' ceci' → logprob: -4.95656681060791
    10. 'que' → logprob: -5.70656681060791

Token 5: ' marche' (ID: 58191)
  Prédit: ' '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' ' → logprob: -0.09953264147043228
    2. ' va' → logprob: -2.5995326042175293
    3. ' ira' → logprob: -5.724532604217529
    4. '  
' → logprob: -5.849532604217529
    5. '  ' → logprob: -5.974532604217529
    6. '   ' → logprob: -6.224532604217529
    7. ' a' → logprob: -6.599532604217529
    8. ' ' → logprob: -6.724532604217529
    9. ' fonctionne' → logprob: -6.849532604217529
    10. 'a' → logprob: -7.224532604217529

Token 6: '
' (ID: 198)
  Prédit: '!'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '!' → logprob: -0.13267409801483154
    2. '#' → logprob: -2.257674217224121
    3. '\n' → logprob: -4.507674217224121
    4. '.' → logprob: -6.632674217224121
    5. '
' → logprob: -6.757674217224121
    6. '\' → logprob: -6.757674217224121
    7. '```' → logprob: -6.757674217224121
    8. ' 
' → logprob: -7.257674217224121
    9. ',' → logprob: -7.382674217224121
    10. ' !' → logprob: -7.632674217224121

Token 7: 'def' (ID: 1314)
  Prédit: '\n'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '\n' → logprob: -0.6803638935089111
    2. '#' → logprob: -1.0553638935089111
    3. '\' → logprob: -3.180363893508911
    4. ' ' → logprob: -3.430363893508911
    5. '!' → logprob: -3.805363893508911
    6. '
' → logprob: -4.305363655090332
    7. ' 
' → logprob: -4.680363655090332
    8. '```' → logprob: -4.805363655090332
    9. '  
' → logprob: -4.930363655090332
    10. '<|end|>' → logprob: -5.055363655090332

Token 8: ' main' (ID: 2758)
  Prédit: ' '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' ' → logprob: -0.27939674258232117
    2. ' _' → logprob: -2.1543967723846436
    3. ' ma' → logprob: -3.5293967723846436
    4. '_' → logprob: -3.5293967723846436
    5. ' test' → logprob: -4.5293965339660645
    6. ' my' → logprob: -4.6543965339660645
    7. ' foo' → logprob: -4.6543965339660645
    8. ' mon' → logprob: -5.0293965339660645
    9. ' ' → logprob: -5.0293965339660645
    10. ' bon' → logprob: -5.2793965339660645

Token 9: '():
' (ID: 8595)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '(' → logprob: -0.13007372617721558
    2. '():' → logprob: -2.2550737857818604
    3. '(:' → logprob: -4.255073547363281
    4. ':' → logprob: -6.255073547363281
    5. '(
' → logprob: -8.380073547363281
    6. '(":' → logprob: -8.505073547363281
    7. '_' → logprob: -9.255073547363281
    8. '()' → logprob: -9.505073547363281
    9. ' ():' → logprob: -9.630073547363281
    10. ' (' → logprob: -9.755073547363281

Token 10: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.04370930790901184
    2. '\' → logprob: -3.9187092781066895
    3. '\n' → logprob: -5.0437092781066895
    4. '    
' → logprob: -5.1687092781066895
    5. '    ' → logprob: -5.2937092781066895
    6. ' ' → logprob: -6.0437092781066895
    7. ' pass' → logprob: -6.7937092781066895
    8. '(' → logprob: -7.4187092781066895
    9. ' 
' → logprob: -7.9187092781066895
    10. 'print' → logprob: -8.793709754943848

Token 11: ' s' (ID: 265)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '   ' → logprob: -1.1476213932037354
    2. '    ' → logprob: -1.2726213932037354
    3. 'print' → logprob: -1.7726213932037354
    4. ' ' → logprob: -2.5226213932037354
    5. 'pass' → logprob: -2.6476213932037354
    6. ' pass' → logprob: -3.1476213932037354
    7. '#' → logprob: -3.7726213932037354
    8. 'p' → logprob: -4.897621154785156
    9. ' print' → logprob: -5.772621154785156
    10. '  ' → logprob: -6.897621154785156

Token 12: ' =' (ID: 314)
  Prédit: ' ='
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' =' → logprob: -0.6740391254425049
    2. 't' → logprob: -1.6740391254425049
    3. 'tr' → logprob: -2.299039125442505
    4. '=' → logprob: -2.549039125442505
    5. ' ' → logprob: -3.424039125442505
    6. '.' → logprob: -3.799039125442505
    7. '   ' → logprob: -3.924039125442505
    8. 'a' → logprob: -4.674038887023926
    9. ':' → logprob: -4.674038887023926
    10. 'u' → logprob: -4.924038887023926

Token 13: ' input' (ID: 3422)
  Prédit: ' "'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' "' → logprob: -0.6434131264686584
    2. '"' → logprob: -1.0184130668640137
    3. ' input' → logprob: -2.7684130668640137
    4. 'input' → logprob: -3.2684130668640137
    5. ''' → logprob: -5.268413066864014
    6. ' '' → logprob: -5.643413066864014
    7. ' ' → logprob: -5.893413066864014
    8. '""' → logprob: -8.268413543701172
    9. ' ""' → logprob: -8.518413543701172
    10. ''s' → logprob: -9.643413543701172

Token 14: '()' (ID: 416)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(' → logprob: -0.0011639113072305918
    2. '('' → logprob: -7.251163959503174
    3. '()' → logprob: -8.376163482666016
    4. '("("' → logprob: -8.626163482666016
    5. '("")' → logprob: -10.626163482666016
    6. '("' → logprob: -12.376163482666016
    7. ')' → logprob: -12.501163482666016
    8. ' ' → logprob: -13.251163482666016
    9. '```' → logprob: -13.251163482666016
    10. '("""' → logprob: -13.626163482666016

Token 15: ' #' (ID: 1069)
  Prédit: '.'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '.' → logprob: -0.1038198247551918
    2. '.strip' → logprob: -3.4788198471069336
    3. '   ' → logprob: -3.4788198471069336
    4. ' ' → logprob: -4.228819847106934
    5. '\' → logprob: -5.103819847106934
    6. ')' → logprob: -5.353819847106934
    7. '```' → logprob: -6.353819847106934
    8. '\n' → logprob: -6.728819847106934
    9. '()' → logprob: -7.103819847106934
    10. '  
' → logprob: -7.478819847106934

Token 16: ' demande' (ID: 26737)
  Prédit: ' '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' ' → logprob: -0.08088808506727219
    2. '  ' → logprob: -4.205888271331787
    3. '<|end|>' → logprob: -4.205888271331787
    4. ' )' → logprob: -4.705888271331787
    5. ')' → logprob: -4.955888271331787
    6. ' s' → logprob: -4.955888271331787
    7. '<|end|>' → logprob: -5.080888271331787
    8. ' .' → logprob: -5.830888271331787
    9. '.' → logprob: -6.330888271331787
    10. ' "' → logprob: -6.893388271331787

Token 17: ' à' (ID: 1221)
  Prédit: ' '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' ' → logprob: -0.5193070769309998
    2. '_' → logprob: -2.1443071365356445
    3. 's' → logprob: -2.2693071365356445
    4. ')' → logprob: -3.2693071365356445
    5. ' un' → logprob: -3.5193071365356445
    6. ' de' → logprob: -3.7693071365356445
    7. '  ' → logprob: -3.8943071365356445
    8. 'r' → logprob: -4.5193071365356445
    9. '<|end|>' → logprob: -4.7693071365356445
    10. ' d' → logprob: -4.8943071365356445

Token 18: ' l' (ID: 305)
  Prédit: 'l'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'l' → logprob: -0.3924732804298401
    2. ' l' → logprob: -1.1424732208251953
    3. '	l' → logprob: -5.892473220825195
    4. ' ' → logprob: -6.392473220825195
    5. ' user' → logprob: -8.392473220825195
    6. 'user' → logprob: -8.767473220825195
    7. '  ' → logprob: -8.892473220825195
    8. '   ' → logprob: -9.267473220825195
    9. 'util' → logprob: -9.517473220825195
    10. ''utilisateur' → logprob: -9.517473220825195

Token 19: ''utilisateur' (ID: 140803)
  Prédit: ''utilisateur'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ''utilisateur' → logprob: -0.18318811058998108
    2. 'u' → logprob: -1.9331880807876587
    3. 'a' → logprob: -4.433187961578369
    4. ''' → logprob: -5.183187961578369
    5. ''us' → logprob: -6.308187961578369
    6. ''util' → logprob: -6.933187961578369
    7. '’utilisateur' → logprob: -7.308187961578369
    8. ''user' → logprob: -7.433187961578369
    9. '')' → logprob: -8.433188438415527
    10. ''u' → logprob: -8.558188438415527

Token 20: ' une' (ID: 2463)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.4572521448135376
    2. ' ' → logprob: -2.082252025604248
    3. '\n' → logprob: -2.707252025604248
    4. '\' → logprob: -3.082252025604248
    5. '    
' → logprob: -3.957252025604248
    6. '
' → logprob: -3.957252025604248
    7. '.' → logprob: -4.332252025604248
    8. ')' → logprob: -4.457252025604248
    9. 's' → logprob: -4.832252025604248
    10. ''' → logprob: -4.832252025604248

Token 21: ' chaîne' (ID: 89288)
  Prédit: ' chaîne'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' chaîne' → logprob: -0.10068310052156448
    2. ' ' → logprob: -2.6006832122802734
    3. ' chaine' → logprob: -4.600683212280273
    4. ' phrase' → logprob: -5.100683212280273
    5. ' string' → logprob: -6.225683212280273
    6. ' ligne' → logprob: -6.725683212280273
    7. 'chaine' → logprob: -7.350683212280273
    8. '   ' → logprob: -7.975683212280273
    9. ' valeur' → logprob: -8.475683212280273
    10. 'cha' → logprob: -8.725683212280273

Token 22: ',' (ID: 11)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.15116840600967407
    2. ')' → logprob: -3.6511683464050293
    3. '  ' → logprob: -4.026168346405029
    4. '\' → logprob: -4.151168346405029
    5. ' ' → logprob: -4.526168346405029
    6. '    
' → logprob: -4.526168346405029
    7. '
' → logprob: -4.776168346405029
    8. '.' → logprob: -4.776168346405029
    9. '\n' → logprob: -5.276168346405029
    10. 's' → logprob: -5.276168346405029

Token 23: ' je' (ID: 1264)
  Prédit: ' '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' ' → logprob: -0.2641485929489136
    2. ')' → logprob: -2.514148712158203
    3. ' )' → logprob: -2.889148712158203
    4. '   ' → logprob: -3.014148712158203
    5. '    ' → logprob: -4.514148712158203
    6. ' puis' → logprob: -5.139148712158203
    7. '  ' → logprob: -5.764148712158203
    8. '    
' → logprob: -5.889148712158203
    9. ' 
' → logprob: -6.014148712158203
    10. ' a' → logprob: -6.139148712158203

Token 24: ' suppose' (ID: 35968)
  Prédit: 't'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 't' → logprob: -1.0563920736312866
    2. 's' → logprob: -1.9313920736312866
    3. ' veux' → logprob: -2.056392192840576
    4. 'n' → logprob: -2.181392192840576
    5. ' souhaite' → logprob: -3.181392192840576
    6. ' ' → logprob: -3.556392192840576
    7. 'ss' → logprob: -3.931392192840576
    8. 'veux' → logprob: -4.181392192840576
    9. 'm' → logprob: -4.556392192840576
    10. ' pense' → logprob: -4.681392192840576

Token 25: ' ?
' (ID: 19740)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.2857561409473419
    2. ' ' → logprob: -2.2857561111450195
    3. '
' → logprob: -3.5357561111450195
    4. ')' → logprob: -3.7857561111450195
    5. '\n' → logprob: -3.7857561111450195
    6. '\' → logprob: -3.9107561111450195
    7. '    
' → logprob: -4.1607561111450195
    8. '  ' → logprob: -4.7857561111450195
    9. '.' → logprob: -5.4107561111450195
    10. '```' → logprob: -5.5357561111450195

Token 26: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.27848610281944275
    2. ')' → logprob: -2.2784860134124756
    3. ' ' → logprob: -2.6534860134124756
    4. '
' → logprob: -3.2784860134124756
    5. '\n' → logprob: -4.903486251831055
    6. '    
' → logprob: -5.153486251831055
    7. '  
' → logprob: -5.778486251831055
    8. ':' → logprob: -6.153486251831055
    9. '  ' → logprob: -6.153486251831055
    10. '#' → logprob: -6.528486251831055

Token 27: ' #' (ID: 1069)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.5209832191467285
    2. ' ' → logprob: -1.6459832191467285
    3. 'return' → logprob: -2.6459832191467285
    4. ')' → logprob: -3.1459832191467285
    5. 'print' → logprob: -3.8959832191467285
    6. 'if' → logprob: -4.0209832191467285
    7. 'r' → logprob: -4.2709832191467285
    8. 'n' → logprob: -4.8959832191467285
    9. ' return' → logprob: -5.0209832191467285
    10. ' if' → logprob: -5.2709832191467285

Token 28: ' on' (ID: 402)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '   ' → logprob: -1.0229277610778809
    2. ' if' → logprob: -1.0229277610778809
    3. 'if' → logprob: -2.272927761077881
    4. 'print' → logprob: -2.772927761077881
    5. ' return' → logprob: -3.522927761077881
    6. 'return' → logprob: -3.772927761077881
    7. 's' → logprob: -4.147927761077881
    8. 'r' → logprob: -4.397927761077881
    9. ' print' → logprob: -4.522927761077881
    10. ' ' → logprob: -5.272927761077881

Token 29: ' regarde' (ID: 115760)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '   ' → logprob: -2.26942777633667
    2. '.' → logprob: -2.39442777633667
    3. ' s' → logprob: -2.39442777633667
    4. 's' → logprob: -2.64442777633667
    5. ' souhaite' → logprob: -2.64442777633667
    6. ' pense' → logprob: -3.01942777633667
    7. ' n' → logprob: -3.14442777633667
    8. ' .' → logprob: -3.14442777633667
    9. '_' → logprob: -3.51942777633667
    10. ' =' → logprob: -3.51942777633667

Token 30: ' combien' (ID: 106648)
  Prédit: ' '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' ' → logprob: -0.031203290447592735
    2. '   ' → logprob: -4.656203269958496
    3. 's' → logprob: -4.906203269958496
    4. ' s' → logprob: -5.156203269958496
    5. '  ' → logprob: -5.281203269958496
    6. '_' → logprob: -7.281203269958496
    7. ' si' → logprob: -7.406203269958496
    8. ' la' → logprob: -7.906203269958496
    9. ' if' → logprob: -8.031203269958496
    10. ' ' → logprob: -9.156203269958496

Token 31: ' y' (ID: 342)
  Prédit: 's'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 's' → logprob: -1.1057707071304321
    2. '_' → logprob: -1.2307707071304321
    3. ' ' → logprob: -1.7307707071304321
    4. ' de' → logprob: -2.3557705879211426
    5. 'len' → logprob: -2.8557705879211426
    6. '(s' → logprob: -4.230770587921143
    7. ' len' → logprob: -5.730770587921143
    8. ' s' → logprob: -5.855770587921143
    9. ' d' → logprob: -5.855770587921143
    10. '_len' → logprob: -5.855770587921143

Token 32: ' a' (ID: 261)
  Prédit: 'a'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'a' → logprob: -0.06265753507614136
    2. ' a' → logprob: -3.187657594680786
    3. ''a' → logprob: -4.187657356262207
    4. '_a' → logprob: -6.187657356262207
    5. '   ' → logprob: -6.562657356262207
    6. '-a' → logprob: -8.437657356262207
    7. '	a' → logprob: -8.812657356262207
    8. '_' → logprob: -9.062657356262207
    9. '  ' → logprob: -9.187657356262207
    10. ' ' → logprob: -9.437657356262207

Token 33: ' de' (ID: 334)
  Prédit: ' de'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' de' → logprob: -0.2402893751859665
    2. ' ' → logprob: -2.1152894496917725
    3. ' d' → logprob: -3.7402894496917725
    4. ' t' → logprob: -3.7402894496917725
    5. 't' → logprob: -3.8652894496917725
    6. '-t' → logprob: -4.740289211273193
    7. 'de' → logprob: -5.365289211273193
    8. '  ' → logprob: -5.865289211273193
    9. '   ' → logprob: -6.115289211273193
    10. 'd' → logprob: -7.365289211273193

Token 34: ' x' (ID: 1215)
  Prédit: ' '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' ' → logprob: -0.20320242643356323
    2. ' espaces' → logprob: -2.578202486038208
    3. 's' → logprob: -3.578202486038208
    4. ' caractères' → logprob: -4.078202247619629
    5. ' mots' → logprob: -4.328202247619629
    6. '_' → logprob: -4.953202247619629
    7. 'm' → logprob: -4.953202247619629
    8. 'r' → logprob: -5.203202247619629
    9. ''' → logprob: -5.578202247619629
    10. 'spaces' → logprob: -5.703202247619629

Token 35: '...' (ID: 1008)
  Prédit: ' ='
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' =' → logprob: -1.1108818054199219
    2. '_' → logprob: -1.6108818054199219
    3. ' ' → logprob: -1.6108818054199219
    4. 's' → logprob: -1.6108818054199219
    5. '   ' → logprob: -4.110881805419922
    6. ''s' → logprob: -4.360881805419922
    7. '=' → logprob: -4.610881805419922
    8. ' s' → logprob: -4.860881805419922
    9. '_s' → logprob: -4.860881805419922
    10. '(s' → logprob: -5.360881805419922

Token 36: ' bon' (ID: 4846)
  Prédit: 's'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 's' → logprob: -0.8344114422798157
    2. ' ' → logprob: -1.709411382675171
    3. '_' → logprob: -1.834411382675171
    4. ' =' → logprob: -2.584411382675171
    5. 'x' → logprob: -2.959411382675171
    6. '   ' → logprob: -3.084411382675171
    7. '=' → logprob: -3.709411382675171
    8. '  ' → logprob: -5.70941162109375
    9. '.' → logprob: -5.95941162109375
    10. ''' → logprob: -5.95941162109375

Token 37: ' je' (ID: 1264)
  Prédit: 's'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 's' → logprob: -0.7684862613677979
    2. '_' → logprob: -2.018486261367798
    3. ' ' → logprob: -2.143486261367798
    4. 'es' → logprob: -2.643486261367798
    5. 'e' → logprob: -2.768486261367798
    6. ' =' → logprob: -3.643486261367798
    7. '   ' → logprob: -3.893486261367798
    8. ''s' → logprob: -3.893486261367798
    9. '=' → logprob: -4.018486022949219
    10. ''' → logprob: -4.018486022949219

Token 38: ' fais' (ID: 24376)
  Prédit: 's'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 's' → logprob: -0.7411800026893616
    2. 'u' → logprob: -1.7411799430847168
    3. '_' → logprob: -2.616179943084717
    4. ' ' → logprob: -2.866179943084717
    5. 'n' → logprob: -3.491179943084717
    6. 'r' → logprob: -3.866179943084717
    7. ''' → logprob: -3.866179943084717
    8. '   ' → logprob: -4.116179943084717
    9. '.' → logprob: -4.491179943084717
    10. ' '' → logprob: -4.491179943084717

Token 39: ' comme' (ID: 7971)
  Prédit: ' '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' ' → logprob: -0.2606448829174042
    2. '_' → logprob: -1.6356449127197266
    3. 's' → logprob: -3.6356449127197266
    4. 'x' → logprob: -6.510644912719727
    5. '  ' → logprob: -7.010644912719727
    6. ' =' → logprob: -7.510644912719727
    7. '.' → logprob: -7.635644912719727
    8. ')' → logprob: -7.635644912719727
    9. 'e' → logprob: -7.760644912719727
    10. 'n' → logprob: -7.760644912719727

Token 40: ' ça' (ID: 13590)
  Prédit: ' ça'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' ça' → logprob: -0.05756817385554314
    2. ' s' → logprob: -4.307568073272705
    3. 's' → logprob: -5.182568073272705
    4. ' ' → logprob: -5.557568073272705
    5. ' ceci' → logprob: -5.557568073272705
    6. ' une' → logprob: -5.682568073272705
    7. 'ça' → logprob: -5.807568073272705
    8. '   ' → logprob: -5.807568073272705
    9. ' cela' → logprob: -6.057568073272705
    10. ':' → logprob: -6.307568073272705

Token 41: '
' (ID: 198)
  Prédit: '_'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '_' → logprob: -1.0507209300994873
    2. '   ' → logprob: -1.6757209300994873
    3. 's' → logprob: -1.9257209300994873
    4. ':' → logprob: -2.3007209300994873
    5. 'x' → logprob: -2.9257209300994873
    6. ' :' → logprob: -3.5507209300994873
    7. ',' → logprob: -3.6757209300994873
    8. ' ' → logprob: -3.6757209300994873
    9. 'n' → logprob: -4.800721168518066
    10. ' s' → logprob: -4.925721168518066

Token 42: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.18647761642932892
    2. 'n' → logprob: -2.5614776611328125
    3. 'x' → logprob: -3.0614776611328125
    4. 'count' → logprob: -3.8114776611328125
    5. '
' → logprob: -4.5614776611328125
    6. ' x' → logprob: -6.1864776611328125
    7. '```' → logprob: -6.3114776611328125
    8. 'c' → logprob: -6.6864776611328125
    9. 's' → logprob: -7.0614776611328125
    10. ' count' → logprob: -7.1864776611328125

Token 43: ' nb' (ID: 28791)
  Prédit: 'x'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'x' → logprob: -0.16712640225887299
    2. 'count' → logprob: -2.542126417160034
    3. '   ' → logprob: -3.917126417160034
    4. 'c' → logprob: -3.917126417160034
    5. ' count' → logprob: -4.167126178741455
    6. 'n' → logprob: -4.667126178741455
    7. ' x' → logprob: -4.792126178741455
    8. ' compteur' → logprob: -7.917126178741455
    9. ' c' → logprob: -8.167126655578613
    10. 'cnt' → logprob: -8.292126655578613

Token 44: '_x' (ID: 7054)
  Prédit: '_'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_' → logprob: -0.35027435421943665
    2. '_x' → logprob: -1.2252743244171143
    3. 'x' → logprob: -6.350274562835693
    4. ' _' → logprob: -10.725274085998535
    5. 's' → logprob: -11.600274085998535
    6. '_s' → logprob: -11.850274085998535
    7. '_=' → logprob: -11.850274085998535
    8. ' =' → logprob: -11.975274085998535
    9. ' ' → logprob: -12.475274085998535
    10. '   ' → logprob: -12.600274085998535

Token 45: ' =' (ID: 314)
  Prédit: ' ='
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' =' → logprob: -0.04948485270142555
    2. '=' → logprob: -3.049484968185425
    3. '_' → logprob: -7.299484729766846
    4. ' ' → logprob: -8.549485206604004
    5. 's' → logprob: -10.924485206604004
    6. '  ' → logprob: -12.924485206604004
    7. ' +=' → logprob: -13.549485206604004
    8. '   ' → logprob: -13.674485206604004
    9. '_=' → logprob: -13.674485206604004
    10. ' ' → logprob: -14.424485206604004

Token 46: ' s' (ID: 265)
  Prédit: ' s'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' s' → logprob: -0.002217584289610386
    2. 's' → logprob: -6.127217769622803
    3. ' ' → logprob: -10.502217292785645
    4. '0' → logprob: -12.377217292785645
    5. ' ' → logprob: -15.127217292785645
    6. '(s' → logprob: -16.12721824645996
    7. '  ' → logprob: -16.62721824645996
    8. '`s' → logprob: -16.75221824645996
    9. '	s' → logprob: -16.87721824645996
    10. '```' → logprob: -17.18971824645996

Token 47: '.count' (ID: 14019)
  Prédit: '.count'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '.count' → logprob: -0.5759904384613037
    2. '.' → logprob: -0.8259904384613037
    3. ' .' → logprob: -10.700990676879883
    4. '.c' → logprob: -11.575990676879883
    5. 'count' → logprob: -11.950990676879883
    6. '.lower' → logprob: -12.450990676879883
    7. '.Count' → logprob: -12.950990676879883
    8. '.

' → logprob: -13.200990676879883
    9. '.
' → logprob: -14.075990676879883
    10. '.split' → logprob: -14.700990676879883

Token 48: '("' (ID: 568)
  Prédit: '(''
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '('' → logprob: -0.09035602957010269
    2. '(' → logprob: -2.4653561115264893
    3. '("("' → logprob: -6.96535587310791
    4. '("' → logprob: -7.71535587310791
    5. '('(' → logprob: -11.71535587310791
    6. ''' → logprob: -12.21535587310791
    7. '(
' → logprob: -12.84035587310791
    8. '("""' → logprob: -13.46535587310791
    9. '(x' → logprob: -13.59035587310791
    10. ' (' → logprob: -14.09035587310791

Token 49: 'x' (ID: 87)
  Prédit: 'x'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'x' → logprob: -0.0002261854097014293
    2. ' x' → logprob: -8.625226020812988
    3. '"x' → logprob: -10.250226020812988
    4. ''x' → logprob: -12.375226020812988
    5. '"' → logprob: -12.750226020812988
    6. 'a' → logprob: -13.500226020812988
    7. ' "' → logprob: -14.125226020812988
    8. '")' → logprob: -14.875226020812988
    9. ' ")' → logprob: -14.875226020812988
    10. ' ' → logprob: -15.125226020812988

Token 50: '")' (ID: 1405)
  Prédit: '")'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '")' → logprob: -0.0002737330214586109
    2. ')' → logprob: -8.750273704528809
    3. '"' → logprob: -9.375273704528809
    4. ')")' → logprob: -10.875273704528809
    5. '")
' → logprob: -12.000273704528809
    6. ' ")' → logprob: -13.000273704528809
    7. '"))' → logprob: -13.750273704528809
    8. '")

' → logprob: -14.125273704528809
    9. '\")' → logprob: -15.750273704528809
    10. '')' → logprob: -15.750273704528809

Token 51: ' 
' (ID: 793)
  Prédit: '
'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '
' → logprob: -0.15250833332538605
    2. '<|end|>' → logprob: -2.52750825881958
    3. ')' → logprob: -3.90250825881958
    4. '   ' → logprob: -4.02750825881958
    5. '\n' → logprob: -5.15250825881958
    6. '  
' → logprob: -5.77750825881958
    7. '#' → logprob: -5.77750825881958
    8. '    
' → logprob: -5.77750825881958
    9. ' ' → logprob: -6.27750825881958
    10. ' 
' → logprob: -6.40250825881958

Token 52: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.7327342629432678
    2. '
' → logprob: -0.9827342629432678
    3. '<|end|>' → logprob: -2.357734203338623
    4. ')' → logprob: -3.607734203338623
    5. '    
' → logprob: -4.607734203338623
    6. '  
' → logprob: -5.482734203338623
    7. '<|end|>' → logprob: -6.357734203338623
    8. '\n' → logprob: -6.357734203338623
    9. '#' → logprob: -6.857734203338623
    10. '```' → logprob: -7.107734203338623

Token 53: ' #' (ID: 1069)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.2853131592273712
    2. '
' → logprob: -1.7853131294250488
    3. ')' → logprob: -3.035313129425049
    4. '    
' → logprob: -4.410313129425049
    5. '\n' → logprob: -5.410313129425049
    6. '<|end|>' → logprob: -5.410313129425049
    7. '  
' → logprob: -5.910313129425049
    8. '#' (adapté à ' #') → logprob: -6.285313129425049
    9. '  ' → logprob: -6.535313129425049
    10. ' ' → logprob: -6.785313129425049

Token 54: ' si' (ID: 1784)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.17064855992794037
    2. 'if' → logprob: -2.6706485748291016
    3. 'print' → logprob: -3.0456485748291016
    4. ' if' → logprob: -4.170648574829102
    5. ' ' → logprob: -4.795648574829102
    6. '    
' → logprob: -5.545648574829102
    7. '<|end|>' → logprob: -5.670648574829102
    8. '#' → logprob: -6.170648574829102
    9. 'return' → logprob: -6.545648574829102
    10. '  ' → logprob: -6.545648574829102

Token 55: ' le' (ID: 505)
  Prédit: ' nb'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' nb' → logprob: -0.0691385567188263
    2. ' ' → logprob: -2.819138526916504
    3. '  ' → logprob: -5.944138526916504
    4. '   ' → logprob: -6.444138526916504
    5. '(nb' → logprob: -7.444138526916504
    6. 'nb' → logprob: -7.569138526916504
    7. '    ' → logprob: -7.694138526916504
    8. '	nb' → logprob: -7.819138526916504
    9. ' ' → logprob: -7.944138526916504
    10. ' x' → logprob: -8.194138526916504

Token 56: ' nombre' (ID: 9733)
  Prédit: ' nb'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' nb' → logprob: -0.044381413608789444
    2. 'nb' → logprob: -3.1693813800811768
    3. ' ' → logprob: -7.419381618499756
    4. ' nombre' → logprob: -8.794381141662598
    5. 's' → logprob: -9.169381141662598
    6. '  ' → logprob: -9.294381141662598
    7. ' x' → logprob: -9.294381141662598
    8. 'nombre' → logprob: -9.544381141662598
    9. 'x' → logprob: -9.544381141662598
    10. '(nb' → logprob: -9.794381141662598

Token 57: ' d' (ID: 272)
  Prédit: ' de'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' de' → logprob: -0.3472197949886322
    2. '_' → logprob: -1.8472198247909546
    3. ' ' → logprob: -2.597219705581665
    4. 'de' → logprob: -3.972219705581665
    5. ' d' → logprob: -4.097219944000244
    6. '_de' → logprob: -4.722219944000244
    7. 'd' → logprob: -5.972219944000244
    8. '  ' → logprob: -5.972219944000244
    9. '_x' → logprob: -6.097219944000244
    10. ' >' → logprob: -6.347219944000244

Token 58: ''x' (ID: 168788)
  Prédit: '_'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '_' → logprob: -0.9028661847114563
    2. ' ' → logprob: -1.2778661251068115
    3. ' x' → logprob: -1.6528661251068115
    4. 'x' → logprob: -2.5278661251068115
    5. '_x' → logprob: -3.6528661251068115
    6. '   ' → logprob: -5.652866363525391
    7. ''' → logprob: -5.777866363525391
    8. ' _' → logprob: -5.902866363525391
    9. ' '' → logprob: -6.277866363525391
    10. '  ' → logprob: -6.402866363525391

Token 59: ' est' (ID: 893)
  Prédit: ' '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' ' → logprob: -0.4212738275527954
    2. ' >' → logprob: -1.1712738275527954
    3. ' est' → logprob: -3.796273708343506
    4. '>' → logprob: -5.296273708343506
    5. ' ==' → logprob: -5.921273708343506
    6. ' >=' → logprob: -7.171273708343506
    7. '  ' → logprob: -7.296273708343506
    8. '   ' → logprob: -7.796273708343506
    9. 's' → logprob: -8.046274185180664
    10. 'est' → logprob: -8.171274185180664

Token 60: ' p' (ID: 275)
  Prédit: ' supérieur'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' supérieur' → logprob: -0.16472670435905457
    2. ' >' → logprob: -2.914726734161377
    3. ' ' → logprob: -3.289726734161377
    4. '>' → logprob: -3.414726734161377
    5. ' plus' → logprob: -5.164726734161377
    6. ' égal' → logprob: -5.414726734161377
    7. 'sup' → logprob: -6.289726734161377
    8. ' pair' → logprob: -6.289726734161377
    9. '0' → logprob: -6.289726734161377
    10. ' super' → logprob: -6.539726734161377

Token 61: ''t' (ID: 1507)
  Prédit: 'lus'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'lus' → logprob: -0.23637545108795166
    2. 'air' → logprob: -2.236375331878662
    3. '>' → logprob: -2.736375331878662
    4. 'r' → logprob: -4.861375331878662
    5. 'a' → logprob: -4.986375331878662
    6. 'airs' → logprob: -5.111375331878662
    7. 'as' → logprob: -5.111375331878662
    8. 'l' → logprob: -5.986375331878662
    9. 'lu' → logprob: -6.486375331878662
    10. 'etit' → logprob: -6.736375331878662

Token 62: 'it' (ID: 278)
  Prédit: 'lus'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'lus' → logprob: -0.2903548777103424
    2. 'as' → logprob: -1.66535484790802
    3. 'l' → logprob: -3.7903549671173096
    4. 'air' → logprob: -4.7903547286987305
    5. 'a' → logprob: -5.0403547286987305
    6. '>' → logprob: -5.1653547286987305
    7. 'etit' → logprob: -5.1653547286987305
    8. 'e' → logprob: -6.0403547286987305
    9. 'lu' → logprob: -6.5403547286987305
    10. 'rem' → logprob: -6.5403547286987305

Token 63: '
' (ID: 198)
  Prédit: ' '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' ' → logprob: -0.5846578478813171
    2. ' <=' → logprob: -2.209657907485962
    3. ' <' → logprob: -2.459657907485962
    4. '  ' → logprob: -2.584657907485962
    5. ' >' → logprob: -3.084657907485962
    6. '   ' → logprob: -3.084657907485962
    7. ':' → logprob: -3.459657907485962
    8. '<' → logprob: -4.584657669067383
    9. '>' → logprob: -4.709657669067383
    10. '    ' → logprob: -4.959657669067383

Token 64: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.7452642321586609
    2. ':' → logprob: -2.2452642917633057
    3. ' ' → logprob: -2.2452642917633057
    4. ' >' → logprob: -2.2452642917633057
    5. '  ' → logprob: -2.7452642917633057
    6. ' <=' → logprob: -2.8702642917633057
    7. ' :' → logprob: -3.8702642917633057
    8. ' <' → logprob: -4.120264053344727
    9. '>' → logprob: -4.370264053344727
    10. '    ' → logprob: -4.620264053344727

Token 65: ' if' (ID: 538)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.06177147850394249
    2. ' if' → logprob: -4.061771392822266
    3. ' ' → logprob: -4.186771392822266
    4. '    ' → logprob: -4.561771392822266
    5. '  ' → logprob: -4.936771392822266
    6. ':' → logprob: -5.936771392822266
    7. 'if' (adapté à ' if') → logprob: -6.186771392822266
    8. ',' → logprob: -6.936771392822266
    9. '    
' → logprob: -7.311771392822266
    10. ' <' → logprob: -7.936771392822266

Token 66: ' nb' (ID: 28791)
  Prédit: ' nb'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' nb' → logprob: -0.02349749393761158
    2. ' ' → logprob: -3.7734975814819336
    3. ' ' → logprob: -8.523497581481934
    4. '  ' → logprob: -10.773497581481934
    5. '	nb' → logprob: -11.023497581481934
    6. 'nb' → logprob: -11.648497581481934
    7. '(nb' → logprob: -12.523497581481934
    8. '   ' → logprob: -13.648497581481934
    9. ' nbsp' → logprob: -14.148497581481934
    10. '  ' → logprob: -14.773497581481934

Token 67: '_x' (ID: 7054)
  Prédit: '_x'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_x' → logprob: -0.07045619189739227
    2. '_' → logprob: -2.6954562664031982
    3. ' _' → logprob: -7.945456027984619
    4. '_<' → logprob: -9.320456504821777
    5. '__' → logprob: -11.820456504821777
    6. '_s' → logprob: -11.820456504821777
    7. '```' → logprob: -11.945456504821777
    8. '   ' → logprob: -12.070456504821777
    9. '_

' → logprob: -12.445456504821777
    10. ' ' → logprob: -12.445456504821777

Token 68: ' <' (ID: 464)
  Prédit: ' <'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' <' → logprob: -0.08349812775850296
    2. ' <=' → logprob: -2.958498239517212
    3. ' ' → logprob: -3.833498239517212
    4. ' >' → logprob: -5.583498001098633
    5. '<' → logprob: -6.208498001098633
    6. ' >=' → logprob: -8.583498001098633
    7. ' ==' → logprob: -8.583498001098633
    8. '  ' → logprob: -9.083498001098633
    9. '<=' → logprob: -9.208498001098633
    10. '>' → logprob: -9.958498001098633

Token 69: ' ' (ID: 220)
  Prédit: ' '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' ' → logprob: -0.026161296293139458
    2. '3' → logprob: -4.026161193847656
    3. '5' → logprob: -5.401161193847656
    4. '2' → logprob: -6.276161193847656
    5. '10' → logprob: -7.401161193847656
    6. '1' → logprob: -7.901161193847656
    7. '=' → logprob: -8.276161193847656
    8. '4' → logprob: -8.651161193847656
    9. '6' → logprob: -10.026161193847656
    10. ' len' → logprob: -10.401161193847656

Token 70: '8' (ID: 23)
  Prédit: '5'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '5' → logprob: -0.718169629573822
    2. '3' → logprob: -1.0931696891784668
    3. ' ' → logprob: -2.218169689178467
    4. '10' → logprob: -3.343169689178467
    5. '2' → logprob: -3.718169689178467
    6. '1' → logprob: -5.468169689178467
    7. '4' → logprob: -5.593169689178467
    8. '6' → logprob: -8.218169212341309
    9. '=' → logprob: -8.468169212341309
    10. '20' → logprob: -9.593169212341309

Token 71: ':
' (ID: 734)
  Prédit: ':'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ':' → logprob: -0.00021021578868385404
    2. ' :' → logprob: -8.87520980834961
    3. ':
' → logprob: -9.62520980834961
    4. '):' → logprob: -13.12520980834961
    5. '   ' → logprob: -14.00020980834961
    6. ':**' → logprob: -15.25020980834961
    7. ':return' → logprob: -15.37520980834961
    8. ',' → logprob: -15.37520980834961
    9. ' :
' → logprob: -15.75020980834961
    10. '():' → logprob: -16.37520980834961

Token 72: '       ' (ID: 309)
  Prédit: '       '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '       ' → logprob: -0.4096495509147644
    2. ':' → logprob: -1.1596496105194092
    3. '   ' → logprob: -3.909649610519409
    4. ' :' → logprob: -7.28464937210083
    5. '    ' → logprob: -7.40964937210083
    6. '    
' → logprob: -8.284649848937988
    7. '        
' → logprob: -8.659649848937988
    8. ':
' → logprob: -9.159649848937988
    9. 'print' → logprob: -9.534649848937988
    10. '      ' → logprob: -9.784649848937988

Token 73: ' print' (ID: 2123)
  Prédit: '       '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '       ' → logprob: -0.14300739765167236
    2. 'print' (adapté à ' print') → logprob: -2.643007278442383
    3. ' print' → logprob: -3.143007278442383
    4. '    ' → logprob: -5.268007278442383
    5. '   ' → logprob: -5.393007278442383
    6. '        
' → logprob: -5.768007278442383
    7. '        ' → logprob: -5.893007278442383
    8. ' return' → logprob: -7.268007278442383
    9. ' ' → logprob: -7.643007278442383
    10. 'return' → logprob: -7.893007278442383

Token 74: '("' (ID: 568)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(' → logprob: -0.4756866991519928
    2. '("' → logprob: -0.9756866693496704
    3. '("("' → logprob: -7.225686550140381
    4. '('' → logprob: -8.100687026977539
    5. '()' → logprob: -8.100687026977539
    6. '("")' → logprob: -8.975687026977539
    7. '(s' → logprob: -9.600687026977539
    8. ' ("' → logprob: -11.600687026977539
    9. '(nb' → logprob: -11.725687026977539
    10. ' (' → logprob: -11.725687026977539

Token 75: 'YES' (ID: 31958)
  Prédit: 'C'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'C' → logprob: -0.6336371302604675
    2. 'c' → logprob: -2.6336371898651123
    3. 'T' → logprob: -2.8836371898651123
    4. 'Ça' → logprob: -3.1336371898651123
    5. 't' → logprob: -3.2586371898651123
    6. 'Pas' → logprob: -3.2586371898651123
    7. 'x' → logprob: -3.2586371898651123
    8. 'Pe' → logprob: -3.3836371898651123
    9. 'Too' → logprob: -3.8836371898651123
    10. 'Oui' → logprob: -4.883636951446533

Token 76: '")
' (ID: 1896)
  Prédit: '")'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '")' → logprob: -8.113290095934644e-05
    2. '!")' → logprob: -10.250081062316895
    3. '")
' → logprob: -11.000081062316895
    4. ')' → logprob: -11.500081062316895
    5. ')")' → logprob: -11.500081062316895
    6. '"' → logprob: -12.500081062316895
    7. '")
' → logprob: -12.750081062316895
    8. ' ")' → logprob: -14.000081062316895
    9. '\")' → logprob: -15.375081062316895
    10. '")

' → logprob: -15.625081062316895

Token 77: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.36973074078559875
    2. 'else' → logprob: -1.8697307109832764
    3. ' else' → logprob: -2.1197307109832764
    4. '<|end|>' → logprob: -3.8697307109832764
    5. '
' → logprob: -5.1197309494018555
    6. '	else' → logprob: -5.3697309494018555
    7. '<|end|>' → logprob: -6.4947309494018555
    8. '\n' → logprob: -8.119730949401855
    9. '    
' → logprob: -8.244730949401855
    10. ' ' → logprob: -8.369730949401855

Token 78: ' else' (ID: 1203)
  Prédit: 'else'
  Correct (stricte): False
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'else' (adapté à ' else') → logprob: -0.10120229423046112
    2. ' else' → logprob: -2.6012022495269775
    3. '   ' → logprob: -4.601202487945557
    4. '<|end|>' → logprob: -4.726202487945557
    5. '	else' → logprob: -6.601202487945557
    6. 'elif' → logprob: -7.101202487945557
    7. '<|end|>' → logprob: -8.601202011108398
    8. 's' → logprob: -9.226202011108398
    9. 'e' → logprob: -9.351202011108398
    10. ' ' → logprob: -9.476202011108398

Token 79: ':' (ID: 25)
  Prédit: ':'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ':' → logprob: -0.00047285633627325296
    2. ':
' → logprob: -7.7504730224609375
    3. ' :' → logprob: -10.125473022460938
    4. '   ' → logprob: -13.375473022460938
    5. ' :
' → logprob: -15.375473022460938
    6. '       ' → logprob: -15.625473022460938
    7. ':
' → logprob: -16.375473022460938
    8. '):' → logprob: -17.000473022460938
    9. ':

' → logprob: -17.500473022460938
    10. '    ' → logprob: -17.875473022460938

Token 80: ' ' (ID: 220)
  Prédit: '       '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '       ' → logprob: -0.0007063561934046447
    2. ' print' → logprob: -8.375706672668457
    3. '        ' → logprob: -8.750706672668457
    4. ' ' → logprob: -9.375706672668457
    5. ' ' → logprob: -10.000706672668457
    6. '   ' → logprob: -10.125706672668457
    7. 'print' → logprob: -10.375706672668457
    8. '        
' → logprob: -10.875706672668457
    9. ' 
' → logprob: -11.000706672668457
    10. '    ' → logprob: -11.125706672668457

Token 81: ' #' (ID: 1069)
  Prédit: 'print'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'print' → logprob: -1.0427331924438477
    2. '       ' → logprob: -1.4177331924438477
    3. ' print' → logprob: -1.5427331924438477
    4. '   ' → logprob: -1.6677331924438477
    5. '    ' → logprob: -6.917733192443848
    6. '"' → logprob: -7.542733192443848
    7. '(' → logprob: -8.167733192443848
    8. ' ' → logprob: -8.417733192443848
    9. ' 
' → logprob: -9.042733192443848
    10. '    
' → logprob: -9.042733192443848

Token 82: ' sinon' (ID: 52915)
  Prédit: '       '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '       ' → logprob: -0.15030315518379211
    2. '   ' → logprob: -2.4003031253814697
    3. ':' → logprob: -4.025303363800049
    4. ' print' → logprob: -4.025303363800049
    5. '    ' → logprob: -4.775303363800049
    6. 'print' → logprob: -5.775303363800049
    7. '      ' → logprob: -8.15030288696289
    8. '  ' → logprob: -8.40030288696289
    9. '     ' → logprob: -8.40030288696289
    10. '    
' → logprob: -8.65030288696289

Token 83: ' eh' (ID: 22446)
  Prédit: '       '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '       ' → logprob: -0.053668130189180374
    2. ':' → logprob: -3.0536680221557617
    3. ' print' → logprob: -6.803668022155762
    4. '   ' → logprob: -6.928668022155762
    5. ':
' → logprob: -7.428668022155762
    6. '        
' → logprob: -7.553668022155762
    7. 'print' → logprob: -8.178668022155762
    8. '    ' → logprob: -8.178668022155762
    9. '    
' → logprob: -8.428668022155762
    10. ' :' → logprob: -8.678668022155762

Token 84: ' ben' (ID: 2974)
  Prédit: ' bien'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' bien' → logprob: -0.04448619857430458
    2. 'bien' → logprob: -3.5444862842559814
    3. ' ' → logprob: -5.419486045837402
    4. 'print' → logprob: -5.919486045837402
    5. '  ' → logprob: -6.044486045837402
    6. '```' → logprob: -6.919486045837402
    7. '   ' → logprob: -7.169486045837402
    8. '    ' → logprob: -7.294486045837402
    9. ' oui' → logprob: -7.794486045837402
    10. '#' → logprob: -8.044486045837402

Token 85: ' non' (ID: 2893)
  Prédit: ' print'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' print' → logprob: -0.4517683684825897
    2. 'print' → logprob: -1.826768398284912
    3. '   ' → logprob: -2.201768398284912
    4. '    ' → logprob: -2.951768398284912
    5. '       ' → logprob: -3.576768398284912
    6. ' ' → logprob: -5.576768398284912
    7. '    
' → logprob: -5.951768398284912
    8. ' ' → logprob: -6.576768398284912
    9. '  ' → logprob: -6.951768398284912
    10. '     
' → logprob: -7.701768398284912

Token 86: ' quoi' (ID: 33399)
  Prédit: '       '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '       ' → logprob: -0.2717220187187195
    2. '   ' → logprob: -1.7717220783233643
    3. '
' → logprob: -3.2717220783233643
    4. ':' → logprob: -4.396721839904785
    5. '    ' → logprob: -5.646721839904785
    6. 'print' → logprob: -5.896721839904785
    7. ')' → logprob: -6.396721839904785
    8. '    
' → logprob: -6.521721839904785
    9. '\n' → logprob: -6.646721839904785
    10. '```' → logprob: -6.896721839904785

Token 87: '
' (ID: 198)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.26207634806632996
    2. '       ' → logprob: -1.8870763778686523
    3. '\n' → logprob: -3.5120763778686523
    4. '
' → logprob: -3.8870763778686523
    5. ':' → logprob: -5.012076377868652
    6. '```' → logprob: -5.137076377868652
    7. ')' → logprob: -5.512076377868652
    8. '    ' → logprob: -6.262076377868652
    9. 'print' → logprob: -6.387076377868652
    10. ':
' → logprob: -6.637076377868652

Token 88: '       ' (ID: 309)
  Prédit: '       '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '       ' → logprob: -0.008690441958606243
    2. '   ' → logprob: -4.883690357208252
    3. 'print' → logprob: -7.383690357208252
    4. ' print' → logprob: -8.25869083404541
    5. '    ' → logprob: -10.38369083404541
    6. '     ' → logprob: -10.63369083404541
    7. '        
' → logprob: -10.63369083404541
    8. ' 
' → logprob: -10.63369083404541
    9. ' ' → logprob: -11.13369083404541
    10. '    
' → logprob: -11.25869083404541

Token 89: ' print' (ID: 2123)
  Prédit: ' print'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' print' → logprob: -0.3998200595378876
    2. 'print' (adapté à ' print') → logprob: -1.27482008934021
    3. '       ' → logprob: -3.02482008934021
    4. '   ' → logprob: -6.649819850921631
    5. '    ' → logprob: -9.649820327758789
    6. ' ' → logprob: -10.274820327758789
    7. '     ' → logprob: -10.524820327758789
    8. '	print' → logprob: -10.649820327758789
    9. ' ' → logprob: -11.024820327758789
    10. '  ' → logprob: -11.149820327758789

Token 90: '("' (ID: 568)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(' → logprob: -0.10032150894403458
    2. '("' → logprob: -2.3503215312957764
    3. '("")' → logprob: -9.475321769714355
    4. '("("' → logprob: -10.850321769714355
    5. '()' → logprob: -11.975321769714355
    6. '("""' → logprob: -12.350321769714355
    7. '(""' → logprob: -12.600321769714355
    8. '('' → logprob: -12.850321769714355
    9. '(
' → logprob: -14.725321769714355
    10. '"' → logprob: -15.225321769714355

Token 91: 'NO' (ID: 14695)
  Prédit: 'NO'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'NO' → logprob: -2.9875325708417222e-05
    2. '"' → logprob: -10.875029563903809
    3. 'N' → logprob: -12.125029563903809
    4. ' NO' → logprob: -12.875029563903809
    5. '"No' → logprob: -13.500029563903809
    6. '"N' → logprob: -14.000029563903809
    7. 'NON' → logprob: -15.500029563903809
    8. 'No' → logprob: -15.625029563903809
    9. '")' → logprob: -15.750029563903809
    10. 'NOT' → logprob: -16.125030517578125

Token 92: '")

' (ID: 10822)
  Prédit: '")'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '")' → logprob: -7.815280696377158e-05
    2. ')' → logprob: -9.500078201293945
    3. '"' → logprob: -13.500078201293945
    4. ')")' → logprob: -13.625078201293945
    5. '")
' → logprob: -14.375078201293945
    6. '')' → logprob: -18.000078201293945
    7. '!")' → logprob: -18.125078201293945
    8. ' ")' → logprob: -18.125078201293945
    9. '")

' → logprob: -18.750078201293945
    10. '`)' → logprob: -19.000078201293945

Token 93: '#' (ID: 2)
  Prédit: ''
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False

Token 94: ' Le' (ID: 2018)
  Prédit: '\n'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '\n' → logprob: -0.7507049441337585
    2. '\' → logprob: -1.5007050037384033
    3. '#' → logprob: -2.0007050037384033
    4. '<|end|>' → logprob: -2.5007050037384033
    5. '
' → logprob: -3.7507050037384033
    6. ' ' → logprob: -4.250704765319824
    7. '```' → logprob: -4.375704765319824
    8. ')' → logprob: -4.375704765319824
    9. '_' → logprob: -4.750704765319824
    10. '(' → logprob: -5.625704765319824

Token 95: ' classique' (ID: 76895)
  Prédit: 'if'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'if' → logprob: -0.37475907802581787
    2. ' main' → logprob: -1.7497590780258179
    3. ' if' → logprob: -2.1247591972351074
    4. ' ' → logprob: -4.874759197235107
    5. '_' → logprob: -4.999759197235107
    6. 'main' → logprob: -6.999759197235107
    7. 's' → logprob: -7.124759197235107
    8. '#' → logprob: -7.124759197235107
    9. ' ' → logprob: -7.499759197235107
    10. ' code' → logprob: -8.37475872039795

Token 96: '
' (ID: 198)
  Prédit: '
'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '
' → logprob: -0.1563534289598465
    2. 'if' → logprob: -2.03135347366333
    3. '

' → logprob: -4.53135347366333
    4. '\n' → logprob: -7.03135347366333
    5. ' if' → logprob: -7.15635347366333
    6. '<|end|>' → logprob: -7.78135347366333
    7. '```' → logprob: -8.031352996826172
    8. ' 
' → logprob: -8.906352996826172
    9. '  
' → logprob: -9.406352996826172
    10. 'main' → logprob: -10.406352996826172

Token 97: 'if' (ID: 366)
  Prédit: 'if'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'if' → logprob: -0.005756476428359747
    2. '
' → logprob: -5.630756378173828
    3. 'main' → logprob: -6.255756378173828
    4. '```' → logprob: -9.005756378173828
    5. ' if' → logprob: -10.005756378173828
    6. '\n' → logprob: -10.505756378173828
    7. '

' → logprob: -11.130756378173828
    8. '\' → logprob: -11.880756378173828
    9. '    
' → logprob: -12.505756378173828
    10. 'i' → logprob: -12.630756378173828

Token 98: ' __' (ID: 2516)
  Prédit: ' __'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' __' → logprob: -9.233804303221405e-05
    2. '__' → logprob: -10.000092506408691
    3. ' ' → logprob: -10.125092506408691
    4. ' ' → logprob: -12.000092506408691
    5. ' ' → logprob: -15.000092506408691
    6. '_' → logprob: -15.750092506408691
    7. ' _' → logprob: -16.125091552734375
    8. ' ___' → logprob: -17.875091552734375
    9. ' ‌' → logprob: -18.000091552734375
    10. ' name' → logprob: -18.250091552734375

Token 99: 'name' (ID: 897)
  Prédit: ' =='
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' ==' → logprob: -0.015866834670305252
    2. ' ' → logprob: -4.640866756439209
    3. '==' → logprob: -6.015866756439209
    4. '__' → logprob: -6.265866756439209
    5. ' __' → logprob: -7.140866756439209
    6. ' =="' → logprob: -7.640866756439209
    7. '_' → logprob: -9.015867233276367
    8. '<|end|>' → logprob: -9.265867233276367
    9. ' =' → logprob: -9.515867233276367
    10. '=="' → logprob: -9.765867233276367

Token 100: '__' (ID: 771)
  Prédit: '__'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '__' → logprob: -1.7120533811976202e-05
    2. '_' → logprob: -11.125017166137695
    3. '___' → logprob: -14.000017166137695
    4. ' __' → logprob: -14.375017166137695
    5. '____' → logprob: -15.375017166137695
    6. '__.__' → logprob: -15.375017166137695
    7. '__
' → logprob: -16.125017166137695
    8. '==' → logprob: -16.125017166137695
    9. '__

' → logprob: -16.375017166137695
    10. '__('' → logprob: -16.750017166137695

Token 101: ' ==' (ID: 951)
  Prédit: '__'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '__' → logprob: -0.18409426510334015
    2. ' ==' → logprob: -1.8090943098068237
    3. '==' → logprob: -5.559094429016113
    4. '=="' → logprob: -8.684094429016113
    5. ' __' → logprob: -9.184094429016113
    6. '_' → logprob: -9.434094429016113
    7. ' =="' → logprob: -9.809094429016113
    8. ' ' → logprob: -9.934094429016113
    9. '"' → logprob: -11.309094429016113
    10. ' =' → logprob: -11.934094429016113

Token 102: ' "__' (ID: 27367)
  Prédit: '"'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '"' → logprob: -0.0130470497533679
    2. ''' → logprob: -4.763047218322754
    3. ' "__' → logprob: -5.513047218322754
    4. ' "' → logprob: -7.888047218322754
    5. ' '__' → logprob: -11.513047218322754
    6. ' '' → logprob: -13.388047218322754
    7. '__' → logprob: -13.638047218322754
    8. '"user' → logprob: -15.513047218322754
    9. '"_' → logprob: -16.013046264648438
    10. '"name' → logprob: -16.263046264648438

Token 103: 'main' (ID: 7731)
  Prédit: 'main'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'main' → logprob: -2.339278580620885e-06
    2. 'name' → logprob: -13.250001907348633
    3. ' main' → logprob: -15.500001907348633
    4. 'm' → logprob: -16.625001907348633
    5. 'ma' → logprob: -16.750001907348633
    6. 'mai' → logprob: -16.875001907348633
    7. 'maine' → logprob: -17.500001907348633
    8. '	main' → logprob: -18.375001907348633
    9. '_main' → logprob: -18.500001907348633
    10. '"' → logprob: -20.250001907348633

Token 104: '__":
' (ID: 49892)
  Prédit: '__'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '__' → logprob: -0.0067161982879042625
    2. '__":
' → logprob: -5.006716251373291
    3. '_' → logprob: -14.881715774536133
    4. '_"' → logprob: -15.631715774536133
    5. '__':
' → logprob: -16.256715774536133
    6. '__["' → logprob: -16.381715774536133
    7. '__("' → logprob: -16.631715774536133
    8. '__",' → logprob: -17.006715774536133
    9. ' __' → logprob: -18.006715774536133
    10. '___' → logprob: -19.006715774536133

Token 105: '   ' (ID: 271)
  Prédit: ' main'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' main' → logprob: -0.017186274752020836
    2. '	main' → logprob: -5.142186164855957
    3. ' 
' → logprob: -5.267186164855957
    4. 'main' → logprob: -5.642186164855957
    5. ' ' → logprob: -6.892186164855957
    6. ' ' → logprob: -6.892186164855957
    7. '(main' → logprob: -9.267186164855957
    8. '   ' → logprob: -9.517186164855957
    9. '    
' → logprob: -9.642186164855957
    10. '_main' → logprob: -9.892186164855957

Token 106: ' main' (ID: 2758)
  Prédit: ' main'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' main' → logprob: -0.0024814847856760025
    2. 'main' (adapté à ' main') → logprob: -6.002481460571289
    3. '	main' → logprob: -12.502481460571289
    4. ' ' → logprob: -14.002481460571289
    5. ' ma' → logprob: -14.502481460571289
    6. ' ' → logprob: -15.252481460571289
    7. ' mains' → logprob: -15.252481460571289
    8. ' m' → logprob: -15.377481460571289
    9. '(main' → logprob: -16.62748146057129
    10. ' 
' → logprob: -16.87748146057129

Token 107: '()' (ID: 416)
  Prédit: '()'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '()' → logprob: -0.00028135839966125786
    2. '(' → logprob: -8.62528133392334
    3. '()
' → logprob: -9.25028133392334
    4. ' ()' → logprob: -13.25028133392334
    5. '(
' → logprob: -13.62528133392334
    6. '()`' → logprob: -13.75028133392334
    7. '()

' → logprob: -14.62528133392334
    8. '()
' → logprob: -15.00028133392334
    9. '(

' → logprob: -16.125282287597656
    10. '()"' → logprob: -16.250282287597656


RÉSUMÉ:
--------------------------------------------------------------------------------
Total des tokens analysés: 105
Tokens correctement prédits (1ère position, stricte): 32
Tokens correctement prédits (1ère position, avec adaptation): 33
Tokens correctement prédits (top 10): 59
Précision stricte (1ère position): 30.48%
Précision adaptée (1ère position): 31.43%
Précision (top 10): 56.19%
================================================================================
