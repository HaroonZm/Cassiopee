================================================================================
ANALYSE DE PRÉDICTION TOKEN PAR TOKEN (BATCH API)
Date: 2025-06-04 19:52:28
Modèle de tokenisation: gpt-4o-mini
================================================================================

SCRIPT ANALYSÉ:
--------------------------------------------------------------------------------
n, a, b = input().split()
n = int(n)
a = int(a)
b = int(b)
cost = a * n
if cost < b:
    print(cost)
else:
    print(b)
--------------------------------------------------------------------------------

RÉSULTATS D'ANALYSE TOKEN PAR TOKEN:
--------------------------------------------------------------------------------
Token 0: 'n' (ID: 77)
  → Token d'amorce (pas de prédiction)

Token 1: ',' (ID: 11)
  → Token d'amorce (pas de prédiction)

Token 2: ' a' (ID: 261)
  → Token d'amorce (pas de prédiction)

Token 3: ',' (ID: 11)
  Prédit: '='
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '=' → logprob: -0.0340353399515152
    2. ',' → logprob: -4.0340352058410645
    3. ' =' → logprob: -4.1590352058410645
    4. '[' → logprob: -9.659035682678223
    5. '+' → logprob: -11.034035682678223
    6. '_' → logprob: -11.659035682678223
    7. ')' → logprob: -11.659035682678223
    8. '*' → logprob: -11.909035682678223
    9. '.' → logprob: -12.284035682678223
    10. ' ' → logprob: -12.284035682678223

Token 4: ' b' (ID: 287)
  Prédit: '='
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '=' → logprob: -0.00936171505600214
    2. ' =' → logprob: -4.884361743927002
    3. ',' → logprob: -6.384361743927002
    4. '[' → logprob: -11.384361267089844
    5. ' ' → logprob: -11.384361267089844
    6. '.' → logprob: -11.384361267089844
    7. ')' → logprob: -11.634361267089844
    8. ';' → logprob: -12.259361267089844
    9. '_' → logprob: -12.384361267089844
    10. '=

' → logprob: -12.384361267089844

Token 5: ' =' (ID: 314)
  Prédit: '='
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '=' → logprob: -0.009982254356145859
    2. ' =' → logprob: -4.884982109069824
    3. ',' → logprob: -6.134982109069824
    4. ';' → logprob: -9.759982109069824
    5. '+' → logprob: -10.259982109069824
    6. '=
' → logprob: -10.884982109069824
    7. '[' → logprob: -11.009982109069824
    8. '.' → logprob: -11.134982109069824
    9. '```' → logprob: -11.384982109069824
    10. ' ' → logprob: -11.384982109069824

Token 6: ' input' (ID: 3422)
  Prédit: ' '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' ' → logprob: -0.5722630620002747
    2. ' map' → logprob: -1.4472630023956299
    3. '0' → logprob: -2.19726300239563
    4. 'map' → logprob: -2.94726300239563
    5. ' input' → logprob: -3.82226300239563
    6. 'input' → logprob: -4.322263240814209
    7. '1' → logprob: -6.947263240814209
    8. ' list' → logprob: -8.82226276397705
    9. '10' → logprob: -8.82226276397705
    10. ' [' → logprob: -8.82226276397705

Token 7: '().' (ID: 1454)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '(' → logprob: -0.003260177094489336
    2. '()' → logprob: -6.878260135650635
    3. '.' → logprob: -7.378260135650635
    4. '('' → logprob: -8.003260612487793
    5. '(
' → logprob: -8.128260612487793
    6. ''' → logprob: -8.628260612487793
    7. '("("' → logprob: -8.628260612487793
    8. '(.)' → logprob: -9.128260612487793
    9. '```' → logprob: -9.253260612487793
    10. '[' → logprob: -9.503260612487793

Token 8: 'split' (ID: 13627)
  Prédit: 'split'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'split' → logprob: -0.00013321757433004677
    2. 'strip' → logprob: -9.000133514404297
    3. ' split' → logprob: -11.625133514404297
    4. 's' → logprob: -14.750133514404297
    5. 'spl' → logprob: -14.750133514404297
    6. '.split' → logprob: -17.375133514404297
    7. '```' → logprob: -17.375133514404297
    8. 'sp' → logprob: -17.500133514404297
    9. 'rstrip' → logprob: -17.750133514404297
    10. '()' → logprob: -18.125133514404297

Token 9: '()
' (ID: 1234)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '(' → logprob: -0.0031030885875225067
    2. '()' → logprob: -6.003103256225586
    3. '('' → logprob: -8.253103256225586
    4. '(
' → logprob: -8.503103256225586
    5. '(

' → logprob: -9.878103256225586
    6. '`' → logprob: -10.628103256225586
    7. '```' → logprob: -10.878103256225586
    8. '(`' → logprob: -11.128103256225586
    9. ''' → logprob: -11.253103256225586
    10. '("("' → logprob: -11.378103256225586

Token 10: 'n' (ID: 77)
  Prédit: ' ='
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' =' → logprob: -0.7282972931861877
    2. '=' → logprob: -0.8532972931861877
    3. 'n' → logprob: -4.103297233581543
    4. '.' → logprob: -4.228297233581543
    5. ',' → logprob: -4.353297233581543
    6. 'int' → logprob: -4.728297233581543
    7. '\n' → logprob: -5.353297233581543
    8. 'a' → logprob: -5.478297233581543
    9. '```' → logprob: -5.478297233581543
    10. ')' → logprob: -5.603297233581543

Token 11: ' =' (ID: 314)
  Prédit: ''
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False

Token 12: ' int' (ID: 677)
  Prédit: 'int'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'int' → logprob: -0.3869059979915619
    2. ' int' → logprob: -1.1369060277938843
    3. ' n' → logprob: -10.761905670166016
    4. 'n' → logprob: -11.636905670166016
    5. '0' → logprob: -13.511905670166016
    6. ' ' → logprob: -13.886905670166016
    7. '(int' → logprob: -14.511905670166016
    8. '[int' → logprob: -14.761905670166016
    9. '10' → logprob: -15.136905670166016
    10. ''int' → logprob: -15.261905670166016

Token 13: '(n' (ID: 2406)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(' → logprob: -0.062056638300418854
    2. '(n' → logprob: -2.812056541442871
    3. '('' → logprob: -10.062056541442871
    4. '(a' → logprob: -10.812056541442871
    5. '("("' → logprob: -12.812056541442871
    6. '```' → logprob: -12.812056541442871
    7. '()' → logprob: -12.937056541442871
    8. '(int' → logprob: -12.937056541442871
    9. '(input' → logprob: -13.437056541442871
    10. '(`' → logprob: -13.437056541442871

Token 14: ')
' (ID: 446)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')' → logprob: -3.523948907968588e-05
    2. '+' → logprob: -11.625035285949707
    3. ' )' → logprob: -11.750035285949707
    4. ')
' → logprob: -12.750035285949707
    5. '`)' → logprob: -13.000035285949707
    6. '```' → logprob: -13.000035285949707
    7. '')' → logprob: -13.125035285949707
    8. '**' → logprob: -13.625035285949707
    9. '),' → logprob: -13.750035285949707
    10. '*' → logprob: -13.750035285949707

Token 15: 'a' (ID: 64)
  Prédit: 'a'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'a' → logprob: -0.011338522657752037
    2. ' a' → logprob: -4.511338710784912
    3. 'c' → logprob: -9.261338233947754
    4. ' ' → logprob: -10.261338233947754
    5. '<|end|>' → logprob: -10.261338233947754
    6. 'b' → logprob: -10.386338233947754
    7. ',' → logprob: -10.511338233947754
    8. '```' → logprob: -10.761338233947754
    9. 'i' → logprob: -11.386338233947754
    10. 'n' → logprob: -11.386338233947754

Token 16: ' =' (ID: 314)
  Prédit: ' ='
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' =' → logprob: -0.47668540477752686
    2. '=' → logprob: -1.8516854047775269
    3. ',' → logprob: -2.1016855239868164
    4. '+' → logprob: -3.2266855239868164
    5. '<|end|>' → logprob: -3.8516855239868164
    6. ')' → logprob: -4.351685523986816
    7. '[' → logprob: -4.851685523986816
    8. ' +=' → logprob: -5.851685523986816
    9. '_' → logprob: -6.101685523986816
    10. ' +' → logprob: -6.226685523986816

Token 17: ' int' (ID: 677)
  Prédit: 'int'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'int' → logprob: -0.0010912814177572727
    2. ' int' → logprob: -6.876091480255127
    3. 'float' → logprob: -10.626091003417969
    4. 'input' → logprob: -11.376091003417969
    5. 'a' → logprob: -11.626091003417969
    6. 'list' → logprob: -12.126091003417969
    7. '[int' → logprob: -12.126091003417969
    8. 'str' → logprob: -13.876091003417969
    9. '(int' → logprob: -14.751091003417969
    10. '0' → logprob: -15.126091003417969

Token 18: '(a' (ID: 6271)
  Prédit: '(a'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(a' → logprob: -0.4741540253162384
    2. '(' → logprob: -0.974153995513916
    3. '(n' → logprob: -10.099154472351074
    4. ' (' → logprob: -11.224154472351074
    5. '(b' → logprob: -11.599154472351074
    6. '()' → logprob: -12.349154472351074
    7. 'a' → logprob: -13.349154472351074
    8. '('' → logprob: -13.724154472351074
    9. '(`' → logprob: -14.099154472351074
    10. '(
' → logprob: -14.349154472351074

Token 19: ')
' (ID: 446)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')' → logprob: -9.567575034452602e-05
    2. ')
' → logprob: -9.50009536743164
    3. ' )' → logprob: -11.62509536743164
    4. '')' → logprob: -12.37509536743164
    5. '<|end|>' → logprob: -12.87509536743164
    6. '`)' → logprob: -13.37509536743164
    7. '```' → logprob: -13.50009536743164
    8. ')

' → logprob: -14.75009536743164
    9. '),' → logprob: -14.75009536743164
    10. ')`' → logprob: -15.50009536743164

Token 20: 'b' (ID: 65)
  Prédit: ' b'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' b' → logprob: -0.2318456768989563
    2. 'b' → logprob: -1.6068456172943115
    3. ' ' → logprob: -5.481845855712891
    4. ' 
' → logprob: -6.356845855712891
    5. '```' → logprob: -8.10684585571289
    6. '`' → logprob: -8.98184585571289
    7. ' 

' → logprob: -11.10684585571289
    8. '  
' → logprob: -11.10684585571289
    9. ' `' → logprob: -11.48184585571289
    10. '``' → logprob: -11.48184585571289

Token 21: ' =' (ID: 314)
  Prédit: ' ='
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' =' → logprob: -0.3512791395187378
    2. '=' → logprob: -1.2262791395187378
    3. ')' → logprob: -5.976279258728027
    4. '<|end|>' → logprob: -8.601279258728027
    5. ' ' → logprob: -10.976279258728027
    6. '=int' → logprob: -11.101279258728027
    7. '_' → logprob: -11.351279258728027
    8. '+' → logprob: -11.476279258728027
    9. ' +=' → logprob: -12.101279258728027
    10. '>' → logprob: -12.226279258728027

Token 22: ' int' (ID: 677)
  Prédit: 'int'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'int' → logprob: -0.04860859736800194
    2. ' int' → logprob: -3.0486085414886475
    3. '(int' → logprob: -11.298608779907227
    4. 'b' → logprob: -12.048608779907227
    5. ' b' → logprob: -13.548608779907227
    6. '<int' → logprob: -14.673608779907227
    7. '0' → logprob: -14.798608779907227
    8. 'a' → logprob: -15.173608779907227
    9. '=int' → logprob: -16.048608779907227
    10. ' ' → logprob: -16.048608779907227

Token 23: '(b' (ID: 3229)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(' → logprob: -0.007331525441259146
    2. '(b' → logprob: -5.007331371307373
    3. '(a' → logprob: -8.257331848144531
    4. '('' → logprob: -8.882331848144531
    5. ' (' → logprob: -9.507331848144531
    6. '(n' → logprob: -9.632331848144531
    7. 'b' → logprob: -10.882331848144531
    8. ''' → logprob: -11.632331848144531
    9. '(
' → logprob: -11.882331848144531
    10. ' ' → logprob: -12.132331848144531

Token 24: ')
' (ID: 446)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')' → logprob: -5.512236498361744e-07
    2. ')
' → logprob: -15.625000953674316
    3. ' )' → logprob: -16.125
    4. '')' → logprob: -16.625
    5. '))' → logprob: -16.75
    6. '```' → logprob: -16.75
    7. '<|end|>' → logprob: -17.0
    8. '`)' → logprob: -17.75
    9. '#' → logprob: -17.875
    10. '),' → logprob: -18.0

Token 25: 'cost' (ID: 33457)
  Prédit: 'c'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'c' → logprob: -1.3491955995559692
    2. 'if' → logprob: -1.8491955995559692
    3. 'x' → logprob: -1.9741955995559692
    4. 'for' → logprob: -2.0991954803466797
    5. 's' → logprob: -2.0991954803466797
    6. 'i' → logprob: -2.4741954803466797
    7. 'd' → logprob: -3.5991954803466797
    8. 'n' → logprob: -4.22419548034668
    9. 'm' → logprob: -4.22419548034668
    10. 'r' → logprob: -4.72419548034668

Token 26: ' =' (ID: 314)
  Prédit: '['
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '[' → logprob: -0.0946502685546875
    2. '_' → logprob: -2.8446502685546875
    3. '=' → logprob: -4.2196502685546875
    4. ' =' → logprob: -4.7196502685546875
    5. 's' → logprob: -5.4696502685546875
    6. '<|end|>' → logprob: -6.8446502685546875
    7. '(' → logprob: -7.0946502685546875
    8. ')' → logprob: -7.7196502685546875
    9. '[]' → logprob: -7.8446502685546875
    10. '[:]' → logprob: -7.9696502685546875

Token 27: ' a' (ID: 261)
  Prédit: 'a'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'a' → logprob: -0.2372409999370575
    2. 'min' → logprob: -2.61224102973938
    3. '0' → logprob: -2.73724102973938
    4. ' min' → logprob: -3.73724102973938
    5. ' a' → logprob: -3.86224102973938
    6. 'n' → logprob: -4.487240791320801
    7. '100' → logprob: -5.862240791320801
    8. 'b' → logprob: -6.112240791320801
    9. '[]' → logprob: -6.112240791320801
    10. 'max' → logprob: -6.237240791320801

Token 28: ' *' (ID: 425)
  Prédit: '*'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '*' → logprob: -0.2469845563173294
    2. '+' → logprob: -1.996984601020813
    3. ' *' → logprob: -2.7469844818115234
    4. '*n' → logprob: -4.746984481811523
    5. ' +' → logprob: -5.496984481811523
    6. '<|end|>' → logprob: -5.496984481811523
    7. '>' → logprob: -8.121984481811523
    8. ' ' → logprob: -8.496984481811523
    9. 'if' → logprob: -8.621984481811523
    10. '*i' → logprob: -8.871984481811523

Token 29: ' n' (ID: 297)
  Prédit: 'n'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'n' → logprob: -0.03979212045669556
    2. ' n' → logprob: -3.289792060852051
    3. 'b' → logprob: -6.664792060852051
    4. ' ' → logprob: -8.91479206085205
    5. '100' → logprob: -9.53979206085205
    6. ' b' → logprob: -9.66479206085205
    7. '(n' → logprob: -10.03979206085205
    8. '2' → logprob: -10.41479206085205
    9. '10' → logprob: -10.91479206085205
    10. ' (' → logprob: -11.28979206085205

Token 30: '
' (ID: 198)
  Prédit: '+'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '+' → logprob: -0.21187445521354675
    2. ' if' → logprob: -2.461874485015869
    3. 'if' → logprob: -2.711874485015869
    4. ' +' → logprob: -3.336874485015869
    5. '%' → logprob: -6.961874485015869
    6. '*' → logprob: -7.086874485015869
    7. ' ' → logprob: -7.211874485015869
    8. '-' → logprob: -8.086874008178711
    9. '<|end|>' → logprob: -8.961874008178711
    10. '>' → logprob: -9.086874008178711

Token 31: 'if' (ID: 366)
  Prédit: ' if'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' if' → logprob: -0.6554448008537292
    2. 'if' → logprob: -1.405444860458374
    3. '+' → logprob: -1.530444860458374
    4. ' +' → logprob: -4.905444622039795
    5. ' ' → logprob: -5.530444622039795
    6. '<|end|>' → logprob: -6.030444622039795
    7. '-' → logprob: -6.530444622039795
    8. '*' → logprob: -6.780444622039795
    9. '%' → logprob: -6.780444622039795
    10. '>' → logprob: -8.780445098876953

Token 32: ' cost' (ID: 3097)
  Prédit: ' cost'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' cost' → logprob: -0.1879734992980957
    2. ' n' → logprob: -1.8129734992980957
    3. 'cost' → logprob: -5.062973499298096
    4. 'n' → logprob: -6.687973499298096
    5. ' b' → logprob: -7.687973499298096
    6. ' a' → logprob: -10.312973022460938
    7. ' ' → logprob: -10.312973022460938
    8. ' ' → logprob: -10.812973022460938
    9. ' not' → logprob: -11.187973022460938
    10. 'b' → logprob: -11.312973022460938

Token 33: ' <' (ID: 464)
  Prédit: ' >'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' >' → logprob: -0.053898248821496964
    2. ' <' → logprob: -3.678898334503174
    3. '>' → logprob: -4.178898334503174
    4. ' <=' → logprob: -4.678898334503174
    5. ' >=' → logprob: -6.303898334503174
    6. '<' → logprob: -7.678898334503174
    7. ' ' → logprob: -8.928897857666016
    8. '<=' → logprob: -9.178897857666016
    9. '>=' → logprob: -10.178897857666016
    10. '.' → logprob: -11.553897857666016

Token 34: ' b' (ID: 287)
  Prédit: 'b'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'b' → logprob: -0.003227979177609086
    2. ' b' → logprob: -5.753228187561035
    3. '=' → logprob: -10.378228187561035
    4. '100' → logprob: -11.753228187561035
    5. ' ' → logprob: -12.628228187561035
    6. '=b' → logprob: -13.253228187561035
    7. '	b' → logprob: -13.878228187561035
    8. '>b' → logprob: -14.003228187561035
    9. '0' → logprob: -14.128228187561035
    10. '   ' → logprob: -14.503228187561035

Token 35: ':
' (ID: 734)
  Prédit: ':'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ':' → logprob: -0.0003221150254830718
    2. ' :' → logprob: -8.125322341918945
    3. '*' → logprob: -11.750322341918945
    4. '*:' → logprob: -11.750322341918945
    5. ' *' → logprob: -13.000322341918945
    6. ' and' → logprob: -13.250322341918945
    7. ':**' → logprob: -13.750322341918945
    8. ':
' → logprob: -14.000322341918945
    9. ':*' → logprob: -14.625322341918945
    10. '**' → logprob: -14.625322341918945

Token 36: '   ' (ID: 271)
  Prédit: ':'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ':' → logprob: -0.7168042659759521
    2. 'cost' → logprob: -1.7168042659759521
    3. ' cost' → logprob: -2.216804265975952
    4. '\n' → logprob: -2.341804265975952
    5. 'print' → logprob: -3.591804265975952
    6. '
' → logprob: -3.591804265975952
    7. ' ' → logprob: -4.341804504394531
    8. '<|end|>' → logprob: -4.591804504394531
    9. '0' → logprob: -5.341804504394531
    10. '\' → logprob: -5.466804504394531

Token 37: ' print' (ID: 2123)
  Prédit: 'print'
  Correct (stricte): False
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'print' (adapté à ' print') → logprob: -0.04188578203320503
    2. 'cost' → logprob: -3.2918858528137207
    3. ' print' → logprob: -6.041885852813721
    4. ' cost' → logprob: -6.916885852813721
    5. '   ' → logprob: -7.791885852813721
    6. 'pr' → logprob: -11.041885375976562
    7. 'return' → logprob: -12.041885375976562
    8. '    ' → logprob: -12.291885375976562
    9. 'pass' → logprob: -12.416885375976562
    10. 'price' → logprob: -12.666885375976562

Token 38: '(cost' (ID: 133554)
  Prédit: '(cost'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(cost' → logprob: -0.22704066336154938
    2. '(' → logprob: -1.6020406484603882
    3. '(n' → logprob: -7.602040767669678
    4. '(b' → logprob: -7.977040767669678
    5. '(a' → logprob: -8.60204029083252
    6. '()' → logprob: -8.60204029083252
    7. '("' → logprob: -8.85204029083252
    8. 'cost' → logprob: -9.47704029083252
    9. '('' → logprob: -9.72704029083252
    10. '(c' → logprob: -9.85204029083252

Token 39: ')
' (ID: 446)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')' → logprob: -0.0006875330000184476
    2. ')
' → logprob: -7.500687599182129
    3. 'else' → logprob: -9.125687599182129
    4. ' )' → logprob: -11.750687599182129
    5. ' else' → logprob: -11.750687599182129
    6. '*' → logprob: -12.375687599182129
    7. '+' → logprob: -13.750687599182129
    8. '   ' → logprob: -13.875687599182129
    9. '```' → logprob: -14.625687599182129
    10. '**' → logprob: -14.750687599182129

Token 40: 'else' (ID: 2807)
  Prédit: 'else'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'else' → logprob: -0.0025317834224551916
    2. ' else' → logprob: -6.002532005310059
    3. 'elif' → logprob: -10.252532005310059
    4. '<|end|>' → logprob: -11.627532005310059
    5. '```' → logprob: -12.252532005310059
    6. ')' → logprob: -12.877532005310059
    7. '#else' → logprob: -13.627532005310059
    8. '_else' → logprob: -13.627532005310059
    9. '	else' → logprob: -14.252532005310059
    10. '   ' → logprob: -15.002532005310059

Token 41: ':
' (ID: 734)
  Prédit: ':'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ':' → logprob: -0.00010783452307805419
    2. '   ' → logprob: -9.750107765197754
    3. ' :' → logprob: -10.125107765197754
    4. ':
' → logprob: -11.750107765197754
    5. 'print' → logprob: -15.375107765197754
    6. ' print' → logprob: -15.750107765197754
    7. '():' → logprob: -15.875107765197754
    8. '  ' → logprob: -15.875107765197754
    9. '):' → logprob: -16.00010871887207
    10. ':return' → logprob: -16.00010871887207

Token 42: '   ' (ID: 271)
  Prédit: 'b'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'b' → logprob: -0.34122395515441895
    2. 'print' → logprob: -1.466223955154419
    3. ' b' → logprob: -3.591223955154419
    4. '   ' → logprob: -3.841223955154419
    5. ' print' → logprob: -4.71622371673584
    6. '    ' → logprob: -9.09122371673584
    7. '<|end|>' → logprob: -10.09122371673584
    8. ' ' → logprob: -10.46622371673584
    9. '```' → logprob: -10.46622371673584
    10. '   ' → logprob: -10.84122371673584

Token 43: ' print' (ID: 2123)
  Prédit: 'print'
  Correct (stricte): False
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'print' (adapté à ' print') → logprob: -3.7697225252486533e-06
    2. ' print' → logprob: -12.750003814697266
    3. 'b' → logprob: -14.625003814697266
    4. '   ' → logprob: -15.125003814697266
    5. '.print' → logprob: -16.625003814697266
    6. '	print' → logprob: -17.875003814697266
    7. 'pr' → logprob: -18.500003814697266
    8. 'printf' → logprob: -18.625003814697266
    9. '```' → logprob: -19.375003814697266
    10. '(print' → logprob: -19.625003814697266

Token 44: '(b' (ID: 3229)
  Prédit: '(b'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(b' → logprob: -0.1602761149406433
    2. '(' → logprob: -1.910276174545288
    3. 'b' → logprob: -10.910276412963867
    4. ' (' → logprob: -11.160276412963867
    5. '((' → logprob: -11.785276412963867
    6. '()' → logprob: -12.160276412963867
    7. '('' → logprob: -13.035276412963867
    8. '(B' → logprob: -14.285276412963867
    9. '(
' → logprob: -14.410276412963867
    10. '("' → logprob: -15.160276412963867

Token 45: ')' (ID: 8)
  Prédit: ')'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')' → logprob: -7.896309739408025e-07
    2. '))' → logprob: -14.750000953674316
    3. ' )' → logprob: -15.250000953674316
    4. ')
' → logprob: -16.25
    5. ')`' → logprob: -17.875
    6. '')' → logprob: -18.875
    7. '）' → logprob: -18.875
    8. '`)' → logprob: -19.0
    9. '())' → logprob: -19.875
    10. ')))' → logprob: -20.375


RÉSUMÉ:
--------------------------------------------------------------------------------
Total des tokens analysés: 43
Tokens correctement prédits (1ère position, stricte): 10
Tokens correctement prédits (1ère position, avec adaptation): 12
Tokens correctement prédits (top 10): 36
Précision stricte (1ère position): 23.26%
Précision adaptée (1ère position): 27.91%
Précision (top 10): 83.72%
================================================================================
