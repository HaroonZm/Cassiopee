================================================================================
ANALYSE DE PRÉDICTION TOKEN PAR TOKEN (BATCH API)
Date: 2025-06-04 19:28:01
Modèle de tokenisation: gpt-4o-mini
================================================================================

SCRIPT ANALYSÉ:
--------------------------------------------------------------------------------
H,N = map(int,input().split())
A = list(map(int,input().split()))
print("Yes" if sum(A) >= H else "No")
--------------------------------------------------------------------------------

RÉSULTATS D'ANALYSE TOKEN PAR TOKEN:
--------------------------------------------------------------------------------
Token 0: 'H' (ID: 39)
  → Token d'amorce (pas de prédiction)

Token 1: ',N' (ID: 49539)
  → Token d'amorce (pas de prédiction)

Token 2: ' =' (ID: 314)
  → Token d'amorce (pas de prédiction)

Token 3: ' map' (ID: 4014)
  Prédit: '2'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '2' → logprob: -1.3502154350280762
    2. ' ' → logprob: -1.4752154350280762
    3. '5' → logprob: -1.8502154350280762
    4. 'map' → logprob: -2.100215435028076
    5. '10' → logprob: -2.475215435028076
    6. ' map' → logprob: -2.725215435028076
    7. '3' → logprob: -3.725215435028076
    8. '32' → logprob: -4.600215435028076
    9. '0' → logprob: -4.600215435028076
    10. '20' → logprob: -4.975215435028076

Token 4: '(int' (ID: 2742)
  Prédit: '(int'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(int' → logprob: -0.2623550593852997
    2. '(str' → logprob: -1.762355089187622
    3. '(' → logprob: -3.137355089187622
    4. '(lambda' → logprob: -4.387354850769043
    5. '(input' → logprob: -7.012354850769043
    6. 'str' → logprob: -7.137354850769043
    7. 'int' → logprob: -7.762354850769043
    8. '<|end|>' → logprob: -7.887354850769043
    9. '```' → logprob: -8.387354850769043
    10. '(eval' → logprob: -9.262354850769043

Token 5: ',input' (ID: 123014)
  Prédit: '(input'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(input' → logprob: -0.014378677122294903
    2. ')' → logprob: -4.514378547668457
    3. '(' → logprob: -6.639378547668457
    4. 'input' → logprob: -6.764378547668457
    5. ',input' → logprob: -7.639378547668457
    6. '=input' → logprob: -9.764378547668457
    7. '`)' → logprob: -10.014378547668457
    8. '```' → logprob: -10.139378547668457
    9. '(raw' → logprob: -10.389378547668457
    10. '`' → logprob: -10.514378547668457

Token 6: '().' (ID: 1454)
  Prédit: '())'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '())' → logprob: -0.42863109707832336
    2. '()' → logprob: -1.178631067276001
    3. '().' → logprob: -4.30363130569458
    4. '('' → logprob: -4.55363130569458
    5. '(' → logprob: -4.92863130569458
    6. ')' → logprob: -5.42863130569458
    7. '();)' → logprob: -7.30363130569458
    8. '());' → logprob: -7.42863130569458
    9. '`()' → logprob: -7.55363130569458
    10. '()>' → logprob: -7.92863130569458

Token 7: 'split' (ID: 13627)
  Prédit: 'split'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'split' → logprob: -0.00026658078422769904
    2. 'strip' → logprob: -8.250267028808594
    3. 'rstrip' → logprob: -12.625267028808594
    4. ' split' → logprob: -13.625267028808594
    5. '(split' → logprob: -14.375267028808594
    6. ')' → logprob: -16.000267028808594
    7. 'read' → logprob: -17.250267028808594
    8. 'replace' → logprob: -17.250267028808594
    9. 'spl' → logprob: -17.375267028808594
    10. 'startswith' → logprob: -18.250267028808594

Token 8: '())
' (ID: 4574)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ')' → logprob: -0.11891129612922668
    2. '())' → logprob: -2.2439112663269043
    3. '`)' → logprob: -6.118911266326904
    4. '()' → logprob: -6.618911266326904
    5. '))' → logprob: -6.743911266326904
    6. '('' → logprob: -7.618911266326904
    7. '(' → logprob: -7.868911266326904
    8. '')' → logprob: -8.868911743164062
    9. ')`' → logprob: -9.868911743164062
    10. '```' → logprob: -10.118911743164062

Token 9: 'A' (ID: 32)
  Prédit: 'for'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'for' → logprob: -0.20149607956409454
    2. 'a' → logprob: -2.076496124267578
    3. 'A' → logprob: -4.701496124267578
    4. 'matrix' → logprob: -4.701496124267578
    5. 'dp' → logprob: -4.826496124267578
    6. 'grid' → logprob: -5.201496124267578
    7. 'data' → logprob: -5.576496124267578
    8. '#' → logprob: -6.076496124267578
    9. '```' → logprob: -6.076496124267578
    10. 'x' → logprob: -6.201496124267578

Token 10: ' =' (ID: 314)
  Prédit: '['
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '[' → logprob: -0.20018425583839417
    2. ' =' → logprob: -2.4501843452453613
    3. '=' → logprob: -2.7001843452453613
    4. '[i' → logprob: -4.950184345245361
    5. '.' → logprob: -5.075184345245361
    6. ',' → logprob: -5.825184345245361
    7. '[A' → logprob: -6.325184345245361
    8. '[]' → logprob: -6.575184345245361
    9. '[][]' → logprob: -6.700184345245361
    10. '=[]' → logprob: -6.825184345245361

Token 11: ' list' (ID: 1562)
  Prédit: '['
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '[' → logprob: -0.5268388390541077
    2. '[]' → logprob: -1.276838779449463
    3. '[list' → logprob: -2.776838779449463
    4. ' [' → logprob: -3.526838779449463
    5. ' []' → logprob: -3.776838779449463
    6. 'list' → logprob: -5.276838779449463
    7. '[int' → logprob: -5.401838779449463
    8. '[input' → logprob: -5.901838779449463
    9. '[A' → logprob: -6.776838779449463
    10. '[][]' → logprob: -7.526838779449463

Token 12: '(map' (ID: 16946)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '(' → logprob: -0.00018744789122138172
    2. '(input' → logprob: -10.250187873840332
    3. '(int' → logprob: -10.375187873840332
    4. '[' → logprob: -11.125187873840332
    5. '(range' → logprob: -11.125187873840332
    6. '(A' → logprob: -11.625187873840332
    7. '()' → logprob: -11.750187873840332
    8. '[int' → logprob: -12.000187873840332
    9. '(token' → logprob: -12.375187873840332
    10. '(
' → logprob: -12.500187873840332

Token 13: '(int' (ID: 2742)
  Prédit: '(int'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(int' → logprob: -0.004808180034160614
    2. '(' → logprob: -5.379807949066162
    3. '<int' → logprob: -9.75480842590332
    4. '(input' → logprob: -10.00480842590332
    5. '[int' → logprob: -10.50480842590332
    6. 'int' → logprob: -11.00480842590332
    7. '=int' → logprob: -11.25480842590332
    8. '(str' → logprob: -11.87980842590332
    9. ',int' → logprob: -12.37980842590332
    10. '```' → logprob: -12.75480842590332

Token 14: ',input' (ID: 123014)
  Prédit: '(input'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(input' → logprob: -0.14830249547958374
    2. ',input' → logprob: -2.0233025550842285
    3. '(' → logprob: -5.8983025550842285
    4. ',' → logprob: -5.8983025550842285
    5. '=input' → logprob: -10.39830207824707
    6. '(int' → logprob: -10.89830207824707
    7. ',int' → logprob: -11.02330207824707
    8. '),' → logprob: -11.27330207824707
    9. ')' → logprob: -11.52330207824707
    10. 'input' → logprob: -11.64830207824707

Token 15: '().' (ID: 1454)
  Prédit: '().'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '().' → logprob: -0.14129547774791718
    2. '()' → logprob: -2.2662954330444336
    3. '(' → logprob: -4.016295433044434
    4. '(input' → logprob: -5.641295433044434
    5. ')' → logprob: -6.516295433044434
    6. '())' → logprob: -7.016295433044434
    7. '()-' → logprob: -7.891295433044434
    8. '`()' → logprob: -7.891295433044434
    9. '()))' → logprob: -8.016295433044434
    10. '()(' → logprob: -8.141295433044434

Token 16: 'split' (ID: 13627)
  Prédit: 'split'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'split' → logprob: -2.816093228830141e-06
    2. ' split' → logprob: -13.25000286102295
    3. '(split' → logprob: -14.37500286102295
    4. 'strip' → logprob: -14.75000286102295
    5. 'rstrip' → logprob: -17.000001907348633
    6. 'spl' → logprob: -17.500001907348633
    7. ')' → logprob: -20.000001907348633
    8. 'plit' → logprob: -20.000001907348633
    9. 'read' → logprob: -20.125001907348633
    10. 's' → logprob: -20.250001907348633

Token 17: '()))
' (ID: 24521)
  Prédit: '))'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '))' → logprob: -0.8604339361190796
    2. ')' → logprob: -0.9854339361190796
    3. '()))' → logprob: -1.9854339361190796
    4. '())' → logprob: -2.985434055328369
    5. '(' → logprob: -4.235434055328369
    6. '()' → logprob: -6.985434055328369
    7. ')))' → logprob: -8.485433578491211
    8. '('' → logprob: -9.610433578491211
    9. ')(' → logprob: -10.485433578491211
    10. '())))' → logprob: -10.485433578491211

Token 18: 'print' (ID: 1598)
  Prédit: 'dp'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'dp' → logprob: -0.6883884072303772
    2. 'for' → logprob: -1.5633883476257324
    3. 'B' → logprob: -3.3133883476257324
    4. 'A' → logprob: -3.3133883476257324
    5. 's' → logprob: -3.4383883476257324
    6. 'c' → logprob: -3.4383883476257324
    7. 'd' → logprob: -3.8133883476257324
    8. 'result' → logprob: -4.063388347625732
    9. 'C' → logprob: -4.063388347625732
    10. 'count' → logprob: -4.313388347625732

Token 19: '("' (ID: 568)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '(' → logprob: -8.041768160182983e-05
    2. '("("' → logprob: -10.375080108642578
    3. '('' → logprob: -10.500080108642578
    4. '()' → logprob: -11.500080108642578
    5. '((' → logprob: -12.625080108642578
    6. '(
' → logprob: -13.500080108642578
    7. '(A' → logprob: -13.875080108642578
    8. '(len' → logprob: -14.250080108642578
    9. '(end' → logprob: -14.375080108642578
    10. '(**' → logprob: -14.375080108642578

Token 20: 'Yes' (ID: 13022)
  Prédit: '*'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '*' → logprob: -1.3339892625808716
    2. 'H' → logprob: -1.7089892625808716
    3. 'A' → logprob: -2.583989143371582
    4. '"' → logprob: -2.583989143371582
    5. 'sum' → logprob: -2.708989143371582
    6. ' ")' → logprob: -2.708989143371582
    7. ' ".' → logprob: -2.833989143371582
    8. ' "))' → logprob: -3.083989143371582
    9. 'max' → logprob: -3.583989143371582
    10. '"))' → logprob: -3.958989143371582

Token 21: '"' (ID: 1)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')' → logprob: -0.6944661736488342
    2. '")' → logprob: -0.6944661736488342
    3. ')")' → logprob: -6.8194661140441895
    4. '"' → logprob: -9.194466590881348
    5. '))' → logprob: -10.319466590881348
    6. '"))' → logprob: -10.694466590881348
    7. 'if' → logprob: -10.694466590881348
    8. ' if' → logprob: -11.444466590881348
    9. ' )' → logprob: -11.444466590881348
    10. '())' → logprob: -11.694466590881348

Token 22: ' if' (ID: 538)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ')' → logprob: -0.0004116076452191919
    2. '))' → logprob: -7.875411510467529
    3. ',)' → logprob: -11.625411987304688
    4. '()' → logprob: -11.750411987304688
    5. '())' → logprob: -12.125411987304688
    6. '")' → logprob: -12.750411987304688
    7. ',' → logprob: -13.125411987304688
    8. '(' → logprob: -13.875411987304688
    9. ' )' → logprob: -13.875411987304688
    10. ')")' → logprob: -14.250411987304688

Token 23: ' sum' (ID: 4215)
  Prédit: ' all'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' all' → logprob: -0.606325626373291
    2. ' any' → logprob: -1.981325626373291
    3. ' max' → logprob: -2.356325626373291
    4. ' A' → logprob: -2.731325626373291
    5. ' H' → logprob: -2.981325626373291
    6. 'all' → logprob: -3.356325626373291
    7. ' sum' → logprob: -3.981325626373291
    8. 'A' → logprob: -4.481325626373291
    9. 'H' → logprob: -4.481325626373291
    10. 'max' → logprob: -4.856325626373291

Token 24: '(A' (ID: 10706)
  Prédit: '(A'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(A' → logprob: -0.021776149049401283
    2. '(' → logprob: -4.02177619934082
    3. '(a' → logprob: -5.89677619934082
    4. '([' → logprob: -8.02177619934082
    5. '((' → logprob: -9.02177619934082
    6. '(i' → logprob: -9.14677619934082
    7. '(max' → logprob: -9.52177619934082
    8. '(abs' → logprob: -9.52177619934082
    9. '(x' → logprob: -10.39677619934082
    10. '(sum' → logprob: -10.39677619934082

Token 25: ')' (ID: 8)
  Prédit: ' <='
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' <=' → logprob: -0.45299071073532104
    2. ' >=' → logprob: -1.7029907703399658
    3. ')' → logprob: -1.9529907703399658
    4. ' ==' → logprob: -4.077990531921387
    5. '<=' → logprob: -4.577990531921387
    6. '>=' → logprob: -5.077990531921387
    7. '==' → logprob: -6.327990531921387
    8. ' >' → logprob: -7.202990531921387
    9. ')>=' → logprob: -7.327990531921387
    10. ' )' → logprob: -7.327990531921387

Token 26: ' >=' (ID: 5064)
  Prédit: ' <='
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' <=' → logprob: -0.3902798891067505
    2. ' ==' → logprob: -2.015279769897461
    3. ' >=' → logprob: -2.265279769897461
    4. '<=' → logprob: -3.265279769897461
    5. '==' → logprob: -3.515279769897461
    6. '>=' → logprob: -4.265279769897461
    7. ' >' → logprob: -6.515279769897461
    8. '>' → logprob: -7.015279769897461
    9. ')' → logprob: -7.515279769897461
    10. ' <' → logprob: -8.265279769897461

Token 27: ' H' (ID: 487)
  Prédit: 'H'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'H' → logprob: -0.011854052543640137
    2. ' H' → logprob: -4.51185417175293
    3. '10' → logprob: -8.51185417175293
    4. 'N' → logprob: -8.88685417175293
    5. ' ' → logprob: -9.01185417175293
    6. '(H' → logprob: -9.26185417175293
    7. '(' → logprob: -9.76185417175293
    8. '100' → logprob: -9.88685417175293
    9. '	H' → logprob: -11.13685417175293
    10. '1' → logprob: -11.26185417175293

Token 28: ' else' (ID: 1203)
  Prédit: ' else'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' else' → logprob: -0.02538325823843479
    2. ')' → logprob: -4.275383472442627
    3. 'else' → logprob: -4.525383472442627
    4. ' ' → logprob: -8.650382995605469
    5. ' )' → logprob: -8.900382995605469
    6. '```' → logprob: -12.150382995605469
    7. ' and' → logprob: -12.650382995605469
    8. 'and' → logprob: -13.775382995605469
    9. '	else' → logprob: -14.150382995605469
    10. ' ' → logprob: -14.275382995605469

Token 29: ' "' (ID: 392)
  Prédit: '"No'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '"No' → logprob: -0.47457462549209595
    2. '"' → logprob: -0.974574625492096
    3. ' "' → logprob: -7.849574565887451
    4. ' ' → logprob: -10.09957504272461
    5. ' No' → logprob: -10.22457504272461
    6. 'No' → logprob: -11.72457504272461
    7. '   ' → logprob: -12.09957504272461
    8. ''' → logprob: -12.59957504272461
    9. ')' → logprob: -12.72457504272461
    10. '	' → logprob: -12.84957504272461

Token 30: 'No' (ID: 3160)
  Prédit: 'No'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'No' → logprob: -0.12693975865840912
    2. '"No' → logprob: -2.1269397735595703
    3. ' No' → logprob: -11.75193977355957
    4. '"' → logprob: -12.62693977355957
    5. '“No' → logprob: -15.37693977355957
    6. 'NO' → logprob: -16.75193977355957
    7. '_No' → logprob: -16.87693977355957
    8. '>No' → logprob: -17.12693977355957
    9. '```' → logprob: -17.25193977355957
    10. 'Yes' → logprob: -17.62693977355957

Token 31: '")' (ID: 1405)
  Prédit: '")'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '")' → logprob: -0.008654754608869553
    2. ')' → logprob: -4.758654594421387
    3. ')")' → logprob: -10.133654594421387
    4. '”)' → logprob: -16.133655548095703
    5. '`)' → logprob: -16.383655548095703
    6. '}")' → logprob: -16.633655548095703
    7. '")
' → logprob: -16.883655548095703
    8. '"' → logprob: -16.883655548095703
    9. '")}' → logprob: -17.758655548095703
    10. '')' → logprob: -17.758655548095703


RÉSUMÉ:
--------------------------------------------------------------------------------
Total des tokens analysés: 29
Tokens correctement prédits (1ère position, stricte): 9
Tokens correctement prédits (1ère position, avec adaptation): 9
Tokens correctement prédits (top 10): 21
Précision stricte (1ère position): 31.03%
Précision adaptée (1ère position): 31.03%
Précision (top 10): 72.41%
================================================================================
