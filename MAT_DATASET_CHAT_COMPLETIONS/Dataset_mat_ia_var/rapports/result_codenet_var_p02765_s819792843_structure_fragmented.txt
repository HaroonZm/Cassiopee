================================================================================
ANALYSE DE PRÉDICTION TOKEN PAR TOKEN (BATCH API)
Date: 2025-06-04 19:24:48
Modèle de tokenisation: gpt-4o-mini
================================================================================

SCRIPT ANALYSÉ:
--------------------------------------------------------------------------------
def get_input():
    return input()

def split_input(user_input):
    return user_input.split()

def str_list_to_int(lst):
    return [int(i) for i in lst]

def get_n_value(values):
    return values[0]

def get_r_value(values):
    return values[1]

def is_n_less_than_10(n):
    return n < 10

def compute_x(n):
    return 100 * (10 - n)

def sum_x_and_r(x, r):
    return x + r

def print_result(result):
    print(result)

def main():
    user_input = get_input()
    splitted = split_input(user_input)
    numbers = str_list_to_int(splitted)
    n = get_n_value(numbers)
    r = get_r_value(numbers)
    if is_n_less_than_10(n):
        x = compute_x(n)
        result = sum_x_and_r(x, r)
        print_result(result)
    else:
        print_result(r)

main()
--------------------------------------------------------------------------------

RÉSULTATS D'ANALYSE TOKEN PAR TOKEN:
--------------------------------------------------------------------------------
Token 0: 'def' (ID: 1314)
  → Token d'amorce (pas de prédiction)

Token 1: ' get' (ID: 717)
  → Token d'amorce (pas de prédiction)

Token 2: '_input' (ID: 12507)
  → Token d'amorce (pas de prédiction)

Token 3: '():
' (ID: 8595)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '(' → logprob: -0.016520146280527115
    2. '_' → logprob: -4.141520023345947
    3. '():' → logprob: -8.516520500183105
    4. '(:' → logprob: -9.266520500183105
    5. ' (' → logprob: -10.141520500183105
    6. '(_' → logprob: -10.141520500183105
    7. '(_:' → logprob: -10.516520500183105
    8. '```' → logprob: -11.016520500183105
    9. '()' → logprob: -11.516520500183105
    10. ':' → logprob: -11.766520500183105

Token 4: '   ' (ID: 271)
  Prédit: '```'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '```' → logprob: -0.6385331749916077
    2. '   ' → logprob: -1.638533115386963
    3. '\' → logprob: -2.013533115386963
    4. '    
' → logprob: -3.388533115386963
    5. '\n' → logprob: -3.513533115386963
    6. '(' → logprob: -3.888533115386963
    7. '  
' → logprob: -5.138533115386963
    8. '   
' → logprob: -5.263533115386963
    9. '()' → logprob: -5.388533115386963
    10. '(
' → logprob: -5.388533115386963

Token 5: ' return' (ID: 622)
  Prédit: 'return'
  Correct (stricte): False
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'return' (adapté à ' return') → logprob: -0.21803174912929535
    2. 'input' → logprob: -2.468031644821167
    3. 'user' → logprob: -3.218031644821167
    4. '   ' → logprob: -3.343031644821167
    5. '```' → logprob: -4.593031883239746
    6. 'x' → logprob: -4.843031883239746
    7. ' ' → logprob: -4.968031883239746
    8. ' return' → logprob: -5.843031883239746
    9. 'text' → logprob: -6.343031883239746
    10. 'i' → logprob: -6.593031883239746

Token 6: ' input' (ID: 3422)
  Prédit: ' input'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' input' → logprob: -0.7442995309829712
    2. ' ' → logprob: -1.2442995309829712
    3. 'input' → logprob: -1.4942995309829712
    4. '"' → logprob: -4.994299411773682
    5. ''' → logprob: -5.619299411773682
    6. '  ' → logprob: -7.619299411773682
    7. '(input' → logprob: -8.11929988861084
    8. ' None' → logprob: -8.24429988861084
    9. ' '' → logprob: -8.61929988861084
    10. ' "' → logprob: -8.61929988861084

Token 7: '()

' (ID: 5874)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '(' → logprob: -0.001565449871122837
    2. '('' → logprob: -7.251565456390381
    3. '()' → logprob: -7.626565456390381
    4. ''' → logprob: -9.001564979553223
    5. '("("' → logprob: -9.251564979553223
    6. ' (' → logprob: -10.501564979553223
    7. '```' → logprob: -10.626564979553223
    8. '(
' → logprob: -10.876564979553223
    9. '"' → logprob: -10.876564979553223
    10. ' ' → logprob: -11.626564979553223

Token 8: 'def' (ID: 1314)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(' → logprob: -0.38942375779151917
    2. 'def' → logprob: -2.2644238471984863
    3. '\n' → logprob: -3.2644238471984863
    4. '.' → logprob: -3.2644238471984863
    5. '()' → logprob: -3.5144238471984863
    6. '#' → logprob: -3.6394238471984863
    7. ')' → logprob: -4.139423847198486
    8. '(
' → logprob: -4.389423847198486
    9. '\' → logprob: -4.639423847198486
    10. '```' → logprob: -4.764423847198486

Token 9: ' split' (ID: 12648)
  Prédit: ' get'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' get' → logprob: -0.6385780572891235
    2. ' calculate' → logprob: -1.1385780572891235
    3. ' process' → logprob: -2.763577938079834
    4. ' main' → logprob: -3.388577938079834
    5. ' print' → logprob: -4.638577938079834
    6. ' add' → logprob: -4.888577938079834
    7. ' space' → logprob: -5.388577938079834
    8. ' user' → logprob: -5.638577938079834
    9. ' validate' → logprob: -5.638577938079834
    10. ' compute' → logprob: -5.638577938079834

Token 10: '_input' (ID: 12507)
  Prédit: '_'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '_' → logprob: -0.07361313700675964
    2. '(' → logprob: -2.698613166809082
    3. '_text' → logprob: -7.073613166809082
    4. '('_' → logprob: -7.198613166809082
    5. '_line' → logprob: -8.073613166809082
    6. '_string' → logprob: -8.198613166809082
    7. '_s' → logprob: -8.448613166809082
    8. '_words' → logprob: -8.823613166809082
    9. '_word' → logprob: -9.073613166809082
    10. '(_)' → logprob: -9.198613166809082

Token 11: '(user' (ID: 7195)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '(' → logprob: -0.003858508775010705
    2. '_' → logprob: -6.25385856628418
    3. '('_' → logprob: -7.37885856628418
    4. '("("' → logprob: -7.50385856628418
    5. '('' → logprob: -8.12885856628418
    6. '("_' → logprob: -9.87885856628418
    7. '(_)' → logprob: -10.12885856628418
    8. '```' → logprob: -10.25385856628418
    9. '_text' → logprob: -10.37885856628418
    10. '()' → logprob: -10.50385856628418

Token 12: '_input' (ID: 12507)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')' → logprob: -0.47373348474502563
    2. '_' → logprob: -1.7237334251403809
    3. '):' → logprob: -1.8487334251403809
    4. ')_' → logprob: -3.973733425140381
    5. '_input' → logprob: -4.723733425140381
    6. ' )' → logprob: -5.723733425140381
    7. '_)' → logprob: -6.098733425140381
    8. '()' → logprob: -6.848733425140381
    9. ' _' → logprob: -6.848733425140381
    10. '(' → logprob: -6.973733425140381

Token 13: '):
' (ID: 1883)
  Prédit: '):'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '):' → logprob: -0.022123917937278748
    2. ',' → logprob: -4.27212381362915
    3. ')' → logprob: -4.89712381362915
    4. ':' → logprob: -9.022124290466309
    5. '):
' → logprob: -9.147124290466309
    6. ' ):' → logprob: -9.772124290466309
    7. '(' → logprob: -10.397124290466309
    8. '(user' → logprob: -10.897124290466309
    9. ')):' → logprob: -11.022124290466309
    10. ',user' → logprob: -11.522124290466309

Token 14: '   ' (ID: 271)
  Prédit: ' user'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' user' → logprob: -0.5484628081321716
    2. '   ' → logprob: -1.4234628677368164
    3. 'user' → logprob: -1.9234628677368164
    4. '(user' → logprob: -3.7984628677368164
    5. ' return' → logprob: -4.548462867736816
    6. 'return' → logprob: -6.423462867736816
    7. '[user' → logprob: -8.673462867736816
    8. '(' → logprob: -9.423462867736816
    9. '	user' → logprob: -9.798462867736816
    10. '```' → logprob: -10.423462867736816

Token 15: ' return' (ID: 622)
  Prédit: ' user'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' user' → logprob: -0.030334316194057465
    2. 'user' → logprob: -3.530334234237671
    3. ' return' → logprob: -7.78033447265625
    4. '   ' → logprob: -9.03033447265625
    5. 'return' (adapté à ' return') → logprob: -10.40533447265625
    6. '(user' → logprob: -12.65533447265625
    7. '[user' → logprob: -13.03033447265625
    8. ' ' → logprob: -13.15533447265625
    9. '	user' → logprob: -13.78033447265625
    10. ' split' → logprob: -13.78033447265625

Token 16: ' user' (ID: 1825)
  Prédit: ' user'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' user' → logprob: -0.0205497145652771
    2. 'user' → logprob: -3.895549774169922
    3. '(user' → logprob: -12.520549774169922
    4. ' ' → logprob: -13.895549774169922
    5. '"user' → logprob: -14.145549774169922
    6. ''user' → logprob: -14.270549774169922
    7. '	user' → logprob: -14.395549774169922
    8. '[user' → logprob: -14.895549774169922
    9. '=user' → logprob: -15.395549774169922
    10. '.user' → logprob: -15.395549774169922

Token 17: '_input' (ID: 12507)
  Prédit: '_input'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_input' → logprob: -0.14060768485069275
    2. '_' → logprob: -2.5156075954437256
    3. '_put' → logprob: -3.7656075954437256
    4. '_p' → logprob: -4.265607833862305
    5. 'put' → logprob: -6.015607833862305
    6. '_s' → logprob: -6.015607833862305
    7. '_user' → logprob: -6.265607833862305
    8. '```' → logprob: -7.140607833862305
    9. '_n' → logprob: -7.265607833862305
    10. 'n' → logprob: -7.390607833862305

Token 18: '.split' (ID: 10347)
  Prédit: '.'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '.' → logprob: -0.3876171410083771
    2. '.split' → logprob: -1.1376171112060547
    3. '.strip' → logprob: -7.262617111206055
    4. ' .' → logprob: -10.262617111206055
    5. '.s' → logprob: -12.637617111206055
    6. 'split' → logprob: -13.387617111206055
    7. '().' → logprob: -13.387617111206055
    8. '.replace' → logprob: -13.887617111206055
    9. '.rstrip' → logprob: -14.637617111206055
    10. '.lower' → logprob: -14.762617111206055

Token 19: '()

' (ID: 5874)
  Prédit: '(''
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '('' → logprob: -0.4103739559650421
    2. '(' → logprob: -1.1603739261627197
    3. '("("' → logprob: -3.7853739261627197
    4. ''' → logprob: -8.16037368774414
    5. '('.')' → logprob: -8.78537368774414
    6. '()' → logprob: -10.66037368774414
    7. '(`' → logprob: -10.78537368774414
    8. '(('' → logprob: -12.03537368774414
    9. '(\'' → logprob: -12.28537368774414
    10. '```' → logprob: -12.53537368774414

Token 20: 'def' (ID: 1314)
  Prédit: 'def'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'def' → logprob: -0.06488367915153503
    2. 'd' → logprob: -2.8148837089538574
    3. 'de' → logprob: -6.939883708953857
    4. '#' → logprob: -7.189883708953857
    5. '```' → logprob: -7.314883708953857
    6. '\' → logprob: -8.5648832321167
    7. '[' → logprob: -9.8148832321167
    8. '(' → logprob: -10.3148832321167
    9. '<|end|>' → logprob: -10.5648832321167
    10. '
' → logprob: -10.5648832321167

Token 21: ' str' (ID: 989)
  Prédit: ' main'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' main' → logprob: -0.835696280002594
    2. 'process' → logprob: -1.5856962203979492
    3. 'main' → logprob: -1.7106962203979492
    4. ' process' → logprob: -2.335696220397949
    5. 'join' → logprob: -3.210696220397949
    6. ' join' → logprob: -3.460696220397949
    7. 'calculate' → logprob: -5.710696220397949
    8. 'print' → logprob: -6.710696220397949
    9. 'parse' → logprob: -6.960696220397949
    10. 'get' → logprob: -7.210696220397949

Token 22: '_list' (ID: 4162)
  Prédit: 'ing'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'ing' → logprob: -0.29619067907333374
    2. '_to' → logprob: -1.5461907386779785
    3. 'ip' → logprob: -3.7961907386779785
    4. '_len' → logprob: -4.5461907386779785
    5. '_' → logprob: -5.2961907386779785
    6. 'len' → logprob: -7.5461907386779785
    7. '_ing' → logprob: -7.5461907386779785
    8. '_join' → logprob: -7.6711907386779785
    9. 'ips' → logprob: -7.7961907386779785
    10. '_lower' → logprob: -8.17119026184082

Token 23: '_to' (ID: 5089)
  Prédit: '_to'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_to' → logprob: -0.12765705585479736
    2. '_append' → logprob: -2.752656936645508
    3. '_len' → logprob: -4.502656936645508
    4. '(' → logprob: -4.627656936645508
    5. '_' → logprob: -4.877656936645508
    6. '_join' → logprob: -5.252656936645508
    7. '_split' → logprob: -5.752656936645508
    8. '_s' → logprob: -5.877656936645508
    9. '_concat' → logprob: -6.002656936645508
    10. 'ify' → logprob: -6.502656936645508

Token 24: '_int' (ID: 12285)
  Prédit: '_int'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_int' → logprob: -0.0025764903984963894
    2. '_' → logprob: -6.1275763511657715
    3. '_float' → logprob: -8.75257682800293
    4. '_str' → logprob: -9.00257682800293
    5. '_list' → logprob: -9.87757682800293
    6. '_num' → logprob: -10.75257682800293
    7. '_string' → logprob: -11.87757682800293
    8. '_integer' → logprob: -12.12757682800293
    9. '_number' → logprob: -12.25257682800293
    10. '_numbers' → logprob: -12.50257682800293

Token 25: '(lst' (ID: 95688)
  Prédit: '_list'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '_list' → logprob: -0.11722735315561295
    2. 's' → logprob: -2.24222731590271
    3. '_' → logprob: -6.242227554321289
    4. '(' → logprob: -7.367227554321289
    5. '_s' → logprob: -7.367227554321289
    6. 'List' → logprob: -7.617227554321289
    7. 'list' → logprob: -8.617227554321289
    8. '_lst' → logprob: -8.867227554321289
    9. '_lists' → logprob: -9.367227554321289
    10. '_array' → logprob: -9.492227554321289

Token 26: '):
' (ID: 1883)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ')' → logprob: -0.07217305898666382
    2. '):' → logprob: -3.0721731185913086
    3. '(' → logprob: -3.8221731185913086
    4. '(lst' → logprob: -7.822173118591309
    5. ' )' → logprob: -8.322173118591309
    6. 's' → logprob: -9.322173118591309
    7. '[' → logprob: -9.572173118591309
    8. '_list' → logprob: -9.697173118591309
    9. '(List' → logprob: -9.822173118591309
    10. ')(' → logprob: -9.947173118591309

Token 27: '   ' (ID: 271)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(' → logprob: -0.0843539908528328
    2. '[' → logprob: -3.2093539237976074
    3. '   ' → logprob: -3.3343539237976074
    4. ' (' → logprob: -6.959353923797607
    5. '[:]' → logprob: -6.959353923797607
    6. ':' → logprob: -7.584353923797607
    7. '[int' → logprob: -7.709353923797607
    8. 'def' → logprob: -8.084354400634766
    9. '[]' → logprob: -8.334354400634766
    10. '(lst' → logprob: -8.334354400634766

Token 28: ' return' (ID: 622)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.48568636178970337
    2. ' return' → logprob: -1.9856863021850586
    3. ' [' → logprob: -2.1106863021850586
    4. '[' → logprob: -2.3606863021850586
    5. 'return' (adapté à ' return') → logprob: -4.110686302185059
    6. '[int' → logprob: -4.235686302185059
    7. '[i' → logprob: -7.485686302185059
    8. '[
' → logprob: -9.110686302185059
    9. ' lst' → logprob: -10.235686302185059
    10. ' list' → logprob: -10.235686302185059

Token 29: ' [' (ID: 723)
  Prédit: ' ['
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' [' → logprob: -0.11469213664531708
    2. ' list' → logprob: -2.739692211151123
    3. '[' → logprob: -3.614692211151123
    4. '[int' → logprob: -4.364692211151123
    5. '[list' → logprob: -5.864692211151123
    6. 'list' → logprob: -6.739692211151123
    7. '[List' → logprob: -9.989691734313965
    8. ' int' → logprob: -10.739691734313965
    9. '[len' → logprob: -11.364691734313965
    10. '[i' → logprob: -12.489691734313965

Token 30: 'int' (ID: 491)
  Prédit: 'int'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'int' → logprob: -0.0002614550176076591
    2. ' int' → logprob: -8.250261306762695
    3. '   ' → logprob: -16.375261306762695
    4. '(int' → logprob: -18.750261306762695
    5. '  ' → logprob: -19.750261306762695
    6. '```' → logprob: -19.750261306762695
    7. '<int' → logprob: -20.125261306762695
    8. '	int' → logprob: -20.125261306762695
    9. '[int' → logprob: -20.500261306762695
    10. ':int' → logprob: -20.625261306762695

Token 31: '(i' (ID: 3649)
  Prédit: '(x'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(x' → logprob: -0.1609622836112976
    2. '(i' → logprob: -2.9109623432159424
    3. '(item' → logprob: -2.9109623432159424
    4. '(' → logprob: -3.5359623432159424
    5. '(elem' → logprob: -5.035962104797363
    6. '(element' → logprob: -6.535962104797363
    7. '(s' → logprob: -6.660962104797363
    8. '(token' → logprob: -7.035962104797363
    9. '(el' → logprob: -8.160962104797363
    10. '(ele' → logprob: -9.160962104797363

Token 32: ')' (ID: 8)
  Prédit: ')'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')' → logprob: -0.0007164848502725363
    2. ')]' → logprob: -7.250716686248779
    3. ' )' → logprob: -12.625716209411621
    4. ')])' → logprob: -13.750716209411621
    5. ')i' → logprob: -14.000716209411621
    6. ']' → logprob: -14.250716209411621
    7. ')item' → logprob: -15.500716209411621
    8. ')...' → logprob: -16.000717163085938
    9. ')`' → logprob: -16.250717163085938
    10. '))' → logprob: -16.375717163085938

Token 33: ' for' (ID: 395)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')' → logprob: -0.026496410369873047
    2. 'for' → logprob: -4.151496410369873
    3. ' for' → logprob: -4.651496410369873
    4. '(i' → logprob: -8.526496887207031
    5. ']' → logprob: -9.151496887207031
    6. '(lst' → logprob: -9.276496887207031
    7. ' )' → logprob: -9.526496887207031
    8. '(' → logprob: -9.776496887207031
    9. 'lst' → logprob: -10.026496887207031
    10. '   ' → logprob: -10.151496887207031

Token 34: ' i' (ID: 575)
  Prédit: ' lst'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' lst' → logprob: -0.022473901510238647
    2. ' i' → logprob: -3.8974738121032715
    3. 'lst' → logprob: -6.2724738121032715
    4. 'i' → logprob: -11.14747428894043
    5. '(lst' → logprob: -11.14747428894043
    6. ' ' → logprob: -11.39747428894043
    7. '_lst' → logprob: -14.14747428894043
    8. ' the' → logprob: -14.64747428894043
    9. ' ' → logprob: -15.52247428894043
    10. ' l' → logprob: -15.64747428894043

Token 35: ' in' (ID: 306)
  Prédit: ' in'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' in' → logprob: -0.0020567618776112795
    2. 'in' → logprob: -6.50205659866333
    3. ' ' → logprob: -7.87705659866333
    4. 'n' → logprob: -9.502057075500488
    5. 'lst' → logprob: -10.002057075500488
    6. ' lst' → logprob: -10.252057075500488
    7. 's' → logprob: -11.627057075500488
    8. ' n' → logprob: -12.752057075500488
    9. '<|end|>' → logprob: -13.627057075500488
    10. ']' → logprob: -14.002057075500488

Token 36: ' lst' (ID: 33384)
  Prédit: 'lst'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'lst' → logprob: -0.10020871460437775
    2. ' lst' → logprob: -2.3502087593078613
    3. '(lst' → logprob: -13.225208282470703
    4. '_lst' → logprob: -15.975208282470703
    5. 'l' → logprob: -16.850208282470703
    6. '.lst' → logprob: -17.225208282470703
    7. 'list' → logprob: -17.475208282470703
    8. 'Lst' → logprob: -18.475208282470703
    9. ' ' → logprob: -19.100208282470703
    10. 'ls' → logprob: -19.725208282470703

Token 37: ']

' (ID: 3144)
  Prédit: ']'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ']' → logprob: -7.576873758807778e-05
    2. ')]' → logprob: -9.625075340270996
    3. ' ]' → logprob: -12.250075340270996
    4. '])' → logprob: -12.875075340270996
    5. ']
' → logprob: -13.375075340270996
    6. ')' → logprob: -15.000075340270996
    7. '()]' → logprob: -16.125076293945312
    8. '])]' → logprob: -16.625076293945312
    9. '`]' → logprob: -16.750076293945312
    10. ']}' → logprob: -17.125076293945312

Token 38: 'def' (ID: 1314)
  Prédit: 'def'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'def' → logprob: -0.0001363168703392148
    2. '\' → logprob: -9.750136375427246
    3. '<|end|>' → logprob: -10.500136375427246
    4. '
' → logprob: -11.250136375427246
    5. '

' → logprob: -11.250136375427246
    6. '```' → logprob: -11.625136375427246
    7. '<|end|>' → logprob: -11.750136375427246
    8. ' def' → logprob: -13.000136375427246
    9. '#' → logprob: -13.875136375427246
    10. 'de' → logprob: -14.000136375427246

Token 39: ' get' (ID: 717)
  Prédit: ' main'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' main' → logprob: -0.10022985190153122
    2. ' calculate' → logprob: -3.1002297401428223
    3. ' process' → logprob: -4.100229740142822
    4. ' sum' → logprob: -4.475229740142822
    5. ' find' → logprob: -5.475229740142822
    6. ' reverse' → logprob: -5.475229740142822
    7. ' multiply' → logprob: -5.850229740142822
    8. ' add' → logprob: -6.100229740142822
    9. ' factorial' → logprob: -6.225229740142822
    10. ' solve' → logprob: -6.350229740142822

Token 40: '_n' (ID: 2170)
  Prédit: '_input'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '_input' → logprob: -0.09961865097284317
    2. '_user' → logprob: -2.724618673324585
    3. '_max' → logprob: -4.474618434906006
    4. '_sum' → logprob: -4.724618434906006
    5. '_' → logprob: -5.849618434906006
    6. '_numbers' → logprob: -7.349618434906006
    7. '_list' → logprob: -7.599618434906006
    8. '_output' → logprob: -7.724618434906006
    9. '_int' → logprob: -8.099618911743164
    10. '_command' → logprob: -8.224618911743164

Token 41: '_value' (ID: 6734)
  Prédit: 'um'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'um' → logprob: -0.8268771171569824
    2. 'umber' → logprob: -0.8268771171569824
    3. '()' → logprob: -2.8268771171569824
    4. 'umbers' → logprob: -3.7018771171569824
    5. '_' → logprob: -3.8268771171569824
    6. '_numbers' → logprob: -4.951877117156982
    7. 'ext' → logprob: -5.076877117156982
    8. 'ame' → logprob: -6.951877117156982
    9. '_value' → logprob: -7.076877117156982
    10. '_input' → logprob: -7.451877117156982

Token 42: '(values' (ID: 40883)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '(' → logprob: -0.10255041718482971
    2. '()' → logprob: -2.352550506591797
    3. '(user' → logprob: -6.977550506591797
    4. ' ()' → logprob: -7.602550506591797
    5. ' (' → logprob: -8.602550506591797
    6. '("("' → logprob: -8.727550506591797
    7. '(n' → logprob: -9.477550506591797
    8. '():' → logprob: -9.602550506591797
    9. 'user' → logprob: -10.102550506591797
    10. '("")' → logprob: -10.102550506591797

Token 43: '):
' (ID: 1883)
  Prédit: '):'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '):' → logprob: -0.0008110555354505777
    2. '[' → logprob: -7.7508111000061035
    3. ')' → logprob: -8.750810623168945
    4. ',' → logprob: -8.875810623168945
    5. '[]):' → logprob: -10.750810623168945
    6. '   ' → logprob: -11.125810623168945
    7. '):
' → logprob: -11.125810623168945
    8. ' ):' → logprob: -11.750810623168945
    9. '_list' → logprob: -12.375810623168945
    10. 's' → logprob: -12.625810623168945

Token 44: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.0038509091828018427
    2. ' return' → logprob: -6.128850936889648
    3. 'return' → logprob: -7.003850936889648
    4. '(n' → logprob: -8.878850936889648
    5. '```' → logprob: -8.878850936889648
    6. '(' → logprob: -9.253850936889648
    7. 'n' → logprob: -9.378850936889648
    8. '`' → logprob: -9.878850936889648
    9. '[' → logprob: -10.003850936889648
    10. '    
' → logprob: -10.128850936889648

Token 45: ' return' (ID: 622)
  Prédit: ' return'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' return' → logprob: -0.14057733118534088
    2. 'return' (adapté à ' return') → logprob: -2.1405773162841797
    3. '   ' → logprob: -4.76557731628418
    4. ' values' → logprob: -5.64057731628418
    5. 'values' → logprob: -6.51557731628418
    6. '    ' → logprob: -13.14057731628418
    7. '    
' → logprob: -14.01557731628418
    8. '	return' → logprob: -14.14057731628418
    9. 'eturn' → logprob: -14.51557731628418
    10. '	values' → logprob: -14.51557731628418

Token 46: ' values' (ID: 4824)
  Prédit: ' values'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' values' → logprob: -0.022203214466571808
    2. 'values' → logprob: -4.14720344543457
    3. ' int' → logprob: -5.14720344543457
    4. 'int' → logprob: -8.39720344543457
    5. ' len' → logprob: -9.27220344543457
    6. 'len' → logprob: -11.89720344543457
    7. '	values' → logprob: -12.64720344543457
    8. '(values' → logprob: -14.14720344543457
    9. ' vals' → logprob: -14.14720344543457
    10. ' ' → logprob: -14.77220344543457

Token 47: '[' (ID: 58)
  Prédit: '['
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '[' → logprob: -0.00012725738633889705
    2. ' [' → logprob: -9.375126838684082
    3. '[-' → logprob: -10.500126838684082
    4. '0' → logprob: -11.750126838684082
    5. '\[' → logprob: -13.125126838684082
    6. 'def' → logprob: -13.875126838684082
    7. ' ' → logprob: -13.875126838684082
    8. '   ' → logprob: -14.812626838684082
    9. '[len' → logprob: -14.812626838684082
    10. '```' → logprob: -14.875126838684082

Token 48: '0' (ID: 15)
  Prédit: '0'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '0' → logprob: -2.2200749754119897e-06
    2. ' ' → logprob: -13.250001907348633
    3. '1' → logprob: -14.750001907348633
    4. '۰' → logprob: -17.500001907348633
    5. ')' → logprob: -18.375001907348633
    6. '-' → logprob: -18.812501907348633
    7. '[' → logprob: -18.937501907348633
    8. '00' → logprob: -19.000001907348633
    9. '   ' → logprob: -19.000001907348633
    10. '٠' → logprob: -19.375001907348633

Token 49: ']

' (ID: 3144)
  Prédit: ']'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ']' → logprob: -0.00016027313540689647
    2. ' ]' → logprob: -8.750160217285156
    3. ')]' → logprob: -14.000160217285156
    4. ']
' → logprob: -14.750160217285156
    5. ')' → logprob: -15.125160217285156
    6. '}' → logprob: -16.500160217285156
    7. '']' → logprob: -17.500160217285156
    8. '   ' → logprob: -17.875160217285156
    9. ':]' → logprob: -17.875160217285156
    10. '[' → logprob: -18.000160217285156

Token 50: 'def' (ID: 1314)
  Prédit: 'def'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'def' → logprob: -0.012850886210799217
    2. '<|end|>' → logprob: -4.387850761413574
    3. '```' → logprob: -8.762850761413574
    4. ' def' → logprob: -9.762850761413574
    5. '
' → logprob: -10.012850761413574
    6. '<|end|>' → logprob: -10.387850761413574
    7. '#' → logprob: -10.512850761413574
    8. 'ndef' → logprob: -11.762850761413574
    9. 'newline' → logprob: -13.137850761413574
    10. '[' → logprob: -13.262850761413574

Token 51: ' get' (ID: 717)
  Prédit: ' get'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' get' → logprob: -0.056996528059244156
    2. ' def' → logprob: -3.9319965839385986
    3. 'get' → logprob: -4.3069963455200195
    4. ' main' → logprob: -4.3069963455200195
    5. ' calculate' → logprob: -5.9319963455200195
    6. 'def' → logprob: -6.5569963455200195
    7. ' split' → logprob: -6.5569963455200195
    8. ' process' → logprob: -7.6819963455200195
    9. '_get' → logprob: -7.9319963455200195
    10. '_' → logprob: -8.43199634552002

Token 52: '_r' (ID: 3442)
  Prédit: '_n'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '_n' → logprob: -0.27360013127326965
    2. '_values' → logprob: -1.6486001014709473
    3. '_rest' → logprob: -4.273600101470947
    4. '_' → logprob: -4.773600101470947
    5. '_remaining' → logprob: -5.023600101470947
    6. '_max' → logprob: -5.648600101470947
    7. '_list' → logprob: -6.273600101470947
    8. '_length' → logprob: -6.273600101470947
    9. 'values' → logprob: -6.773600101470947
    10. '_value' → logprob: -6.773600101470947

Token 53: '_value' (ID: 6734)
  Prédit: '_value'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_value' → logprob: -0.004300745669752359
    2. '_values' → logprob: -5.504300594329834
    3. 'value' → logprob: -9.004301071166992
    4. 'alue' → logprob: -9.754301071166992
    5. 'ange' → logprob: -11.504301071166992
    6. 'values' → logprob: -11.629301071166992
    7. '(values' → logprob: -11.754301071166992
    8. '_' → logprob: -13.004301071166992
    9. '_count' → logprob: -13.254301071166992
    10. 'andom' → logprob: -13.379301071166992

Token 54: '(values' (ID: 40883)
  Prédit: '(values'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(values' → logprob: -4.5491004129871726e-05
    2. '(' → logprob: -10.125045776367188
    3. ' (' → logprob: -12.375045776367188
    4. 'values' → logprob: -14.625045776367188
    5. '	values' → logprob: -15.500045776367188
    6. '_values' → logprob: -16.125045776367188
    7. '<|end|>' → logprob: -16.250045776367188
    8. '(vals' → logprob: -16.500045776367188
    9. ' values' → logprob: -16.875045776367188
    10. '```' → logprob: -17.000045776367188

Token 55: '):
' (ID: 1883)
  Prédit: '):'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '):' → logprob: -0.011089793406426907
    2. '[' → logprob: -5.01108980178833
    3. '):
' → logprob: -5.51108980178833
    4. '[]):' → logprob: -8.886089324951172
    5. '   ' → logprob: -9.511089324951172
    6. ')' → logprob: -9.886089324951172
    7. ' ):' → logprob: -10.886089324951172
    8. ',' → logprob: -11.386089324951172
    9. ']:' → logprob: -12.136089324951172
    10. ':' → logprob: -12.511089324951172

Token 56: '   ' (ID: 271)
  Prédit: ' values'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' values' → logprob: -0.001442376640625298
    2. 'values' → logprob: -6.6264424324035645
    3. '   ' → logprob: -9.251441955566406
    4. ' return' → logprob: -11.251441955566406
    5. '	values' → logprob: -12.376441955566406
    6. '(values' → logprob: -13.001441955566406
    7. '.values' → logprob: -14.251441955566406
    8. ' ' → logprob: -16.376441955566406
    9. 'return' → logprob: -17.001441955566406
    10. '    ' → logprob: -17.001441955566406

Token 57: ' return' (ID: 622)
  Prédit: ' values'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' values' → logprob: -0.05492358282208443
    2. 'values' → logprob: -2.9299235343933105
    3. '   ' → logprob: -10.804924011230469
    4. ' return' → logprob: -11.054924011230469
    5. '	values' → logprob: -12.929924011230469
    6. 'return' (adapté à ' return') → logprob: -13.554924011230469
    7. '(values' → logprob: -14.929924011230469
    8. '.values' → logprob: -14.929924011230469
    9. ' ' → logprob: -15.679924011230469
    10. '_values' → logprob: -15.929924011230469

Token 58: ' values' (ID: 4824)
  Prédit: ' values'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' values' → logprob: -0.25194251537323
    2. 'values' → logprob: -1.50194251537323
    3. '(values' → logprob: -12.25194263458252
    4. '	values' → logprob: -12.50194263458252
    5. '   ' → logprob: -12.75194263458252
    6. '.values' → logprob: -14.12694263458252
    7. ' ' → logprob: -14.62694263458252
    8. '  ' → logprob: -15.50194263458252
    9. '[' → logprob: -16.001941680908203
    10. '0' → logprob: -16.126941680908203

Token 59: '[' (ID: 58)
  Prédit: '['
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '[' → logprob: -8.387458365177736e-05
    2. '[-' → logprob: -9.625083923339844
    3. '1' → logprob: -11.000083923339844
    4. '```' → logprob: -14.875083923339844
    5. ' [' → logprob: -15.000083923339844
    6. '[len' → logprob: -15.750083923339844
    7. '2' → logprob: -16.875083923339844
    8. '[
' → logprob: -17.000083923339844
    9. 'def' → logprob: -17.500083923339844
    10. '   ' → logprob: -17.625083923339844

Token 60: '1' (ID: 16)
  Prédit: '1'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '1' → logprob: -3.4121114822482923e-06
    2. '0' → logprob: -12.875003814697266
    3. ' ' → logprob: -15.000003814697266
    4. ']' → logprob: -15.625003814697266
    5. '-' → logprob: -15.687503814697266
    6. '```' → logprob: -16.375003814697266
    7. '2' → logprob: -17.312503814697266
    8. '' → logprob: -18.187503814697266
    9. '[' → logprob: -18.500003814697266
    10. ')' → logprob: -18.500003814697266

Token 61: ']

' (ID: 3144)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ')' → logprob: -0.0002146226615877822
    2. ']' → logprob: -8.500214576721191
    3. '}' → logprob: -11.875214576721191
    4. '])' → logprob: -13.250214576721191
    5. '）' → logprob: -14.000214576721191
    6. ')
' → logprob: -14.750214576721191
    7. ')]' → logprob: -14.875214576721191
    8. ' )' → logprob: -15.750214576721191
    9. '))' → logprob: -16.125215530395508
    10. '   ' → logprob: -16.250215530395508

Token 62: 'def' (ID: 1314)
  Prédit: 'def'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'def' → logprob: -4.417976379045285e-05
    2. '```' → logprob: -10.375043869018555
    3. '<|end|>' → logprob: -12.000043869018555
    4. '\' → logprob: -13.000043869018555
    5. '
' → logprob: -13.375043869018555
    6. '<|end|>' → logprob: -14.250043869018555
    7. ' def' → logprob: -14.375043869018555
    8. '

' → logprob: -15.000043869018555
    9. '``' → logprob: -15.125043869018555
    10. '#' → logprob: -15.250043869018555

Token 63: ' is' (ID: 382)
  Prédit: ' calculate'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' calculate' → logprob: -0.27327093482017517
    2. ' main' → logprob: -2.398270845413208
    3. ' get' → logprob: -4.023271083831787
    4. 'calculate' → logprob: -4.148271083831787
    5. ' is' → logprob: -4.273271083831787
    6. ' find' → logprob: -4.398271083831787
    7. ' compute' → logprob: -4.523271083831787
    8. ' solve' → logprob: -4.523271083831787
    9. ' process' → logprob: -4.773271083831787
    10. ' factorial' → logprob: -4.773271083831787

Token 64: '_n' (ID: 2170)
  Prédit: '_prime'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '_prime' → logprob: -0.48719334602355957
    2. '_valid' → logprob: -1.8621933460235596
    3. '_in' → logprob: -2.7371933460235596
    4. '_' → logprob: -2.9871933460235596
    5. '_r' → logprob: -3.3621933460235596
    6. '_possible' → logprob: -3.8621933460235596
    7. '_pal' → logprob: -4.3621931076049805
    8. '_div' → logprob: -4.4871931076049805
    9. '_subset' → logprob: -5.2371931076049805
    10. '_sorted' → logprob: -5.4871931076049805

Token 65: '_less' (ID: 154196)
  Prédit: '_g'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_g' → logprob: -1.032160758972168
    2. '_valid' → logprob: -1.282160758972168
    3. '_less' → logprob: -2.282160758972168
    4. '_' → logprob: -2.532160758972168
    5. '_even' → logprob: -2.657160758972168
    6. '_div' → logprob: -3.282160758972168
    7. '_prime' → logprob: -4.032160758972168
    8. '_in' → logprob: -4.407160758972168
    9. '_r' → logprob: -5.157160758972168
    10. '_le' → logprob: -5.407160758972168

Token 66: '_than' (ID: 134758)
  Prédit: '_than'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_than' → logprob: -0.012043459340929985
    2. '_equal' → logprob: -4.887043476104736
    3. '_or' → logprob: -6.012043476104736
    4. '(' → logprob: -6.637043476104736
    5. '_' → logprob: -8.387042999267578
    6. 'than' → logprob: -8.512042999267578
    7. 'er' → logprob: -9.512042999267578
    8. '=' → logprob: -9.762042999267578
    9. '_THAN' → logprob: -10.637042999267578
    10. '(_' → logprob: -10.762042999267578

Token 67: '_' (ID: 62)
  Prédit: '_r'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_r' → logprob: -0.031878065317869186
    2. 'r' → logprob: -3.5318779945373535
    3. '(' → logprob: -6.9068779945373535
    4. 'equal' → logprob: -8.406878471374512
    5. '_' → logprob: -8.906878471374512
    6. '100' → logprob: -9.031878471374512
    7. '_equal' → logprob: -9.531878471374512
    8. '=' → logprob: -9.781878471374512
    9. '(r' → logprob: -9.906878471374512
    10. 'm' → logprob: -10.031878471374512

Token 68: '10' (ID: 702)
  Prédit: 'r'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'r' → logprob: -0.13093192875385284
    2. '_r' → logprob: -2.130931854248047
    3. 'm' → logprob: -6.005931854248047
    4. '100' → logprob: -7.880931854248047
    5. '_' → logprob: -8.130931854248047
    6. '_m' → logprob: -8.380931854248047
    7. 'equal' → logprob: -8.880931854248047
    8. '=' → logprob: -9.255931854248047
    9. 'or' → logprob: -9.505931854248047
    10. 'R' → logprob: -10.255931854248047

Token 69: '(n' (ID: 2406)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(' → logprob: -0.004576088394969702
    2. '_' → logprob: -5.754576206207275
    3. '(n' → logprob: -6.754576206207275
    4. '_(' → logprob: -10.254575729370117
    5. ' (' → logprob: -10.379575729370117
    6. '(user' → logprob: -10.629575729370117
    7. '(_)' → logprob: -10.629575729370117
    8. '(_' → logprob: -10.629575729370117
    9. '("("' → logprob: -10.879575729370117
    10. 's' → logprob: -11.004575729370117

Token 70: '):
' (ID: 1883)
  Prédit: '):'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '):' → logprob: -0.02208171784877777
    2. ')' → logprob: -3.8970816135406494
    3. ' ):' → logprob: -7.0220818519592285
    4. ':' → logprob: -8.02208137512207
    5. 'n' → logprob: -9.77208137512207
    6. ' )' → logprob: -10.02208137512207
    7. '0' → logprob: -10.14708137512207
    8. '=' → logprob: -10.39708137512207
    9. '):
' → logprob: -10.39708137512207
    10. ' ' → logprob: -10.89708137512207

Token 71: '   ' (ID: 271)
  Prédit: '(n'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(n' → logprob: -0.3116673529148102
    2. '(' → logprob: -1.4366673231124878
    3. '   ' → logprob: -3.9366674423217773
    4. 'n' → logprob: -4.936667442321777
    5. ' n' → logprob: -6.186667442321777
    6. ' (' → logprob: -7.186667442321777
    7. ':' → logprob: -8.186667442321777
    8. '    ' → logprob: -9.811667442321777
    9. '	n' → logprob: -10.061667442321777
    10. '(
' → logprob: -10.186667442321777

Token 72: ' return' (ID: 622)
  Prédit: ' n'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' n' → logprob: -0.6102323532104492
    2. 'n' → logprob: -1.1102323532104492
    3. ' return' → logprob: -2.235232353210449
    4. 'return' (adapté à ' return') → logprob: -3.985232353210449
    5. '   ' → logprob: -6.360232353210449
    6. '(n' → logprob: -13.11023235321045
    7. '	n' → logprob: -13.36023235321045
    8. '<n' → logprob: -13.36023235321045
    9. ' ' → logprob: -14.23523235321045
    10. '<' → logprob: -14.86023235321045

Token 73: ' n' (ID: 297)
  Prédit: ' n'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' n' → logprob: -0.014172090217471123
    2. 'n' → logprob: -4.264172077178955
    3. ' ' → logprob: -11.764172554016113
    4. ' ' → logprob: -14.764172554016113
    5. '	n' → logprob: -15.639172554016113
    6. '(n' → logprob: -16.014171600341797
    7. ' (' → logprob: -16.514171600341797
    8. '(' → logprob: -17.139171600341797
    9. '10' → logprob: -17.264171600341797
    10. '0' → logprob: -18.389171600341797

Token 74: ' <' (ID: 464)
  Prédit: ' <'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' <' → logprob: -0.11284637451171875
    2. '<' → logprob: -2.2378463745117188
    3. ' <=' → logprob: -10.862846374511719
    4. ' ' → logprob: -13.737846374511719
    5. '<=' → logprob: -13.862846374511719
    6. ' >' → logprob: -13.987846374511719
    7. '>' → logprob: -15.237846374511719
    8. '   ' → logprob: -15.362846374511719
    9. ' ' → logprob: -15.362846374511719
    10. ' >=' → logprob: -15.487846374511719

Token 75: ' ' (ID: 220)
  Prédit: '10'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '10' → logprob: -0.28116142749786377
    2. ' ' → logprob: -1.4061614274978638
    3. '1' → logprob: -12.281161308288574
    4. ' ' → logprob: -13.031161308288574
    5. '_' → logprob: -13.781161308288574
    6. '=' → logprob: -13.906161308288574
    7. '11' → logprob: -14.281161308288574
    8. '```' → logprob: -14.781161308288574
    9. '100' → logprob: -15.031161308288574
    10. '0' → logprob: -15.406161308288574

Token 76: '10' (ID: 702)
  Prédit: '10'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '10' → logprob: -5.796184723294573e-06
    2. ' ' → logprob: -12.125005722045898
    3. '1' → logprob: -15.875005722045898
    4. '100' → logprob: -17.1250057220459
    5. '```' → logprob: -17.7500057220459
    6. '11' → logprob: -18.1250057220459
    7. '   ' → logprob: -18.2500057220459
    8. '101' → logprob: -18.5000057220459
    9. '=' → logprob: -18.8750057220459
    10. '0' → logprob: -19.1250057220459

Token 77: '

' (ID: 279)
  Prédit: 'def'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'def' → logprob: -0.835796594619751
    2. '
' → logprob: -0.960796594619751
    3. '<|end|>' → logprob: -2.085796594619751
    4. '

' → logprob: -3.335796594619751
    5. '\n' → logprob: -4.085796356201172
    6. '\' → logprob: -5.335796356201172
    7. '```' → logprob: -7.460796356201172
    8. '<|end|>' → logprob: -7.460796356201172
    9. 'newline' → logprob: -7.585796356201172
    10. '' → logprob: -8.460796356201172

Token 78: 'def' (ID: 1314)
  Prédit: 'def'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'def' → logprob: -0.0012844024458900094
    2. '<|end|>' → logprob: -7.251284599304199
    3. '

' → logprob: -8.3762845993042
    4. '
' → logprob: -8.6262845993042
    5. '```' → logprob: -9.2512845993042
    6. '\' → logprob: -10.6262845993042
    7. '<|end|>' → logprob: -11.3762845993042
    8. '\n' → logprob: -11.5012845993042
    9. '#' → logprob: -12.3762845993042
    10. ' def' → logprob: -12.3762845993042

Token 79: ' compute' (ID: 23864)
  Prédit: ' is'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' is' → logprob: -0.08295000344514847
    2. ' main' → logprob: -3.5829501152038574
    3. ' calculate' → logprob: -4.207950115203857
    4. ' def' → logprob: -4.332950115203857
    5. ' check' → logprob: -4.707950115203857
    6. 'r' → logprob: -5.707950115203857
    7. '_' → logprob: -6.332950115203857
    8. ' validate' → logprob: -6.332950115203857
    9. 'def' → logprob: -6.332950115203857
    10. ' r' → logprob: -6.582950115203857

Token 80: '_x' (ID: 7054)
  Prédit: '_result'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '_result' → logprob: -0.7996623516082764
    2. '_sum' → logprob: -1.5496623516082764
    3. '_factor' → logprob: -2.2996623516082764
    4. '_comb' → logprob: -2.9246623516082764
    5. '_' → logprob: -3.4246623516082764
    6. '_r' → logprob: -3.6746623516082764
    7. '_value' → logprob: -3.9246623516082764
    8. '_com' → logprob: -4.1746625900268555
    9. '_max' → logprob: -4.7996625900268555
    10. '_output' → logprob: -4.7996625900268555

Token 81: '(n' (ID: 2406)
  Prédit: '(n'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(n' → logprob: -0.12449409067630768
    2. 'or' → logprob: -3.4994940757751465
    3. '():' → logprob: -4.2494940757751465
    4. '(' → logprob: -4.3744940757751465
    5. '(r' → logprob: -4.4994940757751465
    6. 'OR' → logprob: -4.7494940757751465
    7. '_r' → logprob: -4.9994940757751465
    8. '_values' → logprob: -5.2494940757751465
    9. '(values' → logprob: -5.3744940757751465
    10. '_' → logprob: -5.3744940757751465

Token 82: '):
' (ID: 1883)
  Prédit: ','
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ',' → logprob: -0.16797521710395813
    2. '):' → logprob: -1.9179751873016357
    3. ',r' → logprob: -5.042975425720215
    4. ')' → logprob: -7.792975425720215
    5. ',n' → logprob: -9.167975425720215
    6. '):
' → logprob: -9.167975425720215
    7. '+' → logprob: -9.167975425720215
    8. ' ,' → logprob: -9.417975425720215
    9. ' ):' → logprob: -9.917975425720215
    10. '-' → logprob: -9.917975425720215

Token 83: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.332520455121994
    2. 'return' → logprob: -1.7075204849243164
    3. ' return' → logprob: -2.4575204849243164
    4. 'n' → logprob: -4.707520484924316
    5. ' n' → logprob: -6.332520484924316
    6. '2' → logprob: -6.707520484924316
    7. '1' → logprob: -7.332520484924316
    8. 'x' → logprob: -7.457520484924316
    9. '0' → logprob: -7.707520484924316
    10. ' ' → logprob: -8.082520484924316

Token 84: ' return' (ID: 622)
  Prédit: 'return'
  Correct (stricte): False
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'return' (adapté à ' return') → logprob: -0.8666959404945374
    2. ' return' → logprob: -0.9916959404945374
    3. '   ' → logprob: -1.7416958808898926
    4. 'x' → logprob: -5.366695880889893
    5. ' x' → logprob: -5.366695880889893
    6. 'n' → logprob: -5.491695880889893
    7. ' n' → logprob: -5.616695880889893
    8. 'result' → logprob: -5.866695880889893
    9. '1' → logprob: -6.116695880889893
    10. ' result' → logprob: -6.116695880889893

Token 85: ' ' (ID: 220)
  Prédit: 'n'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'n' → logprob: -0.47310125827789307
    2. ' n' → logprob: -1.723101258277893
    3. '2' → logprob: -2.3481011390686035
    4. ' ' → logprob: -3.9731011390686035
    5. '(' → logprob: -4.2231011390686035
    6. '(n' → logprob: -4.3481011390686035
    7. '1' → logprob: -4.5981011390686035
    8. ' (' → logprob: -4.7231011390686035
    9. '3' → logprob: -4.8481011390686035
    10. '10' → logprob: -5.2231011390686035

Token 86: '100' (ID: 1353)
  Prédit: 'n'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'n' → logprob: -0.2609243392944336
    2. '2' → logprob: -1.8859243392944336
    3. '1' → logprob: -4.260924339294434
    4. '(' → logprob: -4.260924339294434
    5. '(n' → logprob: -4.510924339294434
    6. '3' → logprob: -4.760924339294434
    7. '10' → logprob: -5.010924339294434
    8. 'sum' → logprob: -5.135924339294434
    9. 'int' → logprob: -6.260924339294434
    10. '[' → logprob: -6.260924339294434

Token 87: ' *' (ID: 425)
  Prédit: ''
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False

Token 88: ' (' (ID: 350)
  Prédit: 'n'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'n' → logprob: -0.0030072962399572134
    2. ' n' → logprob: -5.878007411956787
    3. '(' → logprob: -8.878006935119629
    4. '(n' → logprob: -10.503006935119629
    5. '2' → logprob: -10.878006935119629
    6. '0' → logprob: -12.003006935119629
    7. ' (' → logprob: -12.628006935119629
    8. '10' → logprob: -14.003006935119629
    9. '9' → logprob: -14.003006935119629
    10. '1' → logprob: -14.003006935119629

Token 89: '10' (ID: 702)
  Prédit: 'n'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'n' → logprob: -0.1400061547756195
    2. '10' → logprob: -2.6400060653686523
    3. '2' → logprob: -3.8900060653686523
    4. '(' → logprob: -4.390006065368652
    5. '1' → logprob: -4.640006065368652
    6. '9' → logprob: -5.390006065368652
    7. '3' → logprob: -6.015006065368652
    8. '11' → logprob: -6.140006065368652
    9. '(n' → logprob: -6.765006065368652
    10. '100' → logprob: -7.015006065368652

Token 90: ' -' (ID: 533)
  Prédit: '-'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '-' → logprob: -0.9707183837890625
    2. '**' → logprob: -1.0957183837890625
    3. ' -' → logprob: -1.7207183837890625
    4. '-n' → logprob: -2.3457183837890625
    5. ' **' → logprob: -4.4707183837890625
    6. '*' → logprob: -7.8457183837890625
    7. '0' → logprob: -9.345718383789062
    8. ' ' → logprob: -9.595718383789062
    9. '+' → logprob: -9.970718383789062
    10. 'n' → logprob: -10.095718383789062

Token 91: ' n' (ID: 297)
  Prédit: 'n'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'n' → logprob: -0.4740915596485138
    2. ' n' → logprob: -0.9740915298461914
    3. '	n' → logprob: -12.099091529846191
    4. ' ' → logprob: -12.474091529846191
    5. '(n' → logprob: -13.474091529846191
    6. ')n' → logprob: -13.724091529846191
    7. ')' → logprob: -13.974091529846191
    8. ' ' → logprob: -14.349091529846191
    9. '(' → logprob: -14.724091529846191
    10. ' (' → logprob: -15.224091529846191

Token 92: ')

' (ID: 1029)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ')' → logprob: -2.856408536899835e-05
    2. ' )' → logprob: -10.750028610229492
    3. '))' → logprob: -12.750028610229492
    4. ')
' → logprob: -14.250028610229492
    5. ')`' → logprob: -14.250028610229492
    6. '*' → logprob: -14.375028610229492
    7. ')n' → logprob: -14.375028610229492
    8. ')))' → logprob: -15.500028610229492
    9. '-' → logprob: -15.500028610229492
    10. '}' → logprob: -15.875028610229492

Token 93: 'def' (ID: 1314)
  Prédit: 'def'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'def' → logprob: -0.11603698879480362
    2. '
' → logprob: -2.741036891937256
    3. '<|end|>' → logprob: -3.991036891937256
    4. '\n' → logprob: -4.241036891937256
    5. '_' → logprob: -5.116036891937256
    6. '

' → logprob: -6.366036891937256
    7. '```' → logprob: -6.616036891937256
    8. '\' → logprob: -6.991036891937256
    9. ' def' → logprob: -7.241036891937256
    10. '*' → logprob: -8.491037368774414

Token 94: ' sum' (ID: 4215)
  Prédit: ' compute'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' compute' → logprob: -0.024089671671390533
    2. '_' → logprob: -4.774089813232422
    3. ' main' → logprob: -4.774089813232422
    4. 'compute' → logprob: -5.399089813232422
    5. ' calculate' → logprob: -7.274089813232422
    6. '_compute' → logprob: -8.024089813232422
    7. ' get' → logprob: -8.274089813232422
    8. ' is' → logprob: -8.274089813232422
    9. ' def' → logprob: -8.274089813232422
    10. ' ' → logprob: -8.524089813232422

Token 95: '_x' (ID: 7054)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(' → logprob: -0.7667011618614197
    2. '_values' → logprob: -1.1417012214660645
    3. '_' → logprob: -1.8917012214660645
    4. '_x' → logprob: -3.2667012214660645
    5. '_r' → logprob: -5.7667012214660645
    6. '_numbers' → logprob: -5.7667012214660645
    7. '(_' → logprob: -6.0167012214660645
    8. '(values' → logprob: -6.3917012214660645
    9. '_(' → logprob: -6.5167012214660645
    10. '_list' → logprob: -6.6417012214660645

Token 96: '_and' (ID: 18645)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '(' → logprob: -0.8227900862693787
    2. '(x' → logprob: -1.6977901458740234
    3. '(n' → logprob: -1.8227901458740234
    4. '(s' → logprob: -2.8227901458740234
    5. '_values' → logprob: -2.9477901458740234
    6. 's' → logprob: -3.1977901458740234
    7. '_x' → logprob: -4.072790145874023
    8. '(values' → logprob: -4.947790145874023
    9. '_(' → logprob: -5.072790145874023
    10. '(_' → logprob: -5.197790145874023

Token 97: '_r' (ID: 3442)
  Prédit: 'r'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'r' → logprob: -0.024089789018034935
    2. 'compute' → logprob: -4.774089813232422
    3. '_r' → logprob: -5.399089813232422
    4. 'y' → logprob: -5.524089813232422
    5. '100' → logprob: -5.649089813232422
    6. 'n' → logprob: -7.024089813232422
    7. 'get' → logprob: -7.274089813232422
    8. 'x' → logprob: -7.399089813232422
    9. '10' → logprob: -8.524089813232422
    10. '_y' → logprob: -9.649089813232422

Token 98: '(x' (ID: 4061)
  Prédit: '(x'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(x' → logprob: -0.0031325630843639374
    2. '(' → logprob: -6.003132343292236
    3. '(r' → logprob: -7.878132343292236
    4. '(n' → logprob: -8.378132820129395
    5. '(s' → logprob: -10.628132820129395
    6. ' (' → logprob: -11.003132820129395
    7. 'def' → logprob: -13.003132820129395
    8. '(
' → logprob: -13.503132820129395
    9. '(a' → logprob: -13.628132820129395
    10. ':' → logprob: -14.878132820129395

Token 99: ',' (ID: 11)
  Prédit: ','
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ',' → logprob: -0.0008735861047171056
    2. ',r' → logprob: -7.125873565673828
    3. ' ,' → logprob: -9.750873565673828
    4. ')' → logprob: -12.250873565673828
    5. ',
' → logprob: -13.125873565673828
    6. '):' → logprob: -13.750873565673828
    7. 'r' → logprob: -14.500873565673828
    8. 's' → logprob: -14.875873565673828
    9. '),' → logprob: -14.875873565673828
    10. ',n' → logprob: -15.000873565673828

Token 100: ' r' (ID: 428)
  Prédit: 'r'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'r' → logprob: -0.38687655329704285
    2. ' r' → logprob: -1.1368765830993652
    3. ')' → logprob: -13.011876106262207
    4. '_r' → logprob: -14.011876106262207
    5. ' ' → logprob: -14.136876106262207
    6. '   ' → logprob: -15.136876106262207
    7. '	r' → logprob: -15.136876106262207
    8. '):
' → logprob: -15.511876106262207
    9. ' )' → logprob: -15.761876106262207
    10. ',' → logprob: -15.886876106262207

Token 101: '):
' (ID: 1883)
  Prédit: '):'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '):' → logprob: -0.01656036451458931
    2. ')' → logprob: -4.1415605545043945
    3. '):
' → logprob: -7.6415605545043945
    4. ' ):' → logprob: -10.266560554504395
    5. '):
' → logprob: -12.766560554504395
    6. ',' → logprob: -13.141560554504395
    7. '):

' → logprob: -13.766560554504395
    8. ':' → logprob: -13.891560554504395
    9. ' )' → logprob: -13.891560554504395
    10. '),' → logprob: -14.766560554504395

Token 102: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.3351137042045593
    2. ' return' → logprob: -1.335113763809204
    3. 'return' → logprob: -3.835113763809204
    4. '	return' → logprob: -11.710113525390625
    5. '    ' → logprob: -13.210113525390625
    6. '```' → logprob: -13.835113525390625
    7. '  ' → logprob: -13.960113525390625
    8. 'eturn' → logprob: -14.085113525390625
    9. ':return' → logprob: -14.210113525390625
    10. '   ' → logprob: -14.835113525390625

Token 103: ' return' (ID: 622)
  Prédit: ' return'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' return' → logprob: -0.6936081051826477
    2. 'return' (adapté à ' return') → logprob: -0.6936081051826477
    3. '   ' → logprob: -7.693608283996582
    4. '	return' → logprob: -12.818608283996582
    5. ' ' → logprob: -14.193608283996582
    6. '
' → logprob: -14.318608283996582
    7. 'eturn' → logprob: -14.568608283996582
    8. ':return' → logprob: -16.068607330322266
    9. '7' → logprob: -16.193607330322266
    10. '```' → logprob: -16.443607330322266

Token 104: ' x' (ID: 1215)
  Prédit: ' x'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' x' → logprob: -0.47408273816108704
    2. 'x' → logprob: -0.9740827083587646
    3. '(x' → logprob: -13.349082946777344
    4. ' ' → logprob: -13.849082946777344
    5. ' (' → logprob: -13.849082946777344
    6. '   ' → logprob: -14.224082946777344
    7. '	x' → logprob: -14.224082946777344
    8. '(' → logprob: -15.099082946777344
    9. ' ' → logprob: -15.474082946777344
    10. '0' → logprob: -16.474082946777344

Token 105: ' +' (ID: 659)
  Prédit: '+'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '+' → logprob: -0.47414544224739075
    2. ' +' → logprob: -0.9741454124450684
    3. '+r' → logprob: -9.724145889282227
    4. '+
' → logprob: -12.349145889282227
    5. ' +
' → logprob: -12.724145889282227
    6. ' ' → logprob: -14.599145889282227
    7. ' plus' → logprob: -15.349145889282227
    8. ' ' → logprob: -15.474145889282227
    9. '*' → logprob: -16.474145889282227
    10. '-' → logprob: -16.724145889282227

Token 106: ' r' (ID: 428)
  Prédit: ' r'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' r' → logprob: -0.6326062679290771
    2. 'r' → logprob: -0.7576062679290771
    3. ' ' → logprob: -12.757606506347656
    4. '_r' → logprob: -13.382606506347656
    5. ' ' → logprob: -13.632606506347656
    6. '	r' → logprob: -14.132606506347656
    7. '1' → logprob: -15.632606506347656
    8. '   ' → logprob: -15.882606506347656
    9. '(r' → logprob: -16.257606506347656
    10. '```' → logprob: -17.007606506347656

Token 107: '

' (ID: 279)
  Prédit: 'def'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'def' → logprob: -0.08296778053045273
    2. '<|end|>' → logprob: -2.707967758178711
    3. '
' → logprob: -5.832967758178711
    4. '\n' → logprob: -5.957967758178711
    5. '```' → logprob: -6.332967758178711
    6. '#' → logprob: -6.332967758178711
    7. '\' → logprob: -6.957967758178711
    8. 'n' → logprob: -7.332967758178711
    9. '<|end|>' → logprob: -7.582967758178711
    10. '()' → logprob: -7.832967758178711

Token 108: 'def' (ID: 1314)
  Prédit: 'def'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'def' → logprob: -0.0027528072241693735
    2. '
' → logprob: -6.877752780914307
    3. 'n' → logprob: -7.252752780914307
    4. '\n' → logprob: -8.377753257751465
    5. 'print' → logprob: -8.877753257751465
    6. '```' → logprob: -9.002753257751465
    7. '#' → logprob: -9.377753257751465
    8. '()' → logprob: -9.377753257751465
    9. '<|end|>' → logprob: -9.752753257751465
    10. '\' → logprob: -9.752753257751465

Token 109: ' print' (ID: 2123)
  Prédit: ' main'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' main' → logprob: -0.18119309842586517
    2. 'main' → logprob: -1.8061931133270264
    3. ' calculate' → logprob: -8.056193351745605
    4. ' process' → logprob: -8.181193351745605
    5. 'calculate' → logprob: -8.181193351745605
    6. 'process' → logprob: -8.556193351745605
    7. 'def' → logprob: -8.931193351745605
    8. ' compute' → logprob: -9.806193351745605
    9. 'compute' → logprob: -10.056193351745605
    10. ' run' → logprob: -10.681193351745605

Token 110: '_result' (ID: 11623)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(' → logprob: -0.03505520150065422
    2. '_' → logprob: -3.785055160522461
    3. '_result' → logprob: -5.660055160522461
    4. '_sum' → logprob: -5.785055160522461
    5. '(sum' → logprob: -6.410055160522461
    6. ' (' → logprob: -6.785055160522461
    7. '()' → logprob: -7.035055160522461
    8. 'result' → logprob: -8.285055160522461
    9. ' ' → logprob: -8.285055160522461
    10. '_output' → logprob: -8.410055160522461

Token 111: '(result' (ID: 8111)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(' → logprob: -0.056733228266239166
    2. '(result' → logprob: -2.9317331314086914
    3. '()' → logprob: -6.556733131408691
    4. '():' → logprob: -8.806733131408691
    5. ' (' → logprob: -9.431733131408691
    6. '(results' → logprob: -9.681733131408691
    7. '(output' → logprob: -10.681733131408691
    8. '(x' → logprob: -10.681733131408691
    9. '(value' → logprob: -11.306733131408691
    10. '(data' → logprob: -11.431733131408691

Token 112: '):
' (ID: 1883)
  Prédit: '):'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '):' → logprob: -0.006961400154978037
    2. ')' → logprob: -5.131961345672607
    3. '):
' → logprob: -6.881961345672607
    4. ' ):' → logprob: -13.131961822509766
    5. ':' → logprob: -13.506961822509766
    6. '   ' → logprob: -13.631961822509766
    7. '):
' → logprob: -14.131961822509766
    8. ' ' → logprob: -15.631961822509766
    9. '():' → logprob: -15.631961822509766
    10. ')：' → logprob: -16.256961822509766

Token 113: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.005250125657767057
    2. ' print' → logprob: -5.255249977111816
    3. 'print' → logprob: -11.130249977111816
    4. '    
' → logprob: -14.255249977111816
    5. '   ' → logprob: -14.255249977111816
    6. '```' → logprob: -15.630249977111816
    7. '    ' → logprob: -15.755249977111816
    8. '	print' → logprob: -16.255250930786133
    9. '       ' → logprob: -17.380250930786133
    10. '   ' → logprob: -17.880250930786133

Token 114: ' print' (ID: 2123)
  Prédit: ' print'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' print' → logprob: -0.47431397438049316
    2. 'print' (adapté à ' print') → logprob: -0.9743139743804932
    3. '   ' → logprob: -8.349313735961914
    4. '```' → logprob: -15.474313735961914
    5. '    ' → logprob: -16.349313735961914
    6. 'pr' → logprob: -16.474313735961914
    7. '	print' → logprob: -16.974313735961914
    8. ' ' → logprob: -18.099313735961914
    9. ' prin' → logprob: -18.849313735961914
    10. '.print' → logprob: -18.849313735961914

Token 115: '(result' (ID: 8111)
  Prédit: '(result'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(result' → logprob: -0.0789230540394783
    2. '(' → logprob: -2.578922986984253
    3. '()' → logprob: -10.953923225402832
    4. 'result' → logprob: -11.328923225402832
    5. ' (' → logprob: -13.078923225402832
    6. '(f' → logprob: -14.078923225402832
    7. '(
' → logprob: -15.328923225402832
    8. '(res' → logprob: -15.578923225402832
    9. '(results' → logprob: -16.203922271728516
    10. '(resultado' → logprob: -16.453922271728516

Token 116: ')

' (ID: 1029)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ')' → logprob: -3.128163257315464e-07
    2. ')
' → logprob: -16.375
    3. ' )' → logprob: -16.375
    4. '()' → logprob: -18.625
    5. '))' → logprob: -18.75
    6. ')`' → logprob: -18.875
    7. '')' → logprob: -20.25
    8. '),' → logprob: -20.5
    9. '())' → logprob: -20.5
    10. ')}' → logprob: -20.75

Token 117: 'def' (ID: 1314)
  Prédit: 'def'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'def' → logprob: -0.000488110730657354
    2. 'n' → logprob: -8.62548828125
    3. '#' → logprob: -9.50048828125
    4. '<|end|>' → logprob: -9.62548828125
    5. '\' → logprob: -10.12548828125
    6. '\n' → logprob: -10.37548828125
    7. '```' → logprob: -10.62548828125
    8. '
' → logprob: -11.12548828125
    9. 'ndef' → logprob: -11.37548828125
    10. 'd' → logprob: -11.50048828125

Token 118: ' main' (ID: 2758)
  Prédit: ' main'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' main' → logprob: -0.026441827416419983
    2. 'main' → logprob: -3.651441812515259
    3. ' process' → logprob: -9.15144157409668
    4. 'process' → logprob: -11.02644157409668
    5. ' run' → logprob: -11.27644157409668
    6. ' calculate' → logprob: -13.15144157409668
    7. ' solve' → logprob: -13.52644157409668
    8. 'run' → logprob: -13.77644157409668
    9. 'calculate' → logprob: -14.40144157409668
    10. ' solution' → logprob: -14.90144157409668

Token 119: '():
' (ID: 8595)
  Prédit: '():'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '():' → logprob: -1.2471589798224159e-05
    2. ' ():' → logprob: -12.375012397766113
    3. '(' → logprob: -12.625012397766113
    4. '()' → logprob: -12.875012397766113
    5. '():
' → logprob: -13.375012397766113
    6. '_' → logprob: -14.125012397766113
    7. '():
' → logprob: -18.12501335144043
    8. '(:' → logprob: -18.12501335144043
    9. '()>' → logprob: -18.25001335144043
    10. ':' → logprob: -18.25001335144043

Token 120: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.03444220870733261
    2. ' user' → logprob: -3.909442186355591
    3. 'user' → logprob: -4.28444242477417
    4. '   ' → logprob: -11.659441947937012
    5. '	user' → logprob: -11.784441947937012
    6. '    
' → logprob: -12.659441947937012
    7. '    ' → logprob: -14.659441947937012
    8. 'input' → logprob: -14.909441947937012
    9. 'User' → logprob: -14.909441947937012
    10. '_user' → logprob: -14.909441947937012

Token 121: ' user' (ID: 1825)
  Prédit: 'user'
  Correct (stricte): False
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'user' (adapté à ' user') → logprob: -0.25223007798194885
    2. ' user' → logprob: -1.5022300481796265
    3. '   ' → logprob: -8.127229690551758
    4. '	user' → logprob: -13.127229690551758
    5. ' ' → logprob: -14.002229690551758
    6. '    
' → logprob: -14.252229690551758
    7. 'User' → logprob: -15.502229690551758
    8. 'raw' → logprob: -15.502229690551758
    9. 'while' → logprob: -15.502229690551758
    10. 'input' → logprob: -15.627229690551758

Token 122: '_input' (ID: 12507)
  Prédit: '_input'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_input' → logprob: -0.07898154854774475
    2. '_' → logprob: -2.578981637954712
    3. '_user' → logprob: -10.078981399536133
    4. ' _' → logprob: -10.203981399536133
    5. '_inputs' → logprob: -12.453981399536133
    6. '_in' → logprob: -12.578981399536133
    7. '_Input' → logprob: -13.453981399536133
    8. '_output' → logprob: -13.828981399536133
    9. '_data' → logprob: -14.578981399536133
    10. '_value' → logprob: -14.578981399536133

Token 123: ' =' (ID: 314)
  Prédit: ' ='
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' =' → logprob: -0.01117737963795662
    2. '=' → logprob: -4.5111775398254395
    3. '_' → logprob: -9.386177062988281
    4. ' ' → logprob: -10.136177062988281
    5. '(' → logprob: -13.136177062988281
    6. '()' → logprob: -13.511177062988281
    7. ')' → logprob: -13.636177062988281
    8. ' =
' → logprob: -15.136177062988281
    9. ' ' → logprob: -15.511177062988281
    10. ' =)' → logprob: -15.761177062988281

Token 124: ' get' (ID: 717)
  Prédit: 'get'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'get' → logprob: -0.6931512355804443
    2. ' get' → logprob: -0.6931512355804443
    3. '(get' → logprob: -13.193151473999023
    4. '	get' → logprob: -13.568151473999023
    5. '=get' → logprob: -15.068151473999023
    6. ')get' → logprob: -15.818151473999023
    7. ' input' → logprob: -15.943151473999023
    8. '_get' → logprob: -16.068151473999023
    9. 'input' → logprob: -16.068151473999023
    10. '.get' → logprob: -16.318151473999023

Token 125: '_input' (ID: 12507)
  Prédit: '_input'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_input' → logprob: -1.9743012671824545e-05
    2. '_' → logprob: -10.875020027160645
    3. ' _' → logprob: -15.875020027160645
    4. '_user' → logprob: -16.000019073486328
    5. '_Input' → logprob: -16.000019073486328
    6. '_output' → logprob: -16.125019073486328
    7. '_in' → logprob: -16.125019073486328
    8. '_inputs' → logprob: -16.500019073486328
    9. '_INPUT' → logprob: -17.875019073486328
    10. '_value' → logprob: -18.375019073486328

Token 126: '()
' (ID: 1234)
  Prédit: '()'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '()' → logprob: -4.179569077678025e-05
    2. '(' → logprob: -10.375041961669922
    3. '()
' → logprob: -11.875041961669922
    4. '()

' → logprob: -13.625041961669922
    5. ' ()' → logprob: -14.125041961669922
    6. '()(' → logprob: -15.125041961669922
    7. '().' → logprob: -15.375041961669922
    8. '()`' → logprob: -15.625041961669922
    9. '(),' → logprob: -16.000041961669922
    10. '()"' → logprob: -16.000041961669922

Token 127: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.06196039542555809
    2. ' values' → logprob: -3.311960458755493
    3. 'values' → logprob: -3.936960458755493
    4. 'tokens' → logprob: -6.561960220336914
    5. ' tokens' → logprob: -6.811960220336914
    6. ' parts' → logprob: -7.186960220336914
    7. ' splitted' → logprob: -8.561960220336914
    8. '    
' → logprob: -8.686960220336914
    9. ' lst' → logprob: -9.186960220336914
    10. 'lst' → logprob: -9.561960220336914

Token 128: ' splitted' (ID: 183889)
  Prédit: 'values'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'values' → logprob: -0.38099855184555054
    2. ' values' → logprob: -1.2559986114501953
    3. ' splitted' → logprob: -4.755998611450195
    4. 'split' → logprob: -5.130998611450195
    5. 'tokens' → logprob: -5.505998611450195
    6. 'words' → logprob: -5.880998611450195
    7. ' split' → logprob: -5.880998611450195
    8. '   ' → logprob: -6.380998611450195
    9. ' tokens' → logprob: -6.505998611450195
    10. ' parts' → logprob: -6.880998611450195

Token 129: ' =' (ID: 314)
  Prédit: '_input'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_input' → logprob: -0.01696772314608097
    2. '_user' → logprob: -4.5169677734375
    3. '_' → logprob: -5.1419677734375
    4. '_inputs' → logprob: -11.3919677734375
    5. '_values' → logprob: -11.8919677734375
    6. '_users' → logprob: -12.1419677734375
    7. '_output' → logprob: -12.5169677734375
    8. ' =' → logprob: -12.5169677734375
    9. '_data' → logprob: -12.5169677734375
    10. '=' → logprob: -12.7669677734375

Token 130: ' split' (ID: 12648)
  Prédit: ' split'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' split' → logprob: -0.029751643538475037
    2. 'split' → logprob: -3.5297515392303467
    3. '(split' → logprob: -13.779751777648926
    4. ' ' → logprob: -16.27975082397461
    5. 'spl' → logprob: -17.15475082397461
    6. 'user' → logprob: -17.65475082397461
    7. ' user' → logprob: -17.77975082397461
    8. ' splits' → logprob: -18.52975082397461
    9. '.split' → logprob: -18.65475082397461
    10. '_split' → logprob: -18.77975082397461

Token 131: '_input' (ID: 12507)
  Prédit: '_input'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_input' → logprob: -0.0009832700015977025
    2. '_user' → logprob: -7.000983238220215
    3. '_' → logprob: -9.625983238220215
    4. '(user' → logprob: -12.500983238220215
    5. '_inputs' → logprob: -15.000983238220215
    6. 'user' → logprob: -15.125983238220215
    7. '_Input' → logprob: -15.125983238220215
    8. '_s' → logprob: -15.375983238220215
    9. '(' → logprob: -15.375983238220215
    10. '_output' → logprob: -15.625983238220215

Token 132: '(user' (ID: 7195)
  Prédit: '(user'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(user' → logprob: -4.0484450437361374e-05
    2. '(' → logprob: -10.250040054321289
    3. '(s' → logprob: -12.250040054321289
    4. ' (' → logprob: -16.12504005432129
    5. 'user' → logprob: -17.00004005432129
    6. '(users' → logprob: -17.00004005432129
    7. '(input' → logprob: -17.87504005432129
    8. '=user' → logprob: -18.37504005432129
    9. '(us' → logprob: -18.37504005432129
    10. '(u' → logprob: -18.50004005432129

Token 133: '_input' (ID: 12507)
  Prédit: '_input'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_input' → logprob: -0.259042888879776
    2. 'put' → logprob: -1.5090428590774536
    3. '_user' → logprob: -5.884042739868164
    4. 'input' → logprob: -6.759042739868164
    5. 'user' → logprob: -7.134042739868164
    6. '_put' → logprob: -7.259042739868164
    7. '_' → logprob: -7.259042739868164
    8. 'ut' → logprob: -8.009042739868164
    9. ')' → logprob: -8.259042739868164
    10. '(user' → logprob: -9.509042739868164

Token 134: ')
' (ID: 446)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')' → logprob: -0.00017982252757064998
    2. '(user' → logprob: -8.8751802444458
    3. ')
' → logprob: -11.1251802444458
    4. '   ' → logprob: -11.5001802444458
    5. 'user' → logprob: -11.8751802444458
    6. ' )' → logprob: -12.6251802444458
    7. '(' → logprob: -13.5001802444458
    8. ' ' → logprob: -13.6251802444458
    9. '))' → logprob: -14.6251802444458
    10. ',' → logprob: -14.8751802444458

Token 135: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.04850004240870476
    2. 'values' → logprob: -3.7985000610351562
    3. '
' → logprob: -5.048500061035156
    4. '    
' → logprob: -5.173500061035156
    5. ' values' → logprob: -5.673500061035156
    6. '<|end|>' → logprob: -5.673500061035156
    7. '	values' → logprob: -6.673500061035156
    8. 'n' → logprob: -6.923500061035156
    9. ' ' → logprob: -7.173500061035156
    10. 'lst' → logprob: -7.173500061035156

Token 136: ' numbers' (ID: 8663)
  Prédit: 'values'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'values' → logprob: -0.5825120210647583
    2. ' values' → logprob: -1.4575120210647583
    3. 'int' → logprob: -2.4575119018554688
    4. 'ints' → logprob: -2.5825119018554688
    5. ' numbers' → logprob: -4.082511901855469
    6. 'numbers' (adapté à ' numbers') → logprob: -4.707511901855469
    7. ' int' → logprob: -4.957511901855469
    8. ' ints' → logprob: -5.207511901855469
    9. 'nums' → logprob: -5.832511901855469
    10. '   ' → logprob: -6.082511901855469

Token 137: ' =' (ID: 314)
  Prédit: ' ='
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' =' → logprob: -0.006743081379681826
    2. '=' → logprob: -5.00674295425415
    3. '_' → logprob: -10.506743431091309
    4. '	' → logprob: -16.256742477416992
    5. ' ' → logprob: -16.381742477416992
    6. 's' → logprob: -16.881742477416992
    7. '   ' → logprob: -17.006742477416992
    8. ')' → logprob: -17.256742477416992
    9. ' ' → logprob: -17.381742477416992
    10. '_=' → logprob: -17.506742477416992

Token 138: ' str' (ID: 989)
  Prédit: ' str'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' str' → logprob: -0.007607816252857447
    2. 'str' → logprob: -4.882607936859131
    3. '	str' → logprob: -14.007607460021973
    4. ' ' → logprob: -14.882607460021973
    5. ' ' → logprob: -15.257607460021973
    6. '_str' → logprob: -15.882607460021973
    7. ' strs' → logprob: -16.38260841369629
    8. '(str' → logprob: -17.00760841369629
    9. '[str' → logprob: -17.00760841369629
    10. 's' → logprob: -17.75760841369629

Token 139: '_list' (ID: 4162)
  Prédit: '_list'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_list' → logprob: -1.2352385965641588e-05
    2. '_' → logprob: -11.750012397766113
    3. '_lst' → logprob: -12.875012397766113
    4. '_l' → logprob: -13.875012397766113
    5. '_lists' → logprob: -14.500012397766113
    6. '_li' → logprob: -15.375012397766113
    7. ' _' → logprob: -16.500011444091797
    8. '_str' → logprob: -16.875011444091797
    9. '_ls' → logprob: -17.875011444091797
    10. '_to' → logprob: -18.375011444091797

Token 140: '_to' (ID: 5089)
  Prédit: '_to'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_to' → logprob: -1.2664456789934775e-06
    2. '_t' → logprob: -13.875000953674316
    3. '_' → logprob: -15.750000953674316
    4. ' _' → logprob: -17.250001907348633
    5. '__' → logprob: -17.750001907348633
    6. 'to' → logprob: -18.500001907348633
    7. '##_' → logprob: -18.625001907348633
    8. ''_' → logprob: -19.250001907348633
    9. '```' → logprob: -19.250001907348633
    10. 'To' → logprob: -19.750001907348633

Token 141: '_int' (ID: 12285)
  Prédit: '_int'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_int' → logprob: -0.0015036711702123284
    2. 'int' → logprob: -6.5015034675598145
    3. 'nt' → logprob: -14.251503944396973
    4. '_in' → logprob: -15.501503944396973
    5. ' int' → logprob: -15.626503944396973
    6. '_' → logprob: -16.501502990722656
    7. '<int' → logprob: -16.626502990722656
    8. 't' → logprob: -17.001502990722656
    9. '_list' → logprob: -17.251502990722656
    10. '[int' → logprob: -17.626502990722656

Token 142: '(s' (ID: 1858)
  Prédit: '(s'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(s' → logprob: -0.006721059791743755
    2. '(' → logprob: -5.006721019744873
    3. '(n' → logprob: -13.131721496582031
    4. ' (' → logprob: -13.131721496582031
    5. '(
' → logprob: -14.756721496582031
    6. '(split' → logprob: -15.131721496582031
    7. '((' → logprob: -15.256721496582031
    8. '(lst' → logprob: -15.631721496582031
    9. '(m' → logprob: -16.25672149658203
    10. '(numbers' → logprob: -16.25672149658203

Token 143: 'pl' (ID: 528)
  Prédit: 'pl'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'pl' → logprob: -6.704273118884885e-07
    2. 'p' → logprob: -15.375000953674316
    3. ' pl' → logprob: -15.625000953674316
    4. 'plit' → logprob: -16.0
    5. 'plt' → logprob: -17.125
    6. 'pll' → logprob: -17.25
    7. 'l' → logprob: -17.5
    8. 'ql' → logprob: -18.125
    9. '	pl' → logprob: -18.125
    10. 'w' → logprob: -19.125

Token 144: 'itted' (ID: 5478)
  Prédit: 'itted'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'itted' → logprob: -1.0206720617134124e-05
    2. 'ited' → logprob: -11.62501049041748
    3. 'it' → logprob: -14.50001049041748
    4. 'itt' → logprob: -14.50001049041748
    5. 'tted' → logprob: -16.625009536743164
    6. 'itte' → logprob: -17.000009536743164
    7. 'itting' → logprob: -18.000009536743164
    8. ')' → logprob: -18.000009536743164
    9. 'i' → logprob: -18.000009536743164
    10. '   ' → logprob: -18.250009536743164

Token 145: ')
' (ID: 446)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')' → logprob: -0.0005058500682935119
    2. ')
' → logprob: -7.7505059242248535
    3. '()' → logprob: -9.625505447387695
    4. '()
' → logprob: -12.750505447387695
    5. '())' → logprob: -13.125505447387695
    6. '   ' → logprob: -13.625505447387695
    7. ')

' → logprob: -14.375505447387695
    8. ' ' → logprob: -14.500505447387695
    9. ' )' → logprob: -14.625505447387695
    10. '[' → logprob: -14.750505447387695

Token 146: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.5674474239349365
    2. '
' → logprob: -0.9424474239349365
    3. 'n' → logprob: -3.3174474239349365
    4. ' n' → logprob: -5.442447662353516
    5. '    
' → logprob: -6.442447662353516
    6. '	n' → logprob: -8.067447662353516
    7. '  
' → logprob: -8.317447662353516
    8. '  ' → logprob: -9.067447662353516
    9. '<|end|>' → logprob: -9.192447662353516
    10. ' ' → logprob: -9.442447662353516

Token 147: ' n' (ID: 297)
  Prédit: 'n'
  Correct (stricte): False
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'n' (adapté à ' n') → logprob: -0.11322348564863205
    2. ' n' → logprob: -2.2382235527038574
    3. '   ' → logprob: -7.863223552703857
    4. '
' → logprob: -12.1132230758667
    5. ' ' → logprob: -12.6132230758667
    6. '	n' → logprob: -12.7382230758667
    7. '```' → logprob: -13.3632230758667
    8. '  ' → logprob: -13.7382230758667
    9. '    
' → logprob: -14.6132230758667
    10. '_n' → logprob: -14.8632230758667

Token 148: ' =' (ID: 314)
  Prédit: ' ='
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' =' → logprob: -0.0019287518225610256
    2. '=' → logprob: -6.251928806304932
    3. ' =
' → logprob: -16.626928329467773
    4. ' ' → logprob: -17.501928329467773
    5. '_' → logprob: -18.001928329467773
    6. ',' → logprob: -19.251928329467773
    7. ' =
' → logprob: -19.376928329467773
    8. ' =)' → logprob: -20.126928329467773
    9. '=int' → logprob: -20.251928329467773
    10. 's' → logprob: -20.251928329467773

Token 149: ' get' (ID: 717)
  Prédit: ' get'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' get' → logprob: -0.002478985348716378
    2. 'get' → logprob: -6.002479076385498
    3. ' numbers' → logprob: -12.62747859954834
    4. 'numbers' → logprob: -17.502479553222656
    5. '_get' → logprob: -17.877479553222656
    6. '=get' → logprob: -18.002479553222656
    7. '(get' → logprob: -18.127479553222656
    8. '	get' → logprob: -18.627479553222656
    9. ')get' → logprob: -19.252479553222656
    10. ' ' → logprob: -19.377479553222656

Token 150: '_n' (ID: 2170)
  Prédit: '_n'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_n' → logprob: -0.001562715508043766
    2. '_' → logprob: -6.501562595367432
    3. '_value' → logprob: -9.75156307220459
    4. ' _' → logprob: -14.12656307220459
    5. '_r' → logprob: -14.25156307220459
    6. '_x' → logprob: -15.25156307220459
    7. '__' → logprob: -16.251562118530273
    8. '_values' → logprob: -16.501562118530273
    9. '"_' → logprob: -16.751562118530273
    10. '_a' → logprob: -17.126562118530273

Token 151: '_value' (ID: 6734)
  Prédit: '_value'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_value' → logprob: -3.128163257315464e-07
    2. 'alue' → logprob: -15.625
    3. 'value' → logprob: -16.375
    4. '_' → logprob: -17.125
    5. '_values' → logprob: -17.125
    6. '_val' → logprob: -18.25
    7. '_VALUE' → logprob: -18.5
    8. '_Value' → logprob: -19.5
    9. '(value' → logprob: -19.875
    10. 'Value' → logprob: -20.5

Token 152: '(numbers' (ID: 98592)
  Prédit: '(numbers'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(numbers' → logprob: -1.2233183042553719e-05
    2. '(values' → logprob: -12.000012397766113
    3. '(' → logprob: -12.125012397766113
    4. ' (' → logprob: -15.000012397766113
    5. '(n' → logprob: -16.625011444091797
    6. '(number' → logprob: -17.875011444091797
    7. 'numbers' → logprob: -18.125011444091797
    8. '(nums' → logprob: -18.500011444091797
    9. ' numbers' → logprob: -19.750011444091797
    10. '(
' → logprob: -20.000011444091797

Token 153: ')
' (ID: 446)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')' → logprob: -0.00020699729793705046
    2. ')
' → logprob: -8.50020694732666
    3. ' )' → logprob: -13.25020694732666
    4. ')n' → logprob: -14.00020694732666
    5. ')

' → logprob: -15.12520694732666
    6. '   ' → logprob: -15.62520694732666
    7. ' ' → logprob: -16.500207901000977
    8. ')
' → logprob: -16.625207901000977
    9. '()' → logprob: -16.750207901000977
    10. '),' → logprob: -17.000207901000977

Token 154: '   ' (ID: 271)
  Prédit: 'r'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'r' → logprob: -0.5970824360847473
    2. '   ' → logprob: -0.9720824360847473
    3. '	r' → logprob: -3.0970823764801025
    4. ' r' → logprob: -4.222082614898682
    5. '
' → logprob: -4.597082614898682
    6. ' ' → logprob: -7.597082614898682
    7. '<|end|>' → logprob: -8.847082138061523
    8. '    ' → logprob: -9.222082138061523
    9. '  ' → logprob: -9.222082138061523
    10. '    
' → logprob: -9.347082138061523

Token 155: ' r' (ID: 428)
  Prédit: 'r'
  Correct (stricte): False
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'r' (adapté à ' r') → logprob: -0.0013701190473511815
    2. ' r' → logprob: -6.626369953155518
    3. '   ' → logprob: -10.126370429992676
    4. 'if' → logprob: -12.751370429992676
    5. ' ' → logprob: -14.501370429992676
    6. ' if' → logprob: -14.751370429992676
    7. '	r' → logprob: -16.00136947631836
    8. '  ' → logprob: -16.37636947631836
    9. '
' → logprob: -16.62636947631836
    10. '```' → logprob: -17.50136947631836

Token 156: ' =' (ID: 314)
  Prédit: ' ='
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' =' → logprob: -0.0015047440538182855
    2. '=' → logprob: -6.501504898071289
    3. ' ' → logprob: -13.001504898071289
    4. '_' → logprob: -15.751504898071289
    5. ')' → logprob: -18.12650489807129
    6. '  ' → logprob: -18.50150489807129
    7. '<|end|>' → logprob: -18.62650489807129
    8. ',' → logprob: -18.87650489807129
    9. '.' → logprob: -19.50150489807129
    10. ':' → logprob: -19.87650489807129

Token 157: ' get' (ID: 717)
  Prédit: ' get'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' get' → logprob: -0.0007102862582542002
    2. 'get' → logprob: -7.250710487365723
    3. '	get' → logprob: -16.250709533691406
    4. '=get' → logprob: -16.250709533691406
    5. '(get' → logprob: -16.625709533691406
    6. '[get' → logprob: -16.750709533691406
    7. '_get' → logprob: -16.875709533691406
    8. ' ' → logprob: -17.250709533691406
    9. '.get' → logprob: -18.875709533691406
    10. ')get' → logprob: -19.125709533691406

Token 158: '_r' (ID: 3442)
  Prédit: '_r'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_r' → logprob: -0.01128489151597023
    2. '_value' → logprob: -4.511284828186035
    3. '_' → logprob: -9.011284828186035
    4. '_values' → logprob: -9.261284828186035
    5. '_list' → logprob: -12.636284828186035
    6. '[' → logprob: -12.886284828186035
    7. 'r' → logprob: -13.011284828186035
    8. '_s' → logprob: -13.386284828186035
    9. '_numbers' → logprob: -13.761284828186035
    10. '_val' → logprob: -14.136284828186035

Token 159: '_value' (ID: 6734)
  Prédit: '_value'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_value' → logprob: -0.0015047440538182855
    2. 'alue' → logprob: -6.501504898071289
    3. 'value' → logprob: -13.501504898071289
    4. '_' → logprob: -14.751504898071289
    5. '_values' → logprob: -15.001504898071289
    6. '_VALUE' → logprob: -16.50150489807129
    7. '_val' → logprob: -16.75150489807129
    8. 'ALUE' → logprob: -17.62650489807129
    9. '_Value' → logprob: -18.00150489807129
    10. '-value' → logprob: -18.12650489807129

Token 160: '(numbers' (ID: 98592)
  Prédit: '(numbers'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(numbers' → logprob: -7.3458322731312364e-06
    2. ' (' → logprob: -12.500007629394531
    3. '(values' → logprob: -12.625007629394531
    4. 'numbers' → logprob: -16.50000762939453
    5. ' numbers' → logprob: -16.50000762939453
    6. '(' → logprob: -17.00000762939453
    7. '(n' → logprob: -17.62500762939453
    8. '(number' → logprob: -18.25000762939453
    9. '(nums' → logprob: -20.00000762939453
    10. '(nodes' → logprob: -20.75000762939453

Token 161: ')
' (ID: 446)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')' → logprob: -0.00020413640595506877
    2. ')
' → logprob: -8.500204086303711
    3. ')

' → logprob: -15.250204086303711
    4. '   ' → logprob: -15.500204086303711
    5. ' )' → logprob: -15.875204086303711
    6. ')
' → logprob: -17.00020408630371
    7. ')n' → logprob: -17.00020408630371
    8. '),' → logprob: -18.25020408630371
    9. '()' → logprob: -18.62520408630371
    10. ' ' → logprob: -18.62520408630371

Token 162: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.11840461194515228
    2. '
' → logprob: -2.3684046268463135
    3. ' if' → logprob: -4.493404388427734
    4. '<|end|>' → logprob: -5.618404388427734
    5. 'if' → logprob: -6.243404388427734
    6. '    
' → logprob: -7.493404388427734
    7. ' ' → logprob: -8.618404388427734
    8. '  
' → logprob: -8.868404388427734
    9. '	if' → logprob: -8.868404388427734
    10. '  ' → logprob: -9.493404388427734

Token 163: ' if' (ID: 538)
  Prédit: ' if'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' if' → logprob: -0.5247995257377625
    2. 'if' (adapté à ' if') → logprob: -1.0247995853424072
    3. '   ' → logprob: -3.0247995853424072
    4. ' ' → logprob: -7.899799346923828
    5. 'n' → logprob: -8.274799346923828
    6. 'x' → logprob: -9.399799346923828
    7. ' n' → logprob: -9.899799346923828
    8. ' x' → logprob: -9.899799346923828
    9. '	if' → logprob: -10.649799346923828
    10. '    
' → logprob: -10.774799346923828

Token 164: ' is' (ID: 382)
  Prédit: ' is'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' is' → logprob: -0.0009095562854781747
    2. 'is' → logprob: -7.125909328460693
    3. ' n' → logprob: -9.750909805297852
    4. '_' → logprob: -11.000909805297852
    5. 'n' → logprob: -11.625909805297852
    6. ' not' → logprob: -11.625909805297852
    7. ' ' → logprob: -12.000909805297852
    8. ' (' → logprob: -12.750909805297852
    9. '_n' → logprob: -13.750909805297852
    10. ' ' → logprob: -13.875909805297852

Token 165: '_n' (ID: 2170)
  Prédit: '_n'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_n' → logprob: -0.0004309076175559312
    2. '_' → logprob: -7.750431060791016
    3. ' _' → logprob: -15.125431060791016
    4. '_
' → logprob: -18.250431060791016
    5. 'n' → logprob: -18.625431060791016
    6. '_x' → logprob: -18.750431060791016
    7. '_a' → logprob: -19.250431060791016
    8. '_
' → logprob: -19.875431060791016
    9. '__' → logprob: -20.000431060791016
    10. ' ' → logprob: -20.125431060791016

Token 166: '_less' (ID: 154196)
  Prédit: '_less'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_less' → logprob: -1.5048530030981055e-06
    2. '_' → logprob: -14.125001907348633
    3. 'less' → logprob: -14.500001907348633
    4. '_l' → logprob: -16.125001907348633
    5. '_le' → logprob: -16.375001907348633
    6. '<' → logprob: -18.000001907348633
    7. '_lt' → logprob: -18.625001907348633
    8. 'Less' → logprob: -19.125001907348633
    9. ' less' → logprob: -19.750001907348633
    10. '_n' → logprob: -19.750001907348633

Token 167: '_than' (ID: 134758)
  Prédit: '_than'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_than' → logprob: -4.008129963040119e-06
    2. '_THAN' → logprob: -13.500003814697266
    3. 'than' → logprob: -13.750003814697266
    4. '_th' → logprob: -14.500003814697266
    5. '_less' → logprob: -14.875003814697266
    6. '_that' → logprob: -15.000003814697266
    7. '_then' → logprob: -15.750003814697266
    8. ' than' → logprob: -15.875003814697266
    9. '_' → logprob: -17.125003814697266
    10. 'Than' → logprob: -17.375003814697266

Token 168: '_' (ID: 62)
  Prédit: '_'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_' → logprob: -2.129266067640856e-05
    2. '10' → logprob: -11.000020980834961
    3. ' ' → logprob: -12.875020980834961
    4. ' _' → logprob: -13.500020980834961
    5. '(' → logprob: -15.500020980834961
    6. '_
' → logprob: -16.00002098083496
    7. '__' → logprob: -17.25002098083496
    8. '```' → logprob: -17.50002098083496
    9. '(_' → logprob: -17.75002098083496
    10. '1' → logprob: -17.87502098083496

Token 169: '10' (ID: 702)
  Prédit: '10'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '10' → logprob: -3.047134305234067e-05
    2. ' ' → logprob: -11.000030517578125
    3. '_' → logprob: -11.500030517578125
    4. 'n' → logprob: -13.625030517578125
    5. '```' → logprob: -14.375030517578125
    6. '1' → logprob: -14.750030517578125
    7. 'int' → logprob: -15.500030517578125
    8. '(' → logprob: -15.625030517578125
    9. 'r' → logprob: -15.687530517578125
    10. '۱۰' → logprob: -16.875030517578125

Token 170: '(n' (ID: 2406)
  Prédit: '(n'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(n' → logprob: -0.12693902850151062
    2. '(' → logprob: -2.126939058303833
    3. ' (' → logprob: -11.501938819885254
    4. '(
' → logprob: -14.501938819885254
    5. '(

' → logprob: -16.00193977355957
    6. '((' → logprob: -16.50193977355957
    7. ':' → logprob: -16.62693977355957
    8. '(N' → logprob: -17.12693977355957
    9. '(r' → logprob: -17.37693977355957
    10. '('' → logprob: -17.87693977355957

Token 171: '):
' (ID: 1883)
  Prédit: '):'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '):' → logprob: -0.0005810309085063636
    2. ')' → logprob: -7.87558126449585
    3. '):
' → logprob: -9.250580787658691
    4. ' ):' → logprob: -9.500580787658691
    5. ':' → logprob: -10.500580787658691
    6. '():' → logprob: -14.000580787658691
    7. '   ' → logprob: -14.000580787658691
    8. ' ' → logprob: -15.625580787658691
    9. '):

' → logprob: -16.125581741333008
    10. ' )' → logprob: -16.375581741333008

Token 172: '       ' (ID: 309)
  Prédit: ':'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ':' → logprob: -0.05612357705831528
    2. ':
' → logprob: -3.1811234951019287
    3. '       ' → logprob: -4.431123733520508
    4. '):
' → logprob: -7.806123733520508
    5. '):' → logprob: -8.431123733520508
    6. '():
' → logprob: -9.056123733520508
    7. '():' → logprob: -9.181123733520508
    8. '
' → logprob: -9.806123733520508
    9. ' x' → logprob: -9.806123733520508
    10. ' :' → logprob: -10.056123733520508

Token 173: ' x' (ID: 1215)
  Prédit: 'x'
  Correct (stricte): False
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'x' (adapté à ' x') → logprob: -0.5384012460708618
    2. ' x' → logprob: -0.9134012460708618
    3. '       ' → logprob: -4.413401126861572
    4. '   ' → logprob: -6.038401126861572
    5. '
' → logprob: -7.788401126861572
    6. 'result' → logprob: -9.16340160369873
    7. ' result' → logprob: -9.78840160369873
    8. '	x' → logprob: -10.16340160369873
    9. ' ' → logprob: -11.28840160369873
    10. '           ' → logprob: -11.53840160369873

Token 174: ' =' (ID: 314)
  Prédit: ' ='
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' =' → logprob: -0.014170682057738304
    2. '=' → logprob: -4.2641706466674805
    3. '_' → logprob: -12.26417064666748
    4. ' ' → logprob: -13.76417064666748
    5. '(' → logprob: -14.51417064666748
    6. ')' → logprob: -15.63917064666748
    7. ' =)' → logprob: -16.014171600341797
    8. ',' → logprob: -16.264171600341797
    9. '_=' → logprob: -16.264171600341797
    10. ' ' → logprob: -16.264171600341797

Token 175: ' compute' (ID: 23864)
  Prédit: 'compute'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'compute' → logprob: -0.5759400725364685
    2. ' compute' → logprob: -0.8259400725364685
    3. 'computer' → logprob: -15.700940132141113
    4. '.compute' → logprob: -15.700940132141113
    5. 'comput' → logprob: -16.325939178466797
    6. '_compute' → logprob: -16.325939178466797
    7. ' ' → logprob: -16.700939178466797
    8. ' computer' → logprob: -17.075939178466797
    9. '   ' → logprob: -17.825939178466797
    10. 'computed' → logprob: -17.950939178466797

Token 176: '_x' (ID: 7054)
  Prédit: '_x'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_x' → logprob: -9.088346359931165e-07
    2. '_' → logprob: -14.125000953674316
    3. 'x' → logprob: -16.5
    4. ' _' → logprob: -18.625
    5. '```' → logprob: -19.875
    6. '_
' → logprob: -20.375
    7. '(x' → logprob: -20.625
    8. '_

' → logprob: -21.125
    9. '_a' → logprob: -21.625
    10. '"_' → logprob: -21.875

Token 177: '(n' (ID: 2406)
  Prédit: '(n'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(n' → logprob: -0.00033546582562848926
    2. '(' → logprob: -8.000335693359375
    3. '(
' → logprob: -18.125335693359375
    4. ' (' → logprob: -18.750335693359375
    5. '(

' → logprob: -20.125335693359375
    6. '(noun' → logprob: -20.250335693359375
    7. 'n' → logprob: -20.375335693359375
    8. '(x' → logprob: -21.000335693359375
    9. '((' → logprob: -21.000335693359375
    10. '(nx' → logprob: -21.250335693359375

Token 178: ')
' (ID: 446)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')' → logprob: -0.004092408809810877
    2. ')
' → logprob: -5.504092216491699
    3. '   ' → logprob: -12.0040922164917
    4. '       ' → logprob: -12.3790922164917
    5. ')
' → logprob: -13.1290922164917
    6. ')

' → logprob: -14.0040922164917
    7. ' )' → logprob: -14.7540922164917
    8. ' ' → logprob: -16.629093170166016
    9. ',' → logprob: -16.754093170166016
    10. '),' → logprob: -17.129093170166016

Token 179: '       ' (ID: 309)
  Prédit: '       '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '       ' → logprob: -0.09382086992263794
    2. '
' → logprob: -3.093820810317993
    3. '   ' → logprob: -3.218820810317993
    4. '	result' → logprob: -7.093821048736572
    5. ' result' → logprob: -7.218821048736572
    6. 'result' → logprob: -7.343821048736572
    7. '<|end|>' → logprob: -7.593821048736572
    8. '    
' → logprob: -8.093820571899414
    9. '        
' → logprob: -8.093820571899414
    10. ' ' → logprob: -8.718820571899414

Token 180: ' result' (ID: 1534)
  Prédit: 'result'
  Correct (stricte): False
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'result' (adapté à ' result') → logprob: -0.018255067989230156
    2. ' result' → logprob: -4.018255233764648
    3. 'res' → logprob: -9.643255233764648
    4. 'total' → logprob: -11.143255233764648
    5. 'r' → logprob: -11.268255233764648
    6. 'sum' → logprob: -12.893255233764648
    7. '
' → logprob: -13.143255233764648
    8. '   ' → logprob: -13.518255233764648
    9. ' res' → logprob: -13.643255233764648
    10. 's' → logprob: -13.893255233764648

Token 181: ' =' (ID: 314)
  Prédit: ' ='
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' =' → logprob: -0.20142114162445068
    2. '=' → logprob: -1.7014211416244507
    3. 's' → logprob: -12.201420783996582
    4. '_' → logprob: -13.576420783996582
    5. ')' → logprob: -13.701420783996582
    6. ' ' → logprob: -15.326420783996582
    7. ',' → logprob: -16.8264217376709
    8. ' =)' → logprob: -16.8264217376709
    9. '=result' → logprob: -17.5764217376709
    10. '＝' → logprob: -17.8264217376709

Token 182: ' sum' (ID: 4215)
  Prédit: ' sum'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' sum' → logprob: -0.3132619559764862
    2. 'sum' → logprob: -1.3132619857788086
    3. '	sum' → logprob: -15.813261985778809
    4. '(sum' → logprob: -16.938261032104492
    5. ' ' → logprob: -18.313261032104492
    6. '   ' → logprob: -19.188261032104492
    7. '=sum' → logprob: -19.313261032104492
    8. '_sum' → logprob: -19.563261032104492
    9. '.sum' → logprob: -19.813261032104492
    10. ',sum' → logprob: -20.188261032104492

Token 183: '_x' (ID: 7054)
  Prédit: '_x'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_x' → logprob: -0.007625915110111237
    2. '_' → logprob: -4.882626056671143
    3. '(' → logprob: -11.632625579833984
    4. '_(' → logprob: -12.882625579833984
    5. ' _' → logprob: -13.007625579833984
    6. 'x' → logprob: -13.382625579833984
    7. '(_' → logprob: -13.632625579833984
    8. '(x' → logprob: -14.007625579833984
    9. '```' → logprob: -14.757625579833984
    10. ')_' → logprob: -14.882625579833984

Token 184: '_and' (ID: 18645)
  Prédit: '_x'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_x' → logprob: -0.39540594816207886
    2. '_and' → logprob: -1.1454060077667236
    3. '_' → logprob: -4.7704057693481445
    4. 'and' → logprob: -12.145405769348145
    5. '_a' → logprob: -12.520405769348145
    6. '_(' → logprob: -12.645405769348145
    7. '(x' → logprob: -13.770405769348145
    8. 'x' → logprob: -14.145405769348145
    9. '_an' → logprob: -14.270405769348145
    10. '_
' → logprob: -14.270405769348145

Token 185: '_r' (ID: 3442)
  Prédit: '_r'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_r' → logprob: -0.5231532454490662
    2. 'r' → logprob: -0.8981532454490662
    3. '	r' → logprob: -11.773153305053711
    4. ' r' → logprob: -11.898153305053711
    5. 'result' → logprob: -12.023153305053711
    6. '(r' → logprob: -13.148153305053711
    7. '_result' → logprob: -14.023153305053711
    8. '-r' → logprob: -14.148153305053711
    9. '_' → logprob: -14.523153305053711
    10. '```' → logprob: -14.523153305053711

Token 186: '(x' (ID: 4061)
  Prédit: '(x'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(x' → logprob: -0.06198034808039665
    2. '(' → logprob: -2.8119802474975586
    3. '(
' → logprob: -11.811980247497559
    4. ' (' → logprob: -12.186980247497559
    5. '(

' → logprob: -17.186981201171875
    6. '(s' → logprob: -18.186981201171875
    7. ' ' → logprob: -18.436981201171875
    8. '((' → logprob: -18.561981201171875
    9. '(
' → logprob: -18.686981201171875
    10. '```' → logprob: -18.936981201171875

Token 187: ',' (ID: 11)
  Prédit: ','
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ',' → logprob: -0.0007616263465024531
    2. ',r' → logprob: -7.25076150894165
    3. ' ,' → logprob: -10.000761985778809
    4. ',
' → logprob: -12.875761985778809
    5. 'r' → logprob: -13.250761985778809
    6. ')' → logprob: -14.375761985778809
    7. ',user' → logprob: -15.875761985778809
    8. ' r' → logprob: -16.125761032104492
    9. 's' → logprob: -16.375761032104492
    10. ' ' → logprob: -16.375761032104492

Token 188: ' r' (ID: 428)
  Prédit: ' r'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' r' → logprob: -0.01604410633444786
    2. 'r' → logprob: -4.1410441398620605
    3. ' ' → logprob: -12.016043663024902
    4. ')' → logprob: -12.766043663024902
    5. '_r' → logprob: -15.016043663024902
    6. '	r' → logprob: -15.766043663024902
    7. ' ' → logprob: -16.26604461669922
    8. ' 
' → logprob: -16.39104461669922
    9. ' )' → logprob: -16.51604461669922
    10. '(r' → logprob: -16.64104461669922

Token 189: ')
' (ID: 446)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')' → logprob: -0.16047759354114532
    2. ')
' → logprob: -1.910477638244629
    3. '       ' → logprob: -8.910477638244629
    4. '   ' → logprob: -9.410477638244629
    5. ')
' → logprob: -10.660477638244629
    6. ')

' → logprob: -11.410477638244629
    7. ' ' → logprob: -14.910477638244629
    8. '<|end|>' → logprob: -15.160477638244629
    9. ' )' → logprob: -15.285477638244629
    10. ')return' → logprob: -15.535477638244629

Token 190: '       ' (ID: 309)
  Prédit: '       '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '       ' → logprob: -8.339776832144707e-05
    2. '	' → logprob: -9.875082969665527
    3. '   ' → logprob: -11.000082969665527
    4. '        
' → logprob: -11.375082969665527
    5. '
' → logprob: -14.000082969665527
    6. '```' → logprob: -14.500082969665527
    7. '<|end|>' → logprob: -14.875082969665527
    8. '      ' → logprob: -15.000082969665527
    9. '' → logprob: -15.000082969665527
    10. '	   ' → logprob: -15.125082969665527

Token 191: ' print' (ID: 2123)
  Prédit: ' print'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' print' → logprob: -0.576075553894043
    2. 'print' (adapté à ' print') → logprob: -0.826075553894043
    3. '       ' → logprob: -9.201075553894043
    4. '   ' → logprob: -10.451075553894043
    5. '
' → logprob: -12.451075553894043
    6. '(print' → logprob: -13.576075553894043
    7. '	print' → logprob: -14.451075553894043
    8. ' ' → logprob: -15.451075553894043
    9. '.print' → logprob: -15.701075553894043
    10. '  ' → logprob: -16.57607650756836

Token 192: '_result' (ID: 11623)
  Prédit: '_result'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_result' → logprob: -3.128163257315464e-07
    2. '_' → logprob: -15.125
    3. '_res' → logprob: -18.625
    4. '(result' → logprob: -19.75
    5. '_RESULT' → logprob: -20.0
    6. ' _' → logprob: -20.0
    7. 'result' → logprob: -20.0
    8. '_results' → logprob: -20.0
    9. '_Result' → logprob: -20.125
    10. '(_' → logprob: -20.5

Token 193: '(result' (ID: 8111)
  Prédit: '(result'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(result' → logprob: -0.10021325200796127
    2. '(' → logprob: -2.3502132892608643
    3. ' (' → logprob: -12.725213050842285
    4. '(
' → logprob: -13.600213050842285
    5. '(results' → logprob: -13.975213050842285
    6. '(res' → logprob: -14.725213050842285
    7. '(resultado' → logprob: -14.725213050842285
    8. '(

' → logprob: -15.725213050842285
    9. '(response' → logprob: -15.975213050842285
    10. ',result' → logprob: -16.8502140045166

Token 194: ')
' (ID: 446)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')' → logprob: -0.00868962612003088
    2. ')
' → logprob: -4.7586894035339355
    3. '   ' → logprob: -10.008689880371094
    4. '()' → logprob: -11.383689880371094
    5. '())' → logprob: -12.008689880371094
    6. ' )' → logprob: -12.758689880371094
    7. '<|end|>' → logprob: -12.758689880371094
    8. '()
' → logprob: -12.883689880371094
    9. ')

' → logprob: -13.758689880371094
    10. '
' → logprob: -13.883689880371094

Token 195: '   ' (ID: 271)
  Prédit: 'else'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'else' → logprob: -0.34036436676979065
    2. '
' → logprob: -1.8403643369674683
    3. '<|end|>' → logprob: -2.590364456176758
    4. '   ' → logprob: -3.590364456176758
    5. '```' → logprob: -5.090364456176758
    6. '\n' → logprob: -5.090364456176758
    7. ' else' → logprob: -5.340364456176758
    8. '    
' → logprob: -5.590364456176758
    9. 'elif' → logprob: -6.465364456176758
    10. '\' → logprob: -6.840364456176758

Token 196: ' else' (ID: 1203)
  Prédit: 'else'
  Correct (stricte): False
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'else' (adapté à ' else') → logprob: -0.0017247996293008327
    2. ' else' → logprob: -6.751724720001221
    3. 'elif' → logprob: -7.751724720001221
    4. '
' → logprob: -9.751725196838379
    5. 'if' → logprob: -10.376725196838379
    6. '<|end|>' → logprob: -10.876725196838379
    7. '```' → logprob: -12.126725196838379
    8. '   ' → logprob: -12.501725196838379
    9. '	else' → logprob: -13.501725196838379
    10. '    
' → logprob: -13.626725196838379

Token 197: ':
' (ID: 734)
  Prédit: ':'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ':' → logprob: -0.029754074290394783
    2. ':
' → logprob: -3.529754161834717
    3. ':
' → logprob: -13.529753684997559
    4. '   ' → logprob: -14.529753684997559
    5. ':

' → logprob: -14.654753684997559
    6. '<|end|>' → logprob: -15.029753684997559
    7. ':return' → logprob: -15.029753684997559
    8. '       ' → logprob: -15.279753684997559
    9. ':def' → logprob: -16.029754638671875
    10. '```' → logprob: -16.904754638671875

Token 198: '       ' (ID: 309)
  Prédit: '       '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '       ' → logprob: -0.020399516448378563
    2. 'print' → logprob: -4.145399570465088
    3. ' print' → logprob: -5.520399570465088
    4. '   ' → logprob: -8.27039909362793
    5. ' return' → logprob: -10.14539909362793
    6. 'return' → logprob: -10.64539909362793
    7. '    ' → logprob: -11.64539909362793
    8. ' pass' → logprob: -12.77039909362793
    9. ' None' → logprob: -12.77039909362793
    10. 'pass' → logprob: -12.89539909362793

Token 199: ' print' (ID: 2123)
  Prédit: 'print'
  Correct (stricte): False
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'print' (adapté à ' print') → logprob: -0.3150702714920044
    2. ' print' → logprob: -1.3150702714920044
    3. '   ' → logprob: -6.940070152282715
    4. ' pass' → logprob: -7.815070152282715
    5. 'pass' → logprob: -8.940070152282715
    6. '    ' → logprob: -9.690070152282715
    7. '       ' → logprob: -10.065070152282715
    8. 'return' → logprob: -10.440070152282715
    9. ' return' → logprob: -10.690070152282715
    10. 'result' → logprob: -10.815070152282715

Token 200: '_result' (ID: 11623)
  Prédit: '_result'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_result' → logprob: -0.12516528367996216
    2. '(' → logprob: -2.3751652240753174
    3. '()' → logprob: -4.1251654624938965
    4. '("' → logprob: -6.0001654624938965
    5. '("_' → logprob: -6.1251654624938965
    6. '(_' → logprob: -6.7501654624938965
    7. '("")' → logprob: -7.5001654624938965
    8. '("(' → logprob: -7.6251654624938965
    9. '_' → logprob: -7.8751654624938965
    10. '(result' → logprob: -8.000164985656738

Token 201: '(r' (ID: 4729)
  Prédit: '(r'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(r' → logprob: -0.10087592154741287
    2. '(' → logprob: -2.3508758544921875
    3. '((' → logprob: -8.600875854492188
    4. '("' → logprob: -8.850875854492188
    5. '(s' → logprob: -9.475875854492188
    6. '()' → logprob: -9.725875854492188
    7. '(n' → logprob: -9.975875854492188
    8. '(-' → logprob: -10.225875854492188
    9. '("(' → logprob: -10.475875854492188
    10. '(None' → logprob: -10.725875854492188

Token 202: ')

' (ID: 1029)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')' → logprob: -4.60414821645827e-06
    2. ')
' → logprob: -12.625004768371582
    3. '))' → logprob: -14.125004768371582
    4. ' )' → logprob: -15.375004768371582
    5. '   ' → logprob: -16.875003814697266
    6. ')`' → logprob: -17.000003814697266
    7. '())' → logprob: -17.125003814697266
    8. '`)' → logprob: -17.250003814697266
    9. ')}' → logprob: -17.750003814697266
    10. ')

' → logprob: -17.750003814697266

Token 203: 'main' (ID: 7731)
  Prédit: '
'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '
' → logprob: -0.5842424035072327
    2. 'if' → logprob: -0.8342424035072327
    3. '\n' → logprob: -5.209242343902588
    4. 'main' → logprob: -6.584242343902588
    5. '<|end|>' → logprob: -8.084242820739746
    6. '```' → logprob: -8.209242820739746
    7. '' → logprob: -8.584242820739746
    8. ' if' → logprob: -8.709242820739746
    9. '

' → logprob: -8.959242820739746
    10. '  
' → logprob: -9.459242820739746

Token 204: '()' (ID: 416)
  Prédit: '()'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '()' → logprob: -0.013478775508701801
    2. '(' → logprob: -4.388478755950928
    3. '()
' → logprob: -7.013478755950928
    4. '(
' → logprob: -9.763479232788086
    5. '()

' → logprob: -12.763479232788086
    6. ' ()' → logprob: -13.138479232788086
    7. '#' → logprob: -13.388479232788086
    8. '()`' → logprob: -13.888479232788086
    9. '(

' → logprob: -14.513479232788086
    10. '();' → logprob: -14.638479232788086


RÉSUMÉ:
--------------------------------------------------------------------------------
Total des tokens analysés: 202
Tokens correctement prédits (1ère position, stricte): 101
Tokens correctement prédits (1ère position, avec adaptation): 110
Tokens correctement prédits (top 10): 173
Précision stricte (1ère position): 50.00%
Précision adaptée (1ère position): 54.46%
Précision (top 10): 85.64%
================================================================================
