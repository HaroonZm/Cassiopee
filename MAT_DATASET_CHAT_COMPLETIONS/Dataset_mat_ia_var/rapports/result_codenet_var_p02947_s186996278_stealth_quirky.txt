================================================================================
ANALYSE DE PRÉDICTION TOKEN PAR TOKEN (BATCH API)
Date: 2025-06-04 19:49:07
Modèle de tokenisation: gpt-4o-mini
================================================================================

SCRIPT ANALYSÉ:
--------------------------------------------------------------------------------
try:
 N=int(input())
 X=[input()for _ in [0]*N]
 Y={}
 for q in X:
  Q=tuple(sorted(q))
  Y[Q]=Y.get(Q,0)+1
 R=[v for v in Y.values()if v>1]
 S=sum(((n*(n-1))//2 for n in R))
 print(S)
except:
 print(0)
--------------------------------------------------------------------------------

RÉSULTATS D'ANALYSE TOKEN PAR TOKEN:
--------------------------------------------------------------------------------
Token 0: 'try' (ID: 1806)
  → Token d'amorce (pas de prédiction)

Token 1: ':
' (ID: 734)
  → Token d'amorce (pas de prédiction)

Token 2: ' N' (ID: 478)
  → Token d'amorce (pas de prédiction)

Token 3: '=int' (ID: 37431)
  Prédit: 'e'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'e' → logprob: -1.173133373260498
    2. 'o' → logprob: -1.673133373260498
    3. 'except' → logprob: -1.923133373260498
    4. 'a' → logprob: -2.048133373260498
    5. 'u' → logprob: -2.423133373260498
    6. '=' → logprob: -3.673133373260498
    7. '   ' → logprob: -3.673133373260498
    8. 'ex' → logprob: -3.798133373260498
    9. 'N' → logprob: -4.423133373260498
    10. ' except' → logprob: -4.548133373260498

Token 4: '(input' (ID: 10054)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(' → logprob: -0.0006903939065523446
    2. '(input' → logprob: -8.000690460205078
    3. ' (' → logprob: -9.250690460205078
    4. '()' → logprob: -9.750690460205078
    5. '```' → logprob: -10.000690460205078
    6. '('' → logprob: -10.125690460205078
    7. '(N' → logprob: -10.750690460205078
    8. '(code' → logprob: -11.000690460205078
    9. '("("' → logprob: -11.625690460205078
    10. ''' → logprob: -11.750690460205078

Token 5: '())
' (ID: 4574)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '(' → logprob: -0.2579907178878784
    2. ')' → logprob: -1.6329907178878784
    3. '()' → logprob: -3.882990837097168
    4. '())' → logprob: -5.632990837097168
    5. '('' → logprob: -6.007990837097168
    6. '```' → logprob: -6.882990837097168
    7. '(
' → logprob: -7.257990837097168
    8. '`' → logprob: -7.257990837097168
    9. '(()' → logprob: -7.882990837097168
    10. ''' → logprob: -8.007990837097168

Token 6: ' X' (ID: 2127)
  Prédit: '\'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '\' → logprob: -1.0224566459655762
    2. '\n' → logprob: -1.1474566459655762
    3. ' ' → logprob: -2.522456645965576
    4. ')' → logprob: -3.022456645965576
    5. ' except' → logprob: -3.147456645965576
    6. ' 
' → logprob: -3.522456645965576
    7. ':' → logprob: -3.522456645965576
    8. '```' → logprob: -4.147456645965576
    9. '\r' → logprob: -4.147456645965576
    10. '  
' → logprob: -4.772456645965576

Token 7: '=[' (ID: 13370)
  Prédit: '['
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '[' → logprob: -0.1380811184644699
    2. '+' → logprob: -2.2630810737609863
    3. '=' → logprob: -4.138081073760986
    4. '*' → logprob: -6.388081073760986
    5. ' =' → logprob: -6.513081073760986
    6. '**' → logprob: -6.638081073760986
    7. '+=' → logprob: -7.138081073760986
    8. ')' → logprob: -7.513081073760986
    9. ' ' → logprob: -7.513081073760986
    10. '.' → logprob: -7.763081073760986

Token 8: 'input' (ID: 2586)
  Prédit: 'int'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'int' → logprob: -0.027887502685189247
    2. '0' → logprob: -3.7778875827789307
    3. ' int' → logprob: -5.402887344360352
    4. ']int' → logprob: -10.027887344360352
    5. '(int' → logprob: -10.277887344360352
    6. ' ' → logprob: -11.152887344360352
    7. ' ]' → logprob: -11.777887344360352
    8. 'i' → logprob: -11.777887344360352
    9. '*' → logprob: -12.027887344360352
    10. ']' → logprob: -12.777887344360352

Token 9: '()' (ID: 416)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(' → logprob: -0.5375522971153259
    2. '()' → logprob: -1.4125523567199707
    3. '()]' → logprob: -1.7875523567199707
    4. ' ()' → logprob: -6.037552356719971
    5. '('' → logprob: -6.787552356719971
    6. '())' → logprob: -7.537552356719971
    7. ' (' → logprob: -7.787552356719971
    8. ']()' → logprob: -9.162551879882812
    9. '().' → logprob: -9.787551879882812
    10. '()(' → logprob: -10.037551879882812

Token 10: 'for' (ID: 1938)
  Prédit: '()]'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '()]' → logprob: -0.35184428095817566
    2. '()' → logprob: -1.601844310760498
    3. '())' → logprob: -2.851844310760498
    4. ')' → logprob: -3.726844310760498
    5. ']' → logprob: -5.101844310760498
    6. ')]' → logprob: -5.226844310760498
    7. ' ()' → logprob: -7.476844310760498
    8. 'for' → logprob: -7.726844310760498
    9. ' for' → logprob: -8.47684383392334
    10. ' )' → logprob: -8.97684383392334

Token 11: ' _' (ID: 1175)
  Prédit: ' range'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' range' → logprob: -0.1174672394990921
    2. ' i' → logprob: -3.242467164993286
    3. ' _' → logprob: -3.367467164993286
    4. '_' → logprob: -3.367467164993286
    5. '_range' → logprob: -6.617467403411865
    6. ' ' → logprob: -7.117467403411865
    7. 'range' → logprob: -7.742467403411865
    8. 'i' → logprob: -9.742466926574707
    9. ' in' → logprob: -10.242466926574707
    10. ' xrange' → logprob: -10.242466926574707

Token 12: ' in' (ID: 306)
  Prédit: ' in'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' in' → logprob: -0.0028086788952350616
    2. 'in' → logprob: -5.877808570861816
    3. ' ' → logprob: -13.002808570861816
    4. ' i' → logprob: -14.127808570861816
    5. ' _' → logprob: -15.377808570861816
    6. 'range' → logprob: -15.877808570861816
    7. ' range' → logprob: -16.002809524536133
    8. '	in' → logprob: -16.127809524536133
    9. 'i' → logprob: -16.377809524536133
    10. '  ' → logprob: -17.127809524536133

Token 13: ' [' (ID: 723)
  Prédit: ' range'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' range' → logprob: -0.5759396553039551
    2. 'range' → logprob: -0.8259396553039551
    3. '	range' → logprob: -16.325939178466797
    4. ' ' → logprob: -16.950939178466797
    5. 'rang' → logprob: -17.075939178466797
    6. 'r' → logprob: -17.700939178466797
    7. ' ran' → logprob: -17.825939178466797
    8. '_range' → logprob: -18.450939178466797
    9. 'ran' → logprob: -18.450939178466797
    10. 'ra' → logprob: -18.825939178466797

Token 14: '0' (ID: 15)
  Prédit: '0'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '0' → logprob: -0.0022698009852319956
    2. ' ' → logprob: -6.877269744873047
    3. ' range' → logprob: -7.377269744873047
    4. 'range' → logprob: -7.502269744873047
    5. 'None' → logprob: -10.502269744873047
    6. '_' → logprob: -11.752269744873047
    7. 'i' → logprob: -12.377269744873047
    8. '   ' → logprob: -12.377269744873047
    9. '  ' → logprob: -12.627269744873047
    10. '1' → logprob: -12.627269744873047

Token 15: ']*' (ID: 18579)
  Prédit: ']'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ']' → logprob: -0.8159418702125549
    2. ']]' → logprob: -1.3159418106079102
    3. ']*' → logprob: -1.6909418106079102
    4. ',' → logprob: -3.31594181060791
    5. '-' → logprob: -3.81594181060791
    6. '..' → logprob: -3.81594181060791
    7. ' ' → logprob: -5.06594181060791
    8. '...' → logprob: -5.44094181060791
    9. ' ]' → logprob: -6.31594181060791
    10. ']<' → logprob: -6.44094181060791

Token 16: 'N' (ID: 45)
  Prédit: 'N'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'N' → logprob: -0.004089796915650368
    2. ' N' → logprob: -5.504089832305908
    3. '(N' → logprob: -13.00408935546875
    4. ' ' → logprob: -13.12908935546875
    5. '1' → logprob: -13.62908935546875
    6. '10' → logprob: -13.75408935546875
    7. '5' → logprob: -13.87908935546875
    8. '3' → logprob: -14.12908935546875
    9. '9' → logprob: -14.25408935546875
    10. '(' → logprob: -14.50408935546875

Token 17: ']
' (ID: 1592)
  Prédit: ']'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ']' → logprob: -0.011622656136751175
    2. ')]' → logprob: -4.511622428894043
    3. '])' → logprob: -8.011622428894043
    4. ' ]' → logprob: -8.511622428894043
    5. '`]' → logprob: -11.136622428894043
    6. ')' → logprob: -11.886622428894043
    7. '])]' → logprob: -11.886622428894043
    8. '()]' → logprob: -12.261622428894043
    9. ')])' → logprob: -13.011622428894043
    10. ']
' → logprob: -13.386622428894043

Token 18: ' Y' (ID: 865)
  Prédit: 'for'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'for' → logprob: -0.5984273552894592
    2. ' for' → logprob: -1.0984272956848145
    3. '
' → logprob: -2.7234272956848145
    4. 'try' → logprob: -4.0984272956848145
    5. ' except' → logprob: -4.7234272956848145
    6. 'except' → logprob: -5.0984272956848145
    7. ' try' → logprob: -5.2234272956848145
    8. '<|end|>' → logprob: -5.2234272956848145
    9. '[' → logprob: -6.2234272956848145
    10. 'print' → logprob: -6.4734272956848145

Token 19: '={}
' (ID: 146130)
  Prédit: '='
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '=' → logprob: -0.13076919317245483
    2. ' =' → logprob: -2.3807692527770996
    3. '[' → logprob: -4.2557692527771
    4. '=[' → logprob: -5.0057692527771
    5. '.' → logprob: -5.1307692527771
    6. '=[]' → logprob: -6.2557692527771
    7. ' =[' → logprob: -8.130768775939941
    8. ',' → logprob: -8.255768775939941
    9. '_' → logprob: -8.505768775939941
    10. '=int' → logprob: -9.130768775939941

Token 20: ' for' (ID: 395)
  Prédit: 'for'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'for' → logprob: -0.02343262918293476
    2. ' for' → logprob: -3.773432731628418
    3. 'f' → logprob: -8.773432731628418
    4. 'F' → logprob: -11.648432731628418
    5. ' ' → logprob: -12.273432731628418
    6. 'd' → logprob: -12.648432731628418
    7. '
' → logprob: -12.773432731628418
    8. '' → logprob: -12.898432731628418
    9. '	for' → logprob: -13.398432731628418
    10. ':' → logprob: -13.648432731628418

Token 21: ' q' (ID: 2335)
  Prédit: ' x'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' x' → logprob: -0.1591808795928955
    2. 'x' → logprob: -2.1591808795928955
    3. ' i' → logprob: -3.7841808795928955
    4. ' s' → logprob: -5.659180641174316
    5. 'i' → logprob: -6.534180641174316
    6. ' c' → logprob: -6.909180641174316
    7. ' ' → logprob: -7.284180641174316
    8. ' w' → logprob: -8.034180641174316
    9. 's' → logprob: -8.034180641174316
    10. ' _' → logprob: -8.159180641174316

Token 22: ' in' (ID: 306)
  Prédit: ' in'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' in' → logprob: -0.14709465205669403
    2. 'in' → logprob: -2.0220947265625
    3. ' ' → logprob: -5.6470947265625
    4. 'i' → logprob: -8.3970947265625
    5. 'n' → logprob: -8.6470947265625
    6. 'y' → logprob: -9.2720947265625
    7. ' i' → logprob: -9.5220947265625
    8. '  ' → logprob: -9.6470947265625
    9. 'u' → logprob: -10.0220947265625
    10. ',' → logprob: -10.1470947265625

Token 23: ' X' (ID: 2127)
  Prédit: 'X'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'X' → logprob: -0.5948279500007629
    2. ' range' → logprob: -1.5948278903961182
    3. ' X' → logprob: -1.7198278903961182
    4. 'range' → logprob: -2.719827890396118
    5. ' ' → logprob: -9.219827651977539
    6. 'Y' → logprob: -9.469827651977539
    7. 'Q' → logprob: -9.969827651977539
    8. ' Y' → logprob: -10.344827651977539
    9. '[' → logprob: -10.469827651977539
    10. 'Range' → logprob: -10.844827651977539

Token 24: ':
' (ID: 734)
  Prédit: ':'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ':' → logprob: -0.003658387577161193
    2. ' :' → logprob: -5.628658294677734
    3. ' in' → logprob: -11.128658294677734
    4. '[' → logprob: -11.378658294677734
    5. ':q' → logprob: -11.628658294677734
    6. ':
' → logprob: -12.753658294677734
    7. '[q' → logprob: -12.878658294677734
    8. 'in' → logprob: -13.253658294677734
    9. '=' → logprob: -13.378658294677734
    10. '+:' → logprob: -13.628658294677734

Token 25: ' ' (ID: 220)
  Prédit: ' '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' ' → logprob: -0.033963777124881744
    2. '    ' → logprob: -3.533963680267334
    3. ' if' → logprob: -6.158963680267334
    4. '=' → logprob: -7.783963680267334
    5. '   ' → logprob: -8.408964157104492
    6. ' 
' → logprob: -8.783964157104492
    7. ' =' → logprob: -8.783964157104492
    8. ' Y' → logprob: -8.908964157104492
    9. '  ' → logprob: -9.533964157104492
    10. '<|end|>' → logprob: -9.533964157104492

Token 26: ' Q' (ID: 1486)
  Prédit: ' if'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' if' → logprob: -0.16434678435325623
    2. 'if' → logprob: -2.289346694946289
    3. ' Y' → logprob: -3.664346694946289
    4. 'Y' → logprob: -4.164346694946289
    5. ' for' → logprob: -5.789346694946289
    6. ' try' → logprob: -6.289346694946289
    7. ' ' → logprob: -6.414346694946289
    8. 'try' → logprob: -7.164346694946289
    9. 'for' → logprob: -7.414346694946289
    10. 'y' → logprob: -8.289346694946289

Token 27: '=' (ID: 28)
  Prédit: '='
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '=' → logprob: -0.06188107281923294
    2. 'u' → logprob: -3.6868810653686523
    3. ' =' → logprob: -3.9368810653686523
    4. '=u' → logprob: -5.186881065368652
    5. '=q' → logprob: -5.311881065368652
    6. '=query' → logprob: -6.436881065368652
    7. '=input' → logprob: -7.061881065368652
    8. ' ' → logprob: -7.311881065368652
    9. 'Q' → logprob: -8.061881065368652
    10. '[u' → logprob: -8.686881065368652

Token 28: 'tuple' (ID: 52834)
  Prédit: 'q'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'q' → logprob: -0.18226055800914764
    2. ' q' → logprob: -1.807260513305664
    3. 'Y' → logprob: -6.807260513305664
    4. ' Y' → logprob: -7.932260513305664
    5. 'len' → logprob: -8.432260513305664
    6. 'tuple' → logprob: -8.557260513305664
    7. 'int' → logprob: -8.682260513305664
    8. 'list' → logprob: -8.682260513305664
    9. ' int' → logprob: -9.432260513305664
    10. ' tuple' → logprob: -9.807260513305664

Token 29: '(sorted' (ID: 92488)
  Prédit: '(q'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(q' → logprob: -0.0004989399458281696
    2. '(' → logprob: -7.7504987716674805
    3. '(map' → logprob: -11.00049877166748
    4. '(sorted' → logprob: -11.12549877166748
    5. '(list' → logprob: -11.50049877166748
    6. '(ord' → logprob: -11.87549877166748
    7. '(input' → logprob: -12.37549877166748
    8. '((' → logprob: -12.62549877166748
    9. ' (' → logprob: -13.25049877166748
    10. '(Q' → logprob: -13.25049877166748

Token 30: '(q' (ID: 21479)
  Prédit: '(q'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(q' → logprob: -0.009978002868592739
    2. '(' → logprob: -5.3849778175354
    3. 'q' → logprob: -5.8849778175354
    4. ' q' → logprob: -6.1349778175354
    5. ' (' → logprob: -8.009978294372559
    6. '((' → logprob: -10.384978294372559
    7. '(list' → logprob: -11.884978294372559
    8. '([' → logprob: -12.634978294372559
    9. '[q' → logprob: -12.634978294372559
    10. ')' → logprob: -13.009978294372559

Token 31: '))
' (ID: 2210)
  Prédit: '))'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '))' → logprob: -0.02413097582757473
    2. '()))' → logprob: -4.649130821228027
    3. ' ))' → logprob: -4.899130821228027
    4. '))
' → logprob: -5.149130821228027
    5. ' ' → logprob: -7.899130821228027
    6. '()))
' → logprob: -8.524130821228027
    7. ' ))
' → logprob: -9.149130821228027
    8. ')' → logprob: -9.274130821228027
    9. '()' → logprob: -9.774130821228027
    10. '))

' → logprob: -10.399130821228027

Token 32: ' ' (ID: 220)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')' → logprob: -0.45844367146492004
    2. ' ' → logprob: -2.2084436416625977
    3. ' )' → logprob: -2.3334436416625977
    4. ':' → logprob: -2.9584436416625977
    5. ']' → logprob: -3.3334436416625977
    6. '<|end|>' → logprob: -3.9584436416625977
    7. ' Y' → logprob: -4.208443641662598
    8. ' if' → logprob: -4.458443641662598
    9. ' :' → logprob: -4.708443641662598
    10. '):' → logprob: -4.958443641662598

Token 33: ' Y' (ID: 865)
  Prédit: 'Y'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'Y' → logprob: -0.3648912012577057
    2. ' Y' → logprob: -1.8648911714553833
    3. ' if' → logprob: -2.614891290664673
    4. ')' → logprob: -3.239891290664673
    5. 'if' → logprob: -3.864891290664673
    6. ']' → logprob: -4.489891052246094
    7. ':Y' → logprob: -6.114891052246094
    8. ' ' → logprob: -6.239891052246094
    9. ':' → logprob: -6.614891052246094
    10. ' )' → logprob: -8.239891052246094

Token 34: '[' (ID: 58)
  Prédit: '['
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '[' → logprob: -0.06613484025001526
    2. '.setdefault' → logprob: -2.8161349296569824
    3. '[q' → logprob: -5.691134929656982
    4. '[Y' → logprob: -7.816134929656982
    5. '.get' → logprob: -8.316134452819824
    6. ' [' → logprob: -9.566134452819824
    7. '[I' → logprob: -10.691134452819824
    8. ' Q' → logprob: -12.316134452819824
    9. '	Q' → logprob: -12.316134452819824
    10. '.' → logprob: -12.816134452819824

Token 35: 'Q' (ID: 48)
  Prédit: 'Q'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'Q' → logprob: -0.00410380819812417
    2. ' Q' → logprob: -5.504103660583496
    3. 'q' → logprob: -10.879103660583496
    4. ' ' → logprob: -12.379103660583496
    5. '(Q' → logprob: -13.754103660583496
    6. '	Q' → logprob: -14.379103660583496
    7. '   ' → logprob: -16.004104614257812
    8. ',Q' → logprob: -16.504104614257812
    9. '(' → logprob: -16.629104614257812
    10. ']' → logprob: -16.754104614257812

Token 36: ']=' (ID: 9539)
  Prédit: ']'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ']' → logprob: -0.5553755164146423
    2. ']=' → logprob: -1.055375576019287
    3. ']+=' → logprob: -2.555375576019287
    4. ' ]' → logprob: -8.555375099182129
    5. ']=(' → logprob: -9.180375099182129
    6. ']+' → logprob: -9.305375099182129
    7. ']={' → logprob: -11.180375099182129
    8. '']=' → logprob: -12.680375099182129
    9. '"]=' → logprob: -12.805375099182129
    10. ']]=' → logprob: -12.930375099182129

Token 37: 'Y' (ID: 56)
  Prédit: 'Y'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'Y' → logprob: -0.043131522834300995
    2. ' Y' → logprob: -3.1681315898895264
    3. '1' → logprob: -9.793131828308105
    4. ' ' → logprob: -10.168131828308105
    5. 'y' → logprob: -10.668131828308105
    6. '0' → logprob: -12.293131828308105
    7. '	Y' → logprob: -12.293131828308105
    8. ' y' → logprob: -13.418131828308105
    9. 'len' → logprob: -14.168131828308105
    10. ' ' → logprob: -14.293131828308105

Token 38: '.get' (ID: 775)
  Prédit: '.get'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '.get' → logprob: -0.0011233105324208736
    2. 'get' → logprob: -6.876123428344727
    3. '.setdefault' → logprob: -9.876123428344727
    4. '.' → logprob: -10.501123428344727
    5. '[' → logprob: -11.626123428344727
    6. ' .' → logprob: -13.626123428344727
    7. ' get' → logprob: -14.751123428344727
    8. ' ' → logprob: -15.126123428344727
    9. '{}.' → logprob: -15.751123428344727
    10. '[q' → logprob: -15.876123428344727

Token 39: '(Q' (ID: 14437)
  Prédit: '(Q'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(Q' → logprob: -0.00018971276585943997
    2. '(' → logprob: -8.625189781188965
    3. '(q' → logprob: -11.750189781188965
    4. ' (' → logprob: -13.750189781188965
    5. '<|end|>' → logprob: -14.750189781188965
    6. '(Query' → logprob: -15.875189781188965
    7. '((' → logprob: -15.875189781188965
    8. '```' → logprob: -16.25018882751465
    9. '<|end|>' → logprob: -16.25018882751465
    10. '(QWidget' → logprob: -16.62518882751465

Token 40: ',' (ID: 11)
  Prédit: ','
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ',' → logprob: -0.028590137138962746
    2. ',Q' → logprob: -4.028590202331543
    3. ',q' → logprob: -4.653590202331543
    4. ' ,' → logprob: -7.653590202331543
    5. '(q' → logprob: -8.028590202331543
    6. 'Q' → logprob: -11.153590202331543
    7. ' ' → logprob: -11.403590202331543
    8. '1' → logprob: -11.903590202331543
    9. '(Q' → logprob: -12.028590202331543
    10. 'q' → logprob: -12.153590202331543

Token 41: '0' (ID: 15)
  Prédit: '0'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '0' → logprob: -0.0019900170154869556
    2. ' ' → logprob: -6.251989841461182
    3. '[]' → logprob: -9.87699031829834
    4. ')' → logprob: -12.12699031829834
    5. '[])' → logprob: -12.75199031829834
    6. '1' → logprob: -14.87699031829834
    7. ' [])' → logprob: -14.87699031829834
    8. ' []' → logprob: -15.00199031829834
    9. ')+' → logprob: -15.75199031829834
    10. '+' → logprob: -15.75199031829834

Token 42: ')+' (ID: 16161)
  Prédit: ')+'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')+' → logprob: -0.32238101959228516
    2. ')' → logprob: -1.3223810195922852
    3. '+' → logprob: -4.822381019592285
    4. ' )' → logprob: -6.947381019592285
    5. ' +' → logprob: -10.447381019592285
    6. ']+' → logprob: -11.197381019592285
    7. ' ' → logprob: -11.947381019592285
    8. '1' → logprob: -12.197381019592285
    9. ')+(' → logprob: -12.322381019592285
    10. ' plus' → logprob: -13.322381019592285

Token 43: '1' (ID: 16)
  Prédit: '1'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '1' → logprob: -0.0015024791937321424
    2. ' ' → logprob: -6.501502513885498
    3. '```' → logprob: -17.251502990722656
    4. '   ' → logprob: -17.876502990722656
    5. '  ' → logprob: -18.126502990722656
    6. '<|end|>' → logprob: -18.626502990722656
    7. ' ' → logprob: -18.876502990722656
    8. '１' → logprob: -19.376502990722656
    9. '۱' → logprob: -19.501502990722656
    10. '`' → logprob: -19.689002990722656

Token 44: '
' (ID: 198)
  Prédit: ''
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False

Token 45: ' R' (ID: 460)
  Prédit: 'for'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'for' → logprob: -0.47135230898857117
    2. 'print' → logprob: -1.8463523387908936
    3. 'except' → logprob: -2.4713523387908936
    4. ' for' → logprob: -2.7213523387908936
    5. ' print' → logprob: -3.9713523387908936
    6. ' except' → logprob: -4.2213521003723145
    7. 'try' → logprob: -4.7213521003723145
    8. ' ' → logprob: -5.2213521003723145
    9. ' 
' → logprob: -5.4713521003723145
    10. ' try' → logprob: -5.7213521003723145

Token 46: '=[' (ID: 13370)
  Prédit: '='
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '=' → logprob: -0.009393952786922455
    2. ' =' → logprob: -4.75939416885376
    3. '=[' → logprob: -9.134393692016602
    4. ' ' → logprob: -9.759393692016602
    5. '[' → logprob: -9.759393692016602
    6. '={}' → logprob: -9.759393692016602
    7. '=e' → logprob: -10.009393692016602
    8. 'es' → logprob: -10.134393692016602
    9. 'eturn' → logprob: -10.259393692016602
    10. '.' → logprob: -10.259393692016602

Token 47: 'v' (ID: 85)
  Prédit: 'v'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'v' → logprob: -1.0974458456039429
    2. '(v' → logprob: -1.5974458456039429
    3. 'Y' → logprob: -2.4724459648132324
    4. '(Y' → logprob: -2.7224459648132324
    5. 'i' → logprob: -3.2224459648132324
    6. ' v' → logprob: -3.3474459648132324
    7. 'y' → logprob: -3.3474459648132324
    8. '(i' → logprob: -3.4724459648132324
    9. ' Y' → logprob: -3.7224459648132324
    10. '(y' → logprob: -3.7224459648132324

Token 48: ' for' (ID: 395)
  Prédit: ' for'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' for' → logprob: -0.005937448237091303
    2. 'for' → logprob: -5.130937576293945
    3. ' ' → logprob: -11.880937576293945
    4. '	for' → logprob: -14.505937576293945
    5. '/' → logprob: -15.255937576293945
    6. '()' → logprob: -15.380937576293945
    7. ' in' → logprob: -15.380937576293945
    8. ')' → logprob: -15.755937576293945
    9. ' of' → logprob: -16.130937576293945
    10. ' f' → logprob: -16.380937576293945

Token 49: ' v' (ID: 323)
  Prédit: 'v'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'v' → logprob: -0.5876595973968506
    2. ' v' → logprob: -0.9626595973968506
    3. ' Y' → logprob: -3.0876595973968506
    4. 'Y' → logprob: -4.08765983581543
    5. ',v' → logprob: -10.33765983581543
    6. ' in' → logprob: -11.08765983581543
    7. '	v' → logprob: -11.21265983581543
    8. ' ' → logprob: -11.33765983581543
    9. ' y' → logprob: -11.71265983581543
    10. 'y' → logprob: -11.83765983581543

Token 50: ' in' (ID: 306)
  Prédit: ' in'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' in' → logprob: -0.01817324012517929
    2. 'in' → logprob: -4.0181732177734375
    3. ' ' → logprob: -10.893173217773438
    4. 'v' → logprob: -13.143173217773438
    5. '	in' → logprob: -14.018173217773438
    6. 'i' → logprob: -15.268173217773438
    7. 'In' → logprob: -15.393173217773438
    8. ' i' → logprob: -15.643173217773438
    9. '<|end|>' → logprob: -15.768173217773438
    10. '```' → logprob: -15.893173217773438

Token 51: ' Y' (ID: 865)
  Prédit: ' Y'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' Y' → logprob: -0.20146051049232483
    2. 'Y' → logprob: -1.7014604806900024
    3. '(Y' → logprob: -10.076460838317871
    4. '	Y' → logprob: -13.201460838317871
    5. '[Y' → logprob: -13.201460838317871
    6. ' ' → logprob: -14.076460838317871
    7. ',Y' → logprob: -15.076460838317871
    8. '_Y' → logprob: -16.451459884643555
    9. ')' → logprob: -16.701459884643555
    10. ':Y' → logprob: -16.826459884643555

Token 52: '.values' (ID: 20422)
  Prédit: '.values'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '.values' → logprob: -0.0009188431431539357
    2. '.' → logprob: -7.375918865203857
    3. ' .' → logprob: -8.2509183883667
    4. ' values' → logprob: -10.7509183883667
    5. 'values' → logprob: -11.7509183883667
    6. '.Values' → logprob: -13.5009183883667
    7. '.value' → logprob: -15.3759183883667
    8. ' ' → logprob: -16.000919342041016
    9. ' if' → logprob: -16.250919342041016
    10. '	values' → logprob: -16.875919342041016

Token 53: '()' (ID: 416)
  Prédit: '()'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '()' → logprob: -0.08070731908082962
    2. '()]' → logprob: -2.580707311630249
    3. ' ()' → logprob: -6.330707550048828
    4. ' if' → logprob: -11.205707550048828
    5. '())' → logprob: -12.080707550048828
    6. ']' → logprob: -12.455707550048828
    7. '()][' → logprob: -12.705707550048828
    8. 'if' → logprob: -12.955707550048828
    9. '()>' → logprob: -13.330707550048828
    10. '(' → logprob: -13.455707550048828

Token 54: 'if' (ID: 366)
  Prédit: ' if'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' if' → logprob: -0.008644239977002144
    2. 'if' → logprob: -4.758644104003906
    3. ' ' → logprob: -10.508644104003906
    4. ']' → logprob: -13.508644104003906
    5. ' ]' → logprob: -14.008644104003906
    6. ' for' → logprob: -16.008644104003906
    7. '  ' → logprob: -18.258644104003906
    8. '()' → logprob: -18.508644104003906
    9. '	if' → logprob: -19.258644104003906
    10. ' If' → logprob: -19.258644104003906

Token 55: ' v' (ID: 323)
  Prédit: ' v'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' v' → logprob: -0.1002146452665329
    2. 'v' → logprob: -2.350214719772339
    3. ' ' → logprob: -12.225214958190918
    4. '>' → logprob: -13.850214958190918
    5. '	v' → logprob: -13.975214958190918
    6. '   ' → logprob: -15.600214958190918
    7. '1' → logprob: -15.975214958190918
    8. ' ' → logprob: -15.975214958190918
    9. '    ' → logprob: -16.2252140045166
    10. '  ' → logprob: -16.2252140045166

Token 56: '>' (ID: 29)
  Prédit: '>'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '>' → logprob: -0.055313590914011
    2. ' >' → logprob: -2.9303135871887207
    3. ' ' → logprob: -7.930313587188721
    4. '>=' → logprob: -9.805314064025879
    5. ' >=' → logprob: -11.805314064025879
    6. '&gt' → logprob: -13.055314064025879
    7. ' ' → logprob: -13.930314064025879
    8. '">' → logprob: -14.555314064025879
    9. '()>' → logprob: -14.555314064025879
    10. '>

' → logprob: -14.680314064025879

Token 57: '1' (ID: 16)
  Prédit: '1'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '1' → logprob: -0.0019432762637734413
    2. ' ' → logprob: -6.251943111419678
    3. '>' → logprob: -11.626943588256836
    4. '0' → logprob: -13.376943588256836
    5. '=' → logprob: -13.626943588256836
    6. '2' → logprob: -14.064443588256836
    7. '<|end|>' → logprob: -14.439443588256836
    8. '```' → logprob: -15.251943588256836
    9. '１' → logprob: -15.689443588256836
    10. '
' → logprob: -16.189443588256836

Token 58: ']
' (ID: 1592)
  Prédit: ']'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ']' → logprob: -0.00658190855756402
    2. ' ]' → logprob: -5.256581783294678
    3. ')]' → logprob: -6.756581783294678
    4. ']
' → logprob: -9.006582260131836
    5. ')' → logprob: -10.381582260131836
    6. '()]' → logprob: -12.131582260131836
    7. ' ]
' → logprob: -12.506582260131836
    8. '])' → logprob: -12.631582260131836
    9. ']+' → logprob: -12.756582260131836
    10. ']

' → logprob: -13.006582260131836

Token 59: ' S' (ID: 336)
  Prédit: ''
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False

Token 60: '=sum' (ID: 174693)
  Prédit: '='
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '=' → logprob: -0.07943980395793915
    2. '=sum' → logprob: -2.704439878463745
    3. 'um' → logprob: -4.829439640045166
    4. ' =' → logprob: -6.704439640045166
    5. '=s' → logprob: -9.954440116882324
    6. '=[]' → logprob: -10.079440116882324
    7. '=max' → logprob: -10.204440116882324
    8. '=

' → logprob: -10.704440116882324
    9. 'sum' → logprob: -11.204440116882324
    10. '=len' → logprob: -11.454440116882324

Token 61: '(((' (ID: 13163)
  Prédit: '(v'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '(v' → logprob: -0.23997189104557037
    2. '(r' → logprob: -2.614971876144409
    3. '(x' → logprob: -2.989971876144409
    4. '([' → logprob: -3.489971876144409
    5. '(' → logprob: -3.989971876144409
    6. '(i' → logprob: -4.364972114562988
    7. '[v' → logprob: -4.864972114562988
    8. '(R' → logprob: -5.864972114562988
    9. '(k' → logprob: -5.864972114562988
    10. '((' → logprob: -5.989972114562988

Token 62: 'n' (ID: 77)
  Prédit: 'v'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'v' → logprob: -0.1023687869310379
    2. 'r' → logprob: -2.9773688316345215
    3. 'x' → logprob: -3.9773688316345215
    4. 'k' → logprob: -4.2273688316345215
    5. 'i' → logprob: -4.9773688316345215
    6. 'n' → logprob: -6.1023688316345215
    7. 'c' → logprob: -6.4773688316345215
    8. ' v' → logprob: -6.8523688316345215
    9. '(v' → logprob: -7.6023688316345215
    10. 'a' → logprob: -8.852368354797363

Token 63: '*(' (ID: 14793)
  Prédit: '*('
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '*(' → logprob: -0.09706112742424011
    2. ')*(' → logprob: -2.7220611572265625
    3. '-' → logprob: -4.5970611572265625
    4. ' *(' → logprob: -5.0970611572265625
    5. '*n' → logprob: -5.7220611572265625
    6. '*' → logprob: -6.2220611572265625
    7. ' *' → logprob: -6.2220611572265625
    8. '*v' → logprob: -6.8470611572265625
    9. ')*' → logprob: -7.2220611572265625
    10. ')' → logprob: -7.7220611572265625

Token 64: 'n' (ID: 77)
  Prédit: 'n'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'n' → logprob: -0.00014072739577386528
    2. ' n' → logprob: -9.000141143798828
    3. '(n' → logprob: -11.625141143798828
    4. '-' → logprob: -12.625141143798828
    5. 'v' → logprob: -13.000141143798828
    6. '	n' → logprob: -14.375141143798828
    7. ')n' → logprob: -14.375141143798828
    8. '```' → logprob: -14.375141143798828
    9. '_n' → logprob: -14.875141143798828
    10. '-n' → logprob: -16.000141143798828

Token 65: '-' (ID: 12)
  Prédit: '-'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '-' → logprob: -0.030567428097128868
    2. ' -' → logprob: -4.030567646026611
    3. '1' → logprob: -4.405567646026611
    4. ' ' → logprob: -9.155567169189453
    5. '```' → logprob: -12.280567169189453
    6. ' )' → logprob: -12.405567169189453
    7. ')' → logprob: -12.655567169189453
    8. ')-' → logprob: -12.655567169189453
    9. '2' → logprob: -13.655567169189453
    10. '  ' → logprob: -14.093067169189453

Token 66: '1' (ID: 16)
  Prédit: '1'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '1' → logprob: -0.0001895935565698892
    2. ' ' → logprob: -8.625189781188965
    3. ')' → logprob: -11.875189781188965
    4. ' )' → logprob: -14.000189781188965
    5. '2' → logprob: -14.500189781188965
    6. ')/' → logprob: -14.625189781188965
    7. '```' → logprob: -14.812689781188965
    8. '１' → logprob: -16.06268882751465
    9. '  ' → logprob: -16.12518882751465
    10. '۱' → logprob: -16.43768882751465

Token 67: '))' (ID: 915)
  Prédit: ')//'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')//' → logprob: -0.014111669734120369
    2. ' )' → logprob: -4.889111518859863
    3. ')' → logprob: -5.264111518859863
    4. '))' → logprob: -6.889111518859863
    5. '//' → logprob: -8.514111518859863
    6. ')>>' → logprob: -10.139111518859863
    7. ')/' → logprob: -10.389111518859863
    8. ' //' → logprob: -11.764111518859863
    9. ' ' → logprob: -12.139111518859863
    10. ' ))' → logprob: -13.139111518859863

Token 68: '//' (ID: 393)
  Prédit: ')//'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')//' → logprob: -0.23788216710090637
    2. ')' → logprob: -2.487882137298584
    3. '//' → logprob: -2.737882137298584
    4. ' )' → logprob: -2.862882137298584
    5. ' //' → logprob: -5.112882137298584
    6. ')>>' → logprob: -7.487882137298584
    7. ')/' → logprob: -9.112882614135742
    8. ' ' → logprob: -10.112882614135742
    9. '>//' → logprob: -10.862882614135742
    10. '```' → logprob: -11.237882614135742

Token 69: '2' (ID: 17)
  Prédit: '2'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '2' → logprob: -0.0013320252764970064
    2. ' ' → logprob: -6.626331806182861
    3. ')' → logprob: -12.87633228302002
    4. '   ' → logprob: -14.18883228302002
    5. '  ' → logprob: -14.56383228302002
    6. '

' → logprob: -15.06383228302002
    7. '```' → logprob: -15.06383228302002
    8. ' ' → logprob: -15.31383228302002
    9. ' )' → logprob: -15.31383228302002
    10. '۲' → logprob: -15.81383228302002

Token 70: ' for' (ID: 395)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')' → logprob: -0.5526975393295288
    2. ' for' → logprob: -0.9276975393295288
    3. ' )' → logprob: -3.8026976585388184
    4. 'for' → logprob: -5.052697658538818
    5. ' ' → logprob: -7.802697658538818
    6. '))' → logprob: -11.17769718170166
    7. ' ))' → logprob: -12.67769718170166
    8. ')n' → logprob: -12.80269718170166
    9. ')+' → logprob: -12.92769718170166
    10. '  ' → logprob: -13.55269718170166

Token 71: ' n' (ID: 297)
  Prédit: ' R'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' R' → logprob: -0.20314180850982666
    2. 'R' → logprob: -1.7031418085098267
    3. 'r' → logprob: -7.078141689300537
    4. ' r' → logprob: -7.453141689300537
    5. 'v' → logprob: -8.953142166137695
    6. ' v' → logprob: -9.203142166137695
    7. ' ' → logprob: -10.453142166137695
    8. ')' → logprob: -10.453142166137695
    9. '	R' → logprob: -12.703142166137695
    10. ' ' → logprob: -12.828142166137695

Token 72: ' in' (ID: 306)
  Prédit: ' R'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' R' → logprob: -0.02560126781463623
    2. 'R' → logprob: -3.900601387023926
    3. ' in' → logprob: -5.650601387023926
    4. ')' → logprob: -6.775601387023926
    5. ' ' → logprob: -8.650601387023926
    6. ' )' → logprob: -9.150601387023926
    7. '<|end|>' → logprob: -9.275601387023926
    8. ' v' → logprob: -13.275601387023926
    9. 'in' → logprob: -13.275601387023926
    10. 's' → logprob: -13.525601387023926

Token 73: ' R' (ID: 460)
  Prédit: 'R'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'R' → logprob: -0.6931585073471069
    2. ' R' → logprob: -0.6931585073471069
    3. ')' → logprob: -12.068158149719238
    4. ' ' → logprob: -12.443158149719238
    5. '<|end|>' → logprob: -14.443158149719238
    6. '	R' → logprob: -15.068158149719238
    7. '[R' → logprob: -15.943158149719238
    8. '[' → logprob: -16.068159103393555
    9. '_R' → logprob: -16.318159103393555
    10. '(R' → logprob: -16.568159103393555

Token 74: '))
' (ID: 2210)
  Prédit: '))'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '))' → logprob: -0.1271895170211792
    2. ')' → logprob: -2.1271896362304688
    3. ')))' → logprob: -8.377189636230469
    4. ' ))' → logprob: -11.377189636230469
    5. '))
' → logprob: -11.502189636230469
    6. ' )' → logprob: -12.627189636230469
    7. ')
' → logprob: -13.252189636230469
    8. '),' → logprob: -13.502189636230469
    9. ' ' → logprob: -14.252189636230469
    10. '))))' → logprob: -14.627189636230469

Token 75: ' print' (ID: 2123)
  Prédit: 'print'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'print' → logprob: -0.387207567691803
    2. ' print' → logprob: -1.1372075080871582
    3. ' except' → logprob: -8.387207984924316
    4. 'except' → logprob: -9.512207984924316
    5. '<|end|>' → logprob: -10.887207984924316
    6. '
' → logprob: -11.512207984924316
    7. '```' → logprob: -13.387207984924316
    8. ' 
' → logprob: -13.637207984924316
    9. '	print' → logprob: -14.137207984924316
    10. '.print' → logprob: -14.762207984924316

Token 76: '(S' (ID: 6181)
  Prédit: '(S'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(S' → logprob: -0.004141687415540218
    2. '(' → logprob: -5.504141807556152
    3. '(s' → logprob: -9.754141807556152
    4. ' (' → logprob: -12.629141807556152
    5. '('' → logprob: -13.754141807556152
    6. '((' → logprob: -15.504141807556152
    7. '()' → logprob: -15.504141807556152
    8. 'S' → logprob: -15.879141807556152
    9. 's' → logprob: -16.379140853881836
    10. '("' → logprob: -16.629140853881836

Token 77: ')
' (ID: 446)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')' → logprob: -2.3080716346157715e-05
    2. ' )' → logprob: -11.000022888183594
    3. '))' → logprob: -12.125022888183594
    4. ')
' → logprob: -14.375022888183594
    5. ')`' → logprob: -16.000022888183594
    6. '`)' → logprob: -16.250022888183594
    7. ')))' → logprob: -17.250022888183594
    8. ')#' → logprob: -17.500022888183594
    9. '）' → logprob: -17.750022888183594
    10. ')}' → logprob: -18.625022888183594

Token 78: 'except' (ID: 25035)
  Prédit: ''
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False

Token 79: ':
' (ID: 734)
  Prédit: ' Exception'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' Exception' → logprob: -0.36834776401519775
    2. ' ' → logprob: -1.3683477640151978
    3. ':' → logprob: -3.243347644805908
    4. ' EOF' → logprob: -5.368347644805908
    5. ' ' → logprob: -5.993347644805908
    6. ' :' → logprob: -5.993347644805908
    7. ' Value' → logprob: -6.368347644805908
    8. ' Keyboard' → logprob: -7.243347644805908
    9. '<|end|>' → logprob: -7.368347644805908
    10. ' except' → logprob: -7.993347644805908

Token 80: ' print' (ID: 2123)
  Prédit: ' pass'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' pass' → logprob: -0.0002905334113165736
    2. 'pass' → logprob: -8.250290870666504
    3. '	pass' → logprob: -11.250290870666504
    4. ' print' → logprob: -11.875290870666504
    5. ' ' → logprob: -12.625290870666504
    6. '0' → logprob: -13.125290870666504
    7. ' break' → logprob: -13.750290870666504
    8. ' Pass' → logprob: -14.250290870666504
    9. ' exit' → logprob: -14.750290870666504
    10. ' continue' → logprob: -15.250290870666504

Token 81: '(' (ID: 7)
  Prédit: '()'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '()' → logprob: -0.4572766125202179
    2. '(' → logprob: -1.0822765827178955
    3. '('' → logprob: -4.207276821136475
    4. '("' → logprob: -4.832276821136475
    5. '("")' → logprob: -6.332276821136475
    6. ' ()' → logprob: -7.207276821136475
    7. '(False' → logprob: -7.582276821136475
    8. '(None' → logprob: -7.832276821136475
    9. '(Exception' → logprob: -7.957276821136475
    10. '(len' → logprob: -8.207276344299316

Token 82: '0' (ID: 15)
  Prédit: '0'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '0' → logprob: -0.2501069903373718
    2. '"' → logprob: -1.8751070499420166
    3. ' ' → logprob: -3.6251070499420166
    4. ''' → logprob: -4.0001068115234375
    5. ')' → logprob: -4.2501068115234375
    6. '")' → logprob: -5.0001068115234375
    7. '')' → logprob: -7.5001068115234375
    8. '1' → logprob: -8.000106811523438
    9. '-' → logprob: -8.000106811523438
    10. ' )' → logprob: -9.250106811523438

Token 83: ')' (ID: 8)
  Prédit: ')'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')' → logprob: -1.9266199160483666e-05
    2. ' )' → logprob: -11.125019073486328
    3. '`)' → logprob: -12.750019073486328
    4. ')
' → logprob: -14.375019073486328
    5. '))' → logprob: -15.250019073486328
    6. ')`' → logprob: -15.375019073486328
    7. '')' → logprob: -16.125019073486328
    8. '})' → logprob: -16.250019073486328
    9. ')}' → logprob: -16.375019073486328
    10. '())' → logprob: -17.000019073486328


RÉSUMÉ:
--------------------------------------------------------------------------------
Total des tokens analysés: 81
Tokens correctement prédits (1ère position, stricte): 33
Tokens correctement prédits (1ère position, avec adaptation): 33
Tokens correctement prédits (top 10): 64
Précision stricte (1ère position): 40.74%
Précision adaptée (1ère position): 40.74%
Précision (top 10): 79.01%
================================================================================
