================================================================================
ANALYSE DE PRÉDICTION TOKEN PAR TOKEN (BATCH API)
Date: 2025-06-04 19:25:54
Modèle de tokenisation: gpt-4o-mini
================================================================================

SCRIPT ANALYSÉ:
--------------------------------------------------------------------------------
import sys  # On importe le module sys qui permet d'interagir avec l'interpréteur Python, notamment pour la lecture et l'écriture standard

input = sys.stdin.readline  # On assigne la fonction readline de sys.stdin à la variable input pour permettre une lecture efficace d'une ligne depuis l'entrée standard

# On lit une ligne depuis l'entrée standard, puis on supprime les espaces de début et de fin et on découpe cette ligne en une liste de chaînes sur chaque espace rencontré.
# Ensuite, on applique la fonction int à chaque chaîne pour la transformer en entier grâce à la fonction map. On transforme le résultat de map en une liste d'entiers.
abc = list(map(int, input().split()))

# On transforme la liste abc en un ensemble (set) pour éliminer tous les doublons, car un ensemble ne peut contenir des éléments identiques.
# Ensuite, on calcule le nombre d'éléments distincts présents dans abc à l'aide de la fonction len, qui retourne la taille de l'ensemble.
res = len(set(abc))

# On effectue un test conditionnel :
# Si le nombre d'éléments distincts est égal à 1 (donc tous les éléments sont identiques)
# OU
# Si le nombre d'éléments distincts est égal à 3 (donc chaque élément est différent des deux autres)
if res == 1 or res == 3:
    print("No")  # Si au moins une des deux conditions est vraie, on affiche le texte "No" à l'écran
else:
    print("Yes")  # Sinon, on affiche "Yes" à l'écran (dans ce cas, il doit y avoir exactement deux valeurs identiques et une différente)
--------------------------------------------------------------------------------

RÉSULTATS D'ANALYSE TOKEN PAR TOKEN:
--------------------------------------------------------------------------------
Token 0: 'import' (ID: 561)
  → Token d'amorce (pas de prédiction)

Token 1: ' sys' (ID: 12228)
  → Token d'amorce (pas de prédiction)

Token 2: ' ' (ID: 220)
  → Token d'amorce (pas de prédiction)

Token 3: ' #' (ID: 1069)
  Prédit: '.'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '.' → logprob: -0.19897283613681793
    2. '\n' → logprob: -1.9489728212356567
    3. '\' → logprob: -4.448972702026367
    4. '<|end|>' → logprob: -4.573972702026367
    5. 'import' → logprob: -5.323972702026367
    6. 'newline' → logprob: -5.448972702026367
    7. '```' → logprob: -6.323972702026367
    8. '<|end|>' → logprob: -6.823972702026367
    9. '\r' → logprob: -6.948972702026367
    10. '' → logprob: -7.323972702026367

Token 4: ' On' (ID: 2160)
  Prédit: '.'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '.' → logprob: -0.022880390286445618
    2. ' .' → logprob: -4.647880554199219
    3. '<|end|>' → logprob: -5.147880554199219
    4. ' ' → logprob: -6.147880554199219
    5. '<|end|>' → logprob: -6.647880554199219
    6. 'import' → logprob: -6.772880554199219
    7. '.import' → logprob: -7.272880554199219
    8. ',' → logprob: -7.772880554199219
    9. '.system' → logprob: -8.272880554199219
    10. '.e' → logprob: -8.647880554199219

Token 5: ' importe' (ID: 80493)
  Prédit: 'e'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'e' → logprob: -0.07638358324766159
    2. ' e' → logprob: -2.826383590698242
    3. '_' → logprob: -4.826383590698242
    4. ' ' → logprob: -5.951383590698242
    5. ' import' → logprob: -6.451383590698242
    6. ' space' → logprob: -8.076383590698242
    7. 'ly' → logprob: -8.576383590698242
    8. 'es' → logprob: -8.951383590698242
    9. 'eline' → logprob: -8.951383590698242
    10. 'l' → logprob: -8.951383590698242

Token 6: ' le' (ID: 505)
  Prédit: ' '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' ' → logprob: -0.7033162117004395
    2. ' sys' → logprob: -1.2033162117004395
    3. ' os' → logprob: -2.2033162117004395
    4. '.' → logprob: -3.4533162117004395
    5. 'sys' → logprob: -3.8283162117004395
    6. ',' → logprob: -4.3283162117004395
    7. '_' → logprob: -4.9533162117004395
    8. 'os' → logprob: -5.2033162117004395
    9. '  ' → logprob: -5.5783162117004395
    10. 'space' → logprob: -6.3283162117004395

Token 7: ' module' (ID: 8827)
  Prédit: 'module'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'module' → logprob: -0.71055668592453
    2. 's' → logprob: -0.96055668592453
    3. 'sys' → logprob: -2.210556745529175
    4. 'mod' → logprob: -4.710556507110596
    5. 'import' → logprob: -7.210556507110596
    6. 'code' → logprob: -7.210556507110596
    7. 'system' → logprob: -7.335556507110596
    8. 'modules' → logprob: -7.460556507110596
    9. ' système' → logprob: -7.460556507110596
    10. 'temps' → logprob: -7.585556507110596

Token 8: ' sys' (ID: 12228)
  Prédit: '.'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '.' → logprob: -0.05450158938765526
    2. 'import' → logprob: -3.804501533508301
    3. '' → logprob: -5.054501533508301
    4. ' ' → logprob: -5.304501533508301
    5. '
' → logprob: -5.429501533508301
    6. '\n' → logprob: -5.429501533508301
    7. '\' → logprob: -5.804501533508301
    8. '```' → logprob: -6.429501533508301
    9. ',' → logprob: -6.554501533508301
    10. '<|end|>' → logprob: -6.929501533508301

Token 9: ' qui' (ID: 2780)
  Prédit: '.'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '.' → logprob: -0.04076781123876572
    2. '\n' → logprob: -3.9157679080963135
    3. '
' → logprob: -4.790767669677734
    4. '\' → logprob: -5.290767669677734
    5. 'import' → logprob: -6.415767669677734
    6. 'newline' → logprob: -7.040767669677734
    7. '' → logprob: -7.165767669677734
    8. '<|end|>' → logprob: -7.290767669677734
    9. ' ' → logprob: -7.415767669677734
    10. ',' → logprob: -7.790767669677734

Token 10: ' permet' (ID: 11798)
  Prédit: 'per'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'per' → logprob: -0.5546079277992249
    2. ' permet' → logprob: -1.05460786819458
    3. ' fournit' → logprob: -3.80460786819458
    4. 'f' → logprob: -4.05460786819458
    5. 'cont' → logprob: -4.17960786819458
    6. 'perm' → logprob: -5.92960786819458
    7. ' contient' → logprob: -5.92960786819458
    8. ' nous' → logprob: -6.05460786819458
    9. 'nous' → logprob: -6.17960786819458
    10. 'provid' → logprob: -6.42960786819458

Token 11: ' d' (ID: 272)
  Prédit: '.'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '.' → logprob: -0.04725288972258568
    2. ' .' → logprob: -3.547252893447876
    3. 'import' → logprob: -4.797252655029297
    4. ' ' → logprob: -5.672252655029297
    5. ' de' → logprob: -7.172252655029297
    6. '.import' → logprob: -7.297252655029297
    7. '.sys' → logprob: -7.297252655029297
    8. ',' → logprob: -7.672252655029297
    9. '  ' → logprob: -7.672252655029297
    10. ' import' → logprob: -8.422252655029297

Token 12: ''inter' (ID: 55731)
  Prédit: '''
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ''' → logprob: -0.37784701585769653
    2. ''acc' → logprob: -1.8778469562530518
    3. ''import' → logprob: -3.0028469562530518
    4. ''ex' → logprob: -3.7528469562530518
    5. ''inter' → logprob: -4.002847194671631
    6. ''utiliser' → logprob: -4.002847194671631
    7. '_' → logprob: -4.127847194671631
    8. ''accès' → logprob: -4.377847194671631
    9. ''ac' → logprob: -4.752847194671631
    10. ''effect' → logprob: -6.252847194671631

Token 13: 'agir' (ID: 105832)
  Prédit: 'agir'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'agir' → logprob: -0.26026269793510437
    2. 'rom' → logprob: -1.6352627277374268
    3. 'preter' → logprob: -4.885262489318848
    4. 'cepter' → logprob: -5.135262489318848
    5. 'dire' → logprob: -5.760262489318848
    6. 'rompt' → logprob: -5.760262489318848
    7. 'venir' → logprob: -6.135262489318848
    8. 'ag' → logprob: -6.135262489318848
    9. 'pr' → logprob: -6.635262489318848
    10. 'rag' → logprob: -6.885262489318848

Token 14: ' avec' (ID: 3937)
  Prédit: ' with'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' with' → logprob: -1.0309792757034302
    2. ' avec' → logprob: -1.0309792757034302
    3. 'with' → logprob: -1.7809792757034302
    4. ' ' → logprob: -2.5309791564941406
    5. 'avec' → logprob: -4.155979156494141
    6. 'import' → logprob: -4.655979156494141
    7. '.' → logprob: -5.405979156494141
    8. '_' → logprob: -6.155979156494141
    9. '<|end|>' → logprob: -6.155979156494141
    10. ',' → logprob: -6.780979156494141

Token 15: ' l' (ID: 305)
  Prédit: ' l'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' l' → logprob: -0.23621602356433868
    2. ' le' → logprob: -2.4862160682678223
    3. ' ' → logprob: -3.2362160682678223
    4. 'l' → logprob: -3.3612160682678223
    5. 'le' → logprob: -3.4862160682678223
    6. ' les' → logprob: -4.736216068267822
    7. ' sys' → logprob: -4.986216068267822
    8. 'les' → logprob: -6.111216068267822
    9. 'sys' → logprob: -6.986216068267822
    10. ' ' → logprob: -7.986216068267822

Token 16: ''inter' (ID: 55731)
  Prédit: '''
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ''' → logprob: -0.0998091921210289
    2. ''environnement' → logprob: -3.349809169769287
    3. ''utilisateur' → logprob: -4.224809169769287
    4. 'a' → logprob: -4.724809169769287
    5. ''application' → logprob: -4.724809169769287
    6. ''a' → logprob: -4.974809169769287
    7. 'e' → logprob: -5.224809169769287
    8. ''inter' → logprob: -6.224809169769287
    9. ''espace' → logprob: -6.599809169769287
    10. 'es' → logprob: -6.724809169769287

Token 17: 'pré' (ID: 192449)
  Prédit: 'p'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'p' → logprob: -0.09968814253807068
    2. 'face' → logprob: -3.3496880531311035
    3. 'a' → logprob: -3.8496880531311035
    4. 'preter' → logprob: -4.5996880531311035
    5. 'f' → logprob: -4.9746880531311035
    6. 'pr' → logprob: -5.4746880531311035
    7. '```' → logprob: -5.7246880531311035
    8. 'pré' → logprob: -5.8496880531311035
    9. 'n' → logprob: -6.2246880531311035
    10. '#' → logprob: -6.3496880531311035

Token 18: 'teur' (ID: 45262)
  Prédit: 'teur'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'teur' → logprob: -0.13064692914485931
    2. 'te' → logprob: -2.1306469440460205
    3. 'ter' → logprob: -6.380646705627441
    4. 't' → logprob: -7.755646705627441
    5. '`' → logprob: -7.880646705627441
    6. '```' → logprob: -8.005646705627441
    7. '#' → logprob: -8.380646705627441
    8. '\' → logprob: -8.630646705627441
    9. 'teurs' → logprob: -8.630646705627441
    10. '́' → logprob: -10.005646705627441

Token 19: ' Python' (ID: 26534)
  Prédit: '.'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '.' → logprob: -0.21560995280742645
    2. '
' → logprob: -2.5906100273132324
    3. '\n' → logprob: -2.5906100273132324
    4. 'import' → logprob: -4.215610027313232
    5. ',' → logprob: -4.590610027313232
    6. '\' → logprob: -4.965610027313232
    7. '' → logprob: -5.465610027313232
    8. '<|end|>' → logprob: -6.215610027313232
    9. '```' → logprob: -6.715610027313232
    10. 'newline' → logprob: -7.215610027313232

Token 20: ',' (ID: 11)
  Prédit: '.'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '.' → logprob: -0.7520459890365601
    2. '
' → logprob: -1.00204598903656
    3. '\n' → logprob: -2.7520461082458496
    4. '' → logprob: -3.3770461082458496
    5. '

' → logprob: -4.12704610824585
    6. ',' → logprob: -4.50204610824585
    7. ' ' → logprob: -4.62704610824585
    8. 'import' → logprob: -4.62704610824585
    9. '\' → logprob: -4.87704610824585
    10. '<|end|>' → logprob: -6.12704610824585

Token 21: ' notamment' (ID: 31782)
  Prédit: '.'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '.' → logprob: -0.8556256890296936
    2. ',' → logprob: -1.4806256294250488
    3. 'import' → logprob: -2.480625629425049
    4. '
' → logprob: -2.605625629425049
    5. ' ' → logprob: -3.105625629425049
    6. '\' → logprob: -3.355625629425049
    7. '\n' → logprob: -3.480625629425049
    8. ' ,' → logprob: -3.980625629425049
    9. '```' → logprob: -4.230625629425049
    10. '<|end|>' → logprob: -4.355625629425049

Token 22: ' pour' (ID: 1930)
  Prédit: '.'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '.' → logprob: -0.07840383052825928
    2. ' .' → logprob: -3.578403949737549
    3. ' ' → logprob: -3.703403949737549
    4. '\' → logprob: -4.828403949737549
    5. ',' → logprob: -5.453403949737549
    6. 'import' → logprob: -5.828403949737549
    7. '\n' → logprob: -6.828403949737549
    8. 'es' → logprob: -6.953403949737549
    9. ' ,' → logprob: -7.328403949737549
    10. '_' → logprob: -7.453403949737549

Token 23: ' la' (ID: 557)
  Prédit: ' récupérer'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' récupérer' → logprob: -0.4634287655353546
    2. ' argv' → logprob: -3.0884287357330322
    3. 'prendre' → logprob: -3.3384287357330322
    4. 'sys' → logprob: -3.3384287357330322
    5. ' utiliser' → logprob: -3.7134287357330322
    6. ' accéder' → logprob: -3.7134287357330322
    7. 'r' → logprob: -3.8384287357330322
    8. 'import' → logprob: -3.9634287357330322
    9. 'ex' → logprob: -3.9634287357330322
    10. ' sys' → logprob: -4.088428974151611

Token 24: ' lecture' (ID: 31993)
  Prédit: 'ligne'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'ligne' → logprob: -1.603043794631958
    2. 'ex' → logprob: -1.728043794631958
    3. 'version' → logprob: -1.853043794631958
    4. ' ligne' → logprob: -2.728043794631958
    5. 'commande' → logprob: -2.978043794631958
    6. 'execution' → logprob: -2.978043794631958
    7. 'gestion' → logprob: -3.353043794631958
    8. 'import' → logprob: -3.728043794631958
    9. ' manipulation' → logprob: -3.728043794631958
    10. 'fonction' → logprob: -3.853043794631958

Token 25: ' et' (ID: 859)
  Prédit: '.'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '.' → logprob: -0.36898016929626465
    2. ',' → logprob: -1.4939801692962646
    3. ' ' → logprob: -3.2439801692962646
    4. ')' → logprob: -4.493980407714844
    5. '\' → logprob: -4.743980407714844
    6. 'e' → logprob: -5.243980407714844
    7. 'import' → logprob: -5.368980407714844
    8. '_' → logprob: -5.618980407714844
    9. '[' → logprob: -5.868980407714844
    10. '\n' → logprob: -6.743980407714844

Token 26: ' l' (ID: 305)
  Prédit: ' l'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' l' → logprob: -0.06279188394546509
    2. 'l' → logprob: -2.9377918243408203
    3. 'é' → logprob: -5.06279182434082
    4. ' ' → logprob: -7.93779182434082
    5. ' la' → logprob: -8.31279182434082
    6. 'la' → logprob: -8.93779182434082
    7. '	l' → logprob: -9.43779182434082
    8. 'criture' → logprob: -9.43779182434082
    9. '’écriture' → logprob: -9.56279182434082
    10. ' écr' → logprob: -9.68779182434082

Token 27: ''é' (ID: 12728)
  Prédit: ''é'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ''é' → logprob: -0.29660478234291077
    2. 'é' → logprob: -1.5466047525405884
    3. '’écriture' → logprob: -3.421604871749878
    4. ''ex' → logprob: -5.546604633331299
    5. 'a' → logprob: -5.921604633331299
    6. 'criture' → logprob: -6.796604633331299
    7. ''' → logprob: -7.171604633331299
    8. 'e' → logprob: -7.921604633331299
    9. 'ex' → logprob: -8.171605110168457
    10. ''utilisation' → logprob: -8.421605110168457

Token 28: 'criture' (ID: 103247)
  Prédit: 'criture'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'criture' → logprob: -0.006446661427617073
    2. '#' → logprob: -6.631446838378906
    3. '’écriture' → logprob: -6.756446838378906
    4. 'é' → logprob: -6.881446838378906
    5. '\x' → logprob: -7.256446838378906
    6. 'x' → logprob: -7.631446838378906
    7. '%' → logprob: -8.006446838378906
    8. '\' → logprob: -8.256446838378906
    9. '```' → logprob: -8.506446838378906
    10. '##' → logprob: -9.131446838378906

Token 29: ' standard' (ID: 7024)
  Prédit: '.'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '.' → logprob: -0.2117859274148941
    2. '\n' → logprob: -2.5867860317230225
    3. '\' → logprob: -2.7117860317230225
    4. ',' → logprob: -4.211785793304443
    5. '<|end|>' → logprob: -4.336785793304443
    6. 'import' → logprob: -4.711785793304443
    7. '```' → logprob: -6.086785793304443
    8. ' ' → logprob: -6.211785793304443
    9. 'newline' → logprob: -6.336785793304443
    10. '
' → logprob: -6.586785793304443

Token 30: '

' (ID: 279)
  Prédit: '
'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '
' → logprob: -0.4838119447231293
    2. '\n' → logprob: -1.6088119745254517
    3. '' → logprob: -2.608811855316162
    4. '.' → logprob: -3.608811855316162
    5. 'import' → logprob: -3.733811855316162
    6. '

' → logprob: -3.858811855316162
    7. '\' → logprob: -4.358811855316162
    8. ',' → logprob: -4.983811855316162
    9. ' ' → logprob: -4.983811855316162
    10. '#' → logprob: -5.483811855316162

Token 31: 'input' (ID: 2586)
  Prédit: '
'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '
' → logprob: -0.20599500834941864
    2. '\n' → logprob: -2.5809950828552246
    3. '.' → logprob: -2.9559950828552246
    4. '\' → logprob: -4.455995082855225
    5. 'import' → logprob: -4.455995082855225
    6. '' → logprob: -4.580995082855225
    7. '

' → logprob: -4.705995082855225
    8. '```' → logprob: -5.080995082855225
    9. ',' → logprob: -6.080995082855225
    10. '#' → logprob: -6.330995082855225

Token 32: ' =' (ID: 314)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '(' → logprob: -0.02149045653641224
    2. '.' → logprob: -3.8964905738830566
    3. '()' → logprob: -7.771490573883057
    4. ' (' → logprob: -8.521490097045898
    5. '_' → logprob: -8.771490097045898
    6. ')' → logprob: -10.271490097045898
    7. ',' → logprob: -10.771490097045898
    8. 's' → logprob: -10.896490097045898
    9. '=' → logprob: -11.021490097045898
    10. '(.)' → logprob: -11.146490097045898

Token 33: ' sys' (ID: 12228)
  Prédit: ' sys'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' sys' → logprob: -0.13387715816497803
    2. 'sys' → logprob: -2.3838772773742676
    3. ' input' → logprob: -3.7588772773742676
    4. 'input' → logprob: -4.633877277374268
    5. ' ' → logprob: -10.25887680053711
    6. '	sys' → logprob: -11.00887680053711
    7. ' lambda' → logprob: -12.00887680053711
    8. '(sys' → logprob: -12.00887680053711
    9. '=sys' → logprob: -12.00887680053711
    10. 'lambda' → logprob: -12.88387680053711

Token 34: '.stdin' (ID: 93480)
  Prédit: '.'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '.' → logprob: -0.003922026138752699
    2. ' .' → logprob: -5.753921985626221
    3. '.stdin' → logprob: -7.628921985626221
    4. '.input' → logprob: -9.503922462463379
    5. '.stdout' → logprob: -9.878922462463379
    6. '.readline' → logprob: -10.128922462463379
    7. '.argv' → logprob: -10.503922462463379
    8. '.import' → logprob: -10.878922462463379
    9. '.exit' → logprob: -12.003922462463379
    10. ' ' → logprob: -12.503922462463379

Token 35: '.readline' (ID: 74673)
  Prédit: '.'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '.' → logprob: -0.5606874823570251
    2. '.readline' → logprob: -0.9356874823570251
    3. '.read' → logprob: -3.31068754196167
    4. 'read' → logprob: -8.560687065124512
    5. '.readlines' → logprob: -9.310687065124512
    6. '.Read' → logprob: -10.185687065124512
    7. '```' → logprob: -11.810687065124512
    8. ' .' → logprob: -11.935687065124512
    9. ' readline' → logprob: -12.185687065124512
    10. '.write' → logprob: -12.185687065124512

Token 36: ' ' (ID: 220)
  Prédit: '()'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '()' → logprob: -0.2583921253681183
    2. '(' → logprob: -1.508392095565796
    3. '()
' → logprob: -5.758392333984375
    4. '(
' → logprob: -5.883392333984375
    5. ')' → logprob: -8.758392333984375
    6. '(

' → logprob: -9.383392333984375
    7. '
' → logprob: -9.508392333984375
    8. '()

' → logprob: -10.008392333984375
    9. ' ' → logprob: -10.258392333984375
    10. '()\' → logprob: -10.508392333984375

Token 37: ' #' (ID: 1069)
  Prédit: '()'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '()' → logprob: -0.004970574285835028
    2. '(' → logprob: -5.379970550537109
    3. '()
' → logprob: -8.37997055053711
    4. '()

' → logprob: -9.75497055053711
    5. '(
' → logprob: -10.62997055053711
    6. '
' → logprob: -11.25497055053711
    7. '()\' → logprob: -12.12997055053711
    8. ')' → logprob: -12.37997055053711
    9. '(

' → logprob: -12.75497055053711
    10. '().' → logprob: -13.12997055053711

Token 38: ' On' (ID: 2160)
  Prédit: ' input'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' input' → logprob: -0.2350301444530487
    2. 'input' → logprob: -1.985030174255371
    3. ' assign' → logprob: -3.610030174255371
    4. ' read' → logprob: -3.985030174255371
    5. 'assign' → logprob: -4.610030174255371
    6. 'read' → logprob: -5.360030174255371
    7. ' remplacer' → logprob: -6.360030174255371
    8. ' readline' → logprob: -6.485030174255371
    9. ' lecture' → logprob: -6.735030174255371
    10. ' lire' → logprob: -6.985030174255371

Token 39: ' ass' (ID: 1680)
  Prédit: ' rem'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' rem' → logprob: -0.27263233065605164
    2. ' ré' → logprob: -2.647632360458374
    3. ' récup' → logprob: -2.647632360458374
    4. ' lit' → logprob: -4.272632122039795
    5. 'rem' → logprob: -4.647632122039795
    6. ' utilise' → logprob: -4.772632122039795
    7. 'r' → logprob: -5.022632122039795
    8. ' définit' → logprob: -5.397632122039795
    9. 'ré' → logprob: -5.522632122039795
    10. ' donne' → logprob: -5.647632122039795

Token 40: 'igne' (ID: 24120)
  Prédit: 'ign'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'ign' → logprob: -0.1188620775938034
    2. 'igne' → logprob: -2.2438621520996094
    3. 'ing' → logprob: -6.368862152099609
    4. 'oc' → logprob: -7.118862152099609
    5. '#' → logprob: -7.243862152099609
    6. '\' → logprob: -7.743862152099609
    7. '```' → logprob: -7.743862152099609
    8. '

' → logprob: -8.24386215209961
    9. 'ert' → logprob: -8.24386215209961
    10. 'i' → logprob: -8.36886215209961

Token 41: ' la' (ID: 557)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '(' → logprob: -0.2778131067752838
    2. '(input' → logprob: -1.7778130769729614
    3. '()' → logprob: -3.277813196182251
    4. ' ' → logprob: -4.152812957763672
    5. 'input' → logprob: -4.652812957763672
    6. '(sys' → logprob: -5.152812957763672
    7. '(
' → logprob: -6.152812957763672
    8. ' (' → logprob: -6.652812957763672
    9. 'sys' → logprob: -8.527812957763672
    10. ' input' → logprob: -8.777812957763672

Token 42: ' fonction' (ID: 17610)
  Prédit: ' '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' ' → logprob: -0.02235056832432747
    2. 'input' → logprob: -4.772350788116455
    3. ' input' → logprob: -5.147350788116455
    4. ' lecture' → logprob: -6.147350788116455
    5. ' méthode' → logprob: -7.022350788116455
    6. ' fonction' → logprob: -7.022350788116455
    7. 'entrée' → logprob: -7.397350788116455
    8. 'lecture' → logprob: -7.897350788116455
    9. ' function' → logprob: -8.022350311279297
    10. '  ' → logprob: -8.022350311279297

Token 43: ' readline' (ID: 179561)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '(' → logprob: -0.051618024706840515
    2. '(
' → logprob: -3.6766180992126465
    3. '()' → logprob: -4.3016180992126465
    4. '(input' → logprob: -4.8016180992126465
    5. 'input' → logprob: -6.0516180992126465
    6. '(

' → logprob: -8.301617622375488
    7. ' ' → logprob: -9.551617622375488
    8. ' (' → logprob: -9.551617622375488
    9. '("' → logprob: -9.926617622375488
    10. '(sys' → logprob: -10.176617622375488

Token 44: ' de' (ID: 334)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '(' → logprob: -0.011765341274440289
    2. '()' → logprob: -4.886765480041504
    3. '(
' → logprob: -5.636765480041504
    4. '(

' → logprob: -8.636765480041504
    5. ' (' → logprob: -9.761765480041504
    6. ' ' → logprob: -9.886765480041504
    7. '<|end|>' → logprob: -10.011765480041504
    8. '  
' → logprob: -10.386765480041504
    9. ')' → logprob: -10.386765480041504
    10. '\(' → logprob: -10.761765480041504

Token 45: ' sys' (ID: 12228)
  Prédit: ' sys'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' sys' → logprob: -0.228284552693367
    2. 'sys' → logprob: -1.6032845973968506
    3. ' l' → logprob: -7.2282843589782715
    4. 'l' → logprob: -7.7282843589782715
    5. ' stdin' → logprob: -8.35328483581543
    6. 'stdin' → logprob: -8.35328483581543
    7. '(sys' → logprob: -8.35328483581543
    8. ' ' → logprob: -8.47828483581543
    9. '<|end|>' → logprob: -8.72828483581543
    10. '	sys' → logprob: -8.85328483581543

Token 46: '.stdin' (ID: 93480)
  Prédit: '.'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '.' → logprob: -0.37154537439346313
    2. '.stdin' → logprob: -3.1215453147888184
    3. '<|end|>' → logprob: -3.1215453147888184
    4. '.readline' → logprob: -3.2465453147888184
    5. '()' → logprob: -3.6215453147888184
    6. ' ' → logprob: -3.6215453147888184
    7. '\' → logprob: -3.9965453147888184
    8. '\n' → logprob: -4.371545314788818
    9. '(stdin' → logprob: -4.371545314788818
    10. '

' → logprob: -4.496545314788818

Token 47: ' à' (ID: 1221)
  Prédit: ' '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' ' → logprob: -1.0180132389068604
    2. '()' → logprob: -1.1430132389068604
    3. '<|end|>' → logprob: -1.8930132389068604
    4. '(' → logprob: -2.8930132389068604
    5. '
' → logprob: -3.3930132389068604
    6. '  ' → logprob: -4.143013000488281
    7. ')' → logprob: -4.143013000488281
    8. '<|end|>' → logprob: -4.768013000488281
    9. '  
' → logprob: -4.893013000488281
    10. '\n' → logprob: -4.893013000488281

Token 48: ' la' (ID: 557)
  Prédit: 'input'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'input' → logprob: -0.4767412841320038
    2. ' input' → logprob: -0.9767413139343262
    3. ' ' → logprob: -6.351741313934326
    4. ' l' → logprob: -7.976741313934326
    5. 'l' → logprob: -8.476740837097168
    6. ' la' → logprob: -9.351740837097168
    7. '=input' → logprob: -9.851740837097168
    8. ' ' → logprob: -9.976740837097168
    9. 'la' → logprob: -10.226740837097168
    10. '  ' → logprob: -10.726740837097168

Token 49: ' variable' (ID: 11076)
  Prédit: 'input'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'input' → logprob: -0.1603560447692871
    2. ' input' → logprob: -1.910356044769287
    3. ' variable' → logprob: -10.285356521606445
    4. ' ' → logprob: -10.285356521606445
    5. 'variable' → logprob: -10.910356521606445
    6. '_input' → logprob: -11.285356521606445
    7. '`' → logprob: -12.160356521606445
    8. '=input' → logprob: -12.285356521606445
    9. 'entrée' → logprob: -12.410356521606445
    10. 'output' → logprob: -12.910356521606445

Token 50: ' input' (ID: 3422)
  Prédit: ' input'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' input' → logprob: -0.2077440619468689
    2. 'input' → logprob: -1.9577441215515137
    3. ' ' → logprob: -3.0827441215515137
    4. '(input' → logprob: -7.832744121551514
    5. '=input' → logprob: -9.707743644714355
    6. '  ' → logprob: -10.457743644714355
    7. '_input' → logprob: -10.957743644714355
    8. ' `' → logprob: -11.207743644714355
    9. '`' → logprob: -11.332743644714355
    10. ' ' → logprob: -11.582743644714355

Token 51: ' pour' (ID: 1930)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '(' → logprob: -0.057741470634937286
    2. '
' → logprob: -3.932741403579712
    3. '(
' → logprob: -4.057741641998291
    4. '()' → logprob: -5.057741641998291
    5. ' ' → logprob: -5.932741641998291
    6. '

' → logprob: -6.307741641998291
    7. '(

' → logprob: -6.432741641998291
    8. '.' → logprob: -6.557741641998291
    9. '\' → logprob: -7.057741641998291
    10. ')' → logprob: -7.182741641998291

Token 52: ' permettre' (ID: 55483)
  Prédit: ' faciliter'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' faciliter' → logprob: -0.11777575314044952
    2. ' lire' → logprob: -3.8677756786346436
    3. ' simpl' → logprob: -3.9927756786346436
    4. ' améliorer' → logprob: -4.492775917053223
    5. 'simpl' → logprob: -4.617775917053223
    6. ' facil' → logprob: -4.992775917053223
    7. ' optimiser' → logprob: -5.117775917053223
    8. 'optim' → logprob: -5.617775917053223
    9. '()' → logprob: -5.742775917053223
    10. ' une' → logprob: -5.742775917053223

Token 53: ' une' (ID: 2463)
  Prédit: ' une'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' une' → logprob: -0.10332979261875153
    2. ' d' → logprob: -3.22832989692688
    3. ' de' → logprob: -3.72832989692688
    4. ' ' → logprob: -5.228329658508301
    5. ' l' → logprob: -5.353329658508301
    6. 'd' → logprob: -5.353329658508301
    7. 'une' → logprob: -5.353329658508301
    8. ' la' → logprob: -5.603329658508301
    9. ' un' → logprob: -6.228329658508301
    10. 'l' → logprob: -6.603329658508301

Token 54: ' lecture' (ID: 31993)
  Prédit: ' lecture'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' lecture' → logprob: -0.07906527072191238
    2. 'lecture' → logprob: -3.0790653228759766
    3. 'entrée' → logprob: -4.329065322875977
    4. ' entrée' → logprob: -4.954065322875977
    5. ' sais' → logprob: -5.829065322875977
    6. ' meilleure' → logprob: -6.079065322875977
    7. ' ' → logprob: -6.704065322875977
    8. ' input' → logprob: -6.954065322875977
    9. ' optimisation' → logprob: -7.079065322875977
    10. ' méthode' → logprob: -8.704065322875977

Token 55: ' efficace' (ID: 54338)
  Prédit: '()'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '()' → logprob: -0.3540706932544708
    2. ' rapide' → logprob: -1.9790706634521484
    3. 's' → logprob: -2.4790706634521484
    4. ' ' → logprob: -4.479070663452148
    5. ' plus' → logprob: -4.604070663452148
    6. '_' → logprob: -4.729070663452148
    7. ' des' → logprob: -5.229070663452148
    8. ' de' → logprob: -5.354070663452148
    9. ' efficace' → logprob: -5.479070663452148
    10. '(' → logprob: -5.479070663452148

Token 56: ' d' (ID: 272)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '(' → logprob: -0.0709971934556961
    2. '()' → logprob: -3.4459972381591797
    3. '(
' → logprob: -3.5709972381591797
    4. '
' → logprob: -5.94599723815918
    5. '\n' → logprob: -6.32099723815918
    6. '(

' → logprob: -7.07099723815918
    7. '\' → logprob: -7.19599723815918
    8. '()
' → logprob: -7.44599723815918
    9. ',' → logprob: -7.94599723815918
    10. ' ' → logprob: -8.32099723815918

Token 57: ''une' (ID: 13337)
  Prédit: 'e'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'e' → logprob: -0.23067985475063324
    2. 'es' → logprob: -1.9806798696517944
    3. ''entrée' → logprob: -3.980679750442505
    4. ''une' → logprob: -4.730679988861084
    5. ' input' → logprob: -4.980679988861084
    6. ' ' → logprob: -4.980679988861084
    7. ' e' → logprob: -5.605679988861084
    8. 'a' → logprob: -5.855679988861084
    9. ''' → logprob: -5.980679988861084
    10. 'u' → logprob: -6.105679988861084

Token 58: ' ligne' (ID: 19583)
  Prédit: ' ligne'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' ligne' → logprob: -0.20515020191669464
    2. 'ligne' → logprob: -2.2051501274108887
    3. ' chaîne' → logprob: -3.8301501274108887
    4. ' ' → logprob: -4.580150127410889
    5. ' input' → logprob: -4.705150127410889
    6. 'l' → logprob: -4.830150127410889
    7. ' lignes' → logprob: -5.830150127410889
    8. 'entrée' → logprob: -5.955150127410889
    9. ' string' → logprob: -5.955150127410889
    10. ' seule' → logprob: -6.080150127410889

Token 59: ' depuis' (ID: 16277)
  Prédit: '
'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '
' → logprob: -0.2534630298614502
    2. '(' → logprob: -2.87846302986145
    3. '\n' → logprob: -3.00346302986145
    4. '

' → logprob: -3.37846302986145
    5. '()' → logprob: -3.75346302986145
    6. ' ' → logprob: -4.253462791442871
    7. '(
' → logprob: -4.878462791442871
    8. 's' → logprob: -5.003462791442871
    9. '\' → logprob: -5.128462791442871
    10. '
' → logprob: -5.378462791442871

Token 60: ' l' (ID: 305)
  Prédit: ' l'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' l' → logprob: -0.4521208703517914
    2. 'l' → logprob: -1.3271209001541138
    3. ' standard' → logprob: -2.952120780944824
    4. 'standard' → logprob: -3.702120780944824
    5. ' stdin' → logprob: -4.327120780944824
    6. 'stdin' → logprob: -5.702120780944824
    7. ' ' → logprob: -6.827120780944824
    8. ' la' → logprob: -7.077120780944824
    9. 'Standard' → logprob: -7.702120780944824
    10. 's' → logprob: -7.702120780944824

Token 61: ''entrée' (ID: 115820)
  Prédit: ''entrée'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ''entrée' → logprob: -0.03677568584680557
    2. 'a' → logprob: -4.036775588989258
    3. ''' → logprob: -4.411775588989258
    4. 'e' → logprob: -6.411775588989258
    5. 'es' → logprob: -6.536775588989258
    6. 'stdin' → logprob: -7.036775588989258
    7. 'entrée' → logprob: -7.161775588989258
    8. 'l' → logprob: -7.786775588989258
    9. ''l' → logprob: -8.536775588989258
    10. ''ent' → logprob: -8.536775588989258

Token 62: ' standard' (ID: 7024)
  Prédit: '()'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '()' → logprob: -0.40224209427833557
    2. '(' → logprob: -1.4022420644760132
    3. '
' → logprob: -2.9022421836853027
    4. '(
' → logprob: -4.277242183685303
    5. '()
' → logprob: -5.152242183685303
    6. ' ' → logprob: -6.277242183685303
    7. '\n' → logprob: -6.402242183685303
    8. '

' → logprob: -6.777242183685303
    9. ')' → logprob: -6.902242183685303
    10. '()

' → logprob: -6.902242183685303

Token 63: '

' (ID: 279)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(' → logprob: -0.32870081067085266
    2. '
' → logprob: -1.4537007808685303
    3. '

' → logprob: -4.453701019287109
    4. '(
' → logprob: -4.453701019287109
    5. '()' → logprob: -4.828701019287109
    6. ' ' → logprob: -5.203701019287109
    7. ' 
' → logprob: -6.578701019287109
    8. '\n' → logprob: -6.953701019287109
    9. '(

' → logprob: -6.953701019287109
    10. '' → logprob: -7.328701019287109

Token 64: '#' (ID: 2)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(' → logprob: -0.6682418584823608
    2. '\n' → logprob: -2.0432419776916504
    3. ',' → logprob: -2.5432419776916504
    4. ':' → logprob: -3.1682419776916504
    5. '\' → logprob: -3.2932419776916504
    6. '#' → logprob: -3.7932419776916504
    7. 'n' → logprob: -3.7932419776916504
    8. '
' → logprob: -3.7932419776916504
    9. '(
' → logprob: -3.9182419776916504
    10. ')' → logprob: -3.9182419776916504

Token 65: ' On' (ID: 2160)
  Prédit: 'n'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'n' → logprob: -0.22072960436344147
    2. 'def' → logprob: -2.0957295894622803
    3. ' n' → logprob: -3.3457295894622803
    4. '#' → logprob: -4.345729827880859
    5. 'data' → logprob: -4.970729827880859
    6. 'for' → logprob: -5.720729827880859
    7. 's' → logprob: -5.845729827880859
    8. 'a' → logprob: -6.470729827880859
    9. ' def' → logprob: -6.720729827880859
    10. 't' → logprob: -6.720729827880859

Token 66: ' lit' (ID: 11980)
  Prédit: ' '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' ' → logprob: -1.4869776964187622
    2. ' def' → logprob: -2.3619775772094727
    3. ' a' → logprob: -2.4869775772094727
    4. ' continue' → logprob: -2.6119775772094727
    5. 'def' → logprob: -2.8619775772094727
    6. ' for' → logprob: -2.9869775772094727
    7. ' veut' → logprob: -3.2369775772094727
    8. ' peut' → logprob: -3.3619775772094727
    9. 'for' → logprob: -3.7369775772094727
    10. ' souhaite' → logprob: -3.8619775772094727

Token 67: ' une' (ID: 2463)
  Prédit: '()'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '()' → logprob: -0.35896092653274536
    2. ' ' → logprob: -1.4839608669281006
    3. '(' → logprob: -3.1089608669281006
    4. ' ()' → logprob: -4.10896110534668
    5. ' (' → logprob: -4.73396110534668
    6. ' la' → logprob: -6.60896110534668
    7. 's' → logprob: -7.35896110534668
    8. ' une' → logprob: -8.10896110534668
    9. ' l' → logprob: -8.23396110534668
    10. '_' → logprob: -8.23396110534668

Token 68: ' ligne' (ID: 19583)
  Prédit: ' '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' ' → logprob: -0.0456218495965004
    2. ' ligne' → logprob: -3.545621871948242
    3. 'e' → logprob: -5.670621871948242
    4. ' chaîne' → logprob: -5.670621871948242
    5. '  ' → logprob: -6.670621871948242
    6. 'l' → logprob: -6.670621871948242
    7. 'n' → logprob: -7.045621871948242
    8. 'ligne' → logprob: -7.545621871948242
    9. '_' → logprob: -7.920621871948242
    10. 's' → logprob: -8.045621871948242

Token 69: ' depuis' (ID: 16277)
  Prédit: '()'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '()' → logprob: -0.7414506077766418
    2. '(' → logprob: -1.366450548171997
    3. 's' → logprob: -1.616450548171997
    4. ')' → logprob: -3.741450548171997
    5. '(
' → logprob: -4.866450786590576
    6. '\n' → logprob: -4.866450786590576
    7. '\' → logprob: -5.741450786590576
    8. 'input' → logprob: -5.741450786590576
    9. ',' → logprob: -5.991450786590576
    10. '[' → logprob: -6.241450786590576

Token 70: ' l' (ID: 305)
  Prédit: 'l'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'l' → logprob: -0.5996271371841431
    2. 'sys' → logprob: -1.224627137184143
    3. ' l' → logprob: -3.0996270179748535
    4. 'input' → logprob: -3.2246270179748535
    5. ' sys' → logprob: -3.8496270179748535
    6. 'stdin' → logprob: -4.0996270179748535
    7. ' input' → logprob: -4.3496270179748535
    8. ' stdin' → logprob: -5.0996270179748535
    9. 'la' → logprob: -5.2246270179748535
    10. 'standard' → logprob: -5.9746270179748535

Token 71: ''entrée' (ID: 115820)
  Prédit: ''entrée'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ''entrée' → logprob: -0.012475276365876198
    2. 'input' → logprob: -5.262475490570068
    3. 'entrée' → logprob: -5.887475490570068
    4. ''' → logprob: -5.887475490570068
    5. 'es' → logprob: -8.38747501373291
    6. 'a' → logprob: -8.63747501373291
    7. '''' → logprob: -8.88747501373291
    8. 'stdin' → logprob: -8.88747501373291
    9. '’entrée' → logprob: -9.01247501373291
    10. ''ent' → logprob: -9.13747501373291

Token 72: ' standard' (ID: 7024)
  Prédit: '()'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '()' → logprob: -0.5970317721366882
    2. 's' → logprob: -1.972031831741333
    3. ')' → logprob: -2.097031831741333
    4. '(' → logprob: -2.597031831741333
    5. '.' → logprob: -3.972031831741333
    6. 'input' → logprob: -4.347031593322754
    7. ',' → logprob: -4.472031593322754
    8. ' =' → logprob: -4.972031593322754
    9. 'a' → logprob: -5.222031593322754
    10. '_' → logprob: -5.222031593322754

Token 73: ',' (ID: 11)
  Prédit: '()'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '()' → logprob: -0.3424256443977356
    2. 'line' → logprob: -2.717425584793091
    3. 'data' → logprob: -2.967425584793091
    4. '(' → logprob: -3.092425584793091
    5. 's' → logprob: -3.967425584793091
    6. 'n' → logprob: -4.21742582321167
    7. 'x' → logprob: -4.34242582321167
    8. ')' → logprob: -4.34242582321167
    9. 'input' → logprob: -4.34242582321167
    10. 'user' → logprob: -4.59242582321167

Token 74: ' puis' (ID: 18766)
  Prédit: 'n'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'n' → logprob: -0.38218024373054504
    2. ' ' → logprob: -2.1321802139282227
    3. ' n' → logprob: -2.7571802139282227
    4. ',' → logprob: -3.8821802139282227
    5. 's' → logprob: -4.507180213928223
    6. 't' → logprob: -4.757180213928223
    7. 'nombre' → logprob: -4.757180213928223
    8. 'a' → logprob: -4.882180213928223
    9. 'input' → logprob: -5.007180213928223
    10. ')' → logprob: -5.132180213928223

Token 75: ' on' (ID: 402)
  Prédit: ' la'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' la' → logprob: -0.9584283232688904
    2. 'la' → logprob: -1.2084283828735352
    3. ' on' → logprob: -2.208428382873535
    4. 'l' → logprob: -3.583428382873535
    5. 'strip' → logprob: -3.583428382873535
    6. 'on' → logprob: -4.083428382873535
    7. ' l' → logprob: -4.083428382873535
    8. 'input' → logprob: -4.583428382873535
    9. '.strip' → logprob: -4.708428382873535
    10. ' strip' → logprob: -4.833428382873535

Token 76: ' sup' (ID: 1982)
  Prédit: '.strip'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '.strip' → logprob: -0.14697198569774628
    2. 'strip' → logprob: -2.2719719409942627
    3. 'rstrip' → logprob: -4.271972179412842
    4. 'la' → logprob: -4.646972179412842
    5. 'sup' → logprob: -6.271972179412842
    6. '.rstrip' → logprob: -6.521972179412842
    7. 'r' → logprob: -6.771972179412842
    8. 'l' → logprob: -6.771972179412842
    9. 'split' → logprob: -7.271972179412842
    10. 'ret' → logprob: -7.771972179412842

Token 77: 'prime' (ID: 46441)
  Prédit: 'prime'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'prime' → logprob: -1.3672362565994263
    2. 'port' → logprob: -1.6172362565994263
    3. 'pl' → logprob: -1.7422362565994263
    4. 'p' → logprob: -1.8672362565994263
    5. 'pose' → logprob: -2.7422361373901367
    6. 'plement' → logprob: -2.7422361373901367
    7. 'r' → logprob: -4.367236137390137
    8. 'pr' → logprob: -4.367236137390137
    9. 'prim' → logprob: -4.867236137390137
    10. 'ports' → logprob: -5.242236137390137

Token 78: ' les' (ID: 1341)
  Prédit: '()'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '()' → logprob: -0.05599126219749451
    2. '(' → logprob: -3.0559911727905273
    3. '('\' → logprob: -5.555991172790527
    4. 'l' → logprob: -7.305991172790527
    5. '()\' → logprob: -7.430991172790527
    6. '().' → logprob: -7.930991172790527
    7. '('' → logprob: -7.930991172790527
    8. ' ' → logprob: -8.430991172790527
    9. 's' → logprob: -8.680991172790527
    10. 'rstrip' → logprob: -8.680991172790527

Token 79: ' espaces' (ID: 98361)
  Prédit: ' espaces'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' espaces' → logprob: -0.036213282495737076
    2. '\n' → logprob: -4.411213397979736
    3. ' trailing' → logprob: -5.411213397979736
    4. ' caractères' → logprob: -5.661213397979736
    5. 'esp' → logprob: -6.036213397979736
    6. 'car' → logprob: -6.161213397979736
    7. 'es' → logprob: -6.411213397979736
    8. ' \' → logprob: -6.411213397979736
    9. 's' → logprob: -6.536213397979736
    10. ' ' → logprob: -6.661213397979736

Token 80: ' de' (ID: 334)
  Prédit: '.strip'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '.strip' → logprob: -0.3528103828430176
    2. '().' → logprob: -1.6028103828430176
    3. '.' → logprob: -2.4778103828430176
    4. '.rstrip' → logprob: -4.852810382843018
    5. '()' → logprob: -6.477810382843018
    6. ' .' → logprob: -7.477810382843018
    7. '(' → logprob: -7.727810382843018
    8. 'strip' → logprob: -7.852810382843018
    9. 'rstrip' → logprob: -7.977810382843018
    10. ' ' → logprob: -8.60280990600586

Token 81: ' début' (ID: 29589)
  Prédit: 'la'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'la' → logprob: -0.9722949266433716
    2. 'l' → logprob: -2.347294807434082
    3. 's' → logprob: -2.347294807434082
    4. 'rstrip' → logprob: -2.597294807434082
    5. 'les' → logprob: -3.097294807434082
    6. 'b' → logprob: -3.472294807434082
    7. ' la' → logprob: -3.597294807434082
    8. '```' → logprob: -3.722294807434082
    9. '\n' → logprob: -3.847294807434082
    10. 'fin' → logprob: -3.847294807434082

Token 82: ' et' (ID: 859)
  Prédit: ' et'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' et' → logprob: -0.402713418006897
    2. 'et' → logprob: -1.152713418006897
    3. ' ' → logprob: -5.152713298797607
    4. 'e' → logprob: -5.777713298797607
    5. ',' → logprob: -6.277713298797607
    6. ' and' → logprob: -6.777713298797607
    7. 's' → logprob: -7.027713298797607
    8. 'es' → logprob: -7.277713298797607
    9. '<|end|>' → logprob: -7.277713298797607
    10. ')' → logprob: -8.652713775634766

Token 83: ' de' (ID: 334)
  Prédit: 'fin'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'fin' → logprob: -0.013812151737511158
    2. ' fin' → logprob: -4.388812065124512
    3. 'la' → logprob: -8.138812065124512
    4. 'f' → logprob: -8.388812065124512
    5. ' ' → logprob: -8.388812065124512
    6. '\n' → logprob: -8.638812065124512
    7. ' ' → logprob: -10.013812065124512
    8. '```' → logprob: -10.013812065124512
    9. 'de' → logprob: -10.263812065124512
    10. 'les' → logprob: -10.388812065124512

Token 84: ' fin' (ID: 2131)
  Prédit: 'fin'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'fin' → logprob: -0.0193769633769989
    2. ' fin' → logprob: -4.019376754760742
    3. 'f' → logprob: -8.144376754760742
    4. '```' → logprob: -8.269376754760742
    5. ' ' → logprob: -8.644376754760742
    6. ' ' → logprob: -8.769376754760742
    7. 'la' → logprob: -9.394376754760742
    8. '\n' → logprob: -9.894376754760742
    9. 'a' → logprob: -10.394376754760742
    10. '	' → logprob: -10.769376754760742

Token 85: ' et' (ID: 859)
  Prédit: 's'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 's' → logprob: -0.3274010717868805
    2. '.' → logprob: -2.5774011611938477
    3. 'input' → logprob: -2.7024011611938477
    4. '\n' → logprob: -3.8274011611938477
    5. 'n' → logprob: -4.327401161193848
    6. '  
' → logprob: -4.452401161193848
    7. 'user' → logprob: -4.452401161193848
    8. '\' → logprob: -4.702401161193848
    9. 'line' → logprob: -4.702401161193848
    10. '.strip' → logprob: -4.827401161193848

Token 86: ' on' (ID: 402)
  Prédit: ' on'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' on' → logprob: -0.5351337790489197
    2. ' la' → logprob: -1.7851338386535645
    3. 'on' → logprob: -2.4101338386535645
    4. 'la' → logprob: -2.7851338386535645
    5. ' l' → logprob: -3.6601338386535645
    6. '\' → logprob: -4.4101338386535645
    7. 'l' → logprob: -4.9101338386535645
    8. ' récup' → logprob: -5.2851338386535645
    9. 'spl' → logprob: -5.2851338386535645
    10. 'split' → logprob: -5.5351338386535645

Token 87: ' décou' (ID: 68302)
  Prédit: 'split'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'split' → logprob: -0.3715269863605499
    2. ' split' → logprob: -1.3715269565582275
    3. '.split' → logprob: -3.6215269565582275
    4. 'convert' → logprob: -5.371527194976807
    5. '.strip' → logprob: -5.371527194976807
    6. 'spl' → logprob: -5.496527194976807
    7. ' convert' → logprob: -5.621527194976807
    8. 'div' → logprob: -6.246527194976807
    9. 'strip' → logprob: -6.246527194976807
    10. 's' → logprob: -6.871527194976807

Token 88: 'pe' (ID: 424)
  Prédit: 'pe'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'pe' → logprob: -0.011085073463618755
    2. 'p' → logprob: -5.386085033416748
    3. 'page' → logprob: -5.386085033416748
    4. 'per' → logprob: -6.511085033416748
    5. 'pé' → logprob: -9.386085510253906
    6. 'oupe' → logprob: -9.886085510253906
    7. 'upe' → logprob: -10.011085510253906
    8. 'пе' → logprob: -10.136085510253906
    9. '```' → logprob: -10.261085510253906
    10. 'pa' → logprob: -11.011085510253906

Token 89: ' cette' (ID: 7696)
  Prédit: ' la'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' la' → logprob: -0.29246604442596436
    2. 'la' → logprob: -1.4174660444259644
    3. '()' → logprob: -5.417466163635254
    4. 'l' → logprob: -5.792466163635254
    5. ' ' → logprob: -7.042466163635254
    6. '('' → logprob: -7.667466163635254
    7. ' l' → logprob: -7.792466163635254
    8. 'le' → logprob: -8.042466163635254
    9. 's' → logprob: -8.417466163635254
    10. '(' → logprob: -8.417466163635254

Token 90: ' ligne' (ID: 19583)
  Prédit: ' chaîne'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' chaîne' → logprob: -0.5322937965393066
    2. ' ligne' → logprob: -1.1572937965393066
    3. 'ligne' → logprob: -2.6572937965393066
    4. 'chaine' → logprob: -4.407293796539307
    5. ' chaine' → logprob: -5.032293796539307
    6. ' string' → logprob: -5.657293796539307
    7. 'cha' → logprob: -5.782293796539307
    8. ' phrase' → logprob: -6.532293796539307
    9. ' ' → logprob: -8.032293319702148
    10. 'string' → logprob: -8.032293319702148

Token 91: ' en' (ID: 469)
  Prédit: 'tokens'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'tokens' → logprob: -0.39581069350242615
    2. ' en' → logprob: -1.6458107233047485
    3. ' tokens' → logprob: -3.645810604095459
    4. 's' → logprob: -3.770810604095459
    5. 'input' → logprob: -3.895810604095459
    6. 'en' → logprob: -4.145810604095459
    7. ' ' → logprob: -4.395810604095459
    8. ' input' → logprob: -5.270810604095459
    9. ' =' → logprob: -5.395810604095459
    10. '[' → logprob: -5.645810604095459

Token 92: ' une' (ID: 2463)
  Prédit: 'm'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'm' → logprob: -0.34753328561782837
    2. ' mots' → logprob: -2.4725332260131836
    3. 'liste' → logprob: -2.8475332260131836
    4. ' liste' → logprob: -3.4725332260131836
    5. ' une' → logprob: -3.8475332260131836
    6. ' ' → logprob: -3.9725332260131836
    7. 'tokens' → logprob: -4.222533226013184
    8. ' morceaux' → logprob: -4.347533226013184
    9. 'une' → logprob: -4.722533226013184
    10. 'élé' → logprob: -4.722533226013184

Token 93: ' liste' (ID: 31719)
  Prédit: ' liste'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' liste' → logprob: -0.029184490442276
    2. 'liste' → logprob: -3.654184579849243
    3. ' list' → logprob: -7.029184341430664
    4. ' listes' → logprob: -7.029184341430664
    5. 's' → logprob: -7.279184341430664
    6. 'list' → logprob: -8.779184341430664
    7. 'Liste' → logprob: -9.279184341430664
    8. ' chaîne' → logprob: -9.904184341430664
    9. ' ' → logprob: -10.654184341430664
    10. ' Liste' → logprob: -10.779184341430664

Token 94: ' de' (ID: 334)
  Prédit: 'tokens'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'tokens' → logprob: -0.0995013490319252
    2. ' tokens' → logprob: -3.724501371383667
    3. 'input' → logprob: -4.349501132965088
    4. 's' → logprob: -4.349501132965088
    5. ' de' → logprob: -4.474501132965088
    6. ' =' → logprob: -4.724501132965088
    7. ' des' → logprob: -4.849501132965088
    8. 'de' → logprob: -5.849501132965088
    9. ' input' → logprob: -6.224501132965088
    10. '.' → logprob: -6.599501132965088

Token 95: ' chaînes' (ID: 179904)
  Prédit: ' tokens'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' tokens' → logprob: -1.1300134658813477
    2. ' mots' → logprob: -1.1300134658813477
    3. ' chaînes' → logprob: -1.5050134658813477
    4. 'm' → logprob: -2.8800134658813477
    5. 'tokens' → logprob: -3.6300134658813477
    6. ' chain' → logprob: -4.005013465881348
    7. ' chaîne' → logprob: -4.505013465881348
    8. ' caractères' → logprob: -5.380013465881348
    9. ' ' → logprob: -5.630013465881348
    10. 'chain' → logprob: -6.505013465881348

Token 96: ' sur' (ID: 1512)
  Prédit: 'tokens'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'tokens' → logprob: -0.7491370439529419
    2. 's' → logprob: -1.499137043952942
    3. '[' → logprob: -2.1241369247436523
    4. 'input' → logprob: -2.9991369247436523
    5. '()' → logprob: -4.249136924743652
    6. '[]' → logprob: -4.249136924743652
    7. '.' → logprob: -4.249136924743652
    8. '\' → logprob: -4.374136924743652
    9. '(' → logprob: -4.874136924743652
    10. '[
' → logprob: -4.999136924743652

Token 97: ' chaque' (ID: 21194)
  Prédit: ' les'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' les' → logprob: -0.8693849444389343
    2. ' l' → logprob: -1.119385004043579
    3. ' ' → logprob: -2.494385004043579
    4. ' espaces' → logprob: -2.994385004043579
    5. 'les' → logprob: -3.494385004043579
    6. ' la' → logprob: -3.619385004043579
    7. 's' → logprob: -4.494384765625
    8. ' ' → logprob: -4.494384765625
    9. 'l' → logprob: -4.619384765625
    10. ' le' → logprob: -5.244384765625

Token 98: ' espace' (ID: 66004)
  Prédit: ' espace'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' espace' → logprob: -0.6243676543235779
    2. ''espace' → logprob: -0.9993676543235779
    3. ' espaces' → logprob: -3.2493677139282227
    4. ''esp' → logprob: -3.4993677139282227
    5. 'es' → logprob: -3.9993677139282227
    6. 'esp' → logprob: -5.624367713928223
    7. '’espace' → logprob: -6.499367713928223
    8. ' ' → logprob: -6.624367713928223
    9. ''' → logprob: -7.124367713928223
    10. ' '' → logprob: -7.874367713928223

Token 99: ' rencontré' (ID: 141085)
  Prédit: 's'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 's' → logprob: -0.5898153781890869
    2. 'tokens' → logprob: -1.214815378189087
    3. '
' → logprob: -3.464815378189087
    4. 'ligne' → logprob: -3.589815378189087
    5. 'data' → logprob: -3.714815378189087
    6. 'n' → logprob: -4.214815139770508
    7. '\n' → logprob: -4.214815139770508
    8. '\' → logprob: -5.089815139770508
    9. '[' → logprob: -5.839815139770508
    10. 'entrée' → logprob: -5.964815139770508

Token 100: '.
' (ID: 558)
  Prédit: 'tokens'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'tokens' → logprob: -0.5202966928482056
    2. 'data' → logprob: -1.8952966928482056
    3. 's' → logprob: -2.395296573638916
    4. 'ligne' → logprob: -3.020296573638916
    5. 'line' → logprob: -3.520296573638916
    6. 'n' → logprob: -4.020296573638916
    7. 'input' → logprob: -5.020296573638916
    8. 'l' → logprob: -5.145296573638916
    9. 'user' → logprob: -5.145296573638916
    10. 'lines' → logprob: -5.270296573638916

Token 101: '#' (ID: 2)
  Prédit: 'data'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'data' → logprob: -0.4741482436656952
    2. 'line' → logprob: -1.7241482734680176
    3. 'tokens' → logprob: -2.0991482734680176
    4. 'ligne' → logprob: -3.2241482734680176
    5. 'lines' → logprob: -5.099148273468018
    6. 'l' → logprob: -5.224148273468018
    7. 's' → logprob: -5.349148273468018
    8. 'n' → logprob: -5.849148273468018
    9. 'input' → logprob: -5.849148273468018
    10. 'words' → logprob: -6.224148273468018

Token 102: ' Ensuite' (ID: 113884)
  Prédit: 'data'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'data' → logprob: -0.8403807282447815
    2. 'line' → logprob: -1.7153806686401367
    3. 'tokens' → logprob: -1.8403806686401367
    4. 'lines' → logprob: -2.7153806686401367
    5. 'values' → logprob: -2.9653806686401367
    6. 'words' → logprob: -3.9653806686401367
    7. 'args' → logprob: -4.215380668640137
    8. 'params' → logprob: -4.215380668640137
    9. 'lst' → logprob: -4.465380668640137
    10. 'ligne' → logprob: -4.965380668640137

Token 103: ',' (ID: 11)
  Prédit: ','
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ',' → logprob: -0.19826260209083557
    2. ' ,' → logprob: -2.8232626914978027
    3. 'tokens' → logprob: -2.9482626914978027
    4. ' tokens' → logprob: -3.5732626914978027
    5. ' la' → logprob: -4.198262691497803
    6. ' on' → logprob: -4.698262691497803
    7. 's' → logprob: -5.323262691497803
    8. 'n' → logprob: -6.823262691497803
    9. ' ' → logprob: -7.073262691497803
    10. 'input' → logprob: -7.448262691497803

Token 104: ' on' (ID: 402)
  Prédit: ' on'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' on' → logprob: -0.9740174412727356
    2. 'n' → logprob: -1.7240173816680908
    3. 'numbers' → logprob: -1.8490173816680908
    4. ' n' → logprob: -3.224017381668091
    5. ' nombres' → logprob: -3.224017381668091
    6. 'on' → logprob: -3.349017381668091
    7. 'nums' → logprob: -3.474017381668091
    8. 'tokens' → logprob: -3.474017381668091
    9. 'values' → logprob: -4.09901762008667
    10. ' numbers' → logprob: -4.22401762008667

Token 105: ' applique' (ID: 180579)
  Prédit: 'convert'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'convert' → logprob: -1.0905324220657349
    2. ' stock' → logprob: -2.0905323028564453
    3. ' convert' → logprob: -2.2155323028564453
    4. ' transforme' → logprob: -2.2155323028564453
    5. 'stock' → logprob: -2.7155323028564453
    6. 'map' → logprob: -3.0905323028564453
    7. 'for' → logprob: -3.4655323028564453
    8. ' récup' → logprob: -3.4655323028564453
    9. 'r' → logprob: -3.9655323028564453
    10. 's' → logprob: -4.215532302856445

Token 106: ' la' (ID: 557)
  Prédit: ' map'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' map' → logprob: -0.5298478007316589
    2. 'map' → logprob: -1.1548478603363037
    3. ' list' → logprob: -2.9048478603363037
    4. ' la' → logprob: -3.6548478603363037
    5. 'list' → logprob: -4.779847621917725
    6. ' str' → logprob: -6.029847621917725
    7. 'int' → logprob: -6.529847621917725
    8. ' int' → logprob: -6.654847621917725
    9. 'str' → logprob: -7.654847621917725
    10. ' ' → logprob: -7.904847621917725

Token 107: ' fonction' (ID: 17610)
  Prédit: 'map'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'map' → logprob: -0.6713861227035522
    2. 'strip' → logprob: -1.7963861227035522
    3. 'list' → logprob: -2.421386241912842
    4. ' map' → logprob: -2.671386241912842
    5. ' liste' → logprob: -3.546386241912842
    6. 'fonction' → logprob: -3.546386241912842
    7. 'liste' → logprob: -3.671386241912842
    8. 'split' → logprob: -4.171386241912842
    9. '.strip' → logprob: -4.296386241912842
    10. ' list' → logprob: -4.796386241912842

Token 108: ' int' (ID: 677)
  Prédit: ' map'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' map' → logprob: -0.37225908041000366
    2. 'map' → logprob: -1.3722591400146484
    3. ' str' → logprob: -3.4972591400146484
    4. ' list' → logprob: -4.747259140014648
    5. ' strip' → logprob: -5.122259140014648
    6. 'strip' → logprob: -5.122259140014648
    7. 'str' → logprob: -5.872259140014648
    8. 'list' → logprob: -6.247259140014648
    9. 'int' → logprob: -7.372259140014648
    10. ' int' → logprob: -7.622259140014648

Token 109: ' à' (ID: 1221)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '(' → logprob: -0.3547585606575012
    2. 's' → logprob: -1.6047585010528564
    3. '()' → logprob: -2.8547585010528564
    4. '(
' → logprob: -4.1047587394714355
    5. 'map' → logprob: -4.8547587394714355
    6. 'sur' → logprob: -5.9797587394714355
    7. 'list' → logprob: -6.2297587394714355
    8. '(s' → logprob: -6.6047587394714355
    9. ',' → logprob: -6.7297587394714355
    10. ' ' → logprob: -6.7297587394714355

Token 110: ' chaque' (ID: 21194)
  Prédit: ' chaque'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' chaque' → logprob: -0.037969183176755905
    2. ' chacune' → logprob: -4.03796911239624
    3. 'cha' → logprob: -4.28796911239624
    4. ' each' → logprob: -6.41296911239624
    5. 'each' → logprob: -7.53796911239624
    6. ' la' → logprob: -7.66296911239624
    7. 'map' → logprob: -7.78796911239624
    8. 'l' → logprob: -7.78796911239624
    9. ' toutes' → logprob: -7.78796911239624
    10. 't' → logprob: -8.037969589233398

Token 111: ' chaîne' (ID: 89288)
  Prédit: 'élé'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'élé' → logprob: -0.021083872765302658
    2. ' élément' → logprob: -4.021083831787109
    3. 'element' → logprob: -6.396083831787109
    4. ' element' → logprob: -8.27108383178711
    5. 'm' → logprob: -8.52108383178711
    6. ' mot' → logprob: -8.64608383178711
    7. 'elem' → logprob: -9.14608383178711
    8. ')' → logprob: -9.14608383178711
    9. 'mot' → logprob: -9.14608383178711
    10. 'token' → logprob: -9.77108383178711

Token 112: ' pour' (ID: 1930)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '(' → logprob: -0.4169856607913971
    2. 's' → logprob: -1.1669856309890747
    3. ',' → logprob: -4.166985511779785
    4. '(
' → logprob: -5.166985511779785
    5. ')' → logprob: -6.291985511779785
    6. ' (' → logprob: -6.416985511779785
    7. '(s' → logprob: -7.041985511779785
    8. ' ' → logprob: -7.166985511779785
    9. '_map' → logprob: -7.166985511779785
    10. '_' → logprob: -7.416985511779785

Token 113: ' la' (ID: 557)
  Prédit: ' obtenir'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' obtenir' → logprob: -0.32898104190826416
    2. ' convertir' → logprob: -1.5789810419082642
    3. ' créer' → logprob: -3.4539809226989746
    4. ' transformer' → logprob: -3.4539809226989746
    5. 'transform' → logprob: -5.078980922698975
    6. 'ob' → logprob: -5.953980922698975
    7. 'convert' → logprob: -7.828980922698975
    8. ' récupérer' → logprob: -7.953980922698975
    9. ' ' → logprob: -8.203981399536133
    10. ' avoir' → logprob: -8.828981399536133

Token 114: ' transformer' (ID: 59595)
  Prédit: ' convertir'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' convertir' → logprob: -0.2646971046924591
    2. 'convert' → logprob: -2.0146970748901367
    3. ' transformer' → logprob: -2.8896970748901367
    4. 'transform' → logprob: -3.3896970748901367
    5. 'ob' → logprob: -5.014697074890137
    6. ' convert' → logprob: -6.639697074890137
    7. 'con' → logprob: -7.639697074890137
    8. 'converter' → logprob: -7.764697074890137
    9. ' obtenir' → logprob: -8.014697074890137
    10. ' conversion' → logprob: -8.764697074890137

Token 115: ' en' (ID: 469)
  Prédit: 'map'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'map' → logprob: -1.7312103509902954
    2. ',' → logprob: -2.106210231781006
    3. ' map' → logprob: -2.106210231781006
    4. ' ' → logprob: -2.106210231781006
    5. 's' → logprob: -2.856210231781006
    6. '(
' → logprob: -2.981210231781006
    7. ' à' → logprob: -3.106210231781006
    8. '(' → logprob: -3.106210231781006
    9. ' sur' → logprob: -3.606210231781006
    10. ' (' → logprob: -3.856210231781006

Token 116: ' entier' (ID: 80473)
  Prédit: ' une'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' une' → logprob: -0.23233282566070557
    2. ' des' → logprob: -1.7323328256607056
    3. ' un' → logprob: -3.732332706451416
    4. 'une' → logprob: -5.732332706451416
    5. ' chaque' → logprob: -6.857332706451416
    6. 'des' → logprob: -7.107332706451416
    7. ' integers' → logprob: -8.357333183288574
    8. ' nombres' → logprob: -8.732333183288574
    9. ' ' → logprob: -8.857333183288574
    10. ' liste' → logprob: -9.232333183288574

Token 117: ' grâce' (ID: 31589)
  Prédit: 's'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 's' → logprob: -0.07110302150249481
    2. ' =' → logprob: -4.571103096008301
    3. 'nums' → logprob: -4.571103096008301
    4. 'map' → logprob: -4.946103096008301
    5. 'tokens' → logprob: -4.946103096008301
    6. '(' → logprob: -5.696103096008301
    7. '
' → logprob: -5.696103096008301
    8. '(
' → logprob: -5.946103096008301
    9. 'numbers' → logprob: -5.946103096008301
    10. 'data' → logprob: -6.196103096008301

Token 118: ' à' (ID: 1221)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(' → logprob: -1.1564836502075195
    2. ' à' → logprob: -1.1564836502075195
    3. ')' → logprob: -1.2814836502075195
    4. ' ' → logprob: -3.0314836502075195
    5. 's' → logprob: -4.1564836502075195
    6. ' a' → logprob: -4.4064836502075195
    7. ' )' → logprob: -5.4064836502075195
    8. ',' → logprob: -5.6564836502075195
    9. '(
' → logprob: -5.9064836502075195
    10. '   ' → logprob: -7.1564836502075195

Token 119: ' la' (ID: 557)
  Prédit: ' map'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' map' → logprob: -0.19634883105754852
    2. ' la' → logprob: -2.4463489055633545
    3. 'map' → logprob: -2.5713489055633545
    4. ' list' → logprob: -5.071348667144775
    5. ' une' → logprob: -5.321348667144775
    6. ' l' → logprob: -6.696348667144775
    7. 'list' → logprob: -6.821348667144775
    8. 'la' → logprob: -7.321348667144775
    9. ' ' → logprob: -7.821348667144775
    10. 'l' → logprob: -8.446349143981934

Token 120: ' fonction' (ID: 17610)
  Prédit: 'map'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'map' → logprob: -0.038453735411167145
    2. ' map' → logprob: -3.6634538173675537
    3. 'fonction' → logprob: -4.538453578948975
    4. ' fonction' → logprob: -7.288453578948975
    5. 'list' → logprob: -8.288454055786133
    6. 'liste' → logprob: -8.913454055786133
    7. ' liste' → logprob: -10.038454055786133
    8. 'm' → logprob: -10.163454055786133
    9. 'function' → logprob: -10.538454055786133
    10. '
' → logprob: -10.788454055786133

Token 121: ' map' (ID: 4014)
  Prédit: 'map'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'map' → logprob: -0.014169031754136086
    2. ' map' → logprob: -4.264169216156006
    3. '`' → logprob: -13.264168739318848
    4. 'list' → logprob: -13.389168739318848
    5. '```' → logprob: -13.764168739318848
    6. '(map' → logprob: -14.764168739318848
    7. '	map' → logprob: -14.889168739318848
    8. ' ' → logprob: -16.139169692993164
    9. '   ' → logprob: -16.514169692993164
    10. ',map' → logprob: -16.889169692993164

Token 122: '.' (ID: 13)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '(' → logprob: -0.03496933355927467
    2. '(
' → logprob: -3.4099693298339844
    3. 's' → logprob: -8.409969329833984
    4. '(int' → logprob: -8.659969329833984
    5. ',' → logprob: -9.034969329833984
    6. '(n' → logprob: -9.159969329833984
    7. '(s' → logprob: -9.534969329833984
    8. 'def' → logprob: -9.909969329833984
    9. '(

' → logprob: -9.909969329833984
    10. ':' → logprob: -10.159969329833984

Token 123: ' On' (ID: 2160)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '(' → logprob: -0.805759847164154
    2. 's' → logprob: -1.9307599067687988
    3. '(
' → logprob: -2.180759906768799
    4. '()' → logprob: -2.680759906768799
    5. 'nums' → logprob: -3.555759906768799
    6. 'tokens' → logprob: -3.805759906768799
    7. 'result' → logprob: -4.055759906768799
    8. 'inputs' → logprob: -4.305759906768799
    9. 'numbers' → logprob: -4.305759906768799
    10. 'data' → logprob: -4.430759906768799

Token 124: ' transforme' (ID: 184109)
  Prédit: ' ='
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' =' → logprob: -0.03276042640209198
    2. '_numbers' → logprob: -4.9077606201171875
    3. 'n' → logprob: -5.6577606201171875
    4. '=' → logprob: -5.6577606201171875
    5. '_values' → logprob: -5.9077606201171875
    6. 's' → logprob: -6.5327606201171875
    7. 'liste' → logprob: -7.0327606201171875
    8. '_' → logprob: -7.0327606201171875
    9. 'nums' → logprob: -7.0327606201171875
    10. 'numbers' → logprob: -7.1577606201171875

Token 125: ' le' (ID: 505)
  Prédit: 'list'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'list' → logprob: -0.8419756889343262
    2. ' la' → logprob: -1.3419756889343262
    3. ' list' → logprob: -1.4669756889343262
    4. '(list' → logprob: -3.591975688934326
    5. 'map' → logprob: -4.341975688934326
    6. ' map' → logprob: -4.841975688934326
    7. 'int' → logprob: -5.341975688934326
    8. ' ' → logprob: -5.716975688934326
    9. 'la' → logprob: -5.716975688934326
    10. '=list' → logprob: -5.966975688934326

Token 126: ' résultat' (ID: 62556)
  Prédit: ' list'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' list' → logprob: -1.3931310176849365
    2. ' map' → logprob: -1.3931310176849365
    3. 'map' → logprob: -1.5181310176849365
    4. 'list' → logprob: -1.8931310176849365
    5. 'result' → logprob: -2.5181310176849365
    6. ' result' → logprob: -3.6431310176849365
    7. ' liste' → logprob: -4.893131256103516
    8. ' résultat' → logprob: -5.018131256103516
    9. 'int' → logprob: -5.393131256103516
    10. 'liste' → logprob: -5.893131256103516

Token 127: ' de' (ID: 334)
  Prédit: ' en'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' en' → logprob: -0.6721346378326416
    2. 'list' → logprob: -0.9221346378326416
    3. ' list' → logprob: -2.9221346378326416
    4. 'en' → logprob: -3.7971346378326416
    5. 'int' → logprob: -5.1721343994140625
    6. '(list' → logprob: -5.9221343994140625
    7. ' ' → logprob: -6.6721343994140625
    8. ')' → logprob: -6.9221343994140625
    9. '=list' → logprob: -7.2971343994140625
    10. ',' → logprob: -7.5471343994140625

Token 128: ' map' (ID: 4014)
  Prédit: 'list'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'list' → logprob: -0.06375958770513535
    2. ' list' → logprob: -2.8137595653533936
    3. 'map' → logprob: -6.813759803771973
    4. 'la' → logprob: -8.063759803771973
    5. ' la' → logprob: -8.438759803771973
    6. ' map' → logprob: -9.813759803771973
    7. 'l' → logprob: -9.938759803771973
    8. 'int' → logprob: -10.563759803771973
    9. 'liste' → logprob: -11.313759803771973
    10. ' liste' → logprob: -12.313759803771973

Token 129: ' en' (ID: 469)
  Prédit: ' en'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' en' → logprob: -0.11837305128574371
    2. 'list' → logprob: -2.868373155593872
    3. '(list' → logprob: -3.618373155593872
    4. 'en' → logprob: -4.368372917175293
    5. ' list' → logprob: -5.493372917175293
    6. '(' → logprob: -5.868372917175293
    7. 'int' → logprob: -6.243372917175293
    8. '(int' → logprob: -6.493372917175293
    9. '()' → logprob: -6.868372917175293
    10. ' ' → logprob: -7.868372917175293

Token 130: ' une' (ID: 2463)
  Prédit: 'list'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'list' → logprob: -0.023187821730971336
    2. ' list' → logprob: -3.8981878757476807
    3. 'liste' → logprob: -6.273187637329102
    4. ' liste' → logprob: -7.648187637329102
    5. ' une' → logprob: -8.648187637329102
    6. 'une' → logprob: -9.273187637329102
    7. 'la' → logprob: -12.773187637329102
    8. 'lista' → logprob: -13.273187637329102
    9. 'l' → logprob: -13.898187637329102
    10. ' la' → logprob: -14.023187637329102

Token 131: ' liste' (ID: 31719)
  Prédit: 'list'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'list' → logprob: -0.012643614783883095
    2. 'liste' → logprob: -4.387643814086914
    3. ' list' → logprob: -9.137643814086914
    4. ' liste' → logprob: -10.887643814086914
    5. '```' → logprob: -12.262643814086914
    6. 'lista' → logprob: -13.637643814086914
    7. 'lst' → logprob: -14.387643814086914
    8. '[' → logprob: -15.762643814086914
    9. '`' → logprob: -15.762643814086914
    10. 'set' → logprob: -16.387643814086914

Token 132: ' d' (ID: 272)
  Prédit: 'inputs'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'inputs' → logprob: -1.904990792274475
    2. 'numbers' → logprob: -2.0299906730651855
    3. 's' → logprob: -2.1549906730651855
    4. 'tokens' → logprob: -2.2799906730651855
    5. ':' → logprob: -2.9049906730651855
    6. 'nums' → logprob: -3.0299906730651855
    7. ',' → logprob: -3.2799906730651855
    8. 'input' → logprob: -3.2799906730651855
    9. '[' → logprob: -3.4049906730651855
    10. '.' → logprob: -3.4049906730651855

Token 133: ''ent' (ID: 53422)
  Prédit: 'ent'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'ent' → logprob: -0.2750157415866852
    2. ''ent' → logprob: -2.4000158309936523
    3. 'inte' → logprob: -2.4000158309936523
    4. 'int' → logprob: -4.150015830993652
    5. '(ent' → logprob: -4.775015830993652
    6. '’ent' → logprob: -5.275015830993652
    7. 'ints' → logprob: -5.400015830993652
    8. '```' → logprob: -5.900015830993652
    9. '<int' → logprob: -6.025015830993652
    10. '_ent' → logprob: -6.150015830993652

Token 134: 'iers' (ID: 11012)
  Prédit: 'iers'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'iers' → logprob: -0.7181538939476013
    2. 'ier' → logprob: -1.468153953552246
    3. 'ières' → logprob: -2.593153953552246
    4. 'rée' → logprob: -2.718153953552246
    5. '[' → logprob: -3.593153953552246
    6. 're' → logprob: -3.718153953552246
    7. 'er' → logprob: -4.218153953552246
    8. 'e' → logprob: -4.218153953552246
    9. 'ière' → logprob: -4.468153953552246
    10. '```' → logprob: -4.968153953552246

Token 135: '.
' (ID: 558)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '(' → logprob: -0.5506160855293274
    2. 's' → logprob: -1.6756160259246826
    3. '(
' → logprob: -2.3006160259246826
    4. '[' → logprob: -4.050616264343262
    5. 'def' → logprob: -4.175616264343262
    6. 'tokens' → logprob: -4.300616264343262
    7. ',' → logprob: -4.800616264343262
    8. 'nums' → logprob: -4.800616264343262
    9. 'numbers' → logprob: -4.800616264343262
    10. ' =' → logprob: -5.050616264343262

Token 136: 'abc' (ID: 26682)
  Prédit: 'numbers'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'numbers' → logprob: -1.279024600982666
    2. 'nums' → logprob: -1.404024600982666
    3. '(' → logprob: -2.404024600982666
    4. 'data' → logprob: -2.529024600982666
    5. 'n' → logprob: -2.529024600982666
    6. 's' → logprob: -3.654024600982666
    7. '[' → logprob: -3.779024600982666
    8. 'a' → logprob: -3.904024600982666
    9. '(
' → logprob: -4.154024600982666
    10. '(numbers' → logprob: -4.279024600982666

Token 137: ' =' (ID: 314)
  Prédit: ' ='
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' =' → logprob: -0.009182543493807316
    2. '=' → logprob: -5.134182453155518
    3. 's' → logprob: -5.884182453155518
    4. '[' → logprob: -8.509182929992676
    5. ',' → logprob: -9.509182929992676
    6. '[]' → logprob: -10.509182929992676
    7. '_' → logprob: -10.634182929992676
    8. '()' → logprob: -10.759182929992676
    9. ' ' → logprob: -11.009182929992676
    10. ')' → logprob: -11.134182929992676

Token 138: ' list' (ID: 1562)
  Prédit: 'list'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'list' → logprob: -0.014163747429847717
    2. ' list' → logprob: -4.264163970947266
    3. '[list' → logprob: -16.889163970947266
    4. '	list' → logprob: -17.264163970947266
    5. 'map' → logprob: -17.389163970947266
    6. 'input' → logprob: -17.514163970947266
    7. '=list' → logprob: -17.514163970947266
    8. '(list' → logprob: -17.639163970947266
    9. 'List' → logprob: -18.764163970947266
    10. '[' → logprob: -19.014163970947266

Token 139: '(map' (ID: 16946)
  Prédit: '(map'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(map' → logprob: -0.014209349639713764
    2. '(' → logprob: -4.264209270477295
    3. '(int' → logprob: -10.264209747314453
    4. '(
' → logprob: -12.139209747314453
    5. '(m' → logprob: -13.139209747314453
    6. 'map' → logprob: -13.139209747314453
    7. '(

' → logprob: -14.764209747314453
    8. '(ma' → logprob: -14.889209747314453
    9. '(input' → logprob: -15.264209747314453
    10. ' (' → logprob: -15.764209747314453

Token 140: '(int' (ID: 2742)
  Prédit: '(int'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(int' → logprob: -0.00045807508286088705
    2. '(' → logprob: -8.125457763671875
    3. 'int' → logprob: -8.750457763671875
    4. '(lambda' → logprob: -13.625457763671875
    5. '[int' → logprob: -14.125457763671875
    6. ' (' → logprob: -14.125457763671875
    7. ' int' → logprob: -14.875457763671875
    8. '<int' → logprob: -15.625457763671875
    9. ',int' → logprob: -16.125457763671875
    10. '(str' → logprob: -16.625457763671875

Token 141: ',' (ID: 11)
  Prédit: '(input'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(input' → logprob: -0.01730451174080372
    2. ',input' → logprob: -4.517304420471191
    3. ',' → logprob: -5.517304420471191
    4. 'input' → logprob: -6.267304420471191
    5. '(' → logprob: -8.392304420471191
    6. ' (' → logprob: -9.392304420471191
    7. ' input' → logprob: -11.642304420471191
    8. '(sys' → logprob: -12.892304420471191
    9. ' ,' → logprob: -14.142304420471191
    10. '=input' → logprob: -14.767304420471191

Token 142: ' input' (ID: 3422)
  Prédit: 'input'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'input' → logprob: -0.0024783893022686243
    2. ' input' → logprob: -6.00247859954834
    3. '(input' → logprob: -12.87747859954834
    4. ' ' → logprob: -16.502477645874023
    5. ',input' → logprob: -16.627477645874023
    6. '   ' → logprob: -17.627477645874023
    7. '
' → logprob: -17.877477645874023
    8. '<input' → logprob: -17.877477645874023
    9. '```' → logprob: -18.002477645874023
    10. 'sys' → logprob: -18.002477645874023

Token 143: '().' (ID: 1454)
  Prédit: '().'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '().' → logprob: -1.9743012671824545e-05
    2. '()' → logprob: -10.875020027160645
    3. '()))' → logprob: -14.375020027160645
    4. ' ().' → logprob: -17.125019073486328
    5. '()
' → logprob: -18.000019073486328
    6. '(' → logprob: -19.000019073486328
    7. '())))' → logprob: -19.375019073486328
    8. '()[' → logprob: -20.000019073486328
    9. '.strip' → logprob: -20.000019073486328
    10. '())' → logprob: -20.000019073486328

Token 144: 'split' (ID: 13627)
  Prédit: 'strip'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'strip' → logprob: -0.0001625379954930395
    2. 'split' → logprob: -8.750162124633789
    3. 'rstrip' → logprob: -12.500162124633789
    4. ' strip' → logprob: -15.500162124633789
    5. '.strip' → logprob: -17.12516212463379
    6. '(strip' → logprob: -17.50016212463379
    7. '-strip' → logprob: -21.50016212463379
    8. '_strip' → logprob: -21.62516212463379
    9. ')' → logprob: -22.75016212463379
    10. 'str' → logprob: -23.00016212463379

Token 145: '()))

' (ID: 125972)
  Prédit: '()))'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '()))' → logprob: -0.03056037798523903
    2. '()' → logprob: -3.5305604934692383
    3. '))' → logprob: -7.405560493469238
    4. '())' → logprob: -9.280560493469238
    5. '())))' → logprob: -9.780560493469238
    6. '()))
' → logprob: -10.780560493469238
    7. '(' → logprob: -11.030560493469238
    8. '()));' → logprob: -11.530560493469238
    9. '()))

' → logprob: -13.655560493469238
    10. '())).' → logprob: -14.155560493469238

Token 146: '#' (ID: 2)
  Prédit: '['
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '[' → logprob: -0.8629582524299622
    2. 'a' → logprob: -1.4879581928253174
    3. '
' → logprob: -1.8629581928253174
    4. '  
' → logprob: -3.2379581928253174
    5. '#' → logprob: -3.4879581928253174
    6. '\n' → logprob: -3.6129581928253174
    7. '<|end|>' → logprob: -3.7379581928253174
    8. '(' → logprob: -4.2379584312438965
    9. '\' → logprob: -4.3629584312438965
    10. ' 
' → logprob: -5.2379584312438965

Token 147: ' On' (ID: 2160)
  Prédit: 'a'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'a' → logprob: -0.008333359844982624
    2. 'A' → logprob: -6.008333206176758
    3. 'n' → logprob: -6.258333206176758
    4. 'if' → logprob: -6.633333206176758
    5. 'for' → logprob: -7.758333206176758
    6. 'print' → logprob: -7.758333206176758
    7. '#' → logprob: -7.758333206176758
    8. 'x' → logprob: -8.133333206176758
    9. 'sum' → logprob: -8.383333206176758
    10. 'max' → logprob: -8.633333206176758

Token 148: ' transforme' (ID: 184109)
  Prédit: 'a'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'a' → logprob: -0.057187262922525406
    2. 'for' → logprob: -3.55718731880188
    3. '#' → logprob: -4.057187080383301
    4. 'if' → logprob: -5.807187080383301
    5. ' a' → logprob: -6.307187080383301
    6. 'x' → logprob: -6.932187080383301
    7. 'n' → logprob: -7.057187080383301
    8. ' for' → logprob: -7.432187080383301
    9. 'def' → logprob: -7.682187080383301
    10. 'print' → logprob: -8.3071870803833

Token 149: ' la' (ID: 557)
  Prédit: 'abc'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'abc' → logprob: -0.08142966777086258
    2. ' abc' → logprob: -3.3314297199249268
    3. '(' → logprob: -4.206429481506348
    4. 'les' → logprob: -5.206429481506348
    5. '()' → logprob: -5.331429481506348
    6. 'la' → logprob: -5.456429481506348
    7. ' la' → logprob: -6.081429481506348
    8. 'l' → logprob: -6.081429481506348
    9. '[' → logprob: -6.331429481506348
    10. ' les' → logprob: -6.706429481506348

Token 150: ' liste' (ID: 31719)
  Prédit: 'abc'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'abc' → logprob: -0.17017094790935516
    2. 'liste' → logprob: -2.670171022415161
    3. ' liste' → logprob: -3.170171022415161
    4. ' abc' → logprob: -4.170170783996582
    5. 'chaine' → logprob: -4.170170783996582
    6. 'list' → logprob: -5.420170783996582
    7. ' somme' → logprob: -6.420170783996582
    8. 'prem' → logprob: -6.795170783996582
    9. ' chaîne' → logprob: -6.920170783996582
    10. '```' → logprob: -7.295170783996582

Token 151: ' abc' (ID: 75094)
  Prédit: 'abc'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'abc' → logprob: -0.038098301738500595
    2. ' abc' → logprob: -3.7880983352661133
    3. '(' → logprob: -4.538098335266113
    4. '[' → logprob: -5.913098335266113
    5. 'def' → logprob: -8.538098335266113
    6. '([' → logprob: -9.163098335266113
    7. '[:]' → logprob: -9.163098335266113
    8. '[::-' → logprob: -9.288098335266113
    9. '(ab' → logprob: -9.663098335266113
    10. '[]' → logprob: -9.788098335266113

Token 152: ' en' (ID: 469)
  Prédit: '['
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '[' → logprob: -1.6509504318237305
    2. '[::-' → logprob: -1.6509504318237305
    3. ' en' → logprob: -1.7759504318237305
    4. 'en' → logprob: -2.0259504318237305
    5. '[:]' → logprob: -2.0259504318237305
    6. ',' → logprob: -2.2759504318237305
    7. ' =' → logprob: -3.9009504318237305
    8. '[:-' → logprob: -4.1509504318237305
    9. '.sort' → logprob: -4.2759504318237305
    10. ' into' → logprob: -5.0259504318237305

Token 153: ' un' (ID: 537)
  Prédit: 'a'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'a' → logprob: -0.6042595505714417
    2. 'une' → logprob: -1.9792594909667969
    3. ' une' → logprob: -2.229259490966797
    4. 'tuple' → logprob: -2.729259490966797
    5. 'un' → logprob: -3.104259490966797
    6. 'abc' → logprob: -3.354259490966797
    7. ' a' → logprob: -3.479259490966797
    8. ' un' → logprob: -3.979259490966797
    9. ' tuple' → logprob: -5.229259490966797
    10. ' des' → logprob: -6.229259490966797

Token 154: ' ensemble' (ID: 33081)
  Prédit: 'tuple'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'tuple' → logprob: -0.04466758668422699
    2. 'set' → logprob: -3.6696674823760986
    3. 'string' → logprob: -4.794667720794678
    4. ' tuple' → logprob: -5.294667720794678
    5. 'ensemble' → logprob: -6.669667720794678
    6. 'd' → logprob: -7.294667720794678
    7. 'dict' → logprob: -7.294667720794678
    8. 'a' → logprob: -8.29466724395752
    9. 'abc' → logprob: -8.29466724395752
    10. 'sorted' → logprob: -8.79466724395752

Token 155: ' (' (ID: 350)
  Prédit: 'abc'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'abc' → logprob: -0.14308138191699982
    2. ' =' → logprob: -2.8930814266204834
    3. 'set' → logprob: -2.8930814266204834
    4. ' abc' → logprob: -4.643081188201904
    5. ',' → logprob: -5.268081188201904
    6. '=set' → logprob: -5.643081188201904
    7. ' set' → logprob: -7.018081188201904
    8. '(' → logprob: -7.143081188201904
    9. '(set' → logprob: -7.268081188201904
    10. '=' → logprob: -7.518081188201904

Token 156: 'set' (ID: 977)
  Prédit: 'set'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'set' → logprob: -0.4684158265590668
    2. 'abc' → logprob: -1.5934158563613892
    3. ' set' → logprob: -2.0934157371520996
    4. ' abc' → logprob: -3.4684157371520996
    5. ')' → logprob: -4.2184157371521
    6. ' )' → logprob: -7.4684157371521
    7. ')set' → logprob: -8.093416213989258
    8. '(set' → logprob: -8.468416213989258
    9. '),' → logprob: -8.968416213989258
    10. '```' → logprob: -9.468416213989258

Token 157: ')' (ID: 8)
  Prédit: ')'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')' → logprob: -0.0016748257912695408
    2. 'abc' → logprob: -7.001674652099609
    3. '(' → logprob: -8.12667465209961
    4. ' )' → logprob: -8.62667465209961
    5. ',' → logprob: -8.75167465209961
    6. ')
' → logprob: -9.50167465209961
    7. ')

' → logprob: -10.87667465209961
    8. '),' → logprob: -11.50167465209961
    9. 's' → logprob: -12.00167465209961
    10. ' ,' → logprob: -13.00167465209961

Token 158: ' pour' (ID: 1930)
  Prédit: 'abc'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'abc' → logprob: -0.10921231657266617
    2. 's' → logprob: -2.9842123985290527
    3. 'set' → logprob: -3.1092123985290527
    4. ' =' → logprob: -5.234212398529053
    5. ' abc' → logprob: -7.109212398529053
    6. ',' → logprob: -7.234212398529053
    7. 'xyz' → logprob: -8.234211921691895
    8. '=set' → logprob: -8.734211921691895
    9. ')' → logprob: -9.234211921691895
    10. '=' → logprob: -9.234211921691895

Token 159: ' élim' (ID: 108134)
  Prédit: 'é'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'é' → logprob: -0.50376296043396
    2. 'en' → logprob: -1.62876296043396
    3. 'sup' → logprob: -2.87876296043396
    4. 'v' → logprob: -3.50376296043396
    5. 'avoir' → logprob: -4.128763198852539
    6. 'ret' → logprob: -4.253763198852539
    7. 'fac' → logprob: -4.378763198852539
    8. 'év' → logprob: -4.628763198852539
    9. 'el' → logprob: -5.128763198852539
    10. '
' → logprob: -5.378763198852539

Token 160: 'iner' (ID: 6010)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(' → logprob: -1.606648564338684
    2. 'abc' → logprob: -1.606648564338684
    3. ' abc' → logprob: -2.3566484451293945
    4. ')' → logprob: -2.4816484451293945
    5. 'érer' → logprob: -2.7316484451293945
    6. 'ène' → logprob: -2.8566484451293945
    7. 'é' → logprob: -3.1066484451293945
    8. '()' → logprob: -3.3566484451293945
    9. 'iner' → logprob: -3.6066484451293945
    10. 'er' → logprob: -3.6066484451293945

Token 161: ' tous' (ID: 10688)
  Prédit: ' les'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' les' → logprob: -0.43099430203437805
    2. 'les' → logprob: -1.0559942722320557
    3. 'duplicates' → logprob: -7.305994510650635
    4. 'abc' → logprob: -7.805994510650635
    5. 'la' → logprob: -7.930994510650635
    6. 'l' → logprob: -8.555994033813477
    7. ' duplicates' → logprob: -8.805994033813477
    8. ' la' → logprob: -8.805994033813477
    9. 'len' → logprob: -8.805994033813477
    10. ' abc' → logprob: -10.180994033813477

Token 162: ' les' (ID: 1341)
  Prédit: 'les'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'les' → logprob: -0.51594477891922
    2. ' les' → logprob: -1.3909447193145752
    3. 'duplicates' → logprob: -2.265944719314575
    4. ' duplicates' → logprob: -3.765944719314575
    5. 'abc' → logprob: -4.640944957733154
    6. '_duplicates' → logprob: -4.890944957733154
    7. '(' → logprob: -5.390944957733154
    8. 'duplicate' → logprob: -6.640944957733154
    9. 'la' → logprob: -7.015944957733154
    10. 'des' → logprob: -7.640944957733154

Token 163: ' doubl' (ID: 127992)
  Prédit: 'dou'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'dou' → logprob: -0.6026617288589478
    2. ' doubl' → logprob: -1.3526617288589478
    3. 'élé' → logprob: -1.8526617288589478
    4. 'd' → logprob: -3.477661609649658
    5. 'duplicates' → logprob: -5.352661609649658
    6. 'dup' → logprob: -7.977661609649658
    7. ' éléments' → logprob: -8.102662086486816
    8. 'é' → logprob: -8.227662086486816
    9. 'duplic' → logprob: -8.352662086486816
    10. ' duplicates' → logprob: -8.852662086486816

Token 164: 'ons' (ID: 1808)
  Prédit: 'ons'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'ons' → logprob: -0.0005026352009736001
    2. 'és' → logprob: -7.625502586364746
    3. 'ions' → logprob: -12.000502586364746
    4. '```' → logprob: -13.250502586364746
    5. 'onn' → logprob: -14.000502586364746
    6. '#' → logprob: -14.250502586364746
    7. '   ' → logprob: -14.375502586364746
    8. 'on' → logprob: -14.500502586364746
    9. '{' → logprob: -14.500502586364746
    10. 'ic' → logprob: -14.875502586364746

Token 165: ',' (ID: 11)
  Prédit: 'abc'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'abc' → logprob: -0.11596035212278366
    2. 'unique' → logprob: -2.4909603595733643
    3. 's' → logprob: -4.115960121154785
    4. 'set' → logprob: -5.865960121154785
    5. 'distinct' → logprob: -6.115960121154785
    6. 'uni' → logprob: -6.615960121154785
    7. 'uniq' → logprob: -7.115960121154785
    8. '
' → logprob: -7.490960121154785
    9. ',' → logprob: -7.740960121154785
    10. '#' → logprob: -7.990960121154785

Token 166: ' car' (ID: 1669)
  Prédit: 'unique'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'unique' → logprob: -0.756679356098175
    2. 'abc' → logprob: -0.881679356098175
    3. 's' → logprob: -3.1316792964935303
    4. 'if' → logprob: -3.7566792964935303
    5. 'distinct' → logprob: -3.8816792964935303
    6. 'uniq' → logprob: -5.006679534912109
    7. ' unique' → logprob: -5.256679534912109
    8. 'uni' → logprob: -5.256679534912109
    9. 'set' → logprob: -5.381679534912109
    10. '#' → logprob: -6.381679534912109

Token 167: ' un' (ID: 537)
  Prédit: ' len'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' len' → logprob: -0.9555404782295227
    2. ' abc' → logprob: -1.205540418624878
    3. 'abc' → logprob: -1.830540418624878
    4. 'len' → logprob: -2.580540418624878
    5. ' set' → logprob: -3.455540418624878
    6. 'set' → logprob: -3.580540418624878
    7. ' il' → logprob: -5.955540657043457
    8. ' les' → logprob: -6.080540657043457
    9. ' le' → logprob: -6.205540657043457
    10. ' the' → logprob: -6.580540657043457

Token 168: ' ensemble' (ID: 33081)
  Prédit: ' set'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' set' → logprob: -0.15195712447166443
    2. ' abc' → logprob: -3.0269570350646973
    3. ' len' → logprob: -3.2769570350646973
    4. ' unique' → logprob: -4.151957035064697
    5. 'set' → logprob: -4.901957035064697
    6. ' ensemble' → logprob: -5.276957035064697
    7. ' s' → logprob: -5.651957035064697
    8. ' ' → logprob: -5.901957035064697
    9. 'abc' → logprob: -6.026957035064697
    10. 's' → logprob: -6.026957035064697

Token 169: ' ne' (ID: 453)
  Prédit: ' ne'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' ne' → logprob: -0.22587770223617554
    2. 'ne' → logprob: -1.9758777618408203
    3. ' n' → logprob: -3.1008777618408203
    4. 'n' → logprob: -4.47587776184082
    5. 'cont' → logprob: -6.10087776184082
    6. ' contient' → logprob: -6.72587776184082
    7. 'a' → logprob: -7.22587776184082
    8. ' a' → logprob: -8.10087776184082
    9. 's' → logprob: -8.22587776184082
    10. ' est' → logprob: -8.35087776184082

Token 170: ' peut' (ID: 9216)
  Prédit: 'cont'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'cont' → logprob: -0.3229139745235443
    2. 'con' → logprob: -1.8229140043258667
    3. 'pe' → logprob: -3.072913885116577
    4. 'g' → logprob: -3.572913885116577
    5. ' contient' → logprob: -3.822913885116577
    6. 'poss' → logprob: -4.697914123535156
    7. ' conserve' → logprob: -6.072914123535156
    8. ' peut' → logprob: -6.947914123535156
    9. ' garde' → logprob: -6.947914123535156
    10. '
' → logprob: -7.447914123535156

Token 171: ' conten' (ID: 23523)
  Prédit: 'con'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'con' → logprob: -0.21639689803123474
    2. 'pas' → logprob: -2.5913968086242676
    3. 'conten' → logprob: -2.7163968086242676
    4. 'cont' → logprob: -3.4663968086242676
    5. ' conten' → logprob: -4.216396808624268
    6. 'avoir' → logprob: -5.466396808624268
    7. ' pas' → logprob: -6.466396808624268
    8. 'poss' → logprob: -7.841396808624268
    9. 'contain' → logprob: -7.841396808624268
    10. ' avoir' → logprob: -8.216397285461426

Token 172: 'ir' (ID: 380)
  Prédit: 't'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 't' → logprob: -0.4765379726886749
    2. 'ir' → logprob: -1.2265379428863525
    3. 'r' → logprob: -3.1015379428863525
    4. 'er' → logprob: -3.6015379428863525
    5. 'pas' → logprob: -4.726538181304932
    6. 'ur' → logprob: -6.351538181304932
    7. 'tir' → logprob: -7.351538181304932
    8. 'tenir' → logprob: -7.976538181304932
    9. '#' → logprob: -8.726537704467773
    10. '
' → logprob: -8.726537704467773

Token 173: ' des' (ID: 731)
  Prédit: ' que'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' que' → logprob: -0.4153028130531311
    2. 'que' → logprob: -1.1653027534484863
    3. 'pas' → logprob: -4.540302753448486
    4. 'qu' → logprob: -5.290302753448486
    5. 'plus' → logprob: -5.415302753448486
    6. 'duplicates' → logprob: -6.415302753448486
    7. 'les' → logprob: -6.540302753448486
    8. 'des' → logprob: -6.790302753448486
    9. ' pas' → logprob: -7.790302753448486
    10. ' des' → logprob: -7.790302753448486

Token 174: ' éléments' (ID: 57375)
  Prédit: 'élé'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'élé' → logprob: -0.02381766214966774
    2. ' éléments' → logprob: -4.148817539215088
    3. 'dou' → logprob: -5.898817539215088
    4. 'duplicates' → logprob: -6.023817539215088
    5. ' doubl' → logprob: -7.273817539215088
    6. ' duplicates' → logprob: -7.773817539215088
    7. 'dup' → logprob: -7.898817539215088
    8. 'val' → logprob: -8.523818016052246
    9. 'é' → logprob: -8.523818016052246
    10. 'duplic' → logprob: -8.648818016052246

Token 175: ' ident' (ID: 3951)
  Prédit: 'duplicates'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'duplicates' → logprob: -0.5829147100448608
    2. 'uni' → logprob: -1.5829147100448608
    3. 'duplic' → logprob: -1.8329147100448608
    4. 'du' → logprob: -3.5829148292541504
    5. 'dup' → logprob: -4.20791482925415
    6. ' duplicates' → logprob: -4.70791482925415
    7. 'ident' → logprob: -4.95791482925415
    8. 'distinct' → logprob: -5.83291482925415
    9. 'red' → logprob: -5.83291482925415
    10. 'uniq' → logprob: -6.20791482925415

Token 176: 'iques' (ID: 11654)
  Prédit: 'ques'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'ques' → logprob: -0.14522340893745422
    2. 'fi' → logprob: -2.520223379135132
    3. 'f' → logprob: -3.145223379135132
    4. 'que' → logprob: -5.145223617553711
    5. 'iques' → logprob: -6.520223617553711
    6. 'cal' → logprob: -6.645223617553711
    7. 'tiques' → logprob: -6.895223617553711
    8. '#' → logprob: -7.645223617553711
    9. '
' → logprob: -8.520223617553711
    10. 'c' → logprob: -8.520223617553711

Token 177: '.
' (ID: 558)
  Prédit: 'abc'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'abc' → logprob: -0.7392590641975403
    2. 'unique' → logprob: -1.7392590045928955
    3. 's' → logprob: -1.8642590045928955
    4. 'set' → logprob: -2.3642590045928955
    5. '
' → logprob: -3.2392590045928955
    6. 'distinct' → logprob: -3.4892590045928955
    7. ',' → logprob: -4.739259243011475
    8. ' unique' → logprob: -5.489259243011475
    9. 'if' → logprob: -5.739259243011475
    10. '#' → logprob: -5.864259243011475

Token 178: '#' (ID: 2)
  Prédit: 'unique'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'unique' → logprob: -1.1757053136825562
    2. 'abc' → logprob: -1.1757053136825562
    3. ' unique' → logprob: -2.0507054328918457
    4. 'if' → logprob: -2.5507054328918457
    5. ' if' → logprob: -2.9257054328918457
    6. 's' → logprob: -3.3007054328918457
    7. ' abc' → logprob: -3.6757054328918457
    8. 'distinct' → logprob: -3.9257054328918457
    9. ' distinct' → logprob: -4.550705432891846
    10. 'uniq' → logprob: -4.800705432891846

Token 179: ' Ensuite' (ID: 113884)
  Prédit: 'unique'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'unique' → logprob: -0.5266477465629578
    2. ' unique' → logprob: -2.2766478061676025
    3. 'abc' → logprob: -2.2766478061676025
    4. 's' → logprob: -3.1516478061676025
    5. 'if' → logprob: -3.1516478061676025
    6. 'distinct' → logprob: -3.4016478061676025
    7. 'uniq' → logprob: -3.7766478061676025
    8. ' if' → logprob: -3.9016478061676025
    9. ' distinct' → logprob: -4.526647567749023
    10. 'set' → logprob: -5.276647567749023

Token 180: ',' (ID: 11)
  Prédit: ','
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ',' → logprob: -0.268978089094162
    2. 's' → logprob: -2.5189781188964844
    3. 'on' → logprob: -3.2689781188964844
    4. 'if' → logprob: -3.6439781188964844
    5. ' on' → logprob: -3.8939781188964844
    6. 'unique' → logprob: -4.268978118896484
    7. 'abc' → logprob: -4.643978118896484
    8. 'len' → logprob: -4.643978118896484
    9. 'a' → logprob: -5.393978118896484
    10. '#' → logprob: -5.768978118896484

Token 181: ' on' (ID: 402)
  Prédit: 'if'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'if' → logprob: -0.3865797817707062
    2. 'len' → logprob: -1.6365797519683838
    3. ' if' → logprob: -2.636579751968384
    4. ' on' → logprob: -4.136579990386963
    5. '#' → logprob: -5.011579990386963
    6. 'on' → logprob: -5.136579990386963
    7. 's' → logprob: -5.511579990386963
    8. ' len' → logprob: -5.886579990386963
    9. 'size' → logprob: -5.886579990386963
    10. 'print' → logprob: -6.136579990386963

Token 182: ' calc' (ID: 25691)
  Prédit: 'len'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'len' → logprob: -0.3404843807220459
    2. 'if' → logprob: -1.340484380722046
    3. ' len' → logprob: -4.965484619140625
    4. ' if' → logprob: -5.090484619140625
    5. '#' → logprob: -5.215484619140625
    6. 'print' → logprob: -6.215484619140625
    7. 'v' → logprob: -6.715484619140625
    8. 's' → logprob: -6.965484619140625
    9. 'length' → logprob: -7.715484619140625
    10. 'size' → logprob: -7.840484619140625

Token 183: 'ule' (ID: 1601)
  Prédit: 'ule'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'ule' → logprob: -0.0018694984028115869
    2. 'ul' → logprob: -7.0018696784973145
    3. 'ulate' → logprob: -8.376869201660156
    4. 'le' → logprob: -8.501869201660156
    5. 'cule' → logprob: -8.751869201660156
    6. '#' → logprob: -9.376869201660156
    7. 'ulé' → logprob: -9.376869201660156
    8. 'ulte' → logprob: -11.001869201660156
    9. 'ole' → logprob: -11.251869201660156
    10. 'ulaire' → logprob: -11.376869201660156

Token 184: ' le' (ID: 505)
  Prédit: 'len'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'len' → logprob: -0.01622440107166767
    2. 'la' → logprob: -4.141224384307861
    3. ' la' → logprob: -9.89122486114502
    4. '3' → logprob: -10.01622486114502
    5. '(len' → logprob: -10.26622486114502
    6. ' len' → logprob: -10.64122486114502
    7. 'le' → logprob: -11.01622486114502
    8. 'l' → logprob: -11.76622486114502
    9. '=len' → logprob: -12.76622486114502
    10. '4' → logprob: -13.01622486114502

Token 185: ' nombre' (ID: 9733)
  Prédit: 'len'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'len' → logprob: -0.5967405438423157
    2. 'nombre' → logprob: -0.8467405438423157
    3. 'long' → logprob: -4.22174072265625
    4. 'length' → logprob: -5.72174072265625
    5. ' nombre' → logprob: -6.59674072265625
    6. 't' → logprob: -8.34674072265625
    7. 'nom' → logprob: -8.59674072265625
    8. 'tail' → logprob: -8.72174072265625
    9. 'n' → logprob: -9.22174072265625
    10. ' len' → logprob: -9.59674072265625

Token 186: ' d' (ID: 272)
  Prédit: 'd'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'd' → logprob: -0.9456918835639954
    2. ' d' → logprob: -1.4456918239593506
    3. 'len' → logprob: -1.4456918239593506
    4. ' de' → logprob: -2.9456918239593506
    5. 'de' → logprob: -3.0706918239593506
    6. '=len' → logprob: -3.9456918239593506
    7. ' len' → logprob: -5.69569206237793
    8. 'total' → logprob: -5.82069206237793
    9. 's' → logprob: -5.82069206237793
    10. 'unique' → logprob: -6.07069206237793

Token 187: ''' (ID: 6)
  Prédit: 'élé'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'élé' → logprob: -0.02672206610441208
    2. ' éléments' → logprob: -3.901721954345703
    3. 'abc' → logprob: -6.151721954345703
    4. 'elements' → logprob: -6.401721954345703
    5. ' abc' → logprob: -7.151721954345703
    6. 's' → logprob: -7.776721954345703
    7. ' elements' → logprob: -8.276721954345703
    8. 'é' → logprob: -9.151721954345703
    9. 'car' → logprob: -9.526721954345703
    10. 'l' → logprob: -10.026721954345703

Token 188: 'élé' (ID: 15228)
  Prédit: 'élé'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'élé' → logprob: -0.00510556111112237
    2. ' éléments' → logprob: -5.505105495452881
    3. 'elements' → logprob: -7.255105495452881
    4. 'abc' → logprob: -8.505105972290039
    5. ' elements' → logprob: -10.005105972290039
    6. 'él' → logprob: -10.755105972290039
    7. ' abc' → logprob: -11.130105972290039
    8. 'unique' → logprob: -11.505105972290039
    9. 'é' → logprob: -12.130105972290039
    10. 'element' → logprob: -12.255105972290039

Token 189: 'ments' (ID: 1626)
  Prédit: 'ments'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'ments' → logprob: -0.2355029284954071
    2. 'éments' → logprob: -1.6105029582977295
    3. 'ements' → logprob: -4.73550271987915
    4. 'é' → logprob: -7.36050271987915
    5. 'm' → logprob: -8.485503196716309
    6. 'ém' → logprob: -8.610503196716309
    7. 'è' → logprob: -10.235503196716309
    8. 'lements' → logprob: -10.360503196716309
    9. 'mé' → logprob: -10.610503196716309
    10. '```' → logprob: -10.610503196716309

Token 190: ' distinct' (ID: 16913)
  Prédit: 'unique'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'unique' → logprob: -1.360973834991455
    2. 'distinct' → logprob: -1.485973834991455
    3. 'uni' → logprob: -2.110973834991455
    4. 'diff' → logprob: -2.610973834991455
    5. 'abc' → logprob: -2.860973834991455
    6. ' uniques' → logprob: -2.985973834991455
    7. ' unique' → logprob: -3.110973834991455
    8. 'uniq' → logprob: -3.110973834991455
    9. 'dans' → logprob: -3.235973834991455
    10. 'len' → logprob: -3.860973834991455

Token 191: 's' (ID: 82)
  Prédit: 's'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 's' → logprob: -0.012051350437104702
    2. 'abc' → logprob: -5.137051582336426
    3. 'distinct' → logprob: -6.137051582336426
    4. '(s' → logprob: -6.762051582336426
    5. ' =' → logprob: -7.762051582336426
    6. ',' → logprob: -7.762051582336426
    7. ')' → logprob: -8.262051582336426
    8. '(' → logprob: -8.512051582336426
    9. '=' → logprob: -8.887051582336426
    10. 'dans' → logprob: -8.887051582336426

Token 192: ' présents' (ID: 108718)
  Prédit: 'distinct'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'distinct' → logprob: -0.40575557947158813
    2. 'print' → logprob: -2.6557555198669434
    3. ',' → logprob: -2.7807555198669434
    4. 'abc' → logprob: -3.2807555198669434
    5. 'dist' → logprob: -3.4057555198669434
    6. 'dans' → logprob: -3.5307555198669434
    7. 'diff' → logprob: -4.155755519866943
    8. ' =' → logprob: -4.280755519866943
    9. 'd' → logprob: -4.280755519866943
    10. 's' → logprob: -4.655755519866943

Token 193: ' dans' (ID: 2671)
  Prédit: 'dans'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'dans' → logprob: -0.3668368458747864
    2. ' dans' → logprob: -1.4918367862701416
    3. ')' → logprob: -3.4918367862701416
    4. 'abc' → logprob: -3.8668367862701416
    5. ',' → logprob: -4.366837024688721
    6. 'len' → logprob: -5.241837024688721
    7. 's' → logprob: -5.616837024688721
    8. 'set' → logprob: -6.491837024688721
    9. 'in' → logprob: -6.991837024688721
    10. '#' → logprob: -6.991837024688721

Token 194: ' abc' (ID: 75094)
  Prédit: 'abc'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'abc' → logprob: -0.025171007961034775
    2. ' abc' → logprob: -3.7751710414886475
    3. 'set' → logprob: -6.525170803070068
    4. 'l' → logprob: -7.900170803070068
    5. ' set' → logprob: -9.900171279907227
    6. ' l' → logprob: -11.150171279907227
    7. 'la' → logprob: -12.400171279907227
    8. 'cet' → logprob: -12.400171279907227
    9. 'abcdef' → logprob: -12.400171279907227
    10. 'the' → logprob: -13.525171279907227

Token 195: ' à' (ID: 1221)
  Prédit: 'distinct'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'distinct' → logprob: -0.8252219557762146
    2. 'print' → logprob: -1.4502220153808594
    3. 'count' → logprob: -1.4502220153808594
    4. 'unique' → logprob: -3.7002220153808594
    5. 'n' → logprob: -3.9502220153808594
    6. '
' → logprob: -4.575222015380859
    7. 'diff' → logprob: -4.700222015380859
    8. 'nb' → logprob: -4.825222015380859
    9. 'num' → logprob: -5.075222015380859
    10. 'dist' → logprob: -5.450222015380859

Token 196: ' l' (ID: 305)
  Prédit: 'len'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'len' → logprob: -0.00485883466899395
    2. ' len' → logprob: -5.50485897064209
    3. 'l' → logprob: -7.62985897064209
    4. '3' → logprob: -10.00485897064209
    5. '=len' → logprob: -10.12985897064209
    6. ' l' → logprob: -10.62985897064209
    7. ' ' → logprob: -10.75485897064209
    8. 'la' → logprob: -10.75485897064209
    9. '(len' → logprob: -10.75485897064209
    10. 'abc' → logprob: -10.87985897064209

Token 197: ''aide' (ID: 75684)
  Prédit: 'len'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'len' → logprob: -0.581282377243042
    2. '=len' → logprob: -1.331282377243042
    3. ''aide' → logprob: -2.581282377243042
    4. 'ength' → logprob: -2.831282377243042
    5. 'en' → logprob: -4.331282615661621
    6. 'a' → logprob: -4.831282615661621
    7. '(len' → logprob: -5.081282615661621
    8. ' len' → logprob: -6.081282615661621
    9. 'length' → logprob: -6.331282615661621
    10. 'python' → logprob: -6.831282615661621

Token 198: ' de' (ID: 334)
  Prédit: '(len'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(len' → logprob: -0.0412377305328846
    2. '(' → logprob: -3.9162378311157227
    3. 'len' → logprob: -4.166237831115723
    4. 'de' → logprob: -6.416237831115723
    5. ' de' → logprob: -7.041237831115723
    6. '(de' → logprob: -7.041237831115723
    7. ')' → logprob: -7.416237831115723
    8. '()' → logprob: -8.041237831115723
    9. '(set' → logprob: -8.041237831115723
    10. '=len' → logprob: -8.916237831115723

Token 199: ' la' (ID: 557)
  Prédit: 'len'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'len' → logprob: -7.553032628493384e-05
    2. ' len' → logprob: -9.500075340270996
    3. '(len' → logprob: -15.500075340270996
    4. '```' → logprob: -16.000076293945312
    5. '
' → logprob: -16.125076293945312
    6. 'print' → logprob: -16.750076293945312
    7. '=len' → logprob: -17.000076293945312
    8. 'set' → logprob: -17.375076293945312
    9. '[len' → logprob: -17.625076293945312
    10. 'la' → logprob: -17.875076293945312

Token 200: ' fonction' (ID: 17610)
  Prédit: 'len'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'len' → logprob: -8.895480277715251e-06
    2. ' len' → logprob: -12.000008583068848
    3. 'print' → logprob: -13.375008583068848
    4. 'set' → logprob: -14.125008583068848
    5. '
' → logprob: -15.625008583068848
    6. '```' → logprob: -16.375009536743164
    7. '(len' → logprob: -16.875009536743164
    8. '=len' → logprob: -17.250009536743164
    9. '`' → logprob: -17.625009536743164
    10. '[len' → logprob: -17.750009536743164

Token 201: ' len' (ID: 4631)
  Prédit: 'len'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'len' → logprob: -0.0004324573092162609
    2. ' len' → logprob: -7.75043249130249
    3. '(len' → logprob: -13.750432014465332
    4. '```' → logprob: -15.125432014465332
    5. '=len' → logprob: -15.625432014465332
    6. '`' → logprob: -16.37543296813965
    7. ',len' → logprob: -17.62543296813965
    8. 'set' → logprob: -17.62543296813965
    9. 'print' → logprob: -17.87543296813965
    10. '	len' → logprob: -18.00043296813965

Token 202: ',' (ID: 11)
  Prédit: 'distinct'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'distinct' → logprob: -0.3180370032787323
    2. '(' → logprob: -2.1930370330810547
    3. ')' → logprob: -2.5680370330810547
    4. 'print' → logprob: -2.9430370330810547
    5. '(unique' → logprob: -5.318037033081055
    6. '(dist' → logprob: -5.568037033081055
    7. 'abc' → logprob: -5.568037033081055
    8. '(set' → logprob: -6.068037033081055
    9. '(s' → logprob: -6.068037033081055
    10. '()' → logprob: -6.318037033081055

Token 203: ' qui' (ID: 2780)
  Prédit: 'print'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'print' → logprob: -0.12650759518146515
    2. 'distinct' → logprob: -3.126507520675659
    3. 'n' → logprob: -3.876507520675659
    4. 'result' → logprob: -4.376507759094238
    5. 'abc' → logprob: -4.626507759094238
    6. 'count' → logprob: -5.001507759094238
    7. 'len' → logprob: -5.251507759094238
    8. ' print' → logprob: -5.876507759094238
    9. ' distinct' → logprob: -6.126507759094238
    10. 'nb' → logprob: -6.126507759094238

Token 204: ' retourne' (ID: 178818)
  Prédit: 'ren'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'ren' → logprob: -0.42393958568573
    2. ' ren' → logprob: -1.67393958568573
    3. 'ret' → logprob: -2.7989397048950195
    4. ' retourne' → logprob: -3.2989397048950195
    5. 'don' → logprob: -3.6739397048950195
    6. ' donne' → logprob: -4.0489397048950195
    7. 'return' → logprob: -5.2989397048950195
    8. 'comp' → logprob: -6.0489397048950195
    9. ' permet' → logprob: -6.2989397048950195
    10. ' compte' → logprob: -6.9239397048950195

Token 205: ' la' (ID: 557)
  Prédit: 'len'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'len' → logprob: -0.15852534770965576
    2. ' len' → logprob: -2.7835254669189453
    3. 'la' → logprob: -3.1585254669189453
    4. '(len' → logprob: -4.033525466918945
    5. ' la' → logprob: -4.408525466918945
    6. 'le' → logprob: -4.533525466918945
    7. ' le' → logprob: -6.908525466918945
    8. 'l' → logprob: -7.408525466918945
    9. '(' → logprob: -10.533525466918945
    10. ' ' → logprob: -11.408525466918945

Token 206: ' taille' (ID: 41644)
  Prédit: 'nombre'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'nombre' → logprob: -0.09099458158016205
    2. 'len' → logprob: -2.4659945964813232
    3. ' nombre' → logprob: -6.465994358062744
    4. 'tail' → logprob: -8.340994834899902
    5. 'long' → logprob: -8.965994834899902
    6. 'size' → logprob: -10.340994834899902
    7. ' len' → logprob: -10.715994834899902
    8. 'length' → logprob: -10.715994834899902
    9. 'count' → logprob: -11.715994834899902
    10. 'nom' → logprob: -12.090994834899902

Token 207: ' de' (ID: 334)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(' → logprob: -0.5325435996055603
    2. '(set' → logprob: -1.032543659210205
    3. 'de' → logprob: -4.032543659210205
    4. 'abc' → logprob: -4.407543659210205
    5. '(de' → logprob: -4.657543659210205
    6. '(unique' → logprob: -4.907543659210205
    7. '(ab' → logprob: -5.657543659210205
    8. '(s' → logprob: -7.032543659210205
    9. '(len' → logprob: -7.032543659210205
    10. ' de' → logprob: -7.032543659210205

Token 208: ' l' (ID: 305)
  Prédit: 'abc'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'abc' → logprob: -0.5607853531837463
    2. 'set' → logprob: -1.5607852935791016
    3. ' abc' → logprob: -1.6857852935791016
    4. ' set' → logprob: -3.4357852935791016
    5. 'ab' → logprob: -8.185785293579102
    6. ' ab' → logprob: -8.685785293579102
    7. ' ' → logprob: -8.935785293579102
    8. 'ensemble' → logprob: -8.935785293579102
    9. ')' → logprob: -9.060785293579102
    10. 's' → logprob: -9.185785293579102

Token 209: ''ensemble' (ID: 79341)
  Prédit: 'set'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'set' → logprob: -0.8221861124038696
    2. 'abc' → logprob: -0.8221861124038696
    3. ' set' → logprob: -2.69718599319458
    4. ' abc' → logprob: -3.44718599319458
    5. 'ensemble' → logprob: -3.94718599319458
    6. ''ensemble' → logprob: -6.44718599319458
    7. ' ensemble' → logprob: -8.197186470031738
    8. '```' → logprob: -8.572186470031738
    9. '`' → logprob: -9.197186470031738
    10. 's' → logprob: -9.947186470031738

Token 210: '.
' (ID: 558)
  Prédit: 'print'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'print' → logprob: -0.023847347125411034
    2. 'distinct' → logprob: -4.273847579956055
    3. '
' → logprob: -6.023847579956055
    4. 'dist' → logprob: -6.648847579956055
    5. 'n' → logprob: -6.898847579956055
    6. 'count' → logprob: -7.023847579956055
    7. 'result' → logprob: -7.273847579956055
    8. 'nombre' → logprob: -7.398847579956055
    9. 'd' → logprob: -7.523847579956055
    10. '#' → logprob: -7.898847579956055

Token 211: 'res' (ID: 430)
  Prédit: 'print'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'print' → logprob: -0.05308690294623375
    2. 'distinct' → logprob: -3.428086996078491
    3. 'count' → logprob: -4.678086757659912
    4. 'diff' → logprob: -6.178086757659912
    5. 'if' → logprob: -6.553086757659912
    6. 'dist' → logprob: -6.803086757659912
    7. 'n' → logprob: -6.803086757659912
    8. 'unique' → logprob: -6.803086757659912
    9. 'result' → logprob: -7.303086757659912
    10. 'nb' → logprob: -7.553086757659912

Token 212: ' =' (ID: 314)
  Prédit: 'ult'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'ult' → logprob: -0.1683269590139389
    2. ' =' → logprob: -1.9183269739151
    3. '=' → logprob: -5.5433268547058105
    4. 't' → logprob: -5.7933268547058105
    5. 'ultat' → logprob: -7.4183268547058105
    6. 'ults' → logprob: -7.7933268547058105
    7. 'ul' → logprob: -9.668327331542969
    8. 'u' → logprob: -11.418327331542969
    9. 'ut' → logprob: -12.418327331542969
    10. ' ' → logprob: -12.668327331542969

Token 213: ' len' (ID: 4631)
  Prédit: 'len'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'len' → logprob: -0.0019288709154352546
    2. ' len' → logprob: -6.251928806304932
    3. '(len' → logprob: -15.75192928314209
    4. '	len' → logprob: -16.376928329467773
    5. ' ' → logprob: -17.626928329467773
    6. 'set' → logprob: -18.126928329467773
    7. '3' → logprob: -18.876928329467773
    8. '[len' → logprob: -19.251928329467773
    9. '   ' → logprob: -19.501928329467773
    10. 'le' → logprob: -19.751928329467773

Token 214: '(set' (ID: 25904)
  Prédit: '(set'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(set' → logprob: -4.847109812544659e-05
    2. '(' → logprob: -10.375048637390137
    3. 'set' → logprob: -11.000048637390137
    4. ' set' → logprob: -16.25004768371582
    5. '({' → logprob: -16.37504768371582
    6. ' (' → logprob: -16.50004768371582
    7. '(s' → logprob: -16.75004768371582
    8. '=set' → logprob: -16.75004768371582
    9. '```' → logprob: -17.25004768371582
    10. '	set' → logprob: -17.25004768371582

Token 215: '(' (ID: 7)
  Prédit: '('
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(' → logprob: -3.054500666621607e-06
    2. ' (' → logprob: -12.87500286102295
    3. 'abc' → logprob: -15.00000286102295
    4. ')' → logprob: -17.875003814697266
    5. '((' → logprob: -18.000003814697266
    6. '(
' → logprob: -19.375003814697266
    7. '(ab' → logprob: -19.750003814697266
    8. ')(' → logprob: -20.000003814697266
    9. '(abs' → logprob: -20.250003814697266
    10. ' )' → logprob: -21.000003814697266

Token 216: 'abc' (ID: 26682)
  Prédit: 'abc'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'abc' → logprob: -4.930552313453518e-05
    2. '(' → logprob: -10.125049591064453
    3. ' abc' → logprob: -11.625049591064453
    4. ')' → logprob: -15.500049591064453
    5. 'ABC' → logprob: -18.625049591064453
    6. 'abcdef' → logprob: -19.125049591064453
    7. 'xyz' → logprob: -19.250049591064453
    8. ' (' → logprob: -20.375049591064453
    9. ' )' → logprob: -20.750049591064453
    10. ' ' → logprob: -20.750049591064453

Token 217: '))

' (ID: 9746)
  Prédit: '))'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '))' → logprob: -9.29340603761375e-05
    2. '))
' → logprob: -10.000092506408691
    3. ')' → logprob: -10.125092506408691
    4. ')))' → logprob: -12.375092506408691
    5. '()))' → logprob: -13.250092506408691
    6. '))

' → logprob: -14.250092506408691
    7. ' ))' → logprob: -15.000092506408691
    8. ' ' → logprob: -16.125093460083008
    9. '()' → logprob: -16.750093460083008
    10. '))-' → logprob: -16.750093460083008

Token 218: '#' (ID: 2)
  Prédit: 'print'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'print' → logprob: -0.007797902915626764
    2. 'if' → logprob: -4.882797718048096
    3. '
' → logprob: -8.757798194885254
    4. '#' → logprob: -11.632798194885254
    5. ' print' → logprob: -11.632798194885254
    6. '```' → logprob: -12.007798194885254
    7. ' if' → logprob: -13.257798194885254
    8. 'prin' → logprob: -13.382798194885254
    9. 'for' → logprob: -13.882798194885254
    10. '\n' → logprob: -14.132798194885254

Token 219: ' On' (ID: 2160)
  Prédit: 'print'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'print' → logprob: -0.029759405180811882
    2. 'if' → logprob: -3.529759407043457
    3. 'pr' → logprob: -12.904759407043457
    4. 'for' → logprob: -13.029759407043457
    5. 'prin' → logprob: -13.654759407043457
    6. ' print' → logprob: -14.154759407043457
    7. '#' → logprob: -14.279759407043457
    8. ' if' → logprob: -14.654759407043457
    9. 'pri' → logprob: -14.779759407043457
    10. '```' → logprob: -15.154759407043457

Token 220: ' effect' (ID: 3159)
  Prédit: 'print'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'print' → logprob: -0.0071233343333005905
    2. 'if' → logprob: -5.0071234703063965
    3. ' print' → logprob: -7.8821234703063965
    4. ' if' → logprob: -11.507122993469238
    5. 'pr' → logprob: -11.757122993469238
    6. '
' → logprob: -12.132122993469238
    7. '#' → logprob: -12.882122993469238
    8. 'prin' → logprob: -12.882122993469238
    9. 'for' → logprob: -13.632122993469238
    10. '_print' → logprob: -15.757122993469238

Token 221: 'ue' (ID: 466)
  Prédit: 'ue'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'ue' → logprob: -0.1326608508825302
    2. 'u' → logprob: -2.1326608657836914
    3. 'uer' → logprob: -5.882660865783691
    4. '#' → logprob: -6.632660865783691
    5. 'uant' → logprob: -7.507660865783691
    6. 'ué' → logprob: -7.632660865783691
    7. 'uent' → logprob: -8.757660865783691
    8. 'uate' → logprob: -8.882660865783691
    9. 'uez' → logprob: -9.382660865783691
    10. '(' → logprob: -10.007660865783691

Token 222: ' un' (ID: 537)
  Prédit: 'print'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'print' → logprob: -0.8089286088943481
    2. ' print' → logprob: -0.9339286088943481
    3. 'if' → logprob: -2.3089284896850586
    4. ' if' → logprob: -3.3089284896850586
    5. '(' → logprob: -4.683928489685059
    6. '(print' → logprob: -5.183928489685059
    7. '(
' → logprob: -5.933928489685059
    8. '#' → logprob: -6.433928489685059
    9. ' ' → logprob: -6.683928489685059
    10. '```' → logprob: -6.808928489685059

Token 223: ' test' (ID: 1746)
  Prédit: 'print'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'print' → logprob: -0.180164635181427
    2. 'if' → logprob: -1.8051645755767822
    3. ' if' → logprob: -9.305164337158203
    4. '
' → logprob: -9.680164337158203
    5. '```' → logprob: -9.805164337158203
    6. ' print' → logprob: -9.930164337158203
    7. '#' → logprob: -10.055164337158203
    8. 'import' → logprob: -10.305164337158203
    9. 'conditional' → logprob: -10.680164337158203
    10. 'e' → logprob: -11.430164337158203

Token 224: ' condition' (ID: 7060)
  Prédit: 'if'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'if' → logprob: -0.6459179520606995
    2. '
' → logprob: -1.2709178924560547
    3. ' if' → logprob: -1.6459178924560547
    4. ':' → logprob: -7.520917892456055
    5. ':
' → logprob: -7.895917892456055
    6. '```' → logprob: -8.145917892456055
    7. 'res' → logprob: -8.520917892456055
    8. '#' → logprob: -9.020917892456055
    9. ' 
' → logprob: -9.020917892456055
    10. 'for' → logprob: -9.145917892456055

Token 225: 'nel' (ID: 10085)
  Prédit: 'if'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'if' → logprob: -0.012411937117576599
    2. ' if' → logprob: -4.887412071228027
    3. 'al' → logprob: -5.387412071228027
    4. ':' → logprob: -9.262412071228027
    5. 'e' → logprob: -9.887412071228027
    6. 'res' → logprob: -10.887412071228027
    7. 'ion' → logprob: -11.012412071228027
    8. '
' → logprob: -11.887412071228027
    9. '```' → logprob: -11.887412071228027
    10. '#' → logprob: -12.137412071228027

Token 226: ' :
' (ID: 10039)
  Prédit: 'if'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'if' → logprob: -0.39552396535873413
    2. ' if' → logprob: -1.145524024963379
    3. ':' → logprob: -5.395524024963379
    4. ':
' → logprob: -5.770524024963379
    5. '
' → logprob: -7.145524024963379
    6. '```' → logprob: -9.770524024963379
    7. 'If' → logprob: -11.020524024963379
    8. ' 
' → logprob: -11.520524024963379
    9. 'for' → logprob: -11.645524024963379
    10. ' for' → logprob: -11.645524024963379

Token 227: '#' (ID: 2)
  Prédit: 'if'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'if' → logprob: -2.7729658540920354e-05
    2. ' if' → logprob: -10.500027656555176
    3. '
' → logprob: -16.625028610229492
    4. 'i' → logprob: -17.750028610229492
    5. '```' → logprob: -17.875028610229492
    6. 'If' → logprob: -18.000028610229492
    7. 'print' → logprob: -19.375028610229492
    8. 'for' → logprob: -19.625028610229492
    9. 'ifs' → logprob: -20.625028610229492
    10. ' 
' → logprob: -20.750028610229492

Token 228: ' Si' (ID: 7832)
  Prédit: 'if'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'if' → logprob: -0.006716913543641567
    2. ' if' → logprob: -5.006716728210449
    3. '```' → logprob: -13.75671672821045
    4. '
' → logprob: -14.63171672821045
    5. 'If' → logprob: -17.381717681884766
    6. 'i' → logprob: -17.506717681884766
    7. ' 
' → logprob: -17.631717681884766
    8. 'ifs' → logprob: -18.256717681884766
    9. '``' → logprob: -19.506717681884766
    10. 'for' → logprob: -19.631717681884766

Token 229: ' le' (ID: 505)
  Prédit: 'res'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'res' → logprob: -0.3132653534412384
    2. ' res' → logprob: -1.313265323638916
    3. ' ' → logprob: -13.313265800476074
    4. ' ' → logprob: -13.938265800476074
    5. '	res' → logprob: -14.313265800476074
    6. '(res' → logprob: -15.938265800476074
    7. 'abc' → logprob: -16.063264846801758
    8. '
' → logprob: -16.313264846801758
    9. 'ress' → logprob: -17.563264846801758
    10. 're' → logprob: -17.688264846801758

Token 230: ' nombre' (ID: 9733)
  Prédit: 'res'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'res' → logprob: -0.026309702545404434
    2. ' res' → logprob: -3.6513097286224365
    3. 'rés' → logprob: -12.526309967041016
    4. ' ' → logprob: -13.776309967041016
    5. '
' → logprob: -14.026309967041016
    6. 'len' → logprob: -14.151309967041016
    7. '	res' → logprob: -14.151309967041016
    8. ' ' → logprob: -14.651309967041016
    9. 'r' → logprob: -15.026309967041016
    10. 'abc' → logprob: -15.526309967041016

Token 231: ' d' (ID: 272)
  Prédit: 'res'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'res' → logprob: -0.057432547211647034
    2. ' res' → logprob: -2.9324326515197754
    3. ' de' → logprob: -7.307432651519775
    4. '_res' → logprob: -7.307432651519775
    5. ' des' → logprob: -8.182432174682617
    6. '==' → logprob: -8.307432174682617
    7. 'de' → logprob: -8.557432174682617
    8. '(res' → logprob: -8.807432174682617
    9. 'des' → logprob: -9.307432174682617
    10. ' ==' → logprob: -9.432432174682617

Token 232: ''' (ID: 6)
  Prédit: 'res'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'res' → logprob: -0.14785543084144592
    2. ' res' → logprob: -2.147855520248413
    3. 'distinct' → logprob: -5.022855281829834
    4. '(res' → logprob: -5.397855281829834
    5. '_' → logprob: -5.522855281829834
    6. ' distinct' → logprob: -6.772855281829834
    7. '_res' → logprob: -6.897855281829834
    8. 'rés' → logprob: -7.397855281829834
    9. ' éléments' → logprob: -8.022855758666992
    10. 'élé' → logprob: -8.272855758666992

Token 233: 'élé' (ID: 15228)
  Prédit: 'res'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'res' → logprob: -0.007213887292891741
    2. 'élé' → logprob: -5.382214069366455
    3. 'elements' → logprob: -6.757214069366455
    4. 'abc' → logprob: -7.507214069366455
    5. 'rés' → logprob: -7.632214069366455
    6. 'distinct' → logprob: -8.507213592529297
    7. ' res' → logprob: -9.757213592529297
    8. 'elem' → logprob: -10.507213592529297
    9. ' éléments' → logprob: -10.632213592529297
    10. 'car' → logprob: -10.882213592529297

Token 234: 'ments' (ID: 1626)
  Prédit: 'ments'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'ments' → logprob: -0.002506697317585349
    2. 'ements' → logprob: -6.377506732940674
    3. 'éments' → logprob: -7.252506732940674
    4. 'ts' → logprob: -10.002506256103516
    5. 't' → logprob: -10.752506256103516
    6. 'ment' → logprob: -11.502506256103516
    7. 'ents' → logprob: -11.627506256103516
    8. 'm' → logprob: -12.502506256103516
    9. 'nements' → logprob: -13.502506256103516
    10. 'nts' → logprob: -13.877506256103516

Token 235: ' distinct' (ID: 16913)
  Prédit: 'distinct'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'distinct' → logprob: -0.48908936977386475
    2. ' distinct' → logprob: -0.9890893697738647
    3. 'diff' → logprob: -4.989089488983154
    4. '_' → logprob: -6.239089488983154
    5. 'res' → logprob: -6.489089488983154
    6. 'dist' → logprob: -6.864089488983154
    7. '_dist' → logprob: -6.989089488983154
    8. '_unique' → logprob: -7.239089488983154
    9. ' unique' → logprob: -7.739089488983154
    10. ' ' → logprob: -8.864089012145996

Token 236: 's' (ID: 82)
  Prédit: '=='
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '==' → logprob: -1.2138373851776123
    2. ' est' → logprob: -1.3388373851776123
    3. 's' → logprob: -1.9638373851776123
    4. ' ==' → logprob: -1.9638373851776123
    5. 'res' → logprob: -2.2138373851776123
    6. 'est' → logprob: -4.213837623596191
    7. ' res' → logprob: -4.588837623596191
    8. ' ' → logprob: -4.713837623596191
    9. '>=' → logprob: -5.838837623596191
    10. 'es' → logprob: -5.963837623596191

Token 237: ' est' (ID: 893)
  Prédit: '=='
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '==' → logprob: -0.2538767158985138
    2. ' ==' → logprob: -1.6288766860961914
    3. '<=' → logprob: -4.628876686096191
    4. '>=' → logprob: -4.753876686096191
    5. '<' → logprob: -5.753876686096191
    6. ' est' → logprob: -6.753876686096191
    7. ' <=' → logprob: -6.878876686096191
    8. '!=' → logprob: -7.128876686096191
    9. ' ' → logprob: -7.253876686096191
    10. ' >=' → logprob: -7.378876686096191

Token 238: ' égal' (ID: 15059)
  Prédit: '3'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '3' → logprob: -0.06403995305299759
    2. '1' → logprob: -3.939039945602417
    3. ' ' → logprob: -4.189040184020996
    4. '2' → logprob: -4.814040184020996
    5. '==' → logprob: -5.064040184020996
    6. '4' → logprob: -5.689040184020996
    7. '=' → logprob: -6.064040184020996
    8. '0' → logprob: -6.189040184020996
    9. '>=' → logprob: -6.564040184020996
    10. '<' → logprob: -6.689040184020996

Token 239: ' à' (ID: 1221)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(' → logprob: -0.02824520133435726
    2. ' à' → logprob: -4.278244972229004
    3. '3' → logprob: -4.903244972229004
    4. 'à' → logprob: -5.778244972229004
    5. '1' → logprob: -6.778244972229004
    6. ' a' → logprob: -7.403244972229004
    7. ' ' → logprob: -7.778244972229004
    8. 'a' → logprob: -8.153244972229004
    9. '(
' → logprob: -8.278244972229004
    10. ' (' → logprob: -8.403244972229004

Token 240: ' ' (ID: 220)
  Prédit: '3'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '3' → logprob: -0.1474163681268692
    2. '1' → logprob: -2.272416353225708
    3. ' ' → logprob: -3.647416353225708
    4. '2' → logprob: -4.897416591644287
    5. '
' → logprob: -8.647416114807129
    6. '4' → logprob: -9.272416114807129
    7. 'len' → logprob: -10.022416114807129
    8. ' len' → logprob: -10.397416114807129
    9. ' ' → logprob: -10.709916114807129
    10. '	' → logprob: -10.772416114807129

Token 241: '1' (ID: 16)
  Prédit: '3'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '3' → logprob: -0.09593040496110916
    2. '1' → logprob: -2.470930337905884
    3. '2' → logprob: -5.595930576324463
    4. ' ' → logprob: -5.845930576324463
    5. '
' → logprob: -8.970930099487305
    6. 'len' → logprob: -8.970930099487305
    7. ' len' → logprob: -10.408430099487305
    8. '0' → logprob: -11.408430099487305
    9. '4' → logprob: -11.533430099487305
    10. ' ' → logprob: -12.033430099487305

Token 242: ' (' (ID: 350)
  Prédit: ':'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ':' → logprob: -0.008639270439743996
    2. ':
' → logprob: -4.758639335632324
    3. ' :' → logprob: -11.133639335632324
    4. 'if' → logprob: -12.008639335632324
    5. ',' → logprob: -13.258639335632324
    6. ' and' → logprob: -14.383639335632324
    7. ' :
' → logprob: -14.508639335632324
    8. ' if' → logprob: -14.758639335632324
    9. ':

' → logprob: -15.508639335632324
    10. 'and' → logprob: -16.008638381958008

Token 243: 'don' (ID: 22130)
  Prédit: '):'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '):' → logprob: -0.1061064749956131
    2. '):
' → logprob: -2.6061065196990967
    3. ')' → logprob: -3.8561065196990967
    4. '),' → logprob: -6.231106281280518
    5. 'res' → logprob: -6.481106281280518
    6. ':' → logprob: -7.356106281280518
    7. ' ):' → logprob: -7.481106281280518
    8. '):

' → logprob: -8.356106758117676
    9. ' and' → logprob: -8.606106758117676
    10. 'and' → logprob: -9.231106758117676

Token 244: 'c' (ID: 66)
  Prédit: ' res'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' res' → logprob: -0.9561455845832825
    2. ' or' → logprob: -1.4561455249786377
    3. ' abc' → logprob: -2.5811455249786377
    4. ')' → logprob: -2.8311455249786377
    5. 'abc' → logprob: -2.8311455249786377
    6. '):' → logprob: -2.9561455249786377
    7. 'res' → logprob: -3.3311455249786377
    8. '   ' → logprob: -3.5811455249786377
    9. ':' → logprob: -3.7061455249786377
    10. ' ' → logprob: -3.9561455249786377

Token 245: ' tous' (ID: 10688)
  Prédit: ' res'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' res' → logprob: -0.37421223521232605
    2. 'res' → logprob: -1.3742122650146484
    3. ' abc' → logprob: -4.124212265014648
    4. 'abc' → logprob: -4.249212265014648
    5. ' ' → logprob: -4.999212265014648
    6. ' len' → logprob: -5.249212265014648
    7. ' les' → logprob: -5.999212265014648
    8. 'len' → logprob: -6.124212265014648
    9. ' on' → logprob: -6.624212265014648
    10. ' all' → logprob: -6.874212265014648

Token 246: ' les' (ID: 1341)
  Prédit: 'abc'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'abc' → logprob: -0.14997249841690063
    2. ' abc' → logprob: -2.649972438812256
    3. ' les' → logprob: -3.399972438812256
    4. 'les' → logprob: -4.399972438812256
    5. 'res' → logprob: -5.399972438812256
    6. '(' → logprob: -5.774972438812256
    7. ' trois' → logprob: -6.149972438812256
    8. 'élé' → logprob: -6.274972438812256
    9. ' éléments' → logprob: -6.274972438812256
    10. ' elements' → logprob: -6.399972438812256

Token 247: ' éléments' (ID: 57375)
  Prédit: 'abc'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'abc' → logprob: -0.02824833057820797
    2. ' abc' → logprob: -4.278248310089111
    3. 'élé' → logprob: -5.028248310089111
    4. 'elements' → logprob: -5.903248310089111
    5. ' éléments' → logprob: -6.403248310089111
    6. 'a' → logprob: -7.028248310089111
    7. '3' → logprob: -7.153248310089111
    8. ' elements' → logprob: -8.02824878692627
    9. 'res' → logprob: -8.27824878692627
    10. '#' → logprob: -9.02824878692627

Token 248: ' sont' (ID: 5242)
  Prédit: 's'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 's' → logprob: -0.14704011380672455
    2. 'abc' → logprob: -2.1470401287078857
    3. ' sont' → logprob: -4.272039890289307
    4. 'ont' → logprob: -6.397039890289307
    5. ' abc' → logprob: -7.272039890289307
    6. 'de' → logprob: -7.522039890289307
    7. '#' → logprob: -7.522039890289307
    8. '==' → logprob: -8.022040367126465
    9. 'dans' → logprob: -8.022040367126465
    10. 'ég' → logprob: -8.022040367126465

Token 249: ' ident' (ID: 3951)
  Prédit: 'ident'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'ident' → logprob: -1.0176756381988525
    2. 'abc' → logprob: -1.1426756381988525
    3. ' ident' → logprob: -1.5176756381988525
    4. ' abc' → logprob: -3.3926756381988525
    5. ' ég' → logprob: -3.5176756381988525
    6. 'ég' → logprob: -4.017675399780273
    7. 'les' → logprob: -4.767675399780273
    8. 'égal' → logprob: -6.392675399780273
    9. ' les' → logprob: -6.517675399780273
    10. ' eg' → logprob: -6.642675399780273

Token 250: 'iques' (ID: 11654)
  Prédit: 'ques'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'ques' → logprob: -0.3948560357093811
    2. 'iques' → logprob: -1.1448559761047363
    3. 'que' → logprob: -5.269855976104736
    4. 'cal' → logprob: -7.394855976104736
    5. 'aux' → logprob: -7.519855976104736
    6. '#' → logprob: -7.769855976104736
    7. 'ique' → logprob: -8.269856452941895
    8. '[' → logprob: -8.644856452941895
    9. 'tiques' → logprob: -8.894856452941895
    10. 'c' → logprob: -9.019856452941895

Token 251: ')
' (ID: 446)
  Prédit: '):'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '):' → logprob: -0.16699214279651642
    2. '):
' → logprob: -2.1669921875
    3. ')' → logprob: -3.7919921875
    4. '),' → logprob: -4.2919921875
    5. ':' → logprob: -6.1669921875
    6. ' ):' → logprob: -8.4169921875
    7. 'if' → logprob: -8.5419921875
    8. ':
' → logprob: -9.1669921875
    9. '):

' → logprob: -9.4169921875
    10. ' ):
' → logprob: -9.6669921875

Token 252: '#' (ID: 2)
  Prédit: 'if'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'if' → logprob: -0.40353256464004517
    2. ':' → logprob: -1.2785325050354004
    3. ':
' → logprob: -3.0285325050354004
    4. ' if' → logprob: -5.2785325050354
    5. ' :' → logprob: -10.778532981872559
    6. '```' → logprob: -11.028532981872559
    7. ' :
' → logprob: -11.153532981872559
    8. '
' → logprob: -11.403532981872559
    9. ',' → logprob: -11.653532981872559
    10. 'print' → logprob: -11.653532981872559

Token 253: ' OU' (ID: 79497)
  Prédit: 'if'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'if' → logprob: -0.6704065203666687
    2. ':' → logprob: -0.7954065203666687
    3. ':
' → logprob: -3.5454065799713135
    4. ' if' → logprob: -4.920406341552734
    5. 'print' → logprob: -7.170406341552734
    6. ' :' → logprob: -9.670406341552734
    7. ',' → logprob: -10.795406341552734
    8. '   ' → logprob: -10.920406341552734
    9. ' :
' → logprob: -11.045406341552734
    10. ' print' → logprob: -11.545406341552734

Token 254: '
' (ID: 198)
  Prédit: 'res'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'res' → logprob: -0.391712486743927
    2. ' res' → logprob: -1.2667124271392822
    3. 'abc' → logprob: -3.5167124271392822
    4. 'len' → logprob: -5.391712665557861
    5. ' abc' → logprob: -5.766712665557861
    6. 'if' → logprob: -6.016712665557861
    7. ' len' → logprob: -6.391712665557861
    8. ' if' → logprob: -7.641712665557861
    9. ' ' → logprob: -10.141712188720703
    10. ' (' → logprob: -10.141712188720703

Token 255: '#' (ID: 2)
  Prédit: 'res'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'res' → logprob: -0.10518299788236618
    2. ' res' → logprob: -2.8551828861236572
    3. 'abc' → logprob: -3.7301828861236572
    4. 'if' → logprob: -4.105183124542236
    5. 'len' → logprob: -7.855183124542236
    6. ' abc' → logprob: -7.855183124542236
    7. ' if' → logprob: -7.980183124542236
    8. '(res' → logprob: -8.230182647705078
    9. '(' → logprob: -8.855182647705078
    10. ' (' → logprob: -9.230182647705078

Token 256: ' Si' (ID: 7832)
  Prédit: 'res'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'res' → logprob: -0.15800128877162933
    2. ' res' → logprob: -2.533001184463501
    3. 'abc' → logprob: -3.033001184463501
    4. 'len' → logprob: -4.90800142288208
    5. 'if' → logprob: -5.03300142288208
    6. ' abc' → logprob: -6.65800142288208
    7. ' if' → logprob: -7.40800142288208
    8. ' len' → logprob: -7.53300142288208
    9. '(' → logprob: -7.65800142288208
    10. 'all' → logprob: -8.158000946044922

Token 257: ' le' (ID: 505)
  Prédit: 'res'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'res' → logprob: -0.16926422715187073
    2. ' res' → logprob: -1.9192641973495483
    3. 'len' → logprob: -5.294264316558838
    4. 'abc' → logprob: -6.169264316558838
    5. ' len' → logprob: -7.669264316558838
    6. '1' → logprob: -8.16926383972168
    7. 'max' → logprob: -8.54426383972168
    8. '3' → logprob: -8.79426383972168
    9. ' ' → logprob: -9.04426383972168
    10. ' abc' → logprob: -9.04426383972168

Token 258: ' nombre' (ID: 9733)
  Prédit: 'res'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'res' → logprob: -0.1611107438802719
    2. ' res' → logprob: -2.0361106395721436
    3. 'len' → logprob: -4.661110877990723
    4. 'abc' → logprob: -5.536110877990723
    5. ' len' → logprob: -6.911110877990723
    6. '3' → logprob: -6.911110877990723
    7. 'max' → logprob: -7.786110877990723
    8. ' abc' → logprob: -8.036110877990723
    9. ' ' → logprob: -8.161110877990723
    10. 'sum' → logprob: -8.411110877990723

Token 259: ' d' (ID: 272)
  Prédit: 'res'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'res' → logprob: -0.42496100068092346
    2. '(res' → logprob: -1.299960970878601
    3. ' res' → logprob: -2.6749610900878906
    4. '==' → logprob: -7.174961090087891
    5. ' ==' → logprob: -7.299961090087891
    6. '```' → logprob: -7.549961090087891
    7. 'abc' → logprob: -7.549961090087891
    8. '(' → logprob: -8.04996109008789
    9. ' (' → logprob: -8.04996109008789
    10. '(
' → logprob: -8.42496109008789

Token 260: ''' (ID: 6)
  Prédit: 'res'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'res' → logprob: -0.42113566398620605
    2. '(res' → logprob: -1.296135663986206
    3. '(set' → logprob: -3.296135663986206
    4. '(' → logprob: -3.921135663986206
    5. 'abc' → logprob: -4.796135902404785
    6. '(ab' → logprob: -6.671135902404785
    7. '_res' → logprob: -6.796135902404785
    8. 'distinct' → logprob: -7.171135902404785
    9. '(dist' → logprob: -7.921135902404785
    10. 'set' → logprob: -8.296135902404785

Token 261: 'élé' (ID: 15228)
  Prédit: 'res'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'res' → logprob: -0.3651481866836548
    2. 'abc' → logprob: -1.7401481866836548
    3. 'élé' → logprob: -2.8651480674743652
    4. 'set' → logprob: -3.3651480674743652
    5. 'elements' → logprob: -3.8651480674743652
    6. 'distinct' → logprob: -4.365148067474365
    7. 'elem' → logprob: -6.865148067474365
    8. 'ab' → logprob: -7.365148067474365
    9. '(' → logprob: -7.990148067474365
    10. '
' → logprob: -8.115148544311523

Token 262: 'ments' (ID: 1626)
  Prédit: 'ments'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'ments' → logprob: -0.012311149388551712
    2. 'res' → logprob: -5.762310981750488
    3. 'éments' → logprob: -5.762310981750488
    4. 'ements' → logprob: -6.137310981750488
    5. 'ment' → logprob: -6.762310981750488
    6. 'abc' → logprob: -7.137310981750488
    7. 'mé' → logprob: -8.012310981750488
    8. 'm' → logprob: -8.137310981750488
    9. 'lements' → logprob: -8.262310981750488
    10. 'lé' → logprob: -8.762310981750488

Token 263: ' distinct' (ID: 16913)
  Prédit: '=='
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '==' → logprob: -0.6186539530754089
    2. 'res' → logprob: -1.6186540126800537
    3. ' ==' → logprob: -1.7436540126800537
    4. '>=' → logprob: -4.118653774261475
    5. '>' → logprob: -4.243653774261475
    6. ' res' → logprob: -4.743653774261475
    7. ' >=' → logprob: -4.743653774261475
    8. '<=' → logprob: -4.993653774261475
    9. '(res' → logprob: -5.118653774261475
    10. ' <=' → logprob: -5.368653774261475

Token 264: 's' (ID: 82)
  Prédit: 'res'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'res' → logprob: -0.6719847321510315
    2. '==' → logprob: -1.0469846725463867
    3. '!=' → logprob: -2.5469846725463867
    4. ' !=' → logprob: -4.421984672546387
    5. ' ==' → logprob: -4.546984672546387
    6. 'es' → logprob: -4.671984672546387
    7. '(res' → logprob: -5.171984672546387
    8. 's' → logprob: -5.421984672546387
    9. '=' → logprob: -5.671984672546387
    10. ' res' → logprob: -5.671984672546387

Token 265: ' est' (ID: 893)
  Prédit: ' =='
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' ==' → logprob: -0.2854755222797394
    2. '==' → logprob: -1.410475492477417
    3. ' ' → logprob: -6.535475730895996
    4. ' <=' → logprob: -7.285475730895996
    5. ' <' → logprob: -7.785475730895996
    6. ' >=' → logprob: -7.785475730895996
    7. '<=' → logprob: -8.285475730895996
    8. '>=' → logprob: -8.410475730895996
    9. ' !=' → logprob: -8.785475730895996
    10. ' >' → logprob: -8.785475730895996

Token 266: ' égal' (ID: 15059)
  Prédit: '2'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '2' → logprob: -0.44624969363212585
    2. ' ' → logprob: -1.1962497234344482
    3. '3' → logprob: -2.9462497234344482
    4. '0' → logprob: -6.071249485015869
    5. '1' → logprob: -6.821249485015869
    6. '
' → logprob: -7.196249485015869
    7. '```' → logprob: -8.071249961853027
    8. '==' → logprob: -9.321249961853027
    9. '=' → logprob: -9.446249961853027
    10. ' =' → logprob: -9.821249961853027

Token 267: ' à' (ID: 1221)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(' → logprob: -0.020606590434908867
    2. '3' → logprob: -4.145606517791748
    3. '2' → logprob: -6.020606517791748
    4. ' à' → logprob: -7.020606517791748
    5. 'à' → logprob: -8.145606994628906
    6. '0' → logprob: -8.145606994628906
    7. '(len' → logprob: -8.645606994628906
    8. ' (' → logprob: -9.395606994628906
    9. '(
' → logprob: -9.520606994628906
    10. 'to' → logprob: -9.645606994628906

Token 268: ' ' (ID: 220)
  Prédit: '3'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '3' → logprob: -0.6699109077453613
    2. '2' → logprob: -0.7949109077453613
    3. ' ' → logprob: -3.7949109077453613
    4. '0' → logprob: -4.294910907745361
    5. '1' → logprob: -8.419910430908203
    6. 'len' → logprob: -9.544910430908203
    7. '```' → logprob: -9.857410430908203
    8. '4' → logprob: -10.169910430908203
    9. '
' → logprob: -10.169910430908203
    10. ' len' → logprob: -10.357410430908203

Token 269: '3' (ID: 18)
  Prédit: '3'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '3' → logprob: -0.35475954413414
    2. '2' → logprob: -1.2297595739364624
    3. ' ' → logprob: -5.729759693145752
    4. '0' → logprob: -5.979759693145752
    5. '1' → logprob: -8.229759216308594
    6. 'len' → logprob: -9.229759216308594
    7. '4' → logprob: -10.417259216308594
    8. '
' → logprob: -10.479759216308594
    9. 'res' → logprob: -10.792259216308594
    10. ' len' → logprob: -10.979759216308594

Token 270: ' (' (ID: 350)
  Prédit: ':'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ':' → logprob: -0.02439684234559536
    2. 'if' → logprob: -4.149396896362305
    3. ' or' → logprob: -5.774396896362305
    4. 'or' → logprob: -5.899396896362305
    5. ':
' → logprob: -6.274396896362305
    6. ' :' → logprob: -8.274396896362305
    7. ' if' → logprob: -9.149396896362305
    8. '```' → logprob: -10.024396896362305
    9. '):' → logprob: -10.149396896362305
    10. ',' → logprob: -10.274396896362305

Token 271: 'don' (ID: 22130)
  Prédit: '):'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '):' → logprob: -0.278460294008255
    2. ')' → logprob: -2.0284602642059326
    3. 'if' → logprob: -2.5284602642059326
    4. '):
' → logprob: -3.7784602642059326
    5. 'res' → logprob: -5.528460502624512
    6. ':' → logprob: -6.153460502624512
    7. ' if' → logprob: -7.403460502624512
    8. 'print' → logprob: -7.903460502624512
    9. 'or' → logprob: -7.903460502624512
    10. ')
' → logprob: -8.528460502624512

Token 272: 'c' (ID: 66)
  Prédit: '#'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '#' → logprob: -1.4040663242340088
    2. '```' → logprob: -1.4040663242340088
    3. 't' → logprob: -2.154066324234009
    4. ')' → logprob: -2.529066324234009
    5. 'is' → logprob: -3.154066324234009
    6. ' ' → logprob: -3.654066324234009
    7. ' or' → logprob: -3.779066324234009
    8. 'f' → logprob: -3.904066324234009
    9. 'u' → logprob: -4.15406608581543
    10. '   ' → logprob: -4.27906608581543

Token 273: ' chaque' (ID: 21194)
  Prédit: 'res'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'res' → logprob: -0.40836647152900696
    2. ' res' → logprob: -1.2833664417266846
    3. ' len' → logprob: -3.4083664417266846
    4. 'len' → logprob: -4.033366680145264
    5. '
' → logprob: -5.908366680145264
    6. ' la' → logprob: -7.158366680145264
    7. ' ' → logprob: -7.283366680145264
    8. ' les' → logprob: -7.783366680145264
    9. '```' → logprob: -7.783366680145264
    10. ' all' → logprob: -8.033366203308105

Token 274: ' élément' (ID: 99627)
  Prédit: ' distinct'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' distinct' → logprob: -1.2425265312194824
    2. ' res' → logprob: -1.3675265312194824
    3. 'res' → logprob: -1.9925265312194824
    4. ')' → logprob: -2.3675265312194824
    5. 'distinct' → logprob: -2.8675265312194824
    6. '==' → logprob: -3.7425265312194824
    7. ' ==' → logprob: -3.7425265312194824
    8. ' elements' → logprob: -4.367526531219482
    9. '
' → logprob: -4.867526531219482
    10. 'élé' → logprob: -4.992526531219482

Token 275: ' est' (ID: 893)
  Prédit: ' est'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' est' → logprob: -0.5704006552696228
    2. 'diff' → logprob: -1.5704007148742676
    3. 'est' → logprob: -2.1954007148742676
    4. 'a' → logprob: -2.5704007148742676
    5. ' a' → logprob: -4.070400714874268
    6. ')' → logprob: -5.070400714874268
    7. 'different' → logprob: -6.070400714874268
    8. '#' → logprob: -6.195400714874268
    9. ' différent' → logprob: -6.445400714874268
    10. ' is' → logprob: -6.945400714874268

Token 276: ' différent' (ID: 114823)
  Prédit: 'diff'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'diff' → logprob: -0.04578150808811188
    2. ' différent' → logprob: -3.4207816123962402
    3. 'distinct' → logprob: -5.17078161239624
    4. ' distinct' → logprob: -5.79578161239624
    5. 'different' → logprob: -6.42078161239624
    6. 'unique' → logprob: -7.54578161239624
    7. ' diff' → logprob: -7.67078161239624
    8. ' unique' → logprob: -8.170781135559082
    9. ' different' → logprob: -9.170781135559082
    10. 'd' → logprob: -9.170781135559082

Token 277: ' des' (ID: 731)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ')' → logprob: -0.15927013754844666
    2. '):' → logprob: -2.9092700481414795
    3. ')
' → logprob: -3.0342700481414795
    4. '):
' → logprob: -4.159270286560059
    5. ' )' → logprob: -4.409270286560059
    6. '),' → logprob: -4.534270286560059
    7. '),
' → logprob: -6.409270286560059
    8. ' )
' → logprob: -6.409270286560059
    9. '):

' → logprob: -8.284270286560059
    10. ' ),' → logprob: -8.409270286560059

Token 278: ' deux' (ID: 10301)
  Prédit: 'l'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'l' → logprob: -0.7045270204544067
    2. '2' → logprob: -1.9545270204544067
    3. 'les' → logprob: -2.329526901245117
    4. '3' → logprob: -2.454526901245117
    5. 'abc' → logprob: -2.454526901245117
    6. 'len' → logprob: -2.954526901245117
    7. 'aut' → logprob: -4.454526901245117
    8. ' l' → logprob: -4.704526901245117
    9. '1' → logprob: -4.704526901245117
    10. 'res' → logprob: -5.954526901245117

Token 279: ' autres' (ID: 18701)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')' → logprob: -0.11027464270591736
    2. ' )' → logprob: -2.61027455329895
    3. 'aut' → logprob: -3.98527455329895
    4. ' autres' → logprob: -5.235274791717529
    5. '),' → logprob: -6.610274791717529
    6. 'abc' → logprob: -6.985274791717529
    7. '#' → logprob: -7.235274791717529
    8. ')#' → logprob: -7.985274791717529
    9. ',)' → logprob: -7.985274791717529
    10. '`)' → logprob: -8.110274314880371

Token 280: ')
' (ID: 446)
  Prédit: '):'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '):' → logprob: -0.3837682604789734
    2. '):
' → logprob: -1.5087683200836182
    3. ')' → logprob: -2.383768320083618
    4. 'if' → logprob: -6.008768081665039
    5. ':' → logprob: -6.883768081665039
    6. 'or' → logprob: -8.258768081665039
    7. '):

' → logprob: -8.383768081665039
    8. ')
' → logprob: -8.508768081665039
    9. ':
' → logprob: -8.633768081665039
    10. 'res' → logprob: -8.758768081665039

Token 281: 'if' (ID: 366)
  Prédit: 'if'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'if' → logprob: -0.040697984397411346
    2. ':' → logprob: -3.2906980514526367
    3. ':
' → logprob: -6.040698051452637
    4. ' if' → logprob: -8.540698051452637
    5. '):' → logprob: -10.290698051452637
    6. '```' → logprob: -11.290698051452637
    7. 'or' → logprob: -11.415698051452637
    8. '):
' → logprob: -11.915698051452637
    9. ')' → logprob: -12.540698051452637
    10. ',' → logprob: -13.040698051452637

Token 282: ' res' (ID: 694)
  Prédit: 'res'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'res' → logprob: -0.5759428143501282
    2. ' res' → logprob: -0.8259428143501282
    3. ' ' → logprob: -13.700942993164062
    4. '(res' → logprob: -13.700942993164062
    5. ' ' → logprob: -14.325942993164062
    6. '	res' → logprob: -15.075942993164062
    7. '0' → logprob: -16.200942993164062
    8. 'len' → logprob: -16.825942993164062
    9. ' len' → logprob: -16.950942993164062
    10. '
' → logprob: -17.450942993164062

Token 283: ' ==' (ID: 951)
  Prédit: '=='
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '==' → logprob: -0.428984135389328
    2. ' ==' → logprob: -1.0539841651916504
    3. ' in' → logprob: -9.053983688354492
    4. '```' → logprob: -10.053983688354492
    5. 'in' → logprob: -10.553983688354492
    6. ' ' → logprob: -10.803983688354492
    7. '<=' → logprob: -11.303983688354492
    8. '1' → logprob: -11.553983688354492
    9. ')' → logprob: -11.803983688354492
    10. '!=' → logprob: -11.928983688354492

Token 284: ' ' (ID: 220)
  Prédit: '1'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '1' → logprob: -0.005931878462433815
    2. ' ' → logprob: -5.130931854248047
    3. '3' → logprob: -12.630931854248047
    4. '```' → logprob: -18.130931854248047
    5. '2' → logprob: -18.380931854248047
    6. '  ' → logprob: -18.755931854248047
    7. '
' → logprob: -18.755931854248047
    8. ' ' → logprob: -18.880931854248047
    9. '<|end|>' → logprob: -19.130931854248047
    10. '0' → logprob: -19.255931854248047

Token 285: '1' (ID: 16)
  Prédit: '1'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '1' → logprob: -7.171581091824919e-05
    2. ' ' → logprob: -9.62507152557373
    3. '3' → logprob: -12.12507152557373
    4. '```' → logprob: -16.000072479248047
    5. '0' → logprob: -16.625072479248047
    6. '2' → logprob: -17.000072479248047
    7. '<|end|>' → logprob: -18.125072479248047
    8. '
' → logprob: -18.500072479248047
    9. '`' → logprob: -18.750072479248047
    10. '  ' → logprob: -19.000072479248047

Token 286: ' or' (ID: 503)
  Prédit: ' or'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' or' → logprob: -0.07265516370534897
    2. 'or' → logprob: -2.697655200958252
    3. ':' → logprob: -5.947655200958252
    4. ':
' → logprob: -9.697654724121094
    5. ' ' → logprob: -10.697654724121094
    6. '	or' → logprob: -11.447654724121094
    7. ' ' → logprob: -13.072654724121094
    8. '   ' → logprob: -13.197654724121094
    9. ' ou' → logprob: -14.072654724121094
    10. ' или' → logprob: -14.322654724121094

Token 287: ' res' (ID: 694)
  Prédit: ' res'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' res' → logprob: -0.020542822778224945
    2. 'res' → logprob: -3.895542860031128
    3. ' ' → logprob: -14.520543098449707
    4. ' ' → logprob: -15.895543098449707
    5. '3' → logprob: -16.02054214477539
    6. '(res' → logprob: -16.14554214477539
    7. '	res' → logprob: -16.14554214477539
    8. '```' → logprob: -17.27054214477539
    9. '   ' → logprob: -18.83304214477539
    10. '$res' → logprob: -18.95804214477539

Token 288: ' ==' (ID: 951)
  Prédit: '=='
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '==' → logprob: -0.4287216067314148
    2. ' ==' → logprob: -1.0537216663360596
    3. '```' → logprob: -11.80372142791748
    4. '==
' → logprob: -12.42872142791748
    5. ' ' → logprob: -12.67872142791748
    6. '3' → logprob: -12.80372142791748
    7. '()==' → logprob: -14.05372142791748
    8. ')==' → logprob: -14.55372142791748
    9. '=' → logprob: -14.80372142791748
    10. ' ==
' → logprob: -14.80372142791748

Token 289: ' ' (ID: 220)
  Prédit: '3'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '3' → logprob: -0.005929154809564352
    2. ' ' → logprob: -5.130928993225098
    3. '```' → logprob: -15.005928993225098
    4. ' ' → logprob: -16.380929946899414
    5. ' three' → logprob: -17.755929946899414
    6. '۳' → logprob: -18.005929946899414
    7. '
' → logprob: -18.255929946899414
    8. '３' → logprob: -18.255929946899414
    9. '  ' → logprob: -18.318429946899414
    10. '' → logprob: -18.318429946899414

Token 290: '3' (ID: 18)
  Prédit: '3'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '3' → logprob: -4.584861744660884e-05
    2. ' ' → logprob: -10.000045776367188
    3. '```' → logprob: -14.875045776367188
    4. '۳' → logprob: -18.625045776367188
    5. '３' → logprob: -18.750045776367188
    6. '
' → logprob: -18.875045776367188
    7. '   ' → logprob: -19.000045776367188
    8. '`' → logprob: -19.312545776367188
    9. '' → logprob: -19.562545776367188
    10. '``' → logprob: -19.625045776367188

Token 291: ':
' (ID: 734)
  Prédit: ':'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ':' → logprob: -0.004629007540643215
    2. ':
' → logprob: -5.379629135131836
    3. 'print' → logprob: -12.254629135131836
    4. ' :' → logprob: -13.254629135131836
    5. '):' → logprob: -14.254629135131836
    6. ':
' → logprob: -14.254629135131836
    7. '   ' → logprob: -14.754629135131836
    8. ':

' → logprob: -16.254629135131836
    9. ' print' → logprob: -16.254629135131836
    10. ':#' → logprob: -16.504629135131836

Token 292: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.48549917340278625
    2. 'print' → logprob: -1.6104991436004639
    3. ':' → logprob: -1.8604991436004639
    4. ':
' → logprob: -3.735499143600464
    5. ' print' → logprob: -5.360499382019043
    6. ' ' → logprob: -8.360499382019043
    7. '	print' → logprob: -8.360499382019043
    8. '```' → logprob: -9.485499382019043
    9. '
' → logprob: -10.860499382019043
    10. '    
' → logprob: -11.110499382019043

Token 293: ' print' (ID: 2123)
  Prédit: 'print'
  Correct (stricte): False
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'print' (adapté à ' print') → logprob: -0.0004610551695805043
    2. '   ' → logprob: -8.000460624694824
    3. ' print' → logprob: -9.250460624694824
    4. 'pass' → logprob: -11.000460624694824
    5. '```' → logprob: -12.750460624694824
    6. '
' → logprob: -12.875460624694824
    7. ' ' → logprob: -13.375460624694824
    8. '	print' → logprob: -13.875460624694824
    9. '    
' → logprob: -14.250460624694824
    10. '\n' → logprob: -14.250460624694824

Token 294: '("' (ID: 568)
  Prédit: '("'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '("' → logprob: -0.051663752645254135
    2. '(' → logprob: -3.051663637161255
    3. '('' → logprob: -6.051663875579834
    4. '(-' → logprob: -8.051663398742676
    5. '(res' → logprob: -8.301663398742676
    6. '3' → logprob: -10.551663398742676
    7. '("-' → logprob: -11.051663398742676
    8. '(
' → logprob: -11.426663398742676
    9. '0' → logprob: -11.551663398742676
    10. '(""' → logprob: -11.801663398742676

Token 295: 'No' (ID: 3160)
  Prédit: 'Yes'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'Yes' → logprob: -0.8077371716499329
    2. 'No' → logprob: -1.182737112045288
    3. 'NO' → logprob: -1.807737112045288
    4. 'YES' → logprob: -2.807737112045288
    5. '3' → logprob: -5.307737350463867
    6. 'Three' → logprob: -5.432737350463867
    7. 'Won' → logprob: -5.682737350463867
    8. 'Impossible' → logprob: -6.182737350463867
    9. '"No' → logprob: -6.307737350463867
    10. '-' → logprob: -6.432737350463867

Token 296: '")' (ID: 1405)
  Prédit: '")'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '")' → logprob: -0.7647824287414551
    2. 'ne' → logprob: -1.014782428741455
    3. ')' → logprob: -2.139782428741455
    4. 'n' → logprob: -4.264782428741455
    5. 't' → logprob: -4.389782428741455
    6. 'pe' → logprob: -5.264782428741455
    7. 'te' → logprob: -6.014782428741455
    8. '\n' → logprob: -6.014782428741455
    9. 'ng' → logprob: -6.264782428741455
    10. '<|end|>' → logprob: -6.389782428741455

Token 297: ' ' (ID: 220)
  Prédit: 'else'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'else' → logprob: -0.004543692339211702
    2. 'elif' → logprob: -5.504543781280518
    3. ' else' → logprob: -7.879543781280518
    4. '<|end|>' → logprob: -10.25454330444336
    5. '```' → logprob: -10.37954330444336
    6. '
' → logprob: -11.25454330444336
    7. '#else' → logprob: -13.37954330444336
    8. '    
' → logprob: -13.50454330444336
    9. ')' → logprob: -14.25454330444336
    10. '  
' → logprob: -14.50454330444336

Token 298: ' #' (ID: 1069)
  Prédit: 'else'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'else' → logprob: -0.009803197346627712
    2. 'elif' → logprob: -4.884803295135498
    3. ' else' → logprob: -6.384803295135498
    4. '<|end|>' → logprob: -8.00980281829834
    5. '
' → logprob: -9.00980281829834
    6. ')' → logprob: -10.63480281829834
    7. '```' → logprob: -11.38480281829834
    8. '    
' → logprob: -12.88480281829834
    9. ' elif' → logprob: -12.88480281829834
    10. ':' → logprob: -13.13480281829834

Token 299: ' Si' (ID: 7832)
  Prédit: 'else'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'else' → logprob: -0.7826471924781799
    2. '<|end|>' → logprob: -0.7826471924781799
    3. '
' → logprob: -2.782647132873535
    4. ' else' → logprob: -4.532647132873535
    5. 'elif' → logprob: -5.782647132873535
    6. ')' → logprob: -5.782647132873535
    7. '```' → logprob: -5.907647132873535
    8. '<|end|>' → logprob: -6.907647132873535
    9. '   ' → logprob: -7.282647132873535
    10. 'print' → logprob: -7.407647132873535

Token 300: ' au' (ID: 2791)
  Prédit: ''
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False

Token 301: ' moins' (ID: 15924)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '   ' → logprob: -1.7218486070632935
    2. 'r' → logprob: -2.471848487854004
    3. 'else' → logprob: -2.596848487854004
    4. '#' → logprob: -2.596848487854004
    5. 'es' → logprob: -2.596848487854004
    6. '```' → logprob: -2.721848487854004
    7. 'print' → logprob: -3.096848487854004
    8. ' else' → logprob: -3.221848487854004
    9. '<|end|>' → logprob: -3.471848487854004
    10. ')' → logprob: -3.471848487854004

Token 302: ' une' (ID: 2463)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '   ' → logprob: -1.5998753309249878
    2. 'res' → logprob: -1.7248753309249878
    3. ' tous' → logprob: -1.7248753309249878
    4. ' res' → logprob: -1.8498753309249878
    5. ' les' → logprob: -1.8498753309249878
    6. 'les' → logprob: -2.9748754501342773
    7. 'l' → logprob: -4.849875450134277
    8. ' l' → logprob: -4.849875450134277
    9. ' ce' → logprob: -4.849875450134277
    10. ' toutes' → logprob: -4.974875450134277

Token 303: ' des' (ID: 731)
  Prédit: ''
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False

Token 304: ' deux' (ID: 10301)
  Prédit: 'conditions'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'conditions' → logprob: -0.07074221968650818
    2. ' conditions' → logprob: -2.945742130279541
    3. 'cond' → logprob: -4.570742130279541
    4. 'condition' → logprob: -6.195742130279541
    5. 'de' → logprob: -6.570742130279541
    6. ' ' → logprob: -7.195742130279541
    7. ' deux' → logprob: -7.320742130279541
    8. '   ' → logprob: -9.3207426071167
    9. '条件' → logprob: -9.3207426071167
    10. '```' → logprob: -9.8207426071167

Token 305: ' conditions' (ID: 6409)
  Prédit: ' conditions'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' conditions' → logprob: -0.2534167766571045
    2. 'conditions' → logprob: -1.5034167766571045
    3. 'cond' → logprob: -7.628417015075684
    4. 'condition' → logprob: -7.753417015075684
    5. ' condition' → logprob: -9.003417015075684
    6. '条件' → logprob: -9.128417015075684
    7. '
' → logprob: -9.253417015075684
    8. '_conditions' → logprob: -9.628417015075684
    9. ' condit' → logprob: -10.003417015075684
    10. '```' → logprob: -10.503417015075684

Token 306: ' est' (ID: 893)
  Prédit: ''
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False

Token 307: ' vraie' (ID: 105841)
  Prédit: 'True'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'True' → logprob: -0.9297670722007751
    2. 'v' → logprob: -1.17976713180542
    3. ' True' → logprob: -1.67976713180542
    4. 'true' → logprob: -2.80476713180542
    5. 's' → logprob: -4.55476713180542
    6. ' true' → logprob: -4.92976713180542
    7. 'False' → logprob: -5.05476713180542
    8. ' rempl' → logprob: -5.42976713180542
    9. ' vraie' → logprob: -5.67976713180542
    10. 'V' → logprob: -5.80476713180542

Token 308: ',' (ID: 11)
  Prédit: 'else'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'else' → logprob: -0.19812865555286407
    2. '<|end|>' → logprob: -2.5731287002563477
    3. 'elif' → logprob: -3.0731287002563477
    4. ')' → logprob: -3.3231287002563477
    5. '
' → logprob: -4.573128700256348
    6. '```' → logprob: -5.323128700256348
    7. ' else' → logprob: -5.698128700256348
    8. '   ' → logprob: -7.573128700256348
    9. '    
' → logprob: -7.573128700256348
    10. '<|end|>' → logprob: -8.323128700256348

Token 309: ' on' (ID: 402)
  Prédit: 'print'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'print' → logprob: -0.08017538487911224
    2. ' print' → logprob: -3.5801753997802734
    3. '
' → logprob: -3.7051753997802734
    4. '   ' → logprob: -4.455175399780273
    5. 'else' → logprob: -5.205175399780273
    6. ')' → logprob: -5.330175399780273
    7. 'continue' → logprob: -7.705175399780273
    8. ' continue' → logprob: -8.205175399780273
    9. '```' → logprob: -8.330175399780273
    10. '")' → logprob: -8.455175399780273

Token 310: ' affiche' (ID: 127479)
  Prédit: 'print'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'print' → logprob: -0.13410350680351257
    2. 'continue' → logprob: -2.384103536605835
    3. ' print' → logprob: -3.884103536605835
    4. ' continue' → logprob: -4.884103298187256
    5. '   ' → logprob: -5.634103298187256
    6. 'aff' → logprob: -8.259103775024414
    7. '```' → logprob: -8.384103775024414
    8. 'exit' → logprob: -8.634103775024414
    9. 'return' → logprob: -8.884103775024414
    10. '	print' → logprob: -8.884103775024414

Token 311: ' le' (ID: 505)
  Prédit: '("'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '("' → logprob: -0.5818254947662354
    2. '"No' → logprob: -1.4568254947662354
    3. 'No' → logprob: -1.5818254947662354
    4. '"' → logprob: -6.831825256347656
    5. ' No' → logprob: -6.956825256347656
    6. '(No' → logprob: -9.331825256347656
    7. '```' → logprob: -9.331825256347656
    8. '   ' → logprob: -9.456825256347656
    9. 'Yes' → logprob: -9.581825256347656
    10. ' "' → logprob: -10.081825256347656

Token 312: ' texte' (ID: 53492)
  Prédit: 'No'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'No' → logprob: -0.06661786884069443
    2. 'Yes' → logprob: -2.816617965698242
    3. ' No' → logprob: -6.066617965698242
    4. '```' → logprob: -7.691617965698242
    5. '"' → logprob: -8.066617965698242
    6. '"No' → logprob: -8.191617965698242
    7. 'Oui' → logprob: -8.316617965698242
    8. ' string' → logprob: -8.941617965698242
    9. ' Yes' → logprob: -8.941617965698242
    10. 'string' → logprob: -9.066617965698242

Token 313: ' "' (ID: 392)
  Prédit: '("'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '("' → logprob: -0.5250200629234314
    2. '"No' → logprob: -1.4000201225280762
    3. 'No' → logprob: -2.025020122528076
    4. '"' → logprob: -4.025020122528076
    5. ' No' → logprob: -5.400020122528076
    6. '(No' → logprob: -6.150020122528076
    7. '```' → logprob: -6.400020122528076
    8. '(' → logprob: -6.775020122528076
    9. 'Yes' → logprob: -6.775020122528076
    10. ' "' → logprob: -8.025019645690918

Token 314: 'No' (ID: 3160)
  Prédit: 'No'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'No' → logprob: -3.6312321753939614e-05
    2. 'Yes' → logprob: -10.250036239624023
    3. ' No' → logprob: -14.125036239624023
    4. '"No' → logprob: -16.500036239624023
    5. '```' → logprob: -17.375036239624023
    6. '   ' → logprob: -18.750036239624023
    7. '")' → logprob: -19.125036239624023
    8. 'Oui' → logprob: -19.625036239624023
    9. '"' → logprob: -20.500036239624023
    10. '``' → logprob: -20.750036239624023

Token 315: '"' (ID: 1)
  Prédit: '")'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '")' → logprob: -0.000523246475495398
    2. ')' → logprob: -7.750523090362549
    3. 'else' → logprob: -10.125523567199707
    4. '")
' → logprob: -10.625523567199707
    5. ')")' → logprob: -10.750523567199707
    6. '"' → logprob: -12.625523567199707
    7. 'elif' → logprob: -14.125523567199707
    8. ' ")' → logprob: -14.375523567199707
    9. '")
' → logprob: -15.000523567199707
    10. '!")' → logprob: -15.000523567199707

Token 316: ' à' (ID: 1221)
  Prédit: 'else'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'else' → logprob: -0.00599823659285903
    2. 'elif' → logprob: -5.130998134613037
    3. ' else' → logprob: -9.880998611450195
    4. '```' → logprob: -11.005998611450195
    5. '<|end|>' → logprob: -14.505998611450195
    6. '
' → logprob: -14.630998611450195
    7. ' elif' → logprob: -15.630998611450195
    8. ')' → logprob: -15.630998611450195
    9. 'elseif' → logprob: -16.255998611450195
    10. '   ' → logprob: -16.505998611450195

Token 317: ' l' (ID: 305)
  Prédit: 'la'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'la' → logprob: -0.3618836998939514
    2. 'l' → logprob: -1.8618836402893066
    3. 'print' → logprob: -2.4868836402893066
    4. 'sys' → logprob: -3.4868836402893066
    5. ' la' → logprob: -4.111883640289307
    6. ')' → logprob: -5.611883640289307
    7. '```' → logprob: -6.111883640289307
    8. 'a' → logprob: -6.236883640289307
    9. 'stdout' → logprob: -6.236883640289307
    10. 'standard' → logprob: -7.111883640289307

Token 318: ''écran' (ID: 147901)
  Prédit: 'else'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'else' → logprob: -1.0440962314605713
    2. 'a' → logprob: -1.1690962314605713
    3. 'elif' → logprob: -1.6690962314605713
    4. 'e' → logprob: -2.4190962314605713
    5. ''intérieur' → logprob: -4.669095993041992
    6. 'print' → logprob: -4.794095993041992
    7. 'ieu' → logprob: -5.169095993041992
    8. '```' → logprob: -5.794095993041992
    9. ' else' → logprob: -6.169095993041992
    10. 'é' → logprob: -6.169095993041992

Token 319: '
' (ID: 198)
  Prédit: 'else'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'else' → logprob: -0.0031886440701782703
    2. 'elif' → logprob: -5.753188610076904
    3. ' else' → logprob: -11.878189086914062
    4. '```' → logprob: -12.503189086914062
    5. '   ' → logprob: -16.753189086914062
    6. '
' → logprob: -17.253189086914062
    7. 'elseif' → logprob: -17.253189086914062
    8. ' elif' → logprob: -17.503189086914062
    9. '    
' → logprob: -17.753189086914062
    10. 'print' → logprob: -17.878189086914062

Token 320: 'else' (ID: 2807)
  Prédit: 'else'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'else' → logprob: -0.0019307781476527452
    2. 'elif' → logprob: -6.2519307136535645
    3. ' else' → logprob: -13.251931190490723
    4. '```' → logprob: -15.001931190490723
    5. 'if' → logprob: -16.626930236816406
    6. 'elseif' → logprob: -18.251930236816406
    7. 'print' → logprob: -18.251930236816406
    8. ' elif' → logprob: -19.376930236816406
    9. '}else' → logprob: -20.126930236816406
    10. 'elsif' → logprob: -20.126930236816406

Token 321: ':
' (ID: 734)
  Prédit: ':'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ':' → logprob: -0.014207468368113041
    2. ':
' → logprob: -4.264207363128662
    3. ' :' → logprob: -10.63920783996582
    4. '   ' → logprob: -11.26420783996582
    5. ' :
' → logprob: -12.26420783996582
    6. ':
' → logprob: -14.26420783996582
    7. '{' → logprob: -14.38920783996582
    8. ':

' → logprob: -14.51420783996582
    9. '():' → logprob: -15.13920783996582
    10. '):' → logprob: -15.88920783996582

Token 322: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.0014872431056573987
    2. 'print' → logprob: -6.6264872550964355
    3. ' print' → logprob: -8.751486778259277
    4. '   ' → logprob: -13.251486778259277
    5. '	print' → logprob: -14.626486778259277
    6. '       ' → logprob: -14.751486778259277
    7. '```' → logprob: -15.251486778259277
    8. '    ' → logprob: -16.501487731933594
    9. ':' → logprob: -16.751487731933594
    10. '    
' → logprob: -17.376487731933594

Token 323: ' print' (ID: 2123)
  Prédit: 'print'
  Correct (stricte): False
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'print' (adapté à ' print') → logprob: -0.0009449340868741274
    2. ' print' → logprob: -7.125945091247559
    3. '   ' → logprob: -8.875945091247559
    4. '	print' → logprob: -14.375945091247559
    5. ' ' → logprob: -17.375944137573242
    6. '    ' → logprob: -17.375944137573242
    7. '```' → logprob: -17.500944137573242
    8. '    
' → logprob: -17.625944137573242
    9. 'Print' → logprob: -18.000944137573242
    10. '  ' → logprob: -18.000944137573242

Token 324: '("' (ID: 568)
  Prédit: '("'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '("' → logprob: -0.001929228543303907
    2. '(' → logprob: -6.25192928314209
    3. '('' → logprob: -15.12692928314209
    4. '("("' → logprob: -15.37692928314209
    5. '(
' → logprob: -15.75192928314209
    6. '()' → logprob: -18.376928329467773
    7. '("")' → logprob: -18.376928329467773
    8. '(("' → logprob: -19.001928329467773
    9. '("""' → logprob: -19.126928329467773
    10. '"' → logprob: -19.251928329467773

Token 325: 'Yes' (ID: 13022)
  Prédit: 'Yes'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'Yes' → logprob: -0.38699617981910706
    2. '"' → logprob: -1.1369961500167847
    3. '“Yes' → logprob: -10.136996269226074
    4. ''' → logprob: -10.636996269226074
    5. 'Oui' → logprob: -11.386996269226074
    6. 'Ye' → logprob: -11.386996269226074
    7. '"No' → logprob: -11.511996269226074
    8. 'yes' → logprob: -12.136996269226074
    9. 'YES' → logprob: -12.386996269226074
    10. 'No' → logprob: -13.136996269226074

Token 326: '")' (ID: 1405)
  Prédit: '")'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '")' → logprob: -6.384836888173595e-05
    2. ')")' → logprob: -9.7500638961792
    3. ')' → logprob: -12.2500638961792
    4. '()' → logprob: -14.5000638961792
    5. '("' → logprob: -16.625062942504883
    6. '")
' → logprob: -17.125062942504883
    7. '!")' → logprob: -17.750062942504883
    8. '"' → logprob: -17.875062942504883
    9. '}")' → logprob: -18.375062942504883
    10. ' ")' → logprob: -18.500062942504883

Token 327: ' ' (ID: 220)
  Prédit: ''
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False

Token 328: ' #' (ID: 1069)
  Prédit: ''
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False

Token 329: ' Sinon' (ID: 154924)
  Prédit: ''
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False

Token 330: ',' (ID: 11)
  Prédit: ''
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False

Token 331: ' on' (ID: 402)
  Prédit: ' print'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' print' → logprob: -0.2406758964061737
    2. '   ' → logprob: -2.240675926208496
    3. 'print' → logprob: -2.240675926208496
    4. '<|end|>' → logprob: -8.115675926208496
    5. '    ' → logprob: -8.490675926208496
    6. ' ' → logprob: -8.615675926208496
    7. '	print' → logprob: -8.740675926208496
    8. ')' → logprob: -9.365675926208496
    9. '  ' → logprob: -9.490675926208496
    10. '```' → logprob: -9.740675926208496

Token 332: ' affiche' (ID: 127479)
  Prédit: ' print'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' print' → logprob: -0.036273300647735596
    2. 'print' → logprob: -3.411273241043091
    3. '   ' → logprob: -6.16127347946167
    4. ' ' → logprob: -8.661273002624512
    5. ' ' → logprob: -8.786273002624512
    6. '  ' → logprob: -9.786273002624512
    7. '	print' → logprob: -9.911273002624512
    8. ' Yes' → logprob: -10.286273002624512
    9. ' continue' → logprob: -11.536273002624512
    10. '    ' → logprob: -11.661273002624512

Token 333: ' "' (ID: 392)
  Prédit: '("'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '("' → logprob: -0.0007113590254448354
    2. '(' → logprob: -7.250711441040039
    3. '('' → logprob: -13.750711441040039
    4. '("""' → logprob: -16.12571144104004
    5. '(No' → logprob: -16.37571144104004
    6. '"' → logprob: -17.00071144104004
    7. '(
' → logprob: -17.00071144104004
    8. '()' → logprob: -17.37571144104004
    9. '("")' → logprob: -17.62571144104004
    10. 'Yes' → logprob: -18.12571144104004

Token 334: 'Yes' (ID: 13022)
  Prédit: 'Yes'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'Yes' → logprob: -6.704273118884885e-07
    2. 'No' → logprob: -14.875000953674316
    3. ' Yes' → logprob: -16.125
    4. 'Oui' → logprob: -16.625
    5. 'Ye' → logprob: -18.125
    6. 'YES' → logprob: -21.375
    7. 'Y' → logprob: -21.625
    8. '```' → logprob: -21.875
    9. 'Yeah' → logprob: -22.0
    10. '"' → logprob: -22.25

Token 335: '"' (ID: 1)
  Prédit: '")'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '")' → logprob: -1.5094070477061905e-05
    2. ')' → logprob: -11.750015258789062
    3. ')")' → logprob: -12.000015258789062
    4. '"' → logprob: -15.000015258789062
    5. '()' → logprob: -15.125015258789062
    6. '")
' → logprob: -15.250015258789062
    7. '("' → logprob: -16.125015258789062
    8. '!")' → logprob: -16.500015258789062
    9. ' ")' → logprob: -18.875015258789062
    10. '')' → logprob: -19.250015258789062

Token 336: ' à' (ID: 1221)
  Prédit: ''
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False

Token 337: ' l' (ID: 305)
  Prédit: 'l'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'l' → logprob: -0.014640211127698421
    2. 'Yes' → logprob: -4.7646403312683105
    3. 'la' → logprob: -5.5146403312683105
    4. ' l' → logprob: -6.8896403312683105
    5. '```' → logprob: -8.264639854431152
    6. ' Yes' → logprob: -8.389639854431152
    7. 'é' → logprob: -9.014639854431152
    8. '#' → logprob: -9.389639854431152
    9. 'le' → logprob: -9.639639854431152
    10. '"' → logprob: -10.514639854431152

Token 338: ''écran' (ID: 147901)
  Prédit: ''écran'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ''écran' → logprob: -0.368137925863266
    2. 'é' → logprob: -1.3681379556655884
    3. 'screen' → logprob: -3.618137836456299
    4. ' écran' → logprob: -4.618137836456299
    5. 'creen' → logprob: -4.993137836456299
    6. '’écran' → logprob: -5.618137836456299
    7. 'a' → logprob: -6.493137836456299
    8. 'cran' → logprob: -6.493137836456299
    9. '```' → logprob: -6.993137836456299
    10. 'érieur' → logprob: -8.118138313293457

Token 339: ' (' (ID: 350)
  Prédit: ''
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False

Token 340: 'dans' (ID: 108151)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ')' → logprob: -4.632542913896032e-05
    2. '<|end|>' → logprob: -10.750046730041504
    3. '```' → logprob: -11.750046730041504
    4. '")' → logprob: -12.000046730041504
    5. ' )' → logprob: -12.000046730041504
    6. ')
' → logprob: -13.125046730041504
    7. '`)' → logprob: -14.250046730041504
    8. '}' → logprob: -14.375046730041504
    9. '
' → logprob: -14.500046730041504
    10. '')' → logprob: -15.500046730041504

Token 341: ' ce' (ID: 2357)
  Prédit: 'le'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'le' → logprob: -0.9085917472839355
    2. 'l' → logprob: -1.6585917472839355
    3. ')' → logprob: -2.0335917472839355
    4. 'la' → logprob: -2.5335917472839355
    5. '```' → logprob: -2.9085917472839355
    6. ' le' → logprob: -3.2835917472839355
    7. 'les' → logprob: -3.6585917472839355
    8. ' la' → logprob: -4.0335917472839355
    9. '#' → logprob: -4.2835917472839355
    10. 'une' → logprob: -5.1585917472839355

Token 342: ' cas' (ID: 2108)
  Prédit: ' cas'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' cas' → logprob: -0.1307232677936554
    2. 'cas' → logprob: -2.255723237991333
    3. '```' → logprob: -4.880723476409912
    4. 'else' → logprob: -5.630723476409912
    5. 'code' → logprob: -6.755723476409912
    6. '#' → logprob: -6.755723476409912
    7. ' code' → logprob: -7.005723476409912
    8. 'case' → logprob: -7.505723476409912
    9. ')' → logprob: -7.505723476409912
    10. ' contexte' → logprob: -7.755723476409912

Token 343: ',' (ID: 11)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')' → logprob: -0.007236497476696968
    2. ',' → logprob: -5.382236480712891
    3. ' )' → logprob: -6.632236480712891
    4. '   ' → logprob: -7.007236480712891
    5. '#' → logprob: -8.63223648071289
    6. ':' → logprob: -9.13223648071289
    7. '")' → logprob: -11.13223648071289
    8. ':)' → logprob: -11.63223648071289
    9. ')#' → logprob: -12.00723648071289
    10. ' ' → logprob: -12.13223648071289

Token 344: ' il' (ID: 1793)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ')' → logprob: -0.4768802225589752
    2. '#' → logprob: -1.6018801927566528
    3. 'car' → logprob: -3.3518803119659424
    4. ' parce' → logprob: -3.3518803119659424
    5. 'cela' → logprob: -3.4768803119659424
    6. ' car' → logprob: -3.8518803119659424
    7. ' )' → logprob: -4.726880073547363
    8. ' #' → logprob: -4.851880073547363
    9. ' la' → logprob: -5.226880073547363
    10. 'le' → logprob: -5.601880073547363

Token 345: ' doit' (ID: 21822)
  Prédit: ' means'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' means' → logprob: -1.2301907539367676
    2. ')' → logprob: -1.3551907539367676
    3. ' signifie' → logprob: -1.6051907539367676
    4. 'means' → logprob: -2.1051907539367676
    5. ' n' → logprob: -2.8551907539367676
    6. 's' → logprob: -4.105190753936768
    7. ' implies' → logprob: -4.355190753936768
    8. ' veut' → logprob: -4.855190753936768
    9. ' )' → logprob: -5.230190753936768
    10. ' semble' → logprob: -5.480190753936768

Token 346: ' y' (ID: 342)
  Prédit: ' y'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' y' → logprob: -0.3900776207447052
    2. 'être' → logprob: -1.8900775909423828
    3. ' être' → logprob: -2.390077590942383
    4. '   ' → logprob: -3.765077590942383
    5. 'avoir' → logprob: -4.390077590942383
    6. 'y' → logprob: -4.515077590942383
    7. ' avoir' → logprob: -5.265077590942383
    8. ' only' → logprob: -5.265077590942383
    9. ' manquer' → logprob: -5.515077590942383
    10. ' n' → logprob: -6.140077590942383

Token 347: ' avoir' (ID: 16595)
  Prédit: 'avoir'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'avoir' → logprob: -0.05745990574359894
    2. ' avoir' → logprob: -2.932459831237793
    3. ''avoir' → logprob: -6.182459831237793
    4. 'voir' → logprob: -8.182459831237793
    5. 'a' → logprob: -8.682459831237793
    6. '’avoir' → logprob: -10.057459831237793
    7. 'avait' → logprob: -12.557459831237793
    8. 'have' → logprob: -12.932459831237793
    9. '```' → logprob: -13.307459831237793
    10. '   ' → logprob: -13.307459831237793

Token 348: ' exactement' (ID: 108701)
  Prédit: '2'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '2' → logprob: -0.031058499589562416
    2. ' ' → logprob: -3.7810585498809814
    3. 'exact' → logprob: -6.156058311462402
    4. ' exactly' → logprob: -6.281058311462402
    5. '"' → logprob: -6.406058311462402
    6. '1' → logprob: -7.031058311462402
    7. ' deux' → logprob: -8.031058311462402
    8. ' exactement' → logprob: -8.156058311462402
    9. ')' → logprob: -9.031058311462402
    10. '3' → logprob: -9.281058311462402

Token 349: ' deux' (ID: 10301)
  Prédit: '2'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '2' → logprob: -0.05590052530169487
    2. ' ' → logprob: -2.9309005737304688
    3. ' two' → logprob: -7.680900573730469
    4. ' deux' → logprob: -7.805900573730469
    5. '   ' → logprob: -9.430900573730469
    6. '1' → logprob: -11.055900573730469
    7. 'two' → logprob: -11.180900573730469
    8. ')' → logprob: -11.930900573730469
    9. '  ' → logprob: -11.930900573730469
    10. '```' → logprob: -12.055900573730469

Token 350: ' valeurs' (ID: 73668)
  Prédit: ' distinct'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' distinct' → logprob: -0.0655747726559639
    2. 'distinct' → logprob: -3.440574884414673
    3. ')' → logprob: -3.690574884414673
    4. '<|end|>' → logprob: -6.190574645996094
    5. ' tokens' → logprob: -6.315574645996094
    6. ' )' → logprob: -6.815574645996094
    7. ' different' → logprob: -7.565574645996094
    8. 'tokens' → logprob: -8.315574645996094
    9. ' types' → logprob: -8.940574645996094
    10. ' elements' → logprob: -9.065574645996094

Token 351: ' ident' (ID: 3951)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ')' → logprob: -0.02848934754729271
    2. '")' → logprob: -4.278489112854004
    3. ' )' → logprob: -4.403489112854004
    4. ')")' → logprob: -6.278489112854004
    5. ' distinct' → logprob: -10.028489112854004
    6. ' ")' → logprob: -10.528489112854004
    7. 'distinct' → logprob: -12.278489112854004
    8. '()' → logprob: -12.278489112854004
    9. '())' → logprob: -12.403489112854004
    10. ' present' → logprob: -12.653489112854004

Token 352: 'iques' (ID: 11654)
  Prédit: 'ques'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'ques' → logprob: -0.5832805037498474
    2. 'iques' → logprob: -0.8332805037498474
    3. 'ales' → logprob: -5.708280563354492
    4. 'ical' → logprob: -6.583280563354492
    5. 'cal' → logprob: -6.833280563354492
    6. 'que' → logprob: -7.208280563354492
    7. 'es' → logprob: -8.833280563354492
    8. 'c' → logprob: -8.958280563354492
    9. 'aux' → logprob: -9.083280563354492
    10. '```' → logprob: -9.083280563354492

Token 353: ' et' (ID: 859)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ')' → logprob: -0.004187148064374924
    2. '")' → logprob: -5.504187107086182
    3. ' )' → logprob: -9.87918758392334
    4. '')' → logprob: -11.12918758392334
    5. '```' → logprob: -11.37918758392334
    6. '<|end|>' → logprob: -11.37918758392334
    7. '`)' → logprob: -11.87918758392334
    8. ')")' → logprob: -12.62918758392334
    9. ' ")' → logprob: -13.12918758392334
    10. ')
' → logprob: -13.75418758392334

Token 354: ' une' (ID: 2463)
  Prédit: ' one'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' one' → logprob: -0.59056156873703
    2. ' un' → logprob: -1.2155616283416748
    3. ' une' → logprob: -2.590561628341675
    4. 'one' → logprob: -3.590561628341675
    5. 'un' → logprob: -3.840561628341675
    6. 'une' → logprob: -4.840561389923096
    7. 'exact' → logprob: -4.965561389923096
    8. ' exactement' → logprob: -5.090561389923096
    9. '1' → logprob: -6.340561389923096
    10. ' exactly' → logprob: -6.590561389923096

Token 355: ' différente' (ID: 140707)
  Prédit: 'distinct'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'distinct' → logprob: -1.0168333053588867
    2. 'third' → logprob: -1.7668333053588867
    3. ' troisième' → logprob: -1.8918333053588867
    4. ' différente' → logprob: -2.2668333053588867
    5. 'tro' → logprob: -2.5168333053588867
    6. ' distinct' → logprob: -3.1418333053588867
    7. 'different' → logprob: -3.3918333053588867
    8. ' third' → logprob: -3.8918333053588867
    9. 'diff' → logprob: -4.891833305358887
    10. '```' → logprob: -5.516833305358887

Token 356: ')' (ID: 8)
  Prédit: ')'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')' → logprob: -0.0004854882718063891
    2. '")' → logprob: -7.750485420227051
    3. ' )' → logprob: -10.75048542022705
    4. '```' → logprob: -11.62548542022705
    5. '')' → logprob: -11.87548542022705
    6. ')
' → logprob: -12.25048542022705
    7. '<|end|>' → logprob: -12.25048542022705
    8. '`)' → logprob: -12.37548542022705
    9. ')")' → logprob: -14.00048542022705
    10. '
' → logprob: -14.00048542022705


RÉSUMÉ:
--------------------------------------------------------------------------------
Total des tokens analysés: 354
Tokens correctement prédits (1ère position, stricte): 68
Tokens correctement prédits (1ère position, avec adaptation): 70
Tokens correctement prédits (top 10): 191
Précision stricte (1ère position): 19.21%
Précision adaptée (1ère position): 19.77%
Précision (top 10): 53.95%
================================================================================
