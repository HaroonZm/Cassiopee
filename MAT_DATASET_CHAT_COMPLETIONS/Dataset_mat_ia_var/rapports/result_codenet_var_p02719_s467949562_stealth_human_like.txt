================================================================================
ANALYSE DE PRÉDICTION TOKEN PAR TOKEN (BATCH API)
Date: 2025-06-04 19:19:24
Modèle de tokenisation: gpt-4o-mini
================================================================================

SCRIPT ANALYSÉ:
--------------------------------------------------------------------------------
# Bon bah je commence par ça...
n, k = map(int, input().split())

if n==0 or k==1:    # cas où rien d'intéressant ?
    print(0)
    quit()

n = n % k  # je crois qu'il faut réduire ?
# un calcul, pas hyper lisible à vrai dire mais ça marche
print(min(n, abs(n-k)))
--------------------------------------------------------------------------------

RÉSULTATS D'ANALYSE TOKEN PAR TOKEN:
--------------------------------------------------------------------------------
Token 0: '#' (ID: 2)
  → Token d'amorce (pas de prédiction)

Token 1: ' Bon' (ID: 12658)
  → Token d'amorce (pas de prédiction)

Token 2: ' bah' (ID: 13530)
  → Token d'amorce (pas de prédiction)

Token 3: ' je' (ID: 1264)
  Prédit: '```'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '```' → logprob: -0.054936785250902176
    2. ',' → logprob: -4.42993688583374
    3. '\n' → logprob: -4.42993688583374
    4. '
' → logprob: -4.55493688583374
    5. '``' → logprob: -4.80493688583374
    6. '`' → logprob: -5.67993688583374
    7. '!' → logprob: -6.17993688583374
    8. '#' → logprob: -6.67993688583374
    9. ' ```' → logprob: -6.92993688583374
    10. '\' → logprob: -6.92993688583374

Token 4: ' commence' (ID: 44755)
  Prédit: ' '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' ' → logprob: -0.6498329043388367
    2. 's' → logprob: -1.8998329639434814
    3. ' vais' → logprob: -2.0248329639434814
    4. 'vais' → logprob: -3.0248329639434814
    5. '```' → logprob: -3.3998329639434814
    6. ' continue' → logprob: -3.6498329639434814
    7. 'n' → logprob: -3.8998329639434814
    8. 'v' → logprob: -4.274832725524902
    9. '_' → logprob: -4.274832725524902
    10. 'continue' → logprob: -4.649832725524902

Token 5: ' par' (ID: 686)
  Prédit: '#'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '#' → logprob: -1.1159788370132446
    2. '!' → logprob: -1.3659788370132446
    3. '\' → logprob: -2.365978717803955
    4. ',' → logprob: -2.490978717803955
    5. '\n' → logprob: -2.490978717803955
    6. '```' → logprob: -2.615978717803955
    7. '.' → logprob: -3.490978717803955
    8. ':' → logprob: -4.240978717803955
    9. ' ' → logprob: -4.490978717803955
    10. '`' → logprob: -4.615978717803955

Token 6: ' ça' (ID: 13590)
  Prédit: '#'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '#' → logprob: -1.1959669589996338
    2. ' #' → logprob: -1.5709669589996338
    3. ' ' → logprob: -2.195966958999634
    4. 'une' → logprob: -2.570966958999634
    5. ' une' → logprob: -2.570966958999634
    6. ' un' → logprob: -2.820966958999634
    7. '```' → logprob: -3.820966958999634
    8. ' la' → logprob: -3.945966958999634
    9. 'un' → logprob: -4.070966720581055
    10. '`' → logprob: -4.195966720581055

Token 7: '...
' (ID: 4908)
  Prédit: '#'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '#' → logprob: -0.8083905577659607
    2. '\n' → logprob: -1.4333906173706055
    3. '\' → logprob: -2.3083906173706055
    4. '`' → logprob: -2.5583906173706055
    5. '```' → logprob: -2.5583906173706055
    6. 'print' → logprob: -4.0583906173706055
    7. '!' → logprob: -4.3083906173706055
    8. ':' → logprob: -5.0583906173706055
    9. '``' → logprob: -5.6833906173706055
    10. '.' → logprob: -5.6833906173706055

Token 8: 'n' (ID: 77)
  Prédit: '\n'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '\n' → logprob: -0.3908217251300812
    2. '\' → logprob: -1.8908216953277588
    3. '#' → logprob: -2.765821695327759
    4. '```' → logprob: -3.140821695327759
    5. '`' → logprob: -3.515821695327759
    6. '  
' → logprob: -4.890821933746338
    7. ' ' → logprob: -5.140821933746338
    8. ' 
' → logprob: -5.390821933746338
    9. ' \' → logprob: -5.390821933746338
    10. '
' → logprob: -6.140821933746338

Token 9: ',' (ID: 11)
  Prédit: 'e'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'e' → logprob: -0.14825871586799622
    2. '#' → logprob: -2.273258686065674
    3. 'o' → logprob: -4.273258686065674
    4. '=' → logprob: -4.773258686065674
    5. 'b' → logprob: -5.648258686065674
    6. 'a' → logprob: -6.148258686065674
    7. '_' → logprob: -6.398258686065674
    8. 'v' → logprob: -6.773258686065674
    9. 'u' → logprob: -7.398258686065674
    10. 'l' → logprob: -7.773258686065674

Token 10: ' k' (ID: 372)
  Prédit: ' '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' ' → logprob: -0.06328435987234116
    2. ' =' → logprob: -2.813284397125244
    3. '=' → logprob: -8.063283920288086
    4. ' p' → logprob: -8.563283920288086
    5. ' space' → logprob: -8.563283920288086
    6. '_' → logprob: -8.813283920288086
    7. ' n' → logprob: -8.938283920288086
    8. '  ' → logprob: -9.438283920288086
    9. ' _' → logprob: -9.813283920288086
    10. ' m' → logprob: -10.313283920288086

Token 11: ' =' (ID: 314)
  Prédit: ' ='
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' =' → logprob: -0.03373491019010544
    2. '=' → logprob: -3.4087347984313965
    3. ',' → logprob: -9.408735275268555
    4. ' ' → logprob: -12.908735275268555
    5. ' ,' → logprob: -13.158735275268555
    6. '=int' → logprob: -14.283735275268555
    7. ' =
' → logprob: -14.408735275268555
    8. ')' → logprob: -14.908735275268555
    9. '  ' → logprob: -16.158735275268555
    10. ' ' → logprob: -16.283735275268555

Token 12: ' map' (ID: 4014)
  Prédit: ' map'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' map' → logprob: -0.007541315630078316
    2. 'map' → logprob: -5.132541179656982
    3. ' input' → logprob: -6.882541179656982
    4. ' ' → logprob: -7.632541179656982
    5. ' list' → logprob: -10.13254165649414
    6. '0' → logprob: -10.50754165649414
    7. 'input' → logprob: -11.13254165649414
    8. ' int' → logprob: -11.25754165649414
    9. ' n' → logprob: -13.00754165649414
    10. '10' → logprob: -14.00754165649414

Token 13: '(int' (ID: 2742)
  Prédit: '(int'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(int' → logprob: -0.206485316157341
    2. '(' → logprob: -1.7064852714538574
    3. '(input' → logprob: -5.456485271453857
    4. '(str' → logprob: -7.206485271453857
    5. 'int' → logprob: -10.706485748291016
    6. '(
' → logprob: -11.831485748291016
    7. '<int' → logprob: -12.206485748291016
    8. '(lambda' → logprob: -12.706485748291016
    9. '(eval' → logprob: -12.956485748291016
    10. '(list' → logprob: -13.206485748291016

Token 14: ',' (ID: 11)
  Prédit: '(input'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '(input' → logprob: -0.011674256063997746
    2. '(' → logprob: -5.386674404144287
    3. 'input' → logprob: -5.386674404144287
    4. ')' → logprob: -6.136674404144287
    5. ' input' → logprob: -8.386673927307129
    6. ',input' → logprob: -10.261673927307129
    7. '=input' → logprob: -11.386673927307129
    8. '[input' → logprob: -12.761673927307129
    9. '<input' → logprob: -12.886673927307129
    10. '```' → logprob: -13.136673927307129

Token 15: ' input' (ID: 3422)
  Prédit: 'input'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'input' → logprob: -0.07889782637357712
    2. ' input' → logprob: -2.578897714614868
    3. '(input' → logprob: -12.078897476196289
    4. ')' → logprob: -13.453897476196289
    5. '=input' → logprob: -14.578897476196289
    6. ',input' → logprob: -15.703897476196289
    7. ' ' → logprob: -16.57889747619629
    8. '```' → logprob: -16.95389747619629
    9. ' )' → logprob: -17.07889747619629
    10. '	input' → logprob: -17.07889747619629

Token 16: '().' (ID: 1454)
  Prédit: '()'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '()' → logprob: -0.25873425602912903
    2. '().' → logprob: -2.1337342262268066
    3. '())' → logprob: -2.2587342262268066
    4. '(' → logprob: -5.883734226226807
    5. '());' → logprob: -6.758734226226807
    6. ')' → logprob: -7.883734226226807
    7. '()))' → logprob: -8.758734703063965
    8. '('' → logprob: -9.008734703063965
    9. '()>' → logprob: -9.133734703063965
    10. '()`' → logprob: -9.758734703063965

Token 17: 'split' (ID: 13627)
  Prédit: 'split'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'split' → logprob: -0.0001601539261173457
    2. 'strip' → logprob: -8.750160217285156
    3. ' split' → logprob: -14.125160217285156
    4. 'rstrip' → logprob: -14.250160217285156
    5. '(split' → logprob: -15.250160217285156
    6. 'spl' → logprob: -17.500160217285156
    7. ')' → logprob: -18.125160217285156
    8. 'read' → logprob: -18.250160217285156
    9. 'startswith' → logprob: -19.625160217285156
    10. ' readline' → logprob: -20.500160217285156

Token 18: '())

' (ID: 27654)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ')' → logprob: -0.28201523423194885
    2. '())' → logprob: -1.7820152044296265
    3. '))' → logprob: -2.657015323638916
    4. '()))' → logprob: -5.407015323638916
    5. '()' → logprob: -5.907015323638916
    6. '(' → logprob: -10.032014846801758
    7. '('' → logprob: -11.407014846801758
    8. ')))' → logprob: -12.532014846801758
    9. ' ())' → logprob: -13.032014846801758
    10. '),' → logprob: -13.157014846801758

Token 19: 'if' (ID: 366)
  Prédit: 'a'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'a' → logprob: -0.14601393043994904
    2. 'if' → logprob: -3.0210139751434326
    3. 's' → logprob: -3.6460139751434326
    4. 'for' → logprob: -3.7710139751434326
    5. 'd' → logprob: -4.8960137367248535
    6. 'x' → logprob: -5.0210137367248535
    7. 'result' → logprob: -5.5210137367248535
    8. 'r' → logprob: -6.0210137367248535
    9. 'dp' → logprob: -6.2710137367248535
    10. 'print' → logprob: -6.3960137367248535

Token 20: ' n' (ID: 297)
  Prédit: ' n'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' n' → logprob: -0.48415783047676086
    2. ' k' → logprob: -0.9841578006744385
    3. ' ' → logprob: -4.734158039093018
    4. 'n' → logprob: -7.609158039093018
    5. ' ' → logprob: -7.734158039093018
    6. 'k' → logprob: -8.10915756225586
    7. ' not' → logprob: -12.60915756225586
    8. ' (' → logprob: -14.73415756225586
    9. ' ' → logprob: -14.73415756225586
    10. '  ' → logprob: -15.10915756225586

Token 21: '==' (ID: 560)
  Prédit: ' >'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' >' → logprob: -0.08534277975559235
    2. ' ' → logprob: -3.7103428840637207
    3. ' >=' → logprob: -3.9603428840637207
    4. '>' → logprob: -4.085342884063721
    5. ' <' → logprob: -4.585342884063721
    6. ' <=' → logprob: -5.085342884063721
    7. ' ==' → logprob: -6.085342884063721
    8. ' %' → logprob: -6.460342884063721
    9. '%' → logprob: -7.460342884063721
    10. '<' → logprob: -8.710342407226562

Token 22: '0' (ID: 15)
  Prédit: 'k'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'k' → logprob: -0.6456866264343262
    2. ' k' → logprob: -1.0206866264343262
    3. ' ' → logprob: -2.645686626434326
    4. '0' → logprob: -3.145686626434326
    5. '1' → logprob: -6.645686626434326
    6. '2' → logprob: -10.520687103271484
    7. '=' → logprob: -12.020687103271484
    8. '5' → logprob: -12.770687103271484
    9. '3' → logprob: -12.770687103271484
    10. '=k' → logprob: -13.145687103271484

Token 23: ' or' (ID: 503)
  Prédit: ':'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ':' → logprob: -0.004624749533832073
    2. ' :' → logprob: -5.379624843597412
    3. ':
' → logprob: -13.254624366760254
    4. ' and' → logprob: -14.254624366760254
    5. ':**' → logprob: -14.629624366760254
    6. ':return' → logprob: -14.629624366760254
    7. '):' → logprob: -15.004624366760254
    8. ' or' → logprob: -15.379624366760254
    9. '':' → logprob: -16.00462532043457
    10. ',' → logprob: -16.00462532043457

Token 24: ' k' (ID: 372)
  Prédit: ' k'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' k' → logprob: -0.029762184247374535
    2. 'k' → logprob: -3.5297622680664062
    3. ' n' → logprob: -12.029762268066406
    4. ' ' → logprob: -12.654762268066406
    5. 'n' → logprob: -13.904762268066406
    6. ' ' → logprob: -14.529762268066406
    7. '	k' → logprob: -15.467262268066406
    8. '```' → logprob: -15.717262268066406
    9. '_k' → logprob: -16.842262268066406
    10. ' not' → logprob: -16.967262268066406

Token 25: '==' (ID: 560)
  Prédit: '=='
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '==' → logprob: -0.07307498902082443
    2. ' ==' → logprob: -2.82307505607605
    3. '>' → logprob: -4.823074817657471
    4. ' >' → logprob: -6.448074817657471
    5. '>=' → logprob: -7.448074817657471
    6. '0' → logprob: -7.823074817657471
    7. ' >=' → logprob: -9.073075294494629
    8. '<=' → logprob: -9.198075294494629
    9. ' ' → logprob: -9.698075294494629
    10. '=' → logprob: -9.823075294494629

Token 26: '1' (ID: 16)
  Prédit: '0'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '0' → logprob: -5.264322317088954e-05
    2. ' ' → logprob: -9.875052452087402
    3. '1' → logprob: -15.125052452087402
    4. 'n' → logprob: -15.187552452087402
    5. '>' → logprob: -15.875052452087402
    6. '```' → logprob: -16.31255340576172
    7. 'k' → logprob: -16.56255340576172
    8. '   ' → logprob: -16.93755340576172
    9. '  ' → logprob: -17.06255340576172
    10. '۰' → logprob: -17.75005340576172

Token 27: ':' (ID: 25)
  Prédit: ':'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ':' → logprob: -0.0006316631333902478
    2. ' :' → logprob: -7.375631809234619
    3. ':
' → logprob: -12.750631332397461
    4. '):' → logprob: -14.375631332397461
    5. ':return' → logprob: -14.625631332397461
    6. ':**' → logprob: -14.875631332397461
    7. ',' → logprob: -16.12563133239746
    8. '>:' → logprob: -16.37563133239746
    9. ':def' → logprob: -16.62563133239746
    10. ' and' → logprob: -16.87563133239746

Token 28: '   ' (ID: 271)
  Prédit: '\n'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '\n' → logprob: -0.2287505865097046
    2. '   ' → logprob: -2.728750705718994
    3. 'print' → logprob: -3.228750705718994
    4. ' print' → logprob: -3.728750705718994
    5. ' ' → logprob: -3.853750705718994
    6. '
' → logprob: -3.853750705718994
    7. ' 
' → logprob: -4.603750705718994
    8. ':' → logprob: -4.728750705718994
    9. '\' → logprob: -6.228750705718994
    10. '  
' → logprob: -6.478750705718994

Token 29: ' #' (ID: 1069)
  Prédit: 'print'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'print' → logprob: -0.42256325483322144
    2. ' print' → logprob: -1.7975633144378662
    3. '
' → logprob: -2.297563314437866
    4. '\n' → logprob: -3.172563314437866
    5. ':' → logprob: -4.047563076019287
    6. '   ' → logprob: -4.797563076019287
    7. ':
' → logprob: -5.047563076019287
    8. '
' → logprob: -6.672563076019287
    9. ' 
' → logprob: -6.672563076019287
    10. ' ' → logprob: -8.297563552856445

Token 30: ' cas' (ID: 2108)
  Prédit: ' print'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' print' → logprob: -0.03723796084523201
    2. 'print' → logprob: -3.5372378826141357
    3. ' pass' → logprob: -5.037238121032715
    4. '    ' → logprob: -7.662238121032715
    5. ' exit' → logprob: -9.037238121032715
    6. '   ' → logprob: -9.287238121032715
    7. ' ' → logprob: -9.412238121032715
    8. 'pass' → logprob: -9.412238121032715
    9. ' return' → logprob: -9.662238121032715
    10. ' ' → logprob: -11.787238121032715

Token 31: ' où' (ID: 15113)
  Prédit: ' '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' ' → logprob: -0.18418431282043457
    2. ' de' → logprob: -3.5591843128204346
    3. ' d' → logprob: -3.9341843128204346
    4. ':' → logprob: -3.9341843128204346
    5. '   ' → logprob: -4.4341840744018555
    6. ' où' → logprob: -4.4341840744018555
    7. ' particulier' → logprob: -4.8091840744018555
    8. ' spécial' → logprob: -5.0591840744018555
    9. ' #' → logprob: -5.3091840744018555
    10. ' where' → logprob: -5.3091840744018555

Token 32: ' rien' (ID: 23082)
  Prédit: ' n'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' n' → logprob: -0.8863197565078735
    2. ' print' → logprob: -1.0113197565078735
    3. 'print' → logprob: -1.6363197565078735
    4. 'n' → logprob: -4.011319637298584
    5. ' ' → logprob: -5.261319637298584
    6. '0' → logprob: -5.886319637298584
    7. '   ' → logprob: -6.511319637298584
    8. '1' → logprob: -7.011319637298584
    9. '    ' → logprob: -8.761320114135742
    10. '  ' → logprob: -8.886320114135742

Token 33: ' d' (ID: 272)
  Prédit: ' n'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' n' → logprob: -0.664949893951416
    2. ' à' → logprob: -1.664949893951416
    3. '   ' → logprob: -2.289949893951416
    4. 'print' → logprob: -3.039949893951416
    5. ' print' → logprob: -3.164949893951416
    6. 'n' → logprob: -3.539949893951416
    7. ' ne' → logprob: -4.039949893951416
    8. 'à' → logprob: -4.539949893951416
    9. 'pass' → logprob: -4.789949893951416
    10. ' ' → logprob: -5.289949893951416

Token 34: ''inté' (ID: 187934)
  Prédit: 'e'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'e' → logprob: -0.10950777679681778
    2. 'a' → logprob: -3.2345077991485596
    3. 'à' → logprob: -3.8595077991485596
    4. ''à' → logprob: -3.9845077991485596
    5. 'u' → logprob: -4.6095075607299805
    6. ' à' → logprob: -5.8595075607299805
    7. 'é' → logprob: -5.9845075607299805
    8. 'n' → logprob: -6.9845075607299805
    9. ''être' → logprob: -7.1095075607299805
    10. '   ' → logprob: -7.2345075607299805

Token 35: 'ressant' (ID: 106660)
  Prédit: 'ressant'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'ressant' → logprob: -0.0028332918882369995
    2. 'ress' → logprob: -6.127833366394043
    3. 'rant' → logprob: -8.252833366394043
    4. 'r' → logprob: -8.627833366394043
    5. 'res' → logprob: -9.252833366394043
    6. 'rés' → logprob: -10.752833366394043
    7. 'resse' → logprob: -10.877833366394043
    8. 'ré' → logprob: -11.252833366394043
    9. '#' → logprob: -11.627833366394043
    10. 'rent' → logprob: -11.752833366394043

Token 36: ' ?
' (ID: 19740)
  Prédit: ':'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ':' → logprob: -0.026372641324996948
    2. '   ' → logprob: -4.65137243270874
    3. ',' → logprob: -4.90137243270874
    4. ' :' → logprob: -5.02637243270874
    5. ':
' → logprob: -6.90137243270874
    6. 'print' → logprob: -7.90137243270874
    7. ' print' → logprob: -8.151372909545898
    8. ' or' → logprob: -8.901372909545898
    9. ' :
' → logprob: -9.151372909545898
    10. '.' → logprob: -9.401372909545898

Token 37: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.32499077916145325
    2. ':' → logprob: -2.074990749359131
    3. ' print' → logprob: -2.574990749359131
    4. 'print' → logprob: -2.699990749359131
    5. '\n' → logprob: -5.949990749359131
    6. ':
' → logprob: -6.449990749359131
    7. '
' → logprob: -6.699990749359131
    8. ' ' → logprob: -6.949990749359131
    9. '	print' → logprob: -8.199991226196289
    10. 'pass' → logprob: -8.699991226196289

Token 38: ' print' (ID: 2123)
  Prédit: ' print'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' print' → logprob: -0.4849395155906677
    2. 'print' (adapté à ' print') → logprob: -1.8599395751953125
    3. ' pass' → logprob: -1.8599395751953125
    4. '   ' → logprob: -3.1099395751953125
    5. 'pass' → logprob: -3.6099395751953125
    6. '    ' → logprob: -7.8599395751953125
    7. ' exit' → logprob: -8.234939575195312
    8. ' return' → logprob: -8.609939575195312
    9. 'exit' → logprob: -8.984939575195312
    10. ' ' → logprob: -9.234939575195312

Token 39: '(' (ID: 7)
  Prédit: '('
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(' → logprob: -0.275990754365921
    2. '()' → logprob: -1.7759907245635986
    3. '(n' → logprob: -2.6509907245635986
    4. '('' → logprob: -7.900990962982178
    5. '("' → logprob: -8.02599048614502
    6. '("")' → logprob: -8.15099048614502
    7. '(k' → logprob: -9.52599048614502
    8. '(
' → logprob: -9.90099048614502
    9. '(-' → logprob: -10.27599048614502
    10. '0' → logprob: -10.40099048614502

Token 40: '0' (ID: 15)
  Prédit: '0'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '0' → logprob: -0.8147530555725098
    2. 'n' → logprob: -0.9397530555725098
    3. '1' → logprob: -1.8147530555725098
    4. ' n' → logprob: -7.06475305557251
    5. '"' → logprob: -7.18975305557251
    6. ' ' → logprob: -7.43975305557251
    7. ')' → logprob: -7.56475305557251
    8. '-' → logprob: -7.93975305557251
    9. '(n' → logprob: -8.814752578735352
    10. '")' → logprob: -9.189752578735352

Token 41: ')
' (ID: 446)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')' → logprob: -4.704065213445574e-05
    2. ')
' → logprob: -10.125046730041504
    3. ' )' → logprob: -12.250046730041504
    4. '))' → logprob: -13.875046730041504
    5. ')
' → logprob: -14.250046730041504
    6. '`)' → logprob: -16.25004768371582
    7. '')' → logprob: -16.37504768371582
    8. ')

' → logprob: -16.50004768371582
    9. ')`' → logprob: -16.50004768371582
    10. '）' → logprob: -17.12504768371582

Token 42: '   ' (ID: 271)
  Prédit: 'else'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'else' → logprob: -0.02654271572828293
    2. '
' → logprob: -4.151542663574219
    3. ' else' → logprob: -5.026542663574219
    4. 'elif' → logprob: -6.026542663574219
    5. ')' → logprob: -7.526542663574219
    6. ' 
' → logprob: -8.151542663574219
    7. '    
' → logprob: -8.526542663574219
    8. '\n' → logprob: -9.026542663574219
    9. '  
' → logprob: -9.276542663574219
    10. '```' → logprob: -9.526542663574219

Token 43: ' quit' (ID: 27737)
  Prédit: 'else'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'else' → logprob: -0.0588461235165596
    2. '
' → logprob: -3.4338462352752686
    3. '\n' → logprob: -4.3088459968566895
    4. 'elif' → logprob: -5.3088459968566895
    5. ' else' → logprob: -5.6838459968566895
    6. '   ' → logprob: -6.9338459968566895
    7. 'exit' → logprob: -7.4338459968566895
    8. '    
' → logprob: -7.4338459968566895
    9. '  
' → logprob: -8.808846473693848
    10. '```' → logprob: -8.933846473693848

Token 44: '()

' (ID: 5874)
  Prédit: '()'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '()' → logprob: -0.03496979549527168
    2. '()
' → logprob: -3.9099698066711426
    3. '()

' → logprob: -4.659969806671143
    4. '(' → logprob: -5.409969806671143
    5. '(
' → logprob: -8.909969329833984
    6. '(

' → logprob: -9.409969329833984
    7. '()


' → logprob: -9.784969329833984
    8. '()\' → logprob: -10.409969329833984
    9. ' ()' → logprob: -10.659969329833984
    10. '()
' → logprob: -11.034969329833984

Token 45: 'n' (ID: 77)
  Prédit: 's'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 's' → logprob: -1.4063225984573364
    2. 'else' → logprob: -2.031322479248047
    3. 'result' → logprob: -2.156322479248047
    4. 'n' → logprob: -2.156322479248047
    5. 'elif' → logprob: -2.406322479248047
    6. 'count' → logprob: -3.031322479248047
    7. '```' → logprob: -3.156322479248047
    8. 'i' → logprob: -3.281322479248047
    9. 'x' → logprob: -3.656322479248047
    10. 'for' → logprob: -3.906322479248047

Token 46: ' =' (ID: 314)
  Prédit: ' **'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' **' → logprob: -1.3816545009613037
    2. '-' → logprob: -1.7566545009613037
    3. '%' → logprob: -1.8816545009613037
    4. ' %' → logprob: -2.0066545009613037
    5. ' ' → logprob: -2.2566545009613037
    6. '**' → logprob: -2.7566545009613037
    7. ',' → logprob: -3.5066545009613037
    8. ' *' → logprob: -3.6316545009613037
    9. '*' → logprob: -4.131654739379883
    10. ' =' → logprob: -5.006654739379883

Token 47: ' n' (ID: 297)
  Prédit: ' n'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' n' → logprob: -0.20640482008457184
    2. 'n' → logprob: -2.5814049243927
    3. ' k' → logprob: -2.8314049243927
    4. ' min' → logprob: -4.331404685974121
    5. ' ' → logprob: -4.456404685974121
    6. 'k' → logprob: -4.581404685974121
    7. ' max' → logprob: -5.331404685974121
    8. 'min' → logprob: -5.956404685974121
    9. ' int' → logprob: -6.081404685974121
    10. '1' → logprob: -6.706404685974121

Token 48: ' %' (ID: 1851)
  Prédit: '-'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '-' → logprob: -0.806340217590332
    2. ' -' → logprob: -1.056340217590332
    3. ' %' → logprob: -2.431340217590332
    4. '%' → logprob: -2.556340217590332
    5. '+' → logprob: -3.806340217590332
    6. ' +' → logprob: -4.931340217590332
    7. ' *' → logprob: -5.556340217590332
    8. ' ' → logprob: -5.806340217590332
    9. ' **' → logprob: -6.681340217590332
    10. '<|end|>' → logprob: -7.431340217590332

Token 49: ' k' (ID: 372)
  Prédit: 'k'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'k' → logprob: -0.0005088301841169596
    2. '100' → logprob: -8.500509262084961
    3. '(k' → logprob: -9.375509262084961
    4. '10' → logprob: -9.750509262084961
    5. '2' → logprob: -10.125509262084961
    6. '6' → logprob: -10.375509262084961
    7. '(' → logprob: -10.500509262084961
    8. '9' → logprob: -11.750509262084961
    9. '998' → logprob: -12.000509262084961
    10. '202' → logprob: -12.000509262084961

Token 50: ' ' (ID: 220)
  Prédit: '+'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '+' → logprob: -1.3004871606826782
    2. '**' → logprob: -1.8004871606826782
    3. '*' → logprob: -2.3004870414733887
    4. '
' → logprob: -2.6754870414733887
    5. 'for' → logprob: -2.6754870414733887
    6. 'if' → logprob: -2.9254870414733887
    7. '#' → logprob: -3.0504870414733887
    8. '%' → logprob: -3.3004870414733887
    9. ' ' → logprob: -3.4254870414733887
    10. 'n' → logprob: -3.5504870414733887

Token 51: ' #' (ID: 1069)
  Prédit: 'if'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'if' → logprob: -0.1824181079864502
    2. '
' → logprob: -3.18241810798645
    3. '+' → logprob: -3.30741810798645
    4. ' if' → logprob: -3.55741810798645
    5. '==' → logprob: -4.057417869567871
    6. '#' → logprob: -4.932417869567871
    7. 'print' → logprob: -5.057417869567871
    8. '*' → logprob: -5.182417869567871
    9. '**' → logprob: -5.182417869567871
    10. 'n' → logprob: -5.307417869567871

Token 52: ' je' (ID: 1264)
  Prédit: ' k'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' k' → logprob: -0.4594135880470276
    2. ' n' → logprob: -1.5844135284423828
    3. 'k' → logprob: -2.334413528442383
    4. 'n' → logprob: -3.584413528442383
    5. ' ' → logprob: -5.084413528442383
    6. ' on' → logprob: -5.334413528442383
    7. '...' → logprob: -5.834413528442383
    8. ' La' → logprob: -6.459413528442383
    9. ' Si' → logprob: -6.584413528442383
    10. 'On' → logprob: -6.584413528442383

Token 53: ' crois' (ID: 65485)
  Prédit: 'continue'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'continue' → logprob: -1.0744112730026245
    2. ' continue' → logprob: -1.6994112730026245
    3. 's' → logprob: -2.199411392211914
    4. 'veux' → logprob: -2.574411392211914
    5. 'n' → logprob: -2.949411392211914
    6. 'm' → logprob: -3.699411392211914
    7. 'repr' → logprob: -3.949411392211914
    8. 'voud' → logprob: -4.074411392211914
    9. ' prends' → logprob: -4.199411392211914
    10. 'ne' → logprob: -4.324411392211914

Token 54: ' qu' (ID: 474)
  Prédit: ' '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' ' → logprob: -0.9576879143714905
    2. ',' → logprob: -1.4576878547668457
    3. '<|end|>' → logprob: -1.5826878547668457
    4. '.' → logprob: -3.3326878547668457
    5. '```' → logprob: -3.4576878547668457
    6. 'n' → logprob: -4.082687854766846
    7. ' that' → logprob: -4.582687854766846
    8. '`' → logprob: -4.582687854766846
    9. '<|end|>' → logprob: -4.582687854766846
    10. ')' → logprob: -5.082687854766846

Token 55: ''il' (ID: 14683)
  Prédit: 'que'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'que' → logprob: -1.2426189184188843
    2. ' que' → logprob: -1.4926189184188843
    3. 'e' → logprob: -1.7426189184188843
    4. ''' → logprob: -1.9926189184188843
    5. ''il' → logprob: -2.242619037628174
    6. '```' → logprob: -3.992619037628174
    7. 'qu' → logprob: -4.367619037628174
    8. ' qu' → logprob: -4.617619037628174
    9. '`' → logprob: -4.867619037628174
    10. ' ' → logprob: -5.242619037628174

Token 56: ' faut' (ID: 17821)
  Prédit: 'f'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'f' → logprob: -0.34553512930870056
    2. ' n' → logprob: -1.720535159111023
    3. 'n' → logprob: -3.0955350399017334
    4. ' faut' → logprob: -3.5955350399017334
    5. ' manque' → logprob: -4.3455352783203125
    6. ' y' → logprob: -4.9705352783203125
    7. 'y' → logprob: -5.3455352783203125
    8. 's' → logprob: -5.8455352783203125
    9. ' f' → logprob: -5.9705352783203125
    10. 'a' → logprob: -6.8455352783203125

Token 57: ' réduire' (ID: 78295)
  Prédit: 'faire'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'faire' → logprob: -1.555135726928711
    2. 'penser' → logprob: -2.305135726928711
    3. 'aj' → logprob: -2.555135726928711
    4. 'contin' → logprob: -2.555135726928711
    5. 'prendre' → logprob: -3.180135726928711
    6. 'calcul' → logprob: -3.305135726928711
    7. 'just' → logprob: -3.555135726928711
    8. 'div' → logprob: -3.555135726928711
    9. ' faire' → logprob: -3.930135726928711
    10. 'mettre' → logprob: -4.055135726928711

Token 58: ' ?
' (ID: 19740)
  Prédit: 'n'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'n' → logprob: -1.258929967880249
    2. 'if' → logprob: -1.758929967880249
    3. ' if' → logprob: -1.883929967880249
    4. ' ' → logprob: -1.883929967880249
    5. ' n' → logprob: -2.133929967880249
    6. '<|end|>' → logprob: -3.383929967880249
    7. ',' → logprob: -4.633930206298828
    8. '0' → logprob: -5.008930206298828
    9. 's' → logprob: -5.133930206298828
    10. ' 

' → logprob: -5.258930206298828

Token 59: '#' (ID: 2)
  Prédit: 'if'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'if' → logprob: -0.21688511967658997
    2. 'count' → logprob: -3.2168850898742676
    3. 'result' → logprob: -3.3418850898742676
    4. 'i' → logprob: -3.8418850898742676
    5. 'for' → logprob: -3.9668850898742676
    6. 'while' → logprob: -4.341885089874268
    7. 'n' → logprob: -4.841885089874268
    8. 'print' → logprob: -4.966885089874268
    9. '#' → logprob: -5.216885089874268
    10. ' if' → logprob: -5.466885089874268

Token 60: ' un' (ID: 537)
  Prédit: ' if'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' if' → logprob: -0.9682889580726624
    2. 'if' → logprob: -1.4682888984680176
    3. ' for' → logprob: -2.5932888984680176
    4. ' ' → logprob: -2.5932888984680176
    5. 'print' → logprob: -3.0932888984680176
    6. 'for' → logprob: -3.3432888984680176
    7. 'n' → logprob: -3.3432888984680176
    8. 'result' → logprob: -3.5932888984680176
    9. ' while' → logprob: -4.218288898468018
    10. ' n' → logprob: -4.343288898468018

Token 61: ' calcul' (ID: 7559)
  Prédit: 'e'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'e' → logprob: -0.8780274987220764
    2. '=' → logprob: -2.5030274391174316
    3. 'for' → logprob: -2.8780274391174316
    4. 'a' → logprob: -3.1280274391174316
    5. ' =' → logprob: -3.1280274391174316
    6. ' for' → logprob: -3.3780274391174316
    7. 'if' → logprob: -4.003027439117432
    8. 'i' → logprob: -4.128027439117432
    9. ' max' → logprob: -4.128027439117432
    10. 'def' → logprob: -4.253027439117432

Token 62: ',' (ID: 11)
  Prédit: 'result'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'result' → logprob: -1.34377920627594
    2. '+' → logprob: -1.71877920627594
    3. 's' → logprob: -1.71877920627594
    4. '_' → logprob: -2.0937790870666504
    5. '=' → logprob: -2.8437790870666504
    6. ' =' → logprob: -3.5937790870666504
    7. 'res' → logprob: -3.9687790870666504
    8. 'n' → logprob: -4.46877908706665
    9. 'possible' → logprob: -4.46877908706665
    10. 'for' → logprob: -4.59377908706665

Token 63: ' pas' (ID: 2173)
  Prédit: ' ans'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' ans' → logprob: -1.4794268608093262
    2. ' res' → logprob: -1.9794268608093262
    3. ' result' → logprob: -1.9794268608093262
    4. 'result' → logprob: -2.104426860809326
    5. ' ' → logprob: -2.479426860809326
    6. 'res' → logprob: -2.979426860809326
    7. ' n' → logprob: -3.604426860809326
    8. ' s' → logprob: -4.104426860809326
    9. ' i' → logprob: -4.104426860809326
    10. ' for' → logprob: -4.229426860809326

Token 64: ' hyper' (ID: 22725)
  Prédit: '#'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '#' → logprob: -1.947479009628296
    2. ' ' → logprob: -2.447479009628296
    3. 'for' → logprob: -2.572479009628296
    4. 'une' → logprob: -2.697479009628296
    5. ' un' → logprob: -2.697479009628296
    6. 'à' → logprob: -2.947479009628296
    7. 'un' → logprob: -2.947479009628296
    8. 's' → logprob: -3.197479009628296
    9. 'que' → logprob: -3.197479009628296
    10. 'de' → logprob: -3.447479009628296

Token 65: ' lis' (ID: 20784)
  Prédit: ' trivial'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' trivial' → logprob: -1.2929177284240723
    2. ' compliqué' → logprob: -2.0429177284240723
    3. ' évident' → logprob: -2.5429177284240723
    4. 'com' → logprob: -2.9179177284240723
    5. ' clair' → logprob: -2.9179177284240723
    6. 'complex' → logprob: -2.9179177284240723
    7. 'conv' → logprob: -3.1679177284240723
    8. 'optim' → logprob: -3.4179177284240723
    9. ' complexe' → logprob: -3.5429177284240723
    10. ' simple' → logprob: -3.6679177284240723

Token 66: 'ible' (ID: 1430)
  Prédit: 'ible'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'ible' → logprob: -1.0388412475585938
    2. 'ble' → logprob: -1.1638412475585938
    3. 'te' → logprob: -1.4138412475585938
    4. 'b' → logprob: -2.9138412475585938
    5. 'bre' → logprob: -3.5388412475585938
    6. 'sible' → logprob: -6.538841247558594
    7. 'de' → logprob: -7.538841247558594
    8. 't' → logprob: -7.663841247558594
    9. '```' → logprob: -7.663841247558594
    10. 'd' → logprob: -7.788841247558594

Token 67: ' à' (ID: 1221)
  Prédit: 'result'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'result' → logprob: -1.3722692728042603
    2. 's' → logprob: -1.8722692728042603
    3. 'res' → logprob: -2.1222691535949707
    4. ' for' → logprob: -2.9972691535949707
    5. 'def' → logprob: -3.2472691535949707
    6. 'i' → logprob: -3.2472691535949707
    7. ' result' → logprob: -3.3722691535949707
    8. 'for' → logprob: -3.6222691535949707
    9. '=' → logprob: -3.8722691535949707
    10. ' res' → logprob: -3.9972691535949707

Token 68: ' vrai' (ID: 42682)
  Prédit: 'faire'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'faire' → logprob: -0.14550666511058807
    2. 'part' → logprob: -2.8955066204071045
    3. 'com' → logprob: -4.395506858825684
    4. 'base' → logprob: -4.520506858825684
    5. 'cause' → logprob: -4.770506858825684
    6. 'su' → logprob: -4.770506858825684
    7. 'l' → logprob: -4.895506858825684
    8. 'f' → logprob: -4.895506858825684
    9. 'la' → logprob: -5.770506858825684
    10. 'é' → logprob: -5.895506858825684

Token 69: ' dire' (ID: 4071)
  Prédit: 'e'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'e' → logprob: -0.761874258518219
    2. 'ible' → logprob: -2.511874198913574
    3. 'ement' → logprob: -2.636874198913574
    4. '(e' → logprob: -2.761874198913574
    5. 'iable' → logprob: -2.886874198913574
    6. 'ble' → logprob: -3.011874198913574
    7. 'n' → logprob: -3.636874198913574
    8. ')' → logprob: -4.011874198913574
    9. '#' → logprob: -4.136874198913574
    10. 'able' → logprob: -4.386874198913574

Token 70: ' mais' (ID: 2899)
  Prédit: 'result'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'result' → logprob: -0.44634315371513367
    2. ',' → logprob: -2.446343183517456
    3. '```' → logprob: -3.071343183517456
    4. 's' → logprob: -3.571343183517456
    5. ' result' → logprob: -3.696343183517456
    6. ' ' → logprob: -3.946343183517456
    7. ':' → logprob: -4.071342945098877
    8. 'print' → logprob: -4.321342945098877
    9. 'n' → logprob: -4.571342945098877
    10. 'def' → logprob: -4.696342945098877

Token 71: ' ça' (ID: 13590)
  Prédit: ' n'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' n' → logprob: -0.07777329534292221
    2. ' ' → logprob: -3.827773332595825
    3. 'n' → logprob: -4.202773094177246
    4. ' k' → logprob: -4.827773094177246
    5. ' pow' → logprob: -5.327773094177246
    6. ' (' → logprob: -5.827773094177246
    7. ' result' → logprob: -5.952773094177246
    8. ' sum' → logprob: -6.077773094177246
    9. ' if' → logprob: -6.077773094177246
    10. ' for' → logprob: -6.327773094177246

Token 72: ' marche' (ID: 58191)
  Prédit: ' n'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' n' → logprob: -1.1601982116699219
    2. ':' → logprob: -1.9101982116699219
    3. ',' → logprob: -2.035198211669922
    4. ' =' → logprob: -2.910198211669922
    5. 'n' → logprob: -3.535198211669922
    6. 'print' → logprob: -3.535198211669922
    7. '=' → logprob: -3.785198211669922
    8. ' semble' → logprob: -3.785198211669922
    9. 's' → logprob: -3.910198211669922
    10. '```' → logprob: -4.160198211669922

Token 73: '
' (ID: 198)
  Prédit: 'print'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'print' → logprob: -0.6953797340393066
    2. 'result' → logprob: -1.0703797340393066
    3. 'res' → logprob: -2.5703797340393066
    4. 'answer' → logprob: -3.9453797340393066
    5. 'ans' → logprob: -4.320379734039307
    6. ' ans' → logprob: -4.570379734039307
    7. 's' → logprob: -5.320379734039307
    8. 'r' → logprob: -5.445379734039307
    9. ' result' → logprob: -5.695379734039307
    10. ' print' → logprob: -5.820379734039307

Token 74: 'print' (ID: 1598)
  Prédit: 'print'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'print' → logprob: -0.017774449661374092
    2. 'result' → logprob: -4.26777458190918
    3. '```' → logprob: -7.01777458190918
    4. 'else' → logprob: -7.14277458190918
    5. 'ans' → logprob: -8.26777458190918
    6. 'res' → logprob: -8.39277458190918
    7. ' print' → logprob: -8.39277458190918
    8. 'answer' → logprob: -8.51777458190918
    9. 'r' → logprob: -8.76777458190918
    10. 'n' → logprob: -9.14277458190918

Token 75: '(min' (ID: 26035)
  Prédit: '(('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '((' → logprob: -0.3176576495170593
    2. '(' → logprob: -1.942657709121704
    3. '(pow' → logprob: -2.817657709121704
    4. '(n' → logprob: -3.192657709121704
    5. '(((' → logprob: -4.067657470703125
    6. '(k' → logprob: -4.942657470703125
    7. '(sum' → logprob: -6.317657470703125
    8. '(min' → logprob: -7.817657470703125
    9. '((((' → logprob: -7.817657470703125
    10. 'pow' → logprob: -8.192657470703125

Token 76: '(n' (ID: 2406)
  Prédit: '(n'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(n' → logprob: -0.020840350538492203
    2. '(k' → logprob: -4.395840167999268
    3. '(' → logprob: -4.895840167999268
    4. '((' → logprob: -7.520840167999268
    5. '(abs' → logprob: -8.645840644836426
    6. '(min' → logprob: -10.020840644836426
    7. '(pow' → logprob: -11.395840644836426
    8. '(s' → logprob: -11.645840644836426
    9. 'n' → logprob: -11.895840644836426
    10. '(j' → logprob: -12.395840644836426

Token 77: ',' (ID: 11)
  Prédit: ','
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ',' → logprob: -0.0172561164945364
    2. ',k' → logprob: -4.142256259918213
    3. ' ,' → logprob: -6.892256259918213
    4. '*k' → logprob: -8.642255783081055
    5. '-' → logprob: -11.892255783081055
    6. '*' → logprob: -12.392255783081055
    7. 'k' → logprob: -12.392255783081055
    8. ',(' → logprob: -12.517255783081055
    9. ' *' → logprob: -12.892255783081055
    10. ' k' → logprob: -13.017255783081055

Token 78: ' abs' (ID: 8443)
  Prédit: 'k'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'k' → logprob: -0.35052424669265747
    2. ' k' → logprob: -1.2255241870880127
    3. 'abs' → logprob: -6.350524425506592
    4. ' abs' → logprob: -8.350523948669434
    5. ' ' → logprob: -10.225523948669434
    6. ')' → logprob: -10.975523948669434
    7. '(k' → logprob: -10.975523948669434
    8. '-k' → logprob: -11.850523948669434
    9. '1' → logprob: -13.100523948669434
    10. '	k' → logprob: -13.100523948669434

Token 79: '(n' (ID: 2406)
  Prédit: '(k'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(k' → logprob: -0.31535038352012634
    2. '(n' → logprob: -1.3153504133224487
    3. '(' → logprob: -6.565350532531738
    4. 'n' → logprob: -8.065350532531738
    5. 'k' → logprob: -8.065350532531738
    6. '((' → logprob: -10.190350532531738
    7. ' k' → logprob: -12.815350532531738
    8. '(-' → logprob: -13.065350532531738
    9. ' n' → logprob: -13.190350532531738
    10. '	k' → logprob: -13.940350532531738

Token 80: '-k' (ID: 10897)
  Prédit: '-k'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '-k' → logprob: -0.6805429458618164
    2. ' -' → logprob: -1.1805429458618164
    3. '-' → logprob: -1.6805429458618164
    4. '-n' → logprob: -9.680542945861816
    5. ' ' → logprob: -9.805542945861816
    6. ' k' → logprob: -10.555542945861816
    7. '-(' → logprob: -10.680542945861816
    8. '-)' → logprob: -10.680542945861816
    9. '-
' → logprob: -10.930542945861816
    10. 'k' → logprob: -11.368042945861816

Token 81: ')))' (ID: 15975)
  Prédit: ')))'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')))' → logprob: -0.009944374673068523
    2. ')' → logprob: -4.634944438934326
    3. '))' → logprob: -8.759943962097168
    4. ')))
' → logprob: -11.259943962097168
    5. ' ' → logprob: -11.759943962097168
    6. '))))' → logprob: -12.384943962097168
    7. '),' → logprob: -12.884943962097168
    8. ')));' → logprob: -14.009943962097168
    9. '())))' → logprob: -14.134943962097168
    10. ' )' → logprob: -14.634943962097168


RÉSUMÉ:
--------------------------------------------------------------------------------
Total des tokens analysés: 79
Tokens correctement prédits (1ère position, stricte): 20
Tokens correctement prédits (1ère position, avec adaptation): 20
Tokens correctement prédits (top 10): 40
Précision stricte (1ère position): 25.32%
Précision adaptée (1ère position): 25.32%
Précision (top 10): 50.63%
================================================================================
