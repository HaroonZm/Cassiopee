================================================================================
ANALYSE DE PRÉDICTION TOKEN PAR TOKEN (BATCH API)
Date: 2025-06-04 20:06:40
Modèle de tokenisation: gpt-4o-mini
================================================================================

SCRIPT ANALYSÉ:
--------------------------------------------------------------------------------
N = int(input())
if N == 1:
    print("Hello World")
else:
    if N == 2:
        A = int(input())
        B = int(input())
        print(A + B)
--------------------------------------------------------------------------------

RÉSULTATS D'ANALYSE TOKEN PAR TOKEN:
--------------------------------------------------------------------------------
Token 0: 'N' (ID: 45)
  → Token d'amorce (pas de prédiction)

Token 1: ' =' (ID: 314)
  → Token d'amorce (pas de prédiction)

Token 2: ' int' (ID: 677)
  → Token d'amorce (pas de prédiction)

Token 3: '(input' (ID: 10054)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(' → logprob: -0.00035786881926469505
    2. '('' → logprob: -8.750357627868652
    3. '(N' → logprob: -9.125357627868652
    4. ''' → logprob: -11.000357627868652
    5. '(input' → logprob: -11.125357627868652
    6. '(
' → logprob: -11.250357627868652
    7. '()' → logprob: -11.375357627868652
    8. '("("' → logprob: -11.375357627868652
    9. '```' → logprob: -12.125357627868652
    10. '(`' → logprob: -12.375357627868652

Token 4: '())
' (ID: 4574)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '(' → logprob: -0.4828980565071106
    2. ')' → logprob: -0.9828980565071106
    3. '()' → logprob: -5.107898235321045
    4. '())' → logprob: -6.607898235321045
    5. '(
' → logprob: -7.732898235321045
    6. '```' → logprob: -8.732897758483887
    7. '))' → logprob: -9.107897758483887
    8. '")' → logprob: -9.357897758483887
    9. '')' → logprob: -9.482897758483887
    10. '(

' → logprob: -9.857897758483887

Token 5: 'if' (ID: 366)
  Prédit: 'if'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'if' → logprob: -1.8320107460021973
    2. 'for' → logprob: -1.8320107460021973
    3. 'a' → logprob: -2.0820107460021973
    4. 's' → logprob: -2.2070107460021973
    5. '*' → logprob: -2.5820107460021973
    6. ''' → logprob: -2.8320107460021973
    7. '#' → logprob: -3.2070107460021973
    8. ')' → logprob: -3.2070107460021973
    9. 'i' → logprob: -3.3320107460021973
    10. 'x' → logprob: -3.3320107460021973

Token 6: ' N' (ID: 478)
  Prédit: ' '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' ' → logprob: -0.10060851275920868
    2. ' N' → logprob: -2.3506085872650146
    3. '  ' → logprob: -8.350608825683594
    4. 'N' → logprob: -9.725608825683594
    5. ''' → logprob: -10.100608825683594
    6. ' "' → logprob: -11.600608825683594
    7. '"' → logprob: -11.725608825683594
    8. ' not' → logprob: -11.725608825683594
    9. ' a' → logprob: -11.725608825683594
    10. ' ' → logprob: -11.975608825683594

Token 7: ' ==' (ID: 951)
  Prédit: ' >'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' >' → logprob: -0.09765941649675369
    2. '>' → logprob: -3.3476593494415283
    3. ' ' → logprob: -3.5976593494415283
    4. ' <' → logprob: -4.347659587860107
    5. ' >=' → logprob: -4.722659587860107
    6. ' %' → logprob: -5.847659587860107
    7. ' ==' → logprob: -6.222659587860107
    8. ' <=' → logprob: -6.972659587860107
    9. '%' → logprob: -7.097659587860107
    10. '<' → logprob: -7.222659587860107

Token 8: ' ' (ID: 220)
  Prédit: ' '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' ' → logprob: -0.1014222651720047
    2. '0' → logprob: -2.6014223098754883
    3. '1' → logprob: -3.8514223098754883
    4. ''' → logprob: -7.601422309875488
    5. '2' → logprob: -9.226422309875488
    6. '"' → logprob: -9.476422309875488
    7. '4' → logprob: -9.601422309875488
    8. '3' → logprob: -9.726422309875488
    9. '10' → logprob: -10.101422309875488
    10. ' )' → logprob: -10.726422309875488

Token 9: '1' (ID: 16)
  Prédit: '0'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '0' → logprob: -0.1723819226026535
    2. '1' → logprob: -2.42238187789917
    3. ' ' → logprob: -2.67238187789917
    4. '2' → logprob: -8.547382354736328
    5. '3' → logprob: -9.047382354736328
    6. '10' → logprob: -9.297382354736328
    7. '4' → logprob: -9.922382354736328
    8. '5' → logprob: -10.297382354736328
    9. ''' → logprob: -11.422382354736328
    10. '100' → logprob: -11.547382354736328

Token 10: ':
' (ID: 734)
  Prédit: ':'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ':' → logprob: -2.5776860184123507e-06
    2. ':**' → logprob: -13.50000286102295
    3. ':
' → logprob: -14.75000286102295
    4. ' :' → logprob: -15.25000286102295
    5. ':return' → logprob: -16.125001907348633
    6. '':'' → logprob: -16.375001907348633
    7. '':' → logprob: -16.875001907348633
    8. '):' → logprob: -16.875001907348633
    9. '():' → logprob: -17.000001907348633
    10. '>:' → logprob: -17.250001907348633

Token 11: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.19690310955047607
    2. '\n' → logprob: -2.4469032287597656
    3. ':' → logprob: -3.4469032287597656
    4. '\' → logprob: -3.5719032287597656
    5. ' print' → logprob: -4.321903228759766
    6. '    ' → logprob: -4.571903228759766
    7. 'print' → logprob: -5.571903228759766
    8. ' ' → logprob: -6.696903228759766
    9. ' \' → logprob: -7.321903228759766
    10. ''' → logprob: -7.321903228759766

Token 12: ' print' (ID: 2123)
  Prédit: ' print'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' print' → logprob: -0.16954770684242249
    2. 'print' (adapté à ' print') → logprob: -1.9195476770401
    3. '   ' → logprob: -5.7945475578308105
    4. ' pass' → logprob: -6.1695475578308105
    5. '    ' → logprob: -6.2945475578308105
    6. ' ' → logprob: -7.4195475578308105
    7. ''' → logprob: -7.5445475578308105
    8. ' \' → logprob: -7.6695475578308105
    9. '\n' → logprob: -8.794548034667969
    10. 'pass' → logprob: -8.794548034667969

Token 13: '("' (ID: 568)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(' → logprob: -0.0016342396847903728
    2. '('' → logprob: -6.876634120941162
    3. '("("' → logprob: -7.626634120941162
    4. '("' → logprob: -9.37663459777832
    5. '()' → logprob: -10.87663459777832
    6. '("")' → logprob: -12.62663459777832
    7. '("""' → logprob: -13.00163459777832
    8. '(True' → logprob: -13.75163459777832
    9. '(
' → logprob: -14.25163459777832
    10. '(N' → logprob: -14.62663459777832

Token 14: 'Hello' (ID: 13225)
  Prédit: 'Hello'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'Hello' → logprob: -0.3368755280971527
    2. '1' → logprob: -1.586875557899475
    3. '0' → logprob: -3.3368754386901855
    4. 'Yes' → logprob: -4.4618754386901855
    5. '"' → logprob: -4.8368754386901855
    6. 'YES' → logprob: -5.3368754386901855
    7. 'hello' → logprob: -5.8368754386901855
    8. 'One' → logprob: -6.0868754386901855
    9. 'No' → logprob: -6.2118754386901855
    10. 'one' → logprob: -6.3368754386901855

Token 15: ' World' (ID: 5922)
  Prédit: '")'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '")' → logprob: -0.10345888882875443
    2. ')' → logprob: -2.853458881378174
    3. ')")' → logprob: -4.228458881378174
    4. '!")' → logprob: -4.603458881378174
    5. ' World' → logprob: -4.853458881378174
    6. 'World' → logprob: -5.478458881378174
    7. ',' → logprob: -5.978458881378174
    8. ' ")' → logprob: -6.728458881378174
    9. ' world' → logprob: -9.103459358215332
    10. ' )' → logprob: -9.603459358215332

Token 16: '")
' (ID: 1896)
  Prédit: '")'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '")' → logprob: -0.005296958144754171
    2. '!")' → logprob: -5.2552971839904785
    3. ')' → logprob: -10.25529670715332
    4. '")
' → logprob: -11.13029670715332
    5. ')")' → logprob: -11.75529670715332
    6. '"' → logprob: -13.13029670715332
    7. '\")' → logprob: -13.75529670715332
    8. '")
' → logprob: -14.00529670715332
    9. '!)' → logprob: -14.75529670715332
    10. '!' → logprob: -15.38029670715332

Token 17: 'else' (ID: 2807)
  Prédit: 'else'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'else' → logprob: -0.009312349371612072
    2. ' else' → logprob: -5.009312152862549
    3. 'elif' → logprob: -6.259312152862549
    4. '```' → logprob: -7.384312152862549
    5. '#else' → logprob: -11.509312629699707
    6. '    
' → logprob: -11.509312629699707
    7. '\n' → logprob: -11.634312629699707
    8. ')' → logprob: -12.009312629699707
    9. '
' → logprob: -12.134312629699707
    10. '_else' → logprob: -12.259312629699707

Token 18: ':
' (ID: 734)
  Prédit: ':'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ':' → logprob: -4.60414821645827e-06
    2. ' :' → logprob: -13.000004768371582
    3. ':**' → logprob: -14.250004768371582
    4. '):' → logprob: -14.500004768371582
    5. '():' → logprob: -15.000004768371582
    6. '   ' → logprob: -15.375004768371582
    7. ':
' → logprob: -15.875004768371582
    8. '```' → logprob: -16.250003814697266
    9. ':def' → logprob: -16.750003814697266
    10. ':return' → logprob: -16.875003814697266

Token 19: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.06596800684928894
    2. '    ' → logprob: -2.9409680366516113
    3. '    
' → logprob: -5.315968036651611
    4. '<|end|>' → logprob: -6.315968036651611
    5. '```' → logprob: -6.440968036651611
    6. ' print' → logprob: -6.940968036651611
    7. 'print' → logprob: -6.940968036651611
    8. ' ' → logprob: -8.690967559814453
    9. '       ' → logprob: -9.440967559814453
    10. '     ' → logprob: -9.440967559814453

Token 20: ' if' (ID: 538)
  Prédit: 'print'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'print' → logprob: -0.5892264246940613
    2. '   ' → logprob: -1.214226484298706
    3. ' print' → logprob: -2.089226484298706
    4. ' for' → logprob: -4.589226245880127
    5. '    ' → logprob: -4.839226245880127
    6. 'for' → logprob: -5.214226245880127
    7. '```' → logprob: -7.339226245880127
    8. 'sum' → logprob: -9.339226722717285
    9. ' ' → logprob: -9.589226722717285
    10. ' sum' → logprob: -10.339226722717285

Token 21: ' N' (ID: 478)
  Prédit: ' N'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' N' → logprob: -0.0073233554139733315
    2. ' ' → logprob: -5.132323265075684
    3. 'N' → logprob: -6.632323265075684
    4. ' ' → logprob: -9.882323265075684
    5. '<|end|>' → logprob: -12.257323265075684
    6. '  ' → logprob: -12.507323265075684
    7. ' isinstance' → logprob: -12.757323265075684
    8. ')' → logprob: -12.757323265075684
    9. '    ' → logprob: -13.382323265075684
    10. ' (' → logprob: -13.757323265075684

Token 22: ' ==' (ID: 951)
  Prédit: ' =='
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' ==' → logprob: -0.5683231353759766
    2. ' >' → logprob: -1.1933231353759766
    3. '==' → logprob: -2.6933231353759766
    4. '>' → logprob: -3.5683231353759766
    5. '%' → logprob: -3.9433231353759766
    6. ' %' → logprob: -4.693323135375977
    7. ' !=' → logprob: -5.693323135375977
    8. ' ' → logprob: -6.693323135375977
    9. ' <' → logprob: -7.943323135375977
    10. ' >=' → logprob: -8.318323135375977

Token 23: ' ' (ID: 220)
  Prédit: ' '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' ' → logprob: -0.06256818026304245
    2. '2' → logprob: -2.812568187713623
    3. '0' → logprob: -7.562568187713623
    4. '    ' → logprob: -10.812567710876465
    5. '1' → logprob: -11.187567710876465
    6. '10' → logprob: -11.687567710876465
    7. '3' → logprob: -11.687567710876465
    8. '  ' → logprob: -12.625067710876465
    9. '20' → logprob: -12.875067710876465
    10. '6' → logprob: -13.125067710876465

Token 24: '2' (ID: 17)
  Prédit: '2'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '2' → logprob: -0.0028349461499601603
    2. ' ' → logprob: -6.127834796905518
    3. '0' → logprob: -8.252835273742676
    4. '```' → logprob: -8.502835273742676
    5. '100' → logprob: -10.002835273742676
    6. '3' → logprob: -10.127835273742676
    7. '``' → logprob: -10.502835273742676
    8. '1' → logprob: -10.502835273742676
    9. '    
' → logprob: -12.252835273742676
    10. '   ' → logprob: -12.315335273742676

Token 25: ':
' (ID: 734)
  Prédit: ':'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ':' → logprob: -0.00019483851792756468
    2. ':
' → logprob: -8.875194549560547
    3. '       ' → logprob: -10.875194549560547
    4. '):' → logprob: -11.250194549560547
    5. ' :' → logprob: -11.375194549560547
    6. '   ' → logprob: -12.375194549560547
    7. '():' → logprob: -12.875194549560547
    8. '    ' → logprob: -13.375194549560547
    9. ':**' → logprob: -14.375194549560547
    10. ':

' → logprob: -14.750194549560547

Token 26: '       ' (ID: 309)
  Prédit: '       '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '       ' → logprob: -0.0044914777390658855
    2. 'print' → logprob: -6.129491329193115
    3. '   ' → logprob: -6.879491329193115
    4. ' print' → logprob: -7.504491329193115
    5. '    ' → logprob: -8.129491806030273
    6. '        ' → logprob: -8.879491806030273
    7. '     ' → logprob: -9.629491806030273
    8. '      ' → logprob: -9.879491806030273
    9. '```' → logprob: -10.129491806030273
    10. ' ' → logprob: -10.629491806030273

Token 27: ' A' (ID: 355)
  Prédit: 'print'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'print' → logprob: -0.6622109413146973
    2. ' print' → logprob: -0.7872109413146973
    3. '           ' → logprob: -3.9122109413146973
    4. '        ' → logprob: -5.412210941314697
    5. ' ' → logprob: -7.162210941314697
    6. '```' → logprob: -7.787210941314697
    7. '       ' → logprob: -7.912210941314697
    8. ' x' → logprob: -8.037210464477539
    9. ' for' → logprob: -8.037210464477539
    10. '   ' → logprob: -8.162210464477539

Token 28: ' =' (ID: 314)
  Prédit: ' ='
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' =' → logprob: -0.11603295058012009
    2. ',' → logprob: -2.866032838821411
    3. '=' → logprob: -3.616032838821411
    4. '=int' → logprob: -4.61603307723999
    5. '=input' → logprob: -5.61603307723999
    6. ',B' → logprob: -6.36603307723999
    7. ' B' → logprob: -6.36603307723999
    8. ' ' → logprob: -6.49103307723999
    9. ' +=' → logprob: -6.61603307723999
    10. 'B' → logprob: -6.61603307723999

Token 29: ' int' (ID: 677)
  Prédit: 'int'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'int' → logprob: -0.30239516496658325
    2. ' int' → logprob: -1.4273951053619385
    3. 'list' → logprob: -5.302395343780518
    4. ' list' → logprob: -5.427395343780518
    5. '[int' → logprob: -5.802395343780518
    6. 'input' → logprob: -6.052395343780518
    7. '[]' → logprob: -6.927395343780518
    8. ' input' → logprob: -6.927395343780518
    9. 'float' → logprob: -6.927395343780518
    10. ' []' → logprob: -7.302395343780518

Token 30: '(input' (ID: 10054)
  Prédit: '(input'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(input' → logprob: -0.06214895099401474
    2. '(' → logprob: -2.8121490478515625
    3. 'input' → logprob: -8.687149047851562
    4. ' input' → logprob: -12.437149047851562
    5. '()' → logprob: -12.562149047851562
    6. ' (' → logprob: -13.562149047851562
    7. '=input' → logprob: -13.687149047851562
    8. '(
' → logprob: -13.937149047851562
    9. ')' → logprob: -14.187149047851562
    10. ',input' → logprob: -15.437149047851562

Token 31: '())
' (ID: 4574)
  Prédit: '())'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '())' → logprob: -0.10031568259000778
    2. '()' → logprob: -2.350315570831299
    3. ')' → logprob: -9.975316047668457
    4. '())
' → logprob: -10.600316047668457
    5. '(' → logprob: -10.850316047668457
    6. '()
' → logprob: -11.850316047668457
    7. '("' → logprob: -12.975316047668457
    8. '()))' → logprob: -13.100316047668457
    9. '();)' → logprob: -13.600316047668457
    10. '().' → logprob: -13.725316047668457

Token 32: '       ' (ID: 309)
  Prédit: '       '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '       ' → logprob: -0.7528482675552368
    2. '<|end|>' → logprob: -0.7528482675552368
    3. ')' → logprob: -3.5028481483459473
    4. '<|end|>' → logprob: -4.627848148345947
    5. '
' → logprob: -5.502848148345947
    6. ' ' → logprob: -6.002848148345947
    7. '        ' → logprob: -6.002848148345947
    8. '   ' → logprob: -6.627848148345947
    9. 'else' → logprob: -6.752848148345947
    10. '        
' → logprob: -6.752848148345947

Token 33: ' B' (ID: 418)
  Prédit: 'B'
  Correct (stricte): False
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'B' (adapté à ' B') → logprob: -0.025008132681250572
    2. 'print' → logprob: -4.650008201599121
    3. ' B' → logprob: -4.650008201599121
    4. 'if' → logprob: -6.150008201599121
    5. '   ' → logprob: -7.275008201599121
    6. '       ' → logprob: -7.275008201599121
    7. ' if' → logprob: -7.525008201599121
    8. ' ' → logprob: -8.025008201599121
    9. '    ' → logprob: -8.275008201599121
    10. 'b' → logprob: -8.775008201599121

Token 34: ' =' (ID: 314)
  Prédit: ' ='
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' =' → logprob: -0.00267387623898685
    2. '=' → logprob: -6.127674102783203
    3. ' ' → logprob: -7.877674102783203
    4. '<|end|>' → logprob: -10.002674102783203
    5. ')' → logprob: -10.127674102783203
    6. ' )' → logprob: -12.252674102783203
    7. ' +=' → logprob: -12.502674102783203
    8. '<|end|>' → logprob: -12.627674102783203
    9. ' >' → logprob: -12.752674102783203
    10. ' ==' → logprob: -13.002674102783203

Token 35: ' int' (ID: 677)
  Prédit: ' int'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' int' → logprob: -0.06198202446103096
    2. 'int' → logprob: -2.8119819164276123
    3. '=int' → logprob: -11.561982154846191
    4. '(int' → logprob: -13.436982154846191
    5. '<int' → logprob: -13.561982154846191
    6. '[int' → logprob: -13.811982154846191
    7. ':int' → logprob: -15.561982154846191
    8. ' input' → logprob: -15.686982154846191
    9. ' ' → logprob: -15.686982154846191
    10. '	int' → logprob: -15.936982154846191

Token 36: '(input' (ID: 10054)
  Prédit: '(input'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(input' → logprob: -0.0004977479111403227
    2. '(' → logprob: -7.625497817993164
    3. ' (' → logprob: -12.000497817993164
    4. 'input' → logprob: -13.000497817993164
    5. '=input' → logprob: -14.500497817993164
    6. ' ' → logprob: -15.750497817993164
    7. '(int' → logprob: -15.750497817993164
    8. ' input' → logprob: -15.875497817993164
    9. '()' → logprob: -16.000497817993164
    10. ',input' → logprob: -16.500497817993164

Token 37: '())
' (ID: 4574)
  Prédit: '())'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '())' → logprob: -0.007378743030130863
    2. '()' → logprob: -5.007378578186035
    3. ')' → logprob: -7.382378578186035
    4. '())
' → logprob: -10.257378578186035
    5. '(' → logprob: -13.382378578186035
    6. ' ())' → logprob: -13.632378578186035
    7. '()
' → logprob: -13.757378578186035
    8. '())

' → logprob: -14.632378578186035
    9. '();)' → logprob: -14.632378578186035
    10. '())
' → logprob: -15.257378578186035

Token 38: '       ' (ID: 309)
  Prédit: '       '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '       ' → logprob: -0.0075465235859155655
    2. '<|end|>' → logprob: -5.132546424865723
    3. '        
' → logprob: -7.132546424865723
    4. '
' → logprob: -8.382546424865723
    5. 'print' → logprob: -9.007546424865723
    6. '   ' → logprob: -9.382546424865723
    7. '<|end|>' → logprob: -9.632546424865723
    8. ')' → logprob: -9.757546424865723
    9. '\n' → logprob: -9.882546424865723
    10. '        ' → logprob: -10.507546424865723

Token 39: ' print' (ID: 2123)
  Prédit: '       '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '       ' → logprob: -0.4560694098472595
    2. 'print' (adapté à ' print') → logprob: -1.0810694694519043
    3. ' print' → logprob: -3.9560694694519043
    4. '\n' → logprob: -5.581069469451904
    5. '<|end|>' → logprob: -6.581069469451904
    6. '
' → logprob: -7.331069469451904
    7. '   ' → logprob: -7.331069469451904
    8. '        
' → logprob: -8.581068992614746
    9. '           ' → logprob: -8.831068992614746
    10. ' ' → logprob: -8.831068992614746

Token 40: '(A' (ID: 10706)
  Prédit: '(A'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(A' → logprob: -0.28130197525024414
    2. '(' → logprob: -1.4063019752502441
    3. '("' → logprob: -9.281301498413086
    4. '('' → logprob: -10.656301498413086
    5. '(a' → logprob: -11.281301498413086
    6. '(B' → logprob: -12.656301498413086
    7. '(
' → logprob: -12.656301498413086
    8. '((' → logprob: -12.781301498413086
    9. ' (' → logprob: -12.906301498413086
    10. '()' → logprob: -13.156301498413086

Token 41: ' +' (ID: 659)
  Prédit: '+'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '+' → logprob: -0.03840039297938347
    2. ' +' → logprob: -3.288400411605835
    3. '+B' → logprob: -8.663400650024414
    4. ')' → logprob: -9.038400650024414
    5. '*' → logprob: -10.538400650024414
    6. '+)' → logprob: -11.163400650024414
    7. ' )' → logprob: -11.538400650024414
    8. ' ' → logprob: -11.663400650024414
    9. ' ,' → logprob: -13.038400650024414
    10. '-' → logprob: -13.663400650024414

Token 42: ' B' (ID: 418)
  Prédit: ' B'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' B' → logprob: -0.25202831625938416
    2. 'B' → logprob: -1.5020283460617065
    3. ' ' → logprob: -9.377028465270996
    4. ')' → logprob: -11.377028465270996
    5. '    ' → logprob: -13.877028465270996
    6. '<|end|>' → logprob: -14.002028465270996
    7. ' )' → logprob: -14.627028465270996
    8. '  ' → logprob: -15.127028465270996
    9. ''' → logprob: -15.627028465270996
    10. '	B' → logprob: -16.00202751159668

Token 43: ')' (ID: 8)
  Prédit: ')'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')' → logprob: -1.981667537620524e-06
    2. ')
' → logprob: -14.375001907348633
    3. ' )' → logprob: -14.625001907348633
    4. '`)' → logprob: -15.250001907348633
    5. '')' → logprob: -15.375001907348633
    6. '   ' → logprob: -15.500001907348633
    7. '")' → logprob: -16.375001907348633
    8. '))' → logprob: -16.500001907348633
    9. '）' → logprob: -17.250001907348633
    10. '```' → logprob: -17.875001907348633


RÉSUMÉ:
--------------------------------------------------------------------------------
Total des tokens analysés: 41
Tokens correctement prédits (1ère position, stricte): 22
Tokens correctement prédits (1ère position, avec adaptation): 23
Tokens correctement prédits (top 10): 38
Précision stricte (1ère position): 53.66%
Précision adaptée (1ère position): 56.10%
Précision (top 10): 92.68%
================================================================================
