================================================================================
ANALYSE DE PRÉDICTION TOKEN PAR TOKEN (BATCH API)
Date: 2025-06-04 19:56:49
Modèle de tokenisation: gpt-4o-mini
================================================================================

SCRIPT ANALYSÉ:
--------------------------------------------------------------------------------
from functools import reduce
from operator import add

P, Q, R = map(int, input().split())
vals = [P, Q, R]
print(reduce(add, sorted(vals)[:2]))
--------------------------------------------------------------------------------

RÉSULTATS D'ANALYSE TOKEN PAR TOKEN:
--------------------------------------------------------------------------------
Token 0: 'from' (ID: 2845)
  → Token d'amorce (pas de prédiction)

Token 1: ' functools' (ID: 142636)
  → Token d'amorce (pas de prédiction)

Token 2: ' import' (ID: 1588)
  → Token d'amorce (pas de prédiction)

Token 3: ' reduce' (ID: 10389)
  Prédit: 'partial'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'partial' → logprob: -0.6194254755973816
    2. 'wrap' → logprob: -0.8694254755973816
    3. 'reduce' → logprob: -3.3694255352020264
    4. ' wraps' → logprob: -5.369425296783447
    5. 'l' → logprob: -6.119425296783447
    6. 'cached' → logprob: -7.869425296783447
    7. ' partial' → logprob: -8.119425773620605
    8. 'cache' → logprob: -8.494425773620605
    9. '```' → logprob: -8.869425773620605
    10. 'cmp' → logprob: -8.994425773620605

Token 4: '
' (ID: 198)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '(' → logprob: -0.009276442229747772
    2. '(lambda' → logprob: -4.884276390075684
    3. ' (' → logprob: -7.384276390075684
    4. ',' → logprob: -7.884276390075684
    5. 'def' → logprob: -8.134276390075684
    6. '.' → logprob: -8.759276390075684
    7. '```' → logprob: -10.259276390075684
    8. '(
' → logprob: -10.509276390075684
    9. 'lambda' → logprob: -10.634276390075684
    10. ' ' → logprob: -10.759276390075684

Token 5: 'from' (ID: 2845)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '(' → logprob: -0.01295903604477644
    2. '\' → logprob: -4.762959003448486
    3. '\(' → logprob: -6.637959003448486
    4. 'def' → logprob: -6.762959003448486
    5. '(
' → logprob: -7.387959003448486
    6. '```' → logprob: -7.887959003448486
    7. '.' → logprob: -8.512959480285645
    8. '(lambda' → logprob: -8.762959480285645
    9. ',' → logprob: -8.887959480285645
    10. '\[' → logprob: -9.762959480285645

Token 6: ' operator' (ID: 11019)
  Prédit: ' math'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' math' → logprob: -0.3902341425418854
    2. ' operator' → logprob: -2.0152342319488525
    3. ' itertools' → logprob: -2.3902342319488525
    4. ' collections' → logprob: -2.5152342319488525
    5. ' os' → logprob: -4.140233993530273
    6. 'operator' → logprob: -7.265233993530273
    7. 'math' → logprob: -8.015233993530273
    8. ' sys' → logprob: -8.890233993530273
    9. 'collections' → logprob: -9.015233993530273
    10. ' ' → logprob: -9.515233993530273

Token 7: ' import' (ID: 1588)
  Prédit: ' import'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' import' → logprob: -0.02128998003900051
    2. 'import' → logprob: -4.021289825439453
    3. '.' → logprob: -6.396289825439453
    4. ' ' → logprob: -6.646289825439453
    5. ' .' → logprob: -9.021289825439453
    6. '.import' → logprob: -10.396289825439453
    7. '	import' → logprob: -12.021289825439453
    8. '<|end|>' → logprob: -12.896289825439453
    9. '_import' → logprob: -13.396289825439453
    10. '-import' → logprob: -13.896289825439453

Token 8: ' add' (ID: 1147)
  Prédit: ' add'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' add' → logprob: -0.12974406778812408
    2. ' import' → logprob: -2.629744052886963
    3. ' mul' → logprob: -4.004744052886963
    4. 'add' → logprob: -4.129744052886963
    5. ' ' → logprob: -4.379744052886963
    6. 'import' → logprob: -6.504744052886963
    7. 'mul' → logprob: -7.629744052886963
    8. ' item' → logprob: -7.879744052886963
    9. ' ad' → logprob: -9.504744529724121
    10. ' icon' → logprob: -10.129744529724121

Token 9: '

' (ID: 279)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '(' → logprob: -0.2905399799346924
    2. '\n' → logprob: -2.5405399799346924
    3. '\' → logprob: -2.6655399799346924
    4. '(
' → logprob: -3.5405399799346924
    5. '#' → logprob: -3.9155399799346924
    6. ',' → logprob: -4.040539741516113
    7. '`' → logprob: -5.165539741516113
    8. '
' → logprob: -5.540539741516113
    9. 'def' → logprob: -5.665539741516113
    10. ' ' → logprob: -6.040539741516113

Token 10: 'P' (ID: 47)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '(' → logprob: -0.03048279881477356
    2. '(
' → logprob: -3.905482769012451
    3. '#' → logprob: -5.530482769012451
    4. 'def' → logprob: -6.655482769012451
    5. 'a' → logprob: -6.780482769012451
    6. '\' → logprob: -7.030482769012451
    7. 'result' → logprob: -7.405482769012451
    8. ',' → logprob: -7.530482769012451
    9. '(

' → logprob: -8.65548324584961
    10. '(a' → logprob: -8.90548324584961

Token 11: ',' (ID: 11)
  Prédit: 'r'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'r' → logprob: -0.0011503404239192605
    2. 'ro' → logprob: -7.751150131225586
    3. 'print' → logprob: -7.751150131225586
    4. 'reduce' → logprob: -8.876150131225586
    5. 'rim' → logprob: -10.251150131225586
    6. 'ass' → logprob: -10.751150131225586
    7. 'a' → logprob: -10.876150131225586
    8. 'R' → logprob: -11.501150131225586
    9. 're' → logprob: -12.001150131225586
    10. 'ow' → logprob: -12.001150131225586

Token 12: ' Q' (ID: 1486)
  Prédit: 'Q'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'Q' → logprob: -0.33873000741004944
    2. ' Q' → logprob: -2.0887300968170166
    3. 'q' → logprob: -3.7137300968170166
    4. ' ' → logprob: -4.2137298583984375
    5. ' =' → logprob: -4.4637298583984375
    6. 'p' → logprob: -4.5887298583984375
    7. ' p' → logprob: -4.5887298583984375
    8. '=' → logprob: -4.8387298583984375
    9. 'r' → logprob: -4.8387298583984375
    10. 'n' → logprob: -4.9637298583984375

Token 13: ',' (ID: 11)
  Prédit: ' ='
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' =' → logprob: -0.02401530183851719
    2. '=' → logprob: -3.774015188217163
    3. ',' → logprob: -7.899015426635742
    4. ' ' → logprob: -8.274015426635742
    5. '_' → logprob: -9.774015426635742
    6. ')' → logprob: -10.274015426635742
    7. ' ,' → logprob: -10.649015426635742
    8. '.' → logprob: -11.774015426635742
    9. '  ' → logprob: -12.899015426635742
    10. '[' → logprob: -13.524015426635742

Token 14: ' R' (ID: 460)
  Prédit: ' ='
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' =' → logprob: -0.9358842372894287
    2. 'R' → logprob: -1.1858842372894287
    3. ' R' → logprob: -1.8108842372894287
    4. '=' → logprob: -2.0608842372894287
    5. ' ' → logprob: -4.810884475708008
    6. ',' → logprob: -7.560884475708008
    7. 'N' → logprob: -8.560884475708008
    8. 'r' → logprob: -8.998384475708008
    9. 'S' → logprob: -9.060884475708008
    10. '  ' → logprob: -9.123384475708008

Token 15: ' =' (ID: 314)
  Prédit: ' ='
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' =' → logprob: -0.008659947663545609
    2. '=' → logprob: -4.758659839630127
    3. ',' → logprob: -10.383660316467285
    4. ')' → logprob: -11.883660316467285
    5. ' ' → logprob: -12.758660316467285
    6. ' =
' → logprob: -13.508660316467285
    7. '  ' → logprob: -14.258660316467285
    8. ' ,' → logprob: -14.383660316467285
    9. '>' → logprob: -15.383660316467285
    10. '   ' → logprob: -15.383660316467285

Token 16: ' map' (ID: 4014)
  Prédit: '0'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '0' → logprob: -0.5150754451751709
    2. ' ' → logprob: -1.640075445175171
    3. '1' → logprob: -1.765075445175171
    4. 'map' → logprob: -4.64007568359375
    5. '(' → logprob: -4.76507568359375
    6. ' map' → logprob: -5.39007568359375
    7. '[' → logprob: -5.76507568359375
    8. '3' → logprob: -5.89007568359375
    9. ' (' → logprob: -6.26507568359375
    10. '2' → logprob: -6.76507568359375

Token 17: '(int' (ID: 2742)
  Prédit: '(int'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(int' → logprob: -0.012873122468590736
    2. '(' → logprob: -4.76287317276001
    3. '(lambda' → logprob: -6.01287317276001
    4. 'int' → logprob: -7.13787317276001
    5. '(str' → logprob: -7.51287317276001
    6. '(input' → logprob: -8.137872695922852
    7. '(list' → logprob: -10.262872695922852
    8. 'list' → logprob: -10.512872695922852
    9. '(eval' → logprob: -10.762872695922852
    10. '[int' → logprob: -11.387872695922852

Token 18: ',' (ID: 11)
  Prédit: '(input'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(input' → logprob: -0.11538853496313095
    2. 'input' → logprob: -3.2403886318206787
    3. ',' → logprob: -3.4903886318206787
    4. ',input' → logprob: -3.7403886318206787
    5. ')' → logprob: -4.9903883934021
    6. '(' → logprob: -4.9903883934021
    7. ' input' → logprob: -6.8653883934021
    8. '```' → logprob: -8.615388870239258
    9. '=input' → logprob: -8.990388870239258
    10. '(int' → logprob: -9.240388870239258

Token 19: ' input' (ID: 3422)
  Prédit: 'input'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'input' → logprob: -0.14296388626098633
    2. ' input' → logprob: -2.0179638862609863
    3. ')' → logprob: -8.642963409423828
    4. '(input' → logprob: -9.642963409423828
    5. ' ' → logprob: -11.642963409423828
    6. ',input' → logprob: -11.642963409423828
    7. '```' → logprob: -12.017963409423828
    8. ' )' → logprob: -12.392963409423828
    9. '=input' → logprob: -12.767963409423828
    10. '[input' → logprob: -13.142963409423828

Token 20: '().' (ID: 1454)
  Prédit: '()'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '()' → logprob: -0.9262322783470154
    2. '())' → logprob: -0.9262322783470154
    3. '().' → logprob: -1.6762323379516602
    4. '(' → logprob: -5.42623233795166
    5. ')' → logprob: -5.42623233795166
    6. '());' → logprob: -5.55123233795166
    7. '()>' → logprob: -6.05123233795166
    8. '(()' → logprob: -6.80123233795166
    9. '(),' → logprob: -6.92623233795166
    10. '()))' → logprob: -7.17623233795166

Token 21: 'split' (ID: 13627)
  Prédit: 'split'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'split' → logprob: -0.00016063073417171836
    2. 'strip' → logprob: -8.750160217285156
    3. 'rstrip' → logprob: -13.375160217285156
    4. ' split' → logprob: -14.750160217285156
    5. 'spl' → logprob: -16.250160217285156
    6. '(split' → logprob: -16.625160217285156
    7. ')' → logprob: -17.500160217285156
    8. 's' → logprob: -17.625160217285156
    9. 'sp' → logprob: -18.500160217285156
    10. 'startswith' → logprob: -18.750160217285156

Token 22: '())
' (ID: 4574)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ')' → logprob: -0.035054974257946014
    2. '))' → logprob: -3.535054922103882
    3. '())' → logprob: -5.410055160522461
    4. '('' → logprob: -8.035055160522461
    5. '(' → logprob: -9.285055160522461
    6. '),' → logprob: -9.410055160522461
    7. '()' → logprob: -9.410055160522461
    8. '')' → logprob: -9.660055160522461
    9. '(','' → logprob: -10.285055160522461
    10. ')))' → logprob: -10.410055160522461

Token 23: 'vals' (ID: 44567)
  Prédit: 'numbers'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'numbers' → logprob: -1.037642002105713
    2. 'nums' → logprob: -1.287642002105713
    3. 'arr' → logprob: -2.537642002105713
    4. 'a' → logprob: -2.912642002105713
    5. 'lst' → logprob: -3.037642002105713
    6. 'result' → logprob: -3.287642002105713
    7. 's' → logprob: -3.787642002105713
    8. 'sequence' → logprob: -4.037642002105713
    9. 'S' → logprob: -4.162642002105713
    10. 'values' → logprob: -4.287642002105713

Token 24: ' =' (ID: 314)
  Prédit: '['
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '[' → logprob: -0.9550827145576477
    2. ' =' → logprob: -1.330082654953003
    3. '=' → logprob: -1.580082654953003
    4. '(' → logprob: -2.205082654953003
    5. ')' → logprob: -3.955082654953003
    6. '[:]' → logprob: -4.955082893371582
    7. '[]' → logprob: -6.330082893371582
    8. '[:' → logprob: -6.330082893371582
    9. '_' → logprob: -6.455082893371582
    10. ',' → logprob: -6.955082893371582

Token 25: ' [' (ID: 723)
  Prédit: 'list'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'list' → logprob: -0.9118111729621887
    2. '[' → logprob: -1.536811113357544
    3. ' list' → logprob: -1.786811113357544
    4. ' [' → logprob: -2.161811113357544
    5. '[list' → logprob: -3.036811113357544
    6. '[input' → logprob: -3.411811113357544
    7. '[]' → logprob: -5.161811351776123
    8. '[int' → logprob: -5.286811351776123
    9. '[P' → logprob: -5.536811351776123
    10. '[a' → logprob: -7.161811351776123

Token 26: 'P' (ID: 47)
  Prédit: 'P'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'P' → logprob: -0.025409290567040443
    2. 'int' → logprob: -4.15040922164917
    3. '0' → logprob: -5.02540922164917
    4. 'i' → logprob: -7.15040922164917
    5. ' P' → logprob: -7.52540922164917
    6. '*' → logprob: -7.77540922164917
    7. '1' → logprob: -8.525409698486328
    8. 'input' → logprob: -8.900409698486328
    9. 'x' → logprob: -9.025409698486328
    10. '(P' → logprob: -9.275409698486328

Token 27: ',' (ID: 11)
  Prédit: ','
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ',' → logprob: -0.0022124657407402992
    2. ' ,' → logprob: -6.5022125244140625
    3. ',Q' → logprob: -7.3772125244140625
    4. '+' → logprob: -9.877212524414062
    5. ',
' → logprob: -11.752212524414062
    6. ')' → logprob: -12.127212524414062
    7. ' ' → logprob: -12.127212524414062
    8. ' +' → logprob: -13.002212524414062
    9. ',P' → logprob: -13.377212524414062
    10. ']' → logprob: -13.627212524414062

Token 28: ' Q' (ID: 1486)
  Prédit: ' Q'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' Q' → logprob: -0.34848180413246155
    2. 'Q' → logprob: -1.2234817743301392
    3. ' ' → logprob: -10.973482131958008
    4. ' ' → logprob: -11.723482131958008
    5. ',Q' → logprob: -12.223482131958008
    6. ',' → logprob: -12.723482131958008
    7. ' ,' → logprob: -13.473482131958008
    8. '	Q' → logprob: -14.223482131958008
    9. ' 
' → logprob: -15.160982131958008
    10. ''' → logprob: -15.285982131958008

Token 29: ',' (ID: 11)
  Prédit: ','
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ',' → logprob: -5.264322317088954e-05
    2. ' ,' → logprob: -10.125052452087402
    3. ',R' → logprob: -11.625052452087402
    4. ')' → logprob: -13.500052452087402
    5. ',
' → logprob: -14.625052452087402
    6. '),' → logprob: -15.000052452087402
    7. ')]' → logprob: -15.125052452087402
    8. ']' → logprob: -15.250052452087402
    9. '`,' → logprob: -15.875052452087402
    10. ',r' → logprob: -16.00005340576172

Token 30: ' R' (ID: 460)
  Prédit: 'R'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'R' → logprob: -0.5759486556053162
    2. ' R' → logprob: -0.8259486556053162
    3. ' ' → logprob: -12.825948715209961
    4. ',' → logprob: -13.075948715209961
    5. ' ' → logprob: -14.200948715209961
    6. ' ,' → logprob: -14.638448715209961
    7. 'r' → logprob: -14.888448715209961
    8. ',R' → logprob: -15.013448715209961
    9. ']' → logprob: -15.075948715209961
    10. ')' → logprob: -15.263448715209961

Token 31: ']
' (ID: 1592)
  Prédit: ']'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ']' → logprob: -0.00012248923303559422
    2. ')' → logprob: -9.5001220703125
    3. ',' → logprob: -11.0001220703125
    4. ' ]' → logprob: -11.0001220703125
    5. '])' → logprob: -11.5001220703125
    6. ')]' → logprob: -13.3751220703125
    7. ']
' → logprob: -13.5001220703125
    8. '']' → logprob: -14.8751220703125
    9. ']

' → logprob: -15.7501220703125
    10. '],' → logprob: -16.0001220703125

Token 32: 'print' (ID: 1598)
  Prédit: 'result'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'result' → logprob: -1.223954200744629
    2. ')' → logprob: -2.098954200744629
    3. 'sum' → logprob: -2.348954200744629
    4. 'print' → logprob: -2.473954200744629
    5. '
' → logprob: -2.473954200744629
    6. 's' → logprob: -2.973954200744629
    7. '+' → logprob: -3.223954200744629
    8. '[' → logprob: -3.473954200744629
    9. '\n' → logprob: -3.973954200744629
    10. ',' → logprob: -4.223954200744629

Token 33: '(re' (ID: 8178)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(' → logprob: -0.03885962814092636
    2. '(sum' → logprob: -3.5388596057891846
    3. '(re' → logprob: -4.788859844207764
    4. '(max' → logprob: -8.038859367370605
    5. '(list' → logprob: -8.538859367370605
    6. '((' → logprob: -10.038859367370605
    7. '(f' → logprob: -10.663859367370605
    8. '(
' → logprob: -10.913859367370605
    9. '("("' → logprob: -10.913859367370605
    10. '(len' → logprob: -11.163859367370605

Token 34: 'duce' (ID: 21375)
  Prédit: 'duce'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'duce' → logprob: -0.0002929174806922674
    2. 'd' → logprob: -8.250292778015137
    3. 'du' → logprob: -10.500292778015137
    4. 'duced' → logprob: -12.875292778015137
    5. 'duc' → logprob: -14.625292778015137
    6. 'dc' → logprob: -15.250292778015137
    7. 'dux' → logprob: -15.500292778015137
    8. 'verse' → logprob: -15.625292778015137
    9. '(' → logprob: -16.125293731689453
    10. '[' → logprob: -16.250293731689453

Token 35: '(add' (ID: 40159)
  Prédit: '(add'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(add' → logprob: -0.16224899888038635
    2. '(' → logprob: -1.912248969078064
    3. '(operator' → logprob: -6.5372490882873535
    4. '(lambda' → logprob: -7.6622490882873535
    5. 'add' → logprob: -9.537248611450195
    6. ')' → logprob: -11.162248611450195
    7. ' add' → logprob: -11.912248611450195
    8. ' (' → logprob: -12.412248611450195
    9. ')add' → logprob: -12.412248611450195
    10. '(Add' → logprob: -14.412248611450195

Token 36: ',' (ID: 11)
  Prédit: ','
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ',' → logprob: -0.0006272526225075126
    2. '(vals' → logprob: -7.625627040863037
    3. ',val' → logprob: -9.375627517700195
    4. ' ,' → logprob: -10.000627517700195
    5. '(' → logprob: -12.875627517700195
    6. ',
' → logprob: -13.250627517700195
    7. 'vals' → logprob: -13.750627517700195
    8. ' vals' → logprob: -13.750627517700195
    9. ',

' → logprob: -14.500627517700195
    10. '```' → logprob: -14.625627517700195

Token 37: ' sorted' (ID: 20099)
  Prédit: ' vals'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' vals' → logprob: -0.18036173284053802
    2. 'vals' → logprob: -1.8053617477416992
    3. '(vals' → logprob: -7.430361747741699
    4. '_vals' → logprob: -11.6803617477417
    5. ')' → logprob: -12.5553617477417
    6. 'Vals' → logprob: -12.6803617477417
    7. ' values' → logprob: -13.3053617477417
    8. '[' → logprob: -13.4303617477417
    9. 'val' → logprob: -13.4303617477417
    10. 'values' → logprob: -13.5553617477417

Token 38: '(vals' (ID: 167053)
  Prédit: '(vals'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(vals' → logprob: -0.0003213997988495976
    2. '(' → logprob: -8.125321388244629
    3. '(val' → logprob: -11.125321388244629
    4. '(values' → logprob: -12.125321388244629
    5. '(nums' → logprob: -12.625321388244629
    6. ' (' → logprob: -14.000321388244629
    7. '(vars' → logprob: -15.000321388244629
    8. 'vals' → logprob: -15.750321388244629
    9. '(ids' → logprob: -15.875321388244629
    10. '(len' → logprob: -16.375322341918945

Token 39: ')' (ID: 8)
  Prédit: ')))'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')))' → logprob: -0.1295618712902069
    2. '))' → logprob: -2.1295619010925293
    3. ')' → logprob: -6.129561901092529
    4. '),' → logprob: -8.254561424255371
    5. ',' → logprob: -9.879561424255371
    6. ')))
' → logprob: -10.004561424255371
    7. '))))' → logprob: -10.129561424255371
    8. '(' → logprob: -11.379561424255371
    9. '[' → logprob: -11.504561424255371
    10. ' ' → logprob: -11.629561424255371

Token 40: '[:' (ID: 7808)
  Prédit: '))'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '))' → logprob: -0.009949803352355957
    2. ')' → logprob: -4.634949684143066
    3. ')))' → logprob: -9.009949684143066
    4. '[' → logprob: -10.634949684143066
    5. ',' → logprob: -11.134949684143066
    6. '))
' → logprob: -11.259949684143066
    7. '(' → logprob: -11.759949684143066
    8. '()))' → logprob: -12.884949684143066
    9. '),' → logprob: -13.384949684143066
    10. '])' → logprob: -13.509949684143066

Token 41: '2' (ID: 17)
  Prédit: '2'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '2' → logprob: -0.0007175540085881948
    2. ' ' → logprob: -7.625717639923096
    3. '-' → logprob: -8.875717163085938
    4. '1' → logprob: -10.125717163085938
    5. '3' → logprob: -10.125717163085938
    6. ' -' → logprob: -12.000717163085938
    7. 'len' → logprob: -14.125717163085938
    8. '])' → logprob: -14.125717163085938
    9. '   ' → logprob: -15.375717163085938
    10. ')' → logprob: -15.438217163085938

Token 42: ']))' (ID: 20259)
  Prédit: '))'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '))' → logprob: -0.03943107649683952
    2. ')' → logprob: -3.414431095123291
    3. ')))' → logprob: -5.164431095123291
    4. ']))' → logprob: -11.289430618286133
    5. ' ))' → logprob: -11.289430618286133
    6. '),' → logprob: -11.539430618286133
    7. '))
' → logprob: -12.039430618286133
    8. ' )' → logprob: -12.914430618286133
    9. '}))' → logprob: -13.289430618286133
    10. '))))' → logprob: -13.539430618286133


RÉSUMÉ:
--------------------------------------------------------------------------------
Total des tokens analysés: 40
Tokens correctement prédits (1ère position, stricte): 14
Tokens correctement prédits (1ère position, avec adaptation): 14
Tokens correctement prédits (top 10): 30
Précision stricte (1ère position): 35.00%
Précision adaptée (1ère position): 35.00%
Précision (top 10): 75.00%
================================================================================
