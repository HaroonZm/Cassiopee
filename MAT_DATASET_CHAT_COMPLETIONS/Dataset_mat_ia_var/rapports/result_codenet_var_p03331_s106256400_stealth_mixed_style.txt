================================================================================
ANALYSE DE PRÉDICTION TOKEN PAR TOKEN (BATCH API)
Date: 2025-06-04 20:16:59
Modèle de tokenisation: gpt-4o-mini
================================================================================

SCRIPT ANALYSÉ:
--------------------------------------------------------------------------------
n=input()
def sum_digits(s): return sum(int(c) for c in s)
class Resolver:
  def __init__(self, m):
    self.m = m
  def is_div_by_10(self):
    return int(self.m)%10==0
r = Resolver(n)
if r.is_div_by_10():
    print(10)
else:
    res = 0
    i = 0
    while i < len(n):
        res += int(n[i])
        i += 1
    print(res if res==sum_digits(n) else sum_digits(n))
--------------------------------------------------------------------------------

RÉSULTATS D'ANALYSE TOKEN PAR TOKEN:
--------------------------------------------------------------------------------
Token 0: 'n' (ID: 77)
  → Token d'amorce (pas de prédiction)

Token 1: '=input' (ID: 87911)
  → Token d'amorce (pas de prédiction)

Token 2: '()
' (ID: 1234)
  → Token d'amorce (pas de prédiction)

Token 3: 'def' (ID: 1314)
  Prédit: '.'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '.' → logprob: -0.010649241507053375
    2. '=' → logprob: -5.38564920425415
    3. '+' → logprob: -5.63564920425415
    4. 'if' → logprob: -7.38564920425415
    5. '[' → logprob: -7.51064920425415
    6. '(' → logprob: -8.260649681091309
    7. '.strip' → logprob: -8.260649681091309
    8. ')' → logprob: -9.010649681091309
    9. ' if' → logprob: -9.260649681091309
    10. 'i' → logprob: -10.010649681091309

Token 4: ' sum' (ID: 4215)
  Prédit: ' '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' ' → logprob: -0.018922625109553337
    2. '_' → logprob: -4.768922805786133
    3. ' n' → logprob: -5.768922805786133
    4. ' f' → logprob: -5.893922805786133
    5. ' space' → logprob: -6.518922805786133
    6. ' a' → logprob: -7.768922805786133
    7. ' func' → logprob: -7.893922805786133
    8. ' _' → logprob: -8.018922805786133
    9. ' function' → logprob: -8.143922805786133
    10. ' ' → logprob: -8.268922805786133

Token 5: '_digits' (ID: 108638)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '(' → logprob: -0.5249133706092834
    2. '_' → logprob: -0.8999133706092834
    3. '_(' → logprob: -7.899913311004639
    4. '(_' → logprob: -8.024913787841797
    5. '(a' → logprob: -8.524913787841797
    6. ')' → logprob: -8.774913787841797
    7. 's' → logprob: -8.899913787841797
    8. '_:' → logprob: -8.899913787841797
    9. ' (' → logprob: -9.149913787841797
    10. '_s' → logprob: -10.024913787841797

Token 6: '(s' (ID: 1858)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(' → logprob: -0.009299473837018013
    2. '_' → logprob: -4.884299278259277
    3. '(n' → logprob: -6.509299278259277
    4. '_(' → logprob: -10.134299278259277
    5. '(_' → logprob: -10.259299278259277
    6. ' (' → logprob: -10.759299278259277
    7. '(a' → logprob: -11.009299278259277
    8. 's' → logprob: -11.134299278259277
    9. '(x' → logprob: -11.634299278259277
    10. '(s' → logprob: -11.884299278259277

Token 7: '):' (ID: 3127)
  Prédit: '):'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '):' → logprob: -0.026567799970507622
    2. ')' → logprob: -3.6515676975250244
    3. ':' → logprob: -9.026567459106445
    4. '):
' → logprob: -9.901567459106445
    5. 's' → logprob: -10.026567459106445
    6. ' ):' → logprob: -11.526567459106445
    7. ''):' → logprob: -12.026567459106445
    8. 'e' → logprob: -12.276567459106445
    9. 'u' → logprob: -12.776567459106445
    10. '[' → logprob: -12.776567459106445

Token 8: ' return' (ID: 622)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.1597106158733368
    2. ' ' → logprob: -2.534710645675659
    3. ':' → logprob: -2.909710645675659
    4. '    ' → logprob: -6.03471040725708
    5. 'd' → logprob: -6.15971040725708
    6. '  ' → logprob: -6.28471040725708
    7. ' return' → logprob: -6.65971040725708
    8. '(' → logprob: -6.90971040725708
    9. ':
' → logprob: -7.28471040725708
    10. ':return' → logprob: -7.53471040725708

Token 9: ' sum' (ID: 4215)
  Prédit: ' sum'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' sum' → logprob: -0.34980762004852295
    2. 'sum' → logprob: -1.349807620048523
    3. ' int' → logprob: -3.5998077392578125
    4. 'int' → logprob: -5.0998077392578125
    5. ' ' → logprob: -6.2248077392578125
    6. '0' → logprob: -8.974807739257812
    7. 's' → logprob: -9.099807739257812
    8. ' s' → logprob: -9.474807739257812
    9. '(sum' → logprob: -9.474807739257812
    10. '  ' → logprob: -10.724807739257812

Token 10: '(int' (ID: 2742)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(' → logprob: -0.6021019220352173
    2. '(int' → logprob: -1.1021019220352173
    3. '(ord' → logprob: -2.2271018028259277
    4. '(s' → logprob: -4.477101802825928
    5. '(len' → logprob: -8.227102279663086
    6. 'int' → logprob: -8.352102279663086
    7. '((' → logprob: -8.602102279663086
    8. 's' → logprob: -9.602102279663086
    9. '_' → logprob: -10.352102279663086
    10. '(sum' → logprob: -10.477102279663086

Token 11: '(c' (ID: 2410)
  Prédit: '(c'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(c' → logprob: -0.17203812301158905
    2. '(ch' → logprob: -2.1720380783081055
    3. '(d' → logprob: -3.9220380783081055
    4. '(x' → logprob: -4.2970380783081055
    5. '(i' → logprob: -5.1720380783081055
    6. '(' → logprob: -5.7970380783081055
    7. '(char' → logprob: -6.5470380783081055
    8. '(s' → logprob: -7.9220380783081055
    9. '(a' → logprob: -9.172038078308105
    10. ')' → logprob: -10.547038078308105

Token 12: ')' (ID: 8)
  Prédit: ')'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')' → logprob: -0.0006569160032086074
    2. ')c' → logprob: -7.375657081604004
    3. ' )' → logprob: -11.250657081604004
    4. '))' → logprob: -11.750657081604004
    5. ')d' → logprob: -12.875657081604004
    6. '(c' → logprob: -13.000657081604004
    7. ')s' → logprob: -13.500657081604004
    8. ')+' → logprob: -14.000657081604004
    9. 'c' → logprob: -14.500657081604004
    10. '')' → logprob: -15.000657081604004

Token 13: ' for' (ID: 395)
  Prédit: 's'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 's' → logprob: -0.25284692645072937
    2. ')' → logprob: -2.3778469562530518
    3. 'c' → logprob: -2.6278469562530518
    4. ')c' → logprob: -3.6278469562530518
    5. ' s' → logprob: -4.377846717834473
    6. '(s' → logprob: -4.752846717834473
    7. 'for' → logprob: -5.377846717834473
    8. ' c' → logprob: -6.252846717834473
    9. '(c' → logprob: -6.252846717834473
    10. ' for' → logprob: -7.127846717834473

Token 14: ' c' (ID: 274)
  Prédit: ' c'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' c' → logprob: -0.46929076313972473
    2. ' s' → logprob: -1.0942907333374023
    3. ' ' → logprob: -3.7192907333374023
    4. 'c' → logprob: -4.344290733337402
    5. 's' → logprob: -6.719290733337402
    6. '<|end|>' → logprob: -7.469290733337402
    7. '_' → logprob: -7.844290733337402
    8. '  ' → logprob: -8.344290733337402
    9. '_c' → logprob: -10.594290733337402
    10. '<|end|>' → logprob: -10.719290733337402

Token 15: ' in' (ID: 306)
  Prédit: ' in'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' in' → logprob: -0.12747468054294586
    2. 'in' → logprob: -2.127474784851074
    3. 'n' → logprob: -8.252474784851074
    4. 's' → logprob: -8.627474784851074
    5. 'i' → logprob: -10.127474784851074
    6. ' ' → logprob: -11.377474784851074
    7. 'c' → logprob: -11.627474784851074
    8. '<|end|>' → logprob: -12.252474784851074
    9. ' ' → logprob: -12.502474784851074
    10. '  ' → logprob: -12.502474784851074

Token 16: ' s' (ID: 265)
  Prédit: 's'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 's' → logprob: -0.00975679699331522
    2. ' s' → logprob: -4.634756565093994
    3. 'str' → logprob: -14.759757041931152
    4. ' ' → logprob: -16.009756088256836
    5. '(s' → logprob: -16.634756088256836
    6. 'range' → logprob: -16.884756088256836
    7. '{s' → logprob: -17.509756088256836
    8. 'n' → logprob: -17.634756088256836
    9. '```' → logprob: -17.759756088256836
    10. ')' → logprob: -17.759756088256836

Token 17: ')
' (ID: 446)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ')' → logprob: -0.00017815368482843041
    2. 'if' → logprob: -9.125178337097168
    3. '))' → logprob: -10.000178337097168
    4. ' if' → logprob: -11.625178337097168
    5. '')' → logprob: -12.000178337097168
    6. ' )' → logprob: -13.125178337097168
    7. '`)' → logprob: -13.375178337097168
    8. '])' → logprob: -14.125178337097168
    9. '())' → logprob: -14.375178337097168
    10. ')))' → logprob: -14.875178337097168

Token 18: 'class' (ID: 1444)
  Prédit: 'print'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'print' → logprob: -0.2451665997505188
    2. 'if' → logprob: -2.245166540145874
    3. '
' → logprob: -3.870166540145874
    4. ')' → logprob: -4.245166778564453
    5. '\n' → logprob: -4.370166778564453
    6. ' if' → logprob: -4.495166778564453
    7. 'n' → logprob: -4.870166778564453
    8. '[' → logprob: -4.995166778564453
    9. '(' → logprob: -5.120166778564453
    10. '<|end|>' → logprob: -5.245166778564453

Token 19: ' Resolver' (ID: 170287)
  Prédit: ' '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' ' → logprob: -0.10205517709255219
    2. ' Solution' → logprob: -2.977055072784424
    3. ' My' → logprob: -3.977055072784424
    4. ' Calculator' → logprob: -4.102055072784424
    5. ' Number' → logprob: -5.352055072784424
    6. ' S' → logprob: -6.727055072784424
    7. ' Counter' → logprob: -7.102055072784424
    8. ' Digit' → logprob: -7.102055072784424
    9. ' A' → logprob: -7.352055072784424
    10. ' Student' → logprob: -7.852055072784424

Token 20: ':
' (ID: 734)
  Prédit: ':'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ':' → logprob: -0.00017827287956606597
    2. '(' → logprob: -8.875178337097168
    3. ':**' → logprob: -11.500178337097168
    4. ':
' → logprob: -11.750178337097168
    5. ' :' → logprob: -11.875178337097168
    6. '():' → logprob: -12.125178337097168
    7. '(:' → logprob: -12.375178337097168
    8. '):' → logprob: -13.625178337097168
    9. '.' → logprob: -14.500178337097168
    10. ':def' → logprob: -14.875178337097168

Token 21: ' ' (ID: 220)
  Prédit: ' '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' ' → logprob: -0.7277732491493225
    2. ' def' → logprob: -1.2277731895446777
    3. '   ' → logprob: -2.6027731895446777
    4. '<|end|>' → logprob: -2.6027731895446777
    5. '    ' → logprob: -3.2277731895446777
    6. ' 
' → logprob: -3.8527731895446777
    7. 'def' → logprob: -5.602773189544678
    8. '    
' → logprob: -6.227773189544678
    9. '
' → logprob: -6.352773189544678
    10. '     
' → logprob: -6.477773189544678

Token 22: ' def' (ID: 1056)
  Prédit: ' def'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' def' → logprob: -0.48790261149406433
    2. 'def' → logprob: -1.3629026412963867
    3. '   ' → logprob: -2.1129026412963867
    4. ' ' → logprob: -4.862902641296387
    5. '	def' → logprob: -7.237902641296387
    6. '<|end|>' → logprob: -8.612902641296387
    7. '    
' → logprob: -8.987902641296387
    8. ' 
' → logprob: -9.737902641296387
    9. ' pass' → logprob: -9.737902641296387
    10. '    ' → logprob: -9.862902641296387

Token 23: ' __' (ID: 2516)
  Prédit: ' __'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' __' → logprob: -0.7047978639602661
    2. ' init' → logprob: -0.8297978639602661
    3. 'init' → logprob: -2.9547977447509766
    4. ' ' → logprob: -4.704797744750977
    5. '__' → logprob: -5.954797744750977
    6. ' sum' → logprob: -6.329797744750977
    7. ' _' → logprob: -6.454797744750977
    8. ' def' → logprob: -6.829797744750977
    9. '_init' → logprob: -7.079797744750977
    10. ' solve' → logprob: -8.079797744750977

Token 24: 'init' (ID: 3287)
  Prédit: 'init'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'init' → logprob: -4.656383680412546e-05
    2. 'ini' → logprob: -10.625046730041504
    3. 'i' → logprob: -11.375046730041504
    4. 'in' → logprob: -11.875046730041504
    5. ' init' → logprob: -12.750046730041504
    6. 'int' → logprob: -15.375046730041504
    7. 'call' → logprob: -15.625046730041504
    8. 'inite' → logprob: -16.125045776367188
    9. 'inti' → logprob: -16.625045776367188
    10. 'innit' → logprob: -16.750045776367188

Token 25: '__(' (ID: 8241)
  Prédit: '__('
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '__(' → logprob: -0.030250005424022675
    2. '__' → logprob: -3.530250072479248
    3. '__(
' → logprob: -8.40524959564209
    4. '__((' → logprob: -8.53024959564209
    5. '(self' → logprob: -10.53024959564209
    6. '__('' → logprob: -10.65524959564209
    7. '__(*' → logprob: -11.28024959564209
    8. '(' → logprob: -11.90524959564209
    9. '__("' → logprob: -13.03024959564209
    10. '___' → logprob: -13.15524959564209

Token 26: 'self' (ID: 1156)
  Prédit: 'self'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'self' → logprob: -0.02910924330353737
    2. ' self' → logprob: -3.654109239578247
    3. ' ' → logprob: -5.904109477996826
    4. ')' → logprob: -10.404109001159668
    5. 's' → logprob: -10.529109001159668
    6. 'n' → logprob: -11.529109001159668
    7. '   ' → logprob: -13.404109001159668
    8. '  ' → logprob: -13.529109001159668
    9. '0' → logprob: -13.529109001159668
    10. ',' → logprob: -13.654109001159668

Token 27: ',' (ID: 11)
  Prédit: ','
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ',' → logprob: -0.059303008019924164
    2. ' ,' → logprob: -2.934303045272827
    3. 'self' → logprob: -5.934302806854248
    4. ',self' → logprob: -7.059302806854248
    5. ' ' → logprob: -8.059303283691406
    6. ',n' → logprob: -8.434303283691406
    7. '_,' → logprob: -9.059303283691406
    8. ',s' → logprob: -9.184303283691406
    9. ')' → logprob: -9.684303283691406
    10. '_' → logprob: -10.809303283691406

Token 28: ' m' (ID: 284)
  Prédit: 'self'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'self' → logprob: -0.6068715453147888
    2. ' self' → logprob: -1.2318716049194336
    3. ' ' → logprob: -2.9818716049194336
    4. 'n' → logprob: -3.1068716049194336
    5. ' n' → logprob: -3.7318716049194336
    6. 's' → logprob: -3.8568716049194336
    7. ' s' → logprob: -4.356871604919434
    8. 'a' → logprob: -7.106871604919434
    9. ' numbers' → logprob: -7.106871604919434
    10. 'numbers' → logprob: -7.231871604919434

Token 29: '):
' (ID: 1883)
  Prédit: '):'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '):' → logprob: -0.036857716739177704
    2. ' ):' → logprob: -4.661857604980469
    3. ',' → logprob: -5.036857604980469
    4. ')' → logprob: -5.036857604980469
    5. 'ax' → logprob: -5.536857604980469
    6. '=' → logprob: -5.786857604980469
    7. 'a' → logprob: -6.536857604980469
    8. ':' → logprob: -7.161857604980469
    9. 'ean' → logprob: -7.411857604980469
    10. 'e' → logprob: -7.536857604980469

Token 30: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.19152089953422546
    2. '    ' → logprob: -3.066520929336548
    3. ' self' → logprob: -3.191520929336548
    4. ' ' → logprob: -3.191520929336548
    5. '     ' → logprob: -3.816520929336548
    6. 'self' → logprob: -4.441520690917969
    7. '  ' → logprob: -4.691520690917969
    8. '       ' → logprob: -7.066520690917969
    9. ' m' → logprob: -7.566520690917969
    10. 'm' → logprob: -8.316520690917969

Token 31: ' self' (ID: 1051)
  Prédit: ' self'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' self' → logprob: -0.7429618239402771
    2. ' ' → logprob: -1.3679618835449219
    3. 'self' (adapté à ' self') → logprob: -1.3679618835449219
    4. '   ' → logprob: -4.867961883544922
    5. '    ' → logprob: -5.867961883544922
    6. '  ' → logprob: -6.492961883544922
    7. '     ' → logprob: -6.617961883544922
    8. 'm' → logprob: -6.992961883544922
    9. ' ' → logprob: -7.992961883544922
    10. ' m' → logprob: -8.492961883544922

Token 32: '.m' (ID: 1021)
  Prédit: '.'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '.' → logprob: -0.1272076815366745
    2. '.m' → logprob: -2.1272077560424805
    3. ' .' → logprob: -8.75220775604248
    4. ' ' → logprob: -10.50220775604248
    5. '.n' → logprob: -10.62720775604248
    6. '.s' → logprob: -10.87720775604248
    7. '.data' → logprob: -12.00220775604248
    8. '._' → logprob: -12.12720775604248
    9. '.a' → logprob: -12.25220775604248
    10. '.i' → logprob: -13.25220775604248

Token 33: ' =' (ID: 314)
  Prédit: '='
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '=' → logprob: -0.055376529693603516
    2. ' =' → logprob: -2.9303765296936035
    3. '=m' → logprob: -7.8053765296936035
    4. '=int' → logprob: -9.430376052856445
    5. ' ' → logprob: -13.055376052856445
    6. '=

' → logprob: -14.805376052856445
    7. '=s' → logprob: -15.055376052856445
    8. '=n' → logprob: -15.055376052856445
    9. ')' → logprob: -15.180376052856445
    10. '=input' → logprob: -15.305376052856445

Token 34: ' m' (ID: 284)
  Prédit: 'm'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'm' → logprob: -0.04868990182876587
    2. ' m' → logprob: -3.048689842224121
    3. ' ' → logprob: -9.298689842224121
    4. 'int' → logprob: -12.048689842224121
    5. ' int' → logprob: -13.173689842224121
    6. ' ' → logprob: -14.423689842224121
    7. '	m' → logprob: -14.548689842224121
    8. '  ' → logprob: -14.798689842224121
    9. '0' → logprob: -15.173689842224121
    10. '[m' → logprob: -15.798689842224121

Token 35: '
' (ID: 198)
  Prédit: '
'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '
' → logprob: -0.05630546435713768
    2. '<|end|>' → logprob: -3.556305408477783
    3. ' def' → logprob: -4.556305408477783
    4. ' ' → logprob: -5.181305408477783
    5. '  
' → logprob: -5.306305408477783
    6. ' 
' → logprob: -6.306305408477783
    7. 'def' → logprob: -6.681305408477783
    8. '<|end|>' → logprob: -7.181305408477783
    9. '  ' → logprob: -8.056305885314941
    10. '

' → logprob: -8.306305885314941

Token 36: ' ' (ID: 220)
  Prédit: ' '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' ' → logprob: -0.5481215119361877
    2. '
' → logprob: -1.298121452331543
    3. '<|end|>' → logprob: -2.548121452331543
    4. ' def' → logprob: -3.298121452331543
    5. '  
' → logprob: -3.798121452331543
    6. 'def' → logprob: -5.298121452331543
    7. ' 
' → logprob: -5.798121452331543
    8. '  ' → logprob: -6.798121452331543
    9. '<|end|>' → logprob: -7.048121452331543
    10. '   ' → logprob: -8.173121452331543

Token 37: ' def' (ID: 1056)
  Prédit: ' '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' ' → logprob: -0.4579409658908844
    2. ' def' → logprob: -1.457940936088562
    3. 'def' → logprob: -2.0829410552978516
    4. '
' → logprob: -5.207941055297852
    5. '  
' → logprob: -5.957941055297852
    6. ' 
' → logprob: -7.707941055297852
    7. '	def' → logprob: -7.832941055297852
    8. '<|end|>' → logprob: -7.832941055297852
    9. '   ' → logprob: -8.707941055297852
    10. '  ' → logprob: -8.957941055297852

Token 38: ' is' (ID: 382)
  Prédit: ' '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' ' → logprob: -1.0863862037658691
    2. ' solve' → logprob: -1.0863862037658691
    3. ' resolve' → logprob: -1.4613862037658691
    4. ' sum' → logprob: -3.711386203765869
    5. '_' → logprob: -3.836386203765869
    6. 'solve' → logprob: -4.961386203765869
    7. ' add' → logprob: -5.086386203765869
    8. ' process' → logprob: -5.086386203765869
    9. ' def' → logprob: -5.461386203765869
    10. ' calculate' → logprob: -5.836386203765869

Token 39: '_div' (ID: 36926)
  Prédit: '_div'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_div' → logprob: -1.155569314956665
    2. '_' → logprob: -1.280569314956665
    3. '_valid' → logprob: -1.655569314956665
    4. '_pal' → logprob: -2.530569314956665
    5. '_possible' → logprob: -3.280569314956665
    6. '_prime' → logprob: -3.780569314956665
    7. '_multiple' → logprob: -4.530569076538086
    8. '_special' → logprob: -4.905569076538086
    9. '_s' → logprob: -4.905569076538086
    10. '_sum' → logprob: -5.280569076538086

Token 40: '_by' (ID: 8214)
  Prédit: 'isible'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'isible' → logprob: -3.070975071750581e-05
    2. 'is' → logprob: -10.625030517578125
    3. 'isable' → logprob: -12.625030517578125
    4. '_' → logprob: -13.750030517578125
    5. 'ISIBLE' → logprob: -14.500030517578125
    6. '(self' → logprob: -14.750030517578125
    7. '(is' → logprob: -15.500030517578125
    8. '_is' → logprob: -15.625030517578125
    9. 'idable' → logprob: -16.125030517578125
    10. '```' → logprob: -16.500030517578125

Token 41: '_' (ID: 62)
  Prédit: '(self'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(self' → logprob: -0.4354483485221863
    2. 'self' → logprob: -1.560448408126831
    3. '_m' → logprob: -3.435448408126831
    4. '3' → logprob: -3.685448408126831
    5. '_sum' → logprob: -3.685448408126831
    6. '9' → logprob: -3.810448408126831
    7. '_' → logprob: -4.560448169708252
    8. 'm' → logprob: -4.810448169708252
    9. 'sum' → logprob: -4.935448169708252
    10. '10' → logprob: -6.185448169708252

Token 42: '10' (ID: 702)
  Prédit: 'sum'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'sum' → logprob: -1.027931809425354
    2. '3' → logprob: -1.402931809425354
    3. 'self' → logprob: -1.402931809425354
    4. '9' → logprob: -2.5279316902160645
    5. 'm' → logprob: -3.2779316902160645
    6. '7' → logprob: -3.6529316902160645
    7. '2' → logprob: -6.7779316902160645
    8. '5' → logprob: -7.0279316902160645
    9. '(self' → logprob: -7.4029316902160645
    10. 's' → logprob: -7.5279316902160645

Token 43: '(self' (ID: 2402)
  Prédit: '(self'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(self' → logprob: -0.016501855105161667
    2. '(' → logprob: -4.2665019035339355
    3. ' (' → logprob: -7.0165019035339355
    4. 'self' → logprob: -7.3915019035339355
    5. '(s' → logprob: -7.6415019035339355
    6. ' self' → logprob: -8.891501426696777
    7. ' ' → logprob: -9.141501426696777
    8. '_' → logprob: -9.891501426696777
    9. '0' → logprob: -11.641501426696777
    10. '_self' → logprob: -11.766501426696777

Token 44: '):
' (ID: 1883)
  Prédit: ','
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ',' → logprob: -0.005156196653842926
    2. ' ,' → logprob: -5.50515604019165
    3. '):' → logprob: -8.130156517028809
    4. ',s' → logprob: -8.130156517028809
    5. ',n' → logprob: -8.130156517028809
    6. ',m' → logprob: -9.505156517028809
    7. ',self' → logprob: -10.130156517028809
    8. 'self' → logprob: -10.380156517028809
    9. ',c' → logprob: -11.880156517028809
    10. ',p' → logprob: -12.380156517028809

Token 45: '   ' (ID: 271)
  Prédit: ':'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ':' → logprob: -0.5244811773300171
    2. '():' → logprob: -1.524481177330017
    3. '(' → logprob: -2.2744812965393066
    4. '()' → logprob: -3.3994812965393066
    5. '   ' → logprob: -3.6494812965393066
    6. '       ' → logprob: -4.399481296539307
    7. ':return' → logprob: -5.399481296539307
    8. ' return' → logprob: -5.774481296539307
    9. '    ' → logprob: -6.274481296539307
    10. 'return' → logprob: -7.024481296539307

Token 46: ' return' (ID: 622)
  Prédit: ' return'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' return' → logprob: -0.3979533314704895
    2. 'return' (adapté à ' return') → logprob: -1.1479532718658447
    3. '   ' → logprob: -5.522953510284424
    4. '    ' → logprob: -5.772953510284424
    5. '       ' → logprob: -6.522953510284424
    6. 'self' → logprob: -7.272953510284424
    7. ' ' → logprob: -7.397953510284424
    8. ' self' → logprob: -8.022953033447266
    9. '0' → logprob: -8.147953033447266
    10. '     ' → logprob: -8.897953033447266

Token 47: ' int' (ID: 677)
  Prédit: ' self'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' self' → logprob: -0.1752481311559677
    2. 'self' → logprob: -1.925248146057129
    3. ' sum' → logprob: -4.800248146057129
    4. ' int' → logprob: -5.925248146057129
    5. 'sum' → logprob: -6.175248146057129
    6. ' (' → logprob: -6.925248146057129
    7. ' ' → logprob: -7.925248146057129
    8. '(self' → logprob: -8.425248146057129
    9. 'int' → logprob: -8.800248146057129
    10. ' all' → logprob: -9.550248146057129

Token 48: '(self' (ID: 2402)
  Prédit: '(self'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(self' → logprob: -0.08946020901203156
    2. '(' → logprob: -2.4644601345062256
    3. '(s' → logprob: -7.964460372924805
    4. '(sum' → logprob: -9.714460372924805
    5. '((' → logprob: -10.339460372924805
    6. '(str' → logprob: -11.089460372924805
    7. ' (' → logprob: -11.214460372924805
    8. '(n' → logprob: -11.214460372924805
    9. '('' → logprob: -11.339460372924805
    10. '(int' → logprob: -12.089460372924805

Token 49: '.m' (ID: 1021)
  Prédit: '.m'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '.m' → logprob: -0.0003849133790936321
    2. '.n' → logprob: -8.500385284423828
    3. '.' → logprob: -9.125385284423828
    4. ').' → logprob: -10.500385284423828
    5. ' .' → logprob: -10.875385284423828
    6. '.s' → logprob: -11.000385284423828
    7. ')' → logprob: -12.500385284423828
    8. ' ' → logprob: -13.500385284423828
    9. '.sum' → logprob: -14.000385284423828
    10. '().' → logprob: -14.125385284423828

Token 50: ')%' (ID: 57656)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')' → logprob: -0.14321598410606384
    2. '[' → logprob: -2.6432158946990967
    3. '[-' → logprob: -2.8932158946990967
    4. ')%' → logprob: -5.143216133117676
    5. ' )' → logprob: -7.018216133117676
    6. '%' → logprob: -10.268216133117676
    7. ' ' → logprob: -10.393216133117676
    8. '[])' → logprob: -11.268216133117676
    9. '())' → logprob: -11.393216133117676
    10. '%)' → logprob: -11.518216133117676

Token 51: '10' (ID: 702)
  Prédit: '10'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '10' → logprob: -3.91732100979425e-05
    2. '1' → logprob: -10.250039100646973
    3. ' ' → logprob: -12.625039100646973
    4. '100' → logprob: -15.375039100646973
    5. '۱۰' → logprob: -17.00004005432129
    6. '१०' → logprob: -17.75004005432129
    7. '  ' → logprob: -18.12504005432129
    8. '0' → logprob: -18.25004005432129
    9. '１０' → logprob: -18.37504005432129
    10. '১০' → logprob: -18.81254005432129

Token 52: '==' (ID: 560)
  Prédit: '=='
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '==' → logprob: -0.18458321690559387
    2. ' ==' → logprob: -1.8095831871032715
    3. '0' → logprob: -5.8095831871032715
    4. ' ' → logprob: -6.4345831871032715
    5. '=' → logprob: -8.55958366394043
    6. ' ' → logprob: -11.93458366394043
    7. '===' → logprob: -12.18458366394043
    8. ')==' → logprob: -12.30958366394043
    9. ')' → logprob: -12.68458366394043
    10. '()==' → logprob: -12.93458366394043

Token 53: '0' (ID: 15)
  Prédit: '0'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '0' → logprob: -0.00029625516617670655
    2. ' ' → logprob: -8.125296592712402
    3. '۰' → logprob: -16.937795639038086
    4. '  ' → logprob: -17.875295639038086
    5. '   ' → logprob: -18.375295639038086
    6. '٠' → logprob: -18.562795639038086
    7. '०' → logprob: -18.625295639038086
    8. '০' → logprob: -18.687795639038086
    9. '```' → logprob: -18.875295639038086
    10. '０' → logprob: -18.937795639038086

Token 54: '
' (ID: 198)
  Prédit: '
'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '
' → logprob: -0.9421234130859375
    2. '<|end|>' → logprob: -1.4421234130859375
    3. '\n' → logprob: -1.8171234130859375
    4. ' ' → logprob: -2.3171234130859375
    5. '\' → logprob: -2.8171234130859375
    6. '  
' → logprob: -3.6921234130859375
    7. ' 
' → logprob: -5.1921234130859375
    8. ':' → logprob: -5.9421234130859375
    9. '<|end|>' → logprob: -6.0671234130859375
    10. ')' → logprob: -6.0671234130859375

Token 55: 'r' (ID: 81)
  Prédit: ''
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False

Token 56: ' =' (ID: 314)
  Prédit: 'e'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'e' → logprob: -0.36696216464042664
    2. 'es' → logprob: -1.241962194442749
    3. '.' → logprob: -4.86696195602417
    4. 'u' → logprob: -5.11696195602417
    5. '=' → logprob: -6.61696195602417
    6. 'r' → logprob: -7.36696195602417
    7. ')' → logprob: -7.61696195602417
    8. 'a' → logprob: -7.74196195602417
    9. 'o' → logprob: -7.74196195602417
    10. '(' → logprob: -7.99196195602417

Token 57: ' Resolver' (ID: 170287)
  Prédit: 'Resolver'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'Resolver' → logprob: -0.3869536221027374
    2. ' Resolver' → logprob: -1.136953592300415
    3. 'Resolvers' → logprob: -10.636953353881836
    4. 'Resolvable' → logprob: -10.761953353881836
    5. 'Resol' → logprob: -11.636953353881836
    6. 'Responder' → logprob: -11.636953353881836
    7. 'Resolution' → logprob: -12.386953353881836
    8. 'Resolved' → logprob: -12.511953353881836
    9. ' Resol' → logprob: -12.886953353881836
    10. 'resolver' → logprob: -13.511953353881836

Token 58: '(n' (ID: 2406)
  Prédit: '(n'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(n' → logprob: -0.0229345690459013
    2. '(' → logprob: -3.897934675216675
    3. '(int' → logprob: -6.147934436798096
    4. '(m' → logprob: -9.397934913635254
    5. '(input' → logprob: -9.647934913635254
    6. 'n' → logprob: -10.647934913635254
    7. '(s' → logprob: -11.022934913635254
    8. '((' → logprob: -11.522934913635254
    9. '(ord' → logprob: -11.647934913635254
    10. '(r' → logprob: -12.022934913635254

Token 59: ')
' (ID: 446)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')' → logprob: -1.1472419600977446e-06
    2. ' )' → logprob: -14.250000953674316
    3. ')
' → logprob: -15.250000953674316
    4. '))' → logprob: -16.625001907348633
    5. '<|end|>' → logprob: -17.250001907348633
    6. ')return' → logprob: -18.250001907348633
    7. '),' → logprob: -18.375001907348633
    8. ')

' → logprob: -18.375001907348633
    9. ')n' → logprob: -18.500001907348633
    10. '}' → logprob: -18.625001907348633

Token 60: 'if' (ID: 366)
  Prédit: 'print'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'print' → logprob: -0.11686310172080994
    2. 'if' → logprob: -2.7418630123138428
    3. 'r' → logprob: -3.1168630123138428
    4. '<|end|>' → logprob: -7.741863250732422
    5. 'p' → logprob: -7.991863250732422
    6. 'pr' → logprob: -8.616863250732422
    7. ' if' → logprob: -9.241863250732422
    8. 'result' → logprob: -9.491863250732422
    9. ')' → logprob: -9.991863250732422
    10. '#' → logprob: -9.991863250732422

Token 61: ' r' (ID: 428)
  Prédit: ' r'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' r' → logprob: -0.14274759590625763
    2. 'r' → logprob: -2.017747640609741
    3. ' ' → logprob: -10.14274787902832
    4. ' ' → logprob: -10.51774787902832
    5. ' not' → logprob: -13.26774787902832
    6. '  ' → logprob: -13.51774787902832
    7. 'not' → logprob: -14.39274787902832
    8. ' len' → logprob: -14.64274787902832
    9. '(r' → logprob: -14.64274787902832
    10. 'sum' → logprob: -15.14274787902832

Token 62: '.is' (ID: 3109)
  Prédit: '.is'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '.is' → logprob: -0.0024963486939668655
    2. '.' → logprob: -6.002496242523193
    3. ' .' → logprob: -11.002496719360352
    4. 'is' → logprob: -13.377496719360352
    5. ' ' → logprob: -14.627496719360352
    6. '.isnan' → logprob: -14.627496719360352
    7. '.i' → logprob: -15.377496719360352
    8. '.s' → logprob: -15.377496719360352
    9. '.isfile' → logprob: -16.00249671936035
    10. ').' → logprob: -16.25249671936035

Token 63: '_div' (ID: 36926)
  Prédit: '_div'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_div' → logprob: -3.4285862057004124e-05
    2. '_' → logprob: -10.87503433227539
    3. '_di' → logprob: -11.37503433227539
    4. 'div' → logprob: -13.25003433227539
    5. '_d' → logprob: -13.37503433227539
    6. '<div' → logprob: -15.50003433227539
    7. '_DIV' → logprob: -16.25003433227539
    8. '_dis' → logprob: -18.00003433227539
    9. '	div' → logprob: -18.00003433227539
    10. '_dir' → logprob: -18.12503433227539

Token 64: '_by' (ID: 8214)
  Prédit: '_by'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_by' → logprob: -0.00012976066500414163
    2. 'isible' → logprob: -9.125129699707031
    3. '_' → logprob: -11.250129699707031
    4. '_b' → logprob: -13.875129699707031
    5. 'by' → logprob: -14.000129699707031
    6. '_id' → logprob: -14.125129699707031
    7. '_BY' → logprob: -14.250129699707031
    8. 's' → logprob: -14.500129699707031
    9. '_val' → logprob: -14.500129699707031
    10. '_By' → logprob: -15.000129699707031

Token 65: '_' (ID: 62)
  Prédit: '_'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_' → logprob: -0.0008097442332655191
    2. '10' → logprob: -7.125809669494629
    3. '_by' → logprob: -12.500809669494629
    4. ' ' → logprob: -14.125809669494629
    5. ' _' → logprob: -15.625809669494629
    6. '__' → logprob: -15.625809669494629
    7. '-' → logprob: -16.125810623168945
    8. '_
' → logprob: -16.125810623168945
    9. '_

' → logprob: -16.500810623168945
    10. '1' → logprob: -16.500810623168945

Token 66: '10' (ID: 702)
  Prédit: '10'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '10' → logprob: -0.0004879915213678032
    2. '0' → logprob: -8.00048828125
    3. '1' → logprob: -8.87548828125
    4. '_' → logprob: -11.62548828125
    5. ' ' → logprob: -13.12548828125
    6. 'r' → logprob: -14.93798828125
    7. '```' → logprob: -15.18798828125
    8. 'n' → logprob: -16.18798828125
    9. '-' → logprob: -16.25048828125
    10. '(' → logprob: -16.25048828125

Token 67: '():
' (ID: 8595)
  Prédit: ':'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ':' → logprob: -0.08900293707847595
    2. '():' → logprob: -2.464002847671509
    3. ' :' → logprob: -9.96400260925293
    4. '()' → logprob: -11.83900260925293
    5. ' ():' → logprob: -12.58900260925293
    6. ':
' → logprob: -13.58900260925293
    7. '):' → logprob: -13.71400260925293
    8. ':**' → logprob: -13.83900260925293
    9. ' ==' → logprob: -14.58900260925293
    10. '():
' → logprob: -14.83900260925293

Token 68: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.07644034922122955
    2. 'print' → logprob: -3.3264403343200684
    3. ' print' → logprob: -3.7014403343200684
    4. ' ' → logprob: -4.451440334320068
    5. '\n' → logprob: -7.826440334320068
    6. '	print' → logprob: -7.951440334320068
    7. '\' → logprob: -8.826440811157227
    8. '
' → logprob: -9.076440811157227
    9. '    
' → logprob: -9.701440811157227
    10. '  
' → logprob: -10.201440811157227

Token 69: ' print' (ID: 2123)
  Prédit: 'print'
  Correct (stricte): False
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'print' (adapté à ' print') → logprob: -0.6808686852455139
    2. ' print' → logprob: -0.8058686852455139
    3. '   ' → logprob: -3.055868625640869
    4. ' ' → logprob: -10.680869102478027
    5. '	print' → logprob: -12.055869102478027
    6. '    ' → logprob: -13.305869102478027
    7. ' sum' → logprob: -13.430869102478027
    8. ' pass' → logprob: -13.555869102478027
    9. 'pass' → logprob: -14.180869102478027
    10. '```' → logprob: -14.180869102478027

Token 70: '(' (ID: 7)
  Prédit: '('
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(' → logprob: -0.023670395836234093
    2. '("' → logprob: -4.273670196533203
    3. '(n' → logprob: -5.398670196533203
    4. '()' → logprob: -6.023670196533203
    5. '('' → logprob: -6.273670196533203
    6. '(r' → logprob: -8.398670196533203
    7. '(sum' → logprob: -8.398670196533203
    8. '(int' → logprob: -9.398670196533203
    9. '0' → logprob: -10.148670196533203
    10. '(s' → logprob: -11.148670196533203

Token 71: '10' (ID: 702)
  Prédit: '"'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '"' → logprob: -0.2528396248817444
    2. '0' → logprob: -2.5028395652770996
    3. ''' → logprob: -3.3778395652770996
    4. 'sum' → logprob: -3.3778395652770996
    5. 'n' → logprob: -3.7528395652770996
    6. 'r' → logprob: -3.7528395652770996
    7. 'int' → logprob: -4.1278395652771
    8. '10' → logprob: -6.1278395652771
    9. ''s' → logprob: -6.3778395652771
    10. '1' → logprob: -6.3778395652771

Token 72: ')
' (ID: 446)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')' → logprob: -0.00011105302110081539
    2. ')
' → logprob: -9.375110626220703
    3. '0' → logprob: -11.125110626220703
    4. ' )' → logprob: -12.125110626220703
    5. '))' → logprob: -12.875110626220703
    6. '')' → logprob: -14.500110626220703
    7. '*' → logprob: -15.000110626220703
    8. '()' → logprob: -15.125110626220703
    9. 'else' → logprob: -15.125110626220703
    10. ' ' → logprob: -15.625110626220703

Token 73: 'else' (ID: 2807)
  Prédit: 'else'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'else' → logprob: -0.018312180414795876
    2. 'elif' → logprob: -4.018311977386475
    3. ' else' → logprob: -9.268312454223633
    4. '<|end|>' → logprob: -10.268312454223633
    5. ')' → logprob: -10.893312454223633
    6. ' ' → logprob: -12.893312454223633
    7. '   ' → logprob: -13.018312454223633
    8. '<|end|>' → logprob: -13.268312454223633
    9. '#else' → logprob: -13.518312454223633
    10. '}else' → logprob: -14.393312454223633

Token 74: ':
' (ID: 734)
  Prédit: ':'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ':' → logprob: -0.006580011919140816
    2. '   ' → logprob: -5.756579875946045
    3. ':
' → logprob: -5.881579875946045
    4. '(' → logprob: -9.131580352783203
    5. '    ' → logprob: -9.256580352783203
    6. ' :' → logprob: -9.381580352783203
    7. ' ' → logprob: -9.381580352783203
    8. 'print' → logprob: -9.756580352783203
    9. ' print' → logprob: -10.256580352783203
    10. '():' → logprob: -10.631580352783203

Token 75: '   ' (ID: 271)
  Prédit: 'print'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'print' → logprob: -0.2724008858203888
    2. '   ' → logprob: -1.6474008560180664
    3. ' print' → logprob: -3.1474008560180664
    4. ' ' → logprob: -6.647400856018066
    5. 'sum' → logprob: -7.772400856018066
    6. '1' → logprob: -7.897400856018066
    7. '    ' → logprob: -8.647400856018066
    8. '10' → logprob: -9.147400856018066
    9. '9' → logprob: -9.147400856018066
    10. '  ' → logprob: -9.272400856018066

Token 76: ' res' (ID: 694)
  Prédit: 'print'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'print' → logprob: -0.002415014896541834
    2. 'sum' → logprob: -6.752415180206299
    3. '   ' → logprob: -7.002415180206299
    4. ' print' → logprob: -8.62741470336914
    5. '10' → logprob: -10.25241470336914
    6. ' ' → logprob: -10.87741470336914
    7. 's' → logprob: -11.25241470336914
    8. 'def' → logprob: -11.75241470336914
    9. '9' → logprob: -11.87741470336914
    10. '1' → logprob: -11.87741470336914

Token 77: ' =' (ID: 314)
  Prédit: 'ult'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'ult' → logprob: -0.6910588145256042
    2. ' =' → logprob: -1.191058874130249
    3. '   ' → logprob: -3.316058874130249
    4. 'ults' → logprob: -3.316058874130249
    5. ' ' → logprob: -3.441058874130249
    6. '=' → logprob: -3.441058874130249
    7. ':' → logprob: -3.441058874130249
    8. 's' → logprob: -5.44105863571167
    9. 'print' → logprob: -5.56605863571167
    10. 'ultat' → logprob: -5.81605863571167

Token 78: ' ' (ID: 220)
  Prédit: 'sum'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'sum' → logprob: -0.06161804124712944
    2. 'r' → logprob: -3.9366180896759033
    3. 'n' → logprob: -4.311617851257324
    4. 'int' → logprob: -5.186617851257324
    5. 'res' → logprob: -5.936617851257324
    6. '(sum' → logprob: -5.936617851257324
    7. ' sum' → logprob: -5.936617851257324
    8. '10' → logprob: -5.936617851257324
    9. 'len' → logprob: -6.436617851257324
    10. 'max' → logprob: -6.561617851257324

Token 79: '0' (ID: 15)
  Prédit: 'sum'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'sum' → logprob: -0.1925351321697235
    2. 'r' → logprob: -3.317535161972046
    3. '1' → logprob: -3.567535161972046
    4. 'n' → logprob: -3.692535161972046
    5. '10' → logprob: -3.942535161972046
    6. '9' → logprob: -3.942535161972046
    7. 'int' → logprob: -4.442534923553467
    8. 'min' → logprob: -5.067534923553467
    9. 'len' → logprob: -5.567534923553467
    10. '-' → logprob: -5.567534923553467

Token 80: '
' (ID: 198)
  Prédit: ''
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False

Token 81: '   ' (ID: 271)
  Prédit: ' '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' ' → logprob: -0.8592736124992371
    2. '   ' → logprob: -1.2342736721038818
    3. ' for' → logprob: -2.109273672103882
    4. '    ' → logprob: -2.359273672103882
    5. '<|end|>' → logprob: -3.484273672103882
    6. 'for' → logprob: -3.984273672103882
    7. ' while' → logprob: -4.984273433685303
    8. ' i' → logprob: -6.359273433685303
    9. ' 
' → logprob: -6.484273433685303
    10. ' s' → logprob: -6.734273433685303

Token 82: ' i' (ID: 575)
  Prédit: 'for'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'for' → logprob: -0.35996007919311523
    2. 'while' → logprob: -1.3599600791931152
    3. 's' → logprob: -4.484960079193115
    4. 'temp' → logprob: -4.859960079193115
    5. 'num' → logprob: -5.609960079193115
    6. '   ' → logprob: -6.109960079193115
    7. 'i' (adapté à ' i') → logprob: -6.234960079193115
    8. 'n' → logprob: -6.234960079193115
    9. ' for' → logprob: -6.234960079193115
    10. 'if' → logprob: -6.234960079193115

Token 83: ' =' (ID: 314)
  Prédit: ' ='
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' =' → logprob: -0.30175861716270447
    2. '=' → logprob: -1.4267586469650269
    3. 'n' → logprob: -4.051758766174316
    4. 'nd' → logprob: -6.176758766174316
    5. ' ' → logprob: -7.926758766174316
    6. 'nt' → logprob: -8.551758766174316
    7. 'x' → logprob: -9.801758766174316
    8. 'f' → logprob: -9.801758766174316
    9. 'd' → logprob: -10.051758766174316
    10. ' n' → logprob: -10.176758766174316

Token 84: ' ' (ID: 220)
  Prédit: '1'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '1' → logprob: -0.08008481562137604
    2. '0' → logprob: -3.205084800720215
    3. ' ' → logprob: -3.330084800720215
    4. '10' → logprob: -8.080084800720215
    5. '2' → logprob: -8.330084800720215
    6. 'int' → logprob: -10.580084800720215
    7. '100' → logprob: -11.955084800720215
    8. 'n' → logprob: -12.205084800720215
    9. '9' → logprob: -12.705084800720215
    10. '  ' → logprob: -12.830084800720215

Token 85: '0' (ID: 15)
  Prédit: '1'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '1' → logprob: -0.21195153892040253
    2. '0' → logprob: -1.711951494216919
    3. '2' → logprob: -5.461951732635498
    4. '10' → logprob: -5.836951732635498
    5. 'int' → logprob: -6.836951732635498
    6. 'n' → logprob: -7.211951732635498
    7. 'sum' → logprob: -7.961951732635498
    8. '9' → logprob: -8.33695125579834
    9. '11' → logprob: -8.33695125579834
    10. 'len' → logprob: -8.46195125579834

Token 86: '
' (ID: 198)
  Prédit: ''
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False

Token 87: '   ' (ID: 271)
  Prédit: ''
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False

Token 88: ' while' (ID: 2049)
  Prédit: 'while'
  Correct (stricte): False
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'while' (adapté à ' while') → logprob: -0.40110689401626587
    2. ' while' → logprob: -1.151106834411621
    3. '   ' → logprob: -4.776106834411621
    4. 's' → logprob: -6.401106834411621
    5. 'w' → logprob: -6.651106834411621
    6. ' s' → logprob: -7.276106834411621
    7. 'n' → logprob: -7.401106834411621
    8. ' ' → logprob: -8.401106834411621
    9. 'wh' → logprob: -8.776106834411621
    10. 'd' → logprob: -8.901106834411621

Token 89: ' i' (ID: 575)
  Prédit: ' i'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' i' → logprob: -0.4509086310863495
    2. 'i' → logprob: -1.3259086608886719
    3. ' sum' → logprob: -3.450908660888672
    4. ' res' → logprob: -4.200908660888672
    5. 'sum' → logprob: -4.200908660888672
    6. ' True' → logprob: -4.700908660888672
    7. ' not' → logprob: -4.950908660888672
    8. ' int' → logprob: -5.075908660888672
    9. 'int' → logprob: -5.700908660888672
    10. 'True' → logprob: -6.075908660888672

Token 90: ' <' (ID: 464)
  Prédit: ' <'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' <' → logprob: -0.6065829992294312
    2. '<' → logprob: -1.2315829992294312
    3. '<len' → logprob: -1.8565829992294312
    4. ' ' → logprob: -6.231583118438721
    5. '<=' → logprob: -6.231583118438721
    6. ' <=' → logprob: -6.606583118438721
    7. '<n' → logprob: -7.231583118438721
    8. 'len' → logprob: -8.231582641601562
    9. ' len' → logprob: -8.606582641601562
    10. '<size' → logprob: -9.481582641601562

Token 91: ' len' (ID: 4631)
  Prédit: 'len'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'len' → logprob: -0.5603140592575073
    2. '10' → logprob: -1.8103140592575073
    3. ' len' → logprob: -1.8103140592575073
    4. ' ' → logprob: -3.310314178466797
    5. '100' → logprob: -3.310314178466797
    6. '20' → logprob: -4.685314178466797
    7. '6' → logprob: -5.560314178466797
    8. '9' → logprob: -5.685314178466797
    9. 'int' → logprob: -5.935314178466797
    10. '5' → logprob: -6.435314178466797

Token 92: '(n' (ID: 2406)
  Prédit: '(n'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(n' → logprob: -0.00029363270732574165
    2. '(r' → logprob: -8.625293731689453
    3. '(' → logprob: -9.125293731689453
    4. '(s' → logprob: -12.625293731689453
    5. 'n' → logprob: -14.625293731689453
    6. '(res' → logprob: -15.375293731689453
    7. ' (' → logprob: -15.500293731689453
    8. 'r' → logprob: -15.875293731689453
    9. '(str' → logprob: -15.875293731689453
    10. '(m' → logprob: -16.250293731689453

Token 93: '):
' (ID: 1883)
  Prédit: '):'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '):' → logprob: -0.13480234146118164
    2. ')' → logprob: -2.1348023414611816
    3. '):
' → logprob: -5.634802341461182
    4. ' ):' → logprob: -6.259802341461182
    5. ' and' → logprob: -6.509802341461182
    6. 'and' → logprob: -7.884802341461182
    7. '):
' → logprob: -8.634801864624023
    8. ' )' → logprob: -8.884801864624023
    9. ' ' → logprob: -9.634801864624023
    10. ':' → logprob: -10.259801864624023

Token 94: '       ' (ID: 309)
  Prédit: ' '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' ' → logprob: -0.381182461977005
    2. '       ' → logprob: -1.5061824321746826
    3. '<|end|>' → logprob: -3.3811824321746826
    4. '    ' → logprob: -3.6311824321746826
    5. ' 
' → logprob: -4.006182670593262
    6. '+' → logprob: -6.006182670593262
    7. ':' → logprob: -6.381182670593262
    8. '        
' → logprob: -6.631182670593262
    9. '  
' → logprob: -6.631182670593262
    10. '   ' → logprob: -6.631182670593262

Token 95: ' res' (ID: 694)
  Prédit: ' if'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' if' → logprob: -0.3501741290092468
    2. ' res' → logprob: -2.3501741886138916
    3. ' c' → logprob: -2.6001741886138916
    4. 'if' → logprob: -2.9751741886138916
    5. '       ' → logprob: -4.2251739501953125
    6. '   ' → logprob: -4.2251739501953125
    7. 'res' (adapté à ' res') → logprob: -4.4751739501953125
    8. 'c' → logprob: -4.9751739501953125
    9. ' ' → logprob: -5.1001739501953125
    10. ' s' → logprob: -5.1001739501953125

Token 96: ' +=' (ID: 2757)
  Prédit: ' +='
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' +=' → logprob: -0.02728378213942051
    2. '+=' → logprob: -3.6522836685180664
    3. ' =' → logprob: -7.152283668518066
    4. '=' → logprob: -9.652283668518066
    5. ' ' → logprob: -9.902283668518066
    6. '+' → logprob: -9.902283668518066
    7. ' +' → logprob: -11.027283668518066
    8. '+=(' → logprob: -12.277283668518066
    9. ' |=' → logprob: -12.527283668518066
    10. ']+=' → logprob: -12.902283668518066

Token 97: ' int' (ID: 677)
  Prédit: 'int'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'int' → logprob: -0.021853255107998848
    2. 'sum' → logprob: -3.89685320854187
    3. ' int' → logprob: -6.896853446960449
    4. '10' → logprob: -9.14685344696045
    5. '1' → logprob: -9.27185344696045
    6. ' sum' → logprob: -10.27185344696045
    7. ' ' → logprob: -11.02185344696045
    8. '   ' → logprob: -11.27185344696045
    9. '(int' → logprob: -12.14685344696045
    10. 'res' → logprob: -12.27185344696045

Token 98: '(n' (ID: 2406)
  Prédit: '(n'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(n' → logprob: -0.0019341122824698687
    2. '(' → logprob: -6.251934051513672
    3. '(s' → logprob: -13.501934051513672
    4. '('' → logprob: -13.751934051513672
    5. 'n' → logprob: -14.001934051513672
    6. '(r' → logprob: -14.251934051513672
    7. '(
' → logprob: -14.376934051513672
    8. '(

' → logprob: -15.876934051513672
    9. '(i' → logprob: -16.126934051513672
    10. '()' → logprob: -16.376934051513672

Token 99: '[i' (ID: 1768)
  Prédit: '[i'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '[i' → logprob: -4.310693111619912e-05
    2. '[' → logprob: -10.500042915344238
    3. ')' → logprob: -11.625042915344238
    4. 'i' → logprob: -13.250042915344238
    5. '[n' → logprob: -13.375042915344238
    6. ' ' → logprob: -14.125042915344238
    7. ' [' → logprob: -14.625042915344238
    8. '[
' → logprob: -14.875042915344238
    9. ')[' → logprob: -15.000042915344238
    10. '[j' → logprob: -15.375042915344238

Token 100: '])
' (ID: 5169)
  Prédit: '])'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '])' → logprob: -0.0013588056899607182
    2. '])
' → logprob: -7.376358985900879
    3. ']' → logprob: -8.251358985900879
    4. ')' → logprob: -8.376358985900879
    5. '])+' → logprob: -9.751358985900879
    6. ' ])' → logprob: -9.876358985900879
    7. '])*' → logprob: -10.126358985900879
    8. ''])' → logprob: -10.501358985900879
    9. ')])' → logprob: -11.001358985900879
    10. ']))' → logprob: -11.626358985900879

Token 101: '       ' (ID: 309)
  Prédit: '       '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '       ' → logprob: -0.02733435109257698
    2. '
' → logprob: -3.902334451675415
    3. '        
' → logprob: -6.527334213256836
    4. ' ' → logprob: -6.777334213256836
    5. '   ' → logprob: -6.902334213256836
    6. ' i' → logprob: -7.402334213256836
    7. '+' → logprob: -7.527334213256836
    8. 'i' → logprob: -7.652334213256836
    9. '
' → logprob: -7.902334213256836
    10. ' +' → logprob: -8.402334213256836

Token 102: ' i' (ID: 575)
  Prédit: 'i'
  Correct (stricte): False
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'i' (adapté à ' i') → logprob: -0.8072816133499146
    2. 'if' → logprob: -0.8072816133499146
    3. '       ' → logprob: -2.557281494140625
    4. ' if' → logprob: -3.807281494140625
    5. ' i' → logprob: -4.932281494140625
    6. '   ' → logprob: -7.807281494140625
    7. ' ' → logprob: -8.057281494140625
    8. 's' → logprob: -10.807281494140625
    9. 'res' → logprob: -10.932281494140625
    10. '  ' → logprob: -11.057281494140625

Token 103: ' +=' (ID: 2757)
  Prédit: '+='
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '+=' → logprob: -0.20630919933319092
    2. ' +=' → logprob: -1.706309199333191
    3. '+' → logprob: -5.3313093185424805
    4. '=' → logprob: -10.20630931854248
    5. ' ' → logprob: -12.83130931854248
    6. '++' → logprob: -13.33130931854248
    7. ' +' → logprob: -13.33130931854248
    8. '1' → logprob: -13.70630931854248
    9. '+='' → logprob: -14.33130931854248
    10. ']+=' → logprob: -14.70630931854248

Token 104: ' ' (ID: 220)
  Prédit: '1'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '1' → logprob: -0.0006274910410866141
    2. ' ' → logprob: -7.625627517700195
    3. '10' → logprob: -9.875627517700195
    4. '2' → logprob: -10.250627517700195
    5. '3' → logprob: -10.875627517700195
    6. '4' → logprob: -12.125627517700195
    7. '5' → logprob: -12.250627517700195
    8. '   ' → logprob: -12.688127517700195
    9. '6' → logprob: -12.750627517700195
    10. '7' → logprob: -12.750627517700195

Token 105: '1' (ID: 16)
  Prédit: '1'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '1' → logprob: -0.0002572865632828325
    2. ' ' → logprob: -8.87525749206543
    3. '10' → logprob: -9.87525749206543
    4. '2' → logprob: -10.62525749206543
    5. '3' → logprob: -11.25025749206543
    6. '5' → logprob: -12.25025749206543
    7. '7' → logprob: -12.37525749206543
    8. '100' → logprob: -12.43775749206543
    9. '9' → logprob: -12.56275749206543
    10. '4' → logprob: -12.62525749206543

Token 106: '
' (ID: 198)
  Prédit: '
'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '
' → logprob: -0.03264056146144867
    2. ' 
' → logprob: -4.15764045715332
    3. 'print' → logprob: -4.90764045715332
    4. ' ' → logprob: -5.53264045715332
    5. '  
' → logprob: -6.53264045715332
    6. '<|end|>' → logprob: -6.65764045715332
    7. ' print' → logprob: -7.53264045715332
    8. ' if' → logprob: -7.78264045715332
    9. '```' → logprob: -8.40764045715332
    10. '   ' → logprob: -8.65764045715332

Token 107: '   ' (ID: 271)
  Prédit: '
'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '
' → logprob: -0.32933005690574646
    2. 'print' → logprob: -1.5793300867080688
    3. ' if' → logprob: -3.9543299674987793
    4. ' ' → logprob: -4.204329967498779
    5. ' 
' → logprob: -4.454329967498779
    6. ' print' → logprob: -4.704329967498779
    7. 'if' → logprob: -4.954329967498779
    8. '   ' → logprob: -5.079329967498779
    9. '  
' → logprob: -6.454329967498779
    10. '    
' → logprob: -7.329329967498779

Token 108: ' print' (ID: 2123)
  Prédit: 'print'
  Correct (stricte): False
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'print' (adapté à ' print') → logprob: -0.5558061599731445
    2. '
' → logprob: -1.4308061599731445
    3. '   ' → logprob: -2.1808061599731445
    4. ' if' → logprob: -3.4308061599731445
    5. 'if' → logprob: -4.0558061599731445
    6. ' print' → logprob: -4.1808061599731445
    7. ' 
' → logprob: -6.0558061599731445
    8. ' ' → logprob: -6.4308061599731445
    9. '    
' → logprob: -6.5558061599731445
    10. '    ' → logprob: -6.6808061599731445

Token 109: '(res' (ID: 8331)
  Prédit: '(res'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(res' → logprob: -0.0024763736873865128
    2. '(' → logprob: -6.002476215362549
    3. '()' → logprob: -15.252476692199707
    4. '((' → logprob: -15.627476692199707
    5. 'res' → logprob: -15.877476692199707
    6. '('' → logprob: -16.25247573852539
    7. ' (' → logprob: -16.87747573852539
    8. '(max' → logprob: -17.87747573852539
    9. '(
' → logprob: -18.12747573852539
    10. '(s' → logprob: -18.50247573852539

Token 110: ' if' (ID: 538)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ')' → logprob: -5.512236498361744e-07
    2. ' )' → logprob: -14.875000953674316
    3. '))' → logprob: -17.25
    4. ')
' → logprob: -18.0
    5. ')`' → logprob: -18.75
    6. ')#' → logprob: -19.125
    7. '')' → logprob: -19.25
    8. '`)' → logprob: -19.875
    9. '```' → logprob: -20.25
    10. '）' → logprob: -20.25

Token 111: ' res' (ID: 694)
  Prédit: ' res'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' res' → logprob: -0.36415600776672363
    2. 'res' → logprob: -1.4891560077667236
    3. ' sum' → logprob: -3.4891560077667236
    4. ' not' → logprob: -3.7391560077667236
    5. 'sum' → logprob: -4.2391557693481445
    6. ' r' → logprob: -6.4891557693481445
    7. 'not' → logprob: -6.6141557693481445
    8. ' n' → logprob: -6.6141557693481445
    9. ' len' → logprob: -6.6141557693481445
    10. 'r' → logprob: -6.8641557693481445

Token 112: '==' (ID: 560)
  Prédit: '%'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '%' → logprob: -0.38398227095603943
    2. ' %' → logprob: -2.0089821815490723
    3. '<' → logprob: -2.1339821815490723
    4. ' <' → logprob: -2.8839821815490723
    5. '<=' → logprob: -5.508982181549072
    6. ' <=' → logprob: -6.258982181549072
    7. '!=' → logprob: -6.383982181549072
    8. ' !=' → logprob: -6.883982181549072
    9. ' else' → logprob: -7.008982181549072
    10. '>=' → logprob: -8.25898265838623

Token 113: 'sum' (ID: 12298)
  Prédit: '0'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '0' → logprob: -0.4033556878566742
    2. '10' → logprob: -1.2783557176589966
    3. ' ' → logprob: -3.278355598449707
    4. '1' → logprob: -4.403355598449707
    5. 'int' → logprob: -6.528355598449707
    6. '5' → logprob: -7.278355598449707
    7. '9' → logprob: -8.028355598449707
    8. 'sum' → logprob: -8.153355598449707
    9. ' int' → logprob: -8.903355598449707
    10. 'n' → logprob: -9.465855598449707

Token 114: '_digits' (ID: 108638)
  Prédit: '_digits'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_digits' → logprob: -0.0002217748697148636
    2. '(int' → logprob: -8.625222206115723
    3. '(sum' → logprob: -10.875222206115723
    4. '(_' → logprob: -11.625222206115723
    5. '(n' → logprob: -12.125222206115723
    6. 'digits' → logprob: -13.250222206115723
    7. '(' → logprob: -13.375222206115723
    8. 'Digits' → logprob: -13.500222206115723
    9. '_digit' → logprob: -14.250222206115723
    10. '_letters' → logprob: -14.500222206115723

Token 115: '(n' (ID: 2406)
  Prédit: '(n'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(n' → logprob: -2.3557529857498594e-05
    2. '(' → logprob: -11.25002384185791
    3. ' (' → logprob: -11.87502384185791
    4. '(str' → logprob: -14.00002384185791
    5. '((' → logprob: -14.12502384185791
    6. ')' → logprob: -14.50002384185791
    7. '(r' → logprob: -14.87502384185791
    8. '(s' → logprob: -15.12502384185791
    9. '('' → logprob: -15.50002384185791
    10. '(res' → logprob: -15.50002384185791

Token 116: ')' (ID: 8)
  Prédit: ' else'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' else' → logprob: -0.09694968909025192
    2. 'else' → logprob: -2.721949577331543
    3. ')' → logprob: -3.721949577331543
    4. '()' → logprob: -6.346949577331543
    5. ' ' → logprob: -7.596949577331543
    6. ' or' → logprob: -9.596949577331543
    7. ' )' → logprob: -9.971949577331543
    8. '))' → logprob: -10.096949577331543
    9. '())' → logprob: -10.596949577331543
    10. '	else' → logprob: -11.971949577331543

Token 117: ' else' (ID: 1203)
  Prédit: ' else'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' else' → logprob: -0.17985646426677704
    2. 'else' → logprob: -1.8048564195632935
    3. ')' → logprob: -9.429856300354004
    4. ' ' → logprob: -11.054856300354004
    5. ' )' → logprob: -11.429856300354004
    6. '	else' → logprob: -13.179856300354004
    7. '0' → logprob: -15.054856300354004
    8. ' or' → logprob: -15.054856300354004
    9. ' ' → logprob: -15.179856300354004
    10. '_else' → logprob: -15.179856300354004

Token 118: ' sum' (ID: 4215)
  Prédit: 'sum'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'sum' → logprob: -0.770418643951416
    2. '0' → logprob: -0.895418643951416
    3. 'res' → logprob: -2.645418643951416
    4. '"' → logprob: -4.020418643951416
    5. '10' → logprob: -4.520418643951416
    6. ' sum' → logprob: -4.645418643951416
    7. ' ' → logprob: -5.020418643951416
    8. ')' → logprob: -5.645418643951416
    9. ' res' → logprob: -6.020418643951416
    10. ''' → logprob: -6.395418643951416

Token 119: '_digits' (ID: 108638)
  Prédit: '_digits'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_digits' → logprob: -0.00031508569372817874
    2. '_' → logprob: -8.625314712524414
    3. ')' → logprob: -10.500314712524414
    4. '(' → logprob: -10.875314712524414
    5. '(sum' → logprob: -11.125314712524414
    6. '(_' → logprob: -11.375314712524414
    7. 'digits' → logprob: -11.875314712524414
    8. 'Digits' → logprob: -12.125314712524414
    9. '(s' → logprob: -12.125314712524414
    10. ' _' → logprob: -12.125314712524414

Token 120: '(n' (ID: 2406)
  Prédit: '(n'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(n' → logprob: -0.0037564942613244057
    2. '(' → logprob: -5.753756523132324
    3. '(s' → logprob: -7.753756523132324
    4. ' (' → logprob: -9.378756523132324
    5. ')' → logprob: -9.753756523132324
    6. '(sum' → logprob: -13.128756523132324
    7. '(res' → logprob: -14.128756523132324
    8. 's' → logprob: -14.503756523132324
    9. ' ' → logprob: -14.628756523132324
    10. '()' → logprob: -14.628756523132324

Token 121: '))' (ID: 915)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')' → logprob: -0.6374330520629883
    2. '))' → logprob: -0.7624330520629883
    3. '())' → logprob: -5.637433052062988
    4. '(n' → logprob: -7.387433052062988
    5. ')))' → logprob: -8.012433052062988
    6. '()))' → logprob: -8.762433052062988
    7. '()' → logprob: -10.387433052062988
    8. ' )' → logprob: -10.512433052062988
    9. ')n' → logprob: -10.637433052062988
    10. '(' → logprob: -11.012433052062988


RÉSUMÉ:
--------------------------------------------------------------------------------
Total des tokens analysés: 119
Tokens correctement prédits (1ère position, stricte): 53
Tokens correctement prédits (1ère position, avec adaptation): 57
Tokens correctement prédits (top 10): 97
Précision stricte (1ère position): 44.54%
Précision adaptée (1ère position): 47.90%
Précision (top 10): 81.51%
================================================================================
