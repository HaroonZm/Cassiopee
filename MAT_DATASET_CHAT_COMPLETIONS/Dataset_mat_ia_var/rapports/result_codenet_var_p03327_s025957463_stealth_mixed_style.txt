================================================================================
ANALYSE DE PRÉDICTION TOKEN PAR TOKEN (BATCH API)
Date: 2025-06-04 20:16:20
Modèle de tokenisation: gpt-4o-mini
================================================================================

SCRIPT ANALYSÉ:
--------------------------------------------------------------------------------
N = int(input())
def check(n):
    if n < 1000:
        return "ABC"
    return "ABD"

class Printer:
    def __init__(self, value):
        self.value = value
    def out(self):
        print(self.value)

if N < 1000:
    for msg in [check(N)]:
        Printer(msg).out()
else:
    (lambda x: print(x))(check(N))
--------------------------------------------------------------------------------

RÉSULTATS D'ANALYSE TOKEN PAR TOKEN:
--------------------------------------------------------------------------------
Token 0: 'N' (ID: 45)
  → Token d'amorce (pas de prédiction)

Token 1: ' =' (ID: 314)
  → Token d'amorce (pas de prédiction)

Token 2: ' int' (ID: 677)
  → Token d'amorce (pas de prédiction)

Token 3: '(input' (ID: 10054)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '(' → logprob: -0.0001967457792488858
    2. '```' → logprob: -9.50019645690918
    3. '(N' → logprob: -10.37519645690918
    4. '`' → logprob: -10.87519645690918
    5. '(
' → logprob: -11.00019645690918
    6. ')' → logprob: -11.62519645690918
    7. '("("' → logprob: -11.62519645690918
    8. ''' → logprob: -11.62519645690918
    9. '()' → logprob: -11.87519645690918
    10. '('' → logprob: -12.25019645690918

Token 4: '())
' (ID: 4574)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '(' → logprob: -0.5316423177719116
    2. ')' → logprob: -0.9066423177719116
    3. '()' → logprob: -5.156642436981201
    4. '())' → logprob: -6.656642436981201
    5. '(
' → logprob: -7.656642436981201
    6. '```' → logprob: -8.781641960144043
    7. '))' → logprob: -8.906641960144043
    8. '")' → logprob: -9.406641960144043
    9. '')' → logprob: -9.531641960144043
    10. '(

' → logprob: -9.906641960144043

Token 5: 'def' (ID: 1314)
  Prédit: 'if'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'if' → logprob: -1.8439445495605469
    2. 'for' → logprob: -1.8439445495605469
    3. 'a' → logprob: -2.093944549560547
    4. 's' → logprob: -2.218944549560547
    5. '*' → logprob: -2.593944549560547
    6. ''' → logprob: -2.843944549560547
    7. ')' → logprob: -3.218944549560547
    8. 'x' → logprob: -3.218944549560547
    9. 'i' → logprob: -3.218944549560547
    10. '#' → logprob: -3.218944549560547

Token 6: ' check' (ID: 2371)
  Prédit: ' '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' ' → logprob: -0.04401347413659096
    2. ' factorial' → logprob: -3.919013500213623
    3. ' f' → logprob: -4.544013500213623
    4. ' my' → logprob: -5.794013500213623
    5. ' main' → logprob: -6.544013500213623
    6. ' space' → logprob: -6.544013500213623
    7. ' max' → logprob: -7.044013500213623
    8. '_' → logprob: -7.294013500213623
    9. ' func' → logprob: -7.419013500213623
    10. ' function' → logprob: -7.669013500213623

Token 7: '(n' (ID: 2406)
  Prédit: '_'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '_' → logprob: -0.06251240521669388
    2. '(' → logprob: -2.8125123977661133
    3. ' _' → logprob: -8.812512397766113
    4. '_(' → logprob: -8.937512397766113
    5. ' (' → logprob: -10.062512397766113
    6. '_s' → logprob: -10.062512397766113
    7. ' ' → logprob: -10.687512397766113
    8. ')' → logprob: -10.812512397766113
    9. '(_)' → logprob: -10.812512397766113
    10. '_space' → logprob: -10.937512397766113

Token 8: '):
' (ID: 1883)
  Prédit: '):'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '):' → logprob: -0.3853590488433838
    2. ')' → logprob: -1.2603590488433838
    3. '_' → logprob: -3.385359048843384
    4. ',' → logprob: -6.760358810424805
    5. '(' → logprob: -8.010358810424805
    6. ' ):' → logprob: -8.385358810424805
    7. ':' → logprob: -9.260358810424805
    8. ' )' → logprob: -10.010358810424805
    9. '_)' → logprob: -10.010358810424805
    10. ')_' → logprob: -10.010358810424805

Token 9: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.1041017398238182
    2. ':' → logprob: -2.4791016578674316
    3. ' ' → logprob: -4.979101657867432
    4. '(' → logprob: -5.354101657867432
    5. '```' → logprob: -6.729101657867432
    6. '    ' → logprob: -7.479101657867432
    7. ':return' → logprob: -8.10410213470459
    8. ''' → logprob: -8.22910213470459
    9. ':
' → logprob: -8.60410213470459
    10. '  ' → logprob: -8.97910213470459

Token 10: ' if' (ID: 538)
  Prédit: ' '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' ' → logprob: -0.6356215476989746
    2. '   ' → logprob: -1.0106215476989746
    3. ' if' → logprob: -3.8856215476989746
    4. ' i' → logprob: -4.010621547698975
    5. '    ' → logprob: -4.135621547698975
    6. ' return' → logprob: -4.385621547698975
    7. 'r' → logprob: -4.510621547698975
    8. 'i' → logprob: -5.135621547698975
    9. 'if' (adapté à ' if') → logprob: -6.135621547698975
    10. ' \' → logprob: -6.260621547698975

Token 11: ' n' (ID: 297)
  Prédit: ' n'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' n' → logprob: -0.28455233573913574
    2. ' ' → logprob: -1.4095523357391357
    3. 'n' → logprob: -5.784552574157715
    4. ' not' → logprob: -8.784552574157715
    5. ' N' → logprob: -9.409552574157715
    6. ' ' → logprob: -10.409552574157715
    7. ' (' → logprob: -10.534552574157715
    8. '  ' → logprob: -11.284552574157715
    9. '(n' → logprob: -12.784552574157715
    10. 'not' → logprob: -13.534552574157715

Token 12: ' <' (ID: 464)
  Prédit: ' %'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' %' → logprob: -0.10399088263511658
    2. '%' → logprob: -2.9789907932281494
    3. ' >' → logprob: -3.7289907932281494
    4. ' ' → logprob: -4.2289910316467285
    5. '>' → logprob: -5.6039910316467285
    6. ' ==' → logprob: -5.9789910316467285
    7. ' >=' → logprob: -6.7289910316467285
    8. ' <=' → logprob: -7.1039910316467285
    9. '==' → logprob: -7.6039910316467285
    10. ' <' → logprob: -7.8539910316467285

Token 13: ' ' (ID: 220)
  Prédit: ' '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' ' → logprob: -0.7083759903907776
    2. '=' → logprob: -1.3333759307861328
    3. '10' → logprob: -2.333375930786133
    4. '0' → logprob: -2.458375930786133
    5. '1' → logprob: -3.333375930786133
    6. '2' → logprob: -4.458375930786133
    7. '20' → logprob: -5.083375930786133
    8. '5' → logprob: -6.083375930786133
    9. '100' → logprob: -6.208375930786133
    10. '3' → logprob: -6.708375930786133

Token 14: '100' (ID: 1353)
  Prédit: '2'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '2' → logprob: -0.3891547620296478
    2. '10' → logprob: -1.6391547918319702
    3. '0' → logprob: -2.2641546726226807
    4. '1' → logprob: -4.76415491104126
    5. '5' → logprob: -5.38915491104126
    6. '100' → logprob: -5.38915491104126
    7. '50' → logprob: -6.13915491104126
    8. '3' → logprob: -6.63915491104126
    9. ' ' → logprob: -7.13915491104126
    10. '20' → logprob: -7.26415491104126

Token 15: '0' (ID: 15)
  Prédit: ':'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ':' → logprob: -0.021594056859612465
    2. '0' → logprob: -4.521594047546387
    3. ' :' → logprob: -4.771594047546387
    4. '):' → logprob: -6.521594047546387
    5. ' and' → logprob: -8.646594047546387
    6. '>:' → logprob: -8.896594047546387
    7. '():' → logprob: -9.146594047546387
    8. ':return' → logprob: -10.146594047546387
    9. ' ):' → logprob: -11.521594047546387
    10. '   ' → logprob: -11.521594047546387

Token 16: ':
' (ID: 734)
  Prédit: ':'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ':' → logprob: -0.0018558192532509565
    2. ' :' → logprob: -7.001855850219727
    3. '):' → logprob: -7.126855850219727
    4. ':return' → logprob: -9.626855850219727
    5. ':
' → logprob: -10.751855850219727
    6. '':' → logprob: -11.001855850219727
    7. ' and' → logprob: -12.001855850219727
    8. '   ' → logprob: -12.126855850219727
    9. '>:' → logprob: -12.376855850219727
    10. ':**' → logprob: -12.376855850219727

Token 17: '       ' (ID: 309)
  Prédit: '       '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '       ' → logprob: -0.37381285429000854
    2. ':' → logprob: -1.7488129138946533
    3. '    ' → logprob: -2.2488129138946533
    4. '   ' → logprob: -4.373812675476074
    5. ' :' → logprob: -4.748812675476074
    6. ':return' → logprob: -5.373812675476074
    7. ' return' → logprob: -5.623812675476074
    8. 'return' → logprob: -7.998812675476074
    9. '):' → logprob: -7.998812675476074
    10. ':
' → logprob: -8.123812675476074

Token 18: ' return' (ID: 622)
  Prédit: ' return'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' return' → logprob: -0.532412052154541
    2. 'return' (adapté à ' return') → logprob: -0.907412052154541
    3. '   ' → logprob: -4.907412052154541
    4. '       ' → logprob: -6.657412052154541
    5. '    ' → logprob: -8.407411575317383
    6. 'print' → logprob: -9.032411575317383
    7. ' ' → logprob: -9.532411575317383
    8. ' print' → logprob: -9.532411575317383
    9. '	return' → logprob: -10.782411575317383
    10. ':return' → logprob: -11.282411575317383

Token 19: ' "' (ID: 392)
  Prédit: ' True'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' True' → logprob: -0.9609372615814209
    2. ' ' → logprob: -1.335937261581421
    3. ' n' → logprob: -2.085937261581421
    4. '"' → logprob: -2.960937261581421
    5. ' False' → logprob: -2.960937261581421
    6. 'True' → logprob: -2.960937261581421
    7. 'False' → logprob: -3.460937261581421
    8. ''' → logprob: -4.3359375
    9. '0' → logprob: -4.7109375
    10. ' None' → logprob: -5.3359375

Token 20: 'ABC' (ID: 44197)
  Prédit: 'Yes'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'Yes' → logprob: -0.8944706320762634
    2. '"' → logprob: -1.6444706916809082
    3. 'YES' → logprob: -2.394470691680908
    4. 'True' → logprob: -2.644470691680908
    5. 'No' → logprob: -3.019470691680908
    6. 'OK' → logprob: -4.019470691680908
    7. 'Valid' → logprob: -4.269470691680908
    8. 'n' → logprob: -4.394470691680908
    9. 'Good' → logprob: -4.394470691680908
    10. 'NO' → logprob: -4.519470691680908

Token 21: '"
' (ID: 1092)
  Prédit: '"'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '"' → logprob: -0.0004260276327840984
    2. '")' → logprob: -8.875426292419434
    3. '"
' → logprob: -9.000426292419434
    4. 'D' → logprob: -10.000426292419434
    5. 'A' → logprob: -10.750426292419434
    6. '\n' → logprob: -10.875426292419434
    7. ')' → logprob: -11.500426292419434
    8. 'def' → logprob: -11.750426292419434
    9. '```' → logprob: -12.125426292419434
    10. '"
' → logprob: -12.625426292419434

Token 22: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.06200869008898735
    2. ' else' → logprob: -4.187008857727051
    3. 'else' → logprob: -4.562008857727051
    4. '    
' → logprob: -4.562008857727051
    5. '```' → logprob: -4.937008857727051
    6. '
' → logprob: -5.187008857727051
    7. '\n' → logprob: -5.562008857727051
    8. '<|end|>' → logprob: -6.062008857727051
    9. 'elif' → logprob: -6.937008857727051
    10. ':' → logprob: -7.437008857727051

Token 23: ' return' (ID: 622)
  Prédit: 'else'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'else' → logprob: -0.4398517310619354
    2. '   ' → logprob: -1.6898517608642578
    3. ' else' → logprob: -2.314851760864258
    4. 'elif' → logprob: -2.939851760864258
    5. '
' → logprob: -4.939851760864258
    6. '    
' → logprob: -5.439851760864258
    7. ' elif' → logprob: -6.814851760864258
    8. '```' → logprob: -6.939851760864258
    9. '<|end|>' → logprob: -7.189851760864258
    10. '	else' → logprob: -7.439851760864258

Token 24: ' "' (ID: 392)
  Prédit: '"'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '"' → logprob: -0.0035181138664484024
    2. ' "' → logprob: -5.753518104553223
    3. '""' → logprob: -9.503518104553223
    4. ' ' → logprob: -9.753518104553223
    5. ''' → logprob: -9.753518104553223
    6. '"A' → logprob: -10.253518104553223
    7. 'None' → logprob: -10.753518104553223
    8. 'def' → logprob: -11.003518104553223
    9. ' None' → logprob: -11.253518104553223
    10. '"B' → logprob: -11.628518104553223

Token 25: 'ABD' (ID: 193992)
  Prédit: 'XYZ'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'XYZ' → logprob: -1.3489856719970703
    2. 'BCD' → logprob: -1.8489856719970703
    3. 'ABC' → logprob: -2.0989856719970703
    4. 'DEF' → logprob: -2.0989856719970703
    5. '"' → logprob: -2.2239856719970703
    6. 'B' → logprob: -2.9739856719970703
    7. 'ABD' → logprob: -3.0989856719970703
    8. 'D' → logprob: -3.7239856719970703
    9. 'ARC' → logprob: -3.8489856719970703
    10. 'BBB' → logprob: -4.09898567199707

Token 26: '"

' (ID: 2678)
  Prédit: '"'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '"' → logprob: -3.869639476761222e-05
    2. '```' → logprob: -10.250039100646973
    3. '"
' → logprob: -14.000039100646973
    4. '"`' → logprob: -14.250039100646973
    5. '"""' → logprob: -14.750039100646973
    6. '")' → logprob: -14.875039100646973
    7. ' "' → logprob: -15.250039100646973
    8. ''"' → logprob: -15.875039100646973
    9. '\n' → logprob: -16.125038146972656
    10. '"A' → logprob: -16.250038146972656

Token 27: 'class' (ID: 1444)
  Prédit: 'result'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'result' → logprob: -0.6170336008071899
    2. 'print' → logprob: -0.8670336008071899
    3. 'if' → logprob: -4.2420334815979
    4. 'for' → logprob: -4.3670334815979
    5. '
' → logprob: -5.4920334815979
    6. '\n' → logprob: -5.7420334815979
    7. '```' → logprob: -6.6170334815979
    8. '' → logprob: -7.3670334815979
    9. 'r' → logprob: -7.4920334815979
    10. 'n' → logprob: -7.7420334815979

Token 28: ' Printer' (ID: 71701)
  Prédit: ' Solution'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' Solution' → logprob: -0.6935752630233765
    2. ' My' → logprob: -1.4435752630233765
    3. ' ' → logprob: -1.8185752630233765
    4. ' Student' → logprob: -4.068575382232666
    5. ' Space' → logprob: -4.068575382232666
    6. ' Calculator' → logprob: -4.443575382232666
    7. ' Solver' → logprob: -4.443575382232666
    8. ' Test' → logprob: -4.693575382232666
    9. ' Tester' → logprob: -5.318575382232666
    10. ' User' → logprob: -5.318575382232666

Token 29: ':
' (ID: 734)
  Prédit: ':'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ':' → logprob: -0.0002072357019642368
    2. '(' → logprob: -9.12520694732666
    3. ' :' → logprob: -10.12520694732666
    4. '):' → logprob: -10.87520694732666
    5. '():' → logprob: -11.00020694732666
    6. ':
' → logprob: -11.50020694732666
    7. ':**' → logprob: -12.37520694732666
    8. '<|end|>' → logprob: -13.25020694732666
    9. '>:' → logprob: -13.75020694732666
    10. '```' → logprob: -13.75020694732666

Token 30: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.352970689535141
    2. '<|end|>' → logprob: -2.102970600128174
    3. ':' → logprob: -2.477970600128174
    4. '
' → logprob: -3.352970600128174
    5. ' 
' → logprob: -4.227970600128174
    6. ' def' → logprob: -4.352970600128174
    7. '    
' → logprob: -4.602970600128174
    8. '    ' → logprob: -4.977970600128174
    9. '<|end|>' → logprob: -5.477970600128174
    10. '```' → logprob: -6.727970600128174

Token 31: ' def' (ID: 1056)
  Prédit: ' def'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' def' → logprob: -0.0004648696631193161
    2. '   ' → logprob: -8.25046443939209
    3. 'def' (adapté à ' def') → logprob: -8.62546443939209
    4. ' pass' → logprob: -11.62546443939209
    5. '```' → logprob: -12.50046443939209
    6. '	def' → logprob: -12.87546443939209
    7. ' 
' → logprob: -13.25046443939209
    8. '    ' → logprob: -13.37546443939209
    9. ' ' → logprob: -13.62546443939209
    10. ' ```' → logprob: -14.00046443939209

Token 32: ' __' (ID: 2516)
  Prédit: ' __'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' __' → logprob: -0.05407320335507393
    2. ' print' → logprob: -4.054073333740234
    3. '__' → logprob: -4.179073333740234
    4. '_' → logprob: -5.054073333740234
    5. ' ' → logprob: -5.429073333740234
    6. ' init' → logprob: -5.929073333740234
    7. '_init' → logprob: -6.304073333740234
    8. 'init' → logprob: -6.554073333740234
    9. ' def' → logprob: -6.804073333740234
    10. ' _' → logprob: -6.929073333740234

Token 33: 'init' (ID: 3287)
  Prédit: 'init'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'init' → logprob: -4.723352049040841e-06
    2. 'ini' → logprob: -12.625004768371582
    3. 'in' → logprob: -14.875004768371582
    4. 'new' → logprob: -15.125004768371582
    5. 'call' → logprob: -15.125004768371582
    6. 'i' → logprob: -15.625004768371582
    7. 'inite' → logprob: -15.875004768371582
    8. ' init' → logprob: -16.250003814697266
    9. 'innit' → logprob: -16.625003814697266
    10. '_init' → logprob: -17.250003814697266

Token 34: '__(' (ID: 8241)
  Prédit: '__('
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '__(' → logprob: -0.07893462479114532
    2. '__' → logprob: -2.578934669494629
    3. '__(
' → logprob: -10.453934669494629
    4. '__('' → logprob: -11.828934669494629
    5. '__((' → logprob: -12.328934669494629
    6. '(self' → logprob: -13.453934669494629
    7. '(' → logprob: -14.328934669494629
    8. '___' → logprob: -14.453934669494629
    9. '__("' → logprob: -14.703934669494629
    10. '__(*' → logprob: -14.703934669494629

Token 35: 'self' (ID: 1156)
  Prédit: 'self'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'self' → logprob: -0.0021847609896212816
    2. ' self' → logprob: -6.377184867858887
    3. ')' → logprob: -8.002184867858887
    4. ' ' → logprob: -8.877184867858887
    5. ' )' → logprob: -12.502184867858887
    6. '   ' → logprob: -13.752184867858887
    7. 'N' → logprob: -14.252184867858887
    8. '  ' → logprob: -14.627184867858887
    9. 'se' → logprob: -14.627184867858887
    10. '0' → logprob: -14.752184867858887

Token 36: ',' (ID: 11)
  Prédit: ','
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ',' → logprob: -0.012879012152552605
    2. ' ,' → logprob: -5.012878894805908
    3. 'self' → logprob: -5.137878894805908
    4. ',self' → logprob: -9.137879371643066
    5. ')' → logprob: -9.512879371643066
    6. ',n' → logprob: -10.012879371643066
    7. ' self' → logprob: -11.262879371643066
    8. ' ' → logprob: -11.262879371643066
    9. '   ' → logprob: -12.262879371643066
    10. 'n' → logprob: -12.387879371643066

Token 37: ' value' (ID: 1432)
  Prédit: ' self'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' self' → logprob: -0.38303613662719727
    2. 'self' → logprob: -1.5080361366271973
    3. ' text' → logprob: -3.2580361366271973
    4. ' value' → logprob: -3.6330361366271973
    5. 'value' → logprob: -4.883036136627197
    6. 'text' → logprob: -4.883036136627197
    7. ' name' → logprob: -5.883036136627197
    8. 'name' → logprob: -6.008036136627197
    9. ' message' → logprob: -6.133036136627197
    10. ' n' → logprob: -6.508036136627197

Token 38: '):
' (ID: 1883)
  Prédit: '):'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '):' → logprob: -0.001559854601509869
    2. ')' → logprob: -7.251559734344482
    3. ' ):' → logprob: -8.12656021118164
    4. '=' → logprob: -8.62656021118164
    5. '):
' → logprob: -9.00156021118164
    6. ',' → logprob: -9.37656021118164
    7. '   ' → logprob: -9.50156021118164
    8. ':' → logprob: -9.62656021118164
    9. ' ' → logprob: -11.25156021118164
    10. '=None' → logprob: -11.87656021118164

Token 39: '       ' (ID: 309)
  Prédit: '       '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '       ' → logprob: -0.04634977504611015
    2. '    ' → logprob: -3.9213497638702393
    3. '   ' → logprob: -4.296350002288818
    4. 'value' → logprob: -5.671350002288818
    5. ' value' → logprob: -5.796350002288818
    6. '<|end|>' → logprob: -6.046350002288818
    7. '        ' → logprob: -7.046350002288818
    8. ' self' → logprob: -8.17134952545166
    9. 'self' → logprob: -8.17134952545166
    10. '(value' → logprob: -8.29634952545166

Token 40: ' self' (ID: 1051)
  Prédit: ' self'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' self' → logprob: -0.6381334662437439
    2. ' value' → logprob: -0.8881334662437439
    3. 'value' → logprob: -3.3881335258483887
    4. 'self' (adapté à ' self') → logprob: -3.6381335258483887
    5. '       ' → logprob: -8.51313304901123
    6. '   ' → logprob: -11.63813304901123
    7. '        ' → logprob: -12.26313304901123
    8. ' ' → logprob: -12.76313304901123
    9. ' ' → logprob: -13.01313304901123
    10. '    ' → logprob: -13.13813304901123

Token 41: '.value' (ID: 4683)
  Prédit: '.'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '.' → logprob: -0.6936196684837341
    2. '.value' → logprob: -0.6936196684837341
    3. 'value' → logprob: -7.943619728088379
    4. ' .' → logprob: -10.193619728088379
    5. '=' → logprob: -10.943619728088379
    6. ' value' → logprob: -11.068619728088379
    7. ' ' → logprob: -11.568619728088379
    8. ' =' → logprob: -11.943619728088379
    9. '.val' → logprob: -12.443619728088379
    10. '.status' → logprob: -12.818619728088379

Token 42: ' =' (ID: 314)
  Prédit: ' ='
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' =' → logprob: -0.10020763427019119
    2. '=' → logprob: -2.350207567214966
    3. ' ' → logprob: -14.975207328796387
    4. '   ' → logprob: -15.475207328796387
    5. '    ' → logprob: -15.725207328796387
    6. ')' → logprob: -16.600208282470703
    7. ',' → logprob: -17.100208282470703
    8. '=value' → logprob: -17.850208282470703
    9. ' =)' → logprob: -17.975208282470703
    10. '<|end|>' → logprob: -18.100208282470703

Token 43: ' value' (ID: 1432)
  Prédit: ' value'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' value' → logprob: -0.12693022191524506
    2. 'value' → logprob: -2.1269302368164062
    3. '	value' → logprob: -14.626930236816406
    4. '"value' → logprob: -14.876930236816406
    5. ')value' → logprob: -15.001930236816406
    6. '(value' → logprob: -15.376930236816406
    7. '$value' → logprob: -15.876930236816406
    8. ''value' → logprob: -16.126930236816406
    9. '    ' → logprob: -16.251930236816406
    10. ' ' → logprob: -16.251930236816406

Token 44: '
' (ID: 198)
  Prédit: '
'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '
' → logprob: -0.005364783573895693
    2. '<|end|>' → logprob: -5.630364894866943
    3. '   ' → logprob: -7.130364894866943
    4. '    
' → logprob: -8.005364418029785
    5. '<|end|>' → logprob: -8.630364418029785
    6. '

' → logprob: -8.755364418029785
    7. 'def' → logprob: -9.130364418029785
    8. ' def' → logprob: -9.755364418029785
    9. ' 
' → logprob: -10.005364418029785
    10. '  
' → logprob: -10.255364418029785

Token 45: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.08583083748817444
    2. '
' → logprob: -2.8358309268951416
    3. 'def' → logprob: -4.7108306884765625
    4. ' def' → logprob: -5.2108306884765625
    5. '    
' → logprob: -5.4608306884765625
    6. '<|end|>' → logprob: -5.4608306884765625
    7. '<|end|>' → logprob: -8.085830688476562
    8. '        
' → logprob: -9.210830688476562
    9. '	def' → logprob: -9.585830688476562
    10. ' 
' → logprob: -10.335830688476562

Token 46: ' def' (ID: 1056)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.6763226389884949
    2. '
' → logprob: -1.3013226985931396
    3. 'def' (adapté à ' def') → logprob: -1.6763226985931396
    4. ' def' → logprob: -3.6763226985931396
    5. '    
' → logprob: -5.8013224601745605
    6. '<|end|>' → logprob: -6.0513224601745605
    7. '	def' → logprob: -7.8013224601745605
    8. '<|end|>' → logprob: -8.301322937011719
    9. '        
' → logprob: -8.801322937011719
    10. '       ' → logprob: -8.926322937011719

Token 47: ' out' (ID: 842)
  Prédit: ' print'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' print' → logprob: -0.0019642009865492582
    2. 'print' → logprob: -6.876964092254639
    3. ' check' → logprob: -7.251964092254639
    4. ' __' → logprob: -8.626964569091797
    5. ' def' → logprob: -10.626964569091797
    6. ' display' → logprob: -12.001964569091797
    7. '_print' → logprob: -12.501964569091797
    8. '__' → logprob: -12.626964569091797
    9. ' get' → logprob: -12.876964569091797
    10. ' ' → logprob: -15.001964569091797

Token 48: '(self' (ID: 2402)
  Prédit: 'put'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'put' → logprob: -0.00023274161503650248
    2. '():' → logprob: -9.750232696533203
    3. 't' → logprob: -10.625232696533203
    4. 'pt' → logprob: -10.750232696533203
    5. 'ut' → logprob: -10.875232696533203
    6. '_put' → logprob: -11.000232696533203
    7. '()' → logprob: -11.125232696533203
    8. 'print' → logprob: -11.125232696533203
    9. 'puts' → logprob: -11.125232696533203
    10. 'p' → logprob: -11.125232696533203

Token 49: '):
' (ID: 1883)
  Prédit: '):'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '):' → logprob: -0.017408426851034164
    2. ',' → logprob: -4.26740837097168
    3. '):
' → logprob: -6.51740837097168
    4. ')' → logprob: -6.64240837097168
    5. ',value' → logprob: -8.51740837097168
    6. ' ):' → logprob: -9.14240837097168
    7. '(value' → logprob: -10.51740837097168
    8. 'ut' → logprob: -11.01740837097168
    9. 'print' → logprob: -11.51740837097168
    10. ' ,' → logprob: -11.51740837097168

Token 50: '       ' (ID: 309)
  Prédit: '       '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '       ' → logprob: -1.9504606825648807e-05
    2. ' return' → logprob: -12.500019073486328
    3. ':' → logprob: -12.625019073486328
    4. '   ' → logprob: -12.625019073486328
    5. '      ' → logprob: -13.250019073486328
    6. '    ' → logprob: -13.500019073486328
    7. '     ' → logprob: -13.625019073486328
    8. '        
' → logprob: -14.375019073486328
    9. 'print' → logprob: -14.500019073486328
    10. ',' → logprob: -14.500019073486328

Token 51: ' print' (ID: 2123)
  Prédit: 'print'
  Correct (stricte): False
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'print' (adapté à ' print') → logprob: -0.16750337183475494
    2. ' print' → logprob: -2.4175033569335938
    3. '       ' → logprob: -3.0425033569335938
    4. 'return' → logprob: -4.667503356933594
    5. ' if' → logprob: -5.792503356933594
    6. ' return' → logprob: -5.792503356933594
    7. 'if' → logprob: -6.292503356933594
    8. '   ' → logprob: -11.917503356933594
    9. '```' → logprob: -12.542503356933594
    10. '           ' → logprob: -13.167503356933594

Token 52: '(self' (ID: 2402)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(' → logprob: -0.47515857219696045
    2. '(self' → logprob: -0.9751585721969604
    3. '(f' → logprob: -6.85015869140625
    4. ' (' → logprob: -11.47515869140625
    5. 'self' → logprob: -12.85015869140625
    6. '()' → logprob: -12.97515869140625
    7. '("("' → logprob: -13.47515869140625
    8. '("' → logprob: -13.60015869140625
    9. '('' → logprob: -13.72515869140625
    10. '((' → logprob: -14.10015869140625

Token 53: '.value' (ID: 4683)
  Prédit: '.value'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '.value' → logprob: -6.098748053773306e-05
    2. '.' → logprob: -9.75006103515625
    3. '.val' → logprob: -13.25006103515625
    4. ' .' → logprob: -14.37506103515625
    5. '.v' → logprob: -16.25006103515625
    6. ').' → logprob: -16.50006103515625
    7. '.values' → logprob: -17.37506103515625
    8. 'value' → logprob: -17.87506103515625
    9. '.va' → logprob: -18.12506103515625
    10. '.)' → logprob: -18.25006103515625

Token 54: ')

' (ID: 1029)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ')' → logprob: -7.896309739408025e-07
    2. ' )' → logprob: -14.500000953674316
    3. '   ' → logprob: -16.5
    4. '))' → logprob: -17.0
    5. ')
' → logprob: -17.125
    6. '       ' → logprob: -18.125
    7. ')}' → logprob: -18.875
    8. '')' → logprob: -18.875
    9. '`)' → logprob: -19.0
    10. '}' → logprob: -19.0

Token 55: 'if' (ID: 366)
  Prédit: 'p'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'p' → logprob: -0.10620714724063873
    2. 'printer' → logprob: -2.4812071323394775
    3. 'if' → logprob: -4.856207370758057
    4. 'print' → logprob: -5.356207370758057
    5. 'result' → logprob: -6.481207370758057
    6. 'for' → logprob: -6.856207370758057
    7. 'obj' → logprob: -7.356207370758057
    8. 'pr' → logprob: -7.356207370758057
    9. 'x' → logprob: -8.731206893920898
    10. 'P' → logprob: -8.731206893920898

Token 56: ' N' (ID: 478)
  Prédit: ' N'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' N' → logprob: -0.09753140807151794
    2. ' __' → logprob: -2.472531318664551
    3. ' ' → logprob: -5.722531318664551
    4. '__' → logprob: -5.847531318664551
    5. 'N' → logprob: -6.097531318664551
    6. '_' → logprob: -9.59753131866455
    7. '  ' → logprob: -9.97253131866455
    8. ' _' → logprob: -10.72253131866455
    9. ' ' → logprob: -11.72253131866455
    10. '_N' → logprob: -14.59753131866455

Token 57: ' <' (ID: 464)
  Prédit: ' <'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' <' → logprob: -0.22674128413200378
    2. ' ==' → logprob: -2.101741313934326
    3. ' >=' → logprob: -3.101741313934326
    4. ' <=' → logprob: -3.976741313934326
    5. '<' → logprob: -4.976741313934326
    6. ' >' → logprob: -5.226741313934326
    7. '==' → logprob: -6.101741313934326
    8. '%' → logprob: -7.476741313934326
    9. ' %' → logprob: -7.601741313934326
    10. '>=' → logprob: -7.601741313934326

Token 58: ' ' (ID: 220)
  Prédit: ' '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' ' → logprob: -0.2521161437034607
    2. '100' → logprob: -1.5021162033081055
    3. '=' → logprob: -9.002116203308105
    4. '10' → logprob: -10.502116203308105
    5. '1' → logprob: -11.377116203308105
    6. '0' → logprob: -12.252116203308105
    7. '  ' → logprob: -12.314616203308105
    8. ' =' → logprob: -13.377116203308105
    9. '>' → logprob: -13.502116203308105
    10. '"' → logprob: -13.689616203308105

Token 59: '100' (ID: 1353)
  Prédit: '100'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '100' → logprob: -0.011174913495779037
    2. ' ' → logprob: -4.51117467880249
    3. '10' → logprob: -9.511175155639648
    4. '1' → logprob: -10.886175155639648
    5. '0' → logprob: -11.511175155639648
    6. '=' → logprob: -12.136175155639648
    7. '500' → logprob: -12.448675155639648
    8. '  ' → logprob: -13.136175155639648
    9. '999' → logprob: -13.511175155639648
    10. '300' → logprob: -13.573675155639648

Token 60: '0' (ID: 15)
  Prédit: '0'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '0' → logprob: -0.00010986098641296849
    2. ':' → logprob: -9.250109672546387
    3. ':
' → logprob: -11.375109672546387
    4. '   ' → logprob: -13.750109672546387
    5. '{' → logprob: -14.750109672546387
    6. '00' → logprob: -15.375109672546387
    7. ' ' → logprob: -15.750109672546387
    8. '):
' → logprob: -16.875110626220703
    9. '```' → logprob: -16.875110626220703
    10. '000' → logprob: -17.000110626220703

Token 61: ':
' (ID: 734)
  Prédit: ':'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ':' → logprob: -0.0005093070212751627
    2. ' :' → logprob: -8.125509262084961
    3. ':
' → logprob: -8.500509262084961
    4. '):' → logprob: -12.000509262084961
    5. ' :
' → logprob: -14.000509262084961
    6. '():' → logprob: -14.250509262084961
    7. '   ' → logprob: -14.250509262084961
    8. '.' → logprob: -14.375509262084961
    9. ':**' → logprob: -15.250509262084961
    10. ' and' → logprob: -15.750509262084961

Token 62: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.18285715579986572
    2. ':' → logprob: -2.182857036590576
    3. 'print' → logprob: -3.432857036590576
    4. ' print' → logprob: -4.557857036590576
    5. ' :' → logprob: -5.932857036590576
    6. ':
' → logprob: -6.182857036590576
    7. '       ' → logprob: -6.932857036590576
    8. '    
' → logprob: -7.307857036590576
    9. '(' → logprob: -7.682857036590576
    10. '    ' → logprob: -7.807857036590576

Token 63: ' for' (ID: 395)
  Prédit: 'p'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'p' → logprob: -0.8002431988716125
    2. 'print' → logprob: -1.0502431392669678
    3. ' p' → logprob: -2.3002431392669678
    4. 'printer' → logprob: -3.0502431392669678
    5. ' print' → logprob: -4.175243377685547
    6. 'pr' → logprob: -4.175243377685547
    7. 'result' → logprob: -5.050243377685547
    8. '   ' → logprob: -5.800243377685547
    9. 'Printer' → logprob: -6.050243377685547
    10. 'obj' → logprob: -6.425243377685547

Token 64: ' msg' (ID: 6981)
  Prédit: ' i'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' i' → logprob: -0.10298120975494385
    2. ' _' → logprob: -2.4779810905456543
    3. ' ' → logprob: -4.977981090545654
    4. '_' → logprob: -5.102981090545654
    5. 'i' → logprob: -6.977981090545654
    6. ' x' → logprob: -11.977981567382812
    7. ' n' → logprob: -11.977981567382812
    8. ' ' → logprob: -12.227981567382812
    9. ' N' → logprob: -12.352981567382812
    10. '_i' → logprob: -12.352981567382812

Token 65: ' in' (ID: 306)
  Prédit: ' in'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' in' → logprob: -0.03830908238887787
    2. 'in' → logprob: -3.413309097290039
    3. ' ' → logprob: -5.538309097290039
    4. 's' → logprob: -7.913309097290039
    5. '	in' → logprob: -9.663309097290039
    6. '_' → logprob: -10.100809097290039
    7. '   ' → logprob: -10.225809097290039
    8. '  ' → logprob: -10.475809097290039
    9. ',' → logprob: -10.913309097290039
    10. '_in' → logprob: -11.100809097290039

Token 66: ' [' (ID: 723)
  Prédit: '["'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '["' → logprob: -0.06069236993789673
    2. 'check' → logprob: -3.810692310333252
    3. ' ["' → logprob: -4.310692310333252
    4. 'range' → logprob: -4.435692310333252
    5. ' check' → logprob: -5.310692310333252
    6. ' range' → logprob: -5.935692310333252
    7. '['' → logprob: -6.685692310333252
    8. '[' → logprob: -7.060692310333252
    9. '"' → logprob: -7.435692310333252
    10. '("' → logprob: -7.435692310333252

Token 67: 'check' (ID: 3416)
  Prédit: '"'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '"' → logprob: -0.2648824155330658
    2. 'check' → logprob: -1.6398824453353882
    3. '   ' → logprob: -4.514882564544678
    4. ' "' → logprob: -4.639882564544678
    5. ' check' → logprob: -4.889882564544678
    6. ''' → logprob: -4.889882564544678
    7. '"A' → logprob: -7.014882564544678
    8. '       ' → logprob: -7.389882564544678
    9. ' '' → logprob: -7.514882564544678
    10. ' ' → logprob: -7.889882564544678

Token 68: '(N' (ID: 10564)
  Prédit: '(N'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(N' → logprob: -0.006193268578499556
    2. '(' → logprob: -5.381193161010742
    3. ' (' → logprob: -6.631193161010742
    4. '(n' → logprob: -9.381193161010742
    5. '(i' → logprob: -9.381193161010742
    6. ' ' → logprob: -9.631193161010742
    7. '((' → logprob: -12.506193161010742
    8. '  ' → logprob: -12.881193161010742
    9. '(int' → logprob: -12.881193161010742
    10. '   ' → logprob: -13.631193161010742

Token 69: ')]' (ID: 15710)
  Prédit: '),'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '),' → logprob: -0.7328928112983704
    2. ')' → logprob: -1.1078927516937256
    3. ')]' → logprob: -1.7328927516937256
    4. '):' → logprob: -4.607892990112305
    5. ' ),' → logprob: -7.482892990112305
    6. ' )' → logprob: -7.607892990112305
    7. '))' → logprob: -7.857892990112305
    8. ')):' → logprob: -7.982892990112305
    9. ')],' → logprob: -8.732892990112305
    10. '(N' → logprob: -8.982892990112305

Token 70: ':
' (ID: 734)
  Prédit: ':'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ':' → logprob: -0.0015653307782486081
    2. ':
' → logprob: -7.001565456390381
    3. ' :' → logprob: -8.126564979553223
    4. '):' → logprob: -8.501564979553223
    5. '   ' → logprob: -10.001564979553223
    6. ']:' → logprob: -10.751564979553223
    7. '():' → logprob: -10.751564979553223
    8. ',' → logprob: -11.001564979553223
    9. '       ' → logprob: -11.126564979553223
    10. '    ' → logprob: -12.251564979553223

Token 71: '       ' (ID: 309)
  Prédit: '       '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '       ' → logprob: -0.2163955569267273
    2. 'Printer' → logprob: -2.091395616531372
    3. ' Printer' → logprob: -2.841395616531372
    4. '   ' → logprob: -5.466395378112793
    5. ':' → logprob: -5.841395378112793
    6. '    ' → logprob: -6.591395378112793
    7. '(' → logprob: -7.716395378112793
    8. ' :' → logprob: -7.716395378112793
    9. '      ' → logprob: -7.841395378112793
    10. ' ' → logprob: -7.841395378112793

Token 72: ' Printer' (ID: 71701)
  Prédit: ' p'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' p' → logprob: -1.1053322553634644
    2. 'p' → logprob: -1.3553322553634644
    3. 'Printer' (adapté à ' Printer') → logprob: -1.4803322553634644
    4. ' Printer' → logprob: -2.230332374572754
    5. '       ' → logprob: -3.980332374572754
    6. 'printer' → logprob: -4.105332374572754
    7. '           ' → logprob: -4.105332374572754
    8. 'print' → logprob: -4.605332374572754
    9. ' print' → logprob: -5.355332374572754
    10. ' printer' → logprob: -5.355332374572754

Token 73: '(msg' (ID: 15182)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(' → logprob: -0.5781722068786621
    2. '(msg' → logprob: -0.8281722068786621
    3. ' (' → logprob: -6.453172206878662
    4. '(N' → logprob: -7.453172206878662
    5. '(value' → logprob: -10.32817268371582
    6. '(message' → logprob: -11.82817268371582
    7. '(

' → logprob: -11.95317268371582
    8. '(
' → logprob: -12.07817268371582
    9. '((' → logprob: -12.32817268371582
    10. ' ' → logprob: -12.45317268371582

Token 74: ').' (ID: 741)
  Prédit: ').'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ').' → logprob: -0.002260283101350069
    2. ')' → logprob: -6.127260208129883
    3. '   ' → logprob: -10.127260208129883
    4. ' ).' → logprob: -10.877260208129883
    5. ' ' → logprob: -12.377260208129883
    6. '.out' → logprob: -12.502260208129883
    7. '       ' → logprob: -12.752260208129883
    8. '()).' → logprob: -12.877260208129883
    9. 'out' → logprob: -14.752260208129883
    10. '  ' → logprob: -14.752260208129883

Token 75: 'out' (ID: 468)
  Prédit: 'out'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'out' → logprob: -9.088346359931165e-07
    2. 'ou' → logprob: -14.375000953674316
    3. ' out' → logprob: -15.125000953674316
    4. 'o' → logprob: -17.75
    5. 'outi' → logprob: -18.375
    6. 'outh' → logprob: -19.25
    7. 'ut' → logprob: -19.625
    8. ' ' → logprob: -19.875
    9. '	out' → logprob: -20.375
    10. '_out' → logprob: -20.5

Token 76: '()
' (ID: 1234)
  Prédit: '()'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '()' → logprob: -2.9160102712921798e-05
    2. '()
' → logprob: -11.000029563903809
    3. '(' → logprob: -11.875029563903809
    4. '()<' → logprob: -13.500029563903809
    5. '()`' → logprob: -13.625029563903809
    6. '()

' → logprob: -13.625029563903809
    7. ' ()' → logprob: -14.875029563903809
    8. '()\' → logprob: -15.125029563903809
    9. '();' → logprob: -15.375029563903809
    10. '())' → logprob: -15.500029563903809

Token 77: 'else' (ID: 2807)
  Prédit: 'else'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'else' → logprob: -0.07559329271316528
    2. '<|end|>' → logprob: -2.8255932331085205
    3. 'elif' → logprob: -4.5755934715271
    4. ' else' → logprob: -6.8255934715271
    5. '<|end|>' → logprob: -6.8255934715271
    6. '```' → logprob: -7.0755934715271
    7. 'e' → logprob: -10.075592994689941
    8. '#else' → logprob: -10.450592994689941
    9. '_else' → logprob: -10.950592994689941
    10. '[' → logprob: -11.325592994689941

Token 78: ':
' (ID: 734)
  Prédit: ':'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ':' → logprob: -0.003656483953818679
    2. ':
' → logprob: -5.628656387329102
    3. ' :' → logprob: -10.253656387329102
    4. '<|end|>' → logprob: -11.753656387329102
    5. '   ' → logprob: -12.628656387329102
    6. ':

' → logprob: -12.753656387329102
    7. ' :
' → logprob: -13.503656387329102
    8. '{' → logprob: -14.003656387329102
    9. ':
' → logprob: -14.128656387329102
    10. '```' → logprob: -14.378656387329102

Token 79: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.48763638734817505
    2. ' for' → logprob: -1.6126363277435303
    3. 'for' → logprob: -2.2376363277435303
    4. 'print' → logprob: -3.3626363277435303
    5. ' print' → logprob: -3.7376363277435303
    6. ' pass' → logprob: -4.862636566162109
    7. ' Printer' → logprob: -5.237636566162109
    8. 'Printer' → logprob: -6.237636566162109
    9. '    ' → logprob: -6.362636566162109
    10. 'pass' → logprob: -6.612636566162109

Token 80: ' (' (ID: 350)
  Prédit: 'for'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'for' → logprob: -0.37886181473731995
    2. 'print' → logprob: -1.3788617849349976
    3. ' for' → logprob: -3.753861904144287
    4. 'Printer' → logprob: -4.003861904144287
    5. 'while' → logprob: -5.128861904144287
    6. '   ' → logprob: -5.253861904144287
    7. 'pass' → logprob: -5.628861904144287
    8. ' print' → logprob: -6.503861904144287
    9. ' Printer' → logprob: -7.253861904144287
    10. ' pass' → logprob: -7.378861904144287

Token 81: 'lambda' (ID: 35280)
  Prédit: 'Printer'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'Printer' → logprob: -0.933709442615509
    2. 'check' → logprob: -1.0587093830108643
    3. 'print' → logprob: -1.5587093830108643
    4. ' Printer' → logprob: -4.058709621429443
    5. ' check' → logprob: -4.183709621429443
    6. 'for' → logprob: -5.683709621429443
    7. ')' → logprob: -5.808709621429443
    8. 'pass' → logprob: -6.308709621429443
    9. ' print' → logprob: -6.683709621429443
    10. '   ' → logprob: -6.808709621429443

Token 82: ' x' (ID: 1215)
  Prédit: ' x'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' x' → logprob: -1.027566909790039
    2. ' n' → logprob: -1.152566909790039
    3. ' N' → logprob: -2.277566909790039
    4. 'x' → logprob: -2.652566909790039
    5. 'N' → logprob: -2.777566909790039
    6. 'n' → logprob: -2.902566909790039
    7. 'msg' → logprob: -5.027566909790039
    8. ' msg' → logprob: -5.027566909790039
    9. ':' → logprob: -5.277566909790039
    10. ' check' → logprob: -6.277566909790039

Token 83: ':' (ID: 25)
  Prédit: ':'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ':' → logprob: -0.021584607660770416
    2. ' :' → logprob: -3.8965845108032227
    3. ':x' → logprob: -8.021584510803223
    4. ' x' → logprob: -8.271584510803223
    5. 'x' → logprob: -8.521584510803223
    6. ',' → logprob: -10.021584510803223
    7. '   ' → logprob: -10.146584510803223
    8. ')' → logprob: -10.396584510803223
    9. ':N' → logprob: -10.646584510803223
    10. '=' → logprob: -10.646584510803223

Token 84: ' print' (ID: 2123)
  Prédit: 'print'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'print' → logprob: -0.36993661522865295
    2. ' print' → logprob: -1.8699365854263306
    3. 'Printer' → logprob: -2.86993670463562
    4. ' x' → logprob: -3.24493670463562
    5. 'x' → logprob: -3.36993670463562
    6. ' Printer' → logprob: -4.244936466217041
    7. ' check' → logprob: -5.994936466217041
    8. 'check' → logprob: -6.119936466217041
    9. '   ' → logprob: -6.619936466217041
    10. '(print' → logprob: -7.369936466217041

Token 85: '(x' (ID: 4061)
  Prédit: '(x'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(x' → logprob: -0.12417837232351303
    2. '("' → logprob: -2.374178409576416
    3. '(' → logprob: -4.124178409576416
    4. '('' → logprob: -5.749178409576416
    5. '(f' → logprob: -5.874178409576416
    6. '(check' → logprob: -7.374178409576416
    7. '((' → logprob: -7.749178409576416
    8. '(chr' → logprob: -9.624177932739258
    9. 'x' → logprob: -9.874177932739258
    10. ')' → logprob: -10.249177932739258

Token 86: '))(' (ID: 72297)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')' → logprob: -0.5874565243721008
    2. '))' → logprob: -0.8374565243721008
    3. '))(' → logprob: -5.337456703186035
    4. '(N' → logprob: -6.212456703186035
    5. ')(' → logprob: -6.587456703186035
    6. '(x' → logprob: -7.587456703186035
    7. ' ' → logprob: -7.587456703186035
    8. '   ' → logprob: -7.712456703186035
    9. ' ))' → logprob: -7.837456703186035
    10. ')))' → logprob: -7.962456703186035

Token 87: 'check' (ID: 3416)
  Prédit: 'N'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'N' → logprob: -0.3350273072719574
    2. 'check' → logprob: -1.7100273370742798
    3. '"' → logprob: -3.0850272178649902
    4. 'str' → logprob: -3.2100272178649902
    5. '"N' → logprob: -5.21002721786499
    6. ' N' → logprob: -5.46002721786499
    7. ' check' → logprob: -5.83502721786499
    8. ''' → logprob: -7.21002721786499
    9. ' ' → logprob: -7.21002721786499
    10. 'input' → logprob: -7.33502721786499

Token 88: '(N' (ID: 10564)
  Prédit: '(N'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(N' → logprob: -0.04307477921247482
    2. '(' → logprob: -3.1680748462677
    3. ' (' → logprob: -10.668074607849121
    4. ')' → logprob: -10.668074607849121
    5. '(n' → logprob: -11.043074607849121
    6. '(
' → logprob: -12.293074607849121
    7. ' ' → logprob: -12.668074607849121
    8. '(

' → logprob: -13.543074607849121
    9. '((' → logprob: -13.668074607849121
    10. 'N' → logprob: -13.668074607849121

Token 89: '))' (ID: 915)
  Prédit: '))'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '))' → logprob: -0.003145873546600342
    2. ')' → logprob: -6.003145694732666
    3. '()))' → logprob: -7.753145694732666
    4. ' ))' → logprob: -8.878146171569824
    5. '(N' → logprob: -10.253146171569824
    6. ')))' → logprob: -10.378146171569824
    7. '))
' → logprob: -11.628146171569824
    8. '(' → logprob: -11.628146171569824
    9. '())' → logprob: -12.128146171569824
    10. ' ' → logprob: -12.378146171569824


RÉSUMÉ:
--------------------------------------------------------------------------------
Total des tokens analysés: 87
Tokens correctement prédits (1ère position, stricte): 39
Tokens correctement prédits (1ère position, avec adaptation): 40
Tokens correctement prédits (top 10): 67
Précision stricte (1ère position): 44.83%
Précision adaptée (1ère position): 45.98%
Précision (top 10): 77.01%
================================================================================
