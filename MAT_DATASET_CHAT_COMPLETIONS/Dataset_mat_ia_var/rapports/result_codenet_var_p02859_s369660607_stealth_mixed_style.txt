================================================================================
ANALYSE DE PRÉDICTION TOKEN PAR TOKEN (BATCH API)
Date: 2025-06-04 19:38:05
Modèle de tokenisation: gpt-4o-mini
================================================================================

SCRIPT ANALYSÉ:
--------------------------------------------------------------------------------
import sys

fetch = lambda : sys.stdin.readline().strip()

def ints():
    return list(map(int, fetch().split()))

def get_lines(n):
    out = []
    i = 0
    while i < n:
        out.append(fetch())
        i += 1
    return out

def int_lines(n):
    lines = []
    for _ in range(n):
        lines.append([int(c) for c in fetch()])
    return lines

if __name__ == '__main__':
    n = int(fetch())
    print(n ** 2)
--------------------------------------------------------------------------------

RÉSULTATS D'ANALYSE TOKEN PAR TOKEN:
--------------------------------------------------------------------------------
Token 0: 'import' (ID: 561)
  → Token d'amorce (pas de prédiction)

Token 1: ' sys' (ID: 12228)
  → Token d'amorce (pas de prédiction)

Token 2: '

' (ID: 279)
  → Token d'amorce (pas de prédiction)

Token 3: 'fetch' (ID: 19843)
  Prédit: '\n'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '\n' → logprob: -1.042949914932251
    2. '.' → logprob: -1.167949914932251
    3. '<|end|>' → logprob: -2.292949914932251
    4. 'import' → logprob: -2.542949914932251
    5. '' → logprob: -2.542949914932251
    6. '#' → logprob: -3.792949914932251
    7. '\' → logprob: -4.417949676513672
    8. '
' → logprob: -4.792949676513672
    9. 'print' → logprob: -5.042949676513672
    10. ';' → logprob: -5.667949676513672

Token 4: ' =' (ID: 314)
  Prédit: '_'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '_' → logprob: -0.026054563000798225
    2. '(' → logprob: -4.401054382324219
    3. '.' → logprob: -5.526054382324219
    4. 'er' → logprob: -6.026054382324219
    5. '_fetch' → logprob: -6.151054382324219
    6. '_data' → logprob: -7.026054382324219
    7. '_url' → logprob: -7.151054382324219
    8. 'r' → logprob: -7.151054382324219
    9. ' (' → logprob: -7.401054382324219
    10. '_response' → logprob: -8.026054382324219

Token 5: ' lambda' (ID: 27871)
  Prédit: '__'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '__' → logprob: -1.0302083492279053
    2. 'fetch' → logprob: -1.5302083492279053
    3. 'sys' → logprob: -1.5302083492279053
    4. 'requests' → logprob: -2.4052083492279053
    5. ' sys' → logprob: -3.1552083492279053
    6. ' __' → logprob: -3.5302083492279053
    7. 'lambda' → logprob: -4.780208587646484
    8. ' requests' → logprob: -4.905208587646484
    9. ' fetch' → logprob: -5.030208587646484
    10. ' getattr' → logprob: -5.030208587646484

Token 6: ' :' (ID: 712)
  Prédit: ' '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' ' → logprob: -0.20101815462112427
    2. '  ' → logprob: -2.7010180950164795
    3. ' x' → logprob: -2.9510180950164795
    4. ' s' → logprob: -3.4510180950164795
    5. ' url' → logprob: -3.8260180950164795
    6. ' sys' → logprob: -6.201018333435059
    7. ' (' → logprob: -6.826018333435059
    8. '   ' → logprob: -7.326018333435059
    9. 'x' → logprob: -7.576018333435059
    10. ' fetch' → logprob: -7.826018333435059

Token 7: ' sys' (ID: 12228)
  Prédit: 'sys'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'sys' → logprob: -0.5250834226608276
    2. ' sys' → logprob: -0.9000834226608276
    3. 'input' → logprob: -6.775083541870117
    4. ' input' → logprob: -7.400083541870117
    5. 'int' → logprob: -8.775083541870117
    6. ' int' → logprob: -11.025083541870117
    7. '(sys' → logprob: -11.900083541870117
    8. ' ' → logprob: -12.025083541870117
    9. '	sys' → logprob: -12.650083541870117
    10. 'list' → logprob: -12.650083541870117

Token 8: '.stdin' (ID: 93480)
  Prédit: '.'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '.' → logprob: -0.009856549091637135
    2. '.stdin' → logprob: -5.384856700897217
    3. '.exit' → logprob: -5.634856700897217
    4. '.stdout' → logprob: -7.134856700897217
    5. '.argv' → logprob: -7.509856700897217
    6. ' .' → logprob: -9.134856224060059
    7. '.readline' → logprob: -10.009856224060059
    8. '.get' → logprob: -10.384856224060059
    9. '.stderr' → logprob: -10.509856224060059
    10. '.path' → logprob: -10.884856224060059

Token 9: '.readline' (ID: 74673)
  Prédit: '.readline'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '.readline' → logprob: -0.08517900854349136
    2. '.read' → logprob: -2.585179090499878
    3. '.' → logprob: -5.085178852081299
    4. '.readlines' → logprob: -9.960179328918457
    5. 'read' → logprob: -10.710179328918457
    6. '.Read' → logprob: -12.085179328918457
    7. '.write' → logprob: -12.460179328918457
    8. '```' → logprob: -14.585179328918457
    9. '.get' → logprob: -14.710179328918457
    10. ' readline' → logprob: -14.835179328918457

Token 10: '().' (ID: 1454)
  Prédit: '()'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '()' → logprob: -0.010511936619877815
    2. '(' → logprob: -5.010511875152588
    3. '().' → logprob: -5.635511875152588
    4. '()\' → logprob: -9.260512351989746
    5. '()
' → logprob: -9.885512351989746
    6. ' ()' → logprob: -10.760512351989746
    7. '())' → logprob: -11.135512351989746
    8. '()

' → logprob: -12.010512351989746
    9. '(
' → logprob: -12.010512351989746
    10. ')' → logprob: -12.510512351989746

Token 11: 'strip' (ID: 23905)
  Prédit: 'strip'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'strip' → logprob: -0.02324594371020794
    2. 'rstrip' → logprob: -3.7732460498809814
    3. ' strip' → logprob: -15.523245811462402
    4. 'decode' → logprob: -16.89824676513672
    5. 'replace' → logprob: -17.02324676513672
    6. 'read' → logprob: -17.77324676513672
    7. '_strip' → logprob: -18.02324676513672
    8. 'str' → logprob: -18.27324676513672
    9. '(strip' → logprob: -19.27324676513672
    10. 'rst' → logprob: -19.52324676513672

Token 12: '()

' (ID: 5874)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '(' → logprob: -0.014706935733556747
    2. '()' → logprob: -4.389707088470459
    3. '(
' → logprob: -6.264707088470459
    4. ')' → logprob: -8.7647066116333
    5. '(

' → logprob: -9.7647066116333
    6. '.' → logprob: -11.0147066116333
    7. '()
' → logprob: -11.5147066116333
    8. ' (' → logprob: -11.6397066116333
    9. ' ' → logprob: -11.7647066116333
    10. ',' → logprob: -12.2647066116333

Token 13: 'def' (ID: 1314)
  Prédit: 'n'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'n' → logprob: -0.741720974445343
    2. '#' → logprob: -1.4917209148406982
    3. 'def' → logprob: -1.7417209148406982
    4. 'a' → logprob: -3.3667209148406982
    5. 'if' → logprob: -4.116721153259277
    6. 'print' → logprob: -4.366721153259277
    7. 'data' → logprob: -4.491721153259277
    8. 'd' → logprob: -4.616721153259277
    9. '\' → logprob: -4.741721153259277
    10. 'x' → logprob: -4.991721153259277

Token 14: ' ints' (ID: 121629)
  Prédit: ' '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' ' → logprob: -0.3436008393764496
    2. ' main' → logprob: -1.593600869178772
    3. ' fetch' → logprob: -3.4686007499694824
    4. ' my' → logprob: -4.343600749969482
    5. ' calculate' → logprob: -4.718600749969482
    6. ' process' → logprob: -5.218600749969482
    7. ' foo' → logprob: -5.468600749969482
    8. ' read' → logprob: -5.468600749969482
    9. ' new' → logprob: -5.718600749969482
    10. ' add' → logprob: -5.843600749969482

Token 15: '():
' (ID: 8595)
  Prédit: '():'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '():' → logprob: -0.007021780125796795
    2. '(' → logprob: -5.257021903991699
    3. '()' → logprob: -6.507021903991699
    4. ' ():' → logprob: -8.2570219039917
    5. ' ()' → logprob: -10.8820219039917
    6. '()*' → logprob: -13.5070219039917
    7. '(()' → logprob: -13.5070219039917
    8. '(*' → logprob: -13.7570219039917
    9. '()[' → logprob: -13.8820219039917
    10. ' (' → logprob: -13.8820219039917

Token 16: '   ' (ID: 271)
  Prédit: ' return'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' return' → logprob: -0.2529508173465729
    2. 'return' → logprob: -1.6279507875442505
    3. '   ' → logprob: -3.62795090675354
    4. '[]' → logprob: -8.877950668334961
    5. ' ' → logprob: -9.502950668334961
    6. '	return' → logprob: -9.752950668334961
    7. 'map' → logprob: -9.877950668334961
    8. '[' → logprob: -10.002950668334961
    9. ' map' → logprob: -10.002950668334961
    10. ':return' → logprob: -10.377950668334961

Token 17: ' return' (ID: 622)
  Prédit: ' map'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' map' → logprob: -0.36789676547050476
    2. 'map' → logprob: -1.9928967952728271
    3. ' return' → logprob: -2.492896795272827
    4. 'return' (adapté à ' return') → logprob: -2.617896795272827
    5. ' list' → logprob: -4.367896556854248
    6. 'list' → logprob: -6.242896556854248
    7. '   ' → logprob: -6.742896556854248
    8. ' ' → logprob: -9.617897033691406
    9. '    ' → logprob: -12.742897033691406
    10. ' [' → logprob: -12.867897033691406

Token 18: ' list' (ID: 1562)
  Prédit: ' list'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' list' → logprob: -0.4568904936313629
    2. ' map' → logprob: -1.4568904638290405
    3. 'list' → logprob: -2.70689058303833
    4. 'map' → logprob: -2.70689058303833
    5. ' ' → logprob: -8.706890106201172
    6. '   ' → logprob: -9.581890106201172
    7. '  ' → logprob: -10.081890106201172
    8. ' tuple' → logprob: -10.956890106201172
    9. 'tuple' → logprob: -12.456890106201172
    10. '	map' → logprob: -13.331890106201172

Token 19: '(map' (ID: 16946)
  Prédit: '(map'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(map' → logprob: -0.003184959525242448
    2. '(' → logprob: -5.753184795379639
    3. '(int' → logprob: -12.128185272216797
    4. '(
' → logprob: -13.628185272216797
    5. '(

' → logprob: -16.253185272216797
    6. '(ma' → logprob: -16.503185272216797
    7. '()' → logprob: -16.628185272216797
    8. '(m' → logprob: -17.128185272216797
    9. '	map' → logprob: -17.253185272216797
    10. '(sys' → logprob: -17.628185272216797

Token 20: '(int' (ID: 2742)
  Prédit: '(int'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(int' → logprob: -0.00015395533409900963
    2. '(' → logprob: -8.875153541564941
    3. 'int' → logprob: -11.375153541564941
    4. '<int' → logprob: -13.375153541564941
    5. ',int' → logprob: -14.875153541564941
    6. ' int' → logprob: -15.625153541564941
    7. '=int' → logprob: -15.625153541564941
    8. '[int' → logprob: -16.500154495239258
    9. '(
' → logprob: -17.000154495239258
    10. '	int' → logprob: -17.125154495239258

Token 21: ',' (ID: 11)
  Prédit: ','
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ',' → logprob: -0.6595443487167358
    2. '(fetch' → logprob: -0.7845443487167358
    3. 'fetch' → logprob: -4.034544467926025
    4. '(sys' → logprob: -5.409544467926025
    5. '(' → logprob: -6.159544467926025
    6. ' ,' → logprob: -7.034544467926025
    7. ' fetch' → logprob: -7.284544467926025
    8. ',f' → logprob: -8.284543991088867
    9. ',(' → logprob: -9.034543991088867
    10. 'sys' → logprob: -9.034543991088867

Token 22: ' fetch' (ID: 12011)
  Prédit: 'fetch'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'fetch' → logprob: -0.12693744897842407
    2. ' fetch' → logprob: -2.1269373893737793
    3. '(fetch' → logprob: -12.001937866210938
    4. 'f' → logprob: -13.626937866210938
    5. ')' → logprob: -14.501937866210938
    6. '.fetch' → logprob: -15.001937866210938
    7. 'sys' → logprob: -15.626937866210938
    8. ' ' → logprob: -15.751937866210938
    9. ' sys' → logprob: -16.001937866210938
    10. 'input' → logprob: -16.126937866210938

Token 23: '().' (ID: 1454)
  Prédit: '())))'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '())))' → logprob: -1.1544967889785767
    2. '()))' → logprob: -1.2794967889785767
    3. '())' → logprob: -2.154496669769287
    4. '()' → logprob: -2.279496669769287
    5. ')))' → logprob: -2.529496669769287
    6. '().' → logprob: -2.904496669769287
    7. ')' → logprob: -3.029496669769287
    8. '))' → logprob: -5.404496669769287
    9. '()));' → logprob: -8.029497146606445
    10. '());' → logprob: -8.904497146606445

Token 24: 'split' (ID: 13627)
  Prédit: 'split'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'split' → logprob: -9.729906196298543e-06
    2. 'strip' → logprob: -11.750009536743164
    3. ' split' → logprob: -13.500009536743164
    4. 'rstrip' → logprob: -15.125009536743164
    5. '(split' → logprob: -16.250009536743164
    6. '.split' → logprob: -18.500009536743164
    7. 'spl' → logprob: -18.750009536743164
    8. ' ' → logprob: -19.875009536743164
    9. ')' → logprob: -20.250009536743164
    10. 's' → logprob: -20.500009536743164

Token 25: '()))

' (ID: 125972)
  Prédit: '))'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '))' → logprob: -0.4855862557888031
    2. '()))' → logprob: -0.9855862855911255
    3. '()' → logprob: -4.610586166381836
    4. ')))' → logprob: -6.985586166381836
    5. '())' → logprob: -8.360586166381836
    6. '(' → logprob: -8.985586166381836
    7. ')' → logprob: -9.235586166381836
    8. '())))' → logprob: -9.235586166381836
    9. '()))
' → logprob: -11.485586166381836
    10. ' ))' → logprob: -13.360586166381836

Token 26: 'def' (ID: 1314)
  Prédit: 'def'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'def' → logprob: -0.3705815374851227
    2. '#' → logprob: -1.8705815076828003
    3. '\n' → logprob: -2.74558162689209
    4. 'n' → logprob: -3.49558162689209
    5. '<|end|>' → logprob: -4.24558162689209
    6. 'class' → logprob: -4.37058162689209
    7. 'print' → logprob: -4.49558162689209
    8. '
' → logprob: -4.99558162689209
    9. '\' → logprob: -5.12058162689209
    10. 'data' → logprob: -6.37058162689209

Token 27: ' get' (ID: 717)
  Prédit: ' main'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' main' → logprob: -0.04219484701752663
    2. ' solve' → logprob: -3.4171948432922363
    3. 'main' → logprob: -6.167194843292236
    4. 'solve' → logprob: -6.292194843292236
    5. ' fetch' → logprob: -6.417194843292236
    6. ' factorial' → logprob: -7.292194843292236
    7. 's' → logprob: -7.417194843292236
    8. ' dfs' → logprob: -8.042195320129395
    9. ' solution' → logprob: -8.167195320129395
    10. ' binary' → logprob: -9.167195320129395

Token 28: '_lines' (ID: 42980)
  Prédit: '_max'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '_max' → logprob: -0.8825157880783081
    2. '_' → logprob: -1.757515788078308
    3. '_data' → logprob: -2.3825159072875977
    4. '_sum' → logprob: -2.5075159072875977
    5. '_count' → logprob: -3.7575159072875977
    6. '_input' → logprob: -3.8825159072875977
    7. '_user' → logprob: -4.007515907287598
    8. '_factor' → logprob: -4.007515907287598
    9. '_area' → logprob: -4.757515907287598
    10. '_next' → logprob: -4.882515907287598

Token 29: '(n' (ID: 2406)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(' → logprob: -0.02288435399532318
    2. '(n' → logprob: -4.272884368896484
    3. '(count' → logprob: -6.147884368896484
    4. '(num' → logprob: -6.272884368896484
    5. '("("' → logprob: -6.272884368896484
    6. '(number' → logprob: -6.647884368896484
    7. '(line' → logprob: -8.522884368896484
    8. '((' → logprob: -8.897884368896484
    9. '(_' → logprob: -9.022884368896484
    10. '(lines' → logprob: -9.522884368896484

Token 30: '):
' (ID: 1883)
  Prédit: '):'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '):' → logprob: -0.003844732651486993
    2. ')' → logprob: -5.628844738006592
    3. '):
' → logprob: -9.128844261169434
    4. ' ):' → logprob: -9.753844261169434
    5. ':' → logprob: -10.003844261169434
    6. '=' → logprob: -11.378844261169434
    7. '_' → logprob: -12.253844261169434
    8. ',' → logprob: -12.378844261169434
    9. ' :' → logprob: -12.378844261169434
    10. ' ' → logprob: -14.128844261169434

Token 31: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.0003404687449801713
    2. ' lines' → logprob: -8.125340461730957
    3. '	lines' → logprob: -10.875340461730957
    4. ' return' → logprob: -11.875340461730957
    5. ' ' → logprob: -12.000340461730957
    6. '    ' → logprob: -12.625340461730957
    7. ' for' → logprob: -12.875340461730957
    8. '_lines' → logprob: -13.375340461730957
    9. '```' → logprob: -13.625340461730957
    10. 'lines' → logprob: -13.625340461730957

Token 32: ' out' (ID: 842)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.11368867009878159
    2. ' return' → logprob: -2.7386887073516846
    3. ' lines' → logprob: -3.3636887073516846
    4. ' for' → logprob: -5.2386884689331055
    5. 'return' → logprob: -6.3636884689331055
    6. 'lines' → logprob: -8.113688468933105
    7. ' ' → logprob: -8.488688468933105
    8. ' result' → logprob: -8.488688468933105
    9. '```' → logprob: -9.238688468933105
    10. '    ' → logprob: -9.238688468933105

Token 33: ' =' (ID: 314)
  Prédit: 'put'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'put' → logprob: -0.7771227359771729
    2. ' =' → logprob: -1.0271227359771729
    3. '=' → logprob: -2.277122735977173
    4. 'ut' → logprob: -2.777122735977173
    5. 'puts' → logprob: -5.527122497558594
    6. '=[]' → logprob: -5.527122497558594
    7. '_lines' → logprob: -6.277122497558594
    8. '=[]
' → logprob: -6.527122497558594
    9. '.put' → logprob: -6.652122497558594
    10. 'ines' → logprob: -7.152122497558594

Token 34: ' []
' (ID: 8911)
  Prédit: '[]'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '[]' → logprob: -0.08964798599481583
    2. ' []' → logprob: -2.4646480083465576
    3. '[]
' → logprob: -7.9646477699279785
    4. '[' → logprob: -8.464648246765137
    5. ' [' → logprob: -9.339648246765137
    6. ' ' → logprob: -11.339648246765137
    7. '["' → logprob: -11.589648246765137
    8. '[n' → logprob: -11.714648246765137
    9. '[]

' → logprob: -11.714648246765137
    10. ' []
' → logprob: -11.839648246765137

Token 35: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.05953070893883705
    2. ' for' → logprob: -3.309530735015869
    3. 'for' → logprob: -3.934530735015869
    4. '	for' → logprob: -7.059530735015869
    5. ' ' → logprob: -7.809530735015869
    6. '<|end|>' → logprob: -8.434530258178711
    7. '
' → logprob: -9.684530258178711
    8. '    ' → logprob: -9.684530258178711
    9. '    
' → logprob: -10.309530258178711
    10. '  ' → logprob: -10.684530258178711

Token 36: ' i' (ID: 575)
  Prédit: 'for'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'for' → logprob: -0.07953371852636337
    2. ' for' → logprob: -2.579533815383911
    3. '   ' → logprob: -7.454533576965332
    4. '	for' → logprob: -10.329533576965332
    5. ' ' → logprob: -10.954533576965332
    6. 'while' → logprob: -11.329533576965332
    7. ' while' → logprob: -12.954533576965332
    8. ' ' → logprob: -16.20453453063965
    9. '```' → logprob: -16.20453453063965
    10. '  ' → logprob: -16.57953453063965

Token 37: ' =' (ID: 314)
  Prédit: '='
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '=' → logprob: -0.04792727530002594
    2. 'n' → logprob: -3.4229273796081543
    3. ' =' → logprob: -4.297927379608154
    4. 'nt' → logprob: -8.047926902770996
    5. 'nd' → logprob: -9.172926902770996
    6. '_' → logprob: -9.797926902770996
    7. 'ntil' → logprob: -10.672926902770996
    8. 'f' → logprob: -10.672926902770996
    9. '0' → logprob: -11.672926902770996
    10. 'd' → logprob: -11.797926902770996

Token 38: ' ' (ID: 220)
  Prédit: '0'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '0' → logprob: -0.006716436706483364
    2. ' ' → logprob: -5.006716251373291
    3. '1' → logprob: -14.13171672821045
    4. 'n' → logprob: -15.63171672821045
    5. 'int' → logprob: -17.256715774536133
    6. 'i' → logprob: -17.381715774536133
    7. '=' → logprob: -17.631715774536133
    8. '2' → logprob: -18.006715774536133
    9. '   ' → logprob: -18.006715774536133
    10. '```' → logprob: -18.131715774536133

Token 39: '0' (ID: 15)
  Prédit: '0'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '0' → logprob: -0.0004931025905534625
    2. ' ' → logprob: -7.625493049621582
    3. '1' → logprob: -12.250493049621582
    4. 'n' → logprob: -16.7504940032959
    5. 'i' → logprob: -17.1254940032959
    6. '   ' → logprob: -17.3754940032959
    7. '=' → logprob: -17.7504940032959
    8. '`' → logprob: -18.0004940032959
    9. 'int' → logprob: -18.3129940032959
    10. 'len' → logprob: -18.3129940032959

Token 40: '
' (ID: 198)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.23873037099838257
    2. ' while' → logprob: -2.1137304306030273
    3. 'while' → logprob: -2.9887304306030273
    4. '	while' → logprob: -3.6137304306030273
    5. ' ' → logprob: -5.238730430603027
    6. '
' → logprob: -5.738730430603027
    7. '<|end|>' → logprob: -6.863730430603027
    8. '\n' → logprob: -6.988730430603027
    9. 'While' → logprob: -7.238730430603027
    10. '\' → logprob: -7.863730430603027

Token 41: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.4471365511417389
    2. ' while' → logprob: -2.322136640548706
    3. 'while' → logprob: -2.572136640548706
    4. '	while' → logprob: -3.072136640548706
    5. ' ' → logprob: -3.447136640548706
    6. '\n' → logprob: -3.572136640548706
    7. '<|end|>' → logprob: -4.072136402130127
    8. '
' → logprob: -4.197136402130127
    9. ' 
' → logprob: -4.447136402130127
    10. '  
' → logprob: -4.572136402130127

Token 42: ' while' (ID: 2049)
  Prédit: ' while'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' while' → logprob: -0.19025523960590363
    2. 'while' (adapté à ' while') → logprob: -1.9402552843093872
    3. '   ' → logprob: -3.5652551651000977
    4. '	while' → logprob: -6.815255165100098
    5. ' ' → logprob: -8.940255165100098
    6. '
' → logprob: -10.940255165100098
    7. '```' → logprob: -11.065255165100098
    8. 'While' → logprob: -11.440255165100098
    9. ' 
' → logprob: -12.315255165100098
    10. '  ' → logprob: -12.940255165100098

Token 43: ' i' (ID: 575)
  Prédit: ' i'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' i' → logprob: -0.0788937583565712
    2. 'i' → logprob: -2.5788936614990234
    3. '	i' → logprob: -12.578893661499023
    4. ' ' → logprob: -16.078893661499023
    5. '(i' → logprob: -16.078893661499023
    6. '<i' → logprob: -16.203893661499023
    7. ' ' → logprob: -16.578893661499023
    8. 'True' → logprob: -17.828893661499023
    9. '   ' → logprob: -17.953893661499023
    10. '_i' → logprob: -18.203893661499023

Token 44: ' <' (ID: 464)
  Prédit: '<'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '<' → logprob: -0.13100670278072357
    2. ' <' → logprob: -2.1310067176818848
    3. '<n' → logprob: -5.506006717681885
    4. '<len' → logprob: -12.506006240844727
    5. '<num' → logprob: -13.756006240844727
    6. ' ' → logprob: -13.881006240844727
    7. '<int' → logprob: -14.381006240844727
    8. '<N' → logprob: -14.881006240844727
    9. '<size' → logprob: -15.256006240844727
    10. '<i' → logprob: -15.756006240844727

Token 45: ' n' (ID: 297)
  Prédit: ' n'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' n' → logprob: -0.005234002135694027
    2. 'n' → logprob: -5.2552337646484375
    3. '	n' → logprob: -16.130233764648438
    4. ' ' → logprob: -16.630233764648438
    5. ' ' → logprob: -18.130233764648438
    6. ')n' → logprob: -19.880233764648438
    7. '(n' → logprob: -20.755233764648438
    8. '=n' → logprob: -21.005233764648438
    9. '<n' → logprob: -21.505233764648438
    10. '_n' → logprob: -21.880233764648438

Token 46: ':
' (ID: 734)
  Prédit: ':'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ':' → logprob: -0.0047887153923511505
    2. ':
' → logprob: -5.379788875579834
    3. ' :' → logprob: -9.004788398742676
    4. '   ' → logprob: -10.754788398742676
    5. '):' → logprob: -11.504788398742676
    6. ' :
' → logprob: -12.379788398742676
    7. ':
' → logprob: -13.504788398742676
    8. '**' → logprob: -13.754788398742676
    9. ':i' → logprob: -13.879788398742676
    10. '):
' → logprob: -14.254788398742676

Token 47: '       ' (ID: 309)
  Prédit: '       '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '       ' → logprob: -0.06300916522741318
    2. '
' → logprob: -3.938009262084961
    3. '   ' → logprob: -3.938009262084961
    4. ' out' → logprob: -4.313009262084961
    5. 'out' → logprob: -5.063009262084961
    6. '\n' → logprob: -7.563009262084961
    7. ' 
' → logprob: -8.063009262084961
    8. '    
' → logprob: -8.188009262084961
    9. '```' → logprob: -8.688009262084961
    10. '(out' → logprob: -9.063009262084961

Token 48: ' out' (ID: 842)
  Prédit: ' out'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' out' → logprob: -0.3015971779823303
    2. 'out' (adapté à ' out') → logprob: -2.3015971183776855
    3. '       ' → logprob: -2.5515971183776855
    4. '   ' → logprob: -2.6765971183776855
    5. ' 
' → logprob: -5.4265971183776855
    6. '
' → logprob: -5.8015971183776855
    7. '    ' → logprob: -6.6765971183776855
    8. ' ' → logprob: -6.8015971183776855
    9. '```' → logprob: -6.9265971183776855
    10. '        ' → logprob: -7.3015971183776855

Token 49: '.append' (ID: 3709)
  Prédit: '.append'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '.append' → logprob: -0.006738811731338501
    2. '.' → logprob: -5.006738662719727
    3. '.extend' → logprob: -11.006738662719727
    4. 'append' → logprob: -12.256738662719727
    5. '.app' → logprob: -13.756738662719727
    6. '.Append' → logprob: -14.381738662719727
    7. '_append' → logprob: -15.631738662719727
    8. '.ap' → logprob: -15.631738662719727
    9. ' append' → logprob: -16.256738662719727
    10. 'Append' → logprob: -17.131738662719727

Token 50: '(fetch' (ID: 76382)
  Prédit: '(fetch'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(fetch' → logprob: -0.0009181279456242919
    2. '(' → logprob: -7.000917911529541
    3. '(sys' → logprob: -12.1259183883667
    4. 'fetch' → logprob: -14.5009183883667
    5. '(f' → logprob: -14.7509183883667
    6. '((' → logprob: -16.000917434692383
    7. '(
' → logprob: -16.250917434692383
    8. ' fetch' → logprob: -16.750917434692383
    9. ' (' → logprob: -17.250917434692383
    10. '()' → logprob: -17.750917434692383

Token 51: '())
' (ID: 4574)
  Prédit: '())'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '())' → logprob: -0.10199479758739471
    2. '()))' → logprob: -2.351994752883911
    3. '()' → logprob: -6.85199499130249
    4. '()))
' → logprob: -7.97699499130249
    5. '())
' → logprob: -8.101994514465332
    6. ')' → logprob: -10.101994514465332
    7. '))' → logprob: -10.851994514465332
    8. ' ())' → logprob: -11.476994514465332
    9. '()))

' → logprob: -12.476994514465332
    10. '()
' → logprob: -12.476994514465332

Token 52: '       ' (ID: 309)
  Prédit: '       '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '       ' → logprob: -0.5839766263961792
    2. '
' → logprob: -0.8339766263961792
    3. '   ' → logprob: -5.083976745605469
    4. '        
' → logprob: -7.458976745605469
    5. '
' → logprob: -7.958976745605469
    6. '<|end|>' → logprob: -8.083976745605469
    7. '    
' → logprob: -8.583976745605469
    8. '  
' → logprob: -9.333976745605469
    9. '\n' → logprob: -9.458976745605469
    10. ' 
' → logprob: -9.458976745605469

Token 53: ' i' (ID: 575)
  Prédit: '       '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '       ' → logprob: -0.3896762430667877
    2. '
' → logprob: -1.5146762132644653
    3. 'i' (adapté à ' i') → logprob: -2.764676332473755
    4. '   ' → logprob: -4.014676094055176
    5. '	i' → logprob: -5.014676094055176
    6. '\n' → logprob: -5.139676094055176
    7. ' i' → logprob: -5.264676094055176
    8. ' 
' → logprob: -7.014676094055176
    9. '
' → logprob: -7.139676094055176
    10. '        
' → logprob: -7.264676094055176

Token 54: ' +=' (ID: 2757)
  Prédit: '+'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '+' → logprob: -0.20299692451953888
    2. ' +=' → logprob: -1.9529969692230225
    3. '+=' → logprob: -3.2029969692230225
    4. ' +' → logprob: -6.827996730804443
    5. ' ' → logprob: -9.202997207641602
    6. '++' → logprob: -10.327997207641602
    7. '=' → logprob: -12.327997207641602
    8. '+++' → logprob: -12.452997207641602
    9. '<|end|>' → logprob: -13.327997207641602
    10. '1' → logprob: -13.952997207641602

Token 55: ' ' (ID: 220)
  Prédit: ' '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' ' → logprob: -0.25192955136299133
    2. '1' → logprob: -1.501929521560669
    3. ' ' → logprob: -14.50192928314209
    4. '```' → logprob: -20.626930236816406
    5. '<|end|>' → logprob: -21.251930236816406
    6. '   ' → logprob: -21.251930236816406
    7. '    ' → logprob: -21.376930236816406
    8. ' one' → logprob: -21.501930236816406
    9. '１' → logprob: -21.501930236816406
    10. '0' → logprob: -21.626930236816406

Token 56: '1' (ID: 16)
  Prédit: '1'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '1' → logprob: -1.8624639324116288e-06
    2. ' ' → logprob: -13.250001907348633
    3. '```' → logprob: -19.000001907348633
    4. '   ' → logprob: -19.250001907348633
    5. '  ' → logprob: -20.875001907348633
    6. '１' → logprob: -21.000001907348633
    7. '۱' → logprob: -21.687501907348633
    8. '`' → logprob: -21.875001907348633
    9. '१' → logprob: -22.625001907348633
    10. 'a' → logprob: -22.937501907348633

Token 57: '
' (ID: 198)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.0026132361963391304
    2. '
' → logprob: -6.252613067626953
    3. 'return' → logprob: -8.502613067626953
    4. '    
' → logprob: -8.752613067626953
    5. '	return' → logprob: -9.252613067626953
    6. '\n' → logprob: -9.252613067626953
    7. ' return' → logprob: -9.752613067626953
    8. '       ' → logprob: -11.377613067626953
    9. ':return' → logprob: -11.377613067626953
    10. '<|end|>' → logprob: -12.002613067626953

Token 58: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.0009380202973261476
    2. 'return' → logprob: -7.2509379386901855
    3. ' return' → logprob: -9.125938415527344
    4. '	return' → logprob: -10.250938415527344
    5. '       ' → logprob: -10.375938415527344
    6. '    
' → logprob: -10.875938415527344
    7. '
' → logprob: -11.250938415527344
    8. '```' → logprob: -12.125938415527344
    9. ':return' → logprob: -12.250938415527344
    10. '   ' → logprob: -13.375938415527344

Token 59: ' return' (ID: 622)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.2292546033859253
    2. 'return' (adapté à ' return') → logprob: -1.7292546033859253
    3. ' return' → logprob: -3.604254722595215
    4. '	return' → logprob: -8.604254722595215
    5. '       ' → logprob: -10.979254722595215
    6. ' ' → logprob: -11.229254722595215
    7. ':return' → logprob: -11.479254722595215
    8. '
' → logprob: -11.729254722595215
    9. '```' → logprob: -12.229254722595215
    10. '    
' → logprob: -12.604254722595215

Token 60: ' out' (ID: 842)
  Prédit: ' out'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' out' → logprob: -0.25193002820014954
    2. 'out' → logprob: -1.5019299983978271
    3. ' ' → logprob: -14.876930236816406
    4. '(out' → logprob: -15.626930236816406
    5. '[out' → logprob: -15.751930236816406
    6. '	out' → logprob: -15.751930236816406
    7. ' ' → logprob: -17.001930236816406
    8. '*out' → logprob: -18.126930236816406
    9. '```' → logprob: -18.126930236816406
    10. '   ' → logprob: -18.751930236816406

Token 61: '

' (ID: 279)
  Prédit: '
'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '
' → logprob: -0.5210499167442322
    2. '<|end|>' → logprob: -1.521049976348877
    3. 'def' → logprob: -2.146049976348877
    4. '\n' → logprob: -3.521049976348877
    5. '

' → logprob: -4.021049976348877
    6. '[' → logprob: -4.771049976348877
    7. '```' → logprob: -5.146049976348877
    8. '<|end|>' → logprob: -6.396049976348877
    9. 'n' → logprob: -6.521049976348877
    10. 'newline' → logprob: -6.771049976348877

Token 62: 'def' (ID: 1314)
  Prédit: 'def'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'def' → logprob: -0.21126772463321686
    2. '
' → logprob: -2.9612677097320557
    3. '<|end|>' → logprob: -3.0862677097320557
    4. '#' → logprob: -3.2112677097320557
    5. 'n' → logprob: -4.211267948150635
    6. '```' → logprob: -4.336267948150635
    7. 'print' → logprob: -5.086267948150635
    8. '\n' → logprob: -5.336267948150635
    9. '<|end|>' → logprob: -6.086267948150635
    10. 'for' → logprob: -6.336267948150635

Token 63: ' int' (ID: 677)
  Prédit: ' main'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' main' → logprob: -0.02042158879339695
    2. ' solve' → logprob: -4.145421504974365
    3. ' fetch' → logprob: -6.520421504974365
    4. ' process' → logprob: -7.395421504974365
    5. ' parse' → logprob: -7.520421504974365
    6. ' factorial' → logprob: -8.395421981811523
    7. ' calculate' → logprob: -8.770421981811523
    8. ' solution' → logprob: -8.895421981811523
    9. ' test' → logprob: -9.145421981811523
    10. ' read' → logprob: -9.270421981811523

Token 64: '_lines' (ID: 42980)
  Prédit: 's'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 's' → logprob: -0.0013047605752944946
    2. 'eger' → logprob: -6.876304626464844
    3. 'o' → logprob: -9.876304626464844
    4. 'er' → logprob: -10.001304626464844
    5. '_s' → logprob: -10.001304626464844
    6. '_' → logprob: -10.876304626464844
    7. '_list' → logprob: -11.251304626464844
    8. '()' → logprob: -11.376304626464844
    9. 'e' → logprob: -11.376304626464844
    10. '(s' → logprob: -11.501304626464844

Token 65: '(n' (ID: 2406)
  Prédit: '(n'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(n' → logprob: -0.030114687979221344
    2. '(' → logprob: -3.5301146507263184
    3. '()' → logprob: -8.405115127563477
    4. ' (' → logprob: -9.405115127563477
    5. '(N' → logprob: -10.405115127563477
    6. '():' → logprob: -11.155115127563477
    7. '()(' → logprob: -12.155115127563477
    8. '("("' → logprob: -13.030115127563477
    9. '(num' → logprob: -13.780115127563477
    10. '```' → logprob: -13.905115127563477

Token 66: '):
' (ID: 1883)
  Prédit: '):'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '):' → logprob: -0.00016611411410849541
    2. ')' → logprob: -8.875165939331055
    3. '):
' → logprob: -10.875165939331055
    4. ' ):' → logprob: -12.000165939331055
    5. ':' → logprob: -14.375165939331055
    6. '   ' → logprob: -15.250165939331055
    7. '):
' → logprob: -16.000165939331055
    8. '"):' → logprob: -17.000165939331055
    9. ''):' → logprob: -17.125165939331055
    10. '():' → logprob: -17.250165939331055

Token 67: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.01583820953965187
    2. ' return' → logprob: -5.015838146209717
    3. 'def' → logprob: -5.890838146209717
    4. '(n' → logprob: -6.515838146209717
    5. 'return' → logprob: -6.765838146209717
    6. 'n' → logprob: -7.265838146209717
    7. ' out' → logprob: -7.390838146209717
    8. ' n' → logprob: -7.640838146209717
    9. 'out' → logprob: -7.890838146209717
    10. '[]' → logprob: -8.390838623046875

Token 68: ' lines' (ID: 8698)
  Prédit: ' return'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' return' → logprob: -0.16564959287643433
    2. 'return' → logprob: -1.915649652481079
    3. '   ' → logprob: -5.2906494140625
    4. ' out' → logprob: -8.5406494140625
    5. 'out' → logprob: -9.2906494140625
    6. ' ' → logprob: -10.9156494140625
    7. '```' → logprob: -11.1656494140625
    8. '    ' → logprob: -11.2906494140625
    9. 'def' → logprob: -11.6656494140625
    10. ' list' → logprob: -12.1656494140625

Token 69: ' =' (ID: 314)
  Prédit: ' ='
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' =' → logprob: -0.012596650049090385
    2. '=' → logprob: -4.512596607208252
    3. '   ' → logprob: -7.387596607208252
    4. '()' → logprob: -8.13759708404541
    5. '.extend' → logprob: -8.26259708404541
    6. ' ' → logprob: -9.01259708404541
    7. '=[]' → logprob: -9.26259708404541
    8. '.append' → logprob: -9.88759708404541
    9. '(' → logprob: -10.63759708404541
    10. '[]' → logprob: -11.01259708404541

Token 70: ' []
' (ID: 8911)
  Prédit: '[get'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '[get' → logprob: -0.4040898084640503
    2. 'get' → logprob: -1.6540898084640503
    3. ' get' → logprob: -2.40408992767334
    4. ' [' → logprob: -3.77908992767334
    5. '[int' → logprob: -4.40408992767334
    6. '[' → logprob: -5.02908992767334
    7. 'list' → logprob: -6.15408992767334
    8. '[list' → logprob: -6.27908992767334
    9. '[]' → logprob: -6.40408992767334
    10. '[]
' → logprob: -6.90408992767334

Token 71: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.0001745775662129745
    2. '
' → logprob: -9.125174522399902
    3. '    
' → logprob: -10.500174522399902
    4. '<|end|>' → logprob: -11.750174522399902
    5. ' for' → logprob: -11.875174522399902
    6. ' ' → logprob: -12.125174522399902
    7. ' i' → logprob: -12.625174522399902
    8. 'i' → logprob: -12.875174522399902
    9. 'for' → logprob: -13.375174522399902
    10. '    ' → logprob: -13.375174522399902

Token 72: ' for' (ID: 395)
  Prédit: 'i'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'i' → logprob: -0.15151658654212952
    2. ' i' → logprob: -2.4015166759490967
    3. ' for' → logprob: -3.9015166759490967
    4. 'for' (adapté à ' for') → logprob: -4.151516437530518
    5. '   ' → logprob: -4.276516437530518
    6. '_' → logprob: -9.651516914367676
    7. ' ' → logprob: -10.401516914367676
    8. ' while' → logprob: -11.151516914367676
    9. 'while' → logprob: -11.151516914367676
    10. 'j' → logprob: -11.276516914367676

Token 73: ' _' (ID: 1175)
  Prédit: ' _'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' _' → logprob: -0.47436338663101196
    2. '_' → logprob: -0.974363386631012
    3. ' i' → logprob: -8.599363327026367
    4. ' ' → logprob: -9.724363327026367
    5. 'i' → logprob: -10.224363327026367
    6. ' in' → logprob: -13.474363327026367
    7. '_i' → logprob: -13.474363327026367
    8. ' ' → logprob: -13.724363327026367
    9. ' line' → logprob: -14.099363327026367
    10. '_line' → logprob: -14.849363327026367

Token 74: ' in' (ID: 306)
  Prédit: ' in'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' in' → logprob: -0.08985994011163712
    2. 'in' → logprob: -2.464859962463379
    3. ' ' → logprob: -7.339859962463379
    4. 'range' → logprob: -8.714859962463379
    5. 'lines' → logprob: -10.464859962463379
    6. '  ' → logprob: -10.589859962463379
    7. ' range' → logprob: -11.464859962463379
    8. 'n' → logprob: -11.714859962463379
    9. ' _' → logprob: -11.964859962463379
    10. 'i' → logprob: -11.964859962463379

Token 75: ' range' (ID: 3352)
  Prédit: 'range'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'range' → logprob: -0.0003863438032567501
    2. ' range' → logprob: -7.8753862380981445
    3. 'get' → logprob: -13.625386238098145
    4. 'rang' → logprob: -13.625386238098145
    5. '	range' → logprob: -14.000386238098145
    6. 'fetch' → logprob: -14.375386238098145
    7. 'ran' → logprob: -15.000386238098145
    8. '(range' → logprob: -15.125386238098145
    9. 'ange' → logprob: -15.250386238098145
    10. 'r' → logprob: -15.625386238098145

Token 76: '(n' (ID: 2406)
  Prédit: '(n'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(n' → logprob: -0.00013512482109945267
    2. '(' → logprob: -9.00013542175293
    3. ' n' → logprob: -12.00013542175293
    4. ' (' → logprob: -12.75013542175293
    5. 'n' → logprob: -12.87513542175293
    6. '(int' → logprob: -18.00013542175293
    7. ')n' → logprob: -18.12513542175293
    8. ' ' → logprob: -18.25013542175293
    9. '	n' → logprob: -18.37513542175293
    10. '_n' → logprob: -18.87513542175293

Token 77: '):
' (ID: 1883)
  Prédit: '):'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '):' → logprob: -0.0027806314174085855
    2. '):
' → logprob: -6.127780437469482
    3. ')' → logprob: -7.627780437469482
    4. ':' → logprob: -9.75278091430664
    5. ' ):' → logprob: -10.37778091430664
    6. '   ' → logprob: -11.37778091430664
    7. '):
' → logprob: -12.00278091430664
    8. '():' → logprob: -15.00278091430664
    9. ' ' → logprob: -15.37778091430664
    10. ' )' → logprob: -15.50278091430664

Token 78: '       ' (ID: 309)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.3921811580657959
    2. '       ' → logprob: -1.142181158065796
    3. ' lines' → logprob: -5.642181396484375
    4. '	lines' → logprob: -6.892181396484375
    5. '
' → logprob: -8.017181396484375
    6. '(lines' → logprob: -8.517181396484375
    7. '    
' → logprob: -9.142181396484375
    8. '_lines' → logprob: -10.892181396484375
    9. ',' → logprob: -11.142181396484375
    10. '```' → logprob: -11.392181396484375

Token 79: ' lines' (ID: 8698)
  Prédit: ' lines'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' lines' → logprob: -0.39954060316085815
    2. '   ' → logprob: -1.149540662765503
    3. 'lines' (adapté à ' lines') → logprob: -4.399540424346924
    4. '	lines' → logprob: -8.399540901184082
    5. '(lines' → logprob: -10.649540901184082
    6. ' ' → logprob: -11.024540901184082
    7. 'int' → logprob: -11.399540901184082
    8. '  ' → logprob: -11.899540901184082
    9. ' int' → logprob: -12.024540901184082
    10. 'ints' → logprob: -12.399540901184082

Token 80: '.append' (ID: 3709)
  Prédit: '.append'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '.append' → logprob: -0.0015020023565739393
    2. '.' → logprob: -7.00150203704834
    3. '=' → logprob: -8.25150203704834
    4. '.extend' → logprob: -8.62650203704834
    5. 'append' → logprob: -9.25150203704834
    6. ')' → logprob: -10.37650203704834
    7. '().' → logprob: -12.00150203704834
    8. ' =' → logprob: -12.25150203704834
    9. ').' → logprob: -12.50150203704834
    10. '+=' → logprob: -13.12650203704834

Token 81: '([' (ID: 5194)
  Prédit: '(int'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '(int' → logprob: -0.0035516046918928623
    2. '(list' → logprob: -5.753551483154297
    3. 'ints' → logprob: -8.628551483154297
    4. 'int' → logprob: -9.378551483154297
    5. 'list' → logprob: -9.628551483154297
    6. '(' → logprob: -10.503551483154297
    7. '(tuple' → logprob: -11.253551483154297
    8. '(map' → logprob: -13.503551483154297
    9. ' ints' → logprob: -14.628551483154297
    10. '()' → logprob: -14.753551483154297

Token 82: 'int' (ID: 491)
  Prédit: 'int'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'int' → logprob: -0.026567799970507622
    2. '*' → logprob: -3.6515676975250244
    3. ']int' → logprob: -9.026567459106445
    4. ']' → logprob: -9.901567459106445
    5. 'ints' → logprob: -10.651567459106445
    6. 'map' → logprob: -10.651567459106445
    7. '0' → logprob: -11.276567459106445
    8. 'fetch' → logprob: -11.401567459106445
    9. ' int' → logprob: -12.151567459106445
    10. 'i' → logprob: -12.401567459106445

Token 83: '(c' (ID: 2410)
  Prédit: '(x'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '(x' → logprob: -0.060556620359420776
    2. '(i' → logprob: -3.685556650161743
    3. '](' → logprob: -3.810556650161743
    4. '(s' → logprob: -4.935556411743164
    5. ']' → logprob: -5.685556411743164
    6. '(' → logprob: -7.560556411743164
    7. '(token' → logprob: -8.935556411743164
    8. 's' → logprob: -10.060556411743164
    9. '(v' → logprob: -10.435556411743164
    10. ' ]' → logprob: -10.560556411743164

Token 84: ')' (ID: 8)
  Prédit: ')'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')' → logprob: -1.652451464906335e-05
    2. ' )' → logprob: -12.250016212463379
    3. ' for' → logprob: -12.875016212463379
    4. 'for' → logprob: -13.000016212463379
    5. 'char' → logprob: -13.500016212463379
    6. ')]' → logprob: -14.000016212463379
    7. 'token' → logprob: -14.125016212463379
    8. '')' → logprob: -14.375016212463379
    9. ')])' → logprob: -14.625016212463379
    10. '(x' → logprob: -14.750016212463379

Token 85: ' for' (ID: 395)
  Prédit: '(x'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(x' → logprob: -0.2865612804889679
    2. '(i' → logprob: -1.7865612506866455
    3. ' for' → logprob: -3.0365612506866455
    4. ')' → logprob: -3.6615612506866455
    5. '(s' → logprob: -6.036561489105225
    6. 'for' → logprob: -6.036561489105225
    7. '(c' → logprob: -7.536561489105225
    8. 'char' → logprob: -7.911561489105225
    9. ']' → logprob: -8.036561012268066
    10. '()' → logprob: -8.036561012268066

Token 86: ' c' (ID: 274)
  Prédit: ' fetch'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' fetch' → logprob: -0.21622924506664276
    2. ' c' → logprob: -1.9662292003631592
    3. ' ' → logprob: -3.716229200363159
    4. 'fetch' → logprob: -3.966229200363159
    5. 'c' → logprob: -4.591229438781738
    6. '  ' → logprob: -7.716229438781738
    7. '(fetch' → logprob: -9.091229438781738
    8. '<|end|>' → logprob: -9.091229438781738
    9. ' ' → logprob: -9.591229438781738
    10. ' in' → logprob: -9.716229438781738

Token 87: ' in' (ID: 306)
  Prédit: ' in'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' in' → logprob: -0.28140103816986084
    2. 'in' → logprob: -1.4064010381698608
    3. '(' → logprob: -8.781400680541992
    4. ')' → logprob: -10.281400680541992
    5. ' ' → logprob: -11.406400680541992
    6. 'c' → logprob: -11.906400680541992
    7. 'fetch' → logprob: -11.906400680541992
    8. '(fetch' → logprob: -12.031400680541992
    9. 's' → logprob: -12.406400680541992
    10. ',' → logprob: -12.531400680541992

Token 88: ' fetch' (ID: 12011)
  Prédit: ' fetch'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' fetch' → logprob: -0.2523461580276489
    2. 'fetch' → logprob: -1.502346158027649
    3. '(fetch' → logprob: -8.62734603881836
    4. ' fet' → logprob: -9.37734603881836
    5. ' list' → logprob: -10.12734603881836
    6. 'list' → logprob: -10.62734603881836
    7. 'f' → logprob: -10.62734603881836
    8. ' f' → logprob: -10.75234603881836
    9. ' ' → logprob: -11.00234603881836
    10. 'fet' → logprob: -11.87734603881836

Token 89: '()])
' (ID: 141457)
  Prédit: '().'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '().' → logprob: -0.28651127219200134
    2. '()' → logprob: -1.5365113019943237
    3. '()]' → logprob: -3.411511182785034
    4. '())' → logprob: -7.036511421203613
    5. ')])' → logprob: -10.161511421203613
    6. '(' → logprob: -10.411511421203613
    7. '()].' → logprob: -10.911511421203613
    8. '()])
' → logprob: -11.911511421203613
    9. '()[' → logprob: -11.911511421203613
    10. ' ()' → logprob: -12.411511421203613

Token 90: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.00380281126126647
    2. '	return' → logprob: -6.12880277633667
    3. 'return' → logprob: -7.37880277633667
    4. ' return' → logprob: -7.50380277633667
    5. '       ' → logprob: -8.128803253173828
    6. '<|end|>' → logprob: -9.878803253173828
    7. '
' → logprob: -10.253803253173828
    8. '    
' → logprob: -10.378803253173828
    9. ')' → logprob: -11.628803253173828
    10. ' ' → logprob: -11.878803253173828

Token 91: ' return' (ID: 622)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.2475365251302719
    2. 'return' (adapté à ' return') → logprob: -1.622536540031433
    3. ' return' → logprob: -3.9975364208221436
    4. '	return' → logprob: -6.247536659240723
    5. '
' → logprob: -6.997536659240723
    6. ' ' → logprob: -8.372536659240723
    7. '<|end|>' → logprob: -8.497536659240723
    8. '    
' → logprob: -9.372536659240723
    9. '       ' → logprob: -10.122536659240723
    10. '  ' → logprob: -10.372536659240723

Token 92: ' lines' (ID: 8698)
  Prédit: ' lines'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' lines' → logprob: -0.6931548714637756
    2. 'lines' → logprob: -0.6931548714637756
    3. '(lines' → logprob: -11.943155288696289
    4. '	lines' → logprob: -13.943155288696289
    5. 'Lines' → logprob: -16.56815528869629
    6. 'line' → logprob: -17.06815528869629
    7. '_lines' → logprob: -17.19315528869629
    8. 'lin' → logprob: -18.69315528869629
    9. '.lines' → logprob: -18.94315528869629
    10. '-lines' → logprob: -19.69315528869629

Token 93: '

' (ID: 279)
  Prédit: '
'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '
' → logprob: -0.45508936047554016
    2. '<|end|>' → logprob: -1.2050893306732178
    3. 'def' → logprob: -3.0800893306732178
    4. '

' → logprob: -5.205089569091797
    5. '#' → logprob: -5.205089569091797
    6. '```' → logprob: -5.455089569091797
    7. '\n' → logprob: -6.205089569091797
    8. '[' → logprob: -7.330089569091797
    9. '<|end|>' → logprob: -7.830089569091797
    10. '' → logprob: -7.955089569091797

Token 94: 'if' (ID: 366)
  Prédit: 'def'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'def' → logprob: -0.008390573784708977
    2. '<|end|>' → logprob: -5.633390426635742
    3. '
' → logprob: -6.383390426635742
    4. '#' → logprob: -6.383390426635742
    5. 'n' → logprob: -7.258390426635742
    6. '\' → logprob: -9.008390426635742
    7. '```' → logprob: -9.133390426635742
    8. 'print' → logprob: -9.633390426635742
    9. '  
' → logprob: -10.008390426635742
    10. '\n' → logprob: -10.008390426635742

Token 95: ' __' (ID: 2516)
  Prédit: ' __'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' __' → logprob: -0.0934932678937912
    2. ' ' → logprob: -2.9684932231903076
    3. ' ' → logprob: -3.7184932231903076
    4. '__' → logprob: -4.718493461608887
    5. ' True' → logprob: -5.968493461608887
    6. '_' → logprob: -6.968493461608887
    7. '  ' → logprob: -7.593493461608887
    8. ' _' → logprob: -8.968493461608887
    9. ' not' → logprob: -9.093493461608887
    10. ' sys' → logprob: -9.218493461608887

Token 96: 'name' (ID: 897)
  Prédit: '__'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '__' → logprob: -0.1411411464214325
    2. '.' → logprob: -2.891141176223755
    3. ' .' → logprob: -3.891141176223755
    4. ' __' → logprob: -4.016140937805176
    5. '_' → logprob: -4.391140937805176
    6. '<|end|>' → logprob: -4.641140937805176
    7. '[' → logprob: -5.016140937805176
    8. ' ' → logprob: -5.516140937805176
    9. ' ==' → logprob: -6.266140937805176
    10. '.__' → logprob: -7.266140937805176

Token 97: '__' (ID: 771)
  Prédit: '__'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '__' → logprob: -5.56233171664644e-05
    2. '__.__' → logprob: -10.500055313110352
    3. '_' → logprob: -10.750055313110352
    4. '__.' → logprob: -12.750055313110352
    5. '__
' → logprob: -13.875055313110352
    6. '___' → logprob: -14.250055313110352
    7. '____' → logprob: -14.375055313110352
    8. '__[' → logprob: -14.625055313110352
    9. '__

' → logprob: -15.000055313110352
    10. '__["' → logprob: -15.375055313110352

Token 98: ' ==' (ID: 951)
  Prédit: ' =='
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' ==' → logprob: -0.10508652776479721
    2. '__' → logprob: -2.7300865650177
    3. '==' → logprob: -3.4800865650177
    4. '=="' → logprob: -5.980086326599121
    5. '_' → logprob: -7.355086326599121
    6. '.' → logprob: -8.480086326599121
    7. '.__' → logprob: -9.605086326599121
    8. ' ' → logprob: -10.105086326599121
    9. '=='' → logprob: -10.230086326599121
    10. ' .' → logprob: -10.355086326599121

Token 99: ' '__' (ID: 28278)
  Prédit: '"'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '"' → logprob: -0.1002177745103836
    2. ''' → logprob: -2.350217819213867
    3. ' "' → logprob: -11.475217819213867
    4. ' '' → logprob: -15.475217819213867
    5. ' "__' → logprob: -15.975217819213867
    6. '__' → logprob: -16.225217819213867
    7. '_' → logprob: -16.475217819213867
    8. ' ' → logprob: -16.725217819213867
    9. ' ' → logprob: -16.850217819213867
    10. '`' → logprob: -17.225217819213867

Token 100: 'main' (ID: 7731)
  Prédit: 'main'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'main' → logprob: -1.7835754988482222e-05
    2. 'm' → logprob: -11.875018119812012
    3. 'name' → logprob: -12.000018119812012
    4. 'ma' → logprob: -12.375018119812012
    5. 'mai' → logprob: -15.625018119812012
    6. '_main' → logprob: -16.000017166137695
    7. ' main' → logprob: -16.250017166137695
    8. '__' → logprob: -17.750017166137695
    9. 'maine' → logprob: -18.750017166137695
    10. '	main' → logprob: -19.375017166137695

Token 101: '__':
' (ID: 39314)
  Prédit: '__'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '__' → logprob: -0.2134963572025299
    2. '__:' → logprob: -1.7134963274002075
    3. '__':
' → logprob: -4.463496208190918
    4. '_' → logprob: -7.713496208190918
    5. '__":
' → logprob: -11.338496208190918
    6. '':' → logprob: -11.338496208190918
    7. ':' → logprob: -11.463496208190918
    8. '__.' → logprob: -13.213496208190918
    9. '___' → logprob: -13.588496208190918
    10. '__('' → logprob: -14.338496208190918

Token 102: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.07437797635793686
    2. '    
' → logprob: -3.69937801361084
    3. '<|end|>' → logprob: -3.82437801361084
    4. '
' → logprob: -4.69937801361084
    5. ' 
' → logprob: -4.94937801361084
    6. '(n' → logprob: -6.19937801361084
    7. ':' → logprob: -6.19937801361084
    8. '```' → logprob: -6.94937801361084
    9. '  
' → logprob: -7.19937801361084
    10. 'n' → logprob: -7.57437801361084

Token 103: ' n' (ID: 297)
  Prédit: ' n'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' n' → logprob: -0.018411779776215553
    2. 'n' (adapté à ' n') → logprob: -4.018411636352539
    3. ' t' → logprob: -8.518411636352539
    4. '   ' → logprob: -10.268411636352539
    5. 't' → logprob: -11.768411636352539
    6. ' data' → logprob: -12.268411636352539
    7. '	n' → logprob: -12.268411636352539
    8. ' 
' → logprob: -13.643411636352539
    9. '    ' → logprob: -13.643411636352539
    10. ' import' → logprob: -14.018411636352539

Token 104: ' =' (ID: 314)
  Prédit: ' ='
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' =' → logprob: -0.021822458133101463
    2. ' ' → logprob: -4.271822452545166
    3. '=' → logprob: -4.896822452545166
    4. ',' → logprob: -9.646822929382324
    5. ' ,' → logprob: -10.521822929382324
    6. '  ' → logprob: -10.646822929382324
    7. ' =
' → logprob: -11.271822929382324
    8. ' =)' → logprob: -11.396822929382324
    9. '.' → logprob: -12.646822929382324
    10. ')' → logprob: -12.896822929382324

Token 105: ' int' (ID: 677)
  Prédit: ' int'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' int' → logprob: -0.12705294787883759
    2. 'int' → logprob: -2.1270530223846436
    3. ' ' → logprob: -9.127053260803223
    4. 'ints' → logprob: -12.502053260803223
    5. '<int' → logprob: -12.627053260803223
    6. '=int' → logprob: -12.877053260803223
    7. '[int' → logprob: -13.377053260803223
    8. ' ints' → logprob: -13.377053260803223
    9. '10' → logprob: -13.752053260803223
    10. ' ' → logprob: -14.127053260803223

Token 106: '(fetch' (ID: 76382)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(' → logprob: -0.015126786194741726
    2. '(fetch' → logprob: -4.515126705169678
    3. '(input' → logprob: -5.515126705169678
    4. '(sys' → logprob: -10.390127182006836
    5. '('' → logprob: -12.265127182006836
    6. '()' → logprob: -12.765127182006836
    7. '(
' → logprob: -12.890127182006836
    8. ' (' → logprob: -13.515127182006836
    9. 'input' → logprob: -14.265127182006836
    10. '((' → logprob: -14.640127182006836

Token 107: '())
' (ID: 4574)
  Prédit: '())'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '())' → logprob: -0.0025590185541659594
    2. '()' → logprob: -6.002559185028076
    3. ')' → logprob: -9.752558708190918
    4. '())
' → logprob: -10.752558708190918
    5. ' ())' → logprob: -13.877558708190918
    6. '()
' → logprob: -14.127558708190918
    7. '())

' → logprob: -14.252558708190918
    8. '()))' → logprob: -14.627558708190918
    9. '().' → logprob: -14.877558708190918
    10. '(' → logprob: -15.002558708190918

Token 108: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.03316688910126686
    2. '    
' → logprob: -3.6581668853759766
    3. '<|end|>' → logprob: -5.408166885375977
    4. '    ' → logprob: -7.033166885375977
    5. '
' → logprob: -7.533166885375977
    6. '[' → logprob: -8.658166885375977
    7. ')' → logprob: -8.908166885375977
    8. 'data' → logprob: -9.533166885375977
    9. '```' → logprob: -9.908166885375977
    10. ' 
' → logprob: -9.908166885375977

Token 109: ' print' (ID: 2123)
  Prédit: 'lines'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'lines' → logprob: -0.7065471410751343
    2. 'grid' → logprob: -1.2065471410751343
    3. 'matrix' → logprob: -2.081547260284424
    4. 'arr' → logprob: -3.206547260284424
    5. 'data' → logprob: -4.206547260284424
    6. 'board' → logprob: -4.831547260284424
    7. ' lines' → logprob: -5.706547260284424
    8. 'a' → logprob: -5.956547260284424
    9. ' grid' → logprob: -6.331547260284424
    10. 'mat' → logprob: -6.331547260284424

Token 110: '(n' (ID: 2406)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(' → logprob: -0.2771359384059906
    2. '(n' → logprob: -1.902135968208313
    3. '(int' → logprob: -2.5271358489990234
    4. '()' → logprob: -5.152135848999023
    5. '(get' → logprob: -6.152135848999023
    6. '(*' → logprob: -6.277135848999023
    7. '('' → logprob: -6.652135848999023
    8. '(sum' → logprob: -7.152135848999023
    9. '(s' → logprob: -7.777135848999023
    10. '(len' → logprob: -8.152135848999023

Token 111: ' **' (ID: 6240)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ')' → logprob: -0.00017600801947992295
    2. ' )' → logprob: -8.750176429748535
    3. '+' → logprob: -11.875176429748535
    4. '*' → logprob: -12.625176429748535
    5. '**' → logprob: -12.750176429748535
    6. '))' → logprob: -14.000176429748535
    7. ')
' → logprob: -14.625176429748535
    8. ')#' → logprob: -14.625176429748535
    9. '-' → logprob: -14.875176429748535
    10. '[' → logprob: -15.250176429748535

Token 112: ' ' (ID: 220)
  Prédit: '2'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '2' → logprob: -0.007238263729959726
    2. ' ' → logprob: -5.007238388061523
    3. '3' → logprob: -8.257238388061523
    4. '0' → logprob: -8.257238388061523
    5. '1' → logprob: -13.132238388061523
    6. '5' → logprob: -14.382238388061523
    7. ' ' → logprob: -14.632238388061523
    8. '4' → logprob: -15.507238388061523
    9. '6' → logprob: -15.507238388061523
    10. '9' → logprob: -15.882238388061523

Token 113: '2' (ID: 17)
  Prédit: '2'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '2' → logprob: -0.0014236874412745237
    2. '0' → logprob: -7.0014238357543945
    3. '3' → logprob: -7.6264238357543945
    4. ' ' → logprob: -10.751423835754395
    5. '1' → logprob: -13.126423835754395
    6. '5' → logprob: -15.001423835754395
    7. '6' → logprob: -15.251423835754395
    8. '(' → logprob: -15.501423835754395
    9. '4' → logprob: -16.001422882080078
    10. '```' → logprob: -16.251422882080078

Token 114: ')' (ID: 8)
  Prédit: ')'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')' → logprob: -7.941850526549388e-06
    2. ' )' → logprob: -11.875007629394531
    3. ')
' → logprob: -14.375007629394531
    4. '**' → logprob: -16.75000762939453
    5. '))' → logprob: -16.87500762939453
    6. ')`' → logprob: -17.00000762939453
    7. '')' → logprob: -17.12500762939453
    8. '*' → logprob: -17.25000762939453
    9. '`)' → logprob: -17.37500762939453
    10. '```' → logprob: -17.50000762939453


RÉSUMÉ:
--------------------------------------------------------------------------------
Total des tokens analysés: 112
Tokens correctement prédits (1ère position, stricte): 51
Tokens correctement prédits (1ère position, avec adaptation): 51
Tokens correctement prédits (top 10): 89
Précision stricte (1ère position): 45.54%
Précision adaptée (1ère position): 45.54%
Précision (top 10): 79.46%
================================================================================
