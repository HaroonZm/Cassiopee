================================================================================
ANALYSE DE PRÉDICTION TOKEN PAR TOKEN (BATCH API)
Date: 2025-06-04 19:59:12
Modèle de tokenisation: gpt-4o-mini
================================================================================

SCRIPT ANALYSÉ:
--------------------------------------------------------------------------------
# Bon alors on récupère les valeurs, je suppose que c'est A et P (?)
A, P = map(int, input().split())

# je crois que c'est comme ça qu'il faut calculer... à vérifier ?
res = (P + A*3) // 2

print(res)  # on affiche le résultat, classique
--------------------------------------------------------------------------------

RÉSULTATS D'ANALYSE TOKEN PAR TOKEN:
--------------------------------------------------------------------------------
Token 0: '#' (ID: 2)
  → Token d'amorce (pas de prédiction)

Token 1: ' Bon' (ID: 12658)
  → Token d'amorce (pas de prédiction)

Token 2: ' alors' (ID: 17971)
  → Token d'amorce (pas de prédiction)

Token 3: ' on' (ID: 402)
  Prédit: '```'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '```' → logprob: -0.543472945690155
    2. ',' → logprob: -2.4184730052948
    3. ' ' → logprob: -2.4184730052948
    4. '\n' → logprob: -2.6684730052948
    5. '#' → logprob: -2.9184730052948
    6. '`' → logprob: -3.4184730052948
    7. ':' → logprob: -3.7934730052948
    8. '\' → logprob: -3.9184730052948
    9. '!' → logprob: -4.543472766876221
    10. '``' → logprob: -5.043472766876221

Token 4: ' récup' (ID: 62856)
  Prédit: ' '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' ' → logprob: -0.14364956319332123
    2. ' continue' → logprob: -3.2686495780944824
    3. '_' → logprob: -4.018649578094482
    4. ' va' → logprob: -4.018649578094482
    5. ' ```' → logprob: -4.143649578094482
    6. 's' → logprob: -4.893649578094482
    7. ' a' → logprob: -5.268649578094482
    8. 'n' → logprob: -6.018649578094482
    9. 'continue' → logprob: -6.268649578094482
    10. 'a' → logprob: -6.268649578094482

Token 5: 'ère' (ID: 4346)
  Prédit: 'ère'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'ère' → logprob: -0.28712746500968933
    2. 'è' → logprob: -1.4121274948120117
    3. 'èr' → logprob: -5.287127494812012
    4. '#' → logprob: -8.412127494812012
    5. 'à' → logprob: -8.412127494812012
    6. 'èra' → logprob: -9.287127494812012
    7. '`' → logprob: -9.412127494812012
    8. '\' → logprob: -9.537127494812012
    9. 'ération' → logprob: -10.287127494812012
    10. 'ére' → logprob: -10.412127494812012

Token 6: ' les' (ID: 1341)
  Prédit: ' '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' ' → logprob: -0.17248333990573883
    2. '_' → logprob: -1.9224833250045776
    3. ''' → logprob: -6.047483444213867
    4. 'l' → logprob: -6.422483444213867
    5. ' ' → logprob: -6.672483444213867
    6. ' l' → logprob: -7.047483444213867
    7. '`' → logprob: -7.047483444213867
    8. 's' → logprob: -7.297483444213867
    9. 'le' → logprob: -7.422483444213867
    10. '#' → logprob: -7.672483444213867

Token 7: ' valeurs' (ID: 73668)
  Prédit: ' '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' ' → logprob: -0.7925875782966614
    2. 'd' → logprob: -1.0425875186920166
    3. '_' → logprob: -2.1675875186920166
    4. 'f' → logprob: -4.542587757110596
    5. '_d' → logprob: -4.667587757110596
    6. '  ' → logprob: -4.917587757110596
    7. 'l' → logprob: -5.167587757110596
    8. 'data' → logprob: -5.292587757110596
    9. ' _' → logprob: -5.542587757110596
    10. '#' → logprob: -5.667587757110596

Token 8: ',' (ID: 11)
  Prédit: 'val'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'val' → logprob: -1.4435815811157227
    2. 'v' → logprob: -1.6935815811157227
    3. ' ' → logprob: -1.6935815811157227
    4. '_' → logprob: -1.8185815811157227
    5. 'values' → logprob: -1.8185815811157227
    6. ':' → logprob: -5.068581581115723
    7. 's' → logprob: -5.068581581115723
    8. ',' → logprob: -5.193581581115723
    9. 'data' → logprob: -5.193581581115723
    10. '.' → logprob: -5.443581581115723

Token 9: ' je' (ID: 1264)
  Prédit: ' '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' ' → logprob: -0.04191676899790764
    2. '_' → logprob: -4.291916847229004
    3. 's' → logprob: -5.041916847229004
    4. 'r' → logprob: -6.041916847229004
    5. ' =' → logprob: -6.041916847229004
    6. ' ,' → logprob: -6.291916847229004
    7. 'es' → logprob: -6.541916847229004
    8. 'values' → logprob: -6.666916847229004
    9. ' ' → logprob: -6.916916847229004
    10. 'v' → logprob: -7.041916847229004

Token 10: ' suppose' (ID: 35968)
  Prédit: ' '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' ' → logprob: -0.9491452574729919
    2. 'n' → logprob: -1.0741453170776367
    3. 's' → logprob: -2.3241453170776367
    4. ' récup' → logprob: -2.5741453170776367
    5. '_' → logprob: -3.8241453170776367
    6. 'r' → logprob: -4.324145317077637
    7. ' n' → logprob: -4.699145317077637
    8. 'space' → logprob: -4.699145317077637
    9. ' vais' → logprob: -5.074145317077637
    10. ' veux' → logprob: -5.449145317077637

Token 11: ' que' (ID: 661)
  Prédit: ' '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' ' → logprob: -0.34410399198532104
    2. '_' → logprob: -1.8441040515899658
    3. 's' → logprob: -3.344104051589966
    4. '#' → logprob: -3.719104051589966
    5. 'v' → logprob: -3.844104051589966
    6. ':' → logprob: -4.719103813171387
    7. '```' → logprob: -5.344103813171387
    8. 'r' → logprob: -5.469103813171387
    9. ',' → logprob: -5.469103813171387
    10. ''' → logprob: -5.594103813171387

Token 12: ' c' (ID: 274)
  Prédit: 'les'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'les' → logprob: -1.17044997215271
    2. ' c' → logprob: -1.92044997215271
    3. ' les' → logprob: -2.17044997215271
    4. 'c' → logprob: -2.54544997215271
    5. 'l' → logprob: -2.67044997215271
    6. ' l' → logprob: -3.17044997215271
    7. ' ' → logprob: -3.67044997215271
    8. ' la' → logprob: -3.79544997215271
    9. 'val' → logprob: -3.79544997215271
    10. 'on' → logprob: -3.92044997215271

Token 13: ''est' (ID: 6616)
  Prédit: '''
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ''' → logprob: -0.3631504476070404
    2. ''est' → logprob: -1.6131504774093628
    3. ''a' → logprob: -3.9881503582000732
    4. '#' → logprob: -3.9881503582000732
    5. 'a' → logprob: -4.238150596618652
    6. ''#' → logprob: -4.238150596618652
    7. 'e' → logprob: -4.363150596618652
    8. 'est' → logprob: -5.238150596618652
    9. ''''' → logprob: -5.738150596618652
    10. 'ont' → logprob: -5.988150596618652

Token 14: ' A' (ID: 355)
  Prédit: 'dans'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'dans' → logprob: -1.2374428510665894
    2. 'les' → logprob: -2.737442970275879
    3. ' la' → logprob: -2.862442970275879
    4. 'la' → logprob: -2.862442970275879
    5. 'possible' → logprob: -2.862442970275879
    6. 'le' → logprob: -2.987442970275879
    7. ' dans' → logprob: -3.237442970275879
    8. ' possible' → logprob: -3.362442970275879
    9. 'bien' → logprob: -3.487442970275879
    10. ' ' → logprob: -3.862442970275879

Token 15: ' et' (ID: 859)
  Prédit: ' ='
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' =' → logprob: -0.6263184547424316
    2. '[' → logprob: -1.6263184547424316
    3. '_' → logprob: -2.3763184547424316
    4. ',' → logprob: -3.0013184547424316
    5. '['' → logprob: -3.3763184547424316
    6. '=' → logprob: -3.5013184547424316
    7. ')' → logprob: -4.376318454742432
    8. ' ' → logprob: -5.376318454742432
    9. '1' → logprob: -5.751318454742432
    10. '.' → logprob: -5.751318454742432

Token 16: ' P' (ID: 398)
  Prédit: ' B'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' B' → logprob: -0.6362884640693665
    2. 'B' → logprob: -0.7612884640693665
    3. ' ' → logprob: -6.636288642883301
    4. ''' → logprob: -7.386288642883301
    5. '`' → logprob: -7.511288642883301
    6. 'nbsp' → logprob: -8.6987886428833
    7. '_' → logprob: -8.7612886428833
    8. 'b' → logprob: -9.0112886428833
    9. ' ' → logprob: -9.5737886428833
    10. 'A' → logprob: -10.0112886428833

Token 17: ' (' (ID: 350)
  Prédit: '_'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '_' → logprob: -0.2630717158317566
    2. ':' → logprob: -2.7630717754364014
    3. ' =' → logprob: -3.0130717754364014
    4. '=' → logprob: -3.1380717754364014
    5. '#' → logprob: -3.8880717754364014
    6. ',' → logprob: -4.388071537017822
    7. '.' → logprob: -4.638071537017822
    8. 'a' → logprob: -4.763071537017822
    9. '[' → logprob: -5.263071537017822
    10. 'A' → logprob: -5.513071537017822

Token 18: '?)
' (ID: 90794)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ')' → logprob: -0.017770230770111084
    2. '_' → logprob: -5.267770290374756
    3. ' )' → logprob: -5.392770290374756
    4. ',' → logprob: -5.517770290374756
    5. '):' → logprob: -6.642770290374756
    6. '[' → logprob: -7.392770290374756
    7. ' ' → logprob: -8.017769813537598
    8. 'u' → logprob: -8.517769813537598
    9. '')' → logprob: -9.017769813537598
    10. 'e' → logprob: -9.017769813537598

Token 19: 'A' (ID: 32)
  Prédit: '='
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '=' → logprob: -1.4323186874389648
    2. ':' → logprob: -1.5573186874389648
    3. '#' → logprob: -1.9323186874389648
    4. '.' → logprob: -2.057318687438965
    5. ',' → logprob: -2.557318687438965
    6. '_' → logprob: -2.682318687438965
    7. ' =' → logprob: -2.807318687438965
    8. '```' → logprob: -3.807318687438965
    9. 'a' → logprob: -4.057318687438965
    10. 's' → logprob: -5.057318687438965

Token 20: ',' (ID: 11)
  Prédit: '['
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '[' → logprob: -0.4212464392185211
    2. ',' → logprob: -1.5462464094161987
    3. 'P' → logprob: -3.4212465286254883
    4. ' =' → logprob: -3.4212465286254883
    5. '.' → logprob: -4.421246528625488
    6. 'p' → logprob: -4.546246528625488
    7. '_' → logprob: -4.671246528625488
    8. '=' → logprob: -4.671246528625488
    9. '['' → logprob: -5.296246528625488
    10. '_p' → logprob: -5.546246528625488

Token 21: ' P' (ID: 398)
  Prédit: 'P'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'P' → logprob: -0.19503797590732574
    2. ' P' → logprob: -1.8200379610061646
    3. ' ' → logprob: -4.320037841796875
    4. 'p' → logprob: -7.320037841796875
    5. ' =' → logprob: -8.070037841796875
    6. ' p' → logprob: -8.820037841796875
    7. ',' → logprob: -8.945037841796875
    8. 'space' → logprob: -8.945037841796875
    9. '  ' → logprob: -9.070037841796875
    10. ')' → logprob: -9.945037841796875

Token 22: ' =' (ID: 314)
  Prédit: ' ='
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' =' → logprob: -0.015127729624509811
    2. '=' → logprob: -4.265127658843994
    3. ',' → logprob: -7.140127658843994
    4. ')' → logprob: -9.140128135681152
    5. ' ' → logprob: -10.890128135681152
    6. '[' → logprob: -11.265128135681152
    7. '.' → logprob: -11.390128135681152
    8. ' ,' → logprob: -12.390128135681152
    9. ']' → logprob: -12.515128135681152
    10. '_' → logprob: -13.265128135681152

Token 23: ' map' (ID: 4014)
  Prédit: 'input'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'input' → logprob: -0.8433850407600403
    2. ' input' → logprob: -1.3433849811553955
    3. ' ' → logprob: -2.7183849811553955
    4. 'map' → logprob: -2.7183849811553955
    5. ' np' → logprob: -3.4683849811553955
    6. ' map' → logprob: -3.4683849811553955
    7. ' data' → logprob: -4.093385219573975
    8. '1' → logprob: -4.093385219573975
    9. 'np' → logprob: -4.093385219573975
    10. '[' → logprob: -4.468385219573975

Token 24: '(int' (ID: 2742)
  Prédit: '(int'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(int' → logprob: -0.10268059372901917
    2. '(' → logprob: -2.3526806831359863
    3. '(str' → logprob: -6.227680683135986
    4. '(lambda' → logprob: -7.977680683135986
    5. 'int' → logprob: -9.602680206298828
    6. '(input' → logprob: -10.352680206298828
    7. '(
' → logprob: -10.977680206298828
    8. '(list' → logprob: -11.102680206298828
    9. '(eval' → logprob: -12.102680206298828
    10. '<int' → logprob: -12.227680206298828

Token 25: ',' (ID: 11)
  Prédit: '(input'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(input' → logprob: -0.13265416026115417
    2. 'input' → logprob: -2.6326541900634766
    3. ')' → logprob: -3.0076541900634766
    4. '(' → logprob: -6.257654190063477
    5. ' input' → logprob: -7.132654190063477
    6. ',input' → logprob: -9.007654190063477
    7. '=input' → logprob: -10.757654190063477
    8. ' )' → logprob: -10.882654190063477
    9. ')(' → logprob: -11.007654190063477
    10. ',' → logprob: -11.132654190063477

Token 26: ' input' (ID: 3422)
  Prédit: 'input'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'input' → logprob: -0.2016073614358902
    2. ' input' → logprob: -1.701607346534729
    3. ')' → logprob: -8.826607704162598
    4. '(input' → logprob: -10.451607704162598
    5. '=input' → logprob: -11.826607704162598
    6. '<input' → logprob: -13.201607704162598
    7. '	input' → logprob: -13.326607704162598
    8. ' )' → logprob: -13.576607704162598
    9. ',input' → logprob: -13.701607704162598
    10. '[input' → logprob: -14.076607704162598

Token 27: '().' (ID: 1454)
  Prédit: '()'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '()' → logprob: -0.2469894140958786
    2. '().' → logprob: -1.746989369392395
    3. '())' → logprob: -3.1219894886016846
    4. '(' → logprob: -8.121989250183105
    5. '());' → logprob: -10.371989250183105
    6. '("")' → logprob: -10.496989250183105
    7. '()>' → logprob: -10.996989250183105
    8. '()))' → logprob: -11.121989250183105
    9. '()`' → logprob: -11.246989250183105
    10. ')' → logprob: -11.371989250183105

Token 28: 'split' (ID: 13627)
  Prédit: 'split'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'split' → logprob: -0.00020532844064291567
    2. 'strip' → logprob: -8.500205039978027
    3. 'rstrip' → logprob: -13.500205039978027
    4. ' split' → logprob: -14.750205039978027
    5. '(split' → logprob: -16.500205993652344
    6. 'spl' → logprob: -17.750205993652344
    7. 'replace' → logprob: -19.500205993652344
    8. 'read' → logprob: -19.500205993652344
    9. '.split' → logprob: -20.250205993652344
    10. 's' → logprob: -21.250205993652344

Token 29: '())

' (ID: 27654)
  Prédit: '())'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '())' → logprob: -0.027481770142912865
    2. ')' → logprob: -4.652481555938721
    3. '()))' → logprob: -4.777481555938721
    4. '()' → logprob: -4.902481555938721
    5. '(' → logprob: -7.027481555938721
    6. '))' → logprob: -7.527481555938721
    7. '('' → logprob: -8.777482032775879
    8. ' ())' → logprob: -9.652482032775879
    9. '(""))' → logprob: -11.402482032775879
    10. '(()' → logprob: -11.652482032775879

Token 30: '#' (ID: 2)
  Prédit: '#'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '#' → logprob: -0.8503645658493042
    2. ')' → logprob: -1.1003645658493042
    3. ',' → logprob: -3.1003646850585938
    4. ' ' → logprob: -3.4753646850585938
    5. 'print' → logprob: -3.6003646850585938
    6. '
' → logprob: -3.6003646850585938
    7. '+' → logprob: -3.6003646850585938
    8. '<|end|>' → logprob: -3.7253646850585938
    9. 'if' → logprob: -3.8503646850585938
    10. 's' → logprob: -5.225364685058594

Token 31: ' je' (ID: 1264)
  Prédit: 'result'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'result' → logprob: -0.33827316761016846
    2. ' result' → logprob: -2.588273048400879
    3. 'if' → logprob: -2.963273048400879
    4. '#' → logprob: -3.713273048400879
    5. 'total' → logprob: -3.713273048400879
    6. 'print' → logprob: -3.838273048400879
    7. ' if' → logprob: -4.088273048400879
    8. ' total' → logprob: -4.213273048400879
    9. 's' → logprob: -4.713273048400879
    10. 'sum' → logprob: -4.838273048400879

Token 32: ' crois' (ID: 65485)
  Prédit: ' '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' ' → logprob: -0.1992998868227005
    2. 's' → logprob: -3.4492998123168945
    3. ' vais' → logprob: -3.6992998123168945
    4. '.' → logprob: -4.0742998123168945
    5. ' if' → logprob: -4.1992998123168945
    6. ' n' → logprob: -4.6992998123168945
    7. ' veux' → logprob: -4.8242998123168945
    8. ' s' → logprob: -5.0742998123168945
    9. ' suis' → logprob: -5.0742998123168945
    10. ' for' → logprob: -5.1992998123168945

Token 33: ' que' (ID: 661)
  Prédit: ' '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' ' → logprob: -0.5824295878410339
    2. ',' → logprob: -1.4574296474456787
    3. '<|end|>' → logprob: -2.3324296474456787
    4. '.' → logprob: -3.4574296474456787
    5. '```' → logprob: -3.5824296474456787
    6. '#' → logprob: -4.3324294090271
    7. ')' → logprob: -4.5824294090271
    8. 'A' → logprob: -5.4574294090271
    9. '<|end|>' → logprob: -5.7074294090271
    10. '(' → logprob: -5.9574294090271

Token 34: ' c' (ID: 274)
  Prédit: ' P'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' P' → logprob: -0.968021035194397
    2. ' A' → logprob: -1.093021035194397
    3. 'A' → logprob: -2.2180209159851074
    4. 'P' → logprob: -3.0930209159851074
    5. ' c' → logprob: -3.0930209159851074
    6. 'c' → logprob: -4.093020915985107
    7. ' len' → logprob: -4.218020915985107
    8. ' ' → logprob: -4.468020915985107
    9. ' je' → logprob: -4.968020915985107
    10. ' on' → logprob: -5.093020915985107

Token 35: ''est' (ID: 6616)
  Prédit: ''est'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ''est' → logprob: -0.3554796278476715
    2. 'est' → logprob: -2.4804797172546387
    3. ''' → logprob: -2.6054797172546387
    4. '#' → logprob: -2.8554797172546387
    5. 'e' → logprob: -3.3554797172546387
    6. ''#' → logprob: -4.355479717254639
    7. 'a' → logprob: -4.480479717254639
    8. ''a' → logprob: -5.480479717254639
    9. ''''' → logprob: -5.855479717254639
    10. '’est' → logprob: -6.480479717254639

Token 36: ' comme' (ID: 7971)
  Prédit: ' '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' ' → logprob: -0.33288344740867615
    2. ' P' → logprob: -2.832883358001709
    3. ' le' → logprob: -3.207883358001709
    4. ' A' → logprob: -3.332883358001709
    5. ' l' → logprob: -3.582883358001709
    6. ' la' → logprob: -4.207883358001709
    7. 'A' → logprob: -4.457883358001709
    8. ' ' → logprob: -4.707883358001709
    9. '   ' → logprob: -5.082883358001709
    10. ' a' → logprob: -5.207883358001709

Token 37: ' ça' (ID: 13590)
  Prédit: ' ça'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' ça' → logprob: -0.13621750473976135
    2. 'ça' → logprob: -2.7612175941467285
    3. ' ca' → logprob: -3.5112175941467285
    4. ' ceci' → logprob: -4.0112175941467285
    5. ' une' → logprob: -5.7612175941467285
    6. 'cela' → logprob: -6.6362175941467285
    7. 'ca' → logprob: -6.8862175941467285
    8. ' un' → logprob: -7.0112175941467285
    9. ' cela' → logprob: -7.1362175941467285
    10. ' la' → logprob: -7.2612175941467285

Token 38: ' qu' (ID: 474)
  Prédit: ''
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False

Token 39: ''il' (ID: 14683)
  Prédit: 'on'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'on' → logprob: -0.4431822896003723
    2. ' ça' → logprob: -1.5681822299957275
    3. 'ça' → logprob: -2.9431822299957275
    4. ' on' → logprob: -2.9431822299957275
    5. ' ' → logprob: -4.193182468414307
    6. ''on' → logprob: -4.443182468414307
    7. ' Python' → logprob: -5.568182468414307
    8. 'a' → logprob: -6.318182468414307
    9. 'l' → logprob: -6.443182468414307
    10. 'def' → logprob: -6.818182468414307

Token 40: ' faut' (ID: 17821)
  Prédit: 'f'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'f' → logprob: -0.05868875980377197
    2. ' faut' → logprob: -2.9336886405944824
    3. 's' → logprob: -5.808688640594482
    4. 'fonction' → logprob: -7.933688640594482
    5. ' faudra' → logprob: -9.43368911743164
    6. ' f' → logprob: -9.43368911743164
    7. 'fait' → logprob: -9.80868911743164
    8. 'fa' → logprob: -9.93368911743164
    9. ' faudrait' → logprob: -9.93368911743164
    10. 'se' → logprob: -10.55868911743164

Token 41: ' calcul' (ID: 7559)
  Prédit: ' faire'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' faire' → logprob: -0.22061890363693237
    2. 'faire' → logprob: -2.595618963241577
    3. 'A' → logprob: -3.470618963241577
    4. ' ' → logprob: -3.845618963241577
    5. '```' → logprob: -4.470618724822998
    6. ':' → logprob: -5.345618724822998
    7. ' continuer' → logprob: -5.470618724822998
    8. 'def' → logprob: -5.470618724822998
    9. 'coder' → logprob: -5.595618724822998
    10. '.' → logprob: -5.595618724822998

Token 42: 'er' (ID: 259)
  Prédit: 'er'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'er' → logprob: -5.407366916188039e-05
    2. 'e' → logprob: -10.125054359436035
    3. 'uler' → logprob: -12.750054359436035
    4. '#' → logprob: -13.000054359436035
    5. '```' → logprob: -13.000054359436035
    6. 'ler' → logprob: -13.500054359436035
    7. 'a' → logprob: -13.750054359436035
    8. ''er' → logprob: -14.375054359436035
    9. ' er' → logprob: -14.625054359436035
    10. 'u' → logprob: -15.000054359436035

Token 43: '...' (ID: 1008)
  Prédit: ' la'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' la' → logprob: -0.7809698581695557
    2. ' l' → logprob: -2.1559698581695557
    3. ' ' → logprob: -2.4059698581695557
    4. 'A' → logprob: -2.4059698581695557
    5. ' le' → logprob: -2.5309698581695557
    6. ' A' → logprob: -3.2809698581695557
    7. 'l' → logprob: -3.7809698581695557
    8. '```' → logprob: -3.9059698581695557
    9. ' P' → logprob: -4.280969619750977
    10. '(' → logprob: -4.405969619750977

Token 44: ' à' (ID: 1221)
  Prédit: ' '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' ' → logprob: -0.2706366181373596
    2. 'A' → logprob: -3.145636558532715
    3. 's' → logprob: -3.520636558532715
    4. ',' → logprob: -3.770636558532715
    5. '```' → logprob: -4.270636558532715
    6. '`' → logprob: -4.395636558532715
    7. 'sum' → logprob: -4.645636558532715
    8. ''' → logprob: -4.645636558532715
    9. 'P' → logprob: -4.895636558532715
    10. ' P' → logprob: -4.895636558532715

Token 45: ' vérifier' (ID: 93671)
  Prédit: ' partir'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' partir' → logprob: -0.6857681274414062
    2. 'l' → logprob: -2.0607681274414062
    3. 'part' → logprob: -2.1857681274414062
    4. 'p' → logprob: -3.5607681274414062
    5. 'a' → logprob: -3.6857681274414062
    6. ' quoi' → logprob: -4.310768127441406
    7. '```' → logprob: -4.310768127441406
    8. 'quoi' → logprob: -4.560768127441406
    9. ' peu' → logprob: -4.935768127441406
    10. ' la' → logprob: -5.185768127441406

Token 46: ' ?
' (ID: 19740)
  Prédit: 'result'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'result' → logprob: -1.0211570262908936
    2. ' ' → logprob: -1.3961570262908936
    3. 's' → logprob: -1.7711570262908936
    4. ' result' → logprob: -3.1461570262908936
    5. '<|end|>' → logprob: -4.271157264709473
    6. ',' → logprob: -4.396157264709473
    7. 'total' → logprob: -4.521157264709473
    8. ' 
' → logprob: -4.521157264709473
    9. '```' → logprob: -4.771157264709473
    10. 'dp' → logprob: -4.896157264709473

Token 47: 'res' (ID: 430)
  Prédit: 'result'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'result' → logprob: -0.160017728805542
    2. 'for' → logprob: -3.660017728805542
    3. 's' → logprob: -3.785017728805542
    4. 'res' → logprob: -3.910017728805542
    5. 'print' → logprob: -4.410017967224121
    6. 'total' → logprob: -4.785017967224121
    7. 'max' → logprob: -5.410017967224121
    8. 'S' → logprob: -5.410017967224121
    9. 'r' → logprob: -5.785017967224121
    10. 'dp' → logprob: -5.910017967224121

Token 48: ' =' (ID: 314)
  Prédit: 'ult'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'ult' → logprob: -0.3916671872138977
    2. 'ultat' → logprob: -1.266667127609253
    3. ' =' → logprob: -3.766667127609253
    4. '=' → logprob: -4.516667366027832
    5. 'u' → logprob: -5.391667366027832
    6. 'ul' → logprob: -6.016667366027832
    7. 'ults' → logprob: -7.516667366027832
    8. 'ulta' → logprob: -8.391667366027832
    9. 'ulat' → logprob: -8.766667366027832
    10. '_' → logprob: -9.266667366027832

Token 49: ' (' (ID: 350)
  Prédit: ' A'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' A' → logprob: -0.5909051299095154
    2. 'A' → logprob: -1.0909051895141602
    3. ' (' → logprob: -3.46590518951416
    4. ' P' → logprob: -3.96590518951416
    5. ' max' → logprob: -4.46590518951416
    6. 'P' → logprob: -4.46590518951416
    7. 'max' → logprob: -4.96590518951416
    8. 'min' → logprob: -5.09090518951416
    9. ' min' → logprob: -5.34090518951416
    10. '(A' → logprob: -5.34090518951416

Token 50: 'P' (ID: 47)
  Prédit: 'A'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'A' → logprob: -0.14559932053089142
    2. 'P' → logprob: -2.770599365234375
    3. ' A' → logprob: -2.895599365234375
    4. ' P' → logprob: -5.520599365234375
    5. ' (' → logprob: -5.645599365234375
    6. '2' → logprob: -5.770599365234375
    7. '(' → logprob: -6.270599365234375
    8. '1' → logprob: -6.395599365234375
    9. '(A' → logprob: -6.770599365234375
    10. '(P' → logprob: -7.770599365234375

Token 51: ' +' (ID: 659)
  Prédit: '-'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '-' → logprob: -0.7986258864402771
    2. ' -' → logprob: -1.1736259460449219
    3. '*' → logprob: -2.423625946044922
    4. '+' → logprob: -2.548625946044922
    5. '**' → logprob: -3.798625946044922
    6. '-A' → logprob: -4.423625946044922
    7. ' *' → logprob: -4.673625946044922
    8. ' /' → logprob: -5.048625946044922
    9. ' +' → logprob: -5.173625946044922
    10. ' //' → logprob: -5.423625946044922

Token 52: ' A' (ID: 355)
  Prédit: ' A'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' A' → logprob: -0.2133391946554184
    2. 'A' → logprob: -2.33833909034729
    3. '1' → logprob: -3.21333909034729
    4. ' ' → logprob: -3.21333909034729
    5. ' (' → logprob: -4.713339328765869
    6. '(' → logprob: -6.338339328765869
    7. '2' → logprob: -6.463339328765869
    8. '(A' → logprob: -6.963339328765869
    9. '3' → logprob: -7.463339328765869
    10. '5' → logprob: -8.775838851928711

Token 53: '*' (ID: 9)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')' → logprob: -0.012897012755274773
    2. ' -' → logprob: -4.88789701461792
    3. ' )' → logprob: -6.13789701461792
    4. '-' → logprob: -6.13789701461792
    5. ')**' → logprob: -8.512896537780762
    6. '*' → logprob: -8.637896537780762
    7. ' +' → logprob: -8.762896537780762
    8. ')//' → logprob: -9.137896537780762
    9. '+' → logprob: -9.387896537780762
    10. '//' → logprob: -9.762896537780762

Token 54: '3' (ID: 18)
  Prédit: '2'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '2' → logprob: -0.48395082354545593
    2. 'A' → logprob: -2.1089508533477783
    3. '3' → logprob: -2.8589508533477783
    4. 'P' → logprob: -2.9839508533477783
    5. '10' → logprob: -3.7339508533477783
    6. '100' → logprob: -3.9839508533477783
    7. '9' → logprob: -3.9839508533477783
    8. '5' → logprob: -4.233950614929199
    9. '(' → logprob: -4.358950614929199
    10. '6' → logprob: -4.483950614929199

Token 55: ')' (ID: 8)
  Prédit: ')'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')' → logprob: -0.0017964430153369904
    2. ' )' → logprob: -6.501796245574951
    3. ')//' → logprob: -9.00179672241211
    4. ')**' → logprob: -9.87679672241211
    5. ')%' → logprob: -10.00179672241211
    6. ')#' → logprob: -10.75179672241211
    7. '**' → logprob: -11.50179672241211
    8. ' -' → logprob: -12.00179672241211
    9. '//' → logprob: -12.00179672241211
    10. '-' → logprob: -12.50179672241211

Token 56: ' //' (ID: 602)
  Prédit: ''
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False

Token 57: ' ' (ID: 220)
  Prédit: '2'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '2' → logprob: -0.26640406250953674
    2. '4' → logprob: -1.7664040327072144
    3. '3' → logprob: -3.016404151916504
    4. '7' → logprob: -5.266404151916504
    5. '10' → logprob: -5.266404151916504
    6. ' ' → logprob: -6.516404151916504
    7. '5' → logprob: -6.891404151916504
    8. '19' → logprob: -8.641404151916504
    9. '8' → logprob: -8.766404151916504
    10. '1' → logprob: -8.891404151916504

Token 58: '2' (ID: 17)
  Prédit: '2'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '2' → logprob: -0.14595025777816772
    2. '4' → logprob: -2.3959503173828125
    3. '3' → logprob: -3.3959503173828125
    4. '10' → logprob: -5.2709503173828125
    5. '7' → logprob: -6.2709503173828125
    6. '1' → logprob: -6.7709503173828125
    7. '19' → logprob: -6.8959503173828125
    8. '5' → logprob: -7.2709503173828125
    9. '8' → logprob: -8.520950317382812
    10. '12' → logprob: -8.770950317382812

Token 59: '

' (ID: 279)
  Prédit: ''
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False

Token 60: 'print' (ID: 1598)
  Prédit: 'print'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'print' → logprob: -0.021760636940598488
    2. '<|end|>' → logprob: -4.6467604637146
    3. ')' → logprob: -5.3967604637146
    4. ' print' → logprob: -5.7717604637146
    5. '#' → logprob: -6.1467604637146
    6. '
' → logprob: -7.2717604637146
    7. '```' → logprob: -7.5217604637146
    8. '\n' → logprob: -8.146760940551758
    9. '#print' → logprob: -9.146760940551758
    10. '.print' → logprob: -9.396760940551758

Token 61: '(res' (ID: 8331)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(' → logprob: -0.0005693563143722713
    2. '(res' → logprob: -7.5005693435668945
    3. '("("' → logprob: -11.750569343566895
    4. '('' → logprob: -12.750569343566895
    5. '(
' → logprob: -13.625569343566895
    6. '(`' → logprob: -14.000569343566895
    7. ' (' → logprob: -14.000569343566895
    8. '(print' → logprob: -14.375569343566895
    9. '()' → logprob: -14.875569343566895
    10. '(

' → logprob: -15.000569343566895

Token 62: ')' (ID: 8)
  Prédit: ')'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')' → logprob: -2.696889623621246e-06
    2. '))' → logprob: -13.50000286102295
    3. ' )' → logprob: -14.25000286102295
    4. ')`' → logprob: -15.25000286102295
    5. '`)' → logprob: -16.125001907348633
    6. '(' → logprob: -16.750001907348633
    7. '()' → logprob: -17.000001907348633
    8. '')' → logprob: -17.000001907348633
    9. ')
' → logprob: -17.375001907348633
    10. '#' → logprob: -17.875001907348633

Token 63: ' ' (ID: 220)
  Prédit: ''
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False

Token 64: ' #' (ID: 1069)
  Prédit: ''
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False

Token 65: ' on' (ID: 402)
  Prédit: ''
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False

Token 66: ' affiche' (ID: 127479)
  Prédit: ' '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' ' → logprob: -0.8684910535812378
    2. '<|end|>' → logprob: -1.3684910535812378
    3. ')' → logprob: -1.6184910535812378
    4. ''' → logprob: -3.4934911727905273
    5. '```' → logprob: -3.7434911727905273
    6. '<|end|>' → logprob: -3.9934911727905273
    7. ' )' → logprob: -5.118491172790527
    8. '\' → logprob: -5.243491172790527
    9. ' ```' → logprob: -5.493491172790527
    10. '+' → logprob: -5.618491172790527

Token 67: ' le' (ID: 505)
  Prédit: ''
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False

Token 68: ' résultat' (ID: 62556)
  Prédit: ' résultat'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' résultat' → logprob: -0.02023446187376976
    2. 'rés' → logprob: -4.64523458480835
    3. ' resultat' → logprob: -5.77023458480835
    4. ' nombre' → logprob: -5.89523458480835
    5. ' result' → logprob: -6.77023458480835
    6. ' résultats' → logprob: -7.27023458480835
    7. 'r' → logprob: -7.52023458480835
    8. 'result' → logprob: -7.77023458480835
    9. ' ' → logprob: -7.89523458480835
    10. 's' → logprob: -8.270234107971191

Token 69: ',' (ID: 11)
  Prédit: ''
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False

Token 70: ' classique' (ID: 76895)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ')' → logprob: -0.5933555364608765
    2. '<|end|>' → logprob: -0.9683555364608765
    3. '\n' → logprob: -3.468355655670166
    4. '```' → logprob: -3.593355655670166
    5. ' ' → logprob: -6.093355655670166
    6. '<|end|>' → logprob: -6.218355655670166
    7. '
' → logprob: -6.593355655670166
    8. 'newline' → logprob: -6.843355655670166
    9. ')
' → logprob: -7.593355655670166
    10. ' ' → logprob: -7.968355655670166


RÉSUMÉ:
--------------------------------------------------------------------------------
Total des tokens analysés: 68
Tokens correctement prédits (1ère position, stricte): 14
Tokens correctement prédits (1ère position, avec adaptation): 14
Tokens correctement prédits (top 10): 34
Précision stricte (1ère position): 20.59%
Précision adaptée (1ère position): 20.59%
Précision (top 10): 50.00%
================================================================================
