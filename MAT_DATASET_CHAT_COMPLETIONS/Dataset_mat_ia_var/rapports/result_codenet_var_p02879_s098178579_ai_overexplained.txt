================================================================================
ANALYSE DE PRÉDICTION TOKEN PAR TOKEN (BATCH API)
Date: 2025-06-04 19:40:50
Modèle de tokenisation: gpt-4o-mini
================================================================================

SCRIPT ANALYSÉ:
--------------------------------------------------------------------------------
def solve():
    # Demander à l'utilisateur de saisir une ligne de texte depuis l'entrée standard (clavier).
    # On s'attend à recevoir deux nombres séparés par un espace, par exemple "3 4".
    # La fonction input() lit l'entrée utilisateur sous la forme d'une chaîne de caractères.
    user_input = input()
    
    # La méthode split() divise la chaîne de caractères en une liste de sous-chaînes,
    # en utilisant par défaut l'espace comme séparateur.
    tokens = user_input.split()
    
    # La fonction map applique la fonction int à chaque élément de la liste 'tokens'.
    # Cela convertit chaque sous-chaîne en un entier.
    a, b = map(int, tokens)
    
    # On vérifie maintenant si 'a' et 'b' sont tous les deux compris entre 1 et 9 inclus.
    # L'opérateur <= signifie "inférieur ou égal à",
    # donc 1<=a<=9 vérifie que 'a' n'est pas plus petit que 1 et pas plus grand que 9.
    # Idem pour 'b'.
    if 1 <= a <= 9 and 1 <= b <= 9:
        # Si la condition est vraie, on retourne le produit de 'a' et 'b'.
        # L'opérateur * effectue une multiplication entre deux entiers.
        return a * b
    else:
        # Si au moins une des valeurs 'a' ou 'b' n'est pas dans l'intervalle de 1 à 9,
        # on retourne -1 pour signaler une entrée invalide.
        return -1

# Ce bloc vérifie si ce fichier est exécuté comme programme principal.
# '__name__' est une variable spéciale en Python qui prend comme valeur '__main__'
# lorsque le script est exécuté directement par l'utilisateur.
if __name__ == '__main__':
    # Appeler la fonction 'solve' définie ci-dessus,
    # puis afficher le résultat retourné par cette fonction avec print().
    # print() permet d'afficher quelque chose à l'écran.
    print(solve())
--------------------------------------------------------------------------------

RÉSULTATS D'ANALYSE TOKEN PAR TOKEN:
--------------------------------------------------------------------------------
Token 0: 'def' (ID: 1314)
  → Token d'amorce (pas de prédiction)

Token 1: ' solve' (ID: 17722)
  → Token d'amorce (pas de prédiction)

Token 2: '():
' (ID: 8595)
  → Token d'amorce (pas de prédiction)

Token 3: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.16927438974380493
    2. ':' → logprob: -3.16927433013916
    3. '```' → logprob: -3.29427433013916
    4. '\n' → logprob: -3.41927433013916
    5. '\' → logprob: -3.91927433013916
    6. ' ' → logprob: -4.91927433013916
    7. '    
' → logprob: -5.66927433013916
    8. '(' → logprob: -5.91927433013916
    9. '()' → logprob: -6.16927433013916
    10. '    ' → logprob: -6.29427433013916

Token 4: ' #' (ID: 1069)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '   ' → logprob: -1.1526806354522705
    2. 'n' → logprob: -1.5276806354522705
    3. '\n' → logprob: -2.0276806354522705
    4. 'x' → logprob: -2.6526806354522705
    5. '\' → logprob: -2.7776806354522705
    6. '```' → logprob: -2.9026806354522705
    7. 'a' → logprob: -3.1526806354522705
    8. ' ' → logprob: -3.6526806354522705
    9. '    ' → logprob: -3.7776806354522705
    10. 'i' → logprob: -5.027680397033691

Token 5: ' Dem' (ID: 9458)
  Prédit: ' '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' ' → logprob: -0.20315133035182953
    2. ' pass' → logprob: -2.453151226043701
    3. '   ' → logprob: -3.203151226043701
    4. '<|end|>' → logprob: -4.078151226043701
    5. 'pass' → logprob: -4.203151226043701
    6. 'n' → logprob: -4.953151226043701
    7. '    ' → logprob: -5.828151226043701
    8. '\' → logprob: -5.953151226043701
    9. '```' → logprob: -6.453151226043701
    10. '#' → logprob: -6.828151226043701

Token 6: 'ander' (ID: 9330)
  Prédit: 'and'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'and' → logprob: -0.12610867619514465
    2. '   ' → logprob: -2.6261086463928223
    3. 'onstr' → logprob: -3.7511086463928223
    4. 'ands' → logprob: -4.251108646392822
    5. 'a' → logprob: -5.251108646392822
    6. '    ' → logprob: -7.126108646392822
    7. '```' → logprob: -7.626108646392822
    8. '  ' → logprob: -7.751108646392822
    9. 'on' → logprob: -7.876108646392822
    10. 'o' → logprob: -8.50110912322998

Token 7: ' à' (ID: 1221)
  Prédit: ' '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' ' → logprob: -0.01337620709091425
    2. ' à' → logprob: -6.138376235961914
    3. ' un' → logprob: -6.513376235961914
    4. ' des' → logprob: -6.638376235961914
    5. ' la' → logprob: -6.638376235961914
    6. ' de' → logprob: -6.888376235961914
    7. ' a' → logprob: -6.888376235961914
    8. ' l' → logprob: -6.888376235961914
    9. '  ' → logprob: -7.138376235961914
    10. '_' → logprob: -7.263376235961914

Token 8: ' l' (ID: 305)
  Prédit: 'l'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'l' → logprob: -0.1360873579978943
    2. ' l' → logprob: -2.136087417602539
    3. '   ' → logprob: -5.386087417602539
    4. ' user' → logprob: -6.261087417602539
    5. 'user' → logprob: -6.636087417602539
    6. ' ' → logprob: -7.261087417602539
    7. ' la' → logprob: -8.636087417602539
    8. ' utilisateur' → logprob: -9.136087417602539
    9. 'util' → logprob: -9.386087417602539
    10. 'la' → logprob: -10.136087417602539

Token 9: ''utilisateur' (ID: 140803)
  Prédit: 'e'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'e' → logprob: -1.0575679540634155
    2. 'a' → logprob: -1.1825679540634155
    3. 'u' → logprob: -1.3075679540634155
    4. ''utilisateur' → logprob: -2.807568073272705
    5. ''' → logprob: -4.557568073272705
    6. '’utilisateur' → logprob: -7.182568073272705
    7. '_' → logprob: -7.432568073272705
    8. ''espace' → logprob: -7.432568073272705
    9. 'é' → logprob: -7.682568073272705
    10. ' a' → logprob: -7.682568073272705

Token 10: ' de' (ID: 334)
  Prédit: ' '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' ' → logprob: -0.033627599477767944
    2. '   ' → logprob: -4.283627510070801
    3. ' d' → logprob: -5.283627510070801
    4. ''' → logprob: -5.658627510070801
    5. '(' → logprob: -5.908627510070801
    6. ' )' → logprob: -5.908627510070801
    7. '_' → logprob: -6.408627510070801
    8. '  ' → logprob: -7.033627510070801
    9. ' de' → logprob: -7.533627510070801
    10. ' (' → logprob: -7.658627510070801

Token 11: ' saisir' (ID: 152120)
  Prédit: ' saisir'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' saisir' → logprob: -0.10874579101800919
    2. 's' → logprob: -2.358745813369751
    3. ' entrer' → logprob: -5.858745574951172
    4. ' sais' → logprob: -6.733745574951172
    5. 'r' → logprob: -6.733745574951172
    6. 'entr' → logprob: -7.108745574951172
    7. ' ' → logprob: -7.983745574951172
    8. ' rentrer' → logprob: -8.233745574951172
    9. ' fournir' → logprob: -8.358745574951172
    10. ' ' → logprob: -8.733745574951172

Token 12: ' une' (ID: 2463)
  Prédit: ' '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' ' → logprob: -0.006973597686737776
    2. '_' → logprob: -5.631973743438721
    3. '  ' → logprob: -7.131973743438721
    4. '   ' → logprob: -7.506973743438721
    5. ''' → logprob: -7.756973743438721
    6. '(' → logprob: -8.256973266601562
    7. ' un' → logprob: -8.256973266601562
    8. ' )' → logprob: -8.381973266601562
    9. 'u' → logprob: -9.381973266601562
    10. '    ' → logprob: -9.506973266601562

Token 13: ' ligne' (ID: 19583)
  Prédit: ' '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' ' → logprob: -0.0007447104435414076
    2. 'n' → logprob: -7.625744819641113
    3. '_' → logprob: -9.000744819641113
    4. '  ' → logprob: -10.125744819641113
    5. 'r' → logprob: -10.750744819641113
    6. 's' → logprob: -11.375744819641113
    7. ' ligne' → logprob: -11.500744819641113
    8. '   ' → logprob: -11.625744819641113
    9. ' ' → logprob: -11.625744819641113
    10. 'space' → logprob: -12.375744819641113

Token 14: ' de' (ID: 334)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.006109386216849089
    2. ' ' → logprob: -6.631109237670898
    3. '\' → logprob: -6.881109237670898
    4. '```' → logprob: -6.881109237670898
    5. '`' → logprob: -7.006109237670898
    6. '       ' → logprob: -8.256109237670898
    7. '    
' → logprob: -8.506109237670898
    8. '\n' → logprob: -8.756109237670898
    9. 'a' → logprob: -8.881109237670898
    10. 'n' → logprob: -9.131109237670898

Token 15: ' texte' (ID: 53492)
  Prédit: 'code'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'code' → logprob: -0.5501630306243896
    2. 'texte' → logprob: -1.5501630306243896
    3. ' code' → logprob: -1.6751630306243896
    4. ' texte' → logprob: -3.9251630306243896
    5. 'commande' → logprob: -6.425163269042969
    6. 'text' → logprob: -6.925163269042969
    7. '#' → logprob: -7.800163269042969
    8. 'comment' → logprob: -8.925163269042969
    9. 'c' → logprob: -9.050163269042969
    10. ' text' → logprob: -9.425163269042969

Token 16: ' depuis' (ID: 16277)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.0010164948180317879
    2. '    
' → logprob: -7.626016616821289
    3. '\' → logprob: -9.251016616821289
    4. 'n' → logprob: -9.626016616821289
    5. '\n' → logprob: -9.626016616821289
    6. 'input' → logprob: -9.876016616821289
    7. ' ' → logprob: -9.876016616821289
    8. '    ' → logprob: -10.001016616821289
    9. 'a' → logprob: -10.376016616821289
    10. '  ' → logprob: -11.126016616821289

Token 17: ' l' (ID: 305)
  Prédit: ' input'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' input' → logprob: -0.48379093408584595
    2. '   ' → logprob: -1.6087908744812012
    3. 'input' → logprob: -1.8587908744812012
    4. 'l' → logprob: -3.983790874481201
    5. ' l' → logprob: -5.233790874481201
    6. ' ' → logprob: -6.858790874481201
    7. '=input' → logprob: -6.858790874481201
    8. '_input' → logprob: -8.10879135131836
    9. 'la' → logprob: -8.35879135131836
    10. ' la' → logprob: -8.48379135131836

Token 18: ''entrée' (ID: 115820)
  Prédit: 'a'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'a' → logprob: -1.2036036252975464
    2. ''entrée' → logprob: -1.3286036252975464
    3. 'input' → logprob: -1.5786036252975464
    4. ''' → logprob: -1.7036036252975464
    5. ''utilisateur' → logprob: -3.578603744506836
    6. 'entrée' → logprob: -4.453603744506836
    7. 'e' → logprob: -5.578603744506836
    8. 'u' → logprob: -7.078603744506836
    9. ' input' → logprob: -7.453603744506836
    10. '_' → logprob: -7.703603744506836

Token 19: ' standard' (ID: 7024)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.0032883479725569487
    2. '    
' → logprob: -7.128288269042969
    3. 'input' → logprob: -7.253288269042969
    4. '\' → logprob: -7.878288269042969
    5. '```' → logprob: -7.878288269042969
    6. '    ' → logprob: -9.128288269042969
    7. '       ' → logprob: -9.253288269042969
    8. 'n' → logprob: -9.253288269042969
    9. ' ' → logprob: -9.378288269042969
    10. 'a' → logprob: -9.503288269042969

Token 20: ' (' (ID: 350)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.01676389016211033
    2. '\n' → logprob: -4.891763687133789
    3. '    
' → logprob: -5.641763687133789
    4. '\' → logprob: -5.766763687133789
    5. 'input' → logprob: -6.766763687133789
    6. '```' → logprob: -8.141763687133789
    7. 'user' → logprob: -8.516763687133789
    8. 'text' → logprob: -9.141763687133789
    9. '\x' → logprob: -9.266763687133789
    10. 'n' → logprob: -9.391763687133789

Token 21: 'cl' (ID: 565)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ')' → logprob: -0.4438740015029907
    2. '   ' → logprob: -1.1938740015029907
    3. ' )' → logprob: -3.693873882293701
    4. 'input' → logprob: -4.318873882293701
    5. 'user' → logprob: -5.068873882293701
    6. '`)' → logprob: -6.068873882293701
    7. ' ' → logprob: -6.318873882293701
    8. '):' → logprob: -6.443873882293701
    9. 'text' → logprob: -6.943873882293701
    10. 's' → logprob: -7.318873882293701

Token 22: 'avier' (ID: 37096)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')' → logprob: -0.06741821020841599
    2. '=input' → logprob: -4.192418098449707
    3. 'input' → logprob: -4.442418098449707
    4. '   ' → logprob: -5.067418098449707
    5. '```' → logprob: -5.317418098449707
    6. '`)' → logprob: -5.442418098449707
    7. 'avier' → logprob: -5.817418098449707
    8. '#' → logprob: -5.817418098449707
    9. '=' → logprob: -6.067418098449707
    10. '')' → logprob: -6.442418098449707

Token 23: ').
' (ID: 6294)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ')' → logprob: -0.14307516813278198
    2. '   ' → logprob: -2.5180752277374268
    3. '):' → logprob: -3.0180752277374268
    4. ' )' → logprob: -6.643074989318848
    5. ':' → logprob: -7.018074989318848
    6. ' ' → logprob: -7.393074989318848
    7. ')
' → logprob: -8.393074989318848
    8. '):
' → logprob: -8.768074989318848
    9. 'input' → logprob: -9.268074989318848
    10. '')' → logprob: -9.393074989318848

Token 24: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.0030800290405750275
    2. '\' → logprob: -7.253079891204834
    3. '\n' → logprob: -7.253079891204834
    4. '    
' → logprob: -7.628079891204834
    5. '```' → logprob: -8.003080368041992
    6. ' ' → logprob: -8.753080368041992
    7. 'n' → logprob: -8.878080368041992
    8. 'input' → logprob: -9.503080368041992
    9. '    ' → logprob: -9.628080368041992
    10. '\x' → logprob: -9.878080368041992

Token 25: ' #' (ID: 1069)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.04367006570100784
    2. 'text' → logprob: -3.918670177459717
    3. 'texte' → logprob: -5.168670177459717
    4. 'input' → logprob: -5.418670177459717
    5. 'user' → logprob: -5.793670177459717
    6. ' text' → logprob: -6.043670177459717
    7. 'ligne' → logprob: -6.543670177459717
    8. ' line' → logprob: -6.543670177459717
    9. ' input' → logprob: -6.668670177459717
    10. 's' → logprob: -6.793670177459717

Token 26: ' On' (ID: 2160)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.014965915121138096
    2. ' line' → logprob: -5.264966011047363
    3. ' text' → logprob: -5.764966011047363
    4. ' input' → logprob: -6.139966011047363
    5. ' user' → logprob: -7.014966011047363
    6. '    ' → logprob: -7.014966011047363
    7. 'text' → logprob: -7.264966011047363
    8. ' ' → logprob: -7.639966011047363
    9. ' ligne' → logprob: -8.264966011047363
    10. 'texte' → logprob: -8.514966011047363

Token 27: ' s' (ID: 265)
  Prédit: 'texte'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'texte' → logprob: -0.7225195169448853
    2. '   ' → logprob: -0.9725195169448853
    3. 'ligne' → logprob: -2.7225193977355957
    4. 'text' → logprob: -3.4725193977355957
    5. 's' → logprob: -4.972519397735596
    6. 'line' → logprob: -4.972519397735596
    7. ' line' → logprob: -5.097519397735596
    8. 'l' → logprob: -5.347519397735596
    9. 'chaine' → logprob: -5.847519397735596
    10. 'input' → logprob: -6.097519397735596

Token 28: ''att' (ID: 50189)
  Prédit: 'ais'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'ais' → logprob: -0.12194397300481796
    2. 'aisi' → logprob: -2.246943950653076
    3. 'aisie' → logprob: -5.246943950653076
    4. 'a' → logprob: -6.621943950653076
    5. 'ait' → logprob: -7.121943950653076
    6. 'tring' → logprob: -7.621943950653076
    7. '   ' → logprob: -7.996943950653076
    8. '=' → logprob: -8.246944427490234
    9. ' =' → logprob: -8.746944427490234
    10. '=input' → logprob: -8.996944427490234

Token 29: 'end' (ID: 419)
  Prédit: 'end'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'end' → logprob: -0.20385776460170746
    2. 'ait' → logprob: -3.328857660293579
    3. 'd' → logprob: -3.578857660293579
    4. 'e' → logprob: -3.828857660293579
    5. 'u' → logprob: -3.828857660293579
    6. 't' → logprob: -4.578857898712158
    7. 'a' → logprob: -4.578857898712158
    8. 'uple' → logprob: -5.203857898712158
    9. 'oit' → logprob: -5.578857898712158
    10. 'up' → logprob: -5.578857898712158

Token 30: ' à' (ID: 1221)
  Prédit: ' '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' ' → logprob: -0.3169824779033661
    2. ' =' → logprob: -2.4419825077056885
    3. ' à' → logprob: -2.6919825077056885
    4. '  ' → logprob: -3.3169825077056885
    5. '   ' → logprob: -3.6919825077056885
    6. ' a' → logprob: -3.9419825077056885
    7. 'e' → logprob: -5.441982269287109
    8. '_' → logprob: -5.566982269287109
    9. ' )' → logprob: -5.566982269287109
    10. ' to' → logprob: -5.691982269287109

Token 31: ' recevoir' (ID: 80278)
  Prédit: '    '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '    ' → logprob: -1.3378504514694214
    2. ' une' → logprob: -1.7128504514694214
    3. ' ' → logprob: -1.8378504514694214
    4. '   ' → logprob: -1.9628504514694214
    5. ' input' → logprob: -2.587850570678711
    6. ' a' → logprob: -3.212850570678711
    7. ' un' → logprob: -3.962850570678711
    8. 'une' → logprob: -3.962850570678711
    9. 'input' → logprob: -4.212850570678711
    10. 'a' → logprob: -4.337850570678711

Token 32: ' deux' (ID: 10301)
  Prédit: ' une'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' une' → logprob: -0.1417844146490097
    2. '   ' → logprob: -3.016784429550171
    3. ' un' → logprob: -3.016784429550171
    4. 'une' → logprob: -3.891784429550171
    5. '    ' → logprob: -5.516784191131592
    6. ' ' → logprob: -5.766784191131592
    7. ' a' → logprob: -6.016784191131592
    8. ' la' → logprob: -6.641784191131592
    9. 'a' → logprob: -7.891784191131592
    10. ' ' → logprob: -7.891784191131592

Token 33: ' nombres' (ID: 76205)
  Prédit: ' espaces'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' espaces' → logprob: -0.5338656306266785
    2. ' ' → logprob: -1.9088656902313232
    3. ' )' → logprob: -3.2838656902313232
    4. 's' → logprob: -3.9088656902313232
    5. '_' → logprob: -4.033865451812744
    6. ' mots' → logprob: -4.283865451812744
    7. ')' → logprob: -4.283865451812744
    8. ' spaces' → logprob: -4.283865451812744
    9. 'spaces' → logprob: -4.408865451812744
    10. ' lignes' → logprob: -4.658865451812744

Token 34: ' sépar' (ID: 97160)
  Prédit: ' ='
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' =' → logprob: -1.1048610210418701
    2. '   ' → logprob: -1.4798610210418701
    3. ' ' → logprob: -1.6048610210418701
    4. ',' → logprob: -2.97986102104187
    5. '  ' → logprob: -3.22986102104187
    6. ')' → logprob: -3.35486102104187
    7. '_' → logprob: -4.229861259460449
    8. 'def' → logprob: -4.229861259460449
    9. '    ' → logprob: -4.479861259460449
    10. '=' → logprob: -4.479861259460449

Token 35: 'és' (ID: 1756)
  Prédit: 'és'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'és' → logprob: -0.029787063598632812
    2. 'é' → logprob: -3.529787063598633
    3. 'ée' → logprob: -11.404787063598633
    4. 'es' → logprob: -11.779787063598633
    5. 'ès' → logprob: -11.904787063598633
    6. 'ées' → logprob: -12.529787063598633
    7. 'e' → logprob: -12.654787063598633
    8. 's' → logprob: -13.529787063598633
    9. 'ÉS' → logprob: -13.904787063598633
    10. 'ément' → logprob: -15.154787063598633

Token 36: ' par' (ID: 686)
  Prédit: ' par'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' par' → logprob: -0.034512121230363846
    2. 'par' → logprob: -3.4095120429992676
    3. 'es' → logprob: -8.659512519836426
    4. ' ' → logprob: -9.159512519836426
    5. '_par' → logprob: -9.159512519836426
    6. '  ' → logprob: -9.409512519836426
    7. '```' → logprob: -9.659512519836426
    8. ' by' → logprob: -10.034512519836426
    9. '(par' → logprob: -10.034512519836426
    10. '<|end|>' → logprob: -10.034512519836426

Token 37: ' un' (ID: 537)
  Prédit: ' un'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' un' → logprob: -0.3308171331882477
    2. ''un' → logprob: -1.9558171033859253
    3. 'un' → logprob: -2.080817222595215
    4. ' ' → logprob: -4.955817222595215
    5. ''' → logprob: -5.580817222595215
    6. ' une' → logprob: -7.205817222595215
    7. ''espace' → logprob: -7.330817222595215
    8. 'une' → logprob: -7.580817222595215
    9. 'es' → logprob: -7.830817222595215
    10. ''une' → logprob: -7.955817222595215

Token 38: ' espace' (ID: 66004)
  Prédit: ' espace'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' espace' → logprob: -0.27234965562820435
    2. ''espace' → logprob: -1.7723495960235596
    3. 'es' → logprob: -3.1473495960235596
    4. ' ' → logprob: -4.772349834442139
    5. 'e' → logprob: -5.522349834442139
    6. '’espace' → logprob: -5.647349834442139
    7. ''' → logprob: -6.022349834442139
    8. 'esp' → logprob: -6.147349834442139
    9. ''esp' → logprob: -6.397349834442139
    10. 'space' → logprob: -6.772349834442139

Token 39: ',' (ID: 11)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.13736210763454437
    2. 'n' → logprob: -2.637362003326416
    3. '    
' → logprob: -3.887362003326416
    4. 'tokens' → logprob: -4.637362003326416
    5. 'x' → logprob: -5.512362003326416
    6. '   
' → logprob: -5.762362003326416
    7. ' ' → logprob: -5.887362003326416
    8. '  
' → logprob: -6.012362003326416
    9. '  ' → logprob: -6.262362003326416
    10. 'input' → logprob: -6.637362003326416

Token 40: ' par' (ID: 686)
  Prédit: ' puis'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' puis' → logprob: -1.765468955039978
    2. ' ' → logprob: -2.1404690742492676
    3. '   ' → logprob: -2.2654690742492676
    4. ' a' → logprob: -2.6404690742492676
    5. 's' → logprob: -2.8904690742492676
    6. ' "' → logprob: -3.1404690742492676
    7. 'input' → logprob: -3.3904690742492676
    8. '    ' → logprob: -3.6404690742492676
    9. '<|end|>' → logprob: -3.7654690742492676
    10. ' input' → logprob: -3.8904690742492676

Token 41: ' exemple' (ID: 26320)
  Prédit: 'ex'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'ex' → logprob: -0.5830416679382324
    2. ' exemple' → logprob: -1.0830416679382324
    3. ' example' → logprob: -2.9580416679382324
    4. ' ex' → logprob: -4.333041667938232
    5. 'example' → logprob: -4.333041667938232
    6. 'ce' → logprob: -5.458041667938232
    7. 'space' → logprob: -5.833041667938232
    8. 'une' → logprob: -5.833041667938232
    9. ' une' → logprob: -6.458041667938232
    10. 'def' → logprob: -6.958041667938232

Token 42: ' "' (ID: 392)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.535126268863678
    2. ' ' → logprob: -1.2851262092590332
    3. '"' → logprob: -2.910126209259033
    4. ' "' → logprob: -4.160126209259033
    5. ''' → logprob: -4.285126209259033
    6. '  ' → logprob: -4.660126209259033
    7. '    ' → logprob: -4.910126209259033
    8. '1' → logprob: -5.035126209259033
    9. ' a' → logprob: -5.535126209259033
    10. ' '' → logprob: -5.785126209259033

Token 43: '3' (ID: 18)
  Prédit: '1'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '1' → logprob: -1.2343670129776
    2. '3' → logprob: -1.2343670129776
    3. '2' → logprob: -2.1093668937683105
    4. '"' → logprob: -2.3593668937683105
    5. '12' → logprob: -2.4843668937683105
    6. '5' → logprob: -2.9843668937683105
    7. '10' → logprob: -3.3593668937683105
    8. '7' → logprob: -4.8593668937683105
    9. ' ' → logprob: -5.2343668937683105
    10. '4' → logprob: -5.4843668937683105

Token 44: ' ' (ID: 220)
  Prédit: ' +'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' +' → logprob: -0.7536492347717285
    2. ' ' → logprob: -1.1286492347717285
    3. '+' → logprob: -1.6286492347717285
    4. '2' → logprob: -5.7536492347717285
    5. ' *' → logprob: -6.3786492347717285
    6. '7' → logprob: -6.6286492347717285
    7. '4' → logprob: -6.7536492347717285
    8. '  ' → logprob: -7.5036492347717285
    9. '5' → logprob: -7.6286492347717285
    10. '*' → logprob: -8.00364875793457

Token 45: '4' (ID: 19)
  Prédit: '+'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '+' → logprob: -1.0471603870391846
    2. '4' → logprob: -1.0471603870391846
    3. '5' → logprob: -2.1721603870391846
    4. '7' → logprob: -2.2971603870391846
    5. ' ' → logprob: -2.9221603870391846
    6. ' +' → logprob: -4.1721601486206055
    7. '2' → logprob: -4.6721601486206055
    8. '*' → logprob: -5.9221601486206055
    9. '8' → logprob: -7.9221601486206055
    10. '10' → logprob: -8.047160148620605

Token 46: '".
' (ID: 26880)
  Prédit: '"'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '"' → logprob: -0.141253262758255
    2. '")' → logprob: -2.5162532329559326
    3. ')' → logprob: -3.2662532329559326
    4. ')"' → logprob: -4.516253471374512
    5. '"""' → logprob: -6.891253471374512
    6. ' "' → logprob: -7.891253471374512
    7. ' )' → logprob: -8.641253471374512
    8. ' ")' → logprob: -9.266253471374512
    9. '```' → logprob: -9.641253471374512
    10. '')"' → logprob: -11.016253471374512

Token 47: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.09963386505842209
    2. 'n' → logprob: -2.7246339321136475
    3. ' ' → logprob: -4.724633693695068
    4. '    
' → logprob: -5.599633693695068
    5. 'x' → logprob: -5.974633693695068
    6. ' 
' → logprob: -6.099633693695068
    7. '   
' → logprob: -6.599633693695068
    8. 'tokens' → logprob: -6.724633693695068
    9. '  ' → logprob: -6.849633693695068
    10. 'input' → logprob: -6.974633693695068

Token 48: ' #' (ID: 1069)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.09661532193422318
    2. 'n' → logprob: -2.9716153144836426
    3. '    
' → logprob: -5.096615314483643
    4. 'x' → logprob: -5.471615314483643
    5. 'input' → logprob: -5.471615314483643
    6. 'user' → logprob: -5.471615314483643
    7. 'tokens' → logprob: -5.471615314483643
    8. ' ' → logprob: -5.846615314483643
    9. '    ' → logprob: -6.096615314483643
    10. '\n' → logprob: -6.221615314483643

Token 49: ' La' (ID: 3038)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.04236100986599922
    2. ' line' → logprob: -4.167360782623291
    3. 'n' → logprob: -4.542360782623291
    4. 'input' → logprob: -6.042360782623291
    5. ' ' → logprob: -6.292360782623291
    6. 's' → logprob: -6.417360782623291
    7. ' n' → logprob: -6.542360782623291
    8. 'user' → logprob: -6.542360782623291
    9. 'line' → logprob: -6.917360782623291
    10. 'x' → logprob: -7.042360782623291

Token 50: ' fonction' (ID: 17610)
  Prédit: ' line'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' line' → logprob: -0.22602054476737976
    2. ' ligne' → logprob: -2.101020574569702
    3. '   ' → logprob: -2.976020574569702
    4. ' user' → logprob: -4.851020336151123
    5. 'ligne' → logprob: -4.851020336151123
    6. 's' → logprob: -5.726020336151123
    7. ' input' → logprob: -5.726020336151123
    8. 'line' → logprob: -5.851020336151123
    9. ' lignes' → logprob: -7.351020336151123
    10. 'l' → logprob: -7.726020336151123

Token 51: ' input' (ID: 3422)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.07199137657880783
    2. ' line' → logprob: -3.071991443634033
    3. ' input' → logprob: -4.696991443634033
    4. ' ligne' → logprob: -5.571991443634033
    5. 'ligne' → logprob: -5.946991443634033
    6. ' user' → logprob: -6.321991443634033
    7. 'input' → logprob: -6.696991443634033
    8. 'line' → logprob: -7.196991443634033
    9. 's' → logprob: -7.446991443634033
    10. 'def' → logprob: -7.571991443634033

Token 52: '()' (ID: 416)
  Prédit: '()'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '()' → logprob: -0.09191873669624329
    2. '(' → logprob: -2.466918706893921
    3. '("")' → logprob: -6.7169189453125
    4. '("' → logprob: -6.9669189453125
    5. '('' → logprob: -7.7169189453125
    6. ' ()' → logprob: -8.9669189453125
    7. '().' → logprob: -9.0919189453125
    8. '("""' → logprob: -9.9669189453125
    9. '("("' → logprob: -10.8419189453125
    10. ' (' → logprob: -11.9669189453125

Token 53: ' lit' (ID: 11980)
  Prédit: '()'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '()' → logprob: -0.3904097080230713
    2. '(' → logprob: -1.1404097080230713
    3. '().' → logprob: -6.390409469604492
    4. ')' → logprob: -8.265409469604492
    5. '("")' → logprob: -8.390409469604492
    6. ' =' → logprob: -8.515409469604492
    7. ' ()' → logprob: -8.640409469604492
    8. '('' → logprob: -8.765409469604492
    9. ' ' → logprob: -9.390409469604492
    10. '.' → logprob: -9.390409469604492

Token 54: ' l' (ID: 305)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '(' → logprob: -0.6319828629493713
    2. '()' → logprob: -0.8819828629493713
    3. '('' → logprob: -3.6319828033447266
    4. ' ' → logprob: -4.506982803344727
    5. ''' → logprob: -5.881982803344727
    6. '("' → logprob: -5.881982803344727
    7. ' ()' → logprob: -6.256982803344727
    8. ' (' → logprob: -6.381982803344727
    9. ' un' → logprob: -6.506982803344727
    10. ')' → logprob: -6.881982803344727

Token 55: ''entrée' (ID: 115820)
  Prédit: 'e'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'e' → logprob: -0.2224990576505661
    2. ''' → logprob: -2.347499132156372
    3. 'a' → logprob: -2.847499132156372
    4. ''entrée' → logprob: -4.347498893737793
    5. ''utilisateur' → logprob: -5.097498893737793
    6. ''une' → logprob: -5.097498893737793
    7. ''ent' → logprob: -5.597498893737793
    8. ''espace' → logprob: -5.722498893737793
    9. ' a' → logprob: -5.972498893737793
    10. 'es' → logprob: -6.472498893737793

Token 56: ' utilisateur' (ID: 115595)
  Prédit: '()'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '()' → logprob: -0.001159623614512384
    2. '().' → logprob: -7.37615966796875
    3. ' ()' → logprob: -8.75115966796875
    4. '(' → logprob: -8.75115966796875
    5. '("' → logprob: -10.37615966796875
    6. '("")' → logprob: -10.37615966796875
    7. '()
' → logprob: -11.00115966796875
    8. '   ' → logprob: -11.12615966796875
    9. '()\' → logprob: -11.37615966796875
    10. 'user' → logprob: -11.50115966796875

Token 57: ' sous' (ID: 14487)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.9183778166770935
    2. '()' → logprob: -1.2933778762817383
    3. ')' → logprob: -1.9183778762817383
    4. ' )' → logprob: -3.0433778762817383
    5. '(' → logprob: -3.1683778762817383
    6. ',' → logprob: -4.293377876281738
    7. ' ' → logprob: -4.293377876281738
    8. '    ' → logprob: -4.418377876281738
    9. '.' → logprob: -4.418377876281738
    10. '  ' → logprob: -5.043377876281738

Token 58: ' la' (ID: 557)
  Prédit: ' forme'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' forme' → logprob: -0.048440076410770416
    2. 'forme' → logprob: -3.1734399795532227
    3. 'form' → logprob: -5.423439979553223
    4. 'forma' → logprob: -8.048439979553223
    5. ' form' → logprob: -8.173439979553223
    6. 'la' → logprob: -9.298439979553223
    7. 'chaine' → logprob: -9.298439979553223
    8. ' la' → logprob: -9.673439979553223
    9. 'ent' → logprob: -10.298439979553223
    10. 'format' → logprob: -10.423439979553223

Token 59: ' forme' (ID: 27450)
  Prédit: 'forme'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'forme' → logprob: -0.428357869386673
    2. 'form' → logprob: -1.5533578395843506
    3. ' forme' → logprob: -2.0533578395843506
    4. 'chaine' → logprob: -5.30335807800293
    5. 'ent' → logprob: -7.17835807800293
    6. 'forma' → logprob: -7.42835807800293
    7. 'guise' → logprob: -7.55335807800293
    8. 'string' → logprob: -8.42835807800293
    9. 'cha' → logprob: -8.55335807800293
    10. 'format' → logprob: -8.67835807800293

Token 60: ' d' (ID: 272)
  Prédit: ' d'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' d' → logprob: -0.002769571030512452
    2. ''' → logprob: -6.627769470214844
    3. 'd' → logprob: -6.877769470214844
    4. ' de' → logprob: -9.252769470214844
    5. '`' → logprob: -9.627769470214844
    6. '"' → logprob: -9.877769470214844
    7. ''d' → logprob: -10.502769470214844
    8. ''une' → logprob: -10.752769470214844
    9. ''un' → logprob: -10.877769470214844
    10. ')' → logprob: -11.002769470214844

Token 61: ''une' (ID: 13337)
  Prédit: ''une'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ''une' → logprob: -0.06690825521945953
    2. 'e' → logprob: -3.566908359527588
    3. ''' → logprob: -4.191908359527588
    4. ''un' → logprob: -4.566908359527588
    5. 'une' → logprob: -5.441908359527588
    6. ' une' → logprob: -5.691908359527588
    7. ' chaîne' → logprob: -7.316908359527588
    8. 'chaine' → logprob: -7.691908359527588
    9. ''ent' → logprob: -8.06690788269043
    10. '’une' → logprob: -8.19190788269043

Token 62: ' chaîne' (ID: 89288)
  Prédit: ' chaîne'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' chaîne' → logprob: -0.14965713024139404
    2. 'chaine' → logprob: -2.2746572494506836
    3. ' chaine' → logprob: -4.149657249450684
    4. ' string' → logprob: -4.524657249450684
    5. 'string' → logprob: -5.399657249450684
    6. ' chain' → logprob: -6.649657249450684
    7. ' chaînes' → logprob: -7.149657249450684
    8. 'str' → logprob: -7.399657249450684
    9. 'chain' → logprob: -7.399657249450684
    10. 's' → logprob: -7.649657249450684

Token 63: ' de' (ID: 334)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '   ' → logprob: -1.1661458015441895
    2. ')' → logprob: -1.2911458015441895
    3. '(' → logprob: -2.4161458015441895
    4. '()' → logprob: -2.6661458015441895
    5. '.' → logprob: -3.1661458015441895
    6. ',' → logprob: -3.4161458015441895
    7. ' )' → logprob: -3.5411458015441895
    8. '[' → logprob: -3.7911458015441895
    9. '"' → logprob: -4.0411458015441895
    10. '`' → logprob: -4.4161458015441895

Token 64: ' caractères' (ID: 183106)
  Prédit: 'car'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'car' → logprob: -0.04364141821861267
    2. ' caractères' → logprob: -3.1686413288116455
    3. 'texte' → logprob: -7.918641567230225
    4. ' caracteres' → logprob: -8.668641090393066
    5. ' caract' → logprob: -9.543641090393066
    6. ' caractère' → logprob: -11.668641090393066
    7. ' ' → logprob: -12.168641090393066
    8. '   ' → logprob: -12.918641090393066
    9. '```' → logprob: -12.918641090393066
    10. 'chars' → logprob: -13.168641090393066

Token 65: '.
' (ID: 558)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.08988630771636963
    2. ' ' → logprob: -4.08988618850708
    3. '    
' → logprob: -4.46488618850708
    4. '(' → logprob: -4.71488618850708
    5. ')' → logprob: -4.71488618850708
    6. '\' → logprob: -5.21488618850708
    7. ':' → logprob: -5.71488618850708
    8. '    ' → logprob: -5.71488618850708
    9. ''' → logprob: -5.83988618850708
    10. '"' → logprob: -5.83988618850708

Token 66: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.05653159320354462
    2. 'n' → logprob: -3.1815316677093506
    3. ' ' → logprob: -4.9315314292907715
    4. '    
' → logprob: -6.5565314292907715
    5. '    ' → logprob: -7.3065314292907715
    6. 'x' → logprob: -7.4315314292907715
    7. 's' → logprob: -7.5565314292907715
    8. 'r' → logprob: -7.8065314292907715
    9. ' 
' → logprob: -8.05653190612793
    10. 'i' → logprob: -8.05653190612793

Token 67: ' user' (ID: 1825)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.08436012268066406
    2. 'n' → logprob: -2.959360122680664
    3. ' ' → logprob: -4.709360122680664
    4. 's' → logprob: -5.209360122680664
    5. 'x' → logprob: -5.459360122680664
    6. 'u' → logprob: -6.459360122680664
    7. 'a' → logprob: -6.834360122680664
    8. 'user' (adapté à ' user') → logprob: -6.834360122680664
    9. '    
' → logprob: -7.209360122680664
    10. '    ' → logprob: -7.334360122680664

Token 68: '_input' (ID: 12507)
  Prédit: '_'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_' → logprob: -0.2567920684814453
    2. ' =' → logprob: -2.3817920684814453
    3. '_input' → logprob: -2.3817920684814453
    4. ' ' → logprob: -4.381792068481445
    5. '(' → logprob: -4.881792068481445
    6. ' _' → logprob: -5.256792068481445
    7. 's' → logprob: -5.381792068481445
    8. '=' → logprob: -6.006792068481445
    9. ')' → logprob: -6.006792068481445
    10. '.' → logprob: -6.506792068481445

Token 69: ' =' (ID: 314)
  Prédit: ' ='
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' =' → logprob: -0.004658672492951155
    2. '=' → logprob: -5.3796586990356445
    3. 's' → logprob: -11.129658699035645
    4. ')' → logprob: -12.004658699035645
    5. '.' → logprob: -12.379658699035645
    6. 'space' → logprob: -12.629658699035645
    7. ' ' → logprob: -12.879658699035645
    8. '_' → logprob: -13.379658699035645
    9. '  ' → logprob: -14.004658699035645
    10. ' ' → logprob: -14.254658699035645

Token 70: ' input' (ID: 3422)
  Prédit: ' input'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' input' → logprob: -0.07889088988304138
    2. 'input' → logprob: -2.578890800476074
    3. '=input' → logprob: -14.078890800476074
    4. '(input' → logprob: -15.328890800476074
    5. '	input' → logprob: -16.32889175415039
    6. ' ' → logprob: -17.32889175415039
    7. ' ' → logprob: -17.95389175415039
    8. '<input' → logprob: -18.32889175415039
    9. '_input' → logprob: -18.82889175415039
    10. ' inputs' → logprob: -19.57889175415039

Token 71: '()
' (ID: 1234)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '(' → logprob: -0.07168827950954437
    2. '("("' → logprob: -2.821688175201416
    3. '('' → logprob: -4.821688175201416
    4. '()' → logprob: -6.946688175201416
    5. '("' → logprob: -7.946688175201416
    6. ' (' → logprob: -9.446688652038574
    7. '("")' → logprob: -9.696688652038574
    8. '("(' → logprob: -9.821688652038574
    9. '("""' → logprob: -10.446688652038574
    10. '(">' → logprob: -11.696688652038574

Token 72: '    
' (ID: 1944)
  Prédit: '.split'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '.split' → logprob: -0.49528515338897705
    2. '.' → logprob: -1.245285153388977
    3. '.strip' → logprob: -2.4952850341796875
    4. 'split' → logprob: -4.9952850341796875
    5. 's' → logprob: -5.6202850341796875
    6. '.s' → logprob: -6.1202850341796875
    7. ' ' → logprob: -6.7452850341796875
    8. 'tokens' → logprob: -6.8702850341796875
    9. '   ' → logprob: -7.7452850341796875
    10. '_split' → logprob: -7.7452850341796875

Token 73: '   ' (ID: 271)
  Prédit: 'tokens'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'tokens' → logprob: -0.79740971326828
    2. 'n' → logprob: -1.4224097728729248
    3. '   ' → logprob: -1.7974097728729248
    4. 'a' → logprob: -3.047409772872925
    5. 's' → logprob: -3.172409772872925
    6. 't' → logprob: -4.672409534454346
    7. 'x' → logprob: -4.672409534454346
    8. '    
' → logprob: -4.797409534454346
    9. ' tokens' → logprob: -5.297409534454346
    10. 'parts' → logprob: -5.547409534454346

Token 74: ' #' (ID: 1069)
  Prédit: '#'
  Correct (stricte): False
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '#' (adapté à ' #') → logprob: -0.9880109429359436
    2. 'a' → logprob: -1.1130108833312988
    3. 'n' → logprob: -2.488010883331299
    4. 'x' → logprob: -2.613010883331299
    5. 'numbers' → logprob: -2.613010883331299
    6. 'tokens' → logprob: -3.113010883331299
    7. 'parts' → logprob: -3.988010883331299
    8. 'nums' → logprob: -5.738010883331299
    9. 'try' → logprob: -7.113010883331299
    10. 'part' → logprob: -7.238010883331299

Token 75: ' La' (ID: 3038)
  Prédit: 'tokens'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'tokens' → logprob: -0.25343114137649536
    2. ' tokens' → logprob: -2.8784310817718506
    3. '#' → logprob: -3.2534310817718506
    4. '   ' → logprob: -3.3784310817718506
    5. 'parts' → logprob: -3.6284310817718506
    6. 'split' → logprob: -3.7534310817718506
    7. ' parts' → logprob: -4.12843132019043
    8. 'numbers' → logprob: -4.25343132019043
    9. ' #' → logprob: -5.75343132019043
    10. ' numbers' → logprob: -6.00343132019043

Token 76: ' méthode' (ID: 71490)
  Prédit: 'tokens'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'tokens' → logprob: -1.3665807247161865
    2. 'numbers' → logprob: -1.6165807247161865
    3. '#' → logprob: -1.7415807247161865
    4. ' numbers' → logprob: -1.7415807247161865
    5. ' tokens' → logprob: -3.3665807247161865
    6. ' #' → logprob: -3.3665807247161865
    7. 's' → logprob: -3.9915807247161865
    8. ' parts' → logprob: -4.116580963134766
    9. 'user' → logprob: -4.116580963134766
    10. ' user' → logprob: -5.116580963134766

Token 77: ' split' (ID: 12648)
  Prédit: 'split'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'split' → logprob: -0.09401176869869232
    2. ' split' → logprob: -2.7190117835998535
    3. 'strip' → logprob: -3.8440117835998535
    4. ' strip' → logprob: -7.0940117835998535
    5. '.split' → logprob: -7.3440117835998535
    6. 'user' → logprob: -8.094011306762695
    7. '.strip' → logprob: -8.469011306762695
    8. ' user' → logprob: -8.594011306762695
    9. 's' → logprob: -9.469011306762695
    10. ' .' → logprob: -10.094011306762695

Token 78: '()' (ID: 416)
  Prédit: '()'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '()' → logprob: -0.007832680828869343
    2. '(' → logprob: -4.8828325271606445
    3. '('' → logprob: -9.382832527160645
    4. '().' → logprob: -9.632832527160645
    5. '()]' → logprob: -11.257832527160645
    6. ' ()' → logprob: -12.007832527160645
    7. '();' → logprob: -12.007832527160645
    8. '("("' → logprob: -12.132832527160645
    9. '("' → logprob: -12.257832527160645
    10. '()?>' → logprob: -12.507832527160645

Token 79: ' div' (ID: 4223)
  Prédit: '()'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '()' → logprob: -0.005626443307846785
    2. 'user' → logprob: -6.130626678466797
    3. '(' → logprob: -6.630626678466797
    4. ' ()' → logprob: -6.880626678466797
    5. '<|end|>' → logprob: -8.505626678466797
    6. '().' → logprob: -8.755626678466797
    7. '<|end|>' → logprob: -9.505626678466797
    8. '())' → logprob: -9.755626678466797
    9. 'split' → logprob: -9.880626678466797
    10. '   ' → logprob: -10.005626678466797

Token 80: 'ise' (ID: 1096)
  Prédit: 'ide'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'ide' → logprob: -0.3423041105270386
    2. 'ise' → logprob: -1.3423041105270386
    3. '()' → logprob: -4.467304229736328
    4. 'de' → logprob: -4.717304229736328
    5. 't' → logprob: -5.592304229736328
    6. ' ide' → logprob: -6.467304229736328
    7. '_' → logprob: -8.092304229736328
    8. '   ' → logprob: -8.092304229736328
    9. ')' → logprob: -8.467304229736328
    10. '#' → logprob: -8.467304229736328

Token 81: ' la' (ID: 557)
  Prédit: '()'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '()' → logprob: -0.09048290550708771
    2. '('' → logprob: -2.8404829502105713
    3. '(' → logprob: -4.090482711791992
    4. 'user' → logprob: -4.590482711791992
    5. '("' → logprob: -7.965482711791992
    6. ' ()' → logprob: -8.590482711791992
    7. ' user' → logprob: -8.715482711791992
    8. '(user' → logprob: -8.715482711791992
    9. 'l' → logprob: -9.590482711791992
    10. ' la' → logprob: -10.090482711791992

Token 82: ' chaîne' (ID: 89288)
  Prédit: ' chaîne'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' chaîne' → logprob: -0.057136718183755875
    2. 'chaine' → logprob: -3.5571367740631104
    3. 'cha' → logprob: -3.9321367740631104
    4. 'user' → logprob: -5.557136535644531
    5. ' chaine' → logprob: -5.932136535644531
    6. ' user' → logprob: -7.807136535644531
    7. 's' → logprob: -8.807136535644531
    8. ' cha' → logprob: -9.057136535644531
    9. 'string' → logprob: -9.557136535644531
    10. ' string' → logprob: -10.557136535644531

Token 83: ' de' (ID: 334)
  Prédit: '()'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '()' → logprob: -0.2513459026813507
    2. '('' → logprob: -1.7513458728790283
    3. '(' → logprob: -3.1263458728790283
    4. '("("' → logprob: -6.376346111297607
    5. '('.')' → logprob: -6.626346111297607
    6. '("' → logprob: -7.251346111297607
    7. '().' → logprob: -7.251346111297607
    8. ''' → logprob: -8.87634563446045
    9. '.' → logprob: -9.87634563446045
    10. '(',' → logprob: -10.75134563446045

Token 84: ' caractères' (ID: 183106)
  Prédit: 'user'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'user' → logprob: -1.3181620836257935
    2. ''' → logprob: -1.5681620836257935
    3. ''user' → logprob: -1.8181620836257935
    4. ' l' → logprob: -2.443161964416504
    5. 'chaine' → logprob: -2.568161964416504
    6. '()' → logprob: -3.193161964416504
    7. ' user' → logprob: -3.318161964416504
    8. 'l' → logprob: -3.443161964416504
    9. ''utilisateur' → logprob: -4.318161964416504
    10. ' chaîne' → logprob: -4.443161964416504

Token 85: ' en' (ID: 469)
  Prédit: '()'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '()' → logprob: -0.08506055921316147
    2. '(' → logprob: -2.7100605964660645
    3. '('' → logprob: -4.3350605964660645
    4. '.' → logprob: -7.3350605964660645
    5. '().' → logprob: -7.8350605964660645
    6. '("' → logprob: -8.460060119628906
    7. '('.')' → logprob: -8.585060119628906
    8. ' ()' → logprob: -8.835060119628906
    9. ''' → logprob: -9.835060119628906
    10. '("("' → logprob: -10.210060119628906

Token 86: ' une' (ID: 2463)
  Prédit: ' une'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' une' → logprob: -0.06205955892801285
    2. ' un' → logprob: -3.6870596408843994
    3. 'une' → logprob: -3.9370596408843994
    4. ' la' → logprob: -5.93705940246582
    5. ' des' → logprob: -6.31205940246582
    6. ' ['' → logprob: -6.43705940246582
    7. ' ' → logprob: -6.43705940246582
    8. '[]' → logprob: -6.81205940246582
    9. 'un' → logprob: -7.43705940246582
    10. 'au' → logprob: -7.43705940246582

Token 87: ' liste' (ID: 31719)
  Prédit: ' liste'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' liste' → logprob: -0.0027679058257490396
    2. 'liste' → logprob: -6.627768039703369
    3. ' list' → logprob: -7.127768039703369
    4. 's' → logprob: -8.127767562866211
    5. ' ' → logprob: -9.002767562866211
    6. ' chaîne' → logprob: -10.127767562866211
    7. 'list' → logprob: -10.627767562866211
    8. ' listes' → logprob: -10.877767562866211
    9. ' espace' → logprob: -11.002767562866211
    10. '[' → logprob: -11.502767562866211

Token 88: ' de' (ID: 334)
  Prédit: '['
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '[' → logprob: -0.3462681174278259
    2. '<|end|>' → logprob: -2.3462681770324707
    3. '()' → logprob: -2.4712681770324707
    4. '[]' → logprob: -3.3462681770324707
    5. '.' → logprob: -3.8462681770324707
    6. '(' → logprob: -4.346268177032471
    7. '('' → logprob: -5.096268177032471
    8. ')' → logprob: -5.096268177032471
    9. ''' → logprob: -5.346268177032471
    10. ' des' → logprob: -5.471268177032471

Token 89: ' sous' (ID: 14487)
  Prédit: ' chaînes'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' chaînes' → logprob: -0.04232146590948105
    2. ' espaces' → logprob: -3.7923214435577393
    3. ' mots' → logprob: -5.042321681976318
    4. ' tokens' → logprob: -6.167321681976318
    5. ' chaîne' → logprob: -6.667321681976318
    6. ' chain' → logprob: -6.667321681976318
    7. 'cha' → logprob: -6.667321681976318
    8. 'm' → logprob: -6.917321681976318
    9. 'tokens' → logprob: -7.292321681976318
    10. ' morceaux' → logprob: -7.542321681976318

Token 90: '-cha' (ID: 163177)
  Prédit: ' chaînes'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' chaînes' → logprob: -0.06251442432403564
    2. '-' → logprob: -3.687514305114746
    3. '_' → logprob: -5.062514305114746
    4. '-cha' → logprob: -5.312514305114746
    5. '-chain' → logprob: -5.437514305114746
    6. 's' → logprob: -5.687514305114746
    7. '_m' → logprob: -6.187514305114746
    8. ' chain' → logprob: -6.312514305114746
    9. 'chain' → logprob: -6.437514305114746
    10. 'strings' → logprob: -6.562514305114746

Token 91: 'înes' (ID: 171517)
  Prédit: 'înes'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'înes' → logprob: -0.3917870819568634
    2. 'î' → logprob: -1.141787052154541
    3. 'nes' → logprob: -6.641787052154541
    4. 'Î' → logprob: -6.891787052154541
    5. 'r' → logprob: -7.016787052154541
    6. 'ines' → logprob: -7.266787052154541
    7. 'ï' → logprob: -8.0167875289917
    8. 'ì' → logprob: -8.5167875289917
    9. 'îne' → logprob: -9.2667875289917
    10. '   ' → logprob: -9.3917875289917

Token 92: ',
' (ID: 412)
  Prédit: '()'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '()' → logprob: -0.36689478158950806
    2. '.' → logprob: -2.2418947219848633
    3. '('' → logprob: -2.7418947219848633
    4. '[' → logprob: -3.2418947219848633
    5. '(' → logprob: -3.4918947219848633
    6. '   ' → logprob: -4.616894721984863
    7. '('.')' → logprob: -4.616894721984863
    8. ',' → logprob: -4.991894721984863
    9. ')' → logprob: -5.366894721984863
    10. 'tokens' → logprob: -5.491894721984863

Token 93: '   ' (ID: 271)
  Prédit: '''
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ''' → logprob: -0.24801170825958252
    2. '    ' → logprob: -2.998011589050293
    3. ' ' → logprob: -3.123011589050293
    4. '"' → logprob: -3.248011589050293
    5. ')' → logprob: -3.373011589050293
    6. '.' → logprob: -4.498011589050293
    7. ''s' → logprob: -4.623011589050293
    8. ' )' → logprob: -4.873011589050293
    9. '[' → logprob: -5.123011589050293
    10. '   ' → logprob: -5.623011589050293

Token 94: ' #' (ID: 1069)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.8603082299232483
    2. '    ' → logprob: -1.4853081703186035
    3. '    
' → logprob: -1.6103081703186035
    4. ')' → logprob: -3.7353081703186035
    5. ' )' → logprob: -3.7353081703186035
    6. ''' → logprob: -4.1103081703186035
    7. ' ' → logprob: -4.3603081703186035
    8. ' par' → logprob: -4.8603081703186035
    9. '"' → logprob: -4.9853081703186035
    10. 'e' → logprob: -5.1103081703186035

Token 95: ' en' (ID: 469)
  Prédit: ' user'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' user' → logprob: -1.414703130722046
    2. 'tokens' → logprob: -1.664703130722046
    3. ' tokens' → logprob: -1.789703130722046
    4. 'user' → logprob: -2.164703130722046
    5. ' mots' → logprob: -2.289703130722046
    6. '    ' → logprob: -3.539703130722046
    7. ' ' → logprob: -3.664703130722046
    8. ')' → logprob: -4.039703369140625
    9. ' )' → logprob: -4.039703369140625
    10. '   ' → logprob: -4.289703369140625

Token 96: ' utilisant' (ID: 92474)
  Prédit: ' fonction'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' fonction' → logprob: -0.9570136666297913
    2. ' utilisant' → logprob: -0.9570136666297913
    3. 's' → logprob: -2.0820136070251465
    4. 'fonction' → logprob: -3.8320136070251465
    5. ' sépar' → logprob: -4.2070136070251465
    6. ' espaces' → logprob: -4.9570136070251465
    7. ' s' → logprob: -5.0820136070251465
    8. 'util' → logprob: -5.2070136070251465
    9. ' suivant' → logprob: -5.4570136070251465
    10. ' prenant' → logprob: -5.7070136070251465

Token 97: ' par' (ID: 686)
  Prédit: ' l'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' l' → logprob: -0.21653418242931366
    2. ' un' → logprob: -2.59153413772583
    3. ''' → logprob: -3.09153413772583
    4. 'l' → logprob: -3.46653413772583
    5. ' '' → logprob: -4.21653413772583
    6. ' ' → logprob: -4.71653413772583
    7. ''un' → logprob: -4.84153413772583
    8. 'un' → logprob: -5.09153413772583
    9. ' ' → logprob: -6.59153413772583
    10. '"' → logprob: -7.09153413772583

Token 98: ' défaut' (ID: 79375)
  Prédit: ' défaut'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' défaut' → logprob: -0.18914584815502167
    2. 'dé' → logprob: -2.439145803451538
    3. ' ' → logprob: -3.189145803451538
    4. ' espace' → logprob: -4.689146041870117
    5. 'd' → logprob: -4.814146041870117
    6. ' default' → logprob: -5.314146041870117
    7. ' espaces' → logprob: -5.439146041870117
    8. 'default' → logprob: -6.064146041870117
    9. 'def' → logprob: -6.189146041870117
    10. ''espace' → logprob: -6.564146041870117

Token 99: ' l' (ID: 305)
  Prédit: ' l'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' l' → logprob: -0.724205493927002
    2. ''' → logprob: -1.599205493927002
    3. ' ' → logprob: -1.974205493927002
    4. ' '' → logprob: -2.599205493927002
    5. ' un' → logprob: -2.974205493927002
    6. ''un' → logprob: -4.224205493927002
    7. 'l' → logprob: -4.724205493927002
    8. ' le' → logprob: -4.974205493927002
    9. '  ' → logprob: -5.724205493927002
    10. '"' → logprob: -5.724205493927002

Token 100: ''espace' (ID: 118124)
  Prédit: ''espace'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ''espace' → logprob: -0.08011133968830109
    2. ''esp' → logprob: -2.955111265182495
    3. ''' → logprob: -4.205111503601074
    4. 'es' → logprob: -5.580111503601074
    5. 'a' → logprob: -5.830111503601074
    6. 'e' → logprob: -7.330111503601074
    7. ' '' → logprob: -7.580111503601074
    8. ' espace' → logprob: -7.705111503601074
    9. '’espace' → logprob: -7.955111503601074
    10. 'u' → logprob: -8.705111503601074

Token 101: ' comme' (ID: 7971)
  Prédit: ''
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False

Token 102: ' sépar' (ID: 97160)
  Prédit: ' sépar'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' sépar' → logprob: -0.06035700440406799
    2. 'sé' → logprob: -3.435357093811035
    3. 'dé' → logprob: -4.310357093811035
    4. ' dé' → logprob: -4.935357093811035
    5. 's' → logprob: -6.060357093811035
    6. 'car' → logprob: -6.560357093811035
    7. 'se' → logprob: -7.060357093811035
    8. ' séparation' → logprob: -8.060357093811035
    9. 'delimiter' → logprob: -8.560357093811035
    10. 'le' → logprob: -8.810357093811035

Token 103: 'ateur' (ID: 12477)
  Prédit: 'ateur'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'ateur' → logprob: -0.0006215345347300172
    2. 'ate' → logprob: -7.500621318817139
    3. '```' → logprob: -10.750621795654297
    4. '   ' → logprob: -11.500621795654297
    5. 'atrice' → logprob: -12.375621795654297
    6. ' at' → logprob: -12.375621795654297
    7. 'r' → logprob: -12.500621795654297
    8. 'del' → logprob: -12.875621795654297
    9. 'a' → logprob: -13.000621795654297
    10. 'ator' → logprob: -13.000621795654297

Token 104: '.
' (ID: 558)
  Prédit: 'user'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'user' → logprob: -0.28877729177474976
    2. ')' → logprob: -2.1637773513793945
    3. ',' → logprob: -3.2887773513793945
    4. '.' → logprob: -3.6637773513793945
    5. '[user' → logprob: -4.2887773513793945
    6. '   ' → logprob: -4.4137773513793945
    7. 'tokens' → logprob: -4.5387773513793945
    8. '[' → logprob: -4.9137773513793945
    9. ' user' → logprob: -5.0387773513793945
    10. '.user' → logprob: -5.2887773513793945

Token 105: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.9500797390937805
    2. '    
' → logprob: -1.4500796794891357
    3. 'tokens' → logprob: -1.4500796794891357
    4. 'n' → logprob: -3.2000796794891357
    5. 'user' → logprob: -3.5750796794891357
    6. ' tokens' → logprob: -3.9500796794891357
    7. 's' → logprob: -4.200079917907715
    8. 'result' → logprob: -4.575079917907715
    9. '   
' → logprob: -5.075079917907715
    10. ' 
' → logprob: -5.200079917907715

Token 106: ' tokens' (ID: 20290)
  Prédit: 'tokens'
  Correct (stricte): False
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'tokens' (adapté à ' tokens') → logprob: -1.2123063802719116
    2. ' parts' → logprob: -1.7123063802719116
    3. 'numbers' → logprob: -1.7123063802719116
    4. ' numbers' → logprob: -1.7123063802719116
    5. ' tokens' → logprob: -2.337306499481201
    6. 'parts' → logprob: -3.212306499481201
    7. 'n' → logprob: -4.837306499481201
    8. 'nums' → logprob: -5.337306499481201
    9. 'values' → logprob: -5.962306499481201
    10. ' nums' → logprob: -6.587306499481201

Token 107: ' =' (ID: 314)
  Prédit: ' ='
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' =' → logprob: -0.4741164743900299
    2. '=' → logprob: -0.9741164445877075
    3. 's' → logprob: -11.474116325378418
    4. '.' → logprob: -11.724116325378418
    5. ')' → logprob: -12.474116325378418
    6. '_' → logprob: -12.599116325378418
    7. '[' → logprob: -12.599116325378418
    8. '(' → logprob: -12.849116325378418
    9. '=[]' → logprob: -13.224116325378418
    10. '[:]' → logprob: -13.474116325378418

Token 108: ' user' (ID: 1825)
  Prédit: ' user'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' user' → logprob: -0.3132622241973877
    2. 'user' → logprob: -1.3132622241973877
    3. '	user' → logprob: -15.438261985778809
    4. 'User' → logprob: -16.313262939453125
    5. '"user' → logprob: -16.563262939453125
    6. 'u' → logprob: -17.063262939453125
    7. ' ' → logprob: -17.438262939453125
    8. '(user' → logprob: -17.438262939453125
    9. '=user' → logprob: -17.938262939453125
    10. '[user' → logprob: -18.063262939453125

Token 109: '_input' (ID: 12507)
  Prédit: '_input'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_input' → logprob: -0.0005719788023270667
    2. '_' → logprob: -8.250572204589844
    3. '_put' → logprob: -9.125572204589844
    4. 'put' → logprob: -9.625572204589844
    5. '_tokens' → logprob: -10.125572204589844
    6. '_inputs' → logprob: -10.375572204589844
    7. '_in' → logprob: -10.875572204589844
    8. '_token' → logprob: -11.000572204589844
    9. 'input' → logprob: -11.750572204589844
    10. ' _' → logprob: -12.500572204589844

Token 110: '.split' (ID: 10347)
  Prédit: '.split'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '.split' → logprob: -0.5800177454948425
    2. '.' → logprob: -0.8300177454948425
    3. ' .' → logprob: -5.580017566680908
    4. '.strip' → logprob: -8.205018043518066
    5. '.s' → logprob: -10.955018043518066
    6. '   ' → logprob: -12.955018043518066
    7. 'split' → logprob: -13.580018043518066
    8. '.Split' → logprob: -13.955018043518066
    9. ' split' → logprob: -14.330018043518066
    10. '().' → logprob: -15.330018043518066

Token 111: '()
' (ID: 1234)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '(' → logprob: -0.3822886645793915
    2. '('' → logprob: -1.5072886943817139
    3. '()' → logprob: -2.382288694381714
    4. '("("' → logprob: -5.632288455963135
    5. '(
' → logprob: -9.382288932800293
    6. ''' → logprob: -10.132288932800293
    7. '(`' → logprob: -10.382288932800293
    8. '("' → logprob: -10.757288932800293
    9. ' (' → logprob: -11.382288932800293
    10. '(

' → logprob: -11.632288932800293

Token 112: '    
' (ID: 1944)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.4667573571205139
    2. '[' → logprob: -1.9667572975158691
    3. '    
' → logprob: -2.341757297515869
    4. ' ' → logprob: -2.716757297515869
    5. ' 
' → logprob: -3.841757297515869
    6. '\' → logprob: -4.591757297515869
    7. '  
' → logprob: -4.841757297515869
    8. '   
' → logprob: -4.966757297515869
    9. '    ' → logprob: -5.341757297515869
    10. '\n' → logprob: -5.966757297515869

Token 113: '   ' (ID: 271)
  Prédit: 'n'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'n' → logprob: -0.498348593711853
    2. 'a' → logprob: -1.623348593711853
    3. '#' → logprob: -2.1233487129211426
    4. 'x' → logprob: -3.7483487129211426
    5. '   ' → logprob: -3.8733487129211426
    6. 'i' → logprob: -4.373348712921143
    7. 'result' → logprob: -5.248348712921143
    8. '    
' → logprob: -5.748348712921143
    9. 'num' → logprob: -6.498348712921143
    10. 'r' → logprob: -6.998348712921143

Token 114: ' #' (ID: 1069)
  Prédit: 'a'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'a' → logprob: -0.03540310636162758
    2. '#' (adapté à ' #') → logprob: -3.91040301322937
    3. 'x' → logprob: -4.785403251647949
    4. 'if' → logprob: -5.535403251647949
    5. 'n' → logprob: -6.535403251647949
    6. 'num' → logprob: -7.535403251647949
    7. 'result' → logprob: -8.53540325164795
    8. 'first' → logprob: -9.53540325164795
    9. 'return' → logprob: -9.91040325164795
    10. 'numbers' → logprob: -10.28540325164795

Token 115: ' La' (ID: 3038)
  Prédit: 'a'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'a' → logprob: -0.671803891658783
    2. '#' → logprob: -1.0468039512634277
    3. 'if' → logprob: -2.6718039512634277
    4. 'n' → logprob: -3.4218039512634277
    5. 'x' → logprob: -4.546803951263428
    6. 'try' → logprob: -5.046803951263428
    7. ' a' → logprob: -5.421803951263428
    8. 'result' → logprob: -5.546803951263428
    9. 'numbers' → logprob: -5.546803951263428
    10. ' if' → logprob: -6.171803951263428

Token 116: ' fonction' (ID: 17610)
  Prédit: '#'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '#' → logprob: -0.9642347097396851
    2. ' first' → logprob: -1.714234709739685
    3. 'first' → logprob: -2.0892348289489746
    4. 'if' → logprob: -2.8392348289489746
    5. 'try' → logprob: -3.0892348289489746
    6. 's' → logprob: -3.3392348289489746
    7. 'n' → logprob: -3.4642348289489746
    8. 'a' → logprob: -3.5892348289489746
    9. ' try' → logprob: -3.9642348289489746
    10. ' if' → logprob: -4.089234828948975

Token 117: ' map' (ID: 4014)
  Prédit: ' int'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' int' → logprob: -0.050822146236896515
    2. 'int' → logprob: -3.1758222579956055
    3. ' map' → logprob: -5.9258222579956055
    4. ' tokens' → logprob: -6.0508222579956055
    5. ' len' → logprob: -6.4258222579956055
    6. '[int' → logprob: -8.425822257995605
    7. 'tokens' → logprob: -8.550822257995605
    8. ' list' → logprob: -8.800822257995605
    9. 'len' → logprob: -9.050822257995605
    10. ' print' → logprob: -9.050822257995605

Token 118: ' applique' (ID: 180579)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '(' → logprob: -0.04016872122883797
    2. '(int' → logprob: -3.2901687622070312
    3. '(str' → logprob: -6.915168762207031
    4. '(lambda' → logprob: -7.165168762207031
    5. '(
' → logprob: -8.040168762207031
    6. 'int' → logprob: -11.415168762207031
    7. '('' → logprob: -12.290168762207031
    8. '(float' → logprob: -12.290168762207031
    9. 'str' → logprob: -12.915168762207031
    10. '[int' → logprob: -13.165168762207031

Token 119: ' la' (ID: 557)
  Prédit: '(int'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '(int' → logprob: -0.0063259596936404705
    2. 'int' → logprob: -5.631325721740723
    3. '(' → logprob: -6.256325721740723
    4. ' int' → logprob: -7.381325721740723
    5. '(lambda' → logprob: -9.256325721740723
    6. '   ' → logprob: -10.131325721740723
    7. '(str' → logprob: -11.131325721740723
    8. '[int' → logprob: -11.881325721740723
    9. '```' → logprob: -12.381325721740723
    10. '<int' → logprob: -12.631325721740723

Token 120: ' fonction' (ID: 17610)
  Prédit: 'int'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'int' → logprob: -0.0338427908718586
    2. ' int' → logprob: -3.4088428020477295
    3. '   ' → logprob: -9.533843040466309
    4. 'lambda' → logprob: -9.533843040466309
    5. ' lambda' → logprob: -11.033843040466309
    6. 'str' → logprob: -11.158843040466309
    7. '(int' → logprob: -11.408843040466309
    8. ' str' → logprob: -13.158843040466309
    9. '=int' → logprob: -13.158843040466309
    10. ' ' → logprob: -13.533843040466309

Token 121: ' int' (ID: 677)
  Prédit: 'int'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'int' → logprob: -0.12866631150245667
    2. ' int' → logprob: -2.128666400909424
    3. '(int' → logprob: -6.378666400909424
    4. '=int' → logprob: -11.503665924072266
    5. '<int' → logprob: -11.628665924072266
    6. '```' → logprob: -12.003665924072266
    7. '   ' → logprob: -12.253665924072266
    8. '	int' → logprob: -12.878665924072266
    9. '[int' → logprob: -12.878665924072266
    10. ']int' → logprob: -13.753665924072266

Token 122: ' à' (ID: 1221)
  Prédit: '(int'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '(int' → logprob: -0.6008486747741699
    2. '(' → logprob: -1.10084867477417
    3. '(lambda' → logprob: -2.22584867477417
    4. ')' → logprob: -6.22584867477417
    5. '(tokens' → logprob: -6.35084867477417
    6. '   ' → logprob: -6.85084867477417
    7. '(
' → logprob: -6.97584867477417
    8. ' ' → logprob: -7.35084867477417
    9. 'tokens' → logprob: -7.35084867477417
    10. '()' → logprob: -7.60084867477417

Token 123: ' chaque' (ID: 21194)
  Prédit: ' chaque'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' chaque' → logprob: -0.5620240569114685
    2. 'tokens' → logprob: -1.3120241165161133
    3. ' tokens' → logprob: -1.9370241165161133
    4. ' each' → logprob: -4.312024116516113
    5. 'each' → logprob: -6.937024116516113
    6. ' chacun' → logprob: -7.312024116516113
    7. '(tokens' → logprob: -7.937024116516113
    8. ' chacune' → logprob: -7.937024116516113
    9. ' tous' → logprob: -8.312024116516113
    10. 't' → logprob: -8.312024116516113

Token 124: ' élément' (ID: 99627)
  Prédit: ' token'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' token' → logprob: -0.24534328281879425
    2. 'token' → logprob: -1.8703433275222778
    3. '(token' → logprob: -3.6203432083129883
    4. ' tokens' → logprob: -4.120343208312988
    5. 'tokens' → logprob: -4.495343208312988
    6. '(tokens' → logprob: -5.620343208312988
    7. 'élé' → logprob: -5.870343208312988
    8. ' élément' → logprob: -6.995343208312988
    9. ' element' → logprob: -7.245343208312988
    10. '(' → logprob: -7.370343208312988

Token 125: ' de' (ID: 334)
  Prédit: '(tokens'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '(tokens' → logprob: -0.08674950152635574
    2. '(' → logprob: -2.58674955368042
    3. 'tokens' → logprob: -5.83674955368042
    4. ' tokens' → logprob: -6.46174955368042
    5. ' des' → logprob: -6.58674955368042
    6. ' (' → logprob: -7.33674955368042
    7. 's' → logprob: -7.83674955368042
    8. ')' → logprob: -8.211749076843262
    9. '(
' → logprob: -8.461749076843262
    10. '(t' → logprob: -8.961749076843262

Token 126: ' la' (ID: 557)
  Prédit: 'tokens'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'tokens' → logprob: -0.3133338689804077
    2. ' tokens' → logprob: -1.3133338689804077
    3. '(tokens' → logprob: -9.563333511352539
    4. ' la' → logprob: -14.438333511352539
    5. '_tokens' → logprob: -14.688333511352539
    6. '.tokens' → logprob: -15.313333511352539
    7. 'token' → logprob: -15.313333511352539
    8. 't' → logprob: -15.313333511352539
    9. 'la' → logprob: -16.68833351135254
    10. ' ' → logprob: -17.43833351135254

Token 127: ' liste' (ID: 31719)
  Prédit: 'tokens'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'tokens' → logprob: -0.06263939291238785
    2. ' tokens' → logprob: -2.8126394748687744
    3. ' liste' → logprob: -8.187639236450195
    4. 'liste' → logprob: -8.187639236450195
    5. 'list' → logprob: -9.312639236450195
    6. '(tokens' → logprob: -11.062639236450195
    7. ' list' → logprob: -13.062639236450195
    8. 't' → logprob: -13.187639236450195
    9. 'token' → logprob: -13.562639236450195
    10. 's' → logprob: -13.562639236450195

Token 128: ' '' (ID: 461)
  Prédit: 'tokens'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'tokens' → logprob: -0.6103721857070923
    2. '(tokens' → logprob: -1.1103721857070923
    3. '(' → logprob: -2.7353720664978027
    4. ' tokens' → logprob: -2.8603720664978027
    5. ',' → logprob: -6.110372066497803
    6. ' (' → logprob: -6.360372066497803
    7. ')' → logprob: -7.235372066497803
    8. '_tokens' → logprob: -8.985372543334961
    9. '(
' → logprob: -9.235372543334961
    10. '(t' → logprob: -9.235372543334961

Token 129: 'tokens' (ID: 64329)
  Prédit: 'tokens'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'tokens' → logprob: -0.14272372424602509
    2. ' tokens' → logprob: -2.017723798751831
    3. '(tokens' → logprob: -10.01772403717041
    4. 'token' → logprob: -13.39272403717041
    5. '_tokens' → logprob: -14.39272403717041
    6. '.tokens' → logprob: -14.39272403717041
    7. 't' → logprob: -14.39272403717041
    8. 'Tokens' → logprob: -15.64272403717041
    9. ' ' → logprob: -15.64272403717041
    10. 'tok' → logprob: -16.017723083496094

Token 130: ''.
' (ID: 49980)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ')' → logprob: -0.010305128991603851
    2. ' )' → logprob: -4.885304927825928
    3. ',' → logprob: -6.135304927825928
    4. '(tokens' → logprob: -8.635305404663086
    5. 'tokens' → logprob: -9.760305404663086
    6. ' afin' → logprob: -10.010305404663086
    7. '),' → logprob: -10.385305404663086
    8. '   ' → logprob: -10.385305404663086
    9. ')`' → logprob: -10.510305404663086
    10. '')' → logprob: -10.510305404663086

Token 131: '   ' (ID: 271)
  Prédit: ' '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' ' → logprob: -0.15262192487716675
    2. ',' → logprob: -3.1526219844818115
    3. '(' → logprob: -3.6526219844818115
    4. ' 
' → logprob: -4.277621746063232
    5. ' ,' → logprob: -4.777621746063232
    6. ')' → logprob: -4.902621746063232
    7. '  
' → logprob: -5.152621746063232
    8. '    ' → logprob: -5.402621746063232
    9. ' )' → logprob: -5.527621746063232
    10. ' (' → logprob: -5.652621746063232

Token 132: ' #' (ID: 1069)
  Prédit: 'n'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'n' → logprob: -1.1579797267913818
    2. ' integers' → logprob: -2.032979726791382
    3. ' numbers' → logprob: -2.282979726791382
    4. ' x' → logprob: -2.407979726791382
    5. ' n' → logprob: -2.532979726791382
    6. ' result' → logprob: -3.157979726791382
    7. 'x' → logprob: -3.282979726791382
    8. 'result' → logprob: -3.532979726791382
    9. 'r' → logprob: -3.907979726791382
    10. '   ' → logprob: -3.907979726791382

Token 133: ' Cela' (ID: 44403)
  Prédit: ' numbers'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' numbers' → logprob: -0.18725064396858215
    2. 'numbers' → logprob: -2.3122506141662598
    3. 'nums' → logprob: -4.06225061416626
    4. ' nums' → logprob: -4.31225061416626
    5. ' a' → logprob: -4.81225061416626
    6. 'a' → logprob: -5.06225061416626
    7. ' result' → logprob: -5.31225061416626
    8. ' values' → logprob: -5.56225061416626
    9. 'n' → logprob: -5.56225061416626
    10. 'result' → logprob: -5.81225061416626

Token 134: ' convert' (ID: 8452)
  Prédit: ' permet'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' permet' → logprob: -0.2928769588470459
    2. ' convert' → logprob: -1.542876958847046
    3. ' transforme' → logprob: -3.917876958847046
    4. 'convert' → logprob: -4.667877197265625
    5. ' crée' → logprob: -5.542877197265625
    6. ' converts' → logprob: -6.542877197265625
    7. ' permettra' → logprob: -6.792877197265625
    8. 'per' → logprob: -7.167877197265625
    9. ' nous' → logprob: -7.167877197265625
    10. ' donne' → logprob: -7.542877197265625

Token 135: 'it' (ID: 278)
  Prédit: 'it'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'it' → logprob: -0.008582543581724167
    2. 't' → logprob: -5.633582592010498
    3. 'i' → logprob: -6.008582592010498
    4. 'e' → logprob: -6.508582592010498
    5. ' it' → logprob: -8.63358211517334
    6. '_it' → logprob: -8.63358211517334
    7. 'ie' → logprob: -9.13358211517334
    8. 'issez' → logprob: -9.13358211517334
    9. ' ' → logprob: -9.50858211517334
    10. 'ît' → logprob: -9.63358211517334

Token 136: ' chaque' (ID: 21194)
  Prédit: ' chaque'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' chaque' → logprob: -0.4010510742664337
    2. ' les' → logprob: -1.7760510444641113
    3. ' tokens' → logprob: -2.2760510444641113
    4. ' each' → logprob: -3.6510510444641113
    5. ' la' → logprob: -4.276051044464111
    6. 'tokens' → logprob: -4.401051044464111
    7. ' chacun' → logprob: -6.151051044464111
    8. ' tous' → logprob: -6.526051044464111
    9. 'each' → logprob: -7.776051044464111
    10. ' ' → logprob: -7.901051044464111

Token 137: ' sous' (ID: 14487)
  Prédit: 'élé'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'élé' → logprob: -0.3847246468067169
    2. ' élément' → logprob: -1.2597246170043945
    3. ' token' → logprob: -3.7597246170043945
    4. ' chaîne' → logprob: -4.8847246170043945
    5. 'token' → logprob: -6.1347246170043945
    6. ' element' → logprob: -6.8847246170043945
    7. ' ' → logprob: -7.8847246170043945
    8. 'chaine' → logprob: -8.009724617004395
    9. ' chaine' → logprob: -8.134724617004395
    10. ' string' → logprob: -8.509724617004395

Token 138: '-cha' (ID: 163177)
  Prédit: 'chaine'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'chaine' → logprob: -0.8265645503997803
    2. '_' → logprob: -1.0765645503997803
    3. ' chaîne' → logprob: -2.5765645503997803
    4. '   ' → logprob: -3.5765645503997803
    5. '_chain' → logprob: -3.5765645503997803
    6. '_tokens' → logprob: -3.9515645503997803
    7. '_str' → logprob: -4.326564788818359
    8. ' chaine' → logprob: -4.576564788818359
    9. '_token' → logprob: -4.701564788818359
    10. 'chain' → logprob: -4.951564788818359

Token 139: 'îne' (ID: 55188)
  Prédit: 'îne'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'îne' → logprob: -0.009610169567167759
    2. 'î' → logprob: -5.134610176086426
    3. 'ne' → logprob: -6.509610176086426
    4. 'ïne' → logprob: -6.634610176086426
    5. 'ine' → logprob: -7.509610176086426
    6. 'Î' → logprob: -9.759610176086426
    7. 'în' → logprob: -10.009610176086426
    8. 'înes' → logprob: -10.259610176086426
    9. '   ' → logprob: -10.634610176086426
    10. 'ì' → logprob: -10.759610176086426

Token 140: ' en' (ID: 469)
  Prédit: ' en'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' en' → logprob: -0.0064374222420156
    2. ' tokens' → logprob: -5.256437301635742
    3. ' ' → logprob: -8.131437301635742
    4. 'tokens' → logprob: -8.256437301635742
    5. 'en' → logprob: -8.381437301635742
    6. ' de' → logprob: -9.006437301635742
    7. ' into' → logprob: -10.006437301635742
    8. '(tokens' → logprob: -10.131437301635742
    9. ',' → logprob: -10.506437301635742
    10. '  ' → logprob: -10.631437301635742

Token 141: ' un' (ID: 537)
  Prédit: ' un'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' un' → logprob: -0.0025674565695226192
    2. ' des' → logprob: -6.127567291259766
    3. 'un' → logprob: -8.377567291259766
    4. ' entier' → logprob: -9.127567291259766
    5. ' une' → logprob: -11.002567291259766
    6. ' nombre' → logprob: -12.127567291259766
    7. 'ent' → logprob: -12.127567291259766
    8. ' int' → logprob: -12.252567291259766
    9. ' ent' → logprob: -12.877567291259766
    10. ' an' → logprob: -13.002567291259766

Token 142: ' entier' (ID: 80473)
  Prédit: ' entier'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' entier' → logprob: -0.6682612299919128
    2. 'ent' → logprob: -0.7932612299919128
    3. ' nombre' → logprob: -3.6682612895965576
    4. 'nombre' → logprob: -5.1682610511779785
    5. 'int' → logprob: -6.2932610511779785
    6. ' ent' → logprob: -6.5432610511779785
    7. ' int' → logprob: -8.668261528015137
    8. ' integer' → logprob: -9.043261528015137
    9. ' ' → logprob: -9.668261528015137
    10. '_ent' → logprob: -10.418261528015137

Token 143: '.
' (ID: 558)
  Prédit: ','
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ',' → logprob: -0.7827214598655701
    2. 's' → logprob: -1.2827215194702148
    3. ')' → logprob: -2.032721519470215
    4. '   ' → logprob: -2.657721519470215
    5. '(' → logprob: -4.032721519470215
    6. '.' → logprob: -4.657721519470215
    7. '(s' → logprob: -5.032721519470215
    8. ' ,' → logprob: -5.032721519470215
    9. ' )' → logprob: -5.282721519470215
    10. '()' → logprob: -5.532721519470215

Token 144: '   ' (ID: 271)
  Prédit: 'n'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'n' → logprob: -1.448196530342102
    2. ' ' → logprob: -1.948196530342102
    3. ' x' → logprob: -2.9481964111328125
    4. ' 
' → logprob: -2.9481964111328125
    5. '    
' → logprob: -3.0731964111328125
    6. 's' → logprob: -3.0731964111328125
    7. 'x' → logprob: -3.1981964111328125
    8. 'r' → logprob: -3.3231964111328125
    9. '   ' → logprob: -3.3231964111328125
    10. ',' → logprob: -3.4481964111328125

Token 145: ' a' (ID: 261)
  Prédit: ' numbers'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' numbers' → logprob: -0.42045438289642334
    2. ' a' → logprob: -1.7954543828964233
    3. 'a' (adapté à ' a') → logprob: -2.295454502105713
    4. 'numbers' → logprob: -3.295454502105713
    5. ' nums' → logprob: -4.670454502105713
    6. 'n' → logprob: -4.920454502105713
    7. 'nums' → logprob: -5.170454502105713
    8. ' n' → logprob: -5.920454502105713
    9. ' x' → logprob: -5.920454502105713
    10. ' result' → logprob: -6.045454502105713

Token 146: ',' (ID: 11)
  Prédit: ','
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ',' → logprob: -0.0009714908665046096
    2. ' ,' → logprob: -7.25097131729126
    3. ',b' → logprob: -8.375971794128418
    4. 's' → logprob: -11.500971794128418
    5. ' =' → logprob: -11.750971794128418
    6. ',a' → logprob: -12.125971794128418
    7. '=' → logprob: -12.750971794128418
    8. ',s' → logprob: -14.375971794128418
    9. ',int' → logprob: -14.375971794128418
    10. 'a' → logprob: -14.500971794128418

Token 147: ' b' (ID: 287)
  Prédit: ' b'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' b' → logprob: -0.023387448862195015
    2. 'b' → logprob: -3.7733874320983887
    3. ' ' → logprob: -8.898387908935547
    4. ' ' → logprob: -12.773387908935547
    5. '<|end|>' → logprob: -13.398387908935547
    6. '	b' → logprob: -15.148387908935547
    7. ' ' → logprob: -15.898387908935547
    8. '  ' → logprob: -16.273387908935547
    9. 's' → logprob: -16.648387908935547
    10. '```' → logprob: -16.648387908935547

Token 148: ' =' (ID: 314)
  Prédit: ' ='
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' =' → logprob: -0.011066564358770847
    2. '=' → logprob: -4.511066436767578
    3. ',' → logprob: -11.136066436767578
    4. ')' → logprob: -12.636066436767578
    5. ' =
' → logprob: -15.511066436767578
    6. ' ' → logprob: -15.511066436767578
    7. ')=' → logprob: -15.761066436767578
    8. '=int' → logprob: -16.261066436767578
    9. ' =
' → logprob: -17.136066436767578
    10. 's' → logprob: -17.323566436767578

Token 149: ' map' (ID: 4014)
  Prédit: ' map'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' map' → logprob: -0.01255039032548666
    2. 'map' → logprob: -4.387550354003906
    3. ' list' → logprob: -10.512550354003906
    4. ' ' → logprob: -12.262550354003906
    5. ' ' → logprob: -12.762550354003906
    6. '	map' → logprob: -12.887550354003906
    7. 'list' → logprob: -13.762550354003906
    8. ' ma' → logprob: -14.137550354003906
    9. 'm' → logprob: -14.262550354003906
    10. ' m' → logprob: -14.637550354003906

Token 150: '(int' (ID: 2742)
  Prédit: '(int'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(int' → logprob: -0.014179375022649765
    2. '(' → logprob: -4.264179229736328
    3. '<int' → logprob: -12.139179229736328
    4. ' (' → logprob: -12.764179229736328
    5. '(lambda' → logprob: -12.764179229736328
    6. '(
' → logprob: -13.014179229736328
    7. 'int' → logprob: -14.264179229736328
    8. '[int' → logprob: -14.389179229736328
    9. '(str' → logprob: -14.889179229736328
    10. '=int' → logprob: -15.014179229736328

Token 151: ',' (ID: 11)
  Prédit: '(tokens'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(tokens' → logprob: -0.5914952158927917
    2. ',' → logprob: -0.8414952158927917
    3. 'tokens' → logprob: -4.716495037078857
    4. ' ,' → logprob: -5.716495037078857
    5. ' tokens' → logprob: -6.216495037078857
    6. ')' → logprob: -7.591495037078857
    7. ',t' → logprob: -7.591495037078857
    8. ' (' → logprob: -9.591495513916016
    9. '(' → logprob: -10.091495513916016
    10. '(t' → logprob: -10.216495513916016

Token 152: ' tokens' (ID: 20290)
  Prédit: ' tokens'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' tokens' → logprob: -0.69339919090271
    2. 'tokens' → logprob: -0.69339919090271
    3. '(tokens' → logprob: -8.443399429321289
    4. ')' → logprob: -10.568399429321289
    5. '_tokens' → logprob: -11.818399429321289
    6. '.tokens' → logprob: -13.068399429321289
    7. 'token' → logprob: -13.818399429321289
    8. 'Tokens' → logprob: -16.19339942932129
    9. ' )' → logprob: -16.69339942932129
    10. ' token' → logprob: -16.69339942932129

Token 153: ')
' (ID: 446)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')' → logprob: -9.968312951968983e-06
    2. ' )' → logprob: -11.750009536743164
    3. '))' → logprob: -14.125009536743164
    4. ')
' → logprob: -14.750009536743164
    5. ')`' → logprob: -14.875009536743164
    6. '()' → logprob: -15.250009536743164
    7. '())' → logprob: -15.500009536743164
    8. '   ' → logprob: -16.875009536743164
    9. '")' → logprob: -17.500009536743164
    10. ' ' → logprob: -17.625009536743164

Token 154: '    
' (ID: 1944)
  Prédit: '
'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '
' → logprob: -0.6900630593299866
    2. '<|end|>' → logprob: -1.6900629997253418
    3. '    
' → logprob: -2.190062999725342
    4. '  
' → logprob: -2.190062999725342
    5. ' 
' → logprob: -3.690062999725342
    6. '   ' → logprob: -3.815062999725342
    7. '\n' → logprob: -3.815062999725342
    8. ')' → logprob: -5.190062999725342
    9. '   
' → logprob: -5.690062999725342
    10. '#' → logprob: -5.940062999725342

Token 155: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.47626182436943054
    2. '    
' → logprob: -1.101261854171753
    3. ' 
' → logprob: -4.226261615753174
    4. '
' → logprob: -4.601261615753174
    5. '  
' → logprob: -4.976261615753174
    6. ' return' → logprob: -5.351261615753174
    7. '   
' → logprob: -5.476261615753174
    8. 'result' → logprob: -6.851261615753174
    9. 'return' → logprob: -6.851261615753174
    10. 'print' → logprob: -7.101261615753174

Token 156: ' #' (ID: 1069)
  Prédit: 'result'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'result' → logprob: -0.3348448872566223
    2. 'print' → logprob: -1.4598448276519775
    3. '   ' → logprob: -3.8348448276519775
    4. 'c' → logprob: -4.584845066070557
    5. 'return' → logprob: -4.959845066070557
    6. '#' (adapté à ' #') → logprob: -5.584845066070557
    7. 'sum' → logprob: -5.584845066070557
    8. ' result' → logprob: -5.834845066070557
    9. ' print' → logprob: -6.834845066070557
    10. '    
' → logprob: -7.209845066070557

Token 157: ' On' (ID: 2160)
  Prédit: ' result'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' result' → logprob: -0.6948156356811523
    2. 'result' → logprob: -0.9448156356811523
    3. 'print' → logprob: -2.9448156356811523
    4. ' print' → logprob: -3.5698156356811523
    5. ' return' → logprob: -5.319815635681152
    6. '#' → logprob: -5.444815635681152
    7. ' somme' → logprob: -5.444815635681152
    8. 'sum' → logprob: -5.569815635681152
    9. ' sum' → logprob: -5.944815635681152
    10. 'return' → logprob: -5.944815635681152

Token 158: ' vér' (ID: 42524)
  Prédit: ' print'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' print' → logprob: -0.21320562064647675
    2. '   ' → logprob: -3.088205575942993
    3. 'print' → logprob: -3.088205575942993
    4. ' ' → logprob: -3.588205575942993
    5. ' #' → logprob: -3.588205575942993
    6. '#' → logprob: -4.338205814361572
    7. ' a' → logprob: -4.713205814361572
    8. ' return' → logprob: -5.213205814361572
    9. '    ' → logprob: -5.463205814361572
    10. ',' → logprob: -6.338205814361572

Token 159: 'ifie' (ID: 46409)
  Prédit: 'ifie'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'ifie' → logprob: -0.00020854694594163448
    2. 'ifier' → logprob: -8.750208854675293
    3. 'if' → logprob: -10.000208854675293
    4. 'ife' → logprob: -13.125208854675293
    5. 'ifiez' → logprob: -14.125208854675293
    6. 'i' → logprob: -14.375208854675293
    7. 'ify' → logprob: -14.625208854675293
    8. 'ifié' → logprob: -15.625208854675293
    9. '```' → logprob: -15.625208854675293
    10. '   ' → logprob: -15.750208854675293

Token 160: ' maintenant' (ID: 35735)
  Prédit: ' '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' ' → logprob: -0.2441093623638153
    2. ' if' → logprob: -2.4941093921661377
    3. '<|end|>' → logprob: -2.6191093921661377
    4. '  ' → logprob: -3.2441093921661377
    5. 'if' → logprob: -4.994109153747559
    6. 'a' → logprob: -5.869109153747559
    7. ' a' → logprob: -6.619109153747559
    8. 's' → logprob: -6.744109153747559
    9. '<|end|>' → logprob: -6.869109153747559
    10. ' (' → logprob: -6.869109153747559

Token 161: ' si' (ID: 1784)
  Prédit: ' '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' ' → logprob: -0.8940784335136414
    2. ' if' → logprob: -0.8940784335136414
    3. '<|end|>' → logprob: -2.394078493118286
    4. ' si' → logprob: -2.769078493118286
    5. '  ' → logprob: -4.894078254699707
    6. ' a' → logprob: -4.894078254699707
    7. 'a' → logprob: -6.019078254699707
    8. ' la' → logprob: -6.644078254699707
    9. ' whether' → logprob: -6.644078254699707
    10. ' que' → logprob: -6.644078254699707

Token 162: ' '' (ID: 461)
  Prédit: ' a'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' a' → logprob: -0.011387435719370842
    2. 'a' → logprob: -4.511387348175049
    3. ' b' → logprob: -8.136387825012207
    4. ' (' → logprob: -11.011387825012207
    5. ' ' → logprob: -11.636387825012207
    6. '	a' → logprob: -12.011387825012207
    7. 'b' → logprob: -12.136387825012207
    8. '(a' → logprob: -13.011387825012207
    9. ' ' → logprob: -13.511387825012207
    10. '<|end|>' → logprob: -13.511387825012207

Token 163: 'a' (ID: 64)
  Prédit: 'a'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'a' → logprob: -0.2532886266708374
    2. ' a' → logprob: -1.5032886266708374
    3. 'b' → logprob: -7.128288745880127
    4. ' b' → logprob: -7.628288745880127
    5. '(a' → logprob: -10.378288269042969
    6. ' (' → logprob: -10.753288269042969
    7. ' ' → logprob: -12.003288269042969
    8. '(' → logprob: -12.378288269042969
    9. '	a' → logprob: -12.753288269042969
    10. '_a' → logprob: -14.003288269042969

Token 164: ''' (ID: 6)
  Prédit: ' >'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' >' → logprob: -0.27285659313201904
    2. ' ==' → logprob: -2.8978567123413086
    3. '+' → logprob: -3.0228567123413086
    4. ' +' → logprob: -3.0228567123413086
    5. ' %' → logprob: -3.2728567123413086
    6. '>' → logprob: -4.022856712341309
    7. ' <' → logprob: -4.397856712341309
    8. '%' → logprob: -4.522856712341309
    9. '==' → logprob: -6.022856712341309
    10. ' *' → logprob: -6.772856712341309

Token 165: ' et' (ID: 859)
  Prédit: ' >'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' >' → logprob: -0.3960894048213959
    2. ' +' → logprob: -2.5210893154144287
    3. '+' → logprob: -2.6460893154144287
    4. ' %' → logprob: -3.1460893154144287
    5. ' <' → logprob: -3.2710893154144287
    6. '%' → logprob: -3.2710893154144287
    7. '>' → logprob: -3.7710893154144287
    8. ' ==' → logprob: -3.8960893154144287
    9. ' ' → logprob: -5.021089553833008
    10. '==' → logprob: -5.896089553833008

Token 166: ' '' (ID: 461)
  Prédit: ' b'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' b' → logprob: -0.1905195266008377
    2. 'b' → logprob: -2.0655195713043213
    3. ' '' → logprob: -3.4405195713043213
    4. ''' → logprob: -4.815519332885742
    5. ''b' → logprob: -5.065519332885742
    6. ' ' → logprob: -9.940519332885742
    7. ' ' → logprob: -10.565519332885742
    8. ''s' → logprob: -10.690519332885742
    9. '_b' → logprob: -10.815519332885742
    10. '_' → logprob: -10.940519332885742

Token 167: 'b' (ID: 65)
  Prédit: 'b'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'b' → logprob: -0.3486061096191406
    2. ' b' → logprob: -1.2236061096191406
    3. ''b' → logprob: -9.59860610961914
    4. ''' → logprob: -9.59860610961914
    5. ' '' → logprob: -11.22360610961914
    6. ')' → logprob: -13.22360610961914
    7. ' ' → logprob: -13.34860610961914
    8. 'a' → logprob: -13.84860610961914
    9. 's' → logprob: -13.97360610961914
    10. ')b' → logprob: -14.09860610961914

Token 168: ''' (ID: 6)
  Prédit: ' sont'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' sont' → logprob: -1.045987844467163
    2. ' ' → logprob: -1.295987844467163
    3. ' %' → logprob: -2.295987844467163
    4. ' >' → logprob: -2.670987844467163
    5. ' are' → logprob: -2.920987844467163
    6. '%' → logprob: -3.295987844467163
    7. ' ==' → logprob: -3.295987844467163
    8. ')' → logprob: -3.920987844467163
    9. ' )' → logprob: -4.045988082885742
    10. ' '' → logprob: -4.920988082885742

Token 169: ' sont' (ID: 5242)
  Prédit: ' are'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' are' → logprob: -0.9811127781867981
    2. ' sont' → logprob: -0.9811127781867981
    3. ' %' → logprob: -2.2311127185821533
    4. '%' → logprob: -3.2311127185821533
    5. ' ' → logprob: -3.2311127185821533
    6. '<|end|>' → logprob: -3.6061127185821533
    7. ' >' → logprob: -4.481112957000732
    8. ' is' → logprob: -5.106112957000732
    9. ' ==' → logprob: -5.606112957000732
    10. 'are' → logprob: -5.606112957000732

Token 170: ' tous' (ID: 10688)
  Prédit: ' ég'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' ég' → logprob: -0.15875431895256042
    2. ' des' → logprob: -2.658754348754883
    3. ' posit' → logprob: -3.658754348754883
    4. ' différents' → logprob: -4.783754348754883
    5. ' strictly' → logprob: -5.033754348754883
    6. 'strict' → logprob: -5.033754348754883
    7. ' eg' → logprob: -5.658754348754883
    8. ' positive' → logprob: -5.783754348754883
    9. ' strict' → logprob: -6.033754348754883
    10. 'ég' → logprob: -6.033754348754883

Token 171: ' les' (ID: 1341)
  Prédit: ' deux'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' deux' → logprob: -0.5521528124809265
    2. ' les' → logprob: -1.0521528720855713
    3. 'de' → logprob: -3.0521528720855713
    4. 'les' → logprob: -3.8021528720855713
    5. ' two' → logprob: -5.302152633666992
    6. ' ' → logprob: -9.052152633666992
    7. '   ' → logprob: -9.302152633666992
    8. '2' → logprob: -9.802152633666992
    9. 'two' → logprob: -9.927152633666992
    10. '_de' → logprob: -10.302152633666992

Token 172: ' deux' (ID: 10301)
  Prédit: 'de'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'de' → logprob: -0.44086822867393494
    2. ' deux' → logprob: -1.0658682584762573
    3. '2' → logprob: -4.940868377685547
    4. '   ' → logprob: -6.065868377685547
    5. '>' → logprob: -7.065868377685547
    6. ' two' → logprob: -8.315868377685547
    7. '```' → logprob: -8.565868377685547
    8. ' ' → logprob: -8.690868377685547
    9. 'ent' → logprob: -8.940868377685547
    10. 'two' → logprob: -9.065868377685547

Token 173: ' compris' (ID: 49173)
  Prédit: ' des'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' des' → logprob: -1.0377339124679565
    2. ' posit' → logprob: -1.1627339124679565
    3. 'posit' → logprob: -2.162734031677246
    4. 'strict' → logprob: -2.662734031677246
    5. 'des' → logprob: -3.287734031677246
    6. ' ég' → logprob: -3.287734031677246
    7. 'sup' → logprob: -3.662734031677246
    8. ' différents' → logprob: -4.537734031677246
    9. ' strict' → logprob: -5.037734031677246
    10. 'ég' → logprob: -5.287734031677246

Token 174: ' entre' (ID: 3853)
  Prédit: ' entre'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' entre' → logprob: -0.02771938219666481
    2. ' between' → logprob: -4.527719497680664
    3. 'entre' → logprob: -4.902719497680664
    4. ' ' → logprob: -5.027719497680664
    5. 'between' → logprob: -6.402719497680664
    6. ' dans' → logprob: -8.902719497680664
    7. ''entre' → logprob: -9.152719497680664
    8. 'ent' → logprob: -9.277719497680664
    9. '  ' → logprob: -9.777719497680664
    10. 'e' → logprob: -9.777719497680664

Token 175: ' ' (ID: 220)
  Prédit: '1'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '1' → logprob: -0.2383444905281067
    2. ' ' → logprob: -1.613344430923462
    3. '0' → logprob: -4.363344669342041
    4. '2' → logprob: -9.863344192504883
    5. '10' → logprob: -9.988344192504883
    6. '```' → logprob: -12.238344192504883
    7. '   ' → logprob: -13.363344192504883
    8. '100' → logprob: -13.800844192504883
    9. 'l' → logprob: -13.863344192504883
    10. '5' → logprob: -14.050844192504883

Token 176: '1' (ID: 16)
  Prédit: '1'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '1' → logprob: -0.07381787896156311
    2. '0' → logprob: -3.0738179683685303
    3. ' ' → logprob: -3.6988179683685303
    4. '2' → logprob: -9.19881820678711
    5. '-' → logprob: -10.32381820678711
    6. '10' → logprob: -11.19881820678711
    7. ' -' → logprob: -11.82381820678711
    8. '100' → logprob: -12.82381820678711
    9. '```' → logprob: -14.07381820678711
    10. '3' → logprob: -14.57381820678711

Token 177: ' et' (ID: 859)
  Prédit: ' et'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' et' → logprob: -0.7137939929962158
    2. ' and' → logprob: -1.3387939929962158
    3. 'et' → logprob: -1.5887939929962158
    4. 'and' → logprob: -3.838793992996216
    5. ' ' → logprob: -3.963793992996216
    6. '1' → logprob: -6.338793754577637
    7. '   ' → logprob: -7.463793754577637
    8. '0' → logprob: -8.088793754577637
    9. '  ' → logprob: -8.463793754577637
    10. '<|end|>' → logprob: -9.463793754577637

Token 178: ' ' (ID: 220)
  Prédit: ' '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' ' → logprob: -0.6123988032341003
    2. '100' → logprob: -1.4873988628387451
    3. '10' → logprob: -1.6123988628387451
    4. '9' → logprob: -3.487398862838745
    5. '20' → logprob: -7.112398624420166
    6. '99' → logprob: -8.112399101257324
    7. '50' → logprob: -8.237399101257324
    8. '999' → logprob: -9.112399101257324
    9. '6' → logprob: -9.237399101257324
    10. '5' → logprob: -9.237399101257324

Token 179: '9' (ID: 24)
  Prédit: '10'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '10' → logprob: -0.6794939041137695
    2. '100' → logprob: -0.8044939041137695
    3. ' ' → logprob: -3.5544939041137695
    4. '9' → logprob: -4.1794939041137695
    5. '20' → logprob: -7.5544939041137695
    6. '1' → logprob: -8.05449390411377
    7. '6' → logprob: -8.17949390411377
    8. '99' → logprob: -8.42949390411377
    9. '50' → logprob: -8.67949390411377
    10. '5' → logprob: -9.05449390411377

Token 180: ' inclus' (ID: 11891)
  Prédit: ','
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ',' → logprob: -0.8821564316749573
    2. '   ' → logprob: -1.0071563720703125
    3. ' ,' → logprob: -2.3821563720703125
    4. ' ' → logprob: -2.5071563720703125
    5. '.' → logprob: -4.5071563720703125
    6. ':' → logprob: -4.5071563720703125
    7. '  ' → logprob: -4.7571563720703125
    8. ' and' → logprob: -5.0071563720703125
    9. ' (' → logprob: -5.8821563720703125
    10. ' et' → logprob: -6.3821563720703125

Token 181: '.
' (ID: 558)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.04092343896627426
    2. ':' → logprob: -3.5409233570098877
    3. ' if' → logprob: -5.540923595428467
    4. ',' → logprob: -5.540923595428467
    5. '.' → logprob: -6.790923595428467
    6. '  ' → logprob: -7.790923595428467
    7. ' :' → logprob: -7.915923595428467
    8. 'if' → logprob: -7.915923595428467
    9. ' ' → logprob: -8.415923118591309
    10. ' ,' → logprob: -8.415923118591309

Token 182: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.653388500213623
    2. '
' → logprob: -0.903388500213623
    3. '    
' → logprob: -2.653388500213623
    4. ' 
' → logprob: -6.403388500213623
    5. '   
' → logprob: -7.028388500213623
    6. '  
' → logprob: -7.153388500213623
    7. ' if' → logprob: -8.278388977050781
    8. 'if' → logprob: -8.903388977050781
    9. '<|end|>' → logprob: -9.028388977050781
    10. '```' → logprob: -9.528388977050781

Token 183: ' #' (ID: 1069)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.015565960668027401
    2. '    
' → logprob: -5.015565872192383
    3. ' if' → logprob: -5.890565872192383
    4. 'if' → logprob: -5.890565872192383
    5. '    ' → logprob: -6.265565872192383
    6. ' 
' → logprob: -7.390565872192383
    7. '
' → logprob: -8.015565872192383
    8. '   
' → logprob: -8.890565872192383
    9. ' ' → logprob: -9.140565872192383
    10. '     
' → logprob: -9.390565872192383

Token 184: ' L' (ID: 451)
  Prédit: ' if'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' if' → logprob: -0.2693781852722168
    2. 'if' → logprob: -2.019378185272217
    3. '   ' → logprob: -2.269378185272217
    4. ' for' → logprob: -11.269378662109375
    5. '    ' → logprob: -11.394378662109375
    6. 'for' → logprob: -12.394378662109375
    7. '	if' → logprob: -13.769378662109375
    8. ' ' → logprob: -14.019378662109375
    9. '
' → logprob: -14.894378662109375
    10. '  ' → logprob: -15.269378662109375

Token 185: ''op' (ID: 70747)
  Prédit: 'if'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'if' → logprob: -0.6072500348091125
    2. 'e' → logprob: -1.2322499752044678
    3. ' if' → logprob: -2.8572499752044678
    4. '   ' → logprob: -2.9822499752044678
    5. 'a' → logprob: -3.7322499752044678
    6. 'es' → logprob: -4.107250213623047
    7. ' ' → logprob: -5.357250213623047
    8. ''' → logprob: -5.982250213623047
    9. ' a' → logprob: -6.107250213623047
    10. 'ine' → logprob: -6.482250213623047

Token 186: 'érateur' (ID: 108528)
  Prédit: 'if'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'if' → logprob: -0.36002346873283386
    2. 'ur' → logprob: -1.6100234985351562
    3. 'u' → logprob: -3.2350234985351562
    4. 'er' → logprob: -3.9850234985351562
    5. 'urs' → logprob: -4.485023498535156
    6. 'def' → logprob: -5.110023498535156
    7. 'ér' → logprob: -5.485023498535156
    8. ' if' → logprob: -5.610023498535156
    9. 'our' → logprob: -5.860023498535156
    10. 'a' → logprob: -5.985023498535156

Token 187: ' <=' (ID: 5017)
  Prédit: ' if'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' if' → logprob: -0.3503718674182892
    2. 'if' → logprob: -1.2253718376159668
    3. 'and' → logprob: -6.600371837615967
    4. ' and' → logprob: -8.600372314453125
    5. ' ' → logprob: -8.725372314453125
    6. ' not' → logprob: -10.350372314453125
    7. ' a' → logprob: -10.350372314453125
    8. ' et' → logprob: -10.600372314453125
    9. 'et' → logprob: -11.225372314453125
    10. '   ' → logprob: -11.600372314453125

Token 188: ' signifie' (ID: 81149)
  Prédit: ' a'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' a' → logprob: -0.09489782154560089
    2. ' if' → logprob: -3.094897747039795
    3. 'a' → logprob: -3.969897747039795
    4. ' ' → logprob: -4.469897747039795
    5. 'if' → logprob: -4.719897747039795
    6. '1' → logprob: -5.719897747039795
    7. ' (' → logprob: -7.094897747039795
    8. ' and' → logprob: -7.094897747039795
    9. ' b' → logprob: -8.844898223876953
    10. 'and' → logprob: -9.094898223876953

Token 189: ' "' (ID: 392)
  Prédit: ' a'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' a' → logprob: -0.7792928814888
    2. ' ' → logprob: -1.7792928218841553
    3. '1' → logprob: -2.0292928218841553
    4. 'a' → logprob: -2.6542928218841553
    5. ' "' → logprob: -2.7792928218841553
    6. ' que' → logprob: -2.7792928218841553
    7. ' '' → logprob: -3.9042928218841553
    8. '"' → logprob: -5.779293060302734
    9. ' and' → logprob: -5.779293060302734
    10. ' that' → logprob: -5.904293060302734

Token 190: 'inf' (ID: 22226)
  Prédit: ' a'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' a' → logprob: -0.4564128518104553
    2. 'a' → logprob: -1.2064127922058105
    3. '1' → logprob: -3.9564127922058105
    4. ' ' → logprob: -4.0814127922058105
    5. '<=' → logprob: -4.3314127922058105
    6. '=' → logprob: -4.8314127922058105
    7. ' <=' → logprob: -4.8314127922058105
    8. ' """' → logprob: -8.456413269042969
    9. 'b' → logprob: -8.581413269042969
    10. ' and' → logprob: -8.956413269042969

Token 191: 'érieur' (ID: 24251)
  Prédit: 'érieur'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'érieur' → logprob: -0.010950785130262375
    2. 'érieure' → logprob: -5.135950565338135
    3. 'er' → logprob: -6.510950565338135
    4. 'ér' → logprob: -6.760950565338135
    5. 'é' → logprob: -7.135950565338135
    6. 'érie' → logprob: -7.385950565338135
    7. 'érieurs' → logprob: -7.885950565338135
    8. 'érieures' → logprob: -8.635951042175293
    9. 'éré' → logprob: -9.260951042175293
    10. 'éri' → logprob: -9.510951042175293

Token 192: ' ou' (ID: 2031)
  Prédit: '='
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '=' → logprob: -0.03867177665233612
    2. ' ou' → logprob: -3.4136717319488525
    3. ' =' → logprob: -6.038671970367432
    4. 'ou' → logprob: -6.913671970367432
    5. ' or' → logprob: -7.038671970367432
    6. 'or' → logprob: -9.163671493530273
    7. ' et' → logprob: -9.288671493530273
    8. '="' → logprob: -9.413671493530273
    9. '=""' → logprob: -9.538671493530273
    10. ' ' → logprob: -9.663671493530273

Token 193: ' égal' (ID: 15059)
  Prédit: '='
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '=' → logprob: -0.5169478058815002
    2. ' égal' → logprob: -1.5169477462768555
    3. 'égal' → logprob: -1.8919477462768555
    4. ' ég' → logprob: -4.1419477462768555
    5. 'ou' → logprob: -4.3919477462768555
    6. 'egal' → logprob: -6.0169477462768555
    7. ' ou' → logprob: -7.5169477462768555
    8. ' egal' → logprob: -7.6419477462768555
    9. 'égalité' → logprob: -7.6419477462768555
    10. 'equal' → logprob: -7.8919477462768555

Token 194: ' à' (ID: 1221)
  Prédit: ' à'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' à' → logprob: -0.045576080679893494
    2. 'à' → logprob: -3.2955760955810547
    3. '"' → logprob: -5.295576095581055
    4. ' ' → logprob: -6.920576095581055
    5. ' a' → logprob: -7.670576095581055
    6. ''à' → logprob: -7.670576095581055
    7. 'a' → logprob: -8.295576095581055
    8. '")' → logprob: -9.170576095581055
    9. '">' → logprob: -10.170576095581055
    10. ' "' → logprob: -10.670576095581055

Token 195: '",
' (ID: 1150)
  Prédit: '"'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '"' → logprob: -0.0998755469918251
    2. ' ' → logprob: -2.8498754501342773
    3. ' "' → logprob: -4.599875450134277
    4. ' à' → logprob: -4.724875450134277
    5. ' a' → logprob: -5.474875450134277
    6. '9' → logprob: -5.474875450134277
    7. '".' → logprob: -5.724875450134277
    8. '">' → logprob: -5.974875450134277
    9. '7' → logprob: -7.474875450134277
    10. '10' → logprob: -7.474875450134277

Token 196: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.7088316082954407
    2. ' if' → logprob: -0.7088316082954407
    3. 'if' → logprob: -4.208831787109375
    4. '  ' → logprob: -8.958831787109375
    5. '    ' → logprob: -8.958831787109375
    6. ' ' → logprob: -9.458831787109375
    7. ' et' → logprob: -9.583831787109375
    8. '    
' → logprob: -9.583831787109375
    9. ' and' → logprob: -9.833831787109375
    10. '1' → logprob: -10.458831787109375

Token 197: ' #' (ID: 1069)
  Prédit: ' if'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' if' → logprob: -0.14606471359729767
    2. 'if' → logprob: -2.0210647583007812
    3. '   ' → logprob: -6.521064758300781
    4. ' and' → logprob: -6.896064758300781
    5. ' et' → logprob: -8.021064758300781
    6. ' ' → logprob: -8.896064758300781
    7. 'def' → logprob: -9.146064758300781
    8. 'and' → logprob: -9.271064758300781
    9. '1' → logprob: -9.771064758300781
    10. ' a' → logprob: -10.021064758300781

Token 198: ' donc' (ID: 14206)
  Prédit: ' if'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' if' → logprob: -0.1272691935300827
    2. 'if' → logprob: -2.1272692680358887
    3. '   ' → logprob: -8.75226879119873
    4. ' a' → logprob: -9.87726879119873
    5. ' ' → logprob: -10.50226879119873
    6. ' and' → logprob: -10.87726879119873
    7. ' #' → logprob: -11.50226879119873
    8. ' si' → logprob: -11.62726879119873
    9. '    ' → logprob: -11.87726879119873
    10. 'def' → logprob: -12.00226879119873

Token 199: ' ' (ID: 220)
  Prédit: ' if'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' if' → logprob: -0.15031719207763672
    2. 'if' → logprob: -2.5253171920776367
    3. '1' → logprob: -3.0253171920776367
    4. ' ' → logprob: -4.525317192077637
    5. ' si' → logprob: -9.525317192077637
    6. ' a' → logprob: -10.025317192077637
    7. '   ' → logprob: -11.025317192077637
    8. ' (' → logprob: -11.650317192077637
    9. '  ' → logprob: -12.525317192077637
    10. ' ' → logprob: -12.525317192077637

Token 200: '1' (ID: 16)
  Prédit: '1'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '1' → logprob: -0.14608365297317505
    2. 'if' → logprob: -2.6460835933685303
    3. ' ' → logprob: -3.2710835933685303
    4. ' if' → logprob: -3.6460835933685303
    5. '(' → logprob: -7.771083831787109
    6. ' (' → logprob: -8.14608383178711
    7. 'a' → logprob: -8.89608383178711
    8. '   ' → logprob: -10.77108383178711
    9. ' a' → logprob: -10.77108383178711
    10. '  ' → logprob: -11.89608383178711

Token 201: '<=' (ID: 16672)
  Prédit: ' <='
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' <=' → logprob: -0.005244783591479063
    2. '<=' → logprob: -5.255244731903076
    3. ' ' → logprob: -12.380245208740234
    4. ' ' → logprob: -13.380245208740234
    5. ' ≤' → logprob: -13.380245208740234
    6. ' <' → logprob: -14.130245208740234
    7. 'le' → logprob: -14.630245208740234
    8. '1' → logprob: -14.880245208740234
    9. '```' → logprob: -15.005245208740234
    10. 'and' → logprob: -15.255245208740234

Token 202: 'a' (ID: 64)
  Prédit: 'a'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'a' → logprob: -0.08894198387861252
    2. ' a' → logprob: -2.463942050933838
    3. ' ' → logprob: -13.83894157409668
    4. '	a' → logprob: -13.83894157409668
    5. ' ' → logprob: -15.58894157409668
    6. '1' → logprob: -16.21394157409668
    7. '   ' → logprob: -16.96394157409668
    8. '(a' → logprob: -16.96394157409668
    9. 'b' → logprob: -17.21394157409668
    10. '<=' → logprob: -17.58894157409668

Token 203: '<=' (ID: 16672)
  Prédit: ' and'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' and' → logprob: -0.2552454173564911
    2. ' <=' → logprob: -1.7552454471588135
    3. 'and' → logprob: -3.1302454471588135
    4. '<=' → logprob: -4.755245208740234
    5. ' ' → logprob: -10.755245208740234
    6. ')' → logprob: -11.005245208740234
    7. 'a' → logprob: -11.380245208740234
    8. '```' → logprob: -11.630245208740234
    9. '   ' → logprob: -11.755245208740234
    10. ' ' → logprob: -12.005245208740234

Token 204: '9' (ID: 24)
  Prédit: '9'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '9' → logprob: -0.000588417868129909
    2. ' ' → logprob: -7.500588417053223
    3. 'b' → logprob: -10.500588417053223
    4. 'a' → logprob: -12.000588417053223
    5. ' b' → logprob: -13.875588417053223
    6. '1' → logprob: -14.625588417053223
    7. ' a' → logprob: -16.37558937072754
    8. '   ' → logprob: -16.62558937072754
    9. '```' → logprob: -17.00058937072754
    10. '7' → logprob: -17.12558937072754

Token 205: ' vér' (ID: 42524)
  Prédit: ' and'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' and' → logprob: -0.021549489349126816
    2. 'and' → logprob: -3.8965494632720947
    3. '   ' → logprob: -7.396549701690674
    4. ' et' → logprob: -8.271549224853516
    5. ' if' → logprob: -10.146549224853516
    6. 'et' → logprob: -10.396549224853516
    7. ' ' → logprob: -10.521549224853516
    8. 'if' → logprob: -10.771549224853516
    9. ' a' → logprob: -12.021549224853516
    10. '    ' → logprob: -12.146549224853516

Token 206: 'ifie' (ID: 46409)
  Prédit: 'ifie'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'ifie' → logprob: -0.09304075688123703
    2. 'if' → logprob: -2.718040704727173
    3. '```' → logprob: -4.343040943145752
    4. 'ifiant' → logprob: -6.718040943145752
    5. '_' → logprob: -6.968040943145752
    6. '1' → logprob: -7.093040943145752
    7. '   ' → logprob: -7.218040943145752
    8. '#' → logprob: -7.343040943145752
    9. 'ifié' → logprob: -7.343040943145752
    10. '<' → logprob: -7.718040943145752

Token 207: ' que' (ID: 661)
  Prédit: ' que'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' que' → logprob: -0.41701197624206543
    2. ' if' → logprob: -1.2920119762420654
    3. ' si' → logprob: -2.7920119762420654
    4. 'if' → logprob: -6.4170122146606445
    5. 'que' → logprob: -7.1670122146606445
    6. ' that' → logprob: -7.1670122146606445
    7. ' ' → logprob: -7.4170122146606445
    8. 'si' → logprob: -7.6670122146606445
    9. ' a' → logprob: -7.9170122146606445
    10. ' ' → logprob: -9.292012214660645

Token 208: ' '' (ID: 461)
  Prédit: ' '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' ' → logprob: -0.8725066781044006
    2. ' a' → logprob: -1.1225066184997559
    3. '1' → logprob: -1.7475066184997559
    4. 'a' → logprob: -2.497506618499756
    5. ' (' → logprob: -9.872507095336914
    6. ' ' → logprob: -9.997507095336914
    7. '(' → logprob: -11.747507095336914
    8. '  ' → logprob: -11.872507095336914
    9. '   ' → logprob: -11.997507095336914
    10. '(a' → logprob: -12.497507095336914

Token 209: 'a' (ID: 64)
  Prédit: 'a'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'a' → logprob: -0.020580196753144264
    2. ' a' → logprob: -3.895580291748047
    3. '1' → logprob: -10.270580291748047
    4. ' ' → logprob: -12.770580291748047
    5. '   ' → logprob: -15.145580291748047
    6. '	a' → logprob: -15.145580291748047
    7. '9' → logprob: -15.645580291748047
    8. ' ' → logprob: -16.145580291748047
    9. '(a' → logprob: -17.020580291748047
    10. '  ' → logprob: -17.145580291748047

Token 210: ''' (ID: 6)
  Prédit: ' and'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' and' → logprob: -0.32264164090156555
    2. ' <=' → logprob: -1.6976416110992432
    3. '<=' → logprob: -2.697641611099243
    4. 'and' → logprob: -3.822641611099243
    5. ''' → logprob: -6.697641849517822
    6. '>=' → logprob: -7.072641849517822
    7. ' >=' → logprob: -7.947641849517822
    8. ' et' → logprob: -8.322641372680664
    9. 'et' → logprob: -8.697641372680664
    10. '1' → logprob: -8.947641372680664

Token 211: ' n' (ID: 297)
  Prédit: ' and'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' and' → logprob: -0.04001617431640625
    2. 'and' → logprob: -3.2900161743164062
    3. ' <=' → logprob: -6.915016174316406
    4. '<=' → logprob: -7.165016174316406
    5. ' is' → logprob: -9.665016174316406
    6. '>=' → logprob: -9.915016174316406
    7. 'et' → logprob: -10.290016174316406
    8. ' et' → logprob: -10.540016174316406
    9. ' >=' → logprob: -11.415016174316406
    10. ' ' → logprob: -11.540016174316406

Token 212: ''est' (ID: 6616)
  Prédit: ' >='
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' >=' → logprob: -0.6083140969276428
    2. '>=' → logprob: -0.9833140969276428
    3. ' <=' → logprob: -2.983314037322998
    4. '<=' → logprob: -3.858314037322998
    5. ' est' → logprob: -6.233314037322998
    6. '>' → logprob: -6.733314037322998
    7. ' is' → logprob: -6.858314037322998
    8. ' a' → logprob: -6.858314037322998
    9. ' and' → logprob: -6.983314037322998
    10. ' ' → logprob: -7.233314037322998

Token 213: ' pas' (ID: 2173)
  Prédit: ' pas'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' pas' → logprob: -0.16924993693828583
    2. 'pas' → logprob: -2.044250011444092
    3. '1' → logprob: -4.169250011444092
    4. ' compris' → logprob: -4.919250011444092
    5. 'au' → logprob: -7.294250011444092
    6. '>' → logprob: -7.544250011444092
    7. ' que' → logprob: -7.669250011444092
    8. '>=' → logprob: -8.294249534606934
    9. ' jamais' → logprob: -8.794249534606934
    10. ' >=' → logprob: -8.919249534606934

Token 214: ' plus' (ID: 2932)
  Prédit: ' inférieur'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' inférieur' → logprob: -0.10109477490186691
    2. '1' → logprob: -3.1010947227478027
    3. ' inf' → logprob: -3.9760947227478027
    4. ' en' → logprob: -4.726094722747803
    5. 'inf' → logprob: -4.976094722747803
    6. '<' → logprob: -5.476094722747803
    7. ' <' → logprob: -5.976094722747803
    8. '0' → logprob: -6.226094722747803
    9. ' moins' → logprob: -6.476094722747803
    10. ' ' → logprob: -6.476094722747803

Token 215: ' petit' (ID: 20577)
  Prédit: ' petit'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' petit' → logprob: -0.21024198830127716
    2. 'pet' → logprob: -2.3352420330047607
    3. 'grand' → logprob: -2.5852420330047607
    4. ' grand' → logprob: -4.335241794586182
    5. '  ' → logprob: -6.585241794586182
    6. '   ' → logprob: -6.710241794586182
    7. ' petite' → logprob: -8.21024227142334
    8. '1' → logprob: -8.33524227142334
    9. 'de' → logprob: -8.46024227142334
    10. ' bas' → logprob: -9.21024227142334

Token 216: ' que' (ID: 661)
  Prédit: ' que'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' que' → logprob: -1.082879900932312
    2. 'et' → logprob: -1.707879900932312
    3. '   ' → logprob: -2.0828800201416016
    4. ' ou' → logprob: -2.5828800201416016
    5. 'and' → logprob: -2.8328800201416016
    6. 'ou' → logprob: -2.8328800201416016
    7. ' et' → logprob: -3.0828800201416016
    8. ' or' → logprob: -3.4578800201416016
    9. 'def' → logprob: -3.9578800201416016
    10. '1' → logprob: -4.082880020141602

Token 217: ' ' (ID: 220)
  Prédit: '1'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '1' → logprob: -0.006052040029317141
    2. ' ' → logprob: -5.131052017211914
    3. '9' → logprob: -9.006052017211914
    4. '   ' → logprob: -14.881052017211914
    5. ' ' → logprob: -15.756052017211914
    6. '  ' → logprob: -16.631052017211914
    7. '```' → logprob: -16.631052017211914
    8. '10' → logprob: -17.256052017211914
    9. '0' → logprob: -17.506052017211914
    10. 'a' → logprob: -17.756052017211914

Token 218: '1' (ID: 16)
  Prédit: '1'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '1' → logprob: -1.676292231422849e-05
    2. ' ' → logprob: -11.000017166137695
    3. '```' → logprob: -18.125017166137695
    4. ' ' → logprob: -19.125017166137695
    5. '  ' → logprob: -19.625017166137695
    6. '１' → logprob: -19.875017166137695
    7. '   ' → logprob: -19.875017166137695
    8. '0' → logprob: -20.375017166137695
    9. 'un' → logprob: -20.500017166137695
    10. 'a' → logprob: -20.750017166137695

Token 219: ' et' (ID: 859)
  Prédit: ' and'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' and' → logprob: -0.0523897223174572
    2. 'and' → logprob: -3.802389621734619
    3. ' et' → logprob: -4.177389621734619
    4. '   ' → logprob: -4.677389621734619
    5. 'et' → logprob: -5.677389621734619
    6. ' if' → logprob: -8.552390098571777
    7. ',' → logprob: -8.927390098571777
    8. ' ' → logprob: -9.677390098571777
    9. ' a' → logprob: -10.302390098571777
    10. ' <=' → logprob: -10.427390098571777

Token 220: ' pas' (ID: 2173)
  Prédit: ' pas'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' pas' → logprob: -0.11310148239135742
    2. '9' → logprob: -2.8631014823913574
    3. 'pas' → logprob: -3.9881014823913574
    4. ' ' → logprob: -4.238101482391357
    5. ' not' → logprob: -5.613101482391357
    6. '1' → logprob: -5.738101482391357
    7. ' que' → logprob: -6.238101482391357
    8. '   ' → logprob: -6.363101482391357
    9. ' plus' → logprob: -6.738101482391357
    10. ' ni' → logprob: -6.863101482391357

Token 221: ' plus' (ID: 2932)
  Prédit: ' plus'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' plus' → logprob: -0.1291143000125885
    2. 'plus' → logprob: -2.8791143894195557
    3. ' larger' → logprob: -3.5041143894195557
    4. '   ' → logprob: -3.8791143894195557
    5. 'larg' → logprob: -6.004114151000977
    6. ' ' → logprob: -6.379114151000977
    7. ' supérieur' → logprob: -6.629114151000977
    8. ' greater' → logprob: -6.754114151000977
    9. ' bigger' → logprob: -6.879114151000977
    10. '  ' → logprob: -7.254114151000977

Token 222: ' grand' (ID: 6363)
  Prédit: 'grand'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'grand' → logprob: -0.10109607875347137
    2. ' grand' → logprob: -2.3510961532592773
    3. 'pet' → logprob: -7.476096153259277
    4. ' petit' → logprob: -9.476096153259277
    5. 'gr' → logprob: -9.851096153259277
    6. '   ' → logprob: -9.976096153259277
    7. 'large' → logprob: -10.226096153259277
    8. 'g' → logprob: -10.476096153259277
    9. ' grande' → logprob: -10.851096153259277
    10. ' gros' → logprob: -11.101096153259277

Token 223: ' que' (ID: 661)
  Prédit: ' que'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' que' → logprob: -0.046040408313274384
    2. 'que' → logprob: -3.4210402965545654
    3. '   ' → logprob: -4.9210405349731445
    4. ' than' → logprob: -5.4210405349731445
    5. ' ni' → logprob: -8.296040534973145
    6. '```' → logprob: -9.171040534973145
    7. ' ou' → logprob: -9.671040534973145
    8. 'than' → logprob: -10.046040534973145
    9. '  ' → logprob: -10.171040534973145
    10. ',' → logprob: -10.921040534973145

Token 224: ' ' (ID: 220)
  Prédit: '9'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '9' → logprob: -0.05490123853087425
    2. ' ' → logprob: -2.929901123046875
    3. '   ' → logprob: -11.054901123046875
    4. '  ' → logprob: -14.179901123046875
    5. '```' → logprob: -14.554901123046875
    6. ' ' → logprob: -14.867401123046875
    7. 'b' → logprob: -15.492401123046875
    8. '`' → logprob: -15.554901123046875
    9. ' b' → logprob: -15.679901123046875
    10. 'a' → logprob: -15.742401123046875

Token 225: '9' (ID: 24)
  Prédit: '9'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '9' → logprob: -0.0036017363891005516
    2. ' ' → logprob: -5.628601551055908
    3. '   ' → logprob: -14.628602027893066
    4. '99' → logprob: -15.128602027893066
    5. '999' → logprob: -15.628602027893066
    6. '```' → logprob: -15.628602027893066
    7. '  ' → logprob: -16.00360107421875
    8. '`' → logprob: -16.31610107421875
    9. '９' → logprob: -16.62860107421875
    10. 'b' → logprob: -16.94110107421875

Token 226: '.
' (ID: 558)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.01248858217149973
    2. '    
' → logprob: -5.38748836517334
    3. ' if' → logprob: -5.63748836517334
    4. 'if' → logprob: -5.76248836517334
    5. ',' → logprob: -7.13748836517334
    6. '.' → logprob: -8.88748836517334
    7. '    ' → logprob: -10.13748836517334
    8. ' and' → logprob: -10.63748836517334
    9. 'def' → logprob: -11.01248836517334
    10. '   
' → logprob: -11.01248836517334

Token 227: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.3965136408805847
    2. 'if' → logprob: -1.1465137004852295
    3. ' if' → logprob: -4.64651346206665
    4. '    
' → logprob: -14.771513938903809
    5. '```' → logprob: -14.896513938903809
    6. '	if' → logprob: -15.021513938903809
    7. '    ' → logprob: -16.396512985229492
    8. '  ' → logprob: -16.896512985229492
    9. '
' → logprob: -17.771512985229492
    10. '   ' → logprob: -17.896512985229492

Token 228: ' #' (ID: 1069)
  Prédit: 'if'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'if' → logprob: -0.007415305357426405
    2. ' if' → logprob: -5.382415294647217
    3. '   ' → logprob: -5.882415294647217
    4. '```' → logprob: -13.757415771484375
    5. ' ' → logprob: -14.382415771484375
    6. '	if' → logprob: -14.757415771484375
    7. 'If' → logprob: -15.132415771484375
    8. '    
' → logprob: -15.382415771484375
    9. 'i' → logprob: -15.507415771484375
    10. '  ' → logprob: -15.757415771484375

Token 229: ' Id' (ID: 8210)
  Prédit: 'if'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'if' → logprob: -0.03012370690703392
    2. ' if' → logprob: -3.530123710632324
    3. '   ' → logprob: -7.905123710632324
    4. '```' → logprob: -13.655123710632324
    5. 'If' → logprob: -14.030123710632324
    6. 'result' → logprob: -14.030123710632324
    7. '    
' → logprob: -14.905123710632324
    8. ' ' → logprob: -15.280123710632324
    9. '	if' → logprob: -15.530123710632324
    10. '  ' → logprob: -15.780123710632324

Token 230: 'em' (ID: 347)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.223772794008255
    2. 'if' → logprob: -1.7237727642059326
    3. 'f' → logprob: -4.098773002624512
    4. ' if' → logprob: -5.598773002624512
    5. 'def' → logprob: -6.848773002624512
    6. 'e' → logprob: -8.848773002624512
    7. 'a' → logprob: -9.098773002624512
    8. '
' → logprob: -9.223773002624512
    9. 'éc' → logprob: -10.098773002624512
    10. ' ' → logprob: -10.223773002624512

Token 231: ' pour' (ID: 1930)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.23591956496238708
    2. ' pour' → logprob: -2.36091947555542
    3. ' for' → logprob: -2.86091947555542
    4. ' if' → logprob: -3.86091947555542
    5. 'for' → logprob: -3.98591947555542
    6. 'if' → logprob: -4.73591947555542
    7. 'pour' → logprob: -4.98591947555542
    8. '  ' → logprob: -7.11091947555542
    9. '    
' → logprob: -7.48591947555542
    10. '
' → logprob: -7.61091947555542

Token 232: ' '' (ID: 461)
  Prédit: '1'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '1' → logprob: -0.27414748072624207
    2. ' ' → logprob: -2.0241475105285645
    3. 'b' → logprob: -2.3991475105285645
    4. ' b' → logprob: -4.1491475105285645
    5. '   ' → logprob: -6.8991475105285645
    6. '  ' → logprob: -10.524147033691406
    7. '(' → logprob: -10.649147033691406
    8. ' (' → logprob: -11.274147033691406
    9. '    ' → logprob: -11.899147033691406
    10. 'a' → logprob: -12.399147033691406

Token 233: 'b' (ID: 65)
  Prédit: 'b'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'b' → logprob: -0.02072242833673954
    2. ' b' → logprob: -3.8957223892211914
    3. 'a' → logprob: -9.020722389221191
    4. '   ' → logprob: -10.645722389221191
    5. ' ' → logprob: -11.145722389221191
    6. ' a' → logprob: -11.770722389221191
    7. '  ' → logprob: -12.645722389221191
    8. '(b' → logprob: -12.770722389221191
    9. '1' → logprob: -13.145722389221191
    10. '	b' → logprob: -13.895722389221191

Token 234: ''.
' (ID: 49980)
  Prédit: ')<='
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ')<=' → logprob: -0.8350395560264587
    2. ')' → logprob: -0.9600395560264587
    3. '<=' → logprob: -2.4600396156311035
    4. ' <=' → logprob: -2.8350396156311035
    5. ' )' → logprob: -4.0850396156311035
    6. '')' → logprob: -4.7100396156311035
    7. '   ' → logprob: -5.2100396156311035
    8. ' ' → logprob: -6.7100396156311035
    9. ''' → logprob: -6.7100396156311035
    10. ')<' → logprob: -7.0850396156311035

Token 235: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.043503668159246445
    2. 'if' → logprob: -3.543503761291504
    3. ' if' → logprob: -4.293503761291504
    4. '    
' → logprob: -13.918503761291504
    5. '```' → logprob: -14.293503761291504
    6. '    ' → logprob: -15.293503761291504
    7. '
' → logprob: -15.418503761291504
    8. '	if' → logprob: -15.918503761291504
    9. '   ' → logprob: -16.918502807617188
    10. '  ' → logprob: -17.918502807617188

Token 236: ' if' (ID: 538)
  Prédit: 'if'
  Correct (stricte): False
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'if' (adapté à ' if') → logprob: -0.022658761590719223
    2. ' if' → logprob: -4.272658824920654
    3. '   ' → logprob: -4.772658824920654
    4. '```' → logprob: -14.647658348083496
    5. '	if' → logprob: -15.397658348083496
    6. '    
' → logprob: -15.397658348083496
    7. 'If' → logprob: -16.022659301757812
    8. ' ' → logprob: -16.397659301757812
    9. 'for' → logprob: -16.522659301757812
    10. '  ' → logprob: -16.772659301757812

Token 237: ' ' (ID: 220)
  Prédit: '1'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '1' → logprob: -0.08895102888345718
    2. ' ' → logprob: -2.4639511108398438
    3. '   ' → logprob: -12.088951110839844
    4. '(' → logprob: -12.338951110839844
    5. ' (' → logprob: -13.963951110839844
    6. '  ' → logprob: -14.838951110839844
    7. ' ' → logprob: -15.338951110839844
    8. '0' → logprob: -16.838951110839844
    9. 'a' → logprob: -17.588951110839844
    10. '```' → logprob: -17.713951110839844

Token 238: '1' (ID: 16)
  Prédit: '1'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '1' → logprob: -0.0008310707635246217
    2. ' ' → logprob: -7.125831127166748
    3. '(' → logprob: -10.62583065032959
    4. '   ' → logprob: -13.62583065032959
    5. ' (' → logprob: -14.12583065032959
    6. '  ' → logprob: -15.75083065032959
    7. 'a' → logprob: -16.250831604003906
    8. '１' → logprob: -18.000831604003906
    9. '```' → logprob: -18.375831604003906
    10. '(a' → logprob: -18.750831604003906

Token 239: ' <=' (ID: 5017)
  Prédit: ' <='
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' <=' → logprob: -0.3868880271911621
    2. '<=' → logprob: -1.136888027191162
    3. '<' → logprob: -12.38688850402832
    4. ')<=' → logprob: -12.63688850402832
    5. 'a' → logprob: -12.76188850402832
    6. ' <' → logprob: -13.26188850402832
    7. '   ' → logprob: -14.01188850402832
    8. ' ' → logprob: -14.13688850402832
    9. ']<=' → logprob: -14.88688850402832
    10. ')' → logprob: -15.13688850402832

Token 240: ' a' (ID: 261)
  Prédit: 'a'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'a' → logprob: -2.4391956685576588e-05
    2. ' a' → logprob: -10.625024795532227
    3. '   ' → logprob: -16.875024795532227
    4. '	a' → logprob: -19.000024795532227
    5. ' ' → logprob: -19.625024795532227
    6. 'а' → logprob: -21.000024795532227
    7. 'b' → logprob: -21.250024795532227
    8. '  ' → logprob: -21.375024795532227
    9. '_a' → logprob: -21.750024795532227
    10. ''a' → logprob: -22.500024795532227

Token 241: ' <=' (ID: 5017)
  Prédit: ' <='
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' <=' → logprob: -0.2937913239002228
    2. '<=' → logprob: -1.5437912940979004
    3. ' and' → logprob: -3.5437912940979004
    4. 'and' → logprob: -4.4187912940979
    5. ' ' → logprob: -11.293791770935059
    6. 'a' → logprob: -11.668791770935059
    7. '   ' → logprob: -11.918791770935059
    8. ')<=' → logprob: -12.793791770935059
    9. '    ' → logprob: -13.043791770935059
    10. '1' → logprob: -13.168791770935059

Token 242: ' ' (ID: 220)
  Prédit: '9'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '9' → logprob: -0.00012356207298580557
    2. ' ' → logprob: -9.000123977661133
    3. '   ' → logprob: -16.625123977661133
    4. '  ' → logprob: -17.750123977661133
    5. '```' → logprob: -19.375123977661133
    6. '９' → logprob: -19.875123977661133
    7. '09' → logprob: -20.250123977661133
    8. '    ' → logprob: -21.125123977661133
    9. '۹' → logprob: -21.125123977661133
    10. ' nine' → logprob: -21.250123977661133

Token 243: '9' (ID: 24)
  Prédit: '9'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '9' → logprob: -4.0126840758603066e-05
    2. ' ' → logprob: -10.125040054321289
    3. '   ' → logprob: -17.50004005432129
    4. '９' → logprob: -18.50004005432129
    5. '  ' → logprob: -18.62504005432129
    6. '```' → logprob: -19.00004005432129
    7. 'nine' → logprob: -19.56254005432129
    8. '09' → logprob: -20.00004005432129
    9. '99' → logprob: -20.06254005432129
    10. ' nine' → logprob: -20.18754005432129

Token 244: ' and' (ID: 326)
  Prédit: ' and'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' and' → logprob: -0.018159663304686546
    2. 'and' → logprob: -4.018159866333008
    3. ' ' → logprob: -12.143159866333008
    4. '   ' → logprob: -12.393159866333008
    5. '    ' → logprob: -15.768159866333008
    6. '  ' → logprob: -16.768159866333008
    7. '	and' → logprob: -17.143159866333008
    8. '0' → logprob: -17.643159866333008
    9. ')' → logprob: -17.893159866333008
    10. '```' → logprob: -17.893159866333008

Token 245: ' ' (ID: 220)
  Prédit: '1'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '1' → logprob: -0.2811616063117981
    2. ' ' → logprob: -1.4061615467071533
    3. '   ' → logprob: -12.031161308288574
    4. '  ' → logprob: -13.156161308288574
    5. 'b' → logprob: -13.406161308288574
    6. ' b' → logprob: -13.781161308288574
    7. ' ' → logprob: -14.656161308288574
    8. '    ' → logprob: -15.031161308288574
    9. '9' → logprob: -16.90616226196289
    10. '0' → logprob: -17.59366226196289

Token 246: '1' (ID: 16)
  Prédit: '1'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '1' → logprob: -0.0005939012626186013
    2. ' ' → logprob: -8.125594139099121
    3. 'b' → logprob: -8.125594139099121
    4. '   ' → logprob: -13.500594139099121
    5. ' b' → logprob: -14.500594139099121
    6. '  ' → logprob: -15.500594139099121
    7. '    ' → logprob: -18.375593185424805
    8. '```' → logprob: -19.625593185424805
    9. '9' → logprob: -19.750593185424805
    10. '	b' → logprob: -20.125593185424805

Token 247: ' <=' (ID: 5017)
  Prédit: ' <='
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' <=' → logprob: -0.06200353056192398
    2. '<=' → logprob: -2.8120036125183105
    3. '<' → logprob: -11.437003135681152
    4. '   ' → logprob: -11.812003135681152
    5. ' <' → logprob: -11.937003135681152
    6. ' ' → logprob: -12.312003135681152
    7. '  ' → logprob: -12.562003135681152
    8. '    ' → logprob: -14.687003135681152
    9. ')<=' → logprob: -14.687003135681152
    10. ' ' → logprob: -15.187003135681152

Token 248: ' b' (ID: 287)
  Prédit: 'b'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'b' → logprob: -0.0067154900170862675
    2. ' b' → logprob: -5.006715297698975
    3. '   ' → logprob: -15.881715774536133
    4. '	b' → logprob: -17.381715774536133
    5. ' ' → logprob: -18.756715774536133
    6. '_b' → logprob: -19.131715774536133
    7. '  ' → logprob: -19.881715774536133
    8. ')b' → logprob: -20.006715774536133
    9. ' ' → logprob: -20.256715774536133
    10. '    ' → logprob: -20.506715774536133

Token 249: ' <=' (ID: 5017)
  Prédit: ' <='
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' <=' → logprob: -0.043007753789424896
    2. '<=' → logprob: -3.1680078506469727
    3. '9' → logprob: -12.293007850646973
    4. ' ' → logprob: -13.168007850646973
    5. ' <' → logprob: -14.293007850646973
    6. '   ' → logprob: -14.418007850646973
    7. '  ' → logprob: -15.543007850646973
    8. '<' → logprob: -15.543007850646973
    9. ')<=' → logprob: -15.918007850646973
    10. ' ≤' → logprob: -16.293006896972656

Token 250: ' ' (ID: 220)
  Prédit: '9'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '9' → logprob: -6.635164754698053e-05
    2. ' ' → logprob: -9.625066757202148
    3. '   ' → logprob: -15.375066757202148
    4. '10' → logprob: -17.50006675720215
    5. '  ' → logprob: -18.12506675720215
    6. '```' → logprob: -18.50006675720215
    7. '۹' → logprob: -19.37506675720215
    8. '<|end|>' → logprob: -19.68756675720215
    9. 'nine' → logprob: -19.75006675720215
    10. '09' → logprob: -19.87506675720215

Token 251: '9' (ID: 24)
  Prédit: '9'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '9' → logprob: -2.935296834039036e-06
    2. ' ' → logprob: -12.75000286102295
    3. '```' → logprob: -18.625003814697266
    4. '९' → logprob: -18.937503814697266
    5. '۹' → logprob: -19.062503814697266
    6. '   ' → logprob: -19.312503814697266
    7. 'nine' → logprob: -19.375003814697266
    8. '９' → logprob: -19.687503814697266
    9. 'b' → logprob: -19.812503814697266
    10. '<|end|>' → logprob: -19.937503814697266

Token 252: ':
' (ID: 734)
  Prédit: ':'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ':' → logprob: -0.00013464801304508
    2. ':
' → logprob: -9.000134468078613
    3. ' :' → logprob: -12.125134468078613
    4. '):' → logprob: -12.125134468078613
    5. ':**' → logprob: -16.25013542175293
    6. '():' → logprob: -16.50013542175293
    7. '   ' → logprob: -17.12513542175293
    8. ':def' → logprob: -17.37513542175293
    9. ':
' → logprob: -17.75013542175293
    10. ':return' → logprob: -18.00013542175293

Token 253: '       ' (ID: 309)
  Prédit: '       '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '       ' → logprob: -0.062089357525110245
    2. ':' → logprob: -2.812089443206787
    3. '   ' → logprob: -9.687088966369629
    4. ':
' → logprob: -10.562088966369629
    5. ',' → logprob: -11.812088966369629
    6. 'print' → logprob: -12.062088966369629
    7. '        
' → logprob: -12.937088966369629
    8. '```' → logprob: -13.062088966369629
    9. ' :' → logprob: -13.187088966369629
    10. '      ' → logprob: -13.312088966369629

Token 254: ' #' (ID: 1069)
  Prédit: '       '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '       ' → logprob: -0.26421481370925903
    2. 'print' → logprob: -1.5142147541046143
    3. ' print' → logprob: -5.264214992523193
    4. 'result' → logprob: -5.389214992523193
    5. 'return' → logprob: -7.014214992523193
    6. '        
' → logprob: -7.639214992523193
    7. ' result' → logprob: -7.889214992523193
    8. '   ' → logprob: -8.264214515686035
    9. ' return' → logprob: -8.889214515686035
    10. '
' → logprob: -9.264214515686035

Token 255: ' Si' (ID: 7832)
  Prédit: 'print'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'print' → logprob: -0.5457002520561218
    2. 'result' → logprob: -0.9207002520561218
    3. 'product' → logprob: -5.0457000732421875
    4. ' result' → logprob: -5.1707000732421875
    5. ' print' → logprob: -5.5457000732421875
    6. 'return' → logprob: -5.9207000732421875
    7. '   ' → logprob: -6.1707000732421875
    8. '#' → logprob: -8.295700073242188
    9. 's' → logprob: -8.420700073242188
    10. ' product' → logprob: -8.545700073242188

Token 256: ' la' (ID: 557)
  Prédit: ' a'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' a' → logprob: -0.5827986598014832
    2. 'a' → logprob: -0.8327986598014832
    3. ' (' → logprob: -5.582798480987549
    4. '(a' → logprob: -6.207798480987549
    5. ' b' → logprob: -7.957798480987549
    6. ' ' → logprob: -8.207798957824707
    7. '(' → logprob: -8.957798957824707
    8. 'b' → logprob: -9.082798957824707
    9. ' c' → logprob: -10.832798957824707
    10. '   ' → logprob: -11.082798957824707

Token 257: ' condition' (ID: 7060)
  Prédit: 'a'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'a' → logprob: -0.48369333148002625
    2. ' somme' → logprob: -1.8586933612823486
    3. ' a' → logprob: -2.3586933612823486
    4. 'condition' → logprob: -3.3586933612823486
    5. 's' → logprob: -4.2336931228637695
    6. 'b' → logprob: -4.3586931228637695
    7. 'print' → logprob: -4.4836931228637695
    8. '#' → logprob: -4.6086931228637695
    9. '   ' → logprob: -4.7336931228637695
    10. ' condition' → logprob: -5.2336931228637695

Token 258: ' est' (ID: 893)
  Prédit: ':'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ':' → logprob: -0.21243929862976074
    2. 'est' → logprob: -2.3374392986297607
    3. ' est' → logprob: -2.5874392986297607
    4. '   ' → logprob: -4.71243953704834
    5. ' is' → logprob: -4.83743953704834
    6. '       ' → logprob: -6.96243953704834
    7. 'print' → logprob: -7.08743953704834
    8. ':
' → logprob: -8.58743953704834
    9. ' print' → logprob: -9.21243953704834
    10. 's' → logprob: -9.46243953704834

Token 259: ' vraie' (ID: 105841)
  Prédit: 'True'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'True' → logprob: -0.06102663278579712
    2. 'v' → logprob: -3.1860265731811523
    3. ' True' → logprob: -4.061026573181152
    4. 'V' → logprob: -8.186026573181152
    5. '   ' → logprob: -8.436026573181152
    6. 'true' → logprob: -9.186026573181152
    7. ' vraie' → logprob: -11.186026573181152
    8. 's' → logprob: -12.061026573181152
    9. 'vé' → logprob: -13.186026573181152
    10. '       ' → logprob: -13.186026573181152

Token 260: ',' (ID: 11)
  Prédit: ':'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ':' → logprob: -0.014093219302594662
    2. '       ' → logprob: -5.139093399047852
    3. ':
' → logprob: -5.514093399047852
    4. ',' → logprob: -5.764093399047852
    5. 'print' → logprob: -7.639093399047852
    6. ' :' → logprob: -8.264093399047852
    7. ' print' → logprob: -8.889093399047852
    8. '           ' → logprob: -10.014093399047852
    9. '   ' → logprob: -11.014093399047852
    10. '.' → logprob: -12.639093399047852

Token 261: ' on' (ID: 402)
  Prédit: ' print'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' print' → logprob: -0.7578966617584229
    2. 'print' → logprob: -1.1328966617584229
    3. '       ' → logprob: -1.8828966617584229
    4. 'result' → logprob: -3.507896661758423
    5. ' result' → logprob: -3.757896661758423
    6. '   ' → logprob: -6.007896423339844
    7. ' resultat' → logprob: -8.007896423339844
    8. ' product' → logprob: -8.257896423339844
    9. ' résultat' → logprob: -9.007896423339844
    10. 'c' → logprob: -9.257896423339844

Token 262: ' retourne' (ID: 178818)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.8337176442146301
    2. 'print' → logprob: -0.8337176442146301
    3. ' print' → logprob: -2.0837175846099854
    4. '       ' → logprob: -5.5837178230285645
    5. ' multipl' → logprob: -7.2087178230285645
    6. '    ' → logprob: -7.3337178230285645
    7. 'return' → logprob: -8.458717346191406
    8. ' return' → logprob: -8.458717346191406
    9. '#' → logprob: -9.083717346191406
    10. ' ' → logprob: -9.458717346191406

Token 263: ' le' (ID: 505)
  Prédit: ' a'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' a' → logprob: -0.5582941770553589
    2. 'a' → logprob: -0.9332941770553589
    3. '   ' → logprob: -4.183294296264648
    4. 'print' → logprob: -5.058294296264648
    5. ' str' → logprob: -5.558294296264648
    6. ' print' → logprob: -6.183294296264648
    7. '"' → logprob: -6.308294296264648
    8. 'str' → logprob: -7.058294296264648
    9. ' True' → logprob: -7.308294296264648
    10. ' "' → logprob: -7.433294296264648

Token 264: ' produit' (ID: 29429)
  Prédit: 'a'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'a' → logprob: -0.1804627627134323
    2. 'produ' → logprob: -2.1804628372192383
    3. 'print' → logprob: -3.4304628372192383
    4. 'result' → logprob: -5.055462837219238
    5. ' produit' → logprob: -5.305462837219238
    6. 'product' → logprob: -5.930462837219238
    7. 'str' → logprob: -6.805462837219238
    8. 'multip' → logprob: -7.305462837219238
    9. '   ' → logprob: -7.430462837219238
    10. '"' → logprob: -7.930462837219238

Token 265: ' de' (ID: 334)
  Prédit: '       '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '       ' → logprob: -0.02739107608795166
    2. 'a' → logprob: -4.527390956878662
    3. 'print' → logprob: -5.652390956878662
    4. '(a' → logprob: -5.777390956878662
    5. 'return' → logprob: -6.027390956878662
    6. ' a' → logprob: -6.027390956878662
    7. ',' → logprob: -6.652390956878662
    8. '   ' → logprob: -6.902390956878662
    9. ' =' → logprob: -7.152390956878662
    10. ':' → logprob: -7.902390956878662

Token 266: ' '' (ID: 461)
  Prédit: 'a'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'a' → logprob: -0.005929393693804741
    2. ' a' → logprob: -5.130929470062256
    3. '   ' → logprob: -14.755928993225098
    4. '(a' → logprob: -15.130928993225098
    5. ' ' → logprob: -16.005929946899414
    6. '	a' → logprob: -17.005929946899414
    7. '```' → logprob: -18.255929946899414
    8. '  ' → logprob: -19.130929946899414
    9. ''a' → logprob: -19.255929946899414
    10. '"a' → logprob: -19.380929946899414

Token 267: 'a' (ID: 64)
  Prédit: 'a'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'a' → logprob: -4.036524842376821e-05
    2. ' a' → logprob: -10.125040054321289
    3. '   ' → logprob: -15.375040054321289
    4. '(a' → logprob: -17.62504005432129
    5. '	a' → logprob: -19.25004005432129
    6. ' ' → logprob: -19.37504005432129
    7. '```' → logprob: -19.62504005432129
    8. '  ' → logprob: -20.37504005432129
    9. ''a' → logprob: -20.50004005432129
    10. ')a' → logprob: -20.87504005432129

Token 268: ''' (ID: 6)
  Prédit: ' *'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' *' → logprob: -0.4324290454387665
    2. '*' → logprob: -1.0574290752410889
    3. '*b' → logprob: -5.80742883682251
    4. ',' → logprob: -7.80742883682251
    5. ' ' → logprob: -8.682429313659668
    6. '*a' → logprob: -10.057429313659668
    7. '   ' → logprob: -10.307429313659668
    8. ' and' → logprob: -11.557429313659668
    9. ''' → logprob: -11.682429313659668
    10. ' ,' → logprob: -12.182429313659668

Token 269: ' et' (ID: 859)
  Prédit: ' *'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' *' → logprob: -0.1173999235033989
    2. '*' → logprob: -2.6173999309539795
    3. '*b' → logprob: -3.3673999309539795
    4. ',' → logprob: -6.1173996925354
    5. '   ' → logprob: -7.6173996925354
    6. '*a' → logprob: -7.7423996925354
    7. ' ' → logprob: -9.367400169372559
    8. ' ,' → logprob: -10.867400169372559
    9. ',b' → logprob: -11.617400169372559
    10. ' et' → logprob: -11.742400169372559

Token 270: ' '' (ID: 461)
  Prédit: ' b'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' b' → logprob: -0.6383514404296875
    2. 'b' → logprob: -0.7633514404296875
    3. ''b' → logprob: -5.5133514404296875
    4. ''' → logprob: -6.8883514404296875
    5. ' '' → logprob: -7.3883514404296875
    6. '   ' → logprob: -10.388351440429688
    7. '"' → logprob: -11.763351440429688
    8. ' ' → logprob: -12.138351440429688
    9. '*b' → logprob: -12.263351440429688
    10. '    ' → logprob: -12.888351440429688

Token 271: 'b' (ID: 65)
  Prédit: 'b'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'b' → logprob: -1.747814349073451e-05
    2. ' b' → logprob: -11.000017166137695
    3. ''b' → logprob: -14.750017166137695
    4. '   ' → logprob: -15.750017166137695
    5. ''' → logprob: -16.250017166137695
    6. ' ' → logprob: -18.000017166137695
    7. '"' → logprob: -18.125017166137695
    8. '	b' → logprob: -18.125017166137695
    9. '       ' → logprob: -18.375017166137695
    10. ')b' → logprob: -18.500017166137695

Token 272: ''.
' (ID: 49980)
  Prédit: '       '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '       ' → logprob: -0.006501616444438696
    2. 'print' → logprob: -5.6315016746521
    3. ')' → logprob: -6.6315016746521
    4. '.' → logprob: -7.7565016746521
    5. ',' → logprob: -7.7565016746521
    6. ' print' → logprob: -8.006501197814941
    7. '   ' → logprob: -8.756501197814941
    8. '        
' → logprob: -9.381501197814941
    9. ')
' → logprob: -10.881501197814941
    10. '      ' → logprob: -11.006501197814941

Token 273: '       ' (ID: 309)
  Prédit: '       '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '       ' → logprob: -0.0009425500174984336
    2. 'return' → logprob: -7.625942707061768
    3. 'print' → logprob: -7.750942707061768
    4. ' return' → logprob: -11.00094223022461
    5. ' print' → logprob: -12.50094223022461
    6. '           ' → logprob: -13.37594223022461
    7. '      ' → logprob: -14.37594223022461
    8. '```' → logprob: -14.87594223022461
    9. '        
' → logprob: -15.00094223022461
    10. '   ' → logprob: -15.00094223022461

Token 274: ' #' (ID: 1069)
  Prédit: 'print'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'print' → logprob: -0.5778937339782715
    2. '       ' → logprob: -0.9528937339782715
    3. 'return' → logprob: -3.4528937339782715
    4. ' print' → logprob: -3.9528937339782715
    5. ' return' → logprob: -6.0778937339782715
    6. 'result' → logprob: -9.32789421081543
    7. '   ' → logprob: -10.70289421081543
    8. '```' → logprob: -11.20289421081543
    9. '
' → logprob: -12.20289421081543
    10. '           ' → logprob: -12.32789421081543

Token 275: ' L' (ID: 451)
  Prédit: 'print'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'print' → logprob: -0.03315339609980583
    2. '       ' → logprob: -4.158153533935547
    3. 'return' → logprob: -4.283153533935547
    4. ' print' → logprob: -5.908153533935547
    5. '   ' → logprob: -8.283153533935547
    6. ' return' → logprob: -8.783153533935547
    7. 'result' → logprob: -10.158153533935547
    8. '```' → logprob: -12.158153533935547
    9. '
' → logprob: -13.408153533935547
    10. '        
' → logprob: -13.908153533935547

Token 276: ''op' (ID: 70747)
  Prédit: 'print'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'print' → logprob: -0.2391008883714676
    2. '   ' → logprob: -2.364100933074951
    3. 'return' → logprob: -2.864100933074951
    4. '       ' → logprob: -3.239100933074951
    5. ' print' → logprob: -3.989100933074951
    6. ' return' → logprob: -6.614100933074951
    7. 'eturn' → logprob: -6.864100933074951
    8. '#' → logprob: -8.864100456237793
    9. ' ' → logprob: -8.864100456237793
    10. '  ' → logprob: -8.989100456237793

Token 277: 'érateur' (ID: 108528)
  Prédit: 'print'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'print' → logprob: -1.1059216260910034
    2. '   ' → logprob: -1.7309216260910034
    3. 'ération' → logprob: -1.9809216260910034
    4. 'érateur' → logprob: -2.480921745300293
    5. 'er' → logprob: -2.730921745300293
    6. 'r' → logprob: -2.730921745300293
    7. 'érer' → logprob: -3.605921745300293
    8. 'def' → logprob: -3.730921745300293
    9. 'ér' → logprob: -3.980921745300293
    10. '       ' → logprob: -3.980921745300293

Token 278: ' *' (ID: 425)
  Prédit: '*'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '*' → logprob: -0.0022631403990089893
    2. ' *' → logprob: -6.627263069152832
    3. 'print' → logprob: -7.252263069152832
    4. '=' → logprob: -9.002263069152832
    5. ' print' → logprob: -10.502263069152832
    6. '*=' → logprob: -10.877263069152832
    7. ' de' → logprob: -11.127263069152832
    8. '   ' → logprob: -11.252263069152832
    9. ' ' → logprob: -12.127263069152832
    10. ' multiplication' → logprob: -12.877263069152832

Token 279: ' effect' (ID: 3159)
  Prédit: 'print'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'print' → logprob: -1.4423578977584839
    2. '   ' → logprob: -2.0673580169677734
    3. ' print' → logprob: -2.0673580169677734
    4. ')' → logprob: -2.1923580169677734
    5. ' return' → logprob: -2.1923580169677734
    6. ' ' → logprob: -2.5673580169677734
    7. '*' → logprob: -2.8173580169677734
    8. '       ' → logprob: -2.8173580169677734
    9. 'return' → logprob: -3.6923580169677734
    10. '    ' → logprob: -3.8173580169677734

Token 280: 'ue' (ID: 466)
  Prédit: 'ue'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'ue' → logprob: -0.08963359892368317
    2. 'u' → logprob: -2.5896337032318115
    3. 'uer' → logprob: -5.714633464813232
    4. '*' → logprob: -6.089633464813232
    5. '   ' → logprob: -6.089633464813232
    6. 'uez' → logprob: -7.089633464813232
    7. ' u' → logprob: -7.339633464813232
    8. 'uera' → logprob: -8.71463394165039
    9. 'ué' → logprob: -8.83963394165039
    10. 'uate' → logprob: -8.96463394165039

Token 281: ' une' (ID: 2463)
  Prédit: ' la'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' la' → logprob: -0.273576557636261
    2. 'la' → logprob: -1.7735764980316162
    3. ' une' → logprob: -3.398576498031616
    4. 'a' → logprob: -4.398576736450195
    5. 'l' → logprob: -4.898576736450195
    6. 'une' → logprob: -5.398576736450195
    7. 'multip' → logprob: -5.523576736450195
    8. ' a' → logprob: -5.773576736450195
    9. ' l' → logprob: -6.023576736450195
    10. ' ' → logprob: -7.523576736450195

Token 282: ' multiplication' (ID: 86340)
  Prédit: ' multiplication'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' multiplication' → logprob: -0.3875143229961395
    2. 'multip' → logprob: -1.137514352798462
    3. ' multip' → logprob: -7.762514114379883
    4. 'mult' → logprob: -8.887514114379883
    5. ' ' → logprob: -10.887514114379883
    6. 'mul' → logprob: -11.012514114379883
    7. 'fois' → logprob: -11.512514114379883
    8. ' multiplic' → logprob: -11.512514114379883
    9. '*' → logprob: -12.137514114379883
    10. 'addition' → logprob: -12.637514114379883

Token 283: ' entre' (ID: 3853)
  Prédit: '       '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '       ' → logprob: -0.06336112320423126
    2. 'print' → logprob: -2.938361167907715
    3. ' print' → logprob: -5.313361167907715
    4. ',' → logprob: -7.063361167907715
    5. 'return' → logprob: -7.188361167907715
    6. '   ' → logprob: -7.438361167907715
    7. '        
' → logprob: -7.563361167907715
    8. ' return' → logprob: -8.063361167907715
    9. '.' → logprob: -8.813361167907715
    10. ')' → logprob: -10.063361167907715

Token 284: ' deux' (ID: 10301)
  Prédit: 'a'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'a' → logprob: -0.012529309839010239
    2. ' a' → logprob: -4.387529373168945
    3. ' les' → logprob: -11.262529373168945
    4. 'les' → logprob: -12.012529373168945
    5. ' ' → logprob: -14.637529373168945
    6. ' ' → logprob: -16.262529373168945
    7. '	a' → logprob: -16.762529373168945
    8. ' the' → logprob: -17.512529373168945
    9. '```' → logprob: -17.512529373168945
    10. ' espaces' → logprob: -17.512529373168945

Token 285: ' ent' (ID: 1121)
  Prédit: ' nombres'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' nombres' → logprob: -0.05537991225719452
    2. ' numbers' → logprob: -4.180379867553711
    3. ' ent' → logprob: -4.305379867553711
    4. ' a' → logprob: -4.930379867553711
    5. ' integers' → logprob: -5.555379867553711
    6. 'a' → logprob: -5.680379867553711
    7. ' nombre' → logprob: -5.805379867553711
    8. ' espaces' → logprob: -5.930379867553711
    9. 'numbers' → logprob: -6.180379867553711
    10. 'nombre' → logprob: -6.305379867553711

Token 286: 'iers' (ID: 11012)
  Prédit: 'iers'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'iers' → logprob: -0.04794284701347351
    2. 'ier' → logprob: -3.172942876815796
    3. 'ières' → logprob: -5.547942638397217
    4. 'i' → logprob: -7.672942638397217
    5. '   ' → logprob: -8.547943115234375
    6. 'ière' → logprob: -8.797943115234375
    7. '*' → logprob: -8.922943115234375
    8. 'a' → logprob: -10.172943115234375
    9. 're' → logprob: -11.547943115234375
    10. 'e' → logprob: -11.672943115234375

Token 287: '.
' (ID: 558)
  Prédit: '       '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '       ' → logprob: -0.003842471167445183
    2. 'print' → logprob: -6.253842353820801
    3. ',' → logprob: -7.253842353820801
    4. '        
' → logprob: -8.0038423538208
    5. 'return' → logprob: -8.1288423538208
    6. '   ' → logprob: -8.7538423538208
    7. ' return' → logprob: -8.8788423538208
    8. ' print' → logprob: -9.1288423538208
    9. '.' → logprob: -9.5038423538208
    10. ')' → logprob: -10.7538423538208

Token 288: '       ' (ID: 309)
  Prédit: '       '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '       ' → logprob: -0.0022231759503483772
    2. 'print' → logprob: -6.752223014831543
    3. 'return' → logprob: -6.877223014831543
    4. ' return' → logprob: -11.127223014831543
    5. ' print' → logprob: -12.252223014831543
    6. '   ' → logprob: -14.127223014831543
    7. '      ' → logprob: -14.877223014831543
    8. '           ' → logprob: -15.002223014831543
    9. '        
' → logprob: -16.00222396850586
    10. '```' → logprob: -16.37722396850586

Token 289: ' return' (ID: 622)
  Prédit: 'print'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'print' → logprob: -0.14223681390285492
    2. '       ' → logprob: -2.1422367095947266
    3. 'return' (adapté à ' return') → logprob: -4.267236709594727
    4. ' print' → logprob: -7.017236709594727
    5. 'result' → logprob: -8.767236709594727
    6. '   ' → logprob: -9.642236709594727
    7. ' return' → logprob: -9.892236709594727
    8. '```' → logprob: -13.892236709594727
    9. '	print' → logprob: -14.267236709594727
    10. ' result' → logprob: -14.892236709594727

Token 290: ' a' (ID: 261)
  Prédit: 'a'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'a' → logprob: -0.07889022678136826
    2. ' a' → logprob: -2.578890323638916
    3. '   ' → logprob: -15.453889846801758
    4. '	a' → logprob: -16.453889846801758
    5. ' ' → logprob: -16.453889846801758
    6. ' ' → logprob: -17.953889846801758
    7. '_a' → logprob: -18.953889846801758
    8. '(a' → logprob: -18.953889846801758
    9. '    ' → logprob: -20.453889846801758
    10. '  ' → logprob: -20.703889846801758

Token 291: ' *' (ID: 425)
  Prédit: ' *'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' *' → logprob: -0.12694469094276428
    2. '*' → logprob: -2.1269447803497314
    3. ' ' → logprob: -12.126944541931152
    4. ' ' → logprob: -12.376944541931152
    5. '*b' → logprob: -12.751944541931152
    6. ' *
' → logprob: -13.626944541931152
    7. '**' → logprob: -14.126944541931152
    8. '<|end|>' → logprob: -14.251944541931152
    9. ' **' → logprob: -15.001944541931152
    10. '  ' → logprob: -15.251944541931152

Token 292: ' b' (ID: 287)
  Prédit: 'b'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'b' → logprob: -0.061967797577381134
    2. ' b' → logprob: -2.8119678497314453
    3. ' ' → logprob: -16.686967849731445
    4. '	b' → logprob: -17.436967849731445
    5. ')b' → logprob: -18.561967849731445
    6. '*b' → logprob: -18.811967849731445
    7. '_b' → logprob: -19.186967849731445
    8. ' б' → logprob: -19.311967849731445
    9. '<|end|>' → logprob: -19.936967849731445
    10. '   ' → logprob: -20.061967849731445

Token 293: '
' (ID: 198)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.011338996700942516
    2. 'else' → logprob: -4.76133918762207
    3. '<|end|>' → logprob: -6.88633918762207
    4. '
' → logprob: -7.26133918762207
    5. '    
' → logprob: -7.63633918762207
    6. ' else' → logprob: -7.88633918762207
    7. '\n' → logprob: -10.13633918762207
    8. 'print' → logprob: -10.63633918762207
    9. '.' → logprob: -10.76133918762207
    10. '<|end|>' → logprob: -11.26133918762207

Token 294: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.0810958668589592
    2. 'else' → logprob: -2.5810959339141846
    3. ' else' → logprob: -6.8310956954956055
    4. '<|end|>' → logprob: -6.9560956954956055
    5. '    
' → logprob: -9.081095695495605
    6. '	else' → logprob: -10.831095695495605
    7. 'print' → logprob: -11.206095695495605
    8. '    ' → logprob: -11.831095695495605
    9. '
' → logprob: -12.831095695495605
    10. '```' → logprob: -12.956095695495605

Token 295: ' else' (ID: 1203)
  Prédit: 'else'
  Correct (stricte): False
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'else' (adapté à ' else') → logprob: -0.012973861768841743
    2. ' else' → logprob: -4.387973785400391
    3. '   ' → logprob: -7.762973785400391
    4. 'return' → logprob: -11.13797378540039
    5. 'print' → logprob: -11.38797378540039
    6. '	else' → logprob: -11.88797378540039
    7. '    
' → logprob: -12.88797378540039
    8. 'elif' → logprob: -13.63797378540039
    9. '#' → logprob: -14.13797378540039
    10. '<|end|>' → logprob: -14.38797378540039

Token 296: ':
' (ID: 734)
  Prédit: ':'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ':' → logprob: -0.018169142305850983
    2. ':
' → logprob: -4.018168926239014
    3. ':return' → logprob: -11.393169403076172
    4. '   ' → logprob: -12.268169403076172
    5. ' :' → logprob: -13.768169403076172
    6. '       ' → logprob: -13.893169403076172
    7. ':

' → logprob: -14.643169403076172
    8. ':
' → logprob: -15.393169403076172
    9. ' :
' → logprob: -15.393169403076172
    10. ',' → logprob: -16.518169403076172

Token 297: '       ' (ID: 309)
  Prédit: '       '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '       ' → logprob: -0.05109653249382973
    2. 'return' → logprob: -3.0510964393615723
    3. ' return' → logprob: -6.301096439361572
    4. 'print' → logprob: -7.426096439361572
    5. '   ' → logprob: -9.92609691619873
    6. 'raise' → logprob: -11.42609691619873
    7. ' print' → logprob: -12.30109691619873
    8. '	return' → logprob: -12.30109691619873
    9. '	' → logprob: -13.67609691619873
    10. '        
' → logprob: -13.80109691619873

Token 298: ' #' (ID: 1069)
  Prédit: 'return'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'return' → logprob: -0.08116886019706726
    2. '       ' → logprob: -3.4561688899993896
    3. ' return' → logprob: -3.9561688899993896
    4. 'print' → logprob: -4.0811686515808105
    5. '   ' → logprob: -4.5811686515808105
    6. ' print' → logprob: -9.581169128417969
    7. 'raise' → logprob: -10.206169128417969
    8. '	return' → logprob: -11.081169128417969
    9. '    ' → logprob: -11.331169128417969
    10. ':return' → logprob: -13.331169128417969

Token 299: ' Si' (ID: 7832)
  Prédit: 'return'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'return' → logprob: -0.024840110912919044
    2. 'print' → logprob: -3.8998401165008545
    3. ' return' → logprob: -5.649839878082275
    4. '       ' → logprob: -7.649839878082275
    5. 'raise' → logprob: -8.399840354919434
    6. '   ' → logprob: -10.149840354919434
    7. ' print' → logprob: -10.774840354919434
    8. '#' → logprob: -11.899840354919434
    9. ' raise' → logprob: -14.149840354919434
    10. '    ' → logprob: -14.274840354919434

Token 300: ' au' (ID: 2791)
  Prédit: ' not'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' not' → logprob: -0.594500720500946
    2. ' True' → logprob: -0.844500720500946
    3. ' None' → logprob: -4.719500541687012
    4. ' return' → logprob: -5.719500541687012
    5. ' False' → logprob: -6.219500541687012
    6. 'not' → logprob: -6.469500541687012
    7. 'True' → logprob: -6.844500541687012
    8. ' ' → logprob: -7.344500541687012
    9. ' user' → logprob: -8.219500541687012
    10. ' ' → logprob: -8.469500541687012

Token 301: ' moins' (ID: 15924)
  Prédit: 'cun'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'cun' → logprob: -0.25682350993156433
    2. 'c' → logprob: -1.6318235397338867
    3. 'n' → logprob: -3.7568235397338867
    4. 'cu' → logprob: -6.381823539733887
    5. 'cc' → logprob: -7.131823539733887
    6. 'une' → logprob: -7.256823539733887
    7. 'nc' → logprob: -7.756823539733887
    8. 'g' → logprob: -7.756823539733887
    9. 'gun' → logprob: -7.881823539733887
    10. 'tre' → logprob: -7.881823539733887

Token 302: ' une' (ID: 2463)
  Prédit: ' not'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' not' → logprob: -0.6291112303733826
    2. 'not' → logprob: -1.2541112899780273
    3. ' l' → logprob: -2.5041112899780273
    4. 'a' → logprob: -3.2541112899780273
    5. 'l' → logprob: -3.6291112899780273
    6. ' a' → logprob: -3.7541112899780273
    7. '   ' → logprob: -5.754111289978027
    8. ' ' → logprob: -6.254111289978027
    9. 'b' → logprob: -7.004111289978027
    10. 'une' → logprob: -7.129111289978027

Token 303: ' des' (ID: 731)
  Prédit: ' des'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' des' → logprob: -0.018146075308322906
    2. 'des' → logprob: -5.01814603805542
    3. ' of' → logprob: -5.51814603805542
    4. '   ' → logprob: -5.76814603805542
    5. ' de' → logprob: -6.39314603805542
    6. ' ' → logprob: -6.76814603805542
    7. ' valeur' → logprob: -8.143146514892578
    8. ' not' → logprob: -8.518146514892578
    9. ')' → logprob: -8.893146514892578
    10. ' variable' → logprob: -9.268146514892578

Token 304: ' valeurs' (ID: 73668)
  Prédit: 'val'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'val' → logprob: -1.4388104677200317
    2. ' valeurs' → logprob: -1.4388104677200317
    3. 'variables' → logprob: -1.8138104677200317
    4. 'de' → logprob: -2.313810348510742
    5. 'a' → logprob: -2.438810348510742
    6. ' variables' → logprob: -2.938810348510742
    7. ' deux' → logprob: -3.188810348510742
    8. 'conditions' → logprob: -3.438810348510742
    9. ' ' → logprob: -4.313810348510742
    10. 'n' → logprob: -4.563810348510742

Token 305: ' '' (ID: 461)
  Prédit: ' n'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' n' → logprob: -0.5660334229469299
    2. 'n' → logprob: -0.9410334229469299
    3. '   ' → logprob: -3.816033363342285
    4. ' is' → logprob: -4.816033363342285
    5. ' est' → logprob: -5.066033363342285
    6. ' ne' → logprob: -5.691033363342285
    7. ' des' → logprob: -7.566033363342285
    8. 'est' → logprob: -7.566033363342285
    9. 'is' → logprob: -8.816033363342285
    10. ' ' → logprob: -9.066033363342285

Token 306: 'a' (ID: 64)
  Prédit: 'a'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'a' → logprob: -0.026881877332925797
    2. ' a' → logprob: -3.6518819332122803
    3. '   ' → logprob: -8.27688217163086
    4. 'b' → logprob: -9.02688217163086
    5. 'n' → logprob: -9.77688217163086
    6. ' ' → logprob: -9.77688217163086
    7. '  ' → logprob: -10.52688217163086
    8. ' not' → logprob: -11.52688217163086
    9. ')' → logprob: -12.15188217163086
    10. ' n' → logprob: -12.27688217163086

Token 307: ''' (ID: 6)
  Prédit: '''
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ''' → logprob: -0.004095143172889948
    2. ' >' → logprob: -7.004095077514648
    3. ' <' → logprob: -7.129095077514648
    4. '>' → logprob: -7.504095077514648
    5. ' or' → logprob: -7.754095077514648
    6. ' ==' → logprob: -8.379095077514648
    7. '   ' → logprob: -8.504095077514648
    8. 'ou' → logprob: -8.629095077514648
    9. ' ou' → logprob: -8.879095077514648
    10. '>'' → logprob: -9.129095077514648

Token 308: ' ou' (ID: 2031)
  Prédit: ' ou'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' ou' → logprob: -0.5237724184989929
    2. 'ou' → logprob: -1.3987724781036377
    3. ' or' → logprob: -2.2737724781036377
    4. '   ' → logprob: -3.7737724781036377
    5. ',' → logprob: -4.023772239685059
    6. ' <' → logprob: -5.273772239685059
    7. '>' → logprob: -5.773772239685059
    8. 'or' → logprob: -5.773772239685059
    9. '<' → logprob: -6.148772239685059
    10. ' ' → logprob: -7.273772239685059

Token 309: ' '' (ID: 461)
  Prédit: 'b'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'b' → logprob: -0.3870370090007782
    2. ' b' → logprob: -1.1370370388031006
    3. ''b' → logprob: -9.01203727722168
    4. ' '' → logprob: -10.38703727722168
    5. ''' → logprob: -11.26203727722168
    6. '   ' → logprob: -15.76203727722168
    7. ' ' → logprob: -16.01203727722168
    8. '_b' → logprob: -16.13703727722168
    9. '`' → logprob: -17.76203727722168
    10. '	b' → logprob: -17.88703727722168

Token 310: 'b' (ID: 65)
  Prédit: 'b'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'b' → logprob: -6.76628842484206e-05
    2. ' b' → logprob: -9.625067710876465
    3. '   ' → logprob: -13.625067710876465
    4. '       ' → logprob: -16.00006675720215
    5. ''b' → logprob: -16.37506675720215
    6. ' ' → logprob: -16.87506675720215
    7. '    ' → logprob: -17.50006675720215
    8. '_b' → logprob: -18.12506675720215
    9. '```' → logprob: -18.12506675720215
    10. '	b' → logprob: -18.25006675720215

Token 311: ''' (ID: 6)
  Prédit: ' n'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' n' → logprob: -0.3005329966545105
    2. ''' → logprob: -1.9255330562591553
    3. 'n' → logprob: -2.5505330562591553
    4. ')' → logprob: -4.175532817840576
    5. ' est' → logprob: -4.425532817840576
    6. 'est' → logprob: -6.050532817840576
    7. '   ' → logprob: -6.925532817840576
    8. ' ne' → logprob: -6.925532817840576
    9. ' is' → logprob: -7.300532817840576
    10. ' '' → logprob: -7.425532817840576

Token 312: ' n' (ID: 297)
  Prédit: ' n'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' n' → logprob: -0.6694990396499634
    2. 'n' → logprob: -0.7944990396499634
    3. ' est' → logprob: -4.169498920440674
    4. '   ' → logprob: -4.919498920440674
    5. 'est' → logprob: -5.169498920440674
    6. ' is' → logprob: -5.919498920440674
    7. ' ne' → logprob: -6.294498920440674
    8. 'return' → logprob: -7.544498920440674
    9. ',' → logprob: -7.669498920440674
    10. '>' → logprob: -7.794498920440674

Token 313: ''est' (ID: 6616)
  Prédit: ''est'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ''est' → logprob: -0.16896767914295197
    2. ''' → logprob: -2.0439677238464355
    3. 'e' → logprob: -4.2939677238464355
    4. ''>' → logprob: -5.6689677238464355
    5. ''ont' → logprob: -6.2939677238464355
    6. 'pas' → logprob: -7.0439677238464355
    7. 'est' → logprob: -7.2939677238464355
    8. '’est' → logprob: -7.2939677238464355
    9. ''#' → logprob: -7.2939677238464355
    10. 'n' → logprob: -8.043967247009277

Token 314: ' pas' (ID: 2173)
  Prédit: 'pas'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'pas' → logprob: -0.023250484839081764
    2. ' pas' → logprob: -3.7732505798339844
    3. '_pas' → logprob: -13.523250579833984
    4. '#' → logprob: -13.898250579833984
    5. 'not' → logprob: -14.273250579833984
    6. 'Pas' → logprob: -14.523250579833984
    7. 'p' → logprob: -14.898250579833984
    8. '```' → logprob: -15.398250579833984
    9. 't' → logprob: -16.148250579833984
    10. '...' → logprob: -16.148250579833984

Token 315: ' dans' (ID: 2671)
  Prédit: 'com'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'com' → logprob: -0.20700407028198242
    2. 'dans' → logprob: -3.0820040702819824
    3. ' dans' → logprob: -3.2070040702819824
    4. ' valide' → logprob: -3.5820040702819824
    5. ' comprise' → logprob: -3.9570040702819824
    6. 'pas' → logprob: -4.457004070281982
    7. ' pas' → logprob: -4.707004070281982
    8. ' compris' → logprob: -4.707004070281982
    9. ' valid' → logprob: -4.707004070281982
    10. ' entre' → logprob: -5.707004070281982

Token 316: ' l' (ID: 305)
  Prédit: ' la'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' la' → logprob: -1.0876985788345337
    2. 'le' → logprob: -1.4626985788345337
    3. 'la' → logprob: -1.4626985788345337
    4. '[' → logprob: -2.337698459625244
    5. 'l' → logprob: -3.087698459625244
    6. ' l' → logprob: -3.837698459625244
    7. 'range' → logprob: -4.337698459625244
    8. ' le' → logprob: -4.462698459625244
    9. 'les' → logprob: -6.087698459625244
    10. ' [' → logprob: -6.087698459625244

Token 317: ''' (ID: 6)
  Prédit: 'interval'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'interval' → logprob: -0.7239079475402832
    2. 'range' → logprob: -1.0989079475402832
    3. 'e' → logprob: -2.348907947540283
    4. '[' → logprob: -2.723907947540283
    5. ''' → logprob: -5.098907947540283
    6. 'a' → logprob: -5.848907947540283
    7. 'else' → logprob: -6.348907947540283
    8. ' range' → logprob: -6.348907947540283
    9. 'es' → logprob: -6.473907947540283
    10. 'elif' → logprob: -6.848907947540283

Token 318: 'interval' (ID: 37558)
  Prédit: 'interval'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'interval' → logprob: -0.001982044894248247
    2. '[' → logprob: -6.75198221206665
    3. 'range' → logprob: -7.37698221206665
    4. 'e' → logprob: -9.376981735229492
    5. ' interval' → logprob: -10.126981735229492
    6. ''' → logprob: -10.501981735229492
    7. '1' → logprob: -12.001981735229492
    8. 'es' → logprob: -12.376981735229492
    9. 'ensemble' → logprob: -13.001981735229492
    10. '```' → logprob: -13.126981735229492

Token 319: 'le' (ID: 282)
  Prédit: 'e'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'e' → logprob: -0.31704896688461304
    2. 'le' → logprob: -1.3170490264892578
    3. '[' → logprob: -5.692049026489258
    4. '[e' → logprob: -8.317049026489258
    5. 're' → logprob: -9.817049026489258
    6. ' e' → logprob: -10.442049026489258
    7. ' [' → logprob: -10.817049026489258
    8. 'é' → logprob: -11.692049026489258
    9. 'de' → logprob: -12.192049026489258
    10. 'u' → logprob: -12.192049026489258

Token 320: ' de' (ID: 334)
  Prédit: '['
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '[' → logprob: -0.2591172158718109
    2. ' [' → logprob: -2.0091171264648438
    3. '1' → logprob: -2.6341171264648438
    4. 'val' → logprob: -4.759117126464844
    5. '   ' → logprob: -5.759117126464844
    6. 'correct' → logprob: -5.884117126464844
    7. ' valide' → logprob: -6.134117126464844
    8. ' compris' → logprob: -6.634117126464844
    9. 'entre' → logprob: -7.384117126464844
    10. ',' → logprob: -7.384117126464844

Token 321: ' ' (ID: 220)
  Prédit: '1'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '1' → logprob: -0.05568123236298561
    2. 'valid' → logprob: -3.5556812286376953
    3. ' ' → logprob: -4.305681228637695
    4. '[' → logprob: -4.930681228637695
    5. 'val' → logprob: -5.805681228637695
    6. ' valid' → logprob: -6.430681228637695
    7. ' [' → logprob: -9.430681228637695
    8. 'l' → logprob: -10.805681228637695
    9. 'compr' → logprob: -10.930681228637695
    10. '   ' → logprob: -11.180681228637695

Token 322: '1' (ID: 16)
  Prédit: '1'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '1' → logprob: -0.012549090199172497
    2. 'valid' → logprob: -4.512548923492432
    3. 'val' → logprob: -7.137548923492432
    4. '[' → logprob: -7.512548923492432
    5. ' ' → logprob: -9.26254940032959
    6. '9' → logprob: -10.38754940032959
    7. ' valid' → logprob: -11.51254940032959
    8. 'validation' → logprob: -11.51254940032959
    9. '10' → logprob: -13.26254940032959
    10. '```' → logprob: -13.63754940032959

Token 323: ' à' (ID: 1221)
  Prédit: ' à'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' à' → logprob: -0.1446024775505066
    2. 'à' → logprob: -2.0196025371551514
    3. 'a' → logprob: -7.769602298736572
    4. '   ' → logprob: -8.14460277557373
    5. 'au' → logprob: -8.26960277557373
    6. ',' → logprob: -8.39460277557373
    7. '```' → logprob: -8.51960277557373
    8. ' a' → logprob: -9.14460277557373
    9. ' to' → logprob: -9.51960277557373
    10. ' ' → logprob: -9.51960277557373

Token 324: ' ' (ID: 220)
  Prédit: '9'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '9' → logprob: -5.848420551046729e-05
    2. ' ' → logprob: -9.7500581741333
    3. ' neuf' → logprob: -16.500059127807617
    4. '   ' → logprob: -16.750059127807617
    5. 'nine' → logprob: -17.625059127807617
    6. '  ' → logprob: -18.000059127807617
    7. ' nine' → logprob: -18.000059127807617
    8. '```' → logprob: -18.375059127807617
    9. '10' → logprob: -18.937559127807617
    10. '1' → logprob: -18.937559127807617

Token 325: '9' (ID: 24)
  Prédit: '9'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '9' → logprob: -2.339278580620885e-06
    2. ' ' → logprob: -13.000001907348633
    3. ' neuf' → logprob: -18.000001907348633
    4. 'nine' → logprob: -18.500001907348633
    5. '９' → logprob: -19.625001907348633
    6. ' nine' → logprob: -20.500001907348633
    7. '10' → logprob: -20.625001907348633
    8. '۹' → logprob: -20.750001907348633
    9. '99' → logprob: -20.875001907348633
    10. '999' → logprob: -20.875001907348633

Token 326: ',
' (ID: 412)
  Prédit: ','
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ',' → logprob: -0.7312516570091248
    2. ':' → logprob: -0.7312516570091248
    3. '       ' → logprob: -3.9812517166137695
    4. ':
' → logprob: -4.1062517166137695
    5. '   ' → logprob: -7.2312517166137695
    6. ':return' → logprob: -7.6062517166137695
    7. ' ,' → logprob: -8.23125171661377
    8. ' :' → logprob: -8.23125171661377
    9. ',
' → logprob: -8.60625171661377
    10. '.' → logprob: -9.35625171661377

Token 327: '       ' (ID: 309)
  Prédit: '       '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '       ' → logprob: -0.0002907718007918447
    2. 'return' → logprob: -8.750290870666504
    3. ' return' → logprob: -9.125290870666504
    4. 'print' → logprob: -11.375290870666504
    5. '   ' → logprob: -12.250290870666504
    6. '	' → logprob: -13.500290870666504
    7. '           ' → logprob: -13.625290870666504
    8. ' print' → logprob: -13.750290870666504
    9. ' ' → logprob: -14.000290870666504
    10. '        ' → logprob: -14.375290870666504

Token 328: ' #' (ID: 1069)
  Prédit: 'return'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'return' → logprob: -0.7520272135734558
    2. '       ' → logprob: -0.8770272135734558
    3. 'print' → logprob: -2.3770272731781006
    4. ' return' → logprob: -4.0020270347595215
    5. '   ' → logprob: -7.3770270347595215
    6. ' print' → logprob: -7.5020270347595215
    7. 'raise' → logprob: -8.37702751159668
    8. '        ' → logprob: -11.62702751159668
    9. '#' (adapté à ' #') → logprob: -11.75202751159668
    10. '    ' → logprob: -11.87702751159668

Token 329: ' on' (ID: 402)
  Prédit: '       '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '       ' → logprob: -0.14928807318210602
    2. 'print' → logprob: -2.0242881774902344
    3. 'return' → logprob: -5.399288177490234
    4. ' print' → logprob: -6.774288177490234
    5. '   ' → logprob: -7.274288177490234
    6. ' return' → logprob: -8.774288177490234
    7. 'raise' → logprob: -10.149288177490234
    8. '        
' → logprob: -11.774288177490234
    9. '        ' → logprob: -11.774288177490234
    10. '    ' → logprob: -12.274288177490234

Token 330: ' retourne' (ID: 178818)
  Prédit: 'print'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'print' → logprob: -0.09090336412191391
    2. '       ' → logprob: -3.7159032821655273
    3. ' print' → logprob: -3.8409032821655273
    4. 'return' → logprob: -3.8409032821655273
    5. '   ' → logprob: -4.090903282165527
    6. ' return' → logprob: -6.590903282165527
    7. 'raise' → logprob: -6.715903282165527
    8. '	print' → logprob: -9.215903282165527
    9. '    ' → logprob: -10.090903282165527
    10. ' ' → logprob: -10.465903282165527

Token 331: ' -' (ID: 533)
  Prédit: ' None'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' None' → logprob: -0.5043913722038269
    2. 'None' → logprob: -1.2543914318084717
    3. '-' → logprob: -2.5043914318084717
    4. '0' → logprob: -4.379391193389893
    5. ' -' → logprob: -4.754391193389893
    6. '"' → logprob: -5.004391193389893
    7. ' "' → logprob: -7.004391193389893
    8. ' ' → logprob: -8.87939167022705
    9. '   ' → logprob: -8.87939167022705
    10. 'False' → logprob: -10.12939167022705

Token 332: '1' (ID: 16)
  Prédit: '1'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '1' → logprob: -6.704273118884885e-07
    2. ' ' → logprob: -14.250000953674316
    3. '１' → logprob: -19.125
    4. '2' → logprob: -19.875
    5. '۱' → logprob: -20.125
    6. '   ' → logprob: -21.3125
    7. ' -' → logprob: -21.75
    8. ' ' → logprob: -21.8125
    9. '```' → logprob: -21.875
    10. '১' → logprob: -22.0

Token 333: ' pour' (ID: 1930)
  Prédit: '       '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '       ' → logprob: -0.017850449308753014
    2. '<|end|>' → logprob: -4.392850399017334
    3. '   ' → logprob: -5.642850399017334
    4. 'return' → logprob: -6.767850399017334
    5. '
' → logprob: -7.892850399017334
    6. ' return' → logprob: -9.267850875854492
    7. '<|end|>' → logprob: -10.767850875854492
    8. '        
' → logprob: -10.767850875854492
    9. '```' → logprob: -11.017850875854492
    10. ')' → logprob: -11.142850875854492

Token 334: ' signal' (ID: 12884)
  Prédit: 'ind'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'ind' → logprob: -0.36152219772338867
    2. 'sign' → logprob: -1.9865221977233887
    3. 'indi' → logprob: -2.1115221977233887
    4. 'signal' → logprob: -3.3615221977233887
    5. ' signal' → logprob: -5.111522197723389
    6. ' ind' → logprob: -5.486522197723389
    7. '   ' → logprob: -9.111522674560547
    8. ' sign' → logprob: -9.736522674560547
    9. '  ' → logprob: -10.361522674560547
    10. ' montrer' → logprob: -11.486522674560547

Token 335: 'er' (ID: 259)
  Prédit: 'er'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'er' → logprob: 0.0
    2. '#' → logprob: -18.25
    3. 'iser' → logprob: -18.375
    4. '   ' → logprob: -18.75
    5. '```' → logprob: -19.875
    6. ' er' → logprob: -20.625
    7. 'ler' → logprob: -21.0
    8. 'e' → logprob: -21.125
    9. '_er' → logprob: -21.5
    10. '       ' → logprob: -21.625

Token 336: ' une' (ID: 2463)
  Prédit: ' une'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' une' → logprob: -0.05977248400449753
    2. 'une' → logprob: -2.934772491455078
    3. ' un' → logprob: -5.434772491455078
    4. 'l' → logprob: -8.934772491455078
    5. ' l' → logprob: -9.309772491455078
    6. 'un' → logprob: -9.684772491455078
    7. ' que' → logprob: -9.684772491455078
    8. ' ' → logprob: -10.059772491455078
    9. '   ' → logprob: -10.309772491455078
    10. 'una' → logprob: -11.059772491455078

Token 337: ' entrée' (ID: 95590)
  Prédit: 'er'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'er' → logprob: -0.30829983949661255
    2. ' erreur' → logprob: -2.4332997798919678
    3. 'entrée' → logprob: -3.0582997798919678
    4. 'error' → logprob: -3.1832997798919678
    5. ' error' → logprob: -3.8082997798919678
    6. 'invalid' → logprob: -3.8082997798919678
    7. 'val' → logprob: -3.9332997798919678
    8. 'input' → logprob: -5.308300018310547
    9. ' input' → logprob: -5.683300018310547
    10. ' problème' → logprob: -6.058300018310547

Token 338: ' inval' (ID: 114516)
  Prédit: ' inval'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' inval' → logprob: -0.6717941164970398
    2. 'incorrect' → logprob: -1.4217941761016846
    3. 'invalid' → logprob: -2.5467941761016846
    4. ' incorrect' → logprob: -2.5467941761016846
    5. ' d' → logprob: -3.2967941761016846
    6. 'd' → logprob: -3.7967941761016846
    7. ' invalid' → logprob: -4.0467939376831055
    8. 'val' → logprob: -5.6717939376831055
    9. 'in' → logprob: -5.9217939376831055
    10. '_invalid' → logprob: -6.4217939376831055

Token 339: 'ide' (ID: 617)
  Prédit: 'ide'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'ide' → logprob: -0.004411839880049229
    2. 'idé' → logprob: -5.629411697387695
    3. 'id' → logprob: -7.254411697387695
    4. 'idee' → logprob: -9.754411697387695
    5. 'ider' → logprob: -11.004411697387695
    6. 'idez' → logprob: -12.004411697387695
    7. 'idité' → logprob: -12.129411697387695
    8. 'ée' → logprob: -12.129411697387695
    9. 'i' → logprob: -12.379411697387695
    10. 'isée' → logprob: -12.754411697387695

Token 340: '.
' (ID: 558)
  Prédit: '       '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '       ' → logprob: -0.0017390783177688718
    2. '   ' → logprob: -7.001739025115967
    3. 'return' → logprob: -8.126739501953125
    4. '
' → logprob: -8.376739501953125
    5. '<|end|>' → logprob: -9.001739501953125
    6. ' return' → logprob: -9.876739501953125
    7. '-' → logprob: -10.251739501953125
    8. '	' → logprob: -10.376739501953125
    9. '        
' → logprob: -10.626739501953125
    10. '	return' → logprob: -11.876739501953125

Token 341: '       ' (ID: 309)
  Prédit: '       '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '       ' → logprob: -0.03011537715792656
    2. 'return' → logprob: -3.5301153659820557
    3. '   ' → logprob: -8.030115127563477
    4. ' return' → logprob: -10.280115127563477
    5. '	' → logprob: -13.030115127563477
    6. '```' → logprob: -13.280115127563477
    7. '	return' → logprob: -13.905115127563477
    8. ' ' → logprob: -16.530115127563477
    9. '	   ' → logprob: -17.030115127563477
    10. '{return' → logprob: -17.155115127563477

Token 342: ' return' (ID: 622)
  Prédit: 'return'
  Correct (stricte): False
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'return' (adapté à ' return') → logprob: -7.612634362885728e-05
    2. ' return' → logprob: -10.000076293945312
    3. '       ' → logprob: -10.500076293945312
    4. '   ' → logprob: -12.750076293945312
    5. '	return' → logprob: -15.500076293945312
    6. '```' → logprob: -17.750076293945312
    7. '{return' → logprob: -19.375076293945312
    8. 'eturn' → logprob: -19.375076293945312
    9. ':return' → logprob: -20.000076293945312
    10. ' ' → logprob: -20.500076293945312

Token 343: ' -' (ID: 533)
  Prédit: ' -'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' -' → logprob: -0.07889056205749512
    2. '-' → logprob: -2.578890562057495
    3. ' ' → logprob: -14.828890800476074
    4. ' ' → logprob: -15.578890800476074
    5. '	' → logprob: -15.953890800476074
    6. '1' → logprob: -16.078889846801758
    7. '−' → logprob: -18.953889846801758
    8. '‌' → logprob: -19.203889846801758
    9. '0' → logprob: -20.078889846801758
    10. '  ' → logprob: -20.078889846801758

Token 344: '1' (ID: 16)
  Prédit: '1'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '1' → logprob: -1.8624639324116288e-06
    2. ' ' → logprob: -13.250001907348633
    3. '۱' → logprob: -19.375001907348633
    4. '   ' → logprob: -19.625001907348633
    5. '１' → logprob: -19.625001907348633
    6. '  ' → logprob: -20.125001907348633
    7. '१' → logprob: -20.125001907348633
    8. '১' → logprob: -20.500001907348633
    9. '```' → logprob: -20.937501907348633
    10. '<|end|>' → logprob: -21.500001907348633

Token 345: '

' (ID: 279)
  Prédit: ''
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False

Token 346: '#' (ID: 2)
  Prédit: ''
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False

Token 347: ' Ce' (ID: 14228)
  Prédit: 'if'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'if' → logprob: -0.21806316077709198
    2. 'solve' → logprob: -2.2180631160736084
    3. '#' → logprob: -2.9680631160736084
    4. '```' → logprob: -4.2180633544921875
    5. '<|end|>' → logprob: -4.7180633544921875
    6. 'def' → logprob: -5.3430633544921875
    7. ' solve' → logprob: -5.9680633544921875
    8. ' if' → logprob: -5.9680633544921875
    9. '
' → logprob: -7.7180633544921875
    10. '\' → logprob: -7.7180633544921875

Token 348: ' bloc' (ID: 51218)
  Prédit: 'def'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'def' → logprob: -0.47525161504745483
    2. ' ' → logprob: -1.7252516746520996
    3. 'if' → logprob: -2.6002516746520996
    4. ' if' → logprob: -3.6002516746520996
    5. ' def' → logprob: -3.8502516746520996
    6. ' code' → logprob: -4.1002516746521
    7. '#' → logprob: -4.7252516746521
    8. '_' → logprob: -4.8502516746521
    9. 'n' → logprob: -4.8502516746521
    10. '\' → logprob: -4.9752516746521

Token 349: ' vér' (ID: 42524)
  Prédit: 'if'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'if' → logprob: -0.02327960729598999
    2. ' if' → logprob: -3.7732796669006348
    3. '_' → logprob: -11.773279190063477
    4. '```' → logprob: -12.148279190063477
    5. ' is' → logprob: -12.773279190063477
    6. '#' → logprob: -12.773279190063477
    7. '_if' → logprob: -12.773279190063477
    8. 's' → logprob: -13.023279190063477
    9. '
' → logprob: -13.148279190063477
    10. 'd' → logprob: -13.398279190063477

Token 350: 'ifie' (ID: 46409)
  Prédit: 'ifie'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'ifie' → logprob: -0.018508324399590492
    2. 'if' → logprob: -4.018508434295654
    3. 'ifier' → logprob: -9.518507957458496
    4. ' if' → logprob: -9.518507957458496
    5. 'ifié' → logprob: -9.893507957458496
    6. 'ifiez' → logprob: -10.143507957458496
    7. 'ify' → logprob: -10.268507957458496
    8. 'ification' → logprob: -10.268507957458496
    9. '```' → logprob: -11.018507957458496
    10. 'ifi' → logprob: -11.143507957458496

Token 351: ' si' (ID: 1784)
  Prédit: 'if'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'if' → logprob: -0.2519929111003876
    2. ' if' → logprob: -1.50199294090271
    3. ' si' → logprob: -10.501993179321289
    4. 'si' → logprob: -10.751993179321289
    5. ' ' → logprob: -12.251993179321289
    6. '  ' → logprob: -12.501993179321289
    7. ' ' → logprob: -13.376993179321289
    8. '	if' → logprob: -13.626993179321289
    9. '_if' → logprob: -13.751993179321289
    10. 'If' → logprob: -14.376993179321289

Token 352: ' ce' (ID: 2357)
  Prédit: ' __'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' __' → logprob: -0.3132706880569458
    2. '__' → logprob: -1.3132706880569458
    3. ' ' → logprob: -11.938270568847656
    4. ' ' → logprob: -13.688270568847656
    5. 'name' → logprob: -14.438270568847656
    6. 'if' → logprob: -15.063270568847656
    7. '```' → logprob: -15.813270568847656
    8. ' "__' → logprob: -16.313270568847656
    9. '_name' → logprob: -17.188270568847656
    10. ' ' → logprob: -17.313270568847656

Token 353: ' fichier' (ID: 69637)
  Prédit: '__'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '__' → logprob: -0.32294729351997375
    2. ' __' → logprob: -1.3229472637176514
    3. '_' → logprob: -5.6979475021362305
    4. 'if' → logprob: -6.3229475021362305
    5. 'n' → logprob: -6.9479475021362305
    6. ' ==' → logprob: -6.9479475021362305
    7. 'name' → logprob: -7.0729475021362305
    8. '==' → logprob: -7.4479475021362305
    9. '_name' → logprob: -7.8229475021362305
    10. ''' → logprob: -8.94794750213623

Token 354: ' est' (ID: 893)
  Prédit: '__'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '__' → logprob: -0.07290621846914291
    2. ' __' → logprob: -3.822906255722046
    3. 'if' → logprob: -3.947906255722046
    4. 'est' → logprob: -4.572906017303467
    5. ' ==' → logprob: -4.822906017303467
    6. '==' → logprob: -5.697906017303467
    7. 'name' → logprob: -6.197906017303467
    8. '_name' → logprob: -6.197906017303467
    9. ' est' → logprob: -6.322906017303467
    10. ' is' → logprob: -7.822906017303467

Token 355: ' exécut' (ID: 165350)
  Prédit: '__'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '__' → logprob: -0.33140209317207336
    2. 'le' → logprob: -1.831402063369751
    3. ' exécut' → logprob: -2.831402063369751
    4. ' le' → logprob: -3.081402063369751
    5. ' __' → logprob: -4.83140230178833
    6. 'execut' → logprob: -5.58140230178833
    7. '_le' → logprob: -6.70640230178833
    8. 'name' → logprob: -6.70640230178833
    9. 'ex' → logprob: -7.45640230178833
    10. ' "__' → logprob: -7.58140230178833

Token 356: 'é' (ID: 377)
  Prédit: 'é'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'é' → logprob: -0.021094372496008873
    2. '__' → logprob: -4.02109432220459
    3. 'if' → logprob: -6.27109432220459
    4. 'e' → logprob: -7.27109432220459
    5. ' en' → logprob: -8.89609432220459
    6. 'able' → logprob: -9.39609432220459
    7. 'd' → logprob: -10.27109432220459
    8. '   ' → logprob: -11.52109432220459
    9. 'er' → logprob: -11.64609432220459
    10. '_' → logprob: -11.64609432220459

Token 357: ' comme' (ID: 7971)
  Prédit: 'en'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'en' → logprob: -0.5114647746086121
    2. ' en' → logprob: -1.5114648342132568
    3. 'direct' → logprob: -2.011464834213257
    4. ' directement' → logprob: -4.136464595794678
    5. 'if' → logprob: -4.261464595794678
    6. 'as' → logprob: -4.761464595794678
    7. ' as' → logprob: -6.136464595794678
    8. '__' → logprob: -6.761464595794678
    9. ' directly' → logprob: -6.886464595794678
    10. '_en' → logprob: -6.886464595794678

Token 358: ' programme' (ID: 18190)
  Prédit: '__'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '__' → logprob: -0.02880280837416649
    2. 'le' → logprob: -4.653802871704102
    3. ' __' → logprob: -5.028802871704102
    4. 'un' → logprob: -5.153802871704102
    5. 'principal' → logprob: -6.028802871704102
    6. ' le' → logprob: -6.528802871704102
    7. ' un' → logprob: -6.528802871704102
    8. '_le' → logprob: -8.153802871704102
    9. ' script' → logprob: -8.403802871704102
    10. 'main' → logprob: -8.653802871704102

Token 359: ' principal' (ID: 10589)
  Prédit: 'if'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'if' → logprob: -0.2904239892959595
    2. '
' → logprob: -1.4154239892959595
    3. ' if' → logprob: -5.54042387008667
    4. '

' → logprob: -5.91542387008667
    5. '\n' → logprob: -7.04042387008667
    6. '_
' → logprob: -7.79042387008667
    7. '```' → logprob: -8.040424346923828
    8. '  
' → logprob: -8.290424346923828
    9. '\' → logprob: -8.665424346923828
    10. '_' → logprob: -9.290424346923828

Token 360: '.
' (ID: 558)
  Prédit: '
'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '
' → logprob: -0.010486460290849209
    2. 'if' → logprob: -4.760486602783203
    3. '

' → logprob: -6.385486602783203
    4. '\n' → logprob: -9.760486602783203
    5. '
' → logprob: -10.135486602783203
    6. '  
' → logprob: -10.510486602783203
    7. ' if' → logprob: -11.010486602783203
    8. '```' → logprob: -11.010486602783203
    9. ' 
' → logprob: -11.260486602783203
    10. '
    
' → logprob: -12.760486602783203

Token 361: '#' (ID: 2)
  Prédit: 'if'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'if' → logprob: -4.320199877838604e-07
    2. ' if' → logprob: -15.25
    3. '
' → logprob: -16.25
    4. '```' → logprob: -18.375
    5. 'i' → logprob: -20.375
    6. '  
' → logprob: -21.875
    7. 'If' → logprob: -22.0
    8. '    
' → logprob: -22.25
    9. ' 
' → logprob: -22.5
    10. '

' → logprob: -23.125

Token 362: ' '__' (ID: 28278)
  Prédit: 'if'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'if' → logprob: -1.5048530030981055e-06
    2. ' if' → logprob: -13.500001907348633
    3. '```' → logprob: -19.875001907348633
    4. '
' → logprob: -21.375001907348633
    5. 'If' → logprob: -22.875001907348633
    6. '#' → logprob: -23.625001907348633
    7. 'i' → logprob: -24.250001907348633
    8. 'import' → logprob: -25.750001907348633
    9. '#if' → logprob: -25.875001907348633
    10. 'from' → logprob: -26.000001907348633

Token 363: 'name' (ID: 897)
  Prédit: 'name'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'name' → logprob: -0.0015023599844425917
    2. 'main' → logprob: -6.501502513885498
    3. 'nam' → logprob: -17.751502990722656
    4. 'na' → logprob: -18.001502990722656
    5. ' name' → logprob: -20.751502990722656
    6. '```' → logprob: -21.501502990722656
    7. 'n' → logprob: -22.751502990722656
    8. '_main' → logprob: -23.501502990722656
    9. ' main' → logprob: -23.751502990722656
    10. '(name' → logprob: -24.001502990722656

Token 364: '__' (ID: 771)
  Prédit: '__'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '__' → logprob: -0.027811788022518158
    2. '==' → logprob: -4.1528120040893555
    3. ' ==' → logprob: -5.1528120040893555
    4. '=='' → logprob: -5.7778120040893555
    5. ''' → logprob: -5.9028120040893555
    6. '=="' → logprob: -10.902812004089355
    7. '```' → logprob: -10.902812004089355
    8. '_' → logprob: -11.027812004089355
    9. '=' → logprob: -12.277812004089355
    10. '__
' → logprob: -12.402812004089355

Token 365: ''' (ID: 6)
  Prédit: '=='
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '==' → logprob: -0.7788750529289246
    2. ' ==' → logprob: -0.9038750529289246
    3. ''' → logprob: -2.2788751125335693
    4. '=='' → logprob: -3.5288751125335693
    5. '__' → logprob: -5.65387487411499
    6. '=="' → logprob: -7.77887487411499
    7. '```' → logprob: -8.778875350952148
    8. ' =='' → logprob: -9.153875350952148
    9. ''''' → logprob: -10.278875350952148
    10. '"' → logprob: -10.653875350952148

Token 366: ' est' (ID: 893)
  Prédit: ' =='
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' ==' → logprob: -0.2524254322052002
    2. '==' → logprob: -1.5024254322052002
    3. '=="' → logprob: -8.502425193786621
    4. '=='' → logprob: -8.627425193786621
    5. '=' → logprob: -9.502425193786621
    6. ' =='' → logprob: -11.877425193786621
    7. ' =' → logprob: -11.877425193786621
    8. ')==' → logprob: -12.252425193786621
    9. ')' → logprob: -12.377425193786621
    10. ' =="' → logprob: -12.377425193786621

Token 367: ' une' (ID: 2463)
  Prédit: '''
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ''' → logprob: -0.24854058027267456
    2. '"' → logprob: -1.6235406398773193
    3. ' '__' → logprob: -4.12354040145874
    4. ' "__' → logprob: -5.24854040145874
    5. '__' → logprob: -6.87354040145874
    6. ' ==' → logprob: -8.498540878295898
    7. '==' → logprob: -9.248540878295898
    8. '=' → logprob: -10.998540878295898
    9. '('__' → logprob: -11.123540878295898
    10. ''s' → logprob: -11.373540878295898

Token 368: ' variable' (ID: 11076)
  Prédit: '__'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '__' → logprob: -0.42170271277427673
    2. ' ==' → logprob: -1.7967027425765991
    3. '==' → logprob: -2.6717026233673096
    4. 'variable' → logprob: -3.4217026233673096
    5. 'string' → logprob: -4.046702861785889
    6. ' __' → logprob: -4.171702861785889
    7. '"' → logprob: -4.421702861785889
    8. ' variable' → logprob: -5.171702861785889
    9. 'special' → logprob: -5.421702861785889
    10. '=' → logprob: -5.796702861785889

Token 369: ' spéciale' (ID: 142408)
  Prédit: ' =='
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' ==' → logprob: -0.6492965817451477
    2. '==' → logprob: -0.7742965817451477
    3. '=='' → logprob: -4.649296760559082
    4. '=="' → logprob: -5.524296760559082
    5. '__' → logprob: -6.149296760559082
    6. '=' → logprob: -7.399296760559082
    7. ''' → logprob: -9.274296760559082
    8. ' =' → logprob: -10.024296760559082
    9. '===' → logprob: -10.774296760559082
    10. ' =='' → logprob: -10.899296760559082

Token 370: ' en' (ID: 469)
  Prédit: ' =='
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' ==' → logprob: -0.02131635509431362
    2. '==' → logprob: -3.8963162899017334
    3. '=' → logprob: -8.021316528320312
    4. ' =' → logprob: -8.271316528320312
    5. '=="' → logprob: -9.396316528320312
    6. '=='' → logprob: -9.521316528320312
    7. ' ===' → logprob: -11.146316528320312
    8. '__' → logprob: -12.146316528320312
    9. ' ' → logprob: -12.771316528320312
    10. ' =='' → logprob: -13.021316528320312

Token 371: ' Python' (ID: 26534)
  Prédit: 'Python'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'Python' → logprob: -0.32881611585617065
    2. 'python' → logprob: -1.3288161754608154
    3. ' Python' → logprob: -4.953815937042236
    4. '__' → logprob: -5.078815937042236
    5. '"' → logprob: -6.828815937042236
    6. ''' → logprob: -7.203815937042236
    7. ' python' → logprob: -8.578816413879395
    8. '_python' → logprob: -9.578816413879395
    9. ' "__' → logprob: -10.703816413879395
    10. ' '__' → logprob: -11.328816413879395

Token 372: ' qui' (ID: 2780)
  Prédit: ' =='
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' ==' → logprob: -0.0077091967687010765
    2. '==' → logprob: -4.88270902633667
    3. 'if' → logprob: -9.882709503173828
    4. ' =' → logprob: -11.007709503173828
    5. '=="' → logprob: -11.632709503173828
    6. '=='' → logprob: -12.132709503173828
    7. ' =="' → logprob: -12.507709503173828
    8. ' ' → logprob: -12.882709503173828
    9. ' =='' → logprob: -13.132709503173828
    10. '=' → logprob: -13.132709503173828

Token 373: ' prend' (ID: 37463)
  Prédit: ' =='
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' ==' → logprob: -0.1433108001947403
    2. '==' → logprob: -2.018310785293579
    3. '=='' → logprob: -8.143310546875
    4. '=="' → logprob: -8.518310546875
    5. '=' → logprob: -9.893310546875
    6. ' =' → logprob: -10.893310546875
    7. ' =='' → logprob: -11.268310546875
    8. ' ' → logprob: -11.518310546875
    9. ' ' → logprob: -11.643310546875
    10. '===' → logprob: -11.768310546875

Token 374: ' comme' (ID: 7971)
  Prédit: '"'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '"' → logprob: -0.6824826598167419
    2. ''' → logprob: -0.8074826598167419
    3. ' "__' → logprob: -3.9324827194213867
    4. ' '__' → logprob: -3.9324827194213867
    5. '__' → logprob: -5.307482719421387
    6. ' la' → logprob: -6.557482719421387
    7. 'le' → logprob: -7.182482719421387
    8. ' le' → logprob: -7.182482719421387
    9. '"value' → logprob: -7.557482719421387
    10. ' ' → logprob: -8.557482719421387

Token 375: ' valeur' (ID: 41664)
  Prédit: 'val'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'val' → logprob: -0.03620822727680206
    2. ''' → logprob: -3.786208152770996
    3. '"' → logprob: -4.536208152770996
    4. 'la' → logprob: -6.911208152770996
    5. 'value' → logprob: -7.911208152770996
    6. '__' → logprob: -8.036208152770996
    7. ' valeur' → logprob: -9.161208152770996
    8. '"value' → logprob: -9.286208152770996
    9. ''value' → logprob: -9.536208152770996
    10. '_val' → logprob: -10.036208152770996

Token 376: ' '__' (ID: 28278)
  Prédit: '''
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ''' → logprob: -0.056148711591959
    2. '"' → logprob: -3.0561487674713135
    3. '__' → logprob: -5.556148529052734
    4. ' '__' → logprob: -5.931148529052734
    5. ' "__' → logprob: -6.931148529052734
    6. '('__' → logprob: -11.306148529052734
    7. ' __' → logprob: -11.806148529052734
    8. '("__' → logprob: -11.806148529052734
    9. ''s' → logprob: -13.556148529052734
    10. ''name' → logprob: -13.806148529052734

Token 377: 'main' (ID: 7731)
  Prédit: 'main'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'main' → logprob: -1.1472419600977446e-06
    2. 'name' → logprob: -13.750000953674316
    3. ' main' → logprob: -17.250001907348633
    4. '_main' → logprob: -18.250001907348633
    5. 'maine' → logprob: -20.250001907348633
    6. '	main' → logprob: -20.625001907348633
    7. 'ma' → logprob: -21.125001907348633
    8. 'mai' → logprob: -21.875001907348633
    9. 'm' → logprob: -22.250001907348633
    10. '(main' → logprob: -22.250001907348633

Token 378: '__' (ID: 771)
  Prédit: '__'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '__' → logprob: -0.0031781906727701426
    2. '__':
' → logprob: -5.753178119659424
    3. '___' → logprob: -15.878178596496582
    4. '__('' → logprob: -16.003177642822266
    5. '__
' → logprob: -16.628177642822266
    6. ''' → logprob: -16.753177642822266
    7. '__.' → logprob: -17.003177642822266
    8. '__.__' → logprob: -18.253177642822266
    9. '_'' → logprob: -18.378177642822266
    10. '____' → logprob: -18.503177642822266

Token 379: ''
' (ID: 2207)
  Prédit: '__'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '__' → logprob: -0.09168459475040436
    2. ''' → logprob: -2.716684579849243
    3. '__':
' → logprob: -3.841684579849243
    4. ''
' → logprob: -10.966684341430664
    5. ' '' → logprob: -11.966684341430664
    6. '```' → logprob: -11.966684341430664
    7. '___' → logprob: -12.341684341430664
    8. '__
' → logprob: -12.466684341430664
    9. 'if' → logprob: -12.591684341430664
    10. '__('' → logprob: -13.091684341430664

Token 380: '#' (ID: 2)
  Prédit: ':'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ':' → logprob: -0.14012914896011353
    2. ' if' → logprob: -2.7651290893554688
    3. 'if' → logprob: -2.7651290893554688
    4. ' ==' → logprob: -6.265129089355469
    5. '==' → logprob: -6.765129089355469
    6. ' :' → logprob: -7.140129089355469
    7. '```' → logprob: -8.015129089355469
    8. ',' → logprob: -9.265129089355469
    9. '.' → logprob: -9.390129089355469
    10. '<|end|>' → logprob: -9.765129089355469

Token 381: ' lorsque' (ID: 39361)
  Prédit: ':'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ':' → logprob: -0.645092785358429
    2. ' if' → logprob: -1.2700927257537842
    3. 'if' → logprob: -1.6450927257537842
    4. ' :' → logprob: -7.520092964172363
    5. '.' → logprob: -8.145092964172363
    6. ',' → logprob: -8.395092964172363
    7. ' when' → logprob: -8.895092964172363
    8. ':
' → logprob: -9.270092964172363
    9. ' ==' → logprob: -9.270092964172363
    10. ' and' → logprob: -10.395092964172363

Token 382: ' le' (ID: 505)
  Prédit: '__'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '__' → logprob: -0.029751179739832878
    2. ' __' → logprob: -3.5297510623931885
    3. ' le' → logprob: -15.02975082397461
    4. ' ' → logprob: -16.27975082397461
    5. ' ' → logprob: -16.52975082397461
    6. '/__' → logprob: -16.65475082397461
    7. '___' → logprob: -17.02975082397461
    8. ' "__' → logprob: -17.40475082397461
    9. 'le' → logprob: -17.77975082397461
    10. 'the' → logprob: -17.90475082397461

Token 383: ' script' (ID: 11713)
  Prédit: '__'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '__' → logprob: -0.03557441756129265
    2. 'f' → logprob: -4.035574436187744
    3. ' __' → logprob: -5.285574436187744
    4. 'file' → logprob: -5.410574436187744
    5. 'nom' → logprob: -5.660574436187744
    6. 'script' → logprob: -6.785574436187744
    7. ' fichier' → logprob: -7.035574436187744
    8. 'code' → logprob: -7.285574436187744
    9. 'name' → logprob: -7.535574436187744
    10. 'programme' → logprob: -8.035573959350586

Token 384: ' est' (ID: 893)
  Prédit: 'est'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'est' → logprob: -0.22723092138767242
    2. ' est' → logprob: -1.6022309064865112
    3. ' is' → logprob: -6.477231025695801
    4. ''est' → logprob: -9.4772310256958
    5. 's' → logprob: -9.9772310256958
    6. '__' → logprob: -10.7272310256958
    7. 'ex' → logprob: -10.7272310256958
    8. 'name' → logprob: -10.8522310256958
    9. '.py' → logprob: -10.8522310256958
    10. '_est' → logprob: -11.2272310256958

Token 385: ' exécut' (ID: 165350)
  Prédit: 'ex'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'ex' → logprob: -0.014634108170866966
    2. ' exécut' → logprob: -4.889634132385254
    3. 'execut' → logprob: -5.014634132385254
    4. 'exec' → logprob: -9.014634132385254
    5. 'direct' → logprob: -9.389634132385254
    6. 'l' → logprob: -9.389634132385254
    7. 'le' → logprob: -10.764634132385254
    8. '__' → logprob: -10.764634132385254
    9. 'run' → logprob: -12.139634132385254
    10. 'execute' → logprob: -12.139634132385254

Token 386: 'é' (ID: 377)
  Prédit: 'é'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'é' → logprob: -0.08913598209619522
    2. '__' → logprob: -2.4641358852386475
    3. 'ed' → logprob: -9.964136123657227
    4. 'u' → logprob: -10.339136123657227
    5. 'if' → logprob: -10.714136123657227
    6. 'ué' → logprob: -10.839136123657227
    7. 'né' → logprob: -10.964136123657227
    8. ' __' → logprob: -11.839136123657227
    9. 'ré' → logprob: -11.964136123657227
    10. '   ' → logprob: -12.214136123657227

Token 387: ' directement' (ID: 52317)
  Prédit: '__'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '__' → logprob: -1.4412888288497925
    2. ':' → logprob: -1.6912888288497925
    3. 'if' → logprob: -1.9412888288497925
    4. ' ==' → logprob: -2.066288948059082
    5. ' if' → logprob: -2.941288948059082
    6. ' as' → logprob: -3.316288948059082
    7. ' en' → logprob: -3.316288948059082
    8. '==' → logprob: -3.316288948059082
    9. ' directly' → logprob: -3.441288948059082
    10. '"' → logprob: -3.816288948059082

Token 388: ' par' (ID: 686)
  Prédit: 'if'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'if' → logprob: -0.0025587803684175014
    2. ':' → logprob: -6.627558708190918
    3. ' if' → logprob: -7.002558708190918
    4. ':
' → logprob: -8.127558708190918
    5. '
' → logprob: -10.877558708190918
    6. '```' → logprob: -12.877558708190918
    7. '.' → logprob: -13.252558708190918
    8. ',' → logprob: -14.252558708190918
    9. '  
' → logprob: -14.627558708190918
    10. ':

' → logprob: -14.627558708190918

Token 389: ' l' (ID: 305)
  Prédit: 'python'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'python' → logprob: -0.8192995190620422
    2. 'le' → logprob: -1.5692994594573975
    3. 'Python' → logprob: -1.5692994594573975
    4. 'l' → logprob: -2.6942994594573975
    5. '__' → logprob: -2.9442994594573975
    6. 'inter' → logprob: -4.569299697875977
    7. ' l' → logprob: -4.694299697875977
    8. ' le' → logprob: -6.944299697875977
    9. ' Python' → logprob: -7.319299697875977
    10. 'la' → logprob: -7.944299697875977

Token 390: ''utilisateur' (ID: 140803)
  Prédit: ''inter'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ''inter' → logprob: -1.0223493576049805
    2. ''utilisateur' → logprob: -1.1473493576049805
    3. 'inter' → logprob: -1.2723493576049805
    4. 'python' → logprob: -3.6473493576049805
    5. '__' → logprob: -5.1473493576049805
    6. ''' → logprob: -5.5223493576049805
    7. 'a' → logprob: -6.1473493576049805
    8. 'e' → logprob: -6.6473493576049805
    9. 'es' → logprob: -7.1473493576049805
    10. '_inter' → logprob: -7.6473493576049805

Token 391: '.
' (ID: 558)
  Prédit: 'if'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'if' → logprob: -0.0018899721326306462
    2. '
' → logprob: -7.001890182495117
    3. ' if' → logprob: -7.126890182495117
    4. ':' → logprob: -9.626890182495117
    5. '

' → logprob: -9.751890182495117
    6. ':
' → logprob: -10.126890182495117
    7. '```' → logprob: -12.501890182495117
    8. '  
' → logprob: -13.126890182495117
    9. ':

' → logprob: -13.251890182495117
    10. '.' → logprob: -14.251890182495117

Token 392: 'if' (ID: 366)
  Prédit: 'if'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'if' → logprob: -5.319370302458992e-06
    2. '
' → logprob: -12.250005722045898
    3. ' if' → logprob: -15.250005722045898
    4. '```' → logprob: -15.375005722045898
    5. '

' → logprob: -17.5000057220459
    6. '  
' → logprob: -18.0000057220459
    7. '    
' → logprob: -18.6250057220459
    8. ' 
' → logprob: -21.1250057220459
    9. '``' → logprob: -21.5000057220459
    10. '	if' → logprob: -21.6250057220459

Token 393: ' __' (ID: 2516)
  Prédit: ' __'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' __' → logprob: -0.011088847182691097
    2. '__' → logprob: -4.511088848114014
    3. ' ' → logprob: -10.136088371276855
    4. ' name' → logprob: -14.511088371276855
    5. 'name' → logprob: -14.761088371276855
    6. ' ' → logprob: -15.261088371276855
    7. '_name' → logprob: -15.636088371276855
    8. '_' → logprob: -17.636089324951172
    9. ' ' → logprob: -17.761089324951172
    10. 'Name' → logprob: -18.136089324951172

Token 394: 'name' (ID: 897)
  Prédit: ' =='
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' ==' → logprob: -0.8116433620452881
    2. '==' → logprob: -0.9366433620452881
    3. '__' → logprob: -1.811643362045288
    4. '=="' → logprob: -8.186643600463867
    5. ' __' → logprob: -9.311643600463867
    6. '=='' → logprob: -9.436643600463867
    7. '=' → logprob: -9.936643600463867
    8. '_' → logprob: -11.436643600463867
    9. 'main' → logprob: -11.811643600463867
    10. '[' → logprob: -11.936643600463867

Token 395: '__' (ID: 771)
  Prédit: '__'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '__' → logprob: -1.5048530030981055e-06
    2. '_' → logprob: -14.375001907348633
    3. '==' → logprob: -15.625001907348633
    4. '____' → logprob: -15.625001907348633
    5. '__.__' → logprob: -15.625001907348633
    6. '__
' → logprob: -15.750001907348633
    7. ' __' → logprob: -16.750001907348633
    8. '___' → logprob: -17.375001907348633
    9. '__,' → logprob: -17.875001907348633
    10. ' ==' → logprob: -18.375001907348633

Token 396: ' ==' (ID: 951)
  Prédit: '__'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '__' → logprob: -0.48963916301727295
    2. '==' → logprob: -0.989639163017273
    3. ' ==' → logprob: -4.2396392822265625
    4. '=="' → logprob: -7.3646392822265625
    5. '=='' → logprob: -7.9896392822265625
    6. '=' → logprob: -10.114639282226562
    7. '_' → logprob: -12.114639282226562
    8. '==
' → logprob: -12.489639282226562
    9. '"' → logprob: -13.114639282226562
    10. '===' → logprob: -13.489639282226562

Token 397: ' '__' (ID: 28278)
  Prédit: '"'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '"' → logprob: -0.1615256667137146
    2. ''' → logprob: -1.9115257263183594
    3. ' "__' → logprob: -6.911525726318359
    4. '__' → logprob: -8.53652572631836
    5. ' '__' → logprob: -9.16152572631836
    6. 'main' → logprob: -13.53652572631836
    7. ''"' → logprob: -14.53652572631836
    8. ' "' → logprob: -14.91152572631836
    9. ''s' → logprob: -15.53652572631836
    10. '('__' → logprob: -15.91152572631836

Token 398: 'main' (ID: 7731)
  Prédit: 'main'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'main' → logprob: 0.0
    2. '__' → logprob: -20.125
    3. ' main' → logprob: -20.375
    4. 'name' → logprob: -21.375
    5. '_main' → logprob: -21.625
    6. 'ma' → logprob: -21.75
    7. 'm' → logprob: -21.875
    8. 'mai' → logprob: -22.25
    9. 'maine' → logprob: -22.625
    10. '	main' → logprob: -23.0

Token 399: '__':
' (ID: 39314)
  Prédit: '__'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '__' → logprob: -0.10022026300430298
    2. '__':
' → logprob: -2.350220203399658
    3. '_' → logprob: -11.225220680236816
    4. '__":
' → logprob: -16.1002197265625
    5. '__:' → logprob: -16.1002197265625
    6. '_'' → logprob: -16.9752197265625
    7. '___' → logprob: -17.9752197265625
    8. '__('' → logprob: -18.6002197265625
    9. ''' → logprob: -18.8502197265625
    10. '____' → logprob: -18.8502197265625

Token 400: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.2978242337703705
    2. ':' → logprob: -1.4228242635726929
    3. ':
' → logprob: -4.672824382781982
    4. '    
' → logprob: -5.922824382781982
    5. '<|end|>' → logprob: -5.922824382781982
    6. '```' → logprob: -7.547824382781982
    7. '
' → logprob: -7.922824382781982
    8. '<|end|>' → logprob: -8.922823905944824
    9. 'print' → logprob: -9.172823905944824
    10. ' print' → logprob: -9.422823905944824

Token 401: ' #' (ID: 1069)
  Prédit: 'result'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'result' → logprob: -0.20937295258045197
    2. 'print' → logprob: -1.7093729972839355
    3. ' result' → logprob: -4.9593729972839355
    4. ' print' → logprob: -7.2093729972839355
    5. '   ' → logprob: -8.834372520446777
    6. 'res' → logprob: -11.334372520446777
    7. ' resultat' → logprob: -11.959372520446777
    8. ' résultat' → logprob: -13.209372520446777
    9. 'resultado' → logprob: -13.209372520446777
    10. 'output' → logprob: -14.084372520446777

Token 402: ' App' (ID: 2583)
  Prédit: 'result'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'result' → logprob: -0.0011905835708603263
    2. 'print' → logprob: -6.751190662384033
    3. 'res' → logprob: -11.376190185546875
    4. ' result' → logprob: -11.876190185546875
    5. 'rés' → logprob: -13.876190185546875
    6. 'output' → logprob: -14.626190185546875
    7. 'resultado' → logprob: -15.001190185546875
    8. '   ' → logprob: -16.501190185546875
    9. ' resultat' → logprob: -16.626190185546875
    10. 'r' → logprob: -17.126190185546875

Token 403: 'eler' (ID: 6998)
  Prédit: 'el'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'el' → logprob: -0.43670010566711426
    2. 'eler' → logprob: -1.0617001056671143
    3. 'ler' → logprob: -6.061699867248535
    4. '   ' → logprob: -6.061699867248535
    5. 'eller' → logprob: -6.811699867248535
    6. 'l' → logprob: -7.561699867248535
    7. 'elle' → logprob: -7.686699867248535
    8. 'le' → logprob: -8.186699867248535
    9. 'er' → logprob: -8.436699867248535
    10. 'elé' → logprob: -8.561699867248535

Token 404: ' la' (ID: 557)
  Prédit: 'result'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'result' → logprob: -0.20604711771011353
    2. 'print' → logprob: -1.7060470581054688
    3. 'solve' → logprob: -5.581047058105469
    4. ' result' → logprob: -7.456047058105469
    5. '   ' → logprob: -8.956047058105469
    6. ' print' → logprob: -9.456047058105469
    7. ' solve' → logprob: -10.831047058105469
    8. 'res' → logprob: -11.081047058105469
    9. 'resultado' → logprob: -11.581047058105469
    10. ' resultat' → logprob: -11.706047058105469

Token 405: ' fonction' (ID: 17610)
  Prédit: 'print'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'print' → logprob: -0.03709667548537254
    2. 'result' → logprob: -3.7870967388153076
    3. 'solve' → logprob: -4.2870965003967285
    4. ' print' → logprob: -12.287096977233887
    5. ' solve' → logprob: -13.162096977233887
    6. 'solution' → logprob: -13.537096977233887
    7. ' result' → logprob: -13.787096977233887
    8. '   ' → logprob: -14.412096977233887
    9. 'value' → logprob: -14.787096977233887
    10. 'answer' → logprob: -15.662096977233887

Token 406: ' '' (ID: 461)
  Prédit: 'result'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'result' → logprob: -0.013712084852159023
    2. 'print' → logprob: -5.138711929321289
    3. 'solve' → logprob: -5.513711929321289
    4. ' result' → logprob: -5.638711929321289
    5. ' solve' → logprob: -9.263711929321289
    6. ' print' → logprob: -10.263711929321289
    7. '   ' → logprob: -11.763711929321289
    8. ' resultat' → logprob: -12.138711929321289
    9. ' résultat' → logprob: -12.388711929321289
    10. 'resultado' → logprob: -12.513711929321289

Token 407: 'solve' (ID: 117273)
  Prédit: 'solve'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'solve' → logprob: -0.038045283406972885
    2. 'print' → logprob: -3.2880451679229736
    3. ' solve' → logprob: -12.913044929504395
    4. 'result' → logprob: -13.913044929504395
    5. 'resolve' → logprob: -16.03804588317871
    6. 'solution' → logprob: -17.16304588317871
    7. ' print' → logprob: -17.28804588317871
    8. '   ' → logprob: -17.28804588317871
    9. 'printf' → logprob: -17.78804588317871
    10. 'sol' → logprob: -17.78804588317871

Token 408: ''' (ID: 6)
  Prédit: '()'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '()' → logprob: -0.000741134281270206
    2. '()
' → logprob: -7.250741004943848
    3. '()`' → logprob: -10.875741004943848
    4. '()"' → logprob: -11.750741004943848
    5. '()

' → logprob: -13.000741004943848
    6. '()
' → logprob: -14.500741004943848
    7. '())' → logprob: -14.625741004943848
    8. '():' → logprob: -15.375741004943848
    9. ' ()' → logprob: -15.625741004943848
    10. '()\' → logprob: -15.625741004943848

Token 409: ' défin' (ID: 57890)
  Prédit: '()'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '()' → logprob: -0.03270793333649635
    2. '()
' → logprob: -4.282708168029785
    3. 'result' → logprob: -4.407708168029785
    4. 'print' → logprob: -5.282708168029785
    5. '   ' → logprob: -6.907708168029785
    6. ' result' → logprob: -10.657708168029785
    7. ')' → logprob: -10.907708168029785
    8. '()

' → logprob: -11.157708168029785
    9. '_result' → logprob: -11.407708168029785
    10. ' print' → logprob: -11.782708168029785

Token 410: 'ie' (ID: 396)
  Prédit: 'ie'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'ie' → logprob: -0.02173718810081482
    2. 'is' → logprob: -4.146737098693848
    3. 'ies' → logprob: -6.521737098693848
    4. 'def' → logprob: -6.646737098693848
    5. 'ition' → logprob: -7.271737098693848
    6. '()' → logprob: -7.271737098693848
    7. '__' → logprob: -7.271737098693848
    8. 'issez' → logprob: -7.896737098693848
    9. 'solve' → logprob: -9.646737098693848
    10. 'ir' → logprob: -10.021737098693848

Token 411: ' ci' (ID: 7405)
  Prédit: '()'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '()' → logprob: -0.0005427849246188998
    2. '()
' → logprob: -7.625542640686035
    3. '   ' → logprob: -10.000542640686035
    4. '()

' → logprob: -12.875542640686035
    5. 'result' → logprob: -13.625542640686035
    6. 'def' → logprob: -13.625542640686035
    7. ' ()' → logprob: -13.875542640686035
    8. '():
' → logprob: -14.125542640686035
    9. '()`' → logprob: -14.125542640686035
    10. '()
' → logprob: -14.250542640686035

Token 412: '-dessus' (ID: 74812)
  Prédit: 'dess'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'dess' → logprob: -0.0026267850771546364
    2. '-dessus' → logprob: -6.002626895904541
    3. '-dessous' → logprob: -9.252626419067383
    4. 'avant' → logprob: -10.627626419067383
    5. 'd' → logprob: -11.877626419067383
    6. '   ' → logprob: -11.877626419067383
    7. ' dessus' → logprob: -12.627626419067383
    8. 'def' → logprob: -13.002626419067383
    9. 'dev' → logprob: -13.127626419067383
    10. '-dess' → logprob: -13.377626419067383

Token 413: ',
' (ID: 412)
  Prédit: '()'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '()' → logprob: -1.0305147171020508
    2. '   ' → logprob: -1.5305147171020508
    3. 'result' → logprob: -1.6555147171020508
    4. 'print' → logprob: -1.7805147171020508
    5. '()
' → logprob: -2.780514717102051
    6. ' result' → logprob: -6.780514717102051
    7. '
' → logprob: -6.905514717102051
    8. ' print' → logprob: -7.030514717102051
    9. ':' → logprob: -7.530514717102051
    10. 'output' → logprob: -7.530514717102051

Token 414: '   ' (ID: 271)
  Prédit: 'result'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'result' → logprob: -0.04534291848540306
    2. ' result' → logprob: -3.2953429222106934
    3. '   ' → logprob: -5.045342922210693
    4. 'print' → logprob: -7.295342922210693
    5. ' print' → logprob: -9.545342445373535
    6. 'res' → logprob: -9.920342445373535
    7. ' resultat' → logprob: -10.670342445373535
    8. ' résultat' → logprob: -12.295342445373535
    9. 'rés' → logprob: -13.295342445373535
    10. '	result' → logprob: -13.420342445373535

Token 415: ' #' (ID: 1069)
  Prédit: 'result'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'result' → logprob: -0.00257660960778594
    2. 'print' → logprob: -6.00257682800293
    3. ' result' → logprob: -9.50257682800293
    4. 'res' → logprob: -10.62757682800293
    5. ' print' → logprob: -14.87757682800293
    6. 'resultado' → logprob: -14.87757682800293
    7. ' resultat' → logprob: -14.87757682800293
    8. 'rés' → logprob: -15.00257682800293
    9. '   ' → logprob: -15.12757682800293
    10. ' résultat' → logprob: -15.50257682800293

Token 416: ' puis' (ID: 18766)
  Prédit: 'result'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'result' → logprob: -0.0385102853178978
    2. 'print' → logprob: -3.288510322570801
    3. ' result' → logprob: -7.788510322570801
    4. 'res' → logprob: -10.2885103225708
    5. ' print' → logprob: -11.2885103225708
    6. 'rés' → logprob: -13.1635103225708
    7. ' resultat' → logprob: -13.1635103225708
    8. '   ' → logprob: -13.9135103225708
    9. 'resultado' → logprob: -14.0385103225708
    10. ' résultat' → logprob: -14.1635103225708

Token 417: ' afficher' (ID: 146524)
  Prédit: 'print'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'print' → logprob: -0.04029937833547592
    2. ' print' → logprob: -3.290299415588379
    3. 'result' → logprob: -6.165299415588379
    4. ' result' → logprob: -8.790299415588379
    5. ' resultat' → logprob: -14.290299415588379
    6. 'res' → logprob: -14.665299415588379
    7. 'prin' → logprob: -15.040299415588379
    8. 'r' → logprob: -15.915299415588379
    9. ' résultat' → logprob: -16.290298461914062
    10. '_print' → logprob: -16.790298461914062

Token 418: ' le' (ID: 505)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '(' → logprob: -0.1610398143529892
    2. '(s' → logprob: -1.9110398292541504
    3. '(print' → logprob: -7.53603982925415
    4. '(result' → logprob: -9.411039352416992
    5. '(solution' → logprob: -9.411039352416992
    6. '(
' → logprob: -10.411039352416992
    7. 'solve' → logprob: -10.536039352416992
    8. '()' → logprob: -10.661039352416992
    9. '(sol' → logprob: -11.036039352416992
    10. '(resolve' → logprob: -11.911039352416992

Token 419: ' résultat' (ID: 62556)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(' → logprob: -0.22824221849441528
    2. 'result' → logprob: -2.3532421588897705
    3. '(s' → logprob: -2.7282421588897705
    4. 'solve' → logprob: -3.3532421588897705
    5. '(result' → logprob: -5.10324239730835
    6. '()' → logprob: -6.22824239730835
    7. ' result' → logprob: -9.478241920471191
    8. '(
' → logprob: -9.853241920471191
    9. ' résultat' → logprob: -9.853241920471191
    10. 'sol' → logprob: -9.978241920471191

Token 420: ' retourn' (ID: 150215)
  Prédit: '()'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '()' → logprob: -0.6283989548683167
    2. 'print' → logprob: -1.2533988952636719
    3. '(print' → logprob: -2.128398895263672
    4. '   ' → logprob: -3.128398895263672
    5. '(' → logprob: -4.128398895263672
    6. ' print' → logprob: -7.003398895263672
    7. '()
' → logprob: -7.628398895263672
    8. '(result' → logprob: -8.503398895263672
    9. 'result' → logprob: -9.128398895263672
    10. ',' → logprob: -9.253398895263672

Token 421: 'é' (ID: 377)
  Prédit: 'é'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'é' → logprob: -2.069664333248511e-05
    2. 'ed' → logprob: -11.250020980834961
    3. 'e' → logprob: -12.000020980834961
    4. 'er' → logprob: -14.125020980834961
    5. 'ée' → logprob: -14.875020980834961
    6. 'né' → logprob: -15.250020980834961
    7. '   ' → logprob: -17.00002098083496
    8. 'É' → logprob: -17.12502098083496
    9. 'ré' → logprob: -17.62502098083496
    10. 'print' → logprob: -17.87502098083496

Token 422: ' par' (ID: 686)
  Prédit: '()'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '()' → logprob: -0.5530506372451782
    2. '(' → logprob: -1.3030506372451782
    3. '(print' → logprob: -2.3030505180358887
    4. 'print' → logprob: -3.6780505180358887
    5. '   ' → logprob: -3.8030505180358887
    6. '(s' → logprob: -5.678050518035889
    7. '(result' → logprob: -7.303050518035889
    8. ',' → logprob: -8.178050994873047
    9. '(
' → logprob: -8.428050994873047
    10. 'solve' → logprob: -8.428050994873047

Token 423: ' cette' (ID: 7696)
  Prédit: 'print'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'print' → logprob: -0.009182070381939411
    2. 'solve' → logprob: -4.884181976318359
    3. ' print' → logprob: -6.509181976318359
    4. ' solve' → logprob: -9.50918197631836
    5. '   ' → logprob: -11.63418197631836
    6. '(print' → logprob: -13.38418197631836
    7. 'sol' → logprob: -15.63418197631836
    8. '	print' → logprob: -17.00918197631836
    9. 'printf' → logprob: -17.50918197631836
    10. '  ' → logprob: -17.75918197631836

Token 424: ' fonction' (ID: 17610)
  Prédit: 'fonction'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'fonction' → logprob: -0.07303222268819809
    2. 'solve' → logprob: -3.5730321407318115
    3. '()' → logprob: -4.323032379150391
    4. ' fonction' → logprob: -4.573032379150391
    5. 'function' → logprob: -4.948032379150391
    6. ' function' → logprob: -5.198032379150391
    7. '()
' → logprob: -5.448032379150391
    8. ' solve' → logprob: -7.198032379150391
    9. 'print' → logprob: -8.32303237915039
    10. 'def' → logprob: -8.69803237915039

Token 425: ' avec' (ID: 3937)
  Prédit: 'print'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'print' → logprob: -0.05496048927307129
    2. '   ' → logprob: -3.0549604892730713
    3. ' print' → logprob: -5.429960250854492
    4. '()' → logprob: -6.554960250854492
    5. '(print' → logprob: -8.679960250854492
    6. '()
' → logprob: -9.054960250854492
    7. ',' → logprob: -9.304960250854492
    8. '	print' → logprob: -9.429960250854492
    9. 'result' → logprob: -10.054960250854492
    10. ')' → logprob: -11.054960250854492

Token 426: ' print' (ID: 2123)
  Prédit: ' print'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' print' → logprob: -0.575949490070343
    2. 'print' → logprob: -0.825949490070343
    3. '(print' → logprob: -11.575949668884277
    4. '```' → logprob: -14.950949668884277
    5. '   ' → logprob: -15.325949668884277
    6. '	print' → logprob: -15.825949668884277
    7. '.print' → logprob: -17.70094871520996
    8. '`' → logprob: -17.82594871520996
    9. 'pr' → logprob: -17.95094871520996
    10. ' ' → logprob: -18.20094871520996

Token 427: '().
' (ID: 58434)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '(' → logprob: -0.7122038006782532
    2. '(s' → logprob: -1.4622037410736084
    3. '(print' → logprob: -1.7122037410736084
    4. '()' → logprob: -2.3372037410736084
    5. '   ' → logprob: -8.087203979492188
    6. '(
' → logprob: -8.962203979492188
    7. '()
' → logprob: -9.837203979492188
    8. '(solution' → logprob: -9.837203979492188
    9. ' (' → logprob: -10.837203979492188
    10. '((' → logprob: -10.837203979492188

Token 428: '   ' (ID: 271)
  Prédit: 'print'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'print' → logprob: -0.029978647828102112
    2. '   ' → logprob: -3.5299787521362305
    3. ' print' → logprob: -9.02997875213623
    4. 'result' → logprob: -9.15497875213623
    5. '```' → logprob: -13.40497875213623
    6. '	print' → logprob: -13.77997875213623
    7. '    
' → logprob: -16.029977798461914
    8. ' result' → logprob: -17.154977798461914
    9. 'pr' → logprob: -17.654977798461914
    10. '(print' → logprob: -18.279977798461914

Token 429: ' #' (ID: 1069)
  Prédit: 'print'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'print' → logprob: -9.968312951968983e-06
    2. 'result' → logprob: -12.000009536743164
    3. ' print' → logprob: -12.500009536743164
    4. '   ' → logprob: -20.500009536743164
    5. 'pr' → logprob: -20.750009536743164
    6. 'prin' → logprob: -21.250009536743164
    7. '	print' → logprob: -21.625009536743164
    8. '```' → logprob: -22.500009536743164
    9. ' result' → logprob: -22.625009536743164
    10. '.print' → logprob: -23.250009536743164

Token 430: ' print' (ID: 2123)
  Prédit: 'print'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'print' → logprob: -0.0009157438762485981
    2. 'result' → logprob: -7.00091552734375
    3. ' print' → logprob: -12.37591552734375
    4. ' result' → logprob: -17.62591552734375
    5. 'output' → logprob: -18.75091552734375
    6. 'pr' → logprob: -19.00091552734375
    7. 'prin' → logprob: -19.00091552734375
    8. '```' → logprob: -19.00091552734375
    9. '   ' → logprob: -19.12591552734375
    10. 'res' → logprob: -19.50091552734375

Token 431: '()' (ID: 416)
  Prédit: '(s'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(s' → logprob: -0.589317798614502
    2. '(' → logprob: -0.839317798614502
    3. '()' → logprob: -4.339317798614502
    4. '(print' → logprob: -9.214317321777344
    5. '((' → logprob: -10.464317321777344
    6. 'solve' → logprob: -10.714317321777344
    7. '(solution' → logprob: -10.714317321777344
    8. '(
' → logprob: -10.964317321777344
    9. '('' → logprob: -11.089317321777344
    10. '("' → logprob: -11.464317321777344

Token 432: ' permet' (ID: 11798)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '(' → logprob: -0.2106723189353943
    2. '(s' → logprob: -1.710672378540039
    3. '()' → logprob: -4.835672378540039
    4. '(print' → logprob: -6.835672378540039
    5. 'solve' → logprob: -8.960672378540039
    6. '(
' → logprob: -10.710672378540039
    7. '((' → logprob: -11.335672378540039
    8. '(

' → logprob: -11.835672378540039
    9. '(solution' → logprob: -11.835672378540039
    10. '(generate' → logprob: -12.710672378540039

Token 433: ' d' (ID: 272)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(' → logprob: -0.04691091552376747
    2. '()' → logprob: -3.1719110012054443
    3. '("' → logprob: -6.546910762786865
    4. '(print' → logprob: -7.046910762786865
    5. '(d' → logprob: -7.921910762786865
    6. 'd' → logprob: -8.171911239624023
    7. ' de' → logprob: -8.546911239624023
    8. '("")' → logprob: -8.671911239624023
    9. '(
' → logprob: -8.671911239624023
    10. ' d' → logprob: -9.171911239624023

Token 434: ''aff' (ID: 53397)
  Prédit: ''aff'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ''aff' → logprob: -0.14568659663200378
    2. ' afficher' → logprob: -2.395686626434326
    3. 'aff' → logprob: -3.270686626434326
    4. '’aff' → logprob: -5.895686626434326
    5. 'Afficher' → logprob: -7.145686626434326
    6. '_aff' → logprob: -7.645686626434326
    7. 'e' → logprob: -7.895686626434326
    8. ')' → logprob: -7.895686626434326
    9. 'print' → logprob: -8.270686149597168
    10. '<|end|>' → logprob: -8.770686149597168

Token 435: 'icher' (ID: 13617)
  Prédit: 'icher'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'icher' → logprob: -0.0011560549028217793
    2. 'cher' → logprob: -7.501155853271484
    3. 'ich' → logprob: -8.001155853271484
    4. 'ic' → logprob: -9.001155853271484
    5. '   ' → logprob: -10.001155853271484
    6. '#' → logprob: -10.876155853271484
    7. 'ichier' → logprob: -11.001155853271484
    8. 'icer' → logprob: -11.251155853271484
    9. 'er' → logprob: -11.251155853271484
    10. 'ichage' → logprob: -11.876155853271484

Token 436: ' quelque' (ID: 36359)
  Prédit: '(s'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '(s' → logprob: -0.1604647934436798
    2. '(' → logprob: -1.9104647636413574
    3. 'solve' → logprob: -8.785465240478516
    4. '(
' → logprob: -9.910465240478516
    5. '()' → logprob: -10.535465240478516
    6. '(solution' → logprob: -12.160465240478516
    7. '("' → logprob: -13.035465240478516
    8. '(sol' → logprob: -13.910465240478516
    9. ' (' → logprob: -14.160465240478516
    10. '(

' → logprob: -14.285465240478516

Token 437: ' chose' (ID: 15505)
  Prédit: ' chose'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' chose' → logprob: -0.20021656155586243
    2. 'fois' → logprob: -2.57521653175354
    3. '_' → logprob: -3.45021653175354
    4. 'ch' → logprob: -4.200216770172119
    5. ' ' → logprob: -4.950216770172119
    6. '_result' → logprob: -5.075216770172119
    7. '()' → logprob: -5.075216770172119
    8. ' result' → logprob: -5.200216770172119
    9. ')' → logprob: -5.575216770172119
    10. 's' → logprob: -5.825216770172119

Token 438: ' à' (ID: 1221)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '(' → logprob: -0.2278735339641571
    2. '(s' → logprob: -1.8528735637664795
    3. '()' → logprob: -3.3528735637664795
    4. '(print' → logprob: -4.6028733253479
    5. '(
' → logprob: -7.2278733253479
    6. 'solve' → logprob: -7.6028733253479
    7. '   ' → logprob: -8.227873802185059
    8. '("' → logprob: -8.977873802185059
    9. '('' → logprob: -9.602873802185059
    10. '("")' → logprob: -9.727873802185059

Token 439: ' l' (ID: 305)
  Prédit: 'la'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'la' → logprob: -0.393370658159256
    2. 'l' → logprob: -1.1433706283569336
    3. ')' → logprob: -5.643370628356934
    4. ' la' → logprob: -7.268370628356934
    5. '   ' → logprob: -7.768370628356934
    6. 'the' → logprob: -7.768370628356934
    7. '()' → logprob: -7.893370628356934
    8. 'print' → logprob: -8.143370628356934
    9. '(' → logprob: -8.643370628356934
    10. 'a' → logprob: -8.768370628356934

Token 440: ''écran' (ID: 147901)
  Prédit: ''écran'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ''écran' → logprob: -0.015713833272457123
    2. 'é' → logprob: -5.140713691711426
    3. 'a' → logprob: -5.265713691711426
    4. '’écran' → logprob: -6.015713691711426
    5. ''utilisateur' → logprob: -6.640713691711426
    6. 'e' → logprob: -8.390713691711426
    7. ' écran' → logprob: -8.390713691711426
    8. 'console' → logprob: -9.140713691711426
    9. ''é' → logprob: -9.640713691711426
    10. 'terminal' → logprob: -9.765713691711426

Token 441: '.
' (ID: 558)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '(' → logprob: -0.4298791289329529
    2. '(s' → logprob: -1.1798791885375977
    3. '(print' → logprob: -3.1798791885375977
    4. '()' → logprob: -7.929879188537598
    5. 'solve' → logprob: -10.429879188537598
    6. '(solution' → logprob: -10.429879188537598
    7. '   ' → logprob: -10.679879188537598
    8. '((' → logprob: -10.929879188537598
    9. '(
' → logprob: -10.929879188537598
    10. '(sol' → logprob: -11.929879188537598

Token 442: '   ' (ID: 271)
  Prédit: 'print'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'print' → logprob: -0.0007121934904716909
    2. '   ' → logprob: -7.5007123947143555
    3. ' print' → logprob: -8.750712394714355
    4. '	print' → logprob: -14.750712394714355
    5. '```' → logprob: -14.875712394714355
    6. 'result' → logprob: -16.50071144104004
    7. '(print' → logprob: -17.62571144104004
    8. '.print' → logprob: -19.00071144104004
    9. 'pr' → logprob: -20.37571144104004
    10. '    
' → logprob: -20.50071144104004

Token 443: ' print' (ID: 2123)
  Prédit: 'print'
  Correct (stricte): False
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'print' (adapté à ' print') → logprob: -7.896309739408025e-07
    2. 'result' → logprob: -14.250000953674316
    3. ' print' → logprob: -16.5
    4. 'prin' → logprob: -21.375
    5. 'pr' → logprob: -22.75
    6. '	print' → logprob: -23.5
    7. '```' → logprob: -23.625
    8. '   ' → logprob: -23.625
    9. 'output' → logprob: -24.5
    10. 'printf' → logprob: -24.875

Token 444: '(s' (ID: 1858)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(' → logprob: -0.47412702441215515
    2. '(s' → logprob: -0.9741270542144775
    3. '()' → logprob: -10.849126815795898
    4. '(
' → logprob: -11.724126815795898
    5. 'solve' → logprob: -11.849126815795898
    6. '(sol' → logprob: -12.349126815795898
    7. '('' → logprob: -12.599126815795898
    8. '(solution' → logprob: -12.849126815795898
    9. '(

' → logprob: -13.599126815795898
    10. ' (' → logprob: -13.724126815795898

Token 445: 'olve' (ID: 11460)
  Prédit: 'olve'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'olve' → logprob: -1.9361264946837764e-07
    2. 'solve' → logprob: -15.75
    3. 'ol' → logprob: -18.375
    4. 'olver' → logprob: -19.125
    5. 'olv' → logprob: -20.75
    6. 'olved' → logprob: -20.75
    7. 'OLVE' → logprob: -21.5
    8. 'ove' → logprob: -22.125
    9. 'erve' → logprob: -22.25
    10. 'o' → logprob: -22.25

Token 446: '())' (ID: 3516)
  Prédit: '())'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '())' → logprob: -0.00046141279744915664
    2. '()' → logprob: -8.00046157836914
    3. ')' → logprob: -9.00046157836914
    4. '()))' → logprob: -13.00046157836914
    5. ' ())' → logprob: -15.50046157836914
    6. '))' → logprob: -16.12546157836914
    7. '())
' → logprob: -16.87546157836914
    8. '(' → logprob: -17.50046157836914
    9. '();)' → logprob: -17.87546157836914
    10. '()]' → logprob: -19.00046157836914


RÉSUMÉ:
--------------------------------------------------------------------------------
Total des tokens analysés: 444
Tokens correctement prédits (1ère position, stricte): 136
Tokens correctement prédits (1ère position, avec adaptation): 142
Tokens correctement prédits (top 10): 271
Précision stricte (1ère position): 30.63%
Précision adaptée (1ère position): 31.98%
Précision (top 10): 61.04%
================================================================================
