================================================================================
ANALYSE DE PRÉDICTION TOKEN PAR TOKEN (BATCH API)
Date: 2025-06-04 19:59:22
Modèle de tokenisation: gpt-4o-mini
================================================================================

SCRIPT ANALYSÉ:
--------------------------------------------------------------------------------
from sys import stdin

def calculer_resultat(a: int, p: int) -> int:
    return (a * 3 + p) // 2

if __name__ == "__main__":
    print(calculer_resultat(*map(int, stdin.readline().split())))
--------------------------------------------------------------------------------

RÉSULTATS D'ANALYSE TOKEN PAR TOKEN:
--------------------------------------------------------------------------------
Token 0: 'from' (ID: 2845)
  → Token d'amorce (pas de prédiction)

Token 1: ' sys' (ID: 12228)
  → Token d'amorce (pas de prédiction)

Token 2: ' import' (ID: 1588)
  → Token d'amorce (pas de prédiction)

Token 3: ' stdin' (ID: 75143)
  Prédit: 'argv'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'argv' → logprob: -0.14457781612873077
    2. ' argv' → logprob: -2.269577741622925
    3. 'exit' → logprob: -4.019577980041504
    4. ' exit' → logprob: -4.644577980041504
    5. 'stdout' → logprob: -6.269577980041504
    6. 'stdin' → logprob: -7.519577980041504
    7. 'import' → logprob: -7.894577980041504
    8. 'path' → logprob: -7.894577980041504
    9. 'stderr' → logprob: -9.019577980041504
    10. ' path' → logprob: -9.394577980041504

Token 4: '

' (ID: 279)
  Prédit: '.'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '.' → logprob: -0.009244076907634735
    2. '.readline' → logprob: -4.759243965148926
    3. '.read' → logprob: -8.509243965148926
    4. '\n' → logprob: -9.259243965148926
    5. '
' → logprob: -9.509243965148926
    6. '.
' → logprob: -9.759243965148926
    7. ',' → logprob: -9.884243965148926
    8. 'import' → logprob: -10.134243965148926
    9. '```' → logprob: -10.384243965148926
    10. '.write' → logprob: -11.134243965148926

Token 5: 'def' (ID: 1314)
  Prédit: '.'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '.' → logprob: -0.2673061788082123
    2. '.readline' → logprob: -1.7673062086105347
    3. 'for' → logprob: -3.767306089401245
    4. '\n' → logprob: -4.642306327819824
    5. '.read' → logprob: -4.767306327819824
    6. 'import' → logprob: -4.892306327819824
    7. 'print' → logprob: -4.892306327819824
    8. 'read' → logprob: -6.267306327819824
    9. '' → logprob: -7.017306327819824
    10. ',' → logprob: -7.017306327819824

Token 6: ' calcul' (ID: 7559)
  Prédit: ' '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' ' → logprob: -0.047279614955186844
    2. ' read' → logprob: -3.4222795963287354
    3. ' process' → logprob: -4.7972798347473145
    4. ' parse' → logprob: -6.9222798347473145
    5. ' space' → logprob: -7.1722798347473145
    6. ' main' → logprob: -7.1722798347473145
    7. '_read' → logprob: -7.5472798347473145
    8. ' ' → logprob: -7.5472798347473145
    9. ' readline' → logprob: -8.172279357910156
    10. 'read' → logprob: -8.672279357910156

Token 7: 'er' (ID: 259)
  Prédit: 'ate'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'ate' → logprob: -0.0005101414280943573
    2. 'ator' → logprob: -7.750510215759277
    3. 'ation' → logprob: -10.000510215759277
    4. '```' → logprob: -11.750510215759277
    5. ' ate' → logprob: -11.875510215759277
    6. 'ating' → logprob: -12.125510215759277
    7. 'a' → logprob: -12.625510215759277
    8. 'at' → logprob: -13.250510215759277
    9. 'ATE' → logprob: -13.375510215759277
    10. 'ateur' → logprob: -13.625510215759277

Token 8: '_result' (ID: 11623)
  Prédit: '_'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '_' → logprob: -0.006655688397586346
    2. '(' → logprob: -5.131655693054199
    3. '_total' → logprob: -8.8816556930542
    4. '_distance' → logprob: -9.5066556930542
    5. '_nombre' → logprob: -9.6316556930542
    6. '_score' → logprob: -10.3816556930542
    7. ' _' → logprob: -10.6316556930542
    8. '_l' → logprob: -10.8816556930542
    9. '_area' → logprob: -11.0066556930542
    10. '_factor' → logprob: -11.2566556930542

Token 9: 'at' (ID: 266)
  Prédit: 'at'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'at' → logprob: -0.0009674415923655033
    2. 'é' → logprob: -7.250967502593994
    3. '_' → logprob: -8.875967025756836
    4. 'ât' → logprob: -10.375967025756836
    5. '_at' → logprob: -10.750967025756836
    6. 'a' → logprob: -10.750967025756836
    7. '(at' → logprob: -11.250967025756836
    8. 'ат' → logprob: -11.750967025756836
    9. ' at' → logprob: -11.875967025756836
    10. 'e' → logprob: -12.250967025756836

Token 10: '(a' (ID: 6271)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '(' → logprob: -0.0010954499011859298
    2. '():' → logprob: -7.001095294952393
    3. ':' → logprob: -10.12609577178955
    4. '("("' → logprob: -10.50109577178955
    5. '_' → logprob: -10.75109577178955
    6. '(:' → logprob: -11.25109577178955
    7. '('' → logprob: -11.50109577178955
    8. ' (' → logprob: -11.62609577178955
    9. '(
' → logprob: -11.75109577178955
    10. '()' → logprob: -12.12609577178955

Token 11: ':' (ID: 25)
  Prédit: ','
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ',' → logprob: -0.13027560710906982
    2. ')' → logprob: -2.3802757263183594
    3. '):' → logprob: -3.7552757263183594
    4. '[' → logprob: -6.130275726318359
    5. ',b' → logprob: -6.505275726318359
    6. ' ,' → logprob: -7.005275726318359
    7. ':' → logprob: -7.630275726318359
    8. 's' → logprob: -8.00527572631836
    9. ',a' → logprob: -8.88027572631836
    10. 'a' → logprob: -9.13027572631836

Token 12: ' int' (ID: 677)
  Prédit: 'int'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'int' → logprob: -0.6937383413314819
    2. ' int' → logprob: -0.6937383413314819
    3. ' ' → logprob: -8.193737983703613
    4. ' str' → logprob: -9.193737983703613
    5. ' float' → logprob: -9.318737983703613
    6. ')' → logprob: -10.068737983703613
    7. 'float' → logprob: -10.193737983703613
    8. 'str' → logprob: -11.818737983703613
    9. '   ' → logprob: -11.943737983703613
    10. ':int' → logprob: -12.443737983703613

Token 13: ',' (ID: 11)
  Prédit: ','
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ',' → logprob: -0.0012601142516359687
    2. ')' → logprob: -7.251260280609131
    3. ' ,' → logprob: -8.251259803771973
    4. ',b' → logprob: -8.376259803771973
    5. ',a' → logprob: -10.626259803771973
    6. ',
' → logprob: -11.751259803771973
    7. '):' → logprob: -11.876259803771973
    8. ',int' → logprob: -12.376259803771973
    9. '<|end|>' → logprob: -12.501259803771973
    10. ',c' → logprob: -13.626259803771973

Token 14: ' p' (ID: 275)
  Prédit: ' b'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' b' → logprob: -0.11282858997583389
    2. 'b' → logprob: -2.237828493118286
    3. ' ' → logprob: -13.237828254699707
    4. ')' → logprob: -13.237828254699707
    5. 'a' → logprob: -13.987828254699707
    6. ',' → logprob: -14.862828254699707
    7. ')b' → logprob: -14.862828254699707
    8. '   ' → logprob: -15.362828254699707
    9. ',b' → logprob: -15.737828254699707
    10. ' ' → logprob: -15.862828254699707

Token 15: ':' (ID: 25)
  Prédit: '):'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '):' → logprob: -0.5063334107398987
    2. ')' → logprob: -1.881333351135254
    3. 'r' → logprob: -2.881333351135254
    4. ',' → logprob: -3.006333351135254
    5. ' ):' → logprob: -3.631333351135254
    6. 'e' → logprob: -3.756333351135254
    7. 'er' → logprob: -4.006333351135254
    8. 'u' → logprob: -4.131333351135254
    9. 'i' → logprob: -4.381333351135254
    10. ':' → logprob: -4.756333351135254

Token 16: ' int' (ID: 677)
  Prédit: 'int'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'int' → logprob: -0.018357478082180023
    2. ' int' → logprob: -4.268357276916504
    3. 'float' → logprob: -6.393357276916504
    4. ')' → logprob: -6.893357276916504
    5. 'r' → logprob: -6.893357276916504
    6. ' float' → logprob: -9.268357276916504
    7. 'oints' → logprob: -9.393357276916504
    8. 'a' → logprob: -10.018357276916504
    9. 'oint' → logprob: -10.268357276916504
    10. ' ' → logprob: -10.268357276916504

Token 17: ')' (ID: 8)
  Prédit: ')'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')' → logprob: -0.14336007833480835
    2. '):' → logprob: -2.018360137939453
    3. ',' → logprob: -7.393360137939453
    4. ')->' → logprob: -11.143360137939453
    5. ':' → logprob: -11.268360137939453
    6. '`)' → logprob: -11.518360137939453
    7. '):
' → logprob: -11.768360137939453
    8. '')' → logprob: -12.768360137939453
    9. '```' → logprob: -12.893360137939453
    10. '   ' → logprob: -13.018360137939453

Token 18: ' ->' (ID: 2747)
  Prédit: ':'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ':' → logprob: -0.00047595196519978344
    2. '):' → logprob: -7.875475883483887
    3. ':return' → logprob: -10.250475883483887
    4. ' :' → logprob: -10.875475883483887
    5. '():' → logprob: -11.750475883483887
    6. '':' → logprob: -11.750475883483887
    7. ')' → logprob: -12.000475883483887
    8. ':**' → logprob: -12.250475883483887
    9. '   ' → logprob: -12.500475883483887
    10. '->' → logprob: -13.500475883483887

Token 19: ' int' (ID: 677)
  Prédit: ' int'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' int' → logprob: -0.10114035755395889
    2. 'int' → logprob: -2.351140260696411
    3. ' float' → logprob: -7.97614049911499
    4. ' None' → logprob: -8.226140022277832
    5. ' str' → logprob: -8.726140022277832
    6. ' ' → logprob: -9.976140022277832
    7. 'float' → logprob: -10.226140022277832
    8. ' bool' → logprob: -10.476140022277832
    9. 'None' → logprob: -10.976140022277832
    10. ' ' → logprob: -11.601140022277832

Token 20: ':
' (ID: 734)
  Prédit: ':'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ':' → logprob: -1.9981420336989686e-05
    2. '):' → logprob: -12.250020027160645
    3. ':return' → logprob: -12.375020027160645
    4. ' :' → logprob: -12.625020027160645
    5. '':' → logprob: -13.375020027160645
    6. '():' → logprob: -13.375020027160645
    7. ':**' → logprob: -13.375020027160645
    8. ':
' → logprob: -14.125020027160645
    9. '   ' → logprob: -15.125020027160645
    10. '':'' → logprob: -15.375020027160645

Token 21: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.07587930560112
    2. ':' → logprob: -2.7008793354034424
    3. ' ' → logprob: -5.450879096984863
    4. ':
' → logprob: -7.950879096984863
    5. ' return' → logprob: -8.825879096984863
    6. ')' → logprob: -8.950879096984863
    7. '  ' → logprob: -9.200879096984863
    8. ' :' → logprob: -9.200879096984863
    9. '*' → logprob: -9.325879096984863
    10. '    ' → logprob: -9.450879096984863

Token 22: ' return' (ID: 622)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.08650879561901093
    2. ' return' → logprob: -3.0865087509155273
    3. ' 
' → logprob: -4.336508750915527
    4. 'return' (adapté à ' return') → logprob: -4.586508750915527
    5. '```' → logprob: -5.461508750915527
    6. ' ' → logprob: -5.961508750915527
    7. '    ' → logprob: -6.211508750915527
    8. '    
' → logprob: -6.336508750915527
    9. 'r' → logprob: -7.336508750915527
    10. ' if' → logprob: -8.086508750915527

Token 23: ' (' (ID: 350)
  Prédit: ' a'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' a' → logprob: -0.16278785467147827
    2. 'a' → logprob: -1.912787914276123
    3. ' (' → logprob: -6.287787914276123
    4. ' ' → logprob: -8.287787437438965
    5. ' p' → logprob: -9.162787437438965
    6. '(a' → logprob: -9.412787437438965
    7. 'pow' → logprob: -9.787787437438965
    8. ' pow' → logprob: -9.787787437438965
    9. '1' → logprob: -10.037787437438965
    10. '(' → logprob: -10.662787437438965

Token 24: 'a' (ID: 64)
  Prédit: 'a'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'a' → logprob: -0.0034808015916496515
    2. ' a' → logprob: -6.628480911254883
    3. 'p' → logprob: -7.003480911254883
    4. '2' → logprob: -7.378480911254883
    5. '   ' → logprob: -8.378480911254883
    6. '1' → logprob: -8.753480911254883
    7. '(a' → logprob: -9.628480911254883
    8. '(' → logprob: -10.128480911254883
    9. 'pow' → logprob: -10.628480911254883
    10. ' (' → logprob: -10.628480911254883

Token 25: ' *' (ID: 425)
  Prédit: '*'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '*' → logprob: -1.0755757093429565
    2. ' *' → logprob: -1.2005757093429565
    3. ' +' → logprob: -1.7005757093429565
    4. '+' → logprob: -2.075575828552246
    5. '**' → logprob: -4.325575828552246
    6. '*p' → logprob: -4.325575828552246
    7. ' **' → logprob: -4.450575828552246
    8. '+p' → logprob: -5.700575828552246
    9. ' %' → logprob: -6.325575828552246
    10. ' ' → logprob: -6.575575828552246

Token 26: ' ' (ID: 220)
  Prédit: 'p'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'p' → logprob: -0.3813643157482147
    2. ' p' → logprob: -1.256364345550537
    3. ' (' → logprob: -4.631364345550537
    4. '2' → logprob: -5.256364345550537
    5. '(' → logprob: -5.631364345550537
    6. 'a' → logprob: -5.756364345550537
    7. ' ' → logprob: -5.881364345550537
    8. '(p' → logprob: -5.881364345550537
    9. ' a' → logprob: -6.506364345550537
    10. '10' → logprob: -6.506364345550537

Token 27: '3' (ID: 18)
  Prédit: 'p'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'p' → logprob: -0.015339042991399765
    2. 'a' → logprob: -5.640338897705078
    3. '(p' → logprob: -5.640338897705078
    4. '2' → logprob: -5.890338897705078
    5. '(' → logprob: -6.390338897705078
    6. ' p' → logprob: -7.015338897705078
    7. '10' → logprob: -7.015338897705078
    8. '3' → logprob: -7.390338897705078
    9. '(a' → logprob: -7.890338897705078
    10. '5' → logprob: -8.515338897705078

Token 28: ' +' (ID: 659)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')' → logprob: -0.25415512919425964
    2. ' +' → logprob: -1.754155158996582
    3. ' )' → logprob: -3.754155158996582
    4. ' *' → logprob: -4.004155158996582
    5. '+' → logprob: -5.754155158996582
    6. ' -' → logprob: -6.004155158996582
    7. ' ' → logprob: -6.254155158996582
    8. '*' → logprob: -7.504155158996582
    9. '    ' → logprob: -7.629155158996582
    10. '   ' → logprob: -8.629155158996582

Token 29: ' p' (ID: 275)
  Prédit: ' p'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' p' → logprob: -0.034731365740299225
    2. 'p' → logprob: -3.409731388092041
    3. ' ' → logprob: -7.034731388092041
    4. '2' → logprob: -9.409730911254883
    5. ' (' → logprob: -10.534730911254883
    6. '4' → logprob: -10.534730911254883
    7. '5' → logprob: -10.909730911254883
    8. '7' → logprob: -11.034730911254883
    9. '1' → logprob: -11.784730911254883
    10. '3' → logprob: -12.409730911254883

Token 30: ')' (ID: 8)
  Prédit: ')'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')' → logprob: -0.007057165261358023
    2. ' )' → logprob: -5.007057189941406
    3. ')//' → logprob: -9.132057189941406
    4. ' -' → logprob: -9.882057189941406
    5. ' *' → logprob: -10.257057189941406
    6. ' //' → logprob: -10.507057189941406
    7. '*' → logprob: -10.757057189941406
    8. '   ' → logprob: -11.007057189941406
    9. '**' → logprob: -11.132057189941406
    10. ')**' → logprob: -11.257057189941406

Token 31: ' //' (ID: 602)
  Prédit: '
'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '
' → logprob: -0.26480603218078613
    2. '\n' → logprob: -1.7648060321807861
    3. '*' → logprob: -3.889806032180786
    4. '+' → logprob: -4.139805793762207
    5. '<|end|>' → logprob: -4.764805793762207
    6. '```' → logprob: -6.014805793762207
    7. ')' → logprob: -6.139805793762207
    8. '  
' → logprob: -6.514805793762207
    9. '
' → logprob: -6.514805793762207
    10. '**' → logprob: -6.639805793762207

Token 32: ' ' (ID: 220)
  Prédit: ' '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' ' → logprob: -0.5286914110183716
    2. '2' → logprob: -0.9036914110183716
    3. '3' → logprob: -5.403691291809082
    4. '4' → logprob: -7.028691291809082
    5. '5' → logprob: -9.653691291809082
    6. '7' → logprob: -9.653691291809082
    7. '10' → logprob: -11.528691291809082
    8. '6' → logprob: -11.903691291809082
    9. '9' → logprob: -12.403691291809082
    10. '8' → logprob: -12.778691291809082

Token 33: '2' (ID: 17)
  Prédit: '2'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '2' → logprob: -0.005386725999414921
    2. ' ' → logprob: -5.630386829376221
    3. '3' → logprob: -7.005386829376221
    4. '4' → logprob: -7.255386829376221
    5. '5' → logprob: -9.255386352539062
    6. '7' → logprob: -10.005386352539062
    7. '10' → logprob: -10.880386352539062
    8. '6' → logprob: -13.255386352539062
    9. '8' → logprob: -13.380386352539062
    10. '9' → logprob: -13.380386352539062

Token 34: '

' (ID: 279)
  Prédit: '
'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '
' → logprob: -0.04837080091238022
    2. '

' → logprob: -3.173370838165283
    3. '<|end|>' → logprob: -6.048370838165283
    4. '\n' → logprob: -6.798370838165283
    5. 'def' → logprob: -7.298370838165283
    6. '
' → logprob: -7.298370838165283
    7. '


' → logprob: -9.423370361328125
    8. '\' → logprob: -9.548370361328125
    9. '<|end|>' → logprob: -9.548370361328125
    10. 'newline' → logprob: -9.798370361328125

Token 35: 'if' (ID: 366)
  Prédit: '
'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '
' → logprob: -0.7089008688926697
    2. '

' → logprob: -0.9589008688926697
    3. 'def' → logprob: -2.3339009284973145
    4. '\n' → logprob: -4.0839009284973145
    5. 'a' → logprob: -5.4589009284973145
    6. 'for' → logprob: -6.4589009284973145
    7. 'n' → logprob: -6.7089009284973145
    8. '
' → logprob: -7.5839009284973145
    9. '#' → logprob: -7.7089009284973145
    10. ' 

' → logprob: -7.7089009284973145

Token 36: ' __' (ID: 2516)
  Prédit: ' __'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' __' → logprob: -0.012129442766308784
    2. ' ' → logprob: -4.637129306793213
    3. '__' → logprob: -6.762129306793213
    4. ' stdin' → logprob: -7.137129306793213
    5. ' ' → logprob: -8.387129783630371
    6. '_' → logprob: -9.637129783630371
    7. ' True' → logprob: -9.762129783630371
    8. ' _' → logprob: -10.762129783630371
    9. ' sys' → logprob: -11.387129783630371
    10. '  ' → logprob: -11.762129783630371

Token 37: 'name' (ID: 897)
  Prédit: '__'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '__' → logprob: -0.025816326960921288
    2. '.' → logprob: -4.650816440582275
    3. '.__' → logprob: -5.400816440582275
    4. '__.__' → logprob: -5.900816440582275
    5. '.name' → logprob: -6.525816440582275
    6. ' ==' → logprob: -6.525816440582275
    7. '__.' → logprob: -6.525816440582275
    8. '==' → logprob: -6.525816440582275
    9. ' __' → logprob: -7.400816440582275
    10. '[' → logprob: -7.525816440582275

Token 38: '__' (ID: 771)
  Prédit: '__'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '__' → logprob: -5.796184723294573e-06
    2. '__.__' → logprob: -13.250005722045898
    3. '____' → logprob: -13.500005722045898
    4. '___' → logprob: -14.250005722045898
    5. '__
' → logprob: -14.625005722045898
    6. '_' → logprob: -14.750005722045898
    7. '==' → logprob: -14.875005722045898
    8. '__.' → logprob: -15.125005722045898
    9. '__

' → logprob: -15.625005722045898
    10. 'name' → logprob: -16.7500057220459

Token 39: ' ==' (ID: 951)
  Prédit: '__'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '__' → logprob: -0.060240503400564194
    2. ' ==' → logprob: -3.4352405071258545
    3. '==' → logprob: -5.185240268707275
    4. '__.__' → logprob: -5.435240268707275
    5. '<|end|>' → logprob: -5.560240268707275
    6. '["' → logprob: -5.810240268707275
    7. '.' → logprob: -6.310240268707275
    8. '[' → logprob: -6.685240268707275
    9. '=="' → logprob: -6.810240268707275
    10. '__["' → logprob: -6.810240268707275

Token 40: ' "__' (ID: 27367)
  Prédit: '"'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '"' → logprob: -0.4748428463935852
    2. ''' → logprob: -0.9748428463935852
    3. ' "' → logprob: -7.3498430252075195
    4. ' '' → logprob: -9.34984302520752
    5. '__' → logprob: -10.59984302520752
    6. ' "__' → logprob: -12.84984302520752
    7. '_' → logprob: -12.97484302520752
    8. ' __' → logprob: -13.34984302520752
    9. ' ' → logprob: -13.72484302520752
    10. ' ' → logprob: -14.34984302520752

Token 41: 'main' (ID: 7731)
  Prédit: 'main'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'main' → logprob: -2.7848862373502925e-05
    2. 'name' → logprob: -10.500027656555176
    3. 'mai' → logprob: -15.875027656555176
    4. 'ma' → logprob: -16.500028610229492
    5. 'maine' → logprob: -17.375028610229492
    6. ' main' → logprob: -18.000028610229492
    7. 'm' → logprob: -19.375028610229492
    8. '_main' → logprob: -20.250028610229492
    9. '	main' → logprob: -21.000028610229492
    10. 'amain' → logprob: -21.125028610229492

Token 42: '__":
' (ID: 49892)
  Prédit: '__'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '__' → logprob: -0.1269916146993637
    2. '__":
' → logprob: -2.1269915103912354
    3. '__:' → logprob: -10.126991271972656
    4. '_' → logprob: -11.001991271972656
    5. '__':
' → logprob: -12.876991271972656
    6. '__["' → logprob: -13.501991271972656
    7. '"' → logprob: -13.626991271972656
    8. '__("' → logprob: -14.751991271972656
    9. '":' → logprob: -14.751991271972656
    10. '__
' → logprob: -15.376991271972656

Token 43: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.0383930504322052
    2. '    
' → logprob: -3.788393020629883
    3. ' 
' → logprob: -6.038393020629883
    4. ' n' → logprob: -6.288393020629883
    5. ' stdin' → logprob: -6.288393020629883
    6. '<|end|>' → logprob: -6.413393020629883
    7. '(stdin' → logprob: -6.413393020629883
    8. ' readline' → logprob: -7.038393020629883
    9. '
' → logprob: -7.413393020629883
    10. ' for' → logprob: -7.538393020629883

Token 44: ' print' (ID: 2123)
  Prédit: ' line'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' line' → logprob: -0.41397756338119507
    2. ' ligne' → logprob: -2.16397762298584
    3. ' a' → logprob: -3.03897762298584
    4. ' for' → logprob: -3.03897762298584
    5. 'a' → logprob: -3.66397762298584
    6. ' input' → logprob: -3.78897762298584
    7. ' lines' → logprob: -3.91397762298584
    8. ' data' → logprob: -4.28897762298584
    9. '   ' → logprob: -4.53897762298584
    10. ' n' → logprob: -4.66397762298584

Token 45: '(cal' (ID: 92785)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '(' → logprob: -0.00023977462842594832
    2. '(stdin' → logprob: -8.750239372253418
    3. '()' → logprob: -10.375239372253418
    4. '('' → logprob: -11.875239372253418
    5. '(read' → logprob: -11.875239372253418
    6. '(st' → logprob: -11.875239372253418
    7. '("("' → logprob: -12.250239372253418
    8. '((' → logprob: -12.500239372253418
    9. ' (' → logprob: -12.625239372253418
    10. '(input' → logprob: -12.875239372253418

Token 46: 'cul' (ID: 2885)
  Prédit: 'cul'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'cul' → logprob: -0.0001478796184528619
    2. 'cule' → logprob: -10.375147819519043
    3. 'c' → logprob: -10.500147819519043
    4. 'uler' → logprob: -10.875147819519043
    5. 'cular' → logprob: -11.000147819519043
    6. '```' → logprob: -11.125147819519043
    7. 'cler' → logprob: -11.625147819519043
    8. '\' → logprob: -12.500147819519043
    9. '{"' → logprob: -12.625147819519043
    10. 'culator' → logprob: -12.750147819519043

Token 47: 'er' (ID: 259)
  Prédit: 'er'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'er' → logprob: -1.2113979209971149e-05
    2. 'rer' → logprob: -11.500012397766113
    3. 'e' → logprob: -14.750012397766113
    4. 'erer' → logprob: -14.750012397766113
    5. '_er' → logprob: -15.000012397766113
    6. '   ' → logprob: -16.375011444091797
    7. 're' → logprob: -16.500011444091797
    8. '_' → logprob: -16.750011444091797
    9. '{' → logprob: -16.875011444091797
    10. ' er' → logprob: -16.875011444091797

Token 48: '_result' (ID: 11623)
  Prédit: '_result'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_result' → logprob: -0.00013893934374209493
    2. '_' → logprob: -9.125139236450195
    3. 'result' → logprob: -11.375139236450195
    4. '_res' → logprob: -11.500139236450195
    5. '_r' → logprob: -12.500139236450195
    6. '_s' → logprob: -13.625139236450195
    7. '_results' → logprob: -13.875139236450195
    8. '_Result' → logprob: -14.000139236450195
    9. '_RESULT' → logprob: -14.250139236450195
    10. ')_' → logprob: -15.750139236450195

Token 49: 'at' (ID: 266)
  Prédit: 'at'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'at' → logprob: -8.061054359131958e-06
    2. 'a' → logprob: -11.875007629394531
    3. '_at' → logprob: -14.750007629394531
    4. 'ат' → logprob: -14.875007629394531
    5. 'ats' → logprob: -16.00000762939453
    6. ' at' → logprob: -16.87500762939453
    7. 'result' → logprob: -17.00000762939453
    8. '_' → logprob: -17.12500762939453
    9. 'atul' → logprob: -17.50000762939453
    10. 'e' → logprob: -17.62500762939453

Token 50: '(*' (ID: 9000)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '(' → logprob: -0.022303126752376556
    2. '(stdin' → logprob: -4.147303104400635
    3. '(st' → logprob: -5.522303104400635
    4. '()' → logprob: -7.147303104400635
    5. ')' → logprob: -8.147303581237793
    6. '(int' → logprob: -8.397303581237793
    7. '())' → logprob: -8.397303581237793
    8. '('' → logprob: -8.772303581237793
    9. '(input' → logprob: -9.147303581237793
    10. '("("' → logprob: -9.272303581237793

Token 51: 'map' (ID: 3726)
  Prédit: 'map'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'map' → logprob: -0.0012459473218768835
    2. '(map' → logprob: -7.376245975494385
    3. ' map' → logprob: -7.626245975494385
    4. '[' → logprob: -9.376245498657227
    5. 'list' → logprob: -10.126245498657227
    6. '[int' → logprob: -13.001245498657227
    7. 'tuple' → logprob: -13.001245498657227
    8. '	map' → logprob: -14.751245498657227
    9. '   ' → logprob: -14.876245498657227
    10. 'int' → logprob: -15.251245498657227

Token 52: '(int' (ID: 2742)
  Prédit: '(int'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(int' → logprob: -0.000682530109770596
    2. '(' → logprob: -7.375682353973389
    3. '(stdin' → logprob: -10.250682830810547
    4. 'int' → logprob: -11.500682830810547
    5. '<int' → logprob: -12.750682830810547
    6. '(str' → logprob: -13.125682830810547
    7. '(input' → logprob: -13.125682830810547
    8. ',int' → logprob: -14.000682830810547
    9. '[int' → logprob: -14.250682830810547
    10. '(eval' → logprob: -14.750682830810547

Token 53: ',' (ID: 11)
  Prédit: '(stdin'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(stdin' → logprob: -0.00012856863031629473
    2. 'stdin' → logprob: -9.250128746032715
    3. ',' → logprob: -11.625128746032715
    4. '(std' → logprob: -11.750128746032715
    5. '(' → logprob: -12.000128746032715
    6. ' stdin' → logprob: -13.125128746032715
    7. '(st' → logprob: -13.250128746032715
    8. '(input' → logprob: -13.750128746032715
    9. ' (' → logprob: -13.875128746032715
    10. '.stdin' → logprob: -14.125128746032715

Token 54: ' stdin' (ID: 75143)
  Prédit: 'stdin'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'stdin' → logprob: -0.1310853362083435
    2. ' stdin' → logprob: -2.1310853958129883
    3. '(stdin' → logprob: -5.506085395812988
    4. '.stdin' → logprob: -9.381085395812988
    5. 'std' → logprob: -14.131085395812988
    6. '   ' → logprob: -14.506085395812988
    7. 'st' → logprob: -14.881085395812988
    8. '```' → logprob: -15.881085395812988
    9. ' ' → logprob: -16.006084442138672
    10. 'stin' → logprob: -16.256084442138672

Token 55: '.readline' (ID: 74673)
  Prédit: '.readline'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '.readline' → logprob: -0.349856972694397
    2. '().' → logprob: -1.224856972694397
    3. '.' → logprob: -7.599856853485107
    4. '()' → logprob: -7.974856853485107
    5. '.read' → logprob: -8.474857330322266
    6. '.readlines' → logprob: -8.724857330322266
    7. '())' → logprob: -9.349857330322266
    8. '()))' → logprob: -10.349857330322266
    9. 'read' → logprob: -10.599857330322266
    10. ')' → logprob: -10.849857330322266

Token 56: '().' (ID: 1454)
  Prédit: '().'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '().' → logprob: -0.010463215410709381
    2. '()))' → logprob: -4.760463237762451
    3. '()' → logprob: -6.510463237762451
    4. '())))' → logprob: -8.010462760925293
    5. '())' → logprob: -10.760462760925293
    6. '()));' → logprob: -13.635462760925293
    7. '()[' → logprob: -14.010462760925293
    8. '.readline' → logprob: -14.135462760925293
    9. '))' → logprob: -14.385462760925293
    10. '(' → logprob: -14.635462760925293

Token 57: 'split' (ID: 13627)
  Prédit: 'split'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'split' → logprob: -0.030018562451004982
    2. 'strip' → logprob: -3.5300185680389404
    3. 'rstrip' → logprob: -8.28001880645752
    4. ' split' → logprob: -11.15501880645752
    5. '(split' → logprob: -15.65501880645752
    6. ' strip' → logprob: -16.405017852783203
    7. 'read' → logprob: -17.405017852783203
    8. 'spl' → logprob: -17.905017852783203
    9. ' ' → logprob: -18.530017852783203
    10. 'rs' → logprob: -18.780017852783203

Token 58: '())))' (ID: 168342)
  Prédit: '())))'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '())))' → logprob: -0.14668254554271698
    2. ')))' → logprob: -2.6466825008392334
    3. '()))' → logprob: -2.8966825008392334
    4. '()' → logprob: -4.7716827392578125
    5. '())' → logprob: -6.5216827392578125
    6. '())))
' → logprob: -8.521682739257812
    7. '))' → logprob: -8.896682739257812
    8. '(' → logprob: -9.896682739257812
    9. ')' → logprob: -12.146682739257812
    10. ' ' → logprob: -13.146682739257812


RÉSUMÉ:
--------------------------------------------------------------------------------
Total des tokens analysés: 56
Tokens correctement prédits (1ère position, stricte): 24
Tokens correctement prédits (1ère position, avec adaptation): 24
Tokens correctement prédits (top 10): 41
Précision stricte (1ère position): 42.86%
Précision adaptée (1ère position): 42.86%
Précision (top 10): 73.21%
================================================================================
